{"buggy_code": ["define( [\n\t\"../core\",\n\t\"../var/document\",\n\t\"../ajax\"\n], function( jQuery, document ) {\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /(?:java|ecma)script/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and global\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t\ts.global = false;\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\n\t\tvar script,\n\t\t\thead = document.head || jQuery( \"head\" )[ 0 ] || document.documentElement;\n\n\t\treturn {\n\n\t\t\tsend: function( _, callback ) {\n\n\t\t\t\tscript = document.createElement( \"script\" );\n\n\t\t\t\tif ( s.scriptCharset ) {\n\t\t\t\t\tscript.charset = s.scriptCharset;\n\t\t\t\t}\n\n\t\t\t\tscript.src = s.url;\n\n\t\t\t\t// Attach handlers for all browsers\n\t\t\t\tscript.onload = script.onreadystatechange = function( _, isAbort ) {\n\n\t\t\t\t\tif ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {\n\n\t\t\t\t\t\t// Handle memory leak in IE\n\t\t\t\t\t\tscript.onload = script.onreadystatechange = null;\n\n\t\t\t\t\t\t// Remove the script\n\t\t\t\t\t\tif ( script.parentNode ) {\n\t\t\t\t\t\t\tscript.parentNode.removeChild( script );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Dereference the script\n\t\t\t\t\t\tscript = null;\n\n\t\t\t\t\t\t// Callback if not abort\n\t\t\t\t\t\tif ( !isAbort ) {\n\t\t\t\t\t\t\tcallback( 200, \"success\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\thead.appendChild( script );\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( script ) {\n\t\t\t\t\tscript.onload( undefined, true );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n} );\n", "var isIE8 = /msie 8\\.0/i.test( window.navigator.userAgent );\n\nQUnit.module( \"ajax\", {\n\tsetup: function() {\n\t\tif ( !isIE8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar jsonpCallback = this.jsonpCallback = jQuery.ajaxSettings.jsonpCallback;\n\t\tjQuery.ajaxSettings.jsonpCallback = function() {\n\t\t\tvar callback = jsonpCallback.apply( this, arguments );\n\t\t\tGlobals.register( callback );\n\t\t\treturn callback;\n\t\t};\n\t},\n\tteardown: function() {\n\t\tjQuery( document ).off( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError ajaxSuccess\" );\n\t\tmoduleTeardown.apply( this, arguments );\n\t}\n} );\n\n( function() {\n\tQUnit.test( \"Unit Testing Environment\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tassert.ok( hasPHP, \"Running in an environment with PHP support. The AJAX tests only run if the environment supports PHP!\" );\n\t\tassert.ok( !isLocal, \"Unit tests are not ran from file:// (especially in Chrome. If you must test from file:// with Chrome, run it with the --allow-file-access-from-files flag!)\" );\n\t} );\n\n\tif ( !jQuery.ajax || ( isLocal && !hasPHP ) ) {\n\t\treturn;\n\t}\n\n\tfunction addGlobalEvents( expected, assert ) {\n\t\treturn function() {\n\t\t\texpected = expected || \"\";\n\t\t\tjQuery( document ).on( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError ajaxSuccess\", function( e ) {\n\t\t\t\tassert.ok( expected.indexOf( e.type ) !== -1, e.type );\n\t\t\t} );\n\t\t};\n\t}\n\n//----------- jQuery.ajax()\n\n\ttestIframeWithCallback(\n\t\t\"XMLHttpRequest - Attempt to block tests because of dangling XHR requests (IE)\",\n\t\t\"ajax/unreleasedXHR.html\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( true, \"done\" );\n\t\t}\n\t);\n\n\tajaxTest( \"jQuery.ajax() - success callbacks\", 8, function( assert ) {\n\t    return {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks - (url, options) syntax\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\tcreate: function( options ) {\n\t\t\t\treturn jQuery.ajax( url( \"data/name.html\" ), options );\n\t\t\t},\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks (late binding)\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.always( function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t} ).done( function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks (oncomplete binding)\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: true,\n\t\t\tcomplete: function( xhr ) {\n\t\t\t\txhr.always( function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t} ).done( function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - error callbacks\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert ),\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort();\n\t\t\t},\n\t\t\terror: function() {\n\t\t\t\tassert.ok( true, \"error\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - textStatus and errorThrown values\", 4, function( assert ) {\n\t\treturn [ {\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\terror: function( _, textStatus, errorThrown ) {\n\t\t\t\tassert.strictEqual( textStatus, \"abort\", \"textStatus is 'abort' for abort\" );\n\t\t\t\tassert.strictEqual( errorThrown, \"abort\", \"errorThrown is 'abort' for abort\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\terror: function( _, textStatus, errorThrown ) {\n\t\t\t\tassert.strictEqual( textStatus, \"mystatus\", \"textStatus is 'mystatus' for abort('mystatus')\" );\n\t\t\t\tassert.strictEqual( errorThrown, \"mystatus\", \"errorThrown is 'mystatus' for abort('mystatus')\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort( \"mystatus\" );\n\t\t\t}\n\t\t} ];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - responseText on error\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/errorWithText.php\" ),\n\t\t\terror: function( xhr ) {\n\t\t\t\tassert.strictEqual( xhr.responseText, \"plain text message\", \"Test jqXHR.responseText is filled for HTTP errors\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajax() - retry with jQuery.ajax( this )\", 2, function( assert ) {\n\t\tvar previousUrl,\n\t\t\tfirstTime = true;\n\t\tjQuery.ajax( {\n\t\t\turl: url( \"data/errorWithText.php\" ),\n\t\t\terror: function() {\n\t\t\t\tif ( firstTime ) {\n\t\t\t\t\tfirstTime = false;\n\t\t\t\t\tjQuery.ajax( this );\n\t\t\t\t} else {\n\t\t\t\t\tassert.ok( true, \"Test retrying with jQuery.ajax(this) works\" );\n\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\turl: url( \"data/errorWithText.php\" ),\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\"x\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\t\tif ( !previousUrl ) {\n\t\t\t\t\t\t\t\tpreviousUrl = this.url;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tassert.strictEqual( this.url, previousUrl, \"url parameters are not re-appended\" );\n\t\t\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror: function() {\n\t\t\t\t\t\t\tjQuery.ajax( this );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - headers\", 5, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( document ).ajaxSend( function( evt, xhr ) {\n\t\t\t\t\txhr.setRequestHeader( \"ajax-send\", \"test\" );\n\t\t\t\t} );\n\t\t\t},\n\t\t\turl: url( \"data/headers.php?keys=siMPle_SometHing-elsE_OthEr_Nullable_undefined_Empty_ajax-send\" ),\n\t\t\theaders: {\n\t\t\t\t\"siMPle\": \"value\",\n\t\t\t\t\"SometHing-elsE\": \"other value\",\n\t\t\t\t\"OthEr\": \"something else\",\n\t\t\t\t\"Nullable\": null,\n\t\t\t\t\"undefined\": undefined\n\n\t\t\t\t// Support: Firefox\n\t\t\t\t// Not all browsers allow empty-string headers\n\t\t\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=815299\n\t\t\t\t//\"Empty\": \"\"\n\t\t\t},\n\t\t\tsuccess: function( data, _, xhr ) {\n\t\t\t\tvar i, emptyHeader,\n\t\t\t\t\trequestHeaders = jQuery.extend( this.headers, {\n\t\t\t\t\t\t\"ajax-send\": \"test\"\n\t\t\t\t\t} ),\n\t\t\t\t\ttmp = [];\n\t\t\t\tfor ( i in requestHeaders ) {\n\t\t\t\t\ttmp.push( i, \": \", requestHeaders[ i ] + \"\", \"\\n\" );\n\t\t\t\t}\n\t\t\t\ttmp = tmp.join( \"\" );\n\n\t\t\t\tassert.strictEqual( data, tmp, \"Headers were sent\" );\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"Sample-Header\" ), \"Hello World\", \"Sample header received\" );\n\t\t\t\tassert.ok( data.indexOf( \"undefined\" ) < 0, \"Undefined header value was not sent\" );\n\n\t\t\t\temptyHeader = xhr.getResponseHeader( \"Empty-Header\" );\n\t\t\t\tif ( emptyHeader === null ) {\n\t\t\t\t\tassert.ok( true, \"Firefox doesn't support empty headers\" );\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual( emptyHeader, \"\", \"Empty header received\" );\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"Sample-Header2\" ), \"Hello World 2\", \"Second sample header received\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - Accept header\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/headers.php?keys=accept\" ),\n\t\t\theaders: {\n\t\t\t\tAccept: \"very wrong accept value\"\n\t\t\t},\n\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\txhr.setRequestHeader( \"Accept\", \"*/*\" );\n\t\t\t},\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.strictEqual( data, \"accept: */*\\n\", \"Test Accept header is set to last value provided\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - contentType\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"data/headers.php?keys=content-type\" ),\n\t\t\t\tcontentType: \"test\",\n\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\tassert.strictEqual( data, \"content-type: test\\n\", \"Test content-type is sent when options.contentType is set\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"data/headers.php?keys=content-type\" ),\n\t\t\t\tcontentType: false,\n\t\t\t\tsuccess: function( data ) {\n\n\t\t\t\t\t// Some server/interpreter combinations always supply a Content-Type to scripts\n\t\t\t\t\tdata = data || \"content-type: \\n\";\n\t\t\t\t\tassert.strictEqual( data, \"content-type: \\n\", \"Test content-type is not set when options.contentType===false\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - protocol-less urls\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"//somedomain.com\",\n\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\tassert.equal( settings.url, location.protocol + \"//somedomain.com\", \"Make sure that the protocol is added.\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - hash\", 3, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: \"data/name.html#foo\",\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"data/name.html\", \"Make sure that the URL is trimmed.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"data/name.html?abc#foo\",\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"data/name.html?abc\", \"Make sure that the URL is trimmed.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"data/name.html?abc#foo\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"test\": 123\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"data/name.html?abc&test=123\", \"Make sure that the URL is trimmed.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - cross-domain detection\", 8, function( assert ) {\n\t\tfunction request( url, title, crossDomainOrOptions ) {\n\t\t\treturn jQuery.extend( {\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\turl: url,\n\t\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\t\tassert.ok( crossDomainOrOptions === false ? !s.crossDomain : s.crossDomain, title );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}, crossDomainOrOptions );\n\t\t}\n\n\t\tvar loc = document.location,\n\t\t\tsamePort = loc.port || ( loc.protocol === \"http:\" ? 80 : 443 ),\n\t\t\totherPort = loc.port === 666 ? 667 : 666,\n\t\t\totherProtocol = loc.protocol === \"http:\" ? \"https:\" : \"http:\";\n\n\t\treturn [\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.hostname + \":\" + samePort,\n\t\t\t\t\"Test matching ports are not detected as cross-domain\",\n\t\t\t\tfalse\n\t\t\t),\n\t\t\trequest(\n\t\t\t\totherProtocol + \"//\" + loc.host,\n\t\t\t\t\"Test different protocols are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"app:/path\",\n\t\t\t\t\"Adobe AIR app:/ URL detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//example.invalid:\" + ( loc.port || 80 ),\n\t\t\t\t\"Test different hostnames are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.hostname + \":\" + otherPort,\n\t\t\t\t\"Test different ports are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"about:blank\",\n\t\t\t\t\"Test about:blank is detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.host,\n\t\t\t\t\"Test forced crossDomain is detected as cross-domain\",\n\t\t\t\t{\n\t\t\t\t\tcrossDomain: true\n\t\t\t\t}\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\" http://otherdomain.com\",\n\t\t\t\t\"Cross-domain url with leading space is detected as cross-domain\"\n\t\t\t)\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - abort\", 9, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxError ajaxComplete\", assert ),\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tassert.strictEqual( xhr.readyState, 1, \"XHR readyState indicates successful dispatch\" );\n\t\t\t\txhr.abort();\n\t\t\t\tassert.strictEqual( xhr.readyState, 0, \"XHR readyState indicates successful abortion\" );\n\t\t\t},\n\t\t\terror: true,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - events with context\", 12, function( assert ) {\n\t\tvar context = document.createElement( \"div\" );\n\n\t\tfunction event( e ) {\n\t\t\tassert.equal( this, context, e.type );\n\t\t}\n\n\t\tfunction callback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( this, context, \"context is preserved on callback \" + msg );\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( context ).appendTo( \"#foo\" )\n\t\t\t\t\t.ajaxSend( event )\n\t\t\t\t\t.ajaxComplete( event )\n\t\t\t\t\t.ajaxError( event )\n\t\t\t\t\t.ajaxSuccess( event );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\tsuccess: callback( \"success\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t}, {\n\t\t\t\turl: url( \"data/404.html\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\terror: callback( \"error\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t} ]\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - events without context\", 3, function( assert ) {\n\t\tfunction nocallback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( typeof this.url, \"string\", \"context is settings on callback \" + msg );\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\turl: url( \"data/404.html\" ),\n\t\t\tbeforeSend: nocallback( \"beforeSend\" ),\n\t\t\terror: nocallback( \"error\" ),\n\t\t\tcomplete:  nocallback( \"complete\" )\n\t\t};\n\t} );\n\n\tajaxTest( \"#15118 - jQuery.ajax() - function without jQuery.event\", 1, function( assert ) {\n\t\tvar holder;\n\t\treturn {\n\t\t\turl: url( \"data/json.php\" ),\n\t\t\tsetup: function() {\n\t\t\t\tholder = jQuery.event;\n\t\t\t\tdelete jQuery.event;\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"Call can be made without jQuery.event\" );\n\t\t\t\tjQuery.event = holder;\n\t\t\t},\n\t\t\tsuccess: true\n\t\t};\n\t} );\n\n\tajaxTest( \"#15160 - jQuery.ajax() - request manually aborted in ajaxSend\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( document ).on( \"ajaxSend\", function( e, jqXHR ) {\n\t\t\t\t\tjqXHR.abort();\n\t\t\t\t} );\n\n\t\t\t\tjQuery( document ).on( \"ajaxError ajaxComplete\", function( e, jqXHR ) {\n\t\t\t\t\tassert.equal( jqXHR.statusText, \"abort\", \"jqXHR.statusText equals abort on global ajaxComplete and ajaxError events\" );\n\t\t\t\t} );\n\t\t\t},\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\terror: true,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - context modification\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tcontext: {},\n\t\t\tbeforeSend: function() {\n\t\t\t\tthis.test = \"foo\";\n\t\t\t},\n\t\t\tafterSend: function() {\n\t\t\t\tassert.strictEqual( this.context.test, \"foo\", \"Make sure the original object is maintained.\" );\n\t\t\t},\n\t\t\tsuccess: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - context modification through ajaxSetup\", 3, function( assert ) {\n\t\tvar obj = {};\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery.ajaxSetup( {\n\t\t\t\t\tcontext: obj\n\t\t\t\t} );\n\t\t\t\tassert.strictEqual( jQuery.ajaxSettings.context, obj, \"Make sure the context is properly set in ajaxSettings.\" );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.strictEqual( this, obj, \"Make sure the original object is maintained.\" );\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\tcontext: {},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( this !== obj, \"Make sure overriding context is possible.\" );\n\t\t\t\t}\n\t\t\t} ]\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - disabled globals\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"\", assert ),\n\t\t\tglobal: false,\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - xml: non-namespace elements inside namespaced elements\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/with_fries.xml\" ),\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( resp ) {\n\t\t\t\tassert.equal( jQuery( \"properties\", resp ).length, 1, \"properties in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"jsconf\", resp ).length, 1, \"jsconf in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"thing\", resp ).length, 2, \"things in responseXML\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - xml: non-namespace elements inside namespaced elements (over JSONP)\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/with_fries_over_jsonp.php\" ),\n\t\t\tdataType: \"jsonp xml\",\n\t\t\tsuccess: function( resp ) {\n\t\t\t\tassert.equal( jQuery( \"properties\", resp ).length, 1, \"properties in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"jsconf\", resp ).length, 1, \"jsconf in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"thing\", resp ).length, 2, \"things in responseXML\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - HEAD requests\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\ttype: \"HEAD\",\n\t\t\t\tsuccess: function( data, status, xhr ) {\n\t\t\t\t\tassert.ok( /Date/i.test( xhr.getAllResponseHeaders() ), \"No Date in HEAD response\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\tdata: {\n\t\t\t\t\t\"whip_it\": \"good\"\n\t\t\t\t},\n\t\t\t\ttype: \"HEAD\",\n\t\t\t\tsuccess: function( data, status, xhr ) {\n\t\t\t\t\tassert.ok( /Date/i.test( xhr.getAllResponseHeaders() ), \"No Date in HEAD response with data\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - beforeSend\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tthis.check = true;\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( this.check, \"check beforeSend was executed\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - beforeSend, cancel request manually\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function() {\n\t\t\t\treturn jQuery.ajax( {\n\t\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\t\t\tassert.ok( true, \"beforeSend got called, canceling\" );\n\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"canceled request must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - dataType html\", 5, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testFoo\" );\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\tdataType: \"html\",\n\t\t\turl: url( \"data/test.html\" ),\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.ok( data.match( /^html text/ ), \"Check content for datatype html\" );\n\t\t\t\tjQuery( \"#ap\" ).html( data );\n\t\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated for datatype html\" );\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script src was evaluated for datatype html\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - synchronous request\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/json_obj.js\" ),\n\t\t\tdataType: \"text\",\n\t\t\tasync: false,\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tassert.ok( /^\\{ \"data\"/.test( xhr.responseText ), \"check returned text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - synchronous request with callbacks\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/json_obj.js\" ),\n\t\t\tasync: false,\n\t\t\tdataType: \"text\",\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tvar result;\n\t\t\t\txhr.done( function( data ) {\n\t\t\t\t\tassert.ok( true, \"success callback executed\" );\n\t\t\t\t\tresult = data;\n\t\t\t\t} );\n\t\t\t\tassert.ok( /^\\{ \"data\"/.test( result ), \"check returned text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajax(), jQuery.get[Script|JSON](), jQuery.post(), pass-through request object\", 8, function( assert ) {\n\t\tvar target = \"data/name.html\",\n\t\t\tsuccessCount = 0,\n\t\t\terrorCount = 0,\n\t\t\terrorEx = \"\",\n\t\t\tsuccess = function() {\n\t\t\t\tsuccessCount++;\n\t\t\t};\n\t\tjQuery( document ).on( \"ajaxError.passthru\", function( e, xml ) {\n\t\t\terrorCount++;\n\t\t\terrorEx += \": \" + xml.status;\n\t\t} );\n\t\tjQuery( document ).one( \"ajaxStop\", function() {\n\t\t\tassert.equal( successCount, 5, \"Check all ajax calls successful\" );\n\t\t\tassert.equal( errorCount, 0, \"Check no ajax errors (status\" + errorEx + \")\" );\n\t\t\tjQuery( document ).off( \"ajaxError.passthru\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t\tGlobals.register( \"testBar\" );\n\n\t\tassert.ok( jQuery.get( url( target ), success ), \"get\" );\n\t\tassert.ok( jQuery.post( url( target ), success ), \"post\" );\n\t\tassert.ok( jQuery.getScript( url( \"data/testbar.php\" ), success ), \"script\" );\n\t\tassert.ok( jQuery.getJSON( url( \"data/json_obj.js\" ), success ), \"json\" );\n\t\tassert.ok( jQuery.ajax( {\n\t\t\turl: url( target ),\n\t\t\tsuccess: success\n\t\t} ), \"generic\" );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - cache\", 12, function( assert ) {\n\t\tvar re = /_=(.*?)(&|$)/g;\n\n\t\tfunction request( url, title ) {\n\t\t\treturn {\n\t\t\t\turl: url,\n\t\t\t\tcache: false,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tvar parameter, tmp;\n\t\t\t\t\twhile ( ( tmp = re.exec( this.url ) ) ) {\n\t\t\t\t\t\tassert.strictEqual( parameter, undefined, title + \": only one 'no-cache' parameter\" );\n\t\t\t\t\t\tparameter = tmp[ 1 ];\n\t\t\t\t\t\tassert.notStrictEqual( parameter, \"tobereplaced555\", title + \": parameter (if it was there) was replaced\" );\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t};\n\t\t}\n\n\t\treturn [\n\t\t\trequest(\n\t\t\t\t\"data/text.php\",\n\t\t\t\t\"no parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?pizza=true\",\n\t\t\t\t\"1 parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?_=tobereplaced555\",\n\t\t\t\t\"_= parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?pizza=true&_=tobereplaced555\",\n\t\t\t\t\"1 parameter and _=\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?_=tobereplaced555&tv=false\",\n\t\t\t\t\"_= and 1 parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?name=David&_=tobereplaced555&washere=true\",\n\t\t\t\t\"2 parameters surrounding _=\"\n\t\t\t)\n\t\t];\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\t\tajaxTest( \"#8205 - jQuery.ajax() - JSONP - re-use callbacks name\" + label, 4, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: \"data/jsonp.php\",\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\tbeforeSend: function( jqXHR, s ) {\n\t\t\t\t\ts.callback = s.jsonpCallback;\n\n\t\t\t\t\tassert.ok( this.callback in window, \"JSONP callback name is in the window\" );\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tvar previous = this;\n\n\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\tprevious.jsonpCallback,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\"jsonpCallback option is set back to default in callbacks\"\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( isIE8 ) {\n\t\t\t\t\t\tassert.ok( true, \"IE8 can't remove property from the window\" );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.ok(\n\t\t\t\t\t\t\t!( this.callback in window ),\n\t\t\t\t\t\t\t\"JSONP callback name was removed from the window\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\turl: \"data/jsonp.php\",\n\t\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\t\tassert.strictEqual( this.jsonpCallback, previous.callback, \"JSONP callback name is re-used\" );\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote\", 2, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: window.location.href.replace( /[^\\/]*$/, \"\" ) + \"data/testbar.php\",\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (GET, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote with POST\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: window.location.href.replace( /[^\\/]*$/, \"\" ) + \"data/testbar.php\",\n\t\t\ttype: \"POST\",\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function( data, status ) {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (POST, no callback)\" );\n\t\t\t\tassert.strictEqual( status, \"success\", \"Script results returned (POST, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote with scheme-less URL\", 2, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: window.location.href.replace( /[^\\/]*$/, \"\" ).replace( /^.*?\\/\\//, \"//\" ) + \"data/testbar.php\",\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (GET, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - malformed JSON\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/badjson.js\",\n\t\t\tdataType: \"json\",\n\t\t\terror: function( xhr, msg, detailedMsg ) {\n\t\t\t\tassert.strictEqual( msg, \"parsererror\", \"A parse error occurred.\" );\n\t\t\t\tassert.ok( /(invalid|error|exception)/i.test( detailedMsg ), \"Detailed parsererror message provided\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script by content-type\", 2, function() {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: \"data/script.php\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"header\": \"script\"\n\t\t\t\t},\n\t\t\t\tsuccess: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"data/script.php\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"header\": \"ecma\"\n\t\t\t\t},\n\t\t\t\tsuccess: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - JSON by content-type\", 5, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/json.php\",\n\t\t\tdata: {\n\t\t\t\t\"header\": \"json\",\n\t\t\t\t\"json\": \"array\"\n\t\t\t},\n\t\t\tsuccess: function( json ) {\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - JSON by content-type disabled with options\", 6, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/json.php\" ),\n\t\t\tdata: {\n\t\t\t\t\"header\": \"json\",\n\t\t\t\t\"json\": \"array\"\n\t\t\t},\n\t\t\tcontents: {\n\t\t\t\t\"json\": false\n\t\t\t},\n\t\t\tsuccess: function( text ) {\n\t\t\t\tassert.strictEqual( typeof text, \"string\", \"json wasn't auto-determined\" );\n\t\t\t\tvar json = jQuery.parseJSON( text );\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - simple get\", 1, function( assert ) {\n\t\treturn {\n\t\t\ttype: \"GET\",\n\t\t\turl: url( \"data/name.php?name=foo\" ),\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - simple post\", 1, function( assert ) {\n\t\treturn {\n\t\t\ttype: \"POST\",\n\t\t\turl: url( \"data/name.php\" ),\n\t\t\tdata: \"name=peter\",\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"pan\", \"Check for POST\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data option - empty bodies for non-GET requests\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/echoData.php\",\n\t\t\tdata: undefined,\n\t\t\ttype: \"post\",\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual( result, \"\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tvar ifModifiedNow = new Date();\n\n\tjQuery.each(\n\t\t/* jQuery.each arguments start */\n\t\t{\n\t\t\t\" (cache)\": true,\n\t\t\t\" (no cache)\": false\n\t\t},\n\t\tfunction( label, cache ) {\n\t\t\tjQuery.each(\n\t\t\t\t{\n\t\t\t\t\t\"If-Modified-Since\": \"if_modified_since.php\",\n\t\t\t\t\t\"Etag\": \"etag.php\"\n\t\t\t\t},\n\t\t\t\tfunction( type, url ) {\n\t\t\t\t\turl = \"data/\" + url + \"?ts=\" + ifModifiedNow++;\n\t\t\t\t\tQUnit.asyncTest( \"jQuery.ajax() - \" + type + \" support\" + label, 4, function( assert ) {\n\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\turl: url,\n\t\t\t\t\t\t\tifModified: true,\n\t\t\t\t\t\t\tcache: cache,\n\t\t\t\t\t\t\tsuccess: function( _, status ) {\n\t\t\t\t\t\t\t\tassert.strictEqual( status, \"success\", \"Initial status is 'success'\" );\n\t\t\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\t\t\turl: url,\n\t\t\t\t\t\t\t\t\tifModified: true,\n\t\t\t\t\t\t\t\t\tcache: cache,\n\t\t\t\t\t\t\t\t\tsuccess: function( data, status, jqXHR ) {\n\t\t\t\t\t\t\t\t\t\tassert.strictEqual( status, \"notmodified\", \"Following status is 'notmodified'\" );\n\t\t\t\t\t\t\t\t\t\tassert.strictEqual( jqXHR.status, 304, \"XHR status is 304\" );\n\t\t\t\t\t\t\t\t\t\tassert.equal( data, null, \"no response body is given\" );\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\t/* jQuery.each arguments end */\n\t);\n\n\tajaxTest( \"jQuery.ajax() - failing cross-domain (non-existing)\", 1, function( assert ) {\n\t\treturn {\n\n\t\t\t// see RFC 2606\n\t\t\turl: \"http://example.invalid\",\n\t\t\terror: function( xhr, _, e ) {\n\t\t\t\tassert.ok( true, \"file not found: \" + xhr.status + \" => \" + e );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - failing cross-domain\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"http://\" + externalHost,\n\t\t\terror: function( xhr, _, e ) {\n\t\t\t\tassert.ok( true, \"access denied: \" + xhr.status + \" => \" + e );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - atom+xml\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/atom+xml.php\" ),\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajax() - statusText\", 3, function( assert ) {\n\t\tjQuery.ajax( url( \"data/statusText.php?status=200&text=Hello\" ) ).done( function( _, statusText, jqXHR ) {\n\t\t\tassert.strictEqual( statusText, \"success\", \"callback status text ok for success\" );\n\t\t\tassert.ok( jqXHR.statusText === \"Hello\" || jqXHR.statusText === \"OK\", \"jqXHR status text ok for success (\" + jqXHR.statusText + \")\" );\n\t\t\tjQuery.ajax( url( \"data/statusText.php?status=404&text=World\" ) ).fail( function( jqXHR, statusText ) {\n\t\t\t\tassert.strictEqual( statusText, \"error\", \"callback status text ok for error\" );\n\t\t\t\tQUnit.start();\n\t\t\t} );\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajax() - statusCode\", 20, function( assert ) {\n\n\t\tvar count = 12;\n\n\t\tfunction countComplete() {\n\t\t\tif ( !--count ) {\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t}\n\n\t\tfunction createStatusCodes( name, isSuccess ) {\n\t\t\tname = \"Test \" + name + \" \" + ( isSuccess ? \"success\" : \"error\" );\n\t\t\treturn {\n\t\t\t\t200: function() {\n\t\t\t\t\tassert.ok( isSuccess, name );\n\t\t\t\t},\n\t\t\t\t404: function() {\n\t\t\t\t\tassert.ok( !isSuccess, name );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tjQuery.each(\n\t\t\t/* jQuery.each arguments start */\n\t\t\t{\n\t\t\t\t\"data/name.html\": true,\n\t\t\t\t\"data/someFileThatDoesNotExist.html\": false\n\t\t\t},\n\t\t\tfunction( uri, isSuccess ) {\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tstatusCode: createStatusCodes( \"in options\", isSuccess ),\n\t\t\t\t\tcomplete: countComplete\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: countComplete\n\t\t\t\t} ).statusCode( createStatusCodes( \"immediately with method\", isSuccess ) );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"on complete\", isSuccess ) );\n\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"very late binding\", isSuccess ) );\n\t\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tstatusCode: createStatusCodes( \"all (options)\", isSuccess ),\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"all (on complete)\", isSuccess ) );\n\t\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"all (very late binding)\", isSuccess ) );\n\t\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t}\n\t\t\t\t} ).statusCode( createStatusCodes( \"all (immediately with method)\", isSuccess ) );\n\n\t\t\t\tvar testString = \"\";\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tsuccess: function( a, b, jqXHR ) {\n\t\t\t\t\t\tassert.ok( isSuccess, \"success\" );\n\t\t\t\t\t\tvar statusCode = {};\n\t\t\t\t\t\tstatusCode[ jqXHR.status ] = function() {\n\t\t\t\t\t\t\ttestString += \"B\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tjqXHR.statusCode( statusCode );\n\t\t\t\t\t\ttestString += \"A\";\n\t\t\t\t\t},\n\t\t\t\t\terror: function( jqXHR ) {\n\t\t\t\t\t\tassert.ok( !isSuccess, \"error\" );\n\t\t\t\t\t\tvar statusCode = {};\n\t\t\t\t\t\tstatusCode[ jqXHR.status ] = function() {\n\t\t\t\t\t\t\ttestString += \"B\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tjqXHR.statusCode( statusCode );\n\t\t\t\t\t\ttestString += \"A\";\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\ttestString,\n\t\t\t\t\t\t\t\"AB\",\n\t\t\t\t\t\t\t\"Test statusCode callbacks are ordered like \" + ( isSuccess ? \"success\" :  \"error\" ) + \" callbacks\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t}\n\t\t\t/* jQuery.each arguments end*/\n\t\t);\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - transitive conversions\", 8, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"data/json.php\" ),\n\t\t\t\tconverters: {\n\t\t\t\t\t\"json myJson\": function( data ) {\n\t\t\t\t\t\tassert.ok( true, \"converter called\" );\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdataType: \"myJson\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"Transitive conversion worked\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 0 ], \"text\", \"response was retrieved as text\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 1 ], \"myjson\", \"request expected myjson dataType\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"data/json.php\" ),\n\t\t\t\tconverters: {\n\t\t\t\t\t\"json myJson\": function( data ) {\n\t\t\t\t\t\tassert.ok( true, \"converter called (*)\" );\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontents: false, /* headers are wrong so we ignore them */\n\t\t\t\tdataType: \"* myJson\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"Transitive conversion worked (*)\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 0 ], \"text\", \"response was retrieved as text (*)\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 1 ], \"myjson\", \"request expected myjson dataType (*)\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - overrideMimeType\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"data/json.php\" ),\n\t\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\t\txhr.overrideMimeType( \"application/json\" );\n\t\t\t\t},\n\t\t\t\tsuccess: function( json ) {\n\t\t\t\t\tassert.ok( json.data, \"Mimetype overridden using beforeSend\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"data/json.php\" ),\n\t\t\t\tmimeType: \"application/json\",\n\t\t\t\tsuccess: function( json ) {\n\t\t\t\t\tassert.ok( json.data, \"Mimetype overridden using mimeType option\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - empty json gets to error callback instead of success callback.\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/echoData.php\" ),\n\t\t\terror: function( _, __, error ) {\n\t\t\t\tassert.equal( typeof error === \"object\", true,  \"Didn't get back error object for empty json response\" );\n\t\t\t},\n\t\t\tdataType: \"json\"\n\t\t};\n\t} );\n\n\tajaxTest( \"#2688 - jQuery.ajax() - beforeSend, cancel request\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function() {\n\t\t\t\treturn jQuery.ajax( {\n\t\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\tassert.ok( true, \"beforeSend got called, canceling\" );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"canceled request must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#2806 - jQuery.ajax() - data option - evaluate function values\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/echoQuery.php\",\n\t\t\tdata: {\n\t\t\t\tkey: function() {\n\t\t\t\t\treturn \"value\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual( result, \"key=value\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"#7531 - jQuery.ajax() - Location object as url\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar xhr,\n\t\t\tsuccess = false;\n\t\ttry {\n\t\t\txhr = jQuery.ajax( {\n\t\t\t\turl: window.location\n\t\t\t} );\n\t\t\tsuccess = true;\n\t\t\txhr.abort();\n\t\t} catch ( e ) {\n\n\t\t}\n\t\tassert.ok( success, \"document.location did not generate exception\" );\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\t\tajaxTest( \"#7578 - jQuery.ajax() - JSONP - default for cache option\" + label, 1, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: \"data/jsonp.php\",\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tassert.strictEqual( this.cache, false, \"cache must be false on JSON request\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t};\n\t\t} );\n\t} );\n\n\tajaxTest( \"#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5\", 4, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax();\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With no arguments\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( \"data/name.html\" );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With only string URL argument\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( \"data/name.html\", {} );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With string URL param and map\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function( options ) {\n\t\t\t\t\treturn jQuery.ajax( options );\n\t\t\t\t},\n\t\t\t\turl: \"data/name.html\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"With only map\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tQUnit.test( \"#9887 - jQuery.ajax() - Context with circular references (#9887)\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tvar success = false,\n\t\t\tcontext = {};\n\t\tcontext.field = context;\n\t\ttry {\n\t\t\tjQuery.ajax( \"non-existing\", {\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tassert.ok( this === context, \"context was not deep extended\" );\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tsuccess = true;\n\t\t} catch ( e ) {\n\t\t\tconsole.log( e );\n\t\t}\n\t\tassert.ok( success, \"context with circular reference did not generate an exception\" );\n\t} );\n\n\tjQuery.each( [ \"as argument\", \"in settings object\" ], function( inSetting, title ) {\n\n\t\tfunction request( assert, url, test ) {\n\t\t\treturn {\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( inSetting ? { url: url } : url );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, ( test || url ) + \" \" + title );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tajaxTest( \"#10093 - jQuery.ajax() - falsy url \" + title, 4, function( assert ) {\n\t\t\treturn [\n\t\t\t\trequest( assert, \"\", \"empty string\" ),\n\t\t\t\trequest( assert, false ),\n\t\t\t\trequest( assert, null ),\n\t\t\t\trequest( assert, undefined )\n\t\t\t];\n\t\t} );\n\t} );\n\n\tajaxTest( \"#11151 - jQuery.ajax() - parse error body\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/errorWithJSON.php\" ),\n\t\t\tdataFilter: function( string ) {\n\t\t\t\tassert.ok( false, \"dataFilter called\" );\n\t\t\t\treturn string;\n\t\t\t},\n\t\t\terror: function( jqXHR ) {\n\t\t\t\tassert.strictEqual( jqXHR.responseText, \"{ \\\"code\\\": 40, \\\"message\\\": \\\"Bad Request\\\" }\", \"Error body properly set\" );\n\t\t\t\tassert.deepEqual( jqXHR.responseJSON, { code: 40, message: \"Bad Request\" }, \"Error body properly parsed\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/1x1.jpg\" ),\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.ok( data === undefined || /JFIF/.test( data ), \"success callback reached\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.asyncTest( \"#11743 - jQuery.ajax() - script, throws exception\", 1, function( assert ) {\n\n\t\t// Support: Android 2.3 only\n\t\t// Android 2.3 doesn't fire the window.onerror handler, just accept the reality there.\n\t\tif ( /android 2\\.3/i.test( navigator.userAgent ) ) {\n\t\t\tassert.ok( true, \"Test skipped, Android 2.3 doesn't fire window.onerror for \" +\n\t\t\t\t\"errors in dynamically included scripts\" );\n\t\t\tQUnit.start();\n\t\t\treturn;\n\t\t}\n\n\t\tvar onerror = window.onerror;\n\t\twindow.onerror = function() {\n\t\t\tassert.ok( true, \"Exception thrown\" );\n\t\t\twindow.onerror = onerror;\n\t\t\tQUnit.start();\n\t\t};\n\t\tjQuery.ajax( {\n\t\t\turl: \"data/badjson.js\",\n\t\t\tdataType: \"script\",\n\t\t\tthrows: true\n\t\t} );\n\t} );\n\n\tjQuery.each( [ \"method\", \"type\" ], function( _, globalOption ) {\n\t\tfunction request( assert, option ) {\n\t\t\tvar options = {\n\t\t\t\t\turl: url( \"data/echoData.php\" ),\n\t\t\t\t\tdata: \"hello\",\n\t\t\t\t\tsuccess: function( msg ) {\n\t\t\t\t\t\tassert.strictEqual( msg, \"hello\", \"Check for POST (no override)\" );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tif ( option ) {\n\t\t\t\toptions[ option ] = \"GET\";\n\t\t\t\toptions.success = function( msg ) {\n\t\t\t\t\tassert.strictEqual( msg, \"\", \"Check for no POST (overriding with \" + option + \")\" );\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn options;\n\t\t}\n\n\t\tajaxTest(\n\t\t\t\"#12004 - jQuery.ajax() - method is an alias of type - \" +\n\t\t\tglobalOption + \" set globally\", 3,\n\t\t\tfunction( assert ) {\n\t\t\t\treturn {\n\t\t\t\t\tsetup: function() {\n\t\t\t\t\t\tvar options = {};\n\t\t\t\t\t\toptions[ globalOption ] = \"POST\";\n\t\t\t\t\t\tjQuery.ajaxSetup( options );\n\t\t\t\t\t},\n\t\t\t\t\trequests: [\n\t\t\t\t\t\trequest( assert, \"type\" ),\n\t\t\t\t\t\trequest( assert, \"method\" ),\n\t\t\t\t\t\trequest( assert )\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t} );\n\n\tajaxTest( \"#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/dashboard.xml\",\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( ajaxXML ) {\n\t\t\t\tvar parsedXML = jQuery( jQuery.parseXML( \"<tab title=\\\"Added\\\">blibli</tab>\" ) ).find( \"tab\" );\n\t\t\t\tajaxXML = jQuery( ajaxXML );\n\t\t\t\ttry {\n\n\t\t\t\t\t// Android 2.3 doesn't automatically adopt nodes from foreign documents.\n\t\t\t\t\t// (see the comment in test/manipulation.js)\n\t\t\t\t\t// Support: Android 2.3\n\t\t\t\t\tif ( /android 2\\.3/i.test( navigator.userAgent ) ) {\n\t\t\t\t\t\tparsedXML = jQuery( ajaxXML[ 0 ].adoptNode( parsedXML[ 0 ] ) );\n\t\t\t\t\t}\n\t\t\t\t\tajaxXML.find( \"infowindowtab\" ).append( parsedXML );\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tassert.strictEqual( e, undefined, \"error\" );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( ajaxXML.find( \"tab\" ).length, 3, \"Parsed node was added properly\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13292 - jQuery.ajax() - converter is bypassed for 204 requests\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/nocontent.php\",\n\t\t\tdataType: \"testing\",\n\t\t\tconverters: {\n\t\t\t\t\"* testing\": function() {\n\t\t\t\t\tthrow \"converter was called\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( data, status, jqXHR ) {\n\t\t\t\tassert.strictEqual( jqXHR.status, 204, \"status code is 204\" );\n\t\t\t\tassert.strictEqual( status, \"nocontent\", \"status text is 'nocontent'\" );\n\t\t\t\tassert.strictEqual( data, undefined, \"data is undefined\" );\n\t\t\t},\n\t\t\terror: function( _, status, error ) {\n\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\tassert.strictEqual( status, \"parsererror\", \"Parser Error\" );\n\t\t\t\tassert.strictEqual( error, \"converter was called\", \"Converter was called\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13388 - jQuery.ajax() - responseXML\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/with_fries.xml\" ),\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( resp, _, jqXHR ) {\n\t\t\t\tassert.notStrictEqual( resp, undefined, \"XML document exists\" );\n\t\t\t\tassert.ok( \"responseXML\" in jqXHR, \"jqXHR.responseXML exists\" );\n\t\t\t\tassert.strictEqual( resp, jqXHR.responseXML, \"jqXHR.responseXML is set correctly\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13922 - jQuery.ajax() - converter is bypassed for HEAD requests\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/json.php\",\n\t\t\tmethod: \"HEAD\",\n\t\t\tdata: {\n\t\t\t\theader: \"yes\"\n\t\t\t},\n\t\t\tconverters: {\n\t\t\t\t\"text json\": function() {\n\t\t\t\t\tthrow \"converter was called\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( data, status ) {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\tassert.strictEqual( status, \"nocontent\", \"data is undefined\" );\n\t\t\t\tassert.strictEqual( data, undefined, \"data is undefined\" );\n\t\t\t},\n\t\t\terror: function( _, status, error ) {\n\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\tassert.strictEqual( status, \"parsererror\", \"Parser Error\" );\n\t\t\t\tassert.strictEqual( error, \"converter was called\", \"Converter was called\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\ttestIframeWithCallback(\n\t\t\"#14379 - jQuery.ajax() on unload\",\n\t\t\"ajax/onunload.html\",\n\t\tfunction( status, assert ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.strictEqual( status, \"success\", \"Request completed\" );\n\t\t}\n\t);\n\n\t// BrowserStack PATCH support sometimes breaks so on TestSwarm run the test in IE only.\n\t// Unfortunately, all IE versions gets special treatment in request object creation\n\t// so we need to test in all supported IE versions to be sure.\n\tif ( location.search.indexOf( \"swarmURL=\" ) === -1 || document.documentMode ) {\n\t\tajaxTest( \"#13240 - jQuery.ajax() - support non-RFC2616 methods\", 1, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: \"data/echoQuery.php\",\n\t\t\t\tmethod: \"PATCH\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t},\n\t\t\t\terror: function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t}\n\n\tajaxTest( \"#14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught\", 4, function( assert ) {\n\t\treturn [ {\n\t\t\turl: \"data/params_html.php\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\ttoString: function() {\n\t\t\t\t\tthrow \"Can't parse\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tprocessData: false,\n\t\t\tdone: function( data ) {\n\t\t\t\tassert.ok( false, \"done: \" + data );\n\t\t\t},\n\t\t\t\tfail: function( jqXHR, status, error ) {\n\t\t\t\t\tassert.ok( true, \"exception caught: \" + error );\n\t\t\t\t\tassert.strictEqual( jqXHR.status, 0, \"proper status code\" );\n\t\t\t\t\tassert.strictEqual( status, \"error\", \"proper status\" );\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\turl: \"http://domain.org:80d\",\n\t\t\t\tdone: function( data ) {\n\t\t\t\t\tassert.ok( false, \"done: \" + data );\n\t\t\t\t},\n\t\t\t\tfail: function( _, status, error ) {\n\t\t\t\t\tassert.ok( true, \"fail: \" + status + \" - \" + error );\n\t\t\t\t}\n\t\t\t} ];\n\t\t}\n\t);\n\n// //----------- jQuery.ajaxPrefilter()\n\n\tajaxTest( \"jQuery.ajaxPrefilter() - abort\", 1, function( assert ) {\n\t\treturn {\n\t\t\tdataType: \"prefix\",\n\t\t\tsetup: function() {\n\n\t\t\t\t// Ensure prefix does not throw an error\n\t\t\t\tjQuery.ajaxPrefilter( \"+prefix\", function( options, _, jqXHR ) {\n\t\t\t\t\tif ( options.abortInPrefilter ) {\n\t\t\t\t\t\tjqXHR.abort();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tabortInPrefilter: true,\n\t\t\terror: function() {\n\t\t\t\tassert.ok( false, \"error callback called\" );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"Request aborted by the prefilter must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n//----------- jQuery.ajaxSetup()\n\n\tQUnit.asyncTest( \"jQuery.ajaxSetup()\", 1, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\turl: url( \"data/name.php?name=foo\" ),\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t} );\n\t\tjQuery.ajax();\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajaxSetup({ timeout: Number }) - with global timeout\", 2, function( assert ) {\n\t\tvar passed = 0,\n\t\t\tpass = function() {\n\t\t\t\tassert.ok( passed++ < 2, \"Error callback executed\" );\n\t\t\t\tif ( passed === 2 ) {\n\t\t\t\t\tjQuery( document ).off( \"ajaxError.setupTest\" );\n\t\t\t\t\tQUnit.start();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfail = function( a, b ) {\n\t\t\t\tassert.ok( false, \"Check for timeout failed \" + a + \" \" + b );\n\t\t\t\tQUnit.start();\n\t\t\t};\n\n\t\tjQuery( document ).on( \"ajaxError.setupTest\", pass );\n\n\t\tjQuery.ajaxSetup( {\n\t\t\ttimeout: 1000\n\t\t} );\n\n\t\tjQuery.ajax( {\n\t\t\ttype: \"GET\",\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\terror: pass,\n\t\t\tsuccess: fail\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajaxSetup({ timeout: Number }) with localtimeout\", 1, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\ttimeout: 50\n\t\t} );\n\t\tjQuery.ajax( {\n\t\t\ttype: \"GET\",\n\t\t\ttimeout: 15000,\n\t\t\turl: url( \"data/name.php?wait=1\" ),\n\t\t\terror: function() {\n\t\t\t\tassert.ok( false, \"Check for local timeout failed\" );\n\t\t\t\tQUnit.start();\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"Check for local timeout\" );\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t} );\n\t} );\n\n//----------- jQuery.domManip()\n\n\tQUnit.test( \"#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tjQuery.ajaxSetup( {\n\t\t\ttype: \"POST\"\n\t\t} );\n\n\t\tjQuery( document ).on( \"ajaxStart ajaxStop\", function() {\n\t\t\tassert.ok( false, \"Global event triggered\" );\n\t\t} );\n\n\t\tjQuery( \"#qunit-fixture\" ).append( \"<script src='data/ajax/evalScript.php'></script>\" );\n\n\t\tjQuery( document ).off( \"ajaxStart ajaxStop\" );\n\t} );\n\n\tQUnit.test(\n\t\t\"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)\", 1,\n\t\tfunction( assert ) {\n\t\t\tvar done = assert.async();\n\n\t\t\tjQuery.ajaxSetup( {\n\t\t\t\ttype: \"POST\"\n\t\t\t} );\n\n\t\t\tjQuery( \"#qunit-fixture\" ).load( \"data/ajax/method.php\", function( method ) {\n\t\t\t\tassert.equal( method, \"GET\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test(\n\t\t\"#11402 - jQuery.domManip() - script in comments are properly evaluated\", 2,\n\t\tfunction( assert ) {\n\t\t\tjQuery( \"#qunit-fixture\" ).load( \"data/cleanScript.html\", assert.async() );\n\t\t}\n\t);\n\n//----------- jQuery.get()\n\n\tQUnit.asyncTest( \"jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes\", 2, function( assert ) {\n\t\tjQuery.get( url( \"data/dashboard.xml\" ), function( xml ) {\n\t\t\tvar content = [];\n\t\t\tjQuery( \"tab\", xml ).each( function() {\n\t\t\t\tcontent.push( jQuery( this ).text() );\n\t\t\t} );\n\t\t\tassert.strictEqual( content[ 0 ], \"blabla\", \"Check first tab\" );\n\t\t\tassert.strictEqual( content[ 1 ], \"blublu\", \"Check second tab\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"#8277 - jQuery.get( String, Function ) - data in ajaxSettings\", 1, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tdata: \"helloworld\"\n\t\t} );\n\t\tjQuery.get( url( \"data/echoQuery.php\" ), function( data ) {\n\t\t\tassert.ok( /helloworld$/.test( data ), \"Data from ajaxSettings was used\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n//----------- jQuery.getJSON()\n\n\tQUnit.asyncTest( \"jQuery.getJSON( String, Hash, Function ) - JSON array\", 5, function( assert ) {\n\t\tjQuery.getJSON(\n\t\t\turl( \"data/json.php\" ),\n\t\t\t{\n\t\t\t\t\"json\": \"array\"\n\t\t\t},\n\t\t\tfunction( json ) {\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t);\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.getJSON( String, Function ) - JSON object\", 2, function( assert ) {\n\t\tjQuery.getJSON( url( \"data/json.php\" ), function( json ) {\n\t\t\tif ( json && json[ \"data\" ] ) {\n\t\t\t\tassert.strictEqual( json[ \"data\" ][ \"lang\" ], \"en\", \"Check JSON: lang\" );\n\t\t\t\tassert.strictEqual( json[ \"data\" ].length, 25, \"Check JSON: length\" );\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.getJSON( String, Function ) - JSON object with absolute url to local content\", 2, function( assert ) {\n\t\tjQuery.getJSON( url( window.location.href.replace( /[^\\/]*$/, \"\" ) + \"data/json.php\" ), function( json ) {\n\t\t\tassert.strictEqual( json.data.lang, \"en\", \"Check JSON: lang\" );\n\t\t\tassert.strictEqual( json.data.length, 25, \"Check JSON: length\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n//----------- jQuery.getScript()\n\n\tQUnit.test( \"jQuery.getScript( String, Function ) - with callback\", 2,\n\t\tfunction( assert ) {\n\t\t\tvar done = assert.async();\n\n\t\t\tGlobals.register( \"testBar\" );\n\t\t\tjQuery.getScript( url( \"data/testbar.php\" ), function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script was evaluated\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test( \"jQuery.getScript( String, Function ) - no callback\", 1, function( assert ) {\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( url( \"data/testbar.php\" ) ).done( assert.async() );\n\t} );\n\n\tQUnit.test( \"#8082 - jQuery.getScript( String, Function ) - source as responseText\", 2, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( url( \"data/testbar.php\" ), function( data, _, jqXHR ) {\n\t\t\tassert.strictEqual( data, jqXHR.responseText, \"Same-domain script requests returns the source of the script\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n// //----------- jQuery.fn.load()\n\n\t// check if load can be called with only url\n\tQUnit.test( \"jQuery.fn.load( String )\", 2, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( \"data/name.html\", assert.async() );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load() - 404 error callbacks\", function( assert ) {\n\t\tassert.expect( 6 );\n\t\tvar done = assert.async();\n\n\t\taddGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert )();\n\t\tjQuery( document ).ajaxStop( done );\n\t\tjQuery( \"<div/>\" ).load( \"data/404.html\", function() {\n\t\t\tassert.ok( true, \"complete\" );\n\t\t} );\n\t} );\n\n\t// check if load can be called with url and null data\n\tQUnit.test( \"jQuery.fn.load( String, null )\", 2, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( \"data/name.html\", null, assert.async() );\n\t} );\n\n\t// check if load can be called with url and undefined data\n\tQUnit.test( \"jQuery.fn.load( String, undefined )\", 2, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( \"data/name.html\", undefined, assert.async() );\n\t} );\n\n\t// check if load can be called with only url\n\tQUnit.asyncTest( \"jQuery.fn.load( URL_SELECTOR )\", 1, function( assert ) {\n\t\tjQuery( \"#first\" ).load( \"data/test3.html div.user\", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 2, \"Verify that specific elements were injected\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\t// Selector should be trimmed to avoid leading spaces (#14773)\n\tQUnit.asyncTest( \"jQuery.fn.load( URL_SELECTOR with spaces )\", 1, function( assert ) {\n\t\tjQuery( \"#first\" ).load( \"data/test3.html   #superuser \", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 1, \"Verify that specific elements were injected\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Function ) - simple: inject text into DOM\", 2, function( assert ) {\n\t\tjQuery( \"#first\" ).load( url( \"data/name.html\" ), function() {\n\t\t\tassert.ok( /^ERROR/.test( jQuery( \"#first\" ).text() ), \"Check if content was injected into the DOM\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Function ) - check scripts\", 7, function( assert ) {\n\t\tvar verifyEvaluation = function() {\n\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script src was evaluated after load\" );\n\t\t\tassert.strictEqual( jQuery( \"#ap\" ).html(), \"bar\", \"Check if script evaluation has modified DOM\" );\n\t\t\tQUnit.start();\n\t\t};\n\n\t\tGlobals.register( \"testFoo\" );\n\t\tGlobals.register( \"testBar\" );\n\n\t\tjQuery( \"#first\" ).load( url( \"data/test.html\" ), function() {\n\t\t\tassert.ok( jQuery( \"#first\" ).html().match( /^html text/ ), \"Check content after loading html\" );\n\t\t\tassert.strictEqual( jQuery( \"#foo\" ).html(), \"foo\", \"Check if script evaluation has modified DOM\" );\n\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated after load\" );\n\t\t\tsetTimeout( verifyEvaluation, 600 );\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Function ) - check file with only a script tag\", 3, function( assert ) {\n\t\tGlobals.register( \"testFoo\" );\n\n\t\tjQuery( \"#first\" ).load( url( \"data/test2.html\" ), function() {\n\t\t\tassert.strictEqual( jQuery( \"#foo\" ).html(), \"foo\", \"Check if script evaluation has modified DOM\" );\n\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated after load\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings\", 2, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tdataFilter: function() {\n\t\t\t\treturn \"Hello World\";\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"<div/>\" ).load( url( \"data/name.html\" ), function( responseText ) {\n\t\t\tassert.strictEqual( jQuery( this ).html(), \"Hello World\", \"Test div was filled with filtered data\" );\n\t\t\tassert.strictEqual( responseText, \"Hello World\", \"Test callback receives filtered data\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Object, Function )\", 2, function( assert ) {\n\t\tjQuery( \"<div />\" ).load( url( \"data/params_html.php\" ), {\n\t\t\t\"foo\": 3,\n\t\t\t\"bar\": \"ok\"\n\t\t}, function() {\n\t\t\tvar $post = jQuery( this ).find( \"#post\" );\n\t\t\tassert.strictEqual( $post.find( \"#foo\" ).text(), \"3\", \"Check if a hash of data is passed correctly\" );\n\t\t\tassert.strictEqual( $post.find( \"#bar\" ).text(), \"ok\", \"Check if a hash of data is passed correctly\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, String, Function )\", 2, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery( \"<div />\" ).load( url( \"data/params_html.php\" ), \"foo=3&bar=ok\", function() {\n\t\t\tvar $get = jQuery( this ).find( \"#get\" );\n\t\t\tassert.strictEqual( $get.find( \"#foo\" ).text(), \"3\", \"Check if a string of data is passed correctly\" );\n\t\t\tassert.strictEqual( $get.find( \"#bar\" ).text(), \"ok\", \"Check if a   of data is passed correctly\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load() - callbacks get the correct parameters\", 8, function( assert ) {\n\t\tvar completeArgs = {};\n\t\tvar done = assert.async();\n\n\t\tjQuery.ajaxSetup( {\n\t\t\tsuccess: function( _, status, jqXHR ) {\n\t\t\t\tcompleteArgs[ this.url ] = [ jqXHR.responseText, status, jqXHR ];\n\t\t\t},\n\t\t\terror: function( jqXHR, status ) {\n\t\t\t\tcompleteArgs[ this.url ] = [ jqXHR.responseText, status, jqXHR ];\n\t\t\t}\n\t\t} );\n\n\t\tjQuery.when.apply(\n\t\t\tjQuery,\n\t\t\tjQuery.map( [\n\t\t\t\t{\n\t\t\t\t\ttype: \"success\",\n\t\t\t\t\turl: \"data/echoQuery.php?arg=pop\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"error\",\n\t\t\t\t\turl: \"data/404.php\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tfunction( options ) {\n\t\t\t\treturn jQuery.Deferred( function( defer ) {\n\t\t\t\t\tjQuery( \"#foo\" ).load( options.url, function() {\n\t\t\t\t\t\tvar args = arguments;\n\t\t\t\t\t\tassert.strictEqual( completeArgs[ options.url ].length, args.length, \"same number of arguments (\" + options.type + \")\" );\n\t\t\t\t\t\tjQuery.each( completeArgs[ options.url ], function( i, value ) {\n\t\t\t\t\t\t\tassert.strictEqual( args[ i ], value, \"argument #\" + i + \" is the same (\" + options.type + \")\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tdefer.resolve();\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( done );\n\t} );\n\n\tQUnit.test( \"#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json\", 1, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery.ajaxSetup( {\n\t\t\tdataType: \"json\"\n\t\t} );\n\t\tjQuery( document ).ajaxComplete( function( e, xml, s ) {\n\t\t\tassert.strictEqual( s.dataType, \"html\", \"Verify the load() dataType was html\" );\n\t\t\tjQuery( document ).off( \"ajaxComplete\" );\n\t\t\tdone();\n\t\t} );\n\t\tjQuery( \"#first\" ).load( \"data/test3.html\" );\n\t} );\n\n\tQUnit.test( \"#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in\", 1, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tvar data = {\n\t\t\t\"baz\": 1\n\t\t};\n\t\tjQuery.ajaxSetup( {\n\t\t\tdata: {\n\t\t\t\t\"foo\": \"bar\"\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#foo\" ).load( \"data/echoQuery.php\", data );\n\t\tjQuery( document ).ajaxComplete( function( event, jqXHR, options ) {\n\t\t\tassert.ok( ~options.data.indexOf( \"foo=bar\" ), \"Data from ajaxSettings was used\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n// //----------- jQuery.post()\n\n\tQUnit.test( \"jQuery.post() - data\", 3, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery.when(\n\t\t\tjQuery.post(\n\t\t\t\turl( \"data/name.php\" ),\n\t\t\t\t{\n\t\t\t\t\txml: \"5-2\",\n\t\t\t\t\tlength: 3\n\t\t\t\t},\n\t\t\t\tfunction( xml ) {\n\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t),\n\t\t\tjQuery.ajax( {\n\t\t\t\turl: url( \"data/echoData.php\" ),\n\t\t\t\ttype: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"test\": {\n\t\t\t\t\t\t\"length\": 7,\n\t\t\t\t\t\t\"foo\": \"bar\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\tassert.strictEqual( data, \"test%5Blength%5D=7&test%5Bfoo%5D=bar\", \"Check if a sub-object with a length param is serialized correctly\" );\n\t\t\t\t}\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.post( String, Hash, Function ) - simple with xml\", 4, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery.when(\n\t\t\tjQuery.post(\n\t\t\t\turl( \"data/name.php\" ),\n\t\t\t\t{\n\t\t\t\t\t\"xml\": \"5-2\"\n\t\t\t\t},\n\t\t\t\tfunction( xml ) {\n\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t),\n\t\t\tjQuery.post( url( \"data/name.php?xml=5-2\" ), {}, function( xml ) {\n\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery[get|post]( options ) - simple with xml\", 2, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery.when.apply( jQuery,\n\t\t\tjQuery.map( [ \"get\", \"post\" ], function( method ) {\n\t\t\t\treturn jQuery[ method ]( {\n\t\t\t\t\turl: url( \"data/name.php\" ),\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t\"xml\": \"5-2\"\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function( xml ) {\n\t\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n//----------- jQuery.active\n\n\tQUnit.test( \"jQuery.active\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( jQuery.active === 0, \"ajax active counter should be zero: \" + jQuery.active );\n\t} );\n\n} )();\n"], "fixing_code": ["define( [\n\t\"../core\",\n\t\"../var/document\",\n\t\"../ajax\"\n], function( jQuery, document ) {\n\n// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)\njQuery.ajaxPrefilter( function( s ) {\n    if ( s.crossDomain ) {\n        s.contents.script = false;\n    }\n} );\n\n// Install script dataType\njQuery.ajaxSetup( {\n\taccepts: {\n\t\tscript: \"text/javascript, application/javascript, \" +\n\t\t\t\"application/ecmascript, application/x-ecmascript\"\n\t},\n\tcontents: {\n\t\tscript: /(?:java|ecma)script/\n\t},\n\tconverters: {\n\t\t\"text script\": function( text ) {\n\t\t\tjQuery.globalEval( text );\n\t\t\treturn text;\n\t\t}\n\t}\n} );\n\n// Handle cache's special case and global\njQuery.ajaxPrefilter( \"script\", function( s ) {\n\tif ( s.cache === undefined ) {\n\t\ts.cache = false;\n\t}\n\tif ( s.crossDomain ) {\n\t\ts.type = \"GET\";\n\t\ts.global = false;\n\t}\n} );\n\n// Bind script tag hack transport\njQuery.ajaxTransport( \"script\", function( s ) {\n\n\t// This transport only deals with cross domain requests\n\tif ( s.crossDomain ) {\n\n\t\tvar script,\n\t\t\thead = document.head || jQuery( \"head\" )[ 0 ] || document.documentElement;\n\n\t\treturn {\n\n\t\t\tsend: function( _, callback ) {\n\n\t\t\t\tscript = document.createElement( \"script\" );\n\n\t\t\t\tif ( s.scriptCharset ) {\n\t\t\t\t\tscript.charset = s.scriptCharset;\n\t\t\t\t}\n\n\t\t\t\tscript.src = s.url;\n\n\t\t\t\t// Attach handlers for all browsers\n\t\t\t\tscript.onload = script.onreadystatechange = function( _, isAbort ) {\n\n\t\t\t\t\tif ( isAbort || !script.readyState || /loaded|complete/.test( script.readyState ) ) {\n\n\t\t\t\t\t\t// Handle memory leak in IE\n\t\t\t\t\t\tscript.onload = script.onreadystatechange = null;\n\n\t\t\t\t\t\t// Remove the script\n\t\t\t\t\t\tif ( script.parentNode ) {\n\t\t\t\t\t\t\tscript.parentNode.removeChild( script );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Dereference the script\n\t\t\t\t\t\tscript = null;\n\n\t\t\t\t\t\t// Callback if not abort\n\t\t\t\t\t\tif ( !isAbort ) {\n\t\t\t\t\t\t\tcallback( 200, \"success\" );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t};\n\n\t\t\t\t// Use native DOM manipulation to avoid our domManip AJAX trickery\n\t\t\t\thead.appendChild( script );\n\t\t\t},\n\n\t\t\tabort: function() {\n\t\t\t\tif ( script ) {\n\t\t\t\t\tscript.onload( undefined, true );\n\t\t\t\t}\n\t\t\t}\n\t\t};\n\t}\n} );\n\n} );\n", "var isIE8 = /msie 8\\.0/i.test( window.navigator.userAgent );\n\nQUnit.module( \"ajax\", {\n\tsetup: function() {\n\t\tif ( !isIE8 ) {\n\t\t\treturn;\n\t\t}\n\n\t\tvar jsonpCallback = this.jsonpCallback = jQuery.ajaxSettings.jsonpCallback;\n\t\tjQuery.ajaxSettings.jsonpCallback = function() {\n\t\t\tvar callback = jsonpCallback.apply( this, arguments );\n\t\t\tGlobals.register( callback );\n\t\t\treturn callback;\n\t\t};\n\t},\n\tteardown: function() {\n\t\tjQuery( document ).off( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError ajaxSuccess\" );\n\t\tmoduleTeardown.apply( this, arguments );\n\t}\n} );\n\n( function() {\n\tQUnit.test( \"Unit Testing Environment\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tassert.ok( hasPHP, \"Running in an environment with PHP support. The AJAX tests only run if the environment supports PHP!\" );\n\t\tassert.ok( !isLocal, \"Unit tests are not ran from file:// (especially in Chrome. If you must test from file:// with Chrome, run it with the --allow-file-access-from-files flag!)\" );\n\t} );\n\n\tif ( !jQuery.ajax || ( isLocal && !hasPHP ) ) {\n\t\treturn;\n\t}\n\n\tfunction addGlobalEvents( expected, assert ) {\n\t\treturn function() {\n\t\t\texpected = expected || \"\";\n\t\t\tjQuery( document ).on( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError ajaxSuccess\", function( e ) {\n\t\t\t\tassert.ok( expected.indexOf( e.type ) !== -1, e.type );\n\t\t\t} );\n\t\t};\n\t}\n\n//----------- jQuery.ajax()\n\n\ttestIframeWithCallback(\n\t\t\"XMLHttpRequest - Attempt to block tests because of dangling XHR requests (IE)\",\n\t\t\"ajax/unreleasedXHR.html\",\n\t\tfunction( assert ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.ok( true, \"done\" );\n\t\t}\n\t);\n\n\tajaxTest( \"jQuery.ajax() - success callbacks\", 8, function( assert ) {\n\t    return {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks - (url, options) syntax\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\tcreate: function( options ) {\n\t\t\t\treturn jQuery.ajax( url( \"data/name.html\" ), options );\n\t\t\t},\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - do not execute js (crossOrigin)\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function( options ) {\n\t\t\t\toptions.crossDomain = true;\n\t\t\t\treturn jQuery.ajax( url( \"data/script.php?header=ecma\" ), options );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - execute js for crossOrigin when dataType option is provided\", 3,\n\t\tfunction( assert ) {\n\t\t\treturn {\n\t\t\t\tcreate: function( options ) {\n\t\t\t\t\toptions.crossDomain = true;\n\t\t\t\t\toptions.dataType = \"script\";\n\t\t\t\t\treturn jQuery.ajax( url( \"data/script.php?header=ecma\" ), options );\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t},\n\t\t\t\tcomplete: function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\t);\n\n\tajaxTest( \"jQuery.ajax() - do not execute js (crossOrigin)\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function( options ) {\n\t\t\t\toptions.crossDomain = true;\n\t\t\t\treturn jQuery.ajax( url( \"data/script.php\" ), options );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks (late binding)\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.always( function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t} ).done( function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - success callbacks (oncomplete binding)\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxSuccess\", assert ),\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: true,\n\t\t\tcomplete: function( xhr ) {\n\t\t\t\txhr.always( function() {\n\t\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t\t} ).done( function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t} ).fail( function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t} );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - error callbacks\", 8, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert ),\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort();\n\t\t\t},\n\t\t\terror: function() {\n\t\t\t\tassert.ok( true, \"error\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - textStatus and errorThrown values\", 4, function( assert ) {\n\t\treturn [ {\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\terror: function( _, textStatus, errorThrown ) {\n\t\t\t\tassert.strictEqual( textStatus, \"abort\", \"textStatus is 'abort' for abort\" );\n\t\t\t\tassert.strictEqual( errorThrown, \"abort\", \"errorThrown is 'abort' for abort\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort();\n\t\t\t}\n\t\t},\n\t\t{\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\terror: function( _, textStatus, errorThrown ) {\n\t\t\t\tassert.strictEqual( textStatus, \"mystatus\", \"textStatus is 'mystatus' for abort('mystatus')\" );\n\t\t\t\tassert.strictEqual( errorThrown, \"mystatus\", \"errorThrown is 'mystatus' for abort('mystatus')\" );\n\t\t\t},\n\t\t\tafterSend: function( request ) {\n\t\t\t\trequest.abort( \"mystatus\" );\n\t\t\t}\n\t\t} ];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - responseText on error\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/errorWithText.php\" ),\n\t\t\terror: function( xhr ) {\n\t\t\t\tassert.strictEqual( xhr.responseText, \"plain text message\", \"Test jqXHR.responseText is filled for HTTP errors\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajax() - retry with jQuery.ajax( this )\", 2, function( assert ) {\n\t\tvar previousUrl,\n\t\t\tfirstTime = true;\n\t\tjQuery.ajax( {\n\t\t\turl: url( \"data/errorWithText.php\" ),\n\t\t\terror: function() {\n\t\t\t\tif ( firstTime ) {\n\t\t\t\t\tfirstTime = false;\n\t\t\t\t\tjQuery.ajax( this );\n\t\t\t\t} else {\n\t\t\t\t\tassert.ok( true, \"Test retrying with jQuery.ajax(this) works\" );\n\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\turl: url( \"data/errorWithText.php\" ),\n\t\t\t\t\t\tdata: {\n\t\t\t\t\t\t\t\"x\": 1\n\t\t\t\t\t\t},\n\t\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\t\tif ( !previousUrl ) {\n\t\t\t\t\t\t\t\tpreviousUrl = this.url;\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tassert.strictEqual( this.url, previousUrl, \"url parameters are not re-appended\" );\n\t\t\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t},\n\t\t\t\t\t\terror: function() {\n\t\t\t\t\t\t\tjQuery.ajax( this );\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t}\n\t\t} );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - headers\", 5, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( document ).ajaxSend( function( evt, xhr ) {\n\t\t\t\t\txhr.setRequestHeader( \"ajax-send\", \"test\" );\n\t\t\t\t} );\n\t\t\t},\n\t\t\turl: url( \"data/headers.php?keys=siMPle_SometHing-elsE_OthEr_Nullable_undefined_Empty_ajax-send\" ),\n\t\t\theaders: {\n\t\t\t\t\"siMPle\": \"value\",\n\t\t\t\t\"SometHing-elsE\": \"other value\",\n\t\t\t\t\"OthEr\": \"something else\",\n\t\t\t\t\"Nullable\": null,\n\t\t\t\t\"undefined\": undefined\n\n\t\t\t\t// Support: Firefox\n\t\t\t\t// Not all browsers allow empty-string headers\n\t\t\t\t// https://bugzilla.mozilla.org/show_bug.cgi?id=815299\n\t\t\t\t//\"Empty\": \"\"\n\t\t\t},\n\t\t\tsuccess: function( data, _, xhr ) {\n\t\t\t\tvar i, emptyHeader,\n\t\t\t\t\trequestHeaders = jQuery.extend( this.headers, {\n\t\t\t\t\t\t\"ajax-send\": \"test\"\n\t\t\t\t\t} ),\n\t\t\t\t\ttmp = [];\n\t\t\t\tfor ( i in requestHeaders ) {\n\t\t\t\t\ttmp.push( i, \": \", requestHeaders[ i ] + \"\", \"\\n\" );\n\t\t\t\t}\n\t\t\t\ttmp = tmp.join( \"\" );\n\n\t\t\t\tassert.strictEqual( data, tmp, \"Headers were sent\" );\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"Sample-Header\" ), \"Hello World\", \"Sample header received\" );\n\t\t\t\tassert.ok( data.indexOf( \"undefined\" ) < 0, \"Undefined header value was not sent\" );\n\n\t\t\t\temptyHeader = xhr.getResponseHeader( \"Empty-Header\" );\n\t\t\t\tif ( emptyHeader === null ) {\n\t\t\t\t\tassert.ok( true, \"Firefox doesn't support empty headers\" );\n\t\t\t\t} else {\n\t\t\t\t\tassert.strictEqual( emptyHeader, \"\", \"Empty header received\" );\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( xhr.getResponseHeader( \"Sample-Header2\" ), \"Hello World 2\", \"Second sample header received\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - Accept header\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/headers.php?keys=accept\" ),\n\t\t\theaders: {\n\t\t\t\tAccept: \"very wrong accept value\"\n\t\t\t},\n\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\txhr.setRequestHeader( \"Accept\", \"*/*\" );\n\t\t\t},\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.strictEqual( data, \"accept: */*\\n\", \"Test Accept header is set to last value provided\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - contentType\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"data/headers.php?keys=content-type\" ),\n\t\t\t\tcontentType: \"test\",\n\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\tassert.strictEqual( data, \"content-type: test\\n\", \"Test content-type is sent when options.contentType is set\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"data/headers.php?keys=content-type\" ),\n\t\t\t\tcontentType: false,\n\t\t\t\tsuccess: function( data ) {\n\n\t\t\t\t\t// Some server/interpreter combinations always supply a Content-Type to scripts\n\t\t\t\t\tdata = data || \"content-type: \\n\";\n\t\t\t\t\tassert.strictEqual( data, \"content-type: \\n\", \"Test content-type is not set when options.contentType===false\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - protocol-less urls\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"//somedomain.com\",\n\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\tassert.equal( settings.url, location.protocol + \"//somedomain.com\", \"Make sure that the protocol is added.\" );\n\t\t\t\treturn false;\n\t\t\t},\n\t\t\terror: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - hash\", 3, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: \"data/name.html#foo\",\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"data/name.html\", \"Make sure that the URL is trimmed.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"data/name.html?abc#foo\",\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"data/name.html?abc\", \"Make sure that the URL is trimmed.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"data/name.html?abc#foo\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"test\": 123\n\t\t\t\t},\n\t\t\t\tbeforeSend: function( xhr, settings ) {\n\t\t\t\t\tassert.equal( settings.url, \"data/name.html?abc&test=123\", \"Make sure that the URL is trimmed.\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - cross-domain detection\", 8, function( assert ) {\n\t\tfunction request( url, title, crossDomainOrOptions ) {\n\t\t\treturn jQuery.extend( {\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\turl: url,\n\t\t\t\tbeforeSend: function( _, s ) {\n\t\t\t\t\tassert.ok( crossDomainOrOptions === false ? !s.crossDomain : s.crossDomain, title );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t}, crossDomainOrOptions );\n\t\t}\n\n\t\tvar loc = document.location,\n\t\t\tsamePort = loc.port || ( loc.protocol === \"http:\" ? 80 : 443 ),\n\t\t\totherPort = loc.port === 666 ? 667 : 666,\n\t\t\totherProtocol = loc.protocol === \"http:\" ? \"https:\" : \"http:\";\n\n\t\treturn [\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.hostname + \":\" + samePort,\n\t\t\t\t\"Test matching ports are not detected as cross-domain\",\n\t\t\t\tfalse\n\t\t\t),\n\t\t\trequest(\n\t\t\t\totherProtocol + \"//\" + loc.host,\n\t\t\t\t\"Test different protocols are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"app:/path\",\n\t\t\t\t\"Adobe AIR app:/ URL detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//example.invalid:\" + ( loc.port || 80 ),\n\t\t\t\t\"Test different hostnames are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.hostname + \":\" + otherPort,\n\t\t\t\t\"Test different ports are detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"about:blank\",\n\t\t\t\t\"Test about:blank is detected as cross-domain\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\tloc.protocol + \"//\" + loc.host,\n\t\t\t\t\"Test forced crossDomain is detected as cross-domain\",\n\t\t\t\t{\n\t\t\t\t\tcrossDomain: true\n\t\t\t\t}\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\" http://otherdomain.com\",\n\t\t\t\t\"Cross-domain url with leading space is detected as cross-domain\"\n\t\t\t)\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - abort\", 9, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxError ajaxComplete\", assert ),\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tassert.strictEqual( xhr.readyState, 1, \"XHR readyState indicates successful dispatch\" );\n\t\t\t\txhr.abort();\n\t\t\t\tassert.strictEqual( xhr.readyState, 0, \"XHR readyState indicates successful abortion\" );\n\t\t\t},\n\t\t\terror: true,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - events with context\", 12, function( assert ) {\n\t\tvar context = document.createElement( \"div\" );\n\n\t\tfunction event( e ) {\n\t\t\tassert.equal( this, context, e.type );\n\t\t}\n\n\t\tfunction callback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( this, context, \"context is preserved on callback \" + msg );\n\t\t\t};\n\t\t}\n\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( context ).appendTo( \"#foo\" )\n\t\t\t\t\t.ajaxSend( event )\n\t\t\t\t\t.ajaxComplete( event )\n\t\t\t\t\t.ajaxError( event )\n\t\t\t\t\t.ajaxSuccess( event );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\tsuccess: callback( \"success\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t}, {\n\t\t\t\turl: url( \"data/404.html\" ),\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: callback( \"beforeSend\" ),\n\t\t\t\terror: callback( \"error\" ),\n\t\t\t\tcomplete: callback( \"complete\" )\n\t\t\t} ]\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - events without context\", 3, function( assert ) {\n\t\tfunction nocallback( msg ) {\n\t\t\treturn function() {\n\t\t\t\tassert.equal( typeof this.url, \"string\", \"context is settings on callback \" + msg );\n\t\t\t};\n\t\t}\n\t\treturn {\n\t\t\turl: url( \"data/404.html\" ),\n\t\t\tbeforeSend: nocallback( \"beforeSend\" ),\n\t\t\terror: nocallback( \"error\" ),\n\t\t\tcomplete:  nocallback( \"complete\" )\n\t\t};\n\t} );\n\n\tajaxTest( \"#15118 - jQuery.ajax() - function without jQuery.event\", 1, function( assert ) {\n\t\tvar holder;\n\t\treturn {\n\t\t\turl: url( \"data/json.php\" ),\n\t\t\tsetup: function() {\n\t\t\t\tholder = jQuery.event;\n\t\t\t\tdelete jQuery.event;\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"Call can be made without jQuery.event\" );\n\t\t\t\tjQuery.event = holder;\n\t\t\t},\n\t\t\tsuccess: true\n\t\t};\n\t} );\n\n\tajaxTest( \"#15160 - jQuery.ajax() - request manually aborted in ajaxSend\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery( document ).on( \"ajaxSend\", function( e, jqXHR ) {\n\t\t\t\t\tjqXHR.abort();\n\t\t\t\t} );\n\n\t\t\t\tjQuery( document ).on( \"ajaxError ajaxComplete\", function( e, jqXHR ) {\n\t\t\t\t\tassert.equal( jqXHR.statusText, \"abort\", \"jqXHR.statusText equals abort on global ajaxComplete and ajaxError events\" );\n\t\t\t\t} );\n\t\t\t},\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\terror: true,\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - context modification\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tcontext: {},\n\t\t\tbeforeSend: function() {\n\t\t\t\tthis.test = \"foo\";\n\t\t\t},\n\t\t\tafterSend: function() {\n\t\t\t\tassert.strictEqual( this.context.test, \"foo\", \"Make sure the original object is maintained.\" );\n\t\t\t},\n\t\t\tsuccess: true\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - context modification through ajaxSetup\", 3, function( assert ) {\n\t\tvar obj = {};\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tjQuery.ajaxSetup( {\n\t\t\t\t\tcontext: obj\n\t\t\t\t} );\n\t\t\t\tassert.strictEqual( jQuery.ajaxSettings.context, obj, \"Make sure the context is properly set in ajaxSettings.\" );\n\t\t\t},\n\t\t\trequests: [ {\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.strictEqual( this, obj, \"Make sure the original object is maintained.\" );\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\tcontext: {},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( this !== obj, \"Make sure overriding context is possible.\" );\n\t\t\t\t}\n\t\t\t} ]\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - disabled globals\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: addGlobalEvents( \"\", assert ),\n\t\t\tglobal: false,\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.ok( true, \"beforeSend\" );\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t},\n\t\t\tcomplete: function() {\n\t\t\t\tassert.ok( true, \"complete\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - xml: non-namespace elements inside namespaced elements\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/with_fries.xml\" ),\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( resp ) {\n\t\t\t\tassert.equal( jQuery( \"properties\", resp ).length, 1, \"properties in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"jsconf\", resp ).length, 1, \"jsconf in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"thing\", resp ).length, 2, \"things in responseXML\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - xml: non-namespace elements inside namespaced elements (over JSONP)\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/with_fries_over_jsonp.php\" ),\n\t\t\tdataType: \"jsonp xml\",\n\t\t\tsuccess: function( resp ) {\n\t\t\t\tassert.equal( jQuery( \"properties\", resp ).length, 1, \"properties in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"jsconf\", resp ).length, 1, \"jsconf in responseXML\" );\n\t\t\t\tassert.equal( jQuery( \"thing\", resp ).length, 2, \"things in responseXML\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - HEAD requests\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\ttype: \"HEAD\",\n\t\t\t\tsuccess: function( data, status, xhr ) {\n\t\t\t\t\tassert.ok( /Date/i.test( xhr.getAllResponseHeaders() ), \"No Date in HEAD response\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\tdata: {\n\t\t\t\t\t\"whip_it\": \"good\"\n\t\t\t\t},\n\t\t\t\ttype: \"HEAD\",\n\t\t\t\tsuccess: function( data, status, xhr ) {\n\t\t\t\t\tassert.ok( /Date/i.test( xhr.getAllResponseHeaders() ), \"No Date in HEAD response with data\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - beforeSend\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/name.html\" ),\n\t\t\tbeforeSend: function() {\n\t\t\t\tthis.check = true;\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( this.check, \"check beforeSend was executed\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - beforeSend, cancel request manually\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function() {\n\t\t\t\treturn jQuery.ajax( {\n\t\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\t\t\tassert.ok( true, \"beforeSend got called, canceling\" );\n\t\t\t\t\t\txhr.abort();\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"canceled request must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - dataType html\", 5, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testFoo\" );\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\tdataType: \"html\",\n\t\t\turl: url( \"data/test.html\" ),\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.ok( data.match( /^html text/ ), \"Check content for datatype html\" );\n\t\t\t\tjQuery( \"#ap\" ).html( data );\n\t\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated for datatype html\" );\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script src was evaluated for datatype html\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - synchronous request\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/json_obj.js\" ),\n\t\t\tdataType: \"text\",\n\t\t\tasync: false,\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tassert.ok( /^\\{ \"data\"/.test( xhr.responseText ), \"check returned text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - synchronous request with callbacks\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/json_obj.js\" ),\n\t\t\tasync: false,\n\t\t\tdataType: \"text\",\n\t\t\tsuccess: true,\n\t\t\tafterSend: function( xhr ) {\n\t\t\t\tvar result;\n\t\t\t\txhr.done( function( data ) {\n\t\t\t\t\tassert.ok( true, \"success callback executed\" );\n\t\t\t\t\tresult = data;\n\t\t\t\t} );\n\t\t\t\tassert.ok( /^\\{ \"data\"/.test( result ), \"check returned text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajax(), jQuery.get[Script|JSON](), jQuery.post(), pass-through request object\", 8, function( assert ) {\n\t\tvar target = \"data/name.html\",\n\t\t\tsuccessCount = 0,\n\t\t\terrorCount = 0,\n\t\t\terrorEx = \"\",\n\t\t\tsuccess = function() {\n\t\t\t\tsuccessCount++;\n\t\t\t};\n\t\tjQuery( document ).on( \"ajaxError.passthru\", function( e, xml ) {\n\t\t\terrorCount++;\n\t\t\terrorEx += \": \" + xml.status;\n\t\t} );\n\t\tjQuery( document ).one( \"ajaxStop\", function() {\n\t\t\tassert.equal( successCount, 5, \"Check all ajax calls successful\" );\n\t\t\tassert.equal( errorCount, 0, \"Check no ajax errors (status\" + errorEx + \")\" );\n\t\t\tjQuery( document ).off( \"ajaxError.passthru\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t\tGlobals.register( \"testBar\" );\n\n\t\tassert.ok( jQuery.get( url( target ), success ), \"get\" );\n\t\tassert.ok( jQuery.post( url( target ), success ), \"post\" );\n\t\tassert.ok( jQuery.getScript( url( \"data/testbar.php\" ), success ), \"script\" );\n\t\tassert.ok( jQuery.getJSON( url( \"data/json_obj.js\" ), success ), \"json\" );\n\t\tassert.ok( jQuery.ajax( {\n\t\t\turl: url( target ),\n\t\t\tsuccess: success\n\t\t} ), \"generic\" );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - cache\", 12, function( assert ) {\n\t\tvar re = /_=(.*?)(&|$)/g;\n\n\t\tfunction request( url, title ) {\n\t\t\treturn {\n\t\t\t\turl: url,\n\t\t\t\tcache: false,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tvar parameter, tmp;\n\t\t\t\t\twhile ( ( tmp = re.exec( this.url ) ) ) {\n\t\t\t\t\t\tassert.strictEqual( parameter, undefined, title + \": only one 'no-cache' parameter\" );\n\t\t\t\t\t\tparameter = tmp[ 1 ];\n\t\t\t\t\t\tassert.notStrictEqual( parameter, \"tobereplaced555\", title + \": parameter (if it was there) was replaced\" );\n\t\t\t\t\t}\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t};\n\t\t}\n\n\t\treturn [\n\t\t\trequest(\n\t\t\t\t\"data/text.php\",\n\t\t\t\t\"no parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?pizza=true\",\n\t\t\t\t\"1 parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?_=tobereplaced555\",\n\t\t\t\t\"_= parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?pizza=true&_=tobereplaced555\",\n\t\t\t\t\"1 parameter and _=\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?_=tobereplaced555&tv=false\",\n\t\t\t\t\"_= and 1 parameter\"\n\t\t\t),\n\t\t\trequest(\n\t\t\t\t\"data/text.php?name=David&_=tobereplaced555&washere=true\",\n\t\t\t\t\"2 parameters surrounding _=\"\n\t\t\t)\n\t\t];\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\t\tajaxTest( \"#8205 - jQuery.ajax() - JSONP - re-use callbacks name\" + label, 4, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: \"data/jsonp.php\",\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\tbeforeSend: function( jqXHR, s ) {\n\t\t\t\t\ts.callback = s.jsonpCallback;\n\n\t\t\t\t\tassert.ok( this.callback in window, \"JSONP callback name is in the window\" );\n\t\t\t\t},\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tvar previous = this;\n\n\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\tprevious.jsonpCallback,\n\t\t\t\t\t\tundefined,\n\t\t\t\t\t\t\"jsonpCallback option is set back to default in callbacks\"\n\t\t\t\t\t);\n\n\t\t\t\t\tif ( isIE8 ) {\n\t\t\t\t\t\tassert.ok( true, \"IE8 can't remove property from the window\" );\n\n\t\t\t\t\t} else {\n\t\t\t\t\t\tassert.ok(\n\t\t\t\t\t\t\t!( this.callback in window ),\n\t\t\t\t\t\t\t\"JSONP callback name was removed from the window\"\n\t\t\t\t\t\t);\n\t\t\t\t\t}\n\n\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\turl: \"data/jsonp.php\",\n\t\t\t\t\t\tdataType: \"jsonp\",\n\t\t\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\t\tassert.strictEqual( this.jsonpCallback, previous.callback, \"JSONP callback name is re-used\" );\n\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t}\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote\", 2, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: window.location.href.replace( /[^\\/]*$/, \"\" ) + \"data/testbar.php\",\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (GET, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote with POST\", 3, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: window.location.href.replace( /[^\\/]*$/, \"\" ) + \"data/testbar.php\",\n\t\t\ttype: \"POST\",\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function( data, status ) {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (POST, no callback)\" );\n\t\t\t\tassert.strictEqual( status, \"success\", \"Script results returned (POST, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script, Remote with scheme-less URL\", 2, function( assert ) {\n\t\treturn {\n\t\t\tsetup: function() {\n\t\t\t\tGlobals.register( \"testBar\" );\n\t\t\t},\n\t\t\turl: window.location.href.replace( /[^\\/]*$/, \"\" ).replace( /^.*?\\/\\//, \"//\" ) + \"data/testbar.php\",\n\t\t\tdataType: \"script\",\n\t\t\tsuccess: function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Script results returned (GET, no callback)\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - malformed JSON\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/badjson.js\",\n\t\t\tdataType: \"json\",\n\t\t\terror: function( xhr, msg, detailedMsg ) {\n\t\t\t\tassert.strictEqual( msg, \"parsererror\", \"A parse error occurred.\" );\n\t\t\t\tassert.ok( /(invalid|error|exception)/i.test( detailedMsg ), \"Detailed parsererror message provided\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - script by content-type\", 2, function() {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: \"data/script.php\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"header\": \"script\"\n\t\t\t\t},\n\t\t\t\tsuccess: true\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: \"data/script.php\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"header\": \"ecma\"\n\t\t\t\t},\n\t\t\t\tsuccess: true\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - JSON by content-type\", 5, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/json.php\",\n\t\t\tdata: {\n\t\t\t\t\"header\": \"json\",\n\t\t\t\t\"json\": \"array\"\n\t\t\t},\n\t\t\tsuccess: function( json ) {\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - JSON by content-type disabled with options\", 6, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/json.php\" ),\n\t\t\tdata: {\n\t\t\t\t\"header\": \"json\",\n\t\t\t\t\"json\": \"array\"\n\t\t\t},\n\t\t\tcontents: {\n\t\t\t\t\"json\": false\n\t\t\t},\n\t\t\tsuccess: function( text ) {\n\t\t\t\tassert.strictEqual( typeof text, \"string\", \"json wasn't auto-determined\" );\n\t\t\t\tvar json = jQuery.parseJSON( text );\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - simple get\", 1, function( assert ) {\n\t\treturn {\n\t\t\ttype: \"GET\",\n\t\t\turl: url( \"data/name.php?name=foo\" ),\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - simple post\", 1, function( assert ) {\n\t\treturn {\n\t\t\ttype: \"POST\",\n\t\t\turl: url( \"data/name.php\" ),\n\t\t\tdata: \"name=peter\",\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"pan\", \"Check for POST\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - data option - empty bodies for non-GET requests\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/echoData.php\",\n\t\t\tdata: undefined,\n\t\t\ttype: \"post\",\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual( result, \"\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tvar ifModifiedNow = new Date();\n\n\tjQuery.each(\n\t\t/* jQuery.each arguments start */\n\t\t{\n\t\t\t\" (cache)\": true,\n\t\t\t\" (no cache)\": false\n\t\t},\n\t\tfunction( label, cache ) {\n\t\t\tjQuery.each(\n\t\t\t\t{\n\t\t\t\t\t\"If-Modified-Since\": \"if_modified_since.php\",\n\t\t\t\t\t\"Etag\": \"etag.php\"\n\t\t\t\t},\n\t\t\t\tfunction( type, url ) {\n\t\t\t\t\turl = \"data/\" + url + \"?ts=\" + ifModifiedNow++;\n\t\t\t\t\tQUnit.asyncTest( \"jQuery.ajax() - \" + type + \" support\" + label, 4, function( assert ) {\n\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\turl: url,\n\t\t\t\t\t\t\tifModified: true,\n\t\t\t\t\t\t\tcache: cache,\n\t\t\t\t\t\t\tsuccess: function( _, status ) {\n\t\t\t\t\t\t\t\tassert.strictEqual( status, \"success\", \"Initial status is 'success'\" );\n\t\t\t\t\t\t\t\tjQuery.ajax( {\n\t\t\t\t\t\t\t\t\turl: url,\n\t\t\t\t\t\t\t\t\tifModified: true,\n\t\t\t\t\t\t\t\t\tcache: cache,\n\t\t\t\t\t\t\t\t\tsuccess: function( data, status, jqXHR ) {\n\t\t\t\t\t\t\t\t\t\tassert.strictEqual( status, \"notmodified\", \"Following status is 'notmodified'\" );\n\t\t\t\t\t\t\t\t\t\tassert.strictEqual( jqXHR.status, 304, \"XHR status is 304\" );\n\t\t\t\t\t\t\t\t\t\tassert.equal( data, null, \"no response body is given\" );\n\t\t\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\t\t\t\t\tQUnit.start();\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t} );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t);\n\t\t}\n\t\t/* jQuery.each arguments end */\n\t);\n\n\tajaxTest( \"jQuery.ajax() - failing cross-domain (non-existing)\", 1, function( assert ) {\n\t\treturn {\n\n\t\t\t// see RFC 2606\n\t\t\turl: \"http://example.invalid\",\n\t\t\terror: function( xhr, _, e ) {\n\t\t\t\tassert.ok( true, \"file not found: \" + xhr.status + \" => \" + e );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - failing cross-domain\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"http://\" + externalHost,\n\t\t\terror: function( xhr, _, e ) {\n\t\t\t\tassert.ok( true, \"access denied: \" + xhr.status + \" => \" + e );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - atom+xml\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/atom+xml.php\" ),\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajax() - statusText\", 3, function( assert ) {\n\t\tjQuery.ajax( url( \"data/statusText.php?status=200&text=Hello\" ) ).done( function( _, statusText, jqXHR ) {\n\t\t\tassert.strictEqual( statusText, \"success\", \"callback status text ok for success\" );\n\t\t\tassert.ok( jqXHR.statusText === \"Hello\" || jqXHR.statusText === \"OK\", \"jqXHR status text ok for success (\" + jqXHR.statusText + \")\" );\n\t\t\tjQuery.ajax( url( \"data/statusText.php?status=404&text=World\" ) ).fail( function( jqXHR, statusText ) {\n\t\t\t\tassert.strictEqual( statusText, \"error\", \"callback status text ok for error\" );\n\t\t\t\tQUnit.start();\n\t\t\t} );\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajax() - statusCode\", 20, function( assert ) {\n\n\t\tvar count = 12;\n\n\t\tfunction countComplete() {\n\t\t\tif ( !--count ) {\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t}\n\n\t\tfunction createStatusCodes( name, isSuccess ) {\n\t\t\tname = \"Test \" + name + \" \" + ( isSuccess ? \"success\" : \"error\" );\n\t\t\treturn {\n\t\t\t\t200: function() {\n\t\t\t\t\tassert.ok( isSuccess, name );\n\t\t\t\t},\n\t\t\t\t404: function() {\n\t\t\t\t\tassert.ok( !isSuccess, name );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tjQuery.each(\n\t\t\t/* jQuery.each arguments start */\n\t\t\t{\n\t\t\t\t\"data/name.html\": true,\n\t\t\t\t\"data/someFileThatDoesNotExist.html\": false\n\t\t\t},\n\t\t\tfunction( uri, isSuccess ) {\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tstatusCode: createStatusCodes( \"in options\", isSuccess ),\n\t\t\t\t\tcomplete: countComplete\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: countComplete\n\t\t\t\t} ).statusCode( createStatusCodes( \"immediately with method\", isSuccess ) );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"on complete\", isSuccess ) );\n\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"very late binding\", isSuccess ) );\n\t\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tstatusCode: createStatusCodes( \"all (options)\", isSuccess ),\n\t\t\t\t\tcomplete: function( jqXHR ) {\n\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"all (on complete)\", isSuccess ) );\n\t\t\t\t\t\tsetTimeout( function() {\n\t\t\t\t\t\t\tjqXHR.statusCode( createStatusCodes( \"all (very late binding)\", isSuccess ) );\n\t\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t\t}, 100 );\n\t\t\t\t\t}\n\t\t\t\t} ).statusCode( createStatusCodes( \"all (immediately with method)\", isSuccess ) );\n\n\t\t\t\tvar testString = \"\";\n\n\t\t\t\tjQuery.ajax( url( uri ), {\n\t\t\t\t\tsuccess: function( a, b, jqXHR ) {\n\t\t\t\t\t\tassert.ok( isSuccess, \"success\" );\n\t\t\t\t\t\tvar statusCode = {};\n\t\t\t\t\t\tstatusCode[ jqXHR.status ] = function() {\n\t\t\t\t\t\t\ttestString += \"B\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tjqXHR.statusCode( statusCode );\n\t\t\t\t\t\ttestString += \"A\";\n\t\t\t\t\t},\n\t\t\t\t\terror: function( jqXHR ) {\n\t\t\t\t\t\tassert.ok( !isSuccess, \"error\" );\n\t\t\t\t\t\tvar statusCode = {};\n\t\t\t\t\t\tstatusCode[ jqXHR.status ] = function() {\n\t\t\t\t\t\t\ttestString += \"B\";\n\t\t\t\t\t\t};\n\t\t\t\t\t\tjqXHR.statusCode( statusCode );\n\t\t\t\t\t\ttestString += \"A\";\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.strictEqual(\n\t\t\t\t\t\t\ttestString,\n\t\t\t\t\t\t\t\"AB\",\n\t\t\t\t\t\t\t\"Test statusCode callbacks are ordered like \" + ( isSuccess ? \"success\" :  \"error\" ) + \" callbacks\"\n\t\t\t\t\t\t);\n\t\t\t\t\t\tcountComplete();\n\t\t\t\t\t}\n\t\t\t\t} );\n\n\t\t\t}\n\t\t\t/* jQuery.each arguments end*/\n\t\t);\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - transitive conversions\", 8, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"data/json.php\" ),\n\t\t\t\tconverters: {\n\t\t\t\t\t\"json myJson\": function( data ) {\n\t\t\t\t\t\tassert.ok( true, \"converter called\" );\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tdataType: \"myJson\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"Transitive conversion worked\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 0 ], \"text\", \"response was retrieved as text\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 1 ], \"myjson\", \"request expected myjson dataType\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"data/json.php\" ),\n\t\t\t\tconverters: {\n\t\t\t\t\t\"json myJson\": function( data ) {\n\t\t\t\t\t\tassert.ok( true, \"converter called (*)\" );\n\t\t\t\t\t\treturn data;\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tcontents: false, /* headers are wrong so we ignore them */\n\t\t\t\tdataType: \"* myJson\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"Transitive conversion worked (*)\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 0 ], \"text\", \"response was retrieved as text (*)\" );\n\t\t\t\t\tassert.strictEqual( this.dataTypes[ 1 ], \"myjson\", \"request expected myjson dataType (*)\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - overrideMimeType\", 2, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\turl: url( \"data/json.php\" ),\n\t\t\t\tbeforeSend: function( xhr ) {\n\t\t\t\t\txhr.overrideMimeType( \"application/json\" );\n\t\t\t\t},\n\t\t\t\tsuccess: function( json ) {\n\t\t\t\t\tassert.ok( json.data, \"Mimetype overridden using beforeSend\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\turl: url( \"data/json.php\" ),\n\t\t\t\tmimeType: \"application/json\",\n\t\t\t\tsuccess: function( json ) {\n\t\t\t\t\tassert.ok( json.data, \"Mimetype overridden using mimeType option\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tajaxTest( \"jQuery.ajax() - empty json gets to error callback instead of success callback.\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/echoData.php\" ),\n\t\t\terror: function( _, __, error ) {\n\t\t\t\tassert.equal( typeof error === \"object\", true,  \"Didn't get back error object for empty json response\" );\n\t\t\t},\n\t\t\tdataType: \"json\"\n\t\t};\n\t} );\n\n\tajaxTest( \"#2688 - jQuery.ajax() - beforeSend, cancel request\", 2, function( assert ) {\n\t\treturn {\n\t\t\tcreate: function() {\n\t\t\t\treturn jQuery.ajax( {\n\t\t\t\t\turl: url( \"data/name.html\" ),\n\t\t\t\t\tbeforeSend: function() {\n\t\t\t\t\t\tassert.ok( true, \"beforeSend got called, canceling\" );\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\tcomplete: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t},\n\t\t\t\t\terror: function() {\n\t\t\t\t\t\tassert.ok( false, \"request didn't get canceled\" );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"canceled request must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#2806 - jQuery.ajax() - data option - evaluate function values\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/echoQuery.php\",\n\t\t\tdata: {\n\t\t\t\tkey: function() {\n\t\t\t\t\treturn \"value\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( result ) {\n\t\t\t\tassert.strictEqual( result, \"key=value\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.test( \"#7531 - jQuery.ajax() - Location object as url\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tvar xhr,\n\t\t\tsuccess = false;\n\t\ttry {\n\t\t\txhr = jQuery.ajax( {\n\t\t\t\turl: window.location\n\t\t\t} );\n\t\t\tsuccess = true;\n\t\t\txhr.abort();\n\t\t} catch ( e ) {\n\n\t\t}\n\t\tassert.ok( success, \"document.location did not generate exception\" );\n\t} );\n\n\tjQuery.each( [ \" - Same Domain\", \" - Cross Domain\" ], function( crossDomain, label ) {\n\t\tajaxTest( \"#7578 - jQuery.ajax() - JSONP - default for cache option\" + label, 1, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: \"data/jsonp.php\",\n\t\t\t\tdataType: \"jsonp\",\n\t\t\t\tcrossDomain: crossDomain,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tassert.strictEqual( this.cache, false, \"cache must be false on JSON request\" );\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\t\t\t\terror: true\n\t\t\t};\n\t\t} );\n\t} );\n\n\tajaxTest( \"#8107 - jQuery.ajax() - multiple method signatures introduced in 1.5\", 4, function( assert ) {\n\t\treturn [\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax();\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With no arguments\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( \"data/name.html\" );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With only string URL argument\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( \"data/name.html\", {} );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, \"With string URL param and map\" );\n\t\t\t\t}\n\t\t\t},\n\t\t\t{\n\t\t\t\tcreate: function( options ) {\n\t\t\t\t\treturn jQuery.ajax( options );\n\t\t\t\t},\n\t\t\t\turl: \"data/name.html\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"With only map\" );\n\t\t\t\t}\n\t\t\t}\n\t\t];\n\t} );\n\n\tQUnit.test( \"#9887 - jQuery.ajax() - Context with circular references (#9887)\", function( assert ) {\n\t\tassert.expect( 2 );\n\n\t\tvar success = false,\n\t\t\tcontext = {};\n\t\tcontext.field = context;\n\t\ttry {\n\t\t\tjQuery.ajax( \"non-existing\", {\n\t\t\t\tcontext: context,\n\t\t\t\tbeforeSend: function() {\n\t\t\t\t\tassert.ok( this === context, \"context was not deep extended\" );\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} );\n\t\t\tsuccess = true;\n\t\t} catch ( e ) {\n\t\t\tconsole.log( e );\n\t\t}\n\t\tassert.ok( success, \"context with circular reference did not generate an exception\" );\n\t} );\n\n\tjQuery.each( [ \"as argument\", \"in settings object\" ], function( inSetting, title ) {\n\n\t\tfunction request( assert, url, test ) {\n\t\t\treturn {\n\t\t\t\tcreate: function() {\n\t\t\t\t\treturn jQuery.ajax( inSetting ? { url: url } : url );\n\t\t\t\t},\n\t\t\t\tdone: function() {\n\t\t\t\t\tassert.ok( true, ( test || url ) + \" \" + title );\n\t\t\t\t}\n\t\t\t};\n\t\t}\n\n\t\tajaxTest( \"#10093 - jQuery.ajax() - falsy url \" + title, 4, function( assert ) {\n\t\t\treturn [\n\t\t\t\trequest( assert, \"\", \"empty string\" ),\n\t\t\t\trequest( assert, false ),\n\t\t\t\trequest( assert, null ),\n\t\t\t\trequest( assert, undefined )\n\t\t\t];\n\t\t} );\n\t} );\n\n\tajaxTest( \"#11151 - jQuery.ajax() - parse error body\", 2, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/errorWithJSON.php\" ),\n\t\t\tdataFilter: function( string ) {\n\t\t\t\tassert.ok( false, \"dataFilter called\" );\n\t\t\t\treturn string;\n\t\t\t},\n\t\t\terror: function( jqXHR ) {\n\t\t\t\tassert.strictEqual( jqXHR.responseText, \"{ \\\"code\\\": 40, \\\"message\\\": \\\"Bad Request\\\" }\", \"Error body properly set\" );\n\t\t\t\tassert.deepEqual( jqXHR.responseJSON, { code: 40, message: \"Bad Request\" }, \"Error body properly parsed\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#11426 - jQuery.ajax() - loading binary data shouldn't throw an exception in IE\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/1x1.jpg\" ),\n\t\t\tsuccess: function( data ) {\n\t\t\t\tassert.ok( data === undefined || /JFIF/.test( data ), \"success callback reached\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tQUnit.asyncTest( \"#11743 - jQuery.ajax() - script, throws exception\", 1, function( assert ) {\n\n\t\t// Support: Android 2.3 only\n\t\t// Android 2.3 doesn't fire the window.onerror handler, just accept the reality there.\n\t\tif ( /android 2\\.3/i.test( navigator.userAgent ) ) {\n\t\t\tassert.ok( true, \"Test skipped, Android 2.3 doesn't fire window.onerror for \" +\n\t\t\t\t\"errors in dynamically included scripts\" );\n\t\t\tQUnit.start();\n\t\t\treturn;\n\t\t}\n\n\t\tvar onerror = window.onerror;\n\t\twindow.onerror = function() {\n\t\t\tassert.ok( true, \"Exception thrown\" );\n\t\t\twindow.onerror = onerror;\n\t\t\tQUnit.start();\n\t\t};\n\t\tjQuery.ajax( {\n\t\t\turl: \"data/badjson.js\",\n\t\t\tdataType: \"script\",\n\t\t\tthrows: true\n\t\t} );\n\t} );\n\n\tjQuery.each( [ \"method\", \"type\" ], function( _, globalOption ) {\n\t\tfunction request( assert, option ) {\n\t\t\tvar options = {\n\t\t\t\t\turl: url( \"data/echoData.php\" ),\n\t\t\t\t\tdata: \"hello\",\n\t\t\t\t\tsuccess: function( msg ) {\n\t\t\t\t\t\tassert.strictEqual( msg, \"hello\", \"Check for POST (no override)\" );\n\t\t\t\t\t}\n\t\t\t\t};\n\t\t\tif ( option ) {\n\t\t\t\toptions[ option ] = \"GET\";\n\t\t\t\toptions.success = function( msg ) {\n\t\t\t\t\tassert.strictEqual( msg, \"\", \"Check for no POST (overriding with \" + option + \")\" );\n\t\t\t\t};\n\t\t\t}\n\t\t\treturn options;\n\t\t}\n\n\t\tajaxTest(\n\t\t\t\"#12004 - jQuery.ajax() - method is an alias of type - \" +\n\t\t\tglobalOption + \" set globally\", 3,\n\t\t\tfunction( assert ) {\n\t\t\t\treturn {\n\t\t\t\t\tsetup: function() {\n\t\t\t\t\t\tvar options = {};\n\t\t\t\t\t\toptions[ globalOption ] = \"POST\";\n\t\t\t\t\t\tjQuery.ajaxSetup( options );\n\t\t\t\t\t},\n\t\t\t\t\trequests: [\n\t\t\t\t\t\trequest( assert, \"type\" ),\n\t\t\t\t\t\trequest( assert, \"method\" ),\n\t\t\t\t\t\trequest( assert )\n\t\t\t\t\t]\n\t\t\t\t};\n\t\t\t}\n\t\t);\n\t} );\n\n\tajaxTest( \"#13276 - jQuery.ajax() - compatibility between XML documents from ajax requests and parsed string\", 1, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/dashboard.xml\",\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( ajaxXML ) {\n\t\t\t\tvar parsedXML = jQuery( jQuery.parseXML( \"<tab title=\\\"Added\\\">blibli</tab>\" ) ).find( \"tab\" );\n\t\t\t\tajaxXML = jQuery( ajaxXML );\n\t\t\t\ttry {\n\n\t\t\t\t\t// Android 2.3 doesn't automatically adopt nodes from foreign documents.\n\t\t\t\t\t// (see the comment in test/manipulation.js)\n\t\t\t\t\t// Support: Android 2.3\n\t\t\t\t\tif ( /android 2\\.3/i.test( navigator.userAgent ) ) {\n\t\t\t\t\t\tparsedXML = jQuery( ajaxXML[ 0 ].adoptNode( parsedXML[ 0 ] ) );\n\t\t\t\t\t}\n\t\t\t\t\tajaxXML.find( \"infowindowtab\" ).append( parsedXML );\n\t\t\t\t} catch ( e ) {\n\t\t\t\t\tassert.strictEqual( e, undefined, \"error\" );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tassert.strictEqual( ajaxXML.find( \"tab\" ).length, 3, \"Parsed node was added properly\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13292 - jQuery.ajax() - converter is bypassed for 204 requests\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/nocontent.php\",\n\t\t\tdataType: \"testing\",\n\t\t\tconverters: {\n\t\t\t\t\"* testing\": function() {\n\t\t\t\t\tthrow \"converter was called\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( data, status, jqXHR ) {\n\t\t\t\tassert.strictEqual( jqXHR.status, 204, \"status code is 204\" );\n\t\t\t\tassert.strictEqual( status, \"nocontent\", \"status text is 'nocontent'\" );\n\t\t\t\tassert.strictEqual( data, undefined, \"data is undefined\" );\n\t\t\t},\n\t\t\terror: function( _, status, error ) {\n\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\tassert.strictEqual( status, \"parsererror\", \"Parser Error\" );\n\t\t\t\tassert.strictEqual( error, \"converter was called\", \"Converter was called\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13388 - jQuery.ajax() - responseXML\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: url( \"data/with_fries.xml\" ),\n\t\t\tdataType: \"xml\",\n\t\t\tsuccess: function( resp, _, jqXHR ) {\n\t\t\t\tassert.notStrictEqual( resp, undefined, \"XML document exists\" );\n\t\t\t\tassert.ok( \"responseXML\" in jqXHR, \"jqXHR.responseXML exists\" );\n\t\t\t\tassert.strictEqual( resp, jqXHR.responseXML, \"jqXHR.responseXML is set correctly\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\tajaxTest( \"#13922 - jQuery.ajax() - converter is bypassed for HEAD requests\", 3, function( assert ) {\n\t\treturn {\n\t\t\turl: \"data/json.php\",\n\t\t\tmethod: \"HEAD\",\n\t\t\tdata: {\n\t\t\t\theader: \"yes\"\n\t\t\t},\n\t\t\tconverters: {\n\t\t\t\t\"text json\": function() {\n\t\t\t\t\tthrow \"converter was called\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tsuccess: function( data, status ) {\n\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\tassert.strictEqual( status, \"nocontent\", \"data is undefined\" );\n\t\t\t\tassert.strictEqual( data, undefined, \"data is undefined\" );\n\t\t\t},\n\t\t\terror: function( _, status, error ) {\n\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\tassert.strictEqual( status, \"parsererror\", \"Parser Error\" );\n\t\t\t\tassert.strictEqual( error, \"converter was called\", \"Converter was called\" );\n\t\t\t}\n\t\t};\n\t} );\n\n\ttestIframeWithCallback(\n\t\t\"#14379 - jQuery.ajax() on unload\",\n\t\t\"ajax/onunload.html\",\n\t\tfunction( status, assert ) {\n\t\t\tassert.expect( 1 );\n\t\t\tassert.strictEqual( status, \"success\", \"Request completed\" );\n\t\t}\n\t);\n\n\t// BrowserStack PATCH support sometimes breaks so on TestSwarm run the test in IE only.\n\t// Unfortunately, all IE versions gets special treatment in request object creation\n\t// so we need to test in all supported IE versions to be sure.\n\tif ( location.search.indexOf( \"swarmURL=\" ) === -1 || document.documentMode ) {\n\t\tajaxTest( \"#13240 - jQuery.ajax() - support non-RFC2616 methods\", 1, function( assert ) {\n\t\t\treturn {\n\t\t\t\turl: \"data/echoQuery.php\",\n\t\t\t\tmethod: \"PATCH\",\n\t\t\t\tsuccess: function() {\n\t\t\t\t\tassert.ok( true, \"success\" );\n\t\t\t\t},\n\t\t\t\terror: function() {\n\t\t\t\t\tassert.ok( false, \"error\" );\n\t\t\t\t}\n\t\t\t};\n\t\t} );\n\t}\n\n\tajaxTest( \"#14683 - jQuery.ajax() - Exceptions thrown synchronously by xhr.send should be caught\", 4, function( assert ) {\n\t\treturn [ {\n\t\t\turl: \"data/params_html.php\",\n\t\t\tmethod: \"POST\",\n\t\t\tdata: {\n\t\t\t\ttoString: function() {\n\t\t\t\t\tthrow \"Can't parse\";\n\t\t\t\t}\n\t\t\t},\n\t\t\tprocessData: false,\n\t\t\tdone: function( data ) {\n\t\t\t\tassert.ok( false, \"done: \" + data );\n\t\t\t},\n\t\t\t\tfail: function( jqXHR, status, error ) {\n\t\t\t\t\tassert.ok( true, \"exception caught: \" + error );\n\t\t\t\t\tassert.strictEqual( jqXHR.status, 0, \"proper status code\" );\n\t\t\t\t\tassert.strictEqual( status, \"error\", \"proper status\" );\n\t\t\t\t}\n\t\t\t}, {\n\t\t\t\turl: \"http://domain.org:80d\",\n\t\t\t\tdone: function( data ) {\n\t\t\t\t\tassert.ok( false, \"done: \" + data );\n\t\t\t\t},\n\t\t\t\tfail: function( _, status, error ) {\n\t\t\t\t\tassert.ok( true, \"fail: \" + status + \" - \" + error );\n\t\t\t\t}\n\t\t\t} ];\n\t\t}\n\t);\n\n// //----------- jQuery.ajaxPrefilter()\n\n\tajaxTest( \"jQuery.ajaxPrefilter() - abort\", 1, function( assert ) {\n\t\treturn {\n\t\t\tdataType: \"prefix\",\n\t\t\tsetup: function() {\n\n\t\t\t\t// Ensure prefix does not throw an error\n\t\t\t\tjQuery.ajaxPrefilter( \"+prefix\", function( options, _, jqXHR ) {\n\t\t\t\t\tif ( options.abortInPrefilter ) {\n\t\t\t\t\t\tjqXHR.abort();\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t},\n\t\t\tabortInPrefilter: true,\n\t\t\terror: function() {\n\t\t\t\tassert.ok( false, \"error callback called\" );\n\t\t\t},\n\t\t\tfail: function( _, reason ) {\n\t\t\t\tassert.strictEqual( reason, \"canceled\", \"Request aborted by the prefilter must fail with 'canceled' status text\" );\n\t\t\t}\n\t\t};\n\t} );\n\n//----------- jQuery.ajaxSetup()\n\n\tQUnit.asyncTest( \"jQuery.ajaxSetup()\", 1, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\turl: url( \"data/name.php?name=foo\" ),\n\t\t\tsuccess: function( msg ) {\n\t\t\t\tassert.strictEqual( msg, \"bar\", \"Check for GET\" );\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t} );\n\t\tjQuery.ajax();\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajaxSetup({ timeout: Number }) - with global timeout\", 2, function( assert ) {\n\t\tvar passed = 0,\n\t\t\tpass = function() {\n\t\t\t\tassert.ok( passed++ < 2, \"Error callback executed\" );\n\t\t\t\tif ( passed === 2 ) {\n\t\t\t\t\tjQuery( document ).off( \"ajaxError.setupTest\" );\n\t\t\t\t\tQUnit.start();\n\t\t\t\t}\n\t\t\t},\n\t\t\tfail = function( a, b ) {\n\t\t\t\tassert.ok( false, \"Check for timeout failed \" + a + \" \" + b );\n\t\t\t\tQUnit.start();\n\t\t\t};\n\n\t\tjQuery( document ).on( \"ajaxError.setupTest\", pass );\n\n\t\tjQuery.ajaxSetup( {\n\t\t\ttimeout: 1000\n\t\t} );\n\n\t\tjQuery.ajax( {\n\t\t\ttype: \"GET\",\n\t\t\turl: url( \"data/name.php?wait=5\" ),\n\t\t\terror: pass,\n\t\t\tsuccess: fail\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.ajaxSetup({ timeout: Number }) with localtimeout\", 1, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\ttimeout: 50\n\t\t} );\n\t\tjQuery.ajax( {\n\t\t\ttype: \"GET\",\n\t\t\ttimeout: 15000,\n\t\t\turl: url( \"data/name.php?wait=1\" ),\n\t\t\terror: function() {\n\t\t\t\tassert.ok( false, \"Check for local timeout failed\" );\n\t\t\t\tQUnit.start();\n\t\t\t},\n\t\t\tsuccess: function() {\n\t\t\t\tassert.ok( true, \"Check for local timeout\" );\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t} );\n\t} );\n\n//----------- jQuery.domManip()\n\n\tQUnit.test( \"#11264 - jQuery.domManip() - no side effect because of ajaxSetup or global events\", function( assert ) {\n\t\tassert.expect( 1 );\n\n\t\tjQuery.ajaxSetup( {\n\t\t\ttype: \"POST\"\n\t\t} );\n\n\t\tjQuery( document ).on( \"ajaxStart ajaxStop\", function() {\n\t\t\tassert.ok( false, \"Global event triggered\" );\n\t\t} );\n\n\t\tjQuery( \"#qunit-fixture\" ).append( \"<script src='data/ajax/evalScript.php'></script>\" );\n\n\t\tjQuery( document ).off( \"ajaxStart ajaxStop\" );\n\t} );\n\n\tQUnit.test(\n\t\t\"jQuery#load() - always use GET method even if it overrided through ajaxSetup (#11264)\", 1,\n\t\tfunction( assert ) {\n\t\t\tvar done = assert.async();\n\n\t\t\tjQuery.ajaxSetup( {\n\t\t\t\ttype: \"POST\"\n\t\t\t} );\n\n\t\t\tjQuery( \"#qunit-fixture\" ).load( \"data/ajax/method.php\", function( method ) {\n\t\t\t\tassert.equal( method, \"GET\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test(\n\t\t\"#11402 - jQuery.domManip() - script in comments are properly evaluated\", 2,\n\t\tfunction( assert ) {\n\t\t\tjQuery( \"#qunit-fixture\" ).load( \"data/cleanScript.html\", assert.async() );\n\t\t}\n\t);\n\n//----------- jQuery.get()\n\n\tQUnit.asyncTest( \"jQuery.get( String, Hash, Function ) - parse xml and use text() on nodes\", 2, function( assert ) {\n\t\tjQuery.get( url( \"data/dashboard.xml\" ), function( xml ) {\n\t\t\tvar content = [];\n\t\t\tjQuery( \"tab\", xml ).each( function() {\n\t\t\t\tcontent.push( jQuery( this ).text() );\n\t\t\t} );\n\t\t\tassert.strictEqual( content[ 0 ], \"blabla\", \"Check first tab\" );\n\t\t\tassert.strictEqual( content[ 1 ], \"blublu\", \"Check second tab\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"#8277 - jQuery.get( String, Function ) - data in ajaxSettings\", 1, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tdata: \"helloworld\"\n\t\t} );\n\t\tjQuery.get( url( \"data/echoQuery.php\" ), function( data ) {\n\t\t\tassert.ok( /helloworld$/.test( data ), \"Data from ajaxSettings was used\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n//----------- jQuery.getJSON()\n\n\tQUnit.asyncTest( \"jQuery.getJSON( String, Hash, Function ) - JSON array\", 5, function( assert ) {\n\t\tjQuery.getJSON(\n\t\t\turl( \"data/json.php\" ),\n\t\t\t{\n\t\t\t\t\"json\": \"array\"\n\t\t\t},\n\t\t\tfunction( json ) {\n\t\t\t\tassert.ok( json.length >= 2, \"Check length\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"name\" ], \"John\", \"Check JSON: first, name\" );\n\t\t\t\tassert.strictEqual( json[ 0 ][ \"age\" ], 21, \"Check JSON: first, age\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"name\" ], \"Peter\", \"Check JSON: second, name\" );\n\t\t\t\tassert.strictEqual( json[ 1 ][ \"age\" ], 25, \"Check JSON: second, age\" );\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t);\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.getJSON( String, Function ) - JSON object\", 2, function( assert ) {\n\t\tjQuery.getJSON( url( \"data/json.php\" ), function( json ) {\n\t\t\tif ( json && json[ \"data\" ] ) {\n\t\t\t\tassert.strictEqual( json[ \"data\" ][ \"lang\" ], \"en\", \"Check JSON: lang\" );\n\t\t\t\tassert.strictEqual( json[ \"data\" ].length, 25, \"Check JSON: length\" );\n\t\t\t\tQUnit.start();\n\t\t\t}\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.getJSON( String, Function ) - JSON object with absolute url to local content\", 2, function( assert ) {\n\t\tjQuery.getJSON( url( window.location.href.replace( /[^\\/]*$/, \"\" ) + \"data/json.php\" ), function( json ) {\n\t\t\tassert.strictEqual( json.data.lang, \"en\", \"Check JSON: lang\" );\n\t\t\tassert.strictEqual( json.data.length, 25, \"Check JSON: length\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n//----------- jQuery.getScript()\n\n\tQUnit.test( \"jQuery.getScript( String, Function ) - with callback\", 2,\n\t\tfunction( assert ) {\n\t\t\tvar done = assert.async();\n\n\t\t\tGlobals.register( \"testBar\" );\n\t\t\tjQuery.getScript( url( \"data/testbar.php\" ), function() {\n\t\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script was evaluated\" );\n\t\t\t\tdone();\n\t\t\t} );\n\t\t}\n\t);\n\n\tQUnit.test( \"jQuery.getScript( String, Function ) - no callback\", 1, function( assert ) {\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( url( \"data/testbar.php\" ) ).done( assert.async() );\n\t} );\n\n\tQUnit.test( \"#8082 - jQuery.getScript( String, Function ) - source as responseText\", 2, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tGlobals.register( \"testBar\" );\n\t\tjQuery.getScript( url( \"data/testbar.php\" ), function( data, _, jqXHR ) {\n\t\t\tassert.strictEqual( data, jqXHR.responseText, \"Same-domain script requests returns the source of the script\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n// //----------- jQuery.fn.load()\n\n\t// check if load can be called with only url\n\tQUnit.test( \"jQuery.fn.load( String )\", 2, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( \"data/name.html\", assert.async() );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load() - 404 error callbacks\", function( assert ) {\n\t\tassert.expect( 6 );\n\t\tvar done = assert.async();\n\n\t\taddGlobalEvents( \"ajaxStart ajaxStop ajaxSend ajaxComplete ajaxError\", assert )();\n\t\tjQuery( document ).ajaxStop( done );\n\t\tjQuery( \"<div/>\" ).load( \"data/404.html\", function() {\n\t\t\tassert.ok( true, \"complete\" );\n\t\t} );\n\t} );\n\n\t// check if load can be called with url and null data\n\tQUnit.test( \"jQuery.fn.load( String, null )\", 2, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( \"data/name.html\", null, assert.async() );\n\t} );\n\n\t// check if load can be called with url and undefined data\n\tQUnit.test( \"jQuery.fn.load( String, undefined )\", 2, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tbeforeSend: function() {\n\t\t\t\tassert.strictEqual( this.type, \"GET\", \"no data means GET request\" );\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#first\" ).load( \"data/name.html\", undefined, assert.async() );\n\t} );\n\n\t// check if load can be called with only url\n\tQUnit.asyncTest( \"jQuery.fn.load( URL_SELECTOR )\", 1, function( assert ) {\n\t\tjQuery( \"#first\" ).load( \"data/test3.html div.user\", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 2, \"Verify that specific elements were injected\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\t// Selector should be trimmed to avoid leading spaces (#14773)\n\tQUnit.asyncTest( \"jQuery.fn.load( URL_SELECTOR with spaces )\", 1, function( assert ) {\n\t\tjQuery( \"#first\" ).load( \"data/test3.html   #superuser \", function() {\n\t\t\tassert.strictEqual( jQuery( this ).children( \"div\" ).length, 1, \"Verify that specific elements were injected\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Function ) - simple: inject text into DOM\", 2, function( assert ) {\n\t\tjQuery( \"#first\" ).load( url( \"data/name.html\" ), function() {\n\t\t\tassert.ok( /^ERROR/.test( jQuery( \"#first\" ).text() ), \"Check if content was injected into the DOM\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Function ) - check scripts\", 7, function( assert ) {\n\t\tvar verifyEvaluation = function() {\n\t\t\tassert.strictEqual( window[ \"testBar\" ], \"bar\", \"Check if script src was evaluated after load\" );\n\t\t\tassert.strictEqual( jQuery( \"#ap\" ).html(), \"bar\", \"Check if script evaluation has modified DOM\" );\n\t\t\tQUnit.start();\n\t\t};\n\n\t\tGlobals.register( \"testFoo\" );\n\t\tGlobals.register( \"testBar\" );\n\n\t\tjQuery( \"#first\" ).load( url( \"data/test.html\" ), function() {\n\t\t\tassert.ok( jQuery( \"#first\" ).html().match( /^html text/ ), \"Check content after loading html\" );\n\t\t\tassert.strictEqual( jQuery( \"#foo\" ).html(), \"foo\", \"Check if script evaluation has modified DOM\" );\n\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated after load\" );\n\t\t\tsetTimeout( verifyEvaluation, 600 );\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Function ) - check file with only a script tag\", 3, function( assert ) {\n\t\tGlobals.register( \"testFoo\" );\n\n\t\tjQuery( \"#first\" ).load( url( \"data/test2.html\" ), function() {\n\t\t\tassert.strictEqual( jQuery( \"#foo\" ).html(), \"foo\", \"Check if script evaluation has modified DOM\" );\n\t\t\tassert.strictEqual( window[ \"testFoo\" ], \"foo\", \"Check if script was evaluated after load\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Function ) - dataFilter in ajaxSettings\", 2, function( assert ) {\n\t\tjQuery.ajaxSetup( {\n\t\t\tdataFilter: function() {\n\t\t\t\treturn \"Hello World\";\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"<div/>\" ).load( url( \"data/name.html\" ), function( responseText ) {\n\t\t\tassert.strictEqual( jQuery( this ).html(), \"Hello World\", \"Test div was filled with filtered data\" );\n\t\t\tassert.strictEqual( responseText, \"Hello World\", \"Test callback receives filtered data\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.asyncTest( \"jQuery.fn.load( String, Object, Function )\", 2, function( assert ) {\n\t\tjQuery( \"<div />\" ).load( url( \"data/params_html.php\" ), {\n\t\t\t\"foo\": 3,\n\t\t\t\"bar\": \"ok\"\n\t\t}, function() {\n\t\t\tvar $post = jQuery( this ).find( \"#post\" );\n\t\t\tassert.strictEqual( $post.find( \"#foo\" ).text(), \"3\", \"Check if a hash of data is passed correctly\" );\n\t\t\tassert.strictEqual( $post.find( \"#bar\" ).text(), \"ok\", \"Check if a hash of data is passed correctly\" );\n\t\t\tQUnit.start();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load( String, String, Function )\", 2, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery( \"<div />\" ).load( url( \"data/params_html.php\" ), \"foo=3&bar=ok\", function() {\n\t\t\tvar $get = jQuery( this ).find( \"#get\" );\n\t\t\tassert.strictEqual( $get.find( \"#foo\" ).text(), \"3\", \"Check if a string of data is passed correctly\" );\n\t\t\tassert.strictEqual( $get.find( \"#bar\" ).text(), \"ok\", \"Check if a   of data is passed correctly\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.fn.load() - callbacks get the correct parameters\", 8, function( assert ) {\n\t\tvar completeArgs = {};\n\t\tvar done = assert.async();\n\n\t\tjQuery.ajaxSetup( {\n\t\t\tsuccess: function( _, status, jqXHR ) {\n\t\t\t\tcompleteArgs[ this.url ] = [ jqXHR.responseText, status, jqXHR ];\n\t\t\t},\n\t\t\terror: function( jqXHR, status ) {\n\t\t\t\tcompleteArgs[ this.url ] = [ jqXHR.responseText, status, jqXHR ];\n\t\t\t}\n\t\t} );\n\n\t\tjQuery.when.apply(\n\t\t\tjQuery,\n\t\t\tjQuery.map( [\n\t\t\t\t{\n\t\t\t\t\ttype: \"success\",\n\t\t\t\t\turl: \"data/echoQuery.php?arg=pop\"\n\t\t\t\t},\n\t\t\t\t{\n\t\t\t\t\ttype: \"error\",\n\t\t\t\t\turl: \"data/404.php\"\n\t\t\t\t}\n\t\t\t],\n\t\t\tfunction( options ) {\n\t\t\t\treturn jQuery.Deferred( function( defer ) {\n\t\t\t\t\tjQuery( \"#foo\" ).load( options.url, function() {\n\t\t\t\t\t\tvar args = arguments;\n\t\t\t\t\t\tassert.strictEqual( completeArgs[ options.url ].length, args.length, \"same number of arguments (\" + options.type + \")\" );\n\t\t\t\t\t\tjQuery.each( completeArgs[ options.url ], function( i, value ) {\n\t\t\t\t\t\t\tassert.strictEqual( args[ i ], value, \"argument #\" + i + \" is the same (\" + options.type + \")\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t\tdefer.resolve();\n\t\t\t\t\t} );\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( done );\n\t} );\n\n\tQUnit.test( \"#2046 - jQuery.fn.load( String, Function ) with ajaxSetup on dataType json\", 1, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery.ajaxSetup( {\n\t\t\tdataType: \"json\"\n\t\t} );\n\t\tjQuery( document ).ajaxComplete( function( e, xml, s ) {\n\t\t\tassert.strictEqual( s.dataType, \"html\", \"Verify the load() dataType was html\" );\n\t\t\tjQuery( document ).off( \"ajaxComplete\" );\n\t\t\tdone();\n\t\t} );\n\t\tjQuery( \"#first\" ).load( \"data/test3.html\" );\n\t} );\n\n\tQUnit.test( \"#10524 - jQuery.fn.load() - data specified in ajaxSettings is merged in\", 1, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tvar data = {\n\t\t\t\"baz\": 1\n\t\t};\n\t\tjQuery.ajaxSetup( {\n\t\t\tdata: {\n\t\t\t\t\"foo\": \"bar\"\n\t\t\t}\n\t\t} );\n\t\tjQuery( \"#foo\" ).load( \"data/echoQuery.php\", data );\n\t\tjQuery( document ).ajaxComplete( function( event, jqXHR, options ) {\n\t\t\tassert.ok( ~options.data.indexOf( \"foo=bar\" ), \"Data from ajaxSettings was used\" );\n\t\t\tdone();\n\t\t} );\n\t} );\n\n// //----------- jQuery.post()\n\n\tQUnit.test( \"jQuery.post() - data\", 3, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery.when(\n\t\t\tjQuery.post(\n\t\t\t\turl( \"data/name.php\" ),\n\t\t\t\t{\n\t\t\t\t\txml: \"5-2\",\n\t\t\t\t\tlength: 3\n\t\t\t\t},\n\t\t\t\tfunction( xml ) {\n\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t),\n\t\t\tjQuery.ajax( {\n\t\t\t\turl: url( \"data/echoData.php\" ),\n\t\t\t\ttype: \"POST\",\n\t\t\t\tdata: {\n\t\t\t\t\t\"test\": {\n\t\t\t\t\t\t\"length\": 7,\n\t\t\t\t\t\t\"foo\": \"bar\"\n\t\t\t\t\t}\n\t\t\t\t},\n\t\t\t\tsuccess: function( data ) {\n\t\t\t\t\tassert.strictEqual( data, \"test%5Blength%5D=7&test%5Bfoo%5D=bar\", \"Check if a sub-object with a length param is serialized correctly\" );\n\t\t\t\t}\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery.post( String, Hash, Function ) - simple with xml\", 4, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery.when(\n\t\t\tjQuery.post(\n\t\t\t\turl( \"data/name.php\" ),\n\t\t\t\t{\n\t\t\t\t\t\"xml\": \"5-2\"\n\t\t\t\t},\n\t\t\t\tfunction( xml ) {\n\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t} );\n\t\t\t\t}\n\t\t\t),\n\t\t\tjQuery.post( url( \"data/name.php?xml=5-2\" ), {}, function( xml ) {\n\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\tassert.strictEqual( jQuery( \"calculation\", this ).text(), \"5-2\", \"Check for XML\" );\n\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n\tQUnit.test( \"jQuery[get|post]( options ) - simple with xml\", 2, function( assert ) {\n\t\tvar done = assert.async();\n\n\t\tjQuery.when.apply( jQuery,\n\t\t\tjQuery.map( [ \"get\", \"post\" ], function( method ) {\n\t\t\t\treturn jQuery[ method ]( {\n\t\t\t\t\turl: url( \"data/name.php\" ),\n\t\t\t\t\tdata: {\n\t\t\t\t\t\t\"xml\": \"5-2\"\n\t\t\t\t\t},\n\t\t\t\t\tsuccess: function( xml ) {\n\t\t\t\t\t\tjQuery( \"math\", xml ).each( function() {\n\t\t\t\t\t\t\tassert.strictEqual( jQuery( \"result\", this ).text(), \"3\", \"Check for XML\" );\n\t\t\t\t\t\t} );\n\t\t\t\t\t}\n\t\t\t\t} );\n\t\t\t} )\n\t\t).always( function() {\n\t\t\tdone();\n\t\t} );\n\t} );\n\n//----------- jQuery.active\n\n\tQUnit.test( \"jQuery.active\", function( assert ) {\n\t\tassert.expect( 1 );\n\t\tassert.ok( jQuery.active === 0, \"ajax active counter should be zero: \" + jQuery.active );\n\t} );\n\n} )();\n"], "filenames": ["src/ajax/script.js", "test/unit/ajax.js"], "buggy_code_start_loc": [5, 77], "buggy_code_end_loc": [5, 77], "fixing_code_start_loc": [6, 78], "fixing_code_end_loc": [13, 126], "type": "CWE-79", "message": "jQuery before 3.0.0 is vulnerable to Cross-site Scripting (XSS) attacks when a cross-domain Ajax request is performed without the dataType option, causing text/javascript responses to be executed.", "other": {"cve": {"id": "CVE-2015-9251", "sourceIdentifier": "cve@mitre.org", "published": "2018-01-18T23:29:00.307", "lastModified": "2021-01-08T12:15:10.953", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "jQuery before 3.0.0 is vulnerable to Cross-site Scripting (XSS) attacks when a cross-domain Ajax request is performed without the dataType option, causing text/javascript responses to be executed."}, {"lang": "es", "value": "jQuery en versiones anteriores a la 3.0.0 es vulnerable a ataques de Cross-site Scripting (XSS) cuando se realiza una petici\u00f3n Ajax de dominios cruzados sin la opci\u00f3n dataType. Esto provoca que se ejecuten respuestas de texto/javascript."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jquery:jquery:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.0.0", "matchCriteriaId": "9CD7C3A9-7A77-4553-9893-D16D9FDC84AB"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "A079FD6E-3BB0-4997-9A8E-6F8FEC89887A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "900D2344-5160-42A0-8C49-36DBC7FF3D87"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "A4AA4B21-1BA9-4ED8-B9EA-558AF8655D24"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "9C3F9EE5-FCFC-45B8-9F57-C05D42EE0FF0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:agile_product_lifecycle_management_for_process:6.2.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "E3DF1971-3FD9-4954-AF2D-DDA0B24B89CD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_platform:2.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "8972497F-6E24-45A9-9A18-EB0E842CB1D4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_platform:2.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "400509A8-D6F2-432C-A2F1-AD5B8778D0D9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:banking_platform:2.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "132CE62A-FBFC-4001-81EC-35D81F73AF48"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:business_process_management_suite:11.1.1.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "013043A2-0765-4AF5-ABFC-6A8960FFBFD2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:business_process_management_suite:12.1.3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "B887E174-57AB-449D-AEE4-82DD1A3E5C84"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:business_process_management_suite:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "E869C417-C0E6-4FC3-B406-45598A1D1906"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_converged_application_server:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.0.1", "matchCriteriaId": "EC361999-AAD8-4CB3-B00E-E3990C3529B4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_interactive_session_recorder:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "C510CE66-DD71-45C8-B678-9BD81EC7FFBB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_interactive_session_recorder:6.1:*:*:*:*:*:*:*", "matchCriteriaId": "BF0A211C-7C3D-46AE-B525-890A9194C422"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_interactive_session_recorder:6.2:*:*:*:*:*:*:*", "matchCriteriaId": "B1AD7C68-81DF-4332-AEB3-B368E0221F52"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_services_gatekeeper:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.1.0.4.0", "matchCriteriaId": "97C1FA4C-5163-420C-A01A-EA36F1039BBB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_webrtc_session_controller:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.2", "matchCriteriaId": "77120A3C-9A48-45FC-A620-5072AF325ACF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:endeca_information_discovery_studio:3.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "BED45FB9-410F-4FC6-ACEB-49476F1C50BE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:endeca_information_discovery_studio:3.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "9D03A8C9-35A5-4B75-9711-7A4A60457307"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_manager_ops_center:12.2.2:*:*:*:*:*:*:*", "matchCriteriaId": "BE12B6A4-E128-41EC-8017-558F50B961BE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_manager_ops_center:12.3.3:*:*:*:*:*:*:*", "matchCriteriaId": "AB654DFA-FEF9-4D00-ADB0-F3F2B6ACF13E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_operations_monitor:3.4:*:*:*:*:*:*:*", "matchCriteriaId": "835BFCBC-848C-4A2C-BDE7-3D94CEC3F5D8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:enterprise_operations_monitor:4.0:*:*:*:*:*:*:*", "matchCriteriaId": "8A1B7A35-B332-476E-A676-C2CD4D72FA50"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_infrastructure:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.3.3", "versionEndIncluding": "7.3.5", "matchCriteriaId": "B5BC32AA-78BE-468B-B92A-5A0FFFA970FA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_analytical_applications_infrastructure:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.0", "versionEndIncluding": "8.0.7", "matchCriteriaId": "47E1F95E-A3A5-4996-B951-0F946CB11210"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_asset_liability_management:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "703DA91D-3440-4C67-AA20-78F71B1376DD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_data_integration_hub:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.5", "versionEndIncluding": "8.0.7", "matchCriteriaId": "73E05211-8415-42FB-9B93-959EB03B090B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_funds_transfer_pricing:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "AC15899F-8528-4D10-8CD5-F67121D7F293"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_hedge_management_and_ifrs_valuations:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.7", "matchCriteriaId": "30657F1B-D1FC-4EE6-9854-18993294A01D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_liquidity_risk_management:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.2", "versionEndIncluding": "8.0.6", "matchCriteriaId": "E376C9FB-1870-4B4E-8D69-02A70C0A041C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_loan_loss_forecasting_and_provisioning:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.2", "versionEndIncluding": "8.0.7", "matchCriteriaId": "DB6C521C-F104-4E26-82F2-6F63F94108BC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_market_risk_measurement_and_management:8.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "402B8642-7ACC-4F42-87A9-AB4D3B581751"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_market_risk_measurement_and_management:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "EF6D5112-4055-4F89-A5B3-0DCB109481B7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_profitability_management:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.4", "versionEndIncluding": "8.0.6", "matchCriteriaId": "EC3830C0-2B9F-41BD-94C9-E3718467A1AC"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_reconciliation_framework:8.0.5:*:*:*:*:*:*:*", "matchCriteriaId": "6D027285-07C1-4B3A-AB54-4426C16E236A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:financial_services_reconciliation_framework:8.0.6:*:*:*:*:*:*:*", "matchCriteriaId": "3831F35C-DED2-4E40-AA94-1512E106BFF2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:fusion_middleware_mapviewer:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "06E586B3-3434-4B08-8BE3-16C528642CA5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.1:*:*:*:*:*:*:*", "matchCriteriaId": "3C36C520-B5F5-45F1-B55F-62859CDA012E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_foundation:7.2:*:*:*:*:*:*:*", "matchCriteriaId": "5EAAFF95-000C-4D78-98FF-9EDE9D966A65"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:healthcare_translational_research:3.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "A5ACB1D2-69CE-4B7D-9B51-D8F80E541631"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_cruise_fleet_management:9.0.11:*:*:*:*:*:*:*", "matchCriteriaId": "03C46CCD-B49F-405A-A0A0-E0DFBA60F0D5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_guest_access:4.2.0:*:*:*:*:*:*:*", "matchCriteriaId": "1A3DC116-2844-47A1-BEC2-D0675DD97148"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_guest_access:4.2.1:*:*:*:*:*:*:*", "matchCriteriaId": "E0F1DF3E-0F2D-4EFC-9A3E-F72149C8AE94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_materials_control:18.1:*:*:*:*:*:*:*", "matchCriteriaId": "2AC63D10-2326-4542-B345-31D45B9A7408"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:hospitality_reporting_and_analytics:9.1.0:*:*:*:*:*:*:*", "matchCriteriaId": "FCBF2756-B831-4E6E-A15B-2A11DD48DB7C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_insbridge_rating_and_underwriting:5.2:*:*:*:*:*:*:*", "matchCriteriaId": "0D76453B-95AF-4AC4-8096-7D117F69B45B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_insbridge_rating_and_underwriting:5.4:*:*:*:*:*:*:*", "matchCriteriaId": "EDE3671B-EB36-490A-BA70-575FCA332B94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:insurance_insbridge_rating_and_underwriting:5.5:*:*:*:*:*:*:*", "matchCriteriaId": "E03A631E-253A-4C56-9986-97F86C323482"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jd_edwards_enterpriseone_tools:9.2:*:*:*:*:*:*:*", "matchCriteriaId": "41684398-18A4-4DC6-B8A2-3EBAA0CBF9A6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:11.1.1.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "A7506589-9B3B-49BA-B826-774BFDCC45B8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:12.1.3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "042C243F-EDFE-4A04-AB0B-26E73CC34837"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:jdeveloper:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "228DA523-4D6D-48C5-BDB0-DB1A60F23F8B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:oss_support_tools:19.1:*:*:*:*:*:*:*", "matchCriteriaId": "0A81D092-FC04-4B7D-83FB-58D402B5EF9A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.55:*:*:*:*:*:*:*", "matchCriteriaId": "45CB30A1-B2C9-4BF5-B510-1F2F18B60C64"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.56:*:*:*:*:*:*:*", "matchCriteriaId": "D0A735B4-4F3C-416B-8C08-9CB21BAD2889"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:peoplesoft_enterprise_peopletools:8.57:*:*:*:*:*:*:*", "matchCriteriaId": "7E1E416B-920B-49A0-9523-382898C2979D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_gateway:15.2:*:*:*:*:*:*:*", "matchCriteriaId": "6CBFA960-D242-43ED-8D4C-A60F01B70740"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_gateway:16.2:*:*:*:*:*:*:*", "matchCriteriaId": "0513B305-97EF-4609-A82E-D0CDFF9925BA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_gateway:17.12:*:*:*:*:*:*:*", "matchCriteriaId": "61A7F6E0-A4A4-4FC3-90CB-156933CB3B9A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:*:*:*:*:*:*:*:*", "versionStartIncluding": "17.1", "versionEndIncluding": "17.12", "matchCriteriaId": "B8249A74-C34A-4F66-8F11-F7F50F8813BF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:16.1:*:*:*:*:*:*:*", "matchCriteriaId": "D55A54FD-7DD1-49CD-BE81-0BE73990943C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:16.2:*:*:*:*:*:*:*", "matchCriteriaId": "82EB08C0-2D46-4635-88DF-E54F6452D3A3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:primavera_unifier:18.8:*:*:*:*:*:*:*", "matchCriteriaId": "202AD518-2E9B-4062-B063-9858AE1F9CE2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:real-time_scheduler:2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "A108B4EF-768F-4118-86B5-C0D9CDDE6A6C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_allocation:15.0.2:*:*:*:*:*:*:*", "matchCriteriaId": "686D4323-4B05-4B92-B598-594A31F937C3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_customer_insights:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "AD4AB77A-E829-4603-AF6A-97B9CD0D687F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_customer_insights:16.0:*:*:*:*:*:*:*", "matchCriteriaId": "6DE15D64-6F49-4F43-8079-0C7827384C86"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_invoice_matching:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "788F2530-F011-4489-8029-B3468BAF7787"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_sales_audit:15.0:*:*:*:*:*:*:*", "matchCriteriaId": "68B5147A-F6A3-499E-815D-6DAABDA33B03"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_workforce_management_software:1.60.9:*:*:*:*:*:*:*", "matchCriteriaId": "26C5CF80-8CFF-44D9-B3ED-C259847E9C46"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:retail_workforce_management_software:1.64.0:*:*:*:*:*:*:*", "matchCriteriaId": "569644AC-69AD-412D-B399-4052D4DB2928"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:service_bus:12.1.3.0.0:*:*:*:*:*:*:*", "matchCriteriaId": "70BEF219-45EC-4A53-A815-42FBE20FC300"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:service_bus:12.2.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "1EA2023A-1AD6-41FE-A214-9D1F6021D6B6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:siebel_ui_framework:18.10:*:*:*:*:*:*:*", "matchCriteriaId": "3FFFBA49-F340-4A3D-BE8C-73213A669855"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:siebel_ui_framework:18.11:*:*:*:*:*:*:*", "matchCriteriaId": "B491FB70-B6FC-4063-BE00-CAD664B39055"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_framework:*:*:*:*:*:*:*:*", "versionStartIncluding": "4.3.0.1", "versionEndIncluding": "4.3.0.4", "matchCriteriaId": "70E13C38-9FC3-46BD-B9A4-1033C98C19D3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:utilities_mobile_workforce_management:2.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "AE1E1CA5-D443-4C5D-8F43-550106FFE3DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:webcenter_sites:11.1.1.8.0:*:*:*:*:*:*:*", "matchCriteriaId": "1BB4709C-6373-43CC-918C-876A6569865A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.1.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "F745235C-55A9-4353-A4CB-4B7834BDD63F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:oracle:weblogic_server:12.2.1.3:*:*:*:*:*:*:*", "matchCriteriaId": "CBFF04EF-B1C3-4601-878A-35EA6A15EF0C"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2020-03/msg00041.html", "source": "cve@mitre.org"}, {"url": "http://packetstormsecurity.com/files/152787/dotCMS-5.1.1-Vulnerable-Dependencies.html", "source": "cve@mitre.org"}, {"url": "http://packetstormsecurity.com/files/153237/RetireJS-CORS-Issue-Script-Execution.html", "source": "cve@mitre.org"}, {"url": "http://packetstormsecurity.com/files/156743/OctoberCMS-Insecure-Dependencies.html", "source": "cve@mitre.org"}, {"url": "http://seclists.org/fulldisclosure/2019/May/10", "source": "cve@mitre.org"}, {"url": "http://seclists.org/fulldisclosure/2019/May/11", "source": "cve@mitre.org"}, {"url": "http://seclists.org/fulldisclosure/2019/May/13", "source": "cve@mitre.org"}, {"url": "http://www.oracle.com/technetwork/security-advisory/cpuoct2018-4428296.html", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "http://www.securityfocus.com/bid/105658", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://access.redhat.com/errata/RHSA-2020:0481", "source": "cve@mitre.org"}, {"url": "https://access.redhat.com/errata/RHSA-2020:0729", "source": "cve@mitre.org"}, {"url": "https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/jquery/jquery/issues/2432", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/jquery/jquery/pull/2588", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/jquery/jquery/pull/2588/commits/c254d308a7d3f1eac4d0b42837804cfffcba4bb2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://ics-cert.us-cert.gov/advisories/ICSA-18-212-04", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "US Government Resource"]}, {"url": "https://kb.pulsesecure.net/articles/Pulse_Security_Advisories/SA44601", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/10f0f3aefd51444d1198c65f44ffdf2d78ca3359423dbc1c168c9731@%3Cdev.flink.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/17ff53f7999e74fbe3cc0ceb4e1c3b00b180b7c5afec8e978837bc49@%3Cuser.flink.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/519eb0fd45642dcecd9ff74cb3e71c20a4753f7d82e2f07864b5108f@%3Cdev.drill.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/52bafac05ad174000ea465fe275fd3cc7bd5c25535a7631c0bc9bfb2@%3Cuser.flink.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/54df3aeb4239b64b50b356f0ca6f986e3c4ca5b84c515dce077c7854@%3Cuser.flink.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/b0656d359c7d40ec9f39c8cc61bca66802ef9a2a12ee199f5b0c1442@%3Cdev.drill.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/ba79cf1658741e9f146e4c59b50aee56656ea95d841d358d006c18b6@%3Ccommits.roller.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://lists.apache.org/thread.html/f9bc3e55f4e28d1dcd1a69aae6d53e609a758e34d2869b4d798e13cc@%3Cissues.drill.apache.org%3E", "source": "cve@mitre.org"}, {"url": "https://seclists.org/bugtraq/2019/May/18", "source": "cve@mitre.org"}, {"url": "https://security.netapp.com/advisory/ntap-20210108-0004/", "source": "cve@mitre.org"}, {"url": "https://snyk.io/vuln/npm:jquery:20150627", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://sw.aveva.com/hubfs/assets-2018/pdf/security-bulletin/SecurityBulletin_LFSec126.pdf", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuapr2020.html", "source": "cve@mitre.org"}, {"url": "https://www.oracle.com/security-alerts/cpujan2020.html", "source": "cve@mitre.org"}, {"url": "https://www.oracle.com/security-alerts/cpujul2020.html", "source": "cve@mitre.org"}, {"url": "https://www.oracle.com/security-alerts/cpuoct2020.html", "source": "cve@mitre.org"}, {"url": "https://www.oracle.com/technetwork/security-advisory/cpuapr2019-5072813.html", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://www.oracle.com/technetwork/security-advisory/cpujan2019-5072801.html", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://www.oracle.com/technetwork/security-advisory/cpujul2019-5072835.html", "source": "cve@mitre.org"}, {"url": "https://www.oracle.com/technetwork/security-advisory/cpuoct2019-5072832.html", "source": "cve@mitre.org"}, {"url": "https://www.tenable.com/security/tns-2019-08", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/jquery/jquery/commit/f60729f3903d17917dc351f3ac87794de379b0cc"}}