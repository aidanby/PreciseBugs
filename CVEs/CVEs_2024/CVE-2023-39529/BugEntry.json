{"buggy_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\n\n/**\n * Class AttachmentCore.\n */\nclass AttachmentCore extends ObjectModel\n{\n    public $file;\n    public $file_name;\n    public $file_size;\n    public $name;\n    public $mime;\n    public $description;\n\n    /** @var int position Position */\n    public $position;\n\n    /**\n     * @see ObjectModel::$definition\n     */\n    public static $definition = [\n        'table' => 'attachment',\n        'primary' => 'id_attachment',\n        'multilang' => true,\n        'fields' => [\n            'file' => ['type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => true, 'size' => 40],\n            'mime' => ['type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'required' => true, 'size' => 128],\n            'file_name' => ['type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 128],\n            'file_size' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId'],\n\n            /* Lang fields */\n            'name' => ['type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isGenericName', 'required' => true, 'size' => 32],\n            'description' => ['type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isCleanHtml'],\n        ],\n        'associations' => [\n            'products' => ['type' => self::HAS_MANY, 'field' => 'id_product', 'object' => 'Product', 'association' => 'product_attachment'],\n        ],\n    ];\n\n    protected $webserviceParameters = [\n        'objectNodeNames' => 'attachments',\n        'hidden_fields' => [],\n        'fields' => [\n            'file' => [],\n            'file_name' => [],\n            'file_size' => [],\n            'mime' => [],\n        ],\n        'associations' => [\n            'products' => [\n                'resource' => 'product',\n                'api' => 'products',\n                'fields' => [\n                    'id' => ['required' => true],\n                ],\n            ],\n        ],\n    ];\n\n    /**\n     * @see ObjectModel::add()\n     */\n    public function add($autoDate = true, $nullValues = false)\n    {\n        if (file_exists(_PS_DOWNLOAD_DIR_ . $this->file)) {\n            $this->file_size = filesize(_PS_DOWNLOAD_DIR_ . $this->file);\n        }\n\n        return parent::add($autoDate, $nullValues);\n    }\n\n    /**\n     * @see ObjectModel::update()\n     */\n    public function update($nullValues = false)\n    {\n        if (file_exists(_PS_DOWNLOAD_DIR_ . $this->file)) {\n            $this->file_size = filesize(_PS_DOWNLOAD_DIR_ . $this->file);\n        }\n\n        return parent::update($nullValues);\n    }\n\n    /**\n     * @see ObjectModel::delete()\n     */\n    public function delete()\n    {\n        if (file_exists(_PS_DOWNLOAD_DIR_ . $this->file)) {\n            @unlink(_PS_DOWNLOAD_DIR_ . $this->file);\n        }\n\n        $sql = new DbQuery();\n        $sql->select('pa.`id_product`');\n        $sql->from('product_attachment', 'pa');\n        $sql->where('pa.`id_attachment` = ' . (int) $this->id);\n        $products = Db::getInstance()->executeS($sql);\n\n        Db::getInstance()->delete(\n            'product_attachment',\n            '`id_attachment` = ' . (int) $this->id\n        );\n\n        foreach ($products as $product) {\n            Product::updateCacheAttachment((int) $product['id_product']);\n        }\n\n        return parent::delete();\n    }\n\n    /**\n     * Delete selection of attachments.\n     *\n     * @param array $attachments Attachments\n     *\n     * @return bool|int Whether the selection has been successfully deleted\n     * @todo: Find out if $return can be initialized with true. (breaking change)\n     */\n    public function deleteSelection($attachments)\n    {\n        $return = 1;\n        foreach ($attachments as $idAttachment) {\n            $attachment = new Attachment((int) $idAttachment);\n            $return &= $attachment->delete();\n        }\n\n        return $return;\n    }\n\n    /**\n     * Get attachments.\n     *\n     * @param int $idLang Language ID\n     * @param int $idProduct Product ID\n     * @param bool $include Whether the attachments are included or excluded from the Product ID\n     *\n     * @return array|false|mysqli_result|PDOStatement|resource|null Database query result\n     */\n    public static function getAttachments($idLang, $idProduct, $include = true)\n    {\n        return Db::getInstance()->executeS(\n            '\n\t\t\tSELECT *\n\t\t\tFROM ' . _DB_PREFIX_ . 'attachment a\n\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'attachment_lang al\n\t\t\t\tON (a.id_attachment = al.id_attachment AND al.id_lang = ' . (int) $idLang . ')\n\t\t\tWHERE a.id_attachment ' . ($include ? 'IN' : 'NOT IN') . ' (\n\t\t\t\tSELECT pa.id_attachment\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'product_attachment pa\n\t\t\t\tWHERE id_product = ' . (int) $idProduct . '\n\t\t\t)'\n        );\n    }\n\n    /**\n     * Unassociate all products from the current object\n     *\n     * @param bool $updateAttachmentCache [default=true] If set to false attachment cache will not be updated\n     *\n     * @return bool Deletion result\n     */\n    public function deleteAttachments(bool $updateAttachmentCache = true): bool\n    {\n        if (0 >= (int) $this->id) {\n            // Can not delete attachement without id\n            return false;\n        }\n\n        $res = Db::getInstance()->execute(\n            'DELETE FROM `' . _DB_PREFIX_ . 'product_attachment` ' .\n            'WHERE `id_attachment` = ' . (int) $this->id\n        );\n\n        if ($updateAttachmentCache === true) {\n            $productIds = Db::getInstance()->executeS(\n                'SELECT `id_product` FROM `' . _DB_PREFIX_ . 'product_attachment` ' .\n                'WHERE `id_attachment` = ' . (int) $this->id\n            );\n\n            foreach ($productIds as $productId) {\n                Product::updateCacheAttachment((int) $productId);\n            }\n        }\n\n        return $res;\n    }\n\n    /**\n     * Delete Product attachments for the given Product ID.\n     *\n     * @param int $idProduct Product ID\n     *\n     * @return bool\n     */\n    public static function deleteProductAttachments($idProduct)\n    {\n        $res = Db::getInstance()->execute('\n\t\tDELETE FROM ' . _DB_PREFIX_ . 'product_attachment\n\t\tWHERE id_product = ' . (int) $idProduct);\n\n        Product::updateCacheAttachment((int) $idProduct);\n\n        return $res;\n    }\n\n    /**\n     * Associate $id_product to the current object.\n     *\n     * @param int $idProduct id of the product to associate\n     *\n     * @return bool true if success\n     */\n    public function attachProduct($idProduct)\n    {\n        return static::associateProductAttachment((int) $idProduct, (int) $this->id);\n    }\n\n    /**\n     * @param int $productId\n     * @param int $attachmentId\n     *\n     * @return bool true if success\n     */\n    public static function associateProductAttachment(int $productId, int $attachmentId): bool\n    {\n        $res = Db::getInstance()->execute('\n\t\t\tINSERT INTO ' . _DB_PREFIX_ . 'product_attachment\n\t\t\t\t(id_attachment, id_product) VALUES\n\t\t\t\t(' . $attachmentId . ', ' . $productId . ')');\n\n        Product::updateCacheAttachment($productId);\n\n        return $res;\n    }\n\n    /**\n     * Associate an array of id_attachment $array to the product $id_product\n     * and remove eventual previous association.\n     *\n     * @param int $idProduct Product ID\n     * @param mixed $array Attachment IDs\n     *\n     * @return bool Whether the attachments have been successfully associated with the Product\n     */\n    public static function attachToProduct($idProduct, $array)\n    {\n        $result1 = Attachment::deleteProductAttachments($idProduct);\n\n        if (is_array($array)) {\n            $ids = [];\n            foreach ($array as $idAttachment) {\n                if ((int) $idAttachment > 0) {\n                    $ids[] = ['id_product' => (int) $idProduct, 'id_attachment' => (int) $idAttachment];\n                }\n            }\n\n            if (!empty($ids)) {\n                $result2 = Db::getInstance()->insert('product_attachment', $ids);\n            }\n        }\n\n        Product::updateCacheAttachment((int) $idProduct);\n        if (is_array($array)) {\n            return $result1 && (!isset($result2) || $result2);\n        }\n\n        return $result1;\n    }\n\n    /**\n     * Get Attachment IDs for the given Product within the given range of attachment IDs.\n     *\n     * @param int $idLang Language ID\n     * @param array $list List of attachment IDs in which to search\n     *\n     * @return array|bool List of attachment IDs found. False if nothing found.\n     */\n    public static function getProductAttached($idLang, $list)\n    {\n        if (!is_array($list)) {\n            return false;\n        }\n\n        $idsAttachments = array_column($list, 'id_attachment');\n\n        $sql = 'SELECT * FROM `' . _DB_PREFIX_ . 'product_attachment` pa ' .\n             'LEFT JOIN `' . _DB_PREFIX_ . 'product_lang` pl ON (pa.`id_product` = pl.`id_product`' . Shop::addSqlRestrictionOnLang('pl') . ') ' .\n             'WHERE `id_attachment` IN (' . implode(',', array_map('intval', $idsAttachments)) . ') ' .\n             'AND pl.`id_lang` = ' . (int) $idLang;\n        $tmp = Db::getInstance()->executeS($sql);\n        $productAttachments = [];\n        foreach ($tmp as $t) {\n            $productAttachments[$t['id_attachment']][] = $t['name'];\n        }\n\n        return $productAttachments;\n    }\n\n    /**\n     * Get attachment products ids of current attachment for association.\n     *\n     * @return array<int, array{ id: string }> An array of product ids\n     */\n    public function getWsProducts(): array\n    {\n        return Db::getInstance()->executeS(\n            'SELECT p.`id_product` AS id ' .\n            'FROM `' . _DB_PREFIX_ . 'product_attachment` pa ' .\n            'INNER JOIN `' . _DB_PREFIX_ . 'product` p ON (p.id_product = pa.id_product) ' .\n            '' . Shop::addSqlAssociation('product', 'p') . ' ' .\n            'WHERE pa.`id_attachment` = ' . (int) $this->id\n        );\n    }\n\n    /**\n     * Set products ids of current attachment for association.\n     *\n     * @param array<int, array{id: int|string }> $products Products ids\n     *\n     * @return bool\n     */\n    public function setWsProducts(array $products): bool\n    {\n        $this->deleteAttachments(true);\n        foreach ($products as $product) {\n            Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'product_attachment` (`id_product`, `id_attachment`) VALUES (' . (int) $product['id'] . ', ' . (int) $this->id . ')');\n            Product::updateCacheAttachment((int) $product['id']);\n        }\n\n        return true;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Copyright since 2007 PrestaShop SA and Contributors\n * PrestaShop is an International Registered Trademark & Property of PrestaShop SA\n *\n * NOTICE OF LICENSE\n *\n * This source file is subject to the Open Software License (OSL 3.0)\n * that is bundled with this package in the file LICENSE.md.\n * It is also available through the world-wide-web at this URL:\n * https://opensource.org/licenses/OSL-3.0\n * If you did not receive a copy of the license and are unable to\n * obtain it through the world-wide-web, please send an email\n * to license@prestashop.com so we can send you a copy immediately.\n *\n * DISCLAIMER\n *\n * Do not edit or add to this file if you wish to upgrade PrestaShop to newer\n * versions in the future. If you wish to customize PrestaShop for your\n * needs please refer to https://devdocs.prestashop.com/ for more information.\n *\n * @author    PrestaShop SA and Contributors <contact@prestashop.com>\n * @copyright Since 2007 PrestaShop SA and Contributors\n * @license   https://opensource.org/licenses/OSL-3.0 Open Software License (OSL 3.0)\n */\n\n/**\n * Class AttachmentCore.\n */\nclass AttachmentCore extends ObjectModel\n{\n    public $file;\n    public $file_name;\n    public $file_size;\n    public $name;\n    public $mime;\n    public $description;\n\n    /** @var int position Position */\n    public $position;\n\n    /**\n     * @see ObjectModel::$definition\n     */\n    public static $definition = [\n        'table' => 'attachment',\n        'primary' => 'id_attachment',\n        'multilang' => true,\n        'fields' => [\n            'file' => ['type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'required' => true, 'size' => 40],\n            'mime' => ['type' => self::TYPE_STRING, 'validate' => 'isCleanHtml', 'required' => true, 'size' => 128],\n            'file_name' => ['type' => self::TYPE_STRING, 'validate' => 'isGenericName', 'size' => 128],\n            'file_size' => ['type' => self::TYPE_INT, 'validate' => 'isUnsignedId'],\n\n            /* Lang fields */\n            'name' => ['type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isGenericName', 'required' => true, 'size' => 32],\n            'description' => ['type' => self::TYPE_STRING, 'lang' => true, 'validate' => 'isCleanHtml'],\n        ],\n        'associations' => [\n            'products' => ['type' => self::HAS_MANY, 'field' => 'id_product', 'object' => 'Product', 'association' => 'product_attachment'],\n        ],\n    ];\n\n    protected $webserviceParameters = [\n        'objectNodeNames' => 'attachments',\n        'hidden_fields' => [],\n        'fields' => [\n            'file' => [],\n            'file_name' => [],\n            'file_size' => [],\n            'mime' => [],\n        ],\n        'associations' => [\n            'products' => [\n                'resource' => 'product',\n                'api' => 'products',\n                'fields' => [\n                    'id' => ['required' => true],\n                ],\n            ],\n        ],\n    ];\n\n    /**\n     * @see ObjectModel::add()\n     */\n    public function add($autoDate = true, $nullValues = false)\n    {\n        if (file_exists(_PS_DOWNLOAD_DIR_ . $this->file)) {\n            $this->file_size = filesize(_PS_DOWNLOAD_DIR_ . $this->file);\n        }\n\n        return parent::add($autoDate, $nullValues);\n    }\n\n    /**\n     * @see ObjectModel::update()\n     */\n    public function update($nullValues = false)\n    {\n        if (file_exists(_PS_DOWNLOAD_DIR_ . $this->file)) {\n            $this->file_size = filesize(_PS_DOWNLOAD_DIR_ . $this->file);\n        }\n\n        return parent::update($nullValues);\n    }\n\n    /**\n     * @see ObjectModel::delete()\n     */\n    public function delete()\n    {\n        if (file_exists(_PS_DOWNLOAD_DIR_ . $this->file)) {\n            @unlink(_PS_DOWNLOAD_DIR_ . basename($this->file));\n        }\n\n        $sql = new DbQuery();\n        $sql->select('pa.`id_product`');\n        $sql->from('product_attachment', 'pa');\n        $sql->where('pa.`id_attachment` = ' . (int) $this->id);\n        $products = Db::getInstance()->executeS($sql);\n\n        Db::getInstance()->delete(\n            'product_attachment',\n            '`id_attachment` = ' . (int) $this->id\n        );\n\n        foreach ($products as $product) {\n            Product::updateCacheAttachment((int) $product['id_product']);\n        }\n\n        return parent::delete();\n    }\n\n    /**\n     * Delete selection of attachments.\n     *\n     * @param array $attachments Attachments\n     *\n     * @return bool|int Whether the selection has been successfully deleted\n     * @todo: Find out if $return can be initialized with true. (breaking change)\n     */\n    public function deleteSelection($attachments)\n    {\n        $return = 1;\n        foreach ($attachments as $idAttachment) {\n            $attachment = new Attachment((int) $idAttachment);\n            $return &= $attachment->delete();\n        }\n\n        return $return;\n    }\n\n    /**\n     * Get attachments.\n     *\n     * @param int $idLang Language ID\n     * @param int $idProduct Product ID\n     * @param bool $include Whether the attachments are included or excluded from the Product ID\n     *\n     * @return array|false|mysqli_result|PDOStatement|resource|null Database query result\n     */\n    public static function getAttachments($idLang, $idProduct, $include = true)\n    {\n        return Db::getInstance()->executeS(\n            '\n\t\t\tSELECT *\n\t\t\tFROM ' . _DB_PREFIX_ . 'attachment a\n\t\t\tLEFT JOIN ' . _DB_PREFIX_ . 'attachment_lang al\n\t\t\t\tON (a.id_attachment = al.id_attachment AND al.id_lang = ' . (int) $idLang . ')\n\t\t\tWHERE a.id_attachment ' . ($include ? 'IN' : 'NOT IN') . ' (\n\t\t\t\tSELECT pa.id_attachment\n\t\t\t\tFROM ' . _DB_PREFIX_ . 'product_attachment pa\n\t\t\t\tWHERE id_product = ' . (int) $idProduct . '\n\t\t\t)'\n        );\n    }\n\n    /**\n     * Unassociate all products from the current object\n     *\n     * @param bool $updateAttachmentCache [default=true] If set to false attachment cache will not be updated\n     *\n     * @return bool Deletion result\n     */\n    public function deleteAttachments(bool $updateAttachmentCache = true): bool\n    {\n        if (0 >= (int) $this->id) {\n            // Can not delete attachement without id\n            return false;\n        }\n\n        $res = Db::getInstance()->execute(\n            'DELETE FROM `' . _DB_PREFIX_ . 'product_attachment` ' .\n            'WHERE `id_attachment` = ' . (int) $this->id\n        );\n\n        if ($updateAttachmentCache === true) {\n            $productIds = Db::getInstance()->executeS(\n                'SELECT `id_product` FROM `' . _DB_PREFIX_ . 'product_attachment` ' .\n                'WHERE `id_attachment` = ' . (int) $this->id\n            );\n\n            foreach ($productIds as $productId) {\n                Product::updateCacheAttachment((int) $productId);\n            }\n        }\n\n        return $res;\n    }\n\n    /**\n     * Delete Product attachments for the given Product ID.\n     *\n     * @param int $idProduct Product ID\n     *\n     * @return bool\n     */\n    public static function deleteProductAttachments($idProduct)\n    {\n        $res = Db::getInstance()->execute('\n\t\tDELETE FROM ' . _DB_PREFIX_ . 'product_attachment\n\t\tWHERE id_product = ' . (int) $idProduct);\n\n        Product::updateCacheAttachment((int) $idProduct);\n\n        return $res;\n    }\n\n    /**\n     * Associate $id_product to the current object.\n     *\n     * @param int $idProduct id of the product to associate\n     *\n     * @return bool true if success\n     */\n    public function attachProduct($idProduct)\n    {\n        return static::associateProductAttachment((int) $idProduct, (int) $this->id);\n    }\n\n    /**\n     * @param int $productId\n     * @param int $attachmentId\n     *\n     * @return bool true if success\n     */\n    public static function associateProductAttachment(int $productId, int $attachmentId): bool\n    {\n        $res = Db::getInstance()->execute('\n\t\t\tINSERT INTO ' . _DB_PREFIX_ . 'product_attachment\n\t\t\t\t(id_attachment, id_product) VALUES\n\t\t\t\t(' . $attachmentId . ', ' . $productId . ')');\n\n        Product::updateCacheAttachment($productId);\n\n        return $res;\n    }\n\n    /**\n     * Associate an array of id_attachment $array to the product $id_product\n     * and remove eventual previous association.\n     *\n     * @param int $idProduct Product ID\n     * @param mixed $array Attachment IDs\n     *\n     * @return bool Whether the attachments have been successfully associated with the Product\n     */\n    public static function attachToProduct($idProduct, $array)\n    {\n        $result1 = Attachment::deleteProductAttachments($idProduct);\n\n        if (is_array($array)) {\n            $ids = [];\n            foreach ($array as $idAttachment) {\n                if ((int) $idAttachment > 0) {\n                    $ids[] = ['id_product' => (int) $idProduct, 'id_attachment' => (int) $idAttachment];\n                }\n            }\n\n            if (!empty($ids)) {\n                $result2 = Db::getInstance()->insert('product_attachment', $ids);\n            }\n        }\n\n        Product::updateCacheAttachment((int) $idProduct);\n        if (is_array($array)) {\n            return $result1 && (!isset($result2) || $result2);\n        }\n\n        return $result1;\n    }\n\n    /**\n     * Get Attachment IDs for the given Product within the given range of attachment IDs.\n     *\n     * @param int $idLang Language ID\n     * @param array $list List of attachment IDs in which to search\n     *\n     * @return array|bool List of attachment IDs found. False if nothing found.\n     */\n    public static function getProductAttached($idLang, $list)\n    {\n        if (!is_array($list)) {\n            return false;\n        }\n\n        $idsAttachments = array_column($list, 'id_attachment');\n\n        $sql = 'SELECT * FROM `' . _DB_PREFIX_ . 'product_attachment` pa ' .\n             'LEFT JOIN `' . _DB_PREFIX_ . 'product_lang` pl ON (pa.`id_product` = pl.`id_product`' . Shop::addSqlRestrictionOnLang('pl') . ') ' .\n             'WHERE `id_attachment` IN (' . implode(',', array_map('intval', $idsAttachments)) . ') ' .\n             'AND pl.`id_lang` = ' . (int) $idLang;\n        $tmp = Db::getInstance()->executeS($sql);\n        $productAttachments = [];\n        foreach ($tmp as $t) {\n            $productAttachments[$t['id_attachment']][] = $t['name'];\n        }\n\n        return $productAttachments;\n    }\n\n    /**\n     * Get attachment products ids of current attachment for association.\n     *\n     * @return array<int, array{ id: string }> An array of product ids\n     */\n    public function getWsProducts(): array\n    {\n        return Db::getInstance()->executeS(\n            'SELECT p.`id_product` AS id ' .\n            'FROM `' . _DB_PREFIX_ . 'product_attachment` pa ' .\n            'INNER JOIN `' . _DB_PREFIX_ . 'product` p ON (p.id_product = pa.id_product) ' .\n            '' . Shop::addSqlAssociation('product', 'p') . ' ' .\n            'WHERE pa.`id_attachment` = ' . (int) $this->id\n        );\n    }\n\n    /**\n     * Set products ids of current attachment for association.\n     *\n     * @param array<int, array{id: int|string }> $products Products ids\n     *\n     * @return bool\n     */\n    public function setWsProducts(array $products): bool\n    {\n        $this->deleteAttachments(true);\n        foreach ($products as $product) {\n            Db::getInstance()->execute('INSERT INTO `' . _DB_PREFIX_ . 'product_attachment` (`id_product`, `id_attachment`) VALUES (' . (int) $product['id'] . ', ' . (int) $this->id . ')');\n            Product::updateCacheAttachment((int) $product['id']);\n        }\n\n        return true;\n    }\n}\n"], "filenames": ["classes/Attachment.php"], "buggy_code_start_loc": [114], "buggy_code_end_loc": [115], "fixing_code_start_loc": [114], "fixing_code_end_loc": [115], "type": "NVD-CWE-noinfo", "message": "PrestaShop is an open source e-commerce web application. Prior to version 8.1.1, it is possible to delete a file from the server by using the Attachments controller and the Attachments API. Version 8.1.1 contains a patch for this issue. There are no known workarounds.", "other": {"cve": {"id": "CVE-2023-39529", "sourceIdentifier": "security-advisories@github.com", "published": "2023-08-07T21:15:10.703", "lastModified": "2023-08-09T19:46:13.237", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "PrestaShop is an open source e-commerce web application. Prior to version 8.1.1, it is possible to delete a file from the server by using the Attachments controller and the Attachments API. Version 8.1.1 contains a patch for this issue. There are no known workarounds."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:L/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 6.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.5}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:prestashop:prestashop:*:*:*:*:*:*:*:*", "versionEndExcluding": "8.1.1", "matchCriteriaId": "705A3EBE-48E5-4E3B-A8D8-471098F8B56E"}]}]}], "references": [{"url": "https://github.com/PrestaShop/PrestaShop/commit/b08c647305dc1e9e6a2445b724d13a9733b6ed82", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/PrestaShop/PrestaShop/security/advisories/GHSA-2rf5-3fw8-qm47", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/PrestaShop/PrestaShop/commit/b08c647305dc1e9e6a2445b724d13a9733b6ed82"}}