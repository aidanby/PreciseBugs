{"buggy_code": ["<?php\r\n\r\n/**\r\n * Melis Technology (http://www.melistechnology.com)\r\n *\r\n * @copyright Copyright (c) 2017 Melis Technology (http://www.melistechnology.com)\r\n *\r\n */\r\n\r\nnamespace MelisAssetManager;\r\n\r\nuse Laminas\\Mvc\\ModuleRouteListener;\r\nuse Laminas\\Mvc\\MvcEvent;\r\nuse Laminas\\ModuleManager\\ModuleManager;\r\nuse Laminas\\ModuleManager\\ModuleEvent;\r\nuse Laminas\\Stdlib\\ArrayUtils;\r\n\r\n/**\r\n * Minify Classes\r\n */\r\n$path = __DIR__ .'/../lib';\r\n\r\n/**\r\n * Class Module\r\n * @package MelisAssetManager\r\n */\r\n\r\n\r\nclass Module\r\n{\r\n    private $modulePathFile = '/melis.modules.path.php';\r\n    private $mimePathFile = '/../config/mime.config.php';\r\n    \r\n    public function onBootstrap(MvcEvent $e)\r\n    {\r\n        $eventManager        = $e->getApplication()->getEventManager();\r\n        $moduleRouteListener = new ModuleRouteListener();\r\n        $moduleRouteListener->attach($eventManager);\r\n\r\n        $sm = $e->getApplication()->getServiceManager();\r\n        $this->displayFile($sm);\r\n    }\r\n    \r\n    public function init(ModuleManager $manager)\r\n    {\r\n        $eventManager = $manager->getEventManager();\r\n        $eventManager->attach(ModuleEvent::EVENT_LOAD_MODULES_POST, [$this, 'onLoadModulesPost']);\r\n    }\r\n    \r\n    public function onLoadModulesPost(ModuleEvent $event)\r\n    {\r\n        $sm                 = $event->getParam('ServiceManager');\r\n        $modulesService     = $sm->get('MelisAssetManagerModulesService');\r\n        $assetConfigFolder  = $_SERVER['DOCUMENT_ROOT'] . '/../config';\r\n        $sitesModulesFolder = $_SERVER['DOCUMENT_ROOT'] . '/../module/MelisSites';\r\n        $allModules         = $modulesService->getAllModules();\r\n\r\n        $modulePathFile = $assetConfigFolder . $this->modulePathFile;\r\n\r\n        $newModules = false;\r\n        if (file_exists($modulePathFile))\r\n        {\r\n            // checking if there's new modules not in the path list\r\n            $loadedModules = $modulesService->getActiveModules();\r\n            $existingPathModules = require $assetConfigFolder . $this->modulePathFile;\r\n            \r\n            foreach ($loadedModules as $moduleName)\r\n            {\r\n                if (empty($existingPathModules[$moduleName]))\r\n                {\r\n                    $newModules = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!file_exists($modulePathFile) || $newModules)\r\n        {\r\n\r\n            $modulesList  = array();\r\n            $sitesModules = $modulesService->getSitesModules();\r\n            \r\n            // BO Activated Modules\r\n            foreach ($allModules as $moduleName)\r\n            {\r\n                $path = $modulesService->getModulePath($moduleName);\r\n                $path = str_replace($_SERVER['DOCUMENT_ROOT'] . '/..', '', $path);\r\n                $modulesList[$moduleName] = $path;\r\n            }\r\n            \r\n            // Sites modules\r\n            foreach ($sitesModules as $moduleName)\r\n            {\r\n                $path = $sitesModulesFolder . '/' . $moduleName;\r\n                $path = str_replace($_SERVER['DOCUMENT_ROOT'] . '/..', '', $path);\r\n                $modulesList[$moduleName] = $path;\r\n            }\r\n            \r\n            try \r\n            {\r\n                $fd = fopen($modulePathFile, 'w');\r\n                if ($fd)\r\n                {\r\n                    $modulesPathsArray = \"<?php \\n\\n\";\r\n                    $modulesPathsArray .= \"\\treturn array( \\n\";\r\n        \r\n                    $pathFile = '';\r\n                    foreach ($modulesList as $moduleName => $modulePath)\r\n                    {\r\n                        $modulesPathsArray .= \"\\t\\t'$moduleName' => '$modulePath', \\n\";\r\n                    }\r\n                    $modulesPathsArray .= \"\\t); \\n\";\r\n                    \r\n                    fwrite($fd, $modulesPathsArray);\r\n                    fclose($fd);\r\n                    chmod($modulePathFile, 0777);\r\n                    \r\n                    $this->displayFile($sm);\r\n                }\r\n                else\r\n                {\r\n                    /*echo \"Error generating file $modulePathFile : check rights\";\r\n                    die;*/\r\n                }\r\n            }\r\n            catch (\\Exception $e)\r\n            {\r\n                /*echo \"Error generating file $modulePathFile : check rights\";\r\n                die;*/\r\n            }\r\n        }\r\n    }\r\n    \r\n    public function displayFile($sm)\r\n    {\r\n\r\n        $moduleSvc =  $sm->get('MelisAssetManagerModulesService');\r\n        $assetConfigFolder = $_SERVER['DOCUMENT_ROOT'] . '/../config';\r\n        $uri = $_SERVER['REQUEST_URI'];\r\n        \r\n        $UriWithoutParams = explode('?', $uri);\r\n        \r\n        $UriParams = \"\";\r\n        $UriWithoutParams = $UriWithoutParams[0];\r\n        if (!empty($UriWithoutParams[1]))\r\n            $UriParams = $UriWithoutParams[1];\r\n        \r\n        \r\n        // First check if asset in main public folder\r\n        $pathFile = $_SERVER['DOCUMENT_ROOT'] . $UriWithoutParams;\r\n        if (is_file($pathFile))\r\n            $this->sendDocument($pathFile, $UriParams);\r\n        else\r\n        {\r\n            // testing module public folder second\r\n            if (file_exists($assetConfigFolder . $this->modulePathFile))\r\n            {\r\n                $loadedModules = $moduleSvc->getAllModules();\r\n                $modulesPath = require $assetConfigFolder . $this->modulePathFile;\r\n                \r\n                $detailUri = explode('/', $UriWithoutParams);\r\n                if (count($detailUri) > 1)\r\n                {\r\n                    $moduleUri = $detailUri[1];\r\n                    \r\n                    // Need to have a path defined, and module loaded \r\n                    if (!empty($modulesPath[$moduleUri]) && (in_array($moduleUri, $loadedModules) ||\r\n                        strpos($modulesPath[$moduleUri], 'MelisSites') !== false))\r\n                    {\r\n                        $path = $modulesPath[$moduleUri];\r\n                        \r\n                        if (str_replace($_SERVER['DOCUMENT_ROOT'] . '/..', '', $path) == $path)\r\n                        {\r\n                            // relative path\r\n                            $path = $_SERVER['DOCUMENT_ROOT'] . '/..' . $path;\r\n                        }\r\n    \r\n                        $pathFile = $path . '/public';\r\n                        for ($i = 2; $i < count($detailUri); $i++)\r\n                            $pathFile .= '/' . $detailUri[$i];\r\n    \r\n                        if ($pathFile != '')\r\n                        {\r\n                            if (is_file($pathFile))\r\n                                $this->sendDocument($pathFile, $UriParams);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    public function getMimeType($filename)\r\n    {\r\n        $mimeConfig = require __DIR__ . $this->mimePathFile;\r\n                            \r\n        $extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\r\n    \r\n        if (isset($mimeConfig['mime'][$extension])) {\r\n            return $mimeConfig['mime'][$extension];\r\n        }\r\n    \r\n        return 'text/plain';\r\n    }\r\n    \r\n    public function sendDocument($pathFile, $UriParams)\r\n    {\r\n        $mime   = $this->getMimeType($pathFile);\r\n\r\n        // if php file, we need to eval\r\n        if ($mime == 'application/x-httpd-php') {\r\n            header('HTTP/1.0 200 OK');\r\n            header(\"Content-Type: text/html; charset=UTF-8\" . $mime);\r\n\r\n            $folderPath = explode('/', $pathFile);\r\n            $fileName = $folderPath[count($folderPath) - 1];\r\n            unset($folderPath[count($folderPath) - 1]);\r\n            $folderPath = implode('/', $folderPath);\r\n            \r\n            eval ( ' chdir(\"' . $folderPath . '\"); require \"' . $fileName . '\";' );\r\n        } else {\r\n\r\n            $content = file_get_contents($pathFile);\r\n\r\n\r\n            header('HTTP/1.0 200 OK');\r\n            header(\"Content-Type: \" . $mime);\r\n\r\n            $seconds_to_cache = 60 * 60 * 24; // 24hrs\r\n            $ts = gmdate(\"D, d M Y H:i:s\", time() + $seconds_to_cache) . \" GMT\";\r\n            header(\"Expires: $ts\");\r\n            header(\"Pragma: cache\");\r\n            header(\"Cache-Control: max-age=$seconds_to_cache\");\r\n\r\n            print $content;\r\n        }\r\n\r\n        die;\r\n    }\r\n    \r\n    public function getConfig()\r\n    {\r\n    \t$config = [];\r\n    \t$configFiles = [\r\n    \t\t\tinclude __DIR__ . '/../config/module.config.php',\r\n    \t];\r\n\r\n    \tforeach ($configFiles as $file) {\r\n    \t\t$config = ArrayUtils::merge($config, $file);\r\n    \t}\r\n\r\n    \treturn $config;\r\n    }\r\n\r\n    public function getAutoloaderConfig()\r\n    {\r\n        return [\r\n            'Laminas\\Loader\\StandardAutoloader' => [\r\n                'namespaces' => [\r\n                    __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,\r\n                ],\r\n            ],\r\n        ];\r\n    }\r\n\r\n}\r\n"], "fixing_code": ["<?php\r\n\r\n/**\r\n * Melis Technology (http://www.melistechnology.com)\r\n *\r\n * @copyright Copyright (c) 2017 Melis Technology (http://www.melistechnology.com)\r\n *\r\n */\r\n\r\nnamespace MelisAssetManager;\r\n\r\nuse Laminas\\Mvc\\ModuleRouteListener;\r\nuse Laminas\\Mvc\\MvcEvent;\r\nuse Laminas\\ModuleManager\\ModuleManager;\r\nuse Laminas\\ModuleManager\\ModuleEvent;\r\nuse Laminas\\Stdlib\\ArrayUtils;\r\n\r\n/**\r\n * Minify Classes\r\n */\r\n$path = __DIR__ .'/../lib';\r\n\r\n/**\r\n * Class Module\r\n * @package MelisAssetManager\r\n */\r\n\r\n\r\nclass Module\r\n{\r\n    private $modulePathFile = '/melis.modules.path.php';\r\n    private $mimePathFile = '/../config/mime.config.php';\r\n    \r\n    public function onBootstrap(MvcEvent $e)\r\n    {\r\n        $eventManager        = $e->getApplication()->getEventManager();\r\n        $moduleRouteListener = new ModuleRouteListener();\r\n        $moduleRouteListener->attach($eventManager);\r\n\r\n        $sm = $e->getApplication()->getServiceManager();\r\n        $this->displayFile($sm);\r\n    }\r\n    \r\n    public function init(ModuleManager $manager)\r\n    {\r\n        $eventManager = $manager->getEventManager();\r\n        $eventManager->attach(ModuleEvent::EVENT_LOAD_MODULES_POST, [$this, 'onLoadModulesPost']);\r\n    }\r\n    \r\n    public function onLoadModulesPost(ModuleEvent $event)\r\n    {\r\n        $sm                 = $event->getParam('ServiceManager');\r\n        $modulesService     = $sm->get('MelisAssetManagerModulesService');\r\n        $assetConfigFolder  = $_SERVER['DOCUMENT_ROOT'] . '/../config';\r\n        $sitesModulesFolder = $_SERVER['DOCUMENT_ROOT'] . '/../module/MelisSites';\r\n        $allModules         = $modulesService->getAllModules();\r\n\r\n        $modulePathFile = $assetConfigFolder . $this->modulePathFile;\r\n\r\n        $newModules = false;\r\n        if (file_exists($modulePathFile))\r\n        {\r\n            // checking if there's new modules not in the path list\r\n            $loadedModules = $modulesService->getActiveModules();\r\n            $existingPathModules = require $assetConfigFolder . $this->modulePathFile;\r\n            \r\n            foreach ($loadedModules as $moduleName)\r\n            {\r\n                if (empty($existingPathModules[$moduleName]))\r\n                {\r\n                    $newModules = true;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!file_exists($modulePathFile) || $newModules)\r\n        {\r\n\r\n            $modulesList  = array();\r\n            $sitesModules = $modulesService->getSitesModules();\r\n            \r\n            // BO Activated Modules\r\n            foreach ($allModules as $moduleName)\r\n            {\r\n                $path = $modulesService->getModulePath($moduleName);\r\n                $path = str_replace($_SERVER['DOCUMENT_ROOT'] . '/..', '', $path);\r\n                $modulesList[$moduleName] = $path;\r\n            }\r\n            \r\n            // Sites modules\r\n            foreach ($sitesModules as $moduleName)\r\n            {\r\n                $path = $sitesModulesFolder . '/' . $moduleName;\r\n                $path = str_replace($_SERVER['DOCUMENT_ROOT'] . '/..', '', $path);\r\n                $modulesList[$moduleName] = $path;\r\n            }\r\n            \r\n            try \r\n            {\r\n                $fd = fopen($modulePathFile, 'w');\r\n                if ($fd)\r\n                {\r\n                    $modulesPathsArray = \"<?php \\n\\n\";\r\n                    $modulesPathsArray .= \"\\treturn array( \\n\";\r\n        \r\n                    $pathFile = '';\r\n                    foreach ($modulesList as $moduleName => $modulePath)\r\n                    {\r\n                        $modulesPathsArray .= \"\\t\\t'$moduleName' => '$modulePath', \\n\";\r\n                    }\r\n                    $modulesPathsArray .= \"\\t); \\n\";\r\n                    \r\n                    fwrite($fd, $modulesPathsArray);\r\n                    fclose($fd);\r\n                    chmod($modulePathFile, 0777);\r\n                    \r\n                    $this->displayFile($sm);\r\n                }\r\n                else\r\n                {\r\n                    /*echo \"Error generating file $modulePathFile : check rights\";\r\n                    die;*/\r\n                }\r\n            }\r\n            catch (\\Exception $e)\r\n            {\r\n                /*echo \"Error generating file $modulePathFile : check rights\";\r\n                die;*/\r\n            }\r\n        }\r\n    }\r\n    \r\n    public function displayFile($sm)\r\n    {\r\n\r\n        $moduleSvc =  $sm->get('MelisAssetManagerModulesService');\r\n        $assetConfigFolder = $_SERVER['DOCUMENT_ROOT'] . '/../config';\r\n        $uri = $_SERVER['REQUEST_URI'];\r\n        \r\n        $UriWithoutParams = explode('?', $uri);\r\n        \r\n        $UriParams = \"\";\r\n        $UriWithoutParams = $UriWithoutParams[0];\r\n        if (!empty($UriWithoutParams[1]))\r\n            $UriParams = $UriWithoutParams[1];\r\n        \r\n        \r\n        // First check if asset in main public folder\r\n        $pathFile = $_SERVER['DOCUMENT_ROOT'] . $UriWithoutParams;\r\n        if (is_file($pathFile) && $this->checkFileInFolder($pathFile, $_SERVER['DOCUMENT_ROOT']))\r\n            $this->sendDocument($pathFile, $UriParams);\r\n        else\r\n        {\r\n            // testing module public folder second\r\n            if (file_exists($assetConfigFolder . $this->modulePathFile))\r\n            {\r\n                $loadedModules = $moduleSvc->getAllModules();\r\n                $modulesPath = require $assetConfigFolder . $this->modulePathFile;\r\n                \r\n                $detailUri = explode('/', $UriWithoutParams);\r\n                if (count($detailUri) > 1)\r\n                {\r\n                    $moduleUri = $detailUri[1];\r\n                    \r\n                    // Need to have a path defined, and module loaded \r\n                    if (!empty($modulesPath[$moduleUri]) && (in_array($moduleUri, $loadedModules) ||\r\n                        strpos($modulesPath[$moduleUri], 'MelisSites') !== false))\r\n                    {\r\n                        $path = $modulesPath[$moduleUri];\r\n                        \r\n                        if (str_replace($_SERVER['DOCUMENT_ROOT'] . '/..', '', $path) == $path)\r\n                        {\r\n                            // relative path\r\n                            $path = $_SERVER['DOCUMENT_ROOT'] . '/..' . $path;\r\n                        }\r\n    \r\n                        $pathFile = $path . '/public';\r\n                        for ($i = 2; $i < count($detailUri); $i++)\r\n                            $pathFile .= '/' . $detailUri[$i];\r\n    \r\n                        if ($pathFile != '')\r\n                        {\r\n                            if (is_file($pathFile) && $this->checkFileInFolder($pathFile, $path . '/public/'))\r\n                                $this->sendDocument($pathFile, $UriParams);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }\r\n    \r\n    public function getMimeType($filename)\r\n    {\r\n        $mimeConfig = require __DIR__ . $this->mimePathFile;\r\n                            \r\n        $extension = strtolower(pathinfo($filename, PATHINFO_EXTENSION));\r\n    \r\n        if (isset($mimeConfig['mime'][$extension])) {\r\n            return $mimeConfig['mime'][$extension];\r\n        }\r\n    \r\n        return 'text/plain';\r\n    }\r\n    \r\n    public function sendDocument($pathFile, $UriParams)\r\n    {\r\n        $mime   = $this->getMimeType($pathFile);\r\n\r\n        // if php file, we need to eval\r\n        if ($mime == 'application/x-httpd-php') {\r\n            header('HTTP/1.0 200 OK');\r\n            header(\"Content-Type: text/html; charset=UTF-8\" . $mime);\r\n\r\n            $folderPath = explode('/', $pathFile);\r\n            $fileName = $folderPath[count($folderPath) - 1];\r\n            unset($folderPath[count($folderPath) - 1]);\r\n            $folderPath = implode('/', $folderPath);\r\n            \r\n            eval ( ' chdir(\"' . $folderPath . '\"); require \"' . $fileName . '\";' );\r\n        } else {\r\n\r\n            $content = file_get_contents($pathFile);\r\n\r\n\r\n            header('HTTP/1.0 200 OK');\r\n            header(\"Content-Type: \" . $mime);\r\n\r\n            $seconds_to_cache = 60 * 60 * 24; // 24hrs\r\n            $ts = gmdate(\"D, d M Y H:i:s\", time() + $seconds_to_cache) . \" GMT\";\r\n            header(\"Expires: $ts\");\r\n            header(\"Pragma: cache\");\r\n            header(\"Cache-Control: max-age=$seconds_to_cache\");\r\n\r\n            print $content;\r\n        }\r\n\r\n        die;\r\n    }\r\n    \r\n    public function getConfig()\r\n    {\r\n    \t$config = [];\r\n    \t$configFiles = [\r\n    \t\t\tinclude __DIR__ . '/../config/module.config.php',\r\n    \t];\r\n\r\n    \tforeach ($configFiles as $file) {\r\n    \t\t$config = ArrayUtils::merge($config, $file);\r\n    \t}\r\n\r\n    \treturn $config;\r\n    }\r\n\r\n    public function getAutoloaderConfig()\r\n    {\r\n        return [\r\n            'Laminas\\Loader\\StandardAutoloader' => [\r\n                'namespaces' => [\r\n                    __NAMESPACE__ => __DIR__ . '/src/' . __NAMESPACE__,\r\n                ],\r\n            ],\r\n        ];\r\n    }\r\n\r\n     /*checks if the file is inside the given folder*/\r\n    protected function checkFileInFolder($file, $folder)\r\n    {       \r\n        $path = realpath($file);        \r\n        if ($path !== false) {\r\n            if (strpos($path, realpath($folder)) !== 0) {                   \r\n                throw new \\Exception('Requested resource is outside of ' . $folder);\r\n            } else {              \r\n                return true;\r\n            }\r\n        } else {                   \r\n            return false;\r\n        }\r\n    }\r\n}\r\n"], "filenames": ["src/Module.php"], "buggy_code_start_loc": [151], "buggy_code_end_loc": [265], "fixing_code_start_loc": [151], "fixing_code_end_loc": [280], "type": "CWE-22", "message": "MelisAssetManager provides deliveries of Melis Platform's assets located in every module's public folder. Attackers can read arbitrary files on affected versions of `melisplatform/melis-asset-manager`, leading to the disclosure of sensitive information. Conducting this attack does not require authentication. Users should immediately upgrade to `melisplatform/melis-asset-manager` >= 5.0.1. This issue was addressed by restricting access to files to intended directories only.", "other": {"cve": {"id": "CVE-2022-39296", "sourceIdentifier": "security-advisories@github.com", "published": "2022-10-11T18:15:10.047", "lastModified": "2022-10-14T01:05:43.000", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "MelisAssetManager provides deliveries of Melis Platform's assets located in every module's public folder. Attackers can read arbitrary files on affected versions of `melisplatform/melis-asset-manager`, leading to the disclosure of sensitive information. Conducting this attack does not require authentication. Users should immediately upgrade to `melisplatform/melis-asset-manager` >= 5.0.1. This issue was addressed by restricting access to files to intended directories only."}, {"lang": "es", "value": "MelisAssetManager proporciona entregas de los activos de la Plataforma Melis ubicados en la carpeta p\u00fablica de cada m\u00f3dulo. Los atacantes pueden leer archivos arbitrarios en las versiones afectadas de \"melisplatform/melis-asset-manager\", conllevando a una divulgaci\u00f3n de informaci\u00f3n confidencial. Conducir este ataque no requiere autenticaci\u00f3n. Los usuarios deben actualizar inmediatamente a \"melisplatform/melis-asset-manager\" versiones posteriores a 5.0.1 incluy\u00e9ndola. Este problema ha sido abordado al restringir el acceso a los archivos \u00fanicamente a directorios previstos"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 8.6, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 4.7}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:melistechnology:melis-asset-manager:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.0.1", "matchCriteriaId": "B9986CA1-F182-45B2-8E21-5688C147FC32"}]}]}], "references": [{"url": "https://github.com/melisplatform/melis-asset-manager/commit/a0f75918c049aff78953a0bc91c585153595d1bd", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/melisplatform/melis-asset-manager/security/advisories/GHSA-7fj2-rrq6-rphq", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/melisplatform/melis-asset-manager/commit/a0f75918c049aff78953a0bc91c585153595d1bd"}}