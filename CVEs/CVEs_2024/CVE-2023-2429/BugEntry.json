{"buggy_code": ["<?php\n\n/**\n * The Ajax Service Layer.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2010-09-15\n */\n\nconst IS_VALID_PHPMYFAQ = null;\n\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Entity\\Comment;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqMetaData;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\QuestionHelper;\nuse phpMyFAQ\\Helper\\RegistrationHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Network;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Stopwords;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Bootstrapping\n//\nrequire 'src/Bootstrap.php';\n\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n$ajaxLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n$code = Filter::filterInput(INPUT_POST, 'captcha', FILTER_UNSAFE_RAW);\n$currentToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n\n$Language = new Language($faqConfig);\n$languageCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (Language::isASupportedLanguage($ajaxLang)) {\n    $languageCode = trim($ajaxLang);\n    require_once 'lang/language_' . $languageCode . '.php';\n} else {\n    $languageCode = 'en';\n    require_once 'lang/language_en.php';\n}\n\n//\n// Load plurals support for selected language\n//\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($languageCode);\n\n//\n// Send headers\n//\n$http = new HttpHelper();\n$http->setContentType('application/json');\n\n$faqSession = new Session($faqConfig);\n$network = new Network($faqConfig);\n$stopWords = new Stopwords($faqConfig);\n\nif (!$network->checkIp($_SERVER['REMOTE_ADDR'])) {\n    $message = ['error' => $PMF_LANG['err_bannedIP']];\n}\n\n//\n// Check, if user is logged in\n//\n$user = CurrentUser::getFromCookie($faqConfig);\nif (!$user instanceof CurrentUser) {\n    $user = CurrentUser::getFromSession($faqConfig);\n}\nif ($user instanceof CurrentUser) {\n    $isLoggedIn = true;\n} else {\n    $isLoggedIn = false;\n}\n\n//\n// Check captcha\n//\n$captcha = new Captcha($faqConfig);\n$captcha->setUserIsLoggedIn($isLoggedIn);\n\nif (\n    'savevoting' !== $action && 'saveuserdata' !== $action && 'changepassword' !== $action &&\n    !$captcha->checkCaptchaCode($code ?? '')\n) {\n    $message = ['error' => $PMF_LANG['msgCaptcha']];\n}\n\n//\n// Check if the user is logged in when FAQ is completely secured\n//\nif (\n    false === $isLoggedIn && $faqConfig->get('security.enableLoginOnly') &&\n    'changepassword' !== $action && 'saveregistration' !== $action\n) {\n    $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n}\n\nif (isset($message['error'])) {\n    $http->sendJsonWithHeaders($message);\n    exit();\n}\n\n// Save user generated content\nswitch ($action) {\n    //\n    // Comments\n    //\n    case 'savecomment':\n        if (\n            !$faqConfig->get('records.allowCommentsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addcomment')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $oComment = new Comments($faqConfig);\n        $category = new Category($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW);\n        $faqId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $newsId = Filter::filterInput(INPUT_POST, 'newsId', FILTER_VALIDATE_INT);\n        $username = Filter::filterInput(INPUT_POST, 'user', FILTER_UNSAFE_RAW);\n        $mailer = Filter::filterInput(INPUT_POST, 'mail', FILTER_VALIDATE_EMAIL);\n        $comment = Filter::filterInput(INPUT_POST, 'comment_text', FILTER_UNSAFE_RAW);\n\n        switch ($type) {\n            case 'news':\n                $id = $newsId;\n                break;\n            case 'faq':\n                $id = $faqId;\n                break;\n        }\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($mailer)) {\n            $mailer = $faqConfig->getAdminEmail();\n        }\n\n        // Check display name and e-mail address for not logged-in users\n        if (false === $isLoggedIn) {\n            $user = new User($faqConfig);\n            if (true === $user->checkDisplayName($username) && true === $user->checkMailAddress($mailer)) {\n                $message = ['error' => '-' . $PMF_LANG['err_SaveComment']];\n                break;\n            }\n        }\n\n        if (\n            !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord($comment) &&\n            !$faq->commentDisabled($id, $languageCode, $type) && !$faq->isActive($id, $languageCode, $type)\n        ) {\n            try {\n                $faqSession->userTracking('save_comment', $id);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $commentEntity = new Comment();\n            $commentEntity\n                ->setRecordId($id)\n                ->setType($type)\n                ->setUsername($username)\n                ->setEmail($mailer)\n                ->setComment(nl2br(strip_tags($comment)))\n                ->setDate($_SERVER['REQUEST_TIME']);\n\n            if ($oComment->addComment($commentEntity)) {\n                $emailTo = $faqConfig->getAdminEmail();\n                $title = '';\n                $urlToContent = '';\n                if ('faq' == $type) {\n                    $faq->getRecord($id);\n                    if ($faq->faqRecord['email'] != '') {\n                        $emailTo = $faq->faqRecord['email'];\n                    }\n\n                    $title = $faq->getRecordTitle($id);\n\n                    $faqUrl = sprintf(\n                        '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $category->getCategoryIdFromFaq($faq->faqRecord['id']),\n                        $faq->faqRecord['id'],\n                        $faq->faqRecord['lang']\n                    );\n                    $oLink = new Link($faqUrl, $faqConfig);\n                    $oLink->itemTitle = $faq->faqRecord['title'];\n                    $urlToContent = $oLink->toString();\n                } else {\n                    $news = new News($faqConfig);\n                    $newsData = $news->getNewsEntry($id);\n                    if ($newsData['authorEmail'] != '') {\n                        $emailTo = $newsData['authorEmail'];\n                    }\n\n                    $title = $newsData['header'];\n\n                    $link = sprintf(\n                        '%s?action=news&newsid=%d&newslang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $newsData['id'],\n                        $newsData['lang']\n                    );\n                    $oLink = new Link($link, $faqConfig);\n                    $oLink->itemTitle = $newsData['header'];\n                    $urlToContent = $oLink->toString();\n                }\n\n                $commentMail =\n                    'User: ' . $commentEntity->getUsername() . ', mailto:' . $commentEntity->getEmail() . \"\\n\" .\n                    'Title: ' . $title . \"\\n\" .\n                    'New comment posted here: ' . $urlToContent .\n                    \"\\n\\n\" .\n                    wordwrap($comment, 72);\n\n                $send = [];\n                $mailer = new Mail($faqConfig);\n                $mailer->setReplyTo($commentEntity->getEmail(), $commentEntity->getUsername());\n                $mailer->addTo($emailTo);\n\n                $send[$emailTo] = 1;\n                $send[$faqConfig->getAdminEmail()] = 1;\n\n                if ($type === CommentType::FAQ) {\n                    // Let the category owner of a FAQ get a copy of the message\n                    $category = new Category($faqConfig);\n                    $categories = $category->getCategoryIdsFromFaq($faq->faqRecord['id']);\n                    foreach ($categories as $_category) {\n                        $userId = $category->getOwner($_category);\n                        $catUser = new User($faqConfig);\n                        $catUser->getUserById($userId);\n                        $catOwnerEmail = $catUser->getUserData('email');\n\n                        if ($catOwnerEmail !== '') {\n                            if (!isset($send[$catOwnerEmail]) && $catOwnerEmail !== $emailTo) {\n                                $mailer->addCc($catOwnerEmail);\n                                $send[$catOwnerEmail] = 1;\n                            }\n                        }\n                    }\n                }\n\n                $mailer->subject = $faqConfig->getTitle() . ': New comment for \"' . $title . '\"';\n                $mailer->message = strip_tags($commentMail);\n\n                $result = $mailer->send();\n                unset($mailer);\n\n                $message = ['success' => $PMF_LANG['msgCommentThanks']];\n            } else {\n                try {\n                    $faqSession->userTracking('error_save_comment', $id);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n                $message = ['error' => $PMF_LANG['err_SaveComment']];\n            }\n        } else {\n            $message = ['error' => 'Please add your name, your e-mail address and a comment!'];\n        }\n        break;\n\n    case 'savefaq':\n        if (\n            !$faqConfig->get('records.allowNewFaqsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addfaq')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $category = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n\n        $author = trim(Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW));\n        $email = trim(Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL));\n        $faqId = Filter::filterInput(INPUT_POST, 'faqid', FILTER_VALIDATE_INT);\n        $faqLanguage = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $question = trim(strip_tags($question));\n        if ($faqConfig->get('main.enableWysiwygEditorFrontend')) {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = trim(html_entity_decode($answer));\n        } else {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_UNSAFE_RAW);\n            $answer = strip_tags($answer);\n            $answer = trim(nl2br($answer));\n        }\n        $translatedAnswer = trim(Filter::filterInput(INPUT_POST, 'translated_answer', FILTER_UNSAFE_RAW));\n        $contentLink = Filter::filterInput(INPUT_POST, 'contentlink', FILTER_UNSAFE_RAW);\n        $contentLink = Filter::filterVar($contentLink, FILTER_VALIDATE_URL);\n        $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n        $categories = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'rubrik' => [\n                    'filter' => FILTER_VALIDATE_INT,\n                    'flags' => FILTER_REQUIRE_ARRAY,\n                ],\n            ]\n        );\n\n        // Check on translation\n        if (empty($answer) && !is_null($translatedAnswer)) {\n            $answer = $translatedAnswer;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !empty($question) &&\n            $stopWords->checkBannedWord(strip_tags($question)) &&\n            !empty($answer) && $stopWords->checkBannedWord(strip_tags($answer)) &&\n            ((is_null($faqId) && !is_null($categories['rubrik'])) || (!is_null($faqId) && !is_null($faqLanguage) &&\n                    Language::isASupportedLanguage($faqLanguage)))\n        ) {\n            $isNew = true;\n            $newLanguage = '';\n\n            if (!is_null($faqId)) {\n                $isNew = false;\n                try {\n                    $faqSession->userTracking('save_new_translation_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            } else {\n                try {\n                    $faqSession->userTracking('save_new_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            }\n\n            $isTranslation = false;\n            if (!is_null($faqLanguage)) {\n                $isTranslation = true;\n                $newLanguage = $faqLanguage;\n            }\n\n            if (!is_null($contentLink) && Strings::substr($contentLink, 7) !== '') {\n                $answer = sprintf(\n                    '%s<br><div id=\"newFAQContentLink\">%s<a href=\"http://%s\" target=\"_blank\">%s</a></div>',\n                    $answer,\n                    $PMF_LANG['msgInfo'],\n                    Strings::substr($contentLink, 7),\n                    $contentLink\n                );\n            }\n\n            $autoActivate = $faqConfig->get('records.defaultActivation');\n\n            $newData = [\n                'lang' => ($isTranslation === true ? $newLanguage : $languageCode),\n                'thema' => $question,\n                'active' => ($autoActivate ? FAQ_SQL_ACTIVE_YES : FAQ_SQL_ACTIVE_NO),\n                'sticky' => 0,\n                'content' => $answer,\n                'keywords' => $keywords,\n                'author' => $author,\n                'email' => $email,\n                'comment' => 'y',\n                'date' => date('YmdHis'),\n                'dateStart' => '00000000000000',\n                'dateEnd' => '99991231235959',\n                'linkState' => '',\n                'linkDateCheck' => 0,\n                'notes' => ''\n            ];\n\n            if ($isNew) {\n                $categories = $categories['rubrik'];\n            } else {\n                $newData['id'] = $faqId;\n                $categories = $category->getCategoryIdsFromFaq($newData['id']);\n            }\n\n            $recordId = $faq->addRecord($newData, $isNew);\n\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionID', FILTER_VALIDATE_INT);\n            if ($openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) {\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories[0]);\n                }\n            }\n\n            $faqMetaData = new FaqMetaData($faqConfig);\n            $faqMetaData\n                ->setFaqId($recordId)\n                ->setFaqLanguage($newData['lang'])\n                ->setCategories($categories)\n                ->save();\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            $categoryHelper = new CategoryHelper();\n            $categoryHelper\n                ->setCategory($category)\n                ->setConfiguration($faqConfig);\n\n            $moderators = $categoryHelper->getModerators($categories);\n\n            try {\n                $notification = new Notification($faqConfig);\n                $notification->sendNewFaqAdded($moderators, $recordId, $faqLanguage);\n            } catch (Exception $e) {\n                // @todo handle exception in v3.2\n            }\n\n\n            $message = [\n                'success' => ($isNew ? $PMF_LANG['msgNewContentThanks'] : $PMF_LANG['msgNewTranslationThanks']),\n            ];\n        } else {\n            $message = [\n                'error' => $PMF_LANG['err_SaveEntries']\n            ];\n        }\n\n        break;\n\n    //\n    // Add question\n    //\n    case 'savequestion':\n        if (\n            !$faqConfig->get('records.allowQuestionsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addquestion')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $cat = new Category($faqConfig);\n        $categories = $cat->getAllCategories();\n        $author = trim(Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW));\n        $email = trim(Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL));\n        $ucategory = Filter::filterInput(INPUT_POST, 'category', FILTER_VALIDATE_INT);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $question = trim(strip_tags($question));\n        $save = Filter::filterInput(INPUT_POST, 'save', FILTER_VALIDATE_INT, 0);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // If smart answering is disabled, save question immediately\n        if (false === $faqConfig->get('main.enableSmartAnswering')) {\n            $save = true;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && $stopWords->checkBannedWord(\n                Strings::htmlspecialchars($question)\n            )\n        ) {\n            if ($faqConfig->get('records.enableVisibilityQuestions')) {\n                $visibility = 'Y';\n            } else {\n                $visibility = 'N';\n            }\n\n            $questionData = [\n                'username' => $author,\n                'email' => $email,\n                'category_id' => $ucategory,\n                'question' => Strings::htmlspecialchars($question),\n                'is_visible' => $visibility\n            ];\n\n            if (false === (bool)$save) {\n                $cleanQuestion = $stopWords->clean($question);\n\n                $user = new CurrentUser($faqConfig);\n                $faqSearch = new Search($faqConfig);\n                $faqSearch->setCategory(new Category($faqConfig));\n                $faqSearch->setCategoryId((int) $ucategory);\n                $faqPermission = new FaqPermission($faqConfig);\n                $faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n                $searchResult = [];\n                $mergedResult = [];\n\n                foreach ($cleanQuestion as $word) {\n                    if (!empty($word)) {\n                        $searchResult[] = $faqSearch->search($word, false);\n                    }\n                }\n                foreach ($searchResult as $resultSet) {\n                    foreach ($resultSet as $result) {\n                        $mergedResult[] = $result;\n                    }\n                }\n                $faqSearchResult->reviewResultSet($mergedResult);\n\n                if (0 < $faqSearchResult->getNumberOfResults()) {\n                    $response = sprintf(\n                        '<p>%s</p>',\n                        $plr->getMsg('plmsgSearchAmount', $faqSearchResult->getNumberOfResults())\n                    );\n\n                    $response .= '<ul>';\n\n                    $faqHelper = new FaqHelper($faqConfig);\n                    foreach ($faqSearchResult->getResultSet() as $result) {\n                        $url = sprintf(\n                            '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                            $faqConfig->getDefaultUrl(),\n                            $result->category_id,\n                            $result->id,\n                            $result->lang\n                        );\n                        $oLink = new Link($url, $faqConfig);\n                        $oLink->text = Utils::chopString($result->question, 15);\n                        $oLink->itemTitle = $result->question;\n\n                        try {\n                            $response .= sprintf(\n                                '<li>%s<br><div class=\"searchpreview\">%s...</div></li>',\n                                $oLink->toHtmlAnchor(),\n                                $faqHelper->renderAnswerPreview($result->answer, 10)\n                            );\n                        } catch (Exception $e) {\n                            // handle exception\n                        }\n                    }\n                    $response .= '</ul>';\n\n                    $message = ['result' => $response];\n                } else {\n                    $questionHelper = new QuestionHelper($faqConfig, $cat);\n                    try {\n                        $questionHelper->sendSuccessMail($questionData, $categories);\n                    } catch (Exception $e) {\n                        // @todo Handle exception\n                    }\n                    $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n                }\n            } else {\n                $questionHelper = new QuestionHelper($faqConfig, $cat);\n                try {\n                    $questionHelper->sendSuccessMail($questionData, $categories);\n                } catch (Exception $e) {\n                    // @todo Handle exception\n                }\n                $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['err_SaveQuestion']];\n        }\n\n        break;\n\n    case 'saveregistration':\n        $registration = new RegistrationHelper($faqConfig);\n\n        $fullName = Filter::filterInput(INPUT_POST, 'realname', FILTER_UNSAFE_RAW);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW) ?? false;\n\n        if (!$registration->isDomainWhitelisted($email)) {\n            $message = ['error' => 'The domain is not whitelisted.'];\n            break;\n        }\n\n        if (!is_null($userName) && !is_null($email) && !is_null($fullName)) {\n            $message = $registration->createUser($userName, $fullName, $email, $isVisible);\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    case 'savevoting':\n        $faq = new Faq($faqConfig);\n        $rating = new Rating($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW, 'faq');\n        $recordId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $vote = Filter::filterInput(INPUT_POST, 'vote', FILTER_VALIDATE_INT);\n        $userIp = Filter::filterVar($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP);\n\n        if (isset($vote) && $rating->check($recordId, $userIp) && $vote > 0 && $vote < 6) {\n            try {\n                $faqSession->userTracking('save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $votingData = [\n                'record_id' => $recordId,\n                'vote' => $vote,\n                'user_ip' => $userIp,\n            ];\n\n            if (!$rating->getNumberOfVotings($recordId)) {\n                $rating->addVoting($votingData);\n            } else {\n                $rating->update($votingData);\n            }\n            $message = [\n                'success' => $PMF_LANG['msgVoteThanks'],\n                'rating' => $rating->getVotingResult($recordId),\n            ];\n        } elseif (!$rating->check($recordId, $userIp)) {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_VoteTooMuch']];\n        } else {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_noVote']];\n        }\n\n        break;\n\n    // Send user generated mails\n    case 'sendcontact':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && !empty($question) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = Utils::resolveMarkers('Feedback: %sitename%', $faqConfig);\n            $mailer->message = $question;\n            $mailer->send();\n\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    // Send mails to friends\n    case 'sendtofriends':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $link = Filter::filterInput(INPUT_POST, 'link', FILTER_VALIDATE_URL);\n        $attached = Filter::filterInput(INPUT_POST, 'message', FILTER_UNSAFE_RAW);\n        $mailto = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'mailto' => [\n                    'filter' => FILTER_VALIDATE_EMAIL,\n                    'flags' => FILTER_REQUIRE_ARRAY | FILTER_NULL_ON_FAILURE,\n                ],\n            ]\n        );\n\n        if (\n            !is_null($author) && !is_null($email) && is_array($mailto) && !empty($mailto['mailto'][0]) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($attached))\n        ) {\n            foreach ($mailto['mailto'] as $recipient) {\n                $recipient = trim(strip_tags($recipient));\n                if (!empty($recipient)) {\n                    $mailer = new Mail($faqConfig);\n                    $mailer->setReplyTo($email, $author);\n                    $mailer->addTo($recipient);\n                    $mailer->subject = $PMF_LANG['msgS2FMailSubject'] . $author;\n                    $mailer->message = sprintf(\n                        \"%s\\r\\n\\r\\n%s\\r\\n%s\\r\\n\\r\\n%s\",\n                        $faqConfig->get('main.send2friendText'),\n                        $PMF_LANG['msgS2FText2'],\n                        $link,\n                        $attached\n                    );\n\n                    // Send the email\n                    $result = $mailer->send();\n                    unset($mailer);\n                    usleep(250);\n                }\n            }\n\n            $message = ['success' => $PMF_LANG['msgS2FThx']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    //\n    // Save user data from UCP\n    //\n    case 'saveuserdata':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $currentToken) {\n            $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n            break;\n        }\n\n        $userId = Filter::filterInput(INPUT_POST, 'userid', FILTER_VALIDATE_INT);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_SANITIZE_SPECIAL_CHARS);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW);\n        $password = Filter::filterInput(INPUT_POST, 'password', FILTER_UNSAFE_RAW);\n        $confirm = Filter::filterInput(INPUT_POST, 'password_confirm', FILTER_UNSAFE_RAW);\n\n        $user = CurrentUser::getFromSession($faqConfig);\n\n        if ($userId !== $user->getUserId()) {\n            $message = ['error' => 'User ID mismatch!'];\n            break;\n        }\n\n        if ($password !== $confirm) {\n            $message = ['error' => $PMF_LANG['ad_user_error_passwordsDontMatch']];\n            break;\n        }\n\n        if (strlen($password) <= 7 || strlen($confirm) <= 7) {\n            $message = ['error' => $PMF_LANG['ad_passwd_fail']];\n            break;\n        } else {\n            $userData = [\n                'display_name' => $userName,\n                'email' => $email,\n                'is_visible' => $isVisible === 'on' ? 1 : 0\n            ];\n            $success = $user->setUserData($userData);\n\n            foreach ($user->getAuthContainer() as $author => $auth) {\n                if ($auth->setReadOnly()) {\n                    continue;\n                }\n                if (!$auth->update($user->getLogin(), $password)) {\n                    $message = ['error' => $auth->error()];\n                    $success = false;\n                } else {\n                    $success = true;\n                }\n            }\n        }\n\n        if ($success) {\n            $message = ['success' => $PMF_LANG['ad_entry_savedsuc']];\n        } else {\n            $message = ['error' => $PMF_LANG['ad_entry_savedfail']];\n        }\n        break;\n\n    //\n    // Change password\n    //\n    case 'changepassword':\n        $username = Filter::filterInput(INPUT_POST, 'username', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n\n        if (!is_null($username) && !is_null($email)) {\n            $user = new CurrentUser($faqConfig);\n            $loginExist = $user->getUserByLogin($username);\n\n            if ($loginExist && ($email == $user->getUserData('email'))) {\n                $newPassword = $user->createPassword();\n                $user->changePassword($newPassword);\n                $text = $PMF_LANG['lostpwd_text_1'] . \"\\nUsername: \" . $username . \"\\nNew Password: \" . $newPassword . \"\\n\\n\" . $PMF_LANG['lostpwd_text_2'];\n\n                $mailer = new Mail($faqConfig);\n                $mailer->addTo($email);\n                $mailer->subject = Utils::resolveMarkers('[%sitename%] Username / password request', $faqConfig);\n                $mailer->message = $text;\n                $result = $mailer->send();\n                unset($mailer);\n                // Trust that the email has been sent\n                $message = ['success' => $PMF_LANG['lostpwd_mail_okay']];\n            } else {\n                $message = ['error' => $PMF_LANG['lostpwd_err_1']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['lostpwd_err_2']];\n        }\n        break;\n\n    //\n    // Request removal of user\n    //\n    case 'request-removal':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $loginName = Filter::filterInput(INPUT_POST, 'loginname', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) &&\n            !empty($question) && $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['ad_user_loginname'],\n                $loginName,\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = $faqConfig->getTitle() . ': Remove User Request';\n            $mailer->message = $question;\n            $result = $mailer->send();\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n}\n\n$http->sendJsonWithHeaders($message);\nexit();\n", "<?php\n\n/**\n * Creates a new user object.\n * A user are recognized by the session-id using getUserBySessionId(), by his\n * using getUserById() or by his nickname (login) using getUserByLogin(). New\n * are created using createNewUser().\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Lars Tiedemann <php@larstiedemann.de>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Sarah Hermann <sayh@gmx.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-09-17\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\nuse phpMyFAQ\\Auth\\AuthDatabase;\nuse phpMyFAQ\\Auth\\AuthDriverInterface;\nuse phpMyFAQ\\Auth\\AuthHttp;\nuse phpMyFAQ\\Auth\\AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso;\nuse phpMyFAQ\\Permission\\BasicPermission;\nuse phpMyFAQ\\Permission\\LargePermission;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\User\\UserData;\n\nif (!defined('PMF_ENCRYPTION_TYPE')) {\n    define('PMF_ENCRYPTION_TYPE', 'md5'); // Fallback to md5()\n}\n\n/**\n * Class User\n *\n * @package phpMyFAQ\n */\nclass User\n{\n    public const ERROR_USER_ADD = 'Account could not be created. ';\n    public const ERROR_USER_CANNOT_CREATE_USER = 'User account could not be created. ';\n    public const ERROR_USER_CANNOT_CREATE_USERDATA = 'Entry for user data could not be created. ';\n    public const ERROR_USER_CANNOT_DELETE_USER = 'User account could not be deleted. ';\n    public const ERROR_USER_CANNOT_DELETE_USERDATA = 'Entry for user data could not be deleted. ';\n    public const ERROR_USER_CHANGE = 'Account could not be updated. ';\n    public const ERROR_USER_DELETE = 'Account could not be deleted. ';\n    public const ERROR_USER_INCORRECT_LOGIN = 'Specified login could not be found. ';\n    public const ERROR_USER_INCORRECT_PASSWORD = 'Specified password is not correct.';\n    public const ERROR_USER_INVALID_STATUS = 'Undefined user status.';\n    public const ERROR_USER_LOGINNAME_TOO_SHORT = 'The chosen loginname is too short.';\n    public const ERROR_USER_LOGIN_NOT_UNIQUE = 'Specified login name already exists. ';\n    public const ERROR_USER_LOGIN_INVALID = 'The chosen login is invalid. A valid login has at least four ' .\n        'characters. Only letters, numbers and underscore _ are allowed. The first letter must be a letter. ';\n    public const ERROR_USER_NO_PERM = 'No permission container specified.';\n    public const ERROR_USER_NO_USERID = 'No user-ID found. ';\n    public const ERROR_USER_NO_USERLOGINDATA = 'No user login data found. ';\n    public const ERROR_USER_NOT_FOUND = 'User account could not be found. ';\n    public const ERROR_USER_NO_AUTH_WRITABLE = 'No authentication object is writable.';\n    public const ERROR_USER_TOO_MANY_FAILED_LOGINS = 'You exceeded the maximum amounts of login attempts and are ' .\n        'temporarily blocked. Please try again later.';\n\n    public const STATUS_USER_PROTECTED = 'User account is protected. ';\n    public const STATUS_USER_BLOCKED = 'User account is blocked. ';\n    public const STATUS_USER_ACTIVE = 'User account is active. ';\n\n    /**\n     * Permission container.\n     *\n     * @var BasicPermission|MediumPermission|LargePermission\n     */\n    public $perm;\n\n    /**\n     * User-data storage container.\n     *\n     * @var UserData|null\n     */\n    public ?UserData $userdata = null;\n\n    /**\n     * Public array that contains error messages.\n     *\n     * @var array<string>\n     */\n    public $errors = [];\n\n    /**\n     * authentication container.\n     *\n     * @var array<string, AuthDatabase|AuthHttp|AuthLdap|AuthSso>\n     */\n    protected $authContainer = [];\n\n    /**\n     * Configuration.\n     *\n     * @var Configuration|null\n     */\n    protected ?Configuration $config = null;\n\n    /**\n     * Default Authentication properties.\n     *\n     * @var array<string, array<string, string>|string|false>\n     */\n    private $authData = [\n        'authSource' => [\n            'name' => 'database',\n            'type' => 'local',\n        ],\n        'encType' => PMF_ENCRYPTION_TYPE,\n        'readOnly' => false,\n    ];\n\n    /**\n     * login string.\n     *\n     * @var string\n     */\n    private string $login = '';\n\n    /**\n     * minimum length of login string (default: 2).\n     *\n     * @var int\n     */\n    private int $loginMinLength = 2;\n\n    /**\n     * regular expression to find invalid login strings\n     * (default: /^[a-z0-9][\\w\\.\\-@]+/is ).\n     *\n     * @var string\n     */\n    private string $validUsername = '/^[a-z0-9][\\w\\.\\-@]+/is';\n\n    /**\n     * user ID.\n     *\n     * @var int\n     */\n    private int $userId = -1;\n\n    /**\n     * Status of user.\n     *\n     * @var string\n     */\n    private string $status = '';\n\n    /**\n     * IS the user a super admin?\n     *\n     * @var bool\n     */\n    private bool $isSuperAdmin = false;\n\n    /**\n     * array of allowed values for status.\n     *\n     * @var array<string>\n     */\n    private $allowedStatus = [\n        'active' => self::STATUS_USER_ACTIVE,\n        'blocked' => self::STATUS_USER_BLOCKED,\n        'protected' => self::STATUS_USER_PROTECTED,\n    ];\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n\n        $perm = Permission::selectPerm($this->config->get('security.permLevel'), $this->config);\n        /** @phpstan-ignore-next-line */\n        if (!$this->addPerm($perm)) {\n            return;\n        }\n\n        // Always create a 'local' authentication object (see: $authData)\n        $this->authContainer = [];\n        $auth = new Auth($this->config);\n\n        /** @var AuthDatabase|AuthHttp|AuthLdap|AuthSso */\n        $authLocal = $auth->selectAuth($this->getAuthSource('name'));\n        $authLocal->selectEncType($this->getAuthData('encType'));\n        $authLocal->setReadOnly($this->getAuthData('readOnly'));\n\n        if (!$this->addAuth($authLocal, $this->getAuthSource('type'))) {\n            return;\n        }\n\n        // additionally, set given $auth objects\n        /** @phpstan-ignore-next-line */\n        foreach ($this->authContainer as $name => $authObject) {\n            if (!$this->addAuth($authObject, $name)) {\n                break;\n            }\n        }\n\n\n        // user data object\n        $this->userdata = new UserData($this->config);\n    }\n\n    /**\n     * Adds a permission object to the user.\n     *\n     * @param BasicPermission|MediumPermission|LargePermission $perm Permission object\n     * @return bool\n     */\n    public function addPerm($perm): bool\n    {\n        $this->perm = $perm;\n        return true;\n    }\n\n    /**\n     * Returns a specific entry from the auth data source array.\n     *\n     * @param string $key\n     * @return string|null\n     */\n    public function getAuthSource(string $key): ?string\n    {\n        if (isset($this->authData['authSource'][$key])) {\n            return $this->authData['authSource'][$key];\n        }\n        return null;\n    }\n\n    /**\n     * Returns a specific entry from the auth data array.\n     *\n     * @param string $key\n     * @return string|bool|null\n     */\n    public function getAuthData(string $key)\n    {\n        if (isset($this->authData[$key])) {\n            return $this->authData[$key];\n        }\n        return null;\n    }\n\n    /**\n     * adds a new authentication object to the user object.\n     *\n     * @param AuthDatabase|AuthHttp|AuthLdap|AuthSso $auth Driver object\n     * @param string              $name Auth name\n     * @return bool\n     */\n    public function addAuth($auth, string $name): bool\n    {\n        if ($this->checkAuth($auth)) {\n            $this->authContainer[$name] = $auth;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns true if auth is a valid authentication object.\n     *\n     * @param Auth $auth Auth object\n     * @return bool\n     */\n    protected function checkAuth(Auth $auth): bool\n    {\n        $methods = ['checkCredentials'];\n        foreach ($methods as $method) {\n            if (!method_exists($auth, $method)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * loads basic user information from the database selecting the user with\n     * specified cookie information.\n     *\n     * @param string $cookie\n     * @return bool\n     */\n    public function getUserByCookie(string $cookie): bool\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                user_id,\n                login,\n                account_status\n            FROM\n                %sfaquser\n            WHERE\n                remember_me = '%s' AND account_status != 'blocked'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($cookie)\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) !== 1) {\n            $this->errors[] = self::ERROR_USER_INCORRECT_LOGIN;\n\n            return false;\n        }\n        $user = $this->config->getDb()->fetchArray($res);\n\n        // Don't ever login via anonymous user\n        if (-1 === $user['user_id']) {\n            return false;\n        }\n\n        $this->userId = (int)$user['user_id'];\n        $this->login = (string)$user['login'];\n        $this->status = (string)$user['account_status'];\n\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns the User ID of the user.\n     *\n     * @return int\n     */\n    public function getUserId(): int\n    {\n        if (isset($this->userId) && is_int($this->userId)) {\n            return (int)$this->userId;\n        }\n        $this->userId = -1;\n        $this->errors[] = self::ERROR_USER_NO_USERID;\n\n        return -1;\n    }\n\n    /**\n     * Checks if display name is already used. Returns true, if already in use.\n     *\n     * @param string $name\n     * @return bool\n     */\n    public function checkDisplayName(string $name): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        if ($name === $this->userdata->fetch('display_name', $name)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Checks if email address is already used. Returns true, if already in use.\n     *\n     * @param string $name\n     * @return bool\n     */\n    public function checkMailAddress(string $name): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        if ($name === $this->userdata->fetch('email', $name)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * search users by login.\n     *\n     * @param string $search Login name\n     * @return array<int, array>\n     */\n    public function searchUsers(string $search): array\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                login, \n                user_id,\n                account_status\n            FROM\n                %sfaquser\n            WHERE \n                login LIKE '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($search . '%')\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if (!$res) {\n            return [];\n        }\n\n        $result = [];\n        while ($row = $this->config->getDb()->fetchArray($res)) {\n            $result[] = $row;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Creates a new user and stores basic data in the database.\n     *\n     * @param string $login\n     * @param string $pass\n     * @param string $domain\n     * @param int    $userId\n     * @return bool\n     * @throws Core\\Exception\n     */\n    public function createUser(string $login, string $pass = '', string $domain = '', int $userId = 0): bool\n    {\n        foreach ($this->authContainer as $auth) {\n            if (!$this->checkAuth($auth)) {\n                return false;\n            }\n        }\n\n        // is $login valid?\n        if (!$this->isValidLogin($login)) {\n            $this->errors[] = self::ERROR_USER_LOGINNAME_TOO_SHORT;\n\n            return false;\n        }\n\n        // does $login already exist?\n        if ($this->getUserByLogin($login, false)) {\n            $this->errors[] = self::ERROR_USER_LOGIN_NOT_UNIQUE;\n\n            return false;\n        }\n\n        // set user-ID\n        if (0 == $userId) {\n            $this->userId = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faquser', 'user_id');\n        } else {\n            $this->userId = $userId;\n        }\n\n        // create user entry\n        $insert = sprintf(\n            \"INSERT INTO %sfaquser (user_id, login, session_timestamp, member_since) VALUES (%d, '%s', %d, '%s')\",\n            Database::getTablePrefix(),\n            $this->getUserId(),\n            $this->config->getDb()->escape($login),\n            $_SERVER['REQUEST_TIME'],\n            date('YmdHis', $_SERVER['REQUEST_TIME'])\n        );\n\n        $this->config->getDb()->query($insert);\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $data = $this->userdata->add($this->getUserId());\n        if (!$data) {\n            $this->errors[] = self::ERROR_USER_CANNOT_CREATE_USERDATA;\n\n            return false;\n        }\n\n        // create authentication entry\n        if ($pass === '') {\n            $pass = $this->createPassword();\n        }\n        $success = false;\n\n        foreach ($this->authContainer as $name => $auth) {\n            if ($auth->setReadOnly()) {\n                continue;\n            }\n            if (!$auth->create($login, $pass, $domain)) {\n                $this->errors[] = self::ERROR_USER_CANNOT_CREATE_USER . 'in Auth ' . $name;\n            } else {\n                $success = true;\n            }\n        }\n        if (!$success) {\n            return false;\n        }\n\n        if ($this->perm instanceof MediumPermission) {\n            $this->perm->autoJoin($this->userId);\n        }\n\n        return $this->getUserByLogin($login, false);\n    }\n\n    /**\n     * returns true if login is a valid login string.\n     * $this->loginMinLength defines the minimum length the\n     * login string. If login has more characters than allowed,\n     * false is returned.\n     * $this->login_invalidRegExp is a regular expression.\n     * If login matches this false is returned.\n     *\n     * @param string $login Login name\n     * @return bool\n     */\n    public function isValidLogin(string $login): bool\n    {\n        if (strlen($login) < $this->loginMinLength || !preg_match($this->validUsername, $login)) {\n            $this->errors[] = self::ERROR_USER_LOGIN_INVALID;\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * loads basic user information from the database selecting the user with\n     * specified login.\n     *\n     * @param string $login Login name\n     * @param bool   $raiseError Raise error?\n     * @return bool\n     */\n    public function getUserByLogin(string $login, bool $raiseError = true): bool\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                user_id,\n                login,\n                account_status,\n                is_superadmin\n            FROM\n                %sfaquser\n            WHERE\n                login = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($login)\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) !== 1) {\n            if ($raiseError) {\n                $this->errors[] = self::ERROR_USER_INCORRECT_LOGIN;\n            }\n\n            return false;\n        }\n\n        $user = $this->config->getDb()->fetchArray($res);\n\n        $this->userId = (int) $user['user_id'];\n        $this->login = (string) $user['login'];\n        $this->status = (string) $user['account_status'];\n        $this->isSuperAdmin = (bool) $user['is_superadmin'];\n\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns a new password.\n     *\n     * @param int  $minimumLength\n     * @param bool $allowUnderscore\n     * @return string\n     * @throws Exception\n     */\n    public function createPassword(int $minimumLength = 8, bool $allowUnderscore = true): string\n    {\n        // To make passwords harder to get wrong, a few letters & numbers have been omitted.\n        // This will ensure safety with browsers using fonts with confusable letters.\n        // Removed: o,O,0,1,l,L\n        $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n        $vowels = ['a', 'e', 'i', 'u'];\n        $newPassword = '';\n        $nextChar = '';\n        $skipped = false;\n\n        while (strlen($newPassword) < $minimumLength) {\n            $caseFunc = random_int(0, 1) ? 'strtoupper' : 'strtolower';\n\n            switch (random_int(0, $skipped ? 3 : ($allowUnderscore ? 5 : 4))) {\n                case 0:\n                case 1:\n                    $nextChar = $caseFunc($consonants[random_int(0, 18)]);\n                    break;\n                case 2:\n                case 3:\n                    $nextChar = $caseFunc($vowels[random_int(0, 3)]);\n                    break;\n                case 4:\n                    $nextChar = (string)random_int(2, 9);\n                    break;\n                case 5:\n                    $newPassword .= '_';\n                    continue 2;\n            }\n\n            $skipped = false;\n\n            // Ensure letters and numbers only occur once.\n            if (strpos($newPassword, $nextChar) === false) {\n                $newPassword .= $nextChar;\n            } else {\n                $skipped = true;\n            }\n        }\n\n        return $newPassword;\n    }\n\n    /**\n     * deletes the user from the database.\n     *\n     * @return bool\n     */\n    public function deleteUser(): bool\n    {\n        if (!isset($this->userId) || $this->userId == 0) {\n            $this->errors[] = self::ERROR_USER_NO_USERID;\n\n            return false;\n        }\n\n        if (!isset($this->login) || strlen($this->login) == 0) {\n            $this->errors[] = self::ERROR_USER_LOGIN_INVALID;\n\n            return false;\n        }\n\n        if (\n            isset($this->allowedStatus[$this->status]) &&\n            $this->allowedStatus[$this->status] === self::STATUS_USER_PROTECTED\n        ) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USER . self::STATUS_USER_PROTECTED;\n\n            return false;\n        }\n\n        $this->perm->refuseAllUserRights($this->userId);\n\n        $delete = sprintf(\n            'DELETE FROM %sfaquser WHERE user_id = %d',\n            Database::getTablePrefix(),\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($delete);\n        if (!$res) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USER . 'error(): ' . $this->config->getDb()->error();\n\n            return false;\n        }\n\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $data = $this->userdata->delete($this->getUserId());\n        if (!$data) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USERDATA;\n\n            return false;\n        }\n\n        $readOnly = 0;\n        $authCount = 0;\n        $delete = [];\n        foreach ($this->authContainer as $auth) {\n            ++$authCount;\n            if ($auth->setReadOnly()) {\n                ++$readOnly;\n                continue;\n            }\n            $delete[] = $auth->delete($this->login);\n        }\n\n        if ($readOnly == $authCount) {\n            $this->errors[] = self::ERROR_USER_NO_AUTH_WRITABLE;\n        }\n        if (!in_array(true, $delete)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns a string with error messages.\n     * The string returned by error() contains messages for all errors that\n     * during object processing. Messages are separated by new lines.\n     * Error messages are stored in the public array errors.\n     *\n     * @return string\n     */\n    public function error(): string\n    {\n        $message = '';\n\n        foreach ($this->errors as $error) {\n            $message .= $error . \"<br>\\n\";\n        }\n        $this->errors = [];\n\n        return $message;\n    }\n\n    /**\n     * Returns the data aof the auth container.\n     *\n     * @return AuthDriverInterface[]\n     */\n    public function getAuthContainer(): array\n    {\n        return $this->authContainer;\n    }\n\n    /**\n     * Returns an array with the user-IDs of all users found in\n     * the database. By default, the Anonymous User will not be returned.\n     *\n     * @param bool $withoutAnonymous Without anonymous?\n     * @param bool $allowBlockedUsers Allow blocked users as well, e.g. in admin\n     * @return array<int>\n     */\n    public function getAllUsers(bool $withoutAnonymous = true, bool $allowBlockedUsers = true): array\n    {\n        $select = sprintf(\n            '\n            SELECT\n                user_id\n            FROM\n                %sfaquser\n            WHERE\n                1 = 1\n            %s\n            %s\n            ORDER BY\n                user_id ASC',\n            Database::getTablePrefix(),\n            ($withoutAnonymous ? 'AND user_id <> -1' : ''),\n            ($allowBlockedUsers ? '' : \"AND account_status != 'blocked'\")\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if (!$res) {\n            return [];\n        }\n\n        $result = [];\n        while ($row = $this->config->getDb()->fetchArray($res)) {\n            $result[] = (int) $row['user_id'];\n        }\n\n        return $result;\n    }\n\n    /**\n     * Loads basic user information from the database selecting the user with\n     * specified user-ID.\n     *\n     * @param int  $userId User ID\n     * @param bool $allowBlockedUsers Allow blocked users as well, e.g. in admin\n     * @return bool\n     */\n    public function getUserById($userId, $allowBlockedUsers = false): bool\n    {\n        $select = sprintf(\n            '\n            SELECT\n                user_id,\n                login,\n                account_status,\n                is_superadmin\n            FROM\n                %sfaquser\n            WHERE\n                user_id = %d ' . ($allowBlockedUsers ? '' : \"AND account_status != 'blocked'\"),\n            Database::getTablePrefix(),\n            (int)$userId\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) != 1) {\n            $this->errors[] = self::ERROR_USER_NO_USERID . 'error(): ' . $this->config->getDb()->error();\n\n            return false;\n        }\n\n        $user = $this->config->getDb()->fetchArray($res);\n\n        $this->userId = (int) $user['user_id'];\n        $this->login = (string) $user['login'];\n        $this->status = (string) $user['account_status'];\n        $this->isSuperAdmin = (bool) $user['is_superadmin'];\n\n        // get encrypted password\n        // @todo: Add a getEncPassword method to the Auth* classes for the (local and remote) Auth Sources.\n        if ('db' === $this->getAuthSource('name')) {\n            $select = sprintf(\n                \"\n                SELECT\n                    pass\n                FROM\n                    %sfaquserlogin\n                WHERE\n                    login = '%s'\",\n                Database::getTablePrefix(),\n                $this->login\n            );\n\n            $res = $this->config->getDb()->query($select);\n            if ($this->config->getDb()->numRows($res) != 1) {\n                $this->errors[] = self::ERROR_USER_NO_USERLOGINDATA . 'error(): ' . $this->config->getDb()->error();\n\n                return false;\n            }\n        }\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns the data of the current user.\n     *\n     * @param string $field Field\n     * @return array<string>|string|int\n     */\n    public function getUserData(string $field = '*')\n    {\n        if (!($this->userdata instanceof UserData)) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        return $this->userdata->get($field);\n    }\n\n    /**\n     * Adds user data.\n     *\n     * @param array<string> $data Array with user data\n     * @return bool\n     */\n    public function setUserData(array $data): bool\n    {\n        if (!($this->userdata instanceof UserData)) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return $this->userdata->set(array_keys($data), array_values($data));\n    }\n\n    /**\n     * returns the user's login.\n     *\n     * @return string\n     */\n    public function getLogin(): string\n    {\n        return $this->login;\n    }\n\n    /**\n     * Returns the user ID from the given email address\n     *\n     * @param string $email\n     * @return int\n     */\n    public function getUserIdByEmail(string $email): int\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        $userData = $this->userdata->fetchAll('email', $email);\n\n        return (int)$userData['user_id'];\n    }\n\n    /**\n     * Returns true or false for the visibility for the given email\n     * address, if the user is not a registered user, the method\n     * returns false for anonymous users\n     *\n     * @param string $email\n     * @return bool\n     */\n    public function getUserVisibilityByEmail(string $email): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        $userData = $this->userdata->fetchAll('email', $email);\n\n        return isset($userData['is_visible']) ? (bool)$userData['is_visible'] : true;\n    }\n\n    /**\n     * Returns true on success.\n     * This will change a users status to active, and send an email with a new password.\n     *\n     * @return bool\n     * @throws Exception\n     */\n    public function activateUser(): bool\n    {\n        if ($this->getStatus() == 'blocked') {\n            // Generate and change user password.\n            $newPassword = $this->createPassword();\n            $this->changePassword($newPassword);\n            // Send activation email.\n            $subject = '[%sitename%] Login name / activation';\n            $message = sprintf(\n                \"\\nName: %s\\nLogin name: %s\\nNew password: %s\\n\\n\",\n                $this->getUserData('display_name'),\n                $this->getLogin(),\n                $newPassword\n            );\n            // Only set to active if the activation mail sent correctly.\n            if ($this->mailUser($subject, $message)) {\n                return $this->setStatus('active');\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * returns the user's status.\n     *\n     * @return string\n     */\n    public function getStatus(): string\n    {\n        if (isset($this->status) && strlen($this->status) > 0) {\n            return $this->status;\n        }\n\n        return '';\n    }\n\n    /**\n     * Sets the user's status and updates the database entry.\n     *\n     * @param string $status Status\n     * @return bool\n     */\n    public function setStatus(string $status): bool\n    {\n        // is status allowed?\n        $status = strtolower($status);\n        if (!in_array($status, array_keys($this->allowedStatus))) {\n            $this->errors[] = self::ERROR_USER_INVALID_STATUS;\n\n            return false;\n        }\n\n        // update status\n        $this->status = $status;\n        $update = sprintf(\n            \"\n            UPDATE\n                %sfaquser\n            SET\n                account_status = '%s'\n            WHERE\n                user_id = %d\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($status),\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($update);\n\n        if ($res) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * changes the user's password. If $pass is omitted, a new\n     * password is generated using the createPassword() method.\n     *\n     * @param string $pass Password\n     * @return bool\n     * @throws Exception\n     */\n    public function changePassword($pass = ''): bool\n    {\n        foreach ($this->authContainer as $auth) {\n            if (!$this->checkAuth($auth)) {\n                return false;\n            }\n        }\n\n        $login = $this->getLogin();\n        if ($pass == '') {\n            $pass = $this->createPassword();\n        }\n\n        $success = false;\n        foreach ($this->authContainer as $auth) {\n            if ($auth->setReadOnly()) {\n                continue;\n            }\n            if (!$auth->update($login, $pass)) {\n                continue;\n            } else {\n                $success = true;\n            }\n        }\n\n        return $success;\n    }\n\n    /**\n     * Sends mail to the current user.\n     *\n     * @param string $subject\n     * @param string $message\n     * @return int\n     * @throws Core\\Exception\n     */\n    public function mailUser(string $subject, string $message): int\n    {\n        $mail = new Mail($this->config);\n        $mail->addTo($this->getUserData('email'));\n        $mail->subject = $subject;\n        $mail->message = $message;\n        $result = $mail->send();\n        unset($mail);\n\n        return $result;\n    }\n\n    /**\n     * Returns true, if a user is a super admin.\n     *\n     * @return bool\n     */\n    public function isSuperAdmin(): bool\n    {\n        return $this->isSuperAdmin;\n    }\n\n    /**\n     * Sets the users \"is_superadmin\" flag and updates the database entry.\n     *\n     * @param bool $isSuperAdmin\n     * @return bool\n     */\n    public function setSuperAdmin(bool $isSuperAdmin): bool\n    {\n        $this->isSuperAdmin = $isSuperAdmin;\n        $update = sprintf(\n            \"\n            UPDATE\n                %sfaquser\n            SET\n                is_superadmin = %d\n            WHERE\n                user_id = %d\",\n            Database::getTablePrefix(),\n            (int)$this->isSuperAdmin,\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($update);\n\n        if ($res) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The Ajax Service Layer.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package phpMyFAQ\n * @author Thorsten Rinne <thorsten@phpmyfaq.de>\n * @copyright 2010-2022 phpMyFAQ Team\n * @license http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link https://www.phpmyfaq.de\n * @since 2010-09-15\n */\n\nconst IS_VALID_PHPMYFAQ = null;\n\nuse phpMyFAQ\\Captcha;\nuse phpMyFAQ\\Category;\nuse phpMyFAQ\\Comments;\nuse phpMyFAQ\\Entity\\Comment;\nuse phpMyFAQ\\Entity\\CommentType;\nuse phpMyFAQ\\Faq;\nuse phpMyFAQ\\Faq\\FaqMetaData;\nuse phpMyFAQ\\Faq\\FaqPermission;\nuse phpMyFAQ\\Filter;\nuse phpMyFAQ\\Helper\\CategoryHelper;\nuse phpMyFAQ\\Helper\\FaqHelper;\nuse phpMyFAQ\\Helper\\HttpHelper;\nuse phpMyFAQ\\Helper\\QuestionHelper;\nuse phpMyFAQ\\Helper\\RegistrationHelper;\nuse phpMyFAQ\\Language;\nuse phpMyFAQ\\Language\\Plurals;\nuse phpMyFAQ\\Link;\nuse phpMyFAQ\\Mail;\nuse phpMyFAQ\\Network;\nuse phpMyFAQ\\News;\nuse phpMyFAQ\\Notification;\nuse phpMyFAQ\\Question;\nuse phpMyFAQ\\Rating;\nuse phpMyFAQ\\Search;\nuse phpMyFAQ\\Search\\SearchResultSet;\nuse phpMyFAQ\\Session;\nuse phpMyFAQ\\Stopwords;\nuse phpMyFAQ\\Strings;\nuse phpMyFAQ\\User;\nuse phpMyFAQ\\User\\CurrentUser;\nuse phpMyFAQ\\Utils;\n\n//\n// Bootstrapping\n//\nrequire 'src/Bootstrap.php';\n\n$action = Filter::filterInput(INPUT_GET, 'action', FILTER_UNSAFE_RAW);\n$ajaxLang = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n$code = Filter::filterInput(INPUT_POST, 'captcha', FILTER_UNSAFE_RAW);\n$currentToken = Filter::filterInput(INPUT_POST, 'csrf', FILTER_UNSAFE_RAW);\n\n$Language = new Language($faqConfig);\n$languageCode = $Language->setLanguage($faqConfig->get('main.languageDetection'), $faqConfig->get('main.language'));\nrequire_once 'lang/language_en.php';\n$faqConfig->setLanguage($Language);\n\nif (Language::isASupportedLanguage($ajaxLang)) {\n    $languageCode = trim($ajaxLang);\n    require_once 'lang/language_' . $languageCode . '.php';\n} else {\n    $languageCode = 'en';\n    require_once 'lang/language_en.php';\n}\n\n//\n// Load plurals support for selected language\n//\n$plr = new Plurals($PMF_LANG);\n\n//\n// Initializing static string wrapper\n//\nStrings::init($languageCode);\n\n//\n// Send headers\n//\n$http = new HttpHelper();\n$http->setContentType('application/json');\n\n$faqSession = new Session($faqConfig);\n$network = new Network($faqConfig);\n$stopWords = new Stopwords($faqConfig);\n\nif (!$network->checkIp($_SERVER['REMOTE_ADDR'])) {\n    $message = ['error' => $PMF_LANG['err_bannedIP']];\n}\n\n//\n// Check, if user is logged in\n//\n$user = CurrentUser::getFromCookie($faqConfig);\nif (!$user instanceof CurrentUser) {\n    $user = CurrentUser::getFromSession($faqConfig);\n}\nif ($user instanceof CurrentUser) {\n    $isLoggedIn = true;\n} else {\n    $isLoggedIn = false;\n}\n\n//\n// Check captcha\n//\n$captcha = new Captcha($faqConfig);\n$captcha->setUserIsLoggedIn($isLoggedIn);\n\nif (\n    'savevoting' !== $action && 'saveuserdata' !== $action && 'changepassword' !== $action &&\n    !$captcha->checkCaptchaCode($code ?? '')\n) {\n    $message = ['error' => $PMF_LANG['msgCaptcha']];\n}\n\n//\n// Check if the user is logged in when FAQ is completely secured\n//\nif (\n    false === $isLoggedIn && $faqConfig->get('security.enableLoginOnly') &&\n    'changepassword' !== $action && 'saveregistration' !== $action\n) {\n    $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n}\n\nif (isset($message['error'])) {\n    $http->sendJsonWithHeaders($message);\n    exit();\n}\n\n// Save user generated content\nswitch ($action) {\n    //\n    // Comments\n    //\n    case 'savecomment':\n        if (\n            !$faqConfig->get('records.allowCommentsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addcomment')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $oComment = new Comments($faqConfig);\n        $category = new Category($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW);\n        $faqId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $newsId = Filter::filterInput(INPUT_POST, 'newsId', FILTER_VALIDATE_INT);\n        $username = Filter::filterInput(INPUT_POST, 'user', FILTER_UNSAFE_RAW);\n        $mailer = Filter::filterInput(INPUT_POST, 'mail', FILTER_VALIDATE_EMAIL);\n        $comment = Filter::filterInput(INPUT_POST, 'comment_text', FILTER_UNSAFE_RAW);\n\n        switch ($type) {\n            case 'news':\n                $id = $newsId;\n                break;\n            case 'faq':\n                $id = $faqId;\n                break;\n        }\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($mailer)) {\n            $mailer = $faqConfig->getAdminEmail();\n        }\n\n        // Check display name and e-mail address for not logged-in users\n        if (false === $isLoggedIn) {\n            $user = new User($faqConfig);\n            if (true === $user->checkDisplayName($username) && true === $user->checkMailAddress($mailer)) {\n                $message = ['error' => '-' . $PMF_LANG['err_SaveComment']];\n                break;\n            }\n        }\n\n        if (\n            !is_null($username) && !is_null($mailer) && !is_null($comment) && $stopWords->checkBannedWord($comment) &&\n            !$faq->commentDisabled($id, $languageCode, $type) && !$faq->isActive($id, $languageCode, $type)\n        ) {\n            try {\n                $faqSession->userTracking('save_comment', $id);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $commentEntity = new Comment();\n            $commentEntity\n                ->setRecordId($id)\n                ->setType($type)\n                ->setUsername($username)\n                ->setEmail($mailer)\n                ->setComment(nl2br(strip_tags($comment)))\n                ->setDate($_SERVER['REQUEST_TIME']);\n\n            if ($oComment->addComment($commentEntity)) {\n                $emailTo = $faqConfig->getAdminEmail();\n                $title = '';\n                $urlToContent = '';\n                if ('faq' == $type) {\n                    $faq->getRecord($id);\n                    if ($faq->faqRecord['email'] != '') {\n                        $emailTo = $faq->faqRecord['email'];\n                    }\n\n                    $title = $faq->getRecordTitle($id);\n\n                    $faqUrl = sprintf(\n                        '%s?action=faq&cat=%d&id=%d&artlang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $category->getCategoryIdFromFaq($faq->faqRecord['id']),\n                        $faq->faqRecord['id'],\n                        $faq->faqRecord['lang']\n                    );\n                    $oLink = new Link($faqUrl, $faqConfig);\n                    $oLink->itemTitle = $faq->faqRecord['title'];\n                    $urlToContent = $oLink->toString();\n                } else {\n                    $news = new News($faqConfig);\n                    $newsData = $news->getNewsEntry($id);\n                    if ($newsData['authorEmail'] != '') {\n                        $emailTo = $newsData['authorEmail'];\n                    }\n\n                    $title = $newsData['header'];\n\n                    $link = sprintf(\n                        '%s?action=news&newsid=%d&newslang=%s',\n                        $faqConfig->getDefaultUrl(),\n                        $newsData['id'],\n                        $newsData['lang']\n                    );\n                    $oLink = new Link($link, $faqConfig);\n                    $oLink->itemTitle = $newsData['header'];\n                    $urlToContent = $oLink->toString();\n                }\n\n                $commentMail =\n                    'User: ' . $commentEntity->getUsername() . ', mailto:' . $commentEntity->getEmail() . \"\\n\" .\n                    'Title: ' . $title . \"\\n\" .\n                    'New comment posted here: ' . $urlToContent .\n                    \"\\n\\n\" .\n                    wordwrap($comment, 72);\n\n                $send = [];\n                $mailer = new Mail($faqConfig);\n                $mailer->setReplyTo($commentEntity->getEmail(), $commentEntity->getUsername());\n                $mailer->addTo($emailTo);\n\n                $send[$emailTo] = 1;\n                $send[$faqConfig->getAdminEmail()] = 1;\n\n                if ($type === CommentType::FAQ) {\n                    // Let the category owner of a FAQ get a copy of the message\n                    $category = new Category($faqConfig);\n                    $categories = $category->getCategoryIdsFromFaq($faq->faqRecord['id']);\n                    foreach ($categories as $_category) {\n                        $userId = $category->getOwner($_category);\n                        $catUser = new User($faqConfig);\n                        $catUser->getUserById($userId);\n                        $catOwnerEmail = $catUser->getUserData('email');\n\n                        if ($catOwnerEmail !== '') {\n                            if (!isset($send[$catOwnerEmail]) && $catOwnerEmail !== $emailTo) {\n                                $mailer->addCc($catOwnerEmail);\n                                $send[$catOwnerEmail] = 1;\n                            }\n                        }\n                    }\n                }\n\n                $mailer->subject = $faqConfig->getTitle() . ': New comment for \"' . $title . '\"';\n                $mailer->message = strip_tags($commentMail);\n\n                $result = $mailer->send();\n                unset($mailer);\n\n                $message = ['success' => $PMF_LANG['msgCommentThanks']];\n            } else {\n                try {\n                    $faqSession->userTracking('error_save_comment', $id);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n                $message = ['error' => $PMF_LANG['err_SaveComment']];\n            }\n        } else {\n            $message = ['error' => 'Please add your name, your e-mail address and a comment!'];\n        }\n        break;\n\n    case 'savefaq':\n        if (\n            !$faqConfig->get('records.allowNewFaqsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addfaq')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $category = new Category($faqConfig);\n        $questionObject = new Question($faqConfig);\n\n        $author = trim(Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW));\n        $email = trim(Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL));\n        $faqId = Filter::filterInput(INPUT_POST, 'faqid', FILTER_VALIDATE_INT);\n        $faqLanguage = Filter::filterInput(INPUT_POST, 'lang', FILTER_UNSAFE_RAW);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $question = trim(strip_tags($question));\n        if ($faqConfig->get('main.enableWysiwygEditorFrontend')) {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_SANITIZE_SPECIAL_CHARS);\n            $answer = trim(html_entity_decode($answer));\n        } else {\n            $answer = Filter::filterInput(INPUT_POST, 'answer', FILTER_UNSAFE_RAW);\n            $answer = strip_tags($answer);\n            $answer = trim(nl2br($answer));\n        }\n        $translatedAnswer = trim(Filter::filterInput(INPUT_POST, 'translated_answer', FILTER_UNSAFE_RAW));\n        $contentLink = Filter::filterInput(INPUT_POST, 'contentlink', FILTER_UNSAFE_RAW);\n        $contentLink = Filter::filterVar($contentLink, FILTER_VALIDATE_URL);\n        $keywords = Filter::filterInput(INPUT_POST, 'keywords', FILTER_UNSAFE_RAW);\n        $categories = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'rubrik' => [\n                    'filter' => FILTER_VALIDATE_INT,\n                    'flags' => FILTER_REQUIRE_ARRAY,\n                ],\n            ]\n        );\n\n        // Check on translation\n        if (empty($answer) && !is_null($translatedAnswer)) {\n            $answer = $translatedAnswer;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !empty($question) &&\n            $stopWords->checkBannedWord(strip_tags($question)) &&\n            !empty($answer) && $stopWords->checkBannedWord(strip_tags($answer)) &&\n            ((is_null($faqId) && !is_null($categories['rubrik'])) || (!is_null($faqId) && !is_null($faqLanguage) &&\n                    Language::isASupportedLanguage($faqLanguage)))\n        ) {\n            $isNew = true;\n            $newLanguage = '';\n\n            if (!is_null($faqId)) {\n                $isNew = false;\n                try {\n                    $faqSession->userTracking('save_new_translation_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            } else {\n                try {\n                    $faqSession->userTracking('save_new_entry', 0);\n                } catch (Exception $e) {\n                    // @todo handle the exception\n                }\n            }\n\n            $isTranslation = false;\n            if (!is_null($faqLanguage)) {\n                $isTranslation = true;\n                $newLanguage = $faqLanguage;\n            }\n\n            if (!is_null($contentLink) && Strings::substr($contentLink, 7) !== '') {\n                $answer = sprintf(\n                    '%s<br><div id=\"newFAQContentLink\">%s<a href=\"http://%s\" target=\"_blank\">%s</a></div>',\n                    $answer,\n                    $PMF_LANG['msgInfo'],\n                    Strings::substr($contentLink, 7),\n                    $contentLink\n                );\n            }\n\n            $autoActivate = $faqConfig->get('records.defaultActivation');\n\n            $newData = [\n                'lang' => ($isTranslation === true ? $newLanguage : $languageCode),\n                'thema' => $question,\n                'active' => ($autoActivate ? FAQ_SQL_ACTIVE_YES : FAQ_SQL_ACTIVE_NO),\n                'sticky' => 0,\n                'content' => $answer,\n                'keywords' => $keywords,\n                'author' => $author,\n                'email' => $email,\n                'comment' => 'y',\n                'date' => date('YmdHis'),\n                'dateStart' => '00000000000000',\n                'dateEnd' => '99991231235959',\n                'linkState' => '',\n                'linkDateCheck' => 0,\n                'notes' => ''\n            ];\n\n            if ($isNew) {\n                $categories = $categories['rubrik'];\n            } else {\n                $newData['id'] = $faqId;\n                $categories = $category->getCategoryIdsFromFaq($newData['id']);\n            }\n\n            $recordId = $faq->addRecord($newData, $isNew);\n\n            $openQuestionId = Filter::filterInput(INPUT_POST, 'openQuestionID', FILTER_VALIDATE_INT);\n            if ($openQuestionId) {\n                if ($faqConfig->get('records.enableDeleteQuestion')) {\n                    $questionObject->deleteQuestion($openQuestionId);\n                } else { // adds this faq record id to the related open question\n                    $questionObject->updateQuestionAnswer($openQuestionId, $recordId, $categories[0]);\n                }\n            }\n\n            $faqMetaData = new FaqMetaData($faqConfig);\n            $faqMetaData\n                ->setFaqId($recordId)\n                ->setFaqLanguage($newData['lang'])\n                ->setCategories($categories)\n                ->save();\n\n            // Let the admin and the category owners to be informed by email of this new entry\n            $categoryHelper = new CategoryHelper();\n            $categoryHelper\n                ->setCategory($category)\n                ->setConfiguration($faqConfig);\n\n            $moderators = $categoryHelper->getModerators($categories);\n\n            try {\n                $notification = new Notification($faqConfig);\n                $notification->sendNewFaqAdded($moderators, $recordId, $faqLanguage);\n            } catch (Exception $e) {\n                // @todo handle exception in v3.2\n            }\n\n\n            $message = [\n                'success' => ($isNew ? $PMF_LANG['msgNewContentThanks'] : $PMF_LANG['msgNewTranslationThanks']),\n            ];\n        } else {\n            $message = [\n                'error' => $PMF_LANG['err_SaveEntries']\n            ];\n        }\n\n        break;\n\n    //\n    // Add question\n    //\n    case 'savequestion':\n        if (\n            !$faqConfig->get('records.allowQuestionsForGuests') &&\n            !$user->perm->hasPermission($user->getUserId(), 'addquestion')\n        ) {\n            $message = ['error' => $PMF_LANG['err_NotAuth']];\n            break;\n        }\n\n        $faq = new Faq($faqConfig);\n        $cat = new Category($faqConfig);\n        $categories = $cat->getAllCategories();\n        $author = trim(Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW));\n        $email = trim(Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL));\n        $ucategory = Filter::filterInput(INPUT_POST, 'category', FILTER_VALIDATE_INT);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n        $question = trim(strip_tags($question));\n        $save = Filter::filterInput(INPUT_POST, 'save', FILTER_VALIDATE_INT, 0);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        // If smart answering is disabled, save question immediately\n        if (false === $faqConfig->get('main.enableSmartAnswering')) {\n            $save = true;\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && $stopWords->checkBannedWord(\n                Strings::htmlspecialchars($question)\n            )\n        ) {\n            if ($faqConfig->get('records.enableVisibilityQuestions')) {\n                $visibility = 'Y';\n            } else {\n                $visibility = 'N';\n            }\n\n            $questionData = [\n                'username' => $author,\n                'email' => $email,\n                'category_id' => $ucategory,\n                'question' => Strings::htmlspecialchars($question),\n                'is_visible' => $visibility\n            ];\n\n            if (false === (bool)$save) {\n                $cleanQuestion = $stopWords->clean($question);\n\n                $user = new CurrentUser($faqConfig);\n                $faqSearch = new Search($faqConfig);\n                $faqSearch->setCategory(new Category($faqConfig));\n                $faqSearch->setCategoryId((int) $ucategory);\n                $faqPermission = new FaqPermission($faqConfig);\n                $faqSearchResult = new SearchResultSet($user, $faqPermission, $faqConfig);\n                $searchResult = [];\n                $mergedResult = [];\n\n                foreach ($cleanQuestion as $word) {\n                    if (!empty($word)) {\n                        $searchResult[] = $faqSearch->search($word, false);\n                    }\n                }\n                foreach ($searchResult as $resultSet) {\n                    foreach ($resultSet as $result) {\n                        $mergedResult[] = $result;\n                    }\n                }\n                $faqSearchResult->reviewResultSet($mergedResult);\n\n                if (0 < $faqSearchResult->getNumberOfResults()) {\n                    $response = sprintf(\n                        '<p>%s</p>',\n                        $plr->getMsg('plmsgSearchAmount', $faqSearchResult->getNumberOfResults())\n                    );\n\n                    $response .= '<ul>';\n\n                    $faqHelper = new FaqHelper($faqConfig);\n                    foreach ($faqSearchResult->getResultSet() as $result) {\n                        $url = sprintf(\n                            '%sindex.php?action=faq&cat=%d&id=%d&artlang=%s',\n                            $faqConfig->getDefaultUrl(),\n                            $result->category_id,\n                            $result->id,\n                            $result->lang\n                        );\n                        $oLink = new Link($url, $faqConfig);\n                        $oLink->text = Utils::chopString($result->question, 15);\n                        $oLink->itemTitle = $result->question;\n\n                        try {\n                            $response .= sprintf(\n                                '<li>%s<br><div class=\"searchpreview\">%s...</div></li>',\n                                $oLink->toHtmlAnchor(),\n                                $faqHelper->renderAnswerPreview($result->answer, 10)\n                            );\n                        } catch (Exception $e) {\n                            // handle exception\n                        }\n                    }\n                    $response .= '</ul>';\n\n                    $message = ['result' => $response];\n                } else {\n                    $questionHelper = new QuestionHelper($faqConfig, $cat);\n                    try {\n                        $questionHelper->sendSuccessMail($questionData, $categories);\n                    } catch (Exception $e) {\n                        // @todo Handle exception\n                    }\n                    $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n                }\n            } else {\n                $questionHelper = new QuestionHelper($faqConfig, $cat);\n                try {\n                    $questionHelper->sendSuccessMail($questionData, $categories);\n                } catch (Exception $e) {\n                    // @todo Handle exception\n                }\n                $message = ['success' => $PMF_LANG['msgAskThx4Mail']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['err_SaveQuestion']];\n        }\n\n        break;\n\n    case 'saveregistration':\n        $registration = new RegistrationHelper($faqConfig);\n\n        $fullName = Filter::filterInput(INPUT_POST, 'realname', FILTER_UNSAFE_RAW);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW) ?? false;\n\n        if (!$registration->isDomainWhitelisted($email)) {\n            $message = ['error' => 'The domain is not whitelisted.'];\n            break;\n        }\n\n        if (!is_null($userName) && !is_null($email) && !is_null($fullName)) {\n            $message = $registration->createUser($userName, $fullName, $email, $isVisible);\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    case 'savevoting':\n        $faq = new Faq($faqConfig);\n        $rating = new Rating($faqConfig);\n        $type = Filter::filterInput(INPUT_POST, 'type', FILTER_UNSAFE_RAW, 'faq');\n        $recordId = Filter::filterInput(INPUT_POST, 'id', FILTER_VALIDATE_INT, 0);\n        $vote = Filter::filterInput(INPUT_POST, 'vote', FILTER_VALIDATE_INT);\n        $userIp = Filter::filterVar($_SERVER['REMOTE_ADDR'], FILTER_VALIDATE_IP);\n\n        if (isset($vote) && $rating->check($recordId, $userIp) && $vote > 0 && $vote < 6) {\n            try {\n                $faqSession->userTracking('save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n\n            $votingData = [\n                'record_id' => $recordId,\n                'vote' => $vote,\n                'user_ip' => $userIp,\n            ];\n\n            if (!$rating->getNumberOfVotings($recordId)) {\n                $rating->addVoting($votingData);\n            } else {\n                $rating->update($votingData);\n            }\n            $message = [\n                'success' => $PMF_LANG['msgVoteThanks'],\n                'rating' => $rating->getVotingResult($recordId),\n            ];\n        } elseif (!$rating->check($recordId, $userIp)) {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_VoteTooMuch']];\n        } else {\n            try {\n                $faqSession->userTracking('error_save_voting', $recordId);\n            } catch (Exception $e) {\n                // @todo handle the exception\n            }\n            $message = ['error' => $PMF_LANG['err_noVote']];\n        }\n\n        break;\n\n    // Send user generated mails\n    case 'sendcontact':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) && !empty($question) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = Utils::resolveMarkers('Feedback: %sitename%', $faqConfig);\n            $mailer->message = $question;\n            $mailer->send();\n\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    // Send mails to friends\n    case 'sendtofriends':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $link = Filter::filterInput(INPUT_POST, 'link', FILTER_VALIDATE_URL);\n        $attached = Filter::filterInput(INPUT_POST, 'message', FILTER_UNSAFE_RAW);\n        $mailto = Filter::filterInputArray(\n            INPUT_POST,\n            [\n                'mailto' => [\n                    'filter' => FILTER_VALIDATE_EMAIL,\n                    'flags' => FILTER_REQUIRE_ARRAY | FILTER_NULL_ON_FAILURE,\n                ],\n            ]\n        );\n\n        if (\n            !is_null($author) && !is_null($email) && is_array($mailto) && !empty($mailto['mailto'][0]) &&\n            $stopWords->checkBannedWord(Strings::htmlspecialchars($attached))\n        ) {\n            foreach ($mailto['mailto'] as $recipient) {\n                $recipient = trim(strip_tags($recipient));\n                if (!empty($recipient)) {\n                    $mailer = new Mail($faqConfig);\n                    $mailer->setReplyTo($email, $author);\n                    $mailer->addTo($recipient);\n                    $mailer->subject = $PMF_LANG['msgS2FMailSubject'] . $author;\n                    $mailer->message = sprintf(\n                        \"%s\\r\\n\\r\\n%s\\r\\n%s\\r\\n\\r\\n%s\",\n                        $faqConfig->get('main.send2friendText'),\n                        $PMF_LANG['msgS2FText2'],\n                        $link,\n                        $attached\n                    );\n\n                    // Send the email\n                    $result = $mailer->send();\n                    unset($mailer);\n                    usleep(250);\n                }\n            }\n\n            $message = ['success' => $PMF_LANG['msgS2FThx']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n\n    //\n    // Save user data from UCP\n    //\n    case 'saveuserdata':\n        if (!isset($_SESSION['phpmyfaq_csrf_token']) || $_SESSION['phpmyfaq_csrf_token'] !== $currentToken) {\n            $message = ['error' => $PMF_LANG['ad_msg_noauth']];\n            break;\n        }\n\n        $userId = Filter::filterInput(INPUT_POST, 'userid', FILTER_VALIDATE_INT);\n        $userName = Filter::filterInput(INPUT_POST, 'name', FILTER_SANITIZE_SPECIAL_CHARS);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $isVisible = Filter::filterInput(INPUT_POST, 'is_visible', FILTER_UNSAFE_RAW);\n        $password = Filter::filterInput(INPUT_POST, 'password', FILTER_UNSAFE_RAW);\n        $confirm = Filter::filterInput(INPUT_POST, 'password_confirm', FILTER_UNSAFE_RAW);\n\n        $user = CurrentUser::getFromSession($faqConfig);\n\n        if ($userId !== $user->getUserId()) {\n            $message = ['error' => 'User ID mismatch!'];\n            break;\n        }\n\n        if ($password !== $confirm) {\n            $message = ['error' => $PMF_LANG['ad_user_error_passwordsDontMatch']];\n            break;\n        }\n\n        if ($userId !== $user->getUserIdByEmail($email)) {\n            $message = ['error' => 'User ID / email mismatch!'];\n            break;\n        }\n\n        if (strlen($password) <= 7 || strlen($confirm) <= 7) {\n            $message = ['error' => $PMF_LANG['ad_passwd_fail']];\n            break;\n        } else {\n            $userData = [\n                'display_name' => $userName,\n                'email' => $email,\n                'is_visible' => $isVisible === 'on' ? 1 : 0\n            ];\n            $success = $user->setUserData($userData);\n\n            foreach ($user->getAuthContainer() as $author => $auth) {\n                if ($auth->setReadOnly()) {\n                    continue;\n                }\n                if (!$auth->update($user->getLogin(), $password)) {\n                    $message = ['error' => $auth->error()];\n                    $success = false;\n                } else {\n                    $success = true;\n                }\n            }\n        }\n\n        if ($success) {\n            $message = ['success' => $PMF_LANG['ad_entry_savedsuc']];\n        } else {\n            $message = ['error' => $PMF_LANG['ad_entry_savedfail']];\n        }\n        break;\n\n    //\n    // Change password\n    //\n    case 'changepassword':\n        $username = Filter::filterInput(INPUT_POST, 'username', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n\n        if (!is_null($username) && !is_null($email)) {\n            $user = new CurrentUser($faqConfig);\n            $loginExist = $user->getUserByLogin($username);\n\n            if ($loginExist && ($email == $user->getUserData('email'))) {\n                $newPassword = $user->createPassword();\n                $user->changePassword($newPassword);\n                $text = $PMF_LANG['lostpwd_text_1'] . \"\\nUsername: \" . $username . \"\\nNew Password: \" . $newPassword . \"\\n\\n\" . $PMF_LANG['lostpwd_text_2'];\n\n                $mailer = new Mail($faqConfig);\n                $mailer->addTo($email);\n                $mailer->subject = Utils::resolveMarkers('[%sitename%] Username / password request', $faqConfig);\n                $mailer->message = $text;\n                $result = $mailer->send();\n                unset($mailer);\n                // Trust that the email has been sent\n                $message = ['success' => $PMF_LANG['lostpwd_mail_okay']];\n            } else {\n                $message = ['error' => $PMF_LANG['lostpwd_err_1']];\n            }\n        } else {\n            $message = ['error' => $PMF_LANG['lostpwd_err_2']];\n        }\n        break;\n\n    //\n    // Request removal of user\n    //\n    case 'request-removal':\n        $author = Filter::filterInput(INPUT_POST, 'name', FILTER_UNSAFE_RAW);\n        $loginName = Filter::filterInput(INPUT_POST, 'loginname', FILTER_UNSAFE_RAW);\n        $email = Filter::filterInput(INPUT_POST, 'email', FILTER_VALIDATE_EMAIL);\n        $question = Filter::filterInput(INPUT_POST, 'question', FILTER_UNSAFE_RAW);\n\n        // If e-mail address is set to optional\n        if (!$faqConfig->get('main.optionalMailAddress') && is_null($email)) {\n            $email = $faqConfig->getAdminEmail();\n        }\n\n        if (\n            !is_null($author) && !is_null($email) && !is_null($question) &&\n            !empty($question) && $stopWords->checkBannedWord(Strings::htmlspecialchars($question))\n        ) {\n            $question = sprintf(\n                \"%s %s\\n%s %s\\n%s %s\\n\\n %s\",\n                $PMF_LANG['ad_user_loginname'],\n                $loginName,\n                $PMF_LANG['msgNewContentName'],\n                $author,\n                $PMF_LANG['msgNewContentMail'],\n                $email,\n                $question\n            );\n\n            $mailer = new Mail($faqConfig);\n            $mailer->setReplyTo($email, $author);\n            $mailer->addTo($faqConfig->getAdminEmail());\n            $mailer->subject = $faqConfig->getTitle() . ': Remove User Request';\n            $mailer->message = $question;\n            $result = $mailer->send();\n            unset($mailer);\n\n            $message = ['success' => $PMF_LANG['msgMailContact']];\n        } else {\n            $message = ['error' => $PMF_LANG['err_sendMail']];\n        }\n        break;\n}\n\n$http->sendJsonWithHeaders($message);\nexit();\n", "<?php\n\n/**\n * Creates a new user object.\n * A user are recognized by the session-id using getUserBySessionId(), by his\n * using getUserById() or by his nickname (login) using getUserByLogin(). New\n * are created using createNewUser().\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Lars Tiedemann <php@larstiedemann.de>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Sarah Hermann <sayh@gmx.de>\n * @copyright 2005-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2005-09-17\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\nuse phpMyFAQ\\Auth\\AuthDatabase;\nuse phpMyFAQ\\Auth\\AuthDriverInterface;\nuse phpMyFAQ\\Auth\\AuthHttp;\nuse phpMyFAQ\\Auth\\AuthLdap;\nuse phpMyFAQ\\Auth\\AuthSso;\nuse phpMyFAQ\\Permission\\BasicPermission;\nuse phpMyFAQ\\Permission\\LargePermission;\nuse phpMyFAQ\\Permission\\MediumPermission;\nuse phpMyFAQ\\User\\UserData;\n\nif (!defined('PMF_ENCRYPTION_TYPE')) {\n    define('PMF_ENCRYPTION_TYPE', 'md5'); // Fallback to md5()\n}\n\n/**\n * Class User\n *\n * @package phpMyFAQ\n */\nclass User\n{\n    public const ERROR_USER_ADD = 'Account could not be created. ';\n    public const ERROR_USER_CANNOT_CREATE_USER = 'User account could not be created. ';\n    public const ERROR_USER_CANNOT_CREATE_USERDATA = 'Entry for user data could not be created. ';\n    public const ERROR_USER_CANNOT_DELETE_USER = 'User account could not be deleted. ';\n    public const ERROR_USER_CANNOT_DELETE_USERDATA = 'Entry for user data could not be deleted. ';\n    public const ERROR_USER_CHANGE = 'Account could not be updated. ';\n    public const ERROR_USER_DELETE = 'Account could not be deleted. ';\n    public const ERROR_USER_INCORRECT_LOGIN = 'Specified login could not be found. ';\n    public const ERROR_USER_INCORRECT_PASSWORD = 'Specified password is not correct.';\n    public const ERROR_USER_INVALID_STATUS = 'Undefined user status.';\n    public const ERROR_USER_LOGINNAME_TOO_SHORT = 'The chosen loginname is too short.';\n    public const ERROR_USER_LOGIN_NOT_UNIQUE = 'Specified login name already exists. ';\n    public const ERROR_USER_LOGIN_INVALID = 'The chosen login is invalid. A valid login has at least four ' .\n        'characters. Only letters, numbers and underscore _ are allowed. The first letter must be a letter. ';\n    public const ERROR_USER_NO_PERM = 'No permission container specified.';\n    public const ERROR_USER_NO_USERID = 'No user-ID found. ';\n    public const ERROR_USER_NO_USERLOGINDATA = 'No user login data found. ';\n    public const ERROR_USER_NOT_FOUND = 'User account could not be found. ';\n    public const ERROR_USER_NO_AUTH_WRITABLE = 'No authentication object is writable.';\n    public const ERROR_USER_TOO_MANY_FAILED_LOGINS = 'You exceeded the maximum amounts of login attempts and are ' .\n        'temporarily blocked. Please try again later.';\n\n    public const STATUS_USER_PROTECTED = 'User account is protected. ';\n    public const STATUS_USER_BLOCKED = 'User account is blocked. ';\n    public const STATUS_USER_ACTIVE = 'User account is active. ';\n\n    /**\n     * Permission container.\n     *\n     * @var BasicPermission|MediumPermission|LargePermission\n     */\n    public $perm;\n\n    /**\n     * User-data storage container.\n     *\n     * @var UserData|null\n     */\n    public ?UserData $userdata = null;\n\n    /**\n     * Public array that contains error messages.\n     *\n     * @var array<string>\n     */\n    public $errors = [];\n\n    /**\n     * authentication container.\n     *\n     * @var array<string, AuthDatabase|AuthHttp|AuthLdap|AuthSso>\n     */\n    protected $authContainer = [];\n\n    /**\n     * Configuration.\n     *\n     * @var Configuration|null\n     */\n    protected ?Configuration $config = null;\n\n    /**\n     * Default Authentication properties.\n     *\n     * @var array<string, array<string, string>|string|false>\n     */\n    private $authData = [\n        'authSource' => [\n            'name' => 'database',\n            'type' => 'local',\n        ],\n        'encType' => PMF_ENCRYPTION_TYPE,\n        'readOnly' => false,\n    ];\n\n    /**\n     * login string.\n     *\n     * @var string\n     */\n    private string $login = '';\n\n    /**\n     * minimum length of login string (default: 2).\n     *\n     * @var int\n     */\n    private int $loginMinLength = 2;\n\n    /**\n     * regular expression to find invalid login strings\n     * (default: /^[a-z0-9][\\w\\.\\-@]+/is ).\n     *\n     * @var string\n     */\n    private string $validUsername = '/^[a-z0-9][\\w\\.\\-@]+/is';\n\n    /**\n     * user ID.\n     *\n     * @var int\n     */\n    private int $userId = -1;\n\n    /**\n     * Status of user.\n     *\n     * @var string\n     */\n    private string $status = '';\n\n    /**\n     * IS the user a super admin?\n     *\n     * @var bool\n     */\n    private bool $isSuperAdmin = false;\n\n    /**\n     * array of allowed values for status.\n     *\n     * @var array<string>\n     */\n    private $allowedStatus = [\n        'active' => self::STATUS_USER_ACTIVE,\n        'blocked' => self::STATUS_USER_BLOCKED,\n        'protected' => self::STATUS_USER_PROTECTED,\n    ];\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n\n        $perm = Permission::selectPerm($this->config->get('security.permLevel'), $this->config);\n        /** @phpstan-ignore-next-line */\n        if (!$this->addPerm($perm)) {\n            return;\n        }\n\n        // Always create a 'local' authentication object (see: $authData)\n        $this->authContainer = [];\n        $auth = new Auth($this->config);\n\n        /** @var AuthDatabase|AuthHttp|AuthLdap|AuthSso */\n        $authLocal = $auth->selectAuth($this->getAuthSource('name'));\n        $authLocal->selectEncType($this->getAuthData('encType'));\n        $authLocal->setReadOnly($this->getAuthData('readOnly'));\n\n        if (!$this->addAuth($authLocal, $this->getAuthSource('type'))) {\n            return;\n        }\n\n        // additionally, set given $auth objects\n        /** @phpstan-ignore-next-line */\n        foreach ($this->authContainer as $name => $authObject) {\n            if (!$this->addAuth($authObject, $name)) {\n                break;\n            }\n        }\n\n\n        // user data object\n        $this->userdata = new UserData($this->config);\n    }\n\n    /**\n     * Adds a permission object to the user.\n     *\n     * @param BasicPermission|MediumPermission|LargePermission $perm Permission object\n     * @return bool\n     */\n    public function addPerm($perm): bool\n    {\n        $this->perm = $perm;\n        return true;\n    }\n\n    /**\n     * Returns a specific entry from the auth data source array.\n     *\n     * @param string $key\n     * @return string|null\n     */\n    public function getAuthSource(string $key): ?string\n    {\n        if (isset($this->authData['authSource'][$key])) {\n            return $this->authData['authSource'][$key];\n        }\n        return null;\n    }\n\n    /**\n     * Returns a specific entry from the auth data array.\n     *\n     * @param string $key\n     * @return string|bool|null\n     */\n    public function getAuthData(string $key)\n    {\n        if (isset($this->authData[$key])) {\n            return $this->authData[$key];\n        }\n        return null;\n    }\n\n    /**\n     * adds a new authentication object to the user object.\n     *\n     * @param AuthDatabase|AuthHttp|AuthLdap|AuthSso $auth Driver object\n     * @param string              $name Auth name\n     * @return bool\n     */\n    public function addAuth($auth, string $name): bool\n    {\n        if ($this->checkAuth($auth)) {\n            $this->authContainer[$name] = $auth;\n\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * Returns true if auth is a valid authentication object.\n     *\n     * @param Auth $auth Auth object\n     * @return bool\n     */\n    protected function checkAuth(Auth $auth): bool\n    {\n        $methods = ['checkCredentials'];\n        foreach ($methods as $method) {\n            if (!method_exists($auth, $method)) {\n                return false;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * loads basic user information from the database selecting the user with\n     * specified cookie information.\n     *\n     * @param string $cookie\n     * @return bool\n     */\n    public function getUserByCookie(string $cookie): bool\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                user_id,\n                login,\n                account_status\n            FROM\n                %sfaquser\n            WHERE\n                remember_me = '%s' AND account_status != 'blocked'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($cookie)\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) !== 1) {\n            $this->errors[] = self::ERROR_USER_INCORRECT_LOGIN;\n\n            return false;\n        }\n        $user = $this->config->getDb()->fetchArray($res);\n\n        // Don't ever login via anonymous user\n        if (-1 === $user['user_id']) {\n            return false;\n        }\n\n        $this->userId = (int)$user['user_id'];\n        $this->login = (string)$user['login'];\n        $this->status = (string)$user['account_status'];\n\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns the User ID of the user.\n     *\n     * @return int\n     */\n    public function getUserId(): int\n    {\n        if (isset($this->userId) && is_int($this->userId)) {\n            return (int)$this->userId;\n        }\n        $this->userId = -1;\n        $this->errors[] = self::ERROR_USER_NO_USERID;\n\n        return -1;\n    }\n\n    /**\n     * Checks if display name is already used. Returns true, if already in use.\n     *\n     * @param string $name\n     * @return bool\n     */\n    public function checkDisplayName(string $name): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        if ($name === $this->userdata->fetch('display_name', $name)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Checks if email address is already used. Returns true, if already in use.\n     *\n     * @param string $name\n     * @return bool\n     */\n    public function checkMailAddress(string $name): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        if ($name === $this->userdata->fetch('email', $name)) {\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * search users by login.\n     *\n     * @param string $search Login name\n     * @return array<int, array>\n     */\n    public function searchUsers(string $search): array\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                login, \n                user_id,\n                account_status\n            FROM\n                %sfaquser\n            WHERE \n                login LIKE '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($search . '%')\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if (!$res) {\n            return [];\n        }\n\n        $result = [];\n        while ($row = $this->config->getDb()->fetchArray($res)) {\n            $result[] = $row;\n        }\n\n        return $result;\n    }\n\n    /**\n     * Creates a new user and stores basic data in the database.\n     *\n     * @param string $login\n     * @param string $pass\n     * @param string $domain\n     * @param int    $userId\n     * @return bool\n     * @throws Core\\Exception\n     */\n    public function createUser(string $login, string $pass = '', string $domain = '', int $userId = 0): bool\n    {\n        foreach ($this->authContainer as $auth) {\n            if (!$this->checkAuth($auth)) {\n                return false;\n            }\n        }\n\n        // is $login valid?\n        if (!$this->isValidLogin($login)) {\n            $this->errors[] = self::ERROR_USER_LOGINNAME_TOO_SHORT;\n\n            return false;\n        }\n\n        // does $login already exist?\n        if ($this->getUserByLogin($login, false)) {\n            $this->errors[] = self::ERROR_USER_LOGIN_NOT_UNIQUE;\n\n            return false;\n        }\n\n        // set user-ID\n        if (0 == $userId) {\n            $this->userId = $this->config->getDb()->nextId(Database::getTablePrefix() . 'faquser', 'user_id');\n        } else {\n            $this->userId = $userId;\n        }\n\n        // create user entry\n        $insert = sprintf(\n            \"INSERT INTO %sfaquser (user_id, login, session_timestamp, member_since) VALUES (%d, '%s', %d, '%s')\",\n            Database::getTablePrefix(),\n            $this->getUserId(),\n            $this->config->getDb()->escape($login),\n            $_SERVER['REQUEST_TIME'],\n            date('YmdHis', $_SERVER['REQUEST_TIME'])\n        );\n\n        $this->config->getDb()->query($insert);\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $data = $this->userdata->add($this->getUserId());\n        if (!$data) {\n            $this->errors[] = self::ERROR_USER_CANNOT_CREATE_USERDATA;\n\n            return false;\n        }\n\n        // create authentication entry\n        if ($pass === '') {\n            $pass = $this->createPassword();\n        }\n        $success = false;\n\n        foreach ($this->authContainer as $name => $auth) {\n            if ($auth->setReadOnly()) {\n                continue;\n            }\n            if (!$auth->create($login, $pass, $domain)) {\n                $this->errors[] = self::ERROR_USER_CANNOT_CREATE_USER . 'in Auth ' . $name;\n            } else {\n                $success = true;\n            }\n        }\n        if (!$success) {\n            return false;\n        }\n\n        if ($this->perm instanceof MediumPermission) {\n            $this->perm->autoJoin($this->userId);\n        }\n\n        return $this->getUserByLogin($login, false);\n    }\n\n    /**\n     * returns true if login is a valid login string.\n     * $this->loginMinLength defines the minimum length the\n     * login string. If login has more characters than allowed,\n     * false is returned.\n     * $this->login_invalidRegExp is a regular expression.\n     * If login matches this false is returned.\n     *\n     * @param string $login Login name\n     * @return bool\n     */\n    public function isValidLogin(string $login): bool\n    {\n        if (strlen($login) < $this->loginMinLength || !preg_match($this->validUsername, $login)) {\n            $this->errors[] = self::ERROR_USER_LOGIN_INVALID;\n\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * loads basic user information from the database selecting the user with\n     * specified login.\n     *\n     * @param string $login Login name\n     * @param bool   $raiseError Raise error?\n     * @return bool\n     */\n    public function getUserByLogin(string $login, bool $raiseError = true): bool\n    {\n        $select = sprintf(\n            \"\n            SELECT\n                user_id,\n                login,\n                account_status,\n                is_superadmin\n            FROM\n                %sfaquser\n            WHERE\n                login = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($login)\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) !== 1) {\n            if ($raiseError) {\n                $this->errors[] = self::ERROR_USER_INCORRECT_LOGIN;\n            }\n\n            return false;\n        }\n\n        $user = $this->config->getDb()->fetchArray($res);\n\n        $this->userId = (int) $user['user_id'];\n        $this->login = (string) $user['login'];\n        $this->status = (string) $user['account_status'];\n        $this->isSuperAdmin = (bool) $user['is_superadmin'];\n\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns a new password.\n     *\n     * @param int  $minimumLength\n     * @param bool $allowUnderscore\n     * @return string\n     * @throws Exception\n     */\n    public function createPassword(int $minimumLength = 8, bool $allowUnderscore = true): string\n    {\n        // To make passwords harder to get wrong, a few letters & numbers have been omitted.\n        // This will ensure safety with browsers using fonts with confusable letters.\n        // Removed: o,O,0,1,l,L\n        $consonants = ['b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'm', 'n', 'p', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'];\n        $vowels = ['a', 'e', 'i', 'u'];\n        $newPassword = '';\n        $nextChar = '';\n        $skipped = false;\n\n        while (strlen($newPassword) < $minimumLength) {\n            $caseFunc = random_int(0, 1) ? 'strtoupper' : 'strtolower';\n\n            switch (random_int(0, $skipped ? 3 : ($allowUnderscore ? 5 : 4))) {\n                case 0:\n                case 1:\n                    $nextChar = $caseFunc($consonants[random_int(0, 18)]);\n                    break;\n                case 2:\n                case 3:\n                    $nextChar = $caseFunc($vowels[random_int(0, 3)]);\n                    break;\n                case 4:\n                    $nextChar = (string)random_int(2, 9);\n                    break;\n                case 5:\n                    $newPassword .= '_';\n                    continue 2;\n            }\n\n            $skipped = false;\n\n            // Ensure letters and numbers only occur once.\n            if (strpos($newPassword, $nextChar) === false) {\n                $newPassword .= $nextChar;\n            } else {\n                $skipped = true;\n            }\n        }\n\n        return $newPassword;\n    }\n\n    /**\n     * deletes the user from the database.\n     *\n     * @return bool\n     */\n    public function deleteUser(): bool\n    {\n        if (!isset($this->userId) || $this->userId == 0) {\n            $this->errors[] = self::ERROR_USER_NO_USERID;\n\n            return false;\n        }\n\n        if (!isset($this->login) || strlen($this->login) == 0) {\n            $this->errors[] = self::ERROR_USER_LOGIN_INVALID;\n\n            return false;\n        }\n\n        if (\n            isset($this->allowedStatus[$this->status]) &&\n            $this->allowedStatus[$this->status] === self::STATUS_USER_PROTECTED\n        ) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USER . self::STATUS_USER_PROTECTED;\n\n            return false;\n        }\n\n        $this->perm->refuseAllUserRights($this->userId);\n\n        $delete = sprintf(\n            'DELETE FROM %sfaquser WHERE user_id = %d',\n            Database::getTablePrefix(),\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($delete);\n        if (!$res) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USER . 'error(): ' . $this->config->getDb()->error();\n\n            return false;\n        }\n\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $data = $this->userdata->delete($this->getUserId());\n        if (!$data) {\n            $this->errors[] = self::ERROR_USER_CANNOT_DELETE_USERDATA;\n\n            return false;\n        }\n\n        $readOnly = 0;\n        $authCount = 0;\n        $delete = [];\n        foreach ($this->authContainer as $auth) {\n            ++$authCount;\n            if ($auth->setReadOnly()) {\n                ++$readOnly;\n                continue;\n            }\n            $delete[] = $auth->delete($this->login);\n        }\n\n        if ($readOnly == $authCount) {\n            $this->errors[] = self::ERROR_USER_NO_AUTH_WRITABLE;\n        }\n        if (!in_array(true, $delete)) {\n            return false;\n        }\n\n        return true;\n    }\n\n    /**\n     * Returns a string with error messages.\n     * The string returned by error() contains messages for all errors that\n     * during object processing. Messages are separated by new lines.\n     * Error messages are stored in the public array errors.\n     *\n     * @return string\n     */\n    public function error(): string\n    {\n        $message = '';\n\n        foreach ($this->errors as $error) {\n            $message .= $error . \"<br>\\n\";\n        }\n        $this->errors = [];\n\n        return $message;\n    }\n\n    /**\n     * Returns the data aof the auth container.\n     *\n     * @return AuthDriverInterface[]\n     */\n    public function getAuthContainer(): array\n    {\n        return $this->authContainer;\n    }\n\n    /**\n     * Returns an array with the user-IDs of all users found in\n     * the database. By default, the Anonymous User will not be returned.\n     *\n     * @param bool $withoutAnonymous Without anonymous?\n     * @param bool $allowBlockedUsers Allow blocked users as well, e.g. in admin\n     * @return array<int>\n     */\n    public function getAllUsers(bool $withoutAnonymous = true, bool $allowBlockedUsers = true): array\n    {\n        $select = sprintf(\n            '\n            SELECT\n                user_id\n            FROM\n                %sfaquser\n            WHERE\n                1 = 1\n            %s\n            %s\n            ORDER BY\n                user_id ASC',\n            Database::getTablePrefix(),\n            ($withoutAnonymous ? 'AND user_id <> -1' : ''),\n            ($allowBlockedUsers ? '' : \"AND account_status != 'blocked'\")\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if (!$res) {\n            return [];\n        }\n\n        $result = [];\n        while ($row = $this->config->getDb()->fetchArray($res)) {\n            $result[] = (int) $row['user_id'];\n        }\n\n        return $result;\n    }\n\n    /**\n     * Loads basic user information from the database selecting the user with\n     * specified user-ID.\n     *\n     * @param int  $userId User ID\n     * @param bool $allowBlockedUsers Allow blocked users as well, e.g. in admin\n     * @return bool\n     */\n    public function getUserById($userId, $allowBlockedUsers = false): bool\n    {\n        $select = sprintf(\n            '\n            SELECT\n                user_id,\n                login,\n                account_status,\n                is_superadmin\n            FROM\n                %sfaquser\n            WHERE\n                user_id = %d ' . ($allowBlockedUsers ? '' : \"AND account_status != 'blocked'\"),\n            Database::getTablePrefix(),\n            (int)$userId\n        );\n\n        $res = $this->config->getDb()->query($select);\n        if ($this->config->getDb()->numRows($res) != 1) {\n            $this->errors[] = self::ERROR_USER_NO_USERID . 'error(): ' . $this->config->getDb()->error();\n\n            return false;\n        }\n\n        $user = $this->config->getDb()->fetchArray($res);\n\n        $this->userId = (int) $user['user_id'];\n        $this->login = (string) $user['login'];\n        $this->status = (string) $user['account_status'];\n        $this->isSuperAdmin = (bool) $user['is_superadmin'];\n\n        // get encrypted password\n        // @todo: Add a getEncPassword method to the Auth* classes for the (local and remote) Auth Sources.\n        if ('db' === $this->getAuthSource('name')) {\n            $select = sprintf(\n                \"\n                SELECT\n                    pass\n                FROM\n                    %sfaquserlogin\n                WHERE\n                    login = '%s'\",\n                Database::getTablePrefix(),\n                $this->login\n            );\n\n            $res = $this->config->getDb()->query($select);\n            if ($this->config->getDb()->numRows($res) != 1) {\n                $this->errors[] = self::ERROR_USER_NO_USERLOGINDATA . 'error(): ' . $this->config->getDb()->error();\n\n                return false;\n            }\n        }\n        // get user-data\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return true;\n    }\n\n    /**\n     * Returns the data of the current user.\n     *\n     * @param string $field Field\n     * @return array<string>|string|int\n     */\n    public function getUserData(string $field = '*')\n    {\n        if (!($this->userdata instanceof UserData)) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        return $this->userdata->get($field);\n    }\n\n    /**\n     * Adds user data.\n     *\n     * @param array<string> $data Array with user data\n     * @return bool\n     */\n    public function setUserData(array $data): bool\n    {\n        if (!($this->userdata instanceof UserData)) {\n            $this->userdata = new UserData($this->config);\n        }\n        $this->userdata->load($this->getUserId());\n\n        return $this->userdata->set(array_keys($data), array_values($data));\n    }\n\n    /**\n     * returns the user's login.\n     *\n     * @return string\n     */\n    public function getLogin(): string\n    {\n        return $this->login;\n    }\n\n    /**\n     * Returns the user ID from the given email address\n     *\n     * @param string $email\n     * @return int\n     */\n    public function getUserIdByEmail(string $email): int\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        $userData = $this->userdata->fetchAll('email', $email);\n\n        return $userData['user_id'];\n    }\n\n    /**\n     * Returns true or false for the visibility for the given email\n     * address, if the user is not a registered user, the method\n     * returns false for anonymous users\n     *\n     * @param string $email\n     * @return bool\n     */\n    public function getUserVisibilityByEmail(string $email): bool\n    {\n        if (!$this->userdata instanceof UserData) {\n            $this->userdata = new UserData($this->config);\n        }\n\n        $userData = $this->userdata->fetchAll('email', $email);\n\n        return isset($userData['is_visible']) ? (bool)$userData['is_visible'] : true;\n    }\n\n    /**\n     * Returns true on success.\n     * This will change a users status to active, and send an email with a new password.\n     *\n     * @return bool\n     * @throws Exception\n     */\n    public function activateUser(): bool\n    {\n        if ($this->getStatus() == 'blocked') {\n            // Generate and change user password.\n            $newPassword = $this->createPassword();\n            $this->changePassword($newPassword);\n            // Send activation email.\n            $subject = '[%sitename%] Login name / activation';\n            $message = sprintf(\n                \"\\nName: %s\\nLogin name: %s\\nNew password: %s\\n\\n\",\n                $this->getUserData('display_name'),\n                $this->getLogin(),\n                $newPassword\n            );\n            // Only set to active if the activation mail sent correctly.\n            if ($this->mailUser($subject, $message)) {\n                return $this->setStatus('active');\n            }\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * returns the user's status.\n     *\n     * @return string\n     */\n    public function getStatus(): string\n    {\n        if (isset($this->status) && strlen($this->status) > 0) {\n            return $this->status;\n        }\n\n        return '';\n    }\n\n    /**\n     * Sets the user's status and updates the database entry.\n     *\n     * @param string $status Status\n     * @return bool\n     */\n    public function setStatus(string $status): bool\n    {\n        // is status allowed?\n        $status = strtolower($status);\n        if (!in_array($status, array_keys($this->allowedStatus))) {\n            $this->errors[] = self::ERROR_USER_INVALID_STATUS;\n\n            return false;\n        }\n\n        // update status\n        $this->status = $status;\n        $update = sprintf(\n            \"\n            UPDATE\n                %sfaquser\n            SET\n                account_status = '%s'\n            WHERE\n                user_id = %d\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($status),\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($update);\n\n        if ($res) {\n            return true;\n        }\n\n        return false;\n    }\n\n    /**\n     * changes the user's password. If $pass is omitted, a new\n     * password is generated using the createPassword() method.\n     *\n     * @param string $pass Password\n     * @return bool\n     * @throws Exception\n     */\n    public function changePassword($pass = ''): bool\n    {\n        foreach ($this->authContainer as $auth) {\n            if (!$this->checkAuth($auth)) {\n                return false;\n            }\n        }\n\n        $login = $this->getLogin();\n        if ($pass == '') {\n            $pass = $this->createPassword();\n        }\n\n        $success = false;\n        foreach ($this->authContainer as $auth) {\n            if ($auth->setReadOnly()) {\n                continue;\n            }\n            if (!$auth->update($login, $pass)) {\n                continue;\n            } else {\n                $success = true;\n            }\n        }\n\n        return $success;\n    }\n\n    /**\n     * Sends mail to the current user.\n     *\n     * @param string $subject\n     * @param string $message\n     * @return int\n     * @throws Core\\Exception\n     */\n    public function mailUser(string $subject, string $message): int\n    {\n        $mail = new Mail($this->config);\n        $mail->addTo($this->getUserData('email'));\n        $mail->subject = $subject;\n        $mail->message = $message;\n        $result = $mail->send();\n        unset($mail);\n\n        return $result;\n    }\n\n    /**\n     * Returns true, if a user is a super admin.\n     *\n     * @return bool\n     */\n    public function isSuperAdmin(): bool\n    {\n        return $this->isSuperAdmin;\n    }\n\n    /**\n     * Sets the users \"is_superadmin\" flag and updates the database entry.\n     *\n     * @param bool $isSuperAdmin\n     * @return bool\n     */\n    public function setSuperAdmin(bool $isSuperAdmin): bool\n    {\n        $this->isSuperAdmin = $isSuperAdmin;\n        $update = sprintf(\n            \"\n            UPDATE\n                %sfaquser\n            SET\n                is_superadmin = %d\n            WHERE\n                user_id = %d\",\n            Database::getTablePrefix(),\n            (int)$this->isSuperAdmin,\n            $this->userId\n        );\n\n        $res = $this->config->getDb()->query($update);\n\n        if ($res) {\n            return true;\n        }\n\n        return false;\n    }\n}\n"], "filenames": ["phpmyfaq/ajaxservice.php", "phpmyfaq/src/phpMyFAQ/User.php"], "buggy_code_start_loc": [776, 911], "buggy_code_end_loc": [776, 912], "fixing_code_start_loc": [777, 911], "fixing_code_end_loc": [782, 912], "type": "CWE-284", "message": "Improper Access Control in GitHub repository thorsten/phpmyfaq prior to 3.1.13.", "other": {"cve": {"id": "CVE-2023-2429", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-30T03:15:08.750", "lastModified": "2023-05-06T03:06:49.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Access Control in GitHub repository thorsten/phpmyfaq prior to 3.1.13."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:H/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 6.6, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 4.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-284"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.13", "matchCriteriaId": "C8E79CDF-44C3-4462-BDA6-E23A25A11D0D"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/07552f5577ff8b1e6f7cdefafcce9b2a744d3a24", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/20d3a0b3-2693-4bf1-b196-10741201a540", "source": "security@huntr.dev", "tags": ["Permissions Required"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/07552f5577ff8b1e6f7cdefafcce9b2a744d3a24"}}