{"buggy_code": ["\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n\tpageEncoding=\"ISO-8859-1\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<title>Voyager &#124; Login</title>\n<link rel=\"stylesheet\"\n\thref=\"${pageContext.request.contextPath}/resources/main.css\">\n<link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>\n</head>\n<body>\n\n\t<header>\n\t\t<nav>\n\t\t\t<ul>\n\t\t\t\t<li>Home</li> &bull;\n\t\t\t\t<li>Profile</li> &bull;\n\t\t\t\t<li>Submit</li> &bull;\n\t\t\t\t<li>Search</li>\n\t\t\t</ul>\n\t\t</nav>\n\t</header>\n\n\t<article class=\"bodyContainer\">\n\t\t<h1>Register</h1>\n\t\t<p><%= (request.getAttribute(\"errorMessage\") == null ? \"\" : request.getAttribute(\"errorMessage\")) %></p>\n\t\t<form method=\"get\" action=\"<%=request.getContextPath()%>/register\">\n\t\t\t<input type=\"submit\" value=\"Register\" id=\"submit\" />\n\t\t</form>\n\t\t<br /> <br />\n\t\t<hr />\n\t\t<h1>Login</h1>\n\t\t<form method=\"post\">\n\t\t\t<label>Username:</label> <input name=\"username\" /> <label>Password:</label>\n\t\t\t<input name=\"password\" type=\"password\" /> <input type=\"submit\"\n\t\t\t\tvalue=\"Login\" id=\"submit\" />\n\t\t</form>\n\t</article>\n\n</body>\n</html>", "<%@page import=\"models.RegisterUserModel\"%>\n<%@page import=\"models.Account\"%>\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n\tpageEncoding=\"ISO-8859-1\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<title>Voyager &#124; Register</title>\n<link rel=\"stylesheet\" href=\"${pageContext.request.contextPath}/resources/main.css\">\n<link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>\n</head>\n<body>\n<% Account current = (request.getAttribute(\"attemptedAccount\") == null) ? new Account() : (Account)request.getAttribute(\"attemptedAccount\"); %>\n\n\t<header>\n\t\t<nav>\n\t\t\t<ul>\n\t\t\t\t<li>Home</li> &bull;\n\t\t\t\t<li>Profile</li> &bull;\n\t\t\t\t<li>Submit</li> &bull;\n\t\t\t\t<li>Search</li>\n\t\t\t</ul>\n\t\t</nav>\n\t</header>\n\t<article class=\"bodyContainer\">\n\t\t<h1>Register New User</h1>\n\t\t<p><%=(((RegisterUserModel)request.getAttribute(\"errorMessage\")).getErrorMessage() == null ? \"\" : ((RegisterUserModel)request.getAttribute(\"errorMessage\")).getErrorMessage()) %></p>\n\t\t<form method=\"post\" enctype=\"multipart/form-data\">\n\t\t\t<label>Username:</label> <input name=\"username\" type=\"text\" value=\"<%= current.getUsername() %>\"/>\n\t\t\t<label>Password:</label><input\tname=\"password\" type=\"password\" /> \n\t\t\t<label>Confirm Password:</label><input name=\"confirmPassword\" type=\"password\" />\n\t\t\t<label>Email Address:</label><input name=\"email\" type=\"email\" value=\"<%=current.getEmail() %>\"/>\n\t\t\t<label>Confirm Email:</label><input name=\"confirmEmail\" type=\"email\" />\n\t\t\t<label>Profile Image:</label><input name=\"image\" type=\"file\"/>\n\t\t\t<input type=\"submit\" value=\"Register\" id=\"submit\" />\n\t\t</form>\n\n\t</article>\n</body>\n</html>", "package Controllers;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Part;\n\nimport exceptions.UsernameAlreadyExistsException;\nimport models.Account;\nimport models.DataService;\nimport models.ModelAndView;\nimport models.RegisterUserModel;\nimport models.Roles;\n\n\npublic class RegisterController {\n\t\n\tprivate DataService dataService;\n\tprivate HttpServletRequest request;\n\tprivate HttpServletResponse response;\n\tprivate String filePath;\n\t\n\tpublic RegisterController(HttpServletRequest request, HttpServletResponse response, DataService dataService, String filePath) {\n\t\tthis.request = request;\n\t\tthis.response = response;\n\t\tthis.dataService = dataService;\n\t\tthis.filePath = filePath;\n\t}\n\t\n\tpublic ModelAndView commitUserRegisterUser() {\n\t\tString username = \"\";\n\t\tString password = \"\";\n\t\tString confirmPassword = \"\";\n\t\tString email = \"\";\n\t\tString confirmEmail = \"\";\n\t\tString avatarPath = \"\";\n\t\ttry{\n\t\t\tusername = this.getValue(request.getPart(\"username\"));\n\t\t\tpassword = this.getValue(request.getPart(\"password\"));\n\t\t\tconfirmPassword = this.getValue(request.getPart(\"confirmPassword\"));\n\t\t\temail = this.getValue(request.getPart(\"email\"));\n\t\t\tconfirmEmail = this.getValue(request.getPart(\"confirmEmail\"));\n\t\t\tavatarPath = FileUploadController.getFileName(request.getPart(\"image\"));\n\t\t} catch (ServletException e1) {\n\t\t\te1.printStackTrace();\n\t\t} catch (IOException e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\t\t\n\t\t\n\t\tRegisterUserModel model = new RegisterUserModel();\n\t\tModelAndView mv = null;\n\t\t\n\t\tif(!password.equals(confirmPassword)) {\n\t\t\tmodel.setErrorMessage(\"Bad username/password. \");\n\t\t\trequest.setAttribute(\"attemptedAccount\", new Account(username, email, avatarPath, Roles.User, password));\n\t\t\tmv = new ModelAndView(model, \"/WEB-INF/register.jsp\");\n\t\t}\n\t\tif(!email.equals(confirmEmail)){\n\t\t\tmodel.setErrorMessage(model.getErrorMessage() + \"Emails did not match. \");\n\t\t\trequest.setAttribute(\"attemptedAccount\", new Account(username, email, avatarPath, Roles.User, password));\n\t\t\tmv = new ModelAndView(model, \"/WEB-INF/register.jsp\");\n\t\t}\n\t\ttry {\n\t\t\tAccount user = new Account(username, email, avatarPath, Roles.User, password);\n\t\t\tdataService.registerUser(user);\n\t\t\tFileUploadController.processRequest(request, response, filePath);\n\t\t\tmodel.setUser(user);\n\t\t\tmv = new ModelAndView(model, \"/WEB-INF/account/profile.jsp\");\n\t\t} catch(UsernameAlreadyExistsException e) {\n\t\t\trequest.setAttribute(\"attemptedAccount\", new Account(username, email, avatarPath, Roles.User, password));\n\t\t\tmodel.setErrorMessage(\"Username has already been used.\");\n\t\t\tmv = new ModelAndView(model, \"/WEB-INF/register.jsp\");\n\t\t} catch (ServletException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\treturn mv;\n\t}\n\t\n\tprivate String getValue(Part part) throws IOException {\n\t    BufferedReader reader = new BufferedReader(new InputStreamReader(part.getInputStream(), \"UTF-8\"));\n\t    StringBuilder value = new StringBuilder();\n\t    char[] buffer = new char[1024];\n\t    for (int length = 0; (length = reader.read(buffer)) > 0;) {\n\t        value.append(buffer, 0, length);\n\t    }\n\t    return value.toString();\n\t}\n}\n", "package models;\n\nimport java.sql.Connection;\nimport java.sql.Driver;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\nimport com.microsoft.sqlserver.jdbc.SQLServerDriver;\n\nimport exceptions.BadLoginException;\nimport exceptions.UsernameAlreadyExistsException;\n\n\npublic class DatabaseAccess implements DataService {\n\n\t/* (non-Javadoc)\n\t * @see models.DataService#login(java.lang.String, java.lang.String)\n\t */\n\t@Override\n\tpublic Account login(String username, String password){\n\t\tAccount account = null;\n\t\tDriver driver = new SQLServerDriver();\n\t\tString connectionUrl = \"jdbc:sqlserver://n8bu1j6855.database.windows.net:1433;database=VoyagerDB;user=VoyageLogin@n8bu1j6855;password={GroupP@ssword};encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Select userName, userPassword, userEmail, userRole from UserTable where userName = '\" + username + \"'\");\n\t\t\tResultSet rs = statement.executeQuery();\n\t\t\trs.next();\n\t\t\tString storedPass = rs.getString(\"userPassword\");\n\t\t\tif(storedPass.equals(password)){\n\t\t\t\tSystem.out.println(\"Successfully logged in\");\n\t\t\t\taccount = new Account(rs.getString(\"userName\"), rs.getString(\"userEmail\"), \"\", Roles.valueOf(rs.getString(\"userRole\")), rs.getString(\"userPassword\"));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthrow new BadLoginException(\"The username/password combination is incorrect\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tif(e.getMessage().contains(\"result set has no current row\")){\n\t\t\t\tthrow new BadLoginException(\"The username/password combination is incorrect\");\n\t\t\t}\n\t\t}\t\n\t\t\n\t\treturn account;\n\t}\n\t\n\t//Bind variables\n\t\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#registerUser(models.Account)\n\t */\n\t@Override\n\tpublic void registerUser(Account user){\n\t\tDriver driver = new SQLServerDriver();\n\t\tString connectionUrl = \"jdbc:sqlserver://n8bu1j6855.database.windows.net:1433;database=VoyagerDB;user=VoyageLogin@n8bu1j6855;password={GroupP@ssword};encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Insert INTO UserTable (userName, userPassword, userEmail, userRole) \"\n\t\t\t\t\t+ \"VALUES ('\" + user.getUsername() + \"', '\" + user.getPassword() + \"', '\" + user.getEmail() + \"', '\" + user.getRole().toString() + \"');\");\n\t\t\tstatement.execute();\n\t\t\tSystem.out.println(\"Registration Successful\");\n\t\t} catch (SQLException e) {\n\t\t\tif(e.getMessage().contains(\"UNIQUE KEY\")){\n\t\t\t\tSystem.err.println(\"User has already been registered.\");\n\t\t\t\tthrow new UsernameAlreadyExistsException();\n\t\t\t}\n\t\t\telse{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#removeUser(models.Account)\n\t */\n\t@Override\n\tpublic void removeUser(Account user){\n\t\tDriver driver = new SQLServerDriver();\n\t\tString connectionUrl = \"jdbc:sqlserver://n8bu1j6855.database.windows.net:1433;database=VoyagerDB;user=VoyageLogin@n8bu1j6855;password={GroupP@ssword};encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"DELETE FROM UserTable WHERE userName='\" + user.getUsername() + \"'\");\n\t\t\tstatement.execute();\n\t\t\tSystem.out.println(\"Removal sucessful\");\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#updateUser(models.Account)\n\t */\n\t@Override\n\tpublic void updateUser(Account user){\n\t\tDriver driver = new SQLServerDriver();\n\t\tString connectionUrl = \"jdbc:sqlserver://n8bu1j6855.database.windows.net:1433;database=VoyagerDB;user=VoyageLogin@n8bu1j6855;password={GroupP@ssword};encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"UPDATE UserTable \"\n\t\t\t\t\t+ \"SET userPassword='\" + user.getPassword() + \"', userEmail='\" + user.getEmail() + \"', userRole='\" + user.getRole().toString() + \"'\"\n\t\t\t\t\t+ \"WHERE userName='\" + user.getUsername() + \"'\");\n\t\t\tstatement.execute();\n\t\t\tSystem.out.println(\"Update successful\");\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#getUserId(java.lang.String)\n\t */\n\t@Override\n\tpublic int getUserId(String user){\n\t\tAccount account = null;\n\t\tint id = -1;\n\t\tDriver driver = new SQLServerDriver();\n\t\tString connectionUrl = \"jdbc:sqlserver://n8bu1j6855.database.windows.net:1433;database=VoyagerDB;user=VoyageLogin@n8bu1j6855;password={GroupP@ssword};encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Select userId from UserTable where userName = '\" + user + \"'\");\n\t\t\tResultSet rs = statement.executeQuery();\n\t\t\trs.next();\n\t\t\tString storedId = rs.getString(\"userId\");\n\t\t\tid = Integer.parseInt(storedId);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t\treturn id;\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#getUserName(int)\n\t */\n\t@Override\n\tpublic String getUserName(int userId){\n\t\tString userName = null;\n\t\tDriver driver = new SQLServerDriver();\n\t\tString connectionUrl = \"jdbc:sqlserver://n8bu1j6855.database.windows.net:1433;database=VoyagerDB;user=VoyageLogin@n8bu1j6855;password={GroupP@ssword};encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Select userName from UserTable where userId = '\" + userId + \"'\");\n\t\t\tResultSet rs = statement.executeQuery();\n\t\t\trs.next();\n\t\t\tuserName = rs.getString(\"userName\");\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t\t\n\t\treturn userName;\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#enterPost(models.Post)\n\t */\n\t@Override\n\tpublic void enterPost(Post post){\n\t\tDriver driver = new SQLServerDriver();\n\t\tString connectionUrl = \"jdbc:sqlserver://n8bu1j6855.database.windows.net:1433;database=VoyagerDB;user=VoyageLogin@n8bu1j6855;password={GroupP@ssword};encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Insert INTO PostTable (postTitle, postAuthorId, postTime, postContent) \"\n\t\t\t\t\t+ \"VALUES ('\" + post.getTitle() + \"', '\" + this.getUserId(post.getAuthor()) + \"', CURRENT_TIMESTAMP, '\" + post.getMessage() + \"');\");\n\t\t\tstatement.execute();\n\t\t\tSystem.out.println(\"Successful post\");\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#retrievePost(java.lang.String)\n\t */\n\t@Override\n\tpublic Post retrievePost(String postTitle){\n\t\tPost post = null;\n\t\tDriver driver = new SQLServerDriver();\n\t\tString connectionUrl = \"jdbc:sqlserver://n8bu1j6855.database.windows.net:1433;database=VoyagerDB;user=VoyageLogin@n8bu1j6855;password={GroupP@ssword};encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Select postTitle, postAuthorId, postTime, postContent from PostTable where postTitle = '\" + postTitle + \"'\");\n\t\t\tResultSet rs = statement.executeQuery();\n\t\t\trs.next();\n\t\t\tpost = new Post(rs.getString(\"postTitle\"), rs.getString(\"postContent\"), this.getUserName(rs.getInt(\"postAuthorId\")));\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t\t\n\t\treturn post;\n\t}\n}\n"], "fixing_code": ["\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\"%>\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n\tpageEncoding=\"ISO-8859-1\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<title>Voyager &#124; Login</title>\n<link rel=\"stylesheet\"\n\thref=\"${pageContext.request.contextPath}/resources/main.css\">\n<link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>\n</head>\n<body>\n\n\t<header>\n\t\t<nav>\n\t\t\t<ul>\n\t\t\t\t<li>Home</li> &bull;\n\t\t\t\t<li>Profile</li> &bull;\n\t\t\t\t<li>Submit</li> &bull;\n\t\t\t\t<li>Search</li>\n\t\t\t</ul>\n\t\t</nav>\n\t</header>\n\n\t<article class=\"bodyContainer\">\n\t\t<h1>Register</h1>\n\t\t<form method=\"get\" action=\"<%=request.getContextPath()%>/register\">\n\t\t\t<input type=\"submit\" value=\"Register\" id=\"submit\" />\n\t\t</form>\n\t\t<br /> <br />\n\t\t<hr />\n\t\t<h1>Login</h1>\n\t\t<p><%= (request.getAttribute(\"errorMessage\") == null ? \"\" : request.getAttribute(\"errorMessage\")) %></p>\n\t\t<form method=\"post\">\n\t\t\t<label>Username:</label> <input name=\"username\" /> <label>Password:</label>\n\t\t\t<input name=\"password\" type=\"password\" /> <input type=\"submit\"\n\t\t\t\tvalue=\"Login\" id=\"submit\" />\n\t\t</form>\n\t</article>\n\n</body>\n</html>", "<%@page import=\"models.RegisterUserModel\"%>\n<%@page import=\"models.Account\"%>\n<%@ page language=\"java\" contentType=\"text/html; charset=ISO-8859-1\"\n\tpageEncoding=\"ISO-8859-1\"%>\n<!DOCTYPE html>\n<html>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=ISO-8859-1\">\n<title>Voyager &#124; Register</title>\n<link rel=\"stylesheet\" href=\"${pageContext.request.contextPath}/resources/main.css\">\n<link href='http://fonts.googleapis.com/css?family=Open+Sans' rel='stylesheet' type='text/css'>\n</head>\n<body>\n<% Account current = (request.getAttribute(\"attemptedAccount\") == null) ? new Account() : (Account)request.getAttribute(\"attemptedAccount\"); %>\n\n\t<header>\n\t\t<nav>\n\t\t\t<ul>\n\t\t\t\t<li>Home</li> &bull;\n\t\t\t\t<li>Profile</li> &bull;\n\t\t\t\t<li>Submit</li> &bull;\n\t\t\t\t<li>Search</li>\n\t\t\t</ul>\n\t\t</nav>\n\t</header>\n\t<article class=\"bodyContainer\">\n\t\t<h1>Register New User</h1>\n\t\t<p><%=(request.getAttribute(\"errorMessage\") == null ? \"\" : request.getAttribute(\"errorMessage\")) %></p>\n\t\t<form method=\"post\" enctype=\"multipart/form-data\">\n\t\t\t<label>Username:</label> <input name=\"username\" type=\"text\" value=\"<%= current.getUsername() %>\"/>\n\t\t\t<label>Password:</label><input\tname=\"password\" type=\"password\" /> \n\t\t\t<label>Confirm Password:</label><input name=\"confirmPassword\" type=\"password\" />\n\t\t\t<label>Email Address:</label><input name=\"email\" type=\"email\" value=\"<%=current.getEmail() %>\"/>\n\t\t\t<label>Confirm Email:</label><input name=\"confirmEmail\" type=\"email\" />\n\t\t\t<label>Profile Image:</label><input name=\"image\" type=\"file\"/>\n\t\t\t<input type=\"submit\" value=\"Register\" id=\"submit\" />\n\t\t</form>\n\n\t</article>\n</body>\n</html>", "package Controllers;\nimport java.io.BufferedReader;\nimport java.io.IOException;\nimport java.io.InputStreamReader;\n\nimport javax.servlet.ServletException;\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\nimport javax.servlet.http.Part;\n\nimport exceptions.UsernameAlreadyExistsException;\nimport models.Account;\nimport models.DataService;\nimport models.ModelAndView;\nimport models.RegisterUserModel;\nimport models.Roles;\n\n\npublic class RegisterController {\n\t\n\tprivate DataService dataService;\n\tprivate HttpServletRequest request;\n\tprivate HttpServletResponse response;\n\tprivate String filePath;\n\t\n\tpublic RegisterController(HttpServletRequest request, HttpServletResponse response, DataService dataService, String filePath) {\n\t\tthis.request = request;\n\t\tthis.response = response;\n\t\tthis.dataService = dataService;\n\t\tthis.filePath = filePath;\n\t}\n\t\n\tpublic ModelAndView commitUserRegisterUser() {\n\t\tString username = \"\";\n\t\tString password = \"\";\n\t\tString confirmPassword = \"\";\n\t\tString email = \"\";\n\t\tString confirmEmail = \"\";\n\t\tString avatarPath = \"\";\n\t\ttry{\n\t\t\tusername = this.getValue(request.getPart(\"username\"));\n\t\t\tpassword = this.getValue(request.getPart(\"password\"));\n\t\t\tconfirmPassword = this.getValue(request.getPart(\"confirmPassword\"));\n\t\t\temail = this.getValue(request.getPart(\"email\"));\n\t\t\tconfirmEmail = this.getValue(request.getPart(\"confirmEmail\"));\n\t\t\tavatarPath = FileUploadController.getFileName(request.getPart(\"image\"));\n\t\t} catch (ServletException e1) {\n\t\t\te1.printStackTrace();\n\t\t} catch (IOException e1) {\n\t\t\te1.printStackTrace();\n\t\t}\n\t\t\n\t\t\n\t\tRegisterUserModel model = new RegisterUserModel();\n\t\tModelAndView mv = null;\n\t\t\n\t\tif(!password.equals(confirmPassword)) {\n\t\t\trequest.setAttribute(\"attemptedAccount\", new Account(username, email, avatarPath, Roles.User, password));\n\t\t\tmv = new ModelAndView(\"Passwords did not match\", \"/WEB-INF/register.jsp\");\n\t\t}\n\t\tif(!email.equals(confirmEmail)){\n\t\t\trequest.setAttribute(\"attemptedAccount\", new Account(username, email, avatarPath, Roles.User, password));\n\t\t\tmv = new ModelAndView(\"Emails did not match. \", \"/WEB-INF/register.jsp\");\n\t\t}\n\t\ttry {\n\t\t\tAccount user = new Account(username, email, avatarPath, Roles.User, password);\n\t\t\tdataService.registerUser(user);\n\t\t\tFileUploadController.processRequest(request, response, filePath);\n\t\t\tmodel.setUser(user);\n\t\t\tmv = new ModelAndView(model, \"/WEB-INF/account/profile.jsp\");\n\t\t} catch(UsernameAlreadyExistsException e) {\n\t\t\trequest.setAttribute(\"attemptedAccount\", new Account(username, email, avatarPath, Roles.User, password));\n\t\t\tmv = new ModelAndView(\"Username has already been used.\", \"/WEB-INF/register.jsp\");\n\t\t} catch (ServletException e) {\n\t\t\te.printStackTrace();\n\t\t} catch (IOException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t\t\n\t\treturn mv;\n\t}\n\t\n\tprivate String getValue(Part part) throws IOException {\n\t    BufferedReader reader = new BufferedReader(new InputStreamReader(part.getInputStream(), \"UTF-8\"));\n\t    StringBuilder value = new StringBuilder();\n\t    char[] buffer = new char[1024];\n\t    for (int length = 0; (length = reader.read(buffer)) > 0;) {\n\t        value.append(buffer, 0, length);\n\t    }\n\t    return value.toString();\n\t}\n}\n", "package models;\n\nimport java.sql.Connection;\nimport java.sql.Driver;\nimport java.sql.PreparedStatement;\nimport java.sql.ResultSet;\nimport java.sql.SQLException;\nimport java.util.Properties;\n\nimport com.microsoft.sqlserver.jdbc.SQLServerDriver;\n\nimport exceptions.BadLoginException;\nimport exceptions.UsernameAlreadyExistsException;\n\n\npublic class DatabaseAccess implements DataService {\n\n\tprivate final String connectionUrl = \"jdbc:sqlserver://n8bu1j6855.database.windows.net:1433;database=VoyagerDB;user=VoyageLogin@n8bu1j6855;password={GroupP@ssword};encrypt=true;hostNameInCertificate=*.database.windows.net;loginTimeout=30;\";\n\t/* (non-Javadoc)\n\t * @see models.DataService#login(java.lang.String, java.lang.String)\n\t */\n\t@Override\n\tpublic Account login(String username, String password){\n\t\tAccount account = null;\n\t\tDriver driver = new SQLServerDriver();\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Select userName, userPassword, userEmail, userRole from UserTable where userName = ?\");\n\t\t\tstatement.setString(1, username);\n\t\t\tResultSet rs = statement.executeQuery();\n\t\t\trs.next();\n\t\t\tString storedPass = rs.getString(\"userPassword\");\n\t\t\tif(storedPass.equals(password)){\n\t\t\t\tSystem.out.println(\"Successfully logged in\");\n\t\t\t\taccount = new Account(rs.getString(\"userName\"), rs.getString(\"userEmail\"), \"\", Roles.valueOf(rs.getString(\"userRole\")), rs.getString(\"userPassword\"));\n\t\t\t}\n\t\t\telse{\n\t\t\t\tthrow new BadLoginException(\"The username/password combination is incorrect\");\n\t\t\t}\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t\tif(e.getMessage().contains(\"result set has no current row\")){\n\t\t\t\tthrow new BadLoginException(\"The username/password combination is incorrect\");\n\t\t\t}\n\t\t}\t\n\t\t\n\t\treturn account;\n\t}\n\t\n\t//Bind variables\n\t\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#registerUser(models.Account)\n\t */\n\t@Override\n\tpublic void registerUser(Account user){\n\t\tDriver driver = new SQLServerDriver();\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Insert INTO UserTable (userName, userPassword, userEmail, userRole) \"\n\t\t\t\t\t+ \"VALUES (?, ?, ?, ?);\");\n\t\t\tstatement.setString(1, user.getUsername());\n\t\t\tstatement.setString(2, user.getPassword());\n\t\t\tstatement.setString(3, user.getEmail());\n\t\t\tstatement.setString(4, user.getRole().toString());\n\t\t\tstatement.execute();\n\t\t\tSystem.out.println(\"Registration Successful\");\n\t\t} catch (SQLException e) {\n\t\t\tif(e.getMessage().contains(\"UNIQUE KEY\")){\n\t\t\t\tSystem.err.println(\"User has already been registered.\");\n\t\t\t\tthrow new UsernameAlreadyExistsException();\n\t\t\t}\n\t\t\telse{\n\t\t\t\te.printStackTrace();\n\t\t\t}\n\t\t}\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#removeUser(models.Account)\n\t */\n\t@Override\n\tpublic void removeUser(Account user){\n\t\tDriver driver = new SQLServerDriver();\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"DELETE FROM UserTable WHERE userName=?\");\n\t\t\tstatement.setString(1, user.getUsername());\n\t\t\tstatement.execute();\n\t\t\tSystem.out.println(\"Removal sucessful\");\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#updateUser(models.Account)\n\t */\n\t@Override\n\tpublic void updateUser(Account user){\n\t\tDriver driver = new SQLServerDriver();\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"UPDATE UserTable \"\n\t\t\t\t\t+ \"SET userPassword=?, userEmail=?, userRole=?\"\n\t\t\t\t\t+ \"WHERE userName=?\");\n\t\t\tstatement.setString(1, user.getPassword());\n\t\t\tstatement.setString(2, user.getEmail());\n\t\t\tstatement.setString(3, user.getRole().toString());\n\t\t\tstatement.setString(4, user.getUsername());\n\t\t\tstatement.execute();\n\t\t\tSystem.out.println(\"Update successful\");\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#getUserId(java.lang.String)\n\t */\n\t@Override\n\tpublic int getUserId(String user){\n\t\tint id = -1;\n\t\tDriver driver = new SQLServerDriver();\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Select userId from UserTable where userName = ?\");\n\t\t\tstatement.setString(1, user);\n\t\t\tResultSet rs = statement.executeQuery();\n\t\t\trs.next();\n\t\t\tString storedId = rs.getString(\"userId\");\n\t\t\tid = Integer.parseInt(storedId);\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t\treturn id;\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#getUserName(int)\n\t */\n\t@Override\n\tpublic String getUserName(int userId){\n\t\tString userName = null;\n\t\tDriver driver = new SQLServerDriver();\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Select userName from UserTable where userId = ?\");\n\t\t\tstatement.setInt(1, userId);\n\t\t\tResultSet rs = statement.executeQuery();\n\t\t\trs.next();\n\t\t\tuserName = rs.getString(\"userName\");\n\t\t\t\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t\t\n\t\treturn userName;\n\t}\n\t\n\t/* (non-Javadoc)\n\t * @see models.DataService#enterPost(models.Post)\n\t */\n\t@Override\n\tpublic void enterPost(Post post){\n\t\tDriver driver = new SQLServerDriver();\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Insert INTO PostTable (postTitle, postAuthorId, postTime, postContent) \"\n\t\t\t\t\t+ \"VALUES ('\" + post.getTitle() + \"', '\" + this.getUserId(post.getAuthor()) + \"', CURRENT_TIMESTAMP, '\" + post.getMessage() + \"');\");\n\t\t\tstatement.setString(1, post.getTitle());\n\t\t\tstatement.setInt(2, this.getUserId(post.getAuthor()));\n\t\t\tstatement.setString(3, post.getMessage());\n\t\t\tstatement.execute();\n\t\t\tSystem.out.println(\"Successful post\");\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t}\n\n\t/* (non-Javadoc)\n\t * @see models.DataService#retrievePost(java.lang.String)\n\t */\n\t@Override\n\tpublic Post retrievePost(String postTitle){\n\t\tPost post = null;\n\t\tDriver driver = new SQLServerDriver();\n\t\ttry {\n\t\t\tConnection con = driver.connect(connectionUrl, new Properties());\n\t\t\tPreparedStatement statement = con.prepareStatement(\"Select postTitle, postAuthorId, postTime, postContent from PostTable where postTitle = '\" + postTitle + \"'\");\n\t\t\tResultSet rs = statement.executeQuery();\n\t\t\trs.next();\n\t\t\tpost = new Post(rs.getString(\"postTitle\"), rs.getString(\"postContent\"), this.getUserName(rs.getInt(\"postAuthorId\")));\n\n\t\t} catch (SQLException e) {\n\t\t\te.printStackTrace();\n\t\t}\t\n\t\t\n\t\treturn post;\n\t}\n}\n"], "filenames": ["Voyager/WebContent/WEB-INF/account/login.jsp", "Voyager/WebContent/WEB-INF/register.jsp", "Voyager/src/Controllers/RegisterController.java", "Voyager/src/models/DatabaseAccess.java"], "buggy_code_start_loc": [29, 28, 58, 17], "buggy_code_end_loc": [35, 29, 77, 182], "fixing_code_start_loc": [28, 28, 57, 18], "fixing_code_end_loc": [36, 29, 74, 188], "type": "CWE-89", "message": "A vulnerability was found in Nayshlok Voyager. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file Voyager/src/models/DatabaseAccess.java. The manipulation leads to sql injection. The name of the patch is f1249f438cd8c39e7ef2f6c8f2ab76b239a02fae. It is recommended to apply a patch to fix this issue. The identifier VDB-218005 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2014-125074", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-11T15:15:08.877", "lastModified": "2023-01-19T14:41:35.320", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in Nayshlok Voyager. It has been declared as critical. Affected by this vulnerability is an unknown functionality of the file Voyager/src/models/DatabaseAccess.java. The manipulation leads to sql injection. The name of the patch is f1249f438cd8c39e7ef2f6c8f2ab76b239a02fae. It is recommended to apply a patch to fix this issue. The identifier VDB-218005 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:voyager_project:voyager:*:*:*:*:*:*:*:*", "versionEndExcluding": "2014-11-17", "matchCriteriaId": "1A3A3242-2A83-450E-B367-B1F1D642CB20"}]}]}], "references": [{"url": "https://github.com/Nayshlok/Voyager/commit/f1249f438cd8c39e7ef2f6c8f2ab76b239a02fae", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218005", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218005", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Nayshlok/Voyager/commit/f1249f438cd8c39e7ef2f6c8f2ab76b239a02fae"}}