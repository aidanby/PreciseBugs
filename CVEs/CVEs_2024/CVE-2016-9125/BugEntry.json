{"buggy_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/OA/Dal.php';\nrequire_once MAX_PATH . '/lib/OA/Permission.php';\nrequire_once MAX_PATH . '/lib/OA/Permission/User.php';\nrequire_once MAX_PATH . '/lib/OA/Admin/Template.php';\nrequire_once LIB_PATH . '/Extension/authentication/authentication.php';\n\n/**\n * A class to deal with user authentication\n *\n */\nclass OA_Auth\n{\n    /**\n     * Returns authentication plugin\n     *\n     * @static\n     * @param string $authType\n     * @return Plugins_Authentication\n     */\n    static function staticGetAuthPlugin()\n    {\n        static $authPlugin;\n        static $authPluginType;\n\n        if (!isset($authPlugin) || $authPluginType != $authType) {\n            $aConf = $GLOBALS['_MAX']['CONF'];\n            if (!empty($aConf['authentication']['type'])) {\n                $authType = $aConf['authentication']['type'];\n                $authPlugin = OX_Component::factoryByComponentIdentifier($authType);\n            }\n            if (!$authPlugin) {\n                // Fall back to internal\n                $authType = 'none';\n                $authPlugin = new Plugins_Authentication();\n            }\n            if (!$authPlugin) {\n                OA::debug('Error while including authentication plugin and unable to fallback', PEAR_LOG_ERR);\n            }\n            $authPluginType = $authType;\n        }\n        return $authPlugin;\n    }\n\n    /**\n     * Logs in an user\n     *\n     * @static\n     *\n     * @param callback $redirectCallback\n     * @return mixed Array on success\n     */\n    function login($redirectCallback = null)\n    {\n        $aConf = $GLOBALS['_MAX']['CONF'];\n\n        if (!is_callable($redirectCallback)) {\n            // Set the default callback\n            $redirectCallback = array('OA_Auth', 'checkRedirect');\n        }\n\n        if (call_user_func($redirectCallback)) {\n            header('location: http://'.$aConf['webpath']['admin']);\n            exit();\n        }\n\n        if (defined('OA_SKIP_LOGIN')) {\n            return OA_Auth::getFakeSessionData();\n        }\n\n        if (OA_Auth::suppliedCredentials()) {\n            $doUser = OA_Auth::authenticateUser();\n\n            if (!$doUser) {\n                OA_Auth::restart($GLOBALS['strUsernameOrPasswordWrong']);\n            }\n\n            return OA_Auth::getSessionData($doUser);\n        }\n\n        OA_Auth::restart();\n    }\n\n    /**\n     * A method to logout and redirect to the correct URL\n     *\n     * @static\n     *\n     * @todo Fix when preferences are ready and logout url is stored into the\n     * preferences table\n     */\n    function logout()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        $authPlugin->logout();\n    }\n\n    /**\n     * A method to check if the login credential were supplied as POST parameters\n     *\n     * @static\n     *\n     * @return bool\n     */\n    function suppliedCredentials()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        return $authPlugin->suppliedCredentials();\n    }\n\n    /**\n     * A method to authenticate user\n     *\n     * @static\n     *\n     * @return bool\n     */\n    function authenticateUser()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        $doUsers = $authPlugin->authenticateUser();\n        if ($doUsers) {\n            // never upgrade the username\n            $tmpUserName = $doUsers->username;\n            unset($doUsers->username);\n            $doUsers->logDateLastLogIn();\n            $doUsers->username = $tmpUserName;\n        }\n        return $doUsers;\n    }\n\n    /**\n     * A method to test if the user is logged in\n     *\n     * @return boolean\n     */\n    function isLoggedIn()\n    {\n        return is_a(OA_Permission::getCurrentUser(), 'OA_Permission_User');\n    }\n\n    /**\n     * A static method to return the data to be stored in the session variable\n     *\n     * @static\n     *\n     * @param DataObjects_Users $doUser\n     * @param bool $skipDatabaseAccess True if the OA_Permission_User constructor should\n     *                                 avoid performing some checks accessing the database\n     * @return array\n     */\n    function getSessionData($doUser, $skipDatabaseAccess = false)\n    {\n        return array(\n            'user' => new OA_Permission_User($doUser, $skipDatabaseAccess)\n        );\n    }\n\n    /**\n     * A static method to return fake data to be stored in the session variable\n     *\n     * @static\n     *\n     * @return array\n     */\n    function getFakeSessionData()\n    {\n        return array(\n            'user' => false\n        );\n    }\n\n    /**\n     * A static method to restart with a login screen, eventually displaying a custom message\n     *\n     * @static\n     *\n     * @param string $sMessage Optional message\n     */\n    function restart($sMessage = '')\n    {\n        $_COOKIE['sessionID'] = phpAds_SessionStart();\n        OA_Auth::displayLogin($sMessage, $_COOKIE['sessionID']);\n    }\n\n    /**\n     * A static method to restart with a login screen, displaying an error message\n     *\n     * @static\n     *\n     * @param PEAR_Error $oError\n     */\n    function displayError($oError)\n    {\n        OA_Auth::restart($oError->getMessage());\n    }\n\n    /**\n     * A static method to display a login screen\n     *\n     * @static\n     *\n     * @param string $sMessage\n     * @param string $sessionID\n     * @param bool $inlineLogin\n     */\n    function displayLogin($sMessage = '', $sessionID = 0, $inLineLogin = false)\n    {\n        $authLogin = OA_Auth::staticGetAuthPlugin();\n        $authLogin->displayLogin($sMessage, $sessionID, $inLineLogin);\n    }\n\n    /**\n     * Check if application is running from appropriate dir\n     *\n     * @static\n     *\n     * @param string $location\n     * @return boolean True if a redirect is needed\n     */\n    function checkRedirect($location = 'admin')\n    {\n        $aConf = $GLOBALS['_MAX']['CONF'];\n\n        $redirect = false;\n        // Is it possible to detect that we are NOT in the admin directory\n        // via the URL the user is accessing OpenXwith?\n        if (!preg_match('#/'. $location .'/?$#', $_SERVER['REQUEST_URI'])) {\n            $dirName = dirname($_SERVER['REQUEST_URI']);\n            // This check now allows for files in plugin folders\n            $pluginDirName = basename($aConf['pluginPaths'][$location]);\n            if (!preg_match(\"#/{$location}(/{$pluginDirName}/.*?)?/?$#\", $dirName)) {\n                // The user is not in the \"admin\" folder directly. Are they\n                // in the admin folder as a result of a \"full\" virtual host\n                // configuration?\n                if ($aConf['webpath']['admin'] != OX_getHostName()) {\n                    // Not a \"full\" virtual host setup, so re-direct\n                    $redirect = true;\n                }\n            }\n        }\n\n        return $redirect;\n    }\n\n}\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/OA/Auth.php';\n\n/**\n * A class to deal with login and auto-login features during install/upgrade\n */\nclass OA_Upgrade_Login\n{\n    /**\n     * Check administrator login during the upgrade steps\n     *\n     * @return boolean True if login succeded\n     */\n    function checkLogin()\n    {\n        // Clean up session\n        $GLOBALS['session'] = array();\n\n        // Detection needs to happen every time to make sure that database parameters are\n        $oUpgrader = new OA_Upgrade();\n        $openadsDetected = $oUpgrader->detectOpenads(true) ||\n            $oUpgrader->existing_installation_status == OA_STATUS_CURRENT_VERSION;\n\n        // Sequentially check, to avoid useless work\n        if (!$openadsDetected) {\n            if (!($panDetected = $oUpgrader->detectPAN(true))) {\n                if (!($maxDetected = $oUpgrader->detectMAX(true))) {\n                    if (!($max01Detected = $oUpgrader->detectMAX01(true))) {\n                        // No upgrade-able version detected, return\n                        return false;\n                    }\n                }\n            }\n        }\n\n        phpAds_SessionStart();\n\n        OA_Upgrade_Login::readSession($panDetected);\n\n        $oPlugin = new Plugins_Authentication();\n\n        if ($oPlugin->suppliedCredentials()) {\n            // The new Users, Account, Permissions & Preference feature was introduced in OpenX 2.5.46-dev\n            $newLogin = $openadsDetected && version_compare($oUpgrader->versionInitialApplication, '2.5.46-dev', '>=') == -1;\n\n            if ($newLogin) {\n                OA_Upgrade_Login::_checkLoginNew();\n            } else {\n                if ($openadsDetected || $maxDetected) {\n                    OA_Upgrade_Login::_checkLoginOld('preference', true);\n                } elseif ($max01Detected) {\n                    OA_Upgrade_Login::_checkLoginOld('config', true);\n                } elseif ($panDetected) {\n                    OA_Upgrade_Login::_checkLoginOld('config', false);\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return OA_Permission::isAccount(OA_ACCOUNT_ADMIN) || OA_Permission::isUserLinkedToAdmin();\n    }\n\n    function autoLogin()\n    {\n        $oPlugin = OA_Auth::staticGetAuthPlugin();\n\n        phpAds_SessionStart();\n\n        // No auto-login if auth is external\n        if (empty($oPlugin) || (get_class($oPlugin) != 'Plugins_Authentication')) {\n            phpAds_SessionDataDestroy();\n            return;\n        }\n\n        $adminAccountId = OA_Dal_ApplicationVariables::get('admin_account_id');\n        if (isset($adminAccountId)) {\n            // Fetch the user linked to the admin account\n            $doUser = OA_Dal::factoryDO('users');\n            $doAUA = OA_Dal::factoryDO('account_user_assoc');\n            $doAUA->account_id = $adminAccountId;\n            $doUser->joinAdd($doAUA);\n            $doUser->find();\n            if ($doUser->fetch()) {\n                phpAds_SessionDataRegister(OA_Auth::getSessionData($doUser));\n                phpAds_SessionDataStore();\n            }\n        }\n    }\n\n    function _checkLoginNew()\n    {\n        $oPlugin = new Plugins_Authentication();\n\n        $aCredentials = $oPlugin->_getCredentials(false);\n\n        if (!PEAR::isError($aCredentials)) {\n            $doUser = $oPlugin->checkPassword($aCredentials['username'], $aCredentials['password']);\n\n            if ($doUser) {\n                phpAds_SessionDataRegister(OA_Auth::getSessionData($doUser));\n            }\n        }\n\n        phpAds_SessionDataStore();\n    }\n\n    function _checkLoginOld($tableName, $agencySupport)\n    {\n        if (!isset($_COOKIE['sessionID'])) {\n            return new PEAR_Error($GLOBALS['strEnableCookies']);\n        }\n\n        $prefix = $GLOBALS['_MAX']['CONF']['table']['prefix'];\n\n        $oDbh = OA_DB::singleton();\n        if (!PEAR::isError($oDbh)) {\n            $tblPreferences = $oDbh->quoteIdentifier($prefix.$tableName, true);\n\n            $query = \"SELECT admin, admin_pw FROM {$tblPreferences}\";\n\n            if ($agencySupport) {\n                $query .= \" WHERE agencyid = 0\";\n            }\n            $aPref = $oDbh->queryRow($query, null, MDB2_FETCHMODE_ASSOC);\n\n            if (is_array($aPref)) {\n                $oPlugin = OA_Auth::staticGetAuthPlugin('internal');\n                $aCredentials = $oPlugin->_getCredentials(false);\n\n                if (!PEAR::isError($aCredentials)) {\n                    if (strtolower($aPref['admin']) == strtolower($aCredentials['username']) &&\n                        $aPref['admin_pw'] == md5($aCredentials['password']))\n                    {\n                        $doUser = OA_Dal::factoryDO('users');\n                        $doUser->username = $aPref['admin'];\n\n                        $aSession = OA_Auth::getSessionData($doUser, true);\n                        $aSession['user']->aAccount['account_type'] = OA_ACCOUNT_ADMIN;\n\n                        phpAds_SessionDataRegister($aSession);\n                    }\n                }\n            }\n\n            // Openads for PostgreSQL 2.0 session.last_used field is a\n            // timestamp with timezone, which gives troubles reading back\n            // session data if TZ offset is > 0\n            if ($tableName == 'config' && $oDbh->dbsyntax == 'pgsql') {\n                // Make sure that session time is loaded as UTC\n                $oDbh->exec(\"SET TIMEZONE TO 'UTC'\");\n                phpAds_SessionDataStore();\n                $oDbh->exec(\"SET TIMEZONE TO DEFAULT\");\n                return;\n            }\n\n            phpAds_SessionDataStore();\n        }\n    }\n\n    function readSession($panDetected)\n    {\n        // Openads for PostgreSQL 2.0 session.last_used field is a\n        // timestamp with timezone, which gives troubles reading back\n        // session data if TZ offset is > 0\n        if ($panDetected) {\n            $oDbh = OA_DB::singleton();\n            if (!PEAR::isError($oDbh)) {\n                if ($oDbh->dbsyntax == 'pgsql') {\n                    // Make sure that session time is loaded as UTC\n                    $oDbh->exec(\"SET TIMEZONE TO 'UTC'\");\n                    phpAds_SessionDataFetch();\n                    $oDbh->exec(\"SET TIMEZONE TO DEFAULT\");\n                    return;\n                }\n            }\n        }\n\n        phpAds_SessionDataFetch();\n    }\n}\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/max/Dal/Common.php';\n\n/**\n * A data access layer for storing and retrieving persistent Web sessions.\n *\n * @todo Factor out the repetitive \"session_table_name\" calculation\n */\nclass MAX_Dal_Admin_Session extends MAX_Dal_Common\n{\n    var $table = 'session';\n\n\t/**\n     * @param string $session_id\n     * @return string A serialized array (probably)\n     *\n     * @todo Consider raise an error when no session is found.\n     */\n    function getSerializedSession($session_id)\n    {\n        $doSession = OA_Dal::staticGetDO('session', $session_id);\n        if ($doSession) {\n            // Deal with MySQL 4.0 timestamp format (YYYYMMDDHHIISS)\n            if (preg_match('/^(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)$/', $doSession->lastused, $m)) {\n                $doSession->lastused = \"{$m[1]}-{$m[2]}-{$m[3]} {$m[4]}:{$m[5]}:{$m[6]}\";\n            }\n            // Deal with PgSQL timestamp with timezone\n            if (preg_match('/^(\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d)./', $doSession->lastused, $m)) {\n                $doSession->lastused = $m[1];\n            }\n            $timeNow = strtotime(OA::getNowUTC());\n            $timeLastUsed = strtotime($doSession->lastused);\n            if ($timeNow - $timeLastUsed < 3600) {\n                return $doSession->sessiondata;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Reset \"last used\" timestamp on a session to prevent it from timing out.\n     *\n     * @param string $session_id\n     * @return void\n     */\n    function refreshSession($session_id)\n    {\n        $doSession = OA_Dal::staticGetDO('session', $session_id);\n        if ($doSession) {\n            $doSession->lastused = OA::getNowUTC();\n            $doSession->update();\n        }\n    }\n\n    /**\n     * @param string $serialized_session_data\n     * @param string $session_id\n     *\n     * @todo Use ANSI SQL syntax, such as an UPDATE/INSERT cycle.\n     * @todo Push down REPLACE INTO into a MySQL-specific DAL.\n     */\n    function storeSerializedSession($serialized_session_data, $session_id)\n    {\n        $doSession = OA_Dal::staticGetDO('session', $session_id);\n        if ($doSession) {\n            $doSession->sessiondata = $serialized_session_data;\n            $doSession->update();\n        }\n        else {\n            $doSession = OA_Dal::factoryDO('session');\n            $doSession->sessionid = $session_id;\n            $doSession->sessiondata = $serialized_session_data;\n            $doSession->insert();\n        }\n    }\n\n    /**\n     * Remove many unused sessions from storage.\n     *\n     * @todo Use ANSI SQL syntax, such as NOW() + INTERVAL '12' HOUR\n     */\n    function pruneOldSessions()\n    {\n        $tableS = $this->oDbh->quoteIdentifier( $this->getTablePrefix().'session',true);\n        $query = \"\n                DELETE FROM {$tableS}\n                WHERE\n                    UNIX_TIMESTAMP('\". OA::getNowUTC() .\"') - UNIX_TIMESTAMP(lastused) > 43200\n                \";\n        $this->oDbh->query($query);\n    }\n\n    /**\n     * Remove a specific session from storage.\n     */\n    function deleteSession($session_id)\n    {\n        $doSession = OA_Dal::staticGetDO('session', $session_id);\n        if ($doSession) {\n            $doSession->delete();\n        }\n    }\n\n}\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n// Required files\nrequire_once MAX_PATH . '/lib/max/other/lib-io.inc.php';\n\nif(!isset($GLOBALS['_MAX']['FILES']['/lib/max/Delivery/cookie.php'])) {\n    // Required by PHP5.1.2\n    require_once MAX_PATH . '/lib/max/Delivery/cookie.php';\n}\nrequire_once MAX_PATH . '/lib/max/Dal/Admin/Session.php';\n\n/**\n * Fetch sessiondata from the database\n *\n * This implementation uses the $_COOKIE superglobal to find session identifier.\n * @return void\n *\n * @todo Move to a domain-layer class library.\n */\nfunction phpAds_SessionDataFetch()\n{\n    global $session;\n    $dal = new MAX_Dal_Admin_Session();\n\n    // Guard clause: Can't fetch a session without an ID\n\tif (empty($_COOKIE['sessionID'])) {\n        return;\n    }\n\n    $serialized_session = $dal->getSerializedSession($_COOKIE['sessionID']);\n\n    // This is required because 'sessionID' cookie is set to new during logout.\n    // According to comments in the file it is because some servers do not\n    // support setting cookies during redirect.\n    if (empty($serialized_session)) {\n        return;\n    }\n\n    $loaded_session = unserialize($serialized_session);\n\tif (!$loaded_session) {\n        // XXX: Consider raising an error\n        return;\n    }\n\t$session = $loaded_session;\n    $dal->refreshSession($_COOKIE['sessionID']);\n}\n\n/*-------------------------------------------------------*/\n/* Sets an admin cookie                                  */\n/*-------------------------------------------------------*/\n\nfunction phpAds_SessionSetAdminCookie($name, $value)\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n\n    return setcookie(\n        $name,\n        $value,\n        0,\n        dirname($_SERVER[\"SCRIPT_NAME\"]),\n        empty($_SERVER['HTTP_HOST']) ? null : preg_replace('#:\\d+$#', '', $_SERVER['HTTP_HOST']),\n        !empty($conf['openads']['requireSSL']),\n        true\n    );\n}\n\n/*-------------------------------------------------------*/\n/* Create a new sessionid                                */\n/*-------------------------------------------------------*/\n\nfunction phpAds_SessionStart()\n{\n\tglobal $session;\n\tif (empty($_COOKIE['sessionID'])) {\n\t\t$session = array();\n\t\t$_COOKIE['sessionID'] = md5(uniqid('phpads', 1));\n\n        phpAds_SessionSetAdminCookie('sessionID', $_COOKIE['sessionID']);\n\t}\n\treturn $_COOKIE['sessionID'];\n}\n\n/*-------------------------------------------------------*/\n/* Register the data in the session array                */\n/*-------------------------------------------------------*/\n\nfunction phpAds_SessionDataRegister($key, $value='')\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n\tglobal $session;\n    //if ($conf['openads']['installed'])\n    if (OA_INSTALLATION_STATUS == OA_INSTALLATION_STATUS_INSTALLED)\n    {\n\t\tphpAds_SessionStart();\n\t}\n\tif (is_array($key) && $value=='') {\n\t\tforeach (array_keys($key) as $name) {\n\t\t\t$session[$name] = $key[$name];\n\t\t}\n\t} else {\n\t\t$session[$key] = $value;\n\t}\n    //if ($conf['openads']['installed'])\n    if (OA_INSTALLATION_STATUS == OA_INSTALLATION_STATUS_INSTALLED)\n    {\n\t   phpAds_SessionDataStore();\n\t}\n}\n\n/**\n * Store the session array in the database\n */\nfunction phpAds_SessionDataStore()\n{\n    global $session;\n\n    $dal = new MAX_Dal_Admin_Session();\n\n    if (isset($_COOKIE['sessionID']) && $_COOKIE['sessionID'] != '') {\n        $session_id = $_COOKIE['sessionID'];\n        $serialized_session_data = serialize($session);\n        $dal->storeSerializedSession($serialized_session_data, $session_id);\n    }\n\n    // Garbage collect old sessions, 1 out of 100 requests, roughly\n    if (mt_rand(1, 100) == 42) {\n        $dal->pruneOldSessions();\n    }\n}\n\n\n/**\n * Destroy the current session\n *\n * @todo Determine how much of these steps are unnecessary, and remove them.\n */\nfunction phpAds_SessionDataDestroy()\n{\n    $dal = new MAX_Dal_Admin_Session();\n\n\tglobal $session;\n    $dal->deleteSession($_COOKIE['sessionID']);\n\n    phpAds_SessionSetAdminCookie('sessionID', '');\n\n\tunset($session);\n\tunset($_COOKIE['sessionID']);\n}\n\nfunction phpAds_SessionGetToken()\n{\n    if (OA_INSTALLATION_STATUS != OA_INSTALLATION_STATUS_INSTALLED) {\n        return false;\n    }\n    global $session;\n    phpAds_SessionStart();\n    if (empty($session['token'])) {\n        $session['token'] = md5(uniqid('phpads', 1));\n        phpAds_SessionDataStore();\n    }\n    return $session['token'];\n}\n\nfunction phpAds_SessionValidateToken($token)\n{\n    static $result;\n\n    if (!isset($result)) {\n        $result = ($token === phpAds_SessionGetToken());\n        phpAds_SessionDataRegister('token', null);\n    }\n    return $result;\n}\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * @package    OpenX\n */\n\n// Require the base class, BaseLogonService.\nrequire_once MAX_PATH . '/www/api/v1/common/BaseServiceImpl.php';\n\n/**\n * The LogonServiceImpl class extends the BaseServiceImp class.\n *\n */\nclass LogonServiceImpl extends BaseServiceImpl\n{\n\n    /**\n     * The LogonServiceImpl constructor calls the base constructor for the class.\n     *\n     */\n    function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Login to OpenX without using the login form in the user interface and\n     * receive a session ID.\n     *\n     * @access private\n     *\n     * @param string $username\n     * @param string $password\n     *\n     * @return boolean\n     */\n    function _internalLogin($username, $password)\n    {\n        // Require the default language file.\n        include_once MAX_PATH . '/lib/max/language/Loader.php';\n        // Load the required language file.\n        Language_Loader::load('default');\n\n        $oPlugin = OA_Auth::staticGetAuthPlugin();\n\n        $doUser = $oPlugin->checkPassword($username, $password);\n        if ($doUser) {\n            phpAds_SessionDataRegister(OA_Auth::getSessionData($doUser));\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Login to the system with the session ID.\n     *\n     * @access public\n     *\n     * @param string $username\n     * @param string $password\n     * @param string &$sessionId\n     *\n     * @return boolean\n     */\n    function logon($username, $password, &$sessionId)\n    {\n        global $_POST, $_COOKIE;\n        global $strUsernameOrPasswordWrong;\n\n        /**\n         * @todo Please check if the following statement is in correct place because\n         * it seems illogical that user can get session ID from internal login with\n         * a bad username or password.\n         */\n\n        if (!$this->_verifyUsernameAndPasswordLength($username, $password)) {\n            return false;\n        }\n\n        $_POST['username'] = $username;\n        $_POST['password'] = $password;\n\n        $_POST['login'] = 'Login';\n\n        $_COOKIE['sessionID'] = uniqid('phpads', 1);\n        $_POST['phpAds_cookiecheck'] = $_COOKIE['sessionID'];\n\n        $this->preInitSession();\n        if ($this->_internalLogin($username, $password)) {\n            // Check if the user has administrator access to Openads.\n            if (OA_Permission::isUserLinkedToAdmin()) {\n\n                $this->postInitSession();\n\n                $sessionId = $_COOKIE['sessionID'];\n                return true;\n            } else {\n\n                $this->raiseError('User must be OA installation admin');\n                return false;\n            }\n        } else {\n\n            $this->raiseError($strUsernameOrPasswordWrong);\n            return false;\n        }\n    }\n\n    /**\n     * Logoff from the session.\n     *\n     * @access public\n     *\n     * @param string $sessionId\n     *\n     * @return boolean\n     */\n    function logoff($sessionId)\n    {\n        if ($this->verifySession($sessionId)) {\n\n            phpAds_SessionDataDestroy();\n            unset($GLOBALS['session']);\n\n            return !OA_Auth::isLoggedIn();\n\n        } else {\n\n            return false;\n        }\n    }\n\n\n    /**\n     * The _verifyUsernameAndPasswordLength method checks the length of the username\n     * and password and returns an error message if either of them exceeds the limit of\n     * 64 characters.\n     *\n     * @access private\n     *\n     * @param string $username\n     * @param string $password\n     *\n     * @return boolean\n     */\n    function _verifyUsernameAndPasswordLength($username, $password)\n    {\n        if (strlen($username) > 64) {\n\n            $this->raiseError('UserName greater 64 characters');\n            return false;\n\n        } elseif (strlen($password) > 64) {\n\n            $this->raiseError('Password greater 64 characters');\n            return false;\n\n        } else {\n\n            return true;\n        }\n    }\n\n}\n\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * @package    OpenX\n */\n\n// Require the base class, BaseLogonService.\nrequire_once MAX_PATH . '/www/api/v2/common/BaseServiceImpl.php';\n\n/**\n * The LogonServiceImpl class extends the BaseServiceImp class.\n *\n */\nclass LogonServiceImpl extends BaseServiceImpl\n{\n\n    /**\n     * The LogonServiceImpl constructor calls the base constructor for the class.\n     *\n     */\n    function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Login to OpenX without using the login form in the user interface and\n     * receive a session ID.\n     *\n     * @access private\n     *\n     * @param string $username\n     * @param string $password\n     *\n     * @return boolean\n     */\n    function _internalLogin($username, $password)\n    {\n        // Require the default language file.\n        include_once MAX_PATH . '/lib/max/language/Loader.php';\n        // Load the required language file.\n        Language_Loader::load('default');\n\n        $oPlugin = OA_Auth::staticGetAuthPlugin();\n\n        $doUser = $oPlugin->checkPassword($username, $password);\n        if ($doUser) {\n            phpAds_SessionDataRegister(OA_Auth::getSessionData($doUser));\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Login to the system with the session ID.\n     *\n     * @access public\n     *\n     * @param string $username\n     * @param string $password\n     * @param string &$sessionId\n     *\n     * @return boolean\n     */\n    function logon($username, $password, &$sessionId)\n    {\n        global $_POST, $_COOKIE;\n        global $strUsernameOrPasswordWrong;\n\n        /**\n         * @todo Please check if the following statement is in correct place because\n         * it seems illogical that user can get session ID from internal login with\n         * a bad username or password.\n         */\n\n        if (!$this->_verifyUsernameAndPasswordLength($username, $password)) {\n            return false;\n        }\n\n        $_POST['username'] = $username;\n        $_POST['password'] = $password;\n\n        $_POST['login'] = 'Login';\n\n        $_COOKIE['sessionID'] = uniqid('phpads', 1);\n        $_POST['phpAds_cookiecheck'] = $_COOKIE['sessionID'];\n\n        $this->preInitSession();\n        if ($this->_internalLogin($username, $password)) {\n            // Check if the user has administrator access to Openads.\n            if (OA_Permission::isUserLinkedToAdmin()) {\n\n                $this->postInitSession();\n\n                $sessionId = $_COOKIE['sessionID'];\n                return true;\n            } else {\n\n                $this->raiseError('User must be OA installation admin');\n                return false;\n            }\n        } else {\n\n            $this->raiseError($strUsernameOrPasswordWrong);\n            return false;\n        }\n    }\n\n    /**\n     * Logoff from the session.\n     *\n     * @access public\n     *\n     * @param string $sessionId\n     *\n     * @return boolean\n     */\n    function logoff($sessionId)\n    {\n        if ($this->verifySession($sessionId)) {\n\n            phpAds_SessionDataDestroy();\n            unset($GLOBALS['session']);\n\n            return !OA_Auth::isLoggedIn();\n\n        } else {\n\n            return false;\n        }\n    }\n\n\n    /**\n     * The _verifyUsernameAndPasswordLength method checks the length of the username\n     * and password and returns an error message if either of them exceeds the limit of\n     * 64 characters.\n     *\n     * @access private\n     *\n     * @param string $username\n     * @param string $password\n     *\n     * @return boolean\n     */\n    function _verifyUsernameAndPasswordLength($username, $password)\n    {\n        if (strlen($username) > 64) {\n\n            $this->raiseError('UserName greater 64 characters');\n            return false;\n\n        } elseif (strlen($password) > 64) {\n\n            $this->raiseError('Password greater 64 characters');\n            return false;\n\n        } else {\n\n            return true;\n        }\n    }\n\n}\n\n\n?>\n"], "fixing_code": ["<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/OA/Dal.php';\nrequire_once MAX_PATH . '/lib/OA/Permission.php';\nrequire_once MAX_PATH . '/lib/OA/Permission/User.php';\nrequire_once MAX_PATH . '/lib/OA/Admin/Template.php';\nrequire_once LIB_PATH . '/Extension/authentication/authentication.php';\n\n/**\n * A class to deal with user authentication\n *\n */\nclass OA_Auth\n{\n    /**\n     * Returns authentication plugin\n     *\n     * @static\n     * @param string $authType\n     * @return Plugins_Authentication\n     */\n    static function staticGetAuthPlugin()\n    {\n        static $authPlugin;\n        static $authPluginType;\n\n        if (!isset($authPlugin) || $authPluginType != $authType) {\n            $aConf = $GLOBALS['_MAX']['CONF'];\n            if (!empty($aConf['authentication']['type'])) {\n                $authType = $aConf['authentication']['type'];\n                $authPlugin = OX_Component::factoryByComponentIdentifier($authType);\n            }\n            if (!$authPlugin) {\n                // Fall back to internal\n                $authType = 'none';\n                $authPlugin = new Plugins_Authentication();\n            }\n            if (!$authPlugin) {\n                OA::debug('Error while including authentication plugin and unable to fallback', PEAR_LOG_ERR);\n            }\n            $authPluginType = $authType;\n        }\n        return $authPlugin;\n    }\n\n    /**\n     * Logs in an user\n     *\n     * @static\n     *\n     * @param callback $redirectCallback\n     * @return mixed Array on success\n     */\n    function login($redirectCallback = null)\n    {\n        $aConf = $GLOBALS['_MAX']['CONF'];\n\n        if (!is_callable($redirectCallback)) {\n            // Set the default callback\n            $redirectCallback = array('OA_Auth', 'checkRedirect');\n        }\n\n        if (call_user_func($redirectCallback)) {\n            header('location: http://'.$aConf['webpath']['admin']);\n            exit();\n        }\n\n        if (defined('OA_SKIP_LOGIN')) {\n            return OA_Auth::getFakeSessionData();\n        }\n\n        if (OA_Auth::suppliedCredentials()) {\n            $doUser = OA_Auth::authenticateUser();\n\n            if (!$doUser) {\n                OA_Auth::restart($GLOBALS['strUsernameOrPasswordWrong']);\n            }\n\n            // Regenerate session ID now\n            phpAds_SessionRegenerateId();\n\n            return OA_Auth::getSessionData($doUser);\n        }\n\n        OA_Auth::restart();\n    }\n\n    /**\n     * A method to logout and redirect to the correct URL\n     *\n     * @static\n     *\n     * @todo Fix when preferences are ready and logout url is stored into the\n     * preferences table\n     */\n    function logout()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        $authPlugin->logout();\n    }\n\n    /**\n     * A method to check if the login credential were supplied as POST parameters\n     *\n     * @static\n     *\n     * @return bool\n     */\n    function suppliedCredentials()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        return $authPlugin->suppliedCredentials();\n    }\n\n    /**\n     * A method to authenticate user\n     *\n     * @static\n     *\n     * @return bool\n     */\n    function authenticateUser()\n    {\n        $authPlugin = OA_Auth::staticGetAuthPlugin();\n        $doUsers = $authPlugin->authenticateUser();\n        if ($doUsers) {\n            // never upgrade the username\n            $tmpUserName = $doUsers->username;\n            unset($doUsers->username);\n            $doUsers->logDateLastLogIn();\n            $doUsers->username = $tmpUserName;\n        }\n        return $doUsers;\n    }\n\n    /**\n     * A method to test if the user is logged in\n     *\n     * @return boolean\n     */\n    function isLoggedIn()\n    {\n        return is_a(OA_Permission::getCurrentUser(), 'OA_Permission_User');\n    }\n\n    /**\n     * A static method to return the data to be stored in the session variable\n     *\n     * @static\n     *\n     * @param DataObjects_Users $doUser\n     * @param bool $skipDatabaseAccess True if the OA_Permission_User constructor should\n     *                                 avoid performing some checks accessing the database\n     * @return array\n     */\n    function getSessionData($doUser, $skipDatabaseAccess = false)\n    {\n        return array(\n            'user' => new OA_Permission_User($doUser, $skipDatabaseAccess)\n        );\n    }\n\n    /**\n     * A static method to return fake data to be stored in the session variable\n     *\n     * @static\n     *\n     * @return array\n     */\n    function getFakeSessionData()\n    {\n        return array(\n            'user' => false\n        );\n    }\n\n    /**\n     * A static method to restart with a login screen, eventually displaying a custom message\n     *\n     * @static\n     *\n     * @param string $sMessage Optional message\n     */\n    function restart($sMessage = '')\n    {\n        $_COOKIE['sessionID'] = phpAds_SessionRegenerateId();\n        OA_Auth::displayLogin($sMessage, $_COOKIE['sessionID']);\n    }\n\n    /**\n     * A static method to restart with a login screen, displaying an error message\n     *\n     * @static\n     *\n     * @param PEAR_Error $oError\n     */\n    function displayError($oError)\n    {\n        OA_Auth::restart($oError->getMessage());\n    }\n\n    /**\n     * A static method to display a login screen\n     *\n     * @static\n     *\n     * @param string $sMessage\n     * @param string $sessionID\n     * @param bool $inlineLogin\n     */\n    function displayLogin($sMessage = '', $sessionID = 0, $inLineLogin = false)\n    {\n        $authLogin = OA_Auth::staticGetAuthPlugin();\n        $authLogin->displayLogin($sMessage, $sessionID, $inLineLogin);\n    }\n\n    /**\n     * Check if application is running from appropriate dir\n     *\n     * @static\n     *\n     * @param string $location\n     * @return boolean True if a redirect is needed\n     */\n    function checkRedirect($location = 'admin')\n    {\n        $aConf = $GLOBALS['_MAX']['CONF'];\n\n        $redirect = false;\n        // Is it possible to detect that we are NOT in the admin directory\n        // via the URL the user is accessing OpenXwith?\n        if (!preg_match('#/'. $location .'/?$#', $_SERVER['REQUEST_URI'])) {\n            $dirName = dirname($_SERVER['REQUEST_URI']);\n            // This check now allows for files in plugin folders\n            $pluginDirName = basename($aConf['pluginPaths'][$location]);\n            if (!preg_match(\"#/{$location}(/{$pluginDirName}/.*?)?/?$#\", $dirName)) {\n                // The user is not in the \"admin\" folder directly. Are they\n                // in the admin folder as a result of a \"full\" virtual host\n                // configuration?\n                if ($aConf['webpath']['admin'] != OX_getHostName()) {\n                    // Not a \"full\" virtual host setup, so re-direct\n                    $redirect = true;\n                }\n            }\n        }\n\n        return $redirect;\n    }\n\n}\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/OA/Auth.php';\n\n/**\n * A class to deal with login and auto-login features during install/upgrade\n */\nclass OA_Upgrade_Login\n{\n    /**\n     * Check administrator login during the upgrade steps\n     *\n     * @return boolean True if login succeded\n     */\n    function checkLogin()\n    {\n        // Clean up session\n        phpAds_clearSession();\n\n        // Detection needs to happen every time to make sure that database parameters are\n        $oUpgrader = new OA_Upgrade();\n        $openadsDetected = $oUpgrader->detectOpenads(true) ||\n            $oUpgrader->existing_installation_status == OA_STATUS_CURRENT_VERSION;\n\n        // Sequentially check, to avoid useless work\n        if (!$openadsDetected) {\n            if (!($panDetected = $oUpgrader->detectPAN(true))) {\n                if (!($maxDetected = $oUpgrader->detectMAX(true))) {\n                    if (!($max01Detected = $oUpgrader->detectMAX01(true))) {\n                        // No upgrade-able version detected, return\n                        return false;\n                    }\n                }\n            }\n        }\n\n        phpAds_SessionStart();\n\n        OA_Upgrade_Login::readSession($panDetected);\n\n        $oPlugin = new Plugins_Authentication();\n\n        if ($oPlugin->suppliedCredentials()) {\n            // The new Users, Account, Permissions & Preference feature was introduced in OpenX 2.5.46-dev\n            $newLogin = $openadsDetected && version_compare($oUpgrader->versionInitialApplication, '2.5.46-dev', '>=') == -1;\n\n            if ($newLogin) {\n                OA_Upgrade_Login::_checkLoginNew();\n            } else {\n                if ($openadsDetected || $maxDetected) {\n                    OA_Upgrade_Login::_checkLoginOld('preference', true);\n                } elseif ($max01Detected) {\n                    OA_Upgrade_Login::_checkLoginOld('config', true);\n                } elseif ($panDetected) {\n                    OA_Upgrade_Login::_checkLoginOld('config', false);\n                } else {\n                    return false;\n                }\n            }\n        }\n\n        return OA_Permission::isAccount(OA_ACCOUNT_ADMIN) || OA_Permission::isUserLinkedToAdmin();\n    }\n\n    function autoLogin()\n    {\n        $oPlugin = OA_Auth::staticGetAuthPlugin();\n\n        phpAds_SessionStart();\n\n        // No auto-login if auth is external\n        if (empty($oPlugin) || (get_class($oPlugin) != 'Plugins_Authentication')) {\n            phpAds_SessionDataDestroy();\n            return;\n        }\n\n        $adminAccountId = OA_Dal_ApplicationVariables::get('admin_account_id');\n        if (isset($adminAccountId)) {\n            // Fetch the user linked to the admin account\n            $doUser = OA_Dal::factoryDO('users');\n            $doAUA = OA_Dal::factoryDO('account_user_assoc');\n            $doAUA->account_id = $adminAccountId;\n            $doUser->joinAdd($doAUA);\n            $doUser->find();\n            if ($doUser->fetch()) {\n                phpAds_SessionRegenerateId();\n                phpAds_SessionDataRegister(OA_Auth::getSessionData($doUser));\n                phpAds_SessionDataStore();\n            }\n        }\n    }\n\n    function _checkLoginNew()\n    {\n        $oPlugin = new Plugins_Authentication();\n\n        $aCredentials = $oPlugin->_getCredentials(false);\n\n        if (!PEAR::isError($aCredentials)) {\n            phpAds_SessionRegenerateId();\n\n            $doUser = $oPlugin->checkPassword($aCredentials['username'], $aCredentials['password']);\n\n            if ($doUser) {\n                phpAds_SessionDataRegister(OA_Auth::getSessionData($doUser));\n            }\n        }\n\n        phpAds_SessionDataStore();\n    }\n\n    function _checkLoginOld($tableName, $agencySupport)\n    {\n        if (!isset($_COOKIE['sessionID'])) {\n            return new PEAR_Error($GLOBALS['strEnableCookies']);\n        }\n\n        $prefix = $GLOBALS['_MAX']['CONF']['table']['prefix'];\n\n        $oDbh = OA_DB::singleton();\n        if (!PEAR::isError($oDbh)) {\n            $tblPreferences = $oDbh->quoteIdentifier($prefix.$tableName, true);\n\n            $query = \"SELECT admin, admin_pw FROM {$tblPreferences}\";\n\n            if ($agencySupport) {\n                $query .= \" WHERE agencyid = 0\";\n            }\n            $aPref = $oDbh->queryRow($query, null, MDB2_FETCHMODE_ASSOC);\n\n            if (is_array($aPref)) {\n                $oPlugin = OA_Auth::staticGetAuthPlugin('internal');\n                $aCredentials = $oPlugin->_getCredentials(false);\n\n                if (!PEAR::isError($aCredentials)) {\n                    phpAds_SessionRegenerateId();\n\n                    if (strtolower($aPref['admin']) == strtolower($aCredentials['username']) &&\n                        $aPref['admin_pw'] == md5($aCredentials['password']))\n                    {\n                        $doUser = OA_Dal::factoryDO('users');\n                        $doUser->username = $aPref['admin'];\n\n                        $aSession = OA_Auth::getSessionData($doUser, true);\n                        $aSession['user']->aAccount['account_type'] = OA_ACCOUNT_ADMIN;\n\n                        phpAds_SessionDataRegister($aSession);\n                    }\n                }\n            }\n\n            // Openads for PostgreSQL 2.0 session.last_used field is a\n            // timestamp with timezone, which gives troubles reading back\n            // session data if TZ offset is > 0\n            if ($tableName == 'config' && $oDbh->dbsyntax == 'pgsql') {\n                // Make sure that session time is loaded as UTC\n                $oDbh->exec(\"SET TIMEZONE TO 'UTC'\");\n                phpAds_SessionDataStore();\n                $oDbh->exec(\"SET TIMEZONE TO DEFAULT\");\n                return;\n            }\n\n            phpAds_SessionDataStore();\n        }\n    }\n\n    function readSession($panDetected)\n    {\n        // Openads for PostgreSQL 2.0 session.last_used field is a\n        // timestamp with timezone, which gives troubles reading back\n        // session data if TZ offset is > 0\n        if ($panDetected) {\n            $oDbh = OA_DB::singleton();\n            if (!PEAR::isError($oDbh)) {\n                if ($oDbh->dbsyntax == 'pgsql') {\n                    // Make sure that session time is loaded as UTC\n                    $oDbh->exec(\"SET TIMEZONE TO 'UTC'\");\n                    phpAds_SessionDataFetch();\n                    $oDbh->exec(\"SET TIMEZONE TO DEFAULT\");\n                    return;\n                }\n            }\n        }\n\n        phpAds_SessionDataFetch();\n    }\n}\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\nrequire_once MAX_PATH . '/lib/max/Dal/Common.php';\n\n/**\n * A data access layer for storing and retrieving persistent Web sessions.\n *\n * @todo Factor out the repetitive \"session_table_name\" calculation\n */\nclass MAX_Dal_Admin_Session extends MAX_Dal_Common\n{\n    var $table = 'session';\n\n\t/**\n     * @param string $session_id\n     * @return string A serialized array (probably)\n     *\n     * @todo Consider raise an error when no session is found.\n     */\n    function getSerializedSession($session_id)\n    {\n        $doSession = OA_Dal::staticGetDO('session', $session_id);\n        if ($doSession) {\n            // Deal with MySQL 4.0 timestamp format (YYYYMMDDHHIISS)\n            if (preg_match('/^(\\d\\d\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)(\\d\\d)$/', $doSession->lastused, $m)) {\n                $doSession->lastused = \"{$m[1]}-{$m[2]}-{$m[3]} {$m[4]}:{$m[5]}:{$m[6]}\";\n            }\n            // Deal with PgSQL timestamp with timezone\n            if (preg_match('/^(\\d\\d\\d\\d-\\d\\d-\\d\\d \\d\\d:\\d\\d:\\d\\d)./', $doSession->lastused, $m)) {\n                $doSession->lastused = $m[1];\n            }\n            $timeNow = strtotime(OA::getNowUTC());\n            $timeLastUsed = strtotime($doSession->lastused);\n            if ($timeNow - $timeLastUsed < 3600) {\n                return $doSession->sessiondata;\n            }\n        }\n        return false;\n    }\n\n    /**\n     * Reset \"last used\" timestamp on a session to prevent it from timing out.\n     *\n     * @param string $session_id\n     * @return void\n     */\n    function refreshSession($session_id)\n    {\n        $doSession = OA_Dal::staticGetDO('session', $session_id);\n        if ($doSession) {\n            $doSession->lastused = OA::getNowUTC();\n            $doSession->update();\n        }\n    }\n\n    /**\n     * @param string $serialized_session_data\n     * @param string $session_id\n     *\n     * @todo Use ANSI SQL syntax, such as an UPDATE/INSERT cycle.\n     * @todo Push down REPLACE INTO into a MySQL-specific DAL.\n     */\n    function storeSerializedSession($serialized_session_data, $session_id)\n    {\n        $doSession = OA_Dal::staticGetDO('session', $session_id);\n        if ($doSession) {\n            $doSession->sessiondata = $serialized_session_data;\n            $doSession->update();\n        } else {\n            $doSession = OA_Dal::factoryDO('session');\n            // It's an md5, so 32 chars max\n            $doSession->sessionid = substr($session_id, 0, 32);\n            $doSession->sessiondata = $serialized_session_data;\n            $doSession->insert();\n        }\n    }\n\n    /**\n     * Remove many unused sessions from storage.\n     *\n     * @todo Use ANSI SQL syntax, such as NOW() + INTERVAL '12' HOUR\n     */\n    function pruneOldSessions()\n    {\n        $tableS = $this->oDbh->quoteIdentifier( $this->getTablePrefix().'session',true);\n        $query = \"\n                DELETE FROM {$tableS}\n                WHERE\n                    UNIX_TIMESTAMP('\". OA::getNowUTC() .\"') - UNIX_TIMESTAMP(lastused) > 43200\n                \";\n        $this->oDbh->query($query);\n    }\n\n    /**\n     * Remove a specific session from storage.\n     */\n    function deleteSession($session_id)\n    {\n        $doSession = OA_Dal::staticGetDO('session', $session_id);\n        if ($doSession) {\n            $doSession->delete();\n        }\n    }\n\n}\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n// Required files\nrequire_once MAX_PATH . '/lib/max/other/lib-io.inc.php';\n\nif(!isset($GLOBALS['_MAX']['FILES']['/lib/max/Delivery/cookie.php'])) {\n    // Required by PHP5.1.2\n    require_once MAX_PATH . '/lib/max/Delivery/cookie.php';\n}\nrequire_once MAX_PATH . '/lib/max/Dal/Admin/Session.php';\n\n/**\n * Fetch sessiondata from the database\n *\n * This implementation uses the $_COOKIE superglobal to find session identifier.\n * @return void\n *\n * @todo Move to a domain-layer class library.\n */\nfunction phpAds_SessionDataFetch()\n{\n    global $session;\n\n    // Guard clause: Can't fetch a session without an ID\n    if (empty($_COOKIE['sessionID']) || !preg_match('#^[0-9a-f]{32}$#D', $_COOKIE['sessionID'])) {\n        return;\n    }\n\n    $dal = new MAX_Dal_Admin_Session();\n    $serialized_session = $dal->getSerializedSession($_COOKIE['sessionID']);\n\n    // Return if the session was not found (expired or forged)\n    if (!$serialized_session) {\n        return;\n    }\n\n    $loaded_session = unserialize($serialized_session);\n\n    // Or if it can't be unserialized and/or is not a session we started\n    if (empty($loaded_session['__authentic__'])) {\n        return;\n    }\n\n    $session = $loaded_session;\n\n    $dal->refreshSession($_COOKIE['sessionID']);\n}\n\n/*-------------------------------------------------------*/\n/* Sets an admin cookie                                  */\n/*-------------------------------------------------------*/\n\nfunction phpAds_SessionSetAdminCookie($name, $value)\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n\n    return setcookie(\n        $name,\n        $value,\n        0,\n        dirname($_SERVER[\"SCRIPT_NAME\"]),\n        empty($_SERVER['HTTP_HOST']) ? null : preg_replace('#:\\d+$#', '', $_SERVER['HTTP_HOST']),\n        !empty($conf['openads']['requireSSL']),\n        true\n    );\n}\n\n/*-------------------------------------------------------*/\n/* Start a new session                                   */\n/*-------------------------------------------------------*/\n\nfunction phpAds_SessionStart()\n{\n\tglobal $session;\n\n\tif (empty($_COOKIE['sessionID'])) {\n\t\tphpAds_clearSession();\n\n        $sessionId = phpAds_SessionGenerateId();\n\n        $dal = new MAX_Dal_Admin_Session();\n        $dal->storeSerializedSession(serialize($session), $sessionId);\n\t}\n\n\treturn $_COOKIE['sessionID'];\n}\n\n/*-------------------------------------------------------*/\n/* Generate a sessionid                                  */\n/*-------------------------------------------------------*/\n\nfunction phpAds_SessionGenerateId()\n{\n    $_COOKIE['sessionID'] = md5(uniqid('phpads', 1));\n\n    phpAds_SessionSetAdminCookie('sessionID', $_COOKIE['sessionID']);\n\n    return $_COOKIE['sessionID'];\n}\n\n/*-------------------------------------------------------*/\n/* Re-generate the sessionid                             */\n/*-------------------------------------------------------*/\n\nfunction phpAds_SessionRegenerateId()\n{\n    global $session;\n\n    $dal = new MAX_Dal_Admin_Session();\n\n    if (!empty($_COOKIE['sessionID'])) {\n        $dal->deleteSession($_COOKIE['sessionID']);\n    }\n\n    if (!empty($session['__authentic__'])) {\n        $sessionId = phpAds_SessionGenerateId();\n        $dal->storeSerializedSession(serialize($session), $sessionId);\n\n        return $sessionId;\n    }\n\n    unset($_COOKIE['sessionID']);\n\n    return phpAds_SessionStart();\n}\n\n/*-------------------------------------------------------*/\n/* Clear the session and mark it as authentic            */\n/*-------------------------------------------------------*/\n\nfunction phpAds_clearSession()\n{\n    $GLOBALS['session'] = array(\n        '__authentic__' => true,\n    );\n}\n\n/*-------------------------------------------------------*/\n/* Register the data in the session array                */\n/*-------------------------------------------------------*/\n\nfunction phpAds_SessionDataRegister($key, $value='')\n{\n    $conf = $GLOBALS['_MAX']['CONF'];\n\tglobal $session;\n    //if ($conf['openads']['installed'])\n    if (OA_INSTALLATION_STATUS == OA_INSTALLATION_STATUS_INSTALLED)\n    {\n\t\tphpAds_SessionStart();\n\t}\n\tif (is_array($key) && $value=='') {\n\t\tforeach (array_keys($key) as $name) {\n\t\t\t$session[$name] = $key[$name];\n\t\t}\n\t} else {\n\t\t$session[$key] = $value;\n\t}\n    //if ($conf['openads']['installed'])\n    if (OA_INSTALLATION_STATUS == OA_INSTALLATION_STATUS_INSTALLED)\n    {\n\t   phpAds_SessionDataStore();\n\t}\n}\n\n/**\n * Store the session array in the database\n */\nfunction phpAds_SessionDataStore()\n{\n    global $session;\n\n    $dal = new MAX_Dal_Admin_Session();\n\n    if (isset($_COOKIE['sessionID']) && $_COOKIE['sessionID'] != '') {\n        $session_id = $_COOKIE['sessionID'];\n        $serialized_session_data = serialize($session);\n        $dal->storeSerializedSession($serialized_session_data, $session_id);\n    }\n\n    // Garbage collect old sessions, 1 out of 100 requests, roughly\n    if (mt_rand(1, 100) == 42) {\n        $dal->pruneOldSessions();\n    }\n}\n\n\n/**\n * Destroy the current session\n *\n * @todo Determine how much of these steps are unnecessary, and remove them.\n */\nfunction phpAds_SessionDataDestroy()\n{\n    $dal = new MAX_Dal_Admin_Session();\n\n\tglobal $session;\n    $dal->deleteSession($_COOKIE['sessionID']);\n\n    phpAds_SessionSetAdminCookie('sessionID', '');\n\n\tunset($session);\n\tunset($_COOKIE['sessionID']);\n}\n\nfunction phpAds_SessionGetToken()\n{\n    if (OA_INSTALLATION_STATUS != OA_INSTALLATION_STATUS_INSTALLED) {\n        return false;\n    }\n    global $session;\n    phpAds_SessionStart();\n    if (empty($session['token'])) {\n        $session['token'] = md5(uniqid('phpads', 1));\n        phpAds_SessionDataStore();\n    }\n    return $session['token'];\n}\n\nfunction phpAds_SessionValidateToken($token)\n{\n    static $result;\n\n    if (!isset($result)) {\n        $result = ($token === phpAds_SessionGetToken());\n        phpAds_SessionDataRegister('token', null);\n    }\n    return $result;\n}\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * @package    OpenX\n */\n\n// Require the base class, BaseLogonService.\nrequire_once MAX_PATH . '/www/api/v1/common/BaseServiceImpl.php';\n\n/**\n * The LogonServiceImpl class extends the BaseServiceImp class.\n *\n */\nclass LogonServiceImpl extends BaseServiceImpl\n{\n\n    /**\n     * The LogonServiceImpl constructor calls the base constructor for the class.\n     *\n     */\n    function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Login to OpenX without using the login form in the user interface and\n     * receive a session ID.\n     *\n     * @access private\n     *\n     * @param string $username\n     * @param string $password\n     *\n     * @return boolean\n     */\n    function _internalLogin($username, $password)\n    {\n        // Require the default language file.\n        include_once MAX_PATH . '/lib/max/language/Loader.php';\n        // Load the required language file.\n        Language_Loader::load('default');\n\n        $oPlugin = OA_Auth::staticGetAuthPlugin();\n\n        $doUser = $oPlugin->checkPassword($username, $password);\n        if ($doUser) {\n            phpAds_SessionDataRegister(OA_Auth::getSessionData($doUser));\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Login to the system with the session ID.\n     *\n     * @access public\n     *\n     * @param string $username\n     * @param string $password\n     * @param string &$sessionId\n     *\n     * @return boolean\n     */\n    function logon($username, $password, &$sessionId)\n    {\n        global $_POST, $_COOKIE;\n        global $strUsernameOrPasswordWrong;\n\n        /**\n         * @todo Please check if the following statement is in correct place because\n         * it seems illogical that user can get session ID from internal login with\n         * a bad username or password.\n         */\n\n        if (!$this->_verifyUsernameAndPasswordLength($username, $password)) {\n            return false;\n        }\n\n        $_POST['username'] = $username;\n        $_POST['password'] = $password;\n\n        $_POST['login'] = 'Login';\n\n        unset($_COOKIE['sessionID']);\n        phpAds_SessionStart();\n        $_POST['phpAds_cookiecheck'] = $_COOKIE['sessionID'];\n\n        $this->preInitSession();\n        if ($this->_internalLogin($username, $password)) {\n            // Check if the user has administrator access to Openads.\n            if (OA_Permission::isUserLinkedToAdmin()) {\n\n                $this->postInitSession();\n\n                $sessionId = $_COOKIE['sessionID'];\n                return true;\n            } else {\n\n                $this->raiseError('User must be OA installation admin');\n                return false;\n            }\n        } else {\n\n            $this->raiseError($strUsernameOrPasswordWrong);\n            return false;\n        }\n    }\n\n    /**\n     * Logoff from the session.\n     *\n     * @access public\n     *\n     * @param string $sessionId\n     *\n     * @return boolean\n     */\n    function logoff($sessionId)\n    {\n        if ($this->verifySession($sessionId)) {\n\n            phpAds_SessionDataDestroy();\n            unset($GLOBALS['session']);\n\n            return !OA_Auth::isLoggedIn();\n\n        } else {\n\n            return false;\n        }\n    }\n\n\n    /**\n     * The _verifyUsernameAndPasswordLength method checks the length of the username\n     * and password and returns an error message if either of them exceeds the limit of\n     * 64 characters.\n     *\n     * @access private\n     *\n     * @param string $username\n     * @param string $password\n     *\n     * @return boolean\n     */\n    function _verifyUsernameAndPasswordLength($username, $password)\n    {\n        if (strlen($username) > 64) {\n\n            $this->raiseError('UserName greater 64 characters');\n            return false;\n\n        } elseif (strlen($password) > 64) {\n\n            $this->raiseError('Password greater 64 characters');\n            return false;\n\n        } else {\n\n            return true;\n        }\n    }\n\n}\n\n\n?>\n", "<?php\n\n/*\n+---------------------------------------------------------------------------+\n| Revive Adserver                                                           |\n| http://www.revive-adserver.com                                            |\n|                                                                           |\n| Copyright: See the COPYRIGHT.txt file.                                    |\n| License: GPLv2 or later, see the LICENSE.txt file.                        |\n+---------------------------------------------------------------------------+\n*/\n\n/**\n * @package    OpenX\n */\n\n// Require the base class, BaseLogonService.\nrequire_once MAX_PATH . '/www/api/v2/common/BaseServiceImpl.php';\n\n/**\n * The LogonServiceImpl class extends the BaseServiceImp class.\n *\n */\nclass LogonServiceImpl extends BaseServiceImpl\n{\n\n    /**\n     * The LogonServiceImpl constructor calls the base constructor for the class.\n     *\n     */\n    function __construct()\n    {\n        parent::__construct();\n    }\n\n    /**\n     * Login to OpenX without using the login form in the user interface and\n     * receive a session ID.\n     *\n     * @access private\n     *\n     * @param string $username\n     * @param string $password\n     *\n     * @return boolean\n     */\n    function _internalLogin($username, $password)\n    {\n        // Require the default language file.\n        include_once MAX_PATH . '/lib/max/language/Loader.php';\n        // Load the required language file.\n        Language_Loader::load('default');\n\n        $oPlugin = OA_Auth::staticGetAuthPlugin();\n\n        $doUser = $oPlugin->checkPassword($username, $password);\n        if ($doUser) {\n            phpAds_SessionDataRegister(OA_Auth::getSessionData($doUser));\n            return true;\n        } else {\n            return false;\n        }\n    }\n\n    /**\n     * Login to the system with the session ID.\n     *\n     * @access public\n     *\n     * @param string $username\n     * @param string $password\n     * @param string &$sessionId\n     *\n     * @return boolean\n     */\n    function logon($username, $password, &$sessionId)\n    {\n        global $_POST, $_COOKIE;\n        global $strUsernameOrPasswordWrong;\n\n        /**\n         * @todo Please check if the following statement is in correct place because\n         * it seems illogical that user can get session ID from internal login with\n         * a bad username or password.\n         */\n\n        if (!$this->_verifyUsernameAndPasswordLength($username, $password)) {\n            return false;\n        }\n\n        $_POST['username'] = $username;\n        $_POST['password'] = $password;\n\n        $_POST['login'] = 'Login';\n\n        unset($_COOKIE['sessionID']);\n        phpAds_SessionStart();\n        $_POST['phpAds_cookiecheck'] = $_COOKIE['sessionID'];\n\n        $this->preInitSession();\n        if ($this->_internalLogin($username, $password)) {\n            // Check if the user has administrator access to Openads.\n            if (OA_Permission::isUserLinkedToAdmin()) {\n\n                $this->postInitSession();\n\n                $sessionId = $_COOKIE['sessionID'];\n                return true;\n            } else {\n\n                $this->raiseError('User must be OA installation admin');\n                return false;\n            }\n        } else {\n\n            $this->raiseError($strUsernameOrPasswordWrong);\n            return false;\n        }\n    }\n\n    /**\n     * Logoff from the session.\n     *\n     * @access public\n     *\n     * @param string $sessionId\n     *\n     * @return boolean\n     */\n    function logoff($sessionId)\n    {\n        if ($this->verifySession($sessionId)) {\n\n            phpAds_SessionDataDestroy();\n            unset($GLOBALS['session']);\n\n            return !OA_Auth::isLoggedIn();\n\n        } else {\n\n            return false;\n        }\n    }\n\n\n    /**\n     * The _verifyUsernameAndPasswordLength method checks the length of the username\n     * and password and returns an error message if either of them exceeds the limit of\n     * 64 characters.\n     *\n     * @access private\n     *\n     * @param string $username\n     * @param string $password\n     *\n     * @return boolean\n     */\n    function _verifyUsernameAndPasswordLength($username, $password)\n    {\n        if (strlen($username) > 64) {\n\n            $this->raiseError('UserName greater 64 characters');\n            return false;\n\n        } elseif (strlen($password) > 64) {\n\n            $this->raiseError('Password greater 64 characters');\n            return false;\n\n        } else {\n\n            return true;\n        }\n    }\n\n}\n\n\n?>\n"], "filenames": ["lib/OA/Auth.php", "lib/OA/Upgrade/Login.php", "lib/max/Dal/Admin/Session.php", "www/admin/lib-sessions.inc.php", "www/api/v1/xmlrpc/LogonServiceImpl.php", "www/api/v2/xmlrpc/LogonServiceImpl.php"], "buggy_code_start_loc": [88, 28, 79, 33, 96, 96], "buggy_code_end_loc": [194, 142, 83, 90, 97, 97], "fixing_code_start_loc": [89, 28, 79, 32, 96, 96], "fixing_code_end_loc": [197, 148, 83, 146, 98, 98], "type": "CWE-384", "message": "Revive Adserver before 3.2.3 suffers from session fixation, by allowing arbitrary session identifiers to be forced and, at the same time, by not invalidating the existing session upon a successful authentication. Under some circumstances, that could have been an opportunity for an attacker to steal an authenticated session.", "other": {"cve": {"id": "CVE-2016-9125", "sourceIdentifier": "support@hackerone.com", "published": "2017-03-28T02:59:00.370", "lastModified": "2019-10-09T23:20:18.880", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Revive Adserver before 3.2.3 suffers from session fixation, by allowing arbitrary session identifiers to be forced and, at the same time, by not invalidating the existing session upon a successful authentication. Under some circumstances, that could have been an opportunity for an attacker to steal an authenticated session."}, {"lang": "es", "value": "Revive Adserver en versiones anteriores a 3.2.3 sufre fijaci\u00f3n de la sesi\u00f3n, al permitir que los identificadores de sesi\u00f3n arbitrarios sean forzados, y al mismo tiempo, al no invalidar la sesi\u00f3n existente tras una autenticaci\u00f3n satisfactoria. Bajo algunas circunstancias, que podr\u00edan haber sido una oportunidad para que un atacante robara una sesi\u00f3n autenticada."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-384"}]}, {"source": "support@hackerone.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-384"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:revive-adserver:revive_adserver:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.2.2", "matchCriteriaId": "94F64F5A-ACD3-4AED-82BE-832D7B4801DA"}]}]}], "references": [{"url": "https://github.com/revive-adserver/revive-adserver/commit/4910365631eabbb208961c36149f41cc8159fb39", "source": "support@hackerone.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://hackerone.com/reports/93809", "source": "support@hackerone.com", "tags": ["Permissions Required"]}, {"url": "https://hackerone.com/reports/93813", "source": "support@hackerone.com", "tags": ["Permissions Required"]}, {"url": "https://www.revive-adserver.com/security/revive-sa-2016-001/", "source": "support@hackerone.com", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/revive-adserver/revive-adserver/commit/4910365631eabbb208961c36149f41cc8159fb39"}}