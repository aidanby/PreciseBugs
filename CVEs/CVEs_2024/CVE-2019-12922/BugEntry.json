{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Overview (main page)\n *\n * @package PhpMyAdmin-Setup\n */\n\nuse PhpMyAdmin\\Config\\ConfigFile;\nuse PhpMyAdmin\\Config\\FormDisplay;\nuse PhpMyAdmin\\Config\\FormDisplayTemplate;\nuse PhpMyAdmin\\Config\\ServerConfigChecks;\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\LanguageManager;\nuse PhpMyAdmin\\Sanitize;\nuse PhpMyAdmin\\Setup\\Index as SetupIndex;\nuse PhpMyAdmin\\Url;\n\nif (!defined('PHPMYADMIN')) {\n    exit;\n}\n\n// prepare unfiltered language list\n$all_languages = LanguageManager::getInstance()->sortedLanguages();\n\n/** @var ConfigFile $cf */\n$cf = $GLOBALS['ConfigFile'];\n\n// message handling\nSetupIndex::messagesBegin();\n\n//\n// Check phpMyAdmin version\n//\nif (isset($_GET['version_check'])) {\n    SetupIndex::versionCheck();\n}\n\n//\n// Perform various security, compatibility and consistency checks\n//\n$configChecker = new ServerConfigChecks($GLOBALS['ConfigFile']);\n$configChecker->performConfigChecks();\n\n//\n// Https connection warning (check done on the client side)\n//\n$text = __(\n    'You are not using a secure connection; all data (including potentially '\n    . 'sensitive information, like passwords) is transferred unencrypted!'\n);\n$text .= ' <a href=\"#\">';\n$text .= __(\n    'If your server is also configured to accept HTTPS requests '\n    . 'follow this link to use a secure connection.'\n);\n$text .= '</a>';\nSetupIndex::messagesSet('notice', 'no_https', __('Insecure connection'), $text);\n\necho '<form id=\"select_lang\" method=\"post\">';\necho Url::getHiddenInputs();\necho '<bdo lang=\"en\" dir=\"ltr\"><label for=\"lang\">';\necho __('Language') , (__('Language') != 'Language' ? ' - Language' : '');\necho '</label></bdo><br />';\necho '<select id=\"lang\" name=\"lang\" class=\"autosubmit\" lang=\"en\" dir=\"ltr\">';\n\n// create language list\n$lang_list = array();\nforeach ($all_languages as $each_lang) {\n    //Is current one active?\n    $selected = $each_lang->isActive() ? ' selected=\"selected\"' : '';\n    echo '<option value=\"' , $each_lang->getCode() , '\"' , $selected , '>' , $each_lang->getName()\n        , '</option>' , \"\\n\";\n}\n\necho '</select>';\necho '</form>';\n\n// Check for done action info and set notice message if present\nswitch ($action_done) {\ncase 'config_saved':\n    /* Use uniqid to display this message every time configuration is saved */\n    SetupIndex::messagesSet(\n        'notice', uniqid('config_saved'), __('Configuration saved.'),\n        Sanitize::sanitize(\n            __(\n                'Configuration saved to file config/config.inc.php in phpMyAdmin '\n                . 'top level directory, copy it to top level one and delete '\n                . 'directory config to use it.'\n            )\n        )\n    );\n    break;\ncase 'config_not_saved':\n    /* Use uniqid to display this message every time configuration is saved */\n    SetupIndex::messagesSet(\n        'notice', uniqid('config_not_saved'), __('Configuration not saved!'),\n        Sanitize::sanitize(\n            __(\n                'Please create web server writable folder [em]config[/em] in '\n                . 'phpMyAdmin top level directory as described in '\n                . '[doc@setup_script]documentation[/doc]. Otherwise you will be '\n                . 'only able to download or display it.'\n            )\n        )\n    );\n    break;\ndefault:\n    break;\n}\n\necho '<h2>' , __('Overview') , '</h2>';\n\n// message handling\nSetupIndex::messagesEnd();\nSetupIndex::messagesShowHtml();\n\necho '<a href=\"#\" id=\"show_hidden_messages\" class=\"hide\">';\necho __('Show hidden messages (#MSG_COUNT)');\necho '</a>';\n\necho '<fieldset class=\"simple\"><legend>';\necho __('Servers');\necho '</legend>';\n\n//\n// Display server list\n//\necho FormDisplayTemplate::displayFormTop(\n    'index.php', 'get',\n    array(\n        'page' => 'servers',\n        'mode' => 'add'\n    )\n);\necho '<div class=\"form\">';\nif ($cf->getServerCount() > 0) {\n    echo '<table cellspacing=\"0\" class=\"datatable\">';\n    echo '<tr>';\n    echo '<th>#</th>';\n    echo '<th>' , __('Name') , '</th>';\n    echo '<th>' , __('Authentication type') , '</th>';\n    echo '<th colspan=\"2\">DSN</th>';\n    echo '</tr>';\n\n    foreach ($cf->getServers() as $id => $server) {\n        echo '<tr>';\n        echo '<td>' , $id  , '</td>';\n        echo '<td>' , htmlspecialchars($cf->getServerName($id)) , '</td>';\n        echo '<td>'\n            , htmlspecialchars($cf->getValue(\"Servers/$id/auth_type\"))\n            ,  '</td>';\n        echo '<td>' , htmlspecialchars($cf->getServerDSN($id)) , '</td>';\n        echo '<td class=\"nowrap\">';\n        echo '<small>';\n        echo '<a href=\"' , Url::getCommon(array('page' => 'servers', 'mode' => 'edit', 'id' => $id)), '\">'\n            , __('Edit') , '</a>';\n        echo ' | ';\n        echo '<a href=\"' , Url::getCommon(array('page' => 'servers', 'mode' => 'remove', 'id' => $id)), '\">'\n            , __('Delete') , '</a>';\n        echo '</small>';\n        echo '</td>';\n        echo '</tr>';\n    }\n    echo '</table>';\n} else {\n    echo '<table width=\"100%\">';\n    echo '<tr>';\n    echo '<td>';\n    echo '<i>' , __('There are no configured servers') , '</i>';\n    echo '</td>';\n    echo '</tr>';\n    echo '</table>';\n}\n\necho '<table width=\"100%\">';\necho '<tr>';\necho '<td class=\"lastrow left\">';\necho '<input type=\"submit\" name=\"submit\" value=\"' , __('New server') , '\" />';\necho '</td>';\necho '</tr>';\necho '</table>';\necho '</div>';\n\necho FormDisplayTemplate::displayFormBottom();\n\necho '</fieldset>';\n\necho '<fieldset class=\"simple\"><legend>' , __('Configuration file') , '</legend>';\n\n//\n// Display config file settings and load/save form\n//\n$form_display = new FormDisplay($cf);\n\necho FormDisplayTemplate::displayFormTop('config.php');\necho '<table width=\"100%\" cellspacing=\"0\">';\n\n// Display language list\n$opts = array(\n    'doc' => $form_display->getDocLink('DefaultLang'),\n    'values' => array(),\n    'values_escaped' => true);\nforeach ($all_languages as $each_lang) {\n    $opts['values'][$each_lang->getCode()] = $each_lang->getName();\n}\necho FormDisplayTemplate::displayInput(\n    'DefaultLang', __('Default language'), 'select',\n    $cf->getValue('DefaultLang'), '', true, $opts\n);\n\n// Display server list\n$opts = array(\n    'doc' => $form_display->getDocLink('ServerDefault'),\n    'values' => array(),\n    'values_disabled' => array());\nif ($cf->getServerCount() > 0) {\n    $opts['values']['0'] = __('let the user choose');\n    $opts['values']['-'] = '------------------------------';\n    if ($cf->getServerCount() == 1) {\n        $opts['values_disabled'][] = '0';\n    }\n    $opts['values_disabled'][] = '-';\n\n    foreach ($cf->getServers() as $id => $server) {\n        $opts['values'][(string)$id] = $cf->getServerName($id) . \" [$id]\";\n    }\n} else {\n    $opts['values']['1'] = __('- none -');\n    $opts['values_escaped'] = true;\n}\necho FormDisplayTemplate::displayInput(\n    'ServerDefault', __('Default server'), 'select',\n    $cf->getValue('ServerDefault'), '', true, $opts\n);\n\n// Display EOL list\n$opts = array(\n    'values' => array(\n        'unix' => 'UNIX / Linux (\\n)',\n        'win' => 'Windows (\\r\\n)'),\n    'values_escaped' => true);\n$eol = Core::ifSetOr($_SESSION['eol'], (PMA_IS_WINDOWS ? 'win' : 'unix'));\necho FormDisplayTemplate::displayInput(\n    'eol', __('End of line'), 'select',\n    $eol, '', true, $opts\n);\n\necho '<tr>';\necho '<td colspan=\"2\" class=\"lastrow left\">';\necho '<input type=\"submit\" name=\"submit_display\" value=\"' , __('Display') , '\" />';\necho '<input type=\"submit\" name=\"submit_download\" value=\"' , __('Download') , '\" />';\necho '&nbsp; &nbsp;';\necho '<input type=\"submit\" name=\"submit_clear\" value=\"' , __('Clear')\n    , '\" class=\"red\" />';\necho '</td>';\necho '</tr>';\necho '</table>';\n\necho FormDisplayTemplate::displayFormBottom();\n\necho '</fieldset>';\necho '<div id=\"footer\">';\necho '<a href=\"../url.php?url=https://www.phpmyadmin.net/\">' , __('phpMyAdmin homepage') , '</a>';\necho '<a href=\"../url.php?url=https://www.phpmyadmin.net/donate/\">'\n    ,  __('Donate') , '</a>';\necho '<a href=\"' ,  Url::getCommon(array('version_check' => '1')), '\">'\n    , __('Check for latest version') , '</a>';\necho '</div>';\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Server create and edit view\n *\n * @package PhpMyAdmin-Setup\n */\n\nuse PhpMyAdmin\\Config\\ConfigFile;\nuse PhpMyAdmin\\Config\\Forms\\Setup\\ServersForm;\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\Setup\\FormProcessing;\nuse PhpMyAdmin\\Url;\n\nif (!defined('PHPMYADMIN')) {\n    exit;\n}\n\n$mode = isset($_GET['mode']) ? $_GET['mode'] : null;\n$id = Core::isValid($_GET['id'], 'numeric') ? intval($_GET['id']) : null;\n\n/** @var ConfigFile $cf */\n$cf = $GLOBALS['ConfigFile'];\n$server_exists = !empty($id) && $cf->get(\"Servers/$id\") !== null;\n\nif ($mode == 'edit' && $server_exists) {\n    $page_title = __('Edit server')\n        . ' ' . $id\n        . ' <small>(' . htmlspecialchars($cf->getServerDSN($id)) . ')</small>';\n} elseif ($mode == 'remove' && $server_exists) {\n    $cf->removeServer($id);\n    header('Location: index.php' . Url::getCommonRaw());\n    exit;\n} elseif ($mode == 'revert' && $server_exists) {\n    // handled by process_formset()\n} else {\n    $page_title = __('Add a new server');\n    $id = 0;\n}\nif (isset($page_title)) {\n    echo '<h2>' , $page_title . '</h2>';\n}\n$form_display = new ServersForm($cf, $id);\nFormProcessing::process($form_display);\n", "/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Functions used in Setup configuration forms\n */\n\n// show this window in top frame\nif (top !== self) {\n    window.top.location.href = location;\n}\n\n// ------------------------------------------------------------------\n// Messages\n//\n\n$(function () {\n    if (window.location.protocol === 'https:') {\n        $('#no_https').remove();\n    } else {\n        $('#no_https a').click(function () {\n            var old_location = window.location;\n            window.location.href = 'https:' + old_location.href.substring(old_location.protocol.length);\n            return false;\n        });\n    }\n\n    var hiddenmessages = $('.hiddenmessage');\n\n    if (hiddenmessages.length > 0) {\n        hiddenmessages.hide();\n        var link = $('#show_hidden_messages');\n        link.click(function (e) {\n            e.preventDefault();\n            hiddenmessages.show();\n            $(this).remove();\n        });\n        link.html(link.html().replace('#MSG_COUNT', hiddenmessages.length));\n        link.show();\n    }\n});\n\n// set document width\n$(document).ready(function () {\n    width = 0;\n    $('ul.tabs li').each(function () {\n        width += $(this).width() + 10;\n    });\n    var contentWidth = width;\n    width += 250;\n    $('body').css('min-width', width);\n    $('.tabs_contents').css('min-width', contentWidth);\n});\n\n//\n// END: Messages\n// ------------------------------------------------------------------\n\n// ------------------------------------------------------------------\n// Form validation and field operations\n//\n\n/**\n * Calls server-side validation procedures\n *\n * @param {Element} parent  input field in <fieldset> or <fieldset>\n * @param {String}  id      validator id\n * @param {Object}  values  values hash {element1_id: value, ...}\n */\nfunction ajaxValidate (parent, id, values) {\n    parent = $(parent);\n    // ensure that parent is a fieldset\n    if (parent.attr('tagName') !== 'FIELDSET') {\n        parent = parent.closest('fieldset');\n        if (parent.length === 0) {\n            return false;\n        }\n    }\n\n    if (parent.data('ajax') !== null) {\n        parent.data('ajax').abort();\n    }\n\n    parent.data('ajax', $.ajax({\n        url: 'validate.php',\n        cache: false,\n        type: 'POST',\n        data: {\n            token: parent.closest('form').find('input[name=token]').val(),\n            id: id,\n            values: JSON.stringify(values)\n        },\n        success: function (response) {\n            if (response === null) {\n                return;\n            }\n\n            var error = {};\n            if (typeof response !== 'object') {\n                error[parent.id] = [response];\n            } else if (typeof response.error !== 'undefined') {\n                error[parent.id] = [response.error];\n            } else {\n                for (var key in response) {\n                    var value = response[key];\n                    error[key] = jQuery.isArray(value) ? value : [value];\n                }\n            }\n            displayErrors(error);\n        },\n        complete: function () {\n            parent.removeData('ajax');\n        }\n    }));\n\n    return true;\n}\n\n/**\n * Automatic form submission on change.\n */\n$(document).on('change', '.autosubmit', function (e) {\n    e.target.form.submit();\n});\n\n$.extend(true, validators, {\n    // field validators\n    _field: {\n        /**\n         * hide_db field\n         *\n         * @param {boolean} isKeyUp\n         */\n        hide_db: function (isKeyUp) {\n            if (!isKeyUp && this.value !== '') {\n                var data = {};\n                data[this.id] = this.value;\n                ajaxValidate(this, 'Servers/1/hide_db', data);\n            }\n            return true;\n        },\n        /**\n         * TrustedProxies field\n         *\n         * @param {boolean} isKeyUp\n         */\n        TrustedProxies: function (isKeyUp) {\n            if (!isKeyUp && this.value !== '') {\n                var data = {};\n                data[this.id] = this.value;\n                ajaxValidate(this, 'TrustedProxies', data);\n            }\n            return true;\n        }\n    },\n    // fieldset validators\n    _fieldset: {\n        /**\n         * Validates Server fieldset\n         *\n         * @param {boolean} isKeyUp\n         */\n        Server: function (isKeyUp) {\n            if (!isKeyUp) {\n                ajaxValidate(this, 'Server', getAllValues());\n            }\n            return true;\n        },\n        /**\n         * Validates Server_login_options fieldset\n         *\n         * @param {boolean} isKeyUp\n         */\n        Server_login_options: function (isKeyUp) {\n            return validators._fieldset.Server.apply(this, [isKeyUp]);\n        },\n        /**\n         * Validates Server_pmadb fieldset\n         *\n         * @param {boolean} isKeyUp\n         */\n        Server_pmadb: function (isKeyUp) {\n            if (isKeyUp) {\n                return true;\n            }\n\n            var prefix = getIdPrefix($(this).find('input'));\n            if ($('#' + prefix + 'pmadb').val() !== '') {\n                ajaxValidate(this, 'Server_pmadb', getAllValues());\n            }\n\n            return true;\n        }\n    }\n});\n\n//\n// END: Form validation and field operations\n// ------------------------------------------------------------------\n\n// ------------------------------------------------------------------\n// User preferences allow/disallow UI\n//\n\n$(function () {\n    $('.userprefs-allow').click(function (e) {\n        if (this !== e.target) {\n            return;\n        }\n        var el = $(this).find('input');\n        if (el.prop('disabled')) {\n            return;\n        }\n        el.prop('checked', !el.prop('checked'));\n    });\n});\n\n//\n// END: User preferences allow/disallow UI\n// ------------------------------------------------------------------\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Overview (main page)\n *\n * @package PhpMyAdmin-Setup\n */\n\nuse PhpMyAdmin\\Config\\ConfigFile;\nuse PhpMyAdmin\\Config\\FormDisplay;\nuse PhpMyAdmin\\Config\\FormDisplayTemplate;\nuse PhpMyAdmin\\Config\\ServerConfigChecks;\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\LanguageManager;\nuse PhpMyAdmin\\Sanitize;\nuse PhpMyAdmin\\Setup\\Index as SetupIndex;\nuse PhpMyAdmin\\Url;\n\nif (!defined('PHPMYADMIN')) {\n    exit;\n}\n\n// prepare unfiltered language list\n$all_languages = LanguageManager::getInstance()->sortedLanguages();\n\n/** @var ConfigFile $cf */\n$cf = $GLOBALS['ConfigFile'];\n\n// message handling\nSetupIndex::messagesBegin();\n\n//\n// Check phpMyAdmin version\n//\nif (isset($_GET['version_check'])) {\n    SetupIndex::versionCheck();\n}\n\n//\n// Perform various security, compatibility and consistency checks\n//\n$configChecker = new ServerConfigChecks($GLOBALS['ConfigFile']);\n$configChecker->performConfigChecks();\n\n//\n// Https connection warning (check done on the client side)\n//\n$text = __(\n    'You are not using a secure connection; all data (including potentially '\n    . 'sensitive information, like passwords) is transferred unencrypted!'\n);\n$text .= ' <a href=\"#\">';\n$text .= __(\n    'If your server is also configured to accept HTTPS requests '\n    . 'follow this link to use a secure connection.'\n);\n$text .= '</a>';\nSetupIndex::messagesSet('notice', 'no_https', __('Insecure connection'), $text);\n\necho '<form id=\"select_lang\" method=\"post\">';\necho Url::getHiddenInputs();\necho '<bdo lang=\"en\" dir=\"ltr\"><label for=\"lang\">';\necho __('Language') , (__('Language') != 'Language' ? ' - Language' : '');\necho '</label></bdo><br />';\necho '<select id=\"lang\" name=\"lang\" class=\"autosubmit\" lang=\"en\" dir=\"ltr\">';\n\n// create language list\n$lang_list = array();\nforeach ($all_languages as $each_lang) {\n    //Is current one active?\n    $selected = $each_lang->isActive() ? ' selected=\"selected\"' : '';\n    echo '<option value=\"' , $each_lang->getCode() , '\"' , $selected , '>' , $each_lang->getName()\n        , '</option>' , \"\\n\";\n}\n\necho '</select>';\necho '</form>';\n\n// Check for done action info and set notice message if present\nswitch ($action_done) {\ncase 'config_saved':\n    /* Use uniqid to display this message every time configuration is saved */\n    SetupIndex::messagesSet(\n        'notice', uniqid('config_saved'), __('Configuration saved.'),\n        Sanitize::sanitize(\n            __(\n                'Configuration saved to file config/config.inc.php in phpMyAdmin '\n                . 'top level directory, copy it to top level one and delete '\n                . 'directory config to use it.'\n            )\n        )\n    );\n    break;\ncase 'config_not_saved':\n    /* Use uniqid to display this message every time configuration is saved */\n    SetupIndex::messagesSet(\n        'notice', uniqid('config_not_saved'), __('Configuration not saved!'),\n        Sanitize::sanitize(\n            __(\n                'Please create web server writable folder [em]config[/em] in '\n                . 'phpMyAdmin top level directory as described in '\n                . '[doc@setup_script]documentation[/doc]. Otherwise you will be '\n                . 'only able to download or display it.'\n            )\n        )\n    );\n    break;\ndefault:\n    break;\n}\n\necho '<h2>' , __('Overview') , '</h2>';\n\n// message handling\nSetupIndex::messagesEnd();\nSetupIndex::messagesShowHtml();\n\necho '<a href=\"#\" id=\"show_hidden_messages\" class=\"hide\">';\necho __('Show hidden messages (#MSG_COUNT)');\necho '</a>';\n\necho '<fieldset class=\"simple\"><legend>';\necho __('Servers');\necho '</legend>';\n\n//\n// Display server list\n//\necho FormDisplayTemplate::displayFormTop(\n    'index.php', 'get',\n    array(\n        'page' => 'servers',\n        'mode' => 'add'\n    )\n);\necho '<div class=\"form\">';\nif ($cf->getServerCount() > 0) {\n    echo '<table cellspacing=\"0\" class=\"datatable\">';\n    echo '<tr>';\n    echo '<th>#</th>';\n    echo '<th>' , __('Name') , '</th>';\n    echo '<th>' , __('Authentication type') , '</th>';\n    echo '<th colspan=\"2\">DSN</th>';\n    echo '</tr>';\n\n    foreach ($cf->getServers() as $id => $server) {\n        echo '<tr>';\n        echo '<td>' , $id  , '</td>';\n        echo '<td>' , htmlspecialchars($cf->getServerName($id)) , '</td>';\n        echo '<td>'\n            , htmlspecialchars($cf->getValue(\"Servers/$id/auth_type\"))\n            ,  '</td>';\n        echo '<td>' , htmlspecialchars($cf->getServerDSN($id)) , '</td>';\n        echo '<td class=\"nowrap\">';\n        echo '<small>';\n        echo '<a href=\"' , Url::getCommon(array('page' => 'servers', 'mode' => 'edit', 'id' => $id)), '\">'\n            , __('Edit') , '</a>';\n        echo ' | ';\n        echo '<a class=\"delete-server\" href=\"' . Url::getCommon(array('page' => 'servers', 'mode' => 'remove', 'id' => $id));\n        echo '\" data-post=\"' . Url::getCommon(array('token' => $_SESSION[' PMA_token ']), '') . '\">';\n        echo __('Delete') . '</a>';\n        echo '</small>';\n        echo '</td>';\n        echo '</tr>';\n    }\n    echo '</table>';\n} else {\n    echo '<table width=\"100%\">';\n    echo '<tr>';\n    echo '<td>';\n    echo '<i>' , __('There are no configured servers') , '</i>';\n    echo '</td>';\n    echo '</tr>';\n    echo '</table>';\n}\n\necho '<table width=\"100%\">';\necho '<tr>';\necho '<td class=\"lastrow left\">';\necho '<input type=\"submit\" name=\"submit\" value=\"' , __('New server') , '\" />';\necho '</td>';\necho '</tr>';\necho '</table>';\necho '</div>';\n\necho FormDisplayTemplate::displayFormBottom();\n\necho '</fieldset>';\n\necho '<fieldset class=\"simple\"><legend>' , __('Configuration file') , '</legend>';\n\n//\n// Display config file settings and load/save form\n//\n$form_display = new FormDisplay($cf);\n\necho FormDisplayTemplate::displayFormTop('config.php');\necho '<table width=\"100%\" cellspacing=\"0\">';\n\n// Display language list\n$opts = array(\n    'doc' => $form_display->getDocLink('DefaultLang'),\n    'values' => array(),\n    'values_escaped' => true);\nforeach ($all_languages as $each_lang) {\n    $opts['values'][$each_lang->getCode()] = $each_lang->getName();\n}\necho FormDisplayTemplate::displayInput(\n    'DefaultLang', __('Default language'), 'select',\n    $cf->getValue('DefaultLang'), '', true, $opts\n);\n\n// Display server list\n$opts = array(\n    'doc' => $form_display->getDocLink('ServerDefault'),\n    'values' => array(),\n    'values_disabled' => array());\nif ($cf->getServerCount() > 0) {\n    $opts['values']['0'] = __('let the user choose');\n    $opts['values']['-'] = '------------------------------';\n    if ($cf->getServerCount() == 1) {\n        $opts['values_disabled'][] = '0';\n    }\n    $opts['values_disabled'][] = '-';\n\n    foreach ($cf->getServers() as $id => $server) {\n        $opts['values'][(string)$id] = $cf->getServerName($id) . \" [$id]\";\n    }\n} else {\n    $opts['values']['1'] = __('- none -');\n    $opts['values_escaped'] = true;\n}\necho FormDisplayTemplate::displayInput(\n    'ServerDefault', __('Default server'), 'select',\n    $cf->getValue('ServerDefault'), '', true, $opts\n);\n\n// Display EOL list\n$opts = array(\n    'values' => array(\n        'unix' => 'UNIX / Linux (\\n)',\n        'win' => 'Windows (\\r\\n)'),\n    'values_escaped' => true);\n$eol = Core::ifSetOr($_SESSION['eol'], (PMA_IS_WINDOWS ? 'win' : 'unix'));\necho FormDisplayTemplate::displayInput(\n    'eol', __('End of line'), 'select',\n    $eol, '', true, $opts\n);\n\necho '<tr>';\necho '<td colspan=\"2\" class=\"lastrow left\">';\necho '<input type=\"submit\" name=\"submit_display\" value=\"' , __('Display') , '\" />';\necho '<input type=\"submit\" name=\"submit_download\" value=\"' , __('Download') , '\" />';\necho '&nbsp; &nbsp;';\necho '<input type=\"submit\" name=\"submit_clear\" value=\"' , __('Clear')\n    , '\" class=\"red\" />';\necho '</td>';\necho '</tr>';\necho '</table>';\n\necho FormDisplayTemplate::displayFormBottom();\n\necho '</fieldset>';\necho '<div id=\"footer\">';\necho '<a href=\"../url.php?url=https://www.phpmyadmin.net/\">' , __('phpMyAdmin homepage') , '</a>';\necho '<a href=\"../url.php?url=https://www.phpmyadmin.net/donate/\">'\n    ,  __('Donate') , '</a>';\necho '<a href=\"' ,  Url::getCommon(array('version_check' => '1')), '\">'\n    , __('Check for latest version') , '</a>';\necho '</div>';\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Server create and edit view\n *\n * @package PhpMyAdmin-Setup\n */\n\nuse PhpMyAdmin\\Config\\ConfigFile;\nuse PhpMyAdmin\\Config\\Forms\\Setup\\ServersForm;\nuse PhpMyAdmin\\Core;\nuse PhpMyAdmin\\Setup\\FormProcessing;\nuse PhpMyAdmin\\Url;\n\nif (!defined('PHPMYADMIN')) {\n    exit;\n}\n\n$mode = isset($_GET['mode']) ? $_GET['mode'] : null;\n$id = Core::isValid($_GET['id'], 'numeric') ? intval($_GET['id']) : null;\n\n/** @var ConfigFile $cf */\n$cf = $GLOBALS['ConfigFile'];\n$server_exists = !empty($id) && $cf->get(\"Servers/$id\") !== null;\n\nif ($mode == 'edit' && $server_exists) {\n    $page_title = __('Edit server')\n        . ' ' . $id\n        . ' <small>(' . htmlspecialchars($cf->getServerDSN($id)) . ')</small>';\n} elseif ($mode == 'remove' && $server_exists && $_SERVER['REQUEST_METHOD'] == 'POST') {\n    $cf->removeServer($id);\n    header('Location: index.php' . Url::getCommonRaw());\n    exit;\n} elseif ($mode == 'revert' && $server_exists) {\n    // handled by process_formset()\n} else {\n    $page_title = __('Add a new server');\n    $id = 0;\n}\nif (isset($page_title)) {\n    echo '<h2>' , $page_title . '</h2>';\n}\n$form_display = new ServersForm($cf, $id);\nFormProcessing::process($form_display);\n", "/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Functions used in Setup configuration forms\n */\n\n// show this window in top frame\nif (top !== self) {\n    window.top.location.href = location;\n}\n\n// ------------------------------------------------------------------\n// Messages\n//\n\n$(function () {\n    if (window.location.protocol === 'https:') {\n        $('#no_https').remove();\n    } else {\n        $('#no_https a').click(function () {\n            var old_location = window.location;\n            window.location.href = 'https:' + old_location.href.substring(old_location.protocol.length);\n            return false;\n        });\n    }\n\n    var hiddenmessages = $('.hiddenmessage');\n\n    if (hiddenmessages.length > 0) {\n        hiddenmessages.hide();\n        var link = $('#show_hidden_messages');\n        link.click(function (e) {\n            e.preventDefault();\n            hiddenmessages.show();\n            $(this).remove();\n        });\n        link.html(link.html().replace('#MSG_COUNT', hiddenmessages.length));\n        link.show();\n    }\n});\n\n// set document width\n$(document).ready(function () {\n    width = 0;\n    $('ul.tabs li').each(function () {\n        width += $(this).width() + 10;\n    });\n    var contentWidth = width;\n    width += 250;\n    $('body').css('min-width', width);\n    $('.tabs_contents').css('min-width', contentWidth);\n});\n\n//\n// END: Messages\n// ------------------------------------------------------------------\n\n// ------------------------------------------------------------------\n// Form validation and field operations\n//\n\n/**\n * Calls server-side validation procedures\n *\n * @param {Element} parent  input field in <fieldset> or <fieldset>\n * @param {String}  id      validator id\n * @param {Object}  values  values hash {element1_id: value, ...}\n */\nfunction ajaxValidate (parent, id, values) {\n    parent = $(parent);\n    // ensure that parent is a fieldset\n    if (parent.attr('tagName') !== 'FIELDSET') {\n        parent = parent.closest('fieldset');\n        if (parent.length === 0) {\n            return false;\n        }\n    }\n\n    if (parent.data('ajax') !== null) {\n        parent.data('ajax').abort();\n    }\n\n    parent.data('ajax', $.ajax({\n        url: 'validate.php',\n        cache: false,\n        type: 'POST',\n        data: {\n            token: parent.closest('form').find('input[name=token]').val(),\n            id: id,\n            values: JSON.stringify(values)\n        },\n        success: function (response) {\n            if (response === null) {\n                return;\n            }\n\n            var error = {};\n            if (typeof response !== 'object') {\n                error[parent.id] = [response];\n            } else if (typeof response.error !== 'undefined') {\n                error[parent.id] = [response.error];\n            } else {\n                for (var key in response) {\n                    var value = response[key];\n                    error[key] = jQuery.isArray(value) ? value : [value];\n                }\n            }\n            displayErrors(error);\n        },\n        complete: function () {\n            parent.removeData('ajax');\n        }\n    }));\n\n    return true;\n}\n\n/**\n * Automatic form submission on change.\n */\n$(document).on('change', '.autosubmit', function (e) {\n    e.target.form.submit();\n});\n\n$.extend(true, validators, {\n    // field validators\n    _field: {\n        /**\n         * hide_db field\n         *\n         * @param {boolean} isKeyUp\n         */\n        hide_db: function (isKeyUp) {\n            if (!isKeyUp && this.value !== '') {\n                var data = {};\n                data[this.id] = this.value;\n                ajaxValidate(this, 'Servers/1/hide_db', data);\n            }\n            return true;\n        },\n        /**\n         * TrustedProxies field\n         *\n         * @param {boolean} isKeyUp\n         */\n        TrustedProxies: function (isKeyUp) {\n            if (!isKeyUp && this.value !== '') {\n                var data = {};\n                data[this.id] = this.value;\n                ajaxValidate(this, 'TrustedProxies', data);\n            }\n            return true;\n        }\n    },\n    // fieldset validators\n    _fieldset: {\n        /**\n         * Validates Server fieldset\n         *\n         * @param {boolean} isKeyUp\n         */\n        Server: function (isKeyUp) {\n            if (!isKeyUp) {\n                ajaxValidate(this, 'Server', getAllValues());\n            }\n            return true;\n        },\n        /**\n         * Validates Server_login_options fieldset\n         *\n         * @param {boolean} isKeyUp\n         */\n        Server_login_options: function (isKeyUp) {\n            return validators._fieldset.Server.apply(this, [isKeyUp]);\n        },\n        /**\n         * Validates Server_pmadb fieldset\n         *\n         * @param {boolean} isKeyUp\n         */\n        Server_pmadb: function (isKeyUp) {\n            if (isKeyUp) {\n                return true;\n            }\n\n            var prefix = getIdPrefix($(this).find('input'));\n            if ($('#' + prefix + 'pmadb').val() !== '') {\n                ajaxValidate(this, 'Server_pmadb', getAllValues());\n            }\n\n            return true;\n        }\n    }\n});\n\n//\n// END: Form validation and field operations\n// ------------------------------------------------------------------\n\n// ------------------------------------------------------------------\n// User preferences allow/disallow UI\n//\n\n$(function () {\n    $('.userprefs-allow').click(function (e) {\n        if (this !== e.target) {\n            return;\n        }\n        var el = $(this).find('input');\n        if (el.prop('disabled')) {\n            return;\n        }\n        el.prop('checked', !el.prop('checked'));\n    });\n});\n\n//\n// END: User preferences allow/disallow UI\n// ------------------------------------------------------------------\n\n$(function () {\n    $('.delete-server').on('click', function (e) {\n        e.preventDefault();\n        var $this = $(this);\n        $.post($this.attr('href'), $this.attr('data-post'), function () {\n            window.location.replace('index.php');\n        });\n    });\n});\n"], "filenames": ["setup/frames/index.inc.php", "setup/frames/servers.inc.php", "setup/scripts.js"], "buggy_code_start_loc": [159, 30, 218], "buggy_code_end_loc": [161, 31, 218], "fixing_code_start_loc": [159, 30, 219], "fixing_code_end_loc": [162, 31, 229], "type": "CWE-352", "message": "A CSRF issue in phpMyAdmin 4.9.0.1 allows deletion of any server in the Setup page.", "other": {"cve": {"id": "CVE-2019-12922", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-13T13:15:11.323", "lastModified": "2023-02-02T19:52:39.463", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A CSRF issue in phpMyAdmin 4.9.0.1 allows deletion of any server in the Setup page."}, {"lang": "es", "value": "Un problema de tipo CSRF en phpMyAdmin versi\u00f3n 4.9.0.1, permite la eliminaci\u00f3n de cualquier servidor en la p\u00e1gina de Setup."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.9.0.1", "matchCriteriaId": "2496187A-2378-4463-B2F0-18BBE0441570"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:29:*:*:*:*:*:*:*", "matchCriteriaId": "D100F7CE-FC64-4CC6-852A-6136D72DA419"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:30:*:*:*:*:*:*:*", "matchCriteriaId": "97A4B8DF-58DA-4AB6-A1F9-331B36409BA3"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:31:*:*:*:*:*:*:*", "matchCriteriaId": "80F0FA5D-8D3B-4C0E-81E2-87998286AF33"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-security-announce/2019-09/msg00078.html", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2020-01/msg00024.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://packetstormsecurity.com/files/154483/phpMyAdmin-4.9.0.1-Cross-Site-Request-Forgery.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2019/Sep/23", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/427fbed55d3154d96ecfc1c7784d49eaa3c04161", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/7d21d4223bdbe0306593309132b4263d7087d13b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/PBLBE6CSC2ZLINIRBUU5XBLXYVBTF3KA/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/QJ5BW2VEMD2P23ZYRWHDBEQHOKGKGWD6/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YCB3PTGHZ7AJCM6BKCQRRP6HG3OKYCMN/", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/47385", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/427fbed55d3154d96ecfc1c7784d49eaa3c04161"}}