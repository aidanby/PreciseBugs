{"buggy_code": ["<?php\nrequire_once __DIR__ . '/common.php';\nrequire_once __DIR__ . '/database/DatabaseInteractions.php';\nrequire_once __DIR__ . '/subpages/RequestPage.php';\nrequire_once __DIR__ . '/subpages/RequirementsBypassPage.php';\n\nfunction truncate(string $str, int $length) : string {\n\tassert($length >= 0);\n\t\n\treturn strlen($str) > $length ? substr($str, 0, $length) . '...' : $str;\n}\n\nclass AccountRequestPager extends AbstractAccountRequestPager {\n\tconst REQUEST_NOTES_TABLE_CELL_MAX_LENGTH = 500;\n\tprivate $linkRenderer, $language;\n\tfunction __construct($username, $status, $linkRenderer, $language) {\n\t\tparent::__construct($username, $status);\n\n\t\t$this->linkRenderer = $linkRenderer;\n\t\t$this->language = $language;\n\t}\t\n\n\tfunction rowFromRequest($accountRequest) {\n\t\t$row = Html::openElement('tr');\n\t\t$row .= Html::rawElement('td', [], humanTimestamp( $accountRequest->lastUpdated, $this->language ));\n\t\t$row .= Html::rawElement('td', [], linkToScratchProfile($accountRequest->username));\n\t\t$row .= Html::element('td', ['class' => 'mw-scratch-confirmaccount-requestnotestablecell'], truncate($accountRequest->requestNotes, self::REQUEST_NOTES_TABLE_CELL_MAX_LENGTH));\n\t\t$row .= Html::rawElement(\n\t\t\t'td',\n\t\t\t[],\n\t\t\t$this->linkRenderer->makeKnownLink(\n\t\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', $accountRequest->id),\n\t\t\t\twfMessage('scratch-confirmaccount-view')->text()\n\t\t\t)\n\t\t);\n\t\t$row .= Html::closeElement('tr');\n\n\t\treturn $row;\n\t}\n}\n\nclass SpecialConfirmAccounts extends SpecialPage {\n\tfunction __construct() {\n\t\tparent::__construct( 'ConfirmAccounts', 'createaccount' );\n\t}\n\n\tfunction getGroupName() {\n\t\treturn 'users';\n\t}\n\t\n\t//return if the current user can view/edit blocks\n\tfunction canViewBlocks() {\t\t\n\t\treturn $this->getUser()->isAllowed('block');\n\t}\n\n\tfunction blocksListPage(&$request, &$output, &$session) {\n\t\t$dbr = getReadOnlyDatabase();\n\t\t\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t//show the list of existing blocks\n\t\t$output->addHTML(Html::element(\n\t\t\t'h3',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-blocks')->text()\n\t\t));\n\n\t\t$blocks = getBlocks($dbr);\n\n\t\tif (empty($blocks)) {\n\t\t\t$output->addHTML(Html::element('p', [], wfMessage('scratch-confirmaccount-noblocks')));\n\t\t} else {\n\t\t\t$table = Html::openElement('table', [ 'class' => 'wikitable' ]);\n\n\t\t\t//table heading\n\t\t\t$table .= Html::openElement('tr');\n\t\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-scratchusername'));\n\t\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-blockreason'));\n\t\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-actions'));\n\t\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-block-expiration-time'));\n\t\t\t$table .= Html::closeElement('tr');\n\n\t\t\t//actual list of blocks\n\t\t\t$table .= implode(array_map(function ($block) use ($linkRenderer) {\n\t\t\t\t$row = Html::openElement('tr');\n\t\t\t\t$row .= Html::element('td', [], $block->blockedUsername);\n\t\t\t\t$row .= Html::element('td', [], $block->reason);\n\t\t\t\t$row .= Html::rawElement('td', [], $linkRenderer->makeKnownLink(\n\t\t\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-blocks')->text() . '/' . $block->blockedUsername),\n\t\t\t\t\twfMessage('scratch-confirmaccount-view')->text()\n\t\t\t\t));\n\t\t\t\t$row .= Html::rawElement('td', [], humanTimestampOrInfinite($block->expirationTimestamp, $this->getLanguage()));\n\t\t\t\t$row .= Html::closeElement('tr');\n\n\t\t\t\treturn $row;\n\t\t\t}, $blocks));\n\n\t\t\t$table .= Html::closeElement('table');\n\n\t\t\t$output->addHTML($table);\n\t\t}\n\n\t\t//also show a form to add a new block\n\t\t$output->addHTML(Html::element('h3', [], wfMessage('scratch-confirmaccount-add-block')->text()));\n\t\t$this->singleBlockForm('', $request, $output, $session, $dbr);\n\t}\n\n\t//show a form that allows editing an existing block or adding a new one (leave the username blank)\n\tfunction singleBlockForm($blockedUsername, &$request, &$output, &$session, IDatabase $dbr) {\n\t\tif (!$this->canViewBlocks()) {\n\t\t\tthrow new PermissionsError('block');\n\t\t}\n\t\t\n\t\t//get the block associated with the provided username\n\t\tif ($blockedUsername) {\n\t\t\t$block = getSingleBlock($blockedUsername, $dbr);\n\t\t\tif (!$block) {\n\t\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-not-blocked');\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t$block = false;\n\t\t}\n\n\t\tif ($block) {\n\t\t\t$output->addHTML(Html::element('h3', [], wfMessage('scratch-confirmaccount-vieweditblock')));\n\t\t}\n\n\t\t$output->addHTML(Html::openElement('form', ['method' => 'post', 'enctype' => 'multipart/form-data', 'action' => SpecialPage::getTitleFor('ConfirmAccounts')->getFullURL()]));\n\t\t\n\t\t// anti-CSRF\n\t\t$output->addHTML(Html::element('input', ['type' => 'hidden', 'name' => 'csrftoken', 'value' => setCSRFToken($session)]));\n\t\t\n\t\t$output->addHTML(Html::element('input', ['type' => 'hidden', 'name' => 'blockAction', 'value' => $block ? 'update' : 'create']));\n\n\t\t$table = Html::openElement('table', [ 'class' => 'wikitable' ]);\n\n\t\t$table .= Html::openElement('tr');\n\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-scratchusername')->text());\n\t\t$table .= Html::rawElement('td', [], Html::element('input', ['type' => 'text', 'name' => 'username', 'value' => $blockedUsername, 'readonly' => (bool)$block]));\n\t\t$table .= Html::closeElement('tr');\n\n\t\t$table .= Html::openElement('tr');\n\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-blockreason')->text());\n\t\t$table .= Html::rawElement('td', [], Html::element('textarea', ['class' => 'mw-scratch-confirmaccount-textarea', 'name' => 'reason'], $block ? $block->reason : ''));\n\t\t$table .= Html::closeElement('tr');\n\n\t\t$table .= Html::openElement('tr');\n\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-block-expiration-time')->text());\n\t\t$table .= Html::rawElement('td', [], blockExpirationForm(\n\t\t\t$this->getLanguage(),\n\t\t\t$this->getUser(),\n\t\t\t$block !== false,\n\t\t\t$block ? $block->expirationTimestamp : null\n\t\t));\n\t\t$table .= Html::closeElement('tr');\n\n\t\t$table .= Html::closeElement('table');\n\n\t\t$output->addHTML($table);\n\n\t\t$output->addHTML(Html::element('input', ['type' => 'submit', 'name' => 'blockSubmit', 'value' => wfMessage('scratch-confirmaccount-submit')->text()]));\n\n\t\tif ($block) {\n\t\t\t$output->addHTML(Html::element('input', ['type' => 'submit', 'name' => 'unblockSubmit', 'value' => wfMessage('scratch-confirmaccount-unblock')->text()]));\n\t\t}\n\n\t\t$output->addHTML(Html::closeElement('form'));\n\t}\n\n\tfunction blocksPage($par, &$request, &$output, &$session) {\n\t\tif (!$this->canViewBlocks()) {\n\t\t\tthrow new PermissionsError('block');\n\t\t}\n\t\t\t\t\n\t\t$subpageParts = explode('/', $par);\n\n\t\tif (sizeof($subpageParts) < 2) {\n\t\t\treturn $this->blocksListPage($request, $output, $session);\n\t\t} else {\n\t\t\treturn $this->singleBlockForm($subpageParts[1], $request, $output, $session, getReadOnlyDatabase());\n\t\t}\n\t}\n\n\tfunction requestTable($username, $status, &$linkRenderer) {\n\t\t$pager = new AccountRequestPager($username, $status, $linkRenderer, $this->getLanguage());\n\n\t\tif ($pager->getNumRows() == 0) {\n\t\t\treturn Html::element('p', [], wfMessage('scratch-confirmaccount-norequests')->text());\n\t\t}\n\n\t\t$table = $pager->getNavigationBar();\n\n\t\t$table .= Html::openElement('table', [ 'class' => 'wikitable' ]);\n\n\t\t//table heading\n\t\t$table .= Html::openElement('tr');\n\t\t$table .= Html::element(\n\t\t\t'th',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-lastupdated')->text()\n\t\t);\n\t\t$table .= Html::element(\n\t\t\t'th',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-username')->text()\n\t\t);\n\t\t$table .= Html::element(\n\t\t\t'th',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-requestnotes')->text()\n\t\t);\n\t\t$table .= Html::element(\n\t\t\t'th',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-actions')->text()\n\t\t);\n\t\t$table .= Html::closeElement('tr');\n\n\t\t//results\n\t\t$table .= $pager->getBody();\n\n\t\t$table .= Html::closeElement('table');\n\n\t\t$table .= $pager->getNavigationBar();\n\n\t\treturn $table;\n\t}\n\n\tfunction listRequestsByStatus($status, &$output) {\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t$output->addHTML(Html::element(\n\t\t\t'h3',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-confirm-header-' . $status)->text()\n\t\t));\n\n\t\t$table = $this->requestTable(null, $status, $linkRenderer);\n\n\t\t$output->addHTML($table);\n\t}\n\n\tfunction defaultPage(&$output) {\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t$disp = Html::element('h3', [], wfMessage('scratch-confirmaccount-request-options')->text());\n\t\t$disp .= Html::openElement('form', [\n\t\t\t'action' => '',\n\t\t\t'method' => 'get'\n\t\t]);\n\t\t$disp .= Html::element(\n\t\t\t'label',\n\t\t\t['for' => 'scratch-confirmaccount-usernamesearch'],\n\t\t\twfMessage('scratch-confirmaccount-search-label')->text()\n\t\t);\n\t\t$disp .= Html::element('br');\n\t\t$disp .= Html::element('input', [\n\t\t\t'type' => 'search',\n\t\t\t'id' => 'scratch-confirmaccount-usernamesearch',\n\t\t\t'name' => 'username'\n\t\t]);\n\t\t$disp .= Html::element('input', [\n\t\t\t'type' => 'submit',\n\t\t\t'value' => wfMessage('scratch-confirmaccount-search')->parse()\n\t\t]);\n\t\t$disp .= Html::closeElement('form');\n\t\t$output->addHTML($disp);\n\n\t\t$this->listRequestsByStatus('new', $output);\n\t\t$this->listRequestsByStatus('awaiting-admin', $output);\n\t}\n\n\tfunction handleBlockFormSubmission(&$request, &$output, &$session) {\n\t\tif (!$this->canViewBlocks()) {\n\t\t\tthrow new PermissionsError('block');\n\t\t}\n\t\t\n\t\t$username = $request->getText('username');\n\t\t$reason = $request->getText('reason');\n\t\t$expirationTimestamp = $request->getText('expiration_timestamp');\n\t\tif ($expirationTimestamp !== 'existing') {\n\t\t\tif ($expirationTimestamp === 'infinite') {\n\t\t\t\t$expirationTimestamp = null;\n\t\t\t} else {\n\t\t\t\tif ($expirationTimestamp === 'othertime') {\n\t\t\t\t\t$expirationTimestamp = $request->getText('expiration_timestamp_time');\n\t\t\t\t}\n\t\t\t\t$expirationTimestamp = empty(trim($expirationTimestamp)) ? null : wfTimestamp(TS_MW, strtotime($expirationTimestamp));\n\t\t\t}\n\t\t}\n\t\t\n\t\t// anti-CSRF\n\t\tif (isCSRF($session, $request->getText('csrftoken'))) {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-csrf');\n\t\t\treturn;\n\t\t}\n\n\t\tif (!$username) {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-block-invalid-username');\n\t\t\treturn;\n\t\t}\n\t\tif (!$reason) {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-block-invalid-reason');\n\t\t\treturn;\n\t\t}\n\n\t\t$mutexId = 'scratch-confirmaccount-update-block-' . $username;\n\t\t$dbw = getTransactableDatabase($mutexId);\n\t\t\n\t\t$block = getSingleBlock($username, $dbw);\n\t\tif ($block) {\n\t\t\tupdateBlock($username, $reason, $expirationTimestamp, $this->getUser(), $dbw);\n\t\t} else {\n\t\t\tif ($expirationTimestamp === 'existing') $expirationTimestamp = null;\n\t\t\taddBlock($username, $reason, $expirationTimestamp, $this->getUser(), $dbw);\n\t\t}\n\n\t\t$output->redirect(SpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-blocks')->text())->getFullURL());\n\t\t\n\t\tcommitTransaction($dbw, $mutexId);\n\t\tJobQueueGroup::singleton()->push(new ExpiredBlockCleanupJob());\n\t}\n\n\tfunction handleUnblockFormSubmission(&$request, &$output, &$session) {\n\t\tif (!$this->canViewBlocks()) {\n\t\t\tthrow new PermissionsError('block');\n\t\t}\n\t\t\n\t\t$username = $request->getText('username');\n\t\t\n\t\tif (isCSRF($session, $request->getText('csrftoken'))) {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-csrf');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$mutexId = 'scratch-confirmaccount-update-unblock-' . $username;\n\t\t\n\t\t$dbw = getTransactableDatabase($mutexId);\n\n\t\t$block = getSingleBlock($username, $dbw);\n\t\tif (!$block) {\n\t\t\tcancelTransaction($dbw, $mutexId);\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-not-blocked');\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteBlock($username, $dbw);\n\n\t\t$output->redirect(SpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-blocks')->text())->getFullURL());\n\t\t\n\t\tcommitTransaction($dbw, $mutexId);\n\t\tJobQueueGroup::singleton()->push(new ExpiredBlockCleanupJob());\n\t}\n\n\tfunction handleFormSubmission(&$request, &$output, &$session) {\n\t\tif ($request->getText('action')) {\n\t\t\thandleRequestActionSubmission('admin', $this, $session);\n\t\t} else if ($request->getText('blockSubmit')) {\n\t\t\t$this->handleBlockFormSubmission($request, $output, $session);\n\t\t} else if ($request->getText('unblockSubmit')) {\n\t\t\t$this->handleUnblockFormSubmission($request, $output, $session);\n\t\t} else if ($request->getText('bypassAddUsername') || $request->getText('bypassRemoveUsername')) { //TODO: refactor to move all the subpages into their own files\n\t\t\t$bypassPage = new RequirementsBypassPage($this);\n\t\t\t$bypassPage->handleFormSubmission();\n\t\t}\n\t}\n\n\tfunction searchByUsername($username, &$request, &$output) {\t\t\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t$output->addHTML(Html::element(\n\t\t\t'h3',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-confirm-search-results', $username)->text()\n\t\t));\n\n\t\t$table = $this->requestTable($username, null, $linkRenderer);\n\n\t\t$output->addHTML($table);\n\t}\n\n\tfunction showTopLinks() {\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t$links = [];\n\n\t\t//the root ConfirmAccounts page\n\t\t$links[] = $linkRenderer->makeKnownLink(\n\t\t\tSpecialPage::getTitleFor('ConfirmAccounts'),\n\t\t\twfMessage('confirmaccounts')->text()\n\t\t);\n\n\t\t//the pages for each status\n\t\t$links += array_map(function ($status, $statusmsg) use($linkRenderer) {\n\t\t\treturn $linkRenderer->makeKnownLink(\n\t\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', $status),\n\t\t\t\twfMessage('scratch-confirmaccount-' . $status)->text()\n\t\t\t);\n\t\t}, array_keys(statuses), array_values(statuses));\n\t\t\n\t\t//blocks (if the current user can view them)\n\t\tif ($this->canViewBlocks()) {\n\t\t\t$links[] = $linkRenderer->makeKnownLink(\n\t\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-blocks')),\n\t\t\t\twfMessage('scratch-confirmaccount-blocks')->text()\n\t\t\t);\n\t\t}\n\n\t\t$links[] = $linkRenderer->makeKnownLink(\n\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-requirements-bypasses-url')),\n\t\t\twfMessage('scratch-confirmaccount-requirements-bypasses-admin-text')->text()\n\t\t);\n\n\t\t$this->getOutput()->setSubtitle($this->getLanguage()->pipeList($links));\n\t}\n\n\tfunction execute( $par ) {\t\t\n\t\t$request = $this->getRequest();\n\t\t$output = $this->getOutput();\n\t\t$language = $this->getLanguage();\n\t\t\n\t\t$output->setPageTitle( $this->msg( \"confirmaccounts\" )->escaped() );\n\t\t\n\t\t$output->addModules('ext.scratchConfirmAccount.js');\n\t\t$output->addModuleStyles('ext.scratchConfirmAccount.css');\n\t\t\n\t\t$session = $request->getSession();\n\t\t\n\t\t$this->setHeaders();\n\t\t$this->checkReadOnly();\n\n\t\t$this->showTopLinks();\n\n\t\t//check permissions\n\t\t$user = $this->getUser();\n\n\t\tif (!$user->isAllowed('createaccount')) {\n\t\t\tthrow new PermissionsError('createaccount');\n\t\t}\n\n\t\tif ($request->wasPosted()) {\n\t\t\treturn $this->handleFormSubmission($request, $output, $session);\n\t\t} else if (strpos($par, wfMessage('scratch-confirmaccount-blocks')->text()) === 0) {\n\t\t\treturn $this->blocksPage($par, $request, $output, $session);\n\t\t} else if (strpos($par, wfMessage('scratch-confirmaccount-requirements-bypasses-url')->text()) === 0) {\n\t\t\t$bypassPage = new RequirementsBypassPage($this);\n\t\t\treturn $bypassPage->render();\n\t\t} else if ($request->getText('username')) {\n\t\t\treturn $this->searchByUsername($request->getText('username'), $request, $output);\n\t\t} else if (isset(statuses[$par])) {\n\t\t\treturn $this->listRequestsByStatus($par, $output);\n\t\t} else if (ctype_digit($par)) {\n\t\t\treturn requestPage($par, 'admin', $this, $request->getSession());\n\t\t} else if (empty($par)) {\n\t\t\treturn $this->defaultPage($output);\n\t\t} else {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-nosuchrequest');\n\t\t}\n\t}\n}\n", "<?php\r\nrequire_once __DIR__ . '/../database/DatabaseInteractions.php';\r\n\r\nclass RequirementsBypassPage {\r\n    private $pageContext;\r\n\r\n    //the mapping of (form field name => function to call with it)\r\n    const requestVariableActionMapping = [\r\n        'bypassAddUsername' => 'addUsernameRequirementsBypass',\r\n        'bypassRemoveUsername' => 'removeUsernameRequirementsBypass'\r\n    ];\r\n\r\n    function __construct(SpecialPage $pageContext) {\r\n        $this->pageContext = $pageContext;\r\n    }\r\n\r\n    function handleFormSubmission() {\r\n        $request = $request = $this->pageContext->getRequest();\r\n\r\n        $dbw = getTransactableDatabase('scratch-confirmaccount-bypasses');\r\n\r\n        foreach (self::requestVariableActionMapping as $fieldKey => $action) {\r\n            if ($request->getText($fieldKey)) {\r\n                $action($request->getText($fieldKey), $dbw);\r\n            }\r\n        }\r\n\r\n        commitTransaction($dbw, 'scratch-confirmaccount-bypasses');\r\n\r\n        $this->render();\r\n    }\r\n\r\n    function showAddBypassForm() {\r\n        $output = $this->pageContext->getOutput();\r\n        $request = $this->pageContext->getRequest();\r\n        \r\n        $output->addHTML(\r\n            new OOUI\\FormLayout([\r\n                'action' => SpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-requirements-bypasses-url')->text())->getFullURL(),\r\n                'method' => 'post',\r\n                'items' => [\r\n                    new OOUI\\ActionFieldLayout(\r\n                        new OOUI\\TextInputWidget( [\r\n                            'name' => 'bypassAddUsername',\r\n                            'required' => true,\r\n                            'value' => $request->getText('username')\r\n                        ] ),\r\n                        new OOUI\\ButtonInputWidget([\r\n                            'type' => 'submit',\r\n                            'flags' => ['primary', 'progressive'],\r\n                            'label' => wfMessage('scratch-confirmaccount-requirements-bypasses-add')->parse()\r\n                        ])\r\n                    )\r\n                ],\r\n            ])\r\n        );\r\n    }\r\n\r\n    function showBypassesList() {\r\n        $output = $this->pageContext->getOutput();\r\n\r\n        $dbr = getReadOnlyDatabase();\r\n\r\n        $bypassUsernames = getUsernameBypasses($dbr);\r\n\r\n        $table = Html::openElement('table', [ 'class' => 'wikitable' ]);\r\n\r\n        $table .= Html::openElement('tr');\r\n        $table .= Html::element('th', [], wfMessage('scratch-confirmaccount-scratchusername'));\r\n        $table .= Html::element('th', [], wfMessage('scratch-confirmaccount-actions'));\r\n        $table .= Html::closeElement('tr');\r\n\r\n        foreach ($bypassUsernames as $username) {\r\n            $table .= Html::openElement('tr');\r\n\r\n            $table .= Html::element('td', [], $username);\r\n\r\n            $table .= Html::openElement('td');\r\n            $table .= Html::openElement('form', ['action' => SpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-requirements-bypasses-url')->text())->getFullURL(), 'method' => 'post']);\r\n            $table .= Html::element('input', ['type' => 'hidden', 'name' => 'bypassRemoveUsername', 'value' => $username]);\r\n            $table .= Html::element('input', ['type' => 'submit', 'value' => wfMessage('scratch-confirmaccount-requirements-bypasses-remove')->text()]);\r\n            $table .= Html::closeElement('form');\r\n            $table .= Html::closeElement('td');\r\n\r\n            $table .= Html::closeElement('tr');\r\n        }\r\n\r\n        $table .= Html::closeElement('table');\r\n\r\n        $output->addHTML($table);\r\n    }\r\n\r\n    function render() {\r\n        $output = $this->pageContext->getOutput();\r\n\r\n        $output->enableOOUI();\r\n\r\n        $this->showAddBypassForm();\r\n        $this->showBypassesList();\r\n    }\r\n}"], "fixing_code": ["<?php\nrequire_once __DIR__ . '/common.php';\nrequire_once __DIR__ . '/database/DatabaseInteractions.php';\nrequire_once __DIR__ . '/subpages/RequestPage.php';\nrequire_once __DIR__ . '/subpages/RequirementsBypassPage.php';\n\nfunction truncate(string $str, int $length) : string {\n\tassert($length >= 0);\n\t\n\treturn strlen($str) > $length ? substr($str, 0, $length) . '...' : $str;\n}\n\nclass AccountRequestPager extends AbstractAccountRequestPager {\n\tconst REQUEST_NOTES_TABLE_CELL_MAX_LENGTH = 500;\n\tprivate $linkRenderer, $language;\n\tfunction __construct($username, $status, $linkRenderer, $language) {\n\t\tparent::__construct($username, $status);\n\n\t\t$this->linkRenderer = $linkRenderer;\n\t\t$this->language = $language;\n\t}\t\n\n\tfunction rowFromRequest($accountRequest) {\n\t\t$row = Html::openElement('tr');\n\t\t$row .= Html::rawElement('td', [], humanTimestamp( $accountRequest->lastUpdated, $this->language ));\n\t\t$row .= Html::rawElement('td', [], linkToScratchProfile($accountRequest->username));\n\t\t$row .= Html::element('td', ['class' => 'mw-scratch-confirmaccount-requestnotestablecell'], truncate($accountRequest->requestNotes, self::REQUEST_NOTES_TABLE_CELL_MAX_LENGTH));\n\t\t$row .= Html::rawElement(\n\t\t\t'td',\n\t\t\t[],\n\t\t\t$this->linkRenderer->makeKnownLink(\n\t\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', $accountRequest->id),\n\t\t\t\twfMessage('scratch-confirmaccount-view')->text()\n\t\t\t)\n\t\t);\n\t\t$row .= Html::closeElement('tr');\n\n\t\treturn $row;\n\t}\n}\n\nclass SpecialConfirmAccounts extends SpecialPage {\n\tfunction __construct() {\n\t\tparent::__construct( 'ConfirmAccounts', 'createaccount' );\n\t}\n\n\tfunction getGroupName() {\n\t\treturn 'users';\n\t}\n\t\n\t//return if the current user can view/edit blocks\n\tfunction canViewBlocks() {\t\t\n\t\treturn $this->getUser()->isAllowed('block');\n\t}\n\n\tfunction blocksListPage(&$request, &$output, &$session) {\n\t\t$dbr = getReadOnlyDatabase();\n\t\t\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t//show the list of existing blocks\n\t\t$output->addHTML(Html::element(\n\t\t\t'h3',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-blocks')->text()\n\t\t));\n\n\t\t$blocks = getBlocks($dbr);\n\n\t\tif (empty($blocks)) {\n\t\t\t$output->addHTML(Html::element('p', [], wfMessage('scratch-confirmaccount-noblocks')));\n\t\t} else {\n\t\t\t$table = Html::openElement('table', [ 'class' => 'wikitable' ]);\n\n\t\t\t//table heading\n\t\t\t$table .= Html::openElement('tr');\n\t\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-scratchusername'));\n\t\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-blockreason'));\n\t\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-actions'));\n\t\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-block-expiration-time'));\n\t\t\t$table .= Html::closeElement('tr');\n\n\t\t\t//actual list of blocks\n\t\t\t$table .= implode(array_map(function ($block) use ($linkRenderer) {\n\t\t\t\t$row = Html::openElement('tr');\n\t\t\t\t$row .= Html::element('td', [], $block->blockedUsername);\n\t\t\t\t$row .= Html::element('td', [], $block->reason);\n\t\t\t\t$row .= Html::rawElement('td', [], $linkRenderer->makeKnownLink(\n\t\t\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-blocks')->text() . '/' . $block->blockedUsername),\n\t\t\t\t\twfMessage('scratch-confirmaccount-view')->text()\n\t\t\t\t));\n\t\t\t\t$row .= Html::rawElement('td', [], humanTimestampOrInfinite($block->expirationTimestamp, $this->getLanguage()));\n\t\t\t\t$row .= Html::closeElement('tr');\n\n\t\t\t\treturn $row;\n\t\t\t}, $blocks));\n\n\t\t\t$table .= Html::closeElement('table');\n\n\t\t\t$output->addHTML($table);\n\t\t}\n\n\t\t//also show a form to add a new block\n\t\t$output->addHTML(Html::element('h3', [], wfMessage('scratch-confirmaccount-add-block')->text()));\n\t\t$this->singleBlockForm('', $request, $output, $session, $dbr);\n\t}\n\n\t//show a form that allows editing an existing block or adding a new one (leave the username blank)\n\tfunction singleBlockForm($blockedUsername, &$request, &$output, &$session, IDatabase $dbr) {\n\t\tif (!$this->canViewBlocks()) {\n\t\t\tthrow new PermissionsError('block');\n\t\t}\n\t\t\n\t\t//get the block associated with the provided username\n\t\tif ($blockedUsername) {\n\t\t\t$block = getSingleBlock($blockedUsername, $dbr);\n\t\t\tif (!$block) {\n\t\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-not-blocked');\n\t\t\t\treturn;\n\t\t\t}\n\t\t} else {\n\t\t\t$block = false;\n\t\t}\n\n\t\tif ($block) {\n\t\t\t$output->addHTML(Html::element('h3', [], wfMessage('scratch-confirmaccount-vieweditblock')));\n\t\t}\n\n\t\t$output->addHTML(Html::openElement('form', ['method' => 'post', 'enctype' => 'multipart/form-data', 'action' => SpecialPage::getTitleFor('ConfirmAccounts')->getFullURL()]));\n\t\t\n\t\t// anti-CSRF\n\t\t$output->addHTML(Html::element('input', ['type' => 'hidden', 'name' => 'csrftoken', 'value' => setCSRFToken($session)]));\n\t\t\n\t\t$output->addHTML(Html::element('input', ['type' => 'hidden', 'name' => 'blockAction', 'value' => $block ? 'update' : 'create']));\n\n\t\t$table = Html::openElement('table', [ 'class' => 'wikitable' ]);\n\n\t\t$table .= Html::openElement('tr');\n\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-scratchusername')->text());\n\t\t$table .= Html::rawElement('td', [], Html::element('input', ['type' => 'text', 'name' => 'username', 'value' => $blockedUsername, 'readonly' => (bool)$block]));\n\t\t$table .= Html::closeElement('tr');\n\n\t\t$table .= Html::openElement('tr');\n\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-blockreason')->text());\n\t\t$table .= Html::rawElement('td', [], Html::element('textarea', ['class' => 'mw-scratch-confirmaccount-textarea', 'name' => 'reason'], $block ? $block->reason : ''));\n\t\t$table .= Html::closeElement('tr');\n\n\t\t$table .= Html::openElement('tr');\n\t\t$table .= Html::element('th', [], wfMessage('scratch-confirmaccount-block-expiration-time')->text());\n\t\t$table .= Html::rawElement('td', [], blockExpirationForm(\n\t\t\t$this->getLanguage(),\n\t\t\t$this->getUser(),\n\t\t\t$block !== false,\n\t\t\t$block ? $block->expirationTimestamp : null\n\t\t));\n\t\t$table .= Html::closeElement('tr');\n\n\t\t$table .= Html::closeElement('table');\n\n\t\t$output->addHTML($table);\n\n\t\t$output->addHTML(Html::element('input', ['type' => 'submit', 'name' => 'blockSubmit', 'value' => wfMessage('scratch-confirmaccount-submit')->text()]));\n\n\t\tif ($block) {\n\t\t\t$output->addHTML(Html::element('input', ['type' => 'submit', 'name' => 'unblockSubmit', 'value' => wfMessage('scratch-confirmaccount-unblock')->text()]));\n\t\t}\n\n\t\t$output->addHTML(Html::closeElement('form'));\n\t}\n\n\tfunction blocksPage($par, &$request, &$output, &$session) {\n\t\tif (!$this->canViewBlocks()) {\n\t\t\tthrow new PermissionsError('block');\n\t\t}\n\t\t\t\t\n\t\t$subpageParts = explode('/', $par);\n\n\t\tif (sizeof($subpageParts) < 2) {\n\t\t\treturn $this->blocksListPage($request, $output, $session);\n\t\t} else {\n\t\t\treturn $this->singleBlockForm($subpageParts[1], $request, $output, $session, getReadOnlyDatabase());\n\t\t}\n\t}\n\n\tfunction requestTable($username, $status, &$linkRenderer) {\n\t\t$pager = new AccountRequestPager($username, $status, $linkRenderer, $this->getLanguage());\n\n\t\tif ($pager->getNumRows() == 0) {\n\t\t\treturn Html::element('p', [], wfMessage('scratch-confirmaccount-norequests')->text());\n\t\t}\n\n\t\t$table = $pager->getNavigationBar();\n\n\t\t$table .= Html::openElement('table', [ 'class' => 'wikitable' ]);\n\n\t\t//table heading\n\t\t$table .= Html::openElement('tr');\n\t\t$table .= Html::element(\n\t\t\t'th',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-lastupdated')->text()\n\t\t);\n\t\t$table .= Html::element(\n\t\t\t'th',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-username')->text()\n\t\t);\n\t\t$table .= Html::element(\n\t\t\t'th',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-requestnotes')->text()\n\t\t);\n\t\t$table .= Html::element(\n\t\t\t'th',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-actions')->text()\n\t\t);\n\t\t$table .= Html::closeElement('tr');\n\n\t\t//results\n\t\t$table .= $pager->getBody();\n\n\t\t$table .= Html::closeElement('table');\n\n\t\t$table .= $pager->getNavigationBar();\n\n\t\treturn $table;\n\t}\n\n\tfunction listRequestsByStatus($status, &$output) {\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t$output->addHTML(Html::element(\n\t\t\t'h3',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-confirm-header-' . $status)->text()\n\t\t));\n\n\t\t$table = $this->requestTable(null, $status, $linkRenderer);\n\n\t\t$output->addHTML($table);\n\t}\n\n\tfunction defaultPage(&$output) {\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t$disp = Html::element('h3', [], wfMessage('scratch-confirmaccount-request-options')->text());\n\t\t$disp .= Html::openElement('form', [\n\t\t\t'action' => '',\n\t\t\t'method' => 'get'\n\t\t]);\n\t\t$disp .= Html::element(\n\t\t\t'label',\n\t\t\t['for' => 'scratch-confirmaccount-usernamesearch'],\n\t\t\twfMessage('scratch-confirmaccount-search-label')->text()\n\t\t);\n\t\t$disp .= Html::element('br');\n\t\t$disp .= Html::element('input', [\n\t\t\t'type' => 'search',\n\t\t\t'id' => 'scratch-confirmaccount-usernamesearch',\n\t\t\t'name' => 'username'\n\t\t]);\n\t\t$disp .= Html::element('input', [\n\t\t\t'type' => 'submit',\n\t\t\t'value' => wfMessage('scratch-confirmaccount-search')->parse()\n\t\t]);\n\t\t$disp .= Html::closeElement('form');\n\t\t$output->addHTML($disp);\n\n\t\t$this->listRequestsByStatus('new', $output);\n\t\t$this->listRequestsByStatus('awaiting-admin', $output);\n\t}\n\n\tfunction handleBlockFormSubmission(&$request, &$output, &$session) {\n\t\tif (!$this->canViewBlocks()) {\n\t\t\tthrow new PermissionsError('block');\n\t\t}\n\t\t\n\t\t$username = $request->getText('username');\n\t\t$reason = $request->getText('reason');\n\t\t$expirationTimestamp = $request->getText('expiration_timestamp');\n\t\tif ($expirationTimestamp !== 'existing') {\n\t\t\tif ($expirationTimestamp === 'infinite') {\n\t\t\t\t$expirationTimestamp = null;\n\t\t\t} else {\n\t\t\t\tif ($expirationTimestamp === 'othertime') {\n\t\t\t\t\t$expirationTimestamp = $request->getText('expiration_timestamp_time');\n\t\t\t\t}\n\t\t\t\t$expirationTimestamp = empty(trim($expirationTimestamp)) ? null : wfTimestamp(TS_MW, strtotime($expirationTimestamp));\n\t\t\t}\n\t\t}\n\t\t\n\t\t// anti-CSRF\n\t\tif (isCSRF($session, $request->getText('csrftoken'))) {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-csrf');\n\t\t\treturn;\n\t\t}\n\n\t\tif (!$username) {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-block-invalid-username');\n\t\t\treturn;\n\t\t}\n\t\tif (!$reason) {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-block-invalid-reason');\n\t\t\treturn;\n\t\t}\n\n\t\t$mutexId = 'scratch-confirmaccount-update-block-' . $username;\n\t\t$dbw = getTransactableDatabase($mutexId);\n\t\t\n\t\t$block = getSingleBlock($username, $dbw);\n\t\tif ($block) {\n\t\t\tupdateBlock($username, $reason, $expirationTimestamp, $this->getUser(), $dbw);\n\t\t} else {\n\t\t\tif ($expirationTimestamp === 'existing') $expirationTimestamp = null;\n\t\t\taddBlock($username, $reason, $expirationTimestamp, $this->getUser(), $dbw);\n\t\t}\n\n\t\t$output->redirect(SpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-blocks')->text())->getFullURL());\n\t\t\n\t\tcommitTransaction($dbw, $mutexId);\n\t\tJobQueueGroup::singleton()->push(new ExpiredBlockCleanupJob());\n\t}\n\n\tfunction handleUnblockFormSubmission(&$request, &$output, &$session) {\n\t\tif (!$this->canViewBlocks()) {\n\t\t\tthrow new PermissionsError('block');\n\t\t}\n\t\t\n\t\t$username = $request->getText('username');\n\t\t\n\t\tif (isCSRF($session, $request->getText('csrftoken'))) {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-csrf');\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t$mutexId = 'scratch-confirmaccount-update-unblock-' . $username;\n\t\t\n\t\t$dbw = getTransactableDatabase($mutexId);\n\n\t\t$block = getSingleBlock($username, $dbw);\n\t\tif (!$block) {\n\t\t\tcancelTransaction($dbw, $mutexId);\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-not-blocked');\n\t\t\treturn;\n\t\t}\n\n\t\tdeleteBlock($username, $dbw);\n\n\t\t$output->redirect(SpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-blocks')->text())->getFullURL());\n\t\t\n\t\tcommitTransaction($dbw, $mutexId);\n\t\tJobQueueGroup::singleton()->push(new ExpiredBlockCleanupJob());\n\t}\n\n\tfunction handleFormSubmission(&$request, &$output, &$session) {\n\t\tif ($request->getText('action')) {\n\t\t\thandleRequestActionSubmission('admin', $this, $session);\n\t\t} else if ($request->getText('blockSubmit')) {\n\t\t\t$this->handleBlockFormSubmission($request, $output, $session);\n\t\t} else if ($request->getText('unblockSubmit')) {\n\t\t\t$this->handleUnblockFormSubmission($request, $output, $session);\n\t\t} else if ($request->getText('bypassAddUsername') || $request->getText('bypassRemoveUsername')) { //TODO: refactor to move all the subpages into their own files\n\t\t\t$bypassPage = new RequirementsBypassPage($this);\n\t\t\t$bypassPage->handleFormSubmission($session);\n\t\t}\n\t}\n\n\tfunction searchByUsername($username, &$request, &$output) {\t\t\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t$output->addHTML(Html::element(\n\t\t\t'h3',\n\t\t\t[],\n\t\t\twfMessage('scratch-confirmaccount-confirm-search-results', $username)->text()\n\t\t));\n\n\t\t$table = $this->requestTable($username, null, $linkRenderer);\n\n\t\t$output->addHTML($table);\n\t}\n\n\tfunction showTopLinks() {\n\t\t$linkRenderer = $this->getLinkRenderer();\n\n\t\t$links = [];\n\n\t\t//the root ConfirmAccounts page\n\t\t$links[] = $linkRenderer->makeKnownLink(\n\t\t\tSpecialPage::getTitleFor('ConfirmAccounts'),\n\t\t\twfMessage('confirmaccounts')->text()\n\t\t);\n\n\t\t//the pages for each status\n\t\t$links += array_map(function ($status, $statusmsg) use($linkRenderer) {\n\t\t\treturn $linkRenderer->makeKnownLink(\n\t\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', $status),\n\t\t\t\twfMessage('scratch-confirmaccount-' . $status)->text()\n\t\t\t);\n\t\t}, array_keys(statuses), array_values(statuses));\n\t\t\n\t\t//blocks (if the current user can view them)\n\t\tif ($this->canViewBlocks()) {\n\t\t\t$links[] = $linkRenderer->makeKnownLink(\n\t\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-blocks')),\n\t\t\t\twfMessage('scratch-confirmaccount-blocks')->text()\n\t\t\t);\n\t\t}\n\n\t\t$links[] = $linkRenderer->makeKnownLink(\n\t\t\tSpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-requirements-bypasses-url')),\n\t\t\twfMessage('scratch-confirmaccount-requirements-bypasses-admin-text')->text()\n\t\t);\n\n\t\t$this->getOutput()->setSubtitle($this->getLanguage()->pipeList($links));\n\t}\n\n\tfunction execute( $par ) {\t\t\n\t\t$request = $this->getRequest();\n\t\t$output = $this->getOutput();\n\t\t$language = $this->getLanguage();\n\t\t\n\t\t$output->setPageTitle( $this->msg( \"confirmaccounts\" )->escaped() );\n\t\t\n\t\t$output->addModules('ext.scratchConfirmAccount.js');\n\t\t$output->addModuleStyles('ext.scratchConfirmAccount.css');\n\t\t\n\t\t$session = $request->getSession();\n\t\t\n\t\t$this->setHeaders();\n\t\t$this->checkReadOnly();\n\n\t\t$this->showTopLinks();\n\n\t\t//check permissions\n\t\t$user = $this->getUser();\n\n\t\tif (!$user->isAllowed('createaccount')) {\n\t\t\tthrow new PermissionsError('createaccount');\n\t\t}\n\n\t\tif ($request->wasPosted()) {\n\t\t\treturn $this->handleFormSubmission($request, $output, $session);\n\t\t} else if (strpos($par, wfMessage('scratch-confirmaccount-blocks')->text()) === 0) {\n\t\t\treturn $this->blocksPage($par, $request, $output, $session);\n\t\t} else if (strpos($par, wfMessage('scratch-confirmaccount-requirements-bypasses-url')->text()) === 0) {\n\t\t\t$bypassPage = new RequirementsBypassPage($this);\n\t\t\treturn $bypassPage->render($session);\n\t\t} else if ($request->getText('username')) {\n\t\t\treturn $this->searchByUsername($request->getText('username'), $request, $output);\n\t\t} else if (isset(statuses[$par])) {\n\t\t\treturn $this->listRequestsByStatus($par, $output);\n\t\t} else if (ctype_digit($par)) {\n\t\t\treturn requestPage($par, 'admin', $this, $request->getSession());\n\t\t} else if (empty($par)) {\n\t\t\treturn $this->defaultPage($output);\n\t\t} else {\n\t\t\t$output->showErrorPage('error', 'scratch-confirmaccount-nosuchrequest');\n\t\t}\n\t}\n}\n", "<?php\r\nrequire_once __DIR__ . '/../database/DatabaseInteractions.php';\r\nrequire_once __DIR__ . '/../common.php';\r\n\r\nuse MediaWiki\\Session\\Session;\r\n\r\nclass RequirementsBypassPage {\r\n    private $pageContext;\r\n\r\n    //the mapping of (form field name => function to call with it)\r\n    const requestVariableActionMapping = [\r\n        'bypassAddUsername' => 'addUsernameRequirementsBypass',\r\n        'bypassRemoveUsername' => 'removeUsernameRequirementsBypass'\r\n    ];\r\n\r\n    function __construct(SpecialPage $pageContext) {\r\n        $this->pageContext = $pageContext;\r\n    }\r\n\r\n    function handleFormSubmission(Session &$session) {\r\n        $request = $this->pageContext->getRequest();\r\n        \r\n        if (isCSRF($session, $request->getText('csrftoken'))) {\r\n    \t\t\t$this->pageContext->getOutput()->showErrorPage('error', 'scratch-confirmaccount-csrf');\r\n    \t\t\treturn;\r\n    \t\t}\r\n\r\n        $dbw = getTransactableDatabase('scratch-confirmaccount-bypasses');\r\n\r\n        foreach (self::requestVariableActionMapping as $fieldKey => $action) {\r\n            if ($request->getText($fieldKey)) {\r\n                $action($request->getText($fieldKey), $dbw);\r\n            }\r\n        }\r\n\r\n        commitTransaction($dbw, 'scratch-confirmaccount-bypasses');\r\n\r\n        $this->render($session);\r\n    }\r\n\r\n    function showAddBypassForm(Session &$session) {\r\n        $output = $this->pageContext->getOutput();\r\n        $request = $this->pageContext->getRequest();\r\n        \r\n        $output->addHTML(\r\n            new OOUI\\FormLayout([\r\n                'action' => SpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-requirements-bypasses-url')->text())->getFullURL(),\r\n                'method' => 'post',\r\n                'items' => [\r\n                    new OOUI\\HiddenInputWidget([\r\n                        'name' => 'csrftoken',\r\n                        'value' => setCSRFToken($session)\r\n                    ]),\r\n                    new OOUI\\ActionFieldLayout(\r\n                        new OOUI\\TextInputWidget( [\r\n                            'name' => 'bypassAddUsername',\r\n                            'required' => true,\r\n                            'value' => $request->getText('username')\r\n                        ] ),\r\n                        new OOUI\\ButtonInputWidget([\r\n                            'type' => 'submit',\r\n                            'flags' => ['primary', 'progressive'],\r\n                            'label' => wfMessage('scratch-confirmaccount-requirements-bypasses-add')->parse()\r\n                        ])\r\n                    )\r\n                ],\r\n            ])\r\n        );\r\n    }\r\n\r\n    function showBypassesList(Session &$session) {\r\n        $output = $this->pageContext->getOutput();\r\n\r\n        $dbr = getReadOnlyDatabase();\r\n\r\n        $bypassUsernames = getUsernameBypasses($dbr);\r\n\r\n        $table = Html::openElement('table', [ 'class' => 'wikitable' ]);\r\n\r\n        $table .= Html::openElement('tr');\r\n        $table .= Html::element('th', [], wfMessage('scratch-confirmaccount-scratchusername'));\r\n        $table .= Html::element('th', [], wfMessage('scratch-confirmaccount-actions'));\r\n        $table .= Html::closeElement('tr');\r\n\r\n        foreach ($bypassUsernames as $username) {\r\n            $table .= Html::openElement('tr');\r\n\r\n            $table .= Html::element('td', [], $username);\r\n\r\n            $table .= Html::openElement('td');\r\n            $table .= Html::openElement('form', ['action' => SpecialPage::getTitleFor('ConfirmAccounts', wfMessage('scratch-confirmaccount-requirements-bypasses-url')->text())->getFullURL(), 'method' => 'post']);\r\n            $table .= Html::element('input', ['type' => 'hidden', 'name' => 'csrftoken', 'value' => setCSRFToken($session)]);\r\n            $table .= Html::element('input', ['type' => 'hidden', 'name' => 'bypassRemoveUsername', 'value' => $username]);\r\n            $table .= Html::element('input', ['type' => 'submit', 'value' => wfMessage('scratch-confirmaccount-requirements-bypasses-remove')->text()]);\r\n            $table .= Html::closeElement('form');\r\n            $table .= Html::closeElement('td');\r\n\r\n            $table .= Html::closeElement('tr');\r\n        }\r\n\r\n        $table .= Html::closeElement('table');\r\n\r\n        $output->addHTML($table);\r\n    }\r\n\r\n    function render(Session &$session) {\r\n        $output = $this->pageContext->getOutput();\r\n\r\n        $output->enableOOUI();\r\n\r\n        $this->showAddBypassForm($session);\r\n        $this->showBypassesList($session);\r\n    }\r\n}"], "filenames": ["src/SpecialConfirmAccounts.php", "src/subpages/RequirementsBypassPage.php"], "buggy_code_start_loc": [365, 2], "buggy_code_end_loc": [449, 100], "fixing_code_start_loc": [365, 3], "fixing_code_end_loc": [449, 113], "type": "CWE-352", "message": "A Cross-Site Request Forgery (CSRF) in RequirementsBypassPage.php of Scratch Wiki scratch-confirmaccount-v3 allows attackers to modify account request requirement bypasses.", "other": {"cve": {"id": "CVE-2021-46252", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-15T23:15:08.107", "lastModified": "2022-02-24T15:00:18.833", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A Cross-Site Request Forgery (CSRF) in RequirementsBypassPage.php of Scratch Wiki scratch-confirmaccount-v3 allows attackers to modify account request requirement bypasses."}, {"lang": "es", "value": "Una vulnerabilidad de tipo Cross-Site Request Forgery (CSRF) en el archivo RequirementsBypassPage.php de Scratch Wiki scratch-confirmaccount-v3, permite a atacantes modificar los requisitos de petici\u00f3n de cuentas"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scratch-wiki:scratch_confirmaccount_v3:*:*:*:*:*:mediawiki:*:*", "versionEndExcluding": "2022-01-04", "matchCriteriaId": "E0384CE0-D09B-4F33-88E4-AABF25B0A515"}]}]}], "references": [{"url": "https://github.com/InternationalScratchWiki/scratch-confirmaccount-v3/commit/5ed5479de0a279377aa9f64362481efb4e75d8f9", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/InternationalScratchWiki/scratch-confirmaccount-v3/pull/155", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/InternationalScratchWiki/scratch-confirmaccount-v3/commit/5ed5479de0a279377aa9f64362481efb4e75d8f9"}}