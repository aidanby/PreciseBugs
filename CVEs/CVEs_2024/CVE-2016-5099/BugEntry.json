{"buggy_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Hold the PMA\\libraries\\DisplayResults class\n *\n * @package PhpMyAdmin\n */\nnamespace PMA\\libraries;\n\nuse SqlParser\\Utils\\Query;\nuse PMA\\libraries\\plugins\\transformations\\Text_Plain_Link;\n\nrequire_once './libraries/transformations.lib.php';\n\n/**\n * Handle all the functionalities related to displaying results\n * of sql queries, stored procedure, browsing sql processes or\n * displaying binary log.\n *\n * @package PhpMyAdmin\n */\nclass DisplayResults\n{\n\n    // Define constants\n    const NO_EDIT_OR_DELETE = 'nn';\n    const UPDATE_ROW = 'ur';\n    const DELETE_ROW = 'dr';\n    const KILL_PROCESS = 'kp';\n\n    const POSITION_LEFT = 'left';\n    const POSITION_RIGHT = 'right';\n    const POSITION_BOTH = 'both';\n    const POSITION_NONE = 'none';\n\n    const PLACE_TOP_DIRECTION_DROPDOWN = 'top_direction_dropdown';\n    const PLACE_BOTTOM_DIRECTION_DROPDOWN = 'bottom_direction_dropdown';\n\n    const DISPLAY_FULL_TEXT = 'F';\n    const DISPLAY_PARTIAL_TEXT = 'P';\n\n    const HEADER_FLIP_TYPE_AUTO = 'auto';\n    const HEADER_FLIP_TYPE_CSS = 'css';\n    const HEADER_FLIP_TYPE_FAKE = 'fake';\n\n    const DATE_FIELD = 'date';\n    const DATETIME_FIELD = 'datetime';\n    const TIMESTAMP_FIELD = 'timestamp';\n    const TIME_FIELD = 'time';\n    const STRING_FIELD = 'string';\n    const GEOMETRY_FIELD = 'geometry';\n    const BLOB_FIELD = 'BLOB';\n    const BINARY_FIELD = 'BINARY';\n\n    const RELATIONAL_KEY = 'K';\n    const RELATIONAL_DISPLAY_COLUMN = 'D';\n\n    const GEOMETRY_DISP_GEOM = 'GEOM';\n    const GEOMETRY_DISP_WKT = 'WKT';\n    const GEOMETRY_DISP_WKB = 'WKB';\n\n    const SMART_SORT_ORDER = 'SMART';\n    const ASCENDING_SORT_DIR = 'ASC';\n    const DESCENDING_SORT_DIR = 'DESC';\n\n    const TABLE_TYPE_INNO_DB = 'InnoDB';\n    const ALL_ROWS = 'all';\n    const QUERY_TYPE_SELECT = 'SELECT';\n\n    const ROUTINE_PROCEDURE = 'procedure';\n    const ROUTINE_FUNCTION = 'function';\n\n    const ACTION_LINK_CONTENT_ICONS = 'icons';\n    const ACTION_LINK_CONTENT_TEXT = 'text';\n\n\n    // Declare global fields\n\n    /** array with properties of the class */\n    private $_property_array = array(\n\n        /** string Database name */\n        'db' => null,\n\n        /** string Table name */\n        'table' => null,\n\n        /** string the URL to go back in case of errors */\n        'goto' => null,\n\n        /** string the SQL query */\n        'sql_query' => null,\n\n        /**\n         * integer the total number of rows returned by the SQL query without any\n         *         appended \"LIMIT\" clause programmatically\n         */\n        'unlim_num_rows' => null,\n\n        /** array meta information about fields */\n        'fields_meta' => null,\n\n        /** boolean */\n        'is_count' => null,\n\n        /** integer */\n        'is_export' => null,\n\n        /** boolean */\n        'is_func' => null,\n\n        /** integer */\n        'is_analyse' => null,\n\n        /** integer the total number of rows returned by the SQL query */\n        'num_rows' => null,\n\n        /** integer the total number of fields returned by the SQL query */\n        'fields_cnt' => null,\n\n        /** double time taken for execute the SQL query */\n        'querytime' => null,\n\n        /** string path for theme images directory */\n        'pma_theme_image' => null,\n\n        /** string */\n        'text_dir' => null,\n\n        /** boolean */\n        'is_maint' => null,\n\n        /** boolean */\n        'is_explain' => null,\n\n        /** boolean */\n        'is_show' => null,\n\n        /** boolean */\n        'is_browse_distinct' => null,\n\n        /** array table definitions */\n        'showtable' => null,\n\n        /** string */\n        'printview' => null,\n\n        /** string URL query */\n        'url_query' => null,\n\n        /** array column names to highlight */\n        'highlight_columns' => null,\n\n        /** array holding various display information */\n        'display_params' => null,\n\n        /** array mime types information of fields */\n        'mime_map' => null,\n\n        /** boolean */\n        'editable' => null,\n\n        /** random unique ID to distinguish result set */\n        'unique_id' => null,\n\n        /** where clauses for each row, each table in the row */\n        'whereClauseMap' => array(),\n    );\n\n    /**\n     * This variable contains the column transformation information\n     * for some of the system databases.\n     * One element of this array represent all relevant columns in all tables in\n     * one specific database\n     */\n    public $transformation_info;\n\n\n    /**\n     * Get any property of this class\n     *\n     * @param string $property name of the property\n     *\n     * @return mixed|void if property exist, value of the relevant property\n     */\n    public function __get($property)\n    {\n        if (array_key_exists($property, $this->_property_array)) {\n            return $this->_property_array[$property];\n        }\n    }\n\n\n    /**\n     * Set values for any property of this class\n     *\n     * @param string $property name of the property\n     * @param mixed  $value    value to set\n     *\n     * @return void\n     */\n    public function __set($property, $value)\n    {\n        if (array_key_exists($property, $this->_property_array)) {\n            $this->_property_array[$property] = $value;\n        }\n    }\n\n\n    /**\n     * Constructor for DisplayResults class\n     *\n     * @param string $db        the database name\n     * @param string $table     the table name\n     * @param string $goto      the URL to go back in case of errors\n     * @param string $sql_query the SQL query\n     *\n     * @access  public\n     */\n    public function __construct($db, $table, $goto, $sql_query)\n    {\n        $this->_setDefaultTransformations();\n\n        $this->__set('db', $db);\n        $this->__set('table', $table);\n        $this->__set('goto', $goto);\n        $this->__set('sql_query', $sql_query);\n        $this->__set('unique_id', rand());\n    }\n\n    /**\n     * Sets default transformations for some columns\n     *\n     * @return void\n     */\n    private  function _setDefaultTransformations()\n    {\n        $json_highlighting_data = array(\n            'libraries/plugins/transformations/output/Text_Plain_Json.php',\n            'PMA\\libraries\\plugins\\transformations\\output\\Text_Plain_Json',\n            'Text_Plain'\n        );\n        $sql_highlighting_data = array(\n            'libraries/plugins/transformations/output/Text_Plain_Sql.php',\n            'PMA\\libraries\\plugins\\transformations\\output\\Text_Plain_Sql',\n            'Text_Plain'\n        );\n        $blob_sql_highlighting_data = array(\n            'libraries/plugins/transformations/output/Text_Octetstream_Sql.php',\n            'PMA\\libraries\\plugins\\transformations\\output\\Text_Octetstream_Sql',\n            'Text_Octetstream'\n        );\n        $link_data = array(\n            'libraries/plugins/transformations/Text_Plain_Link.php',\n            'PMA\\libraries\\plugins\\transformations\\Text_Plain_Link',\n            'Text_Plain'\n        );\n        $this->transformation_info = array(\n            'information_schema' => array(\n                'events' => array(\n                    'event_definition' => $sql_highlighting_data\n                ),\n                'processlist' => array(\n                    'info' => $sql_highlighting_data\n                ),\n                'routines' => array(\n                    'routine_definition' => $sql_highlighting_data\n                ),\n                'triggers' => array(\n                    'action_statement' => $sql_highlighting_data\n                ),\n                'views' => array(\n                    'view_definition' => $sql_highlighting_data\n                )\n            ),\n            'mysql' => array(\n                'event' => array(\n                    'body' => $blob_sql_highlighting_data,\n                    'body_utf8' => $blob_sql_highlighting_data\n                ),\n                'general_log' => array(\n                    'argument' => $sql_highlighting_data\n                ),\n                'help_category' => array(\n                    'url' => $link_data\n                ),\n                'help_topic' => array(\n                    'example' => $sql_highlighting_data,\n                    'url' => $link_data\n                ),\n                'proc' => array(\n                    'param_list' => $blob_sql_highlighting_data,\n                    'returns' => $blob_sql_highlighting_data,\n                    'body' => $blob_sql_highlighting_data,\n                    'body_utf8' => $blob_sql_highlighting_data\n                ),\n                'slow_log' => array(\n                    'sql_text' => $sql_highlighting_data\n                )\n            )\n        );\n\n        $cfgRelation = PMA_getRelationsParam();\n        if ($cfgRelation['db']) {\n            $this->transformation_info[$cfgRelation['db']] = array();\n            $relDb = &$this->transformation_info[$cfgRelation['db']];\n            if (! empty($cfgRelation['history'])) {\n                $relDb[$cfgRelation['history']] = array(\n                    'sqlquery' => $sql_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['bookmark'])) {\n                $relDb[$cfgRelation['bookmark']] = array(\n                    'query' => $sql_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['tracking'])) {\n                $relDb[$cfgRelation['tracking']] = array(\n                    'schema_sql' => $sql_highlighting_data,\n                    'data_sql' => $sql_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['favorite'])) {\n                $relDb[$cfgRelation['favorite']] = array(\n                    'tables' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['recent'])) {\n                $relDb[$cfgRelation['recent']] = array(\n                    'tables' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['savedsearches'])) {\n                $relDb[$cfgRelation['savedsearches']] = array(\n                    'search_data' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['designer_settings'])) {\n                $relDb[$cfgRelation['designer_settings']] = array(\n                    'settings_data' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['table_uiprefs'])) {\n                $relDb[$cfgRelation['table_uiprefs']] = array(\n                    'prefs' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['userconfig'])) {\n                $relDb[$cfgRelation['userconfig']] = array(\n                    'config_data' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['export_templates'])) {\n                $relDb[$cfgRelation['export_templates']] = array(\n                    'template_data' => $json_highlighting_data\n                );\n            }\n        }\n    }\n\n    /**\n     * Set properties which were not initialized at the constructor\n     *\n     * @param integer $unlim_num_rows the total number of rows returned by\n     *                                     the SQL query without any appended\n     *                                     \"LIMIT\" clause programmatically\n     * @param array   $fields_meta    meta information about fields\n     * @param boolean $is_count       statement is SELECT COUNT\n     * @param integer $is_export      statement contains INTO OUTFILE\n     * @param boolean $is_func        statement contains a function like SUM()\n     * @param integer $is_analyse     statement contains PROCEDURE ANALYSE\n     * @param integer $num_rows       total no. of rows returned by SQL query\n     * @param integer $fields_cnt     total no.of fields returned by SQL query\n     * @param double  $querytime      time taken for execute the SQL query\n     * @param string  $pmaThemeImage  path for theme images directory\n     * @param string  $text_dir       text direction\n     * @param boolean $is_maint       statement contains a maintenance command\n     * @param boolean $is_explain     statement contains EXPLAIN\n     * @param boolean $is_show        statement contains SHOW\n     * @param array   $showtable      table definitions\n     * @param string  $printview      print view was requested\n     * @param string  $url_query      URL query\n     * @param boolean $editable       whether the results set is editable\n     * @param boolean $is_browse_dist whether browsing distinct values\n     *\n     * @return void\n     *\n     * @see     sql.php\n     */\n    public function setProperties(\n        $unlim_num_rows, $fields_meta, $is_count, $is_export, $is_func,\n        $is_analyse, $num_rows, $fields_cnt, $querytime, $pmaThemeImage, $text_dir,\n        $is_maint, $is_explain, $is_show, $showtable, $printview, $url_query,\n        $editable, $is_browse_dist\n    ) {\n\n        $this->__set('unlim_num_rows', $unlim_num_rows);\n        $this->__set('fields_meta', $fields_meta);\n        $this->__set('is_count', $is_count);\n        $this->__set('is_export', $is_export);\n        $this->__set('is_func', $is_func);\n        $this->__set('is_analyse', $is_analyse);\n        $this->__set('num_rows', $num_rows);\n        $this->__set('fields_cnt', $fields_cnt);\n        $this->__set('querytime', $querytime);\n        $this->__set('pma_theme_image', $pmaThemeImage);\n        $this->__set('text_dir', $text_dir);\n        $this->__set('is_maint', $is_maint);\n        $this->__set('is_explain', $is_explain);\n        $this->__set('is_show', $is_show);\n        $this->__set('showtable', $showtable);\n        $this->__set('printview', $printview);\n        $this->__set('url_query', $url_query);\n        $this->__set('editable', $editable);\n        $this->__set('is_browse_distinct', $is_browse_dist);\n\n    } // end of the 'setProperties()' function\n\n\n    /**\n     * Defines the parts to display for a print view\n     *\n     * @param array $displayParts the parts to display\n     *\n     * @return array $displayParts the modified display parts\n     *\n     * @access  private\n     *\n     */\n    private function _setDisplayPartsForPrintView($displayParts)\n    {\n        // set all elements to false!\n        $displayParts['edit_lnk']  = self::NO_EDIT_OR_DELETE; // no edit link\n        $displayParts['del_lnk']   = self::NO_EDIT_OR_DELETE; // no delete link\n        $displayParts['sort_lnk']  = (string) '0';\n        $displayParts['nav_bar']   = (string) '0';\n        $displayParts['bkm_form']  = (string) '0';\n        $displayParts['text_btn']  = (string) '0';\n        $displayParts['pview_lnk'] = (string) '0';\n\n        return $displayParts;\n    }\n\n    /**\n     * Defines the parts to display for a SHOW statement\n     *\n     * @param array $displayParts the parts to display\n     *\n     * @return array $displayParts the modified display parts\n     *\n     * @access  private\n     *\n     */\n    private function _setDisplayPartsForShow($displayParts)\n    {\n        preg_match(\n            '@^SHOW[[:space:]]+(VARIABLES|(FULL[[:space:]]+)?'\n            . 'PROCESSLIST|STATUS|TABLE|GRANTS|CREATE|LOGS|DATABASES|FIELDS'\n            . ')@i',\n            $this->__get('sql_query'), $which\n        );\n\n        $bIsProcessList = isset($which[1]);\n        if ($bIsProcessList) {\n            $str = ' ' . strtoupper($which[1]);\n            $bIsProcessList = $bIsProcessList\n                && strpos($str, 'PROCESSLIST') > 0;\n        }\n\n        if ($bIsProcessList) {\n            // no edit link\n            $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;\n            // \"kill process\" type edit link\n            $displayParts['del_lnk']  = self::KILL_PROCESS;\n        } else {\n            // Default case -> no links\n            // no edit link\n            $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;\n            // no delete link\n            $displayParts['del_lnk']  = self::NO_EDIT_OR_DELETE;\n        }\n        // Other settings\n        $displayParts['sort_lnk']  = (string) '0';\n        $displayParts['nav_bar']   = (string) '0';\n        $displayParts['bkm_form']  = (string) '1';\n        $displayParts['text_btn']  = (string) '1';\n        $displayParts['pview_lnk'] = (string) '1';\n\n        return $displayParts;\n    }\n\n    /**\n     * Defines the parts to display for statements not related to data\n     *\n     * @param array $displayParts the parts to display\n     *\n     * @return array $displayParts the modified display parts\n     *\n     * @access  private\n     *\n     */\n    private function _setDisplayPartsForNonData($displayParts)\n    {\n        // Statement is a \"SELECT COUNT\", a\n        // \"CHECK/ANALYZE/REPAIR/OPTIMIZE/CHECKSUM\", an \"EXPLAIN\" one or\n        // contains a \"PROC ANALYSE\" part\n        $displayParts['edit_lnk']  = self::NO_EDIT_OR_DELETE; // no edit link\n        $displayParts['del_lnk']   = self::NO_EDIT_OR_DELETE; // no delete link\n        $displayParts['sort_lnk']  = (string) '0';\n        $displayParts['nav_bar']   = (string) '0';\n        $displayParts['bkm_form']  = (string) '1';\n\n        if ($this->__get('is_maint')) {\n            $displayParts['text_btn']  = (string) '1';\n        } else {\n            $displayParts['text_btn']  = (string) '0';\n        }\n        $displayParts['pview_lnk'] = (string) '1';\n\n        return $displayParts;\n    }\n\n    /**\n     * Defines the parts to display for other statements (probably SELECT)\n     *\n     * @param array $displayParts the parts to display\n     *\n     * @return array $displayParts the modified display parts\n     *\n     * @access  private\n     *\n     */\n    private function _setDisplayPartsForSelect($displayParts)\n    {\n        // Other statements (ie \"SELECT\" ones) -> updates\n        // $displayParts['edit_lnk'], $displayParts['del_lnk'] and\n        // $displayParts['text_btn'] (keeps other default values)\n\n        $fields_meta = $this->__get('fields_meta');\n        $prev_table = '';\n        $displayParts['text_btn']  = (string) '1';\n        $number_of_columns = $this->__get('fields_cnt');\n\n        for ($i = 0; $i < $number_of_columns; $i++) {\n\n            $is_link = ($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)\n                || ($displayParts['sort_lnk'] != '0');\n\n            // Displays edit/delete/sort/insert links?\n            if ($is_link\n                && $prev_table != ''\n                && $fields_meta[$i]->table != ''\n                && $fields_meta[$i]->table != $prev_table\n            ) {\n                // don't display links\n                $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;\n                $displayParts['del_lnk']  = self::NO_EDIT_OR_DELETE;\n                /**\n                 * @todo May be problematic with same field names\n                 * in two joined table.\n                 */\n                // $displayParts['sort_lnk'] = (string) '0';\n                if ($displayParts['text_btn'] == '1') {\n                    break;\n                }\n            } // end if\n\n            // Always display print view link\n            $displayParts['pview_lnk'] = (string) '1';\n            if ($fields_meta[$i]->table != '') {\n                $prev_table = $fields_meta[$i]->table;\n            }\n        } // end for\n\n        if ($prev_table == '') { // no table for any of the columns\n            // don't display links\n            $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;\n            $displayParts['del_lnk']  = self::NO_EDIT_OR_DELETE;\n        }\n\n        return $displayParts;\n    }\n\n    /**\n     * Defines the parts to display for the results of a SQL query\n     * and the total number of rows\n     *\n     * @param array $displayParts the parts to display (see a few\n     *                            lines above for explanations)\n     *\n     * @return array the first element is an array with explicit indexes\n     *               for all the display elements\n     *               the second element is the total number of rows returned\n     *               by the SQL query without any programmatically appended\n     *               LIMIT clause (just a copy of $unlim_num_rows if it exists,\n     *               else computed inside this function)\n     *\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _setDisplayPartsAndTotal($displayParts)\n    {\n        $the_total = 0;\n\n        // 1. Following variables are needed for use in isset/empty or\n        //    use with array indexes or safe use in foreach\n        $db = $this->__get('db');\n        $table = $this->__get('table');\n        $unlim_num_rows = $this->__get('unlim_num_rows');\n        $num_rows = $this->__get('num_rows');\n        $printview = $this->__get('printview');\n\n        // 2. Updates the display parts\n        if ($printview == '1') {\n            $displayParts = $this->_setDisplayPartsForPrintView($displayParts);\n\n        } elseif ($this->__get('is_count') || $this->__get('is_analyse')\n            || $this->__get('is_maint') || $this->__get('is_explain')\n        ) {\n            $displayParts = $this->_setDisplayPartsForNonData($displayParts);\n\n        } elseif ($this->__get('is_show')) {\n            $displayParts = $this->_setDisplayPartsForShow($displayParts);\n\n        } else {\n            $displayParts = $this->_setDisplayPartsForSelect($displayParts);\n        } // end if..elseif...else\n\n        // 3. Gets the total number of rows if it is unknown\n        if (isset($unlim_num_rows) && $unlim_num_rows != '') {\n            $the_total = $unlim_num_rows;\n        } elseif ((($displayParts['nav_bar'] == '1')\n            || ($displayParts['sort_lnk'] == '1'))\n            && (mb_strlen($db) && !empty($table))\n        ) {\n            $the_total = $GLOBALS['dbi']->getTable($db, $table)->countRecords();\n        }\n\n        // if for COUNT query, number of rows returned more than 1\n        // (may be being used GROUP BY)\n        if ($this->__get('is_count') && isset($num_rows) && $num_rows > 1) {\n            $displayParts['nav_bar']   = (string) '1';\n            $displayParts['sort_lnk']  = (string) '1';\n        }\n        // 4. If navigation bar or sorting fields names URLs should be\n        //    displayed but there is only one row, change these settings to\n        //    false\n        if ($displayParts['nav_bar'] == '1' || $displayParts['sort_lnk'] == '1') {\n\n            // - Do not display sort links if less than 2 rows.\n            // - For a VIEW we (probably) did not count the number of rows\n            //   so don't test this number here, it would remove the possibility\n            //   of sorting VIEW results.\n            $_table = new Table($table, $db);\n            if (isset($unlim_num_rows)\n                && ($unlim_num_rows < 2)\n                && ! $_table->isView()\n            ) {\n                $displayParts['sort_lnk'] = (string) '0';\n            }\n        } // end if (3)\n\n        return array($displayParts, $the_total);\n\n    } // end of the 'setDisplayPartsAndTotal()' function\n\n\n    /**\n     * Return true if we are executing a query in the form of\n     * \"SELECT * FROM <a table> ...\"\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return boolean\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders(), _getColumnParams()\n     */\n    private function _isSelect($analyzed_sql_results)\n    {\n        return ! ($this->__get('is_count')\n                || $this->__get('is_export')\n                || $this->__get('is_func')\n                || $this->__get('is_analyse'))\n            && !empty($analyzed_sql_results['select_from'])\n            && !empty($analyzed_sql_results['statement']->from)\n            && (count($analyzed_sql_results['statement']->from) == 1)\n            && !empty($analyzed_sql_results['statement']->from[0]->table);\n    }\n\n\n    /**\n     * Get a navigation button\n     *\n     * @param string  $caption            iconic caption for button\n     * @param string  $title              text for button\n     * @param integer $pos                position for next query\n     * @param string  $html_sql_query     query ready for display\n     * @param boolean $back               whether 'begin' or 'previous'\n     * @param string  $onsubmit           optional onsubmit clause\n     * @param string  $input_for_real_end optional hidden field for special treatment\n     * @param string  $onclick            optional onclick clause\n     *\n     * @return string                     html content\n     *\n     * @access  private\n     *\n     * @see     _getMoveBackwardButtonsForTableNavigation(),\n     *          _getMoveForwardButtonsForTableNavigation()\n     */\n    private function _getTableNavigationButton(\n        $caption, $title, $pos, $html_sql_query, $back, $onsubmit = '',\n        $input_for_real_end = '', $onclick = ''\n    ) {\n\n        $caption_output = '';\n        if ($back) {\n            if (Util::showIcons('TableNavigationLinksMode')) {\n                $caption_output .= $caption;\n            }\n            if (Util::showText('TableNavigationLinksMode')) {\n                $caption_output .= '&nbsp;' . $title;\n            }\n        } else {\n            if (Util::showText('TableNavigationLinksMode')) {\n                $caption_output .= $title;\n            }\n            if (Util::showIcons('TableNavigationLinksMode')) {\n                $caption_output .= '&nbsp;' . $caption;\n            }\n        }\n        $title_output = ' title=\"' . $title . '\"';\n\n        return '<td>'\n            . '<form action=\"sql.php\" method=\"post\" ' . $onsubmit . '>'\n            . PMA_URL_getHiddenInputs(\n                $this->__get('db'), $this->__get('table')\n            )\n            . '<input type=\"hidden\" name=\"sql_query\" value=\"'\n            . $html_sql_query . '\" />'\n            . '<input type=\"hidden\" name=\"pos\" value=\"' . $pos . '\" />'\n            . '<input type=\"hidden\" name=\"is_browse_distinct\" value=\"'\n            . $this->__get('is_browse_distinct') . '\" />'\n            . '<input type=\"hidden\" name=\"goto\" value=\"' . $this->__get('goto')\n            . '\" />'\n            . $input_for_real_end\n            . '<input type=\"submit\" name=\"navig\"'\n            . ' class=\"ajax\" '\n            . 'value=\"' . $caption_output . '\" ' . $title_output . $onclick . ' />'\n            . '</form>'\n            . '</td>';\n\n    } // end function _getTableNavigationButton()\n\n\n    /**\n     * Possibly return a page selector for table navigation\n     *\n     * @param string $table_navigation_html the current navigation HTML\n     *\n     * @return array ($table_navigation_html, $nbTotalPage)\n     *\n     * @access  private\n     *\n     */\n    private function _getHtmlPageSelector($table_navigation_html)\n    {\n        $pageNow = @floor(\n            $_SESSION['tmpval']['pos']\n            / $_SESSION['tmpval']['max_rows']\n        ) + 1;\n\n        $nbTotalPage = @ceil(\n            $this->__get('unlim_num_rows')\n            / $_SESSION['tmpval']['max_rows']\n        );\n\n        if ($nbTotalPage > 1) {\n            $table_navigation_html .= '<td>';\n            $_url_params = array(\n                'db'                 => $this->__get('db'),\n                'table'              => $this->__get('table'),\n                'sql_query'          => $this->__get('sql_query'),\n                'goto'               => $this->__get('goto'),\n                'is_browse_distinct' => $this->__get('is_browse_distinct'),\n            );\n\n            //<form> to keep the form alignment of button < and <<\n            // and also to know what to execute when the selector changes\n            $table_navigation_html .= '<form action=\"sql.php'\n                . PMA_URL_getCommon($_url_params)\n                . '\" method=\"post\">';\n\n            $table_navigation_html .= Util::pageselector(\n                'pos',\n                $_SESSION['tmpval']['max_rows'],\n                $pageNow, $nbTotalPage, 200, 5, 5, 20, 10\n            );\n\n            $table_navigation_html .= '</form>'\n                . '</td>';\n        }\n        return array($table_navigation_html, $nbTotalPage);\n    }\n\n    /**\n     * Get a navigation bar to browse among the results of a SQL query\n     *\n     * @param integer $pos_next         the offset for the \"next\" page\n     * @param integer $pos_prev         the offset for the \"previous\" page\n     * @param boolean $is_innodb        whether its InnoDB or not\n     * @param string  $sort_by_key_html the sort by key dialog\n     *\n     * @return string                            html content\n     *\n     * @access  private\n     *\n     * @see     _getTable()\n     */\n    private function _getTableNavigation(\n        $pos_next, $pos_prev, $is_innodb, $sort_by_key_html\n    ) {\n\n        $table_navigation_html = '';\n\n        // here, using htmlentities() would cause problems if the query\n        // contains accented characters\n        $html_sql_query = htmlspecialchars($this->__get('sql_query'));\n\n        // Navigation bar\n        $table_navigation_html\n            .= '<table class=\"navigation nospacing nopadding print_ignore\">'\n            . '<tr>'\n            . '<td class=\"navigation_separator\"></td>';\n\n        // Move to the beginning or to the previous page\n        if ($_SESSION['tmpval']['pos']\n            && ($_SESSION['tmpval']['max_rows'] != self::ALL_ROWS)\n        ) {\n\n            $table_navigation_html\n                .= $this->_getMoveBackwardButtonsForTableNavigation(\n                    $html_sql_query, $pos_prev\n                );\n\n        } // end move back\n\n        $nbTotalPage = 1;\n        //page redirection\n        // (unless we are showing all records)\n        if ($_SESSION['tmpval']['max_rows'] != self::ALL_ROWS) {\n            list(\n                $table_navigation_html,\n                $nbTotalPage\n            ) = $this->_getHtmlPageSelector($table_navigation_html);\n        }\n\n        $showing_all = false;\n        if ($_SESSION['tmpval']['max_rows'] == self::ALL_ROWS) {\n            $showing_all = true;\n        }\n\n        // Move to the next page or to the last one\n        $endpos = $_SESSION['tmpval']['pos']\n            + $_SESSION['tmpval']['max_rows'];\n\n        if (($endpos < $this->__get('unlim_num_rows'))\n            && ($this->__get('num_rows') >= $_SESSION['tmpval']['max_rows'])\n            && ($_SESSION['tmpval']['max_rows'] != self::ALL_ROWS)\n        ) {\n\n            $table_navigation_html\n                .= $this->_getMoveForwardButtonsForTableNavigation(\n                    $html_sql_query, $pos_next, $is_innodb\n                );\n\n        } // end move toward\n\n        // show separator if pagination happen\n        if ($nbTotalPage > 1) {\n            $table_navigation_html\n                .= '<td><div class=\"navigation_separator\">|</div></td>';\n        }\n\n        // Display the \"Show all\" button if allowed\n        if ($GLOBALS['cfg']['ShowAll'] || ($this->__get('unlim_num_rows') <= 500) ) {\n\n            $table_navigation_html .= $this->_getShowAllCheckboxForTableNavigation(\n                $showing_all, $html_sql_query\n            );\n\n            $table_navigation_html\n                .= '<td><div class=\"navigation_separator\">|</div></td>';\n\n        } // end show all\n\n        $table_navigation_html .= '<td>'\n            . '<div class=\"save_edited hide\">'\n            . '<input type=\"submit\" value=\"' . __('Save edited data') . '\" />'\n            . '<div class=\"navigation_separator\">|</div>'\n            . '</div>'\n            . '</td>'\n            . '<td>'\n            . '<div class=\"restore_column hide\">'\n            . '<input type=\"submit\" value=\"' . __('Restore column order') . '\" />'\n            . '<div class=\"navigation_separator\">|</div>'\n            . '</div>'\n            . '</td>';\n\n        // if displaying a VIEW, $unlim_num_rows could be zero because\n        // of $cfg['MaxExactCountViews']; in this case, avoid passing\n        // the 5th parameter to checkFormElementInRange()\n        // (this means we can't validate the upper limit\n        $table_navigation_html .= '<td class=\"navigation_goto\">';\n\n        $table_navigation_html .= '<form action=\"sql.php\" method=\"post\" '\n            . 'onsubmit=\"return '\n                . '(checkFormElementInRange('\n                    . 'this, '\n                    . '\\'session_max_rows\\', '\n                    . '\\''\n                    . str_replace('\\'', '\\\\\\'', __('%d is not valid row number.'))\n                    . '\\', '\n                    . '1)'\n                . ' &amp;&amp; '\n                . 'checkFormElementInRange('\n                    . 'this, '\n                    . '\\'pos\\', '\n                    . '\\''\n                    . str_replace('\\'', '\\\\\\'', __('%d is not valid row number.'))\n                    . '\\', '\n                    . '0'\n                    . (($this->__get('unlim_num_rows') > 0)\n                        ? ', ' . ($this->__get('unlim_num_rows') - 1)\n                        : ''\n                    )\n                    . ')'\n                . ')'\n            . '\">';\n\n        $table_navigation_html .= PMA_URL_getHiddenInputs(\n            $this->__get('db'), $this->__get('table')\n        );\n\n        $table_navigation_html .= $this->_getAdditionalFieldsForTableNavigation(\n            $html_sql_query\n        );\n\n        $table_navigation_html .= '</form>'\n            . '</td>'\n            . '<td class=\"navigation_separator\"></td>'\n            . '<td>'\n            . '<span>' . __('Filter rows') . ':</span>'\n            . '<input type=\"text\" class=\"filter_rows\"'\n            . ' placeholder=\"' . __('Search this table') . '\"'\n            . ' data-for=\"' . $this->__get('unique_id') . '\" />'\n            . '</td>';\n\n        $table_navigation_html .= '<td>' . $sort_by_key_html . '</td>';\n\n        $table_navigation_html .= '<td class=\"navigation_separator\"></td>'\n            . '</tr>'\n            . '</table>';\n\n        return $table_navigation_html;\n\n    } // end of the '_getTableNavigation()' function\n\n\n    /**\n     * Prepare move backward buttons - previous and first\n     *\n     * @param string  $html_sql_query the sql encoded by html special characters\n     * @param integer $pos_prev       the offset for the \"previous\" page\n     *\n     * @return  string                  html content\n     *\n     * @access  private\n     *\n     * @see     _getTableNavigation()\n     */\n    private function _getMoveBackwardButtonsForTableNavigation(\n        $html_sql_query, $pos_prev\n    ) {\n        return $this->_getTableNavigationButton(\n            '&lt;&lt;', _pgettext('First page', 'Begin'), 0, $html_sql_query, true\n        )\n        . $this->_getTableNavigationButton(\n            '&lt;', _pgettext('Previous page', 'Previous'), $pos_prev,\n            $html_sql_query, true\n        );\n    } // end of the '_getMoveBackwardButtonsForTableNavigation()' function\n\n\n    /**\n     * Prepare Show All checkbox for table navigation\n     *\n     * @param bool   $showing_all    whether all rows are shown currently\n     * @param string $html_sql_query the sql encoded by html special characters\n     *\n     * @return  string                          html content\n     *\n     * @access  private\n     *\n     * @see     _getTableNavigation()\n     */\n    private function _getShowAllCheckboxForTableNavigation(\n        $showing_all, $html_sql_query\n    ) {\n        return \"\\n\"\n            . '<td>'\n            . '<form action=\"sql.php\" method=\"post\">'\n            . PMA_URL_getHiddenInputs(\n                $this->__get('db'), $this->__get('table')\n            )\n            . '<input type=\"hidden\" name=\"sql_query\" value=\"'\n            . $html_sql_query . '\" />'\n            . '<input type=\"hidden\" name=\"pos\" value=\"0\" />'\n            . '<input type=\"hidden\" name=\"is_browse_distinct\" value=\"'\n            . $this->__get('is_browse_distinct') . '\" />'\n            . '<input type=\"hidden\" name=\"session_max_rows\" value=\"'\n            . (! $showing_all ? 'all' : $GLOBALS['cfg']['MaxRows']) . '\" />'\n            . '<input type=\"hidden\" name=\"goto\" value=\"' . $this->__get('goto')\n            . '\" />'\n            . '<input type=\"checkbox\" name=\"navig\"'\n            . ' id=\"showAll_' . $this->__get('unique_id') . '\" class=\"showAllRows\"'\n            . (! $showing_all ? '' : ' checked=\"checked\"') . ' value=\"all\" />'\n            . '<label for=\"showAll_' . $this->__get('unique_id') . '\">'\n            . __('Show all') . '</label>'\n            . '</form>'\n            . '</td>';\n    } // end of the '_getShowAllButtonForTableNavigation()' function\n\n\n    /**\n     * Prepare move forward buttons - next and last\n     *\n     * @param string  $html_sql_query the sql encoded by htmlspecialchars()\n     * @param integer $pos_next       the offset for the \"next\" page\n     * @param boolean $is_innodb      whether it's InnoDB or not\n     *\n     * @return  string  $buttons_html   html content\n     *\n     * @access  private\n     *\n     * @see     _getTableNavigation()\n     */\n    private function _getMoveForwardButtonsForTableNavigation(\n        $html_sql_query, $pos_next, $is_innodb\n    ) {\n\n        // display the Next button\n        $buttons_html = $this->_getTableNavigationButton(\n            '&gt;',\n            _pgettext('Next page', 'Next'),\n            $pos_next,\n            $html_sql_query,\n            false\n        );\n\n        // prepare some options for the End button\n        if ($is_innodb\n            && $this->__get('unlim_num_rows') > $GLOBALS['cfg']['MaxExactCount']\n        ) {\n            $input_for_real_end = '<input id=\"real_end_input\" type=\"hidden\" '\n                . 'name=\"find_real_end\" value=\"1\" />';\n            // no backquote around this message\n            $onclick = '';\n        } else {\n            $input_for_real_end = $onclick = '';\n        }\n\n        $maxRows = $_SESSION['tmpval']['max_rows'];\n        $onsubmit = 'onsubmit=\"return '\n            . ($_SESSION['tmpval']['pos']\n                + $maxRows\n                < $this->__get('unlim_num_rows')\n                && $this->__get('num_rows') >= $maxRows)\n            ? 'true'\n            : 'false' . '\"';\n\n        // display the End button\n        $buttons_html .= $this->_getTableNavigationButton(\n            '&gt;&gt;',\n            _pgettext('Last page', 'End'),\n            @((ceil(\n                $this->__get('unlim_num_rows')\n                / $_SESSION['tmpval']['max_rows']\n            )- 1) * $maxRows),\n            $html_sql_query, false, $onsubmit, $input_for_real_end, $onclick\n        );\n\n        return $buttons_html;\n\n    } // end of the '_getMoveForwardButtonsForTableNavigation()' function\n\n\n    /**\n     * Prepare fields for table navigation\n     * Number of rows\n     *\n     * @param string $html_sql_query the sql encoded by htmlspecialchars()\n     *\n     * @return  string  $additional_fields_html html content\n     *\n     * @access  private\n     *\n     * @see     _getTableNavigation()\n     */\n    private function _getAdditionalFieldsForTableNavigation(\n        $html_sql_query\n    ) {\n\n        $additional_fields_html = '';\n\n        $additional_fields_html .= '<input type=\"hidden\" name=\"sql_query\" '\n            . 'value=\"' . $html_sql_query . '\" />'\n            . '<input type=\"hidden\" name=\"goto\" value=\"' . $this->__get('goto')\n            . '\" />'\n            . '<input type=\"hidden\" name=\"pos\" size=\"3\" value=\"'\n            // Do not change the position when changing the number of rows\n            . $_SESSION['tmpval']['pos'] . '\" />'\n            . '<input type=\"hidden\" name=\"is_browse_distinct\" value=\"'\n            . $this->__get('is_browse_distinct') . '\" />'  ;\n\n        $numberOfRowsPlaceholder = null;\n        if ($_SESSION['tmpval']['max_rows'] == self::ALL_ROWS) {\n            $numberOfRowsPlaceholder = __('All');\n        }\n\n        $numberOfRowsChoices = array(\n            '25'  => 25,\n            '50'  => 50,\n            '100' => 100,\n            '250' => 250,\n            '500' => 500\n        );\n        $additional_fields_html .= __('Number of rows:') . ' ';\n        $additional_fields_html .= Util::getDropdown(\n            'session_max_rows', $numberOfRowsChoices,\n            $_SESSION['tmpval']['max_rows'], '',\n            'autosubmit', $numberOfRowsPlaceholder\n        );\n\n        return $additional_fields_html;\n\n    } // end of the '_getAdditionalFieldsForTableNavigation()' function\n\n\n    /**\n     * Get the headers of the results table, for all of the columns\n     *\n     * @param array   $displayParts                which elements to display\n     * @param array   $analyzed_sql_results        analyzed sql results\n     * @param array   $sort_expression             sort expression\n     * @param string  $sort_expression_nodirection sort expression\n     *                                             without direction\n     * @param string  $sort_direction              sort direction\n     * @param boolean $is_limited_display          with limited operations\n     *                                             or not\n     * @param string  $unsorted_sql_query          query without the sort part\n     *\n     * @return string html content\n     *\n     * @access private\n     *\n     * @see    getTableHeaders()\n     */\n    private function _getTableHeadersForColumns(\n        $displayParts, $analyzed_sql_results, $sort_expression,\n        $sort_expression_nodirection, $sort_direction, $is_limited_display,\n        $unsorted_sql_query\n    ) {\n        $html = '';\n\n        // required to generate sort links that will remember whether the\n        // \"Show all\" button has been clicked\n        $sql_md5 = md5($this->__get('sql_query'));\n        $session_max_rows = $is_limited_display\n            ? 0\n            : $_SESSION['tmpval']['query'][$sql_md5]['max_rows'];\n\n        // Following variable are needed for use in isset/empty or\n        // use with array indexes/safe use in the for loop\n        $highlight_columns = $this->__get('highlight_columns');\n        $fields_meta = $this->__get('fields_meta');\n\n        // Prepare Display column comments if enabled\n        // ($GLOBALS['cfg']['ShowBrowseComments']).\n        $comments_map = $this->_getTableCommentsArray($analyzed_sql_results);\n\n        list($col_order, $col_visib) = $this->_getColumnParams(\n            $analyzed_sql_results\n        );\n\n        // optimize: avoid calling a method on each iteration\n        $number_of_columns = $this->__get('fields_cnt');\n\n        for ($j = 0; $j < $number_of_columns; $j++) {\n\n            // assign $i with the appropriate column order\n            $i = $col_order ? $col_order[$j] : $j;\n\n            //  See if this column should get highlight because it's used in the\n            //  where-query.\n            $name = $fields_meta[$i]->name;\n            $condition_field = (isset($highlight_columns[$name])\n                || isset($highlight_columns[Util::backquote($name)]))\n                ? true\n                : false;\n\n            // Prepare comment-HTML-wrappers for each row, if defined/enabled.\n            $comments = $this->_getCommentForRow($comments_map, $fields_meta[$i]);\n            $display_params = $this->__get('display_params');\n\n            if (($displayParts['sort_lnk'] == '1') && ! $is_limited_display) {\n\n                list($order_link, $sorted_header_html)\n                    = $this->_getOrderLinkAndSortedHeaderHtml(\n                        $fields_meta[$i], $sort_expression,\n                        $sort_expression_nodirection, $i, $unsorted_sql_query,\n                        $session_max_rows, $comments,\n                        $sort_direction, $col_visib,\n                        $col_visib[$j]\n                    );\n\n                $html .= $sorted_header_html;\n\n                $display_params['desc'][] = '    <th '\n                    . 'class=\"draggable'\n                    . ($condition_field ? ' condition' : '')\n                    . '\" data-column=\"' . htmlspecialchars($fields_meta[$i]->name)\n                    . '\">' . \"\\n\" . $order_link . $comments . '    </th>' . \"\\n\";\n            } else {\n                // Results can't be sorted\n                $html\n                    .= $this->_getDraggableClassForNonSortableColumns(\n                        $col_visib, $col_visib[$j], $condition_field,\n                        $fields_meta[$i], $comments\n                    );\n\n                $display_params['desc'][] = '    <th '\n                    . 'class=\"draggable'\n                    . ($condition_field ? ' condition\"' : '')\n                    . '\" data-column=\"' . htmlspecialchars($fields_meta[$i]->name)\n                    . '\">' . '        '\n                    . htmlspecialchars($fields_meta[$i]->name)\n                    . $comments . '    </th>';\n            } // end else\n\n            $this->__set('display_params', $display_params);\n\n        } // end for\n        return $html;\n    }\n\n    /**\n     * Get the headers of the results table\n     *\n     * @param array   &$displayParts               which elements to display\n     * @param array   $analyzed_sql_results        analyzed sql results\n     * @param string  $unsorted_sql_query          the unsorted sql query\n     * @param array   $sort_expression             sort expression\n     * @param string  $sort_expression_nodirection sort expression\n     *                                             without direction\n     * @param string  $sort_direction              sort direction\n     * @param boolean $is_limited_display          with limited operations\n     *                                             or not\n     *\n     * @return string html content\n     *\n     * @access private\n     *\n     * @see    getTable()\n     */\n    private function _getTableHeaders(\n        &$displayParts, $analyzed_sql_results, $unsorted_sql_query,\n        $sort_expression = array(), $sort_expression_nodirection = '',\n        $sort_direction = '', $is_limited_display = false\n    ) {\n\n        $table_headers_html = '';\n        // Needed for use in isset/empty or\n        // use with array indexes/safe use in foreach\n        $printview = $this->__get('printview');\n        $display_params = $this->__get('display_params');\n\n        // Output data needed for grid editing\n        $table_headers_html .= '<input class=\"save_cells_at_once\" type=\"hidden\"'\n            . ' value=\"' . $GLOBALS['cfg']['SaveCellsAtOnce'] . '\" />'\n            . '<div class=\"common_hidden_inputs\">'\n            . PMA_URL_getHiddenInputs(\n                $this->__get('db'), $this->__get('table')\n            )\n            . '</div>';\n\n        // Output data needed for column reordering and show/hide column\n        if ($this->_isSelect($analyzed_sql_results)) {\n            $table_headers_html .= $this->_getDataForResettingColumnOrder();\n        }\n\n        $display_params['emptypre']   = 0;\n        $display_params['emptyafter'] = 0;\n        $display_params['textbtn']    = '';\n        $full_or_partial_text_link = null;\n\n        $this->__set('display_params', $display_params);\n\n        // Display options (if we are not in print view)\n        if (! (isset($printview) && ($printview == '1')) && ! $is_limited_display) {\n\n            $table_headers_html .= $this->_getOptionsBlock();\n\n            // prepare full/partial text button or link\n            $full_or_partial_text_link = $this->_getFullOrPartialTextButtonOrLink();\n        }\n\n        // Start of form for multi-rows edit/delete/export\n        $table_headers_html .= $this->_getFormForMultiRowOperations(\n            $displayParts['del_lnk']\n        );\n\n        // 1. Set $colspan and generate html with full/partial\n        // text button or link\n        list($colspan, $button_html)\n            = $this->_getFieldVisibilityParams(\n                $displayParts, $full_or_partial_text_link\n            );\n\n        $table_headers_html .= $button_html;\n\n        // 2. Displays the fields' name\n        // 2.0 If sorting links should be used, checks if the query is a \"JOIN\"\n        //     statement (see 2.1.3)\n\n        // See if we have to highlight any header fields of a WHERE query.\n        // Uses SQL-Parser results.\n        $this->_setHighlightedColumnGlobalField($analyzed_sql_results);\n\n        // Get the headers for all of the columns\n        $table_headers_html .= $this->_getTableHeadersForColumns(\n            $displayParts, $analyzed_sql_results, $sort_expression,\n            $sort_expression_nodirection, $sort_direction,\n            $is_limited_display, $unsorted_sql_query\n        );\n\n        // Display column at rightside - checkboxes or empty column\n        if (! $printview) {\n            $table_headers_html .= $this->_getColumnAtRightSide(\n                $displayParts, $full_or_partial_text_link, $colspan\n            );\n        }\n        $table_headers_html .= '</tr>' . '</thead>';\n\n        return $table_headers_html;\n\n    } // end of the '_getTableHeaders()' function\n\n\n    /**\n     * Prepare unsorted sql query and sort by key drop down\n     *\n     * @param array  $analyzed_sql_results analyzed sql results\n     * @param string $sort_expression      sort expression\n     *\n     * @return  array   two element array - $unsorted_sql_query, $drop_down_html\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getUnsortedSqlAndSortByKeyDropDown(\n        $analyzed_sql_results, $sort_expression\n    ) {\n        $drop_down_html = '';\n\n        $unsorted_sql_query = Query::replaceClause(\n            $analyzed_sql_results['statement'],\n            $analyzed_sql_results['parser']->list,\n            'ORDER BY',\n            ''\n        );\n\n        // Data is sorted by indexes only if it there is only one table.\n        if ($this->_isSelect($analyzed_sql_results)) {\n            // grab indexes data:\n            $indexes = Index::getFromTable(\n                $this->__get('table'),\n                $this->__get('db')\n            );\n\n            // do we have any index?\n            if (! empty($indexes)) {\n                $drop_down_html = $this->_getSortByKeyDropDown(\n                    $indexes, $sort_expression,\n                    $unsorted_sql_query\n                );\n            }\n        }\n\n        return array($unsorted_sql_query, $drop_down_html);\n\n    } // end of the '_getUnsortedSqlAndSortByKeyDropDown()' function\n\n    /**\n     * Prepare sort by key dropdown - html code segment\n     *\n     * @param Index[] $indexes            the indexes of the table for sort criteria\n     * @param string  $sort_expression    the sort expression\n     * @param string  $unsorted_sql_query the unsorted sql query\n     *\n     * @return  string  $drop_down_html         html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getSortByKeyDropDown(\n        $indexes, $sort_expression, $unsorted_sql_query\n    ) {\n\n        $drop_down_html = '';\n\n        $drop_down_html .= '<form action=\"sql.php\" method=\"post\" ' .\n            'class=\"print_ignore\">' . \"\\n\"\n            . PMA_URL_getHiddenInputs(\n                $this->__get('db'), $this->__get('table')\n            )\n            // to avoid calling PMA_handleSortOrder() later\n            . PMA_getHiddenFields(array('sort_by_key' => '1'))\n            . __('Sort by key')\n            . ': <select name=\"sql_query\" class=\"autosubmit\">' . \"\\n\";\n\n        $used_index = false;\n        $local_order = (isset($sort_expression) ? $sort_expression : '');\n\n        foreach ($indexes as $index) {\n\n            $asc_sort = '`'\n                . implode('` ASC, `', array_keys($index->getColumns()))\n                . '` ASC';\n\n            $desc_sort = '`'\n                . implode('` DESC, `', array_keys($index->getColumns()))\n                . '` DESC';\n\n            $used_index = $used_index\n                || ($local_order == $asc_sort)\n                || ($local_order == $desc_sort);\n\n            if (preg_match(\n                '@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|'\n                . 'FOR UPDATE|LOCK IN SHARE MODE))@is',\n                $unsorted_sql_query, $my_reg\n            )) {\n                $unsorted_sql_query_first_part = $my_reg[1];\n                $unsorted_sql_query_second_part = $my_reg[2];\n            } else {\n                $unsorted_sql_query_first_part = $unsorted_sql_query;\n                $unsorted_sql_query_second_part = '';\n            }\n\n            $drop_down_html .= '<option value=\"'\n                . htmlspecialchars(\n                    $unsorted_sql_query_first_part  . \"\\n\"\n                    . ' ORDER BY ' . $asc_sort\n                    . $unsorted_sql_query_second_part\n                )\n                . '\"' . ($local_order == $asc_sort\n                    ? ' selected=\"selected\"'\n                    : '')\n                . '>' . htmlspecialchars($index->getName()) . ' (ASC)</option>';\n\n            $drop_down_html .= '<option value=\"'\n                . htmlspecialchars(\n                    $unsorted_sql_query_first_part . \"\\n\"\n                    . ' ORDER BY ' . $desc_sort\n                    . $unsorted_sql_query_second_part\n                )\n                . '\"' . ($local_order == $desc_sort\n                    ? ' selected=\"selected\"'\n                    : '')\n                . '>' . htmlspecialchars($index->getName()) . ' (DESC)</option>';\n        }\n\n        $drop_down_html .= '<option value=\"' . htmlspecialchars($unsorted_sql_query)\n            . '\"' . ($used_index ? '' : ' selected=\"selected\"') . '>' . __('None')\n            . '</option>'\n            . '</select>' . \"\\n\"\n            . '</form>' . \"\\n\";\n\n        return $drop_down_html;\n\n    } // end of the '_getSortByKeyDropDown()' function\n\n\n    /**\n     * Set column span, row span and prepare html with full/partial\n     * text button or link\n     *\n     * @param array  &$displayParts             which elements to display\n     * @param string $full_or_partial_text_link full/partial link or text button\n     *\n     * @return  array   2 element array - $colspan, $button_html\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getFieldVisibilityParams(\n        &$displayParts, $full_or_partial_text_link\n    ) {\n\n        $button_html = '';\n        $display_params = $this->__get('display_params');\n\n        // 1. Displays the full/partial text button (part 1)...\n        $button_html .= '<thead><tr>' . \"\\n\";\n\n        $colspan = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n            && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE))\n            ? ' colspan=\"4\"'\n            : '';\n\n        //     ... before the result table\n        if ((($displayParts['edit_lnk'] == self::NO_EDIT_OR_DELETE)\n            && ($displayParts['del_lnk'] == self::NO_EDIT_OR_DELETE))\n            && ($displayParts['text_btn'] == '1')\n        ) {\n\n            $display_params['emptypre']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 0;\n\n        } elseif ((($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_LEFT)\n            || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH))\n            && ($displayParts['text_btn'] == '1')\n        ) {\n            //     ... at the left column of the result table header if possible\n            //     and required\n\n            $display_params['emptypre']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 0;\n\n            $button_html .= '<th class=\"column_action print_ignore\" ' . $colspan\n                . '>' . $full_or_partial_text_link . '</th>';\n\n        } elseif ((($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_LEFT)\n            || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH))\n            && (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n            || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE))\n        ) {\n            //     ... elseif no button, displays empty(ies) col(s) if required\n\n            $display_params['emptypre']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 0;\n\n            $button_html .= '<td ' . $colspan . '></td>';\n\n        } elseif (($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_NONE)) {\n            // ... elseif display an empty column if the actions links are\n            //  disabled to match the rest of the table\n            $button_html .= '<th class=\"column_action\"></th>';\n        }\n\n        $this->__set('display_params', $display_params);\n\n        return array($colspan, $button_html);\n\n    } // end of the '_getFieldVisibilityParams()' function\n\n\n    /**\n     * Get table comments as array\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return array $comments_map table comments\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getTableCommentsArray($analyzed_sql_results)\n    {\n        if ((!$GLOBALS['cfg']['ShowBrowseComments'])\n            || (empty($analyzed_sql_results['statement']->from))\n        ) {\n            return array();\n        }\n\n        $ret = array();\n        foreach ($analyzed_sql_results['statement']->from as $field) {\n            if (empty($field->table)) {\n                continue;\n            }\n            $ret[$field->table] = PMA_getComments(\n                empty($field->database) ? $this->__get('db') : $field->database,\n                $field->table\n            );\n        }\n\n        return $ret;\n\n    } // end of the '_getTableCommentsArray()' function\n\n\n    /**\n     * Set global array for store highlighted header fields\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return  void\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _setHighlightedColumnGlobalField($analyzed_sql_results)\n    {\n        $highlight_columns = array();\n\n        if (!empty($analyzed_sql_results['statement']->where)) {\n            foreach ($analyzed_sql_results['statement']->where as $expr) {\n                foreach ($expr->identifiers as $identifier) {\n                    $highlight_columns[$identifier] = 'true';\n                }\n            }\n        }\n\n        $this->__set('highlight_columns', $highlight_columns);\n\n    } // end of the '_setHighlightedColumnGlobalField()' function\n\n\n    /**\n     * Prepare data for column restoring and show/hide\n     *\n     * @return  string  $data_html      html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getDataForResettingColumnOrder()\n    {\n\n        $data_html = '';\n\n        // generate the column order, if it is set\n        $pmatable = new Table($this->__get('table'), $this->__get('db'));\n        $col_order = $pmatable->getUiProp(Table::PROP_COLUMN_ORDER);\n\n        if ($col_order) {\n            $data_html .= '<input class=\"col_order\" type=\"hidden\" value=\"'\n                . implode(',', $col_order) . '\" />';\n        }\n\n        $col_visib = $pmatable->getUiProp(Table::PROP_COLUMN_VISIB);\n\n        if ($col_visib) {\n            $data_html .= '<input class=\"col_visib\" type=\"hidden\" value=\"'\n                . implode(',', $col_visib) . '\" />';\n        }\n\n        // generate table create time\n        $table = new Table($this->__get('table'), $this->__get('db'));\n        if (! $table->isView()) {\n            $data_html .= '<input class=\"table_create_time\" type=\"hidden\" value=\"'\n                . $GLOBALS['dbi']->getTable(\n                    $this->__get('db'), $this->__get('table')\n                )->getStatusInfo('Create_time')\n                . '\" />';\n        }\n\n        return $data_html;\n\n    } // end of the '_getDataForResettingColumnOrder()' function\n\n\n    /**\n     * Prepare option fields block\n     *\n     * @return  string  $options_html   html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getOptionsBlock()\n    {\n\n        $options_html = '';\n\n        $options_html .= '<form method=\"post\" action=\"sql.php\" '\n            . 'name=\"displayOptionsForm\"';\n\n        $options_html .= ' class=\"ajax print_ignore\" ';\n\n        $options_html .= '>';\n        $url_params = array(\n            'db' => $this->__get('db'),\n            'table' => $this->__get('table'),\n            'sql_query' => $this->__get('sql_query'),\n            'goto' => $this->__get('goto'),\n            'display_options_form' => 1\n        );\n\n        $options_html .= PMA_URL_getHiddenInputs($url_params)\n            . '<br />'\n            . Util::getDivForSliderEffect(\n                '', __('Options')\n            )\n            . '<fieldset>';\n\n        $options_html .= '<div class=\"formelement\">';\n        $choices = array(\n            'P'   => __('Partial texts'),\n            'F'   => __('Full texts')\n        );\n\n        // pftext means \"partial or full texts\" (done to reduce line lengths)\n        $options_html .= Util::getRadioFields(\n            'pftext', $choices,\n            $_SESSION['tmpval']['pftext'],\n            true, true, '', 'pftext_' . $this->__get('unique_id')\n        )\n        . '</div>';\n\n        if ($GLOBALS['cfgRelation']['relwork']\n            && $GLOBALS['cfgRelation']['displaywork']\n        ) {\n            $options_html .= '<div class=\"formelement\">';\n            $choices = array(\n                'K'   => __('Relational key'),\n                'D'   => __('Display column for relations')\n            );\n\n            $options_html .= Util::getRadioFields(\n                'relational_display', $choices,\n                $_SESSION['tmpval']['relational_display'],\n                true, true, '', 'relational_display_' . $this->__get('unique_id')\n            )\n            . '</div>';\n        }\n\n        $options_html .= '<div class=\"formelement\">'\n            . Util::getCheckbox(\n                'display_binary', __('Show binary contents'),\n                ! empty($_SESSION['tmpval']['display_binary']), false,\n                'display_binary_' . $this->__get('unique_id')\n            )\n            . '<br />'\n            . Util::getCheckbox(\n                'display_blob', __('Show BLOB contents'),\n                ! empty($_SESSION['tmpval']['display_blob']), false,\n                'display_blob_' . $this->__get('unique_id')\n            )\n            . '</div>';\n\n        // I would have preferred to name this \"display_transformation\".\n        // This is the only way I found to be able to keep this setting sticky\n        // per SQL query, and at the same time have a default that displays\n        // the transformations.\n        $options_html .= '<div class=\"formelement\">'\n            . Util::getCheckbox(\n                'hide_transformation', __('Hide browser transformation'),\n                ! empty($_SESSION['tmpval']['hide_transformation']), false,\n                'hide_transformation_' . $this->__get('unique_id')\n            )\n            . '</div>';\n\n        $options_html .= '<div class=\"formelement\">';\n        $choices = array(\n            'GEOM'  => __('Geometry'),\n            'WKT'   => __('Well Known Text'),\n            'WKB'   => __('Well Known Binary')\n        );\n\n        $options_html .= Util::getRadioFields(\n            'geoOption', $choices,\n            $_SESSION['tmpval']['geoOption'],\n            true, true, '', 'geoOption_' . $this->__get('unique_id')\n        );\n        $options_html .= '</div>';\n\n        $options_html .= '<div class=\"clearfloat\"></div>'\n            . '</fieldset>';\n\n        $options_html .= '<fieldset class=\"tblFooters\">'\n            . '<input type=\"submit\" value=\"' . __('Go') . '\" />'\n            . '</fieldset>'\n            . '</div>'\n            . '</form>';\n\n        return $options_html;\n\n    } // end of the '_getOptionsBlock()' function\n\n\n    /**\n     * Get full/partial text button or link\n     *\n     * @return string html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getFullOrPartialTextButtonOrLink()\n    {\n\n        $url_params_full_text = array(\n            'db' => $this->__get('db'),\n            'table' => $this->__get('table'),\n            'sql_query' => $this->__get('sql_query'),\n            'goto' => $this->__get('goto'),\n            'full_text_button' => 1\n        );\n\n        if ($_SESSION['tmpval']['pftext'] == self::DISPLAY_FULL_TEXT) {\n            // currently in fulltext mode so show the opposite link\n            $tmp_image_file = $this->__get('pma_theme_image') . 's_partialtext.png';\n            $tmp_txt = __('Partial texts');\n            $url_params_full_text['pftext'] = self::DISPLAY_PARTIAL_TEXT;\n        } else {\n            $tmp_image_file = $this->__get('pma_theme_image') . 's_fulltext.png';\n            $tmp_txt = __('Full texts');\n            $url_params_full_text['pftext'] = self::DISPLAY_FULL_TEXT;\n        }\n\n        $tmp_image = '<img class=\"fulltext\" src=\"' . $tmp_image_file . '\" alt=\"'\n                     . $tmp_txt . '\" title=\"' . $tmp_txt . '\" />';\n        $tmp_url = 'sql.php' . PMA_URL_getCommon($url_params_full_text);\n\n        return Util::linkOrButton(\n            $tmp_url, $tmp_image, array(), false\n        );\n\n    } // end of the '_getFullOrPartialTextButtonOrLink()' function\n\n\n    /**\n     * Prepare html form for multi row operations\n     *\n     * @param string $del_lnk the delete link of current row\n     *\n     * @return  string  $form_html          html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getFormForMultiRowOperations($del_lnk)\n    {\n\n        $form_html = '';\n\n        if (($del_lnk == self::DELETE_ROW) || ($del_lnk == self::KILL_PROCESS)) {\n\n            $form_html .= '<form method=\"post\" action=\"tbl_row_action.php\" '\n                . 'name=\"resultsForm\"'\n                . ' id=\"resultsForm_' . $this->__get('unique_id') . '\"';\n\n            $form_html .= ' class=\"ajax\" ';\n\n            $form_html .= '>'\n                . PMA_URL_getHiddenInputs(\n                    $this->__get('db'), $this->__get('table'), 1\n                )\n                . '<input type=\"hidden\" name=\"goto\" value=\"sql.php\" />';\n        }\n\n        $form_html .= '<table class=\"table_results data ajax\"';\n        $form_html .= ' data-uniqueId=\"' . $this->__get('unique_id') . '\"';\n        $form_html .= '>';\n\n        return $form_html;\n\n    } // end of the '_getFormForMultiRowOperations()' function\n\n\n    /**\n     * Get comment for row\n     *\n     * @param array $comments_map comments array\n     * @param array $fields_meta  set of field properties\n     *\n     * @return  string  $comment        html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getCommentForRow($comments_map, $fields_meta)\n    {\n        $comments = '';\n        if (isset($comments_map[$fields_meta->table])\n            && isset($comments_map[$fields_meta->table][$fields_meta->name])\n        ) {\n            $sanitized_comments = htmlspecialchars(\n                $comments_map[$fields_meta->table][$fields_meta->name]\n            );\n\n            $comments = '<span class=\"tblcomment\" title=\"'\n                . $sanitized_comments . '\">';\n            $limitChars = $GLOBALS['cfg']['LimitChars'];\n            if (mb_strlen($sanitized_comments) > $limitChars) {\n                $sanitized_comments = mb_substr(\n                    $sanitized_comments, 0, $limitChars\n                ) . '\u2026';\n            }\n            $comments .= $sanitized_comments;\n            $comments .= '</span>';\n        }\n        return $comments;\n    } // end of the '_getCommentForRow()' function\n\n\n    /**\n     * Prepare parameters and html for sorted table header fields\n     *\n     * @param array   $fields_meta                 set of field properties\n     * @param array   $sort_expression             sort expression\n     * @param string  $sort_expression_nodirection sort expression without direction\n     * @param integer $column_index                the index of the column\n     * @param string  $unsorted_sql_query          the unsorted sql query\n     * @param integer $session_max_rows            maximum rows resulted by sql\n     * @param string  $comments                    comment for row\n     * @param string  $sort_direction              sort direction\n     * @param boolean $col_visib                   column is visible(false)\n     *        array                                column isn't visible(string array)\n     * @param string  $col_visib_j                 element of $col_visib array\n     *\n     * @return  array   2 element array - $order_link, $sorted_header_html\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getOrderLinkAndSortedHeaderHtml(\n        $fields_meta, $sort_expression, $sort_expression_nodirection,\n        $column_index, $unsorted_sql_query, $session_max_rows,\n        $comments, $sort_direction, $col_visib, $col_visib_j\n    ) {\n\n        $sorted_header_html = '';\n\n        // Checks if the table name is required; it's the case\n        // for a query with a \"JOIN\" statement and if the column\n        // isn't aliased, or in queries like\n        // SELECT `1`.`master_field` , `2`.`master_field`\n        // FROM `PMA_relation` AS `1` , `PMA_relation` AS `2`\n\n        $sort_tbl = (isset($fields_meta->table)\n            && mb_strlen($fields_meta->table)\n            && $fields_meta->orgname == $fields_meta->name)\n            ? Util::backquote(\n                $fields_meta->table\n            ) . '.'\n            : '';\n\n        $name_to_use_in_sort = $fields_meta->name;\n\n        // Generates the orderby clause part of the query which is part\n        // of URL\n        list($single_sort_order, $multi_sort_order, $order_img)\n            = $this->_getSingleAndMultiSortUrls(\n                $sort_expression, $sort_expression_nodirection, $sort_tbl,\n                $name_to_use_in_sort, $sort_direction, $fields_meta, $column_index\n            );\n\n        if (preg_match(\n            '@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|'\n            . 'LOCK IN SHARE MODE))@is',\n            $unsorted_sql_query, $regs3\n        )) {\n            $single_sorted_sql_query = $regs3[1] . $single_sort_order . $regs3[2];\n            $multi_sorted_sql_query = $regs3[1] . $multi_sort_order . $regs3[2];\n        } else {\n            $single_sorted_sql_query = $unsorted_sql_query . $single_sort_order;\n            $multi_sorted_sql_query = $unsorted_sql_query . $multi_sort_order;\n        }\n\n        $_single_url_params = array(\n            'db'                 => $this->__get('db'),\n            'table'              => $this->__get('table'),\n            'sql_query'          => $single_sorted_sql_query,\n            'session_max_rows'   => $session_max_rows,\n            'is_browse_distinct' => $this->__get('is_browse_distinct'),\n        );\n\n        $_multi_url_params = array(\n            'db'                 => $this->__get('db'),\n            'table'              => $this->__get('table'),\n            'sql_query'          => $multi_sorted_sql_query,\n            'session_max_rows'   => $session_max_rows,\n            'is_browse_distinct' => $this->__get('is_browse_distinct'),\n        );\n        $single_order_url  = 'sql.php' . PMA_URL_getCommon($_single_url_params);\n        $multi_order_url = 'sql.php' . PMA_URL_getCommon($_multi_url_params);\n\n        // Displays the sorting URL\n        // enable sort order swapping for image\n        $order_link = $this->_getSortOrderLink(\n            $order_img, $column_index,\n            $fields_meta, $single_order_url, $multi_order_url\n        );\n\n        $sorted_header_html .= $this->_getDraggableClassForSortableColumns(\n            $col_visib, $col_visib_j,\n            $fields_meta, $order_link, $comments\n        );\n\n        return array($order_link, $sorted_header_html);\n\n    } // end of the '_getOrderLinkAndSortedHeaderHtml()' function\n\n    /**\n     * Prepare parameters and html for sorted table header fields\n     *\n     * @param array   $sort_expression             sort expression\n     * @param string  $sort_expression_nodirection sort expression without direction\n     * @param string  $sort_tbl                    The name of the table to which\n     *                                             the current column belongs to\n     * @param string  $name_to_use_in_sort         The current column under\n     *                                             consideration\n     * @param string  $sort_direction              sort direction\n     * @param array   $fields_meta                 set of field properties\n     * @param integer $column_index                The index number to current column\n     *\n     * @return  array   3 element array - $single_sort_order, $sort_order, $order_img\n     *\n     * @access  private\n     *\n     * @see     _getOrderLinkAndSortedHeaderHtml()\n     */\n    private function _getSingleAndMultiSortUrls(\n        $sort_expression, $sort_expression_nodirection, $sort_tbl,\n        $name_to_use_in_sort, $sort_direction, $fields_meta, $column_index\n    ) {\n        $sort_order = \"\";\n        // Check if the current column is in the order by clause\n        $is_in_sort = $this->_isInSorted(\n            $sort_expression, $sort_expression_nodirection,\n            $sort_tbl, $name_to_use_in_sort\n        );\n        $current_name = $name_to_use_in_sort;\n        if ($sort_expression_nodirection[0] == '' || !$is_in_sort) {\n            $special_index = $sort_expression_nodirection[0] == ''\n                ? 0\n                : count($sort_expression_nodirection);\n            $sort_expression_nodirection[$special_index]\n                = Util::backquote(\n                    $current_name\n                );\n            $sort_direction[$special_index] = (preg_match(\n                '@time|date@i',\n                $fields_meta->type\n            )) ? self::DESCENDING_SORT_DIR : self::ASCENDING_SORT_DIR;\n\n        }\n\n        $sort_expression_nodirection = array_filter($sort_expression_nodirection);\n        $single_sort_order = null;\n        foreach ($sort_expression_nodirection as $index=>$expression) {\n            // check if this is the first clause,\n            // if it is then we have to add \"order by\"\n            $is_first_clause = ($index == 0);\n            $name_to_use_in_sort = $expression;\n            $sort_tbl_new = $sort_tbl;\n            // Test to detect if the column name is a standard name\n            // Standard name has the table name prefixed to the column name\n            if (mb_strpos($name_to_use_in_sort, '.') !== false) {\n                $matches = explode('.', $name_to_use_in_sort);\n                // Matches[0] has the table name\n                // Matches[1] has the column name\n                $name_to_use_in_sort = $matches[1];\n                $sort_tbl_new = $matches[0];\n            }\n\n            // $name_to_use_in_sort might contain a space due to\n            // formatting of function expressions like \"COUNT(name )\"\n            // so we remove the space in this situation\n            $name_to_use_in_sort = str_replace(' )', ')', $name_to_use_in_sort);\n            $name_to_use_in_sort = str_replace('``', '`', $name_to_use_in_sort);\n            $name_to_use_in_sort = trim($name_to_use_in_sort, '`');\n\n            // If this the first column name in the order by clause add\n            // order by clause to the  column name\n            $query_head = $is_first_clause ? \"\\nORDER BY \" : \"\";\n            // Again a check to see if the given column is a aggregate column\n            if (mb_strpos($name_to_use_in_sort, '(') !== false) {\n                $sort_order .=  $query_head  . $name_to_use_in_sort . ' ' ;\n            } else {\n                if (mb_strlen($sort_tbl_new) > 0) {\n                    $sort_tbl_new .= \".\";\n                }\n                $sort_order .=  $query_head  . $sort_tbl_new\n                  . Util::backquote(\n                      $name_to_use_in_sort\n                  ) .  ' ' ;\n            }\n\n            // For a special case where the code generates two dots between\n            // column name and table name.\n            $sort_order = preg_replace(\"/\\.\\./\", \".\", $sort_order);\n            // Incase this is the current column save $single_sort_order\n            if ($current_name == $name_to_use_in_sort) {\n                if (mb_strpos($current_name, '(') !== false) {\n                    $single_sort_order = \"\\n\" . 'ORDER BY ' . $current_name . ' ';\n                } else {\n                    $single_sort_order = \"\\n\" . 'ORDER BY ' . $sort_tbl\n                        . Util::backquote(\n                            $current_name\n                        ) . ' ';\n                }\n                if ($is_in_sort) {\n                    list($single_sort_order, $order_img)\n                        = $this->_getSortingUrlParams(\n                            $sort_direction, $single_sort_order,\n                            $column_index, $index\n                        );\n                } else {\n                    $single_sort_order .= strtoupper($sort_direction[$index]);\n                }\n            }\n            if ($current_name == $name_to_use_in_sort && $is_in_sort) {\n                // We need to generate the arrow button and related html\n                list($sort_order, $order_img) = $this->_getSortingUrlParams(\n                    $sort_direction, $sort_order, $column_index, $index\n                );\n                $order_img .= \" <small>\" . ($index + 1) . \"</small>\";\n            } else {\n                $sort_order .= strtoupper($sort_direction[$index]);\n            }\n            // Separate columns by a comma\n            $sort_order .= \", \";\n\n            unset($name_to_use_in_sort);\n        }\n        // remove the comma from the last column name in the newly\n        // constructed clause\n        $sort_order = mb_substr(\n            $sort_order,\n            0,\n            mb_strlen($sort_order)-2\n        );\n        if (empty($order_img)) {\n            $order_img = '';\n        }\n        return array($single_sort_order, $sort_order, $order_img);\n    }\n\n    /**\n     * Check whether the column is sorted\n     *\n     * @param array  $sort_expression             sort expression\n     * @param array  $sort_expression_nodirection sort expression without direction\n     * @param string $sort_tbl                    the table name\n     * @param string $name_to_use_in_sort         the sorting column name\n     *\n     * @return boolean $is_in_sort                   the column sorted or not\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _isInSorted(\n        $sort_expression, $sort_expression_nodirection, $sort_tbl,\n        $name_to_use_in_sort\n    ) {\n\n        $index_in_expression = 0;\n\n        foreach ($sort_expression_nodirection as $index => $clause) {\n            if (mb_strpos($clause, '.') !== false) {\n                $fragments = explode('.', $clause);\n                $clause2 = $fragments[0] . \".\" . str_replace('`', '', $fragments[1]);\n            } else {\n                $clause2 = $sort_tbl . str_replace('`', '', $clause);\n            }\n            if ($clause2 === $sort_tbl . $name_to_use_in_sort) {\n                $index_in_expression = $index;\n                break;\n            }\n        }\n        if (empty($sort_expression[$index_in_expression])) {\n            $is_in_sort = false;\n        } else {\n            // Field name may be preceded by a space, or any number\n            // of characters followed by a dot (tablename.fieldname)\n            // so do a direct comparison for the sort expression;\n            // this avoids problems with queries like\n            // \"SELECT id, count(id)...\" and clicking to sort\n            // on id or on count(id).\n            // Another query to test this:\n            // SELECT p.*, FROM_UNIXTIME(p.temps) FROM mytable AS p\n            // (and try clicking on each column's header twice)\n            $noSortTable = empty($sort_tbl) || mb_strpos(\n                $sort_expression_nodirection[$index_in_expression], $sort_tbl\n            ) === false;\n            $noOpenParenthesis = mb_strpos(\n                $sort_expression_nodirection[$index_in_expression], '('\n            ) === false;\n            if (! empty($sort_tbl) && $noSortTable && $noOpenParenthesis) {\n                $new_sort_expression_nodirection = $sort_tbl\n                    . $sort_expression_nodirection[$index_in_expression];\n            } else {\n                $new_sort_expression_nodirection\n                    = $sort_expression_nodirection[$index_in_expression];\n            }\n\n            //Back quotes are removed in next comparison, so remove them from value\n            //to compare.\n            $name_to_use_in_sort = str_replace('`', '', $name_to_use_in_sort);\n\n            $is_in_sort = false;\n            $sort_name = str_replace('`', '', $sort_tbl) . $name_to_use_in_sort;\n\n            if ($sort_name == str_replace('`', '', $new_sort_expression_nodirection)\n                || $sort_name == str_replace('`', '', $sort_expression_nodirection[$index_in_expression])\n            ) {\n                $is_in_sort = true;\n            }\n        }\n\n        return $is_in_sort;\n\n    } // end of the '_isInSorted()' function\n\n\n    /**\n     * Get sort url parameters - sort order and order image\n     *\n     * @param array   $sort_direction the sort direction\n     * @param string  $sort_order     the sorting order\n     * @param integer $column_index   the index of the column\n     * @param integer $index          the index of sort direction array.\n     *\n     * @return  array                       2 element array - $sort_order, $order_img\n     *\n     * @access  private\n     *\n     * @see     _getSingleAndMultiSortUrls()\n     */\n    private function _getSortingUrlParams(\n        $sort_direction, $sort_order, $column_index, $index\n    ) {\n        if (strtoupper(trim($sort_direction[$index])) == self::DESCENDING_SORT_DIR) {\n            $sort_order .= ' ASC';\n            $order_img   = ' ' . Util::getImage(\n                's_desc.png', __('Descending'),\n                array('class' => \"soimg$column_index\", 'title' => '')\n            );\n            $order_img  .= ' ' . Util::getImage(\n                's_asc.png', __('Ascending'),\n                array('class' => \"soimg$column_index hide\", 'title' => '')\n            );\n        } else {\n            $sort_order .= ' DESC';\n            $order_img   = ' ' . Util::getImage(\n                's_asc.png', __('Ascending'),\n                array('class' => \"soimg$column_index\", 'title' => '')\n            );\n            $order_img  .=  ' ' . Util::getImage(\n                's_desc.png', __('Descending'),\n                array('class' => \"soimg$column_index hide\", 'title' => '')\n            );\n        }\n        return array($sort_order, $order_img);\n    } // end of the '_getSortingUrlParams()' function\n\n\n    /**\n     * Get sort order link\n     *\n     * @param string  $order_img       the sort order image\n     * @param integer $col_index       the index of the column\n     * @param array   $fields_meta     set of field properties\n     * @param string  $order_url       the url for sort\n     * @param string  $multi_order_url the url for sort\n     *\n     * @return  string                      the sort order link\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getSortOrderLink(\n        $order_img, $col_index,\n        $fields_meta, $order_url, $multi_order_url\n    ) {\n        $order_link_params = array();\n        if (isset($order_img) && ($order_img != '')) {\n            if (mb_strstr($order_img, 'asc')) {\n                $order_link_params['onmouseover'] = \"$('.soimg$col_index').toggle()\";\n                $order_link_params['onmouseout']  = \"$('.soimg$col_index').toggle()\";\n            } elseif (mb_strstr($order_img, 'desc')) {\n                $order_link_params['onmouseover'] = \"$('.soimg$col_index').toggle()\";\n                $order_link_params['onmouseout']  = \"$('.soimg$col_index').toggle()\";\n            }\n        }\n\n        $order_link_content = htmlspecialchars($fields_meta->name);\n        $inner_link_content = $order_link_content . $order_img\n            . '<input type=\"hidden\" value=\"' .  $multi_order_url . '\" />';\n\n        return Util::linkOrButton(\n            $order_url, $inner_link_content,\n            $order_link_params, false, true\n        );\n\n    } // end of the '_getSortOrderLink()' function\n\n    /**\n     * Check if the column contains numeric data. If yes, then set the\n     * column header's alignment right\n     *\n     * @param array $fields_meta set of field properties\n     * @param array &$th_class   array containing classes\n     *\n     * @return void\n     *\n     * @see  _getDraggableClassForSortableColumns()\n     */\n    private function _getClassForNumericColumnType($fields_meta,&$th_class)\n    {\n        if (preg_match(\n            '@int|decimal|float|double|real|bit|boolean|serial@i',\n            $fields_meta->type\n        )) {\n            $th_class[] = 'right';\n        }\n    }\n\n    /**\n     * Prepare columns to draggable effect for sortable columns\n     *\n     * @param boolean $col_visib   the column is visible (false)\n     *        array                the column is not visible (string array)\n     * @param string  $col_visib_j element of $col_visib array\n     * @param array   $fields_meta set of field properties\n     * @param string  $order_link  the order link\n     * @param string  $comments    the comment for the column\n     *\n     * @return  string  $draggable_html     html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getDraggableClassForSortableColumns(\n        $col_visib, $col_visib_j, $fields_meta,\n        $order_link, $comments\n    ) {\n\n        $draggable_html = '<th';\n        $th_class = array();\n        $th_class[] = 'draggable';\n        $this->_getClassForNumericColumnType($fields_meta, $th_class);\n        if ($col_visib && !$col_visib_j) {\n            $th_class[] = 'hide';\n        }\n\n        $th_class[] = 'column_heading';\n        if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {\n            $th_class[] = 'pointer';\n        }\n\n        if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {\n            $th_class[] = 'marker';\n        }\n\n        $draggable_html .= ' class=\"' . implode(' ', $th_class) . '\"';\n\n        $draggable_html .= ' data-column=\"' . htmlspecialchars($fields_meta->name)\n            . '\">' . $order_link . $comments . '</th>';\n\n        return $draggable_html;\n\n    } // end of the '_getDraggableClassForSortableColumns()' function\n\n\n    /**\n     * Prepare columns to draggable effect for non sortable columns\n     *\n     * @param boolean $col_visib       the column is visible (false)\n     *        array                    the column is not visible (string array)\n     * @param string  $col_visib_j     element of $col_visib array\n     * @param boolean $condition_field whether to add CSS class condition\n     * @param array   $fields_meta     set of field properties\n     * @param string  $comments        the comment for the column\n     *\n     * @return  string  $draggable_html         html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getDraggableClassForNonSortableColumns(\n        $col_visib, $col_visib_j, $condition_field,\n        $fields_meta, $comments\n    ) {\n\n        $draggable_html = '<th';\n        $th_class = array();\n        $th_class[] = 'draggable';\n        $this->_getClassForNumericColumnType($fields_meta, $th_class);\n        if ($col_visib && !$col_visib_j) {\n            $th_class[] = 'hide';\n        }\n\n        if ($condition_field) {\n            $th_class[] = 'condition';\n        }\n\n        $draggable_html .= ' class=\"' . implode(' ', $th_class) . '\"';\n\n        $draggable_html .= ' data-column=\"'\n            . htmlspecialchars($fields_meta->name) . '\">';\n\n        $draggable_html .= htmlspecialchars($fields_meta->name);\n\n        $draggable_html .= \"\\n\" . $comments . '</th>';\n\n        return $draggable_html;\n\n    } // end of the '_getDraggableClassForNonSortableColumns()' function\n\n\n    /**\n     * Prepare column to show at right side - check boxes or empty column\n     *\n     * @param array  &$displayParts             which elements to display\n     * @param string $full_or_partial_text_link full/partial link or text button\n     * @param string $colspan                   column span of table header\n     *\n     * @return  string  html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getColumnAtRightSide(\n        &$displayParts, $full_or_partial_text_link, $colspan\n    ) {\n\n        $right_column_html = '';\n        $display_params = $this->__get('display_params');\n\n        // Displays the needed checkboxes at the right\n        // column of the result table header if possible and required...\n        if ((($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_RIGHT)\n            || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH))\n            && (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n            || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE))\n            && ($displayParts['text_btn'] == '1')\n        ) {\n\n            $display_params['emptyafter']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 1;\n\n            $right_column_html .= \"\\n\"\n                . '<th class=\"column_action print_ignore\" ' . $colspan . '>'\n                . $full_or_partial_text_link\n                . '</th>';\n\n        } elseif ((($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_LEFT)\n            || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH))\n            && (($displayParts['edit_lnk'] == self::NO_EDIT_OR_DELETE)\n            && ($displayParts['del_lnk'] == self::NO_EDIT_OR_DELETE))\n            && (! isset($GLOBALS['is_header_sent']) || ! $GLOBALS['is_header_sent'])\n        ) {\n            //     ... elseif no button, displays empty columns if required\n            // (unless coming from Browse mode print view)\n\n            $display_params['emptyafter']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 1;\n\n            $right_column_html .= \"\\n\" . '<td class=\"print_ignore\" ' . $colspan\n                . '></td>';\n        }\n\n        $this->__set('display_params', $display_params);\n\n        return $right_column_html;\n\n    } // end of the '_getColumnAtRightSide()' function\n\n\n    /**\n     * Prepares the display for a value\n     *\n     * @param string $class           class of table cell\n     * @param bool   $condition_field whether to add CSS class condition\n     * @param string $value           value to display\n     *\n     * @return string  the td\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns()\n     */\n    private function _buildValueDisplay($class, $condition_field, $value)\n    {\n        return '<td class=\"left ' . $class . ($condition_field ? ' condition' : '')\n            . '\">' . $value . '</td>';\n    } // end of the '_buildValueDisplay()' function\n\n\n    /**\n     * Prepares the display for a null value\n     *\n     * @param string $class           class of table cell\n     * @param bool   $condition_field whether to add CSS class condition\n     * @param object $meta            the meta-information about this field\n     * @param string $align           cell alignment\n     *\n     * @return string  the td\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForNumericColumns(),\n     *          _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns()\n     */\n    private function _buildNullDisplay($class, $condition_field, $meta, $align = '')\n    {\n        // the null class is needed for grid editing\n        $decimals = isset($meta->decimals) ? $meta->decimals : '-1';\n        return '<td ' . $align . ' data-decimals=\"' . $decimals\n            . '\" data-type=\"' . $meta->type . '\"  class=\"'\n            . $this->_addClass(\n                $class, $condition_field, $meta, ''\n            )\n            . ' null\"><i>NULL</i></td>';\n    } // end of the '_buildNullDisplay()' function\n\n\n    /**\n     * Prepares the display for an empty value\n     *\n     * @param string $class           class of table cell\n     * @param bool   $condition_field whether to add CSS class condition\n     * @param object $meta            the meta-information about this field\n     * @param string $align           cell alignment\n     *\n     * @return string  the td\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForNumericColumns(),\n     *          _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns()\n     */\n    private function _buildEmptyDisplay($class, $condition_field, $meta, $align = '')\n    {\n        return '<td ' . $align . ' class=\"'\n            . $this->_addClass(\n                $class, $condition_field, $meta, 'nowrap'\n            )\n            . '\"></td>';\n    } // end of the '_buildEmptyDisplay()' function\n\n\n    /**\n     * Adds the relevant classes.\n     *\n     * @param string        $class                 class of table cell\n     * @param bool          $condition_field       whether to add CSS class\n     *                                             condition\n     * @param object        $meta                  the meta-information about the\n     *                                             field\n     * @param string        $nowrap                avoid wrapping\n     * @param bool          $is_field_truncated    is field truncated (display ...)\n     * @param object|string $transformation_plugin transformation plugin.\n     *                                             Can also be the default function:\n     *                                             PMA_mimeDefaultFunction\n     * @param string        $default_function      default transformation function\n     *\n     * @return string  the list of classes\n     *\n     * @access  private\n     *\n     * @see     _buildNullDisplay(), _getRowData()\n     */\n    private function _addClass(\n        $class, $condition_field, $meta, $nowrap, $is_field_truncated = false,\n        $transformation_plugin = '', $default_function = ''\n    ) {\n        $classes = array(\n            $class,\n            $nowrap,\n        );\n\n        if (isset($meta->mimetype)) {\n            $classes[] = preg_replace('/\\//', '_', $meta->mimetype);\n        }\n\n        if ($condition_field) {\n            $classes[] = 'condition';\n        }\n\n        if ($is_field_truncated) {\n            $classes[] = 'truncated';\n        }\n\n        $mime_map = $this->__get('mime_map');\n        $orgFullColName = $this->__get('db') . '.' . $meta->orgtable\n            . '.' . $meta->orgname;\n        if ($transformation_plugin != $default_function\n            || !empty($mime_map[$orgFullColName]['input_transformation'])\n        ) {\n            $classes[] = 'transformed';\n        }\n\n        // Define classes to be added to this data field based on the type of data\n        $matches = array(\n            'enum' => 'enum',\n            'set' => 'set',\n            'binary' => 'hex',\n        );\n\n        foreach ($matches as $key => $value) {\n            if (mb_strpos($meta->flags, $key) !== false) {\n                $classes[] = $value;\n            }\n        }\n\n        if (mb_strpos($meta->type, 'bit') !== false) {\n            $classes[] = 'bit';\n        }\n\n        return implode(' ', $classes);\n    } // end of the '_addClass()' function\n\n    /**\n     * Prepare the body of the results table\n     *\n     * @param integer &$dt_result           the link id associated to the query\n     *                                      which results have to be displayed which\n     *                                      results have to be displayed\n     * @param array   &$displayParts        which elements to display\n     * @param array   $map                  the list of relations\n     * @param array   $analyzed_sql_results analyzed sql results\n     * @param boolean $is_limited_display   with limited operations or not\n     *\n     * @return string $table_body_html  html content\n     *\n     * @global array  $row                  current row data\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getTableBody(\n        &$dt_result, &$displayParts, $map, $analyzed_sql_results,\n        $is_limited_display = false\n    ) {\n\n        global $row; // mostly because of browser transformations,\n                     // to make the row-data accessible in a plugin\n\n        $table_body_html = '';\n\n        // query without conditions to shorten URLs when needed, 200 is just\n        // guess, it should depend on remaining URL length\n        $url_sql_query = $this->_getUrlSqlQuery($analyzed_sql_results);\n\n        $display_params = $this->__get('display_params');\n\n        if (! is_array($map)) {\n            $map = array();\n        }\n\n        $row_no                       = 0;\n        $display_params['edit']       = array();\n        $display_params['copy']       = array();\n        $display_params['delete']     = array();\n        $display_params['data']       = array();\n        $display_params['row_delete'] = array();\n        $this->__set('display_params', $display_params);\n\n        // name of the class added to all grid editable elements;\n        // if we don't have all the columns of a unique key in the result set,\n        //  do not permit grid editing\n        if ($is_limited_display || ! $this->__get('editable')) {\n            $grid_edit_class = '';\n        } else {\n            switch ($GLOBALS['cfg']['GridEditing']) {\n            case 'double-click':\n                // trying to reduce generated HTML by using shorter\n                // classes like click1 and click2\n                $grid_edit_class = 'grid_edit click2';\n                break;\n            case 'click':\n                $grid_edit_class = 'grid_edit click1';\n                break;\n            default: // 'disabled'\n                $grid_edit_class = '';\n                break;\n            }\n        }\n\n        // prepare to get the column order, if available\n        list($col_order, $col_visib) = $this->_getColumnParams(\n            $analyzed_sql_results\n        );\n\n        // Correction University of Virginia 19991216 in the while below\n        // Previous code assumed that all tables have keys, specifically that\n        // the phpMyAdmin GUI should support row delete/edit only for such\n        // tables.\n        // Although always using keys is arguably the prescribed way of\n        // defining a relational table, it is not required. This will in\n        // particular be violated by the novice.\n        // We want to encourage phpMyAdmin usage by such novices. So the code\n        // below has been changed to conditionally work as before when the\n        // table being displayed has one or more keys; but to display\n        // delete/edit options correctly for tables without keys.\n\n        $odd_row = true;\n\n        $whereClauseMap = $this->__get('whereClauseMap');\n        while ($row = $GLOBALS['dbi']->fetchRow($dt_result)) {\n\n            // add repeating headers\n            if ((($row_no != 0) && ($_SESSION['tmpval']['repeat_cells'] != 0))\n                && !($row_no % $_SESSION['tmpval']['repeat_cells'])\n            ) {\n                $table_body_html .= $this->_getRepeatingHeaders(\n                    $display_params\n                );\n            }\n\n            $tr_class = array();\n            if ($GLOBALS['cfg']['BrowsePointerEnable'] != true) {\n                $tr_class[] = 'nopointer';\n            }\n            if ($GLOBALS['cfg']['BrowseMarkerEnable'] != true) {\n                $tr_class[] = 'nomarker';\n            }\n            $tr_class[] = ($odd_row ? 'odd' : 'even');\n            $odd_row = ! $odd_row;\n\n            // pointer code part\n            $table_body_html .= '<tr class=\"' . implode(' ', $tr_class) . '\">';\n\n            // 1. Prepares the row\n\n            // In print view these variable needs to be initialized\n            $del_url = $del_str = $edit_anchor_class\n                = $edit_str = $js_conf = $copy_url = $copy_str = $edit_url = null;\n\n            // 1.2 Defines the URLs for the modify/delete link(s)\n\n            if (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)\n            ) {\n\n                // Results from a \"SELECT\" statement -> builds the\n                // WHERE clause to use in links (a unique key if possible)\n                /**\n                 * @todo $where_clause could be empty, for example a table\n                 *       with only one field and it's a BLOB; in this case,\n                 *       avoid to display the delete and edit links\n                 */\n                list($where_clause, $clause_is_unique, $condition_array)\n                    = Util::getUniqueCondition(\n                        $dt_result, // handle\n                        $this->__get('fields_cnt'), // fields_cnt\n                        $this->__get('fields_meta'), // fields_meta\n                        $row, // row\n                        false, // force_unique\n                        $this->__get('table'), // restrict_to_table\n                        $analyzed_sql_results // analyzed_sql_results\n                    );\n                $whereClauseMap[$row_no][$this->__get('table')] = $where_clause;\n                $this->__set('whereClauseMap', $whereClauseMap);\n\n                $where_clause_html = urlencode($where_clause);\n\n                // 1.2.1 Modify link(s) - update row case\n                if ($displayParts['edit_lnk'] == self::UPDATE_ROW) {\n\n                    list($edit_url, $copy_url, $edit_str, $copy_str,\n                        $edit_anchor_class)\n                            = $this->_getModifiedLinks(\n                                $where_clause,\n                                $clause_is_unique, $url_sql_query\n                            );\n\n                } // end if (1.2.1)\n\n                // 1.2.2 Delete/Kill link(s)\n                list($del_url, $del_str, $js_conf)\n                    = $this->_getDeleteAndKillLinks(\n                        $where_clause, $clause_is_unique,\n                        $url_sql_query, $displayParts['del_lnk'],\n                        $row\n                    );\n\n                // 1.3 Displays the links at left if required\n                if (($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_LEFT)\n                    || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH)\n                ) {\n\n                    $table_body_html .= $this->_getPlacedLinks(\n                        self::POSITION_LEFT, $del_url, $displayParts, $row_no,\n                        $where_clause, $where_clause_html, $condition_array,\n                        $edit_url, $copy_url, $edit_anchor_class,\n                        $edit_str, $copy_str, $del_str, $js_conf\n                    );\n\n                } elseif ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_NONE) {\n\n                    $table_body_html .= $this->_getPlacedLinks(\n                        self::POSITION_NONE, $del_url, $displayParts, $row_no,\n                        $where_clause, $where_clause_html, $condition_array,\n                        $edit_url, $copy_url, $edit_anchor_class,\n                        $edit_str, $copy_str, $del_str, $js_conf\n                    );\n\n                } // end if (1.3)\n            } // end if (1)\n\n            // 2. Displays the rows' values\n            if (is_null($this->__get('mime_map'))) {\n                $this->_setMimeMap();\n            }\n            $table_body_html .= $this->_getRowValues(\n                $dt_result,\n                $row,\n                $row_no,\n                $col_order,\n                $map,\n                $grid_edit_class,\n                $col_visib,\n                $url_sql_query,\n                $analyzed_sql_results\n            );\n\n            // 3. Displays the modify/delete links on the right if required\n            if (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)\n            ) {\n                if (($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_RIGHT)\n                    || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH)\n                ) {\n\n                    $table_body_html .= $this->_getPlacedLinks(\n                        self::POSITION_RIGHT, $del_url, $displayParts, $row_no,\n                        $where_clause, $where_clause_html, $condition_array,\n                        $edit_url, $copy_url, $edit_anchor_class,\n                        $edit_str, $copy_str, $del_str, $js_conf\n                    );\n\n                }\n            } // end if (3)\n\n            $table_body_html .= '</tr>';\n            $table_body_html .= \"\\n\";\n            $row_no++;\n\n        } // end while\n\n        return $table_body_html;\n\n    } // end of the '_getTableBody()' function\n\n    /**\n     * Sets the MIME details of the columns in the results set\n     *\n     * @return void\n     */\n    private function _setMimeMap()\n    {\n        $fields_meta = $this->__get('fields_meta');\n        $mimeMap = array();\n        $added = array();\n\n        for ($currentColumn = 0;\n                $currentColumn < $this->__get('fields_cnt');\n                ++$currentColumn) {\n\n            $meta = $fields_meta[$currentColumn];\n            $orgFullTableName = $this->__get('db') . '.' . $meta->orgtable;\n\n            if ($GLOBALS['cfgRelation']['commwork']\n                && $GLOBALS['cfgRelation']['mimework']\n                && $GLOBALS['cfg']['BrowseMIME']\n                && ! $_SESSION['tmpval']['hide_transformation']\n                && empty($added[$orgFullTableName])\n            ) {\n                $mimeMap = array_merge(\n                    $mimeMap,\n                    PMA_getMIME($this->__get('db'), $meta->orgtable, false, true)\n                );\n                $added[$orgFullTableName] = true;\n            }\n        }\n\n        // special browser transformation for some SHOW statements\n        if ($this->__get('is_show')\n            && ! $_SESSION['tmpval']['hide_transformation']\n        ) {\n            preg_match(\n                '@^SHOW[[:space:]]+(VARIABLES|(FULL[[:space:]]+)?'\n                . 'PROCESSLIST|STATUS|TABLE|GRANTS|CREATE|LOGS|DATABASES|FIELDS'\n                . ')@i',\n                $this->__get('sql_query'), $which\n            );\n\n            if (isset($which[1])) {\n                $str = ' ' . strtoupper($which[1]);\n                $isShowProcessList = strpos($str, 'PROCESSLIST') > 0;\n                if ($isShowProcessList) {\n                    $mimeMap['..Info'] = array(\n                        'mimetype' => 'Text_Plain',\n                        'transformation' => 'output/Text_Plain_Sql.php',\n                    );\n                }\n\n                $isShowCreateTable = preg_match(\n                    '@CREATE[[:space:]]+TABLE@i', $this->__get('sql_query')\n                );\n                if ($isShowCreateTable) {\n                    $mimeMap['..Create Table'] = array(\n                        'mimetype' => 'Text_Plain',\n                        'transformation' => 'output/Text_Plain_Sql.php',\n                    );\n                }\n            }\n        }\n\n        $this->__set('mime_map', $mimeMap);\n    }\n\n    /**\n     * Get the values for one data row\n     *\n     * @param integer              &$dt_result           the link id associated to\n     *                                                   the query which results\n     *                                                   have to be displayed which\n     *                                                   results have to be\n     *                                                   displayed\n     * @param array                $row                  current row data\n     * @param integer              $row_no               the index of current row\n     * @param array                $col_order            the column order false when\n     *                                                   a property not found false\n     *                                                   when a property not found\n     * @param array                $map                  the list of relations\n     * @param string               $grid_edit_class      the class for all editable\n     *                                                   columns\n     * @param boolean|array|string $col_visib            column is visible(false);\n     *                                                   column isn't visible(string\n     *                                                   array)\n     * @param string               $url_sql_query        the analyzed sql query\n     * @param array                $analyzed_sql_results analyzed sql results\n     *\n     * @return  string $row_values_html  html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getRowValues(\n        &$dt_result, $row, $row_no, $col_order, $map,\n        $grid_edit_class, $col_visib,\n        $url_sql_query, $analyzed_sql_results\n    ) {\n        $row_values_html = '';\n\n        // Following variable are needed for use in isset/empty or\n        // use with array indexes/safe use in foreach\n        $sql_query = $this->__get('sql_query');\n        $fields_meta = $this->__get('fields_meta');\n        $highlight_columns = $this->__get('highlight_columns');\n        $mime_map = $this->__get('mime_map');\n\n        $row_info = $this->_getRowInfoForSpecialLinks($row, $col_order);\n\n        $whereClauseMap = $this->__get('whereClauseMap');\n\n        $columnCount = $this->__get('fields_cnt');\n        for ($currentColumn = 0;\n                $currentColumn < $columnCount;\n                ++$currentColumn) {\n\n            // assign $i with appropriate column order\n            $i = $col_order ? $col_order[$currentColumn] : $currentColumn;\n\n            $meta    = $fields_meta[$i];\n            $orgFullColName\n                = $this->__get('db') . '.' . $meta->orgtable . '.' . $meta->orgname;\n\n            $not_null_class = $meta->not_null ? 'not_null' : '';\n            $relation_class = isset($map[$meta->name]) ? 'relation' : '';\n            $hide_class = ($col_visib && ! $col_visib[$currentColumn])\n                ? 'hide'\n                : '';\n            $grid_edit = $meta->orgtable != '' ? $grid_edit_class : '';\n\n            // handle datetime-related class, for grid editing\n            $field_type_class\n                = $this->_getClassForDateTimeRelatedFields($meta->type);\n\n            $is_field_truncated = false;\n            // combine all the classes applicable to this column's value\n            $class = $this->_getClassesForColumn(\n                $grid_edit, $not_null_class, $relation_class,\n                $hide_class, $field_type_class\n            );\n\n            //  See if this column should get highlight because it's used in the\n            //  where-query.\n            $condition_field = (isset($highlight_columns)\n                && (isset($highlight_columns[$meta->name])\n                || isset($highlight_columns[Util::backquote($meta->name)])))\n                ? true\n                : false;\n\n            // Wrap MIME-transformations. [MIME]\n            $default_function = 'PMA_mimeDefaultFunction'; // default_function\n            $transformation_plugin = $default_function;\n            $transform_options = array();\n\n            if ($GLOBALS['cfgRelation']['mimework']\n                && $GLOBALS['cfg']['BrowseMIME']\n            ) {\n\n                if (isset($mime_map[$orgFullColName]['mimetype'])\n                    && !empty($mime_map[$orgFullColName]['transformation'])\n                ) {\n\n                    $file = $mime_map[$orgFullColName]['transformation'];\n                    $include_file = 'libraries/plugins/transformations/' . $file;\n\n                    if (file_exists($include_file)) {\n\n                        include_once $include_file;\n                        $class_name = PMA_getTransformationClassName($include_file);\n                        // todo add $plugin_manager\n                        $plugin_manager = null;\n                        $transformation_plugin = new $class_name(\n                            $plugin_manager\n                        );\n\n                        $transform_options  = PMA_Transformation_getOptions(\n                            isset(\n                                $mime_map[$orgFullColName]\n                                ['transformation_options']\n                            )\n                            ? $mime_map[$orgFullColName]\n                            ['transformation_options']\n                            : ''\n                        );\n\n                        $meta->mimetype = str_replace(\n                            '_', '/',\n                            $mime_map[$orgFullColName]['mimetype']\n                        );\n\n                    } // end if file_exists\n                } // end if transformation is set\n            } // end if mime/transformation works.\n\n            // Check whether the field needs to display with syntax highlighting\n\n            $dbLower = mb_strtolower($this->__get('db'));\n            $tblLower = mb_strtolower($meta->orgtable);\n            $nameLower = mb_strtolower($meta->orgname);\n            if (! empty($this->transformation_info[$dbLower][$tblLower][$nameLower])\n                && (trim($row[$i]) != '')\n                && ! $_SESSION['tmpval']['hide_transformation']\n            ) {\n                include_once $this->transformation_info\n                    [$dbLower][$tblLower][$nameLower][0];\n                $transformation_plugin = new $this->transformation_info\n                    [$dbLower][$tblLower][$nameLower][1](null);\n\n                $transform_options  = PMA_Transformation_getOptions(\n                    isset($mime_map[$orgFullColName]['transformation_options'])\n                    ? $mime_map[$orgFullColName]['transformation_options']\n                    : ''\n                );\n\n                $meta->mimetype = str_replace(\n                    '_', '/',\n                    $this->transformation_info[$dbLower]\n                    [mb_strtolower($meta->orgtable)]\n                    [mb_strtolower($meta->orgname)][2]\n                );\n\n            }\n\n            // Check for the predefined fields need to show as link in schemas\n            include_once 'libraries/special_schema_links.lib.php';\n\n            if (isset($GLOBALS['special_schema_links'])\n                && (! empty($GLOBALS['special_schema_links'][$dbLower][$tblLower][$nameLower]))\n            ) {\n\n                $linking_url = $this->_getSpecialLinkUrl(\n                    $row[$i], $row_info, mb_strtolower($meta->orgname)\n                );\n                $transformation_plugin = new Text_Plain_Link();\n\n                $transform_options  = array(\n                    0 => $linking_url,\n                    2 => true\n                );\n\n                $meta->mimetype = str_replace(\n                    '_', '/',\n                    'Text/Plain'\n                );\n\n            }\n\n            /*\n             * The result set can have columns from more than one table,\n             * this is why we have to check for the unique conditions\n             * related to this table; however getUniqueCondition() is\n             * costly and does not need to be called if we already know\n             * the conditions for the current table.\n             */\n            if (! isset($whereClauseMap[$row_no][$meta->orgtable])) {\n                $unique_conditions = Util::getUniqueCondition(\n                    $dt_result, // handle\n                    $this->__get('fields_cnt'), // fields_cnt\n                    $this->__get('fields_meta'), // fields_meta\n                    $row, // row\n                    false, // force_unique\n                    $meta->orgtable, // restrict_to_table\n                    $analyzed_sql_results // analyzed_sql_results\n                );\n                $whereClauseMap[$row_no][$meta->orgtable] = $unique_conditions[0];\n            }\n\n            $_url_params = array(\n                'db'            => $this->__get('db'),\n                'table'         => $meta->orgtable,\n                'where_clause'  => $whereClauseMap[$row_no][$meta->orgtable],\n                'transform_key' => $meta->orgname\n            );\n\n            if (! empty($sql_query)) {\n                $_url_params['sql_query'] = $url_sql_query;\n            }\n\n            $transform_options['wrapper_link']\n                = PMA_URL_getCommon($_url_params);\n\n            $display_params = $this->__get('display_params');\n\n            // in some situations (issue 11406), numeric returns 1\n            // even for a string type\n            if ($meta->numeric == 1 && $meta->type != 'string') {\n                // n u m e r i c\n\n                $display_params['data'][$row_no][$i]\n                    = $this->_getDataCellForNumericColumns(\n                        $row[$i],\n                        $class,\n                        $condition_field,\n                        $meta,\n                        $map,\n                        $is_field_truncated,\n                        $analyzed_sql_results,\n                        $transformation_plugin,\n                        $default_function,\n                        $transform_options\n                    );\n\n            } elseif ($meta->type == self::GEOMETRY_FIELD) {\n                // g e o m e t r y\n\n                // Remove 'grid_edit' from $class as we do not allow to\n                // inline-edit geometry data.\n                $class = str_replace('grid_edit', '', $class);\n\n                $display_params['data'][$row_no][$i]\n                    = $this->_getDataCellForGeometryColumns(\n                        $row[$i],\n                        $class,\n                        $meta,\n                        $map,\n                        $_url_params,\n                        $condition_field,\n                        $transformation_plugin,\n                        $default_function,\n                        $transform_options,\n                        $analyzed_sql_results\n                    );\n\n            } else {\n                // n o t   n u m e r i c\n\n                $display_params['data'][$row_no][$i]\n                    = $this->_getDataCellForNonNumericColumns(\n                        $row[$i],\n                        $class,\n                        $meta,\n                        $map,\n                        $_url_params,\n                        $condition_field,\n                        $transformation_plugin,\n                        $default_function,\n                        $transform_options,\n                        $is_field_truncated,\n                        $analyzed_sql_results,\n                        $dt_result,\n                        $i\n                    );\n\n            }\n\n            // output stored cell\n            $row_values_html .= $display_params['data'][$row_no][$i];\n\n            if (isset($display_params['rowdata'][$i][$row_no])) {\n                $display_params['rowdata'][$i][$row_no]\n                    .= $display_params['data'][$row_no][$i];\n            } else {\n                $display_params['rowdata'][$i][$row_no]\n                    = $display_params['data'][$row_no][$i];\n            }\n\n            $this->__set('display_params', $display_params);\n\n        } // end for\n\n        return $row_values_html;\n\n    } // end of the '_getRowValues()' function\n\n    /**\n     * Get link for display special schema links\n     *\n     * @param string $column_value column value\n     * @param array  $row_info     information about row\n     * @param string $field_name   column name\n     *\n     * @return string generated link\n     */\n    private function _getSpecialLinkUrl($column_value, $row_info, $field_name)\n    {\n\n        $linking_url_params = array();\n        $link_relations = $GLOBALS['special_schema_links']\n            [mb_strtolower($this->__get('db'))]\n            [mb_strtolower($this->__get('table'))]\n            [$field_name];\n\n        if (! is_array($link_relations['link_param'])) {\n            $linking_url_params[$link_relations['link_param']] = $column_value;\n        } else {\n            // Consider only the case of creating link for column field\n            // sql query that needs to be passed as url param\n            $sql = 'SELECT `' . $column_value . '` FROM `'\n                . $row_info[$link_relations['link_param'][1]] . '`.`'\n                . $row_info[$link_relations['link_param'][2]] . '`';\n            $linking_url_params[$link_relations['link_param'][0]] = $sql;\n        }\n\n        $divider = strpos($link_relations['default_page'], '?') ? '&' : '?';\n        if (empty($link_relations['link_dependancy_params'])) {\n            return $link_relations['default_page']\n                . PMA_URL_getCommon($linking_url_params, 'html', $divider);\n        }\n\n        foreach ($link_relations['link_dependancy_params'] as $new_param) {\n\n            // If param_info is an array, set the key and value\n            // from that array\n            if (is_array($new_param['param_info'])) {\n                $linking_url_params[$new_param['param_info'][0]]\n                    = $new_param['param_info'][1];\n                continue;\n            }\n\n            $linking_url_params[$new_param['param_info']]\n                = $row_info[mb_strtolower($new_param['column_name'])];\n\n            // Special case 1 - when executing routines, according\n            // to the type of the routine, url param changes\n            if (empty($row_info['routine_type'])) {\n                continue;\n            }\n        }\n\n        return $link_relations['default_page']\n            . PMA_URL_getCommon($linking_url_params, 'html', $divider);\n    }\n\n\n    /**\n     * Prepare row information for display special links\n     *\n     * @param array $row       current row data\n     * @param array $col_order the column order\n     *\n     * @return array $row_info associative array with column nama -> value\n     */\n    private function _getRowInfoForSpecialLinks($row, $col_order)\n    {\n\n        $row_info = array();\n        $fields_meta = $this->__get('fields_meta');\n\n        for ($n = 0; $n < $this->__get('fields_cnt'); ++$n) {\n            $m = $col_order ? $col_order[$n] : $n;\n            $row_info[mb_strtolower($fields_meta[$m]->name)]\n                = $row[$m];\n        }\n\n        return $row_info;\n\n    }\n\n    /**\n     * Get url sql query without conditions to shorten URLs\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return  string  $url_sql        analyzed sql query\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getUrlSqlQuery($analyzed_sql_results)\n    {\n        if (($analyzed_sql_results['querytype'] != 'SELECT')\n            || (mb_strlen($this->__get('sql_query')) < 200)\n        ) {\n            return $this->__get('sql_query');\n        }\n\n        $query = 'SELECT ' . Query::getClause(\n            $analyzed_sql_results['statement'],\n            $analyzed_sql_results['parser']->list,\n            'SELECT'\n        );\n\n        $from_clause = Query::getClause(\n            $analyzed_sql_results['statement'],\n            $analyzed_sql_results['parser']->list,\n            'FROM'\n        );\n\n        if (!empty($from_clause)) {\n            $query .= ' FROM ' . $from_clause;\n        }\n\n        return $query;\n\n    } // end of the '_getUrlSqlQuery()' function\n\n\n    /**\n     * Get column order and column visibility\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return  array           2 element array - $col_order, $col_visib\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getColumnParams($analyzed_sql_results)\n    {\n        if ($this->_isSelect($analyzed_sql_results)) {\n            $pmatable = new Table($this->__get('table'), $this->__get('db'));\n            $col_order = $pmatable->getUiProp(Table::PROP_COLUMN_ORDER);\n            $col_visib = $pmatable->getUiProp(Table::PROP_COLUMN_VISIB);\n        } else {\n            $col_order = false;\n            $col_visib = false;\n        }\n\n        return array($col_order, $col_visib);\n    } // end of the '_getColumnParams()' function\n\n\n    /**\n     * Get HTML for repeating headers\n     *\n     * @param array $display_params holds various display info\n     *\n     * @return  string  $header_html    html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getRepeatingHeaders(\n        $display_params\n    ) {\n        $header_html = '<tr>' . \"\\n\";\n\n        if ($display_params['emptypre'] > 0) {\n\n            $header_html .= '    <th colspan=\"'\n                . $display_params['emptypre'] . '\">'\n                . \"\\n\" . '        &nbsp;</th>' . \"\\n\";\n\n        } else if ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_NONE) {\n            $header_html .= '    <th></th>' . \"\\n\";\n        }\n\n        foreach ($display_params['desc'] as $val) {\n            $header_html .= $val;\n        }\n\n        if ($display_params['emptyafter'] > 0) {\n            $header_html\n                .= '    <th colspan=\"' . $display_params['emptyafter']\n                . '\">'\n                . \"\\n\" . '        &nbsp;</th>' . \"\\n\";\n        }\n        $header_html .= '</tr>' . \"\\n\";\n\n        return $header_html;\n\n    } // end of the '_getRepeatingHeaders()' function\n\n\n    /**\n     * Get modified links\n     *\n     * @param string  $where_clause     the where clause of the sql\n     * @param boolean $clause_is_unique the unique condition of clause\n     * @param string  $url_sql_query    the analyzed sql query\n     *\n     * @return  array                   5 element array - $edit_url, $copy_url,\n     *                                  $edit_str, $copy_str, $edit_anchor_class\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getModifiedLinks(\n        $where_clause, $clause_is_unique, $url_sql_query\n    ) {\n\n        $_url_params = array(\n                'db'               => $this->__get('db'),\n                'table'            => $this->__get('table'),\n                'where_clause'     => $where_clause,\n                'clause_is_unique' => $clause_is_unique,\n                'sql_query'        => $url_sql_query,\n                'goto'             => 'sql.php',\n            );\n\n        $edit_url = 'tbl_change.php'\n            . PMA_URL_getCommon(\n                $_url_params + array('default_action' => 'update')\n            );\n\n        $copy_url = 'tbl_change.php'\n            . PMA_URL_getCommon(\n                $_url_params + array('default_action' => 'insert')\n            );\n\n        $edit_str = $this->_getActionLinkContent(\n            'b_edit.png', __('Edit')\n        );\n        $copy_str = $this->_getActionLinkContent(\n            'b_insrow.png', __('Copy')\n        );\n\n        // Class definitions required for grid editing jQuery scripts\n        $edit_anchor_class = \"edit_row_anchor\";\n        if ($clause_is_unique == 0) {\n            $edit_anchor_class .= ' nonunique';\n        }\n\n        return array($edit_url, $copy_url, $edit_str, $copy_str, $edit_anchor_class);\n\n    } // end of the '_getModifiedLinks()' function\n\n\n    /**\n     * Get delete and kill links\n     *\n     * @param string  $where_clause     the where clause of the sql\n     * @param boolean $clause_is_unique the unique condition of clause\n     * @param string  $url_sql_query    the analyzed sql query\n     * @param string  $del_lnk          the delete link of current row\n     * @param array   $row              the current row\n     *\n     * @return  array                       3 element array\n     *                                      $del_url, $del_str, $js_conf\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getDeleteAndKillLinks(\n        $where_clause, $clause_is_unique, $url_sql_query, $del_lnk, $row\n    ) {\n\n        $goto = $this->__get('goto');\n\n        if ($del_lnk == self::DELETE_ROW) { // delete row case\n\n            $_url_params = array(\n                'db'        => $this->__get('db'),\n                'table'     => $this->__get('table'),\n                'sql_query' => $url_sql_query,\n                'message_to_show' => __('The row has been deleted.'),\n                'goto'      => (empty($goto) ? 'tbl_sql.php' : $goto),\n            );\n\n            $lnk_goto = 'sql.php' . PMA_URL_getCommon($_url_params, 'text');\n\n            $del_query = 'DELETE FROM '\n                . Util::backquote($this->__get('table'))\n                . ' WHERE ' . $where_clause .\n                ($clause_is_unique ? '' : ' LIMIT 1');\n\n            $_url_params = array(\n                    'db'        => $this->__get('db'),\n                    'table'     => $this->__get('table'),\n                    'sql_query' => $del_query,\n                    'message_to_show' => __('The row has been deleted.'),\n                    'goto'      => $lnk_goto,\n                );\n            $del_url  = 'sql.php' . PMA_URL_getCommon($_url_params);\n\n            $js_conf  = 'DELETE FROM ' . PMA_jsFormat($this->__get('table'))\n                . ' WHERE ' . PMA_jsFormat($where_clause, false)\n                . ($clause_is_unique ? '' : ' LIMIT 1');\n\n            $del_str = $this->_getActionLinkContent('b_drop.png', __('Delete'));\n\n        } elseif ($del_lnk == self::KILL_PROCESS) { // kill process case\n\n            $_url_params = array(\n                    'db'        => $this->__get('db'),\n                    'table'     => $this->__get('table'),\n                    'sql_query' => $url_sql_query,\n                    'goto'      => 'index.php',\n                );\n\n            $lnk_goto = 'sql.php'\n                . PMA_URL_getCommon(\n                    $_url_params, 'text'\n                );\n\n            $kill = $GLOBALS['dbi']->getKillQuery($row[0]);\n\n            $_url_params = array(\n                    'db'        => 'mysql',\n                    'sql_query' => $kill,\n                    'goto'      => $lnk_goto,\n                );\n\n            $del_url  = 'sql.php' . PMA_URL_getCommon($_url_params);\n            $js_conf  = $kill;\n            $del_str = Util::getIcon(\n                'b_drop.png', __('Kill')\n            );\n        } else {\n            $del_url = $del_str = $js_conf = null;\n        }\n\n        return array($del_url, $del_str, $js_conf);\n\n    } // end of the '_getDeleteAndKillLinks()' function\n\n\n    /**\n     * Get content inside the table row action links (Edit/Copy/Delete)\n     *\n     * @param string $icon         The name of the file to get\n     * @param string $display_text The text displaying after the image icon\n     *\n     * @return  string\n     *\n     * @access  private\n     *\n     * @see     _getModifiedLinks(), _getDeleteAndKillLinks()\n     */\n    private function _getActionLinkContent($icon, $display_text)\n    {\n\n        $linkContent = '';\n\n        if (isset($GLOBALS['cfg']['RowActionType'])\n            && $GLOBALS['cfg']['RowActionType'] == self::ACTION_LINK_CONTENT_ICONS\n        ) {\n\n            $linkContent .= '<span class=\"nowrap\">'\n                . Util::getImage(\n                    $icon, $display_text\n                )\n                . '</span>';\n\n        } else if (isset($GLOBALS['cfg']['RowActionType'])\n            && $GLOBALS['cfg']['RowActionType'] == self::ACTION_LINK_CONTENT_TEXT\n        ) {\n\n            $linkContent .= '<span class=\"nowrap\">' . $display_text . '</span>';\n\n        } else {\n\n            $linkContent .= Util::getIcon(\n                $icon, $display_text\n            );\n\n        }\n\n        return $linkContent;\n\n    }\n\n\n    /**\n     * Prepare placed links\n     *\n     * @param string  $dir               the direction of links should place\n     * @param string  $del_url           the url for delete row\n     * @param array   $displayParts      which elements to display\n     * @param integer $row_no            the index of current row\n     * @param string  $where_clause      the where clause of the sql\n     * @param string  $where_clause_html the html encoded where clause\n     * @param array   $condition_array   array of keys (primary, unique, condition)\n     * @param string  $edit_url          the url for edit row\n     * @param string  $copy_url          the url for copy row\n     * @param string  $edit_anchor_class the class for html element for edit\n     * @param string  $edit_str          the label for edit row\n     * @param string  $copy_str          the label for copy row\n     * @param string  $del_str           the label for delete row\n     * @param string  $js_conf           text for the JS confirmation\n     *\n     * @return  string                      html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getPlacedLinks(\n        $dir, $del_url, $displayParts, $row_no, $where_clause, $where_clause_html,\n        $condition_array, $edit_url, $copy_url,\n        $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf\n    ) {\n\n        if (! isset($js_conf)) {\n            $js_conf = '';\n        }\n\n        return $this->_getCheckboxAndLinks(\n            $dir, $del_url, $displayParts,\n            $row_no, $where_clause, $where_clause_html, $condition_array,\n            $edit_url, $copy_url, $edit_anchor_class,\n            $edit_str, $copy_str, $del_str, $js_conf\n        );\n\n    } // end of the '_getPlacedLinks()' function\n\n\n    /**\n     * Get the combined classes for a column\n     *\n     * @param string $grid_edit_class  the class for all editable columns\n     * @param string $not_null_class   the class for not null columns\n     * @param string $relation_class   the class for relations in a column\n     * @param string $hide_class       the class for visibility of a column\n     * @param string $field_type_class the class related to type of the field\n     *\n     * @return string $class the combined classes\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getClassesForColumn(\n        $grid_edit_class, $not_null_class, $relation_class,\n        $hide_class, $field_type_class\n    ) {\n        $class = 'data ' . $grid_edit_class . ' ' . $not_null_class . ' '\n            . $relation_class . ' ' . $hide_class . ' ' . $field_type_class;\n\n        return $class;\n\n    } // end of the '_getClassesForColumn()' function\n\n\n    /**\n     * Get class for datetime related fields\n     *\n     * @param string $type the type of the column field\n     *\n     * @return  string  $field_type_class   the class for the column\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getClassForDateTimeRelatedFields($type)\n    {\n        if ((substr($type, 0, 9) == self::TIMESTAMP_FIELD)\n            || ($type == self::DATETIME_FIELD)\n        ) {\n            $field_type_class = 'datetimefield';\n        } elseif ($type == self::DATE_FIELD) {\n            $field_type_class = 'datefield';\n        } elseif ($type == self::TIME_FIELD) {\n            $field_type_class = 'timefield';\n        } elseif ($type == self::STRING_FIELD) {\n            $field_type_class = 'text';\n        } else {\n            $field_type_class = '';\n        }\n        return $field_type_class;\n    } // end of the '_getClassForDateTimeRelatedFields()' function\n\n\n    /**\n     * Prepare data cell for numeric type fields\n     *\n     * @param string        $column                the column's value\n     * @param string        $class                 the html class for column\n     * @param boolean       $condition_field       the column should highlighted\n     *                                             or not\n     * @param object        $meta                  the meta-information about this\n     *                                             field\n     * @param array         $map                   the list of relations\n     * @param boolean       $is_field_truncated    the condition for blob data\n     *                                             replacements\n     * @param array         $analyzed_sql_results  the analyzed query\n     * @param object|string $transformation_plugin the name of transformation plugin\n     * @param string        $default_function      the default transformation\n     *                                             function\n     * @param string        $transform_options     the transformation parameters\n     *\n     * @return  string  $cell the prepared cell, html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getDataCellForNumericColumns(\n        $column, $class, $condition_field, $meta, $map, $is_field_truncated,\n        $analyzed_sql_results, $transformation_plugin, $default_function,\n        $transform_options\n    ) {\n\n        if (! isset($column) || is_null($column)) {\n\n            $cell = $this->_buildNullDisplay(\n                'right ' . $class, $condition_field, $meta, ''\n            );\n\n        } elseif ($column != '') {\n\n            $nowrap = ' nowrap';\n            $where_comparison = ' = ' . $column;\n\n            $cell = $this->_getRowData(\n                'right ' . $class, $condition_field,\n                $analyzed_sql_results, $meta, $map, $column,\n                $transformation_plugin, $default_function, $nowrap,\n                $where_comparison, $transform_options,\n                $is_field_truncated, ''\n            );\n        } else {\n\n            $cell = $this->_buildEmptyDisplay(\n                'right ' . $class, $condition_field, $meta, ''\n            );\n        }\n\n        return $cell;\n\n    } // end of the '_getDataCellForNumericColumns()' function\n\n\n    /**\n     * Get data cell for geometry type fields\n     *\n     * @param string        $column                the relevant column in data row\n     * @param string        $class                 the html class for column\n     * @param object        $meta                  the meta-information about\n     *                                             this field\n     * @param array         $map                   the list of relations\n     * @param array         $_url_params           the parameters for generate url\n     * @param boolean       $condition_field       the column should highlighted\n     *                                             or not\n     * @param object|string $transformation_plugin the name of transformation\n     *                                             function\n     * @param string        $default_function      the default transformation\n     *                                             function\n     * @param string        $transform_options     the transformation parameters\n     * @param array         $analyzed_sql_results  the analyzed query\n     *\n     * @return  string  $cell                  the prepared data cell, html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getDataCellForGeometryColumns(\n        $column, $class, $meta, $map, $_url_params, $condition_field,\n        $transformation_plugin, $default_function, $transform_options,\n        $analyzed_sql_results\n    ) {\n        if (! isset($column) || is_null($column)) {\n            $cell = $this->_buildNullDisplay($class, $condition_field, $meta);\n            return $cell;\n        }\n\n        if ($column == '') {\n            $cell = $this->_buildEmptyDisplay($class, $condition_field, $meta);\n            return $cell;\n        }\n\n        // Display as [GEOMETRY - (size)]\n        if ($_SESSION['tmpval']['geoOption'] == self::GEOMETRY_DISP_GEOM) {\n            $geometry_text = $this->_handleNonPrintableContents(\n                strtoupper(self::GEOMETRY_FIELD), $column, $transformation_plugin,\n                $transform_options, $default_function, $meta, $_url_params\n            );\n\n            $cell = $this->_buildValueDisplay(\n                $class, $condition_field, $geometry_text\n            );\n            return $cell;\n        }\n\n        if ($_SESSION['tmpval']['geoOption'] == self::GEOMETRY_DISP_WKT) {\n            // Prepare in Well Known Text(WKT) format.\n            $where_comparison = ' = ' . $column;\n\n            // Convert to WKT format\n            $wktval = Util::asWKT($column);\n            list(\n                $is_field_truncated,\n                $wktval,\n                // skip 3rd param\n            ) = $this->_getPartialText($wktval);\n\n            $cell = $this->_getRowData(\n                $class, $condition_field, $analyzed_sql_results, $meta, $map,\n                $wktval, $transformation_plugin, $default_function, '',\n                $where_comparison, $transform_options,\n                $is_field_truncated, ''\n            );\n            return $cell;\n        }\n\n        // Prepare in  Well Known Binary (WKB) format.\n\n        if ($_SESSION['tmpval']['display_binary']) {\n            $where_comparison = ' = ' . $column;\n\n            $wkbval = substr(bin2hex($column), 8);\n            list(\n                $is_field_truncated,\n                $wkbval,\n                // skip 3rd param\n            ) = $this->_getPartialText($wkbval);\n\n            $cell = $this->_getRowData(\n                $class, $condition_field,\n                $analyzed_sql_results, $meta, $map, $wkbval,\n                $transformation_plugin, $default_function, '',\n                $where_comparison, $transform_options,\n                $is_field_truncated, ''\n            );\n            return $cell;\n        }\n\n        $wkbval = $this->_handleNonPrintableContents(\n            self::BINARY_FIELD, $column, $transformation_plugin,\n            $transform_options, $default_function, $meta,\n            $_url_params\n        );\n\n        $cell = $this->_buildValueDisplay(\n            $class, $condition_field, $wkbval\n        );\n\n        return $cell;\n\n    } // end of the '_getDataCellForGeometryColumns()' function\n\n\n    /**\n     * Get data cell for non numeric type fields\n     *\n     * @param string        $column                the relevant column in data row\n     * @param string        $class                 the html class for column\n     * @param object        $meta                  the meta-information about\n     *                                             the field\n     * @param array         $map                   the list of relations\n     * @param array         $_url_params           the parameters for generate\n     *                                             url\n     * @param boolean       $condition_field       the column should highlighted\n     *                                             or not\n     * @param object|string $transformation_plugin the name of transformation\n     *                                             function\n     * @param string        $default_function      the default transformation\n     *                                             function\n     * @param string        $transform_options     the transformation parameters\n     * @param boolean       $is_field_truncated    is data truncated due to\n     *                                             LimitChars\n     * @param array         $analyzed_sql_results  the analyzed query\n     * @param integer       &$dt_result            the link id associated to\n     *                                             the query which results\n     *                                             have to be displayed\n     * @param integer       $col_index             the column index\n     *\n     * @return  string  $cell the prepared data cell, html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getDataCellForNonNumericColumns(\n        $column, $class, $meta, $map, $_url_params, $condition_field,\n        $transformation_plugin, $default_function, $transform_options,\n        $is_field_truncated, $analyzed_sql_results, &$dt_result, $col_index\n    ) {\n        $original_length = 0;\n\n        $is_analyse = $this->__get('is_analyse');\n        $field_flags = $GLOBALS['dbi']->fieldFlags($dt_result, $col_index);\n\n        $bIsText = gettype($transformation_plugin) === 'object'\n            && strpos($transformation_plugin->getMIMEtype(), 'Text')\n            === false;\n\n        // disable inline grid editing\n        // if binary fields are protected\n        // or transformation plugin is of non text type\n        // such as image\n        if ((stristr($field_flags, self::BINARY_FIELD)\n            && ($GLOBALS['cfg']['ProtectBinary'] === 'all'\n            || ($GLOBALS['cfg']['ProtectBinary'] === 'noblob'\n            && !stristr($meta->type, self::BLOB_FIELD))\n            || ($GLOBALS['cfg']['ProtectBinary'] === 'blob'\n            && stristr($meta->type, self::BLOB_FIELD))))\n            || $bIsText\n        ) {\n            $class = str_replace('grid_edit', '', $class);\n        }\n\n        if (! isset($column) || is_null($column)) {\n            $cell = $this->_buildNullDisplay($class, $condition_field, $meta);\n            return $cell;\n        }\n\n        if ($column == '') {\n            $cell = $this->_buildEmptyDisplay($class, $condition_field, $meta);\n            return $cell;\n        }\n\n        // Cut all fields to $GLOBALS['cfg']['LimitChars']\n        // (unless it's a link-type transformation or binary)\n        if (!(gettype($transformation_plugin) === \"object\"\n            && strpos($transformation_plugin->getName(), 'Link') !== false)\n            && !stristr($field_flags, self::BINARY_FIELD)\n        ) {\n            list(\n                $is_field_truncated,\n                $column,\n                $original_length\n            ) = $this->_getPartialText($column);\n        }\n\n        $formatted = false;\n        if (isset($meta->_type) && $meta->_type === MYSQLI_TYPE_BIT) {\n\n            $column = Util::printableBitValue(\n                $column, $meta->length\n            );\n\n            // some results of PROCEDURE ANALYSE() are reported as\n            // being BINARY but they are quite readable,\n            // so don't treat them as BINARY\n        } elseif (stristr($field_flags, self::BINARY_FIELD)\n            && !(isset($is_analyse) && $is_analyse)\n        ) {\n            // we show the BINARY or BLOB message and field's size\n            // (or maybe use a transformation)\n            $binary_or_blob = self::BLOB_FIELD;\n            if ($meta->type === self::STRING_FIELD) {\n                $binary_or_blob = self::BINARY_FIELD;\n            }\n            $column = $this->_handleNonPrintableContents(\n                $binary_or_blob, $column, $transformation_plugin,\n                $transform_options, $default_function,\n                $meta, $_url_params, $is_field_truncated\n            );\n            $class = $this->_addClass(\n                $class, $condition_field, $meta, '',\n                $is_field_truncated, $transformation_plugin, $default_function\n            );\n            $result = strip_tags($column);\n            // disable inline grid editing\n            // if binary or blob data is not shown\n            if (stristr($result, $binary_or_blob)) {\n                $class = str_replace('grid_edit', '', $class);\n            }\n            $formatted = true;\n        }\n\n        if ($formatted) {\n            $cell = $this->_buildValueDisplay(\n                $class, $condition_field, $column\n            );\n            return $cell;\n        }\n\n        // transform functions may enable no-wrapping:\n        $function_nowrap = 'applyTransformationNoWrap';\n\n        $bool_nowrap = (($default_function != $transformation_plugin)\n            && function_exists($transformation_plugin->$function_nowrap()))\n            ? $transformation_plugin->$function_nowrap($transform_options)\n            : false;\n\n        // do not wrap if date field type\n        $nowrap = (preg_match('@DATE|TIME@i', $meta->type)\n            || $bool_nowrap) ? ' nowrap' : '';\n\n        $where_comparison = ' = \\''\n            . Util::sqlAddSlashes($column)\n            . '\\'';\n\n        $cell = $this->_getRowData(\n            $class, $condition_field,\n            $analyzed_sql_results, $meta, $map, $column,\n            $transformation_plugin, $default_function, $nowrap,\n            $where_comparison, $transform_options,\n            $is_field_truncated, $original_length\n        );\n\n        return $cell;\n\n    } // end of the '_getDataCellForNonNumericColumns()' function\n\n    /**\n     * Checks the posted options for viewing query results\n     * and sets appropriate values in the session.\n     *\n     * @todo    make maximum remembered queries configurable\n     * @todo    move/split into SQL class!?\n     * @todo    currently this is called twice unnecessary\n     * @todo    ignore LIMIT and ORDER in query!?\n     *\n     * @return void\n     *\n     * @access  public\n     *\n     * @see     sql.php file\n     */\n    public function setConfigParamsForDisplayTable()\n    {\n\n        $sql_md5 = md5($this->__get('sql_query'));\n        $query = array();\n        if (isset($_SESSION['tmpval']['query'][$sql_md5])) {\n            $query = $_SESSION['tmpval']['query'][$sql_md5];\n        }\n\n        $query['sql'] = $this->__get('sql_query');\n\n        if (empty($query['repeat_cells'])) {\n            $query['repeat_cells'] = $GLOBALS['cfg']['RepeatCells'];\n        }\n\n        // as this is a form value, the type is always string so we cannot\n        // use PMA_isValid($_REQUEST['session_max_rows'], 'integer')\n        if (PMA_isValid($_REQUEST['session_max_rows'], 'numeric')) {\n            $query['max_rows'] = (int)$_REQUEST['session_max_rows'];\n            unset($_REQUEST['session_max_rows']);\n        } elseif ($_REQUEST['session_max_rows'] == self::ALL_ROWS) {\n            $query['max_rows'] = self::ALL_ROWS;\n            unset($_REQUEST['session_max_rows']);\n        } elseif (empty($query['max_rows'])) {\n            $query['max_rows'] = $GLOBALS['cfg']['MaxRows'];\n        }\n\n        if (PMA_isValid($_REQUEST['pos'], 'numeric')) {\n            $query['pos'] = $_REQUEST['pos'];\n            unset($_REQUEST['pos']);\n        } elseif (empty($query['pos'])) {\n            $query['pos'] = 0;\n        }\n\n        if (PMA_isValid(\n            $_REQUEST['pftext'],\n            array(\n                self::DISPLAY_PARTIAL_TEXT, self::DISPLAY_FULL_TEXT\n            )\n        )\n        ) {\n            $query['pftext'] = $_REQUEST['pftext'];\n            unset($_REQUEST['pftext']);\n        } elseif (empty($query['pftext'])) {\n            $query['pftext'] = self::DISPLAY_PARTIAL_TEXT;\n        }\n\n        if (PMA_isValid(\n            $_REQUEST['relational_display'],\n            array(\n                self::RELATIONAL_KEY, self::RELATIONAL_DISPLAY_COLUMN\n            )\n        )\n        ) {\n            $query['relational_display'] = $_REQUEST['relational_display'];\n            unset($_REQUEST['relational_display']);\n        } elseif (empty($query['relational_display'])) {\n            // The current session value has priority over a\n            // change via Settings; this change will be apparent\n            // starting from the next session\n            $query['relational_display'] = $GLOBALS['cfg']['RelationalDisplay'];\n        }\n\n        if (PMA_isValid(\n            $_REQUEST['geoOption'],\n            array(\n                self::GEOMETRY_DISP_WKT, self::GEOMETRY_DISP_WKB,\n                self::GEOMETRY_DISP_GEOM\n            )\n        )\n        ) {\n            $query['geoOption'] = $_REQUEST['geoOption'];\n            unset($_REQUEST['geoOption']);\n        } elseif (empty($query['geoOption'])) {\n            $query['geoOption'] = self::GEOMETRY_DISP_GEOM;\n        }\n\n        if (isset($_REQUEST['display_binary'])) {\n            $query['display_binary'] = true;\n            unset($_REQUEST['display_binary']);\n        } elseif (isset($_REQUEST['display_options_form'])) {\n            // we know that the checkbox was unchecked\n            unset($query['display_binary']);\n        } elseif (isset($_REQUEST['full_text_button'])) {\n            // do nothing to keep the value that is there in the session\n        } else {\n            // selected by default because some operations like OPTIMIZE TABLE\n            // and all queries involving functions return \"binary\" contents,\n            // according to low-level field flags\n            $query['display_binary'] = true;\n        }\n\n        if (isset($_REQUEST['display_blob'])) {\n            $query['display_blob'] = true;\n            unset($_REQUEST['display_blob']);\n        } elseif (isset($_REQUEST['display_options_form'])) {\n            // we know that the checkbox was unchecked\n            unset($query['display_blob']);\n        }\n\n        if (isset($_REQUEST['hide_transformation'])) {\n            $query['hide_transformation'] = true;\n            unset($_REQUEST['hide_transformation']);\n        } elseif (isset($_REQUEST['display_options_form'])) {\n            // we know that the checkbox was unchecked\n            unset($query['hide_transformation']);\n        }\n\n        // move current query to the last position, to be removed last\n        // so only least executed query will be removed if maximum remembered\n        // queries limit is reached\n        unset($_SESSION['tmpval']['query'][$sql_md5]);\n        $_SESSION['tmpval']['query'][$sql_md5] = $query;\n\n        // do not exceed a maximum number of queries to remember\n        if (count($_SESSION['tmpval']['query']) > 10) {\n            array_shift($_SESSION['tmpval']['query']);\n            //echo 'deleting one element ...';\n        }\n\n        // populate query configuration\n        $_SESSION['tmpval']['pftext']\n            = $query['pftext'];\n        $_SESSION['tmpval']['relational_display']\n            = $query['relational_display'];\n        $_SESSION['tmpval']['geoOption']\n            = $query['geoOption'];\n        $_SESSION['tmpval']['display_binary'] = isset(\n            $query['display_binary']\n        );\n        $_SESSION['tmpval']['display_blob'] = isset(\n            $query['display_blob']\n        );\n        $_SESSION['tmpval']['hide_transformation'] = isset(\n            $query['hide_transformation']\n        );\n        $_SESSION['tmpval']['pos']\n            = $query['pos'];\n        $_SESSION['tmpval']['max_rows']\n            = $query['max_rows'];\n        $_SESSION['tmpval']['repeat_cells']\n            = $query['repeat_cells'];\n    }\n\n    /**\n     * Prepare a table of results returned by a SQL query.\n     *\n     * @param integer &$dt_result           the link id associated to the query\n     *                                      which results have to be displayed\n     * @param array   &$displayParts        the parts to display\n     * @param array   $analyzed_sql_results analyzed sql results\n     * @param boolean $is_limited_display   With limited operations or not\n     *\n     * @return  string   $table_html   Generated HTML content for resulted table\n     *\n     * @access  public\n     *\n     * @see     sql.php file\n     */\n    public function getTable(\n        &$dt_result, &$displayParts, $analyzed_sql_results,\n        $is_limited_display = false\n    ) {\n\n        /**\n         * The statement this table is built for.\n         * @var \\SqlParser\\Statements\\SelectStatement\n         */\n        $statement = $analyzed_sql_results['statement'];\n\n        $table_html = '';\n        // Following variable are needed for use in isset/empty or\n        // use with array indexes/safe use in foreach\n        $fields_meta = $this->__get('fields_meta');\n        $showtable = $this->__get('showtable');\n        $printview = $this->__get('printview');\n\n        // why was this called here? (already called from sql.php)\n        //$this->setConfigParamsForDisplayTable();\n\n        /**\n         * @todo move this to a central place\n         * @todo for other future table types\n         */\n        $is_innodb = (isset($showtable['Type'])\n            && $showtable['Type'] == self::TABLE_TYPE_INNO_DB);\n\n        if ($is_innodb\n            && PMA_isJustBrowsing($analyzed_sql_results, true)\n        ) {\n            // \"j u s t   b r o w s i n g\"\n            $pre_count = '~';\n            $after_count = Util::showHint(\n                PMA_sanitize(\n                    __('May be approximate. See [doc@faq3-11]FAQ 3.11[/doc].')\n                )\n            );\n        } else {\n            $pre_count = '';\n            $after_count = '';\n        }\n\n        // 1. ----- Prepares the work -----\n\n        // 1.1 Gets the information about which functionalities should be\n        //     displayed\n\n        list(\n            $displayParts,\n            $total\n        )  = $this->_setDisplayPartsAndTotal($displayParts);\n\n        // 1.2 Defines offsets for the next and previous pages\n        if ($displayParts['nav_bar'] == '1') {\n            list($pos_next, $pos_prev) = $this->_getOffsets();\n        } // end if\n\n        // 1.3 Extract sorting expressions.\n        //     we need $sort_expression and $sort_expression_nodirection\n        //     even if there are many table references\n        $sort_expression = array();\n        $sort_expression_nodirection = array();\n        $sort_direction = array();\n\n        if (!empty($statement->order)) {\n            foreach ($statement->order as $o) {\n                $sort_expression[] = $o->expr->expr . ' ' . $o->type;\n                $sort_expression_nodirection[] = $o->expr->expr;\n                $sort_direction[] = $o->type;\n            }\n        } else {\n            $sort_expression[] = '';\n            $sort_expression_nodirection[] = '';\n            $sort_direction[] = '';\n        }\n\n        $number_of_columns = count($sort_expression_nodirection);\n\n        // 1.4 Prepares display of first and last value of the sorted column\n        $sorted_column_message = '';\n        for ( $i = 0; $i < $number_of_columns; $i++ ) {\n            $sorted_column_message .= $this->_getSortedColumnMessage(\n                $dt_result, $sort_expression_nodirection[$i]\n            );\n        }\n\n        // 2. ----- Prepare to display the top of the page -----\n\n        // 2.1 Prepares a messages with position information\n        if (($displayParts['nav_bar'] == '1') && isset($pos_next)) {\n\n            $message = $this->_setMessageInformation(\n                $sorted_column_message,\n                $analyzed_sql_results,\n                $total,\n                $pos_next,\n                $pre_count,\n                $after_count\n            );\n\n            $table_html .= Util::getMessage(\n                $message, $this->__get('sql_query'), 'success'\n            );\n\n        } elseif ((!isset($printview) || ($printview != '1')) && !$is_limited_display) {\n\n            $table_html .= Util::getMessage(\n                __('Your SQL query has been executed successfully.'),\n                $this->__get('sql_query'), 'success'\n            );\n        }\n\n        // 2.3 Prepare the navigation bars\n        if (!mb_strlen($this->__get('table'))) {\n\n            if ($analyzed_sql_results['querytype'] == 'SELECT') {\n                // table does not always contain a real table name,\n                // for example in MySQL 5.0.x, the query SHOW STATUS\n                // returns STATUS as a table name\n                $this->__set('table', $fields_meta[0]->table);\n            } else {\n                $this->__set('table', '');\n            }\n\n        }\n\n        // can the result be sorted?\n        if ($displayParts['sort_lnk'] == '1') {\n\n            // At this point, $sort_expression is an array but we only verify\n            // the first element in case we could find that the table is\n            // sorted by one of the choices listed in the\n            // \"Sort by key\" drop-down\n            list($unsorted_sql_query, $sort_by_key_html)\n                = $this->_getUnsortedSqlAndSortByKeyDropDown(\n                    $analyzed_sql_results, $sort_expression[0]\n                );\n\n        } else {\n            $sort_by_key_html = $unsorted_sql_query = '';\n        }\n\n        if (($displayParts['nav_bar'] == '1') && (empty($statement->limit))) {\n            $table_html .= $this->_getPlacedTableNavigations(\n                $pos_next, $pos_prev, self::PLACE_TOP_DIRECTION_DROPDOWN,\n                $is_innodb, $sort_by_key_html\n            );\n        }\n\n        // 2b ----- Get field references from Database -----\n        // (see the 'relation' configuration variable)\n\n        // initialize map\n        $map = array();\n\n        $target = array();\n        if (!empty($statement->from)) {\n            foreach ($statement->from as $field) {\n                if (!empty($field->table)) {\n                    $target[] = $field->table;\n                }\n            }\n        }\n\n        if (mb_strlen($this->__get('table'))) {\n            // This method set the values for $map array\n            $this->_setParamForLinkForeignKeyRelatedTables($map);\n\n            // Coming from 'Distinct values' action of structure page\n            // We manipulate relations mechanism to show a link to related rows.\n            if ($this->__get('is_browse_distinct')) {\n                $map[$fields_meta[1]->name] = array(\n                    $this->__get('table'),\n                    $fields_meta[1]->name,\n                    '',\n                    $this->__get('db')\n                );\n            }\n        } // end if\n        // end 2b\n\n        // 3. ----- Prepare the results table -----\n        if ($is_limited_display) {\n            $table_html .= \"<br>\";\n        }\n\n        $table_html .= $this->_getTableHeaders(\n            $displayParts,\n            $analyzed_sql_results,\n            $unsorted_sql_query,\n            $sort_expression,\n            $sort_expression_nodirection,\n            $sort_direction,\n            $is_limited_display\n        );\n\n        $table_html .= '<tbody>' . \"\\n\";\n\n        $table_html .= $this->_getTableBody(\n            $dt_result,\n            $displayParts,\n            $map,\n            $analyzed_sql_results,\n            $is_limited_display\n        );\n\n        $this->__set('display_params', null);\n\n        $table_html .= '</tbody>' . \"\\n\" . '</table>';\n\n        // 4. ----- Prepares the link for multi-fields edit and delete\n\n        if ($displayParts['del_lnk'] == self::DELETE_ROW\n            && $displayParts['del_lnk'] != self::KILL_PROCESS\n        ) {\n\n            $table_html .= $this->_getMultiRowOperationLinks(\n                $dt_result,\n                $analyzed_sql_results,\n                $displayParts['del_lnk']\n            );\n\n        }\n\n        // 5. ----- Get the navigation bar at the bottom if required -----\n        if (($displayParts['nav_bar'] == '1') && empty($statement->limit)) {\n            $table_html .= $this->_getPlacedTableNavigations(\n                $pos_next, $pos_prev, self::PLACE_BOTTOM_DIRECTION_DROPDOWN,\n                $is_innodb, $sort_by_key_html\n            );\n        } elseif (! isset($printview) || ($printview != '1')) {\n            $table_html .= \"\\n\" . '<br /><br />' . \"\\n\";\n        }\n\n        // 6. ----- Prepare \"Query results operations\"\n        if ((! isset($printview) || ($printview != '1')) && ! $is_limited_display) {\n            $table_html .= $this->_getResultsOperations(\n                $displayParts, $analyzed_sql_results\n            );\n        }\n\n        return $table_html;\n\n    } // end of the 'getTable()' function\n\n\n    /**\n     * Get offsets for next page and previous page\n     *\n     * @return  array           array with two elements - $pos_next, $pos_prev\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getOffsets()\n    {\n\n        if ($_SESSION['tmpval']['max_rows'] == self::ALL_ROWS) {\n            $pos_next     = 0;\n            $pos_prev     = 0;\n        } else {\n\n            $pos_next     = $_SESSION['tmpval']['pos']\n                            + $_SESSION['tmpval']['max_rows'];\n\n            $pos_prev     = $_SESSION['tmpval']['pos']\n                            - $_SESSION['tmpval']['max_rows'];\n\n            if ($pos_prev < 0) {\n                $pos_prev = 0;\n            }\n        }\n\n        return array($pos_next, $pos_prev);\n\n    } // end of the '_getOffsets()' function\n\n\n    /**\n     * Prepare sorted column message\n     *\n     * @param integer &$dt_result                  the link id associated to the\n     *                                              query which results have to\n     *                                              be displayed\n     * @param string  $sort_expression_nodirection sort expression without direction\n     *\n     * @return  string                              html content\n     *          null                                if not found sorted column\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getSortedColumnMessage(\n        &$dt_result, $sort_expression_nodirection\n    ) {\n\n        $fields_meta = $this->__get('fields_meta'); // To use array indexes\n\n        if (empty($sort_expression_nodirection)) {\n            return null;\n        }\n\n        if (mb_strpos($sort_expression_nodirection, '.') === false) {\n            $sort_table = $this->__get('table');\n            $sort_column = $sort_expression_nodirection;\n        } else {\n            list($sort_table, $sort_column)\n                = explode('.', $sort_expression_nodirection);\n        }\n\n        $sort_table = Util::unQuote($sort_table);\n        $sort_column = Util::unQuote($sort_column);\n\n        // find the sorted column index in row result\n        // (this might be a multi-table query)\n        $sorted_column_index = false;\n\n        foreach ($fields_meta as $key => $meta) {\n            if (($meta->table == $sort_table) && ($meta->name == $sort_column)) {\n                $sorted_column_index = $key;\n                break;\n            }\n        }\n\n        if ($sorted_column_index === false) {\n            return null;\n        }\n\n        // fetch first row of the result set\n        $row = $GLOBALS['dbi']->fetchRow($dt_result);\n\n        // initializing default arguments\n        $default_function = 'PMA_mimeDefaultFunction';\n        $transformation_plugin = $default_function;\n        $transform_options = array();\n\n        // check for non printable sorted row data\n        $meta = $fields_meta[$sorted_column_index];\n\n        if (stristr($meta->type, self::BLOB_FIELD)\n            || ($meta->type == self::GEOMETRY_FIELD)\n        ) {\n\n            $column_for_first_row = $this->_handleNonPrintableContents(\n                $meta->type, $row[$sorted_column_index],\n                $transformation_plugin, $transform_options,\n                $default_function, $meta\n            );\n\n        } else {\n            $column_for_first_row = $row[$sorted_column_index];\n        }\n\n        $column_for_first_row = mb_strtoupper(\n            mb_substr(\n                $column_for_first_row, 0, $GLOBALS['cfg']['LimitChars']\n            ) . '...'\n        );\n\n        // fetch last row of the result set\n        $GLOBALS['dbi']->dataSeek($dt_result, $this->__get('num_rows') - 1);\n        $row = $GLOBALS['dbi']->fetchRow($dt_result);\n\n        // check for non printable sorted row data\n        $meta = $fields_meta[$sorted_column_index];\n        if (stristr($meta->type, self::BLOB_FIELD)\n            || ($meta->type == self::GEOMETRY_FIELD)\n        ) {\n\n            $column_for_last_row = $this->_handleNonPrintableContents(\n                $meta->type, $row[$sorted_column_index],\n                $transformation_plugin, $transform_options,\n                $default_function, $meta\n            );\n\n        } else {\n            $column_for_last_row = $row[$sorted_column_index];\n        }\n\n        $column_for_last_row = mb_strtoupper(\n            mb_substr(\n                $column_for_last_row, 0, $GLOBALS['cfg']['LimitChars']\n            ) . '...'\n        );\n\n        // reset to first row for the loop in _getTableBody()\n        $GLOBALS['dbi']->dataSeek($dt_result, 0);\n\n        // we could also use here $sort_expression_nodirection\n        return ' [' . htmlspecialchars($sort_column)\n            . ': <strong>' . htmlspecialchars($column_for_first_row) . ' - '\n            . htmlspecialchars($column_for_last_row) . '</strong>]';\n    } // end of the '_getSortedColumnMessage()' function\n\n\n    /**\n     * Set the content that needs to be shown in message\n     *\n     * @param string  $sorted_column_message the message for sorted column\n     * @param array   $analyzed_sql_results  the analyzed query\n     * @param integer $total                 the total number of rows returned by\n     *                                       the SQL query without any\n     *                                       programmatically appended LIMIT clause\n     * @param integer $pos_next              the offset for next page\n     * @param string  $pre_count             the string renders before row count\n     * @param string  $after_count           the string renders after row count\n     *\n     * @return Message $message an object of Message\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _setMessageInformation(\n        $sorted_column_message, $analyzed_sql_results, $total,\n        $pos_next, $pre_count, $after_count\n    ) {\n\n        $unlim_num_rows = $this->__get('unlim_num_rows'); // To use in isset()\n\n        if (!empty($analyzed_sql_results['statement']->limit)) {\n\n            $first_shown_rec = $analyzed_sql_results['statement']->limit->offset;\n            $row_count = $analyzed_sql_results['statement']->limit->rowCount;\n\n            if ($row_count < $total) {\n                $last_shown_rec = $first_shown_rec + $row_count - 1;\n            } else {\n                $last_shown_rec = $first_shown_rec + $total - 1;\n            }\n\n        } elseif (($_SESSION['tmpval']['max_rows'] == self::ALL_ROWS)\n            || ($pos_next > $total)\n        ) {\n\n            $first_shown_rec = $_SESSION['tmpval']['pos'];\n            $last_shown_rec  = $total - 1;\n\n        } else {\n\n            $first_shown_rec = $_SESSION['tmpval']['pos'];\n            $last_shown_rec  = $pos_next - 1;\n\n        }\n\n        $table = new Table($this->__get('table'), $this->__get('db'));\n        if ($table->isView()\n            && ($total == $GLOBALS['cfg']['MaxExactCountViews'])\n        ) {\n\n            $message = Message::notice(\n                __(\n                    'This view has at least this number of rows. '\n                    . 'Please refer to %sdocumentation%s.'\n                )\n            );\n\n            $message->addParam('[doc@cfg_MaxExactCount]');\n            $message->addParam('[/doc]');\n            $message_view_warning = Util::showHint($message);\n\n        } else {\n            $message_view_warning = false;\n        }\n\n        $message = Message::success(__('Showing rows %1s - %2s'));\n        $message->addParam($first_shown_rec);\n\n        if ($message_view_warning !== false) {\n            $message->addParam('... ' . $message_view_warning, false);\n        } else {\n            $message->addParam($last_shown_rec);\n        }\n\n        $message->addMessage('(');\n\n        if ($message_view_warning === false) {\n\n            if (isset($unlim_num_rows) && ($unlim_num_rows != $total)) {\n                $message_total = Message::notice(\n                    $pre_count . __('%1$d total, %2$d in query')\n                );\n                $message_total->addParam($total);\n                $message_total->addParam($unlim_num_rows);\n            } else {\n                $message_total = Message::notice($pre_count . __('%d total'));\n                $message_total->addParam($total);\n            }\n\n            if (!empty($after_count)) {\n                $message_total->addMessage($after_count);\n            }\n            $message->addMessage($message_total, '');\n\n            $message->addMessage(', ', '');\n        }\n\n        $message_qt = Message::notice(__('Query took %01.4f seconds.') . ')');\n        $message_qt->addParam($this->__get('querytime'));\n\n        $message->addMessage($message_qt, '');\n        if (! is_null($sorted_column_message)) {\n            $message->addMessage($sorted_column_message, '');\n        }\n\n        return $message;\n\n    } // end of the '_setMessageInformation()' function\n\n\n    /**\n     * Set the value of $map array for linking foreign key related tables\n     *\n     * @param array &$map the list of relations\n     *\n     * @return  void\n     *\n     * @access  private\n     *\n     * @see      getTable()\n     */\n    private function _setParamForLinkForeignKeyRelatedTables(&$map)\n    {\n\n        // To be able to later display a link to the related table,\n        // we verify both types of relations: either those that are\n        // native foreign keys or those defined in the phpMyAdmin\n        // configuration storage. If no PMA storage, we won't be able\n        // to use the \"column to display\" notion (for example show\n        // the name related to a numeric id).\n        $exist_rel = PMA_getForeigners(\n            $this->__get('db'), $this->__get('table'), '', self::POSITION_BOTH\n        );\n\n        if (! empty($exist_rel)) {\n\n            foreach ($exist_rel as $master_field => $rel) {\n                if ($master_field != 'foreign_keys_data') {\n                    $display_field = PMA_getDisplayField(\n                        $rel['foreign_db'], $rel['foreign_table']\n                    );\n                    $map[$master_field] = array(\n                        $rel['foreign_table'],\n                        $rel['foreign_field'],\n                        $display_field,\n                        $rel['foreign_db']\n                    );\n                } else {\n                    foreach ($rel as $key => $one_key) {\n                        foreach ($one_key['index_list'] as $index => $one_field) {\n                            $display_field = PMA_getDisplayField(\n                                isset($one_key['ref_db_name'])\n                                ? $one_key['ref_db_name']\n                                : $GLOBALS['db'],\n                                $one_key['ref_table_name']\n                            );\n\n                            $map[$one_field] = array(\n                                $one_key['ref_table_name'],\n                                $one_key['ref_index_list'][$index],\n                                $display_field,\n                                isset($one_key['ref_db_name'])\n                                ? $one_key['ref_db_name']\n                                : $GLOBALS['db']\n                            );\n                        }\n                    }\n                }\n            } // end while\n        } // end if\n\n    } // end of the '_setParamForLinkForeignKeyRelatedTables()' function\n\n\n    /**\n     * Prepare multi field edit/delete links\n     *\n     * @param integer &$dt_result           the link id associated to the query which\n     *                                      results have to be displayed\n     * @param array   $analyzed_sql_results analyzed sql results\n     * @param string  $del_link             the display element - 'del_link'\n     *\n     * @return string $links_html html content\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getMultiRowOperationLinks(\n        &$dt_result, $analyzed_sql_results, $del_link\n    ) {\n\n        $links_html = '<div class=\"print_ignore\" >';\n        $url_query = $this->__get('url_query');\n        $delete_text = ($del_link == self::DELETE_ROW) ? __('Delete') : __('Kill');\n\n        $links_html .= '<img class=\"selectallarrow\" width=\"38\" height=\"22\"'\n            . ' src=\"' . $this->__get('pma_theme_image') . 'arrow_'\n            . $this->__get('text_dir') . '.png' . '\"'\n            . ' alt=\"' . __('With selected:') . '\" />';\n\n        $links_html .= '<input type=\"checkbox\" '\n            . 'id=\"resultsForm_' . $this->__get('unique_id') . '_checkall\" '\n            . 'class=\"checkall_box\" title=\"' . __('Check all') . '\" /> '\n            . '<label for=\"resultsForm_' . $this->__get('unique_id') . '_checkall\">'\n            . __('Check all') . '</label> '\n            . '<i style=\"margin-left: 2em\">' . __('With selected:') . '</i>' . \"\\n\";\n\n        $links_html .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_change',\n            __('Edit'), 'b_edit.png', 'edit'\n        );\n\n        $links_html .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_copy',\n            __('Copy'), 'b_insrow.png', 'copy'\n        );\n\n        $links_html .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_delete',\n            $delete_text, 'b_drop.png', 'delete'\n        );\n\n        if ($analyzed_sql_results['querytype'] == 'SELECT') {\n            $links_html .= Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_export',\n                __('Export'), 'b_tblexport.png', 'export'\n            );\n        }\n\n        $links_html .= \"</div>\\n\";\n\n        $links_html .= '<input type=\"hidden\" name=\"sql_query\"'\n            . ' value=\"' . htmlspecialchars($this->__get('sql_query')) . '\" />'\n            . \"\\n\";\n\n        if (! empty($url_query)) {\n            $links_html .= '<input type=\"hidden\" name=\"url_query\"'\n                . ' value=\"' . $url_query . '\" />' . \"\\n\";\n        }\n\n        // fetch last row of the result set\n        $GLOBALS['dbi']->dataSeek($dt_result, $this->__get('num_rows') - 1);\n        $row = $GLOBALS['dbi']->fetchRow($dt_result);\n\n        // $clause_is_unique is needed by getTable() to generate the proper param\n        // in the multi-edit and multi-delete form\n        list($where_clause, $clause_is_unique, $condition_array)\n            = Util::getUniqueCondition(\n                $dt_result, // handle\n                $this->__get('fields_cnt'), // fields_cnt\n                $this->__get('fields_meta'), // fields_meta\n                $row, // row\n                false, // force_unique\n                false, // restrict_to_table\n                $analyzed_sql_results // analyzed_sql_results\n            );\n        unset($where_clause, $condition_array);\n\n        // reset to first row for the loop in _getTableBody()\n        $GLOBALS['dbi']->dataSeek($dt_result, 0);\n\n        $links_html .= '<input type=\"hidden\" name=\"clause_is_unique\"'\n            . ' value=\"' . $clause_is_unique . '\" />' . \"\\n\";\n\n        $links_html .= '</form>' . \"\\n\";\n\n        return $links_html;\n\n    } // end of the '_getMultiRowOperationLinks()' function\n\n\n    /**\n     * Prepare table navigation bar at the top or bottom\n     *\n     * @param integer $pos_next         the offset for the \"next\" page\n     * @param integer $pos_prev         the offset for the \"previous\" page\n     * @param string  $place            the place to show navigation\n     * @param boolean $is_innodb        whether its InnoDB or not\n     * @param string  $sort_by_key_html the sort by key dialog\n     *\n     * @return  string  html content of navigation bar\n     *\n     * @access  private\n     *\n     * @see     _getTable()\n     */\n    private function _getPlacedTableNavigations(\n        $pos_next, $pos_prev, $place, $is_innodb, $sort_by_key_html\n    ) {\n\n        $navigation_html = '';\n\n        if ($place == self::PLACE_BOTTOM_DIRECTION_DROPDOWN) {\n            $navigation_html .= '<br />' . \"\\n\";\n        }\n\n        $navigation_html .= $this->_getTableNavigation(\n            $pos_next, $pos_prev, $is_innodb, $sort_by_key_html\n        );\n\n        if ($place == self::PLACE_TOP_DIRECTION_DROPDOWN) {\n            $navigation_html .= \"\\n\";\n        }\n\n        return $navigation_html;\n\n    } // end of the '_getPlacedTableNavigations()' function\n\n    /**\n     * Generates HTML to display the Create view in span tag\n     *\n     * @param array  $analyzed_sql_results analyzed sql results\n     * @param string $url_query            String with URL Parameters\n     *\n     * @return string\n     *\n     * @access private\n     *\n     * @see _getResultsOperations()\n     */\n    private function _getLinkForCreateView($analyzed_sql_results, $url_query)\n    {\n        $results_operations_html = '';\n        if (empty($analyzed_sql_results['procedure'])) {\n\n            $ajax_class = ' ajax';\n\n            $results_operations_html .= '<span>'\n                . Util::linkOrButton(\n                    'view_create.php' . $url_query,\n                    Util::getIcon(\n                        'b_view_add.png', __('Create view'), true\n                    ),\n                    array('class' => 'create_view' . $ajax_class), true, true, ''\n                )\n                . '</span>' . \"\\n\";\n        }\n        return $results_operations_html;\n\n    }\n\n    /**\n     * Calls the _getResultsOperations with $only_view as true\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return string\n     *\n     * @access public\n     *\n     */\n    public function getCreateViewQueryResultOp($analyzed_sql_results)\n    {\n\n        $results_operations_html = '';\n        //calling to _getResultOperations with a fake $displayParts\n        //and setting only_view parameter to be true to generate just view\n        $results_operations_html .= $this->_getResultsOperations(\n            array(),\n            $analyzed_sql_results,\n            true\n        );\n        return $results_operations_html;\n    }\n\n    /**\n     * Get copy to clipboard links for results operations\n     *\n     * @return string $html\n     *\n     * @access  private\n     */\n    private function _getCopytoclipboardLinks()\n    {\n        $html = Util::linkOrButton(\n            '#',\n            Util::getIcon(\n                'b_insrow.png', __('Copy to clipboard'), true\n            ),\n            array('id' => 'copyToClipBoard'),\n            true,\n            true,\n            'copy_to_clip_board'\n        );\n\n        return $html;\n    }\n\n    /**\n     * Get printview links for results operations\n     *\n     * @return string $html\n     *\n     * @access  private\n     */\n    private function _getPrintviewLinks()\n    {\n        $html = Util::linkOrButton(\n            '#',\n            Util::getIcon(\n                'b_print.png', __('Print'), true\n            ),\n            array('id' => 'printView'),\n            true,\n            true,\n            'print_view'\n        );\n\n        return $html;\n    }\n\n    /**\n     * Get operations that are available on results.\n     *\n     * @param array   $displayParts         the parts to display\n     * @param array   $analyzed_sql_results analyzed sql results\n     * @param boolean $only_view            Whether to show only view\n     *\n     * @return string $results_operations_html  html content\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getResultsOperations(\n        $displayParts, $analyzed_sql_results, $only_view = false\n    ) {\n        global $printview;\n\n        $results_operations_html = '';\n        $fields_meta = $this->__get('fields_meta'); // To safe use in foreach\n        $header_shown = false;\n        $header = '<fieldset class=\"print_ignore\" ><legend>'\n            . __('Query results operations') . '</legend>';\n\n        $_url_params = array(\n                    'db'        => $this->__get('db'),\n                    'table'     => $this->__get('table'),\n                    'printview' => '1',\n                    'sql_query' => $this->__get('sql_query'),\n                );\n        $url_query = PMA_URL_getCommon($_url_params);\n\n        if (!$header_shown) {\n            $results_operations_html .= $header;\n            $header_shown = true;\n        }\n        // if empty result set was produced we need to\n        // show only view and not other options\n        if ($only_view) {\n            $results_operations_html .= $this->_getLinkForCreateView(\n                $analyzed_sql_results, $url_query\n            );\n\n            if ($header_shown) {\n                $results_operations_html .= '</fieldset><br />';\n            }\n            return $results_operations_html;\n        }\n\n        // Displays \"printable view\" link if required\n        if ($displayParts['pview_lnk'] == '1') {\n            $results_operations_html .= $this->_getPrintviewLinks();\n            $results_operations_html .= $this->_getCopytoclipboardLinks();\n        } // end displays \"printable view\"\n\n        // Export link\n        // (the url_query has extra parameters that won't be used to export)\n        // (the single_table parameter is used in PMA_getExportDisplay()\n        //  to hide the SQL and the structure export dialogs)\n        // If the parser found a PROCEDURE clause\n        // (most probably PROCEDURE ANALYSE()) it makes no sense to\n        // display the Export link).\n        if (($analyzed_sql_results['querytype'] == self::QUERY_TYPE_SELECT)\n            && ! isset($printview)\n            && empty($analyzed_sql_results['procedure'])\n        ) {\n\n            if (count($analyzed_sql_results['select_tables']) == 1) {\n                $_url_params['single_table'] = 'true';\n            }\n\n            if (! $header_shown) {\n                $results_operations_html .= $header;\n                $header_shown = true;\n            }\n\n            $_url_params['unlim_num_rows'] = $this->__get('unlim_num_rows');\n\n            /**\n             * At this point we don't know the table name; this can happen\n             * for example with a query like\n             * SELECT bike_code FROM (SELECT bike_code FROM bikes) tmp\n             * As a workaround we set in the table parameter the name of the\n             * first table of this database, so that tbl_export.php and\n             * the script it calls do not fail\n             */\n            if (empty($_url_params['table']) && ! empty($_url_params['db'])) {\n                $_url_params['table'] = $GLOBALS['dbi']->fetchValue(\"SHOW TABLES\");\n                /* No result (probably no database selected) */\n                if ($_url_params['table'] === false) {\n                    unset($_url_params['table']);\n                }\n            }\n\n            $results_operations_html .= Util::linkOrButton(\n                'tbl_export.php' . PMA_URL_getCommon($_url_params),\n                Util::getIcon(\n                    'b_tblexport.png', __('Export'), true\n                ),\n                '',\n                true,\n                true,\n                ''\n            )\n            . \"\\n\";\n\n            // prepare chart\n            $results_operations_html .= Util::linkOrButton(\n                'tbl_chart.php' . PMA_URL_getCommon($_url_params),\n                Util::getIcon(\n                    'b_chart.png', __('Display chart'), true\n                ),\n                '',\n                true,\n                true,\n                ''\n            )\n            . \"\\n\";\n\n            // prepare GIS chart\n            $geometry_found = false;\n            // If at least one geometry field is found\n            foreach ($fields_meta as $meta) {\n                if ($meta->type == self::GEOMETRY_FIELD) {\n                    $geometry_found = true;\n                    break;\n                }\n            }\n\n            if ($geometry_found) {\n                $results_operations_html\n                    .= Util::linkOrButton(\n                        'tbl_gis_visualization.php'\n                        . PMA_URL_getCommon($_url_params),\n                        Util::getIcon(\n                            'b_globe.gif', __('Visualize GIS data'), true\n                        ),\n                        '',\n                        true,\n                        true,\n                        ''\n                    )\n                    . \"\\n\";\n            }\n        }\n\n        // CREATE VIEW\n        /**\n         *\n         * @todo detect privileges to create a view\n         *       (but see 2006-01-19 note in display_create_table.lib.php,\n         *        I think we cannot detect db-specific privileges reliably)\n         * Note: we don't display a Create view link if we found a PROCEDURE clause\n         */\n        if (!$header_shown) {\n            $results_operations_html .= $header;\n            $header_shown = true;\n        }\n\n        $results_operations_html .= $this->_getLinkForCreateView(\n            $analyzed_sql_results, $url_query\n        );\n\n        if ($header_shown) {\n            $results_operations_html .= '</fieldset><br />';\n        }\n\n        return $results_operations_html;\n\n    } // end of the '_getResultsOperations()' function\n\n\n    /**\n     * Verifies what to do with non-printable contents (binary or BLOB)\n     * in Browse mode.\n     *\n     * @param string  $category              BLOB|BINARY|GEOMETRY\n     * @param string  $content               the binary content\n     * @param mixed   $transformation_plugin transformation plugin.\n     *                                       Can also be the default function:\n     *                                       PMA_mimeDefaultFunction\n     * @param string  $transform_options     transformation parameters\n     * @param string  $default_function      default transformation function\n     * @param object  $meta                  the meta-information about the field\n     * @param array   $url_params            parameters that should go to the\n     *                                       download link\n     * @param boolean &$is_truncated         the result is truncated or not\n     *\n     * @return mixed  string or float\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns(),\n     *          _getSortedColumnMessage()\n     */\n    private function _handleNonPrintableContents(\n        $category, $content, $transformation_plugin, $transform_options,\n        $default_function, $meta, $url_params = array(), &$is_truncated = null\n    ) {\n\n        $is_truncated = false;\n        $result = '[' . $category;\n\n        if (isset($content)) {\n\n            $size = mb_strlen($content, '8bit');\n            $display_size = Util::formatByteDown($size, 3, 1);\n            $result .= ' - ' . $display_size[0] . ' ' . $display_size[1];\n\n        } else {\n\n            $result .= ' - NULL';\n            $size = 0;\n\n        }\n\n        $result .= ']';\n\n        // if we want to use a text transformation on a BLOB column\n        if (gettype($transformation_plugin) === \"object\") {\n            $posMimeOctetstream = strpos(\n                $transformation_plugin->getMIMESubtype(),\n                'Octetstream'\n            );\n            $posMimeText = strpos($transformation_plugin->getMIMEtype(), 'Text');\n            if ($posMimeOctetstream\n                || $posMimeText !== false\n            ) {\n                // Applying Transformations on hex string of binary data\n                // seems more appropriate\n                $result = pack(\"H*\", bin2hex($content));\n            }\n        }\n\n        if ($size <= 0) {\n            return($result);\n        }\n\n        if ($default_function != $transformation_plugin) {\n            $result = $transformation_plugin->applyTransformation(\n                $result,\n                $transform_options,\n                $meta\n            );\n            return($result);\n        }\n\n        $result = $default_function($result, array(), $meta);\n        if (($_SESSION['tmpval']['display_binary']\n            && $meta->type === self::STRING_FIELD)\n            || ($_SESSION['tmpval']['display_blob']\n            && stristr($meta->type, self::BLOB_FIELD))\n        ) {\n            // in this case, restart from the original $content\n            if (mb_check_encoding($content, 'utf-8')\n                && !preg_match('/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x80-\\x9F]/u', $content)\n            ) {\n                // show as text if it's valid utf-8\n                $result = htmlspecialchars($content);\n            } else {\n                $result = '0x' . bin2hex($content);\n            }\n            list(\n                $is_truncated,\n                $result,\n                // skip 3rd param\n            ) = $this->_getPartialText($result);\n        }\n\n        /* Create link to download */\n\n        // in PHP < 5.5, empty() only checks variables\n        $tmpdb = $this->__get('db');\n        if (count($url_params) > 0\n            && (!empty($tmpdb) && !empty($meta->orgtable))\n        ) {\n            $result = '<a href=\"tbl_get_field.php'\n                . PMA_URL_getCommon($url_params)\n                . '\" class=\"disableAjax\">'\n                . $result . '</a>';\n        }\n\n        return($result);\n\n    } // end of the '_handleNonPrintableContents()' function\n\n\n    /**\n     * Retrieves the associated foreign key info for a data cell\n     *\n     * @param array  $map              the list of relations\n     * @param object $meta             the meta-information about the field\n     * @param string $where_comparison data for the where clause\n     *\n     * @return string  formatted data\n     *\n     * @access  private\n     *\n     */\n    private function _getFromForeign($map, $meta, $where_comparison)\n    {\n        $dispsql = 'SELECT '\n            . Util::backquote($map[$meta->name][2])\n            . ' FROM '\n            . Util::backquote($map[$meta->name][3])\n            . '.'\n            . Util::backquote($map[$meta->name][0])\n            . ' WHERE '\n            . Util::backquote($map[$meta->name][1])\n            . $where_comparison;\n\n        $dispresult = $GLOBALS['dbi']->tryQuery(\n            $dispsql,\n            null,\n            DatabaseInterface::QUERY_STORE\n        );\n\n        if ($dispresult && $GLOBALS['dbi']->numRows($dispresult) > 0) {\n            list($dispval) = $GLOBALS['dbi']->fetchRow($dispresult, 0);\n        } else {\n            $dispval = __('Link not found!');\n        }\n\n        $GLOBALS['dbi']->freeResult($dispresult);\n\n        return $dispval;\n    }\n\n    /**\n     * Prepares the displayable content of a data cell in Browse mode,\n     * taking into account foreign key description field and transformations\n     *\n     * @param string        $class                 css classes for the td element\n     * @param bool          $condition_field       whether the column is a part of\n     *                                             the where clause\n     * @param array         $analyzed_sql_results  the analyzed query\n     * @param object        $meta                  the meta-information about the\n     *                                             field\n     * @param array         $map                   the list of relations\n     * @param string        $data                  data\n     * @param object|string $transformation_plugin transformation plugin.\n     *                                             Can also be the default function:\n     *                                             PMA_mimeDefaultFunction\n     * @param string        $default_function      default function\n     * @param string        $nowrap                'nowrap' if the content should\n     *                                             not be wrapped\n     * @param string        $where_comparison      data for the where clause\n     * @param array         $transform_options     options for transformation\n     * @param bool          $is_field_truncated    whether the field is truncated\n     * @param string        $original_length       of a truncated column, or ''\n     *\n     * @return string  formatted data\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForNumericColumns(), _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns(),\n     *\n     */\n    private function _getRowData(\n        $class, $condition_field, $analyzed_sql_results, $meta, $map, $data,\n        $transformation_plugin, $default_function, $nowrap, $where_comparison,\n        $transform_options, $is_field_truncated, $original_length=''\n    ) {\n        $relational_display = $_SESSION['tmpval']['relational_display'];\n        $printview = $this->__get('printview');\n        $decimals = isset($meta->decimals) ? $meta->decimals : '-1';\n        $result = '<td data-decimals=\"' . $decimals . '\"'\n            . ' data-type=\"' . $meta->type . '\"';\n\n        if (! empty($original_length)) {\n            // cannot use data-original-length\n            $result .= ' data-originallength=\"' . $original_length . '\"';\n        }\n\n        $result .= ' class=\"'\n            . $this->_addClass(\n                $class, $condition_field, $meta, $nowrap,\n                $is_field_truncated, $transformation_plugin, $default_function\n            )\n            . '\">';\n\n        if (!empty($analyzed_sql_results['statement']->expr)) {\n            foreach ($analyzed_sql_results['statement']->expr as $expr) {\n                if ((empty($expr->alias)) || (empty($expr->column))) {\n                    continue;\n                }\n                if (strcasecmp($meta->name, $expr->alias) == 0) {\n                    $meta->name = $expr->column;\n                }\n            }\n        }\n\n        if (isset($map[$meta->name])) {\n\n            // Field to display from the foreign table?\n            if (isset($map[$meta->name][2])\n                && mb_strlen($map[$meta->name][2])\n            ) {\n                $dispval = $this->_getFromForeign(\n                    $map, $meta, $where_comparison\n                );\n            } else {\n                $dispval = '';\n            } // end if... else...\n\n            if (isset($printview) && ($printview == '1')) {\n\n                $result .= ($transformation_plugin != $default_function\n                    ? $transformation_plugin->applyTransformation(\n                        $data,\n                        $transform_options,\n                        $meta\n                    )\n                    : $default_function($data)\n                )\n                . ' <code>[-&gt;' . $dispval . ']</code>';\n\n            } else {\n\n                if ($relational_display == self::RELATIONAL_KEY) {\n\n                    // user chose \"relational key\" in the display options, so\n                    // the title contains the display field\n                    $title = (! empty($dispval))\n                        ? ' title=\"' . htmlspecialchars($dispval) . '\"'\n                        : '';\n\n                } else {\n                    $title = ' title=\"' . htmlspecialchars($data) . '\"';\n                }\n\n                $_url_params = array(\n                    'db'    => $map[$meta->name][3],\n                    'table' => $map[$meta->name][0],\n                    'pos'   => '0',\n                    'sql_query' => 'SELECT * FROM '\n                        . Util::backquote($map[$meta->name][3]) . '.'\n                        . Util::backquote($map[$meta->name][0])\n                        . ' WHERE '\n                        . Util::backquote($map[$meta->name][1])\n                        . $where_comparison,\n                );\n\n                $result .= '<a class=\"ajax\" href=\"sql.php'\n                    . PMA_URL_getCommon($_url_params)\n                    . '\"' . $title . '>';\n\n                if ($transformation_plugin != $default_function) {\n                    // always apply a transformation on the real data,\n                    // not on the display field\n                    $result .= $transformation_plugin->applyTransformation(\n                        $data,\n                        $transform_options,\n                        $meta\n                    );\n                } else {\n\n                    if ($relational_display == self::RELATIONAL_DISPLAY_COLUMN\n                        && ! empty($map[$meta->name][2])\n                    ) {\n                        // user chose \"relational display field\" in the\n                        // display options, so show display field in the cell\n                        $result .= $default_function($dispval);\n                    } else {\n                        // otherwise display data in the cell\n                        $result .= $default_function($data);\n                    }\n\n                }\n                $result .= '</a>';\n            }\n\n        } else {\n            $result .= ($transformation_plugin != $default_function\n                ? $transformation_plugin->applyTransformation(\n                    $data,\n                    $transform_options,\n                    $meta\n                )\n                : $default_function($data)\n            );\n        }\n\n        $result .= '</td>' . \"\\n\";\n\n        return $result;\n\n    } // end of the '_getRowData()' function\n\n\n    /**\n     * Prepares a checkbox for multi-row submits\n     *\n     * @param string $del_url           delete url\n     * @param array  $displayParts      array with explicit indexes for all\n     *                                  the display elements\n     * @param string $row_no            the row number\n     * @param string $where_clause_html url encoded where clause\n     * @param array  $condition_array   array of conditions in the where clause\n     * @param string $id_suffix         suffix for the id\n     * @param string $class             css classes for the td element\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getTableBody(), _getCheckboxAndLinks()\n     */\n    private function _getCheckboxForMultiRowSubmissions(\n        $del_url, $displayParts, $row_no, $where_clause_html, $condition_array,\n        $id_suffix, $class\n    ) {\n\n        $ret = '';\n\n        if (! empty($del_url) && $displayParts['del_lnk'] != self::KILL_PROCESS) {\n\n            $ret .= '<td ';\n            if (! empty($class)) {\n                $ret .= 'class=\"' . $class . '\"';\n            }\n\n            $ret .= ' class=\"center print_ignore\">'\n                . '<input type=\"checkbox\" id=\"id_rows_to_delete'\n                . $row_no . $id_suffix\n                . '\" name=\"rows_to_delete[' . $row_no . ']\"'\n                . ' class=\"multi_checkbox checkall\"'\n                . ' value=\"' . $where_clause_html . '\" '\n                . ' />'\n                . '<input type=\"hidden\" class=\"condition_array\" value=\"'\n                . htmlspecialchars(json_encode($condition_array)) . '\" />'\n                . '    </td>';\n        }\n\n        return $ret;\n\n    } // end of the '_getCheckboxForMultiRowSubmissions()' function\n\n\n    /**\n     * Prepares an Edit link\n     *\n     * @param string $edit_url          edit url\n     * @param string $class             css classes for td element\n     * @param string $edit_str          text for the edit link\n     * @param string $where_clause      where clause\n     * @param string $where_clause_html url encoded where clause\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getTableBody(), _getCheckboxAndLinks()\n     */\n    private function _getEditLink(\n        $edit_url, $class, $edit_str, $where_clause, $where_clause_html\n    ) {\n\n        $ret = '';\n        if (! empty($edit_url)) {\n\n            $ret .= '<td class=\"' . $class . ' center print_ignore\" '\n                . ' ><span class=\"nowrap\">'\n                . Util::linkOrButton(\n                    $edit_url, $edit_str, array(), false\n                );\n            /*\n             * Where clause for selecting this row uniquely is provided as\n             * a hidden input. Used by jQuery scripts for handling grid editing\n             */\n            if (! empty($where_clause)) {\n                $ret .= '<input type=\"hidden\" class=\"where_clause\" value =\"'\n                    . $where_clause_html . '\" />';\n            }\n            $ret .= '</span></td>';\n        }\n\n        return $ret;\n\n    } // end of the '_getEditLink()' function\n\n\n    /**\n     * Prepares an Copy link\n     *\n     * @param string $copy_url          copy url\n     * @param string $copy_str          text for the copy link\n     * @param string $where_clause      where clause\n     * @param string $where_clause_html url encoded where clause\n     * @param string $class             css classes for the td element\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getTableBody(), _getCheckboxAndLinks()\n     */\n    private function _getCopyLink(\n        $copy_url, $copy_str, $where_clause, $where_clause_html, $class\n    ) {\n\n        $ret = '';\n        if (! empty($copy_url)) {\n\n            $ret .= '<td class=\"';\n            if (! empty($class)) {\n                $ret .= $class . ' ';\n            }\n\n            $ret .= 'center print_ignore\" ' . ' ><span class=\"nowrap\">'\n               . Util::linkOrButton(\n                   $copy_url, $copy_str, array(), false\n               );\n\n            /*\n             * Where clause for selecting this row uniquely is provided as\n             * a hidden input. Used by jQuery scripts for handling grid editing\n             */\n            if (! empty($where_clause)) {\n                $ret .= '<input type=\"hidden\" class=\"where_clause\" value=\"'\n                    . $where_clause_html . '\" />';\n            }\n            $ret .= '</span></td>';\n        }\n\n        return $ret;\n\n    } // end of the '_getCopyLink()' function\n\n\n    /**\n     * Prepares a Delete link\n     *\n     * @param string $del_url delete url\n     * @param string $del_str text for the delete link\n     * @param string $js_conf text for the JS confirmation\n     * @param string $class   css classes for the td element\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getTableBody(), _getCheckboxAndLinks()\n     */\n    private function _getDeleteLink($del_url, $del_str, $js_conf, $class)\n    {\n\n        $ret = '';\n        if (empty($del_url)) {\n            return $ret;\n        }\n\n        $ret .= '<td class=\"';\n        if (! empty($class)) {\n            $ret .= $class . ' ';\n        }\n        $ajax = Response::getInstance()->isAjax() ? ' ajax' : '';\n        $ret .= 'center print_ignore\" ' . ' >'\n            . Util::linkOrButton(\n                $del_url,\n                $del_str,\n                array('class' => 'delete_row requireConfirm' . $ajax),\n                false\n            )\n            . '<div class=\"hide\">' . $js_conf . '</div>'\n            . '</td>';\n\n        return $ret;\n\n    } // end of the '_getDeleteLink()' function\n\n\n    /**\n     * Prepare checkbox and links at some position (left or right)\n     * (only called for horizontal mode)\n     *\n     * @param string $position          the position of the checkbox and links\n     * @param string $del_url           delete url\n     * @param array  $displayParts      array with explicit indexes for all the\n     *                                  display elements\n     * @param string $row_no            row number\n     * @param string $where_clause      where clause\n     * @param string $where_clause_html url encoded where clause\n     * @param array  $condition_array   array of conditions in the where clause\n     * @param string $edit_url          edit url\n     * @param string $copy_url          copy url\n     * @param string $class             css classes for the td elements\n     * @param string $edit_str          text for the edit link\n     * @param string $copy_str          text for the copy link\n     * @param string $del_str           text for the delete link\n     * @param string $js_conf           text for the JS confirmation\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getPlacedLinks()\n     */\n    private function _getCheckboxAndLinks(\n        $position, $del_url, $displayParts, $row_no, $where_clause,\n        $where_clause_html, $condition_array,\n        $edit_url, $copy_url, $class, $edit_str, $copy_str, $del_str, $js_conf\n    ) {\n\n        $ret = '';\n\n        if ($position == self::POSITION_LEFT) {\n\n            $ret .= $this->_getCheckboxForMultiRowSubmissions(\n                $del_url, $displayParts, $row_no, $where_clause_html,\n                $condition_array, '_left', ''\n            );\n\n            $ret .= $this->_getEditLink(\n                $edit_url, $class, $edit_str, $where_clause, $where_clause_html\n            );\n\n            $ret .= $this->_getCopyLink(\n                $copy_url, $copy_str, $where_clause, $where_clause_html, ''\n            );\n\n            $ret .= $this->_getDeleteLink($del_url, $del_str, $js_conf, '');\n\n        } elseif ($position == self::POSITION_RIGHT) {\n\n            $ret .= $this->_getDeleteLink($del_url, $del_str, $js_conf, '');\n\n            $ret .= $this->_getCopyLink(\n                $copy_url, $copy_str, $where_clause, $where_clause_html, ''\n            );\n\n            $ret .= $this->_getEditLink(\n                $edit_url, $class, $edit_str, $where_clause, $where_clause_html\n            );\n\n            $ret .= $this->_getCheckboxForMultiRowSubmissions(\n                $del_url, $displayParts, $row_no, $where_clause_html,\n                $condition_array, '_right', ''\n            );\n\n        } else { // $position == self::POSITION_NONE\n\n            $ret .= $this->_getCheckboxForMultiRowSubmissions(\n                $del_url, $displayParts, $row_no, $where_clause_html,\n                $condition_array, '_left', ''\n            );\n        }\n\n        return $ret;\n\n    } // end of the '_getCheckboxAndLinks()' function\n\n    /**\n     * Truncates given string based on LimitChars configuration\n     * and Session pftext variable\n     * (string is truncated only if necessary)\n     *\n     * @param string $str string to be truncated\n     *\n     * @return mixed\n     *\n     * @access  private\n     *\n     * @see     _handleNonPrintableContents(), _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns\n     */\n    private function _getPartialText($str)\n    {\n        $original_length = mb_strlen($str);\n        if ($original_length > $GLOBALS['cfg']['LimitChars']\n            && $_SESSION['tmpval']['pftext'] === self::DISPLAY_PARTIAL_TEXT\n        ) {\n            $str = mb_substr(\n                $str, 0, $GLOBALS['cfg']['LimitChars']\n            ) . '...';\n            $truncated = true;\n        } else {\n            $truncated = false;\n        }\n\n        return array($truncated, $str, $original_length);\n    }\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * functions for multi submit forms\n *\n * @usedby  mult_submits.inc.php\n *\n * @package PhpMyAdmin\n */\nuse PMA\\libraries\\Table;\n\n/**\n * Gets url params\n *\n * @param string $what               mult submit type\n * @param bool   $reload             is reload\n * @param string $action             action type\n * @param string $db                 database name\n * @param string $table              table name\n * @param array  $selected           selected rows(table,db)\n * @param array  $views              table views\n * @param string $original_sql_query original sql query\n * @param string $original_url_query original url query\n *\n * @return array\n */\nfunction PMA_getUrlParams(\n    $what, $reload, $action, $db, $table, $selected, $views,\n    $original_sql_query, $original_url_query\n) {\n    $_url_params = array(\n        'query_type' => $what,\n        'reload' => (! empty($reload) ? 1 : 0),\n    );\n    if (mb_strpos(' ' . $action, 'db_') == 1) {\n        $_url_params['db']= $db;\n    } elseif (mb_strpos(' ' . $action, 'tbl_') == 1\n        || $what == 'row_delete'\n    ) {\n        $_url_params['db']= $db;\n        $_url_params['table']= $table;\n    }\n    foreach ($selected as $sval) {\n        if ($what == 'row_delete') {\n            $_url_params['selected'][] = 'DELETE FROM '\n                . PMA\\libraries\\Util::backquote($table)\n                . ' WHERE ' . urldecode($sval) . ' LIMIT 1;';\n        } else {\n            $_url_params['selected'][] = $sval;\n        }\n    }\n    if ($what == 'drop_tbl' && !empty($views)) {\n        foreach ($views as $current) {\n            $_url_params['views'][] = $current;\n        }\n    }\n    if ($what == 'row_delete') {\n        $_url_params['original_sql_query'] = $original_sql_query;\n        if (! empty($original_url_query)) {\n            $_url_params['original_url_query'] = $original_url_query;\n        }\n    }\n\n    return  $_url_params;\n}\n\n/**\n * Builds or execute queries for multiple elements, depending on $query_type\n *\n * @param string $query_type  query type\n * @param array  $selected    selected tables\n * @param string $db          db name\n * @param string $table       table name\n * @param array  $views       table views\n * @param string $primary     table primary\n * @param string $from_prefix from prefix original\n * @param string $to_prefix   to prefix original\n *\n * @return array\n */\nfunction PMA_buildOrExecuteQueryForMulti(\n    $query_type, $selected, $db, $table, $views, $primary,\n    $from_prefix, $to_prefix\n) {\n    $rebuild_database_list = false;\n    $reload = null;\n    $a_query = null;\n    $sql_query = '';\n    $sql_query_views = null;\n    // whether to run query after each pass\n    $run_parts = false;\n    // whether to execute the query at the end (to display results)\n    $execute_query_later = false;\n    $result = null;\n\n    if ($query_type == 'drop_tbl') {\n        $sql_query_views = '';\n    }\n\n    $selected_cnt   = count($selected);\n    $deletes = false;\n    $copy_tbl =false;\n\n    for ($i = 0; $i < $selected_cnt; $i++) {\n        switch ($query_type) {\n        case 'row_delete':\n            $deletes = true;\n            $a_query = $selected[$i];\n            $run_parts = true;\n            break;\n\n        case 'drop_db':\n            PMA_relationsCleanupDatabase($selected[$i]);\n            $a_query   = 'DROP DATABASE '\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $reload    = 1;\n            $run_parts = true;\n            $rebuild_database_list = true;\n            break;\n\n        case 'drop_tbl':\n            PMA_relationsCleanupTable($db, $selected[$i]);\n            $current = $selected[$i];\n            if (!empty($views) && in_array($current, $views)) {\n                $sql_query_views .= (empty($sql_query_views) ? 'DROP VIEW ' : ', ')\n                          . PMA\\libraries\\Util::backquote($current);\n            } else {\n                $sql_query .= (empty($sql_query) ? 'DROP TABLE ' : ', ')\n                           . PMA\\libraries\\Util::backquote($current);\n            }\n            $reload    = 1;\n            break;\n\n        case 'check_tbl':\n            $sql_query .= (empty($sql_query) ? 'CHECK TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'optimize_tbl':\n            $sql_query .= (empty($sql_query) ? 'OPTIMIZE TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'analyze_tbl':\n            $sql_query .= (empty($sql_query) ? 'ANALYZE TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'checksum_tbl':\n            $sql_query .= (empty($sql_query) ? 'CHECKSUM TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'repair_tbl':\n            $sql_query .= (empty($sql_query) ? 'REPAIR TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'empty_tbl':\n            $deletes = true;\n            $a_query = 'TRUNCATE ';\n            $a_query .= PMA\\libraries\\Util::backquote($selected[$i]);\n            $run_parts = true;\n            break;\n\n        case 'drop_fld':\n            PMA_relationsCleanupColumn($db, $table, $selected[$i]);\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                : ',')\n                       . ' DROP ' . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ';' : '');\n            break;\n\n        case 'primary_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . (empty($primary)\n                    ? ''\n                    : ' DROP PRIMARY KEY,') . ' ADD PRIMARY KEY( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'index_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . ' ADD INDEX( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'unique_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . ' ADD UNIQUE( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'spatial_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . ' ADD SPATIAL( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'fulltext_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . ' ADD FULLTEXT( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'add_prefix_tbl':\n            $newtablename = $_POST['add_prefix'] . $selected[$i];\n            // ADD PREFIX TO TABLE NAME\n            $a_query = 'ALTER TABLE '\n                . PMA\\libraries\\Util::backquote($selected[$i])\n                . ' RENAME '\n                . PMA\\libraries\\Util::backquote($newtablename);\n            $run_parts = true;\n            break;\n\n        case 'replace_prefix_tbl':\n            $current = $selected[$i];\n            $subFromPrefix = mb_substr(\n                $current,\n                0,\n                mb_strlen($from_prefix)\n            );\n            if ($subFromPrefix == $from_prefix) {\n                $newtablename = $to_prefix\n                    . mb_substr(\n                        $current,\n                        mb_strlen($from_prefix)\n                    );\n            } else {\n                $newtablename = $current;\n            }\n            // CHANGE PREFIX PATTERN\n            $a_query = 'ALTER TABLE '\n                . PMA\\libraries\\Util::backquote($selected[$i])\n                . ' RENAME '\n                . PMA\\libraries\\Util::backquote($newtablename);\n            $run_parts = true;\n            break;\n\n        case 'copy_tbl_change_prefix':\n            $current = $selected[$i];\n            $newtablename = $to_prefix .\n                mb_substr($current, mb_strlen($from_prefix));\n            // COPY TABLE AND CHANGE PREFIX PATTERN\n            $a_query = 'CREATE TABLE '\n                . PMA\\libraries\\Util::backquote($newtablename)\n                . ' SELECT * FROM '\n                . PMA\\libraries\\Util::backquote($selected[$i]);\n            $run_parts = true;\n            break;\n\n        case 'copy_tbl':\n            $run_parts = true;\n            $copy_tbl = true;\n            Table::moveCopy($db, $selected[$i], $_POST['target_db'], $selected[$i], $_POST['what'], false, 'one_table');\n            if (isset($_POST['adjust_privileges']) && !empty($_POST['adjust_privileges'])) {\n                include_once 'operations.lib.php';\n                PMA_AdjustPrivileges_copyTable($db, $selected[$i], $_POST['target_db'], $selected[$i]);\n            }\n            break;\n        } // end switch\n\n        // All \"DROP TABLE\", \"DROP FIELD\", \"OPTIMIZE TABLE\" and \"REPAIR TABLE\"\n        // statements will be run at once below\n        if ($run_parts && !$copy_tbl) {\n            $sql_query .= $a_query . ';' . \"\\n\";\n            if ($query_type != 'drop_db') {\n                $GLOBALS['dbi']->selectDb($db);\n            }\n            $result = $GLOBALS['dbi']->query($a_query);\n\n            if ($query_type == 'drop_db') {\n                PMA_clearTransformations($selected[$i]);\n            } elseif ($query_type == 'drop_tbl') {\n                PMA_clearTransformations($db, $selected[$i]);\n            } else if ($query_type == 'drop_fld') {\n                PMA_clearTransformations($db, $table, $selected[$i]);\n            }\n        } // end if\n    } // end for\n\n    if ($deletes && ! empty($_REQUEST['pos'])) {\n        $_REQUEST['pos'] = PMA_calculatePosForLastPage(\n            $db, $table, isset($_REQUEST['pos']) ? $_REQUEST['pos'] : null\n        );\n    }\n\n    return array(\n        $result, $rebuild_database_list, $reload,\n        $run_parts, $execute_query_later, $sql_query, $sql_query_views\n    );\n}\n\n/**\n * Gets HTML for copy tables form\n *\n * @param string $action      action type\n * @param array  $_url_params URL params\n *\n * @return string\n */\nfunction PMA_getHtmlForCopyMultipleTables($action, $_url_params)\n{\n    $html = '<form id=\"ajax_form\" action=\"' . $action . '\" method=\"post\">';\n    $html .= PMA_URL_getHiddenInputs($_url_params);\n    $html .= '<fieldset class = \"input\">';\n    $databases_list = $GLOBALS['dblist']->databases;\n    foreach ($databases_list as $key => $db_name)\n        if ($db_name == $GLOBALS['db']){\n            $databases_list->offsetUnset($key);\n            break;\n        }\n    $html .= '<strong><label for=\"db_name_dropdown\">' . __('Database') . ':</label></strong>';\n    $html .= '<select id=\"db_name_dropdown\" class=\"halfWidth\" name=\"target_db\" >'\n        . $databases_list->getHtmlOptions(true, false)\n        . '</select>';\n    $html .= '<br><br>';\n    $html .= '<strong><label>' . __('Options') . ':</label></strong><br>';\n    $html .= '<input type=\"radio\" id =\"what_structure\" value=\"structure\" name=\"what\"></input>';\n    $html .= '<label for=\"what_structure\">' . __('Structure only') . '</label><br>';\n    $html .= '<input type=\"radio\" id =\"what_data\" value=\"data\" name=\"what\" checked=\"checked\"></input>';\n    $html .= '<label for=\"what_data\">' . __('Structure and data') . '</label><br>';\n    $html .= '<input type=\"radio\" id =\"what_dataonly\" value=\"dataonly\" name=\"what\"></input>';\n    $html .= '<label for=\"what_dataonly\">' . __('Data only') . '</label><br><br>';\n    $html .= '<input type=\"checkbox\" id=\"checkbox_drop\" value=\"1\" name=\"drop_if_exists\"></input>';\n    $html .= '<label for=\"checkbox_drop\">' . __('Add DROP TABLE') . '</label><br>';\n    $html .= '<input type=\"checkbox\" id=\"checkbox_auto_increment_cp\" value=\"1\" name=\"sql_auto_increment\"></input>';\n    $html .= '<label for=\"checkbox_auto_increment\">' . __('Add AUTO INCREMENT value') . '</label><br>';\n    $html .= '<input type=\"checkbox\" id=\"checkbox_constraints\" value=\"1\" name=\"sql_auto_increment\" checked=\"checked\"></input>';\n    $html .= '<label for=\"checkbox_constraints\">' . __('Add constraints') . '</label><br><br>';\n    $html .= '<input name=\"adjust_privileges\" value=\"1\" id=\"checkbox_adjust_privileges\" checked=\"checked\" type=\"checkbox\"></input>';\n    $html .= '<label for=\"checkbox_adjust_privileges\">' . __('Adjust privileges') . '<a href=\"./doc/html/faq.html#faq6-39\" target=\"documentation\"><img src=\"themes/dot.gif\" title=\"Documentation\" alt=\"Documentation\" class=\"icon ic_b_help\"></a></label>';\n    $html .= '</fieldset>';\n    $html .= '<input type=\"hidden\" name=\"mult_btn\" value=\"' . __('Yes') . '\" />';\n    $html .= '</form>';\n   return $html;\n}\n\n/**\n * Gets HTML for replace_prefix_tbl or copy_tbl_change_prefix\n *\n * @param string $action      action type\n * @param array  $_url_params URL params\n *\n * @return string\n */\nfunction PMA_getHtmlForReplacePrefixTable($action, $_url_params)\n{\n    $html  = '<form id=\"ajax_form\" action=\"' . $action . '\" method=\"post\">';\n    $html .= PMA_URL_getHiddenInputs($_url_params);\n    $html .= '<fieldset class = \"input\">';\n    $html .= '<table>';\n    $html .= '<tr>';\n    $html .= '<td>' . __('From') . '</td>';\n    $html .= '<td>';\n    $html .= '<input type=\"text\" name=\"from_prefix\" id=\"initialPrefix\" />';\n    $html .= '</td>';\n    $html .= '</tr>';\n    $html .= '<tr>';\n    $html .= '<td>' . __('To') . '</td>';\n    $html .= '<td>';\n    $html .= '<input type=\"text\" name=\"to_prefix\" id=\"newPrefix\" />';\n    $html .= '</td>';\n    $html .= '</tr>';\n    $html .= '</table>';\n    $html .= '</fieldset>';\n    $html .= '<input type=\"hidden\" name=\"mult_btn\" value=\"' . __('Yes') . '\" />';\n    $html .= '</form>';\n\n    return $html;\n}\n\n/**\n * Gets HTML for add_prefix_tbl\n *\n * @param string $action      action type\n * @param array  $_url_params URL params\n *\n * @return string\n */\nfunction PMA_getHtmlForAddPrefixTable($action, $_url_params)\n{\n    $html  = '<form id=\"ajax_form\" action=\"' . $action . '\" method=\"post\">';\n    $html .= PMA_URL_getHiddenInputs($_url_params);\n    $html .= '<fieldset class = \"input\">';\n    $html .= '<table>';\n    $html .= '<tr>';\n    $html .= '<td>' . __('Add prefix') . '</td>';\n    $html .= '<td>';\n    $html .= '<input type=\"text\" name=\"add_prefix\" id=\"txtPrefix\" />';\n    $html .= '</td>';\n    $html .= '</tr>';\n    $html .= '<tr>';\n    $html .= '</table>';\n    $html .= '</fieldset>';\n    $html .= '<input type=\"hidden\" name=\"mult_btn\" value=\"' . __('Yes') . '\" />';\n    $html .= '</form>';\n\n    return $html;\n}\n\n/**\n * Gets HTML for other mult_submits actions\n *\n * @param string $what        mult_submit type\n * @param string $action      action type\n * @param array  $_url_params URL params\n * @param string $full_query  full sql query string\n *\n * @return string\n */\nfunction PMA_getHtmlForOtherActions($what, $action, $_url_params, $full_query)\n{\n    $html = '<form action=\"' . $action . '\" method=\"post\">';\n    $html .= PMA_URL_getHiddenInputs($_url_params);\n    $html .= '<fieldset class=\"confirmation\">';\n    $html .= '<legend>';\n    if ($what == 'drop_db') {\n        $html .=  __('You are about to DESTROY a complete database!') . ' ';\n    }\n    $html .= __('Do you really want to execute the following query?');\n    $html .= '<input type=\"submit\" name=\"mult_btn\" value=\"'\n        . __('Yes') . '\" />';\n    $html .= '<input type=\"submit\" name=\"mult_btn\" value=\"'\n        . __('No') . '\" />';\n    $html .= '</legend>';\n    $html .= '<code>' . $full_query . '</code>';\n    $html .= '</fieldset>';\n    $html .= '<fieldset class=\"tblFooters\">';\n    // Display option to disable foreign key checks while dropping tables\n    if ($what === 'drop_tbl' || $what === 'empty_tbl' || $what === 'row_delete') {\n        $html .= '<div id=\"foreignkeychk\">';\n        $html .= PMA\\libraries\\Util::getFKCheckbox();\n        $html .= '</div>';\n    }\n    $html .= '<input id=\"buttonYes\" type=\"submit\" name=\"mult_btn\" value=\"'\n        . __('Yes') . '\" />';\n    $html .= '<input id=\"buttonNo\" type=\"submit\" name=\"mult_btn\" value=\"'\n        . __('No') . '\" />';\n    $html .= '</fieldset>';\n    $html .= '</form>';\n\n    return $html;\n}\n\n/**\n * Get query string from Selected\n *\n * @param string $what     mult_submit type\n * @param string $table    table name\n * @param array  $selected the selected columns\n * @param array  $views    table views\n *\n * @return array\n */\nfunction PMA_getQueryFromSelected($what, $table, $selected, $views)\n{\n    $reload = false;\n    $full_query_views = null;\n    $full_query     = '';\n\n    if ($what == 'drop_tbl') {\n        $full_query_views = '';\n    }\n\n    $selected_cnt   = count($selected);\n    $i = 0;\n    foreach ($selected as $sval) {\n        switch ($what) {\n        case 'row_delete':\n            $full_query .= 'DELETE FROM '\n                . PMA\\libraries\\Util::backquote(htmlspecialchars($table))\n                // Do not append a \"LIMIT 1\" clause here\n                // (it's not binlog friendly).\n                // We don't need the clause because the calling panel permits\n                // this feature only when there is a unique index.\n                . ' WHERE ' . urldecode(htmlspecialchars($sval))\n                . ';<br />';\n            break;\n        case 'drop_db':\n            $full_query .= 'DROP DATABASE '\n                . PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                . ';<br />';\n            $reload = true;\n            break;\n\n        case 'drop_tbl':\n            $current = $sval;\n            if (!empty($views) && in_array($current, $views)) {\n                $full_query_views .= (empty($full_query_views) ? 'DROP VIEW ' : ', ')\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($current));\n            } else {\n                $full_query .= (empty($full_query) ? 'DROP TABLE ' : ', ')\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($current));\n            }\n            break;\n\n        case 'empty_tbl':\n            $full_query .= 'TRUNCATE ';\n            $full_query .= PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                        . ';<br />';\n            break;\n\n        case 'primary_fld':\n            if ($full_query == '') {\n                $full_query .= 'ALTER TABLE '\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($table))\n                    . '<br />&nbsp;&nbsp;DROP PRIMARY KEY,'\n                    . '<br />&nbsp;&nbsp; ADD PRIMARY KEY('\n                    . '<br />&nbsp;&nbsp;&nbsp;&nbsp; '\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                    . ',';\n            } else {\n                $full_query .= '<br />&nbsp;&nbsp;&nbsp;&nbsp; '\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                    . ',';\n            }\n            if ($i == $selected_cnt-1) {\n                $full_query = preg_replace('@,$@', ');<br />', $full_query);\n            }\n            break;\n\n        case 'drop_fld':\n            if ($full_query == '') {\n                $full_query .= 'ALTER TABLE '\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($table));\n            }\n            $full_query .= '<br />&nbsp;&nbsp;DROP '\n                . PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                . ',';\n            if ($i == $selected_cnt - 1) {\n                $full_query = preg_replace('@,$@', ';<br />', $full_query);\n            }\n            break;\n        } // end switch\n        $i++;\n    }\n\n    if ($what == 'drop_tbl') {\n        if (!empty($full_query)) {\n            $full_query .= ';<br />' . \"\\n\";\n        }\n        if (!empty($full_query_views)) {\n            $full_query .= $full_query_views . ';<br />' . \"\\n\";\n        }\n        unset($full_query_views);\n    }\n\n    $full_query_views = isset($full_query_views)? $full_query_views : null;\n\n    return array($full_query, $reload, $full_query_views);\n}\n\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * handle row specific actions like edit, delete, export\n *\n * @package PhpMyAdmin\n */\n\n/**\n *\n */\nrequire_once 'libraries/common.inc.php';\nrequire_once 'libraries/mysql_charsets.inc.php';\nrequire_once 'libraries/sql.lib.php';\n\nif (isset($_REQUEST['submit_mult'])) {\n    $submit_mult = $_REQUEST['submit_mult'];\n    // workaround for IE problem:\n} elseif (isset($_REQUEST['submit_mult_delete_x'])) {\n    $submit_mult = 'row_delete';\n} elseif (isset($_REQUEST['submit_mult_change_x'])) {\n    $submit_mult = 'row_edit';\n} elseif (isset($_REQUEST['submit_mult_export_x'])) {\n    $submit_mult = 'row_export';\n}\n\n// If the 'Ask for confirmation' button was pressed, this can only come\n// from 'delete' mode, so we set it straight away.\nif (isset($_REQUEST['mult_btn'])) {\n    $submit_mult = 'row_delete';\n}\n\nif (! isset($submit_mult)) {\n    $submit_mult = 'row_edit';\n}\n\nswitch($submit_mult) {\ncase 'row_delete':\ncase 'row_edit':\ncase 'row_copy':\ncase 'row_export':\n    // leave as is\n    break;\n\ncase 'export':\n    $submit_mult = 'row_export';\n    break;\n\ncase 'delete':\n    $submit_mult = 'row_delete';\n    break;\n\ncase 'copy':\n    $submit_mult = 'row_copy';\n    break;\n\ncase 'edit':\ndefault:\n    $submit_mult = 'row_edit';\n    break;\n}\n\nif (!empty($submit_mult)) {\n\n    if (isset($_REQUEST['goto'])\n        && (! isset($_REQUEST['rows_to_delete'])\n        || ! is_array($_REQUEST['rows_to_delete']))\n    ) {\n        $response = PMA\\libraries\\Response::getInstance();\n        $response->setRequestStatus(false);\n        $response->addJSON('message', __('No row selected.'));\n    }\n\n    switch($submit_mult) {\n    /** @noinspection PhpMissingBreakStatementInspection */\n    case 'row_copy':\n        $_REQUEST['default_action'] = 'insert';\n        // no break to allow for fallthough\n    case 'row_edit':\n        // As we got the rows to be edited from the\n        // 'rows_to_delete' checkbox, we use the index of it as the\n        // indicating WHERE clause. Then we build the array which is used\n        // for the tbl_change.php script.\n        $where_clause = array();\n        if (isset($_REQUEST['rows_to_delete'])\n            && is_array($_REQUEST['rows_to_delete'])\n        ) {\n            foreach ($_REQUEST['rows_to_delete'] as $i => $i_where_clause) {\n                $where_clause[] = urldecode($i_where_clause);\n            }\n        }\n        $active_page = 'tbl_change.php';\n        include 'tbl_change.php';\n        break;\n\n    case 'row_export':\n        // Needed to allow SQL export\n        $single_table = true;\n\n        // As we got the rows to be exported from the\n        // 'rows_to_delete' checkbox, we use the index of it as the\n        // indicating WHERE clause. Then we build the array which is used\n        // for the tbl_change.php script.\n        $where_clause = array();\n        if (isset($_REQUEST['rows_to_delete'])\n            && is_array($_REQUEST['rows_to_delete'])\n        ) {\n            foreach ($_REQUEST['rows_to_delete'] as $i => $i_where_clause) {\n                $where_clause[] = urldecode($i_where_clause);\n            }\n        }\n        $active_page = 'tbl_export.php';\n        include 'tbl_export.php';\n        break;\n\n    case 'row_delete':\n    default:\n        $action = 'tbl_row_action.php';\n        $err_url = 'tbl_row_action.php'\n            . PMA_URL_getCommon($GLOBALS['url_params']);\n        if (! isset($_REQUEST['mult_btn'])) {\n            $original_sql_query = $sql_query;\n            if (! empty($url_query)) {\n                $original_url_query = $url_query;\n            }\n        }\n        include 'libraries/mult_submits.inc.php';\n        $_url_params = $GLOBALS['url_params'];\n        $_url_params['goto'] = 'tbl_sql.php';\n        $url_query = PMA_URL_getCommon($_url_params);\n\n\n        /**\n         * Show result of multi submit operation\n         */\n        // sql_query is not set when user does not confirm multi-delete\n        if ((! empty($submit_mult) || isset($_REQUEST['mult_btn']))\n            && ! empty($sql_query)\n        ) {\n            $disp_message = __('Your SQL query has been executed successfully.');\n            $disp_query = $sql_query;\n        }\n\n        if (isset($original_sql_query)) {\n            $sql_query = $original_sql_query;\n        }\n\n        if (isset($original_url_query)) {\n            $url_query = $original_url_query;\n        }\n\n        $active_page = 'sql.php';\n        PMA_executeQueryAndSendQueryResponse(\n            null, // analyzed_sql_results\n            false, // is_gotofile\n            $db, // db\n            $table, // table\n            null, // find_real_end\n            null, // sql_query_for_bookmark\n            null, // extra_data\n            null, // message_to_show\n            null, // message\n            null, // sql_data\n            $goto, // goto\n            $pmaThemeImage, // pmaThemeImage\n            null, // disp_query\n            null, // disp_message\n            null, // query_type\n            $sql_query, // sql_query\n            null, // selectedTables\n            null // complete_query\n        );\n    }\n}\n"], "fixing_code": ["<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * Hold the PMA\\libraries\\DisplayResults class\n *\n * @package PhpMyAdmin\n */\nnamespace PMA\\libraries;\n\nuse SqlParser\\Utils\\Query;\nuse PMA\\libraries\\plugins\\transformations\\Text_Plain_Link;\n\nrequire_once './libraries/transformations.lib.php';\n\n/**\n * Handle all the functionalities related to displaying results\n * of sql queries, stored procedure, browsing sql processes or\n * displaying binary log.\n *\n * @package PhpMyAdmin\n */\nclass DisplayResults\n{\n\n    // Define constants\n    const NO_EDIT_OR_DELETE = 'nn';\n    const UPDATE_ROW = 'ur';\n    const DELETE_ROW = 'dr';\n    const KILL_PROCESS = 'kp';\n\n    const POSITION_LEFT = 'left';\n    const POSITION_RIGHT = 'right';\n    const POSITION_BOTH = 'both';\n    const POSITION_NONE = 'none';\n\n    const PLACE_TOP_DIRECTION_DROPDOWN = 'top_direction_dropdown';\n    const PLACE_BOTTOM_DIRECTION_DROPDOWN = 'bottom_direction_dropdown';\n\n    const DISPLAY_FULL_TEXT = 'F';\n    const DISPLAY_PARTIAL_TEXT = 'P';\n\n    const HEADER_FLIP_TYPE_AUTO = 'auto';\n    const HEADER_FLIP_TYPE_CSS = 'css';\n    const HEADER_FLIP_TYPE_FAKE = 'fake';\n\n    const DATE_FIELD = 'date';\n    const DATETIME_FIELD = 'datetime';\n    const TIMESTAMP_FIELD = 'timestamp';\n    const TIME_FIELD = 'time';\n    const STRING_FIELD = 'string';\n    const GEOMETRY_FIELD = 'geometry';\n    const BLOB_FIELD = 'BLOB';\n    const BINARY_FIELD = 'BINARY';\n\n    const RELATIONAL_KEY = 'K';\n    const RELATIONAL_DISPLAY_COLUMN = 'D';\n\n    const GEOMETRY_DISP_GEOM = 'GEOM';\n    const GEOMETRY_DISP_WKT = 'WKT';\n    const GEOMETRY_DISP_WKB = 'WKB';\n\n    const SMART_SORT_ORDER = 'SMART';\n    const ASCENDING_SORT_DIR = 'ASC';\n    const DESCENDING_SORT_DIR = 'DESC';\n\n    const TABLE_TYPE_INNO_DB = 'InnoDB';\n    const ALL_ROWS = 'all';\n    const QUERY_TYPE_SELECT = 'SELECT';\n\n    const ROUTINE_PROCEDURE = 'procedure';\n    const ROUTINE_FUNCTION = 'function';\n\n    const ACTION_LINK_CONTENT_ICONS = 'icons';\n    const ACTION_LINK_CONTENT_TEXT = 'text';\n\n\n    // Declare global fields\n\n    /** array with properties of the class */\n    private $_property_array = array(\n\n        /** string Database name */\n        'db' => null,\n\n        /** string Table name */\n        'table' => null,\n\n        /** string the URL to go back in case of errors */\n        'goto' => null,\n\n        /** string the SQL query */\n        'sql_query' => null,\n\n        /**\n         * integer the total number of rows returned by the SQL query without any\n         *         appended \"LIMIT\" clause programmatically\n         */\n        'unlim_num_rows' => null,\n\n        /** array meta information about fields */\n        'fields_meta' => null,\n\n        /** boolean */\n        'is_count' => null,\n\n        /** integer */\n        'is_export' => null,\n\n        /** boolean */\n        'is_func' => null,\n\n        /** integer */\n        'is_analyse' => null,\n\n        /** integer the total number of rows returned by the SQL query */\n        'num_rows' => null,\n\n        /** integer the total number of fields returned by the SQL query */\n        'fields_cnt' => null,\n\n        /** double time taken for execute the SQL query */\n        'querytime' => null,\n\n        /** string path for theme images directory */\n        'pma_theme_image' => null,\n\n        /** string */\n        'text_dir' => null,\n\n        /** boolean */\n        'is_maint' => null,\n\n        /** boolean */\n        'is_explain' => null,\n\n        /** boolean */\n        'is_show' => null,\n\n        /** boolean */\n        'is_browse_distinct' => null,\n\n        /** array table definitions */\n        'showtable' => null,\n\n        /** string */\n        'printview' => null,\n\n        /** string URL query */\n        'url_query' => null,\n\n        /** array column names to highlight */\n        'highlight_columns' => null,\n\n        /** array holding various display information */\n        'display_params' => null,\n\n        /** array mime types information of fields */\n        'mime_map' => null,\n\n        /** boolean */\n        'editable' => null,\n\n        /** random unique ID to distinguish result set */\n        'unique_id' => null,\n\n        /** where clauses for each row, each table in the row */\n        'whereClauseMap' => array(),\n    );\n\n    /**\n     * This variable contains the column transformation information\n     * for some of the system databases.\n     * One element of this array represent all relevant columns in all tables in\n     * one specific database\n     */\n    public $transformation_info;\n\n\n    /**\n     * Get any property of this class\n     *\n     * @param string $property name of the property\n     *\n     * @return mixed|void if property exist, value of the relevant property\n     */\n    public function __get($property)\n    {\n        if (array_key_exists($property, $this->_property_array)) {\n            return $this->_property_array[$property];\n        }\n    }\n\n\n    /**\n     * Set values for any property of this class\n     *\n     * @param string $property name of the property\n     * @param mixed  $value    value to set\n     *\n     * @return void\n     */\n    public function __set($property, $value)\n    {\n        if (array_key_exists($property, $this->_property_array)) {\n            $this->_property_array[$property] = $value;\n        }\n    }\n\n\n    /**\n     * Constructor for DisplayResults class\n     *\n     * @param string $db        the database name\n     * @param string $table     the table name\n     * @param string $goto      the URL to go back in case of errors\n     * @param string $sql_query the SQL query\n     *\n     * @access  public\n     */\n    public function __construct($db, $table, $goto, $sql_query)\n    {\n        $this->_setDefaultTransformations();\n\n        $this->__set('db', $db);\n        $this->__set('table', $table);\n        $this->__set('goto', $goto);\n        $this->__set('sql_query', $sql_query);\n        $this->__set('unique_id', rand());\n    }\n\n    /**\n     * Sets default transformations for some columns\n     *\n     * @return void\n     */\n    private  function _setDefaultTransformations()\n    {\n        $json_highlighting_data = array(\n            'libraries/plugins/transformations/output/Text_Plain_Json.php',\n            'PMA\\libraries\\plugins\\transformations\\output\\Text_Plain_Json',\n            'Text_Plain'\n        );\n        $sql_highlighting_data = array(\n            'libraries/plugins/transformations/output/Text_Plain_Sql.php',\n            'PMA\\libraries\\plugins\\transformations\\output\\Text_Plain_Sql',\n            'Text_Plain'\n        );\n        $blob_sql_highlighting_data = array(\n            'libraries/plugins/transformations/output/Text_Octetstream_Sql.php',\n            'PMA\\libraries\\plugins\\transformations\\output\\Text_Octetstream_Sql',\n            'Text_Octetstream'\n        );\n        $link_data = array(\n            'libraries/plugins/transformations/Text_Plain_Link.php',\n            'PMA\\libraries\\plugins\\transformations\\Text_Plain_Link',\n            'Text_Plain'\n        );\n        $this->transformation_info = array(\n            'information_schema' => array(\n                'events' => array(\n                    'event_definition' => $sql_highlighting_data\n                ),\n                'processlist' => array(\n                    'info' => $sql_highlighting_data\n                ),\n                'routines' => array(\n                    'routine_definition' => $sql_highlighting_data\n                ),\n                'triggers' => array(\n                    'action_statement' => $sql_highlighting_data\n                ),\n                'views' => array(\n                    'view_definition' => $sql_highlighting_data\n                )\n            ),\n            'mysql' => array(\n                'event' => array(\n                    'body' => $blob_sql_highlighting_data,\n                    'body_utf8' => $blob_sql_highlighting_data\n                ),\n                'general_log' => array(\n                    'argument' => $sql_highlighting_data\n                ),\n                'help_category' => array(\n                    'url' => $link_data\n                ),\n                'help_topic' => array(\n                    'example' => $sql_highlighting_data,\n                    'url' => $link_data\n                ),\n                'proc' => array(\n                    'param_list' => $blob_sql_highlighting_data,\n                    'returns' => $blob_sql_highlighting_data,\n                    'body' => $blob_sql_highlighting_data,\n                    'body_utf8' => $blob_sql_highlighting_data\n                ),\n                'slow_log' => array(\n                    'sql_text' => $sql_highlighting_data\n                )\n            )\n        );\n\n        $cfgRelation = PMA_getRelationsParam();\n        if ($cfgRelation['db']) {\n            $this->transformation_info[$cfgRelation['db']] = array();\n            $relDb = &$this->transformation_info[$cfgRelation['db']];\n            if (! empty($cfgRelation['history'])) {\n                $relDb[$cfgRelation['history']] = array(\n                    'sqlquery' => $sql_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['bookmark'])) {\n                $relDb[$cfgRelation['bookmark']] = array(\n                    'query' => $sql_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['tracking'])) {\n                $relDb[$cfgRelation['tracking']] = array(\n                    'schema_sql' => $sql_highlighting_data,\n                    'data_sql' => $sql_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['favorite'])) {\n                $relDb[$cfgRelation['favorite']] = array(\n                    'tables' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['recent'])) {\n                $relDb[$cfgRelation['recent']] = array(\n                    'tables' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['savedsearches'])) {\n                $relDb[$cfgRelation['savedsearches']] = array(\n                    'search_data' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['designer_settings'])) {\n                $relDb[$cfgRelation['designer_settings']] = array(\n                    'settings_data' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['table_uiprefs'])) {\n                $relDb[$cfgRelation['table_uiprefs']] = array(\n                    'prefs' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['userconfig'])) {\n                $relDb[$cfgRelation['userconfig']] = array(\n                    'config_data' => $json_highlighting_data\n                );\n            }\n            if (! empty($cfgRelation['export_templates'])) {\n                $relDb[$cfgRelation['export_templates']] = array(\n                    'template_data' => $json_highlighting_data\n                );\n            }\n        }\n    }\n\n    /**\n     * Set properties which were not initialized at the constructor\n     *\n     * @param integer $unlim_num_rows the total number of rows returned by\n     *                                     the SQL query without any appended\n     *                                     \"LIMIT\" clause programmatically\n     * @param array   $fields_meta    meta information about fields\n     * @param boolean $is_count       statement is SELECT COUNT\n     * @param integer $is_export      statement contains INTO OUTFILE\n     * @param boolean $is_func        statement contains a function like SUM()\n     * @param integer $is_analyse     statement contains PROCEDURE ANALYSE\n     * @param integer $num_rows       total no. of rows returned by SQL query\n     * @param integer $fields_cnt     total no.of fields returned by SQL query\n     * @param double  $querytime      time taken for execute the SQL query\n     * @param string  $pmaThemeImage  path for theme images directory\n     * @param string  $text_dir       text direction\n     * @param boolean $is_maint       statement contains a maintenance command\n     * @param boolean $is_explain     statement contains EXPLAIN\n     * @param boolean $is_show        statement contains SHOW\n     * @param array   $showtable      table definitions\n     * @param string  $printview      print view was requested\n     * @param string  $url_query      URL query\n     * @param boolean $editable       whether the results set is editable\n     * @param boolean $is_browse_dist whether browsing distinct values\n     *\n     * @return void\n     *\n     * @see     sql.php\n     */\n    public function setProperties(\n        $unlim_num_rows, $fields_meta, $is_count, $is_export, $is_func,\n        $is_analyse, $num_rows, $fields_cnt, $querytime, $pmaThemeImage, $text_dir,\n        $is_maint, $is_explain, $is_show, $showtable, $printview, $url_query,\n        $editable, $is_browse_dist\n    ) {\n\n        $this->__set('unlim_num_rows', $unlim_num_rows);\n        $this->__set('fields_meta', $fields_meta);\n        $this->__set('is_count', $is_count);\n        $this->__set('is_export', $is_export);\n        $this->__set('is_func', $is_func);\n        $this->__set('is_analyse', $is_analyse);\n        $this->__set('num_rows', $num_rows);\n        $this->__set('fields_cnt', $fields_cnt);\n        $this->__set('querytime', $querytime);\n        $this->__set('pma_theme_image', $pmaThemeImage);\n        $this->__set('text_dir', $text_dir);\n        $this->__set('is_maint', $is_maint);\n        $this->__set('is_explain', $is_explain);\n        $this->__set('is_show', $is_show);\n        $this->__set('showtable', $showtable);\n        $this->__set('printview', $printview);\n        $this->__set('url_query', $url_query);\n        $this->__set('editable', $editable);\n        $this->__set('is_browse_distinct', $is_browse_dist);\n\n    } // end of the 'setProperties()' function\n\n\n    /**\n     * Defines the parts to display for a print view\n     *\n     * @param array $displayParts the parts to display\n     *\n     * @return array $displayParts the modified display parts\n     *\n     * @access  private\n     *\n     */\n    private function _setDisplayPartsForPrintView($displayParts)\n    {\n        // set all elements to false!\n        $displayParts['edit_lnk']  = self::NO_EDIT_OR_DELETE; // no edit link\n        $displayParts['del_lnk']   = self::NO_EDIT_OR_DELETE; // no delete link\n        $displayParts['sort_lnk']  = (string) '0';\n        $displayParts['nav_bar']   = (string) '0';\n        $displayParts['bkm_form']  = (string) '0';\n        $displayParts['text_btn']  = (string) '0';\n        $displayParts['pview_lnk'] = (string) '0';\n\n        return $displayParts;\n    }\n\n    /**\n     * Defines the parts to display for a SHOW statement\n     *\n     * @param array $displayParts the parts to display\n     *\n     * @return array $displayParts the modified display parts\n     *\n     * @access  private\n     *\n     */\n    private function _setDisplayPartsForShow($displayParts)\n    {\n        preg_match(\n            '@^SHOW[[:space:]]+(VARIABLES|(FULL[[:space:]]+)?'\n            . 'PROCESSLIST|STATUS|TABLE|GRANTS|CREATE|LOGS|DATABASES|FIELDS'\n            . ')@i',\n            $this->__get('sql_query'), $which\n        );\n\n        $bIsProcessList = isset($which[1]);\n        if ($bIsProcessList) {\n            $str = ' ' . strtoupper($which[1]);\n            $bIsProcessList = $bIsProcessList\n                && strpos($str, 'PROCESSLIST') > 0;\n        }\n\n        if ($bIsProcessList) {\n            // no edit link\n            $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;\n            // \"kill process\" type edit link\n            $displayParts['del_lnk']  = self::KILL_PROCESS;\n        } else {\n            // Default case -> no links\n            // no edit link\n            $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;\n            // no delete link\n            $displayParts['del_lnk']  = self::NO_EDIT_OR_DELETE;\n        }\n        // Other settings\n        $displayParts['sort_lnk']  = (string) '0';\n        $displayParts['nav_bar']   = (string) '0';\n        $displayParts['bkm_form']  = (string) '1';\n        $displayParts['text_btn']  = (string) '1';\n        $displayParts['pview_lnk'] = (string) '1';\n\n        return $displayParts;\n    }\n\n    /**\n     * Defines the parts to display for statements not related to data\n     *\n     * @param array $displayParts the parts to display\n     *\n     * @return array $displayParts the modified display parts\n     *\n     * @access  private\n     *\n     */\n    private function _setDisplayPartsForNonData($displayParts)\n    {\n        // Statement is a \"SELECT COUNT\", a\n        // \"CHECK/ANALYZE/REPAIR/OPTIMIZE/CHECKSUM\", an \"EXPLAIN\" one or\n        // contains a \"PROC ANALYSE\" part\n        $displayParts['edit_lnk']  = self::NO_EDIT_OR_DELETE; // no edit link\n        $displayParts['del_lnk']   = self::NO_EDIT_OR_DELETE; // no delete link\n        $displayParts['sort_lnk']  = (string) '0';\n        $displayParts['nav_bar']   = (string) '0';\n        $displayParts['bkm_form']  = (string) '1';\n\n        if ($this->__get('is_maint')) {\n            $displayParts['text_btn']  = (string) '1';\n        } else {\n            $displayParts['text_btn']  = (string) '0';\n        }\n        $displayParts['pview_lnk'] = (string) '1';\n\n        return $displayParts;\n    }\n\n    /**\n     * Defines the parts to display for other statements (probably SELECT)\n     *\n     * @param array $displayParts the parts to display\n     *\n     * @return array $displayParts the modified display parts\n     *\n     * @access  private\n     *\n     */\n    private function _setDisplayPartsForSelect($displayParts)\n    {\n        // Other statements (ie \"SELECT\" ones) -> updates\n        // $displayParts['edit_lnk'], $displayParts['del_lnk'] and\n        // $displayParts['text_btn'] (keeps other default values)\n\n        $fields_meta = $this->__get('fields_meta');\n        $prev_table = '';\n        $displayParts['text_btn']  = (string) '1';\n        $number_of_columns = $this->__get('fields_cnt');\n\n        for ($i = 0; $i < $number_of_columns; $i++) {\n\n            $is_link = ($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)\n                || ($displayParts['sort_lnk'] != '0');\n\n            // Displays edit/delete/sort/insert links?\n            if ($is_link\n                && $prev_table != ''\n                && $fields_meta[$i]->table != ''\n                && $fields_meta[$i]->table != $prev_table\n            ) {\n                // don't display links\n                $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;\n                $displayParts['del_lnk']  = self::NO_EDIT_OR_DELETE;\n                /**\n                 * @todo May be problematic with same field names\n                 * in two joined table.\n                 */\n                // $displayParts['sort_lnk'] = (string) '0';\n                if ($displayParts['text_btn'] == '1') {\n                    break;\n                }\n            } // end if\n\n            // Always display print view link\n            $displayParts['pview_lnk'] = (string) '1';\n            if ($fields_meta[$i]->table != '') {\n                $prev_table = $fields_meta[$i]->table;\n            }\n        } // end for\n\n        if ($prev_table == '') { // no table for any of the columns\n            // don't display links\n            $displayParts['edit_lnk'] = self::NO_EDIT_OR_DELETE;\n            $displayParts['del_lnk']  = self::NO_EDIT_OR_DELETE;\n        }\n\n        return $displayParts;\n    }\n\n    /**\n     * Defines the parts to display for the results of a SQL query\n     * and the total number of rows\n     *\n     * @param array $displayParts the parts to display (see a few\n     *                            lines above for explanations)\n     *\n     * @return array the first element is an array with explicit indexes\n     *               for all the display elements\n     *               the second element is the total number of rows returned\n     *               by the SQL query without any programmatically appended\n     *               LIMIT clause (just a copy of $unlim_num_rows if it exists,\n     *               else computed inside this function)\n     *\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _setDisplayPartsAndTotal($displayParts)\n    {\n        $the_total = 0;\n\n        // 1. Following variables are needed for use in isset/empty or\n        //    use with array indexes or safe use in foreach\n        $db = $this->__get('db');\n        $table = $this->__get('table');\n        $unlim_num_rows = $this->__get('unlim_num_rows');\n        $num_rows = $this->__get('num_rows');\n        $printview = $this->__get('printview');\n\n        // 2. Updates the display parts\n        if ($printview == '1') {\n            $displayParts = $this->_setDisplayPartsForPrintView($displayParts);\n\n        } elseif ($this->__get('is_count') || $this->__get('is_analyse')\n            || $this->__get('is_maint') || $this->__get('is_explain')\n        ) {\n            $displayParts = $this->_setDisplayPartsForNonData($displayParts);\n\n        } elseif ($this->__get('is_show')) {\n            $displayParts = $this->_setDisplayPartsForShow($displayParts);\n\n        } else {\n            $displayParts = $this->_setDisplayPartsForSelect($displayParts);\n        } // end if..elseif...else\n\n        // 3. Gets the total number of rows if it is unknown\n        if (isset($unlim_num_rows) && $unlim_num_rows != '') {\n            $the_total = $unlim_num_rows;\n        } elseif ((($displayParts['nav_bar'] == '1')\n            || ($displayParts['sort_lnk'] == '1'))\n            && (mb_strlen($db) && !empty($table))\n        ) {\n            $the_total = $GLOBALS['dbi']->getTable($db, $table)->countRecords();\n        }\n\n        // if for COUNT query, number of rows returned more than 1\n        // (may be being used GROUP BY)\n        if ($this->__get('is_count') && isset($num_rows) && $num_rows > 1) {\n            $displayParts['nav_bar']   = (string) '1';\n            $displayParts['sort_lnk']  = (string) '1';\n        }\n        // 4. If navigation bar or sorting fields names URLs should be\n        //    displayed but there is only one row, change these settings to\n        //    false\n        if ($displayParts['nav_bar'] == '1' || $displayParts['sort_lnk'] == '1') {\n\n            // - Do not display sort links if less than 2 rows.\n            // - For a VIEW we (probably) did not count the number of rows\n            //   so don't test this number here, it would remove the possibility\n            //   of sorting VIEW results.\n            $_table = new Table($table, $db);\n            if (isset($unlim_num_rows)\n                && ($unlim_num_rows < 2)\n                && ! $_table->isView()\n            ) {\n                $displayParts['sort_lnk'] = (string) '0';\n            }\n        } // end if (3)\n\n        return array($displayParts, $the_total);\n\n    } // end of the 'setDisplayPartsAndTotal()' function\n\n\n    /**\n     * Return true if we are executing a query in the form of\n     * \"SELECT * FROM <a table> ...\"\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return boolean\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders(), _getColumnParams()\n     */\n    private function _isSelect($analyzed_sql_results)\n    {\n        return ! ($this->__get('is_count')\n                || $this->__get('is_export')\n                || $this->__get('is_func')\n                || $this->__get('is_analyse'))\n            && !empty($analyzed_sql_results['select_from'])\n            && !empty($analyzed_sql_results['statement']->from)\n            && (count($analyzed_sql_results['statement']->from) == 1)\n            && !empty($analyzed_sql_results['statement']->from[0]->table);\n    }\n\n\n    /**\n     * Get a navigation button\n     *\n     * @param string  $caption            iconic caption for button\n     * @param string  $title              text for button\n     * @param integer $pos                position for next query\n     * @param string  $html_sql_query     query ready for display\n     * @param boolean $back               whether 'begin' or 'previous'\n     * @param string  $onsubmit           optional onsubmit clause\n     * @param string  $input_for_real_end optional hidden field for special treatment\n     * @param string  $onclick            optional onclick clause\n     *\n     * @return string                     html content\n     *\n     * @access  private\n     *\n     * @see     _getMoveBackwardButtonsForTableNavigation(),\n     *          _getMoveForwardButtonsForTableNavigation()\n     */\n    private function _getTableNavigationButton(\n        $caption, $title, $pos, $html_sql_query, $back, $onsubmit = '',\n        $input_for_real_end = '', $onclick = ''\n    ) {\n\n        $caption_output = '';\n        if ($back) {\n            if (Util::showIcons('TableNavigationLinksMode')) {\n                $caption_output .= $caption;\n            }\n            if (Util::showText('TableNavigationLinksMode')) {\n                $caption_output .= '&nbsp;' . $title;\n            }\n        } else {\n            if (Util::showText('TableNavigationLinksMode')) {\n                $caption_output .= $title;\n            }\n            if (Util::showIcons('TableNavigationLinksMode')) {\n                $caption_output .= '&nbsp;' . $caption;\n            }\n        }\n        $title_output = ' title=\"' . $title . '\"';\n\n        return '<td>'\n            . '<form action=\"sql.php\" method=\"post\" ' . $onsubmit . '>'\n            . PMA_URL_getHiddenInputs(\n                $this->__get('db'), $this->__get('table')\n            )\n            . '<input type=\"hidden\" name=\"sql_query\" value=\"'\n            . $html_sql_query . '\" />'\n            . '<input type=\"hidden\" name=\"pos\" value=\"' . $pos . '\" />'\n            . '<input type=\"hidden\" name=\"is_browse_distinct\" value=\"'\n            . $this->__get('is_browse_distinct') . '\" />'\n            . '<input type=\"hidden\" name=\"goto\" value=\"' . $this->__get('goto')\n            . '\" />'\n            . $input_for_real_end\n            . '<input type=\"submit\" name=\"navig\"'\n            . ' class=\"ajax\" '\n            . 'value=\"' . $caption_output . '\" ' . $title_output . $onclick . ' />'\n            . '</form>'\n            . '</td>';\n\n    } // end function _getTableNavigationButton()\n\n\n    /**\n     * Possibly return a page selector for table navigation\n     *\n     * @param string $table_navigation_html the current navigation HTML\n     *\n     * @return array ($table_navigation_html, $nbTotalPage)\n     *\n     * @access  private\n     *\n     */\n    private function _getHtmlPageSelector($table_navigation_html)\n    {\n        $pageNow = @floor(\n            $_SESSION['tmpval']['pos']\n            / $_SESSION['tmpval']['max_rows']\n        ) + 1;\n\n        $nbTotalPage = @ceil(\n            $this->__get('unlim_num_rows')\n            / $_SESSION['tmpval']['max_rows']\n        );\n\n        if ($nbTotalPage > 1) {\n            $table_navigation_html .= '<td>';\n            $_url_params = array(\n                'db'                 => $this->__get('db'),\n                'table'              => $this->__get('table'),\n                'sql_query'          => $this->__get('sql_query'),\n                'goto'               => $this->__get('goto'),\n                'is_browse_distinct' => $this->__get('is_browse_distinct'),\n            );\n\n            //<form> to keep the form alignment of button < and <<\n            // and also to know what to execute when the selector changes\n            $table_navigation_html .= '<form action=\"sql.php'\n                . PMA_URL_getCommon($_url_params)\n                . '\" method=\"post\">';\n\n            $table_navigation_html .= Util::pageselector(\n                'pos',\n                $_SESSION['tmpval']['max_rows'],\n                $pageNow, $nbTotalPage, 200, 5, 5, 20, 10\n            );\n\n            $table_navigation_html .= '</form>'\n                . '</td>';\n        }\n        return array($table_navigation_html, $nbTotalPage);\n    }\n\n    /**\n     * Get a navigation bar to browse among the results of a SQL query\n     *\n     * @param integer $pos_next         the offset for the \"next\" page\n     * @param integer $pos_prev         the offset for the \"previous\" page\n     * @param boolean $is_innodb        whether its InnoDB or not\n     * @param string  $sort_by_key_html the sort by key dialog\n     *\n     * @return string                            html content\n     *\n     * @access  private\n     *\n     * @see     _getTable()\n     */\n    private function _getTableNavigation(\n        $pos_next, $pos_prev, $is_innodb, $sort_by_key_html\n    ) {\n\n        $table_navigation_html = '';\n\n        // here, using htmlentities() would cause problems if the query\n        // contains accented characters\n        $html_sql_query = htmlspecialchars($this->__get('sql_query'));\n\n        // Navigation bar\n        $table_navigation_html\n            .= '<table class=\"navigation nospacing nopadding print_ignore\">'\n            . '<tr>'\n            . '<td class=\"navigation_separator\"></td>';\n\n        // Move to the beginning or to the previous page\n        if ($_SESSION['tmpval']['pos']\n            && ($_SESSION['tmpval']['max_rows'] != self::ALL_ROWS)\n        ) {\n\n            $table_navigation_html\n                .= $this->_getMoveBackwardButtonsForTableNavigation(\n                    $html_sql_query, $pos_prev\n                );\n\n        } // end move back\n\n        $nbTotalPage = 1;\n        //page redirection\n        // (unless we are showing all records)\n        if ($_SESSION['tmpval']['max_rows'] != self::ALL_ROWS) {\n            list(\n                $table_navigation_html,\n                $nbTotalPage\n            ) = $this->_getHtmlPageSelector($table_navigation_html);\n        }\n\n        $showing_all = false;\n        if ($_SESSION['tmpval']['max_rows'] == self::ALL_ROWS) {\n            $showing_all = true;\n        }\n\n        // Move to the next page or to the last one\n        $endpos = $_SESSION['tmpval']['pos']\n            + $_SESSION['tmpval']['max_rows'];\n\n        if (($endpos < $this->__get('unlim_num_rows'))\n            && ($this->__get('num_rows') >= $_SESSION['tmpval']['max_rows'])\n            && ($_SESSION['tmpval']['max_rows'] != self::ALL_ROWS)\n        ) {\n\n            $table_navigation_html\n                .= $this->_getMoveForwardButtonsForTableNavigation(\n                    $html_sql_query, $pos_next, $is_innodb\n                );\n\n        } // end move toward\n\n        // show separator if pagination happen\n        if ($nbTotalPage > 1) {\n            $table_navigation_html\n                .= '<td><div class=\"navigation_separator\">|</div></td>';\n        }\n\n        // Display the \"Show all\" button if allowed\n        if ($GLOBALS['cfg']['ShowAll'] || ($this->__get('unlim_num_rows') <= 500) ) {\n\n            $table_navigation_html .= $this->_getShowAllCheckboxForTableNavigation(\n                $showing_all, $html_sql_query\n            );\n\n            $table_navigation_html\n                .= '<td><div class=\"navigation_separator\">|</div></td>';\n\n        } // end show all\n\n        $table_navigation_html .= '<td>'\n            . '<div class=\"save_edited hide\">'\n            . '<input type=\"submit\" value=\"' . __('Save edited data') . '\" />'\n            . '<div class=\"navigation_separator\">|</div>'\n            . '</div>'\n            . '</td>'\n            . '<td>'\n            . '<div class=\"restore_column hide\">'\n            . '<input type=\"submit\" value=\"' . __('Restore column order') . '\" />'\n            . '<div class=\"navigation_separator\">|</div>'\n            . '</div>'\n            . '</td>';\n\n        // if displaying a VIEW, $unlim_num_rows could be zero because\n        // of $cfg['MaxExactCountViews']; in this case, avoid passing\n        // the 5th parameter to checkFormElementInRange()\n        // (this means we can't validate the upper limit\n        $table_navigation_html .= '<td class=\"navigation_goto\">';\n\n        $table_navigation_html .= '<form action=\"sql.php\" method=\"post\" '\n            . 'onsubmit=\"return '\n                . '(checkFormElementInRange('\n                    . 'this, '\n                    . '\\'session_max_rows\\', '\n                    . '\\''\n                    . str_replace('\\'', '\\\\\\'', __('%d is not valid row number.'))\n                    . '\\', '\n                    . '1)'\n                . ' &amp;&amp; '\n                . 'checkFormElementInRange('\n                    . 'this, '\n                    . '\\'pos\\', '\n                    . '\\''\n                    . str_replace('\\'', '\\\\\\'', __('%d is not valid row number.'))\n                    . '\\', '\n                    . '0'\n                    . (($this->__get('unlim_num_rows') > 0)\n                        ? ', ' . ($this->__get('unlim_num_rows') - 1)\n                        : ''\n                    )\n                    . ')'\n                . ')'\n            . '\">';\n\n        $table_navigation_html .= PMA_URL_getHiddenInputs(\n            $this->__get('db'), $this->__get('table')\n        );\n\n        $table_navigation_html .= $this->_getAdditionalFieldsForTableNavigation(\n            $html_sql_query\n        );\n\n        $table_navigation_html .= '</form>'\n            . '</td>'\n            . '<td class=\"navigation_separator\"></td>'\n            . '<td>'\n            . '<span>' . __('Filter rows') . ':</span>'\n            . '<input type=\"text\" class=\"filter_rows\"'\n            . ' placeholder=\"' . __('Search this table') . '\"'\n            . ' data-for=\"' . $this->__get('unique_id') . '\" />'\n            . '</td>';\n\n        $table_navigation_html .= '<td>' . $sort_by_key_html . '</td>';\n\n        $table_navigation_html .= '<td class=\"navigation_separator\"></td>'\n            . '</tr>'\n            . '</table>';\n\n        return $table_navigation_html;\n\n    } // end of the '_getTableNavigation()' function\n\n\n    /**\n     * Prepare move backward buttons - previous and first\n     *\n     * @param string  $html_sql_query the sql encoded by html special characters\n     * @param integer $pos_prev       the offset for the \"previous\" page\n     *\n     * @return  string                  html content\n     *\n     * @access  private\n     *\n     * @see     _getTableNavigation()\n     */\n    private function _getMoveBackwardButtonsForTableNavigation(\n        $html_sql_query, $pos_prev\n    ) {\n        return $this->_getTableNavigationButton(\n            '&lt;&lt;', _pgettext('First page', 'Begin'), 0, $html_sql_query, true\n        )\n        . $this->_getTableNavigationButton(\n            '&lt;', _pgettext('Previous page', 'Previous'), $pos_prev,\n            $html_sql_query, true\n        );\n    } // end of the '_getMoveBackwardButtonsForTableNavigation()' function\n\n\n    /**\n     * Prepare Show All checkbox for table navigation\n     *\n     * @param bool   $showing_all    whether all rows are shown currently\n     * @param string $html_sql_query the sql encoded by html special characters\n     *\n     * @return  string                          html content\n     *\n     * @access  private\n     *\n     * @see     _getTableNavigation()\n     */\n    private function _getShowAllCheckboxForTableNavigation(\n        $showing_all, $html_sql_query\n    ) {\n        return \"\\n\"\n            . '<td>'\n            . '<form action=\"sql.php\" method=\"post\">'\n            . PMA_URL_getHiddenInputs(\n                $this->__get('db'), $this->__get('table')\n            )\n            . '<input type=\"hidden\" name=\"sql_query\" value=\"'\n            . $html_sql_query . '\" />'\n            . '<input type=\"hidden\" name=\"pos\" value=\"0\" />'\n            . '<input type=\"hidden\" name=\"is_browse_distinct\" value=\"'\n            . $this->__get('is_browse_distinct') . '\" />'\n            . '<input type=\"hidden\" name=\"session_max_rows\" value=\"'\n            . (! $showing_all ? 'all' : $GLOBALS['cfg']['MaxRows']) . '\" />'\n            . '<input type=\"hidden\" name=\"goto\" value=\"' . $this->__get('goto')\n            . '\" />'\n            . '<input type=\"checkbox\" name=\"navig\"'\n            . ' id=\"showAll_' . $this->__get('unique_id') . '\" class=\"showAllRows\"'\n            . (! $showing_all ? '' : ' checked=\"checked\"') . ' value=\"all\" />'\n            . '<label for=\"showAll_' . $this->__get('unique_id') . '\">'\n            . __('Show all') . '</label>'\n            . '</form>'\n            . '</td>';\n    } // end of the '_getShowAllButtonForTableNavigation()' function\n\n\n    /**\n     * Prepare move forward buttons - next and last\n     *\n     * @param string  $html_sql_query the sql encoded by htmlspecialchars()\n     * @param integer $pos_next       the offset for the \"next\" page\n     * @param boolean $is_innodb      whether it's InnoDB or not\n     *\n     * @return  string  $buttons_html   html content\n     *\n     * @access  private\n     *\n     * @see     _getTableNavigation()\n     */\n    private function _getMoveForwardButtonsForTableNavigation(\n        $html_sql_query, $pos_next, $is_innodb\n    ) {\n\n        // display the Next button\n        $buttons_html = $this->_getTableNavigationButton(\n            '&gt;',\n            _pgettext('Next page', 'Next'),\n            $pos_next,\n            $html_sql_query,\n            false\n        );\n\n        // prepare some options for the End button\n        if ($is_innodb\n            && $this->__get('unlim_num_rows') > $GLOBALS['cfg']['MaxExactCount']\n        ) {\n            $input_for_real_end = '<input id=\"real_end_input\" type=\"hidden\" '\n                . 'name=\"find_real_end\" value=\"1\" />';\n            // no backquote around this message\n            $onclick = '';\n        } else {\n            $input_for_real_end = $onclick = '';\n        }\n\n        $maxRows = $_SESSION['tmpval']['max_rows'];\n        $onsubmit = 'onsubmit=\"return '\n            . ($_SESSION['tmpval']['pos']\n                + $maxRows\n                < $this->__get('unlim_num_rows')\n                && $this->__get('num_rows') >= $maxRows)\n            ? 'true'\n            : 'false' . '\"';\n\n        // display the End button\n        $buttons_html .= $this->_getTableNavigationButton(\n            '&gt;&gt;',\n            _pgettext('Last page', 'End'),\n            @((ceil(\n                $this->__get('unlim_num_rows')\n                / $_SESSION['tmpval']['max_rows']\n            )- 1) * $maxRows),\n            $html_sql_query, false, $onsubmit, $input_for_real_end, $onclick\n        );\n\n        return $buttons_html;\n\n    } // end of the '_getMoveForwardButtonsForTableNavigation()' function\n\n\n    /**\n     * Prepare fields for table navigation\n     * Number of rows\n     *\n     * @param string $html_sql_query the sql encoded by htmlspecialchars()\n     *\n     * @return  string  $additional_fields_html html content\n     *\n     * @access  private\n     *\n     * @see     _getTableNavigation()\n     */\n    private function _getAdditionalFieldsForTableNavigation(\n        $html_sql_query\n    ) {\n\n        $additional_fields_html = '';\n\n        $additional_fields_html .= '<input type=\"hidden\" name=\"sql_query\" '\n            . 'value=\"' . $html_sql_query . '\" />'\n            . '<input type=\"hidden\" name=\"goto\" value=\"' . $this->__get('goto')\n            . '\" />'\n            . '<input type=\"hidden\" name=\"pos\" size=\"3\" value=\"'\n            // Do not change the position when changing the number of rows\n            . $_SESSION['tmpval']['pos'] . '\" />'\n            . '<input type=\"hidden\" name=\"is_browse_distinct\" value=\"'\n            . $this->__get('is_browse_distinct') . '\" />'  ;\n\n        $numberOfRowsPlaceholder = null;\n        if ($_SESSION['tmpval']['max_rows'] == self::ALL_ROWS) {\n            $numberOfRowsPlaceholder = __('All');\n        }\n\n        $numberOfRowsChoices = array(\n            '25'  => 25,\n            '50'  => 50,\n            '100' => 100,\n            '250' => 250,\n            '500' => 500\n        );\n        $additional_fields_html .= __('Number of rows:') . ' ';\n        $additional_fields_html .= Util::getDropdown(\n            'session_max_rows', $numberOfRowsChoices,\n            $_SESSION['tmpval']['max_rows'], '',\n            'autosubmit', $numberOfRowsPlaceholder\n        );\n\n        return $additional_fields_html;\n\n    } // end of the '_getAdditionalFieldsForTableNavigation()' function\n\n\n    /**\n     * Get the headers of the results table, for all of the columns\n     *\n     * @param array   $displayParts                which elements to display\n     * @param array   $analyzed_sql_results        analyzed sql results\n     * @param array   $sort_expression             sort expression\n     * @param string  $sort_expression_nodirection sort expression\n     *                                             without direction\n     * @param string  $sort_direction              sort direction\n     * @param boolean $is_limited_display          with limited operations\n     *                                             or not\n     * @param string  $unsorted_sql_query          query without the sort part\n     *\n     * @return string html content\n     *\n     * @access private\n     *\n     * @see    getTableHeaders()\n     */\n    private function _getTableHeadersForColumns(\n        $displayParts, $analyzed_sql_results, $sort_expression,\n        $sort_expression_nodirection, $sort_direction, $is_limited_display,\n        $unsorted_sql_query\n    ) {\n        $html = '';\n\n        // required to generate sort links that will remember whether the\n        // \"Show all\" button has been clicked\n        $sql_md5 = md5($this->__get('sql_query'));\n        $session_max_rows = $is_limited_display\n            ? 0\n            : $_SESSION['tmpval']['query'][$sql_md5]['max_rows'];\n\n        // Following variable are needed for use in isset/empty or\n        // use with array indexes/safe use in the for loop\n        $highlight_columns = $this->__get('highlight_columns');\n        $fields_meta = $this->__get('fields_meta');\n\n        // Prepare Display column comments if enabled\n        // ($GLOBALS['cfg']['ShowBrowseComments']).\n        $comments_map = $this->_getTableCommentsArray($analyzed_sql_results);\n\n        list($col_order, $col_visib) = $this->_getColumnParams(\n            $analyzed_sql_results\n        );\n\n        // optimize: avoid calling a method on each iteration\n        $number_of_columns = $this->__get('fields_cnt');\n\n        for ($j = 0; $j < $number_of_columns; $j++) {\n\n            // assign $i with the appropriate column order\n            $i = $col_order ? $col_order[$j] : $j;\n\n            //  See if this column should get highlight because it's used in the\n            //  where-query.\n            $name = $fields_meta[$i]->name;\n            $condition_field = (isset($highlight_columns[$name])\n                || isset($highlight_columns[Util::backquote($name)]))\n                ? true\n                : false;\n\n            // Prepare comment-HTML-wrappers for each row, if defined/enabled.\n            $comments = $this->_getCommentForRow($comments_map, $fields_meta[$i]);\n            $display_params = $this->__get('display_params');\n\n            if (($displayParts['sort_lnk'] == '1') && ! $is_limited_display) {\n\n                list($order_link, $sorted_header_html)\n                    = $this->_getOrderLinkAndSortedHeaderHtml(\n                        $fields_meta[$i], $sort_expression,\n                        $sort_expression_nodirection, $i, $unsorted_sql_query,\n                        $session_max_rows, $comments,\n                        $sort_direction, $col_visib,\n                        $col_visib[$j]\n                    );\n\n                $html .= $sorted_header_html;\n\n                $display_params['desc'][] = '    <th '\n                    . 'class=\"draggable'\n                    . ($condition_field ? ' condition' : '')\n                    . '\" data-column=\"' . htmlspecialchars($fields_meta[$i]->name)\n                    . '\">' . \"\\n\" . $order_link . $comments . '    </th>' . \"\\n\";\n            } else {\n                // Results can't be sorted\n                $html\n                    .= $this->_getDraggableClassForNonSortableColumns(\n                        $col_visib, $col_visib[$j], $condition_field,\n                        $fields_meta[$i], $comments\n                    );\n\n                $display_params['desc'][] = '    <th '\n                    . 'class=\"draggable'\n                    . ($condition_field ? ' condition\"' : '')\n                    . '\" data-column=\"' . htmlspecialchars($fields_meta[$i]->name)\n                    . '\">' . '        '\n                    . htmlspecialchars($fields_meta[$i]->name)\n                    . $comments . '    </th>';\n            } // end else\n\n            $this->__set('display_params', $display_params);\n\n        } // end for\n        return $html;\n    }\n\n    /**\n     * Get the headers of the results table\n     *\n     * @param array   &$displayParts               which elements to display\n     * @param array   $analyzed_sql_results        analyzed sql results\n     * @param string  $unsorted_sql_query          the unsorted sql query\n     * @param array   $sort_expression             sort expression\n     * @param string  $sort_expression_nodirection sort expression\n     *                                             without direction\n     * @param string  $sort_direction              sort direction\n     * @param boolean $is_limited_display          with limited operations\n     *                                             or not\n     *\n     * @return string html content\n     *\n     * @access private\n     *\n     * @see    getTable()\n     */\n    private function _getTableHeaders(\n        &$displayParts, $analyzed_sql_results, $unsorted_sql_query,\n        $sort_expression = array(), $sort_expression_nodirection = '',\n        $sort_direction = '', $is_limited_display = false\n    ) {\n\n        $table_headers_html = '';\n        // Needed for use in isset/empty or\n        // use with array indexes/safe use in foreach\n        $printview = $this->__get('printview');\n        $display_params = $this->__get('display_params');\n\n        // Output data needed for grid editing\n        $table_headers_html .= '<input class=\"save_cells_at_once\" type=\"hidden\"'\n            . ' value=\"' . $GLOBALS['cfg']['SaveCellsAtOnce'] . '\" />'\n            . '<div class=\"common_hidden_inputs\">'\n            . PMA_URL_getHiddenInputs(\n                $this->__get('db'), $this->__get('table')\n            )\n            . '</div>';\n\n        // Output data needed for column reordering and show/hide column\n        if ($this->_isSelect($analyzed_sql_results)) {\n            $table_headers_html .= $this->_getDataForResettingColumnOrder();\n        }\n\n        $display_params['emptypre']   = 0;\n        $display_params['emptyafter'] = 0;\n        $display_params['textbtn']    = '';\n        $full_or_partial_text_link = null;\n\n        $this->__set('display_params', $display_params);\n\n        // Display options (if we are not in print view)\n        if (! (isset($printview) && ($printview == '1')) && ! $is_limited_display) {\n\n            $table_headers_html .= $this->_getOptionsBlock();\n\n            // prepare full/partial text button or link\n            $full_or_partial_text_link = $this->_getFullOrPartialTextButtonOrLink();\n        }\n\n        // Start of form for multi-rows edit/delete/export\n        $table_headers_html .= $this->_getFormForMultiRowOperations(\n            $displayParts['del_lnk']\n        );\n\n        // 1. Set $colspan and generate html with full/partial\n        // text button or link\n        list($colspan, $button_html)\n            = $this->_getFieldVisibilityParams(\n                $displayParts, $full_or_partial_text_link\n            );\n\n        $table_headers_html .= $button_html;\n\n        // 2. Displays the fields' name\n        // 2.0 If sorting links should be used, checks if the query is a \"JOIN\"\n        //     statement (see 2.1.3)\n\n        // See if we have to highlight any header fields of a WHERE query.\n        // Uses SQL-Parser results.\n        $this->_setHighlightedColumnGlobalField($analyzed_sql_results);\n\n        // Get the headers for all of the columns\n        $table_headers_html .= $this->_getTableHeadersForColumns(\n            $displayParts, $analyzed_sql_results, $sort_expression,\n            $sort_expression_nodirection, $sort_direction,\n            $is_limited_display, $unsorted_sql_query\n        );\n\n        // Display column at rightside - checkboxes or empty column\n        if (! $printview) {\n            $table_headers_html .= $this->_getColumnAtRightSide(\n                $displayParts, $full_or_partial_text_link, $colspan\n            );\n        }\n        $table_headers_html .= '</tr>' . '</thead>';\n\n        return $table_headers_html;\n\n    } // end of the '_getTableHeaders()' function\n\n\n    /**\n     * Prepare unsorted sql query and sort by key drop down\n     *\n     * @param array  $analyzed_sql_results analyzed sql results\n     * @param string $sort_expression      sort expression\n     *\n     * @return  array   two element array - $unsorted_sql_query, $drop_down_html\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getUnsortedSqlAndSortByKeyDropDown(\n        $analyzed_sql_results, $sort_expression\n    ) {\n        $drop_down_html = '';\n\n        $unsorted_sql_query = Query::replaceClause(\n            $analyzed_sql_results['statement'],\n            $analyzed_sql_results['parser']->list,\n            'ORDER BY',\n            ''\n        );\n\n        // Data is sorted by indexes only if it there is only one table.\n        if ($this->_isSelect($analyzed_sql_results)) {\n            // grab indexes data:\n            $indexes = Index::getFromTable(\n                $this->__get('table'),\n                $this->__get('db')\n            );\n\n            // do we have any index?\n            if (! empty($indexes)) {\n                $drop_down_html = $this->_getSortByKeyDropDown(\n                    $indexes, $sort_expression,\n                    $unsorted_sql_query\n                );\n            }\n        }\n\n        return array($unsorted_sql_query, $drop_down_html);\n\n    } // end of the '_getUnsortedSqlAndSortByKeyDropDown()' function\n\n    /**\n     * Prepare sort by key dropdown - html code segment\n     *\n     * @param Index[] $indexes            the indexes of the table for sort criteria\n     * @param string  $sort_expression    the sort expression\n     * @param string  $unsorted_sql_query the unsorted sql query\n     *\n     * @return  string  $drop_down_html         html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getSortByKeyDropDown(\n        $indexes, $sort_expression, $unsorted_sql_query\n    ) {\n\n        $drop_down_html = '';\n\n        $drop_down_html .= '<form action=\"sql.php\" method=\"post\" ' .\n            'class=\"print_ignore\">' . \"\\n\"\n            . PMA_URL_getHiddenInputs(\n                $this->__get('db'), $this->__get('table')\n            )\n            // to avoid calling PMA_handleSortOrder() later\n            . PMA_getHiddenFields(array('sort_by_key' => '1'))\n            . __('Sort by key')\n            . ': <select name=\"sql_query\" class=\"autosubmit\">' . \"\\n\";\n\n        $used_index = false;\n        $local_order = (isset($sort_expression) ? $sort_expression : '');\n\n        foreach ($indexes as $index) {\n\n            $asc_sort = '`'\n                . implode('` ASC, `', array_keys($index->getColumns()))\n                . '` ASC';\n\n            $desc_sort = '`'\n                . implode('` DESC, `', array_keys($index->getColumns()))\n                . '` DESC';\n\n            $used_index = $used_index\n                || ($local_order == $asc_sort)\n                || ($local_order == $desc_sort);\n\n            if (preg_match(\n                '@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|'\n                . 'FOR UPDATE|LOCK IN SHARE MODE))@is',\n                $unsorted_sql_query, $my_reg\n            )) {\n                $unsorted_sql_query_first_part = $my_reg[1];\n                $unsorted_sql_query_second_part = $my_reg[2];\n            } else {\n                $unsorted_sql_query_first_part = $unsorted_sql_query;\n                $unsorted_sql_query_second_part = '';\n            }\n\n            $drop_down_html .= '<option value=\"'\n                . htmlspecialchars(\n                    $unsorted_sql_query_first_part  . \"\\n\"\n                    . ' ORDER BY ' . $asc_sort\n                    . $unsorted_sql_query_second_part\n                )\n                . '\"' . ($local_order == $asc_sort\n                    ? ' selected=\"selected\"'\n                    : '')\n                . '>' . htmlspecialchars($index->getName()) . ' (ASC)</option>';\n\n            $drop_down_html .= '<option value=\"'\n                . htmlspecialchars(\n                    $unsorted_sql_query_first_part . \"\\n\"\n                    . ' ORDER BY ' . $desc_sort\n                    . $unsorted_sql_query_second_part\n                )\n                . '\"' . ($local_order == $desc_sort\n                    ? ' selected=\"selected\"'\n                    : '')\n                . '>' . htmlspecialchars($index->getName()) . ' (DESC)</option>';\n        }\n\n        $drop_down_html .= '<option value=\"' . htmlspecialchars($unsorted_sql_query)\n            . '\"' . ($used_index ? '' : ' selected=\"selected\"') . '>' . __('None')\n            . '</option>'\n            . '</select>' . \"\\n\"\n            . '</form>' . \"\\n\";\n\n        return $drop_down_html;\n\n    } // end of the '_getSortByKeyDropDown()' function\n\n\n    /**\n     * Set column span, row span and prepare html with full/partial\n     * text button or link\n     *\n     * @param array  &$displayParts             which elements to display\n     * @param string $full_or_partial_text_link full/partial link or text button\n     *\n     * @return  array   2 element array - $colspan, $button_html\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getFieldVisibilityParams(\n        &$displayParts, $full_or_partial_text_link\n    ) {\n\n        $button_html = '';\n        $display_params = $this->__get('display_params');\n\n        // 1. Displays the full/partial text button (part 1)...\n        $button_html .= '<thead><tr>' . \"\\n\";\n\n        $colspan = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n            && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE))\n            ? ' colspan=\"4\"'\n            : '';\n\n        //     ... before the result table\n        if ((($displayParts['edit_lnk'] == self::NO_EDIT_OR_DELETE)\n            && ($displayParts['del_lnk'] == self::NO_EDIT_OR_DELETE))\n            && ($displayParts['text_btn'] == '1')\n        ) {\n\n            $display_params['emptypre']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 0;\n\n        } elseif ((($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_LEFT)\n            || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH))\n            && ($displayParts['text_btn'] == '1')\n        ) {\n            //     ... at the left column of the result table header if possible\n            //     and required\n\n            $display_params['emptypre']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 0;\n\n            $button_html .= '<th class=\"column_action print_ignore\" ' . $colspan\n                . '>' . $full_or_partial_text_link . '</th>';\n\n        } elseif ((($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_LEFT)\n            || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH))\n            && (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n            || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE))\n        ) {\n            //     ... elseif no button, displays empty(ies) col(s) if required\n\n            $display_params['emptypre']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 0;\n\n            $button_html .= '<td ' . $colspan . '></td>';\n\n        } elseif (($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_NONE)) {\n            // ... elseif display an empty column if the actions links are\n            //  disabled to match the rest of the table\n            $button_html .= '<th class=\"column_action\"></th>';\n        }\n\n        $this->__set('display_params', $display_params);\n\n        return array($colspan, $button_html);\n\n    } // end of the '_getFieldVisibilityParams()' function\n\n\n    /**\n     * Get table comments as array\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return array $comments_map table comments\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getTableCommentsArray($analyzed_sql_results)\n    {\n        if ((!$GLOBALS['cfg']['ShowBrowseComments'])\n            || (empty($analyzed_sql_results['statement']->from))\n        ) {\n            return array();\n        }\n\n        $ret = array();\n        foreach ($analyzed_sql_results['statement']->from as $field) {\n            if (empty($field->table)) {\n                continue;\n            }\n            $ret[$field->table] = PMA_getComments(\n                empty($field->database) ? $this->__get('db') : $field->database,\n                $field->table\n            );\n        }\n\n        return $ret;\n\n    } // end of the '_getTableCommentsArray()' function\n\n\n    /**\n     * Set global array for store highlighted header fields\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return  void\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _setHighlightedColumnGlobalField($analyzed_sql_results)\n    {\n        $highlight_columns = array();\n\n        if (!empty($analyzed_sql_results['statement']->where)) {\n            foreach ($analyzed_sql_results['statement']->where as $expr) {\n                foreach ($expr->identifiers as $identifier) {\n                    $highlight_columns[$identifier] = 'true';\n                }\n            }\n        }\n\n        $this->__set('highlight_columns', $highlight_columns);\n\n    } // end of the '_setHighlightedColumnGlobalField()' function\n\n\n    /**\n     * Prepare data for column restoring and show/hide\n     *\n     * @return  string  $data_html      html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getDataForResettingColumnOrder()\n    {\n\n        $data_html = '';\n\n        // generate the column order, if it is set\n        $pmatable = new Table($this->__get('table'), $this->__get('db'));\n        $col_order = $pmatable->getUiProp(Table::PROP_COLUMN_ORDER);\n\n        if ($col_order) {\n            $data_html .= '<input class=\"col_order\" type=\"hidden\" value=\"'\n                . implode(',', $col_order) . '\" />';\n        }\n\n        $col_visib = $pmatable->getUiProp(Table::PROP_COLUMN_VISIB);\n\n        if ($col_visib) {\n            $data_html .= '<input class=\"col_visib\" type=\"hidden\" value=\"'\n                . implode(',', $col_visib) . '\" />';\n        }\n\n        // generate table create time\n        $table = new Table($this->__get('table'), $this->__get('db'));\n        if (! $table->isView()) {\n            $data_html .= '<input class=\"table_create_time\" type=\"hidden\" value=\"'\n                . $GLOBALS['dbi']->getTable(\n                    $this->__get('db'), $this->__get('table')\n                )->getStatusInfo('Create_time')\n                . '\" />';\n        }\n\n        return $data_html;\n\n    } // end of the '_getDataForResettingColumnOrder()' function\n\n\n    /**\n     * Prepare option fields block\n     *\n     * @return  string  $options_html   html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getOptionsBlock()\n    {\n\n        $options_html = '';\n\n        $options_html .= '<form method=\"post\" action=\"sql.php\" '\n            . 'name=\"displayOptionsForm\"';\n\n        $options_html .= ' class=\"ajax print_ignore\" ';\n\n        $options_html .= '>';\n        $url_params = array(\n            'db' => $this->__get('db'),\n            'table' => $this->__get('table'),\n            'sql_query' => $this->__get('sql_query'),\n            'goto' => $this->__get('goto'),\n            'display_options_form' => 1\n        );\n\n        $options_html .= PMA_URL_getHiddenInputs($url_params)\n            . '<br />'\n            . Util::getDivForSliderEffect(\n                '', __('Options')\n            )\n            . '<fieldset>';\n\n        $options_html .= '<div class=\"formelement\">';\n        $choices = array(\n            'P'   => __('Partial texts'),\n            'F'   => __('Full texts')\n        );\n\n        // pftext means \"partial or full texts\" (done to reduce line lengths)\n        $options_html .= Util::getRadioFields(\n            'pftext', $choices,\n            $_SESSION['tmpval']['pftext'],\n            true, true, '', 'pftext_' . $this->__get('unique_id')\n        )\n        . '</div>';\n\n        if ($GLOBALS['cfgRelation']['relwork']\n            && $GLOBALS['cfgRelation']['displaywork']\n        ) {\n            $options_html .= '<div class=\"formelement\">';\n            $choices = array(\n                'K'   => __('Relational key'),\n                'D'   => __('Display column for relations')\n            );\n\n            $options_html .= Util::getRadioFields(\n                'relational_display', $choices,\n                $_SESSION['tmpval']['relational_display'],\n                true, true, '', 'relational_display_' . $this->__get('unique_id')\n            )\n            . '</div>';\n        }\n\n        $options_html .= '<div class=\"formelement\">'\n            . Util::getCheckbox(\n                'display_binary', __('Show binary contents'),\n                ! empty($_SESSION['tmpval']['display_binary']), false,\n                'display_binary_' . $this->__get('unique_id')\n            )\n            . '<br />'\n            . Util::getCheckbox(\n                'display_blob', __('Show BLOB contents'),\n                ! empty($_SESSION['tmpval']['display_blob']), false,\n                'display_blob_' . $this->__get('unique_id')\n            )\n            . '</div>';\n\n        // I would have preferred to name this \"display_transformation\".\n        // This is the only way I found to be able to keep this setting sticky\n        // per SQL query, and at the same time have a default that displays\n        // the transformations.\n        $options_html .= '<div class=\"formelement\">'\n            . Util::getCheckbox(\n                'hide_transformation', __('Hide browser transformation'),\n                ! empty($_SESSION['tmpval']['hide_transformation']), false,\n                'hide_transformation_' . $this->__get('unique_id')\n            )\n            . '</div>';\n\n        $options_html .= '<div class=\"formelement\">';\n        $choices = array(\n            'GEOM'  => __('Geometry'),\n            'WKT'   => __('Well Known Text'),\n            'WKB'   => __('Well Known Binary')\n        );\n\n        $options_html .= Util::getRadioFields(\n            'geoOption', $choices,\n            $_SESSION['tmpval']['geoOption'],\n            true, true, '', 'geoOption_' . $this->__get('unique_id')\n        );\n        $options_html .= '</div>';\n\n        $options_html .= '<div class=\"clearfloat\"></div>'\n            . '</fieldset>';\n\n        $options_html .= '<fieldset class=\"tblFooters\">'\n            . '<input type=\"submit\" value=\"' . __('Go') . '\" />'\n            . '</fieldset>'\n            . '</div>'\n            . '</form>';\n\n        return $options_html;\n\n    } // end of the '_getOptionsBlock()' function\n\n\n    /**\n     * Get full/partial text button or link\n     *\n     * @return string html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getFullOrPartialTextButtonOrLink()\n    {\n\n        $url_params_full_text = array(\n            'db' => $this->__get('db'),\n            'table' => $this->__get('table'),\n            'sql_query' => $this->__get('sql_query'),\n            'goto' => $this->__get('goto'),\n            'full_text_button' => 1\n        );\n\n        if ($_SESSION['tmpval']['pftext'] == self::DISPLAY_FULL_TEXT) {\n            // currently in fulltext mode so show the opposite link\n            $tmp_image_file = $this->__get('pma_theme_image') . 's_partialtext.png';\n            $tmp_txt = __('Partial texts');\n            $url_params_full_text['pftext'] = self::DISPLAY_PARTIAL_TEXT;\n        } else {\n            $tmp_image_file = $this->__get('pma_theme_image') . 's_fulltext.png';\n            $tmp_txt = __('Full texts');\n            $url_params_full_text['pftext'] = self::DISPLAY_FULL_TEXT;\n        }\n\n        $tmp_image = '<img class=\"fulltext\" src=\"' . $tmp_image_file . '\" alt=\"'\n                     . $tmp_txt . '\" title=\"' . $tmp_txt . '\" />';\n        $tmp_url = 'sql.php' . PMA_URL_getCommon($url_params_full_text);\n\n        return Util::linkOrButton(\n            $tmp_url, $tmp_image, array(), false\n        );\n\n    } // end of the '_getFullOrPartialTextButtonOrLink()' function\n\n\n    /**\n     * Prepare html form for multi row operations\n     *\n     * @param string $del_lnk the delete link of current row\n     *\n     * @return  string  $form_html          html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getFormForMultiRowOperations($del_lnk)\n    {\n\n        $form_html = '';\n\n        if (($del_lnk == self::DELETE_ROW) || ($del_lnk == self::KILL_PROCESS)) {\n\n            $form_html .= '<form method=\"post\" action=\"tbl_row_action.php\" '\n                . 'name=\"resultsForm\"'\n                . ' id=\"resultsForm_' . $this->__get('unique_id') . '\"';\n\n            $form_html .= ' class=\"ajax\" ';\n\n            $form_html .= '>'\n                . PMA_URL_getHiddenInputs(\n                    $this->__get('db'), $this->__get('table'), 1\n                )\n                . '<input type=\"hidden\" name=\"goto\" value=\"sql.php\" />';\n        }\n\n        $form_html .= '<table class=\"table_results data ajax\"';\n        $form_html .= ' data-uniqueId=\"' . $this->__get('unique_id') . '\"';\n        $form_html .= '>';\n\n        return $form_html;\n\n    } // end of the '_getFormForMultiRowOperations()' function\n\n\n    /**\n     * Get comment for row\n     *\n     * @param array $comments_map comments array\n     * @param array $fields_meta  set of field properties\n     *\n     * @return  string  $comment        html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getCommentForRow($comments_map, $fields_meta)\n    {\n        $comments = '';\n        if (isset($comments_map[$fields_meta->table])\n            && isset($comments_map[$fields_meta->table][$fields_meta->name])\n        ) {\n            $sanitized_comments = htmlspecialchars(\n                $comments_map[$fields_meta->table][$fields_meta->name]\n            );\n\n            $comments = '<span class=\"tblcomment\" title=\"'\n                . $sanitized_comments . '\">';\n            $limitChars = $GLOBALS['cfg']['LimitChars'];\n            if (mb_strlen($sanitized_comments) > $limitChars) {\n                $sanitized_comments = mb_substr(\n                    $sanitized_comments, 0, $limitChars\n                ) . '\u2026';\n            }\n            $comments .= $sanitized_comments;\n            $comments .= '</span>';\n        }\n        return $comments;\n    } // end of the '_getCommentForRow()' function\n\n\n    /**\n     * Prepare parameters and html for sorted table header fields\n     *\n     * @param array   $fields_meta                 set of field properties\n     * @param array   $sort_expression             sort expression\n     * @param string  $sort_expression_nodirection sort expression without direction\n     * @param integer $column_index                the index of the column\n     * @param string  $unsorted_sql_query          the unsorted sql query\n     * @param integer $session_max_rows            maximum rows resulted by sql\n     * @param string  $comments                    comment for row\n     * @param string  $sort_direction              sort direction\n     * @param boolean $col_visib                   column is visible(false)\n     *        array                                column isn't visible(string array)\n     * @param string  $col_visib_j                 element of $col_visib array\n     *\n     * @return  array   2 element array - $order_link, $sorted_header_html\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getOrderLinkAndSortedHeaderHtml(\n        $fields_meta, $sort_expression, $sort_expression_nodirection,\n        $column_index, $unsorted_sql_query, $session_max_rows,\n        $comments, $sort_direction, $col_visib, $col_visib_j\n    ) {\n\n        $sorted_header_html = '';\n\n        // Checks if the table name is required; it's the case\n        // for a query with a \"JOIN\" statement and if the column\n        // isn't aliased, or in queries like\n        // SELECT `1`.`master_field` , `2`.`master_field`\n        // FROM `PMA_relation` AS `1` , `PMA_relation` AS `2`\n\n        $sort_tbl = (isset($fields_meta->table)\n            && mb_strlen($fields_meta->table)\n            && $fields_meta->orgname == $fields_meta->name)\n            ? Util::backquote(\n                $fields_meta->table\n            ) . '.'\n            : '';\n\n        $name_to_use_in_sort = $fields_meta->name;\n\n        // Generates the orderby clause part of the query which is part\n        // of URL\n        list($single_sort_order, $multi_sort_order, $order_img)\n            = $this->_getSingleAndMultiSortUrls(\n                $sort_expression, $sort_expression_nodirection, $sort_tbl,\n                $name_to_use_in_sort, $sort_direction, $fields_meta, $column_index\n            );\n\n        if (preg_match(\n            '@(.*)([[:space:]](LIMIT (.*)|PROCEDURE (.*)|FOR UPDATE|'\n            . 'LOCK IN SHARE MODE))@is',\n            $unsorted_sql_query, $regs3\n        )) {\n            $single_sorted_sql_query = $regs3[1] . $single_sort_order . $regs3[2];\n            $multi_sorted_sql_query = $regs3[1] . $multi_sort_order . $regs3[2];\n        } else {\n            $single_sorted_sql_query = $unsorted_sql_query . $single_sort_order;\n            $multi_sorted_sql_query = $unsorted_sql_query . $multi_sort_order;\n        }\n\n        $_single_url_params = array(\n            'db'                 => $this->__get('db'),\n            'table'              => $this->__get('table'),\n            'sql_query'          => $single_sorted_sql_query,\n            'session_max_rows'   => $session_max_rows,\n            'is_browse_distinct' => $this->__get('is_browse_distinct'),\n        );\n\n        $_multi_url_params = array(\n            'db'                 => $this->__get('db'),\n            'table'              => $this->__get('table'),\n            'sql_query'          => $multi_sorted_sql_query,\n            'session_max_rows'   => $session_max_rows,\n            'is_browse_distinct' => $this->__get('is_browse_distinct'),\n        );\n        $single_order_url  = 'sql.php' . PMA_URL_getCommon($_single_url_params);\n        $multi_order_url = 'sql.php' . PMA_URL_getCommon($_multi_url_params);\n\n        // Displays the sorting URL\n        // enable sort order swapping for image\n        $order_link = $this->_getSortOrderLink(\n            $order_img, $column_index,\n            $fields_meta, $single_order_url, $multi_order_url\n        );\n\n        $sorted_header_html .= $this->_getDraggableClassForSortableColumns(\n            $col_visib, $col_visib_j,\n            $fields_meta, $order_link, $comments\n        );\n\n        return array($order_link, $sorted_header_html);\n\n    } // end of the '_getOrderLinkAndSortedHeaderHtml()' function\n\n    /**\n     * Prepare parameters and html for sorted table header fields\n     *\n     * @param array   $sort_expression             sort expression\n     * @param string  $sort_expression_nodirection sort expression without direction\n     * @param string  $sort_tbl                    The name of the table to which\n     *                                             the current column belongs to\n     * @param string  $name_to_use_in_sort         The current column under\n     *                                             consideration\n     * @param string  $sort_direction              sort direction\n     * @param array   $fields_meta                 set of field properties\n     * @param integer $column_index                The index number to current column\n     *\n     * @return  array   3 element array - $single_sort_order, $sort_order, $order_img\n     *\n     * @access  private\n     *\n     * @see     _getOrderLinkAndSortedHeaderHtml()\n     */\n    private function _getSingleAndMultiSortUrls(\n        $sort_expression, $sort_expression_nodirection, $sort_tbl,\n        $name_to_use_in_sort, $sort_direction, $fields_meta, $column_index\n    ) {\n        $sort_order = \"\";\n        // Check if the current column is in the order by clause\n        $is_in_sort = $this->_isInSorted(\n            $sort_expression, $sort_expression_nodirection,\n            $sort_tbl, $name_to_use_in_sort\n        );\n        $current_name = $name_to_use_in_sort;\n        if ($sort_expression_nodirection[0] == '' || !$is_in_sort) {\n            $special_index = $sort_expression_nodirection[0] == ''\n                ? 0\n                : count($sort_expression_nodirection);\n            $sort_expression_nodirection[$special_index]\n                = Util::backquote(\n                    $current_name\n                );\n            $sort_direction[$special_index] = (preg_match(\n                '@time|date@i',\n                $fields_meta->type\n            )) ? self::DESCENDING_SORT_DIR : self::ASCENDING_SORT_DIR;\n\n        }\n\n        $sort_expression_nodirection = array_filter($sort_expression_nodirection);\n        $single_sort_order = null;\n        foreach ($sort_expression_nodirection as $index=>$expression) {\n            // check if this is the first clause,\n            // if it is then we have to add \"order by\"\n            $is_first_clause = ($index == 0);\n            $name_to_use_in_sort = $expression;\n            $sort_tbl_new = $sort_tbl;\n            // Test to detect if the column name is a standard name\n            // Standard name has the table name prefixed to the column name\n            if (mb_strpos($name_to_use_in_sort, '.') !== false) {\n                $matches = explode('.', $name_to_use_in_sort);\n                // Matches[0] has the table name\n                // Matches[1] has the column name\n                $name_to_use_in_sort = $matches[1];\n                $sort_tbl_new = $matches[0];\n            }\n\n            // $name_to_use_in_sort might contain a space due to\n            // formatting of function expressions like \"COUNT(name )\"\n            // so we remove the space in this situation\n            $name_to_use_in_sort = str_replace(' )', ')', $name_to_use_in_sort);\n            $name_to_use_in_sort = str_replace('``', '`', $name_to_use_in_sort);\n            $name_to_use_in_sort = trim($name_to_use_in_sort, '`');\n\n            // If this the first column name in the order by clause add\n            // order by clause to the  column name\n            $query_head = $is_first_clause ? \"\\nORDER BY \" : \"\";\n            // Again a check to see if the given column is a aggregate column\n            if (mb_strpos($name_to_use_in_sort, '(') !== false) {\n                $sort_order .=  $query_head  . $name_to_use_in_sort . ' ' ;\n            } else {\n                if (mb_strlen($sort_tbl_new) > 0) {\n                    $sort_tbl_new .= \".\";\n                }\n                $sort_order .=  $query_head  . $sort_tbl_new\n                  . Util::backquote(\n                      $name_to_use_in_sort\n                  ) .  ' ' ;\n            }\n\n            // For a special case where the code generates two dots between\n            // column name and table name.\n            $sort_order = preg_replace(\"/\\.\\./\", \".\", $sort_order);\n            // Incase this is the current column save $single_sort_order\n            if ($current_name == $name_to_use_in_sort) {\n                if (mb_strpos($current_name, '(') !== false) {\n                    $single_sort_order = \"\\n\" . 'ORDER BY ' . $current_name . ' ';\n                } else {\n                    $single_sort_order = \"\\n\" . 'ORDER BY ' . $sort_tbl\n                        . Util::backquote(\n                            $current_name\n                        ) . ' ';\n                }\n                if ($is_in_sort) {\n                    list($single_sort_order, $order_img)\n                        = $this->_getSortingUrlParams(\n                            $sort_direction, $single_sort_order,\n                            $column_index, $index\n                        );\n                } else {\n                    $single_sort_order .= strtoupper($sort_direction[$index]);\n                }\n            }\n            if ($current_name == $name_to_use_in_sort && $is_in_sort) {\n                // We need to generate the arrow button and related html\n                list($sort_order, $order_img) = $this->_getSortingUrlParams(\n                    $sort_direction, $sort_order, $column_index, $index\n                );\n                $order_img .= \" <small>\" . ($index + 1) . \"</small>\";\n            } else {\n                $sort_order .= strtoupper($sort_direction[$index]);\n            }\n            // Separate columns by a comma\n            $sort_order .= \", \";\n\n            unset($name_to_use_in_sort);\n        }\n        // remove the comma from the last column name in the newly\n        // constructed clause\n        $sort_order = mb_substr(\n            $sort_order,\n            0,\n            mb_strlen($sort_order)-2\n        );\n        if (empty($order_img)) {\n            $order_img = '';\n        }\n        return array($single_sort_order, $sort_order, $order_img);\n    }\n\n    /**\n     * Check whether the column is sorted\n     *\n     * @param array  $sort_expression             sort expression\n     * @param array  $sort_expression_nodirection sort expression without direction\n     * @param string $sort_tbl                    the table name\n     * @param string $name_to_use_in_sort         the sorting column name\n     *\n     * @return boolean $is_in_sort                   the column sorted or not\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _isInSorted(\n        $sort_expression, $sort_expression_nodirection, $sort_tbl,\n        $name_to_use_in_sort\n    ) {\n\n        $index_in_expression = 0;\n\n        foreach ($sort_expression_nodirection as $index => $clause) {\n            if (mb_strpos($clause, '.') !== false) {\n                $fragments = explode('.', $clause);\n                $clause2 = $fragments[0] . \".\" . str_replace('`', '', $fragments[1]);\n            } else {\n                $clause2 = $sort_tbl . str_replace('`', '', $clause);\n            }\n            if ($clause2 === $sort_tbl . $name_to_use_in_sort) {\n                $index_in_expression = $index;\n                break;\n            }\n        }\n        if (empty($sort_expression[$index_in_expression])) {\n            $is_in_sort = false;\n        } else {\n            // Field name may be preceded by a space, or any number\n            // of characters followed by a dot (tablename.fieldname)\n            // so do a direct comparison for the sort expression;\n            // this avoids problems with queries like\n            // \"SELECT id, count(id)...\" and clicking to sort\n            // on id or on count(id).\n            // Another query to test this:\n            // SELECT p.*, FROM_UNIXTIME(p.temps) FROM mytable AS p\n            // (and try clicking on each column's header twice)\n            $noSortTable = empty($sort_tbl) || mb_strpos(\n                $sort_expression_nodirection[$index_in_expression], $sort_tbl\n            ) === false;\n            $noOpenParenthesis = mb_strpos(\n                $sort_expression_nodirection[$index_in_expression], '('\n            ) === false;\n            if (! empty($sort_tbl) && $noSortTable && $noOpenParenthesis) {\n                $new_sort_expression_nodirection = $sort_tbl\n                    . $sort_expression_nodirection[$index_in_expression];\n            } else {\n                $new_sort_expression_nodirection\n                    = $sort_expression_nodirection[$index_in_expression];\n            }\n\n            //Back quotes are removed in next comparison, so remove them from value\n            //to compare.\n            $name_to_use_in_sort = str_replace('`', '', $name_to_use_in_sort);\n\n            $is_in_sort = false;\n            $sort_name = str_replace('`', '', $sort_tbl) . $name_to_use_in_sort;\n\n            if ($sort_name == str_replace('`', '', $new_sort_expression_nodirection)\n                || $sort_name == str_replace('`', '', $sort_expression_nodirection[$index_in_expression])\n            ) {\n                $is_in_sort = true;\n            }\n        }\n\n        return $is_in_sort;\n\n    } // end of the '_isInSorted()' function\n\n\n    /**\n     * Get sort url parameters - sort order and order image\n     *\n     * @param array   $sort_direction the sort direction\n     * @param string  $sort_order     the sorting order\n     * @param integer $column_index   the index of the column\n     * @param integer $index          the index of sort direction array.\n     *\n     * @return  array                       2 element array - $sort_order, $order_img\n     *\n     * @access  private\n     *\n     * @see     _getSingleAndMultiSortUrls()\n     */\n    private function _getSortingUrlParams(\n        $sort_direction, $sort_order, $column_index, $index\n    ) {\n        if (strtoupper(trim($sort_direction[$index])) == self::DESCENDING_SORT_DIR) {\n            $sort_order .= ' ASC';\n            $order_img   = ' ' . Util::getImage(\n                's_desc.png', __('Descending'),\n                array('class' => \"soimg$column_index\", 'title' => '')\n            );\n            $order_img  .= ' ' . Util::getImage(\n                's_asc.png', __('Ascending'),\n                array('class' => \"soimg$column_index hide\", 'title' => '')\n            );\n        } else {\n            $sort_order .= ' DESC';\n            $order_img   = ' ' . Util::getImage(\n                's_asc.png', __('Ascending'),\n                array('class' => \"soimg$column_index\", 'title' => '')\n            );\n            $order_img  .=  ' ' . Util::getImage(\n                's_desc.png', __('Descending'),\n                array('class' => \"soimg$column_index hide\", 'title' => '')\n            );\n        }\n        return array($sort_order, $order_img);\n    } // end of the '_getSortingUrlParams()' function\n\n\n    /**\n     * Get sort order link\n     *\n     * @param string  $order_img       the sort order image\n     * @param integer $col_index       the index of the column\n     * @param array   $fields_meta     set of field properties\n     * @param string  $order_url       the url for sort\n     * @param string  $multi_order_url the url for sort\n     *\n     * @return  string                      the sort order link\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getSortOrderLink(\n        $order_img, $col_index,\n        $fields_meta, $order_url, $multi_order_url\n    ) {\n        $order_link_params = array();\n        if (isset($order_img) && ($order_img != '')) {\n            if (mb_strstr($order_img, 'asc')) {\n                $order_link_params['onmouseover'] = \"$('.soimg$col_index').toggle()\";\n                $order_link_params['onmouseout']  = \"$('.soimg$col_index').toggle()\";\n            } elseif (mb_strstr($order_img, 'desc')) {\n                $order_link_params['onmouseover'] = \"$('.soimg$col_index').toggle()\";\n                $order_link_params['onmouseout']  = \"$('.soimg$col_index').toggle()\";\n            }\n        }\n\n        $order_link_content = htmlspecialchars($fields_meta->name);\n        $inner_link_content = $order_link_content . $order_img\n            . '<input type=\"hidden\" value=\"' .  $multi_order_url . '\" />';\n\n        return Util::linkOrButton(\n            $order_url, $inner_link_content,\n            $order_link_params, false, true\n        );\n\n    } // end of the '_getSortOrderLink()' function\n\n    /**\n     * Check if the column contains numeric data. If yes, then set the\n     * column header's alignment right\n     *\n     * @param array $fields_meta set of field properties\n     * @param array &$th_class   array containing classes\n     *\n     * @return void\n     *\n     * @see  _getDraggableClassForSortableColumns()\n     */\n    private function _getClassForNumericColumnType($fields_meta,&$th_class)\n    {\n        if (preg_match(\n            '@int|decimal|float|double|real|bit|boolean|serial@i',\n            $fields_meta->type\n        )) {\n            $th_class[] = 'right';\n        }\n    }\n\n    /**\n     * Prepare columns to draggable effect for sortable columns\n     *\n     * @param boolean $col_visib   the column is visible (false)\n     *        array                the column is not visible (string array)\n     * @param string  $col_visib_j element of $col_visib array\n     * @param array   $fields_meta set of field properties\n     * @param string  $order_link  the order link\n     * @param string  $comments    the comment for the column\n     *\n     * @return  string  $draggable_html     html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getDraggableClassForSortableColumns(\n        $col_visib, $col_visib_j, $fields_meta,\n        $order_link, $comments\n    ) {\n\n        $draggable_html = '<th';\n        $th_class = array();\n        $th_class[] = 'draggable';\n        $this->_getClassForNumericColumnType($fields_meta, $th_class);\n        if ($col_visib && !$col_visib_j) {\n            $th_class[] = 'hide';\n        }\n\n        $th_class[] = 'column_heading';\n        if ($GLOBALS['cfg']['BrowsePointerEnable'] == true) {\n            $th_class[] = 'pointer';\n        }\n\n        if ($GLOBALS['cfg']['BrowseMarkerEnable'] == true) {\n            $th_class[] = 'marker';\n        }\n\n        $draggable_html .= ' class=\"' . implode(' ', $th_class) . '\"';\n\n        $draggable_html .= ' data-column=\"' . htmlspecialchars($fields_meta->name)\n            . '\">' . $order_link . $comments . '</th>';\n\n        return $draggable_html;\n\n    } // end of the '_getDraggableClassForSortableColumns()' function\n\n\n    /**\n     * Prepare columns to draggable effect for non sortable columns\n     *\n     * @param boolean $col_visib       the column is visible (false)\n     *        array                    the column is not visible (string array)\n     * @param string  $col_visib_j     element of $col_visib array\n     * @param boolean $condition_field whether to add CSS class condition\n     * @param array   $fields_meta     set of field properties\n     * @param string  $comments        the comment for the column\n     *\n     * @return  string  $draggable_html         html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getDraggableClassForNonSortableColumns(\n        $col_visib, $col_visib_j, $condition_field,\n        $fields_meta, $comments\n    ) {\n\n        $draggable_html = '<th';\n        $th_class = array();\n        $th_class[] = 'draggable';\n        $this->_getClassForNumericColumnType($fields_meta, $th_class);\n        if ($col_visib && !$col_visib_j) {\n            $th_class[] = 'hide';\n        }\n\n        if ($condition_field) {\n            $th_class[] = 'condition';\n        }\n\n        $draggable_html .= ' class=\"' . implode(' ', $th_class) . '\"';\n\n        $draggable_html .= ' data-column=\"'\n            . htmlspecialchars($fields_meta->name) . '\">';\n\n        $draggable_html .= htmlspecialchars($fields_meta->name);\n\n        $draggable_html .= \"\\n\" . $comments . '</th>';\n\n        return $draggable_html;\n\n    } // end of the '_getDraggableClassForNonSortableColumns()' function\n\n\n    /**\n     * Prepare column to show at right side - check boxes or empty column\n     *\n     * @param array  &$displayParts             which elements to display\n     * @param string $full_or_partial_text_link full/partial link or text button\n     * @param string $colspan                   column span of table header\n     *\n     * @return  string  html content\n     *\n     * @access  private\n     *\n     * @see     _getTableHeaders()\n     */\n    private function _getColumnAtRightSide(\n        &$displayParts, $full_or_partial_text_link, $colspan\n    ) {\n\n        $right_column_html = '';\n        $display_params = $this->__get('display_params');\n\n        // Displays the needed checkboxes at the right\n        // column of the result table header if possible and required...\n        if ((($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_RIGHT)\n            || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH))\n            && (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n            || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE))\n            && ($displayParts['text_btn'] == '1')\n        ) {\n\n            $display_params['emptyafter']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 1;\n\n            $right_column_html .= \"\\n\"\n                . '<th class=\"column_action print_ignore\" ' . $colspan . '>'\n                . $full_or_partial_text_link\n                . '</th>';\n\n        } elseif ((($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_LEFT)\n            || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH))\n            && (($displayParts['edit_lnk'] == self::NO_EDIT_OR_DELETE)\n            && ($displayParts['del_lnk'] == self::NO_EDIT_OR_DELETE))\n            && (! isset($GLOBALS['is_header_sent']) || ! $GLOBALS['is_header_sent'])\n        ) {\n            //     ... elseif no button, displays empty columns if required\n            // (unless coming from Browse mode print view)\n\n            $display_params['emptyafter']\n                = (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                && ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)) ? 4 : 1;\n\n            $right_column_html .= \"\\n\" . '<td class=\"print_ignore\" ' . $colspan\n                . '></td>';\n        }\n\n        $this->__set('display_params', $display_params);\n\n        return $right_column_html;\n\n    } // end of the '_getColumnAtRightSide()' function\n\n\n    /**\n     * Prepares the display for a value\n     *\n     * @param string $class           class of table cell\n     * @param bool   $condition_field whether to add CSS class condition\n     * @param string $value           value to display\n     *\n     * @return string  the td\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns()\n     */\n    private function _buildValueDisplay($class, $condition_field, $value)\n    {\n        return '<td class=\"left ' . $class . ($condition_field ? ' condition' : '')\n            . '\">' . $value . '</td>';\n    } // end of the '_buildValueDisplay()' function\n\n\n    /**\n     * Prepares the display for a null value\n     *\n     * @param string $class           class of table cell\n     * @param bool   $condition_field whether to add CSS class condition\n     * @param object $meta            the meta-information about this field\n     * @param string $align           cell alignment\n     *\n     * @return string  the td\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForNumericColumns(),\n     *          _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns()\n     */\n    private function _buildNullDisplay($class, $condition_field, $meta, $align = '')\n    {\n        // the null class is needed for grid editing\n        $decimals = isset($meta->decimals) ? $meta->decimals : '-1';\n        return '<td ' . $align . ' data-decimals=\"' . $decimals\n            . '\" data-type=\"' . $meta->type . '\"  class=\"'\n            . $this->_addClass(\n                $class, $condition_field, $meta, ''\n            )\n            . ' null\"><i>NULL</i></td>';\n    } // end of the '_buildNullDisplay()' function\n\n\n    /**\n     * Prepares the display for an empty value\n     *\n     * @param string $class           class of table cell\n     * @param bool   $condition_field whether to add CSS class condition\n     * @param object $meta            the meta-information about this field\n     * @param string $align           cell alignment\n     *\n     * @return string  the td\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForNumericColumns(),\n     *          _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns()\n     */\n    private function _buildEmptyDisplay($class, $condition_field, $meta, $align = '')\n    {\n        return '<td ' . $align . ' class=\"'\n            . $this->_addClass(\n                $class, $condition_field, $meta, 'nowrap'\n            )\n            . '\"></td>';\n    } // end of the '_buildEmptyDisplay()' function\n\n\n    /**\n     * Adds the relevant classes.\n     *\n     * @param string        $class                 class of table cell\n     * @param bool          $condition_field       whether to add CSS class\n     *                                             condition\n     * @param object        $meta                  the meta-information about the\n     *                                             field\n     * @param string        $nowrap                avoid wrapping\n     * @param bool          $is_field_truncated    is field truncated (display ...)\n     * @param object|string $transformation_plugin transformation plugin.\n     *                                             Can also be the default function:\n     *                                             PMA_mimeDefaultFunction\n     * @param string        $default_function      default transformation function\n     *\n     * @return string  the list of classes\n     *\n     * @access  private\n     *\n     * @see     _buildNullDisplay(), _getRowData()\n     */\n    private function _addClass(\n        $class, $condition_field, $meta, $nowrap, $is_field_truncated = false,\n        $transformation_plugin = '', $default_function = ''\n    ) {\n        $classes = array(\n            $class,\n            $nowrap,\n        );\n\n        if (isset($meta->mimetype)) {\n            $classes[] = preg_replace('/\\//', '_', $meta->mimetype);\n        }\n\n        if ($condition_field) {\n            $classes[] = 'condition';\n        }\n\n        if ($is_field_truncated) {\n            $classes[] = 'truncated';\n        }\n\n        $mime_map = $this->__get('mime_map');\n        $orgFullColName = $this->__get('db') . '.' . $meta->orgtable\n            . '.' . $meta->orgname;\n        if ($transformation_plugin != $default_function\n            || !empty($mime_map[$orgFullColName]['input_transformation'])\n        ) {\n            $classes[] = 'transformed';\n        }\n\n        // Define classes to be added to this data field based on the type of data\n        $matches = array(\n            'enum' => 'enum',\n            'set' => 'set',\n            'binary' => 'hex',\n        );\n\n        foreach ($matches as $key => $value) {\n            if (mb_strpos($meta->flags, $key) !== false) {\n                $classes[] = $value;\n            }\n        }\n\n        if (mb_strpos($meta->type, 'bit') !== false) {\n            $classes[] = 'bit';\n        }\n\n        return implode(' ', $classes);\n    } // end of the '_addClass()' function\n\n    /**\n     * Prepare the body of the results table\n     *\n     * @param integer &$dt_result           the link id associated to the query\n     *                                      which results have to be displayed which\n     *                                      results have to be displayed\n     * @param array   &$displayParts        which elements to display\n     * @param array   $map                  the list of relations\n     * @param array   $analyzed_sql_results analyzed sql results\n     * @param boolean $is_limited_display   with limited operations or not\n     *\n     * @return string $table_body_html  html content\n     *\n     * @global array  $row                  current row data\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getTableBody(\n        &$dt_result, &$displayParts, $map, $analyzed_sql_results,\n        $is_limited_display = false\n    ) {\n\n        global $row; // mostly because of browser transformations,\n                     // to make the row-data accessible in a plugin\n\n        $table_body_html = '';\n\n        // query without conditions to shorten URLs when needed, 200 is just\n        // guess, it should depend on remaining URL length\n        $url_sql_query = $this->_getUrlSqlQuery($analyzed_sql_results);\n\n        $display_params = $this->__get('display_params');\n\n        if (! is_array($map)) {\n            $map = array();\n        }\n\n        $row_no                       = 0;\n        $display_params['edit']       = array();\n        $display_params['copy']       = array();\n        $display_params['delete']     = array();\n        $display_params['data']       = array();\n        $display_params['row_delete'] = array();\n        $this->__set('display_params', $display_params);\n\n        // name of the class added to all grid editable elements;\n        // if we don't have all the columns of a unique key in the result set,\n        //  do not permit grid editing\n        if ($is_limited_display || ! $this->__get('editable')) {\n            $grid_edit_class = '';\n        } else {\n            switch ($GLOBALS['cfg']['GridEditing']) {\n            case 'double-click':\n                // trying to reduce generated HTML by using shorter\n                // classes like click1 and click2\n                $grid_edit_class = 'grid_edit click2';\n                break;\n            case 'click':\n                $grid_edit_class = 'grid_edit click1';\n                break;\n            default: // 'disabled'\n                $grid_edit_class = '';\n                break;\n            }\n        }\n\n        // prepare to get the column order, if available\n        list($col_order, $col_visib) = $this->_getColumnParams(\n            $analyzed_sql_results\n        );\n\n        // Correction University of Virginia 19991216 in the while below\n        // Previous code assumed that all tables have keys, specifically that\n        // the phpMyAdmin GUI should support row delete/edit only for such\n        // tables.\n        // Although always using keys is arguably the prescribed way of\n        // defining a relational table, it is not required. This will in\n        // particular be violated by the novice.\n        // We want to encourage phpMyAdmin usage by such novices. So the code\n        // below has been changed to conditionally work as before when the\n        // table being displayed has one or more keys; but to display\n        // delete/edit options correctly for tables without keys.\n\n        $odd_row = true;\n\n        $whereClauseMap = $this->__get('whereClauseMap');\n        while ($row = $GLOBALS['dbi']->fetchRow($dt_result)) {\n\n            // add repeating headers\n            if ((($row_no != 0) && ($_SESSION['tmpval']['repeat_cells'] != 0))\n                && !($row_no % $_SESSION['tmpval']['repeat_cells'])\n            ) {\n                $table_body_html .= $this->_getRepeatingHeaders(\n                    $display_params\n                );\n            }\n\n            $tr_class = array();\n            if ($GLOBALS['cfg']['BrowsePointerEnable'] != true) {\n                $tr_class[] = 'nopointer';\n            }\n            if ($GLOBALS['cfg']['BrowseMarkerEnable'] != true) {\n                $tr_class[] = 'nomarker';\n            }\n            $tr_class[] = ($odd_row ? 'odd' : 'even');\n            $odd_row = ! $odd_row;\n\n            // pointer code part\n            $table_body_html .= '<tr class=\"' . implode(' ', $tr_class) . '\">';\n\n            // 1. Prepares the row\n\n            // In print view these variable needs to be initialized\n            $del_url = $del_str = $edit_anchor_class\n                = $edit_str = $js_conf = $copy_url = $copy_str = $edit_url = null;\n\n            // 1.2 Defines the URLs for the modify/delete link(s)\n\n            if (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)\n            ) {\n\n                // Results from a \"SELECT\" statement -> builds the\n                // WHERE clause to use in links (a unique key if possible)\n                /**\n                 * @todo $where_clause could be empty, for example a table\n                 *       with only one field and it's a BLOB; in this case,\n                 *       avoid to display the delete and edit links\n                 */\n                list($where_clause, $clause_is_unique, $condition_array)\n                    = Util::getUniqueCondition(\n                        $dt_result, // handle\n                        $this->__get('fields_cnt'), // fields_cnt\n                        $this->__get('fields_meta'), // fields_meta\n                        $row, // row\n                        false, // force_unique\n                        $this->__get('table'), // restrict_to_table\n                        $analyzed_sql_results // analyzed_sql_results\n                    );\n                $whereClauseMap[$row_no][$this->__get('table')] = $where_clause;\n                $this->__set('whereClauseMap', $whereClauseMap);\n\n                $where_clause_html = htmlspecialchars($where_clause);\n\n                // 1.2.1 Modify link(s) - update row case\n                if ($displayParts['edit_lnk'] == self::UPDATE_ROW) {\n\n                    list($edit_url, $copy_url, $edit_str, $copy_str,\n                        $edit_anchor_class)\n                            = $this->_getModifiedLinks(\n                                $where_clause,\n                                $clause_is_unique, $url_sql_query\n                            );\n\n                } // end if (1.2.1)\n\n                // 1.2.2 Delete/Kill link(s)\n                list($del_url, $del_str, $js_conf)\n                    = $this->_getDeleteAndKillLinks(\n                        $where_clause, $clause_is_unique,\n                        $url_sql_query, $displayParts['del_lnk'],\n                        $row\n                    );\n\n                // 1.3 Displays the links at left if required\n                if (($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_LEFT)\n                    || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH)\n                ) {\n\n                    $table_body_html .= $this->_getPlacedLinks(\n                        self::POSITION_LEFT, $del_url, $displayParts, $row_no,\n                        $where_clause, $where_clause_html, $condition_array,\n                        $edit_url, $copy_url, $edit_anchor_class,\n                        $edit_str, $copy_str, $del_str, $js_conf\n                    );\n\n                } elseif ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_NONE) {\n\n                    $table_body_html .= $this->_getPlacedLinks(\n                        self::POSITION_NONE, $del_url, $displayParts, $row_no,\n                        $where_clause, $where_clause_html, $condition_array,\n                        $edit_url, $copy_url, $edit_anchor_class,\n                        $edit_str, $copy_str, $del_str, $js_conf\n                    );\n\n                } // end if (1.3)\n            } // end if (1)\n\n            // 2. Displays the rows' values\n            if (is_null($this->__get('mime_map'))) {\n                $this->_setMimeMap();\n            }\n            $table_body_html .= $this->_getRowValues(\n                $dt_result,\n                $row,\n                $row_no,\n                $col_order,\n                $map,\n                $grid_edit_class,\n                $col_visib,\n                $url_sql_query,\n                $analyzed_sql_results\n            );\n\n            // 3. Displays the modify/delete links on the right if required\n            if (($displayParts['edit_lnk'] != self::NO_EDIT_OR_DELETE)\n                || ($displayParts['del_lnk'] != self::NO_EDIT_OR_DELETE)\n            ) {\n                if (($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_RIGHT)\n                    || ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_BOTH)\n                ) {\n\n                    $table_body_html .= $this->_getPlacedLinks(\n                        self::POSITION_RIGHT, $del_url, $displayParts, $row_no,\n                        $where_clause, $where_clause_html, $condition_array,\n                        $edit_url, $copy_url, $edit_anchor_class,\n                        $edit_str, $copy_str, $del_str, $js_conf\n                    );\n\n                }\n            } // end if (3)\n\n            $table_body_html .= '</tr>';\n            $table_body_html .= \"\\n\";\n            $row_no++;\n\n        } // end while\n\n        return $table_body_html;\n\n    } // end of the '_getTableBody()' function\n\n    /**\n     * Sets the MIME details of the columns in the results set\n     *\n     * @return void\n     */\n    private function _setMimeMap()\n    {\n        $fields_meta = $this->__get('fields_meta');\n        $mimeMap = array();\n        $added = array();\n\n        for ($currentColumn = 0;\n                $currentColumn < $this->__get('fields_cnt');\n                ++$currentColumn) {\n\n            $meta = $fields_meta[$currentColumn];\n            $orgFullTableName = $this->__get('db') . '.' . $meta->orgtable;\n\n            if ($GLOBALS['cfgRelation']['commwork']\n                && $GLOBALS['cfgRelation']['mimework']\n                && $GLOBALS['cfg']['BrowseMIME']\n                && ! $_SESSION['tmpval']['hide_transformation']\n                && empty($added[$orgFullTableName])\n            ) {\n                $mimeMap = array_merge(\n                    $mimeMap,\n                    PMA_getMIME($this->__get('db'), $meta->orgtable, false, true)\n                );\n                $added[$orgFullTableName] = true;\n            }\n        }\n\n        // special browser transformation for some SHOW statements\n        if ($this->__get('is_show')\n            && ! $_SESSION['tmpval']['hide_transformation']\n        ) {\n            preg_match(\n                '@^SHOW[[:space:]]+(VARIABLES|(FULL[[:space:]]+)?'\n                . 'PROCESSLIST|STATUS|TABLE|GRANTS|CREATE|LOGS|DATABASES|FIELDS'\n                . ')@i',\n                $this->__get('sql_query'), $which\n            );\n\n            if (isset($which[1])) {\n                $str = ' ' . strtoupper($which[1]);\n                $isShowProcessList = strpos($str, 'PROCESSLIST') > 0;\n                if ($isShowProcessList) {\n                    $mimeMap['..Info'] = array(\n                        'mimetype' => 'Text_Plain',\n                        'transformation' => 'output/Text_Plain_Sql.php',\n                    );\n                }\n\n                $isShowCreateTable = preg_match(\n                    '@CREATE[[:space:]]+TABLE@i', $this->__get('sql_query')\n                );\n                if ($isShowCreateTable) {\n                    $mimeMap['..Create Table'] = array(\n                        'mimetype' => 'Text_Plain',\n                        'transformation' => 'output/Text_Plain_Sql.php',\n                    );\n                }\n            }\n        }\n\n        $this->__set('mime_map', $mimeMap);\n    }\n\n    /**\n     * Get the values for one data row\n     *\n     * @param integer              &$dt_result           the link id associated to\n     *                                                   the query which results\n     *                                                   have to be displayed which\n     *                                                   results have to be\n     *                                                   displayed\n     * @param array                $row                  current row data\n     * @param integer              $row_no               the index of current row\n     * @param array                $col_order            the column order false when\n     *                                                   a property not found false\n     *                                                   when a property not found\n     * @param array                $map                  the list of relations\n     * @param string               $grid_edit_class      the class for all editable\n     *                                                   columns\n     * @param boolean|array|string $col_visib            column is visible(false);\n     *                                                   column isn't visible(string\n     *                                                   array)\n     * @param string               $url_sql_query        the analyzed sql query\n     * @param array                $analyzed_sql_results analyzed sql results\n     *\n     * @return  string $row_values_html  html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getRowValues(\n        &$dt_result, $row, $row_no, $col_order, $map,\n        $grid_edit_class, $col_visib,\n        $url_sql_query, $analyzed_sql_results\n    ) {\n        $row_values_html = '';\n\n        // Following variable are needed for use in isset/empty or\n        // use with array indexes/safe use in foreach\n        $sql_query = $this->__get('sql_query');\n        $fields_meta = $this->__get('fields_meta');\n        $highlight_columns = $this->__get('highlight_columns');\n        $mime_map = $this->__get('mime_map');\n\n        $row_info = $this->_getRowInfoForSpecialLinks($row, $col_order);\n\n        $whereClauseMap = $this->__get('whereClauseMap');\n\n        $columnCount = $this->__get('fields_cnt');\n        for ($currentColumn = 0;\n                $currentColumn < $columnCount;\n                ++$currentColumn) {\n\n            // assign $i with appropriate column order\n            $i = $col_order ? $col_order[$currentColumn] : $currentColumn;\n\n            $meta    = $fields_meta[$i];\n            $orgFullColName\n                = $this->__get('db') . '.' . $meta->orgtable . '.' . $meta->orgname;\n\n            $not_null_class = $meta->not_null ? 'not_null' : '';\n            $relation_class = isset($map[$meta->name]) ? 'relation' : '';\n            $hide_class = ($col_visib && ! $col_visib[$currentColumn])\n                ? 'hide'\n                : '';\n            $grid_edit = $meta->orgtable != '' ? $grid_edit_class : '';\n\n            // handle datetime-related class, for grid editing\n            $field_type_class\n                = $this->_getClassForDateTimeRelatedFields($meta->type);\n\n            $is_field_truncated = false;\n            // combine all the classes applicable to this column's value\n            $class = $this->_getClassesForColumn(\n                $grid_edit, $not_null_class, $relation_class,\n                $hide_class, $field_type_class\n            );\n\n            //  See if this column should get highlight because it's used in the\n            //  where-query.\n            $condition_field = (isset($highlight_columns)\n                && (isset($highlight_columns[$meta->name])\n                || isset($highlight_columns[Util::backquote($meta->name)])))\n                ? true\n                : false;\n\n            // Wrap MIME-transformations. [MIME]\n            $default_function = 'PMA_mimeDefaultFunction'; // default_function\n            $transformation_plugin = $default_function;\n            $transform_options = array();\n\n            if ($GLOBALS['cfgRelation']['mimework']\n                && $GLOBALS['cfg']['BrowseMIME']\n            ) {\n\n                if (isset($mime_map[$orgFullColName]['mimetype'])\n                    && !empty($mime_map[$orgFullColName]['transformation'])\n                ) {\n\n                    $file = $mime_map[$orgFullColName]['transformation'];\n                    $include_file = 'libraries/plugins/transformations/' . $file;\n\n                    if (file_exists($include_file)) {\n\n                        include_once $include_file;\n                        $class_name = PMA_getTransformationClassName($include_file);\n                        // todo add $plugin_manager\n                        $plugin_manager = null;\n                        $transformation_plugin = new $class_name(\n                            $plugin_manager\n                        );\n\n                        $transform_options  = PMA_Transformation_getOptions(\n                            isset(\n                                $mime_map[$orgFullColName]\n                                ['transformation_options']\n                            )\n                            ? $mime_map[$orgFullColName]\n                            ['transformation_options']\n                            : ''\n                        );\n\n                        $meta->mimetype = str_replace(\n                            '_', '/',\n                            $mime_map[$orgFullColName]['mimetype']\n                        );\n\n                    } // end if file_exists\n                } // end if transformation is set\n            } // end if mime/transformation works.\n\n            // Check whether the field needs to display with syntax highlighting\n\n            $dbLower = mb_strtolower($this->__get('db'));\n            $tblLower = mb_strtolower($meta->orgtable);\n            $nameLower = mb_strtolower($meta->orgname);\n            if (! empty($this->transformation_info[$dbLower][$tblLower][$nameLower])\n                && (trim($row[$i]) != '')\n                && ! $_SESSION['tmpval']['hide_transformation']\n            ) {\n                include_once $this->transformation_info\n                    [$dbLower][$tblLower][$nameLower][0];\n                $transformation_plugin = new $this->transformation_info\n                    [$dbLower][$tblLower][$nameLower][1](null);\n\n                $transform_options  = PMA_Transformation_getOptions(\n                    isset($mime_map[$orgFullColName]['transformation_options'])\n                    ? $mime_map[$orgFullColName]['transformation_options']\n                    : ''\n                );\n\n                $meta->mimetype = str_replace(\n                    '_', '/',\n                    $this->transformation_info[$dbLower]\n                    [mb_strtolower($meta->orgtable)]\n                    [mb_strtolower($meta->orgname)][2]\n                );\n\n            }\n\n            // Check for the predefined fields need to show as link in schemas\n            include_once 'libraries/special_schema_links.lib.php';\n\n            if (isset($GLOBALS['special_schema_links'])\n                && (! empty($GLOBALS['special_schema_links'][$dbLower][$tblLower][$nameLower]))\n            ) {\n\n                $linking_url = $this->_getSpecialLinkUrl(\n                    $row[$i], $row_info, mb_strtolower($meta->orgname)\n                );\n                $transformation_plugin = new Text_Plain_Link();\n\n                $transform_options  = array(\n                    0 => $linking_url,\n                    2 => true\n                );\n\n                $meta->mimetype = str_replace(\n                    '_', '/',\n                    'Text/Plain'\n                );\n\n            }\n\n            /*\n             * The result set can have columns from more than one table,\n             * this is why we have to check for the unique conditions\n             * related to this table; however getUniqueCondition() is\n             * costly and does not need to be called if we already know\n             * the conditions for the current table.\n             */\n            if (! isset($whereClauseMap[$row_no][$meta->orgtable])) {\n                $unique_conditions = Util::getUniqueCondition(\n                    $dt_result, // handle\n                    $this->__get('fields_cnt'), // fields_cnt\n                    $this->__get('fields_meta'), // fields_meta\n                    $row, // row\n                    false, // force_unique\n                    $meta->orgtable, // restrict_to_table\n                    $analyzed_sql_results // analyzed_sql_results\n                );\n                $whereClauseMap[$row_no][$meta->orgtable] = $unique_conditions[0];\n            }\n\n            $_url_params = array(\n                'db'            => $this->__get('db'),\n                'table'         => $meta->orgtable,\n                'where_clause'  => $whereClauseMap[$row_no][$meta->orgtable],\n                'transform_key' => $meta->orgname\n            );\n\n            if (! empty($sql_query)) {\n                $_url_params['sql_query'] = $url_sql_query;\n            }\n\n            $transform_options['wrapper_link']\n                = PMA_URL_getCommon($_url_params);\n\n            $display_params = $this->__get('display_params');\n\n            // in some situations (issue 11406), numeric returns 1\n            // even for a string type\n            if ($meta->numeric == 1 && $meta->type != 'string') {\n                // n u m e r i c\n\n                $display_params['data'][$row_no][$i]\n                    = $this->_getDataCellForNumericColumns(\n                        $row[$i],\n                        $class,\n                        $condition_field,\n                        $meta,\n                        $map,\n                        $is_field_truncated,\n                        $analyzed_sql_results,\n                        $transformation_plugin,\n                        $default_function,\n                        $transform_options\n                    );\n\n            } elseif ($meta->type == self::GEOMETRY_FIELD) {\n                // g e o m e t r y\n\n                // Remove 'grid_edit' from $class as we do not allow to\n                // inline-edit geometry data.\n                $class = str_replace('grid_edit', '', $class);\n\n                $display_params['data'][$row_no][$i]\n                    = $this->_getDataCellForGeometryColumns(\n                        $row[$i],\n                        $class,\n                        $meta,\n                        $map,\n                        $_url_params,\n                        $condition_field,\n                        $transformation_plugin,\n                        $default_function,\n                        $transform_options,\n                        $analyzed_sql_results\n                    );\n\n            } else {\n                // n o t   n u m e r i c\n\n                $display_params['data'][$row_no][$i]\n                    = $this->_getDataCellForNonNumericColumns(\n                        $row[$i],\n                        $class,\n                        $meta,\n                        $map,\n                        $_url_params,\n                        $condition_field,\n                        $transformation_plugin,\n                        $default_function,\n                        $transform_options,\n                        $is_field_truncated,\n                        $analyzed_sql_results,\n                        $dt_result,\n                        $i\n                    );\n\n            }\n\n            // output stored cell\n            $row_values_html .= $display_params['data'][$row_no][$i];\n\n            if (isset($display_params['rowdata'][$i][$row_no])) {\n                $display_params['rowdata'][$i][$row_no]\n                    .= $display_params['data'][$row_no][$i];\n            } else {\n                $display_params['rowdata'][$i][$row_no]\n                    = $display_params['data'][$row_no][$i];\n            }\n\n            $this->__set('display_params', $display_params);\n\n        } // end for\n\n        return $row_values_html;\n\n    } // end of the '_getRowValues()' function\n\n    /**\n     * Get link for display special schema links\n     *\n     * @param string $column_value column value\n     * @param array  $row_info     information about row\n     * @param string $field_name   column name\n     *\n     * @return string generated link\n     */\n    private function _getSpecialLinkUrl($column_value, $row_info, $field_name)\n    {\n\n        $linking_url_params = array();\n        $link_relations = $GLOBALS['special_schema_links']\n            [mb_strtolower($this->__get('db'))]\n            [mb_strtolower($this->__get('table'))]\n            [$field_name];\n\n        if (! is_array($link_relations['link_param'])) {\n            $linking_url_params[$link_relations['link_param']] = $column_value;\n        } else {\n            // Consider only the case of creating link for column field\n            // sql query that needs to be passed as url param\n            $sql = 'SELECT `' . $column_value . '` FROM `'\n                . $row_info[$link_relations['link_param'][1]] . '`.`'\n                . $row_info[$link_relations['link_param'][2]] . '`';\n            $linking_url_params[$link_relations['link_param'][0]] = $sql;\n        }\n\n        $divider = strpos($link_relations['default_page'], '?') ? '&' : '?';\n        if (empty($link_relations['link_dependancy_params'])) {\n            return $link_relations['default_page']\n                . PMA_URL_getCommon($linking_url_params, 'html', $divider);\n        }\n\n        foreach ($link_relations['link_dependancy_params'] as $new_param) {\n\n            // If param_info is an array, set the key and value\n            // from that array\n            if (is_array($new_param['param_info'])) {\n                $linking_url_params[$new_param['param_info'][0]]\n                    = $new_param['param_info'][1];\n                continue;\n            }\n\n            $linking_url_params[$new_param['param_info']]\n                = $row_info[mb_strtolower($new_param['column_name'])];\n\n            // Special case 1 - when executing routines, according\n            // to the type of the routine, url param changes\n            if (empty($row_info['routine_type'])) {\n                continue;\n            }\n        }\n\n        return $link_relations['default_page']\n            . PMA_URL_getCommon($linking_url_params, 'html', $divider);\n    }\n\n\n    /**\n     * Prepare row information for display special links\n     *\n     * @param array $row       current row data\n     * @param array $col_order the column order\n     *\n     * @return array $row_info associative array with column nama -> value\n     */\n    private function _getRowInfoForSpecialLinks($row, $col_order)\n    {\n\n        $row_info = array();\n        $fields_meta = $this->__get('fields_meta');\n\n        for ($n = 0; $n < $this->__get('fields_cnt'); ++$n) {\n            $m = $col_order ? $col_order[$n] : $n;\n            $row_info[mb_strtolower($fields_meta[$m]->name)]\n                = $row[$m];\n        }\n\n        return $row_info;\n\n    }\n\n    /**\n     * Get url sql query without conditions to shorten URLs\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return  string  $url_sql        analyzed sql query\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getUrlSqlQuery($analyzed_sql_results)\n    {\n        if (($analyzed_sql_results['querytype'] != 'SELECT')\n            || (mb_strlen($this->__get('sql_query')) < 200)\n        ) {\n            return $this->__get('sql_query');\n        }\n\n        $query = 'SELECT ' . Query::getClause(\n            $analyzed_sql_results['statement'],\n            $analyzed_sql_results['parser']->list,\n            'SELECT'\n        );\n\n        $from_clause = Query::getClause(\n            $analyzed_sql_results['statement'],\n            $analyzed_sql_results['parser']->list,\n            'FROM'\n        );\n\n        if (!empty($from_clause)) {\n            $query .= ' FROM ' . $from_clause;\n        }\n\n        return $query;\n\n    } // end of the '_getUrlSqlQuery()' function\n\n\n    /**\n     * Get column order and column visibility\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return  array           2 element array - $col_order, $col_visib\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getColumnParams($analyzed_sql_results)\n    {\n        if ($this->_isSelect($analyzed_sql_results)) {\n            $pmatable = new Table($this->__get('table'), $this->__get('db'));\n            $col_order = $pmatable->getUiProp(Table::PROP_COLUMN_ORDER);\n            $col_visib = $pmatable->getUiProp(Table::PROP_COLUMN_VISIB);\n        } else {\n            $col_order = false;\n            $col_visib = false;\n        }\n\n        return array($col_order, $col_visib);\n    } // end of the '_getColumnParams()' function\n\n\n    /**\n     * Get HTML for repeating headers\n     *\n     * @param array $display_params holds various display info\n     *\n     * @return  string  $header_html    html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getRepeatingHeaders(\n        $display_params\n    ) {\n        $header_html = '<tr>' . \"\\n\";\n\n        if ($display_params['emptypre'] > 0) {\n\n            $header_html .= '    <th colspan=\"'\n                . $display_params['emptypre'] . '\">'\n                . \"\\n\" . '        &nbsp;</th>' . \"\\n\";\n\n        } else if ($GLOBALS['cfg']['RowActionLinks'] == self::POSITION_NONE) {\n            $header_html .= '    <th></th>' . \"\\n\";\n        }\n\n        foreach ($display_params['desc'] as $val) {\n            $header_html .= $val;\n        }\n\n        if ($display_params['emptyafter'] > 0) {\n            $header_html\n                .= '    <th colspan=\"' . $display_params['emptyafter']\n                . '\">'\n                . \"\\n\" . '        &nbsp;</th>' . \"\\n\";\n        }\n        $header_html .= '</tr>' . \"\\n\";\n\n        return $header_html;\n\n    } // end of the '_getRepeatingHeaders()' function\n\n\n    /**\n     * Get modified links\n     *\n     * @param string  $where_clause     the where clause of the sql\n     * @param boolean $clause_is_unique the unique condition of clause\n     * @param string  $url_sql_query    the analyzed sql query\n     *\n     * @return  array                   5 element array - $edit_url, $copy_url,\n     *                                  $edit_str, $copy_str, $edit_anchor_class\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getModifiedLinks(\n        $where_clause, $clause_is_unique, $url_sql_query\n    ) {\n\n        $_url_params = array(\n                'db'               => $this->__get('db'),\n                'table'            => $this->__get('table'),\n                'where_clause'     => $where_clause,\n                'clause_is_unique' => $clause_is_unique,\n                'sql_query'        => $url_sql_query,\n                'goto'             => 'sql.php',\n            );\n\n        $edit_url = 'tbl_change.php'\n            . PMA_URL_getCommon(\n                $_url_params + array('default_action' => 'update')\n            );\n\n        $copy_url = 'tbl_change.php'\n            . PMA_URL_getCommon(\n                $_url_params + array('default_action' => 'insert')\n            );\n\n        $edit_str = $this->_getActionLinkContent(\n            'b_edit.png', __('Edit')\n        );\n        $copy_str = $this->_getActionLinkContent(\n            'b_insrow.png', __('Copy')\n        );\n\n        // Class definitions required for grid editing jQuery scripts\n        $edit_anchor_class = \"edit_row_anchor\";\n        if ($clause_is_unique == 0) {\n            $edit_anchor_class .= ' nonunique';\n        }\n\n        return array($edit_url, $copy_url, $edit_str, $copy_str, $edit_anchor_class);\n\n    } // end of the '_getModifiedLinks()' function\n\n\n    /**\n     * Get delete and kill links\n     *\n     * @param string  $where_clause     the where clause of the sql\n     * @param boolean $clause_is_unique the unique condition of clause\n     * @param string  $url_sql_query    the analyzed sql query\n     * @param string  $del_lnk          the delete link of current row\n     * @param array   $row              the current row\n     *\n     * @return  array                       3 element array\n     *                                      $del_url, $del_str, $js_conf\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getDeleteAndKillLinks(\n        $where_clause, $clause_is_unique, $url_sql_query, $del_lnk, $row\n    ) {\n\n        $goto = $this->__get('goto');\n\n        if ($del_lnk == self::DELETE_ROW) { // delete row case\n\n            $_url_params = array(\n                'db'        => $this->__get('db'),\n                'table'     => $this->__get('table'),\n                'sql_query' => $url_sql_query,\n                'message_to_show' => __('The row has been deleted.'),\n                'goto'      => (empty($goto) ? 'tbl_sql.php' : $goto),\n            );\n\n            $lnk_goto = 'sql.php' . PMA_URL_getCommon($_url_params, 'text');\n\n            $del_query = 'DELETE FROM '\n                . Util::backquote($this->__get('table'))\n                . ' WHERE ' . $where_clause .\n                ($clause_is_unique ? '' : ' LIMIT 1');\n\n            $_url_params = array(\n                    'db'        => $this->__get('db'),\n                    'table'     => $this->__get('table'),\n                    'sql_query' => $del_query,\n                    'message_to_show' => __('The row has been deleted.'),\n                    'goto'      => $lnk_goto,\n                );\n            $del_url  = 'sql.php' . PMA_URL_getCommon($_url_params);\n\n            $js_conf  = 'DELETE FROM ' . PMA_jsFormat($this->__get('table'))\n                . ' WHERE ' . PMA_jsFormat($where_clause, false)\n                . ($clause_is_unique ? '' : ' LIMIT 1');\n\n            $del_str = $this->_getActionLinkContent('b_drop.png', __('Delete'));\n\n        } elseif ($del_lnk == self::KILL_PROCESS) { // kill process case\n\n            $_url_params = array(\n                    'db'        => $this->__get('db'),\n                    'table'     => $this->__get('table'),\n                    'sql_query' => $url_sql_query,\n                    'goto'      => 'index.php',\n                );\n\n            $lnk_goto = 'sql.php'\n                . PMA_URL_getCommon(\n                    $_url_params, 'text'\n                );\n\n            $kill = $GLOBALS['dbi']->getKillQuery($row[0]);\n\n            $_url_params = array(\n                    'db'        => 'mysql',\n                    'sql_query' => $kill,\n                    'goto'      => $lnk_goto,\n                );\n\n            $del_url  = 'sql.php' . PMA_URL_getCommon($_url_params);\n            $js_conf  = $kill;\n            $del_str = Util::getIcon(\n                'b_drop.png', __('Kill')\n            );\n        } else {\n            $del_url = $del_str = $js_conf = null;\n        }\n\n        return array($del_url, $del_str, $js_conf);\n\n    } // end of the '_getDeleteAndKillLinks()' function\n\n\n    /**\n     * Get content inside the table row action links (Edit/Copy/Delete)\n     *\n     * @param string $icon         The name of the file to get\n     * @param string $display_text The text displaying after the image icon\n     *\n     * @return  string\n     *\n     * @access  private\n     *\n     * @see     _getModifiedLinks(), _getDeleteAndKillLinks()\n     */\n    private function _getActionLinkContent($icon, $display_text)\n    {\n\n        $linkContent = '';\n\n        if (isset($GLOBALS['cfg']['RowActionType'])\n            && $GLOBALS['cfg']['RowActionType'] == self::ACTION_LINK_CONTENT_ICONS\n        ) {\n\n            $linkContent .= '<span class=\"nowrap\">'\n                . Util::getImage(\n                    $icon, $display_text\n                )\n                . '</span>';\n\n        } else if (isset($GLOBALS['cfg']['RowActionType'])\n            && $GLOBALS['cfg']['RowActionType'] == self::ACTION_LINK_CONTENT_TEXT\n        ) {\n\n            $linkContent .= '<span class=\"nowrap\">' . $display_text . '</span>';\n\n        } else {\n\n            $linkContent .= Util::getIcon(\n                $icon, $display_text\n            );\n\n        }\n\n        return $linkContent;\n\n    }\n\n\n    /**\n     * Prepare placed links\n     *\n     * @param string  $dir               the direction of links should place\n     * @param string  $del_url           the url for delete row\n     * @param array   $displayParts      which elements to display\n     * @param integer $row_no            the index of current row\n     * @param string  $where_clause      the where clause of the sql\n     * @param string  $where_clause_html the html encoded where clause\n     * @param array   $condition_array   array of keys (primary, unique, condition)\n     * @param string  $edit_url          the url for edit row\n     * @param string  $copy_url          the url for copy row\n     * @param string  $edit_anchor_class the class for html element for edit\n     * @param string  $edit_str          the label for edit row\n     * @param string  $copy_str          the label for copy row\n     * @param string  $del_str           the label for delete row\n     * @param string  $js_conf           text for the JS confirmation\n     *\n     * @return  string                      html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getPlacedLinks(\n        $dir, $del_url, $displayParts, $row_no, $where_clause, $where_clause_html,\n        $condition_array, $edit_url, $copy_url,\n        $edit_anchor_class, $edit_str, $copy_str, $del_str, $js_conf\n    ) {\n\n        if (! isset($js_conf)) {\n            $js_conf = '';\n        }\n\n        return $this->_getCheckboxAndLinks(\n            $dir, $del_url, $displayParts,\n            $row_no, $where_clause, $where_clause_html, $condition_array,\n            $edit_url, $copy_url, $edit_anchor_class,\n            $edit_str, $copy_str, $del_str, $js_conf\n        );\n\n    } // end of the '_getPlacedLinks()' function\n\n\n    /**\n     * Get the combined classes for a column\n     *\n     * @param string $grid_edit_class  the class for all editable columns\n     * @param string $not_null_class   the class for not null columns\n     * @param string $relation_class   the class for relations in a column\n     * @param string $hide_class       the class for visibility of a column\n     * @param string $field_type_class the class related to type of the field\n     *\n     * @return string $class the combined classes\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getClassesForColumn(\n        $grid_edit_class, $not_null_class, $relation_class,\n        $hide_class, $field_type_class\n    ) {\n        $class = 'data ' . $grid_edit_class . ' ' . $not_null_class . ' '\n            . $relation_class . ' ' . $hide_class . ' ' . $field_type_class;\n\n        return $class;\n\n    } // end of the '_getClassesForColumn()' function\n\n\n    /**\n     * Get class for datetime related fields\n     *\n     * @param string $type the type of the column field\n     *\n     * @return  string  $field_type_class   the class for the column\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getClassForDateTimeRelatedFields($type)\n    {\n        if ((substr($type, 0, 9) == self::TIMESTAMP_FIELD)\n            || ($type == self::DATETIME_FIELD)\n        ) {\n            $field_type_class = 'datetimefield';\n        } elseif ($type == self::DATE_FIELD) {\n            $field_type_class = 'datefield';\n        } elseif ($type == self::TIME_FIELD) {\n            $field_type_class = 'timefield';\n        } elseif ($type == self::STRING_FIELD) {\n            $field_type_class = 'text';\n        } else {\n            $field_type_class = '';\n        }\n        return $field_type_class;\n    } // end of the '_getClassForDateTimeRelatedFields()' function\n\n\n    /**\n     * Prepare data cell for numeric type fields\n     *\n     * @param string        $column                the column's value\n     * @param string        $class                 the html class for column\n     * @param boolean       $condition_field       the column should highlighted\n     *                                             or not\n     * @param object        $meta                  the meta-information about this\n     *                                             field\n     * @param array         $map                   the list of relations\n     * @param boolean       $is_field_truncated    the condition for blob data\n     *                                             replacements\n     * @param array         $analyzed_sql_results  the analyzed query\n     * @param object|string $transformation_plugin the name of transformation plugin\n     * @param string        $default_function      the default transformation\n     *                                             function\n     * @param string        $transform_options     the transformation parameters\n     *\n     * @return  string  $cell the prepared cell, html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getDataCellForNumericColumns(\n        $column, $class, $condition_field, $meta, $map, $is_field_truncated,\n        $analyzed_sql_results, $transformation_plugin, $default_function,\n        $transform_options\n    ) {\n\n        if (! isset($column) || is_null($column)) {\n\n            $cell = $this->_buildNullDisplay(\n                'right ' . $class, $condition_field, $meta, ''\n            );\n\n        } elseif ($column != '') {\n\n            $nowrap = ' nowrap';\n            $where_comparison = ' = ' . $column;\n\n            $cell = $this->_getRowData(\n                'right ' . $class, $condition_field,\n                $analyzed_sql_results, $meta, $map, $column,\n                $transformation_plugin, $default_function, $nowrap,\n                $where_comparison, $transform_options,\n                $is_field_truncated, ''\n            );\n        } else {\n\n            $cell = $this->_buildEmptyDisplay(\n                'right ' . $class, $condition_field, $meta, ''\n            );\n        }\n\n        return $cell;\n\n    } // end of the '_getDataCellForNumericColumns()' function\n\n\n    /**\n     * Get data cell for geometry type fields\n     *\n     * @param string        $column                the relevant column in data row\n     * @param string        $class                 the html class for column\n     * @param object        $meta                  the meta-information about\n     *                                             this field\n     * @param array         $map                   the list of relations\n     * @param array         $_url_params           the parameters for generate url\n     * @param boolean       $condition_field       the column should highlighted\n     *                                             or not\n     * @param object|string $transformation_plugin the name of transformation\n     *                                             function\n     * @param string        $default_function      the default transformation\n     *                                             function\n     * @param string        $transform_options     the transformation parameters\n     * @param array         $analyzed_sql_results  the analyzed query\n     *\n     * @return  string  $cell                  the prepared data cell, html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getDataCellForGeometryColumns(\n        $column, $class, $meta, $map, $_url_params, $condition_field,\n        $transformation_plugin, $default_function, $transform_options,\n        $analyzed_sql_results\n    ) {\n        if (! isset($column) || is_null($column)) {\n            $cell = $this->_buildNullDisplay($class, $condition_field, $meta);\n            return $cell;\n        }\n\n        if ($column == '') {\n            $cell = $this->_buildEmptyDisplay($class, $condition_field, $meta);\n            return $cell;\n        }\n\n        // Display as [GEOMETRY - (size)]\n        if ($_SESSION['tmpval']['geoOption'] == self::GEOMETRY_DISP_GEOM) {\n            $geometry_text = $this->_handleNonPrintableContents(\n                strtoupper(self::GEOMETRY_FIELD), $column, $transformation_plugin,\n                $transform_options, $default_function, $meta, $_url_params\n            );\n\n            $cell = $this->_buildValueDisplay(\n                $class, $condition_field, $geometry_text\n            );\n            return $cell;\n        }\n\n        if ($_SESSION['tmpval']['geoOption'] == self::GEOMETRY_DISP_WKT) {\n            // Prepare in Well Known Text(WKT) format.\n            $where_comparison = ' = ' . $column;\n\n            // Convert to WKT format\n            $wktval = Util::asWKT($column);\n            list(\n                $is_field_truncated,\n                $wktval,\n                // skip 3rd param\n            ) = $this->_getPartialText($wktval);\n\n            $cell = $this->_getRowData(\n                $class, $condition_field, $analyzed_sql_results, $meta, $map,\n                $wktval, $transformation_plugin, $default_function, '',\n                $where_comparison, $transform_options,\n                $is_field_truncated, ''\n            );\n            return $cell;\n        }\n\n        // Prepare in  Well Known Binary (WKB) format.\n\n        if ($_SESSION['tmpval']['display_binary']) {\n            $where_comparison = ' = ' . $column;\n\n            $wkbval = substr(bin2hex($column), 8);\n            list(\n                $is_field_truncated,\n                $wkbval,\n                // skip 3rd param\n            ) = $this->_getPartialText($wkbval);\n\n            $cell = $this->_getRowData(\n                $class, $condition_field,\n                $analyzed_sql_results, $meta, $map, $wkbval,\n                $transformation_plugin, $default_function, '',\n                $where_comparison, $transform_options,\n                $is_field_truncated, ''\n            );\n            return $cell;\n        }\n\n        $wkbval = $this->_handleNonPrintableContents(\n            self::BINARY_FIELD, $column, $transformation_plugin,\n            $transform_options, $default_function, $meta,\n            $_url_params\n        );\n\n        $cell = $this->_buildValueDisplay(\n            $class, $condition_field, $wkbval\n        );\n\n        return $cell;\n\n    } // end of the '_getDataCellForGeometryColumns()' function\n\n\n    /**\n     * Get data cell for non numeric type fields\n     *\n     * @param string        $column                the relevant column in data row\n     * @param string        $class                 the html class for column\n     * @param object        $meta                  the meta-information about\n     *                                             the field\n     * @param array         $map                   the list of relations\n     * @param array         $_url_params           the parameters for generate\n     *                                             url\n     * @param boolean       $condition_field       the column should highlighted\n     *                                             or not\n     * @param object|string $transformation_plugin the name of transformation\n     *                                             function\n     * @param string        $default_function      the default transformation\n     *                                             function\n     * @param string        $transform_options     the transformation parameters\n     * @param boolean       $is_field_truncated    is data truncated due to\n     *                                             LimitChars\n     * @param array         $analyzed_sql_results  the analyzed query\n     * @param integer       &$dt_result            the link id associated to\n     *                                             the query which results\n     *                                             have to be displayed\n     * @param integer       $col_index             the column index\n     *\n     * @return  string  $cell the prepared data cell, html content\n     *\n     * @access  private\n     *\n     * @see     _getTableBody()\n     */\n    private function _getDataCellForNonNumericColumns(\n        $column, $class, $meta, $map, $_url_params, $condition_field,\n        $transformation_plugin, $default_function, $transform_options,\n        $is_field_truncated, $analyzed_sql_results, &$dt_result, $col_index\n    ) {\n        $original_length = 0;\n\n        $is_analyse = $this->__get('is_analyse');\n        $field_flags = $GLOBALS['dbi']->fieldFlags($dt_result, $col_index);\n\n        $bIsText = gettype($transformation_plugin) === 'object'\n            && strpos($transformation_plugin->getMIMEtype(), 'Text')\n            === false;\n\n        // disable inline grid editing\n        // if binary fields are protected\n        // or transformation plugin is of non text type\n        // such as image\n        if ((stristr($field_flags, self::BINARY_FIELD)\n            && ($GLOBALS['cfg']['ProtectBinary'] === 'all'\n            || ($GLOBALS['cfg']['ProtectBinary'] === 'noblob'\n            && !stristr($meta->type, self::BLOB_FIELD))\n            || ($GLOBALS['cfg']['ProtectBinary'] === 'blob'\n            && stristr($meta->type, self::BLOB_FIELD))))\n            || $bIsText\n        ) {\n            $class = str_replace('grid_edit', '', $class);\n        }\n\n        if (! isset($column) || is_null($column)) {\n            $cell = $this->_buildNullDisplay($class, $condition_field, $meta);\n            return $cell;\n        }\n\n        if ($column == '') {\n            $cell = $this->_buildEmptyDisplay($class, $condition_field, $meta);\n            return $cell;\n        }\n\n        // Cut all fields to $GLOBALS['cfg']['LimitChars']\n        // (unless it's a link-type transformation or binary)\n        if (!(gettype($transformation_plugin) === \"object\"\n            && strpos($transformation_plugin->getName(), 'Link') !== false)\n            && !stristr($field_flags, self::BINARY_FIELD)\n        ) {\n            list(\n                $is_field_truncated,\n                $column,\n                $original_length\n            ) = $this->_getPartialText($column);\n        }\n\n        $formatted = false;\n        if (isset($meta->_type) && $meta->_type === MYSQLI_TYPE_BIT) {\n\n            $column = Util::printableBitValue(\n                $column, $meta->length\n            );\n\n            // some results of PROCEDURE ANALYSE() are reported as\n            // being BINARY but they are quite readable,\n            // so don't treat them as BINARY\n        } elseif (stristr($field_flags, self::BINARY_FIELD)\n            && !(isset($is_analyse) && $is_analyse)\n        ) {\n            // we show the BINARY or BLOB message and field's size\n            // (or maybe use a transformation)\n            $binary_or_blob = self::BLOB_FIELD;\n            if ($meta->type === self::STRING_FIELD) {\n                $binary_or_blob = self::BINARY_FIELD;\n            }\n            $column = $this->_handleNonPrintableContents(\n                $binary_or_blob, $column, $transformation_plugin,\n                $transform_options, $default_function,\n                $meta, $_url_params, $is_field_truncated\n            );\n            $class = $this->_addClass(\n                $class, $condition_field, $meta, '',\n                $is_field_truncated, $transformation_plugin, $default_function\n            );\n            $result = strip_tags($column);\n            // disable inline grid editing\n            // if binary or blob data is not shown\n            if (stristr($result, $binary_or_blob)) {\n                $class = str_replace('grid_edit', '', $class);\n            }\n            $formatted = true;\n        }\n\n        if ($formatted) {\n            $cell = $this->_buildValueDisplay(\n                $class, $condition_field, $column\n            );\n            return $cell;\n        }\n\n        // transform functions may enable no-wrapping:\n        $function_nowrap = 'applyTransformationNoWrap';\n\n        $bool_nowrap = (($default_function != $transformation_plugin)\n            && function_exists($transformation_plugin->$function_nowrap()))\n            ? $transformation_plugin->$function_nowrap($transform_options)\n            : false;\n\n        // do not wrap if date field type\n        $nowrap = (preg_match('@DATE|TIME@i', $meta->type)\n            || $bool_nowrap) ? ' nowrap' : '';\n\n        $where_comparison = ' = \\''\n            . Util::sqlAddSlashes($column)\n            . '\\'';\n\n        $cell = $this->_getRowData(\n            $class, $condition_field,\n            $analyzed_sql_results, $meta, $map, $column,\n            $transformation_plugin, $default_function, $nowrap,\n            $where_comparison, $transform_options,\n            $is_field_truncated, $original_length\n        );\n\n        return $cell;\n\n    } // end of the '_getDataCellForNonNumericColumns()' function\n\n    /**\n     * Checks the posted options for viewing query results\n     * and sets appropriate values in the session.\n     *\n     * @todo    make maximum remembered queries configurable\n     * @todo    move/split into SQL class!?\n     * @todo    currently this is called twice unnecessary\n     * @todo    ignore LIMIT and ORDER in query!?\n     *\n     * @return void\n     *\n     * @access  public\n     *\n     * @see     sql.php file\n     */\n    public function setConfigParamsForDisplayTable()\n    {\n\n        $sql_md5 = md5($this->__get('sql_query'));\n        $query = array();\n        if (isset($_SESSION['tmpval']['query'][$sql_md5])) {\n            $query = $_SESSION['tmpval']['query'][$sql_md5];\n        }\n\n        $query['sql'] = $this->__get('sql_query');\n\n        if (empty($query['repeat_cells'])) {\n            $query['repeat_cells'] = $GLOBALS['cfg']['RepeatCells'];\n        }\n\n        // as this is a form value, the type is always string so we cannot\n        // use PMA_isValid($_REQUEST['session_max_rows'], 'integer')\n        if (PMA_isValid($_REQUEST['session_max_rows'], 'numeric')) {\n            $query['max_rows'] = (int)$_REQUEST['session_max_rows'];\n            unset($_REQUEST['session_max_rows']);\n        } elseif ($_REQUEST['session_max_rows'] == self::ALL_ROWS) {\n            $query['max_rows'] = self::ALL_ROWS;\n            unset($_REQUEST['session_max_rows']);\n        } elseif (empty($query['max_rows'])) {\n            $query['max_rows'] = $GLOBALS['cfg']['MaxRows'];\n        }\n\n        if (PMA_isValid($_REQUEST['pos'], 'numeric')) {\n            $query['pos'] = $_REQUEST['pos'];\n            unset($_REQUEST['pos']);\n        } elseif (empty($query['pos'])) {\n            $query['pos'] = 0;\n        }\n\n        if (PMA_isValid(\n            $_REQUEST['pftext'],\n            array(\n                self::DISPLAY_PARTIAL_TEXT, self::DISPLAY_FULL_TEXT\n            )\n        )\n        ) {\n            $query['pftext'] = $_REQUEST['pftext'];\n            unset($_REQUEST['pftext']);\n        } elseif (empty($query['pftext'])) {\n            $query['pftext'] = self::DISPLAY_PARTIAL_TEXT;\n        }\n\n        if (PMA_isValid(\n            $_REQUEST['relational_display'],\n            array(\n                self::RELATIONAL_KEY, self::RELATIONAL_DISPLAY_COLUMN\n            )\n        )\n        ) {\n            $query['relational_display'] = $_REQUEST['relational_display'];\n            unset($_REQUEST['relational_display']);\n        } elseif (empty($query['relational_display'])) {\n            // The current session value has priority over a\n            // change via Settings; this change will be apparent\n            // starting from the next session\n            $query['relational_display'] = $GLOBALS['cfg']['RelationalDisplay'];\n        }\n\n        if (PMA_isValid(\n            $_REQUEST['geoOption'],\n            array(\n                self::GEOMETRY_DISP_WKT, self::GEOMETRY_DISP_WKB,\n                self::GEOMETRY_DISP_GEOM\n            )\n        )\n        ) {\n            $query['geoOption'] = $_REQUEST['geoOption'];\n            unset($_REQUEST['geoOption']);\n        } elseif (empty($query['geoOption'])) {\n            $query['geoOption'] = self::GEOMETRY_DISP_GEOM;\n        }\n\n        if (isset($_REQUEST['display_binary'])) {\n            $query['display_binary'] = true;\n            unset($_REQUEST['display_binary']);\n        } elseif (isset($_REQUEST['display_options_form'])) {\n            // we know that the checkbox was unchecked\n            unset($query['display_binary']);\n        } elseif (isset($_REQUEST['full_text_button'])) {\n            // do nothing to keep the value that is there in the session\n        } else {\n            // selected by default because some operations like OPTIMIZE TABLE\n            // and all queries involving functions return \"binary\" contents,\n            // according to low-level field flags\n            $query['display_binary'] = true;\n        }\n\n        if (isset($_REQUEST['display_blob'])) {\n            $query['display_blob'] = true;\n            unset($_REQUEST['display_blob']);\n        } elseif (isset($_REQUEST['display_options_form'])) {\n            // we know that the checkbox was unchecked\n            unset($query['display_blob']);\n        }\n\n        if (isset($_REQUEST['hide_transformation'])) {\n            $query['hide_transformation'] = true;\n            unset($_REQUEST['hide_transformation']);\n        } elseif (isset($_REQUEST['display_options_form'])) {\n            // we know that the checkbox was unchecked\n            unset($query['hide_transformation']);\n        }\n\n        // move current query to the last position, to be removed last\n        // so only least executed query will be removed if maximum remembered\n        // queries limit is reached\n        unset($_SESSION['tmpval']['query'][$sql_md5]);\n        $_SESSION['tmpval']['query'][$sql_md5] = $query;\n\n        // do not exceed a maximum number of queries to remember\n        if (count($_SESSION['tmpval']['query']) > 10) {\n            array_shift($_SESSION['tmpval']['query']);\n            //echo 'deleting one element ...';\n        }\n\n        // populate query configuration\n        $_SESSION['tmpval']['pftext']\n            = $query['pftext'];\n        $_SESSION['tmpval']['relational_display']\n            = $query['relational_display'];\n        $_SESSION['tmpval']['geoOption']\n            = $query['geoOption'];\n        $_SESSION['tmpval']['display_binary'] = isset(\n            $query['display_binary']\n        );\n        $_SESSION['tmpval']['display_blob'] = isset(\n            $query['display_blob']\n        );\n        $_SESSION['tmpval']['hide_transformation'] = isset(\n            $query['hide_transformation']\n        );\n        $_SESSION['tmpval']['pos']\n            = $query['pos'];\n        $_SESSION['tmpval']['max_rows']\n            = $query['max_rows'];\n        $_SESSION['tmpval']['repeat_cells']\n            = $query['repeat_cells'];\n    }\n\n    /**\n     * Prepare a table of results returned by a SQL query.\n     *\n     * @param integer &$dt_result           the link id associated to the query\n     *                                      which results have to be displayed\n     * @param array   &$displayParts        the parts to display\n     * @param array   $analyzed_sql_results analyzed sql results\n     * @param boolean $is_limited_display   With limited operations or not\n     *\n     * @return  string   $table_html   Generated HTML content for resulted table\n     *\n     * @access  public\n     *\n     * @see     sql.php file\n     */\n    public function getTable(\n        &$dt_result, &$displayParts, $analyzed_sql_results,\n        $is_limited_display = false\n    ) {\n\n        /**\n         * The statement this table is built for.\n         * @var \\SqlParser\\Statements\\SelectStatement\n         */\n        $statement = $analyzed_sql_results['statement'];\n\n        $table_html = '';\n        // Following variable are needed for use in isset/empty or\n        // use with array indexes/safe use in foreach\n        $fields_meta = $this->__get('fields_meta');\n        $showtable = $this->__get('showtable');\n        $printview = $this->__get('printview');\n\n        // why was this called here? (already called from sql.php)\n        //$this->setConfigParamsForDisplayTable();\n\n        /**\n         * @todo move this to a central place\n         * @todo for other future table types\n         */\n        $is_innodb = (isset($showtable['Type'])\n            && $showtable['Type'] == self::TABLE_TYPE_INNO_DB);\n\n        if ($is_innodb\n            && PMA_isJustBrowsing($analyzed_sql_results, true)\n        ) {\n            // \"j u s t   b r o w s i n g\"\n            $pre_count = '~';\n            $after_count = Util::showHint(\n                PMA_sanitize(\n                    __('May be approximate. See [doc@faq3-11]FAQ 3.11[/doc].')\n                )\n            );\n        } else {\n            $pre_count = '';\n            $after_count = '';\n        }\n\n        // 1. ----- Prepares the work -----\n\n        // 1.1 Gets the information about which functionalities should be\n        //     displayed\n\n        list(\n            $displayParts,\n            $total\n        )  = $this->_setDisplayPartsAndTotal($displayParts);\n\n        // 1.2 Defines offsets for the next and previous pages\n        if ($displayParts['nav_bar'] == '1') {\n            list($pos_next, $pos_prev) = $this->_getOffsets();\n        } // end if\n\n        // 1.3 Extract sorting expressions.\n        //     we need $sort_expression and $sort_expression_nodirection\n        //     even if there are many table references\n        $sort_expression = array();\n        $sort_expression_nodirection = array();\n        $sort_direction = array();\n\n        if (!empty($statement->order)) {\n            foreach ($statement->order as $o) {\n                $sort_expression[] = $o->expr->expr . ' ' . $o->type;\n                $sort_expression_nodirection[] = $o->expr->expr;\n                $sort_direction[] = $o->type;\n            }\n        } else {\n            $sort_expression[] = '';\n            $sort_expression_nodirection[] = '';\n            $sort_direction[] = '';\n        }\n\n        $number_of_columns = count($sort_expression_nodirection);\n\n        // 1.4 Prepares display of first and last value of the sorted column\n        $sorted_column_message = '';\n        for ( $i = 0; $i < $number_of_columns; $i++ ) {\n            $sorted_column_message .= $this->_getSortedColumnMessage(\n                $dt_result, $sort_expression_nodirection[$i]\n            );\n        }\n\n        // 2. ----- Prepare to display the top of the page -----\n\n        // 2.1 Prepares a messages with position information\n        if (($displayParts['nav_bar'] == '1') && isset($pos_next)) {\n\n            $message = $this->_setMessageInformation(\n                $sorted_column_message,\n                $analyzed_sql_results,\n                $total,\n                $pos_next,\n                $pre_count,\n                $after_count\n            );\n\n            $table_html .= Util::getMessage(\n                $message, $this->__get('sql_query'), 'success'\n            );\n\n        } elseif ((!isset($printview) || ($printview != '1')) && !$is_limited_display) {\n\n            $table_html .= Util::getMessage(\n                __('Your SQL query has been executed successfully.'),\n                $this->__get('sql_query'), 'success'\n            );\n        }\n\n        // 2.3 Prepare the navigation bars\n        if (!mb_strlen($this->__get('table'))) {\n\n            if ($analyzed_sql_results['querytype'] == 'SELECT') {\n                // table does not always contain a real table name,\n                // for example in MySQL 5.0.x, the query SHOW STATUS\n                // returns STATUS as a table name\n                $this->__set('table', $fields_meta[0]->table);\n            } else {\n                $this->__set('table', '');\n            }\n\n        }\n\n        // can the result be sorted?\n        if ($displayParts['sort_lnk'] == '1') {\n\n            // At this point, $sort_expression is an array but we only verify\n            // the first element in case we could find that the table is\n            // sorted by one of the choices listed in the\n            // \"Sort by key\" drop-down\n            list($unsorted_sql_query, $sort_by_key_html)\n                = $this->_getUnsortedSqlAndSortByKeyDropDown(\n                    $analyzed_sql_results, $sort_expression[0]\n                );\n\n        } else {\n            $sort_by_key_html = $unsorted_sql_query = '';\n        }\n\n        if (($displayParts['nav_bar'] == '1') && (empty($statement->limit))) {\n            $table_html .= $this->_getPlacedTableNavigations(\n                $pos_next, $pos_prev, self::PLACE_TOP_DIRECTION_DROPDOWN,\n                $is_innodb, $sort_by_key_html\n            );\n        }\n\n        // 2b ----- Get field references from Database -----\n        // (see the 'relation' configuration variable)\n\n        // initialize map\n        $map = array();\n\n        $target = array();\n        if (!empty($statement->from)) {\n            foreach ($statement->from as $field) {\n                if (!empty($field->table)) {\n                    $target[] = $field->table;\n                }\n            }\n        }\n\n        if (mb_strlen($this->__get('table'))) {\n            // This method set the values for $map array\n            $this->_setParamForLinkForeignKeyRelatedTables($map);\n\n            // Coming from 'Distinct values' action of structure page\n            // We manipulate relations mechanism to show a link to related rows.\n            if ($this->__get('is_browse_distinct')) {\n                $map[$fields_meta[1]->name] = array(\n                    $this->__get('table'),\n                    $fields_meta[1]->name,\n                    '',\n                    $this->__get('db')\n                );\n            }\n        } // end if\n        // end 2b\n\n        // 3. ----- Prepare the results table -----\n        if ($is_limited_display) {\n            $table_html .= \"<br>\";\n        }\n\n        $table_html .= $this->_getTableHeaders(\n            $displayParts,\n            $analyzed_sql_results,\n            $unsorted_sql_query,\n            $sort_expression,\n            $sort_expression_nodirection,\n            $sort_direction,\n            $is_limited_display\n        );\n\n        $table_html .= '<tbody>' . \"\\n\";\n\n        $table_html .= $this->_getTableBody(\n            $dt_result,\n            $displayParts,\n            $map,\n            $analyzed_sql_results,\n            $is_limited_display\n        );\n\n        $this->__set('display_params', null);\n\n        $table_html .= '</tbody>' . \"\\n\" . '</table>';\n\n        // 4. ----- Prepares the link for multi-fields edit and delete\n\n        if ($displayParts['del_lnk'] == self::DELETE_ROW\n            && $displayParts['del_lnk'] != self::KILL_PROCESS\n        ) {\n\n            $table_html .= $this->_getMultiRowOperationLinks(\n                $dt_result,\n                $analyzed_sql_results,\n                $displayParts['del_lnk']\n            );\n\n        }\n\n        // 5. ----- Get the navigation bar at the bottom if required -----\n        if (($displayParts['nav_bar'] == '1') && empty($statement->limit)) {\n            $table_html .= $this->_getPlacedTableNavigations(\n                $pos_next, $pos_prev, self::PLACE_BOTTOM_DIRECTION_DROPDOWN,\n                $is_innodb, $sort_by_key_html\n            );\n        } elseif (! isset($printview) || ($printview != '1')) {\n            $table_html .= \"\\n\" . '<br /><br />' . \"\\n\";\n        }\n\n        // 6. ----- Prepare \"Query results operations\"\n        if ((! isset($printview) || ($printview != '1')) && ! $is_limited_display) {\n            $table_html .= $this->_getResultsOperations(\n                $displayParts, $analyzed_sql_results\n            );\n        }\n\n        return $table_html;\n\n    } // end of the 'getTable()' function\n\n\n    /**\n     * Get offsets for next page and previous page\n     *\n     * @return  array           array with two elements - $pos_next, $pos_prev\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getOffsets()\n    {\n\n        if ($_SESSION['tmpval']['max_rows'] == self::ALL_ROWS) {\n            $pos_next     = 0;\n            $pos_prev     = 0;\n        } else {\n\n            $pos_next     = $_SESSION['tmpval']['pos']\n                            + $_SESSION['tmpval']['max_rows'];\n\n            $pos_prev     = $_SESSION['tmpval']['pos']\n                            - $_SESSION['tmpval']['max_rows'];\n\n            if ($pos_prev < 0) {\n                $pos_prev = 0;\n            }\n        }\n\n        return array($pos_next, $pos_prev);\n\n    } // end of the '_getOffsets()' function\n\n\n    /**\n     * Prepare sorted column message\n     *\n     * @param integer &$dt_result                  the link id associated to the\n     *                                              query which results have to\n     *                                              be displayed\n     * @param string  $sort_expression_nodirection sort expression without direction\n     *\n     * @return  string                              html content\n     *          null                                if not found sorted column\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getSortedColumnMessage(\n        &$dt_result, $sort_expression_nodirection\n    ) {\n\n        $fields_meta = $this->__get('fields_meta'); // To use array indexes\n\n        if (empty($sort_expression_nodirection)) {\n            return null;\n        }\n\n        if (mb_strpos($sort_expression_nodirection, '.') === false) {\n            $sort_table = $this->__get('table');\n            $sort_column = $sort_expression_nodirection;\n        } else {\n            list($sort_table, $sort_column)\n                = explode('.', $sort_expression_nodirection);\n        }\n\n        $sort_table = Util::unQuote($sort_table);\n        $sort_column = Util::unQuote($sort_column);\n\n        // find the sorted column index in row result\n        // (this might be a multi-table query)\n        $sorted_column_index = false;\n\n        foreach ($fields_meta as $key => $meta) {\n            if (($meta->table == $sort_table) && ($meta->name == $sort_column)) {\n                $sorted_column_index = $key;\n                break;\n            }\n        }\n\n        if ($sorted_column_index === false) {\n            return null;\n        }\n\n        // fetch first row of the result set\n        $row = $GLOBALS['dbi']->fetchRow($dt_result);\n\n        // initializing default arguments\n        $default_function = 'PMA_mimeDefaultFunction';\n        $transformation_plugin = $default_function;\n        $transform_options = array();\n\n        // check for non printable sorted row data\n        $meta = $fields_meta[$sorted_column_index];\n\n        if (stristr($meta->type, self::BLOB_FIELD)\n            || ($meta->type == self::GEOMETRY_FIELD)\n        ) {\n\n            $column_for_first_row = $this->_handleNonPrintableContents(\n                $meta->type, $row[$sorted_column_index],\n                $transformation_plugin, $transform_options,\n                $default_function, $meta\n            );\n\n        } else {\n            $column_for_first_row = $row[$sorted_column_index];\n        }\n\n        $column_for_first_row = mb_strtoupper(\n            mb_substr(\n                $column_for_first_row, 0, $GLOBALS['cfg']['LimitChars']\n            ) . '...'\n        );\n\n        // fetch last row of the result set\n        $GLOBALS['dbi']->dataSeek($dt_result, $this->__get('num_rows') - 1);\n        $row = $GLOBALS['dbi']->fetchRow($dt_result);\n\n        // check for non printable sorted row data\n        $meta = $fields_meta[$sorted_column_index];\n        if (stristr($meta->type, self::BLOB_FIELD)\n            || ($meta->type == self::GEOMETRY_FIELD)\n        ) {\n\n            $column_for_last_row = $this->_handleNonPrintableContents(\n                $meta->type, $row[$sorted_column_index],\n                $transformation_plugin, $transform_options,\n                $default_function, $meta\n            );\n\n        } else {\n            $column_for_last_row = $row[$sorted_column_index];\n        }\n\n        $column_for_last_row = mb_strtoupper(\n            mb_substr(\n                $column_for_last_row, 0, $GLOBALS['cfg']['LimitChars']\n            ) . '...'\n        );\n\n        // reset to first row for the loop in _getTableBody()\n        $GLOBALS['dbi']->dataSeek($dt_result, 0);\n\n        // we could also use here $sort_expression_nodirection\n        return ' [' . htmlspecialchars($sort_column)\n            . ': <strong>' . htmlspecialchars($column_for_first_row) . ' - '\n            . htmlspecialchars($column_for_last_row) . '</strong>]';\n    } // end of the '_getSortedColumnMessage()' function\n\n\n    /**\n     * Set the content that needs to be shown in message\n     *\n     * @param string  $sorted_column_message the message for sorted column\n     * @param array   $analyzed_sql_results  the analyzed query\n     * @param integer $total                 the total number of rows returned by\n     *                                       the SQL query without any\n     *                                       programmatically appended LIMIT clause\n     * @param integer $pos_next              the offset for next page\n     * @param string  $pre_count             the string renders before row count\n     * @param string  $after_count           the string renders after row count\n     *\n     * @return Message $message an object of Message\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _setMessageInformation(\n        $sorted_column_message, $analyzed_sql_results, $total,\n        $pos_next, $pre_count, $after_count\n    ) {\n\n        $unlim_num_rows = $this->__get('unlim_num_rows'); // To use in isset()\n\n        if (!empty($analyzed_sql_results['statement']->limit)) {\n\n            $first_shown_rec = $analyzed_sql_results['statement']->limit->offset;\n            $row_count = $analyzed_sql_results['statement']->limit->rowCount;\n\n            if ($row_count < $total) {\n                $last_shown_rec = $first_shown_rec + $row_count - 1;\n            } else {\n                $last_shown_rec = $first_shown_rec + $total - 1;\n            }\n\n        } elseif (($_SESSION['tmpval']['max_rows'] == self::ALL_ROWS)\n            || ($pos_next > $total)\n        ) {\n\n            $first_shown_rec = $_SESSION['tmpval']['pos'];\n            $last_shown_rec  = $total - 1;\n\n        } else {\n\n            $first_shown_rec = $_SESSION['tmpval']['pos'];\n            $last_shown_rec  = $pos_next - 1;\n\n        }\n\n        $table = new Table($this->__get('table'), $this->__get('db'));\n        if ($table->isView()\n            && ($total == $GLOBALS['cfg']['MaxExactCountViews'])\n        ) {\n\n            $message = Message::notice(\n                __(\n                    'This view has at least this number of rows. '\n                    . 'Please refer to %sdocumentation%s.'\n                )\n            );\n\n            $message->addParam('[doc@cfg_MaxExactCount]');\n            $message->addParam('[/doc]');\n            $message_view_warning = Util::showHint($message);\n\n        } else {\n            $message_view_warning = false;\n        }\n\n        $message = Message::success(__('Showing rows %1s - %2s'));\n        $message->addParam($first_shown_rec);\n\n        if ($message_view_warning !== false) {\n            $message->addParam('... ' . $message_view_warning, false);\n        } else {\n            $message->addParam($last_shown_rec);\n        }\n\n        $message->addMessage('(');\n\n        if ($message_view_warning === false) {\n\n            if (isset($unlim_num_rows) && ($unlim_num_rows != $total)) {\n                $message_total = Message::notice(\n                    $pre_count . __('%1$d total, %2$d in query')\n                );\n                $message_total->addParam($total);\n                $message_total->addParam($unlim_num_rows);\n            } else {\n                $message_total = Message::notice($pre_count . __('%d total'));\n                $message_total->addParam($total);\n            }\n\n            if (!empty($after_count)) {\n                $message_total->addMessage($after_count);\n            }\n            $message->addMessage($message_total, '');\n\n            $message->addMessage(', ', '');\n        }\n\n        $message_qt = Message::notice(__('Query took %01.4f seconds.') . ')');\n        $message_qt->addParam($this->__get('querytime'));\n\n        $message->addMessage($message_qt, '');\n        if (! is_null($sorted_column_message)) {\n            $message->addMessage($sorted_column_message, '');\n        }\n\n        return $message;\n\n    } // end of the '_setMessageInformation()' function\n\n\n    /**\n     * Set the value of $map array for linking foreign key related tables\n     *\n     * @param array &$map the list of relations\n     *\n     * @return  void\n     *\n     * @access  private\n     *\n     * @see      getTable()\n     */\n    private function _setParamForLinkForeignKeyRelatedTables(&$map)\n    {\n\n        // To be able to later display a link to the related table,\n        // we verify both types of relations: either those that are\n        // native foreign keys or those defined in the phpMyAdmin\n        // configuration storage. If no PMA storage, we won't be able\n        // to use the \"column to display\" notion (for example show\n        // the name related to a numeric id).\n        $exist_rel = PMA_getForeigners(\n            $this->__get('db'), $this->__get('table'), '', self::POSITION_BOTH\n        );\n\n        if (! empty($exist_rel)) {\n\n            foreach ($exist_rel as $master_field => $rel) {\n                if ($master_field != 'foreign_keys_data') {\n                    $display_field = PMA_getDisplayField(\n                        $rel['foreign_db'], $rel['foreign_table']\n                    );\n                    $map[$master_field] = array(\n                        $rel['foreign_table'],\n                        $rel['foreign_field'],\n                        $display_field,\n                        $rel['foreign_db']\n                    );\n                } else {\n                    foreach ($rel as $key => $one_key) {\n                        foreach ($one_key['index_list'] as $index => $one_field) {\n                            $display_field = PMA_getDisplayField(\n                                isset($one_key['ref_db_name'])\n                                ? $one_key['ref_db_name']\n                                : $GLOBALS['db'],\n                                $one_key['ref_table_name']\n                            );\n\n                            $map[$one_field] = array(\n                                $one_key['ref_table_name'],\n                                $one_key['ref_index_list'][$index],\n                                $display_field,\n                                isset($one_key['ref_db_name'])\n                                ? $one_key['ref_db_name']\n                                : $GLOBALS['db']\n                            );\n                        }\n                    }\n                }\n            } // end while\n        } // end if\n\n    } // end of the '_setParamForLinkForeignKeyRelatedTables()' function\n\n\n    /**\n     * Prepare multi field edit/delete links\n     *\n     * @param integer &$dt_result           the link id associated to the query which\n     *                                      results have to be displayed\n     * @param array   $analyzed_sql_results analyzed sql results\n     * @param string  $del_link             the display element - 'del_link'\n     *\n     * @return string $links_html html content\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getMultiRowOperationLinks(\n        &$dt_result, $analyzed_sql_results, $del_link\n    ) {\n\n        $links_html = '<div class=\"print_ignore\" >';\n        $url_query = $this->__get('url_query');\n        $delete_text = ($del_link == self::DELETE_ROW) ? __('Delete') : __('Kill');\n\n        $links_html .= '<img class=\"selectallarrow\" width=\"38\" height=\"22\"'\n            . ' src=\"' . $this->__get('pma_theme_image') . 'arrow_'\n            . $this->__get('text_dir') . '.png' . '\"'\n            . ' alt=\"' . __('With selected:') . '\" />';\n\n        $links_html .= '<input type=\"checkbox\" '\n            . 'id=\"resultsForm_' . $this->__get('unique_id') . '_checkall\" '\n            . 'class=\"checkall_box\" title=\"' . __('Check all') . '\" /> '\n            . '<label for=\"resultsForm_' . $this->__get('unique_id') . '_checkall\">'\n            . __('Check all') . '</label> '\n            . '<i style=\"margin-left: 2em\">' . __('With selected:') . '</i>' . \"\\n\";\n\n        $links_html .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_change',\n            __('Edit'), 'b_edit.png', 'edit'\n        );\n\n        $links_html .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_copy',\n            __('Copy'), 'b_insrow.png', 'copy'\n        );\n\n        $links_html .= Util::getButtonOrImage(\n            'submit_mult', 'mult_submit', 'submit_mult_delete',\n            $delete_text, 'b_drop.png', 'delete'\n        );\n\n        if ($analyzed_sql_results['querytype'] == 'SELECT') {\n            $links_html .= Util::getButtonOrImage(\n                'submit_mult', 'mult_submit', 'submit_mult_export',\n                __('Export'), 'b_tblexport.png', 'export'\n            );\n        }\n\n        $links_html .= \"</div>\\n\";\n\n        $links_html .= '<input type=\"hidden\" name=\"sql_query\"'\n            . ' value=\"' . htmlspecialchars($this->__get('sql_query')) . '\" />'\n            . \"\\n\";\n\n        if (! empty($url_query)) {\n            $links_html .= '<input type=\"hidden\" name=\"url_query\"'\n                . ' value=\"' . $url_query . '\" />' . \"\\n\";\n        }\n\n        // fetch last row of the result set\n        $GLOBALS['dbi']->dataSeek($dt_result, $this->__get('num_rows') - 1);\n        $row = $GLOBALS['dbi']->fetchRow($dt_result);\n\n        // $clause_is_unique is needed by getTable() to generate the proper param\n        // in the multi-edit and multi-delete form\n        list($where_clause, $clause_is_unique, $condition_array)\n            = Util::getUniqueCondition(\n                $dt_result, // handle\n                $this->__get('fields_cnt'), // fields_cnt\n                $this->__get('fields_meta'), // fields_meta\n                $row, // row\n                false, // force_unique\n                false, // restrict_to_table\n                $analyzed_sql_results // analyzed_sql_results\n            );\n        unset($where_clause, $condition_array);\n\n        // reset to first row for the loop in _getTableBody()\n        $GLOBALS['dbi']->dataSeek($dt_result, 0);\n\n        $links_html .= '<input type=\"hidden\" name=\"clause_is_unique\"'\n            . ' value=\"' . $clause_is_unique . '\" />' . \"\\n\";\n\n        $links_html .= '</form>' . \"\\n\";\n\n        return $links_html;\n\n    } // end of the '_getMultiRowOperationLinks()' function\n\n\n    /**\n     * Prepare table navigation bar at the top or bottom\n     *\n     * @param integer $pos_next         the offset for the \"next\" page\n     * @param integer $pos_prev         the offset for the \"previous\" page\n     * @param string  $place            the place to show navigation\n     * @param boolean $is_innodb        whether its InnoDB or not\n     * @param string  $sort_by_key_html the sort by key dialog\n     *\n     * @return  string  html content of navigation bar\n     *\n     * @access  private\n     *\n     * @see     _getTable()\n     */\n    private function _getPlacedTableNavigations(\n        $pos_next, $pos_prev, $place, $is_innodb, $sort_by_key_html\n    ) {\n\n        $navigation_html = '';\n\n        if ($place == self::PLACE_BOTTOM_DIRECTION_DROPDOWN) {\n            $navigation_html .= '<br />' . \"\\n\";\n        }\n\n        $navigation_html .= $this->_getTableNavigation(\n            $pos_next, $pos_prev, $is_innodb, $sort_by_key_html\n        );\n\n        if ($place == self::PLACE_TOP_DIRECTION_DROPDOWN) {\n            $navigation_html .= \"\\n\";\n        }\n\n        return $navigation_html;\n\n    } // end of the '_getPlacedTableNavigations()' function\n\n    /**\n     * Generates HTML to display the Create view in span tag\n     *\n     * @param array  $analyzed_sql_results analyzed sql results\n     * @param string $url_query            String with URL Parameters\n     *\n     * @return string\n     *\n     * @access private\n     *\n     * @see _getResultsOperations()\n     */\n    private function _getLinkForCreateView($analyzed_sql_results, $url_query)\n    {\n        $results_operations_html = '';\n        if (empty($analyzed_sql_results['procedure'])) {\n\n            $ajax_class = ' ajax';\n\n            $results_operations_html .= '<span>'\n                . Util::linkOrButton(\n                    'view_create.php' . $url_query,\n                    Util::getIcon(\n                        'b_view_add.png', __('Create view'), true\n                    ),\n                    array('class' => 'create_view' . $ajax_class), true, true, ''\n                )\n                . '</span>' . \"\\n\";\n        }\n        return $results_operations_html;\n\n    }\n\n    /**\n     * Calls the _getResultsOperations with $only_view as true\n     *\n     * @param array $analyzed_sql_results analyzed sql results\n     *\n     * @return string\n     *\n     * @access public\n     *\n     */\n    public function getCreateViewQueryResultOp($analyzed_sql_results)\n    {\n\n        $results_operations_html = '';\n        //calling to _getResultOperations with a fake $displayParts\n        //and setting only_view parameter to be true to generate just view\n        $results_operations_html .= $this->_getResultsOperations(\n            array(),\n            $analyzed_sql_results,\n            true\n        );\n        return $results_operations_html;\n    }\n\n    /**\n     * Get copy to clipboard links for results operations\n     *\n     * @return string $html\n     *\n     * @access  private\n     */\n    private function _getCopytoclipboardLinks()\n    {\n        $html = Util::linkOrButton(\n            '#',\n            Util::getIcon(\n                'b_insrow.png', __('Copy to clipboard'), true\n            ),\n            array('id' => 'copyToClipBoard'),\n            true,\n            true,\n            'copy_to_clip_board'\n        );\n\n        return $html;\n    }\n\n    /**\n     * Get printview links for results operations\n     *\n     * @return string $html\n     *\n     * @access  private\n     */\n    private function _getPrintviewLinks()\n    {\n        $html = Util::linkOrButton(\n            '#',\n            Util::getIcon(\n                'b_print.png', __('Print'), true\n            ),\n            array('id' => 'printView'),\n            true,\n            true,\n            'print_view'\n        );\n\n        return $html;\n    }\n\n    /**\n     * Get operations that are available on results.\n     *\n     * @param array   $displayParts         the parts to display\n     * @param array   $analyzed_sql_results analyzed sql results\n     * @param boolean $only_view            Whether to show only view\n     *\n     * @return string $results_operations_html  html content\n     *\n     * @access  private\n     *\n     * @see     getTable()\n     */\n    private function _getResultsOperations(\n        $displayParts, $analyzed_sql_results, $only_view = false\n    ) {\n        global $printview;\n\n        $results_operations_html = '';\n        $fields_meta = $this->__get('fields_meta'); // To safe use in foreach\n        $header_shown = false;\n        $header = '<fieldset class=\"print_ignore\" ><legend>'\n            . __('Query results operations') . '</legend>';\n\n        $_url_params = array(\n                    'db'        => $this->__get('db'),\n                    'table'     => $this->__get('table'),\n                    'printview' => '1',\n                    'sql_query' => $this->__get('sql_query'),\n                );\n        $url_query = PMA_URL_getCommon($_url_params);\n\n        if (!$header_shown) {\n            $results_operations_html .= $header;\n            $header_shown = true;\n        }\n        // if empty result set was produced we need to\n        // show only view and not other options\n        if ($only_view) {\n            $results_operations_html .= $this->_getLinkForCreateView(\n                $analyzed_sql_results, $url_query\n            );\n\n            if ($header_shown) {\n                $results_operations_html .= '</fieldset><br />';\n            }\n            return $results_operations_html;\n        }\n\n        // Displays \"printable view\" link if required\n        if ($displayParts['pview_lnk'] == '1') {\n            $results_operations_html .= $this->_getPrintviewLinks();\n            $results_operations_html .= $this->_getCopytoclipboardLinks();\n        } // end displays \"printable view\"\n\n        // Export link\n        // (the url_query has extra parameters that won't be used to export)\n        // (the single_table parameter is used in PMA_getExportDisplay()\n        //  to hide the SQL and the structure export dialogs)\n        // If the parser found a PROCEDURE clause\n        // (most probably PROCEDURE ANALYSE()) it makes no sense to\n        // display the Export link).\n        if (($analyzed_sql_results['querytype'] == self::QUERY_TYPE_SELECT)\n            && ! isset($printview)\n            && empty($analyzed_sql_results['procedure'])\n        ) {\n\n            if (count($analyzed_sql_results['select_tables']) == 1) {\n                $_url_params['single_table'] = 'true';\n            }\n\n            if (! $header_shown) {\n                $results_operations_html .= $header;\n                $header_shown = true;\n            }\n\n            $_url_params['unlim_num_rows'] = $this->__get('unlim_num_rows');\n\n            /**\n             * At this point we don't know the table name; this can happen\n             * for example with a query like\n             * SELECT bike_code FROM (SELECT bike_code FROM bikes) tmp\n             * As a workaround we set in the table parameter the name of the\n             * first table of this database, so that tbl_export.php and\n             * the script it calls do not fail\n             */\n            if (empty($_url_params['table']) && ! empty($_url_params['db'])) {\n                $_url_params['table'] = $GLOBALS['dbi']->fetchValue(\"SHOW TABLES\");\n                /* No result (probably no database selected) */\n                if ($_url_params['table'] === false) {\n                    unset($_url_params['table']);\n                }\n            }\n\n            $results_operations_html .= Util::linkOrButton(\n                'tbl_export.php' . PMA_URL_getCommon($_url_params),\n                Util::getIcon(\n                    'b_tblexport.png', __('Export'), true\n                ),\n                '',\n                true,\n                true,\n                ''\n            )\n            . \"\\n\";\n\n            // prepare chart\n            $results_operations_html .= Util::linkOrButton(\n                'tbl_chart.php' . PMA_URL_getCommon($_url_params),\n                Util::getIcon(\n                    'b_chart.png', __('Display chart'), true\n                ),\n                '',\n                true,\n                true,\n                ''\n            )\n            . \"\\n\";\n\n            // prepare GIS chart\n            $geometry_found = false;\n            // If at least one geometry field is found\n            foreach ($fields_meta as $meta) {\n                if ($meta->type == self::GEOMETRY_FIELD) {\n                    $geometry_found = true;\n                    break;\n                }\n            }\n\n            if ($geometry_found) {\n                $results_operations_html\n                    .= Util::linkOrButton(\n                        'tbl_gis_visualization.php'\n                        . PMA_URL_getCommon($_url_params),\n                        Util::getIcon(\n                            'b_globe.gif', __('Visualize GIS data'), true\n                        ),\n                        '',\n                        true,\n                        true,\n                        ''\n                    )\n                    . \"\\n\";\n            }\n        }\n\n        // CREATE VIEW\n        /**\n         *\n         * @todo detect privileges to create a view\n         *       (but see 2006-01-19 note in display_create_table.lib.php,\n         *        I think we cannot detect db-specific privileges reliably)\n         * Note: we don't display a Create view link if we found a PROCEDURE clause\n         */\n        if (!$header_shown) {\n            $results_operations_html .= $header;\n            $header_shown = true;\n        }\n\n        $results_operations_html .= $this->_getLinkForCreateView(\n            $analyzed_sql_results, $url_query\n        );\n\n        if ($header_shown) {\n            $results_operations_html .= '</fieldset><br />';\n        }\n\n        return $results_operations_html;\n\n    } // end of the '_getResultsOperations()' function\n\n\n    /**\n     * Verifies what to do with non-printable contents (binary or BLOB)\n     * in Browse mode.\n     *\n     * @param string  $category              BLOB|BINARY|GEOMETRY\n     * @param string  $content               the binary content\n     * @param mixed   $transformation_plugin transformation plugin.\n     *                                       Can also be the default function:\n     *                                       PMA_mimeDefaultFunction\n     * @param string  $transform_options     transformation parameters\n     * @param string  $default_function      default transformation function\n     * @param object  $meta                  the meta-information about the field\n     * @param array   $url_params            parameters that should go to the\n     *                                       download link\n     * @param boolean &$is_truncated         the result is truncated or not\n     *\n     * @return mixed  string or float\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns(),\n     *          _getSortedColumnMessage()\n     */\n    private function _handleNonPrintableContents(\n        $category, $content, $transformation_plugin, $transform_options,\n        $default_function, $meta, $url_params = array(), &$is_truncated = null\n    ) {\n\n        $is_truncated = false;\n        $result = '[' . $category;\n\n        if (isset($content)) {\n\n            $size = mb_strlen($content, '8bit');\n            $display_size = Util::formatByteDown($size, 3, 1);\n            $result .= ' - ' . $display_size[0] . ' ' . $display_size[1];\n\n        } else {\n\n            $result .= ' - NULL';\n            $size = 0;\n\n        }\n\n        $result .= ']';\n\n        // if we want to use a text transformation on a BLOB column\n        if (gettype($transformation_plugin) === \"object\") {\n            $posMimeOctetstream = strpos(\n                $transformation_plugin->getMIMESubtype(),\n                'Octetstream'\n            );\n            $posMimeText = strpos($transformation_plugin->getMIMEtype(), 'Text');\n            if ($posMimeOctetstream\n                || $posMimeText !== false\n            ) {\n                // Applying Transformations on hex string of binary data\n                // seems more appropriate\n                $result = pack(\"H*\", bin2hex($content));\n            }\n        }\n\n        if ($size <= 0) {\n            return($result);\n        }\n\n        if ($default_function != $transformation_plugin) {\n            $result = $transformation_plugin->applyTransformation(\n                $result,\n                $transform_options,\n                $meta\n            );\n            return($result);\n        }\n\n        $result = $default_function($result, array(), $meta);\n        if (($_SESSION['tmpval']['display_binary']\n            && $meta->type === self::STRING_FIELD)\n            || ($_SESSION['tmpval']['display_blob']\n            && stristr($meta->type, self::BLOB_FIELD))\n        ) {\n            // in this case, restart from the original $content\n            if (mb_check_encoding($content, 'utf-8')\n                && !preg_match('/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x80-\\x9F]/u', $content)\n            ) {\n                // show as text if it's valid utf-8\n                $result = htmlspecialchars($content);\n            } else {\n                $result = '0x' . bin2hex($content);\n            }\n            list(\n                $is_truncated,\n                $result,\n                // skip 3rd param\n            ) = $this->_getPartialText($result);\n        }\n\n        /* Create link to download */\n\n        // in PHP < 5.5, empty() only checks variables\n        $tmpdb = $this->__get('db');\n        if (count($url_params) > 0\n            && (!empty($tmpdb) && !empty($meta->orgtable))\n        ) {\n            $result = '<a href=\"tbl_get_field.php'\n                . PMA_URL_getCommon($url_params)\n                . '\" class=\"disableAjax\">'\n                . $result . '</a>';\n        }\n\n        return($result);\n\n    } // end of the '_handleNonPrintableContents()' function\n\n\n    /**\n     * Retrieves the associated foreign key info for a data cell\n     *\n     * @param array  $map              the list of relations\n     * @param object $meta             the meta-information about the field\n     * @param string $where_comparison data for the where clause\n     *\n     * @return string  formatted data\n     *\n     * @access  private\n     *\n     */\n    private function _getFromForeign($map, $meta, $where_comparison)\n    {\n        $dispsql = 'SELECT '\n            . Util::backquote($map[$meta->name][2])\n            . ' FROM '\n            . Util::backquote($map[$meta->name][3])\n            . '.'\n            . Util::backquote($map[$meta->name][0])\n            . ' WHERE '\n            . Util::backquote($map[$meta->name][1])\n            . $where_comparison;\n\n        $dispresult = $GLOBALS['dbi']->tryQuery(\n            $dispsql,\n            null,\n            DatabaseInterface::QUERY_STORE\n        );\n\n        if ($dispresult && $GLOBALS['dbi']->numRows($dispresult) > 0) {\n            list($dispval) = $GLOBALS['dbi']->fetchRow($dispresult, 0);\n        } else {\n            $dispval = __('Link not found!');\n        }\n\n        $GLOBALS['dbi']->freeResult($dispresult);\n\n        return $dispval;\n    }\n\n    /**\n     * Prepares the displayable content of a data cell in Browse mode,\n     * taking into account foreign key description field and transformations\n     *\n     * @param string        $class                 css classes for the td element\n     * @param bool          $condition_field       whether the column is a part of\n     *                                             the where clause\n     * @param array         $analyzed_sql_results  the analyzed query\n     * @param object        $meta                  the meta-information about the\n     *                                             field\n     * @param array         $map                   the list of relations\n     * @param string        $data                  data\n     * @param object|string $transformation_plugin transformation plugin.\n     *                                             Can also be the default function:\n     *                                             PMA_mimeDefaultFunction\n     * @param string        $default_function      default function\n     * @param string        $nowrap                'nowrap' if the content should\n     *                                             not be wrapped\n     * @param string        $where_comparison      data for the where clause\n     * @param array         $transform_options     options for transformation\n     * @param bool          $is_field_truncated    whether the field is truncated\n     * @param string        $original_length       of a truncated column, or ''\n     *\n     * @return string  formatted data\n     *\n     * @access  private\n     *\n     * @see     _getDataCellForNumericColumns(), _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns(),\n     *\n     */\n    private function _getRowData(\n        $class, $condition_field, $analyzed_sql_results, $meta, $map, $data,\n        $transformation_plugin, $default_function, $nowrap, $where_comparison,\n        $transform_options, $is_field_truncated, $original_length=''\n    ) {\n        $relational_display = $_SESSION['tmpval']['relational_display'];\n        $printview = $this->__get('printview');\n        $decimals = isset($meta->decimals) ? $meta->decimals : '-1';\n        $result = '<td data-decimals=\"' . $decimals . '\"'\n            . ' data-type=\"' . $meta->type . '\"';\n\n        if (! empty($original_length)) {\n            // cannot use data-original-length\n            $result .= ' data-originallength=\"' . $original_length . '\"';\n        }\n\n        $result .= ' class=\"'\n            . $this->_addClass(\n                $class, $condition_field, $meta, $nowrap,\n                $is_field_truncated, $transformation_plugin, $default_function\n            )\n            . '\">';\n\n        if (!empty($analyzed_sql_results['statement']->expr)) {\n            foreach ($analyzed_sql_results['statement']->expr as $expr) {\n                if ((empty($expr->alias)) || (empty($expr->column))) {\n                    continue;\n                }\n                if (strcasecmp($meta->name, $expr->alias) == 0) {\n                    $meta->name = $expr->column;\n                }\n            }\n        }\n\n        if (isset($map[$meta->name])) {\n\n            // Field to display from the foreign table?\n            if (isset($map[$meta->name][2])\n                && mb_strlen($map[$meta->name][2])\n            ) {\n                $dispval = $this->_getFromForeign(\n                    $map, $meta, $where_comparison\n                );\n            } else {\n                $dispval = '';\n            } // end if... else...\n\n            if (isset($printview) && ($printview == '1')) {\n\n                $result .= ($transformation_plugin != $default_function\n                    ? $transformation_plugin->applyTransformation(\n                        $data,\n                        $transform_options,\n                        $meta\n                    )\n                    : $default_function($data)\n                )\n                . ' <code>[-&gt;' . $dispval . ']</code>';\n\n            } else {\n\n                if ($relational_display == self::RELATIONAL_KEY) {\n\n                    // user chose \"relational key\" in the display options, so\n                    // the title contains the display field\n                    $title = (! empty($dispval))\n                        ? ' title=\"' . htmlspecialchars($dispval) . '\"'\n                        : '';\n\n                } else {\n                    $title = ' title=\"' . htmlspecialchars($data) . '\"';\n                }\n\n                $_url_params = array(\n                    'db'    => $map[$meta->name][3],\n                    'table' => $map[$meta->name][0],\n                    'pos'   => '0',\n                    'sql_query' => 'SELECT * FROM '\n                        . Util::backquote($map[$meta->name][3]) . '.'\n                        . Util::backquote($map[$meta->name][0])\n                        . ' WHERE '\n                        . Util::backquote($map[$meta->name][1])\n                        . $where_comparison,\n                );\n\n                $result .= '<a class=\"ajax\" href=\"sql.php'\n                    . PMA_URL_getCommon($_url_params)\n                    . '\"' . $title . '>';\n\n                if ($transformation_plugin != $default_function) {\n                    // always apply a transformation on the real data,\n                    // not on the display field\n                    $result .= $transformation_plugin->applyTransformation(\n                        $data,\n                        $transform_options,\n                        $meta\n                    );\n                } else {\n\n                    if ($relational_display == self::RELATIONAL_DISPLAY_COLUMN\n                        && ! empty($map[$meta->name][2])\n                    ) {\n                        // user chose \"relational display field\" in the\n                        // display options, so show display field in the cell\n                        $result .= $default_function($dispval);\n                    } else {\n                        // otherwise display data in the cell\n                        $result .= $default_function($data);\n                    }\n\n                }\n                $result .= '</a>';\n            }\n\n        } else {\n            $result .= ($transformation_plugin != $default_function\n                ? $transformation_plugin->applyTransformation(\n                    $data,\n                    $transform_options,\n                    $meta\n                )\n                : $default_function($data)\n            );\n        }\n\n        $result .= '</td>' . \"\\n\";\n\n        return $result;\n\n    } // end of the '_getRowData()' function\n\n\n    /**\n     * Prepares a checkbox for multi-row submits\n     *\n     * @param string $del_url           delete url\n     * @param array  $displayParts      array with explicit indexes for all\n     *                                  the display elements\n     * @param string $row_no            the row number\n     * @param string $where_clause_html url encoded where clause\n     * @param array  $condition_array   array of conditions in the where clause\n     * @param string $id_suffix         suffix for the id\n     * @param string $class             css classes for the td element\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getTableBody(), _getCheckboxAndLinks()\n     */\n    private function _getCheckboxForMultiRowSubmissions(\n        $del_url, $displayParts, $row_no, $where_clause_html, $condition_array,\n        $id_suffix, $class\n    ) {\n\n        $ret = '';\n\n        if (! empty($del_url) && $displayParts['del_lnk'] != self::KILL_PROCESS) {\n\n            $ret .= '<td ';\n            if (! empty($class)) {\n                $ret .= 'class=\"' . $class . '\"';\n            }\n\n            $ret .= ' class=\"center print_ignore\">'\n                . '<input type=\"checkbox\" id=\"id_rows_to_delete'\n                . $row_no . $id_suffix\n                . '\" name=\"rows_to_delete[' . $row_no . ']\"'\n                . ' class=\"multi_checkbox checkall\"'\n                . ' value=\"' . $where_clause_html . '\" '\n                . ' />'\n                . '<input type=\"hidden\" class=\"condition_array\" value=\"'\n                . htmlspecialchars(json_encode($condition_array)) . '\" />'\n                . '    </td>';\n        }\n\n        return $ret;\n\n    } // end of the '_getCheckboxForMultiRowSubmissions()' function\n\n\n    /**\n     * Prepares an Edit link\n     *\n     * @param string $edit_url          edit url\n     * @param string $class             css classes for td element\n     * @param string $edit_str          text for the edit link\n     * @param string $where_clause      where clause\n     * @param string $where_clause_html url encoded where clause\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getTableBody(), _getCheckboxAndLinks()\n     */\n    private function _getEditLink(\n        $edit_url, $class, $edit_str, $where_clause, $where_clause_html\n    ) {\n\n        $ret = '';\n        if (! empty($edit_url)) {\n\n            $ret .= '<td class=\"' . $class . ' center print_ignore\" '\n                . ' ><span class=\"nowrap\">'\n                . Util::linkOrButton(\n                    $edit_url, $edit_str, array(), false\n                );\n            /*\n             * Where clause for selecting this row uniquely is provided as\n             * a hidden input. Used by jQuery scripts for handling grid editing\n             */\n            if (! empty($where_clause)) {\n                $ret .= '<input type=\"hidden\" class=\"where_clause\" value =\"'\n                    . $where_clause_html . '\" />';\n            }\n            $ret .= '</span></td>';\n        }\n\n        return $ret;\n\n    } // end of the '_getEditLink()' function\n\n\n    /**\n     * Prepares an Copy link\n     *\n     * @param string $copy_url          copy url\n     * @param string $copy_str          text for the copy link\n     * @param string $where_clause      where clause\n     * @param string $where_clause_html url encoded where clause\n     * @param string $class             css classes for the td element\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getTableBody(), _getCheckboxAndLinks()\n     */\n    private function _getCopyLink(\n        $copy_url, $copy_str, $where_clause, $where_clause_html, $class\n    ) {\n\n        $ret = '';\n        if (! empty($copy_url)) {\n\n            $ret .= '<td class=\"';\n            if (! empty($class)) {\n                $ret .= $class . ' ';\n            }\n\n            $ret .= 'center print_ignore\" ' . ' ><span class=\"nowrap\">'\n               . Util::linkOrButton(\n                   $copy_url, $copy_str, array(), false\n               );\n\n            /*\n             * Where clause for selecting this row uniquely is provided as\n             * a hidden input. Used by jQuery scripts for handling grid editing\n             */\n            if (! empty($where_clause)) {\n                $ret .= '<input type=\"hidden\" class=\"where_clause\" value=\"'\n                    . $where_clause_html . '\" />';\n            }\n            $ret .= '</span></td>';\n        }\n\n        return $ret;\n\n    } // end of the '_getCopyLink()' function\n\n\n    /**\n     * Prepares a Delete link\n     *\n     * @param string $del_url delete url\n     * @param string $del_str text for the delete link\n     * @param string $js_conf text for the JS confirmation\n     * @param string $class   css classes for the td element\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getTableBody(), _getCheckboxAndLinks()\n     */\n    private function _getDeleteLink($del_url, $del_str, $js_conf, $class)\n    {\n\n        $ret = '';\n        if (empty($del_url)) {\n            return $ret;\n        }\n\n        $ret .= '<td class=\"';\n        if (! empty($class)) {\n            $ret .= $class . ' ';\n        }\n        $ajax = Response::getInstance()->isAjax() ? ' ajax' : '';\n        $ret .= 'center print_ignore\" ' . ' >'\n            . Util::linkOrButton(\n                $del_url,\n                $del_str,\n                array('class' => 'delete_row requireConfirm' . $ajax),\n                false\n            )\n            . '<div class=\"hide\">' . $js_conf . '</div>'\n            . '</td>';\n\n        return $ret;\n\n    } // end of the '_getDeleteLink()' function\n\n\n    /**\n     * Prepare checkbox and links at some position (left or right)\n     * (only called for horizontal mode)\n     *\n     * @param string $position          the position of the checkbox and links\n     * @param string $del_url           delete url\n     * @param array  $displayParts      array with explicit indexes for all the\n     *                                  display elements\n     * @param string $row_no            row number\n     * @param string $where_clause      where clause\n     * @param string $where_clause_html url encoded where clause\n     * @param array  $condition_array   array of conditions in the where clause\n     * @param string $edit_url          edit url\n     * @param string $copy_url          copy url\n     * @param string $class             css classes for the td elements\n     * @param string $edit_str          text for the edit link\n     * @param string $copy_str          text for the copy link\n     * @param string $del_str           text for the delete link\n     * @param string $js_conf           text for the JS confirmation\n     *\n     * @return string  the generated HTML\n     *\n     * @access  private\n     *\n     * @see     _getPlacedLinks()\n     */\n    private function _getCheckboxAndLinks(\n        $position, $del_url, $displayParts, $row_no, $where_clause,\n        $where_clause_html, $condition_array,\n        $edit_url, $copy_url, $class, $edit_str, $copy_str, $del_str, $js_conf\n    ) {\n\n        $ret = '';\n\n        if ($position == self::POSITION_LEFT) {\n\n            $ret .= $this->_getCheckboxForMultiRowSubmissions(\n                $del_url, $displayParts, $row_no, $where_clause_html,\n                $condition_array, '_left', ''\n            );\n\n            $ret .= $this->_getEditLink(\n                $edit_url, $class, $edit_str, $where_clause, $where_clause_html\n            );\n\n            $ret .= $this->_getCopyLink(\n                $copy_url, $copy_str, $where_clause, $where_clause_html, ''\n            );\n\n            $ret .= $this->_getDeleteLink($del_url, $del_str, $js_conf, '');\n\n        } elseif ($position == self::POSITION_RIGHT) {\n\n            $ret .= $this->_getDeleteLink($del_url, $del_str, $js_conf, '');\n\n            $ret .= $this->_getCopyLink(\n                $copy_url, $copy_str, $where_clause, $where_clause_html, ''\n            );\n\n            $ret .= $this->_getEditLink(\n                $edit_url, $class, $edit_str, $where_clause, $where_clause_html\n            );\n\n            $ret .= $this->_getCheckboxForMultiRowSubmissions(\n                $del_url, $displayParts, $row_no, $where_clause_html,\n                $condition_array, '_right', ''\n            );\n\n        } else { // $position == self::POSITION_NONE\n\n            $ret .= $this->_getCheckboxForMultiRowSubmissions(\n                $del_url, $displayParts, $row_no, $where_clause_html,\n                $condition_array, '_left', ''\n            );\n        }\n\n        return $ret;\n\n    } // end of the '_getCheckboxAndLinks()' function\n\n    /**\n     * Truncates given string based on LimitChars configuration\n     * and Session pftext variable\n     * (string is truncated only if necessary)\n     *\n     * @param string $str string to be truncated\n     *\n     * @return mixed\n     *\n     * @access  private\n     *\n     * @see     _handleNonPrintableContents(), _getDataCellForGeometryColumns(),\n     *          _getDataCellForNonNumericColumns\n     */\n    private function _getPartialText($str)\n    {\n        $original_length = mb_strlen($str);\n        if ($original_length > $GLOBALS['cfg']['LimitChars']\n            && $_SESSION['tmpval']['pftext'] === self::DISPLAY_PARTIAL_TEXT\n        ) {\n            $str = mb_substr(\n                $str, 0, $GLOBALS['cfg']['LimitChars']\n            ) . '...';\n            $truncated = true;\n        } else {\n            $truncated = false;\n        }\n\n        return array($truncated, $str, $original_length);\n    }\n}\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * functions for multi submit forms\n *\n * @usedby  mult_submits.inc.php\n *\n * @package PhpMyAdmin\n */\nuse PMA\\libraries\\Table;\n\n/**\n * Gets url params\n *\n * @param string $what               mult submit type\n * @param bool   $reload             is reload\n * @param string $action             action type\n * @param string $db                 database name\n * @param string $table              table name\n * @param array  $selected           selected rows(table,db)\n * @param array  $views              table views\n * @param string $original_sql_query original sql query\n * @param string $original_url_query original url query\n *\n * @return array\n */\nfunction PMA_getUrlParams(\n    $what, $reload, $action, $db, $table, $selected, $views,\n    $original_sql_query, $original_url_query\n) {\n    $_url_params = array(\n        'query_type' => $what,\n        'reload' => (! empty($reload) ? 1 : 0),\n    );\n    if (mb_strpos(' ' . $action, 'db_') == 1) {\n        $_url_params['db']= $db;\n    } elseif (mb_strpos(' ' . $action, 'tbl_') == 1\n        || $what == 'row_delete'\n    ) {\n        $_url_params['db']= $db;\n        $_url_params['table']= $table;\n    }\n    foreach ($selected as $sval) {\n        if ($what == 'row_delete') {\n            $_url_params['selected'][] = 'DELETE FROM '\n                . PMA\\libraries\\Util::backquote($table)\n                . ' WHERE ' . $sval . ' LIMIT 1;';\n        } else {\n            $_url_params['selected'][] = $sval;\n        }\n    }\n    if ($what == 'drop_tbl' && !empty($views)) {\n        foreach ($views as $current) {\n            $_url_params['views'][] = $current;\n        }\n    }\n    if ($what == 'row_delete') {\n        $_url_params['original_sql_query'] = $original_sql_query;\n        if (! empty($original_url_query)) {\n            $_url_params['original_url_query'] = $original_url_query;\n        }\n    }\n\n    return  $_url_params;\n}\n\n/**\n * Builds or execute queries for multiple elements, depending on $query_type\n *\n * @param string $query_type  query type\n * @param array  $selected    selected tables\n * @param string $db          db name\n * @param string $table       table name\n * @param array  $views       table views\n * @param string $primary     table primary\n * @param string $from_prefix from prefix original\n * @param string $to_prefix   to prefix original\n *\n * @return array\n */\nfunction PMA_buildOrExecuteQueryForMulti(\n    $query_type, $selected, $db, $table, $views, $primary,\n    $from_prefix, $to_prefix\n) {\n    $rebuild_database_list = false;\n    $reload = null;\n    $a_query = null;\n    $sql_query = '';\n    $sql_query_views = null;\n    // whether to run query after each pass\n    $run_parts = false;\n    // whether to execute the query at the end (to display results)\n    $execute_query_later = false;\n    $result = null;\n\n    if ($query_type == 'drop_tbl') {\n        $sql_query_views = '';\n    }\n\n    $selected_cnt   = count($selected);\n    $deletes = false;\n    $copy_tbl =false;\n\n    for ($i = 0; $i < $selected_cnt; $i++) {\n        switch ($query_type) {\n        case 'row_delete':\n            $deletes = true;\n            $a_query = $selected[$i];\n            $run_parts = true;\n            break;\n\n        case 'drop_db':\n            PMA_relationsCleanupDatabase($selected[$i]);\n            $a_query   = 'DROP DATABASE '\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $reload    = 1;\n            $run_parts = true;\n            $rebuild_database_list = true;\n            break;\n\n        case 'drop_tbl':\n            PMA_relationsCleanupTable($db, $selected[$i]);\n            $current = $selected[$i];\n            if (!empty($views) && in_array($current, $views)) {\n                $sql_query_views .= (empty($sql_query_views) ? 'DROP VIEW ' : ', ')\n                          . PMA\\libraries\\Util::backquote($current);\n            } else {\n                $sql_query .= (empty($sql_query) ? 'DROP TABLE ' : ', ')\n                           . PMA\\libraries\\Util::backquote($current);\n            }\n            $reload    = 1;\n            break;\n\n        case 'check_tbl':\n            $sql_query .= (empty($sql_query) ? 'CHECK TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'optimize_tbl':\n            $sql_query .= (empty($sql_query) ? 'OPTIMIZE TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'analyze_tbl':\n            $sql_query .= (empty($sql_query) ? 'ANALYZE TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'checksum_tbl':\n            $sql_query .= (empty($sql_query) ? 'CHECKSUM TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'repair_tbl':\n            $sql_query .= (empty($sql_query) ? 'REPAIR TABLE ' : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i]);\n            $execute_query_later = true;\n            break;\n\n        case 'empty_tbl':\n            $deletes = true;\n            $a_query = 'TRUNCATE ';\n            $a_query .= PMA\\libraries\\Util::backquote($selected[$i]);\n            $run_parts = true;\n            break;\n\n        case 'drop_fld':\n            PMA_relationsCleanupColumn($db, $table, $selected[$i]);\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                : ',')\n                       . ' DROP ' . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ';' : '');\n            break;\n\n        case 'primary_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . (empty($primary)\n                    ? ''\n                    : ' DROP PRIMARY KEY,') . ' ADD PRIMARY KEY( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'index_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . ' ADD INDEX( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'unique_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . ' ADD UNIQUE( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'spatial_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . ' ADD SPATIAL( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'fulltext_fld':\n            $sql_query .= (empty($sql_query)\n                ? 'ALTER TABLE ' . PMA\\libraries\\Util::backquote($table)\n                    . ' ADD FULLTEXT( '\n                : ', ')\n                       . PMA\\libraries\\Util::backquote($selected[$i])\n                       . (($i == $selected_cnt-1) ? ');' : '');\n            break;\n\n        case 'add_prefix_tbl':\n            $newtablename = $_POST['add_prefix'] . $selected[$i];\n            // ADD PREFIX TO TABLE NAME\n            $a_query = 'ALTER TABLE '\n                . PMA\\libraries\\Util::backquote($selected[$i])\n                . ' RENAME '\n                . PMA\\libraries\\Util::backquote($newtablename);\n            $run_parts = true;\n            break;\n\n        case 'replace_prefix_tbl':\n            $current = $selected[$i];\n            $subFromPrefix = mb_substr(\n                $current,\n                0,\n                mb_strlen($from_prefix)\n            );\n            if ($subFromPrefix == $from_prefix) {\n                $newtablename = $to_prefix\n                    . mb_substr(\n                        $current,\n                        mb_strlen($from_prefix)\n                    );\n            } else {\n                $newtablename = $current;\n            }\n            // CHANGE PREFIX PATTERN\n            $a_query = 'ALTER TABLE '\n                . PMA\\libraries\\Util::backquote($selected[$i])\n                . ' RENAME '\n                . PMA\\libraries\\Util::backquote($newtablename);\n            $run_parts = true;\n            break;\n\n        case 'copy_tbl_change_prefix':\n            $current = $selected[$i];\n            $newtablename = $to_prefix .\n                mb_substr($current, mb_strlen($from_prefix));\n            // COPY TABLE AND CHANGE PREFIX PATTERN\n            $a_query = 'CREATE TABLE '\n                . PMA\\libraries\\Util::backquote($newtablename)\n                . ' SELECT * FROM '\n                . PMA\\libraries\\Util::backquote($selected[$i]);\n            $run_parts = true;\n            break;\n\n        case 'copy_tbl':\n            $run_parts = true;\n            $copy_tbl = true;\n            Table::moveCopy($db, $selected[$i], $_POST['target_db'], $selected[$i], $_POST['what'], false, 'one_table');\n            if (isset($_POST['adjust_privileges']) && !empty($_POST['adjust_privileges'])) {\n                include_once 'operations.lib.php';\n                PMA_AdjustPrivileges_copyTable($db, $selected[$i], $_POST['target_db'], $selected[$i]);\n            }\n            break;\n        } // end switch\n\n        // All \"DROP TABLE\", \"DROP FIELD\", \"OPTIMIZE TABLE\" and \"REPAIR TABLE\"\n        // statements will be run at once below\n        if ($run_parts && !$copy_tbl) {\n            $sql_query .= $a_query . ';' . \"\\n\";\n            if ($query_type != 'drop_db') {\n                $GLOBALS['dbi']->selectDb($db);\n            }\n            $result = $GLOBALS['dbi']->query($a_query);\n\n            if ($query_type == 'drop_db') {\n                PMA_clearTransformations($selected[$i]);\n            } elseif ($query_type == 'drop_tbl') {\n                PMA_clearTransformations($db, $selected[$i]);\n            } else if ($query_type == 'drop_fld') {\n                PMA_clearTransformations($db, $table, $selected[$i]);\n            }\n        } // end if\n    } // end for\n\n    if ($deletes && ! empty($_REQUEST['pos'])) {\n        $_REQUEST['pos'] = PMA_calculatePosForLastPage(\n            $db, $table, isset($_REQUEST['pos']) ? $_REQUEST['pos'] : null\n        );\n    }\n\n    return array(\n        $result, $rebuild_database_list, $reload,\n        $run_parts, $execute_query_later, $sql_query, $sql_query_views\n    );\n}\n\n/**\n * Gets HTML for copy tables form\n *\n * @param string $action      action type\n * @param array  $_url_params URL params\n *\n * @return string\n */\nfunction PMA_getHtmlForCopyMultipleTables($action, $_url_params)\n{\n    $html = '<form id=\"ajax_form\" action=\"' . $action . '\" method=\"post\">';\n    $html .= PMA_URL_getHiddenInputs($_url_params);\n    $html .= '<fieldset class = \"input\">';\n    $databases_list = $GLOBALS['dblist']->databases;\n    foreach ($databases_list as $key => $db_name)\n        if ($db_name == $GLOBALS['db']){\n            $databases_list->offsetUnset($key);\n            break;\n        }\n    $html .= '<strong><label for=\"db_name_dropdown\">' . __('Database') . ':</label></strong>';\n    $html .= '<select id=\"db_name_dropdown\" class=\"halfWidth\" name=\"target_db\" >'\n        . $databases_list->getHtmlOptions(true, false)\n        . '</select>';\n    $html .= '<br><br>';\n    $html .= '<strong><label>' . __('Options') . ':</label></strong><br>';\n    $html .= '<input type=\"radio\" id =\"what_structure\" value=\"structure\" name=\"what\"></input>';\n    $html .= '<label for=\"what_structure\">' . __('Structure only') . '</label><br>';\n    $html .= '<input type=\"radio\" id =\"what_data\" value=\"data\" name=\"what\" checked=\"checked\"></input>';\n    $html .= '<label for=\"what_data\">' . __('Structure and data') . '</label><br>';\n    $html .= '<input type=\"radio\" id =\"what_dataonly\" value=\"dataonly\" name=\"what\"></input>';\n    $html .= '<label for=\"what_dataonly\">' . __('Data only') . '</label><br><br>';\n    $html .= '<input type=\"checkbox\" id=\"checkbox_drop\" value=\"1\" name=\"drop_if_exists\"></input>';\n    $html .= '<label for=\"checkbox_drop\">' . __('Add DROP TABLE') . '</label><br>';\n    $html .= '<input type=\"checkbox\" id=\"checkbox_auto_increment_cp\" value=\"1\" name=\"sql_auto_increment\"></input>';\n    $html .= '<label for=\"checkbox_auto_increment\">' . __('Add AUTO INCREMENT value') . '</label><br>';\n    $html .= '<input type=\"checkbox\" id=\"checkbox_constraints\" value=\"1\" name=\"sql_auto_increment\" checked=\"checked\"></input>';\n    $html .= '<label for=\"checkbox_constraints\">' . __('Add constraints') . '</label><br><br>';\n    $html .= '<input name=\"adjust_privileges\" value=\"1\" id=\"checkbox_adjust_privileges\" checked=\"checked\" type=\"checkbox\"></input>';\n    $html .= '<label for=\"checkbox_adjust_privileges\">' . __('Adjust privileges') . '<a href=\"./doc/html/faq.html#faq6-39\" target=\"documentation\"><img src=\"themes/dot.gif\" title=\"Documentation\" alt=\"Documentation\" class=\"icon ic_b_help\"></a></label>';\n    $html .= '</fieldset>';\n    $html .= '<input type=\"hidden\" name=\"mult_btn\" value=\"' . __('Yes') . '\" />';\n    $html .= '</form>';\n   return $html;\n}\n\n/**\n * Gets HTML for replace_prefix_tbl or copy_tbl_change_prefix\n *\n * @param string $action      action type\n * @param array  $_url_params URL params\n *\n * @return string\n */\nfunction PMA_getHtmlForReplacePrefixTable($action, $_url_params)\n{\n    $html  = '<form id=\"ajax_form\" action=\"' . $action . '\" method=\"post\">';\n    $html .= PMA_URL_getHiddenInputs($_url_params);\n    $html .= '<fieldset class = \"input\">';\n    $html .= '<table>';\n    $html .= '<tr>';\n    $html .= '<td>' . __('From') . '</td>';\n    $html .= '<td>';\n    $html .= '<input type=\"text\" name=\"from_prefix\" id=\"initialPrefix\" />';\n    $html .= '</td>';\n    $html .= '</tr>';\n    $html .= '<tr>';\n    $html .= '<td>' . __('To') . '</td>';\n    $html .= '<td>';\n    $html .= '<input type=\"text\" name=\"to_prefix\" id=\"newPrefix\" />';\n    $html .= '</td>';\n    $html .= '</tr>';\n    $html .= '</table>';\n    $html .= '</fieldset>';\n    $html .= '<input type=\"hidden\" name=\"mult_btn\" value=\"' . __('Yes') . '\" />';\n    $html .= '</form>';\n\n    return $html;\n}\n\n/**\n * Gets HTML for add_prefix_tbl\n *\n * @param string $action      action type\n * @param array  $_url_params URL params\n *\n * @return string\n */\nfunction PMA_getHtmlForAddPrefixTable($action, $_url_params)\n{\n    $html  = '<form id=\"ajax_form\" action=\"' . $action . '\" method=\"post\">';\n    $html .= PMA_URL_getHiddenInputs($_url_params);\n    $html .= '<fieldset class = \"input\">';\n    $html .= '<table>';\n    $html .= '<tr>';\n    $html .= '<td>' . __('Add prefix') . '</td>';\n    $html .= '<td>';\n    $html .= '<input type=\"text\" name=\"add_prefix\" id=\"txtPrefix\" />';\n    $html .= '</td>';\n    $html .= '</tr>';\n    $html .= '<tr>';\n    $html .= '</table>';\n    $html .= '</fieldset>';\n    $html .= '<input type=\"hidden\" name=\"mult_btn\" value=\"' . __('Yes') . '\" />';\n    $html .= '</form>';\n\n    return $html;\n}\n\n/**\n * Gets HTML for other mult_submits actions\n *\n * @param string $what        mult_submit type\n * @param string $action      action type\n * @param array  $_url_params URL params\n * @param string $full_query  full sql query string\n *\n * @return string\n */\nfunction PMA_getHtmlForOtherActions($what, $action, $_url_params, $full_query)\n{\n    $html = '<form action=\"' . $action . '\" method=\"post\">';\n    $html .= PMA_URL_getHiddenInputs($_url_params);\n    $html .= '<fieldset class=\"confirmation\">';\n    $html .= '<legend>';\n    if ($what == 'drop_db') {\n        $html .=  __('You are about to DESTROY a complete database!') . ' ';\n    }\n    $html .= __('Do you really want to execute the following query?');\n    $html .= '<input type=\"submit\" name=\"mult_btn\" value=\"'\n        . __('Yes') . '\" />';\n    $html .= '<input type=\"submit\" name=\"mult_btn\" value=\"'\n        . __('No') . '\" />';\n    $html .= '</legend>';\n    $html .= '<code>' . $full_query . '</code>';\n    $html .= '</fieldset>';\n    $html .= '<fieldset class=\"tblFooters\">';\n    // Display option to disable foreign key checks while dropping tables\n    if ($what === 'drop_tbl' || $what === 'empty_tbl' || $what === 'row_delete') {\n        $html .= '<div id=\"foreignkeychk\">';\n        $html .= PMA\\libraries\\Util::getFKCheckbox();\n        $html .= '</div>';\n    }\n    $html .= '<input id=\"buttonYes\" type=\"submit\" name=\"mult_btn\" value=\"'\n        . __('Yes') . '\" />';\n    $html .= '<input id=\"buttonNo\" type=\"submit\" name=\"mult_btn\" value=\"'\n        . __('No') . '\" />';\n    $html .= '</fieldset>';\n    $html .= '</form>';\n\n    return $html;\n}\n\n/**\n * Get query string from Selected\n *\n * @param string $what     mult_submit type\n * @param string $table    table name\n * @param array  $selected the selected columns\n * @param array  $views    table views\n *\n * @return array\n */\nfunction PMA_getQueryFromSelected($what, $table, $selected, $views)\n{\n    $reload = false;\n    $full_query_views = null;\n    $full_query     = '';\n\n    if ($what == 'drop_tbl') {\n        $full_query_views = '';\n    }\n\n    $selected_cnt   = count($selected);\n    $i = 0;\n    foreach ($selected as $sval) {\n        switch ($what) {\n        case 'row_delete':\n            $full_query .= 'DELETE FROM '\n                . PMA\\libraries\\Util::backquote(htmlspecialchars($table))\n                // Do not append a \"LIMIT 1\" clause here\n                // (it's not binlog friendly).\n                // We don't need the clause because the calling panel permits\n                // this feature only when there is a unique index.\n                . ' WHERE ' . htmlspecialchars($sval)\n                . ';<br />';\n            break;\n        case 'drop_db':\n            $full_query .= 'DROP DATABASE '\n                . PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                . ';<br />';\n            $reload = true;\n            break;\n\n        case 'drop_tbl':\n            $current = $sval;\n            if (!empty($views) && in_array($current, $views)) {\n                $full_query_views .= (empty($full_query_views) ? 'DROP VIEW ' : ', ')\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($current));\n            } else {\n                $full_query .= (empty($full_query) ? 'DROP TABLE ' : ', ')\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($current));\n            }\n            break;\n\n        case 'empty_tbl':\n            $full_query .= 'TRUNCATE ';\n            $full_query .= PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                        . ';<br />';\n            break;\n\n        case 'primary_fld':\n            if ($full_query == '') {\n                $full_query .= 'ALTER TABLE '\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($table))\n                    . '<br />&nbsp;&nbsp;DROP PRIMARY KEY,'\n                    . '<br />&nbsp;&nbsp; ADD PRIMARY KEY('\n                    . '<br />&nbsp;&nbsp;&nbsp;&nbsp; '\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                    . ',';\n            } else {\n                $full_query .= '<br />&nbsp;&nbsp;&nbsp;&nbsp; '\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                    . ',';\n            }\n            if ($i == $selected_cnt-1) {\n                $full_query = preg_replace('@,$@', ');<br />', $full_query);\n            }\n            break;\n\n        case 'drop_fld':\n            if ($full_query == '') {\n                $full_query .= 'ALTER TABLE '\n                    . PMA\\libraries\\Util::backquote(htmlspecialchars($table));\n            }\n            $full_query .= '<br />&nbsp;&nbsp;DROP '\n                . PMA\\libraries\\Util::backquote(htmlspecialchars($sval))\n                . ',';\n            if ($i == $selected_cnt - 1) {\n                $full_query = preg_replace('@,$@', ';<br />', $full_query);\n            }\n            break;\n        } // end switch\n        $i++;\n    }\n\n    if ($what == 'drop_tbl') {\n        if (!empty($full_query)) {\n            $full_query .= ';<br />' . \"\\n\";\n        }\n        if (!empty($full_query_views)) {\n            $full_query .= $full_query_views . ';<br />' . \"\\n\";\n        }\n        unset($full_query_views);\n    }\n\n    $full_query_views = isset($full_query_views)? $full_query_views : null;\n\n    return array($full_query, $reload, $full_query_views);\n}\n\n", "<?php\n/* vim: set expandtab sw=4 ts=4 sts=4: */\n/**\n * handle row specific actions like edit, delete, export\n *\n * @package PhpMyAdmin\n */\n\n/**\n *\n */\nrequire_once 'libraries/common.inc.php';\nrequire_once 'libraries/mysql_charsets.inc.php';\nrequire_once 'libraries/sql.lib.php';\n\nif (isset($_REQUEST['submit_mult'])) {\n    $submit_mult = $_REQUEST['submit_mult'];\n    // workaround for IE problem:\n} elseif (isset($_REQUEST['submit_mult_delete_x'])) {\n    $submit_mult = 'row_delete';\n} elseif (isset($_REQUEST['submit_mult_change_x'])) {\n    $submit_mult = 'row_edit';\n} elseif (isset($_REQUEST['submit_mult_export_x'])) {\n    $submit_mult = 'row_export';\n}\n\n// If the 'Ask for confirmation' button was pressed, this can only come\n// from 'delete' mode, so we set it straight away.\nif (isset($_REQUEST['mult_btn'])) {\n    $submit_mult = 'row_delete';\n}\n\nif (! isset($submit_mult)) {\n    $submit_mult = 'row_edit';\n}\n\nswitch($submit_mult) {\ncase 'row_delete':\ncase 'row_edit':\ncase 'row_copy':\ncase 'row_export':\n    // leave as is\n    break;\n\ncase 'export':\n    $submit_mult = 'row_export';\n    break;\n\ncase 'delete':\n    $submit_mult = 'row_delete';\n    break;\n\ncase 'copy':\n    $submit_mult = 'row_copy';\n    break;\n\ncase 'edit':\ndefault:\n    $submit_mult = 'row_edit';\n    break;\n}\n\nif (!empty($submit_mult)) {\n\n    if (isset($_REQUEST['goto'])\n        && (! isset($_REQUEST['rows_to_delete'])\n        || ! is_array($_REQUEST['rows_to_delete']))\n    ) {\n        $response = PMA\\libraries\\Response::getInstance();\n        $response->setRequestStatus(false);\n        $response->addJSON('message', __('No row selected.'));\n    }\n\n    switch($submit_mult) {\n    /** @noinspection PhpMissingBreakStatementInspection */\n    case 'row_copy':\n        $_REQUEST['default_action'] = 'insert';\n        // no break to allow for fallthough\n    case 'row_edit':\n        // As we got the rows to be edited from the\n        // 'rows_to_delete' checkbox, we use the index of it as the\n        // indicating WHERE clause. Then we build the array which is used\n        // for the tbl_change.php script.\n        $where_clause = array();\n        if (isset($_REQUEST['rows_to_delete'])\n            && is_array($_REQUEST['rows_to_delete'])\n        ) {\n            foreach ($_REQUEST['rows_to_delete'] as $i => $i_where_clause) {\n                $where_clause[] = $i_where_clause;\n            }\n        }\n        $active_page = 'tbl_change.php';\n        include 'tbl_change.php';\n        break;\n\n    case 'row_export':\n        // Needed to allow SQL export\n        $single_table = true;\n\n        // As we got the rows to be exported from the\n        // 'rows_to_delete' checkbox, we use the index of it as the\n        // indicating WHERE clause. Then we build the array which is used\n        // for the tbl_change.php script.\n        $where_clause = array();\n        if (isset($_REQUEST['rows_to_delete'])\n            && is_array($_REQUEST['rows_to_delete'])\n        ) {\n            foreach ($_REQUEST['rows_to_delete'] as $i => $i_where_clause) {\n                $where_clause[] = $i_where_clause;\n            }\n        }\n        $active_page = 'tbl_export.php';\n        include 'tbl_export.php';\n        break;\n\n    case 'row_delete':\n    default:\n        $action = 'tbl_row_action.php';\n        $err_url = 'tbl_row_action.php'\n            . PMA_URL_getCommon($GLOBALS['url_params']);\n        if (! isset($_REQUEST['mult_btn'])) {\n            $original_sql_query = $sql_query;\n            if (! empty($url_query)) {\n                $original_url_query = $url_query;\n            }\n        }\n        include 'libraries/mult_submits.inc.php';\n        $_url_params = $GLOBALS['url_params'];\n        $_url_params['goto'] = 'tbl_sql.php';\n        $url_query = PMA_URL_getCommon($_url_params);\n\n\n        /**\n         * Show result of multi submit operation\n         */\n        // sql_query is not set when user does not confirm multi-delete\n        if ((! empty($submit_mult) || isset($_REQUEST['mult_btn']))\n            && ! empty($sql_query)\n        ) {\n            $disp_message = __('Your SQL query has been executed successfully.');\n            $disp_query = $sql_query;\n        }\n\n        if (isset($original_sql_query)) {\n            $sql_query = $original_sql_query;\n        }\n\n        if (isset($original_url_query)) {\n            $url_query = $original_url_query;\n        }\n\n        $active_page = 'sql.php';\n        PMA_executeQueryAndSendQueryResponse(\n            null, // analyzed_sql_results\n            false, // is_gotofile\n            $db, // db\n            $table, // table\n            null, // find_real_end\n            null, // sql_query_for_bookmark\n            null, // extra_data\n            null, // message_to_show\n            null, // message\n            null, // sql_data\n            $goto, // goto\n            $pmaThemeImage, // pmaThemeImage\n            null, // disp_query\n            null, // disp_message\n            null, // query_type\n            $sql_query, // sql_query\n            null, // selectedTables\n            null // complete_query\n        );\n    }\n}\n"], "filenames": ["libraries/DisplayResults.php", "libraries/mult_submits.lib.php", "tbl_row_action.php"], "buggy_code_start_loc": [2791, 47, 89], "buggy_code_end_loc": [2792, 499, 110], "fixing_code_start_loc": [2791, 47, 89], "fixing_code_end_loc": [2792, 499, 110], "type": "CWE-79", "message": "Cross-site scripting (XSS) vulnerability in phpMyAdmin 4.4.x before 4.4.15.6 and 4.6.x before 4.6.2 allows remote attackers to inject arbitrary web script or HTML via special characters that are mishandled during double URL decoding.", "other": {"cve": {"id": "CVE-2016-5099", "sourceIdentifier": "cve@mitre.org", "published": "2016-07-05T01:59:07.613", "lastModified": "2018-10-30T16:27:34.687", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Cross-site scripting (XSS) vulnerability in phpMyAdmin 4.4.x before 4.4.15.6 and 4.6.x before 4.6.2 allows remote attackers to inject arbitrary web script or HTML via special characters that are mishandled during double URL decoding."}, {"lang": "es", "value": "Vulnerabilidad de XSS en phpMyAdmin 4.4.x en versiones anteriores a 4.4.15.6 y 4.6.x en versiones anteriores a 4.6.2 permite a atacantes remotos inyectar secuencias de comandos web o HTML arbitrarios a trav\u00e9s de caracteres especiales que no son manejados adecuadamente durante la doble decodificaci\u00f3n URL."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "13CD0228-728B-437A-84C1-BD7AFA52FFB5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "DFF55485-9892-4E7B-AEE0-017E61EAA7C0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.1.1:*:*:*:*:*:*:*", "matchCriteriaId": "6100FE3E-0A31-4B55-90F2-90AF765A8EB7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "FBAAC8D9-AAA5-487C-B4AA-84BAE5DB109E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "5E06B1D3-29B4-45B7-B81F-C864AF579011"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.4:*:*:*:*:*:*:*", "matchCriteriaId": "6B2E3923-0E2B-411A-B091-088E6FF050D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.5:*:*:*:*:*:*:*", "matchCriteriaId": "1848C748-804D-4FE4-AB9C-B1BF9E58A19C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6:*:*:*:*:*:*:*", "matchCriteriaId": "12296322-DFAD-4B36-83EC-D01BF5DF7F2A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "EA321C14-C8F4-41FC-B601-2F646064ABBF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.7:*:*:*:*:*:*:*", "matchCriteriaId": "54DBCF86-0CE8-46C4-B2E7-E3224765CCFE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.8:*:*:*:*:*:*:*", "matchCriteriaId": "1BF3DBC5-7020-48D0-ADEA-E71776DB2285"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.9:*:*:*:*:*:*:*", "matchCriteriaId": "317F952E-5F12-4ED3-8FA3-FC1106B50F85"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.10:*:*:*:*:*:*:*", "matchCriteriaId": "87B97F98-C0A7-4D9E-8333-7EE9EC456A12"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.11:*:*:*:*:*:*:*", "matchCriteriaId": "7A1E753D-5653-4D7A-8E41-6C02511EBFCE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.12:*:*:*:*:*:*:*", "matchCriteriaId": "417230C7-0EC2-49F4-B810-A8AE84A302AD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13:*:*:*:*:*:*:*", "matchCriteriaId": "103FEAB1-194E-4CEF-935A-4DBCCA298205"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.13.1:*:*:*:*:*:*:*", "matchCriteriaId": "C5814003-9FF8-4F8E-9D90-A2BBB80B8451"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.14.1:*:*:*:*:*:*:*", "matchCriteriaId": "16D28B77-9353-4259-9299-30638A78CCD4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15:*:*:*:*:*:*:*", "matchCriteriaId": "C022292B-6E06-4328-842F-135A872D22AF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.1:*:*:*:*:*:*:*", "matchCriteriaId": "F15F00FB-BB9B-4D54-B198-0A74D418B8DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.2:*:*:*:*:*:*:*", "matchCriteriaId": "DC10AF20-7B65-4FAE-A2AD-783867D60A8D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.3:*:*:*:*:*:*:*", "matchCriteriaId": "4EB7190C-0401-4E2E-B15F-4CFC79D5A4E7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.4:*:*:*:*:*:*:*", "matchCriteriaId": "4BED20D9-C571-4BC5-9A54-450A364C6E43"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.4.15.5:*:*:*:*:*:*:*", "matchCriteriaId": "2A2B646D-DDFC-4CB2-B7F4-0C33AF18D14F"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:opensuse:13.1:*:*:*:*:*:*:*", "matchCriteriaId": "A10BC294-9196-425F-9FB0-B1625465B47F"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:*:*:*:*:*:*:*", "matchCriteriaId": "C641F362-D37D-47CB-BE6C-36E5F116F844"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:alpha1:*:*:*:*:*:*", "matchCriteriaId": "A0EA8819-70F8-48DC-8667-6CF25E7D9C53"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:rc1:*:*:*:*:*:*", "matchCriteriaId": "DD2796DA-3E74-4765-90D1-783849C7A44C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.0:rc2:*:*:*:*:*:*", "matchCriteriaId": "4024DA77-BFE4-48C6-A2AF-46003071BDE8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:phpmyadmin:phpmyadmin:4.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "85631B69-7060-42D1-AE24-466BA10EB390"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2016-06/msg00043.html", "source": "cve@mitre.org"}, {"url": "http://www.debian.org/security/2016/dsa-3627", "source": "cve@mitre.org"}, {"url": "http://www.securityfocus.com/bid/90877", "source": "cve@mitre.org"}, {"url": "http://www.securitytracker.com/id/1035979", "source": "cve@mitre.org"}, {"url": "https://github.com/phpmyadmin/phpmyadmin/commit/b061096abd992801fbbd805ef6ff74e627528780", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://security.gentoo.org/glsa/201701-32", "source": "cve@mitre.org"}, {"url": "https://www.phpmyadmin.net/security/PMASA-2016-16", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/phpmyadmin/phpmyadmin/commit/b061096abd992801fbbd805ef6ff74e627528780"}}