{"buggy_code": ["/* radare - LGPL - Copyright 2016-2020 - oddcoder, sivaramaaa */\n/* type matching - type propagation */\n\n#include <r_anal.h>\n#include <r_util.h>\n#include <r_core.h>\n#define LOOP_MAX 10\n\nstatic bool anal_emul_init(RCore *core, RConfigHold *hc, RDebugTrace **dt, RAnalEsilTrace **et) {\n\tif (!core->anal->esil) {\n\t\treturn false;\n\t}\n\t*dt = core->dbg->trace;\n\t*et = core->anal->esil->trace;\n\tcore->dbg->trace = r_debug_trace_new ();\n\tcore->anal->esil->trace = r_anal_esil_trace_new (core->anal->esil);\n\tr_config_hold (hc, \"esil.romem\", \"dbg.trace\", \"esil.nonull\", \"dbg.follow\", NULL);\n\tr_config_set (core->config, \"esil.romem\", \"true\");\n\tr_config_set (core->config, \"dbg.trace\", \"true\");\n\tr_config_set (core->config, \"esil.nonull\", \"true\");\n\tr_config_set_i (core->config, \"dbg.follow\", false);\n\tconst char *bp = r_reg_get_name (core->anal->reg, R_REG_NAME_BP);\n\tconst char *sp = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);\n\tif ((bp && !r_reg_getv (core->anal->reg, bp)) && (sp && !r_reg_getv (core->anal->reg, sp))) {\n\t\teprintf (\"Stack isn't initialized.\\n\");\n\t\teprintf (\"Try running aei and aeim commands before aft for default stack initialization\\n\");\n\t\treturn false;\n\t}\n\treturn (core->dbg->trace && core->anal->esil->trace);\n}\n\nstatic void anal_emul_restore(RCore *core, RConfigHold *hc, RDebugTrace *dt, RAnalEsilTrace *et) {\n\tr_config_hold_restore (hc);\n\tr_config_hold_free (hc);\n\tr_debug_trace_free (core->dbg->trace);\n\tr_anal_esil_trace_free (core->anal->esil->trace);\n\tcore->anal->esil->trace = et;\n\tcore->dbg->trace = dt;\n}\n\n#define SDB_CONTAINS(i,s) sdb_array_contains (trace, sdb_fmt (\"%d.reg.write\", i), s, 0)\n\nstatic bool type_pos_hit(RAnal *anal, Sdb *trace, bool in_stack, int idx, int size, const char *place) {\n\tif (in_stack) {\n\t\tconst char *sp_name = r_reg_get_name (anal->reg, R_REG_NAME_SP);\n\t\tut64 sp = r_reg_getv (anal->reg, sp_name);\n\t\tut64 write_addr = sdb_num_get (trace, sdb_fmt (\"%d.mem.write\", idx), 0);\n\t\treturn (write_addr == sp + size);\n\t}\n\treturn SDB_CONTAINS (idx, place);\n}\n\nstatic void __var_rename(RAnal *anal, RAnalVar *v, const char *name, ut64 addr) {\n\tif (!name || !v) {\n\t\treturn;\n\t}\n\tif (!*name || !strcmp (name , \"...\")) {\n\t\treturn;\n\t}\n\tbool is_default = (r_str_startswith (v->name, VARPREFIX)\n\t\t\t|| r_str_startswith (v->name, ARGPREFIX));\n\tif (*name == '*') {\n\t\tname++;\n\t}\n\t// longer name tends to be meaningful like \"src\" instead of \"s1\"\n\tif (!is_default && (strlen (v->name) > strlen (name))) {\n\t\treturn;\n\t}\n\tRAnalFunction *fcn = r_anal_get_fcn_in (anal, addr, 0);\n\tif (!fcn) {\n\t\treturn;\n\t}\n\tr_anal_var_rename (v, name, false);\n}\n\nstatic void __var_retype(RAnal *anal, RAnalVar *var, const char *vname, const char *type, bool ref, bool pfx) {\n\tr_return_if_fail (anal && var && type);\n\t// XXX types should be passed without spaces to trim\n\ttype = r_str_trim_head_ro (type);\n\t// default type if none is provided\n\tif (!*type) {\n\t\ttype = \"int\";\n\t}\n\tbool is_ptr = (vname && *vname == '*');\n\t// removing this return makes 64bit vars become 32bit\n\tif (!strncmp (type, \"int\", 3) || (!is_ptr && !strcmp (type, \"void\"))) {\n\t\t// default or void type\n\t\treturn;\n\t}\n\tconst char *expand = var->type;\n\tif (!strcmp (var->type, \"int32_t\")) {\n\t\texpand = \"int\";\n\t} else if (!strcmp (var->type, \"uint32_t\")) {\n\t\texpand = \"unsigned int\";\n\t} else if (!strcmp (var->type, \"uint64_t\")) {\n\t\texpand = \"unsigned long long\";\n\t}\n\tconst char *tmp = strstr (expand, \"int\");\n\tbool is_default = tmp != NULL;\n\tif (!is_default && strncmp (var->type, \"void\", 4)) {\n\t\t// return since type is already propagated\n\t\t// except for \"void *\", since \"void *\" => \"char *\" is possible\n\t\treturn;\n\t}\n\tRStrBuf *sb = r_strbuf_new (\"\");\n\tif (pfx) {\n\t\tif (is_default && strncmp (var->type, \"signed\", 6)) {\n\t\t\tr_strbuf_setf (sb, \"%s %s\", type, tmp);\n\t\t} else {\n\t\t\tr_strbuf_free (sb);\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tr_strbuf_set (sb, type);\n\t}\n\tif (!strncmp (r_strbuf_get (sb), \"const \", 6)) {\n\t\t// Dropping const from type\n\t\t//TODO: Inferring const type\n\t\tr_strbuf_setf (sb, \"%s\", type + 6);\n\t}\n\tif (is_ptr) {\n\t\t//type *ptr => type *\n\t\tr_strbuf_append (sb, \" *\");\n\t}\n\tif (ref) {\n\t\tif (r_str_endswith (r_strbuf_get (sb), \"*\")) { // type * => type **\n\t\t\tr_strbuf_append (sb, \"*\");\n\t\t} else {   //  type => type *\n\t\t\tr_strbuf_append (sb, \" *\");\n\t\t}\n\t}\n\n\tchar* tmp1 = r_strbuf_get (sb);\n\tif (r_str_startswith (tmp1, \"unsigned long long\")) {\n\t\tr_strbuf_set (sb, \"uint64_t\");\n\t} else if (r_str_startswith (tmp1, \"unsigned\")) {\n\t\tr_strbuf_set (sb, \"uint32_t\");\n\t} else if (r_str_startswith (tmp1, \"int\")) {\n\t\tr_strbuf_set (sb, \"int32_t\");\n\t}\n\tr_anal_var_set_type (var, r_strbuf_get (sb));\n\tr_strbuf_free (sb);\n}\n\nstatic void get_src_regname(RCore *core, ut64 addr, char *regname, int size) {\n\tRAnal *anal = core->anal;\n\tRAnalOp *op = r_core_anal_op (core, addr, R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_ESIL);\n\tif (!op || r_strbuf_is_empty (&op->esil)) {\n\t\tr_anal_op_free (op);\n\t\treturn;\n\t}\n\tchar *op_esil = strdup (r_strbuf_get (&op->esil));\n\tchar *tmp = strchr (op_esil, ',');\n\tif (tmp) {\n\t\t*tmp = '\\0';\n\t}\n\tmemset (regname, 0, size);\n\tRRegItem *ri = r_reg_get (anal->reg, op_esil, -1);\n\tif (ri) {\n\t\tif ((anal->bits == 64) && (ri->size == 32)) {\n\t\t\tconst char *reg = r_reg_32_to_64 (anal->reg, op_esil);\n\t\t\tif (reg) {\n\t\t\t\tfree (op_esil);\n\t\t\t\top_esil = strdup (reg);\n\t\t\t}\n\t\t}\n\t\tstrncpy (regname, op_esil, size - 1);\n\t}\n\tfree (op_esil);\n\tr_anal_op_free (op);\n}\n\nstatic ut64 get_addr(Sdb *trace, const char *regname, int idx) {\n\tif (!regname || !*regname) {\n\t\treturn UT64_MAX;\n\t}\n\tconst char *query = sdb_fmt (\"%d.reg.read.%s\", idx, regname);\n\treturn r_num_math (NULL, sdb_const_get (trace, query, 0));\n}\n\nstatic _RAnalCond cond_invert(RAnal *anal, _RAnalCond cond) {\n\tswitch (cond) {\n\tcase R_ANAL_COND_LE:\n\t\treturn R_ANAL_COND_GT;\n\tcase R_ANAL_COND_LT:\n\t\treturn R_ANAL_COND_GE;\n\tcase R_ANAL_COND_GE:\n\t\treturn R_ANAL_COND_LT;\n\tcase R_ANAL_COND_GT:\n\t\treturn R_ANAL_COND_LE;\n\tdefault:\n\t\tif (anal->verbose) {\n\t\t\teprintf (\"Unhandled conditional swap\\n\");\n\t\t}\n\t\tbreak;\n\t}\n\treturn 0; // 0 is COND_ALways...\n\t/* I haven't looked into it but I suspect that this might be confusing:\n\tthe opposite of any condition not in the list above is \"always\"? */\n}\n\nstatic RList *parse_format(RCore *core, char *fmt) {\n\tif (!fmt || !*fmt) {\n\t\treturn NULL;\n\t}\n\tRList *ret = r_list_new ();\n\tif (!ret) {\n\t\treturn NULL;\n\t}\n\tSdb *s = core->anal->sdb_fmts;\n\tconst char *spec = r_config_get (core->config, \"anal.types.spec\");\n\tchar arr[10] = {0};\n\tchar *ptr = strchr (fmt, '%');\n\tfmt[strlen (fmt) - 1] = '\\0';\n\twhile (ptr) {\n\t\tptr++;\n\t\t// strip [width] specifier\n\t\twhile (IS_DIGIT (*ptr)) {\n\t\t\tptr++;\n\t\t}\n\t\tr_str_ncpy (arr, ptr, sizeof (arr) - 1);\n\t\tchar *tmp = arr;\n\t\twhile (tmp && (IS_LOWER (*tmp) || IS_UPPER (*tmp))) {\n\t\t\ttmp++;\n\t\t}\n\t\t*tmp = '\\0';\n\t\tconst char *query = sdb_fmt (\"spec.%s.%s\", spec, arr);\n\t\tchar *type = (char *) sdb_const_get (s, query, 0);\n\t\tif (type) {\n\t\t\tr_list_append (ret, type);\n\t\t}\n\t\tptr = strchr (ptr, '%');\n\t}\n\treturn ret;\n}\n\nstatic void retype_callee_arg(RAnal *anal, const char *callee_name, bool in_stack, const char *place, int size, const char *type) {\n\tRAnalFunction *fcn = r_anal_get_function_byname (anal, callee_name);\n\tif (!fcn) {\n\t\treturn;\n\t}\n\tif (in_stack) {\n\t\tRAnalVar *var = r_anal_function_get_var (fcn, R_ANAL_VAR_KIND_BPV, size - fcn->bp_off + 8);\n\t\tif (!var) {\n\t\t\treturn;\n\t\t}\n\t\t__var_retype (anal, var, NULL, type, false, false);\n\t} else {\n\t\tRRegItem *item = r_reg_get (anal->reg, place, -1);\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\t\tRAnalVar *rvar = r_anal_function_get_var (fcn, R_ANAL_VAR_KIND_REG, item->index);\n\t\tif (!rvar) {\n\t\t\treturn;\n\t\t}\n\t\tchar *t = strdup (type);\n\t\t__var_retype (anal, rvar, NULL, type, false, false);\n\t\tRAnalVar *lvar = r_anal_var_get_dst_var (rvar);\n\t\tif (lvar) {\n\t\t\t__var_retype (anal, lvar, NULL, t, false, false);\n\t\t}\n\t\tfree (t);\n\t}\n}\n\n#define DEFAULT_MAX 3\n#define REGNAME_SIZE 10\n#define MAX_INSTR 5\n\n/**\n * type match at a call instruction inside another function\n *\n * \\param fcn_name name of the callee\n * \\param addr addr of the call instruction\n * \\param baddr addr of the caller function\n * \\param cc cc of the callee\n * \\param prev_idx index in the esil trace\n * \\param userfnc whether the callee is a user function (affects propagation direction)\n * \\param caddr addr of the callee\n */\nstatic void type_match(RCore *core, char *fcn_name, ut64 addr, ut64 baddr, const char* cc,\n\t\tint prev_idx, bool userfnc, ut64 caddr) {\n\tSdb *trace = core->anal->esil->trace->db;\n\tSdb *TDB = core->anal->sdb_types;\n\tRAnal *anal = core->anal;\n\tRList *types = NULL;\n\tint idx = sdb_num_get (trace, \"idx\", 0);\n\tbool verbose = r_config_get_i (core->config, \"anal.types.verbose\");\n\tbool stack_rev = false, in_stack = false, format = false;\n\n\tif (!fcn_name || !cc) {\n\t\treturn;\n\t}\n\tint i, j, pos = 0, size = 0, max = r_type_func_args_count (TDB, fcn_name);\n\tconst char *place = r_anal_cc_arg (anal, cc, ST32_MAX);\n\tr_cons_break_push (NULL, NULL);\n\n\tif (place && !strcmp (place, \"stack_rev\")) {\n\t\tstack_rev = true;\n\t}\n\tplace = r_anal_cc_arg (anal, cc, 0);\n\tif (place && r_str_startswith (\"stack\", place)) {\n\t\tin_stack = true;\n\t}\n\tif (verbose && !strncmp (fcn_name, \"sym.imp.\", 8)) {\n\t\teprintf (\"%s missing function definition\\n\", fcn_name + 8);\n\t}\n\tif (!max) {\n\t\tif (!in_stack) {\n\t\t\tmax = r_anal_cc_max_arg (anal, cc);\n\t\t} else {\n\t\t\tmax = DEFAULT_MAX;\n\t\t}\n\t}\n\tfor (i = 0; i < max; i++) {\n\t\tint arg_num = stack_rev ? (max - 1 - i) : i;\n\t\tchar *type = NULL;\n\t\tconst char *name = NULL;\n\t\tif (format) {\n\t\t\tif (r_list_empty (types)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttype = r_str_new (r_list_get_n (types, pos++));\n\t\t} else {\n\t\t\ttype = r_type_func_args_type (TDB, fcn_name, arg_num);\n\t\t\tname = r_type_func_args_name (TDB, fcn_name, arg_num);\n\t\t}\n\t\tif (!type && !userfnc) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (!in_stack) {\n\t\t\t//XXX: param arg_num must be fixed to support floating point register\n\t\t\tplace = r_anal_cc_arg (anal, cc, arg_num);\n\t\t\tif (place && r_str_startswith (\"stack\", place)) {\n\t\t\t\tin_stack = true;\n\t\t\t}\n\t\t}\n\t\tchar regname[REGNAME_SIZE] = {0};\n\t\tut64 xaddr = UT64_MAX;\n\t\tbool memref = false;\n\t\tbool cmt_set = false;\n\t\tbool res = false;\n\t\t// Backtrace instruction from source sink to prev source sink\n\t\tfor (j = idx; j >= prev_idx; j--) {\n\t\t\tut64 instr_addr = sdb_num_get (trace, sdb_fmt (\"%d.addr\", j), 0);\n\t\t\tif (instr_addr < baddr) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRAnalOp *op = r_core_anal_op (core, instr_addr, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_VAL);\n\t\t\tif (!op) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRAnalOp *next_op = r_core_anal_op (core, instr_addr + op->size, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_VAL);\n\t\t\tif (!next_op || (j != idx && (next_op->type == R_ANAL_OP_TYPE_CALL\n\t\t\t\t\t\t\t|| next_op->type == R_ANAL_OP_TYPE_JMP))) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tr_anal_op_free (next_op);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRAnalVar *var = r_anal_get_used_function_var (anal, op->addr);\n\t\t\tconst char *query = sdb_fmt (\"%d.mem.read\", j);\n\t\t\tif (op->type == R_ANAL_OP_TYPE_MOV && sdb_const_get (trace, query, 0)) {\n\t\t\t\tmemref = ! (!memref && var && (var->kind != R_ANAL_VAR_KIND_REG));\n\t\t\t}\n\t\t\t// Match type from function param to instr\n\t\t\tif (type_pos_hit (anal, trace, in_stack, j, size, place)) {\n\t\t\t\tif (!cmt_set && type && name) {\n\t\t\t\t\tr_meta_set_string (anal, R_META_TYPE_VARTYPE, instr_addr,\n\t\t\t\t\t\t\tsdb_fmt (\"%s%s%s\", type, r_str_endswith (type, \"*\") ? \"\" : \" \", name));\n\t\t\t\t\tcmt_set = true;\n\t\t\t\t\tif ((op->ptr && op->ptr != UT64_MAX) && !strcmp (name, \"format\")) {\n\t\t\t\t\t\tRFlagItem *f = r_flag_get_by_spaces (core->flags, op->ptr, R_FLAGS_FS_STRINGS, NULL);\n\t\t\t\t\t\tif (f) {\n\t\t\t\t\t\t\tchar formatstr[0x200];\n\t\t\t\t\t\t\tint read = r_io_nread_at (core->io, f->offset, (ut8 *)formatstr, R_MIN (sizeof (formatstr) - 1, f->size));\n\t\t\t\t\t\t\tif (read > 0) {\n\t\t\t\t\t\t\t\tformatstr[read] = '\\0';\n\t\t\t\t\t\t\t\tif ((types = parse_format (core, formatstr))) {\n\t\t\t\t\t\t\t\t\tmax += r_list_length (types);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tformat = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (var) {\n\t\t\t\t\tif (!userfnc) {\n\t\t\t\t\t\t// not a userfunction, propagate the callee's arg types into our function's vars\n\t\t\t\t\t\t__var_retype (anal, var, name, type, memref, false);\n\t\t\t\t\t\t__var_rename (anal, var, name, addr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// callee is a userfunction, propagate our variable's type into the callee's args\n\t\t\t\t\t\tretype_callee_arg (anal, fcn_name, in_stack, place, size, var->type);\n\t\t\t\t\t}\n\t\t\t\t\tres = true;\n\t\t\t\t} else {\n\t\t\t\t\tget_src_regname (core, instr_addr, regname, sizeof (regname));\n\t\t\t\t\txaddr = get_addr (trace, regname, j);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Type propagate by following source reg\n\t\t\tif (!res && *regname && SDB_CONTAINS (j, regname)) {\n\t\t\t\tif (var) {\n\t\t\t\t\tif (!userfnc) {\n\t\t\t\t\t\t// not a userfunction, propagate the callee's arg types into our function's vars\n\t\t\t\t\t\t__var_retype (anal, var, name, type, memref, false);\n\t\t\t\t\t\t__var_rename (anal, var, name, addr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// callee is a userfunction, propagate our variable's type into the callee's args\n\t\t\t\t\t\tretype_callee_arg (anal, fcn_name, in_stack, place, size, var->type);\n\t\t\t\t\t}\n\t\t\t\t\tres = true;\n\t\t\t\t} else {\n\t\t\t\t\tswitch (op->type) {\n\t\t\t\t\tcase R_ANAL_OP_TYPE_MOV:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_PUSH:\n\t\t\t\t\t\tget_src_regname (core, instr_addr, regname, sizeof (regname));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase R_ANAL_OP_TYPE_LEA:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_LOAD:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_STORE:\n\t\t\t\t\t\tres = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (var && res && xaddr && (xaddr != UT64_MAX)) { // Type progation using value\n\t\t\t\tchar tmp[REGNAME_SIZE] = {0};\n\t\t\t\tget_src_regname (core, instr_addr, tmp, sizeof (tmp));\n\t\t\t\tut64 ptr = get_addr (trace, tmp, j);\n\t\t\t\tif (ptr == xaddr) {\n\t\t\t\t\t__var_retype (anal, var, name, r_str_get_fail (type, \"int\"), memref, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_anal_op_free (op);\n\t\t\tr_anal_op_free (next_op);\n\t\t}\n\t\tsize += anal->bits / 8;\n\t\tfree (type);\n\t}\n\tr_list_free (types);\n\tr_cons_break_pop ();\n}\n\nstatic int bb_cmpaddr(const void *_a, const void *_b) {\n\tconst RAnalBlock *a = _a, *b = _b;\n\treturn a->addr > b->addr ? 1 : (a->addr < b->addr ? -1 : 0);\n}\n\nR_API void r_core_anal_type_match(RCore *core, RAnalFunction *fcn) {\n\tRAnalBlock *bb;\n\tRListIter *it;\n\tRAnalOp aop = {0};\n\tbool resolved = false;\n\n\tr_return_if_fail (core && core->anal && fcn);\n\n\tif (!core->anal->esil) {\n\t\teprintf (\"Please run aeim\\n\");\n\t\treturn;\n\t}\n\n\tRAnal *anal = core->anal;\n\tSdb *TDB = anal->sdb_types;\n\tbool chk_constraint = r_config_get_i (core->config, \"anal.types.constraint\");\n\tint ret, bsize = R_MAX (64, core->blocksize);\n\tconst int mininstrsz = r_anal_archinfo (anal, R_ANAL_ARCHINFO_MIN_OP_SIZE);\n\tconst int minopcode = R_MAX (1, mininstrsz);\n\tint cur_idx , prev_idx = 0;\n\tRConfigHold *hc = r_config_hold_new (core->config);\n\tif (!hc) {\n\t\treturn;\n\t}\n\tRDebugTrace *dt = NULL;\n\tRAnalEsilTrace *et = NULL;\n\tif (!anal_emul_init (core, hc, &dt, &et) || !fcn) {\n\t\tanal_emul_restore (core, hc, dt, et);\n\t\treturn;\n\t}\n\tut8 *buf = malloc (bsize);\n\tif (!buf) {\n\t\tanal_emul_restore (core, hc, dt, et);\n\t\treturn;\n\t}\n\n\t// Reserve bigger ht to avoid rehashing\n\tSdb *etracedb = core->anal->esil->trace->db;\n\tHtPPOptions opt = etracedb->ht->opt;\n\tht_pp_free (etracedb->ht);\n\tetracedb->ht = ht_pp_new_size (fcn->ninstr * 0xf, opt.dupvalue, opt.freefn, opt.calcsizeV);\n\tetracedb->ht->opt = opt;\n\tRDebugTrace *dtrace = core->dbg->trace;\n\topt = dtrace->ht->opt;\n\tht_pp_free (dtrace->ht);\n\tdtrace->ht = ht_pp_new_size (fcn->ninstr, opt.dupvalue, opt.freefn, opt.calcsizeV);\n\tdtrace->ht->opt = opt;\n\n\tchar *fcn_name = NULL;\n\tchar *ret_type = NULL;\n\tbool str_flag = false;\n\tbool prop = false;\n\tbool prev_var = false;\n\tchar prev_type[256] = {0};\n\tconst char *prev_dest = NULL;\n\tchar *ret_reg = NULL;\n\tconst char *_pc = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);\n\tif (!_pc) {\n\t\tfree (buf);\n\t\treturn;\n\t}\n\tchar *pc = strdup (_pc);\n\tRRegItem *r = r_reg_get (core->dbg->reg, pc, -1);\n\tif (!r) {\n\t\tfree (buf);\n\t\treturn;\n\t}\n\tr_cons_break_push (NULL, NULL);\n\tr_list_sort (fcn->bbs, bb_cmpaddr); // TODO: The algorithm can be more accurate if blocks are followed by their jmp/fail, not just by address\n\tr_list_foreach (fcn->bbs, it, bb) {\n\t\tut64 addr = bb->addr;\n\t\tint i = 0;\n\t\tr_reg_set_value (core->dbg->reg, r, addr);\n\t\twhile (1) {\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tgoto out_function;\n\t\t\t}\n\t\t\tif (i >= (bsize - 32)) {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t\tut64 pcval = r_reg_getv (anal->reg, pc);\n\t\t\tif ((addr >= bb->addr + bb->size) || (addr < bb->addr) || pcval != addr) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!i) {\n\t\t\t\tr_io_read_at (core->io, addr, buf, bsize);\n\t\t\t}\n\t\t\tret = r_anal_op (anal, &aop, addr, buf + i, bsize - i, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_VAL);\n\t\t\tif (ret <= 0) {\n\t\t\t\ti += minopcode;\n\t\t\t\taddr += minopcode;\n\t\t\t\tr_anal_op_fini (&aop);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint loop_count = sdb_num_get (anal->esil->trace->db, sdb_fmt (\"0x%\"PFMT64x\".count\", addr), 0);\n\t\t\tif (loop_count > LOOP_MAX || aop.type == R_ANAL_OP_TYPE_RET) {\n\t\t\t\tr_anal_op_fini (&aop);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsdb_num_set (anal->esil->trace->db, sdb_fmt (\"0x%\"PFMT64x\".count\", addr), loop_count + 1, 0);\n\t\t\tif (r_anal_op_nonlinear (aop.type)) {   // skip the instr\n\t\t\t\tr_reg_set_value (core->dbg->reg, r, addr + ret);\n\t\t\t} else {\n\t\t\t\tr_core_esil_step (core, UT64_MAX, NULL, NULL, false);\n\t\t\t}\n\t\t\tbool userfnc = false;\n\t\t\tSdb *trace = anal->esil->trace->db;\n\t\t\tcur_idx = sdb_num_get (trace, \"idx\", 0);\n\t\t\tRAnalVar *var = r_anal_get_used_function_var (anal, aop.addr);\n\t\t\tRAnalOp *next_op = r_core_anal_op (core, addr + ret, R_ANAL_OP_MASK_BASIC); // | _VAL ?\n\t\t\tut32 type = aop.type & R_ANAL_OP_TYPE_MASK;\n\t\t\tif (aop.type == R_ANAL_OP_TYPE_CALL || aop.type & R_ANAL_OP_TYPE_UCALL) {\n\t\t\t\tchar *full_name = NULL;\n\t\t\t\tut64 callee_addr;\n\t\t\t\tif (aop.type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t\t\tRAnalFunction *fcn_call = r_anal_get_fcn_in (anal, aop.jump, -1);\n\t\t\t\t\tif (fcn_call) {\n\t\t\t\t\t\tfull_name = fcn_call->name;\n\t\t\t\t\t\tcallee_addr = fcn_call->addr;\n\t\t\t\t\t}\n\t\t\t\t} else if (aop.ptr != UT64_MAX) {\n\t\t\t\t\tRFlagItem *flag = r_flag_get_by_spaces (core->flags, aop.ptr, R_FLAGS_FS_IMPORTS, NULL);\n\t\t\t\t\tif (flag && flag->realname) {\n\t\t\t\t\t\tfull_name = flag->realname;\n\t\t\t\t\t\tcallee_addr = aop.ptr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (full_name) {\n\t\t\t\t\tif (r_type_func_exist (TDB, full_name)) {\n\t\t\t\t\t\tfcn_name = strdup (full_name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfcn_name = r_type_func_guess (TDB, full_name);\n\t\t\t\t\t}\n\t\t\t\t\tif (!fcn_name) {\n\t\t\t\t\t\tfcn_name = strdup (full_name);\n\t\t\t\t\t\tuserfnc = true;\n\t\t\t\t\t}\n\t\t\t\t\tconst char* Cc = r_anal_cc_func (anal, fcn_name);\n\t\t\t\t\tif (Cc && r_anal_cc_exist (anal, Cc)) {\n\t\t\t\t\t\tchar *cc = strdup (Cc);\n\t\t\t\t\t\ttype_match (core, fcn_name, addr, bb->addr, cc, prev_idx, userfnc, callee_addr);\n\t\t\t\t\t\tprev_idx = cur_idx;\n\t\t\t\t\t\tR_FREE (ret_type);\n\t\t\t\t\t\tconst char *rt = r_type_func_ret (TDB, fcn_name);\n\t\t\t\t\t\tif (rt) {\n\t\t\t\t\t\t\tret_type = strdup (rt);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tR_FREE (ret_reg);\n\t\t\t\t\t\tconst char *rr = r_anal_cc_ret (anal, cc);\n\t\t\t\t\t\tif (rr) {\n\t\t\t\t\t\t\tret_reg = strdup (rr);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolved = false;\n\t\t\t\t\t\tfree (cc);\n\t\t\t\t\t}\n\t\t\t\t\tif (!strcmp (fcn_name, \"__stack_chk_fail\")) {\n\t\t\t\t\t\tconst char *query = sdb_fmt (\"%d.addr\", cur_idx - 1);\n\t\t\t\t\t\tut64 mov_addr = sdb_num_get (trace, query, 0);\n\t\t\t\t\t\tRAnalOp *mop = r_core_anal_op (core, mov_addr, R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_BASIC);\n\t\t\t\t\t\tif (mop) {\n\t\t\t\t\t\t\tRAnalVar *mopvar = r_anal_get_used_function_var (anal, mop->addr);\n\t\t\t\t\t\t\tut32 type = mop->type & R_ANAL_OP_TYPE_MASK;\n\t\t\t\t\t\t\tif (type == R_ANAL_OP_TYPE_MOV) {\n\t\t\t\t\t\t\t\t__var_rename (anal, mopvar, \"canary\", addr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_anal_op_free (mop);\n\t\t\t\t\t}\n\t\t\t\t\tfree (fcn_name);\n\t\t\t\t}\n\t\t\t} else if (!resolved && ret_type && ret_reg) {\n\t\t\t\t// Forward propgation of function return type\n\t\t\t\tchar src[REGNAME_SIZE] = {0};\n\t\t\t\tconst char *query = sdb_fmt (\"%d.reg.write\", cur_idx);\n\t\t\t\tconst char *cur_dest = sdb_const_get (trace, query, 0);\n\t\t\t\tget_src_regname (core, aop.addr, src, sizeof (src));\n\t\t\t\tif (ret_reg && *src && strstr (ret_reg, src)) {\n\t\t\t\t\tif (var && aop.direction == R_ANAL_OP_DIR_WRITE) {\n\t\t\t\t\t\t__var_retype (anal, var, NULL, ret_type, false, false);\n\t\t\t\t\t\tresolved = true;\n\t\t\t\t\t} else if (type == R_ANAL_OP_TYPE_MOV) {\n\t\t\t\t\t\tR_FREE (ret_reg);\n\t\t\t\t\t\tif (cur_dest) {\n\t\t\t\t\t\t\tret_reg = strdup (cur_dest);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (cur_dest) {\n\t\t\t\t\tchar *foo = strdup (cur_dest);\n\t\t\t\t\tchar *tmp = strchr (foo, ',');\n\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t*tmp++ = '\\0';\n\t\t\t\t\t}\n\t\t\t\t\tif (ret_reg && (strstr (ret_reg, foo) || (tmp && strstr (ret_reg, tmp)))) {\n\t\t\t\t\t\tresolved = true;\n\t\t\t\t\t} else if (type == R_ANAL_OP_TYPE_MOV &&\n\t\t\t\t\t\t\t(next_op && next_op->type == R_ANAL_OP_TYPE_MOV)){\n\t\t\t\t\t\t// Progate return type passed using pointer\n\t\t\t\t\t\t// int *ret; *ret = strlen(s);\n\t\t\t\t\t\t// TODO: memref check , dest and next src match\n\t\t\t\t\t\tchar nsrc[REGNAME_SIZE] = {0};\n\t\t\t\t\t\tget_src_regname (core, next_op->addr, nsrc, sizeof (nsrc));\n\t\t\t\t\t\tif (ret_reg && *nsrc && strstr (ret_reg, nsrc) && var &&\n\t\t\t\t\t\t\t\taop.direction == R_ANAL_OP_DIR_READ) {\n\t\t\t\t\t\t\t__var_retype (anal, var, NULL, ret_type, true, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfree (foo);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Type propagation using instruction access pattern\n\t\t\tif (var) {\n\t\t\t\tbool sign = false;\n\t\t\t\tif ((type == R_ANAL_OP_TYPE_CMP) && next_op) {\n\t\t\t\t\tif (next_op->sign) {\n\t\t\t\t\t\tsign = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// cmp [local_ch], rax ; jb\n\t\t\t\t\t\t__var_retype (anal, var, NULL, \"unsigned\", false, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// cmp [local_ch], rax ; jge\n\t\t\t\tif (sign || aop.sign) {\n\t\t\t\t\t__var_retype (anal, var, NULL, \"signed\", false, true);\n\t\t\t\t}\n\t\t\t\t// lea rax , str.hello  ; mov [local_ch], rax;\n\t\t\t\t// mov rdx , [local_4h] ; mov [local_8h], rdx;\n\t\t\t\tif (prev_dest && (type == R_ANAL_OP_TYPE_MOV || type == R_ANAL_OP_TYPE_STORE)) {\n\t\t\t\t\tchar reg[REGNAME_SIZE] = {0};\n\t\t\t\t\tget_src_regname (core, addr, reg, sizeof (reg));\n\t\t\t\t\tbool match = strstr (prev_dest, reg) != NULL;\n\t\t\t\t\tif (str_flag && match) {\n\t\t\t\t\t\t__var_retype (anal, var, NULL, \"const char *\", false, false);\n\t\t\t\t\t}\n\t\t\t\t\tif (prop && match && prev_var) {\n\t\t\t\t\t\t__var_retype (anal, var, NULL, prev_type, false, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (chk_constraint && var && (type == R_ANAL_OP_TYPE_CMP && aop.disp != UT64_MAX)\n\t\t\t\t\t\t&& next_op && next_op->type == R_ANAL_OP_TYPE_CJMP) {\n\t\t\t\t\tbool jmp = false;\n\t\t\t\t\tRAnalOp *jmp_op = {0};\n\t\t\t\t\tut64 jmp_addr = next_op->jump;\n\t\t\t\t\tRAnalBlock *jmpbb = r_anal_fcn_bbget_in (anal, fcn, jmp_addr);\n\n\t\t\t\t\t// Check exit status of jmp branch\n\t\t\t\t\tfor (i = 0; i < MAX_INSTR ; i++) {\n\t\t\t\t\t\tjmp_op = r_core_anal_op (core, jmp_addr, R_ANAL_OP_MASK_BASIC);\n\t\t\t\t\t\tif (!jmp_op) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((jmp_op->type == R_ANAL_OP_TYPE_RET && r_anal_block_contains (jmpbb, jmp_addr))\n\t\t\t\t\t\t\t\t|| jmp_op->type == R_ANAL_OP_TYPE_CJMP) {\n\t\t\t\t\t\t\tjmp = true;\n\t\t\t\t\t\t\tr_anal_op_free (jmp_op);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjmp_addr += jmp_op->size;\n\t\t\t\t\t\tr_anal_op_free (jmp_op);\n\t\t\t\t\t}\n\t\t\t\t\tRAnalVarConstraint constr = {\n\t\t\t\t\t\t.cond = jmp? cond_invert (anal, next_op->cond): next_op->cond,\n\t\t\t\t\t\t.val = aop.val\n\t\t\t\t\t};\n\t\t\t\t\tr_anal_var_add_constraint (var, &constr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprev_var = (var && aop.direction == R_ANAL_OP_DIR_READ);\n\t\t\tstr_flag = false;\n\t\t\tprop = false;\n\t\t\tprev_dest = NULL;\n\t\t\tswitch (type) {\n\t\t\tcase R_ANAL_OP_TYPE_MOV:\n\t\t\tcase R_ANAL_OP_TYPE_LEA:\n\t\t\tcase R_ANAL_OP_TYPE_LOAD:\n\t\t\t\tif (aop.ptr && aop.refptr && aop.ptr != UT64_MAX) {\n\t\t\t\t\tif (type == R_ANAL_OP_TYPE_LOAD) {\n\t\t\t\t\t\tut8 buf[256] = {0};\n\t\t\t\t\t\tr_io_read_at (core->io, aop.ptr, buf, sizeof (buf) - 1);\n\t\t\t\t\t\tut64 ptr = r_read_ble (buf, core->print->big_endian, aop.refptr * 8);\n\t\t\t\t\t\tif (ptr && ptr != UT64_MAX) {\n\t\t\t\t\t\t\tRFlagItem *f = r_flag_get_by_spaces (core->flags, ptr, R_FLAGS_FS_STRINGS, NULL);\n\t\t\t\t\t\t\tif (f) {\n\t\t\t\t\t\t\t\tstr_flag = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (r_flag_exist_at (core->flags, \"str\", 3, aop.ptr)) {\n\t\t\t\t\t\tstr_flag = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// mov dword [local_4h], str.hello;\n\t\t\t\tif (var && str_flag) {\n\t\t\t\t\t__var_retype (anal, var, NULL, \"const char *\", false, false);\n\t\t\t\t}\n\t\t\t\tconst char *query = sdb_fmt (\"%d.reg.write\", cur_idx);\n\t\t\t\tprev_dest = sdb_const_get (trace, query, 0);\n\t\t\t\tif (var) {\n\t\t\t\t\tstrncpy (prev_type, var->type, sizeof (prev_type) - 1);\n\t\t\t\t\tprop = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti += ret;\n\t\t\taddr += ret;\n\t\t\tr_anal_op_free (next_op);\n\t\t\tr_anal_op_fini (&aop);\n\n\t\t}\n\t}\n\t// Type propgation for register based args\n\tRList *list = r_anal_var_list (anal, fcn, R_ANAL_VAR_KIND_REG);\n\tRAnalVar *rvar;\n\tRListIter *iter;\n\tr_list_foreach (list, iter, rvar) {\n\t\tRAnalVar *lvar = r_anal_var_get_dst_var (rvar);\n\t\tRRegItem *i = r_reg_index_get (anal->reg, rvar->delta);\n\t\tif (!i) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (lvar) {\n\t\t\t// Propagate local var type = to => register-based var\n\t\t\t__var_retype (anal, rvar, NULL, lvar->type, false, false);\n\t\t\t// Propagate local var type <= from = register-based var\n\t\t\t__var_retype (anal, lvar, NULL, rvar->type, false, false);\n\t\t}\n\t}\n\tr_list_free (list);\nout_function:\n\tR_FREE (ret_reg);\n\tR_FREE (ret_type);\n\tfree (buf);\n\tr_cons_break_pop();\n\tanal_emul_restore (core, hc, dt, et);\n\tfree (pc);\n}\n", "/* radare - LGPL - Copyright 2009-2021 - pancake, maijin */\n\n#include <r_core.h>\n#include <r_util/r_graph_drawable.h>\n\n#define SLOW_ANALYSIS 1\n#define MAX_SCAN_SIZE 0x7ffffff\n// should be 1 unless it makes the CI sad\n\nstatic const char *help_msg_a[] = {\n\t\"Usage:\", \"a\", \"[abdefFghoprxstc] [...]\",\n\t\"a\", \"\", \"alias for aai - analysis information\",\n\t\"a*\", \"\", \"same as afl*;ah*;ax*\",\n\t\"aa\", \"[?]\", \"analyze all (fcns + bbs) (aa0 to avoid sub renaming)\",\n\t\"a8\", \" [hexpairs]\", \"analyze bytes\",\n\t\"ab\", \"[?]\", \"analyze basic block\",\n\t\"ac\", \"[?]\", \"manage classes\",\n\t\"aC\", \"[?]\", \"analyze function call\",\n\t\"ad\", \"[?]\", \"analyze data trampoline (wip)\",\n\t\"ad\", \" [from] [to]\", \"analyze data pointers to (from-to)\",\n\t\"ae\", \"[?] [expr]\", \"analyze opcode eval expression (see ao)\",\n\t\"af\", \"[?]\", \"analyze functions\",\n\t\"aF\", \"\", \"same as above, but using anal.depth=1\",\n\t\"ag\", \"[?] [options]\", \"draw graphs in various formats\",\n\t\"ah\", \"[?]\", \"analysis hints (force opcode size, ...)\",\n\t\"ai\", \" [addr]\", \"address information (show perms, stack, heap, ...)\",\n\t\"aj\", \"\", \"same as a* but in json (aflj)\",\n\t\"aL\", \"\", \"list all asm/anal plugins (e asm.arch=?)\",\n\t\"an\", \"[?] [name]\", \"show/rename/create whatever var/flag/function is used in current instruction\",\n\t\"ao\", \"[?] [len]\", \"analyze Opcodes (or emulate it)\",\n\t\"aO\", \"[?] [len]\", \"Analyze N instructions in M bytes\",\n\t\"ap\", \"\", \"find prelude for current offset\",\n\t\"ar\", \"[?]\", \"like 'dr' but for the esil vm. (registers)\",\n\t\"as\", \"[?] [num]\", \"analyze syscall using dbg.reg\",\n\t\"av\", \"[?] [.]\", \"show vtables\",\n\t\"avg\", \"[?] [.]\", \"manage global variables\",\n\t\"ax\", \"[?]\", \"manage refs/xrefs (see also afx?)\",\n\tNULL\n};\n\nstatic const char *help_msg_afna[] = {\n\t\"Usage:\", \"afna\", \" # construct a function name and rename the function for the current offset.\",\n\t\"\", \"\", \"Based on flags or methods calls found inside that function.\",\n\tNULL\n};\n\nstatic const char *help_msg_afu[] = {\n\t\"Usage:\", \"afu\", \"[addr]   # resize and analyze function from current address until addr.\",\n\t\"afu\", \" 0x100004093\", \"Resize and analyze function from current address until 0x100004093\",\n\tNULL\n};\n\nstatic const char *help_msg_afm[] = {\n\t\"Usage:\", \"afm\", \"[name]   # merge two functions.\",\n\t\"afm\", \" sym.func.100003d74\", \"Merge current function into 0x100003d74\",\n\tNULL\n};\n\nstatic const char *help_msg_aF[] = {\n\t\"Usage:\", \"aF\", \" # analyze a function, but using anal.depth=1\",\n\t\"aF\", \"\", \"Check af? for more options and information.\",\n\tNULL\n};\n\nstatic const char *help_msg_an[] = {\n\t\"Usage:\", \"an\", \" # show flag/function/name at current address\",\n\t\"an\", \"\", \"ShowCheck af? for more options and information.\",\n\t\"anj\", \"\", \"Same as above but in json\",\n\tNULL\n};\n\nstatic const char *help_msg_a8[] = {\n\t\"Usage:\", \"a8\", \"[hexpairs]   # analyze the byte array given as input\",\n\t\"a8 \", \"5548\", \"analyzes 5548 byte array\",\n\tNULL\n};\n\n\nstatic const char *help_msg_ap[] = {\n\t\"Usage:\", \"ap[?]\", \" # analyze prelude in current offset\",\n\t\"ap\", \"\", \"check if current offset contains a function prelude\",\n\tNULL\n};\n\nstatic const char *help_msg_avg[] = {\n\t\"Usage:\", \"avg\", \" # analyze variable global\",\n\t\"avg\", \"\", \"Use ESIL emulation to find out arguments of a call (uses 'abte')\",\n\t\"avg\", \" [type] [name]\", \"add global\",\n\t\"avg-\", \"\", \"delete global\",\n\tNULL\n};\n\nstatic const char *help_msg_aC[] = {\n\t\"Usage:\", \"aC[fej] [addr-of-call]\", \" # analyze call args\",\n\t\"aCe\", \"\", \"Use ESIL emulation to find out arguments of a call (uses 'abte')\",\n\t\"aCf\", \"\", \"Same as .aCe* $$ @@=`pdr~call`\",\n\tNULL\n};\n\nstatic const char *help_msg_aaf[] = {\n\t\"Usage:\", \"aaf[efrt?]\", \" # analyse all functionsee also 'af' and 'afna'\",\n\t\"aaf\", \"\", \"same as afr@@c:isq\",\n\t\"aafe\", \" \", \"same as aef@@F\",\n\t\"aaff\", \"\", \"set a flag for every function\", \n\t\"aafr\", \" [len]\", \"consecutive function analysis (e anal.hasnext=1;afr@@c:isq)\",\n\t\"aaft\", \"\", \"recursive type matching across all functions\",\n\tNULL\n};\n\nstatic const char *help_msg_aa[] = {\n\t\"Usage:\", \"aa[0*?]\", \" # see also 'af' and 'afna'\",\n\t\"aa\", \" \", \"alias for 'af@@ sym.*;af@entry0;afva'\", //;.afna @@ fcn.*'\",\n\t\"aaa\", \"[?]\", \"autoname functions after aa (see afna)\",\n\t\"aab\", \"\", \"abb across bin.sections.rx\",\n\t\"aac\", \" [len]\", \"analyze function calls (af @@ `pi len~call[1]`)\",\n\t\"aac*\", \" [len]\", \"flag function calls without performing a complete analysis\",\n\t\"aad\", \" [len]\", \"analyze data references to code\",\n\t\"aae\", \" [len] ([addr])\", \"analyze references with ESIL (optionally to address)\",\n\t\"aaef\", \"\", \"analyze references with ESIL in all functions\",\n\t\"aaf\", \"[efrt?] \", \"analyze all functions relationships with flags, type matching and consecutive\",\n\t\"aaF\", \" [sym*]\", \"set anal.in=block for all the spaces between flags matching glob\",\n\t\"aaFa\", \" [sym*]\", \"same as aaF but uses af/a2f instead of af+/afb+ (slower but more accurate)\",\n\t\"aai\", \"[j]\", \"show info of all analysis parameters\",\n\t\"aan\", \"[gr?]\", \"autoname functions (aang = golang, aanr = noreturn propagation)\",\n\t\"aao\", \"\", \"analyze all objc references\",\n\t\"aap\", \"\", \"find and analyze function preludes\",\n\t\"aar\", \"[?] [len]\", \"analyze len bytes of instructions for references\",\n\t\"aas\", \" [len]\", \"analyze symbols (af @@= `isq~[0]`)\",\n\t\"aaS\", \"\", \"analyze all flags starting with sym. (af @@ sym.*)\",\n\t\"aat\", \" [fcn]\", \"Analyze all/given function to convert immediate to linked structure offsets (see tl?)\",\n\t\"aaT\", \" [len]\", \"analyze code after trap-sleds\",\n\t\"aau\", \" [len]\", \"list mem areas (larger than len bytes) not covered by functions\",\n\t\"aav\", \" [sat]\", \"find values referencing a specific section or map\",\n\t\"aaw\", \"\", \"analyze all meta words (Cd) and add r. named flags for referenced pointers\",\n\tNULL\n};\n\nstatic const char *help_msg_afls[] = {\n\t\"Usage:\", \"afls\", \"[afls] # sort function list\",\n\t\"afls\", \"\", \"same as aflsa\",\n\t\"aflsa\", \"\", \"sort by address (same as afls)\",\n\t\"aflss\", \"\", \"sort by size\",\n\t\"aflsn\", \"\", \"sort by name\",\n\t\"aflsb\", \"\", \"sort by number of basic blocks\",\n\tNULL\n};\n\nstatic const char *help_msg_ai[] = {\n\t\"Usage:\", \"ai\", \"[j*] [sz] # analysis/address information/imports\",\n\t\"ai\", \" @addr\", \"show address information\",\n\t\"aii\", \" [namespace]\", \"global import (like afii, but global)\",\n\t\"aii\", \"-\", \"delete all global imports\",\n\t\"aij\", \" @addr\", \"show address information in JSON format\",\n\tNULL\n};\n\nstatic const char *help_msg_aar[] = {\n\t\"Usage:\", \"aar\", \"[j*] [sz] # search and analyze xrefs\",\n\t\"aar\", \" [sz]\", \"analyze xrefs in current section or sz bytes of code\",\n\t\"aar*\", \" [sz]\", \"list found xrefs in radare commands format\",\n\t\"aarj\", \" [sz]\", \"list found xrefs in JSON format\",\n\tNULL\n};\n\nstatic const char *help_msg_ab[] = {\n\t\"Usage:\", \"ab\", \"# analyze basic block\",\n\t\"ab\", \" [addr]\", \"show basic block information at given address\",\n\t\"ab.\", \"\", \"same as: ab $$\",\n\t\"aba\", \" [addr]\", \"analyze esil accesses in basic block (see aea?)\",\n\t\"abb\", \" [length]\", \"analyze N bytes and extract basic blocks\",\n\t\"abj\", \" [addr]\", \"display basic block information in JSON\",\n\t\"abl\", \"[,qj]\", \"list all basic blocks\",\n\t\"abx\", \" [hexpair-bytes]\", \"analyze N bytes\",\n\t\"abt\", \"[?] [addr] [num]\", \"find num paths from current offset to addr\",\n\tNULL\n};\n\nstatic const char *help_msg_abl[] = {\n\t\"Usage:\", \"abl\", \"analyzed basicblocks listing\",\n\t\"abl\", \"\", \"list all program-wide basic blocks analyzed\",\n\t\"abl,\", \" [table-query]\", \"render the list using a table\",\n\t\"ablj\", \"\", \"in json format\",\n\t\"ablq\", \"\", \"in quiet format\",\n\tNULL\n};\n\nstatic const char *help_msg_abt[] = {\n\t\"Usage:\", \"abt\", \"[addr] [num] # find num paths from current offset to addr\",\n\t\"abt\", \" [addr] [num]\", \"find num paths from current offset to addr\",\n\t\"abte\", \" [addr]\", \"emulate from beginning of function to the given address\",\n\t\"abtj\", \" [addr] [num]\", \"display paths in JSON\",\n\tNULL\n};\n\nstatic const char *help_msg_ac[] = {\n\t\"Usage:\", \"ac\", \"anal classes commands\",\n\t\"acl\", \"[j*]\", \"list all classes\",\n\t\"acll\", \"[j] (class_name)\", \"list all or single class detailed\",\n\t\"ac\", \" [class name]\", \"add class\",\n\t\"ac-\", \" [class name]\", \"delete class\",\n\t\"acn\", \" [class name] [new class name]\", \"rename class\",\n\t\"acv\", \" [class name] [addr] ([offset]) ([size])\", \"add vtable address to class\",\n\t\"acvf\", \" [offset] ([class name])\", \"lookup function address on vtable offset\",\n\t\"acv-\", \" [class name] [vtable id]\", \"delete vtable by id (from acv [class name])\",\n\t\"acb\", \" [class name]\", \"list bases of class\",\n\t\"acb\", \" [class name] [base class name] ([offset])\", \"add base class\",\n\t\"acb-\", \" [class name] [base class id]\", \"delete base by id (from acb [class name])\",\n\t\"acm\", \" [class name] [method name] [offset] ([vtable offset])\", \"add/edit method\",\n\t\"acm-\", \" [class name] [method name]\", \"delete method\",\n\t\"acmn\", \" [class name] [method name] [new name]\", \"rename method\",\n\t\"acg\", \"\", \"print inheritance ascii graph\",\n\t\"ac?\", \"\", \"show this help\",\n\tNULL\n};\n\nstatic const char *help_msg_ad[] = {\n\t\"Usage:\", \"ad\", \"[kt] [...]\",\n\t\"ad\", \" [N] [D]\", \"analyze N data words at D depth\",\n\t\"ad4\", \" [N] [D]\", \"analyze N data words at D depth (asm.bits=32)\",\n\t\"ad8\", \" [N] [D]\", \"analyze N data words at D depth (asm.bits=64)\",\n\t\"adf\", \"\", \"analyze data in function (use like .adf @@=`afl~[0]`\",\n\t\"adfg\", \"\", \"analyze data in function gaps\",\n\t\"adt\", \"\", \"analyze data trampolines (wip)\",\n\t\"adk\", \"\", \"analyze data kind (code, text, data, invalid, ...)\",\n\tNULL\n};\n\nstatic const char *help_msg_aei[] = {\n\t\"Usage:\", \"aei\", \"[smp] [...]\",\n\t\"aei\", \"\", \"initialize ESIL VM state (aei- to deinitialize)\",\n\t\"aeis\", \" argc [argv] [envp]\", \"initialize entrypoint stack environment\",\n\t\"aeim\", \" [addr] [size] [name]\", \"initialize ESIL VM stack (aeim- remove)\",\n\t\"aeip\", \"\", \"initialize ESIL program counter to curseek\",\n\tNULL\n};\n\nstatic const char *help_msg_ae[] = {\n\t\"Usage:\", \"ae[idesr?] [arg]\", \"ESIL code emulation\",\n\t\"ae\", \" [expr]\", \"evaluate ESIL expression\",\n\t\"ae?\", \"\", \"show this help\",\n\t\"ae??\", \"\", \"show ESIL help\",\n\t\"aea\", \"[f] [count]\", \"analyse n esil instructions accesses (regs, mem..)\",\n\t\"aeA\", \"[f] [count]\", \"analyse n bytes for their esil accesses (regs, mem..)\",\n\t\"aeC\", \"[arg0 arg1..] @ addr\", \"appcall in esil\",\n\t\"aec\", \"[?]\", \"continue until ^C\",\n\t\"aecs\", \"\", \"continue until syscall\",\n\t\"aecc\", \"\", \"continue until call\",\n\t\"aecu\", \" [addr]\", \"continue until address\",\n\t\"aecue\", \" [esil]\", \"continue until esil expression match\",\n\t\"aef\", \" [addr]\", \"emulate function\",\n\t\"aefa\", \" [addr]\", \"emulate function to find out args in given or current offset\",\n\t\"aeg\", \" [expr]\", \"esil data flow graph\",\n\t\"aegf\", \" [expr] [register]\", \"esil data flow graph filter\",\n\t\"aei\", \"\", \"initialize ESIL VM state (aei- to deinitialize)\",\n\t\"aeis\", \" argc [argv] [envp]\", \"initialize entrypoint stack environment\",\n\t\"aeim\", \" [addr] [size] [name]\", \"initialize ESIL VM stack (aeim- remove)\",\n\t\"aeip\", \"\", \"initialize ESIL program counter to curseek\",\n\t\"aek\", \" [query]\", \"perform sdb query on ESIL.info\",\n\t\"aek-\", \"\", \"resets the ESIL.info sdb instance\",\n\t\"aeL\", \"\", \"list ESIL plugins\",\n\t\"aep\", \"[?] [addr]\", \"manage esil pin hooks (see 'e cmd.esil.pin')\",\n\t\"aepc\", \" [addr]\", \"change esil PC to this address\",\n\t\"aer\", \" [..]\", \"handle ESIL registers like 'ar' or 'dr' does\",\n\t\"aes\", \"\", \"perform emulated debugger step\",\n\t\"aesp\", \" [X] [N]\", \"evaluate N instr from offset X\",\n\t\"aesb\", \"\", \"step back\",\n\t\"aeso\", \" \", \"step over\",\n\t\"aesou\", \" [addr]\", \"step over until given address\",\n\t\"aess\", \" \", \"step skip (in case of CALL, just skip, instead of step into)\",\n\t\"aesu\", \" [addr]\", \"step until given address\",\n\t\"aesue\", \" [esil]\", \"step until esil expression match\",\n\t\"aesuo\", \" [optype]\", \"step until given opcode type\",\n\t\"aets\", \"[?]\", \"ESIL Trace session\",\n\t\"aev\", \" [esil]\", \"visual esil debugger for the given expression or current instruction\",\n\t\"aex\", \" [hex]\", \"evaluate opcode expression\",\n\tNULL\n};\n\nstatic const char *help_detail_ae[] = {\n\t\"Examples:\", \"ESIL\", \" examples and documentation\",\n\t\"=\", \"\", \"assign updating internal flags\",\n\t\":=\", \"\", \"assign without updating internal flags\",\n\t\"+=\", \"\", \"A+=B => B,A,+=\",\n\t\"+\", \"\", \"A=A+B => B,A,+,A,=\",\n\t\"++\", \"\", \"increment, 2,A,++ == 3 (see rsi,--=[1], ... )\",\n\t\"--\", \"\", \"decrement, 2,A,-- == 1\",\n\t\"*=\", \"\", \"A*=B => B,A,*=\",\n\t\"/=\", \"\", \"A/=B => B,A,/=\",\n\t\"%=\", \"\", \"A%=B => B,A,%=\",\n\t\"&=\", \"\", \"and ax, bx => bx,ax,&=\",\n\t\"|\", \"\", \"or r0, r1, r2 => r2,r1,|,r0,=\",\n\t\"!=\", \"\", \"negate all bits\",\n\t\"^=\", \"\", \"xor ax, bx => bx,ax,^=\",\n\t\"\", \"[]\", \"mov eax,[eax] => eax,[],eax,=\",\n\t\"=\", \"[]\", \"mov [eax+3], 1 => 1,3,eax,+,=[]\",\n\t\"=\", \"[1]\", \"mov byte[eax],1 => 1,eax,=[1]\",\n\t\"=\", \"[8]\", \"mov [rax],1 => 1,rax,=[8]\",\n\t\"[]\", \"\", \"peek from random position\",\n\t\"[N]\", \"\", \"peek word of N bytes from popped address\",\n\t\"[*]\", \"\", \"peek some from random position\",\n\t\"=\", \"[*]\", \"poke some at random position\",\n\t\"$\", \"\", \"int 0x80 => 0x80,$\",\n\t\"$$\", \"\", \"simulate a hardware trap\",\n\t\"==\", \"\", \"pops twice, compare and update esil flags\",\n\t\"<\", \"\", \"compare for smaller\",\n\t\"<=\", \"\", \"compare for smaller or equal\",\n\t\">\", \"\", \"compare for bigger\",\n\t\">=\", \"\", \"compare bigger for or equal\",\n\t\">>=\", \"\", \"shr ax, bx => bx,ax,>>=  # shift right\",\n\t\"<<=\", \"\", \"shl ax, bx => bx,ax,<<=  # shift left\",\n\t\">>>=\", \"\", \"ror ax, bx => bx,ax,>>>=  # rotate right\",\n\t\"<<<=\", \"\", \"rol ax, bx => bx,ax,<<<=  # rotate left\",\n\t\"?{\", \"\", \"if popped value != 0 run the block until }\",\n\t\"POP\", \"\", \"drops last element in the esil stack\",\n\t\"DUP\", \"\", \"duplicate last value in stack\",\n\t\"NUM\", \"\", \"evaluate last item in stack to number\",\n\t\"SWAP\", \"\", \"swap last two values in stack\",\n\t\"TRAP\", \"\", \"stop execution\",\n\t\"BITS\", \"\", \"16,BITS  # change bits, useful for arm/thumb\",\n\t\"TODO\", \"\", \"the instruction is not yet esilized\",\n\t\"STACK\", \"\", \"show contents of stack\",\n\t\"CLEAR\", \"\", \"clears the esil stack\",\n\t\"REPEAT\", \"\", \"repeat n times\",\n\t\"BREAK\", \"\", \"terminates the string parsing\",\n\t\"SETJT\", \"\", \"set jump target\",\n\t\"SETJTS\", \"\", \"set jump target set\",\n\t\"SETD\", \"\", \"set delay slot\",\n\t\"GOTO\", \"\", \"jump to the Nth word popped from the stack\",\n\t\"$\", \"\", \"esil interrupt\",\n\t\"$z\", \"\", \"internal flag: zero\",\n\t\"$c\", \"\", \"internal flag: carry\",\n\t\"$b\", \"\", \"internal flag: borrow\",\n\t\"$p\", \"\", \"internal flag: parity\",\n\t\"$s\", \"\", \"internal flag: sign\",\n\t\"$o\", \"\", \"internal flag: overflow\",\n\t\"$ds\", \"\", \"internal flag: delay-slot\",\n\t\"$jt\", \"\", \"internal flag: jump-target\",\n\t\"$js\", \"\", \"internal flag: jump-target-set\",\n\t// DEPRECATED \"$r\", \"\", \"internal flag: jump-sign\",\n\t\"$$\", \"\", \"internal flag: pc address\",\n\tNULL\n};\n\nstatic const char *help_msg_aea[] = {\n\t\"Examples:\", \"aea\", \" show regs and memory accesses used in a range\",\n\t\"aea\", \"  [ops]\", \"Show regs/memory accesses used in N instructions \",\n\t\"aea*\", \" [ops]\", \"Create mem.* flags for memory accesses\",\n\t\"aeab\", \"\", \"Show regs used in current basic block\",\n\t\"aeaf\", \"\", \"Show regs used in current function\",\n\t\"aear\", \" [ops]\", \"Show regs read in N instructions\",\n\t\"aeaw\", \" [ops]\", \"Show regs written in N instructions\",\n\t\"aean\", \" [ops]\", \"Show regs not written in N instructions\",\n\t\"aeaj\", \" [ops]\", \"Show aea output in JSON format\",\n\t\"aeA\", \"  [len]\", \"Show regs used in N bytes (subcommands are the same)\",\n\t\"Legend:\", \"\", \"\",\n\t\"I\", \"\", \"input registers (read before being set)\",\n\t\"A\", \"\", \"all regs accessed\",\n\t\"R\", \"\", \"register values read\",\n\t\"W\", \"\", \"registers written\",\n\t\"N\", \"\", \"read but never written\",\n\t\"V\", \"\", \"values\",\n\t\"@R\", \"\", \"memreads\",\n\t\"@W\", \"\", \"memwrites\",\n\t\"NOTE:\", \"\", \"mem{reads,writes} with PIC only fetch the offset\",\n\tNULL\n};\n\nstatic const char *help_msg_aec[] = {\n\t\"Examples:\", \"aec\", \" continue until ^c\",\n\t\"aec\", \"\", \"Continue until exception\",\n\t\"aecs\", \"\", \"Continue until syscall\",\n\t\"aecc\", \"\", \"Continue until call\",\n\t\"aecu\", \"[addr]\", \"Continue until address\",\n\t\"aecue\", \"[addr]\", \"Continue until esil expression\",\n\tNULL\n};\n\nstatic const char *help_msg_aeC[] = {\n\t\"Examples:\", \"aeC\", \" arg0 arg1 ... @ calladdr\",\n\t\"aeC\", \" 1 2 @ sym._add\", \"Call sym._add(1,2)\",\n\tNULL\n};\n\nstatic const char *help_msg_aeg[] = {\n\t\"Usage:\", \"aeg[cfiv*]\", \" [...]\",\n\t\"aeg\", \"\", \"analyze current instruction as an esil graph\",\n\t\"aegf\", \"\", \"analyze given expression and filter for register\",\n\t\"aeg*\", \"\", \"analyze current instruction as an esil graph\",\n\t\"aegv\", \"\", \"analyse and launch the visual interactive mode (.aeg*;aggv == aegv)\",\n\tNULL\n};\n\nstatic const char *help_msg_aep[] = {\n\t\"Usage:\", \"aep[-*c] \", \" [...]\",\n\t\"aepc\", \" [addr]\", \"change program counter for esil\",\n\t\"aep*\", \"\", \"list pins in r2 commands\",\n\t\"aep-\", \"*\", \"remove all pins\",\n\t\"aep-\", \"[addr]\", \"remove pin\",\n\t\"aep\", \" [name] @ [addr]\", \"set pin\",\n\t\"aep\", \"\", \"list pins\",\n\tNULL\n};\n\nstatic const char *help_msg_aets[] = {\n\t\"Usage:\", \"aets \", \" [...]\",\n\t\"aets+\", \"\", \"Start ESIL trace session\",\n\t\"aets-\", \"\", \"Stop ESIL trace session\",\n\tNULL\n};\n\nstatic const char *help_msg_af[] = {\n\t\"Usage:\", \"af\", \"\",\n\t\"af\", \" ([name]) ([addr])\", \"analyze functions (start at addr or $$)\",\n\t\"afr\", \" ([name]) ([addr])\", \"analyze functions recursively\",\n\t\"af+\", \" addr name [type] [diff]\", \"hand craft a function (requires afb+)\",\n\t\"af-\", \" [addr]\", \"clean all function analysis data (or function at addr)\",\n\t\"afa\", \"\", \"analyze function arguments in a call (afal honors dbg.funcarg)\",\n\t\"afb+\", \" fcnA bbA sz [j] [f] ([t]( [d]))\", \"add bb to function @ fcnaddr\",\n\t\"afb\", \"[?] [addr]\", \"List basic blocks of given function\",\n\t\"afbF\", \"([0|1])\", \"Toggle the basic-block 'folded' attribute\",\n\t\"afB\", \" 16\", \"set current function as thumb (change asm.bits)\",\n\t\"afC[lc]\", \" ([addr])@[addr]\", \"calculate the Cycles (afC) or Cyclomatic Complexity (afCc)\",\n\t\"afc\", \"[?] type @[addr]\", \"set calling convention for function\",\n\t\"afd\", \"[addr]\",\"show function + delta for given offset\",\n\t\"afF\", \"[1|0|]\", \"fold/unfold/toggle\",\n\t\"afi\", \" [addr|fcn.name]\", \"show function(s) information (verbose afl)\",\n\t\"afj\", \" [tableaddr] [elem_sz] [count] [seg]\", \"analyze function jumptable (adding seg to each elem)\",\n\t\"afl\", \"[?] [ls*] [fcn name]\", \"list functions (addr, size, bbs, name) (see afll)\",\n\t\"afm\", \" name\", \"merge two functions\",\n\t\"afM\", \" name\", \"print functions map\",\n\t\"afn\", \"[?] name [addr]\", \"rename name for function at address (change flag too)\",\n\t\"afna\", \"\", \"suggest automatic name for current offset\",\n\t\"afo\", \"[?j] [fcn.name]\", \"show address for the function name or current offset\",\n\t\"afs\", \"[!] ([fcnsign])\", \"get/set function signature at current address (afs! uses cfg.editor)\",\n\t\"afS\", \"[stack_size]\", \"set stack frame size for function at current address\",\n\t\"afsr\", \" [function_name] [new_type]\", \"change type for given function\",\n\t\"aft\", \"[?]\", \"type matching, type propagation\",\n\t\"afu\", \" addr\", \"resize and analyze function from current address until addr\",\n\t\"afv[absrx]\", \"?\", \"manipulate args, registers and variables in function\",\n\t\"afx\", \"[m]\", \"list function references\",\n\tNULL\n};\n\nstatic const char *help_msg_afb[] = {\n\t\"Usage:\", \"afb\", \" List basic blocks of given function\",\n\t\".afbr-\", \"\", \"Set breakpoint on every return address of the function\",\n\t\".afbr-*\", \"\", \"Remove breakpoint on every return address of the function\",\n\t\"afb\", \" [addr]\", \"list basic blocks of function\",\n\t\"afb.\", \" [addr]\", \"show info of current basic block\",\n\t\"afb=\", \"\", \"display ascii-art bars for basic block regions\",\n\t\"afb+\", \" fcn_at bbat bbsz [jump] [fail] ([diff])\", \"add basic block by hand\",\n\t\"afbc\", \" [color] ([addr])\", \"colorize basic block\",\n\t\"afbe\", \" bbfrom bbto\", \"add basic-block edge for switch-cases\",\n\t\"afbi\", \"[j]\", \"print current basic block information\",\n\t\"afbj\", \" [addr]\", \"show basic blocks information in json\",\n\t\"afbr\", \"\", \"Show addresses of instructions which leave the function\",\n\t\"afbt\", \"\", \"Show basic blocks of current function in a table\",\n\t\"afB\", \" [bits]\", \"define asm.bits for the given function\",\n\tNULL\n};\n\nstatic const char *help_msg_afc[] = {\n\t\"Usage:\", \"afc[agl?]\", \"# see also tcc command to manage all calling conventions\",\n\t\"afc\", \" ccname\", \"Manually set calling convention for current function\",\n\t\"afc\", \"\", \"Show Calling convention for the Current function (same as tcc)\",\n\t\"afcr\", \"[j]\", \"Show register usage for the current function\",\n\t\"afca\", \"\", \"Analyse function for finding the current calling convention\",\n\t\"afcf\", \"[j] [name]\", \"Prints return type function(arg1, arg2...), see afij\",\n\t\"afck\", \"\", \"List SDB details of call loaded calling conventions\",\n\t\"afcl\", \"\", \"List all available calling conventions\",\n\t\"afco\", \" path\", \"Open Calling Convention sdb profile from given path\",\n\t\"afcR\", \"\", \"Register telescoping using the calling conventions order\",\n\tNULL\n};\n\nstatic const char *help_msg_afC[] = {\n\t\"Usage:\", \"afC\", \" [addr]\",\n\t\"afC\", \"\", \"function cycles cost\",\n\t\"afCc\", \"\", \"cyclomatic complexity\",\n\t\"afCl\", \"\", \"loop count (backward jumps)\",\n\tNULL\n};\n\nstatic const char *help_msg_afi[] = {\n\t\"Usage:\", \"afi[jlp*]\", \" <addr>\",\n\t\"afi\", \"\", \"show information of the function\",\n\t\"afii\", \"[-][import]\", \"show/add/delete imports used in function\",\n\t\"afi.\", \"\", \"show function name in current offset\",\n\t\"afi*\", \"\", \"function, variables and arguments\",\n\t\"afij\", \"\", \"function info in json format\",\n\t\"afil\", \"\", \"verbose function info\",\n\t\"afip\", \"\", \"show whether the function is pure or not\",\n\t\"afis\", \"\", \"show function stats (opcode, meta)\",\n\tNULL\n};\n\nstatic const char *help_msg_afl[] = {\n\t\"Usage:\", \"afl\", \" List all functions\",\n\t\"afl\", \"\", \"list functions\",\n\t\"afl.\", \"\", \"display function in current offset (see afi.)\",\n\t\"afl+\", \"\", \"display sum all function sizes\",\n\t\"afl=\", \"\", \"display ascii-art bars with function ranges\",\n\t\"aflc\", \"\", \"count of functions\",\n\t\"aflj\", \"\", \"list functions in json\",\n\t\"aflt\", \" [query]\", \"list functions in table format\",\n\t\"afll\", \" [column]\", \"list functions in verbose mode (sorted by column name)\",\n\t\"afllj\", \"\", \"list functions in verbose mode (alias to aflj)\",\n\t\"aflm\", \"\", \"list functions in makefile style (af@@=`aflm~0x`)\",\n\t\"aflq\", \"\", \"list functions in quiet mode\",\n\t\"aflqj\", \"\", \"list functions in json quiet mode\",\n\t\"afls\", \"[?asn]\", \"sort function list by address, size or name\",\n\tNULL\n};\n\nstatic const char *help_msg_afll[] = {\n\t\"Usage:\", \"\", \" List functions in verbose mode\",\n\t\"\", \"\", \"\",\n\t\"Table fields:\", \"\", \"\",\n\t\"\", \"\", \"\",\n\t\"address\", \"\", \"start address\",\n\t\"size\", \"\", \"function size (realsize)\",\n\t\"nbbs\", \"\", \"number of basic blocks\",\n\t\"edges\", \"\", \"number of edges between basic blocks\",\n\t\"cc\", \"\", \"cyclomatic complexity ( cc = edges - blocks + 2 * exit_blocks)\",\n\t\"cost\", \"\", \"cyclomatic cost\",\n\t\"min bound\", \"\", \"minimal address\",\n\t\"range\", \"\", \"function size\",\n\t\"max bound\", \"\", \"maximal address\",\n\t\"calls\", \"\", \"number of caller functions\",\n\t\"locals\", \"\", \"number of local variables\",\n\t\"args\", \"\", \"number of function arguments\",\n\t\"xref\", \"\", \"number of cross references\",\n\t\"frame\", \"\", \"function stack size\",\n\t\"name\", \"\", \"function name\",\n\tNULL\n};\n\nstatic const char *help_msg_afn[] = {\n\t\"Usage:\", \"afn[sa]\", \" Analyze function names\",\n\t\"afn\", \" [name]\", \"rename the function\",\n\t\"afn\", \" base64:encodedname\", \"rename the function\",\n\t\"afn.\", \"\", \"same as afn without arguments. show the function name in current offset\",\n\t\"afna\", \"\", \"construct a function name for the current offset\",\n\t\"afns\", \"\", \"list all strings associated with the current function\",\n\t\"afnsj\", \"\", \"list all strings associated with the current function in JSON format\",\n\tNULL\n};\n\nstatic const char *help_msg_afs[] = {\n\t\"Usage:\", \"afs[r]\", \" Analyze function signatures\",\n\t\"afs\", \"[!] ([fcnsign])\", \"get/set function signature at current address (afs! uses cfg.editor)\",\n\t\"afs*\", \" ([signame])\", \"get function signature in flags\",\n\t\"afsj\", \" ([signame])\", \"get function signature in JSON\",\n\t\"afsr\", \" [function_name] [new_type]\", \"change type for given function\",\n\tNULL\n};\n\nstatic const char *help_msg_aft[] = {\n\t\"Usage:\", \"aft\", \"\",\n\t\"aft\", \"\", \"type matching analysis for current function\",\n\tNULL\n};\n\nstatic const char *help_msg_afv[] = {\n\t\"Usage:\", \"afv\",\"[rbs]\",\n\t\"afv*\", \"\", \"output r2 command to add args/locals to flagspace\",\n\t\"afv-\", \"([name])\", \"remove all or given var\",\n\t\"afv=\", \"\", \"list function variables and arguments with disasm refs\",\n\t\"afva\", \"\", \"analyze function arguments/locals\",\n\t\"afvb\", \"[?]\", \"manipulate bp based arguments/locals\",\n\t\"afvd\", \" name\", \"output r2 command for displaying the value of args/locals in the debugger\",\n\t\"afvf\", \"\", \"show BP relative stackframe variables\",\n\t\"afvn\", \" [new_name] ([old_name])\", \"rename argument/local\",\n\t\"afvr\", \"[?]\", \"manipulate register based arguments\",\n\t\"afvR\", \" [varname]\", \"list addresses where vars are accessed (READ)\",\n\t\"afvs\", \"[?]\", \"manipulate sp based arguments/locals\",\n\t\"afvt\", \" [name] [new_type]\", \"change type for given argument/local\",\n\t\"afvW\", \" [varname]\", \"list addresses where vars are accessed (WRITE)\",\n\t\"afvx\", \"\", \"show function variable xrefs (same as afvR+afvW)\",\n\tNULL\n};\n\nstatic const char *help_msg_afvb[] = {\n\t\"Usage:\", \"afvb\", \" [idx] [name] ([type])\",\n\t\"afvb\", \"\", \"list base pointer based arguments, locals\",\n\t\"afvb*\", \"\", \"same as afvb but in r2 commands\",\n\t\"afvb\", \" [idx] [name] ([type])\", \"define base pointer based arguments, locals\",\n\t\"afvbj\", \"\", \"return list of base pointer based arguments, locals in JSON format\",\n\t\"afvb-\", \" [name]\", \"delete argument/locals at the given name\",\n\t\"afvbg\", \" [idx] [addr]\", \"define var get reference\",\n\t\"afvbs\", \" [idx] [addr]\", \"define var set reference\",\n\tNULL\n};\n\nstatic const char *help_msg_afvr[] = {\n\t\"Usage:\", \"afvr\", \" [reg] [type] [name]\",\n\t\"afvr\", \"\", \"list register based arguments\",\n\t\"afvr*\", \"\", \"same as afvr but in r2 commands\",\n\t\"afvr\", \" [reg] [name] ([type])\", \"define register arguments\",\n\t\"afvrj\", \"\", \"return list of register arguments in JSON format\",\n\t\"afvr-\", \" [name]\", \"delete register arguments at the given index\",\n\t\"afvrg\", \" [reg] [addr]\", \"define argument get reference\",\n\t\"afvrs\", \" [reg] [addr]\", \"define argument set reference\",\n\tNULL\n};\n\nstatic const char *help_msg_afvs[] = {\n\t\"Usage:\", \"afvs\", \" [idx] [type] [name]\",\n\t\"afvs\", \"\", \"list stack based arguments and locals\",\n\t\"afvs*\", \"\", \"same as afvs but in r2 commands\",\n\t\"afvs\", \" [idx] [name] [type]\", \"define stack based arguments,locals\",\n\t\"afvsj\", \"\", \"return list of stack based arguments and locals in JSON format\",\n\t\"afvs-\", \" [name]\", \"delete stack based argument or locals with the given name\",\n\t\"afvsg\", \" [idx] [addr]\", \"define var get reference\",\n\t\"afvss\", \" [idx] [addr]\", \"define var set reference\",\n\tNULL\n};\n\nstatic const char *help_msg_ag[] = {\n\t\"Usage:\", \"ag<graphtype><format> [addr]\", \"\",\n\t\"Graph commands:\", \"\", \"\",\n\t\"aga\", \"[format]\", \"Data references graph\",\n\t\"agA\", \"[format]\", \"Global data references graph\",\n\t\"agc\", \"[format]\", \"Function callgraph\",\n\t\"agC\", \"[format]\", \"Global callgraph\",\n\t\"agd\", \"[format] [fcn addr]\", \"Diff graph\",\n\t\"agf\", \"[format]\", \"Basic blocks function graph\",\n\t\"agi\", \"[format]\", \"Imports graph\",\n\t\"agr\", \"[format]\", \"References graph\",\n\t\"agR\", \"[format]\", \"Global references graph\",\n\t\"agx\", \"[format]\", \"Cross references graph\",\n\t\"agg\", \"[format]\", \"Custom graph\",\n\t\"ag-\", \"\", \"Clear the custom graph\",\n\t\"agn\", \"[?] title body\", \"Add a node to the custom graph\",\n\t\"age\", \"[?] title1 title2\", \"Add an edge to the custom graph\",\n\t\"\",\"\",\"\",\n\t\"Output formats:\", \"\", \"\",\n\t\"<blank>\", \"\", \"Ascii art\",\n\t\"*\", \"\", \"r2 commands\",\n\t\"b\", \"\", \"Braile art rendering (agfb)\",\n\t\"d\", \"\", \"Graphviz dot\",\n\t\"g\", \"\", \"Graph Modelling Language (gml)\",\n\t\"j\", \"\", \"json ('J' for formatted disassembly)\",\n\t\"k\", \"\", \"SDB key-value\",\n\t\"t\", \"\", \"Tiny ascii art\",\n\t\"v\", \"\", \"Interactive ascii art\",\n\t\"w\", \" [path]\", \"Write to path or display graph image (see graph.gv.format and graph.web)\",\n\tNULL\n};\n\nstatic const char *help_msg_age[] = {\n\t\"Usage:\", \"age [title1] [title2]\", \"\",\n\t\"Examples:\", \"\", \"\",\n\t\"age\", \" title1 title2\", \"Add an edge from the node with \\\"title1\\\" as title to the one with title \\\"title2\\\"\",\n\t\"age\", \" \\\"title1 with spaces\\\" title2\", \"Add an edge from node \\\"title1 with spaces\\\" to node \\\"title2\\\"\",\n\t\"age-\", \" title1 title2\", \"Remove an edge from the node with \\\"title1\\\" as title to the one with title \\\"title2\\\"\",\n\t\"ageh\", \"\", \"List all the highlighted edges\",\n\t\"ageh\", \" nodeA nodeB\", \"Highlight edge between nodeA and nodeB\",\n\t\"ageh-\", \" nodeA nodeB\", \"Highlight edge between nodeA and nodeB\",\n\t\"age?\", \"\", \"Show this help\",\n\tNULL\n};\n\nstatic const char *help_msg_agn[] = {\n\t\"Usage:\", \"agn [title] [body]\", \"\",\n\t\"Examples:\", \"\", \"\",\n\t\"agn\", \" title1 body1\", \"Add a node with title \\\"title1\\\" and body \\\"body1\\\"\",\n\t\"agn\", \" \\\"title with space\\\" \\\"body with space\\\"\", \"Add a node with spaces in the title and in the body\",\n\t\"agn\", \" title1 base64:Ym9keTE=\", \"Add a node with the body specified as base64\",\n\t\"agn-\", \" title1\", \"Remove a node with title \\\"title1\\\"\",\n\t\"agn?\", \"\", \"Show this help\",\n\tNULL\n};\n\nstatic const char *help_msg_ah[] = {\n\t\"Usage:\", \"ah[lba-]\", \"Analysis Hints\",\n\t\"ah?\", \"\", \"show this help\",\n\t\"ah?\", \" offset\", \"show hint of given offset\",\n\t\"ah\", \"\", \"list hints in human-readable format\",\n\t\"ah.\", \"\", \"list hints in human-readable format from current offset\",\n\t\"ah-\", \"\", \"remove all hints\",\n\t\"ah-\", \" offset [size]\", \"remove hints at given offset\",\n\t\"ah*\", \" offset\", \"list hints in radare commands format\",\n\t\"aha\", \" ppc @ 0x42\", \"force arch ppc for all addrs >= 0x42 or until the next hint\",\n\t\"aha\", \" 0 @ 0x84\", \"disable the effect of arch hints for all addrs >= 0x84 or until the next hint\",\n\t\"ahb\", \"[-*] [8,16,32,64] @ 0x42\", \"get/set asm.bits for given address and beyond\",\n\t\"ahc\", \" 0x804804\", \"override call/jump address\",\n\t\"ahd\", \" foo a0,33\", \"replace opcode string\",\n\t\"ahe\", \" 3,eax,+=\", \"set vm analysis string\",\n\t\"ahf\", \" 0x804840\", \"override fallback address for call\",\n\t\"ahF\", \" 0x10\", \"set stackframe size at current offset\",\n\t\"ahh\", \" 0x804840\", \"highlight this address offset in disasm\",\n\t\"ahi\", \"[?] 10\", \"define numeric base for immediates (2, 8, 10, 10u, 16, i, p, S, s)\",\n\t\"ahj\", \"\", \"list hints in JSON\",\n\t\"aho\", \" call\", \"change opcode type (see aho?) (deprecated, moved to \\\"ahd\\\")\",\n\t\"ahp\", \" addr\", \"set pointer hint\",\n\t\"ahr\", \" val\", \"set hint for return value of a function\",\n\t\"ahs\", \" 4\", \"set opcode size=4\",\n\t\"ahS\", \" jz\", \"set asm.syntax=jz for this opcode\",\n\t\"aht\", \"[s][?] <type>\", \"Mark immediate as a type offset (deprecated, moved to \\\"aho\\\")\",\n\t\"ahv\", \" val\", \"change opcode's val field (useful to set jmptbl sizes in jmp rax)\",\n\tNULL\n};\n\nstatic const char *help_msg_aho[] = {\n\t\"Usage:\", \"aho [optype] [@ addr]\", \" Define opcode type hint\",\n\t\"aho\", \" nop\", \"change the opcode type in current address to be considered a NOP\",\n\t\"aho\", \"\", \"show the current opcode hint if any\",\n\t\"aho-\", \"$$\", \"delete hints in current offset\",\n\t\"aho*\", \"\", \"same as above but in r2 commands syntax\",\n\tNULL\n};\n\nstatic const char *help_msg_ahb[] = {\n\t\"Usage:\", \"ahb [8|16|32|64] [@ addr]\", \" Define asm.bits hint at given address\",\n\t\"ahb\", \" 16\", \"set asm.bits=16 in the given address\",\n\t\"ahb\", \"\", \"get asm.bits used in given addr (current seek)\",\n\t\"ahb\", \"-$$\", \"delete all the hints in the given address\",\n\t\"ahb*\", \"\", \"show defined bits hints as r2 commands\",\n\tNULL\n};\n\nstatic const char *help_msg_ahr[] = {\n\t\"Usage:\", \"ahr addr\", \" Set instruction as return type (similar to 'aho ret'?)\",\n\t\"ahr\", \" $$\", \"current instruction may be considered as the end of a function\",\n\tNULL\n};\n\nstatic const char *help_msg_ahi[] = {\n\t\"Usage:\", \"ahi [2|8|10|10u|16|bodhipSs] [@ offset]\", \" Define numeric base\",\n\t\"ahi\", \" <base>\", \"set numeric base (2, 8, 10, 16)\",\n\t\"ahi\", \" 10|d\", \"set base to signed decimal (10), sign bit should depend on receiver size\",\n\t\"ahi\", \" 10u|du\", \"set base to unsigned decimal (11)\",\n\t\"ahi\", \" b\", \"set base to binary (2)\",\n\t\"ahi\", \" o\", \"set base to octal (8)\",\n\t\"ahi\", \" h\", \"set base to hexadecimal (16)\",\n\t\"ahi\", \" i\", \"set base to IP address (32)\",\n\t\"ahi\", \" p\", \"set base to htons(port) (3)\",\n\t\"ahi\", \" S\", \"set base to syscall (80)\",\n\t\"ahi\", \" s\", \"set base to string (1)\",\n\t\"ahi1\", \" 10\", \"set base of argument 1 to base 10 (same as ahi1 d)\",\n\tNULL\n};\n\nstatic const char *help_msg_aht[] = {\n\t\"Usage:\", \"aht[s] [addr|type]\", \"Mark immediate as type offset (moved to aho)\",\n\t\"ahts\", \" <offset>\", \"List all matching structure offsets\",\n\t\"aht\", \" <struct.member>\", \"Change immediate to structure offset\",\n\t\"aht?\", \"\", \"show this help\",\n\tNULL\n};\n\nstatic const char *help_msg_ao[] = {\n\t\"Usage:\", \"ao[e?] [len]\", \"Analyze Opcodes\",\n\t\"aoj\", \" N\", \"display opcode analysis information in JSON for N opcodes\",\n\t\"aoe\", \" N\", \"display esil form for N opcodes\",\n\t\"aoeq\", \" N\", \"display only the esil expression of N opcodes\",\n\t\"aoef\", \" expr\", \"filter esil expression of opcode by given output\",\n\t\"aos\", \" N\", \"display size of N opcodes\",\n\t\"aom\", \" [id]\", \"list current or all mnemonics for current arch\",\n\t\"aod\", \" [mnemonic]\", \"describe opcode for asm.arch\",\n\t\"aoda\", \"\", \"show all mnemonic descriptions\",\n\t\"aoc\", \" [cycles]\", \"analyze which op could be executed in [cycles]\",\n\t\"ao\", \" 5\", \"display opcode analysis of 5 opcodes\",\n\t\"ao*\", \"\", \"display opcode in r commands\",\n\tNULL\n};\n\nstatic const char *help_msg_ar[] = {\n\t\"Usage: ar\", \"\", \"# Analysis Registers\",\n\t\"ar\", \"\", \"Show 'gpr' registers\",\n\t\"ar.\", \">$snapshot\", \"Show r2 commands to set register values to the current state\",\n\t\"ar,\", \"\", \"Show registers in table format (see dr,)\",\n\t\".ar*\", \"\", \"Import register values as flags\",\n\t\".ar-\", \"\", \"Unflag all registers\",\n\t\"ar0\", \"\", \"Reset register arenas to 0\",\n\t\"ara\", \"[?]\", \"Manage register arenas\",\n\t\"arj\", \"\", \"Show 'gpr' registers in JSON format\",\n\t\"arA\", \"\", \"Show values of function argument calls (A0, A1, A2, ..)\",\n\t\"ar\", \" 16\", \"Show 16 bit registers\",\n\t\"ar\", \" 32\", \"Show 32 bit registers\",\n\t\"ar\", \" all\", \"Show all bit registers\",\n\t\"ar\", \" <type>\", \"Show all registers of given type\",\n\t\"arC\", \"\", \"Display register profile comments\",\n\t\"arr\", \"\", \"Show register references (telescoping)\",\n\t\"arrj\", \"\", \"Show register references (telescoping) in JSON format\",\n\t\"ar=\", \"([size])(:[regs])\", \"Show register values in columns\",\n\t\"ar?\", \" <reg>\", \"Show register value\",\n\t\"arb\", \" <type>\", \"Display hexdump of the given arena\",\n\t\"arc\", \"[cq=] <name>\", \"Conditional flag registers\",\n\t\"arcc\", \"\", \"Derive calling convention from the register profile\",\n\t\"ard\", \" <name>\", \"Show only different registers\",\n\t\"arn\", \" <regalias>\", \"Get regname for pc,sp,bp,a0-3,zf,cf,of,sg\",\n\t\"aro\", \"\", \"Show old (previous) register values\",\n\t\"arp\", \"[?] <file>\", \"Load register profile from file\",\n\t\"ars\", \"\", \"Stack register state\",\n\t\"arS\", \"\", \"Show the size of the register profile\",\n\t\"art\", \"\", \"List all register types\",\n\t\"arw\", \" <hexnum>\", \"Set contents of the register arena\",\n\tNULL\n};\n\nstatic const char *help_msg_ara[] = {\n\t\"Usage:\", \"ara[+-s]\", \"Register Arena Push/Pop/Swap\",\n\t\"ara\", \"\", \"show all register arenas allocated\",\n\t\"ara\", \"+\", \"push a new register arena for each type\",\n\t\"ara\", \"-\", \"pop last register arena\",\n\t\"aras\", \"\", \"swap last two register arenas\",\n\tNULL\n};\n\nstatic const char *help_msg_arw[] = {\n\t\"Usage:\", \"arw \", \"# Set contents of the register arena\",\n\t\"arw\", \" <hexnum>\", \"Set contents of the register arena\",\n\tNULL\n};\n\nstatic const char *help_msg_as[] = {\n\t\"Usage: as[ljk?]\", \"\", \"syscall name <-> number utility\",\n\t\"as\", \"\", \"show current syscall and arguments\",\n\t\"as\", \" 4\", \"show syscall 4 based on asm.os and current regs/mem\",\n\t\"asc[a]\", \" 4\", \"dump syscall info in .asm or .h\",\n\t\"asj\", \"\", \"list of syscalls in JSON\",\n\t\"asl\", \"\", \"list of syscalls by asm.os and asm.arch\",\n\t\"asl\", \" close\", \"returns the syscall number for close\",\n\t\"asl\", \" 4\", \"returns the name of the syscall number 4\",\n\t\"ask\", \" [query]\", \"perform syscall/ queries\",\n\tNULL\n};\n\nstatic const char *help_msg_av[] = {\n\t\"Usage:\", \"av[?jr*]\", \" C++ vtables and RTTI\",\n\t\"av\", \"\", \"search for vtables in data sections and show results\",\n\t\"avj\", \"\", \"like av, but as json\",\n\t\"av*\", \"\", \"like av, but as r2 commands\",\n\t\"avr\", \"[j@addr]\", \"try to parse RTTI at vtable addr (see anal.cpp.abi)\",\n\t\"avra\", \"[j]\", \"search for vtables and try to parse RTTI at each of them\",\n\t\"avrr\", \"\", \"recover class info from all findable RTTI (see ac)\",\n\t\"avrD\", \" [classname]\", \"demangle a class name from RTTI\",\n\tNULL\n};\n\nstatic const char *help_msg_ax[] = {\n\t\"Usage:\", \"ax[?d-l*]\", \" # see also 'afx?'\",\n\t\"ax\", \"\", \"list refs\",\n\t\"ax*\", \"\", \"output radare commands\",\n\t\"ax\", \" addr [at]\", \"add code ref pointing to addr (from curseek)\",\n\t\"ax-\", \" [at]\", \"clean all refs/refs from addr\",\n\t\"ax-*\", \"\", \"clean all refs/refs\",\n\t\"axc\", \" addr [at]\", \"add generic code ref\",\n\t\"axC\", \" addr [at]\", \"add code call ref\",\n\t\"axg\", \" [addr]\", \"show xrefs graph to reach current function\",\n\t\"axg*\", \" [addr]\", \"show xrefs graph to given address, use .axg*;aggv\",\n\t\"axgj\", \" [addr]\", \"show xrefs graph to reach current function in json format\",\n\t\"axd\", \" addr [at]\", \"add data ref\",\n\t\"axq\", \"\", \"list refs in quiet/human-readable format\",\n\t\"axj\", \"\", \"list refs in json format\",\n\t\"axF\", \" [flg-glob]\", \"find data/code references of flags\",\n\t\"axm\", \" addr [at]\", \"copy data/code references pointing to addr to also point to curseek (or at)\",\n\t\"axt\", \"[?] [addr]\", \"find data/code references to this address\",\n\t\"axf\", \" [addr]\", \"find data/code references from this address\",\n\t\"axv\", \" [addr]\", \"list local variables read-write-exec references\",\n\t\"ax.\", \" [addr]\", \"find data/code references from and to this address\",\n\t\"axff[j]\", \" [addr]\", \"find data/code references from this function\",\n\t\"axs\", \" addr [at]\", \"add string ref\",\n\tNULL\n};\n\nstatic const char *help_msg_axt[]= {\n\t\"Usage:\", \"axt[?gq*]\", \"find data/code references to this address\",\n\t\"axtj\", \" [addr]\", \"find data/code references to this address and print in json format\",\n\t\"axtg\", \" [addr]\", \"display commands to generate graphs according to the xrefs\",\n\t\"axtq\", \" [addr]\", \"find and list the data/code references in quiet mode\",\n\t\"axt*\", \" [addr]\", \"same as axt, but prints as r2 commands\",\n\tNULL\n};\n\nstatic int cmpname(const void *_a, const void *_b) {\n\tconst RAnalFunction *a = _a, *b = _b;\n\treturn (int)strcmp (a->name, b->name);\n}\n\nstatic int cmpsize(const void *a, const void *b) {\n\tut64 sa = (int) r_anal_function_linear_size ((RAnalFunction *) a);\n\tut64 sb = (int) r_anal_function_linear_size ((RAnalFunction *) b);\n\treturn (sa > sb)? -1: (sa < sb)? 1 : 0;\n}\n\nstatic int cmpbbs(const void *_a, const void *_b) {\n\tconst RAnalFunction *a = _a, *b = _b;\n\tint la = (int)r_list_length (a->bbs);\n\tint lb = (int)r_list_length (b->bbs);\n\treturn (la > lb)? -1: (la < lb)? 1 : 0;\n}\n\nstatic int cmpaddr(const void *_a, const void *_b) {\n\tconst RAnalFunction *a = _a, *b = _b;\n\treturn (a->addr > b->addr)? 1: (a->addr < b->addr)? -1: 0;\n}\n\nstatic bool listOpDescriptions(void *_core, const char *k, const char *v) {\n        r_cons_printf (\"%s=%s\\n\", k, v);\n        return true;\n}\n\n/* better aac for windows-x86-32 */\n#define JAYRO_03 0\n\n#if JAYRO_03\n\nstatic bool anal_is_bad_call(RCore *core, ut64 from, ut64 to, ut64 addr, ut8 *buf, int bufi) {\n\tut64 align = R_ABS (addr % PE_ALIGN);\n\tut32 call_bytes;\n\n\t// XXX this is x86 specific\n\tif (align == 0) {\n\t\tcall_bytes = (ut32)((ut8*)buf)[bufi + 3] << 24;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 2] << 16;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 1] << 8;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi];\n\t} else {\n\t\tcall_bytes = (ut32)((ut8*)buf)[bufi - align + 3] << 24;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi - align + 2] << 16;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi - align + 1] << 8;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi - align];\n\t}\n\tif (call_bytes >= from && call_bytes <= to) {\n\t\treturn true;\n\t}\n\tcall_bytes = (ut32)((ut8*)buf)[bufi + 4] << 24;\n\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 3] << 16;\n\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 2] << 8;\n\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 1];\n\tcall_bytes += addr + 5;\n\tif (call_bytes >= from && call_bytes <= to) {\n\t\treturn false;\n\t}\n\treturn false;\n}\n#endif\n\n// function argument types and names into anal/types\nstatic void __add_vars_sdb(RCore *core, RAnalFunction *fcn) {\n\tRAnalFcnVarsCache cache;\n\tr_anal_fcn_vars_cache_init (core->anal, &cache, fcn);\n\tRListIter *iter;\n\tRAnalVar *var;\n\tsize_t arg_count = 0;\n\n\tchar *args = r_str_newf (\"func.%s.args\", fcn->name);\n\tRList *all_vars = cache.rvars;\n\tr_list_join (all_vars, cache.bvars);\n\tr_list_join (all_vars, cache.svars);\n#if 0\n\tr_list_foreach (all_vars, iter, var) {\n\t\tif (var->isarg) {\n\t\t\targ_count++;\n\t\t}\n\t}\n\tint old_arg_count = r_num_get (NULL, args);\n\tif (old_arg_count >= arg_count) {\n\t\treturn;\n\t}\n#endif\n\tr_list_foreach (all_vars, iter, var) {\n\t\tif (var->isarg) {\n\t\t\tchar *k = r_str_newf (\"func.%s.arg.%d\", fcn->name, (int)arg_count);\n\t\t\tconst char *o = sdb_const_get (core->anal->sdb_types, k, 0);\n\t\t\tchar *comma = o? strchr (o, ','): NULL;\n\t\t\tchar *db_type = comma? r_str_ndup (o, comma - o): NULL;\n\t\t\tchar *db_name = comma? strdup (comma + 1): NULL;\n\t\t\tif (!strstr (var->name, \"arg_\") || (o && strstr (o, \",arg_\"))) {\n\t\t\t\t// #if 0\n\t\t\t\tchar *k = r_str_newf (\"func.%s.arg.%d\", fcn->name, (int)arg_count);\n\t\t\t\t// eprintf (\"VARNAME %s %s %c\", var->name, db_name, 10);\n\t\t\t\t// eprintf (\"VARTYPE %s %s %c\", var->type,db_type, 10);\n\t\t\t\tchar *type = db_type && strstr (var->type, \"arg_\")? db_type: var->type;\n\t\t\t\tchar *v = r_str_newf (\"%s,%s\", type, var->name);\n\t\t\t\tsdb_set (core->anal->sdb_types, k, v, 0);\n\t\t\t\tfree (v);\n\t\t\t} else {\n\t\t\t\tchar *name = db_name ? db_name: var->name;\n\t\t\t\tchar *type = db_type? db_type: strdup (var->type);\n\t\t\t\t// eprintf (\"VARTYPE1 %s %s %c\", var->type,db_type, 10);\n\t\t\t\tif (var->name && !strstr (var->name, \"arg_\")) {\n\t\t\t\t\to = NULL;\n\t\t\t\t}\n\t\t\t\ttype = strdup (var->type);\n#if 0\n\t\t\t\tif (name != var->name) {\n\t\t\t\t\to = NULL;\n\t\t\t\t} else {\n\t\t\t\t\ttype = strdup (var->type);\n\t\t\t\t}\n#endif\n\t\t\t\tchar *v = comma? strdup (o): r_str_newf (\"%s,%s\", type, name);\n\t\t\t\t/// eprintf(\"arg (%s) %s -- %s%c\", k, v, var->name, 10);\n\t\t\t\tchar *s = strdup (name);\n\t\t\t\tif (o) {\n\t\t\t\t\tchar *v2 = r_str_newf (\"%s,%s\", var->type, name);\n\t\t\t\t\tif (!strstr (var->name, \",arg_\")) {\n\t\t\t\t\t\tfree (var->name);\n\t\t\t\t\t\tvar->name = s;\n\t\t\t\t\t} else free (s);\n\t\t\t\t\t// sdb_set (core->anal->sdb_types, k, v, 0);\n\t\t\t\t\tfree (v2);\n\t\t\t\t} else {\n\t\t\t\t\tfree (var->name);\n\t\t\t\t\tvar->name = s;\n\t\t\t\t\tsdb_set (core->anal->sdb_types, k, v, 0);\n\t\t\t\t}\n\t\t\t\tfree (v);\n\t\t\t\t// #endif\n\t\t\t}\n\t\t\tfree (db_name);\n\t\t\tfree (db_type);\n\t\t\tfree (k);\n\t\t\targ_count++;\n\t\t}\n\t}\n\t//\tsdb_num_set (core->anal->sdb_types, args, (int)arg_count, 0);\n\tif (arg_count > 0) {\n\t\tchar *k = r_str_newf (\"func.%s.args\", fcn->name);\n\t\tchar *v = r_str_newf (\"%d\", (int)arg_count);\n\t\tsdb_set (core->anal->sdb_types, k, v, 0);\n\t\tfree (k);\n\t\tfree (v);\n \t}\n\tfree (args);\n\tr_anal_fcn_vars_cache_fini (&cache);\n}\n\nstatic bool cmd_anal_aaft(RCore *core) {\n\tRListIter *it;\n\tRAnalFunction *fcn;\n\tut64 seek;\n\tconst char *io_cache_key = \"io.pcache.write\";\n\tbool io_cache = r_config_get_b (core->config, io_cache_key);\n\tif (r_config_get_b (core->config, \"cfg.debug\")) {\n\t\teprintf (\"TOFIX: aaft can't run in debugger mode.\\n\");\n\t\treturn false;\n\t}\n\tif (!io_cache) {\n\t\t// XXX. we shouldnt need this, but it breaks 'r2 -c aaa -w ls'\n\t\tr_config_set_i (core->config, io_cache_key, true);\n\t}\n\tconst bool iova = r_config_get_b (core->config, \"io.va\");\n\tseek = core->offset;\n\tr_reg_arena_push (core->anal->reg);\n\tr_reg_arena_zero (core->anal->reg);\n\tr_core_cmd0 (core, \"aei;aeim\");\n\tut8 *saved_arena = r_reg_arena_peek (core->anal->reg);\n\t// Iterating Reverse so that we get function in top-bottom call order\n\tr_list_foreach_prev (core->anal->fcns, it, fcn) {\n\t\tint ret = r_core_seek (core, fcn->addr, true);\n\t\tif (!ret) {\n\t\t\tcontinue;\n\t\t}\n\t\tr_reg_arena_poke (core->anal->reg, saved_arena);\n\t\tr_anal_esil_set_pc (core->anal->esil, fcn->addr);\n\t\tr_core_anal_type_match (core, fcn);\n\t\tif (r_cons_is_breaked ()) {\n\t\t\tbreak;\n\t\t}\n\t\t__add_vars_sdb (core, fcn);\n\t}\n\tr_config_set_b (core->config, \"io.va\", iova);\n\tr_core_seek (core, seek, true);\n\tr_reg_arena_pop (core->anal->reg);\n\tr_config_set_i (core->config, io_cache_key, io_cache);\n\tfree (saved_arena);\n\treturn true;\n}\n\nstatic void type_cmd(RCore *core, const char *input) {\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\tif (!fcn && *input != '?') {\n\t\teprintf (\"cant find function here\\n\");\n\t\treturn;\n\t}\n\tut64 seek;\n\tr_cons_break_push (NULL, NULL);\n\tswitch (*input) {\n\tcase '\\0': // \"aft\"\n\t\tseek = core->offset;\n\t\tr_anal_esil_set_pc (core->anal->esil, fcn? fcn->addr: core->offset);\n\t\tr_core_anal_type_match (core, fcn);\n\t\tr_core_seek (core, seek, true);\n\t\tbreak;\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_aft);\n\t\tbreak;\n\t}\n\tr_cons_break_pop ();\n}\n\nstatic void find_refs(RCore *core, const char *glob) {\n\tchar cmd[128];\n\tut64 curseek = core->offset;\n\twhile (*glob == ' ') glob++;\n\tif (!*glob) {\n\t\tglob = \"str.\";\n\t}\n\tif (*glob == '?') {\n\t\teprintf (\"Usage: axF [flag-str-filter]\\n\");\n\t\treturn;\n\t}\n\teprintf (\"Finding references of flags matching '%s'...\\n\", glob);\n\tsnprintf (cmd, sizeof (cmd) - 1, \".(findstref) @@=`f~%s[0]`\", glob);\n\tr_core_cmd0 (core, \"(findstref;f here=$$;s entry0;/r here;f-here)\");\n\tr_core_cmd0 (core, cmd);\n\tr_core_cmd0 (core, \"(-findstref)\");\n\tr_core_seek (core, curseek, true);\n}\n\n/* set flags for every function */\nstatic void flag_every_function(RCore *core) {\n\tRListIter *iter;\n\tRAnalFunction *fcn;\n\t// eprintf (\"flag every(%d) %c\", r_list_length (core->anal->fcns, 10);\n\tr_flag_space_push (core->flags, R_FLAGS_FS_FUNCTIONS);\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\tr_flag_set (core->flags, fcn->name,\n\t\t\tfcn->addr, r_anal_function_size_from_entry (fcn));\n\t}\n\tr_flag_space_pop (core->flags);\n}\n\nstatic void var_help(RCore *core, char ch) {\n\tswitch (ch) {\n\tcase 'b':\n\t\tr_core_cmd_help (core, help_msg_afvb);\n\t\tbreak;\n\tcase 's':\n\t\tr_core_cmd_help (core, help_msg_afvs);\n\t\tbreak;\n\tcase 'r':\n\t\tr_core_cmd_help (core, help_msg_afvr);\n\t\tbreak;\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_afv);\n\t\tbreak;\n\tdefault:\n\t\teprintf (\"See afv?, afvb?, afvr? and afvs?\\n\");\n\t}\n}\n\nstatic void var_accesses_list(RAnalFunction *fcn, RAnalVar *var, PJ *pj, int access_type, const char *name) {\n\tRAnalVarAccess *acc;\n\tbool first = true;\n\tif (pj) {\n\t\tpj_o (pj);\n\t\tpj_ks (pj, \"name\", name);\n\t\tpj_ka (pj, \"addrs\");\n\t} else {\n\t\tr_cons_printf (\"%10s\", name);\n\t}\n\tr_vector_foreach (&var->accesses, acc) {\n\t\tif (!(acc->type & access_type)) {\n\t\t\tcontinue;\n\t\t}\n\t\tut64 addr = fcn->addr + acc->offset;\n\t\tif (pj) {\n\t\t\tpj_n (pj, addr);\n\t\t} else {\n\t\t\tr_cons_printf (\"%s0x%\" PFMT64x, first ? \"  \" : \",\", addr);\n\t\t}\n\t\tfirst = false;\n\t}\n\tif (pj) {\n\t\tpj_end (pj);\n\t\tpj_end (pj);\n\t} else {\n\t\tr_cons_newline ();\n\t}\n}\n\nstatic void list_vars(RCore *core, RAnalFunction *fcn, PJ *pj, int type, const char *name) {\n\tRAnalVar *var = NULL;\n\tRListIter *iter;\n\tRList *list = r_anal_var_all_list (core->anal, fcn);\n\tif (type == '=') {\n\t\tut64 oaddr = core->offset;\n\t\tr_list_foreach (list, iter, var) {\n\t\t\tr_cons_printf (\"* %s\\n\", var->name);\n\t\t\tRAnalVarAccess *acc;\n\t\t\tr_vector_foreach (&var->accesses, acc) {\n\t\t\t\tif (!(acc->type & R_ANAL_VAR_ACCESS_TYPE_READ)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"R 0x%\"PFMT64x\"  \", fcn->addr + acc->offset);\n\t\t\t\tr_core_seek (core, fcn->addr + acc->offset, 1);\n\t\t\t\tr_core_print_disasm_instructions (core, 0, 1);\n\t\t\t}\n\t\t\tr_vector_foreach (&var->accesses, acc) {\n\t\t\t\tif (!(acc->type & R_ANAL_VAR_ACCESS_TYPE_WRITE)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"W 0x%\"PFMT64x\"  \", fcn->addr + acc->offset);\n\t\t\t\tr_core_seek (core, fcn->addr + acc->offset, 1);\n\t\t\t\tr_core_print_disasm_instructions (core, 0, 1);\n\t\t\t}\n\t\t}\n\t\tr_core_seek (core, oaddr, 0);\n\t\treturn;\n\t}\n\tif (type == '*') {\n\t\tconst char *bp = r_reg_get_name (core->anal->reg, R_REG_NAME_BP);\n\t\tr_cons_printf (\"f-fcnvar*\\n\");\n\t\tr_list_foreach (list, iter, var) {\n\t\t\tr_cons_printf (\"f fcnvar.%s @ %s%s%d\\n\", var->name, bp,\n\t\t\t\tvar->delta>=0? \"+\":\"\", var->delta);\n\t\t}\n\t\treturn;\n\t}\n\tif (type != 'W' && type != 'R') {\n\t\treturn;\n\t}\n\tint access_type = type == 'R' ? R_ANAL_VAR_ACCESS_TYPE_READ : R_ANAL_VAR_ACCESS_TYPE_WRITE;\n\tif (pj) {\n\t\tpj_a (pj);\n\t}\n\tif (name && *name) {\n\t\tvar = r_anal_function_get_var_byname (fcn, name);\n\t\tif (var) {\n\t\t\tvar_accesses_list (fcn, var, pj, access_type, var->name);\n\t\t}\n\t} else {\n\t\tr_list_foreach (list, iter, var) {\n\t\t\tvar_accesses_list (fcn, var, pj, access_type, var->name);\n\t\t}\n\t}\n\tif (pj) {\n\t\tpj_end (pj);\n\t}\n}\n\nstatic void cmd_afvx(RCore *core, RAnalFunction *fcn, bool json) {\n\tr_return_if_fail (core);\n\tif (!fcn) {\n\t\tfcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_ANY);\n\t}\n\tif (fcn) {\n\t\tPJ *pj = NULL;\n\t\tif (json) {\n\t\t\tpj = pj_new ();\n\t\t\tpj_o (pj);\n\t\t\tpj_k (pj, \"reads\");\n\t\t} else {\n\t\t\tr_cons_printf (\"afvR\\n\");\n\t\t}\n\t\tlist_vars (core, fcn, pj, 'R', NULL);\n\t\tif (json) {\n\t\t\tpj_k (pj, \"writes\");\n\t\t} else {\n\t\t\tr_cons_printf (\"afvW\\n\");\n\t\t}\n\t\tlist_vars (core, fcn, pj, 'W', NULL);\n\t\tif (json) {\n\t\t\tpj_end (pj);\n\t\t\tchar *j = pj_drain (pj);\n\t\t\tr_cons_printf (\"%s\\n\", j);\n\t\t\tfree (j);\n\t\t}\n\t}\n}\n\nstatic int cmd_an(RCore *core, bool use_json, const char *name) {\n\tint ret = 0;\n\tut64 off = core->offset;\n\tRAnalOp op;\n\tPJ *pj = NULL;\n\tut64 tgt_addr = UT64_MAX;\n\n\tif (use_json) {\n\t\tpj = pj_new ();\n\t\tpj_a (pj);\n\t}\n\n\tr_anal_op (core->anal, &op, off,\n\t\t\tcore->block + off - core->offset, 32, R_ANAL_OP_MASK_BASIC);\n\tRAnalVar *var = r_anal_get_used_function_var (core->anal, op.addr);\n\n\ttgt_addr = op.jump != UT64_MAX? op.jump: op.ptr;\n\tif (var) {\n\t\tif (name) {\n\t\t\tret = r_anal_var_rename (var, name, true)\n\t\t\t\t? 0\n\t\t\t\t: -1;\n\t\t} else if (use_json) {\n\t\t\tpj_o (pj);\n\t\t\tpj_ks (pj, \"name\", var->name);\n\t\t\tpj_ks (pj, \"type\", \"var\");\n\t\t\tpj_kn (pj, \"offset\", tgt_addr);\n\t\t\tpj_end (pj);\n\t\t} else {\n\t\t\tr_cons_println (var->name);\n\t\t}\n\t} else if (tgt_addr != UT64_MAX) {\n\t\tRAnalFunction *fcn = r_anal_get_function_at (core->anal, tgt_addr);\n\t\tRFlagItem *f = r_flag_get_i (core->flags, tgt_addr);\n\t\tif (fcn) {\n\t\t\tif (name) {\n\t\t\t\tret = r_anal_function_rename (fcn, name)? 0: -1;\n\t\t\t} else if (!use_json) {\n\t\t\t\tr_cons_println (fcn->name);\n\t\t\t} else {\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"name\", fcn->name);\n\t\t\t\tpj_ks (pj, \"type\", \"function\");\n\t\t\t\tpj_kn (pj, \"offset\", tgt_addr);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t} else if (f) {\n\t\t\tif (name) {\n\t\t\t\tret = r_flag_rename (core->flags, f, name)? 0: -1;\n\t\t\t} else if (!use_json) {\n\t\t\t\tr_cons_println (f->name);\n\t\t\t} else {\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"name\", f->name);\n\t\t\t\tif (f->realname) {\n\t\t\t\t\tpj_ks (pj, \"realname\", f->realname);\n\t\t\t\t}\n\t\t\t\tpj_ks (pj, \"type\", \"flag\");\n\t\t\t\tpj_kn (pj, \"offset\", tgt_addr);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t} else {\n\t\t\tif (name) {\n\t\t\t\tret = r_flag_set (core->flags, name, tgt_addr, 1)? 0: -1;\n\t\t\t} else if (!use_json) {\n\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \"\\n\", tgt_addr);\n\t\t\t} else {\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"name\", r_str_get (name));\n\t\t\t\tpj_ks (pj, \"type\", \"address\");\n\t\t\t\tpj_kn (pj, \"offset\", tgt_addr);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (use_json) {\n\t\tpj_end (pj);\n\t}\n\n\tif (pj) {\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\n\tr_anal_op_fini (&op);\n\treturn ret;\n}\n\n// EBP BASED\nstatic int delta_cmp(const void *a, const void *b) {\n\tconst RAnalVar *va = a;\n\tconst RAnalVar *vb = b;\n\treturn vb->delta - va->delta;\n}\n\nstatic int delta_cmp2(const void *a, const void *b) {\n\tconst RAnalVar *va = a;\n\tconst RAnalVar *vb = b;\n\treturn va->delta - vb->delta;\n}\n\nstatic void __cmd_afvf(RCore *core, const char *input) {\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\tRListIter *iter;\n\tRAnalVar *p;\n\tRList *list = r_anal_var_all_list (core->anal, fcn);\n\tr_list_sort (list, delta_cmp2);\n\tr_list_foreach (list, iter, p) {\n\t\tif (p->isarg || p->delta > 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst char *pad = r_str_pad (' ', 10 - strlen (p->name));\n\t\tr_cons_printf (\"0x%08\"PFMT64x\"  %s:%s%s\\n\", (ut64)-p->delta, p->name, pad, p->type);\n\t}\n\tr_list_sort (list, delta_cmp);\n\tr_list_foreach (list, iter, p) {\n\t\tif (!p->isarg && p->delta < 0) {\n\t\t\tcontinue;\n\t\t}\n\t\t// TODO: only stack vars if (p->kind == 's') { }\n\t\tconst char *pad = r_str_pad (' ', 10 - strlen (p->name));\n\t\t// XXX this 0x6a is a hack\n\t\tr_cons_printf (\"0x%08\"PFMT64x\"  %s:%s%s\\n\", ((ut64)p->delta) - 0x6a, p->name, pad, p->type);\n\t}\n\tr_list_free (list);\n\n}\n\nstatic int var_cmd(RCore *core, const char *str) {\n\tint delta, type = *str, res = true;\n\tRAnalVar *v1;\n\tif (!str[0]) {\n\t\t// \"afv\"\n\t\tr_core_cmd0 (core, \"afvs\");\n\t\tr_core_cmd0 (core, \"afvb\");\n\t\tr_core_cmd0 (core, \"afvr\");\n\t\treturn true;\n\t}\n\tif (str[1] == '?'|| str[0] == '?') {\n\t\tvar_help (core, *str);\n\t\treturn res;\n\t}\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\tPJ *pj = NULL;\n\tif (str[0] == 'j') { // \"afvj\"\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\treturn false;\n\t\t}\n\t\tpj_o (pj);\n\t\tpj_k (pj, \"sp\");\n\t\tr_anal_var_list_show (core->anal, fcn, 's', 'j', pj);\n\t\tpj_k (pj, \"bp\");\n\t\tr_anal_var_list_show (core->anal, fcn, 'b', 'j', pj);\n\t\tpj_k (pj, \"reg\");\n\t\tr_anal_var_list_show (core->anal, fcn, 'r', 'j', pj);\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t\treturn true;\n\t}\n\tchar *p = strdup (str);\n\tchar *ostr = p;\n\t/* Variable access CFvs = set fun var */\n\tswitch (str[0]) {\n\tcase '-': // \"afv-\"\n\t\tr_core_cmdf (core, \"afvs-%s\", str + 1);\n\t\tr_core_cmdf (core, \"afvb-%s\", str + 1);\n\t\tr_core_cmdf (core, \"afvr-%s\", str + 1);\n\t\treturn true;\n\tcase 'x': // \"afvx\"\n\t\tif (fcn) {\n\t\t\tcmd_afvx (core, fcn, str[1] == 'j');\n\t\t} else {\n\t\t\teprintf (\"Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t}\n\t\treturn true;\n\tcase 'R': // \"afvR\"\n\tcase 'W': // \"afvW\"\n\tcase '*': // \"afv*\"\n\tcase '=': // \"afv=\"\n\t\tif (fcn) {\n\t\t\tconst char *name = strchr (ostr, ' ');\n\t\t\tif (name) {\n\t\t\t\tname = r_str_trim_head_ro (name);\n\t\t\t}\n\t\t\tif (str[1] == 'j') {\n\t\t\t\tpj = r_core_pj_new (core);\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist_vars (core, fcn, pj, str[0], name);\n\t\t\tif (str[1] == 'j') {\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\teprintf (\"afv: Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\treturn false;\n\t\t}\n\tcase 'a': // \"afva\"\n\t\tif (fcn) {\n\t\t\tr_anal_function_delete_all_vars (fcn);\n\t\t\tr_core_recover_vars (core, fcn, false);\n\t\t\tfree (p);\n\t\t\treturn true;\n\t\t} else {\n\t\t\teprintf (\"afv: Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\treturn false;\n\t\t}\n\tcase 'n':\n\t\tif (str[1]) { // \"afvn\"\n\t\t\tRAnalOp *op = r_core_anal_op (core, core->offset, R_ANAL_OP_MASK_BASIC);\n\t\t\tconst char *new_name = r_str_trim_head_ro (strchr (ostr, ' '));\n\t\t\tif (!new_name) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar *old_name = strchr (new_name, ' ');\n\t\t\tif (!old_name) {\n\t\t\t\tRAnalVar *var = op ? r_anal_get_used_function_var (core->anal, op->addr) : NULL;\n\t\t\t\tif (var) {\n\t\t\t\t\told_name = var->name;\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Cannot find var @ 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\t\t\tr_anal_op_free (op);\n\t\t\t\t\tfree (ostr);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t*old_name++ = 0;\n\t\t\t\tr_str_trim (old_name);\n\t\t\t}\n\t\t\tif (fcn) {\n\t\t\t\tv1 = r_anal_function_get_var_byname (fcn, old_name);\n\t\t\t\tif (v1) {\n\t\t\t\t\tr_anal_var_rename (v1, new_name, true);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Cant find var by name\\n\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"afv: Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tr_anal_op_free (op);\n\t\t\tfree (ostr);\n\t\t} else {\n\t\t\tRListIter *iter;\n\t\t\tRAnalVar *v;\n\t\t\tRList *list = r_anal_var_all_list (core->anal, fcn);\n\t\t\tr_list_foreach (list, iter, v) {\n\t\t\t\tr_cons_printf (\"%s\\n\", v->name);\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\treturn true;\n\tcase 'd': // \"afvd\"\n\t\tif (!fcn) {\n\t\t\teprintf (\"Cannot find function.\\n\");\n\t\t} else if (str[1]) {\n\t\t\tp = strchr (ostr, ' ');\n\t\t\tif (!p) {\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tr_str_trim (p);\n\t\t\tv1 = r_anal_function_get_var_byname (fcn, p);\n\t\t\tif (!v1) {\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tr_anal_var_display (core->anal, v1);\n\t\t\tfree (ostr);\n\t\t} else {\n\t\t\tRListIter *iter;\n\t\t\tRAnalVar *p;\n\t\t\tRList *list = r_anal_var_all_list (core->anal, fcn);\n\t\t\tr_list_foreach (list, iter, p) {\n\t\t\t\tchar *a = r_core_cmd_strf (core, \".afvd %s\", p->name);\n\t\t\t\tif ((a && !*a) || !a) {\n\t\t\t\t\tfree (a);\n\t\t\t\t\ta = strdup (\"\\n\");\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"%s %s = %s\", p->isarg ? \"arg\": \"var\", p->name, a);\n\t\t\t\tfree (a);\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\treturn true;\n\tcase 'f': // \"afvf\"\n\t\t__cmd_afvf (core, ostr);\n\t\tbreak;\n\tcase 't':\n\t\tif (fcn) { // \"afvt\"\n\t\t\tp = strchr (ostr, ' ');\n\t\t\tif (!p++) {\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tchar *type = strchr (p, ' ');\n\t\t\tif (!type) {\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t*type++ = 0;\n\t\t\tv1 = r_anal_function_get_var_byname (fcn, p);\n\t\t\tif (!v1) {\n\t\t\t\teprintf (\"Cant find get by name %s\\n\", p);\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tr_anal_var_set_type (v1, type);\n\t\t\tfree (ostr);\n\t\t\treturn true;\n\t\t} else {\n\t\t\teprintf (\"Cannot find function\\n\");\n\t\t\treturn false;\n\t\t}\n\t}\n\tswitch (str[1]) { // afv[bsr]\n\tcase '\\0':\n\tcase '*': // \"afv[bsr]*\"\n\t\tr_anal_var_list_show (core->anal, fcn, type, str[1], NULL);\n\t\tbreak;\n\tcase 'j':  // \"afv[bsr]j\"\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\treturn false;\n\t\t}\n\t\tr_anal_var_list_show (core->anal, fcn, type, str[1], pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t\tbreak;\n\tcase '.': // \"afv[bsr].\"\n\t\tr_anal_var_list_show (core->anal, fcn, core->offset, 0, NULL);\n\t\tbreak;\n\tcase '-': // \"afv[bsr]-\"\n\t\tif (!fcn) {\n\t\t\teprintf (\"Cannot find function\\n\");\n\t\t\treturn false;\n\t\t}\n\t\tif (str[2] == '*') {\n\t\t\tr_anal_function_delete_vars_by_kind (fcn, type);\n\t\t} else {\n\t\t\tRAnalVar *var = NULL;\n\t\t\tif (IS_DIGIT (str[2])) {\n\t\t\t\tvar = r_anal_function_get_var (fcn, type, (int)r_num_math (core->num, str + 1));\n\t\t\t} else {\n\t\t\t\tchar *name = r_str_trim_dup (str + 2);\n\t\t\t\tif (name) {\n\t\t\t\t\tvar = r_anal_function_get_var_byname (fcn, name);\n\t\t\t\t\tr_free (name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (var) {\n\t\t\t\tr_anal_var_delete (var);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"afv[bsr]d\"\n\t\teprintf (\"This command is deprecated, use afvd instead\\n\");\n\t\tbreak;\n\tcase 't': // \"afv[bsr]t\"\n\t\teprintf (\"This command is deprecated use afvt instead\\n\");\n\t\tbreak;\n\tcase 's': // \"afv[bsr]s\"\n\tcase 'g': // \"afv[bsr]g\"\n\t\tif (str[2] != '\\0') {\n\t\t\tint idx = r_num_math (core->num, str + 2);\n\t\t\tchar *vaddr;\n\t\t\tp = strchr (ostr, ' ');\n\t\t\tif (!p) {\n\t\t\t\tvar_help (core, type);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_str_trim (p);\n\t\t\tut64 addr = core->offset;\n\t\t\tif ((vaddr = strchr (p , ' '))) {\n\t\t\t\taddr = r_num_math (core->num, vaddr);\n\t\t\t}\n\t\t\tRAnalVar *var = r_anal_function_get_var (fcn, str[0], idx);\n\t\t\tif (!var) {\n\t\t\t\teprintf (\"Cannot find variable with delta %d\\n\", idx);\n\t\t\t\tres = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint rw = (str[1] == 'g') ? R_ANAL_VAR_ACCESS_TYPE_READ : R_ANAL_VAR_ACCESS_TYPE_WRITE;\n\t\t\tint ptr = *var->type == 's' ? idx - fcn->maxstack : idx;\n\t\t\tRAnalOp *op = r_core_anal_op (core, addr, 0);\n\t\t\tconst char *ireg = op ? op->ireg : NULL;\n\t\t\tr_anal_var_set_access (var, ireg, addr, rw, ptr);\n\t\t\tr_anal_op_free (op);\n\t\t} else {\n\t\t\teprintf (\"Missing argument\\n\");\n\t\t}\n\t\tbreak;\n\tcase ' ': { // \"afv[bsr]\"\n\t\tbool isarg = false;\n\t\tconst int size = 4;\n\t\tp = strchr (ostr, ' ');\n\t\tif (!p) {\n\t\t\tvar_help (core, type);\n\t\t\tbreak;\n\t\t}\n\t\tif (!fcn) {\n\t\t\teprintf (\"Missing function at 0x%08\" PFMT64x \"\\n\", core->offset);\n\t\t\tbreak;\n\t\t}\n\t\t*p++ = 0;\n\t\tr_str_trim_head (p);\n\t\tchar *name = strchr (p, ' ');\n\t\tif (!name) {\n\t\t\teprintf (\"Missing name\\n\");\n\t\t\tbreak;\n\t\t}\n\t\t*name++ = 0;\n\t\tr_str_trim_head (name);\n\n\t\tif (type == 'r') { //registers\n\t\t\tRRegItem *i = r_reg_get (core->anal->reg, p, -1);\n\t\t\tif (!i) {\n\t\t\t\teprintf (\"Register not found\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdelta = i->index;\n\t\t\tisarg = true;\n\t\t} else {\n\t\t\tdelta = r_num_math (core->num, p);\n\t\t}\n\n\t\tchar *vartype = strchr (name, ' ');\n\t\tif (!vartype) {\n\t\t\tvartype = \"int\";\n\t\t} else {\n\t\t\t*vartype++ = 0;\n\t\t\tr_str_trim (vartype);\n\t\t}\n\t\tif (type == 'b') {\n\t\t\tdelta -= fcn->bp_off;\n\t\t}\n\t\tif ((type == 'b') && delta > 0) {\n\t\t\tisarg = true;\n\t\t} else if (type == 's' && delta > fcn->maxstack) {\n\t\t\tisarg = true;\n\t\t}\n\t\tr_anal_function_set_var (fcn, delta, type, vartype, size, isarg, name);\n \t\t}\n\t\tbreak;\n\t}\n\tfree (ostr);\n\treturn res;\n}\n\nstatic void print_trampolines(RCore *core, ut64 a, ut64 b, size_t element_size) {\n\tint i;\n\tfor (i = 0; i < core->blocksize; i += element_size) {\n\t\tut32 n;\n\t\tmemcpy (&n, core->block + i, sizeof (ut32));\n\t\tif (n >= a && n <= b) {\n\t\t\tif (element_size == 4) {\n\t\t\t\tr_cons_printf (\"f trampoline.%x @ 0x%\" PFMT64x \"\\n\", n, core->offset + i);\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\"f trampoline.%\" PFMT32x \" @ 0x%\" PFMT64x \"\\n\", n, core->offset + i);\n\t\t\t}\n\t\t\tr_cons_printf (\"Cd %zu @ 0x%\" PFMT64x \":%zu\\n\", element_size, core->offset + i, element_size);\n\t\t\t// TODO: add data xrefs\n\t\t}\n\t}\n}\n\nstatic void cmd_anal_trampoline(RCore *core, const char *input) {\n\tint bits = r_config_get_i (core->config, \"asm.bits\");\n\tchar *p, *inp = strdup (input);\n\tp = strchr (inp, ' ');\n\tif (p) {\n\t\t*p = 0;\n\t}\n\tut64 a = r_num_math (core->num, inp);\n\tut64 b = p? r_num_math (core->num, p + 1): 0;\n\tfree (inp);\n\n\tswitch (bits) {\n\tcase 32:\n\t\tprint_trampolines (core, a, b, 4);\n\t\tbreak;\n\tcase 64:\n\t\tprint_trampolines (core, a, b, 8);\n\t\tbreak;\n\t}\n}\n\nstatic const char *syscallNumber(int n) {\n\treturn sdb_fmt (n > 1000 ? \"0x%x\" : \"%d\", n);\n}\n\nR_API char *cmd_syscall_dostr(RCore *core, st64 n, ut64 addr) {\n\tint i;\n\tchar str[64];\n\tst64 N = n;\n\tint defVector = r_syscall_get_swi (core->anal->syscall);\n\tif (defVector > 0) {\n\t\tn = -1;\n\t}\n\tif (n == -1 || defVector > 0) {\n\t\tn = (int)r_debug_reg_get (core->dbg, \"oeax\");\n\t\tif (!n || n == -1) {\n\t\t\tconst char *a0 = r_reg_get_name (core->anal->reg, R_REG_NAME_SN);\n\t\t\tn = (a0 == NULL)? -1: (int)r_debug_reg_get (core->dbg, a0);\n\t\t}\n\t}\n\tRSyscallItem *item = r_syscall_get (core->anal->syscall, n, defVector);\n\tif (!item) {\n\t\titem =  r_syscall_get (core->anal->syscall, N, -1);\n\t}\n\tif (!item) {\n\t\treturn r_str_newf (\"%s = unknown ()\", syscallNumber (n));\n\t}\n\tchar *res = r_str_newf (\"%s = %s (\", syscallNumber (item->num), item->name);\n\t// TODO: move this to r_syscall\n\tconst char *cc = r_anal_syscc_default (core->anal);\n\t//TODO replace the hardcoded CC with the sdb ones\n\tfor (i = 0; i < item->args; i++) {\n\t\t// XXX this is a hack to make syscall args work on x86-32 and x86-64\n\t\t// we need to shift sn first.. which is bad, but needs to be redesigned\n\t\tint regidx = i;\n\t\tif (core->rasm->bits == 32 && core->rasm->cur && !strcmp (core->rasm->cur->arch, \"x86\")) {\n\t\t\tregidx++;\n\t\t}\n\t\tut64 arg = r_debug_arg_get (core->dbg, cc, regidx);\n\t\t//r_cons_printf (\"(%d:0x%\"PFMT64x\")\\n\", i, arg);\n\t\tif (item->sargs) {\n\t\t\tswitch (item->sargs[i]) {\n\t\t\tcase 'p': // pointer\n\t\t\t\tres = r_str_appendf (res, \"0x%08\" PFMT64x \"\", arg);\n\t\t\t\tbreak;\n\t\t\tcase 'i':\n\t\t\t\tres = r_str_appendf (res, \"%\" PFMT64u \"\", arg);\n\t\t\t\tbreak;\n\t\t\tcase 'z':\n\t\t\t\tmemset (str, 0, sizeof (str));\n\t\t\t\tr_io_read_at (core->io, arg, (ut8 *)str, sizeof (str) - 1);\n\t\t\t\tr_str_filter (str, strlen (str));\n\t\t\t\tres = r_str_appendf (res, \"\\\"%s\\\"\", str);\n\t\t\t\tbreak;\n\t\t\tcase 'Z': {\n\t\t\t\t//TODO replace the hardcoded CC with the sdb ones\n\t\t\t\tut64 len = r_debug_arg_get (core->dbg, cc, i + 2);\n\t\t\t\tlen = R_MIN (len + 1, sizeof (str) - 1);\n\t\t\t\tif (len == 0) {\n\t\t\t\t\tlen = 16; // override default\n\t\t\t\t}\n\t\t\t\t(void)r_io_read_at (core->io, arg, (ut8 *)str, len);\n\t\t\t\tstr[len] = 0;\n\t\t\t\tr_str_filter (str, -1);\n\t\t\t\tres = r_str_appendf (res, \"\\\"%s\\\"\", str);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tres = r_str_appendf (res, \"0x%08\" PFMT64x \"\", arg);\n\t\t\t}\n\t\t} else {\n\t\t\tres = r_str_appendf (res, \"0x%08\" PFMT64x \"\", arg);\n\t\t}\n\t\tif (i + 1 < item->args) {\n\t\t\tres = r_str_appendf (res, \", \");\n\t\t}\n\t}\n\tr_syscall_item_free (item);\n\treturn r_str_appendf (res, \")\");\n}\n\nstatic bool mw(RAnalEsil *esil, ut64 addr, const ut8 *buf, int len) {\n\tint *ec = (int*)esil->user;\n\t*ec += (len * 2);\n\treturn true;\n}\n\nstatic bool mr(RAnalEsil *esil, ut64 addr, ut8 *buf, int len) {\n\tint *ec = (int*)esil->user;\n\t*ec += len;\n\treturn true;\n}\n\nstatic int esil_cost(RCore *core, ut64 addr, const char *expr) {\n\tif (R_STR_ISEMPTY (expr)) {\n\t\treturn 0;\n\t}\n\tint ec = 0;\n\tRAnalEsil *e = r_anal_esil_new (256, 0, 0);\n\tr_anal_esil_setup (e, core->anal, false, false, false);\n\te->user = &ec;\n\te->cb.mem_read = mr;\n\te->cb.mem_write = mw;\n\tr_anal_esil_parse (e, expr);\n\tr_anal_esil_free (e);\n\treturn ec;\n}\n\nstatic void cmd_syscall_do(RCore *core, st64 n, ut64 addr) {\n\tchar *msg = cmd_syscall_dostr (core, n, addr);\n\tif (msg) {\n\t\tr_cons_println (msg);\n\t\tfree (msg);\n\t}\n}\n\nstatic void core_anal_bytes(RCore *core, const ut8 *buf, int len, int nops, int fmt) {\n\tbool be = core->print->big_endian;\n\tbool use_color = core->print->flags & R_PRINT_FLAGS_COLOR;\n\tcore->parser->subrel = r_config_get_i (core->config, \"asm.sub.rel\");\n\tint ret, i, j, idx, size;\n\tconst char *color = \"\";\n\tconst char *esilstr;\n\tconst char *opexstr;\n\tRAnalHint *hint;\n\tRAnalEsil *esil = NULL;\n\tRAsmOp asmop;\n\tRAnalOp op = {0};\n\tut64 addr;\n\tPJ *pj = NULL;\n\tint totalsize = 0;\n\n\t// Variables required for setting up ESIL to REIL conversion\n\tif (use_color) {\n\t\tcolor = core->cons->context->pal.label;\n\t}\n\tswitch (fmt) {\n\tcase 'j': {\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\tbreak;\n\t\t}\n\t\tpj_a (pj);\n\t\tbreak;\n\t}\n\t}\n\tfor (i = idx = ret = 0; idx < len && (!nops || (nops && i < nops)); i++, idx += ret) {\n\t\taddr = core->offset + idx;\n\t\tr_asm_set_pc (core->rasm, addr);\n\t\thint = r_anal_hint_get (core->anal, addr);\n\t\tret = r_anal_op (core->anal, &op, addr, buf + idx, len - idx,\n\t\t\tR_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_OPEX | R_ANAL_OP_MASK_HINT);\n\t\t(void)r_asm_disassemble (core->rasm, &asmop, buf + idx, len - idx);\n\t\tesilstr = R_STRBUF_SAFEGET (&op.esil);\n\t\topexstr = R_STRBUF_SAFEGET (&op.opex);\n\t\tchar *mnem = strdup (r_asm_op_get_asm (&asmop));\n\t\tchar *sp = strchr (mnem, ' ');\n\t\tif (sp) {\n\t\t\t*sp = 0;\n\t\t\tif (op.prefix) {\n\t\t\t\tchar *arg = strdup (sp + 1);\n\t\t\t\tchar *sp = strchr (arg, ' ');\n\t\t\t\tif (sp) {\n\t\t\t\t\t*sp = 0;\n\t\t\t\t}\n\t\t\t\tfree (mnem);\n\t\t\t\tmnem = arg;\n\t\t\t}\n\t\t}\n\t\tif (ret < 1 && fmt != 'd') {\n\t\t\teprintf (\"Oops at 0x%08\" PFMT64x \" (\", core->offset + idx);\n\t\t\tfor (i = idx, j = 0; i < core->blocksize && j < 3; i++, j++) {\n\t\t\t\teprintf (\"%02x \", buf[i]);\n\t\t\t}\n\t\t\teprintf (\"...)\\n\");\n\t\t\tfree (mnem);\n\t\t\tbreak;\n\t\t}\n\t\tsize = op.size;\n\t\tif (fmt == 'd') {\n\t\t\tchar *opname = strdup (r_asm_op_get_asm (&asmop));\n\t\t\tif (opname) {\n\t\t\t\tr_str_split (opname, ' ');\n\t\t\t\tchar *d = r_asm_describe (core->rasm, opname);\n\t\t\t\tif (R_STR_ISNOTEMPTY (d)) {\n\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", opname, d);\n\t\t\t\t\tfree (d);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Unknown opcode\\n\");\n\t\t\t\t}\n\t\t\t\tfree (opname);\n\t\t\t}\n\t\t} else if (fmt == 'E') {\n\t\t\tr_cons_printf (\"%s\\n\", esilstr);\n\t\t} else if (fmt == 'e') {\n\t\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\t\tif (use_color) {\n\t\t\t\t\tr_cons_printf (\"%s0x%\" PFMT64x Color_RESET \" %s\\n\", color, core->offset + idx, esilstr);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \" %s\\n\", core->offset + idx, esilstr);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (fmt == 's') {\n\t\t\ttotalsize += op.size;\n\t\t} else if (fmt == '*') {\n\t\t\t// TODO: ao* useful for wat? wx [bytes] ?\n\t\t} else if (fmt == 'j') {\n\t\t\tchar strsub[128] = { 0 };\n\t\t\t// pc+33\n\t\t\tr_parse_subvar (core->parser, NULL,\n\t\t\t\tcore->offset + idx,\n\t\t\t\tasmop.size, r_asm_op_get_asm (&asmop),\n\t\t\t\tstrsub, sizeof (strsub));\n\t\t\t\tut64 killme = UT64_MAX;\n\t\t\t\tif (r_io_read_i (core->io, op.ptr, &killme, op.refptr, be)) {\n\t\t\t\t\tcore->parser->subrel_addr = killme;\n\t\t\t\t}\n\t\t\t// 0x33->sym.xx\n\t\t\tchar *p = strdup (strsub);\n\t\t\tif (p) {\n\t\t\t\tr_parse_filter (core->parser, addr, core->flags, hint, p,\n\t\t\t\t\t\tstrsub, sizeof (strsub), be);\n\t\t\t\tfree (p);\n\t\t\t}\n\t\t\tpj_o (pj);\n\t\t\tpj_ks (pj, \"opcode\", r_asm_op_get_asm (&asmop));\n\t\t\tif (!*strsub) {\n\t\t\t\tr_str_ncpy (strsub, r_asm_op_get_asm (&asmop), sizeof (strsub) -1 );\n\t\t\t}\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_parse_subvar (core->parser, fcn, addr, asmop.size,\n\t\t\t\t\t\t\tstrsub, strsub, sizeof (strsub));\n\t\t\t\t}\n\t\t\t}\n\t\t\tpj_ks (pj, \"disasm\", strsub);\n\t\t\t// apply pseudo if needed\n\t\t\t{\n\t\t\t\tchar *pseudo = calloc (128 + strlen (strsub), 3);\n\t\t\t\tr_parse_parse (core->parser, strsub, pseudo);\n\t\t\t\tif (pseudo && *pseudo) {\n\t\t\t\t\tpj_ks (pj, \"pseudo\", pseudo);\n\t\t\t\t}\n\t\t\t\tfree (pseudo);\n\t\t\t}\n\t\t\t{\n\t\t\t\tchar *opname = strdup (strsub);\n\t\t\t\tchar *sp = strchr (opname, ' ');\n\t\t\t\tif (sp) {\n\t\t\t\t\t*sp = 0;\n\t\t\t\t}\n\t\t\t\tchar *d = r_asm_describe (core->rasm, opname);\n\t\t\t\tif (d && *d) {\n\t\t\t\t\tpj_ks (pj, \"description\", d);\n\t\t\t\t}\n\t\t\t\tfree (d);\n\t\t\t\tfree (opname);\n\t\t\t}\n\t\t\tpj_ks (pj, \"mnemonic\", mnem);\n\t\t\t{\n\t\t\t\tut8 *mask = r_anal_mask (core->anal, len - idx, buf + idx, core->offset + idx);\n\t\t\t\tchar *maskstr = r_hex_bin2strdup (mask, size);\n\t\t\t\tpj_ks (pj, \"mask\", maskstr);\n\t\t\t\tfree (mask);\n\t\t\t\tfree (maskstr);\n\t\t\t}\n\t\t\tif (hint && hint->opcode) {\n\t\t\t\tpj_ks (pj, \"ophint\", hint->opcode);\n\t\t\t}\n\t\t\tif (hint && hint->jump != UT64_MAX) {\n\t\t\t\top.jump = hint->jump;\n\t\t\t}\n\t\t\tif (hint && hint->fail != UT64_MAX) {\n\t\t\t\top.fail = hint->fail;\n\t\t\t}\n\t\t\tif (op.jump != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"jump\", op.jump);\n\t\t\t}\n\t\t\tif (op.fail != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"fail\", op.fail);\n\t\t\t}\n\t\t\tconst char *jesil = (hint && hint->esil) ? hint->esil: esilstr;\n\t\t\tif (jesil && *jesil) {\n\t\t\t\tpj_ks (pj, \"esil\", jesil);\n\t\t\t}\n\t\t\tpj_kb (pj, \"sign\", op.sign);\n\t\t\tpj_kn (pj, \"prefix\", op.prefix);\n\t\t\tpj_ki (pj, \"id\", op.id);\n\t\t\tif (opexstr && *opexstr) {\n\t\t\t\tpj_k (pj, \"opex\");\n\t\t\t\tpj_j (pj, opexstr);\n\t\t\t}\n\t\t\tpj_kn (pj, \"addr\", core->offset + idx);\n\t\t\t{\n\t\t\t\tchar *bytes = r_hex_bin2strdup (buf + idx, size);\n\t\t\t\tpj_ks (pj, \"bytes\", bytes);\n\t\t\t\tfree (bytes);\n\t\t\t}\n\t\t\tif (op.val != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"val\", op.val);\n\t\t\t}\n\t\t\tif (op.disp && op.disp != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"disp\", op.disp);\n\t\t\t}\n\t\t\tif (op.ptr != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"ptr\", op.ptr);\n\t\t\t}\n\t\t\tpj_ki (pj, \"size\", size);\n\t\t\tpj_ks (pj, \"type\", r_anal_optype_to_string (op.type));\n\t\t\t{\n\t\t\t\tconst char *datatype = r_anal_datatype_to_string (op.datatype);\n\t\t\t\tif (datatype) {\n\t\t\t\t\tpj_ks (pj, \"datatype\", datatype);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (esilstr) {\n\t\t\t\tint ec = esil_cost (core, addr, esilstr);\n\t\t\t\tpj_ki (pj, \"esilcost\", ec);\n\t\t\t}\n\t\t\tif (op.reg) {\n\t\t\t\tpj_ks (pj, \"reg\", op.reg);\n\t\t\t}\n\t\t\tif (op.ireg) {\n\t\t\t\tpj_ks (pj, \"ireg\", op.ireg);\n\t\t\t}\n\t\t\tpj_ki (pj, \"scale\", op.scale);\n\t\t\tif (op.refptr != -1) {\n\t\t\t\tpj_ki (pj, \"refptr\", op.refptr);\n\t\t\t}\n\t\t\tpj_ki (pj, \"cycles\", op.cycles);\n\t\t\tpj_ki (pj, \"failcycles\", op.failcycles);\n\t\t\tpj_ki (pj, \"delay\", op.delay);\n\t\t\tconst char *p1 = r_anal_stackop_tostring (op.stackop);\n\t\t\tif (strcmp (p1, \"null\")) {\n\t\t\t\tpj_ks (pj, \"stack\", p1);\n\t\t\t}\n\t\t\tpj_kn (pj, \"stackptr\", op.stackptr);\n\t\t\tconst char *arg = (op.type & R_ANAL_OP_TYPE_COND)\n\t\t\t\t? r_anal_cond_tostring (op.cond): NULL;\n\t\t\tif (arg) {\n\t\t\t\tpj_ks (pj, \"cond\", arg);\n\t\t\t}\n\t\t\tpj_ks (pj, \"family\", r_anal_op_family_to_string (op.family));\n\t\t\tpj_end (pj);\n\t\t} else if (fmt == 'r') {\n\t\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\t\tif (use_color) {\n\t\t\t\t\tr_cons_printf (\"%s0x%\" PFMT64x Color_RESET \"\\n\", color, core->offset + idx);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \"\\n\", core->offset + idx);\n\t\t\t\t}\n\t\t\t\tr_anal_esil_parse (esil, esilstr);\n\t\t\t\tr_anal_esil_dumpstack (esil);\n\t\t\t\tr_anal_esil_stack_free (esil);\n\t\t\t}\n\t\t} else {\n\t\tchar disasm[128] = { 0 };\n\t\tr_parse_subvar (core->parser, NULL,\n\t\t\tcore->offset + idx,\n\t\t\tasmop.size, r_asm_op_get_asm (&asmop),\n\t\t\tdisasm, sizeof (disasm));\n\t\tut64 killme = UT64_MAX;\n\t\tif (r_io_read_i (core->io, op.ptr, &killme, op.refptr, be)) {\n\t\t\tcore->parser->subrel_addr = killme;\n\t\t}\n\t\tchar *p = strdup (disasm);\n\t\tif (p) {\n\t\t\tr_parse_filter (core->parser, addr, core->flags, hint, p,\n\t\t\t\tdisasm, sizeof (disasm), be);\n\t\t\tfree (p);\n\t\t}\n#define printline(k, fmt, arg)\\\n\t{ \\\n\t\tif (use_color)\\\n\t\t\tr_cons_printf (\"%s%s: \" Color_RESET, color, k);\\\n\t\telse\\\n\t\t\tr_cons_printf (\"%s: \", k);\\\n\t\tif (fmt) r_cons_printf (fmt, arg);\\\n\t}\n\t\t\tprintline (\"address\", \"0x%\" PFMT64x \"\\n\", core->offset + idx);\n\t\t\tprintline (\"opcode\", \"%s\\n\", r_asm_op_get_asm (&asmop));\n\t\t\tif (!*disasm) {\n\t\t\t\tr_str_ncpy (disasm, r_asm_op_get_asm (&asmop), sizeof (disasm) - 1);\n\t\t\t}\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_parse_subvar (core->parser, fcn, addr, asmop.size,\n\t\t\t\t\t\t\tdisasm, disasm, sizeof (disasm));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (esilstr) {\n\t\t\t\tint ec = esil_cost (core, addr, esilstr);\n\t\t\t\tprintline (\"esilcost\", \"%d\\n\", ec);\n\t\t\t}\n\t\t\tprintline (\"disasm\", \"%s\\n\", disasm);\n\t\t\t{\n\t\t\t\tchar *pseudo = calloc (128 + strlen (disasm), 3);\n\t\t\t\tr_parse_parse (core->parser, disasm, pseudo);\n\t\t\t\tif (pseudo && *pseudo) {\n\t\t\t\t\tprintline (\"pseudo\", \"%s\\n\", pseudo);\n\t\t\t\t}\n\t\t\t\tfree (pseudo);\n\t\t\t}\n\t\t\tprintline (\"mnemonic\", \"%s\\n\", mnem);\n\t\t\t{\n\t\t\t\tchar *opname = strdup (disasm);\n\t\t\t\tchar *sp = strchr (opname, ' ');\n\t\t\t\tif (sp) {\n\t\t\t\t\t*sp = 0;\n\t\t\t\t}\n\t\t\t\tchar *d = r_asm_describe (core->rasm, opname);\n\t\t\t\tif (d && *d) {\n\t\t\t\t\tprintline (\"description\", \"%s\\n\", d);\n\t\t\t\t}\n\t\t\t\tfree (d);\n\t\t\t\tfree (opname);\n\t\t\t}\n\t\t\t{\n\t\t\t\tut8 *mask = r_anal_mask (core->anal, len - idx, buf + idx, core->offset + idx);\n\t\t\t\tchar *maskstr = r_hex_bin2strdup (mask, size);\n\t\t\t\tprintline (\"mask\", \"%s\\n\", maskstr);\n\t\t\t\tfree (mask);\n\t\t\t\tfree (maskstr);\n\t\t\t}\n\t\t\tif (hint) {\n\t\t\t\tif (hint->opcode) {\n\t\t\t\t\tprintline (\"ophint\", \"%s\\n\", hint->opcode);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintline (\"prefix\", \"%u\\n\", op.prefix);\n\t\t\tprintline (\"id\", \"%d\\n\", op.id);\n#if 0\n// no opex here to avoid lot of tests broken..and having json in here is not much useful imho\n\t\t\tif (opexstr && *opexstr) {\n\t\t\t\tprintline (\"opex\", \"%s\\n\", opexstr);\n\t\t\t}\n#endif\n\t\t\tprintline (\"bytes\", \"%s\", \"\");\n\t\t\tint minsz = R_MIN (len, size);\n\t\t\tminsz = R_MAX (minsz, 0);\n\t\t\tfor (j = 0; j < minsz; j++) {\n\t\t\t\tr_cons_printf (\"%02x\", buf[idx + j]);\n\t\t\t}\n\t\t\tr_cons_newline ();\n\t\t\tif (op.val != UT64_MAX) {\n\t\t\t\tprintline (\"val\", \"0x%08\" PFMT64x \"\\n\", op.val);\n\t\t\t}\n\t\t\tif (op.ptr != UT64_MAX) {\n\t\t\t\tprintline (\"ptr\", \"0x%08\" PFMT64x \"\\n\", op.ptr);\n\t\t\t}\n\t\t\tif (op.disp && op.disp != UT64_MAX) {\n\t\t\t\tprintline (\"disp\", \"0x%08\" PFMT64x \"\\n\", op.disp);\n\t\t\t}\n\t\t\tif (op.refptr != -1) {\n\t\t\t\tprintline (\"refptr\", \"%d\\n\", op.refptr);\n\t\t\t}\n\t\t\tprintline (\"size\", \"%d\\n\", size);\n\t\t\tprintline (\"sign\", \"%s\\n\", r_str_bool (op.sign));\n\t\t\tprintline (\"type\", \"%s\\n\", r_anal_optype_to_string (op.type));\n\t\t\tconst char *datatype = r_anal_datatype_to_string (op.datatype);\n\t\t\tif (datatype) {\n\t\t\t\tprintline (\"datatype\", \"%s\\n\", datatype);\n\t\t\t}\n\t\t\tprintline (\"cycles\", \"%d\\n\", op.cycles);\n\t\t\tif (op.failcycles) {\n\t\t\t\tprintline (\"failcycles\", \"%d\\n\", op.failcycles);\n\t\t\t}\n\t\t\tif (op.type2) {\n\t\t\t\tprintline (\"type2\", \"0x%x\\n\", op.type2);\n\t\t\t}\n\t\t\tif (op.reg) {\n\t\t\t\tprintline (\"reg\", \"%s\\n\", op.reg);\n\t\t\t}\n\t\t\tif (op.ireg) {\n\t\t\t\tprintline (\"ireg\", \"%s\\n\", op.ireg);\n\t\t\t}\n\t\t\tif (op.scale) {\n\t\t\t\tprintline (\"scale\", \"%d\\n\", op.scale);\n\t\t\t}\n\t\t\tif (hint && hint->esil) {\n\t\t\t\tprintline (\"esil\", \"%s\\n\", hint->esil);\n\t\t\t} else if (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\t\tprintline (\"esil\", \"%s\\n\", esilstr);\n\t\t\t}\n\t\t\tif (hint && hint->jump != UT64_MAX) {\n\t\t\t\top.jump = hint->jump;\n\t\t\t}\n\t\t\tif (op.jump != UT64_MAX) {\n\t\t\t\tprintline (\"jump\", \"0x%08\" PFMT64x \"\\n\", op.jump);\n\t\t\t}\n\t\t\tif (op.direction != 0) {\n\t\t\t\tconst char * dir = op.direction == 1 ? \"read\"\n\t\t\t\t\t: op.direction == 2 ? \"write\"\n\t\t\t\t\t: op.direction == 4 ? \"exec\"\n\t\t\t\t\t: op.direction == 8 ? \"ref\": \"none\";\n\t\t\t\tprintline (\"direction\", \"%s\\n\", dir);\n\t\t\t}\n\t\t\tif (hint && hint->fail != UT64_MAX) {\n\t\t\t\top.fail = hint->fail;\n\t\t\t}\n\t\t\tif (op.fail != UT64_MAX) {\n\t\t\t\tprintline (\"fail\", \"0x%08\" PFMT64x \"\\n\", op.fail);\n\t\t\t}\n\t\t\tif (op.delay) {\n\t\t\t\tprintline (\"delay\", \"%d\\n\", op.delay);\n\t\t\t}\n\t\t\t{\n\t\t\t\tconst char *arg = (op.type & R_ANAL_OP_TYPE_COND)?  r_anal_cond_tostring (op.cond): NULL;\n\t\t\t\tif (arg) {\n\t\t\t\t\tprintline (\"cond\", \"%s\\n\", arg);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintline (\"family\", \"%s\\n\", r_anal_op_family_to_string (op.family));\n\t\t\tif (op.stackop != R_ANAL_STACK_NULL) {\n\t\t\t\tprintline (\"stackop\", \"%s\\n\", r_anal_stackop_tostring (op.stackop));\n\t\t\t}\n\t\t\tif (op.stackptr) {\n\t\t\t\tprintline (\"stackptr\", \"%\"PFMT64u\"\\n\", op.stackptr);\n\t\t\t}\n\t\t}\n\t\t//r_cons_printf (\"false: 0x%08\"PFMT64x\"\\n\", core->offset+idx);\n\t\t//free (hint);\n\t\tfree (mnem);\n\t\tr_anal_hint_free (hint);\n\t\tr_anal_op_fini (&op);\n\t}\n\tr_anal_op_fini (&op);\n\tif (fmt == 's') {\n\t\tr_cons_printf (\"%d\\n\", totalsize);\n\t} else if (fmt == 'j') {\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\tr_anal_esil_free (esil);\n}\n\nstatic int bb_cmp(const void *a, const void *b) {\n\tconst RAnalBlock *ba = a;\n\tconst RAnalBlock *bb = b;\n\treturn ba->addr - bb->addr;\n}\n\nstatic int casecmp(const void* _a, const void * _b) {\n\tconst RAnalCaseOp* a = _a;\n\tconst RAnalCaseOp* b = _b;\n\treturn a->addr != b->addr;\n}\n\nstatic ut64 __opaddr(const RAnalBlock *b, ut64 addr) {\n\tint i;\n\tif (addr >= b->addr && addr < (b->addr + b->size)) {\n\t\tfor (i = 0; i < b->ninstr; i++) {\n\t\t\tut64 aa = b->addr + r_anal_bb_offset_inst (b, i);\n\t\t\tut64 ab = b->addr + r_anal_bb_offset_inst (b, i + 1);\n\t\t\tif (addr >= aa && addr < ab) {\n\t\t\t\treturn aa;\n\t\t\t}\n\t\t}\n\t}\n\treturn UT64_MAX;\n}\n\nstatic RList *get_xrefs(RAnalBlock *block) {\n\tRListIter *iter;\n\tRAnalRef *ref;\n\tRList *list = NULL;\n\tsize_t i;\n\tfor (i = 0; i < block->ninstr; i++) {\n\t\tut64 ia = block->addr + block->op_pos[i];\n\t\tRList *xrefs = r_anal_xrefs_get (block->anal, ia);\n\t\tr_list_foreach (xrefs, iter, ref) {\n\t\t\tif (!list) {\n\t\t\t\tlist = r_list_newf (free);\n\t\t\t}\n\t\t\tr_list_push (list, ut64_new (ref->addr));\n\t\t}\n\t}\n\treturn list;\n}\n\nstatic char *fcnjoin(RList *list) {\n\tRAnalFunction *n;\n\tRListIter *iter;\n\tRStrBuf buf;\n\tr_strbuf_init (&buf);\n\tr_list_foreach (list, iter, n) {\n\t\tr_strbuf_appendf (&buf, \" 0x%08\" PFMT64x, n->addr);\n\t}\n\tchar *s = strdup (r_strbuf_get (&buf));\n\tr_strbuf_fini (&buf);\n\treturn s;\n}\n\nstatic char *ut64join(RList *list) {\n\tut64 *n;\n\tRListIter *iter;\n\tRStrBuf buf;\n\tr_strbuf_init (&buf);\n\tr_list_foreach (list, iter, n) {\n\t\tr_strbuf_appendf (&buf, \" 0x%08\" PFMT64x, *n);\n\t}\n\tchar *s = strdup (r_strbuf_get (&buf));\n\tr_strbuf_fini (&buf);\n\treturn s;\n}\n\nstatic RList *get_calls(RAnalBlock *block) {\n\tRList *list = NULL;\n\tRAnalOp op;\n\tut8 *data = malloc (block->size);\n\tif (data) {\n\t\tblock->anal->iob.read_at (block->anal->iob.io, block->addr, data, block->size);\n\t\tsize_t i;\n\t\tfor (i = 0; i < block->size; i++) {\n\t\t\tint ret = r_anal_op (block->anal, &op, block->addr + i, data + i, block->size - i, R_ANAL_OP_MASK_HINT);\n\t\t\tif (ret < 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (op.type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t\tif (!list) {\n\t\t\t\t\tlist = r_list_newf (free);\n\t\t\t\t}\n\t\t\t\tr_list_push (list, ut64_new (op.jump));\n\t\t\t}\n\t\t\tr_anal_op_fini (&op);\n\t\t\tif (op.size > 0) {\n\t\t\t\ti += op.size - 1;\n\t\t\t}\n\t\t}\n\n\t}\n\treturn list;\n}\n\nstatic void anal_bb_list(RCore *core, const char *input) {\n\tconst int mode = *input;\n\tPJ *pj = NULL;\n\tRTable *table = NULL;\n\tRBIter iter;\n\tRAnalBlock *block;\n\tif (mode == 'j') {\n\t\tpj = pj_new ();\n\t\tpj_o (pj);\n\t\tpj_ka (pj, \"blocks\");\n\t} else if (mode == ',' || mode == 't') {\n\t\ttable = r_table_new (\"bbs\");\n\t\tRTableColumnType *s = r_table_type (\"string\");\n\t\tRTableColumnType *n = r_table_type (\"number\");\n\t\tr_table_add_column (table, n, \"addr\", 0);\n\t\tr_table_add_column (table, n, \"size\", 0);\n\t\tr_table_add_column (table, n, \"traced\", 0);\n\t\tr_table_add_column (table, n, \"ninstr\", 0);\n\t\tr_table_add_column (table, s, \"jump\", 0);\n\t\tr_table_add_column (table, s, \"fail\", 0);\n\t\tr_table_add_column (table, s, \"fcns\", 0);\n\t\tr_table_add_column (table, s, \"calls\", 0);\n\t\tr_table_add_column (table, s, \"xrefs\", 0);\n\t}\n\n\tr_rbtree_foreach (core->anal->bb_tree, iter, block, RAnalBlock, _rb) {\n\t\tRList *xrefs = get_xrefs (block);\n\t\tRList *calls = get_calls (block);\n\t\tswitch (mode) {\n\t\tcase 'j':\n\t\t\tpj_o (pj);\n\t\t\tchar *addr = r_str_newf (\"0x%\" PFMT64x, block->addr);\n\t\t\tpj_ks (pj, \"addr\", addr);\n\t\t\tfree (addr);\n\t\t\tpj_kb (pj, \"traced\", block->traced);\n\t\t\tpj_kn (pj, \"ninstr\", block->ninstr);\n\t\t\tpj_kn (pj, \"size\", block->size);\n\t\t\tif (block->jump != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"jump\", block->jump);\n\t\t\t}\n\t\t\tif (block->fail != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"fail\", block->fail);\n\t\t\t}\n\t\t\tif (xrefs) {\n\t\t\t\tpj_ka (pj, \"xrefs\");\n\t\t\t\tRListIter *iter2;\n\t\t\t\tut64 *addr;\n\t\t\t\tr_list_foreach (xrefs, iter2, addr) {\n\t\t\t\t\tpj_n (pj, *addr);\n\t\t\t\t}\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t\tif (calls) {\n\t\t\t\tpj_ka (pj, \"calls\");\n\t\t\t\tRListIter *iter2;\n\t\t\t\tut64 *addr;\n\t\t\t\tr_list_foreach (calls, iter2, addr) {\n\t\t\t\t\tpj_n (pj, *addr);\n\t\t\t\t}\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t\tpj_ka (pj, \"fcns\");\n\t\t\tRListIter *iter2;\n\t\t\tRAnalFunction *fcn;\n\t\t\tr_list_foreach (block->fcns, iter2, fcn) {\n\t\t\t\tpj_n (pj, fcn->addr);\n\t\t\t}\n\t\t\tpj_end (pj);\n\t\t\tpj_end (pj);\n\t\t\tbreak;\n\t\tcase ',':\n\t\tcase 't':\n\t\t\t{\n\t\t\t\tchar *jump = block->jump != UT64_MAX? r_str_newf (\"0x%08\" PFMT64x, block->jump): strdup (\"\");\n\t\t\t\tchar *fail = block->fail != UT64_MAX? r_str_newf (\"0x%08\" PFMT64x, block->fail): strdup (\"\");\n\t\t\t\tchar *call = ut64join (calls);\n\t\t\t\tchar *xref = ut64join (calls);\n\t\t\t\tchar *fcns = fcnjoin (block->fcns);\n\t\t\t\tr_table_add_rowf (table, \"xnddsssss\",\n\t\t\t\t\tblock->addr,\n\t\t\t\t\tblock->size,\n\t\t\t\t\tblock->traced,\n\t\t\t\t\tblock->ninstr,\n\t\t\t\t\tjump,\n\t\t\t\t\tfail,\n\t\t\t\t\tfcns,\n\t\t\t\t\tcall,\n\t\t\t\t\txref\n\t\t\t\t);\n\t\t\t\tfree (jump);\n\t\t\t\tfree (fail);\n\t\t\t\tfree (call);\n\t\t\t\tfree (xref);\n\t\t\t\tfree (fcns);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'q':\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x\"\\n\", block->addr);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x , block->addr);\n\t\t\tif (block->jump != UT64_MAX) {\n\t\t\t\tr_cons_printf (\" .j 0x%08\" PFMT64x, block->jump);\n\t\t\t}\n\t\t\tif (block->fail != UT64_MAX) {\n\t\t\t\tr_cons_printf (\" .f 0x%08\" PFMT64x, block->fail);\n\t\t\t}\n\t\t\tif (xrefs) {\n\t\t\t\tRListIter *iter2;\n\t\t\t\tr_cons_printf (\" .x\");\n\t\t\t\tut64 *addr;\n\t\t\t\tr_list_foreach (xrefs, iter2, addr) {\n\t\t\t\t\tr_cons_printf (\" 0x%08\" PFMT64x, *addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (calls) {\n\t\t\t\tr_cons_printf (\" .c\");\n\t\t\t\tRListIter *iter2;\n\t\t\t\tut64 *addr;\n\t\t\t\tr_list_foreach (calls, iter2, addr) {\n\t\t\t\t\tr_cons_printf (\" 0x%08\" PFMT64x, *addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (block->fcns) {\n\t\t\t\tRListIter *iter2;\n\t\t\t\tRAnalFunction *fcn;\n\t\t\t\tr_list_foreach (block->fcns, iter2, fcn) {\n\t\t\t\t\tr_cons_printf (\" .u 0x%\" PFMT64x, fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_cons_printf (\" .s %\" PFMT64d \"\\n\", block->size);\n\t\t}\n\t\tr_list_free (calls);\n\t\tr_list_free (xrefs);\n\t}\n\tif (mode == 'j') {\n\t\tpj_end (pj);\n\t\tpj_end (pj);\n\t\tchar *j = pj_drain (pj);\n\t\tr_cons_println (j);\n\t\tfree (j);\n\t} else if (mode == 't' || mode == ',') {\n\t\tchar *q = strchr (input, ' ');\n\t\tif (q) {\n\t\t\tr_table_query (table, q + 1);\n\t\t}\n\t\tchar *s = r_table_tofancystring (table);\n\t\tr_cons_println (s);\n\t\tfree (s);\n\t\tr_table_free (table);\n\t}\n}\n\nstatic void print_bb(PJ *pj, const RAnalBlock *b, const RAnalFunction *fcn, const ut64 addr) {\n\tRListIter *iter2;\n\tRAnalBlock *b2;\n\tint outputs = (b->jump != UT64_MAX) + (b->fail != UT64_MAX);\n\tint inputs = 0;\n\tr_list_foreach (fcn->bbs, iter2, b2) {\n\t\tinputs += (b2->jump == b->addr) + (b2->fail == b->addr);\n\t}\n\tut64 opaddr = __opaddr (b, addr);\n\tif (pj) {\n\t\tpj_o (pj);\n\t\tif (b->jump != UT64_MAX) {\n\t\t\tpj_kn (pj, \"jump\", b->jump);\n\t\t}\n\t\tif (b->fail != UT64_MAX) {\n\t\t\tpj_kn (pj, \"fail\", b->fail);\n\t\t}\n\t\tif (b->switch_op) {\n\t\t\tpj_k (pj, \"switch_op\");\n\t\t\tpj_o (pj);\n\t\t\tpj_kn (pj, \"addr\", b->switch_op->addr);\n\t\t\tpj_kn (pj, \"min_val\", b->switch_op->min_val);\n\t\t\tpj_kn (pj, \"def_val\", b->switch_op->def_val);\n\t\t\tpj_kn (pj, \"max_val\", b->switch_op->max_val);\n\t\t\tpj_k (pj, \"cases\");\n\t\t\tpj_a (pj);\n\t\t\t{\n\t\t\tRListIter *case_op_iter;\n\t\t\tRAnalCaseOp *case_op;\n\t\t\tr_list_foreach (b->switch_op->cases, case_op_iter, case_op) {\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_kn (pj, \"addr\", case_op->addr);\n\t\t\t\tpj_kn (pj, \"jump\", case_op->jump);\n\t\t\t\tpj_kn (pj, \"value\", case_op->value);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t\t}\n\t\t\tpj_end (pj);\n\t\t\tpj_end (pj);\n\t\t}\n\t\tpj_kn (pj, \"opaddr\", opaddr);\n\t\tpj_kn (pj, \"addr\", b->addr);\n\t\tpj_ki (pj, \"size\", b->size);\n\t\tpj_ki (pj, \"inputs\", inputs);\n\t\tpj_ki (pj, \"outputs\", outputs);\n\t\tpj_ki (pj, \"ninstr\", b->ninstr);\n\t\tpj_kb (pj, \"traced\", b->traced);\n\t\tpj_end (pj);\n\t} else {\n\t\tif (b->switch_op) {\n\t\t\tRList *unique_cases = r_list_uniq (b->switch_op->cases, casecmp);\n\t\t\toutputs += r_list_length (unique_cases);\n\t\t\tr_list_free (unique_cases);\n\t\t}\n\t\tif (b->jump != UT64_MAX) {\n\t\t\tr_cons_printf (\"jump: 0x%08\"PFMT64x\"\\n\", b->jump);\n\t\t}\n\t\tif (b->fail != UT64_MAX) {\n\t\t\tr_cons_printf (\"fail: 0x%08\"PFMT64x\"\\n\", b->fail);\n\t\t}\n\t\tr_cons_printf (\"opaddr: 0x%08\"PFMT64x\"\\n\", opaddr);\n\t\tr_cons_printf (\"addr: 0x%08\" PFMT64x \"\\nsize: %\" PFMT64d \"\\ninputs: %d\\noutputs: %d\\nninstr: %d\\ntraced: %s\\n\",\n\t\t\tb->addr, b->size, inputs, outputs, b->ninstr, r_str_bool (b->traced));\n\t}\n}\n\nstatic bool anal_fcn_list_bb(RCore *core, const char *input, bool one) {\n\tRDebugTracepoint *tp = NULL;\n\tRListIter *iter;\n\tRAnalBlock *b;\n\tint mode = 0;\n\tut64 addr, bbaddr = UT64_MAX;\n\tPJ *pj = NULL;\n\n\tif (*input == '.') {\n\t\tone = true;\n\t\tinput++;\n\t}\n\tif (*input) {\n\t\tmode = *input;\n\t\tinput++;\n\t}\n\tif (*input == '.') {\n\t\tone = true;\n\t\tinput++;\n\t}\n\tif (input && *input) {\n\t\taddr = bbaddr = r_num_math (core->num, input);\n\t\tif (!addr && *input != '0') {\n\t\t\taddr = core->offset;\n\t\t}\n\t} else {\n\t\taddr = core->offset;\n\t}\n\tinput = r_str_trim_head_ro (input);\n\tif (one) {\n\t\tbbaddr = addr;\n\t}\n\tif (mode == 'j') {\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\tr_cons_println (\"[]\");\n\t\t\treturn false;\n\t\t}\n\t\tpj_a (pj);\n\t}\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\tif (!fcn) {\n\t\tif (mode == 'j') {\n\t\t\tpj_end (pj);\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t}\n\t\tif (mode == 'i' && input && *input == 'j') {\n\t\t\tr_cons_println (\"{}\");\n\t\t}\n\t\teprintf (\"Cannot find function in 0x%08\"PFMT64x\"\\n\", addr);\n\t\treturn false;\n\t}\n\tif (mode == '*') {\n\t\tr_cons_printf (\"fs blocks\\n\");\n\t}\n\tif (fcn->bbs) {\n\t\tr_list_sort (fcn->bbs, bb_cmp);\n\t}\n\tif (mode == '=') { // afb\n\t\tRList *flist = r_list_newf ((RListFree) r_listinfo_free);\n\t\tif (!flist) {\n\t\t\treturn false;\n\t\t}\n\t\tls_foreach (fcn->bbs, iter, b) {\n\t\t\tRInterval inter = (RInterval) {b->addr, b->size};\n\t\t\tRListInfo *info = r_listinfo_new (NULL, inter, inter, -1, NULL);\n\t\t\tif (!info) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_list_append (flist, info);\n\t\t}\n\t\tRTable *table = r_core_table (core, \"fcnbbs\");\n\t\tr_table_visual_list (table, flist, core->offset, core->blocksize,\n\t\t\tr_cons_get_size (NULL), r_config_get_i (core->config, \"scr.color\"));\n\t\tr_cons_printf (\"\\n%s\\n\", r_table_tostring (table));\n\t\tr_table_free (table);\n\t\tr_list_free (flist);\n\t\treturn true;\n\t}\n\n\tRTable *t = NULL;\n\tif (mode == 't') {\n\t\tt = r_table_new (\"fcnbbs\");\n\t\tr_table_set_columnsf (t, \"xdxx\", \"addr\", \"size\", \"jump\", \"fail\");\n\t}\n\tr_list_foreach (fcn->bbs, iter, b) {\n\t\tif (one) {\n\t\t\tif (bbaddr != UT64_MAX && (bbaddr < b->addr || bbaddr >= (b->addr + b->size))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tswitch (mode) {\n\t\tcase 't':\n\t\t\tr_table_add_rowf (t, \"xdxx\", b->addr, b->size, b->jump, b->fail);\n\t\t\tbreak;\n\t\tcase 'r':\n\t\t\tif (b->jump == UT64_MAX) {\n\t\t\t\tut64 retaddr = r_anal_bb_opaddr_i (b, b->ninstr - 1);\n\t\t\t\tif (retaddr == UT64_MAX) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!strcmp (input, \"*\")) {\n\t\t\t\t\tr_cons_printf (\"db 0x%08\"PFMT64x\"\\n\", retaddr);\n\t\t\t\t} else if (!strcmp (input, \"-*\")) {\n\t\t\t\t\tr_cons_printf (\"db-0x%08\"PFMT64x\"\\n\", retaddr);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"0x%08\"PFMT64x\"\\n\", retaddr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tr_cons_printf (\"f bb.%05\" PFMT64x \" = 0x%08\" PFMT64x \"\\n\",\n\t\t\t\tb->addr & 0xFFFFF, b->addr);\n\t\t\tbreak;\n\t\tcase 'q':\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", b->addr);\n\t\t\tbreak;\n\t\tcase 'j':\n\t\t\tprint_bb (pj, b, fcn, addr);\n\t\t\tbreak;\n\t\tcase 'i':\n\t\t\tif (*input == 'j') { // \"afbij\"\n\t\t\t\tpj = r_core_pj_new (core);\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tprint_bb (pj, b, fcn, addr);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t} else {\n\t\t\t\tprint_bb (NULL, b, fcn, addr);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ttp = r_debug_trace_get (core->dbg, b->addr);\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" 0x%08\" PFMT64x \" %02X:%04X %\" PFMT64d,\n\t\t\t\tb->addr, b->addr + b->size,\n\t\t\t\ttp? tp->times: 0, tp? tp->count: 0,\n\t\t\t\tb->size);\n\t\t\tif (b->jump != UT64_MAX) {\n\t\t\t\tr_cons_printf (\" j 0x%08\" PFMT64x, b->jump);\n\t\t\t}\n\t\t\tif (b->fail != UT64_MAX) {\n\t\t\t\tr_cons_printf (\" f 0x%08\" PFMT64x, b->fail);\n\t\t\t}\n\t\t\tif (b->switch_op) {\n\t\t\t\tRAnalCaseOp *cop;\n\t\t\t\tRListIter *iter;\n\t\t\t\tRList *unique_cases = r_list_uniq (b->switch_op->cases, casecmp);\n\t\t\t\tr_list_foreach (unique_cases, iter, cop) {\n\t\t\t\t\tr_cons_printf (\" s 0x%08\" PFMT64x, cop->addr);\n\t\t\t\t}\n\t\t\t\tr_list_free (unique_cases);\n\t\t\t}\n\t\t\tr_cons_newline ();\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (mode == 't') {\n\t\tconst char *arg = input;\n\t\tif (r_table_query (t, arg)) {\n\t\t\tchar *ts = r_table_tofancystring (t);\n\t\t\tr_cons_printf (\"%s\", ts);\n\t\t\tfree (ts);\n\t\t}\n\t\tr_table_free (t);\n\t} else if (mode == 'j') {\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\treturn true;\n}\n\nstatic bool anal_bb_edge (RCore *core, const char *input) {\n\t// \"afbe\" switch-bb-addr case-bb-addr\n\tchar *arg = strdup (r_str_trim_head_ro (input));\n\tchar *sp = strchr (arg, ' ');\n\tbool ret = false;\n\tif (sp) {\n\t\t*sp++ = 0;\n\t\tut64 switch_addr = r_num_math (core->num, arg);\n\t\tut64 case_addr = r_num_math (core->num, sp);\n\t\tRList *blocks = r_anal_get_blocks_in (core->anal, switch_addr);\n\t\tif (blocks && !r_list_empty (blocks)) {\n\t\t\tr_anal_block_add_switch_case (r_list_first (blocks), switch_addr, 0, case_addr);\n\t\t\tret = true;\n\t\t}\n\t\tr_list_free (blocks);\n\t}\n\tfree (arg);\n\treturn ret;\n}\n\nstatic bool anal_fcn_del_bb(RCore *core, const char *input) {\n\tut64 addr = r_num_math (core->num, input);\n\tif (!addr) {\n\t\taddr = core->offset;\n\t}\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, -1);\n\tif (fcn) {\n\t\tif (!strcmp (input, \"*\")) {\n\t\t\twhile (!r_list_empty (fcn->bbs)) {\n\t\t\t\tr_anal_function_remove_block (fcn, r_list_first (fcn->bbs));\n\t\t\t}\n\t\t} else {\n\t\t\tRAnalBlock *b;\n\t\t\tRListIter *iter;\n\t\t\tr_list_foreach (fcn->bbs, iter, b) {\n\t\t\t\tif (b->addr == addr) {\n\t\t\t\t\tr_anal_function_remove_block (fcn, b);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\teprintf (\"Cannot find basic block\\n\");\n\t\t}\n\t} else {\n\t\teprintf (\"Cannot find function\\n\");\n\t}\n\treturn false;\n}\n\nstatic int cmd_afbplus(RCore *core, const char *input) {\n\t// fcn_addr bb_addr bb_size [jump] [fail]\n\tconst char *ptr2 = NULL;\n\tut64 fcnaddr = -1LL, addr = -1LL;\n\tut64 size = 0LL;\n\tut64 jump = UT64_MAX;\n\tut64 fail = UT64_MAX;\n\tRAnalFunction *fcn = NULL;\n\tRAnalDiff *diff = NULL;\n\n\tchar *ptr = r_str_trim_dup (input);\n\n\tswitch (r_str_word_set0 (ptr)) {\n\tcase 6:\n\t\tptr2 = r_str_word_get0 (ptr, 6);\n\t\tif (!(diff = r_anal_diff_new ())) {\n\t\t\teprintf (\"error: Cannot init RAnalDiff\\n\");\n\t\t\tfree (ptr);\n\t\t\treturn false;\n\t\t}\n\t\tif (ptr2[0] == 'm') {\n\t\t\tdiff->type = R_ANAL_DIFF_TYPE_MATCH;\n\t\t} else if (ptr2[0] == 'u') {\n\t\t\tdiff->type = R_ANAL_DIFF_TYPE_UNMATCH;\n\t\t}\n\tcase 5: // get fail\n\t\tfail = r_num_math (core->num, r_str_word_get0 (ptr, 4));\n\tcase 4: // get jump\n\t\tjump = r_num_math (core->num, r_str_word_get0 (ptr, 3));\n\tcase 3: // get size\n\t\tsize = r_num_math (core->num, r_str_word_get0 (ptr, 2));\n\tcase 2: // get addr\n\t\taddr = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\tcase 1: // get fcnaddr\n\t\tfcnaddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t}\n\tfcn = r_anal_get_function_at (core->anal, fcnaddr);\n\tif (fcn) {\n\t\tif (!r_anal_fcn_add_bb (core->anal, fcn, addr, size, jump, fail, diff))\n\t\t//if (!r_anal_fcn_add_bb_raw (core->anal, fcn, addr, size, jump, fail, type, diff))\n\t\t{\n\t\t\teprintf (\"afb+: Cannot add basic block at 0x%08\"PFMT64x\"\\n\", addr);\n\t\t}\n\t} else {\n\t\teprintf (\"afb+ No function at 0x%\" PFMT64x \" from 0x%08\"PFMT64x\" -> 0x%08\"PFMT64x\"\\n\",\n\t\t\t\tfcnaddr, addr, jump);\n\t}\n\tr_anal_diff_free (diff);\n\tfree (ptr);\n\treturn true;\n}\n\nstatic void r_core_anal_nofunclist(RCore *core, const char *input) {\n\tint minlen = (int)(input[0]==' ') ? r_num_math (core->num, input + 1): 16;\n\tut64 code_size = r_num_get (core->num, \"$SS\");\n\tut64 base_addr = r_num_get (core->num, \"$S\");\n\tut64 chunk_size, chunk_offset, i;\n\tRListIter *iter, *iter2;\n\tRAnalFunction *fcn;\n\tRAnalBlock *b;\n\tchar* bitmap;\n\tint counter;\n\n\tif (minlen < 1) {\n\t\tminlen = 1;\n\t}\n\tif (code_size < 1) {\n\t\treturn;\n\t}\n\tbitmap = calloc (1, code_size + 64);\n\tif (!bitmap) {\n\t\treturn;\n\t}\n\n\t// for each function\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\t// for each basic block in the function\n\t\tr_list_foreach (fcn->bbs, iter2, b) {\n\t\t\t// if it is not withing range, continue\n\t\t\tif ((fcn->addr < base_addr) || (fcn->addr >= base_addr+code_size))\n\t\t\t\tcontinue;\n\t\t\t// otherwise mark each byte in the BB in the bitmap\n\t\t\tfor (counter = 0; counter < b->size; counter++) {\n\t\t\t\tbitmap[b->addr+counter-base_addr] = '=';\n\t\t\t}\n\t\t\t// finally, add a special marker to show the beginning of a\n\t\t\t// function\n\t\t\tbitmap[fcn->addr-base_addr] = 'F';\n\t\t}\n\t}\n\n\t// Now we print the list of memory regions that are not assigned to a function\n\tchunk_size = 0;\n\tchunk_offset = 0;\n\tfor (i = 0; i < code_size; i++) {\n\t\tif (bitmap[i]){\n\t\t\t// We only print a region is its size is bigger than 15 bytes\n\t\t\tif (chunk_size >= minlen){\n\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, base_addr+chunk_offset, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"  %6\" PFMT64u \"   %s\\n\",\n\t\t\t\t\t\t\tbase_addr+chunk_offset, chunk_size, fcn->name);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"  %6\" PFMT64u \"\\n\",\n\t\t\t\t\t\t\tbase_addr+chunk_offset, chunk_size);\n\t\t\t\t}\n\t\t\t}\n\t\t\tchunk_size = 0;\n\t\t\tchunk_offset = i+1;\n\t\t\tcontinue;\n\t\t}\n\t\tchunk_size+=1;\n\t}\n\tif (chunk_size >= 16) {\n\t\tfcn = r_anal_get_fcn_in (core->anal, base_addr+chunk_offset, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);\n\t\tif (fcn) {\n\t\t\tr_cons_printf (\"0x%08\"PFMT64x\"  %6\" PFMT64u \"   %s\\n\", base_addr+chunk_offset, chunk_size, fcn->name);\n\t\t} else {\n\t\t\tr_cons_printf (\"0x%08\"PFMT64x\"  %6\" PFMT64u \"\\n\", base_addr+chunk_offset, chunk_size);\n\t\t}\n\t}\n\tfree (bitmap);\n}\n\nstatic void r_core_anal_fmap(RCore *core, const char *input) {\n\tint show_color = r_config_get_i (core->config, \"scr.color\");\n\tint cols = r_config_get_i (core->config, \"hex.cols\") * 4;\n\tut64 code_size = r_num_get (core->num, \"$SS\");\n\tut64 base_addr = r_num_get (core->num, \"$S\");\n\tRListIter *iter, *iter2;\n\tRAnalFunction *fcn;\n\tRAnalBlock *b;\n\tint assigned;\n\tut64 i;\n\n\tif (code_size < 1) {\n\t\treturn;\n\t}\n\tchar *bitmap = calloc (1, code_size + 64);\n\tif (!bitmap) {\n\t\treturn;\n\t}\n\n\t// for each function\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\t// for each basic block in the function\n\t\tr_list_foreach (fcn->bbs, iter2, b) {\n\t\t\t// if it is not within range, continue\n\t\t\tif ((fcn->addr < base_addr) || (fcn->addr >= base_addr+code_size))\n\t\t\t\tcontinue;\n\t\t\t// otherwise mark each byte in the BB in the bitmap\n\t\t\tint counter = 1;\n\t\t\tfor (counter = 0; counter < b->size; counter++) {\n\t\t\t\tbitmap[b->addr+counter-base_addr] = '=';\n\t\t\t}\n\t\t\tbitmap[fcn->addr-base_addr] = 'F';\n\t\t}\n\t}\n\t// print the bitmap\n\tassigned = 0;\n\tif (cols < 1) {\n\t\tcols = 1;\n\t}\n\tfor (i = 0; i < code_size; i += 1) {\n\t\tif (!(i % cols)) {\n\t\t\tr_cons_printf (\"\\n0x%08\"PFMT64x\"  \", base_addr+i);\n\t\t}\n\t\tif (bitmap[i]) {\n\t\t\tassigned++;\n\t\t}\n\t\tif (show_color) {\n\t\t\tif (bitmap[i]) {\n\t\t\t\tr_cons_printf (\"%s%c\\x1b[0m\", Color_GREEN, bitmap[i]);\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\".\");\n\t\t\t}\n\t\t} else {\n\t\t\tr_cons_printf (\"%c\", bitmap[i] ? bitmap[i] : '.' );\n\t\t}\n\t}\n\tr_cons_printf (\"\\n%d / %\" PFMT64u \" (%.2lf%%) bytes assigned to a function\\n\",\n\t\tassigned, code_size, 100.0 * ( (float) assigned) / code_size);\n\tfree (bitmap);\n}\n\nstatic bool fcnNeedsPrefix(const char *name) {\n\tif (!strncmp (name, \"entry\", 5)) {\n\t\treturn false;\n\t}\n\tif (!strncmp (name, \"main\", 4)) {\n\t\treturn false;\n\t}\n\treturn (!strchr (name, '.'));\n}\n\nstatic char * getFunctionName(RCore *core, ut64 off, const char *name, bool prefix) {\n\tconst char *fcnpfx = \"\";\n\tif (prefix) {\n\t\tif (fcnNeedsPrefix (name) && (!fcnpfx || !*fcnpfx)) {\n\t\t\tfcnpfx = \"fcn\";\n\t\t} else {\n\t\t\tfcnpfx = r_config_get (core->config, \"anal.fcnprefix\");\n\t\t}\n\t}\n\tif (r_reg_get (core->anal->reg, name, -1)) {\n\t\treturn r_str_newf (\"%s.%08\"PFMT64x, \"fcn\", off);\n\t}\n\treturn strdup (name); // r_str_newf (\"%s%s%s\", fcnpfx, *fcnpfx? \".\": \"\", name);\n}\n\nstatic void rename_fcnsig(RAnal *anal, const char *oname, const char *nname) {\n#define DB anal->sdb_types\n\t// rename type\n\tconst char *type = sdb_const_get (DB, oname, 0);\n\tif (type && !strcmp (type, \"func\")) {\n\t\tsdb_unset (DB, oname, 0);\n\t\tsdb_set (DB, nname, \"func\", 0);\n\t}\n\t// rename args\n\tchar *k = r_str_newf (\"func.%s.args\", oname);\n\tconst char *argstr = sdb_const_get (DB, k, 0);\n\tif (R_STR_ISEMPTY (argstr)) {\n\t\tfree (k);\n\t\treturn;\n\t}\n\tint i, args = r_num_get (NULL, argstr);\n\tsdb_unset (DB, k, 0);\n\tfree (k);\n\tk = r_str_newf (\"func.%s.args\", nname);\n\tchar *v = r_str_newf (\"%d\", (int)args);\n\tsdb_set (DB, k, v, 0);\n\tfree (v);\n\t// rename arg#\n\tfree (k);\n\tfor (i = 0; i < args; i++) {\n\t\tk = r_str_newf (\"func.%s.arg.%d\", oname, i);\n\t\tchar *v = sdb_get (DB, k, 0);\n\t\tif (v) {\n\t\t\tsdb_unset (DB, k, 0);\n\t\t\tfree (k);\n\t\t\tk = r_str_newf (\"func.%s.arg.%d\", nname, i);\n\t\t\tsdb_set (DB, k, v, 0);\n\t\t\tfree (v);\n\t\t}\n\t\tfree (k);\n\t}\n\t// unset the leftovers\n\tfor (; i < args + 8; i++) {\n\t\tk = r_str_newf (\"func.%s.arg.%d\", oname, i);\n\t\tsdb_unset (DB, k, 0);\n\t\tfree (k);\n\t}\n\t// rename ret\n\tk = r_str_newf (\"func.%s.ret\", oname);\n\tv = sdb_get (DB, k, 0);\n\tsdb_unset (DB, k, 0);\n\tfree (k);\n\tk = r_str_newf (\"func.%s.ret\", nname);\n\tsdb_set (DB, k, v, 0);\n\tfree (k);\n\tfree (v);\n#undef DB\n}\n\n/* TODO: move into r_anal_function_rename (); */\nstatic bool __setFunctionName(RCore *core, ut64 addr, const char *_name, bool prefix) {\n\tr_return_val_if_fail (core && _name, false);\n\t_name = r_str_trim_head_ro (_name);\n\tchar *name = getFunctionName (core, addr, _name, prefix);\n\t// RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_ANY);\n\tRAnalFunction *fcn = r_anal_get_function_at (core->anal, addr);\n\tif (fcn) {\n\t\tchar *oname = strdup (fcn->name);\n\t\tRFlagItem *flag = r_flag_get (core->flags, fcn->name);\n\t\tif (flag && flag->space && strcmp (flag->space->name, R_FLAGS_FS_FUNCTIONS) == 0) {\n\t\t\t// Only flags in the functions fs should be renamed, e.g. we don't want to rename symbol flags.\n\t\t\tr_flag_rename (core->flags, flag, name);\n\t\t} else {\n\t\t\t// No flag or not specific to the function, create a new one.\n\t\t\tr_flag_space_push (core->flags, R_FLAGS_FS_FUNCTIONS);\n\t\t\tr_flag_set (core->flags, name, fcn->addr, r_anal_function_size_from_entry (fcn));\n\t\t\tr_flag_space_pop (core->flags);\n\t\t}\n\t\trename_fcnsig (core->anal, oname, name);\n\t\tr_anal_function_rename (fcn, name);\n\t\tif (core->anal->cb.on_fcn_rename) {\n\t\t\tcore->anal->cb.on_fcn_rename (core->anal, core->anal->user, fcn, name);\n\t\t}\n\t\tfree (oname);\n\t\tfree (name);\n\t\treturn true;\n\t}\n\tfree (name);\n\treturn false;\n}\n\nstatic void afCc(RCore *core, const char *input) {\n\tut64 addr;\n\tRAnalFunction *fcn;\n\tif (*input == ' ') {\n\t\taddr = r_num_math (core->num, input);\n\t} else {\n\t\taddr = core->offset;\n\t}\n\tif (addr == 0LL) {\n\t\tfcn = r_anal_get_function_byname (core->anal, input + 3);\n\t} else {\n\t\tfcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);\n\t}\n\tif (fcn) {\n\t\tut32 totalCycles = r_anal_function_cost (fcn);\n\t\t// FIXME: This defeats the purpose of the function, but afC is used in project files.\n\t\t// cf. canal.c\n\t\tr_cons_printf (\"%d\\n\", totalCycles);\n\t} else {\n\t\teprintf (\"afCc: Cannot find function\\n\");\n\t}\n}\n\nstatic void cmd_anal_fcn_sig(RCore *core, const char *input) {\n\tbool json = (input[0] == 'j');\n\tchar *p = strchr (input, ' ');\n\tchar *fcn_name = p ? r_str_trim_dup (p): NULL;\n\tRListIter *iter;\n\tRAnalFuncArg *arg;\n\n\tRAnalFunction *fcn;\n\tif (fcn_name) {\n\t\tfcn = r_anal_get_function_byname (core->anal, fcn_name);\n\t} else {\n\t\tfcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\tif (fcn) {\n\t\t\tfcn_name = fcn->name;\n\t\t}\n\t}\n\tif (!fcn) {\n\t\treturn;\n\t}\n\n\tif (json) {\n\t\tPJ *j = pj_new ();\n\t\tif (!j) {\n\t\t\treturn;\n\t\t}\n\t\tpj_a (j);\n\n\t\tchar *key = NULL;\n\t\tif (fcn_name) {\n\t\t\tkey = resolve_fcn_name (core->anal, fcn_name);\n\t\t}\n\n\t\tif (key) {\n\t\t\tconst char *fcn_type = r_type_func_ret (core->anal->sdb_types, key);\n\t\t\tint nargs = r_type_func_args_count (core->anal->sdb_types, key);\n\t\t\tif (fcn_type) {\n\t\t\t\tpj_o (j);\n\t\t\t\tpj_ks (j, \"name\", r_str_getf (key));\n\t\t\t\tpj_ks (j, \"return\", r_str_getf (fcn_type));\n\t\t\t\tpj_k (j, \"args\");\n\t\t\t\tpj_a (j);\n\t\t\t\tif (nargs) {\n\t\t\t\t\tRList *list = r_core_get_func_args (core, fcn_name);\n\t\t\t\t\tr_list_foreach (list, iter, arg) {\n\t\t\t\t\t\tchar *type = arg->orig_c_type;\n\t\t\t\t\t\tpj_o (j);\n\t\t\t\t\t\tpj_ks (j, \"name\", arg->name);\n\t\t\t\t\t\tpj_ks (j, \"type\", type);\n\t\t\t\t\t\tpj_end (j);\n\t\t\t\t\t}\n\t\t\t\t\tr_list_free (list);\n\t\t\t\t}\n\t\t\t\tpj_end (j);\n\t\t\t\tpj_ki (j, \"count\", nargs);\n\t\t\t\tpj_end (j);\n\t\t\t}\n\t\t\tfree (key);\n\t\t} else {\n\t\t\tpj_o (j);\n\t\t\tpj_ks (j, \"name\", r_str_getf (fcn_name));\n\t\t\tpj_k (j, \"args\");\n\t\t\tpj_a (j);\n\n\t\t\tRAnalFcnVarsCache cache;\n\t\t\tr_anal_fcn_vars_cache_init (core->anal, &cache, fcn);\n\t\t\tint nargs = 0;\n\t\t\tRAnalVar *var;\n\t\t\tr_list_foreach (cache.rvars, iter, var) {\n\t\t\t\tnargs++;\n\t\t\t\tpj_o (j);\n\t\t\t\tpj_ks (j, \"name\", var->name);\n\t\t\t\tpj_ks (j, \"type\", var->type);\n\t\t\t\tpj_end (j);\n\t\t\t}\n\t\t\tr_list_foreach (cache.bvars, iter, var) {\n\t\t\t\tif (var->delta <= 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnargs++;\n\t\t\t\tpj_o (j);\n\t\t\t\tpj_ks (j, \"name\", var->name);\n\t\t\t\tpj_ks (j, \"type\", var->type);\n\t\t\t\tpj_end (j);\n\t\t\t}\n\t\t\tr_list_foreach (cache.svars, iter, var) {\n\t\t\t\tif (!var->isarg) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnargs++;\n\t\t\t\tpj_o (j);\n\t\t\t\tpj_ks (j, \"name\", var->name);\n\t\t\t\tpj_ks (j, \"type\", var->type);\n\t\t\t\tpj_end (j);\n\t\t\t}\n\t\t\tr_anal_fcn_vars_cache_fini (&cache);\n\n\t\t\tpj_end (j);\n\t\t\tpj_ki (j, \"count\", nargs);\n\t\t\tpj_end (j);\n\t\t}\n\t\tpj_end (j);\n\t\tconst char *s = pj_string (j);\n\t\tif (s) {\n\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t}\n\t\tpj_free (j);\n\t} else {\n\t\tchar *sig = r_anal_fcn_format_sig (core->anal, fcn, fcn_name, NULL, NULL, NULL);\n\t\tif (sig) {\n\t\t\tr_cons_printf (\"%s\\n\", sig);\n\t\t\tfree (sig);\n\t\t}\n\t}\n}\n\nstatic void __updateStats(RCore *core, Sdb *db, ut64 addr, int statsMode) {\n\tRAnalOp *op = r_core_anal_op (core, addr, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT | R_ANAL_OP_MASK_DISASM);\n\tif (!op) {\n\t\treturn;\n\t}\n\tif (statsMode == 'f') {\n\t\tconst char *family = r_anal_op_family_to_string (op->family);\n\t\tsdb_num_inc (db, family, 1, 0);\n\t} else if (statsMode == 'o') {\n\t\tconst char *type = r_anal_optype_to_string (op->type);\n\t\tsdb_num_inc (db, type, 1, 0);\n\t} else {\n\t\tchar *mnem = strdup (op->mnemonic);\n\t\tchar *sp = strchr (mnem, ' ');\n\t\tif (sp) {\n\t\t\t*sp = 0;\n\t\t\t//memmove (mnem, sp + 1, strlen (sp));\n\t\t}\n\t\tsdb_num_inc (db, mnem, 1, 0);\n\t}\n\t//sdb_set (db, family, \"1\", 0);\n\t//r_cons_printf (\"0x%08\"PFMT64x\" %s\\n\", addr, family);\n\tr_anal_op_free (op);\n\t// r_core_cmdf (core, \"pd 1 @ 0x%08\"PFMT64x\"\\n\", addr);\n}\n\nstatic Sdb *__core_cmd_anal_fcn_stats(RCore *core, const char *input) {\n\tbool silentMode = false;\n\tint statsMode = 0;\n\tif (*input == '*') {\n\t\tsilentMode = true;\n\t\tinput++;\n\t}\n\tswitch (*input) {\n\tcase '?':\n\t\teprintf (\"Usage: afis[ft]\\n\");\n\t\teprintf (\" afis           enumerate unique opcodes in function\\n\");\n\t\teprintf (\" afisa[fo]      enumerate all the meta of all the functions\\n\");\n\t\teprintf (\" afisf          enumerate unique opcode families in function\\n\");\n\t\teprintf (\" afiso          enumerate unique opcode types in function\\n\");\n\t\teprintf (\" afist [query]  list in table format\\n\");\n\t\treturn NULL;\n\tcase 'f':\n\tcase 'o':\n\t\tstatsMode = *input;\n\t\tinput++;\n\t\tbreak;\n\t}\n\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\tif (!fcn) {\n\t\teprintf (\"Cannot find any function at 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\treturn NULL;\n\t}\n\tSdb *db = sdb_new0 ();\n\tRAnalBlock *bb;\n\tRListIter *iter;\n\tr_list_foreach (fcn->bbs, iter, bb) {\n\t\tint i;\n\t\t__updateStats (core, db, bb->addr, statsMode);\n\t\tfor (i = 0; i< bb->op_pos_size; i++) {\n\t\t\tut16 op_pos = bb->op_pos[i];\n\t\t\t__updateStats (core, db, bb->addr + op_pos, statsMode);\n\t\t}\n\t}\n\tif (silentMode) {\n\t\t// nothing\n\t} else if (*input == 't') {\n\t\tSdbList *ls = sdb_foreach_list (db, true);\n\t\tSdbListIter *it;\n\t\tRTable *t = r_table_new (\"fcnstats\");\n\t\tSdbKv *kv;\n\t\tRTableColumnType *typeString = r_table_type (\"string\");\n\t\tRTableColumnType *typeNumber = r_table_type (\"number\");\n\t\tr_table_add_column (t, typeString, \"name\", 0);\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *key = sdbkv_key (kv);\n\t\t\tr_table_add_column (t, typeNumber, key, 0);\n\t\t}\n\t\tRList *items = r_list_newf (free);\n\t\tr_list_append (items, strdup (fcn->name));\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *value = sdbkv_value (kv);\n\t\t\tint nv = (int)r_num_get (NULL, value);\n\t\t\tr_list_append (items, r_str_newf (\"%d\", nv));\n\t\t}\n\t\tr_table_add_row_list (t, items);\n\t\tr_table_query (t, input + 1);\n\t\tchar *ts = r_table_tostring (t);\n\t\tr_cons_printf (\"%s\", ts);\n\t\tfree (ts);\n\t\tr_table_free (t);\n\t} else {\n\t\tSdbList *ls = sdb_foreach_list (db, true);\n\t\tSdbListIter *it;\n\t\tSdbKv *kv;\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *key = sdbkv_key(kv);\n\t\t\tconst char *value = sdbkv_value(kv);\n\t\t\tr_cons_printf (\"%4d %s\\n\", (int)r_num_get (NULL, value), key);\n\t\t}\n\t}\n\treturn db;\n\t//sdb_free (db);\n}\n\nstatic void __core_cmd_anal_fcn_allstats(RCore *core, const char *input) {\n\tRAnalFunction *fcn;\n\tSdbKv *kv;\n\tRListIter *iter;\n\tSdbListIter *it;\n\tRList *dbs = r_list_newf ((RListFree)sdb_free);\n\tSdb *d = sdb_new0 ();\n\tut64 oseek = core->offset;\n\tbool isJson = strchr (input, 'j') != NULL;\n\n\tchar *inp = r_str_newf (\"*%s\", input);\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\tr_core_seek (core, fcn->addr, true);\n\t\tSdb *db = __core_cmd_anal_fcn_stats (core, inp);\n                sdb_num_set (db, \".addr\", fcn->addr, 0);\n\t\tr_list_append (dbs, db);\n\t}\n\tfree (inp);\n\tSdb *db;\n\tr_list_foreach (dbs, iter, db) {\n\t\tSdbList *ls = sdb_foreach_list (db, true);\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *name = sdbkv_key(kv);\n\t\t\tsdb_add (d, name, \"1\", 0);\n\t\t}\n\t\tls_free (ls);\n\t}\n\tRTable *t = r_table_new (\"fcnallstats\");\n\tSdbList *ls = sdb_foreach_list (d, true);\n\tRTableColumnType *typeString = r_table_type (\"string\");\n\tRTableColumnType *typeNumber = r_table_type (\"number\");\n\tr_table_add_column (t, typeString, \"name\", 0);\n\tr_table_add_column (t, typeNumber, \"addr\", 0);\n\tls_foreach (ls, it, kv) {\n\t\tconst char *key = sdbkv_key (kv);\n\t\tif (*key == '.') continue;\n\t\tr_table_add_column (t, typeNumber, key, 0);\n\t}\n\tsdb_free (d);\n\n\tr_list_foreach (dbs, iter, db) {\n\t\tSdbList *ls = sdb_foreach_list (db, false);\n\t\tSdbListIter *it;\n\t\tSdbKv *kv;\n\t\tchar *names[100];\n\t\tint i;\n\t\tfor (i = 0; i < 100; i++) {\n\t\t\tnames[i] = NULL;\n\t\t}\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *key = sdbkv_key(kv);\n\t\t\tconst char *value = sdbkv_value (kv);\n\t\t\tif (*key == '.') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint idx = r_table_column_nth (t, key);\n\t\t\tif (idx != -1) {\n\t\t\t\tut64 nv = r_num_get (NULL, value);\n\t\t\t\tnames[idx] = r_str_newf (\"%d\", (int)nv);\n\t\t\t} else {\n\t\t\t\teprintf (\"Invalid column name (%s) %c\", key, 10);\n\t\t\t}\n\t\t}\n\t\tRList *items = r_list_newf (free);\n\t\tut64 fcnAddr = sdb_num_get (db, \".addr\", 0);\n\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, fcnAddr, 0);\n\t\tr_list_append (items, fcn?strdup (fcn->name):strdup (\"\"));\n\t\tr_list_append (items, fcn?r_str_newf (\"0x%08\"PFMT64x, fcnAddr): strdup (\"0\"));\n\t\tint cols = r_list_length (t->cols);\n\t\tfor (i = 2; i < cols; i++) {\n\t\t\tif (names[i]) {\n\t\t\t\tif (names[i][0] != '.') {\n\t\t\t\t\tr_list_append (items, strdup (names[i]));\n\t\t\t\t}\n\t\t\t\tR_FREE (names[i]);\n\t\t\t} else {\n\t\t\t\tr_list_append (items, strdup (\"0\"));\n\t\t\t}\n\t\t}\n\t\tr_table_add_row_list (t, items);\n\t}\n\tr_table_query (t, (*input)?input + 1: \"\");\n\tchar *ts = isJson? r_table_tojson(t): r_table_tostring (t);\n\tr_cons_printf (\"%s%s\", ts, isJson ? \"\\n\" : \"\");\n\tfree (ts);\n\tr_table_free (t);\n\tr_core_seek (core, oseek, true);\n\tr_list_free (dbs);\n}\n\nR_API char *fcnshowr(RAnalFunction *function) {\n\tRAnal *a = function->anal;\n\t//PJ *pj = a->coreb.pjWithEncoding (a->coreb.core);\n\tconst char *realname = NULL, *import_substring = NULL;\n\tRStrBuf *sb = r_strbuf_new (\"\");\n\n\tRFlagItem *flag = a->flag_get (a->flb.f, function->addr);\n\t// Can't access R_FLAGS_FS_IMPORTS, since it is defined in r_core.h\n\tif (flag && flag->space && !strcmp (flag->space->name, \"imports\")) {\n\t\t// Get substring after last dot\n\t\timport_substring = r_str_rchr (function->name, NULL, '.');\n\t\tif (import_substring) {\n\t\t\trealname = import_substring + 1;\n\t\t}\n\t} else {\n\t\trealname = function->name;\n\t}\n\t\n\tchar *args = strdup (\"\");\n\tchar *sdb_ret = r_str_newf (\"func.%s.ret\", realname);\n\tchar *sdb_args = r_str_newf (\"func.%s.args\", realname);\n\t// RList *args_list = r_list_newf ((RListFree) free);\n\tunsigned int i;\n\t// const char *ret_type = sdb_const_get (a->sdb_types, sdb_ret, 0);\n\tconst char *argc_str = sdb_const_get (a->sdb_types, sdb_args, 0);\n\tconst int argc = argc_str? atoi (argc_str): 0;\n\n\tconst bool no_return = r_anal_noreturn_at_addr (a, function->addr);\n\tif (no_return) {\n\t\tr_strbuf_appendf (sb, \"tn %s\\n\", function->name);\n\t}\n\tif (function->cc) {\n\t\tr_strbuf_appendf (sb, \"afc %s\\n\", function->cc);\n\t}\n\tfor (i = 0; i < argc; i++) {\n\t\tchar *sdb_arg_i = r_str_newf (\"func.%s.arg.%d\", realname, i);\n\t\tchar *type = sdb_get (a->sdb_types, sdb_arg_i, 0);\n\t\tif (!type) continue;\n\t\tchar *comma = strchr (type, ',');\n\t\tif (comma) {\n\t\t\t*comma = 0;\n\t\t\tconst char *cc_arg = r_reg_get_name (a->reg, r_reg_get_name_idx (sdb_fmt (\"A%d\", i)));\n\t\t\tr_strbuf_appendf (sb, \"afvr %s %s %s\\n\", cc_arg, comma + 1, type);\n\t\t}\n\t\tfree (type);\n\t\tfree (sdb_arg_i);\n\t}\n\tfree (sdb_args);\n\tfree (sdb_ret);\n\tfree (args);\n\treturn r_strbuf_drain (sb);\n}\n\nstatic void cmd_afsr(RCore *core, const char *input) {\n\tut64 addr = core->offset;\n\tRAnalFunction *f;\n\tif ((f = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL))) {\n\t\tchar *res = fcnshowr (f);\n\t\tif (R_STR_ISNOTEMPTY (res)) {\n\t\t\tr_cons_println (res);\n\t\t}\n\t\tfree (res);\n\t} else {\n\t\teprintf (\"No function defined at 0x%08\" PFMT64x \"\\n\", addr);\n\t}\n}\n\nstatic void cmd_afsj(RCore *core, const char *arg) {\n\tut64 a = r_num_math (core->num, arg);\n\tconst ut64 addr = a? a: core->offset;\n\tRAnalFunction *f = r_anal_get_fcn_in (core->anal, addr, -1);\n\tif (f) {\n\t\tchar *s = r_anal_function_get_json (f);\n\t\tr_cons_printf (\"%s\\n\", s);\n\t\tfree (s);\n\t} else {\n\t\teprintf (\"Cannot find function in 0x%08\"PFMT64x\"\\n\", addr);\n\t}\n}\n\nstatic void cmd_afbc(RCore *core, const char *input) {\n\tr_return_if_fail (core && input);\n\tchar *ptr = strdup (input);\n\tif (!ptr) {\n\t\treturn;\n\t}\n\tif (*ptr == '?') {\n\t\teprintf (\"Usage: afbc red @ addrOfBlock\\n\");\n\t} else if (!*ptr) {\n\t\tRAnalBlock *bb = r_anal_get_block_at (core->anal, core->offset);\n\t\tif (bb && (bb->color.r || bb->color.g || bb->color.b)) {\n\t\t\tchar *s = r_cons_rgb_str (NULL, -1, &bb->color);\n\t\t\tif (s) {\n\t\t\t\tchar *name = r_cons_rgb_tostring (bb->color.r, bb->color.g, bb->color.b);\n\t\t\t\tr_cons_printf (\"%s%s\"Color_RESET\"\\n\", s, name);\n\t\t\t\tfree (name);\n\t\t\t\tfree (s);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tut64 addr = core->offset;\n\t\tchar *space = strchr (ptr, ' ');\n\t\tif (space) {\n\t\t\t*space++ = 0;\n\t\t\taddr = r_num_math (core->num, space);\n\t\t}\n\t\tRColor color = {0};\n\t\t(void)r_cons_pal_parse (ptr, &color);\n\t\tif (color.r || color.g || color.b) {\n\t\t\tRAnalBlock *bb = r_anal_get_block_at (core->anal, addr);\n\t\t\tif (bb) {\n\t\t\t\tbb->color = color;\n\t\t\t}\n\t\t} else {\n\t\t\teprintf (\"Invalid color? (%s)\\n\", ptr);\n\t\t}\n\t}\n\tfree (ptr);\n}\n\n// Fcn Xrefs Map\nstatic void xrefs_map(RCore *core, const char *input) {\n\tRListIter *iter, *iter2, *iter3;\n\tRAnalRef *r;\n\tRAnalFunction *f, *f2;\n\tint col = 0;\n\tint count = 0;\n\tdo {\n\t\tr_cons_print (\"             \");\n\t\tcount = 0;\n\t\tr_list_foreach (core->anal->fcns, iter, f) {\n\t\t\tint nlen = strlen (f->name);\n\t\t\tif (col >= nlen) {\n\t\t\t\tr_cons_printf (\"|\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcount++;\n\t\t\tr_cons_printf (\"%c\", f->name[col]);\n\t\t}\n\t\tr_cons_newline ();\n\t\tcol++;\n\t} while (count);\n\n\tint total = 0;\n\tr_list_foreach (core->anal->fcns, iter, f) {\n\t\tRList *refs = r_anal_function_get_refs (f);\n\t\tr_cons_printf (\"0x%08\"PFMT64x\"  \", f->addr);\n\t\ttotal = 0;\n\t\tr_list_foreach (core->anal->fcns, iter2, f2) {\n\t\t\tint count = 0;\n\t\t\tr_list_foreach (refs, iter3, r) {\n\t\t\t\tif (r->addr == f2->addr) {\n\t\t\t\t\tcount ++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count > 0) {\n\t\t\t\ttotal++;\n\t\t\t\tif (count < 10) {\n\t\t\t\t\tr_cons_printf (\"%d\", count);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"+\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\".\");\n\t\t\t}\n\t\t}\n\t\tif (total > 0) {\n\t\t\tr_cons_printf (\"  %s\\n\", f->name);\n\t\t} else {\n\t\t\tr_cons_printf (\"\\r\");\n\t\t}\n\t\tr_list_free (refs);\n\t}\n}\n\nR_API void r_core_af(RCore *core, ut64 addr, const char *name, bool anal_calls) {\n\tint depth = r_config_get_i (core->config, \"anal.depth\");\n\tRAnalFunction *fcn = NULL;\n\n\t//r_core_anal_undefine (core, core->offset);\n\tr_core_anal_fcn (core, addr, UT64_MAX, R_ANAL_REF_TYPE_NULL, depth);\n\tfcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\tif (fcn) {\n\t\t/* ensure we use a proper name */\n\t\t__setFunctionName (core, addr, fcn->name, false);\n\t\tif (core->anal->opt.vars) {\n\t\t\tr_core_recover_vars (core, fcn, true);\n\t\t}\n\t\t__add_vars_sdb (core, fcn);\n\t} else {\n\t\tif (core->anal->verbose) {\n\t\t\teprintf (\"Warning: Unable to analyze function at 0x%08\"PFMT64x\"\\n\", addr);\n\t\t}\n\t}\n\tif (anal_calls) {\n\t\tfcn = r_anal_get_fcn_in (core->anal, addr, 0); /// XXX wrong in case of nopskip\n\t\tif (fcn) {\n\t\t\tRAnalRef *ref;\n\t\t\tRListIter *iter;\n\t\t\tRList *refs = r_anal_function_get_refs (fcn);\n\t\t\tr_list_foreach (refs, iter, ref) {\n\t\t\t\tif (ref->addr == UT64_MAX) {\n\t\t\t\t\t//eprintf (\"Warning: ignore 0x%08\"PFMT64x\" call 0x%08\"PFMT64x\"\\n\", ref->at, ref->addr);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (ref->type != R_ANAL_REF_TYPE_CODE && ref->type != R_ANAL_REF_TYPE_CALL) {\n\t\t\t\t\t/* only follow code/call references */\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!r_io_is_valid_offset (core->io, ref->addr, !core->anal->opt.noncode)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tr_core_anal_fcn (core, ref->addr, fcn->addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t/* use recursivity here */\n#if 1\n\t\t\t\tRAnalFunction *f = r_anal_get_function_at (core->anal, ref->addr);\n\t\t\t\tif (f) {\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tRAnalRef *ref;\n\t\t\t\t\tRList *refs1 = r_anal_function_get_refs (f);\n\t\t\t\t\tr_list_foreach (refs1, iter, ref) {\n\t\t\t\t\t\tif (!r_io_is_valid_offset (core->io, ref->addr, !core->anal->opt.noncode)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ref->type != 'c' && ref->type != 'C') {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_core_anal_fcn (core, ref->addr, f->addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t\t\t// recursively follow fcn->refs again and again\n\t\t\t\t\t}\n\t\t\t\t\tr_list_free (refs1);\n\t\t\t\t} else {\n\t\t\t\t\tf = r_anal_get_fcn_in (core->anal, fcn->addr, 0);\n\t\t\t\t\tif (f) {\n\t\t\t\t\t\t/* cut function */\n\t\t\t\t\t\tr_anal_function_resize (f, addr - fcn->addr);\n\t\t\t\t\t\tr_core_anal_fcn (core, ref->addr, fcn->addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t\t\tf = r_anal_get_function_at (core->anal, fcn->addr);\n\t\t\t\t\t}\n\t\t\t\t\tif (!f) {\n\t\t\t\t\t\teprintf (\"af: Cannot find function at 0x%08\" PFMT64x \"\\n\", fcn->addr);\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\t\t\t}\n\t\t\tr_list_free (refs);\n\t\t\tif (core->anal->opt.vars) {\n\t\t\t\tr_core_recover_vars (core, fcn, true);\n\t\t\t}\n\t\t}\n\t}\n\tif (name) {\n\t\tif (*name && !__setFunctionName (core, addr, name, true)) {\n\t\t\teprintf (\"af: Cannot find function at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t}\n\t}\n#if SLOW_ANALYSIS\n\t// r_core_anal_propagate_noreturn (core, addr);\n#if 0\n\t// XXX THIS IS VERY SLOW\n\tif (core->anal->opt.vars) {\n\t\tRListIter *iter;\n\t\tRAnalFunction *fcni = NULL;\n\t\tr_list_foreach (core->anal->fcns, iter, fcni) {\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_core_recover_vars (core, fcni, true);\n\t\t}\n\t}\n#endif\n//\tflag_every_function (core);\n#endif\n}\n\nstatic int cmd_anal_fcn(RCore *core, const char *input) {\n\tchar i;\n\n\tr_cons_break_timeout (r_config_get_i (core->config, \"anal.timeout\"));\n\tswitch (input[1]) {\n\tcase '-': // \"af-\"\n\t\tif (!input[2]) {\n\t\t\tcmd_anal_fcn (core, \"f-$$\");\n\t\t\tr_core_anal_undefine (core, core->offset);\n\t\t} else if (!strcmp (input + 2, \"*\")) {\n\t\t\tRAnalFunction *f;\n\t\t\tRListIter *iter, *iter2;\n\t\t\tr_list_foreach_safe (core->anal->fcns, iter, iter2, f) {\n\t\t\t\tr_anal_del_jmprefs (core->anal, f);\n\t\t\t\tr_core_anal_undefine (core, f->addr);\n\t\t\t}\n\t\t} else {\n\t\t\tut64 addr = input[2]\n\t\t\t\t? r_num_math (core->num, input + 2)\n\t\t\t\t: core->offset;\n\t\t\tr_core_anal_undefine (core, addr);\n\t\t\tr_anal_fcn_del_locs (core->anal, addr);\n\t\t\tr_anal_fcn_del (core->anal, addr);\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"afj\"\n\t\t{\n\t\t\tRList *blocks = r_anal_get_blocks_in (core->anal, core->offset);\n\t\t\tRAnalBlock *block = r_list_first (blocks);\n\t\t\tif (block && !r_list_empty (block->fcns)) {\n\t\t\t\tchar *args = strdup (input + 2);\n\t\t\t\tRList *argv = r_str_split_list (args, \" \", 0);\n\t\t\t\tut64 table = r_num_math (core->num, r_list_get_n (argv, 1));\n\t\t\t\tut64 sz = r_num_math (core->num, r_list_get_n (argv, 2));\n\t\t\t\tut64 elements = r_num_math (core->num, r_list_get_n (argv, 3));\n\t\t\t\tut64 seg = r_num_math (core->num, r_list_get_n (argv, 4));\n\t\t\t\tint depth = 50;\n\t\t\t\ttry_walkthrough_jmptbl (core->anal, r_list_first (block->fcns), block, depth, core->offset, 0, table, seg, sz, elements, 0, false);\n\t\t\t\tfree (args);\n\t\t\t} else {\n\t\t\t\teprintf (\"No function defined here\\n\");\n\t\t\t}\n\t\t\tr_list_free (blocks);\n\t\t}\n\t\tbreak;\n\tcase 'a': // \"afa\"\n\t\tif (input[2] == 'l') { // \"afal\" : list function call arguments\n\t\t\tint show_args = r_config_get_i (core->config, \"dbg.funcarg\");\n\t\t\tif (show_args) {\n\t\t\t\tr_core_print_func_args (core);\n\t\t\t}\n\t\t} else {\n\t\t\tr_core_print_func_args (core);\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"afd\"\n\t\t{\n\t\tut64 addr = 0;\n\t\tif (input[2] == '?') {\n\t\t\teprintf (\"afd [offset]\\n\");\n\t\t} else if (input[2] == ' ') {\n\t\t\taddr = r_num_math (core->num, input + 2);\n\t\t} else {\n\t\t\taddr = core->offset;\n\t\t}\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\tif (input[2] == 'j') { // afdj\n\t\t\tPJ *pj = r_core_pj_new (core);\n\t\t\tif (!pj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tpj_o (pj);\n\t\t\tif (fcn) {\n\t\t\t\tpj_ks (pj, \"name\", fcn->name);\n\t\t\t\tpj_ki (pj, \"offset\", (int)(addr - fcn->addr));\n\t\t\t}\n\t\t\tpj_end (pj);\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t} else {\n\t\t\tif (fcn) {\n\t\t\t\tif (fcn->addr != addr) {\n\t\t\t\t\tr_cons_printf (\"%s + %d\\n\", fcn->name,\n\t\t\t\t\t\t\t(int)(addr - fcn->addr));\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_println (fcn->name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"afd: Cannot find function\\n\");\n\t\t\t}\n\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'u': // \"afu\"\n\t\tif (input[2] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_afu);\n\t\t\tbreak;\n\t\t}\n\n\t\tif (input[2] != ' ') {\n\t\t\teprintf (\"Missing argument\\n\");\n\t\t\treturn false;\n\t\t}\n\n\t\tut64 addr = core->offset;\n\t\tut64 addr_end = r_num_math (core->num, input + 2);\n\t\tif (addr_end < addr) {\n\t\t\teprintf (\"Invalid address ranges\\n\");\n\t\t} else {\n\t\t\tut64 a, b;\n\t\t\tconst char *c;\n\t\t\ta = r_config_get_i (core->config, \"anal.from\");\n\t\t\tb = r_config_get_i (core->config, \"anal.to\");\n\t\t\tc = r_config_get (core->config, \"anal.limits\");\n\t\t\tr_config_set_i (core->config, \"anal.from\", addr);\n\t\t\tr_config_set_i (core->config, \"anal.to\", addr_end);\n\t\t\tr_config_set (core->config, \"anal.limits\", \"true\");\n\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\tif (fcn) {\n\t\t\t\tr_anal_function_resize (fcn, addr_end - addr);\n\t\t\t}\n\t\t\tr_core_anal_fcn (core, addr, UT64_MAX, R_ANAL_REF_TYPE_NULL, 1);\n\t\t\tfcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\tif (fcn) {\n\t\t\t\tr_anal_function_resize (fcn, addr_end - addr);\n\t\t\t}\n\t\t\tr_config_set_i (core->config, \"anal.from\", a);\n\t\t\tr_config_set_i (core->config, \"anal.to\", b);\n\t\t\tr_config_set (core->config, \"anal.limits\", r_str_get (c));\n\t\t}\n\t\tbreak;\n\tcase '+': { // \"af+\"\n\t\tif (input[2] != ' ') {\n\t\t\teprintf (\"Missing arguments\\n\");\n\t\t\treturn false;\n\t\t}\n\t\tchar *ptr = strdup (input + 3);\n\t\tconst char *ptr2;\n\t\tint n = r_str_word_set0 (ptr);\n\t\tconst char *name = NULL;\n\t\tut64 addr = UT64_MAX;\n\t\tRAnalDiff *diff = NULL;\n\t\tint type = R_ANAL_FCN_TYPE_FCN;\n\t\tif (n > 1) {\n\t\t\tswitch (n) {\n\t\t\tcase 4:\n\t\t\t\tptr2 = r_str_word_get0 (ptr, 3);\n\t\t\t\tif (!(diff = r_anal_diff_new ())) {\n\t\t\t\t\teprintf (\"error: Cannot init RAnalDiff\\n\");\n\t\t\t\t\tfree (ptr);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (ptr2[0] == 'm') {\n\t\t\t\t\tdiff->type = R_ANAL_DIFF_TYPE_MATCH;\n\t\t\t\t} else if (ptr2[0] == 'u') {\n\t\t\t\t\tdiff->type = R_ANAL_DIFF_TYPE_UNMATCH;\n\t\t\t\t}\n\t\t\tcase 3:\n\t\t\t\tptr2 = r_str_word_get0 (ptr, 2);\n\t\t\t\tif (strchr (ptr2, 'l')) {\n\t\t\t\t\ttype = R_ANAL_FCN_TYPE_LOC;\n\t\t\t\t} else if (strchr (ptr2, 'i')) {\n\t\t\t\t\ttype = R_ANAL_FCN_TYPE_IMP;\n\t\t\t\t} else if (strchr (ptr2, 's')) {\n\t\t\t\t\ttype = R_ANAL_FCN_TYPE_SYM;\n\t\t\t\t} else {\n\t\t\t\t\ttype = R_ANAL_FCN_TYPE_FCN;\n\t\t\t\t}\n\t\t\tcase 2:\n\t\t\t\tname = r_str_word_get0 (ptr, 1);\n\t\t\tcase 1:\n\t\t\t\taddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\t}\n\t\t\tRAnalFunction *fcn = r_anal_create_function (core->anal, name, addr, type, diff);\n\t\t\tif (!fcn) {\n\t\t\t\teprintf (\"Cannot add function (duplicated)\\n\");\n\t\t\t}\n\t\t}\n\t\tr_anal_diff_free (diff);\n\t\tfree (ptr);\n\t\t}\n\t\tbreak;\n\tcase 'o': // \"afo\"\n\t\tswitch (input[2]) {\n\t\tcase '?':\n\t\t\teprintf (\"Usage: afo[?sj] ([name|offset])\\n\");\n\t\t\tbreak;\n\t\tcase 'j':\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tPJ *pj = r_core_pj_new (core);\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tpj_o (pj);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tpj_ki (pj, \"address\", fcn->addr);\n\t\t\t\t}\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\0':\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 's': // \"afos\"\n\t\t\t{\n\t\t\t\tut64 addr = core->offset;\n\t\t\t\tRListIter *iter;\n\t\t\t\tRList *list = r_anal_get_functions_in (core->anal, addr);\n\t\t\t\tRAnalFunction *fcn;\n\t\t\t\tr_list_foreach (list, iter, fcn) {\n\t\t\t\t\tr_cons_printf (\"= 0x%08\" PFMT64x \"\\n\", fcn->addr);\n\t\t\t\t}\n\t\t\t\tr_list_free (list);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ' ':\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn;\n\t\t\t\tut64 addr = r_num_math (core->num, input + 3);\n\t\t\t\tif (addr == 0LL) {\n\t\t\t\t\tfcn = r_anal_get_function_byname (core->anal, input + 3);\n\t\t\t\t} else {\n\t\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\t}\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'i': // \"afi\"\n\t\tswitch (input[2]) {\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_afi);\n\t\t\tbreak;\n\t\tcase '.': // \"afi.\"\n\t\t\t{\n\t\t\t\tut64 addr = core->offset;\n\t\t\t\tif (input[3] == ' ') {\n\t\t\t\t\taddr = r_num_math (core->num, input + 3);\n\t\t\t\t}\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"%s\\n\", fcn->name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'l': // \"afil\"\n\t\t\tif (input[3] == '?') {\n\t\t\t\t// TODO #7967 help refactor\n\t\t\t\thelp_msg_afll[1] = \"afil\";\n\t\t\t\tr_core_cmd_help (core, help_msg_afll);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/* fallthrough */\n\t\tcase 'i': // \"afii\"\n\t\t\tif (input[3] == '-') {\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_list_free (fcn->imports);\n\t\t\t\t\tfcn->imports = NULL;\n\t\t\t\t}\n\t\t\t} else if (input[3] == ' ') {\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tif (!fcn->imports) {\n\t\t\t\t\t\tfcn->imports = r_list_newf ((RListFree)free);\n\t\t\t\t\t}\n\t\t\t\t\tr_list_append (fcn->imports, r_str_trim_dup (input + 4));\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"No function found\\n\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn && fcn->imports) {\n\t\t\t\t\tchar *imp;\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tr_list_foreach (fcn->imports, iter, imp) {\n\t\t\t\t\t\tr_cons_printf (\"%s\\n\", imp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 's': // \"afis\"\n\t\t\tif (input[3] == 'a') { // \"afisa\"\n\t\t\t\t__core_cmd_anal_fcn_allstats (core, input + 4);\n\t\t\t} else {\n\t\t\t\tsdb_free (__core_cmd_anal_fcn_stats (core, input + 3));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'j': // \"afij\"\n\t\tcase '*': // \"afi*\"\n\t\t\tr_core_anal_fcn_list (core, input + 3, input + 2);\n\t\t\tbreak;\n\t\tcase 'p': // \"afip\"\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"is-pure: %s\\n\", r_str_bool (r_anal_function_purity (fcn)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ti = 1;\n\t\t\tr_core_anal_fcn_list (core, input + 2, &i);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'l': // \"afl\"\n\t\tswitch (input[2]) {\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_afl);\n\t\t\tbreak;\n\t\tcase 's': // \"afls\"\n\t\t\tswitch (input[3]) {\n\t\t\tcase '?':\n\t\t\t\tr_core_cmd_help (core, help_msg_afls);\n\t\t\t\tbreak;\n\t\t\tcase 'a': // \"aflsa\"\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpaddr);\n\t\t\t\tbreak;\n\t\t\tcase 'b': // \"aflsb\"\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpbbs);\n\t\t\t\tbreak;\n\t\t\tcase 's': // \"aflss\"\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpsize);\n\t\t\t\tbreak;\n\t\t\tcase 'n': // \"aflsn\"\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpname);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpaddr);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'l': // \"afll\"\n\t\t\tif (input[3] == '?') {\n\t\t\t\t// TODO #7967 help refactor\n\t\t\t\thelp_msg_afll[1] = \"afll\";\n\t\t\t\tr_core_cmd_help (core, help_msg_afll);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/* fallthrough */\n\t\tcase ',': // \"afl,\"\n\t\tcase 't': // \"aflt\"\n\t\tcase 'j': // \"aflj\"\n\t\tcase 'q': // \"aflq\"\n\t\tcase 'm': // \"aflm\"\n\t\tcase '+': // \"afl+\"\n\t\tcase '=': // \"afl=\"\n\t\tcase '*': // \"afl*\"\n\t\tcase '.': // \"afl*\"\n\t\t\tr_core_anal_fcn_list (core, NULL, input + 2);\n\t\t\tbreak;\n\t\tcase 'c': // \"aflc\"\n\t\t\tr_cons_printf (\"%d\\n\", r_list_length (core->anal->fcns));\n\t\t\tbreak;\n\t\tdefault: // \"afl \"\n\t\t\tr_core_anal_fcn_list (core, NULL, \"o\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 's': // \"afs\"\n\t\tswitch (input[2]) {\n\t\tcase '!': { // \"afs!\"\n\t\t\tchar *sig = r_core_cmd_str (core, \"afs\");\n\t\t\tchar *data = r_core_editor (core, NULL, sig);\n\t\t\tif (sig && data) {\n\t\t\t\tr_core_cmdf (core, \"\\\"afs %s\\\"\", data);\n\t\t\t}\n\t\t\tfree (sig);\n\t\t\tfree (data);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'r': { // \"afsr\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\t\tif (fcn) {\n\t\t\t\tchar *type = r_str_newf (\"type.%s\", input + 4);\n\t\t\t\tif (sdb_exists (core->anal->sdb_types, type)) {\n\t\t\t\t\tchar *query = r_str_newf (\"anal/types/func.%s.ret=%s\", fcn->name, input + 4);\n\t\t\t\t\tsdb_querys (core->sdb, NULL, 0, query);\n\t\t\t\t\tfree (query);\n\t\t\t\t}\n\t\t\t\tfree (type);\n\t\t\t} else {\n\t\t\t\teprintf (\"There's no function defined in here.\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase '*': // \"afs*\"\n\t\t\tcmd_afsr (core, input + 2);\n\t\t\tbreak;\n\t\tcase 'j': // \"afsj\"\n\t\t\tcmd_afsj (core, input + 2);\n\t\t\tbreak;\n\t\tcase 0:\n\t\tcase ' ': { // \"afs\"\n\t\t\tut64 addr = core->offset;\n\t\t\tRAnalFunction *f;\n\t\t\tconst char *arg = r_str_trim_head_ro (input + 2);\n\t\t\tif ((f = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL))) {\n\t\t\t\tif (R_STR_ISNOTEMPTY (arg)) {\n\t\t\t\t\t// parse function signature here\n\t\t\t\t\tchar *fcnstr = r_str_newf (\"%s;\", arg), *fcnstr_copy = strdup (fcnstr);\n\t\t\t\t\tchar *fcnname_aux = strtok (fcnstr_copy, \"(\");\n\t\t\t\t\tr_str_trim_tail (fcnname_aux);\n\t\t\t\t\tconst char *ls = r_str_lchr (fcnname_aux, ' ');\n\t\t\t\t\tchar *fcnname = strdup (ls? ls: fcnname_aux);\n\t\t\t\t\tif (fcnname) {\n\t\t\t\t\t\t// TODO: move this into r_anal_str_to_fcn()\n\t\t\t\t\t\tif (strcmp (f->name, fcnname)) {\n\t\t\t\t\t\t\t(void)__setFunctionName (core, addr, fcnname, false);\n\t\t\t\t\t\t\tf = r_anal_get_fcn_in (core->anal, addr, -1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_anal_str_to_fcn (core->anal, f, fcnstr);\n\t\t\t\t\t}\n\t\t\t\t\tfree (fcnname);\n\t\t\t\t\tfree (fcnstr_copy);\n\t\t\t\t\tfree (fcnstr);\n\t\t\t\t} else {\n\t\t\t\t\tchar *str = r_anal_function_get_signature (f);\n\t\t\t\t\tif (str) {\n\t\t\t\t\t\tr_cons_println (str);\n\t\t\t\t\t\tfree (str);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"No function defined at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t// case '?': // \"afs?\"\n\t\t\tr_core_cmd_help (core, help_msg_afs);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'm': // \"afm\" - merge two functions\n\t\tif (input[2] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_afm);\n\t\t\tbreak;\n\t\t}\n\t\tr_core_anal_fcn_merge (core, core->offset, r_num_math (core->num, input + 2));\n\t\tbreak;\n\tcase 'M': // \"afM\" - print functions map\n\t\tr_core_anal_fmap (core, input + 1);\n\t\tbreak;\n\tcase 'v': // \"afv\"\n\t\tvar_cmd (core, input + 2);\n\t\tbreak;\n\tcase 't': // \"aft\"\n\t\ttype_cmd (core, input + 2);\n\t\tbreak;\n\tcase 'C': // \"afC\"\n\t\tif (input[2] == 'c') {\n\t\t\tRAnalFunction *fcn;\n\t\t\tif ((fcn = r_anal_get_fcn_in (core->anal, core->offset, 0)) != NULL) {\n\t\t\t\tr_cons_printf (\"%i\\n\", r_anal_function_complexity (fcn));\n\t\t\t} else {\n\t\t\t\teprintf (\"Error: Cannot find function at 0x08%\" PFMT64x \"\\n\", core->offset);\n\t\t\t}\n\t\t} else if (input[2] == 'l') {\n\t\t\tRAnalFunction *fcn;\n\t\t\tif ((fcn = r_anal_get_fcn_in (core->anal, core->offset, 0)) != NULL) {\n\t\t\t\tr_cons_printf (\"%d\\n\", r_anal_function_loops (fcn));\n\t\t\t} else {\n\t\t\t\teprintf (\"Error: Cannot find function at 0x08%\" PFMT64x \"\\n\", core->offset);\n\t\t\t}\n\t\t} else if (input[2] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_afC);\n\t\t} else {\n\t\t\tafCc (core, r_str_trim_head_ro (input + 2));\n\t\t}\n\t\tbreak;\n\tcase 'c': { // \"afc\"\n\t\tRAnalFunction *fcn = NULL;\n\t\tif (!input[2] || input[2] == ' ' || input[2] == 'r' || input[2] == 'a') {\n\t\t\tfcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tif (!fcn) {\n\t\t\t\teprintf (\"afc: Cannot find function here\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tswitch (input[2]) {\n\t\tcase '\\0': // \"afc\"\n\t\t\tr_cons_println (fcn->cc);\n\t\t\tbreak;\n\t\tcase ' ': { // \"afc \"\n\t\t\tchar *argument = strdup (input + 3);\n\t\t\tchar *cc = argument;\n\t\t\tr_str_trim (cc);\n\t\t\tif (!r_anal_cc_exist (core->anal, cc)) {\n\t\t\t\tconst char *asmOs = r_config_get (core->config, \"asm.os\");\n\t\t\t\teprintf (\"afc: Unknown calling convention '%s' for '%s'\\n\"\n\t\t\t\t\t\t\"See afcl for available types\\n\", cc, asmOs);\n\t\t\t} else {\n\t\t\t\tfcn->cc = r_str_constpool_get (&core->anal->constpool, cc);\n\t\t\t}\n\t\t\tfree (argument);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'a': // \"afca\"\n\t\t\teprintf (\"Todo\\n\");\n\t\t\tbreak;\n\t\tcase 'f': // \"afcf\" \"afcfj\"\n\t\t\tcmd_anal_fcn_sig (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'k': // \"afck\"\n\t\t\tcmd_afck (core, NULL);\n\t\t\tbreak;\n\t\tcase 'l': // \"afcl\" list all function Calling conventions.\n\t\t\tcmd_tcc (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'o': { // \"afco\"\n\t\t\tchar *dbpath = r_str_trim_dup (input + 3);\n\t\t\tif (R_STR_ISNOTEMPTY (dbpath) && r_file_exists (dbpath)) {\n\t\t\t\tSdb *db = sdb_new (0, dbpath, 0);\n\t\t\t\tsdb_merge (core->anal->sdb_cc, db);\n\t\t\t\tsdb_close (db);\n\t\t\t\tsdb_free (db);\n\t\t\t} else {\n\t\t\t\teprintf (\"Usage: afco [dbpath] - open calling conventions defined in local file.\\n\");\t\n\t\t\t}\n\t\t\tfree (dbpath);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'r': {\t// \"afcr\"\n\t\t\tint i;\n\t\t\tPJ *pj = NULL;\n\t\t\tbool json = input[3] == 'j';\n\t\t\tif (json) {\n\t\t\t\tpj = r_core_pj_new (core);\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tpj_o (pj);\n\t\t\t}\n\n\t\t\tchar *cmd = r_str_newf (\"cc.%s.ret\", fcn->cc);\n\t\t\tconst char *regname = sdb_const_get (core->anal->sdb_cc, cmd, 0);\n\t\t\tif (regname) {\n\t\t\t\tif (json) {\n\t\t\t\t\tpj_ks (pj, \"ret\", regname);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", cmd, regname);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (cmd);\n\t\t\tif (json) {\n\t\t\t\tpj_ka (pj, \"args\");\n\t\t\t}\n\t\t\tfor (i = 0; i < R_ANAL_CC_MAXARG; i++) {\n\t\t\t\tcmd = r_str_newf (\"cc.%s.arg%d\", fcn->cc, i);\n\t\t\t\tregname = sdb_const_get (core->anal->sdb_cc, cmd, 0);\n\t\t\t\tif (regname) {\n\t\t\t\t\tif (json) {\n\t\t\t\t\t\tpj_s (pj, regname);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", cmd, regname);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfree (cmd);\n\t\t\t}\n\t\t\tif (json) {\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\n\t\t\tcmd = r_str_newf (\"cc.%s.self\", fcn->cc);\n\t\t\tregname = sdb_const_get (core->anal->sdb_cc, cmd, 0);\n\t\t\tif (regname) {\n\t\t\t\tif (json) {\n\t\t\t\t\tpj_ks (pj, \"self\", regname);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", cmd, regname);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (cmd);\n\t\t\tcmd = r_str_newf (\"cc.%s.error\", fcn->cc);\n\t\t\tregname = sdb_const_get (core->anal->sdb_cc, cmd, 0);\n\t\t\tif (regname) {\n\t\t\t\tif (json) {\n\t\t\t\t\tpj_ks (pj, \"error\", regname);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", cmd, regname);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (cmd);\n\t\t\tif (json) {\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 'R': { // \"afcR\"\n\t\t\t/* very slow, but im tired of waiting for having this, so this is the quickest implementation */\n\t\t\tint i;\n\t\t\tchar *cc = r_core_cmd_str (core, \"k anal/cc/default.cc\");\n\t\t\tr_str_trim (cc);\n\t\t\tfor (i = 0; i < 6; i++) {\n\t\t\t\tchar *res = r_core_cmd_strf (core, \"k anal/cc/cc.%s.arg%d\", cc, i);\n\t\t\t\tr_str_trim_nc (res);\n\t\t\t\tif (*res) {\n\t\t\t\t\tchar *row = r_core_cmd_strf (core, \"drr~%s 0x\", res);\n\t\t\t\t\tr_str_trim (row);\n\t\t\t\t\tr_cons_printf (\"arg[%d] %s\\n\", i, row);\n\t\t\t\t\tfree (row);\n\t\t\t\t}\n\t\t\t\tfree (res);\n\t\t\t}\n\t\t\tfree (cc);\n\t\t\tbreak;\n\t\t}\n\t\tcase '?': // \"afc?\"\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_afc);\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'B': // \"afB\" // set function bits\n\t\tif (input[2] == ' ') {\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tif (fcn) {\n\t\t\t\tint bits = atoi (input + 3);\n\t\t\t\tr_anal_hint_set_bits (core->anal, r_anal_function_min_addr (fcn), bits);\n\t\t\t\tr_anal_hint_set_bits (core->anal, r_anal_function_max_addr (fcn), core->anal->bits);\n\t\t\t\tfcn->bits = bits;\n\t\t\t} else {\n\t\t\t\teprintf (\"afB: Cannot find function to set bits at 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\t}\n\t\t} else {\n\t\t\teprintf (\"Usage: afB [bits]\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'b': // \"afb\"\n\t\tswitch (input[2]) {\n\t\tcase '-': // \"afb-\"\n\t\t\tanal_fcn_del_bb (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'e': // \"afbe\"\n\t\t\tanal_bb_edge (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'F': { // \"afbF\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\tif (fcn) {\n\t\t\t\tRAnalBlock *bb = r_anal_fcn_bbget_in (core->anal, fcn, core->offset);\n\t\t\t\tif (bb) {\n\t\t\t\t\tif (input[3]) {\n\t\t\t\t\t\tint n = atoi (input + 3);\n\t\t\t\t\t\tbb->folded = n;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbb->folded = !bb->folded;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tr_warn_if_reached ();\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0:\n\t\tcase ' ': // \"afb \"\n\t\tcase 'q': // \"afbq\"\n\t\tcase 'r': // \"afbr\"\n\t\tcase '=': // \"afb=\"\n\t\tcase '*': // \"afb*\"\n\t\tcase 'j': // \"afbj\"\n\t\tcase 't': // \"afbt\"\n\t\t\tanal_fcn_list_bb (core, input + 2, false);\n\t\t\tbreak;\n\t\tcase 'i': // \"afbi\"\n\t\t\tanal_fcn_list_bb (core, input + 2, true);\n\t\t\tbreak;\n\t\tcase '.': // \"afb.\"\n\t\t\tanal_fcn_list_bb (core, input[2]? \" $$\": input + 2, true);\n\t\t\tbreak;\n\t\tcase '+': // \"afb+\"\n\t\t\tcmd_afbplus (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'c': // \"afbc\"\n\t\t\tcmd_afbc (core, r_str_trim_head_ro (input + 3));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_afb);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'n': // \"afn\"\n\t\tswitch (input[2]) {\n\t\tcase 's': // \"afns\"\n\t\t\tif (input[3] == 'j') { // \"afnsj\"\n\t\t\t\tfree (r_core_anal_fcn_autoname (core, core->offset, 1, input[3]));\n\t\t\t} else {\n\t\t\t\tfree (r_core_anal_fcn_autoname (core, core->offset, 1, 0));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'a': // \"afna\"\n\t\t\tif (input[3] == '?') {\n\t\t\t\tr_core_cmd_help (core, help_msg_afna);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar *name = r_core_anal_fcn_autoname (core, core->offset, 0, 0);\n\t\t\tif (name) {\n\t\t\t\tr_cons_printf (\"afn %s 0x%08\" PFMT64x \"\\n\", name, core->offset);\n\t\t\t\tfree (name);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '.': // \"afn.\"\n\t\tcase 0: { // \"afn\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\t\tif (fcn) {\n\t\t\t\tr_cons_printf (\"%s\\n\", fcn->name);\n\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ' ': { // \"afn \"\n\t\t\tut64 off = core->offset;\n\t\t\tchar *p, *name = strdup (r_str_trim_head_ro (input + 3));\n\t\t\tif ((p = strchr (name, ' '))) {\n\t\t\t\t*p++ = 0;\n\t\t\t\toff = r_num_math (core->num, p);\n\t\t\t}\n\t\t\tif (*name == '?') {\n\t\t\t\teprintf (\"Usage: afn newname [off]   # set new name to given function\\n\");\n\t\t\t} else {\n\t\t\t\tif (r_str_startswith (name, \"base64:\")) {\n\t\t\t\t\tchar *res = (char *)r_base64_decode_dyn (name + 7, -1);\n\t\t\t\t\tif (res) {\n\t\t\t\t\t\tfree (name);\n\t\t\t\t\t\tname = res;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!*name || !__setFunctionName (core, off, name, false)) {\n\t\t\t\t\teprintf (\"Cannot find function at 0x%08\" PFMT64x \"\\n\", off);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (name);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_afn);\n\t\t\tbreak;\n\t\t} // end of switch (input[2])\n\t\tbreak;\n\tcase 'S': { // afS\"\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\tif (fcn) {\n\t\t\tfcn->maxstack = r_num_math (core->num, input + 3);\n\t\t\t//fcn->stack = fcn->maxstack;\n\t\t}\n\t\tbreak;\n\t}\n#if 0\n\t/* this is undocumented and probably have no uses. plz discuss */\n\tcase 'e': // \"afe\"\n\t\t{\n\t\tRAnalFunction *fcn;\n\t\tut64 off = core->offset;\n\t\tchar *p, *name = strdup ((input[2]&&input[3])? input + 3: \"\");\n\t\tif ((p = strchr (name, ' '))) {\n\t\t\t*p = 0;\n\t\t\toff = r_num_math (core->num, p + 1);\n\t\t}\n\t\tfcn = r_anal_get_fcn_in (core->anal, off, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);\n\t\tif (fcn) {\n\t\t\tRAnalBlock *b;\n\t\t\tRListIter *iter;\n\t\t\tRAnalRef *r;\n\t\t\tr_list_foreach (fcn->refs, iter, r) {\n\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" -%c 0x%08\" PFMT64x \"\\n\", r->at, r->type, r->addr);\n\t\t\t}\n\t\t\tr_list_foreach (fcn->bbs, iter, b) {\n\t\t\t\tint ok = 0;\n\t\t\t\tif (b->type == R_ANAL_BB_TYPE_LAST) ok = 1;\n\t\t\t\tif (b->type == R_ANAL_BB_TYPE_FOOT) ok = 1;\n\t\t\t\tif (b->jump == UT64_MAX && b->fail == UT64_MAX) ok = 1;\n\t\t\t\tif (ok) {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" -r\\n\", b->addr);\n\t\t\t\t\t// TODO: check if destination is outside the function boundaries\n\t\t\t\t}\n\t\t\t}\n\t\t} else eprintf (\"Cannot find function at 0x%08\" PFMT64x \"\\n\", core->offset);\n\t\tfree (name);\n\t\t}\n\t\tbreak;\n#endif\n\tcase 'x': // \"afx\"\n\t\tswitch (input[2]) {\n\t\tcase 'm': // \"afxm\"\n\t\t\txrefs_map (core, input + 1);\n\t\t\tbreak;\n\t\tcase '\\0': // \"afx\"\n\t\tcase 'j': // \"afxj\"\n\t\tcase ' ': // \"afx \"\n\t\t{\n\t\t\tPJ *pj = r_core_pj_new (core);\n\t\t\tif (input[2] == 'j') {\n\t\t\t\tpj_a (pj);\n\t\t\t}\n\t\t\tif (!pj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// list xrefs from current address\n\t\t\t{\n\t\t\t\tut64 addr = input[2]==' '? r_num_math (core->num, input + 2): core->offset;\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tut64 oaddr = core->offset;\n\t\t\t\t\tRAnalRef *ref;\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tRList *refs = r_anal_function_get_refs (fcn);\n\t\t\t\t\tr_list_foreach (refs, iter, ref) {\n\t\t\t\t\t\tif (input[2] == 'j') {\n\t\t\t\t\t\t\tpj_o (pj);\n\t\t\t\t\t\t\tpj_ks (pj, \"type\", r_anal_ref_type_tostring (ref->type));\n\t\t\t\t\t\t\tpj_kn (pj, \"from\", ref->at);\n\t\t\t\t\t\t\tpj_kn (pj, \"to\", ref->addr);\n\t\t\t\t\t\t\tpj_end (pj);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr_cons_printf (\"%c 0x%08\" PFMT64x \" -> \", ref->type, ref->at);\n\t\t\t\t\t\t\tswitch (ref->type) {\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_NULL:\n\t\t\t\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" \", ref->addr);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_CODE:\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_CALL:\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_DATA:\n\t\t\t\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" \", ref->addr);\n\t\t\t\t\t\t\t\tr_core_seek (core, ref->at, 1);\n\t\t\t\t\t\t\t\tr_core_print_disasm_instructions (core, 0, 1);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_STRING:\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tchar *s = r_core_cmd_strf (core, \"pxr 8 @ 0x%08\"PFMT64x, ref->addr);\n\t\t\t\t\t\t\t\t\tchar *nl = strchr (s, '\\n');\n\t\t\t\t\t\t\t\t\tif (nl) {\n\t\t\t\t\t\t\t\t\t\t*nl = 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t\t\t\t\t\t\t\tfree (s);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr_list_free (refs);\n\t\t\t\t\tr_core_seek (core, oaddr, 1);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"afx: Cannot find function at 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (input[2] == 'j') {\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t}\n\t\t\tpj_free (pj);\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault:\n\t\t\teprintf (\"Wrong command. Look at af?\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'F': // \"afF\"\n\t\t{\n\t\t\tint val = input[2] && r_num_math (core->num, input + 2);\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\tif (fcn) {\n\t\t\t\tfcn->folded = input[2]? val: !fcn->folded;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase '?': // \"af?\"\n\t\tr_core_cmd_help (core, help_msg_af);\n\t\tbreak;\n\tcase 'r': // \"afr\" // analyze function recursively\n\tcase ' ': // \"af \"\n\tcase '\\0': // \"af\"\n\t\t{\n\t\t\tbool anal_calls = false;\n\t\t\tif (input[0] && input[1] == 'r') {\n\t\t\t\tinput++;\n\t\t\t\tanal_calls = true;\n\t\t\t} else {\n\t\t\t\tanal_calls = r_config_get_i (core->config, \"anal.calls\");\n\t\t\t}\n\t\t\tut64 addr = core->offset;\n\t\t\tchar *name = NULL;\n\t\t\t// first undefine\n\t\t\tif (input[0] && input[1] == ' ') {\n\t\t\t\tname = strdup (r_str_trim_head_ro (input + 2));\n\t\t\t\tchar *uaddr = strchr (name, ' ');\n\t\t\t\tif (uaddr) {\n\t\t\t\t\t*uaddr++ = 0;\n\t\t\t\t\taddr = r_num_math (core->num, uaddr);\n\t\t\t\t}\n\t\t\t\t// depth = 1; // or 1?\n\t\t\t\t// disable hasnext\n\t\t\t}\n\t\t\tr_core_af (core, addr, name, anal_calls);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\treturn false;\n\t\tbreak;\n\t}\n\treturn true;\n}\n\n// size: 0: bits; -1: any; >0: exact size\nstatic void __anal_reg_list(RCore *core, int type, int bits, char mode) {\n\tPJ *pj = NULL;\n\tif (mode == 'i') {\n\t\tr_core_debug_ri (core, core->anal->reg, 0);\n\t\treturn;\n\t} else if (mode == 'j') {\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\treturn;\n\t\t}\n\t}\n\tRReg *hack = core->dbg->reg;\n\tconst char *use_color;\n\tint use_colors = r_config_get_i (core->config, \"scr.color\");\n\tif (use_colors) {\n#undef ConsP\n#define ConsP(x) (core->cons && core->cons->context->pal.x)? core->cons->context->pal.x\n\t\tuse_color = ConsP (creg) : Color_BWHITE;\n\t} else {\n\t\tuse_color = NULL;\n\t}\n\tif (bits < 0) {\n\t\t// TODO Change the `size` argument of r_debug_reg_list to use -1 for any and 0 for anal->bits\n\t\tbits = 0;\n\t} else if (!bits) {\n\t\tbits = core->anal->bits;\n\t}\n\tint mode2 = mode;\n\tif (core->anal) {\n\t\tcore->dbg->reg = core->anal->reg;\n\t\tif (core->anal->cur && core->anal->cur->arch) {\n\t\t\t/* workaround for thumb */\n\t\t\tif (!strcmp (core->anal->cur->arch, \"arm\") && bits == 16) {\n\t\t\t\tbits = 32;\n\t\t\t}\n\t\t\tint defsz = r_reg_default_bits (core->anal->reg);\n\t\t\tif (defsz) {\n\t\t\t\tbits = defsz;\n\t\t\t}\n\t\t\t/* workaround for 6502 and avr*/\n\t\t\tif ((!strcmp (core->anal->cur->arch, \"6502\") && bits == 8)\n\t\t\t\t|| (!strcmp (core->anal->cur->arch, \"avr\") && bits == 8)) {\n\t\t\t\tif (mode == 'j') {\n\t\t\t\t\tmode2 = 'J';\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t}\n\t\t\t\tr_debug_reg_list (core->dbg, R_REG_TYPE_GPR, 16, pj, mode2, use_color); // XXX detect which one is current usage\n\t\t\t}\n\t\t}\n\t}\n\n\tif (mode == '=') {\n\t\tint pcbits = 0;\n\t\tconst char *pcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\t\tif (pcname) {\n\t\t\tRRegItem *reg = r_reg_get (core->anal->reg, pcname, 0);\n\t\t\tif (reg && bits != reg->size) {\n\t\t\t\tpcbits = reg->size;\n\t\t\t}\n\t\t\tif (pcbits) {\n\t\t\t\tr_debug_reg_list (core->dbg, R_REG_TYPE_GPR, pcbits, NULL, mode, use_color); // XXX detect which one is current usage\n\t\t\t}\n\t\t}\n\t}\n\tr_debug_reg_list (core->dbg, type, bits, pj, mode2, use_color);\n\tif (mode == 'j') {\n\t\tif (mode2 == 'J') {\n\t\t\tpj_end (pj);\n\t\t}\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\t\n\tcore->dbg->reg = hack;\n}\n\n// XXX dup from drp :OOO\nvoid cmd_anal_reg(RCore *core, const char *str) {\n\tif (0) {\n\t\t/* enable this block when dr and ar use the same code but just using\n\t\t   core->dbg->reg or core->anal->reg and removing all the debugger\n\t\t   dependent code */\n\t\tRReg *reg = core->dbg->reg;\n\t\tcore->dbg->reg = core->anal->reg;\n\t\tcmd_debug_reg (core, str);\n\t\tcore->dbg->reg = reg;\n\t\treturn;\n\t}\n\n\tint size = 0, i, type = R_REG_TYPE_GPR;\n\tint bits = (core->anal->bits & R_SYS_BITS_64)? 64: 32;\n\tint use_colors = r_config_get_i (core->config, \"scr.color\");\n\tRRegItem *r;\n\tconst char *use_color;\n\tconst char *name;\n\tchar *arg;\n\n\tif (use_colors) {\n#define ConsP(x) (core->cons && core->cons->context->pal.x)? core->cons->context->pal.x\n\t\tuse_color = ConsP (creg)\n\t\t: Color_BWHITE;\n\t} else {\n\t\tuse_color = NULL;\n\t}\n\tswitch (str[0]) {\n\tcase 'l': // \"arl\"\n\t{\n\t\tconst bool use_json = str[1] == 'j';\n\t\tRRegSet *rs = r_reg_regset_get (core->anal->reg, R_REG_TYPE_GPR);\n\t\tif (rs) {\n\t\t\tRRegItem *r;\n\t\t\tRListIter *iter;\n\t\t\tPJ *pj = pj_new ();\n\t\t\tpj_a (pj);\n\t\t\tr_list_foreach (rs->regs, iter, r) {\n\t\t\t\tif (use_json) {\n\t\t\t\t\tpj_s (pj, r->name);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_println (r->name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (use_json) {\n\t\t\t\tpj_end (pj);\n\t\t\t\tconst char *s = pj_string (pj);\n\t\t\t\tr_cons_println (s);\n\t\t\t}\n\t\t\tpj_free (pj);\n\t\t}\n\t} break;\n\tcase ',': // \"ar,\"\n\t\t__tableRegList (core, core->anal->reg, str + 1);\n\t\tbreak;\n\tcase '0': // \"ar0\"\n\t\tr_reg_arena_zero (core->anal->reg);\n\t\tbreak;\n\tcase 'A': // \"arA\"\n\t\t{\n\t\t\tint nargs = 4;\n\t\t\tRReg *reg = core->anal->reg;\n\t\t\tfor (i = 0; i < nargs; i++) {\n\t\t\t\tconst char *name = r_reg_get_name (reg, r_reg_get_name_idx (sdb_fmt (\"A%d\", i)));\n\t\t\t\tut64 off = r_reg_getv (core->anal->reg, name);\n\t\t\t\tr_cons_printf (\"0x%08\"PFMT64x\" \", off);\n\t\t\t\t// XXX very ugly hack\n\t\t\t\tchar *s = r_core_cmd_strf (core, \"pxr 32 @ 0x%08\"PFMT64x, off);\n\t\t\t\tif (s) {\n\t\t\t\t\tchar *nl = strchr (s, '\\n');\n\t\t\t\t\tif (nl) {\n\t\t\t\t\t\t*nl = 0;\n\t\t\t\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t\t\t\t}\n\t\t\t\t\tfree (s);\n\t\t\t\t}\n//\t\t\t\tr_core_cmd0 (core, \"ar A0,A1,A2,A3\");\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'C': // \"arC\"\n\t\tif (core->anal->reg->reg_profile_cmt) {\n\t\t\tr_cons_println (core->anal->reg->reg_profile_cmt);\n\t\t}\n\t\tbreak;\n\tcase 'w': // \"arw\"\n\t\tswitch (str[1]) {\n\t\tcase '?': {\n\t\t\tr_core_cmd_help (core, help_msg_arw);\n\t\t\tbreak;\n\t\t}\n\t\tcase ' ':\n\t\t\tr_reg_arena_set_bytes (core->anal->reg, str + 1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_arw);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'a': // \"ara\"\n\t\tswitch (str[1]) {\n\t\tcase '?': // \"ara?\"\n\t\t\tr_core_cmd_help (core, help_msg_ara);\n\t\t\tbreak;\n\t\tcase 's': // \"aras\"\n\t\t\tr_reg_arena_swap (core->anal->reg, false);\n\t\t\tbreak;\n\t\tcase '+': // \"ara+\"\n\t\t\tr_reg_arena_push (core->anal->reg);\n\t\t\tbreak;\n\t\tcase '-': // \"ara-\"\n\t\t\tr_reg_arena_pop (core->anal->reg);\n\t\t\tbreak;\n\t\tdefault: {\n\t\t\tint i, j;\n\t\t\tRRegArena *a;\n\t\t\tRListIter *iter;\n\t\t\tfor (i = 0; i < R_REG_TYPE_LAST; i++) {\n\t\t\t\tRRegSet *rs = &core->anal->reg->regset[i];\n\t\t\t\tj = 0;\n\t\t\t\tr_list_foreach (rs->pool, iter, a) {\n\t\t\t\t\tr_cons_printf (\"%s %p %d %d %s %d\\n\",\n\t\t\t\t\t\t(a == rs->arena)? \"*\": \".\", a,\n\t\t\t\t\t\ti, j, r_reg_get_type (i), a->size);\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\t}\n\t\tbreak;\n\tcase '?': // \"ar?\"\n\t\tif (str[1]) {\n\t\t\tut64 off = r_reg_getv (core->anal->reg, str + 1);\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", off);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_ar);\n\t\t}\n\t\tbreak;\n\tcase 'r': // \"arr\"\n\t\tswitch (str[1]) {\n\t\tcase 'j': // \"arrj\"\n\t\t\tr_core_debug_rr (core, core->anal->reg, 'j');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_debug_rr (core, core->anal->reg, 0);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'S': { // \"arS\"\n\t\tint sz;\n\t\tut8 *buf = r_reg_get_bytes (core->anal->reg, R_REG_TYPE_GPR, &sz);\n\t\tr_cons_printf (\"%d\\n\", sz);\n\t\tfree (buf);\n\t\t} break;\n\tcase 'b': { // \"arb\" WORK IN PROGRESS // DEBUG COMMAND\n\t\tint len, type = R_REG_TYPE_GPR;\n\t\targ = strchr (str, ' ');\n\t\tif (arg) {\n\t\t\tchar *string = r_str_trim_dup (arg + 1);\n\t\t\tif (string) {\n\t\t\t\ttype = r_reg_type_by_name (string);\n\t\t\t\tif (type == -1 && string[0] != 'a') {\n\t\t\t\t\ttype = R_REG_TYPE_GPR;\n\t\t\t\t}\n\t\t\t\tfree (string);\n\t\t\t}\n\t\t}\n\t\tut8 *buf = r_reg_get_bytes (core->dbg->reg, type, &len);\n\t\tif (buf) {\n\t\t\tr_print_hexdump (core->print, 0LL, buf, len, 32, 4, 1);\n\t\t\tfree (buf);\n\t\t}\n\t\t} break;\n\tcase 'c': // \"arc\"\n\t\t// TODO: set flag values with drc zf=1\n\t\tif (str[1] == 'q') { // \"arcq\"\n\t\t\tRRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);\n\t\t\tif (rf) {\n\t\t\t\tr_cons_printf (\"s:%d z:%d c:%d o:%d p:%d\\n\",\n\t\t\t\t\t\trf->s, rf->z, rf->c, rf->o, rf->p);\n\t\t\t\tfree (rf);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (str[1] == 'c') { // \"arcc\"\n\t\t\tchar *s = r_reg_profile_to_cc (core->anal->reg);\n\t\t\tif (s) {\n\t\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t\t\tfree (s);\n\t\t\t}\n\t\t} else {\n\t\t\tRRegItem *r;\n\t\t\tconst char *name = r_str_trim_head_ro (str + 1);\n\t\t\tif (*name && name[1]) {\n\t\t\t\tr = r_reg_cond_get (core->dbg->reg, name);\n\t\t\t\tif (r) {\n\t\t\t\t\tr_cons_println (r->name);\n\t\t\t\t} else {\n\t\t\t\t\tint id = r_reg_cond_from_string (name);\n\t\t\t\t\tRRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);\n\t\t\t\t\tif (rf) {\n\t\t\t\t\t\tint o = r_reg_cond_bits (core->dbg->reg, id, rf);\n\t\t\t\t\t\tcore->num->value = o;\n\t\t\t\t\t\t// ORLY?\n\t\t\t\t\t\tr_cons_printf (\"%d\\n\", o);\n\t\t\t\t\t\tfree (rf);\n\t\t\t\t\t} else {\n\t\t\t\t\t\teprintf (\"unknown conditional or flag register\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tRRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);\n\t\t\t\tif (rf) {\n\t\t\t\t\tr_cons_printf (\"| s:%d z:%d c:%d o:%d p:%d\\n\",\n\t\t\t\t\t\trf->s, rf->z, rf->c, rf->o, rf->p);\n\t\t\t\t\tif (*name == '=') {\n\t\t\t\t\t\tfor (i = 0; i < R_REG_COND_LAST; i++) {\n\t\t\t\t\t\t\tr_cons_printf (\"%s:%d \",\n\t\t\t\t\t\t\t\tr_reg_cond_to_string (i),\n\t\t\t\t\t\t\t\tr_reg_cond_bits (core->dbg->reg, i, rf));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_cons_newline ();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (i = 0; i < R_REG_COND_LAST; i++) {\n\t\t\t\t\t\t\tr_cons_printf (\"%d %s\\n\",\n\t\t\t\t\t\t\t\tr_reg_cond_bits (core->dbg->reg, i, rf),\n\t\t\t\t\t\t\t\tr_reg_cond_to_string (i));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfree (rf);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 's': // \"ars\"\n\t\tswitch (str[1]) {\n\t\tcase '-': // \"ars-\"\n\t\t\tr_reg_arena_pop (core->dbg->reg);\n\t\t\t// restore debug registers if in debugger mode\n\t\t\tr_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, true);\n\t\t\tbreak;\n\t\tcase '+': // \"ars+\"\n\t\t\tr_reg_arena_push (core->dbg->reg);\n\t\t\tbreak;\n\t\tcase '?': { // \"ars?\"\n\t\t\t// TODO #7967 help refactor: dup from drp\n\t\t\tconst char *help_msg[] = {\n\t\t\t\t\"Usage:\", \"drs\", \" # Register states commands\",\n\t\t\t\t\"drs\", \"\", \"List register stack\",\n\t\t\t\t\"drs+\", \"\", \"Push register state\",\n\t\t\t\t\"drs-\", \"\", \"Pop register state\",\n\t\t\t\tNULL };\n\t\t\tr_core_cmd_help (core, help_msg);\n\t\t} break;\n\t\tdefault:\n\t\t\t{\n\t\t\t\tvoid *p = core->dbg->reg->regset[0].pool;\n\t\t\t\tint len = p? r_list_length (p): 0;\n\t\t\t\tr_cons_printf (\"%d\\n\", len);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'p': // \"arp\"\n\t\t// XXX we have to break out .h for these cmd_xxx files.\n\t\tcmd_reg_profile (core, 'a', str);\n\t\tbreak;\n\tcase 't': // \"art\"\n\t\tfor (i = 0; (name = r_reg_get_type (i)); i++) {\n\t\t\tr_cons_println (name);\n\t\t}\n\t\tbreak;\n\tcase 'n': // \"arn\"\n\t\tif (*(str + 1) == '\\0') {\n\t\t\teprintf (\"Oops. try arn [PC|SP|BP|A0|A1|A2|A3|A4|R0|R1|ZF|SF|NF|OF]\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tname = r_reg_get_name (core->dbg->reg, r_reg_get_name_idx (str + 2));\n\t\tif (name && *name) {\n\t\t\tr_cons_println (name);\n\t\t} else {\n\t\t\teprintf (\"Oops. try arn [PC|SP|BP|A0|A1|A2|A3|A4|R0|R1|ZF|SF|NF|OF]\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"ard\"\n\t\tr_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, NULL, 3, use_color); // XXX detect which one is current usage\n\t\tbreak;\n\tcase 'o': // \"aro\"\n\t\tr_reg_arena_swap (core->dbg->reg, false);\n\t\tr_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, NULL, 0, use_color); // XXX detect which one is current usage\n\t\tr_reg_arena_swap (core->dbg->reg, false);\n\t\tbreak;\n\tcase '=': // \"ar=\"\n\t\t{\n\t\t\tchar *p = NULL;\n\t\t\tchar *bits = NULL;\n\t\t\tif (str[1]) {\n\t\t\t\tp = strdup (str + 1);\n\t\t\t\tif (str[1] != ':') {\n\t\t\t\t\t// Bits were specified\n\t\t\t\t\tbits = strtok (p, \":\");\n\t\t\t\t\tif (r_str_isnumber (bits)) {\n\t\t\t\t\t\tst64 sz = r_num_math (core->num, bits);\n\t\t\t\t\t\tif (sz > 0) {\n\t\t\t\t\t\t\tsize = sz;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_core_cmd_help (core, help_msg_ar);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint len = bits ? strlen (bits) : 0;\n\t\t\t\tif (str[len + 1] == ':') {\n\t\t\t\t\t// We have some regs\n\t\t\t\t\tchar *regs = bits ? strtok (NULL, \":\") : strtok ((char *)str + 1, \":\");\n\t\t\t\t\tchar *reg = strtok (regs, \" \");\n\t\t\t\t\tRList *q_regs = r_list_new ();\n\t\t\t\t\tif (q_regs) {\n\t\t\t\t\t\twhile (reg) {\n\t\t\t\t\t\t\tr_list_append (q_regs, reg);\n\t\t\t\t\t\t\treg = strtok (NULL, \" \");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcore->dbg->q_regs = q_regs;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t__anal_reg_list (core, type, size, str[0]);\n\t\t\tif (!r_list_empty (core->dbg->q_regs)) {\n\t\t\t\tr_list_free (core->dbg->q_regs);\n\t\t\t}\n\t\t\tcore->dbg->q_regs = NULL;\n\t\t\tfree (p);\n\t\t}\n\t\tbreak;\n\tcase '.': // \"ar.\"\n\tcase '-': // \"ar-\"\n\tcase '*': // \"ar*\"\n\tcase 'R': // \"arR\"\n\tcase 'j': // \"arj\"\n\tcase 'i': // \"ari\"\n\tcase '\\0': // \"ar\"\n\t\t__anal_reg_list (core, type, size, str[0]);\n\t\tbreak;\n\tcase ' ': { // \"ar \"\n\t\targ = strchr (str + 1, '=');\n\t\tif (arg) {\n\t\t\t*arg = 0;\n\t\t\tchar *ostr = r_str_trim_dup (str + 1);\n\t\t\tchar *regname = r_str_trim_nc (ostr);\n\t\t\tr = r_reg_get (core->dbg->reg, regname, -1);\n\t\t\tif (!r) {\n\t\t\t\tint role = r_reg_get_name_idx (regname);\n\t\t\t\tif (role != -1) {\n\t\t\t\t\tconst char *alias = r_reg_get_name (core->dbg->reg, role);\n\t\t\t\t\tif (alias) {\n\t\t\t\t\t\tr = r_reg_get (core->dbg->reg, alias, -1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (r) {\n\t\t\t\t//eprintf (\"%s 0x%08\"PFMT64x\" -> \", str,\n\t\t\t\t//\tr_reg_get_value (core->dbg->reg, r));\n\t\t\t\tr_reg_set_value (core->dbg->reg, r,\n\t\t\t\t\t\tr_num_math (core->num, arg + 1));\n\t\t\t\tr_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);\n\t\t\t\t//eprintf (\"0x%08\"PFMT64x\"\\n\",\n\t\t\t\t//\tr_reg_get_value (core->dbg->reg, r));\n\t\t\t\tr_core_cmdf (core, \".dr*%d\", bits);\n\t\t\t} else {\n\t\t\t\teprintf (\"ar: Unknown register '%s'\\n\", regname);\n\t\t\t}\n\t\t\tfree (ostr);\n\t\t\treturn;\n\t\t}\n\t\tchar name[32];\n\t\tint i = 1, j;\n\t\twhile (str[i]) {\n\t\t\tif (str[i] == ',') {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tfor (j = i; str[++j] && str[j] != ','; );\n\t\t\t\tif (j - i + 1 <= sizeof name) {\n\t\t\t\t\tr_str_ncpy (name, str + i, j - i + 1);\n\t\t\t\t\tif (IS_DIGIT (name[0])) { // e.g. ar 32\n\t\t\t\t\t\t__anal_reg_list (core, R_REG_TYPE_GPR, atoi (name), '\\0');\n\t\t\t\t\t} else if (showreg (core, name) > 0) { // e.g. ar rax\n\t\t\t\t\t} else { // e.g. ar gpr ; ar all\n\t\t\t\t\t\ttype = r_reg_type_by_name (name);\n\t\t\t\t\t\t// TODO differentiate ALL and illegal register types and print error message for the latter\n\t\t\t\t\t\t__anal_reg_list (core, type, -1, '\\0');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti = j;\n\t\t\t}\n\t\t}\n\t}\n\t}\n}\n\nstatic ut64 initializeEsil(RCore *core) {\n\tint romem = r_config_get_i (core->config, \"esil.romem\");\n\tint stats = r_config_get_i (core->config, \"esil.stats\");\n\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\tint exectrap = r_config_get_i (core->config, \"esil.exectrap\");\n\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\tbool nonull = r_config_get_b (core->config, \"esil.nonull\");\n\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\tRAnalEsil *esil = r_anal_esil_new (stacksize, iotrap, addrsize);\n\tif (esil) {\n\t\tr_anal_esil_free (core->anal->esil);\n\t\tcore->anal->esil = esil;\n\t} else {\n\t\treturn UT64_MAX;\n\t}\n\tut64 addr;\n\tesil->verbose = r_config_get_i (core->config, \"esil.verbose\");\n\tesil->cmd = r_core_esil_cmd;\n\tr_anal_esil_setup (esil, core->anal, romem, stats, nonull); // setup io\n\t{\n\t\tconst char *cmd_esil_step = r_config_get (core->config, \"cmd.esil.step\");\n\t\tif (cmd_esil_step && *cmd_esil_step) {\n\t\t\tesil->cmd_step = strdup (cmd_esil_step);\n\t\t}\n\t\tconst char *cmd_esil_step_out = r_config_get (core->config, \"cmd.esil.stepout\");\n\t\tif (cmd_esil_step_out && *cmd_esil_step_out) {\n\t\t\tesil->cmd_step_out = strdup (cmd_esil_step_out);\n\t\t}\n\t\t{\n\t\t\tconst char *s = r_config_get (core->config, \"cmd.esil.intr\");\n\t\t\tif (s) {\n\t\t\t\tchar *my = strdup (s);\n\t\t\t\tif (my) {\n\t\t\t\t\tr_config_set (core->config, \"cmd.esil.intr\", my);\n\t\t\t\t\tfree (my);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tesil->exectrap = exectrap;\n\tRList *entries = r_bin_get_entries (core->bin);\n\tRBinAddr *entry = NULL;\n\tRBinInfo *info = NULL;\n\tif (entries && !r_list_empty (entries)) {\n\t\tentry = (RBinAddr *)r_list_pop_head (entries);\n\t\tinfo = r_bin_get_info (core->bin);\n\t\taddr = info->has_va? entry->vaddr: entry->paddr;\n\t\tr_list_push (entries, entry);\n\t} else {\n\t\taddr = core->offset;\n\t}\n\t// set memory read only\n\treturn addr;\n}\n\nR_API int r_core_esil_step(RCore *core, ut64 until_addr, const char *until_expr, ut64 *prev_addr, bool stepOver) {\n#define return_tail(x) { tail_return_value = x; goto tail_return; }\n\tint tail_return_value = 0;\n\tint ret;\n\tut8 code[32];\n\tRAnalOp op = {0};\n\tRAnalEsil *esil = core->anal->esil;\n\tconst char *name = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\tut64 addr = r_reg_getv (core->anal->reg, name);\n\tbool breakoninvalid = r_config_get_i (core->config, \"esil.breakoninvalid\");\n\tint esiltimeout = r_config_get_i (core->config, \"esil.timeout\");\n\tut64 startTime;\n\n\tif (esiltimeout > 0) {\n\t\tstartTime = r_time_now_mono ();\n\t}\n\tr_cons_break_push (NULL, NULL);\n\tfor (; ; r_anal_op_fini (&op)) {\n\t\tif (r_cons_is_breaked ()) {\n\t\t\teprintf (\"[+] ESIL emulation interrupted at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\treturn_tail (0);\n\t\t}\n\t\t//Break if we have exceeded esil.timeout\n\t\tif (esiltimeout > 0) {\n\t\t\tut64 elapsedTime = r_time_now_mono () - startTime;\n\t\t\telapsedTime >>= 20;\n\t\t\tif (elapsedTime >= esiltimeout) {\n\t\t\t\teprintf (\"[ESIL] Timeout exceeded.\\n\");\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t}\n\t\tif (!esil) {\n\t\t\taddr = initializeEsil (core);\n\t\t\tesil = core->anal->esil;\n\t\t\tif (!esil) {\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t} else {\n\t\t\tesil->trap = 0;\n\t\t\taddr = r_reg_getv (core->anal->reg, name);\n\t\t\t//eprintf (\"PC=0x%\"PFMT64x\"\\n\", (ut64)addr);\n\t\t}\n\t\tif (prev_addr) {\n\t\t\t*prev_addr = addr;\n\t\t}\n\t\tif (esil->exectrap) {\n\t\t\tif (!r_io_is_valid_offset (core->io, addr, R_PERM_X)) {\n\t\t\t\tesil->trap = R_ANAL_TRAP_EXEC_ERR;\n\t\t\t\tesil->trap_code = addr;\n\t\t\t\teprintf (\"[ESIL] Trap, trying to execute on non-executable memory\\n\");\n\t\t\t\treturn_tail (1);\n\t\t\t}\n\t\t}\n\t\tr_asm_set_pc (core->rasm, addr);\n\t\t// run esil pin command here\n\t\tconst char *pincmd = r_anal_pin_call (core->anal, addr);\n\t\tif (pincmd) {\n\t\t\tr_core_cmd0 (core, pincmd);\n\t\t\tut64 pc = r_debug_reg_get (core->dbg, \"PC\");\n\t\t\tif (addr != pc) {\n\t\t\t\treturn_tail (1);\n\t\t\t}\n\t\t}\n\t\tint dataAlign = r_anal_archinfo (esil->anal, R_ANAL_ARCHINFO_DATA_ALIGN);\n\t\tif (dataAlign > 1) {\n\t\t\tif (addr % dataAlign) {\n\t\t\t\tif (esil->cmd && esil->cmd_trap) {\n\t\t\t\t\tesil->cmd (esil, esil->cmd_trap, addr, R_ANAL_TRAP_UNALIGNED);\n\t\t\t\t}\n\t\t\t\tif (breakoninvalid) {\n\t\t\t\t\tr_cons_printf (\"[ESIL] Stopped execution in an unaligned instruction (see e??esil.breakoninvalid)\\n\");\n\t\t\t\t\treturn_tail (0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t(void) r_io_read_at_mapped (core->io, addr, code, sizeof (code));\n\t\t// TODO: sometimes this is dupe\n\t\tret = r_anal_op (core->anal, &op, addr, code, sizeof (code), R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_HINT);\n\t\t// if type is JMP then we execute the next N instructions\n\t\t// update the esil pointer because RAnal.op() can change it\n\t\tesil = core->anal->esil;\n\t\tif (op.size < 1 || ret < 1) {\n\t\t\tif (esil->cmd && esil->cmd_trap) {\n\t\t\t\tesil->cmd (esil, esil->cmd_trap, addr, R_ANAL_TRAP_INVALID);\n\t\t\t}\n\t\t\tif (breakoninvalid) {\n\t\t\t\teprintf (\"[ESIL] Stopped execution in an invalid instruction (see e??esil.breakoninvalid)\\n\");\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t\top.size = 1; // avoid inverted stepping\n\t\t}\n\t\tif (stepOver) {\n\t\t\tswitch (op.type) {\n\t\t\tcase R_ANAL_OP_TYPE_SWI:\n\t\t\tcase R_ANAL_OP_TYPE_UCALL:\n\t\t\tcase R_ANAL_OP_TYPE_CALL:\n\t\t\tcase R_ANAL_OP_TYPE_JMP:\n\t\t\tcase R_ANAL_OP_TYPE_RCALL:\n\t\t\tcase R_ANAL_OP_TYPE_RJMP:\n\t\t\tcase R_ANAL_OP_TYPE_CJMP:\n\t\t\tcase R_ANAL_OP_TYPE_RET:\n\t\t\tcase R_ANAL_OP_TYPE_CRET:\n\t\t\tcase R_ANAL_OP_TYPE_UJMP:\n\t\t\t\tif (addr == until_addr) {\n\t\t\t\t\treturn_tail (0);\n\t\t\t\t} else {\n\t\t\t\t\tr_reg_setv (core->anal->reg, \"PC\", op.addr + op.size);\n\t\t\t\t\tr_reg_setv (core->dbg->reg, \"PC\", op.addr + op.size);\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tif (r_config_get_i (core->config, \"cfg.r2wars\")) {\n\t\t\t// this is x86 and r2wars specific, shouldnt hurt outside x86\n\t\t\tut64 vECX = r_reg_getv (core->anal->reg, \"ecx\");\n\t\t\tif (op.prefix  & R_ANAL_OP_PREFIX_REP && vECX > 1) {\n\t\t\t\t//char *tmp = strstr (op.esil.ptr, \",ecx,?{,5,GOTO,}\");\n\t\t\t\tchar *tmp = strstr (op.esil.ptr, \",0,GOTO\");\n\t\t\t\tif (tmp) {\n\t\t\t\t\ttmp[0] = 0;\n\t\t\t\t\top.esil.len -= 7; //16;\n\t\t\t\t} else {\n\t\t\t\t\tr_reg_setv (core->anal->reg, name, addr + op.size);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr_reg_setv (core->anal->reg, name, addr + op.size);\n\t\t\t}\n\t\t} else {\n\t\t\tr_reg_setv (core->anal->reg, name, addr + op.size);\n\t\t}\n\t\tif (ret) {\n\t\t\tr_anal_esil_set_pc (esil, addr);\n\t\t\tconst char *e = R_STRBUF_SAFEGET (&op.esil);\n\t\t\tif (core->dbg->trace->enabled) {\n\t\t\t\tRReg *reg = core->dbg->reg;\n\t\t\t\tcore->dbg->reg = core->anal->reg;\n\t\t\t\tr_debug_trace_op (core->dbg, &op);\n\t\t\t\tcore->dbg->reg = reg;\n\t\t\t} else if (R_STR_ISNOTEMPTY (e)) {\n\t\t\t\tr_anal_esil_parse (esil, e);\n\t\t\t\tif (core->anal->cur && core->anal->cur->esil_post_loop) {\n\t\t\t\t\tcore->anal->cur->esil_post_loop (esil, &op);\n\t\t\t\t}\n\t\t\t\tr_anal_esil_stack_free (esil);\n\t\t\t}\n\t\t\tbool isNextFall = false;\n\t\t\tif (op.type == R_ANAL_OP_TYPE_CJMP) {\n\t\t\t\tut64 pc = r_debug_reg_get (core->dbg, \"PC\");\n\t\t\t\tif (pc == addr + op.size) {\n\t\t\t\t\t// do not opdelay here\n\t\t\t\t\tisNextFall = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only support 1 slot for now\n\t\t\tif (op.delay && !isNextFall) {\n\t\t\t\tut8 code2[32];\n\t\t\t\tut64 naddr = addr + op.size;\n\t\t\t\tRAnalOp op2 = {0};\n\t\t\t\t// emulate only 1 instruction\n\t\t\t\tr_anal_esil_set_pc (esil, naddr);\n\t\t\t\t(void)r_io_read_at (core->io, naddr, code2, sizeof (code2));\n\t\t\t\t// TODO: sometimes this is dupe\n\t\t\t\tret = r_anal_op (core->anal, &op2, naddr, code2, sizeof (code2), R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_HINT);\n\t\t\t\tif (ret > 0) {\n\t\t\t\t\tswitch (op2.type) {\n\t\t\t\t\tcase R_ANAL_OP_TYPE_CJMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_JMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_CRET:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_RET:\n\t\t\t\t\t\t// branches are illegal in a delay slot\n\t\t\t\t\t\tesil->trap = R_ANAL_TRAP_EXEC_ERR;\n\t\t\t\t\t\tesil->trap_code = addr;\n\t\t\t\t\t\teprintf (\"[ESIL] Trap, trying to execute a branch in a delay slot\\n\");\n\t\t\t\t\t\treturn_tail (1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst char *e = R_STRBUF_SAFEGET (&op2.esil);\n\t\t\t\t\tif (R_STR_ISNOTEMPTY (e)) {\n\t\t\t\t\t\tr_anal_esil_parse (esil, e);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Invalid instruction at 0x%08\"PFMT64x\"\\n\", naddr);\n\t\t\t\t}\n\t\t\t\tr_anal_op_fini (&op2);\n\t\t\t}\n\t\t\ttail_return_value = 1;\n\t\t}\n\t\t// esil->verbose ?\n\t\t// eprintf (\"REPE 0x%llx %s => 0x%llx\\n\", addr, R_STRBUF_SAFEGET (&op.esil), r_reg_getv (core->anal->reg, \"PC\"));\n\n\t\tut64 pc = r_reg_getv (core->anal->reg, name);\n\t\tif (core->anal->pcalign > 0) {\n\t\t\tpc -= (pc % core->anal->pcalign);\n\t\t\tr_reg_setv (core->anal->reg, name, pc);\n\t\t\tr_reg_setv (core->dbg->reg, name, pc);\n\t\t}\n\n\t\tst64 follow = (st64)r_config_get_i (core->config, \"dbg.follow\");\n\t\tif (follow > 0) {\n\t\t\tut64 pc = r_debug_reg_get (core->dbg, \"PC\");\n\t\t\tif ((pc < core->offset) || (pc > (core->offset + follow))) {\n\t\t\t\tr_core_cmd0 (core, \"sr PC\");\n\t\t\t}\n\t\t}\n\t\t// check breakpoints\n\t\tif (r_bp_get_at (core->dbg->bp, pc)) {\n\t\t\tr_cons_printf (\"[ESIL] hit breakpoint at 0x%\"PFMT64x \"\\n\", pc);\n\t\t\treturn_tail (0);\n\t\t}\n\t\t// check addr\n\t\tif (until_addr != UT64_MAX) {\n\t\t\tif (pc == until_addr) {\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\t// check esil\n\t\tif (esil && esil->trap) {\n\t\t\tif (core->anal->esil->verbose) {\n\t\t\t\teprintf (\"TRAP\\n\");\n\t\t\t}\n\t\t\treturn_tail (0);\n\t\t}\n\t\tif (until_expr) {\n\t\t\tif (r_anal_esil_condition (core->anal->esil, until_expr)) {\n\t\t\t\tif (core->anal->esil->verbose) {\n\t\t\t\t\teprintf (\"ESIL BREAK!\\n\");\n\t\t\t\t}\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tbreak;\n\t}\ntail_return:\n\tr_anal_op_fini (&op);\n\tr_cons_break_pop ();\n\treturn tail_return_value;\n}\n\nR_API int r_core_esil_step_back(RCore *core) {\n\tr_return_val_if_fail (core->anal->esil && core->anal->esil->trace, -1);\n\tRAnalEsil *esil = core->anal->esil;\n\tif (esil->trace->idx > 0) {\n\t\tr_anal_esil_trace_restore (esil, esil->trace->idx - 1);\n\t\treturn 1;\n\t}\n\treturn -1;\n}\n\nstatic void cmd_address_info(RCore *core, const char *addrstr, int fmt) {\n\tut64 addr, type;\n\tif (!addrstr || !*addrstr) {\n\t\taddr = core->offset;\n\t} else {\n\t\taddr = r_num_math (core->num, addrstr);\n\t}\n\ttype = r_core_anal_address (core, addr);\n\tswitch (fmt) {\n\tcase 'j': {\n\t\tPJ *pj = pj_new ();\n\t\tif (!pj) {\n\t\t\treturn;\n\t\t}\n\t\tpj_o (pj);\n\t\tif (type & R_ANAL_ADDR_TYPE_PROGRAM)\n\t\t\tpj_ks (pj, \"program\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_LIBRARY)\n\t\t\tpj_ks (pj, \"library\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_EXEC)\n\t\t\tpj_ks (pj, \"exec\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_READ)\n\t\t\tpj_ks (pj, \"read\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_WRITE)\n\t\t\tpj_ks (pj, \"write\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_FLAG)\n\t\t\tpj_ks (pj, \"flag\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_FUNC)\n\t\t\tpj_ks (pj, \"func\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_STACK)\n\t\t\tpj_ks (pj, \"stack\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_HEAP)\n\t\t\tpj_ks (pj, \"heap\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_REG)\n\t\t\tpj_ks (pj, \"reg\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_ASCII)\n\t\t\tpj_ks (pj, \"ascii\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_SEQUENCE)\n\t\t\tpj_ks (pj, \"sequence\", \"true\");\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tif (type & R_ANAL_ADDR_TYPE_PROGRAM)\n\t\t\tr_cons_printf (\"program\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_LIBRARY)\n\t\t\tr_cons_printf (\"library\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_EXEC)\n\t\t\tr_cons_printf (\"exec\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_READ)\n\t\t\tr_cons_printf (\"read\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_WRITE)\n\t\t\tr_cons_printf (\"write\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_FLAG)\n\t\t\tr_cons_printf (\"flag\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_FUNC)\n\t\t\tr_cons_printf (\"func\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_STACK)\n\t\t\tr_cons_printf (\"stack\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_HEAP)\n\t\t\tr_cons_printf (\"heap\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_REG)\n\t\t\tr_cons_printf (\"reg\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_ASCII)\n\t\t\tr_cons_printf (\"ascii\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_SEQUENCE)\n\t\t\tr_cons_printf (\"sequence\\n\");\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_info(RCore *core, const char *input) {\n\tswitch (input[0]) {\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_ai);\n\t\tbreak;\n\tcase ' ':\n\t\tcmd_address_info (core, input, 0);\n\t\tbreak;\n\tcase 'i': // \"aii\"\n\t\t// global imports\n\t\tif (input[1]) {\n\t\t\tif (input[1] == ' ') {\n\t\t\t\tchar *s = r_str_trim_dup (input + 1);\n\t\t\t\tif (s) {\n\t\t\t\t\tr_anal_add_import (core->anal, s);\n\t\t\t\t\tfree (s);\n\t\t\t\t}\n\t\t\t} else if (input[1] == '-') {\n\t\t\t\tr_anal_purge_imports (core->anal);\n\t\t\t} else {\n\t\t\t\teprintf (\"Usagae: aii [namespace] # see afii - imports\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (core->anal->imports) {\n\t\t\t\tchar *imp;\n\t\t\t\tRListIter *iter;\n\t\t\t\tr_list_foreach (core->anal->imports, iter, imp) {\n\t\t\t\t\tr_cons_printf (\"%s\\n\", imp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"aij\"\n\t\tcmd_address_info (core, input + 1, 'j');\n\t\tbreak;\n\tdefault:\n\t\tcmd_address_info (core, NULL, 0);\n\t\tbreak;\n\t}\n}\n\nstatic void initialize_stack (RCore *core, ut64 addr, ut64 size) {\n\tconst char *mode = r_config_get (core->config, \"esil.fillstack\");\n\tif (mode && *mode && *mode != '0') {\n\t\tconst ut64 bs = 4096 * 32;\n\t\tut64 i;\n\t\tfor (i = 0; i < size; i += bs) {\n\t\t\tut64 left = R_MIN (bs, size - i);\n\t\t//\tr_core_cmdf (core, \"wx 10203040 @ 0x%llx\", addr);\n\t\t\tswitch (*mode) {\n\t\t\tcase 'd': // \"debrujn\"\n\t\t\t\tr_core_cmdf (core, \"wopD %\"PFMT64u\" @ 0x%\"PFMT64x, left, addr + i);\n\t\t\t\tbreak;\n\t\t\tcase 's': // \"seq\"\n\t\t\t\tr_core_cmdf (core, \"woe 1 0xff 1 4 @ 0x%\"PFMT64x\"!0x%\"PFMT64x, addr + i, left);\n\t\t\t\tbreak;\n\t\t\tcase 'r': // \"random\"\n\t\t\t\tr_core_cmdf (core, \"woR %\"PFMT64u\" @ 0x%\"PFMT64x\"!0x%\"PFMT64x, left, addr + i, left);\n\t\t\t\tbreak;\n\t\t\tcase 'z': // \"zero\"\n\t\t\tcase '0':\n\t\t\t\tr_core_cmdf (core, \"wow 00 @ 0x%\"PFMT64x\"!0x%\"PFMT64x, addr + i, left);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// eprintf (\"[*] Initializing ESIL stack with pattern\\n\");\n\t\t// r_core_cmdf (core, \"woe 0 10 4 @ 0x%\"PFMT64x, size, addr);\n\t}\n}\n\nstatic void cmd_esil_mem(RCore *core, const char *input) {\n\tRAnalEsil *esil = core->anal->esil;\n\tRIOMap *stack_map;\n\tut64 curoff = core->offset;\n\tconst char *patt = \"\";\n\tut64 addr = 0x100000;\n\tut32 size = 0xf0000;\n\tchar name[128];\n\tRFlagItem *fi;\n\tconst char *sp, *bp, *pc;\n\tchar uri[32];\n\tchar nomalloc[256];\n\tchar *p;\n\tif (!esil) {\n\t\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\t\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\t\tint romem = r_config_get_i (core->config, \"esil.romem\");\n\t\tint stats = r_config_get_i (core->config, \"esil.stats\");\n\t\tbool nonull = r_config_get_b (core->config, \"esil.nonull\");\n\t\tint verbose = r_config_get_i (core->config, \"esil.verbose\");\n\t\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\t\tif (!(esil = r_anal_esil_new (stacksize, iotrap, addrsize))) {\n\t\t\treturn;\n\t\t}\n\t\tr_anal_esil_setup (esil, core->anal, romem, stats, nonull); // setup io\n\t\tr_anal_esil_free (core->anal->esil);\n\t\tcore->anal->esil = esil;\n\t\tesil->verbose = verbose;\n\t\t{\n\t\t\tconst char *s = r_config_get (core->config, \"cmd.esil.intr\");\n\t\t\tif (s) {\n\t\t\t\tchar *my = strdup (s);\n\t\t\t\tif (my) {\n\t\t\t\t\tr_config_set (core->config, \"cmd.esil.intr\", my);\n\t\t\t\t\tfree (my);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (*input == '?') {\n\t\teprintf (\"Usage: aeim [addr] [size] [name] - initialize ESIL VM stack\\n\");\n\t\teprintf (\"Default: 0x100000 0xf0000\\n\");\n\t\teprintf (\"See ae? for more help\\n\");\n\t\treturn;\n\t}\n\n\tif (input[0] == 'p') {\n\t\tfi = r_flag_get (core->flags, \"aeim.stack\");\n\t\tif (fi) {\n\t\t\taddr = fi->offset;\n\t\t\tsize = fi->size;\n\t\t} else {\n\t\t\tcmd_esil_mem (core, \"\");\n\t\t}\n\t\tif (esil) {\n\t\t\tesil->stack_addr = addr;\n\t\t\tesil->stack_size = size;\n\t\t}\n\t\tinitialize_stack (core, addr, size);\n\t\treturn;\n\t}\n\n\tif (!*input) {\n\t\tchar *fi = sdb_get(core->sdb, \"aeim.fd\", 0);\n\t\tif (fi) {\n\t\t\t// Close the fd associated with the aeim stack\n\t\t\tut64 fd = sdb_atoi (fi);\n\t\t\t(void)r_io_fd_close (core->io, fd);\n\t\t}\n\t}\n\tsize = r_config_get_i (core->config, \"esil.stack.size\");\n\taddr = r_config_get_i (core->config, \"esil.stack.addr\");\n\n\tif (r_io_map_is_mapped (core->io, addr)) {\n\t\taddr = core->offset;\n\t\tr_io_map_locate (core->io, &addr, size, 0x10000000);\n\t}\n\tpatt = r_config_get (core->config, \"esil.stack.pattern\");\n\tp = strncpy (nomalloc, input, 255);\n\tif ((p = strchr (p, ' '))) {\n\t\twhile (*p == ' ') p++;\n\t\taddr = r_num_math (core->num, p);\n\t\tif ((p = strchr (p, ' '))) {\n\t\t\twhile (*p == ' ') p++;\n\t\t\tsize = (ut32)r_num_math (core->num, p);\n\t\t\tif (size < 1) {\n\t\t\t\tsize = 0xf0000;\n\t\t\t}\n\t\t\tif ((p = strchr (p, ' '))) {\n\t\t\t\twhile (*p == ' ') {\n\t\t\t\t\tp++;\n\t\t\t\t}\n\t\t\t\tsnprintf (name, sizeof (name), \"mem.%s\", p);\n\t\t\t} else {\n\t\t\t\tsnprintf (name, sizeof (name), \"mem.0x%\" PFMT64x \"_0x%x\", addr, size);\n\t\t\t}\n\t\t} else {\n\t\t\tsnprintf (name, sizeof (name), \"mem.0x%\" PFMT64x \"_0x%x\", addr, size);\n\t\t}\n\t} else {\n\t\tsnprintf (name, sizeof (name), \"mem.0x%\" PFMT64x \"_0x%x\", addr, size);\n\t}\n\tif (*input == '-') {\n\t\tif (esil->stack_fd > 2) {\t//0, 1, 2 are reserved for stdio/stderr\n\t\t\tr_io_fd_close (core->io, esil->stack_fd);\n\t\t\t// no need to kill the maps, r_io_map_cleanup does that for us in the close\n\t\t\tesil->stack_fd = 0;\n\t\t} else {\n\t\t\teprintf (\"Cannot deinitialize %s\\n\", name);\n\t\t}\n\t\tr_flag_unset_name (core->flags, name);\n\t\tr_flag_unset_name (core->flags, \"aeim.stack\");\n\t\tsdb_unset(core->sdb, \"aeim.fd\", 0);\n\t\t// eprintf (\"Deinitialized %s\\n\", name);\n\t\treturn;\n\t}\n\n\tsnprintf (uri, sizeof (uri), \"malloc://%d\", (int)size);\n\tesil->stack_fd = r_io_fd_open (core->io, uri, R_PERM_RW, 0);\n\tif (!(stack_map = r_io_map_add (core->io, esil->stack_fd, R_PERM_RW, 0LL, addr, size))) {\n\t\tr_io_fd_close (core->io, esil->stack_fd);\n\t\teprintf (\"Cannot create map for tha stack, fd %d got closed again\\n\", esil->stack_fd);\n\t\tesil->stack_fd = 0;\n\t\treturn;\n\t}\n\tr_io_map_set_name (stack_map, name);\n\t// r_flag_set (core->flags, name, addr, size);\t//why is this here?\n\tchar val[128], *v;\n\tv = sdb_itoa (esil->stack_fd, val, 10);\n\tsdb_set(core->sdb, \"aeim.fd\", v, 0);\n\n\tr_config_set_i (core->config, \"io.va\", true);\n\tif (patt && *patt) {\n\t\tswitch (*patt) {\n\t\tcase '0':\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase 'd':\n\t\t\tr_core_cmdf (core, \"wopD %d @ 0x%\"PFMT64x, size, addr);\n\t\t\tbreak;\n\t\tcase 'i':\n\t\t\tr_core_cmdf (core, \"woe 0 255 1 @ 0x%\"PFMT64x\"!%d\",addr, size);\n\t\t\tbreak;\n\t\tcase 'w':\n\t\t\tr_core_cmdf (core, \"woe 0 0xffff 1 4 @ 0x%\"PFMT64x\"!%d\",addr, size);\n\t\t\tbreak;\n\t\t}\n\t}\n\t// SP\n\tsp = r_reg_get_name (core->dbg->reg, R_REG_NAME_SP);\n\tif (sp) {\n\t\tr_debug_reg_set (core->dbg, sp, addr + (size / 2));\n\t}\n\t// BP\n\tbp = r_reg_get_name (core->dbg->reg, R_REG_NAME_BP);\n\tif (bp) {\n\t\tr_debug_reg_set (core->dbg, bp, addr + (size / 2));\n\t}\n\t// PC\n\tpc = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);\n\tif (pc) {\n\t\tr_debug_reg_set (core->dbg, pc, curoff);\n\t}\n\tr_core_cmd0 (core, \".ar*\");\n\tif (esil) {\n\t\tesil->stack_addr = addr;\n\t\tesil->stack_size = size;\n\t}\n\tinitialize_stack (core, addr, size);\n\tr_core_seek (core, curoff, false);\n}\n\n#if 0\nstatic ut64 opc = UT64_MAX;\nstatic ut8 *regstate = NULL;\n\nstatic void esil_init (RCore *core) {\n\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\tint nonull = r_config_get_i (core->config, \"esil.nonull\");\n\topc = r_reg_getv (core->anal->reg, pc);\n\tif (!opc || opc==UT64_MAX) {\n\t\topc = core->offset;\n\t}\n\tif (!core->anal->esil) {\n\t\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\t\tut64 stackSize = r_config_get_i (core->config, \"esil.stack.size\");\n\t\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\t\tif (!(core->anal->esil = r_anal_esil_new (stackSize, iotrap, addrsize))) {\n\t\t\tR_FREE (regstate);\n\t\t\treturn;\n\t\t}\n\t\tr_anal_esil_setup (core->anal->esil, core->anal, 0, 0, nonull);\n\t}\n\tfree (regstate);\n\tregstate = r_reg_arena_peek (core->anal->reg);\n}\n\nstatic void esil_fini(RCore *core) {\n\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\tr_reg_arena_poke (core->anal->reg, regstate);\n\tr_reg_setv (core->anal->reg, pc, opc);\n\tR_FREE (regstate);\n}\n#endif\n\ntypedef struct {\n\tRList *regs;\n\tRList *regread;\n\tRList *regwrite;\n\tRList *regvalues;\n\tRList *inputregs;\n} AeaStats;\n\nstatic void aea_stats_init (AeaStats *stats) {\n\tstats->regs = r_list_newf (free);\n\tstats->regread = r_list_newf (free);\n\tstats->regwrite = r_list_newf (free);\n\tstats->regvalues = r_list_newf (free);\n\tstats->inputregs = r_list_newf (free);\n}\n\nstatic void aea_stats_fini (AeaStats *stats) {\n\tR_FREE (stats->regs);\n\tR_FREE (stats->regread);\n\tR_FREE (stats->regwrite);\n\tR_FREE (stats->inputregs);\n}\n\nstatic bool contains(RList *list, const char *name) {\n\tRListIter *iter;\n\tconst char *n;\n\tr_list_foreach (list, iter, n) {\n\t\tif (!strcmp (name, n))\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nstatic char *oldregread = NULL;\nstatic RList *mymemxsr = NULL;\nstatic RList *mymemxsw = NULL;\n\n#define R_NEW_DUP(x) memcpy((void*)malloc(sizeof(x)), &(x), sizeof(x))\ntypedef struct {\n\tut64 addr;\n\tint size;\n} AeaMemItem;\n\nstatic bool mymemwrite(RAnalEsil *esil, ut64 addr, const ut8 *buf, int len) {\n\tAeaMemItem *n;\n\tRListIter *iter;\n\tr_list_foreach (mymemxsw, iter, n) {\n\t\tif (addr == n->addr) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (!r_io_is_valid_offset (esil->anal->iob.io, addr, 0)) {\n\t\treturn false;\n\t}\n\tn = R_NEW (AeaMemItem);\n\tif (n) {\n\t\tn->addr = addr;\n\t\tn->size = len;\n\t\tr_list_push (mymemxsw, n);\n\t}\n\treturn true;\n}\n\nstatic bool mymemread(RAnalEsil *esil, ut64 addr, ut8 *buf, int len) {\n\tRListIter *iter;\n\tAeaMemItem *n;\n\tr_list_foreach (mymemxsr, iter, n) {\n\t\tif (addr == n->addr) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (!r_io_is_valid_offset (esil->anal->iob.io, addr, 0)) {\n\t\treturn false;\n\t}\n\tn = R_NEW (AeaMemItem);\n\tif (n) {\n\t\tn->addr = addr;\n\t\tn->size = len;\n\t\tr_list_push (mymemxsr, n);\n\t}\n\treturn true;\n}\n\nstatic bool myregwrite(RAnalEsil *esil, const char *name, ut64 *val) {\n\tAeaStats *stats = esil->user;\n\tif (oldregread && !strcmp (name, oldregread)) {\n\t\tr_list_pop (stats->regread);\n\t\tR_FREE (oldregread)\n\t}\n\tif (!IS_DIGIT (*name)) {\n\t\tif (!contains (stats->regs, name)) {\n\t\t\tr_list_push (stats->regs, strdup (name));\n\t\t}\n\t\tif (!contains (stats->regwrite, name)) {\n\t\t\tr_list_push (stats->regwrite, strdup (name));\n\t\t}\n\t\tchar *v = r_str_newf (\"%\"PFMT64d, *val);\n\t\tif (!contains (stats->regvalues, v)) {\n\t\t\tr_list_push (stats->regvalues, strdup (v));\n\t\t}\n\t\tfree (v);\n\t}\n\treturn false;\n}\n\nstatic bool myregread(RAnalEsil *esil, const char *name, ut64 *val, int *len) {\n\tAeaStats *stats = esil->user;\n\tif (!IS_DIGIT (*name)) {\n\t\tif (!contains (stats->inputregs, name)) {\n\t\t\tif (!contains (stats->regwrite, name)) {\n\t\t\t\tr_list_push (stats->inputregs, strdup (name));\n\t\t\t}\n\t\t}\n\t\tif (!contains (stats->regs, name)) {\n\t\t\tr_list_push (stats->regs, strdup (name));\n\t\t}\n\t\tif (!contains (stats->regread, name)) {\n\t\t\tr_list_push (stats->regread, strdup (name));\n\t\t}\n\t}\n\treturn false;\n}\n\nstatic void showregs(RList *list) {\n\tif (!r_list_empty (list)) {\n\t\tchar *reg;\n\t\tRListIter *iter;\n\t\tr_list_foreach (list, iter, reg) {\n\t\t\tr_cons_print (reg);\n\t\t\tif (iter->n) {\n\t\t\t\tr_cons_printf (\" \");\n\t\t\t}\n\t\t}\n\t}\n\tr_cons_newline ();\n}\n\nstatic void showmem(RList *list) {\n\tif (!r_list_empty (list)) {\n\t\tAeaMemItem *item;\n\t\tRListIter *iter;\n\t\tr_list_foreach (list, iter, item) {\n\t\t\tr_cons_printf (\" 0x%08\"PFMT64x, item->addr);\n\n\t\t}\n\t}\n\tr_cons_newline ();\n}\n\nstatic void showregs_json(RList *list, PJ *pj) {\n\tpj_a (pj);\n\tif (!r_list_empty (list)) {\n\t\tchar *reg;\n\t\tRListIter *iter;\n\n\t\tr_list_foreach (list, iter, reg) {\n\t\t\tpj_s (pj, reg);\n\t\t}\n\t}\n\tpj_end (pj);\n}\n\nstatic void showmem_json(RList *list, PJ *pj) {\n\tpj_a (pj);\n\tif (!r_list_empty (list)) {\n\t\tRListIter *iter;\n\t\tAeaMemItem *item;\n\t\tr_list_foreach (list, iter, item) {\n\t\t\tpj_n (pj, item->addr);\n\t\t}\n\t}\n\n\tpj_end (pj);\n}\n\nstatic bool cmd_aea(RCore* core, int mode, ut64 addr, int length) {\n\tRAnalEsil *esil;\n\tint ptr, ops, ops_end = 0, len, buf_sz;\n\tut64 addr_end;\n\tAeaStats stats;\n\tconst char *esilstr;\n\tRAnalOp aop = R_EMPTY;\n\tut8 *buf;\n\tRList* regnow;\n\tPJ *pj = NULL;\n\tif (!core) {\n\t\treturn false;\n\t}\n\tint maxopsize = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_MAX_OP_SIZE);\n\tif (maxopsize < 1) {\n\t\tmaxopsize = 16;\n\t}\n\tif (mode & 1) {\n\t\t// number of bytes / length\n\t\tbuf_sz = length;\n\t} else {\n\t\t// number of instructions / opcodes\n\t\tops_end = length;\n\t\tif (ops_end < 1) {\n\t\t\tops_end = 1;\n\t\t}\n\t\tbuf_sz = ops_end * maxopsize;\n\t}\n\tif (buf_sz < 1) {\n\t\tbuf_sz = maxopsize;\n\t}\n\taddr_end = addr + buf_sz;\n\tbuf = malloc (buf_sz);\n\tif (!buf) {\n\t\treturn false;\n\t}\n\t(void)r_io_read_at (core->io, addr, (ut8 *)buf, buf_sz);\n\taea_stats_init (&stats);\n\n\t//esil_init (core);\n\t//esil = core->anal->esil;\n\tr_reg_arena_push (core->anal->reg);\n\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\tbool iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\tint romem = r_config_get_i (core->config, \"esil.romem\");\n\tint stats1 = r_config_get_i (core->config, \"esil.stats\");\n\tbool nonull = r_config_get_b (core->config, \"esil.nonull\");\n\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\tconst bool cfg_r2wars = r_config_get_i (core->config, \"cfg.r2wars\");\n\tesil = r_anal_esil_new (stacksize, iotrap, addrsize);\n\tr_anal_esil_setup (esil, core->anal, romem, stats1, nonull); // setup io\n#\tdefine hasNext(x) (x&1) ? (addr<addr_end) : (ops<ops_end)\n\n\tmymemxsr = r_list_new ();\n\tmymemxsw = r_list_new ();\n\tesil->user = &stats;\n\tesil->cb.hook_reg_write = myregwrite;\n\tesil->cb.hook_reg_read = myregread;\n\tesil->cb.hook_mem_write = mymemwrite;\n\tesil->cb.hook_mem_read = mymemread;\n\tesil->nowrite = true;\n\tr_cons_break_push (NULL, NULL);\n\tfor (ops = ptr = 0; ptr < buf_sz && hasNext (mode); ops++, ptr += len) {\n\t\tif (r_cons_is_breaked ()) {\n\t\t\tbreak;\n\t\t}\n\t\tlen = r_anal_op (core->anal, &aop, addr + ptr, buf + ptr, buf_sz - ptr, R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_HINT);\n\t\tesilstr = R_STRBUF_SAFEGET (&aop.esil);\n\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\tif (len < 1) {\n\t\t\t\teprintf (\"Invalid 0x%08\"PFMT64x\" instruction %02x %02x\\n\",\n\t\t\t\t\taddr + ptr, buf[ptr], buf[ptr + 1]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (cfg_r2wars) {\n\t\t\t\tif (aop.prefix  & R_ANAL_OP_PREFIX_REP) {\n\t\t\t\t\t//char * tmp = strstr (esilstr, \",ecx,?{,5,GOTO,}\");\n\t\t\t\t\tchar *tmp = strstr (esilstr, \",0,GOTO\");\n\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\ttmp[0] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_anal_esil_parse (esil, esilstr);\n\t\t\tr_anal_esil_stack_free (esil);\n\t\t}\n\t\tr_anal_op_fini (&aop);\n\t\tif (len < 1) {\n\t\t\tlen = 1;\n\t\t}\n\t}\n\tr_cons_break_pop ();\n\tesil->nowrite = false;\n\tesil->cb.hook_reg_write = NULL;\n\tesil->cb.hook_reg_read = NULL;\n\t//esil_fini (core);\n\tr_anal_esil_free (esil);\n\tr_reg_arena_pop (core->anal->reg);\n\tregnow = r_list_newf (free);\n\t{\n\t\tRListIter *iter;\n\t\tchar *reg;\n\t\tr_list_foreach (stats.regs, iter, reg) {\n\t\t\tif (!contains (stats.regwrite, reg)) {\n\t\t\t\tr_list_push (regnow, strdup (reg));\n\t\t\t}\n\t\t}\n\t}\n\tif ((mode >> 5) & 1) {\n\t\tRListIter *iter;\n\t\tAeaMemItem *n;\n\t\tint c = 0;\n\t\tr_cons_printf (\"f-mem.*\\n\");\n\t\tr_list_foreach (mymemxsr, iter, n) {\n\t\t\tr_cons_printf (\"f mem.read.%d 0x%08x @ 0x%08\"PFMT64x\"\\n\", c++, n->size, n->addr);\n\t\t}\n\t\tc = 0;\n\t\tr_list_foreach (mymemxsw, iter, n) {\n\t\t\tr_cons_printf (\"f mem.write.%d 0x%08x @ 0x%08\"PFMT64x\"\\n\", c++, n->size, n->addr);\n\t\t}\n\t}\n\n\t/* show registers used */\n\tif ((mode >> 1) & 1) {\n\t\tshowregs (stats.regread);\n\t} else if ((mode >> 2) & 1) {\n\t\tshowregs (stats.regwrite);\n\t} else if ((mode >> 3) & 1) {\n\t\tshowregs (regnow);\n\t} else if ((mode >> 4) & 1) {\n\t\tpj = pj_new ();\n\t\tif (!pj) {\n\t\t\treturn false;\n\t\t}\n\t\tpj_o (pj);\n\t\tpj_k (pj, \"A\");\n\t\tshowregs_json (stats.regs, pj);\n\t\tpj_k (pj, \"I\");\n\t\tshowregs_json (stats.inputregs, pj);\n\t\tpj_k (pj, \"R\");\n\t\tshowregs_json (stats.regread, pj);\n\t\tpj_k (pj, \"W\");\n\t\tshowregs_json (stats.regwrite, pj);\n\t\tif (!r_list_empty (stats.regvalues)) {\n\t\t\tpj_k (pj, \"V\");\n\t\t\tshowregs_json (stats.regvalues, pj);\n\t\t}\n\t\tif (!r_list_empty (regnow)){\n\t\t\tpj_k (pj, \"N\");\n\t\t\tshowregs_json (regnow, pj);\n\t\t}\n\t\tif (!r_list_empty (mymemxsr)){\n\t\t\tpj_k (pj, \"@R\");\n\t\t\tshowmem_json (mymemxsr, pj);\n\t\t}\n\t\tif (!r_list_empty (mymemxsw)){\n\t\t\tpj_k (pj, \"@W\");\n\t\t\tshowmem_json (mymemxsw, pj);\n\t\t}\n\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t} else if ((mode >> 5) & 1) {\n\t\t// nothing\n\t} else {\n\t\tif (!r_list_empty (stats.inputregs)) {\n\t\t\tr_cons_printf (\" I: \");\n\t\t\tshowregs (stats.inputregs);\n\t\t}\n\t\tif (!r_list_empty (stats.regs)) {\n\t\t\tr_cons_printf (\" A: \");\n\t\t\tshowregs (stats.regs);\n\t\t}\n\t\tif (!r_list_empty (stats.regread)) {\n\t\t\tr_cons_printf (\" R: \");\n\t\t\tshowregs (stats.regread);\n\t\t}\n\t\tif (!r_list_empty (stats.regwrite)) {\n\t\t\tr_cons_printf (\" W: \");\n\t\t\tshowregs (stats.regwrite);\n\t\t}\n\t\tif (!r_list_empty (stats.regvalues)) {\n\t\t\tr_cons_printf (\" V: \");\n\t\t\tshowregs (stats.regvalues);\n\t\t}\n\t\tif (!r_list_empty (regnow)){\n\t\t\tr_cons_printf (\" N: \");\n\t\t\tshowregs (regnow);\n\t\t}\n\t\tif (!r_list_empty (mymemxsr)){\n\t\t\tr_cons_printf (\"@R:\");\n\t\t\tshowmem (mymemxsr);\n\t\t}\n\t\tif (!r_list_empty (mymemxsw)){\n\t\t\tr_cons_printf (\"@W:\");\n\t\t\tshowmem (mymemxsw);\n\t\t}\n\t}\n\n\tr_list_free (mymemxsr);\n\tr_list_free (mymemxsw);\n\tmymemxsr = NULL;\n\tmymemxsw = NULL;\n\taea_stats_fini (&stats);\n\tfree (buf);\n\tR_FREE (regnow);\n\treturn true;\n}\n\nstatic void cmd_aespc(RCore *core, ut64 addr, ut64 until_addr, int off) {\n\tRAnalEsil *esil = core->anal->esil;\n\tint i, j = 0;\n\tut8 *buf;\n\tRAnalOp aop = {0};\n\tint ret , bsize = R_MAX (4096, core->blocksize);\n\tconst int mininstrsz = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_MIN_OP_SIZE);\n\tconst int minopcode = R_MAX (1, mininstrsz);\n\tconst char *pc = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);\n\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\tut64 addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\n\t// eprintf (\"   aesB %llx %llx %d\\n\", addr, until_addr, off); // 0x%08llx %d  %s\\n\", aop.addr, ret, aop.mnemonic);\n\tif (!esil) {\n\t\teprintf (\"Warning: cmd_espc: creating new esil instance\\n\");\n\t\tif (!(esil = r_anal_esil_new (stacksize, iotrap, addrsize))) {\n\t\t\treturn;\n\t\t}\n\t\tcore->anal->esil = esil;\n\t}\n\tbuf = malloc (bsize);\n\tif (!buf) {\n\t\teprintf (\"Cannot allocate %d byte(s)\\n\", bsize);\n\t\tfree (buf);\n\t\treturn;\n\t}\n\tif (addr == -1) {\n\t\taddr = r_reg_getv (core->dbg->reg, pc);\n\t}\n\t(void)r_anal_esil_setup (core->anal->esil, core->anal, 0, 0, 0); // int romem, int stats, int nonull) {\n\tut64 cursp = r_reg_getv (core->dbg->reg, \"SP\");\n\tut64 oldoff = core->offset;\n\tconst ut64 flags = R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT | R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_DISASM;\n\tfor (i = 0, j = 0; j < off ; i++, j++) {\n\t\tif (r_cons_is_breaked ()) {\n\t\t\tbreak;\n\t\t}\n\t\tif (i >= (bsize - 32)) {\n\t\t\ti = 0;\n\t\t\teprintf (\"Warning: Chomp\\n\");\n\t\t}\n\t\tif (!i) {\n\t\t\tr_io_read_at (core->io, addr, buf, bsize);\n\t\t}\n\t\tif (addr == until_addr) {\n\t\t\tbreak;\n\t\t}\n\t\tret = r_anal_op (core->anal, &aop, addr, buf + i, bsize - i, flags);\n\t\tif (ret < 1) {\n\t\t\teprintf (\"Failed analysis at 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\tbreak;\n\t\t}\n\t\t// skip calls and such\n\t\tif (aop.type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t// nothing\n\t\t} else {\n\t\t\tr_reg_setv (core->anal->reg, \"PC\", aop.addr + aop.size);\n\t\t\tr_reg_setv (core->dbg->reg, \"PC\", aop.addr + aop.size);\n\t\t\tconst char *e = R_STRBUF_SAFEGET (&aop.esil);\n\t\t\tif (e && *e) {\n\t\t\t\t // eprintf (\"   0x%08llx %d  %s\\n\", aop.addr, ret, aop.mnemonic);\n\t\t\t\t(void)r_anal_esil_parse (esil, e);\n\t\t\t}\n\t\t}\n\t\tint inc = (core->search->align > 0)? core->search->align - 1: ret - 1;\n\t\tif (inc < 0) {\n\t\t\tinc = minopcode;\n\t\t}\n\t\ti += inc;\n\t\taddr += ret; // aop.size;\n\t\tr_anal_op_fini (&aop);\n\t}\n\tr_core_seek (core, oldoff, true);\n\tr_reg_setv (core->dbg->reg, \"SP\", cursp);\n}\n\nstatic void r_anal_aefa(RCore *core, const char *arg) {\n\tut64 to = r_num_math (core->num, arg);\n\tut64 at, from = core->offset;\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, to, -1);\n\tif (!from || from == UT64_MAX) {\n\t\tif (fcn) {\n\t\t\tfrom = fcn->addr;\n\t\t} else {\n\t\t\teprintf (\"Usage: aefa [from] # if no from address is given, uses fcn.addr\\n\");\n\t\t\treturn;\n\t\t}\n\t}\n\teprintf (\"Emulate from 0x%08\"PFMT64x\" to 0x%08\"PFMT64x\"\\n\", from, to);\n\teprintf (\"Resolve call args for 0x%08\"PFMT64x\"\\n\", to);\n\n\t// emulate\n\t// XXX do not use commands, here, just use the api\n\tr_core_cmd0 (core, \"aeim\"); // XXX\n\tut64 off = core->offset;\n\tfor (at = from; at < to ; at++) {\n\t\tr_core_cmdf (core, \"aepc 0x%08\"PFMT64x, at);\n\t\tr_core_cmd0 (core, \"aeso\");\n\t\tr_core_seek (core, at, true);\n\t\tint delta = r_num_get (core->num, \"$l\");\n\t\tif (delta < 1) {\n\t\t\tbreak;\n\t\t}\n\t\tat += delta - 1;\n\t}\n\tr_core_seek (core, off, true);\n\n\t// the logic of identifying args by function types and\n\t// show json format and arg name goes into arA\n\tr_core_cmd0 (core, \"arA\");\n#if 0\n\t// get results\n\tconst char *fcn_type = r_type_func_ret (core->anal->sdb_types, fcn->name);\n\tconst char *key = resolve_fcn_name (core->anal, fcn->name);\n\tRList *list = r_core_get_func_args (core, key);\n\tif (!r_list_empty (list)) {\n\t\teprintf (\"HAS signature\\n\");\n\t}\n\tint i, nargs = 3; // r_type_func_args_count (core->anal->sdb_types, fcn->name);\n\tif (nargs > 0) {\n\t\tint i;\n\t\teprintf (\"NARGS %d (%s)\\n\", nargs, key);\n\t\tfor (i = 0; i < nargs; i++) {\n\t\t\tut64 v = r_debug_arg_get (core->dbg, \"reg\", i);\n\t\t\teprintf (\"arg: 0x%08\"PFMT64x\"\\n\", v);\n\t\t}\n\t}\n#endif\n}\n\nstatic void __core_anal_appcall(RCore *core, const char *input) {\n//\tr_reg_arena_push (core->dbg->reg);\n\tRListIter *iter;\n\tchar *arg;\n\tchar *inp = strdup (input);\n\tRList *args = r_str_split_list (inp, \" \", 0);\n\tint i = 0;\n\tr_list_foreach (args, iter, arg) {\n\t\tconst char *alias = sdb_fmt (\"A%d\", i);\n\t\tr_reg_setv (core->anal->reg, alias, r_num_math (core->num, arg));\n\t\ti++;\n\t}\n\tut64 sp = r_reg_getv (core->anal->reg, \"SP\");\n\tr_reg_setv (core->anal->reg, \"SP\", 0);\n\n\tr_reg_setv (core->anal->reg, \"PC\", core->offset);\n\tr_core_cmd0 (core, \"aesu 0\");\n\n\tr_reg_setv (core->anal->reg, \"SP\", sp);\n\tfree (inp);\n\n//\tr_reg_arena_pop (core->dbg->reg);\n}\n\nstatic void cmd_debug_stack_init(RCore *core, int argc, char **argv, char **envp) {\n\t// TODO: add support for 32 bit\n\tRBuffer *b = r_buf_new ();\n\tut64 sp = core->offset;\n\tint i;\n\tut64 dyld_call_from = UT64_MAX;\n\tr_buf_append_ut64 (b, dyld_call_from);\n\tr_buf_append_ut64 (b, 0); // rbp\n\tr_buf_append_ut64 (b, argc); // rbp\n\tint envp_count = 0;\n\tfor (i = 0; envp[i]; i++) {\n\t\tenvp_count++;\n\t}\n\tut64 strp = sp + 40 + (argc * 8) + (envp_count * 8);\n\t// pointer table\n\tfor (i = 0; i < argc && argv[i]; i++) {\n\t\tr_buf_append_ut64 (b, strp);\n\t\tstrp += strlen (argv[i]) + 1;\n\t}\n\tr_buf_append_ut64 (b, 0);\n\tfor (i = 0; i < envp_count; i++) {\n\t\tr_buf_append_ut64 (b, strp);\n\t\tstrp += strlen (envp[i]) + 1;\n\t}\n\tr_buf_append_ut64 (b, 0);\n\t// string table\n\tfor (i = 0; i < argc && argv[i]; i++) {\n\t\tr_buf_append_string (b, argv[i]);\n\t\tr_buf_append_ut8 (b, 0);\n\t}\n\tfor (i = 0; i < envp_count; i++) {\n\t\tr_buf_append_string (b, envp[i]);\n\t\tr_buf_append_ut8 (b, 0);\n\t}\n\tint slen;\n\tut8 *s = r_buf_read_all (b, &slen);\n\tchar *x = r_hex_bin2strdup (s, slen);\n\tr_cons_printf (\"wx %s\\n\", x);\n\tfree (x);\n\tfree (s);\n\tr_buf_free (b);\n}\n\nR_IPI int core_type_by_addr(RCore *core, ut64 addr) {\n\tconst RList *list = r_flag_get_list (core->flags, addr);\n\tRListIter *iter;\n\tRFlagItem *item;\n\tbool has_flag = false;\n\tint type = R_ANAL_REF_TYPE_DATA;\n\tr_list_foreach (list, iter, item) {\n\t\tif (item && strchr (item->name, '.')) {\n\t\t\tif (r_str_startswith (item->name, \"str\")) {\n\t\t\t\ttype = R_ANAL_REF_TYPE_STRING;\n\t\t\t}\n\t\t\t////  r_anal_xrefs_set (core->anal, *val, esil->address, type);\n\t\t\thas_flag = true;\n\t\t}\n\t}\n\tif (!has_flag) {\n\t\treturn -1;\n\t}\n\treturn type;\n}\n\nstatic bool regwrite_hook(RAnalEsil *esil, const char *name, ut64 *val) {\n\tRCore *core = esil->user;\n\tint type = core_type_by_addr (core, *val);\n\tif (type != -1) {\n\t\tr_anal_xrefs_set (core->anal, esil->address, *val, type);\n\t}\n\treturn false;\n}\n\nstatic void __anal_esil_function(RCore *core, ut64 addr) {\n\tRListIter *iter;\n\tRAnalBlock *bb;\n\tif (!core->anal->esil) {\n\t\tr_core_cmd0 (core, \"aei\");\n\t\tr_core_cmd0 (core, \"aeim\");\n\t}\n\tvoid *u = core->anal->esil->user;\n\tcore->anal->esil->user = core;\n\tvoid *p = core->anal->esil->cb.hook_reg_write;\n\tcore->anal->esil->cb.hook_reg_write = regwrite_hook;\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal,\n\t\t\taddr, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);\n\tif (fcn) {\n\t\tbool anal_verbose = r_config_get_b (core->config, \"anal.verbose\");\n\t\t// emulate every instruction in the function recursively across all the basic blocks\n\t\tr_list_foreach (fcn->bbs, iter, bb) {\n\t\t\tut64 pc = bb->addr;\n\t\t\tut64 end = bb->addr + bb->size;\n\t\t\tRAnalOp op;\n\t\t\tint ret, bbs = end - pc;\n\t\t\tif (bbs < 1 || bbs > 0xfffff || pc >= end) {\n\t\t\t\teprintf (\"Invalid block size\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// eprintf (\"[*] Emulating 0x%08\"PFMT64x\" basic block 0x%08\" PFMT64x \" - 0x%08\" PFMT64x \"\\r[\", fcn->addr, pc, end);\n\t\t\tut8 *buf = calloc (1, bbs + 1);\n\t\t\tif (!buf) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// const char *pcname = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);\n\t\t\tr_io_read_at (core->io, pc, buf, bbs);\n\t\t\tint left;\n\t\t\twhile (pc < end) {\n\t\t\t\tleft = R_MIN (end - pc, 32);\n\t\t\t\t// r_asm_set_pc (core->rasm, pc);\n\t\t\t\tret = r_anal_op (core->anal, &op, pc, buf + pc - bb->addr, left, R_ANAL_OP_MASK_HINT | R_ANAL_OP_MASK_ESIL| R_ANAL_OP_MASK_DISASM); // read overflow\n\t\t\t\tif (ret) {\n\t\t\t\t\tbool opskip = false;\n#if 0\n\t\t\t\t\tswitch (op.type) {\n\t\t\t\t\tcase R_ANAL_OP_TYPE_JMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_NOP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_CJMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_UJMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_CALL:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_RET:\n\t\t\t\t\t\topskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n#endif\n\t\t\t\t\tif (!opskip) {\n\t\t\t\t\t\tconst char *esilstr = R_STRBUF_SAFEGET (&op.esil);\n\t\t\t\t\t\t// eprintf (\"0x%08\"PFMT64x\"  %s\\n\", pc, op.mnemonic);\n\t\t\t\t\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\t\t\t\t\tr_anal_esil_set_pc (core->anal->esil, pc);\n\t\t\t\t\t\t\tr_anal_esil_parse (core->anal->esil, esilstr);\n\t\t\t\t\t\t\tif (anal_verbose) {\n\t\t\t\t\t\t\t\tr_anal_esil_dumpstack (core->anal->esil);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tr_anal_esil_stack_free (core->anal->esil);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpc += op.size;\n\t\t\t\t} else {\n\t\t\t\t\tpc += 4; // XXX\n\t\t\t\t}\n\t\t\t\tr_anal_op_fini (&op);\n\t\t\t}\n\t\t\tfree (buf);\n\t\t}\n\t} else {\n\t\teprintf (\"Cannot find function at 0x%08\" PFMT64x \"\\n\", addr);\n\t}\n\tcore->anal->esil->cb.hook_reg_write = p;\n\tcore->anal->esil->user = u;\n#if 0\n\tr_anal_esil_free (core->anal->esil);\n\tcore->anal->esil = NULL;\n#endif\n}\n\nstatic void print_esil_dfg_as_commands(RCore *core, RAnalEsilDFG *dfg) {\n\tRListIter *iter, *ator;\n\tRGraphNode *node, *edon;\n\tRStrBuf *sb = r_strbuf_new (\"\");\n\tif (!sb) {\n\t\treturn;\n\t}\n\tr_cons_println (\"ag-\");\n\tr_list_foreach (r_graph_get_nodes (dfg->flow), iter, node) {\n\t\tconst RAnalEsilDFGNode *enode = (RAnalEsilDFGNode *)node->data;\n\t\tchar *esc_str = r_str_escape (r_strbuf_get (enode->content));\n\t\tif (!esc_str) {\n\t\t\tr_strbuf_free (sb);\n\t\t\treturn;\n\t\t}\n\t\tr_strbuf_set (sb, esc_str);\n\t\tif (enode->type == R_ANAL_ESIL_DFG_BLOCK_GENERATIVE) {\n\t\t\tr_strbuf_prepend (sb, \"generative:\");\n\t\t}\n\t\tchar *b64_buf = r_base64_encode_dyn (r_strbuf_get (sb), sb->len);\n\t\tif (!b64_buf) {\n\t\t\tr_strbuf_free (sb);\n\t\t\tfree (esc_str);\n\t\t\treturn;\n\t\t}\n\n\t\tr_cons_printf (\"agn %d base64:%s\\n\", enode->idx, b64_buf);\n\t\tfree (b64_buf);\n\t\tfree (esc_str);\n\t}\n\tr_strbuf_free (sb);\n\n\tr_list_foreach (r_graph_get_nodes (dfg->flow), iter, node) {\n\t\tconst RAnalEsilDFGNode *enode = (RAnalEsilDFGNode *)node->data;\n\t\tr_list_foreach (r_graph_get_neighbours (dfg->flow, node), ator, edon) {\n\t\t\tconst RAnalEsilDFGNode *edone = (RAnalEsilDFGNode *)edon->data;\n\t\t\tr_cons_printf (\"age %d %d\\n\", enode->idx, edone->idx);\n\t\t}\n\t}\n}\n\nstatic void cmd_aeg(RCore *core, int argc, char *argv[]) {\n\tif (argc == 0) {\n\t\tr_core_cmd0 (core, \".aeg*;agg\");\n\t\treturn;\n\t}\n\tif ((argc == 1) && !argv[0][0]) {\t// \"aeg\"\n\t\tRAnalEsilDFG *dfg = r_anal_esil_dfg_expr (core->anal, NULL, argv[0]);\n\t\tr_return_if_fail (dfg);\n\t\tprint_esil_dfg_as_commands (core, dfg);\n\t\tr_anal_esil_dfg_free (dfg);\n\t\treturn;\n\t}\n\tswitch (argv[0][0]) {\n\tcase '*':\t// \"aeg*\"\n\t{\n\t\tRAnalOp *aop = r_core_anal_op (core, core->offset, R_ANAL_OP_MASK_ESIL);\n\t\tif (!aop) {\n\t\t\treturn;\n\t\t}\n\t\tconst char *esilstr = r_strbuf_get (&aop->esil);\n\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\tRAnalEsilDFG *dfg = r_anal_esil_dfg_expr (core->anal, NULL, esilstr);\n\t\t\tif (!dfg) {\n\t\t\t\tr_anal_op_free (aop);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprint_esil_dfg_as_commands (core, dfg);\n\t\t\tr_anal_esil_dfg_free (dfg);\n\t\t}\n\t}\n\tbreak;\n\tcase 'i':\t// \"aegi\"\n\tcase 'v':\t// \"aegv\"\n\t{\n\t\tRConfigHold *hc = r_config_hold_new (core->config);\n\t\tif (!hc) {\n\t\t\treturn;\n\t\t}\n\t\tr_config_hold (hc, \"cmd.gprompt\",  NULL);\n\t\tr_config_set (core->config, \"cmd.gprompt\", \"pi 1\");\n\t\tr_core_cmd0 (core, \".aeg*;aggv\");\n\t\tr_config_hold_free (hc);\n\t}\n\tbreak;\n\tcase 'f':\t// \"aegf\"\n\t{\n\t\tRStrBuf *filtered = r_anal_esil_dfg_filter_expr (core->anal, argv[1], argv[2]);\n\t\tif (filtered) {\n\t\t\tr_cons_printf (\"%s\\n\", r_strbuf_get (filtered));\n\t\t\tr_strbuf_free (filtered);\n\t\t}\n\t}\n\tbreak;\n\tcase 'c':\t// \"aegc\"\n\t{\n\t\tRAnalEsilDFG *dfg = r_anal_esil_dfg_expr (core->anal, NULL, argv[1]);\n\t\tif (!dfg) {\n\t\t\treturn;\n\t\t}\n\t\tr_anal_esil_dfg_fold_const (core->anal, dfg);\n\t\tif (argv[0][1] == 'f') {\t// \"aegcf\"\n\t\t\tRStrBuf *filtered = r_anal_esil_dfg_filter (dfg, argv[2]);\n\t\t\tif (filtered) {\n\t\t\t\tr_cons_printf (\"%s\\n\", r_strbuf_get (filtered));\n\t\t\t\tr_strbuf_free (filtered);\n\t\t\t}\n\t\t} else {\n\t\t\tprint_esil_dfg_as_commands (core, dfg);\n\t\t}\n\t\tr_anal_esil_dfg_free (dfg);\n\t}\n\tbreak;\n\tcase '?':\t// \"aeg?\"\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_aeg);\n\t}\n}\n\nstatic void cmd_anal_esil(RCore *core, const char *input) {\n\tRAnalEsil *esil = core->anal->esil;\n\tut64 addr = core->offset;\n\tut64 adr ;\n\tchar *n, *n1;\n\tint off;\n\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\tint romem = r_config_get_i (core->config, \"esil.romem\");\n\tint stats = r_config_get_i (core->config, \"esil.stats\");\n\tbool nonull = r_config_get_b (core->config, \"esil.nonull\");\n\tut64 until_addr = UT64_MAX;\n\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\n\tconst char *until_expr = NULL;\n\tRAnalOp *op = NULL;\n\n\tswitch (input[0]) {\n\tcase 'v': // \"aev\"\n\t\tr_core_visual_esil (core, r_str_trim_head_ro (input + 1));\n\t\tbreak;\n\tcase 'p': // \"aep\"\n\t\tswitch (input[1]) {\n\t\tcase 'c': // \"aepc\"\n\t\t\tif (input[2] == ' ' || input[2] == '=') {\n\t\t\t\t// seek to this address\n\t\t\t\tr_core_cmdf (core, \"ar PC=%s\", r_str_trim_head_ro (input + 3));\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t} else {\n\t\t\t\teprintf (\"Missing argument\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '*':\n\t\tcase 0:\n\t\t\tr_anal_pin_list (core->anal);\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tif (input[2] == '*') {\n\t\t\t\tr_anal_pin_init (core->anal);\n\t\t\t} else {\n\t\t\t\tif (input[2]) {\n\t\t\t\t\taddr = r_num_math (core->num, input + 2);\n\t\t\t\t}\n\t\t\t\tr_anal_pin_unset (core->anal, addr);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ' ':\n\t\t\tr_anal_pin (core->anal, addr, input + 2);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_aep);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'r': // \"aer\"\n\t\t// 'aer' is an alias for 'ar'\n\t\tcmd_anal_reg (core, input + 1);\n\t\tbreak;\n\tcase '*':\n\t\t// XXX: this is wip, not working atm\n\t\tif (core->anal->esil) {\n\t\t\tr_cons_printf (\"trap: %d\\n\", core->anal->esil->trap);\n\t\t\tr_cons_printf (\"trap-code: %d\\n\", core->anal->esil->trap_code);\n\t\t} else {\n\t\t\teprintf (\"esil vm not initialized. run `aei`\\n\");\n\t\t}\n\t\tbreak;\n\tcase ' ':\n\t\t//r_anal_esil_eval (core->anal, input+1);\n\t\tif (!esil && !(core->anal->esil = esil = r_anal_esil_new (stacksize, iotrap, addrsize))) {\n\t\t\treturn;\n\t\t}\n\t\tr_anal_esil_setup (esil, core->anal, romem, stats, nonull); // setup io\n\t\tr_anal_esil_set_pc (esil, core->offset);\n\t\tr_anal_esil_parse (esil, input + 1);\n\t\tr_anal_esil_dumpstack (esil);\n\t\tr_anal_esil_stack_free (esil);\n\t\tbreak;\n\tcase 's': // \"aes\"\n\t\t// \"aes\" \"aeso\" \"aesu\" \"aesue\"\n\t\t// aes -> single step\n\t\t// aesb -> single step back\n\t\t// aeso -> single step over\n\t\t// aesu -> until address\n\t\t// aesue -> until esil expression\n\t\tswitch (input[1]) {\n\t\tcase '?':\n\t\t\tr_core_cmd0 (core, \"ae?~aes\");\n\t\t\tbreak;\n\t\tcase 'l': // \"aesl\"\n\t\t{\n\t\t\tut64 pc = r_debug_reg_get (core->dbg, \"PC\");\n\t\t\tRAnalOp *op = r_core_anal_op (core, pc, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT);\n\t\t\t// TODO: honor hint\n\t\t\tif (!op) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_core_esil_step (core, UT64_MAX, NULL, NULL, false);\n\t\t\tr_debug_reg_set (core->dbg, \"PC\", pc + op->size);\n\t\t\tr_anal_esil_set_pc (esil, pc + op->size);\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tr_anal_op_free (op);\n\t\t} break;\n\t\tcase 'b': // \"aesb\"\n\t\t\tif (!r_core_esil_step_back (core)) {\n\t\t\t\teprintf (\"cannnot step back\\n\");\n\t\t\t}\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tbreak;\n\t\tcase 'B': // \"aesB\"\n\t\t\t{\n\t\t\tn = strchr (input + 2, ' ');\n\t\t\tchar *n2 = NULL;\n\t\t\tif (n) {\n\t\t\t\tn = (char *)r_str_trim_head_ro (n + 1);\n\t\t\t}\n\t\t\tif (n) {\n\t\t\t\tn2 = strchr (n, ' ');\n\t\t\t\tif (n2) {\n\t\t\t\t\t*n2++ = 0;\n\t\t\t\t}\n\t\t\t\tut64 off = r_num_math (core->num, n);\n\t\t\t\tut64 nth = n2? r_num_math (core->num, n2): 1;\n\t\t\t\tcmd_aespc (core, core->offset, off, (int)nth);\n\t\t\t} else {\n\t\t\t\teprintf (\"Usage: aesB [until-addr] [nth-opcodes] @ [from-addr]\\n\");\n\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'u': // \"aesu\"\n\t\t\tuntil_expr = NULL;\n\t\t\tuntil_addr = UT64_MAX;\n\t\t\tif (r_str_endswith (input, \"?\")) {\n\t\t\t\tr_core_cmd0 (core, \"ae?~aesu\");\n\t\t\t} else switch (input[2]) {\n\t\t\tcase 'e': // \"aesue\"\n\t\t\t\tuntil_expr = input + 3;\n\t\t\t\tbreak;\n\t\t\tcase ' ': // \"aesu\"\n\t\t\t\tuntil_addr = r_num_math (core->num, input + 2);\n\t\t\t\tbreak;\n\t\t\tcase 'o': // \"aesuo\"\n\t\t\t\tstep_until_optype (core, r_str_trim_head_ro (input + 3));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tr_core_cmd0 (core, \"ae?~aesu\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (until_expr || until_addr != UT64_MAX) {\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\t}\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tbreak;\n\t\tcase 's': // \"aess\"\n\t\t\tif (input[2] == 'u') { // \"aessu\"\n\t\t\t\tif (input[3] == 'e') {\n\t\t\t\t\tuntil_expr = input + 3;\n\t\t\t\t} else {\n\t\t\t\t\tuntil_addr = r_num_math (core->num, input + 2);\n\t\t\t\t}\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, true);\n\t\t\t} else {\n\t\t\t\tr_core_esil_step (core, UT64_MAX, NULL, NULL, true);\n\t\t\t}\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tbreak;\n\t\tcase 'o': // \"aeso\"\n\t\t\tif (input[2] == 'u') { // \"aesou\"\n\t\t\t\tif (input[3] == 'e') {\n\t\t\t\t\tuntil_expr = input + 3;\n\t\t\t\t} else {\n\t\t\t\t\tuntil_addr = r_num_math (core->num, input + 2);\n\t\t\t\t}\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, true);\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t} else if (!input[2] || input[2] == ' ') { // \"aeso [addr]\"\n\t\t\t\t// step over\n\t\t\t\top = r_core_anal_op (core, r_reg_getv (core->anal->reg,\n\t\t\t\t\tr_reg_get_name (core->anal->reg, R_REG_NAME_PC)), R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT);\n\t\t\t\tif (op && op->type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t\t\tuntil_addr = op->addr + op->size;\n\t\t\t\t}\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t} else {\n\t\t\t\teprintf (\"Usage: aesou [addr] # step over until given address\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'p': //\"aesp\"\n\t\t\tn = strchr (input, ' ');\n\t\t\tn1 = n ? strchr (n + 1, ' ') : NULL;\n\t\t\tif ((!n || !n1) || (!(n + 1) || !(n1 + 1))) {\n\t\t\t\teprintf (\"aesp [offset] [num]\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tadr = r_num_math (core->num, n + 1);\n\t\t\toff = r_num_math (core->num, n1 + 1);\n\t\t\tcmd_aespc (core, adr, -1, off);\n\t\t\tbreak;\n\t\tcase ' ':\n\t\t\tn = strchr (input, ' ');\n\t\t\tif (!(n + 1)) {\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\toff = r_num_math (core->num, n + 1);\n\t\t\tcmd_aespc (core, -1, -1, off);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'C': // \"aeC\"\n\t\tif (input[1] == '?') { // \"aec?\"\n\t\t\tr_core_cmd_help (core, help_msg_aeC);\n\t\t} else {\n\t\t\t__core_anal_appcall (core, r_str_trim_head_ro (input + 1));\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"aec\"\n\t\tif (input[1] == '?') { // \"aec?\"\n\t\t\tr_core_cmd_help (core, help_msg_aec);\n\t\t} else if (input[1] == 's') { // \"aecs\"\n\t\t\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\t\t\tfor (;;) {\n\t\t\t\tif (!r_core_esil_step (core, UT64_MAX, NULL, NULL, false)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t\taddr = r_num_get (core->num, pc);\n\t\t\t\top = r_core_anal_op (core, addr, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT);\n\t\t\t\tif (!op) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (op->type == R_ANAL_OP_TYPE_SWI) {\n\t\t\t\t\teprintf (\"syscall at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (op->type == R_ANAL_OP_TYPE_TRAP) {\n\t\t\t\t\teprintf (\"trap at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\top = NULL;\n\t\t\t\tif (core->anal->esil->trap || core->anal->esil->trap_code) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (op) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\top = NULL;\n\t\t\t}\n\t\t} else if (input[1] == 'c') { // \"aecc\"\n\t\t\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\t\t\tfor (;;) {\n\t\t\t\tif (!r_core_esil_step (core, UT64_MAX, NULL, NULL, false)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t\taddr = r_num_get (core->num, pc);\n\t\t\t\top = r_core_anal_op (core, addr, R_ANAL_OP_MASK_BASIC);\n\t\t\t\tif (!op) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (op->type == R_ANAL_OP_TYPE_CALL || op->type == R_ANAL_OP_TYPE_UCALL) {\n\t\t\t\t\teprintf (\"call at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\top = NULL;\n\t\t\t\tif (core->anal->esil->trap || core->anal->esil->trap_code) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (op) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t}\n\t\t} else {\n\t\t\t// \"aec\"  -> continue until ^C\n\t\t\t// \"aecu\" -> until address\n\t\t\t// \"aecue\" -> until esil expression\n\t\t\tif (input[1] == 'u' && input[2] == 'e') {\n\t\t\t\tuntil_expr = input + 3;\n\t\t\t} else if (input[1] == 'u') {\n\t\t\t\tuntil_addr = r_num_math (core->num, input + 2);\n\t\t\t} else {\n\t\t\t\tuntil_expr = \"0\";\n\t\t\t}\n\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t}\n\t\tbreak;\n\tcase 'i': // \"aei\"\n\t\tswitch (input[1]) {\n\t\tcase 's': // \"aeis\"\n\t\t\t{\n\t\t\t\tchar *arg = r_str_trim_dup (input + 2);\n\t\t\t\tRList *args = r_str_split_list (arg, \" \", 0);\n\t\t\t\tint i, argc = atoi (r_list_pop_head (args));\n\t\t\t\tif (argc < 1) {\n\t\t\t\t\tr_core_cmd_help (core, help_msg_aei);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tchar **argv = calloc (argc + 1, sizeof (void *));\n\t\t\t\tfor (i = 0; i < argc; i++) {\n\t\t\t\t\tchar *arg = r_list_pop_head (args);\n\t\t\t\t\tif (!arg) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\targv[i] = arg;\n\t\t\t\t}\n\t\t\t\targv[i] = 0;\n\t\t\t\tchar **envp = calloc (r_list_length (args) + 1, sizeof (void *));\n\t\t\t\tfor (i = 0; ; i++) {\n\t\t\t\t\tchar *arg = r_list_pop_head (args);\n\t\t\t\t\tif (!arg) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tenvp[i] = arg;\n\t\t\t\t}\n\t\t\t\tenvp[i] = 0;\n#if __UNIX__\n\t\t\t\tif (strstr (input, \"$env\")) {\n\t\t\t\t\textern char **environ;\n\t\t\t\t\tcmd_debug_stack_init (core, argc, argv, environ);\n\t\t\t\t} else {\n\t\t\t\t\tcmd_debug_stack_init (core, argc, argv, envp);\n\t\t\t\t}\n#else\n\t\t\t\tcmd_debug_stack_init (core, argc, argv, envp);\n#endif\n\t\t\t\tfree (arg);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'm': // \"aeim\"\n\t\t\tcmd_esil_mem (core, input + 2);\n\t\t\tbreak;\n\t\tcase 'p': // \"aeip\" // initialize pc = $$\n\t\t\tr_core_cmd0 (core, \"ar PC=$$\");\n\t\t\tbreak;\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_aei);\n\t\t\tcmd_esil_mem (core, \"?\");\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tif (esil) {\n\t\t\t\tsdb_reset (esil->stats);\n\t\t\t}\n\t\t\tr_anal_esil_free (esil);\n\t\t\tcore->anal->esil = NULL;\n\t\t\tbreak;\n\t\tcase 0: //lolololol\n\t\t\tr_anal_esil_free (esil);\n\t\t\t// reinitialize\n\t\t\t{\n\t\t\t\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\t\t\t\tif (pc && r_reg_getv (core->anal->reg, pc) == 0LL) {\n\t\t\t\t\tr_core_cmd0 (core, \"ar PC=$$\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!(esil = core->anal->esil = r_anal_esil_new (stacksize, iotrap, addrsize))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tr_anal_esil_setup (esil, core->anal, romem, stats, nonull); // setup io\n\t\t\tesil->verbose = (int)r_config_get_i (core->config, \"esil.verbose\");\n\t\t\t/* restore user settings for interrupt handling */\n\t\t\t{\n\t\t\t\tconst char *s = r_config_get (core->config, \"cmd.esil.intr\");\n\t\t\t\tif (s) {\n\t\t\t\t\tchar *my = strdup (s);\n\t\t\t\t\tif (my) {\n\t\t\t\t\t\tr_config_set (core->config, \"cmd.esil.intr\", my);\n\t\t\t\t\t\tfree (my);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcmd_esil_mem (core, \"?\");\n\t\t\tbreak;\n\n\t\t}\n\t\tbreak;\n\tcase 'k': // \"aek\"\n\t\tswitch (input[1]) {\n\t\tcase '\\0':\n\t\t\tinput = \"123*\";\n\t\t\t/* fall through */\n\t\tcase ' ':\n\t\t\tif (esil && esil->stats) {\n\t\t\t\tchar *out = sdb_querys (esil->stats, NULL, 0, input + 2);\n\t\t\t\tif (out) {\n\t\t\t\t\tr_cons_println (out);\n\t\t\t\t\tfree (out);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"esil.stats is empty. Run 'aei'\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tif (esil) {\n\t\t\t\tsdb_reset (esil->stats);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'L': // aeL commands\n\t\t{\n\t\t\tRAnalEsilPlugin *p;\n\t\t\tRListIter *iter;\n\t\t\tr_list_foreach (core->anal->esil_plugins, iter, p) {\n\t\t\t\tr_cons_printf (\"%s\\n\", p->name);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'g': // \"aeg\"\n\t\t{\n\t\t\tint argc;\n\t\t\tchar **argv = r_str_argv (&input[1], &argc);\n\t\t\tr_return_if_fail (argv);\n\t\t\tcmd_aeg (core, argc, argv);\n\t\t\tint i;\n\t\t\tfor (i = 0; i < argc; i++) {\n\t\t\t\tfree (argv[i]);\n\t\t\t}\n\t\t\tfree (argv);\n\t\t}\n\t\tbreak;\n\tcase 'b': // \"aeb\"\n\t\t// ab~ninstr[1]\n\t\tr_core_cmdf (core, \"aesp `ab~addr[1]` `ab~ninstr[1]`\");\n\t\tbreak;\n\tcase 'f': // \"aef\"\n\t\tif (input[1] == 'a') { // \"aefa\"\n\t\t\tr_anal_aefa (core, r_str_trim_head_ro (input + 2));\n\t\t} else { // This should be aefb -> because its emulating all the bbs\n\t\t\t// anal ESIL to REIL.\n\t\t\t__anal_esil_function (core, core->offset);\n\t\t} break;\n\tcase 't': // \"aet\"\n\t\tswitch (input[1]) {\n\t\tcase 's': // \"aets\"\n\t\t\tswitch (input[2]) {\n\t\t\tcase '+': // \"aets+\"\n\t\t\t\tif (!esil) {\n\t\t\t\t\teprintf (\"Error: ESIL is not initialized. Use `aeim` first.\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (esil->trace) {\n\t\t\t\t\teprintf (\"ESIL trace already started\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tesil->trace = r_anal_esil_trace_new (esil);\n\t\t\t\tif (!esil->trace) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_config_set_i (core->config, \"dbg.trace\", true);\n\t\t\t\tbreak;\n\t\t\tcase '-': // \"aets-\"\n\t\t\t\tif (!esil) {\n\t\t\t\t\teprintf (\"Error: ESIL is not initialized. Use `aeim` first.\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!esil->trace) {\n\t\t\t\t\teprintf (\"No ESIL trace started\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_anal_esil_trace_free (esil->trace);\n\t\t\t\tesil->trace = NULL;\n\t\t\t\tr_config_set_i (core->config, \"dbg.trace\", false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tr_core_cmd_help (core, help_msg_aets);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\teprintf (\"Unknown command. Use `aetr`.\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'A': // \"aeA\"\n\t\tswitch (input[1]){\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_aea);\n\t\t\tbreak;\n\t\tcase 'r':\n\t\t\tcmd_aea (core, 1 + (1<<1), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'w':\n\t\t\tcmd_aea (core, 1 + (1<<2), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tcmd_aea (core, 1 + (1<<3), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'j':\n\t\t\tcmd_aea (core, 1 + (1<<4), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tcmd_aea (core, 1 + (1<<5), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'f': {\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\t\tif (fcn) {\n\t\t\t\tcmd_aea (core, 1, r_anal_function_min_addr (fcn), r_anal_function_linear_size (fcn));\n\t\t\t}\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault:\n\t\t\tcmd_aea (core, 1, core->offset, (int)r_num_math (core->num, input[1]?input+2:input+1));\n\t\t}\n\t\tbreak;\n\tcase 'a': {// \"aea\"\n\t\tRReg *reg = core->anal->reg;\n\t\tut64 pc = r_reg_getv (reg, \"PC\");\n\t\tRAnalOp *op = r_core_anal_op (core, pc, 0);\n\t\tif (!op) {\n\t\t\tbreak;\n\t\t}\n\t\tut64 newPC = core->offset + op->size;\n\t\tr_reg_setv (reg, \"PC\", newPC);\n\t\tswitch (input[1]) {\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_aea);\n\t\t\tbreak;\n\t\tcase 'r':\n\t\t\tcmd_aea (core, 1<<1, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'w':\n\t\t\tcmd_aea (core, 1<<2, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tcmd_aea (core, 1<<3, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'j':\n\t\t\tcmd_aea (core, 1<<4, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tcmd_aea (core, 1<<5, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'B': { // \"aeaB\"\n\t\t\tbool json = input[2] == 'j';\n\t\t\tint a = json? 3: 2;\n\t\t\tut64 addr = (input[a] == ' ')? r_num_math (core->num, input + a): core->offset;\n\t\t\tRList *l = r_anal_get_blocks_in (core->anal, addr);\n\t\t\tRAnalBlock *b;\n\t\t\tRListIter *iter;\n\t\t\tr_list_foreach (l, iter, b) {\n\t\t\t\tint mode = json? (1<<4): 1;\n\t\t\t\tcmd_aea (core, mode, b->addr, b->size);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 'f': { // \"aeaf\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\t\tif (fcn) {\n\t\t\t\tswitch (input[2]) {\n\t\t\t\tcase 'j': // \"aeafj\"\n\t\t\t\t\tcmd_aea (core, 1<<4, r_anal_function_min_addr (fcn), r_anal_function_linear_size (fcn));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcmd_aea (core, 1, r_anal_function_min_addr (fcn), r_anal_function_linear_size (fcn));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcase 'b': { // \"aeab\"\n\t\t\tRAnalBlock *bb = r_anal_bb_from_offset (core->anal, core->offset);\n\t\t\tif (bb) {\n\t\t\t\tswitch (input[2]) {\n\t\t\t\tcase 'j': // \"aeabj\"\n\t\t\t\t\tcmd_aea (core, 1<<4, bb->addr, bb->size);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcmd_aea (core, 1, bb->addr, bb->size);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\tdefault: {\n\t\t\tconst char *arg = input[1]? input + 2: \"\";\n\t\t\tut64 len = r_num_math (core->num, arg);\n\t\t\tcmd_aea (core, 0, core->offset, len);\n\t\t\t}\n\t\t}\n\t\tr_reg_setv (reg, \"PC\", pc);\n\t\tbreak;\n\t}\n\tcase 'x': { // \"aex\"\n\t\tchar *hex;\n\t\tint ret, bufsz;\n\n\t\tinput = r_str_trim_head_ro (input + 1);\n\t\thex = strdup (input);\n\t\tif (!hex) {\n\t\t\tbreak;\n\t\t}\n\n\t\tRAnalOp aop = R_EMPTY;\n\t\tbufsz = r_hex_str2bin (hex, (ut8*)hex);\n\t\tret = r_anal_op (core->anal, &aop, core->offset,\n\t\t\t(const ut8*)hex, bufsz, R_ANAL_OP_MASK_ESIL);\n\t\tif (ret>0) {\n\t\t\tconst char *str = R_STRBUF_SAFEGET (&aop.esil);\n\t\t\tchar *str2 = r_str_newf (\" %s\", str);\n\t\t\tcmd_anal_esil (core, str2);\n\t\t\tfree (str2);\n\t\t}\n\t\tr_anal_op_fini (&aop);\n\t\tbreak;\n\t}\n\tcase '?': // \"ae?\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_detail_ae);\n\t\t\tbreak;\n\t\t}\n\t\t/* fallthrough */\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ae);\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_bytes(RCore *core, const char *input) {\n\tint len = core->blocksize;\n\tint tbs = len;\n\tif (input[0]) {\n\t\tlen = (int)r_num_get (core->num, input + 1);\n\t\tif (len > tbs) {\n\t\t\tr_core_block_size (core, len);\n\t\t}\n\t}\n\tcore_anal_bytes (core, core->block, len, 0, input[0]);\n\tif (tbs != core->blocksize) {\n\t\tr_core_block_size (core, tbs);\n\t}\n}\n\nstatic void cmd_anal_opcode(RCore *core, const char *input) {\n\tint l, len = core->blocksize;\n\tut32 tbs = core->blocksize;\n\tr_core_block_read (core);\n\tswitch (input[0]) {\n\tcase 's': // \"aos\"\n\tcase 'j': // \"aoj\"\n\tcase 'e': // \"aoe\"\n\tcase 'r': {\n\t\tint count = 1;\n\t\tint obs = core->blocksize;\n\t\tint fmt = input[0];\n\t\tif (input[0] == 'e' && input[1] == 'q') { // \"aoeq\"\n\t\t\tfmt = 'E'; // quiet esil\n\t\t\tinput++;\n\t\t}\n\t\tif (input[1] && input[2]) {\n\t\t\tl = (int)r_num_get (core->num, input + 1);\n\t\t\tif (l > 0) {\n\t\t\t\tcount = l;\n\t\t\t}\n\t\t\tl *= 8;\n\t\t\tif (l > obs) {\n\t\t\t\tr_core_block_size (core, l);\n\t\t\t}\n\t\t} else {\n\t\t\tcount = 1;\n\t\t}\n\t\tcore_anal_bytes (core, core->block, core->blocksize, count, fmt);\n\t\tif (obs != core->blocksize) {\n\t\t\tr_core_block_size (core, obs);\n\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'm': // \"aom\"\n\t\tif (input[1] == '?') {\n\t\t\tr_cons_printf (\"Usage: aom[ljd] [arg] .. list mnemonics for asm.arch\\n\");\n\t\t\tr_cons_printf (\". = current, l = list, d = describe, j=json)\\n\");\n\t\t} else if (input[1] == 'd') {\n\t\t\tconst int id = (input[2]==' ')\n\t\t\t\t?(int)r_num_math (core->num, input + 2): -1;\n\t\t\tchar *ops = r_asm_mnemonics (core->rasm, id, false);\n\t\t\tif (ops) {\n\t\t\t\tchar *ptr = ops;\n\t\t\t\tchar *nl = strchr (ptr, '\\n');\n\t\t\t\twhile (nl) {\n\t\t\t\t\t*nl = 0;\n\t\t\t\t\tchar *desc = r_asm_describe (core->rasm, ptr);\n\t\t\t\t\tif (desc) {\n\t\t\t\t\t\tconst char *pad = r_str_pad (' ', 16 - strlen (ptr));\n\t\t\t\t\t\tr_cons_printf (\"%s%s%s\\n\", ptr, pad, desc);\n\t\t\t\t\t\tfree (desc);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_cons_printf (\"%s\\n\", ptr);\n\t\t\t\t\t}\n\t\t\t\t\tptr = nl + 1;\n\t\t\t\t\tnl = strchr (ptr, '\\n');\n\t\t\t\t}\n\t\t\t\tfree (ops);\n\t\t\t}\n\t\t} else if (input[1] == 'l' || input[1] == '=' || input[1] == ' ' || input[1] == 'j') {\n\t\t\tif (input[1] == ' ' && !IS_DIGIT (input[2])) {\n\t\t\t\tr_cons_printf (\"%d\\n\", r_asm_mnemonics_byname (core->rasm, input + 2));\n\t\t\t} else {\n\t\t\t\tconst int id = (input[1] == ' ')\n\t\t\t\t\t?(int)r_num_math (core->num, input + 2): -1;\n\t\t\t\tchar *ops = r_asm_mnemonics (core->rasm, id, input[1] == 'j');\n\t\t\t\tif (ops) {\n\t\t\t\t\tr_cons_println (ops);\n\t\t\t\t\tfree (ops);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tr_core_cmd0 (core, \"ao~mnemonic[1]\");\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"aoc\"\n\t{\n\t\tRList *hooks;\n\t\tRListIter *iter;\n\t\tRAnalCycleHook *hook;\n\t\tchar *instr_tmp = NULL;\n\t\tint ccl = input[1]? r_num_math (core->num, &input[2]): 0; //get cycles to look for\n\t\tint cr = r_config_get_i (core->config, \"asm.cmt.right\");\n\t\tint fun = r_config_get_i (core->config, \"asm.functions\");\n\t\tint li = r_config_get_i (core->config, \"asm.lines\");\n\t\tint xr = r_config_get_i (core->config, \"asm.xrefs\");\n\n\t\tr_config_set_i (core->config, \"asm.cmt.right\", true);\n\t\tr_config_set_i (core->config, \"asm.functions\", false);\n\t\tr_config_set_i (core->config, \"asm.lines\", false);\n\t\tr_config_set_i (core->config, \"asm.xrefs\", false);\n\n\t\thooks = r_core_anal_cycles (core, ccl); //analyse\n\t\tr_cons_clear_line (1);\n\t\tr_list_foreach (hooks, iter, hook) {\n\t\t\tinstr_tmp = r_core_disassemble_instr (core, hook->addr, 1);\n\t\t\tr_cons_printf (\"After %4i cycles:\\t%s\", (ccl - hook->cycles), instr_tmp);\n\t\t\tr_cons_flush ();\n\t\t\tfree (instr_tmp);\n\t\t}\n\t\tr_list_free (hooks);\n\n\t\tr_config_set_i (core->config, \"asm.cmt.right\", cr); //reset settings\n\t\tr_config_set_i (core->config, \"asm.functions\", fun);\n\t\tr_config_set_i (core->config, \"asm.lines\", li);\n\t\tr_config_set_i (core->config, \"asm.xrefs\", xr);\n\t}\n\tbreak;\n\tcase 'd': // \"aod\"\n\t\tif (input[1] == 'a') { // \"aoda\"\n\t\t\t// list sdb database\n\t\t\tsdb_foreach (core->rasm->pair, listOpDescriptions, core);\n\t\t} else if (input[1] == 0) {\n\t\t\tint cur = R_MAX (core->print->cur, 0);\n\t\t\t// XXX: we need cmd_xxx.h (cmd_anal.h)\n\t\t\tcore_anal_bytes (core, core->block + cur, core->blocksize, 1, 'd');\n\t\t} else if (input[1] == ' ') {\n\t\t\tchar *d = r_asm_describe (core->rasm, input + 2);\n\t\t\tif (d && *d) {\n\t\t\t\tr_cons_println (d);\n\t\t\t\tfree (d);\n\t\t\t} else {\n\t\t\t\teprintf (\"Unknown mnemonic\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\teprintf (\"Use: aod[?a] ([opcode])    describe current, [given] or all mnemonics\\n\");\n\t\t}\n\t\tbreak;\n\tcase '*':\n\t\tr_core_anal_hint_list (core->anal, input[0]);\n\t\tbreak;\n\tcase 0:\n\tcase ' ': {\n\t\t\tint count = 0;\n\t\t\tif (input[0]) {\n\t\t\t\tl = (int)r_num_get (core->num, input + 1);\n\t\t\t\tif (l > 0) {\n\t\t\t\t\tcount = l;\n\t\t\t\t}\n\t\t\t\tif (l > tbs) {\n\t\t\t\t\tr_core_block_size (core, l * 4);\n\t\t\t\t\t//len = l;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlen = l = core->blocksize;\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\tcore_anal_bytes (core, core->block, len, count, 0);\n\t\t}\n\t\tbreak;\n\tcase 'f': // \"aof\"\n\t\tif (strlen (input + 1) > 1) {\n\t\t\tRAnalOp aop = R_EMPTY;\n\t\t\tut8 data[32];\n\t\t\tr_io_read_at (core->io, core->offset, data, sizeof (data));\n\t\t\tint ret = r_anal_op (core->anal, &aop, core->offset, data, sizeof (data), R_ANAL_OP_MASK_ESIL);\n\t\t\tif (ret > 0) {\n\t\t\t\tconst char *arg = input + 2;\n\t\t\t\tconst char *expr = R_STRBUF_SAFEGET (&aop.esil);\n\t\t\t\tRStrBuf *b = r_anal_esil_dfg_filter_expr (core->anal, expr, arg);\n\t\t\t\tif (b) {\n\t\t\t\t\tchar *s = r_strbuf_drain (b);\n\t\t\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t\t\t\tfree (s);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"Warning: Unable to analyze instruction\\n\");\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tdefault:\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_ao);\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_jumps(RCore *core, const char *input) {\n\tr_core_cmdf (core, \"af @@= `ax~ref.code.jmp[1]`\");\n}\n\n// TODO: cleanup to reuse code\nstatic void cmd_anal_aftertraps(RCore *core, const char *input) {\n\tint bufi, minop = 1; // 4\n\tut8 *buf;\n\tRAnalOp op = {0};\n\tut64 addr, addr_end;\n\tut64 len = r_num_math (core->num, input);\n\tif (len > 0xffffff) {\n\t\teprintf (\"Too big\\n\");\n\t\treturn;\n\t}\n\tRBinFile *bf = r_bin_cur (core->bin);\n\tif (!bf) {\n\t\treturn;\n\t}\n\taddr = core->offset;\n\tif (!len) {\n\t\t// ignore search.in to avoid problems. analysis != search\n\t\tRIOMap *map = r_io_map_get_at (core->io, addr);\n\t\tif (map && (map->perm & R_PERM_X)) {\n\t\t\t// search in current section\n\t\t\tif (r_io_map_size (map) > bf->size) {\n\t\t\t\taddr = r_io_map_begin (map);\n\t\t\t\tif (bf->size > map->delta) {\n\t\t\t\t\tlen = bf->size - map->delta;\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Opps something went wrong aac\\n\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr = r_io_map_begin (map);\n\t\t\t\tlen = r_io_map_size (map);\n\t\t\t}\n\t\t} else {\n\t\t\tif (map && r_io_map_begin (map) != map->delta && bf->size > (core->offset - r_io_map_begin (map) + map->delta)) {\n\t\t\t\tlen = bf->size - (core->offset - r_io_map_begin (map) + map->delta);\n\t\t\t} else {\n\t\t\t\tif (bf->size > core->offset) {\n\t\t\t\t\tlen = bf->size - core->offset;\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Oops invalid range\\n\");\n\t\t\t\t\tlen = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\taddr_end = addr + len;\n\tif (!(buf = malloc (4096))) {\n\t\treturn;\n\t}\n\tbufi = 0;\n\tint trapcount = 0;\n\tint nopcount = 0;\n\tr_cons_break_push (NULL, NULL);\n\twhile (addr < addr_end) {\n\t\tif (r_cons_is_breaked ()) {\n\t\t\tbreak;\n\t\t}\n\t\t// TODO: too many ioreads here\n\t\tif (bufi > 4000) {\n\t\t\tbufi = 0;\n\t\t}\n\t\tif (!bufi) {\n\t\t\tr_io_read_at (core->io, addr, buf, 4096);\n\t\t}\n\t\tif (r_anal_op (core->anal, &op, addr, buf + bufi, 4096 - bufi, R_ANAL_OP_MASK_BASIC)) {\n\t\t\tif (op.size < 1) {\n\t\t\t\t// XXX must be +4 on arm/mips/.. like we do in disasm.c\n\t\t\t\top.size = minop;\n\t\t\t}\n\t\t\tif (op.type == R_ANAL_OP_TYPE_TRAP) {\n\t\t\t\ttrapcount ++;\n\t\t\t} else if (op.type == R_ANAL_OP_TYPE_NOP) {\n\t\t\t\tnopcount ++;\n\t\t\t} else {\n\t\t\t\tif (nopcount > 1) {\n\t\t\t\t\tr_cons_printf (\"af @ 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t\t\tnopcount = 0;\n\t\t\t\t}\n\t\t\t\tif (trapcount > 0) {\n\t\t\t\t\tr_cons_printf (\"af @ 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t\t\ttrapcount = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\top.size = minop;\n\t\t}\n\t\taddr += (op.size > 0)? op.size : 1;\n\t\tbufi += (op.size > 0)? op.size : 1;\n\t\tr_anal_op_fini (&op);\n\t}\n\tr_cons_break_pop ();\n\tfree (buf);\n}\n\nstatic void cmd_anal_blocks(RCore *core, const char *input) {\n\tut64 from , to;\n\tchar *arg = strchr (input, ' ');\n\tr_cons_break_push (NULL, NULL);\n\tif (!arg) {\n\t\tRList *list = r_core_get_boundaries_prot (core, R_PERM_X, NULL, \"anal\");\n\t\tRListIter *iter;\n\t\tRIOMap* map;\n\t\tif (!list) {\n\t\t\tgoto ctrl_c;\n\t\t}\n\t\tr_list_foreach (list, iter, map) {\n\t\t\tfrom = r_io_map_begin (map);\n\t\t\tto = r_io_map_end (map);\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tgoto ctrl_c;\n\t\t\t}\n\t\t\tif (!from && !to) {\n\t\t\t\teprintf (\"Cannot determine search boundaries\\n\");\n\t\t\t} else if (to - from > UT32_MAX) {\n\t\t\t\teprintf (\"Skipping huge range\\n\");\n\t\t\t} else {\n\t\t\t\tr_core_cmdf (core, \"abb 0x%08\"PFMT64x\" @ 0x%08\"PFMT64x, (to - from), from);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tst64 sz = r_num_math (core->num, arg + 1);\n\t\tif (sz < 1) {\n\t\t\teprintf (\"Invalid range\\n\");\n\t\t\treturn;\n\t\t}\n\t\tr_core_cmdf (core, \"abb 0x%08\"PFMT64x\" @ 0x%08\"PFMT64x, sz, core->offset);\n\t}\nctrl_c:\n\tr_cons_break_pop ();\n}\n\nstatic void _anal_calls(RCore *core, ut64 addr, ut64 addr_end, bool printCommands, bool importsOnly) {\n\tRAnalOp op;\n\tint depth = r_config_get_i (core->config, \"anal.depth\");\n\tconst int addrbytes = core->io->addrbytes;\n\tconst int bsz = 4096;\n\tint bufi = 0;\n\tint bufi_max = bsz - 16;\n\tif (addr_end - addr > UT32_MAX) {\n\t\treturn;\n\t}\n\tut8 *buf = malloc (bsz);\n\tut8 *block0 = calloc (1, bsz);\n\tut8 *block1 = malloc (bsz);\n\tif (!buf || !block0 || !block1) {\n\t\teprintf (\"Error: cannot allocate buf or block\\n\");\n\t\tfree (buf);\n\t\tfree (block0);\n\t\tfree (block1);\n\t\treturn;\n\t}\n\tmemset (block1, -1, bsz);\n\tint minop = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_MIN_OP_SIZE);\n\tif (minop < 1) {\n\t\tminop = 1;\n\t}\n\tint setBits = r_config_get_i (core->config, \"asm.bits\");\n\tr_cons_break_push (NULL, NULL);\n\twhile (addr < addr_end && !r_cons_is_breaked ()) {\n\t\t// TODO: too many ioreads here\n\t\tif (bufi > bufi_max) {\n\t\t\tbufi = 0;\n\t\t}\n\t\tif (!bufi) {\n\t\t\t(void)r_io_read_at (core->io, addr, buf, bsz);\n\t\t}\n\t\tif (!memcmp (buf, block0, bsz) || !memcmp (buf, block1, bsz)) {\n\t\t\t//eprintf (\"Error: skipping uninitialized block \\n\");\n\t\t\taddr += bsz;\n\t\t\tcontinue;\n\t\t}\n\t\tRAnalHint *hint = r_anal_hint_get (core->anal, addr);\n\t\tif (hint && hint->bits) {\n\t\t\tsetBits = hint->bits;\n\t\t}\n\t\tr_anal_hint_free (hint);\n\t\tif (setBits != core->rasm->bits) {\n\t\t\tr_config_set_i (core->config, \"asm.bits\", setBits);\n\t\t}\n\t\tif (r_anal_op (core->anal, &op, addr, buf + bufi, bsz - bufi, 0) > 0) {\n\t\t\tif (op.size < 1) {\n\t\t\t\top.size = minop;\n\t\t\t}\n\t\t\tif (op.type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t\tbool isValidCall = true;\n\t\t\t\tif (importsOnly) {\n\t\t\t\t\tRFlagItem *f = r_flag_get_i (core->flags, op.jump);\n\t\t\t\t\tif (!f || !strstr (f->name, \"imp.\")) {\n\t\t\t\t\t\tisValidCall = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tRBinReloc *rel = r_core_getreloc (core, addr, op.size);\n\t\t\t\tif (rel && (rel->import || rel->symbol)) {\n\t\t\t\t\tisValidCall = false;\n\t\t\t\t}\n\t\t\t\tif (isValidCall) {\n\t\t\t\t\tut8 buf[4];\n\t\t\t\t\tr_io_read_at (core->io, op.jump, buf, 4);\n\t\t\t\t\tisValidCall = memcmp (buf, \"\\x00\\x00\\x00\\x00\", 4);\n\t\t\t\t}\n\t\t\t\tif (isValidCall) {\n#if JAYRO_03\n\t\t\t\t\tif (!anal_is_bad_call (core, from, to, addr, buf, bufi)) {\n\t\t\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, op.jump, R_ANAL_FCN_TYPE_ROOT);\n\t\t\t\t\t\tif (!fcn) {\n\t\t\t\t\t\t\tr_core_anal_fcn (core, op.jump, addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n#else\n\t\t\t\t\tif (printCommands) {\n\t\t\t\t\t\tr_cons_printf (\"ax 0x%08\" PFMT64x \" 0x%08\" PFMT64x \"\\n\", op.jump, addr);\n\t\t\t\t\t\tr_cons_printf (\"af @ 0x%08\" PFMT64x\"\\n\", op.jump);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// add xref here\n\t\t\t\t\t\tr_anal_xrefs_set (core->anal, addr, op.jump, R_ANAL_REF_TYPE_CALL);\n\t\t\t\t\t\tif (r_io_is_valid_offset (core->io, op.jump, 1)) {\n\t\t\t\t\t\t\tr_core_anal_fcn (core, op.jump, addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n#endif\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\top.size = minop;\n\t\t}\n\t\tif ((int)op.size < 1) {\n\t\t\top.size = minop;\n\t\t}\n\t\taddr += op.size;\n\t\tbufi += addrbytes * op.size;\n\t\tr_anal_op_fini (&op);\n\t}\n\tr_cons_break_pop ();\n\tfree (buf);\n\tfree (block0);\n\tfree (block1);\n}\n\nstatic void cmd_anal_calls(RCore *core, const char *input, bool printCommands, bool importsOnly) {\n\tRList *ranges = NULL;\n\tRIOMap *r;\n\tut64 addr;\n\tut64 len = r_num_math (core->num, input);\n\tif (len > 0xffffff) {\n\t\teprintf (\"Too big\\n\");\n\t\treturn;\n\t}\n\tRBinFile *binfile = r_bin_cur (core->bin);\n\taddr = core->offset;\n\tif (binfile) {\n\t\tif (len) {\n\t\t\tRIOMap *m = R_NEW0 (RIOMap);\n\t\t\tm->itv.addr = addr;\n\t\t\tm->itv.size = len;\n\t\t\tranges = r_list_newf ((RListFree)free);\n\t\t\tr_list_append (ranges, m);\n\t\t} else {\n\t\t\tranges = r_core_get_boundaries_prot (core, R_PERM_X, NULL, \"anal\");\n\t\t}\n\t}\n\tr_cons_break_push (NULL, NULL);\n\tif (!binfile || (ranges && !r_list_length (ranges))) {\n\t\tRListIter *iter;\n\t\tRIOMap *map;\n\t\tr_list_free (ranges);\n\t\tranges = r_core_get_boundaries_prot (core, 0, NULL, \"anal\");\n\t\tif (ranges) {\n\t\t\tr_list_foreach (ranges, iter, map) {\n\t\t\t\tut64 addr = r_io_map_begin (map);\n\t\t\t\t_anal_calls (core, addr, r_io_map_end (map), printCommands, importsOnly);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tRListIter *iter;\n\t\tif (binfile) {\n\t\t\tr_list_foreach (ranges, iter, r) {\n\t\t\t\taddr = r->itv.addr;\n\t\t\t\t//this normally will happen on fuzzed binaries, dunno if with huge\n\t\t\t\t//binaries as well\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_anal_calls (core, addr, r_itv_end (r->itv), printCommands, importsOnly);\n\t\t\t}\n\t\t}\n\t}\n\tr_cons_break_pop ();\n\tr_list_free (ranges);\n}\n\nstatic void cmd_sdbk(Sdb *db, const char *input) {\n\tchar *out = (input[0] == ' ')\n\t\t? sdb_querys (db, NULL, 0, input + 1)\n\t\t: sdb_querys (db, NULL, 0, \"*\");\n\tif (out) {\n\t\tr_cons_println (out);\n\t\tfree (out);\n\t} else {\n\t\teprintf (\"|ERROR| Usage: ask [query]\\n\");\n\t}\n}\n\nstatic void cmd_anal_syscall(RCore *core, const char *input) {\n\tPJ *pj = NULL;\n\tRSyscallItem *si;\n\tRListIter *iter;\n\tRList *list;\n\tint n;\n\n\tswitch (input[0]) {\n\tcase 'c': // \"asc\"\n\t\tif (input[1] == 'a') {\n\t\t\tif (input[2] == ' ') {\n\t\t\t\tif (!isalpha ((ut8)input[3]) && (n = r_num_math (core->num, input + 3)) >= 0 ) {\n\t\t\t\t\tsi = r_syscall_get (core->anal->syscall, n, -1);\n\t\t\t\t\tif (si) {\n\t\t\t\t\t\tr_cons_printf (\".equ SYS_%s %s\\n\", si->name, syscallNumber (n));\n\t\t\t\t\t\tr_syscall_item_free (si);\n\t\t\t\t\t}\n\t\t\t\t\telse eprintf (\"Unknown syscall number\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tn = r_syscall_get_num (core->anal->syscall, input + 3);\n\t\t\t\t\tif (n != -1) {\n\t\t\t\t\t\tr_cons_printf (\".equ SYS_%s %s\\n\", input + 3, syscallNumber (n));\n\t\t\t\t\t} else {\n\t\t\t\t\t\teprintf (\"Unknown syscall name\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlist = r_syscall_list (core->anal->syscall);\n\t\t\t\tr_list_foreach (list, iter, si) {\n\t\t\t\t\tr_cons_printf (\".equ SYS_%s %s\\n\",\n\t\t\t\t\t\tsi->name, syscallNumber (si->num));\n\t\t\t\t}\n\t\t\t\tr_list_free (list);\n\t\t\t}\n\t\t} else {\n\t\t\tif (input[1] == ' ') {\n\t\t\t\tif (!isalpha ((ut8)input[2]) && (n = r_num_math (core->num, input + 2)) >= 0) {\n\t\t\t\t\tsi = r_syscall_get (core->anal->syscall, n, -1);\n\t\t\t\t\tif (si) {\n\t\t\t\t\t\tr_cons_printf (\"#define SYS_%s %s\\n\", si->name, syscallNumber (n));\n\t\t\t\t\t\tr_syscall_item_free (si);\n\t\t\t\t\t}\n\t\t\t\t\telse eprintf (\"Unknown syscall number\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tn = r_syscall_get_num (core->anal->syscall, input + 2);\n\t\t\t\t\tif (n != -1) {\n\t\t\t\t\t\tr_cons_printf (\"#define SYS_%s %s\\n\", input + 2, syscallNumber (n));\n\t\t\t\t\t} else {\n\t\t\t\t\t\teprintf (\"Unknown syscall name\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlist = r_syscall_list (core->anal->syscall);\n\t\t\t\tr_list_foreach (list, iter, si) {\n\t\t\t\t\tr_cons_printf (\"#define SYS_%s %s\\n\",\n\t\t\t\t\t\tsi->name, syscallNumber (si->num));\n\t\t\t\t}\n\t\t\t\tr_list_free (list);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'k': // \"ask\"\n\t\tcmd_sdbk (core->anal->syscall->db, input + 1);\n\t\tbreak;\n\tcase 'l': // \"asl\"\n\t\tif (input[1] == ' ') {\n\t\t\tconst char *sc_name = r_str_trim_head_ro (input + 2);\n\t\t\tint sc_number = r_syscall_get_num (core->anal->syscall, sc_name);\n\t\t\tif (sc_number != 0) {\n\t\t\t\tr_cons_printf (\"%s\\n\", syscallNumber (sc_number));\n\t\t\t} else {\n\t\t\t\tsc_number = r_num_math (core->num, sc_name);\n\t\t\t\tsi = r_syscall_get (core->anal->syscall, sc_number, -1);\n\t\t\t\tif (!si) {\n\t\t\t\t\tsi = r_syscall_get (core->anal->syscall, -1, sc_number);\n\t\t\t\t}\n\t\t\t\tif (si) {\n\t\t\t\t\tr_cons_println (si->name);\n\t\t\t\t\tr_syscall_item_free (si);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Unknown syscall number\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlist = r_syscall_list (core->anal->syscall);\n\t\t\tr_list_foreach (list, iter, si) {\n\t\t\t\tr_cons_printf (\"%s = 0x%02x.%s\\n\",\n\t\t\t\t\tsi->name, si->swi, syscallNumber (si->num));\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"asj\"\n\t\tpj = pj_new ();\n\t\tpj_a (pj);\n\t\tlist = r_syscall_list (core->anal->syscall);\n\t\tr_list_foreach (list, iter, si) {\n\t\t\tpj_o (pj);\n\t\t\tpj_ks (pj, \"name\", si->name);\n\t\t\tpj_ki (pj, \"swi\", si->swi);\n\t\t\tpj_ki (pj, \"num\", si->num);\n\t\t\tpj_end (pj);\n\t\t}\n\t\tpj_end (pj);\n\t\tif (pj) {\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t}\n\t\tbreak;\n\tcase '\\0':\n\t\tcmd_syscall_do (core, -1, core->offset);\n\t\tbreak;\n\tcase ' ':\n\t\t{\n\t\tconst char *sn = r_str_trim_head_ro (input + 1);\n\t\tst64 num = r_syscall_get_num (core->anal->syscall, sn);\n\t\tif (num < 1) {\n\t\t\tnum = (int)r_num_get (core->num, sn);\n\t\t}\n\t\tcmd_syscall_do (core, num, -1);\n\t\t}\n\t\tbreak;\n\tdefault:\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_as);\n\t\tbreak;\n\t}\n}\n\nstatic void anal_axg(RCore *core, const char *input, int level, Sdb *db, int opts, PJ* pj) {\n\tchar arg[32], pre[128];\n\tRListIter *iter;\n\tRAnalRef *ref;\n\tut64 addr = core->offset;\n\tbool is_json = opts & R_CORE_ANAL_JSON;\n\tbool is_r2 = opts & R_CORE_ANAL_GRAPHBODY;\n\tif (is_json && !pj) {\n\t\treturn;\n\t}\n\tif (input && *input) {\n\t\taddr = r_num_math (core->num, input);\n\t}\n\t// eprintf (\"Path between 0x%08\"PFMT64x\" .. 0x%08\"PFMT64x\"\\n\", core->offset, addr);\n\tint spaces = (level + 1) * 2;\n\tif (spaces > sizeof (pre) - 4) {\n\t\tspaces = sizeof (pre) - 4;\n\t}\n\tmemset (pre, ' ', sizeof (pre));\n\tstrcpy (pre + spaces, \"- \");\n\n\tRList *xrefs = r_anal_xrefs_get (core->anal, addr);\n\tbool open_object = false;\n\tif (!r_list_empty (xrefs)) {\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, -1);\n\t\tif (fcn) {\n\t\t\tif (is_r2) {\n\t\t\t\tr_cons_printf (\"agn 0x%08\"PFMT64x\" %s\\n\", fcn->addr, fcn->name);\n\t\t\t} else if (is_json) {\n\t\t\t\tchar taddr[64];\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_k (pj, sdb_itoa (addr, taddr, 10));\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"type\", \"fcn\");\n\t\t\t\tpj_kn (pj, \"fcn_addr\", fcn->addr);\n\t\t\t\tpj_ks (pj, \"name\", fcn->name);\n\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\tpj_a (pj);\n\t\t\t\topen_object = true;\n\t\t\t} else {\n\t\t\t\t//if (sdb_add (db, fcn->name, \"1\", 0)) {\n\t\t\t\tr_cons_printf (\"%s0x%08\"PFMT64x\" fcn 0x%08\"PFMT64x\" %s\\n\",\n\t\t\t\t\tpre + 2, addr, fcn->addr, fcn->name);\n\t\t\t\t//}\n\t\t\t}\n\t\t} else {\n\t\t\tif (is_r2) {\n\t\t\t\tr_cons_printf (\"age 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t} else if (is_json) {\n\t\t\t\tchar taddr[64];\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_k (pj, sdb_itoa (addr, taddr, 10));\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\tpj_a (pj);\n\t\t\t\topen_object = true;\n\t\t\t} else {\n\t\t\t//snprintf (arg, sizeof (arg), \"0x%08\"PFMT64x, addr);\n\t\t\t//if (sdb_add (db, arg, \"1\", 0)) {\n\t\t\t\tr_cons_printf (\"%s0x%08\"PFMT64x\"\\n\", pre+2, addr);\n\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\tr_list_foreach (xrefs, iter, ref) {\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, ref->addr, -1);\n\t\tif (fcn) {\n\t\t\tif (is_r2) {\n\t\t\t\tr_cons_printf (\"agn 0x%08\"PFMT64x\" %s\\n\", fcn->addr, fcn->name);\n\t\t\t\tr_cons_printf (\"age 0x%08\"PFMT64x\" 0x%08\"PFMT64x\"\\n\", fcn->addr, addr);\n\t\t\t} else if (is_json) {\n\t\t\t\tif (level == 0) {\n\t\t\t\t\tchar taddr[64];\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_k (pj, sdb_itoa (ref->addr, taddr, 10));\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_ks (pj, \"type\", \"fcn\");\n\t\t\t\t\tpj_kn (pj, \"fcn_addr\", fcn->addr);\n\t\t\t\t\tpj_ks (pj, \"name\", fcn->name);\n\t\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\t\tpj_a (pj);\n\t\t\t\t\topen_object = true;\n\t\t\t\t} else {\n\t\t\t\t\tchar taddr[64];\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_k (pj, sdb_itoa (ref->addr, taddr, 10));\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_ks (pj, \"type\", \"fcn\");\n\t\t\t\t\tpj_kn (pj, \"fcn_addr\", fcn->addr);\n\t\t\t\t\tpj_ks (pj, \"refs\", fcn->name);\n\t\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\t\tpj_a (pj);\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\"%s0x%08\"PFMT64x\" fcn 0x%08\"PFMT64x\" %s\\n\", pre, ref->addr, fcn->addr, fcn->name);\n\t\t\t}\n\t\t\tif (sdb_add (db, fcn->name, \"1\", 0)) {\n\t\t\t\tsnprintf (arg, sizeof (arg), \"0x%08\"PFMT64x, fcn->addr);\n\t\t\t\tanal_axg (core, arg, level + 1, db, opts, pj);\n\t\t\t} else {\n\t\t\t\tif (is_json) {\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\topen_object = false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (is_r2) {\n\t\t\t\tr_cons_printf (\"agn 0x%08\"PFMT64x\" ???\\n\", ref->addr);\n\t\t\t\tr_cons_printf (\"age 0x%08\"PFMT64x\" 0x%08\"PFMT64x\"\\n\", ref->addr, addr);\n\t\t\t} else if (is_json) {\n\t\t\t\tchar taddr[64];\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_k (pj, sdb_itoa (ref->addr, taddr, 10));\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"type\", \"???\");\n\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\tpj_a (pj);\n\t\t\t\topen_object = true;\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\"%s0x%08\"PFMT64x\" ???\\n\", pre, ref->addr);\n\t\t\t}\n\t\t\tsnprintf (arg, sizeof (arg), \"0x%08\"PFMT64x, ref->addr);\n\t\t\tif (sdb_add (db, arg, \"1\", 0)) {\n\t\t\t\tanal_axg (core, arg, level + 1, db, opts, pj);\n\t\t\t} else {\n\t\t\t\tif (is_json) {\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\topen_object = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (is_json) {\n\t\tif (open_object) {\n\t\t\tpj_end (pj);\n\t\t\tpj_end (pj);\n\t\t\tpj_end (pj);\n\t\t}\n\t\tif (level == 0) {\n\t\t\tif (open_object) {\n\t\t\t\tpj_end (pj);\n\t\t\t\tpj_end (pj);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t}\n\t}\n\tr_list_free (xrefs);\n}\n\nstatic void cmd_anal_ucall_ref (RCore *core, ut64 addr) {\n\tRAnalFunction * fcn = r_anal_get_function_at (core->anal, addr);\n\tif (fcn) {\n\t\tr_cons_printf (\" ; %s\", fcn->name);\n\t} else {\n\t\tr_cons_printf (\" ; 0x%\" PFMT64x, addr);\n\t}\n}\n\nstatic char *get_op_ireg(void *user, ut64 addr) {\n\tRCore *core = (RCore *)user;\n\tchar *res = NULL;\n\tRAnalOp *op = r_core_anal_op (core, addr, 0);\n\tif (op && op->ireg) {\n\t\tres = strdup (op->ireg);\n\t}\n\tr_anal_op_free (op);\n\treturn res;\n}\n\nstatic char *get_buf_asm(RCore *core, ut64 from, ut64 addr, RAnalFunction *fcn, bool color) {\n\tint has_color = core->print->flags & R_PRINT_FLAGS_COLOR;\n\tchar str[512];\n\tconst int size = 12;\n\tut8 buf[12];\n\tRAsmOp asmop = {0};\n\tchar *buf_asm = NULL;\n\tbool asm_subvar = r_config_get_i (core->config, \"asm.sub.var\");\n\tcore->parser->pseudo = r_config_get_i (core->config, \"asm.pseudo\");\n\tcore->parser->subrel = r_config_get_i (core->config, \"asm.sub.rel\");\n\tcore->parser->localvar_only = r_config_get_i (core->config, \"asm.sub.varonly\");\n\n\tif (core->parser->subrel) {\n\t\tcore->parser->subrel_addr = from;\n\t}\n\tr_io_read_at (core->io, addr, buf, size);\n\tr_asm_set_pc (core->rasm, addr);\n\tr_asm_disassemble (core->rasm, &asmop, buf, size);\n\tint ba_len = r_strbuf_length (&asmop.buf_asm) + 128;\n\tchar *ba = malloc (ba_len);\n\tstrcpy (ba, r_strbuf_get (&asmop.buf_asm));\n\tif (asm_subvar) {\n\t\tcore->parser->get_ptr_at = r_anal_function_get_var_stackptr_at;\n\t\tcore->parser->get_reg_at = r_anal_function_get_var_reg_at;\n\t\tcore->parser->get_op_ireg = get_op_ireg;\n\t\tr_parse_subvar (core->parser, fcn, addr, asmop.size,\n\t\t\t\tba, ba, sizeof (asmop.buf_asm));\n\t}\n\tRAnalHint *hint = r_anal_hint_get (core->anal, addr);\n\tr_parse_filter (core->parser, addr, core->flags, hint,\n\t\t\tba, str, sizeof (str), core->print->big_endian);\n\tr_anal_hint_free (hint);\n\tr_asm_op_set_asm (&asmop, ba);\n\tfree (ba);\n\tif (color && has_color) {\n\t\tbuf_asm = r_print_colorize_opcode (core->print, str,\n\t\t\t\tcore->cons->context->pal.reg, core->cons->context->pal.num, false, fcn ? fcn->addr : 0);\n\t} else {\n\t\tbuf_asm = r_str_new (str);\n\t}\n\treturn buf_asm;\n}\n\n#define var_ref_list(a,d,t) sdb_fmt (\"var.0x%\"PFMT64x\".%d.%d.%s\",\\\n\t\ta, 1, d, (t == 'R')?\"reads\":\"writes\");\n\nstatic bool cmd_anal_refs(RCore *core, const char *input) {\n\tut64 addr = core->offset;\n\tswitch (input[0]) {\n\tcase '-': { // \"ax-\"\n\t\tRList *list;\n\t\tRListIter *iter;\n\t\tRAnalRef *ref;\n\t\tchar *cp_inp = strdup (input + 1);\n\t\tchar *ptr = cp_inp;\n\t\tr_str_trim_head (ptr);\n\t\tif (!strcmp (ptr, \"*\")) { // \"ax-*\"\n\t\t\tr_anal_xrefs_init (core->anal);\n\t\t} else {\n\t\t\tint n = r_str_word_set0 (ptr);\n\t\t\tut64 from = UT64_MAX, to = UT64_MAX;\n\t\t\tswitch (n) {\n\t\t\tcase 2:\n\t\t\t\tfrom = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t\t\t//fall through\n\t\t\tcase 1: // get addr\n\t\t\t\tto = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tto = core->offset;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlist = r_anal_xrefs_get (core->anal, to);\n\t\t\tif (list) {\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tif (from != UT64_MAX && from == ref->addr) {\n\t\t\t\t\t\tr_anal_xref_del (core->anal, ref->addr, ref->at);\n\t\t\t\t\t}\n\t\t\t\t\tif (from == UT64_MAX) {\n\t\t\t\t\t\tr_anal_xref_del (core->anal, ref->addr, ref->at);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\tfree (cp_inp);\n\t} break;\n\tcase 'g': // \"axg\"\n\t\t{\n\t\t\tSdb *db = sdb_new0 ();\n\t\t\tif (input[1] == '*') {\n\t\t\t\tanal_axg (core, input + 2, 0, db, R_CORE_ANAL_GRAPHBODY, NULL); // r2 commands\n\t\t\t} else if (input[1] == 'j') {\n\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\tanal_axg (core, input + 2, 0, db, R_CORE_ANAL_JSON, pj);\n\t\t\t\tr_cons_printf(\"%s\\n\", pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t} else {\n\t\t\t\tanal_axg (core, input[1] ? input + 2 : NULL, 0, db, 0, NULL);\n\t\t\t}\n\t\t\tsdb_free (db);\n\t\t}\n\t\tbreak;\n\tcase '\\0': // \"ax\"\n\tcase 'j': // \"axj\"\n\tcase 'q': // \"axq\"\n\tcase '*': // \"ax*\"\n\t\tr_anal_xrefs_list (core->anal, input[0]);\n\t\tbreak;\n\tcase '.': { // \"ax.\"\n\t\tchar *tInput = strdup (input);\n\t\tif (r_str_replace_ch (tInput, '.', 't', false)) {\n\t\t\tcmd_anal_refs (core, tInput);\n\t\t}\n\t\tchar *fInput = strdup (input);\n\t\tif (r_str_replace_ch (fInput, '.', 'f', false)) {\n\t\t\tcmd_anal_refs (core, fInput);\n\t\t}\n\t\tfree (tInput);\n\t\tfree (fInput);\n\t} break;\n\tcase 'm': { // \"axm\"\n\t\tRList *list;\n\t\tRAnalRef *ref;\n\t\tRListIter *iter;\n\t\tchar *ptr = strdup (r_str_trim_head_ro (input + 1));\n\t\tint n = r_str_word_set0 (ptr);\n\t\tut64 at = core->offset;\n\t\tut64 addr = UT64_MAX;\n\t\tswitch (n) {\n\t\tcase 2: // get at\n\t\t\tat = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t/* fall through */\n\t\tcase 1: // get addr\n\t\t\taddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfree (ptr);\n\t\t\treturn false;\n\t\t}\n\t\t//get all xrefs pointing to addr\n\t\tlist = r_anal_xrefs_get (core->anal, addr);\n\t\tr_list_foreach (list, iter, ref) {\n\t\t\tr_cons_printf (\"0x%\"PFMT64x\" %s\\n\", ref->addr, r_anal_xrefs_type_tostring (ref->type));\n\t\t\tr_anal_xrefs_set (core->anal, ref->addr, at, ref->type);\n\t\t}\n\t\tr_list_free (list);\n\t\tfree (ptr);\n\t} break;\n\tcase 'v': // \"axv\"\n\t\tcmd_afvx (core, NULL, input[1] == 'j');\n\t\tbreak;\n\tcase 't': { // \"axt\"\n\t\tif (input[1] == '?') { // axt?\n\t\t\tr_core_cmd_help (core, help_msg_axt);\n\t\t\tbreak;\n\t\t}\n\t\tRList *list = NULL;\n\t\tRAnalFunction *fcn;\n\t\tRAnalRef *ref;\n\t\tRListIter *iter;\n\t\tchar *space = strchr (input, ' ');\n\t\tif (space) {\n\t\t\taddr = r_num_math (core->num, space + 1);\n\t\t} else {\n\t\t\taddr = core->offset;\n\t\t}\n\t\tlist = r_anal_xrefs_get (core->anal, addr);\n\t\tif (list) {\n\t\t\tif (input[1] == 'q') { // \"axtq\"\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \"\\n\", ref->addr);\n\t\t\t\t}\n\t\t\t} else if (input[1] == 'j') { // \"axtj\"\n\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tpj_a (pj);\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, ref->addr, 0);\n\t\t\t\t\tchar *str = get_buf_asm (core, addr, ref->addr, fcn, false);\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_kn (pj, \"from\", ref->addr);\n\t\t\t\t\tpj_ks (pj, \"type\", r_anal_xrefs_type_tostring (ref->type));\n\t\t\t\t\tpj_ks (pj, \"opcode\", str);\n\t\t\t\t\tif (fcn) {\n\t\t\t\t\t\tpj_kn (pj, \"fcn_addr\", fcn->addr);\n\t\t\t\t\t\tpj_ks (pj, \"fcn_name\", fcn->name);\n\t\t\t\t\t}\n\t\t\t\t\tRFlagItem *fi = r_flag_get_at (core->flags, fcn? fcn->addr: ref->addr, true);\n\t\t\t\t\tif (fi) {\n\t\t\t\t\t\tif (fcn) {\n\t\t\t\t\t\t\tif (strcmp (fcn->name, fi->name)) {\n\t\t\t\t\t\t\t\tpj_ks (pj, \"flag\", fi->name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpj_k (pj, \"name\");\n\t\t\t\t\t\t\tif (fi->offset != ref->addr) {\n\t\t\t\t\t\t\t\tint delta = (int)(ref->addr - fi->offset);\n\t\t\t\t\t\t\t\tchar *name_ref = r_str_newf (\"%s+%d\", fi->name, delta);\n\t\t\t\t\t\t\t\tpj_s (pj, name_ref);\n\t\t\t\t\t\t\t\tfree (name_ref);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpj_s (pj, fi->name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (fi->realname && strcmp (fi->name, fi->realname)) {\n\t\t\t\t\t\t\tchar *escaped = r_str_escape (fi->realname);\n\t\t\t\t\t\t\tif (escaped) {\n\t\t\t\t\t\t\t\tpj_ks (pj, \"realname\", escaped);\n\t\t\t\t\t\t\t\tfree (escaped);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tchar *refname = core->anal->coreb.getNameDelta (core, ref->at);\n\t\t\t\t\tif (refname) {\n\t\t\t\t\t\tr_str_replace_ch (refname, ' ', 0, true);\n\t\t\t\t\t\tpj_ks (pj, \"refname\", refname);\n\t\t\t\t\t\tfree (refname);\n\t\t\t\t\t}\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tfree (str);\n\t\t\t\t}\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_printf (\"%s\", pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t\tr_cons_newline ();\n\t\t\t} else if (input[1] == 'g') { // axtg\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tchar *str = r_core_cmd_strf (core, \"fd 0x%\"PFMT64x, ref->addr);\n\t\t\t\t\tif (!str) {\n\t\t\t\t\t\tstr = strdup (\"?\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tr_str_trim_tail (str);\n\t\t\t\t\tr_cons_printf (\"agn 0x%\" PFMT64x \" \\\"%s\\\"\\n\", ref->addr, str);\n\t\t\t\t\tfree (str);\n\t\t\t\t}\n\t\t\t\tif (input[2] != '*') {\n\t\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\t\t\tr_cons_printf (\"agn 0x%\" PFMT64x \" \\\"%s\\\"\\n\", addr, fcn?fcn->name: \"$$\");\n\t\t\t\t}\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tr_cons_printf (\"age 0x%\" PFMT64x \" 0x%\"PFMT64x\"\\n\", ref->addr, addr);\n\t\t\t\t}\n\t\t\t} else if (input[1] == '*') { // axt*\n\t\t\t\t// TODO: implement multi-line comments\n\t\t\t\tr_list_foreach (list, iter, ref)\n\t\t\t\t\tr_cons_printf (\"CCa 0x%\" PFMT64x \" \\\"XREF type %d at 0x%\" PFMT64x\"%s\\n\",\n\t\t\t\t\t\tref->addr, ref->type, addr, iter->n? \",\": \"\");\n\t\t\t} else { // axt\n\t\t\t\tRAnalFunction *fcn;\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, ref->addr, 0);\n\t\t\t\t\tchar *buf_asm = get_buf_asm (core, addr, ref->addr, fcn, true);\n\t\t\t\t\tconst char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, ref->addr);\n\t\t\t\t\tchar *print_comment = NULL;\n\t\t\t\t\tconst char *nl = comment ? strchr (comment, '\\n') : NULL;\n\t\t\t\t\tif (nl) { // display only until the first newline\n\t\t\t\t\t\tcomment = print_comment = r_str_ndup (comment, nl - comment);\n\t\t\t\t\t}\n\t\t\t\t\tchar *buf_fcn = comment\n\t\t\t\t\t\t? r_str_newf (\"%s; %s\", fcn ?  fcn->name : \"(nofunc)\", comment)\n\t\t\t\t\t\t: r_str_newf (\"%s\", fcn ? fcn->name : \"(nofunc)\");\n\t\t\t\t\tfree (print_comment);\n\t\t\t\t\tr_cons_printf (\"%s 0x%\" PFMT64x \" [%s] %s\\n\",\n\t\t\t\t\t\tbuf_fcn, ref->addr, r_anal_xrefs_type_tostring (ref->type), buf_asm);\n\t\t\t\t\tfree (buf_asm);\n\t\t\t\t\tfree (buf_fcn);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (input[1] == 'j') { // \"axtj\"\n\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tpj_a (pj);\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t}\n\t\tr_list_free (list);\n\t} break;\n\tcase 'f':\n\t\tif (input[1] == 'f') { // \"axff\"\n\t\t\tRAnalFunction * fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\tRListIter *iter;\n\t\t\tPJ *pj = NULL;\n\t\t\tRAnalRef *refi;\n\t\t\tif (input[2] == 'j') { // \"axffj\"\n\t\t\t\t// start a new JSON object\n\t\t\t\tpj = pj_new ();\n\t\t\t\tpj_a (pj);\n\t\t\t}\n\t\t\tif (fcn) {\n\t\t\t\tRList *refs = r_anal_function_get_refs (fcn);\n\t\t\t\tr_list_foreach (refs, iter, refi) {\n\t\t\t\t\tRFlagItem *f = r_flag_get_at (core->flags, refi->addr, true);\n\t\t\t\t\tconst char *name = f ? f->name: \"\";\n\t\t\t\t\tif (pj) {\n\t\t\t\t\t\tpj_o (pj);\n\t\t\t\t\t\tpj_ks (pj, \"type\", r_anal_xrefs_type_tostring(refi->type));\n\t\t\t\t\t\tpj_kn (pj, \"at\", refi->at);\n\t\t\t\t\t\tpj_kn (pj, \"ref\", refi->addr);\n\t\t\t\t\t\tpj_ks (pj, \"name\", name);\n\t\t\t\t\t\tpj_end (pj);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_cons_printf (\"%s 0x%08\"PFMT64x\" 0x%08\"PFMT64x\" %s\\n\",\n\t\t\t\t\t\t\tr_anal_xrefs_type_tostring(refi->type), refi->at, refi->addr, name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pj) {\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"Cannot find any function\\n\");\n\t\t\t}\n\t\t\tpj_free (pj);\n\t\t} else { // \"axf\"\n\t\t\tRAsmOp asmop;\n\t\t\tRList *list = NULL;\n\t\t\tRAnalRef *ref;\n\t\t\tRListIter *iter;\n\t\t\tchar *space = strchr (input, ' ');\n\t\t\tif (space) {\n\t\t\t\taddr = r_num_math (core->num, space + 1);\n\t\t\t} else {\n\t\t\t\taddr = core->offset;\n\t\t\t}\n\t\t\tRAnalFunction * fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\tif (input[1] == '.') { // \"axf.\"\n\t\t\t\tlist = r_anal_xrefs_get_from (core->anal, addr);\n\t\t\t\tif (!list) {\n\t\t\t\t\tlist = r_anal_function_get_refs (fcn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlist = r_anal_refs_get (core->anal, addr);\n\t\t\t}\n\n\t\t\tif (list) {\n\t\t\t\tif (input[1] == 'q') { // \"axfq\"\n\t\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \"\\n\", ref->at);\n\t\t\t\t\t}\n\t\t\t\t} else if (input[1] == 'j') { // \"axfj\"\n\t\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\t\tif (!pj) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tpj_a (pj);\n\t\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\t\t// TODO: Use r_core_anal_op(DISASM) instead of all those 4 lines\n\t\t\t\t\t\tut8 buf[16];\n\t\t\t\t\t\tr_io_read_at (core->io, ref->addr, buf, sizeof (buf));\n\t\t\t\t\t\tr_asm_set_pc (core->rasm, ref->addr);\n\t\t\t\t\t\tr_asm_disassemble (core->rasm, &asmop, buf, sizeof (buf));\n\t\t\t\t\t\tpj_o (pj);\n\t\t\t\t\t\tpj_kn (pj, \"from\", ref->at);\n\t\t\t\t\t\tpj_kn (pj, \"to\", ref->addr);\n\t\t\t\t\t\tpj_ks (pj, \"type\", r_anal_xrefs_type_tostring (ref->type));\n\t\t\t\t\t\tpj_ks (pj, \"opcode\", r_asm_op_get_asm (&asmop));\n\t\t\t\t\t\tpj_end (pj);\n\t\t\t\t\t}\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\t\tpj_free (pj);\n\t\t\t\t} else if (input[1] == '*') { // \"axf*\"\n\t\t\t\t\t// TODO: implement multi-line comments\n\t\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\t\tr_cons_printf (\"CCa 0x%\" PFMT64x \" \\\"XREF from 0x%u \\n\",\n\t\t\t\t\t\t\t\tref->at, ref->type);\n\t\t\t\t\t}\n\t\t\t\t} else { // \"axf\"\n\t\t\t\t\tchar str[512];\n\t\t\t\t\tint has_color = core->print->flags & R_PRINT_FLAGS_COLOR;\n\t\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\t\tut8 buf[16];\n\t\t\t\t\t\tchar *desc;\n\t\t\t\t\t\tchar *desc_to_free = NULL;\n\t\t\t\t\t\tRFlagItem *flag = r_flag_get_at (core->flags, ref->addr, false);\n\t\t\t\t\t\tif (flag) {\n\t\t\t\t\t\t\tdesc = flag->name;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr_io_read_at (core->io, ref->addr, buf, sizeof (buf));\n\t\t\t\t\t\t\tr_asm_set_pc (core->rasm, ref->addr);\n\t\t\t\t\t\t\tr_asm_disassemble (core->rasm, &asmop, buf, sizeof(buf));\n\t\t\t\t\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, ref->addr);\n\t\t\t\t\t\t\tr_parse_filter (core->parser, ref->addr, core->flags, hint, r_asm_op_get_asm (&asmop),\n\t\t\t\t\t\t\t\t\tstr, sizeof (str), core->print->big_endian);\n\t\t\t\t\t\t\tr_anal_hint_free (hint);\n\t\t\t\t\t\t\tif (has_color) {\n\t\t\t\t\t\t\t\tdesc = desc_to_free = r_print_colorize_opcode (core->print, str,\n\t\t\t\t\t\t\t\t\t\tcore->cons->context->pal.reg, core->cons->context->pal.num, false, fcn ? fcn->addr : 0);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdesc = str;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_cons_printf (\"%c 0x%\" PFMT64x \" %s\",\n\t\t\t\t\t\t\t\tref->type ? ref->type : ' ', ref->addr, desc);\n\n\t\t\t\t\t\tif (ref->type == R_ANAL_REF_TYPE_CALL) {\n\t\t\t\t\t\t\tRAnalOp aop;\n\t\t\t\t\t\t\tr_anal_op (core->anal, &aop, ref->addr, buf, sizeof(buf), R_ANAL_OP_MASK_BASIC);\n\t\t\t\t\t\t\tif (aop.type == R_ANAL_OP_TYPE_UCALL) {\n\t\t\t\t\t\t\t\tcmd_anal_ucall_ref (core, ref->addr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_cons_newline ();\n\t\t\t\t\t\tfree (desc_to_free);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (input[1] == 'j') { // \"axfj\"\n\t\t\t\t\tr_cons_print (\"[]\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\tbreak;\n\tcase 'F': // \"axF\"\n\t\tfind_refs (core, input + 1);\n\t\tbreak;\n\tcase 'C': // \"axC\"\n\tcase 'c': // \"axc\"\n\tcase 'd': // \"axd\"\n\tcase 's': // \"axs\"\n\tcase ' ': // \"ax \"\n\t\t{\n\t\tchar *ptr = strdup (r_str_trim_head_ro ((char *)input + 1));\n\t\tint n = r_str_word_set0 (ptr);\n\t\tut64 at = core->offset;\n\t\tut64 addr = UT64_MAX;\n\t\tRAnalRefType reftype = r_anal_xrefs_type (input[0]);\n\t\tswitch (n) {\n\t\tcase 2: // get at\n\t\t\tat = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t/* fall through */\n\t\tcase 1: // get addr\n\t\t\taddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfree (ptr);\n\t\t\treturn false;\n\t\t}\n\t\tr_anal_xrefs_set (core->anal, at, addr, reftype);\n\t\tfree (ptr);\n\t\t}\n\t   \tbreak;\n\tdefault:\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_ax);\n\t\tbreak;\n\t}\n\n\treturn true;\n}\nstatic void cmd_anal_hint(RCore *core, const char *input) {\n\tswitch (input[0]) {\n\tcase '?':\n\t\tif (input[1]) {\n\t\t\tut64 addr = r_num_math (core->num, input + 1);\n\t\t\tr_core_anal_hint_print (core->anal, addr, 0);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_ah);\n\t\t}\n\t\tbreak;\n\tcase '.': // \"ah.\"\n\t\tr_core_anal_hint_print (core->anal, core->offset, 0);\n\t\tbreak;\n\tcase 'a': // \"aha\" set arch\n\t\tif (input[1] == ' ') {\n\t\t\tchar *ptr = strdup (input + 2);\n\t\t\tr_str_word_set0 (ptr);\n\t\t\tconst char *arch = r_str_word_get0 (ptr, 0);\n\t\t\tr_anal_hint_set_arch (core->anal, core->offset, !arch || strcmp (arch, \"0\") == 0 ? NULL : arch);\n\t\t\tfree (ptr);\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_arch (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Missing argument\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'o': // \"aho\"\n\t\tif (input[1] == '*') {\n\t\t\t// show in r2\n\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, core->offset);\n\t\t\tif (hint && hint->opcode) {\n\t\t\t\tr_cons_printf (\"aho %s @ 0x%08\"PFMT64x\"\\n\", hint->opcode, hint->addr);\n\t\t\t}\n\t\t} else if (input[1] == 0) {\n\t\t\t// show if any\n\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, core->offset);\n\t\t\tif (hint && hint->type > 0) {\n\t\t\t\tr_cons_printf (\"%s\\n\", r_anal_optype_to_string (hint->type));\n\t\t\t}\n\t\t\tr_anal_hint_free (hint);\n\t\t}  else if (input[1] == '-') {\n\t\t\tut64 off = input[2]? r_num_math (core->num, input + 2): core->offset;\n\t\t\tr_anal_hint_unset_bits (core->anal, off);\n\t\t} else if (input[1] == ' ') {\n\t\t\tconst char *arg = r_str_trim_head_ro (input + 1);\n\t\t\tint type = r_anal_optype_from_string (arg);\n\t\t\tif (type != -1) {\n\t\t\t\tr_anal_hint_set_type (core->anal, core->offset, type);\n\t\t\t} else {\n\t\t\t\teprintf (\"Unknown opcode type. Try: io, acmp, add, sync, call, cjmp, cmp, nop, ...\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_aho);\n\t\t}\n\t\tbreak;\n\tcase 'b': // \"ahb\" set bits\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_ahb);\n\t\t} else if (input[1] == ' ') {\n\t\t\tchar *ptr = r_str_trim_dup (input + 2);\n\t\t\tint bits;\n\t\t\tint i = r_str_word_set0 (ptr);\n\t\t\tif (i == 2) {\n\t\t\t\tr_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t\t}\n\t\t\tbits = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\tr_anal_hint_set_bits (core->anal, core->offset, bits);\n\t\t\tfree (ptr);\n\t\t}  else if (input[1] == '-') {\n\t\t\tif (!strcmp (input + 2, \"*\")) {\n\t\t\t\teprintf (\"Delete all asm.bits hints is not yet supported.\\n\");\n\t\t\t} else {\n\t\t\t\tut64 off = input[2]? r_num_math (core->num, input + 2): core->offset;\n\t\t\t\tr_anal_hint_unset_bits (core->anal, off);\n\t\t\t}\n\t\t} else {\n\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, core->offset);\n\t\t\tif (hint && hint->bits) {\n\t\t\t\tr_cons_printf (\"%d\\n\", hint->bits);\n\t\t\t}\n\t\t\tr_anal_hint_free (hint);\n\t\t}\n\t\tbreak;\n\tcase 'i': // \"ahi\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_ahi);\n\t\t\tbreak;\n\t\t}\n\t\tif (input[1] == '-') { // \"ahi-\"\n\t\t\tut64 addr = r_num_get (core->num, input + 2);\n\t\t\t// add ahi-*\n\t\t\tr_anal_hint_set_immbase (core->anal, addr? addr: core->offset, 0);\n\t\t\tbreak;\n\t\t}\n\t\tif (isdigit ((unsigned char)input[1])) {\n\t\t\tr_anal_hint_set_nword (core->anal, core->offset, input[1] - '0');\n\t\t\tinput++;\n\t\t}\n\t\tif (input[1] == ' ') {\n\t\t\t// You can either specify immbase with letters, or numbers\n\t\t\tint base;\n\t\t\tif (r_str_startswith (input + 2, \"10u\") || r_str_startswith (input + 2, \"du\")) {\n\t\t\t\tbase = 11;\n\t\t\t} else {\n\t\t\t\tbase = (input[2] == 's') ? 1 :\n\t\t\t\t       (input[2] == 'b') ? 2 :\n\t\t\t\t       (input[2] == 'p') ? 3 :\n\t\t\t\t       (input[2] == 'o') ? 8 :\n\t\t\t\t       (input[2] == 'd') ? 10 :\n\t\t\t\t       (input[2] == 'h') ? 16 :\n\t\t\t\t       (input[2] == 'i') ? 32 : // ip address\n\t\t\t\t       (input[2] == 'S') ? 80 : // syscall\n\t\t\t\t       (int) r_num_math (core->num, input + 1);\n\t\t\t}\n\t\t\tr_anal_hint_set_immbase (core->anal, core->offset, base);\n\t\t} else if (!input[1]) {\n\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, core->offset);\n\t\t\tif (hint && hint->immbase) {\n\t\t\t\tr_cons_printf (\"%d\\n\", hint->immbase);\n\t\t\t}\n\t\t\tr_anal_hint_free (hint);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_ahi);\n\t\t}\n\t\tbreak;\n\tcase 'h': // \"ahh\"\n\t\tif (input[1] == '-') {\n\t\t\tr_anal_hint_unset_high (core->anal, core->offset);\n\t\t} else if (input[1] == ' ') {\n\t\t\tr_anal_hint_set_high (core->anal, r_num_math (core->num, input + 1));\n\t\t} else {\n\t\t\tr_anal_hint_set_high (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"ahc\"\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_jump (\n\t\t\t\tcore->anal, core->offset,\n\t\t\t\tr_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_jump (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 'f': // \"ahf\"\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_fail (\n\t\t\t\tcore->anal, core->offset,\n\t\t\t\tr_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_fail (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 'F': // \"ahF\" set stackframe size\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_stackframe (\n\t\t\t\tcore->anal, core->offset,\n\t\t\t\tr_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_stackframe (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 's': // \"ahs\" set size (opcode length)\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_size (core->anal, core->offset, atoi (input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_size (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Usage: ahs 16\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'S': // \"ahS\" set asm.syntax\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_syntax (core->anal, core->offset, input + 2);\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_syntax (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Usage: ahS att\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"ahd\" set opcode string\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_opcode (core->anal, core->offset, input + 2);\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_opcode (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Usage: ahd popall\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'e': // \"ahe\" set ESIL string\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_esil (core->anal, core->offset, input + 2);\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_esil (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Usage: ahe r0,pc,=\\n\");\n\t\t}\n\t\tbreak;\n#if 0\n\tcase 'e': // set endian\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_opcode (core->anal, core->offset, atoi (input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_opcode (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n#endif\n\tcase 'p': // \"ahp\"\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_pointer (core->anal, core->offset, r_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') { // \"ahp-\"\n\t\t\tr_anal_hint_unset_pointer (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 'r': // \"ahr\"\n\t\t// XXX isnt this the same as 'aho ret' ?\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_ret (core->anal, core->offset, r_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') { // \"ahr-\"\n\t\t\tr_anal_hint_unset_ret (core->anal, core->offset);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_ahr);\n\t\t}\n\t\tbreak;\n\tcase '*': // \"ah*\"\n\tcase 'j': // \"ahj\"\n\tcase '\\0': // \"ah\"\n\t\tif (input[0] && input[1] == ' ') {\n\t\t\tchar *ptr = strdup (r_str_trim_head_ro (input + 2));\n\t\t\tr_str_word_set0 (ptr);\n\t\t\tut64 addr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\tr_core_anal_hint_print (core->anal, addr, input[0]);\n\t\t\tfree (ptr);\n\t\t} else {\n\t\t\tr_core_anal_hint_list (core->anal, input[0]);\n\t\t}\n\t\tbreak;\n\tcase 'v': // \"ahv\"\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_val (\n\t\t\t\tcore->anal, core->offset,\n\t\t\t\tr_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_val (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase '-': // \"ah-\"\n\t\tif (input[1]) {\n\t\t\tif (input[1] == '*') {\n\t\t\t\tr_anal_hint_clear (core->anal);\n\t\t\t} else {\n\t\t\t\tchar *ptr = strdup (r_str_trim_head_ro (input + 1));\n\t\t\t\tut64 addr;\n\t\t\t\tint size = 1;\n\t\t\t\tint i = r_str_word_set0 (ptr);\n\t\t\t\tif (i == 2) {\n\t\t\t\t\tsize = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t\t\t}\n\t\t\t\tconst char *a0 = r_str_word_get0 (ptr, 0);\n\t\t\t\tif (a0 && *a0) {\n\t\t\t\t\taddr = r_num_math (core->num, a0);\n\t\t\t\t} else {\n\t\t\t\t\taddr = core->offset;\n\t\t\t\t}\n\t\t\t\tr_anal_hint_del (core->anal, addr, size);\n\t\t\t\tfree (ptr);\n\t\t\t}\n\t\t} else {\n\t\t\tr_anal_hint_clear (core->anal);\n\t\t} break;\n\tcase 't': // \"aht\"\n\t\tswitch (input[1]) {\n\t\tcase 's': { // \"ahts\"\n\t\t\tchar *off = strdup (input + 2);\n\t\t\tr_str_trim (off);\n\t\t\tint toff = r_num_math (NULL, off);\n\t\t\tif (toff) {\n\t\t\t\tRList *typeoffs = r_type_get_by_offset (core->anal->sdb_types, toff);\n\t\t\t\tRListIter *iter;\n\t\t\t\tchar *ty;\n\t\t\t\tr_list_foreach (typeoffs, iter, ty) {\n\t\t\t\t\tr_cons_printf (\"%s\\n\", ty);\n\t\t\t\t}\n\t\t\t\tr_list_free (typeoffs);\n\t\t\t}\n\t\t\tfree (off);\n\t\t\tbreak;\n\t\t}\n\t\tcase ' ': {\n\t\t\t// r_anal_hint_set_opcode (core->anal, core->offset, input + 2);\n\t\t\tconst char *off = NULL;\n\t\t\tchar *type = strdup (r_str_trim_head_ro (input + 2));\n\t\t\tchar *idx = strchr (type, ' ');\n\t\t\tif (idx) {\n\t\t\t\t*idx++ = 0;\n\t\t\t\toff = idx;\n\t\t\t}\n\t\t\tchar *ptr = strchr (type, '=');\n\t\t\tut64 offimm = 0;\n\t\t\tint i = 0;\n\t\t\tut64 addr;\n\n\t\t\tif (ptr) {\n\t\t\t\t*ptr++ = 0;\n\t\t\t\tr_str_trim (ptr);\n\t\t\t\tif (ptr && *ptr) {\n\t\t\t\t\taddr = r_num_math (core->num, ptr);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"address is unvalid\\n\");\n\t\t\t\t\tfree (type);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr = core->offset;\n\t\t\t}\n\t\t\tr_str_trim (type);\n\t\t\tRAsmOp asmop;\n\t\t\tRAnalOp op = { 0 };\n\t\t\tut8 code[128] = { 0 };\n\t\t\t(void)r_io_read_at (core->io, core->offset, code, sizeof (code));\n\t\t\tr_asm_set_pc (core->rasm, addr);\n\t\t\t(void)r_asm_disassemble (core->rasm, &asmop, code, core->blocksize);\n\t\t\tint ret = r_anal_op (core->anal, &op, core->offset, code, core->blocksize, R_ANAL_OP_MASK_VAL);\n\t\t\tif (ret >= 0) {\n\t\t\t\t// HACK: Just convert only the first imm seen\n\t\t\t\tfor (i = 0; i < 3; i++) {\n\t\t\t\t\tif (op.src[i]) {\n\t\t\t\t\t\tif (op.src[i]->imm) {\n\t\t\t\t\t\t\toffimm = op.src[i]->imm;\n\t\t\t\t\t\t} else if (op.src[i]->delta) {\n\t\t\t\t\t\t\toffimm = op.src[i]->delta;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!offimm && op.dst) {\n\t\t\t\t\tif (op.dst->imm) {\n\t\t\t\t\t\toffimm = op.dst->imm;\n\t\t\t\t\t} else if (op.dst->delta) {\n\t\t\t\t\t\toffimm = op.dst->delta;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offimm != 0) {\n\t\t\t\t\tif (off) {\n\t\t\t\t\t\toffimm += r_num_math (NULL, off);\n\t\t\t\t\t}\n\t\t\t\t\t// TODO: Allow to select from multiple choices\n\t\t\t\t\tRList *otypes = r_type_get_by_offset (core->anal->sdb_types, offimm);\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tchar *otype = NULL;\n\t\t\t\t\tr_list_foreach (otypes, iter, otype) {\n\t\t\t\t\t\t// TODO: I don't think we should silently error, it is confusing\n\t\t\t\t\t\tif (!strcmp (type, otype)) {\n\t\t\t\t\t\t\t//eprintf (\"Adding type offset %s\\n\", type);\n\t\t\t\t\t\t\tr_type_link_offset (core->anal->sdb_types, type, addr);\n\t\t\t\t\t\t\tr_anal_hint_set_offset (core->anal, addr, otype);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!otype) {\n\t\t\t\t\t\teprintf (\"wrong type for opcode offset\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tr_list_free (otypes);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_anal_op_fini (&op);\n\t\t\tfree (type);\n\t\t} break;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_aht);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nstatic void agraph_print_node_gml(RANode *n, void *user) {\n\tr_cons_printf (\"  node [\\n\"\n\t\t\"    id  %d\\n\"\n\t\t\"    label  \\\"%s\\\"\\n\"\n\t\t\"  ]\\n\", n->gnode->idx, n->title);\n}\n\nstatic void agraph_print_edge_gml(RANode *from, RANode *to, void *user) {\n\tr_cons_printf (\"  edge [\\n\"\n\t\t\"    source  %d\\n\"\n\t\t\"    target  %d\\n\"\n\t\t\"  ]\\n\", from->gnode->idx, to->gnode->idx\n\t\t);\n}\n\nstatic void agraph_print_node_dot(RANode *n, void *user) {\n\tif (R_STR_ISEMPTY (n->body)) {\n\t\tr_cons_printf (\"\\\"%s\\\" [URL=\\\"%s\\\", color=\\\"lightgray\\\", label=\\\"%s\\\"]\\n\",\n\t\t\t\tn->title, n->title, n->title);\n\t} else {\n\t\tchar *label = strdup (n->body);\n\t\t//label = r_str_replace (label, \"\\n\", \"\\\\l\", 1);\n\t\tr_cons_printf (\"\\\"%s\\\" [URL=\\\"%s\\\", color=\\\"lightgray\\\", label=\\\"%s\\\\n%s\\\"]\\n\",\n\t\t\t\tn->title, n->title, n->title, label);\n\t\tfree (label);\n\t}\n}\n\nstatic void agraph_print_node(RANode *n, void *user) {\n\tsize_t len = strlen (n->body);\n\n\tif (len > 0 && n->body[len - 1] == '\\n') {\n\t\tlen--;\n\t}\n\tchar *encbody = r_base64_encode_dyn (n->body, len);\n\tchar *cmd = r_str_newf (\"agn \\\"%s\\\" base64:%s\\n\", n->title, encbody);\n\tr_cons_print (cmd);\n\tfree (cmd);\n\tfree (encbody);\n}\n\nstatic char *getViewerPath(void) {\n\tint i;\n\tconst char *viewers[] = {\n#if __WINDOWS__\n\t\t\"explorer\",\n#else\n\t\t\"open\",\n\t\t\"geeqie\",\n\t\t\"gqview\",\n\t\t\"eog\",\n\t\t\"xdg-open\",\n#endif\n\t\tNULL\n\t};\n\tfor (i = 0; viewers[i]; i++) {\n\t\tchar *viewerPath = r_file_path (viewers[i]);\n\t\tif (viewerPath && strcmp (viewerPath, viewers[i])) {\n\t\t\treturn viewerPath;\n\t\t}\n\t\tfree (viewerPath);\n\t}\n\treturn NULL;\n}\n\nstatic char *dot_executable_path(void) {\n\tconst char *dot = \"dot\";\n\tchar *dotPath = r_file_path (dot);\n\tif (!strcmp (dotPath, dot)) {\n\t\tfree (dotPath);\n\t\tdot = \"xdot\";\n\t\tdotPath = r_file_path (dot);\n\t\tif (!strcmp (dotPath, dot)) {\n\t\t\tfree (dotPath);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\treturn dotPath;\n}\n\nstatic bool convert_dot_to_image(RCore *core, const char *dot_file, const char *save_path) {\n\tchar *dot = dot_executable_path ();\n\tbool result = false;\n\tif (!dot) {\n\t\teprintf (\"Graphviz not found\\n\");\n\t\treturn false;\n\t}\n\tconst char *ext = r_config_get (core->config, \"graph.gv.format\");\n\n\tchar *cmd = NULL;\n\tif (save_path && *save_path) {\n\t\tcmd = r_str_newf (\"!%s -T%s -o%s a.dot;\", dot, ext, save_path);\n\t} else {\n\t\tchar *viewer = getViewerPath();\n\t\tif (viewer) {\n\t\t\tcmd = r_str_newf (\"!%s -T%s -oa.%s a.dot;!%s a.%s\",\n\t\t\t\tdot, ext, ext, viewer, ext);\n\t\t\tfree (viewer);\n\t\t} else {\n\t\t\teprintf (\"Cannot find a valid picture viewer\\n\");\n\t\t\tgoto end;\n\t\t}\n\t}\n\tr_core_cmd0 (core, cmd);\n\tresult = true;\nend:\n\tfree (cmd);\n\tfree (dot);\n\treturn result;\n}\n\nstatic bool convert_dotcmd_to_image(RCore *core, char *r2_cmd, const char *save_path) {\n\tif (save_path && *save_path) {\n\t\tr_cons_printf (\"Saving to file '%s'...\\n\", save_path);\n\t\tr_cons_flush ();\n\t}\n\tr_core_cmdf (core, \"%s > a.dot\", r2_cmd); // TODO: check error here\n\treturn convert_dot_to_image (core, \"a.dot\", save_path);\n}\n\nstatic bool convert_dot_str_to_image(RCore *core, char *str, const char *save_path) {\n\tif (save_path && *save_path) {\n\t\tr_cons_printf (\"Saving to file '%s'...\\n\", save_path);\n\t\tr_cons_flush ();\n\t}\n\tif (!r_file_dump (\"a.dot\", (const unsigned char *)str, -1, false)) {\n\t\treturn false;\n\t}\n\treturn convert_dot_to_image (core, \"a.dot\", save_path);\n}\n\nstatic void agraph_print_edge_dot(RANode *from, RANode *to, void *user) {\n\tRCore *core = (RCore *)user;\n\tut64 a = r_num_math (NULL, from->title);\n\tut64 b = r_num_math (NULL, to->title);\n\tconst char *k = sdb_fmt (\"agraph.edge.0x%\"PFMT64x\"_0x%\"PFMT64x\".highlight\", a, b);\n\tif (sdb_exists (core->sdb, k)) {\n\t\tr_cons_printf (\"\\\"%s\\\" -> \\\"%s\\\" [color=cyan]\\n\", from->title, to->title);\n\t} else {\n\t\tr_cons_printf (\"\\\"%s\\\" -> \\\"%s\\\"\\n\", from->title, to->title);\n\t}\n}\n\nstatic void agraph_print_edge(RANode *from, RANode *to, void *user) {\n\tr_cons_printf (\"age \\\"%s\\\" \\\"%s\\\"\\n\", from->title, to->title);\n}\n\nstatic void cmd_agraph_node(RCore *core, const char *input) {\n\tswitch (*input) {\n\tcase ' ': { // \"agn\"\n\t\tchar *newbody = NULL;\n\t\tchar **args, *body;\n\t\tint n_args, B_LEN = strlen (\"base64:\");\n\t\tchar *color = NULL;\n\t\tinput++;\n\t\targs = r_str_argv (input, &n_args);\n\t\tif (n_args < 1 || n_args > 3) {\n\t\t\tr_cons_printf (\"Wrong arguments\\n\");\n\t\t\tr_str_argv_free (args);\n\t\t\tbreak;\n\t\t}\n\t\t// strdup cause there is double free in r_str_argv_free due to a realloc call\n\t\tif (n_args > 1) {\n\t\t\tbody = strdup (args[1]);\n\t\t\tif (strncmp (body, \"base64:\", B_LEN) == 0) {\n\t\t\t\tbody = r_str_replace (body, \"\\\\n\", \"\", true);\n\t\t\t\tnewbody = (char *)r_base64_decode_dyn (body + B_LEN, -1);\n\t\t\t\tfree (body);\n\t\t\t\tif (!newbody) {\n\t\t\t\t\teprintf (\"Cannot allocate buffer\\n\");\n\t\t\t\t\tr_str_argv_free (args);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbody = newbody;\n\t\t\t}\n\t\t\tbody = r_str_append (body, \"\\n\");\n\t\t\tif (n_args > 2) {\n\t\t\t\tRColor kolor = {0};\n\t\t\t\t(void)r_cons_pal_parse (args[2], &kolor);\n\t\t\t\tcolor = r_cons_rgb_str (NULL, -1, &kolor);\n\t\t\t}\n\t\t} else {\n\t\t\tbody = strdup (\"\");\n\t\t}\n\t\tr_agraph_add_node (core->graph, args[0], body, color);\n\t\tr_str_argv_free (args);\n\t\tfree (body);\n\t\tfree (color);\n\t\t// free newbody it's not necessary since r_str_append reallocate the space\n\t\tbreak;\n\t}\n\tcase '-': { // \"agn-\"\n\t\tchar **args;\n\t\tint n_args;\n\n\t\tinput++;\n\t\targs = r_str_argv (input, &n_args);\n\t\tif (n_args != 1) {\n\t\t\tr_cons_printf (\"Wrong arguments\\n\");\n\t\t\tr_str_argv_free (args);\n\t\t\tbreak;\n\t\t}\n\t\tr_agraph_del_node (core->graph, args[0]);\n\t\tr_str_argv_free (args);\n\t\tbreak;\n\t}\n\tcase '?':\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_agn);\n\t\tbreak;\n\t}\n}\n\nstatic bool cmd_ageh(RCore *core, const char *input) {\n\tif (!*input) {\n\t\tr_core_cmd0 (core, \"k~agraph.edge\");\n\t\treturn false;\n\t}\n\tbool add = true;\n\tif (*input == '-') {\n\t\tadd = false;\n\t\tinput++;\n\t}\n\tchar *arg = r_str_trim_dup (input + 1);\n\tchar *sp = strchr (arg, ' ');\n\tif (!sp) {\n\t\tfree (arg);\n\t\treturn false;\n\t}\n\t*sp++ = 0;\n\tut64 a = r_num_math (core->num, arg);\n\tut64 b = r_num_math (core->num, sp);\n\n\tconst char *k = sdb_fmt (\"agraph.edge.0x%\"PFMT64x\"_0x%\"PFMT64x\".highlight\", a, b);\n\tsdb_set (core->sdb, k, add? \"true\": \"\", 0);\n\tfree(arg);\n\treturn true;\n}\n\nstatic void cmd_agraph_edge(RCore *core, const char *input) {\n\tswitch (*input) {\n\tcase ' ': // \"age\"\n\tcase '-': { // \"age-\"\n\t\tRANode *u, *v;\n\t\tchar **args;\n\t\tint n_args;\n\n\t\targs = r_str_argv (input + 1, &n_args);\n\t\tif (n_args != 2) {\n\t\t\tr_cons_printf (\"Wrong arguments\\n\");\n\t\t\tr_str_argv_free (args);\n\t\t\tbreak;\n\t\t}\n\n\t\tu = r_agraph_get_node (core->graph, args[0]);\n\t\tv = r_agraph_get_node (core->graph, args[1]);\n\t\tif (!u || !v) {\n\t\t\tconst char *arg = args[u? 1: 0];\n\t\t\tr_cons_printf (\"Node %s not found!\\n\", arg);\n\t\t\tr_str_argv_free (args);\n\t\t\tbreak;\n\t\t}\n\t\tif (*input == ' ') {\n\t\t\tr_agraph_add_edge (core->graph, u, v, false);\n\t\t} else {\n\t\t\tr_agraph_del_edge (core->graph, u, v);\n\t\t}\n\t\tr_str_argv_free (args);\n\t\tbreak;\n\t}\n\tcase 'h':\n\t\tcmd_ageh (core, input + 1);\n\t\tbreak;\n\tcase '?':\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_age);\n\t\tbreak;\n\t}\n}\n\nR_API void r_core_agraph_print(RCore *core, int use_utf, const char *input) {\n\tif (use_utf != -1) {\n\t\tr_config_set_i (core->config, \"scr.utf8\", use_utf);\n\t}\n\tswitch (*input) {\n\tcase 0:\n\t\tcore->graph->can->linemode = r_config_get_i (core->config, \"graph.linemode\");\n\t\tcore->graph->can->color = r_config_get_i (core->config, \"scr.color\");\n\t\tr_agraph_set_title (core->graph, r_config_get (core->config, \"graph.title\"));\n\t\tr_agraph_print (core->graph);\n\t\tbreak;\n\tcase 't': { // \"aggt\" - tiny graph\n\t\tcore->graph->is_tiny = true;\n\t\tint e = r_config_get_i (core->config, \"graph.edges\");\n\t\tr_config_set_i (core->config, \"graph.edges\", 0);\n\t\tr_core_visual_graph (core, core->graph, NULL, false);\n\t\tr_config_set_i (core->config, \"graph.edges\", e);\n\t\tcore->graph->is_tiny = false;\n\t\tbreak;\n\t}\n\tcase 'k': // \"aggk\"\n\t{\n\t\tSdb *db = r_agraph_get_sdb (core->graph);\n\t\tif (db) {\n\t\t\tchar *o = sdb_querys (db, \"null\", 0, \"*\");\n\t\t\tif (o) {\n\t\t\t\tr_cons_print (o);\n\t\t\t\tfree (o);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'v': // \"aggv\"\n\tcase 'i': // \"aggi\" - open current core->graph in interactive mode\n\t{\n\t\tRANode *ran = r_agraph_get_first_node (core->graph);\n\t\tif (ran) {\n\t\t\tut64 oseek = core->offset;\n\t\t\tr_agraph_set_title (core->graph, r_config_get (core->config, \"graph.title\"));\n\t\t\tr_agraph_set_curnode (core->graph, ran);\n\t\t\tcore->graph->force_update_seek = true;\n\t\t\tcore->graph->need_set_layout = true;\n\t\t\tcore->graph->layout = r_config_get_i (core->config, \"graph.layout\");\n\t\t\tbool ov = r_cons_is_interactive ();\n\t\t\tcore->graph->need_update_dim = true;\n\t\t\tint update_seek = r_core_visual_graph (core, core->graph, NULL, true);\n\t\t\tr_config_set_i (core->config, \"scr.interactive\", ov);\n\t\t\tr_cons_show_cursor (true);\n\t\t\tr_cons_enable_mouse (false);\n\t\t\tif (update_seek != -1) {\n\t\t\t\tr_core_seek (core, oseek, false);\n\t\t\t}\n\t\t} else {\n\t\t\teprintf (\"This graph contains no nodes\\n\");\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'd': { // \"aggd\" - dot format\n\t\tconst char *font = r_config_get (core->config, \"graph.font\");\n\t\tr_cons_printf (\"digraph code {\\nrankdir=LR;\\noutputorder=edgesfirst\\ngraph [bgcolor=azure];\\n\"\n\t\t\t\"edge [arrowhead=normal, color=\\\"#3030c0\\\" style=bold weight=2];\\n\"\n\t\t\t\"node [fillcolor=white, style=filled shape=box \"\n\t\t\t\"fontname=\\\"%s\\\" fontsize=\\\"8\\\"];\\n\",\n\t\t\tfont);\n\t\tr_agraph_foreach (core->graph, agraph_print_node_dot, core);\n\t\tr_agraph_foreach_edge (core->graph, agraph_print_edge_dot, core);\n\t\tr_cons_printf (\"}\\n\");\n\t\tbreak;\n\t}\n\tcase '*': // \"agg*\" -\n\t\tr_agraph_foreach (core->graph, agraph_print_node, core);\n\t\tr_agraph_foreach_edge (core->graph, agraph_print_edge, core);\n\t\tbreak;\n\tcase 'J':\n\tcase 'j': {\n\t\tPJ *pj = pj_new ();\n\t\tif (!pj) {\n\t\t\treturn;\n\t\t}\n\t\tpj_o (pj);\n\t\tpj_k (pj, \"nodes\");\n\t\tpj_a (pj);\n\t\tr_agraph_print_json (core->graph, pj);\n\t\tpj_end (pj);\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t} break;\n\tcase 'g':\n\t\tr_cons_printf (\"graph\\n[\\n\"\n\t\t\t       \"hierarchic 1\\n\"\n\t\t\t       \"label \\\"\\\"\\n\"\n\t\t\t       \"directed 1\\n\");\n\t\tr_agraph_foreach (core->graph, agraph_print_node_gml, NULL);\n\t\tr_agraph_foreach_edge (core->graph, agraph_print_edge_gml, NULL);\n\t\tr_cons_print (\"]\\n\");\n\t\tbreak;\n\tcase 'w': { // \"aggw\"\n\t\tif (r_config_get_i (core->config, \"graph.web\")) {\n\t\t\tr_core_cmd0 (core, \"=H /graph/\");\n\t\t} else {\n\t\t\tconst char *filename = r_str_trim_head_ro (input + 1);\n\t\t\tconvert_dotcmd_to_image (core, \"aggd\", filename);\n\t\t}\n\t\tbreak;\n\t}\n\tdefault:\n\t\teprintf (\"Usage: see ag?\\n\");\n\t}\n}\n\nstatic void print_graph_agg(RGraph /*RGraphNodeInfo*/ *graph) {\n\tRGraphNodeInfo *print_node;\n\tRGraphNode *node, *target;\n\tRListIter *it, *edge_it;\n\tr_list_foreach (graph->nodes, it, node) {\n\t\tchar *encbody;\n\t\tint len;\n\t\tprint_node = node->data;\n\t\tif (R_STR_ISNOTEMPTY (print_node->body)) {\n\t\t\tlen = strlen (print_node->body);\n\n\t\t\tif (len > 0 && print_node->body[len - 1] == '\\n') {\n\t\t\t\tlen--;\n\t\t\t}\n\t\t\tencbody = r_base64_encode_dyn (print_node->body, len);\n\t\t\tr_cons_printf (\"agn \\\"%s\\\" base64:%s\\n\", print_node->title, encbody);\n\t\t\tfree (encbody);\n\t\t} else {\n\t\t\tr_cons_printf (\"agn \\\"%s\\\"\\n\", print_node->title);\n\t\t}\n\t}\n\tr_list_foreach (graph->nodes, it, node) {\n\t\tprint_node = node->data;\n\t\tr_list_foreach (node->out_nodes, edge_it, target) {\n\t\t\tRGraphNodeInfo *to = target->data;\n\t\t\tr_cons_printf (\"age \\\"%s\\\" \\\"%s\\\"\\n\", print_node->title, to->title);\n\t\t}\n\t}\n}\n\nstatic char *print_graph_dot(RCore *core, RGraph /*<RGraphNodeInfo>*/ *graph) {\n\tconst char *font = r_config_get (core->config, \"graph.font\");\n\tchar *node_properties = r_str_newf (\"fontname=\\\"%s\\\"\", font);\n\tchar *result = r_graph_drawable_to_dot (graph, node_properties, NULL);\n\tfree (node_properties);\n\treturn result;\n}\n\nstatic void r_core_graph_print(RCore *core, RGraph /*<RGraphNodeInfo>*/ *graph, int use_utf, bool use_offset, const char *input) {\n\tRAGraph *agraph = NULL;\n\tRListIter *it;\n\tRListIter *edge_it;\n\tRGraphNode *graphNode, *target;\n\tRGraphNodeInfo *print_node;\n\tif (use_utf != -1) {\n\t\tr_config_set_i (core->config, \"scr.utf8\", use_utf);\n\t}\n\tswitch (*input) {\n\tcase 0:\n\tcase 't':\n\tcase 'k':\n\tcase 'v':\n\tcase 'i': {\n\t\tagraph = create_agraph_from_graph (graph);\n\t\tswitch (*input) {\n\t\tcase 0:\n\t\t\tagraph->can->linemode = r_config_get_i (core->config, \"graph.linemode\");\n\t\t\tagraph->can->color = r_config_get_i (core->config, \"scr.color\");\n\t\t\tr_agraph_set_title (agraph,\n\t\t\t\tr_config_get (core->config, \"graph.title\"));\n\t\t\tr_agraph_print (agraph);\n\t\t\tbreak;\n\t\tcase 't': { // \"ag_t\" - tiny graph\n\t\t\tagraph->is_tiny = true;\n\t\t\tint e = r_config_get_i (core->config, \"graph.edges\");\n\t\t\tr_config_set_i (core->config, \"graph.edges\", 0);\n\t\t\tr_core_visual_graph (core, agraph, NULL, false);\n\t\t\tr_config_set_i (core->config, \"graph.edges\", e);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'k': // \"ag_k\"\n\t\t{\n\t\t\tSdb *db = r_agraph_get_sdb (agraph);\n\t\t\tchar *o = sdb_querys (db, \"null\", 0, \"*\");\n\t\t\tr_cons_print (o);\n\t\t\tfree (o);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'v': // \"ag_v\"\n\t\tcase 'i': // \"ag_i\" - open current core->graph in interactive mode\n\t\t{\n\t\t\tRANode *ran = r_agraph_get_first_node (agraph);\n\t\t\tif (ran) {\n\t\t\t\tut64 oseek = core->offset;\n\t\t\t\tr_agraph_set_title (agraph, r_config_get (core->config, \"graph.title\"));\n\t\t\t\tr_agraph_set_curnode (agraph, ran);\n\t\t\t\tagraph->force_update_seek = true;\n\t\t\t\tagraph->need_set_layout = true;\n\t\t\t\tagraph->layout = r_config_get_i (core->config, \"graph.layout\");\n\t\t\t\tbool ov = r_cons_is_interactive ();\n\t\t\t\tagraph->need_update_dim = true;\n\t\t\t\tint update_seek = r_core_visual_graph (core, agraph, NULL, true);\n\t\t\t\tr_config_set_i (core->config, \"scr.interactive\", ov);\n\t\t\t\tr_cons_show_cursor (true);\n\t\t\t\tr_cons_enable_mouse (false);\n\t\t\t\tif (update_seek != -1) {\n\t\t\t\t\tr_core_seek (core, oseek, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"This graph contains no nodes\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'd': { // \"ag_d\" - dot format\n\t\tchar *dot_text = print_graph_dot (core, graph);\n\t\tif (dot_text) {\n\t\t\tr_cons_print (dot_text);\n\t\t\tfree (dot_text);\n\t\t}\n\t\tbreak;\n\t}\n\tcase '*': // \"ag_*\" -\n\t\tprint_graph_agg (graph);\n\t\tbreak;\n\tcase 'J':\n\tcase 'j': {\n\t\tPJ *pj = pj_new ();\n\t\tif (pj) {\n\t\t\tr_graph_drawable_to_json (graph, pj, use_offset);\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t}\n\t} break;\n\tcase 'g':\n\t\tr_cons_printf (\"graph\\n[\\n\"\n\t\t\t       \"hierarchic 1\\n\"\n\t\t\t       \"label \\\"\\\"\\n\"\n\t\t\t       \"directed 1\\n\");\n\t\tr_list_foreach (graph->nodes, it, graphNode) {\n\t\t\tprint_node = graphNode->data;\n\t\t\tr_cons_printf (\"  node [\\n\"\n\t\t\t\t       \"    id  %d\\n\"\n\t\t\t\t       \"    label  \\\"%s\\\"\\n\"\n\t\t\t\t       \"  ]\\n\",\n\t\t\t\tgraphNode->idx, print_node->title);\n\t\t}\n\t\tr_list_foreach (graph->nodes, it, graphNode) {\n\t\t\tprint_node = graphNode->data;\n\t\t\tr_list_foreach (graphNode->out_nodes, edge_it, target) {\n\t\t\t\tr_cons_printf (\"  edge [\\n\"\n\t\t\t\t\t       \"    source  %d\\n\"\n\t\t\t\t\t       \"    target  %d\\n\"\n\t\t\t\t\t       \"  ]\\n\",\n\t\t\t\t\tgraphNode->idx, target->idx);\n\t\t\t}\n\t\t}\n\t\tr_cons_print (\"]\\n\");\n\t\tbreak;\n\tcase 'w': { // \"ag_w\"\n\t\tconst char *filename = r_str_trim_head_ro (input + 1);\n\t\tchar *dot_text = print_graph_dot (core, graph);\n\t\tif (dot_text) {\n\t\t\tconvert_dot_str_to_image (core, dot_text, filename);\n\t\t\tfree (dot_text);\n\t\t}\n\t\tbreak;\n\t}\n\tdefault:\n\t\teprintf (\"Usage: see ag?\\n\");\n\t}\n}\n\nR_API void cmd_agfb(RCore *core) {\n\tconst int c = r_config_get_b (core->config, \"scr.color\");\n\tr_config_set_i (core->config, \"scr.color\", 0);\n\tr_cons_push ();\n\tr_core_visual_graph (core, NULL, NULL, false);\n\tr_config_set_i (core->config, \"scr.color\", c);\n\tchar *s = strdup (r_cons_singleton()->context->buffer);\n\tr_cons_pop ();\n\tcmd_agfb2 (core, s);\n\tfree (s);\n}\n\nR_API void cmd_agfb3(RCore *core, const char *s, int x, int y) {\n\tint h, w = r_str_size (s, &h);\n\tRConsPixel *p = r_cons_pixel_new (w, h);\n\tr_cons_pixel_sets (p, 0, 0, s);\n\tr_cons_pixel_flush (p, x, y);\n\tR_FREE (p);\n}\n\nR_API void cmd_agfb2(RCore *core, const char *s) {\n\tint h, w = r_str_size (s, &h);\n\tRConsPixel *p = r_cons_pixel_new (w, h);\n\tr_cons_pixel_sets (p, 0, 0, s);\n\tchar *pix = r_cons_pixel_drain (p);\n\tr_cons_printf (\"%s %c\", pix, 10);\n\tfree (pix);\n}\n\nstatic void cmd_anal_graph(RCore *core, const char *input) {\n\tcore->graph->show_node_titles = r_config_get_i (core->config, \"graph.ntitles\");\n\tr_cons_enable_highlight (false);\n\tswitch (input[0]) {\n\tcase 'f': // \"agf\"\n\t\tswitch (input[1]) {\n\t\tcase 0: // \"agf\"\n\t\t\tr_core_visual_graph (core, NULL, NULL, false);\n\t\t\tbreak;\n\t\tcase 'b': // \"agfb\" // braile\n\t\t\tcmd_agfb (core);\n\t\t\tbreak;\n\t\tcase ' ': { // \"agf \"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tr_core_visual_graph (core, NULL, fcn, false);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'v': // \"agfv\"\n\t\t\teprintf (\"\\rRendering graph...\\n\");\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_ROOT);\n\t\t\tif (fcn) {\n\t\t\t\tr_core_visual_graph (core, NULL, fcn, 1);\n\t\t\t}\n\t\t\tr_cons_enable_mouse (false);\n\t\t\tr_cons_show_cursor (true);\n\t\t\tbreak;\n\t\tcase 't': { // \"agft\" - tiny graph\n\t\t\tint e = r_config_get_i (core->config, \"graph.edges\");\n\t\t\tr_config_set_i (core->config, \"graph.edges\", 0);\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tr_core_visual_graph (core, NULL, fcn, 2);\n\t\t\tr_config_set_i (core->config, \"graph.edges\", e);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 'd': // \"agfd\"\n\t\t\tif (input[2] == 'm') { // \"agfdm\"\n\t\t\t\tr_core_anal_graph (core, r_num_math (core->num, input + 3),\n\t\t\t\t\tR_CORE_ANAL_GRAPHLINES);\n\t\t\t} else {\n\t\t\t\tr_core_anal_graph (core, r_num_math (core->num, input + 2),\n\t\t\t\t\tR_CORE_ANAL_GRAPHBODY);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'j': // \"agfj\"\n\t\t\tr_core_anal_graph (core, r_num_math (core->num, input + 2), R_CORE_ANAL_JSON);\n\t\t\tbreak;\n\t\tcase 'J': { // \"agfJ\"\n\t\t\t// Honor asm.graph=false in json as well\n\t\t\tRConfigHold *hc = r_config_hold_new (core->config);\n\t\t\tr_config_hold (hc, \"asm.offset\", NULL);\n\t\t\tconst bool o_graph_offset = r_config_get_i (core->config, \"graph.offset\");\n\t\t\tr_config_set_i (core->config, \"asm.offset\", o_graph_offset);\n\t\t\tr_core_anal_graph (core, r_num_math (core->num, input + 2),\n\t\t\t\tR_CORE_ANAL_JSON | R_CORE_ANAL_JSON_FORMAT_DISASM);\n\t\t\tr_config_hold_restore (hc);\n\t\t\tr_config_hold_free (hc);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'g':{ // \"agfg\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tr_core_print_bb_gml (core, fcn);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 'k':{ // \"agfk\"\n\t\t\tr_core_cmdf (core, \"ag-; .agf* @ %\"PFMT64u\"; aggk\", core->offset);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase '*':{// \"agf*\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tr_core_print_bb_custom (core, fcn);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 'w': // \"agfw\"\n\t\t\tif (r_config_get_i (core->config, \"graph.web\")) {\n\t\t\t\tr_core_cmd0 (core, \"=H /graph/\");\n\t\t\t} else {\n\t\t\t\tchar *cmdargs = r_str_newf (\"agfd @ 0x%\"PFMT64x, core->offset);\n\t\t\t\tconvert_dotcmd_to_image (core, cmdargs, input + 2);\n\t\t\t\tfree (cmdargs);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\teprintf (\"Usage: see ag?\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase '-': // \"ag-\"\n\t\tr_agraph_reset (core->graph);\n\t\tbreak;\n\tcase 'n': // \"agn\"\n\t\tcmd_agraph_node (core, input + 1);\n\t\tbreak;\n\tcase 'e': // \"age\"\n\t\tcmd_agraph_edge (core, input + 1);\n\t\tbreak;\n\tcase 'g': // \"agg\"\n\t\tr_core_agraph_print (core, -1, input + 1);\n\t\tbreak;\n\tcase 's': // \"ags\"\n\t\tr_core_anal_graph (core, r_num_math (core->num, input + 1), 0);\n\t\tbreak;\n\tcase 'C': // \"agC\"\n\t\tswitch (input[1]) {\n\t\tcase 'v':\n\t\tcase 't':\n\t\tcase 'k':\n\t\tcase 'w':\n\t\tcase ' ':\n\t\tcase 0: {\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmdf (core, \"ag-; .agC*;\");\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 'J':\n\t\tcase 'j':\n\t\t\tr_core_anal_callgraph (core, UT64_MAX, R_GRAPH_FORMAT_JSON);\n\t\t\tbreak;\n\t\tcase 'g':\n\t\t\tr_core_anal_callgraph (core, UT64_MAX, R_GRAPH_FORMAT_GML);\n\t\t\tbreak;\n\t\tcase 'd':\n\t\t\tr_core_anal_callgraph (core, UT64_MAX, R_GRAPH_FORMAT_DOT);\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tr_core_anal_callgraph (core, UT64_MAX, R_GRAPH_FORMAT_CMD);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\teprintf (\"Usage: see ag?\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'r': // \"agr\" references graph\n\t\tswitch (input[1]) {\n\t\tcase '*': {\n\t\t\tr_core_anal_coderefs (core, core->offset);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault: {\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmdf (core, \"ag-; .agr* @ %\"PFMT64u\";\", core->offset);\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'R': // \"agR\" global refs\n\t\tswitch (input[1]) {\n\t\tcase '*': {\n\t\t\tut64 from = r_config_get_i (core->config, \"graph.from\");\n\t\t\tut64 to = r_config_get_i (core->config, \"graph.to\");\n\t\t\tRListIter *it;\n\t\t\tRAnalFunction *fcn;\n\t\t\tr_list_foreach (core->anal->fcns, it, fcn) {\n\t\t\t\tif ((from == UT64_MAX && to == UT64_MAX) || R_BETWEEN (from, fcn->addr, to)) {\n\t\t\t\t\tr_core_anal_coderefs (core, fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault: {\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmdf (core, \"ag-; .agR*;\");\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'x': {// \"agx\" cross refs\n\t\tRGraph *graph = r_core_anal_codexrefs (core, core->offset);\n\t\tif (!graph) {\n\t\t\teprintf (\"Couldn't create graph\");\n\t\t\tbreak;\n\t\t}\n\t\tr_core_graph_print (core, graph, -1, true, input + 1);\n\t\tr_graph_free (graph);\n\t\tbreak;\n\t}\n\tcase 'i': { // \"agi\" import graph\n\t\tRGraph *graph = r_core_anal_importxrefs (core);\n\t\tif (!graph) {\n\t\t\teprintf (\"Couldn't create graph\");\n\t\t\tbreak;\n\t\t}\n\t\tr_core_graph_print (core, graph, -1, true, input + 1);\n\t\tr_graph_free (graph);\n\t\tbreak;\n\t}\n\tcase 'c': // \"agc\"\n\t\tswitch (input[1]) {\n\t\tcase 'v':\n\t\tcase 't':\n\t\tcase 'k':\n\t\tcase 'w':\n\t\tcase ' ': {\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmdf (core, \"ag-; .agc* @ %\" PFMT64u \"; agg%s;\", core->offset, input + 1);\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 0:\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmd0 (core, \"ag-; .agc* $$; agg;\");\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\tcase 'g': {\n\t\t\tr_core_anal_callgraph (core, core->offset, R_GRAPH_FORMAT_GMLFCN);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'd': {\n\t\t\tr_core_anal_callgraph (core, core->offset, R_GRAPH_FORMAT_DOT);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'J':\n\t\tcase 'j': {\n\t\t\tr_core_anal_callgraph (core, core->offset, R_GRAPH_FORMAT_JSON);\n\t\t\tbreak;\n\t\t}\n\t\tcase '*': {\n\t\t\tr_core_anal_callgraph (core, core->offset, R_GRAPH_FORMAT_CMD);\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\teprintf (\"Usage: see ag?\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"agj\" alias for agfj\n\t\tr_core_cmdf (core, \"agfj%s\", input + 1);\n\t\tbreak;\n\tcase 'J': // \"agJ\" alias for agfJ\n\t\tr_core_cmdf (core, \"agfJ%s\", input + 1);\n\t\tbreak;\n\tcase 'k': // \"agk\" alias for agfk\n\t\tr_core_cmdf (core, \"agfk%s\", input + 1);\n\t\tbreak;\n\tcase 'l': // \"agl\"\n\t\tr_core_anal_graph (core, r_num_math (core->num, input + 1), R_CORE_ANAL_GRAPHLINES);\n\t\tbreak;\n\tcase 'a': // \"aga\"\n\t\tswitch (input[1]) {\n\t\tcase '*': {\n\t\t\tr_core_anal_datarefs (core, core->offset);\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault:\n\t\t\tr_core_cmdf (core, \"ag-; .aga* @ %\"PFMT64u\";\", core->offset);\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'A': // \"agA\" global data refs\n\t\tswitch (input[1]) {\n\t\tcase '*': {\n\t\t\tut64 from = r_config_get_i (core->config, \"graph.from\");\n\t\t\tut64 to = r_config_get_i (core->config, \"graph.to\");\n\t\t\tRListIter *it;\n\t\t\tRAnalFunction *fcn;\n\t\t\tr_list_foreach (core->anal->fcns, it, fcn) {\n\t\t\t\tif ((from == UT64_MAX && to == UT64_MAX) || R_BETWEEN (from, fcn->addr, to)) {\n\t\t\t\t\tr_core_anal_datarefs (core, fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault:\n\t\t\tr_core_cmdf (core, \"ag-; .agA*;\");\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'd': {// \"agd\"\n\t        int diff_opt = R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF;\n\t\tswitch (input[1]) {\n\t\tcase 'j': {\n\t\t\t\t  ut64 addr = input[2] ? r_num_math (core->num, input + 2) : core->offset;\n\t\t\t\t  r_core_gdiff_fcn (core, addr, core->offset);\n\t\t\t\t  r_core_anal_graph (core, addr, diff_opt | R_CORE_ANAL_JSON);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase 'J': {\n\t\t\t\t  ut64 addr = input[2] ? r_num_math (core->num, input + 2) : core->offset;\n\t\t\t\t  r_core_gdiff_fcn (core, addr, core->offset);\n\t\t\t\t  r_core_anal_graph (core, addr, diff_opt | R_CORE_ANAL_JSON | R_CORE_ANAL_JSON_FORMAT_DISASM);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase '*': {\n\t\t\t\t  ut64 addr = input[2] ? r_num_math (core->num, input + 2) : core->offset;\n\t\t\t\t  r_core_gdiff_fcn (core, addr, core->offset);\n\t\t\t\t  r_core_anal_graph (core, addr, diff_opt | R_CORE_ANAL_STAR);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase ' ':\n\t\tcase 0:\n\t\tcase 't':\n\t\tcase 'k':\n\t\tcase 'v':\n\t\tcase 'g': {\n\t\t\t\t  ut64 addr = input[2]? r_num_math (core->num, input + 2): core->offset;\n\t\t\t\t  r_core_cmdf (core, \"ag-; .agd* @ %\"PFMT64u\"; agg%s;\", addr, input + 1);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase 'd': {\n\t\t\t\t  ut64 addr = input[2]? r_num_math (core->num, input + 2): core->offset;\n\t\t\t\t  r_core_gdiff_fcn (core, addr, core->offset);\n\t\t\t\t  r_core_anal_graph (core, addr, diff_opt);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase 'w': {\n\t\t\t\t  char *cmdargs = r_str_newf (\"agdd 0x%\"PFMT64x, core->offset);\n\t\t\t\t  convert_dotcmd_to_image (core, cmdargs, input + 2);\n\t\t\t\t  free (cmdargs);\n\t\t\t\t  break;\n\t\t\t  }\n\t\t}\n\t\tbreak;\n        }\n\tcase 'v': // \"agv\" alias for \"agfv\"\n\t\tr_core_cmdf (core, \"agfv%s\", input + 1);\n\t\tbreak;\n\tcase 'w':// \"agw\"\n\t\tif (r_config_get_i (core->config, \"graph.web\")) {\n\t\t\tr_core_cmd0 (core, \"=H /graph/\");\n\t\t} else {\n\t\t\tchar *cmdargs = r_str_newf (\"agfd @ 0x%\"PFMT64x, core->offset);\n\t\t\tconvert_dotcmd_to_image (core, cmdargs, input + 1);\n\t\t\tfree (cmdargs);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ag);\n\t\tbreak;\n\t}\n}\n\nR_API int r_core_anal_refs(RCore *core, const char *input) {\n\tconst bool cfg_debug = r_config_get_b (core->config, \"cfg.debug\");\n\tut64 from, to;\n\tint rad;\n\tPJ *pj = NULL;\n\tif (*input == '?') {\n\t\tr_core_cmd_help (core, help_msg_aar);\n\t\treturn 0;\n\t}\n\n\tif (*input == 'j' || *input == '*') {\n\t\trad = *input;\n\t\tinput++;\n\t\tif (rad == 'j') {\n\t\t\tpj = r_core_pj_new (core);\n\t\t\tif (!pj) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\trad = 0;\n\t}\n\n\tfrom = to = 0;\n\tchar *ptr = r_str_trim_dup (input);\n\tint n = r_str_word_set0 (ptr);\n\tif (!n) {\n\t\t// get boundaries of current memory map, section or io map\n\t\tif (cfg_debug) {\n\t\t\tRDebugMap *map = r_debug_map_get (core->dbg, core->offset);\n\t\t\tif (map) {\n\t\t\t\tfrom = map->addr;\n\t\t\t\tto = map->addr_end;\n\t\t\t}\n\t\t} else {\n\t\t\tRList *list = r_core_get_boundaries_prot (core, R_PERM_X, NULL, \"anal\");\n\t\t\tRListIter *iter;\n\t\t\tRIOMap* map;\n\t\t\tif (!list) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (rad == 'j') {\n\t\t\t\tpj_o (pj);\n\t\t\t}\n\t\t\tr_list_foreach (list, iter, map) {\n\t\t\t\tfrom = r_io_map_begin (map);\n\t\t\t\tto = r_io_map_end (map);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!from && !to) {\n\t\t\t\t\teprintf (\"Cannot determine xref search boundaries\\n\");\n\t\t\t\t} else if (to - from > UT32_MAX) {\n\t\t\t\t\teprintf (\"Skipping huge range\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tif (rad == 'j') {\n\t\t\t\t\t\tpj_ki (pj, \"mapid\", map->id);\n\t\t\t\t\t\tpj_ko (pj, \"refs\");\n\t\t\t\t\t}\n\t\t\t\t\tr_core_anal_search_xrefs (core, from, to, pj, rad);\n\t\t\t\t\tif (rad == 'j') {\n\t\t\t\t\t\tpj_end (pj);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (rad == 'j') {\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t\tfree (ptr);\n\t\t\tr_list_free (list);\n\t\t\treturn 1;\n\t\t}\n\t} else if (n == 1) {\n\t\tfrom = core->offset;\n\t\tto = core->offset + r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t} else {\n\t\teprintf (\"Invalid number of arguments\\n\");\n\t}\n\tfree (ptr);\n\n\tif (from == UT64_MAX && to == UT64_MAX) {\n\t\treturn false;\n\t}\n\tif (!from && !to) {\n\t\treturn false;\n\t}\n\tif (to - from > r_io_size (core->io)) {\n\t\treturn false;\n\t}\n\tif (rad == 'j') {\n\t\tpj_o (pj);\n\t}\n\tbool res = r_core_anal_search_xrefs (core, from, to, pj, rad);\n\tif (rad == 'j') {\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\treturn res;\n}\n\nstatic const char *oldstr = NULL;\n\nstatic int compute_coverage(RCore *core) {\n\tRListIter *iter;\n\tRAnalFunction *fcn;\n\tint cov = 0;\n\tcov += r_meta_get_size(core->anal, R_META_TYPE_DATA);\n\tRIOBank *bank = r_io_bank_get (core->io, core->io->bank);\n\tif (bank) {\n\t\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\t\tRIOMapRef *mapref;\n\t\t\tRListIter *ator;\n\t\t\tr_list_foreach (bank->maprefs, ator, mapref) {\n\t\t\t\tRIOMap *map = r_io_map_get (core->io, mapref->id);\n\t\t\t\tif (map->perm & R_PERM_X) {\n\t\t\t\t\tut64 section_end = r_io_map_end (map);\n\t\t\t\t\tut64 s = r_anal_function_realsize (fcn);\n\t\t\t\t\tif (fcn->addr >= r_io_map_from (map) && (fcn->addr + s) < section_end) {\n\t\t\t\t\t\tcov += s;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn cov;\n}\n\nstatic int compute_code (RCore* core) {\n\tint code = 0;\n\tRIOBank *bank = r_io_bank_get (core->io, core->io->bank);\n\tif (bank) {\n\t\tRIOMapRef *mapref;\n\t\tRListIter *ator;\n\t\tr_list_foreach (bank->maprefs, ator, mapref) {\n\t\t\tRIOMap *map = r_io_map_get (core->io, mapref->id);\n\t\t\tif (map->perm & R_PERM_X) {\n\t\t\t\tcode += r_io_map_size (map);\n\t\t\t}\n\t\t}\n\t}\n\treturn code;\n}\n\nstatic int compute_calls(RCore *core) {\n\tRListIter *iter;\n\tRAnalFunction *fcn;\n\tRList *xrefs;\n\tint cov = 0;\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\txrefs = r_anal_function_get_xrefs (fcn);\n\t\tif (xrefs) {\n\t\t\tcov += r_list_length (xrefs);\n\t\t\tr_list_free (xrefs);\n\t\t\txrefs = NULL;\n\t\t}\n\t}\n\treturn cov;\n}\n\nstatic void r_core_anal_info (RCore *core, const char *input) {\n\tint fcns = r_list_length (core->anal->fcns);\n\tint strs = r_flag_count (core->flags, \"str.*\");\n\tint syms = r_flag_count (core->flags, \"sym.*\");\n\tint imps = r_flag_count (core->flags, \"sym.imp.*\");\n\tint code = compute_code (core);\n\tint covr = compute_coverage (core);\n\tint call = compute_calls (core);\n\tint xrfs = r_anal_xrefs_count (core->anal);\n\tint cvpc = (code > 0)? (int)((covr * 100.0) / code): 0;\n\tif (*input == 'j') {\n\t\tPJ *pj = pj_new ();\n\t\tif (!pj) {\n\t\t\treturn;\n\t\t}\n\t\tpj_o (pj);\n\t\tpj_ki (pj, \"fcns\", fcns);\n\t\tpj_ki (pj, \"xrefs\", xrfs);\n\t\tpj_ki (pj, \"calls\", call);\n\t\tpj_ki (pj, \"strings\", strs);\n\t\tpj_ki (pj, \"symbols\", syms);\n\t\tpj_ki (pj, \"imports\", imps);\n\t\tpj_ki (pj, \"covrage\", covr);\n\t\tpj_ki (pj, \"codesz\", code);\n\t\tpj_ki (pj, \"percent\", cvpc);\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t} else {\n\t\tr_cons_printf (\"fcns    %d\\n\", fcns);\n\t\tr_cons_printf (\"xrefs   %d\\n\", xrfs);\n\t\tr_cons_printf (\"calls   %d\\n\", call);\n\t\tr_cons_printf (\"strings %d\\n\", strs);\n\t\tr_cons_printf (\"symbols %d\\n\", syms);\n\t\tr_cons_printf (\"imports %d\\n\", imps);\n\t\tr_cons_printf (\"covrage %d\\n\", covr);\n\t\tr_cons_printf (\"codesz  %d\\n\", code);\n\t\tr_cons_printf (\"percent %d%%\\n\", cvpc);\n\t}\n}\n\nstatic void cmd_anal_aad(RCore *core, const char *input) {\n\tRListIter *iter;\n\tRAnalRef *ref;\n\tRList *list = r_list_newf (NULL);\n\tr_anal_xrefs_from (core->anal, list, \"xref\", R_ANAL_REF_TYPE_DATA, UT64_MAX);\n\tr_list_foreach (list, iter, ref) {\n\t\tif (r_io_is_valid_offset (core->io, ref->addr, false)) {\n\t\t\tr_core_anal_fcn (core, ref->at, ref->addr, R_ANAL_REF_TYPE_NULL, 1);\n\t\t}\n\t}\n\tr_list_free (list);\n}\n\nstatic bool archIsThumbable(RCore *core) {\n\tRAsm *as = core ? core->rasm : NULL;\n\tif (as && as->cur && as->bits <= 32 && as->cur->name) {\n\t\treturn strstr (as->cur->name, \"arm\");\n\t}\n\treturn false;\n}\n\nstatic void _CbInRangeAav(RCore *core, ut64 from, ut64 to, int vsize, void *user) {\n\tbool asterisk = user != NULL;\n\tint arch_align = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_ALIGN);\n\tbool vinfun = r_config_get_i (core->config, \"anal.vinfun\");\n\tint searchAlign = r_config_get_i (core->config, \"search.align\");\n\tint align = (searchAlign > 0)? searchAlign: arch_align;\n\tif (align > 1) {\n\t\tif ((from % align) || (to % align)) {\n\t\t\tbool itsFine = false;\n\t\t\tif (archIsThumbable (core)) {\n\t\t\t\tif ((from & 1) || (to & 1)) {\n\t\t\t\t\titsFine = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!itsFine) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (core->anal->verbose) {\n\t\t\t\teprintf (\"Warning: aav: false positive in 0x%08\"PFMT64x\"\\n\", from);\n\t\t\t}\n\t\t}\n\t}\n\tif (!vinfun) {\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, from, -1);\n\t\tif (fcn) {\n\t\t\treturn;\n\t\t}\n\t}\n\tif (asterisk) {\n\t\tr_cons_printf (\"ax 0x%\"PFMT64x \" 0x%\"PFMT64x \"\\n\", to, from);\n\t\tr_cons_printf (\"Cd %d @ 0x%\"PFMT64x \"\\n\", vsize, from);\n\t\tr_cons_printf (\"f+ aav.0x%08\"PFMT64x \"= 0x%08\"PFMT64x, to, to);\n\t} else {\n\t\tr_anal_xrefs_set (core->anal, from, to, R_ANAL_REF_TYPE_NULL);\n\t\t// r_meta_set (core->anal, 'd', from, from + vsize, NULL);\n\t\tr_core_cmdf (core, \"Cd %d @ 0x%\"PFMT64x \"\\n\", vsize, from);\n\t\tif (!r_flag_get_at (core->flags, to, false)) {\n\t\t\tchar *name = r_str_newf (\"aav.0x%08\"PFMT64x, to);\n\t\t\tr_flag_set (core->flags, name, to, vsize);\n\t\t\tfree (name);\n\t\t}\n\t}\n}\n\nstatic void cmd_anal_aaw(RCore *core, const char *input) {\n\tRIntervalTreeIter it;\n\tRAnalMetaItem *item;\n\tr_interval_tree_foreach (&core->anal->meta, it, item) {\n\t\tRIntervalNode *node = r_interval_tree_iter_get (&it);\n\t\tut64 size = r_meta_item_size (node->start, node->end);\n\t\tif (item->type == R_META_TYPE_DATA && size == core->anal->bits / 8) {\n\t\t\tut8 buf[8] = {0};\n\t\t\tr_io_read_at (core->io, node->start, buf, 8);\n\t\t\tut64 n = r_read_ble (buf, core->print->big_endian, core->anal->bits);\n\t\t\tRFlagItem *fi = r_flag_get_at (core->flags, n, false);\n\t\t\tif (fi) {\n\t\t\t\tchar *fn = r_str_newf (\"r.%s\", fi->name);\n\t\t\t\tr_flag_set (core->flags, fn, node->start, true);\n\t\t\t\tfree (fn);\n\t\t\t} else if (core->anal->verbose) {\n\t\t\t\teprintf (\"Unknown pointer 0x%\"PFMT64x\" at 0x%\"PFMT64x\"\\n\", n, (ut64)node->start);\n\t\t\t}\n\t\t}\n\t}\n}\n\nstatic void cmd_anal_aav(RCore *core, const char *input) {\n#define seti(x,y) r_config_set_i(core->config, x, y);\n#define geti(x) r_config_get_i(core->config, x);\n\tr_return_if_fail (*input == 'v');\n\tut64 o_align = geti (\"search.align\");\n\tconst char *analin = r_config_get (core->config, \"anal.in\");\n\tchar *tmp = strdup (analin);\n\tbool asterisk = strchr (input, '*');\n\tconst bool is_debug = r_config_get_i (core->config, \"cfg.debug\");\n\tint archAlign = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_ALIGN);\n\tseti (\"search.align\", archAlign);\n\tr_config_set (core->config, \"anal.in\", \"io.maps.x\");\n\toldstr = r_print_rowlog (core->print, \"Finding xrefs in noncode section (e anal.in=io.maps.x)\");\n\tr_print_rowlog_done (core->print, oldstr);\n\n\tint vsize = 4; // 32bit dword\n\tif (core->rasm->bits == 64) {\n\t\tvsize = 8;\n\t}\n\n\t// body\n\toldstr = r_print_rowlog (core->print, \"Analyze value pointers (aav)\");\n\tr_print_rowlog_done (core->print, oldstr);\n\tr_cons_break_push (NULL, NULL);\n\tif (is_debug) {\n\t\tRList *list = r_core_get_boundaries_prot (core, 0, \"dbg.map\", \"anal\");\n\t\tRListIter *iter;\n\t\tRIOMap *map;\n\t\tif (!list) {\n\t\t\tgoto beach;\n\t\t}\n\t\tr_list_foreach (list, iter, map) {\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\toldstr = r_print_rowlog (core->print, sdb_fmt (\"... from 0x%\"PFMT64x\" to 0x%\"PFMT64x\"\", r_io_map_begin (map),\n\t\t\t\tr_io_map_end (map)));\n\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t(void)r_core_search_value_in_range (core, map->itv,\n\t\t\t\tr_io_map_begin (map), r_io_map_end (map), vsize, _CbInRangeAav, (void *)(size_t)asterisk);\n\t\t}\n\t\tr_list_free (list);\n\t} else {\n\t\tRList *list = r_core_get_boundaries_prot (core, 0, NULL, \"anal\");\n\t\tif (!list) {\n\t\t\tgoto beach;\n\t\t}\n\t\tRListIter *iter, *iter2;\n\t\tRIOMap *map, *map2;\n\t\tut64 from = UT64_MAX;\n\t\tut64 to = UT64_MAX;\n\t\t// find values pointing to non-executable regions\n\t\tr_list_foreach (list, iter2, map2) {\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//TODO: Reduce multiple hits for same addr\n\t\t\tfrom = r_itv_begin (map2->itv);\n\t\t\tto = r_itv_end (map2->itv);\n\t\t\toldstr = r_print_rowlog (core->print, sdb_fmt (\"Value from 0x%08\"PFMT64x \" to 0x%08\" PFMT64x \" (aav)\", from, to));\n\t\t\tif ((to - from) > MAX_SCAN_SIZE) {\n\t\t\t\teprintf (\"Warning: Skipping large region\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\tr_list_foreach (list, iter, map) {\n\t\t\t\tut64 begin = r_io_map_begin (map);\n\t\t\t\tut64 end = r_io_map_end (map);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (end - begin > UT32_MAX) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Skipping huge range\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\toldstr = r_print_rowlog (core->print, sdb_fmt (\"0x%08\"PFMT64x\"-0x%08\"PFMT64x\" in 0x%\"PFMT64x\"-0x%\"PFMT64x\" (aav)\", from, to, begin, end));\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t(void)r_core_search_value_in_range (core, map->itv, from, to, vsize, _CbInRangeAav, (void *)(size_t)asterisk);\n\t\t\t}\n\t\t}\n\t\tr_list_free (list);\n\t}\nbeach:\n\tr_cons_break_pop ();\n\t// end\n\tr_config_set (core->config, \"anal.in\", tmp);\n\tfree (tmp);\n\tseti (\"search.align\", o_align);\n}\n\nstatic void cmd_anal_abt(RCore *core, const char *input) {\n\tswitch (*input) {\n\tcase 'e':\n\t\t{\n\t\tint n = 1;\n\t\tchar *p = strchr (input + 1, ' ');\n\t\tif (!p) {\n\t\t\teprintf (\"Usage: abte [addr] # emulate from beginning of function to the given address.\\n\");\n\t\t\treturn;\n\t\t}\n\t\tut64 addr = r_num_math (core->num, p + 1);\n\t\tRList *paths = r_core_anal_graph_to (core, addr, n);\n\t\tif (paths) {\n\t\t\tRAnalBlock *bb;\n\t\t\tRList *path;\n\t\t\tRListIter *pathi;\n\t\t\tRListIter *bbi;\n\t\t\tr_cons_printf (\"f orip=`dr?PC`\\n\");\n\t\t\tr_list_foreach (paths, pathi, path) {\n\t\t\t\tr_list_foreach (path, bbi, bb) {\n\t\t\t\t\tr_cons_printf (\"# 0x%08\" PFMT64x \"\\n\", bb->addr);\n\t\t\t\t\tif (addr >= bb->addr && addr < bb->addr + bb->size) {\n\t\t\t\t\t\tr_cons_printf (\"aepc 0x%08\"PFMT64x\"\\n\", bb->addr);\n\t\t\t\t\t\tr_cons_printf (\"aesou 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_cons_printf (\"aepc 0x%08\"PFMT64x\"\\n\", bb->addr);\n\t\t\t\t\t\tr_cons_printf (\"aesou 0x%08\"PFMT64x\"\\n\", bb->addr + bb->size);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tr_cons_newline ();\n\t\t\t\tr_list_purge (path);\n\t\t\t\tfree (path);\n\t\t\t}\n\t\t\tr_list_purge (paths);\n\t\t\tr_cons_printf (\"aepc orip\\n\");\n\t\t\tfree (paths);\n\t\t}\n\t\t}\n\t\tbreak;\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_abt);\n\t\tbreak;\n\tcase 'j': {\n\t\tut64 addr = r_num_math (core->num, input + 1);\n\t\tRAnalBlock *block = r_anal_get_block_at (core->anal, core->offset);\n\t\tif (!block) {\n\t\t\tbreak;\n\t\t}\n\t\tRList *path = r_anal_block_shortest_path (block, addr);\n\t\tPJ *pj = pj_new ();\n\t\tif (pj) {\n\t\t\tpj_a (pj);\n\t\t\tif (path) {\n\t\t\t\tRListIter *it;\n\t\t\t\tr_list_foreach (path, it, block) {\n\t\t\t\t\tpj_n (pj, block->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tpj_end (pj);\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t}\n\t\tr_list_free (path);\n\t\tbreak;\n\t}\n\tcase ' ': {\n\t\tut64 addr = r_num_math (core->num, input + 1);\n\t\tRAnalBlock *block = r_anal_get_block_at (core->anal, core->offset);\n\t\tif (!block) {\n\t\t\tbreak;\n\t\t}\n\t\tRList *path = r_anal_block_shortest_path (block, addr);\n\t\tif (path) {\n\t\t\tRListIter *it;\n\t\t\tr_list_foreach (path, it, block) {\n\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", block->addr);\n\t\t\t}\n\t\t\tr_list_free (path);\n\t\t}\n\t\tbreak;\n\t}\n\tcase '\\0':\n\t\tr_core_cmdf (core, \"abl, addr/eq/0x%08\"PFMT64x, core->offset);\n\t\tbreak;\n\t}\n}\n\nstatic bool is_unknown_file(RCore *core) {\n\tif (core->bin->cur && core->bin->cur->o) {\n\t\treturn (r_list_empty (core->bin->cur->o->sections));\n\t}\n\treturn true;\n}\n\nstatic bool is_apple_target(RCore *core) {\n\tconst char *arch = r_config_get (core->config, \"asm.arch\");\n\tif (!strstr (arch, \"ppc\") && !strstr (arch, \"arm\") && !strstr (arch, \"x86\")) {\n\t\treturn false;\n\t}\n\tRBinObject *bo = r_bin_cur_object (core->bin);\n\tr_return_val_if_fail (!bo || (bo->plugin && bo->plugin->name), false);\n\treturn bo? strstr (bo->plugin->name, \"mach\"): false;\n}\n\nstatic int cmd_anal_all(RCore *core, const char *input) {\n\tswitch (*input) {\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_aa);\n\t\tbreak;\n\tcase 'b': // \"aab\"\n\t\tcmd_anal_blocks (core, input + 1);\n\t\tbreak;\n\tcase 'f':\n\t\tif (input[1] == 'e') {  // \"aafe\"\n\t\t\tr_core_cmd0 (core, \"aef@@F\");\n\t\t} else if (input[1] == 'r') {\n\t\t\tut64 cur = core->offset;\n\t\t\tbool hasnext = r_config_get_i (core->config, \"anal.hasnext\");\n\t\t\tRListIter *iter;\n\t\t\tRIOMap *map;\n\t\t\tRList *list = r_core_get_boundaries_prot (core, R_PERM_X, NULL, \"anal\");\n\t\t\tif (!list) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_list_foreach (list, iter, map) {\n\t\t\t\tr_core_seek (core, r_io_map_begin (map), true);\n\t\t\t\tr_config_set_i (core->config, \"anal.hasnext\", 1);\n\t\t\t\tr_core_cmd0 (core, \"afr\");\n\t\t\t\tr_config_set_i (core->config, \"anal.hasnext\", hasnext);\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t\tr_core_seek (core, cur, true);\n\t\t} else if (input[1] == 't') { // \"aaft\"\n\t\t\tcmd_anal_aaft (core);\n\t\t} else if (input[1] == 'f') { // \"aaff\"\n\t\t\tflag_every_function (core);\n\t\t} else if (input[1] == 0) { // \"aaf\"\n\t\t\tconst bool analHasnext = r_config_get_i (core->config, \"anal.hasnext\");\n\t\t\tr_config_set_i (core->config, \"anal.hasnext\", true);\n\t\t\tr_core_cmd0 (core, \"afr@@c:isq\");\n\t\t\tr_config_set_i (core->config, \"anal.hasnext\", analHasnext);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_aaf);\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"aac\"\n\t\tswitch (input[1]) {\n\t\tcase '*': // \"aac*\"\n\t\t\tcmd_anal_calls (core, input + 1, true, false);\n\t\t\tbreak;\n\t\tcase 'i': // \"aaci\"\n\t\t\tcmd_anal_calls (core, input + 1, input[2] == '*', true);\n\t\t\tbreak;\n\t\tcase '?': // \"aac?\"\n\t\t\teprintf (\"Usage: aac, aac* or aaci (imports xrefs only)\\n\");\n\t\t\tbreak;\n\t\tdefault: // \"aac\"\n\t\t\tcmd_anal_calls (core, input + 1, false, false);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"aaj\"\n\t\tcmd_anal_jumps (core, input + 1);\n\t\tbreak;\n\tcase 'd': // \"aad\"\n\t\tcmd_anal_aad (core, input);\n\t\tbreak;\n\tcase 'v': // \"aav\"\n\t\tcmd_anal_aav (core, input);\n\t\tbreak;\n\tcase 'w': // \"aaw\"\n\t\tcmd_anal_aaw (core, input);\n\t\tbreak;\n\tcase 'u': // \"aau\" - print areas not covered by functions\n\t\tr_core_anal_nofunclist (core, input + 1);\n\t\tbreak;\n\tcase 'i': // \"aai\"\n\t\tr_core_anal_info (core, input + 1);\n\t\tbreak;\n\tcase 's': // \"aas\"\n\t\tr_core_cmd0 (core, \"af @@= `isq~[0]`\");\n\t\tr_core_cmd0 (core, \"af @@f:entry*\");\n\t\tbreak;\n\tcase 'S': // \"aaS\"\n\t\tr_core_cmd0 (core, \"af @@f:sym.*\");\n\t\tr_core_cmd0 (core, \"af @@f:entry*\");\n\t\tbreak;\n\tcase 'F': // \"aaF\" \"aaFa\"\n\t\tif (!input[1] || input[1] == ' ' || input[1] == 'a') {\n\t\t\tr_core_anal_inflags (core, input + 1);\n\t\t} else {\n\t\t\teprintf (\"Usage: aaF[a] - analyze functions in flag bounds (aaFa uses af/a2f instead of af+/afb+)\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'n': // \"aan\"\n\t\tswitch (input[1]) {\n\t\tcase 'r': // \"aanr\" // all noreturn propagation\n\t\t\tr_core_anal_propagate_noreturn (core, UT64_MAX);\n\t\t\tbreak;\n\t\tcase 'g': // \"aang\"\n\t\t\tr_core_anal_autoname_all_golang_fcns (core);\n\t\t\tbreak;\n\t\tcase '?':\n\t\t\teprintf (\"Usage: aan[rg]\\n\");\n\t\t\teprintf (\"aan  : autoname all functions\\n\");\n\t\t\teprintf (\"aang : autoname all golang functions\\n\");\n\t\t\teprintf (\"aanr : auto-noreturn propagation\\n\");\n\t\t\tbreak;\n\t\tdefault: // \"aan\"\n\t\t\tr_core_anal_autoname_all_fcns (core);\n\t\t}\n\t\tbreak;\n\tcase 'p': // \"aap\"\n\t\tif (input[1] == '?') {\n\t\t\t// TODO: accept parameters for ranges\n\t\t\teprintf (\"Usage: /aap   ; find in memory for function preludes\");\n\t\t} else {\n\t\t\tr_core_search_preludes (core, true);\n\t\t}\n\t\tbreak;\n\tcase '\\0': // \"aa\"\n\tcase 'a':\n\t\tif (input[0] && (input[1] == '?' || (input[1] && input[2] == '?'))) {\n\t\t\tr_cons_println (\"Usage: See aa? for more help\");\n\t\t} else {\n\t\t\tbool didAap = false;\n\t\t\tchar *dh_orig = NULL;\n\t\t\tif (!strncmp (input, \"aaaaa\", 5)) {\n\t\t\t\teprintf (\"An r2 developer is coming to your place to manually analyze this program. Please wait for it\\n\");\n\t\t\t\tif (r_cons_is_interactive ()) {\n\t\t\t\t\tr_cons_any_key (NULL);\n\t\t\t\t}\n\t\t\t\tgoto jacuzzi;\n\t\t\t}\n\t\t\tut64 curseek = core->offset;\n\t\t\toldstr = r_print_rowlog (core->print, \"Analyze all flags starting with sym. and entry0 (aa)\");\n\t\t\tr_cons_break_push (NULL, NULL);\n\t\t\tr_cons_break_timeout (r_config_get_i (core->config, \"anal.timeout\"));\n\t\t\tr_core_anal_all (core);\n\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t// Run pending analysis immediately after analysis\n\t\t\t// Usefull when running commands with \";\" or via r2 -c,-i\n\t\t\tdh_orig = core->dbg->h\n\t\t\t\t? strdup (core->dbg->h->name)\n\t\t\t\t: strdup (\"esil\");\n\t\t\tif (core->io->desc && core->io->desc->plugin && !core->io->desc->plugin->isdbg) {\n\t\t\t\t//use dh_origin if we are debugging\n\t\t\t\tR_FREE (dh_orig);\n\t\t\t}\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tgoto jacuzzi;\n\t\t\t}\n\t\t\tr_cons_clear_line (1);\n\t\t\tbool cfg_debug = r_config_get_b (core->config, \"cfg.debug\");\n\t\t\tif (*input == 'a') { // \"aaa\"\n\t\t\t\tif (r_str_startswith (r_config_get (core->config, \"bin.lang\"), \"go\")) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Find function and symbol names from golang binaries (aang)\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tr_core_anal_autoname_all_golang_fcns (core);\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Analyze all flags starting with sym.go. (aF @@f:sym.go.*)\");\n\t\t\t\t\tr_core_cmd0 (core, \"aF @@f:sym.go.*\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t}\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tif (!cfg_debug) {\n\t\t\t\t\tif (dh_orig && strcmp (dh_orig, \"esil\")) {\n\t\t\t\t\t\tr_core_cmd0 (core, \"dL esil\");\n\t\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint c = r_config_get_i (core->config, \"anal.calls\");\n\t\t\t\tr_config_set_i (core->config, \"anal.calls\", 1);\n\t\t\t\tr_core_cmd0 (core, \"s $S\");\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t}\n\n\t\t\t\toldstr = r_print_rowlog (core->print, \"Analyze function calls (aac)\");\n\t\t\t\t(void)cmd_anal_calls (core, \"\", false, false); // \"aac\"\n\t\t\t\tr_core_seek (core, curseek, true);\n\t\t\t\t// oldstr = r_print_rowlog (core->print, \"Analyze data refs as code (LEA)\");\n\t\t\t\t// (void) cmd_anal_aad (core, NULL); // \"aad\"\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t}\n\n\t\t\t\tif (is_unknown_file (core)) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"find and analyze function preludes (aap)\");\n\t\t\t\t\t(void)r_core_search_preludes (core, false); // \"aap\"\n\t\t\t\t\tdidAap = true;\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toldstr = r_print_rowlog (core->print, \"Analyze len bytes of instructions for references (aar)\");\n\t\t\t\t(void)r_core_anal_refs (core, \"\"); // \"aar\"\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t}\n\t\t\t\tif (is_apple_target (core)) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Check for objc references (aao)\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tcmd_anal_objc (core, input + 1, true);\n\t\t\t\t}\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\toldstr = r_print_rowlog (core->print, \"Finding and parsing C++ vtables (avrr)\");\n\t\t\t\tr_core_cmd0 (core, \"avrr\");\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tr_config_set_i (core->config, \"anal.calls\", c);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t}\n\t\t\t\tif (!r_str_startswith (r_config_get (core->config, \"asm.arch\"), \"x86\")) {\n\t\t\t\t\tr_core_cmd0 (core, \"aav\");\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\tif (cfg_debug) {\n\t\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Skipping function emulation in debugger mode (aaef)\");\n\t\t\t\t\t\t// nothing to do\n\t\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbool ioCache = r_config_get_i (core->config, \"io.pcache\");\n\t\t\t\t\t\tr_config_set_i (core->config, \"io.pcache\", 1);\n\t\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Emulate functions to find computed references (aaef)\");\n\t\t\t\t\t\tr_core_cmd0 (core, \"aaef\");\n\t\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\t\tr_config_set_i (core->config, \"io.pcache\", ioCache);\n\t\t\t\t\t}\n\t\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (r_config_get_i (core->config, \"anal.autoname\")) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Speculatively constructing a function name \"\n\t\t\t\t\t                         \"for fcn.* and sym.func.* functions (aan)\");\n\t\t\t\t\tr_core_anal_autoname_all_fcns (core);\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t}\n\t\t\t\tif (core->anal->opt.vars) {\n\t\t\t\t\tRAnalFunction *fcni;\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tr_list_foreach (core->anal->fcns, iter, fcni) {\n\t\t\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tRList *list = r_anal_var_list (core->anal, fcni, 'r');\n\t\t\t\t\t\tif (!r_list_empty (list)) {\n\t\t\t\t\t\t\tr_list_free (list);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//extract only reg based var here\n\t\t\t\t\t\tr_core_recover_vars (core, fcni, true);\n\t\t\t\t\t\tr_list_free (list);\n\t\t\t\t\t}\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t}\n\t\t\t\tif (!sdb_isempty (core->anal->sdb_zigns)) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Check for zignature from zigns folder (z/)\");\n\t\t\t\t\tr_core_cmd0 (core, \"z/\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t}\n\t\t\t\tif (cfg_debug) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Skipping type matching analysis in debugger mode (aaft)\");\n\t\t\t\t\t// nothing to do\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t} else {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Type matching analysis for all functions (aaft)\");\n\t\t\t\t\tr_core_cmd0 (core, \"aaft\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t}\n\t\t\t\tr_core_task_yield (&core->tasks);\n\n\t\t\t\toldstr = r_print_rowlog (core->print, \"Propagate noreturn information (aanr)\");\n\t\t\t\tr_core_anal_propagate_noreturn (core, UT64_MAX);\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\n\t\t\t\t// apply dwarf function information\n\t\t\t\tSdb *dwarf_sdb = sdb_ns (core->anal->sdb, \"dwarf\", 0);\n\t\t\t\tif (dwarf_sdb) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Integrate dwarf function information.\");\n\t\t\t\t\tr_anal_dwarf_integrate_functions (core->anal, core->flags, dwarf_sdb);\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t}\n\n\t\t\t\tif (input[1] == 'a') { // \"aaaa\"\n\t\t\t\t\tif (!didAap) {\n\t\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Finding function preludes\");\n\t\t\t\t\t\t(void)r_core_search_preludes (core, false); // \"aap\"\n\t\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\t}\n\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Enable constraint types analysis for variables\");\n\t\t\t\t\tr_config_set (core->config, \"anal.types.constraint\", \"true\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t} else {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Use -AA or aaaa to perform additional experimental analysis.\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t}\n\t\t\t\tr_core_cmd0 (core, \"s-\");\n\t\t\t\tif (dh_orig) {\n\t\t\t\t\tr_core_cmdf (core, \"dL %s\", dh_orig);\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_core_seek (core, curseek, true);\n\t\tjacuzzi:\n\t\t\t// XXX this shouldnt be called. flags muts be created wheen the function is registered\n\t\t\tflag_every_function (core);\n\t\t\tr_core_anal_propagate_noreturn (core, UT64_MAX);\n\t\t\tr_cons_break_pop ();\n\t\t\tR_FREE (dh_orig);\n\t\t}\n\t\tbreak;\n\tcase 't': { // \"aat\"\n\t\tchar *off = input[1]? r_str_trim_dup (input + 2): NULL;\n\t\tRAnalFunction *fcn;\n\t\tRListIter *it;\n\t\tif (off && *off) {\n\t\t\tut64 addr = r_num_math (NULL, off);\n\t\t\tfcn = r_anal_get_function_at (core->anal, core->offset);\n\t\t\tif (fcn) {\n\t\t\t\tr_core_link_stroff (core, fcn);\n\t\t\t} else {\n\t\t\t\teprintf (\"Cannot find function at %08\" PFMT64x \"\\n\", addr);\n\t\t\t}\n\t\t} else {\n\t\t\tif (r_list_empty (core->anal->fcns)) {\n\t\t\t\teprintf (\"Couldn't find any functions\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_list_foreach (core->anal->fcns, it, fcn) {\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_core_link_stroff (core, fcn);\n\t\t\t}\n\t\t}\n\t\tfree (off);\n\t\tbreak;\n\t}\n\tcase 'T': // \"aaT\"\n\t\tcmd_anal_aftertraps (core, input + 1);\n\t\tbreak;\n\tcase 'o': // \"aao\"\n\t\tcmd_anal_objc (core, input + 1, false);\n\t\tbreak;\n\tcase 'e': // \"aae\"\n\t\tif (input[1] == 'f') { // \"aaef\"\n\t\t\tRListIter *it;\n\t\t\tRAnalFunction *fcn;\n\t\t\tut64 cur_seek = core->offset;\n\t\t\tr_list_foreach (core->anal->fcns, it, fcn) {\n\t\t\t\tr_core_seek (core, fcn->addr, true);\n\t\t\t\tr_core_anal_esil (core, \"f\", NULL);\n\t\t\t\t// __anal_esil_function (core, fcn->addr);\n\t\t\t}\n\t\t\tr_core_seek (core, cur_seek, true);\n\t\t} else if (input[1] == ' ') {\n\t\t\tconst char *len = (char *)input + 1;\n\t\t\tchar *addr = strchr (input + 2, ' ');\n\t\t\tif (addr) {\n\t\t\t\t*addr++ = 0;\n\t\t\t}\n\t\t\tr_core_anal_esil (core, len, addr);\n\t\t} else {\n\t\t\tut64 at = core->offset;\n\t\t\tRIOMap *map;\n\t\t\tRListIter *iter;\n\t\t\tRList *list = r_core_get_boundaries_prot (core, -1, NULL, \"anal\");\n\t\t\tif (!list) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!strcmp (\"range\", r_config_get (core->config, \"anal.in\"))) {\n\t\t\t\tut64 from = r_config_get_i (core->config, \"anal.from\");\n\t\t\t\tut64 to = r_config_get_i (core->config, \"anal.to\");\n\t\t\t\tif (to > from) {\n\t\t\t\t\tchar *len = r_str_newf (\" 0x%\"PFMT64x, to - from);\n\t\t\t\t\tr_core_seek (core, from, true);\n\t\t\t\t\tr_core_anal_esil (core, len, NULL);\n\t\t\t\t\tfree (len);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Assert: anal.from > anal.to\\n\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr_list_foreach (list, iter, map) {\n\t\t\t\t\tif (map->perm & R_PERM_X) {\n\t\t\t\t\t\tchar *ss = r_str_newf (\" 0x%\"PFMT64x, r_io_map_size (map));\n\t\t\t\t\t\tr_core_seek (core, r_io_map_begin (map), true);\n\t\t\t\t\t\tr_core_anal_esil (core, ss, NULL);\n\t\t\t\t\t\tfree (ss);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tr_list_free (list);\n\t\t\t}\n\t\t\tr_core_seek (core, at, true);\n\t\t}\n\t\tbreak;\n\tcase 'r':\n\t\t(void)r_core_anal_refs (core, input + 1);\n\t\tbreak;\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_aa);\n\t\tbreak;\n\t}\n\n\treturn true;\n}\n\nstatic bool anal_fcn_data(RCore *core, const char *input) {\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_ANY);\n\tif (fcn) {\n\t\tint i;\n\t\tbool gap = false;\n\t\tut64 gap_addr = UT64_MAX;\n\t\tut32 fcn_size = r_anal_function_size_from_entry (fcn);\n\t\tchar *bitmap = calloc (1, fcn_size);\n\t\tif (bitmap) {\n\t\t\tRAnalBlock *b;\n\t\t\tRListIter *iter;\n\t\t\tr_list_foreach (fcn->bbs, iter, b) {\n\t\t\t\tint f = b->addr - fcn->addr;\n\t\t\t\tint t = R_MIN (f + b->size, fcn_size);\n\t\t\t\tif (f >= 0) {\n\t\t\t\t\twhile (f < t) {\n\t\t\t\t\t\tbitmap[f++] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < fcn_size; i++) {\n\t\t\tut64 here = fcn->addr + i;\n\t\t\tif (bitmap && bitmap[i]) {\n\t\t\t\tif (gap) {\n\t\t\t\t\tr_cons_printf (\"Cd %\" PFMT64u \" @ 0x%08\"PFMT64x\"\\n\", here - gap_addr, gap_addr);\n\t\t\t\t\tgap = false;\n\t\t\t\t}\n\t\t\t\tgap_addr = UT64_MAX;\n\t\t\t} else {\n\t\t\t\tif (!gap) {\n\t\t\t\t\tgap = true;\n\t\t\t\t\tgap_addr = here;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (gap) {\n\t\t\tr_cons_printf (\"Cd %\" PFMT64u \" @ 0x%08\" PFMT64x \"\\n\", fcn->addr + fcn_size - gap_addr, gap_addr);\n\t\t}\n\t\tfree (bitmap);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nstatic bool anal_fcn_data_gaps(RCore *core, const char *input) {\n\tut64 end = UT64_MAX;\n\tRAnalFunction *fcn;\n\tRListIter *iter;\n\tint i, wordsize = (core->rasm->bits == 64)? 8: 4;\n\tr_list_sort (core->anal->fcns, cmpaddr);\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\tif (end != UT64_MAX) {\n\t\t\tint range = fcn->addr - end;\n\t\t\tif (range > 0) {\n\t\t\t\tfor (i = 0; i + wordsize < range; i+= wordsize) {\n\t\t\t\t\tr_cons_printf (\"Cd %d @ 0x%08\"PFMT64x\"\\n\", wordsize, end + i);\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"Cd %d @ 0x%08\"PFMT64x\"\\n\", range - i, end + i);\n\t\t\t\t//r_cons_printf (\"Cd %d @ 0x%08\"PFMT64x\"\\n\", range, end);\n\t\t\t}\n\t\t}\n\t\tend = fcn->addr + r_anal_function_size_from_entry (fcn);\n\t}\n\treturn true;\n}\n\nstatic void cmd_anal_rtti(RCore *core, const char *input) {\n\tswitch (input[0]) {\n\tcase '\\0': // \"avr\"\n\tcase 'j': // \"avrj\"\n\t\tr_anal_rtti_print_at_vtable (core->anal, core->offset, input[0]);\n\t\tbreak;\n\tcase 'a': // \"avra\"\n\t\tr_anal_rtti_print_all (core->anal, input[1]);\n\t\tbreak;\n\tcase 'r': // \"avrr\"\n\t\tr_anal_rtti_recover_all (core->anal);\n\t\tbreak;\n\tcase 'D': { // \"avrD\"\n\t\tchar *name = r_str_trim_dup (input + 1);\n\t\tchar *demangled = r_anal_rtti_demangle_class_name (core->anal, name);\n\t\tfree (name);\n\t\tif (demangled) {\n\t\t\tr_cons_println (demangled);\n\t\t\tfree (demangled);\n\t\t}\n\t\tbreak;\n\t}\n\tdefault :\n\t\tr_core_cmd_help (core, help_msg_av);\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_avg(RCore *core, const char* input) {\n\tswitch (input[0]) {\n\tcase ' ':\n\t\tif (strchr (input + 1, ' ')) {\n\t\t\tchar *a = r_str_trim_dup (input + 1);\n\t\t\tchar *b = strchr (a, ' ');\n\t\t\tif (b) {\n\t\t\t\t*b++ = 0;\n\t\t\t\tr_anal_global_add (core->anal, core->offset, a, b);\n\t\t\t} else {\n\t\t\t\tRFlagItem *fi = r_anal_global_get (core->anal, core->offset);\n\t\t\t\tif (fi) {\n\t\t\t\t\teprintf (\"type %s\\n\", fi->type);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (a);\n\t\t}\n\t\tbreak;\n\tcase '-':\n\t\tr_anal_global_del (core->anal, core->offset);\n\t\tbreak;\n\tcase '\\0': // \"av\"\n\t\tr_core_cmd0 (core, \"fs+globals;f;fs-\");\n\t\tbreak;\n\tdefault :\n\t\tr_core_cmd_help (core, help_msg_avg);\n\t\tbreak;\n\t}\n}\nstatic void cmd_anal_virtual_functions(RCore *core, const char* input) {\n\tswitch (input[0]) {\n\tcase 'g':\n\t\tcmd_avg (core, input + 1);\n\t\tbreak;\n\tcase '\\0': // \"av\"\n\tcase '*': // \"av*\"\n\tcase 'j': // \"avj\"\n\t\tr_anal_list_vtables (core->anal, input[0]);\n\t\tbreak;\n\tcase 'r': // \"avr\"\n\t\tcmd_anal_rtti (core, input + 1);\n\t\tbreak;\n\tdefault :\n\t\tr_core_cmd_help (core, help_msg_av);\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_class_method(RCore *core, const char *input) {\n\tRAnalClassErr err = R_ANAL_CLASS_ERR_SUCCESS;\n\tchar c = input[0];\n\tswitch (c) {\n\tcase ' ': // \"acm\"\n\tcase '-': // \"acm-\"\n\tcase 'n': { // \"acmn\"\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\teprintf (\"No class name given.\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (!end) {\n\t\t\teprintf (\"No method name given.\\n\");\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\t\t*end = '\\0';\n\t\tchar *name_str = end + 1;\n\n\t\tif (c == ' ' || c == 'n') {\n\t\t\tend = strchr (name_str, ' ');\n\t\t\tif (!end) {\n\t\t\t\tif (c == ' ') {\n\t\t\t\t\teprintf (\"No offset given.\\n\");\n\t\t\t\t} else if (c == 'n') {\n\t\t\t\t\teprintf (\"No new method name given.\\n\");\n\t\t\t\t}\n\t\t\t\tfree (cstr);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t*end = '\\0';\n\t\t}\n\n\t\tif (c == ' ') {\n\t\t\tchar *addr_str = end + 1;\n\t\t\tend = strchr (addr_str, ' ');\n\t\t\tif (end) {\n\t\t\t\t*end = '\\0';\n\t\t\t}\n\n\t\t\tRAnalMethod meth;\n\t\t\tmeth.name = name_str;\n\t\t\tmeth.addr = r_num_get (core->num, addr_str);\n\t\t\tmeth.vtable_offset = -1;\n\t\t\tif (end) {\n\t\t\t\tmeth.vtable_offset = (int)r_num_get (core->num, end + 1);\n\t\t\t}\n\t\t\terr = r_anal_class_method_set (core->anal, cstr, &meth);\n\t\t} else if (c == 'n') {\n\t\t\tchar *new_name_str = end + 1;\n\t\t\tend = strchr (new_name_str, ' ');\n\t\t\tif (end) {\n\t\t\t\t*end = '\\0';\n\t\t\t}\n\n\t\t\terr = r_anal_class_method_rename (core->anal, cstr, name_str, new_name_str);\n\t\t} else if (c == '-') {\n\t\t\terr = r_anal_class_method_delete (core->anal, cstr, name_str);\n\t\t}\n\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ac);\n\t\tbreak;\n\t}\n\n\tswitch (err) {\n\t\tcase R_ANAL_CLASS_ERR_NONEXISTENT_CLASS:\n\t\t\teprintf (\"Class does not exist.\\n\");\n\t\t\tbreak;\n\t\tcase R_ANAL_CLASS_ERR_NONEXISTENT_ATTR:\n\t\t\teprintf (\"Method does not exist.\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_class_base(RCore *core, const char *input) {\n\tRAnalClassErr err = R_ANAL_CLASS_ERR_SUCCESS;\n\tchar c = input[0];\n\tswitch (c) {\n\tcase ' ': // \"acb\"\n\tcase '-': { // \"acb-\"\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\teprintf (\"No class name given.\\n\");\n\t\t\treturn;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t\tend++;\n\t\t}\n\n\t\tif (!end || *end == '\\0') {\n\t\t\tif (c == ' ') {\n\t\t\t\tr_anal_class_list_bases (core->anal, cstr);\n\t\t\t} else /*if (c == '-')*/ {\n\t\t\t\teprintf (\"No base id given.\\n\");\n\t\t\t}\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\n\t\tchar *base_str = end;\n\t\tend = strchr (base_str, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t}\n\n\t\tif (c == '-') {\n\t\t\terr = r_anal_class_base_delete (core->anal, cstr, base_str);\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\n\t\tRAnalBaseClass base;\n\t\tbase.id = NULL;\n\t\tbase.offset = 0;\n\t\tbase.class_name = base_str;\n\n\t\tif (end) {\n\t\t\tbase.offset = r_num_get (core->num, end + 1);\n\t\t}\n\n\t\terr = r_anal_class_base_set (core->anal, cstr, &base);\n\t\tfree (base.id);\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ac);\n\t\tbreak;\n\t}\n\n\tif (err == R_ANAL_CLASS_ERR_NONEXISTENT_CLASS) {\n\t\teprintf (\"Class does not exist.\\n\");\n\t}\n}\n\nstatic void cmd_anal_class_vtable(RCore *core, const char *input) {\n\tRAnalClassErr err = R_ANAL_CLASS_ERR_SUCCESS;\n\tchar c = input[0];\n\tswitch (c) {\n\tcase 'f': {// \"acvf\" [offset] ([class_name])\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\teprintf (\"No offset given\\n\");\n\t\t\treturn;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t\tend++;\n\t\t}\n\t\tut64 offset_arg = r_num_get (core->num, cstr); // Should I allow negative offset?\n\t\tchar *class_arg = NULL;\n\t\tif (end) {\n\t\t\tclass_arg = (char *)r_str_trim_head_ro (end);\n\t\t}\n\n\t\tif (class_arg) {\n\t\t\tend = (char *)r_str_trim_head_wp (class_arg); // in case of extra unwanted stuff at the cmd end\n\t\t\t*end = '\\0';\n\t\t}\n\t\tr_anal_class_list_vtable_offset_functions (core->anal, class_arg, offset_arg);\n\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tcase ' ': // \"acv\"\n\tcase '-': { // \"acv-\"\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\teprintf (\"No class name given.\\n\");\n\t\t\treturn;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t\tend++;\n\t\t}\n\n\t\tif (!end || *end == '\\0') {\n\t\t\tif (c == ' ') {\n\t\t\t\tr_anal_class_list_vtables (core->anal, cstr);\n\t\t\t} else /*if (c == '-')*/ {\n\t\t\t\teprintf (\"No vtable id given. See acv [class name].\\n\");\n\t\t\t}\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\n\t\tchar *arg1_str = end;\n\n\t\tif (c == '-') {\n\t\t\terr = r_anal_class_vtable_delete (core->anal, cstr, arg1_str);\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\n\t\tend = strchr (arg1_str, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t}\n\n\t\tRAnalVTable vtable;\n\t\tvtable.id = NULL;\n\t\tvtable.addr = r_num_get (core->num, arg1_str);\n\t\tvtable.offset = 0;\n\t\tvtable.size = 0;\n\n\t\tchar *arg3_str = NULL;\n\t\tif (end) {\n\t\t\tvtable.offset = r_num_get (core->num, end + 1);\n\t\t\t// end + 1 won't work on extra whitespace between arguments, TODO\n\t\t\targ3_str = strchr (end+1, ' ');\n\t\t}\n\n\t\tif (arg3_str) {\n\t\t\tvtable.size = r_num_get (core->num, arg3_str + 1);\n\t\t}\n\n\t\terr = r_anal_class_vtable_set (core->anal, cstr, &vtable);\n\t\tfree (vtable.id);\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ac);\n\t\tbreak;\n\t}\n\n\tif (err == R_ANAL_CLASS_ERR_NONEXISTENT_CLASS) {\n\t\teprintf (\"Class does not exist.\\n\");\n\t}\n}\n\nstatic void cmd_anal_classes(RCore *core, const char *input) {\n\tswitch (input[0]) {\n\tcase 'l': // \"acl\"\n\t\tif (input[1] == 'l') { // \"acll\" (name)\n\t\t\tchar mode = 0;\n\t\t\tint arg_offset = 2;\n\t\t\tif (input[2] == 'j') {\n\t\t\t\targ_offset++;\n\t\t\t\tmode = 'j';\n\t\t\t}\n\t\t\tconst char *arg = r_str_trim_head_ro (input + arg_offset);\n\t\t\tif (*arg) { // if there is an argument\n\t\t\t\tchar *class_name = strdup (arg);\n\t\t\t\tif (!class_name) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tchar *name_end = (char *)r_str_trim_head_wp (class_name);\n\t\t\t\t*name_end = 0; // trim the whitespace around the name\n\t\t\t\tif (mode == 'j') {\n\t\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\t\tr_anal_class_json (core->anal, pj, class_name);\n\t\t\t\t\tr_cons_printf (\"%s\\n\", pj_string (pj));\n\t\t\t\t\tpj_free (pj);\n\t\t\t\t} else {\n\t\t\t\t\tr_anal_class_print (core->anal, class_name, true);\n\t\t\t\t}\n\t\t\t\tfree (class_name);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tr_anal_class_list (core->anal, input[1]);\n\t\tbreak;\n\tcase ' ': // \"ac\"\n\tcase '-': // \"ac-\"\n\tcase 'n': { // \"acn\"\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t}\n\t\tif (input[0] == '-') {\n\t\t\tr_anal_class_delete (core->anal, cstr);\n\t\t} else if(input[0] == 'n') {\n\t\t\tif (!end) {\n\t\t\t\teprintf (\"No new class name given.\\n\");\n\t\t\t} else {\n\t\t\t\tchar *new_name = end + 1;\n\t\t\t\tend = strchr (new_name, ' ');\n\t\t\t\tif (end) {\n\t\t\t\t\t*end = '\\0';\n\t\t\t\t}\n\t\t\t\tRAnalClassErr err = r_anal_class_rename (core->anal, cstr, new_name);\n\t\t\t\tif (err == R_ANAL_CLASS_ERR_NONEXISTENT_CLASS) {\n\t\t\t\t\teprintf (\"Class does not exist.\\n\");\n\t\t\t\t} else if (err == R_ANAL_CLASS_ERR_CLASH) {\n\t\t\t\t\teprintf (\"A class with this name already exists.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tr_anal_class_create (core->anal, cstr);\n\t\t}\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tcase 'v':\n\t\tcmd_anal_class_vtable (core, input + 1);\n\t\tbreak;\n\tcase 'b': // \"acb\"\n\t\tcmd_anal_class_base (core, input + 1);\n\t\tbreak;\n\tcase 'm': // \"acm\"\n\t\tcmd_anal_class_method (core, input + 1);\n\t\tbreak;\n\tcase 'g': { // \"acg\"\n\t\tRGraph *graph = r_anal_class_get_inheritance_graph (core->anal);\n\t\tif (!graph) {\n\t\t\teprintf (\"Couldn't create graph\");\n\t\t\tbreak;\n\t\t}\n\t\tr_core_graph_print (core, graph, -1, false, input + 1);\n\t\tr_graph_free (graph);\n\t} break;\n\tdefault: // \"ac?\"\n\t\tr_core_cmd_help (core, help_msg_ac);\n\t\tbreak;\n\t}\n}\n\nstatic void show_reg_args(RCore *core, int nargs, RStrBuf *sb) {\n\tint i;\n\tchar regname[8];\n\tif (nargs < 0) {\n\t\tnargs = 4; // default args if not defined\n\t}\n\tfor (i = 0; i < nargs; i++) {\n\t\tsnprintf (regname, sizeof (regname), \"A%d\", i);\n\t\tut64 v = r_reg_getv (core->anal->reg, regname);\n\t\tif (sb) {\n\t\t\tr_strbuf_appendf (sb, \"%s0x%08\"PFMT64x, i?\", \":\"\", v);\n\t\t} else {\n\t\t\tr_cons_printf (\"A%d 0x%08\"PFMT64x\"\\n\", i, v);\n\t\t}\n\t}\n}\n\n// ripped from disasm.c: dupe code from there\n// TODO: Implement aC* and aCj\nstatic void cmd_anal_aC(RCore *core, const char *input) {\n\tbool is_aCer = false;\n\tconst char *cc = r_anal_cc_default (core->anal);\n\tRAnalFuncArg *arg;\n\tRListIter *iter;\n\tRListIter *nextele;\n\tconst char *iarg = strchr (input, ' ');\n\tif (input[0] == 'e' && input[1] == 'f') { // \"aCf\"\n\t\t// hacky :D\n\t\tr_core_cmdf (core, \".aCe* $$ @@=`pdr~call`\");\n\t\treturn;\n\t}\n\tif (iarg) {\n\t\tiarg++;\n\t}\n\tif (!iarg) {\n\t\tr_core_cmd_help (core, help_msg_aC);\n\t\treturn;\n\t}\n\tRStrBuf *sb = r_strbuf_new (\"\");\n\tut64 pcv = r_num_math (core->num, iarg);\n\tif (input[0] == 'e') { // \"aCe\"\n\t\tis_aCer = (input[1] == '*');\n\t\tr_core_cmdf (core, \".abte 0x%08\"PFMT64x, pcv);\n\t}\n\tRAnalOp* op = r_core_anal_op (core, pcv, -1);\n\tif (!op) {\n\t\tr_strbuf_free (sb);\n\t\treturn;\n\t}\n\tbool go_on = true;\n\tif (op->type != R_ANAL_OP_TYPE_CALL) {\n\t\tshow_reg_args (core, -1, sb);\n\t\tgo_on = false;\n\t}\n\tconst char *fcn_name = NULL;\n\tRAnalFunction *fcn;\n\tif (go_on) {\n\t\tfcn = r_anal_get_function_at (core->anal, pcv);\n\t\tif (fcn) {\n\t\t\tfcn_name = fcn->name;\n\t\t} else {\n\t\t\tRFlagItem *item = r_flag_get_i (core->flags, op->jump);\n\t\t\tif (item) {\n\t\t\t\tfcn_name = item->name;\n\t\t\t}\n\t\t}\n\t\tchar *key = (fcn_name)? resolve_fcn_name (core->anal, fcn_name): NULL;\n\t\tif (key) {\n\t\t\tconst char *fcn_type = r_type_func_ret (core->anal->sdb_types, key);\n\t\t\tint nargs = r_type_func_args_count (core->anal->sdb_types, key);\n\t\t\t// remove other comments\n\t\t\tif (fcn_type) {\n\t\t\t\tr_strbuf_appendf (sb, \"%s%s%s(\", r_str_getf (fcn_type),\n\t\t\t\t\t\t(*fcn_type && fcn_type[strlen (fcn_type) - 1] == '*') ? \"\" : \" \",\n\t\t\t\t\t\tr_str_getf (key));\n\t\t\t\tif (!nargs) {\n\t\t\t\t\tr_strbuf_appendf (sb, \"void)\\n\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"Cannot find any function type..lets just use some standards?\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (is_aCer) {\n\t\t\t\tshow_reg_args (core, -1, sb);\n\t\t\t\tgo_on = true;\n\t\t\t} else {\n\t\t\t\tshow_reg_args (core, -1, NULL);\n\t\t\t\tgo_on = false;\n\t\t\t}\n\t\t}\n\t}\n\tif (go_on) {\n\t\tut64 s_width = (core->anal->bits == 64)? 8: 4;\n\t\tconst char *sp = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);\n\t\tut64 spv = r_reg_getv (core->anal->reg, sp);\n\t\tr_reg_setv (core->anal->reg, sp, spv + s_width); // temporarily set stack ptr to sync with carg.c\n\t\tRList *list = r_core_get_func_args (core, fcn_name);\n\t\tif (!r_list_empty (list)) {\n\t#if 0\n\t\t\tbool warning = false;\n\t\t\tbool on_stack = false;\n\t\t\tr_list_foreach (list, iter, arg) {\n\t\t\t\tif (r_str_startswith (arg->cc_source, \"stack\")) {\n\t\t\t\t\ton_stack = true;\n\t\t\t\t}\n\t\t\t\tif (!arg->size) {\n\t\t\t\t\tr_cons_printf (\"%s: unk_size\", arg->c_type);\n\t\t\t\t\twarning = true;\n\t\t\t\t}\n\t#endif\n\t\t\tr_list_foreach (list, iter, arg) {\n\t\t\t\tnextele = r_list_iter_get_next (iter);\n\t\t\t\tif (!arg->fmt) {\n\t\t\t\t\tr_strbuf_appendf (sb, \"?%s\", nextele? \", \": \"\");\n\t\t\t\t} else {\n\t\t\t\t\t// print_fcn_arg (core, arg->orig_c_type, arg->name, arg->fmt, arg->src, on_stack, 0);\n\t\t\t\t\t// const char *fmt = arg->orig_c_type;\n\t\t\t\t\tut64 addr = arg->src;\n\t\t\t\t\tchar *res = r_core_cmd_strf (core, \"pfq %s @ 0x%08\" PFMT64x, arg->fmt, addr);\n\t\t\t\t\t// r_cons_printf (\"pfq *%s @ 0x%08\" PFMT64x\"\\n\", arg->fmt, addr);\n\t\t\t\t\tr_str_trim (res);\n\t\t\t\t\tr_strbuf_appendf (sb, \"%s\", res);\n\t\t\t\t\tfree (res);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_strbuf_appendf (sb, \")\");\n\t\t} else {\n\t\t\t// function name not resolved\n\t\t\tint i, nargs = 4; // DEFAULT_NARGS;\n\t\t\tif (fcn) {\n\t\t\t\t// @TODO: fcn->nargs should be updated somewhere and used here instead\n\t\t\t\tnargs = r_anal_var_count (core->anal, fcn, 's', 1) +\n\t\t\t\t\tr_anal_var_count (core->anal, fcn, 'b', 1) +\n\t\t\t\t\tr_anal_var_count (core->anal, fcn, 'r', 1);\n\t\t\t}\n\t\t\tif (nargs > 0) {\n\t\t\t\tif (fcn_name) {\n\t\t\t\t\tr_strbuf_appendf (sb, \"; %s(\", fcn_name);\n\t\t\t\t} else {\n\t\t\t\t\tr_strbuf_appendf (sb, \"; 0x%\"PFMT64x\"(\", pcv);\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < nargs; i++) {\n\t\t\t\t\tut64 v = r_debug_arg_get (core->dbg, cc, i);\n\t\t\t\t\tr_strbuf_appendf (sb, \"%s0x%\"PFMT64x, i?\", \":\"\", v);\n\t\t\t\t}\n\t\t\t\tr_strbuf_appendf (sb, \")\");\n\t\t\t}\n\t\t}\n\t\tr_reg_setv (core->anal->reg, sp, spv); // reset stack ptr\n\t}\n\tchar *s = r_strbuf_drain (sb);\n\tif (is_aCer) {\n\t\tchar *u = r_base64_encode_dyn (s, -1);\n\t\tif (u) {\n\t\t\tr_cons_printf (\"CCu base64:%s\\n\", u);\n\t\t\tfree (u);\n\t\t}\n\t} else {\n\t\tr_cons_println (s);\n\t}\n\tfree (s);\n}\n\nstatic int cmd_anal(void *data, const char *input) {\n\tconst char *r;\n\tRCore *core = (RCore *)data;\n\tut32 tbs = core->blocksize;\n\tswitch (input[0]) {\n\tcase 'p': // \"ap\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_ap);\n\t\t} else {\n\t\t\tconst ut8 *prelude = (const ut8*)\"\\xe9\\x2d\"; //:fffff000\";\n\t\t\tconst int prelude_sz = 2;\n\t\t\tconst int bufsz = 4096;\n\t\t\tut8 *buf = calloc (1, bufsz);\n\t\t\tut64 off = core->offset;\n\t\t\tif (input[1] == ' ') {\n\t\t\t\toff = r_num_math (core->num, input + 1);\n\t\t\t}\n\t\t\tr_io_read_at (core->io, off - bufsz + prelude_sz, buf, bufsz);\n\t\t\t//const char *prelude = \"\\x2d\\xe9\\xf0\\x47\"; //:fffff000\";\n\t\t\tr_mem_reverse (buf, bufsz);\n\t\t\t//r_print_hexdump (NULL, off, buf, bufsz, 16, -16);\n\t\t\tconst ut8 *pos = r_mem_mem (buf, bufsz, prelude, prelude_sz);\n\t\t\tif (pos) {\n\t\t\t\tint delta = (size_t)(pos - buf);\n\t\t\t\teprintf (\"POS = %d\\n\", delta);\n\t\t\t\teprintf (\"HIT = 0x%\"PFMT64x\"\\n\", off - delta);\n\t\t\t\tr_cons_printf (\"0x%08\"PFMT64x\"\\n\", off - delta);\n\t\t\t} else {\n\t\t\t\teprintf (\"Cannot find prelude\\n\");\n\t\t\t}\n\t\t\tfree (buf);\n\t\t}\n\t\tbreak;\n\tcase '8':  // \"a8\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_a8);\n\t\t\tbreak;\n\t\t}\n\t\tut8 *buf = malloc (strlen (input) + 1);\n\t\tif (buf) {\n\t\t\tint len = r_hex_str2bin (input + 1, buf);\n\t\t\tif (len > 0) {\n\t\t\t\tcore_anal_bytes (core, buf, len, 0, input[1]);\n\t\t\t}\n\t\t\tfree (buf);\n\t\t}\n\t\tbreak;\n\tcase 'b': // \"ab\"\n\t\tswitch (input[1]) {\n\t\tcase '.': // \"ab.\"\n\t\t\tr_core_cmd0 (core, \"ab $$\");\n\t\t\tbreak;\n\t\tcase 'a': // \"aba\"\n\t\t\tr_core_cmdf (core, \"aeab%s\", input + 1);\n\t\t\tbreak;\n\t\tcase 'b': // \"abb\"\n\t\t\tcore_anal_bbs (core, input + 2);\n\t\t\tbreak;\n\t\tcase 'r': // \"abr\"\n\t\t\tcore_anal_bbs_range (core, input + 2);\n\t\t\tbreak;\n\t\tcase ',': // \"ab,\"\n\t\tcase 't': // \"abt\"\n\t\t\tcmd_anal_abt (core, input+2);\n\t\t\tbreak;\n\t\tcase 'l': // \"abl\"\n\t\t\tif (input[2] == '?') {\n\t\t\t\tr_core_cmd_help (core, help_msg_abl);\n\t\t\t} else {\n\t\t\t\tanal_bb_list (core, input + 2);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'j': { // \"abj\"\n\t\t\tut64 addr = core->offset;\n\t\t\tif (input[2] && input[2] != '.') {\n\t\t\t\taddr = r_num_math (core->num, input + 2);\n\t\t\t}\n\t\t\tr_core_cmdf (core, \"afbij @ 0x%\"PFMT64x, addr);\n\t\t\tbreak;\n\t\t}\n\t\tcase 0:\n\t\tcase ' ': { // \"ab \"\n\t\t\t// find block\n\t\t\tut64 addr = core->offset;\n\t\t\tif (input[1] && input[1] != '.') {\n\t\t\t\taddr = r_num_math (core->num, input + 1);\n\t\t\t}\n\t\t\tr_core_cmdf (core, \"afbi @ 0x%\"PFMT64x, addr);\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_ab);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"ac\"\n\t\tcmd_anal_classes (core, input + 1);\n\t\tbreak;\n\tcase 'C': // \"aC\"\n\t\tcmd_anal_aC (core, input + 1);\n\t\tbreak;\n\tcase 'i': cmd_anal_info (core, input + 1); break; // \"ai\"\n\tcase 'r': cmd_anal_reg (core, input + 1); break;  // \"ar\"\n\tcase 'e': cmd_anal_esil (core, input + 1); break; // \"ae\"\n\tcase 'L': return r_core_cmd0 (core, \"e asm.arch=??\"); break;\n\tcase 'o': cmd_anal_opcode (core, input + 1); break; // \"ao\"\n\tcase 'O': cmd_anal_bytes (core, input + 1); break; // \"aO\"\n\tcase 'F': // \"aF\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_aF);\n\t\t\tbreak;\n\t\t}\n\t\tr_core_anal_fcn (core, core->offset, UT64_MAX, R_ANAL_REF_TYPE_NULL, 1);\n\t\tbreak;\n\tcase 'f': // \"af\"\n\t\t{\n\t\tint res = cmd_anal_fcn (core, input);\n\t\tif (!res) {\n\t\t\treturn false;\n\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'n': // \"an\"\n\t\t{\n\t\tconst char *name = \"\";\n\t\tbool use_json = false;\n\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_an);\n\t\t\tbreak;\n\t\t}\n\t\tif (input[1] == 'j') {\n\t\t\tuse_json = true;\n\t\t\tinput++;\n\t\t}\n\t\tif (input[1] == ' ') {\n\t\t\tname = input + 1;\n\t\t\twhile (name[0] == ' ') {\n\t\t\t\tname++;\n\t\t\t}\n\t\t\tchar *end = strchr (name, ' ');\n\t\t\tif (end) {\n\t\t\t\t*end = '\\0';\n\t\t\t}\n\t\t}\n\t\tif (R_STR_ISEMPTY (name)) {\n\t\t\tname = NULL;\n\t\t}\n\t\tcmd_an (core, use_json, name);\n\t\t}\n\t\tbreak;\n\tcase 'g': // \"ag\"\n\t\tcmd_anal_graph (core, input + 1);\n\t\tbreak;\n\tcase 's': // \"as\"\n\t\tcmd_anal_syscall (core, input + 1);\n\t\tbreak;\n\tcase 'v': // \"av\"\n\t\tcmd_anal_virtual_functions (core, input + 1);\n\t\tbreak;\n\tcase 'x': // \"ax\"\n\t\tif (!cmd_anal_refs (core, input + 1)) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase '*': // \"a*\"\n\t\tr_core_cmd0 (core, \"afl*\");\n\t\tr_core_cmd0 (core, \"ah*\");\n\t\tr_core_cmd0 (core, \"ax*\");\n\t\tbreak;\n\tcase 'a': // \"aa\"\n\t\tif (!cmd_anal_all (core, input + 1)) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"ad\"\n\t\tswitch (input[1]) {\n\t\tcase 'f': // \"adf\"\n\t\t\tif (input[2] == 'g') {\n\t\t\t\tanal_fcn_data_gaps (core, r_str_trim_head_ro (input + 1));\n\t\t\t} else {\n\t\t\t\tanal_fcn_data (core, input + 1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 't': // \"adt\"\n\t\t\tcmd_anal_trampoline (core, input + 2);\n\t\t\tbreak;\n\t\tcase ' ': { // \"ad\"\n\t\t\tconst int default_depth = 1;\n\t\t\tconst char *p;\n\t\t\tint a, b;\n\t\t\ta = r_num_math (core->num, input + 2);\n\t\t\tp = strchr (input + 2, ' ');\n\t\t\tb = p? r_num_math (core->num, p + 1): default_depth;\n\t\t\tif (a < 1) {\n\t\t\t\ta = 1;\n\t\t\t}\n\t\t\tif (b < 1) {\n\t\t\t\tb = 1;\n\t\t\t}\n\t\t\tr_core_anal_data (core, core->offset, a, b, 0);\n\t\t} break;\n\t\tcase 'k': // \"adk\"\n\t\t\tr = r_anal_data_kind (core->anal,\n\t\t\t\t\tcore->offset, core->block, core->blocksize);\n\t\t\tr_cons_println (r);\n\t\t\tbreak;\n\t\tcase '\\0': // \"ad\"\n\t\t\tr_core_anal_data (core, core->offset, 2 + (core->blocksize / 4), 1, 0);\n\t\t\tbreak;\n\t\tcase '4': // \"ad4\"\n\t\t\tr_core_anal_data (core, core->offset, 2 + (core->blocksize / 4), 1, 4);\n\t\t\tbreak;\n\t\tcase '8': // \"ad8\"\n\t\t\tr_core_anal_data (core, core->offset, 2 + (core->blocksize / 4), 1, 8);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_ad);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'h': // \"ah\"\n\t\tcmd_anal_hint (core, input + 1);\n\t\tbreak;\n\tcase '!': // \"a!\"\n\t\tif (core->anal && core->anal->cur && core->anal->cur->cmd_ext) {\n\t\t\treturn core->anal->cur->cmd_ext (core->anal, input + 1);\n\t\t} else {\n\t\t\tr_cons_printf (\"No plugins for this analysis plugin\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"aj\"\n\t\tr_core_cmd0 (core, \"aflj\");\n\t\tbreak;\n\tcase 0: // \"a\"\n\t\tr_core_cmd0 (core, \"aai\");\n\t\tbreak;\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_a);\n#if 0\n\t\tr_cons_printf (\"Examples:\\n\"\n\t\t\t\" f ts @ `S*~text:0[3]`; f t @ section..text\\n\"\n\t\t\t\" f ds @ `S*~data:0[3]`; f d @ section..data\\n\"\n\t\t\t\" .ad t t+ts @ d:ds\\n\",\n\t\t\tNULL);\n#endif\n\t\tbreak;\n\t}\n\tif (tbs != core->blocksize) {\n\t\tr_core_block_size (core, tbs);\n\t}\n\tif (r_cons_is_breaked ()) {\n\t\tr_cons_clear_line (1);\n\t}\n\treturn 0;\n}\n", "/* radare - LGPL - Copyright 2009-2021 - pancake */\n\n#include <r_reg.h>\n#include <r_util.h>\n\ntypedef ut32 ut27;\nstatic ut27 r_read_me27(const ut8 *buf, int boff) {\n\tut27 ret = 0;\n\tr_mem_copybits_delta ((ut8 *)&ret, 18, buf, boff, 9);\n\tr_mem_copybits_delta ((ut8 *)&ret, 9, buf, boff + 9, 9);\n\tr_mem_copybits_delta ((ut8 *)&ret, 0, buf, boff + 18, 9);\n\treturn ret;\n}\n\nR_API ut64 r_reg_get_value_big(RReg *reg, RRegItem *item, utX *val) {\n\tr_return_val_if_fail (reg && item, 0);\n\n\tut64 ret = 0LL;\n\tint off = BITS2BYTES (item->offset);\n\tRRegSet *regset = &reg->regset[item->arena];\n\tif (!regset->arena) {\n\t\treturn 0LL;\n\t}\n\tswitch (item->size) {\n\tcase 80: // word + qword\n\t\tif (regset->arena->bytes && (off + 10 <= regset->arena->size)) {\n\t\t\tval->v80.Low = *((ut64 *)(regset->arena->bytes + off));\n\t\t\tval->v80.High = *((ut16 *)(regset->arena->bytes + off + 8));\n\t\t} else {\n\t\t\teprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\t}\n\t\tret = val->v80.Low;\n\t\tbreak;\n\tcase 96: // dword + qword\n\t\tif (regset->arena->bytes && (off + 12 <= regset->arena->size)) {\n\t\t\tval->v96.Low = *((ut64 *)(regset->arena->bytes + off));\n\t\t\tval->v96.High = *((ut32 *)(regset->arena->bytes + off + 8));\n\t\t} else {\n\t\t\teprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\t}\n\t\tret = val->v96.Low;\n\t\tbreak;\n\tcase 128: // qword + qword\n\t\tif (regset->arena->bytes && (off + 16 <= regset->arena->size)) {\n\t\t\tval->v128.Low = *((ut64 *)(regset->arena->bytes + off));\n\t\t\tval->v128.High = *((ut64 *)(regset->arena->bytes + off + 8));\n\t\t} else {\n\t\t\teprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\t}\n\t\tret = val->v128.Low;\n\t\tbreak;\n\tcase 256:// qword + qword + qword + qword\n\t\tif (regset->arena->bytes && (off + 32 <= regset->arena->size)) {\n\t\t\tval->v256.Low.Low = *((ut64 *)(regset->arena->bytes + off));\n\t\t\tval->v256.Low.High = *((ut64 *)(regset->arena->bytes + off + 8));\n\t\t\tval->v256.High.Low = *((ut64 *)(regset->arena->bytes + off + 16));\n\t\t\tval->v256.High.High = *((ut64 *)(regset->arena->bytes + off + 24));\n\t\t} else {\n\t\t\teprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\t}\n\t\tret = val->v256.Low.Low;\n\t\tbreak;\n\tdefault:\n\t\teprintf (\"r_reg_get_value_big: Bit size %d not supported\\n\", item->size);\n\t\tbreak;\n\t}\n\treturn ret;\n}\n\nR_API ut64 r_reg_get_value(RReg *reg, RRegItem *item) {\n\tr_return_val_if_fail (reg && item, 0);\n\tif (item->offset == -1) {\n\t\treturn 0LL;\n\t}\n\tint off = BITS2BYTES (item->offset);\n\tRRegSet *regset = &reg->regset[item->arena];\n\tif (!regset->arena) {\n\t\treturn 0LL;\n\t}\n\tswitch (item->size) {\n\tcase 1: {\n\t\tint offset = item->offset / 8;\n\t\tif (offset >= regset->arena->size) {\n\t\t\tbreak;\n\t\t}\n\t\treturn (regset->arena->bytes[offset] &\n\t\t\t       (1 << (item->offset % 8)))\n\t\t\t? 1\n\t\t\t: 0;\n\t} break;\n\tcase 4:\n\t\tif (regset->arena->size - off - 1 >= 0) {\n\t\t\treturn (r_read_at_ble8 (regset->arena->bytes, off)) & 0xF;\n\t\t}\n\t\tbreak;\n\tcase 8:\n\t\tif (regset->arena->size - off - 1 >= 0) {\n\t\t\treturn r_read_at_ble8 (regset->arena->bytes, off);\n\t\t}\n\t\tbreak;\n\tcase 16:\n\t\tif (regset->arena->size - off - 2 >= 0) {\n\t\t\treturn r_read_ble16 (regset->arena->bytes + off, reg->big_endian);\n\t\t}\n\t\tbreak;\n\tcase 27:\n\t\tif (off + 3 < regset->arena->size) {\n\t\t\treturn r_read_me27 (regset->arena->bytes + off, 0);\n\t\t}\n\t\tbreak;\n\tcase 32:\n\t\tif (off + 4 <= regset->arena->size) {\n\t\t\treturn r_read_ble32 (regset->arena->bytes + off, reg->big_endian);\n\t\t}\n\t\teprintf (\"r_reg_get_value: 32bit oob read %d\\n\", off);\n\t\tbreak;\n\tcase 64:\n\t\tif (regset->arena && regset->arena->bytes && (off + 8 <= regset->arena->size)) {\n\t\t\treturn r_read_ble64 (regset->arena->bytes + off, reg->big_endian);\n\t\t}\n\t\t//eprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\tbreak;\n\tcase 80: // long double\n\tcase 96: // long floating value\n\t\t// FIXME: It is a precision loss, please implement me properly!\n\t\treturn (ut64)r_reg_get_longdouble (reg, item);\n\tcase 128:\n\tcase 256:\n\t\t// XXX 128 & 256 bit\n\t\treturn (ut64)r_reg_get_longdouble (reg, item);\n\tdefault:\n\t\teprintf (\"r_reg_get_value: Bit size %d not supported\\n\", item->size);\n\t\tbreak;\n\t}\n\treturn 0LL;\n}\n\nR_API ut64 r_reg_get_value_by_role(RReg *reg, RRegisterId role) {\n\t// TODO use mapping from RRegisterId to RRegItem (via RRegSet)\n\treturn r_reg_get_value (reg, r_reg_get (reg, r_reg_get_name (reg, role), -1));\n}\n\nR_API bool r_reg_set_value(RReg *reg, RRegItem *item, ut64 value) {\n\tut8 bytes[12];\n\tut8 *src = bytes;\n\tr_return_val_if_fail (reg && item, false);\n\n\tif (r_reg_is_readonly (reg, item)) {\n\t\treturn true;\n\t}\n\tif (item->offset < 0) {\n\t\treturn true;\n\t}\n\tRRegArena *arena = reg->regset[item->arena].arena;\n\tif (!arena) {\n\t\treturn false;\n\t}\n\tswitch (item->size) {\n\tcase 80:\n\tcase 96: // long floating value\n\t\tr_reg_set_longdouble (reg, item, (long double)value);\n\t\tbreak;\n\tcase 64:\n\t\tif (reg->big_endian) {\n\t\t\tr_write_be64 (src, value);\n\t\t} else {\n\t\t\tr_write_le64 (src, value);\n\t\t}\n\t\tbreak;\n\tcase 32:\n\t\tif (reg->big_endian) {\n\t\t\tr_write_be32 (src, value);\n\t\t} else {\n\t\t\tr_write_le32 (src, value);\n\t\t}\n\t\tbreak;\n\tcase 16:\n\t\tif (reg->big_endian) {\n\t\t\tr_write_be16 (src, value);\n\t\t} else {\n\t\t\tr_write_le16 (src, value);\n\t\t}\n\t\tbreak;\n\tcase 8:\n\t\tr_write_ble8 (src, (ut8) (value & UT8_MAX));\n\t\tbreak;\n\tcase 1:\n\t\tif (value) {\n\t\t\tut8 *buf = arena->bytes + (item->offset / 8);\n\t\t\tint bit = (item->offset % 8);\n\t\t\tut8 mask = (1 << bit);\n\t\t\tbuf[0] = (buf[0] & (0xff ^ mask)) | mask;\n\t\t} else {\n\t\t\tint idx = item->offset / 8;\n\t\t\tif (idx + item->size > arena->size) {\n\t\t\t\teprintf (\"RRegSetOverflow %d vs %d\\n\", idx + item->size, arena->size);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tut8 *buf = arena->bytes + idx;\n\t\t\tint bit = item->offset % 8;\n\t\t\tut8 mask = 0xff ^ (1 << bit);\n\t\t\tbuf[0] = (buf[0] & mask) | 0;\n\t\t}\n\t\treturn true;\n\tcase 128:\n\tcase 256:\n\t\t// XXX 128 & 256 bit\n\t\treturn false; // (ut64)r_reg_get_longdouble (reg, item);\n\tdefault:\n\t\teprintf (\"r_reg_set_value: Bit size %d not supported\\n\", item->size);\n\t\treturn false;\n\t}\n\tconst bool fits_in_arena = (arena->size - BITS2BYTES (item->offset) - BITS2BYTES (item->size)) >= 0;\n\tif (src && fits_in_arena) {\n\t\tr_mem_copybits (reg->regset[item->arena].arena->bytes +\n\t\t\t\tBITS2BYTES (item->offset),\n\t\t\t\tsrc, item->size);\n\t\treturn true;\n\t}\n\teprintf (\"r_reg_set_value: Cannot set %s to 0x%\" PFMT64x \"\\n\", item->name, value);\n\treturn false;\n}\n\nR_API bool r_reg_set_value_by_role(RReg *reg, RRegisterId role, ut64 val) {\n\t// TODO use mapping from RRegisterId to RRegItem (via RRegSet)\n\tRRegItem *r = r_reg_get (reg, r_reg_get_name (reg, role), -1);\n\treturn r_reg_set_value (reg, r, val);\n}\n\nR_API ut64 r_reg_set_bvalue(RReg *reg, RRegItem *item, const char *str) {\n\tut64 num = UT64_MAX;\n\tif (item && item->flags && str) {\n\t\tnum = r_str_bits_from_string (str, item->flags);\n\t\tif (num == UT64_MAX) {\n\t\t\tnum = r_num_math (NULL, str);\n\t\t}\n\t\tr_reg_set_value (reg, item, num);\n\t}\n\treturn num;\n}\n\nR_API R_HEAP char *r_reg_get_bvalue(RReg *reg, RRegItem *item) {\n\tchar *out = NULL;\n\tif (reg && item && item->flags) {\n\t\tout = malloc (strlen (item->flags) + 1);\n\t\tif (out) {\n\t\t\tut64 num = r_reg_get_value (reg, item);\n\t\t\tr_str_bits (out, (ut8 *)&num,\n\t\t\t\tstrlen (item->flags) * 8, item->flags);\n\t\t}\n\t}\n\treturn out;\n}\n\n/* packed registers */\n// packbits can be 8, 16, 32 or 64\n// result value is always casted into ut64\n// TODO: support packbits=128 for xmm registers\nR_API ut64 r_reg_get_pack(RReg *reg, RRegItem *item, int packidx, int packbits) {\n\tr_return_val_if_fail (reg && item, 0LL);\n\n\tif (packbits < 1) {\n\t\tpackbits = item->packed_size;\n\t}\n\tif (packbits > 64) {\n\t\tpackbits = 64;\n\t\teprintf (\"Does not support pack bits > 64\\n\");\n\t}\n\n\tut64 ret = 0LL;\n\tconst int packbytes = packbits / 8;\n\tconst int packmod = packbits % 8;\n\tif (packmod) {\n\t\teprintf (\"Invalid bit size for packet register\\n\");\n\t\treturn 0LL;\n\t}\n\tif ((packidx + 1) * packbits > item->size) {\n\t\teprintf (\"Packed index is beyond the register size\\n\");\n\t\treturn 0LL;\n\t}\n\tRRegSet *regset = &reg->regset[item->arena];\n\tif (!regset->arena) {\n\t\treturn 0LL;\n\t}\n\tint off = BITS2BYTES (item->offset);\n\toff += (packidx * packbytes);\n\tif (regset->arena->size - off - 1 >= 0) {\n\t\tint i;\n\t\tfor (i = packbytes - 1; i >= 0; i--) {\n\t\t\tret = (ret << 8) | regset->arena->bytes[off + i];\n\t\t}\n\t}\n\treturn ret;\n}\n\n// TODO: support packbits=128 for xmm registers\nR_API int r_reg_set_pack(RReg *reg, RRegItem *item, int packidx, int packbits, ut64 val) {\n\tr_return_val_if_fail (reg && reg->regset->arena && item, false);\n\n\tif (packbits < 1) {\n\t\tpackbits = item->packed_size;\n\t}\n\tif (packbits > 64) {\n\t\tpackbits = 64;\n\t\teprintf (\"Does not support pack bits > 64\\n\");\n\t}\n\n\tint packbytes = packbits / 8;\n\tif ((packidx + 1) * packbits > item->size) {\n\t\teprintf (\"Packed index is beyond the register size\\n\");\n\t\treturn false;\n\t}\n\tint off = BITS2BYTES (item->offset);\n\toff += (packidx * packbytes);\n\tif (reg->regset[item->arena].arena->size - BITS2BYTES (off) - BITS2BYTES (packbytes) >= 0) {\n\t\tut8 *dst = reg->regset[item->arena].arena->bytes + off;\n\t\tint i;\n\t\tfor (i = 0; i < packbytes; i++, val >>= 8) {\n\t\t\tdst[i] = val & 0xff;\n\t\t}\n\t\treturn true;\n\t}\n\teprintf (\"r_reg_set_value: Cannot set %s to 0x%\" PFMT64x \"\\n\", item->name, val);\n\treturn false;\n}\n"], "fixing_code": ["/* radare - LGPL - Copyright 2016-2020 - oddcoder, sivaramaaa */\n/* type matching - type propagation */\n\n#include <r_anal.h>\n#include <r_util.h>\n#include <r_core.h>\n#define LOOP_MAX 10\n\nstatic bool anal_emul_init(RCore *core, RConfigHold *hc, RDebugTrace **dt, RAnalEsilTrace **et) {\n\tif (!core->anal->esil) {\n\t\treturn false;\n\t}\n\t*dt = core->dbg->trace;\n\t*et = core->anal->esil->trace;\n\tcore->dbg->trace = r_debug_trace_new ();\n\tcore->anal->esil->trace = r_anal_esil_trace_new (core->anal->esil);\n\tr_config_hold (hc, \"esil.romem\", \"dbg.trace\", \"esil.nonull\", \"dbg.follow\", NULL);\n\tr_config_set (core->config, \"esil.romem\", \"true\");\n\tr_config_set (core->config, \"dbg.trace\", \"true\");\n\tr_config_set (core->config, \"esil.nonull\", \"true\");\n\tr_config_set_i (core->config, \"dbg.follow\", false);\n\tconst char *bp = r_reg_get_name (core->anal->reg, R_REG_NAME_BP);\n\tconst char *sp = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);\n\tif ((bp && !r_reg_getv (core->anal->reg, bp)) && (sp && !r_reg_getv (core->anal->reg, sp))) {\n\t\teprintf (\"Stack isn't initialized.\\n\");\n\t\teprintf (\"Try running aei and aeim commands before aft for default stack initialization\\n\");\n\t\treturn false;\n\t}\n\treturn (core->dbg->trace && core->anal->esil->trace);\n}\n\nstatic void anal_emul_restore(RCore *core, RConfigHold *hc, RDebugTrace *dt, RAnalEsilTrace *et) {\n\tr_config_hold_restore (hc);\n\tr_config_hold_free (hc);\n\tr_debug_trace_free (core->dbg->trace);\n\tr_anal_esil_trace_free (core->anal->esil->trace);\n\tcore->anal->esil->trace = et;\n\tcore->dbg->trace = dt;\n}\n\n#define SDB_CONTAINS(i,s) sdb_array_contains (trace, sdb_fmt (\"%d.reg.write\", i), s, 0)\n\nstatic bool type_pos_hit(RAnal *anal, Sdb *trace, bool in_stack, int idx, int size, const char *place) {\n\tif (in_stack) {\n\t\tconst char *sp_name = r_reg_get_name (anal->reg, R_REG_NAME_SP);\n\t\tut64 sp = r_reg_getv (anal->reg, sp_name);\n\t\tut64 write_addr = sdb_num_get (trace, sdb_fmt (\"%d.mem.write\", idx), 0);\n\t\treturn (write_addr == sp + size);\n\t}\n\treturn SDB_CONTAINS (idx, place);\n}\n\nstatic void __var_rename(RAnal *anal, RAnalVar *v, const char *name, ut64 addr) {\n\tif (!name || !v) {\n\t\treturn;\n\t}\n\tif (!*name || !strcmp (name , \"...\")) {\n\t\treturn;\n\t}\n\tbool is_default = (r_str_startswith (v->name, VARPREFIX)\n\t\t\t|| r_str_startswith (v->name, ARGPREFIX));\n\tif (*name == '*') {\n\t\tname++;\n\t}\n\t// longer name tends to be meaningful like \"src\" instead of \"s1\"\n\tif (!is_default && (strlen (v->name) > strlen (name))) {\n\t\treturn;\n\t}\n\tRAnalFunction *fcn = r_anal_get_fcn_in (anal, addr, 0);\n\tif (!fcn) {\n\t\treturn;\n\t}\n\tr_anal_var_rename (v, name, false);\n}\n\nstatic void __var_retype(RAnal *anal, RAnalVar *var, const char *vname, const char *type, bool ref, bool pfx) {\n\tr_return_if_fail (anal && var && type);\n\t// XXX types should be passed without spaces to trim\n\ttype = r_str_trim_head_ro (type);\n\t// default type if none is provided\n\tif (!*type) {\n\t\ttype = \"int\";\n\t}\n\tbool is_ptr = (vname && *vname == '*');\n\t// removing this return makes 64bit vars become 32bit\n\tif (!strncmp (type, \"int\", 3) || (!is_ptr && !strcmp (type, \"void\"))) {\n\t\t// default or void type\n\t\treturn;\n\t}\n\tconst char *expand = var->type;\n\tif (!strcmp (var->type, \"int32_t\")) {\n\t\texpand = \"int\";\n\t} else if (!strcmp (var->type, \"uint32_t\")) {\n\t\texpand = \"unsigned int\";\n\t} else if (!strcmp (var->type, \"uint64_t\")) {\n\t\texpand = \"unsigned long long\";\n\t}\n\tconst char *tmp = strstr (expand, \"int\");\n\tbool is_default = tmp != NULL;\n\tif (!is_default && strncmp (var->type, \"void\", 4)) {\n\t\t// return since type is already propagated\n\t\t// except for \"void *\", since \"void *\" => \"char *\" is possible\n\t\treturn;\n\t}\n\tRStrBuf *sb = r_strbuf_new (\"\");\n\tif (pfx) {\n\t\tif (is_default && strncmp (var->type, \"signed\", 6)) {\n\t\t\tr_strbuf_setf (sb, \"%s %s\", type, tmp);\n\t\t} else {\n\t\t\tr_strbuf_free (sb);\n\t\t\treturn;\n\t\t}\n\t} else {\n\t\tr_strbuf_set (sb, type);\n\t}\n\tif (!strncmp (r_strbuf_get (sb), \"const \", 6)) {\n\t\t// Dropping const from type\n\t\t//TODO: Inferring const type\n\t\tr_strbuf_setf (sb, \"%s\", type + 6);\n\t}\n\tif (is_ptr) {\n\t\t//type *ptr => type *\n\t\tr_strbuf_append (sb, \" *\");\n\t}\n\tif (ref) {\n\t\tif (r_str_endswith (r_strbuf_get (sb), \"*\")) { // type * => type **\n\t\t\tr_strbuf_append (sb, \"*\");\n\t\t} else {   //  type => type *\n\t\t\tr_strbuf_append (sb, \" *\");\n\t\t}\n\t}\n\n\tchar* tmp1 = r_strbuf_get (sb);\n\tif (r_str_startswith (tmp1, \"unsigned long long\")) {\n\t\tr_strbuf_set (sb, \"uint64_t\");\n\t} else if (r_str_startswith (tmp1, \"unsigned\")) {\n\t\tr_strbuf_set (sb, \"uint32_t\");\n\t} else if (r_str_startswith (tmp1, \"int\")) {\n\t\tr_strbuf_set (sb, \"int32_t\");\n\t}\n\tr_anal_var_set_type (var, r_strbuf_get (sb));\n\tr_strbuf_free (sb);\n}\n\nstatic void get_src_regname(RCore *core, ut64 addr, char *regname, int size) {\n\tRAnal *anal = core->anal;\n\tRAnalOp *op = r_core_anal_op (core, addr, R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_ESIL);\n\tif (!op || r_strbuf_is_empty (&op->esil)) {\n\t\tr_anal_op_free (op);\n\t\treturn;\n\t}\n\tchar *op_esil = strdup (r_strbuf_get (&op->esil));\n\tchar *tmp = strchr (op_esil, ',');\n\tif (tmp) {\n\t\t*tmp = '\\0';\n\t}\n\tmemset (regname, 0, size);\n\tRRegItem *ri = r_reg_get (anal->reg, op_esil, -1);\n\tif (ri) {\n\t\tif ((anal->bits == 64) && (ri->size == 32)) {\n\t\t\tconst char *reg = r_reg_32_to_64 (anal->reg, op_esil);\n\t\t\tif (reg) {\n\t\t\t\tfree (op_esil);\n\t\t\t\top_esil = strdup (reg);\n\t\t\t}\n\t\t}\n\t\tstrncpy (regname, op_esil, size - 1);\n\t}\n\tfree (op_esil);\n\tr_anal_op_free (op);\n}\n\nstatic ut64 get_addr(Sdb *trace, const char *regname, int idx) {\n\tif (!regname || !*regname) {\n\t\treturn UT64_MAX;\n\t}\n\tconst char *query = sdb_fmt (\"%d.reg.read.%s\", idx, regname);\n\treturn r_num_math (NULL, sdb_const_get (trace, query, 0));\n}\n\nstatic _RAnalCond cond_invert(RAnal *anal, _RAnalCond cond) {\n\tswitch (cond) {\n\tcase R_ANAL_COND_LE:\n\t\treturn R_ANAL_COND_GT;\n\tcase R_ANAL_COND_LT:\n\t\treturn R_ANAL_COND_GE;\n\tcase R_ANAL_COND_GE:\n\t\treturn R_ANAL_COND_LT;\n\tcase R_ANAL_COND_GT:\n\t\treturn R_ANAL_COND_LE;\n\tdefault:\n\t\tif (anal->verbose) {\n\t\t\teprintf (\"Unhandled conditional swap\\n\");\n\t\t}\n\t\tbreak;\n\t}\n\treturn 0; // 0 is COND_ALways...\n\t/* I haven't looked into it but I suspect that this might be confusing:\n\tthe opposite of any condition not in the list above is \"always\"? */\n}\n\nstatic RList *parse_format(RCore *core, char *fmt) {\n\tif (!fmt || !*fmt) {\n\t\treturn NULL;\n\t}\n\tRList *ret = r_list_new ();\n\tif (!ret) {\n\t\treturn NULL;\n\t}\n\tSdb *s = core->anal->sdb_fmts;\n\tconst char *spec = r_config_get (core->config, \"anal.types.spec\");\n\tchar arr[10] = {0};\n\tchar *ptr = strchr (fmt, '%');\n\tfmt[strlen (fmt) - 1] = '\\0';\n\twhile (ptr) {\n\t\tptr++;\n\t\t// strip [width] specifier\n\t\twhile (IS_DIGIT (*ptr)) {\n\t\t\tptr++;\n\t\t}\n\t\tr_str_ncpy (arr, ptr, sizeof (arr) - 1);\n\t\tchar *tmp = arr;\n\t\twhile (tmp && (IS_LOWER (*tmp) || IS_UPPER (*tmp))) {\n\t\t\ttmp++;\n\t\t}\n\t\t*tmp = '\\0';\n\t\tconst char *query = sdb_fmt (\"spec.%s.%s\", spec, arr);\n\t\tchar *type = (char *) sdb_const_get (s, query, 0);\n\t\tif (type) {\n\t\t\tr_list_append (ret, type);\n\t\t}\n\t\tptr = strchr (ptr, '%');\n\t}\n\treturn ret;\n}\n\nstatic void retype_callee_arg(RAnal *anal, const char *callee_name, bool in_stack, const char *place, int size, const char *type) {\n\tRAnalFunction *fcn = r_anal_get_function_byname (anal, callee_name);\n\tif (!fcn) {\n\t\treturn;\n\t}\n\tif (in_stack) {\n\t\tRAnalVar *var = r_anal_function_get_var (fcn, R_ANAL_VAR_KIND_BPV, size - fcn->bp_off + 8);\n\t\tif (!var) {\n\t\t\treturn;\n\t\t}\n\t\t__var_retype (anal, var, NULL, type, false, false);\n\t} else {\n\t\tRRegItem *item = r_reg_get (anal->reg, place, -1);\n\t\tif (!item) {\n\t\t\treturn;\n\t\t}\n\t\tRAnalVar *rvar = r_anal_function_get_var (fcn, R_ANAL_VAR_KIND_REG, item->index);\n\t\tif (!rvar) {\n\t\t\treturn;\n\t\t}\n\t\tchar *t = strdup (type);\n\t\t__var_retype (anal, rvar, NULL, type, false, false);\n\t\tRAnalVar *lvar = r_anal_var_get_dst_var (rvar);\n\t\tif (lvar) {\n\t\t\t__var_retype (anal, lvar, NULL, t, false, false);\n\t\t}\n\t\tfree (t);\n\t}\n}\n\n#define DEFAULT_MAX 3\n#define REGNAME_SIZE 10\n#define MAX_INSTR 5\n\n/**\n * type match at a call instruction inside another function\n *\n * \\param fcn_name name of the callee\n * \\param addr addr of the call instruction\n * \\param baddr addr of the caller function\n * \\param cc cc of the callee\n * \\param prev_idx index in the esil trace\n * \\param userfnc whether the callee is a user function (affects propagation direction)\n * \\param caddr addr of the callee\n */\nstatic void type_match(RCore *core, char *fcn_name, ut64 addr, ut64 baddr, const char* cc,\n\t\tint prev_idx, bool userfnc, ut64 caddr) {\n\tSdb *trace = core->anal->esil->trace->db;\n\tSdb *TDB = core->anal->sdb_types;\n\tRAnal *anal = core->anal;\n\tRList *types = NULL;\n\tint idx = sdb_num_get (trace, \"idx\", 0);\n\tbool verbose = r_config_get_i (core->config, \"anal.types.verbose\");\n\tbool stack_rev = false, in_stack = false, format = false;\n\n\tif (!fcn_name || !cc) {\n\t\treturn;\n\t}\n\tint i, j, pos = 0, size = 0, max = r_type_func_args_count (TDB, fcn_name);\n\tconst char *place = r_anal_cc_arg (anal, cc, ST32_MAX);\n\tr_cons_break_push (NULL, NULL);\n\n\tif (place && !strcmp (place, \"stack_rev\")) {\n\t\tstack_rev = true;\n\t}\n\tplace = r_anal_cc_arg (anal, cc, 0);\n\tif (place && r_str_startswith (\"stack\", place)) {\n\t\tin_stack = true;\n\t}\n\tif (verbose && !strncmp (fcn_name, \"sym.imp.\", 8)) {\n\t\teprintf (\"%s missing function definition\\n\", fcn_name + 8);\n\t}\n\tif (!max) {\n\t\tif (!in_stack) {\n\t\t\tmax = r_anal_cc_max_arg (anal, cc);\n\t\t} else {\n\t\t\tmax = DEFAULT_MAX;\n\t\t}\n\t}\n\tfor (i = 0; i < max; i++) {\n\t\tint arg_num = stack_rev ? (max - 1 - i) : i;\n\t\tchar *type = NULL;\n\t\tconst char *name = NULL;\n\t\tif (format) {\n\t\t\tif (r_list_empty (types)) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttype = r_str_new (r_list_get_n (types, pos++));\n\t\t} else {\n\t\t\ttype = r_type_func_args_type (TDB, fcn_name, arg_num);\n\t\t\tname = r_type_func_args_name (TDB, fcn_name, arg_num);\n\t\t}\n\t\tif (!type && !userfnc) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (!in_stack) {\n\t\t\t//XXX: param arg_num must be fixed to support floating point register\n\t\t\tplace = r_anal_cc_arg (anal, cc, arg_num);\n\t\t\tif (place && r_str_startswith (\"stack\", place)) {\n\t\t\t\tin_stack = true;\n\t\t\t}\n\t\t}\n\t\tchar regname[REGNAME_SIZE] = {0};\n\t\tut64 xaddr = UT64_MAX;\n\t\tbool memref = false;\n\t\tbool cmt_set = false;\n\t\tbool res = false;\n\t\t// Backtrace instruction from source sink to prev source sink\n\t\tfor (j = idx; j >= prev_idx; j--) {\n\t\t\tut64 instr_addr = sdb_num_get (trace, sdb_fmt (\"%d.addr\", j), 0);\n\t\t\tif (instr_addr < baddr) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRAnalOp *op = r_core_anal_op (core, instr_addr, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_VAL);\n\t\t\tif (!op) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRAnalOp *next_op = r_core_anal_op (core, instr_addr + op->size, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_VAL);\n\t\t\tif (!next_op || (j != idx && (next_op->type == R_ANAL_OP_TYPE_CALL\n\t\t\t\t\t\t\t|| next_op->type == R_ANAL_OP_TYPE_JMP))) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tr_anal_op_free (next_op);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tRAnalVar *var = r_anal_get_used_function_var (anal, op->addr);\n\t\t\tconst char *query = sdb_fmt (\"%d.mem.read\", j);\n\t\t\tif (op->type == R_ANAL_OP_TYPE_MOV && sdb_const_get (trace, query, 0)) {\n\t\t\t\tmemref = ! (!memref && var && (var->kind != R_ANAL_VAR_KIND_REG));\n\t\t\t}\n\t\t\t// Match type from function param to instr\n\t\t\tif (type_pos_hit (anal, trace, in_stack, j, size, place)) {\n\t\t\t\tif (!cmt_set && type && name) {\n\t\t\t\t\tr_meta_set_string (anal, R_META_TYPE_VARTYPE, instr_addr,\n\t\t\t\t\t\t\tsdb_fmt (\"%s%s%s\", type, r_str_endswith (type, \"*\") ? \"\" : \" \", name));\n\t\t\t\t\tcmt_set = true;\n\t\t\t\t\tif ((op->ptr && op->ptr != UT64_MAX) && !strcmp (name, \"format\")) {\n\t\t\t\t\t\tRFlagItem *f = r_flag_get_by_spaces (core->flags, op->ptr, R_FLAGS_FS_STRINGS, NULL);\n\t\t\t\t\t\tif (f) {\n\t\t\t\t\t\t\tchar formatstr[0x200];\n\t\t\t\t\t\t\tint read = r_io_nread_at (core->io, f->offset, (ut8 *)formatstr, R_MIN (sizeof (formatstr) - 1, f->size));\n\t\t\t\t\t\t\tif (read > 0) {\n\t\t\t\t\t\t\t\tformatstr[read] = '\\0';\n\t\t\t\t\t\t\t\tif ((types = parse_format (core, formatstr))) {\n\t\t\t\t\t\t\t\t\tmax += r_list_length (types);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tformat = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (var) {\n\t\t\t\t\tif (!userfnc) {\n\t\t\t\t\t\t// not a userfunction, propagate the callee's arg types into our function's vars\n\t\t\t\t\t\t__var_retype (anal, var, name, type, memref, false);\n\t\t\t\t\t\t__var_rename (anal, var, name, addr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// callee is a userfunction, propagate our variable's type into the callee's args\n\t\t\t\t\t\tretype_callee_arg (anal, fcn_name, in_stack, place, size, var->type);\n\t\t\t\t\t}\n\t\t\t\t\tres = true;\n\t\t\t\t} else {\n\t\t\t\t\tget_src_regname (core, instr_addr, regname, sizeof (regname));\n\t\t\t\t\txaddr = get_addr (trace, regname, j);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Type propagate by following source reg\n\t\t\tif (!res && *regname && SDB_CONTAINS (j, regname)) {\n\t\t\t\tif (var) {\n\t\t\t\t\tif (!userfnc) {\n\t\t\t\t\t\t// not a userfunction, propagate the callee's arg types into our function's vars\n\t\t\t\t\t\t__var_retype (anal, var, name, type, memref, false);\n\t\t\t\t\t\t__var_rename (anal, var, name, addr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// callee is a userfunction, propagate our variable's type into the callee's args\n\t\t\t\t\t\tretype_callee_arg (anal, fcn_name, in_stack, place, size, var->type);\n\t\t\t\t\t}\n\t\t\t\t\tres = true;\n\t\t\t\t} else {\n\t\t\t\t\tswitch (op->type) {\n\t\t\t\t\tcase R_ANAL_OP_TYPE_MOV:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_PUSH:\n\t\t\t\t\t\tget_src_regname (core, instr_addr, regname, sizeof (regname));\n\t\t\t\t\t\tbreak;\n\t\t\t\t\tcase R_ANAL_OP_TYPE_LEA:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_LOAD:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_STORE:\n\t\t\t\t\t\tres = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else if (var && res && xaddr && (xaddr != UT64_MAX)) { // Type progation using value\n\t\t\t\tchar tmp[REGNAME_SIZE] = {0};\n\t\t\t\tget_src_regname (core, instr_addr, tmp, sizeof (tmp));\n\t\t\t\tut64 ptr = get_addr (trace, tmp, j);\n\t\t\t\tif (ptr == xaddr) {\n\t\t\t\t\t__var_retype (anal, var, name, r_str_get_fail (type, \"int\"), memref, false);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_anal_op_free (op);\n\t\t\tr_anal_op_free (next_op);\n\t\t}\n\t\tsize += anal->bits / 8;\n\t\tfree (type);\n\t}\n\tr_list_free (types);\n\tr_cons_break_pop ();\n}\n\nstatic int bb_cmpaddr(const void *_a, const void *_b) {\n\tconst RAnalBlock *a = _a, *b = _b;\n\treturn a->addr > b->addr ? 1 : (a->addr < b->addr ? -1 : 0);\n}\n\nR_API void r_core_anal_type_match(RCore *core, RAnalFunction *fcn) {\n\tRAnalBlock *bb;\n\tRListIter *it;\n\tRAnalOp aop = {0};\n\tbool resolved = false;\n\n\tr_return_if_fail (core && core->anal && fcn);\n\n\tif (!core->anal->esil) {\n\t\teprintf (\"Please run aeim\\n\");\n\t\treturn;\n\t}\n\n\tRAnal *anal = core->anal;\n\tSdb *TDB = anal->sdb_types;\n\tbool chk_constraint = r_config_get_i (core->config, \"anal.types.constraint\");\n\tint ret, bsize = R_MAX (64, core->blocksize);\n\tconst int mininstrsz = r_anal_archinfo (anal, R_ANAL_ARCHINFO_MIN_OP_SIZE);\n\tconst int minopcode = R_MAX (1, mininstrsz);\n\tint cur_idx , prev_idx = 0;\n\tRConfigHold *hc = r_config_hold_new (core->config);\n\tif (!hc) {\n\t\treturn;\n\t}\n\tRDebugTrace *dt = NULL;\n\tRAnalEsilTrace *et = NULL;\n\tif (!anal_emul_init (core, hc, &dt, &et) || !fcn) {\n\t\tanal_emul_restore (core, hc, dt, et);\n\t\treturn;\n\t}\n\tut8 *buf = malloc (bsize);\n\tif (!buf) {\n\t\tanal_emul_restore (core, hc, dt, et);\n\t\treturn;\n\t}\n\n\t// Reserve bigger ht to avoid rehashing\n\tSdb *etracedb = core->anal->esil->trace->db;\n\tHtPPOptions opt = etracedb->ht->opt;\n\tht_pp_free (etracedb->ht);\n\tetracedb->ht = ht_pp_new_size (fcn->ninstr * 0xf, opt.dupvalue, opt.freefn, opt.calcsizeV);\n\tetracedb->ht->opt = opt;\n\tRDebugTrace *dtrace = core->dbg->trace;\n\topt = dtrace->ht->opt;\n\tht_pp_free (dtrace->ht);\n\tdtrace->ht = ht_pp_new_size (fcn->ninstr, opt.dupvalue, opt.freefn, opt.calcsizeV);\n\tdtrace->ht->opt = opt;\n\n\tchar *fcn_name = NULL;\n\tchar *ret_type = NULL;\n\tbool str_flag = false;\n\tbool prop = false;\n\tbool prev_var = false;\n\tchar prev_type[256] = {0};\n\tconst char *prev_dest = NULL;\n\tchar *ret_reg = NULL;\n\tconst char *_pc = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);\n\tif (!_pc) {\n\t\tfree (buf);\n\t\treturn;\n\t}\n\tchar *pc = strdup (_pc);\n\tr_cons_break_push (NULL, NULL);\n\tr_list_sort (fcn->bbs, bb_cmpaddr); // TODO: The algorithm can be more accurate if blocks are followed by their jmp/fail, not just by address\n\tr_list_foreach (fcn->bbs, it, bb) {\n\t\tut64 addr = bb->addr;\n\t\tint i = 0;\n\t\tRRegItem *r = r_reg_get (core->dbg->reg, pc, -1);\n\t\tif (!r) {\n\t\t\tfree (buf);\n\t\t\treturn;\n\t\t}\n\t\tr_reg_set_value (core->dbg->reg, r, addr);\n\t\twhile (1) {\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tgoto out_function;\n\t\t\t}\n\t\t\tif (i >= (bsize - 32)) {\n\t\t\t\ti = 0;\n\t\t\t}\n\t\t\tut64 pcval = r_reg_getv (anal->reg, pc);\n\t\t\tif ((addr >= bb->addr + bb->size) || (addr < bb->addr) || pcval != addr) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!i) {\n\t\t\t\tr_io_read_at (core->io, addr, buf, bsize);\n\t\t\t}\n\t\t\tret = r_anal_op (anal, &aop, addr, buf + i, bsize - i, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_VAL);\n\t\t\tif (ret <= 0) {\n\t\t\t\ti += minopcode;\n\t\t\t\taddr += minopcode;\n\t\t\t\tr_anal_op_fini (&aop);\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint loop_count = sdb_num_get (anal->esil->trace->db, sdb_fmt (\"0x%\"PFMT64x\".count\", addr), 0);\n\t\t\tif (loop_count > LOOP_MAX || aop.type == R_ANAL_OP_TYPE_RET) {\n\t\t\t\tr_anal_op_fini (&aop);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tsdb_num_set (anal->esil->trace->db, sdb_fmt (\"0x%\"PFMT64x\".count\", addr), loop_count + 1, 0);\n\t\t\tif (r_anal_op_nonlinear (aop.type)) {   // skip the instr\n\t\t\t\tRRegItem *r = r_reg_get (core->dbg->reg, pc, -1);\n\t\t\t\tif (!r) {\n\t\t\t\t\tfree (buf);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\tr_reg_set_value (core->dbg->reg, r, addr + ret);\n\t\t\t} else {\n\t\t\t\tr_core_esil_step (core, UT64_MAX, NULL, NULL, false);\n\t\t\t}\n\t\t\tbool userfnc = false;\n\t\t\tSdb *trace = anal->esil->trace->db;\n\t\t\tcur_idx = sdb_num_get (trace, \"idx\", 0);\n\t\t\tRAnalVar *var = r_anal_get_used_function_var (anal, aop.addr);\n\t\t\tRAnalOp *next_op = r_core_anal_op (core, addr + ret, R_ANAL_OP_MASK_BASIC); // | _VAL ?\n\t\t\tut32 type = aop.type & R_ANAL_OP_TYPE_MASK;\n\t\t\tif (aop.type == R_ANAL_OP_TYPE_CALL || aop.type & R_ANAL_OP_TYPE_UCALL) {\n\t\t\t\tchar *full_name = NULL;\n\t\t\t\tut64 callee_addr;\n\t\t\t\tif (aop.type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t\t\tRAnalFunction *fcn_call = r_anal_get_fcn_in (anal, aop.jump, -1);\n\t\t\t\t\tif (fcn_call) {\n\t\t\t\t\t\tfull_name = fcn_call->name;\n\t\t\t\t\t\tcallee_addr = fcn_call->addr;\n\t\t\t\t\t}\n\t\t\t\t} else if (aop.ptr != UT64_MAX) {\n\t\t\t\t\tRFlagItem *flag = r_flag_get_by_spaces (core->flags, aop.ptr, R_FLAGS_FS_IMPORTS, NULL);\n\t\t\t\t\tif (flag && flag->realname) {\n\t\t\t\t\t\tfull_name = flag->realname;\n\t\t\t\t\t\tcallee_addr = aop.ptr;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (full_name) {\n\t\t\t\t\tif (r_type_func_exist (TDB, full_name)) {\n\t\t\t\t\t\tfcn_name = strdup (full_name);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfcn_name = r_type_func_guess (TDB, full_name);\n\t\t\t\t\t}\n\t\t\t\t\tif (!fcn_name) {\n\t\t\t\t\t\tfcn_name = strdup (full_name);\n\t\t\t\t\t\tuserfnc = true;\n\t\t\t\t\t}\n\t\t\t\t\tconst char* Cc = r_anal_cc_func (anal, fcn_name);\n\t\t\t\t\tif (Cc && r_anal_cc_exist (anal, Cc)) {\n\t\t\t\t\t\tchar *cc = strdup (Cc);\n\t\t\t\t\t\ttype_match (core, fcn_name, addr, bb->addr, cc, prev_idx, userfnc, callee_addr);\n\t\t\t\t\t\tprev_idx = cur_idx;\n\t\t\t\t\t\tR_FREE (ret_type);\n\t\t\t\t\t\tconst char *rt = r_type_func_ret (TDB, fcn_name);\n\t\t\t\t\t\tif (rt) {\n\t\t\t\t\t\t\tret_type = strdup (rt);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tR_FREE (ret_reg);\n\t\t\t\t\t\tconst char *rr = r_anal_cc_ret (anal, cc);\n\t\t\t\t\t\tif (rr) {\n\t\t\t\t\t\t\tret_reg = strdup (rr);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tresolved = false;\n\t\t\t\t\t\tfree (cc);\n\t\t\t\t\t}\n\t\t\t\t\tif (!strcmp (fcn_name, \"__stack_chk_fail\")) {\n\t\t\t\t\t\tconst char *query = sdb_fmt (\"%d.addr\", cur_idx - 1);\n\t\t\t\t\t\tut64 mov_addr = sdb_num_get (trace, query, 0);\n\t\t\t\t\t\tRAnalOp *mop = r_core_anal_op (core, mov_addr, R_ANAL_OP_MASK_VAL | R_ANAL_OP_MASK_BASIC);\n\t\t\t\t\t\tif (mop) {\n\t\t\t\t\t\t\tRAnalVar *mopvar = r_anal_get_used_function_var (anal, mop->addr);\n\t\t\t\t\t\t\tut32 type = mop->type & R_ANAL_OP_TYPE_MASK;\n\t\t\t\t\t\t\tif (type == R_ANAL_OP_TYPE_MOV) {\n\t\t\t\t\t\t\t\t__var_rename (anal, mopvar, \"canary\", addr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_anal_op_free (mop);\n\t\t\t\t\t}\n\t\t\t\t\tfree (fcn_name);\n\t\t\t\t}\n\t\t\t} else if (!resolved && ret_type && ret_reg) {\n\t\t\t\t// Forward propgation of function return type\n\t\t\t\tchar src[REGNAME_SIZE] = {0};\n\t\t\t\tconst char *query = sdb_fmt (\"%d.reg.write\", cur_idx);\n\t\t\t\tconst char *cur_dest = sdb_const_get (trace, query, 0);\n\t\t\t\tget_src_regname (core, aop.addr, src, sizeof (src));\n\t\t\t\tif (ret_reg && *src && strstr (ret_reg, src)) {\n\t\t\t\t\tif (var && aop.direction == R_ANAL_OP_DIR_WRITE) {\n\t\t\t\t\t\t__var_retype (anal, var, NULL, ret_type, false, false);\n\t\t\t\t\t\tresolved = true;\n\t\t\t\t\t} else if (type == R_ANAL_OP_TYPE_MOV) {\n\t\t\t\t\t\tR_FREE (ret_reg);\n\t\t\t\t\t\tif (cur_dest) {\n\t\t\t\t\t\t\tret_reg = strdup (cur_dest);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t} else if (cur_dest) {\n\t\t\t\t\tchar *foo = strdup (cur_dest);\n\t\t\t\t\tchar *tmp = strchr (foo, ',');\n\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\t*tmp++ = '\\0';\n\t\t\t\t\t}\n\t\t\t\t\tif (ret_reg && (strstr (ret_reg, foo) || (tmp && strstr (ret_reg, tmp)))) {\n\t\t\t\t\t\tresolved = true;\n\t\t\t\t\t} else if (type == R_ANAL_OP_TYPE_MOV &&\n\t\t\t\t\t\t\t(next_op && next_op->type == R_ANAL_OP_TYPE_MOV)){\n\t\t\t\t\t\t// Progate return type passed using pointer\n\t\t\t\t\t\t// int *ret; *ret = strlen(s);\n\t\t\t\t\t\t// TODO: memref check , dest and next src match\n\t\t\t\t\t\tchar nsrc[REGNAME_SIZE] = {0};\n\t\t\t\t\t\tget_src_regname (core, next_op->addr, nsrc, sizeof (nsrc));\n\t\t\t\t\t\tif (ret_reg && *nsrc && strstr (ret_reg, nsrc) && var &&\n\t\t\t\t\t\t\t\taop.direction == R_ANAL_OP_DIR_READ) {\n\t\t\t\t\t\t\t__var_retype (anal, var, NULL, ret_type, true, false);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfree (foo);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Type propagation using instruction access pattern\n\t\t\tif (var) {\n\t\t\t\tbool sign = false;\n\t\t\t\tif ((type == R_ANAL_OP_TYPE_CMP) && next_op) {\n\t\t\t\t\tif (next_op->sign) {\n\t\t\t\t\t\tsign = true;\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// cmp [local_ch], rax ; jb\n\t\t\t\t\t\t__var_retype (anal, var, NULL, \"unsigned\", false, true);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// cmp [local_ch], rax ; jge\n\t\t\t\tif (sign || aop.sign) {\n\t\t\t\t\t__var_retype (anal, var, NULL, \"signed\", false, true);\n\t\t\t\t}\n\t\t\t\t// lea rax , str.hello  ; mov [local_ch], rax;\n\t\t\t\t// mov rdx , [local_4h] ; mov [local_8h], rdx;\n\t\t\t\tif (prev_dest && (type == R_ANAL_OP_TYPE_MOV || type == R_ANAL_OP_TYPE_STORE)) {\n\t\t\t\t\tchar reg[REGNAME_SIZE] = {0};\n\t\t\t\t\tget_src_regname (core, addr, reg, sizeof (reg));\n\t\t\t\t\tbool match = strstr (prev_dest, reg) != NULL;\n\t\t\t\t\tif (str_flag && match) {\n\t\t\t\t\t\t__var_retype (anal, var, NULL, \"const char *\", false, false);\n\t\t\t\t\t}\n\t\t\t\t\tif (prop && match && prev_var) {\n\t\t\t\t\t\t__var_retype (anal, var, NULL, prev_type, false, false);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (chk_constraint && var && (type == R_ANAL_OP_TYPE_CMP && aop.disp != UT64_MAX)\n\t\t\t\t\t\t&& next_op && next_op->type == R_ANAL_OP_TYPE_CJMP) {\n\t\t\t\t\tbool jmp = false;\n\t\t\t\t\tRAnalOp *jmp_op = {0};\n\t\t\t\t\tut64 jmp_addr = next_op->jump;\n\t\t\t\t\tRAnalBlock *jmpbb = r_anal_fcn_bbget_in (anal, fcn, jmp_addr);\n\n\t\t\t\t\t// Check exit status of jmp branch\n\t\t\t\t\tfor (i = 0; i < MAX_INSTR ; i++) {\n\t\t\t\t\t\tjmp_op = r_core_anal_op (core, jmp_addr, R_ANAL_OP_MASK_BASIC);\n\t\t\t\t\t\tif (!jmp_op) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif ((jmp_op->type == R_ANAL_OP_TYPE_RET && r_anal_block_contains (jmpbb, jmp_addr))\n\t\t\t\t\t\t\t\t|| jmp_op->type == R_ANAL_OP_TYPE_CJMP) {\n\t\t\t\t\t\t\tjmp = true;\n\t\t\t\t\t\t\tr_anal_op_free (jmp_op);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tjmp_addr += jmp_op->size;\n\t\t\t\t\t\tr_anal_op_free (jmp_op);\n\t\t\t\t\t}\n\t\t\t\t\tRAnalVarConstraint constr = {\n\t\t\t\t\t\t.cond = jmp? cond_invert (anal, next_op->cond): next_op->cond,\n\t\t\t\t\t\t.val = aop.val\n\t\t\t\t\t};\n\t\t\t\t\tr_anal_var_add_constraint (var, &constr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprev_var = (var && aop.direction == R_ANAL_OP_DIR_READ);\n\t\t\tstr_flag = false;\n\t\t\tprop = false;\n\t\t\tprev_dest = NULL;\n\t\t\tswitch (type) {\n\t\t\tcase R_ANAL_OP_TYPE_MOV:\n\t\t\tcase R_ANAL_OP_TYPE_LEA:\n\t\t\tcase R_ANAL_OP_TYPE_LOAD:\n\t\t\t\tif (aop.ptr && aop.refptr && aop.ptr != UT64_MAX) {\n\t\t\t\t\tif (type == R_ANAL_OP_TYPE_LOAD) {\n\t\t\t\t\t\tut8 buf[256] = {0};\n\t\t\t\t\t\tr_io_read_at (core->io, aop.ptr, buf, sizeof (buf) - 1);\n\t\t\t\t\t\tut64 ptr = r_read_ble (buf, core->print->big_endian, aop.refptr * 8);\n\t\t\t\t\t\tif (ptr && ptr != UT64_MAX) {\n\t\t\t\t\t\t\tRFlagItem *f = r_flag_get_by_spaces (core->flags, ptr, R_FLAGS_FS_STRINGS, NULL);\n\t\t\t\t\t\t\tif (f) {\n\t\t\t\t\t\t\t\tstr_flag = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t} else if (r_flag_exist_at (core->flags, \"str\", 3, aop.ptr)) {\n\t\t\t\t\t\tstr_flag = true;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\t// mov dword [local_4h], str.hello;\n\t\t\t\tif (var && str_flag) {\n\t\t\t\t\t__var_retype (anal, var, NULL, \"const char *\", false, false);\n\t\t\t\t}\n\t\t\t\tconst char *query = sdb_fmt (\"%d.reg.write\", cur_idx);\n\t\t\t\tprev_dest = sdb_const_get (trace, query, 0);\n\t\t\t\tif (var) {\n\t\t\t\t\tstrncpy (prev_type, var->type, sizeof (prev_type) - 1);\n\t\t\t\t\tprop = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\ti += ret;\n\t\t\taddr += ret;\n\t\t\tr_anal_op_free (next_op);\n\t\t\tr_anal_op_fini (&aop);\n\n\t\t}\n\t}\n\t// Type propgation for register based args\n\tRList *list = r_anal_var_list (anal, fcn, R_ANAL_VAR_KIND_REG);\n\tRAnalVar *rvar;\n\tRListIter *iter;\n\tr_list_foreach (list, iter, rvar) {\n\t\tRAnalVar *lvar = r_anal_var_get_dst_var (rvar);\n\t\tRRegItem *i = r_reg_index_get (anal->reg, rvar->delta);\n\t\tif (!i) {\n\t\t\tcontinue;\n\t\t}\n\t\tif (lvar) {\n\t\t\t// Propagate local var type = to => register-based var\n\t\t\t__var_retype (anal, rvar, NULL, lvar->type, false, false);\n\t\t\t// Propagate local var type <= from = register-based var\n\t\t\t__var_retype (anal, lvar, NULL, rvar->type, false, false);\n\t\t}\n\t}\n\tr_list_free (list);\nout_function:\n\tR_FREE (ret_reg);\n\tR_FREE (ret_type);\n\tfree (buf);\n\tr_cons_break_pop();\n\tanal_emul_restore (core, hc, dt, et);\n\tfree (pc);\n}\n", "/* radare - LGPL - Copyright 2009-2021 - pancake, maijin */\n\n#include <r_core.h>\n#include <r_util/r_graph_drawable.h>\n\n#define SLOW_ANALYSIS 1\n#define MAX_SCAN_SIZE 0x7ffffff\n// should be 1 unless it makes the CI sad\n\nstatic const char *help_msg_a[] = {\n\t\"Usage:\", \"a\", \"[abdefFghoprxstc] [...]\",\n\t\"a\", \"\", \"alias for aai - analysis information\",\n\t\"a*\", \"\", \"same as afl*;ah*;ax*\",\n\t\"aa\", \"[?]\", \"analyze all (fcns + bbs) (aa0 to avoid sub renaming)\",\n\t\"a8\", \" [hexpairs]\", \"analyze bytes\",\n\t\"ab\", \"[?]\", \"analyze basic block\",\n\t\"ac\", \"[?]\", \"manage classes\",\n\t\"aC\", \"[?]\", \"analyze function call\",\n\t\"ad\", \"[?]\", \"analyze data trampoline (wip)\",\n\t\"ad\", \" [from] [to]\", \"analyze data pointers to (from-to)\",\n\t\"ae\", \"[?] [expr]\", \"analyze opcode eval expression (see ao)\",\n\t\"af\", \"[?]\", \"analyze functions\",\n\t\"aF\", \"\", \"same as above, but using anal.depth=1\",\n\t\"ag\", \"[?] [options]\", \"draw graphs in various formats\",\n\t\"ah\", \"[?]\", \"analysis hints (force opcode size, ...)\",\n\t\"ai\", \" [addr]\", \"address information (show perms, stack, heap, ...)\",\n\t\"aj\", \"\", \"same as a* but in json (aflj)\",\n\t\"aL\", \"\", \"list all asm/anal plugins (e asm.arch=?)\",\n\t\"an\", \"[?] [name]\", \"show/rename/create whatever var/flag/function is used in current instruction\",\n\t\"ao\", \"[?] [len]\", \"analyze Opcodes (or emulate it)\",\n\t\"aO\", \"[?] [len]\", \"Analyze N instructions in M bytes\",\n\t\"ap\", \"\", \"find prelude for current offset\",\n\t\"ar\", \"[?]\", \"like 'dr' but for the esil vm. (registers)\",\n\t\"as\", \"[?] [num]\", \"analyze syscall using dbg.reg\",\n\t\"av\", \"[?] [.]\", \"show vtables\",\n\t\"avg\", \"[?] [.]\", \"manage global variables\",\n\t\"ax\", \"[?]\", \"manage refs/xrefs (see also afx?)\",\n\tNULL\n};\n\nstatic const char *help_msg_afna[] = {\n\t\"Usage:\", \"afna\", \" # construct a function name and rename the function for the current offset.\",\n\t\"\", \"\", \"Based on flags or methods calls found inside that function.\",\n\tNULL\n};\n\nstatic const char *help_msg_afu[] = {\n\t\"Usage:\", \"afu\", \"[addr]   # resize and analyze function from current address until addr.\",\n\t\"afu\", \" 0x100004093\", \"Resize and analyze function from current address until 0x100004093\",\n\tNULL\n};\n\nstatic const char *help_msg_afm[] = {\n\t\"Usage:\", \"afm\", \"[name]   # merge two functions.\",\n\t\"afm\", \" sym.func.100003d74\", \"Merge current function into 0x100003d74\",\n\tNULL\n};\n\nstatic const char *help_msg_aF[] = {\n\t\"Usage:\", \"aF\", \" # analyze a function, but using anal.depth=1\",\n\t\"aF\", \"\", \"Check af? for more options and information.\",\n\tNULL\n};\n\nstatic const char *help_msg_an[] = {\n\t\"Usage:\", \"an\", \" # show flag/function/name at current address\",\n\t\"an\", \"\", \"ShowCheck af? for more options and information.\",\n\t\"anj\", \"\", \"Same as above but in json\",\n\tNULL\n};\n\nstatic const char *help_msg_a8[] = {\n\t\"Usage:\", \"a8\", \"[hexpairs]   # analyze the byte array given as input\",\n\t\"a8 \", \"5548\", \"analyzes 5548 byte array\",\n\tNULL\n};\n\n\nstatic const char *help_msg_ap[] = {\n\t\"Usage:\", \"ap[?]\", \" # analyze prelude in current offset\",\n\t\"ap\", \"\", \"check if current offset contains a function prelude\",\n\tNULL\n};\n\nstatic const char *help_msg_avg[] = {\n\t\"Usage:\", \"avg\", \" # analyze variable global\",\n\t\"avg\", \"\", \"Use ESIL emulation to find out arguments of a call (uses 'abte')\",\n\t\"avg\", \" [type] [name]\", \"add global\",\n\t\"avg-\", \"\", \"delete global\",\n\tNULL\n};\n\nstatic const char *help_msg_aC[] = {\n\t\"Usage:\", \"aC[fej] [addr-of-call]\", \" # analyze call args\",\n\t\"aCe\", \"\", \"Use ESIL emulation to find out arguments of a call (uses 'abte')\",\n\t\"aCf\", \"\", \"Same as .aCe* $$ @@=`pdr~call`\",\n\tNULL\n};\n\nstatic const char *help_msg_aaf[] = {\n\t\"Usage:\", \"aaf[efrt?]\", \" # analyse all functionsee also 'af' and 'afna'\",\n\t\"aaf\", \"\", \"same as afr@@c:isq\",\n\t\"aafe\", \" \", \"same as aef@@F\",\n\t\"aaff\", \"\", \"set a flag for every function\", \n\t\"aafr\", \" [len]\", \"consecutive function analysis (e anal.hasnext=1;afr@@c:isq)\",\n\t\"aaft\", \"\", \"recursive type matching across all functions\",\n\tNULL\n};\n\nstatic const char *help_msg_aa[] = {\n\t\"Usage:\", \"aa[0*?]\", \" # see also 'af' and 'afna'\",\n\t\"aa\", \" \", \"alias for 'af@@ sym.*;af@entry0;afva'\", //;.afna @@ fcn.*'\",\n\t\"aaa\", \"[?]\", \"autoname functions after aa (see afna)\",\n\t\"aab\", \"\", \"abb across bin.sections.rx\",\n\t\"aac\", \" [len]\", \"analyze function calls (af @@ `pi len~call[1]`)\",\n\t\"aac*\", \" [len]\", \"flag function calls without performing a complete analysis\",\n\t\"aad\", \" [len]\", \"analyze data references to code\",\n\t\"aae\", \" [len] ([addr])\", \"analyze references with ESIL (optionally to address)\",\n\t\"aaef\", \"\", \"analyze references with ESIL in all functions\",\n\t\"aaf\", \"[efrt?] \", \"analyze all functions relationships with flags, type matching and consecutive\",\n\t\"aaF\", \" [sym*]\", \"set anal.in=block for all the spaces between flags matching glob\",\n\t\"aaFa\", \" [sym*]\", \"same as aaF but uses af/a2f instead of af+/afb+ (slower but more accurate)\",\n\t\"aai\", \"[j]\", \"show info of all analysis parameters\",\n\t\"aan\", \"[gr?]\", \"autoname functions (aang = golang, aanr = noreturn propagation)\",\n\t\"aao\", \"\", \"analyze all objc references\",\n\t\"aap\", \"\", \"find and analyze function preludes\",\n\t\"aar\", \"[?] [len]\", \"analyze len bytes of instructions for references\",\n\t\"aas\", \" [len]\", \"analyze symbols (af @@= `isq~[0]`)\",\n\t\"aaS\", \"\", \"analyze all flags starting with sym. (af @@ sym.*)\",\n\t\"aat\", \" [fcn]\", \"Analyze all/given function to convert immediate to linked structure offsets (see tl?)\",\n\t\"aaT\", \" [len]\", \"analyze code after trap-sleds\",\n\t\"aau\", \" [len]\", \"list mem areas (larger than len bytes) not covered by functions\",\n\t\"aav\", \" [sat]\", \"find values referencing a specific section or map\",\n\t\"aaw\", \"\", \"analyze all meta words (Cd) and add r. named flags for referenced pointers\",\n\tNULL\n};\n\nstatic const char *help_msg_afls[] = {\n\t\"Usage:\", \"afls\", \"[afls] # sort function list\",\n\t\"afls\", \"\", \"same as aflsa\",\n\t\"aflsa\", \"\", \"sort by address (same as afls)\",\n\t\"aflss\", \"\", \"sort by size\",\n\t\"aflsn\", \"\", \"sort by name\",\n\t\"aflsb\", \"\", \"sort by number of basic blocks\",\n\tNULL\n};\n\nstatic const char *help_msg_ai[] = {\n\t\"Usage:\", \"ai\", \"[j*] [sz] # analysis/address information/imports\",\n\t\"ai\", \" @addr\", \"show address information\",\n\t\"aii\", \" [namespace]\", \"global import (like afii, but global)\",\n\t\"aii\", \"-\", \"delete all global imports\",\n\t\"aij\", \" @addr\", \"show address information in JSON format\",\n\tNULL\n};\n\nstatic const char *help_msg_aar[] = {\n\t\"Usage:\", \"aar\", \"[j*] [sz] # search and analyze xrefs\",\n\t\"aar\", \" [sz]\", \"analyze xrefs in current section or sz bytes of code\",\n\t\"aar*\", \" [sz]\", \"list found xrefs in radare commands format\",\n\t\"aarj\", \" [sz]\", \"list found xrefs in JSON format\",\n\tNULL\n};\n\nstatic const char *help_msg_ab[] = {\n\t\"Usage:\", \"ab\", \"# analyze basic block\",\n\t\"ab\", \" [addr]\", \"show basic block information at given address\",\n\t\"ab.\", \"\", \"same as: ab $$\",\n\t\"aba\", \" [addr]\", \"analyze esil accesses in basic block (see aea?)\",\n\t\"abb\", \" [length]\", \"analyze N bytes and extract basic blocks\",\n\t\"abj\", \" [addr]\", \"display basic block information in JSON\",\n\t\"abl\", \"[,qj]\", \"list all basic blocks\",\n\t\"abx\", \" [hexpair-bytes]\", \"analyze N bytes\",\n\t\"abt\", \"[?] [addr] [num]\", \"find num paths from current offset to addr\",\n\tNULL\n};\n\nstatic const char *help_msg_abl[] = {\n\t\"Usage:\", \"abl\", \"analyzed basicblocks listing\",\n\t\"abl\", \"\", \"list all program-wide basic blocks analyzed\",\n\t\"abl,\", \" [table-query]\", \"render the list using a table\",\n\t\"ablj\", \"\", \"in json format\",\n\t\"ablq\", \"\", \"in quiet format\",\n\tNULL\n};\n\nstatic const char *help_msg_abt[] = {\n\t\"Usage:\", \"abt\", \"[addr] [num] # find num paths from current offset to addr\",\n\t\"abt\", \" [addr] [num]\", \"find num paths from current offset to addr\",\n\t\"abte\", \" [addr]\", \"emulate from beginning of function to the given address\",\n\t\"abtj\", \" [addr] [num]\", \"display paths in JSON\",\n\tNULL\n};\n\nstatic const char *help_msg_ac[] = {\n\t\"Usage:\", \"ac\", \"anal classes commands\",\n\t\"acl\", \"[j*]\", \"list all classes\",\n\t\"acll\", \"[j] (class_name)\", \"list all or single class detailed\",\n\t\"ac\", \" [class name]\", \"add class\",\n\t\"ac-\", \" [class name]\", \"delete class\",\n\t\"acn\", \" [class name] [new class name]\", \"rename class\",\n\t\"acv\", \" [class name] [addr] ([offset]) ([size])\", \"add vtable address to class\",\n\t\"acvf\", \" [offset] ([class name])\", \"lookup function address on vtable offset\",\n\t\"acv-\", \" [class name] [vtable id]\", \"delete vtable by id (from acv [class name])\",\n\t\"acb\", \" [class name]\", \"list bases of class\",\n\t\"acb\", \" [class name] [base class name] ([offset])\", \"add base class\",\n\t\"acb-\", \" [class name] [base class id]\", \"delete base by id (from acb [class name])\",\n\t\"acm\", \" [class name] [method name] [offset] ([vtable offset])\", \"add/edit method\",\n\t\"acm-\", \" [class name] [method name]\", \"delete method\",\n\t\"acmn\", \" [class name] [method name] [new name]\", \"rename method\",\n\t\"acg\", \"\", \"print inheritance ascii graph\",\n\t\"ac?\", \"\", \"show this help\",\n\tNULL\n};\n\nstatic const char *help_msg_ad[] = {\n\t\"Usage:\", \"ad\", \"[kt] [...]\",\n\t\"ad\", \" [N] [D]\", \"analyze N data words at D depth\",\n\t\"ad4\", \" [N] [D]\", \"analyze N data words at D depth (asm.bits=32)\",\n\t\"ad8\", \" [N] [D]\", \"analyze N data words at D depth (asm.bits=64)\",\n\t\"adf\", \"\", \"analyze data in function (use like .adf @@=`afl~[0]`\",\n\t\"adfg\", \"\", \"analyze data in function gaps\",\n\t\"adt\", \"\", \"analyze data trampolines (wip)\",\n\t\"adk\", \"\", \"analyze data kind (code, text, data, invalid, ...)\",\n\tNULL\n};\n\nstatic const char *help_msg_aei[] = {\n\t\"Usage:\", \"aei\", \"[smp] [...]\",\n\t\"aei\", \"\", \"initialize ESIL VM state (aei- to deinitialize)\",\n\t\"aeis\", \" argc [argv] [envp]\", \"initialize entrypoint stack environment\",\n\t\"aeim\", \" [addr] [size] [name]\", \"initialize ESIL VM stack (aeim- remove)\",\n\t\"aeip\", \"\", \"initialize ESIL program counter to curseek\",\n\tNULL\n};\n\nstatic const char *help_msg_ae[] = {\n\t\"Usage:\", \"ae[idesr?] [arg]\", \"ESIL code emulation\",\n\t\"ae\", \" [expr]\", \"evaluate ESIL expression\",\n\t\"ae?\", \"\", \"show this help\",\n\t\"ae??\", \"\", \"show ESIL help\",\n\t\"aea\", \"[f] [count]\", \"analyse n esil instructions accesses (regs, mem..)\",\n\t\"aeA\", \"[f] [count]\", \"analyse n bytes for their esil accesses (regs, mem..)\",\n\t\"aeC\", \"[arg0 arg1..] @ addr\", \"appcall in esil\",\n\t\"aec\", \"[?]\", \"continue until ^C\",\n\t\"aecs\", \"\", \"continue until syscall\",\n\t\"aecc\", \"\", \"continue until call\",\n\t\"aecu\", \" [addr]\", \"continue until address\",\n\t\"aecue\", \" [esil]\", \"continue until esil expression match\",\n\t\"aef\", \" [addr]\", \"emulate function\",\n\t\"aefa\", \" [addr]\", \"emulate function to find out args in given or current offset\",\n\t\"aeg\", \" [expr]\", \"esil data flow graph\",\n\t\"aegf\", \" [expr] [register]\", \"esil data flow graph filter\",\n\t\"aei\", \"\", \"initialize ESIL VM state (aei- to deinitialize)\",\n\t\"aeis\", \" argc [argv] [envp]\", \"initialize entrypoint stack environment\",\n\t\"aeim\", \" [addr] [size] [name]\", \"initialize ESIL VM stack (aeim- remove)\",\n\t\"aeip\", \"\", \"initialize ESIL program counter to curseek\",\n\t\"aek\", \" [query]\", \"perform sdb query on ESIL.info\",\n\t\"aek-\", \"\", \"resets the ESIL.info sdb instance\",\n\t\"aeL\", \"\", \"list ESIL plugins\",\n\t\"aep\", \"[?] [addr]\", \"manage esil pin hooks (see 'e cmd.esil.pin')\",\n\t\"aepc\", \" [addr]\", \"change esil PC to this address\",\n\t\"aer\", \" [..]\", \"handle ESIL registers like 'ar' or 'dr' does\",\n\t\"aes\", \"\", \"perform emulated debugger step\",\n\t\"aesp\", \" [X] [N]\", \"evaluate N instr from offset X\",\n\t\"aesb\", \"\", \"step back\",\n\t\"aeso\", \" \", \"step over\",\n\t\"aesou\", \" [addr]\", \"step over until given address\",\n\t\"aess\", \" \", \"step skip (in case of CALL, just skip, instead of step into)\",\n\t\"aesu\", \" [addr]\", \"step until given address\",\n\t\"aesue\", \" [esil]\", \"step until esil expression match\",\n\t\"aesuo\", \" [optype]\", \"step until given opcode type\",\n\t\"aets\", \"[?]\", \"ESIL Trace session\",\n\t\"aev\", \" [esil]\", \"visual esil debugger for the given expression or current instruction\",\n\t\"aex\", \" [hex]\", \"evaluate opcode expression\",\n\tNULL\n};\n\nstatic const char *help_detail_ae[] = {\n\t\"Examples:\", \"ESIL\", \" examples and documentation\",\n\t\"=\", \"\", \"assign updating internal flags\",\n\t\":=\", \"\", \"assign without updating internal flags\",\n\t\"+=\", \"\", \"A+=B => B,A,+=\",\n\t\"+\", \"\", \"A=A+B => B,A,+,A,=\",\n\t\"++\", \"\", \"increment, 2,A,++ == 3 (see rsi,--=[1], ... )\",\n\t\"--\", \"\", \"decrement, 2,A,-- == 1\",\n\t\"*=\", \"\", \"A*=B => B,A,*=\",\n\t\"/=\", \"\", \"A/=B => B,A,/=\",\n\t\"%=\", \"\", \"A%=B => B,A,%=\",\n\t\"&=\", \"\", \"and ax, bx => bx,ax,&=\",\n\t\"|\", \"\", \"or r0, r1, r2 => r2,r1,|,r0,=\",\n\t\"!=\", \"\", \"negate all bits\",\n\t\"^=\", \"\", \"xor ax, bx => bx,ax,^=\",\n\t\"\", \"[]\", \"mov eax,[eax] => eax,[],eax,=\",\n\t\"=\", \"[]\", \"mov [eax+3], 1 => 1,3,eax,+,=[]\",\n\t\"=\", \"[1]\", \"mov byte[eax],1 => 1,eax,=[1]\",\n\t\"=\", \"[8]\", \"mov [rax],1 => 1,rax,=[8]\",\n\t\"[]\", \"\", \"peek from random position\",\n\t\"[N]\", \"\", \"peek word of N bytes from popped address\",\n\t\"[*]\", \"\", \"peek some from random position\",\n\t\"=\", \"[*]\", \"poke some at random position\",\n\t\"$\", \"\", \"int 0x80 => 0x80,$\",\n\t\"$$\", \"\", \"simulate a hardware trap\",\n\t\"==\", \"\", \"pops twice, compare and update esil flags\",\n\t\"<\", \"\", \"compare for smaller\",\n\t\"<=\", \"\", \"compare for smaller or equal\",\n\t\">\", \"\", \"compare for bigger\",\n\t\">=\", \"\", \"compare bigger for or equal\",\n\t\">>=\", \"\", \"shr ax, bx => bx,ax,>>=  # shift right\",\n\t\"<<=\", \"\", \"shl ax, bx => bx,ax,<<=  # shift left\",\n\t\">>>=\", \"\", \"ror ax, bx => bx,ax,>>>=  # rotate right\",\n\t\"<<<=\", \"\", \"rol ax, bx => bx,ax,<<<=  # rotate left\",\n\t\"?{\", \"\", \"if popped value != 0 run the block until }\",\n\t\"POP\", \"\", \"drops last element in the esil stack\",\n\t\"DUP\", \"\", \"duplicate last value in stack\",\n\t\"NUM\", \"\", \"evaluate last item in stack to number\",\n\t\"SWAP\", \"\", \"swap last two values in stack\",\n\t\"TRAP\", \"\", \"stop execution\",\n\t\"BITS\", \"\", \"16,BITS  # change bits, useful for arm/thumb\",\n\t\"TODO\", \"\", \"the instruction is not yet esilized\",\n\t\"STACK\", \"\", \"show contents of stack\",\n\t\"CLEAR\", \"\", \"clears the esil stack\",\n\t\"REPEAT\", \"\", \"repeat n times\",\n\t\"BREAK\", \"\", \"terminates the string parsing\",\n\t\"SETJT\", \"\", \"set jump target\",\n\t\"SETJTS\", \"\", \"set jump target set\",\n\t\"SETD\", \"\", \"set delay slot\",\n\t\"GOTO\", \"\", \"jump to the Nth word popped from the stack\",\n\t\"$\", \"\", \"esil interrupt\",\n\t\"$z\", \"\", \"internal flag: zero\",\n\t\"$c\", \"\", \"internal flag: carry\",\n\t\"$b\", \"\", \"internal flag: borrow\",\n\t\"$p\", \"\", \"internal flag: parity\",\n\t\"$s\", \"\", \"internal flag: sign\",\n\t\"$o\", \"\", \"internal flag: overflow\",\n\t\"$ds\", \"\", \"internal flag: delay-slot\",\n\t\"$jt\", \"\", \"internal flag: jump-target\",\n\t\"$js\", \"\", \"internal flag: jump-target-set\",\n\t// DEPRECATED \"$r\", \"\", \"internal flag: jump-sign\",\n\t\"$$\", \"\", \"internal flag: pc address\",\n\tNULL\n};\n\nstatic const char *help_msg_aea[] = {\n\t\"Examples:\", \"aea\", \" show regs and memory accesses used in a range\",\n\t\"aea\", \"  [ops]\", \"Show regs/memory accesses used in N instructions \",\n\t\"aea*\", \" [ops]\", \"Create mem.* flags for memory accesses\",\n\t\"aeab\", \"\", \"Show regs used in current basic block\",\n\t\"aeaf\", \"\", \"Show regs used in current function\",\n\t\"aear\", \" [ops]\", \"Show regs read in N instructions\",\n\t\"aeaw\", \" [ops]\", \"Show regs written in N instructions\",\n\t\"aean\", \" [ops]\", \"Show regs not written in N instructions\",\n\t\"aeaj\", \" [ops]\", \"Show aea output in JSON format\",\n\t\"aeA\", \"  [len]\", \"Show regs used in N bytes (subcommands are the same)\",\n\t\"Legend:\", \"\", \"\",\n\t\"I\", \"\", \"input registers (read before being set)\",\n\t\"A\", \"\", \"all regs accessed\",\n\t\"R\", \"\", \"register values read\",\n\t\"W\", \"\", \"registers written\",\n\t\"N\", \"\", \"read but never written\",\n\t\"V\", \"\", \"values\",\n\t\"@R\", \"\", \"memreads\",\n\t\"@W\", \"\", \"memwrites\",\n\t\"NOTE:\", \"\", \"mem{reads,writes} with PIC only fetch the offset\",\n\tNULL\n};\n\nstatic const char *help_msg_aec[] = {\n\t\"Examples:\", \"aec\", \" continue until ^c\",\n\t\"aec\", \"\", \"Continue until exception\",\n\t\"aecs\", \"\", \"Continue until syscall\",\n\t\"aecc\", \"\", \"Continue until call\",\n\t\"aecu\", \"[addr]\", \"Continue until address\",\n\t\"aecue\", \"[addr]\", \"Continue until esil expression\",\n\tNULL\n};\n\nstatic const char *help_msg_aeC[] = {\n\t\"Examples:\", \"aeC\", \" arg0 arg1 ... @ calladdr\",\n\t\"aeC\", \" 1 2 @ sym._add\", \"Call sym._add(1,2)\",\n\tNULL\n};\n\nstatic const char *help_msg_aeg[] = {\n\t\"Usage:\", \"aeg[cfiv*]\", \" [...]\",\n\t\"aeg\", \"\", \"analyze current instruction as an esil graph\",\n\t\"aegf\", \"\", \"analyze given expression and filter for register\",\n\t\"aeg*\", \"\", \"analyze current instruction as an esil graph\",\n\t\"aegv\", \"\", \"analyse and launch the visual interactive mode (.aeg*;aggv == aegv)\",\n\tNULL\n};\n\nstatic const char *help_msg_aep[] = {\n\t\"Usage:\", \"aep[-*c] \", \" [...]\",\n\t\"aepc\", \" [addr]\", \"change program counter for esil\",\n\t\"aep*\", \"\", \"list pins in r2 commands\",\n\t\"aep-\", \"*\", \"remove all pins\",\n\t\"aep-\", \"[addr]\", \"remove pin\",\n\t\"aep\", \" [name] @ [addr]\", \"set pin\",\n\t\"aep\", \"\", \"list pins\",\n\tNULL\n};\n\nstatic const char *help_msg_aets[] = {\n\t\"Usage:\", \"aets \", \" [...]\",\n\t\"aets+\", \"\", \"Start ESIL trace session\",\n\t\"aets-\", \"\", \"Stop ESIL trace session\",\n\tNULL\n};\n\nstatic const char *help_msg_af[] = {\n\t\"Usage:\", \"af\", \"\",\n\t\"af\", \" ([name]) ([addr])\", \"analyze functions (start at addr or $$)\",\n\t\"afr\", \" ([name]) ([addr])\", \"analyze functions recursively\",\n\t\"af+\", \" addr name [type] [diff]\", \"hand craft a function (requires afb+)\",\n\t\"af-\", \" [addr]\", \"clean all function analysis data (or function at addr)\",\n\t\"afa\", \"\", \"analyze function arguments in a call (afal honors dbg.funcarg)\",\n\t\"afb+\", \" fcnA bbA sz [j] [f] ([t]( [d]))\", \"add bb to function @ fcnaddr\",\n\t\"afb\", \"[?] [addr]\", \"List basic blocks of given function\",\n\t\"afbF\", \"([0|1])\", \"Toggle the basic-block 'folded' attribute\",\n\t\"afB\", \" 16\", \"set current function as thumb (change asm.bits)\",\n\t\"afC[lc]\", \" ([addr])@[addr]\", \"calculate the Cycles (afC) or Cyclomatic Complexity (afCc)\",\n\t\"afc\", \"[?] type @[addr]\", \"set calling convention for function\",\n\t\"afd\", \"[addr]\",\"show function + delta for given offset\",\n\t\"afF\", \"[1|0|]\", \"fold/unfold/toggle\",\n\t\"afi\", \" [addr|fcn.name]\", \"show function(s) information (verbose afl)\",\n\t\"afj\", \" [tableaddr] [elem_sz] [count] [seg]\", \"analyze function jumptable (adding seg to each elem)\",\n\t\"afl\", \"[?] [ls*] [fcn name]\", \"list functions (addr, size, bbs, name) (see afll)\",\n\t\"afm\", \" name\", \"merge two functions\",\n\t\"afM\", \" name\", \"print functions map\",\n\t\"afn\", \"[?] name [addr]\", \"rename name for function at address (change flag too)\",\n\t\"afna\", \"\", \"suggest automatic name for current offset\",\n\t\"afo\", \"[?j] [fcn.name]\", \"show address for the function name or current offset\",\n\t\"afs\", \"[!] ([fcnsign])\", \"get/set function signature at current address (afs! uses cfg.editor)\",\n\t\"afS\", \"[stack_size]\", \"set stack frame size for function at current address\",\n\t\"afsr\", \" [function_name] [new_type]\", \"change type for given function\",\n\t\"aft\", \"[?]\", \"type matching, type propagation\",\n\t\"afu\", \" addr\", \"resize and analyze function from current address until addr\",\n\t\"afv[absrx]\", \"?\", \"manipulate args, registers and variables in function\",\n\t\"afx\", \"[m]\", \"list function references\",\n\tNULL\n};\n\nstatic const char *help_msg_afb[] = {\n\t\"Usage:\", \"afb\", \" List basic blocks of given function\",\n\t\".afbr-\", \"\", \"Set breakpoint on every return address of the function\",\n\t\".afbr-*\", \"\", \"Remove breakpoint on every return address of the function\",\n\t\"afb\", \" [addr]\", \"list basic blocks of function\",\n\t\"afb.\", \" [addr]\", \"show info of current basic block\",\n\t\"afb=\", \"\", \"display ascii-art bars for basic block regions\",\n\t\"afb+\", \" fcn_at bbat bbsz [jump] [fail] ([diff])\", \"add basic block by hand\",\n\t\"afbc\", \" [color] ([addr])\", \"colorize basic block\",\n\t\"afbe\", \" bbfrom bbto\", \"add basic-block edge for switch-cases\",\n\t\"afbi\", \"[j]\", \"print current basic block information\",\n\t\"afbj\", \" [addr]\", \"show basic blocks information in json\",\n\t\"afbr\", \"\", \"Show addresses of instructions which leave the function\",\n\t\"afbt\", \"\", \"Show basic blocks of current function in a table\",\n\t\"afB\", \" [bits]\", \"define asm.bits for the given function\",\n\tNULL\n};\n\nstatic const char *help_msg_afc[] = {\n\t\"Usage:\", \"afc[agl?]\", \"# see also tcc command to manage all calling conventions\",\n\t\"afc\", \" ccname\", \"Manually set calling convention for current function\",\n\t\"afc\", \"\", \"Show Calling convention for the Current function (same as tcc)\",\n\t\"afcr\", \"[j]\", \"Show register usage for the current function\",\n\t\"afca\", \"\", \"Analyse function for finding the current calling convention\",\n\t\"afcf\", \"[j] [name]\", \"Prints return type function(arg1, arg2...), see afij\",\n\t\"afck\", \"\", \"List SDB details of call loaded calling conventions\",\n\t\"afcl\", \"\", \"List all available calling conventions\",\n\t\"afco\", \" path\", \"Open Calling Convention sdb profile from given path\",\n\t\"afcR\", \"\", \"Register telescoping using the calling conventions order\",\n\tNULL\n};\n\nstatic const char *help_msg_afC[] = {\n\t\"Usage:\", \"afC\", \" [addr]\",\n\t\"afC\", \"\", \"function cycles cost\",\n\t\"afCc\", \"\", \"cyclomatic complexity\",\n\t\"afCl\", \"\", \"loop count (backward jumps)\",\n\tNULL\n};\n\nstatic const char *help_msg_afi[] = {\n\t\"Usage:\", \"afi[jlp*]\", \" <addr>\",\n\t\"afi\", \"\", \"show information of the function\",\n\t\"afii\", \"[-][import]\", \"show/add/delete imports used in function\",\n\t\"afi.\", \"\", \"show function name in current offset\",\n\t\"afi*\", \"\", \"function, variables and arguments\",\n\t\"afij\", \"\", \"function info in json format\",\n\t\"afil\", \"\", \"verbose function info\",\n\t\"afip\", \"\", \"show whether the function is pure or not\",\n\t\"afis\", \"\", \"show function stats (opcode, meta)\",\n\tNULL\n};\n\nstatic const char *help_msg_afl[] = {\n\t\"Usage:\", \"afl\", \" List all functions\",\n\t\"afl\", \"\", \"list functions\",\n\t\"afl.\", \"\", \"display function in current offset (see afi.)\",\n\t\"afl+\", \"\", \"display sum all function sizes\",\n\t\"afl=\", \"\", \"display ascii-art bars with function ranges\",\n\t\"aflc\", \"\", \"count of functions\",\n\t\"aflj\", \"\", \"list functions in json\",\n\t\"aflt\", \" [query]\", \"list functions in table format\",\n\t\"afll\", \" [column]\", \"list functions in verbose mode (sorted by column name)\",\n\t\"afllj\", \"\", \"list functions in verbose mode (alias to aflj)\",\n\t\"aflm\", \"\", \"list functions in makefile style (af@@=`aflm~0x`)\",\n\t\"aflq\", \"\", \"list functions in quiet mode\",\n\t\"aflqj\", \"\", \"list functions in json quiet mode\",\n\t\"afls\", \"[?asn]\", \"sort function list by address, size or name\",\n\tNULL\n};\n\nstatic const char *help_msg_afll[] = {\n\t\"Usage:\", \"\", \" List functions in verbose mode\",\n\t\"\", \"\", \"\",\n\t\"Table fields:\", \"\", \"\",\n\t\"\", \"\", \"\",\n\t\"address\", \"\", \"start address\",\n\t\"size\", \"\", \"function size (realsize)\",\n\t\"nbbs\", \"\", \"number of basic blocks\",\n\t\"edges\", \"\", \"number of edges between basic blocks\",\n\t\"cc\", \"\", \"cyclomatic complexity ( cc = edges - blocks + 2 * exit_blocks)\",\n\t\"cost\", \"\", \"cyclomatic cost\",\n\t\"min bound\", \"\", \"minimal address\",\n\t\"range\", \"\", \"function size\",\n\t\"max bound\", \"\", \"maximal address\",\n\t\"calls\", \"\", \"number of caller functions\",\n\t\"locals\", \"\", \"number of local variables\",\n\t\"args\", \"\", \"number of function arguments\",\n\t\"xref\", \"\", \"number of cross references\",\n\t\"frame\", \"\", \"function stack size\",\n\t\"name\", \"\", \"function name\",\n\tNULL\n};\n\nstatic const char *help_msg_afn[] = {\n\t\"Usage:\", \"afn[sa]\", \" Analyze function names\",\n\t\"afn\", \" [name]\", \"rename the function\",\n\t\"afn\", \" base64:encodedname\", \"rename the function\",\n\t\"afn.\", \"\", \"same as afn without arguments. show the function name in current offset\",\n\t\"afna\", \"\", \"construct a function name for the current offset\",\n\t\"afns\", \"\", \"list all strings associated with the current function\",\n\t\"afnsj\", \"\", \"list all strings associated with the current function in JSON format\",\n\tNULL\n};\n\nstatic const char *help_msg_afs[] = {\n\t\"Usage:\", \"afs[r]\", \" Analyze function signatures\",\n\t\"afs\", \"[!] ([fcnsign])\", \"get/set function signature at current address (afs! uses cfg.editor)\",\n\t\"afs*\", \" ([signame])\", \"get function signature in flags\",\n\t\"afsj\", \" ([signame])\", \"get function signature in JSON\",\n\t\"afsr\", \" [function_name] [new_type]\", \"change type for given function\",\n\tNULL\n};\n\nstatic const char *help_msg_aft[] = {\n\t\"Usage:\", \"aft\", \"\",\n\t\"aft\", \"\", \"type matching analysis for current function\",\n\tNULL\n};\n\nstatic const char *help_msg_afv[] = {\n\t\"Usage:\", \"afv\",\"[rbs]\",\n\t\"afv*\", \"\", \"output r2 command to add args/locals to flagspace\",\n\t\"afv-\", \"([name])\", \"remove all or given var\",\n\t\"afv=\", \"\", \"list function variables and arguments with disasm refs\",\n\t\"afva\", \"\", \"analyze function arguments/locals\",\n\t\"afvb\", \"[?]\", \"manipulate bp based arguments/locals\",\n\t\"afvd\", \" name\", \"output r2 command for displaying the value of args/locals in the debugger\",\n\t\"afvf\", \"\", \"show BP relative stackframe variables\",\n\t\"afvn\", \" [new_name] ([old_name])\", \"rename argument/local\",\n\t\"afvr\", \"[?]\", \"manipulate register based arguments\",\n\t\"afvR\", \" [varname]\", \"list addresses where vars are accessed (READ)\",\n\t\"afvs\", \"[?]\", \"manipulate sp based arguments/locals\",\n\t\"afvt\", \" [name] [new_type]\", \"change type for given argument/local\",\n\t\"afvW\", \" [varname]\", \"list addresses where vars are accessed (WRITE)\",\n\t\"afvx\", \"\", \"show function variable xrefs (same as afvR+afvW)\",\n\tNULL\n};\n\nstatic const char *help_msg_afvb[] = {\n\t\"Usage:\", \"afvb\", \" [idx] [name] ([type])\",\n\t\"afvb\", \"\", \"list base pointer based arguments, locals\",\n\t\"afvb*\", \"\", \"same as afvb but in r2 commands\",\n\t\"afvb\", \" [idx] [name] ([type])\", \"define base pointer based arguments, locals\",\n\t\"afvbj\", \"\", \"return list of base pointer based arguments, locals in JSON format\",\n\t\"afvb-\", \" [name]\", \"delete argument/locals at the given name\",\n\t\"afvbg\", \" [idx] [addr]\", \"define var get reference\",\n\t\"afvbs\", \" [idx] [addr]\", \"define var set reference\",\n\tNULL\n};\n\nstatic const char *help_msg_afvr[] = {\n\t\"Usage:\", \"afvr\", \" [reg] [type] [name]\",\n\t\"afvr\", \"\", \"list register based arguments\",\n\t\"afvr*\", \"\", \"same as afvr but in r2 commands\",\n\t\"afvr\", \" [reg] [name] ([type])\", \"define register arguments\",\n\t\"afvrj\", \"\", \"return list of register arguments in JSON format\",\n\t\"afvr-\", \" [name]\", \"delete register arguments at the given index\",\n\t\"afvrg\", \" [reg] [addr]\", \"define argument get reference\",\n\t\"afvrs\", \" [reg] [addr]\", \"define argument set reference\",\n\tNULL\n};\n\nstatic const char *help_msg_afvs[] = {\n\t\"Usage:\", \"afvs\", \" [idx] [type] [name]\",\n\t\"afvs\", \"\", \"list stack based arguments and locals\",\n\t\"afvs*\", \"\", \"same as afvs but in r2 commands\",\n\t\"afvs\", \" [idx] [name] [type]\", \"define stack based arguments,locals\",\n\t\"afvsj\", \"\", \"return list of stack based arguments and locals in JSON format\",\n\t\"afvs-\", \" [name]\", \"delete stack based argument or locals with the given name\",\n\t\"afvsg\", \" [idx] [addr]\", \"define var get reference\",\n\t\"afvss\", \" [idx] [addr]\", \"define var set reference\",\n\tNULL\n};\n\nstatic const char *help_msg_ag[] = {\n\t\"Usage:\", \"ag<graphtype><format> [addr]\", \"\",\n\t\"Graph commands:\", \"\", \"\",\n\t\"aga\", \"[format]\", \"Data references graph\",\n\t\"agA\", \"[format]\", \"Global data references graph\",\n\t\"agc\", \"[format]\", \"Function callgraph\",\n\t\"agC\", \"[format]\", \"Global callgraph\",\n\t\"agd\", \"[format] [fcn addr]\", \"Diff graph\",\n\t\"agf\", \"[format]\", \"Basic blocks function graph\",\n\t\"agi\", \"[format]\", \"Imports graph\",\n\t\"agr\", \"[format]\", \"References graph\",\n\t\"agR\", \"[format]\", \"Global references graph\",\n\t\"agx\", \"[format]\", \"Cross references graph\",\n\t\"agg\", \"[format]\", \"Custom graph\",\n\t\"ag-\", \"\", \"Clear the custom graph\",\n\t\"agn\", \"[?] title body\", \"Add a node to the custom graph\",\n\t\"age\", \"[?] title1 title2\", \"Add an edge to the custom graph\",\n\t\"\",\"\",\"\",\n\t\"Output formats:\", \"\", \"\",\n\t\"<blank>\", \"\", \"Ascii art\",\n\t\"*\", \"\", \"r2 commands\",\n\t\"b\", \"\", \"Braile art rendering (agfb)\",\n\t\"d\", \"\", \"Graphviz dot\",\n\t\"g\", \"\", \"Graph Modelling Language (gml)\",\n\t\"j\", \"\", \"json ('J' for formatted disassembly)\",\n\t\"k\", \"\", \"SDB key-value\",\n\t\"t\", \"\", \"Tiny ascii art\",\n\t\"v\", \"\", \"Interactive ascii art\",\n\t\"w\", \" [path]\", \"Write to path or display graph image (see graph.gv.format and graph.web)\",\n\tNULL\n};\n\nstatic const char *help_msg_age[] = {\n\t\"Usage:\", \"age [title1] [title2]\", \"\",\n\t\"Examples:\", \"\", \"\",\n\t\"age\", \" title1 title2\", \"Add an edge from the node with \\\"title1\\\" as title to the one with title \\\"title2\\\"\",\n\t\"age\", \" \\\"title1 with spaces\\\" title2\", \"Add an edge from node \\\"title1 with spaces\\\" to node \\\"title2\\\"\",\n\t\"age-\", \" title1 title2\", \"Remove an edge from the node with \\\"title1\\\" as title to the one with title \\\"title2\\\"\",\n\t\"ageh\", \"\", \"List all the highlighted edges\",\n\t\"ageh\", \" nodeA nodeB\", \"Highlight edge between nodeA and nodeB\",\n\t\"ageh-\", \" nodeA nodeB\", \"Highlight edge between nodeA and nodeB\",\n\t\"age?\", \"\", \"Show this help\",\n\tNULL\n};\n\nstatic const char *help_msg_agn[] = {\n\t\"Usage:\", \"agn [title] [body]\", \"\",\n\t\"Examples:\", \"\", \"\",\n\t\"agn\", \" title1 body1\", \"Add a node with title \\\"title1\\\" and body \\\"body1\\\"\",\n\t\"agn\", \" \\\"title with space\\\" \\\"body with space\\\"\", \"Add a node with spaces in the title and in the body\",\n\t\"agn\", \" title1 base64:Ym9keTE=\", \"Add a node with the body specified as base64\",\n\t\"agn-\", \" title1\", \"Remove a node with title \\\"title1\\\"\",\n\t\"agn?\", \"\", \"Show this help\",\n\tNULL\n};\n\nstatic const char *help_msg_ah[] = {\n\t\"Usage:\", \"ah[lba-]\", \"Analysis Hints\",\n\t\"ah?\", \"\", \"show this help\",\n\t\"ah?\", \" offset\", \"show hint of given offset\",\n\t\"ah\", \"\", \"list hints in human-readable format\",\n\t\"ah.\", \"\", \"list hints in human-readable format from current offset\",\n\t\"ah-\", \"\", \"remove all hints\",\n\t\"ah-\", \" offset [size]\", \"remove hints at given offset\",\n\t\"ah*\", \" offset\", \"list hints in radare commands format\",\n\t\"aha\", \" ppc @ 0x42\", \"force arch ppc for all addrs >= 0x42 or until the next hint\",\n\t\"aha\", \" 0 @ 0x84\", \"disable the effect of arch hints for all addrs >= 0x84 or until the next hint\",\n\t\"ahb\", \"[-*] [8,16,32,64] @ 0x42\", \"get/set asm.bits for given address and beyond\",\n\t\"ahc\", \" 0x804804\", \"override call/jump address\",\n\t\"ahd\", \" foo a0,33\", \"replace opcode string\",\n\t\"ahe\", \" 3,eax,+=\", \"set vm analysis string\",\n\t\"ahf\", \" 0x804840\", \"override fallback address for call\",\n\t\"ahF\", \" 0x10\", \"set stackframe size at current offset\",\n\t\"ahh\", \" 0x804840\", \"highlight this address offset in disasm\",\n\t\"ahi\", \"[?] 10\", \"define numeric base for immediates (2, 8, 10, 10u, 16, i, p, S, s)\",\n\t\"ahj\", \"\", \"list hints in JSON\",\n\t\"aho\", \" call\", \"change opcode type (see aho?) (deprecated, moved to \\\"ahd\\\")\",\n\t\"ahp\", \" addr\", \"set pointer hint\",\n\t\"ahr\", \" val\", \"set hint for return value of a function\",\n\t\"ahs\", \" 4\", \"set opcode size=4\",\n\t\"ahS\", \" jz\", \"set asm.syntax=jz for this opcode\",\n\t\"aht\", \"[s][?] <type>\", \"Mark immediate as a type offset (deprecated, moved to \\\"aho\\\")\",\n\t\"ahv\", \" val\", \"change opcode's val field (useful to set jmptbl sizes in jmp rax)\",\n\tNULL\n};\n\nstatic const char *help_msg_aho[] = {\n\t\"Usage:\", \"aho [optype] [@ addr]\", \" Define opcode type hint\",\n\t\"aho\", \" nop\", \"change the opcode type in current address to be considered a NOP\",\n\t\"aho\", \"\", \"show the current opcode hint if any\",\n\t\"aho-\", \"$$\", \"delete hints in current offset\",\n\t\"aho*\", \"\", \"same as above but in r2 commands syntax\",\n\tNULL\n};\n\nstatic const char *help_msg_ahb[] = {\n\t\"Usage:\", \"ahb [8|16|32|64] [@ addr]\", \" Define asm.bits hint at given address\",\n\t\"ahb\", \" 16\", \"set asm.bits=16 in the given address\",\n\t\"ahb\", \"\", \"get asm.bits used in given addr (current seek)\",\n\t\"ahb\", \"-$$\", \"delete all the hints in the given address\",\n\t\"ahb*\", \"\", \"show defined bits hints as r2 commands\",\n\tNULL\n};\n\nstatic const char *help_msg_ahr[] = {\n\t\"Usage:\", \"ahr addr\", \" Set instruction as return type (similar to 'aho ret'?)\",\n\t\"ahr\", \" $$\", \"current instruction may be considered as the end of a function\",\n\tNULL\n};\n\nstatic const char *help_msg_ahi[] = {\n\t\"Usage:\", \"ahi [2|8|10|10u|16|bodhipSs] [@ offset]\", \" Define numeric base\",\n\t\"ahi\", \" <base>\", \"set numeric base (2, 8, 10, 16)\",\n\t\"ahi\", \" 10|d\", \"set base to signed decimal (10), sign bit should depend on receiver size\",\n\t\"ahi\", \" 10u|du\", \"set base to unsigned decimal (11)\",\n\t\"ahi\", \" b\", \"set base to binary (2)\",\n\t\"ahi\", \" o\", \"set base to octal (8)\",\n\t\"ahi\", \" h\", \"set base to hexadecimal (16)\",\n\t\"ahi\", \" i\", \"set base to IP address (32)\",\n\t\"ahi\", \" p\", \"set base to htons(port) (3)\",\n\t\"ahi\", \" S\", \"set base to syscall (80)\",\n\t\"ahi\", \" s\", \"set base to string (1)\",\n\t\"ahi1\", \" 10\", \"set base of argument 1 to base 10 (same as ahi1 d)\",\n\tNULL\n};\n\nstatic const char *help_msg_aht[] = {\n\t\"Usage:\", \"aht[s] [addr|type]\", \"Mark immediate as type offset (moved to aho)\",\n\t\"ahts\", \" <offset>\", \"List all matching structure offsets\",\n\t\"aht\", \" <struct.member>\", \"Change immediate to structure offset\",\n\t\"aht?\", \"\", \"show this help\",\n\tNULL\n};\n\nstatic const char *help_msg_ao[] = {\n\t\"Usage:\", \"ao[e?] [len]\", \"Analyze Opcodes\",\n\t\"aoj\", \" N\", \"display opcode analysis information in JSON for N opcodes\",\n\t\"aoe\", \" N\", \"display esil form for N opcodes\",\n\t\"aoeq\", \" N\", \"display only the esil expression of N opcodes\",\n\t\"aoef\", \" expr\", \"filter esil expression of opcode by given output\",\n\t\"aos\", \" N\", \"display size of N opcodes\",\n\t\"aom\", \" [id]\", \"list current or all mnemonics for current arch\",\n\t\"aod\", \" [mnemonic]\", \"describe opcode for asm.arch\",\n\t\"aoda\", \"\", \"show all mnemonic descriptions\",\n\t\"aoc\", \" [cycles]\", \"analyze which op could be executed in [cycles]\",\n\t\"ao\", \" 5\", \"display opcode analysis of 5 opcodes\",\n\t\"ao*\", \"\", \"display opcode in r commands\",\n\tNULL\n};\n\nstatic const char *help_msg_ar[] = {\n\t\"Usage: ar\", \"\", \"# Analysis Registers\",\n\t\"ar\", \"\", \"Show 'gpr' registers\",\n\t\"ar.\", \">$snapshot\", \"Show r2 commands to set register values to the current state\",\n\t\"ar,\", \"\", \"Show registers in table format (see dr,)\",\n\t\".ar*\", \"\", \"Import register values as flags\",\n\t\".ar-\", \"\", \"Unflag all registers\",\n\t\"ar0\", \"\", \"Reset register arenas to 0\",\n\t\"ara\", \"[?]\", \"Manage register arenas\",\n\t\"arj\", \"\", \"Show 'gpr' registers in JSON format\",\n\t\"arA\", \"\", \"Show values of function argument calls (A0, A1, A2, ..)\",\n\t\"ar\", \" 16\", \"Show 16 bit registers\",\n\t\"ar\", \" 32\", \"Show 32 bit registers\",\n\t\"ar\", \" all\", \"Show all bit registers\",\n\t\"ar\", \" <type>\", \"Show all registers of given type\",\n\t\"arC\", \"\", \"Display register profile comments\",\n\t\"arr\", \"\", \"Show register references (telescoping)\",\n\t\"arrj\", \"\", \"Show register references (telescoping) in JSON format\",\n\t\"ar=\", \"([size])(:[regs])\", \"Show register values in columns\",\n\t\"ar?\", \" <reg>\", \"Show register value\",\n\t\"arb\", \" <type>\", \"Display hexdump of the given arena\",\n\t\"arc\", \"[cq=] <name>\", \"Conditional flag registers\",\n\t\"arcc\", \"\", \"Derive calling convention from the register profile\",\n\t\"ard\", \" <name>\", \"Show only different registers\",\n\t\"arn\", \" <regalias>\", \"Get regname for pc,sp,bp,a0-3,zf,cf,of,sg\",\n\t\"aro\", \"\", \"Show old (previous) register values\",\n\t\"arp\", \"[?] <file>\", \"Load register profile from file\",\n\t\"ars\", \"\", \"Stack register state\",\n\t\"arS\", \"\", \"Show the size of the register profile\",\n\t\"art\", \"\", \"List all register types\",\n\t\"arw\", \" <hexnum>\", \"Set contents of the register arena\",\n\tNULL\n};\n\nstatic const char *help_msg_ara[] = {\n\t\"Usage:\", \"ara[+-s]\", \"Register Arena Push/Pop/Swap\",\n\t\"ara\", \"\", \"show all register arenas allocated\",\n\t\"ara\", \"+\", \"push a new register arena for each type\",\n\t\"ara\", \"-\", \"pop last register arena\",\n\t\"aras\", \"\", \"swap last two register arenas\",\n\tNULL\n};\n\nstatic const char *help_msg_arw[] = {\n\t\"Usage:\", \"arw \", \"# Set contents of the register arena\",\n\t\"arw\", \" <hexnum>\", \"Set contents of the register arena\",\n\tNULL\n};\n\nstatic const char *help_msg_as[] = {\n\t\"Usage: as[ljk?]\", \"\", \"syscall name <-> number utility\",\n\t\"as\", \"\", \"show current syscall and arguments\",\n\t\"as\", \" 4\", \"show syscall 4 based on asm.os and current regs/mem\",\n\t\"asc[a]\", \" 4\", \"dump syscall info in .asm or .h\",\n\t\"asj\", \"\", \"list of syscalls in JSON\",\n\t\"asl\", \"\", \"list of syscalls by asm.os and asm.arch\",\n\t\"asl\", \" close\", \"returns the syscall number for close\",\n\t\"asl\", \" 4\", \"returns the name of the syscall number 4\",\n\t\"ask\", \" [query]\", \"perform syscall/ queries\",\n\tNULL\n};\n\nstatic const char *help_msg_av[] = {\n\t\"Usage:\", \"av[?jr*]\", \" C++ vtables and RTTI\",\n\t\"av\", \"\", \"search for vtables in data sections and show results\",\n\t\"avj\", \"\", \"like av, but as json\",\n\t\"av*\", \"\", \"like av, but as r2 commands\",\n\t\"avr\", \"[j@addr]\", \"try to parse RTTI at vtable addr (see anal.cpp.abi)\",\n\t\"avra\", \"[j]\", \"search for vtables and try to parse RTTI at each of them\",\n\t\"avrr\", \"\", \"recover class info from all findable RTTI (see ac)\",\n\t\"avrD\", \" [classname]\", \"demangle a class name from RTTI\",\n\tNULL\n};\n\nstatic const char *help_msg_ax[] = {\n\t\"Usage:\", \"ax[?d-l*]\", \" # see also 'afx?'\",\n\t\"ax\", \"\", \"list refs\",\n\t\"ax*\", \"\", \"output radare commands\",\n\t\"ax\", \" addr [at]\", \"add code ref pointing to addr (from curseek)\",\n\t\"ax-\", \" [at]\", \"clean all refs/refs from addr\",\n\t\"ax-*\", \"\", \"clean all refs/refs\",\n\t\"axc\", \" addr [at]\", \"add generic code ref\",\n\t\"axC\", \" addr [at]\", \"add code call ref\",\n\t\"axg\", \" [addr]\", \"show xrefs graph to reach current function\",\n\t\"axg*\", \" [addr]\", \"show xrefs graph to given address, use .axg*;aggv\",\n\t\"axgj\", \" [addr]\", \"show xrefs graph to reach current function in json format\",\n\t\"axd\", \" addr [at]\", \"add data ref\",\n\t\"axq\", \"\", \"list refs in quiet/human-readable format\",\n\t\"axj\", \"\", \"list refs in json format\",\n\t\"axF\", \" [flg-glob]\", \"find data/code references of flags\",\n\t\"axm\", \" addr [at]\", \"copy data/code references pointing to addr to also point to curseek (or at)\",\n\t\"axt\", \"[?] [addr]\", \"find data/code references to this address\",\n\t\"axf\", \" [addr]\", \"find data/code references from this address\",\n\t\"axv\", \" [addr]\", \"list local variables read-write-exec references\",\n\t\"ax.\", \" [addr]\", \"find data/code references from and to this address\",\n\t\"axff[j]\", \" [addr]\", \"find data/code references from this function\",\n\t\"axs\", \" addr [at]\", \"add string ref\",\n\tNULL\n};\n\nstatic const char *help_msg_axt[]= {\n\t\"Usage:\", \"axt[?gq*]\", \"find data/code references to this address\",\n\t\"axtj\", \" [addr]\", \"find data/code references to this address and print in json format\",\n\t\"axtg\", \" [addr]\", \"display commands to generate graphs according to the xrefs\",\n\t\"axtq\", \" [addr]\", \"find and list the data/code references in quiet mode\",\n\t\"axt*\", \" [addr]\", \"same as axt, but prints as r2 commands\",\n\tNULL\n};\n\nstatic int cmpname(const void *_a, const void *_b) {\n\tconst RAnalFunction *a = _a, *b = _b;\n\treturn (int)strcmp (a->name, b->name);\n}\n\nstatic int cmpsize(const void *a, const void *b) {\n\tut64 sa = (int) r_anal_function_linear_size ((RAnalFunction *) a);\n\tut64 sb = (int) r_anal_function_linear_size ((RAnalFunction *) b);\n\treturn (sa > sb)? -1: (sa < sb)? 1 : 0;\n}\n\nstatic int cmpbbs(const void *_a, const void *_b) {\n\tconst RAnalFunction *a = _a, *b = _b;\n\tint la = (int)r_list_length (a->bbs);\n\tint lb = (int)r_list_length (b->bbs);\n\treturn (la > lb)? -1: (la < lb)? 1 : 0;\n}\n\nstatic int cmpaddr(const void *_a, const void *_b) {\n\tconst RAnalFunction *a = _a, *b = _b;\n\treturn (a->addr > b->addr)? 1: (a->addr < b->addr)? -1: 0;\n}\n\nstatic bool listOpDescriptions(void *_core, const char *k, const char *v) {\n        r_cons_printf (\"%s=%s\\n\", k, v);\n        return true;\n}\n\n/* better aac for windows-x86-32 */\n#define JAYRO_03 0\n\n#if JAYRO_03\n\nstatic bool anal_is_bad_call(RCore *core, ut64 from, ut64 to, ut64 addr, ut8 *buf, int bufi) {\n\tut64 align = R_ABS (addr % PE_ALIGN);\n\tut32 call_bytes;\n\n\t// XXX this is x86 specific\n\tif (align == 0) {\n\t\tcall_bytes = (ut32)((ut8*)buf)[bufi + 3] << 24;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 2] << 16;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 1] << 8;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi];\n\t} else {\n\t\tcall_bytes = (ut32)((ut8*)buf)[bufi - align + 3] << 24;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi - align + 2] << 16;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi - align + 1] << 8;\n\t\tcall_bytes |= (ut32)((ut8*)buf)[bufi - align];\n\t}\n\tif (call_bytes >= from && call_bytes <= to) {\n\t\treturn true;\n\t}\n\tcall_bytes = (ut32)((ut8*)buf)[bufi + 4] << 24;\n\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 3] << 16;\n\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 2] << 8;\n\tcall_bytes |= (ut32)((ut8*)buf)[bufi + 1];\n\tcall_bytes += addr + 5;\n\tif (call_bytes >= from && call_bytes <= to) {\n\t\treturn false;\n\t}\n\treturn false;\n}\n#endif\n\n// function argument types and names into anal/types\nstatic void __add_vars_sdb(RCore *core, RAnalFunction *fcn) {\n\tRAnalFcnVarsCache cache;\n\tr_anal_fcn_vars_cache_init (core->anal, &cache, fcn);\n\tRListIter *iter;\n\tRAnalVar *var;\n\tsize_t arg_count = 0;\n\n\tchar *args = r_str_newf (\"func.%s.args\", fcn->name);\n\tRList *all_vars = cache.rvars;\n\tr_list_join (all_vars, cache.bvars);\n\tr_list_join (all_vars, cache.svars);\n#if 0\n\tr_list_foreach (all_vars, iter, var) {\n\t\tif (var->isarg) {\n\t\t\targ_count++;\n\t\t}\n\t}\n\tint old_arg_count = r_num_get (NULL, args);\n\tif (old_arg_count >= arg_count) {\n\t\treturn;\n\t}\n#endif\n\tr_list_foreach (all_vars, iter, var) {\n\t\tif (var->isarg) {\n\t\t\tchar *k = r_str_newf (\"func.%s.arg.%d\", fcn->name, (int)arg_count);\n\t\t\tconst char *o = sdb_const_get (core->anal->sdb_types, k, 0);\n\t\t\tchar *comma = o? strchr (o, ','): NULL;\n\t\t\tchar *db_type = comma? r_str_ndup (o, comma - o): NULL;\n\t\t\tchar *db_name = comma? strdup (comma + 1): NULL;\n\t\t\tif (!strstr (var->name, \"arg_\") || (o && strstr (o, \",arg_\"))) {\n\t\t\t\t// #if 0\n\t\t\t\tchar *k = r_str_newf (\"func.%s.arg.%d\", fcn->name, (int)arg_count);\n\t\t\t\t// eprintf (\"VARNAME %s %s %c\", var->name, db_name, 10);\n\t\t\t\t// eprintf (\"VARTYPE %s %s %c\", var->type,db_type, 10);\n\t\t\t\tchar *type = db_type && strstr (var->type, \"arg_\")? db_type: var->type;\n\t\t\t\tchar *v = r_str_newf (\"%s,%s\", type, var->name);\n\t\t\t\tsdb_set (core->anal->sdb_types, k, v, 0);\n\t\t\t\tfree (v);\n\t\t\t} else {\n\t\t\t\tchar *name = db_name ? db_name: var->name;\n\t\t\t\tchar *type = db_type? db_type: strdup (var->type);\n\t\t\t\t// eprintf (\"VARTYPE1 %s %s %c\", var->type,db_type, 10);\n\t\t\t\tif (var->name && !strstr (var->name, \"arg_\")) {\n\t\t\t\t\to = NULL;\n\t\t\t\t}\n\t\t\t\ttype = strdup (var->type);\n#if 0\n\t\t\t\tif (name != var->name) {\n\t\t\t\t\to = NULL;\n\t\t\t\t} else {\n\t\t\t\t\ttype = strdup (var->type);\n\t\t\t\t}\n#endif\n\t\t\t\tchar *v = comma? strdup (o): r_str_newf (\"%s,%s\", type, name);\n\t\t\t\t/// eprintf(\"arg (%s) %s -- %s%c\", k, v, var->name, 10);\n\t\t\t\tchar *s = strdup (name);\n\t\t\t\tif (o) {\n\t\t\t\t\tchar *v2 = r_str_newf (\"%s,%s\", var->type, name);\n\t\t\t\t\tif (!strstr (var->name, \",arg_\")) {\n\t\t\t\t\t\tfree (var->name);\n\t\t\t\t\t\tvar->name = s;\n\t\t\t\t\t} else free (s);\n\t\t\t\t\t// sdb_set (core->anal->sdb_types, k, v, 0);\n\t\t\t\t\tfree (v2);\n\t\t\t\t} else {\n\t\t\t\t\tfree (var->name);\n\t\t\t\t\tvar->name = s;\n\t\t\t\t\tsdb_set (core->anal->sdb_types, k, v, 0);\n\t\t\t\t}\n\t\t\t\tfree (v);\n\t\t\t\t// #endif\n\t\t\t}\n\t\t\tfree (db_name);\n\t\t\tfree (db_type);\n\t\t\tfree (k);\n\t\t\targ_count++;\n\t\t}\n\t}\n\t//\tsdb_num_set (core->anal->sdb_types, args, (int)arg_count, 0);\n\tif (arg_count > 0) {\n\t\tchar *k = r_str_newf (\"func.%s.args\", fcn->name);\n\t\tchar *v = r_str_newf (\"%d\", (int)arg_count);\n\t\tsdb_set (core->anal->sdb_types, k, v, 0);\n\t\tfree (k);\n\t\tfree (v);\n \t}\n\tfree (args);\n\tr_anal_fcn_vars_cache_fini (&cache);\n}\n\nstatic bool cmd_anal_aaft(RCore *core) {\n\tRListIter *it;\n\tRAnalFunction *fcn;\n\tut64 seek;\n\tconst char *io_cache_key = \"io.pcache.write\";\n\tbool io_cache = r_config_get_b (core->config, io_cache_key);\n\tif (r_config_get_b (core->config, \"cfg.debug\")) {\n\t\teprintf (\"TOFIX: aaft can't run in debugger mode.\\n\");\n\t\treturn false;\n\t}\n\tif (!io_cache) {\n\t\t// XXX. we shouldnt need this, but it breaks 'r2 -c aaa -w ls'\n\t\tr_config_set_i (core->config, io_cache_key, true);\n\t}\n\tconst bool iova = r_config_get_b (core->config, \"io.va\");\n\tseek = core->offset;\n\tr_reg_arena_push (core->anal->reg);\n\tr_reg_arena_zero (core->anal->reg);\n\tr_core_cmd0 (core, \"aei;aeim\");\n\tut8 *saved_arena = r_reg_arena_peek (core->anal->reg);\n\t// Iterating Reverse so that we get function in top-bottom call order\n\tr_list_foreach_prev (core->anal->fcns, it, fcn) {\n\t\tint ret = r_core_seek (core, fcn->addr, true);\n\t\tif (!ret) {\n\t\t\tcontinue;\n\t\t}\n\t\tr_reg_arena_poke (core->anal->reg, saved_arena);\n\t\tr_anal_esil_set_pc (core->anal->esil, fcn->addr);\n\t\tr_core_anal_type_match (core, fcn);\n\t\tif (r_cons_is_breaked ()) {\n\t\t\tbreak;\n\t\t}\n\t\t__add_vars_sdb (core, fcn);\n\t}\n\tr_config_set_b (core->config, \"io.va\", iova);\n\tr_core_seek (core, seek, true);\n\tr_reg_arena_pop (core->anal->reg);\n\tr_config_set_i (core->config, io_cache_key, io_cache);\n\tfree (saved_arena);\n\treturn true;\n}\n\nstatic void type_cmd(RCore *core, const char *input) {\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\tif (!fcn && *input != '?') {\n\t\teprintf (\"cant find function here\\n\");\n\t\treturn;\n\t}\n\tut64 seek;\n\tr_cons_break_push (NULL, NULL);\n\tswitch (*input) {\n\tcase '\\0': // \"aft\"\n\t\tseek = core->offset;\n\t\tr_anal_esil_set_pc (core->anal->esil, fcn? fcn->addr: core->offset);\n\t\tr_core_anal_type_match (core, fcn);\n\t\tr_core_seek (core, seek, true);\n\t\tbreak;\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_aft);\n\t\tbreak;\n\t}\n\tr_cons_break_pop ();\n}\n\nstatic void find_refs(RCore *core, const char *glob) {\n\tchar cmd[128];\n\tut64 curseek = core->offset;\n\twhile (*glob == ' ') glob++;\n\tif (!*glob) {\n\t\tglob = \"str.\";\n\t}\n\tif (*glob == '?') {\n\t\teprintf (\"Usage: axF [flag-str-filter]\\n\");\n\t\treturn;\n\t}\n\teprintf (\"Finding references of flags matching '%s'...\\n\", glob);\n\tsnprintf (cmd, sizeof (cmd) - 1, \".(findstref) @@=`f~%s[0]`\", glob);\n\tr_core_cmd0 (core, \"(findstref;f here=$$;s entry0;/r here;f-here)\");\n\tr_core_cmd0 (core, cmd);\n\tr_core_cmd0 (core, \"(-findstref)\");\n\tr_core_seek (core, curseek, true);\n}\n\n/* set flags for every function */\nstatic void flag_every_function(RCore *core) {\n\tRListIter *iter;\n\tRAnalFunction *fcn;\n\t// eprintf (\"flag every(%d) %c\", r_list_length (core->anal->fcns, 10);\n\tr_flag_space_push (core->flags, R_FLAGS_FS_FUNCTIONS);\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\tr_flag_set (core->flags, fcn->name,\n\t\t\tfcn->addr, r_anal_function_size_from_entry (fcn));\n\t}\n\tr_flag_space_pop (core->flags);\n}\n\nstatic void var_help(RCore *core, char ch) {\n\tswitch (ch) {\n\tcase 'b':\n\t\tr_core_cmd_help (core, help_msg_afvb);\n\t\tbreak;\n\tcase 's':\n\t\tr_core_cmd_help (core, help_msg_afvs);\n\t\tbreak;\n\tcase 'r':\n\t\tr_core_cmd_help (core, help_msg_afvr);\n\t\tbreak;\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_afv);\n\t\tbreak;\n\tdefault:\n\t\teprintf (\"See afv?, afvb?, afvr? and afvs?\\n\");\n\t}\n}\n\nstatic void var_accesses_list(RAnalFunction *fcn, RAnalVar *var, PJ *pj, int access_type, const char *name) {\n\tRAnalVarAccess *acc;\n\tbool first = true;\n\tif (pj) {\n\t\tpj_o (pj);\n\t\tpj_ks (pj, \"name\", name);\n\t\tpj_ka (pj, \"addrs\");\n\t} else {\n\t\tr_cons_printf (\"%10s\", name);\n\t}\n\tr_vector_foreach (&var->accesses, acc) {\n\t\tif (!(acc->type & access_type)) {\n\t\t\tcontinue;\n\t\t}\n\t\tut64 addr = fcn->addr + acc->offset;\n\t\tif (pj) {\n\t\t\tpj_n (pj, addr);\n\t\t} else {\n\t\t\tr_cons_printf (\"%s0x%\" PFMT64x, first ? \"  \" : \",\", addr);\n\t\t}\n\t\tfirst = false;\n\t}\n\tif (pj) {\n\t\tpj_end (pj);\n\t\tpj_end (pj);\n\t} else {\n\t\tr_cons_newline ();\n\t}\n}\n\nstatic void list_vars(RCore *core, RAnalFunction *fcn, PJ *pj, int type, const char *name) {\n\tRAnalVar *var = NULL;\n\tRListIter *iter;\n\tRList *list = r_anal_var_all_list (core->anal, fcn);\n\tif (type == '=') {\n\t\tut64 oaddr = core->offset;\n\t\tr_list_foreach (list, iter, var) {\n\t\t\tr_cons_printf (\"* %s\\n\", var->name);\n\t\t\tRAnalVarAccess *acc;\n\t\t\tr_vector_foreach (&var->accesses, acc) {\n\t\t\t\tif (!(acc->type & R_ANAL_VAR_ACCESS_TYPE_READ)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"R 0x%\"PFMT64x\"  \", fcn->addr + acc->offset);\n\t\t\t\tr_core_seek (core, fcn->addr + acc->offset, 1);\n\t\t\t\tr_core_print_disasm_instructions (core, 0, 1);\n\t\t\t}\n\t\t\tr_vector_foreach (&var->accesses, acc) {\n\t\t\t\tif (!(acc->type & R_ANAL_VAR_ACCESS_TYPE_WRITE)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"W 0x%\"PFMT64x\"  \", fcn->addr + acc->offset);\n\t\t\t\tr_core_seek (core, fcn->addr + acc->offset, 1);\n\t\t\t\tr_core_print_disasm_instructions (core, 0, 1);\n\t\t\t}\n\t\t}\n\t\tr_core_seek (core, oaddr, 0);\n\t\treturn;\n\t}\n\tif (type == '*') {\n\t\tconst char *bp = r_reg_get_name (core->anal->reg, R_REG_NAME_BP);\n\t\tr_cons_printf (\"f-fcnvar*\\n\");\n\t\tr_list_foreach (list, iter, var) {\n\t\t\tr_cons_printf (\"f fcnvar.%s @ %s%s%d\\n\", var->name, bp,\n\t\t\t\tvar->delta>=0? \"+\":\"\", var->delta);\n\t\t}\n\t\treturn;\n\t}\n\tif (type != 'W' && type != 'R') {\n\t\treturn;\n\t}\n\tint access_type = type == 'R' ? R_ANAL_VAR_ACCESS_TYPE_READ : R_ANAL_VAR_ACCESS_TYPE_WRITE;\n\tif (pj) {\n\t\tpj_a (pj);\n\t}\n\tif (name && *name) {\n\t\tvar = r_anal_function_get_var_byname (fcn, name);\n\t\tif (var) {\n\t\t\tvar_accesses_list (fcn, var, pj, access_type, var->name);\n\t\t}\n\t} else {\n\t\tr_list_foreach (list, iter, var) {\n\t\t\tvar_accesses_list (fcn, var, pj, access_type, var->name);\n\t\t}\n\t}\n\tif (pj) {\n\t\tpj_end (pj);\n\t}\n}\n\nstatic void cmd_afvx(RCore *core, RAnalFunction *fcn, bool json) {\n\tr_return_if_fail (core);\n\tif (!fcn) {\n\t\tfcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_ANY);\n\t}\n\tif (fcn) {\n\t\tPJ *pj = NULL;\n\t\tif (json) {\n\t\t\tpj = pj_new ();\n\t\t\tpj_o (pj);\n\t\t\tpj_k (pj, \"reads\");\n\t\t} else {\n\t\t\tr_cons_printf (\"afvR\\n\");\n\t\t}\n\t\tlist_vars (core, fcn, pj, 'R', NULL);\n\t\tif (json) {\n\t\t\tpj_k (pj, \"writes\");\n\t\t} else {\n\t\t\tr_cons_printf (\"afvW\\n\");\n\t\t}\n\t\tlist_vars (core, fcn, pj, 'W', NULL);\n\t\tif (json) {\n\t\t\tpj_end (pj);\n\t\t\tchar *j = pj_drain (pj);\n\t\t\tr_cons_printf (\"%s\\n\", j);\n\t\t\tfree (j);\n\t\t}\n\t}\n}\n\nstatic int cmd_an(RCore *core, bool use_json, const char *name) {\n\tint ret = 0;\n\tut64 off = core->offset;\n\tRAnalOp op;\n\tPJ *pj = NULL;\n\tut64 tgt_addr = UT64_MAX;\n\n\tif (use_json) {\n\t\tpj = pj_new ();\n\t\tpj_a (pj);\n\t}\n\n\tr_anal_op (core->anal, &op, off,\n\t\t\tcore->block + off - core->offset, 32, R_ANAL_OP_MASK_BASIC);\n\tRAnalVar *var = r_anal_get_used_function_var (core->anal, op.addr);\n\n\ttgt_addr = op.jump != UT64_MAX? op.jump: op.ptr;\n\tif (var) {\n\t\tif (name) {\n\t\t\tret = r_anal_var_rename (var, name, true)\n\t\t\t\t? 0\n\t\t\t\t: -1;\n\t\t} else if (use_json) {\n\t\t\tpj_o (pj);\n\t\t\tpj_ks (pj, \"name\", var->name);\n\t\t\tpj_ks (pj, \"type\", \"var\");\n\t\t\tpj_kn (pj, \"offset\", tgt_addr);\n\t\t\tpj_end (pj);\n\t\t} else {\n\t\t\tr_cons_println (var->name);\n\t\t}\n\t} else if (tgt_addr != UT64_MAX) {\n\t\tRAnalFunction *fcn = r_anal_get_function_at (core->anal, tgt_addr);\n\t\tRFlagItem *f = r_flag_get_i (core->flags, tgt_addr);\n\t\tif (fcn) {\n\t\t\tif (name) {\n\t\t\t\tret = r_anal_function_rename (fcn, name)? 0: -1;\n\t\t\t} else if (!use_json) {\n\t\t\t\tr_cons_println (fcn->name);\n\t\t\t} else {\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"name\", fcn->name);\n\t\t\t\tpj_ks (pj, \"type\", \"function\");\n\t\t\t\tpj_kn (pj, \"offset\", tgt_addr);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t} else if (f) {\n\t\t\tif (name) {\n\t\t\t\tret = r_flag_rename (core->flags, f, name)? 0: -1;\n\t\t\t} else if (!use_json) {\n\t\t\t\tr_cons_println (f->name);\n\t\t\t} else {\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"name\", f->name);\n\t\t\t\tif (f->realname) {\n\t\t\t\t\tpj_ks (pj, \"realname\", f->realname);\n\t\t\t\t}\n\t\t\t\tpj_ks (pj, \"type\", \"flag\");\n\t\t\t\tpj_kn (pj, \"offset\", tgt_addr);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t} else {\n\t\t\tif (name) {\n\t\t\t\tret = r_flag_set (core->flags, name, tgt_addr, 1)? 0: -1;\n\t\t\t} else if (!use_json) {\n\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \"\\n\", tgt_addr);\n\t\t\t} else {\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"name\", r_str_get (name));\n\t\t\t\tpj_ks (pj, \"type\", \"address\");\n\t\t\t\tpj_kn (pj, \"offset\", tgt_addr);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t}\n\t}\n\n\tif (use_json) {\n\t\tpj_end (pj);\n\t}\n\n\tif (pj) {\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\n\tr_anal_op_fini (&op);\n\treturn ret;\n}\n\n// EBP BASED\nstatic int delta_cmp(const void *a, const void *b) {\n\tconst RAnalVar *va = a;\n\tconst RAnalVar *vb = b;\n\treturn vb->delta - va->delta;\n}\n\nstatic int delta_cmp2(const void *a, const void *b) {\n\tconst RAnalVar *va = a;\n\tconst RAnalVar *vb = b;\n\treturn va->delta - vb->delta;\n}\n\nstatic void __cmd_afvf(RCore *core, const char *input) {\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\tRListIter *iter;\n\tRAnalVar *p;\n\tRList *list = r_anal_var_all_list (core->anal, fcn);\n\tr_list_sort (list, delta_cmp2);\n\tr_list_foreach (list, iter, p) {\n\t\tif (p->isarg || p->delta > 0) {\n\t\t\tcontinue;\n\t\t}\n\t\tconst char *pad = r_str_pad (' ', 10 - strlen (p->name));\n\t\tr_cons_printf (\"0x%08\"PFMT64x\"  %s:%s%s\\n\", (ut64)-p->delta, p->name, pad, p->type);\n\t}\n\tr_list_sort (list, delta_cmp);\n\tr_list_foreach (list, iter, p) {\n\t\tif (!p->isarg && p->delta < 0) {\n\t\t\tcontinue;\n\t\t}\n\t\t// TODO: only stack vars if (p->kind == 's') { }\n\t\tconst char *pad = r_str_pad (' ', 10 - strlen (p->name));\n\t\t// XXX this 0x6a is a hack\n\t\tr_cons_printf (\"0x%08\"PFMT64x\"  %s:%s%s\\n\", ((ut64)p->delta) - 0x6a, p->name, pad, p->type);\n\t}\n\tr_list_free (list);\n\n}\n\nstatic int var_cmd(RCore *core, const char *str) {\n\tint delta, type = *str, res = true;\n\tRAnalVar *v1;\n\tif (!str[0]) {\n\t\t// \"afv\"\n\t\tr_core_cmd0 (core, \"afvs\");\n\t\tr_core_cmd0 (core, \"afvb\");\n\t\tr_core_cmd0 (core, \"afvr\");\n\t\treturn true;\n\t}\n\tif (str[1] == '?'|| str[0] == '?') {\n\t\tvar_help (core, *str);\n\t\treturn res;\n\t}\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\tPJ *pj = NULL;\n\tif (str[0] == 'j') { // \"afvj\"\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\treturn false;\n\t\t}\n\t\tpj_o (pj);\n\t\tpj_k (pj, \"sp\");\n\t\tr_anal_var_list_show (core->anal, fcn, 's', 'j', pj);\n\t\tpj_k (pj, \"bp\");\n\t\tr_anal_var_list_show (core->anal, fcn, 'b', 'j', pj);\n\t\tpj_k (pj, \"reg\");\n\t\tr_anal_var_list_show (core->anal, fcn, 'r', 'j', pj);\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t\treturn true;\n\t}\n\tchar *p = strdup (str);\n\tchar *ostr = p;\n\t/* Variable access CFvs = set fun var */\n\tswitch (str[0]) {\n\tcase '-': // \"afv-\"\n\t\tr_core_cmdf (core, \"afvs-%s\", str + 1);\n\t\tr_core_cmdf (core, \"afvb-%s\", str + 1);\n\t\tr_core_cmdf (core, \"afvr-%s\", str + 1);\n\t\treturn true;\n\tcase 'x': // \"afvx\"\n\t\tif (fcn) {\n\t\t\tcmd_afvx (core, fcn, str[1] == 'j');\n\t\t} else {\n\t\t\teprintf (\"Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t}\n\t\treturn true;\n\tcase 'R': // \"afvR\"\n\tcase 'W': // \"afvW\"\n\tcase '*': // \"afv*\"\n\tcase '=': // \"afv=\"\n\t\tif (fcn) {\n\t\t\tconst char *name = strchr (ostr, ' ');\n\t\t\tif (name) {\n\t\t\t\tname = r_str_trim_head_ro (name);\n\t\t\t}\n\t\t\tif (str[1] == 'j') {\n\t\t\t\tpj = r_core_pj_new (core);\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t\tlist_vars (core, fcn, pj, str[0], name);\n\t\t\tif (str[1] == 'j') {\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t\treturn true;\n\t\t} else {\n\t\t\teprintf (\"afv: Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\treturn false;\n\t\t}\n\tcase 'a': // \"afva\"\n\t\tif (fcn) {\n\t\t\tr_anal_function_delete_all_vars (fcn);\n\t\t\tr_core_recover_vars (core, fcn, false);\n\t\t\tfree (p);\n\t\t\treturn true;\n\t\t} else {\n\t\t\teprintf (\"afv: Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\treturn false;\n\t\t}\n\tcase 'n':\n\t\tif (str[1]) { // \"afvn\"\n\t\t\tRAnalOp *op = r_core_anal_op (core, core->offset, R_ANAL_OP_MASK_BASIC);\n\t\t\tconst char *new_name = r_str_trim_head_ro (strchr (ostr, ' '));\n\t\t\tif (!new_name) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tchar *old_name = strchr (new_name, ' ');\n\t\t\tif (!old_name) {\n\t\t\t\tRAnalVar *var = op ? r_anal_get_used_function_var (core->anal, op->addr) : NULL;\n\t\t\t\tif (var) {\n\t\t\t\t\told_name = var->name;\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Cannot find var @ 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\t\t\tr_anal_op_free (op);\n\t\t\t\t\tfree (ostr);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t*old_name++ = 0;\n\t\t\t\tr_str_trim (old_name);\n\t\t\t}\n\t\t\tif (fcn) {\n\t\t\t\tv1 = r_anal_function_get_var_byname (fcn, old_name);\n\t\t\t\tif (v1) {\n\t\t\t\t\tr_anal_var_rename (v1, new_name, true);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Cant find var by name\\n\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"afv: Cannot find function in 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tr_anal_op_free (op);\n\t\t\tfree (ostr);\n\t\t} else {\n\t\t\tRListIter *iter;\n\t\t\tRAnalVar *v;\n\t\t\tRList *list = r_anal_var_all_list (core->anal, fcn);\n\t\t\tr_list_foreach (list, iter, v) {\n\t\t\t\tr_cons_printf (\"%s\\n\", v->name);\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\treturn true;\n\tcase 'd': // \"afvd\"\n\t\tif (!fcn) {\n\t\t\teprintf (\"Cannot find function.\\n\");\n\t\t} else if (str[1]) {\n\t\t\tp = strchr (ostr, ' ');\n\t\t\tif (!p) {\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tr_str_trim (p);\n\t\t\tv1 = r_anal_function_get_var_byname (fcn, p);\n\t\t\tif (!v1) {\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tr_anal_var_display (core->anal, v1);\n\t\t\tfree (ostr);\n\t\t} else {\n\t\t\tRListIter *iter;\n\t\t\tRAnalVar *p;\n\t\t\tRList *list = r_anal_var_all_list (core->anal, fcn);\n\t\t\tr_list_foreach (list, iter, p) {\n\t\t\t\tchar *a = r_core_cmd_strf (core, \".afvd %s\", p->name);\n\t\t\t\tif ((a && !*a) || !a) {\n\t\t\t\t\tfree (a);\n\t\t\t\t\ta = strdup (\"\\n\");\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"%s %s = %s\", p->isarg ? \"arg\": \"var\", p->name, a);\n\t\t\t\tfree (a);\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\treturn true;\n\tcase 'f': // \"afvf\"\n\t\t__cmd_afvf (core, ostr);\n\t\tbreak;\n\tcase 't':\n\t\tif (fcn) { // \"afvt\"\n\t\t\tp = strchr (ostr, ' ');\n\t\t\tif (!p++) {\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\tchar *type = strchr (p, ' ');\n\t\t\tif (!type) {\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t*type++ = 0;\n\t\t\tv1 = r_anal_function_get_var_byname (fcn, p);\n\t\t\tif (!v1) {\n\t\t\t\teprintf (\"Cant find get by name %s\\n\", p);\n\t\t\t\tfree (ostr);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tr_anal_var_set_type (v1, type);\n\t\t\tfree (ostr);\n\t\t\treturn true;\n\t\t} else {\n\t\t\teprintf (\"Cannot find function\\n\");\n\t\t\treturn false;\n\t\t}\n\t}\n\tswitch (str[1]) { // afv[bsr]\n\tcase '\\0':\n\tcase '*': // \"afv[bsr]*\"\n\t\tr_anal_var_list_show (core->anal, fcn, type, str[1], NULL);\n\t\tbreak;\n\tcase 'j':  // \"afv[bsr]j\"\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\treturn false;\n\t\t}\n\t\tr_anal_var_list_show (core->anal, fcn, type, str[1], pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t\tbreak;\n\tcase '.': // \"afv[bsr].\"\n\t\tr_anal_var_list_show (core->anal, fcn, core->offset, 0, NULL);\n\t\tbreak;\n\tcase '-': // \"afv[bsr]-\"\n\t\tif (!fcn) {\n\t\t\teprintf (\"Cannot find function\\n\");\n\t\t\treturn false;\n\t\t}\n\t\tif (str[2] == '*') {\n\t\t\tr_anal_function_delete_vars_by_kind (fcn, type);\n\t\t} else {\n\t\t\tRAnalVar *var = NULL;\n\t\t\tif (IS_DIGIT (str[2])) {\n\t\t\t\tvar = r_anal_function_get_var (fcn, type, (int)r_num_math (core->num, str + 1));\n\t\t\t} else {\n\t\t\t\tchar *name = r_str_trim_dup (str + 2);\n\t\t\t\tif (name) {\n\t\t\t\t\tvar = r_anal_function_get_var_byname (fcn, name);\n\t\t\t\t\tr_free (name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (var) {\n\t\t\t\tr_anal_var_delete (var);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"afv[bsr]d\"\n\t\teprintf (\"This command is deprecated, use afvd instead\\n\");\n\t\tbreak;\n\tcase 't': // \"afv[bsr]t\"\n\t\teprintf (\"This command is deprecated use afvt instead\\n\");\n\t\tbreak;\n\tcase 's': // \"afv[bsr]s\"\n\tcase 'g': // \"afv[bsr]g\"\n\t\tif (str[2] != '\\0') {\n\t\t\tint idx = r_num_math (core->num, str + 2);\n\t\t\tchar *vaddr;\n\t\t\tp = strchr (ostr, ' ');\n\t\t\tif (!p) {\n\t\t\t\tvar_help (core, type);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_str_trim (p);\n\t\t\tut64 addr = core->offset;\n\t\t\tif ((vaddr = strchr (p , ' '))) {\n\t\t\t\taddr = r_num_math (core->num, vaddr);\n\t\t\t}\n\t\t\tRAnalVar *var = r_anal_function_get_var (fcn, str[0], idx);\n\t\t\tif (!var) {\n\t\t\t\teprintf (\"Cannot find variable with delta %d\\n\", idx);\n\t\t\t\tres = false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tint rw = (str[1] == 'g') ? R_ANAL_VAR_ACCESS_TYPE_READ : R_ANAL_VAR_ACCESS_TYPE_WRITE;\n\t\t\tint ptr = *var->type == 's' ? idx - fcn->maxstack : idx;\n\t\t\tRAnalOp *op = r_core_anal_op (core, addr, 0);\n\t\t\tconst char *ireg = op ? op->ireg : NULL;\n\t\t\tr_anal_var_set_access (var, ireg, addr, rw, ptr);\n\t\t\tr_anal_op_free (op);\n\t\t} else {\n\t\t\teprintf (\"Missing argument\\n\");\n\t\t}\n\t\tbreak;\n\tcase ' ': { // \"afv[bsr]\"\n\t\tbool isarg = false;\n\t\tconst int size = 4;\n\t\tp = strchr (ostr, ' ');\n\t\tif (!p) {\n\t\t\tvar_help (core, type);\n\t\t\tbreak;\n\t\t}\n\t\tif (!fcn) {\n\t\t\teprintf (\"Missing function at 0x%08\" PFMT64x \"\\n\", core->offset);\n\t\t\tbreak;\n\t\t}\n\t\t*p++ = 0;\n\t\tr_str_trim_head (p);\n\t\tchar *name = strchr (p, ' ');\n\t\tif (!name) {\n\t\t\teprintf (\"Missing name\\n\");\n\t\t\tbreak;\n\t\t}\n\t\t*name++ = 0;\n\t\tr_str_trim_head (name);\n\n\t\tif (type == 'r') { //registers\n\t\t\tRRegItem *i = r_reg_get (core->anal->reg, p, -1);\n\t\t\tif (!i) {\n\t\t\t\teprintf (\"Register not found\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdelta = i->index;\n\t\t\tisarg = true;\n\t\t} else {\n\t\t\tdelta = r_num_math (core->num, p);\n\t\t}\n\n\t\tchar *vartype = strchr (name, ' ');\n\t\tif (!vartype) {\n\t\t\tvartype = \"int\";\n\t\t} else {\n\t\t\t*vartype++ = 0;\n\t\t\tr_str_trim (vartype);\n\t\t}\n\t\tif (type == 'b') {\n\t\t\tdelta -= fcn->bp_off;\n\t\t}\n\t\tif ((type == 'b') && delta > 0) {\n\t\t\tisarg = true;\n\t\t} else if (type == 's' && delta > fcn->maxstack) {\n\t\t\tisarg = true;\n\t\t}\n\t\tr_anal_function_set_var (fcn, delta, type, vartype, size, isarg, name);\n \t\t}\n\t\tbreak;\n\t}\n\tfree (ostr);\n\treturn res;\n}\n\nstatic void print_trampolines(RCore *core, ut64 a, ut64 b, size_t element_size) {\n\tint i;\n\tfor (i = 0; i < core->blocksize; i += element_size) {\n\t\tut32 n;\n\t\tmemcpy (&n, core->block + i, sizeof (ut32));\n\t\tif (n >= a && n <= b) {\n\t\t\tif (element_size == 4) {\n\t\t\t\tr_cons_printf (\"f trampoline.%x @ 0x%\" PFMT64x \"\\n\", n, core->offset + i);\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\"f trampoline.%\" PFMT32x \" @ 0x%\" PFMT64x \"\\n\", n, core->offset + i);\n\t\t\t}\n\t\t\tr_cons_printf (\"Cd %zu @ 0x%\" PFMT64x \":%zu\\n\", element_size, core->offset + i, element_size);\n\t\t\t// TODO: add data xrefs\n\t\t}\n\t}\n}\n\nstatic void cmd_anal_trampoline(RCore *core, const char *input) {\n\tint bits = r_config_get_i (core->config, \"asm.bits\");\n\tchar *p, *inp = strdup (input);\n\tp = strchr (inp, ' ');\n\tif (p) {\n\t\t*p = 0;\n\t}\n\tut64 a = r_num_math (core->num, inp);\n\tut64 b = p? r_num_math (core->num, p + 1): 0;\n\tfree (inp);\n\n\tswitch (bits) {\n\tcase 32:\n\t\tprint_trampolines (core, a, b, 4);\n\t\tbreak;\n\tcase 64:\n\t\tprint_trampolines (core, a, b, 8);\n\t\tbreak;\n\t}\n}\n\nstatic const char *syscallNumber(int n) {\n\treturn sdb_fmt (n > 1000 ? \"0x%x\" : \"%d\", n);\n}\n\nR_API char *cmd_syscall_dostr(RCore *core, st64 n, ut64 addr) {\n\tint i;\n\tchar str[64];\n\tst64 N = n;\n\tint defVector = r_syscall_get_swi (core->anal->syscall);\n\tif (defVector > 0) {\n\t\tn = -1;\n\t}\n\tif (n == -1 || defVector > 0) {\n\t\tn = (int)r_debug_reg_get (core->dbg, \"oeax\");\n\t\tif (!n || n == -1) {\n\t\t\tconst char *a0 = r_reg_get_name (core->anal->reg, R_REG_NAME_SN);\n\t\t\tn = (a0 == NULL)? -1: (int)r_debug_reg_get (core->dbg, a0);\n\t\t}\n\t}\n\tRSyscallItem *item = r_syscall_get (core->anal->syscall, n, defVector);\n\tif (!item) {\n\t\titem =  r_syscall_get (core->anal->syscall, N, -1);\n\t}\n\tif (!item) {\n\t\treturn r_str_newf (\"%s = unknown ()\", syscallNumber (n));\n\t}\n\tchar *res = r_str_newf (\"%s = %s (\", syscallNumber (item->num), item->name);\n\t// TODO: move this to r_syscall\n\tconst char *cc = r_anal_syscc_default (core->anal);\n\t//TODO replace the hardcoded CC with the sdb ones\n\tfor (i = 0; i < item->args; i++) {\n\t\t// XXX this is a hack to make syscall args work on x86-32 and x86-64\n\t\t// we need to shift sn first.. which is bad, but needs to be redesigned\n\t\tint regidx = i;\n\t\tif (core->rasm->bits == 32 && core->rasm->cur && !strcmp (core->rasm->cur->arch, \"x86\")) {\n\t\t\tregidx++;\n\t\t}\n\t\tut64 arg = r_debug_arg_get (core->dbg, cc, regidx);\n\t\t//r_cons_printf (\"(%d:0x%\"PFMT64x\")\\n\", i, arg);\n\t\tif (item->sargs) {\n\t\t\tswitch (item->sargs[i]) {\n\t\t\tcase 'p': // pointer\n\t\t\t\tres = r_str_appendf (res, \"0x%08\" PFMT64x \"\", arg);\n\t\t\t\tbreak;\n\t\t\tcase 'i':\n\t\t\t\tres = r_str_appendf (res, \"%\" PFMT64u \"\", arg);\n\t\t\t\tbreak;\n\t\t\tcase 'z':\n\t\t\t\tmemset (str, 0, sizeof (str));\n\t\t\t\tr_io_read_at (core->io, arg, (ut8 *)str, sizeof (str) - 1);\n\t\t\t\tr_str_filter (str, strlen (str));\n\t\t\t\tres = r_str_appendf (res, \"\\\"%s\\\"\", str);\n\t\t\t\tbreak;\n\t\t\tcase 'Z': {\n\t\t\t\t//TODO replace the hardcoded CC with the sdb ones\n\t\t\t\tut64 len = r_debug_arg_get (core->dbg, cc, i + 2);\n\t\t\t\tlen = R_MIN (len + 1, sizeof (str) - 1);\n\t\t\t\tif (len == 0) {\n\t\t\t\t\tlen = 16; // override default\n\t\t\t\t}\n\t\t\t\t(void)r_io_read_at (core->io, arg, (ut8 *)str, len);\n\t\t\t\tstr[len] = 0;\n\t\t\t\tr_str_filter (str, -1);\n\t\t\t\tres = r_str_appendf (res, \"\\\"%s\\\"\", str);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdefault:\n\t\t\t\tres = r_str_appendf (res, \"0x%08\" PFMT64x \"\", arg);\n\t\t\t}\n\t\t} else {\n\t\t\tres = r_str_appendf (res, \"0x%08\" PFMT64x \"\", arg);\n\t\t}\n\t\tif (i + 1 < item->args) {\n\t\t\tres = r_str_appendf (res, \", \");\n\t\t}\n\t}\n\tr_syscall_item_free (item);\n\treturn r_str_appendf (res, \")\");\n}\n\nstatic bool mw(RAnalEsil *esil, ut64 addr, const ut8 *buf, int len) {\n\tint *ec = (int*)esil->user;\n\t*ec += (len * 2);\n\treturn true;\n}\n\nstatic bool mr(RAnalEsil *esil, ut64 addr, ut8 *buf, int len) {\n\tint *ec = (int*)esil->user;\n\t*ec += len;\n\treturn true;\n}\n\nstatic int esil_cost(RCore *core, ut64 addr, const char *expr) {\n\tif (R_STR_ISEMPTY (expr)) {\n\t\treturn 0;\n\t}\n\tint ec = 0;\n\tRAnalEsil *e = r_anal_esil_new (256, 0, 0);\n\tr_anal_esil_setup (e, core->anal, false, false, false);\n\te->user = &ec;\n\te->cb.mem_read = mr;\n\te->cb.mem_write = mw;\n\tr_anal_esil_parse (e, expr);\n\tr_anal_esil_free (e);\n\treturn ec;\n}\n\nstatic void cmd_syscall_do(RCore *core, st64 n, ut64 addr) {\n\tchar *msg = cmd_syscall_dostr (core, n, addr);\n\tif (msg) {\n\t\tr_cons_println (msg);\n\t\tfree (msg);\n\t}\n}\n\nstatic void core_anal_bytes(RCore *core, const ut8 *buf, int len, int nops, int fmt) {\n\tbool be = core->print->big_endian;\n\tbool use_color = core->print->flags & R_PRINT_FLAGS_COLOR;\n\tcore->parser->subrel = r_config_get_i (core->config, \"asm.sub.rel\");\n\tint ret, i, j, idx, size;\n\tconst char *color = \"\";\n\tconst char *esilstr;\n\tconst char *opexstr;\n\tRAnalHint *hint;\n\tRAnalEsil *esil = NULL;\n\tRAsmOp asmop;\n\tRAnalOp op = {0};\n\tut64 addr;\n\tPJ *pj = NULL;\n\tint totalsize = 0;\n\n\t// Variables required for setting up ESIL to REIL conversion\n\tif (use_color) {\n\t\tcolor = core->cons->context->pal.label;\n\t}\n\tswitch (fmt) {\n\tcase 'j': {\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\tbreak;\n\t\t}\n\t\tpj_a (pj);\n\t\tbreak;\n\t}\n\t}\n\tfor (i = idx = ret = 0; idx < len && (!nops || (nops && i < nops)); i++, idx += ret) {\n\t\taddr = core->offset + idx;\n\t\tr_asm_set_pc (core->rasm, addr);\n\t\thint = r_anal_hint_get (core->anal, addr);\n\t\tret = r_anal_op (core->anal, &op, addr, buf + idx, len - idx,\n\t\t\tR_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_OPEX | R_ANAL_OP_MASK_HINT);\n\t\t(void)r_asm_disassemble (core->rasm, &asmop, buf + idx, len - idx);\n\t\tesilstr = R_STRBUF_SAFEGET (&op.esil);\n\t\topexstr = R_STRBUF_SAFEGET (&op.opex);\n\t\tchar *mnem = strdup (r_asm_op_get_asm (&asmop));\n\t\tchar *sp = strchr (mnem, ' ');\n\t\tif (sp) {\n\t\t\t*sp = 0;\n\t\t\tif (op.prefix) {\n\t\t\t\tchar *arg = strdup (sp + 1);\n\t\t\t\tchar *sp = strchr (arg, ' ');\n\t\t\t\tif (sp) {\n\t\t\t\t\t*sp = 0;\n\t\t\t\t}\n\t\t\t\tfree (mnem);\n\t\t\t\tmnem = arg;\n\t\t\t}\n\t\t}\n\t\tif (ret < 1 && fmt != 'd') {\n\t\t\teprintf (\"Oops at 0x%08\" PFMT64x \" (\", core->offset + idx);\n\t\t\tfor (i = idx, j = 0; i < core->blocksize && j < 3; i++, j++) {\n\t\t\t\teprintf (\"%02x \", buf[i]);\n\t\t\t}\n\t\t\teprintf (\"...)\\n\");\n\t\t\tfree (mnem);\n\t\t\tbreak;\n\t\t}\n\t\tsize = op.size;\n\t\tif (fmt == 'd') {\n\t\t\tchar *opname = strdup (r_asm_op_get_asm (&asmop));\n\t\t\tif (opname) {\n\t\t\t\tr_str_split (opname, ' ');\n\t\t\t\tchar *d = r_asm_describe (core->rasm, opname);\n\t\t\t\tif (R_STR_ISNOTEMPTY (d)) {\n\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", opname, d);\n\t\t\t\t\tfree (d);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Unknown opcode\\n\");\n\t\t\t\t}\n\t\t\t\tfree (opname);\n\t\t\t}\n\t\t} else if (fmt == 'E') {\n\t\t\tr_cons_printf (\"%s\\n\", esilstr);\n\t\t} else if (fmt == 'e') {\n\t\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\t\tif (use_color) {\n\t\t\t\t\tr_cons_printf (\"%s0x%\" PFMT64x Color_RESET \" %s\\n\", color, core->offset + idx, esilstr);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \" %s\\n\", core->offset + idx, esilstr);\n\t\t\t\t}\n\t\t\t}\n\t\t} else if (fmt == 's') {\n\t\t\ttotalsize += op.size;\n\t\t} else if (fmt == '*') {\n\t\t\t// TODO: ao* useful for wat? wx [bytes] ?\n\t\t} else if (fmt == 'j') {\n\t\t\tchar strsub[128] = { 0 };\n\t\t\t// pc+33\n\t\t\tr_parse_subvar (core->parser, NULL,\n\t\t\t\tcore->offset + idx,\n\t\t\t\tasmop.size, r_asm_op_get_asm (&asmop),\n\t\t\t\tstrsub, sizeof (strsub));\n\t\t\t\tut64 killme = UT64_MAX;\n\t\t\t\tif (r_io_read_i (core->io, op.ptr, &killme, op.refptr, be)) {\n\t\t\t\t\tcore->parser->subrel_addr = killme;\n\t\t\t\t}\n\t\t\t// 0x33->sym.xx\n\t\t\tchar *p = strdup (strsub);\n\t\t\tif (p) {\n\t\t\t\tr_parse_filter (core->parser, addr, core->flags, hint, p,\n\t\t\t\t\t\tstrsub, sizeof (strsub), be);\n\t\t\t\tfree (p);\n\t\t\t}\n\t\t\tpj_o (pj);\n\t\t\tpj_ks (pj, \"opcode\", r_asm_op_get_asm (&asmop));\n\t\t\tif (!*strsub) {\n\t\t\t\tr_str_ncpy (strsub, r_asm_op_get_asm (&asmop), sizeof (strsub) -1 );\n\t\t\t}\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_parse_subvar (core->parser, fcn, addr, asmop.size,\n\t\t\t\t\t\t\tstrsub, strsub, sizeof (strsub));\n\t\t\t\t}\n\t\t\t}\n\t\t\tpj_ks (pj, \"disasm\", strsub);\n\t\t\t// apply pseudo if needed\n\t\t\t{\n\t\t\t\tchar *pseudo = calloc (128 + strlen (strsub), 3);\n\t\t\t\tr_parse_parse (core->parser, strsub, pseudo);\n\t\t\t\tif (pseudo && *pseudo) {\n\t\t\t\t\tpj_ks (pj, \"pseudo\", pseudo);\n\t\t\t\t}\n\t\t\t\tfree (pseudo);\n\t\t\t}\n\t\t\t{\n\t\t\t\tchar *opname = strdup (strsub);\n\t\t\t\tchar *sp = strchr (opname, ' ');\n\t\t\t\tif (sp) {\n\t\t\t\t\t*sp = 0;\n\t\t\t\t}\n\t\t\t\tchar *d = r_asm_describe (core->rasm, opname);\n\t\t\t\tif (d && *d) {\n\t\t\t\t\tpj_ks (pj, \"description\", d);\n\t\t\t\t}\n\t\t\t\tfree (d);\n\t\t\t\tfree (opname);\n\t\t\t}\n\t\t\tpj_ks (pj, \"mnemonic\", mnem);\n\t\t\t{\n\t\t\t\tut8 *mask = r_anal_mask (core->anal, len - idx, buf + idx, core->offset + idx);\n\t\t\t\tchar *maskstr = r_hex_bin2strdup (mask, size);\n\t\t\t\tpj_ks (pj, \"mask\", maskstr);\n\t\t\t\tfree (mask);\n\t\t\t\tfree (maskstr);\n\t\t\t}\n\t\t\tif (hint && hint->opcode) {\n\t\t\t\tpj_ks (pj, \"ophint\", hint->opcode);\n\t\t\t}\n\t\t\tif (hint && hint->jump != UT64_MAX) {\n\t\t\t\top.jump = hint->jump;\n\t\t\t}\n\t\t\tif (hint && hint->fail != UT64_MAX) {\n\t\t\t\top.fail = hint->fail;\n\t\t\t}\n\t\t\tif (op.jump != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"jump\", op.jump);\n\t\t\t}\n\t\t\tif (op.fail != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"fail\", op.fail);\n\t\t\t}\n\t\t\tconst char *jesil = (hint && hint->esil) ? hint->esil: esilstr;\n\t\t\tif (jesil && *jesil) {\n\t\t\t\tpj_ks (pj, \"esil\", jesil);\n\t\t\t}\n\t\t\tpj_kb (pj, \"sign\", op.sign);\n\t\t\tpj_kn (pj, \"prefix\", op.prefix);\n\t\t\tpj_ki (pj, \"id\", op.id);\n\t\t\tif (opexstr && *opexstr) {\n\t\t\t\tpj_k (pj, \"opex\");\n\t\t\t\tpj_j (pj, opexstr);\n\t\t\t}\n\t\t\tpj_kn (pj, \"addr\", core->offset + idx);\n\t\t\t{\n\t\t\t\tchar *bytes = r_hex_bin2strdup (buf + idx, size);\n\t\t\t\tpj_ks (pj, \"bytes\", bytes);\n\t\t\t\tfree (bytes);\n\t\t\t}\n\t\t\tif (op.val != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"val\", op.val);\n\t\t\t}\n\t\t\tif (op.disp && op.disp != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"disp\", op.disp);\n\t\t\t}\n\t\t\tif (op.ptr != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"ptr\", op.ptr);\n\t\t\t}\n\t\t\tpj_ki (pj, \"size\", size);\n\t\t\tpj_ks (pj, \"type\", r_anal_optype_to_string (op.type));\n\t\t\t{\n\t\t\t\tconst char *datatype = r_anal_datatype_to_string (op.datatype);\n\t\t\t\tif (datatype) {\n\t\t\t\t\tpj_ks (pj, \"datatype\", datatype);\n\t\t\t\t}\n\n\t\t\t}\n\t\t\tif (esilstr) {\n\t\t\t\tint ec = esil_cost (core, addr, esilstr);\n\t\t\t\tpj_ki (pj, \"esilcost\", ec);\n\t\t\t}\n\t\t\tif (op.reg) {\n\t\t\t\tpj_ks (pj, \"reg\", op.reg);\n\t\t\t}\n\t\t\tif (op.ireg) {\n\t\t\t\tpj_ks (pj, \"ireg\", op.ireg);\n\t\t\t}\n\t\t\tpj_ki (pj, \"scale\", op.scale);\n\t\t\tif (op.refptr != -1) {\n\t\t\t\tpj_ki (pj, \"refptr\", op.refptr);\n\t\t\t}\n\t\t\tpj_ki (pj, \"cycles\", op.cycles);\n\t\t\tpj_ki (pj, \"failcycles\", op.failcycles);\n\t\t\tpj_ki (pj, \"delay\", op.delay);\n\t\t\tconst char *p1 = r_anal_stackop_tostring (op.stackop);\n\t\t\tif (strcmp (p1, \"null\")) {\n\t\t\t\tpj_ks (pj, \"stack\", p1);\n\t\t\t}\n\t\t\tpj_kn (pj, \"stackptr\", op.stackptr);\n\t\t\tconst char *arg = (op.type & R_ANAL_OP_TYPE_COND)\n\t\t\t\t? r_anal_cond_tostring (op.cond): NULL;\n\t\t\tif (arg) {\n\t\t\t\tpj_ks (pj, \"cond\", arg);\n\t\t\t}\n\t\t\tpj_ks (pj, \"family\", r_anal_op_family_to_string (op.family));\n\t\t\tpj_end (pj);\n\t\t} else if (fmt == 'r') {\n\t\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\t\tif (use_color) {\n\t\t\t\t\tr_cons_printf (\"%s0x%\" PFMT64x Color_RESET \"\\n\", color, core->offset + idx);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \"\\n\", core->offset + idx);\n\t\t\t\t}\n\t\t\t\tr_anal_esil_parse (esil, esilstr);\n\t\t\t\tr_anal_esil_dumpstack (esil);\n\t\t\t\tr_anal_esil_stack_free (esil);\n\t\t\t}\n\t\t} else {\n\t\tchar disasm[128] = { 0 };\n\t\tr_parse_subvar (core->parser, NULL,\n\t\t\tcore->offset + idx,\n\t\t\tasmop.size, r_asm_op_get_asm (&asmop),\n\t\t\tdisasm, sizeof (disasm));\n\t\tut64 killme = UT64_MAX;\n\t\tif (r_io_read_i (core->io, op.ptr, &killme, op.refptr, be)) {\n\t\t\tcore->parser->subrel_addr = killme;\n\t\t}\n\t\tchar *p = strdup (disasm);\n\t\tif (p) {\n\t\t\tr_parse_filter (core->parser, addr, core->flags, hint, p,\n\t\t\t\tdisasm, sizeof (disasm), be);\n\t\t\tfree (p);\n\t\t}\n#define printline(k, fmt, arg)\\\n\t{ \\\n\t\tif (use_color)\\\n\t\t\tr_cons_printf (\"%s%s: \" Color_RESET, color, k);\\\n\t\telse\\\n\t\t\tr_cons_printf (\"%s: \", k);\\\n\t\tif (fmt) r_cons_printf (fmt, arg);\\\n\t}\n\t\t\tprintline (\"address\", \"0x%\" PFMT64x \"\\n\", core->offset + idx);\n\t\t\tprintline (\"opcode\", \"%s\\n\", r_asm_op_get_asm (&asmop));\n\t\t\tif (!*disasm) {\n\t\t\t\tr_str_ncpy (disasm, r_asm_op_get_asm (&asmop), sizeof (disasm) - 1);\n\t\t\t}\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_parse_subvar (core->parser, fcn, addr, asmop.size,\n\t\t\t\t\t\t\tdisasm, disasm, sizeof (disasm));\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (esilstr) {\n\t\t\t\tint ec = esil_cost (core, addr, esilstr);\n\t\t\t\tprintline (\"esilcost\", \"%d\\n\", ec);\n\t\t\t}\n\t\t\tprintline (\"disasm\", \"%s\\n\", disasm);\n\t\t\t{\n\t\t\t\tchar *pseudo = calloc (128 + strlen (disasm), 3);\n\t\t\t\tr_parse_parse (core->parser, disasm, pseudo);\n\t\t\t\tif (pseudo && *pseudo) {\n\t\t\t\t\tprintline (\"pseudo\", \"%s\\n\", pseudo);\n\t\t\t\t}\n\t\t\t\tfree (pseudo);\n\t\t\t}\n\t\t\tprintline (\"mnemonic\", \"%s\\n\", mnem);\n\t\t\t{\n\t\t\t\tchar *opname = strdup (disasm);\n\t\t\t\tchar *sp = strchr (opname, ' ');\n\t\t\t\tif (sp) {\n\t\t\t\t\t*sp = 0;\n\t\t\t\t}\n\t\t\t\tchar *d = r_asm_describe (core->rasm, opname);\n\t\t\t\tif (d && *d) {\n\t\t\t\t\tprintline (\"description\", \"%s\\n\", d);\n\t\t\t\t}\n\t\t\t\tfree (d);\n\t\t\t\tfree (opname);\n\t\t\t}\n\t\t\t{\n\t\t\t\tut8 *mask = r_anal_mask (core->anal, len - idx, buf + idx, core->offset + idx);\n\t\t\t\tchar *maskstr = r_hex_bin2strdup (mask, size);\n\t\t\t\tprintline (\"mask\", \"%s\\n\", maskstr);\n\t\t\t\tfree (mask);\n\t\t\t\tfree (maskstr);\n\t\t\t}\n\t\t\tif (hint) {\n\t\t\t\tif (hint->opcode) {\n\t\t\t\t\tprintline (\"ophint\", \"%s\\n\", hint->opcode);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintline (\"prefix\", \"%u\\n\", op.prefix);\n\t\t\tprintline (\"id\", \"%d\\n\", op.id);\n#if 0\n// no opex here to avoid lot of tests broken..and having json in here is not much useful imho\n\t\t\tif (opexstr && *opexstr) {\n\t\t\t\tprintline (\"opex\", \"%s\\n\", opexstr);\n\t\t\t}\n#endif\n\t\t\tprintline (\"bytes\", \"%s\", \"\");\n\t\t\tint minsz = R_MIN (len, size);\n\t\t\tminsz = R_MAX (minsz, 0);\n\t\t\tfor (j = 0; j < minsz; j++) {\n\t\t\t\tr_cons_printf (\"%02x\", buf[idx + j]);\n\t\t\t}\n\t\t\tr_cons_newline ();\n\t\t\tif (op.val != UT64_MAX) {\n\t\t\t\tprintline (\"val\", \"0x%08\" PFMT64x \"\\n\", op.val);\n\t\t\t}\n\t\t\tif (op.ptr != UT64_MAX) {\n\t\t\t\tprintline (\"ptr\", \"0x%08\" PFMT64x \"\\n\", op.ptr);\n\t\t\t}\n\t\t\tif (op.disp && op.disp != UT64_MAX) {\n\t\t\t\tprintline (\"disp\", \"0x%08\" PFMT64x \"\\n\", op.disp);\n\t\t\t}\n\t\t\tif (op.refptr != -1) {\n\t\t\t\tprintline (\"refptr\", \"%d\\n\", op.refptr);\n\t\t\t}\n\t\t\tprintline (\"size\", \"%d\\n\", size);\n\t\t\tprintline (\"sign\", \"%s\\n\", r_str_bool (op.sign));\n\t\t\tprintline (\"type\", \"%s\\n\", r_anal_optype_to_string (op.type));\n\t\t\tconst char *datatype = r_anal_datatype_to_string (op.datatype);\n\t\t\tif (datatype) {\n\t\t\t\tprintline (\"datatype\", \"%s\\n\", datatype);\n\t\t\t}\n\t\t\tprintline (\"cycles\", \"%d\\n\", op.cycles);\n\t\t\tif (op.failcycles) {\n\t\t\t\tprintline (\"failcycles\", \"%d\\n\", op.failcycles);\n\t\t\t}\n\t\t\tif (op.type2) {\n\t\t\t\tprintline (\"type2\", \"0x%x\\n\", op.type2);\n\t\t\t}\n\t\t\tif (op.reg) {\n\t\t\t\tprintline (\"reg\", \"%s\\n\", op.reg);\n\t\t\t}\n\t\t\tif (op.ireg) {\n\t\t\t\tprintline (\"ireg\", \"%s\\n\", op.ireg);\n\t\t\t}\n\t\t\tif (op.scale) {\n\t\t\t\tprintline (\"scale\", \"%d\\n\", op.scale);\n\t\t\t}\n\t\t\tif (hint && hint->esil) {\n\t\t\t\tprintline (\"esil\", \"%s\\n\", hint->esil);\n\t\t\t} else if (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\t\tprintline (\"esil\", \"%s\\n\", esilstr);\n\t\t\t}\n\t\t\tif (hint && hint->jump != UT64_MAX) {\n\t\t\t\top.jump = hint->jump;\n\t\t\t}\n\t\t\tif (op.jump != UT64_MAX) {\n\t\t\t\tprintline (\"jump\", \"0x%08\" PFMT64x \"\\n\", op.jump);\n\t\t\t}\n\t\t\tif (op.direction != 0) {\n\t\t\t\tconst char * dir = op.direction == 1 ? \"read\"\n\t\t\t\t\t: op.direction == 2 ? \"write\"\n\t\t\t\t\t: op.direction == 4 ? \"exec\"\n\t\t\t\t\t: op.direction == 8 ? \"ref\": \"none\";\n\t\t\t\tprintline (\"direction\", \"%s\\n\", dir);\n\t\t\t}\n\t\t\tif (hint && hint->fail != UT64_MAX) {\n\t\t\t\top.fail = hint->fail;\n\t\t\t}\n\t\t\tif (op.fail != UT64_MAX) {\n\t\t\t\tprintline (\"fail\", \"0x%08\" PFMT64x \"\\n\", op.fail);\n\t\t\t}\n\t\t\tif (op.delay) {\n\t\t\t\tprintline (\"delay\", \"%d\\n\", op.delay);\n\t\t\t}\n\t\t\t{\n\t\t\t\tconst char *arg = (op.type & R_ANAL_OP_TYPE_COND)?  r_anal_cond_tostring (op.cond): NULL;\n\t\t\t\tif (arg) {\n\t\t\t\t\tprintline (\"cond\", \"%s\\n\", arg);\n\t\t\t\t}\n\t\t\t}\n\t\t\tprintline (\"family\", \"%s\\n\", r_anal_op_family_to_string (op.family));\n\t\t\tif (op.stackop != R_ANAL_STACK_NULL) {\n\t\t\t\tprintline (\"stackop\", \"%s\\n\", r_anal_stackop_tostring (op.stackop));\n\t\t\t}\n\t\t\tif (op.stackptr) {\n\t\t\t\tprintline (\"stackptr\", \"%\"PFMT64u\"\\n\", op.stackptr);\n\t\t\t}\n\t\t}\n\t\t//r_cons_printf (\"false: 0x%08\"PFMT64x\"\\n\", core->offset+idx);\n\t\t//free (hint);\n\t\tfree (mnem);\n\t\tr_anal_hint_free (hint);\n\t\tr_anal_op_fini (&op);\n\t}\n\tr_anal_op_fini (&op);\n\tif (fmt == 's') {\n\t\tr_cons_printf (\"%d\\n\", totalsize);\n\t} else if (fmt == 'j') {\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\tr_anal_esil_free (esil);\n}\n\nstatic int bb_cmp(const void *a, const void *b) {\n\tconst RAnalBlock *ba = a;\n\tconst RAnalBlock *bb = b;\n\treturn ba->addr - bb->addr;\n}\n\nstatic int casecmp(const void* _a, const void * _b) {\n\tconst RAnalCaseOp* a = _a;\n\tconst RAnalCaseOp* b = _b;\n\treturn a->addr != b->addr;\n}\n\nstatic ut64 __opaddr(const RAnalBlock *b, ut64 addr) {\n\tint i;\n\tif (addr >= b->addr && addr < (b->addr + b->size)) {\n\t\tfor (i = 0; i < b->ninstr; i++) {\n\t\t\tut64 aa = b->addr + r_anal_bb_offset_inst (b, i);\n\t\t\tut64 ab = b->addr + r_anal_bb_offset_inst (b, i + 1);\n\t\t\tif (addr >= aa && addr < ab) {\n\t\t\t\treturn aa;\n\t\t\t}\n\t\t}\n\t}\n\treturn UT64_MAX;\n}\n\nstatic RList *get_xrefs(RAnalBlock *block) {\n\tRListIter *iter;\n\tRAnalRef *ref;\n\tRList *list = NULL;\n\tsize_t i;\n\tfor (i = 0; i < block->ninstr; i++) {\n\t\tut64 ia = block->addr + block->op_pos[i];\n\t\tRList *xrefs = r_anal_xrefs_get (block->anal, ia);\n\t\tr_list_foreach (xrefs, iter, ref) {\n\t\t\tif (!list) {\n\t\t\t\tlist = r_list_newf (free);\n\t\t\t}\n\t\t\tr_list_push (list, ut64_new (ref->addr));\n\t\t}\n\t}\n\treturn list;\n}\n\nstatic char *fcnjoin(RList *list) {\n\tRAnalFunction *n;\n\tRListIter *iter;\n\tRStrBuf buf;\n\tr_strbuf_init (&buf);\n\tr_list_foreach (list, iter, n) {\n\t\tr_strbuf_appendf (&buf, \" 0x%08\" PFMT64x, n->addr);\n\t}\n\tchar *s = strdup (r_strbuf_get (&buf));\n\tr_strbuf_fini (&buf);\n\treturn s;\n}\n\nstatic char *ut64join(RList *list) {\n\tut64 *n;\n\tRListIter *iter;\n\tRStrBuf buf;\n\tr_strbuf_init (&buf);\n\tr_list_foreach (list, iter, n) {\n\t\tr_strbuf_appendf (&buf, \" 0x%08\" PFMT64x, *n);\n\t}\n\tchar *s = strdup (r_strbuf_get (&buf));\n\tr_strbuf_fini (&buf);\n\treturn s;\n}\n\nstatic RList *get_calls(RAnalBlock *block) {\n\tRList *list = NULL;\n\tRAnalOp op;\n\tut8 *data = malloc (block->size);\n\tif (data) {\n\t\tblock->anal->iob.read_at (block->anal->iob.io, block->addr, data, block->size);\n\t\tsize_t i;\n\t\tfor (i = 0; i < block->size; i++) {\n\t\t\tint ret = r_anal_op (block->anal, &op, block->addr + i, data + i, block->size - i, R_ANAL_OP_MASK_HINT);\n\t\t\tif (ret < 1) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (op.type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t\tif (!list) {\n\t\t\t\t\tlist = r_list_newf (free);\n\t\t\t\t}\n\t\t\t\tr_list_push (list, ut64_new (op.jump));\n\t\t\t}\n\t\t\tr_anal_op_fini (&op);\n\t\t\tif (op.size > 0) {\n\t\t\t\ti += op.size - 1;\n\t\t\t}\n\t\t}\n\n\t}\n\treturn list;\n}\n\nstatic void anal_bb_list(RCore *core, const char *input) {\n\tconst int mode = *input;\n\tPJ *pj = NULL;\n\tRTable *table = NULL;\n\tRBIter iter;\n\tRAnalBlock *block;\n\tif (mode == 'j') {\n\t\tpj = pj_new ();\n\t\tpj_o (pj);\n\t\tpj_ka (pj, \"blocks\");\n\t} else if (mode == ',' || mode == 't') {\n\t\ttable = r_table_new (\"bbs\");\n\t\tRTableColumnType *s = r_table_type (\"string\");\n\t\tRTableColumnType *n = r_table_type (\"number\");\n\t\tr_table_add_column (table, n, \"addr\", 0);\n\t\tr_table_add_column (table, n, \"size\", 0);\n\t\tr_table_add_column (table, n, \"traced\", 0);\n\t\tr_table_add_column (table, n, \"ninstr\", 0);\n\t\tr_table_add_column (table, s, \"jump\", 0);\n\t\tr_table_add_column (table, s, \"fail\", 0);\n\t\tr_table_add_column (table, s, \"fcns\", 0);\n\t\tr_table_add_column (table, s, \"calls\", 0);\n\t\tr_table_add_column (table, s, \"xrefs\", 0);\n\t}\n\n\tr_rbtree_foreach (core->anal->bb_tree, iter, block, RAnalBlock, _rb) {\n\t\tRList *xrefs = get_xrefs (block);\n\t\tRList *calls = get_calls (block);\n\t\tswitch (mode) {\n\t\tcase 'j':\n\t\t\tpj_o (pj);\n\t\t\tchar *addr = r_str_newf (\"0x%\" PFMT64x, block->addr);\n\t\t\tpj_ks (pj, \"addr\", addr);\n\t\t\tfree (addr);\n\t\t\tpj_kb (pj, \"traced\", block->traced);\n\t\t\tpj_kn (pj, \"ninstr\", block->ninstr);\n\t\t\tpj_kn (pj, \"size\", block->size);\n\t\t\tif (block->jump != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"jump\", block->jump);\n\t\t\t}\n\t\t\tif (block->fail != UT64_MAX) {\n\t\t\t\tpj_kn (pj, \"fail\", block->fail);\n\t\t\t}\n\t\t\tif (xrefs) {\n\t\t\t\tpj_ka (pj, \"xrefs\");\n\t\t\t\tRListIter *iter2;\n\t\t\t\tut64 *addr;\n\t\t\t\tr_list_foreach (xrefs, iter2, addr) {\n\t\t\t\t\tpj_n (pj, *addr);\n\t\t\t\t}\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t\tif (calls) {\n\t\t\t\tpj_ka (pj, \"calls\");\n\t\t\t\tRListIter *iter2;\n\t\t\t\tut64 *addr;\n\t\t\t\tr_list_foreach (calls, iter2, addr) {\n\t\t\t\t\tpj_n (pj, *addr);\n\t\t\t\t}\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t\tpj_ka (pj, \"fcns\");\n\t\t\tRListIter *iter2;\n\t\t\tRAnalFunction *fcn;\n\t\t\tr_list_foreach (block->fcns, iter2, fcn) {\n\t\t\t\tpj_n (pj, fcn->addr);\n\t\t\t}\n\t\t\tpj_end (pj);\n\t\t\tpj_end (pj);\n\t\t\tbreak;\n\t\tcase ',':\n\t\tcase 't':\n\t\t\t{\n\t\t\t\tchar *jump = block->jump != UT64_MAX? r_str_newf (\"0x%08\" PFMT64x, block->jump): strdup (\"\");\n\t\t\t\tchar *fail = block->fail != UT64_MAX? r_str_newf (\"0x%08\" PFMT64x, block->fail): strdup (\"\");\n\t\t\t\tchar *call = ut64join (calls);\n\t\t\t\tchar *xref = ut64join (calls);\n\t\t\t\tchar *fcns = fcnjoin (block->fcns);\n\t\t\t\tr_table_add_rowf (table, \"xnddsssss\",\n\t\t\t\t\tblock->addr,\n\t\t\t\t\tblock->size,\n\t\t\t\t\tblock->traced,\n\t\t\t\t\tblock->ninstr,\n\t\t\t\t\tjump,\n\t\t\t\t\tfail,\n\t\t\t\t\tfcns,\n\t\t\t\t\tcall,\n\t\t\t\t\txref\n\t\t\t\t);\n\t\t\t\tfree (jump);\n\t\t\t\tfree (fail);\n\t\t\t\tfree (call);\n\t\t\t\tfree (xref);\n\t\t\t\tfree (fcns);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'q':\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x\"\\n\", block->addr);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x , block->addr);\n\t\t\tif (block->jump != UT64_MAX) {\n\t\t\t\tr_cons_printf (\" .j 0x%08\" PFMT64x, block->jump);\n\t\t\t}\n\t\t\tif (block->fail != UT64_MAX) {\n\t\t\t\tr_cons_printf (\" .f 0x%08\" PFMT64x, block->fail);\n\t\t\t}\n\t\t\tif (xrefs) {\n\t\t\t\tRListIter *iter2;\n\t\t\t\tr_cons_printf (\" .x\");\n\t\t\t\tut64 *addr;\n\t\t\t\tr_list_foreach (xrefs, iter2, addr) {\n\t\t\t\t\tr_cons_printf (\" 0x%08\" PFMT64x, *addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (calls) {\n\t\t\t\tr_cons_printf (\" .c\");\n\t\t\t\tRListIter *iter2;\n\t\t\t\tut64 *addr;\n\t\t\t\tr_list_foreach (calls, iter2, addr) {\n\t\t\t\t\tr_cons_printf (\" 0x%08\" PFMT64x, *addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (block->fcns) {\n\t\t\t\tRListIter *iter2;\n\t\t\t\tRAnalFunction *fcn;\n\t\t\t\tr_list_foreach (block->fcns, iter2, fcn) {\n\t\t\t\t\tr_cons_printf (\" .u 0x%\" PFMT64x, fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_cons_printf (\" .s %\" PFMT64d \"\\n\", block->size);\n\t\t}\n\t\tr_list_free (calls);\n\t\tr_list_free (xrefs);\n\t}\n\tif (mode == 'j') {\n\t\tpj_end (pj);\n\t\tpj_end (pj);\n\t\tchar *j = pj_drain (pj);\n\t\tr_cons_println (j);\n\t\tfree (j);\n\t} else if (mode == 't' || mode == ',') {\n\t\tchar *q = strchr (input, ' ');\n\t\tif (q) {\n\t\t\tr_table_query (table, q + 1);\n\t\t}\n\t\tchar *s = r_table_tofancystring (table);\n\t\tr_cons_println (s);\n\t\tfree (s);\n\t\tr_table_free (table);\n\t}\n}\n\nstatic void print_bb(PJ *pj, const RAnalBlock *b, const RAnalFunction *fcn, const ut64 addr) {\n\tRListIter *iter2;\n\tRAnalBlock *b2;\n\tint outputs = (b->jump != UT64_MAX) + (b->fail != UT64_MAX);\n\tint inputs = 0;\n\tr_list_foreach (fcn->bbs, iter2, b2) {\n\t\tinputs += (b2->jump == b->addr) + (b2->fail == b->addr);\n\t}\n\tut64 opaddr = __opaddr (b, addr);\n\tif (pj) {\n\t\tpj_o (pj);\n\t\tif (b->jump != UT64_MAX) {\n\t\t\tpj_kn (pj, \"jump\", b->jump);\n\t\t}\n\t\tif (b->fail != UT64_MAX) {\n\t\t\tpj_kn (pj, \"fail\", b->fail);\n\t\t}\n\t\tif (b->switch_op) {\n\t\t\tpj_k (pj, \"switch_op\");\n\t\t\tpj_o (pj);\n\t\t\tpj_kn (pj, \"addr\", b->switch_op->addr);\n\t\t\tpj_kn (pj, \"min_val\", b->switch_op->min_val);\n\t\t\tpj_kn (pj, \"def_val\", b->switch_op->def_val);\n\t\t\tpj_kn (pj, \"max_val\", b->switch_op->max_val);\n\t\t\tpj_k (pj, \"cases\");\n\t\t\tpj_a (pj);\n\t\t\t{\n\t\t\tRListIter *case_op_iter;\n\t\t\tRAnalCaseOp *case_op;\n\t\t\tr_list_foreach (b->switch_op->cases, case_op_iter, case_op) {\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_kn (pj, \"addr\", case_op->addr);\n\t\t\t\tpj_kn (pj, \"jump\", case_op->jump);\n\t\t\t\tpj_kn (pj, \"value\", case_op->value);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t\t}\n\t\t\tpj_end (pj);\n\t\t\tpj_end (pj);\n\t\t}\n\t\tpj_kn (pj, \"opaddr\", opaddr);\n\t\tpj_kn (pj, \"addr\", b->addr);\n\t\tpj_ki (pj, \"size\", b->size);\n\t\tpj_ki (pj, \"inputs\", inputs);\n\t\tpj_ki (pj, \"outputs\", outputs);\n\t\tpj_ki (pj, \"ninstr\", b->ninstr);\n\t\tpj_kb (pj, \"traced\", b->traced);\n\t\tpj_end (pj);\n\t} else {\n\t\tif (b->switch_op) {\n\t\t\tRList *unique_cases = r_list_uniq (b->switch_op->cases, casecmp);\n\t\t\toutputs += r_list_length (unique_cases);\n\t\t\tr_list_free (unique_cases);\n\t\t}\n\t\tif (b->jump != UT64_MAX) {\n\t\t\tr_cons_printf (\"jump: 0x%08\"PFMT64x\"\\n\", b->jump);\n\t\t}\n\t\tif (b->fail != UT64_MAX) {\n\t\t\tr_cons_printf (\"fail: 0x%08\"PFMT64x\"\\n\", b->fail);\n\t\t}\n\t\tr_cons_printf (\"opaddr: 0x%08\"PFMT64x\"\\n\", opaddr);\n\t\tr_cons_printf (\"addr: 0x%08\" PFMT64x \"\\nsize: %\" PFMT64d \"\\ninputs: %d\\noutputs: %d\\nninstr: %d\\ntraced: %s\\n\",\n\t\t\tb->addr, b->size, inputs, outputs, b->ninstr, r_str_bool (b->traced));\n\t}\n}\n\nstatic bool anal_fcn_list_bb(RCore *core, const char *input, bool one) {\n\tRDebugTracepoint *tp = NULL;\n\tRListIter *iter;\n\tRAnalBlock *b;\n\tint mode = 0;\n\tut64 addr, bbaddr = UT64_MAX;\n\tPJ *pj = NULL;\n\n\tif (*input == '.') {\n\t\tone = true;\n\t\tinput++;\n\t}\n\tif (*input) {\n\t\tmode = *input;\n\t\tinput++;\n\t}\n\tif (*input == '.') {\n\t\tone = true;\n\t\tinput++;\n\t}\n\tif (input && *input) {\n\t\taddr = bbaddr = r_num_math (core->num, input);\n\t\tif (!addr && *input != '0') {\n\t\t\taddr = core->offset;\n\t\t}\n\t} else {\n\t\taddr = core->offset;\n\t}\n\tinput = r_str_trim_head_ro (input);\n\tif (one) {\n\t\tbbaddr = addr;\n\t}\n\tif (mode == 'j') {\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\tr_cons_println (\"[]\");\n\t\t\treturn false;\n\t\t}\n\t\tpj_a (pj);\n\t}\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\tif (!fcn) {\n\t\tif (mode == 'j') {\n\t\t\tpj_end (pj);\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t}\n\t\tif (mode == 'i' && input && *input == 'j') {\n\t\t\tr_cons_println (\"{}\");\n\t\t}\n\t\teprintf (\"Cannot find function in 0x%08\"PFMT64x\"\\n\", addr);\n\t\treturn false;\n\t}\n\tif (mode == '*') {\n\t\tr_cons_printf (\"fs blocks\\n\");\n\t}\n\tif (fcn->bbs) {\n\t\tr_list_sort (fcn->bbs, bb_cmp);\n\t}\n\tif (mode == '=') { // afb\n\t\tRList *flist = r_list_newf ((RListFree) r_listinfo_free);\n\t\tif (!flist) {\n\t\t\treturn false;\n\t\t}\n\t\tls_foreach (fcn->bbs, iter, b) {\n\t\t\tRInterval inter = (RInterval) {b->addr, b->size};\n\t\t\tRListInfo *info = r_listinfo_new (NULL, inter, inter, -1, NULL);\n\t\t\tif (!info) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_list_append (flist, info);\n\t\t}\n\t\tRTable *table = r_core_table (core, \"fcnbbs\");\n\t\tr_table_visual_list (table, flist, core->offset, core->blocksize,\n\t\t\tr_cons_get_size (NULL), r_config_get_i (core->config, \"scr.color\"));\n\t\tr_cons_printf (\"\\n%s\\n\", r_table_tostring (table));\n\t\tr_table_free (table);\n\t\tr_list_free (flist);\n\t\treturn true;\n\t}\n\n\tRTable *t = NULL;\n\tif (mode == 't') {\n\t\tt = r_table_new (\"fcnbbs\");\n\t\tr_table_set_columnsf (t, \"xdxx\", \"addr\", \"size\", \"jump\", \"fail\");\n\t}\n\tr_list_foreach (fcn->bbs, iter, b) {\n\t\tif (one) {\n\t\t\tif (bbaddr != UT64_MAX && (bbaddr < b->addr || bbaddr >= (b->addr + b->size))) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t}\n\t\tswitch (mode) {\n\t\tcase 't':\n\t\t\tr_table_add_rowf (t, \"xdxx\", b->addr, b->size, b->jump, b->fail);\n\t\t\tbreak;\n\t\tcase 'r':\n\t\t\tif (b->jump == UT64_MAX) {\n\t\t\t\tut64 retaddr = r_anal_bb_opaddr_i (b, b->ninstr - 1);\n\t\t\t\tif (retaddr == UT64_MAX) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\n\t\t\t\tif (!strcmp (input, \"*\")) {\n\t\t\t\t\tr_cons_printf (\"db 0x%08\"PFMT64x\"\\n\", retaddr);\n\t\t\t\t} else if (!strcmp (input, \"-*\")) {\n\t\t\t\t\tr_cons_printf (\"db-0x%08\"PFMT64x\"\\n\", retaddr);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"0x%08\"PFMT64x\"\\n\", retaddr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tr_cons_printf (\"f bb.%05\" PFMT64x \" = 0x%08\" PFMT64x \"\\n\",\n\t\t\t\tb->addr & 0xFFFFF, b->addr);\n\t\t\tbreak;\n\t\tcase 'q':\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", b->addr);\n\t\t\tbreak;\n\t\tcase 'j':\n\t\t\tprint_bb (pj, b, fcn, addr);\n\t\t\tbreak;\n\t\tcase 'i':\n\t\t\tif (*input == 'j') { // \"afbij\"\n\t\t\t\tpj = r_core_pj_new (core);\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tprint_bb (pj, b, fcn, addr);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t} else {\n\t\t\t\tprint_bb (NULL, b, fcn, addr);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ttp = r_debug_trace_get (core->dbg, b->addr);\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" 0x%08\" PFMT64x \" %02X:%04X %\" PFMT64d,\n\t\t\t\tb->addr, b->addr + b->size,\n\t\t\t\ttp? tp->times: 0, tp? tp->count: 0,\n\t\t\t\tb->size);\n\t\t\tif (b->jump != UT64_MAX) {\n\t\t\t\tr_cons_printf (\" j 0x%08\" PFMT64x, b->jump);\n\t\t\t}\n\t\t\tif (b->fail != UT64_MAX) {\n\t\t\t\tr_cons_printf (\" f 0x%08\" PFMT64x, b->fail);\n\t\t\t}\n\t\t\tif (b->switch_op) {\n\t\t\t\tRAnalCaseOp *cop;\n\t\t\t\tRListIter *iter;\n\t\t\t\tRList *unique_cases = r_list_uniq (b->switch_op->cases, casecmp);\n\t\t\t\tr_list_foreach (unique_cases, iter, cop) {\n\t\t\t\t\tr_cons_printf (\" s 0x%08\" PFMT64x, cop->addr);\n\t\t\t\t}\n\t\t\t\tr_list_free (unique_cases);\n\t\t\t}\n\t\t\tr_cons_newline ();\n\t\t\tbreak;\n\t\t}\n\t}\n\tif (mode == 't') {\n\t\tconst char *arg = input;\n\t\tif (r_table_query (t, arg)) {\n\t\t\tchar *ts = r_table_tofancystring (t);\n\t\t\tr_cons_printf (\"%s\", ts);\n\t\t\tfree (ts);\n\t\t}\n\t\tr_table_free (t);\n\t} else if (mode == 'j') {\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\treturn true;\n}\n\nstatic bool anal_bb_edge (RCore *core, const char *input) {\n\t// \"afbe\" switch-bb-addr case-bb-addr\n\tchar *arg = strdup (r_str_trim_head_ro (input));\n\tchar *sp = strchr (arg, ' ');\n\tbool ret = false;\n\tif (sp) {\n\t\t*sp++ = 0;\n\t\tut64 switch_addr = r_num_math (core->num, arg);\n\t\tut64 case_addr = r_num_math (core->num, sp);\n\t\tRList *blocks = r_anal_get_blocks_in (core->anal, switch_addr);\n\t\tif (blocks && !r_list_empty (blocks)) {\n\t\t\tr_anal_block_add_switch_case (r_list_first (blocks), switch_addr, 0, case_addr);\n\t\t\tret = true;\n\t\t}\n\t\tr_list_free (blocks);\n\t}\n\tfree (arg);\n\treturn ret;\n}\n\nstatic bool anal_fcn_del_bb(RCore *core, const char *input) {\n\tut64 addr = r_num_math (core->num, input);\n\tif (!addr) {\n\t\taddr = core->offset;\n\t}\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, -1);\n\tif (fcn) {\n\t\tif (!strcmp (input, \"*\")) {\n\t\t\twhile (!r_list_empty (fcn->bbs)) {\n\t\t\t\tr_anal_function_remove_block (fcn, r_list_first (fcn->bbs));\n\t\t\t}\n\t\t} else {\n\t\t\tRAnalBlock *b;\n\t\t\tRListIter *iter;\n\t\t\tr_list_foreach (fcn->bbs, iter, b) {\n\t\t\t\tif (b->addr == addr) {\n\t\t\t\t\tr_anal_function_remove_block (fcn, b);\n\t\t\t\t\treturn true;\n\t\t\t\t}\n\t\t\t}\n\t\t\teprintf (\"Cannot find basic block\\n\");\n\t\t}\n\t} else {\n\t\teprintf (\"Cannot find function\\n\");\n\t}\n\treturn false;\n}\n\nstatic int cmd_afbplus(RCore *core, const char *input) {\n\t// fcn_addr bb_addr bb_size [jump] [fail]\n\tconst char *ptr2 = NULL;\n\tut64 fcnaddr = -1LL, addr = -1LL;\n\tut64 size = 0LL;\n\tut64 jump = UT64_MAX;\n\tut64 fail = UT64_MAX;\n\tRAnalFunction *fcn = NULL;\n\tRAnalDiff *diff = NULL;\n\n\tchar *ptr = r_str_trim_dup (input);\n\n\tswitch (r_str_word_set0 (ptr)) {\n\tcase 6:\n\t\tptr2 = r_str_word_get0 (ptr, 6);\n\t\tif (!(diff = r_anal_diff_new ())) {\n\t\t\teprintf (\"error: Cannot init RAnalDiff\\n\");\n\t\t\tfree (ptr);\n\t\t\treturn false;\n\t\t}\n\t\tif (ptr2[0] == 'm') {\n\t\t\tdiff->type = R_ANAL_DIFF_TYPE_MATCH;\n\t\t} else if (ptr2[0] == 'u') {\n\t\t\tdiff->type = R_ANAL_DIFF_TYPE_UNMATCH;\n\t\t}\n\tcase 5: // get fail\n\t\tfail = r_num_math (core->num, r_str_word_get0 (ptr, 4));\n\tcase 4: // get jump\n\t\tjump = r_num_math (core->num, r_str_word_get0 (ptr, 3));\n\tcase 3: // get size\n\t\tsize = r_num_math (core->num, r_str_word_get0 (ptr, 2));\n\tcase 2: // get addr\n\t\taddr = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\tcase 1: // get fcnaddr\n\t\tfcnaddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t}\n\tfcn = r_anal_get_function_at (core->anal, fcnaddr);\n\tif (fcn) {\n\t\tif (!r_anal_fcn_add_bb (core->anal, fcn, addr, size, jump, fail, diff))\n\t\t//if (!r_anal_fcn_add_bb_raw (core->anal, fcn, addr, size, jump, fail, type, diff))\n\t\t{\n\t\t\teprintf (\"afb+: Cannot add basic block at 0x%08\"PFMT64x\"\\n\", addr);\n\t\t}\n\t} else {\n\t\teprintf (\"afb+ No function at 0x%\" PFMT64x \" from 0x%08\"PFMT64x\" -> 0x%08\"PFMT64x\"\\n\",\n\t\t\t\tfcnaddr, addr, jump);\n\t}\n\tr_anal_diff_free (diff);\n\tfree (ptr);\n\treturn true;\n}\n\nstatic void r_core_anal_nofunclist(RCore *core, const char *input) {\n\tint minlen = (int)(input[0]==' ') ? r_num_math (core->num, input + 1): 16;\n\tut64 code_size = r_num_get (core->num, \"$SS\");\n\tut64 base_addr = r_num_get (core->num, \"$S\");\n\tut64 chunk_size, chunk_offset, i;\n\tRListIter *iter, *iter2;\n\tRAnalFunction *fcn;\n\tRAnalBlock *b;\n\tchar* bitmap;\n\tint counter;\n\n\tif (minlen < 1) {\n\t\tminlen = 1;\n\t}\n\tif (code_size < 1) {\n\t\treturn;\n\t}\n\tbitmap = calloc (1, code_size + 64);\n\tif (!bitmap) {\n\t\treturn;\n\t}\n\n\t// for each function\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\t// for each basic block in the function\n\t\tr_list_foreach (fcn->bbs, iter2, b) {\n\t\t\t// if it is not withing range, continue\n\t\t\tif ((fcn->addr < base_addr) || (fcn->addr >= base_addr+code_size))\n\t\t\t\tcontinue;\n\t\t\t// otherwise mark each byte in the BB in the bitmap\n\t\t\tfor (counter = 0; counter < b->size; counter++) {\n\t\t\t\tbitmap[b->addr+counter-base_addr] = '=';\n\t\t\t}\n\t\t\t// finally, add a special marker to show the beginning of a\n\t\t\t// function\n\t\t\tbitmap[fcn->addr-base_addr] = 'F';\n\t\t}\n\t}\n\n\t// Now we print the list of memory regions that are not assigned to a function\n\tchunk_size = 0;\n\tchunk_offset = 0;\n\tfor (i = 0; i < code_size; i++) {\n\t\tif (bitmap[i]){\n\t\t\t// We only print a region is its size is bigger than 15 bytes\n\t\t\tif (chunk_size >= minlen){\n\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, base_addr+chunk_offset, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"  %6\" PFMT64u \"   %s\\n\",\n\t\t\t\t\t\t\tbase_addr+chunk_offset, chunk_size, fcn->name);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"  %6\" PFMT64u \"\\n\",\n\t\t\t\t\t\t\tbase_addr+chunk_offset, chunk_size);\n\t\t\t\t}\n\t\t\t}\n\t\t\tchunk_size = 0;\n\t\t\tchunk_offset = i+1;\n\t\t\tcontinue;\n\t\t}\n\t\tchunk_size+=1;\n\t}\n\tif (chunk_size >= 16) {\n\t\tfcn = r_anal_get_fcn_in (core->anal, base_addr+chunk_offset, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);\n\t\tif (fcn) {\n\t\t\tr_cons_printf (\"0x%08\"PFMT64x\"  %6\" PFMT64u \"   %s\\n\", base_addr+chunk_offset, chunk_size, fcn->name);\n\t\t} else {\n\t\t\tr_cons_printf (\"0x%08\"PFMT64x\"  %6\" PFMT64u \"\\n\", base_addr+chunk_offset, chunk_size);\n\t\t}\n\t}\n\tfree (bitmap);\n}\n\nstatic void r_core_anal_fmap(RCore *core, const char *input) {\n\tint show_color = r_config_get_i (core->config, \"scr.color\");\n\tint cols = r_config_get_i (core->config, \"hex.cols\") * 4;\n\tut64 code_size = r_num_get (core->num, \"$SS\");\n\tut64 base_addr = r_num_get (core->num, \"$S\");\n\tRListIter *iter, *iter2;\n\tRAnalFunction *fcn;\n\tRAnalBlock *b;\n\tint assigned;\n\tut64 i;\n\n\tif (code_size < 1) {\n\t\treturn;\n\t}\n\tchar *bitmap = calloc (1, code_size + 64);\n\tif (!bitmap) {\n\t\treturn;\n\t}\n\n\t// for each function\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\t// for each basic block in the function\n\t\tr_list_foreach (fcn->bbs, iter2, b) {\n\t\t\t// if it is not within range, continue\n\t\t\tif ((fcn->addr < base_addr) || (fcn->addr >= base_addr+code_size))\n\t\t\t\tcontinue;\n\t\t\t// otherwise mark each byte in the BB in the bitmap\n\t\t\tint counter = 1;\n\t\t\tfor (counter = 0; counter < b->size; counter++) {\n\t\t\t\tbitmap[b->addr+counter-base_addr] = '=';\n\t\t\t}\n\t\t\tbitmap[fcn->addr-base_addr] = 'F';\n\t\t}\n\t}\n\t// print the bitmap\n\tassigned = 0;\n\tif (cols < 1) {\n\t\tcols = 1;\n\t}\n\tfor (i = 0; i < code_size; i += 1) {\n\t\tif (!(i % cols)) {\n\t\t\tr_cons_printf (\"\\n0x%08\"PFMT64x\"  \", base_addr+i);\n\t\t}\n\t\tif (bitmap[i]) {\n\t\t\tassigned++;\n\t\t}\n\t\tif (show_color) {\n\t\t\tif (bitmap[i]) {\n\t\t\t\tr_cons_printf (\"%s%c\\x1b[0m\", Color_GREEN, bitmap[i]);\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\".\");\n\t\t\t}\n\t\t} else {\n\t\t\tr_cons_printf (\"%c\", bitmap[i] ? bitmap[i] : '.' );\n\t\t}\n\t}\n\tr_cons_printf (\"\\n%d / %\" PFMT64u \" (%.2lf%%) bytes assigned to a function\\n\",\n\t\tassigned, code_size, 100.0 * ( (float) assigned) / code_size);\n\tfree (bitmap);\n}\n\nstatic bool fcnNeedsPrefix(const char *name) {\n\tif (!strncmp (name, \"entry\", 5)) {\n\t\treturn false;\n\t}\n\tif (!strncmp (name, \"main\", 4)) {\n\t\treturn false;\n\t}\n\treturn (!strchr (name, '.'));\n}\n\nstatic char * getFunctionName(RCore *core, ut64 off, const char *name, bool prefix) {\n\tconst char *fcnpfx = \"\";\n\tif (prefix) {\n\t\tif (fcnNeedsPrefix (name) && (!fcnpfx || !*fcnpfx)) {\n\t\t\tfcnpfx = \"fcn\";\n\t\t} else {\n\t\t\tfcnpfx = r_config_get (core->config, \"anal.fcnprefix\");\n\t\t}\n\t}\n\tif (r_reg_get (core->anal->reg, name, -1)) {\n\t\treturn r_str_newf (\"%s.%08\"PFMT64x, \"fcn\", off);\n\t}\n\treturn strdup (name); // r_str_newf (\"%s%s%s\", fcnpfx, *fcnpfx? \".\": \"\", name);\n}\n\nstatic void rename_fcnsig(RAnal *anal, const char *oname, const char *nname) {\n#define DB anal->sdb_types\n\t// rename type\n\tconst char *type = sdb_const_get (DB, oname, 0);\n\tif (type && !strcmp (type, \"func\")) {\n\t\tsdb_unset (DB, oname, 0);\n\t\tsdb_set (DB, nname, \"func\", 0);\n\t}\n\t// rename args\n\tchar *k = r_str_newf (\"func.%s.args\", oname);\n\tconst char *argstr = sdb_const_get (DB, k, 0);\n\tif (R_STR_ISEMPTY (argstr)) {\n\t\tfree (k);\n\t\treturn;\n\t}\n\tint i, args = r_num_get (NULL, argstr);\n\tsdb_unset (DB, k, 0);\n\tfree (k);\n\tk = r_str_newf (\"func.%s.args\", nname);\n\tchar *v = r_str_newf (\"%d\", (int)args);\n\tsdb_set (DB, k, v, 0);\n\tfree (v);\n\t// rename arg#\n\tfree (k);\n\tfor (i = 0; i < args; i++) {\n\t\tk = r_str_newf (\"func.%s.arg.%d\", oname, i);\n\t\tchar *v = sdb_get (DB, k, 0);\n\t\tif (v) {\n\t\t\tsdb_unset (DB, k, 0);\n\t\t\tfree (k);\n\t\t\tk = r_str_newf (\"func.%s.arg.%d\", nname, i);\n\t\t\tsdb_set (DB, k, v, 0);\n\t\t\tfree (v);\n\t\t}\n\t\tfree (k);\n\t}\n\t// unset the leftovers\n\tfor (; i < args + 8; i++) {\n\t\tk = r_str_newf (\"func.%s.arg.%d\", oname, i);\n\t\tsdb_unset (DB, k, 0);\n\t\tfree (k);\n\t}\n\t// rename ret\n\tk = r_str_newf (\"func.%s.ret\", oname);\n\tv = sdb_get (DB, k, 0);\n\tsdb_unset (DB, k, 0);\n\tfree (k);\n\tk = r_str_newf (\"func.%s.ret\", nname);\n\tsdb_set (DB, k, v, 0);\n\tfree (k);\n\tfree (v);\n#undef DB\n}\n\n/* TODO: move into r_anal_function_rename (); */\nstatic bool __setFunctionName(RCore *core, ut64 addr, const char *_name, bool prefix) {\n\tr_return_val_if_fail (core && _name, false);\n\t_name = r_str_trim_head_ro (_name);\n\tchar *name = getFunctionName (core, addr, _name, prefix);\n\t// RAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_ANY);\n\tRAnalFunction *fcn = r_anal_get_function_at (core->anal, addr);\n\tif (fcn) {\n\t\tchar *oname = strdup (fcn->name);\n\t\tRFlagItem *flag = r_flag_get (core->flags, fcn->name);\n\t\tif (flag && flag->space && strcmp (flag->space->name, R_FLAGS_FS_FUNCTIONS) == 0) {\n\t\t\t// Only flags in the functions fs should be renamed, e.g. we don't want to rename symbol flags.\n\t\t\tr_flag_rename (core->flags, flag, name);\n\t\t} else {\n\t\t\t// No flag or not specific to the function, create a new one.\n\t\t\tr_flag_space_push (core->flags, R_FLAGS_FS_FUNCTIONS);\n\t\t\tr_flag_set (core->flags, name, fcn->addr, r_anal_function_size_from_entry (fcn));\n\t\t\tr_flag_space_pop (core->flags);\n\t\t}\n\t\trename_fcnsig (core->anal, oname, name);\n\t\tr_anal_function_rename (fcn, name);\n\t\tif (core->anal->cb.on_fcn_rename) {\n\t\t\tcore->anal->cb.on_fcn_rename (core->anal, core->anal->user, fcn, name);\n\t\t}\n\t\tfree (oname);\n\t\tfree (name);\n\t\treturn true;\n\t}\n\tfree (name);\n\treturn false;\n}\n\nstatic void afCc(RCore *core, const char *input) {\n\tut64 addr;\n\tRAnalFunction *fcn;\n\tif (*input == ' ') {\n\t\taddr = r_num_math (core->num, input);\n\t} else {\n\t\taddr = core->offset;\n\t}\n\tif (addr == 0LL) {\n\t\tfcn = r_anal_get_function_byname (core->anal, input + 3);\n\t} else {\n\t\tfcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);\n\t}\n\tif (fcn) {\n\t\tut32 totalCycles = r_anal_function_cost (fcn);\n\t\t// FIXME: This defeats the purpose of the function, but afC is used in project files.\n\t\t// cf. canal.c\n\t\tr_cons_printf (\"%d\\n\", totalCycles);\n\t} else {\n\t\teprintf (\"afCc: Cannot find function\\n\");\n\t}\n}\n\nstatic void cmd_anal_fcn_sig(RCore *core, const char *input) {\n\tbool json = (input[0] == 'j');\n\tchar *p = strchr (input, ' ');\n\tchar *fcn_name = p ? r_str_trim_dup (p): NULL;\n\tRListIter *iter;\n\tRAnalFuncArg *arg;\n\n\tRAnalFunction *fcn;\n\tif (fcn_name) {\n\t\tfcn = r_anal_get_function_byname (core->anal, fcn_name);\n\t} else {\n\t\tfcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\tif (fcn) {\n\t\t\tfcn_name = fcn->name;\n\t\t}\n\t}\n\tif (!fcn) {\n\t\treturn;\n\t}\n\n\tif (json) {\n\t\tPJ *j = pj_new ();\n\t\tif (!j) {\n\t\t\treturn;\n\t\t}\n\t\tpj_a (j);\n\n\t\tchar *key = NULL;\n\t\tif (fcn_name) {\n\t\t\tkey = resolve_fcn_name (core->anal, fcn_name);\n\t\t}\n\n\t\tif (key) {\n\t\t\tconst char *fcn_type = r_type_func_ret (core->anal->sdb_types, key);\n\t\t\tint nargs = r_type_func_args_count (core->anal->sdb_types, key);\n\t\t\tif (fcn_type) {\n\t\t\t\tpj_o (j);\n\t\t\t\tpj_ks (j, \"name\", r_str_getf (key));\n\t\t\t\tpj_ks (j, \"return\", r_str_getf (fcn_type));\n\t\t\t\tpj_k (j, \"args\");\n\t\t\t\tpj_a (j);\n\t\t\t\tif (nargs) {\n\t\t\t\t\tRList *list = r_core_get_func_args (core, fcn_name);\n\t\t\t\t\tr_list_foreach (list, iter, arg) {\n\t\t\t\t\t\tchar *type = arg->orig_c_type;\n\t\t\t\t\t\tpj_o (j);\n\t\t\t\t\t\tpj_ks (j, \"name\", arg->name);\n\t\t\t\t\t\tpj_ks (j, \"type\", type);\n\t\t\t\t\t\tpj_end (j);\n\t\t\t\t\t}\n\t\t\t\t\tr_list_free (list);\n\t\t\t\t}\n\t\t\t\tpj_end (j);\n\t\t\t\tpj_ki (j, \"count\", nargs);\n\t\t\t\tpj_end (j);\n\t\t\t}\n\t\t\tfree (key);\n\t\t} else {\n\t\t\tpj_o (j);\n\t\t\tpj_ks (j, \"name\", r_str_getf (fcn_name));\n\t\t\tpj_k (j, \"args\");\n\t\t\tpj_a (j);\n\n\t\t\tRAnalFcnVarsCache cache;\n\t\t\tr_anal_fcn_vars_cache_init (core->anal, &cache, fcn);\n\t\t\tint nargs = 0;\n\t\t\tRAnalVar *var;\n\t\t\tr_list_foreach (cache.rvars, iter, var) {\n\t\t\t\tnargs++;\n\t\t\t\tpj_o (j);\n\t\t\t\tpj_ks (j, \"name\", var->name);\n\t\t\t\tpj_ks (j, \"type\", var->type);\n\t\t\t\tpj_end (j);\n\t\t\t}\n\t\t\tr_list_foreach (cache.bvars, iter, var) {\n\t\t\t\tif (var->delta <= 0) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnargs++;\n\t\t\t\tpj_o (j);\n\t\t\t\tpj_ks (j, \"name\", var->name);\n\t\t\t\tpj_ks (j, \"type\", var->type);\n\t\t\t\tpj_end (j);\n\t\t\t}\n\t\t\tr_list_foreach (cache.svars, iter, var) {\n\t\t\t\tif (!var->isarg) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tnargs++;\n\t\t\t\tpj_o (j);\n\t\t\t\tpj_ks (j, \"name\", var->name);\n\t\t\t\tpj_ks (j, \"type\", var->type);\n\t\t\t\tpj_end (j);\n\t\t\t}\n\t\t\tr_anal_fcn_vars_cache_fini (&cache);\n\n\t\t\tpj_end (j);\n\t\t\tpj_ki (j, \"count\", nargs);\n\t\t\tpj_end (j);\n\t\t}\n\t\tpj_end (j);\n\t\tconst char *s = pj_string (j);\n\t\tif (s) {\n\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t}\n\t\tpj_free (j);\n\t} else {\n\t\tchar *sig = r_anal_fcn_format_sig (core->anal, fcn, fcn_name, NULL, NULL, NULL);\n\t\tif (sig) {\n\t\t\tr_cons_printf (\"%s\\n\", sig);\n\t\t\tfree (sig);\n\t\t}\n\t}\n}\n\nstatic void __updateStats(RCore *core, Sdb *db, ut64 addr, int statsMode) {\n\tRAnalOp *op = r_core_anal_op (core, addr, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT | R_ANAL_OP_MASK_DISASM);\n\tif (!op) {\n\t\treturn;\n\t}\n\tif (statsMode == 'f') {\n\t\tconst char *family = r_anal_op_family_to_string (op->family);\n\t\tsdb_num_inc (db, family, 1, 0);\n\t} else if (statsMode == 'o') {\n\t\tconst char *type = r_anal_optype_to_string (op->type);\n\t\tsdb_num_inc (db, type, 1, 0);\n\t} else {\n\t\tchar *mnem = strdup (op->mnemonic);\n\t\tchar *sp = strchr (mnem, ' ');\n\t\tif (sp) {\n\t\t\t*sp = 0;\n\t\t\t//memmove (mnem, sp + 1, strlen (sp));\n\t\t}\n\t\tsdb_num_inc (db, mnem, 1, 0);\n\t}\n\t//sdb_set (db, family, \"1\", 0);\n\t//r_cons_printf (\"0x%08\"PFMT64x\" %s\\n\", addr, family);\n\tr_anal_op_free (op);\n\t// r_core_cmdf (core, \"pd 1 @ 0x%08\"PFMT64x\"\\n\", addr);\n}\n\nstatic Sdb *__core_cmd_anal_fcn_stats(RCore *core, const char *input) {\n\tbool silentMode = false;\n\tint statsMode = 0;\n\tif (*input == '*') {\n\t\tsilentMode = true;\n\t\tinput++;\n\t}\n\tswitch (*input) {\n\tcase '?':\n\t\teprintf (\"Usage: afis[ft]\\n\");\n\t\teprintf (\" afis           enumerate unique opcodes in function\\n\");\n\t\teprintf (\" afisa[fo]      enumerate all the meta of all the functions\\n\");\n\t\teprintf (\" afisf          enumerate unique opcode families in function\\n\");\n\t\teprintf (\" afiso          enumerate unique opcode types in function\\n\");\n\t\teprintf (\" afist [query]  list in table format\\n\");\n\t\treturn NULL;\n\tcase 'f':\n\tcase 'o':\n\t\tstatsMode = *input;\n\t\tinput++;\n\t\tbreak;\n\t}\n\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\tif (!fcn) {\n\t\teprintf (\"Cannot find any function at 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\treturn NULL;\n\t}\n\tSdb *db = sdb_new0 ();\n\tRAnalBlock *bb;\n\tRListIter *iter;\n\tr_list_foreach (fcn->bbs, iter, bb) {\n\t\tint i;\n\t\t__updateStats (core, db, bb->addr, statsMode);\n\t\tfor (i = 0; i< bb->op_pos_size; i++) {\n\t\t\tut16 op_pos = bb->op_pos[i];\n\t\t\t__updateStats (core, db, bb->addr + op_pos, statsMode);\n\t\t}\n\t}\n\tif (silentMode) {\n\t\t// nothing\n\t} else if (*input == 't') {\n\t\tSdbList *ls = sdb_foreach_list (db, true);\n\t\tSdbListIter *it;\n\t\tRTable *t = r_table_new (\"fcnstats\");\n\t\tSdbKv *kv;\n\t\tRTableColumnType *typeString = r_table_type (\"string\");\n\t\tRTableColumnType *typeNumber = r_table_type (\"number\");\n\t\tr_table_add_column (t, typeString, \"name\", 0);\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *key = sdbkv_key (kv);\n\t\t\tr_table_add_column (t, typeNumber, key, 0);\n\t\t}\n\t\tRList *items = r_list_newf (free);\n\t\tr_list_append (items, strdup (fcn->name));\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *value = sdbkv_value (kv);\n\t\t\tint nv = (int)r_num_get (NULL, value);\n\t\t\tr_list_append (items, r_str_newf (\"%d\", nv));\n\t\t}\n\t\tr_table_add_row_list (t, items);\n\t\tr_table_query (t, input + 1);\n\t\tchar *ts = r_table_tostring (t);\n\t\tr_cons_printf (\"%s\", ts);\n\t\tfree (ts);\n\t\tr_table_free (t);\n\t} else {\n\t\tSdbList *ls = sdb_foreach_list (db, true);\n\t\tSdbListIter *it;\n\t\tSdbKv *kv;\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *key = sdbkv_key(kv);\n\t\t\tconst char *value = sdbkv_value(kv);\n\t\t\tr_cons_printf (\"%4d %s\\n\", (int)r_num_get (NULL, value), key);\n\t\t}\n\t}\n\treturn db;\n\t//sdb_free (db);\n}\n\nstatic void __core_cmd_anal_fcn_allstats(RCore *core, const char *input) {\n\tRAnalFunction *fcn;\n\tSdbKv *kv;\n\tRListIter *iter;\n\tSdbListIter *it;\n\tRList *dbs = r_list_newf ((RListFree)sdb_free);\n\tSdb *d = sdb_new0 ();\n\tut64 oseek = core->offset;\n\tbool isJson = strchr (input, 'j') != NULL;\n\n\tchar *inp = r_str_newf (\"*%s\", input);\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\tr_core_seek (core, fcn->addr, true);\n\t\tSdb *db = __core_cmd_anal_fcn_stats (core, inp);\n                sdb_num_set (db, \".addr\", fcn->addr, 0);\n\t\tr_list_append (dbs, db);\n\t}\n\tfree (inp);\n\tSdb *db;\n\tr_list_foreach (dbs, iter, db) {\n\t\tSdbList *ls = sdb_foreach_list (db, true);\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *name = sdbkv_key(kv);\n\t\t\tsdb_add (d, name, \"1\", 0);\n\t\t}\n\t\tls_free (ls);\n\t}\n\tRTable *t = r_table_new (\"fcnallstats\");\n\tSdbList *ls = sdb_foreach_list (d, true);\n\tRTableColumnType *typeString = r_table_type (\"string\");\n\tRTableColumnType *typeNumber = r_table_type (\"number\");\n\tr_table_add_column (t, typeString, \"name\", 0);\n\tr_table_add_column (t, typeNumber, \"addr\", 0);\n\tls_foreach (ls, it, kv) {\n\t\tconst char *key = sdbkv_key (kv);\n\t\tif (*key == '.') continue;\n\t\tr_table_add_column (t, typeNumber, key, 0);\n\t}\n\tsdb_free (d);\n\n\tr_list_foreach (dbs, iter, db) {\n\t\tSdbList *ls = sdb_foreach_list (db, false);\n\t\tSdbListIter *it;\n\t\tSdbKv *kv;\n\t\tchar *names[100];\n\t\tint i;\n\t\tfor (i = 0; i < 100; i++) {\n\t\t\tnames[i] = NULL;\n\t\t}\n\t\tls_foreach (ls, it, kv) {\n\t\t\tconst char *key = sdbkv_key(kv);\n\t\t\tconst char *value = sdbkv_value (kv);\n\t\t\tif (*key == '.') {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tint idx = r_table_column_nth (t, key);\n\t\t\tif (idx != -1) {\n\t\t\t\tut64 nv = r_num_get (NULL, value);\n\t\t\t\tnames[idx] = r_str_newf (\"%d\", (int)nv);\n\t\t\t} else {\n\t\t\t\teprintf (\"Invalid column name (%s) %c\", key, 10);\n\t\t\t}\n\t\t}\n\t\tRList *items = r_list_newf (free);\n\t\tut64 fcnAddr = sdb_num_get (db, \".addr\", 0);\n\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, fcnAddr, 0);\n\t\tr_list_append (items, fcn?strdup (fcn->name):strdup (\"\"));\n\t\tr_list_append (items, fcn?r_str_newf (\"0x%08\"PFMT64x, fcnAddr): strdup (\"0\"));\n\t\tint cols = r_list_length (t->cols);\n\t\tfor (i = 2; i < cols; i++) {\n\t\t\tif (names[i]) {\n\t\t\t\tif (names[i][0] != '.') {\n\t\t\t\t\tr_list_append (items, strdup (names[i]));\n\t\t\t\t}\n\t\t\t\tR_FREE (names[i]);\n\t\t\t} else {\n\t\t\t\tr_list_append (items, strdup (\"0\"));\n\t\t\t}\n\t\t}\n\t\tr_table_add_row_list (t, items);\n\t}\n\tr_table_query (t, (*input)?input + 1: \"\");\n\tchar *ts = isJson? r_table_tojson(t): r_table_tostring (t);\n\tr_cons_printf (\"%s%s\", ts, isJson ? \"\\n\" : \"\");\n\tfree (ts);\n\tr_table_free (t);\n\tr_core_seek (core, oseek, true);\n\tr_list_free (dbs);\n}\n\nR_API char *fcnshowr(RAnalFunction *function) {\n\tRAnal *a = function->anal;\n\t//PJ *pj = a->coreb.pjWithEncoding (a->coreb.core);\n\tconst char *realname = NULL, *import_substring = NULL;\n\tRStrBuf *sb = r_strbuf_new (\"\");\n\n\tRFlagItem *flag = a->flag_get (a->flb.f, function->addr);\n\t// Can't access R_FLAGS_FS_IMPORTS, since it is defined in r_core.h\n\tif (flag && flag->space && !strcmp (flag->space->name, \"imports\")) {\n\t\t// Get substring after last dot\n\t\timport_substring = r_str_rchr (function->name, NULL, '.');\n\t\tif (import_substring) {\n\t\t\trealname = import_substring + 1;\n\t\t}\n\t} else {\n\t\trealname = function->name;\n\t}\n\t\n\tchar *args = strdup (\"\");\n\tchar *sdb_ret = r_str_newf (\"func.%s.ret\", realname);\n\tchar *sdb_args = r_str_newf (\"func.%s.args\", realname);\n\t// RList *args_list = r_list_newf ((RListFree) free);\n\tunsigned int i;\n\t// const char *ret_type = sdb_const_get (a->sdb_types, sdb_ret, 0);\n\tconst char *argc_str = sdb_const_get (a->sdb_types, sdb_args, 0);\n\tconst int argc = argc_str? atoi (argc_str): 0;\n\n\tconst bool no_return = r_anal_noreturn_at_addr (a, function->addr);\n\tif (no_return) {\n\t\tr_strbuf_appendf (sb, \"tn %s\\n\", function->name);\n\t}\n\tif (function->cc) {\n\t\tr_strbuf_appendf (sb, \"afc %s\\n\", function->cc);\n\t}\n\tfor (i = 0; i < argc; i++) {\n\t\tchar *sdb_arg_i = r_str_newf (\"func.%s.arg.%d\", realname, i);\n\t\tchar *type = sdb_get (a->sdb_types, sdb_arg_i, 0);\n\t\tif (!type) continue;\n\t\tchar *comma = strchr (type, ',');\n\t\tif (comma) {\n\t\t\t*comma = 0;\n\t\t\tconst char *cc_arg = r_reg_get_name (a->reg, r_reg_get_name_idx (sdb_fmt (\"A%d\", i)));\n\t\t\tr_strbuf_appendf (sb, \"afvr %s %s %s\\n\", cc_arg, comma + 1, type);\n\t\t}\n\t\tfree (type);\n\t\tfree (sdb_arg_i);\n\t}\n\tfree (sdb_args);\n\tfree (sdb_ret);\n\tfree (args);\n\treturn r_strbuf_drain (sb);\n}\n\nstatic void cmd_afsr(RCore *core, const char *input) {\n\tut64 addr = core->offset;\n\tRAnalFunction *f;\n\tif ((f = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL))) {\n\t\tchar *res = fcnshowr (f);\n\t\tif (R_STR_ISNOTEMPTY (res)) {\n\t\t\tr_cons_println (res);\n\t\t}\n\t\tfree (res);\n\t} else {\n\t\teprintf (\"No function defined at 0x%08\" PFMT64x \"\\n\", addr);\n\t}\n}\n\nstatic void cmd_afsj(RCore *core, const char *arg) {\n\tut64 a = r_num_math (core->num, arg);\n\tconst ut64 addr = a? a: core->offset;\n\tRAnalFunction *f = r_anal_get_fcn_in (core->anal, addr, -1);\n\tif (f) {\n\t\tchar *s = r_anal_function_get_json (f);\n\t\tr_cons_printf (\"%s\\n\", s);\n\t\tfree (s);\n\t} else {\n\t\teprintf (\"Cannot find function in 0x%08\"PFMT64x\"\\n\", addr);\n\t}\n}\n\nstatic void cmd_afbc(RCore *core, const char *input) {\n\tr_return_if_fail (core && input);\n\tchar *ptr = strdup (input);\n\tif (!ptr) {\n\t\treturn;\n\t}\n\tif (*ptr == '?') {\n\t\teprintf (\"Usage: afbc red @ addrOfBlock\\n\");\n\t} else if (!*ptr) {\n\t\tRAnalBlock *bb = r_anal_get_block_at (core->anal, core->offset);\n\t\tif (bb && (bb->color.r || bb->color.g || bb->color.b)) {\n\t\t\tchar *s = r_cons_rgb_str (NULL, -1, &bb->color);\n\t\t\tif (s) {\n\t\t\t\tchar *name = r_cons_rgb_tostring (bb->color.r, bb->color.g, bb->color.b);\n\t\t\t\tr_cons_printf (\"%s%s\"Color_RESET\"\\n\", s, name);\n\t\t\t\tfree (name);\n\t\t\t\tfree (s);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tut64 addr = core->offset;\n\t\tchar *space = strchr (ptr, ' ');\n\t\tif (space) {\n\t\t\t*space++ = 0;\n\t\t\taddr = r_num_math (core->num, space);\n\t\t}\n\t\tRColor color = {0};\n\t\t(void)r_cons_pal_parse (ptr, &color);\n\t\tif (color.r || color.g || color.b) {\n\t\t\tRAnalBlock *bb = r_anal_get_block_at (core->anal, addr);\n\t\t\tif (bb) {\n\t\t\t\tbb->color = color;\n\t\t\t}\n\t\t} else {\n\t\t\teprintf (\"Invalid color? (%s)\\n\", ptr);\n\t\t}\n\t}\n\tfree (ptr);\n}\n\n// Fcn Xrefs Map\nstatic void xrefs_map(RCore *core, const char *input) {\n\tRListIter *iter, *iter2, *iter3;\n\tRAnalRef *r;\n\tRAnalFunction *f, *f2;\n\tint col = 0;\n\tint count = 0;\n\tdo {\n\t\tr_cons_print (\"             \");\n\t\tcount = 0;\n\t\tr_list_foreach (core->anal->fcns, iter, f) {\n\t\t\tint nlen = strlen (f->name);\n\t\t\tif (col >= nlen) {\n\t\t\t\tr_cons_printf (\"|\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tcount++;\n\t\t\tr_cons_printf (\"%c\", f->name[col]);\n\t\t}\n\t\tr_cons_newline ();\n\t\tcol++;\n\t} while (count);\n\n\tint total = 0;\n\tr_list_foreach (core->anal->fcns, iter, f) {\n\t\tRList *refs = r_anal_function_get_refs (f);\n\t\tr_cons_printf (\"0x%08\"PFMT64x\"  \", f->addr);\n\t\ttotal = 0;\n\t\tr_list_foreach (core->anal->fcns, iter2, f2) {\n\t\t\tint count = 0;\n\t\t\tr_list_foreach (refs, iter3, r) {\n\t\t\t\tif (r->addr == f2->addr) {\n\t\t\t\t\tcount ++;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (count > 0) {\n\t\t\t\ttotal++;\n\t\t\t\tif (count < 10) {\n\t\t\t\t\tr_cons_printf (\"%d\", count);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"+\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\".\");\n\t\t\t}\n\t\t}\n\t\tif (total > 0) {\n\t\t\tr_cons_printf (\"  %s\\n\", f->name);\n\t\t} else {\n\t\t\tr_cons_printf (\"\\r\");\n\t\t}\n\t\tr_list_free (refs);\n\t}\n}\n\nR_API void r_core_af(RCore *core, ut64 addr, const char *name, bool anal_calls) {\n\tint depth = r_config_get_i (core->config, \"anal.depth\");\n\tRAnalFunction *fcn = NULL;\n\n\t//r_core_anal_undefine (core, core->offset);\n\tr_core_anal_fcn (core, addr, UT64_MAX, R_ANAL_REF_TYPE_NULL, depth);\n\tfcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\tif (fcn) {\n\t\t/* ensure we use a proper name */\n\t\t__setFunctionName (core, addr, fcn->name, false);\n\t\tif (core->anal->opt.vars) {\n\t\t\tr_core_recover_vars (core, fcn, true);\n\t\t}\n\t\t__add_vars_sdb (core, fcn);\n\t} else {\n\t\tif (core->anal->verbose) {\n\t\t\teprintf (\"Warning: Unable to analyze function at 0x%08\"PFMT64x\"\\n\", addr);\n\t\t}\n\t}\n\tif (anal_calls) {\n\t\tfcn = r_anal_get_fcn_in (core->anal, addr, 0); /// XXX wrong in case of nopskip\n\t\tif (fcn) {\n\t\t\tRAnalRef *ref;\n\t\t\tRListIter *iter;\n\t\t\tRList *refs = r_anal_function_get_refs (fcn);\n\t\t\tr_list_foreach (refs, iter, ref) {\n\t\t\t\tif (ref->addr == UT64_MAX) {\n\t\t\t\t\t//eprintf (\"Warning: ignore 0x%08\"PFMT64x\" call 0x%08\"PFMT64x\"\\n\", ref->at, ref->addr);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (ref->type != R_ANAL_REF_TYPE_CODE && ref->type != R_ANAL_REF_TYPE_CALL) {\n\t\t\t\t\t/* only follow code/call references */\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tif (!r_io_is_valid_offset (core->io, ref->addr, !core->anal->opt.noncode)) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tr_core_anal_fcn (core, ref->addr, fcn->addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t/* use recursivity here */\n#if 1\n\t\t\t\tRAnalFunction *f = r_anal_get_function_at (core->anal, ref->addr);\n\t\t\t\tif (f) {\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tRAnalRef *ref;\n\t\t\t\t\tRList *refs1 = r_anal_function_get_refs (f);\n\t\t\t\t\tr_list_foreach (refs1, iter, ref) {\n\t\t\t\t\t\tif (!r_io_is_valid_offset (core->io, ref->addr, !core->anal->opt.noncode)) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (ref->type != 'c' && ref->type != 'C') {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_core_anal_fcn (core, ref->addr, f->addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t\t\t// recursively follow fcn->refs again and again\n\t\t\t\t\t}\n\t\t\t\t\tr_list_free (refs1);\n\t\t\t\t} else {\n\t\t\t\t\tf = r_anal_get_fcn_in (core->anal, fcn->addr, 0);\n\t\t\t\t\tif (f) {\n\t\t\t\t\t\t/* cut function */\n\t\t\t\t\t\tr_anal_function_resize (f, addr - fcn->addr);\n\t\t\t\t\t\tr_core_anal_fcn (core, ref->addr, fcn->addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t\t\tf = r_anal_get_function_at (core->anal, fcn->addr);\n\t\t\t\t\t}\n\t\t\t\t\tif (!f) {\n\t\t\t\t\t\teprintf (\"af: Cannot find function at 0x%08\" PFMT64x \"\\n\", fcn->addr);\n\t\t\t\t\t}\n\t\t\t\t}\n#endif\n\t\t\t}\n\t\t\tr_list_free (refs);\n\t\t\tif (core->anal->opt.vars) {\n\t\t\t\tr_core_recover_vars (core, fcn, true);\n\t\t\t}\n\t\t}\n\t}\n\tif (name) {\n\t\tif (*name && !__setFunctionName (core, addr, name, true)) {\n\t\t\teprintf (\"af: Cannot find function at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t}\n\t}\n#if SLOW_ANALYSIS\n\t// r_core_anal_propagate_noreturn (core, addr);\n#if 0\n\t// XXX THIS IS VERY SLOW\n\tif (core->anal->opt.vars) {\n\t\tRListIter *iter;\n\t\tRAnalFunction *fcni = NULL;\n\t\tr_list_foreach (core->anal->fcns, iter, fcni) {\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_core_recover_vars (core, fcni, true);\n\t\t}\n\t}\n#endif\n//\tflag_every_function (core);\n#endif\n}\n\nstatic int cmd_anal_fcn(RCore *core, const char *input) {\n\tchar i;\n\n\tr_cons_break_timeout (r_config_get_i (core->config, \"anal.timeout\"));\n\tswitch (input[1]) {\n\tcase '-': // \"af-\"\n\t\tif (!input[2]) {\n\t\t\tcmd_anal_fcn (core, \"f-$$\");\n\t\t\tr_core_anal_undefine (core, core->offset);\n\t\t} else if (!strcmp (input + 2, \"*\")) {\n\t\t\tRAnalFunction *f;\n\t\t\tRListIter *iter, *iter2;\n\t\t\tr_list_foreach_safe (core->anal->fcns, iter, iter2, f) {\n\t\t\t\tr_anal_del_jmprefs (core->anal, f);\n\t\t\t\tr_core_anal_undefine (core, f->addr);\n\t\t\t}\n\t\t} else {\n\t\t\tut64 addr = input[2]\n\t\t\t\t? r_num_math (core->num, input + 2)\n\t\t\t\t: core->offset;\n\t\t\tr_core_anal_undefine (core, addr);\n\t\t\tr_anal_fcn_del_locs (core->anal, addr);\n\t\t\tr_anal_fcn_del (core->anal, addr);\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"afj\"\n\t\t{\n\t\t\tRList *blocks = r_anal_get_blocks_in (core->anal, core->offset);\n\t\t\tRAnalBlock *block = r_list_first (blocks);\n\t\t\tif (block && !r_list_empty (block->fcns)) {\n\t\t\t\tchar *args = strdup (input + 2);\n\t\t\t\tRList *argv = r_str_split_list (args, \" \", 0);\n\t\t\t\tut64 table = r_num_math (core->num, r_list_get_n (argv, 1));\n\t\t\t\tut64 sz = r_num_math (core->num, r_list_get_n (argv, 2));\n\t\t\t\tut64 elements = r_num_math (core->num, r_list_get_n (argv, 3));\n\t\t\t\tut64 seg = r_num_math (core->num, r_list_get_n (argv, 4));\n\t\t\t\tint depth = 50;\n\t\t\t\ttry_walkthrough_jmptbl (core->anal, r_list_first (block->fcns), block, depth, core->offset, 0, table, seg, sz, elements, 0, false);\n\t\t\t\tfree (args);\n\t\t\t} else {\n\t\t\t\teprintf (\"No function defined here\\n\");\n\t\t\t}\n\t\t\tr_list_free (blocks);\n\t\t}\n\t\tbreak;\n\tcase 'a': // \"afa\"\n\t\tif (input[2] == 'l') { // \"afal\" : list function call arguments\n\t\t\tint show_args = r_config_get_i (core->config, \"dbg.funcarg\");\n\t\t\tif (show_args) {\n\t\t\t\tr_core_print_func_args (core);\n\t\t\t}\n\t\t} else {\n\t\t\tr_core_print_func_args (core);\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"afd\"\n\t\t{\n\t\tut64 addr = 0;\n\t\tif (input[2] == '?') {\n\t\t\teprintf (\"afd [offset]\\n\");\n\t\t} else if (input[2] == ' ') {\n\t\t\taddr = r_num_math (core->num, input + 2);\n\t\t} else {\n\t\t\taddr = core->offset;\n\t\t}\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\tif (input[2] == 'j') { // afdj\n\t\t\tPJ *pj = r_core_pj_new (core);\n\t\t\tif (!pj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tpj_o (pj);\n\t\t\tif (fcn) {\n\t\t\t\tpj_ks (pj, \"name\", fcn->name);\n\t\t\t\tpj_ki (pj, \"offset\", (int)(addr - fcn->addr));\n\t\t\t}\n\t\t\tpj_end (pj);\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t} else {\n\t\t\tif (fcn) {\n\t\t\t\tif (fcn->addr != addr) {\n\t\t\t\t\tr_cons_printf (\"%s + %d\\n\", fcn->name,\n\t\t\t\t\t\t\t(int)(addr - fcn->addr));\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_println (fcn->name);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"afd: Cannot find function\\n\");\n\t\t\t}\n\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'u': // \"afu\"\n\t\tif (input[2] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_afu);\n\t\t\tbreak;\n\t\t}\n\n\t\tif (input[2] != ' ') {\n\t\t\teprintf (\"Missing argument\\n\");\n\t\t\treturn false;\n\t\t}\n\n\t\tut64 addr = core->offset;\n\t\tut64 addr_end = r_num_math (core->num, input + 2);\n\t\tif (addr_end < addr) {\n\t\t\teprintf (\"Invalid address ranges\\n\");\n\t\t} else {\n\t\t\tut64 a, b;\n\t\t\tconst char *c;\n\t\t\ta = r_config_get_i (core->config, \"anal.from\");\n\t\t\tb = r_config_get_i (core->config, \"anal.to\");\n\t\t\tc = r_config_get (core->config, \"anal.limits\");\n\t\t\tr_config_set_i (core->config, \"anal.from\", addr);\n\t\t\tr_config_set_i (core->config, \"anal.to\", addr_end);\n\t\t\tr_config_set (core->config, \"anal.limits\", \"true\");\n\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\tif (fcn) {\n\t\t\t\tr_anal_function_resize (fcn, addr_end - addr);\n\t\t\t}\n\t\t\tr_core_anal_fcn (core, addr, UT64_MAX, R_ANAL_REF_TYPE_NULL, 1);\n\t\t\tfcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\tif (fcn) {\n\t\t\t\tr_anal_function_resize (fcn, addr_end - addr);\n\t\t\t}\n\t\t\tr_config_set_i (core->config, \"anal.from\", a);\n\t\t\tr_config_set_i (core->config, \"anal.to\", b);\n\t\t\tr_config_set (core->config, \"anal.limits\", r_str_get (c));\n\t\t}\n\t\tbreak;\n\tcase '+': { // \"af+\"\n\t\tif (input[2] != ' ') {\n\t\t\teprintf (\"Missing arguments\\n\");\n\t\t\treturn false;\n\t\t}\n\t\tchar *ptr = strdup (input + 3);\n\t\tconst char *ptr2;\n\t\tint n = r_str_word_set0 (ptr);\n\t\tconst char *name = NULL;\n\t\tut64 addr = UT64_MAX;\n\t\tRAnalDiff *diff = NULL;\n\t\tint type = R_ANAL_FCN_TYPE_FCN;\n\t\tif (n > 1) {\n\t\t\tswitch (n) {\n\t\t\tcase 4:\n\t\t\t\tptr2 = r_str_word_get0 (ptr, 3);\n\t\t\t\tif (!(diff = r_anal_diff_new ())) {\n\t\t\t\t\teprintf (\"error: Cannot init RAnalDiff\\n\");\n\t\t\t\t\tfree (ptr);\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tif (ptr2[0] == 'm') {\n\t\t\t\t\tdiff->type = R_ANAL_DIFF_TYPE_MATCH;\n\t\t\t\t} else if (ptr2[0] == 'u') {\n\t\t\t\t\tdiff->type = R_ANAL_DIFF_TYPE_UNMATCH;\n\t\t\t\t}\n\t\t\tcase 3:\n\t\t\t\tptr2 = r_str_word_get0 (ptr, 2);\n\t\t\t\tif (strchr (ptr2, 'l')) {\n\t\t\t\t\ttype = R_ANAL_FCN_TYPE_LOC;\n\t\t\t\t} else if (strchr (ptr2, 'i')) {\n\t\t\t\t\ttype = R_ANAL_FCN_TYPE_IMP;\n\t\t\t\t} else if (strchr (ptr2, 's')) {\n\t\t\t\t\ttype = R_ANAL_FCN_TYPE_SYM;\n\t\t\t\t} else {\n\t\t\t\t\ttype = R_ANAL_FCN_TYPE_FCN;\n\t\t\t\t}\n\t\t\tcase 2:\n\t\t\t\tname = r_str_word_get0 (ptr, 1);\n\t\t\tcase 1:\n\t\t\t\taddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\t}\n\t\t\tRAnalFunction *fcn = r_anal_create_function (core->anal, name, addr, type, diff);\n\t\t\tif (!fcn) {\n\t\t\t\teprintf (\"Cannot add function (duplicated)\\n\");\n\t\t\t}\n\t\t}\n\t\tr_anal_diff_free (diff);\n\t\tfree (ptr);\n\t\t}\n\t\tbreak;\n\tcase 'o': // \"afo\"\n\t\tswitch (input[2]) {\n\t\tcase '?':\n\t\t\teprintf (\"Usage: afo[?sj] ([name|offset])\\n\");\n\t\t\tbreak;\n\t\tcase 'j':\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tPJ *pj = r_core_pj_new (core);\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tpj_o (pj);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tpj_ki (pj, \"address\", fcn->addr);\n\t\t\t\t}\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '\\0':\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 's': // \"afos\"\n\t\t\t{\n\t\t\t\tut64 addr = core->offset;\n\t\t\t\tRListIter *iter;\n\t\t\t\tRList *list = r_anal_get_functions_in (core->anal, addr);\n\t\t\t\tRAnalFunction *fcn;\n\t\t\t\tr_list_foreach (list, iter, fcn) {\n\t\t\t\t\tr_cons_printf (\"= 0x%08\" PFMT64x \"\\n\", fcn->addr);\n\t\t\t\t}\n\t\t\t\tr_list_free (list);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ' ':\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn;\n\t\t\t\tut64 addr = r_num_math (core->num, input + 3);\n\t\t\t\tif (addr == 0LL) {\n\t\t\t\t\tfcn = r_anal_get_function_byname (core->anal, input + 3);\n\t\t\t\t} else {\n\t\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\t}\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'i': // \"afi\"\n\t\tswitch (input[2]) {\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_afi);\n\t\t\tbreak;\n\t\tcase '.': // \"afi.\"\n\t\t\t{\n\t\t\t\tut64 addr = core->offset;\n\t\t\t\tif (input[3] == ' ') {\n\t\t\t\t\taddr = r_num_math (core->num, input + 3);\n\t\t\t\t}\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"%s\\n\", fcn->name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'l': // \"afil\"\n\t\t\tif (input[3] == '?') {\n\t\t\t\t// TODO #7967 help refactor\n\t\t\t\thelp_msg_afll[1] = \"afil\";\n\t\t\t\tr_core_cmd_help (core, help_msg_afll);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/* fallthrough */\n\t\tcase 'i': // \"afii\"\n\t\t\tif (input[3] == '-') {\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_list_free (fcn->imports);\n\t\t\t\t\tfcn->imports = NULL;\n\t\t\t\t}\n\t\t\t} else if (input[3] == ' ') {\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tif (!fcn->imports) {\n\t\t\t\t\t\tfcn->imports = r_list_newf ((RListFree)free);\n\t\t\t\t\t}\n\t\t\t\t\tr_list_append (fcn->imports, r_str_trim_dup (input + 4));\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"No function found\\n\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn && fcn->imports) {\n\t\t\t\t\tchar *imp;\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tr_list_foreach (fcn->imports, iter, imp) {\n\t\t\t\t\t\tr_cons_printf (\"%s\\n\", imp);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 's': // \"afis\"\n\t\t\tif (input[3] == 'a') { // \"afisa\"\n\t\t\t\t__core_cmd_anal_fcn_allstats (core, input + 4);\n\t\t\t} else {\n\t\t\t\tsdb_free (__core_cmd_anal_fcn_stats (core, input + 3));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'j': // \"afij\"\n\t\tcase '*': // \"afi*\"\n\t\t\tr_core_anal_fcn_list (core, input + 3, input + 2);\n\t\t\tbreak;\n\t\tcase 'p': // \"afip\"\n\t\t\t{\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tr_cons_printf (\"is-pure: %s\\n\", r_str_bool (r_anal_function_purity (fcn)));\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\ti = 1;\n\t\t\tr_core_anal_fcn_list (core, input + 2, &i);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'l': // \"afl\"\n\t\tswitch (input[2]) {\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_afl);\n\t\t\tbreak;\n\t\tcase 's': // \"afls\"\n\t\t\tswitch (input[3]) {\n\t\t\tcase '?':\n\t\t\t\tr_core_cmd_help (core, help_msg_afls);\n\t\t\t\tbreak;\n\t\t\tcase 'a': // \"aflsa\"\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpaddr);\n\t\t\t\tbreak;\n\t\t\tcase 'b': // \"aflsb\"\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpbbs);\n\t\t\t\tbreak;\n\t\t\tcase 's': // \"aflss\"\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpsize);\n\t\t\t\tbreak;\n\t\t\tcase 'n': // \"aflsn\"\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpname);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tcore->anal->fcns->sorted = false;\n\t\t\t\tr_list_sort (core->anal->fcns, cmpaddr);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'l': // \"afll\"\n\t\t\tif (input[3] == '?') {\n\t\t\t\t// TODO #7967 help refactor\n\t\t\t\thelp_msg_afll[1] = \"afll\";\n\t\t\t\tr_core_cmd_help (core, help_msg_afll);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/* fallthrough */\n\t\tcase ',': // \"afl,\"\n\t\tcase 't': // \"aflt\"\n\t\tcase 'j': // \"aflj\"\n\t\tcase 'q': // \"aflq\"\n\t\tcase 'm': // \"aflm\"\n\t\tcase '+': // \"afl+\"\n\t\tcase '=': // \"afl=\"\n\t\tcase '*': // \"afl*\"\n\t\tcase '.': // \"afl*\"\n\t\t\tr_core_anal_fcn_list (core, NULL, input + 2);\n\t\t\tbreak;\n\t\tcase 'c': // \"aflc\"\n\t\t\tr_cons_printf (\"%d\\n\", r_list_length (core->anal->fcns));\n\t\t\tbreak;\n\t\tdefault: // \"afl \"\n\t\t\tr_core_anal_fcn_list (core, NULL, \"o\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 's': // \"afs\"\n\t\tswitch (input[2]) {\n\t\tcase '!': { // \"afs!\"\n\t\t\tchar *sig = r_core_cmd_str (core, \"afs\");\n\t\t\tchar *data = r_core_editor (core, NULL, sig);\n\t\t\tif (sig && data) {\n\t\t\t\tr_core_cmdf (core, \"\\\"afs %s\\\"\", data);\n\t\t\t}\n\t\t\tfree (sig);\n\t\t\tfree (data);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'r': { // \"afsr\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\t\tif (fcn) {\n\t\t\t\tchar *type = r_str_newf (\"type.%s\", input + 4);\n\t\t\t\tif (sdb_exists (core->anal->sdb_types, type)) {\n\t\t\t\t\tchar *query = r_str_newf (\"anal/types/func.%s.ret=%s\", fcn->name, input + 4);\n\t\t\t\t\tsdb_querys (core->sdb, NULL, 0, query);\n\t\t\t\t\tfree (query);\n\t\t\t\t}\n\t\t\t\tfree (type);\n\t\t\t} else {\n\t\t\t\teprintf (\"There's no function defined in here.\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase '*': // \"afs*\"\n\t\t\tcmd_afsr (core, input + 2);\n\t\t\tbreak;\n\t\tcase 'j': // \"afsj\"\n\t\t\tcmd_afsj (core, input + 2);\n\t\t\tbreak;\n\t\tcase 0:\n\t\tcase ' ': { // \"afs\"\n\t\t\tut64 addr = core->offset;\n\t\t\tRAnalFunction *f;\n\t\t\tconst char *arg = r_str_trim_head_ro (input + 2);\n\t\t\tif ((f = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL))) {\n\t\t\t\tif (R_STR_ISNOTEMPTY (arg)) {\n\t\t\t\t\t// parse function signature here\n\t\t\t\t\tchar *fcnstr = r_str_newf (\"%s;\", arg), *fcnstr_copy = strdup (fcnstr);\n\t\t\t\t\tchar *fcnname_aux = strtok (fcnstr_copy, \"(\");\n\t\t\t\t\tr_str_trim_tail (fcnname_aux);\n\t\t\t\t\tconst char *ls = r_str_lchr (fcnname_aux, ' ');\n\t\t\t\t\tchar *fcnname = strdup (ls? ls: fcnname_aux);\n\t\t\t\t\tif (fcnname) {\n\t\t\t\t\t\t// TODO: move this into r_anal_str_to_fcn()\n\t\t\t\t\t\tif (strcmp (f->name, fcnname)) {\n\t\t\t\t\t\t\t(void)__setFunctionName (core, addr, fcnname, false);\n\t\t\t\t\t\t\tf = r_anal_get_fcn_in (core->anal, addr, -1);\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_anal_str_to_fcn (core->anal, f, fcnstr);\n\t\t\t\t\t}\n\t\t\t\t\tfree (fcnname);\n\t\t\t\t\tfree (fcnstr_copy);\n\t\t\t\t\tfree (fcnstr);\n\t\t\t\t} else {\n\t\t\t\t\tchar *str = r_anal_function_get_signature (f);\n\t\t\t\t\tif (str) {\n\t\t\t\t\t\tr_cons_println (str);\n\t\t\t\t\t\tfree (str);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"No function defined at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t// case '?': // \"afs?\"\n\t\t\tr_core_cmd_help (core, help_msg_afs);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'm': // \"afm\" - merge two functions\n\t\tif (input[2] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_afm);\n\t\t\tbreak;\n\t\t}\n\t\tr_core_anal_fcn_merge (core, core->offset, r_num_math (core->num, input + 2));\n\t\tbreak;\n\tcase 'M': // \"afM\" - print functions map\n\t\tr_core_anal_fmap (core, input + 1);\n\t\tbreak;\n\tcase 'v': // \"afv\"\n\t\tvar_cmd (core, input + 2);\n\t\tbreak;\n\tcase 't': // \"aft\"\n\t\ttype_cmd (core, input + 2);\n\t\tbreak;\n\tcase 'C': // \"afC\"\n\t\tif (input[2] == 'c') {\n\t\t\tRAnalFunction *fcn;\n\t\t\tif ((fcn = r_anal_get_fcn_in (core->anal, core->offset, 0)) != NULL) {\n\t\t\t\tr_cons_printf (\"%i\\n\", r_anal_function_complexity (fcn));\n\t\t\t} else {\n\t\t\t\teprintf (\"Error: Cannot find function at 0x08%\" PFMT64x \"\\n\", core->offset);\n\t\t\t}\n\t\t} else if (input[2] == 'l') {\n\t\t\tRAnalFunction *fcn;\n\t\t\tif ((fcn = r_anal_get_fcn_in (core->anal, core->offset, 0)) != NULL) {\n\t\t\t\tr_cons_printf (\"%d\\n\", r_anal_function_loops (fcn));\n\t\t\t} else {\n\t\t\t\teprintf (\"Error: Cannot find function at 0x08%\" PFMT64x \"\\n\", core->offset);\n\t\t\t}\n\t\t} else if (input[2] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_afC);\n\t\t} else {\n\t\t\tafCc (core, r_str_trim_head_ro (input + 2));\n\t\t}\n\t\tbreak;\n\tcase 'c': { // \"afc\"\n\t\tRAnalFunction *fcn = NULL;\n\t\tif (!input[2] || input[2] == ' ' || input[2] == 'r' || input[2] == 'a') {\n\t\t\tfcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tif (!fcn) {\n\t\t\t\teprintf (\"afc: Cannot find function here\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tswitch (input[2]) {\n\t\tcase '\\0': // \"afc\"\n\t\t\tr_cons_println (fcn->cc);\n\t\t\tbreak;\n\t\tcase ' ': { // \"afc \"\n\t\t\tchar *argument = strdup (input + 3);\n\t\t\tchar *cc = argument;\n\t\t\tr_str_trim (cc);\n\t\t\tif (!r_anal_cc_exist (core->anal, cc)) {\n\t\t\t\tconst char *asmOs = r_config_get (core->config, \"asm.os\");\n\t\t\t\teprintf (\"afc: Unknown calling convention '%s' for '%s'\\n\"\n\t\t\t\t\t\t\"See afcl for available types\\n\", cc, asmOs);\n\t\t\t} else {\n\t\t\t\tfcn->cc = r_str_constpool_get (&core->anal->constpool, cc);\n\t\t\t}\n\t\t\tfree (argument);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'a': // \"afca\"\n\t\t\teprintf (\"Todo\\n\");\n\t\t\tbreak;\n\t\tcase 'f': // \"afcf\" \"afcfj\"\n\t\t\tcmd_anal_fcn_sig (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'k': // \"afck\"\n\t\t\tcmd_afck (core, NULL);\n\t\t\tbreak;\n\t\tcase 'l': // \"afcl\" list all function Calling conventions.\n\t\t\tcmd_tcc (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'o': { // \"afco\"\n\t\t\tchar *dbpath = r_str_trim_dup (input + 3);\n\t\t\tif (R_STR_ISNOTEMPTY (dbpath) && r_file_exists (dbpath)) {\n\t\t\t\tSdb *db = sdb_new (0, dbpath, 0);\n\t\t\t\tsdb_merge (core->anal->sdb_cc, db);\n\t\t\t\tsdb_close (db);\n\t\t\t\tsdb_free (db);\n\t\t\t} else {\n\t\t\t\teprintf (\"Usage: afco [dbpath] - open calling conventions defined in local file.\\n\");\t\n\t\t\t}\n\t\t\tfree (dbpath);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'r': {\t// \"afcr\"\n\t\t\tint i;\n\t\t\tPJ *pj = NULL;\n\t\t\tbool json = input[3] == 'j';\n\t\t\tif (json) {\n\t\t\t\tpj = r_core_pj_new (core);\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tpj_o (pj);\n\t\t\t}\n\n\t\t\tchar *cmd = r_str_newf (\"cc.%s.ret\", fcn->cc);\n\t\t\tconst char *regname = sdb_const_get (core->anal->sdb_cc, cmd, 0);\n\t\t\tif (regname) {\n\t\t\t\tif (json) {\n\t\t\t\t\tpj_ks (pj, \"ret\", regname);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", cmd, regname);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (cmd);\n\t\t\tif (json) {\n\t\t\t\tpj_ka (pj, \"args\");\n\t\t\t}\n\t\t\tfor (i = 0; i < R_ANAL_CC_MAXARG; i++) {\n\t\t\t\tcmd = r_str_newf (\"cc.%s.arg%d\", fcn->cc, i);\n\t\t\t\tregname = sdb_const_get (core->anal->sdb_cc, cmd, 0);\n\t\t\t\tif (regname) {\n\t\t\t\t\tif (json) {\n\t\t\t\t\t\tpj_s (pj, regname);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", cmd, regname);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tfree (cmd);\n\t\t\t}\n\t\t\tif (json) {\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\n\t\t\tcmd = r_str_newf (\"cc.%s.self\", fcn->cc);\n\t\t\tregname = sdb_const_get (core->anal->sdb_cc, cmd, 0);\n\t\t\tif (regname) {\n\t\t\t\tif (json) {\n\t\t\t\t\tpj_ks (pj, \"self\", regname);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", cmd, regname);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (cmd);\n\t\t\tcmd = r_str_newf (\"cc.%s.error\", fcn->cc);\n\t\t\tregname = sdb_const_get (core->anal->sdb_cc, cmd, 0);\n\t\t\tif (regname) {\n\t\t\t\tif (json) {\n\t\t\t\t\tpj_ks (pj, \"error\", regname);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_printf (\"%s: %s\\n\", cmd, regname);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (cmd);\n\t\t\tif (json) {\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 'R': { // \"afcR\"\n\t\t\t/* very slow, but im tired of waiting for having this, so this is the quickest implementation */\n\t\t\tint i;\n\t\t\tchar *cc = r_core_cmd_str (core, \"k anal/cc/default.cc\");\n\t\t\tr_str_trim (cc);\n\t\t\tfor (i = 0; i < 6; i++) {\n\t\t\t\tchar *res = r_core_cmd_strf (core, \"k anal/cc/cc.%s.arg%d\", cc, i);\n\t\t\t\tr_str_trim_nc (res);\n\t\t\t\tif (*res) {\n\t\t\t\t\tchar *row = r_core_cmd_strf (core, \"drr~%s 0x\", res);\n\t\t\t\t\tr_str_trim (row);\n\t\t\t\t\tr_cons_printf (\"arg[%d] %s\\n\", i, row);\n\t\t\t\t\tfree (row);\n\t\t\t\t}\n\t\t\t\tfree (res);\n\t\t\t}\n\t\t\tfree (cc);\n\t\t\tbreak;\n\t\t}\n\t\tcase '?': // \"afc?\"\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_afc);\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'B': // \"afB\" // set function bits\n\t\tif (input[2] == ' ') {\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tif (fcn) {\n\t\t\t\tint bits = atoi (input + 3);\n\t\t\t\tr_anal_hint_set_bits (core->anal, r_anal_function_min_addr (fcn), bits);\n\t\t\t\tr_anal_hint_set_bits (core->anal, r_anal_function_max_addr (fcn), core->anal->bits);\n\t\t\t\tfcn->bits = bits;\n\t\t\t} else {\n\t\t\t\teprintf (\"afB: Cannot find function to set bits at 0x%08\"PFMT64x\"\\n\", core->offset);\n\t\t\t}\n\t\t} else {\n\t\t\teprintf (\"Usage: afB [bits]\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'b': // \"afb\"\n\t\tswitch (input[2]) {\n\t\tcase '-': // \"afb-\"\n\t\t\tanal_fcn_del_bb (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'e': // \"afbe\"\n\t\t\tanal_bb_edge (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'F': { // \"afbF\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\tif (fcn) {\n\t\t\t\tRAnalBlock *bb = r_anal_fcn_bbget_in (core->anal, fcn, core->offset);\n\t\t\t\tif (bb) {\n\t\t\t\t\tif (input[3]) {\n\t\t\t\t\t\tint n = atoi (input + 3);\n\t\t\t\t\t\tbb->folded = n;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbb->folded = !bb->folded;\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\tr_warn_if_reached ();\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 0:\n\t\tcase ' ': // \"afb \"\n\t\tcase 'q': // \"afbq\"\n\t\tcase 'r': // \"afbr\"\n\t\tcase '=': // \"afb=\"\n\t\tcase '*': // \"afb*\"\n\t\tcase 'j': // \"afbj\"\n\t\tcase 't': // \"afbt\"\n\t\t\tanal_fcn_list_bb (core, input + 2, false);\n\t\t\tbreak;\n\t\tcase 'i': // \"afbi\"\n\t\t\tanal_fcn_list_bb (core, input + 2, true);\n\t\t\tbreak;\n\t\tcase '.': // \"afb.\"\n\t\t\tanal_fcn_list_bb (core, input[2]? \" $$\": input + 2, true);\n\t\t\tbreak;\n\t\tcase '+': // \"afb+\"\n\t\t\tcmd_afbplus (core, input + 3);\n\t\t\tbreak;\n\t\tcase 'c': // \"afbc\"\n\t\t\tcmd_afbc (core, r_str_trim_head_ro (input + 3));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_afb);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'n': // \"afn\"\n\t\tswitch (input[2]) {\n\t\tcase 's': // \"afns\"\n\t\t\tif (input[3] == 'j') { // \"afnsj\"\n\t\t\t\tfree (r_core_anal_fcn_autoname (core, core->offset, 1, input[3]));\n\t\t\t} else {\n\t\t\t\tfree (r_core_anal_fcn_autoname (core, core->offset, 1, 0));\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'a': // \"afna\"\n\t\t\tif (input[3] == '?') {\n\t\t\t\tr_core_cmd_help (core, help_msg_afna);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tchar *name = r_core_anal_fcn_autoname (core, core->offset, 0, 0);\n\t\t\tif (name) {\n\t\t\t\tr_cons_printf (\"afn %s 0x%08\" PFMT64x \"\\n\", name, core->offset);\n\t\t\t\tfree (name);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '.': // \"afn.\"\n\t\tcase 0: { // \"afn\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\t\tif (fcn) {\n\t\t\t\tr_cons_printf (\"%s\\n\", fcn->name);\n\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ' ': { // \"afn \"\n\t\t\tut64 off = core->offset;\n\t\t\tchar *p, *name = strdup (r_str_trim_head_ro (input + 3));\n\t\t\tif ((p = strchr (name, ' '))) {\n\t\t\t\t*p++ = 0;\n\t\t\t\toff = r_num_math (core->num, p);\n\t\t\t}\n\t\t\tif (*name == '?') {\n\t\t\t\teprintf (\"Usage: afn newname [off]   # set new name to given function\\n\");\n\t\t\t} else {\n\t\t\t\tif (r_str_startswith (name, \"base64:\")) {\n\t\t\t\t\tchar *res = (char *)r_base64_decode_dyn (name + 7, -1);\n\t\t\t\t\tif (res) {\n\t\t\t\t\t\tfree (name);\n\t\t\t\t\t\tname = res;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!*name || !__setFunctionName (core, off, name, false)) {\n\t\t\t\t\teprintf (\"Cannot find function at 0x%08\" PFMT64x \"\\n\", off);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (name);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_afn);\n\t\t\tbreak;\n\t\t} // end of switch (input[2])\n\t\tbreak;\n\tcase 'S': { // afS\"\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\tif (fcn) {\n\t\t\tfcn->maxstack = r_num_math (core->num, input + 3);\n\t\t\t//fcn->stack = fcn->maxstack;\n\t\t}\n\t\tbreak;\n\t}\n#if 0\n\t/* this is undocumented and probably have no uses. plz discuss */\n\tcase 'e': // \"afe\"\n\t\t{\n\t\tRAnalFunction *fcn;\n\t\tut64 off = core->offset;\n\t\tchar *p, *name = strdup ((input[2]&&input[3])? input + 3: \"\");\n\t\tif ((p = strchr (name, ' '))) {\n\t\t\t*p = 0;\n\t\t\toff = r_num_math (core->num, p + 1);\n\t\t}\n\t\tfcn = r_anal_get_fcn_in (core->anal, off, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);\n\t\tif (fcn) {\n\t\t\tRAnalBlock *b;\n\t\t\tRListIter *iter;\n\t\t\tRAnalRef *r;\n\t\t\tr_list_foreach (fcn->refs, iter, r) {\n\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" -%c 0x%08\" PFMT64x \"\\n\", r->at, r->type, r->addr);\n\t\t\t}\n\t\t\tr_list_foreach (fcn->bbs, iter, b) {\n\t\t\t\tint ok = 0;\n\t\t\t\tif (b->type == R_ANAL_BB_TYPE_LAST) ok = 1;\n\t\t\t\tif (b->type == R_ANAL_BB_TYPE_FOOT) ok = 1;\n\t\t\t\tif (b->jump == UT64_MAX && b->fail == UT64_MAX) ok = 1;\n\t\t\t\tif (ok) {\n\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" -r\\n\", b->addr);\n\t\t\t\t\t// TODO: check if destination is outside the function boundaries\n\t\t\t\t}\n\t\t\t}\n\t\t} else eprintf (\"Cannot find function at 0x%08\" PFMT64x \"\\n\", core->offset);\n\t\tfree (name);\n\t\t}\n\t\tbreak;\n#endif\n\tcase 'x': // \"afx\"\n\t\tswitch (input[2]) {\n\t\tcase 'm': // \"afxm\"\n\t\t\txrefs_map (core, input + 1);\n\t\t\tbreak;\n\t\tcase '\\0': // \"afx\"\n\t\tcase 'j': // \"afxj\"\n\t\tcase ' ': // \"afx \"\n\t\t{\n\t\t\tPJ *pj = r_core_pj_new (core);\n\t\t\tif (input[2] == 'j') {\n\t\t\t\tpj_a (pj);\n\t\t\t}\n\t\t\tif (!pj) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// list xrefs from current address\n\t\t\t{\n\t\t\t\tut64 addr = input[2]==' '? r_num_math (core->num, input + 2): core->offset;\n\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, R_ANAL_FCN_TYPE_NULL);\n\t\t\t\tif (fcn) {\n\t\t\t\t\tut64 oaddr = core->offset;\n\t\t\t\t\tRAnalRef *ref;\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tRList *refs = r_anal_function_get_refs (fcn);\n\t\t\t\t\tr_list_foreach (refs, iter, ref) {\n\t\t\t\t\t\tif (input[2] == 'j') {\n\t\t\t\t\t\t\tpj_o (pj);\n\t\t\t\t\t\t\tpj_ks (pj, \"type\", r_anal_ref_type_tostring (ref->type));\n\t\t\t\t\t\t\tpj_kn (pj, \"from\", ref->at);\n\t\t\t\t\t\t\tpj_kn (pj, \"to\", ref->addr);\n\t\t\t\t\t\t\tpj_end (pj);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr_cons_printf (\"%c 0x%08\" PFMT64x \" -> \", ref->type, ref->at);\n\t\t\t\t\t\t\tswitch (ref->type) {\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_NULL:\n\t\t\t\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" \", ref->addr);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_CODE:\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_CALL:\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_DATA:\n\t\t\t\t\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \" \", ref->addr);\n\t\t\t\t\t\t\t\tr_core_seek (core, ref->at, 1);\n\t\t\t\t\t\t\t\tr_core_print_disasm_instructions (core, 0, 1);\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\tcase R_ANAL_REF_TYPE_STRING:\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tchar *s = r_core_cmd_strf (core, \"pxr 8 @ 0x%08\"PFMT64x, ref->addr);\n\t\t\t\t\t\t\t\t\tchar *nl = strchr (s, '\\n');\n\t\t\t\t\t\t\t\t\tif (nl) {\n\t\t\t\t\t\t\t\t\t\t*nl = 0;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t\t\t\t\t\t\t\tfree (s);\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tr_list_free (refs);\n\t\t\t\t\tr_core_seek (core, oaddr, 1);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"afx: Cannot find function at 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (input[2] == 'j') {\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t}\n\t\t\tpj_free (pj);\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault:\n\t\t\teprintf (\"Wrong command. Look at af?\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'F': // \"afF\"\n\t\t{\n\t\t\tint val = input[2] && r_num_math (core->num, input + 2);\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_NULL);\n\t\t\tif (fcn) {\n\t\t\t\tfcn->folded = input[2]? val: !fcn->folded;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase '?': // \"af?\"\n\t\tr_core_cmd_help (core, help_msg_af);\n\t\tbreak;\n\tcase 'r': // \"afr\" // analyze function recursively\n\tcase ' ': // \"af \"\n\tcase '\\0': // \"af\"\n\t\t{\n\t\t\tbool anal_calls = false;\n\t\t\tif (input[0] && input[1] == 'r') {\n\t\t\t\tinput++;\n\t\t\t\tanal_calls = true;\n\t\t\t} else {\n\t\t\t\tanal_calls = r_config_get_i (core->config, \"anal.calls\");\n\t\t\t}\n\t\t\tut64 addr = core->offset;\n\t\t\tchar *name = NULL;\n\t\t\t// first undefine\n\t\t\tif (input[0] && input[1] == ' ') {\n\t\t\t\tname = strdup (r_str_trim_head_ro (input + 2));\n\t\t\t\tchar *uaddr = strchr (name, ' ');\n\t\t\t\tif (uaddr) {\n\t\t\t\t\t*uaddr++ = 0;\n\t\t\t\t\taddr = r_num_math (core->num, uaddr);\n\t\t\t\t}\n\t\t\t\t// depth = 1; // or 1?\n\t\t\t\t// disable hasnext\n\t\t\t}\n\t\t\tr_core_af (core, addr, name, anal_calls);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\treturn false;\n\t\tbreak;\n\t}\n\treturn true;\n}\n\n// size: 0: bits; -1: any; >0: exact size\nstatic void __anal_reg_list(RCore *core, int type, int bits, char mode) {\n\tPJ *pj = NULL;\n\tif (mode == 'i') {\n\t\tr_core_debug_ri (core, core->anal->reg, 0);\n\t\treturn;\n\t} else if (mode == 'j') {\n\t\tpj = r_core_pj_new (core);\n\t\tif (!pj) {\n\t\t\treturn;\n\t\t}\n\t}\n\tRReg *hack = core->dbg->reg;\n\tconst char *use_color;\n\tint use_colors = r_config_get_i (core->config, \"scr.color\");\n\tif (use_colors) {\n#undef ConsP\n#define ConsP(x) (core->cons && core->cons->context->pal.x)? core->cons->context->pal.x\n\t\tuse_color = ConsP (creg) : Color_BWHITE;\n\t} else {\n\t\tuse_color = NULL;\n\t}\n\tif (bits < 0) {\n\t\t// TODO Change the `size` argument of r_debug_reg_list to use -1 for any and 0 for anal->bits\n\t\tbits = 0;\n\t} else if (!bits) {\n\t\tbits = core->anal->bits;\n\t}\n\tint mode2 = mode;\n\tif (core->anal) {\n\t\tcore->dbg->reg = core->anal->reg;\n\t\tif (core->anal->cur && core->anal->cur->arch) {\n\t\t\t/* workaround for thumb */\n\t\t\tif (!strcmp (core->anal->cur->arch, \"arm\") && bits == 16) {\n\t\t\t\tbits = 32;\n\t\t\t}\n\t\t\tint defsz = r_reg_default_bits (core->anal->reg);\n\t\t\tif (defsz) {\n\t\t\t\tbits = defsz;\n\t\t\t}\n\t\t\t/* workaround for 6502 and avr*/\n\t\t\tif ((!strcmp (core->anal->cur->arch, \"6502\") && bits == 8)\n\t\t\t\t|| (!strcmp (core->anal->cur->arch, \"avr\") && bits == 8)) {\n\t\t\t\tif (mode == 'j') {\n\t\t\t\t\tmode2 = 'J';\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t}\n\t\t\t\tr_debug_reg_list (core->dbg, R_REG_TYPE_GPR, 16, pj, mode2, use_color); // XXX detect which one is current usage\n\t\t\t}\n\t\t}\n\t}\n\n\tif (mode == '=') {\n\t\tint pcbits = 0;\n\t\tconst char *pcname = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\t\tif (pcname) {\n\t\t\tRRegItem *reg = r_reg_get (core->anal->reg, pcname, 0);\n\t\t\tif (reg && bits != reg->size) {\n\t\t\t\tpcbits = reg->size;\n\t\t\t}\n\t\t\tif (pcbits) {\n\t\t\t\tr_debug_reg_list (core->dbg, R_REG_TYPE_GPR, pcbits, NULL, mode, use_color); // XXX detect which one is current usage\n\t\t\t}\n\t\t}\n\t}\n\tr_debug_reg_list (core->dbg, type, bits, pj, mode2, use_color);\n\tif (mode == 'j') {\n\t\tif (mode2 == 'J') {\n\t\t\tpj_end (pj);\n\t\t}\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\t\n\tcore->dbg->reg = hack;\n}\n\n// XXX dup from drp :OOO\nvoid cmd_anal_reg(RCore *core, const char *str) {\n\tif (0) {\n\t\t/* enable this block when dr and ar use the same code but just using\n\t\t   core->dbg->reg or core->anal->reg and removing all the debugger\n\t\t   dependent code */\n\t\tRReg *reg = core->dbg->reg;\n\t\tcore->dbg->reg = core->anal->reg;\n\t\tcmd_debug_reg (core, str);\n\t\tcore->dbg->reg = reg;\n\t\treturn;\n\t}\n\n\tint size = 0, i, type = R_REG_TYPE_GPR;\n\tint bits = (core->anal->bits & R_SYS_BITS_64)? 64: 32;\n\tint use_colors = r_config_get_i (core->config, \"scr.color\");\n\tRRegItem *r = NULL;\n\tconst char *use_color;\n\tconst char *name;\n\tchar *arg;\n\n\tif (use_colors) {\n#define ConsP(x) (core->cons && core->cons->context->pal.x)? core->cons->context->pal.x\n\t\tuse_color = ConsP (creg)\n\t\t: Color_BWHITE;\n\t} else {\n\t\tuse_color = NULL;\n\t}\n\tswitch (str[0]) {\n\tcase 'l': // \"arl\"\n\t{\n\t\tconst bool use_json = str[1] == 'j';\n\t\tRRegSet *rs = r_reg_regset_get (core->anal->reg, R_REG_TYPE_GPR);\n\t\tif (rs) {\n\t\t\tRRegItem *r;\n\t\t\tRListIter *iter;\n\t\t\tPJ *pj = pj_new ();\n\t\t\tpj_a (pj);\n\t\t\tr_list_foreach (rs->regs, iter, r) {\n\t\t\t\tif (use_json) {\n\t\t\t\t\tpj_s (pj, r->name);\n\t\t\t\t} else {\n\t\t\t\t\tr_cons_println (r->name);\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (use_json) {\n\t\t\t\tpj_end (pj);\n\t\t\t\tconst char *s = pj_string (pj);\n\t\t\t\tr_cons_println (s);\n\t\t\t}\n\t\t\tpj_free (pj);\n\t\t}\n\t} break;\n\tcase ',': // \"ar,\"\n\t\t__tableRegList (core, core->anal->reg, str + 1);\n\t\tbreak;\n\tcase '0': // \"ar0\"\n\t\tr_reg_arena_zero (core->anal->reg);\n\t\tbreak;\n\tcase 'A': // \"arA\"\n\t\t{\n\t\t\tint nargs = 4;\n\t\t\tRReg *reg = core->anal->reg;\n\t\t\tfor (i = 0; i < nargs; i++) {\n\t\t\t\tconst char *name = r_reg_get_name (reg, r_reg_get_name_idx (sdb_fmt (\"A%d\", i)));\n\t\t\t\tut64 off = r_reg_getv (core->anal->reg, name);\n\t\t\t\tr_cons_printf (\"0x%08\"PFMT64x\" \", off);\n\t\t\t\t// XXX very ugly hack\n\t\t\t\tchar *s = r_core_cmd_strf (core, \"pxr 32 @ 0x%08\"PFMT64x, off);\n\t\t\t\tif (s) {\n\t\t\t\t\tchar *nl = strchr (s, '\\n');\n\t\t\t\t\tif (nl) {\n\t\t\t\t\t\t*nl = 0;\n\t\t\t\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t\t\t\t}\n\t\t\t\t\tfree (s);\n\t\t\t\t}\n//\t\t\t\tr_core_cmd0 (core, \"ar A0,A1,A2,A3\");\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'C': // \"arC\"\n\t\tif (core->anal->reg->reg_profile_cmt) {\n\t\t\tr_cons_println (core->anal->reg->reg_profile_cmt);\n\t\t}\n\t\tbreak;\n\tcase 'w': // \"arw\"\n\t\tswitch (str[1]) {\n\t\tcase '?': {\n\t\t\tr_core_cmd_help (core, help_msg_arw);\n\t\t\tbreak;\n\t\t}\n\t\tcase ' ':\n\t\t\tr_reg_arena_set_bytes (core->anal->reg, str + 1);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_arw);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'a': // \"ara\"\n\t\tswitch (str[1]) {\n\t\tcase '?': // \"ara?\"\n\t\t\tr_core_cmd_help (core, help_msg_ara);\n\t\t\tbreak;\n\t\tcase 's': // \"aras\"\n\t\t\tr_reg_arena_swap (core->anal->reg, false);\n\t\t\tbreak;\n\t\tcase '+': // \"ara+\"\n\t\t\tr_reg_arena_push (core->anal->reg);\n\t\t\tbreak;\n\t\tcase '-': // \"ara-\"\n\t\t\tr_reg_arena_pop (core->anal->reg);\n\t\t\tbreak;\n\t\tdefault: {\n\t\t\tint i, j;\n\t\t\tRRegArena *a;\n\t\t\tRListIter *iter;\n\t\t\tfor (i = 0; i < R_REG_TYPE_LAST; i++) {\n\t\t\t\tRRegSet *rs = &core->anal->reg->regset[i];\n\t\t\t\tj = 0;\n\t\t\t\tr_list_foreach (rs->pool, iter, a) {\n\t\t\t\t\tr_cons_printf (\"%s %p %d %d %s %d\\n\",\n\t\t\t\t\t\t(a == rs->arena)? \"*\": \".\", a,\n\t\t\t\t\t\ti, j, r_reg_get_type (i), a->size);\n\t\t\t\t\tj++;\n\t\t\t\t}\n\t\t\t}\n\t\t} break;\n\t\t}\n\t\tbreak;\n\tcase '?': // \"ar?\"\n\t\tif (str[1]) {\n\t\t\tut64 off = r_reg_getv (core->anal->reg, str + 1);\n\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", off);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_ar);\n\t\t}\n\t\tbreak;\n\tcase 'r': // \"arr\"\n\t\tswitch (str[1]) {\n\t\tcase 'j': // \"arrj\"\n\t\t\tr_core_debug_rr (core, core->anal->reg, 'j');\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_debug_rr (core, core->anal->reg, 0);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'S': { // \"arS\"\n\t\tint sz;\n\t\tut8 *buf = r_reg_get_bytes (core->anal->reg, R_REG_TYPE_GPR, &sz);\n\t\tr_cons_printf (\"%d\\n\", sz);\n\t\tfree (buf);\n\t\t} break;\n\tcase 'b': { // \"arb\" WORK IN PROGRESS // DEBUG COMMAND\n\t\tint len, type = R_REG_TYPE_GPR;\n\t\targ = strchr (str, ' ');\n\t\tif (arg) {\n\t\t\tchar *string = r_str_trim_dup (arg + 1);\n\t\t\tif (string) {\n\t\t\t\ttype = r_reg_type_by_name (string);\n\t\t\t\tif (type == -1 && string[0] != 'a') {\n\t\t\t\t\ttype = R_REG_TYPE_GPR;\n\t\t\t\t}\n\t\t\t\tfree (string);\n\t\t\t}\n\t\t}\n\t\tut8 *buf = r_reg_get_bytes (core->dbg->reg, type, &len);\n\t\tif (buf) {\n\t\t\tr_print_hexdump (core->print, 0LL, buf, len, 32, 4, 1);\n\t\t\tfree (buf);\n\t\t}\n\t\t} break;\n\tcase 'c': // \"arc\"\n\t\t// TODO: set flag values with drc zf=1\n\t\tif (str[1] == 'q') { // \"arcq\"\n\t\t\tRRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);\n\t\t\tif (rf) {\n\t\t\t\tr_cons_printf (\"s:%d z:%d c:%d o:%d p:%d\\n\",\n\t\t\t\t\t\trf->s, rf->z, rf->c, rf->o, rf->p);\n\t\t\t\tfree (rf);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tif (str[1] == 'c') { // \"arcc\"\n\t\t\tchar *s = r_reg_profile_to_cc (core->anal->reg);\n\t\t\tif (s) {\n\t\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t\t\tfree (s);\n\t\t\t}\n\t\t} else {\n\t\t\tRRegItem *r;\n\t\t\tconst char *name = r_str_trim_head_ro (str + 1);\n\t\t\tif (*name && name[1]) {\n\t\t\t\tr = r_reg_cond_get (core->dbg->reg, name);\n\t\t\t\tif (r) {\n\t\t\t\t\tr_cons_println (r->name);\n\t\t\t\t} else {\n\t\t\t\t\tint id = r_reg_cond_from_string (name);\n\t\t\t\t\tRRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);\n\t\t\t\t\tif (rf) {\n\t\t\t\t\t\tint o = r_reg_cond_bits (core->dbg->reg, id, rf);\n\t\t\t\t\t\tcore->num->value = o;\n\t\t\t\t\t\t// ORLY?\n\t\t\t\t\t\tr_cons_printf (\"%d\\n\", o);\n\t\t\t\t\t\tfree (rf);\n\t\t\t\t\t} else {\n\t\t\t\t\t\teprintf (\"unknown conditional or flag register\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tRRegFlags *rf = r_reg_cond_retrieve (core->dbg->reg, NULL);\n\t\t\t\tif (rf) {\n\t\t\t\t\tr_cons_printf (\"| s:%d z:%d c:%d o:%d p:%d\\n\",\n\t\t\t\t\t\trf->s, rf->z, rf->c, rf->o, rf->p);\n\t\t\t\t\tif (*name == '=') {\n\t\t\t\t\t\tfor (i = 0; i < R_REG_COND_LAST; i++) {\n\t\t\t\t\t\t\tr_cons_printf (\"%s:%d \",\n\t\t\t\t\t\t\t\tr_reg_cond_to_string (i),\n\t\t\t\t\t\t\t\tr_reg_cond_bits (core->dbg->reg, i, rf));\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_cons_newline ();\n\t\t\t\t\t} else {\n\t\t\t\t\t\tfor (i = 0; i < R_REG_COND_LAST; i++) {\n\t\t\t\t\t\t\tr_cons_printf (\"%d %s\\n\",\n\t\t\t\t\t\t\t\tr_reg_cond_bits (core->dbg->reg, i, rf),\n\t\t\t\t\t\t\t\tr_reg_cond_to_string (i));\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tfree (rf);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 's': // \"ars\"\n\t\tswitch (str[1]) {\n\t\tcase '-': // \"ars-\"\n\t\t\tr_reg_arena_pop (core->dbg->reg);\n\t\t\t// restore debug registers if in debugger mode\n\t\t\tr_debug_reg_sync (core->dbg, R_REG_TYPE_GPR, true);\n\t\t\tbreak;\n\t\tcase '+': // \"ars+\"\n\t\t\tr_reg_arena_push (core->dbg->reg);\n\t\t\tbreak;\n\t\tcase '?': { // \"ars?\"\n\t\t\t// TODO #7967 help refactor: dup from drp\n\t\t\tconst char *help_msg[] = {\n\t\t\t\t\"Usage:\", \"drs\", \" # Register states commands\",\n\t\t\t\t\"drs\", \"\", \"List register stack\",\n\t\t\t\t\"drs+\", \"\", \"Push register state\",\n\t\t\t\t\"drs-\", \"\", \"Pop register state\",\n\t\t\t\tNULL };\n\t\t\tr_core_cmd_help (core, help_msg);\n\t\t} break;\n\t\tdefault:\n\t\t\t{\n\t\t\t\tvoid *p = core->dbg->reg->regset[0].pool;\n\t\t\t\tint len = p? r_list_length (p): 0;\n\t\t\t\tr_cons_printf (\"%d\\n\", len);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'p': // \"arp\"\n\t\t// XXX we have to break out .h for these cmd_xxx files.\n\t\tcmd_reg_profile (core, 'a', str);\n\t\tbreak;\n\tcase 't': // \"art\"\n\t\tfor (i = 0; (name = r_reg_get_type (i)); i++) {\n\t\t\tr_cons_println (name);\n\t\t}\n\t\tbreak;\n\tcase 'n': // \"arn\"\n\t\tif (*(str + 1) == '\\0') {\n\t\t\teprintf (\"Oops. try arn [PC|SP|BP|A0|A1|A2|A3|A4|R0|R1|ZF|SF|NF|OF]\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tname = r_reg_get_name (core->dbg->reg, r_reg_get_name_idx (str + 2));\n\t\tif (name && *name) {\n\t\t\tr_cons_println (name);\n\t\t} else {\n\t\t\teprintf (\"Oops. try arn [PC|SP|BP|A0|A1|A2|A3|A4|R0|R1|ZF|SF|NF|OF]\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"ard\"\n\t\tr_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, NULL, 3, use_color); // XXX detect which one is current usage\n\t\tbreak;\n\tcase 'o': // \"aro\"\n\t\tr_reg_arena_swap (core->dbg->reg, false);\n\t\tr_debug_reg_list (core->dbg, R_REG_TYPE_GPR, bits, NULL, 0, use_color); // XXX detect which one is current usage\n\t\tr_reg_arena_swap (core->dbg->reg, false);\n\t\tbreak;\n\tcase '=': // \"ar=\"\n\t\t{\n\t\t\tchar *p = NULL;\n\t\t\tchar *bits = NULL;\n\t\t\tif (str[1]) {\n\t\t\t\tp = strdup (str + 1);\n\t\t\t\tif (str[1] != ':') {\n\t\t\t\t\t// Bits were specified\n\t\t\t\t\tbits = strtok (p, \":\");\n\t\t\t\t\tif (r_str_isnumber (bits)) {\n\t\t\t\t\t\tst64 sz = r_num_math (core->num, bits);\n\t\t\t\t\t\tif (sz > 0) {\n\t\t\t\t\t\t\tsize = sz;\n\t\t\t\t\t\t}\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_core_cmd_help (core, help_msg_ar);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint len = bits ? strlen (bits) : 0;\n\t\t\t\tif (str[len + 1] == ':') {\n\t\t\t\t\t// We have some regs\n\t\t\t\t\tchar *regs = bits ? strtok (NULL, \":\") : strtok ((char *)str + 1, \":\");\n\t\t\t\t\tchar *reg = strtok (regs, \" \");\n\t\t\t\t\tRList *q_regs = r_list_new ();\n\t\t\t\t\tif (q_regs) {\n\t\t\t\t\t\twhile (reg) {\n\t\t\t\t\t\t\tr_list_append (q_regs, reg);\n\t\t\t\t\t\t\treg = strtok (NULL, \" \");\n\t\t\t\t\t\t}\n\t\t\t\t\t\tcore->dbg->q_regs = q_regs;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\t__anal_reg_list (core, type, size, str[0]);\n\t\t\tif (!r_list_empty (core->dbg->q_regs)) {\n\t\t\t\tr_list_free (core->dbg->q_regs);\n\t\t\t}\n\t\t\tcore->dbg->q_regs = NULL;\n\t\t\tfree (p);\n\t\t}\n\t\tbreak;\n\tcase '.': // \"ar.\"\n\tcase '-': // \"ar-\"\n\tcase '*': // \"ar*\"\n\tcase 'R': // \"arR\"\n\tcase 'j': // \"arj\"\n\tcase 'i': // \"ari\"\n\tcase '\\0': // \"ar\"\n\t\t__anal_reg_list (core, type, size, str[0]);\n\t\tbreak;\n\tcase ' ': { // \"ar \"\n\t\targ = strchr (str + 1, '=');\n\t\tif (arg) {\n\t\t\t*arg = 0;\n\t\t\tut64 n = r_num_math (core->num, arg + 1);\n\t\t\tchar *ostr = r_str_trim_dup (str + 1);\n\t\t\tchar *regname = r_str_trim_nc (ostr);\n\t\t\tr = r_reg_get (core->dbg->reg, regname, -1);\n\t\t\tif (!r) {\n\t\t\t\tint role = r_reg_get_name_idx (regname);\n\t\t\t\tif (role != -1) {\n\t\t\t\t\tconst char *alias = r_reg_get_name (core->dbg->reg, role);\n\t\t\t\t\tif (alias) {\n\t\t\t\t\t\tr = r_reg_get (core->dbg->reg, alias, -1);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (r) {\n\t\t\t\t//eprintf (\"%s 0x%08\"PFMT64x\" -> \", str,\n\t\t\t\t//\tr_reg_get_value (core->dbg->reg, r));\n\t\t\t\tr_reg_set_value (core->dbg->reg, r, n); \n\t\t\t\tr_debug_reg_sync (core->dbg, R_REG_TYPE_ALL, true);\n\t\t\t\t//eprintf (\"0x%08\"PFMT64x\"\\n\",\n\t\t\t\t//\tr_reg_get_value (core->dbg->reg, r));\n\t\t\t\tr_core_cmdf (core, \".dr*%d\", bits);\n\t\t\t} else {\n\t\t\t\teprintf (\"ar: Unknown register '%s'\\n\", regname);\n\t\t\t}\n\t\t\tfree (ostr);\n\t\t\treturn;\n\t\t}\n\t\tchar name[32];\n\t\tint i = 1, j;\n\t\twhile (str[i]) {\n\t\t\tif (str[i] == ',') {\n\t\t\t\ti++;\n\t\t\t} else {\n\t\t\t\tfor (j = i; str[++j] && str[j] != ','; );\n\t\t\t\tif (j - i + 1 <= sizeof name) {\n\t\t\t\t\tr_str_ncpy (name, str + i, j - i + 1);\n\t\t\t\t\tif (IS_DIGIT (name[0])) { // e.g. ar 32\n\t\t\t\t\t\t__anal_reg_list (core, R_REG_TYPE_GPR, atoi (name), '\\0');\n\t\t\t\t\t} else if (showreg (core, name) > 0) { // e.g. ar rax\n\t\t\t\t\t} else { // e.g. ar gpr ; ar all\n\t\t\t\t\t\ttype = r_reg_type_by_name (name);\n\t\t\t\t\t\t// TODO differentiate ALL and illegal register types and print error message for the latter\n\t\t\t\t\t\t__anal_reg_list (core, type, -1, '\\0');\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\ti = j;\n\t\t\t}\n\t\t}\n\t}\n\t}\n}\n\nstatic ut64 initializeEsil(RCore *core) {\n\tint romem = r_config_get_i (core->config, \"esil.romem\");\n\tint stats = r_config_get_i (core->config, \"esil.stats\");\n\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\tint exectrap = r_config_get_i (core->config, \"esil.exectrap\");\n\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\tbool nonull = r_config_get_b (core->config, \"esil.nonull\");\n\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\tRAnalEsil *esil = r_anal_esil_new (stacksize, iotrap, addrsize);\n\tif (esil) {\n\t\tr_anal_esil_free (core->anal->esil);\n\t\tcore->anal->esil = esil;\n\t} else {\n\t\treturn UT64_MAX;\n\t}\n\tut64 addr;\n\tesil->verbose = r_config_get_i (core->config, \"esil.verbose\");\n\tesil->cmd = r_core_esil_cmd;\n\tr_anal_esil_setup (esil, core->anal, romem, stats, nonull); // setup io\n\t{\n\t\tconst char *cmd_esil_step = r_config_get (core->config, \"cmd.esil.step\");\n\t\tif (cmd_esil_step && *cmd_esil_step) {\n\t\t\tesil->cmd_step = strdup (cmd_esil_step);\n\t\t}\n\t\tconst char *cmd_esil_step_out = r_config_get (core->config, \"cmd.esil.stepout\");\n\t\tif (cmd_esil_step_out && *cmd_esil_step_out) {\n\t\t\tesil->cmd_step_out = strdup (cmd_esil_step_out);\n\t\t}\n\t\t{\n\t\t\tconst char *s = r_config_get (core->config, \"cmd.esil.intr\");\n\t\t\tif (s) {\n\t\t\t\tchar *my = strdup (s);\n\t\t\t\tif (my) {\n\t\t\t\t\tr_config_set (core->config, \"cmd.esil.intr\", my);\n\t\t\t\t\tfree (my);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tesil->exectrap = exectrap;\n\tRList *entries = r_bin_get_entries (core->bin);\n\tRBinAddr *entry = NULL;\n\tRBinInfo *info = NULL;\n\tif (entries && !r_list_empty (entries)) {\n\t\tentry = (RBinAddr *)r_list_pop_head (entries);\n\t\tinfo = r_bin_get_info (core->bin);\n\t\taddr = info->has_va? entry->vaddr: entry->paddr;\n\t\tr_list_push (entries, entry);\n\t} else {\n\t\taddr = core->offset;\n\t}\n\t// set memory read only\n\treturn addr;\n}\n\nR_API int r_core_esil_step(RCore *core, ut64 until_addr, const char *until_expr, ut64 *prev_addr, bool stepOver) {\n#define return_tail(x) { tail_return_value = x; goto tail_return; }\n\tint tail_return_value = 0;\n\tint ret;\n\tut8 code[32];\n\tRAnalOp op = {0};\n\tRAnalEsil *esil = core->anal->esil;\n\tconst char *name = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\tut64 addr = r_reg_getv (core->anal->reg, name);\n\tbool breakoninvalid = r_config_get_i (core->config, \"esil.breakoninvalid\");\n\tint esiltimeout = r_config_get_i (core->config, \"esil.timeout\");\n\tut64 startTime;\n\n\tif (esiltimeout > 0) {\n\t\tstartTime = r_time_now_mono ();\n\t}\n\tr_cons_break_push (NULL, NULL);\n\tfor (; ; r_anal_op_fini (&op)) {\n\t\tif (r_cons_is_breaked ()) {\n\t\t\teprintf (\"[+] ESIL emulation interrupted at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\treturn_tail (0);\n\t\t}\n\t\t//Break if we have exceeded esil.timeout\n\t\tif (esiltimeout > 0) {\n\t\t\tut64 elapsedTime = r_time_now_mono () - startTime;\n\t\t\telapsedTime >>= 20;\n\t\t\tif (elapsedTime >= esiltimeout) {\n\t\t\t\teprintf (\"[ESIL] Timeout exceeded.\\n\");\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t}\n\t\tif (!esil) {\n\t\t\taddr = initializeEsil (core);\n\t\t\tesil = core->anal->esil;\n\t\t\tif (!esil) {\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t} else {\n\t\t\tesil->trap = 0;\n\t\t\taddr = r_reg_getv (core->anal->reg, name);\n\t\t\t//eprintf (\"PC=0x%\"PFMT64x\"\\n\", (ut64)addr);\n\t\t}\n\t\tif (prev_addr) {\n\t\t\t*prev_addr = addr;\n\t\t}\n\t\tif (esil->exectrap) {\n\t\t\tif (!r_io_is_valid_offset (core->io, addr, R_PERM_X)) {\n\t\t\t\tesil->trap = R_ANAL_TRAP_EXEC_ERR;\n\t\t\t\tesil->trap_code = addr;\n\t\t\t\teprintf (\"[ESIL] Trap, trying to execute on non-executable memory\\n\");\n\t\t\t\treturn_tail (1);\n\t\t\t}\n\t\t}\n\t\tr_asm_set_pc (core->rasm, addr);\n\t\t// run esil pin command here\n\t\tconst char *pincmd = r_anal_pin_call (core->anal, addr);\n\t\tif (pincmd) {\n\t\t\tr_core_cmd0 (core, pincmd);\n\t\t\tut64 pc = r_debug_reg_get (core->dbg, \"PC\");\n\t\t\tif (addr != pc) {\n\t\t\t\treturn_tail (1);\n\t\t\t}\n\t\t}\n\t\tint dataAlign = r_anal_archinfo (esil->anal, R_ANAL_ARCHINFO_DATA_ALIGN);\n\t\tif (dataAlign > 1) {\n\t\t\tif (addr % dataAlign) {\n\t\t\t\tif (esil->cmd && esil->cmd_trap) {\n\t\t\t\t\tesil->cmd (esil, esil->cmd_trap, addr, R_ANAL_TRAP_UNALIGNED);\n\t\t\t\t}\n\t\t\t\tif (breakoninvalid) {\n\t\t\t\t\tr_cons_printf (\"[ESIL] Stopped execution in an unaligned instruction (see e??esil.breakoninvalid)\\n\");\n\t\t\t\t\treturn_tail (0);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t(void) r_io_read_at_mapped (core->io, addr, code, sizeof (code));\n\t\t// TODO: sometimes this is dupe\n\t\tret = r_anal_op (core->anal, &op, addr, code, sizeof (code), R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_HINT);\n\t\t// if type is JMP then we execute the next N instructions\n\t\t// update the esil pointer because RAnal.op() can change it\n\t\tesil = core->anal->esil;\n\t\tif (op.size < 1 || ret < 1) {\n\t\t\tif (esil->cmd && esil->cmd_trap) {\n\t\t\t\tesil->cmd (esil, esil->cmd_trap, addr, R_ANAL_TRAP_INVALID);\n\t\t\t}\n\t\t\tif (breakoninvalid) {\n\t\t\t\teprintf (\"[ESIL] Stopped execution in an invalid instruction (see e??esil.breakoninvalid)\\n\");\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t\top.size = 1; // avoid inverted stepping\n\t\t}\n\t\tif (stepOver) {\n\t\t\tswitch (op.type) {\n\t\t\tcase R_ANAL_OP_TYPE_SWI:\n\t\t\tcase R_ANAL_OP_TYPE_UCALL:\n\t\t\tcase R_ANAL_OP_TYPE_CALL:\n\t\t\tcase R_ANAL_OP_TYPE_JMP:\n\t\t\tcase R_ANAL_OP_TYPE_RCALL:\n\t\t\tcase R_ANAL_OP_TYPE_RJMP:\n\t\t\tcase R_ANAL_OP_TYPE_CJMP:\n\t\t\tcase R_ANAL_OP_TYPE_RET:\n\t\t\tcase R_ANAL_OP_TYPE_CRET:\n\t\t\tcase R_ANAL_OP_TYPE_UJMP:\n\t\t\t\tif (addr == until_addr) {\n\t\t\t\t\treturn_tail (0);\n\t\t\t\t} else {\n\t\t\t\t\tr_reg_setv (core->anal->reg, \"PC\", op.addr + op.size);\n\t\t\t\t\tr_reg_setv (core->dbg->reg, \"PC\", op.addr + op.size);\n\t\t\t\t}\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t\tif (r_config_get_i (core->config, \"cfg.r2wars\")) {\n\t\t\t// this is x86 and r2wars specific, shouldnt hurt outside x86\n\t\t\tut64 vECX = r_reg_getv (core->anal->reg, \"ecx\");\n\t\t\tif (op.prefix  & R_ANAL_OP_PREFIX_REP && vECX > 1) {\n\t\t\t\t//char *tmp = strstr (op.esil.ptr, \",ecx,?{,5,GOTO,}\");\n\t\t\t\tchar *tmp = strstr (op.esil.ptr, \",0,GOTO\");\n\t\t\t\tif (tmp) {\n\t\t\t\t\ttmp[0] = 0;\n\t\t\t\t\top.esil.len -= 7; //16;\n\t\t\t\t} else {\n\t\t\t\t\tr_reg_setv (core->anal->reg, name, addr + op.size);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr_reg_setv (core->anal->reg, name, addr + op.size);\n\t\t\t}\n\t\t} else {\n\t\t\tr_reg_setv (core->anal->reg, name, addr + op.size);\n\t\t}\n\t\tif (ret) {\n\t\t\tr_anal_esil_set_pc (esil, addr);\n\t\t\tconst char *e = R_STRBUF_SAFEGET (&op.esil);\n\t\t\tif (core->dbg->trace->enabled) {\n\t\t\t\tRReg *reg = core->dbg->reg;\n\t\t\t\tcore->dbg->reg = core->anal->reg;\n\t\t\t\tr_debug_trace_op (core->dbg, &op);\n\t\t\t\tcore->dbg->reg = reg;\n\t\t\t} else if (R_STR_ISNOTEMPTY (e)) {\n\t\t\t\tr_anal_esil_parse (esil, e);\n\t\t\t\tif (core->anal->cur && core->anal->cur->esil_post_loop) {\n\t\t\t\t\tcore->anal->cur->esil_post_loop (esil, &op);\n\t\t\t\t}\n\t\t\t\tr_anal_esil_stack_free (esil);\n\t\t\t}\n\t\t\tbool isNextFall = false;\n\t\t\tif (op.type == R_ANAL_OP_TYPE_CJMP) {\n\t\t\t\tut64 pc = r_debug_reg_get (core->dbg, \"PC\");\n\t\t\t\tif (pc == addr + op.size) {\n\t\t\t\t\t// do not opdelay here\n\t\t\t\t\tisNextFall = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\t// only support 1 slot for now\n\t\t\tif (op.delay && !isNextFall) {\n\t\t\t\tut8 code2[32];\n\t\t\t\tut64 naddr = addr + op.size;\n\t\t\t\tRAnalOp op2 = {0};\n\t\t\t\t// emulate only 1 instruction\n\t\t\t\tr_anal_esil_set_pc (esil, naddr);\n\t\t\t\t(void)r_io_read_at (core->io, naddr, code2, sizeof (code2));\n\t\t\t\t// TODO: sometimes this is dupe\n\t\t\t\tret = r_anal_op (core->anal, &op2, naddr, code2, sizeof (code2), R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_HINT);\n\t\t\t\tif (ret > 0) {\n\t\t\t\t\tswitch (op2.type) {\n\t\t\t\t\tcase R_ANAL_OP_TYPE_CJMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_JMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_CRET:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_RET:\n\t\t\t\t\t\t// branches are illegal in a delay slot\n\t\t\t\t\t\tesil->trap = R_ANAL_TRAP_EXEC_ERR;\n\t\t\t\t\t\tesil->trap_code = addr;\n\t\t\t\t\t\teprintf (\"[ESIL] Trap, trying to execute a branch in a delay slot\\n\");\n\t\t\t\t\t\treturn_tail (1);\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tconst char *e = R_STRBUF_SAFEGET (&op2.esil);\n\t\t\t\t\tif (R_STR_ISNOTEMPTY (e)) {\n\t\t\t\t\t\tr_anal_esil_parse (esil, e);\n\t\t\t\t\t}\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Invalid instruction at 0x%08\"PFMT64x\"\\n\", naddr);\n\t\t\t\t}\n\t\t\t\tr_anal_op_fini (&op2);\n\t\t\t}\n\t\t\ttail_return_value = 1;\n\t\t}\n\t\t// esil->verbose ?\n\t\t// eprintf (\"REPE 0x%llx %s => 0x%llx\\n\", addr, R_STRBUF_SAFEGET (&op.esil), r_reg_getv (core->anal->reg, \"PC\"));\n\n\t\tut64 pc = r_reg_getv (core->anal->reg, name);\n\t\tif (core->anal->pcalign > 0) {\n\t\t\tpc -= (pc % core->anal->pcalign);\n\t\t\tr_reg_setv (core->anal->reg, name, pc);\n\t\t\tr_reg_setv (core->dbg->reg, name, pc);\n\t\t}\n\n\t\tst64 follow = (st64)r_config_get_i (core->config, \"dbg.follow\");\n\t\tif (follow > 0) {\n\t\t\tut64 pc = r_debug_reg_get (core->dbg, \"PC\");\n\t\t\tif ((pc < core->offset) || (pc > (core->offset + follow))) {\n\t\t\t\tr_core_cmd0 (core, \"sr PC\");\n\t\t\t}\n\t\t}\n\t\t// check breakpoints\n\t\tif (r_bp_get_at (core->dbg->bp, pc)) {\n\t\t\tr_cons_printf (\"[ESIL] hit breakpoint at 0x%\"PFMT64x \"\\n\", pc);\n\t\t\treturn_tail (0);\n\t\t}\n\t\t// check addr\n\t\tif (until_addr != UT64_MAX) {\n\t\t\tif (pc == until_addr) {\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\t// check esil\n\t\tif (esil && esil->trap) {\n\t\t\tif (core->anal->esil->verbose) {\n\t\t\t\teprintf (\"TRAP\\n\");\n\t\t\t}\n\t\t\treturn_tail (0);\n\t\t}\n\t\tif (until_expr) {\n\t\t\tif (r_anal_esil_condition (core->anal->esil, until_expr)) {\n\t\t\t\tif (core->anal->esil->verbose) {\n\t\t\t\t\teprintf (\"ESIL BREAK!\\n\");\n\t\t\t\t}\n\t\t\t\treturn_tail (0);\n\t\t\t}\n\t\t\tcontinue;\n\t\t}\n\t\tbreak;\n\t}\ntail_return:\n\tr_anal_op_fini (&op);\n\tr_cons_break_pop ();\n\treturn tail_return_value;\n}\n\nR_API int r_core_esil_step_back(RCore *core) {\n\tr_return_val_if_fail (core->anal->esil && core->anal->esil->trace, -1);\n\tRAnalEsil *esil = core->anal->esil;\n\tif (esil->trace->idx > 0) {\n\t\tr_anal_esil_trace_restore (esil, esil->trace->idx - 1);\n\t\treturn 1;\n\t}\n\treturn -1;\n}\n\nstatic void cmd_address_info(RCore *core, const char *addrstr, int fmt) {\n\tut64 addr, type;\n\tif (!addrstr || !*addrstr) {\n\t\taddr = core->offset;\n\t} else {\n\t\taddr = r_num_math (core->num, addrstr);\n\t}\n\ttype = r_core_anal_address (core, addr);\n\tswitch (fmt) {\n\tcase 'j': {\n\t\tPJ *pj = pj_new ();\n\t\tif (!pj) {\n\t\t\treturn;\n\t\t}\n\t\tpj_o (pj);\n\t\tif (type & R_ANAL_ADDR_TYPE_PROGRAM)\n\t\t\tpj_ks (pj, \"program\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_LIBRARY)\n\t\t\tpj_ks (pj, \"library\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_EXEC)\n\t\t\tpj_ks (pj, \"exec\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_READ)\n\t\t\tpj_ks (pj, \"read\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_WRITE)\n\t\t\tpj_ks (pj, \"write\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_FLAG)\n\t\t\tpj_ks (pj, \"flag\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_FUNC)\n\t\t\tpj_ks (pj, \"func\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_STACK)\n\t\t\tpj_ks (pj, \"stack\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_HEAP)\n\t\t\tpj_ks (pj, \"heap\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_REG)\n\t\t\tpj_ks (pj, \"reg\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_ASCII)\n\t\t\tpj_ks (pj, \"ascii\", \"true\");\n\t\tif (type & R_ANAL_ADDR_TYPE_SEQUENCE)\n\t\t\tpj_ks (pj, \"sequence\", \"true\");\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tif (type & R_ANAL_ADDR_TYPE_PROGRAM)\n\t\t\tr_cons_printf (\"program\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_LIBRARY)\n\t\t\tr_cons_printf (\"library\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_EXEC)\n\t\t\tr_cons_printf (\"exec\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_READ)\n\t\t\tr_cons_printf (\"read\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_WRITE)\n\t\t\tr_cons_printf (\"write\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_FLAG)\n\t\t\tr_cons_printf (\"flag\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_FUNC)\n\t\t\tr_cons_printf (\"func\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_STACK)\n\t\t\tr_cons_printf (\"stack\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_HEAP)\n\t\t\tr_cons_printf (\"heap\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_REG)\n\t\t\tr_cons_printf (\"reg\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_ASCII)\n\t\t\tr_cons_printf (\"ascii\\n\");\n\t\tif (type & R_ANAL_ADDR_TYPE_SEQUENCE)\n\t\t\tr_cons_printf (\"sequence\\n\");\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_info(RCore *core, const char *input) {\n\tswitch (input[0]) {\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_ai);\n\t\tbreak;\n\tcase ' ':\n\t\tcmd_address_info (core, input, 0);\n\t\tbreak;\n\tcase 'i': // \"aii\"\n\t\t// global imports\n\t\tif (input[1]) {\n\t\t\tif (input[1] == ' ') {\n\t\t\t\tchar *s = r_str_trim_dup (input + 1);\n\t\t\t\tif (s) {\n\t\t\t\t\tr_anal_add_import (core->anal, s);\n\t\t\t\t\tfree (s);\n\t\t\t\t}\n\t\t\t} else if (input[1] == '-') {\n\t\t\t\tr_anal_purge_imports (core->anal);\n\t\t\t} else {\n\t\t\t\teprintf (\"Usagae: aii [namespace] # see afii - imports\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (core->anal->imports) {\n\t\t\t\tchar *imp;\n\t\t\t\tRListIter *iter;\n\t\t\t\tr_list_foreach (core->anal->imports, iter, imp) {\n\t\t\t\t\tr_cons_printf (\"%s\\n\", imp);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"aij\"\n\t\tcmd_address_info (core, input + 1, 'j');\n\t\tbreak;\n\tdefault:\n\t\tcmd_address_info (core, NULL, 0);\n\t\tbreak;\n\t}\n}\n\nstatic void initialize_stack (RCore *core, ut64 addr, ut64 size) {\n\tconst char *mode = r_config_get (core->config, \"esil.fillstack\");\n\tif (mode && *mode && *mode != '0') {\n\t\tconst ut64 bs = 4096 * 32;\n\t\tut64 i;\n\t\tfor (i = 0; i < size; i += bs) {\n\t\t\tut64 left = R_MIN (bs, size - i);\n\t\t//\tr_core_cmdf (core, \"wx 10203040 @ 0x%llx\", addr);\n\t\t\tswitch (*mode) {\n\t\t\tcase 'd': // \"debrujn\"\n\t\t\t\tr_core_cmdf (core, \"wopD %\"PFMT64u\" @ 0x%\"PFMT64x, left, addr + i);\n\t\t\t\tbreak;\n\t\t\tcase 's': // \"seq\"\n\t\t\t\tr_core_cmdf (core, \"woe 1 0xff 1 4 @ 0x%\"PFMT64x\"!0x%\"PFMT64x, addr + i, left);\n\t\t\t\tbreak;\n\t\t\tcase 'r': // \"random\"\n\t\t\t\tr_core_cmdf (core, \"woR %\"PFMT64u\" @ 0x%\"PFMT64x\"!0x%\"PFMT64x, left, addr + i, left);\n\t\t\t\tbreak;\n\t\t\tcase 'z': // \"zero\"\n\t\t\tcase '0':\n\t\t\t\tr_core_cmdf (core, \"wow 00 @ 0x%\"PFMT64x\"!0x%\"PFMT64x, addr + i, left);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\t// eprintf (\"[*] Initializing ESIL stack with pattern\\n\");\n\t\t// r_core_cmdf (core, \"woe 0 10 4 @ 0x%\"PFMT64x, size, addr);\n\t}\n}\n\nstatic void cmd_esil_mem(RCore *core, const char *input) {\n\tRAnalEsil *esil = core->anal->esil;\n\tRIOMap *stack_map;\n\tut64 curoff = core->offset;\n\tconst char *patt = \"\";\n\tut64 addr = 0x100000;\n\tut32 size = 0xf0000;\n\tchar name[128];\n\tRFlagItem *fi;\n\tconst char *sp, *bp, *pc;\n\tchar uri[32];\n\tchar nomalloc[256];\n\tchar *p;\n\tif (!esil) {\n\t\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\t\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\t\tint romem = r_config_get_i (core->config, \"esil.romem\");\n\t\tint stats = r_config_get_i (core->config, \"esil.stats\");\n\t\tbool nonull = r_config_get_b (core->config, \"esil.nonull\");\n\t\tint verbose = r_config_get_i (core->config, \"esil.verbose\");\n\t\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\t\tif (!(esil = r_anal_esil_new (stacksize, iotrap, addrsize))) {\n\t\t\treturn;\n\t\t}\n\t\tr_anal_esil_setup (esil, core->anal, romem, stats, nonull); // setup io\n\t\tr_anal_esil_free (core->anal->esil);\n\t\tcore->anal->esil = esil;\n\t\tesil->verbose = verbose;\n\t\t{\n\t\t\tconst char *s = r_config_get (core->config, \"cmd.esil.intr\");\n\t\t\tif (s) {\n\t\t\t\tchar *my = strdup (s);\n\t\t\t\tif (my) {\n\t\t\t\t\tr_config_set (core->config, \"cmd.esil.intr\", my);\n\t\t\t\t\tfree (my);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (*input == '?') {\n\t\teprintf (\"Usage: aeim [addr] [size] [name] - initialize ESIL VM stack\\n\");\n\t\teprintf (\"Default: 0x100000 0xf0000\\n\");\n\t\teprintf (\"See ae? for more help\\n\");\n\t\treturn;\n\t}\n\n\tif (input[0] == 'p') {\n\t\tfi = r_flag_get (core->flags, \"aeim.stack\");\n\t\tif (fi) {\n\t\t\taddr = fi->offset;\n\t\t\tsize = fi->size;\n\t\t} else {\n\t\t\tcmd_esil_mem (core, \"\");\n\t\t}\n\t\tif (esil) {\n\t\t\tesil->stack_addr = addr;\n\t\t\tesil->stack_size = size;\n\t\t}\n\t\tinitialize_stack (core, addr, size);\n\t\treturn;\n\t}\n\n\tif (!*input) {\n\t\tchar *fi = sdb_get(core->sdb, \"aeim.fd\", 0);\n\t\tif (fi) {\n\t\t\t// Close the fd associated with the aeim stack\n\t\t\tut64 fd = sdb_atoi (fi);\n\t\t\t(void)r_io_fd_close (core->io, fd);\n\t\t}\n\t}\n\tsize = r_config_get_i (core->config, \"esil.stack.size\");\n\taddr = r_config_get_i (core->config, \"esil.stack.addr\");\n\n\tif (r_io_map_is_mapped (core->io, addr)) {\n\t\taddr = core->offset;\n\t\tr_io_map_locate (core->io, &addr, size, 0x10000000);\n\t}\n\tpatt = r_config_get (core->config, \"esil.stack.pattern\");\n\tp = strncpy (nomalloc, input, 255);\n\tif ((p = strchr (p, ' '))) {\n\t\twhile (*p == ' ') p++;\n\t\taddr = r_num_math (core->num, p);\n\t\tif ((p = strchr (p, ' '))) {\n\t\t\twhile (*p == ' ') p++;\n\t\t\tsize = (ut32)r_num_math (core->num, p);\n\t\t\tif (size < 1) {\n\t\t\t\tsize = 0xf0000;\n\t\t\t}\n\t\t\tif ((p = strchr (p, ' '))) {\n\t\t\t\twhile (*p == ' ') {\n\t\t\t\t\tp++;\n\t\t\t\t}\n\t\t\t\tsnprintf (name, sizeof (name), \"mem.%s\", p);\n\t\t\t} else {\n\t\t\t\tsnprintf (name, sizeof (name), \"mem.0x%\" PFMT64x \"_0x%x\", addr, size);\n\t\t\t}\n\t\t} else {\n\t\t\tsnprintf (name, sizeof (name), \"mem.0x%\" PFMT64x \"_0x%x\", addr, size);\n\t\t}\n\t} else {\n\t\tsnprintf (name, sizeof (name), \"mem.0x%\" PFMT64x \"_0x%x\", addr, size);\n\t}\n\tif (*input == '-') {\n\t\tif (esil->stack_fd > 2) {\t//0, 1, 2 are reserved for stdio/stderr\n\t\t\tr_io_fd_close (core->io, esil->stack_fd);\n\t\t\t// no need to kill the maps, r_io_map_cleanup does that for us in the close\n\t\t\tesil->stack_fd = 0;\n\t\t} else {\n\t\t\teprintf (\"Cannot deinitialize %s\\n\", name);\n\t\t}\n\t\tr_flag_unset_name (core->flags, name);\n\t\tr_flag_unset_name (core->flags, \"aeim.stack\");\n\t\tsdb_unset(core->sdb, \"aeim.fd\", 0);\n\t\t// eprintf (\"Deinitialized %s\\n\", name);\n\t\treturn;\n\t}\n\n\tsnprintf (uri, sizeof (uri), \"malloc://%d\", (int)size);\n\tesil->stack_fd = r_io_fd_open (core->io, uri, R_PERM_RW, 0);\n\tif (!(stack_map = r_io_map_add (core->io, esil->stack_fd, R_PERM_RW, 0LL, addr, size))) {\n\t\tr_io_fd_close (core->io, esil->stack_fd);\n\t\teprintf (\"Cannot create map for tha stack, fd %d got closed again\\n\", esil->stack_fd);\n\t\tesil->stack_fd = 0;\n\t\treturn;\n\t}\n\tr_io_map_set_name (stack_map, name);\n\t// r_flag_set (core->flags, name, addr, size);\t//why is this here?\n\tchar val[128], *v;\n\tv = sdb_itoa (esil->stack_fd, val, 10);\n\tsdb_set(core->sdb, \"aeim.fd\", v, 0);\n\n\tr_config_set_i (core->config, \"io.va\", true);\n\tif (patt && *patt) {\n\t\tswitch (*patt) {\n\t\tcase '0':\n\t\t\t// do nothing\n\t\t\tbreak;\n\t\tcase 'd':\n\t\t\tr_core_cmdf (core, \"wopD %d @ 0x%\"PFMT64x, size, addr);\n\t\t\tbreak;\n\t\tcase 'i':\n\t\t\tr_core_cmdf (core, \"woe 0 255 1 @ 0x%\"PFMT64x\"!%d\",addr, size);\n\t\t\tbreak;\n\t\tcase 'w':\n\t\t\tr_core_cmdf (core, \"woe 0 0xffff 1 4 @ 0x%\"PFMT64x\"!%d\",addr, size);\n\t\t\tbreak;\n\t\t}\n\t}\n\t// SP\n\tsp = r_reg_get_name (core->dbg->reg, R_REG_NAME_SP);\n\tif (sp) {\n\t\tr_debug_reg_set (core->dbg, sp, addr + (size / 2));\n\t}\n\t// BP\n\tbp = r_reg_get_name (core->dbg->reg, R_REG_NAME_BP);\n\tif (bp) {\n\t\tr_debug_reg_set (core->dbg, bp, addr + (size / 2));\n\t}\n\t// PC\n\tpc = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);\n\tif (pc) {\n\t\tr_debug_reg_set (core->dbg, pc, curoff);\n\t}\n\tr_core_cmd0 (core, \".ar*\");\n\tif (esil) {\n\t\tesil->stack_addr = addr;\n\t\tesil->stack_size = size;\n\t}\n\tinitialize_stack (core, addr, size);\n\tr_core_seek (core, curoff, false);\n}\n\n#if 0\nstatic ut64 opc = UT64_MAX;\nstatic ut8 *regstate = NULL;\n\nstatic void esil_init (RCore *core) {\n\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\tint nonull = r_config_get_i (core->config, \"esil.nonull\");\n\topc = r_reg_getv (core->anal->reg, pc);\n\tif (!opc || opc==UT64_MAX) {\n\t\topc = core->offset;\n\t}\n\tif (!core->anal->esil) {\n\t\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\t\tut64 stackSize = r_config_get_i (core->config, \"esil.stack.size\");\n\t\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\t\tif (!(core->anal->esil = r_anal_esil_new (stackSize, iotrap, addrsize))) {\n\t\t\tR_FREE (regstate);\n\t\t\treturn;\n\t\t}\n\t\tr_anal_esil_setup (core->anal->esil, core->anal, 0, 0, nonull);\n\t}\n\tfree (regstate);\n\tregstate = r_reg_arena_peek (core->anal->reg);\n}\n\nstatic void esil_fini(RCore *core) {\n\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\tr_reg_arena_poke (core->anal->reg, regstate);\n\tr_reg_setv (core->anal->reg, pc, opc);\n\tR_FREE (regstate);\n}\n#endif\n\ntypedef struct {\n\tRList *regs;\n\tRList *regread;\n\tRList *regwrite;\n\tRList *regvalues;\n\tRList *inputregs;\n} AeaStats;\n\nstatic void aea_stats_init (AeaStats *stats) {\n\tstats->regs = r_list_newf (free);\n\tstats->regread = r_list_newf (free);\n\tstats->regwrite = r_list_newf (free);\n\tstats->regvalues = r_list_newf (free);\n\tstats->inputregs = r_list_newf (free);\n}\n\nstatic void aea_stats_fini (AeaStats *stats) {\n\tR_FREE (stats->regs);\n\tR_FREE (stats->regread);\n\tR_FREE (stats->regwrite);\n\tR_FREE (stats->inputregs);\n}\n\nstatic bool contains(RList *list, const char *name) {\n\tRListIter *iter;\n\tconst char *n;\n\tr_list_foreach (list, iter, n) {\n\t\tif (!strcmp (name, n))\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\nstatic char *oldregread = NULL;\nstatic RList *mymemxsr = NULL;\nstatic RList *mymemxsw = NULL;\n\n#define R_NEW_DUP(x) memcpy((void*)malloc(sizeof(x)), &(x), sizeof(x))\ntypedef struct {\n\tut64 addr;\n\tint size;\n} AeaMemItem;\n\nstatic bool mymemwrite(RAnalEsil *esil, ut64 addr, const ut8 *buf, int len) {\n\tAeaMemItem *n;\n\tRListIter *iter;\n\tr_list_foreach (mymemxsw, iter, n) {\n\t\tif (addr == n->addr) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (!r_io_is_valid_offset (esil->anal->iob.io, addr, 0)) {\n\t\treturn false;\n\t}\n\tn = R_NEW (AeaMemItem);\n\tif (n) {\n\t\tn->addr = addr;\n\t\tn->size = len;\n\t\tr_list_push (mymemxsw, n);\n\t}\n\treturn true;\n}\n\nstatic bool mymemread(RAnalEsil *esil, ut64 addr, ut8 *buf, int len) {\n\tRListIter *iter;\n\tAeaMemItem *n;\n\tr_list_foreach (mymemxsr, iter, n) {\n\t\tif (addr == n->addr) {\n\t\t\treturn true;\n\t\t}\n\t}\n\tif (!r_io_is_valid_offset (esil->anal->iob.io, addr, 0)) {\n\t\treturn false;\n\t}\n\tn = R_NEW (AeaMemItem);\n\tif (n) {\n\t\tn->addr = addr;\n\t\tn->size = len;\n\t\tr_list_push (mymemxsr, n);\n\t}\n\treturn true;\n}\n\nstatic bool myregwrite(RAnalEsil *esil, const char *name, ut64 *val) {\n\tAeaStats *stats = esil->user;\n\tif (oldregread && !strcmp (name, oldregread)) {\n\t\tr_list_pop (stats->regread);\n\t\tR_FREE (oldregread)\n\t}\n\tif (!IS_DIGIT (*name)) {\n\t\tif (!contains (stats->regs, name)) {\n\t\t\tr_list_push (stats->regs, strdup (name));\n\t\t}\n\t\tif (!contains (stats->regwrite, name)) {\n\t\t\tr_list_push (stats->regwrite, strdup (name));\n\t\t}\n\t\tchar *v = r_str_newf (\"%\"PFMT64d, *val);\n\t\tif (!contains (stats->regvalues, v)) {\n\t\t\tr_list_push (stats->regvalues, strdup (v));\n\t\t}\n\t\tfree (v);\n\t}\n\treturn false;\n}\n\nstatic bool myregread(RAnalEsil *esil, const char *name, ut64 *val, int *len) {\n\tAeaStats *stats = esil->user;\n\tif (!IS_DIGIT (*name)) {\n\t\tif (!contains (stats->inputregs, name)) {\n\t\t\tif (!contains (stats->regwrite, name)) {\n\t\t\t\tr_list_push (stats->inputregs, strdup (name));\n\t\t\t}\n\t\t}\n\t\tif (!contains (stats->regs, name)) {\n\t\t\tr_list_push (stats->regs, strdup (name));\n\t\t}\n\t\tif (!contains (stats->regread, name)) {\n\t\t\tr_list_push (stats->regread, strdup (name));\n\t\t}\n\t}\n\treturn false;\n}\n\nstatic void showregs(RList *list) {\n\tif (!r_list_empty (list)) {\n\t\tchar *reg;\n\t\tRListIter *iter;\n\t\tr_list_foreach (list, iter, reg) {\n\t\t\tr_cons_print (reg);\n\t\t\tif (iter->n) {\n\t\t\t\tr_cons_printf (\" \");\n\t\t\t}\n\t\t}\n\t}\n\tr_cons_newline ();\n}\n\nstatic void showmem(RList *list) {\n\tif (!r_list_empty (list)) {\n\t\tAeaMemItem *item;\n\t\tRListIter *iter;\n\t\tr_list_foreach (list, iter, item) {\n\t\t\tr_cons_printf (\" 0x%08\"PFMT64x, item->addr);\n\n\t\t}\n\t}\n\tr_cons_newline ();\n}\n\nstatic void showregs_json(RList *list, PJ *pj) {\n\tpj_a (pj);\n\tif (!r_list_empty (list)) {\n\t\tchar *reg;\n\t\tRListIter *iter;\n\n\t\tr_list_foreach (list, iter, reg) {\n\t\t\tpj_s (pj, reg);\n\t\t}\n\t}\n\tpj_end (pj);\n}\n\nstatic void showmem_json(RList *list, PJ *pj) {\n\tpj_a (pj);\n\tif (!r_list_empty (list)) {\n\t\tRListIter *iter;\n\t\tAeaMemItem *item;\n\t\tr_list_foreach (list, iter, item) {\n\t\t\tpj_n (pj, item->addr);\n\t\t}\n\t}\n\n\tpj_end (pj);\n}\n\nstatic bool cmd_aea(RCore* core, int mode, ut64 addr, int length) {\n\tRAnalEsil *esil;\n\tint ptr, ops, ops_end = 0, len, buf_sz;\n\tut64 addr_end;\n\tAeaStats stats;\n\tconst char *esilstr;\n\tRAnalOp aop = R_EMPTY;\n\tut8 *buf;\n\tRList* regnow;\n\tPJ *pj = NULL;\n\tif (!core) {\n\t\treturn false;\n\t}\n\tint maxopsize = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_MAX_OP_SIZE);\n\tif (maxopsize < 1) {\n\t\tmaxopsize = 16;\n\t}\n\tif (mode & 1) {\n\t\t// number of bytes / length\n\t\tbuf_sz = length;\n\t} else {\n\t\t// number of instructions / opcodes\n\t\tops_end = length;\n\t\tif (ops_end < 1) {\n\t\t\tops_end = 1;\n\t\t}\n\t\tbuf_sz = ops_end * maxopsize;\n\t}\n\tif (buf_sz < 1) {\n\t\tbuf_sz = maxopsize;\n\t}\n\taddr_end = addr + buf_sz;\n\tbuf = malloc (buf_sz);\n\tif (!buf) {\n\t\treturn false;\n\t}\n\t(void)r_io_read_at (core->io, addr, (ut8 *)buf, buf_sz);\n\taea_stats_init (&stats);\n\n\t//esil_init (core);\n\t//esil = core->anal->esil;\n\tr_reg_arena_push (core->anal->reg);\n\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\tbool iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\tint romem = r_config_get_i (core->config, \"esil.romem\");\n\tint stats1 = r_config_get_i (core->config, \"esil.stats\");\n\tbool nonull = r_config_get_b (core->config, \"esil.nonull\");\n\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\tconst bool cfg_r2wars = r_config_get_i (core->config, \"cfg.r2wars\");\n\tesil = r_anal_esil_new (stacksize, iotrap, addrsize);\n\tr_anal_esil_setup (esil, core->anal, romem, stats1, nonull); // setup io\n#\tdefine hasNext(x) (x&1) ? (addr<addr_end) : (ops<ops_end)\n\n\tmymemxsr = r_list_new ();\n\tmymemxsw = r_list_new ();\n\tesil->user = &stats;\n\tesil->cb.hook_reg_write = myregwrite;\n\tesil->cb.hook_reg_read = myregread;\n\tesil->cb.hook_mem_write = mymemwrite;\n\tesil->cb.hook_mem_read = mymemread;\n\tesil->nowrite = true;\n\tr_cons_break_push (NULL, NULL);\n\tfor (ops = ptr = 0; ptr < buf_sz && hasNext (mode); ops++, ptr += len) {\n\t\tif (r_cons_is_breaked ()) {\n\t\t\tbreak;\n\t\t}\n\t\tlen = r_anal_op (core->anal, &aop, addr + ptr, buf + ptr, buf_sz - ptr, R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_HINT);\n\t\tesilstr = R_STRBUF_SAFEGET (&aop.esil);\n\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\tif (len < 1) {\n\t\t\t\teprintf (\"Invalid 0x%08\"PFMT64x\" instruction %02x %02x\\n\",\n\t\t\t\t\taddr + ptr, buf[ptr], buf[ptr + 1]);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (cfg_r2wars) {\n\t\t\t\tif (aop.prefix  & R_ANAL_OP_PREFIX_REP) {\n\t\t\t\t\t//char * tmp = strstr (esilstr, \",ecx,?{,5,GOTO,}\");\n\t\t\t\t\tchar *tmp = strstr (esilstr, \",0,GOTO\");\n\t\t\t\t\tif (tmp) {\n\t\t\t\t\t\ttmp[0] = 0;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_anal_esil_parse (esil, esilstr);\n\t\t\tr_anal_esil_stack_free (esil);\n\t\t}\n\t\tr_anal_op_fini (&aop);\n\t\tif (len < 1) {\n\t\t\tlen = 1;\n\t\t}\n\t}\n\tr_cons_break_pop ();\n\tesil->nowrite = false;\n\tesil->cb.hook_reg_write = NULL;\n\tesil->cb.hook_reg_read = NULL;\n\t//esil_fini (core);\n\tr_anal_esil_free (esil);\n\tr_reg_arena_pop (core->anal->reg);\n\tregnow = r_list_newf (free);\n\t{\n\t\tRListIter *iter;\n\t\tchar *reg;\n\t\tr_list_foreach (stats.regs, iter, reg) {\n\t\t\tif (!contains (stats.regwrite, reg)) {\n\t\t\t\tr_list_push (regnow, strdup (reg));\n\t\t\t}\n\t\t}\n\t}\n\tif ((mode >> 5) & 1) {\n\t\tRListIter *iter;\n\t\tAeaMemItem *n;\n\t\tint c = 0;\n\t\tr_cons_printf (\"f-mem.*\\n\");\n\t\tr_list_foreach (mymemxsr, iter, n) {\n\t\t\tr_cons_printf (\"f mem.read.%d 0x%08x @ 0x%08\"PFMT64x\"\\n\", c++, n->size, n->addr);\n\t\t}\n\t\tc = 0;\n\t\tr_list_foreach (mymemxsw, iter, n) {\n\t\t\tr_cons_printf (\"f mem.write.%d 0x%08x @ 0x%08\"PFMT64x\"\\n\", c++, n->size, n->addr);\n\t\t}\n\t}\n\n\t/* show registers used */\n\tif ((mode >> 1) & 1) {\n\t\tshowregs (stats.regread);\n\t} else if ((mode >> 2) & 1) {\n\t\tshowregs (stats.regwrite);\n\t} else if ((mode >> 3) & 1) {\n\t\tshowregs (regnow);\n\t} else if ((mode >> 4) & 1) {\n\t\tpj = pj_new ();\n\t\tif (!pj) {\n\t\t\treturn false;\n\t\t}\n\t\tpj_o (pj);\n\t\tpj_k (pj, \"A\");\n\t\tshowregs_json (stats.regs, pj);\n\t\tpj_k (pj, \"I\");\n\t\tshowregs_json (stats.inputregs, pj);\n\t\tpj_k (pj, \"R\");\n\t\tshowregs_json (stats.regread, pj);\n\t\tpj_k (pj, \"W\");\n\t\tshowregs_json (stats.regwrite, pj);\n\t\tif (!r_list_empty (stats.regvalues)) {\n\t\t\tpj_k (pj, \"V\");\n\t\t\tshowregs_json (stats.regvalues, pj);\n\t\t}\n\t\tif (!r_list_empty (regnow)){\n\t\t\tpj_k (pj, \"N\");\n\t\t\tshowregs_json (regnow, pj);\n\t\t}\n\t\tif (!r_list_empty (mymemxsr)){\n\t\t\tpj_k (pj, \"@R\");\n\t\t\tshowmem_json (mymemxsr, pj);\n\t\t}\n\t\tif (!r_list_empty (mymemxsw)){\n\t\t\tpj_k (pj, \"@W\");\n\t\t\tshowmem_json (mymemxsw, pj);\n\t\t}\n\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t} else if ((mode >> 5) & 1) {\n\t\t// nothing\n\t} else {\n\t\tif (!r_list_empty (stats.inputregs)) {\n\t\t\tr_cons_printf (\" I: \");\n\t\t\tshowregs (stats.inputregs);\n\t\t}\n\t\tif (!r_list_empty (stats.regs)) {\n\t\t\tr_cons_printf (\" A: \");\n\t\t\tshowregs (stats.regs);\n\t\t}\n\t\tif (!r_list_empty (stats.regread)) {\n\t\t\tr_cons_printf (\" R: \");\n\t\t\tshowregs (stats.regread);\n\t\t}\n\t\tif (!r_list_empty (stats.regwrite)) {\n\t\t\tr_cons_printf (\" W: \");\n\t\t\tshowregs (stats.regwrite);\n\t\t}\n\t\tif (!r_list_empty (stats.regvalues)) {\n\t\t\tr_cons_printf (\" V: \");\n\t\t\tshowregs (stats.regvalues);\n\t\t}\n\t\tif (!r_list_empty (regnow)){\n\t\t\tr_cons_printf (\" N: \");\n\t\t\tshowregs (regnow);\n\t\t}\n\t\tif (!r_list_empty (mymemxsr)){\n\t\t\tr_cons_printf (\"@R:\");\n\t\t\tshowmem (mymemxsr);\n\t\t}\n\t\tif (!r_list_empty (mymemxsw)){\n\t\t\tr_cons_printf (\"@W:\");\n\t\t\tshowmem (mymemxsw);\n\t\t}\n\t}\n\n\tr_list_free (mymemxsr);\n\tr_list_free (mymemxsw);\n\tmymemxsr = NULL;\n\tmymemxsw = NULL;\n\taea_stats_fini (&stats);\n\tfree (buf);\n\tR_FREE (regnow);\n\treturn true;\n}\n\nstatic void cmd_aespc(RCore *core, ut64 addr, ut64 until_addr, int off) {\n\tRAnalEsil *esil = core->anal->esil;\n\tint i, j = 0;\n\tut8 *buf;\n\tRAnalOp aop = {0};\n\tint ret , bsize = R_MAX (4096, core->blocksize);\n\tconst int mininstrsz = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_MIN_OP_SIZE);\n\tconst int minopcode = R_MAX (1, mininstrsz);\n\tconst char *pc = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);\n\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\tut64 addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\n\t// eprintf (\"   aesB %llx %llx %d\\n\", addr, until_addr, off); // 0x%08llx %d  %s\\n\", aop.addr, ret, aop.mnemonic);\n\tif (!esil) {\n\t\teprintf (\"Warning: cmd_espc: creating new esil instance\\n\");\n\t\tif (!(esil = r_anal_esil_new (stacksize, iotrap, addrsize))) {\n\t\t\treturn;\n\t\t}\n\t\tcore->anal->esil = esil;\n\t}\n\tbuf = malloc (bsize);\n\tif (!buf) {\n\t\teprintf (\"Cannot allocate %d byte(s)\\n\", bsize);\n\t\tfree (buf);\n\t\treturn;\n\t}\n\tif (addr == -1) {\n\t\taddr = r_reg_getv (core->dbg->reg, pc);\n\t}\n\t(void)r_anal_esil_setup (core->anal->esil, core->anal, 0, 0, 0); // int romem, int stats, int nonull) {\n\tut64 cursp = r_reg_getv (core->dbg->reg, \"SP\");\n\tut64 oldoff = core->offset;\n\tconst ut64 flags = R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT | R_ANAL_OP_MASK_ESIL | R_ANAL_OP_MASK_DISASM;\n\tfor (i = 0, j = 0; j < off ; i++, j++) {\n\t\tif (r_cons_is_breaked ()) {\n\t\t\tbreak;\n\t\t}\n\t\tif (i >= (bsize - 32)) {\n\t\t\ti = 0;\n\t\t\teprintf (\"Warning: Chomp\\n\");\n\t\t}\n\t\tif (!i) {\n\t\t\tr_io_read_at (core->io, addr, buf, bsize);\n\t\t}\n\t\tif (addr == until_addr) {\n\t\t\tbreak;\n\t\t}\n\t\tret = r_anal_op (core->anal, &aop, addr, buf + i, bsize - i, flags);\n\t\tif (ret < 1) {\n\t\t\teprintf (\"Failed analysis at 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\tbreak;\n\t\t}\n\t\t// skip calls and such\n\t\tif (aop.type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t// nothing\n\t\t} else {\n\t\t\tr_reg_setv (core->anal->reg, \"PC\", aop.addr + aop.size);\n\t\t\tr_reg_setv (core->dbg->reg, \"PC\", aop.addr + aop.size);\n\t\t\tconst char *e = R_STRBUF_SAFEGET (&aop.esil);\n\t\t\tif (e && *e) {\n\t\t\t\t // eprintf (\"   0x%08llx %d  %s\\n\", aop.addr, ret, aop.mnemonic);\n\t\t\t\t(void)r_anal_esil_parse (esil, e);\n\t\t\t}\n\t\t}\n\t\tint inc = (core->search->align > 0)? core->search->align - 1: ret - 1;\n\t\tif (inc < 0) {\n\t\t\tinc = minopcode;\n\t\t}\n\t\ti += inc;\n\t\taddr += ret; // aop.size;\n\t\tr_anal_op_fini (&aop);\n\t}\n\tr_core_seek (core, oldoff, true);\n\tr_reg_setv (core->dbg->reg, \"SP\", cursp);\n}\n\nstatic void r_anal_aefa(RCore *core, const char *arg) {\n\tut64 to = r_num_math (core->num, arg);\n\tut64 at, from = core->offset;\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, to, -1);\n\tif (!from || from == UT64_MAX) {\n\t\tif (fcn) {\n\t\t\tfrom = fcn->addr;\n\t\t} else {\n\t\t\teprintf (\"Usage: aefa [from] # if no from address is given, uses fcn.addr\\n\");\n\t\t\treturn;\n\t\t}\n\t}\n\teprintf (\"Emulate from 0x%08\"PFMT64x\" to 0x%08\"PFMT64x\"\\n\", from, to);\n\teprintf (\"Resolve call args for 0x%08\"PFMT64x\"\\n\", to);\n\n\t// emulate\n\t// XXX do not use commands, here, just use the api\n\tr_core_cmd0 (core, \"aeim\"); // XXX\n\tut64 off = core->offset;\n\tfor (at = from; at < to ; at++) {\n\t\tr_core_cmdf (core, \"aepc 0x%08\"PFMT64x, at);\n\t\tr_core_cmd0 (core, \"aeso\");\n\t\tr_core_seek (core, at, true);\n\t\tint delta = r_num_get (core->num, \"$l\");\n\t\tif (delta < 1) {\n\t\t\tbreak;\n\t\t}\n\t\tat += delta - 1;\n\t}\n\tr_core_seek (core, off, true);\n\n\t// the logic of identifying args by function types and\n\t// show json format and arg name goes into arA\n\tr_core_cmd0 (core, \"arA\");\n#if 0\n\t// get results\n\tconst char *fcn_type = r_type_func_ret (core->anal->sdb_types, fcn->name);\n\tconst char *key = resolve_fcn_name (core->anal, fcn->name);\n\tRList *list = r_core_get_func_args (core, key);\n\tif (!r_list_empty (list)) {\n\t\teprintf (\"HAS signature\\n\");\n\t}\n\tint i, nargs = 3; // r_type_func_args_count (core->anal->sdb_types, fcn->name);\n\tif (nargs > 0) {\n\t\tint i;\n\t\teprintf (\"NARGS %d (%s)\\n\", nargs, key);\n\t\tfor (i = 0; i < nargs; i++) {\n\t\t\tut64 v = r_debug_arg_get (core->dbg, \"reg\", i);\n\t\t\teprintf (\"arg: 0x%08\"PFMT64x\"\\n\", v);\n\t\t}\n\t}\n#endif\n}\n\nstatic void __core_anal_appcall(RCore *core, const char *input) {\n//\tr_reg_arena_push (core->dbg->reg);\n\tRListIter *iter;\n\tchar *arg;\n\tchar *inp = strdup (input);\n\tRList *args = r_str_split_list (inp, \" \", 0);\n\tint i = 0;\n\tr_list_foreach (args, iter, arg) {\n\t\tconst char *alias = sdb_fmt (\"A%d\", i);\n\t\tr_reg_setv (core->anal->reg, alias, r_num_math (core->num, arg));\n\t\ti++;\n\t}\n\tut64 sp = r_reg_getv (core->anal->reg, \"SP\");\n\tr_reg_setv (core->anal->reg, \"SP\", 0);\n\n\tr_reg_setv (core->anal->reg, \"PC\", core->offset);\n\tr_core_cmd0 (core, \"aesu 0\");\n\n\tr_reg_setv (core->anal->reg, \"SP\", sp);\n\tfree (inp);\n\n//\tr_reg_arena_pop (core->dbg->reg);\n}\n\nstatic void cmd_debug_stack_init(RCore *core, int argc, char **argv, char **envp) {\n\t// TODO: add support for 32 bit\n\tRBuffer *b = r_buf_new ();\n\tut64 sp = core->offset;\n\tint i;\n\tut64 dyld_call_from = UT64_MAX;\n\tr_buf_append_ut64 (b, dyld_call_from);\n\tr_buf_append_ut64 (b, 0); // rbp\n\tr_buf_append_ut64 (b, argc); // rbp\n\tint envp_count = 0;\n\tfor (i = 0; envp[i]; i++) {\n\t\tenvp_count++;\n\t}\n\tut64 strp = sp + 40 + (argc * 8) + (envp_count * 8);\n\t// pointer table\n\tfor (i = 0; i < argc && argv[i]; i++) {\n\t\tr_buf_append_ut64 (b, strp);\n\t\tstrp += strlen (argv[i]) + 1;\n\t}\n\tr_buf_append_ut64 (b, 0);\n\tfor (i = 0; i < envp_count; i++) {\n\t\tr_buf_append_ut64 (b, strp);\n\t\tstrp += strlen (envp[i]) + 1;\n\t}\n\tr_buf_append_ut64 (b, 0);\n\t// string table\n\tfor (i = 0; i < argc && argv[i]; i++) {\n\t\tr_buf_append_string (b, argv[i]);\n\t\tr_buf_append_ut8 (b, 0);\n\t}\n\tfor (i = 0; i < envp_count; i++) {\n\t\tr_buf_append_string (b, envp[i]);\n\t\tr_buf_append_ut8 (b, 0);\n\t}\n\tint slen;\n\tut8 *s = r_buf_read_all (b, &slen);\n\tchar *x = r_hex_bin2strdup (s, slen);\n\tr_cons_printf (\"wx %s\\n\", x);\n\tfree (x);\n\tfree (s);\n\tr_buf_free (b);\n}\n\nR_IPI int core_type_by_addr(RCore *core, ut64 addr) {\n\tconst RList *list = r_flag_get_list (core->flags, addr);\n\tRListIter *iter;\n\tRFlagItem *item;\n\tbool has_flag = false;\n\tint type = R_ANAL_REF_TYPE_DATA;\n\tr_list_foreach (list, iter, item) {\n\t\tif (item && strchr (item->name, '.')) {\n\t\t\tif (r_str_startswith (item->name, \"str\")) {\n\t\t\t\ttype = R_ANAL_REF_TYPE_STRING;\n\t\t\t}\n\t\t\t////  r_anal_xrefs_set (core->anal, *val, esil->address, type);\n\t\t\thas_flag = true;\n\t\t}\n\t}\n\tif (!has_flag) {\n\t\treturn -1;\n\t}\n\treturn type;\n}\n\nstatic bool regwrite_hook(RAnalEsil *esil, const char *name, ut64 *val) {\n\tRCore *core = esil->user;\n\tint type = core_type_by_addr (core, *val);\n\tif (type != -1) {\n\t\tr_anal_xrefs_set (core->anal, esil->address, *val, type);\n\t}\n\treturn false;\n}\n\nstatic void __anal_esil_function(RCore *core, ut64 addr) {\n\tRListIter *iter;\n\tRAnalBlock *bb;\n\tif (!core->anal->esil) {\n\t\tr_core_cmd0 (core, \"aei\");\n\t\tr_core_cmd0 (core, \"aeim\");\n\t}\n\tvoid *u = core->anal->esil->user;\n\tcore->anal->esil->user = core;\n\tvoid *p = core->anal->esil->cb.hook_reg_write;\n\tcore->anal->esil->cb.hook_reg_write = regwrite_hook;\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal,\n\t\t\taddr, R_ANAL_FCN_TYPE_FCN | R_ANAL_FCN_TYPE_SYM);\n\tif (fcn) {\n\t\tbool anal_verbose = r_config_get_b (core->config, \"anal.verbose\");\n\t\t// emulate every instruction in the function recursively across all the basic blocks\n\t\tr_list_foreach (fcn->bbs, iter, bb) {\n\t\t\tut64 pc = bb->addr;\n\t\t\tut64 end = bb->addr + bb->size;\n\t\t\tRAnalOp op;\n\t\t\tint ret, bbs = end - pc;\n\t\t\tif (bbs < 1 || bbs > 0xfffff || pc >= end) {\n\t\t\t\teprintf (\"Invalid block size\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t// eprintf (\"[*] Emulating 0x%08\"PFMT64x\" basic block 0x%08\" PFMT64x \" - 0x%08\" PFMT64x \"\\r[\", fcn->addr, pc, end);\n\t\t\tut8 *buf = calloc (1, bbs + 1);\n\t\t\tif (!buf) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t// const char *pcname = r_reg_get_name (core->dbg->reg, R_REG_NAME_PC);\n\t\t\tr_io_read_at (core->io, pc, buf, bbs);\n\t\t\tint left;\n\t\t\twhile (pc < end) {\n\t\t\t\tleft = R_MIN (end - pc, 32);\n\t\t\t\t// r_asm_set_pc (core->rasm, pc);\n\t\t\t\tret = r_anal_op (core->anal, &op, pc, buf + pc - bb->addr, left, R_ANAL_OP_MASK_HINT | R_ANAL_OP_MASK_ESIL| R_ANAL_OP_MASK_DISASM); // read overflow\n\t\t\t\tif (ret) {\n\t\t\t\t\tbool opskip = false;\n#if 0\n\t\t\t\t\tswitch (op.type) {\n\t\t\t\t\tcase R_ANAL_OP_TYPE_JMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_NOP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_CJMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_UJMP:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_CALL:\n\t\t\t\t\tcase R_ANAL_OP_TYPE_RET:\n\t\t\t\t\t\topskip = true;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n#endif\n\t\t\t\t\tif (!opskip) {\n\t\t\t\t\t\tconst char *esilstr = R_STRBUF_SAFEGET (&op.esil);\n\t\t\t\t\t\t// eprintf (\"0x%08\"PFMT64x\"  %s\\n\", pc, op.mnemonic);\n\t\t\t\t\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\t\t\t\t\tr_anal_esil_set_pc (core->anal->esil, pc);\n\t\t\t\t\t\t\tr_anal_esil_parse (core->anal->esil, esilstr);\n\t\t\t\t\t\t\tif (anal_verbose) {\n\t\t\t\t\t\t\t\tr_anal_esil_dumpstack (core->anal->esil);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\tr_anal_esil_stack_free (core->anal->esil);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tpc += op.size;\n\t\t\t\t} else {\n\t\t\t\t\tpc += 4; // XXX\n\t\t\t\t}\n\t\t\t\tr_anal_op_fini (&op);\n\t\t\t}\n\t\t\tfree (buf);\n\t\t}\n\t} else {\n\t\teprintf (\"Cannot find function at 0x%08\" PFMT64x \"\\n\", addr);\n\t}\n\tcore->anal->esil->cb.hook_reg_write = p;\n\tcore->anal->esil->user = u;\n#if 0\n\tr_anal_esil_free (core->anal->esil);\n\tcore->anal->esil = NULL;\n#endif\n}\n\nstatic void print_esil_dfg_as_commands(RCore *core, RAnalEsilDFG *dfg) {\n\tRListIter *iter, *ator;\n\tRGraphNode *node, *edon;\n\tRStrBuf *sb = r_strbuf_new (\"\");\n\tif (!sb) {\n\t\treturn;\n\t}\n\tr_cons_println (\"ag-\");\n\tr_list_foreach (r_graph_get_nodes (dfg->flow), iter, node) {\n\t\tconst RAnalEsilDFGNode *enode = (RAnalEsilDFGNode *)node->data;\n\t\tchar *esc_str = r_str_escape (r_strbuf_get (enode->content));\n\t\tif (!esc_str) {\n\t\t\tr_strbuf_free (sb);\n\t\t\treturn;\n\t\t}\n\t\tr_strbuf_set (sb, esc_str);\n\t\tif (enode->type == R_ANAL_ESIL_DFG_BLOCK_GENERATIVE) {\n\t\t\tr_strbuf_prepend (sb, \"generative:\");\n\t\t}\n\t\tchar *b64_buf = r_base64_encode_dyn (r_strbuf_get (sb), sb->len);\n\t\tif (!b64_buf) {\n\t\t\tr_strbuf_free (sb);\n\t\t\tfree (esc_str);\n\t\t\treturn;\n\t\t}\n\n\t\tr_cons_printf (\"agn %d base64:%s\\n\", enode->idx, b64_buf);\n\t\tfree (b64_buf);\n\t\tfree (esc_str);\n\t}\n\tr_strbuf_free (sb);\n\n\tr_list_foreach (r_graph_get_nodes (dfg->flow), iter, node) {\n\t\tconst RAnalEsilDFGNode *enode = (RAnalEsilDFGNode *)node->data;\n\t\tr_list_foreach (r_graph_get_neighbours (dfg->flow, node), ator, edon) {\n\t\t\tconst RAnalEsilDFGNode *edone = (RAnalEsilDFGNode *)edon->data;\n\t\t\tr_cons_printf (\"age %d %d\\n\", enode->idx, edone->idx);\n\t\t}\n\t}\n}\n\nstatic void cmd_aeg(RCore *core, int argc, char *argv[]) {\n\tif (argc == 0) {\n\t\tr_core_cmd0 (core, \".aeg*;agg\");\n\t\treturn;\n\t}\n\tif ((argc == 1) && !argv[0][0]) {\t// \"aeg\"\n\t\tRAnalEsilDFG *dfg = r_anal_esil_dfg_expr (core->anal, NULL, argv[0]);\n\t\tr_return_if_fail (dfg);\n\t\tprint_esil_dfg_as_commands (core, dfg);\n\t\tr_anal_esil_dfg_free (dfg);\n\t\treturn;\n\t}\n\tswitch (argv[0][0]) {\n\tcase '*':\t// \"aeg*\"\n\t{\n\t\tRAnalOp *aop = r_core_anal_op (core, core->offset, R_ANAL_OP_MASK_ESIL);\n\t\tif (!aop) {\n\t\t\treturn;\n\t\t}\n\t\tconst char *esilstr = r_strbuf_get (&aop->esil);\n\t\tif (R_STR_ISNOTEMPTY (esilstr)) {\n\t\t\tRAnalEsilDFG *dfg = r_anal_esil_dfg_expr (core->anal, NULL, esilstr);\n\t\t\tif (!dfg) {\n\t\t\t\tr_anal_op_free (aop);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tprint_esil_dfg_as_commands (core, dfg);\n\t\t\tr_anal_esil_dfg_free (dfg);\n\t\t}\n\t}\n\tbreak;\n\tcase 'i':\t// \"aegi\"\n\tcase 'v':\t// \"aegv\"\n\t{\n\t\tRConfigHold *hc = r_config_hold_new (core->config);\n\t\tif (!hc) {\n\t\t\treturn;\n\t\t}\n\t\tr_config_hold (hc, \"cmd.gprompt\",  NULL);\n\t\tr_config_set (core->config, \"cmd.gprompt\", \"pi 1\");\n\t\tr_core_cmd0 (core, \".aeg*;aggv\");\n\t\tr_config_hold_free (hc);\n\t}\n\tbreak;\n\tcase 'f':\t// \"aegf\"\n\t{\n\t\tRStrBuf *filtered = r_anal_esil_dfg_filter_expr (core->anal, argv[1], argv[2]);\n\t\tif (filtered) {\n\t\t\tr_cons_printf (\"%s\\n\", r_strbuf_get (filtered));\n\t\t\tr_strbuf_free (filtered);\n\t\t}\n\t}\n\tbreak;\n\tcase 'c':\t// \"aegc\"\n\t{\n\t\tRAnalEsilDFG *dfg = r_anal_esil_dfg_expr (core->anal, NULL, argv[1]);\n\t\tif (!dfg) {\n\t\t\treturn;\n\t\t}\n\t\tr_anal_esil_dfg_fold_const (core->anal, dfg);\n\t\tif (argv[0][1] == 'f') {\t// \"aegcf\"\n\t\t\tRStrBuf *filtered = r_anal_esil_dfg_filter (dfg, argv[2]);\n\t\t\tif (filtered) {\n\t\t\t\tr_cons_printf (\"%s\\n\", r_strbuf_get (filtered));\n\t\t\t\tr_strbuf_free (filtered);\n\t\t\t}\n\t\t} else {\n\t\t\tprint_esil_dfg_as_commands (core, dfg);\n\t\t}\n\t\tr_anal_esil_dfg_free (dfg);\n\t}\n\tbreak;\n\tcase '?':\t// \"aeg?\"\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_aeg);\n\t}\n}\n\nstatic void cmd_anal_esil(RCore *core, const char *input) {\n\tRAnalEsil *esil = core->anal->esil;\n\tut64 addr = core->offset;\n\tut64 adr ;\n\tchar *n, *n1;\n\tint off;\n\tint stacksize = r_config_get_i (core->config, \"esil.stack.depth\");\n\tint iotrap = r_config_get_i (core->config, \"esil.iotrap\");\n\tint romem = r_config_get_i (core->config, \"esil.romem\");\n\tint stats = r_config_get_i (core->config, \"esil.stats\");\n\tbool nonull = r_config_get_b (core->config, \"esil.nonull\");\n\tut64 until_addr = UT64_MAX;\n\tunsigned int addrsize = r_config_get_i (core->config, \"esil.addr.size\");\n\n\tconst char *until_expr = NULL;\n\tRAnalOp *op = NULL;\n\n\tswitch (input[0]) {\n\tcase 'v': // \"aev\"\n\t\tr_core_visual_esil (core, r_str_trim_head_ro (input + 1));\n\t\tbreak;\n\tcase 'p': // \"aep\"\n\t\tswitch (input[1]) {\n\t\tcase 'c': // \"aepc\"\n\t\t\tif (input[2] == ' ' || input[2] == '=') {\n\t\t\t\t// seek to this address\n\t\t\t\tr_core_cmdf (core, \"ar PC=%s\", r_str_trim_head_ro (input + 3));\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t} else {\n\t\t\t\teprintf (\"Missing argument\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '*':\n\t\tcase 0:\n\t\t\tr_anal_pin_list (core->anal);\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tif (input[2] == '*') {\n\t\t\t\tr_anal_pin_init (core->anal);\n\t\t\t} else {\n\t\t\t\tif (input[2]) {\n\t\t\t\t\taddr = r_num_math (core->num, input + 2);\n\t\t\t\t}\n\t\t\t\tr_anal_pin_unset (core->anal, addr);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase ' ':\n\t\t\tr_anal_pin (core->anal, addr, input + 2);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_aep);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'r': // \"aer\"\n\t\t// 'aer' is an alias for 'ar'\n\t\tcmd_anal_reg (core, input + 1);\n\t\tbreak;\n\tcase '*':\n\t\t// XXX: this is wip, not working atm\n\t\tif (core->anal->esil) {\n\t\t\tr_cons_printf (\"trap: %d\\n\", core->anal->esil->trap);\n\t\t\tr_cons_printf (\"trap-code: %d\\n\", core->anal->esil->trap_code);\n\t\t} else {\n\t\t\teprintf (\"esil vm not initialized. run `aei`\\n\");\n\t\t}\n\t\tbreak;\n\tcase ' ':\n\t\t//r_anal_esil_eval (core->anal, input+1);\n\t\tif (!esil && !(core->anal->esil = esil = r_anal_esil_new (stacksize, iotrap, addrsize))) {\n\t\t\treturn;\n\t\t}\n\t\tr_anal_esil_setup (esil, core->anal, romem, stats, nonull); // setup io\n\t\tr_anal_esil_set_pc (esil, core->offset);\n\t\tr_anal_esil_parse (esil, input + 1);\n\t\tr_anal_esil_dumpstack (esil);\n\t\tr_anal_esil_stack_free (esil);\n\t\tbreak;\n\tcase 's': // \"aes\"\n\t\t// \"aes\" \"aeso\" \"aesu\" \"aesue\"\n\t\t// aes -> single step\n\t\t// aesb -> single step back\n\t\t// aeso -> single step over\n\t\t// aesu -> until address\n\t\t// aesue -> until esil expression\n\t\tswitch (input[1]) {\n\t\tcase '?':\n\t\t\tr_core_cmd0 (core, \"ae?~aes\");\n\t\t\tbreak;\n\t\tcase 'l': // \"aesl\"\n\t\t{\n\t\t\tut64 pc = r_debug_reg_get (core->dbg, \"PC\");\n\t\t\tRAnalOp *op = r_core_anal_op (core, pc, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT);\n\t\t\t// TODO: honor hint\n\t\t\tif (!op) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_core_esil_step (core, UT64_MAX, NULL, NULL, false);\n\t\t\tr_debug_reg_set (core->dbg, \"PC\", pc + op->size);\n\t\t\tr_anal_esil_set_pc (esil, pc + op->size);\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tr_anal_op_free (op);\n\t\t} break;\n\t\tcase 'b': // \"aesb\"\n\t\t\tif (!r_core_esil_step_back (core)) {\n\t\t\t\teprintf (\"cannnot step back\\n\");\n\t\t\t}\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tbreak;\n\t\tcase 'B': // \"aesB\"\n\t\t\t{\n\t\t\tn = strchr (input + 2, ' ');\n\t\t\tchar *n2 = NULL;\n\t\t\tif (n) {\n\t\t\t\tn = (char *)r_str_trim_head_ro (n + 1);\n\t\t\t}\n\t\t\tif (n) {\n\t\t\t\tn2 = strchr (n, ' ');\n\t\t\t\tif (n2) {\n\t\t\t\t\t*n2++ = 0;\n\t\t\t\t}\n\t\t\t\tut64 off = r_num_math (core->num, n);\n\t\t\t\tut64 nth = n2? r_num_math (core->num, n2): 1;\n\t\t\t\tcmd_aespc (core, core->offset, off, (int)nth);\n\t\t\t} else {\n\t\t\t\teprintf (\"Usage: aesB [until-addr] [nth-opcodes] @ [from-addr]\\n\");\n\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'u': // \"aesu\"\n\t\t\tuntil_expr = NULL;\n\t\t\tuntil_addr = UT64_MAX;\n\t\t\tif (r_str_endswith (input, \"?\")) {\n\t\t\t\tr_core_cmd0 (core, \"ae?~aesu\");\n\t\t\t} else switch (input[2]) {\n\t\t\tcase 'e': // \"aesue\"\n\t\t\t\tuntil_expr = input + 3;\n\t\t\t\tbreak;\n\t\t\tcase ' ': // \"aesu\"\n\t\t\t\tuntil_addr = r_num_math (core->num, input + 2);\n\t\t\t\tbreak;\n\t\t\tcase 'o': // \"aesuo\"\n\t\t\t\tstep_until_optype (core, r_str_trim_head_ro (input + 3));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tr_core_cmd0 (core, \"ae?~aesu\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (until_expr || until_addr != UT64_MAX) {\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\t}\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tbreak;\n\t\tcase 's': // \"aess\"\n\t\t\tif (input[2] == 'u') { // \"aessu\"\n\t\t\t\tif (input[3] == 'e') {\n\t\t\t\t\tuntil_expr = input + 3;\n\t\t\t\t} else {\n\t\t\t\t\tuntil_addr = r_num_math (core->num, input + 2);\n\t\t\t\t}\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, true);\n\t\t\t} else {\n\t\t\t\tr_core_esil_step (core, UT64_MAX, NULL, NULL, true);\n\t\t\t}\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tbreak;\n\t\tcase 'o': // \"aeso\"\n\t\t\tif (input[2] == 'u') { // \"aesou\"\n\t\t\t\tif (input[3] == 'e') {\n\t\t\t\t\tuntil_expr = input + 3;\n\t\t\t\t} else {\n\t\t\t\t\tuntil_addr = r_num_math (core->num, input + 2);\n\t\t\t\t}\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, true);\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t} else if (!input[2] || input[2] == ' ') { // \"aeso [addr]\"\n\t\t\t\t// step over\n\t\t\t\top = r_core_anal_op (core, r_reg_getv (core->anal->reg,\n\t\t\t\t\tr_reg_get_name (core->anal->reg, R_REG_NAME_PC)), R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT);\n\t\t\t\tif (op && op->type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t\t\tuntil_addr = op->addr + op->size;\n\t\t\t\t}\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t} else {\n\t\t\t\teprintf (\"Usage: aesou [addr] # step over until given address\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'p': //\"aesp\"\n\t\t\tn = strchr (input, ' ');\n\t\t\tn1 = n ? strchr (n + 1, ' ') : NULL;\n\t\t\tif ((!n || !n1) || (!(n + 1) || !(n1 + 1))) {\n\t\t\t\teprintf (\"aesp [offset] [num]\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tadr = r_num_math (core->num, n + 1);\n\t\t\toff = r_num_math (core->num, n1 + 1);\n\t\t\tcmd_aespc (core, adr, -1, off);\n\t\t\tbreak;\n\t\tcase ' ':\n\t\t\tn = strchr (input, ' ');\n\t\t\tif (!(n + 1)) {\n\t\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\toff = r_num_math (core->num, n + 1);\n\t\t\tcmd_aespc (core, -1, -1, off);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'C': // \"aeC\"\n\t\tif (input[1] == '?') { // \"aec?\"\n\t\t\tr_core_cmd_help (core, help_msg_aeC);\n\t\t} else {\n\t\t\t__core_anal_appcall (core, r_str_trim_head_ro (input + 1));\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"aec\"\n\t\tif (input[1] == '?') { // \"aec?\"\n\t\t\tr_core_cmd_help (core, help_msg_aec);\n\t\t} else if (input[1] == 's') { // \"aecs\"\n\t\t\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\t\t\tfor (;;) {\n\t\t\t\tif (!r_core_esil_step (core, UT64_MAX, NULL, NULL, false)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t\taddr = r_num_get (core->num, pc);\n\t\t\t\top = r_core_anal_op (core, addr, R_ANAL_OP_MASK_BASIC | R_ANAL_OP_MASK_HINT);\n\t\t\t\tif (!op) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (op->type == R_ANAL_OP_TYPE_SWI) {\n\t\t\t\t\teprintf (\"syscall at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\t\t\tbreak;\n\t\t\t\t} else if (op->type == R_ANAL_OP_TYPE_TRAP) {\n\t\t\t\t\teprintf (\"trap at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\top = NULL;\n\t\t\t\tif (core->anal->esil->trap || core->anal->esil->trap_code) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (op) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\top = NULL;\n\t\t\t}\n\t\t} else if (input[1] == 'c') { // \"aecc\"\n\t\t\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\t\t\tfor (;;) {\n\t\t\t\tif (!r_core_esil_step (core, UT64_MAX, NULL, NULL, false)) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t\t\taddr = r_num_get (core->num, pc);\n\t\t\t\top = r_core_anal_op (core, addr, R_ANAL_OP_MASK_BASIC);\n\t\t\t\tif (!op) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (op->type == R_ANAL_OP_TYPE_CALL || op->type == R_ANAL_OP_TYPE_UCALL) {\n\t\t\t\t\teprintf (\"call at 0x%08\" PFMT64x \"\\n\", addr);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_anal_op_free (op);\n\t\t\t\top = NULL;\n\t\t\t\tif (core->anal->esil->trap || core->anal->esil->trap_code) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (op) {\n\t\t\t\tr_anal_op_free (op);\n\t\t\t}\n\t\t} else {\n\t\t\t// \"aec\"  -> continue until ^C\n\t\t\t// \"aecu\" -> until address\n\t\t\t// \"aecue\" -> until esil expression\n\t\t\tif (input[1] == 'u' && input[2] == 'e') {\n\t\t\t\tuntil_expr = input + 3;\n\t\t\t} else if (input[1] == 'u') {\n\t\t\t\tuntil_addr = r_num_math (core->num, input + 2);\n\t\t\t} else {\n\t\t\t\tuntil_expr = \"0\";\n\t\t\t}\n\t\t\tr_core_esil_step (core, until_addr, until_expr, NULL, false);\n\t\t\tr_core_cmd0 (core, \".ar*\");\n\t\t}\n\t\tbreak;\n\tcase 'i': // \"aei\"\n\t\tswitch (input[1]) {\n\t\tcase 's': // \"aeis\"\n\t\t\t{\n\t\t\t\tchar *arg = r_str_trim_dup (input + 2);\n\t\t\t\tRList *args = r_str_split_list (arg, \" \", 0);\n\t\t\t\tint i, argc = atoi (r_list_pop_head (args));\n\t\t\t\tif (argc < 1) {\n\t\t\t\t\tr_core_cmd_help (core, help_msg_aei);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tchar **argv = calloc (argc + 1, sizeof (void *));\n\t\t\t\tfor (i = 0; i < argc; i++) {\n\t\t\t\t\tchar *arg = r_list_pop_head (args);\n\t\t\t\t\tif (!arg) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\targv[i] = arg;\n\t\t\t\t}\n\t\t\t\targv[i] = 0;\n\t\t\t\tchar **envp = calloc (r_list_length (args) + 1, sizeof (void *));\n\t\t\t\tfor (i = 0; ; i++) {\n\t\t\t\t\tchar *arg = r_list_pop_head (args);\n\t\t\t\t\tif (!arg) {\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\tenvp[i] = arg;\n\t\t\t\t}\n\t\t\t\tenvp[i] = 0;\n#if __UNIX__\n\t\t\t\tif (strstr (input, \"$env\")) {\n\t\t\t\t\textern char **environ;\n\t\t\t\t\tcmd_debug_stack_init (core, argc, argv, environ);\n\t\t\t\t} else {\n\t\t\t\t\tcmd_debug_stack_init (core, argc, argv, envp);\n\t\t\t\t}\n#else\n\t\t\t\tcmd_debug_stack_init (core, argc, argv, envp);\n#endif\n\t\t\t\tfree (arg);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'm': // \"aeim\"\n\t\t\tcmd_esil_mem (core, input + 2);\n\t\t\tbreak;\n\t\tcase 'p': // \"aeip\" // initialize pc = $$\n\t\t\tr_core_cmd0 (core, \"ar PC=$$\");\n\t\t\tbreak;\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_aei);\n\t\t\tcmd_esil_mem (core, \"?\");\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tif (esil) {\n\t\t\t\tsdb_reset (esil->stats);\n\t\t\t}\n\t\t\tr_anal_esil_free (esil);\n\t\t\tcore->anal->esil = NULL;\n\t\t\tbreak;\n\t\tcase 0: //lolololol\n\t\t\tr_anal_esil_free (esil);\n\t\t\t// reinitialize\n\t\t\t{\n\t\t\t\tconst char *pc = r_reg_get_name (core->anal->reg, R_REG_NAME_PC);\n\t\t\t\tif (pc && r_reg_getv (core->anal->reg, pc) == 0LL) {\n\t\t\t\t\tr_core_cmd0 (core, \"ar PC=$$\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!(esil = core->anal->esil = r_anal_esil_new (stacksize, iotrap, addrsize))) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tr_anal_esil_setup (esil, core->anal, romem, stats, nonull); // setup io\n\t\t\tesil->verbose = (int)r_config_get_i (core->config, \"esil.verbose\");\n\t\t\t/* restore user settings for interrupt handling */\n\t\t\t{\n\t\t\t\tconst char *s = r_config_get (core->config, \"cmd.esil.intr\");\n\t\t\t\tif (s) {\n\t\t\t\t\tchar *my = strdup (s);\n\t\t\t\t\tif (my) {\n\t\t\t\t\t\tr_config_set (core->config, \"cmd.esil.intr\", my);\n\t\t\t\t\t\tfree (my);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tcmd_esil_mem (core, \"?\");\n\t\t\tbreak;\n\n\t\t}\n\t\tbreak;\n\tcase 'k': // \"aek\"\n\t\tswitch (input[1]) {\n\t\tcase '\\0':\n\t\t\tinput = \"123*\";\n\t\t\t/* fall through */\n\t\tcase ' ':\n\t\t\tif (esil && esil->stats) {\n\t\t\t\tchar *out = sdb_querys (esil->stats, NULL, 0, input + 2);\n\t\t\t\tif (out) {\n\t\t\t\t\tr_cons_println (out);\n\t\t\t\t\tfree (out);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"esil.stats is empty. Run 'aei'\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\tcase '-':\n\t\t\tif (esil) {\n\t\t\t\tsdb_reset (esil->stats);\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'L': // aeL commands\n\t\t{\n\t\t\tRAnalEsilPlugin *p;\n\t\t\tRListIter *iter;\n\t\t\tr_list_foreach (core->anal->esil_plugins, iter, p) {\n\t\t\t\tr_cons_printf (\"%s\\n\", p->name);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'g': // \"aeg\"\n\t\t{\n\t\t\tint argc;\n\t\t\tchar **argv = r_str_argv (&input[1], &argc);\n\t\t\tr_return_if_fail (argv);\n\t\t\tcmd_aeg (core, argc, argv);\n\t\t\tint i;\n\t\t\tfor (i = 0; i < argc; i++) {\n\t\t\t\tfree (argv[i]);\n\t\t\t}\n\t\t\tfree (argv);\n\t\t}\n\t\tbreak;\n\tcase 'b': // \"aeb\"\n\t\t// ab~ninstr[1]\n\t\tr_core_cmdf (core, \"aesp `ab~addr[1]` `ab~ninstr[1]`\");\n\t\tbreak;\n\tcase 'f': // \"aef\"\n\t\tif (input[1] == 'a') { // \"aefa\"\n\t\t\tr_anal_aefa (core, r_str_trim_head_ro (input + 2));\n\t\t} else { // This should be aefb -> because its emulating all the bbs\n\t\t\t// anal ESIL to REIL.\n\t\t\t__anal_esil_function (core, core->offset);\n\t\t} break;\n\tcase 't': // \"aet\"\n\t\tswitch (input[1]) {\n\t\tcase 's': // \"aets\"\n\t\t\tswitch (input[2]) {\n\t\t\tcase '+': // \"aets+\"\n\t\t\t\tif (!esil) {\n\t\t\t\t\teprintf (\"Error: ESIL is not initialized. Use `aeim` first.\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (esil->trace) {\n\t\t\t\t\teprintf (\"ESIL trace already started\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tesil->trace = r_anal_esil_trace_new (esil);\n\t\t\t\tif (!esil->trace) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_config_set_i (core->config, \"dbg.trace\", true);\n\t\t\t\tbreak;\n\t\t\tcase '-': // \"aets-\"\n\t\t\t\tif (!esil) {\n\t\t\t\t\teprintf (\"Error: ESIL is not initialized. Use `aeim` first.\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!esil->trace) {\n\t\t\t\t\teprintf (\"No ESIL trace started\\n\");\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_anal_esil_trace_free (esil->trace);\n\t\t\t\tesil->trace = NULL;\n\t\t\t\tr_config_set_i (core->config, \"dbg.trace\", false);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tr_core_cmd_help (core, help_msg_aets);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\teprintf (\"Unknown command. Use `aetr`.\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'A': // \"aeA\"\n\t\tswitch (input[1]){\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_aea);\n\t\t\tbreak;\n\t\tcase 'r':\n\t\t\tcmd_aea (core, 1 + (1<<1), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'w':\n\t\t\tcmd_aea (core, 1 + (1<<2), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tcmd_aea (core, 1 + (1<<3), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'j':\n\t\t\tcmd_aea (core, 1 + (1<<4), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tcmd_aea (core, 1 + (1<<5), core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'f': {\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\t\tif (fcn) {\n\t\t\t\tcmd_aea (core, 1, r_anal_function_min_addr (fcn), r_anal_function_linear_size (fcn));\n\t\t\t}\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault:\n\t\t\tcmd_aea (core, 1, core->offset, (int)r_num_math (core->num, input[1]?input+2:input+1));\n\t\t}\n\t\tbreak;\n\tcase 'a': {// \"aea\"\n\t\tRReg *reg = core->anal->reg;\n\t\tut64 pc = r_reg_getv (reg, \"PC\");\n\t\tRAnalOp *op = r_core_anal_op (core, pc, 0);\n\t\tif (!op) {\n\t\t\tbreak;\n\t\t}\n\t\tut64 newPC = core->offset + op->size;\n\t\tr_reg_setv (reg, \"PC\", newPC);\n\t\tswitch (input[1]) {\n\t\tcase '?':\n\t\t\tr_core_cmd_help (core, help_msg_aea);\n\t\t\tbreak;\n\t\tcase 'r':\n\t\t\tcmd_aea (core, 1<<1, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'w':\n\t\t\tcmd_aea (core, 1<<2, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'n':\n\t\t\tcmd_aea (core, 1<<3, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'j':\n\t\t\tcmd_aea (core, 1<<4, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tcmd_aea (core, 1<<5, core->offset, r_num_math (core->num, input+2));\n\t\t\tbreak;\n\t\tcase 'B': { // \"aeaB\"\n\t\t\tbool json = input[2] == 'j';\n\t\t\tint a = json? 3: 2;\n\t\t\tut64 addr = (input[a] == ' ')? r_num_math (core->num, input + a): core->offset;\n\t\t\tRList *l = r_anal_get_blocks_in (core->anal, addr);\n\t\t\tRAnalBlock *b;\n\t\t\tRListIter *iter;\n\t\t\tr_list_foreach (l, iter, b) {\n\t\t\t\tint mode = json? (1<<4): 1;\n\t\t\t\tcmd_aea (core, mode, b->addr, b->size);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\tcase 'f': { // \"aeaf\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, -1);\n\t\t\tif (fcn) {\n\t\t\t\tswitch (input[2]) {\n\t\t\t\tcase 'j': // \"aeafj\"\n\t\t\t\t\tcmd_aea (core, 1<<4, r_anal_function_min_addr (fcn), r_anal_function_linear_size (fcn));\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcmd_aea (core, 1, r_anal_function_min_addr (fcn), r_anal_function_linear_size (fcn));\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tcase 'b': { // \"aeab\"\n\t\t\tRAnalBlock *bb = r_anal_bb_from_offset (core->anal, core->offset);\n\t\t\tif (bb) {\n\t\t\t\tswitch (input[2]) {\n\t\t\t\tcase 'j': // \"aeabj\"\n\t\t\t\t\tcmd_aea (core, 1<<4, bb->addr, bb->size);\n\t\t\t\t\tbreak;\n\t\t\t\tdefault:\n\t\t\t\t\tcmd_aea (core, 1, bb->addr, bb->size);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t}\n\t\tdefault: {\n\t\t\tconst char *arg = input[1]? input + 2: \"\";\n\t\t\tut64 len = r_num_math (core->num, arg);\n\t\t\tcmd_aea (core, 0, core->offset, len);\n\t\t\t}\n\t\t}\n\t\tr_reg_setv (reg, \"PC\", pc);\n\t\tbreak;\n\t}\n\tcase 'x': { // \"aex\"\n\t\tchar *hex;\n\t\tint ret, bufsz;\n\n\t\tinput = r_str_trim_head_ro (input + 1);\n\t\thex = strdup (input);\n\t\tif (!hex) {\n\t\t\tbreak;\n\t\t}\n\n\t\tRAnalOp aop = R_EMPTY;\n\t\tbufsz = r_hex_str2bin (hex, (ut8*)hex);\n\t\tret = r_anal_op (core->anal, &aop, core->offset,\n\t\t\t(const ut8*)hex, bufsz, R_ANAL_OP_MASK_ESIL);\n\t\tif (ret>0) {\n\t\t\tconst char *str = R_STRBUF_SAFEGET (&aop.esil);\n\t\t\tchar *str2 = r_str_newf (\" %s\", str);\n\t\t\tcmd_anal_esil (core, str2);\n\t\t\tfree (str2);\n\t\t}\n\t\tr_anal_op_fini (&aop);\n\t\tbreak;\n\t}\n\tcase '?': // \"ae?\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_detail_ae);\n\t\t\tbreak;\n\t\t}\n\t\t/* fallthrough */\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ae);\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_bytes(RCore *core, const char *input) {\n\tint len = core->blocksize;\n\tint tbs = len;\n\tif (input[0]) {\n\t\tlen = (int)r_num_get (core->num, input + 1);\n\t\tif (len > tbs) {\n\t\t\tr_core_block_size (core, len);\n\t\t}\n\t}\n\tcore_anal_bytes (core, core->block, len, 0, input[0]);\n\tif (tbs != core->blocksize) {\n\t\tr_core_block_size (core, tbs);\n\t}\n}\n\nstatic void cmd_anal_opcode(RCore *core, const char *input) {\n\tint l, len = core->blocksize;\n\tut32 tbs = core->blocksize;\n\tr_core_block_read (core);\n\tswitch (input[0]) {\n\tcase 's': // \"aos\"\n\tcase 'j': // \"aoj\"\n\tcase 'e': // \"aoe\"\n\tcase 'r': {\n\t\tint count = 1;\n\t\tint obs = core->blocksize;\n\t\tint fmt = input[0];\n\t\tif (input[0] == 'e' && input[1] == 'q') { // \"aoeq\"\n\t\t\tfmt = 'E'; // quiet esil\n\t\t\tinput++;\n\t\t}\n\t\tif (input[1] && input[2]) {\n\t\t\tl = (int)r_num_get (core->num, input + 1);\n\t\t\tif (l > 0) {\n\t\t\t\tcount = l;\n\t\t\t}\n\t\t\tl *= 8;\n\t\t\tif (l > obs) {\n\t\t\t\tr_core_block_size (core, l);\n\t\t\t}\n\t\t} else {\n\t\t\tcount = 1;\n\t\t}\n\t\tcore_anal_bytes (core, core->block, core->blocksize, count, fmt);\n\t\tif (obs != core->blocksize) {\n\t\t\tr_core_block_size (core, obs);\n\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'm': // \"aom\"\n\t\tif (input[1] == '?') {\n\t\t\tr_cons_printf (\"Usage: aom[ljd] [arg] .. list mnemonics for asm.arch\\n\");\n\t\t\tr_cons_printf (\". = current, l = list, d = describe, j=json)\\n\");\n\t\t} else if (input[1] == 'd') {\n\t\t\tconst int id = (input[2]==' ')\n\t\t\t\t?(int)r_num_math (core->num, input + 2): -1;\n\t\t\tchar *ops = r_asm_mnemonics (core->rasm, id, false);\n\t\t\tif (ops) {\n\t\t\t\tchar *ptr = ops;\n\t\t\t\tchar *nl = strchr (ptr, '\\n');\n\t\t\t\twhile (nl) {\n\t\t\t\t\t*nl = 0;\n\t\t\t\t\tchar *desc = r_asm_describe (core->rasm, ptr);\n\t\t\t\t\tif (desc) {\n\t\t\t\t\t\tconst char *pad = r_str_pad (' ', 16 - strlen (ptr));\n\t\t\t\t\t\tr_cons_printf (\"%s%s%s\\n\", ptr, pad, desc);\n\t\t\t\t\t\tfree (desc);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_cons_printf (\"%s\\n\", ptr);\n\t\t\t\t\t}\n\t\t\t\t\tptr = nl + 1;\n\t\t\t\t\tnl = strchr (ptr, '\\n');\n\t\t\t\t}\n\t\t\t\tfree (ops);\n\t\t\t}\n\t\t} else if (input[1] == 'l' || input[1] == '=' || input[1] == ' ' || input[1] == 'j') {\n\t\t\tif (input[1] == ' ' && !IS_DIGIT (input[2])) {\n\t\t\t\tr_cons_printf (\"%d\\n\", r_asm_mnemonics_byname (core->rasm, input + 2));\n\t\t\t} else {\n\t\t\t\tconst int id = (input[1] == ' ')\n\t\t\t\t\t?(int)r_num_math (core->num, input + 2): -1;\n\t\t\t\tchar *ops = r_asm_mnemonics (core->rasm, id, input[1] == 'j');\n\t\t\t\tif (ops) {\n\t\t\t\t\tr_cons_println (ops);\n\t\t\t\t\tfree (ops);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tr_core_cmd0 (core, \"ao~mnemonic[1]\");\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"aoc\"\n\t{\n\t\tRList *hooks;\n\t\tRListIter *iter;\n\t\tRAnalCycleHook *hook;\n\t\tchar *instr_tmp = NULL;\n\t\tint ccl = input[1]? r_num_math (core->num, &input[2]): 0; //get cycles to look for\n\t\tint cr = r_config_get_i (core->config, \"asm.cmt.right\");\n\t\tint fun = r_config_get_i (core->config, \"asm.functions\");\n\t\tint li = r_config_get_i (core->config, \"asm.lines\");\n\t\tint xr = r_config_get_i (core->config, \"asm.xrefs\");\n\n\t\tr_config_set_i (core->config, \"asm.cmt.right\", true);\n\t\tr_config_set_i (core->config, \"asm.functions\", false);\n\t\tr_config_set_i (core->config, \"asm.lines\", false);\n\t\tr_config_set_i (core->config, \"asm.xrefs\", false);\n\n\t\thooks = r_core_anal_cycles (core, ccl); //analyse\n\t\tr_cons_clear_line (1);\n\t\tr_list_foreach (hooks, iter, hook) {\n\t\t\tinstr_tmp = r_core_disassemble_instr (core, hook->addr, 1);\n\t\t\tr_cons_printf (\"After %4i cycles:\\t%s\", (ccl - hook->cycles), instr_tmp);\n\t\t\tr_cons_flush ();\n\t\t\tfree (instr_tmp);\n\t\t}\n\t\tr_list_free (hooks);\n\n\t\tr_config_set_i (core->config, \"asm.cmt.right\", cr); //reset settings\n\t\tr_config_set_i (core->config, \"asm.functions\", fun);\n\t\tr_config_set_i (core->config, \"asm.lines\", li);\n\t\tr_config_set_i (core->config, \"asm.xrefs\", xr);\n\t}\n\tbreak;\n\tcase 'd': // \"aod\"\n\t\tif (input[1] == 'a') { // \"aoda\"\n\t\t\t// list sdb database\n\t\t\tsdb_foreach (core->rasm->pair, listOpDescriptions, core);\n\t\t} else if (input[1] == 0) {\n\t\t\tint cur = R_MAX (core->print->cur, 0);\n\t\t\t// XXX: we need cmd_xxx.h (cmd_anal.h)\n\t\t\tcore_anal_bytes (core, core->block + cur, core->blocksize, 1, 'd');\n\t\t} else if (input[1] == ' ') {\n\t\t\tchar *d = r_asm_describe (core->rasm, input + 2);\n\t\t\tif (d && *d) {\n\t\t\t\tr_cons_println (d);\n\t\t\t\tfree (d);\n\t\t\t} else {\n\t\t\t\teprintf (\"Unknown mnemonic\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\teprintf (\"Use: aod[?a] ([opcode])    describe current, [given] or all mnemonics\\n\");\n\t\t}\n\t\tbreak;\n\tcase '*':\n\t\tr_core_anal_hint_list (core->anal, input[0]);\n\t\tbreak;\n\tcase 0:\n\tcase ' ': {\n\t\t\tint count = 0;\n\t\t\tif (input[0]) {\n\t\t\t\tl = (int)r_num_get (core->num, input + 1);\n\t\t\t\tif (l > 0) {\n\t\t\t\t\tcount = l;\n\t\t\t\t}\n\t\t\t\tif (l > tbs) {\n\t\t\t\t\tr_core_block_size (core, l * 4);\n\t\t\t\t\t//len = l;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlen = l = core->blocksize;\n\t\t\t\tcount = 1;\n\t\t\t}\n\t\t\tcore_anal_bytes (core, core->block, len, count, 0);\n\t\t}\n\t\tbreak;\n\tcase 'f': // \"aof\"\n\t\tif (strlen (input + 1) > 1) {\n\t\t\tRAnalOp aop = R_EMPTY;\n\t\t\tut8 data[32];\n\t\t\tr_io_read_at (core->io, core->offset, data, sizeof (data));\n\t\t\tint ret = r_anal_op (core->anal, &aop, core->offset, data, sizeof (data), R_ANAL_OP_MASK_ESIL);\n\t\t\tif (ret > 0) {\n\t\t\t\tconst char *arg = input + 2;\n\t\t\t\tconst char *expr = R_STRBUF_SAFEGET (&aop.esil);\n\t\t\t\tRStrBuf *b = r_anal_esil_dfg_filter_expr (core->anal, expr, arg);\n\t\t\t\tif (b) {\n\t\t\t\t\tchar *s = r_strbuf_drain (b);\n\t\t\t\t\tr_cons_printf (\"%s\\n\", s);\n\t\t\t\t\tfree (s);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"Warning: Unable to analyze instruction\\n\");\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tdefault:\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_ao);\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_jumps(RCore *core, const char *input) {\n\tr_core_cmdf (core, \"af @@= `ax~ref.code.jmp[1]`\");\n}\n\n// TODO: cleanup to reuse code\nstatic void cmd_anal_aftertraps(RCore *core, const char *input) {\n\tint bufi, minop = 1; // 4\n\tut8 *buf;\n\tRAnalOp op = {0};\n\tut64 addr, addr_end;\n\tut64 len = r_num_math (core->num, input);\n\tif (len > 0xffffff) {\n\t\teprintf (\"Too big\\n\");\n\t\treturn;\n\t}\n\tRBinFile *bf = r_bin_cur (core->bin);\n\tif (!bf) {\n\t\treturn;\n\t}\n\taddr = core->offset;\n\tif (!len) {\n\t\t// ignore search.in to avoid problems. analysis != search\n\t\tRIOMap *map = r_io_map_get_at (core->io, addr);\n\t\tif (map && (map->perm & R_PERM_X)) {\n\t\t\t// search in current section\n\t\t\tif (r_io_map_size (map) > bf->size) {\n\t\t\t\taddr = r_io_map_begin (map);\n\t\t\t\tif (bf->size > map->delta) {\n\t\t\t\t\tlen = bf->size - map->delta;\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Opps something went wrong aac\\n\");\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr = r_io_map_begin (map);\n\t\t\t\tlen = r_io_map_size (map);\n\t\t\t}\n\t\t} else {\n\t\t\tif (map && r_io_map_begin (map) != map->delta && bf->size > (core->offset - r_io_map_begin (map) + map->delta)) {\n\t\t\t\tlen = bf->size - (core->offset - r_io_map_begin (map) + map->delta);\n\t\t\t} else {\n\t\t\t\tif (bf->size > core->offset) {\n\t\t\t\t\tlen = bf->size - core->offset;\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Oops invalid range\\n\");\n\t\t\t\t\tlen = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\taddr_end = addr + len;\n\tif (!(buf = malloc (4096))) {\n\t\treturn;\n\t}\n\tbufi = 0;\n\tint trapcount = 0;\n\tint nopcount = 0;\n\tr_cons_break_push (NULL, NULL);\n\twhile (addr < addr_end) {\n\t\tif (r_cons_is_breaked ()) {\n\t\t\tbreak;\n\t\t}\n\t\t// TODO: too many ioreads here\n\t\tif (bufi > 4000) {\n\t\t\tbufi = 0;\n\t\t}\n\t\tif (!bufi) {\n\t\t\tr_io_read_at (core->io, addr, buf, 4096);\n\t\t}\n\t\tif (r_anal_op (core->anal, &op, addr, buf + bufi, 4096 - bufi, R_ANAL_OP_MASK_BASIC)) {\n\t\t\tif (op.size < 1) {\n\t\t\t\t// XXX must be +4 on arm/mips/.. like we do in disasm.c\n\t\t\t\top.size = minop;\n\t\t\t}\n\t\t\tif (op.type == R_ANAL_OP_TYPE_TRAP) {\n\t\t\t\ttrapcount ++;\n\t\t\t} else if (op.type == R_ANAL_OP_TYPE_NOP) {\n\t\t\t\tnopcount ++;\n\t\t\t} else {\n\t\t\t\tif (nopcount > 1) {\n\t\t\t\t\tr_cons_printf (\"af @ 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t\t\tnopcount = 0;\n\t\t\t\t}\n\t\t\t\tif (trapcount > 0) {\n\t\t\t\t\tr_cons_printf (\"af @ 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t\t\ttrapcount = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\top.size = minop;\n\t\t}\n\t\taddr += (op.size > 0)? op.size : 1;\n\t\tbufi += (op.size > 0)? op.size : 1;\n\t\tr_anal_op_fini (&op);\n\t}\n\tr_cons_break_pop ();\n\tfree (buf);\n}\n\nstatic void cmd_anal_blocks(RCore *core, const char *input) {\n\tut64 from , to;\n\tchar *arg = strchr (input, ' ');\n\tr_cons_break_push (NULL, NULL);\n\tif (!arg) {\n\t\tRList *list = r_core_get_boundaries_prot (core, R_PERM_X, NULL, \"anal\");\n\t\tRListIter *iter;\n\t\tRIOMap* map;\n\t\tif (!list) {\n\t\t\tgoto ctrl_c;\n\t\t}\n\t\tr_list_foreach (list, iter, map) {\n\t\t\tfrom = r_io_map_begin (map);\n\t\t\tto = r_io_map_end (map);\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tgoto ctrl_c;\n\t\t\t}\n\t\t\tif (!from && !to) {\n\t\t\t\teprintf (\"Cannot determine search boundaries\\n\");\n\t\t\t} else if (to - from > UT32_MAX) {\n\t\t\t\teprintf (\"Skipping huge range\\n\");\n\t\t\t} else {\n\t\t\t\tr_core_cmdf (core, \"abb 0x%08\"PFMT64x\" @ 0x%08\"PFMT64x, (to - from), from);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tst64 sz = r_num_math (core->num, arg + 1);\n\t\tif (sz < 1) {\n\t\t\teprintf (\"Invalid range\\n\");\n\t\t\treturn;\n\t\t}\n\t\tr_core_cmdf (core, \"abb 0x%08\"PFMT64x\" @ 0x%08\"PFMT64x, sz, core->offset);\n\t}\nctrl_c:\n\tr_cons_break_pop ();\n}\n\nstatic void _anal_calls(RCore *core, ut64 addr, ut64 addr_end, bool printCommands, bool importsOnly) {\n\tRAnalOp op;\n\tint depth = r_config_get_i (core->config, \"anal.depth\");\n\tconst int addrbytes = core->io->addrbytes;\n\tconst int bsz = 4096;\n\tint bufi = 0;\n\tint bufi_max = bsz - 16;\n\tif (addr_end - addr > UT32_MAX) {\n\t\treturn;\n\t}\n\tut8 *buf = malloc (bsz);\n\tut8 *block0 = calloc (1, bsz);\n\tut8 *block1 = malloc (bsz);\n\tif (!buf || !block0 || !block1) {\n\t\teprintf (\"Error: cannot allocate buf or block\\n\");\n\t\tfree (buf);\n\t\tfree (block0);\n\t\tfree (block1);\n\t\treturn;\n\t}\n\tmemset (block1, -1, bsz);\n\tint minop = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_MIN_OP_SIZE);\n\tif (minop < 1) {\n\t\tminop = 1;\n\t}\n\tint setBits = r_config_get_i (core->config, \"asm.bits\");\n\tr_cons_break_push (NULL, NULL);\n\twhile (addr < addr_end && !r_cons_is_breaked ()) {\n\t\t// TODO: too many ioreads here\n\t\tif (bufi > bufi_max) {\n\t\t\tbufi = 0;\n\t\t}\n\t\tif (!bufi) {\n\t\t\t(void)r_io_read_at (core->io, addr, buf, bsz);\n\t\t}\n\t\tif (!memcmp (buf, block0, bsz) || !memcmp (buf, block1, bsz)) {\n\t\t\t//eprintf (\"Error: skipping uninitialized block \\n\");\n\t\t\taddr += bsz;\n\t\t\tcontinue;\n\t\t}\n\t\tRAnalHint *hint = r_anal_hint_get (core->anal, addr);\n\t\tif (hint && hint->bits) {\n\t\t\tsetBits = hint->bits;\n\t\t}\n\t\tr_anal_hint_free (hint);\n\t\tif (setBits != core->rasm->bits) {\n\t\t\tr_config_set_i (core->config, \"asm.bits\", setBits);\n\t\t}\n\t\tif (r_anal_op (core->anal, &op, addr, buf + bufi, bsz - bufi, 0) > 0) {\n\t\t\tif (op.size < 1) {\n\t\t\t\top.size = minop;\n\t\t\t}\n\t\t\tif (op.type == R_ANAL_OP_TYPE_CALL) {\n\t\t\t\tbool isValidCall = true;\n\t\t\t\tif (importsOnly) {\n\t\t\t\t\tRFlagItem *f = r_flag_get_i (core->flags, op.jump);\n\t\t\t\t\tif (!f || !strstr (f->name, \"imp.\")) {\n\t\t\t\t\t\tisValidCall = false;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tRBinReloc *rel = r_core_getreloc (core, addr, op.size);\n\t\t\t\tif (rel && (rel->import || rel->symbol)) {\n\t\t\t\t\tisValidCall = false;\n\t\t\t\t}\n\t\t\t\tif (isValidCall) {\n\t\t\t\t\tut8 buf[4];\n\t\t\t\t\tr_io_read_at (core->io, op.jump, buf, 4);\n\t\t\t\t\tisValidCall = memcmp (buf, \"\\x00\\x00\\x00\\x00\", 4);\n\t\t\t\t}\n\t\t\t\tif (isValidCall) {\n#if JAYRO_03\n\t\t\t\t\tif (!anal_is_bad_call (core, from, to, addr, buf, bufi)) {\n\t\t\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, op.jump, R_ANAL_FCN_TYPE_ROOT);\n\t\t\t\t\t\tif (!fcn) {\n\t\t\t\t\t\t\tr_core_anal_fcn (core, op.jump, addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n#else\n\t\t\t\t\tif (printCommands) {\n\t\t\t\t\t\tr_cons_printf (\"ax 0x%08\" PFMT64x \" 0x%08\" PFMT64x \"\\n\", op.jump, addr);\n\t\t\t\t\t\tr_cons_printf (\"af @ 0x%08\" PFMT64x\"\\n\", op.jump);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t// add xref here\n\t\t\t\t\t\tr_anal_xrefs_set (core->anal, addr, op.jump, R_ANAL_REF_TYPE_CALL);\n\t\t\t\t\t\tif (r_io_is_valid_offset (core->io, op.jump, 1)) {\n\t\t\t\t\t\t\tr_core_anal_fcn (core, op.jump, addr, R_ANAL_REF_TYPE_CALL, depth - 1);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n#endif\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\top.size = minop;\n\t\t}\n\t\tif ((int)op.size < 1) {\n\t\t\top.size = minop;\n\t\t}\n\t\taddr += op.size;\n\t\tbufi += addrbytes * op.size;\n\t\tr_anal_op_fini (&op);\n\t}\n\tr_cons_break_pop ();\n\tfree (buf);\n\tfree (block0);\n\tfree (block1);\n}\n\nstatic void cmd_anal_calls(RCore *core, const char *input, bool printCommands, bool importsOnly) {\n\tRList *ranges = NULL;\n\tRIOMap *r;\n\tut64 addr;\n\tut64 len = r_num_math (core->num, input);\n\tif (len > 0xffffff) {\n\t\teprintf (\"Too big\\n\");\n\t\treturn;\n\t}\n\tRBinFile *binfile = r_bin_cur (core->bin);\n\taddr = core->offset;\n\tif (binfile) {\n\t\tif (len) {\n\t\t\tRIOMap *m = R_NEW0 (RIOMap);\n\t\t\tm->itv.addr = addr;\n\t\t\tm->itv.size = len;\n\t\t\tranges = r_list_newf ((RListFree)free);\n\t\t\tr_list_append (ranges, m);\n\t\t} else {\n\t\t\tranges = r_core_get_boundaries_prot (core, R_PERM_X, NULL, \"anal\");\n\t\t}\n\t}\n\tr_cons_break_push (NULL, NULL);\n\tif (!binfile || (ranges && !r_list_length (ranges))) {\n\t\tRListIter *iter;\n\t\tRIOMap *map;\n\t\tr_list_free (ranges);\n\t\tranges = r_core_get_boundaries_prot (core, 0, NULL, \"anal\");\n\t\tif (ranges) {\n\t\t\tr_list_foreach (ranges, iter, map) {\n\t\t\t\tut64 addr = r_io_map_begin (map);\n\t\t\t\t_anal_calls (core, addr, r_io_map_end (map), printCommands, importsOnly);\n\t\t\t}\n\t\t}\n\t} else {\n\t\tRListIter *iter;\n\t\tif (binfile) {\n\t\t\tr_list_foreach (ranges, iter, r) {\n\t\t\t\taddr = r->itv.addr;\n\t\t\t\t//this normally will happen on fuzzed binaries, dunno if with huge\n\t\t\t\t//binaries as well\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t_anal_calls (core, addr, r_itv_end (r->itv), printCommands, importsOnly);\n\t\t\t}\n\t\t}\n\t}\n\tr_cons_break_pop ();\n\tr_list_free (ranges);\n}\n\nstatic void cmd_sdbk(Sdb *db, const char *input) {\n\tchar *out = (input[0] == ' ')\n\t\t? sdb_querys (db, NULL, 0, input + 1)\n\t\t: sdb_querys (db, NULL, 0, \"*\");\n\tif (out) {\n\t\tr_cons_println (out);\n\t\tfree (out);\n\t} else {\n\t\teprintf (\"|ERROR| Usage: ask [query]\\n\");\n\t}\n}\n\nstatic void cmd_anal_syscall(RCore *core, const char *input) {\n\tPJ *pj = NULL;\n\tRSyscallItem *si;\n\tRListIter *iter;\n\tRList *list;\n\tint n;\n\n\tswitch (input[0]) {\n\tcase 'c': // \"asc\"\n\t\tif (input[1] == 'a') {\n\t\t\tif (input[2] == ' ') {\n\t\t\t\tif (!isalpha ((ut8)input[3]) && (n = r_num_math (core->num, input + 3)) >= 0 ) {\n\t\t\t\t\tsi = r_syscall_get (core->anal->syscall, n, -1);\n\t\t\t\t\tif (si) {\n\t\t\t\t\t\tr_cons_printf (\".equ SYS_%s %s\\n\", si->name, syscallNumber (n));\n\t\t\t\t\t\tr_syscall_item_free (si);\n\t\t\t\t\t}\n\t\t\t\t\telse eprintf (\"Unknown syscall number\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tn = r_syscall_get_num (core->anal->syscall, input + 3);\n\t\t\t\t\tif (n != -1) {\n\t\t\t\t\t\tr_cons_printf (\".equ SYS_%s %s\\n\", input + 3, syscallNumber (n));\n\t\t\t\t\t} else {\n\t\t\t\t\t\teprintf (\"Unknown syscall name\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlist = r_syscall_list (core->anal->syscall);\n\t\t\t\tr_list_foreach (list, iter, si) {\n\t\t\t\t\tr_cons_printf (\".equ SYS_%s %s\\n\",\n\t\t\t\t\t\tsi->name, syscallNumber (si->num));\n\t\t\t\t}\n\t\t\t\tr_list_free (list);\n\t\t\t}\n\t\t} else {\n\t\t\tif (input[1] == ' ') {\n\t\t\t\tif (!isalpha ((ut8)input[2]) && (n = r_num_math (core->num, input + 2)) >= 0) {\n\t\t\t\t\tsi = r_syscall_get (core->anal->syscall, n, -1);\n\t\t\t\t\tif (si) {\n\t\t\t\t\t\tr_cons_printf (\"#define SYS_%s %s\\n\", si->name, syscallNumber (n));\n\t\t\t\t\t\tr_syscall_item_free (si);\n\t\t\t\t\t}\n\t\t\t\t\telse eprintf (\"Unknown syscall number\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tn = r_syscall_get_num (core->anal->syscall, input + 2);\n\t\t\t\t\tif (n != -1) {\n\t\t\t\t\t\tr_cons_printf (\"#define SYS_%s %s\\n\", input + 2, syscallNumber (n));\n\t\t\t\t\t} else {\n\t\t\t\t\t\teprintf (\"Unknown syscall name\\n\");\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlist = r_syscall_list (core->anal->syscall);\n\t\t\t\tr_list_foreach (list, iter, si) {\n\t\t\t\t\tr_cons_printf (\"#define SYS_%s %s\\n\",\n\t\t\t\t\t\tsi->name, syscallNumber (si->num));\n\t\t\t\t}\n\t\t\t\tr_list_free (list);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'k': // \"ask\"\n\t\tcmd_sdbk (core->anal->syscall->db, input + 1);\n\t\tbreak;\n\tcase 'l': // \"asl\"\n\t\tif (input[1] == ' ') {\n\t\t\tconst char *sc_name = r_str_trim_head_ro (input + 2);\n\t\t\tint sc_number = r_syscall_get_num (core->anal->syscall, sc_name);\n\t\t\tif (sc_number != 0) {\n\t\t\t\tr_cons_printf (\"%s\\n\", syscallNumber (sc_number));\n\t\t\t} else {\n\t\t\t\tsc_number = r_num_math (core->num, sc_name);\n\t\t\t\tsi = r_syscall_get (core->anal->syscall, sc_number, -1);\n\t\t\t\tif (!si) {\n\t\t\t\t\tsi = r_syscall_get (core->anal->syscall, -1, sc_number);\n\t\t\t\t}\n\t\t\t\tif (si) {\n\t\t\t\t\tr_cons_println (si->name);\n\t\t\t\t\tr_syscall_item_free (si);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Unknown syscall number\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tlist = r_syscall_list (core->anal->syscall);\n\t\t\tr_list_foreach (list, iter, si) {\n\t\t\t\tr_cons_printf (\"%s = 0x%02x.%s\\n\",\n\t\t\t\t\tsi->name, si->swi, syscallNumber (si->num));\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"asj\"\n\t\tpj = pj_new ();\n\t\tpj_a (pj);\n\t\tlist = r_syscall_list (core->anal->syscall);\n\t\tr_list_foreach (list, iter, si) {\n\t\t\tpj_o (pj);\n\t\t\tpj_ks (pj, \"name\", si->name);\n\t\t\tpj_ki (pj, \"swi\", si->swi);\n\t\t\tpj_ki (pj, \"num\", si->num);\n\t\t\tpj_end (pj);\n\t\t}\n\t\tpj_end (pj);\n\t\tif (pj) {\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t}\n\t\tbreak;\n\tcase '\\0':\n\t\tcmd_syscall_do (core, -1, core->offset);\n\t\tbreak;\n\tcase ' ':\n\t\t{\n\t\tconst char *sn = r_str_trim_head_ro (input + 1);\n\t\tst64 num = r_syscall_get_num (core->anal->syscall, sn);\n\t\tif (num < 1) {\n\t\t\tnum = (int)r_num_get (core->num, sn);\n\t\t}\n\t\tcmd_syscall_do (core, num, -1);\n\t\t}\n\t\tbreak;\n\tdefault:\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_as);\n\t\tbreak;\n\t}\n}\n\nstatic void anal_axg(RCore *core, const char *input, int level, Sdb *db, int opts, PJ* pj) {\n\tchar arg[32], pre[128];\n\tRListIter *iter;\n\tRAnalRef *ref;\n\tut64 addr = core->offset;\n\tbool is_json = opts & R_CORE_ANAL_JSON;\n\tbool is_r2 = opts & R_CORE_ANAL_GRAPHBODY;\n\tif (is_json && !pj) {\n\t\treturn;\n\t}\n\tif (input && *input) {\n\t\taddr = r_num_math (core->num, input);\n\t}\n\t// eprintf (\"Path between 0x%08\"PFMT64x\" .. 0x%08\"PFMT64x\"\\n\", core->offset, addr);\n\tint spaces = (level + 1) * 2;\n\tif (spaces > sizeof (pre) - 4) {\n\t\tspaces = sizeof (pre) - 4;\n\t}\n\tmemset (pre, ' ', sizeof (pre));\n\tstrcpy (pre + spaces, \"- \");\n\n\tRList *xrefs = r_anal_xrefs_get (core->anal, addr);\n\tbool open_object = false;\n\tif (!r_list_empty (xrefs)) {\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, -1);\n\t\tif (fcn) {\n\t\t\tif (is_r2) {\n\t\t\t\tr_cons_printf (\"agn 0x%08\"PFMT64x\" %s\\n\", fcn->addr, fcn->name);\n\t\t\t} else if (is_json) {\n\t\t\t\tchar taddr[64];\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_k (pj, sdb_itoa (addr, taddr, 10));\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"type\", \"fcn\");\n\t\t\t\tpj_kn (pj, \"fcn_addr\", fcn->addr);\n\t\t\t\tpj_ks (pj, \"name\", fcn->name);\n\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\tpj_a (pj);\n\t\t\t\topen_object = true;\n\t\t\t} else {\n\t\t\t\t//if (sdb_add (db, fcn->name, \"1\", 0)) {\n\t\t\t\tr_cons_printf (\"%s0x%08\"PFMT64x\" fcn 0x%08\"PFMT64x\" %s\\n\",\n\t\t\t\t\tpre + 2, addr, fcn->addr, fcn->name);\n\t\t\t\t//}\n\t\t\t}\n\t\t} else {\n\t\t\tif (is_r2) {\n\t\t\t\tr_cons_printf (\"age 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t} else if (is_json) {\n\t\t\t\tchar taddr[64];\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_k (pj, sdb_itoa (addr, taddr, 10));\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\tpj_a (pj);\n\t\t\t\topen_object = true;\n\t\t\t} else {\n\t\t\t//snprintf (arg, sizeof (arg), \"0x%08\"PFMT64x, addr);\n\t\t\t//if (sdb_add (db, arg, \"1\", 0)) {\n\t\t\t\tr_cons_printf (\"%s0x%08\"PFMT64x\"\\n\", pre+2, addr);\n\t\t\t//}\n\t\t\t}\n\t\t}\n\t}\n\tr_list_foreach (xrefs, iter, ref) {\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, ref->addr, -1);\n\t\tif (fcn) {\n\t\t\tif (is_r2) {\n\t\t\t\tr_cons_printf (\"agn 0x%08\"PFMT64x\" %s\\n\", fcn->addr, fcn->name);\n\t\t\t\tr_cons_printf (\"age 0x%08\"PFMT64x\" 0x%08\"PFMT64x\"\\n\", fcn->addr, addr);\n\t\t\t} else if (is_json) {\n\t\t\t\tif (level == 0) {\n\t\t\t\t\tchar taddr[64];\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_k (pj, sdb_itoa (ref->addr, taddr, 10));\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_ks (pj, \"type\", \"fcn\");\n\t\t\t\t\tpj_kn (pj, \"fcn_addr\", fcn->addr);\n\t\t\t\t\tpj_ks (pj, \"name\", fcn->name);\n\t\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\t\tpj_a (pj);\n\t\t\t\t\topen_object = true;\n\t\t\t\t} else {\n\t\t\t\t\tchar taddr[64];\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_k (pj, sdb_itoa (ref->addr, taddr, 10));\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_ks (pj, \"type\", \"fcn\");\n\t\t\t\t\tpj_kn (pj, \"fcn_addr\", fcn->addr);\n\t\t\t\t\tpj_ks (pj, \"refs\", fcn->name);\n\t\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\t\tpj_a (pj);\n\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\"%s0x%08\"PFMT64x\" fcn 0x%08\"PFMT64x\" %s\\n\", pre, ref->addr, fcn->addr, fcn->name);\n\t\t\t}\n\t\t\tif (sdb_add (db, fcn->name, \"1\", 0)) {\n\t\t\t\tsnprintf (arg, sizeof (arg), \"0x%08\"PFMT64x, fcn->addr);\n\t\t\t\tanal_axg (core, arg, level + 1, db, opts, pj);\n\t\t\t} else {\n\t\t\t\tif (is_json) {\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\topen_object = false;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (is_r2) {\n\t\t\t\tr_cons_printf (\"agn 0x%08\"PFMT64x\" ???\\n\", ref->addr);\n\t\t\t\tr_cons_printf (\"age 0x%08\"PFMT64x\" 0x%08\"PFMT64x\"\\n\", ref->addr, addr);\n\t\t\t} else if (is_json) {\n\t\t\t\tchar taddr[64];\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_k (pj, sdb_itoa (ref->addr, taddr, 10));\n\t\t\t\tpj_o (pj);\n\t\t\t\tpj_ks (pj, \"type\", \"???\");\n\t\t\t\tpj_k (pj, \"refs\");\n\t\t\t\tpj_a (pj);\n\t\t\t\topen_object = true;\n\t\t\t} else {\n\t\t\t\tr_cons_printf (\"%s0x%08\"PFMT64x\" ???\\n\", pre, ref->addr);\n\t\t\t}\n\t\t\tsnprintf (arg, sizeof (arg), \"0x%08\"PFMT64x, ref->addr);\n\t\t\tif (sdb_add (db, arg, \"1\", 0)) {\n\t\t\t\tanal_axg (core, arg, level + 1, db, opts, pj);\n\t\t\t} else {\n\t\t\t\tif (is_json) {\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\topen_object = false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\tif (is_json) {\n\t\tif (open_object) {\n\t\t\tpj_end (pj);\n\t\t\tpj_end (pj);\n\t\t\tpj_end (pj);\n\t\t}\n\t\tif (level == 0) {\n\t\t\tif (open_object) {\n\t\t\t\tpj_end (pj);\n\t\t\t\tpj_end (pj);\n\t\t\t\tpj_end (pj);\n\t\t\t}\n\t\t}\n\t}\n\tr_list_free (xrefs);\n}\n\nstatic void cmd_anal_ucall_ref (RCore *core, ut64 addr) {\n\tRAnalFunction * fcn = r_anal_get_function_at (core->anal, addr);\n\tif (fcn) {\n\t\tr_cons_printf (\" ; %s\", fcn->name);\n\t} else {\n\t\tr_cons_printf (\" ; 0x%\" PFMT64x, addr);\n\t}\n}\n\nstatic char *get_op_ireg(void *user, ut64 addr) {\n\tRCore *core = (RCore *)user;\n\tchar *res = NULL;\n\tRAnalOp *op = r_core_anal_op (core, addr, 0);\n\tif (op && op->ireg) {\n\t\tres = strdup (op->ireg);\n\t}\n\tr_anal_op_free (op);\n\treturn res;\n}\n\nstatic char *get_buf_asm(RCore *core, ut64 from, ut64 addr, RAnalFunction *fcn, bool color) {\n\tint has_color = core->print->flags & R_PRINT_FLAGS_COLOR;\n\tchar str[512];\n\tconst int size = 12;\n\tut8 buf[12];\n\tRAsmOp asmop = {0};\n\tchar *buf_asm = NULL;\n\tbool asm_subvar = r_config_get_i (core->config, \"asm.sub.var\");\n\tcore->parser->pseudo = r_config_get_i (core->config, \"asm.pseudo\");\n\tcore->parser->subrel = r_config_get_i (core->config, \"asm.sub.rel\");\n\tcore->parser->localvar_only = r_config_get_i (core->config, \"asm.sub.varonly\");\n\n\tif (core->parser->subrel) {\n\t\tcore->parser->subrel_addr = from;\n\t}\n\tr_io_read_at (core->io, addr, buf, size);\n\tr_asm_set_pc (core->rasm, addr);\n\tr_asm_disassemble (core->rasm, &asmop, buf, size);\n\tint ba_len = r_strbuf_length (&asmop.buf_asm) + 128;\n\tchar *ba = malloc (ba_len);\n\tstrcpy (ba, r_strbuf_get (&asmop.buf_asm));\n\tif (asm_subvar) {\n\t\tcore->parser->get_ptr_at = r_anal_function_get_var_stackptr_at;\n\t\tcore->parser->get_reg_at = r_anal_function_get_var_reg_at;\n\t\tcore->parser->get_op_ireg = get_op_ireg;\n\t\tr_parse_subvar (core->parser, fcn, addr, asmop.size,\n\t\t\t\tba, ba, sizeof (asmop.buf_asm));\n\t}\n\tRAnalHint *hint = r_anal_hint_get (core->anal, addr);\n\tr_parse_filter (core->parser, addr, core->flags, hint,\n\t\t\tba, str, sizeof (str), core->print->big_endian);\n\tr_anal_hint_free (hint);\n\tr_asm_op_set_asm (&asmop, ba);\n\tfree (ba);\n\tif (color && has_color) {\n\t\tbuf_asm = r_print_colorize_opcode (core->print, str,\n\t\t\t\tcore->cons->context->pal.reg, core->cons->context->pal.num, false, fcn ? fcn->addr : 0);\n\t} else {\n\t\tbuf_asm = r_str_new (str);\n\t}\n\treturn buf_asm;\n}\n\n#define var_ref_list(a,d,t) sdb_fmt (\"var.0x%\"PFMT64x\".%d.%d.%s\",\\\n\t\ta, 1, d, (t == 'R')?\"reads\":\"writes\");\n\nstatic bool cmd_anal_refs(RCore *core, const char *input) {\n\tut64 addr = core->offset;\n\tswitch (input[0]) {\n\tcase '-': { // \"ax-\"\n\t\tRList *list;\n\t\tRListIter *iter;\n\t\tRAnalRef *ref;\n\t\tchar *cp_inp = strdup (input + 1);\n\t\tchar *ptr = cp_inp;\n\t\tr_str_trim_head (ptr);\n\t\tif (!strcmp (ptr, \"*\")) { // \"ax-*\"\n\t\t\tr_anal_xrefs_init (core->anal);\n\t\t} else {\n\t\t\tint n = r_str_word_set0 (ptr);\n\t\t\tut64 from = UT64_MAX, to = UT64_MAX;\n\t\t\tswitch (n) {\n\t\t\tcase 2:\n\t\t\t\tfrom = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t\t\t//fall through\n\t\t\tcase 1: // get addr\n\t\t\t\tto = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tto = core->offset;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tlist = r_anal_xrefs_get (core->anal, to);\n\t\t\tif (list) {\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tif (from != UT64_MAX && from == ref->addr) {\n\t\t\t\t\t\tr_anal_xref_del (core->anal, ref->addr, ref->at);\n\t\t\t\t\t}\n\t\t\t\t\tif (from == UT64_MAX) {\n\t\t\t\t\t\tr_anal_xref_del (core->anal, ref->addr, ref->at);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\tfree (cp_inp);\n\t} break;\n\tcase 'g': // \"axg\"\n\t\t{\n\t\t\tSdb *db = sdb_new0 ();\n\t\t\tif (input[1] == '*') {\n\t\t\t\tanal_axg (core, input + 2, 0, db, R_CORE_ANAL_GRAPHBODY, NULL); // r2 commands\n\t\t\t} else if (input[1] == 'j') {\n\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\tanal_axg (core, input + 2, 0, db, R_CORE_ANAL_JSON, pj);\n\t\t\t\tr_cons_printf(\"%s\\n\", pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t} else {\n\t\t\t\tanal_axg (core, input[1] ? input + 2 : NULL, 0, db, 0, NULL);\n\t\t\t}\n\t\t\tsdb_free (db);\n\t\t}\n\t\tbreak;\n\tcase '\\0': // \"ax\"\n\tcase 'j': // \"axj\"\n\tcase 'q': // \"axq\"\n\tcase '*': // \"ax*\"\n\t\tr_anal_xrefs_list (core->anal, input[0]);\n\t\tbreak;\n\tcase '.': { // \"ax.\"\n\t\tchar *tInput = strdup (input);\n\t\tif (r_str_replace_ch (tInput, '.', 't', false)) {\n\t\t\tcmd_anal_refs (core, tInput);\n\t\t}\n\t\tchar *fInput = strdup (input);\n\t\tif (r_str_replace_ch (fInput, '.', 'f', false)) {\n\t\t\tcmd_anal_refs (core, fInput);\n\t\t}\n\t\tfree (tInput);\n\t\tfree (fInput);\n\t} break;\n\tcase 'm': { // \"axm\"\n\t\tRList *list;\n\t\tRAnalRef *ref;\n\t\tRListIter *iter;\n\t\tchar *ptr = strdup (r_str_trim_head_ro (input + 1));\n\t\tint n = r_str_word_set0 (ptr);\n\t\tut64 at = core->offset;\n\t\tut64 addr = UT64_MAX;\n\t\tswitch (n) {\n\t\tcase 2: // get at\n\t\t\tat = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t/* fall through */\n\t\tcase 1: // get addr\n\t\t\taddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfree (ptr);\n\t\t\treturn false;\n\t\t}\n\t\t//get all xrefs pointing to addr\n\t\tlist = r_anal_xrefs_get (core->anal, addr);\n\t\tr_list_foreach (list, iter, ref) {\n\t\t\tr_cons_printf (\"0x%\"PFMT64x\" %s\\n\", ref->addr, r_anal_xrefs_type_tostring (ref->type));\n\t\t\tr_anal_xrefs_set (core->anal, ref->addr, at, ref->type);\n\t\t}\n\t\tr_list_free (list);\n\t\tfree (ptr);\n\t} break;\n\tcase 'v': // \"axv\"\n\t\tcmd_afvx (core, NULL, input[1] == 'j');\n\t\tbreak;\n\tcase 't': { // \"axt\"\n\t\tif (input[1] == '?') { // axt?\n\t\t\tr_core_cmd_help (core, help_msg_axt);\n\t\t\tbreak;\n\t\t}\n\t\tRList *list = NULL;\n\t\tRAnalFunction *fcn;\n\t\tRAnalRef *ref;\n\t\tRListIter *iter;\n\t\tchar *space = strchr (input, ' ');\n\t\tif (space) {\n\t\t\taddr = r_num_math (core->num, space + 1);\n\t\t} else {\n\t\t\taddr = core->offset;\n\t\t}\n\t\tlist = r_anal_xrefs_get (core->anal, addr);\n\t\tif (list) {\n\t\t\tif (input[1] == 'q') { // \"axtq\"\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \"\\n\", ref->addr);\n\t\t\t\t}\n\t\t\t} else if (input[1] == 'j') { // \"axtj\"\n\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tpj_a (pj);\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, ref->addr, 0);\n\t\t\t\t\tchar *str = get_buf_asm (core, addr, ref->addr, fcn, false);\n\t\t\t\t\tpj_o (pj);\n\t\t\t\t\tpj_kn (pj, \"from\", ref->addr);\n\t\t\t\t\tpj_ks (pj, \"type\", r_anal_xrefs_type_tostring (ref->type));\n\t\t\t\t\tpj_ks (pj, \"opcode\", str);\n\t\t\t\t\tif (fcn) {\n\t\t\t\t\t\tpj_kn (pj, \"fcn_addr\", fcn->addr);\n\t\t\t\t\t\tpj_ks (pj, \"fcn_name\", fcn->name);\n\t\t\t\t\t}\n\t\t\t\t\tRFlagItem *fi = r_flag_get_at (core->flags, fcn? fcn->addr: ref->addr, true);\n\t\t\t\t\tif (fi) {\n\t\t\t\t\t\tif (fcn) {\n\t\t\t\t\t\t\tif (strcmp (fcn->name, fi->name)) {\n\t\t\t\t\t\t\t\tpj_ks (pj, \"flag\", fi->name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tpj_k (pj, \"name\");\n\t\t\t\t\t\t\tif (fi->offset != ref->addr) {\n\t\t\t\t\t\t\t\tint delta = (int)(ref->addr - fi->offset);\n\t\t\t\t\t\t\t\tchar *name_ref = r_str_newf (\"%s+%d\", fi->name, delta);\n\t\t\t\t\t\t\t\tpj_s (pj, name_ref);\n\t\t\t\t\t\t\t\tfree (name_ref);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tpj_s (pj, fi->name);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tif (fi->realname && strcmp (fi->name, fi->realname)) {\n\t\t\t\t\t\t\tchar *escaped = r_str_escape (fi->realname);\n\t\t\t\t\t\t\tif (escaped) {\n\t\t\t\t\t\t\t\tpj_ks (pj, \"realname\", escaped);\n\t\t\t\t\t\t\t\tfree (escaped);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tchar *refname = core->anal->coreb.getNameDelta (core, ref->at);\n\t\t\t\t\tif (refname) {\n\t\t\t\t\t\tr_str_replace_ch (refname, ' ', 0, true);\n\t\t\t\t\t\tpj_ks (pj, \"refname\", refname);\n\t\t\t\t\t\tfree (refname);\n\t\t\t\t\t}\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tfree (str);\n\t\t\t\t}\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_printf (\"%s\", pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t\tr_cons_newline ();\n\t\t\t} else if (input[1] == 'g') { // axtg\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tchar *str = r_core_cmd_strf (core, \"fd 0x%\"PFMT64x, ref->addr);\n\t\t\t\t\tif (!str) {\n\t\t\t\t\t\tstr = strdup (\"?\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tr_str_trim_tail (str);\n\t\t\t\t\tr_cons_printf (\"agn 0x%\" PFMT64x \" \\\"%s\\\"\\n\", ref->addr, str);\n\t\t\t\t\tfree (str);\n\t\t\t\t}\n\t\t\t\tif (input[2] != '*') {\n\t\t\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\t\t\tr_cons_printf (\"agn 0x%\" PFMT64x \" \\\"%s\\\"\\n\", addr, fcn?fcn->name: \"$$\");\n\t\t\t\t}\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tr_cons_printf (\"age 0x%\" PFMT64x \" 0x%\"PFMT64x\"\\n\", ref->addr, addr);\n\t\t\t\t}\n\t\t\t} else if (input[1] == '*') { // axt*\n\t\t\t\t// TODO: implement multi-line comments\n\t\t\t\tr_list_foreach (list, iter, ref)\n\t\t\t\t\tr_cons_printf (\"CCa 0x%\" PFMT64x \" \\\"XREF type %d at 0x%\" PFMT64x\"%s\\n\",\n\t\t\t\t\t\tref->addr, ref->type, addr, iter->n? \",\": \"\");\n\t\t\t} else { // axt\n\t\t\t\tRAnalFunction *fcn;\n\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\tfcn = r_anal_get_fcn_in (core->anal, ref->addr, 0);\n\t\t\t\t\tchar *buf_asm = get_buf_asm (core, addr, ref->addr, fcn, true);\n\t\t\t\t\tconst char *comment = r_meta_get_string (core->anal, R_META_TYPE_COMMENT, ref->addr);\n\t\t\t\t\tchar *print_comment = NULL;\n\t\t\t\t\tconst char *nl = comment ? strchr (comment, '\\n') : NULL;\n\t\t\t\t\tif (nl) { // display only until the first newline\n\t\t\t\t\t\tcomment = print_comment = r_str_ndup (comment, nl - comment);\n\t\t\t\t\t}\n\t\t\t\t\tchar *buf_fcn = comment\n\t\t\t\t\t\t? r_str_newf (\"%s; %s\", fcn ?  fcn->name : \"(nofunc)\", comment)\n\t\t\t\t\t\t: r_str_newf (\"%s\", fcn ? fcn->name : \"(nofunc)\");\n\t\t\t\t\tfree (print_comment);\n\t\t\t\t\tr_cons_printf (\"%s 0x%\" PFMT64x \" [%s] %s\\n\",\n\t\t\t\t\t\tbuf_fcn, ref->addr, r_anal_xrefs_type_tostring (ref->type), buf_asm);\n\t\t\t\t\tfree (buf_asm);\n\t\t\t\t\tfree (buf_fcn);\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tif (input[1] == 'j') { // \"axtj\"\n\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\tif (!pj) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t\tpj_a (pj);\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t}\n\t\tr_list_free (list);\n\t} break;\n\tcase 'f':\n\t\tif (input[1] == 'f') { // \"axff\"\n\t\t\tRAnalFunction * fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\tRListIter *iter;\n\t\t\tPJ *pj = NULL;\n\t\t\tRAnalRef *refi;\n\t\t\tif (input[2] == 'j') { // \"axffj\"\n\t\t\t\t// start a new JSON object\n\t\t\t\tpj = pj_new ();\n\t\t\t\tpj_a (pj);\n\t\t\t}\n\t\t\tif (fcn) {\n\t\t\t\tRList *refs = r_anal_function_get_refs (fcn);\n\t\t\t\tr_list_foreach (refs, iter, refi) {\n\t\t\t\t\tRFlagItem *f = r_flag_get_at (core->flags, refi->addr, true);\n\t\t\t\t\tconst char *name = f ? f->name: \"\";\n\t\t\t\t\tif (pj) {\n\t\t\t\t\t\tpj_o (pj);\n\t\t\t\t\t\tpj_ks (pj, \"type\", r_anal_xrefs_type_tostring(refi->type));\n\t\t\t\t\t\tpj_kn (pj, \"at\", refi->at);\n\t\t\t\t\t\tpj_kn (pj, \"ref\", refi->addr);\n\t\t\t\t\t\tpj_ks (pj, \"name\", name);\n\t\t\t\t\t\tpj_end (pj);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_cons_printf (\"%s 0x%08\"PFMT64x\" 0x%08\"PFMT64x\" %s\\n\",\n\t\t\t\t\t\t\tr_anal_xrefs_type_tostring(refi->type), refi->at, refi->addr, name);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pj) {\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"Cannot find any function\\n\");\n\t\t\t}\n\t\t\tpj_free (pj);\n\t\t} else { // \"axf\"\n\t\t\tRAsmOp asmop;\n\t\t\tRList *list = NULL;\n\t\t\tRAnalRef *ref;\n\t\t\tRListIter *iter;\n\t\t\tchar *space = strchr (input, ' ');\n\t\t\tif (space) {\n\t\t\t\taddr = r_num_math (core->num, space + 1);\n\t\t\t} else {\n\t\t\t\taddr = core->offset;\n\t\t\t}\n\t\t\tRAnalFunction * fcn = r_anal_get_fcn_in (core->anal, addr, 0);\n\t\t\tif (input[1] == '.') { // \"axf.\"\n\t\t\t\tlist = r_anal_xrefs_get_from (core->anal, addr);\n\t\t\t\tif (!list) {\n\t\t\t\t\tlist = r_anal_function_get_refs (fcn);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tlist = r_anal_refs_get (core->anal, addr);\n\t\t\t}\n\n\t\t\tif (list) {\n\t\t\t\tif (input[1] == 'q') { // \"axfq\"\n\t\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\t\tr_cons_printf (\"0x%\" PFMT64x \"\\n\", ref->at);\n\t\t\t\t\t}\n\t\t\t\t} else if (input[1] == 'j') { // \"axfj\"\n\t\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\t\tif (!pj) {\n\t\t\t\t\t\treturn false;\n\t\t\t\t\t}\n\t\t\t\t\tpj_a (pj);\n\t\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\t\t// TODO: Use r_core_anal_op(DISASM) instead of all those 4 lines\n\t\t\t\t\t\tut8 buf[16];\n\t\t\t\t\t\tr_io_read_at (core->io, ref->addr, buf, sizeof (buf));\n\t\t\t\t\t\tr_asm_set_pc (core->rasm, ref->addr);\n\t\t\t\t\t\tr_asm_disassemble (core->rasm, &asmop, buf, sizeof (buf));\n\t\t\t\t\t\tpj_o (pj);\n\t\t\t\t\t\tpj_kn (pj, \"from\", ref->at);\n\t\t\t\t\t\tpj_kn (pj, \"to\", ref->addr);\n\t\t\t\t\t\tpj_ks (pj, \"type\", r_anal_xrefs_type_tostring (ref->type));\n\t\t\t\t\t\tpj_ks (pj, \"opcode\", r_asm_op_get_asm (&asmop));\n\t\t\t\t\t\tpj_end (pj);\n\t\t\t\t\t}\n\t\t\t\t\tpj_end (pj);\n\t\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\t\tpj_free (pj);\n\t\t\t\t} else if (input[1] == '*') { // \"axf*\"\n\t\t\t\t\t// TODO: implement multi-line comments\n\t\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\t\tr_cons_printf (\"CCa 0x%\" PFMT64x \" \\\"XREF from 0x%u \\n\",\n\t\t\t\t\t\t\t\tref->at, ref->type);\n\t\t\t\t\t}\n\t\t\t\t} else { // \"axf\"\n\t\t\t\t\tchar str[512];\n\t\t\t\t\tint has_color = core->print->flags & R_PRINT_FLAGS_COLOR;\n\t\t\t\t\tr_list_foreach (list, iter, ref) {\n\t\t\t\t\t\tut8 buf[16];\n\t\t\t\t\t\tchar *desc;\n\t\t\t\t\t\tchar *desc_to_free = NULL;\n\t\t\t\t\t\tRFlagItem *flag = r_flag_get_at (core->flags, ref->addr, false);\n\t\t\t\t\t\tif (flag) {\n\t\t\t\t\t\t\tdesc = flag->name;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tr_io_read_at (core->io, ref->addr, buf, sizeof (buf));\n\t\t\t\t\t\t\tr_asm_set_pc (core->rasm, ref->addr);\n\t\t\t\t\t\t\tr_asm_disassemble (core->rasm, &asmop, buf, sizeof(buf));\n\t\t\t\t\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, ref->addr);\n\t\t\t\t\t\t\tr_parse_filter (core->parser, ref->addr, core->flags, hint, r_asm_op_get_asm (&asmop),\n\t\t\t\t\t\t\t\t\tstr, sizeof (str), core->print->big_endian);\n\t\t\t\t\t\t\tr_anal_hint_free (hint);\n\t\t\t\t\t\t\tif (has_color) {\n\t\t\t\t\t\t\t\tdesc = desc_to_free = r_print_colorize_opcode (core->print, str,\n\t\t\t\t\t\t\t\t\t\tcore->cons->context->pal.reg, core->cons->context->pal.num, false, fcn ? fcn->addr : 0);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tdesc = str;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_cons_printf (\"%c 0x%\" PFMT64x \" %s\",\n\t\t\t\t\t\t\t\tref->type ? ref->type : ' ', ref->addr, desc);\n\n\t\t\t\t\t\tif (ref->type == R_ANAL_REF_TYPE_CALL) {\n\t\t\t\t\t\t\tRAnalOp aop;\n\t\t\t\t\t\t\tr_anal_op (core->anal, &aop, ref->addr, buf, sizeof(buf), R_ANAL_OP_MASK_BASIC);\n\t\t\t\t\t\t\tif (aop.type == R_ANAL_OP_TYPE_UCALL) {\n\t\t\t\t\t\t\t\tcmd_anal_ucall_ref (core, ref->addr);\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\tr_cons_newline ();\n\t\t\t\t\t\tfree (desc_to_free);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (input[1] == 'j') { // \"axfj\"\n\t\t\t\t\tr_cons_print (\"[]\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t}\n\t\tbreak;\n\tcase 'F': // \"axF\"\n\t\tfind_refs (core, input + 1);\n\t\tbreak;\n\tcase 'C': // \"axC\"\n\tcase 'c': // \"axc\"\n\tcase 'd': // \"axd\"\n\tcase 's': // \"axs\"\n\tcase ' ': // \"ax \"\n\t\t{\n\t\tchar *ptr = strdup (r_str_trim_head_ro ((char *)input + 1));\n\t\tint n = r_str_word_set0 (ptr);\n\t\tut64 at = core->offset;\n\t\tut64 addr = UT64_MAX;\n\t\tRAnalRefType reftype = r_anal_xrefs_type (input[0]);\n\t\tswitch (n) {\n\t\tcase 2: // get at\n\t\t\tat = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t/* fall through */\n\t\tcase 1: // get addr\n\t\t\taddr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tfree (ptr);\n\t\t\treturn false;\n\t\t}\n\t\tr_anal_xrefs_set (core->anal, at, addr, reftype);\n\t\tfree (ptr);\n\t\t}\n\t   \tbreak;\n\tdefault:\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_ax);\n\t\tbreak;\n\t}\n\n\treturn true;\n}\nstatic void cmd_anal_hint(RCore *core, const char *input) {\n\tswitch (input[0]) {\n\tcase '?':\n\t\tif (input[1]) {\n\t\t\tut64 addr = r_num_math (core->num, input + 1);\n\t\t\tr_core_anal_hint_print (core->anal, addr, 0);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_ah);\n\t\t}\n\t\tbreak;\n\tcase '.': // \"ah.\"\n\t\tr_core_anal_hint_print (core->anal, core->offset, 0);\n\t\tbreak;\n\tcase 'a': // \"aha\" set arch\n\t\tif (input[1] == ' ') {\n\t\t\tchar *ptr = strdup (input + 2);\n\t\t\tr_str_word_set0 (ptr);\n\t\t\tconst char *arch = r_str_word_get0 (ptr, 0);\n\t\t\tr_anal_hint_set_arch (core->anal, core->offset, !arch || strcmp (arch, \"0\") == 0 ? NULL : arch);\n\t\t\tfree (ptr);\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_arch (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Missing argument\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'o': // \"aho\"\n\t\tif (input[1] == '*') {\n\t\t\t// show in r2\n\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, core->offset);\n\t\t\tif (hint && hint->opcode) {\n\t\t\t\tr_cons_printf (\"aho %s @ 0x%08\"PFMT64x\"\\n\", hint->opcode, hint->addr);\n\t\t\t}\n\t\t} else if (input[1] == 0) {\n\t\t\t// show if any\n\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, core->offset);\n\t\t\tif (hint && hint->type > 0) {\n\t\t\t\tr_cons_printf (\"%s\\n\", r_anal_optype_to_string (hint->type));\n\t\t\t}\n\t\t\tr_anal_hint_free (hint);\n\t\t}  else if (input[1] == '-') {\n\t\t\tut64 off = input[2]? r_num_math (core->num, input + 2): core->offset;\n\t\t\tr_anal_hint_unset_bits (core->anal, off);\n\t\t} else if (input[1] == ' ') {\n\t\t\tconst char *arg = r_str_trim_head_ro (input + 1);\n\t\t\tint type = r_anal_optype_from_string (arg);\n\t\t\tif (type != -1) {\n\t\t\t\tr_anal_hint_set_type (core->anal, core->offset, type);\n\t\t\t} else {\n\t\t\t\teprintf (\"Unknown opcode type. Try: io, acmp, add, sync, call, cjmp, cmp, nop, ...\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_aho);\n\t\t}\n\t\tbreak;\n\tcase 'b': // \"ahb\" set bits\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_ahb);\n\t\t} else if (input[1] == ' ') {\n\t\t\tchar *ptr = r_str_trim_dup (input + 2);\n\t\t\tint bits;\n\t\t\tint i = r_str_word_set0 (ptr);\n\t\t\tif (i == 2) {\n\t\t\t\tr_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t\t}\n\t\t\tbits = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\tr_anal_hint_set_bits (core->anal, core->offset, bits);\n\t\t\tfree (ptr);\n\t\t}  else if (input[1] == '-') {\n\t\t\tif (!strcmp (input + 2, \"*\")) {\n\t\t\t\teprintf (\"Delete all asm.bits hints is not yet supported.\\n\");\n\t\t\t} else {\n\t\t\t\tut64 off = input[2]? r_num_math (core->num, input + 2): core->offset;\n\t\t\t\tr_anal_hint_unset_bits (core->anal, off);\n\t\t\t}\n\t\t} else {\n\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, core->offset);\n\t\t\tif (hint && hint->bits) {\n\t\t\t\tr_cons_printf (\"%d\\n\", hint->bits);\n\t\t\t}\n\t\t\tr_anal_hint_free (hint);\n\t\t}\n\t\tbreak;\n\tcase 'i': // \"ahi\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_ahi);\n\t\t\tbreak;\n\t\t}\n\t\tif (input[1] == '-') { // \"ahi-\"\n\t\t\tut64 addr = r_num_get (core->num, input + 2);\n\t\t\t// add ahi-*\n\t\t\tr_anal_hint_set_immbase (core->anal, addr? addr: core->offset, 0);\n\t\t\tbreak;\n\t\t}\n\t\tif (isdigit ((unsigned char)input[1])) {\n\t\t\tr_anal_hint_set_nword (core->anal, core->offset, input[1] - '0');\n\t\t\tinput++;\n\t\t}\n\t\tif (input[1] == ' ') {\n\t\t\t// You can either specify immbase with letters, or numbers\n\t\t\tint base;\n\t\t\tif (r_str_startswith (input + 2, \"10u\") || r_str_startswith (input + 2, \"du\")) {\n\t\t\t\tbase = 11;\n\t\t\t} else {\n\t\t\t\tbase = (input[2] == 's') ? 1 :\n\t\t\t\t       (input[2] == 'b') ? 2 :\n\t\t\t\t       (input[2] == 'p') ? 3 :\n\t\t\t\t       (input[2] == 'o') ? 8 :\n\t\t\t\t       (input[2] == 'd') ? 10 :\n\t\t\t\t       (input[2] == 'h') ? 16 :\n\t\t\t\t       (input[2] == 'i') ? 32 : // ip address\n\t\t\t\t       (input[2] == 'S') ? 80 : // syscall\n\t\t\t\t       (int) r_num_math (core->num, input + 1);\n\t\t\t}\n\t\t\tr_anal_hint_set_immbase (core->anal, core->offset, base);\n\t\t} else if (!input[1]) {\n\t\t\tRAnalHint *hint = r_anal_hint_get (core->anal, core->offset);\n\t\t\tif (hint && hint->immbase) {\n\t\t\t\tr_cons_printf (\"%d\\n\", hint->immbase);\n\t\t\t}\n\t\t\tr_anal_hint_free (hint);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_ahi);\n\t\t}\n\t\tbreak;\n\tcase 'h': // \"ahh\"\n\t\tif (input[1] == '-') {\n\t\t\tr_anal_hint_unset_high (core->anal, core->offset);\n\t\t} else if (input[1] == ' ') {\n\t\t\tr_anal_hint_set_high (core->anal, r_num_math (core->num, input + 1));\n\t\t} else {\n\t\t\tr_anal_hint_set_high (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"ahc\"\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_jump (\n\t\t\t\tcore->anal, core->offset,\n\t\t\t\tr_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_jump (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 'f': // \"ahf\"\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_fail (\n\t\t\t\tcore->anal, core->offset,\n\t\t\t\tr_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_fail (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 'F': // \"ahF\" set stackframe size\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_stackframe (\n\t\t\t\tcore->anal, core->offset,\n\t\t\t\tr_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_stackframe (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 's': // \"ahs\" set size (opcode length)\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_size (core->anal, core->offset, atoi (input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_size (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Usage: ahs 16\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'S': // \"ahS\" set asm.syntax\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_syntax (core->anal, core->offset, input + 2);\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_syntax (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Usage: ahS att\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"ahd\" set opcode string\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_opcode (core->anal, core->offset, input + 2);\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_opcode (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Usage: ahd popall\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'e': // \"ahe\" set ESIL string\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_esil (core->anal, core->offset, input + 2);\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_esil (core->anal, core->offset);\n\t\t} else {\n\t\t\teprintf (\"Usage: ahe r0,pc,=\\n\");\n\t\t}\n\t\tbreak;\n#if 0\n\tcase 'e': // set endian\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_opcode (core->anal, core->offset, atoi (input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_opcode (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n#endif\n\tcase 'p': // \"ahp\"\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_pointer (core->anal, core->offset, r_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') { // \"ahp-\"\n\t\t\tr_anal_hint_unset_pointer (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase 'r': // \"ahr\"\n\t\t// XXX isnt this the same as 'aho ret' ?\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_ret (core->anal, core->offset, r_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') { // \"ahr-\"\n\t\t\tr_anal_hint_unset_ret (core->anal, core->offset);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_ahr);\n\t\t}\n\t\tbreak;\n\tcase '*': // \"ah*\"\n\tcase 'j': // \"ahj\"\n\tcase '\\0': // \"ah\"\n\t\tif (input[0] && input[1] == ' ') {\n\t\t\tchar *ptr = strdup (r_str_trim_head_ro (input + 2));\n\t\t\tr_str_word_set0 (ptr);\n\t\t\tut64 addr = r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t\t\tr_core_anal_hint_print (core->anal, addr, input[0]);\n\t\t\tfree (ptr);\n\t\t} else {\n\t\t\tr_core_anal_hint_list (core->anal, input[0]);\n\t\t}\n\t\tbreak;\n\tcase 'v': // \"ahv\"\n\t\tif (input[1] == ' ') {\n\t\t\tr_anal_hint_set_val (\n\t\t\t\tcore->anal, core->offset,\n\t\t\t\tr_num_math (core->num, input + 1));\n\t\t} else if (input[1] == '-') {\n\t\t\tr_anal_hint_unset_val (core->anal, core->offset);\n\t\t}\n\t\tbreak;\n\tcase '-': // \"ah-\"\n\t\tif (input[1]) {\n\t\t\tif (input[1] == '*') {\n\t\t\t\tr_anal_hint_clear (core->anal);\n\t\t\t} else {\n\t\t\t\tchar *ptr = strdup (r_str_trim_head_ro (input + 1));\n\t\t\t\tut64 addr;\n\t\t\t\tint size = 1;\n\t\t\t\tint i = r_str_word_set0 (ptr);\n\t\t\t\tif (i == 2) {\n\t\t\t\t\tsize = r_num_math (core->num, r_str_word_get0 (ptr, 1));\n\t\t\t\t}\n\t\t\t\tconst char *a0 = r_str_word_get0 (ptr, 0);\n\t\t\t\tif (a0 && *a0) {\n\t\t\t\t\taddr = r_num_math (core->num, a0);\n\t\t\t\t} else {\n\t\t\t\t\taddr = core->offset;\n\t\t\t\t}\n\t\t\t\tr_anal_hint_del (core->anal, addr, size);\n\t\t\t\tfree (ptr);\n\t\t\t}\n\t\t} else {\n\t\t\tr_anal_hint_clear (core->anal);\n\t\t} break;\n\tcase 't': // \"aht\"\n\t\tswitch (input[1]) {\n\t\tcase 's': { // \"ahts\"\n\t\t\tchar *off = strdup (input + 2);\n\t\t\tr_str_trim (off);\n\t\t\tint toff = r_num_math (NULL, off);\n\t\t\tif (toff) {\n\t\t\t\tRList *typeoffs = r_type_get_by_offset (core->anal->sdb_types, toff);\n\t\t\t\tRListIter *iter;\n\t\t\t\tchar *ty;\n\t\t\t\tr_list_foreach (typeoffs, iter, ty) {\n\t\t\t\t\tr_cons_printf (\"%s\\n\", ty);\n\t\t\t\t}\n\t\t\t\tr_list_free (typeoffs);\n\t\t\t}\n\t\t\tfree (off);\n\t\t\tbreak;\n\t\t}\n\t\tcase ' ': {\n\t\t\t// r_anal_hint_set_opcode (core->anal, core->offset, input + 2);\n\t\t\tconst char *off = NULL;\n\t\t\tchar *type = strdup (r_str_trim_head_ro (input + 2));\n\t\t\tchar *idx = strchr (type, ' ');\n\t\t\tif (idx) {\n\t\t\t\t*idx++ = 0;\n\t\t\t\toff = idx;\n\t\t\t}\n\t\t\tchar *ptr = strchr (type, '=');\n\t\t\tut64 offimm = 0;\n\t\t\tint i = 0;\n\t\t\tut64 addr;\n\n\t\t\tif (ptr) {\n\t\t\t\t*ptr++ = 0;\n\t\t\t\tr_str_trim (ptr);\n\t\t\t\tif (ptr && *ptr) {\n\t\t\t\t\taddr = r_num_math (core->num, ptr);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"address is unvalid\\n\");\n\t\t\t\t\tfree (type);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\taddr = core->offset;\n\t\t\t}\n\t\t\tr_str_trim (type);\n\t\t\tRAsmOp asmop;\n\t\t\tRAnalOp op = { 0 };\n\t\t\tut8 code[128] = { 0 };\n\t\t\t(void)r_io_read_at (core->io, core->offset, code, sizeof (code));\n\t\t\tr_asm_set_pc (core->rasm, addr);\n\t\t\t(void)r_asm_disassemble (core->rasm, &asmop, code, core->blocksize);\n\t\t\tint ret = r_anal_op (core->anal, &op, core->offset, code, core->blocksize, R_ANAL_OP_MASK_VAL);\n\t\t\tif (ret >= 0) {\n\t\t\t\t// HACK: Just convert only the first imm seen\n\t\t\t\tfor (i = 0; i < 3; i++) {\n\t\t\t\t\tif (op.src[i]) {\n\t\t\t\t\t\tif (op.src[i]->imm) {\n\t\t\t\t\t\t\toffimm = op.src[i]->imm;\n\t\t\t\t\t\t} else if (op.src[i]->delta) {\n\t\t\t\t\t\t\toffimm = op.src[i]->delta;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (!offimm && op.dst) {\n\t\t\t\t\tif (op.dst->imm) {\n\t\t\t\t\t\toffimm = op.dst->imm;\n\t\t\t\t\t} else if (op.dst->delta) {\n\t\t\t\t\t\toffimm = op.dst->delta;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (offimm != 0) {\n\t\t\t\t\tif (off) {\n\t\t\t\t\t\toffimm += r_num_math (NULL, off);\n\t\t\t\t\t}\n\t\t\t\t\t// TODO: Allow to select from multiple choices\n\t\t\t\t\tRList *otypes = r_type_get_by_offset (core->anal->sdb_types, offimm);\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tchar *otype = NULL;\n\t\t\t\t\tr_list_foreach (otypes, iter, otype) {\n\t\t\t\t\t\t// TODO: I don't think we should silently error, it is confusing\n\t\t\t\t\t\tif (!strcmp (type, otype)) {\n\t\t\t\t\t\t\t//eprintf (\"Adding type offset %s\\n\", type);\n\t\t\t\t\t\t\tr_type_link_offset (core->anal->sdb_types, type, addr);\n\t\t\t\t\t\t\tr_anal_hint_set_offset (core->anal, addr, otype);\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tif (!otype) {\n\t\t\t\t\t\teprintf (\"wrong type for opcode offset\\n\");\n\t\t\t\t\t}\n\t\t\t\t\tr_list_free (otypes);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_anal_op_fini (&op);\n\t\t\tfree (type);\n\t\t} break;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_aht);\n\t\t\tbreak;\n\t\t}\n\t}\n}\n\nstatic void agraph_print_node_gml(RANode *n, void *user) {\n\tr_cons_printf (\"  node [\\n\"\n\t\t\"    id  %d\\n\"\n\t\t\"    label  \\\"%s\\\"\\n\"\n\t\t\"  ]\\n\", n->gnode->idx, n->title);\n}\n\nstatic void agraph_print_edge_gml(RANode *from, RANode *to, void *user) {\n\tr_cons_printf (\"  edge [\\n\"\n\t\t\"    source  %d\\n\"\n\t\t\"    target  %d\\n\"\n\t\t\"  ]\\n\", from->gnode->idx, to->gnode->idx\n\t\t);\n}\n\nstatic void agraph_print_node_dot(RANode *n, void *user) {\n\tif (R_STR_ISEMPTY (n->body)) {\n\t\tr_cons_printf (\"\\\"%s\\\" [URL=\\\"%s\\\", color=\\\"lightgray\\\", label=\\\"%s\\\"]\\n\",\n\t\t\t\tn->title, n->title, n->title);\n\t} else {\n\t\tchar *label = strdup (n->body);\n\t\t//label = r_str_replace (label, \"\\n\", \"\\\\l\", 1);\n\t\tr_cons_printf (\"\\\"%s\\\" [URL=\\\"%s\\\", color=\\\"lightgray\\\", label=\\\"%s\\\\n%s\\\"]\\n\",\n\t\t\t\tn->title, n->title, n->title, label);\n\t\tfree (label);\n\t}\n}\n\nstatic void agraph_print_node(RANode *n, void *user) {\n\tsize_t len = strlen (n->body);\n\n\tif (len > 0 && n->body[len - 1] == '\\n') {\n\t\tlen--;\n\t}\n\tchar *encbody = r_base64_encode_dyn (n->body, len);\n\tchar *cmd = r_str_newf (\"agn \\\"%s\\\" base64:%s\\n\", n->title, encbody);\n\tr_cons_print (cmd);\n\tfree (cmd);\n\tfree (encbody);\n}\n\nstatic char *getViewerPath(void) {\n\tint i;\n\tconst char *viewers[] = {\n#if __WINDOWS__\n\t\t\"explorer\",\n#else\n\t\t\"open\",\n\t\t\"geeqie\",\n\t\t\"gqview\",\n\t\t\"eog\",\n\t\t\"xdg-open\",\n#endif\n\t\tNULL\n\t};\n\tfor (i = 0; viewers[i]; i++) {\n\t\tchar *viewerPath = r_file_path (viewers[i]);\n\t\tif (viewerPath && strcmp (viewerPath, viewers[i])) {\n\t\t\treturn viewerPath;\n\t\t}\n\t\tfree (viewerPath);\n\t}\n\treturn NULL;\n}\n\nstatic char *dot_executable_path(void) {\n\tconst char *dot = \"dot\";\n\tchar *dotPath = r_file_path (dot);\n\tif (!strcmp (dotPath, dot)) {\n\t\tfree (dotPath);\n\t\tdot = \"xdot\";\n\t\tdotPath = r_file_path (dot);\n\t\tif (!strcmp (dotPath, dot)) {\n\t\t\tfree (dotPath);\n\t\t\treturn NULL;\n\t\t}\n\t}\n\treturn dotPath;\n}\n\nstatic bool convert_dot_to_image(RCore *core, const char *dot_file, const char *save_path) {\n\tchar *dot = dot_executable_path ();\n\tbool result = false;\n\tif (!dot) {\n\t\teprintf (\"Graphviz not found\\n\");\n\t\treturn false;\n\t}\n\tconst char *ext = r_config_get (core->config, \"graph.gv.format\");\n\n\tchar *cmd = NULL;\n\tif (save_path && *save_path) {\n\t\tcmd = r_str_newf (\"!%s -T%s -o%s a.dot;\", dot, ext, save_path);\n\t} else {\n\t\tchar *viewer = getViewerPath();\n\t\tif (viewer) {\n\t\t\tcmd = r_str_newf (\"!%s -T%s -oa.%s a.dot;!%s a.%s\",\n\t\t\t\tdot, ext, ext, viewer, ext);\n\t\t\tfree (viewer);\n\t\t} else {\n\t\t\teprintf (\"Cannot find a valid picture viewer\\n\");\n\t\t\tgoto end;\n\t\t}\n\t}\n\tr_core_cmd0 (core, cmd);\n\tresult = true;\nend:\n\tfree (cmd);\n\tfree (dot);\n\treturn result;\n}\n\nstatic bool convert_dotcmd_to_image(RCore *core, char *r2_cmd, const char *save_path) {\n\tif (save_path && *save_path) {\n\t\tr_cons_printf (\"Saving to file '%s'...\\n\", save_path);\n\t\tr_cons_flush ();\n\t}\n\tr_core_cmdf (core, \"%s > a.dot\", r2_cmd); // TODO: check error here\n\treturn convert_dot_to_image (core, \"a.dot\", save_path);\n}\n\nstatic bool convert_dot_str_to_image(RCore *core, char *str, const char *save_path) {\n\tif (save_path && *save_path) {\n\t\tr_cons_printf (\"Saving to file '%s'...\\n\", save_path);\n\t\tr_cons_flush ();\n\t}\n\tif (!r_file_dump (\"a.dot\", (const unsigned char *)str, -1, false)) {\n\t\treturn false;\n\t}\n\treturn convert_dot_to_image (core, \"a.dot\", save_path);\n}\n\nstatic void agraph_print_edge_dot(RANode *from, RANode *to, void *user) {\n\tRCore *core = (RCore *)user;\n\tut64 a = r_num_math (NULL, from->title);\n\tut64 b = r_num_math (NULL, to->title);\n\tconst char *k = sdb_fmt (\"agraph.edge.0x%\"PFMT64x\"_0x%\"PFMT64x\".highlight\", a, b);\n\tif (sdb_exists (core->sdb, k)) {\n\t\tr_cons_printf (\"\\\"%s\\\" -> \\\"%s\\\" [color=cyan]\\n\", from->title, to->title);\n\t} else {\n\t\tr_cons_printf (\"\\\"%s\\\" -> \\\"%s\\\"\\n\", from->title, to->title);\n\t}\n}\n\nstatic void agraph_print_edge(RANode *from, RANode *to, void *user) {\n\tr_cons_printf (\"age \\\"%s\\\" \\\"%s\\\"\\n\", from->title, to->title);\n}\n\nstatic void cmd_agraph_node(RCore *core, const char *input) {\n\tswitch (*input) {\n\tcase ' ': { // \"agn\"\n\t\tchar *newbody = NULL;\n\t\tchar **args, *body;\n\t\tint n_args, B_LEN = strlen (\"base64:\");\n\t\tchar *color = NULL;\n\t\tinput++;\n\t\targs = r_str_argv (input, &n_args);\n\t\tif (n_args < 1 || n_args > 3) {\n\t\t\tr_cons_printf (\"Wrong arguments\\n\");\n\t\t\tr_str_argv_free (args);\n\t\t\tbreak;\n\t\t}\n\t\t// strdup cause there is double free in r_str_argv_free due to a realloc call\n\t\tif (n_args > 1) {\n\t\t\tbody = strdup (args[1]);\n\t\t\tif (strncmp (body, \"base64:\", B_LEN) == 0) {\n\t\t\t\tbody = r_str_replace (body, \"\\\\n\", \"\", true);\n\t\t\t\tnewbody = (char *)r_base64_decode_dyn (body + B_LEN, -1);\n\t\t\t\tfree (body);\n\t\t\t\tif (!newbody) {\n\t\t\t\t\teprintf (\"Cannot allocate buffer\\n\");\n\t\t\t\t\tr_str_argv_free (args);\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tbody = newbody;\n\t\t\t}\n\t\t\tbody = r_str_append (body, \"\\n\");\n\t\t\tif (n_args > 2) {\n\t\t\t\tRColor kolor = {0};\n\t\t\t\t(void)r_cons_pal_parse (args[2], &kolor);\n\t\t\t\tcolor = r_cons_rgb_str (NULL, -1, &kolor);\n\t\t\t}\n\t\t} else {\n\t\t\tbody = strdup (\"\");\n\t\t}\n\t\tr_agraph_add_node (core->graph, args[0], body, color);\n\t\tr_str_argv_free (args);\n\t\tfree (body);\n\t\tfree (color);\n\t\t// free newbody it's not necessary since r_str_append reallocate the space\n\t\tbreak;\n\t}\n\tcase '-': { // \"agn-\"\n\t\tchar **args;\n\t\tint n_args;\n\n\t\tinput++;\n\t\targs = r_str_argv (input, &n_args);\n\t\tif (n_args != 1) {\n\t\t\tr_cons_printf (\"Wrong arguments\\n\");\n\t\t\tr_str_argv_free (args);\n\t\t\tbreak;\n\t\t}\n\t\tr_agraph_del_node (core->graph, args[0]);\n\t\tr_str_argv_free (args);\n\t\tbreak;\n\t}\n\tcase '?':\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_agn);\n\t\tbreak;\n\t}\n}\n\nstatic bool cmd_ageh(RCore *core, const char *input) {\n\tif (!*input) {\n\t\tr_core_cmd0 (core, \"k~agraph.edge\");\n\t\treturn false;\n\t}\n\tbool add = true;\n\tif (*input == '-') {\n\t\tadd = false;\n\t\tinput++;\n\t}\n\tchar *arg = r_str_trim_dup (input + 1);\n\tchar *sp = strchr (arg, ' ');\n\tif (!sp) {\n\t\tfree (arg);\n\t\treturn false;\n\t}\n\t*sp++ = 0;\n\tut64 a = r_num_math (core->num, arg);\n\tut64 b = r_num_math (core->num, sp);\n\n\tconst char *k = sdb_fmt (\"agraph.edge.0x%\"PFMT64x\"_0x%\"PFMT64x\".highlight\", a, b);\n\tsdb_set (core->sdb, k, add? \"true\": \"\", 0);\n\tfree(arg);\n\treturn true;\n}\n\nstatic void cmd_agraph_edge(RCore *core, const char *input) {\n\tswitch (*input) {\n\tcase ' ': // \"age\"\n\tcase '-': { // \"age-\"\n\t\tRANode *u, *v;\n\t\tchar **args;\n\t\tint n_args;\n\n\t\targs = r_str_argv (input + 1, &n_args);\n\t\tif (n_args != 2) {\n\t\t\tr_cons_printf (\"Wrong arguments\\n\");\n\t\t\tr_str_argv_free (args);\n\t\t\tbreak;\n\t\t}\n\n\t\tu = r_agraph_get_node (core->graph, args[0]);\n\t\tv = r_agraph_get_node (core->graph, args[1]);\n\t\tif (!u || !v) {\n\t\t\tconst char *arg = args[u? 1: 0];\n\t\t\tr_cons_printf (\"Node %s not found!\\n\", arg);\n\t\t\tr_str_argv_free (args);\n\t\t\tbreak;\n\t\t}\n\t\tif (*input == ' ') {\n\t\t\tr_agraph_add_edge (core->graph, u, v, false);\n\t\t} else {\n\t\t\tr_agraph_del_edge (core->graph, u, v);\n\t\t}\n\t\tr_str_argv_free (args);\n\t\tbreak;\n\t}\n\tcase 'h':\n\t\tcmd_ageh (core, input + 1);\n\t\tbreak;\n\tcase '?':\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_age);\n\t\tbreak;\n\t}\n}\n\nR_API void r_core_agraph_print(RCore *core, int use_utf, const char *input) {\n\tif (use_utf != -1) {\n\t\tr_config_set_i (core->config, \"scr.utf8\", use_utf);\n\t}\n\tswitch (*input) {\n\tcase 0:\n\t\tcore->graph->can->linemode = r_config_get_i (core->config, \"graph.linemode\");\n\t\tcore->graph->can->color = r_config_get_i (core->config, \"scr.color\");\n\t\tr_agraph_set_title (core->graph, r_config_get (core->config, \"graph.title\"));\n\t\tr_agraph_print (core->graph);\n\t\tbreak;\n\tcase 't': { // \"aggt\" - tiny graph\n\t\tcore->graph->is_tiny = true;\n\t\tint e = r_config_get_i (core->config, \"graph.edges\");\n\t\tr_config_set_i (core->config, \"graph.edges\", 0);\n\t\tr_core_visual_graph (core, core->graph, NULL, false);\n\t\tr_config_set_i (core->config, \"graph.edges\", e);\n\t\tcore->graph->is_tiny = false;\n\t\tbreak;\n\t}\n\tcase 'k': // \"aggk\"\n\t{\n\t\tSdb *db = r_agraph_get_sdb (core->graph);\n\t\tif (db) {\n\t\t\tchar *o = sdb_querys (db, \"null\", 0, \"*\");\n\t\t\tif (o) {\n\t\t\t\tr_cons_print (o);\n\t\t\t\tfree (o);\n\t\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'v': // \"aggv\"\n\tcase 'i': // \"aggi\" - open current core->graph in interactive mode\n\t{\n\t\tRANode *ran = r_agraph_get_first_node (core->graph);\n\t\tif (ran) {\n\t\t\tut64 oseek = core->offset;\n\t\t\tr_agraph_set_title (core->graph, r_config_get (core->config, \"graph.title\"));\n\t\t\tr_agraph_set_curnode (core->graph, ran);\n\t\t\tcore->graph->force_update_seek = true;\n\t\t\tcore->graph->need_set_layout = true;\n\t\t\tcore->graph->layout = r_config_get_i (core->config, \"graph.layout\");\n\t\t\tbool ov = r_cons_is_interactive ();\n\t\t\tcore->graph->need_update_dim = true;\n\t\t\tint update_seek = r_core_visual_graph (core, core->graph, NULL, true);\n\t\t\tr_config_set_i (core->config, \"scr.interactive\", ov);\n\t\t\tr_cons_show_cursor (true);\n\t\t\tr_cons_enable_mouse (false);\n\t\t\tif (update_seek != -1) {\n\t\t\t\tr_core_seek (core, oseek, false);\n\t\t\t}\n\t\t} else {\n\t\t\teprintf (\"This graph contains no nodes\\n\");\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'd': { // \"aggd\" - dot format\n\t\tconst char *font = r_config_get (core->config, \"graph.font\");\n\t\tr_cons_printf (\"digraph code {\\nrankdir=LR;\\noutputorder=edgesfirst\\ngraph [bgcolor=azure];\\n\"\n\t\t\t\"edge [arrowhead=normal, color=\\\"#3030c0\\\" style=bold weight=2];\\n\"\n\t\t\t\"node [fillcolor=white, style=filled shape=box \"\n\t\t\t\"fontname=\\\"%s\\\" fontsize=\\\"8\\\"];\\n\",\n\t\t\tfont);\n\t\tr_agraph_foreach (core->graph, agraph_print_node_dot, core);\n\t\tr_agraph_foreach_edge (core->graph, agraph_print_edge_dot, core);\n\t\tr_cons_printf (\"}\\n\");\n\t\tbreak;\n\t}\n\tcase '*': // \"agg*\" -\n\t\tr_agraph_foreach (core->graph, agraph_print_node, core);\n\t\tr_agraph_foreach_edge (core->graph, agraph_print_edge, core);\n\t\tbreak;\n\tcase 'J':\n\tcase 'j': {\n\t\tPJ *pj = pj_new ();\n\t\tif (!pj) {\n\t\t\treturn;\n\t\t}\n\t\tpj_o (pj);\n\t\tpj_k (pj, \"nodes\");\n\t\tpj_a (pj);\n\t\tr_agraph_print_json (core->graph, pj);\n\t\tpj_end (pj);\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t} break;\n\tcase 'g':\n\t\tr_cons_printf (\"graph\\n[\\n\"\n\t\t\t       \"hierarchic 1\\n\"\n\t\t\t       \"label \\\"\\\"\\n\"\n\t\t\t       \"directed 1\\n\");\n\t\tr_agraph_foreach (core->graph, agraph_print_node_gml, NULL);\n\t\tr_agraph_foreach_edge (core->graph, agraph_print_edge_gml, NULL);\n\t\tr_cons_print (\"]\\n\");\n\t\tbreak;\n\tcase 'w': { // \"aggw\"\n\t\tif (r_config_get_i (core->config, \"graph.web\")) {\n\t\t\tr_core_cmd0 (core, \"=H /graph/\");\n\t\t} else {\n\t\t\tconst char *filename = r_str_trim_head_ro (input + 1);\n\t\t\tconvert_dotcmd_to_image (core, \"aggd\", filename);\n\t\t}\n\t\tbreak;\n\t}\n\tdefault:\n\t\teprintf (\"Usage: see ag?\\n\");\n\t}\n}\n\nstatic void print_graph_agg(RGraph /*RGraphNodeInfo*/ *graph) {\n\tRGraphNodeInfo *print_node;\n\tRGraphNode *node, *target;\n\tRListIter *it, *edge_it;\n\tr_list_foreach (graph->nodes, it, node) {\n\t\tchar *encbody;\n\t\tint len;\n\t\tprint_node = node->data;\n\t\tif (R_STR_ISNOTEMPTY (print_node->body)) {\n\t\t\tlen = strlen (print_node->body);\n\n\t\t\tif (len > 0 && print_node->body[len - 1] == '\\n') {\n\t\t\t\tlen--;\n\t\t\t}\n\t\t\tencbody = r_base64_encode_dyn (print_node->body, len);\n\t\t\tr_cons_printf (\"agn \\\"%s\\\" base64:%s\\n\", print_node->title, encbody);\n\t\t\tfree (encbody);\n\t\t} else {\n\t\t\tr_cons_printf (\"agn \\\"%s\\\"\\n\", print_node->title);\n\t\t}\n\t}\n\tr_list_foreach (graph->nodes, it, node) {\n\t\tprint_node = node->data;\n\t\tr_list_foreach (node->out_nodes, edge_it, target) {\n\t\t\tRGraphNodeInfo *to = target->data;\n\t\t\tr_cons_printf (\"age \\\"%s\\\" \\\"%s\\\"\\n\", print_node->title, to->title);\n\t\t}\n\t}\n}\n\nstatic char *print_graph_dot(RCore *core, RGraph /*<RGraphNodeInfo>*/ *graph) {\n\tconst char *font = r_config_get (core->config, \"graph.font\");\n\tchar *node_properties = r_str_newf (\"fontname=\\\"%s\\\"\", font);\n\tchar *result = r_graph_drawable_to_dot (graph, node_properties, NULL);\n\tfree (node_properties);\n\treturn result;\n}\n\nstatic void r_core_graph_print(RCore *core, RGraph /*<RGraphNodeInfo>*/ *graph, int use_utf, bool use_offset, const char *input) {\n\tRAGraph *agraph = NULL;\n\tRListIter *it;\n\tRListIter *edge_it;\n\tRGraphNode *graphNode, *target;\n\tRGraphNodeInfo *print_node;\n\tif (use_utf != -1) {\n\t\tr_config_set_i (core->config, \"scr.utf8\", use_utf);\n\t}\n\tswitch (*input) {\n\tcase 0:\n\tcase 't':\n\tcase 'k':\n\tcase 'v':\n\tcase 'i': {\n\t\tagraph = create_agraph_from_graph (graph);\n\t\tswitch (*input) {\n\t\tcase 0:\n\t\t\tagraph->can->linemode = r_config_get_i (core->config, \"graph.linemode\");\n\t\t\tagraph->can->color = r_config_get_i (core->config, \"scr.color\");\n\t\t\tr_agraph_set_title (agraph,\n\t\t\t\tr_config_get (core->config, \"graph.title\"));\n\t\t\tr_agraph_print (agraph);\n\t\t\tbreak;\n\t\tcase 't': { // \"ag_t\" - tiny graph\n\t\t\tagraph->is_tiny = true;\n\t\t\tint e = r_config_get_i (core->config, \"graph.edges\");\n\t\t\tr_config_set_i (core->config, \"graph.edges\", 0);\n\t\t\tr_core_visual_graph (core, agraph, NULL, false);\n\t\t\tr_config_set_i (core->config, \"graph.edges\", e);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'k': // \"ag_k\"\n\t\t{\n\t\t\tSdb *db = r_agraph_get_sdb (agraph);\n\t\t\tchar *o = sdb_querys (db, \"null\", 0, \"*\");\n\t\t\tr_cons_print (o);\n\t\t\tfree (o);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'v': // \"ag_v\"\n\t\tcase 'i': // \"ag_i\" - open current core->graph in interactive mode\n\t\t{\n\t\t\tRANode *ran = r_agraph_get_first_node (agraph);\n\t\t\tif (ran) {\n\t\t\t\tut64 oseek = core->offset;\n\t\t\t\tr_agraph_set_title (agraph, r_config_get (core->config, \"graph.title\"));\n\t\t\t\tr_agraph_set_curnode (agraph, ran);\n\t\t\t\tagraph->force_update_seek = true;\n\t\t\t\tagraph->need_set_layout = true;\n\t\t\t\tagraph->layout = r_config_get_i (core->config, \"graph.layout\");\n\t\t\t\tbool ov = r_cons_is_interactive ();\n\t\t\t\tagraph->need_update_dim = true;\n\t\t\t\tint update_seek = r_core_visual_graph (core, agraph, NULL, true);\n\t\t\t\tr_config_set_i (core->config, \"scr.interactive\", ov);\n\t\t\t\tr_cons_show_cursor (true);\n\t\t\t\tr_cons_enable_mouse (false);\n\t\t\t\tif (update_seek != -1) {\n\t\t\t\t\tr_core_seek (core, oseek, false);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"This graph contains no nodes\\n\");\n\t\t\t}\n\t\t\tbreak;\n\t\t}\n\t\t}\n\t\tbreak;\n\t}\n\tcase 'd': { // \"ag_d\" - dot format\n\t\tchar *dot_text = print_graph_dot (core, graph);\n\t\tif (dot_text) {\n\t\t\tr_cons_print (dot_text);\n\t\t\tfree (dot_text);\n\t\t}\n\t\tbreak;\n\t}\n\tcase '*': // \"ag_*\" -\n\t\tprint_graph_agg (graph);\n\t\tbreak;\n\tcase 'J':\n\tcase 'j': {\n\t\tPJ *pj = pj_new ();\n\t\tif (pj) {\n\t\t\tr_graph_drawable_to_json (graph, pj, use_offset);\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t}\n\t} break;\n\tcase 'g':\n\t\tr_cons_printf (\"graph\\n[\\n\"\n\t\t\t       \"hierarchic 1\\n\"\n\t\t\t       \"label \\\"\\\"\\n\"\n\t\t\t       \"directed 1\\n\");\n\t\tr_list_foreach (graph->nodes, it, graphNode) {\n\t\t\tprint_node = graphNode->data;\n\t\t\tr_cons_printf (\"  node [\\n\"\n\t\t\t\t       \"    id  %d\\n\"\n\t\t\t\t       \"    label  \\\"%s\\\"\\n\"\n\t\t\t\t       \"  ]\\n\",\n\t\t\t\tgraphNode->idx, print_node->title);\n\t\t}\n\t\tr_list_foreach (graph->nodes, it, graphNode) {\n\t\t\tprint_node = graphNode->data;\n\t\t\tr_list_foreach (graphNode->out_nodes, edge_it, target) {\n\t\t\t\tr_cons_printf (\"  edge [\\n\"\n\t\t\t\t\t       \"    source  %d\\n\"\n\t\t\t\t\t       \"    target  %d\\n\"\n\t\t\t\t\t       \"  ]\\n\",\n\t\t\t\t\tgraphNode->idx, target->idx);\n\t\t\t}\n\t\t}\n\t\tr_cons_print (\"]\\n\");\n\t\tbreak;\n\tcase 'w': { // \"ag_w\"\n\t\tconst char *filename = r_str_trim_head_ro (input + 1);\n\t\tchar *dot_text = print_graph_dot (core, graph);\n\t\tif (dot_text) {\n\t\t\tconvert_dot_str_to_image (core, dot_text, filename);\n\t\t\tfree (dot_text);\n\t\t}\n\t\tbreak;\n\t}\n\tdefault:\n\t\teprintf (\"Usage: see ag?\\n\");\n\t}\n}\n\nR_API void cmd_agfb(RCore *core) {\n\tconst int c = r_config_get_b (core->config, \"scr.color\");\n\tr_config_set_i (core->config, \"scr.color\", 0);\n\tr_cons_push ();\n\tr_core_visual_graph (core, NULL, NULL, false);\n\tr_config_set_i (core->config, \"scr.color\", c);\n\tchar *s = strdup (r_cons_singleton()->context->buffer);\n\tr_cons_pop ();\n\tcmd_agfb2 (core, s);\n\tfree (s);\n}\n\nR_API void cmd_agfb3(RCore *core, const char *s, int x, int y) {\n\tint h, w = r_str_size (s, &h);\n\tRConsPixel *p = r_cons_pixel_new (w, h);\n\tr_cons_pixel_sets (p, 0, 0, s);\n\tr_cons_pixel_flush (p, x, y);\n\tR_FREE (p);\n}\n\nR_API void cmd_agfb2(RCore *core, const char *s) {\n\tint h, w = r_str_size (s, &h);\n\tRConsPixel *p = r_cons_pixel_new (w, h);\n\tr_cons_pixel_sets (p, 0, 0, s);\n\tchar *pix = r_cons_pixel_drain (p);\n\tr_cons_printf (\"%s %c\", pix, 10);\n\tfree (pix);\n}\n\nstatic void cmd_anal_graph(RCore *core, const char *input) {\n\tcore->graph->show_node_titles = r_config_get_i (core->config, \"graph.ntitles\");\n\tr_cons_enable_highlight (false);\n\tswitch (input[0]) {\n\tcase 'f': // \"agf\"\n\t\tswitch (input[1]) {\n\t\tcase 0: // \"agf\"\n\t\t\tr_core_visual_graph (core, NULL, NULL, false);\n\t\t\tbreak;\n\t\tcase 'b': // \"agfb\" // braile\n\t\t\tcmd_agfb (core);\n\t\t\tbreak;\n\t\tcase ' ': { // \"agf \"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tr_core_visual_graph (core, NULL, fcn, false);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'v': // \"agfv\"\n\t\t\teprintf (\"\\rRendering graph...\\n\");\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_ROOT);\n\t\t\tif (fcn) {\n\t\t\t\tr_core_visual_graph (core, NULL, fcn, 1);\n\t\t\t}\n\t\t\tr_cons_enable_mouse (false);\n\t\t\tr_cons_show_cursor (true);\n\t\t\tbreak;\n\t\tcase 't': { // \"agft\" - tiny graph\n\t\t\tint e = r_config_get_i (core->config, \"graph.edges\");\n\t\t\tr_config_set_i (core->config, \"graph.edges\", 0);\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tr_core_visual_graph (core, NULL, fcn, 2);\n\t\t\tr_config_set_i (core->config, \"graph.edges\", e);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 'd': // \"agfd\"\n\t\t\tif (input[2] == 'm') { // \"agfdm\"\n\t\t\t\tr_core_anal_graph (core, r_num_math (core->num, input + 3),\n\t\t\t\t\tR_CORE_ANAL_GRAPHLINES);\n\t\t\t} else {\n\t\t\t\tr_core_anal_graph (core, r_num_math (core->num, input + 2),\n\t\t\t\t\tR_CORE_ANAL_GRAPHBODY);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'j': // \"agfj\"\n\t\t\tr_core_anal_graph (core, r_num_math (core->num, input + 2), R_CORE_ANAL_JSON);\n\t\t\tbreak;\n\t\tcase 'J': { // \"agfJ\"\n\t\t\t// Honor asm.graph=false in json as well\n\t\t\tRConfigHold *hc = r_config_hold_new (core->config);\n\t\t\tr_config_hold (hc, \"asm.offset\", NULL);\n\t\t\tconst bool o_graph_offset = r_config_get_i (core->config, \"graph.offset\");\n\t\t\tr_config_set_i (core->config, \"asm.offset\", o_graph_offset);\n\t\t\tr_core_anal_graph (core, r_num_math (core->num, input + 2),\n\t\t\t\tR_CORE_ANAL_JSON | R_CORE_ANAL_JSON_FORMAT_DISASM);\n\t\t\tr_config_hold_restore (hc);\n\t\t\tr_config_hold_free (hc);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'g':{ // \"agfg\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tr_core_print_bb_gml (core, fcn);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 'k':{ // \"agfk\"\n\t\t\tr_core_cmdf (core, \"ag-; .agf* @ %\"PFMT64u\"; aggk\", core->offset);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase '*':{// \"agf*\"\n\t\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, 0);\n\t\t\tr_core_print_bb_custom (core, fcn);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 'w': // \"agfw\"\n\t\t\tif (r_config_get_i (core->config, \"graph.web\")) {\n\t\t\t\tr_core_cmd0 (core, \"=H /graph/\");\n\t\t\t} else {\n\t\t\t\tchar *cmdargs = r_str_newf (\"agfd @ 0x%\"PFMT64x, core->offset);\n\t\t\t\tconvert_dotcmd_to_image (core, cmdargs, input + 2);\n\t\t\t\tfree (cmdargs);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault:\n\t\t\teprintf (\"Usage: see ag?\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase '-': // \"ag-\"\n\t\tr_agraph_reset (core->graph);\n\t\tbreak;\n\tcase 'n': // \"agn\"\n\t\tcmd_agraph_node (core, input + 1);\n\t\tbreak;\n\tcase 'e': // \"age\"\n\t\tcmd_agraph_edge (core, input + 1);\n\t\tbreak;\n\tcase 'g': // \"agg\"\n\t\tr_core_agraph_print (core, -1, input + 1);\n\t\tbreak;\n\tcase 's': // \"ags\"\n\t\tr_core_anal_graph (core, r_num_math (core->num, input + 1), 0);\n\t\tbreak;\n\tcase 'C': // \"agC\"\n\t\tswitch (input[1]) {\n\t\tcase 'v':\n\t\tcase 't':\n\t\tcase 'k':\n\t\tcase 'w':\n\t\tcase ' ':\n\t\tcase 0: {\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmdf (core, \"ag-; .agC*;\");\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 'J':\n\t\tcase 'j':\n\t\t\tr_core_anal_callgraph (core, UT64_MAX, R_GRAPH_FORMAT_JSON);\n\t\t\tbreak;\n\t\tcase 'g':\n\t\t\tr_core_anal_callgraph (core, UT64_MAX, R_GRAPH_FORMAT_GML);\n\t\t\tbreak;\n\t\tcase 'd':\n\t\t\tr_core_anal_callgraph (core, UT64_MAX, R_GRAPH_FORMAT_DOT);\n\t\t\tbreak;\n\t\tcase '*':\n\t\t\tr_core_anal_callgraph (core, UT64_MAX, R_GRAPH_FORMAT_CMD);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\teprintf (\"Usage: see ag?\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'r': // \"agr\" references graph\n\t\tswitch (input[1]) {\n\t\tcase '*': {\n\t\t\tr_core_anal_coderefs (core, core->offset);\n\t\t\t}\n\t\t\tbreak;\n\t\tdefault: {\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmdf (core, \"ag-; .agr* @ %\"PFMT64u\";\", core->offset);\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'R': // \"agR\" global refs\n\t\tswitch (input[1]) {\n\t\tcase '*': {\n\t\t\tut64 from = r_config_get_i (core->config, \"graph.from\");\n\t\t\tut64 to = r_config_get_i (core->config, \"graph.to\");\n\t\t\tRListIter *it;\n\t\t\tRAnalFunction *fcn;\n\t\t\tr_list_foreach (core->anal->fcns, it, fcn) {\n\t\t\t\tif ((from == UT64_MAX && to == UT64_MAX) || R_BETWEEN (from, fcn->addr, to)) {\n\t\t\t\t\tr_core_anal_coderefs (core, fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault: {\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmdf (core, \"ag-; .agR*;\");\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'x': {// \"agx\" cross refs\n\t\tRGraph *graph = r_core_anal_codexrefs (core, core->offset);\n\t\tif (!graph) {\n\t\t\teprintf (\"Couldn't create graph\");\n\t\t\tbreak;\n\t\t}\n\t\tr_core_graph_print (core, graph, -1, true, input + 1);\n\t\tr_graph_free (graph);\n\t\tbreak;\n\t}\n\tcase 'i': { // \"agi\" import graph\n\t\tRGraph *graph = r_core_anal_importxrefs (core);\n\t\tif (!graph) {\n\t\t\teprintf (\"Couldn't create graph\");\n\t\t\tbreak;\n\t\t}\n\t\tr_core_graph_print (core, graph, -1, true, input + 1);\n\t\tr_graph_free (graph);\n\t\tbreak;\n\t}\n\tcase 'c': // \"agc\"\n\t\tswitch (input[1]) {\n\t\tcase 'v':\n\t\tcase 't':\n\t\tcase 'k':\n\t\tcase 'w':\n\t\tcase ' ': {\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmdf (core, \"ag-; .agc* @ %\" PFMT64u \"; agg%s;\", core->offset, input + 1);\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\t\t}\n\t\tcase 0:\n\t\t\tcore->graph->is_callgraph = true;\n\t\t\tr_core_cmd0 (core, \"ag-; .agc* $$; agg;\");\n\t\t\tcore->graph->is_callgraph = false;\n\t\t\tbreak;\n\t\tcase 'g': {\n\t\t\tr_core_anal_callgraph (core, core->offset, R_GRAPH_FORMAT_GMLFCN);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'd': {\n\t\t\tr_core_anal_callgraph (core, core->offset, R_GRAPH_FORMAT_DOT);\n\t\t\tbreak;\n\t\t}\n\t\tcase 'J':\n\t\tcase 'j': {\n\t\t\tr_core_anal_callgraph (core, core->offset, R_GRAPH_FORMAT_JSON);\n\t\t\tbreak;\n\t\t}\n\t\tcase '*': {\n\t\t\tr_core_anal_callgraph (core, core->offset, R_GRAPH_FORMAT_CMD);\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\teprintf (\"Usage: see ag?\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"agj\" alias for agfj\n\t\tr_core_cmdf (core, \"agfj%s\", input + 1);\n\t\tbreak;\n\tcase 'J': // \"agJ\" alias for agfJ\n\t\tr_core_cmdf (core, \"agfJ%s\", input + 1);\n\t\tbreak;\n\tcase 'k': // \"agk\" alias for agfk\n\t\tr_core_cmdf (core, \"agfk%s\", input + 1);\n\t\tbreak;\n\tcase 'l': // \"agl\"\n\t\tr_core_anal_graph (core, r_num_math (core->num, input + 1), R_CORE_ANAL_GRAPHLINES);\n\t\tbreak;\n\tcase 'a': // \"aga\"\n\t\tswitch (input[1]) {\n\t\tcase '*': {\n\t\t\tr_core_anal_datarefs (core, core->offset);\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault:\n\t\t\tr_core_cmdf (core, \"ag-; .aga* @ %\"PFMT64u\";\", core->offset);\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'A': // \"agA\" global data refs\n\t\tswitch (input[1]) {\n\t\tcase '*': {\n\t\t\tut64 from = r_config_get_i (core->config, \"graph.from\");\n\t\t\tut64 to = r_config_get_i (core->config, \"graph.to\");\n\t\t\tRListIter *it;\n\t\t\tRAnalFunction *fcn;\n\t\t\tr_list_foreach (core->anal->fcns, it, fcn) {\n\t\t\t\tif ((from == UT64_MAX && to == UT64_MAX) || R_BETWEEN (from, fcn->addr, to)) {\n\t\t\t\t\tr_core_anal_datarefs (core, fcn->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tbreak;\n\t\t\t}\n\t\tdefault:\n\t\t\tr_core_cmdf (core, \"ag-; .agA*;\");\n\t\t\tr_core_agraph_print(core, -1, input + 1);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'd': {// \"agd\"\n\t        int diff_opt = R_CORE_ANAL_GRAPHBODY | R_CORE_ANAL_GRAPHDIFF;\n\t\tswitch (input[1]) {\n\t\tcase 'j': {\n\t\t\t\t  ut64 addr = input[2] ? r_num_math (core->num, input + 2) : core->offset;\n\t\t\t\t  r_core_gdiff_fcn (core, addr, core->offset);\n\t\t\t\t  r_core_anal_graph (core, addr, diff_opt | R_CORE_ANAL_JSON);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase 'J': {\n\t\t\t\t  ut64 addr = input[2] ? r_num_math (core->num, input + 2) : core->offset;\n\t\t\t\t  r_core_gdiff_fcn (core, addr, core->offset);\n\t\t\t\t  r_core_anal_graph (core, addr, diff_opt | R_CORE_ANAL_JSON | R_CORE_ANAL_JSON_FORMAT_DISASM);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase '*': {\n\t\t\t\t  ut64 addr = input[2] ? r_num_math (core->num, input + 2) : core->offset;\n\t\t\t\t  r_core_gdiff_fcn (core, addr, core->offset);\n\t\t\t\t  r_core_anal_graph (core, addr, diff_opt | R_CORE_ANAL_STAR);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase ' ':\n\t\tcase 0:\n\t\tcase 't':\n\t\tcase 'k':\n\t\tcase 'v':\n\t\tcase 'g': {\n\t\t\t\t  ut64 addr = input[2]? r_num_math (core->num, input + 2): core->offset;\n\t\t\t\t  r_core_cmdf (core, \"ag-; .agd* @ %\"PFMT64u\"; agg%s;\", addr, input + 1);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase 'd': {\n\t\t\t\t  ut64 addr = input[2]? r_num_math (core->num, input + 2): core->offset;\n\t\t\t\t  r_core_gdiff_fcn (core, addr, core->offset);\n\t\t\t\t  r_core_anal_graph (core, addr, diff_opt);\n\t\t\t\t  break;\n\t\t\t  }\n\t\tcase 'w': {\n\t\t\t\t  char *cmdargs = r_str_newf (\"agdd 0x%\"PFMT64x, core->offset);\n\t\t\t\t  convert_dotcmd_to_image (core, cmdargs, input + 2);\n\t\t\t\t  free (cmdargs);\n\t\t\t\t  break;\n\t\t\t  }\n\t\t}\n\t\tbreak;\n        }\n\tcase 'v': // \"agv\" alias for \"agfv\"\n\t\tr_core_cmdf (core, \"agfv%s\", input + 1);\n\t\tbreak;\n\tcase 'w':// \"agw\"\n\t\tif (r_config_get_i (core->config, \"graph.web\")) {\n\t\t\tr_core_cmd0 (core, \"=H /graph/\");\n\t\t} else {\n\t\t\tchar *cmdargs = r_str_newf (\"agfd @ 0x%\"PFMT64x, core->offset);\n\t\t\tconvert_dotcmd_to_image (core, cmdargs, input + 1);\n\t\t\tfree (cmdargs);\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ag);\n\t\tbreak;\n\t}\n}\n\nR_API int r_core_anal_refs(RCore *core, const char *input) {\n\tconst bool cfg_debug = r_config_get_b (core->config, \"cfg.debug\");\n\tut64 from, to;\n\tint rad;\n\tPJ *pj = NULL;\n\tif (*input == '?') {\n\t\tr_core_cmd_help (core, help_msg_aar);\n\t\treturn 0;\n\t}\n\n\tif (*input == 'j' || *input == '*') {\n\t\trad = *input;\n\t\tinput++;\n\t\tif (rad == 'j') {\n\t\t\tpj = r_core_pj_new (core);\n\t\t\tif (!pj) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t}\n\t} else {\n\t\trad = 0;\n\t}\n\n\tfrom = to = 0;\n\tchar *ptr = r_str_trim_dup (input);\n\tint n = r_str_word_set0 (ptr);\n\tif (!n) {\n\t\t// get boundaries of current memory map, section or io map\n\t\tif (cfg_debug) {\n\t\t\tRDebugMap *map = r_debug_map_get (core->dbg, core->offset);\n\t\t\tif (map) {\n\t\t\t\tfrom = map->addr;\n\t\t\t\tto = map->addr_end;\n\t\t\t}\n\t\t} else {\n\t\t\tRList *list = r_core_get_boundaries_prot (core, R_PERM_X, NULL, \"anal\");\n\t\t\tRListIter *iter;\n\t\t\tRIOMap* map;\n\t\t\tif (!list) {\n\t\t\t\treturn 0;\n\t\t\t}\n\t\t\tif (rad == 'j') {\n\t\t\t\tpj_o (pj);\n\t\t\t}\n\t\t\tr_list_foreach (list, iter, map) {\n\t\t\t\tfrom = r_io_map_begin (map);\n\t\t\t\tto = r_io_map_end (map);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (!from && !to) {\n\t\t\t\t\teprintf (\"Cannot determine xref search boundaries\\n\");\n\t\t\t\t} else if (to - from > UT32_MAX) {\n\t\t\t\t\teprintf (\"Skipping huge range\\n\");\n\t\t\t\t} else {\n\t\t\t\t\tif (rad == 'j') {\n\t\t\t\t\t\tpj_ki (pj, \"mapid\", map->id);\n\t\t\t\t\t\tpj_ko (pj, \"refs\");\n\t\t\t\t\t}\n\t\t\t\t\tr_core_anal_search_xrefs (core, from, to, pj, rad);\n\t\t\t\t\tif (rad == 'j') {\n\t\t\t\t\t\tpj_end (pj);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (rad == 'j') {\n\t\t\t\tpj_end (pj);\n\t\t\t\tr_cons_println (pj_string (pj));\n\t\t\t\tpj_free (pj);\n\t\t\t}\n\t\t\tfree (ptr);\n\t\t\tr_list_free (list);\n\t\t\treturn 1;\n\t\t}\n\t} else if (n == 1) {\n\t\tfrom = core->offset;\n\t\tto = core->offset + r_num_math (core->num, r_str_word_get0 (ptr, 0));\n\t} else {\n\t\teprintf (\"Invalid number of arguments\\n\");\n\t}\n\tfree (ptr);\n\n\tif (from == UT64_MAX && to == UT64_MAX) {\n\t\treturn false;\n\t}\n\tif (!from && !to) {\n\t\treturn false;\n\t}\n\tif (to - from > r_io_size (core->io)) {\n\t\treturn false;\n\t}\n\tif (rad == 'j') {\n\t\tpj_o (pj);\n\t}\n\tbool res = r_core_anal_search_xrefs (core, from, to, pj, rad);\n\tif (rad == 'j') {\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t}\n\treturn res;\n}\n\nstatic const char *oldstr = NULL;\n\nstatic int compute_coverage(RCore *core) {\n\tRListIter *iter;\n\tRAnalFunction *fcn;\n\tint cov = 0;\n\tcov += r_meta_get_size(core->anal, R_META_TYPE_DATA);\n\tRIOBank *bank = r_io_bank_get (core->io, core->io->bank);\n\tif (bank) {\n\t\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\t\tRIOMapRef *mapref;\n\t\t\tRListIter *ator;\n\t\t\tr_list_foreach (bank->maprefs, ator, mapref) {\n\t\t\t\tRIOMap *map = r_io_map_get (core->io, mapref->id);\n\t\t\t\tif (map->perm & R_PERM_X) {\n\t\t\t\t\tut64 section_end = r_io_map_end (map);\n\t\t\t\t\tut64 s = r_anal_function_realsize (fcn);\n\t\t\t\t\tif (fcn->addr >= r_io_map_from (map) && (fcn->addr + s) < section_end) {\n\t\t\t\t\t\tcov += s;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\treturn cov;\n}\n\nstatic int compute_code (RCore* core) {\n\tint code = 0;\n\tRIOBank *bank = r_io_bank_get (core->io, core->io->bank);\n\tif (bank) {\n\t\tRIOMapRef *mapref;\n\t\tRListIter *ator;\n\t\tr_list_foreach (bank->maprefs, ator, mapref) {\n\t\t\tRIOMap *map = r_io_map_get (core->io, mapref->id);\n\t\t\tif (map->perm & R_PERM_X) {\n\t\t\t\tcode += r_io_map_size (map);\n\t\t\t}\n\t\t}\n\t}\n\treturn code;\n}\n\nstatic int compute_calls(RCore *core) {\n\tRListIter *iter;\n\tRAnalFunction *fcn;\n\tRList *xrefs;\n\tint cov = 0;\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\txrefs = r_anal_function_get_xrefs (fcn);\n\t\tif (xrefs) {\n\t\t\tcov += r_list_length (xrefs);\n\t\t\tr_list_free (xrefs);\n\t\t\txrefs = NULL;\n\t\t}\n\t}\n\treturn cov;\n}\n\nstatic void r_core_anal_info (RCore *core, const char *input) {\n\tint fcns = r_list_length (core->anal->fcns);\n\tint strs = r_flag_count (core->flags, \"str.*\");\n\tint syms = r_flag_count (core->flags, \"sym.*\");\n\tint imps = r_flag_count (core->flags, \"sym.imp.*\");\n\tint code = compute_code (core);\n\tint covr = compute_coverage (core);\n\tint call = compute_calls (core);\n\tint xrfs = r_anal_xrefs_count (core->anal);\n\tint cvpc = (code > 0)? (int)((covr * 100.0) / code): 0;\n\tif (*input == 'j') {\n\t\tPJ *pj = pj_new ();\n\t\tif (!pj) {\n\t\t\treturn;\n\t\t}\n\t\tpj_o (pj);\n\t\tpj_ki (pj, \"fcns\", fcns);\n\t\tpj_ki (pj, \"xrefs\", xrfs);\n\t\tpj_ki (pj, \"calls\", call);\n\t\tpj_ki (pj, \"strings\", strs);\n\t\tpj_ki (pj, \"symbols\", syms);\n\t\tpj_ki (pj, \"imports\", imps);\n\t\tpj_ki (pj, \"covrage\", covr);\n\t\tpj_ki (pj, \"codesz\", code);\n\t\tpj_ki (pj, \"percent\", cvpc);\n\t\tpj_end (pj);\n\t\tr_cons_println (pj_string (pj));\n\t\tpj_free (pj);\n\t} else {\n\t\tr_cons_printf (\"fcns    %d\\n\", fcns);\n\t\tr_cons_printf (\"xrefs   %d\\n\", xrfs);\n\t\tr_cons_printf (\"calls   %d\\n\", call);\n\t\tr_cons_printf (\"strings %d\\n\", strs);\n\t\tr_cons_printf (\"symbols %d\\n\", syms);\n\t\tr_cons_printf (\"imports %d\\n\", imps);\n\t\tr_cons_printf (\"covrage %d\\n\", covr);\n\t\tr_cons_printf (\"codesz  %d\\n\", code);\n\t\tr_cons_printf (\"percent %d%%\\n\", cvpc);\n\t}\n}\n\nstatic void cmd_anal_aad(RCore *core, const char *input) {\n\tRListIter *iter;\n\tRAnalRef *ref;\n\tRList *list = r_list_newf (NULL);\n\tr_anal_xrefs_from (core->anal, list, \"xref\", R_ANAL_REF_TYPE_DATA, UT64_MAX);\n\tr_list_foreach (list, iter, ref) {\n\t\tif (r_io_is_valid_offset (core->io, ref->addr, false)) {\n\t\t\tr_core_anal_fcn (core, ref->at, ref->addr, R_ANAL_REF_TYPE_NULL, 1);\n\t\t}\n\t}\n\tr_list_free (list);\n}\n\nstatic bool archIsThumbable(RCore *core) {\n\tRAsm *as = core ? core->rasm : NULL;\n\tif (as && as->cur && as->bits <= 32 && as->cur->name) {\n\t\treturn strstr (as->cur->name, \"arm\");\n\t}\n\treturn false;\n}\n\nstatic void _CbInRangeAav(RCore *core, ut64 from, ut64 to, int vsize, void *user) {\n\tbool asterisk = user != NULL;\n\tint arch_align = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_ALIGN);\n\tbool vinfun = r_config_get_i (core->config, \"anal.vinfun\");\n\tint searchAlign = r_config_get_i (core->config, \"search.align\");\n\tint align = (searchAlign > 0)? searchAlign: arch_align;\n\tif (align > 1) {\n\t\tif ((from % align) || (to % align)) {\n\t\t\tbool itsFine = false;\n\t\t\tif (archIsThumbable (core)) {\n\t\t\t\tif ((from & 1) || (to & 1)) {\n\t\t\t\t\titsFine = true;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (!itsFine) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (core->anal->verbose) {\n\t\t\t\teprintf (\"Warning: aav: false positive in 0x%08\"PFMT64x\"\\n\", from);\n\t\t\t}\n\t\t}\n\t}\n\tif (!vinfun) {\n\t\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, from, -1);\n\t\tif (fcn) {\n\t\t\treturn;\n\t\t}\n\t}\n\tif (asterisk) {\n\t\tr_cons_printf (\"ax 0x%\"PFMT64x \" 0x%\"PFMT64x \"\\n\", to, from);\n\t\tr_cons_printf (\"Cd %d @ 0x%\"PFMT64x \"\\n\", vsize, from);\n\t\tr_cons_printf (\"f+ aav.0x%08\"PFMT64x \"= 0x%08\"PFMT64x, to, to);\n\t} else {\n\t\tr_anal_xrefs_set (core->anal, from, to, R_ANAL_REF_TYPE_NULL);\n\t\t// r_meta_set (core->anal, 'd', from, from + vsize, NULL);\n\t\tr_core_cmdf (core, \"Cd %d @ 0x%\"PFMT64x \"\\n\", vsize, from);\n\t\tif (!r_flag_get_at (core->flags, to, false)) {\n\t\t\tchar *name = r_str_newf (\"aav.0x%08\"PFMT64x, to);\n\t\t\tr_flag_set (core->flags, name, to, vsize);\n\t\t\tfree (name);\n\t\t}\n\t}\n}\n\nstatic void cmd_anal_aaw(RCore *core, const char *input) {\n\tRIntervalTreeIter it;\n\tRAnalMetaItem *item;\n\tr_interval_tree_foreach (&core->anal->meta, it, item) {\n\t\tRIntervalNode *node = r_interval_tree_iter_get (&it);\n\t\tut64 size = r_meta_item_size (node->start, node->end);\n\t\tif (item->type == R_META_TYPE_DATA && size == core->anal->bits / 8) {\n\t\t\tut8 buf[8] = {0};\n\t\t\tr_io_read_at (core->io, node->start, buf, 8);\n\t\t\tut64 n = r_read_ble (buf, core->print->big_endian, core->anal->bits);\n\t\t\tRFlagItem *fi = r_flag_get_at (core->flags, n, false);\n\t\t\tif (fi) {\n\t\t\t\tchar *fn = r_str_newf (\"r.%s\", fi->name);\n\t\t\t\tr_flag_set (core->flags, fn, node->start, true);\n\t\t\t\tfree (fn);\n\t\t\t} else if (core->anal->verbose) {\n\t\t\t\teprintf (\"Unknown pointer 0x%\"PFMT64x\" at 0x%\"PFMT64x\"\\n\", n, (ut64)node->start);\n\t\t\t}\n\t\t}\n\t}\n}\n\nstatic void cmd_anal_aav(RCore *core, const char *input) {\n#define seti(x,y) r_config_set_i(core->config, x, y);\n#define geti(x) r_config_get_i(core->config, x);\n\tr_return_if_fail (*input == 'v');\n\tut64 o_align = geti (\"search.align\");\n\tconst char *analin = r_config_get (core->config, \"anal.in\");\n\tchar *tmp = strdup (analin);\n\tbool asterisk = strchr (input, '*');\n\tconst bool is_debug = r_config_get_i (core->config, \"cfg.debug\");\n\tint archAlign = r_anal_archinfo (core->anal, R_ANAL_ARCHINFO_ALIGN);\n\tseti (\"search.align\", archAlign);\n\tr_config_set (core->config, \"anal.in\", \"io.maps.x\");\n\toldstr = r_print_rowlog (core->print, \"Finding xrefs in noncode section (e anal.in=io.maps.x)\");\n\tr_print_rowlog_done (core->print, oldstr);\n\n\tint vsize = 4; // 32bit dword\n\tif (core->rasm->bits == 64) {\n\t\tvsize = 8;\n\t}\n\n\t// body\n\toldstr = r_print_rowlog (core->print, \"Analyze value pointers (aav)\");\n\tr_print_rowlog_done (core->print, oldstr);\n\tr_cons_break_push (NULL, NULL);\n\tif (is_debug) {\n\t\tRList *list = r_core_get_boundaries_prot (core, 0, \"dbg.map\", \"anal\");\n\t\tRListIter *iter;\n\t\tRIOMap *map;\n\t\tif (!list) {\n\t\t\tgoto beach;\n\t\t}\n\t\tr_list_foreach (list, iter, map) {\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\toldstr = r_print_rowlog (core->print, sdb_fmt (\"... from 0x%\"PFMT64x\" to 0x%\"PFMT64x\"\", r_io_map_begin (map),\n\t\t\t\tr_io_map_end (map)));\n\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t(void)r_core_search_value_in_range (core, map->itv,\n\t\t\t\tr_io_map_begin (map), r_io_map_end (map), vsize, _CbInRangeAav, (void *)(size_t)asterisk);\n\t\t}\n\t\tr_list_free (list);\n\t} else {\n\t\tRList *list = r_core_get_boundaries_prot (core, 0, NULL, \"anal\");\n\t\tif (!list) {\n\t\t\tgoto beach;\n\t\t}\n\t\tRListIter *iter, *iter2;\n\t\tRIOMap *map, *map2;\n\t\tut64 from = UT64_MAX;\n\t\tut64 to = UT64_MAX;\n\t\t// find values pointing to non-executable regions\n\t\tr_list_foreach (list, iter2, map2) {\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//TODO: Reduce multiple hits for same addr\n\t\t\tfrom = r_itv_begin (map2->itv);\n\t\t\tto = r_itv_end (map2->itv);\n\t\t\toldstr = r_print_rowlog (core->print, sdb_fmt (\"Value from 0x%08\"PFMT64x \" to 0x%08\" PFMT64x \" (aav)\", from, to));\n\t\t\tif ((to - from) > MAX_SCAN_SIZE) {\n\t\t\t\teprintf (\"Warning: Skipping large region\\n\");\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\tr_list_foreach (list, iter, map) {\n\t\t\t\tut64 begin = r_io_map_begin (map);\n\t\t\t\tut64 end = r_io_map_end (map);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tif (end - begin > UT32_MAX) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Skipping huge range\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\toldstr = r_print_rowlog (core->print, sdb_fmt (\"0x%08\"PFMT64x\"-0x%08\"PFMT64x\" in 0x%\"PFMT64x\"-0x%\"PFMT64x\" (aav)\", from, to, begin, end));\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t(void)r_core_search_value_in_range (core, map->itv, from, to, vsize, _CbInRangeAav, (void *)(size_t)asterisk);\n\t\t\t}\n\t\t}\n\t\tr_list_free (list);\n\t}\nbeach:\n\tr_cons_break_pop ();\n\t// end\n\tr_config_set (core->config, \"anal.in\", tmp);\n\tfree (tmp);\n\tseti (\"search.align\", o_align);\n}\n\nstatic void cmd_anal_abt(RCore *core, const char *input) {\n\tswitch (*input) {\n\tcase 'e':\n\t\t{\n\t\tint n = 1;\n\t\tchar *p = strchr (input + 1, ' ');\n\t\tif (!p) {\n\t\t\teprintf (\"Usage: abte [addr] # emulate from beginning of function to the given address.\\n\");\n\t\t\treturn;\n\t\t}\n\t\tut64 addr = r_num_math (core->num, p + 1);\n\t\tRList *paths = r_core_anal_graph_to (core, addr, n);\n\t\tif (paths) {\n\t\t\tRAnalBlock *bb;\n\t\t\tRList *path;\n\t\t\tRListIter *pathi;\n\t\t\tRListIter *bbi;\n\t\t\tr_cons_printf (\"f orip=`dr?PC`\\n\");\n\t\t\tr_list_foreach (paths, pathi, path) {\n\t\t\t\tr_list_foreach (path, bbi, bb) {\n\t\t\t\t\tr_cons_printf (\"# 0x%08\" PFMT64x \"\\n\", bb->addr);\n\t\t\t\t\tif (addr >= bb->addr && addr < bb->addr + bb->size) {\n\t\t\t\t\t\tr_cons_printf (\"aepc 0x%08\"PFMT64x\"\\n\", bb->addr);\n\t\t\t\t\t\tr_cons_printf (\"aesou 0x%08\"PFMT64x\"\\n\", addr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tr_cons_printf (\"aepc 0x%08\"PFMT64x\"\\n\", bb->addr);\n\t\t\t\t\t\tr_cons_printf (\"aesou 0x%08\"PFMT64x\"\\n\", bb->addr + bb->size);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tr_cons_newline ();\n\t\t\t\tr_list_purge (path);\n\t\t\t\tfree (path);\n\t\t\t}\n\t\t\tr_list_purge (paths);\n\t\t\tr_cons_printf (\"aepc orip\\n\");\n\t\t\tfree (paths);\n\t\t}\n\t\t}\n\t\tbreak;\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_abt);\n\t\tbreak;\n\tcase 'j': {\n\t\tut64 addr = r_num_math (core->num, input + 1);\n\t\tRAnalBlock *block = r_anal_get_block_at (core->anal, core->offset);\n\t\tif (!block) {\n\t\t\tbreak;\n\t\t}\n\t\tRList *path = r_anal_block_shortest_path (block, addr);\n\t\tPJ *pj = pj_new ();\n\t\tif (pj) {\n\t\t\tpj_a (pj);\n\t\t\tif (path) {\n\t\t\t\tRListIter *it;\n\t\t\t\tr_list_foreach (path, it, block) {\n\t\t\t\t\tpj_n (pj, block->addr);\n\t\t\t\t}\n\t\t\t}\n\t\t\tpj_end (pj);\n\t\t\tr_cons_println (pj_string (pj));\n\t\t\tpj_free (pj);\n\t\t}\n\t\tr_list_free (path);\n\t\tbreak;\n\t}\n\tcase ' ': {\n\t\tut64 addr = r_num_math (core->num, input + 1);\n\t\tRAnalBlock *block = r_anal_get_block_at (core->anal, core->offset);\n\t\tif (!block) {\n\t\t\tbreak;\n\t\t}\n\t\tRList *path = r_anal_block_shortest_path (block, addr);\n\t\tif (path) {\n\t\t\tRListIter *it;\n\t\t\tr_list_foreach (path, it, block) {\n\t\t\t\tr_cons_printf (\"0x%08\" PFMT64x \"\\n\", block->addr);\n\t\t\t}\n\t\t\tr_list_free (path);\n\t\t}\n\t\tbreak;\n\t}\n\tcase '\\0':\n\t\tr_core_cmdf (core, \"abl, addr/eq/0x%08\"PFMT64x, core->offset);\n\t\tbreak;\n\t}\n}\n\nstatic bool is_unknown_file(RCore *core) {\n\tif (core->bin->cur && core->bin->cur->o) {\n\t\treturn (r_list_empty (core->bin->cur->o->sections));\n\t}\n\treturn true;\n}\n\nstatic bool is_apple_target(RCore *core) {\n\tconst char *arch = r_config_get (core->config, \"asm.arch\");\n\tif (!strstr (arch, \"ppc\") && !strstr (arch, \"arm\") && !strstr (arch, \"x86\")) {\n\t\treturn false;\n\t}\n\tRBinObject *bo = r_bin_cur_object (core->bin);\n\tr_return_val_if_fail (!bo || (bo->plugin && bo->plugin->name), false);\n\treturn bo? strstr (bo->plugin->name, \"mach\"): false;\n}\n\nstatic int cmd_anal_all(RCore *core, const char *input) {\n\tswitch (*input) {\n\tcase '?':\n\t\tr_core_cmd_help (core, help_msg_aa);\n\t\tbreak;\n\tcase 'b': // \"aab\"\n\t\tcmd_anal_blocks (core, input + 1);\n\t\tbreak;\n\tcase 'f':\n\t\tif (input[1] == 'e') {  // \"aafe\"\n\t\t\tr_core_cmd0 (core, \"aef@@F\");\n\t\t} else if (input[1] == 'r') {\n\t\t\tut64 cur = core->offset;\n\t\t\tbool hasnext = r_config_get_i (core->config, \"anal.hasnext\");\n\t\t\tRListIter *iter;\n\t\t\tRIOMap *map;\n\t\t\tRList *list = r_core_get_boundaries_prot (core, R_PERM_X, NULL, \"anal\");\n\t\t\tif (!list) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_list_foreach (list, iter, map) {\n\t\t\t\tr_core_seek (core, r_io_map_begin (map), true);\n\t\t\t\tr_config_set_i (core->config, \"anal.hasnext\", 1);\n\t\t\t\tr_core_cmd0 (core, \"afr\");\n\t\t\t\tr_config_set_i (core->config, \"anal.hasnext\", hasnext);\n\t\t\t}\n\t\t\tr_list_free (list);\n\t\t\tr_core_seek (core, cur, true);\n\t\t} else if (input[1] == 't') { // \"aaft\"\n\t\t\tcmd_anal_aaft (core);\n\t\t} else if (input[1] == 'f') { // \"aaff\"\n\t\t\tflag_every_function (core);\n\t\t} else if (input[1] == 0) { // \"aaf\"\n\t\t\tconst bool analHasnext = r_config_get_i (core->config, \"anal.hasnext\");\n\t\t\tr_config_set_i (core->config, \"anal.hasnext\", true);\n\t\t\tr_core_cmd0 (core, \"afr@@c:isq\");\n\t\t\tr_config_set_i (core->config, \"anal.hasnext\", analHasnext);\n\t\t} else {\n\t\t\tr_core_cmd_help (core, help_msg_aaf);\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"aac\"\n\t\tswitch (input[1]) {\n\t\tcase '*': // \"aac*\"\n\t\t\tcmd_anal_calls (core, input + 1, true, false);\n\t\t\tbreak;\n\t\tcase 'i': // \"aaci\"\n\t\t\tcmd_anal_calls (core, input + 1, input[2] == '*', true);\n\t\t\tbreak;\n\t\tcase '?': // \"aac?\"\n\t\t\teprintf (\"Usage: aac, aac* or aaci (imports xrefs only)\\n\");\n\t\t\tbreak;\n\t\tdefault: // \"aac\"\n\t\t\tcmd_anal_calls (core, input + 1, false, false);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"aaj\"\n\t\tcmd_anal_jumps (core, input + 1);\n\t\tbreak;\n\tcase 'd': // \"aad\"\n\t\tcmd_anal_aad (core, input);\n\t\tbreak;\n\tcase 'v': // \"aav\"\n\t\tcmd_anal_aav (core, input);\n\t\tbreak;\n\tcase 'w': // \"aaw\"\n\t\tcmd_anal_aaw (core, input);\n\t\tbreak;\n\tcase 'u': // \"aau\" - print areas not covered by functions\n\t\tr_core_anal_nofunclist (core, input + 1);\n\t\tbreak;\n\tcase 'i': // \"aai\"\n\t\tr_core_anal_info (core, input + 1);\n\t\tbreak;\n\tcase 's': // \"aas\"\n\t\tr_core_cmd0 (core, \"af @@= `isq~[0]`\");\n\t\tr_core_cmd0 (core, \"af @@f:entry*\");\n\t\tbreak;\n\tcase 'S': // \"aaS\"\n\t\tr_core_cmd0 (core, \"af @@f:sym.*\");\n\t\tr_core_cmd0 (core, \"af @@f:entry*\");\n\t\tbreak;\n\tcase 'F': // \"aaF\" \"aaFa\"\n\t\tif (!input[1] || input[1] == ' ' || input[1] == 'a') {\n\t\t\tr_core_anal_inflags (core, input + 1);\n\t\t} else {\n\t\t\teprintf (\"Usage: aaF[a] - analyze functions in flag bounds (aaFa uses af/a2f instead of af+/afb+)\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'n': // \"aan\"\n\t\tswitch (input[1]) {\n\t\tcase 'r': // \"aanr\" // all noreturn propagation\n\t\t\tr_core_anal_propagate_noreturn (core, UT64_MAX);\n\t\t\tbreak;\n\t\tcase 'g': // \"aang\"\n\t\t\tr_core_anal_autoname_all_golang_fcns (core);\n\t\t\tbreak;\n\t\tcase '?':\n\t\t\teprintf (\"Usage: aan[rg]\\n\");\n\t\t\teprintf (\"aan  : autoname all functions\\n\");\n\t\t\teprintf (\"aang : autoname all golang functions\\n\");\n\t\t\teprintf (\"aanr : auto-noreturn propagation\\n\");\n\t\t\tbreak;\n\t\tdefault: // \"aan\"\n\t\t\tr_core_anal_autoname_all_fcns (core);\n\t\t}\n\t\tbreak;\n\tcase 'p': // \"aap\"\n\t\tif (input[1] == '?') {\n\t\t\t// TODO: accept parameters for ranges\n\t\t\teprintf (\"Usage: /aap   ; find in memory for function preludes\");\n\t\t} else {\n\t\t\tr_core_search_preludes (core, true);\n\t\t}\n\t\tbreak;\n\tcase '\\0': // \"aa\"\n\tcase 'a':\n\t\tif (input[0] && (input[1] == '?' || (input[1] && input[2] == '?'))) {\n\t\t\tr_cons_println (\"Usage: See aa? for more help\");\n\t\t} else {\n\t\t\tbool didAap = false;\n\t\t\tchar *dh_orig = NULL;\n\t\t\tif (!strncmp (input, \"aaaaa\", 5)) {\n\t\t\t\teprintf (\"An r2 developer is coming to your place to manually analyze this program. Please wait for it\\n\");\n\t\t\t\tif (r_cons_is_interactive ()) {\n\t\t\t\t\tr_cons_any_key (NULL);\n\t\t\t\t}\n\t\t\t\tgoto jacuzzi;\n\t\t\t}\n\t\t\tut64 curseek = core->offset;\n\t\t\toldstr = r_print_rowlog (core->print, \"Analyze all flags starting with sym. and entry0 (aa)\");\n\t\t\tr_cons_break_push (NULL, NULL);\n\t\t\tr_cons_break_timeout (r_config_get_i (core->config, \"anal.timeout\"));\n\t\t\tr_core_anal_all (core);\n\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t// Run pending analysis immediately after analysis\n\t\t\t// Usefull when running commands with \";\" or via r2 -c,-i\n\t\t\tdh_orig = core->dbg->h\n\t\t\t\t? strdup (core->dbg->h->name)\n\t\t\t\t: strdup (\"esil\");\n\t\t\tif (core->io->desc && core->io->desc->plugin && !core->io->desc->plugin->isdbg) {\n\t\t\t\t//use dh_origin if we are debugging\n\t\t\t\tR_FREE (dh_orig);\n\t\t\t}\n\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\tgoto jacuzzi;\n\t\t\t}\n\t\t\tr_cons_clear_line (1);\n\t\t\tbool cfg_debug = r_config_get_b (core->config, \"cfg.debug\");\n\t\t\tif (*input == 'a') { // \"aaa\"\n\t\t\t\tif (r_str_startswith (r_config_get (core->config, \"bin.lang\"), \"go\")) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Find function and symbol names from golang binaries (aang)\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tr_core_anal_autoname_all_golang_fcns (core);\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Analyze all flags starting with sym.go. (aF @@f:sym.go.*)\");\n\t\t\t\t\tr_core_cmd0 (core, \"aF @@f:sym.go.*\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t}\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tif (!cfg_debug) {\n\t\t\t\t\tif (dh_orig && strcmp (dh_orig, \"esil\")) {\n\t\t\t\t\t\tr_core_cmd0 (core, \"dL esil\");\n\t\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tint c = r_config_get_i (core->config, \"anal.calls\");\n\t\t\t\tr_config_set_i (core->config, \"anal.calls\", 1);\n\t\t\t\tr_core_cmd0 (core, \"s $S\");\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t}\n\n\t\t\t\toldstr = r_print_rowlog (core->print, \"Analyze function calls (aac)\");\n\t\t\t\t(void)cmd_anal_calls (core, \"\", false, false); // \"aac\"\n\t\t\t\tr_core_seek (core, curseek, true);\n\t\t\t\t// oldstr = r_print_rowlog (core->print, \"Analyze data refs as code (LEA)\");\n\t\t\t\t// (void) cmd_anal_aad (core, NULL); // \"aad\"\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t}\n\n\t\t\t\tif (is_unknown_file (core)) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"find and analyze function preludes (aap)\");\n\t\t\t\t\t(void)r_core_search_preludes (core, false); // \"aap\"\n\t\t\t\t\tdidAap = true;\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\toldstr = r_print_rowlog (core->print, \"Analyze len bytes of instructions for references (aar)\");\n\t\t\t\t(void)r_core_anal_refs (core, \"\"); // \"aar\"\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t}\n\t\t\t\tif (is_apple_target (core)) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Check for objc references (aao)\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tcmd_anal_objc (core, input + 1, true);\n\t\t\t\t}\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\toldstr = r_print_rowlog (core->print, \"Finding and parsing C++ vtables (avrr)\");\n\t\t\t\tr_core_cmd0 (core, \"avrr\");\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tr_config_set_i (core->config, \"anal.calls\", c);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t}\n\t\t\t\tif (!r_str_startswith (r_config_get (core->config, \"asm.arch\"), \"x86\")) {\n\t\t\t\t\tr_core_cmd0 (core, \"aav\");\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\tif (cfg_debug) {\n\t\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Skipping function emulation in debugger mode (aaef)\");\n\t\t\t\t\t\t// nothing to do\n\t\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tbool ioCache = r_config_get_i (core->config, \"io.pcache\");\n\t\t\t\t\t\tr_config_set_i (core->config, \"io.pcache\", 1);\n\t\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Emulate functions to find computed references (aaef)\");\n\t\t\t\t\t\tr_core_cmd0 (core, \"aaef\");\n\t\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\t\tr_config_set_i (core->config, \"io.pcache\", ioCache);\n\t\t\t\t\t}\n\t\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\t\tgoto jacuzzi;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (r_config_get_i (core->config, \"anal.autoname\")) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Speculatively constructing a function name \"\n\t\t\t\t\t                         \"for fcn.* and sym.func.* functions (aan)\");\n\t\t\t\t\tr_core_anal_autoname_all_fcns (core);\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t}\n\t\t\t\tif (core->anal->opt.vars) {\n\t\t\t\t\tRAnalFunction *fcni;\n\t\t\t\t\tRListIter *iter;\n\t\t\t\t\tr_list_foreach (core->anal->fcns, iter, fcni) {\n\t\t\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t}\n\t\t\t\t\t\tRList *list = r_anal_var_list (core->anal, fcni, 'r');\n\t\t\t\t\t\tif (!r_list_empty (list)) {\n\t\t\t\t\t\t\tr_list_free (list);\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\t\t\t\t\t\t//extract only reg based var here\n\t\t\t\t\t\tr_core_recover_vars (core, fcni, true);\n\t\t\t\t\t\tr_list_free (list);\n\t\t\t\t\t}\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t}\n\t\t\t\tif (!sdb_isempty (core->anal->sdb_zigns)) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Check for zignature from zigns folder (z/)\");\n\t\t\t\t\tr_core_cmd0 (core, \"z/\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t}\n\t\t\t\tif (cfg_debug) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Skipping type matching analysis in debugger mode (aaft)\");\n\t\t\t\t\t// nothing to do\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t} else {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Type matching analysis for all functions (aaft)\");\n\t\t\t\t\tr_core_cmd0 (core, \"aaft\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t}\n\t\t\t\tr_core_task_yield (&core->tasks);\n\n\t\t\t\toldstr = r_print_rowlog (core->print, \"Propagate noreturn information (aanr)\");\n\t\t\t\tr_core_anal_propagate_noreturn (core, UT64_MAX);\n\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\tr_core_task_yield (&core->tasks);\n\n\t\t\t\t// apply dwarf function information\n\t\t\t\tSdb *dwarf_sdb = sdb_ns (core->anal->sdb, \"dwarf\", 0);\n\t\t\t\tif (dwarf_sdb) {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Integrate dwarf function information.\");\n\t\t\t\t\tr_anal_dwarf_integrate_functions (core->anal, core->flags, dwarf_sdb);\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t}\n\n\t\t\t\tif (input[1] == 'a') { // \"aaaa\"\n\t\t\t\t\tif (!didAap) {\n\t\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Finding function preludes\");\n\t\t\t\t\t\t(void)r_core_search_preludes (core, false); // \"aap\"\n\t\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t\t}\n\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Enable constraint types analysis for variables\");\n\t\t\t\t\tr_config_set (core->config, \"anal.types.constraint\", \"true\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t} else {\n\t\t\t\t\toldstr = r_print_rowlog (core->print, \"Use -AA or aaaa to perform additional experimental analysis.\");\n\t\t\t\t\tr_print_rowlog_done (core->print, oldstr);\n\t\t\t\t}\n\t\t\t\tr_core_cmd0 (core, \"s-\");\n\t\t\t\tif (dh_orig) {\n\t\t\t\t\tr_core_cmdf (core, \"dL %s\", dh_orig);\n\t\t\t\t\tr_core_task_yield (&core->tasks);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_core_seek (core, curseek, true);\n\t\tjacuzzi:\n\t\t\t// XXX this shouldnt be called. flags muts be created wheen the function is registered\n\t\t\tflag_every_function (core);\n\t\t\tr_core_anal_propagate_noreturn (core, UT64_MAX);\n\t\t\tr_cons_break_pop ();\n\t\t\tR_FREE (dh_orig);\n\t\t}\n\t\tbreak;\n\tcase 't': { // \"aat\"\n\t\tchar *off = input[1]? r_str_trim_dup (input + 2): NULL;\n\t\tRAnalFunction *fcn;\n\t\tRListIter *it;\n\t\tif (off && *off) {\n\t\t\tut64 addr = r_num_math (NULL, off);\n\t\t\tfcn = r_anal_get_function_at (core->anal, core->offset);\n\t\t\tif (fcn) {\n\t\t\t\tr_core_link_stroff (core, fcn);\n\t\t\t} else {\n\t\t\t\teprintf (\"Cannot find function at %08\" PFMT64x \"\\n\", addr);\n\t\t\t}\n\t\t} else {\n\t\t\tif (r_list_empty (core->anal->fcns)) {\n\t\t\t\teprintf (\"Couldn't find any functions\\n\");\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tr_list_foreach (core->anal->fcns, it, fcn) {\n\t\t\t\tif (r_cons_is_breaked ()) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tr_core_link_stroff (core, fcn);\n\t\t\t}\n\t\t}\n\t\tfree (off);\n\t\tbreak;\n\t}\n\tcase 'T': // \"aaT\"\n\t\tcmd_anal_aftertraps (core, input + 1);\n\t\tbreak;\n\tcase 'o': // \"aao\"\n\t\tcmd_anal_objc (core, input + 1, false);\n\t\tbreak;\n\tcase 'e': // \"aae\"\n\t\tif (input[1] == 'f') { // \"aaef\"\n\t\t\tRListIter *it;\n\t\t\tRAnalFunction *fcn;\n\t\t\tut64 cur_seek = core->offset;\n\t\t\tr_list_foreach (core->anal->fcns, it, fcn) {\n\t\t\t\tr_core_seek (core, fcn->addr, true);\n\t\t\t\tr_core_anal_esil (core, \"f\", NULL);\n\t\t\t\t// __anal_esil_function (core, fcn->addr);\n\t\t\t}\n\t\t\tr_core_seek (core, cur_seek, true);\n\t\t} else if (input[1] == ' ') {\n\t\t\tconst char *len = (char *)input + 1;\n\t\t\tchar *addr = strchr (input + 2, ' ');\n\t\t\tif (addr) {\n\t\t\t\t*addr++ = 0;\n\t\t\t}\n\t\t\tr_core_anal_esil (core, len, addr);\n\t\t} else {\n\t\t\tut64 at = core->offset;\n\t\t\tRIOMap *map;\n\t\t\tRListIter *iter;\n\t\t\tRList *list = r_core_get_boundaries_prot (core, -1, NULL, \"anal\");\n\t\t\tif (!list) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (!strcmp (\"range\", r_config_get (core->config, \"anal.in\"))) {\n\t\t\t\tut64 from = r_config_get_i (core->config, \"anal.from\");\n\t\t\t\tut64 to = r_config_get_i (core->config, \"anal.to\");\n\t\t\t\tif (to > from) {\n\t\t\t\t\tchar *len = r_str_newf (\" 0x%\"PFMT64x, to - from);\n\t\t\t\t\tr_core_seek (core, from, true);\n\t\t\t\t\tr_core_anal_esil (core, len, NULL);\n\t\t\t\t\tfree (len);\n\t\t\t\t} else {\n\t\t\t\t\teprintf (\"Assert: anal.from > anal.to\\n\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tr_list_foreach (list, iter, map) {\n\t\t\t\t\tif (map->perm & R_PERM_X) {\n\t\t\t\t\t\tchar *ss = r_str_newf (\" 0x%\"PFMT64x, r_io_map_size (map));\n\t\t\t\t\t\tr_core_seek (core, r_io_map_begin (map), true);\n\t\t\t\t\t\tr_core_anal_esil (core, ss, NULL);\n\t\t\t\t\t\tfree (ss);\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tr_list_free (list);\n\t\t\t}\n\t\t\tr_core_seek (core, at, true);\n\t\t}\n\t\tbreak;\n\tcase 'r':\n\t\t(void)r_core_anal_refs (core, input + 1);\n\t\tbreak;\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_aa);\n\t\tbreak;\n\t}\n\n\treturn true;\n}\n\nstatic bool anal_fcn_data(RCore *core, const char *input) {\n\tRAnalFunction *fcn = r_anal_get_fcn_in (core->anal, core->offset, R_ANAL_FCN_TYPE_ANY);\n\tif (fcn) {\n\t\tint i;\n\t\tbool gap = false;\n\t\tut64 gap_addr = UT64_MAX;\n\t\tut32 fcn_size = r_anal_function_size_from_entry (fcn);\n\t\tchar *bitmap = calloc (1, fcn_size);\n\t\tif (bitmap) {\n\t\t\tRAnalBlock *b;\n\t\t\tRListIter *iter;\n\t\t\tr_list_foreach (fcn->bbs, iter, b) {\n\t\t\t\tint f = b->addr - fcn->addr;\n\t\t\t\tint t = R_MIN (f + b->size, fcn_size);\n\t\t\t\tif (f >= 0) {\n\t\t\t\t\twhile (f < t) {\n\t\t\t\t\t\tbitmap[f++] = 1;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tfor (i = 0; i < fcn_size; i++) {\n\t\t\tut64 here = fcn->addr + i;\n\t\t\tif (bitmap && bitmap[i]) {\n\t\t\t\tif (gap) {\n\t\t\t\t\tr_cons_printf (\"Cd %\" PFMT64u \" @ 0x%08\"PFMT64x\"\\n\", here - gap_addr, gap_addr);\n\t\t\t\t\tgap = false;\n\t\t\t\t}\n\t\t\t\tgap_addr = UT64_MAX;\n\t\t\t} else {\n\t\t\t\tif (!gap) {\n\t\t\t\t\tgap = true;\n\t\t\t\t\tgap_addr = here;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\tif (gap) {\n\t\t\tr_cons_printf (\"Cd %\" PFMT64u \" @ 0x%08\" PFMT64x \"\\n\", fcn->addr + fcn_size - gap_addr, gap_addr);\n\t\t}\n\t\tfree (bitmap);\n\t\treturn true;\n\t}\n\treturn false;\n}\n\nstatic bool anal_fcn_data_gaps(RCore *core, const char *input) {\n\tut64 end = UT64_MAX;\n\tRAnalFunction *fcn;\n\tRListIter *iter;\n\tint i, wordsize = (core->rasm->bits == 64)? 8: 4;\n\tr_list_sort (core->anal->fcns, cmpaddr);\n\tr_list_foreach (core->anal->fcns, iter, fcn) {\n\t\tif (end != UT64_MAX) {\n\t\t\tint range = fcn->addr - end;\n\t\t\tif (range > 0) {\n\t\t\t\tfor (i = 0; i + wordsize < range; i+= wordsize) {\n\t\t\t\t\tr_cons_printf (\"Cd %d @ 0x%08\"PFMT64x\"\\n\", wordsize, end + i);\n\t\t\t\t}\n\t\t\t\tr_cons_printf (\"Cd %d @ 0x%08\"PFMT64x\"\\n\", range - i, end + i);\n\t\t\t\t//r_cons_printf (\"Cd %d @ 0x%08\"PFMT64x\"\\n\", range, end);\n\t\t\t}\n\t\t}\n\t\tend = fcn->addr + r_anal_function_size_from_entry (fcn);\n\t}\n\treturn true;\n}\n\nstatic void cmd_anal_rtti(RCore *core, const char *input) {\n\tswitch (input[0]) {\n\tcase '\\0': // \"avr\"\n\tcase 'j': // \"avrj\"\n\t\tr_anal_rtti_print_at_vtable (core->anal, core->offset, input[0]);\n\t\tbreak;\n\tcase 'a': // \"avra\"\n\t\tr_anal_rtti_print_all (core->anal, input[1]);\n\t\tbreak;\n\tcase 'r': // \"avrr\"\n\t\tr_anal_rtti_recover_all (core->anal);\n\t\tbreak;\n\tcase 'D': { // \"avrD\"\n\t\tchar *name = r_str_trim_dup (input + 1);\n\t\tchar *demangled = r_anal_rtti_demangle_class_name (core->anal, name);\n\t\tfree (name);\n\t\tif (demangled) {\n\t\t\tr_cons_println (demangled);\n\t\t\tfree (demangled);\n\t\t}\n\t\tbreak;\n\t}\n\tdefault :\n\t\tr_core_cmd_help (core, help_msg_av);\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_avg(RCore *core, const char* input) {\n\tswitch (input[0]) {\n\tcase ' ':\n\t\tif (strchr (input + 1, ' ')) {\n\t\t\tchar *a = r_str_trim_dup (input + 1);\n\t\t\tchar *b = strchr (a, ' ');\n\t\t\tif (b) {\n\t\t\t\t*b++ = 0;\n\t\t\t\tr_anal_global_add (core->anal, core->offset, a, b);\n\t\t\t} else {\n\t\t\t\tRFlagItem *fi = r_anal_global_get (core->anal, core->offset);\n\t\t\t\tif (fi) {\n\t\t\t\t\teprintf (\"type %s\\n\", fi->type);\n\t\t\t\t}\n\t\t\t}\n\t\t\tfree (a);\n\t\t}\n\t\tbreak;\n\tcase '-':\n\t\tr_anal_global_del (core->anal, core->offset);\n\t\tbreak;\n\tcase '\\0': // \"av\"\n\t\tr_core_cmd0 (core, \"fs+globals;f;fs-\");\n\t\tbreak;\n\tdefault :\n\t\tr_core_cmd_help (core, help_msg_avg);\n\t\tbreak;\n\t}\n}\nstatic void cmd_anal_virtual_functions(RCore *core, const char* input) {\n\tswitch (input[0]) {\n\tcase 'g':\n\t\tcmd_avg (core, input + 1);\n\t\tbreak;\n\tcase '\\0': // \"av\"\n\tcase '*': // \"av*\"\n\tcase 'j': // \"avj\"\n\t\tr_anal_list_vtables (core->anal, input[0]);\n\t\tbreak;\n\tcase 'r': // \"avr\"\n\t\tcmd_anal_rtti (core, input + 1);\n\t\tbreak;\n\tdefault :\n\t\tr_core_cmd_help (core, help_msg_av);\n\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_class_method(RCore *core, const char *input) {\n\tRAnalClassErr err = R_ANAL_CLASS_ERR_SUCCESS;\n\tchar c = input[0];\n\tswitch (c) {\n\tcase ' ': // \"acm\"\n\tcase '-': // \"acm-\"\n\tcase 'n': { // \"acmn\"\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\teprintf (\"No class name given.\\n\");\n\t\t\tbreak;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (!end) {\n\t\t\teprintf (\"No method name given.\\n\");\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\t\t*end = '\\0';\n\t\tchar *name_str = end + 1;\n\n\t\tif (c == ' ' || c == 'n') {\n\t\t\tend = strchr (name_str, ' ');\n\t\t\tif (!end) {\n\t\t\t\tif (c == ' ') {\n\t\t\t\t\teprintf (\"No offset given.\\n\");\n\t\t\t\t} else if (c == 'n') {\n\t\t\t\t\teprintf (\"No new method name given.\\n\");\n\t\t\t\t}\n\t\t\t\tfree (cstr);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t*end = '\\0';\n\t\t}\n\n\t\tif (c == ' ') {\n\t\t\tchar *addr_str = end + 1;\n\t\t\tend = strchr (addr_str, ' ');\n\t\t\tif (end) {\n\t\t\t\t*end = '\\0';\n\t\t\t}\n\n\t\t\tRAnalMethod meth;\n\t\t\tmeth.name = name_str;\n\t\t\tmeth.addr = r_num_get (core->num, addr_str);\n\t\t\tmeth.vtable_offset = -1;\n\t\t\tif (end) {\n\t\t\t\tmeth.vtable_offset = (int)r_num_get (core->num, end + 1);\n\t\t\t}\n\t\t\terr = r_anal_class_method_set (core->anal, cstr, &meth);\n\t\t} else if (c == 'n') {\n\t\t\tchar *new_name_str = end + 1;\n\t\t\tend = strchr (new_name_str, ' ');\n\t\t\tif (end) {\n\t\t\t\t*end = '\\0';\n\t\t\t}\n\n\t\t\terr = r_anal_class_method_rename (core->anal, cstr, name_str, new_name_str);\n\t\t} else if (c == '-') {\n\t\t\terr = r_anal_class_method_delete (core->anal, cstr, name_str);\n\t\t}\n\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ac);\n\t\tbreak;\n\t}\n\n\tswitch (err) {\n\t\tcase R_ANAL_CLASS_ERR_NONEXISTENT_CLASS:\n\t\t\teprintf (\"Class does not exist.\\n\");\n\t\t\tbreak;\n\t\tcase R_ANAL_CLASS_ERR_NONEXISTENT_ATTR:\n\t\t\teprintf (\"Method does not exist.\\n\");\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tbreak;\n\t}\n}\n\nstatic void cmd_anal_class_base(RCore *core, const char *input) {\n\tRAnalClassErr err = R_ANAL_CLASS_ERR_SUCCESS;\n\tchar c = input[0];\n\tswitch (c) {\n\tcase ' ': // \"acb\"\n\tcase '-': { // \"acb-\"\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\teprintf (\"No class name given.\\n\");\n\t\t\treturn;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t\tend++;\n\t\t}\n\n\t\tif (!end || *end == '\\0') {\n\t\t\tif (c == ' ') {\n\t\t\t\tr_anal_class_list_bases (core->anal, cstr);\n\t\t\t} else /*if (c == '-')*/ {\n\t\t\t\teprintf (\"No base id given.\\n\");\n\t\t\t}\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\n\t\tchar *base_str = end;\n\t\tend = strchr (base_str, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t}\n\n\t\tif (c == '-') {\n\t\t\terr = r_anal_class_base_delete (core->anal, cstr, base_str);\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\n\t\tRAnalBaseClass base;\n\t\tbase.id = NULL;\n\t\tbase.offset = 0;\n\t\tbase.class_name = base_str;\n\n\t\tif (end) {\n\t\t\tbase.offset = r_num_get (core->num, end + 1);\n\t\t}\n\n\t\terr = r_anal_class_base_set (core->anal, cstr, &base);\n\t\tfree (base.id);\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ac);\n\t\tbreak;\n\t}\n\n\tif (err == R_ANAL_CLASS_ERR_NONEXISTENT_CLASS) {\n\t\teprintf (\"Class does not exist.\\n\");\n\t}\n}\n\nstatic void cmd_anal_class_vtable(RCore *core, const char *input) {\n\tRAnalClassErr err = R_ANAL_CLASS_ERR_SUCCESS;\n\tchar c = input[0];\n\tswitch (c) {\n\tcase 'f': {// \"acvf\" [offset] ([class_name])\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\teprintf (\"No offset given\\n\");\n\t\t\treturn;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t\tend++;\n\t\t}\n\t\tut64 offset_arg = r_num_get (core->num, cstr); // Should I allow negative offset?\n\t\tchar *class_arg = NULL;\n\t\tif (end) {\n\t\t\tclass_arg = (char *)r_str_trim_head_ro (end);\n\t\t}\n\n\t\tif (class_arg) {\n\t\t\tend = (char *)r_str_trim_head_wp (class_arg); // in case of extra unwanted stuff at the cmd end\n\t\t\t*end = '\\0';\n\t\t}\n\t\tr_anal_class_list_vtable_offset_functions (core->anal, class_arg, offset_arg);\n\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tcase ' ': // \"acv\"\n\tcase '-': { // \"acv-\"\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\teprintf (\"No class name given.\\n\");\n\t\t\treturn;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t\tend++;\n\t\t}\n\n\t\tif (!end || *end == '\\0') {\n\t\t\tif (c == ' ') {\n\t\t\t\tr_anal_class_list_vtables (core->anal, cstr);\n\t\t\t} else /*if (c == '-')*/ {\n\t\t\t\teprintf (\"No vtable id given. See acv [class name].\\n\");\n\t\t\t}\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\n\t\tchar *arg1_str = end;\n\n\t\tif (c == '-') {\n\t\t\terr = r_anal_class_vtable_delete (core->anal, cstr, arg1_str);\n\t\t\tfree (cstr);\n\t\t\tbreak;\n\t\t}\n\n\t\tend = strchr (arg1_str, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t}\n\n\t\tRAnalVTable vtable;\n\t\tvtable.id = NULL;\n\t\tvtable.addr = r_num_get (core->num, arg1_str);\n\t\tvtable.offset = 0;\n\t\tvtable.size = 0;\n\n\t\tchar *arg3_str = NULL;\n\t\tif (end) {\n\t\t\tvtable.offset = r_num_get (core->num, end + 1);\n\t\t\t// end + 1 won't work on extra whitespace between arguments, TODO\n\t\t\targ3_str = strchr (end+1, ' ');\n\t\t}\n\n\t\tif (arg3_str) {\n\t\t\tvtable.size = r_num_get (core->num, arg3_str + 1);\n\t\t}\n\n\t\terr = r_anal_class_vtable_set (core->anal, cstr, &vtable);\n\t\tfree (vtable.id);\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_ac);\n\t\tbreak;\n\t}\n\n\tif (err == R_ANAL_CLASS_ERR_NONEXISTENT_CLASS) {\n\t\teprintf (\"Class does not exist.\\n\");\n\t}\n}\n\nstatic void cmd_anal_classes(RCore *core, const char *input) {\n\tswitch (input[0]) {\n\tcase 'l': // \"acl\"\n\t\tif (input[1] == 'l') { // \"acll\" (name)\n\t\t\tchar mode = 0;\n\t\t\tint arg_offset = 2;\n\t\t\tif (input[2] == 'j') {\n\t\t\t\targ_offset++;\n\t\t\t\tmode = 'j';\n\t\t\t}\n\t\t\tconst char *arg = r_str_trim_head_ro (input + arg_offset);\n\t\t\tif (*arg) { // if there is an argument\n\t\t\t\tchar *class_name = strdup (arg);\n\t\t\t\tif (!class_name) {\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\tchar *name_end = (char *)r_str_trim_head_wp (class_name);\n\t\t\t\t*name_end = 0; // trim the whitespace around the name\n\t\t\t\tif (mode == 'j') {\n\t\t\t\t\tPJ *pj = pj_new ();\n\t\t\t\t\tr_anal_class_json (core->anal, pj, class_name);\n\t\t\t\t\tr_cons_printf (\"%s\\n\", pj_string (pj));\n\t\t\t\t\tpj_free (pj);\n\t\t\t\t} else {\n\t\t\t\t\tr_anal_class_print (core->anal, class_name, true);\n\t\t\t\t}\n\t\t\t\tfree (class_name);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tr_anal_class_list (core->anal, input[1]);\n\t\tbreak;\n\tcase ' ': // \"ac\"\n\tcase '-': // \"ac-\"\n\tcase 'n': { // \"acn\"\n\t\tconst char *str = r_str_trim_head_ro (input + 1);\n\t\tif (!*str) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *cstr = strdup (str);\n\t\tif (!cstr) {\n\t\t\tbreak;\n\t\t}\n\t\tchar *end = strchr (cstr, ' ');\n\t\tif (end) {\n\t\t\t*end = '\\0';\n\t\t}\n\t\tif (input[0] == '-') {\n\t\t\tr_anal_class_delete (core->anal, cstr);\n\t\t} else if(input[0] == 'n') {\n\t\t\tif (!end) {\n\t\t\t\teprintf (\"No new class name given.\\n\");\n\t\t\t} else {\n\t\t\t\tchar *new_name = end + 1;\n\t\t\t\tend = strchr (new_name, ' ');\n\t\t\t\tif (end) {\n\t\t\t\t\t*end = '\\0';\n\t\t\t\t}\n\t\t\t\tRAnalClassErr err = r_anal_class_rename (core->anal, cstr, new_name);\n\t\t\t\tif (err == R_ANAL_CLASS_ERR_NONEXISTENT_CLASS) {\n\t\t\t\t\teprintf (\"Class does not exist.\\n\");\n\t\t\t\t} else if (err == R_ANAL_CLASS_ERR_CLASH) {\n\t\t\t\t\teprintf (\"A class with this name already exists.\\n\");\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tr_anal_class_create (core->anal, cstr);\n\t\t}\n\t\tfree (cstr);\n\t\tbreak;\n\t}\n\tcase 'v':\n\t\tcmd_anal_class_vtable (core, input + 1);\n\t\tbreak;\n\tcase 'b': // \"acb\"\n\t\tcmd_anal_class_base (core, input + 1);\n\t\tbreak;\n\tcase 'm': // \"acm\"\n\t\tcmd_anal_class_method (core, input + 1);\n\t\tbreak;\n\tcase 'g': { // \"acg\"\n\t\tRGraph *graph = r_anal_class_get_inheritance_graph (core->anal);\n\t\tif (!graph) {\n\t\t\teprintf (\"Couldn't create graph\");\n\t\t\tbreak;\n\t\t}\n\t\tr_core_graph_print (core, graph, -1, false, input + 1);\n\t\tr_graph_free (graph);\n\t} break;\n\tdefault: // \"ac?\"\n\t\tr_core_cmd_help (core, help_msg_ac);\n\t\tbreak;\n\t}\n}\n\nstatic void show_reg_args(RCore *core, int nargs, RStrBuf *sb) {\n\tint i;\n\tchar regname[8];\n\tif (nargs < 0) {\n\t\tnargs = 4; // default args if not defined\n\t}\n\tfor (i = 0; i < nargs; i++) {\n\t\tsnprintf (regname, sizeof (regname), \"A%d\", i);\n\t\tut64 v = r_reg_getv (core->anal->reg, regname);\n\t\tif (sb) {\n\t\t\tr_strbuf_appendf (sb, \"%s0x%08\"PFMT64x, i?\", \":\"\", v);\n\t\t} else {\n\t\t\tr_cons_printf (\"A%d 0x%08\"PFMT64x\"\\n\", i, v);\n\t\t}\n\t}\n}\n\n// ripped from disasm.c: dupe code from there\n// TODO: Implement aC* and aCj\nstatic void cmd_anal_aC(RCore *core, const char *input) {\n\tbool is_aCer = false;\n\tconst char *cc = r_anal_cc_default (core->anal);\n\tRAnalFuncArg *arg;\n\tRListIter *iter;\n\tRListIter *nextele;\n\tconst char *iarg = strchr (input, ' ');\n\tif (input[0] == 'e' && input[1] == 'f') { // \"aCf\"\n\t\t// hacky :D\n\t\tr_core_cmdf (core, \".aCe* $$ @@=`pdr~call`\");\n\t\treturn;\n\t}\n\tif (iarg) {\n\t\tiarg++;\n\t}\n\tif (!iarg) {\n\t\tr_core_cmd_help (core, help_msg_aC);\n\t\treturn;\n\t}\n\tRStrBuf *sb = r_strbuf_new (\"\");\n\tut64 pcv = r_num_math (core->num, iarg);\n\tif (input[0] == 'e') { // \"aCe\"\n\t\tis_aCer = (input[1] == '*');\n\t\tr_core_cmdf (core, \".abte 0x%08\"PFMT64x, pcv);\n\t}\n\tRAnalOp* op = r_core_anal_op (core, pcv, -1);\n\tif (!op) {\n\t\tr_strbuf_free (sb);\n\t\treturn;\n\t}\n\tbool go_on = true;\n\tif (op->type != R_ANAL_OP_TYPE_CALL) {\n\t\tshow_reg_args (core, -1, sb);\n\t\tgo_on = false;\n\t}\n\tconst char *fcn_name = NULL;\n\tRAnalFunction *fcn;\n\tif (go_on) {\n\t\tfcn = r_anal_get_function_at (core->anal, pcv);\n\t\tif (fcn) {\n\t\t\tfcn_name = fcn->name;\n\t\t} else {\n\t\t\tRFlagItem *item = r_flag_get_i (core->flags, op->jump);\n\t\t\tif (item) {\n\t\t\t\tfcn_name = item->name;\n\t\t\t}\n\t\t}\n\t\tchar *key = (fcn_name)? resolve_fcn_name (core->anal, fcn_name): NULL;\n\t\tif (key) {\n\t\t\tconst char *fcn_type = r_type_func_ret (core->anal->sdb_types, key);\n\t\t\tint nargs = r_type_func_args_count (core->anal->sdb_types, key);\n\t\t\t// remove other comments\n\t\t\tif (fcn_type) {\n\t\t\t\tr_strbuf_appendf (sb, \"%s%s%s(\", r_str_getf (fcn_type),\n\t\t\t\t\t\t(*fcn_type && fcn_type[strlen (fcn_type) - 1] == '*') ? \"\" : \" \",\n\t\t\t\t\t\tr_str_getf (key));\n\t\t\t\tif (!nargs) {\n\t\t\t\t\tr_strbuf_appendf (sb, \"void)\\n\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\teprintf (\"Cannot find any function type..lets just use some standards?\\n\");\n\t\t\t}\n\t\t} else {\n\t\t\tif (is_aCer) {\n\t\t\t\tshow_reg_args (core, -1, sb);\n\t\t\t\tgo_on = true;\n\t\t\t} else {\n\t\t\t\tshow_reg_args (core, -1, NULL);\n\t\t\t\tgo_on = false;\n\t\t\t}\n\t\t}\n\t}\n\tif (go_on) {\n\t\tut64 s_width = (core->anal->bits == 64)? 8: 4;\n\t\tconst char *sp = r_reg_get_name (core->anal->reg, R_REG_NAME_SP);\n\t\tut64 spv = r_reg_getv (core->anal->reg, sp);\n\t\tr_reg_setv (core->anal->reg, sp, spv + s_width); // temporarily set stack ptr to sync with carg.c\n\t\tRList *list = r_core_get_func_args (core, fcn_name);\n\t\tif (!r_list_empty (list)) {\n\t#if 0\n\t\t\tbool warning = false;\n\t\t\tbool on_stack = false;\n\t\t\tr_list_foreach (list, iter, arg) {\n\t\t\t\tif (r_str_startswith (arg->cc_source, \"stack\")) {\n\t\t\t\t\ton_stack = true;\n\t\t\t\t}\n\t\t\t\tif (!arg->size) {\n\t\t\t\t\tr_cons_printf (\"%s: unk_size\", arg->c_type);\n\t\t\t\t\twarning = true;\n\t\t\t\t}\n\t#endif\n\t\t\tr_list_foreach (list, iter, arg) {\n\t\t\t\tnextele = r_list_iter_get_next (iter);\n\t\t\t\tif (!arg->fmt) {\n\t\t\t\t\tr_strbuf_appendf (sb, \"?%s\", nextele? \", \": \"\");\n\t\t\t\t} else {\n\t\t\t\t\t// print_fcn_arg (core, arg->orig_c_type, arg->name, arg->fmt, arg->src, on_stack, 0);\n\t\t\t\t\t// const char *fmt = arg->orig_c_type;\n\t\t\t\t\tut64 addr = arg->src;\n\t\t\t\t\tchar *res = r_core_cmd_strf (core, \"pfq %s @ 0x%08\" PFMT64x, arg->fmt, addr);\n\t\t\t\t\t// r_cons_printf (\"pfq *%s @ 0x%08\" PFMT64x\"\\n\", arg->fmt, addr);\n\t\t\t\t\tr_str_trim (res);\n\t\t\t\t\tr_strbuf_appendf (sb, \"%s\", res);\n\t\t\t\t\tfree (res);\n\t\t\t\t}\n\t\t\t}\n\t\t\tr_strbuf_appendf (sb, \")\");\n\t\t} else {\n\t\t\t// function name not resolved\n\t\t\tint i, nargs = 4; // DEFAULT_NARGS;\n\t\t\tif (fcn) {\n\t\t\t\t// @TODO: fcn->nargs should be updated somewhere and used here instead\n\t\t\t\tnargs = r_anal_var_count (core->anal, fcn, 's', 1) +\n\t\t\t\t\tr_anal_var_count (core->anal, fcn, 'b', 1) +\n\t\t\t\t\tr_anal_var_count (core->anal, fcn, 'r', 1);\n\t\t\t}\n\t\t\tif (nargs > 0) {\n\t\t\t\tif (fcn_name) {\n\t\t\t\t\tr_strbuf_appendf (sb, \"; %s(\", fcn_name);\n\t\t\t\t} else {\n\t\t\t\t\tr_strbuf_appendf (sb, \"; 0x%\"PFMT64x\"(\", pcv);\n\t\t\t\t}\n\t\t\t\tfor (i = 0; i < nargs; i++) {\n\t\t\t\t\tut64 v = r_debug_arg_get (core->dbg, cc, i);\n\t\t\t\t\tr_strbuf_appendf (sb, \"%s0x%\"PFMT64x, i?\", \":\"\", v);\n\t\t\t\t}\n\t\t\t\tr_strbuf_appendf (sb, \")\");\n\t\t\t}\n\t\t}\n\t\tr_reg_setv (core->anal->reg, sp, spv); // reset stack ptr\n\t}\n\tchar *s = r_strbuf_drain (sb);\n\tif (is_aCer) {\n\t\tchar *u = r_base64_encode_dyn (s, -1);\n\t\tif (u) {\n\t\t\tr_cons_printf (\"CCu base64:%s\\n\", u);\n\t\t\tfree (u);\n\t\t}\n\t} else {\n\t\tr_cons_println (s);\n\t}\n\tfree (s);\n}\n\nstatic int cmd_anal(void *data, const char *input) {\n\tconst char *r;\n\tRCore *core = (RCore *)data;\n\tut32 tbs = core->blocksize;\n\tswitch (input[0]) {\n\tcase 'p': // \"ap\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_ap);\n\t\t} else {\n\t\t\tconst ut8 *prelude = (const ut8*)\"\\xe9\\x2d\"; //:fffff000\";\n\t\t\tconst int prelude_sz = 2;\n\t\t\tconst int bufsz = 4096;\n\t\t\tut8 *buf = calloc (1, bufsz);\n\t\t\tut64 off = core->offset;\n\t\t\tif (input[1] == ' ') {\n\t\t\t\toff = r_num_math (core->num, input + 1);\n\t\t\t}\n\t\t\tr_io_read_at (core->io, off - bufsz + prelude_sz, buf, bufsz);\n\t\t\t//const char *prelude = \"\\x2d\\xe9\\xf0\\x47\"; //:fffff000\";\n\t\t\tr_mem_reverse (buf, bufsz);\n\t\t\t//r_print_hexdump (NULL, off, buf, bufsz, 16, -16);\n\t\t\tconst ut8 *pos = r_mem_mem (buf, bufsz, prelude, prelude_sz);\n\t\t\tif (pos) {\n\t\t\t\tint delta = (size_t)(pos - buf);\n\t\t\t\teprintf (\"POS = %d\\n\", delta);\n\t\t\t\teprintf (\"HIT = 0x%\"PFMT64x\"\\n\", off - delta);\n\t\t\t\tr_cons_printf (\"0x%08\"PFMT64x\"\\n\", off - delta);\n\t\t\t} else {\n\t\t\t\teprintf (\"Cannot find prelude\\n\");\n\t\t\t}\n\t\t\tfree (buf);\n\t\t}\n\t\tbreak;\n\tcase '8':  // \"a8\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_a8);\n\t\t\tbreak;\n\t\t}\n\t\tut8 *buf = malloc (strlen (input) + 1);\n\t\tif (buf) {\n\t\t\tint len = r_hex_str2bin (input + 1, buf);\n\t\t\tif (len > 0) {\n\t\t\t\tcore_anal_bytes (core, buf, len, 0, input[1]);\n\t\t\t}\n\t\t\tfree (buf);\n\t\t}\n\t\tbreak;\n\tcase 'b': // \"ab\"\n\t\tswitch (input[1]) {\n\t\tcase '.': // \"ab.\"\n\t\t\tr_core_cmd0 (core, \"ab $$\");\n\t\t\tbreak;\n\t\tcase 'a': // \"aba\"\n\t\t\tr_core_cmdf (core, \"aeab%s\", input + 1);\n\t\t\tbreak;\n\t\tcase 'b': // \"abb\"\n\t\t\tcore_anal_bbs (core, input + 2);\n\t\t\tbreak;\n\t\tcase 'r': // \"abr\"\n\t\t\tcore_anal_bbs_range (core, input + 2);\n\t\t\tbreak;\n\t\tcase ',': // \"ab,\"\n\t\tcase 't': // \"abt\"\n\t\t\tcmd_anal_abt (core, input+2);\n\t\t\tbreak;\n\t\tcase 'l': // \"abl\"\n\t\t\tif (input[2] == '?') {\n\t\t\t\tr_core_cmd_help (core, help_msg_abl);\n\t\t\t} else {\n\t\t\t\tanal_bb_list (core, input + 2);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'j': { // \"abj\"\n\t\t\tut64 addr = core->offset;\n\t\t\tif (input[2] && input[2] != '.') {\n\t\t\t\taddr = r_num_math (core->num, input + 2);\n\t\t\t}\n\t\t\tr_core_cmdf (core, \"afbij @ 0x%\"PFMT64x, addr);\n\t\t\tbreak;\n\t\t}\n\t\tcase 0:\n\t\tcase ' ': { // \"ab \"\n\t\t\t// find block\n\t\t\tut64 addr = core->offset;\n\t\t\tif (input[1] && input[1] != '.') {\n\t\t\t\taddr = r_num_math (core->num, input + 1);\n\t\t\t}\n\t\t\tr_core_cmdf (core, \"afbi @ 0x%\"PFMT64x, addr);\n\t\t\tbreak;\n\t\t}\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_ab);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'c': // \"ac\"\n\t\tcmd_anal_classes (core, input + 1);\n\t\tbreak;\n\tcase 'C': // \"aC\"\n\t\tcmd_anal_aC (core, input + 1);\n\t\tbreak;\n\tcase 'i': cmd_anal_info (core, input + 1); break; // \"ai\"\n\tcase 'r': cmd_anal_reg (core, input + 1); break;  // \"ar\"\n\tcase 'e': cmd_anal_esil (core, input + 1); break; // \"ae\"\n\tcase 'L': return r_core_cmd0 (core, \"e asm.arch=??\"); break;\n\tcase 'o': cmd_anal_opcode (core, input + 1); break; // \"ao\"\n\tcase 'O': cmd_anal_bytes (core, input + 1); break; // \"aO\"\n\tcase 'F': // \"aF\"\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_aF);\n\t\t\tbreak;\n\t\t}\n\t\tr_core_anal_fcn (core, core->offset, UT64_MAX, R_ANAL_REF_TYPE_NULL, 1);\n\t\tbreak;\n\tcase 'f': // \"af\"\n\t\t{\n\t\tint res = cmd_anal_fcn (core, input);\n\t\tif (!res) {\n\t\t\treturn false;\n\t\t}\n\t\t}\n\t\tbreak;\n\tcase 'n': // \"an\"\n\t\t{\n\t\tconst char *name = \"\";\n\t\tbool use_json = false;\n\n\t\tif (input[1] == '?') {\n\t\t\tr_core_cmd_help (core, help_msg_an);\n\t\t\tbreak;\n\t\t}\n\t\tif (input[1] == 'j') {\n\t\t\tuse_json = true;\n\t\t\tinput++;\n\t\t}\n\t\tif (input[1] == ' ') {\n\t\t\tname = input + 1;\n\t\t\twhile (name[0] == ' ') {\n\t\t\t\tname++;\n\t\t\t}\n\t\t\tchar *end = strchr (name, ' ');\n\t\t\tif (end) {\n\t\t\t\t*end = '\\0';\n\t\t\t}\n\t\t}\n\t\tif (R_STR_ISEMPTY (name)) {\n\t\t\tname = NULL;\n\t\t}\n\t\tcmd_an (core, use_json, name);\n\t\t}\n\t\tbreak;\n\tcase 'g': // \"ag\"\n\t\tcmd_anal_graph (core, input + 1);\n\t\tbreak;\n\tcase 's': // \"as\"\n\t\tcmd_anal_syscall (core, input + 1);\n\t\tbreak;\n\tcase 'v': // \"av\"\n\t\tcmd_anal_virtual_functions (core, input + 1);\n\t\tbreak;\n\tcase 'x': // \"ax\"\n\t\tif (!cmd_anal_refs (core, input + 1)) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase '*': // \"a*\"\n\t\tr_core_cmd0 (core, \"afl*\");\n\t\tr_core_cmd0 (core, \"ah*\");\n\t\tr_core_cmd0 (core, \"ax*\");\n\t\tbreak;\n\tcase 'a': // \"aa\"\n\t\tif (!cmd_anal_all (core, input + 1)) {\n\t\t\treturn false;\n\t\t}\n\t\tbreak;\n\tcase 'd': // \"ad\"\n\t\tswitch (input[1]) {\n\t\tcase 'f': // \"adf\"\n\t\t\tif (input[2] == 'g') {\n\t\t\t\tanal_fcn_data_gaps (core, r_str_trim_head_ro (input + 1));\n\t\t\t} else {\n\t\t\t\tanal_fcn_data (core, input + 1);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 't': // \"adt\"\n\t\t\tcmd_anal_trampoline (core, input + 2);\n\t\t\tbreak;\n\t\tcase ' ': { // \"ad\"\n\t\t\tconst int default_depth = 1;\n\t\t\tconst char *p;\n\t\t\tint a, b;\n\t\t\ta = r_num_math (core->num, input + 2);\n\t\t\tp = strchr (input + 2, ' ');\n\t\t\tb = p? r_num_math (core->num, p + 1): default_depth;\n\t\t\tif (a < 1) {\n\t\t\t\ta = 1;\n\t\t\t}\n\t\t\tif (b < 1) {\n\t\t\t\tb = 1;\n\t\t\t}\n\t\t\tr_core_anal_data (core, core->offset, a, b, 0);\n\t\t} break;\n\t\tcase 'k': // \"adk\"\n\t\t\tr = r_anal_data_kind (core->anal,\n\t\t\t\t\tcore->offset, core->block, core->blocksize);\n\t\t\tr_cons_println (r);\n\t\t\tbreak;\n\t\tcase '\\0': // \"ad\"\n\t\t\tr_core_anal_data (core, core->offset, 2 + (core->blocksize / 4), 1, 0);\n\t\t\tbreak;\n\t\tcase '4': // \"ad4\"\n\t\t\tr_core_anal_data (core, core->offset, 2 + (core->blocksize / 4), 1, 4);\n\t\t\tbreak;\n\t\tcase '8': // \"ad8\"\n\t\t\tr_core_anal_data (core, core->offset, 2 + (core->blocksize / 4), 1, 8);\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tr_core_cmd_help (core, help_msg_ad);\n\t\t\tbreak;\n\t\t}\n\t\tbreak;\n\tcase 'h': // \"ah\"\n\t\tcmd_anal_hint (core, input + 1);\n\t\tbreak;\n\tcase '!': // \"a!\"\n\t\tif (core->anal && core->anal->cur && core->anal->cur->cmd_ext) {\n\t\t\treturn core->anal->cur->cmd_ext (core->anal, input + 1);\n\t\t} else {\n\t\t\tr_cons_printf (\"No plugins for this analysis plugin\\n\");\n\t\t}\n\t\tbreak;\n\tcase 'j': // \"aj\"\n\t\tr_core_cmd0 (core, \"aflj\");\n\t\tbreak;\n\tcase 0: // \"a\"\n\t\tr_core_cmd0 (core, \"aai\");\n\t\tbreak;\n\tdefault:\n\t\tr_core_cmd_help (core, help_msg_a);\n#if 0\n\t\tr_cons_printf (\"Examples:\\n\"\n\t\t\t\" f ts @ `S*~text:0[3]`; f t @ section..text\\n\"\n\t\t\t\" f ds @ `S*~data:0[3]`; f d @ section..data\\n\"\n\t\t\t\" .ad t t+ts @ d:ds\\n\",\n\t\t\tNULL);\n#endif\n\t\tbreak;\n\t}\n\tif (tbs != core->blocksize) {\n\t\tr_core_block_size (core, tbs);\n\t}\n\tif (r_cons_is_breaked ()) {\n\t\tr_cons_clear_line (1);\n\t}\n\treturn 0;\n}\n", "/* radare - LGPL - Copyright 2009-2021 - pancake */\n\n#include <r_reg.h>\n#include <r_util.h>\n\ntypedef ut32 ut27;\nstatic ut27 r_read_me27(const ut8 *buf, int boff) {\n\tut27 ret = 0;\n\tr_mem_copybits_delta ((ut8 *)&ret, 18, buf, boff, 9);\n\tr_mem_copybits_delta ((ut8 *)&ret, 9, buf, boff + 9, 9);\n\tr_mem_copybits_delta ((ut8 *)&ret, 0, buf, boff + 18, 9);\n\treturn ret;\n}\n\nR_API ut64 r_reg_get_value_big(RReg *reg, RRegItem *item, utX *val) {\n\tr_return_val_if_fail (reg && item, 0);\n\n\tut64 ret = 0LL;\n\tint off = BITS2BYTES (item->offset);\n\tRRegSet *regset = &reg->regset[item->arena];\n\tif (!regset->arena) {\n\t\treturn 0LL;\n\t}\n\tswitch (item->size) {\n\tcase 80: // word + qword\n\t\tif (regset->arena->bytes && (off + 10 <= regset->arena->size)) {\n\t\t\tval->v80.Low = *((ut64 *)(regset->arena->bytes + off));\n\t\t\tval->v80.High = *((ut16 *)(regset->arena->bytes + off + 8));\n\t\t} else {\n\t\t\teprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\t}\n\t\tret = val->v80.Low;\n\t\tbreak;\n\tcase 96: // dword + qword\n\t\tif (regset->arena->bytes && (off + 12 <= regset->arena->size)) {\n\t\t\tval->v96.Low = *((ut64 *)(regset->arena->bytes + off));\n\t\t\tval->v96.High = *((ut32 *)(regset->arena->bytes + off + 8));\n\t\t} else {\n\t\t\teprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\t}\n\t\tret = val->v96.Low;\n\t\tbreak;\n\tcase 128: // qword + qword\n\t\tif (regset->arena->bytes && (off + 16 <= regset->arena->size)) {\n\t\t\tval->v128.Low = *((ut64 *)(regset->arena->bytes + off));\n\t\t\tval->v128.High = *((ut64 *)(regset->arena->bytes + off + 8));\n\t\t} else {\n\t\t\teprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\t}\n\t\tret = val->v128.Low;\n\t\tbreak;\n\tcase 256:// qword + qword + qword + qword\n\t\tif (regset->arena->bytes && (off + 32 <= regset->arena->size)) {\n\t\t\tval->v256.Low.Low = *((ut64 *)(regset->arena->bytes + off));\n\t\t\tval->v256.Low.High = *((ut64 *)(regset->arena->bytes + off + 8));\n\t\t\tval->v256.High.Low = *((ut64 *)(regset->arena->bytes + off + 16));\n\t\t\tval->v256.High.High = *((ut64 *)(regset->arena->bytes + off + 24));\n\t\t} else {\n\t\t\teprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\t}\n\t\tret = val->v256.Low.Low;\n\t\tbreak;\n\tdefault:\n\t\teprintf (\"r_reg_get_value_big: Bit size %d not supported\\n\", item->size);\n\t\tbreak;\n\t}\n\treturn ret;\n}\n\nR_API ut64 r_reg_get_value(RReg *reg, RRegItem *item) {\n\tr_return_val_if_fail (reg && item, 0);\n\tif (item->offset == -1) {\n\t\treturn 0LL;\n\t}\n\tint off = BITS2BYTES (item->offset);\n\tRRegSet *regset = &reg->regset[item->arena];\n\tif (!regset->arena) {\n\t\treturn 0LL;\n\t}\n\tswitch (item->size) {\n\tcase 1: {\n\t\tint offset = item->offset / 8;\n\t\tif (offset >= regset->arena->size) {\n\t\t\tbreak;\n\t\t}\n\t\treturn (regset->arena->bytes[offset] &\n\t\t\t       (1 << (item->offset % 8)))\n\t\t\t? 1\n\t\t\t: 0;\n\t} break;\n\tcase 4:\n\t\tif (regset->arena->size - off - 1 >= 0) {\n\t\t\treturn (r_read_at_ble8 (regset->arena->bytes, off)) & 0xF;\n\t\t}\n\t\tbreak;\n\tcase 8:\n\t\tif (regset->arena->size - off - 1 >= 0) {\n\t\t\treturn r_read_at_ble8 (regset->arena->bytes, off);\n\t\t}\n\t\tbreak;\n\tcase 16:\n\t\tif (regset->arena->size - off - 2 >= 0) {\n\t\t\treturn r_read_ble16 (regset->arena->bytes + off, reg->big_endian);\n\t\t}\n\t\tbreak;\n\tcase 27:\n\t\tif (off + 3 < regset->arena->size) {\n\t\t\treturn r_read_me27 (regset->arena->bytes + off, 0);\n\t\t}\n\t\tbreak;\n\tcase 32:\n\t\tif (off + 4 <= regset->arena->size) {\n\t\t\treturn r_read_ble32 (regset->arena->bytes + off, reg->big_endian);\n\t\t}\n\t\teprintf (\"r_reg_get_value: 32bit oob read %d\\n\", off);\n\t\tbreak;\n\tcase 64:\n\t\tif (regset->arena && regset->arena->bytes && (off + 8 <= regset->arena->size)) {\n\t\t\treturn r_read_ble64 (regset->arena->bytes + off, reg->big_endian);\n\t\t}\n\t\t//eprintf (\"r_reg_get_value: null or oob arena for current regset\\n\");\n\t\tbreak;\n\tcase 80: // long double\n\tcase 96: // long floating value\n\t\t// FIXME: It is a precision loss, please implement me properly!\n\t\treturn (ut64)r_reg_get_longdouble (reg, item);\n\tcase 128:\n\tcase 256:\n\t\t// XXX 128 & 256 bit\n\t\treturn (ut64)r_reg_get_longdouble (reg, item);\n\tdefault:\n\t\teprintf (\"r_reg_get_value: Bit size %d not supported\\n\", item->size);\n\t\tbreak;\n\t}\n\treturn 0LL;\n}\n\nR_API ut64 r_reg_get_value_by_role(RReg *reg, RRegisterId role) {\n\t// TODO use mapping from RRegisterId to RRegItem (via RRegSet)\n\treturn r_reg_get_value (reg, r_reg_get (reg, r_reg_get_name (reg, role), -1));\n}\n\nR_API bool r_reg_set_value(RReg *reg, RRegItem *item, ut64 value) {\n\tr_return_val_if_fail (reg && item, false);\n\n\tut8 bytes[12];\n\tut8 *src = bytes;\n\n\tif (r_reg_is_readonly (reg, item)) {\n\t\treturn true;\n\t}\n\tif (item->offset < 0) {\n\t\treturn true;\n\t}\n\tRRegArena *arena = reg->regset[item->arena].arena;\n\tif (!arena) {\n\t\treturn false;\n\t}\n\tswitch (item->size) {\n\tcase 80:\n\tcase 96: // long floating value\n\t\tr_reg_set_longdouble (reg, item, (long double)value);\n\t\tbreak;\n\tcase 64:\n\t\tif (reg->big_endian) {\n\t\t\tr_write_be64 (src, value);\n\t\t} else {\n\t\t\tr_write_le64 (src, value);\n\t\t}\n\t\tbreak;\n\tcase 32:\n\t\tif (reg->big_endian) {\n\t\t\tr_write_be32 (src, value);\n\t\t} else {\n\t\t\tr_write_le32 (src, value);\n\t\t}\n\t\tbreak;\n\tcase 16:\n\t\tif (reg->big_endian) {\n\t\t\tr_write_be16 (src, value);\n\t\t} else {\n\t\t\tr_write_le16 (src, value);\n\t\t}\n\t\tbreak;\n\tcase 8:\n\t\tr_write_ble8 (src, (ut8) (value & UT8_MAX));\n\t\tbreak;\n\tcase 1:\n\t\tif (value) {\n\t\t\tut8 *buf = arena->bytes + (item->offset / 8);\n\t\t\tint bit = (item->offset % 8);\n\t\t\tut8 mask = (1 << bit);\n\t\t\tbuf[0] = (buf[0] & (0xff ^ mask)) | mask;\n\t\t} else {\n\t\t\tint idx = item->offset / 8;\n\t\t\tif (idx + item->size > arena->size) {\n\t\t\t\teprintf (\"RRegSetOverflow %d vs %d\\n\", idx + item->size, arena->size);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\tut8 *buf = arena->bytes + idx;\n\t\t\tint bit = item->offset % 8;\n\t\t\tut8 mask = 0xff ^ (1 << bit);\n\t\t\tbuf[0] = (buf[0] & mask) | 0;\n\t\t}\n\t\treturn true;\n\tcase 128:\n\tcase 256:\n\t\t// XXX 128 & 256 bit\n\t\treturn false; // (ut64)r_reg_get_longdouble (reg, item);\n\tdefault:\n\t\teprintf (\"r_reg_set_value: Bit size %d not supported\\n\", item->size);\n\t\treturn false;\n\t}\n\tconst bool fits_in_arena = (arena->size - BITS2BYTES (item->offset) - BITS2BYTES (item->size)) >= 0;\n\tif (src && fits_in_arena) {\n\t\tr_mem_copybits (reg->regset[item->arena].arena->bytes +\n\t\t\t\tBITS2BYTES (item->offset),\n\t\t\t\tsrc, item->size);\n\t\treturn true;\n\t}\n\teprintf (\"r_reg_set_value: Cannot set %s to 0x%\" PFMT64x \"\\n\", item->name, value);\n\treturn false;\n}\n\nR_API bool r_reg_set_value_by_role(RReg *reg, RRegisterId role, ut64 val) {\n\t// TODO use mapping from RRegisterId to RRegItem (via RRegSet)\n\tRRegItem *r = r_reg_get (reg, r_reg_get_name (reg, role), -1);\n\treturn r_reg_set_value (reg, r, val);\n}\n\nR_API ut64 r_reg_set_bvalue(RReg *reg, RRegItem *item, const char *str) {\n\tut64 num = UT64_MAX;\n\tif (item && item->flags && str) {\n\t\tnum = r_str_bits_from_string (str, item->flags);\n\t\tif (num == UT64_MAX) {\n\t\t\tnum = r_num_math (NULL, str);\n\t\t}\n\t\tr_reg_set_value (reg, item, num);\n\t}\n\treturn num;\n}\n\nR_API R_HEAP char *r_reg_get_bvalue(RReg *reg, RRegItem *item) {\n\tchar *out = NULL;\n\tif (reg && item && item->flags) {\n\t\tout = malloc (strlen (item->flags) + 1);\n\t\tif (out) {\n\t\t\tut64 num = r_reg_get_value (reg, item);\n\t\t\tr_str_bits (out, (ut8 *)&num,\n\t\t\t\tstrlen (item->flags) * 8, item->flags);\n\t\t}\n\t}\n\treturn out;\n}\n\n/* packed registers */\n// packbits can be 8, 16, 32 or 64\n// result value is always casted into ut64\n// TODO: support packbits=128 for xmm registers\nR_API ut64 r_reg_get_pack(RReg *reg, RRegItem *item, int packidx, int packbits) {\n\tr_return_val_if_fail (reg && item, 0LL);\n\n\tif (packbits < 1) {\n\t\tpackbits = item->packed_size;\n\t}\n\tif (packbits > 64) {\n\t\tpackbits = 64;\n\t\teprintf (\"Does not support pack bits > 64\\n\");\n\t}\n\n\tut64 ret = 0LL;\n\tconst int packbytes = packbits / 8;\n\tconst int packmod = packbits % 8;\n\tif (packmod) {\n\t\teprintf (\"Invalid bit size for packet register\\n\");\n\t\treturn 0LL;\n\t}\n\tif ((packidx + 1) * packbits > item->size) {\n\t\teprintf (\"Packed index is beyond the register size\\n\");\n\t\treturn 0LL;\n\t}\n\tRRegSet *regset = &reg->regset[item->arena];\n\tif (!regset->arena) {\n\t\treturn 0LL;\n\t}\n\tint off = BITS2BYTES (item->offset);\n\toff += (packidx * packbytes);\n\tif (regset->arena->size - off - 1 >= 0) {\n\t\tint i;\n\t\tfor (i = packbytes - 1; i >= 0; i--) {\n\t\t\tret = (ret << 8) | regset->arena->bytes[off + i];\n\t\t}\n\t}\n\treturn ret;\n}\n\n// TODO: support packbits=128 for xmm registers\nR_API int r_reg_set_pack(RReg *reg, RRegItem *item, int packidx, int packbits, ut64 val) {\n\tr_return_val_if_fail (reg && reg->regset->arena && item, false);\n\n\tif (packbits < 1) {\n\t\tpackbits = item->packed_size;\n\t}\n\tif (packbits > 64) {\n\t\tpackbits = 64;\n\t\teprintf (\"Does not support pack bits > 64\\n\");\n\t}\n\n\tint packbytes = packbits / 8;\n\tif ((packidx + 1) * packbits > item->size) {\n\t\teprintf (\"Packed index is beyond the register size\\n\");\n\t\treturn false;\n\t}\n\tint off = BITS2BYTES (item->offset);\n\toff += (packidx * packbytes);\n\tif (reg->regset[item->arena].arena->size - BITS2BYTES (off) - BITS2BYTES (packbytes) >= 0) {\n\t\tut8 *dst = reg->regset[item->arena].arena->bytes + off;\n\t\tint i;\n\t\tfor (i = 0; i < packbytes; i++, val >>= 8) {\n\t\t\tdst[i] = val & 0xff;\n\t\t}\n\t\treturn true;\n\t}\n\teprintf (\"r_reg_set_value: Cannot set %s to 0x%\" PFMT64x \"\\n\", item->name, val);\n\treturn false;\n}\n"], "filenames": ["libr/core/anal_tp.c", "libr/core/cmd_anal.c", "libr/reg/rvalue.c"], "buggy_code_start_loc": [513, 4769, 143], "buggy_code_end_loc": [551, 5118, 147], "fixing_code_start_loc": [512, 4769, 144], "fixing_code_end_loc": [557, 5118, 147], "type": "CWE-416", "message": "A use after free in r_reg_set_value function in radare2 5.4.2 and 5.4.0.", "other": {"cve": {"id": "CVE-2022-28073", "sourceIdentifier": "cve@mitre.org", "published": "2023-08-22T19:16:22.843", "lastModified": "2023-08-24T22:05:12.257", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A use after free in r_reg_set_value function in radare2 5.4.2 and 5.4.0."}, {"lang": "es", "value": "Un use after free en la funci\u00f3n r_reg_set_value en radare2 5.4.2 y 5.4.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-416"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:radare:radare2:5.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "834B6EB8-099A-469F-ADA3-183E51E43717"}, {"vulnerable": true, "criteria": "cpe:2.3:a:radare:radare2:5.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "C9DEDA4E-172C-482D-8527-D9AEF8A1D7CC"}]}]}], "references": [{"url": "https://github.com/radareorg/radare2/commit/59a9dfb60acf8b5c0312061cffd9693fc9526053", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/radareorg/radare2/commit/59a9dfb60acf8b5c0312061cffd9693fc9526053"}}