{"buggy_code": ["<?php\n/**\n * @author Mikel Madariaga Madariaga <mikel@irontec.com>\n * @author Daniel Rendon <dani@irontec.com>\n */\nclass Iron_Controller_Rest_BaseController extends \\Zend_Rest_Controller\n{\n\n    public $status;\n    public $loggers = array();\n\n    protected $_sendEtag = true;\n    protected $_logActive;\n    protected $_viewData;\n    protected $_contexts = array(\n        'index',\n        'error',\n        'rest-error',\n        'get',\n        'post',\n        'head',\n        'put',\n        'delete',\n        'options'\n    );\n\n    protected $_acceptedAdvancedSearchConditions = array(\n//         'between',\n//         'notin',\n//         'in',\n//         'like',\n//         'notlike',\n    );\n\n    public function init()\n    {\n        $bootstrap = $this->_invokeArgs['bootstrap'];\n        $plugins = $bootstrap->getContainer()->frontcontroller->getPlugins();\n\n        $this->_checkPluginInit($plugins);\n\n        $optionsApp = $bootstrap->getOptions();\n\n\t\t$restConfigIsDeclared = $optionsApp['restConfig'];\n\t\t$cacheResponseIsDeclared = $restConfigIsDeclared && isset($optionsApp['restConfig']['cacheResponses']);\n\t\tif ($cacheResponseIsDeclared) {\n\t\t\t$this->_sendEtag = $optionsApp['restConfig']['cacheResponses'];\n\t\t}\n\n        $fallbackLogger = $bootstrap->getResource('log');\n\n        $noDeclaredLogger = !(isset($optionsApp['restLog']) || $fallbackLogger);\n        if ($noDeclaredLogger) {\n            $msg = '\"restLog\" no esta configurado en el application.ini';\n            throw new \\Exception($msg, 500);\n        }\n\n        if (isset($optionsApp['restLog'])) {\n            $this->_logSystemConfig(\n                $optionsApp['restLog']\n            );\n        } else {\n            $this->_setFallbackLogger($fallbackLogger);\n        }\n\n        $this->status = new \\Iron_Model_Rest_StatusResponse;\n        $this->startErrorHandler();\n        $this->_helper->viewRenderer->setNoRender(true);\n    }\n\n\tprotected function _sendEtag($currentEtag)\n\t{\n\t\tif ($this->_sendEtag) {\n\t\t\t$this->getResponse()->setHeader('Etag', $currentEtag);\n\t\t}\n\t}\n\n    public function startErrorHandler()\n    {\n\n        $front = \\Zend_Controller_Front::getInstance();\n        $request = $front->getRequest();\n        if ($request->getActionName() != 'rest-error' && $this->_logActive) {\n            $this->_logRequest();\n        }\n\n        $errorHandler = $front->getPlugin(\n            'Zend_Controller_Plugin_ErrorHandler'\n        );\n        $errorHandler\n            ->setErrorHandlerAction('rest-error')\n            ->setErrorHandlerController($request->getControllerName())\n            ->setErrorHandlerModule($request->getModuleName());\n    }\n\n    public function location()\n    {\n        $location = $this->view->serverUrl(\n            $this->view->url()\n        );\n        return $location;\n    }\n\n    public function restErrorAction()\n    {\n        $errors = $this->_getParam('error_handler');\n        if (!$errors || !$errors instanceof ArrayObject) {\n            $this->view->message = 'You have reached the error page';\n            return;\n        }\n        $this->status->setApplicationError($errors->exception);\n        $this->view->error = $errors->exception->getMessage();\n    }\n\n    protected function _setFallbackLogger(\\Zend_Log $fallbackLogger)\n    {\n        $_logActive = true;\n        $this->loggers[\"access\"] = $fallbackLogger;\n        $this->loggers[\"error\"] = $fallbackLogger;\n    }\n\n    protected function _logSystemConfig($config)\n    {\n        if (!isset($config['log'])) {\n            $this->_logActive = false;\n            return;\n        }\n        $declarableEventLoggers = array(\"access\", \"error\");\n        foreach ($declarableEventLoggers as $eventLogger) {\n            if (!isset($config['log'][$eventLogger])) {\n                continue;\n            }\n            $this->_logActive = true;\n            $logConfig = $config['log'][$eventLogger];\n            $timesFormat = \"Y-m-d H:s:i\";\n            $zendLogConfig = array(\n                'timestampFormat' => $timesFormat\n            );\n            foreach ($logConfig as $key => $value) {\n                $zendLogConfig[] = $value;\n            }\n            $this->loggers[$eventLogger] = Zend_Log::factory($zendLogConfig);\n        }\n    }\n\n    protected function _checkPluginInit($plugins)\n    {\n        $init = false;\n        foreach ($plugins as $plugin) {\n            if (get_class($plugin) === 'Iron_Plugin_RestParamsParser') {\n                $init = true;\n            }\n        }\n        if (!$init) {\n            throw new Exception(\n                'No esta inicializado el plugin \"Iron_Plugin_RestParamsParser\"'\n            );\n        }\n    }\n\n    private function _logRequest()\n    {\n        if (!$this->loggers['access'] instanceof \\Zend_Log) {\n            return;\n        }\n        $module = $this->_request->getParam(\"module\");\n        $controller = $this->_request->getParam(\"controller\");\n        $action = $this->_request->getParam(\"action\");\n        $requestLog = $module . \"/\" . $controller . \"::\". $action;\n        $params = $this->_request->getParams();\n        foreach (array('module', 'controller', 'action') as $key) {\n            unset($params[$key]);\n        }\n        $requestParamString = var_export($params, true);\n        if (isset($_SERVER[\"REMOTE_ADDR\"])) {\n            $requestLog .= \" from \" . $_SERVER[\"REMOTE_ADDR\"];\n        }\n        $this->loggers['access']->debug(\n            \"Requesting \" . $requestLog\n        );\n        $resquestParams = str_replace(\"\\n\", \"\", $requestParamString);\n        $this->loggers['access']->debug(\n            \"Request params: \" . $resquestParams\n        );\n    }\n\n    private function _logResponse()\n    {\n        $statusResume = $this->status->getException();\n        if (array_key_exists('exception', $statusResume)) {\n            if (!$this->loggers['error'] instanceof \\Zend_Log) {\n                return;\n            }\n            $msg = \"Exception thrown: \" . $statusResume['exception'];\n            $this->loggers['error']->debug($msg);\n            $msg = \"Exception Ref: \" . $statusResume['developerRef'];\n            $this->loggers['error']->debug($msg);\n        }\n        if (!$this->loggers['access'] instanceof \\Zend_Log) {\n            return;\n        }\n        $msg = \"Request finished with status code \" . $this->status->getCode();\n        $msg .= \" [\" . $this->status->getMessage() . \"]\";\n        $this->loggers['access']->debug($msg);\n    }\n\n    /**\n     * Context json to methods rest $this->_contexts\n     * @see Zend_Controller_Action::preDispatch()\n     */\n    public function preDispatch()\n    {\n\n        $contextSwitch = $this->_helper->getHelper('contextSwitch');\n\n        foreach ($this->_contexts as $context) {\n            $contextSwitch->addActionContext($context, 'json');\n        }\n\n        $contextSwitch->initContext('json');\n\n    }\n\n    public function postDispatch()\n    {\n\n        $this->_responseContent();\n\n        if (\n            $this->_request->getUserParam(\"controller\") !=\n            $this->_request->getControllername() &&\n            (get_class($this) != \"Api_ErrorController\")\n        ) {\n            return;\n        }\n\n        if ($this->_logActive) {\n            $this->_logResponse();\n        }\n\n    }\n\n    protected function _responseContent()\n    {\n        $this->getResponse()->setHttpResponseCode(\n            $this->status->getCode()\n        );\n\n        $this->getResponse()->setHeader(\n            'Content-type',\n            'application/json; charset=UTF-8;'\n        );\n\n        $view = $this->view;\n        $exceptionData = $this->status->getException();\n\n        if (!empty($exceptionData)) {\n            $exceptionEncode = json_encode($exceptionData);\n            $this->getResponse()->setHeader('exception', $exceptionEncode);\n        }\n\n        $dataView = $this->_viewData;\n        if (!empty($dataView)) {\n            foreach ($dataView as $key => $val) {\n                $view->$key = $val;\n            }\n        }\n\n    }\n\n    public function addViewData($data)\n    {\n        $this->_viewData = $data;\n    }\n\n    /**\n     * The index action handles index/list requests; it should respond with a\n     * list of the requested resources.\n     */\n    public function indexAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The get action handles GET requests and receives an 'id' parameter; it\n     * should respond with the server resource state of the resource identified\n     * by the 'id' value.\n     */\n    public function getAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The head action handles HEAD requests and receives an 'id' parameter; it\n     * should respond with the server resource state of the resource identified\n     * by the 'id' value.\n     */\n    public function headAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The post action handles POST requests; it should accept and digest a\n     * POSTed resource representation and persist the resource state.\n     */\n    public function postAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The put action handles PUT requests and receives an 'id' parameter; it\n     * should update the server resource state of the resource identified by\n     * the 'id' value.\n     */\n    public function putAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The delete action handles DELETE requests and receives an 'id'\n     * parameter; it should update the server resource state of the resource\n     * identified by the 'id' value.\n     */\n    public function deleteAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    public function optionsAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    private function _methodNotAllowed()\n    {\n        $this->status->setCode(405);\n    }\n\n    /**\n     * Offset to pagination\n     */\n    protected function _prepareOffset($params = array())\n    {\n        if (isset($params[\"page\"]) && $params[\"page\"] > 0) {\n\n            if (!$params[\"limit\"]) {\n                Throw new \\Exception(\"Page parameter requires limit to be set\");\n            }\n\n            return ($params[\"page\"] - 1) * $params[\"limit\"];\n        }\n        return 0;\n    }\n\n    /**\n     * Order to list\n     */\n    protected function _prepareOrder($orderParam)\n    {\n        if ($orderParam === false || trim($orderParam) === '') {\n            return 'id DESC';\n        }\n\n        return $orderParam;\n    }\n\n    /**\n     * Where para busquedas, la variable $search espera un json_encode con los par\u00e1metros de b\u00fasqueda.\n     */\n    protected function _prepareWhere($search)\n    {\n        if ($search === false || trim($search) === '') {\n            return NULL;\n        }\n\n        $search = json_decode($search);\n\n        $itemsSearch = array();\n        foreach ($search as $key => $val) {\n\n            if (is_scalar($val)) {\n                $itemsSearch[] = $this->_prepareScalarCondition($key, $val);\n            } else if (is_object($val)){\n                $itemsSearch[] = $this->_prepareAdvancedCondition($key, $val);\n            }\n        }\n\n        if (empty($itemsSearch)) {\n            return '';\n        }\n        return implode(\" AND \", $itemsSearch);\n    }\n\n    protected function _prepareScalarCondition($key, $val) {\n\n        $dbAdapter = Zend_Db_Table::getDefaultAdapter();\n        if ($val != '') {\n\n            $key = $dbAdapter->quoteIdentifier($key) . \" = ?\";\n            return $dbAdapter->quoteInto($key, $val);\n        }\n        return array();\n    }\n\n    protected function _prepareAdvancedCondition($key, $val) {\n\n        $dbAdapter = Zend_Db_Table::getDefaultAdapter();\n        switch (strtolower(key($val))) {\n\n            case 'between':\n                $values = $this->_cleanArray($val);\n                return $dbAdapter->quoteIdentifier($key) . ' between '. $values[0] . ' AND ' . $values[1];\n\n            case 'notin':\n\n                $values = $this->_cleanArray($val);\n                return $dbAdapter->quoteIdentifier($key) . ' not in ('. implode(\",\", $values) . ') ';\n\n            case 'in':\n\n                $values = $this->_cleanArray($val);\n                return $dbAdapter->quoteIdentifier($key) . ' in ('. implode(\",\", $values) . ') ';\n\n            case 'like':\n\n                $key = $dbAdapter->quoteIdentifier($key) . \" like '%?%'\";\n                return $dbAdapter->quoteInto($key, $val);\n\n            case 'notlike':\n\n                $key = $dbAdapter->quoteIdentifier($key) . \" not like '%?%'\";\n                return $dbAdapter->quoteInto($key, $val);\n                break;\n        }\n\n        return '';\n    }\n\n    protected function _cleanArray($obj) {\n\n        $dbAdapter = Zend_Db_Table::getDefaultAdapter();\n        $values = array();\n        foreach ($obj as $k => $v) {\n            $values[] = $dbAdapter->quote($v);\n        }\n        return $values;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * @author Mikel Madariaga Madariaga <mikel@irontec.com>\n * @author Daniel Rendon <dani@irontec.com>\n */\nclass Iron_Controller_Rest_BaseController extends \\Zend_Rest_Controller\n{\n\n    public $status;\n    public $loggers = array();\n\n    protected $_sendEtag = true;\n    protected $_logActive;\n    protected $_viewData;\n    protected $_contexts = array(\n        'index',\n        'error',\n        'rest-error',\n        'get',\n        'post',\n        'head',\n        'put',\n        'delete',\n        'options'\n    );\n\n    protected $_acceptedAdvancedSearchConditions = array(\n//         'between',\n//         'notin',\n//         'in',\n//         'like',\n//         'notlike',\n    );\n\n    public function init()\n    {\n        $bootstrap = $this->_invokeArgs['bootstrap'];\n        $plugins = $bootstrap->getContainer()->frontcontroller->getPlugins();\n\n        $this->_checkPluginInit($plugins);\n\n        $optionsApp = $bootstrap->getOptions();\n\n\t\t$restConfigIsDeclared = $optionsApp['restConfig'];\n\t\t$cacheResponseIsDeclared = $restConfigIsDeclared && isset($optionsApp['restConfig']['cacheResponses']);\n\t\tif ($cacheResponseIsDeclared) {\n\t\t\t$this->_sendEtag = $optionsApp['restConfig']['cacheResponses'];\n\t\t}\n\n        $fallbackLogger = $bootstrap->getResource('log');\n\n        $noDeclaredLogger = !(isset($optionsApp['restLog']) || $fallbackLogger);\n        if ($noDeclaredLogger) {\n            $msg = '\"restLog\" no esta configurado en el application.ini';\n            throw new \\Exception($msg, 500);\n        }\n\n        if (isset($optionsApp['restLog'])) {\n            $this->_logSystemConfig(\n                $optionsApp['restLog']\n            );\n        } else {\n            $this->_setFallbackLogger($fallbackLogger);\n        }\n\n        $this->status = new \\Iron_Model_Rest_StatusResponse;\n        $this->startErrorHandler();\n        $this->_helper->viewRenderer->setNoRender(true);\n    }\n\n\tprotected function _sendEtag($currentEtag)\n\t{\n\t\tif ($this->_sendEtag) {\n\t\t\t$this->getResponse()->setHeader('Etag', $currentEtag);\n\t\t}\n\t}\n\n    public function startErrorHandler()\n    {\n\n        $front = \\Zend_Controller_Front::getInstance();\n        $request = $front->getRequest();\n        if ($request->getActionName() != 'rest-error' && $this->_logActive) {\n            $this->_logRequest();\n        }\n\n        $errorHandler = $front->getPlugin(\n            'Zend_Controller_Plugin_ErrorHandler'\n        );\n        $errorHandler\n            ->setErrorHandlerAction('rest-error')\n            ->setErrorHandlerController($request->getControllerName())\n            ->setErrorHandlerModule($request->getModuleName());\n    }\n\n    public function location()\n    {\n        $location = $this->view->serverUrl(\n            $this->view->url()\n        );\n        return $location;\n    }\n\n    public function restErrorAction()\n    {\n        $errors = $this->_getParam('error_handler');\n        if (!$errors || !$errors instanceof ArrayObject) {\n            $this->view->message = 'You have reached the error page';\n            return;\n        }\n        $this->status->setApplicationError($errors->exception);\n        $this->view->error = $errors->exception->getMessage();\n    }\n\n    protected function _setFallbackLogger(\\Zend_Log $fallbackLogger)\n    {\n        $_logActive = true;\n        $this->loggers[\"access\"] = $fallbackLogger;\n        $this->loggers[\"error\"] = $fallbackLogger;\n    }\n\n    protected function _logSystemConfig($config)\n    {\n        if (!isset($config['log'])) {\n            $this->_logActive = false;\n            return;\n        }\n        $declarableEventLoggers = array(\"access\", \"error\");\n        foreach ($declarableEventLoggers as $eventLogger) {\n            if (!isset($config['log'][$eventLogger])) {\n                continue;\n            }\n            $this->_logActive = true;\n            $logConfig = $config['log'][$eventLogger];\n            $timesFormat = \"Y-m-d H:s:i\";\n            $zendLogConfig = array(\n                'timestampFormat' => $timesFormat\n            );\n            foreach ($logConfig as $key => $value) {\n                $zendLogConfig[] = $value;\n            }\n            $this->loggers[$eventLogger] = Zend_Log::factory($zendLogConfig);\n        }\n    }\n\n    protected function _checkPluginInit($plugins)\n    {\n        $init = false;\n        foreach ($plugins as $plugin) {\n            if (get_class($plugin) === 'Iron_Plugin_RestParamsParser') {\n                $init = true;\n            }\n        }\n        if (!$init) {\n            throw new Exception(\n                'No esta inicializado el plugin \"Iron_Plugin_RestParamsParser\"'\n            );\n        }\n    }\n\n    private function _logRequest()\n    {\n        if (!$this->loggers['access'] instanceof \\Zend_Log) {\n            return;\n        }\n        $module = $this->_request->getParam(\"module\");\n        $controller = $this->_request->getParam(\"controller\");\n        $action = $this->_request->getParam(\"action\");\n        $requestLog = $module . \"/\" . $controller . \"::\". $action;\n        $params = $this->_request->getParams();\n        foreach (array('module', 'controller', 'action') as $key) {\n            unset($params[$key]);\n        }\n        $requestParamString = var_export($params, true);\n        if (isset($_SERVER[\"REMOTE_ADDR\"])) {\n            $requestLog .= \" from \" . $_SERVER[\"REMOTE_ADDR\"];\n        }\n        $this->loggers['access']->debug(\n            \"Requesting \" . $requestLog\n        );\n        $resquestParams = str_replace(\"\\n\", \"\", $requestParamString);\n        $this->loggers['access']->debug(\n            \"Request params: \" . $resquestParams\n        );\n    }\n\n    private function _logResponse()\n    {\n        $statusResume = $this->status->getException();\n        if (array_key_exists('exception', $statusResume)) {\n            if (!$this->loggers['error'] instanceof \\Zend_Log) {\n                return;\n            }\n            $msg = \"Exception thrown: \" . $statusResume['exception'];\n            $this->loggers['error']->debug($msg);\n            $msg = \"Exception Ref: \" . $statusResume['developerRef'];\n            $this->loggers['error']->debug($msg);\n        }\n        if (!$this->loggers['access'] instanceof \\Zend_Log) {\n            return;\n        }\n        $msg = \"Request finished with status code \" . $this->status->getCode();\n        $msg .= \" [\" . $this->status->getMessage() . \"]\";\n        $this->loggers['access']->debug($msg);\n    }\n\n    /**\n     * Context json to methods rest $this->_contexts\n     * @see Zend_Controller_Action::preDispatch()\n     */\n    public function preDispatch()\n    {\n\n        $contextSwitch = $this->_helper->getHelper('contextSwitch');\n\n        foreach ($this->_contexts as $context) {\n            $contextSwitch->addActionContext($context, 'json');\n        }\n\n        $contextSwitch->initContext('json');\n\n    }\n\n    public function postDispatch()\n    {\n\n        $this->_responseContent();\n\n        if (\n            $this->_request->getUserParam(\"controller\") !=\n            $this->_request->getControllername() &&\n            (get_class($this) != \"Api_ErrorController\")\n        ) {\n            return;\n        }\n\n        if ($this->_logActive) {\n            $this->_logResponse();\n        }\n\n    }\n\n    protected function _responseContent()\n    {\n        $this->getResponse()->setHttpResponseCode(\n            $this->status->getCode()\n        );\n\n        $this->getResponse()->setHeader(\n            'Content-type',\n            'application/json; charset=UTF-8;'\n        );\n\n        $view = $this->view;\n        $exceptionData = $this->status->getException();\n\n        if (!empty($exceptionData)) {\n            $exceptionEncode = json_encode($exceptionData);\n            $this->getResponse()->setHeader('exception', $exceptionEncode);\n        }\n\n        $dataView = $this->_viewData;\n        if (!empty($dataView)) {\n            foreach ($dataView as $key => $val) {\n                $view->$key = $val;\n            }\n        }\n\n    }\n\n    public function addViewData($data)\n    {\n        $this->_viewData = $data;\n    }\n\n    /**\n     * The index action handles index/list requests; it should respond with a\n     * list of the requested resources.\n     */\n    public function indexAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The get action handles GET requests and receives an 'id' parameter; it\n     * should respond with the server resource state of the resource identified\n     * by the 'id' value.\n     */\n    public function getAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The head action handles HEAD requests and receives an 'id' parameter; it\n     * should respond with the server resource state of the resource identified\n     * by the 'id' value.\n     */\n    public function headAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The post action handles POST requests; it should accept and digest a\n     * POSTed resource representation and persist the resource state.\n     */\n    public function postAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The put action handles PUT requests and receives an 'id' parameter; it\n     * should update the server resource state of the resource identified by\n     * the 'id' value.\n     */\n    public function putAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    /**\n     * The delete action handles DELETE requests and receives an 'id'\n     * parameter; it should update the server resource state of the resource\n     * identified by the 'id' value.\n     */\n    public function deleteAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    public function optionsAction()\n    {\n        $this->_methodNotAllowed();\n    }\n\n    private function _methodNotAllowed()\n    {\n        $this->status->setCode(405);\n    }\n\n    /**\n     * Offset to pagination\n     */\n    protected function _prepareOffset($params = array())\n    {\n        if (isset($params[\"page\"]) && $params[\"page\"] > 0) {\n\n            if (!$params[\"limit\"]) {\n                Throw new \\Exception(\"Page parameter requires limit to be set\");\n            }\n\n            return ($params[\"page\"] - 1) * $params[\"limit\"];\n        }\n        return 0;\n    }\n\n    /**\n     * Order to list\n     */\n    protected function _prepareOrder($orderParam)\n    {\n        if ($orderParam === false || trim($orderParam) === '') {\n            return 'id DESC';\n        }\n\n        return $orderParam;\n    }\n\n    /**\n     * Where para busquedas, la variable $search espera un json_encode con los par\u00e1metros de b\u00fasqueda.\n     */\n    protected function _prepareWhere($search)\n    {\n        if ($search === false || trim($search) === '') {\n            return NULL;\n        }\n\n        $search = json_decode($search);\n        return implode(\" AND \", $this->_parseWhere($search));\n    }\n\n    protected function _parseWhere($search) \n    {\n        $itemsSearch = array();\n        foreach ($search as $key => $val) {\n\n            if ($val instanceof \\Zend_Db_Expr) {\n                $itemsSearch[] = $val->__toString();\n            } else if (is_scalar($val)) {\n                $itemsSearch[] = $this->_prepareScalarCondition($key, $val);\n            } else if (is_object($val)){\n                $itemsSearch[] = $this->_prepareAdvancedCondition($key, $val);\n            }\n        }\n        return $itemsSearch;\n    }   \n\n    protected function _prepareScalarCondition($key, $val) {\n\n        $dbAdapter = Zend_Db_Table::getDefaultAdapter();\n        if ($val != '') {\n\n            $key = $dbAdapter->quoteIdentifier($key) . \" = ?\";\n            return $dbAdapter->quoteInto($key, $val);\n        }\n        return array();\n    }\n\n    protected function _prepareAdvancedCondition($key, $val) {\n\n        $dbAdapter = Zend_Db_Table::getDefaultAdapter();\n        switch (strtolower(key($val))) {\n\n            case 'notEqual':\n                $key = $dbAdapter->quoteIdentifier($key) . \" != ?\";\n                return $dbAdapter->quoteInto($key, current($val));\n                break;\n\n            case 'isnull':\n                return $dbAdapter->quoteIdentifier($key) . \" is null\";\n                break;\n\n            case 'isnotnull':\n                return $dbAdapter->quoteIdentifier($key) . \" is null\";\n                break;\n\n            case 'gt':\n                $key = $dbAdapter->quoteIdentifier($key) . \" > ?\";\n                return $dbAdapter->quoteInto($key, current($val));\n                break;\n\n            case 'gte':\n                $key = $dbAdapter->quoteIdentifier($key) . \" >= ?\";\n                return $dbAdapter->quoteInto($key, current($val));\n                break;\n                \n            case 'lt':\n                $key = $dbAdapter->quoteIdentifier($key) . \" < ?\";\n                return $dbAdapter->quoteInto($key, current($val));\n                break;\n\n            case 'lte':\n                $key = $dbAdapter->quoteIdentifier($key) . \" <= ?\";\n                return $dbAdapter->quoteInto($key, current($val));\n                break;\n                \n            case 'between':\n                $values = $this->_cleanArray(current($val));\n                return $dbAdapter->quoteIdentifier($key) . ' between '. $values[0] . ' AND ' . $values[1];\n\n            case 'notin':\n                $values = $this->_cleanArray(current($val));\n                return $dbAdapter->quoteIdentifier($key) . ' not in ('. implode(\",\", $values) . ') ';\n\n            case 'in':\n                $values = $this->_cleanArray(current($val));\n                return $dbAdapter->quoteIdentifier($key) . ' in ('. implode(\",\", $values) . ') ';\n\n            case 'like':\n                $key = $dbAdapter->quoteIdentifier($key) . \" like ?\";\n                return $dbAdapter->quoteInto($key, current($val));\n\n            case 'notlike':\n                $key = $dbAdapter->quoteIdentifier($key) . \" not like ?\";\n                return $dbAdapter->quoteInto($key, current($val));\n                break;\n\n            case 'or':\n                $conditions = array();\n                foreach ($val as $subKey => $subVal) {\n                    $conditions += $this->_parseWhere($subVal);\n                }\n                return '('. implode(' OR ', $conditions) .')';\n                break;\n        }\n        return '';\n    }\n\n    protected function _cleanArray($obj) {\n\n        $dbAdapter = Zend_Db_Table::getDefaultAdapter();\n        $values = array();\n        foreach ($obj as $k => $v) {\n            $values[] = $dbAdapter->quote($v);\n        }\n        return $values;\n    }\n}\n"], "filenames": ["Controller/Rest/BaseController.php"], "buggy_code_start_loc": [382], "buggy_code_end_loc": [441], "fixing_code_start_loc": [382], "fixing_code_end_loc": [479], "type": "CWE-89", "message": "A vulnerability was found in irontec klear-library chloe and classified as critical. Affected by this issue is the function _prepareWhere of the file Controller/Rest/BaseController.php. The manipulation leads to sql injection. Upgrading to version marla is able to address this issue. The name of the patch is b25262de52fdaffde2a4434fc2a84408b304fbc5. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-221504.", "other": {"cve": {"id": "CVE-2015-10084", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-21T15:15:10.783", "lastModified": "2023-03-02T16:17:38.390", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in irontec klear-library chloe and classified as critical. Affected by this issue is the function _prepareWhere of the file Controller/Rest/BaseController.php. The manipulation leads to sql injection. Upgrading to version marla is able to address this issue. The name of the patch is b25262de52fdaffde2a4434fc2a84408b304fbc5. It is recommended to upgrade the affected component. The identifier of this vulnerability is VDB-221504."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:irontec:klear-library:*:*:*:*:*:*:*:*", "versionEndExcluding": "2015-10-15", "matchCriteriaId": "737FF92A-45E0-495D-80B8-9261675E5FB1"}]}]}], "references": [{"url": "https://github.com/irontec/klear-library/commit/b25262de52fdaffde2a4434fc2a84408b304fbc5", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/irontec/klear-library/tree/marla", "source": "cna@vuldb.com", "tags": ["Product"]}, {"url": "https://vuldb.com/?ctiid.221504", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory", "VDB Entry"]}, {"url": "https://vuldb.com/?id.221504", "source": "cna@vuldb.com", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/irontec/klear-library/commit/b25262de52fdaffde2a4434fc2a84408b304fbc5"}}