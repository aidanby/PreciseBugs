{"buggy_code": ["<?php\n\n/*\n* LimeSurvey\n* Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*\n*/\n\n/**\n* Survey Common Action\n*\n* This controller contains common functions for survey related views.\n*\n* @package        LimeSurvey\n* @subpackage    Backend\n* @author        LimeSurvey Team\n* @method        void index()\n*/\nclass Survey_Common_Action extends CAction\n{\n    public function __construct($controller = null, $id = null)\n    {\n        parent::__construct($controller, $id);\n        Yii::app()->request->updateNavigationStack();\n        // Make sure viewHelper can be autoloaded\n        Yii::import('application.helpers.viewHelper');\n    }\n\n    /**\n     * Override runWithParams() implementation in CAction to help us parse\n     * requests with subactions.\n     *\n     * @param array $params URL Parameters\n     * @return bool\n     */\n    public function runWithParams($params)\n    {\n        // Default method that would be called if the subaction and run() do not exist\n        $sDefault = 'index';\n\n        // Check for a subaction\n        if (empty($params['sa'])) {\n            $sSubAction = $sDefault; // default\n        } else {\n            $sSubAction = $params['sa'];\n        }\n        // Check if the class has the method\n        $oClass = new ReflectionClass($this);\n        if (!$oClass->hasMethod($sSubAction)) {\n            // If it doesn't, revert to default Yii method, that is run() which should reroute us somewhere else\n            $sSubAction = 'run';\n        }\n\n        // Populate the params. eg. surveyid -> iSurveyId\n        $params = $this->_addPseudoParams($params);\n\n        if (!empty($params['iSurveyId'])) {\n            LimeExpressionManager::SetSurveyId($params['iSurveyId']); // must be called early - it clears internal cache if a new survey is being used\n        }\n        // Check if the method is public and of the action class, not its parents\n        // ReflectionClass gets us the methods of the class and parent class\n        // If the above method existence check passed, it might not be neceessary that it is of the action class\n        $oMethod  = new ReflectionMethod($this, $sSubAction);\n\n        // Get the action classes from the admin controller as the urls necessarily do not equal the class names. Eg. survey -> surveyaction\n        $aActions = Yii::app()->getController()->getActionClasses();\n\n        if (empty($aActions[$this->getId()]) || strtolower($oMethod->getDeclaringClass()->name) != strtolower($aActions[$this->getId()]) || !$oMethod->isPublic()) {\n            // Either action doesn't exist in our whitelist, or the method class doesn't equal the action class or the method isn't public\n            // So let us get the last possible default method, ie. index\n            $oMethod = new ReflectionMethod($this, $sDefault);\n        }\n\n        // We're all good to go, let's execute it\n        // runWithParamsInternal would automatically get the parameters of the method and populate them as required with the params\n        return parent::runWithParamsInternal($this, $oMethod, $params);\n    }\n\n    /**\n     * Some functions have different parameters, which are just an alias of the\n     * usual parameters we're getting in the url. This function just populates\n     * those variables so that we don't end up in an error.\n     *\n     * This is also used while rendering wrapped template\n     * {@link Survey_Common_Action::_renderWrappedTemplate()}\n     *\n     * @param array $params Parameters to parse and populate\n     * @return array Populated parameters\n     * @throws CHttpException\n     */\n    private function _addPseudoParams($params)\n    {\n        // Return if params isn't an array\n        if (empty($params) || !is_array($params)) {\n            return $params;\n        }\n\n        $pseudos = array(\n            'id' => 'iId',\n            'gid' => 'iGroupId',\n            'qid' => 'iQuestionId',\n            /* Unsure we set 'iSurveyId', 'iSurveyID','surveyid' to same final survey id */\n            /* priority is surveyid,surveyId,sid : surveyId=1&sid=2 set sid surveyid to 1 */\n            'sid' => array('iSurveyId', 'iSurveyID', 'surveyid'), // Old link use sid\n            'surveyId' => array('iSurveyId', 'iSurveyID', 'surveyid'), // PluginHelper->sidebody : if disable surveyId usage : broke API\n            'surveyid' => array('iSurveyId', 'iSurveyID', 'surveyid'),\n            'srid' => 'iSurveyResponseId',\n            'scid' => 'iSavedControlId',\n            'uid' => 'iUserId',\n            'ugid' => 'iUserGroupId',\n            'fieldname' => 'sFieldName',\n            'fieldtext' => 'sFieldText',\n            'action' => 'sAction',\n            'lang' => 'sLanguage',\n            'browselang' => 'sBrowseLang',\n            'tokenids' => 'aTokenIds',\n            'tokenid' => 'iTokenId',\n            'subaction' => 'sSubAction',\n        );\n\n        // Foreach pseudo, take the key, if it exists,\n        // Populate the values (taken as an array) as keys in params\n        // with that key's value in the params\n        // (only if that place is empty)\n        foreach ($pseudos as $key => $pseudo) {\n            if (isset($params[$key])) {\n                $pseudo = (array) $pseudo;\n                foreach ($pseudo as $pseud) {\n                    if (empty($params[$pseud])) {\n                        $params[$pseud] = $params[$key];\n                    }\n                }\n            }\n        }\n\n        /* Control sid,gid and qid params validity see #12434 */\n        // Fill param with according existing param, replace existing parameters.\n        // iGroupId/gid can be found with qid/iQuestionId\n        if (!empty($params['iQuestionId'])) {\n            if ((string) (int) $params['iQuestionId'] !== (string) $params['iQuestionId']) {\n                // pgsql need filtering before find\n                throw new CHttpException(403, gT(\"Invalid question id\"));\n            }\n            $oQuestion = Question::model()->find(\"qid=:qid\", array(\":qid\"=>$params['iQuestionId'])); //Move this in model to use cache\n            if (!$oQuestion) {\n                throw new CHttpException(404, gT(\"Question not found\"));\n            }\n            if (!isset($params['iGroupId'])) {\n                $params['iGroupId'] = $params['gid'] = $oQuestion->gid;\n            }\n        }\n        // iSurveyId/iSurveyID/sid can be found with gid/iGroupId\n        if (!empty($params['iGroupId'])) {\n            if ((string) (int) $params['iGroupId'] !== (string) $params['iGroupId']) {\n                // pgsql need filtering before find\n                throw new CHttpException(403, gT(\"Invalid group id\"));\n            }\n            $oGroup = QuestionGroup::model()->find(\"gid=:gid\", array(\":gid\"=>$params['iGroupId'])); //Move this in model to use cache\n            if (!$oGroup) {\n                throw new CHttpException(404, gT(\"Group not found\"));\n            }\n            if (!isset($params['iSurveyId'])) {\n                $params['iSurveyId'] = $params['iSurveyID'] = $params['surveyid'] = $params['sid'] = $oGroup->sid;\n            }\n        }\n        // Finally control validity of sid\n        if (!empty($params['iSurveyId'])) {\n            if ((string) (int) $params['iSurveyId'] !== (string) $params['iSurveyId']) {\n                // pgsql need filtering before find\n                // 403 mean The request was valid, but the server is refusing action.\n                throw new CHttpException(403, gT(\"Invalid survey id\"));\n            }\n            $oSurvey = Survey::model()->findByPk($params['iSurveyId']);\n            if (!$oSurvey) {\n                throw new CHttpException(404, gT(\"Survey not found\"));\n            }\n            // Minimal permission needed, extra permission must be tested in each controller\n            if (!Permission::model()->hasSurveyPermission($params['iSurveyId'], 'survey', 'read')) {\n                // 403 mean (too) The user might not have the necessary permissions for a resource.\n                // 401 semantically means \"unauthenticated\"\n                throw new CHttpException(403);\n            }\n            $params['iSurveyId'] = $params['iSurveyID'] = $params['surveyid'] = $params['sid'] = $oSurvey->sid;\n        }\n        // Finally return the populated array\n        return $params;\n    }\n\n    /**\n     * Action classes require them to have a run method. We reroute it to index\n     * if called.\n     */\n    public function run()\n    {\n        $this->index();\n    }\n\n    /**\n     * Routes the action into correct subaction\n     *\n     * @access protected\n     * @param string $sa\n     * @param string[] $get_vars\n     * @return mixed\n     */\n    protected function route($sa, array $get_vars)\n    {\n        $func_args = array();\n        foreach ($get_vars as $k => $var) {\n                    $func_args[$k] = Yii::app()->request->getQuery($var);\n        }\n\n        return call_user_func_array(array($this, $sa), $func_args);\n    }\n\n    /**\n     * @inheritdoc\n     * @param string $_viewFile_\n     */\n    public function renderInternal($_viewFile_, $_data_ = null, $_return_ = false)\n    {\n        // we use special variable names here to avoid conflict when extracting data\n        if (is_array($_data_)) {\n            extract($_data_, EXTR_PREFIX_SAME, 'data');\n        } else {\n            $data = $_data_;\n        }\n\n        if ($_return_) {\n            ob_start();\n            ob_implicit_flush(0);\n            require($_viewFile_);\n            return ob_get_clean();\n        } else {\n            require($_viewFile_);\n        }\n    }\n\n    /**\n     * Rendering the subviews and views of _renderWrappedTemplate\n     *\n     * @param string $sAction\n     * @param array|string $aViewUrls\n     * @param array $aData\n     * @return string\n     */\n    private function renderCentralContents($sAction, $aViewUrls, $aData = [])\n    {\n        //// This will be handle by subviews inclusions\n        $aViewUrls = (array) $aViewUrls; $sViewPath = '/admin/';\n        if (!empty($sAction)) {\n                    $sViewPath .= $sAction.'/';\n        }\n        ////  TODO : while refactoring, we must replace the use of $aViewUrls by $aData[.. conditions ..], and then call to function such as $this->_nsurveysummary($aData);\n        // Load views\n        $content = \"\";\n        foreach ($aViewUrls as $sViewKey => $viewUrl) {\n            if (empty($sViewKey) || !in_array($sViewKey, array('message', 'output'))) {\n                if (is_numeric($sViewKey)) {\n                    $content .= Yii::app()->getController()->renderPartial($sViewPath.$viewUrl, $aData, true);\n                } elseif (is_array($viewUrl)) {\n                    foreach ($viewUrl as $aSubData) {\n                        $aSubData = array_merge($aData, $aSubData);\n                        $content .= Yii::app()->getController()->renderPartial($sViewPath.$sViewKey, $aSubData, true);\n                    }\n                }\n            } else {\n                switch ($sViewKey) {\n                    //// We'll use some Bootstrap alerts, and call them inside each correct view.\n                    // Message\n                    case 'message' :\n                        if (empty($viewUrl['class'])) {\n                            $content .= Yii::app()->getController()->_showMessageBox($viewUrl['title'], $viewUrl['message'], null, true);\n                        } else {\n                            $content .= Yii::app()->getController()->_showMessageBox($viewUrl['title'], $viewUrl['message'], $viewUrl['class'], true);\n                        }\n                        break;\n\n                        // Output\n                    case 'output' :\n                        //// TODO : http://goo.gl/ABl5t5\n\n                        $content .= $viewUrl;\n\n                        if (isset($aViewUrls['afteroutput'])) {\n                            $content .= $aViewUrls['afteroutput'];\n                        }\n                        break;\n                }\n            }\n        }\n        return $content;\n    }\n\n    /**\n     * Renders template(s) wrapped in header and footer\n     *\n     * Addition of parameters should be avoided if they can be added to $aData\n     *\n     * NOTE FROM LOUIS : We want to remove this function, wich doesn't respect MVC pattern.\n     * The work it's doing should be handle by layout files, and subviews inside views.\n     * Eg : for route \"admin/survey/sa/listquestiongroups/surveyid/282267\"\n     *       the Group controller should use a main layout (with admin menu bar as a widget), then render the list view, in wich the question group bar is called as a subview.\n     *\n     * So for now, we try to evacuate all the renderWrappedTemplate logic (if statements, etc.) to subfunctions, then it will be easier to remove.\n     * Comments starting with //// indicate how it should work in the future\n     *\n     * @param string $sAction Current action, the folder to fetch views from\n     * @param array|string $aViewUrls View url(s)\n     * @param array $aData Data to be passed on. Optional.\n     * @param string|boolean $sRenderFile File to be rendered as a layout. Optional.\n     */\n    protected function _renderWrappedTemplate($sAction = '', $aViewUrls = array(), $aData = array(), $sRenderFile = false)\n    {\n        // Gather the data\n        $aData = $this->_addPseudoParams($aData); //// the check of the surveyid should be done in the Admin controller it self.\n\n        $basePath = (string) Yii::getPathOfAlias('application.views.admin.super');\n        \n        if ($sRenderFile == false) {\n            if (!empty($aData['surveyid'])) {\n\n                $aData['oSurvey'] = Survey::model()->findByPk($aData['surveyid']);\n\n                // Needed to evaluate EM expressions in question summary\n                // See bug #11845\n                LimeExpressionManager::SetSurveyId($aData['surveyid']);\n                LimeExpressionManager::StartProcessingPage(false,true);\n\n                $renderFile = $basePath.'/layout_insurvey.php';\n            } else {\n                $renderFile = $basePath.'/layout_main.php';\n            }\n        } else {\n            $renderFile = $basePath.'/'.$sRenderFile;\n        }\n\n        $content = $this->renderCentralContents($sAction, $aViewUrls, $aData);\n        $out = $this->renderInternal($renderFile, ['content' => $content, 'aData' => $aData], true);\n\n        App()->getClientScript()->render($out);\n        echo $out;\n    }\n\n    /**\n     * Display the update notification\n     */\n    protected function _updatenotification()\n    {\n        // Never use Notification model for database update.\n        // TODO: Real fix: No database queries while doing database update, meaning\n        // don't call _renderWrappedTemplate.\n        if (get_class($this) == 'databaseupdate') {\n            return;\n        }\n\n        if (!Yii::app()->user->isGuest && Yii::app()->getConfig('updatable')) {\n            $updateModel = new UpdateForm();\n            $updateNotification = $updateModel->updateNotification;\n\n            if ($updateNotification->result) {\n                return $this->getController()->renderPartial(\"/admin/update/_update_notification\", array('security_update_available'=>$updateNotification->security_update));\n            }\n        }\n    }\n\n    /**\n     * Display notifications\n     */\n    private function _notifications()\n    {\n            $aMessage = App()->session['arrayNotificationMessages'];\n            if (!is_array($aMessage)) {\n                $aMessage = array();\n            }\n            unset(App()->session['arrayNotificationMessages']);\n            return $this->getController()->renderPartial(\"notifications/notifications\", array('aMessage'=>$aMessage));\n    }\n\n    /**\n     * Survey summary\n     * @param array $aData\n     */\n    private function _nsurveysummary($aData)\n    {\n        if (isset($aData['display']['surveysummary'])) {\n            if ((empty($aData['display']['menu_bars']['surveysummary']) || !is_string($aData['display']['menu_bars']['surveysummary'])) && !empty($aData['gid'])) {\n                $aData['display']['menu_bars']['surveysummary'] = 'viewgroup';\n            }\n            $this->_surveysummary($aData);\n        }\n    }\n\n    /**\n     * Header\n     * @param array $aData\n     */\n    private function _showHeaders($aData, $sendHTTPHeader = true)\n    {\n        if (!isset($aData['display']['header']) || $aData['display']['header'] !== false) {\n            // Send HTTP header\n            if ($sendHTTPHeader) {\n                header(\"Content-type: text/html; charset=UTF-8\"); // needed for correct UTF-8 encoding\n            }\n            Yii::app()->getController()->_getAdminHeader();\n        }\n    }\n\n    /**\n     * _showadminmenu() function returns html text for the administration button bar\n     *\n     * @access public\n     * @param $aData\n     * @return string\n     * @global string $homedir\n     * @global string $scriptname\n     * @global string $surveyid\n     * @global string $setfont\n     * @global string $imageurl\n     * @global int $surveyid\n     */\n    public function _showadminmenu($aData)\n    {\n        // We don't wont the admin menu to be shown in login page\n        if (!Yii::app()->user->isGuest) {\n            // Default password notification\n            if (Yii::app()->session['pw_notify'] && Yii::app()->getConfig(\"debug\") < 2) {\n                $not = new UniqueNotification(array(\n                    'user_id' => App()->user->id,\n                    'importance' => Notification::HIGH_IMPORTANCE,\n                    'title' => gT('Password warning'),\n                    'message' => '<span class=\"fa fa-exclamation-circle text-warning\"></span>&nbsp;'.\n                        gT(\"Warning: You are still using the default password ('password'). Please change your password and re-login again.\")\n                ));\n                $not->save();\n            }\n            if (strtolower(getGlobalSetting('force_ssl')!='on') && Yii::app()->getConfig(\"debug\") < 2) {\n                $not = new UniqueNotification(array(\n                    'user_id' => App()->user->id,\n                    'importance' => Notification::HIGH_IMPORTANCE,\n                    'title' => gT('SSL not enforced'),\n                    'message' => '<span class=\"fa fa-exclamation-circle text-warning\"></span>&nbsp;'.\n                        gT(\"Warning: Please enforce SSL encrpytion in Global settings/Security after SSL is properly configured for your webserver.\")\n                ));\n                $not->save();                \n            }\n\n            // Count active survey\n            $aData['dataForConfigMenu']['activesurveyscount'] = $aData['activesurveyscount'] = Survey::model()->permission(Yii::app()->user->getId())->active()->count();\n\n            // Count survey\n            $aData['dataForConfigMenu']['surveyscount'] = Survey::model()->count();\n\n            // Count user\n            $aData['dataForConfigMenu']['userscount'] = User::model()->count();\n\n            //Check if have a comfortUpdate key\n            if (getGlobalSetting('emailsmtpdebug') != '') {\n                $aData['dataForConfigMenu']['comfortUpdateKey'] = gT('Activated');\n            } else {\n                $aData['dataForConfigMenu']['comfortUpdateKey'] = gT('None');\n            }\n\n            $aData['sitename'] = Yii::app()->getConfig(\"sitename\");\n\n            $updateModel = new UpdateForm();\n            $updateNotification = $updateModel->updateNotification;\n            $aData['showupdate'] = Yii::app()->getConfig('updatable') && $updateNotification->result && !$updateNotification->unstable_update;\n\n            // Fetch extra menus from plugins, e.g. last visited surveys\n            $aData['extraMenus'] = $this->fetchExtraMenus($aData);\n\n            // Get notification menu\n            $surveyId = isset($aData['surveyid']) ? $aData['surveyid'] : null;\n            Yii::import('application.controllers.admin.NotificationController');\n            $aData['adminNotifications'] = NotificationController::getMenuWidget($surveyId, true /* show spinner */);\n\n            $this->getController()->renderPartial(\"/admin/super/adminmenu\", $aData);\n        }\n        return null;\n    }\n\n    private function _titlebar($aData)\n    {\n        if (isset($aData['title_bar'])) {\n            $this->getController()->renderPartial(\"/admin/super/title_bar\", $aData);\n        }\n    }\n\n    private function _tokenbar($aData)\n    {\n        if (isset($aData['token_bar'])) {\n\n            if (isset($aData['token_bar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['token_bar']['closebutton']['url'];\n                $aData['token_bar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            $this->getController()->renderPartial(\"/admin/token/token_bar\", $aData);\n        }\n    }\n\n    /**\n     * Render the save/cancel bar for Organize question groups/questions\n     *\n     * @param array $aData\n     *\n     * @since 2014-09-30\n     * @author Olle Haerstedt\n     */\n    private function _organizequestionbar($aData)\n    {\n        if (isset($aData['organizebar'])) {\n            if (isset($aData['questionbar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['questionbar']['closebutton']['url'];\n                $aData['questionbar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            $aData['questionbar'] = $aData['organizebar'];\n            $this->getController()->renderPartial(\"/admin/survey/Question/questionbar_view\", $aData);\n        }\n    }\n\n    /**\n     * Shows admin menu for question\n     *\n     * @param array $aData\n     */\n    public function _questionbar($aData)\n    {\n        if (isset($aData['questionbar'])) {\n            if (is_object($aData['oSurvey'])) {\n\n                $iSurveyID = $aData['surveyid'];\n                /** @var Survey $oSurvey */\n                $oSurvey = $aData['oSurvey'];\n                $gid = $aData['gid'];\n                $qid = $aData['qid'];\n\n                // action\n                $action = (!empty($aData['display']['menu_bars']['qid_action'])) ? $aData['display']['menu_bars']['qid_action'] : null;\n                $baselang = $oSurvey->language;\n\n                //Show Question Details\n                //Count answer-options for this question\n                $aData['qct'] = Answer::model()->countByAttributes(array('qid' => $qid, 'language' => $baselang));\n\n                //Count subquestions for this question\n                $aData['sqct'] = Question::model()->countByAttributes(array('parent_qid' => $qid, 'language' => $baselang));\n\n                $qrrow = Question::model()->findByAttributes(array('qid' => $qid, 'gid' => $gid, 'sid' => $iSurveyID, 'language' => $baselang));\n                if (is_null($qrrow)) {\n                    return;\n                }\n                $questionsummary = \"\";\n\n                // Check if other questions in the Survey are dependent upon this question\n                $condarray = getQuestDepsForConditions($iSurveyID, \"all\", \"all\", $qid, \"by-targqid\", \"outsidegroup\");\n\n                // $surveyinfo = $oSurvey->attributes;\n                // $surveyinfo = array_map('flattenText', $surveyinfo);\n                $aData['activated'] = $oSurvey->active;\n\n                $qrrow = $qrrow->attributes;\n                $aData['languagelist'] = $oSurvey->getAllLanguages();\n                $aData['qtypes'] = getQuestionTypeList('', 'array');\n                $aData['action'] = $action;\n                $aData['surveyid'] = $iSurveyID;\n                $aData['qid'] = $qid;\n                $aData['gid'] = $gid;\n                $aData['qrrow'] = $qrrow;\n                $aData['baselang'] = $baselang;\n\n                $aAttributesWithValues = Question::model()->getAdvancedSettingsWithValues($qid, $qrrow['type'], $iSurveyID, $baselang);\n\n                $DisplayArray = array();\n                foreach ($aAttributesWithValues as $aAttribute) {\n                    if (($aAttribute['i18n'] == false && isset($aAttribute['value']) && $aAttribute['value'] != $aAttribute['default']) ||\n                        ($aAttribute['i18n'] == true && isset($aAttribute['value'][$baselang]) && $aAttribute['value'][$baselang] != $aAttribute['default'])) {\n                        if ($aAttribute['inputtype'] == 'singleselect') {\n                            if (isset($aAttribute['options'][$aAttribute['value']])) {\n                                                            $aAttribute['value'] = $aAttribute['options'][$aAttribute['value']];\n                            }\n                        }\n                        $DisplayArray[] = $aAttribute;\n                    }\n                }\n\n                $aData['advancedsettings'] = $DisplayArray;\n                $aData['condarray'] = $condarray;\n                if (isset($aData['questionbar']['closebutton']['url'])) {\n                    $sAlternativeUrl = $aData['questionbar']['closebutton']['url'];\n                    $aData['questionbar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n                }\n                $questionsummary .= $this->getController()->renderPartial('/admin/survey/Question/questionbar_view', $aData, true);\n                $this->getController()->renderPartial('/survey_view', ['display'=>$questionsummary]);\n            } else {\n                Yii::app()->session['flashmessage'] = gT(\"Invalid survey ID\");\n                $this->getController()->redirect(array(\"admin/index\"));\n            }\n        }\n    }\n\n    /**\n     * Show admin menu for question group view\n     *\n     * @param array $aData ?\n     */\n    function _nquestiongroupbar($aData)\n    {\n        if (isset($aData['questiongroupbar'])) {\n            if (!isset($aData['gid'])) {\n                if (isset($_GET['gid'])) {\n                    $aData['gid'] = $_GET['gid'];\n                }\n            }\n\n            $aData['surveyIsActive'] = $aData['oSurvey']->active !== 'N';\n\n            $surveyid = $aData['surveyid'];\n            $gid = $aData['gid'];\n            $oSurvey = $aData['oSurvey'];\n            $baselang = $oSurvey->language;\n\n            $aData['sumcount4'] = Question::model()->countByAttributes(array('sid' => $surveyid, 'gid' => $gid, 'language' => $baselang));\n\n            $sumresult1 = Survey::model()->with(array(\n                'languagesettings' => array('condition' => 'surveyls_language=language'))\n                )->findByPk($surveyid); //$sumquery1, 1) ; //Checked //  if surveyid is invalid then die to prevent errors at a later time\n            // $surveyinfo = $sumresult1->attributes;\n            // $surveyinfo = array_merge($surveyinfo, $sumresult1->defaultlanguage->attributes);\n            // $surveyinfo = array_map('flattenText', $surveyinfo);\n            //$surveyinfo = array_map('htmlspecialchars', $surveyinfo);\n            $aData['activated'] = $activated = $sumresult1->active;\n\n            $condarray = getGroupDepsForConditions($surveyid, \"all\", $gid, \"by-targgid\");\n            $aData['condarray'] = $condarray;\n\n            $aData['languagelist'] = $oSurvey->getAllLanguages();\n\n            if (isset($aData['questiongroupbar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['questiongroupbar']['closebutton']['url'];\n                $aData['questiongroupbar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            $this->getController()->renderPartial(\"/admin/survey/QuestionGroups/questiongroupbar_view\", $aData);\n        }\n    }\n\n    function _fullpagebar($aData)\n    {\n        if ((isset($aData['fullpagebar']))) {\n            if (isset($aData['fullpagebar']['closebutton']['url']) && !isset($aData['fullpagebar']['closebutton']['url_keep'])) {\n                $sAlternativeUrl = '/admin/index';\n                $aData['fullpagebar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n            $this->getController()->renderPartial(\"/admin/super/fullpagebar_view\", $aData);\n        }\n    }\n\n    /**\n     * Shows admin menu for surveys\n     * @param int Survey id\n     */\n    function _surveybar($aData)\n    {\n        if ((isset($aData['surveybar']))) {\n            $iSurveyID = $aData['surveyid'];\n            /** @var Survey $oSurvey */\n            $oSurvey = $aData['oSurvey'];\n            $gid = isset($aData['gid']) ? $aData['gid'] : null;\n            $aData['baselang'] = $oSurvey->language;\n            App()->getClientScript()->registerPackage('js-cookie');\n\n            //Parse data to send to view\n\n            // ACTIVATE SURVEY BUTTON\n\n            $condition = array('sid' => $iSurveyID, 'parent_qid' => 0, 'language' => $oSurvey->language);\n\n            $sumcount3 = Question::model()->countByAttributes($condition); //Checked\n\n            $aData['canactivate'] = $sumcount3 > 0 && Permission::model()->hasSurveyPermission($iSurveyID, 'surveyactivation', 'update');\n            $aData['candeactivate'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveyactivation', 'update');\n            $aData['expired'] = $oSurvey->expires != '' && ($oSurvey->expires < dateShift(date(\"Y-m-d H:i:s\"), \"Y-m-d H:i\", Yii::app()->getConfig('timeadjust')));\n            $aData['notstarted'] = ($oSurvey->startdate != '') && ($oSurvey->startdate > dateShift(date(\"Y-m-d H:i:s\"), \"Y-m-d H:i\", Yii::app()->getConfig('timeadjust')));\n\n            // Start of suckerfish menu\n            // TEST BUTTON\n            if (!$oSurvey->isActive) {\n                $aData['icontext'] = gT(\"Preview survey\");\n            } else {\n                $aData['icontext'] = gT(\"Execute survey\");\n            }\n\n            $aData['onelanguage'] = (count($oSurvey->allLanguages) == 1);\n            $aData['hasadditionallanguages'] = (count($oSurvey->additionalLanguages) > 0);\n\n            // Survey text elements BUTTON\n            $aData['surveylocale'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveylocale', 'read');\n            // EDIT SURVEY SETTINGS BUTTON\n            $aData['surveysettings'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'read');\n            // Survey permission item\n            $aData['surveysecurity'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysecurity', 'read');\n            // CHANGE QUESTION GROUP ORDER BUTTON\n            $aData['surveycontentread'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'read');\n            $aData['groupsum'] = ($oSurvey->groupsCount > 1);\n            // SET SURVEY QUOTAS BUTTON\n            $aData['quotas'] = Permission::model()->hasSurveyPermission($iSurveyID, 'quotas', 'read');\n            // Assessment menu item\n            $aData['assessments'] = Permission::model()->hasSurveyPermission($iSurveyID, 'assessments', 'read');\n            // Survey text elements BUTTON\n            // End if survey properties\n            // Tools menu item\n            // Delete survey item\n            $aData['surveydelete'] = Permission::model()->hasSurveyPermission($iSurveyID, 'survey', 'delete');\n            // Translate survey item\n            $aData['surveytranslate'] = Permission::model()->hasSurveyPermission($iSurveyID, 'translations', 'read');\n            // RESET SURVEY LOGIC BUTTON\n            //$sumquery6 = \"SELECT count(*) FROM \".db_table_name('conditions').\" as c, \".db_table_name('questions').\"\n            // as q WHERE c.qid = q.qid AND q.sid=$iSurveyID\"; //Getting a count of conditions for this survey\n            // TMSW Condition->Relevance:  How is conditionscount used?  Should Relevance do the same?\n\n            // Only show survey properties menu if at least one item is permitted\n            $aData['showSurveyPropertiesMenu'] =\n                    $aData['surveylocale']\n                || $aData['surveysettings']\n                || $aData['surveysecurity']\n                || $aData['surveycontentread']\n                || $aData['quotas']\n                || $aData['assessments'];\n\n            // Put menu items in tools menu\n            $event = new PluginEvent('beforeToolsMenuRender', $this);\n            $event->set('surveyId', $iSurveyID);\n            App()->getPluginManager()->dispatchEvent($event);\n            $extraToolsMenuItems = $event->get('menuItems');\n            $aData['extraToolsMenuItems'] = $extraToolsMenuItems;\n\n            // Add new menus in survey bar\n            $event = new PluginEvent('beforeSurveyBarRender', $this);\n            $event->set('surveyId', $iSurveyID);\n            App()->getPluginManager()->dispatchEvent($event);\n            $beforeSurveyBarRender = $event->get('menus');\n            $aData['beforeSurveyBarRender'] = $beforeSurveyBarRender ? $beforeSurveyBarRender : array();\n\n            // Only show tools menu if at least one item is permitted\n            $aData['showToolsMenu'] =\n                    $aData['surveydelete']\n                || $aData['surveytranslate']\n                || Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'update')\n                || !is_null($extraToolsMenuItems);\n\n            $iConditionCount = Condition::model()->with(array('questions'=>array('condition'=>'sid ='.$iSurveyID)))->count();\n\n            $aData['surveycontent'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'update');\n            $aData['conditionscount'] = ($iConditionCount > 0);\n            // Eport menu item\n            $aData['surveyexport'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'export');\n            // PRINTABLE VERSION OF SURVEY BUTTON\n            // SHOW PRINTABLE AND SCANNABLE VERSION OF SURVEY BUTTON\n            //browse responses menu item\n            $aData['respstatsread'] = Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'read')\n                || Permission::model()->hasSurveyPermission($iSurveyID, 'statistics', 'read')\n                || Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'export');\n            // Data entry screen menu item\n            $aData['responsescreate'] = Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'create');\n            $aData['responsesread'] = Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'read');\n            // TOKEN MANAGEMENT BUTTON\n            if (!$oSurvey->hasTokensTable) {\n                $aData['tokenmanagement'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'update')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'create');\n            } else {\n                $aData['tokenmanagement'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'update')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'create')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'read')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'export')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'import'); // and export / import ?\n            }\n\n            $aData['gid'] = $gid; // = $this->input->post('gid');\n\n            if (Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'read')) {\n                $aData['permission'] = true;\n            } else {\n                $aData['gid'] = $gid = null;\n                $aData['permission'] = false;\n            }\n\n            if (getGroupListLang($gid, $oSurvey->language, $iSurveyID)) {\n                $aData['groups'] = getGroupListLang($gid, $oSurvey->language, $iSurveyID);\n            } else {\n                $aData['groups'] = \"<option>\".gT(\"None\").\"</option>\";\n            }\n\n            $aData['GidPrev'] = getGidPrevious($iSurveyID, $gid);\n\n            $aData['GidNext'] = getGidNext($iSurveyID, $gid);\n            $aData['iIconSize'] = Yii::app()->getConfig('adminthemeiconsize');\n\n            if (isset($aData['surveybar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['surveybar']['closebutton']['url'];\n                $aData['surveybar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            if ($aData['gid'] == null) {\n                            $this->getController()->renderPartial(\"/admin/survey/surveybar_view\", $aData);\n            }\n        }\n    }\n\n    /**\n     * Show side menu for survey view\n     * @param array $aData all the needed data\n     */\n    private function _surveysidemenu($aData)\n    {\n        $iSurveyID = $aData['surveyid'];\n\n        $survey = Survey::model()->findByPk($iSurveyID);\n        // TODO : create subfunctions\n        $sumresult1 = Survey::model()->with(array(\n            'languagesettings' => array('condition'=>'surveyls_language=language'))\n        )->find('sid = :surveyid', array(':surveyid' => $aData['surveyid'])); //$sumquery1, 1) ; //Checked\n\n        if (Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'read')) {\n            $aData['permission'] = true;\n        } else {\n            $aData['gid'] = null;\n            $aData['permission'] = false;\n        }\n\n        if (!is_null($sumresult1)) {\n            // $surveyinfo = $sumresult1->attributes;\n            // $surveyinfo = array_merge($surveyinfo, $sumresult1->defaultlanguage->attributes);\n            // $surveyinfo = array_map('flattenText', $surveyinfo);\n            $aData['activated'] = $survey->isActive;\n\n            // Tokens\n            $bTokenExists = $survey->hasTokensTable;\n            if (!$bTokenExists) {\n                $aData['tokenmanagement'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'update')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'create');\n            } else {\n                $aData['tokenmanagement'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'update')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'create')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'read')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'export')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'import'); // and export / import ?\n            }\n\n            // Question explorer\n            $aGroups = QuestionGroup::model()->findAllByAttributes(array('sid' => $iSurveyID, \"language\" => $sumresult1->defaultlanguage->surveyls_language), array('order'=>'group_order ASC'));\n            if (count($aGroups)) {\n                foreach ($aGroups as $group) {\n                    $group->aQuestions = Question::model()->findAllByAttributes(array(\"sid\"=>$iSurveyID, \"gid\"=>$group['gid'], \"language\"=>$sumresult1->defaultlanguage->surveyls_language), array('order'=>'question_order ASC'));\n\n                    foreach ($group->aQuestions as $question) {\n                        if (is_object($question)) {\n                            $question->question = viewHelper::flatEllipsizeText($question->question, true, 60, '[...]', 0.5);\n                        }\n                    }\n                }\n            }\n\n            $aData['quickmenu'] = $this->renderQuickmenu($aData);\n            $aData['beforeSideMenuRender'] = $this->beforeSideMenuRender($aData);\n            $aData['aGroups'] = $aGroups;\n            $aData['surveycontent'] = Permission::model()->hasSurveyPermission($aData['surveyid'], 'surveycontent', 'read');\n            $aData['surveycontentupdate'] = Permission::model()->hasSurveyPermission($aData['surveyid'], 'surveycontent', 'update');\n            $aData['sideMenuBehaviour'] = getGlobalSetting('sideMenuBehaviour');\n            $this->getController()->renderPartial(\"/admin/super/sidemenu\", $aData);\n        } else {\n            Yii::app()->session['flashmessage'] = gT(\"Invalid survey ID\");\n            $this->getController()->redirect(array(\"admin/index\"));\n        }\n    }\n\n    /**\n     * Render the quick-menu that is shown\n     * when side-menu is hidden.\n     *\n     * Only show home-icon for now.\n     *\n     * Add support for plugin to attach\n     * icon elements using event afterQuickMenuLoad\n     *\n     * @param array $aData\n     * @return string\n     * @todo Make quick-menu user configurable\n     */\n    protected function renderQuickmenu(array $aData)\n    {\n        $event = new PluginEvent('afterQuickMenuLoad', $this);\n        $event->set('aData', $aData);\n        $result = App()->getPluginManager()->dispatchEvent($event);\n\n        $quickMenuItems = $result->get('quickMenuItems');\n        if (!empty($quickMenuItems)) {\n            usort($quickMenuItems, function($b1, $b2)\n            {\n                return (int) $b1['order'] > (int) $b2['order'];\n            });\n        }\n\n        $aData['quickMenuItems'] = $quickMenuItems;\n\n        if ($aData['quickMenuItems'] === null) {\n            $aData['quickMenuItems'] = array();\n        }\n\n        $html = $this->getController()->renderPartial('/admin/super/quickmenu', $aData, true);\n        return $html;\n    }\n\n    /**\n     * Returns content from event beforeSideMenuRender\n     * @param array $aData\n     * @return string\n     */\n    protected function beforeSideMenuRender(array $aData)\n    {\n        $event = new PluginEvent('beforeSideMenuRender', $this);\n        $event->set('aData', $aData);\n        $result = App()->getPluginManager()->dispatchEvent($event);\n        return $result->get('html');\n    }\n\n    /**\n     * listquestion groups\n     * @param array $aData\n     */\n    private function _listquestiongroups(array $aData)\n    {\n        if (isset($aData['display']['menu_bars']['listquestiongroups'])) {\n            $this->getController()->renderPartial(\"/admin/survey/QuestionGroups/listquestiongroups\", $aData);\n        }\n    }\n\n    private function _listquestions($aData)\n    {\n        if (isset($aData['display']['menu_bars']['listquestions'])) {\n            $iSurveyID = $aData['surveyid'];\n            $oSurvey = $aData['oSurvey'];\n            $baselang = $oSurvey->language;\n\n            // The DataProvider will be build from the Question model, search method\n            $model = new Question('search');\n\n            // Global filter\n            if (isset($_GET['Question'])) {\n                $model->setAttributes($_GET['Question'], false);\n            }\n\n            // Filter group\n            if (isset($_GET['gid'])) {\n                $model->gid = $_GET['gid'];\n            }\n\n            // Set number of page\n            if (isset($_GET['pageSize'])) {\n                Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);\n            }\n\n            // We filter the current survey id\n            $model->sid = $iSurveyID;\n            $model->language = $baselang;\n\n            $aData['model'] = $model;\n\n            $this->getController()->renderPartial(\"/admin/survey/Question/listquestions\", $aData);\n        }\n    }\n\n    /**\n     * Show survey summary\n     * @param array $aData\n     */\n    public function _surveysummary($aData)\n    {\n        $iSurveyID = $aData['surveyid'];\n\n        $aSurveyInfo = getSurveyInfo($iSurveyID);\n        /** @var Survey $oSurvey */\n        $oSurvey = $aData['oSurvey'];\n        $baselang = $aSurveyInfo['language'];\n        $activated = $aSurveyInfo['active'];\n\n        $condition = array('sid' => $iSurveyID, 'parent_qid' => 0, 'language' => $baselang);\n\n        $sumcount3 = Question::model()->countByAttributes($condition); //Checked\n        $condition = array('sid' => $iSurveyID, 'language' => $baselang);\n        $sumcount2 = QuestionGroup::model()->countByAttributes($condition); //Checked\n\n        //SURVEY SUMMARY\n        $aAdditionalLanguages = $oSurvey->additionalLanguages;\n        $surveysummary2 = \"\";\n        if ($aSurveyInfo['anonymized'] != \"N\") {\n            $surveysummary2 .= gT(\"Responses to this survey are anonymized.\").\"<br />\";\n        } else {\n            $surveysummary2 .= gT(\"Responses to this survey are NOT anonymized.\").\"<br />\";\n        }\n        if ($aSurveyInfo['format'] == \"S\") {\n            $surveysummary2 .= gT(\"It is presented question by question.\").\"<br />\";\n        } elseif ($aSurveyInfo['format'] == \"G\") {\n            $surveysummary2 .= gT(\"It is presented group by group.\").\"<br />\";\n        } else {\n            $surveysummary2 .= gT(\"It is presented on one single page.\").\"<br />\";\n        }\n        if ($aSurveyInfo['questionindex'] > 0) {\n            if ($aSurveyInfo['format'] == 'A') {\n                $surveysummary2 .= gT(\"No question index will be shown with this format.\").\"<br />\";\n            } elseif ($aSurveyInfo['questionindex'] == 1) {\n                $surveysummary2 .= gT(\"A question index will be shown; participants will be able to jump between viewed questions.\").\"<br />\";\n            } elseif ($aSurveyInfo['questionindex'] == 2) {\n                $surveysummary2 .= gT(\"A full question index will be shown; participants will be able to jump between relevant questions.\").\"<br />\";\n            }\n        }\n        if ($oSurvey->isDateStamp) {\n            $surveysummary2 .= gT(\"Responses will be date stamped.\").\"<br />\";\n        }\n        if ($oSurvey->isIpAddr) {\n            $surveysummary2 .= gT(\"IP Addresses will be logged\").\"<br />\";\n        }\n        if ($oSurvey->isRefUrl) {\n            $surveysummary2 .= gT(\"Referrer URL will be saved.\").\"<br />\";\n        }\n        if ($oSurvey->isUseCookie) {\n            $surveysummary2 .= gT(\"It uses cookies for access control.\").\"<br />\";\n        }\n        if ($oSurvey->isAllowRegister) {\n            $surveysummary2 .= gT(\"If tokens are used, the public may register for this survey\").\"<br />\";\n        }\n        if ($oSurvey->isAllowSave && !$oSurvey->isTokenAnswersPersistence) {\n            $surveysummary2 .= gT(\"Participants can save partially finished surveys\").\"<br />\\n\";\n        }\n        if ($oSurvey->emailnotificationto != '') {\n            $surveysummary2 .= gT(\"Basic email notification is sent to:\").' '.htmlspecialchars($aSurveyInfo['emailnotificationto']).\"<br />\\n\";\n        }\n        if ($oSurvey->emailresponseto != '') {\n            $surveysummary2 .= gT(\"Detailed email notification with response data is sent to:\").' '.htmlspecialchars($aSurveyInfo['emailresponseto']).\"<br />\\n\";\n        }\n\n        $dateformatdetails = getDateFormatData(Yii::app()->session['dateformat']);\n        if (trim($oSurvey->startdate) != '') {\n            Yii::import('application.libraries.Date_Time_Converter');\n            $datetimeobj = new Date_Time_Converter($oSurvey->startdate, 'Y-m-d H:i:s');\n            $aData['startdate'] = $datetimeobj->convert($dateformatdetails['phpdate'].' H:i');\n        } else {\n            $aData['startdate'] = \"-\";\n        }\n\n        if (trim($oSurvey->expires) != '') {\n            //$constructoritems = array($surveyinfo['expires'] , \"Y-m-d H:i:s\");\n            Yii::import('application.libraries.Date_Time_Converter');\n            $datetimeobj = new Date_Time_Converter($oSurvey->expires, 'Y-m-d H:i:s');\n            //$datetimeobj = new Date_Time_Converter($surveyinfo['expires'] , \"Y-m-d H:i:s\");\n            $aData['expdate'] = $datetimeobj->convert($dateformatdetails['phpdate'].' H:i');\n        } else {\n            $aData['expdate'] = \"-\";\n        }\n\n        $aData['language'] = getLanguageNameFromCode($oSurvey->language, false);\n\n        if ($oSurvey->currentLanguageSettings->surveyls_urldescription == \"\") {\n            $aSurveyInfo['surveyls_urldescription'] = htmlspecialchars($aSurveyInfo['surveyls_url']);\n        }\n\n        if ($oSurvey->currentLanguageSettings->surveyls_url != \"\") {\n            $aData['endurl'] = \" <a target='_blank' href=\\\"\".htmlspecialchars($aSurveyInfo['surveyls_url']).\"\\\" title=\\\"\".htmlspecialchars($aSurveyInfo['surveyls_url']).\"\\\">\".flattenText($oSurvey->currentLanguageSettings->surveyls_url).\"</a>\";\n        } else {\n            $aData['endurl'] = \"-\";\n        }\n\n        $aData['sumcount3'] = $sumcount3;\n        $aData['sumcount2'] = $sumcount2;\n\n        if ($activated == \"N\") {\n            $aData['activatedlang'] = gT(\"No\");\n        } else {\n            $aData['activatedlang'] = gT(\"Yes\");\n        }\n\n        $aData['activated'] = $activated;\n        if ($oSurvey->isActive) {\n            $aData['surveydb'] = Yii::app()->db->tablePrefix.\"survey_\".$iSurveyID;\n        }\n\n        $aData['warnings'] = \"\";\n        if ($activated == \"N\" && $sumcount3 == 0) {\n            $aData['warnings'] = gT(\"Survey cannot be activated yet.\").\"<br />\\n\";\n            if ($sumcount2 == 0 && Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'create')) {\n                $aData['warnings'] .= \"<span class='statusentryhighlight'>[\".gT(\"You need to add question groups\").\"]</span><br />\";\n            }\n            if ($sumcount3 == 0 && Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'create')) {\n                $aData['warnings'] .= \"<span class='statusentryhighlight'>[\".gT(\"You need to add questions\").\"]</span><br />\";\n            }\n        }\n        $aData['hints'] = $surveysummary2;\n\n        //return (array('column'=>array($columns_used,$hard_limit) , 'size' => array($length, $size_limit) ));\n        //        $aData['tableusage'] = getDBTableUsage($iSurveyID);\n        // ToDo: Table usage is calculated on every menu display which is too slow with big surveys.\n        // Needs to be moved to a database field and only updated if there are question/subquestions added/removed (it's currently also not functional due to the port)\n        //\n\n        $aData['tableusage'] = false;\n        $aData['aAdditionalLanguages'] = $aAdditionalLanguages;\n        $aData['groups_count'] = $sumcount2;\n\n        // We get the state of the quickaction\n        // If the survey is new (ie: it has no group), it is opened by default\n        $quickactionState = SettingsUser::getUserSettingValue('quickaction_state');\n        if ($quickactionState === null || $quickactionState === 0) {\n            $quickactionState = 1;\n            SettingsUser::setUserSetting('quickaction_state', 1);\n        }\n        $aData['quickactionstate'] = $quickactionState !== null ? intval($quickactionState) : 1;\n        $aData['subviewData'] = $aData;\n        $content = $this->getController()->renderPartial(\"/admin/survey/surveySummary_view\", $aData, true);\n        $this->getController()->renderPartial(\"/admin/super/sidebody\", array(\n            'content' => $content,\n            'sideMenuOpen' => true\n        ));\n    }\n\n    /**\n     * Browse Menu Bar\n     * @param array $aData\n     */\n    public function _browsemenubar(array $aData)\n    {\n        if (!empty($aData['display']['menu_bars']['browse']) && !empty($aData['surveyid'])) {\n            //BROWSE MENU BAR\n            $iSurveyID = $aData['surveyid'];\n            $aData['title'] = $aData['display']['menu_bars']['browse'];\n            $aData['thissurvey'] = getSurveyInfo($iSurveyID);\n            $aData['surveyid'] = $iSurveyID;\n\n            if (!isset($aData['menu']['closeurl'])) {\n                $aData['menu']['closeurl'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl(\"/admin/responses/sa/browse/surveyid/\".$aData['surveyid']));\n            }\n\n            $this->getController()->renderPartial(\"/admin/responses/browsemenubar_view\", $aData);\n        }\n    }\n\n    /**\n     * Load menu bar of user group controller.\n     * @param array $aData\n     * @return void\n     */\n    public function _userGroupBar(array $aData)\n    {\n        $ugid = (isset($aData['ugid'])) ? $aData['ugid'] : 0;\n        if (!empty($aData['display']['menu_bars']['user_group'])) {\n            $data = $aData;\n            Yii::app()->loadHelper('database');\n\n            if (!empty($ugid)) {\n                $userGroup = UserGroup::model()->findByPk($ugid);\n                $uid = Yii::app()->session['loginID'];\n                if ($userGroup && $userGroup->hasUser($uid)) {\n                    $data['userGroup'] = $userGroup;\n                } else {\n                    $data['userGroup'] = null;\n                }\n            }\n\n            $data['imageurl'] = Yii::app()->getConfig(\"adminimageurl\");\n\n            if (isset($aData['usergroupbar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['usergroupbar']['closebutton']['url'];\n                $aData['usergroupbar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            $this->getController()->renderPartial('/admin/usergroup/usergroupbar_view', $data);\n        }\n    }\n\n    /**\n     * @param string $extractdir\n     * @param string $destdir\n     * @return array\n     */\n    protected function _filterImportedResources($extractdir, $destdir)\n    {\n        $aErrorFilesInfo = array();\n        $aImportedFilesInfo = array();\n\n        if (!is_dir($extractdir)) {\n                    return array(array(), array());\n        }\n\n        if (!is_dir($destdir)) {\n                    mkdir($destdir);\n        }\n\n        $dh = opendir($extractdir);\n        if (!$dh) {\n            $aErrorFilesInfo[] = array(\n                \"filename\" => '',\n                \"status\" => gT(\"Extracted files not found - maybe a permission problem?\")\n            );    \n            return array($aImportedFilesInfo, $aErrorFilesInfo);                        \n        }\n        while ($direntry = readdir($dh)) {\n            if ($direntry != \".\" && $direntry != \"..\") {\n                if (is_file($extractdir.\"/\".$direntry)) {\n                    // is  a file\n                    $extfile = (string) substr(strrchr($direntry, '.'), 1);\n                    if (!(stripos(','.Yii::app()->getConfig('allowedresourcesuploads').',', ','.$extfile.',') === false)) {\n                        // Extension allowed\n                        if (!copy($extractdir.\"/\".$direntry, $destdir.\"/\".$direntry)) {\n                            $aErrorFilesInfo[] = array(\n                            \"filename\" => $direntry,\n                            \"status\" => gT(\"Copy failed\")\n                            );\n                        } else {\n                            $aImportedFilesInfo[] = array(\n                            \"filename\" => $direntry,\n                            \"status\" => gT(\"OK\")\n                            );\n                        }\n                    } else {\n                        // Extension forbidden\n                        $aErrorFilesInfo[] = array(\n                        \"filename\" => $direntry,\n                        \"status\" => gT(\"Forbidden Extension\")\n                        );\n                    }\n                    unlink($extractdir.\"/\".$direntry);\n                }\n            }\n        }\n\n        return array($aImportedFilesInfo, $aErrorFilesInfo);\n    }\n\n    /**\n     * Get extra menus from plugins that are using event beforeAdminMenuRender\n     *\n     * @param array $aData\n     * @return array<ExtraMenu>\n     */\n    protected function fetchExtraMenus(array $aData)\n    {\n        $event = new PluginEvent('beforeAdminMenuRender', $this);\n        $event->set('data', $aData);\n        $result = App()->getPluginManager()->dispatchEvent($event);\n\n        $extraMenus = $result->get('extraMenus');\n\n        if ($extraMenus === null) {\n            $extraMenus = array();\n        }\n\n        return $extraMenus;\n    }\n\n}\n"], "fixing_code": ["<?php\n\n/*\n* LimeSurvey\n* Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*\n*/\n\n/**\n* Survey Common Action\n*\n* This controller contains common functions for survey related views.\n*\n* @package        LimeSurvey\n* @subpackage    Backend\n* @author        LimeSurvey Team\n* @method        void index()\n*/\nclass Survey_Common_Action extends CAction\n{\n    public function __construct($controller = null, $id = null)\n    {\n        parent::__construct($controller, $id);\n        Yii::app()->request->updateNavigationStack();\n        // Make sure viewHelper can be autoloaded\n        Yii::import('application.helpers.viewHelper');\n    }\n\n    /**\n     * Override runWithParams() implementation in CAction to help us parse\n     * requests with subactions.\n     *\n     * @param array $params URL Parameters\n     * @return bool\n     */\n    public function runWithParams($params)\n    {\n        // Default method that would be called if the subaction and run() do not exist\n        $sDefault = 'index';\n\n        // Check for a subaction\n        if (empty($params['sa'])) {\n            $sSubAction = $sDefault; // default\n        } else {\n            $sSubAction = $params['sa'];\n        }\n        // Check if the class has the method\n        $oClass = new ReflectionClass($this);\n        if (!$oClass->hasMethod($sSubAction)) {\n            // If it doesn't, revert to default Yii method, that is run() which should reroute us somewhere else\n            $sSubAction = 'run';\n        }\n\n        // Populate the params. eg. surveyid -> iSurveyId\n        $params = $this->_addPseudoParams($params);\n\n        if (!empty($params['iSurveyId'])) {\n            LimeExpressionManager::SetSurveyId($params['iSurveyId']); // must be called early - it clears internal cache if a new survey is being used\n        }\n        // Check if the method is public and of the action class, not its parents\n        // ReflectionClass gets us the methods of the class and parent class\n        // If the above method existence check passed, it might not be neceessary that it is of the action class\n        $oMethod  = new ReflectionMethod($this, $sSubAction);\n\n        // Get the action classes from the admin controller as the urls necessarily do not equal the class names. Eg. survey -> surveyaction\n        $aActions = Yii::app()->getController()->getActionClasses();\n\n        if (empty($aActions[$this->getId()]) || strtolower($oMethod->getDeclaringClass()->name) != strtolower($aActions[$this->getId()]) || !$oMethod->isPublic()) {\n            // Either action doesn't exist in our whitelist, or the method class doesn't equal the action class or the method isn't public\n            // So let us get the last possible default method, ie. index\n            $oMethod = new ReflectionMethod($this, $sDefault);\n        }\n\n        // We're all good to go, let's execute it\n        // runWithParamsInternal would automatically get the parameters of the method and populate them as required with the params\n        return parent::runWithParamsInternal($this, $oMethod, $params);\n    }\n\n    /**\n     * Some functions have different parameters, which are just an alias of the\n     * usual parameters we're getting in the url. This function just populates\n     * those variables so that we don't end up in an error.\n     *\n     * This is also used while rendering wrapped template\n     * {@link Survey_Common_Action::_renderWrappedTemplate()}\n     *\n     * @param array $params Parameters to parse and populate\n     * @return array Populated parameters\n     * @throws CHttpException\n     */\n    private function _addPseudoParams($params)\n    {\n        // Return if params isn't an array\n        if (empty($params) || !is_array($params)) {\n            return $params;\n        }\n\n        $pseudos = array(\n            'id' => 'iId',\n            'gid' => 'iGroupId',\n            'qid' => 'iQuestionId',\n            /* priority is surveyid,surveyId,sid : surveyId=1&sid=2 set iSurveyId to 1 */\n            'sid' => array('iSurveyId', 'iSurveyID', 'surveyid'), // Old link use sid\n            'surveyId' => array('iSurveyId', 'iSurveyID', 'surveyid'), // PluginHelper->sidebody : if disable surveyId usage : broke API\n            'surveyid' => array('iSurveyId', 'iSurveyID', 'surveyid'),\n            'srid' => 'iSurveyResponseId',\n            'scid' => 'iSavedControlId',\n            'uid' => 'iUserId',\n            'ugid' => 'iUserGroupId',\n            'fieldname' => 'sFieldName',\n            'fieldtext' => 'sFieldText',\n            'action' => 'sAction',\n            'lang' => 'sLanguage',\n            'browselang' => 'sBrowseLang',\n            'tokenids' => 'aTokenIds',\n            'tokenid' => 'iTokenId',\n            'subaction' => 'sSubAction',\n        );\n\n        // Foreach pseudo, take the key, if it exists,\n        // Populate the values (taken as an array) as keys in params\n        // with that key's value in the params\n        // Chek is 2 params are equal for security issue.\n        foreach ($pseudos as $key => $pseudo) {\n            if (isset($params[$key])) {\n                $pseudo = (array) $pseudo;\n                foreach ($pseudo as $pseud) {\n                    if (empty($params[$pseud])) {\n                        $params[$pseud] = $params[$key];\n                    } elseif($params[$pseud] != $params[$key]){\n                        // Throw error about multiple params (and if they are different) #15204\n                        throw new CHttpException(403, sprintf(gT(\"Invalid parameter %s (%s already set)\"),$pseud,$key));\n                    }\n                }\n            }\n        }\n\n        /* Control sid,gid and qid params validity see #12434 */\n        // Fill param with according existing param, replace existing parameters.\n        // iGroupId/gid can be found with qid/iQuestionId\n        if (!empty($params['iQuestionId'])) {\n            if ((string) (int) $params['iQuestionId'] !== (string) $params['iQuestionId']) {\n                // pgsql need filtering before find\n                throw new CHttpException(403, gT(\"Invalid question id\"));\n            }\n            $oQuestion = Question::model()->find(\"qid=:qid\", array(\":qid\"=>$params['iQuestionId'])); //Move this in model to use cache\n            if (!$oQuestion) {\n                throw new CHttpException(404, gT(\"Question not found\"));\n            }\n            if (!isset($params['iGroupId'])) {\n                $params['iGroupId'] = $params['gid'] = $oQuestion->gid;\n            }\n        }\n        // iSurveyId/iSurveyID/sid can be found with gid/iGroupId\n        if (!empty($params['iGroupId'])) {\n            if ((string) (int) $params['iGroupId'] !== (string) $params['iGroupId']) {\n                // pgsql need filtering before find\n                throw new CHttpException(403, gT(\"Invalid group id\"));\n            }\n            $oGroup = QuestionGroup::model()->find(\"gid=:gid\", array(\":gid\"=>$params['iGroupId'])); //Move this in model to use cache\n            if (!$oGroup) {\n                throw new CHttpException(404, gT(\"Group not found\"));\n            }\n            if (!isset($params['iSurveyId'])) {\n                $params['iSurveyId'] = $params['iSurveyID'] = $params['surveyid'] = $params['sid'] = $oGroup->sid;\n            }\n        }\n        // Finally control validity of sid\n        if (!empty($params['iSurveyId'])) {\n            if ((string) (int) $params['iSurveyId'] !== (string) $params['iSurveyId']) {\n                // pgsql need filtering before find\n                // 403 mean The request was valid, but the server is refusing action.\n                throw new CHttpException(403, gT(\"Invalid survey id\"));\n            }\n            $oSurvey = Survey::model()->findByPk($params['iSurveyId']);\n            if (!$oSurvey) {\n                throw new CHttpException(404, gT(\"Survey not found\"));\n            }\n            // Minimal permission needed, extra permission must be tested in each controller\n            if (!Permission::model()->hasSurveyPermission($params['iSurveyId'], 'survey', 'read')) {\n                // 403 mean (too) The user might not have the necessary permissions for a resource.\n                // 401 semantically means \"unauthenticated\"\n                throw new CHttpException(403);\n            }\n            $params['iSurveyId'] = $params['iSurveyID'] = $params['surveyid'] = $params['sid'] = $oSurvey->sid;\n        }\n        // Finally return the populated array\n        return $params;\n    }\n\n    /**\n     * Action classes require them to have a run method. We reroute it to index\n     * if called.\n     */\n    public function run()\n    {\n        $this->index();\n    }\n\n    /**\n     * Routes the action into correct subaction\n     *\n     * @access protected\n     * @param string $sa\n     * @param string[] $get_vars\n     * @return mixed\n     */\n    protected function route($sa, array $get_vars)\n    {\n        $func_args = array();\n        foreach ($get_vars as $k => $var) {\n                    $func_args[$k] = Yii::app()->request->getQuery($var);\n        }\n\n        return call_user_func_array(array($this, $sa), $func_args);\n    }\n\n    /**\n     * @inheritdoc\n     * @param string $_viewFile_\n     */\n    public function renderInternal($_viewFile_, $_data_ = null, $_return_ = false)\n    {\n        // we use special variable names here to avoid conflict when extracting data\n        if (is_array($_data_)) {\n            extract($_data_, EXTR_PREFIX_SAME, 'data');\n        } else {\n            $data = $_data_;\n        }\n\n        if ($_return_) {\n            ob_start();\n            ob_implicit_flush(0);\n            require($_viewFile_);\n            return ob_get_clean();\n        } else {\n            require($_viewFile_);\n        }\n    }\n\n    /**\n     * Rendering the subviews and views of _renderWrappedTemplate\n     *\n     * @param string $sAction\n     * @param array|string $aViewUrls\n     * @param array $aData\n     * @return string\n     */\n    private function renderCentralContents($sAction, $aViewUrls, $aData = [])\n    {\n        //// This will be handle by subviews inclusions\n        $aViewUrls = (array) $aViewUrls; $sViewPath = '/admin/';\n        if (!empty($sAction)) {\n                    $sViewPath .= $sAction.'/';\n        }\n        ////  TODO : while refactoring, we must replace the use of $aViewUrls by $aData[.. conditions ..], and then call to function such as $this->_nsurveysummary($aData);\n        // Load views\n        $content = \"\";\n        foreach ($aViewUrls as $sViewKey => $viewUrl) {\n            if (empty($sViewKey) || !in_array($sViewKey, array('message', 'output'))) {\n                if (is_numeric($sViewKey)) {\n                    $content .= Yii::app()->getController()->renderPartial($sViewPath.$viewUrl, $aData, true);\n                } elseif (is_array($viewUrl)) {\n                    foreach ($viewUrl as $aSubData) {\n                        $aSubData = array_merge($aData, $aSubData);\n                        $content .= Yii::app()->getController()->renderPartial($sViewPath.$sViewKey, $aSubData, true);\n                    }\n                }\n            } else {\n                switch ($sViewKey) {\n                    //// We'll use some Bootstrap alerts, and call them inside each correct view.\n                    // Message\n                    case 'message' :\n                        if (empty($viewUrl['class'])) {\n                            $content .= Yii::app()->getController()->_showMessageBox($viewUrl['title'], $viewUrl['message'], null, true);\n                        } else {\n                            $content .= Yii::app()->getController()->_showMessageBox($viewUrl['title'], $viewUrl['message'], $viewUrl['class'], true);\n                        }\n                        break;\n\n                        // Output\n                    case 'output' :\n                        //// TODO : http://goo.gl/ABl5t5\n                        $content .= $viewUrl;\n\n                        if (isset($aViewUrls['afteroutput'])) {\n                            $content .= $aViewUrls['afteroutput'];\n                        }\n                        break;\n                }\n            }\n        }\n        return $content;\n    }\n\n    /**\n     * Renders template(s) wrapped in header and footer\n     *\n     * Addition of parameters should be avoided if they can be added to $aData\n     *\n     * NOTE FROM LOUIS : We want to remove this function, wich doesn't respect MVC pattern.\n     * The work it's doing should be handle by layout files, and subviews inside views.\n     * Eg : for route \"admin/survey/sa/listquestiongroups/surveyid/282267\"\n     *       the Group controller should use a main layout (with admin menu bar as a widget), then render the list view, in wich the question group bar is called as a subview.\n     *\n     * So for now, we try to evacuate all the renderWrappedTemplate logic (if statements, etc.) to subfunctions, then it will be easier to remove.\n     * Comments starting with //// indicate how it should work in the future\n     *\n     * @param string $sAction Current action, the folder to fetch views from\n     * @param array|string $aViewUrls View url(s)\n     * @param array $aData Data to be passed on. Optional.\n     * @param string|boolean $sRenderFile File to be rendered as a layout. Optional.\n     */\n    protected function _renderWrappedTemplate($sAction = '', $aViewUrls = array(), $aData = array(), $sRenderFile = false)\n    {\n        // Gather the data\n        $aData = $this->_addPseudoParams($aData); //// the check of the surveyid should be done in the Admin controller it self.\n\n        $basePath = (string) Yii::getPathOfAlias('application.views.admin.super');\n        \n        if ($sRenderFile == false) {\n            if (!empty($aData['surveyid'])) {\n\n                $aData['oSurvey'] = Survey::model()->findByPk($aData['surveyid']);\n\n                // Needed to evaluate EM expressions in question summary\n                // See bug #11845\n                LimeExpressionManager::SetSurveyId($aData['surveyid']);\n                LimeExpressionManager::StartProcessingPage(false,true);\n\n                $renderFile = $basePath.'/layout_insurvey.php';\n            } else {\n                $renderFile = $basePath.'/layout_main.php';\n            }\n        } else {\n            $renderFile = $basePath.'/'.$sRenderFile;\n        }\n\n        $content = $this->renderCentralContents($sAction, $aViewUrls, $aData);\n        $out = $this->renderInternal($renderFile, ['content' => $content, 'aData' => $aData], true);\n\n        App()->getClientScript()->render($out);\n        echo $out;\n    }\n\n    /**\n     * Display the update notification\n     */\n    protected function _updatenotification()\n    {\n        // Never use Notification model for database update.\n        // TODO: Real fix: No database queries while doing database update, meaning\n        // don't call _renderWrappedTemplate.\n        if (get_class($this) == 'databaseupdate') {\n            return;\n        }\n\n        if (!Yii::app()->user->isGuest && Yii::app()->getConfig('updatable')) {\n            $updateModel = new UpdateForm();\n            $updateNotification = $updateModel->updateNotification;\n\n            if ($updateNotification->result) {\n                return $this->getController()->renderPartial(\"/admin/update/_update_notification\", array('security_update_available'=>$updateNotification->security_update));\n            }\n        }\n    }\n\n    /**\n     * Display notifications\n     */\n    private function _notifications()\n    {\n            $aMessage = App()->session['arrayNotificationMessages'];\n            if (!is_array($aMessage)) {\n                $aMessage = array();\n            }\n            unset(App()->session['arrayNotificationMessages']);\n            return $this->getController()->renderPartial(\"notifications/notifications\", array('aMessage'=>$aMessage));\n    }\n\n    /**\n     * Survey summary\n     * @param array $aData\n     */\n    private function _nsurveysummary($aData)\n    {\n        if (isset($aData['display']['surveysummary'])) {\n            if ((empty($aData['display']['menu_bars']['surveysummary']) || !is_string($aData['display']['menu_bars']['surveysummary'])) && !empty($aData['gid'])) {\n                $aData['display']['menu_bars']['surveysummary'] = 'viewgroup';\n            }\n            $this->_surveysummary($aData);\n        }\n    }\n\n    /**\n     * Header\n     * @param array $aData\n     */\n    private function _showHeaders($aData, $sendHTTPHeader = true)\n    {\n        if (!isset($aData['display']['header']) || $aData['display']['header'] !== false) {\n            // Send HTTP header\n            if ($sendHTTPHeader) {\n                header(\"Content-type: text/html; charset=UTF-8\"); // needed for correct UTF-8 encoding\n            }\n            Yii::app()->getController()->_getAdminHeader();\n        }\n    }\n\n    /**\n     * _showadminmenu() function returns html text for the administration button bar\n     *\n     * @access public\n     * @param $aData\n     * @return string\n     * @global string $homedir\n     * @global string $scriptname\n     * @global string $surveyid\n     * @global string $setfont\n     * @global string $imageurl\n     * @global int $surveyid\n     */\n    public function _showadminmenu($aData)\n    {\n        // We don't wont the admin menu to be shown in login page\n        if (!Yii::app()->user->isGuest) {\n            // Default password notification\n            if (Yii::app()->session['pw_notify'] && Yii::app()->getConfig(\"debug\") < 2) {\n                $not = new UniqueNotification(array(\n                    'user_id' => App()->user->id,\n                    'importance' => Notification::HIGH_IMPORTANCE,\n                    'title' => gT('Password warning'),\n                    'message' => '<span class=\"fa fa-exclamation-circle text-warning\"></span>&nbsp;'.\n                        gT(\"Warning: You are still using the default password ('password'). Please change your password and re-login again.\")\n                ));\n                $not->save();\n            }\n            if (strtolower(getGlobalSetting('force_ssl')!='on') && Yii::app()->getConfig(\"debug\") < 2) {\n                $not = new UniqueNotification(array(\n                    'user_id' => App()->user->id,\n                    'importance' => Notification::HIGH_IMPORTANCE,\n                    'title' => gT('SSL not enforced'),\n                    'message' => '<span class=\"fa fa-exclamation-circle text-warning\"></span>&nbsp;'.\n                        gT(\"Warning: Please enforce SSL encrpytion in Global settings/Security after SSL is properly configured for your webserver.\")\n                ));\n                $not->save();                \n            }\n\n            // Count active survey\n            $aData['dataForConfigMenu']['activesurveyscount'] = $aData['activesurveyscount'] = Survey::model()->permission(Yii::app()->user->getId())->active()->count();\n\n            // Count survey\n            $aData['dataForConfigMenu']['surveyscount'] = Survey::model()->count();\n\n            // Count user\n            $aData['dataForConfigMenu']['userscount'] = User::model()->count();\n\n            //Check if have a comfortUpdate key\n            if (getGlobalSetting('emailsmtpdebug') != '') {\n                $aData['dataForConfigMenu']['comfortUpdateKey'] = gT('Activated');\n            } else {\n                $aData['dataForConfigMenu']['comfortUpdateKey'] = gT('None');\n            }\n\n            $aData['sitename'] = Yii::app()->getConfig(\"sitename\");\n\n            $updateModel = new UpdateForm();\n            $updateNotification = $updateModel->updateNotification;\n            $aData['showupdate'] = Yii::app()->getConfig('updatable') && $updateNotification->result && !$updateNotification->unstable_update;\n\n            // Fetch extra menus from plugins, e.g. last visited surveys\n            $aData['extraMenus'] = $this->fetchExtraMenus($aData);\n\n            // Get notification menu\n            $surveyId = isset($aData['surveyid']) ? $aData['surveyid'] : null;\n            Yii::import('application.controllers.admin.NotificationController');\n            $aData['adminNotifications'] = NotificationController::getMenuWidget($surveyId, true /* show spinner */);\n\n            $this->getController()->renderPartial(\"/admin/super/adminmenu\", $aData);\n        }\n        return null;\n    }\n\n    private function _titlebar($aData)\n    {\n        if (isset($aData['title_bar'])) {\n            $this->getController()->renderPartial(\"/admin/super/title_bar\", $aData);\n        }\n    }\n\n    private function _tokenbar($aData)\n    {\n        if (isset($aData['token_bar'])) {\n\n            if (isset($aData['token_bar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['token_bar']['closebutton']['url'];\n                $aData['token_bar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            $this->getController()->renderPartial(\"/admin/token/token_bar\", $aData);\n        }\n    }\n\n    /**\n     * Render the save/cancel bar for Organize question groups/questions\n     *\n     * @param array $aData\n     *\n     * @since 2014-09-30\n     * @author Olle Haerstedt\n     */\n    private function _organizequestionbar($aData)\n    {\n        if (isset($aData['organizebar'])) {\n            if (isset($aData['questionbar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['questionbar']['closebutton']['url'];\n                $aData['questionbar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            $aData['questionbar'] = $aData['organizebar'];\n            $this->getController()->renderPartial(\"/admin/survey/Question/questionbar_view\", $aData);\n        }\n    }\n\n    /**\n     * Shows admin menu for question\n     *\n     * @param array $aData\n     */\n    public function _questionbar($aData)\n    {\n        if (isset($aData['questionbar'])) {\n            if (is_object($aData['oSurvey'])) {\n\n                $iSurveyID = $aData['surveyid'];\n                /** @var Survey $oSurvey */\n                $oSurvey = $aData['oSurvey'];\n                $gid = $aData['gid'];\n                $qid = $aData['qid'];\n\n                // action\n                $action = (!empty($aData['display']['menu_bars']['qid_action'])) ? $aData['display']['menu_bars']['qid_action'] : null;\n                $baselang = $oSurvey->language;\n\n                //Show Question Details\n                //Count answer-options for this question\n                $aData['qct'] = Answer::model()->countByAttributes(array('qid' => $qid, 'language' => $baselang));\n\n                //Count subquestions for this question\n                $aData['sqct'] = Question::model()->countByAttributes(array('parent_qid' => $qid, 'language' => $baselang));\n\n                $qrrow = Question::model()->findByAttributes(array('qid' => $qid, 'gid' => $gid, 'sid' => $iSurveyID, 'language' => $baselang));\n                if (is_null($qrrow)) {\n                    return;\n                }\n                $questionsummary = \"\";\n\n                // Check if other questions in the Survey are dependent upon this question\n                $condarray = getQuestDepsForConditions($iSurveyID, \"all\", \"all\", $qid, \"by-targqid\", \"outsidegroup\");\n\n                // $surveyinfo = $oSurvey->attributes;\n                // $surveyinfo = array_map('flattenText', $surveyinfo);\n                $aData['activated'] = $oSurvey->active;\n\n                $qrrow = $qrrow->attributes;\n                $aData['languagelist'] = $oSurvey->getAllLanguages();\n                $aData['qtypes'] = getQuestionTypeList('', 'array');\n                $aData['action'] = $action;\n                $aData['surveyid'] = $iSurveyID;\n                $aData['qid'] = $qid;\n                $aData['gid'] = $gid;\n                $aData['qrrow'] = $qrrow;\n                $aData['baselang'] = $baselang;\n\n                $aAttributesWithValues = Question::model()->getAdvancedSettingsWithValues($qid, $qrrow['type'], $iSurveyID, $baselang);\n\n                $DisplayArray = array();\n                foreach ($aAttributesWithValues as $aAttribute) {\n                    if (($aAttribute['i18n'] == false && isset($aAttribute['value']) && $aAttribute['value'] != $aAttribute['default']) ||\n                        ($aAttribute['i18n'] == true && isset($aAttribute['value'][$baselang]) && $aAttribute['value'][$baselang] != $aAttribute['default'])) {\n                        if ($aAttribute['inputtype'] == 'singleselect') {\n                            if (isset($aAttribute['options'][$aAttribute['value']])) {\n                                                            $aAttribute['value'] = $aAttribute['options'][$aAttribute['value']];\n                            }\n                        }\n                        $DisplayArray[] = $aAttribute;\n                    }\n                }\n\n                $aData['advancedsettings'] = $DisplayArray;\n                $aData['condarray'] = $condarray;\n                if (isset($aData['questionbar']['closebutton']['url'])) {\n                    $sAlternativeUrl = $aData['questionbar']['closebutton']['url'];\n                    $aData['questionbar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n                }\n                $questionsummary .= $this->getController()->renderPartial('/admin/survey/Question/questionbar_view', $aData, true);\n                $this->getController()->renderPartial('/survey_view', ['display'=>$questionsummary]);\n            } else {\n                Yii::app()->session['flashmessage'] = gT(\"Invalid survey ID\");\n                $this->getController()->redirect(array(\"admin/index\"));\n            }\n        }\n    }\n\n    /**\n     * Show admin menu for question group view\n     *\n     * @param array $aData ?\n     */\n    function _nquestiongroupbar($aData)\n    {\n        if (isset($aData['questiongroupbar'])) {\n            if (!isset($aData['gid'])) {\n                if (isset($_GET['gid'])) {\n                    $aData['gid'] = $_GET['gid'];\n                }\n            }\n\n            $aData['surveyIsActive'] = $aData['oSurvey']->active !== 'N';\n\n            $surveyid = $aData['surveyid'];\n            $gid = $aData['gid'];\n            $oSurvey = $aData['oSurvey'];\n            $baselang = $oSurvey->language;\n\n            $aData['sumcount4'] = Question::model()->countByAttributes(array('sid' => $surveyid, 'gid' => $gid, 'language' => $baselang));\n\n            $sumresult1 = Survey::model()->with(array(\n                'languagesettings' => array('condition' => 'surveyls_language=language'))\n                )->findByPk($surveyid); //$sumquery1, 1) ; //Checked //  if surveyid is invalid then die to prevent errors at a later time\n            // $surveyinfo = $sumresult1->attributes;\n            // $surveyinfo = array_merge($surveyinfo, $sumresult1->defaultlanguage->attributes);\n            // $surveyinfo = array_map('flattenText', $surveyinfo);\n            //$surveyinfo = array_map('htmlspecialchars', $surveyinfo);\n            $aData['activated'] = $activated = $sumresult1->active;\n\n            $condarray = getGroupDepsForConditions($surveyid, \"all\", $gid, \"by-targgid\");\n            $aData['condarray'] = $condarray;\n\n            $aData['languagelist'] = $oSurvey->getAllLanguages();\n\n            if (isset($aData['questiongroupbar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['questiongroupbar']['closebutton']['url'];\n                $aData['questiongroupbar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            $this->getController()->renderPartial(\"/admin/survey/QuestionGroups/questiongroupbar_view\", $aData);\n        }\n    }\n\n    function _fullpagebar($aData)\n    {\n        if ((isset($aData['fullpagebar']))) {\n            if (isset($aData['fullpagebar']['closebutton']['url']) && !isset($aData['fullpagebar']['closebutton']['url_keep'])) {\n                $sAlternativeUrl = '/admin/index';\n                $aData['fullpagebar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n            $this->getController()->renderPartial(\"/admin/super/fullpagebar_view\", $aData);\n        }\n    }\n\n    /**\n     * Shows admin menu for surveys\n     * @param int Survey id\n     */\n    function _surveybar($aData)\n    {\n        if ((isset($aData['surveybar']))) {\n            $iSurveyID = $aData['surveyid'];\n            /** @var Survey $oSurvey */\n            $oSurvey = $aData['oSurvey'];\n            $gid = isset($aData['gid']) ? $aData['gid'] : null;\n            $aData['baselang'] = $oSurvey->language;\n            App()->getClientScript()->registerPackage('js-cookie');\n\n            //Parse data to send to view\n\n            // ACTIVATE SURVEY BUTTON\n\n            $condition = array('sid' => $iSurveyID, 'parent_qid' => 0, 'language' => $oSurvey->language);\n\n            $sumcount3 = Question::model()->countByAttributes($condition); //Checked\n\n            $aData['canactivate'] = $sumcount3 > 0 && Permission::model()->hasSurveyPermission($iSurveyID, 'surveyactivation', 'update');\n            $aData['candeactivate'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveyactivation', 'update');\n            $aData['expired'] = $oSurvey->expires != '' && ($oSurvey->expires < dateShift(date(\"Y-m-d H:i:s\"), \"Y-m-d H:i\", Yii::app()->getConfig('timeadjust')));\n            $aData['notstarted'] = ($oSurvey->startdate != '') && ($oSurvey->startdate > dateShift(date(\"Y-m-d H:i:s\"), \"Y-m-d H:i\", Yii::app()->getConfig('timeadjust')));\n\n            // Start of suckerfish menu\n            // TEST BUTTON\n            if (!$oSurvey->isActive) {\n                $aData['icontext'] = gT(\"Preview survey\");\n            } else {\n                $aData['icontext'] = gT(\"Execute survey\");\n            }\n\n            $aData['onelanguage'] = (count($oSurvey->allLanguages) == 1);\n            $aData['hasadditionallanguages'] = (count($oSurvey->additionalLanguages) > 0);\n\n            // Survey text elements BUTTON\n            $aData['surveylocale'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveylocale', 'read');\n            // EDIT SURVEY SETTINGS BUTTON\n            $aData['surveysettings'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'read');\n            // Survey permission item\n            $aData['surveysecurity'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysecurity', 'read');\n            // CHANGE QUESTION GROUP ORDER BUTTON\n            $aData['surveycontentread'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'read');\n            $aData['groupsum'] = ($oSurvey->groupsCount > 1);\n            // SET SURVEY QUOTAS BUTTON\n            $aData['quotas'] = Permission::model()->hasSurveyPermission($iSurveyID, 'quotas', 'read');\n            // Assessment menu item\n            $aData['assessments'] = Permission::model()->hasSurveyPermission($iSurveyID, 'assessments', 'read');\n            // Survey text elements BUTTON\n            // End if survey properties\n            // Tools menu item\n            // Delete survey item\n            $aData['surveydelete'] = Permission::model()->hasSurveyPermission($iSurveyID, 'survey', 'delete');\n            // Translate survey item\n            $aData['surveytranslate'] = Permission::model()->hasSurveyPermission($iSurveyID, 'translations', 'read');\n            // RESET SURVEY LOGIC BUTTON\n            //$sumquery6 = \"SELECT count(*) FROM \".db_table_name('conditions').\" as c, \".db_table_name('questions').\"\n            // as q WHERE c.qid = q.qid AND q.sid=$iSurveyID\"; //Getting a count of conditions for this survey\n            // TMSW Condition->Relevance:  How is conditionscount used?  Should Relevance do the same?\n\n            // Only show survey properties menu if at least one item is permitted\n            $aData['showSurveyPropertiesMenu'] =\n                    $aData['surveylocale']\n                || $aData['surveysettings']\n                || $aData['surveysecurity']\n                || $aData['surveycontentread']\n                || $aData['quotas']\n                || $aData['assessments'];\n\n            // Put menu items in tools menu\n            $event = new PluginEvent('beforeToolsMenuRender', $this);\n            $event->set('surveyId', $iSurveyID);\n            App()->getPluginManager()->dispatchEvent($event);\n            $extraToolsMenuItems = $event->get('menuItems');\n            $aData['extraToolsMenuItems'] = $extraToolsMenuItems;\n\n            // Add new menus in survey bar\n            $event = new PluginEvent('beforeSurveyBarRender', $this);\n            $event->set('surveyId', $iSurveyID);\n            App()->getPluginManager()->dispatchEvent($event);\n            $beforeSurveyBarRender = $event->get('menus');\n            $aData['beforeSurveyBarRender'] = $beforeSurveyBarRender ? $beforeSurveyBarRender : array();\n\n            // Only show tools menu if at least one item is permitted\n            $aData['showToolsMenu'] =\n                    $aData['surveydelete']\n                || $aData['surveytranslate']\n                || Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'update')\n                || !is_null($extraToolsMenuItems);\n\n            $iConditionCount = Condition::model()->with(array('questions'=>array('condition'=>'sid ='.$iSurveyID)))->count();\n\n            $aData['surveycontent'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'update');\n            $aData['conditionscount'] = ($iConditionCount > 0);\n            // Eport menu item\n            $aData['surveyexport'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'export');\n            // PRINTABLE VERSION OF SURVEY BUTTON\n            // SHOW PRINTABLE AND SCANNABLE VERSION OF SURVEY BUTTON\n            //browse responses menu item\n            $aData['respstatsread'] = Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'read')\n                || Permission::model()->hasSurveyPermission($iSurveyID, 'statistics', 'read')\n                || Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'export');\n            // Data entry screen menu item\n            $aData['responsescreate'] = Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'create');\n            $aData['responsesread'] = Permission::model()->hasSurveyPermission($iSurveyID, 'responses', 'read');\n            // TOKEN MANAGEMENT BUTTON\n            if (!$oSurvey->hasTokensTable) {\n                $aData['tokenmanagement'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'update')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'create');\n            } else {\n                $aData['tokenmanagement'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'update')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'create')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'read')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'export')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'import'); // and export / import ?\n            }\n\n            $aData['gid'] = $gid; // = $this->input->post('gid');\n\n            if (Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'read')) {\n                $aData['permission'] = true;\n            } else {\n                $aData['gid'] = $gid = null;\n                $aData['permission'] = false;\n            }\n\n            if (getGroupListLang($gid, $oSurvey->language, $iSurveyID)) {\n                $aData['groups'] = getGroupListLang($gid, $oSurvey->language, $iSurveyID);\n            } else {\n                $aData['groups'] = \"<option>\".gT(\"None\").\"</option>\";\n            }\n\n            $aData['GidPrev'] = getGidPrevious($iSurveyID, $gid);\n\n            $aData['GidNext'] = getGidNext($iSurveyID, $gid);\n            $aData['iIconSize'] = Yii::app()->getConfig('adminthemeiconsize');\n\n            if (isset($aData['surveybar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['surveybar']['closebutton']['url'];\n                $aData['surveybar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            if ($aData['gid'] == null) {\n                            $this->getController()->renderPartial(\"/admin/survey/surveybar_view\", $aData);\n            }\n        }\n    }\n\n    /**\n     * Show side menu for survey view\n     * @param array $aData all the needed data\n     */\n    private function _surveysidemenu($aData)\n    {\n        $iSurveyID = $aData['surveyid'];\n\n        $survey = Survey::model()->findByPk($iSurveyID);\n        // TODO : create subfunctions\n        $sumresult1 = Survey::model()->with(array(\n            'languagesettings' => array('condition'=>'surveyls_language=language'))\n        )->find('sid = :surveyid', array(':surveyid' => $aData['surveyid'])); //$sumquery1, 1) ; //Checked\n\n        if (Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'read')) {\n            $aData['permission'] = true;\n        } else {\n            $aData['gid'] = null;\n            $aData['permission'] = false;\n        }\n\n        if (!is_null($sumresult1)) {\n            // $surveyinfo = $sumresult1->attributes;\n            // $surveyinfo = array_merge($surveyinfo, $sumresult1->defaultlanguage->attributes);\n            // $surveyinfo = array_map('flattenText', $surveyinfo);\n            $aData['activated'] = $survey->isActive;\n\n            // Tokens\n            $bTokenExists = $survey->hasTokensTable;\n            if (!$bTokenExists) {\n                $aData['tokenmanagement'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'update')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'create');\n            } else {\n                $aData['tokenmanagement'] = Permission::model()->hasSurveyPermission($iSurveyID, 'surveysettings', 'update')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'create')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'read')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'export')\n                    || Permission::model()->hasSurveyPermission($iSurveyID, 'tokens', 'import'); // and export / import ?\n            }\n\n            // Question explorer\n            $aGroups = QuestionGroup::model()->findAllByAttributes(array('sid' => $iSurveyID, \"language\" => $sumresult1->defaultlanguage->surveyls_language), array('order'=>'group_order ASC'));\n            if (count($aGroups)) {\n                foreach ($aGroups as $group) {\n                    $group->aQuestions = Question::model()->findAllByAttributes(array(\"sid\"=>$iSurveyID, \"gid\"=>$group['gid'], \"language\"=>$sumresult1->defaultlanguage->surveyls_language), array('order'=>'question_order ASC'));\n\n                    foreach ($group->aQuestions as $question) {\n                        if (is_object($question)) {\n                            $question->question = viewHelper::flatEllipsizeText($question->question, true, 60, '[...]', 0.5);\n                        }\n                    }\n                }\n            }\n\n            $aData['quickmenu'] = $this->renderQuickmenu($aData);\n            $aData['beforeSideMenuRender'] = $this->beforeSideMenuRender($aData);\n            $aData['aGroups'] = $aGroups;\n            $aData['surveycontent'] = Permission::model()->hasSurveyPermission($aData['surveyid'], 'surveycontent', 'read');\n            $aData['surveycontentupdate'] = Permission::model()->hasSurveyPermission($aData['surveyid'], 'surveycontent', 'update');\n            $aData['sideMenuBehaviour'] = getGlobalSetting('sideMenuBehaviour');\n            $this->getController()->renderPartial(\"/admin/super/sidemenu\", $aData);\n        } else {\n            Yii::app()->session['flashmessage'] = gT(\"Invalid survey ID\");\n            $this->getController()->redirect(array(\"admin/index\"));\n        }\n    }\n\n    /**\n     * Render the quick-menu that is shown\n     * when side-menu is hidden.\n     *\n     * Only show home-icon for now.\n     *\n     * Add support for plugin to attach\n     * icon elements using event afterQuickMenuLoad\n     *\n     * @param array $aData\n     * @return string\n     * @todo Make quick-menu user configurable\n     */\n    protected function renderQuickmenu(array $aData)\n    {\n        $event = new PluginEvent('afterQuickMenuLoad', $this);\n        $event->set('aData', $aData);\n        $result = App()->getPluginManager()->dispatchEvent($event);\n\n        $quickMenuItems = $result->get('quickMenuItems');\n        if (!empty($quickMenuItems)) {\n            usort($quickMenuItems, function($b1, $b2)\n            {\n                return (int) $b1['order'] > (int) $b2['order'];\n            });\n        }\n\n        $aData['quickMenuItems'] = $quickMenuItems;\n\n        if ($aData['quickMenuItems'] === null) {\n            $aData['quickMenuItems'] = array();\n        }\n\n        $html = $this->getController()->renderPartial('/admin/super/quickmenu', $aData, true);\n        return $html;\n    }\n\n    /**\n     * Returns content from event beforeSideMenuRender\n     * @param array $aData\n     * @return string\n     */\n    protected function beforeSideMenuRender(array $aData)\n    {\n        $event = new PluginEvent('beforeSideMenuRender', $this);\n        $event->set('aData', $aData);\n        $result = App()->getPluginManager()->dispatchEvent($event);\n        return $result->get('html');\n    }\n\n    /**\n     * listquestion groups\n     * @param array $aData\n     */\n    private function _listquestiongroups(array $aData)\n    {\n        if (isset($aData['display']['menu_bars']['listquestiongroups'])) {\n            $this->getController()->renderPartial(\"/admin/survey/QuestionGroups/listquestiongroups\", $aData);\n        }\n    }\n\n    private function _listquestions($aData)\n    {\n        if (isset($aData['display']['menu_bars']['listquestions'])) {\n            $iSurveyID = $aData['surveyid'];\n            $oSurvey = $aData['oSurvey'];\n            $baselang = $oSurvey->language;\n\n            // The DataProvider will be build from the Question model, search method\n            $model = new Question('search');\n\n            // Global filter\n            if (isset($_GET['Question'])) {\n                $model->setAttributes($_GET['Question'], false);\n            }\n\n            // Filter group\n            if (isset($_GET['gid'])) {\n                $model->gid = $_GET['gid'];\n            }\n\n            // Set number of page\n            if (isset($_GET['pageSize'])) {\n                Yii::app()->user->setState('pageSize', (int) $_GET['pageSize']);\n            }\n\n            // We filter the current survey id\n            $model->sid = $iSurveyID;\n            $model->language = $baselang;\n\n            $aData['model'] = $model;\n\n            $this->getController()->renderPartial(\"/admin/survey/Question/listquestions\", $aData);\n        }\n    }\n\n    /**\n     * Show survey summary\n     * @param array $aData\n     */\n    public function _surveysummary($aData)\n    {\n        $iSurveyID = $aData['surveyid'];\n\n        $aSurveyInfo = getSurveyInfo($iSurveyID);\n        /** @var Survey $oSurvey */\n        $oSurvey = $aData['oSurvey'];\n        $baselang = $aSurveyInfo['language'];\n        $activated = $aSurveyInfo['active'];\n\n        $condition = array('sid' => $iSurveyID, 'parent_qid' => 0, 'language' => $baselang);\n\n        $sumcount3 = Question::model()->countByAttributes($condition); //Checked\n        $condition = array('sid' => $iSurveyID, 'language' => $baselang);\n        $sumcount2 = QuestionGroup::model()->countByAttributes($condition); //Checked\n\n        //SURVEY SUMMARY\n        $aAdditionalLanguages = $oSurvey->additionalLanguages;\n        $surveysummary2 = \"\";\n        if ($aSurveyInfo['anonymized'] != \"N\") {\n            $surveysummary2 .= gT(\"Responses to this survey are anonymized.\").\"<br />\";\n        } else {\n            $surveysummary2 .= gT(\"Responses to this survey are NOT anonymized.\").\"<br />\";\n        }\n        if ($aSurveyInfo['format'] == \"S\") {\n            $surveysummary2 .= gT(\"It is presented question by question.\").\"<br />\";\n        } elseif ($aSurveyInfo['format'] == \"G\") {\n            $surveysummary2 .= gT(\"It is presented group by group.\").\"<br />\";\n        } else {\n            $surveysummary2 .= gT(\"It is presented on one single page.\").\"<br />\";\n        }\n        if ($aSurveyInfo['questionindex'] > 0) {\n            if ($aSurveyInfo['format'] == 'A') {\n                $surveysummary2 .= gT(\"No question index will be shown with this format.\").\"<br />\";\n            } elseif ($aSurveyInfo['questionindex'] == 1) {\n                $surveysummary2 .= gT(\"A question index will be shown; participants will be able to jump between viewed questions.\").\"<br />\";\n            } elseif ($aSurveyInfo['questionindex'] == 2) {\n                $surveysummary2 .= gT(\"A full question index will be shown; participants will be able to jump between relevant questions.\").\"<br />\";\n            }\n        }\n        if ($oSurvey->isDateStamp) {\n            $surveysummary2 .= gT(\"Responses will be date stamped.\").\"<br />\";\n        }\n        if ($oSurvey->isIpAddr) {\n            $surveysummary2 .= gT(\"IP Addresses will be logged\").\"<br />\";\n        }\n        if ($oSurvey->isRefUrl) {\n            $surveysummary2 .= gT(\"Referrer URL will be saved.\").\"<br />\";\n        }\n        if ($oSurvey->isUseCookie) {\n            $surveysummary2 .= gT(\"It uses cookies for access control.\").\"<br />\";\n        }\n        if ($oSurvey->isAllowRegister) {\n            $surveysummary2 .= gT(\"If tokens are used, the public may register for this survey\").\"<br />\";\n        }\n        if ($oSurvey->isAllowSave && !$oSurvey->isTokenAnswersPersistence) {\n            $surveysummary2 .= gT(\"Participants can save partially finished surveys\").\"<br />\\n\";\n        }\n        if ($oSurvey->emailnotificationto != '') {\n            $surveysummary2 .= gT(\"Basic email notification is sent to:\").' '.htmlspecialchars($aSurveyInfo['emailnotificationto']).\"<br />\\n\";\n        }\n        if ($oSurvey->emailresponseto != '') {\n            $surveysummary2 .= gT(\"Detailed email notification with response data is sent to:\").' '.htmlspecialchars($aSurveyInfo['emailresponseto']).\"<br />\\n\";\n        }\n\n        $dateformatdetails = getDateFormatData(Yii::app()->session['dateformat']);\n        if (trim($oSurvey->startdate) != '') {\n            Yii::import('application.libraries.Date_Time_Converter');\n            $datetimeobj = new Date_Time_Converter($oSurvey->startdate, 'Y-m-d H:i:s');\n            $aData['startdate'] = $datetimeobj->convert($dateformatdetails['phpdate'].' H:i');\n        } else {\n            $aData['startdate'] = \"-\";\n        }\n\n        if (trim($oSurvey->expires) != '') {\n            //$constructoritems = array($surveyinfo['expires'] , \"Y-m-d H:i:s\");\n            Yii::import('application.libraries.Date_Time_Converter');\n            $datetimeobj = new Date_Time_Converter($oSurvey->expires, 'Y-m-d H:i:s');\n            //$datetimeobj = new Date_Time_Converter($surveyinfo['expires'] , \"Y-m-d H:i:s\");\n            $aData['expdate'] = $datetimeobj->convert($dateformatdetails['phpdate'].' H:i');\n        } else {\n            $aData['expdate'] = \"-\";\n        }\n\n        $aData['language'] = getLanguageNameFromCode($oSurvey->language, false);\n\n        if ($oSurvey->currentLanguageSettings->surveyls_urldescription == \"\") {\n            $aSurveyInfo['surveyls_urldescription'] = htmlspecialchars($aSurveyInfo['surveyls_url']);\n        }\n\n        if ($oSurvey->currentLanguageSettings->surveyls_url != \"\") {\n            $aData['endurl'] = \" <a target='_blank' href=\\\"\".htmlspecialchars($aSurveyInfo['surveyls_url']).\"\\\" title=\\\"\".htmlspecialchars($aSurveyInfo['surveyls_url']).\"\\\">\".flattenText($oSurvey->currentLanguageSettings->surveyls_url).\"</a>\";\n        } else {\n            $aData['endurl'] = \"-\";\n        }\n\n        $aData['sumcount3'] = $sumcount3;\n        $aData['sumcount2'] = $sumcount2;\n\n        if ($activated == \"N\") {\n            $aData['activatedlang'] = gT(\"No\");\n        } else {\n            $aData['activatedlang'] = gT(\"Yes\");\n        }\n\n        $aData['activated'] = $activated;\n        if ($oSurvey->isActive) {\n            $aData['surveydb'] = Yii::app()->db->tablePrefix.\"survey_\".$iSurveyID;\n        }\n\n        $aData['warnings'] = \"\";\n        if ($activated == \"N\" && $sumcount3 == 0) {\n            $aData['warnings'] = gT(\"Survey cannot be activated yet.\").\"<br />\\n\";\n            if ($sumcount2 == 0 && Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'create')) {\n                $aData['warnings'] .= \"<span class='statusentryhighlight'>[\".gT(\"You need to add question groups\").\"]</span><br />\";\n            }\n            if ($sumcount3 == 0 && Permission::model()->hasSurveyPermission($iSurveyID, 'surveycontent', 'create')) {\n                $aData['warnings'] .= \"<span class='statusentryhighlight'>[\".gT(\"You need to add questions\").\"]</span><br />\";\n            }\n        }\n        $aData['hints'] = $surveysummary2;\n\n        //return (array('column'=>array($columns_used,$hard_limit) , 'size' => array($length, $size_limit) ));\n        //        $aData['tableusage'] = getDBTableUsage($iSurveyID);\n        // ToDo: Table usage is calculated on every menu display which is too slow with big surveys.\n        // Needs to be moved to a database field and only updated if there are question/subquestions added/removed (it's currently also not functional due to the port)\n        //\n\n        $aData['tableusage'] = false;\n        $aData['aAdditionalLanguages'] = $aAdditionalLanguages;\n        $aData['groups_count'] = $sumcount2;\n\n        // We get the state of the quickaction\n        // If the survey is new (ie: it has no group), it is opened by default\n        $quickactionState = SettingsUser::getUserSettingValue('quickaction_state');\n        if ($quickactionState === null || $quickactionState === 0) {\n            $quickactionState = 1;\n            SettingsUser::setUserSetting('quickaction_state', 1);\n        }\n        $aData['quickactionstate'] = $quickactionState !== null ? intval($quickactionState) : 1;\n        $aData['subviewData'] = $aData;\n        $content = $this->getController()->renderPartial(\"/admin/survey/surveySummary_view\", $aData, true);\n        $this->getController()->renderPartial(\"/admin/super/sidebody\", array(\n            'content' => $content,\n            'sideMenuOpen' => true\n        ));\n    }\n\n    /**\n     * Browse Menu Bar\n     * @param array $aData\n     */\n    public function _browsemenubar(array $aData)\n    {\n        if (!empty($aData['display']['menu_bars']['browse']) && !empty($aData['surveyid'])) {\n            //BROWSE MENU BAR\n            $iSurveyID = $aData['surveyid'];\n            $aData['title'] = $aData['display']['menu_bars']['browse'];\n            $aData['thissurvey'] = getSurveyInfo($iSurveyID);\n            $aData['surveyid'] = $iSurveyID;\n\n            if (!isset($aData['menu']['closeurl'])) {\n                $aData['menu']['closeurl'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl(\"/admin/responses/sa/browse/surveyid/\".$aData['surveyid']));\n            }\n\n            $this->getController()->renderPartial(\"/admin/responses/browsemenubar_view\", $aData);\n        }\n    }\n\n    /**\n     * Load menu bar of user group controller.\n     * @param array $aData\n     * @return void\n     */\n    public function _userGroupBar(array $aData)\n    {\n        $ugid = (isset($aData['ugid'])) ? $aData['ugid'] : 0;\n        if (!empty($aData['display']['menu_bars']['user_group'])) {\n            $data = $aData;\n            Yii::app()->loadHelper('database');\n\n            if (!empty($ugid)) {\n                $userGroup = UserGroup::model()->findByPk($ugid);\n                $uid = Yii::app()->session['loginID'];\n                if ($userGroup && $userGroup->hasUser($uid)) {\n                    $data['userGroup'] = $userGroup;\n                } else {\n                    $data['userGroup'] = null;\n                }\n            }\n\n            $data['imageurl'] = Yii::app()->getConfig(\"adminimageurl\");\n\n            if (isset($aData['usergroupbar']['closebutton']['url'])) {\n                $sAlternativeUrl = $aData['usergroupbar']['closebutton']['url'];\n                $aData['usergroupbar']['closebutton']['url'] = Yii::app()->request->getUrlReferrer(Yii::app()->createUrl($sAlternativeUrl));\n            }\n\n            $this->getController()->renderPartial('/admin/usergroup/usergroupbar_view', $data);\n        }\n    }\n\n    /**\n     * @param string $extractdir\n     * @param string $destdir\n     * @return array\n     */\n    protected function _filterImportedResources($extractdir, $destdir)\n    {\n        $aErrorFilesInfo = array();\n        $aImportedFilesInfo = array();\n\n        if (!is_dir($extractdir)) {\n                    return array(array(), array());\n        }\n\n        if (!is_dir($destdir)) {\n                    mkdir($destdir);\n        }\n\n        $dh = opendir($extractdir);\n        if (!$dh) {\n            $aErrorFilesInfo[] = array(\n                \"filename\" => '',\n                \"status\" => gT(\"Extracted files not found - maybe a permission problem?\")\n            );    \n            return array($aImportedFilesInfo, $aErrorFilesInfo);                        \n        }\n        while ($direntry = readdir($dh)) {\n            if ($direntry != \".\" && $direntry != \"..\") {\n                if (is_file($extractdir.\"/\".$direntry)) {\n                    // is  a file\n                    $extfile = (string) substr(strrchr($direntry, '.'), 1);\n                    if (!(stripos(','.Yii::app()->getConfig('allowedresourcesuploads').',', ','.$extfile.',') === false)) {\n                        // Extension allowed\n                        if (!copy($extractdir.\"/\".$direntry, $destdir.\"/\".$direntry)) {\n                            $aErrorFilesInfo[] = array(\n                            \"filename\" => $direntry,\n                            \"status\" => gT(\"Copy failed\")\n                            );\n                        } else {\n                            $aImportedFilesInfo[] = array(\n                            \"filename\" => $direntry,\n                            \"status\" => gT(\"OK\")\n                            );\n                        }\n                    } else {\n                        // Extension forbidden\n                        $aErrorFilesInfo[] = array(\n                        \"filename\" => $direntry,\n                        \"status\" => gT(\"Forbidden Extension\")\n                        );\n                    }\n                    unlink($extractdir.\"/\".$direntry);\n                }\n            }\n        }\n\n        return array($aImportedFilesInfo, $aErrorFilesInfo);\n    }\n\n    /**\n     * Get extra menus from plugins that are using event beforeAdminMenuRender\n     *\n     * @param array $aData\n     * @return array<ExtraMenu>\n     */\n    protected function fetchExtraMenus(array $aData)\n    {\n        $event = new PluginEvent('beforeAdminMenuRender', $this);\n        $event->set('data', $aData);\n        $result = App()->getPluginManager()->dispatchEvent($event);\n\n        $extraMenus = $result->get('extraMenus');\n\n        if ($extraMenus === null) {\n            $extraMenus = array();\n        }\n\n        return $extraMenus;\n    }\n\n}\n"], "filenames": ["application/core/Survey_Common_Action.php"], "buggy_code_start_loc": [109], "buggy_code_end_loc": [290], "fixing_code_start_loc": [109], "fixing_code_end_loc": [290], "type": "CWE-79", "message": "LimeSurvey before v3.17.14 allows reflected XSS for escalating privileges from a low-privileged account to, for example, SuperAdmin. This occurs in application/core/Survey_Common_Action.php,", "other": {"cve": {"id": "CVE-2019-16173", "sourceIdentifier": "cve@mitre.org", "published": "2019-09-09T19:15:11.283", "lastModified": "2023-02-13T19:20:37.143", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LimeSurvey before v3.17.14 allows reflected XSS for escalating privileges from a low-privileged account to, for example, SuperAdmin. This occurs in application/core/Survey_Common_Action.php,"}, {"lang": "es", "value": "LimeSurvey versiones anteriores a v3.17.14, permite un ataque de tipo XSS reflejado para escalar los privilegios desde una cuenta con pocos privilegios para, por ejemplo, SuperAdmin. Esto ocurre en el archivo application/core/Survey_Common_Action.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.17.4", "matchCriteriaId": "84F3FE51-7F29-4A18-B111-278E2DBCD753"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/154479/LimeSurvey-3.17.13-Cross-Site-Scripting.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "http://seclists.org/fulldisclosure/2019/Sep/22", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "https://github.com/LimeSurvey/LimeSurvey/commit/f1c1ad2d24eb262363511fcca2e96ce737064006", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://seclists.org/bugtraq/2019/Sep/27", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "https://www.limesurvey.org/limesurvey-updates/2188-limesurvey-3-17-14-build-190902-released", "source": "cve@mitre.org", "tags": ["Broken Link"]}]}, "github_commit_url": "https://github.com/LimeSurvey/LimeSurvey/commit/f1c1ad2d24eb262363511fcca2e96ce737064006"}}