{"buggy_code": ["<?php\nApp::uses('AppController', 'Controller');\nApp::uses('Xml', 'Utility');\n\nclass FeedsController extends AppController\n{\n    public $components = array('Security' ,'RequestHandler');   // XXX ACL component\n\n    public $paginate = array(\n            'limit' => 60,\n            'recursive' => -1,\n            'contain' => array('Tag', 'SharingGroup'),\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events\n            'order' => array(\n                    'Feed.default' => 'DESC',\n                    'Feed.id' => 'ASC'\n            ),\n    );\n\n    public $uses = array('Feed');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n        $this->Security->unlockedActions[] = 'previewIndex';\n        $this->Security->unlockedActions[] = 'feedCoverage';\n        if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != Configure::read('MISP.host_org_id')) {\n            throw new MethodNotAllowedException(__('You don\\'t have the required privileges to do that.'));\n        }\n    }\n\n    public function index()\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $this->Feed->load_default_feeds();\n        $scope = isset($this->passedArgs['scope']) ? $this->passedArgs['scope'] : 'all';\n        if ($scope !== 'all') {\n            if ($scope == 'enabled') {\n                $this->paginate['conditions'][] = array(\n                    'OR' => array(\n                        'Feed.enabled' => 1,\n                        'Feed.caching_enabled' => 1\n                    )\n                );\n            } else {\n                $this->paginate['conditions'][] = array(\n                    'Feed.default' => $scope == 'custom' ? 0 : 1\n                );\n            }\n        }\n        if ($this->_isRest()) {\n            $keepFields = array('conditions', 'contain', 'recursive', 'sort');\n            $searchParams = array();\n            foreach ($keepFields as $field) {\n                if (!empty($this->paginate[$field])) {\n                    $searchParams[$field] = $this->paginate[$field];\n                }\n            }\n\n            $data = $this->Feed->find('all', $searchParams);\n        } else {\n            $data = $this->paginate();\n        }\n        $this->loadModel('Event');\n        foreach ($data as $key => $value) {\n            if ($value['Feed']['event_id'] != 0 && $value['Feed']['fixed_event']) {\n                $event = $this->Event->find('first', array('conditions' => array('Event.id' => $value['Feed']['event_id']), 'recursive' => -1, 'fields' => array('Event.id')));\n                if (empty($event)) {\n                    $data[$key]['Feed']['event_error'] = true;\n                }\n            }\n        }\n        if ($this->_isSiteAdmin()) {\n            $data = $this->Feed->attachFeedCacheTimestamps($data);\n        }\n        if ($this->_isRest()) {\n            foreach ($data as $k => $v) {\n                unset($data[$k]['SharingGroup']);\n                if (empty($data[$k]['Tag']['id'])) {\n                    unset($data[$k]['Tag']);\n                }\n            }\n            return $this->RestResponse->viewData($data, $this->response->type());\n        }\n        $this->set('scope', $scope);\n        $this->set('feeds', $data);\n        $this->loadModel('Event');\n        $this->set('feed_types', $this->Feed->feed_types);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n    }\n\n    public function view($feedId)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $feed = $this->Feed->find('first', array(\n            'conditions' => array('Feed.id' => $feedId),\n            'recursive' => -1,\n            'contain' => array('Tag')\n        ));\n        $feed['Feed']['cached_elements'] = $this->Feed->getCachedElements($feed['Feed']['id']);\n        $feed['Feed']['coverage_by_other_feeds'] = $this->Feed->getFeedCoverage($feed['Feed']['id'], 'feed', 'all') . '%';\n        if ($this->_isRest()) {\n            if (empty($feed['Tag']['id'])) {\n                unset($feed['Tag']);\n            }\n            return $this->RestResponse->viewData($feed, $this->response->type());\n        }\n        $feeds = $this->Feed->getAllCachingEnabledFeeds($feed['Feed']['id'], true);\n        $this->set('other_feeds', $feeds);\n        $this->set('feed', $feed);\n    }\n\n    public function feedCoverage($feedId)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $feed = $this->Feed->find('first', array(\n            'conditions' => array('Feed.id' => $feedId),\n            'recursive' => -1,\n            'contain' => array('Tag')\n        ));\n        $result = $this->Feed->getFeedCoverage($feed['Feed']['id'], 'feed', $this->request->data);\n        return $this->RestResponse->viewData($result, $this->response->type());\n\n    }\n\n    public function importFeeds()\n    {\n        if ($this->request->is('post')) {\n            if (isset($this->request->data['Feed']['json'])) {\n                $this->request->data = $this->request->data['Feed']['json'];\n            }\n            $results = $this->Feed->importFeeds($this->request->data, $this->Auth->user());\n            if ($results['successes'] > 0) {\n                $flashType = 'success';\n                $message = $results['successes'] . ' new feeds added.';\n            } else {\n                $flashType = 'info';\n                $message = 'No new feeds to add.';\n            }\n            if ($results['fails']) {\n                $message .= ' ' . $results['fails'] . ' feeds could not be added (possibly because they already exist)';\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Feed', 'importFeeds', false, $this->response->type(), $message);\n            } else {\n                $this->Flash->{$flashType}($message);\n                $this->redirect(array('controller' => 'Feeds', 'action' => 'index', 'all'));\n            }\n        }\n    }\n\n    public function add()\n    {\n        $this->loadModel('Event');\n        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $distributionLevels = $this->Event->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        $this->set('sharingGroups', $sgs);\n        $this->set('feed_types', $this->Feed->getFeedTypesOptions());\n        $tags = $this->Event->EventTag->Tag->find('list', array('fields' => array('Tag.name'), 'order' => array('lower(Tag.name) asc')));\n        $tags[0] = 'None';\n        $this->set('tags', $tags);\n        if (empty($this->request->data['Feed']['fixed_event'])) {\n            $this->request->data['Feed']['fixed_event'] = 1;\n        }\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                if (empty($this->request->data['Feed'])) {\n                    $this->request->data['Feed'] = $this->request->data;\n                    if (empty($this->request->data['Feed']['source_format'])) {\n                        $this->request->data['Feed']['source_format'] = 'freetext';\n                    }\n                    if (empty($this->request->data['Feed']['fixed_event'])) {\n                        $this->request->data['Feed']['source_format'] = 1;\n                    }\n                }\n            }\n            $error = false;\n            if (isset($this->request->data['Feed']['pull_rules'])) {\n                $this->request->data['Feed']['rules'] = $this->request->data['Feed']['pull_rules'];\n            }\n            if (!isset($this->request->data['Feed']['distribution'])) {\n                $this->request->data['Feed']['distribution'] = 0;\n            }\n            if ($this->request->data['Feed']['distribution'] != 4) {\n                $this->request->data['Feed']['sharing_group_id'] = 0;\n            }\n            $this->request->data['Feed']['default'] = 0;\n            if (!isset($this->request->data['Feed']['source_format'])) {\n                $this->request->data['Feed']['source_format'] = 'freetext';\n            }\n            if ($this->request->data['Feed']['source_format'] == 'freetext') {\n                if ($this->request->data['Feed']['fixed_event'] == 1) {\n                    if (!empty($this->request->data['Feed']['target_event']) && is_numeric($this->request->data['Feed']['target_event'])) {\n                        $this->request->data['Feed']['event_id'] = $this->request->data['Feed']['target_event'];\n                    }\n                }\n            }\n            if (!isset($this->request->data['Feed']['settings'])) {\n                $this->request->data['Feed']['settings'] = array();\n            } else {\n                if (!empty($this->request->data['Feed']['settings']['common']['excluderegex']) && !$this->__checkRegex($this->request->data['Feed']['settings']['common']['excluderegex'])) {\n                    $this->Flash->error('Invalid exclude regex. Make sure it\\'s a delimited PCRE regex pattern.');\n                    return true;\n                }\n            }\n            if (isset($this->request->data['Feed']['settings']['delimiter']) && empty($this->request->data['Feed']['settings']['delimiter'])) {\n                $this->request->data['Feed']['settings']['delimiter'] = ',';\n            }\n            if (empty($this->request->data['Feed']['target_event'])) {\n                $this->request->data['Feed']['target_event'] = 0;\n            }\n            if (empty($this->request->data['Feed']['lookup_visible'])) {\n                $this->request->data['Feed']['lookup_visible'] = 0;\n            }\n            if (empty($this->request->data['Feed']['input_source'])) {\n                $this->request->data['Feed']['input_source'] = 'network';\n            } else {\n                $this->request->data['Feed']['input_source'] = strtolower($this->request->data['Feed']['input_source']);\n            }\n            if (!in_array($this->request->data['Feed']['input_source'], array('network', 'local'))) {\n                $this->request->data['Feed']['input_source'] = 'network';\n            }\n            if (!isset($this->request->data['Feed']['delete_local_file'])) {\n                $this->request->data['Feed']['delete_local_file'] = 0;\n            }\n            $this->request->data['Feed']['settings'] = json_encode($this->request->data['Feed']['settings']);\n            $this->request->data['Feed']['event_id'] = !empty($this->request->data['Feed']['fixed_event']) ? $this->request->data['Feed']['target_event'] : 0;\n            if (!$error) {\n                $result = $this->Feed->save($this->request->data);\n                if ($result) {\n                    $message = __('Feed added.');\n                    if ($this->_isRest()) {\n                        $feed = $this->Feed->find('first', array('conditions' => array('Feed.id' => $this->Feed->id), 'recursive' => -1));\n                        return $this->RestResponse->viewData($feed, $this->response->type());\n                    }\n                    $this->Flash->success($message);\n                    $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n                } else {\n                    $message = __('Feed could not be added. Invalid field: %s', array_keys($this->Feed->validationErrors)[0]);\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Feeds', 'add', false, $message, $this->response->type());\n                    }\n                    $this->Flash->error($message);\n                    $this->request->data['Feed']['settings'] = json_decode($this->request->data['Feed']['settings'], true);\n                }\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Feeds', 'add', false, $this->response->type());\n        }\n    }\n\n    private function __checkRegex($pattern)\n    {\n        if (@preg_match($pattern, null) === false) {\n            return false;\n        }\n        return true;\n    }\n\n    public function edit($feedId)\n    {\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        $this->set('feed', $this->Feed->data);\n        $this->loadModel('Event');\n        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $distributionLevels = $this->Event->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        $this->set('sharingGroups', $sgs);\n        $tags = $this->Event->EventTag->Tag->find('list', array('fields' => array('Tag.name'), 'order' => array('lower(Tag.name) asc')));\n        $tags[0] = 'None';\n        $this->set('feed_types', $this->Feed->getFeedTypesOptions());\n        $this->set('tags', $tags);\n        if (!empty($this->Feed->data['Feed']['settings'])) {\n            $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if ($this->_isRest()) {\n                if (empty($this->request->data['Feed'])) {\n                    $this->request->data['Feed'] = $this->request->data;\n                }\n            }\n            if (isset($this->request->data['Feed']['pull_rules'])) {\n                $this->request->data['Feed']['rules'] = $this->request->data['Feed']['pull_rules'];\n            }\n            if (isset($this->request->data['Feed']['distribution']) && $this->request->data['Feed']['distribution'] != 4) {\n                $this->request->data['Feed']['sharing_group_id'] = 0;\n            }\n            $this->request->data['Feed']['id'] = $feedId;\n            if (!empty($this->request->data['Feed']['source_format']) && ($this->request->data['Feed']['source_format'] == 'freetext' || $this->request->data['Feed']['source_format'] == 'csv')) {\n                if ($this->request->data['Feed']['fixed_event'] == 1) {\n                    if (isset($this->request->data['Feed']['target_event']) && is_numeric($this->request->data['Feed']['target_event'])) {\n                        $this->request->data['Feed']['event_id'] = $this->request->data['Feed']['target_event'];\n                    } else {\n                        $this->request->data['Feed']['event_id'] = 0;\n                    }\n                }\n            }\n            if (!isset($this->request->data['Feed']['settings'])) {\n                $this->request->data['Feed']['settings'] = array();\n            } else {\n                if (!empty($this->request->data['Feed']['settings']['common']['excluderegex']) && !$this->__checkRegex($this->request->data['Feed']['settings']['common']['excluderegex'])) {\n                    $this->Flash->error('Invalid exclude regex. Make sure it\\'s a delimited PCRE regex pattern.');\n                    return true;\n                }\n            }\n            if (isset($this->request->data['Feed']['settings']['delimiter']) && empty($this->request->data['Feed']['settings']['delimiter'])) {\n                $this->request->data['Feed']['settings']['delimiter'] = ',';\n            }\n            $this->request->data['Feed']['settings'] = json_encode($this->request->data['Feed']['settings']);\n            $fields = array('id', 'name', 'provider', 'enabled', 'caching_enabled','rules', 'url', 'distribution', 'sharing_group_id', 'tag_id', 'fixed_event', 'event_id', 'publish', 'delta_merge', 'source_format', 'override_ids', 'settings', 'input_source', 'delete_local_file', 'lookup_visible', 'headers');\n            $feed = array();\n            foreach ($fields as $field) {\n                if (isset($this->request->data['Feed'][$field])) {\n                    $feed[$field] = $this->request->data['Feed'][$field];\n                }\n            }\n            $result = $this->Feed->save($feed);\n            if ($result) {\n                $feedCache = APP . 'tmp' . DS . 'cache' . DS . 'misp_feed_' . intval($feedId) . '.cache';\n                if (file_exists($feedCache)) {\n                    unlink($feedCache);\n                }\n                $message = __('Feed added.');\n                if ($this->_isRest()) {\n                    $feed = $this->Feed->find('first', array('conditions' => array('Feed.id' => $this->Feed->id), 'recursive' => -1));\n                    return $this->RestResponse->viewData($feed, $this->response->type());\n                }\n                $this->Flash->success($message);\n                $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n            } else {\n                $message = __('Feed could not be updated. Invalid fields: %s', implode(', ', array_keys($this->Feed->validationErrors)));\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Feeds', 'add', false, $message, $this->response->type());\n                }\n                $this->Flash->error($message);\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Feeds', 'edit', false, $this->response->type());\n            }\n            if (!isset($this->request->data['Feed'])) {\n                $this->request->data = $this->Feed->data;\n                if ($this->Feed->data['Feed']['event_id']) {\n                    $this->request->data['Feed']['target_event'] = $this->Feed->data['Feed']['event_id'];\n                }\n            }\n            $this->request->data['Feed']['pull_rules'] = $this->request->data['Feed']['rules'];\n        }\n    }\n\n    public function delete($feedId)\n    {\n        if (!$this->request->is('post') && !$this->request->is('delete')) {\n            throw new MethodNotAllowedException(__('Action not allowed, post or delete request expected.'));\n        }\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        if ($this->Feed->delete($feedId)) {\n            $message = 'Feed deleted.';\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Feeds', 'delete', $feedId, false, $message);\n            }\n            $this->Flash->success($message);\n        } else {\n            $message = 'Feed could not be deleted.';\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Feeds', 'delete', false, $message, $this->response->type());\n            }\n            $this->Flash->error($message);\n        }\n        $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n    }\n\n    public function fetchFromFeed($feedId)\n    {\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        if (!empty($this->Feed->data['Feed']['settings'])) {\n            $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);\n        }\n        if (!$this->Feed->data['Feed']['enabled']) {\n            $this->Flash->info(__('Feed is currently not enabled. Make sure you enable it.'));\n            $this->redirect(array('action' => 'index'));\n        }\n        if (Configure::read('MISP.background_jobs')) {\n            $this->loadModel('Job');\n            $this->Job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'fetch_feeds',\n                    'job_input' => 'Feed: ' . $feedId,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Starting fetch from Feed.'),\n            );\n            $this->Job->save($data);\n            $jobId = $this->Job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('fetchFeed', $this->Auth->user('id'), $feedId, $jobId),\n                    true\n            );\n            $this->Job->saveField('process_id', $process_id);\n            $message = __('Pull queued for background execution.');\n        } else {\n            $result = $this->Feed->downloadFromFeedInitiator($feedId, $this->Auth->user());\n            if (!$result) {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->viewData(array('result' => __('Fetching the feed has failed.')), $this->response->type());\n                } else {\n                    $this->Flash->error(__('Fetching the feed has failed.'));\n                    $this->redirect(array('action' => 'index'));\n                }\n            }\n            $message = __('Fetching the feed has successfully completed.');\n            if ($this->Feed->data['Feed']['source_format'] == 'misp') {\n                if (isset($result['add'])) {\n                    $message .= ' Downloaded ' . count($result['add']) . ' new event(s).';\n                }\n                if (isset($result['edit'])) {\n                    $message .= ' Updated ' . count($result['edit']) . ' event(s).';\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData(array('result' => $message), $this->response->type());\n        } else {\n            $this->Flash->success($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    public function fetchFromAllFeeds()\n    {\n        $feeds = $this->Feed->find('all', array(\n            'recursive' => -1,\n            'fields' => array('id')\n        ));\n        foreach ($feeds as $feed) {\n            $feedId = $feed['Feed']['id'];\n            $this->Feed->id = $feedId;\n            $this->Feed->read();\n            if (!empty($this->Feed->data['Feed']['settings'])) {\n                $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);\n            }\n            if (!$this->Feed->data['Feed']['enabled']) {\n                continue;\n            }\n            if (Configure::read('MISP.background_jobs')) {\n                $this->loadModel('Job');\n                $this->Job->create();\n                $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'fetch_feed',\n                    'job_input' => 'Feed: ' . $feedId,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Starting fetch from Feed.'),\n                );\n                $this->Job->save($data);\n                $jobId = $this->Job->id;\n                $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('fetchFeed', $this->Auth->user('id'), $feedId, $jobId),\n                    true\n                );\n                $this->Job->saveField('process_id', $process_id);\n                $message = 'Pull queued for background execution.';\n            } else {\n                $result = $this->Feed->downloadFromFeedInitiator($feedId, $this->Auth->user());\n                if (!$result) {\n                    continue;\n                }\n                $message = __('Fetching the feed has successfully completed.');\n                if ($this->Feed->data['Feed']['source_format'] == 'misp') {\n                    if (isset($result['add'])) {\n                        $message['result'] .= ' Downloaded ' . count($result['add']) . ' new event(s).';\n                    }\n                    if (isset($result['edit'])) {\n                        $message['result'] .= ' Updated ' . count($result['edit']) . ' event(s).';\n                    }\n                }\n            }\n        }\n        if (!isset($message)) {\n            $message = __('No feed enabled.');\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData(array('result' => $message), $this->response->type());\n        } else {\n            $this->Flash->success($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    public function getEvent($feedId, $eventUuid, $all = false)\n    {\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        if (!$this->Feed->data['Feed']['enabled']) {\n            $this->Flash->info(__('Feed is currently not enabled. Make sure you enable it.'));\n            $this->redirect(array('action' => 'previewIndex', $feedId));\n        }\n        try {\n            $result = $this->Feed->downloadAndSaveEventFromFeed($this->Feed->data, $eventUuid, $this->Auth->user());\n        } catch (Exception $e) {\n            $this->Flash->error(__('Download failed.') . ' ' . $e->getMessage());\n            $this->redirect(array('action' => 'previewIndex', $feedId));\n        }\n\n        if (isset($result['action'])) {\n            if ($result['result']) {\n                if ($result['action'] == 'add') {\n                    $this->Flash->success(__('Event added.'));\n                } else {\n                    if ($result['result'] === 'No change') {\n                        $this->Flash->info(__('Event already up to date.'));\n                    } else {\n                        $this->Flash->success(__('Event updated.'));\n                    }\n                }\n            } else {\n                $this->Flash->error(__('Could not %s event.', $result['action']));\n            }\n        } else {\n            $this->Flash->error(__('Download failed.'));\n        }\n        $this->redirect(array('action' => 'previewIndex', $feedId));\n    }\n\n    public function previewIndex($feedId)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        if (!empty($this->Feed->data['Feed']['settings'])) {\n            $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);\n        }\n        $params = array();\n        if ($this->request->is('post')) {\n            $params = $this->request->data['Feed'];\n        }\n        if ($this->Feed->data['Feed']['source_format'] == 'misp') {\n            return $this->__previewIndex($this->Feed->data, $params);\n        } elseif (in_array($this->Feed->data['Feed']['source_format'], array('freetext', 'csv'))) {\n            return $this->__previewFreetext($this->Feed->data);\n        }\n    }\n\n    private function __previewIndex($feed, $filterParams = array())\n    {\n        if (isset($this->passedArgs['pages'])) {\n            $currentPage = $this->passedArgs['pages'];\n        } else {\n            $currentPage = 1;\n        }\n        $urlparams = '';\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        $passedArgs = array();\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        $HttpSocket = $syncTool->setupHttpSocketFeed($feed);\n        try {\n            $events = $this->Feed->getManifest($feed, $HttpSocket);\n        } catch (Exception $e) {\n            $this->Flash->error(\"Could not fetch manifest for feed: {$e->getMessage()}\");\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n\n        if (!empty($this->params['named']['searchall'])) {\n            foreach ($events as $uuid => $event) {\n                $found = false;\n                if (strpos(strtolower($event['info']), strtolower($this->params['named']['searchall'])) !== false) {\n                    $found = true;\n                }\n                if (strpos(strtolower($event['Orgc']['name']), strtolower($this->params['named']['searchall'])) !== false) {\n                    $found = true;\n                }\n                if (!empty($event['Tag'])) {\n                    foreach ($event['Tag'] as $tag) {\n                        if (strpos(strtolower($tag['name']), strtolower($this->params['named']['searchall'])) !== false) {\n                            $found = true;\n                        }\n                    }\n                }\n                if (!$found) {\n                    unset($events[$uuid]);\n                }\n            }\n        }\n        foreach ($filterParams as $k => $filter) {\n            if (!empty($filter)) {\n                $filterParams[$k] = json_decode($filter);\n            }\n        }\n        if (!empty($filterParams['eventid'])) {\n            foreach ($events as $k => $event) {\n                if (!in_array($k, $filterParams['eventid'])) {\n                    unset($events[$k]);\n                    continue;\n                }\n            }\n        }\n        $params = $customPagination->createPaginationRules($events, $this->passedArgs, $this->alias);\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        $events = $customPagination->sortArray($events, $params, true);\n        if (is_array($events)) {\n            $customPagination->truncateByPagination($events, $params);\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($events, $this->response->type());\n        }\n        if (isset($events['code'])) {\n            throw new NotFoundException(__('Feed could not be fetched. The HTTP error code returned was: ', $events['code']));\n        }\n        $pageCount = count($events);\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        if ($this->_isRest()) {\n            if (!isset($this->passedArgs['page'])) {\n                $this->passedArgs['page'] = 0;\n            }\n        }\n        $this->set('events', $events);\n        $this->loadModel('Event');\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n        $shortDist = array(0 => 'Organisation', 1 => 'Community', 2 => 'Connected', 3 => 'All', 4 => ' sharing Group');\n        $this->set('shortDist', $shortDist);\n        $this->set('id', $feed['Feed']['id']);\n        $this->set('feed', $feed);\n        $this->set('urlparams', $urlparams);\n        $this->set('passedArgs', json_encode($passedArgs));\n        $this->set('passedArgsArray', $passedArgs);\n    }\n\n    private function __previewFreetext($feed)\n    {\n        if (isset($this->passedArgs['page'])) {\n            $currentPage = $this->passedArgs['page'];\n        } elseif (isset($this->passedArgs['page'])) {\n            $currentPage = $this->passedArgs['page'];\n        } else {\n            $currentPage = 1;\n        }\n        $urlparams = '';\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        if (!in_array($feed['Feed']['source_format'], array('freetext', 'csv'))) {\n            throw new MethodNotAllowedException(__('Invalid feed type.'));\n        }\n        $HttpSocket = $syncTool->setupHttpSocketFeed($feed);\n        $params = array();\n        // params is passed as reference here, the pagination happens in the method, which isn't ideal but considering the performance gains here it's worth it\n        try {\n            $resultArray = $this->Feed->getFreetextFeed($feed, $HttpSocket, $feed['Feed']['source_format'], $currentPage, 60, $params);\n        } catch (Exception $e) {\n            $this->Flash->error(\"Could not fetch feed: {$e->getMessage()}\");\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        $resultArray = $this->Feed->getFreetextFeedCorrelations($resultArray, $feed['Feed']['id']);\n        // remove all duplicates\n        $correlatingEvents = array();\n        //debug($resultArray);\n        foreach ($resultArray as $k => $v) {\n            if (!empty($resultArray[$k]['correlations'])) {\n                foreach ($resultArray[$k]['correlations'] as $correlatingEvent) {\n                    if (!in_array($correlatingEvent, $correlatingEvents)) {\n                        $correlatingEvents[] = $correlatingEvent;\n                    }\n                }\n            }\n        }\n        $resultArray = array_values($resultArray);\n        $this->loadModel('Attribute');\n        $correlatingEventInfos = $this->Attribute->Event->find('list', array(\n            'fields' => array('Event.id', 'Event.info'),\n            'conditions' => array('Event.id' => $correlatingEvents)\n        ));\n        $this->set('correlatingEventInfos', $correlatingEventInfos);\n        $this->set('distributionLevels', $this->Attribute->distributionLevels);\n        $this->set('feed', $feed);\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($resultArray, $this->response->type());\n        }\n        $this->set('attributes', $resultArray);\n        $this->render('freetext_index');\n    }\n\n    private function __previewCSV($feed)\n    {\n        if (isset($this->passedArgs['pages'])) {\n            $currentPage = $this->passedArgs['pages'];\n        } else {\n            $currentPage = 1;\n        }\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        if ($feed['Feed']['source_format'] != 'csv') {\n            throw new MethodNotAllowedException(__('Invalid feed type.'));\n        }\n        $HttpSocket = $syncTool->setupHttpSocketFeed($feed);\n        try {\n            $resultArray = $this->Feed->getFreetextFeed($feed, $HttpSocket, $feed['Feed']['source_format'], $currentPage);\n        } catch (Exception $e) {\n            $this->Flash->error(\"Could not fetch feed: {$e->getMessage()}\");\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n        // we want false as a valid option for the split fetch, but we don't want it for the preview\n        if ($resultArray == false) {\n            $resultArray = array();\n        }\n        $resultArray = $this->Feed->getFreetextFeedCorrelations($resultArray, $feed['Feed']['id']);\n        $resultArray = $this->Feed->getFreetextFeed2FeedCorrelations($resultArray);\n        // remove all duplicates\n        foreach ($resultArray as $k => $v) {\n            for ($i = 0; $i < $k; $i++) {\n                if (isset($resultArray[$i]) && $v == $resultArray[$i]) {\n                    unset($resultArray[$k]);\n                }\n            }\n        }\n        $resultArray = array_values($resultArray);\n        $this->loadModel('Attribute');\n        $this->set('distributionLevels', $this->Attribute->distributionLevels);\n        $this->set('feed', $feed);\n        $this->set('attributes', $resultArray);\n        $this->render('freetext_index');\n    }\n\n\n    public function previewEvent($feedId, $eventUuid, $all = false)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        try {\n            $event = $this->Feed->downloadEventFromFeed($this->Feed->data, $eventUuid, $this->Auth->user());\n        } catch (Exception $e) {\n            throw new Exception(__('Could not download the selected Event'), 0, $e);\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($event, $this->response->type());\n        }\n        if (is_array($event)) {\n            $this->loadModel('Event');\n            $params = $this->Event->rearrangeEventForView($event, $this->passedArgs, $all);\n            $this->params->params['paging'] = array('Feed' => $params);\n            $this->set('event', $event);\n            $this->set('feed', $this->Feed->data);\n            $this->loadModel('Event');\n            $dataForView = array(\n                    'Attribute' => array('attrDescriptions' => 'fieldDescriptions', 'distributionDescriptions' => 'distributionDescriptions', 'distributionLevels' => 'distributionLevels'),\n                    'Event' => array('eventDescriptions' => 'fieldDescriptions', 'analysisLevels' => 'analysisLevels')\n            );\n            foreach ($dataForView as $m => $variables) {\n                if ($m === 'Event') {\n                    $currentModel = $this->Event;\n                } elseif ($m === 'Attribute') {\n                    $currentModel = $this->Event->Attribute;\n                }\n                foreach ($variables as $alias => $variable) {\n                    $this->set($alias, $currentModel->{$variable});\n                }\n            }\n            $threat_levels = $this->Event->ThreatLevel->find('all');\n            $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        } else {\n            if ($event === 'blocked') {\n                throw new MethodNotAllowedException(__('This event is blocked by the Feed filters.'));\n            } else {\n                throw new NotFoundException(__('Could not download the selected Event'));\n            }\n        }\n    }\n\n    public function enable($id)\n    {\n        $result = $this->__toggleEnable($id, true);\n        $this->set('name', $result['message']);\n        $this->set('message', $result['message']);\n        $this->set('url', $this->here);\n        if ($result) {\n            $this->set('_serialize', array('name', 'message', 'url'));\n        } else {\n            $this->set('errors', $result);\n            $this->set('_serialize', array('name', 'message', 'url', 'errors'));\n        }\n    }\n\n    public function disable($id)\n    {\n        $result = $this->__toggleEnable($id, false);\n        $this->set('name', $result['message']);\n        $this->set('message', $result['message']);\n        $this->set('url', $this->here);\n        if ($result['result']) {\n            $this->set('_serialize', array('name', 'message', 'url'));\n        } else {\n            $this->set('errors', $result);\n            $this->set('_serialize', array('name', 'message', 'url', 'errors'));\n        }\n    }\n\n    private function __toggleEnable($id, $enable = true)\n    {\n        if (!is_numeric($id)) {\n            throw new MethodNotAllowedException(__('Invalid Feed.'));\n        }\n        $this->Feed->id = $id;\n        if (!$this->Feed->exists()) {\n            throw new MethodNotAllowedException(__('Invalid Feed.'));\n        }\n        $feed = $this->Feed->find('first', array(\n                'conditions' => array('Feed.id' => $id),\n                'recursive' => -1\n        ));\n        $feed['Feed']['enabled'] = $enable;\n        $result = array('result' => $this->Feed->save($feed));\n        $fail = false;\n        if (!$result['result']) {\n            $fail = true;\n            $result['result'] = $this->Feed->validationErrors;\n        }\n        $action = $enable ? 'enable' : 'disable';\n        $result['message'] = $fail ? 'Could not ' . $action . ' feed.' : 'Feed ' . $action . 'd.';\n        return $result;\n    }\n\n    public function fetchSelectedFromFreetextIndex($id)\n    {\n        if (!$this->request->is('Post')) {\n            throw new MethodNotAllowedException(__('Only POST requests are allowed.'));\n        }\n        $this->Feed->id = $id;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Feed not found.'));\n        }\n        $feed = $this->Feed->read();\n        if (!empty($feed['Feed']['settings'])) {\n            $feed['Feed']['settings'] = json_decode($feed['Feed']['settings'], true);\n        }\n        $data = json_decode($this->request->data['Feed']['data'], true);\n        try {\n            $this->Feed->saveFreetextFeedData($feed, $data, $this->Auth->user());\n            $this->Flash->success(__('Data pulled.'));\n        } catch (Exception $e) {\n            $this->Flash->error(__('Could not pull the selected data. Reason: %s', $e->getMessage()));\n        }\n        $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n    }\n\n    public function cacheFeeds($scope = 'freetext')\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->loadModel('Job');\n            $this->Job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'cache_feeds',\n                    'job_input' => $scope,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Starting feed caching.'),\n            );\n            $this->Job->save($data);\n            $jobId = $this->Job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('cacheFeed', $this->Auth->user('id'), $scope, $jobId),\n                    true\n            );\n            $this->Job->saveField('process_id', $process_id);\n            $message = 'Feed caching job initiated.';\n        } else {\n            $result = $this->Feed->cacheFeedInitiator($this->Auth->user(), false, $scope);\n            if (!$result) {\n                $this->Flash->error(__('Caching the feeds has failed.'));\n                $this->redirect(array('action' => 'index'));\n            }\n            $message = __('Caching the feeds has successfully completed.');\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Feed', 'cacheFeed', false, $this->response->type(), $message);\n        } else {\n            $this->Flash->info($message);\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n    }\n\n    public function compareFeeds($id = false)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $feeds = $this->Feed->compareFeeds($id);\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($feeds, $this->response->type());\n        } else {\n            $this->set('feeds', $feeds);\n        }\n    }\n\n    public function toggleSelected($enable = false, $cache = false, $feedList = false)\n    {\n        $field = $cache ? 'caching_enabled' : 'enabled';\n        if (!empty($enable)) {\n            $enable = 1;\n        } else {\n            $enable = 0;\n        }\n        try {\n            $feedIds = json_decode($feedList, true);\n        } catch (Exception $e) {\n            $this->Flash->error(__('Invalid feed list received.'));\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n        if ($this->request->is('post')) {\n            $feeds = $this->Feed->find('all', array(\n                'conditions' => array('Feed.id' => $feedIds),\n                'recursive' => -1\n            ));\n            $count = 0;\n            foreach ($feeds as $feed) {\n                if ($feed['Feed'][$field] != $enable) {\n                    $feed['Feed'][$field] = $enable;\n                    $this->Feed->save($feed);\n                    $count++;\n                }\n            }\n            if ($count > 0) {\n                $this->Flash->success($count . ' feeds ' . array('disabled', 'enabled')[$enable] . '.');\n                $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n            } else {\n                $this->Flash->info('All selected feeds are already ' . array('disabled', 'enabled')[$enable] . ', nothing to update.');\n                $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n            }\n        } else {\n            $this->set('feedList', $feedList);\n            $this->set('enable', $enable);\n            $this->render('ajax/feedToggleConfirmation');\n        }\n    }\n\n    public function searchCaches()\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        if (isset($this->passedArgs['pages'])) {\n            $currentPage = $this->passedArgs['pages'];\n        } else {\n            $currentPage = 1;\n        }\n        $urlparams = '';\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        $passedArgs = array();\n        $hits = array();\n        $value = false;\n        if ($this->request->is('post')) {\n            if (isset($this->request->data['Feed'])) {\n                $this->request->data = $this->request->data['Feed'];\n            }\n            if (isset($this->request->data['value'])) {\n                $this->request->data = $this->request->data['value'];\n            }\n            $value = $this->request->data;\n        }\n        if (!empty($this->params['named']['value'])) {\n            $value = $this->params['named']['value'];\n        }\n        $hits = $this->Feed->searchCaches($value);\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($hits, $this->response->type());\n        } else {\n            $this->set('hits', $hits);\n        }\n        $params = $customPagination->createPaginationRules($hits, $this->passedArgs, $this->alias);\n        $this->params->params['paging'] = array('Feed' => $params);\n        $hits = $customPagination->sortArray($hits, $params, true);\n        if (is_array($hits)) {\n            $customPagination->truncateByPagination($hits, $params);\n        }\n        $pageCount = count($hits);\n        $this->set('urlparams', $urlparams);\n        $this->set('passedArgs', json_encode($passedArgs));\n        $this->set('passedArgsArray', $passedArgs);\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\nApp::uses('RandomTool', 'Tools');\n\nclass Feed extends AppModel\n{\n    public $actsAs = array('SysLogLogable.SysLogLogable' => array(\n            'change' => 'full'\n        ),\n        'Trim',\n        'Containable'\n    );\n\n    public $belongsTo = array(\n            'SharingGroup' => array(\n                    'className' => 'SharingGroup',\n                    'foreignKey' => 'sharing_group_id',\n            ),\n            'Tag' => array(\n                    'className' => 'Tag',\n                    'foreignKey' => 'tag_id',\n            )\n    );\n\n    public $validate = array(\n        'url' => array( // TODO add extra validation to refuse multiple time the same url from the same org\n            'rule' => array('urlOrExistingFilepath')\n        ),\n        'provider' => 'valueNotEmpty',\n        'name' => 'valueNotEmpty',\n        'event_id' => array(\n            'rule' => array('numeric'),\n            'message' => 'Please enter a numeric event ID or leave this field blank.',\n        )\n    );\n\n    // currently we only have an internal name and a display name, but later on we can expand this with versions, default settings, etc\n    public $feed_types = array(\n        'misp' => array(\n            'name' => 'MISP Feed'\n        ),\n        'freetext' => array(\n            'name' => 'Freetext Parsed Feed'\n        ),\n        'csv' => array(\n            'name' => 'Simple CSV Parsed Feed'\n        )\n    );\n\n    public function urlOrExistingFilepath($fields)\n    {\n        if ($this->isFeedLocal($this->data)) {\n            if ($this->data['Feed']['source_format'] == 'misp') {\n                if (!is_dir($this->data['Feed']['url'])) {\n                    return 'For MISP type local feeds, please specify the containing directory.';\n                }\n            } else {\n                if (!file_exists($this->data['Feed']['url'])) {\n                    return 'Invalid path or file not found. Make sure that the path points to an existing file that is readable and watch out for typos.';\n                }\n            }\n        } else {\n            if (!filter_var($this->data['Feed']['url'], FILTER_VALIDATE_URL)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function getFeedTypesOptions()\n    {\n        $result = array();\n        foreach ($this->feed_types as $key => $value) {\n            $result[$key] = $value['name'];\n        }\n        return $result;\n    }\n\n    /**\n     * Gets the event UUIDs from the feed by ID\n     * Returns an array with the UUIDs of events that are new or that need updating\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    public function getNewEventUuids($feed, $HttpSocket)\n    {\n        $manifest = $this->downloadManifest($feed, $HttpSocket);\n        $this->Event = ClassRegistry::init('Event');\n        $events = $this->Event->find('all', array(\n            'conditions' => array(\n                'Event.uuid' => array_keys($manifest),\n            ),\n            'recursive' => -1,\n            'fields' => array('Event.id', 'Event.uuid', 'Event.timestamp')\n        ));\n        $result = array('add' => array(), 'edit' => array());\n        foreach ($events as $event) {\n            $eventUuid = $event['Event']['uuid'];\n            if ($event['Event']['timestamp'] < $manifest[$eventUuid]['timestamp']) {\n                $result['edit'][] = array('uuid' => $eventUuid, 'id' => $event['Event']['id']);\n            } else {\n                $this->__cleanupFile($feed, '/' . $eventUuid . '.json');\n            }\n            unset($manifest[$eventUuid]);\n        }\n        // Rest events in manifest does't exists, they will be added\n        $result['add'] = array_keys($manifest);\n        return $result;\n    }\n\n    /**\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    public function getCache($feed, $HttpSocket)\n    {\n        $uri = $feed['Feed']['url'] . '/hashes.csv';\n        $data = $this->feedGetUri($feed, $uri, $HttpSocket);\n\n        if (empty($data)) {\n            throw new Exception(\"File '$uri' with hashes for cache filling is empty.\");\n        }\n\n        $data = trim($data);\n        $data = explode(\"\\n\", $data);\n        $result = array();\n        foreach ($data as $v) {\n            $result[] = explode(',', $v);\n        }\n        return $result;\n    }\n\n    /**\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    private function downloadManifest($feed, $HttpSocket)\n    {\n        $manifestUrl = $feed['Feed']['url'] . '/manifest.json';\n        $data = $this->feedGetUri($feed, $manifestUrl, $HttpSocket);\n\n        $manifest = json_decode($data, true);\n        if ($manifest === null) {\n            throw new Exception('Could not parse manifest JSON: ' . json_last_error_msg(), json_last_error());\n        }\n\n        return $manifest;\n    }\n\n    /**\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    public function getManifest($feed, $HttpSocket)\n    {\n        $events = $this->downloadManifest($feed, $HttpSocket);\n        $events = $this->__filterEventsIndex($events, $feed);\n        return $events;\n    }\n\n    /**\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @param string $type\n     * @param int|string $page\n     * @param int $limit\n     * @param array $params\n     * @return array|bool\n     * @throws Exception\n     */\n    public function getFreetextFeed($feed, $HttpSocket, $type = 'freetext', $page = 1, $limit = 60, &$params = array())\n    {\n        $isLocal = $this->isFeedLocal($feed);\n        $data = false;\n\n        if (!$isLocal) {\n            $feedCache = APP . 'tmp' . DS . 'cache' . DS . 'misp_feed_' . intval($feed['Feed']['id']) . '.cache';\n            if (file_exists($feedCache)) {\n                $file = new File($feedCache);\n                if (time() - $file->lastChange() < 600) {\n                    $data = $file->read();\n                    if ($data === false) {\n                        throw new Exception(\"Could not read feed cache file '$feedCache'.\");\n                    }\n                }\n            }\n        }\n\n        if ($data === false) {\n            $feedUrl = $feed['Feed']['url'];\n            $data = $this->feedGetUri($feed, $feedUrl, $HttpSocket, true);\n\n            if (!$isLocal) {\n                $redis = $this->setupRedis();\n                if ($redis === false) {\n                    throw new Exception('Could not reach Redis.');\n                }\n                $redis->del('misp:feed_cache:' . $feed['Feed']['id']);\n                file_put_contents($feedCache, $data);\n            }\n        }\n\n        App::uses('ComplexTypeTool', 'Tools');\n        $complexTypeTool = new ComplexTypeTool();\n        $this->Warninglist = ClassRegistry::init('Warninglist');\n        $complexTypeTool->setTLDs($this->Warninglist->fetchTLDLists());\n        $settings = array();\n        if (!empty($feed['Feed']['settings']) && !is_array($feed['Feed']['settings'])) {\n            $feed['Feed']['settings'] = json_decode($feed['Feed']['settings'], true);\n        }\n        if (isset($feed['Feed']['settings'][$type])) {\n            $settings = $feed['Feed']['settings'][$type];\n        }\n        if (isset($feed['Feed']['settings']['common'])) {\n            $settings = array_merge($settings, $feed['Feed']['settings']['common']);\n        }\n        $resultArray = $complexTypeTool->checkComplexRouter($data, $type, $settings);\n        $this->Attribute = ClassRegistry::init('Attribute');\n        foreach ($resultArray as $key => $value) {\n            $resultArray[$key]['category'] = $this->Attribute->typeDefinitions[$value['default_type']]['default_category'];\n        }\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        $params = $customPagination->createPaginationRules($resultArray, array('page' => $page, 'limit' => $limit), 'Feed', $sort = false);\n        if (!empty($page) && $page != 'all') {\n            $start = ($page - 1) * $limit;\n            if ($start > count($resultArray)) {\n                return false;\n            }\n            $resultArray = array_slice($resultArray, $start, $limit);\n        }\n        return $resultArray;\n    }\n\n    public function getFreetextFeedCorrelations($data, $feedId)\n    {\n        $values = array();\n        foreach ($data as $key => $value) {\n            $values[] = $value['value'];\n        }\n        $this->Attribute = ClassRegistry::init('Attribute');\n        $redis = $this->setupRedis();\n        if ($redis !== false) {\n            $feeds = $this->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('Feed.id !=' => $feedId),\n                'fields' => array('id', 'name', 'url', 'provider', 'source_format')\n            ));\n            foreach ($feeds as $k => $v) {\n                if (!$redis->exists('misp:feed_cache:' . $v['Feed']['id'])) {\n                    unset($feeds[$k]);\n                }\n            }\n        } else {\n            return array();\n        }\n        // Adding a 3rd parameter to a list find seems to allow grouping several results into a key. If we ran a normal list with value => event_id we'd only get exactly one entry for each value\n        // The cost of this method is orders of magnitude lower than getting all id - event_id - value triplets and then doing a double loop comparison\n        $correlations = $this->Attribute->find('list', array('conditions' => array('Attribute.value1' => $values, 'Attribute.deleted' => 0), 'fields' => array('Attribute.event_id', 'Attribute.event_id', 'Attribute.value1')));\n        $correlations2 = $this->Attribute->find('list', array('conditions' => array('Attribute.value2' => $values, 'Attribute.deleted' => 0), 'fields' => array('Attribute.event_id', 'Attribute.event_id', 'Attribute.value2')));\n        $correlations = array_merge_recursive($correlations, $correlations2);\n        foreach ($data as $key => $value) {\n            if (isset($correlations[$value['value']])) {\n                $data[$key]['correlations'] = array_values($correlations[$value['value']]);\n            }\n            if ($redis) {\n                foreach ($feeds as $k => $v) {\n                    if ($redis->sismember('misp:feed_cache:' . $v['Feed']['id'], md5($value['value']))) {\n                        $data[$key]['feed_correlations'][] = array($v);\n                    } else {\n                    }\n                }\n            }\n        }\n        return $data;\n    }\n\n    public function attachFeedCorrelations($objects, $user, &$event, $overrideLimit = false, $scope = 'Feed')\n    {\n        $redis = $this->setupRedis();\n        if ($redis !== false) {\n            $pipe = $redis->multi(Redis::PIPELINE);\n            $hashTable = array();\n            $cachePrefix = 'misp:' . strtolower($scope) . '_cache:';\n\n            $this->Event = ClassRegistry::init('Event');\n            $compositeTypes = $this->Event->Attribute->getCompositeTypes();\n\n            foreach ($objects as $k => $object) {\n                if (in_array($object['type'], $compositeTypes)) {\n                    $value = explode('|', $object['value']);\n                    $hashTable[$k] = md5($value[0]);\n                } else {\n                    $hashTable[$k] = md5($object['value']);\n                }\n                $redis->sismember($cachePrefix . 'combined', $hashTable[$k]);\n            }\n            $results = $pipe->exec();\n            if (!$overrideLimit && count($objects) > 10000) {\n                foreach ($results as $k => $result) {\n                    if ($result && empty($objects[$k]['disable_correlation'])) {\n                        if (isset($event['FeedCount'])) {\n                            $event['FeedCount']++;\n                        } else {\n                            $event['FeedCount'] = 1;\n                        }\n                        $objects[$k]['FeedHit'] = true;\n                    }\n                }\n            } else {\n                if ($scope === 'Feed') {\n                    $params = array(\n                        'recursive' => -1,\n                        'fields' => array('id', 'name', 'url', 'provider', 'source_format')\n                    );\n                    if (!$user['Role']['perm_site_admin']) {\n                        $params['conditions'] = array('Feed.lookup_visible' => 1);\n                    }\n                    $sources = $this->find('all', $params);\n                } else {\n                    $params = array(\n                        'recursive' => -1,\n                        'fields' => array('id', 'name', 'url', 'caching_enabled')\n                    );\n                    if (!$user['Role']['perm_site_admin']) {\n                        $params['conditions'] = array('Server.caching_enabled' => 1);\n                    }\n                    $this->Server = ClassRegistry::init('Server');\n                    $sources = $this->Server->find('all', $params);\n                }\n\n                $hitIds = array();\n                foreach ($results as $k => $result) {\n                    if ($result && empty($objects[$k]['disable_correlation'])) {\n                        $hitIds[] = $k;\n                    }\n                }\n                foreach ($sources as $source) {\n                    $sourceScopeId = $source[$scope]['id'];\n\n                    $pipe = $redis->multi(Redis::PIPELINE);\n                    foreach ($hitIds as $k) {\n                        $redis->sismember($cachePrefix . $sourceScopeId, $hashTable[$k]);\n                    }\n                    $sourceHits = $pipe->exec();\n                    foreach ($sourceHits as $k4 => $hit) {\n                        if ($hit) {\n                            if (!isset($event[$scope][$sourceScopeId]['id'])) {\n                                if (!isset($event[$scope][$sourceScopeId])) {\n                                    $event[$scope][$sourceScopeId] = array();\n                                }\n                                $event[$scope][$sourceScopeId] = array_merge($event[$scope][$sourceScopeId], $source[$scope]);\n                            }\n                            $objects[$hitIds[$k4]][$scope][] = $source[$scope];\n                        }\n                    }\n                    if ($scope === 'Server' || $source[$scope]['source_format'] == 'misp') {\n                        $pipe = $redis->multi(Redis::PIPELINE);\n                        $eventUuidHitPosition = array();\n                        foreach ($objects as $k => $object) {\n                            if (isset($object[$scope])) {\n                                foreach ($object[$scope] as $currentFeed) {\n                                    if ($source[$scope]['id'] == $currentFeed['id']) {\n                                        $eventUuidHitPosition[] = $k;\n                                        $redis->smembers($cachePrefix . 'event_uuid_lookup:' . $hashTable[$k]);\n                                    }\n                                }\n                            }\n                        }\n                        $mispFeedHits = $pipe->exec();\n                        foreach ($mispFeedHits as $sourcehitPos => $f) {\n                            foreach ($f as $url) {\n                                list($feedId, $eventUuid) = explode('/', $url);\n                                if (empty($event[$scope][$feedId]['event_uuids']) || !in_array($eventUuid, $event[$scope][$feedId]['event_uuids'])) {\n                                    $event[$scope][$feedId]['event_uuids'][] = $eventUuid;\n                                }\n                                foreach ($objects[$eventUuidHitPosition[$sourcehitPos]][$scope] as $tempKey => $tempFeed) {\n                                    if ($tempFeed['id'] == $feedId) {\n                                        $objects[$eventUuidHitPosition[$sourcehitPos]][$scope][$tempKey]['event_uuids'][] = $eventUuid;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (!empty($event[$scope])) {\n            $event[$scope] = array_values($event[$scope]);\n        }\n        return $objects;\n    }\n\n    public function downloadFromFeed($actions, $feed, $HttpSocket, $user, $jobId = false)\n    {\n        $total = count($actions['add']) + count($actions['edit']);\n        $currentItem = 0;\n        $this->Event = ClassRegistry::init('Event');\n        $results = array();\n        $filterRules = $this->__prepareFilterRules($feed);\n\n        foreach ($actions['add'] as $uuid) {\n            try {\n                $result = $this->__addEventFromFeed($HttpSocket, $feed, $uuid, $user, $filterRules);\n                if ($result !== 'blocked') {\n                    $results['add']['success'] = $uuid;\n                }\n\n            } catch (Exception $e) {\n                $this->logException(\"Could not add event '$uuid' from feed {$feed['Feed']['id']}.\", $e);\n                $results['add']['fail'] = array('uuid' => $uuid, 'reason' => $e->getMessage());\n            }\n\n            $this->__cleanupFile($feed, '/' . $uuid . '.json');\n            $this->jobProgress($jobId, null, 100 * (($currentItem + 1) / $total));\n            $currentItem++;\n        }\n\n        foreach ($actions['edit'] as $editTarget) {\n            $uuid = $editTarget['uuid'];\n            try {\n                $result = $this->__updateEventFromFeed($HttpSocket, $feed, $uuid, $editTarget['id'], $user, $filterRules);\n                if ($result !== 'blocked') {\n                    $results['edit']['success'] = $uuid;\n                }\n            } catch (Exception $e) {\n                $this->logException(\"Could not edit event '$uuid' from feed {$feed['Feed']['id']}.\", $e);\n                $results['edit']['fail'] = array('uuid' => $uuid, 'reason' => $e->getMessage());\n            }\n\n            $this->__cleanupFile($feed, '/' . $uuid . '.json');\n            if ($currentItem % 10 == 0) {\n                $this->jobProgress($jobId, null, 100 * (($currentItem + 1) / $total));\n            }\n            $currentItem++;\n        }\n\n        return $results;\n    }\n\n    private function __createFeedRequest($headers = false)\n    {\n        $version = $this->checkMISPVersion();\n        $version = implode('.', $version);\n        $commit = trim(shell_exec('git log --pretty=\"%H\" -n1 HEAD'));\n\n        $result = array(\n            'header' => array(\n                    'Accept' => array('application/json', 'text/plain'),\n                    'Content-Type' => 'application/json',\n                    'MISP-version' => $version,\n                    'MISP-uuid' => Configure::read('MISP.uuid')\n            )\n        );\n        if ($commit) {\n            $result['header']['commit'] = $commit;\n        }\n        if (!empty($headers)) {\n            $lines = explode(\"\\n\", $headers);\n            foreach ($lines as $line) {\n                if (!empty($line)) {\n                    $kv = explode(':', $line);\n                    if (!empty($kv[0]) && !empty($kv[1])) {\n                        if (!in_array($kv[0], array('commit', 'MISP-version', 'MISP-uuid'))) {\n                            $result['header'][trim($kv[0])] = trim($kv[1]);\n                        }\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n\n    private function __checkIfEventBlockedByFilter($event, $filterRules)\n    {\n        $fields = array('tags' => 'Tag', 'orgs' => 'Orgc');\n        $prefixes = array('OR', 'NOT');\n        foreach ($fields as $field => $fieldModel) {\n            foreach ($prefixes as $prefix) {\n                if (!empty($filterRules[$field][$prefix])) {\n                    $found = false;\n                    if (isset($event['Event'][$fieldModel]) && !empty($event['Event'][$fieldModel])) {\n                        if (!isset($event['Event'][$fieldModel][0])) {\n                            $event['Event'][$fieldModel] = array(0 => $event['Event'][$fieldModel]);\n                        }\n                        foreach ($event['Event'][$fieldModel] as $object) {\n                            foreach ($filterRules[$field][$prefix] as $temp) {\n                                if (stripos($object['name'], $temp) !== false) {\n                                    $found = true;\n                                    break 2;\n                                }\n                            }\n                        }\n                    }\n                    if ($prefix === 'OR' && !$found) {\n                        return false;\n                    }\n                    if ($prefix !== 'OR' && $found) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    private function __filterEventsIndex($events, $feed)\n    {\n        $filterRules = $this->__prepareFilterRules($feed);\n        if (!$filterRules) {\n            $filterRules = array();\n        }\n        foreach ($events as $k => $event) {\n            if (isset($filterRules['orgs']['OR']) && !empty($filterRules['orgs']['OR']) && !in_array($event['Orgc']['name'], $filterRules['orgs']['OR'])) {\n                unset($events[$k]);\n                continue;\n            }\n            if (isset($filterRules['orgs']['NO']) && !empty($filterRules['orgs']['NOT']) && in_array($event['Orgc']['name'], $filterRules['orgs']['OR'])) {\n                unset($events[$k]);\n                continue;\n            }\n            if (isset($filterRules['tags']['OR']) && !empty($filterRules['tags']['OR'])) {\n                if (!isset($event['Tag']) || empty($event['Tag'])) {\n                    unset($events[$k]);\n                }\n                $found = false;\n                foreach ($event['Tag'] as $tag) {\n                    foreach ($filterRules['tags']['OR'] as $filterTag) {\n                        if (strpos(strtolower($tag['name']), strtolower($filterTag))) {\n                            $found = true;\n                        }\n                    }\n                }\n                if (!$found) {\n                    unset($k);\n                    continue;\n                }\n            }\n            if (isset($filterRules['tags']['NOT']) && !empty($filterRules['tags']['NOT'])) {\n                if (isset($event['Tag']) && !empty($event['Tag'])) {\n                    $found = false;\n                    foreach ($event['Tag'] as $tag) {\n                        foreach ($filterRules['tags']['NOT'] as $filterTag) {\n                            if (strpos(strtolower($tag['name']), strtolower($filterTag))) {\n                                $found = true;\n                            }\n                        }\n                    }\n                    if ($found) {\n                        unset($k);\n                    }\n                }\n            }\n        }\n        return $events;\n    }\n\n    /**\n     * @param array $feed\n     * @param string $uuid\n     * @param $user Not used\n     * @return array|bool\n     * @throws Exception\n     */\n    public function downloadAndSaveEventFromFeed($feed, $uuid, $user)\n    {\n        $event = $this->downloadEventFromFeed($feed, $uuid, $user);\n        if (!is_array($event) || isset($event['code'])) {\n            return false;\n        }\n        return $this->__saveEvent($event, $user);\n    }\n\n    /**\n     * @param array $feed\n     * @param string $uuid\n     * @param $user Not used\n     * @return bool|string|array\n     * @throws Exception\n     */\n    public function downloadEventFromFeed($feed, $uuid, $user)\n    {\n        $filerRules = $this->__prepareFilterRules($feed);\n        $HttpSocket = $this->isFeedLocal($feed) ? false : $this->__setupHttpSocket($feed);\n        $event = $this->downloadAndParseEventFromFeed($feed, $uuid, $HttpSocket);\n        return $this->__prepareEvent($event, $feed, $filerRules);\n    }\n\n    private function __saveEvent($event, $user)\n    {\n        $this->Event = ClassRegistry::init('Event');\n        $existingEvent = $this->Event->find('first', array(\n                'conditions' => array('Event.uuid' => $event['Event']['uuid']),\n                'recursive' => -1,\n                'fields' => array('Event.uuid', 'Event.id', 'Event.timestamp')\n        ));\n        $result = array();\n        if (!empty($existingEvent)) {\n            $result['action'] = 'edit';\n            if ($existingEvent['Event']['timestamp'] < $event['Event']['timestamp']) {\n                $result['result'] = $this->Event->_edit($event, true, $user);\n            } else {\n                $result['result'] = 'No change';\n            }\n        } else {\n            $result['action'] = 'add';\n            $result['result'] = $this->Event->_add($event, true, $user);\n        }\n        return $result;\n    }\n\n    private function __prepareEvent($event, $feed, $filterRules)\n    {\n        if (isset($event['response'])) {\n            $event = $event['response'];\n        }\n        if (isset($event[0])) {\n            $event = $event[0];\n        }\n        if (!isset($event['Event']['uuid'])) {\n            throw new Exception(\"Event uuid field missing.\");\n        }\n        $event['Event']['distribution'] = $feed['Feed']['distribution'];\n        $event['Event']['sharing_group_id'] = $feed['Feed']['sharing_group_id'];\n        if (!empty($event['Event']['Attribute'])) {\n            foreach ($event['Event']['Attribute'] as $key => $attribute) {\n                $event['Event']['Attribute'][$key]['distribution'] = 5;\n            }\n        }\n        if ($feed['Feed']['tag_id']) {\n            if (!isset($event['Event']['Tag'])) {\n                $event['Event']['Tag'] = array();\n            }\n            $found = false;\n            foreach ($event['Event']['Tag'] as $tag) {\n                if (strtolower($tag['name']) === strtolower($feed['Tag']['name'])) {\n                    $found = true;\n                    break;\n                }\n            }\n            if (!$found) {\n                $feedTag = $this->Tag->find('first', array('conditions' => array('Tag.id' => $feed['Feed']['tag_id']), 'recursive' => -1, 'fields' => array('Tag.name', 'Tag.colour', 'Tag.exportable')));\n                if (!empty($feedTag)) {\n                    $event['Event']['Tag'][] = $feedTag['Tag'];\n                }\n            }\n        }\n        if ($feed['Feed']['sharing_group_id']) {\n            $sg = $this->SharingGroup->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('SharingGroup.id' => $feed['Feed']['sharing_group_id'])\n            ));\n            if (!empty($sg)) {\n                $event['Event']['SharingGroup'] = $sg['SharingGroup'];\n            } else {\n                // We have an SG ID for the feed, but the SG is gone. Make the event private as a fall-back.\n                $event['Event']['distribution'] = 0;\n                $event['Event']['sharing_group_id'] = 0;\n            }\n        }\n        if (!$this->__checkIfEventBlockedByFilter($event, $filterRules)) {\n            return 'blocked';\n        }\n        return $event;\n    }\n\n    /**\n     * @param array $feed\n     * @return bool|mixed\n     * @throws Exception\n     */\n    private function __prepareFilterRules($feed)\n    {\n        $filterRules = false;\n        if (isset($feed['Feed']['rules']) && !empty($feed['Feed']['rules'])) {\n            $filterRules = json_decode($feed['Feed']['rules'], true);\n            if ($filterRules === null) {\n                throw new Exception('Could not parse feed filter rules JSON: ' . json_last_error_msg(), json_last_error());\n            }\n        }\n        return $filterRules;\n    }\n\n    private function __setupHttpSocket($feed)\n    {\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        return ($syncTool->setupHttpSocketFeed($feed));\n    }\n\n    /**\n     * @param HttpSocket $HttpSocket\n     * @param array $feed\n     * @param string $uuid\n     * @param $user\n     * @param array|bool $filterRules\n     * @return array|bool|string\n     * @throws Exception\n     */\n    private function __addEventFromFeed($HttpSocket, $feed, $uuid, $user, $filterRules)\n    {\n        $event = $this->downloadAndParseEventFromFeed($feed, $uuid, $HttpSocket);\n        $event = $this->__prepareEvent($event, $feed, $filterRules);\n        if (is_array($event)) {\n            $this->Event = ClassRegistry::init('Event');\n            return $this->Event->_add($event, true, $user);\n        } else {\n            return $event;\n        }\n    }\n\n    /**\n     * @param HttpSocket $HttpSocket\n     * @param array $feed\n     * @param string $uuid\n     * @param int $eventId\n     * @param $user\n     * @param array|bool $filterRules\n     * @return mixed\n     * @throws Exception\n     */\n    private function __updateEventFromFeed($HttpSocket, $feed, $uuid, $eventId, $user, $filterRules)\n    {\n        $event = $this->downloadAndParseEventFromFeed($feed, $uuid, $HttpSocket);\n        $event = $this->__prepareEvent($event, $feed, $filterRules);\n        $this->Event = ClassRegistry::init('Event');\n        return $this->Event->_edit($event, $user, $uuid, $jobId = null);\n    }\n\n    public function addDefaultFeeds($newFeeds)\n    {\n        foreach ($newFeeds as $newFeed) {\n            $existingFeed = $this->find('list', array('conditions' => array('Feed.url' => $newFeed['url'])));\n            $success = true;\n            if (empty($existingFeed)) {\n                $this->create();\n                $feed = array(\n                        'name' => $newFeed['name'],\n                        'provider' => $newFeed['provider'],\n                        'url' => $newFeed['url'],\n                        'enabled' => $newFeed['enabled'],\n                        'caching_enabled' => !empty($newFeed['caching_enabled']) ? $newFeed['caching_enabled'] : 0,\n                        'distribution' => 3,\n                        'sharing_group_id' => 0,\n                        'tag_id' => 0,\n                        'default' => true,\n                );\n                $result = $this->save($feed) && $success;\n            }\n        }\n        return $success;\n    }\n\n    public function downloadFromFeedInitiator($feedId, $user, $jobId = false)\n    {\n        $this->id = $feedId;\n        $this->read();\n        if (isset($this->data['Feed']['settings']) && !empty($this->data['Feed']['settings'])) {\n            $this->data['Feed']['settings'] = json_decode($this->data['Feed']['settings'], true);\n        }\n\n        $HttpSocket = $this->isFeedLocal($this->data) ? false : $this->__setupHttpSocket($this->data);\n        if ($this->data['Feed']['source_format'] == 'misp') {\n            $this->jobProgress($jobId, 'Fetching event manifest.');\n            try {\n                $actions = $this->getNewEventUuids($this->data, $HttpSocket);\n            } catch (Exception $e) {\n                $this->logException(\"Could not get new event uuids for feed $feedId.\", $e);\n                $this->jobProgress($jobId, 'Could not fetch event manifest. See log for more details.');\n                return false;\n            }\n\n            if (empty($actions['add']) && empty($actions['edit'])) {\n                return true;\n            }\n\n            $total = count($actions['add']) + count($actions['edit']);\n            $this->jobProgress($jobId, \"Fetching $total events.\");\n            $result = $this->downloadFromFeed($actions, $this->data, $HttpSocket, $user, $jobId);\n            $this->__cleanupFile($this->data, '/manifest.json');\n        } else {\n            $this->jobProgress($jobId, 'Fetching data.');\n            try {\n                $temp = $this->getFreetextFeed($this->data, $HttpSocket, $this->data['Feed']['source_format'], 'all');\n            } catch (Exception $e) {\n                $this->logException(\"Could not get freetext feed $feedId\", $e);\n                $this->jobProgress($jobId, 'Could not fetch freetext feed. See log for more details.');\n                return false;\n            }\n\n            $data = array();\n            foreach ($temp as $value) {\n                $data[] = array(\n                    'category' => $value['category'],\n                    'type' => $value['default_type'],\n                    'value' => $value['value'],\n                    'to_ids' => $value['to_ids']\n                );\n            }\n            if (empty($data)) {\n                return true;\n            }\n\n            $this->jobProgress($jobId, 'Saving data.', 50);\n\n            try {\n                $result = $this->saveFreetextFeedData($this->data, $data, $user);\n            } catch (Exception $e) {\n                $this->logException(\"Could not save freetext feed data for feed $feedId.\", $e);\n                return false;\n            }\n\n            $this->__cleanupFile($this->data, '');\n        }\n        return $result;\n    }\n\n    private function __cleanupFile($feed, $file)\n    {\n        if ($this->isFeedLocal($feed)) {\n            if (isset($feed['Feed']['delete_local_file']) && $feed['Feed']['delete_local_file']) {\n                if (file_exists($feed['Feed']['url'] . $file)) {\n                    unlink($feed['Feed']['url'] . $file);\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @param array $feed\n     * @param array $data\n     * @param array $user\n     * @param int|bool $jobId\n     * @return bool\n     * @throws Exception\n     */\n    public function saveFreetextFeedData($feed, $data, $user, $jobId = false)\n    {\n        $this->Event = ClassRegistry::init('Event');\n\n        if ($feed['Feed']['fixed_event'] && $feed['Feed']['event_id']) {\n            $event = $this->Event->find('first', array('conditions' => array('Event.id' => $feed['Feed']['event_id']), 'recursive' => -1));\n            if (empty($event)) {\n                throw new Exception(\"The target event is no longer valid. Make sure that the target event {$feed['Feed']['event_id']} exists.\");\n            }\n        } else {\n            $this->Event->create();\n            $event = array(\n                    'info' => $feed['Feed']['name'] . ' feed',\n                    'analysis' => 2,\n                    'threat_level_id' => 4,\n                    'orgc_id' => $user['org_id'],\n                    'org_id' => $user['org_id'],\n                    'date' => date('Y-m-d'),\n                    'distribution' => $feed['Feed']['distribution'],\n                    'sharing_group_id' => $feed['Feed']['sharing_group_id'],\n                    'user_id' => $user['id']\n            );\n            $result = $this->Event->save($event);\n            if (!$result) {\n                throw new Exception('Something went wrong while creating a new event.');\n            }\n            $event = $this->Event->find('first', array('conditions' => array('Event.id' => $this->Event->id), 'recursive' => -1));\n            if (empty($event)) {\n                throw new Exception(\"The newly created event is no longer valid. Make sure that the target event {$this->Event->id} exists.\");\n            }\n            if ($feed['Feed']['fixed_event']) {\n                $feed['Feed']['event_id'] = $event['Event']['id'];\n                if (!empty($feed['Feed']['settings'])) {\n                    $feed['Feed']['settings'] = json_encode($feed['Feed']['settings']);\n                }\n                $this->save($feed);\n            }\n        }\n        if ($feed['Feed']['fixed_event']) {\n            $temp = $this->Event->Attribute->find('all', array(\n                'conditions' => array(\n                    'Attribute.deleted' => 0,\n                    'Attribute.event_id' => $event['Event']['id']\n                ),\n                'recursive' => -1,\n                'fields' => array('id', 'value1', 'value2')\n            ));\n            $event['Attribute'] = array();\n            foreach ($temp as $t) {\n                if (!empty($t['Attribute']['value2'])) {\n                    $value = $t['Attribute']['value1'] . '|' . $t['Attribute']['value2'];\n                } else {\n                    $value = $t['Attribute']['value1'];\n                }\n                $event['Attribute'][$t['Attribute']['id']] = $value;\n            }\n            unset($temp);\n            foreach ($data as $k => $dataPoint) {\n                $finder = array_search($dataPoint['value'], $event['Attribute']);\n                if ($finder !== false) {\n                    unset($data[$k]);\n                    unset($event['Attribute'][$finder]);\n                }\n            }\n            if ($feed['Feed']['delta_merge']) {\n                $to_delete = array_keys($event['Attribute']);\n                if (!empty($to_delete)) {\n                    $this->Event->Attribute->deleteAll(array('Attribute.id' => $to_delete, 'Attribute.deleted' => 0));\n                }\n            }\n        }\n        if (empty($data)) {\n            return true;\n        }\n\n        $data = array_values($data);\n        $uniqueValues = array();\n        foreach ($data as $key => $value) {\n            if (isset($uniqueValues[$value['value']])) {\n                unset($data[$key]);\n                continue;\n            }\n            $data[$key]['event_id'] = $event['Event']['id'];\n            $data[$key]['distribution'] = $feed['Feed']['distribution'];\n            $data[$key]['sharing_group_id'] = $feed['Feed']['sharing_group_id'];\n            $data[$key]['to_ids'] = $feed['Feed']['override_ids'] ? 0 : $value['to_ids'];\n            $uniqueValues[$value['value']] = true;\n        }\n        $data = array_values($data);\n        foreach ($data as $k => $chunk) {\n            $this->Event->Attribute->create();\n            $this->Event->Attribute->save($chunk);\n            if ($k % 100 == 0) {\n                $this->jobProgress($jobId, null, 50 + round((50 * ((($k + 1) * 100) / count($data)))));\n            }\n        }\n        if (!empty($data)) {\n            unset($event['Event']['timestamp']);\n            unset($event['Event']['attribute_count']);\n            $this->Event->save($event);\n        }\n        if ($feed['Feed']['publish']) {\n            $this->Event->publishRouter($event['Event']['id'], null, $user);\n        }\n        if ($feed['Feed']['tag_id']) {\n            $this->Event->EventTag->attachTagToEvent($event['Event']['id'], $feed['Feed']['tag_id']);\n        }\n        return true;\n    }\n\n    /**\n     * @param $user Not used\n     * @param int|bool $jobId\n     * @param string $scope\n     * @return bool Returns true if at least one feed was cached successfully.\n     * @throws Exception\n     */\n    public function cacheFeedInitiator($user, $jobId = false, $scope = 'freetext')\n    {\n        $params = array(\n            'conditions' => array('caching_enabled' => 1),\n            'recursive' => -1,\n            'fields' => array('source_format', 'input_source', 'url', 'id', 'settings', 'headers')\n        );\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            throw new Exception('Could not reach Redis.');\n        }\n        if ($scope !== 'all') {\n            if (is_numeric($scope)) {\n                $params['conditions']['id'] = $scope;\n            } elseif ($scope == 'freetext' || $scope == 'csv') {\n                $params['conditions']['source_format'] = array('csv', 'freetext');\n            } elseif ($scope == 'misp') {\n                $redis->del('misp:feed_cache:event_uuid_lookup:');\n                $params['conditions']['source_format'] = 'misp';\n            } else {\n                throw new InvalidArgumentException(\"Invalid value for scope, it must be integer or 'freetext', 'csv', 'misp' or 'all' string.\");\n            }\n        } else {\n            $redis->del('misp:feed_cache:combined');\n            $redis->del('misp:feed_cache:event_uuid_lookup:');\n        }\n        $feeds = $this->find('all', $params);\n        $atLeastOneSuccess = false;\n        foreach ($feeds as $k => $feed) {\n            if ($this->__cacheFeed($feed, $redis, $jobId)) {\n                $message = 'Feed ' . $feed['Feed']['id'] . ' cached.';\n                $atLeastOneSuccess = true;\n            } else {\n                $message = 'Failed to cache feed ' . $feed['Feed']['id'] . '. See logs for more details.';\n            }\n\n            $this->jobProgress($jobId, $message, 100 * $k / count($feeds));\n        }\n        return $atLeastOneSuccess;\n    }\n\n    public function attachFeedCacheTimestamps($data)\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return $data;\n        }\n        foreach ($data as $k => $v) {\n            $data[$k]['Feed']['cache_timestamp'] = $redis->get('misp:feed_cache_timestamp:' . $data[$k]['Feed']['id']);\n        }\n        return $data;\n    }\n\n    private function __cacheFeed($feed, $redis, $jobId = false)\n    {\n        $HttpSocket = $this->isFeedLocal($feed) ? false : $this->__setupHttpSocket($feed);\n        if ($feed['Feed']['source_format'] == 'misp') {\n            return $this->__cacheMISPFeed($feed, $redis, $HttpSocket, $jobId);\n        } else {\n            return $this->__cacheFreetextFeed($feed, $redis, $HttpSocket, $jobId);\n        }\n    }\n\n    private function __cacheFreetextFeed($feed, $redis, $HttpSocket, $jobId = false)\n    {\n        $feedId = $feed['Feed']['id'];\n\n        try {\n            $values = $this->getFreetextFeed($feed, $HttpSocket, $feed['Feed']['source_format'], 'all');\n        } catch (Exception $e) {\n            $this->logException(\"Could not get freetext feed $feedId\", $e);\n            $this->jobProgress($jobId, 'Could not fetch freetext feed. See log for more details.');\n            return false;\n        }\n\n        foreach ($values as $k => $value) {\n            $md5Value = md5($value['value']);\n            $redis->sAdd('misp:feed_cache:' . $feedId, $md5Value);\n            $redis->sAdd('misp:feed_cache:combined', $md5Value);\n            if ($k % 1000 == 0) {\n                $this->jobProgress($jobId, \"Feed $feedId: $k/\" . count($values) . \" values cached.\");\n            }\n        }\n        $redis->set('misp:feed_cache_timestamp:' . $feedId, time());\n        return true;\n    }\n\n    private function __cacheMISPFeedTraditional($feed, $redis, $HttpSocket, $jobId = false)\n    {\n        $feedId = $feed['Feed']['id'];\n        $this->Attribute = ClassRegistry::init('Attribute');\n        try {\n            $manifest = $this->getManifest($feed, $HttpSocket);\n        } catch (Exception $e) {\n            $this->logException(\"Could not get manifest for feed $feedId.\", $e);\n            return false;\n        }\n\n        $redis->del('misp:feed_cache:' . $feedId);\n\n        $k = 0;\n        foreach ($manifest as $uuid => $event) {\n            try {\n                $event = $this->downloadAndParseEventFromFeed($feed, $uuid, $HttpSocket);\n            } catch (Exception $e) {\n                $this->logException(\"Could not get and parse event '$uuid' for feed $feedId.\", $e);\n                return false;\n            }\n\n            if (!empty($event['Event']['Attribute'])) {\n                $pipe = $redis->multi(Redis::PIPELINE);\n                foreach ($event['Event']['Attribute'] as $attribute) {\n                    if (!in_array($attribute['type'], $this->Attribute->nonCorrelatingTypes)) {\n                        if (in_array($attribute['type'], $this->Attribute->getCompositeTypes())) {\n                            $value = explode('|', $attribute['value']);\n                            $redis->sAdd('misp:feed_cache:' . $feedId, md5($value[0]));\n                            $redis->sAdd('misp:feed_cache:' . $feedId, md5($value[1]));\n                            $redis->sAdd('misp:feed_cache:combined', md5($value[0]));\n                            $redis->sAdd('misp:feed_cache:combined', md5($value[1]));\n                            $redis->sAdd('misp:feed_cache:event_uuid_lookup:' . md5($value[0]), $feedId . '/' . $event['Event']['uuid']);\n                            $redis->sAdd('misp:feed_cache:event_uuid_lookup:' . md5($value[1]), $feedId . '/' . $event['Event']['uuid']);\n                        } else {\n                            $redis->sAdd('misp:feed_cache:' . $feedId, md5($attribute['value']));\n                            $redis->sAdd('misp:feed_cache:combined', md5($attribute['value']));\n                            $redis->sAdd('misp:feed_cache:event_uuid_lookup:' . md5($attribute['value']), $feedId . '/' . $event['Event']['uuid']);\n                        }\n                    }\n                }\n                $pipe->exec();\n            }\n\n            $k++;\n            if ($k % 10 == 0) {\n                $this->jobProgress($jobId, \"Feed $feedId: $k/\" . count($manifest) . \" events cached.\");\n            }\n        }\n        return true;\n    }\n\n    private function __cacheMISPFeedCache($feed, $redis, $HttpSocket, $jobId = false)\n    {\n        $feedId = $feed['Feed']['id'];\n\n        try {\n            $cache = $this->getCache($feed, $HttpSocket);\n        } catch (Exception $e) {\n            $this->logException(\"Could not get cache file for $feedId.\", $e, LOG_NOTICE);\n            return false;\n        }\n\n        $pipe = $redis->multi(Redis::PIPELINE);\n        foreach ($cache as $v) {\n            $redis->sAdd('misp:feed_cache:' . $feedId, $v[0]);\n            $redis->sAdd('misp:feed_cache:combined', $v[0]);\n            $redis->sAdd('misp:feed_cache:event_uuid_lookup:' . $v[0], $feedId . '/' . $v[1]);\n        }\n        $pipe->exec();\n        $this->jobProgress($jobId, \"Feed $feedId: cached via quick cache.\");\n        return true;\n    }\n\n    private function __cacheMISPFeed($feed, $redis, $HttpSocket, $jobId = false)\n    {\n        $result = true;\n        if (!$this->__cacheMISPFeedCache($feed, $redis, $HttpSocket, $jobId)) {\n            $result = $this->__cacheMISPFeedTraditional($feed, $redis, $HttpSocket, $jobId);\n        };\n        if ($result) {\n            $redis->set('misp:feed_cache_timestamp:' . $feed['Feed']['id'], time());\n        }\n        return $result;\n    }\n\n    public function compareFeeds($id = false)\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return array();\n        }\n        $fields = array('id', 'input_source', 'source_format', 'url', 'provider', 'name', 'default');\n        $feeds = $this->find('all', array(\n            'recursive' => -1,\n            'fields' => $fields,\n            'conditions' => array('Feed.caching_enabled' => 1)\n        ));\n        // we'll use this later for the intersect\n        $fields[] = 'values';\n        $fields = array_flip($fields);\n        // Get all of the feed cache cardinalities for all feeds - if a feed is not cached remove it from the list\n        foreach ($feeds as $k => $feed) {\n            if (!$redis->exists('misp:feed_cache:' . $feed['Feed']['id'])) {\n                unset($feeds[$k]);\n                continue;\n            }\n            $feeds[$k]['Feed']['values'] = $redis->sCard('misp:feed_cache:' . $feed['Feed']['id']);\n        }\n        $feeds = array_values($feeds);\n        $this->Server = ClassRegistry::init('Server');\n        $servers = $this->Server->find('all', array(\n            'recursive' => -1,\n            'fields' => array('id', 'url', 'name'),\n            'contain' => array('RemoteOrg' => array('fields' => array('RemoteOrg.id', 'RemoteOrg.name'))),\n            'conditions' => array('Server.caching_enabled')\n        ));\n        foreach ($servers as $k => $server) {\n            if (!$redis->exists('misp:server_cache:' . $server['Server']['id'])) {\n                unset($servers[$k]);\n                continue;\n            }\n            $servers[$k]['Server']['input_source'] = 'network';\n            $servers[$k]['Server']['source_format'] = 'misp';\n            $servers[$k]['Server']['provider'] = $servers[$k]['RemoteOrg']['name'];\n            $servers[$k]['Server']['default'] = false;\n            $servers[$k]['Server']['is_misp_server'] = true;\n            $servers[$k]['Server']['values'] = $redis->sCard('misp:server_cache:' . $server['Server']['id']);\n        }\n        foreach ($feeds as $k => $feed) {\n            foreach ($feeds as $k2 => $feed2) {\n                if ($k == $k2) {\n                    continue;\n                }\n                $intersect = $redis->sInter('misp:feed_cache:' . $feed['Feed']['id'], 'misp:feed_cache:' . $feed2['Feed']['id']);\n                $feeds[$k]['Feed']['ComparedFeed'][] = array_merge(array_intersect_key($feed2['Feed'], $fields), array(\n                    'overlap_count' => count($intersect),\n                    'overlap_percentage' => round(100 * count($intersect) / $feeds[$k]['Feed']['values']),\n                ));\n            }\n            foreach ($servers as $k2 => $server) {\n                $intersect = $redis->sInter('misp:feed_cache:' . $feed['Feed']['id'], 'misp:server_cache:' . $server['Server']['id']);\n                $feeds[$k]['Feed']['ComparedFeed'][] = array_merge(array_intersect_key($server['Server'], $fields), array(\n                    'overlap_count' => count($intersect),\n                    'overlap_percentage' => round(100 * count($intersect) / $feeds[$k]['Feed']['values']),\n                ));\n            }\n        }\n        foreach ($servers as $k => $server) {\n            foreach ($feeds as $k2 => $feed2) {\n                $intersect = $redis->sInter('misp:server_cache:' . $server['Server']['id'], 'misp:feed_cache:' . $feed2['Feed']['id']);\n                $servers[$k]['Server']['ComparedFeed'][] = array_merge(array_intersect_key($feed2['Feed'], $fields), array(\n                    'overlap_count' => count($intersect),\n                    'overlap_percentage' => round(100 * count($intersect) / $servers[$k]['Server']['values']),\n                ));\n            }\n            foreach ($servers as $k2 => $server2) {\n                if ($k == $k2) {\n                    continue;\n                }\n                $intersect = $redis->sInter('misp:server_cache:' . $server['Server']['id'], 'misp:server_cache:' . $server2['Server']['id']);\n                $servers[$k]['Server']['ComparedFeed'][] = array_merge(array_intersect_key($server2['Server'], $fields), array(\n                    'overlap_count' => count($intersect),\n                    'overlap_percentage' => round(100 * count($intersect) / $servers[$k]['Server']['values']),\n                ));\n            }\n        }\n        foreach ($servers as $k => $server) {\n            $server['Feed'] = $server['Server'];\n            unset($server['Server']);\n            $feeds[] = $server;\n        }\n        return $feeds;\n    }\n\n    public function importFeeds($feeds, $user, $default = false)\n    {\n        if (is_string($feeds)) {\n            $feeds = json_decode($feeds, true);\n        }\n        if ($feeds && !isset($feeds[0])) {\n            $feeds = array($feeds);\n        }\n        $results = array('successes' => 0, 'fails' => 0);\n        if (empty($feeds)) {\n            return $results;\n        }\n        $existingFeeds = $this->find('all', array());\n        foreach ($feeds as $feed) {\n            if ($default) {\n                $feed['Feed']['default'] = 1;\n            } else {\n                $feed['Feed']['default'] = 0;\n            }\n            if (isset($feed['Feed']['id'])) {\n                unset($feed['Feed']['id']);\n            }\n            $found = false;\n            foreach ($existingFeeds as $existingFeed) {\n                if ($existingFeed['Feed']['url'] == $feed['Feed']['url']) {\n                    $found = true;\n                }\n            }\n            if (!$found) {\n                $feed['Feed']['tag_id'] = 0;\n                if (isset($feed['Tag'])) {\n                    $tag_id = $this->Tag->captureTag($feed['Tag'], $user);\n                    if ($tag_id) {\n                        $feed['Feed']['tag_id'] = $tag_id;\n                    }\n                }\n                $this->create();\n                if (!$this->save($feed, true, array('name', 'provider', 'url', 'rules', 'source_format', 'fixed_event', 'delta_merge', 'override_ids', 'publish', 'settings', 'tag_id', 'default', 'lookup_visible'))) {\n                    $results['fails']++;\n                } else {\n                    $results['successes']++;\n                }\n            }\n        }\n        return $results;\n    }\n\n    public function load_default_feeds()\n    {\n        $user = array('Role' => array('perm_tag_editor' => 1, 'perm_site_admin' => 1));\n        $json = file_get_contents(APP . 'files/feed-metadata/defaults.json');\n        $this->importFeeds($json, $user, true);\n        return true;\n    }\n\n    public function setEnableFeedCachingDefaults()\n    {\n        $feeds = $this->find('all', array(\n            'conditions' => array(\n                'Feed.enabled' => 1\n            ),\n            'recursive' => -1\n        ));\n        if (empty($feeds)) {\n            return true;\n        }\n        foreach ($feeds as $feed) {\n            $feed['Feed']['caching_enabled'] = 1;\n            $this->save($feed);\n        }\n        return true;\n    }\n\n    public function getFeedCoverage($id, $source_scope = 'feed', $dataset = 'all')\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return 'Could not reach Redis.';\n        }\n        $this->Server = ClassRegistry::init('Server');\n        $feed_conditions = array('Feed.caching_enabled' => 1);\n        $server_conditions = array('Server.caching_enabled' => 1);\n        if ($source_scope === 'feed') {\n            $feed_conditions['NOT'] = array('Feed.id' => $id);\n        } else {\n            $server_conditions['NOT'] = array('Server.id' => $id);\n        }\n        if ($dataset !== 'all') {\n            if (empty($dataset['Feed'])) {\n                $feed_conditions['OR'] = array('Feed.id' => -1);\n            } else {\n                $feed_conditions['OR'] = array('Feed.id' => $dataset['Feed']);\n            }\n            if (empty($dataset['Server'])) {\n                $server_conditions['OR'] = array('Server.id' => -1);\n            } else {\n                $server_conditions['OR'] = array('Server.id' => $dataset['Server']);\n            }\n        }\n        $other_feeds = $this->find('list', array(\n            'recursive' => -1,\n            'conditions' => $feed_conditions,\n            'fields' => array('Feed.id', 'Feed.id')\n        ));\n        $other_servers = $this->Server->find('list', array(\n            'recursive' => -1,\n            'conditions' => $server_conditions,\n            'fields' => array('Server.id', 'Server.id')\n        ));\n        $feed_element_count = $redis->scard('misp:feed_cache:' . $id);\n        $temp_store = (new RandomTool())->random_str(false, 12);\n        $params = array('misp:feed_temp:' . $temp_store);\n        foreach ($other_feeds as $other_feed) {\n            $params[] = 'misp:feed_cache:' . $other_feed;\n        }\n        foreach ($other_servers as $other_server) {\n            $params[] = 'misp:server_cache:' . $other_server;\n        }\n        if (count($params) != 1 && $feed_element_count > 0) {\n            call_user_func_array(array($redis, 'sunionstore'), $params);\n            call_user_func_array(array($redis, 'sinterstore'), array('misp:feed_temp:' . $temp_store . '_intersect', 'misp:feed_cache:' . $id, 'misp:feed_temp:' . $temp_store));\n            $cardinality_intersect = $redis->scard('misp:feed_temp:' . $temp_store . '_intersect');\n            $coverage = round(100 * $cardinality_intersect / $feed_element_count, 2);\n            $redis->del('misp:feed_temp:' . $temp_store);\n            $redis->del('misp:feed_temp:' . $temp_store . '_intersect');\n        } else {\n            $coverage = 0;\n        }\n        return $coverage;\n    }\n\n    public function getCachedElements($feedId)\n    {\n        $redis = $this->setupRedis();\n        $cardinality = $redis->sCard('misp:feed_cache:' . $feedId);\n        return $cardinality;\n    }\n\n    public function getAllCachingEnabledFeeds($feedId, $intersectingOnly = false) {\n        if ($intersectingOnly) {\n            $redis = $this->setupRedis();\n        }\n        $result['Feed'] = $this->find('all', array(\n            'conditions' => array(\n                'Feed.id !=' => $feedId,\n                'caching_enabled' => 1\n            ),\n            'recursive' => -1,\n            'fields' => array('Feed.id', 'Feed.name', 'Feed.url')\n        ));\n        $this->Server = ClassRegistry::init('Server');\n        $result['Server'] = $this->Server->find('all', array(\n            'conditions' => array(\n                'caching_enabled' => 1\n            ),\n            'recursive' => -1,\n            'fields' => array('Server.id', 'Server.name', 'Server.url')\n        ));\n        $scopes = array('Feed', 'Server');\n        foreach ($scopes as $scope) {\n            foreach ($result[$scope] as $k => $v) {\n                $result[$scope][$k] = $v[$scope];\n            }\n        }\n        if ($intersectingOnly) {\n            foreach ($scopes as $scope) {\n                if (!empty($result[$scope])) {\n                    foreach ($result[$scope] as $k => $feed) {\n                        $intersect = $redis->sInter('misp:feed_cache:' . $feedId, 'misp:' . lcfirst($scope) . '_cache:' . $feed['id']);\n                        if (empty($intersect)) {\n                            unset($result[$scope][$k]);\n                        } else {\n                            $result[$scope][$k]['matching_values'] = count($intersect);\n                        }\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n\n    public function searchCaches($value)\n    {\n        $value = strtolower(trim($value));\n        $hits = array();\n        $this->Server = ClassRegistry::init('Server');\n        $result['Server'] = $this->Server->find('all', array(\n            'conditions' => array(\n                'caching_enabled' => 1\n            ),\n            'recursive' => -1,\n            'fields' => array('Server.id', 'Server.name', 'Server.url')\n        ));\n        $redis = $this->setupRedis();\n        if (empty($value) || $redis->sismember('misp:feed_cache:combined', md5($value))) {\n            $feeds = $this->find('all', array(\n                'conditions' => array(\n                    'caching_enabled' => 1\n                ),\n                'recursive' => -1,\n                'fields' => array('Feed.id', 'Feed.name', 'Feed.url', 'Feed.source_format')\n            ));\n            foreach ($feeds as $feed) {\n                if (empty($value) || $redis->sismember('misp:feed_cache:' . $feed['Feed']['id'], md5($value))) {\n                    if ($feed['Feed']['source_format'] === 'misp') {\n                        $uuid = $redis->smembers('misp:feed_cache:event_uuid_lookup:' . md5($value));\n                        foreach ($uuid as $k => $url) {\n                            $uuid[$k] = explode('/', $url)[1];\n                        }\n                        $feed['Feed']['uuid'] = $uuid;\n                        if (!empty($feed['Feed']['uuid'])) {\n                            foreach ($feed['Feed']['uuid'] as $uuid) {\n                                $feed['Feed']['direct_urls'][] = array(\n                                    'url' => sprintf(\n                                        '%s/feeds/previewEvent/%s/%s',\n                                        Configure::read('MISP.baseurl'),\n                                        h($feed['Feed']['id']),\n                                        h($uuid)\n                                    ),\n                                    'name' => __('Event %s', $uuid)\n                                );\n                            }\n                        }\n                        $feed['Feed']['type'] = 'MISP Feed';\n                    } else {\n                        $feed['Feed']['type'] = 'Feed';\n                        if (!empty($value)) {\n                            $feed['Feed']['direct_urls'][] = array(\n                                'url' => sprintf(\n                                    '%s/feeds/previewIndex/%s',\n                                    Configure::read('MISP.baseurl'),\n                                    h($feed['Feed']['id'])\n                                ),\n                                'name' => __('Feed %s', $feed['Feed']['id'])\n                            );\n                        }\n                    }\n                    $hits[] = $feed;\n                }\n            }\n        }\n        if (empty($value) || $redis->sismember('misp:server_cache:combined', md5($value))) {\n            $this->Server = ClassRegistry::init('Server');\n            $servers = $this->Server->find('all', array(\n                'conditions' => array(\n                    'caching_enabled' => 1\n                ),\n                'recursive' => -1,\n                'fields' => array('Server.id', 'Server.name', 'Server.url')\n            ));\n            foreach ($servers as $server) {\n                if (empty($value) || $redis->sismember('misp:server_cache:' . $server['Server']['id'], md5($value))) {\n                    $uuid = $redis->smembers('misp:server_cache:event_uuid_lookup:' . md5($value));\n                    if (!empty($uuid)) {\n                        foreach ($uuid as $k => $url) {\n                            $uuid[$k] = explode('/', $url)[1];\n                            $server['Server']['direct_urls'][] = array(\n                                'url' => sprintf(\n                                    '%s/servers/previewEvent/%s/%s',\n                                    Configure::read('MISP.baseurl'),\n                                    h($server['Server']['id']),\n                                    h($uuid[$k])\n                                ),\n                                'name' => __('Event %s', h($uuid[$k]))\n                            );\n                        }\n                    }\n                    $server['Server']['uuid'] = $uuid;\n                    $server['Server']['type'] = 'MISP Server';\n                    $hits[] = array('Feed' => $server['Server']);\n                }\n            }\n        }\n        return $hits;\n    }\n\n    /**\n     * Download and parse event from feed.\n     * @param array $feed\n     * @param string $eventUuid\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    private function downloadAndParseEventFromFeed($feed, $eventUuid, $HttpSocket)\n    {\n        if (!Validation::uuid($eventUuid)) {\n            throw new InvalidArgumentException(\"Given event UUID '$eventUuid' is invalid.\");\n        }\n\n        $path = $feed['Feed']['url'] . '/' . $eventUuid . '.json';\n        $data = $this->feedGetUri($feed, $path, $HttpSocket);\n        $event = json_decode($data, true);\n        if ($event === null) {\n            throw new Exception('Could not parse event JSON: ' . json_last_error_msg(), json_last_error());\n        }\n\n        return $event;\n    }\n\n    /**\n     * @param array $feed\n     * @param string $uri\n     * @param HttpSocket $HttpSocket\n     * @param bool $followRedirect\n     * @return string\n     * @throws Exception\n     */\n    private function feedGetUri($feed, $uri, $HttpSocket, $followRedirect = false)\n    {\n        if ($this->isFeedLocal($feed)) {\n            if (file_exists($uri)) {\n                $data = file_get_contents($uri);\n                if ($data === false) {\n                    throw new Exception(\"Could not read local file '$uri'.\");\n                }\n            } else {\n                throw new Exception(\"Local file '$uri' doesn't exists.\");\n            }\n        } else {\n            $request = $this->__createFeedRequest($feed['Feed']['headers']);\n\n            if ($followRedirect) {\n                $response = $this->getFollowRedirect($HttpSocket, $uri, $request);\n            } else {\n                $response = $HttpSocket->get($uri, array(), $request);\n            }\n\n            if ($response === false) {\n                throw new Exception(\"Could not reach '$uri'.\");\n            } else if ($response->code != 200) { // intentionally !=\n                throw new Exception(\"Fetching the '$uri' failed with HTTP error {$response->code}: {$response->reasonPhrase}\");\n            }\n            $data = $response->body;\n        }\n\n        return $data;\n    }\n\n    /**\n     * It should be possible to use 'redirect' $request attribute, but because HttpSocket contains bug that require\n     * certificate for first domain even when redirect to another domain, we need to use own solution.\n     *\n     * @param HttpSocket $HttpSocket\n     * @param string $url\n     * @param array $request\n     * @param int $iterations\n     * @return false|HttpSocketResponse\n     * @throws Exception\n     */\n    private function getFollowRedirect(HttpSocket $HttpSocket, $url, $request, $iterations = 5)\n    {\n        for ($i = 0; $i < $iterations; $i++) {\n            $response = $HttpSocket->get($url, array(), $request);\n            if ($response->isRedirect()) {\n                $HttpSocket = $this->__setupHttpSocket(null); // Replace $HttpSocket with fresh instance\n                $url = trim($response->getHeader('Location'), '=');\n            } else {\n                return $response;\n            }\n        }\n\n        throw new Exception(\"Maximum number of iteration reached.\");\n    }\n\n    /**\n     * @param array $feed\n     * @return bool\n     */\n    private function isFeedLocal($feed)\n    {\n        return isset($feed['Feed']['input_source']) && $feed['Feed']['input_source'] === 'local';\n    }\n\n    /**\n     * @param int|null $jobId\n     * @param string|null $message\n     * @param int|null $progress\n     */\n    private function jobProgress($jobId = null, $message = null, $progress = null)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n\n            $jobData = array($job->primaryKey => $jobId);\n            if ($message) {\n                $jobData['message'] = $message;\n            }\n            if ($progress) {\n                $jobData['progress'] = $progress;\n            }\n            try {\n                $job->save($jobData);\n            } catch (Exception $e) {\n                // ignore error during saving information about job\n            }\n        }\n    }\n\n    /**\n     * remove all events tied to a feed. Returns int on success, error message\n     * as string on failure\n     */\n    public function cleanupFeedEvents($user_id, $id)\n    {\n        $feed = $this->find('first', array(\n            'conditions' => array('Feed.id' => $id),\n            'recursive' => -1\n        ));\n        if (empty($feed)) {\n            return __('Invalid feed id.');\n        }\n        if (!in_array($feed['Feed']['source_format'], array('csv', 'freetext'))) {\n            return __('Feed has to be either a CSV or a freetext feed for the purging to work.');\n        }\n        $this->User = ClassRegistry::init('User');\n        $user = $this->User->getAuthUser($user_id);\n        if (empty($user)) {\n            return __('Invalid user id.');\n        }\n        $conditions = array('Event.info' => $feed['Feed']['name'] . ' feed');\n        $this->Event = ClassRegistry::init('Event');\n        $events = $this->Event->find('list', array(\n            'conditions' => $conditions,\n            'fields' => array('Event.id', 'Event.id')\n        ));\n        $count = count($events);\n        foreach ($events as $event_id) {\n            $this->Event->delete($event_id);\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n                'org' => 'SYSTEM',\n                'model' => 'Feed',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'purge_events',\n                'title' => __('Events related to feed %s purged.', $id),\n                'change' => null,\n        ));\n        $feed['Feed']['fixed_event'] = 1;\n        $feed['Feed']['event_id'] = 0;\n        $this->save($feed);\n        return $count;\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\n\nclass Server extends AppModel\n{\n    public $name = 'Server';\n\n    public $actsAs = array('SysLogLogable.SysLogLogable' => array(\n            'userModel' => 'User',\n            'userKey' => 'user_id',\n            'change' => 'full'\n        ),\n        'Trim',\n        'Containable'\n    );\n\n    public $belongsTo = array(\n        'Organisation' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'org_id',\n        ),\n        'RemoteOrg' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'remote_org_id',\n        )\n    );\n\n    public $hasMany = array(\n        'SharingGroupServer' => array(\n            'className' => 'SharingGroupServer',\n            'foreignKey' => 'server_id',\n            'dependent'=> true,\n        ),\n        'User' => array(\n            'className' => 'User',\n            'foreignKey' => 'server_id',\n        ),\n    );\n\n    public $displayField = 'url';\n\n    public $validate = array(\n        'url' => array(\n            'url' => array(\n                'rule' => array('url'),\n                'message' => 'Please enter a valid base-url.'\n            )\n        ),\n        'authkey' => array(\n            'rule' => array('validateAuthkey')\n        ),\n        'name' => array(\n            'rule' => array('notBlank'),\n            'allowEmpty' => false,\n            'required' => true\n        ),\n        'org_id' => array(\n            'numeric' => array(\n                'rule' => array('valueIsID'),\n                'allowEmpty' => false,\n                'required' => true,\n            ),\n        ),\n        'push' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'pull' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'push_sightings' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'lastpushedid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'lastpulledid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n    );\n\n    public $syncTestErrorCodes = array();\n\n    public function __construct($id = false, $table = null, $ds = null)\n    {\n        parent::__construct($id, $table, $ds);\n\n        $this->syncTestErrorCodes = array(\n            2 => __('Server unreachable'),\n            3 => __('Unexpected error'),\n            4 => __('Authentication failed'),\n            5 => __('Password change required'),\n            6 => __('Terms not accepted')\n        );\n\n        $this->command_line_functions = array(\n            'console_admin_tasks' => array(\n                'data' => array(\n                    'Get setting' => 'MISP/app/Console/cake Admin getSetting [setting]',\n                    'Set setting' => 'MISP/app/Console/cake Admin setSetting [setting] [value]',\n                    'Get authkey' => 'MISP/app/Console/cake Admin getAuthkey [email]',\n                    'Set baseurl' => 'MISP/app/Console/cake Baseurl [baseurl]',\n                    'Change password' => 'MISP/app/Console/cake Password [email] [new_password] [--override_password_change]',\n                    'Clear Bruteforce Entries' => 'MISP/app/Console/cake Admin clearBruteforce [user_email]',\n                    'Run database update' => 'MISP/app/Console/cake Admin updateDatabase',\n                    'Update all JSON structures' => 'MISP/app/Console/cake Admin updateJSON',\n                    'Update Galaxy definitions' => 'MISP/app/Console/cake Admin updateGalaxies',\n                    'Update taxonomy definitions' => 'MISP/app/Console/cake Admin updateTaxonomies',\n                    'Update object templates' => 'MISP/app/Console/cake Admin updateObjectTemplates',\n                    'Update Warninglists' => 'MISP/app/Console/cake Admin updateWarningLists',\n                    'Update Noticelists' => 'MISP/app/Console/cake Admin updateNoticeLists',\n                    'Set default role' => 'MISP/app/Console/cake Admin setDefaultRole [role_id]',\n                    'Get IPs for user ID' => 'MISP/app/Console/cake Admin UserIP [user_id]',\n                    'Get user ID for user IP' => 'MISP/app/Console/cake Admin IPUser [ip]',\n                ),\n                'description' => __('Certain administrative tasks are exposed to the API, these help with maintaining and configuring MISP in an automated way / via external tools.'),\n                'header' => __('Administering MISP via the CLI')\n            ),\n            'console_automation_tasks' => array(\n                'data' => array(\n                    'Pull' => 'MISP/app/Console/cake Server pull [user_id] [server_id] [full|update]',\n                    'Push' => 'MISP/app/Console/cake Server push [user_id] [server_id]',\n                    'Cache feeds for quick lookups' => 'MISP/app/Console/cake Server cacheFeed [user_id] [feed_id|all|csv|text|misp]',\n                    'Fetch feeds as local data' => 'MISP/app/Console/cake Server fetchFeed [user_id] [feed_id|all|csv|text|misp]',\n                    'Run enrichment' => 'MISP/app/Console/cake Event enrichEvent [user_id] [event_id] [json_encoded_module_list]',\n                    'Test' => 'MISP/app/Console/cake Server test [server_id]',\n                    'List' => 'MISP/app/Console/cake Server list'\n                ),\n                'description' => __('If you would like to automate tasks such as caching feeds or pulling from server instances, you can do it using the following command line tools. Simply execute the given commands via the command line / create cron jobs easily out of them.'),\n                'header' => __('Automating certain console tasks')\n            ),\n            'worker_management_tasks' => array(\n                'data' => array(\n                    'Get list of workers' => 'MISP/app/Console/cake Admin getWorkers [all|dead]',\n                    'Start a worker' => 'MISP/app/Console/cake Admin startWorker [queue_name]',\n                    'Restart a worker' => 'MISP/app/Console/cake Admin restartWorker [worker_pid]',\n                    'Kill a worker' => 'MISP/app/Console/cake Admin killWorker [worker_pid]',\n                ),\n                'description' => __('The background workers can be managed via the CLI in addition to the UI / API management tools'),\n                'header' => __('Managing the background workers')\n            )\n        );\n\n        $this->serverSettings = array(\n                'MISP' => array(\n                        'branch' => 1,\n                        'baseurl' => array(\n                                'level' => 0,\n                                'description' => __('The base url of the application (in the format https://www.mymispinstance.com). Several features depend on this setting being correctly set to function.'),\n                                'value' => '',\n                                'errorMessage' => __('The currenty set baseurl does not match the URL through which you have accessed the page. Disregard this if you are accessing the page via an alternate URL (for example via IP address).'),\n                                'test' => 'testBaseURL',\n                                'type' => 'string',\n                        ),\n                        'external_baseurl' => array(\n                                'level' => 0,\n                                'description' => __('The base url of the application (in the format https://www.mymispinstance.com) as visible externally/by other MISPs. MISP will encode this URL in sharing groups when including itself. If this value is not set, the baseurl is used as a fallback.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testURL',\n                                'type' => 'string',\n                        ),\n                        'live' => array(\n                                'level' => 0,\n                                'description' => __('Unless set to true, the instance will only be accessible by site admins.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testLive',\n                                'type' => 'boolean',\n                        ),\n                        'language' => array(\n                                'level' => 0,\n                                'description' => __('Select the language MISP should use. The default is english.'),\n                                'value' => 'eng',\n                                'errorMessage' => '',\n                                'test' => 'testLanguage',\n                                'type' => 'string',\n                                'optionsSource' => 'AvailableLanguages',\n                                'afterHook' => 'cleanCacheFiles'\n                        ),\n                        'default_attribute_memory_coefficient' => array(\n                                'level' => 1,\n                                'description' => __('This values controls the internal fetcher\\'s memory envelope when it comes to attributes. The number provided is the amount of attributes that can be loaded for each MB of PHP memory available in one shot. Consider lowering this number if your instance has a lot of attribute tags / attribute galaxies attached.'),\n                                'value' => 80,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true\n                        ),\n                        'default_event_memory_divisor' => array(\n                                'level' => 1,\n                                'description' => __('This value controls the divisor for attribute weighting when it comes to loading full events. Meaning that it will load coefficient / divisor number of attributes per MB of memory available. Consider raising this number if you have a lot of correlations or highly contextualised events (large number of event level galaxies/tags).'),\n                                'value' => 3,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true\n                        ),\n                        'enable_advanced_correlations' => array(\n                                'level' => 0,\n                                'description' => __('Enable some performance heavy correlations (currently CIDR correlation)'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'server_settings_skip_backup_rotate' => array(\n                            'level' => 1,\n                            'description' => __('Enable this setting to directly save the config.php file without first creating a temporary file and moving it to avoid concurency issues. Generally not recommended, but useful when for example other tools modify/maintain the config.php file.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'python_bin' => array(\n                                'level' => 1,\n                                'description' => __('It is highly recommended to install all the python dependencies in a virtualenv. The recommended location is: %s/venv', ROOT),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'null' => false,\n                                'test' => 'testForBinExec',\n                                'beforeHook' => 'beforeHookBinExec',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'ca_path' => array(\n                                'level' => 1,\n                                'description' => __('MISP will default to the bundled mozilla certificate bundle shipped with the framework, which is rather stale. If you wish to use an alternate bundle, just set this setting using the path to the bundle to use. This setting can only be modified via the CLI.'),\n                                'value' => APP . 'Lib/cakephp/lib/Cake/Config/cacert.pem',\n                                'errorMessage' => '',\n                                'null' => true,\n                                'test' => 'testForCABundle',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'disable_auto_logout' => array(\n                                'level' => 1,\n                                'description' => __('In some cases, a heavily used MISP instance can generate unwanted blackhole errors due to a high number of requests hitting the server. Disable the auto logout functionality to ease the burden on the system.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'ssdeep_correlation_threshold' => array(\n                            'level' => 1,\n                            'description' => __('Set the ssdeep score at which to consider two ssdeep hashes as correlating [1-100]'),\n                            'value' => 40,\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'numeric'\n                        ),\n                        'max_correlations_per_event' => array(\n                                'level' => 1,\n                                'description' => __('Sets the maximum number of correlations that can be fetched with a single event. For extreme edge cases this can prevent memory issues. The default value is 5k.'),\n                                'value' => 5000,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true\n                        ),\n                        'maintenance_message' => array(\n                                'level' => 2,\n                                'description' => __('The message that users will see if the instance is not live.'),\n                                'value' => 'Great things are happening! MISP is undergoing maintenance, but will return shortly. You can contact the administration at $email.',\n                                'errorMessage' => __('If this is not set the default value will be used.'),\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'name' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'version' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disable_cached_exports' => array(\n                                'level' => 1,\n                                'description' => __('Cached exports can take up a considerable amount of space and can be disabled instance wide using this setting. Disabling the cached exports is not recommended as it\\'s a valuable feature, however, if your server is having free space issues it might make sense to take this step.'),\n                                'value' => false,\n                                'null' => true,\n                                'errorMessage' => '',\n                                'test' => 'testDisableCache',\n                                'type' => 'boolean',\n                                'afterHook' => 'disableCacheAfterHook',\n                        ),\n                        'disable_threat_level' => array(\n                                'level' => 1,\n                                'description' => __('Disable displaying / modifications to the threat level altogether on the instance (deprecated field).'),\n                                'value' => false,\n                                'null' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'header' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footermidleft' => array(\n                                'level' => 2,\n                                'description' => __('Footer text prepending the \"Powered by MISP\" text.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footermidright' => array(\n                                'level' => 2,\n                                'description' => __('Footer text following the \"Powered by MISP\" text.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerpart1' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerpart2' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footer' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerversion' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footer_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, this setting allows you to display a logo on the right side of the footer. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'home_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, this setting allows you to display a logo as the home icon. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'main_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, the image specified here will replace the main MISP logo on the login screen. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'org' => array(\n                                'level' => 1,\n                                'description' => __('The organisation tag of the hosting organisation. This is used in the e-mail subjects.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'host_org_id' => array(\n                                'level' => 0,\n                                'description' => __('The hosting organisation of this instance. If this is not selected then replication instances cannot be added.'),\n                                'value' => '0',\n                                'errorMessage' => '',\n                                'test' => 'testLocalOrg',\n                                'type' => 'numeric',\n                                'optionsSource' => 'LocalOrgs',\n                        ),\n                        'uuid' => array(\n                                'level' => 0,\n                                'description' => __('The MISP instance UUID. This UUID is used to identify this instance.'),\n                                'value' => '0',\n                                'errorMessage' => __('No valid UUID set'),\n                                'test' => 'testUuid',\n                                'type' => 'string'\n                        ),\n                        'logo' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'showorg' => array(\n                                'level' => 0,\n                                'description' => __('Setting this setting to \\'false\\' will hide all organisation names / logos.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'threatlevel_in_email_subject' => array(\n                                'level' => 2,\n                                'description' => __('Put the event threat level in the notification E-mail subject.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                            ),\n                        'email_subject_TLP_string' => array(\n                                'level' => 2,\n                                'description' => __('This is the TLP string for e-mails when email_subject_tag is not found.'),\n                                'value' => 'tlp:amber',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                            ),\n                        'email_subject_tag' => array(\n                                'level' => 2,\n                                'description' => __('If this tag is set on an event it\\'s value will be sent in the E-mail subject. If the tag is not set the email_subject_TLP_string will be used.'),\n                                'value' => 'tlp',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                            ),\n                        'email_subject_include_tag_name' => array(\n                                'level' => 2,\n                                'description' => __('Include in name of the email_subject_tag in the subject. When false only the tag value is used.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                            ),\n                        'taxii_sync' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'taxii_client_path' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'background_jobs' => array(\n                                'level' => 1,\n                                'description' => __('Enables the use of MISP\\'s background processing.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'attachments_dir' => array(\n                                'level' => 2,\n                                'description' => __('Directory where attachments are stored. MISP will NOT migrate the existing data if you change this setting. The only safe way to change this setting is in config.php, when MISP is not running, and after having moved/copied the existing data to the new location. This directory must already exist and be writable and readable by the MISP application.'),\n                                'value' =>  APP . '/files', # GUI display purpose only.\n                                'errorMessage' => '',\n                                'null' => false,\n                                'test' => 'testForWritableDir',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'cached_attachments' => array(\n                                'level' => 1,\n                                'description' => __('Allow the XML caches to include the encoded attachments.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'download_attachments_on_load' => array(\n                            'level' => 2,\n                            'description' => __('Always download attachments when loaded by a user in a browser'),\n                            'value' => true,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 0,\n                                'description' => __('The e-mail address that MISP should use for all notifications'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disable_emailing' => array(\n                                'level' => 0,\n                                'description' => __('You can disable all e-mailing using this setting. When enabled, no outgoing e-mails will be sent by MISP.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'null' => true,\n                                'test' => 'testDisableEmail',\n                                'type' => 'boolean',\n                        ),\n                        'contact' => array(\n                                'level' => 1,\n                                'description' => __('The e-mail address that MISP should include as a contact address for the instance\\'s support team.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'dns' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cveurl' => array(\n                                'level' => 1,\n                                'description' => __('Turn Vulnerability type attributes into links linking to the provided CVE lookup'),\n                                'value' => 'http://cve.circl.lu/cve/',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cweurl' => array(\n                                'level' => 1,\n                                'description' => __('Turn Weakness type attributes into links linking to the provided CWE lookup'),\n                                'value' => 'http://cve.circl.lu/cwe/',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disablerestalert' => array(\n                                'level' => 1,\n                                'description' => __('This setting controls whether notification e-mails will be sent when an event is created via the REST interface. It might be a good idea to disable this setting when first setting up a link to another instance to avoid spamming your users during the initial pull. Quick recap: True = Emails are NOT sent, False = Emails are sent on events published via sync / REST.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'extended_alert_subject' => array(\n                                'level' => 1,\n                                'description' => __('enabling this flag will allow the event description to be transmitted in the alert e-mail\\'s subject. Be aware that this is not encrypted by GnuPG, so only enable it if you accept that part of the event description will be sent out in clear-text.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'default_event_distribution' => array(\n                                'level' => 0,\n                                'description' => __('The default distribution setting for events (0-3).'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('0' => 'Your organisation only', '1' => 'This community only', '2' => 'Connected communities', '3' => 'All communities'),\n                        ),\n                        'default_attribute_distribution' => array(\n                                'level' => 0,\n                                'description' => __('The default distribution setting for attributes, set it to \\'event\\' if you would like the attributes to default to the event distribution level. (0-3 or \"event\")'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('0' => 'Your organisation only', '1' => 'This community only', '2' => 'Connected communities', '3' => 'All communities', 'event' => 'Inherit from event'),\n                        ),\n                        'default_event_threat_level' => array(\n                                'level' => 1,\n                                'description' => __('The default threat level setting when creating events.'),\n                                'value' => 4,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('1' => 'High', '2' => 'Medium', '3' => 'Low', '4' => 'undefined'),\n                        ),\n                        'default_event_tag_collection' => array(\n                            'level' => 0,\n                            'description' => __('The tag collection to be applied to all events created manually.'),\n                            'value' => 0,\n                            'errorMessage' => '',\n                            'test' => 'testTagCollections',\n                            'type' => 'numeric',\n                            'optionsSource' => 'TagCollections',\n                        ),\n                        'default_publish_alert' => array(\n                                'level' => 0,\n                                'description' => __('The default setting for publish alerts when creating users.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'tagging' => array(\n                                'level' => 1,\n                                'description' => __('Enable the tagging feature of MISP. This is highly recommended.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'full_tags_on_event_index' => array(\n                                'level' => 2,\n                                'description' => __('Show the full tag names on the event index.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array(0 => 'Minimal tags', 1 => 'Full tags', 2 => 'Shortened tags'),\n                        ),\n                        'welcome_text_top' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, before the MISP logo'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'welcome_text_bottom' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, after the MISP logo'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'welcome_logo' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, to the left of the MISP logo, upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'welcome_logo2' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, to the right of the MISP logo, upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'title_text' => array(\n                            'level' => 2,\n                            'description' => __('Used in the page title, after the name of the page'),\n                            'value' => 'MISP',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'take_ownership_xml_import' => array(\n                                'level' => 2,\n                                'description' => __('Allows users to take ownership of an event uploaded via the \"Add MISP XML\" button. This allows spoofing the creator of a manually imported event, also breaking possibly breaking the original intended releasability. Synchronising with an instance that has a different creator for the same event can lead to unwanted consequences.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'terms_download' => array(\n                                'level' => 2,\n                                'description' => __('Choose whether the terms and conditions should be displayed inline (false) or offered as a download (true)'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'terms_file' => array(\n                                'level' => 2,\n                                'description' => __('The filename of the terms and conditions file. Make sure that the file is located in your MISP/app/files/terms directory'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForTermsFile',\n                                'type' => 'string'\n                        ),\n                        'showorgalternate' => array(\n                                'level' => 2,\n                                'description' => __('True enables the alternate org fields for the event index (source org and member org) instead of the traditional way of showing only an org field. This allows users to see if an event was uploaded by a member organisation on their MISP instance, or if it originated on an interconnected instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'unpublishedprivate' => array(\n                                'level' => 2,\n                                'description' => __('True will deny access to unpublished events to users outside the organization of the submitter except site admins.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'newUserText' => array(\n                                'level' => 1,\n                                'bigField' => true,\n                                'description' => __('The message sent to the user after account creation (has to be sent manually from the administration interface). Use \\\\n for line-breaks. The following variables will be automatically replaced in the text: $password = a new temporary password that MISP generates, $username = the user\\'s e-mail address, $misp = the url of this instance, $org = the organisation that the instance belongs to, as set in MISP.org, $contact = the e-mail address used to contact the support team, as set in MISP.contact. For example, \"the password for $username is $password\" would appear to a user with the e-mail address user@misp.org as \"the password for user@misp.org is hNamJae81\".'),\n                                'value' => 'Dear new MISP user,\\n\\nWe would hereby like to welcome you to the $org MISP community.\\n\\n Use the credentials below to log into MISP at $misp, where you will be prompted to manually change your password to something of your own choice.\\n\\nUsername: $username\\nPassword: $password\\n\\nIf you have any questions, don\\'t hesitate to contact us at: $contact.\\n\\nBest regards,\\nYour $org MISP support team',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordResetText',\n                                'type' => 'string'\n                        ),\n                        'passwordResetText' => array(\n                                'level' => 1,\n                                'bigField' => true,\n                                'description' => __('The message sent to the users when a password reset is triggered. Use \\\\n for line-breaks. The following variables will be automatically replaced in the text: $password = a new temporary password that MISP generates, $username = the user\\'s e-mail address, $misp = the url of this instance, $contact = the e-mail address used to contact the support team, as set in MISP.contact. For example, \"the password for $username is $password\" would appear to a user with the e-mail address user@misp.org as \"the password for user@misp.org is hNamJae81\".'),\n                                'value' => 'Dear MISP user,\\n\\nA password reset has been triggered for your account. Use the below provided temporary password to log into MISP at $misp, where you will be prompted to manually change your password to something of your own choice.\\n\\nUsername: $username\\nYour temporary password: $password\\n\\nIf you have any questions, don\\'t hesitate to contact us at: $contact.\\n\\nBest regards,\\nYour $org MISP support team',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordResetText',\n                                'type' => 'string'\n                        ),\n                        'enableEventBlacklisting' => array(\n                                'level' => 1,\n                                'description' => __('Since version 2.3.107 you can start blacklisting event UUIDs to prevent them from being pushed to your instance. This functionality will also happen silently whenever an event is deleted, preventing a deleted event from being pushed back from another instance.'),\n                                'value' => true,\n                                'type' => 'boolean',\n                                'test' => 'testBool'\n                        ),\n                        'enableOrgBlacklisting' => array(\n                                'level' => 1,\n                                'description' => __('Blacklisting organisation UUIDs to prevent the creation of any event created by the blacklisted organisation.'),\n                                'value' => true,\n                                'type' => 'boolean',\n                                'test' => 'testBool'\n                        ),\n                        'log_client_ip' => array(\n                                'level' => 1,\n                                'description' => __('If enabled, all log entries will include the IP address of the user.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'beforeHook' => 'ipLogBeforeHook'\n                        ),\n                        'log_auth' => array(\n                                'level' => 1,\n                                'description' => __('If enabled, MISP will log all successful authentications using API keys. The requested URLs are also logged.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'log_skip_db_logs_completely' => array(\n                            'level' => 0,\n                            'description' => __('This functionality allows you to completely disable any logs from being saved in your SQL backend. This is HIGHLY advised against, you lose all the functionalities provided by the audit log subsystem along with the event history (as these are built based on the logs on the fly). Only enable this if you understand and accept the associated risks.'),\n                            'value' => false,\n                            'errorMessage' => __('Logging has now been disabled - your audit logs will not capture failed authentication attempts, your event history logs are not being populated and no system maintenance messages are being logged.'),\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'log_paranoid' => array(\n                                'level' => 0,\n                                'description' => __('If this functionality is enabled all page requests will be logged. Keep in mind this is extremely verbose and will become a burden to your database.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_paranoid_skip_db' => array(\n                                'level' => 0,\n                                'description' => __('You can decide to skip the logging of the paranoid logs to the database.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testParanoidSkipDb',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_paranoid_include_post_body' => array(\n                                'level' => 0,\n                                'description' => __('If paranoid logging is enabled, include the POST body in the entries.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_user_ips' => array(\n                                'level' => 0,\n                                'description' => __('Log user IPs on each request. 30 day retention for lookups by IP to get the last authenticated user ID for the given IP, whilst on the reverse, indefinitely stores all associated IPs for a user ID.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'delegation' => array(\n                                'level' => 1,\n                                'description' => __('This feature allows users to create org only events and ask another organisation to take ownership of the event. This allows organisations to remain anonymous by asking a partner to publish an event for them.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showCorrelationsOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the number of correlations visible to the currently logged in user will be visible on the event index UI. This comes at a performance cost but can be very useful to see correlating events at a glance.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showProposalsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the number of proposals for the events are shown on the index.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showSightingsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the aggregate number of attribute sightings within the event becomes visible to the currently logged in user on the event index UI.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showDiscussionsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the aggregate number of discussion posts for the event becomes visible to the currently logged in user on the event index UI.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'disableUserSelfManagement' => array(\n                                'level' => 1,\n                                'description' => __('When enabled only Org and Site admins can edit a user\\'s profile.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n\n                        ),\n                        'block_event_alert' => array(\n                                'level' => 1,\n                                'description' => __('Enable this setting to start blocking alert e-mails for events with a certain tag. Define the tag in MISP.block_event_alert_tag.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'block_event_alert_tag' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_event_alert setting is set, alert e-mails for events tagged with the tag defined by this setting will be blocked.'),\n                                'value' => 'no-alerts=\"true\"',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => false,\n                        ),\n                        'org_alert_threshold' => array(\n                                'level' => 1,\n                                'description' => __('Set a value to limit the number of email alerts that events can generate per creator organisation (for example, if an organisation pushes out 2000 events in one shot, only alert on the first 20).'),\n                                'value' => 0,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true,\n                        ),\n                        'block_old_event_alert' => array(\n                                'level' => 1,\n                                'description' => __('Enable this setting to start blocking alert e-mails for old events. The exact timing of what constitutes an old event is defined by MISP.block_old_event_alert_age.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'block_old_event_alert_age' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_old_event_alert setting is set, this setting will control how old an event can be for it to be alerted on. The \"timestamp\" field of the event is used. Expected format: integer, in days'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => false,\n                        ),\n                        'block_old_event_alert_by_date' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_old_event_alert setting is set, this setting will control the threshold for the event.date field, indicating how old an event can be for it to be alerted on. The \"date\" field of the event is used. Expected format: integer, in days'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => false,\n                        ),\n                        'tmpdir' => array(\n                                'level' => 1,\n                                'description' => __('Please indicate the temp directory you wish to use for certain functionalities in MISP. By default this is set to /tmp and will be used among others to store certain temporary files extracted from imports during the import process.'),\n                                'value' => '/tmp',\n                                'errorMessage' => '',\n                                'test' => 'testForPath',\n                                'type' => 'string',\n                                'null' => true,\n                                'cli_only' => 1\n                        ),\n                        'custom_css' => array(\n                                'level' => 2,\n                                'description' => __('If you would like to customise the css, simply drop a css file in the /var/www/MISP/app/webroot/css directory and enter the name here.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForStyleFile',\n                                'type' => 'string',\n                                'null' => true,\n                        ),\n                        'proposals_block_attributes' => array(\n                                'level' => 0,\n                                'description' => __('Enable this setting to allow blocking attributes from to_ids sensitive exports if a proposal has been made to it to remove the IDS flag or to remove the attribute altogether. This is a powerful tool to deal with false-positives efficiently.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'incoming_tags_disabled_by_default' => array(\n                                'level' => 1,\n                                'description' => __('Enable this settings if new tags synced / added via incoming events from any source should not be selectable by users by default.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false\n                        ),\n                        'completely_disable_correlation' => array(\n                                'level' => 0,\n                                'description' => __('*WARNING* This setting will completely disable the correlation on this instance and remove any existing saved correlations. Enabling this will trigger a full recorrelation of all data which is an extremely long and costly procedure. Only enable this if you know what you\\'re doing.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true,\n                                'afterHook' => 'correlationAfterHook',\n                        ),\n                        'allow_disabling_correlation' => array(\n                                'level' => 0,\n                                'description' => __('*WARNING* This setting will give event creators the possibility to disable the correlation of individual events / attributes that they have created.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'redis_host' => array(\n                            'level' => 0,\n                            'description' => __('The host running the redis server to be used for generic MISP tasks such as caching. This is not to be confused by the redis server used by the background processing.'),\n                            'value' => '127.0.0.1',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'redis_port' => array(\n                            'level' => 0,\n                            'description' => __('The port used by the redis server to be used for generic MISP tasks such as caching. This is not to be confused by the redis server used by the background processing.'),\n                            'value' => 6379,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'redis_database' => array(\n                            'level' => 0,\n                            'description' => __('The database on the redis server to be used for generic MISP tasks. If you run more than one MISP instance, please make sure to use a different database on each instance.'),\n                            'value' => 13,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'redis_password' => array(\n                            'level' => 0,\n                            'description' => __('The password on the redis server (if any) to be used for generic MISP tasks.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => null,\n                            'type' => 'string',\n                            'redacted' => true\n                        ),\n                        'event_view_filter_fields' => array(\n                            'level' => 2,\n                            'description' => __('Specify which fields to filter on when you search on the event view. Default values are : \"id, uuid, value, comment, type, category, Tag.name\"'),\n                            'value' => 'id, uuid, value, comment, type, category, Tag.name',\n                            'errorMessage' => '',\n                            'test' => null,\n                            'type' => 'string',\n                        ),\n                        'manage_workers' => array(\n                                'level' => 2,\n                                'description' => __('Set this to false if you would like to disable MISP managing its own worker processes (for example, if you are managing the workers with a systemd unit).'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'deadlock_avoidance' => array(\n                                'level' => 1,\n                                'description' => __('Only enable this if you have some tools using MISP with extreme high concurency. General performance will be lower as normal as certain transactional queries are avoided in favour of shorter table locks.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'updateTimeThreshold' => array(\n                               'level' => 1,\n                               'description' => __('Sets the minimum time before being able to re-trigger an update if the previous one failed. (safe guard to avoid starting the same update multiple time)'),\n                               'value' => '7200',\n                               'test' => 'testForNumeric',\n                               'type' => 'numeric',\n                               'null' => true\n                       )\n                ),\n                'GnuPG' => array(\n                        'branch' => 1,\n                        'binary' => array(\n                                'level' => 2,\n                                'description' => __('The location of the GnuPG executable. If you would like to use a different GnuPG executable than /usr/bin/gpg, you can set it here. If the default is fine, just keep the setting suggested by MISP.'),\n                                'value' => '/usr/bin/gpg',\n                                'errorMessage' => '',\n                                'test' => 'testForGPGBinary',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'onlyencrypted' => array(\n                                'level' => 0,\n                                'description' => __('Allow (false) unencrypted e-mails to be sent to users that don\\'t have a GnuPG key.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'bodyonlyencrypted' => array(\n                                'level' => 2,\n                                'description' => __('Allow (false) the body of unencrypted e-mails to contain details about the event.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'sign' => array(\n                                'level' => 2,\n                                'description' => __('Enable the signing of GnuPG emails. By default, GnuPG emails are signed'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 0,\n                                'description' => __('The e-mail address that the instance\\'s GnuPG key is tied to.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 1,\n                                'description' => __('The password (if it is set) of the GnuPG key of the instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'redacted' => true\n                        ),\n                        'homedir' => array(\n                                'level' => 0,\n                                'description' => __('The location of the GnuPG homedir.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        )\n                ),\n                'SMIME' => array(\n                        'branch' => 1,\n                        'enabled' => array(\n                                'level' => 2,\n                                'description' => __('Enable SMIME encryption. The encryption posture of the GnuPG.onlyencrypted and GnuPG.bodyonlyencrypted settings are inherited if SMIME is enabled.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 2,\n                                'description' => __('The e-mail address that the instance\\'s SMIME key is tied to.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cert_public_sign' => array(\n                                'level' => 2,\n                                'description' => __('The location of the public half of the signing certificate.'),\n                                'value' => '/var/www/MISP/.smime/email@address.com.pem',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'key_sign' => array(\n                                'level' => 2,\n                                'description' => __('The location of the private half of the signing certificate.'),\n                                'value' => '/var/www/MISP/.smime/email@address.com.key',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 2,\n                                'description' => __('The password (if it is set) of the SMIME key of the instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'redacted' => true\n                        ),\n                ),\n                'Proxy' => array(\n                        'branch' => 1,\n                        'host' => array(\n                                'level' => 2,\n                                'description' => __('The hostname of an HTTP proxy for outgoing sync requests. Leave empty to not use a proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'port' => array(\n                                'level' => 2,\n                                'description' => __('The TCP port for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                        ),\n                        'method' => array(\n                                'level' => 2,\n                                'description' => __('The authentication method for the HTTP proxy. Currently supported are Basic or Digest. Leave empty for no proxy authentication.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'user' => array(\n                                'level' => 2,\n                                'description' => __('The authentication username for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 2,\n                                'description' => __('The authentication password for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                ),\n                'Security' => array(\n                        'branch' => 1,\n                        'disable_form_security' => array(\n                            'level' => 0,\n                            'description' => __('Disabling this setting will remove all form tampering protection. Do not set this setting pretty much ever. You were warned.'),\n                            'value' => false,\n                            'errorMessage' => 'This setting leaves your users open to CSRF attacks. Do not please consider disabling this setting.',\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'salt' => array(\n                                'level' => 0,\n                                'description' => __('The salt used for the hashed passwords. You cannot reset this from the GUI, only manually from the settings.php file. Keep in mind, this will invalidate all passwords in the database.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testSalt',\n                                'type' => 'string',\n                                'editable' => false,\n                                'redacted' => true\n                        ),\n                        'syslog' => array(\n                            'level' => 0,\n                            'description' => __('Enable this setting to pass all audit log entries directly to syslog. Keep in mind, this is verbose and will include user, organisation, event data.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'password_policy_length' => array(\n                                'level' => 2,\n                                'description' => __('Password length requirement. If it is not set or it is set to 0, then the default value is assumed (12).'),\n                                'value' => '12',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordLength',\n                                'type' => 'numeric',\n                        ),\n                        'password_policy_complexity' => array(\n                                'level' => 2,\n                                'description' => __('Password complexity requirement. Leave it empty for the default setting (3 out of 4, with either a digit or a special char) or enter your own regex. Keep in mind that the length is checked in another key. Default (simple 3 out of 4 or minimum 16 characters): /^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/'),\n                                'value' => '/^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordRegex',\n                                'type' => 'string',\n                        ),\n                        'require_password_confirmation' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will require users to submit their current password on any edits to their profile (including a triggered password change). For administrators, the confirmation will be required when changing the profile of any user. Could potentially mitigate an attacker trying to change a compromised user\\'s password in order to establish persistance, however, enabling this feature will be highly annoying to users.'),\n                            'value' => true,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'sanitise_attribute_on_delete' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will sanitise the contents of an attribute on a soft delete'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'hide_organisation_index_from_users' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will block the organisation index from being visible to anyone besides site administrators on the current instance. Keep in mind that users can still see organisations that produce data via events, proposals, event history log entries, etc.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'allow_unsafe_apikey_named_param' => array(\n                            'level' => 0,\n                            'description' => __('Allows passing the API key via the named url parameter \"apikey\" - highly recommended not to enable this, but if you have some dodgy legacy tools that cannot pass the authorization header it can work as a workaround. Again, only use this as a last resort.'),\n                            'value' => false,\n                            'errorMessage' => __('You have enabled the passing of API keys via URL parameters. This is highly recommended against, do you really want to reveal APIkeys in your logs?...'),\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'allow_cors' => array(\n                            'level' => 1,\n                            'description' => __('Allow cross-origin requests to this instance, matching origins given in Security.cors_origins. Set to false to totally disable'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'cors_origins' => array(\n                            'level' => 1,\n                            'description' => __('Set the origins from which MISP will allow cross-origin requests. Useful for external integration. Comma seperate if you need more than one.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'null' => true\n                        ),\n                        'sync_audit' => array(\n                            'level' => 1,\n                            'description' => __('Enable this setting to create verbose logs of synced event data for debugging reasons. Logs are saved in your MISP directory\\'s app/files/scripts/tmp/ directory.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'user_monitoring_enabled' => array(\n                            'level' => 1,\n                            'description' => __('Enables the functionality to monitor users - thereby enabling all logging functionalities for a single user. This functionality is intrusive and potentially heavy on the system - use it with care.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        )\n                ),\n                'SecureAuth' => array(\n                        'branch' => 1,\n                        'amount' => array(\n                                'level' => 0,\n                                'description' => __('The number of tries a user can try to login and fail before the bruteforce protection kicks in.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string',\n                        ),\n                        'expire' => array(\n                                'level' => 0,\n                                'description' => __('The duration (in seconds) of how long the user will be locked out when the allowed number of login attempts are exhausted.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string',\n                        ),\n                ),\n                'Session' => array(\n                        'branch' => 1,\n                        'autoRegenerate' => array(\n                                'level' => 0,\n                                'description' => __('Set to true to automatically regenerate sessions after x number of requests. This might lead to the user getting de-authenticated and is frustrating in general, so only enable it if you really need to regenerate sessions. (Not recommended)'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                        ),\n                        'checkAgent' => array(\n                                'level' => 0,\n                                'description' => __('Set to true to check for the user agent string in each request. This can lead to occasional logouts (not recommended).'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                        ),\n                        'defaults' => array(\n                                'level' => 0,\n                                'description' => __('The session type used by MISP. The default setting is php, which will use the session settings configured in php.ini for the session data (supported options: php, database). The recommended option is php and setting your PHP up to use redis sessions via your php.ini. Just add \\'session.save_handler = redis\\' and \"session.save_path = \\'tcp://localhost:6379\\'\" (replace the latter with your redis connection) to '),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForSessionDefaults',\n                                'type' => 'string',\n                                'options' => array('php' => 'php', 'database' => 'database', 'cake' => 'cake', 'cache' => 'cache'),\n                        ),\n                        'timeout' => array(\n                                'level' => 0,\n                                'description' => __('The timeout duration of sessions (in MINUTES). 0 does not mean infinite for the PHP session handler, instead sessions will invalidate immediately.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string'\n                        ),\n                        'cookieTimeout' => array(\n                                'level' => 0,\n                                'description' => __('The expiration of the cookie (in MINUTES). The session timeout gets refreshed frequently, however the cookies do not. Generally it is recommended to have a much higher cookie_timeout than timeout.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCookieTimeout',\n                                'type' => 'numeric'\n                        )\n                ),\n                'Plugin' => array(\n                        'branch' => 1,\n                        'RPZ_policy' => array(\n                            'level' => 2,\n                            'description' => __('The default policy action for the values added to the RPZ.'),\n                            'value' => 1,\n                            'errorMessage' => '',\n                            'test' => 'testForRPZBehaviour',\n                            'type' => 'numeric',\n                            'options' => array(0 => 'DROP', 1 => 'NXDOMAIN', 2 => 'NODATA', 3 => 'Local-Data', 4 => 'PASSTHRU', 5 => 'TCP-only' ),\n                        ),\n                        'RPZ_walled_garden' => array(\n                            'level' => 2,\n                            'description' => __('The default walled garden used by the RPZ export if the Local-Data policy setting is picked for the export.'),\n                            'value' => '127.0.0.1',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'RPZ_serial' => array(\n                                'level' => 2,\n                                'description' => __('The serial in the SOA portion of the zone file. (numeric, best practice is yyyymmddrr where rr is the two digit sub-revision of the file. $date will automatically get converted to the current yyyymmdd, so $date00 is a valid setting). Setting it to $time will give you an unixtime-based serial (good then you need more than 99 revisions per day).'),\n                                'value' => '$date00',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZSerial',\n                                'type' => 'string',\n                        ),\n                        'RPZ_refresh' => array(\n                                'level' => 2,\n                                'description' => __('The refresh specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '2h',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_retry' => array(\n                                'level' => 2,\n                                'description' => __('The retry specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '30m',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_expiry' => array(\n                                'level' => 2,\n                                'description' => __('The expiry specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '30d',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_minimum_ttl' => array(\n                                'level' => 2,\n                                'description' => __('The minimum TTL specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '1h',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ttl' => array(\n                                'level' => 2,\n                                'description' => __('The TTL of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '1w',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ns' => array(\n                                'level' => 2,\n                                'description' => __('Nameserver'),\n                                'value' => 'localhost.',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ns_alt' => array(\n                            'level' => 2,\n                            'description' => __('Alternate nameserver'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                    ),\n                        'RPZ_email' => array(\n                            'level' => 2,\n                            'description' => __('The e-mail address specified in the SOA portion of the zone file.'),\n                            'value' => 'root.localhost',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the Kafka pub feature of MISP. Make sure that you install the requirements for the plugin to work. Refer to the installation instructions for more information.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'Kafka_brokers' => array(\n                            'level' => 2,\n                            'description' => __('A comma separated list of Kafka bootstrap brokers'),\n                            'value' => 'kafka:9092',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_rdkafka_config' => array(\n                            'level' => 2,\n                            'description' => __('A path to an ini file with configuration options to be passed to rdkafka. Section headers in the ini file will be ignored.'),\n                            'value' => '/etc/rdkafka.ini',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_include_attachments' => array(\n                            'level' => 2,\n                            'description' => __('Enable this setting to include the base64 encoded payloads of malware-samples/attachments in the output.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any event creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing event creations/edits/deletions.'),\n                            'value' => 'misp_event',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_event_publish_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('If enabled it will publish to Kafka the event at the time that the event gets published in MISP. Event actions (creation or edit) will not be published to Kafka.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_publish_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing event information on publish.'),\n                            'value' => 'misp_event_publish',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_object_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_object_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing object creations/edits/deletions.'),\n                            'value' => 'misp_object',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_object_reference_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object reference creations/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_object_reference_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing object reference creations/deletions.'),\n                            'value' => 'misp_object_reference',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any attribute creations/edits/soft deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_attribute_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing attribute creations/edits/soft deletions.'),\n                            'value' => 'misp_attribute',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_shadow_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any proposal creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_shadow_attribute_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing proposal creations/edits/deletions.'),\n                            'value' => 'misp_shadow_attribute',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_tag_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_tag_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => 'misp_tag',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_sighting_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new sightings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_sighting_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing sightings.'),\n                            'value' => 'misp_sighting',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_user_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified users.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_user_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing new/modified users.'),\n                            'value' => 'misp_user',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_organisation_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified organisations.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_organisation_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing new/modified organisations.'),\n                            'value' => 'misp_organisation',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_audit_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of log entries. Keep in mind, this can get pretty verbose depending on your logging settings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_audit_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing log entries.'),\n                            'value' => 'misp_audit',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'ZeroMQ_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the pub/sub feature of MISP. Make sure that you install the requirements for the plugin to work. Refer to the installation instructions for more information.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_port' => array(\n                            'level' => 2,\n                            'description' => __('The port that the pub/sub feature will use.'),\n                            'value' => 50000,\n                            'errorMessage' => '',\n                            'test' => 'testForZMQPortNumber',\n                            'type' => 'numeric',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_host' => array(\n                            'level' => 2,\n                            'description' => __('Location of the Redis db used by MISP and the Python PUB script to queue data to be published.'),\n                            'value' => 'localhost',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_port' => array(\n                            'level' => 2,\n                            'description' => __('The port that Redis is listening on.'),\n                            'value' => 6379,\n                            'errorMessage' => '',\n                            'test' => 'testForPortNumber',\n                            'type' => 'numeric',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_password' => array(\n                            'level' => 2,\n                            'description' => __('The password, if set for Redis.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_database' => array(\n                            'level' => 2,\n                            'description' => __('The database to be used for queuing messages for the pub/sub functionality.'),\n                            'value' => 1,\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_namespace' => array(\n                            'level' => 2,\n                            'description' => __('The namespace to be used for queuing messages for the pub/sub functionality.'),\n                            'value' => 'mispq',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_include_attachments' => array(\n                            'level' => 2,\n                            'description' => __('Enable this setting to include the base64 encoded payloads of malware-samples/attachments in the output.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_event_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any event creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_object_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_object_reference_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object reference creations/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any attribute creations/edits/soft deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_tag_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_sighting_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new sightings to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_user_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified users to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_organisation_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified organisations to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_audit_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of log entries to the ZMQ pubsub feed. Keep in mind, this can get pretty verbose depending on your logging settings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ElasticSearch_logging_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enabled logging to an ElasticSearch instance'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ElasticSearch_connection_string' => array(\n                            'level' => 2,\n                            'description' => __('The URL(s) at which to access ElasticSearch - comma separate if you want to have more than one.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'ElasticSearch_log_index' => array(\n                            'level' => 2,\n                            'description' => __('The index in which to place logs'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables uploading of malware samples to S3 rather than to disk (WARNING: Get permission from amazon first!)'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'S3_bucket_name' => array(\n                            'level' => 2,\n                            'description' => __('Bucket name to upload to'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_region' => array(\n                            'level' => 2,\n                            'description' => __('Region in which your S3 bucket resides'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_aws_access_key' => array(\n                            'level' => 2,\n                            'description' => __('AWS key to use when uploading samples (WARNING: It\\' highly recommended that you use EC2 IAM roles if at all possible)'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_aws_secret_key' => array(\n                            'level' => 2,\n                            'description' => __('AWS secret key to use when uploading samples'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Sightings_policy' => array(\n                            'level' => 1,\n                            'description' => __('This setting defines who will have access to seeing the reported sightings. The default setting is the event owner alone (in addition to everyone seeing their own contribution) with the other options being Sighting reporters (meaning the event owner and anyone that provided sighting data about the event) and Everyone (meaning anyone that has access to seeing the event / attribute).'),\n                            'value' => 0,\n                            'errorMessage' => '',\n                            'test' => 'testForSightingVisibility',\n                            'type' => 'numeric',\n                            'options' => array(0 => 'Event Owner', 1 => 'Sighting reporters', 2 => 'Everyone'),\n                        ),\n                        'Sightings_anonymise' => array(\n                            'level' => 1,\n                            'description' => __('Enabling the anonymisation of sightings will simply aggregate all sightings instead of showing the organisations that have reported a sighting. Users will be able to tell the number of sightings their organisation has submitted and the number of sightings for other organisations'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'Sightings_range' => array(\n                            'level' => 1,\n                            'description' => __('Set the range in which sightings will be taken into account when generating graphs. For example a sighting with a sighted_date of 7 years ago might not be relevant anymore. Setting given in number of days, default is 365 days'),\n                            'value' => 365,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'Sightings_sighting_db_enable' => array(\n                            'level' => 1,\n                            'description' => __('Enable SightingDB integration.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'CustomAuth_enable' => array(\n                                'level' => 2,\n                                'description' => __('Enable this functionality if you would like to handle the authentication via an external tool and authenticate with MISP using a custom header.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true,\n                                'beforeHook' => 'customAuthBeforeHook'\n                        ),\n                        'CustomAuth_header' => array(\n                                'level' => 2,\n                                'description' => __('Set the header that MISP should look for here. If left empty it will default to the Authorization header.'),\n                                'value' => 'Authorization',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_use_header_namespace' => array(\n                                'level' => 2,\n                                'description' => __('Use a header namespace for the auth header - default setting is enabled'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'CustomAuth_header_namespace' => array(\n                                'level' => 2,\n                                'description' => __('The default header namespace for the auth header - default setting is HTTP_'),\n                                'value' => 'HTTP_',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_required' => array(\n                                'level' => 2,\n                                'description' => __('If this setting is enabled then the only way to authenticate will be using the custom header. Altnertatively you can run in mixed mode that will log users in via the header if found, otherwise users will be redirected to the normal login page.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'CustomAuth_only_allow_source' => array(\n                                'level' => 2,\n                                'description' => __('If you are using an external tool to authenticate with MISP and would like to only allow the tool\\'s url as a valid point of entry then set this field. '),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_name' => array(\n                                'level' => 2,\n                                'description' => __('The name of the authentication method, this is cosmetic only and will be shown on the user creation page and logs.'),\n                                'value' => 'External authentication',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_disable_logout' => array(\n                                'level' => 2,\n                                'description' => __('Disable the logout button for users authenticate with the external auth mechanism.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Enrichment_services_enable' => array(\n                            'level' => 0,\n                            'description' => __('Enable/disable the enrichment services'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Enrichment_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the enrichment services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Import_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the import services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Import_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the import services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Import_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the import services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Import_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the import services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => '6666',\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Export_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the export services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Export_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the export services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => '6666',\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Export_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the export services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Export_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the export services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Enrichment_hover_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the hover over information retrieved from the enrichment modules'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Enrichment_hover_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the hover services'),\n                                'value' => 5,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Enrichment_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the enrichment services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Enrichment_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the enrichment services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => 6666,\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access Cortex. By default, it is accessible at http://cortex-url'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Cortex_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access Cortex. By default, this is port 9000'),\n                                'value' => 9000,\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the Cortex services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Cortex_authkey' => array(\n                                'level' => 1,\n                                'description' => __('Set an authentication key to be passed to Cortex'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'Cortex_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the Cortex services'),\n                                'value' => 120,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_ssl_verify_peer' => array(\n                                'level' => 1,\n                                'description' => __('Set to false to disable SSL verification. This is not recommended.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_verify_host' => array(\n                                'level' => 1,\n                                'description' => __('Set to false if you wish to ignore hostname match errors when validating certificates.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_allow_self_signed' => array(\n                                'level' => 1,\n                                'description' => __('Set to true to enable self-signed certificates to be accepted. This requires Cortex_ssl_verify_peer to be enabled.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_cafile' => array(\n                                'level' => 1,\n                                'description' => __('Set to the absolute path of the Certificate Authority file that you wish to use for verifying SSL certificates.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_custom_password_reset' => array(\n                                'level' => 2,\n                                'description' => __('Provide your custom authentication users with an external URL to the authentication system to reset their passwords.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_custom_logout' => array(\n                                'level' => 2,\n                                'description' => __('Provide a custom logout URL for your users that will log them out using the authentication system you use.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        )\n                ),\n                'debug' => array(\n                        'level' => 0,\n                        'description' => __('The debug level of the instance, always use 0 for production instances.'),\n                        'value' => '',\n                        'errorMessage' => '',\n                        'test' => 'testDebug',\n                        'type' => 'numeric',\n                        'options' => array(0 => 'Debug off', 1 => 'Debug on', 2 => 'Debug + SQL dump'),\n                ),\n                'site_admin_debug' => array(\n                        'level' => 0,\n                        'description' => __('The debug level of the instance for site admins. This feature allows site admins to run debug mode on a live instance without exposing it to other users. The most verbose option of debug and site_admin_debug is used for site admins.'),\n                        'value' => '',\n                        'errorMessage' => '',\n                        'test' => 'testDebugAdmin',\n                        'type' => 'boolean',\n                        'null' => true\n                ),\n        );\n    }\n\n    private $__settingTabMergeRules = array(\n            'GnuPG' => 'Encryption',\n            'SMIME' => 'Encryption',\n            'misc' => 'Security',\n            'Security' => 'Security',\n            'Session' => 'Security'\n    );\n\n\n    public $validEventIndexFilters = array('searchall', 'searchpublished', 'searchorg', 'searchtag', 'searcheventid', 'searchdate', 'searcheventinfo', 'searchthreatlevel', 'searchdistribution', 'searchanalysis', 'searchattribute');\n\n    public function isOwnedByOrg($serverid, $org)\n    {\n        return $this->field('id', array('id' => $serverid, 'org' => $org)) === $serverid;\n    }\n\n    public function beforeSave($options = array())\n    {\n        $this->data['Server']['url'] = rtrim($this->data['Server']['url'], '/');\n        if (empty($this->data['Server']['id'])) {\n            $max_prio = $this->find('first', array(\n                'recursive' => -1,\n                'order' => array('Server.priority' => 'DESC'),\n                'fields' => array('Server.priority')\n            ));\n            if (empty($max_prio)) {\n                $max_prio = 0;\n            } else {\n                $max_prio = $max_prio['Server']['priority'];\n            }\n            $this->data['Server']['priority'] = $max_prio + 1;\n        }\n        return true;\n    }\n\n    private function __getEventIdListBasedOnPullTechnique($technique, $server)\n    {\n        if (\"full\" === $technique) {\n            // get a list of the event_ids on the server\n            $eventIds = $this->getEventIdsFromServer($server);\n            if ($eventIds === 403) {\n                return array('error' => array(1, null));\n            } elseif (is_string($eventIds)) {\n                return array('error' => array(2, $eventIds));\n            }\n\n            // reverse array of events, to first get the old ones, and then the new ones\n            if (!empty($eventIds)) {\n                $eventIds = array_reverse($eventIds);\n            }\n        } elseif (\"update\" === $technique) {\n            $eventIds = $this->getEventIdsFromServer($server, false, null, true, true);\n            if ($eventIds === 403) {\n                return array('error' => array(1, null));\n            } elseif (is_string($eventIds)) {\n                return array('error' => array(2, $eventIds));\n            }\n            $eventModel = ClassRegistry::init('Event');\n            $local_event_ids = $eventModel->find('list', array(\n                    'fields' => array('uuid'),\n                    'recursive' => -1,\n            ));\n            $eventIds = array_intersect($eventIds, $local_event_ids);\n        } elseif (is_numeric($technique)) {\n            $eventIds[] = intval($technique);\n        } else {\n            return array('error' => array(4, null));\n        }\n        return $eventIds;\n    }\n\n    private function __checkIfEventIsBlockedBeforePull($event)\n    {\n        if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n            $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n            $r = $this->EventBlacklist->find('first', array('conditions' => array('event_uuid' => $event['Event']['uuid'])));\n            if (!empty($r)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private function __updatePulledEventBeforeInsert(&$event, $server, $user)\n    {\n        // we have an Event array\n        // The event came from a pull, so it should be locked.\n        $event['Event']['locked'] = true;\n        if (!isset($event['Event']['distribution'])) { // version 1\n            $event['Event']['distribution'] = '1';\n        }\n        // Distribution\n        if (empty(Configure::read('MISP.host_org_id')) || !$server['Server']['internal'] ||  Configure::read('MISP.host_org_id') != $server['Server']['org_id']) {\n            switch ($event['Event']['distribution']) {\n                case 1:\n                    // if community only, downgrade to org only after pull\n                    $event['Event']['distribution'] = '0';\n                    break;\n                case 2:\n                    // if connected communities downgrade to community only\n                    $event['Event']['distribution'] = '1';\n                    break;\n            }\n            if (isset($event['Event']['Attribute']) && !empty($event['Event']['Attribute'])) {\n                foreach ($event['Event']['Attribute'] as $key => $a) {\n                    switch ($a['distribution']) {\n                        case '1':\n                            $event['Event']['Attribute'][$key]['distribution'] = '0';\n                            break;\n                        case '2':\n                            $event['Event']['Attribute'][$key]['distribution'] = '1';\n                            break;\n                    }\n                }\n            }\n        }\n        // Distribution, set reporter of the event, being the admin that initiated the pull\n        $event['Event']['user_id'] = $user['id'];\n        return $event;\n    }\n\n    private function __checkIfEventSaveAble($event) {\n        if (!empty($event['Event']['Attribute'])) {\n            foreach ($event['Event']['Attribute'] as $attribute) {\n                if (empty($attribute['deleted'])) {\n                    return true;\n                }\n            }\n        }\n        if (!empty($event['Event']['Object'])) {\n            foreach ($event['Event']['Object'] as $object) {\n                if (!empty($object['deleted'])) {\n                    continue;\n                }\n                if (!empty($object['Attribute'])) {\n                    foreach ($object['Attribute'] as $attribute) {\n                        if (empty($attribute['deleted'])) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private function __checkIfPulledEventExistsAndAddOrUpdate($event, $eventId, &$successes, &$fails, $eventModel, $server, $user, $jobId)\n    {\n        // check if the event already exist (using the uuid)\n        $existingEvent = $eventModel->find('first', array('conditions' => array('Event.uuid' => $event['Event']['uuid'])));\n        $passAlong = $server['Server']['id'];\n        if (!$existingEvent) {\n            // add data for newly imported events\n            $result = $eventModel->_add($event, true, $user, $server['Server']['org_id'], $passAlong, true, $jobId);\n            if ($result) {\n                $successes[] = $eventId;\n            } else {\n                $fails[$eventId] = __('Failed (partially?) because of validation errors: ') . json_encode($eventModel->validationErrors, true);\n            }\n        } else {\n            if (!$existingEvent['Event']['locked'] && !$server['Server']['internal']) {\n                $fails[$eventId] = __('Blocked an edit to an event that was created locally. This can happen if a synchronised event that was created on this instance was modified by an administrator on the remote side.');\n            } else {\n                $result = $eventModel->_edit($event, $user, $existingEvent['Event']['id'], $jobId, $passAlong);\n                if ($result === true) {\n                    $successes[] = $eventId;\n                } elseif (isset($result['error'])) {\n                    $fails[$eventId] = $result['error'];\n                } else {\n                    $fails[$eventId] = json_encode($result);\n                }\n            }\n        }\n    }\n\n    private function __pullEvent($eventId, &$successes, &$fails, $eventModel, $server, $user, $jobId)\n    {\n        $event = $eventModel->downloadEventFromServer(\n                $eventId,\n                $server\n        );\n        ;\n        if (!empty($event)) {\n            if ($this->__checkIfEventIsBlockedBeforePull($event)) {\n                return false;\n            }\n            $event = $this->__updatePulledEventBeforeInsert($event, $server, $user);\n            if (!$this->__checkIfEventSaveAble($event)) {\n                $fails[$eventId] = __('Empty event detected.');\n            } else {\n                $this->__checkIfPulledEventExistsAndAddOrUpdate($event, $eventId, $successes, $fails, $eventModel, $server, $user, $jobId);\n            }\n        } else {\n            // error\n            $fails[$eventId] = __('failed downloading the event');\n        }\n        return true;\n    }\n\n    private function __handlePulledProposals($proposals, $events, $job, $jobId, $eventModel, $user)\n    {\n        $pulledProposals = array();\n        if (!empty($proposals)) {\n            $shadowAttribute = ClassRegistry::init('ShadowAttribute');\n            $shadowAttribute->recursive = -1;\n            $uuidEvents = array_flip($events);\n            foreach ($proposals as $k => &$proposal) {\n                $proposal = $proposal['ShadowAttribute'];\n                $oldsa = $shadowAttribute->findOldProposal($proposal);\n                $proposal['event_id'] = $uuidEvents[$proposal['event_uuid']];\n                if (!$oldsa || $oldsa['timestamp'] < $proposal['timestamp']) {\n                    if ($oldsa) {\n                        $shadowAttribute->delete($oldsa['id']);\n                    }\n                    if (!isset($pulledProposals[$proposal['event_id']])) {\n                        $pulledProposals[$proposal['event_id']] = 0;\n                    }\n                    $pulledProposals[$proposal['event_id']]++;\n                    if (isset($proposal['old_id'])) {\n                        $oldAttribute = $eventModel->Attribute->find('first', array('recursive' => -1, 'conditions' => array('uuid' => $proposal['uuid'])));\n                        if ($oldAttribute) {\n                            $proposal['old_id'] = $oldAttribute['Attribute']['id'];\n                        } else {\n                            $proposal['old_id'] = 0;\n                        }\n                    }\n                    // check if this is a proposal from an old MISP instance\n                    if (!isset($proposal['Org']) && isset($proposal['org']) && !empty($proposal['org'])) {\n                        $proposal['Org'] = $proposal['org'];\n                        $proposal['EventOrg'] = $proposal['event_org'];\n                    } elseif (!isset($proposal['Org']) && !isset($proposal['EventOrg'])) {\n                        continue;\n                    }\n                    $proposal['org_id'] = $this->Organisation->captureOrg($proposal['Org'], $user);\n                    $proposal['event_org_id'] = $this->Organisation->captureOrg($proposal['EventOrg'], $user);\n                    unset($proposal['Org']);\n                    unset($proposal['EventOrg']);\n                    $shadowAttribute->create();\n                    if (!isset($proposal['deleted']) || !$proposal['deleted']) {\n                        if ($shadowAttribute->save($proposal)) {\n                            $shadowAttribute->sendProposalAlertEmail($proposal['event_id']);\n                        }\n                    }\n                }\n                if ($jobId) {\n                    if ($k % 50 == 0) {\n                        $job->id =  $jobId;\n                        $job->saveField('progress', 50 * (($k + 1) / count($proposals)) + 50);\n                    }\n                }\n            }\n        }\n        return $pulledProposals;\n    }\n\n    public function pull($user, $id = null, $technique=false, $server, $jobId = false)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->read(null, $jobId);\n            $email = \"Scheduled job\";\n        } else {\n            $job = false;\n            $email = $user['email'];\n        }\n        $eventModel = ClassRegistry::init('Event');\n        $eventIds = array();\n        // if we are downloading a single event, don't fetch all proposals\n        $conditions = is_numeric($technique) ? array('Event.id' => $technique) : array();\n        $eventIds = $this->__getEventIdListBasedOnPullTechnique($technique, $server);\n        $server['Server']['version'] = $this->getRemoteVersion($id);\n        if (!empty($eventIds['error'])) {\n            $errors = array(\n                '1' => __('Not authorised. This is either due to an invalid auth key, or due to the sync user not having authentication permissions enabled on the remote server. Another reason could be an incorrect sync server setting.'),\n                '2' => $eventIds['error'][1],\n                '3' => __('Sorry, this is not yet implemented'),\n                '4' => __('Something went wrong while trying to pull')\n            );\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Server',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'error',\n                'user_id' => $user['id'],\n                'title' => 'Failed pull from ' . $server['Server']['url'] . ' initiated by ' . $email,\n                'change' => !empty($errors[$eventIds['error'][0]]) ? $errors[$eventIds['error'][0]] : __('Unknown issue.')\n            ));\n            return !empty($errors[$eventIds['error'][0]]) ? $errors[$eventIds['error'][0]] : __('Unknown issue.');\n        }\n        $successes = array();\n        $fails = array();\n        // now process the $eventIds to pull each of the events sequentially\n        if (!empty($eventIds)) {\n            // download each event\n            foreach ($eventIds as $k => $eventId) {\n                $this->__pullEvent($eventId, $successes, $fails, $eventModel, $server, $user, $jobId);\n                if ($jobId) {\n                    if ($k % 10 == 0) {\n                        $job->saveField('progress', 50 * (($k + 1) / count($eventIds)));\n                    }\n                }\n            }\n        }\n        if (!empty($fails)) {\n            $this->Log = ClassRegistry::init('Log');\n            foreach ($fails as $eventid => $message) {\n                $this->Log->create();\n                $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'pull',\n                    'user_id' => $user['id'],\n                    'title' => 'Failed to pull event #' . $eventid . '.',\n                    'change' => 'Reason:' . $message\n                ));\n            }\n        }\n        if ($jobId) {\n            $job->saveField('progress', 50);\n            $job->saveField('message', 'Pulling proposals.');\n        }\n        $pulledProposals = $eventModel->ShadowAttribute->pullProposals($user, $server);\n        if ($jobId) {\n            $job->saveField('progress', 75);\n            $job->saveField('message', 'Pulling sightings.');\n        }\n        $pulledSightings = $eventModel->Sighting->pullSightings($user, $server);\n        if ($jobId) {\n            $job->saveField('progress', 100);\n            $job->saveField('message', 'Pull completed.');\n            $job->saveField('status', 4);\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n            'org' => $user['Organisation']['name'],\n            'model' => 'Server',\n            'model_id' => $id,\n            'email' => $user['email'],\n            'action' => 'pull',\n            'user_id' => $user['id'],\n            'title' => 'Pull from ' . $server['Server']['url'] . ' initiated by ' . $email,\n            'change' => sprintf(\n                '%s events, %s proposals and %s sightings pulled or updated. %s events failed or didn\\'t need an update.',\n                count($successes),\n                $pulledProposals,\n                $pulledSightings,\n                count($fails)\n            )\n        ));\n        return array($successes, $fails, $pulledProposals, $pulledSightings);\n    }\n\n    public function filterRuleToParameter($filter_rules)\n    {\n        $final = array();\n        if (empty($filter_rules)) {\n            return $final;\n        }\n        $filter_rules = json_decode($filter_rules, true);\n        $url_params = array();\n        foreach ($filter_rules as $field => $rules) {\n            $temp = array();\n            if ($field === 'url_params') {\n                $url_params = json_decode($rules, true);\n            } else {\n                foreach ($rules as $operator => $elements) {\n                    foreach ($elements as $k => $element) {\n                        if ($operator === 'NOT') {\n                            $element = '!' . $element;\n                        }\n                        if (!empty($element)) {\n                            $temp[] = $element;\n                        }\n                    }\n                }\n                if (!empty($temp)) {\n                    $final[substr($field, 0, strlen($field) -1)] = $temp;\n                }\n            }\n        }\n        if (!empty($url_params)) {\n            $final = array_merge_recursive($final, $url_params);\n        }\n        return $final;\n    }\n\n    private function __orgRuleDowngrade($HttpSocket, $request, $server, $filter_rules)\n    {\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $version_response = $HttpSocket->get($uri, false, $request);\n            $body = $version_response->body;\n            $version_response = json_decode($body, true);\n            $version = $version_response['version'];\n        } catch (Exception $e) {\n            return $e->getMessage();\n        }\n        $version = explode('.', $version);\n        if ($version[0] <= 2 && $version[1] <= 4 && $version[0] <= 123) {\n            $filter_rules['org'] = implode('|', $filter_rules['org']);\n        }\n        return $filter_rules;\n    }\n\n    // Get an array of event_ids that are present on the remote server\n    public function getEventIdsFromServer($server, $all = false, $HttpSocket=null, $force_uuid=false, $ignoreFilterRules = false, $scope = 'events')\n    {\n        $url = $server['Server']['url'];\n        if ($ignoreFilterRules) {\n            $filter_rules = array();\n        } else {\n            $filter_rules = $this->filterRuleToParameter($server['Server']['pull_rules']);\n        }\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        if (!empty($filter_rules['org'])) {\n            $filter_rules = $this->__orgRuleDowngrade($HttpSocket, $request, $server, $filter_rules);\n        }\n        $uri = $url . '/events/index';\n        $filter_rules['minimal'] = 1;\n        $filter_rules['published'] = 1;\n        try {\n            $response = $HttpSocket->post($uri, json_encode($filter_rules), $request);\n            if ($response->isOk()) {\n                $eventArray = json_decode($response->body, true);\n                // correct $eventArray if just one event\n                if (is_array($eventArray) && isset($eventArray['id'])) {\n                    $tmp = $eventArray;\n                    unset($eventArray);\n                    $eventArray[0] = $tmp;\n                    unset($tmp);\n                }\n                $eventIds = array();\n                if ($all) {\n                    if (!empty($eventArray)) {\n                        if ($scope === 'sightings') {\n                            foreach ($eventArray as $event) {\n                                $localEvent = $this->Event->find('first', array(\n                                        'recursive' => -1,\n                                        'fields' => array('Event.uuid', 'Event.sighting_timestamp'),\n                                        'conditions' => array('Event.uuid' => $event['uuid'])\n                                    ));\n                                if (!empty($localEvent) && $localEvent['Event']['sighting_timestamp'] > $event['sighting_timestamp']) {\n                                    $eventIds[] = $event['uuid'];\n                                }\n                            }\n                        } else {\n                            foreach ($eventArray as $event) {\n                                $eventIds[] = $event['uuid'];\n                            }\n                        }\n                    }\n                } else {\n                    // multiple events, iterate over the array\n                    $this->Event = ClassRegistry::init('Event');\n                    $blacklisting = array();\n                    if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n                        $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n                        $blacklisting['EventBlacklist'] = array(\n                            'index_field' => 'uuid',\n                            'blacklist_field' => 'event_uuid'\n                        );\n                    }\n                    if (Configure::read('MISP.enableOrgBlacklisting') !== false) {\n                        $this->OrgBlacklist = ClassRegistry::init('OrgBlacklist');\n                        $blacklisting['OrgBlacklist'] = array(\n                            'index_field' => 'orgc_uuid',\n                            'blacklist_field' => 'org_uuid'\n                        );\n                    }\n                    foreach ($eventArray as $k => $event) {\n                        if (1 != $event['published']) {\n                            unset($eventArray[$k]); // do not keep non-published events\n                            continue;\n                        }\n                        foreach ($blacklisting as $type => $blacklist) {\n                            if (!empty($eventArray[$k][$blacklist['index_field']])) {\n                                $blacklist_hit = $this->{$type}->find('first', array(\n                                    'conditions' => array($blacklist['blacklist_field'] => $eventArray[$k][$blacklist['index_field']]),\n                                    'recursive' => -1,\n                                    'fields' => array($type . '.id')\n                                ));\n                                if (!empty($blacklist_hit)) {\n                                    unset($eventArray[$k]);\n                                    continue 2;\n                                }\n                            }\n                        }\n                    }\n                    $this->Event->removeOlder($eventArray, $scope);\n                    if (!empty($eventArray)) {\n                        foreach ($eventArray as $event) {\n                            if ($force_uuid) {\n                                $eventIds[] = $event['uuid'];\n                            } else {\n                                $eventIds[] = $event['uuid'];\n                            }\n                        }\n                    }\n                }\n                return $eventIds;\n            }\n            if ($response->code == '403') {\n                return 403;\n            }\n        } catch (SocketException $e) {\n            return $e->getMessage();\n        }\n\n        // error, so return error message, since that is handled and everything is expecting an array\n        return \"Error: got response code \" . $response->code;\n    }\n\n    public function push($id = null, $technique=false, $jobId = false, $HttpSocket, $user)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->read(null, $jobId);\n        }\n        $this->Event = ClassRegistry::init('Event');\n        $this->read(null, $id);\n        $url = $this->data['Server']['url'];\n        $push = $this->checkVersionCompatibility($id, $user);\n        if (is_array($push) && !$push['canPush'] && !$push['canSight']) {\n            $push = 'Remote instance is outdated or no permission to push.';\n        }\n        if (!is_array($push)) {\n            $message = sprintf('Push to server %s failed. Reason: %s', $id, $push);\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => 'Failed: Push to ' . $url . ' initiated by ' . $user['email'],\n                    'change' => $message\n            ));\n            if ($jobId) {\n                $job->id = $jobId;\n                $job->saveField('progress', 100);\n                $job->saveField('message', $message);\n                $job->saveField('status', 4);\n            }\n            return $push;\n        }\n\n        // sync events if user is capable\n        if ($push['canPush']) {\n            if (\"full\" == $technique) {\n                $eventid_conditions_key = 'Event.id >';\n                $eventid_conditions_value = 0;\n            } elseif (\"incremental\" == $technique) {\n                $eventid_conditions_key = 'Event.id >';\n                $eventid_conditions_value = $this->data['Server']['lastpushedid'];\n            } elseif (intval($technique) !== 0) {\n                $eventid_conditions_key = 'Event.id';\n                $eventid_conditions_value = intval($technique);\n            } else {\n                throw new InvalidArgumentException(\"Technique parameter must be 'full', 'incremental' or event ID.\");\n            }\n            $sgs = $this->Event->SharingGroup->find('all', array(\n                'recursive' => -1,\n                'contain' => array('Organisation', 'SharingGroupOrg' => array('Organisation'), 'SharingGroupServer')\n            ));\n            $sgIds = array();\n            foreach ($sgs as $k => $sg) {\n                if ($this->Event->SharingGroup->checkIfServerInSG($sg, $this->data)) {\n                    $sgIds[] = $sg['SharingGroup']['id'];\n                }\n            }\n            if (empty($sgIds)) {\n                $sgIds = array(-1);\n            }\n            $findParams = array(\n                    'conditions' => array(\n                            $eventid_conditions_key => $eventid_conditions_value,\n                            'Event.published' => 1,\n                            'Event.attribute_count >' => 0,\n                            'OR' => array(\n                                array(\n                                    'AND' => array(\n                                        array('Event.distribution >' => 0),\n                                        array('Event.distribution <' => 4),\n                                    ),\n                                ),\n                                array(\n                                    'AND' => array(\n                                        'Event.distribution' => 4,\n                                        'Event.sharing_group_id' => $sgIds\n                                    ),\n                                )\n                            )\n                    ), // array of conditions\n                    'recursive' => -1, //int\n                    'contain' => array('EventTag' => array('fields' => array('EventTag.tag_id'))),\n                    'fields' => array('Event.id', 'Event.timestamp', 'Event.sighting_timestamp', 'Event.uuid', 'Event.orgc_id'), // array of field names\n            );\n            $eventIds = $this->Event->find('all', $findParams);\n            $eventUUIDsFiltered = $this->getEventIdsForPush($id, $HttpSocket, $eventIds, $user);\n            if ($eventUUIDsFiltered === false || empty($eventUUIDsFiltered)) {\n                $pushFailed = true;\n            }\n            if (!empty($eventUUIDsFiltered)) {\n                $eventCount = count($eventUUIDsFiltered);\n                // now process the $eventIds to push each of the events sequentially\n                if (!empty($eventUUIDsFiltered)) {\n                    $successes = array();\n                    $fails = array();\n                    $lowestfailedid = null;\n                    foreach ($eventUUIDsFiltered as $k => $eventUuid) {\n                        $params = array();\n                        if (!empty($this->data['Server']['push_rules'])) {\n                            $push_rules = json_decode($this->data['Server']['push_rules'], true);\n                            if (!empty($push_rules['tags']['NOT'])) {\n                                $params['blockedAttributeTags'] = $push_rules['tags']['NOT'];\n                            }\n                        }\n                        $params = array_merge($params, array(\n                            'event_uuid' => $eventUuid,\n                            'includeAttachments' => true,\n                            'includeAllTags' => true,\n                            'deleted' => array(0,1),\n                            'excludeGalaxy' => 1\n                        ));\n                        $event = $this->Event->fetchEvent($user, $params);\n                        $event = $event[0];\n                        $event['Event']['locked'] = 1;\n                        $result = $this->Event->uploadEventToServer($event, $this->data, $HttpSocket);\n                        if ('Success' === $result) {\n                            $successes[] = $event['Event']['id'];\n                        } else {\n                            $fails[$event['Event']['id']] = $result;\n                        }\n                        if ($jobId && $k%10 == 0) {\n                            $job->saveField('progress', 100 * $k / $eventCount);\n                        }\n                    }\n                    if (count($fails) > 0) {\n                        // there are fails, take the lowest fail\n                        $lastpushedid = min(array_keys($fails));\n                    } else {\n                        // no fails, take the highest success\n                        $lastpushedid = max($successes);\n                    }\n                    // increment lastid based on the highest ID seen\n                    // Save the entire Server data instead of just a single field, so that the logger can be fed with the extra fields.\n                    $this->data['Server']['lastpushedid'] = $lastpushedid;\n                    $this->save($this->data);\n                }\n            }\n            $this->syncProposals($HttpSocket, $this->data, null, null, $this->Event);\n        }\n\n        if ($push['canPush'] || $push['canSight']) {\n            $sightingSuccesses = $this->syncSightings($HttpSocket, $this->data, $user, $this->Event);\n        } else {\n            $sightingSuccesses = array();\n        }\n\n        if (!isset($successes)) {\n            $successes = $sightingSuccesses;\n        } else {\n            $successes = array_merge($successes, $sightingSuccesses);\n        }\n        if (!isset($fails)) {\n            $fails = array();\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Server',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'push',\n                'user_id' => $user['id'],\n                'title' => 'Push to ' . $url . ' initiated by ' . $user['email'],\n                'change' => count($successes) . ' events pushed or updated. ' . count($fails) . ' events failed or didn\\'t need an update.'\n        ));\n        if ($jobId) {\n            $job->id = $jobId;\n            $job->saveField('progress', 100);\n            $job->saveField('message', 'Push to server ' . $id . ' complete.');\n            $job->saveField('status', 4);\n        } else {\n            return array($successes, $fails);\n        }\n        return true;\n    }\n\n    public function getEventIdsForPush($id, $HttpSocket, $eventIds, $user)\n    {\n        $server = $this->read(null, $id);\n        $this->Event = ClassRegistry::init('Event');\n\n        foreach ($eventIds as $k => $event) {\n            if (empty($this->eventFilterPushableServers($event, array($server)))) {\n                unset($eventIds[$k]);\n                continue;\n            }\n            unset($eventIds[$k]['Event']['id']);\n        }\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $data = json_encode($eventIds);\n        $uri = $server['Server']['url'] . '/events/filterEventIdsForPush';\n        $response = $HttpSocket->post($uri, $data, $request);\n        if ($response->code == '200') {\n            $uuidList = json_decode($response->body());\n        } else {\n            return false;\n        }\n        return $uuidList;\n    }\n\n    public function syncSightings($HttpSocket, $server, $user, $eventModel)\n    {\n        $successes = array();\n        if (!$server['Server']['push_sightings']) {\n            return $successes;\n        }\n        $this->Sighting = ClassRegistry::init('Sighting');\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $eventIds = $this->getEventIdsFromServer($server, true, $HttpSocket, false, true, 'sightings');\n        // now process the $eventIds to push each of the events sequentially\n        if (!empty($eventIds)) {\n            // check each event and push sightings when needed\n            foreach ($eventIds as $k => $eventId) {\n                $event = $eventModel->fetchEvent($user, $options = array('event_uuid' => $eventId, 'metadata' => true));\n                if (!empty($event)) {\n                    $event = $event[0];\n                    $event['Sighting'] = $this->Sighting->attachToEvent($event, $user);\n                    $result = $eventModel->uploadEventToServer($event, $server, $HttpSocket, 'sightings');\n                    if ($result === 'Success') {\n                        $successes[] = 'Sightings for event ' .  $event['Event']['id'];\n                    }\n                }\n            }\n        }\n        return $successes;\n    }\n\n    public function syncProposals($HttpSocket, $server, $sa_id = null, $event_id = null, $eventModel)\n    {\n        $saModel = ClassRegistry::init('ShadowAttribute');\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        if ($sa_id == null) {\n            if ($event_id == null) {\n                // event_id is null when we are doing a push\n                $ids = $this->getEventIdsFromServer($server, true, $HttpSocket, false, true);\n                // error return strings or ints or throw exceptions\n                if (!is_array($ids)) {\n                    return false;\n                }\n                $conditions = array('uuid' => $ids);\n            } else {\n                $conditions = array('id' => $event_id);\n                // event_id is not null when we are doing a publish\n            }\n            $events = $eventModel->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => 1,\n                    'contain' => 'ShadowAttribute',\n                    'fields' => array('Event.uuid')\n            ));\n\n            $fails = 0;\n            $success = 0;\n            $error_message = \"\";\n            foreach ($events as $k => &$event) {\n                if (!empty($event['ShadowAttribute'])) {\n                    foreach ($event['ShadowAttribute'] as &$sa) {\n                        $sa['data'] = $saModel->base64EncodeAttachment($sa);\n                        unset($sa['id']);\n                        unset($sa['value1']);\n                        unset($sa['value2']);\n                    }\n\n                    $data = json_encode($event['ShadowAttribute']);\n                    $request = $this->setupSyncRequest($server);\n                    $uri = $server['Server']['url'] . '/events/pushProposals/' . $event['Event']['uuid'];\n                    $response = $HttpSocket->post($uri, $data, $request);\n                    if ($response->code == '200') {\n                        $result = json_decode($response->body(), true);\n                        if ($result['success']) {\n                            $success += intval($result['counter']);\n                        } else {\n                            $fails++;\n                            if ($error_message == \"\") {\n                                $result['message'];\n                            } else {\n                                $error_message .= \" --- \" . $result['message'];\n                            }\n                        }\n                    } else {\n                        $fails++;\n                    }\n                }\n            }\n        } else {\n            // connect to checkuuid($uuid)\n            $request = $this->setupSyncRequest($server);\n            $uri = $server['Server']['url'] . '/events/checkuuid/' . $sa_id;\n            $response = $HttpSocket->get($uri, '', $request);\n            if ($response->code != '200') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function getCurrentServerSettings()\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $serverSettings = $this->serverSettings;\n        $moduleTypes = array('Enrichment', 'Import', 'Export', 'Cortex');\n        $serverSettings = $this->readModuleSettings($serverSettings, $moduleTypes);\n        return $serverSettings;\n    }\n\n    private function readModuleSettings($serverSettings, $moduleTypes)\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $orgs = $this->Organisation->find('list', array(\n            'conditions' => array(\n                'Organisation.local' => 1\n            ),\n            'fields' => array(\n                'Organisation.id', 'Organisation.name'\n            )\n        ));\n        $orgs = array_merge(array('Unrestricted'), $orgs);\n        foreach ($moduleTypes as $moduleType) {\n            if (Configure::read('Plugin.' . $moduleType . '_services_enable')) {\n                $results = $this->Module->getModuleSettings($moduleType);\n                foreach ($results as $module => $data) {\n                    foreach ($data as $result) {\n                        $setting = array('level' => 1, 'errorMessage' => '');\n                        if ($result['type'] == 'boolean') {\n                            $setting['test'] = 'testBool';\n                            $setting['type'] = 'boolean';\n                            $setting['description'] = __('Enable or disable the %s module.', $module);\n                            $setting['value'] = false;\n                        } elseif ($result['type'] == 'orgs') {\n                            $setting['description'] = __('Restrict the %s module to the given organisation.', $module);\n                            $setting['value'] = 0;\n                            $setting['test'] = 'testLocalOrg';\n                            $setting['type'] = 'numeric';\n                            $setting['optionsSource'] = 'LocalOrgs';\n                        } else {\n                            $setting['test'] = 'testForEmpty';\n                            $setting['type'] = 'string';\n                            $setting['description'] = __('Set this required module specific setting.');\n                            $setting['value'] = '';\n                        }\n                        $serverSettings['Plugin'][$moduleType . '_' . $module . '_' .  $result['name']] = $setting;\n                    }\n                }\n            }\n        }\n        return $serverSettings;\n    }\n\n    private function __serverSettingsRead($serverSettings, $currentSettings)\n    {\n        foreach ($serverSettings as $branchKey => &$branchValue) {\n            if (isset($branchValue['branch'])) {\n                foreach ($branchValue as $leafKey => &$leafValue) {\n                    if ($leafValue['level'] == 3 && !(isset($currentSettings[$branchKey][$leafKey]))) {\n                        continue;\n                    }\n                    $setting = null;\n                    if (isset($currentSettings[$branchKey][$leafKey])) {\n                        $setting = $currentSettings[$branchKey][$leafKey];\n                    }\n                    $leafValue = $this->__evaluateLeaf($leafValue, $leafKey, $setting);\n                    if ($leafKey != 'branch') {\n                        if ($branchKey == 'Plugin') {\n                            $pluginData = explode('_', $leafKey);\n                            $leafValue['subGroup'] = $pluginData[0];\n                        }\n                        if (strpos($branchKey, 'Secur') === 0) {\n                            $leafValue['tab'] = 'Security';\n                        } else {\n                            $leafValue['tab'] = $branchKey;\n                        }\n                        $finalSettingsUnsorted[$branchKey . '.' . $leafKey] = $leafValue;\n                    }\n                }\n            } else {\n                $setting = null;\n                if (isset($currentSettings[$branchKey])) {\n                    $setting = $currentSettings[$branchKey];\n                }\n                $branchValue = $this->__evaluateLeaf($branchValue, $branchKey, $setting);\n                $branchValue['tab'] = 'misc';\n                $finalSettingsUnsorted[$branchKey] = $branchValue;\n            }\n        }\n        return $finalSettingsUnsorted;\n    }\n\n    private function __sortFinalSettings($finalSettingsUnsorted)\n    {\n        $finalSettings = array();\n        for ($i = 0; $i < 4; $i++) {\n            foreach ($finalSettingsUnsorted as $k => $s) {\n                $s['setting'] = $k;\n                if ($s['level'] == $i) {\n                    $finalSettings[] = $s;\n                }\n            }\n        }\n        return $finalSettings;\n    }\n\n    public function serverSettingsRead($unsorted = false)\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $serverSettings = $this->getCurrentServerSettings();\n        $currentSettings = Configure::read();\n        if (Configure::read('Plugin.Enrichment_services_enable')) {\n            $this->readModuleSettings($serverSettings, array('Enrichment'));\n        }\n        $finalSettingsUnsorted = $this->__serverSettingsRead($serverSettings, $currentSettings);\n        foreach ($finalSettingsUnsorted as $key => $temp) {\n            if (in_array($temp['tab'], array_keys($this->__settingTabMergeRules))) {\n                $finalSettingsUnsorted[$key]['tab'] = $this->__settingTabMergeRules[$temp['tab']];\n            }\n        }\n        if ($unsorted) {\n            return $finalSettingsUnsorted;\n        }\n        return $this->__sortFinalSettings($finalSettingsUnsorted);\n    }\n\n    public function serverSettingReadSingle($settingObject, $settingName, $leafKey)\n    {\n        // invalidate config.php from php opcode cache\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n\n        $setting = Configure::read($settingName);\n        $result = $this->__evaluateLeaf($settingObject, $leafKey, $setting);\n        $result['setting'] = $settingName;\n        return $result;\n    }\n\n    private function __evaluateLeaf($leafValue, $leafKey, $setting)\n    {\n        if (isset($setting)) {\n            if (!empty($leafValue['test'])) {\n                $result = $this->{$leafValue['test']}($setting, empty($leafValue['errorMessage']) ? false : $leafValue['errorMessage']);\n                if ($result !== true) {\n                    $leafValue['error'] = 1;\n                    if ($result !== false) {\n                        $leafValue['errorMessage'] = $result;\n                    }\n                }\n            }\n            if ($setting !== '') {\n                $leafValue['value'] = $setting;\n            }\n        } else {\n            if ($leafKey != 'branch' && (!isset($leafValue['null']) || !$leafValue['null'])) {\n                $leafValue['error'] = 1;\n                $leafValue['errorMessage'] = __('Value not set.');\n            }\n        }\n        return $leafValue;\n    }\n\n    public function loadAvailableLanguages()\n    {\n        $dirs = glob(APP . 'Locale/*', GLOB_ONLYDIR);\n        $languages = array('eng' => 'eng');\n        foreach ($dirs as $k => $dir) {\n            $dir = str_replace(APP . 'Locale' . DS, '', $dir);\n            $languages[$dir] = $dir;\n        }\n        return $languages;\n    }\n\n    public function testLanguage($value)\n    {\n        $languages = $this->loadAvailableLanguages();\n        if (!isset($languages[$value])) {\n            return __('Invalid language.');\n        }\n        return true;\n    }\n\n    public function loadTagCollections()\n    {\n        $this->TagCollection = ClassRegistry::init('TagCollection');\n        $user = array('Role' => array('perm_site_admin' => 1));\n        $tagCollections = $this->TagCollection->fetchTagCollection($user);\n        $options = array(0 => 'None');\n        foreach ($tagCollections as $tagCollection) {\n            $options[intval($tagCollection['TagCollection']['id'])] = $tagCollection['TagCollection']['name'];\n        }\n        return $options;\n    }\n\n    public function testTagCollections($value)\n    {\n        $tag_collections = $this->loadTagCollections();\n        if (!isset($tag_collections[intval($value)])) {\n            return __('Invalid tag_collection.');\n        }\n        return true;\n    }\n\n    public function testForNumeric($value)\n    {\n        if (!is_numeric($value)) {\n            return __('This setting has to be a number.');\n        }\n        return true;\n    }\n\n    public function testForCookieTimeout($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < Configure::read('Session.timeout') && $value !== 0) {\n            return __('The cookie timeout is currently lower than the session timeout. This will invalidate the cookie before the session expires.');\n        }\n        return true;\n    }\n\n    public function testUuid($value)\n    {\n        if (empty($value) || !preg_match('/^\\{?[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}\\}?$/', $value)) {\n            return 'Invalid UUID.';\n        }\n        return true;\n    }\n\n    public function testForSessionDefaults($value)\n    {\n        if (empty($value) || !in_array($value, array('php', 'database', 'cake', 'cache'))) {\n            return 'Please choose a valid session handler. Recommended values: php or database. Alternate options are cake (cakephp file based sessions) and cache.';\n        } else {\n            return true;\n        }\n    }\n\n    public function testLocalOrg($value)\n    {\n        $this->Organisation = ClassRegistry::init('Organisation');\n        if ($value == 0) {\n            return 'No organisation selected';\n        }\n        $local_orgs = $this->Organisation->find('list', array(\n            'conditions' => array('local' => 1),\n            'recursive' => -1,\n            'fields' => array('Organisation.id', 'Organisation.name')\n        ));\n        if (in_array($value, array_keys($local_orgs))) {\n            return true;\n        }\n        return 'Invalid organisation';\n    }\n\n    public function testForEmpty($value)\n    {\n        $value = trim($value);\n        if ($value === '') {\n            return 'Value not set.';\n        }\n        return true;\n    }\n\n    public function testForPath($value)\n    {\n        if ($value === '') {\n            return true;\n        }\n        if (preg_match('@^\\/?(([a-z0-9_.]+[a-z0-9_.\\-.\\:]*[a-z0-9_.\\-.\\:]|[a-z0-9_.])+\\/?)+$@i', $value)) {\n            return true;\n        }\n        return 'Invalid characters in the path.';\n    }\n\n    public function beforeHookBinExec($setting, $value)\n    {\n        return $this->testForBinExec($value);\n    }\n\n    public function testForBinExec($value)\n    {\n        if (substr($value, 0, 7) === \"phar://\") {\n            return 'Phar protocol not allowed.';\n        }\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n        if ($value === '') {\n            return true;\n        }\n        if (is_executable($value)) {\n            if (finfo_file($finfo, $value) == \"application/x-executable\" || finfo_file($finfo, $value) == \"application/x-sharedlib\") {\n                finfo_close($finfo);\n                return true;\n            } else {\n                return 'Binary file not executable. It is of type: ' . finfo_file($finfo, $value);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    public function testForWritableDir($value)\n    {\n        if (substr($value, 0, 7) === \"phar://\") {\n            return 'Phar protocol not allowed.';\n        }\n        if (!is_dir($value)) {\n            return 'Not a valid directory.';\n        }\n        if (!is_writeable($value)) {\n            return 'Not a writable directory.';\n        }\n        return true;\n    }\n\n    public function testDebug($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if ($this->testForNumeric($value) !== true) {\n            return 'This setting has to be a number between 0 and 2, with 0 disabling debug mode.';\n        }\n        if ($value === 0) {\n            return true;\n        }\n        return 'This setting has to be set to 0 on production systems. Ignore this warning if this is not the case.';\n    }\n\n    public function testDebugAdmin($value)\n    {\n        if ($this->testBool($value) !== true) {\n            return 'This setting has to be either true or false.';\n        }\n        if (!$value) {\n            return true;\n        }\n        return 'Enabling debug is not recommended. Turn this on temporarily if you need to see a stack trace to debug an issue, but make sure this is not left on.';\n    }\n\n    public function testDate($date)\n    {\n        if ($this->testForEmpty($date) !== true) {\n            return $this->testForEmpty($date);\n        }\n        if (!strtotime($date)) {\n            return 'The date that you have entered is invalid. Expected: yyyy-mm-dd';\n        }\n        return true;\n    }\n\n\n    public function getHost()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-Host', $headers)) {\n            $host = $headers['X-Forwarded-Host'];\n        } else {\n            $host = $_SERVER['HTTP_HOST'];\n        }\n        return $host;\n    }\n\n    public function getProto()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-Proto', $headers)) {\n            $proto = $headers['X-Forwarded-Proto'];\n        } else {\n            $proto = ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') || $_SERVER['SERVER_PORT'] == 443) === true ? 'HTTPS' : 'HTTP';\n        }\n        return $proto;\n    }\n\n    public function testBaseURL($value)\n    {\n        // only run this check via the GUI, via the CLI it won't work\n        if (php_sapi_name() == 'cli') {\n            if (!empty($value) && !preg_match('/^http(s)?:\\/\\//i', $value)) {\n                return 'Invalid baseurl, please make sure that the protocol is set.';\n            }\n            return true;\n        }\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if ($value != strtolower($this->getProto()) . '://' . $this->getHost()) {\n            return 'Invalid baseurl, it has to be in the \"https://FQDN\" format.';\n        }\n        return true;\n    }\n\n    public function testURL($value)\n    {\n        // only run this check via the GUI, via the CLI it won't work\n        if (!empty($value) && !preg_match('/^http(s)?:\\/\\//i', $value)) {\n            return 'Invalid baseurl, please make sure that the protocol is set.';\n        }\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        return true;\n    }\n\n    public function testDisableEmail($value)\n    {\n        if (isset($value) && $value) {\n            return 'E-mailing is blocked.';\n        }\n        return true;\n    }\n\n    public function testDisableCache($value)\n    {\n        if (isset($value) && $value) {\n            return 'Export caches are disabled.';\n        }\n        return true;\n    }\n\n    public function testLive($value)\n    {\n        if ($this->testBool($value) !== true) {\n            return $this->testBool($value);\n        }\n        if (!$value) {\n            return 'MISP disabled.';\n        }\n        return true;\n    }\n\n    public function testBool($value, $errorMessage = false)\n    {\n        if ($value !== true && $value !== false) {\n            if ($errorMessage) {\n                return $errorMessage;\n            }\n            return 'Value is not a boolean, make sure that you convert \\'true\\' to true for example.';\n        }\n        return true;\n    }\n\n    public function testBoolFalse($value, $errorMessage = false)\n    {\n        if ($this->testBool($value, $errorMessage) !== true) {\n            return $this->testBool($value, $errorMessage);\n        }\n        if ($value !== false) {\n            if ($errorMessage) {\n                return $errorMessage;\n            }\n            return 'It is highly recommended that this setting is disabled. Make sure you understand the impact of having this setting turned on.';\n        } else {\n            return true;\n        }\n    }\n\n    public function testParanoidSkipDb($value)\n    {\n        if (!empty(Configure::read('MISP.log_paranoid')) && empty($value)) {\n            return 'Perhaps consider skipping the database when using paranoid mode. A great number of entries will be added to your log database otherwise that will lead to performance degradation.';\n        }\n        return true;\n    }\n\n    public function testSalt($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (strlen($value) < 32) {\n            return 'The salt has to be an at least 32 byte long string.';\n        }\n        if ($value == \"Rooraenietu8Eeyo<Qu2eeNfterd-dd+\") {\n            return 'This is the default salt shipped with the application and is therefore unsecure.';\n        }\n        return true;\n    }\n\n    public function testForTermsFile($value)\n    {\n        return $this->__testForFile($value, APP . 'files' . DS . 'terms');\n    }\n\n    public function testForCABundle($value)\n    {\n        $file = new File($value);\n        if (!$file->exists()) {\n            return __('Invalid file path or file not accessible.');\n        }\n        if ($file->ext() !== 'pem') {\n            return __('File has to be in .pem format.');\n        }\n    }\n\n    public function testForStyleFile($value)\n    {\n        if (empty($value)) {\n            return true;\n        }\n        return $this->__testForFile($value, APP . 'webroot' . DS . 'css');\n    }\n\n    public function testForCustomImage($value)\n    {\n        return $this->__testForFile($value, APP . 'webroot' . DS . 'img' . DS . 'custom');\n    }\n\n    public function testPasswordLength($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0) {\n            return 'Length cannot be negative, set a positive integer or 0 (to choose the default option).';\n        }\n        return true;\n    }\n\n    public function testForPortNumber($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 21 || $value > 65535) {\n            return 'Make sure that you pick a valid port number.';\n        }\n        return true;\n    }\n\n    public function testForZMQPortNumber($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 49152 || $value > 65535) {\n            return 'It is recommended that you pick a port number in the dynamic range (49152-65535). However, if you have a valid reason to use a different port, ignore this message.';\n        }\n        return true;\n    }\n\n    public function testPasswordRegex($value)\n    {\n        if (!empty($value) && @preg_match($value, 'test') === false) {\n            return 'Invalid regex.';\n        }\n        return true;\n    }\n\n    public function testPasswordResetText($value)\n    {\n        if (strpos($value, '$password') === false || strpos($value, '$username') === false || strpos($value, '$misp') === false) {\n            return 'The text served to the users must include the following replacement strings: \"$username\", \"$password\", \"$misp\"';\n        }\n        return true;\n    }\n\n    public function testForGPGBinary($value)\n    {\n        if (empty($value)) {\n            $value = $this->serverSettings['GnuPG']['binary']['value'];\n        }\n        if (file_exists($value)) {\n            return true;\n        }\n        return 'Could not find the GnuPG executable at the defined location.';\n    }\n\n    public function testForRPZDuration($value)\n    {\n        if (($this->testForNumeric($value) !== true && preg_match('/^[0-9]*[mhdw]$/i', $value)) || $value >= 0) {\n            return true;\n        } else {\n            return 'Negative seconds found. The following formats are accepted: seconds (positive integer), or duration (positive integer) followed by a letter denoting scale (such as m, h, d, w for minutes, hours, days, weeks)';\n        }\n    }\n\n    public function testForRPZBehaviour($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0 || $value > 5) {\n            return 'Invalid setting, valid range is 0-5 (0 = DROP, 1 = NXDOMAIN, 2 = NODATA, 3 = walled garden, 4 = PASSTHRU, 5 = TCP-only.';\n        }\n        return true;\n    }\n\n    public function testForSightingVisibility($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0 || $value > 2) {\n            return 'Invalid setting, valid range is 0-2 (0 = Event owner, 1 = Sighting reporters, 2 = Everyone.';\n        }\n        return true;\n    }\n\n    public function sightingsBeforeHook($setting, $value)\n    {\n        if ($value == true) {\n            $this->updateDatabase('addSightings');\n        }\n        return true;\n    }\n\n    public function testForRPZSerial($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!preg_match('/^((\\$date(\\d*)|\\$time|\\d*))$/', $value)) {\n            return 'Invalid format.';\n        }\n        return true;\n    }\n\n    public function testForRPZNS($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!preg_match('/^\\w+(\\.\\w+)*(\\.?) \\w+(\\.\\w+)*$/', $value)) {\n            return 'Invalid format.';\n        }\n        return true;\n    }\n\n    public function zmqAfterHook($setting, $value)\n    {\n        $pubSubTool = $this->getPubSubTool();\n        // If we are trying to change the enable setting to false, we don't need to test anything, just kill the server and return true.\n        if ($setting == 'Plugin.ZeroMQ_enable') {\n            if ($value == false || $value == 0) {\n                $pubSubTool->killService();\n                return true;\n            }\n        } elseif (!Configure::read('Plugin.ZeroMQ_enable')) {\n            // If we are changing any other ZeroMQ settings but the feature is disabled, don't reload the service\n            return true;\n        }\n        $pubSubTool->reloadServer();\n        return true;\n    }\n\n    public function disableCacheAfterHook($setting, $value)\n    {\n        if ($value) {\n            $this->Event = ClassRegistry::init('Event');\n            App::uses('Folder', 'Utility');\n            App::uses('File', 'Utility');\n            // delete all cache files\n            foreach ($this->Event->export_types as $type => $settings) {\n                $dir = new Folder(APP . 'tmp/cached_exports/' . $type);\n                // No caches created for this type of export, move on\n                if ($dir == null) {\n                    continue;\n                }\n                $files = $dir->find('.*' . $settings['extension']);\n                foreach ($files as $file) {\n                    $file = new File($dir->pwd() . DS . $file);\n                    $file->delete();\n                    $file->close();\n                }\n            }\n        }\n        return true;\n    }\n\n    public function correlationAfterHook($setting, $value)\n    {\n        if (!Configure::read('MISP.background_jobs')) {\n            $this->Attribute = ClassRegistry::init('Attribute');\n            if ($value) {\n                $k = $this->Attribute->purgeCorrelations();\n            } else {\n                $k = $this->Attribute->generateCorrelation();\n            }\n        } else {\n            if ($value == true) {\n                $jobType = 'jobPurgeCorrelation';\n                $jobTypeText = 'purge correlations';\n            } else {\n                $jobType = 'jobGenerateCorrelation';\n                $jobTypeText = 'generate correlation';\n            }\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => $jobTypeText,\n                    'job_input' => 'All attributes',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => 'ADMIN',\n                    'message' => 'Job created.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array($jobType, $jobId),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n        }\n    }\n\n    public function ipLogBeforeHook($setting, $value)\n    {\n        if ($setting == 'MISP.log_client_ip') {\n            if ($value == true) {\n                $this->updateDatabase('addIPLogging');\n            }\n        }\n        return true;\n    }\n\n    public function customAuthBeforeHook($setting, $value)\n    {\n        if (!empty($value)) {\n            $this->updateDatabase('addCustomAuth');\n        }\n        $this->cleanCacheFiles();\n        return true;\n    }\n\n    // never come here directly, always go through a secondary check like testForTermsFile in order to also pass along the expected file path\n    private function __testForFile($value, $path)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!$this->checkFilename($value)) {\n            return 'Invalid filename.';\n        }\n        $file = $path . DS . $value;\n        if (!file_exists($file)) {\n            return 'Could not find the specified file. Make sure that it is uploaded into the following directory: ' . $path;\n        }\n        return true;\n    }\n\n    private function __serverSettingNormaliseValue($data, $value, $setting)\n    {\n        if (!empty($data['type'])) {\n            if ($data['type'] == 'boolean') {\n                $value = $value ? true : false;\n            } elseif ($data['type'] == 'numeric') {\n                $value = intval($value);\n            }\n        }\n        return $value;\n    }\n\n    public function getSettingData($setting_name)\n    {\n        // invalidate config.php from php opcode cache\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n        if (strpos($setting_name, 'Plugin.Enrichment') !== false || strpos($setting_name, 'Plugin.Import') !== false || strpos($setting_name, 'Plugin.Export') !== false || strpos($setting_name, 'Plugin.Cortex') !== false) {\n            $serverSettings = $this->getCurrentServerSettings();\n        } else {\n            $serverSettings = $this->serverSettings;\n        }\n        $relevantSettings = (array_intersect_key(Configure::read(), $serverSettings));\n        $setting = false;\n        foreach ($serverSettings as $k => $s) {\n            if (isset($s['branch'])) {\n                foreach ($s as $ek => $es) {\n                    if ($ek != 'branch') {\n                        if ($setting_name == $k . '.' . $ek) {\n                            $setting = $es;\n                            continue 2;\n                        }\n                    }\n                }\n            } else {\n                if ($setting_name == $k) {\n                    $setting = $s;\n                    continue;\n                }\n            }\n        }\n        if (!empty($setting)) {\n            $setting['name'] = $setting_name;\n        }\n        return $setting;\n    }\n\n    public function serverSettingsEditValue($user, $setting, $value, $forceSave = false)\n    {\n        if (isset($setting['beforeHook'])) {\n            $beforeResult = call_user_func_array(array($this, $setting['beforeHook']), array($setting['name'], $value));\n            if ($beforeResult !== true) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $result = $this->Log->save(array(\n                        'org' => $user['Organisation']['name'],\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => $user['email'],\n                        'action' => 'serverSettingsEdit',\n                        'user_id' => $user['id'],\n                        'title' => 'Server setting issue',\n                        'change' => 'There was an issue witch changing ' . $setting['name'] . ' to ' . $value  . '. The error message returned is: ' . $beforeResult . 'No changes were made.',\n                ));\n                return $beforeResult;\n            }\n        }\n        $value = trim($value);\n        if ($setting['type'] == 'boolean') {\n            $value = ($value ? true : false);\n        }\n        if ($setting['type'] == 'numeric') {\n            $value = intval($value);\n        }\n        if (!empty($setting['test'])) {\n            $testResult = $this->{$setting['test']}($value);\n        } else {\n            $testResult = true;  # No test defined for this setting: cannot fail\n        }\n        if (!$forceSave && $testResult !== true) {\n            if ($testResult === false) {\n                $errorMessage = $setting['errorMessage'];\n            } else {\n                $errorMessage = $testResult;\n            }\n            return $errorMessage;\n        } else {\n            $oldValue = Configure::read($setting['name']);\n            $settingSaveResult = $this->serverSettingsSaveValue($setting['name'], $value);\n\n            if ($settingSaveResult) {\n                $this->Log = ClassRegistry::init('Log');\n                $change = array($setting['name'] => array($oldValue, $value));\n                $this->Log->createLogEntry($user, 'serverSettingsEdit', 'Server', 0, 'Server setting changed', $change);\n\n                // execute after hook\n                if (isset($setting['afterHook'])) {\n                    $afterResult = call_user_func_array(array($this, $setting['afterHook']), array($setting['name'], $value));\n                    if ($afterResult !== true) {\n                        $change = 'There was an issue after setting a new setting. The error message returned is: ' . $afterResult;\n                        $this->Log->createLogEntry($user, 'serverSettingsEdit', 'Server', 0, 'Server setting issue', $change);\n                        return $afterResult;\n                    }\n                }\n                return true;\n            } else {\n                return __('Something went wrong. MISP tried to save a malformed config file. Setting change reverted.');\n            }\n        }\n    }\n\n    public function serverSettingsSaveValue($setting, $value)\n    {\n        // validate if current config.php is intact:\n        $current = file_get_contents(APP . 'Config' . DS . 'config.php');\n        $current = trim($current);\n        if (strlen($current) < 20) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Tried to modify server settings but current config is broken.',\n            ));\n            return false;\n        }\n        copy(APP . 'Config' . DS . 'config.php', APP . 'Config' . DS . 'config.php.bk');\n        $settingObject = $this->getCurrentServerSettings();\n        foreach ($settingObject as $branchName => $branch) {\n            if (!isset($branch['level'])) {\n                foreach ($branch as $settingName => $settingObject) {\n                    if ($setting == $branchName . '.' . $settingName) {\n                        $value = $this->__serverSettingNormaliseValue($settingObject, $value, $setting);\n                    }\n                }\n            } else {\n                if ($setting == $branchName) {\n                    $value = $this->__serverSettingNormaliseValue($branch, $value, $setting);\n                }\n            }\n        }\n        Configure::write($setting, $value);\n        $arrayFix = array(\n            'Security.auth',\n            'ApacheSecureAuth.ldapFilter'\n        );\n        foreach ($arrayFix as $settingFix) {\n            if (Configure::read($settingFix) && is_array(Configure::read($settingFix)) && !empty(Configure::read($settingFix))) {\n                $arrayElements = array();\n                foreach (Configure::read($settingFix) as $array) {\n                    if (!in_array($array, $arrayElements)) {\n                        $arrayElements[] = $array;\n                    }\n                }\n                Configure::write($settingFix, $arrayElements);\n            }\n        }\n        $settingsToSave = array(\n            'debug', 'MISP', 'GnuPG', 'SMIME', 'Proxy', 'SecureAuth',\n            'Security', 'Session.defaults', 'Session.timeout', 'Session.cookieTimeout',\n            'Session.autoRegenerate', 'Session.checkAgent', 'site_admin_debug',\n            'Plugin', 'CertAuth', 'ApacheShibbAuth', 'ApacheSecureAuth'\n        );\n        $settingsArray = array();\n        foreach ($settingsToSave as $setting) {\n            $settingsArray[$setting] = Configure::read($setting);\n        }\n        $settingsString = var_export($settingsArray, true);\n        $settingsString = '<?php' . \"\\n\" . '$config = ' . $settingsString . ';';\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n        if (empty(Configure::read('MISP.server_settings_skip_backup_rotate'))) {\n            $randomFilename = $this->generateRandomFileName();\n            // To protect us from 2 admin users having a concurent file write to the config file, solar flares and the bogeyman\n            file_put_contents(APP . 'Config' . DS . $randomFilename, $settingsString);\n            rename(APP . 'Config' . DS . $randomFilename, APP . 'Config' . DS . 'config.php');\n            $config_saved = file_get_contents(APP . 'Config' . DS . 'config.php');\n            // if the saved config file is empty, restore the backup.\n            if (strlen($config_saved) < 20) {\n                copy(APP . 'Config' . DS . 'config.php.bk', APP . 'Config' . DS . 'config.php');\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: Something went wrong saving the config file, reverted to backup file.',\n                ));\n                return false;\n            }\n        } else {\n            file_put_contents(APP . 'Config' . DS . 'config.php', $settingsString);\n        }\n        return true;\n    }\n\n    public function checkVersion($newest)\n    {\n        $version_array = $this->checkMISPVersion();\n        $current = 'v' . $version_array['major'] . '.' . $version_array['minor'] . '.' . $version_array['hotfix'];\n        $newest_array = $this->__dissectVersion($newest);\n        $upToDate = $this->__compareVersions(array($version_array['major'], $version_array['minor'], $version_array['hotfix']), $newest_array, 0);\n        return array('current' => $current, 'newest' => $newest, 'upToDate' => $upToDate);\n    }\n\n    private function __dissectVersion($version)\n    {\n        $version = substr($version, 1);\n        return explode('.', $version);\n    }\n\n    private function __compareVersions($current, $newest, $i)\n    {\n        if ($current[$i] == $newest[$i]) {\n            if ($i < 2) {\n                return $this->__compareVersions($current, $newest, $i+1);\n            } else {\n                return 'same';\n            }\n        } elseif ($current[$i] < $newest[$i]) {\n            return 'older';\n        } else {\n            return 'newer';\n        }\n    }\n\n    public function getFileRules()\n    {\n        $validItems = array(\n                'orgs' => array(\n                        'name' => __('Organisation logos'),\n                        'description' => __('The logo used by an organisation on the event index, event view, discussions, proposals, etc. Make sure that the filename is in the org.png format, where org is the case-sensitive organisation name.'),\n                        'expected' => array(),\n                        'valid_format' => __('48x48 pixel .png files'),\n                        'path' => APP . 'webroot' . DS . 'img' . DS . 'orgs',\n                        'regex' => '.*\\.(png|PNG)$',\n                        'regex_error' => __('Filename must be in the following format: *.png'),\n                        'files' => array(),\n                ),\n                'img' => array(\n                        'name' => __('Additional image files'),\n                        'description' => __('Image files uploaded into this directory can be used for various purposes, such as for the login page logos'),\n                        'expected' => array(\n                                'MISP.footer_logo' => Configure::read('MISP.footer_logo'),\n                                'MISP.home_logo' => Configure::read('MISP.home_logo'),\n                                'MISP.welcome_logo' => Configure::read('MISP.welcome_logo'),\n                                'MISP.welcome_logo2' => Configure::read('MISP.welcome_logo2'),\n                        ),\n                        'valid_format' => __('text/html if served inline, anything that conveys the terms of use if served as download'),\n                        'path' => APP . 'webroot' . DS . 'img' . DS . 'custom',\n                        'regex' => '.*\\.(png|PNG)$',\n                        'regex_error' => __('Filename must be in the following format: *.png'),\n                        'files' => array(),\n                ),\n        );\n        return $validItems;\n    }\n\n    public function grabFiles()\n    {\n        $validItems = $this->getFileRules();\n        App::uses('Folder', 'Utility');\n        App::uses('File', 'Utility');\n        foreach ($validItems as $k => $item) {\n            $dir = new Folder($item['path']);\n            $files = $dir->find($item['regex'], true);\n            foreach ($files as $file) {\n                $f = new File($item['path'] . DS . $file);\n                $validItems[$k]['files'][] = array('filename' => $file, 'filesize' => $f->size(), 'read' => $f->readable(), 'write' => $f->writable(), 'execute' => $f->executable());\n            }\n        }\n        return $validItems;\n    }\n\n    public function runConnectionTest($id)\n    {\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server, null, 5);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $response = $HttpSocket->get($uri, false, $request);\n        } catch (Exception $e) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Connection test failed. Reason: ' . json_encode($e->getMessage()),\n            ));\n            return array('status' => 2);\n        }\n        if ($response->isOk()) {\n            return array('status' => 1, 'message' => $response->body());\n        } else {\n            if ($response->code == '403') {\n                return array('status' => 4);\n            }\n            if ($response->code == '405') {\n                try {\n                    $responseText = json_decode($response->body, true)['message'];\n                } catch (Exception $e) {\n                    return array('status' => 3);\n                }\n                if ($responseText === 'Your user account is expecting a password change, please log in via the web interface and change it before proceeding.') {\n                    return array('status' => 5);\n                } elseif ($responseText === 'You have not accepted the terms of use yet, please log in via the web interface and accept them.') {\n                    return array('status' => 6);\n                }\n            }\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Connection test failed. Returned data is in the change field.',\n                    'change' => sprintf(\n                        'response () => (%s), response-code () => (%s)',\n                        $response->body,\n                        $response->code\n                    )\n            ));\n            return array('status' => 3);\n        }\n    }\n\n    public function runPOSTtest($id)\n    {\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        if (empty($server)) {\n            throw new InvalidArgumentException(__('Invalid server.'));\n        }\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $testFile = file_get_contents(APP . 'files/scripts/test_payload.txt');\n        $uri = $server['Server']['url'] . '/servers/postTest';\n        $this->Log = ClassRegistry::init('Log');\n        try {\n            $response = $HttpSocket->post($uri, json_encode(array('testString' => $testFile)), $request);\n            $rawBody = $response->body;\n            $response = json_decode($response, true);\n        } catch (Exception $e) {\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: POST connection test failed. Reason: ' . json_encode($e->getMessage()),\n            ));\n            return 8;\n        }\n        if (!isset($response['body']['testString']) || $response['body']['testString'] !== $testFile) {\n            $responseString = '';\n            if (!empty($repsonse['body']['testString'])) {\n                $responseString = $response['body']['testString'];\n            } else if (!empty($rawBody)){\n                $responseString = $rawBody;\n            } else {\n                $responseString = __('Response was empty.');\n            }\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: POST connection test failed due to the message body not containing the expected data. Response: ' . PHP_EOL . PHP_EOL . $responseString,\n            ));\n            return 9;\n        }\n        $headers = array('Accept', 'Content-type');\n        foreach ($headers as $header) {\n            if (!isset($response['headers'][$header]) || $response['headers'][$header] != 'application/json') {\n                $responseHeader = isset($response['headers'][$header]) ? $response['headers'][$header] : 'Header was not set.';\n                $this->Log->create();\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: POST connection test failed due to a header not matching the expected value. Expected: \"application/json\", received \"' . $responseHeader,\n                ));\n                return 10;\n            }\n        }\n        return 1;\n    }\n\n    public function checkVersionCompatibility($id, $user = array(), $HttpSocket = false)\n    {\n        // for event publishing when we don't have a user.\n        if (empty($user)) {\n            $user = array('Organisation' => array('name' => 'SYSTEM'), 'email' => 'SYSTEM', 'id' => 0);\n        }\n        $localVersion = $this->checkMISPVersion();\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $response = $HttpSocket->get($uri, '', $request);\n        } catch (Exception $e) {\n            $error = $e->getMessage();\n        }\n        if (!isset($response) || $response->code != '200') {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            if (isset($response->code)) {\n                $title = 'Error: Connection to the server has failed.' . (isset($response->code) ? ' Returned response code: ' . $response->code : '');\n            } else {\n                $title = 'Error: Connection to the server has failed. The returned exception\\'s error message was: ' . $e->getMessage();\n            }\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => $title\n            ));\n            return $title;\n        }\n        $remoteVersion = json_decode($response->body, true);\n        $canPush = isset($remoteVersion['perm_sync']) ? $remoteVersion['perm_sync'] : false;\n        $canSight = isset($remoteVersion['perm_sighting']) ? $remoteVersion['perm_sighting'] : false;\n        $remoteVersion = explode('.', $remoteVersion['version']);\n        if (!isset($remoteVersion[0])) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $message = __('Error: Server didn\\'t send the expected response. This may be because the remote server version is outdated.');\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => $message,\n            ));\n            return $message;\n        }\n        $response = false;\n        $success = false;\n        $issueLevel = \"warning\";\n        if ($localVersion['major'] > $remoteVersion[0]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance's MISP version is behind by a major version.\";\n        }\n        if ($response === false && $localVersion['major'] < $remoteVersion[0]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance is at least a full major version ahead - make sure you update your MISP instance!\";\n        }\n        if ($response === false && $localVersion['minor'] > $remoteVersion[1]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance's MISP version is behind by a minor version.\";\n        }\n        if ($response === false && $localVersion['minor'] < $remoteVersion[1]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance is at least a full minor version ahead - make sure you update your MISP instance!\";\n        }\n\n        // if we haven't set a message yet, we're good to go. We are only behind by a hotfix version\n        if ($response === false) {\n            $success = true;\n        } else {\n            $issueLevel = \"error\";\n        }\n        if ($response === false && $localVersion['hotfix'] > $remoteVersion[2]) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but the remote instance is a few hotfixes behind.\";\n        }\n        if ($response === false && $localVersion['hotfix'] < $remoteVersion[2]) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but the remote instance is a few hotfixes ahead. Make sure you keep your instance up to date!\";\n        }\n        if (empty($response) && $remoteVersion[2] < 111) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but version 2.4.111 is required in order to be able to pull proposals from the remote side.\";\n        }\n\n        if ($response !== false) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => $issueLevel,\n                    'user_id' => $user['id'],\n                    'title' => ucfirst($issueLevel) . ': ' . $response,\n            ));\n        }\n        return array('success' => $success, 'response' => $response, 'canPush' => $canPush, 'canSight' => $canSight, 'version' => $remoteVersion);\n    }\n\n    public function isJson($string)\n    {\n        return (json_last_error() == JSON_ERROR_NONE);\n    }\n\n    public function captureServer($server, $user)\n    {\n        if (isset($server[0])) {\n            $server = $server[0];\n        }\n        if ($server['url'] == Configure::read('MISP.baseurl')) {\n            return 0;\n        }\n        $existingServer = $this->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('url' => $server['url'])\n        ));\n        // unlike with other capture methods, if we find a server that we don't know\n        // we don't want to save it.\n        if (empty($existingServer)) {\n            return false;\n        }\n        return $existingServer[$this->alias]['id'];\n    }\n\n    public function dbSpaceUsage()\n    {\n        $dataSource = $this->getDataSource()->config['datasource'];\n        if ($dataSource == 'Database/Mysql') {\n            $sql = sprintf(\n                'select TABLE_NAME, sum((DATA_LENGTH+INDEX_LENGTH)/1024/1024) AS used, sum(DATA_FREE)/1024/1024 AS reclaimable from information_schema.tables where table_schema = %s group by TABLE_NAME;',\n                \"'\" . $this->getDataSource()->config['database'] . \"'\"\n            );\n            $sqlResult = $this->query($sql);\n            $result = array();\n            foreach ($sqlResult as $temp) {\n                foreach ($temp[0] as $k => $v) {\n                    $temp[0][$k] = round($v, 2) . 'MB';\n                }\n                $temp[0]['table'] = $temp['tables']['TABLE_NAME'];\n                $result[] = $temp[0];\n            }\n            return $result;\n        }\n        else if ($dataSource == 'Database/Postgres') {\n            $sql = sprintf(\n                'select TABLE_NAME as table, pg_total_relation_size(%s||%s||TABLE_NAME) as used from information_schema.tables where table_schema = %s group by TABLE_NAME;',\n                \"'\" . $this->getDataSource()->config['database'] . \"'\",\n                \"'.'\",\n                \"'\" . $this->getDataSource()->config['database'] . \"'\"\n            );\n            $sqlResult = $this->query($sql);\n            $result = array();\n            foreach ($sqlResult as $temp) {\n                foreach ($temp[0] as $k => $v) {\n                    if ($k == \"table\") {\n                        continue;\n                    }\n                    $temp[0][$k] = round($v / 1024 / 1024, 2) . 'MB';\n                }\n                $temp[0]['reclaimable'] = '0MB';\n                $result[] = $temp[0];\n            }\n            return $result;\n        }\n    }\n\n    public function redisInfo()\n    {\n        $output = array(\n            'extensionVersion' => phpversion('redis'),\n            'connection' => false,\n        );\n\n        try {\n            $redis = $this->setupRedisWithException();\n            $output['connection'] = true;\n            $output = array_merge($output, $redis->info());\n        } catch (Exception $e) {\n            $output['connection_error'] = $e->getMessage();\n        }\n\n        return $output;\n    }\n\n    public function dbSchemaDiagnostic()\n    {\n        $actualDbVersion = $this->AdminSetting->find('first', array(\n            'conditions' => array('setting' => 'db_version')\n        ))['AdminSetting']['value'];\n        $dataSource = $this->getDataSource()->config['datasource'];\n        $schemaDiagnostic = array(\n            'dataSource' => $dataSource,\n            'actual_db_version' => $actualDbVersion,\n            'checked_table_column' => array(),\n            'diagnostic' => array(),\n            'diagnostic_index' => array(),\n            'expected_db_version' => '?',\n            'error' => '',\n            'update_locked' => $this->isUpdateLocked(),\n            'remaining_lock_time' => $this->getLockRemainingTime(),\n            'update_fail_number_reached' => $this->UpdateFailNumberReached(),\n            'indexes' => array()\n        );\n        if ($dataSource == 'Database/Mysql') {\n            $dbActualSchema = $this->getActualDBSchema();\n            $dbExpectedSchema = $this->getExpectedDBSchema();\n            if ($dbExpectedSchema !== false) {\n                $db_schema_comparison = $this->compareDBSchema($dbActualSchema['schema'], $dbExpectedSchema['schema']);\n                $db_indexes_comparison = $this->compareDBIndexes($dbActualSchema['indexes'], $dbExpectedSchema['indexes'], $dbExpectedSchema);\n                $schemaDiagnostic['checked_table_column'] = $dbActualSchema['column'];\n                $schemaDiagnostic['diagnostic'] = $db_schema_comparison;\n                $schemaDiagnostic['diagnostic_index'] = $db_indexes_comparison;\n                $schemaDiagnostic['expected_db_version'] = $dbExpectedSchema['db_version'];\n                foreach($dbActualSchema['schema'] as $tableName => $tableMetas) {\n                    foreach($tableMetas as $tableMeta) {\n                        $schemaDiagnostic['columnPerTable'][$tableName][] = $tableMeta['column_name'];\n                    }\n                }\n                $schemaDiagnostic['indexes'] = $dbActualSchema['indexes'];\n            } else {\n                $schemaDiagnostic['error'] = sprintf('Diagnostic not available as the expected schema file could not be loaded');\n            }\n        } else {\n            $schemaDiagnostic['error'] = sprintf('Diagnostic not available for DataSource `%s`', $dataSource);\n        }\n        if (!empty($schemaDiagnostic['diagnostic'])) {\n            foreach ($schemaDiagnostic['diagnostic'] as $table => &$fields) {\n                foreach ($fields as &$field) {\n                    $field = $this->__attachRecoveryQuery($field, $table);\n                }\n            }\n        }\n        return $schemaDiagnostic;\n    }\n\n    /*\n     * Work in progress, still needs DEFAULT in the schema for it to work correctly\n     * Currently only works for missing_column and column_different\n     * Only currently supported field types are: int, tinyint, varchar, text\n     */\n    private function __attachRecoveryQuery($field, $table)\n    {\n        if (isset($field['error_type'])) {\n            $length = false;\n            if (in_array($field['error_type'], array('missing_column', 'column_different'))) {\n                if ($field['expected']['data_type'] === 'int') {\n                    $length = 11;\n                } elseif ($field['expected']['data_type'] === 'tinyint') {\n                    $length = 1;\n                } elseif ($field['expected']['data_type'] === 'varchar') {\n                    $length = $field['expected']['character_maximum_length'];\n                } elseif ($field['expected']['data_type'] === 'text') {\n                    $length = null;\n                }\n            }\n            if ($length !== false) {\n                switch($field['error_type']) {\n                    case 'missing_column':\n                        $field['sql'] = sprintf(\n                            'ALTER TABLE `%s` ADD COLUMN `%s` %s%s %s %s %s;',\n                            $table,\n                            $field['column_name'],\n                            $field['expected']['data_type'],\n                            $length !== null ? sprintf('(%d)', $length) : '',\n                            isset($field['expected']['column_default']) ? $field['expected']['column_default'] . '\"' : '',\n                            $field['expected']['is_nullable'] === 'NO' ? 'NOT NULL' : 'NULL',\n                            empty($field['expected']['collation_name']) ? '' : 'COLLATE ' . $field['expected']['collation_name']\n                        );\n                        break;\n                    case 'column_different':\n                        $field['sql'] = sprintf(\n                            'ALTER TABLE `%s` MODIFY COLUMN `%s` %s%s %s %s %s;',\n                            $table,\n                            $field['column_name'],\n                            $field['expected']['data_type'],\n                            $length !== null ? sprintf('(%d)', $length) : '',\n                            isset($field['expected']['column_default']) ? 'DEFAULT \"' . $field['expected']['column_default'] . '\"' : '',\n                            $field['expected']['is_nullable'] === 'NO' ? 'NOT NULL' : 'NULL',\n                            empty($field['expected']['collation_name']) ? '' : 'COLLATE ' . $field['expected']['collation_name']\n                        );\n                        break;\n                }\n            } elseif($field['error_type'] == 'missing_table') {\n                $allFields = array();\n                foreach ($field['expected_table'] as $expectedField) {\n                    $length = false;\n                    if ($expectedField['data_type'] === 'int') {\n                        $length = 11;\n                    } elseif ($expectedField['data_type'] === 'tinyint') {\n                        $length = 1;\n                    } elseif ($expectedField['data_type'] === 'varchar') {\n                        $length = $expectedField['character_maximum_length'];\n                    } elseif ($expectedField['data_type'] === 'text') {\n                        $length = null;\n                    }\n                    $fieldSql = sprintf('`%s` %s%s %s %s %s',\n                        $expectedField['column_name'],\n                        $expectedField['data_type'],\n                        $length !== null ? sprintf('(%d)', $length) : '',\n                        isset($expectedField['column_default']) ? 'DEFAULT \"' . $expectedField['column_default'] . '\"' : '',\n                        $expectedField['is_nullable'] === 'NO' ? 'NOT NULL' : 'NULL',\n                        empty($expectedField['collation_name']) ? '' : 'COLLATE ' . $expectedField['collation_name']\n                    );\n                    $allFields[] = $fieldSql;\n                }\n                $field['sql'] = __(\"% The command below is a suggestion and might be incorrect. Please ask if you are not sure what you are doing.\") . \"</br></br>\" . sprintf(\n                    \"CREATE TABLE IF NOT EXISTS `%s` ( %s ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\",\n                        $table,\n                        implode(', ', $allFields)\n                );\n            }\n        }\n        return $field;\n    }\n\n    public function getExpectedDBSchema()\n    {\n        App::uses('Folder', 'Utility');\n        $file = new File(ROOT . DS . 'db_schema.json', true);\n        $dbExpectedSchema = json_decode($file->read(), true);\n        $file->close();\n        if (!is_null($dbExpectedSchema)) {\n            return $dbExpectedSchema;\n        } else {\n            return false;\n        }\n    }\n\n    // TODO: Use CakePHP 3.X's Schema System\n    /*\n        $db = ConnectionManager::get('default');\n\n        // Create a schema collection.\n        $collection = $db->schemaCollection();\n\n        // Get the table names\n        $tables = $collection->listTables();\n\n        // Get a single table (instance of Schema\\TableSchema)\n        $tableSchema = $collection->describe('posts');\n\n    */\n    public function getActualDBSchema(\n        $tableColumnNames = array(\n            'column_name',\n            'is_nullable',\n            'data_type',\n            'character_maximum_length',\n            'numeric_precision',\n            // 'datetime_precision',    -- Only available on MySQL 5.6+\n            'collation_name',\n            'column_default'\n        )\n    ){\n        $dbActualSchema = array();\n        $dbActualIndexes = array();\n        $dataSource = $this->getDataSource()->config['datasource'];\n        if ($dataSource == 'Database/Mysql') {\n            $sqlGetTable = sprintf('SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = %s;', \"'\" . $this->getDataSource()->config['database'] . \"'\");\n            $sqlResult = $this->query($sqlGetTable);\n            $tables = HASH::extract($sqlResult, '{n}.tables.TABLE_NAME');\n            foreach ($tables as $table) {\n                $sqlSchema = sprintf(\n                    \"SELECT %s\n                    FROM information_schema.columns\n                    WHERE table_schema = '%s' AND TABLE_NAME = '%s'\", implode(',', $tableColumnNames), $this->getDataSource()->config['database'], $table);\n                $sqlResult = $this->query($sqlSchema);\n                foreach ($sqlResult as $column_schema) {\n                    $column_schema['columns'] = array_change_key_case($column_schema['columns'],CASE_LOWER);\n                    $dbActualSchema[$table][] = $column_schema['columns'];\n                }\n                $dbActualIndexes[$table] = $this->getDatabaseIndexes($this->getDataSource()->config['database'], $table);\n            }\n        }\n        else if ($dataSource == 'Database/Postgres') {\n            return array('Database/Postgres' => array('description' => __('Can\\'t check database schema for Postgres database type')));\n        }\n        return array('schema' => $dbActualSchema, 'column' => $tableColumnNames, 'indexes' => $dbActualIndexes);\n    }\n\n    public function compareDBSchema($dbActualSchema, $dbExpectedSchema)\n    {\n        // Column that should be ignored while performing the comparison\n        $whiteListFields = array(\n            'users' => array('external_auth_required', 'external_auth_key'),\n        );\n        $nonCriticalColumnElements = array('is_nullable', 'collation_name');\n        $dbDiff = array();\n        // perform schema comparison for tables\n        foreach($dbExpectedSchema as $tableName => $columns) {\n            if (!array_key_exists($tableName, $dbActualSchema)) {\n                $dbDiff[$tableName][] = array(\n                    'description' => sprintf(__('Table `%s` does not exist'), $tableName),\n                    'error_type' => 'missing_table',\n                    'expected_table' => $columns,\n                    'column_name' => $tableName,\n                    'is_critical' => true\n                );\n            } else {\n                // perform schema comparison for table's columns\n                $expectedColumnKeys = array();\n                $keyedExpectedColumn = array();\n                foreach($columns as $column) {\n                    $expectedColumnKeys[] = $column['column_name'];\n                    $keyedExpectedColumn[$column['column_name']] = $column;\n                }\n                $existingColumnKeys = array();\n                $keyedActualColumn = array();\n                foreach($dbActualSchema[$tableName] as $column) {\n                    $existingColumnKeys[] = $column['column_name'];\n                    $keyedActualColumn[$column['column_name']] = $column;\n                }\n\n                $additionalKeysInActualSchema = array_diff($existingColumnKeys, $expectedColumnKeys);\n                foreach($additionalKeysInActualSchema as $additionalKeys) {\n                    if (isset($whiteListFields[$tableName]) && in_array($additionalKeys, $whiteListFields[$tableName])) {\n                        continue; // column is whitelisted\n                    }\n                    $dbDiff[$tableName][] = array(\n                        'description' => sprintf(__('Column `%s` exists but should not'), $additionalKeys),\n                        'error_type' => 'additional_column',\n                        'column_name' => $additionalKeys,\n                        'is_critical' => false\n                    );\n                }\n                foreach ($keyedExpectedColumn as $columnName => $column) {\n                    if (isset($whiteListFields[$tableName]) && in_array($columnName, $whiteListFields[$tableName])) {\n                        continue; // column is whitelisted\n                    }\n                    if (isset($keyedActualColumn[$columnName])) {\n                        $colDiff = array_diff_assoc($column, $keyedActualColumn[$columnName]);\n                        if (count($colDiff) > 0) {\n                            $colElementDiffs = array_keys(array_diff_assoc($column, $keyedActualColumn[$columnName]));\n                            $isCritical = false;\n                            foreach($colElementDiffs as $colElementDiff) {\n                                if(!in_array($colElementDiff, $nonCriticalColumnElements)) {\n                                    if ($colElementDiff == 'column_default') {\n                                        $expectedValue = $column['column_default'];\n                                        $actualValue = $keyedActualColumn[$columnName]['column_default'];\n                                        if (preg_match(sprintf('@(\\'|\")+%s(\\1)+@', $expectedValue), $actualValue) || (empty($expectedValue) && $actualValue === 'NULL')) { // some version of mysql quote the default value\n                                            continue;\n                                        } else {\n                                            $isCritical = true;\n                                            break;\n                                        }\n                                    } else {\n                                        $isCritical = true;\n                                        break;\n                                    }\n                                }\n                            }\n                            $dbDiff[$tableName][] = array(\n                                'description' => sprintf(__('Column `%s` is different'), $columnName),\n                                'column_name' => $column['column_name'],\n                                'error_type' => 'column_different',\n                                'actual' => $keyedActualColumn[$columnName],\n                                'expected' => $column,\n                                'is_critical' => $isCritical\n                            );\n                        }\n                    } else {\n                        $dbDiff[$tableName][] = array(\n                            'description' => sprintf(__('Column `%s` does not exist but should'), $columnName),\n                            'column_name' => $columnName,\n                            'error_type' => 'missing_column',\n                            'actual' => array(),\n                            'expected' => $column,\n                            'is_critical' => true\n                        );\n                    }\n                }\n            }\n        }\n        foreach(array_diff(array_keys($dbActualSchema), array_keys($dbExpectedSchema)) as $additionalTable) {\n            $dbDiff[$additionalTable][] = array(\n                'description' => sprintf(__('Table `%s` is an additional table'), $additionalTable),\n                'column_name' => $additionalTable,\n                'error_type' => 'additional_table',\n                'is_critical' => false\n            );\n        }\n        return $dbDiff;\n    }\n\n    public function compareDBIndexes($actualIndex, $expectedIndex, $dbExpectedSchema)\n    {\n        $defaultIndexKeylength = 255;\n        $whitelistTables = array();\n        $indexDiff = array();\n        foreach($expectedIndex as $tableName => $indexes) {\n            if (!array_key_exists($tableName, $actualIndex)) {\n                continue; // If table does not exists, it is covered by the schema diagnostic\n            } elseif(in_array($tableName, $whitelistTables)) {\n                continue; // Ignore whitelisted tables\n            } else {\n                $tableIndexDiff = array_diff($indexes, $actualIndex[$tableName]); // check for missing indexes\n                if (count($tableIndexDiff) > 0) {\n                    foreach($tableIndexDiff as $columnDiff) {\n                        $columnData  = Hash::extract($dbExpectedSchema['schema'][$tableName], sprintf('{n}[column_name=%s]', $columnDiff))[0];\n                        $message = sprintf(__('Column `%s` should be indexed'), $columnDiff);\n                        if ($columnData['data_type'] == 'varchar') {\n                            $keyLength = sprintf('(%s)', $columnData['character_maximum_length'] < $defaultIndexKeylength ? $columnData['character_maximum_length'] : $defaultIndexKeylength);\n                        } elseif ($columnData['data_type'] == 'text') {\n                            $keyLength = sprintf('(%s)', $defaultIndexKeylength);\n                        } else {\n                            $keyLength = '';\n                        }\n                        $sql = sprintf('CREATE INDEX `%s` ON `%s` (%s%s);',\n                            $columnDiff,\n                            $tableName,\n                            $columnDiff,\n                            $keyLength\n                        );\n                        $indexDiff[$tableName][$columnDiff] = array(\n                            'message' => $message,\n                            'sql' => $sql\n                        );\n                    }\n                }\n                $tableIndexDiff = array_diff($actualIndex[$tableName], $indexes); // check for additional indexes\n                if (count($tableIndexDiff) > 0) {\n                    foreach($tableIndexDiff as $columnDiff) {\n                        $message = sprintf(__('Column `%s` is indexed but should not'), $columnDiff);\n                        $sql = sprintf('DROP INDEX `%s` ON %s;',\n                            $columnDiff,\n                            $tableName\n                        );\n                        $indexDiff[$tableName][$columnDiff] = array(\n                            'message' => $message,\n                            'sql' => $sql\n                        );\n                    }\n                }\n            }\n        }\n        return $indexDiff;\n    }\n\n    public function getDatabaseIndexes($database, $table)\n    {\n        $sqlTableIndex = sprintf(\n            \"SELECT DISTINCT TABLE_NAME, COLUMN_NAME FROM information_schema.statistics WHERE TABLE_SCHEMA = '%s' AND TABLE_NAME = '%s';\",\n            $database,\n            $table\n        );\n        $sqlTableIndexResult = $this->query($sqlTableIndex);\n        $tableIndex = Hash::extract($sqlTableIndexResult, '{n}.statistics.COLUMN_NAME');\n        return $tableIndex;\n    }\n\n    public function writeableDirsDiagnostics(&$diagnostic_errors)\n    {\n        App::uses('File', 'Utility');\n        App::uses('Folder', 'Utility');\n        // check writeable directories\n        $writeableDirs = array(\n                '/tmp' => 0,\n                APP . 'tmp' => 0,\n                APP . 'files' => 0,\n                APP . 'files' . DS . 'scripts' . DS . 'tmp' => 0,\n                APP . 'tmp' . DS . 'csv_all' => 0,\n                APP . 'tmp' . DS . 'csv_sig' => 0,\n                APP . 'tmp' . DS . 'md5' => 0,\n                APP . 'tmp' . DS . 'sha1' => 0,\n                APP . 'tmp' . DS . 'snort' => 0,\n                APP . 'tmp' . DS . 'suricata' => 0,\n                APP . 'tmp' . DS . 'text' => 0,\n                APP . 'tmp' . DS . 'xml' => 0,\n                APP . 'tmp' . DS . 'files' => 0,\n                APP . 'tmp' . DS . 'logs' => 0,\n                APP . 'tmp' . DS . 'bro' => 0,\n        );\n        foreach ($writeableDirs as $path => &$error) {\n            $dir = new Folder($path);\n            if (is_null($dir->path)) {\n                $error = 1;\n            }\n            $file = new File($path . DS . 'test.txt', true);\n            if ($error == 0 && !$file->write('test')) {\n                $error = 2;\n            }\n            if ($error != 0) {\n                $diagnostic_errors++;\n            }\n            $file->delete();\n            $file->close();\n        }\n        return $writeableDirs;\n    }\n\n    public function writeableFilesDiagnostics(&$diagnostic_errors)\n    {\n        $writeableFiles = array(\n                APP . 'Config' . DS . 'config.php' => 0,\n                ROOT .  DS . '.git' . DS . 'ORIG_HEAD' => 0,\n        );\n        foreach ($writeableFiles as $path => &$error) {\n            if (!file_exists($path)) {\n                $error = 1;\n                continue;\n            }\n            if (!is_writeable($path)) {\n                $error = 2;\n                $diagnostic_errors++;\n            }\n        }\n        return $writeableFiles;\n    }\n\n    public function readableFilesDiagnostics(&$diagnostic_errors)\n    {\n        $readableFiles = array(\n                APP . 'files' . DS . 'scripts' . DS . 'stixtest.py' => 0\n        );\n        foreach ($readableFiles as $path => &$error) {\n            if (!is_readable($path)) {\n                $error = 1;\n                continue;\n            }\n        }\n        return $readableFiles;\n    }\n\n    public function yaraDiagnostics(&$diagnostic_errors)\n    {\n        $scriptResult = shell_exec($this->getPythonVersion() . ' ' . APP . 'files' . DS . 'scripts' . DS . 'yaratest.py');\n        $scriptResult = json_decode($scriptResult, true);\n        return array('operational' => $scriptResult['success'], 'plyara' => $scriptResult['plyara']);\n    }\n\n    public function stixDiagnostics(&$diagnostic_errors, &$stixVersion, &$cyboxVersion, &$mixboxVersion, &$maecVersion, &$stix2Version, &$pymispVersion)\n    {\n        $result = array();\n        $expected = array('stix' => '>1.2.0.6', 'cybox' => '>2.1.0.18.dev0', 'mixbox' => '1.0.3', 'maec' => '>4.1.0.14', 'stix2' => '>1.2.0', 'pymisp' => '>2.4.120');\n        // check if the STIX and Cybox libraries are working using the test script stixtest.py\n        $scriptResult = shell_exec($this->getPythonVersion() . ' ' . APP . 'files' . DS . 'scripts' . DS . 'stixtest.py');\n        $scriptResult = json_decode($scriptResult, true);\n        if ($scriptResult == null) {\n            return array('operational' => 0, 'stix' => array('expected' => $expected['stix']), 'cybox' => array('expected' => $expected['cybox']), 'mixbox' => array('expected' => $expected['mixbox']), 'maec' => array('expected' => $expected['maec']), 'stix2' => array('expected' => $expected['stix2']), 'pymisp' => array('expected' => $expected['pymisp']));\n        }\n        $scriptResult['operational'] = $scriptResult['success'];\n        if ($scriptResult['operational'] == 0) {\n            $diagnostic_errors++;\n        }\n        $result['operational'] = $scriptResult['operational'];\n        foreach ($expected as $package => $version) {\n            $result[$package]['version'] = $scriptResult[$package];\n            $result[$package]['expected'] = $expected[$package];\n            if ($expected[$package][0] === '>') {\n                $expected[$package] = trim($expected[$package], '>');\n                $result[$package]['status'] = (version_compare($result[$package]['version'], $expected[$package]) >= 0) ? 1 : 0;\n            } else {\n                $result[$package]['status'] = $result[$package]['version'] == $result[$package]['expected'] ? 1 : 0;\n            }\n            if ($result[$package]['status'] == 0) {\n                $diagnostic_errors++;\n            }\n            ${$package . 'Version'}[0] = str_replace('$current', $result[$package]['version'], ${$package . 'Version'}[0]);\n            ${$package . 'Version'}[0] = str_replace('$expected', $result[$package]['expected'], ${$package . 'Version'}[0]);\n        }\n        return $result;\n    }\n\n    public function gpgDiagnostics(&$diagnostic_errors)\n    {\n        $gpgStatus = 0;\n        if (Configure::read('GnuPG.email') && Configure::read('GnuPG.homedir')) {\n            $continue = true;\n            try {\n                if (!class_exists('Crypt_GPG')) {\n                    if (!stream_resolve_include_path('Crypt/GPG.php')) {\n                        throw new Exception(\"Crypt_GPG is not installed\");\n                    }\n                    require_once 'Crypt/GPG.php';\n                }\n                $gpg = new Crypt_GPG(array(\n                    'homedir' => Configure::read('GnuPG.homedir'),\n                    'gpgconf' => Configure::read('GnuPG.gpgconf'),\n                    'binary' => Configure::read('GnuPG.binary') ?: '/usr/bin/gpg'\n                ));\n            } catch (Exception $e) {\n                $this->logException(\"Error during initializing GPG.\", $e, LOG_NOTICE);\n                $gpgStatus = 2;\n                $continue = false;\n            }\n            if ($continue) {\n                try {\n                    $key = $gpg->addSignKey(Configure::read('GnuPG.email'), Configure::read('GnuPG.password'));\n                } catch (Exception $e) {\n                    $this->logException(\"Error during adding GPG signing key.\", $e, LOG_NOTICE);\n                    $gpgStatus = 3;\n                    $continue = false;\n                }\n            }\n            if ($continue) {\n                try {\n                    $gpgStatus = 0;\n                    $signed = $gpg->sign('test', Crypt_GPG::SIGN_MODE_CLEAR);\n                } catch (Exception $e) {\n                    $this->logException(\"Error during GPG signing.\", $e, LOG_NOTICE);\n                    $gpgStatus = 4;\n                }\n            }\n        } else {\n            $gpgStatus = 1;\n        }\n        if ($gpgStatus != 0) {\n            $diagnostic_errors++;\n        }\n        return $gpgStatus;\n    }\n\n    public function zmqDiagnostics(&$diagnostic_errors)\n    {\n        if (!Configure::read('Plugin.ZeroMQ_enable')) {\n            return 1;\n        }\n        $pubSubTool = $this->getPubSubTool();\n        if (!$pubSubTool->checkIfPythonLibInstalled()) {\n            $diagnostic_errors++;\n            return 2;\n        }\n        if ($pubSubTool->checkIfRunning()) {\n            return 0;\n        }\n        $diagnostic_errors++;\n        return 3;\n    }\n\n    public function moduleDiagnostics(&$diagnostic_errors, $type = 'Enrichment')\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $types = array('Enrichment', 'Import', 'Export', 'Cortex');\n        $diagnostic_errors++;\n        if (Configure::read('Plugin.' . $type . '_services_enable')) {\n            $exception = false;\n            $result = $this->Module->getModules(false, $type, $exception);\n            if ($exception) {\n                return $exception;\n            }\n            if (empty($result)) {\n                return 2;\n            }\n            $diagnostic_errors--;\n            return 0;\n        }\n        return 1;\n    }\n\n    public function proxyDiagnostics(&$diagnostic_errors)\n    {\n        $proxyStatus = 0;\n        $proxy = Configure::read('Proxy');\n        if (!empty($proxy['host'])) {\n            App::uses('SyncTool', 'Tools');\n            $syncTool = new SyncTool();\n            try {\n                $HttpSocket = $syncTool->setupHttpSocket();\n                $proxyResponse = $HttpSocket->get('https://www.github.com/');\n            } catch (Exception $e) {\n                $proxyStatus = 2;\n            }\n            if (empty($proxyResponse) || $proxyResponse->code > 399) {\n                $proxyStatus = 2;\n            }\n        } else {\n            $proxyStatus = 1;\n        }\n        if ($proxyStatus > 1) {\n            $diagnostic_errors++;\n        }\n        return $proxyStatus;\n    }\n\n    public function sessionDiagnostics(&$diagnostic_errors = 0, &$sessionCount = '')\n    {\n        if (Configure::read('Session.defaults') !== 'database') {\n            $sessionCount = 'N/A';\n            return 2;\n        }\n        $sql = 'SELECT COUNT(id) AS session_count FROM cake_sessions WHERE expires < ' . time() . ';';\n        $sqlResult = $this->query($sql);\n        if (isset($sqlResult[0][0])) {\n            $sessionCount = $sqlResult[0][0]['session_count'];\n        } else {\n            $sessionCount = 'Error';\n            return 3;\n        }\n        if ($sessionCount > 1000) {\n            $diagnostic_errors++;\n            return 1;\n        }\n        return 0;\n    }\n\n    public function workerDiagnostics(&$workerIssueCount)\n    {\n        try {\n            $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        } catch (Exception $e) {\n            // redis connection failed\n            return array(\n                    'cache' => array('ok' => false),\n                    'default' => array('ok' => false),\n                    'email' => array('ok' => false),\n                    'prio' => array('ok' => false),\n                    'update' => array('ok' => false),\n                    'scheduler' => array('ok' => false)\n            );\n        }\n        $workers = $this->ResqueStatus->getWorkers();\n        if (function_exists('posix_getpwuid')) {\n            $currentUser = posix_getpwuid(posix_geteuid());\n            $currentUser = $currentUser['name'];\n        } else {\n            $currentUser = trim(shell_exec('whoami'));\n        }\n        $worker_array = array(\n                'cache' => array('ok' => true),\n                'default' => array('ok' => true),\n                'email' => array('ok' => true),\n                'prio' => array('ok' => true),\n                'update' => array('ok' => true),\n                'scheduler' => array('ok' => true)\n        );\n        $procAccessible = file_exists('/proc');\n        foreach ($workers as $pid => $worker) {\n            $entry = ($worker['type'] == 'regular') ? $worker['queue'] : $worker['type'];\n            $correct_user = ($currentUser === $worker['user']);\n            if (!is_numeric($pid)) {\n                throw new MethodNotAllowedException('Non numeric PID found.');\n            }\n            if ($procAccessible) {\n                $alive = $correct_user ? (file_exists('/proc/' . addslashes($pid))) : false;\n            } else {\n                $alive = 'N/A';\n            }\n            $ok = true;\n            if (!$alive || !$correct_user) {\n                $ok = false;\n                $workerIssueCount++;\n            }\n            $worker_array[$entry]['workers'][] = array('pid' => $pid, 'user' => $worker['user'], 'alive' => $alive, 'correct_user' => $correct_user, 'ok' => $ok);\n        }\n        foreach ($worker_array as $k => $queue) {\n            if (isset($worker_array[$k]['workers'])) {\n                foreach($worker_array[$k]['workers'] as $worker) {\n                    if ($worker['ok']) {\n                        $worker_array[$k]['ok'] = true; // If at least one worker is up, the queue can be considered working\n                    }\n                }\n            }\n            if ($k != 'scheduler') {\n                $worker_array[$k]['jobCount'] = CakeResque::getQueueSize($k);\n            }\n            if (!isset($queue['workers'])) {\n                $workerIssueCount++;\n                $worker_array[$k]['ok'] = false;\n            }\n        }\n        $worker_array['proc_accessible'] = $procAccessible;\n        $worker_array['controls'] = 1;\n        if (Configure::check('MISP.manage_workers')) {\n            $worker_array['controls'] = Configure::read('MISP.manage_workers');\n        }\n        return $worker_array;\n    }\n\n    public function retrieveCurrentSettings($branch, $subString)\n    {\n        $settings = array();\n        foreach ($this->serverSettings[$branch] as $settingName => $setting) {\n            if (strpos($settingName, $subString) !== false) {\n                $settings[$settingName] = $setting['value'];\n                if (Configure::read('Plugin.' . $settingName)) {\n                    $settings[$settingName] = Configure::read('Plugin.' . $settingName);\n                }\n                if (isset($setting['options'])) {\n                    $settings[$settingName] = $setting['options'][$settings[$settingName]];\n                }\n            }\n        }\n        return $settings;\n    }\n\n    public function killWorker($pid, $user)\n    {\n        if (!is_numeric($pid)) {\n            throw new MethodNotAllowedException('Non numeric PID found!');\n        }\n        $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        $workers = $this->ResqueStatus->getWorkers();\n        $this->Log = ClassRegistry::init('Log');\n        if (isset($workers[$pid])) {\n            $worker = $workers[$pid];\n            if (substr_count(trim(shell_exec('ps -p ' . $pid)), PHP_EOL) > 0 ? true : false) {\n                shell_exec('kill ' . $pid . ' > /dev/null 2>&1 &');\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], false);\n            } else {\n                $this->ResqueStatus->removeWorker($pid);\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], true);\n            }\n            $this->ResqueStatus->removeWorker($pid);\n        }\n    }\n\n    public function workerRemoveDead($user = false)\n    {\n        $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        $workers = $this->ResqueStatus->getWorkers();\n        if (function_exists('posix_getpwuid')) {\n            $currentUser = posix_getpwuid(posix_geteuid());\n            $currentUser = $currentUser['name'];\n        } else {\n            $currentUser = trim(shell_exec('whoami'));\n        }\n        $killed = array();\n        foreach ($workers as $pid => $worker) {\n            if (!is_numeric($pid)) {\n                throw new MethodNotAllowedException('Non numeric PID found!');\n            }\n            $pidTest = substr_count(trim(shell_exec('ps -p ' . $pid)), PHP_EOL) > 0 ? true : false;\n            if ($worker['user'] == $currentUser && !$pidTest) {\n                $this->ResqueStatus->removeWorker($pid);\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], true);\n                if (empty($killed[$worker['queue']])) {\n                    $killed[$worker['queue']] = 1;\n                } else {\n                    $killed[$worker['queue']] += 1;\n                }\n            }\n        }\n        return $killed;\n    }\n\n    private function __logRemoveWorker($user, $pid, $queue, $dead = false)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        if (empty($user)) {\n            $user = array(\n                'id' => 0,\n                'Organisation' => array(\n                    'name' => 'SYSTEM'\n                ),\n                'email' => 'SYSTEM'\n            );\n        }\n        $type = $dead ? 'dead' : 'kill';\n        $text = array(\n            'dead' => array(\n                'action' => 'remove_dead_workers',\n                'title' => __('Removing a dead worker.'),\n                'change' => sprintf(__('Removing dead worker data. Worker was of type %s with pid %s'), $queue, $pid)\n            ),\n            'kill' => array(\n                'action' => 'stop_worker',\n                'title' => __('Stopping a worker.'),\n                'change' => sprintf(__('Stopping a worker. Worker was of type %s with pid %s'), $queue, $pid)\n            )\n        );\n        $this->Log->save(array(\n            'org' => $user['Organisation']['name'],\n            'model' => 'User',\n            'model_id' => $user['id'],\n            'email' => $user['email'],\n            'action' => $text[$type]['action'],\n            'user_id' => $user['id'],\n            'title' => $text[$type]['title'],\n            'change' => $text[$type]['change']\n        ));\n    }\n\n    /* returns the version string of a connected instance\n     * error codes:\n     * 1: received non json response\n     * 2: no route to host\n     * 3: empty result set\n     */\n    public function getRemoteVersion($id)\n    {\n        $server = $this->find('first', array(\n                'conditions' => array('Server.id' => $id),\n        ));\n        if (empty($server)) {\n            return 2;\n        }\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        $HttpSocket = $syncTool->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $response = $HttpSocket->get($server['Server']['url'] . '/servers/getVersion', $data = '', $request);\n        if ($response->code == 200) {\n            try {\n                $data = json_decode($response->body, true);\n            } catch (Exception $e) {\n                return 1;\n            }\n            if (isset($data['version']) && !empty($data['version'])) {\n                return $data['version'];\n            } else {\n                return 3;\n            }\n        }\n        return 2;\n    }\n\n    /**\n     * Returns an array with the events\n     * @param int $id\n     * @param $user - not used\n     * @param array $passedArgs\n     * @return array\n     * @throws Exception\n     */\n    public function previewIndex($id, $user, array $passedArgs)\n    {\n        $validArgs = array_merge(array('sort', 'direction', 'page', 'limit'), $this->validEventIndexFilters);\n        $urlParams = '';\n        foreach ($validArgs as $v) {\n            if (isset($passedArgs[$v])) {\n                $urlParams .= '/' . $v . ':' . $passedArgs[$v];\n            }\n        }\n\n        $relativeUri = '/events/index' . $urlParams;\n        list($events, $response) = $this->serverGetRequest($id, $relativeUri);\n        $totalCount = $response->getHeader('X-Result-Count') ?: 0;\n\n        foreach ($events as $k => $event) {\n            if (!isset($event['Orgc'])) {\n                $event['Orgc']['name'] = $event['orgc'];\n            }\n            if (!isset($event['Org'])) {\n                $event['Org']['name'] = $event['org'];\n            }\n            if (!isset($event['EventTag'])) {\n                $event['EventTag'] = array();\n            }\n            $events[$k] = array('Event' => $event);\n        }\n\n        return array($events, $totalCount);\n    }\n\n    /**\n     * Returns an array with the event.\n     * @param int $serverId\n     * @param int $eventId\n     * @return array\n     * @throws Exception\n     */\n    public function previewEvent($serverId, $eventId)\n    {\n        $relativeUri =  '/events/' . $eventId;\n        list($event) = $this->serverGetRequest($serverId, $relativeUri);\n\n        if (!isset($event['Event']['Orgc'])) {\n            $event['Event']['Orgc']['name'] = $event['Event']['orgc'];\n        }\n        if (isset($event['Event']['Orgc'][0])) {\n            $event['Event']['Orgc'] = $event['Event']['Orgc'][0];\n        }\n        if (!isset($event['Event']['Org'])) {\n            $event['Event']['Org']['name'] = $event['Event']['org'];\n        }\n        if (isset($event['Event']['Org'][0])) {\n            $event['Event']['Org'] = $event['Event']['Org'][0];\n        }\n        if (!isset($event['Event']['EventTag'])) {\n            $event['Event']['EventTag'] = array();\n        }\n\n        return $event;\n    }\n\n    // Loops through all servers and checks which servers' push rules don't conflict with the given event.\n    // returns the server objects that would allow the event to be pushed\n    public function eventFilterPushableServers($event, $servers)\n    {\n        $eventTags = array();\n        $validServers = array();\n        foreach ($event['EventTag'] as $tag) {\n            $eventTags[] = $tag['tag_id'];\n        }\n        foreach ($servers as $server) {\n            $push_rules = json_decode($server['Server']['push_rules'], true);\n            if (!empty($push_rules['tags']['OR'])) {\n                $intersection = array_intersect($push_rules['tags']['OR'], $eventTags);\n                if (empty($intersection)) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['tags']['NOT'])) {\n                $intersection = array_intersect($push_rules['tags']['NOT'], $eventTags);\n                if (!empty($intersection)) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['orgs']['OR'])) {\n                if (!in_array($event['Event']['orgc_id'], $push_rules['orgs']['OR'])) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['orgs']['NOT'])) {\n                if (in_array($event['Event']['orgc_id'], $push_rules['orgs']['NOT'])) {\n                    continue;\n                }\n            }\n            $validServers[] = $server;\n        }\n        return $validServers;\n    }\n\n    public function extensionDiagnostics()\n    {\n        $results = array();\n        $extensions = array('redis', 'gd', 'ssdeep');\n        foreach ($extensions as $extension) {\n            $results['web']['extensions'][$extension] = extension_loaded($extension);\n        }\n        if (!is_readable(APP . '/files/scripts/selftest.php')) {\n            $results['cli'] = false;\n        } else {\n            $execResult = exec('php ' . APP . '/files/scripts/selftest.php');\n            $results['cli'] = json_decode($execResult, true);\n        }\n        return $results;\n    }\n\n    public function databaseEncodingDiagnostics(&$diagnostic_errors)\n    {\n        if (!isset($this->getDataSource()->config['encoding']) || strtolower($this->getDataSource()->config['encoding']) != 'utf8') {\n            $diagnostic_errors++;\n            return false;\n        }\n        return true;\n    }\n\n    public function getLatestGitRemote()\n    {\n        return exec('timeout 3 git ls-remote https://github.com/MISP/MISP | head -1 | sed \"s/HEAD//\"');\n    }\n\n    public function getCurrentGitStatus()\n    {\n        $status = array();\n        $status['commit'] = exec('git rev-parse HEAD');\n        $status['branch'] = $this->getCurrentBranch();\n        $status['latestCommit'] = $this->getLatestGitremote();\n        return $status;\n    }\n\n    public function getCurrentBranch()\n    {\n        return exec(\"git symbolic-ref HEAD | sed 's!refs\\/heads\\/!!'\");\n    }\n\n    public function checkoutMain()\n    {\n        $mainBranch = '2.4';\n        return exec('git checkout ' . $mainBranch);\n    }\n\n    public function getSubmodulesGitStatus()\n    {\n        exec('cd ' . APP . '../; git submodule status --cached | grep -v ^- | cut -b 2- | cut -d \" \" -f 1,2 ', $submodules_names);\n        $status = array();\n        foreach ($submodules_names as $submodule_name_info) {\n            $submodule_name_info = explode(' ', $submodule_name_info);\n            $superproject_submodule_commit_id = $submodule_name_info[0];\n            $submodule_name = $submodule_name_info[1];\n            $temp = $this->getSubmoduleGitStatus($submodule_name, $superproject_submodule_commit_id);\n            if ( !empty($temp) ) {\n                $status[$submodule_name] = $temp;\n            }\n        }\n        return $status;\n    }\n\n    private function _isAcceptedSubmodule($submodule) {\n        $accepted_submodules_names = array('PyMISP',\n            'app/files/misp-galaxy',\n            'app/files/taxonomies',\n            'app/files/misp-objects',\n            'app/files/noticelists',\n            'app/files/warninglists',\n            'app/files/misp-decaying-models',\n            'cti-python-stix2'\n        );\n        return in_array($submodule, $accepted_submodules_names);\n    }\n\n    public function getSubmoduleGitStatus($submodule_name, $superproject_submodule_commit_id) {\n        $status = array();\n        if ($this->_isAcceptedSubmodule($submodule_name)) {\n            $path = APP . '../' . $submodule_name;\n            $submodule_name=(strpos($submodule_name, '/') >= 0 ? explode('/', $submodule_name) : $submodule_name);\n            $submodule_name=end($submodule_name);\n            $submoduleRemote=exec('cd ' . $path . '; git config --get remote.origin.url');\n            exec(sprintf('cd %s; git rev-parse HEAD', $path), $submodule_current_commit_id);\n            if (!empty($submodule_current_commit_id[0])) {\n                $submodule_current_commit_id = $submodule_current_commit_id[0];\n            } else {\n                $submodule_current_commit_id = null;\n            }\n            $status = array(\n                'moduleName' => $submodule_name,\n                'current' => $submodule_current_commit_id,\n                'currentTimestamp' => exec(sprintf('cd %s; git log -1 --pretty=format:%%ct', $path)),\n                'remoteTimestamp' => exec(sprintf('cd %s; git show -s --pretty=format:%%ct %s', $path, $superproject_submodule_commit_id)),\n                'remote' => $superproject_submodule_commit_id,\n                'upToDate' => '',\n                'isReadable' => is_readable($path) && is_readable($path . '/.git'),\n            );\n\n            if (!empty($status['remote'])) {\n                if ($status['remote'] == $status['current']) {\n                    $status['upToDate'] = 'same';\n                } else if ($status['currentTimestamp'] < $status['remoteTimestamp']) {\n                    $status['upToDate'] = 'older';\n                } else {\n                    $status['upToDate'] = 'younger';\n                }\n            } else {\n                $status['upToDate'] = 'error';\n            }\n\n            if ($status['isReadable'] && !empty($status['remoteTimestamp']) && !empty($status['currentTimestamp'])) {\n                $date1 = new DateTime();\n                $date1->setTimestamp($status['remoteTimestamp']);\n                $date2 = new DateTime();\n                $date2->setTimestamp($status['currentTimestamp']);\n                $status['timeDiff'] = $date1->diff($date2);\n            } else {\n                $status['upToDate'] = 'error';\n            }\n        }\n        return $status;\n    }\n\n    public function updateSubmodule($user, $submodule_name=false) {\n        $path = APP . '../';\n        if ($submodule_name == false) {\n            $command = sprintf('cd %s; git submodule update 2>&1', $path);\n            exec($command, $output, $return_code);\n            $output = implode(\"\\n\", $output);\n            $res = array('status' => ($return_code==0 ? true : false), 'output' => $output);\n            if ($return_code == 0) { // update all DB\n                $res = array_merge($res, $this->updateDatabaseAfterPullRouter($submodule_name, $user));\n            }\n        } else if ($this->_isAcceptedSubmodule($submodule_name)) {\n            $command = sprintf('cd %s; git submodule update -- %s 2>&1', $path, $submodule_name);\n            exec($command, $output, $return_code);\n            $output = implode(\"\\n\", $output);\n            $res = array('status' => ($return_code==0 ? true : false), 'output' => $output);\n            if ($return_code == 0) { // update DB if necessary\n                $res = array_merge($res, $this->updateDatabaseAfterPullRouter($submodule_name, $user));\n            }\n        } else {\n            $res = array('status' => false, 'output' => __('Invalid submodule.'), 'job_sent' => false, 'sync_result' => __('unknown'));\n        }\n        return $res;\n    }\n\n    public function updateDatabaseAfterPullRouter($submodule_name, $user) {\n        if (Configure::read('MISP.background_jobs')) {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $eventModel = ClassRegistry::init('Event');\n            $data = array(\n                    'worker' => $eventModel->__getPrioWorkerIfPossible(),\n                    'job_type' => __('update_after_pull'),\n                    'job_input' => __('Updating: ' . $submodule_name),\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => $user['org_id'],\n                    'org' => $user['Organisation']['name'],\n                    'message' => 'Update the database after PULLing the submodule(s).',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'prio',\n                    'AdminShell',\n                    array('updateAfterPull', $submodule_name, $jobId, $user['id']),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            return array('job_sent' => true, 'sync_result' => __('unknown'));\n        } else {\n            $result = $this->updateAfterPull($submodule_name, $user['id']);\n            return array('job_sent' => false, 'sync_result' => $result);\n        }\n    }\n\n    public function updateAfterPull($submodule_name, $userId) {\n        $user = $this->User->getAuthUser($userId);\n        $result = array();\n        if ($user['Role']['perm_site_admin']) {\n            $updateAll = empty($submodule_name);\n            if ($submodule_name == 'app/files/misp-galaxy' || $updateAll) {\n                $this->Galaxy = ClassRegistry::init('Galaxy');\n                $result[] = ($this->Galaxy->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/misp-objects' || $updateAll) {\n                $this->ObjectTemplate = ClassRegistry::init('ObjectTemplate');\n                $result[] = ($this->ObjectTemplate->update($user, false, false) ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/noticelists' || $updateAll) {\n                $this->Noticelist = ClassRegistry::init('Noticelist');\n                $result[] = ($this->Noticelist->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/taxonomies' || $updateAll) {\n                $this->Taxonomy = ClassRegistry::init('Taxonomy');\n                $result[] = ($this->Taxonomy->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/warninglists' || $updateAll) {\n                $this->Warninglist = ClassRegistry::init('Warninglist');\n                $result[] = ($this->Warninglist->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n        }\n        return implode('\\n', $result);\n    }\n\n    public function update($status, &$raw = array())\n    {\n        $final = '';\n        $workingDirectoryPrefix = 'cd $(git rev-parse --show-toplevel) && ';\n        $cleanup_commands = array(\n            // (>^-^)> [hacky]\n            $workingDirectoryPrefix . 'git checkout app/composer.json 2>&1'\n        );\n        foreach ($cleanup_commands as $cleanup_command) {\n            $final .= $cleanup_command . \"\\n\\n\";\n            $status = false;\n            exec($cleanup_command, $output, $status);\n            $raw[] = array(\n                'input' => $cleanup_command,\n                'output' => $output,\n                'status' => $status\n            );\n            $final .= implode(\"\\n\", $output) . \"\\n\\n\";\n        }\n        $command1 = $workingDirectoryPrefix . 'git pull origin ' . $status['branch'] . ' 2>&1';\n        $command2 = $workingDirectoryPrefix . 'git submodule update --init --recursive 2>&1';\n        $final .= $command1 . \"\\n\\n\";\n        $status = false;\n        exec($command1, $output, $status);\n        $raw[] = array(\n            'input' => $command1,\n            'output' => $output,\n            'status' => $status\n        );\n        $final .= implode(\"\\n\", $output) . \"\\n\\n=================================\\n\\n\";\n        $output = array();\n        $final .= $command2 . \"\\n\\n\";\n        $status = false;\n        exec($command2, $output, $status);\n        $raw[] = array(\n            'input' => $command2,\n            'output' => $output,\n            'status' => $status\n        );\n        $final .= implode(\"\\n\", $output);\n        return $final;\n    }\n\n    public function fetchServer($id)\n    {\n        if (empty($id)) {\n            return false;\n        }\n        $conditions = array('Server.id' => $id);\n        if (!is_numeric($id)) {\n            $conditions = array('OR' => array(\n                'LOWER(Server.name)' => strtolower($id),\n                'LOWER(Server.url)' => strtolower($id)\n            ));\n        }\n        $server = $this->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        return (empty($server)) ? false : $server;\n    }\n\n    public function restartWorkers($user=false)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->workerRemoveDead($user);\n            $prepend = '';\n            shell_exec($prepend . APP . 'Console' . DS . 'worker' . DS . 'start.sh > /dev/null 2>&1 &');\n        }\n        return true;\n    }\n\n    public function restartDeadWorkers($user=false)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $killed = $this->workerRemoveDead($user);\n            foreach ($killed as $queue => $count) {\n                for ($i = 0; $i < $count; $i++) {\n                    $this->startWorker($queue);\n                }\n            }\n        }\n        return true;\n    }\n\n    public function restartWorker($pid)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n            $workers = $this->ResqueStatus->getWorkers();\n            $pid = intval($pid);\n            if (!isset($workers[$pid])) {\n                return __('Invalid worker.');\n            }\n            $currentWorker = $workers[$pid];\n            $this->killWorker($pid, false);\n            $this->startWorker($currentWorker['queue']);\n            return true;\n        }\n        return __('Background workers not enabled.');\n    }\n\n    public function startWorker($queue)\n    {\n        $validTypes = array('default', 'email', 'scheduler', 'cache', 'prio', 'update');\n        if (!in_array($queue, $validTypes)) {\n            return __('Invalid worker type.');\n        }\n        if ($queue != 'scheduler') {\n            shell_exec(APP . 'Console' . DS . 'cake CakeResque.CakeResque start --interval 5 --queue ' . $queue .' > /dev/null 2>&1 &');\n        } else {\n            shell_exec(APP . 'Console' . DS . 'cake CakeResque.CakeResque startscheduler -i 5 > /dev/null 2>&1 &');\n        }\n        return true;\n    }\n\n    public function cacheServerInitiator($user, $id = 'all', $jobId = false)\n    {\n        $params = array(\n            'conditions' => array('caching_enabled' => 1),\n            'recursive' => -1\n        );\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return 'Redis not reachable.';\n        }\n        if ($id !== 'all') {\n            $params['conditions']['Server.id'] = $id;\n        } else {\n            $redis->del('misp:server_cache:combined');\n            $redis->del('misp:server_cache:event_uuid_lookup:');\n        }\n        $servers = $this->find('all', $params);\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->id = $jobId;\n            if (!$job->exists()) {\n                $jobId = false;\n            }\n        }\n        foreach ($servers as $k => $server) {\n            $this->__cacheInstance($server, $redis, $jobId);\n            if ($jobId) {\n                $job->saveField('progress', 100 * $k / count($servers));\n                $job->saveField('message', 'Server ' . $server['Server']['id'] . ' cached.');\n            }\n        }\n        return true;\n    }\n\n    private function __cacheInstance($server, $redis, $jobId = false)\n    {\n        $continue = true;\n        $i = 0;\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->id = $jobId;\n        }\n        $redis->del('misp:server_cache:' . $server['Server']['id']);\n        $HttpSocket = null;\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        while ($continue) {\n            $i++;\n            $pipe = $redis->multi(Redis::PIPELINE);\n            $chunk_size = 50000;\n            $data = $this->__getCachedAttributes($server, $HttpSocket, $chunk_size, $i);\n            if (empty(trim($data))) {\n                $continue = false;\n            } else {\n                $data = explode(PHP_EOL, trim($data));\n                foreach ($data as $entry) {\n                    list($value, $uuid) = explode(',', $entry);\n                    if (!empty($value)) {\n                        $redis->sAdd('misp:server_cache:' . $server['Server']['id'], $value);\n                        $redis->sAdd('misp:server_cache:combined', $value);\n                        $redis->sAdd('misp:server_cache:event_uuid_lookup:' . $value, $server['Server']['id'] . '/' . $uuid);\n                    }\n                }\n            }\n            if ($jobId) {\n                $job->saveField('message', 'Server ' . $server['Server']['id'] . ': ' . ((($i -1) * $chunk_size) + count($data)) . ' attributes cached.');\n            }\n            $pipe->exec();\n        }\n        $redis->set('misp:server_cache_timestamp:' . $server['Server']['id'], time());\n        return true;\n    }\n\n    private function __getCachedAttributes($server, $HttpSocket, $chunk_size, $i)\n    {\n        $filter_rules = array(\n            'returnFormat' => 'cache',\n            'includeEventUuid' => 1,\n            'page' => $i,\n            'limit' => $chunk_size\n        );\n        $request = $this->setupSyncRequest($server);\n        try {\n            $response = $HttpSocket->post($server['Server']['url'] . '/attributes/restSearch.json', json_encode($filter_rules), $request);\n        } catch (SocketException $e) {\n            return $e->getMessage();\n        }\n        return $response->body;\n    }\n\n    public function attachServerCacheTimestamps($data)\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return $data;\n        }\n        foreach ($data as $k => $v) {\n            $data[$k]['Server']['cache_timestamp'] = $redis->get('misp:server_cache_timestamp:' . $data[$k]['Server']['id']);\n        }\n        return $data;\n    }\n\n    public function updateJSON()\n    {\n        $toUpdate = array('Galaxy', 'Noticelist', 'Warninglist', 'Taxonomy', 'ObjectTemplate');\n        $results = array();\n        foreach ($toUpdate as $target) {\n            $this->$target = ClassRegistry::init($target);\n            $result = $this->$target->update();\n            $results[$target] = $result === false ? false : true;\n        }\n        return $results;\n    }\n\n    public function resetRemoteAuthKey($id)\n    {\n        $server = $this->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('Server.id' => $id)\n        ));\n        if (empty($server)) {\n            return __('Invalid server');\n        }\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/users/resetauthkey/me';\n        try {\n            $response = $HttpSocket->post($uri, '{}', $request);\n        } catch (Exception $e) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $message = 'Could not reset the remote authentication key.';\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: ' . $message,\n            ));\n            return $message;\n        }\n        if ($response->isOk()) {\n            try {\n                $response = json_decode($response->body, true);\n            } catch (Exception $e) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $message = 'Invalid response received from the remote instance.';\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: ' . $message,\n                ));\n                return $message;\n            }\n            if (!empty($response['message'])) {\n                $authkey = $response['message'];\n            }\n            if (substr($authkey, 0, 17) === 'Authkey updated: ') {\n                $authkey = substr($authkey, 17, 57);\n            }\n            $server['Server']['authkey'] = $authkey;\n            $this->save($server);\n            return true;\n        } else {\n            return __('Could not reset the remote authentication key.');\n        }\n    }\n\n    public function reprioritise($id = false, $direction = 'up')\n    {\n        $servers = $this->find('all', array(\n            'recursive' => -1,\n            'order' => array('Server.priority ASC', 'Server.id ASC')\n        ));\n        $success = true;\n        if ($id) {\n            foreach ($servers as $k => $server) {\n                if ($server['Server']['id'] && $server['Server']['id'] == $id) {\n                    if (\n                        !($k === 0 && $direction === 'up') &&\n                        !(empty($servers[$k+1]) && $direction === 'down')\n                    ) {\n                        $temp = $servers[$k];\n                        $destination = $direction === 'up' ? $k-1 : $k+1;\n                        $servers[$k] = $servers[$destination];\n                        $servers[$destination] = $temp;\n                    } else {\n                        $success = false;\n                    }\n                }\n            }\n        }\n        foreach ($servers as $k => $server) {\n            $server['Server']['priority'] = $k + 1;\n            $result = $this->save($server);\n            $success = $success && $result;\n        }\n        return $success;\n    }\n\n    /**\n     * @param int $serverId\n     * @param string $relativeUri\n     * @param HttpSocket|null $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    private function serverGetRequest($serverId, $relativeUri, HttpSocket $HttpSocket = null)\n    {\n        $server = $this->find('first', array(\n            'conditions' => array('Server.id' => $serverId),\n        ));\n        if ($server === null) {\n            throw new Exception(__(\"Server with ID '$serverId' not found.\"));\n        }\n\n        if (!$HttpSocket) {\n            $HttpSocket = $this->setupHttpSocket($server);\n        }\n        $request = $this->setupSyncRequest($server);\n\n        $uri = $server['Server']['url'] . $relativeUri;\n        $response = $HttpSocket->get($uri, array(), $request);\n\n        if ($response === false) {\n            throw new Exception(__(\"Could not reach '$uri'.\"));\n        } else if ($response->code == 404) { // intentional !=\n            throw new NotFoundException(__(\"Fetching the '$uri' failed with HTTP error 404: Not Found\"));\n        } else if ($response->code == 405) { // intentional !=\n            $responseText = json_decode($response->body, true);\n            if ($responseText !== null) {\n                throw new Exception(sprintf(__(\"Fetching the '$uri' failed with HTTP error %s: %s\"), $response->code, $responseText['message']));\n            }\n        }\n\n        if ($response->code != 200) { // intentional !=\n            throw new Exception(sprintf(__(\"Fetching the '$uri' failed with HTTP error %s: %s\"), $response->code, $response->reasonPhrase));\n        }\n\n        $data = json_decode($response->body, true);\n        if ($data === null) {\n            throw new Exception(__('Could not parse JSON: ') . json_last_error_msg(), json_last_error());\n        }\n\n        return array($data, $response);\n    }\n\n    public function getRemoteUser($id)\n    {\n        $server = $this->find('first', array(\n            'conditions' => array('Server.id' => $id),\n            'recursive' => -1\n        ));\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/users/view/me.json';\n        try {\n            $response = $HttpSocket->get($uri, false, $request);\n        } catch (Exception $e) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $message = __('Could not reset fetch remote user account.');\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: ' . $message,\n            ));\n            return $message;\n        }\n        if ($response->isOk()) {\n            $user = json_decode($response->body, true);\n            if (!empty($user['User'])) {\n                $result = array(\n                    'Email' => $user['User']['email'],\n                    'Role name' => isset($user['Role']['name']) ? $user['Role']['name'] : 'Unknown, outdated instance',\n                    'Sync flag' => isset($user['Role']['perm_sync']) ? ($user['Role']['perm_sync'] ? 1 : 0) : 'Unknown, outdated instance'\n                );\n                return $result;\n            } else {\n                return __('No user object received in response.');\n            }\n        } else {\n            return $response->code;\n        }\n    }\n}\n", "<div class=\"feed form\">\n<?php echo $this->Form->create('Feed');?>\n    <fieldset>\n        <legend><?php echo __('Add MISP Feed');?></legend>\n        <p><?php echo __('Add a new MISP feed source.');?></p>\n    <?php\n        echo $this->Form->input('enabled', array());\n        echo $this->Form->input('caching_enabled', array('label' => __('Caching enabled')));\n    ?>\n        <div class=\"input clear\"></div>\n    <?php\n        echo $this->Form->input('lookup_visible', array('label' => __('Lookup visible')));\n        echo $this->Form->input('name', array(\n                'div' => 'input clear',\n                'placeholder' => __('Feed name'),\n                'class' => 'form-control span6',\n        ));\n        echo $this->Form->input('provider', array(\n                'div' => 'input clear',\n                'label' => __('Provider'),\n                'placeholder' => __('Name of the content provider'),\n                'class' => 'form-control span6'\n        ));\n        echo $this->Form->input('input_source', array(\n                'label' => __('Input Source'),\n                'div' => 'input clear',\n                'options' => array('network' => 'Network', 'local' => 'Local'),\n                'class' => 'form-control span6'\n        ));\n        ?>\n        <div class=\"input clear\"></div>\n        <div id=\"DeleteLocalFileDiv\" class=\"optionalField\">\n                <?php\n                    echo $this->Form->input('delete_local_file', array(\n                            'label' => __('Remove input after ingestion')\n                    ));\n            ?>\n        </div>\n        <div class=\"input clear\"></div>\n        <?php\n        echo $this->Form->input('url', array(\n                'div' => 'input clear',\n                'label' => __('URL'),\n                'placeholder' => __('URL of the feed'),\n                'class' => 'form-control span6'\n        ));\n        echo $this->Form->input('source_format', array(\n                'label' => __('Source Format'),\n                'div' => 'input clear',\n                'options' => $feed_types,\n                'class' => 'form-control span6'\n        ));\n    ?>\n        <div id=\"HeadersDiv\">\n    <?php\n            echo $this->Form->input('headers', array(\n                'label' => __('Any headers to be passed with requests (for example: Authorization)'),\n                'div' => 'clear',\n                'class' => 'input-xxlarge',\n                'type' => 'textarea',\n                'placeholder' => __('Line break separated list of headers in the \"headername: value\" format')\n            ));\n    ?>\n            <div>\n                <span id=\"basicAuthFormEnable\" class=\"btn btn-inverse quick-popover\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Add Basic Auth');?></span>\n                <div id=\"basicAuthForm\" class=\"quick-form\" style=\"display:none;\">\n                        <fieldset>\n                            <div class=\"input\">\n                                <label for=\"BasicAuthUsername\"><?php echo __('Username');?></label>\n                                <input class=\"form-control\" type=\"text\" id=\"BasicAuthUsername\"><br />\n                            </div>\n                            <div class=\"input\">\n                                <label for =\"BasicAuthPassword\"><?php echo __('Password');?></label>\n                                <input class=\"form-control\" type=\"text\" id=\"BasicAuthPassword\"><br />\n                            </div>\n                        </fieldset>\n                        <span class=\"btn-inverse btn\" onClick=\"add_basic_auth();\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Add basic auth header'); ?></span>\n                </div>\n            </div><br />\n        </div>\n        <div id=\"TargetDiv\" class=\"optionalField\">\n    <?php\n        echo $this->Form->input('fixed_event', array(\n                'label' => __('Target Event'),\n                'div' => 'input clear',\n                'options' => array('New Event Each Pull', 'Fixed Event'),\n                'class' => 'form-control span6'\n        ));\n    ?>\n        </div>\n        <div id=\"TargetEventDiv\" class=\"optionalField\">\n    <?php\n        echo $this->Form->input('target_event', array(\n                'label' => __('Target Event ID'),\n                'div' => 'input clear',\n                'placeholder' => __('Leave blank unless you want to reuse an existing event.'),\n                'class' => 'form-control span6'\n        ));\n    ?>\n        </div>\n        <div id=\"settingsCsvValueDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.csv.value', array(\n                        'label' => __('Value field(s) in the CSV'),\n                        'title' => __('Select one or several fields that should be parsed by the CSV parser and converted into MISP attributes'),\n                        'div' => 'input clear',\n                        'placeholder' => __('2,3,4 (column position separated by commas)'),\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"settingsCsvDelimiterDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.csv.delimiter', array(\n                        'label' => __('Delimiter'),\n                        'title' => __('Set the default CSV delimiter (default = \",\")'),\n                        'div' => 'input clear',\n                        'placeholder' => ',',\n                        'class' => 'form-control span6',\n                        'value' => isset($this->request->data['Feed']['settings']['csv']['delimiter']) ? $this->request->data['Feed']['settings']['csv']['delimiter'] : ','\n                ));\n            ?>\n        </div>\n        <div id=\"settingsCommonExcluderegexDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.common.excluderegex', array(\n                        'label' => __('Exclusion Regex'),\n                        'title' => __('Add a regex pattern for detecting iocs that should be skipped (this can be useful to exclude any references to the actual report / feed for example)'),\n                        'div' => 'input clear',\n                        'placeholder' => __('Regex pattern, for example: \"/^https://myfeedurl/i'),\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"PublishDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('publish', array(\n                    'label' => __('Auto Publish'),\n                    'title' => __('Publish events directly after pulling the feed - if you would like to review the event before publishing uncheck this'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <div id=\"OverrideIdsDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('override_ids', array(\n                    'label' => __('Override IDS Flag'),\n                    'title' => __('If checked, the IDS flags will always be set to off when pulling from this feed'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <div id=\"DeltaMergeDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('delta_merge', array(\n                    'label' => __('Delta Merge'),\n                    'title' => __('Merge attributes (only add new attributes, remove revoked attributes)'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n    <?php\n        echo $this->Form->input('distribution', array(\n                'options' => array($distributionLevels),\n                'div' => 'input clear',\n                'label' => __('Distribution'),\n                'selected' => isset($this->request->data['Feed']['distribution']) ? $this->request->data['Feed']['distribution'] : 3,\n        ));\n    ?>\n        <div id=\"SGContainer\" style=\"display:none;\">\n    <?php\n        if (!empty($sharingGroups)) {\n            echo $this->Form->input('sharing_group_id', array(\n                    'options' => array($sharingGroups),\n                    'label' => __('Sharing Group'),\n            ));\n        }\n    ?>\n        </div>\n        <div class=\"input clear\"></div>\n    <?php\n        echo $this->Form->input('tag_id', array(\n                'options' => $tags,\n                'label' => __('Default Tag'),\n                'selected' => isset($this->request->data['Feed']['tag_id']) ? $this->request->data['Feed']['tag_id'] : 0,\n        ));\n        echo $this->Form->input('pull_rules', array('style' => 'display:none;', 'label' => false, 'div' => false));\n    ?>\n    </fieldset>\n    <b><?php echo __('Filter rules');?>:</b><br />\n    <span id=\"pull_tags_OR\" style=\"display:none;\"><?php echo __('Events with the following tags allowed');?>: <span id=\"pull_tags_OR_text\" style=\"color:green;\"></span><br /></span>\n    <span id=\"pull_tags_NOT\" style=\"display:none;\"><?php echo __('Events with the following tags blocked');?>: <span id=\"pull_tags_NOT_text\" style=\"color:red;\"></span><br /></span>\n    <span id=\"pull_orgs_OR\" style=\"display:none;\"><?php echo __('Events with the following organisations allowed');?>: <span id=\"pull_orgs_OR_text\" style=\"color:green;\"></span><br /></span>\n    <span id=\"pull_orgs_NOT\" style=\"display:none;\"><?php echo __('Events with the following organisations blocked');?>: <span id=\"pull_orgs_NOT_text\" style=\"color:red;\"></span><br /></span>\n    <span id=\"pull_modify\"  class=\"btn btn-inverse\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Modify');?></span><br /><br />\n    <?php\n    echo $this->Form->button(__('Add'), array('class' => 'btn btn-primary'));\n    echo $this->Form->end();\n    ?>\n    <div id=\"hiddenRuleForms\">\n        <?php echo $this->element('serverRuleElements/pull'); ?>\n    </div>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'feeds', 'menuItem' => 'add'));\n?>\n<script type=\"text/javascript\">\n\nvar rules = {\"pull\": {\"tags\": {\"OR\":[], \"NOT\":[]}, \"orgs\": {\"OR\":[], \"NOT\":[]}}};\nvar validOptions = ['pull'];\nvar validFields = ['tags', 'orgs'];\nvar modelContext = 'Feed';\n\n$(document).ready(function() {\n    feedDistributionChange();\n    $(\"#pull_modify\").click(function() {\n        serverRuleFormActivate('pull');\n    });\n    $(\"#FeedDistribution\").change(function() {\n        feedDistributionChange();\n    });\n    feedFormUpdate();\n    $('#basicAuthFormEnable').click(function() {\n        $('#basicAuthFormEnable').hide();\n        $('#basicAuthForm').show();\n    })\n});\n$(\"#FeedSourceFormat, #FeedFixedEvent, #FeedInputSource\").change(function() {\n    feedFormUpdate();\n});\n</script>\n", "<div class=\"feed form\">\n<?php echo $this->Form->create('Feed');?>\n    <fieldset>\n        <legend><?php echo __('Edit MISP Feed');?></legend>\n        <p><?php echo __('Edit a new MISP feed source.');?></p>\n    <?php\n            echo $this->Form->input('enabled', array(\n                'type' => 'checkbox'\n            ));\n            echo $this->Form->input('caching_enabled', array(\n                'type' => 'checkbox'\n            ));\n    ?>\n        <div class=\"input clear\"></div>\n    <?php\n            echo $this->Form->input('lookup_visible', array(\n                'type' => 'checkbox'\n            ));\n            echo $this->Form->input('name', array(\n                    'div' => 'input clear',\n                    'placeholder' => __('Feed name'),\n                    'class' => 'form-control span6',\n            ));\n            echo $this->Form->input('provider', array(\n                    'div' => 'input clear',\n                    'placeholder' => __('Name of the content provider'),\n                    'class' => 'form-control span6'\n            ));\n            echo $this->Form->input('input_source', array(\n                    'div' => 'input clear',\n                    'options' => array('network' => 'Network', 'local' => 'Local'),\n                    'class' => 'form-control span6'\n            ));\n            ?>\n            <div id=\"HeadersDiv\"<?php echo $this->request->data['Feed']['input_source'] == 'file' ? 'style=\"display:none;\"' : '';?>>\n        <?php\n                echo $this->Form->input('headers', array(\n                    'label' => __('Any headers to be passed with requests (for example: Authorization)'),\n                    'div' => 'clear',\n                    'class' => 'input-xxlarge',\n                    'type' => 'textarea',\n                    'placeholder' => __('Line break separated list of headers in the \"headername: value\" format')\n                ));\n        ?>\n            <div>\n                <span id=\"basicAuthFormEnable\" class=\"btn btn-inverse quick-popover\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Add Basic Auth');?></span>\n                <div id=\"basicAuthForm\" class=\"quick-form\" style=\"display:none;\">\n                        <fieldset>\n                            <div class=\"input\">\n                                <label for=\"BasicAuthUsername\"><?php echo __('Username');?></label>\n                                <input class=\"form-control\" type=\"text\" id=\"BasicAuthUsername\"><br />\n                            </div>\n                            <div class=\"input\">\n                                <label for =\"BasicAuthPassword\"><?php echo __('Password');?></label>\n                                <input class=\"form-control\" type=\"text\" id=\"BasicAuthPassword\"><br />\n                            </div>\n                        </fieldset>\n                        <span class=\"btn-inverse btn\" onClick=\"add_basic_auth();\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Add basic auth header'); ?></span>\n                </div>\n            </div><br />\n            </div>\n            <div class=\"input clear\"></div>\n            <div id=\"DeleteLocalFileDiv\" class=\"optionalField\">\n                    <?php\n                        echo $this->Form->input('delete_local_file', array(\n                                'label' => __('Remove input after ingestion')\n                        ));\n                ?>\n            </div>\n            <div class=\"input clear\"></div>\n            <?php\n            echo $this->Form->input('url', array(\n                    'div' => 'input clear',\n                    'label' => __('URL'),\n                    'placeholder' => __('URL of the feed'),\n                    'class' => 'form-control span6'\n            ));\n            echo $this->Form->input('source_format', array(\n                    'label' => __('Source Format'),\n                    'div' => 'input clear',\n                    'options' => $feed_types,\n                    'class' => 'form-control span6'\n            ));\n        ?>\n        <div id=\"TargetDiv\" class=\"optionalField\">\n        <?php\n            echo $this->Form->input('fixed_event', array(\n                    'label' => __('Target Event'),\n                    'div' => 'input clear',\n                    'options' => array('New Event Each Pull', 'Fixed Event'),\n                    'class' => 'form-control span6'\n            ));\n        ?>\n        </div>\n        <div id=\"TargetEventDiv\" class=\"optionalField\">\n        <?php\n            echo $this->Form->input('target_event', array(\n                    'label' => __('Target Event ID'),\n                    'div' => 'input clear',\n                    'placeholder' => __('Leave blank unless you want to reuse an existing event.'),\n                    'class' => 'form-control span6'\n            ));\n        ?>\n        </div>\n        <div id=\"settingsCsvValueDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.csv.value', array(\n                        'label' => __('Value field(s) in the CSV'),\n                        'title' => __('Select one or several fields that should be parsed by the CSV parser and converted into MISP attributes'),\n                        'div' => 'input clear',\n                        'placeholder' => __('2,3,4 (column position separated by commas)'),\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"settingsCsvDelimiterDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.csv.delimiter', array(\n                        'label' => __('Delimiter'),\n                        'title' => __('Set the default CSV delimiter (default = \",\")'),\n                        'div' => 'input clear',\n                        'placeholder' => ',',\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"settingsCommonExcluderegexDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.common.excluderegex', array(\n                        'label' => __('Exclusion Regex'),\n                        'title' => __('Add a regex pattern for detecting iocs that should be skipped (this can be useful to exclude any references to the actual report / feed for example)'),\n                        'div' => 'input clear',\n                        'placeholder' => __('Regex pattern, for example: \"/^https://myfeedurl/i\"'),\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"PublishDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('publish', array(\n                    'label' => __('Auto Publish'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <div id=\"OverrideIdsDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('override_ids', array(\n                    'label' => __('Override IDS Flag'),\n                    'title' => __('If checked, the IDS flags will always be set to off when pulling from this feed'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <div id=\"DeltaMergeDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('delta_merge', array(\n                    'label' => __('Delta Merge'),\n                    'title' => __('Merge attributes (only add new attributes, remove revoked attributes)'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <?php\n            echo $this->Form->input('distribution', array(\n                    'options' => array($distributionLevels),\n                    'div' => 'input clear',\n                    'label' => __('Distribution'),\n            ));\n        ?>\n        <div id=\"SGContainer\" style=\"display:none;\">\n        <?php\n            if (!empty($sharingGroups)) {\n                echo $this->Form->input('sharing_group_id', array(\n                        'options' => array($sharingGroups),\n                        'label' => __('Sharing Group'),\n                ));\n            }\n        ?>\n        </div>\n        <div class=\"input clear\"></div>\n        <?php\n            echo $this->Form->input('tag_id', array(\n                    'options' => $tags,\n                    'label' => __('Default Tag'),\n            ));\n        echo $this->Form->input('pull_rules', array('style' => 'display:none;', 'label' => false, 'div' => false));\n    ?>\n    </fieldset>\n    <b><?php echo __('Filter rules');?>:</b><br />\n    <span id=\"pull_tags_OR\" style=\"display:none;\"><?php echo __('Events with the following tags allowed');?>: <span id=\"pull_tags_OR_text\" style=\"color:green;\"></span><br /></span>\n    <span id=\"pull_tags_NOT\" style=\"display:none;\"><?php echo __('Events with the following tags blocked');?>: <span id=\"pull_tags_NOT_text\" style=\"color:red;\"></span><br /></span>\n    <span id=\"pull_orgs_OR\" style=\"display:none;\"><?php echo __('Events with the following organisations allowed');?>: <span id=\"pull_orgs_OR_text\" style=\"color:green;\"></span><br /></span>\n    <span id=\"pull_orgs_NOT\" style=\"display:none;\"><?php echo __('Events with the following organisations blocked');?>: <span id=\"pull_orgs_NOT_text\" style=\"color:red;\"></span><br /></span>\n    <span id=\"pull_modify\"  class=\"btn btn-inverse\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Modify');?></span><br /><br />\n    <?php\n    echo $this->Form->button(__('Edit'), array('class' => 'btn btn-primary'));\n    echo $this->Form->end();\n    ?>\n    <div id=\"hiddenRuleForms\">\n        <?php echo $this->element('serverRuleElements/pull'); ?>\n    </div>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'feeds', 'menuItem' => 'edit'));\n?>\n<script type=\"text/javascript\">\n//\nvar formInfoValues = {\n        'ServerUrl' : \"<?php echo __('The base-url to the external server you want to sync with. Example: https://misppriv.circl.lu');?>\",\n        'ServerName' : \"<?php echo __('A name that will make it clear to your users what this instance is. For example: Organisation A\\'s instance');?>\",\n        'ServerOrganization' : \"<?php echo __('The organization having the external server you want to sync with. Example: BE');?>\",\n        'ServerAuthkey' : \"<?php echo __('You can find the authentication key on your profile on the external server.');?>\",\n        'ServerPush' : \"<?php echo __('Allow the upload of events and their attributes.');?>\",\n        'ServerPull' : \"<?php echo __('Allow the download of events and their attributes from the server.');?>\",\n        'ServerUnpublishEvent' : '<?php echo __('Unpublish new event (working with Push event).');?>',\n        'ServerPublishWithoutEmail' : '<?php echo __('Publish new event without email (working with Pull event).');?>',\n        'ServerSubmittedCert' : \"<?php echo __('You can also upload a certificate file if the instance you are trying to connect to has its own signing authority.');?>\",\n        'ServerSelfSigned' : \"<?php echo __('Click this, if you would like to allow a connection despite the other instance using a self-signed certificate (not recommended).');?>\"\n};\n\n\nvar rules = {\"pull\": {\"tags\": {\"OR\":[], \"NOT\":[]}, \"orgs\": {\"OR\":[], \"NOT\":[]}}};\nvar validOptions = ['pull'];\nvar validFields = ['tags', 'orgs'];\nvar modelContext = 'Feed';\nvar tags = [];\nvar orgs = [];\n\n$(document).ready(function() {\n    rules = convertServerFilterRules(rules);\n    serverRulePopulateTagPicklist();\n    feedDistributionChange();\n    $(\"#pull_modify\").click(function() {\n        serverRuleFormActivate('pull');\n    });\n    $(\"#FeedDistribution\").change(function() {\n        feedDistributionChange();\n    });\n    $('#basicAuthFormEnable').click(function() {\n        $('#basicAuthFormEnable').hide();\n        $('#basicAuthForm').show();\n    })\n    feedFormUpdate();\n});\n\n$(\"#FeedSourceFormat, #FeedFixedEvent, #FeedInputSource\").change(function() {\n    feedFormUpdate();\n});\n</script>\n"], "fixing_code": ["<?php\nApp::uses('AppController', 'Controller');\nApp::uses('Xml', 'Utility');\n\nclass FeedsController extends AppController\n{\n    public $components = array('Security' ,'RequestHandler');   // XXX ACL component\n\n    public $paginate = array(\n            'limit' => 60,\n            'recursive' => -1,\n            'contain' => array('Tag', 'SharingGroup'),\n            'maxLimit' => 9999, // LATER we will bump here on a problem once we have more than 9999 events\n            'order' => array(\n                    'Feed.default' => 'DESC',\n                    'Feed.id' => 'ASC'\n            ),\n    );\n\n    public $uses = array('Feed');\n\n    public function beforeFilter()\n    {\n        parent::beforeFilter();\n        $this->Security->unlockedActions[] = 'previewIndex';\n        $this->Security->unlockedActions[] = 'feedCoverage';\n        if (!$this->_isSiteAdmin() && $this->Auth->user('org_id') != Configure::read('MISP.host_org_id')) {\n            throw new MethodNotAllowedException(__('You don\\'t have the required privileges to do that.'));\n        }\n    }\n\n    public function index()\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $this->Feed->load_default_feeds();\n        $scope = isset($this->passedArgs['scope']) ? $this->passedArgs['scope'] : 'all';\n        if ($scope !== 'all') {\n            if ($scope == 'enabled') {\n                $this->paginate['conditions'][] = array(\n                    'OR' => array(\n                        'Feed.enabled' => 1,\n                        'Feed.caching_enabled' => 1\n                    )\n                );\n            } else {\n                $this->paginate['conditions'][] = array(\n                    'Feed.default' => $scope == 'custom' ? 0 : 1\n                );\n            }\n        }\n        if ($this->_isRest()) {\n            $keepFields = array('conditions', 'contain', 'recursive', 'sort');\n            $searchParams = array();\n            foreach ($keepFields as $field) {\n                if (!empty($this->paginate[$field])) {\n                    $searchParams[$field] = $this->paginate[$field];\n                }\n            }\n\n            $data = $this->Feed->find('all', $searchParams);\n        } else {\n            $data = $this->paginate();\n        }\n        $this->loadModel('Event');\n        foreach ($data as $key => $value) {\n            if ($value['Feed']['event_id'] != 0 && $value['Feed']['fixed_event']) {\n                $event = $this->Event->find('first', array('conditions' => array('Event.id' => $value['Feed']['event_id']), 'recursive' => -1, 'fields' => array('Event.id')));\n                if (empty($event)) {\n                    $data[$key]['Feed']['event_error'] = true;\n                }\n            }\n        }\n        if ($this->_isSiteAdmin()) {\n            $data = $this->Feed->attachFeedCacheTimestamps($data);\n        }\n        if ($this->_isRest()) {\n            foreach ($data as $k => $v) {\n                unset($data[$k]['SharingGroup']);\n                if (empty($data[$k]['Tag']['id'])) {\n                    unset($data[$k]['Tag']);\n                }\n            }\n            return $this->RestResponse->viewData($data, $this->response->type());\n        }\n        $this->set('scope', $scope);\n        $this->set('feeds', $data);\n        $this->loadModel('Event');\n        $this->set('feed_types', $this->Feed->feed_types);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n    }\n\n    public function view($feedId)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $feed = $this->Feed->find('first', array(\n            'conditions' => array('Feed.id' => $feedId),\n            'recursive' => -1,\n            'contain' => array('Tag')\n        ));\n        $feed['Feed']['cached_elements'] = $this->Feed->getCachedElements($feed['Feed']['id']);\n        $feed['Feed']['coverage_by_other_feeds'] = $this->Feed->getFeedCoverage($feed['Feed']['id'], 'feed', 'all') . '%';\n        if ($this->_isRest()) {\n            if (empty($feed['Tag']['id'])) {\n                unset($feed['Tag']);\n            }\n            return $this->RestResponse->viewData($feed, $this->response->type());\n        }\n        $feeds = $this->Feed->getAllCachingEnabledFeeds($feed['Feed']['id'], true);\n        $this->set('other_feeds', $feeds);\n        $this->set('feed', $feed);\n    }\n\n    public function feedCoverage($feedId)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $feed = $this->Feed->find('first', array(\n            'conditions' => array('Feed.id' => $feedId),\n            'recursive' => -1,\n            'contain' => array('Tag')\n        ));\n        $result = $this->Feed->getFeedCoverage($feed['Feed']['id'], 'feed', $this->request->data);\n        return $this->RestResponse->viewData($result, $this->response->type());\n\n    }\n\n    public function importFeeds()\n    {\n        if ($this->request->is('post')) {\n            if (isset($this->request->data['Feed']['json'])) {\n                $this->request->data = $this->request->data['Feed']['json'];\n            }\n            $results = $this->Feed->importFeeds($this->request->data, $this->Auth->user());\n            if ($results['successes'] > 0) {\n                $flashType = 'success';\n                $message = $results['successes'] . ' new feeds added.';\n            } else {\n                $flashType = 'info';\n                $message = 'No new feeds to add.';\n            }\n            if ($results['fails']) {\n                $message .= ' ' . $results['fails'] . ' feeds could not be added (possibly because they already exist)';\n            }\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Feed', 'importFeeds', false, $this->response->type(), $message);\n            } else {\n                $this->Flash->{$flashType}($message);\n                $this->redirect(array('controller' => 'Feeds', 'action' => 'index', 'all'));\n            }\n        }\n    }\n\n    public function add()\n    {\n        $this->loadModel('Event');\n        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $distributionLevels = $this->Event->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        $this->set('sharingGroups', $sgs);\n        $this->set('feed_types', $this->Feed->getFeedTypesOptions());\n        $tags = $this->Event->EventTag->Tag->find('list', array('fields' => array('Tag.name'), 'order' => array('lower(Tag.name) asc')));\n        $tags[0] = 'None';\n        $this->set('tags', $tags);\n        if (empty($this->request->data['Feed']['fixed_event'])) {\n            $this->request->data['Feed']['fixed_event'] = 1;\n        }\n        if ($this->request->is('post')) {\n            if ($this->_isRest()) {\n                if (empty($this->request->data['Feed'])) {\n                    $this->request->data['Feed'] = $this->request->data;\n                    if (empty($this->request->data['Feed']['source_format'])) {\n                        $this->request->data['Feed']['source_format'] = 'freetext';\n                    }\n                    if (empty($this->request->data['Feed']['fixed_event'])) {\n                        $this->request->data['Feed']['source_format'] = 1;\n                    }\n                }\n            }\n            $error = false;\n            if (isset($this->request->data['Feed']['pull_rules'])) {\n                $this->request->data['Feed']['rules'] = $this->request->data['Feed']['pull_rules'];\n            }\n            if (!isset($this->request->data['Feed']['distribution'])) {\n                $this->request->data['Feed']['distribution'] = 0;\n            }\n            if ($this->request->data['Feed']['distribution'] != 4) {\n                $this->request->data['Feed']['sharing_group_id'] = 0;\n            }\n            $this->request->data['Feed']['default'] = 0;\n            if (!isset($this->request->data['Feed']['source_format'])) {\n                $this->request->data['Feed']['source_format'] = 'freetext';\n            }\n            if ($this->request->data['Feed']['source_format'] == 'freetext') {\n                if ($this->request->data['Feed']['fixed_event'] == 1) {\n                    if (!empty($this->request->data['Feed']['target_event']) && is_numeric($this->request->data['Feed']['target_event'])) {\n                        $this->request->data['Feed']['event_id'] = $this->request->data['Feed']['target_event'];\n                    }\n                }\n            }\n            if (!isset($this->request->data['Feed']['settings'])) {\n                $this->request->data['Feed']['settings'] = array();\n            } else {\n                if (!empty($this->request->data['Feed']['settings']['common']['excluderegex']) && !$this->__checkRegex($this->request->data['Feed']['settings']['common']['excluderegex'])) {\n                    $this->Flash->error('Invalid exclude regex. Make sure it\\'s a delimited PCRE regex pattern.');\n                    return true;\n                }\n            }\n            if (isset($this->request->data['Feed']['settings']['delimiter']) && empty($this->request->data['Feed']['settings']['delimiter'])) {\n                $this->request->data['Feed']['settings']['delimiter'] = ',';\n            }\n            if (empty($this->request->data['Feed']['target_event'])) {\n                $this->request->data['Feed']['target_event'] = 0;\n            }\n            if (empty($this->request->data['Feed']['lookup_visible'])) {\n                $this->request->data['Feed']['lookup_visible'] = 0;\n            }\n            if (empty($this->request->data['Feed']['input_source'])) {\n                $this->request->data['Feed']['input_source'] = 'network';\n            } else {\n                $this->request->data['Feed']['input_source'] = strtolower($this->request->data['Feed']['input_source']);\n            }\n            if (!in_array($this->request->data['Feed']['input_source'], array('network', 'local'))) {\n                $this->request->data['Feed']['input_source'] = 'network';\n            }\n            if (!isset($this->request->data['Feed']['delete_local_file'])) {\n                $this->request->data['Feed']['delete_local_file'] = 0;\n            }\n            $this->request->data['Feed']['settings'] = json_encode($this->request->data['Feed']['settings']);\n            $this->request->data['Feed']['event_id'] = !empty($this->request->data['Feed']['fixed_event']) ? $this->request->data['Feed']['target_event'] : 0;\n            if (!$error) {\n                $result = $this->Feed->save($this->request->data);\n                if ($result) {\n                    $message = __('Feed added.');\n                    if ($this->_isRest()) {\n                        $feed = $this->Feed->find('first', array('conditions' => array('Feed.id' => $this->Feed->id), 'recursive' => -1));\n                        return $this->RestResponse->viewData($feed, $this->response->type());\n                    }\n                    $this->Flash->success($message);\n                    $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n                } else {\n                    $message = __('Feed could not be added. Reason: %s', json_encode($this->Feed->validationErrors));\n                    if ($this->_isRest()) {\n                        return $this->RestResponse->saveFailResponse('Feeds', 'add', false, $message, $this->response->type());\n                    }\n                    $this->Flash->error($message);\n                    $this->request->data['Feed']['settings'] = json_decode($this->request->data['Feed']['settings'], true);\n                }\n            }\n        } elseif ($this->_isRest()) {\n            return $this->RestResponse->describe('Feeds', 'add', false, $this->response->type());\n        }\n    }\n\n    private function __checkRegex($pattern)\n    {\n        if (@preg_match($pattern, null) === false) {\n            return false;\n        }\n        return true;\n    }\n\n    public function edit($feedId)\n    {\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        $this->set('feed', $this->Feed->data);\n        $this->loadModel('Event');\n        $sgs = $this->Event->SharingGroup->fetchAllAuthorised($this->Auth->user(), 'name', 1);\n        $distributionLevels = $this->Event->distributionLevels;\n        if (empty($sgs)) {\n            unset($distributionLevels[4]);\n        }\n        $this->set('distributionLevels', $distributionLevels);\n        $this->set('sharingGroups', $sgs);\n        $tags = $this->Event->EventTag->Tag->find('list', array('fields' => array('Tag.name'), 'order' => array('lower(Tag.name) asc')));\n        $tags[0] = 'None';\n        $this->set('feed_types', $this->Feed->getFeedTypesOptions());\n        $this->set('tags', $tags);\n        if (!empty($this->Feed->data['Feed']['settings'])) {\n            $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);\n        }\n        if ($this->request->is('post') || $this->request->is('put')) {\n            if ($this->_isRest()) {\n                if (empty($this->request->data['Feed'])) {\n                    $this->request->data['Feed'] = $this->request->data;\n                }\n            }\n            if (isset($this->request->data['Feed']['pull_rules'])) {\n                $this->request->data['Feed']['rules'] = $this->request->data['Feed']['pull_rules'];\n            }\n            if (isset($this->request->data['Feed']['distribution']) && $this->request->data['Feed']['distribution'] != 4) {\n                $this->request->data['Feed']['sharing_group_id'] = 0;\n            }\n            $this->request->data['Feed']['id'] = $feedId;\n            if (!empty($this->request->data['Feed']['source_format']) && ($this->request->data['Feed']['source_format'] == 'freetext' || $this->request->data['Feed']['source_format'] == 'csv')) {\n                if ($this->request->data['Feed']['fixed_event'] == 1) {\n                    if (isset($this->request->data['Feed']['target_event']) && is_numeric($this->request->data['Feed']['target_event'])) {\n                        $this->request->data['Feed']['event_id'] = $this->request->data['Feed']['target_event'];\n                    } else {\n                        $this->request->data['Feed']['event_id'] = 0;\n                    }\n                }\n            }\n            if (!isset($this->request->data['Feed']['settings'])) {\n                $this->request->data['Feed']['settings'] = array();\n            } else {\n                if (!empty($this->request->data['Feed']['settings']['common']['excluderegex']) && !$this->__checkRegex($this->request->data['Feed']['settings']['common']['excluderegex'])) {\n                    $this->Flash->error('Invalid exclude regex. Make sure it\\'s a delimited PCRE regex pattern.');\n                    return true;\n                }\n            }\n            if (isset($this->request->data['Feed']['settings']['delimiter']) && empty($this->request->data['Feed']['settings']['delimiter'])) {\n                $this->request->data['Feed']['settings']['delimiter'] = ',';\n            }\n            $this->request->data['Feed']['settings'] = json_encode($this->request->data['Feed']['settings']);\n            $fields = array('id', 'name', 'provider', 'enabled', 'caching_enabled','rules', 'url', 'distribution', 'sharing_group_id', 'tag_id', 'fixed_event', 'event_id', 'publish', 'delta_merge', 'source_format', 'override_ids', 'settings', 'input_source', 'delete_local_file', 'lookup_visible', 'headers');\n            $feed = array();\n            foreach ($fields as $field) {\n                if (isset($this->request->data['Feed'][$field])) {\n                    $feed[$field] = $this->request->data['Feed'][$field];\n                }\n            }\n            $result = $this->Feed->save($feed);\n            if ($result) {\n                $feedCache = APP . 'tmp' . DS . 'cache' . DS . 'misp_feed_' . intval($feedId) . '.cache';\n                if (file_exists($feedCache)) {\n                    unlink($feedCache);\n                }\n                $message = __('Feed added.');\n                if ($this->_isRest()) {\n                    $feed = $this->Feed->find('first', array('conditions' => array('Feed.id' => $this->Feed->id), 'recursive' => -1));\n                    return $this->RestResponse->viewData($feed, $this->response->type());\n                }\n                $this->Flash->success($message);\n                $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n            } else {\n                $message = __('Feed could not be updated. Reason: %s', json_encode($this->Feed->validationErrors));\n                if ($this->_isRest()) {\n                    return $this->RestResponse->saveFailResponse('Feeds', 'add', false, $message, $this->response->type());\n                }\n                $this->Flash->error($message);\n            }\n        } else {\n            if ($this->_isRest()) {\n                return $this->RestResponse->describe('Feeds', 'edit', false, $this->response->type());\n            }\n            if (!isset($this->request->data['Feed'])) {\n                $this->request->data = $this->Feed->data;\n                if ($this->Feed->data['Feed']['event_id']) {\n                    $this->request->data['Feed']['target_event'] = $this->Feed->data['Feed']['event_id'];\n                }\n            }\n            $this->request->data['Feed']['pull_rules'] = $this->request->data['Feed']['rules'];\n        }\n    }\n\n    public function delete($feedId)\n    {\n        if (!$this->request->is('post') && !$this->request->is('delete')) {\n            throw new MethodNotAllowedException(__('Action not allowed, post or delete request expected.'));\n        }\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        if ($this->Feed->delete($feedId)) {\n            $message = 'Feed deleted.';\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveSuccessResponse('Feeds', 'delete', $feedId, false, $message);\n            }\n            $this->Flash->success($message);\n        } else {\n            $message = 'Feed could not be deleted.';\n            if ($this->_isRest()) {\n                return $this->RestResponse->saveFailResponse('Feeds', 'delete', false, $message, $this->response->type());\n            }\n            $this->Flash->error($message);\n        }\n        $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n    }\n\n    public function fetchFromFeed($feedId)\n    {\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        if (!empty($this->Feed->data['Feed']['settings'])) {\n            $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);\n        }\n        if (!$this->Feed->data['Feed']['enabled']) {\n            $this->Flash->info(__('Feed is currently not enabled. Make sure you enable it.'));\n            $this->redirect(array('action' => 'index'));\n        }\n        if (Configure::read('MISP.background_jobs')) {\n            $this->loadModel('Job');\n            $this->Job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'fetch_feeds',\n                    'job_input' => 'Feed: ' . $feedId,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Starting fetch from Feed.'),\n            );\n            $this->Job->save($data);\n            $jobId = $this->Job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('fetchFeed', $this->Auth->user('id'), $feedId, $jobId),\n                    true\n            );\n            $this->Job->saveField('process_id', $process_id);\n            $message = __('Pull queued for background execution.');\n        } else {\n            $result = $this->Feed->downloadFromFeedInitiator($feedId, $this->Auth->user());\n            if (!$result) {\n                if ($this->_isRest()) {\n                    return $this->RestResponse->viewData(array('result' => __('Fetching the feed has failed.')), $this->response->type());\n                } else {\n                    $this->Flash->error(__('Fetching the feed has failed.'));\n                    $this->redirect(array('action' => 'index'));\n                }\n            }\n            $message = __('Fetching the feed has successfully completed.');\n            if ($this->Feed->data['Feed']['source_format'] == 'misp') {\n                if (isset($result['add'])) {\n                    $message .= ' Downloaded ' . count($result['add']) . ' new event(s).';\n                }\n                if (isset($result['edit'])) {\n                    $message .= ' Updated ' . count($result['edit']) . ' event(s).';\n                }\n            }\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData(array('result' => $message), $this->response->type());\n        } else {\n            $this->Flash->success($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    public function fetchFromAllFeeds()\n    {\n        $feeds = $this->Feed->find('all', array(\n            'recursive' => -1,\n            'fields' => array('id')\n        ));\n        foreach ($feeds as $feed) {\n            $feedId = $feed['Feed']['id'];\n            $this->Feed->id = $feedId;\n            $this->Feed->read();\n            if (!empty($this->Feed->data['Feed']['settings'])) {\n                $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);\n            }\n            if (!$this->Feed->data['Feed']['enabled']) {\n                continue;\n            }\n            if (Configure::read('MISP.background_jobs')) {\n                $this->loadModel('Job');\n                $this->Job->create();\n                $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'fetch_feed',\n                    'job_input' => 'Feed: ' . $feedId,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Starting fetch from Feed.'),\n                );\n                $this->Job->save($data);\n                $jobId = $this->Job->id;\n                $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('fetchFeed', $this->Auth->user('id'), $feedId, $jobId),\n                    true\n                );\n                $this->Job->saveField('process_id', $process_id);\n                $message = 'Pull queued for background execution.';\n            } else {\n                $result = $this->Feed->downloadFromFeedInitiator($feedId, $this->Auth->user());\n                if (!$result) {\n                    continue;\n                }\n                $message = __('Fetching the feed has successfully completed.');\n                if ($this->Feed->data['Feed']['source_format'] == 'misp') {\n                    if (isset($result['add'])) {\n                        $message['result'] .= ' Downloaded ' . count($result['add']) . ' new event(s).';\n                    }\n                    if (isset($result['edit'])) {\n                        $message['result'] .= ' Updated ' . count($result['edit']) . ' event(s).';\n                    }\n                }\n            }\n        }\n        if (!isset($message)) {\n            $message = __('No feed enabled.');\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData(array('result' => $message), $this->response->type());\n        } else {\n            $this->Flash->success($message);\n            $this->redirect(array('action' => 'index'));\n        }\n    }\n\n    public function getEvent($feedId, $eventUuid, $all = false)\n    {\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        if (!$this->Feed->data['Feed']['enabled']) {\n            $this->Flash->info(__('Feed is currently not enabled. Make sure you enable it.'));\n            $this->redirect(array('action' => 'previewIndex', $feedId));\n        }\n        try {\n            $result = $this->Feed->downloadAndSaveEventFromFeed($this->Feed->data, $eventUuid, $this->Auth->user());\n        } catch (Exception $e) {\n            $this->Flash->error(__('Download failed.') . ' ' . $e->getMessage());\n            $this->redirect(array('action' => 'previewIndex', $feedId));\n        }\n\n        if (isset($result['action'])) {\n            if ($result['result']) {\n                if ($result['action'] == 'add') {\n                    $this->Flash->success(__('Event added.'));\n                } else {\n                    if ($result['result'] === 'No change') {\n                        $this->Flash->info(__('Event already up to date.'));\n                    } else {\n                        $this->Flash->success(__('Event updated.'));\n                    }\n                }\n            } else {\n                $this->Flash->error(__('Could not %s event.', $result['action']));\n            }\n        } else {\n            $this->Flash->error(__('Download failed.'));\n        }\n        $this->redirect(array('action' => 'previewIndex', $feedId));\n    }\n\n    public function previewIndex($feedId)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        if (!empty($this->Feed->data['Feed']['settings'])) {\n            $this->Feed->data['Feed']['settings'] = json_decode($this->Feed->data['Feed']['settings'], true);\n        }\n        $params = array();\n        if ($this->request->is('post')) {\n            $params = $this->request->data['Feed'];\n        }\n        if ($this->Feed->data['Feed']['source_format'] == 'misp') {\n            return $this->__previewIndex($this->Feed->data, $params);\n        } elseif (in_array($this->Feed->data['Feed']['source_format'], array('freetext', 'csv'))) {\n            return $this->__previewFreetext($this->Feed->data);\n        }\n    }\n\n    private function __previewIndex($feed, $filterParams = array())\n    {\n        if (isset($this->passedArgs['pages'])) {\n            $currentPage = $this->passedArgs['pages'];\n        } else {\n            $currentPage = 1;\n        }\n        $urlparams = '';\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        $passedArgs = array();\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        $HttpSocket = $syncTool->setupHttpSocketFeed($feed);\n        try {\n            $events = $this->Feed->getManifest($feed, $HttpSocket);\n        } catch (Exception $e) {\n            $this->Flash->error(\"Could not fetch manifest for feed: {$e->getMessage()}\");\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n\n        if (!empty($this->params['named']['searchall'])) {\n            foreach ($events as $uuid => $event) {\n                $found = false;\n                if (strpos(strtolower($event['info']), strtolower($this->params['named']['searchall'])) !== false) {\n                    $found = true;\n                }\n                if (strpos(strtolower($event['Orgc']['name']), strtolower($this->params['named']['searchall'])) !== false) {\n                    $found = true;\n                }\n                if (!empty($event['Tag'])) {\n                    foreach ($event['Tag'] as $tag) {\n                        if (strpos(strtolower($tag['name']), strtolower($this->params['named']['searchall'])) !== false) {\n                            $found = true;\n                        }\n                    }\n                }\n                if (!$found) {\n                    unset($events[$uuid]);\n                }\n            }\n        }\n        foreach ($filterParams as $k => $filter) {\n            if (!empty($filter)) {\n                $filterParams[$k] = json_decode($filter);\n            }\n        }\n        if (!empty($filterParams['eventid'])) {\n            foreach ($events as $k => $event) {\n                if (!in_array($k, $filterParams['eventid'])) {\n                    unset($events[$k]);\n                    continue;\n                }\n            }\n        }\n        $params = $customPagination->createPaginationRules($events, $this->passedArgs, $this->alias);\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        $events = $customPagination->sortArray($events, $params, true);\n        if (is_array($events)) {\n            $customPagination->truncateByPagination($events, $params);\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($events, $this->response->type());\n        }\n        if (isset($events['code'])) {\n            throw new NotFoundException(__('Feed could not be fetched. The HTTP error code returned was: ', $events['code']));\n        }\n        $pageCount = count($events);\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        if ($this->_isRest()) {\n            if (!isset($this->passedArgs['page'])) {\n                $this->passedArgs['page'] = 0;\n            }\n        }\n        $this->set('events', $events);\n        $this->loadModel('Event');\n        $threat_levels = $this->Event->ThreatLevel->find('all');\n        $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        $this->set('eventDescriptions', $this->Event->fieldDescriptions);\n        $this->set('analysisLevels', $this->Event->analysisLevels);\n        $this->set('distributionLevels', $this->Event->distributionLevels);\n        $shortDist = array(0 => 'Organisation', 1 => 'Community', 2 => 'Connected', 3 => 'All', 4 => ' sharing Group');\n        $this->set('shortDist', $shortDist);\n        $this->set('id', $feed['Feed']['id']);\n        $this->set('feed', $feed);\n        $this->set('urlparams', $urlparams);\n        $this->set('passedArgs', json_encode($passedArgs));\n        $this->set('passedArgsArray', $passedArgs);\n    }\n\n    private function __previewFreetext($feed)\n    {\n        if (isset($this->passedArgs['page'])) {\n            $currentPage = $this->passedArgs['page'];\n        } elseif (isset($this->passedArgs['page'])) {\n            $currentPage = $this->passedArgs['page'];\n        } else {\n            $currentPage = 1;\n        }\n        $urlparams = '';\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        if (!in_array($feed['Feed']['source_format'], array('freetext', 'csv'))) {\n            throw new MethodNotAllowedException(__('Invalid feed type.'));\n        }\n        $HttpSocket = $syncTool->setupHttpSocketFeed($feed);\n        $params = array();\n        // params is passed as reference here, the pagination happens in the method, which isn't ideal but considering the performance gains here it's worth it\n        try {\n            $resultArray = $this->Feed->getFreetextFeed($feed, $HttpSocket, $feed['Feed']['source_format'], $currentPage, 60, $params);\n        } catch (Exception $e) {\n            $this->Flash->error(\"Could not fetch feed: {$e->getMessage()}\");\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n        $this->params->params['paging'] = array($this->modelClass => $params);\n        $resultArray = $this->Feed->getFreetextFeedCorrelations($resultArray, $feed['Feed']['id']);\n        // remove all duplicates\n        $correlatingEvents = array();\n        //debug($resultArray);\n        foreach ($resultArray as $k => $v) {\n            if (!empty($resultArray[$k]['correlations'])) {\n                foreach ($resultArray[$k]['correlations'] as $correlatingEvent) {\n                    if (!in_array($correlatingEvent, $correlatingEvents)) {\n                        $correlatingEvents[] = $correlatingEvent;\n                    }\n                }\n            }\n        }\n        $resultArray = array_values($resultArray);\n        $this->loadModel('Attribute');\n        $correlatingEventInfos = $this->Attribute->Event->find('list', array(\n            'fields' => array('Event.id', 'Event.info'),\n            'conditions' => array('Event.id' => $correlatingEvents)\n        ));\n        $this->set('correlatingEventInfos', $correlatingEventInfos);\n        $this->set('distributionLevels', $this->Attribute->distributionLevels);\n        $this->set('feed', $feed);\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($resultArray, $this->response->type());\n        }\n        $this->set('attributes', $resultArray);\n        $this->render('freetext_index');\n    }\n\n    private function __previewCSV($feed)\n    {\n        if (isset($this->passedArgs['pages'])) {\n            $currentPage = $this->passedArgs['pages'];\n        } else {\n            $currentPage = 1;\n        }\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        if ($feed['Feed']['source_format'] != 'csv') {\n            throw new MethodNotAllowedException(__('Invalid feed type.'));\n        }\n        $HttpSocket = $syncTool->setupHttpSocketFeed($feed);\n        try {\n            $resultArray = $this->Feed->getFreetextFeed($feed, $HttpSocket, $feed['Feed']['source_format'], $currentPage);\n        } catch (Exception $e) {\n            $this->Flash->error(\"Could not fetch feed: {$e->getMessage()}\");\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n        // we want false as a valid option for the split fetch, but we don't want it for the preview\n        if ($resultArray == false) {\n            $resultArray = array();\n        }\n        $resultArray = $this->Feed->getFreetextFeedCorrelations($resultArray, $feed['Feed']['id']);\n        $resultArray = $this->Feed->getFreetextFeed2FeedCorrelations($resultArray);\n        // remove all duplicates\n        foreach ($resultArray as $k => $v) {\n            for ($i = 0; $i < $k; $i++) {\n                if (isset($resultArray[$i]) && $v == $resultArray[$i]) {\n                    unset($resultArray[$k]);\n                }\n            }\n        }\n        $resultArray = array_values($resultArray);\n        $this->loadModel('Attribute');\n        $this->set('distributionLevels', $this->Attribute->distributionLevels);\n        $this->set('feed', $feed);\n        $this->set('attributes', $resultArray);\n        $this->render('freetext_index');\n    }\n\n\n    public function previewEvent($feedId, $eventUuid, $all = false)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $this->Feed->id = $feedId;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Invalid feed.'));\n        }\n        $this->Feed->read();\n        try {\n            $event = $this->Feed->downloadEventFromFeed($this->Feed->data, $eventUuid, $this->Auth->user());\n        } catch (Exception $e) {\n            throw new Exception(__('Could not download the selected Event'), 0, $e);\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($event, $this->response->type());\n        }\n        if (is_array($event)) {\n            $this->loadModel('Event');\n            $params = $this->Event->rearrangeEventForView($event, $this->passedArgs, $all);\n            $this->params->params['paging'] = array('Feed' => $params);\n            $this->set('event', $event);\n            $this->set('feed', $this->Feed->data);\n            $this->loadModel('Event');\n            $dataForView = array(\n                    'Attribute' => array('attrDescriptions' => 'fieldDescriptions', 'distributionDescriptions' => 'distributionDescriptions', 'distributionLevels' => 'distributionLevels'),\n                    'Event' => array('eventDescriptions' => 'fieldDescriptions', 'analysisLevels' => 'analysisLevels')\n            );\n            foreach ($dataForView as $m => $variables) {\n                if ($m === 'Event') {\n                    $currentModel = $this->Event;\n                } elseif ($m === 'Attribute') {\n                    $currentModel = $this->Event->Attribute;\n                }\n                foreach ($variables as $alias => $variable) {\n                    $this->set($alias, $currentModel->{$variable});\n                }\n            }\n            $threat_levels = $this->Event->ThreatLevel->find('all');\n            $this->set('threatLevels', Set::combine($threat_levels, '{n}.ThreatLevel.id', '{n}.ThreatLevel.name'));\n        } else {\n            if ($event === 'blocked') {\n                throw new MethodNotAllowedException(__('This event is blocked by the Feed filters.'));\n            } else {\n                throw new NotFoundException(__('Could not download the selected Event'));\n            }\n        }\n    }\n\n    public function enable($id)\n    {\n        $result = $this->__toggleEnable($id, true);\n        $this->set('name', $result['message']);\n        $this->set('message', $result['message']);\n        $this->set('url', $this->here);\n        if ($result) {\n            $this->set('_serialize', array('name', 'message', 'url'));\n        } else {\n            $this->set('errors', $result);\n            $this->set('_serialize', array('name', 'message', 'url', 'errors'));\n        }\n    }\n\n    public function disable($id)\n    {\n        $result = $this->__toggleEnable($id, false);\n        $this->set('name', $result['message']);\n        $this->set('message', $result['message']);\n        $this->set('url', $this->here);\n        if ($result['result']) {\n            $this->set('_serialize', array('name', 'message', 'url'));\n        } else {\n            $this->set('errors', $result);\n            $this->set('_serialize', array('name', 'message', 'url', 'errors'));\n        }\n    }\n\n    private function __toggleEnable($id, $enable = true)\n    {\n        if (!is_numeric($id)) {\n            throw new MethodNotAllowedException(__('Invalid Feed.'));\n        }\n        $this->Feed->id = $id;\n        if (!$this->Feed->exists()) {\n            throw new MethodNotAllowedException(__('Invalid Feed.'));\n        }\n        $feed = $this->Feed->find('first', array(\n                'conditions' => array('Feed.id' => $id),\n                'recursive' => -1\n        ));\n        $feed['Feed']['enabled'] = $enable;\n        $result = array('result' => $this->Feed->save($feed));\n        $fail = false;\n        if (!$result['result']) {\n            $fail = true;\n            $result['result'] = $this->Feed->validationErrors;\n        }\n        $action = $enable ? 'enable' : 'disable';\n        $result['message'] = $fail ? 'Could not ' . $action . ' feed.' : 'Feed ' . $action . 'd.';\n        return $result;\n    }\n\n    public function fetchSelectedFromFreetextIndex($id)\n    {\n        if (!$this->request->is('Post')) {\n            throw new MethodNotAllowedException(__('Only POST requests are allowed.'));\n        }\n        $this->Feed->id = $id;\n        if (!$this->Feed->exists()) {\n            throw new NotFoundException(__('Feed not found.'));\n        }\n        $feed = $this->Feed->read();\n        if (!empty($feed['Feed']['settings'])) {\n            $feed['Feed']['settings'] = json_decode($feed['Feed']['settings'], true);\n        }\n        $data = json_decode($this->request->data['Feed']['data'], true);\n        try {\n            $this->Feed->saveFreetextFeedData($feed, $data, $this->Auth->user());\n            $this->Flash->success(__('Data pulled.'));\n        } catch (Exception $e) {\n            $this->Flash->error(__('Could not pull the selected data. Reason: %s', $e->getMessage()));\n        }\n        $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n    }\n\n    public function cacheFeeds($scope = 'freetext')\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->loadModel('Job');\n            $this->Job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => 'cache_feeds',\n                    'job_input' => $scope,\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => $this->Auth->user('Organisation')['name'],\n                    'message' => __('Starting feed caching.'),\n            );\n            $this->Job->save($data);\n            $jobId = $this->Job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'ServerShell',\n                    array('cacheFeed', $this->Auth->user('id'), $scope, $jobId),\n                    true\n            );\n            $this->Job->saveField('process_id', $process_id);\n            $message = 'Feed caching job initiated.';\n        } else {\n            $result = $this->Feed->cacheFeedInitiator($this->Auth->user(), false, $scope);\n            if (!$result) {\n                $this->Flash->error(__('Caching the feeds has failed.'));\n                $this->redirect(array('action' => 'index'));\n            }\n            $message = __('Caching the feeds has successfully completed.');\n        }\n        if ($this->_isRest()) {\n            return $this->RestResponse->saveSuccessResponse('Feed', 'cacheFeed', false, $this->response->type(), $message);\n        } else {\n            $this->Flash->info($message);\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n    }\n\n    public function compareFeeds($id = false)\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        $feeds = $this->Feed->compareFeeds($id);\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($feeds, $this->response->type());\n        } else {\n            $this->set('feeds', $feeds);\n        }\n    }\n\n    public function toggleSelected($enable = false, $cache = false, $feedList = false)\n    {\n        $field = $cache ? 'caching_enabled' : 'enabled';\n        if (!empty($enable)) {\n            $enable = 1;\n        } else {\n            $enable = 0;\n        }\n        try {\n            $feedIds = json_decode($feedList, true);\n        } catch (Exception $e) {\n            $this->Flash->error(__('Invalid feed list received.'));\n            $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n        }\n        if ($this->request->is('post')) {\n            $feeds = $this->Feed->find('all', array(\n                'conditions' => array('Feed.id' => $feedIds),\n                'recursive' => -1\n            ));\n            $count = 0;\n            foreach ($feeds as $feed) {\n                if ($feed['Feed'][$field] != $enable) {\n                    $feed['Feed'][$field] = $enable;\n                    $this->Feed->save($feed);\n                    $count++;\n                }\n            }\n            if ($count > 0) {\n                $this->Flash->success($count . ' feeds ' . array('disabled', 'enabled')[$enable] . '.');\n                $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n            } else {\n                $this->Flash->info('All selected feeds are already ' . array('disabled', 'enabled')[$enable] . ', nothing to update.');\n                $this->redirect(array('controller' => 'feeds', 'action' => 'index'));\n            }\n        } else {\n            $this->set('feedList', $feedList);\n            $this->set('enable', $enable);\n            $this->render('ajax/feedToggleConfirmation');\n        }\n    }\n\n    public function searchCaches()\n    {\n        if (!$this->_isSiteAdmin() && !$this->Auth->user('org_id') == Configure::read('MISP.host_org_id')) {\n            throw NotAllowedException('You don\\'t have access to this feature.');\n        }\n        if (isset($this->passedArgs['pages'])) {\n            $currentPage = $this->passedArgs['pages'];\n        } else {\n            $currentPage = 1;\n        }\n        $urlparams = '';\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        $passedArgs = array();\n        $hits = array();\n        $value = false;\n        if ($this->request->is('post')) {\n            if (isset($this->request->data['Feed'])) {\n                $this->request->data = $this->request->data['Feed'];\n            }\n            if (isset($this->request->data['value'])) {\n                $this->request->data = $this->request->data['value'];\n            }\n            $value = $this->request->data;\n        }\n        if (!empty($this->params['named']['value'])) {\n            $value = $this->params['named']['value'];\n        }\n        $hits = $this->Feed->searchCaches($value);\n        if ($this->_isRest()) {\n            return $this->RestResponse->viewData($hits, $this->response->type());\n        } else {\n            $this->set('hits', $hits);\n        }\n        $params = $customPagination->createPaginationRules($hits, $this->passedArgs, $this->alias);\n        $this->params->params['paging'] = array('Feed' => $params);\n        $hits = $customPagination->sortArray($hits, $params, true);\n        if (is_array($hits)) {\n            $customPagination->truncateByPagination($hits, $params);\n        }\n        $pageCount = count($hits);\n        $this->set('urlparams', $urlparams);\n        $this->set('passedArgs', json_encode($passedArgs));\n        $this->set('passedArgsArray', $passedArgs);\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\nApp::uses('RandomTool', 'Tools');\n\nclass Feed extends AppModel\n{\n    public $actsAs = array('SysLogLogable.SysLogLogable' => array(\n            'change' => 'full'\n        ),\n        'Trim',\n        'Containable'\n    );\n\n    public $belongsTo = array(\n            'SharingGroup' => array(\n                    'className' => 'SharingGroup',\n                    'foreignKey' => 'sharing_group_id',\n            ),\n            'Tag' => array(\n                    'className' => 'Tag',\n                    'foreignKey' => 'tag_id',\n            )\n    );\n\n    public $validate = array(\n        'url' => array( // TODO add extra validation to refuse multiple time the same url from the same org\n            'rule' => array('urlOrExistingFilepath')\n        ),\n        'provider' => 'valueNotEmpty',\n        'name' => 'valueNotEmpty',\n        'event_id' => array(\n            'rule' => array('numeric'),\n            'message' => 'Please enter a numeric event ID or leave this field blank.',\n        ),\n        'input_source' => array(\n            'rule' => 'validateInputSource',\n            'message' => ''\n        )\n    );\n\n    // currently we only have an internal name and a display name, but later on we can expand this with versions, default settings, etc\n    public $feed_types = array(\n        'misp' => array(\n            'name' => 'MISP Feed'\n        ),\n        'freetext' => array(\n            'name' => 'Freetext Parsed Feed'\n        ),\n        'csv' => array(\n            'name' => 'Simple CSV Parsed Feed'\n        )\n    );\n\n    public function validateInputSource($fields)\n    {\n        if (!empty($this->data['Feed']['input_source'])) {\n            $localAllowed = empty(Configure::read('Security.disable_local_feed_access'));\n            $validOptions = array('network');\n            if ($localAllowed) {\n                $validOptions[] = 'local';\n            }\n            if (!in_array($this->data['Feed']['input_source'], $validOptions)) {\n                return __(\n                    'Invalid input source. The only valid options are %s. %s',\n                    implode(', ', $validOptions),\n                    (!$localAllowed && $this->data['Feed']['input_source'] === 'local') ?\n                    __('Security.disable_local_feed_access is currently enabled, local feeds are thereby not allowed.') :\n                    ''\n                );\n            }\n        }\n        return true;\n    }\n\n    public function urlOrExistingFilepath($fields)\n    {\n        if ($this->isFeedLocal($this->data)) {\n            if ($this->data['Feed']['source_format'] == 'misp') {\n                if (!is_dir($this->data['Feed']['url'])) {\n                    return 'For MISP type local feeds, please specify the containing directory.';\n                }\n            } else {\n                if (!file_exists($this->data['Feed']['url'])) {\n                    return 'Invalid path or file not found. Make sure that the path points to an existing file that is readable and watch out for typos.';\n                }\n            }\n        } else {\n            if (!filter_var($this->data['Feed']['url'], FILTER_VALIDATE_URL)) {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function getFeedTypesOptions()\n    {\n        $result = array();\n        foreach ($this->feed_types as $key => $value) {\n            $result[$key] = $value['name'];\n        }\n        return $result;\n    }\n\n    /**\n     * Gets the event UUIDs from the feed by ID\n     * Returns an array with the UUIDs of events that are new or that need updating\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    public function getNewEventUuids($feed, $HttpSocket)\n    {\n        $manifest = $this->downloadManifest($feed, $HttpSocket);\n        $this->Event = ClassRegistry::init('Event');\n        $events = $this->Event->find('all', array(\n            'conditions' => array(\n                'Event.uuid' => array_keys($manifest),\n            ),\n            'recursive' => -1,\n            'fields' => array('Event.id', 'Event.uuid', 'Event.timestamp')\n        ));\n        $result = array('add' => array(), 'edit' => array());\n        foreach ($events as $event) {\n            $eventUuid = $event['Event']['uuid'];\n            if ($event['Event']['timestamp'] < $manifest[$eventUuid]['timestamp']) {\n                $result['edit'][] = array('uuid' => $eventUuid, 'id' => $event['Event']['id']);\n            } else {\n                $this->__cleanupFile($feed, '/' . $eventUuid . '.json');\n            }\n            unset($manifest[$eventUuid]);\n        }\n        // Rest events in manifest does't exists, they will be added\n        $result['add'] = array_keys($manifest);\n        return $result;\n    }\n\n    /**\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    public function getCache($feed, $HttpSocket)\n    {\n        $uri = $feed['Feed']['url'] . '/hashes.csv';\n        $data = $this->feedGetUri($feed, $uri, $HttpSocket);\n\n        if (empty($data)) {\n            throw new Exception(\"File '$uri' with hashes for cache filling is empty.\");\n        }\n\n        $data = trim($data);\n        $data = explode(\"\\n\", $data);\n        $result = array();\n        foreach ($data as $v) {\n            $result[] = explode(',', $v);\n        }\n        return $result;\n    }\n\n    /**\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    private function downloadManifest($feed, $HttpSocket)\n    {\n        $manifestUrl = $feed['Feed']['url'] . '/manifest.json';\n        $data = $this->feedGetUri($feed, $manifestUrl, $HttpSocket);\n\n        $manifest = json_decode($data, true);\n        if ($manifest === null) {\n            throw new Exception('Could not parse manifest JSON: ' . json_last_error_msg(), json_last_error());\n        }\n\n        return $manifest;\n    }\n\n    /**\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    public function getManifest($feed, $HttpSocket)\n    {\n        $events = $this->downloadManifest($feed, $HttpSocket);\n        $events = $this->__filterEventsIndex($events, $feed);\n        return $events;\n    }\n\n    /**\n     * @param array $feed\n     * @param HttpSocket $HttpSocket\n     * @param string $type\n     * @param int|string $page\n     * @param int $limit\n     * @param array $params\n     * @return array|bool\n     * @throws Exception\n     */\n    public function getFreetextFeed($feed, $HttpSocket, $type = 'freetext', $page = 1, $limit = 60, &$params = array())\n    {\n        $isLocal = $this->isFeedLocal($feed);\n        $data = false;\n\n        if (!$isLocal) {\n            $feedCache = APP . 'tmp' . DS . 'cache' . DS . 'misp_feed_' . intval($feed['Feed']['id']) . '.cache';\n            if (file_exists($feedCache)) {\n                $file = new File($feedCache);\n                if (time() - $file->lastChange() < 600) {\n                    $data = $file->read();\n                    if ($data === false) {\n                        throw new Exception(\"Could not read feed cache file '$feedCache'.\");\n                    }\n                }\n            }\n        }\n\n        if ($data === false) {\n            $feedUrl = $feed['Feed']['url'];\n            $data = $this->feedGetUri($feed, $feedUrl, $HttpSocket, true);\n\n            if (!$isLocal) {\n                $redis = $this->setupRedis();\n                if ($redis === false) {\n                    throw new Exception('Could not reach Redis.');\n                }\n                $redis->del('misp:feed_cache:' . $feed['Feed']['id']);\n                file_put_contents($feedCache, $data);\n            }\n        }\n\n        App::uses('ComplexTypeTool', 'Tools');\n        $complexTypeTool = new ComplexTypeTool();\n        $this->Warninglist = ClassRegistry::init('Warninglist');\n        $complexTypeTool->setTLDs($this->Warninglist->fetchTLDLists());\n        $settings = array();\n        if (!empty($feed['Feed']['settings']) && !is_array($feed['Feed']['settings'])) {\n            $feed['Feed']['settings'] = json_decode($feed['Feed']['settings'], true);\n        }\n        if (isset($feed['Feed']['settings'][$type])) {\n            $settings = $feed['Feed']['settings'][$type];\n        }\n        if (isset($feed['Feed']['settings']['common'])) {\n            $settings = array_merge($settings, $feed['Feed']['settings']['common']);\n        }\n        $resultArray = $complexTypeTool->checkComplexRouter($data, $type, $settings);\n        $this->Attribute = ClassRegistry::init('Attribute');\n        foreach ($resultArray as $key => $value) {\n            $resultArray[$key]['category'] = $this->Attribute->typeDefinitions[$value['default_type']]['default_category'];\n        }\n        App::uses('CustomPaginationTool', 'Tools');\n        $customPagination = new CustomPaginationTool();\n        $params = $customPagination->createPaginationRules($resultArray, array('page' => $page, 'limit' => $limit), 'Feed', $sort = false);\n        if (!empty($page) && $page != 'all') {\n            $start = ($page - 1) * $limit;\n            if ($start > count($resultArray)) {\n                return false;\n            }\n            $resultArray = array_slice($resultArray, $start, $limit);\n        }\n        return $resultArray;\n    }\n\n    public function getFreetextFeedCorrelations($data, $feedId)\n    {\n        $values = array();\n        foreach ($data as $key => $value) {\n            $values[] = $value['value'];\n        }\n        $this->Attribute = ClassRegistry::init('Attribute');\n        $redis = $this->setupRedis();\n        if ($redis !== false) {\n            $feeds = $this->find('all', array(\n                'recursive' => -1,\n                'conditions' => array('Feed.id !=' => $feedId),\n                'fields' => array('id', 'name', 'url', 'provider', 'source_format')\n            ));\n            foreach ($feeds as $k => $v) {\n                if (!$redis->exists('misp:feed_cache:' . $v['Feed']['id'])) {\n                    unset($feeds[$k]);\n                }\n            }\n        } else {\n            return array();\n        }\n        // Adding a 3rd parameter to a list find seems to allow grouping several results into a key. If we ran a normal list with value => event_id we'd only get exactly one entry for each value\n        // The cost of this method is orders of magnitude lower than getting all id - event_id - value triplets and then doing a double loop comparison\n        $correlations = $this->Attribute->find('list', array('conditions' => array('Attribute.value1' => $values, 'Attribute.deleted' => 0), 'fields' => array('Attribute.event_id', 'Attribute.event_id', 'Attribute.value1')));\n        $correlations2 = $this->Attribute->find('list', array('conditions' => array('Attribute.value2' => $values, 'Attribute.deleted' => 0), 'fields' => array('Attribute.event_id', 'Attribute.event_id', 'Attribute.value2')));\n        $correlations = array_merge_recursive($correlations, $correlations2);\n        foreach ($data as $key => $value) {\n            if (isset($correlations[$value['value']])) {\n                $data[$key]['correlations'] = array_values($correlations[$value['value']]);\n            }\n            if ($redis) {\n                foreach ($feeds as $k => $v) {\n                    if ($redis->sismember('misp:feed_cache:' . $v['Feed']['id'], md5($value['value']))) {\n                        $data[$key]['feed_correlations'][] = array($v);\n                    } else {\n                    }\n                }\n            }\n        }\n        return $data;\n    }\n\n    public function attachFeedCorrelations($objects, $user, &$event, $overrideLimit = false, $scope = 'Feed')\n    {\n        $redis = $this->setupRedis();\n        if ($redis !== false) {\n            $pipe = $redis->multi(Redis::PIPELINE);\n            $hashTable = array();\n            $cachePrefix = 'misp:' . strtolower($scope) . '_cache:';\n\n            $this->Event = ClassRegistry::init('Event');\n            $compositeTypes = $this->Event->Attribute->getCompositeTypes();\n\n            foreach ($objects as $k => $object) {\n                if (in_array($object['type'], $compositeTypes)) {\n                    $value = explode('|', $object['value']);\n                    $hashTable[$k] = md5($value[0]);\n                } else {\n                    $hashTable[$k] = md5($object['value']);\n                }\n                $redis->sismember($cachePrefix . 'combined', $hashTable[$k]);\n            }\n            $results = $pipe->exec();\n            if (!$overrideLimit && count($objects) > 10000) {\n                foreach ($results as $k => $result) {\n                    if ($result && empty($objects[$k]['disable_correlation'])) {\n                        if (isset($event['FeedCount'])) {\n                            $event['FeedCount']++;\n                        } else {\n                            $event['FeedCount'] = 1;\n                        }\n                        $objects[$k]['FeedHit'] = true;\n                    }\n                }\n            } else {\n                if ($scope === 'Feed') {\n                    $params = array(\n                        'recursive' => -1,\n                        'fields' => array('id', 'name', 'url', 'provider', 'source_format')\n                    );\n                    if (!$user['Role']['perm_site_admin']) {\n                        $params['conditions'] = array('Feed.lookup_visible' => 1);\n                    }\n                    $sources = $this->find('all', $params);\n                } else {\n                    $params = array(\n                        'recursive' => -1,\n                        'fields' => array('id', 'name', 'url', 'caching_enabled')\n                    );\n                    if (!$user['Role']['perm_site_admin']) {\n                        $params['conditions'] = array('Server.caching_enabled' => 1);\n                    }\n                    $this->Server = ClassRegistry::init('Server');\n                    $sources = $this->Server->find('all', $params);\n                }\n\n                $hitIds = array();\n                foreach ($results as $k => $result) {\n                    if ($result && empty($objects[$k]['disable_correlation'])) {\n                        $hitIds[] = $k;\n                    }\n                }\n                foreach ($sources as $source) {\n                    $sourceScopeId = $source[$scope]['id'];\n\n                    $pipe = $redis->multi(Redis::PIPELINE);\n                    foreach ($hitIds as $k) {\n                        $redis->sismember($cachePrefix . $sourceScopeId, $hashTable[$k]);\n                    }\n                    $sourceHits = $pipe->exec();\n                    foreach ($sourceHits as $k4 => $hit) {\n                        if ($hit) {\n                            if (!isset($event[$scope][$sourceScopeId]['id'])) {\n                                if (!isset($event[$scope][$sourceScopeId])) {\n                                    $event[$scope][$sourceScopeId] = array();\n                                }\n                                $event[$scope][$sourceScopeId] = array_merge($event[$scope][$sourceScopeId], $source[$scope]);\n                            }\n                            $objects[$hitIds[$k4]][$scope][] = $source[$scope];\n                        }\n                    }\n                    if ($scope === 'Server' || $source[$scope]['source_format'] == 'misp') {\n                        $pipe = $redis->multi(Redis::PIPELINE);\n                        $eventUuidHitPosition = array();\n                        foreach ($objects as $k => $object) {\n                            if (isset($object[$scope])) {\n                                foreach ($object[$scope] as $currentFeed) {\n                                    if ($source[$scope]['id'] == $currentFeed['id']) {\n                                        $eventUuidHitPosition[] = $k;\n                                        $redis->smembers($cachePrefix . 'event_uuid_lookup:' . $hashTable[$k]);\n                                    }\n                                }\n                            }\n                        }\n                        $mispFeedHits = $pipe->exec();\n                        foreach ($mispFeedHits as $sourcehitPos => $f) {\n                            foreach ($f as $url) {\n                                list($feedId, $eventUuid) = explode('/', $url);\n                                if (empty($event[$scope][$feedId]['event_uuids']) || !in_array($eventUuid, $event[$scope][$feedId]['event_uuids'])) {\n                                    $event[$scope][$feedId]['event_uuids'][] = $eventUuid;\n                                }\n                                foreach ($objects[$eventUuidHitPosition[$sourcehitPos]][$scope] as $tempKey => $tempFeed) {\n                                    if ($tempFeed['id'] == $feedId) {\n                                        $objects[$eventUuidHitPosition[$sourcehitPos]][$scope][$tempKey]['event_uuids'][] = $eventUuid;\n                                    }\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }\n        if (!empty($event[$scope])) {\n            $event[$scope] = array_values($event[$scope]);\n        }\n        return $objects;\n    }\n\n    public function downloadFromFeed($actions, $feed, $HttpSocket, $user, $jobId = false)\n    {\n        $total = count($actions['add']) + count($actions['edit']);\n        $currentItem = 0;\n        $this->Event = ClassRegistry::init('Event');\n        $results = array();\n        $filterRules = $this->__prepareFilterRules($feed);\n\n        foreach ($actions['add'] as $uuid) {\n            try {\n                $result = $this->__addEventFromFeed($HttpSocket, $feed, $uuid, $user, $filterRules);\n                if ($result !== 'blocked') {\n                    $results['add']['success'] = $uuid;\n                }\n\n            } catch (Exception $e) {\n                $this->logException(\"Could not add event '$uuid' from feed {$feed['Feed']['id']}.\", $e);\n                $results['add']['fail'] = array('uuid' => $uuid, 'reason' => $e->getMessage());\n            }\n\n            $this->__cleanupFile($feed, '/' . $uuid . '.json');\n            $this->jobProgress($jobId, null, 100 * (($currentItem + 1) / $total));\n            $currentItem++;\n        }\n\n        foreach ($actions['edit'] as $editTarget) {\n            $uuid = $editTarget['uuid'];\n            try {\n                $result = $this->__updateEventFromFeed($HttpSocket, $feed, $uuid, $editTarget['id'], $user, $filterRules);\n                if ($result !== 'blocked') {\n                    $results['edit']['success'] = $uuid;\n                }\n            } catch (Exception $e) {\n                $this->logException(\"Could not edit event '$uuid' from feed {$feed['Feed']['id']}.\", $e);\n                $results['edit']['fail'] = array('uuid' => $uuid, 'reason' => $e->getMessage());\n            }\n\n            $this->__cleanupFile($feed, '/' . $uuid . '.json');\n            if ($currentItem % 10 == 0) {\n                $this->jobProgress($jobId, null, 100 * (($currentItem + 1) / $total));\n            }\n            $currentItem++;\n        }\n\n        return $results;\n    }\n\n    private function __createFeedRequest($headers = false)\n    {\n        $version = $this->checkMISPVersion();\n        $version = implode('.', $version);\n        $commit = trim(shell_exec('git log --pretty=\"%H\" -n1 HEAD'));\n\n        $result = array(\n            'header' => array(\n                    'Accept' => array('application/json', 'text/plain'),\n                    'Content-Type' => 'application/json',\n                    'MISP-version' => $version,\n                    'MISP-uuid' => Configure::read('MISP.uuid')\n            )\n        );\n        if ($commit) {\n            $result['header']['commit'] = $commit;\n        }\n        if (!empty($headers)) {\n            $lines = explode(\"\\n\", $headers);\n            foreach ($lines as $line) {\n                if (!empty($line)) {\n                    $kv = explode(':', $line);\n                    if (!empty($kv[0]) && !empty($kv[1])) {\n                        if (!in_array($kv[0], array('commit', 'MISP-version', 'MISP-uuid'))) {\n                            $result['header'][trim($kv[0])] = trim($kv[1]);\n                        }\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n\n    private function __checkIfEventBlockedByFilter($event, $filterRules)\n    {\n        $fields = array('tags' => 'Tag', 'orgs' => 'Orgc');\n        $prefixes = array('OR', 'NOT');\n        foreach ($fields as $field => $fieldModel) {\n            foreach ($prefixes as $prefix) {\n                if (!empty($filterRules[$field][$prefix])) {\n                    $found = false;\n                    if (isset($event['Event'][$fieldModel]) && !empty($event['Event'][$fieldModel])) {\n                        if (!isset($event['Event'][$fieldModel][0])) {\n                            $event['Event'][$fieldModel] = array(0 => $event['Event'][$fieldModel]);\n                        }\n                        foreach ($event['Event'][$fieldModel] as $object) {\n                            foreach ($filterRules[$field][$prefix] as $temp) {\n                                if (stripos($object['name'], $temp) !== false) {\n                                    $found = true;\n                                    break 2;\n                                }\n                            }\n                        }\n                    }\n                    if ($prefix === 'OR' && !$found) {\n                        return false;\n                    }\n                    if ($prefix !== 'OR' && $found) {\n                        return false;\n                    }\n                }\n            }\n        }\n        return true;\n    }\n\n    private function __filterEventsIndex($events, $feed)\n    {\n        $filterRules = $this->__prepareFilterRules($feed);\n        if (!$filterRules) {\n            $filterRules = array();\n        }\n        foreach ($events as $k => $event) {\n            if (isset($filterRules['orgs']['OR']) && !empty($filterRules['orgs']['OR']) && !in_array($event['Orgc']['name'], $filterRules['orgs']['OR'])) {\n                unset($events[$k]);\n                continue;\n            }\n            if (isset($filterRules['orgs']['NO']) && !empty($filterRules['orgs']['NOT']) && in_array($event['Orgc']['name'], $filterRules['orgs']['OR'])) {\n                unset($events[$k]);\n                continue;\n            }\n            if (isset($filterRules['tags']['OR']) && !empty($filterRules['tags']['OR'])) {\n                if (!isset($event['Tag']) || empty($event['Tag'])) {\n                    unset($events[$k]);\n                }\n                $found = false;\n                foreach ($event['Tag'] as $tag) {\n                    foreach ($filterRules['tags']['OR'] as $filterTag) {\n                        if (strpos(strtolower($tag['name']), strtolower($filterTag))) {\n                            $found = true;\n                        }\n                    }\n                }\n                if (!$found) {\n                    unset($k);\n                    continue;\n                }\n            }\n            if (isset($filterRules['tags']['NOT']) && !empty($filterRules['tags']['NOT'])) {\n                if (isset($event['Tag']) && !empty($event['Tag'])) {\n                    $found = false;\n                    foreach ($event['Tag'] as $tag) {\n                        foreach ($filterRules['tags']['NOT'] as $filterTag) {\n                            if (strpos(strtolower($tag['name']), strtolower($filterTag))) {\n                                $found = true;\n                            }\n                        }\n                    }\n                    if ($found) {\n                        unset($k);\n                    }\n                }\n            }\n        }\n        return $events;\n    }\n\n    /**\n     * @param array $feed\n     * @param string $uuid\n     * @param $user Not used\n     * @return array|bool\n     * @throws Exception\n     */\n    public function downloadAndSaveEventFromFeed($feed, $uuid, $user)\n    {\n        $event = $this->downloadEventFromFeed($feed, $uuid, $user);\n        if (!is_array($event) || isset($event['code'])) {\n            return false;\n        }\n        return $this->__saveEvent($event, $user);\n    }\n\n    /**\n     * @param array $feed\n     * @param string $uuid\n     * @param $user Not used\n     * @return bool|string|array\n     * @throws Exception\n     */\n    public function downloadEventFromFeed($feed, $uuid, $user)\n    {\n        $filerRules = $this->__prepareFilterRules($feed);\n        $HttpSocket = $this->isFeedLocal($feed) ? false : $this->__setupHttpSocket($feed);\n        $event = $this->downloadAndParseEventFromFeed($feed, $uuid, $HttpSocket);\n        return $this->__prepareEvent($event, $feed, $filerRules);\n    }\n\n    private function __saveEvent($event, $user)\n    {\n        $this->Event = ClassRegistry::init('Event');\n        $existingEvent = $this->Event->find('first', array(\n                'conditions' => array('Event.uuid' => $event['Event']['uuid']),\n                'recursive' => -1,\n                'fields' => array('Event.uuid', 'Event.id', 'Event.timestamp')\n        ));\n        $result = array();\n        if (!empty($existingEvent)) {\n            $result['action'] = 'edit';\n            if ($existingEvent['Event']['timestamp'] < $event['Event']['timestamp']) {\n                $result['result'] = $this->Event->_edit($event, true, $user);\n            } else {\n                $result['result'] = 'No change';\n            }\n        } else {\n            $result['action'] = 'add';\n            $result['result'] = $this->Event->_add($event, true, $user);\n        }\n        return $result;\n    }\n\n    private function __prepareEvent($event, $feed, $filterRules)\n    {\n        if (isset($event['response'])) {\n            $event = $event['response'];\n        }\n        if (isset($event[0])) {\n            $event = $event[0];\n        }\n        if (!isset($event['Event']['uuid'])) {\n            throw new Exception(\"Event uuid field missing.\");\n        }\n        $event['Event']['distribution'] = $feed['Feed']['distribution'];\n        $event['Event']['sharing_group_id'] = $feed['Feed']['sharing_group_id'];\n        if (!empty($event['Event']['Attribute'])) {\n            foreach ($event['Event']['Attribute'] as $key => $attribute) {\n                $event['Event']['Attribute'][$key]['distribution'] = 5;\n            }\n        }\n        if ($feed['Feed']['tag_id']) {\n            if (!isset($event['Event']['Tag'])) {\n                $event['Event']['Tag'] = array();\n            }\n            $found = false;\n            foreach ($event['Event']['Tag'] as $tag) {\n                if (strtolower($tag['name']) === strtolower($feed['Tag']['name'])) {\n                    $found = true;\n                    break;\n                }\n            }\n            if (!$found) {\n                $feedTag = $this->Tag->find('first', array('conditions' => array('Tag.id' => $feed['Feed']['tag_id']), 'recursive' => -1, 'fields' => array('Tag.name', 'Tag.colour', 'Tag.exportable')));\n                if (!empty($feedTag)) {\n                    $event['Event']['Tag'][] = $feedTag['Tag'];\n                }\n            }\n        }\n        if ($feed['Feed']['sharing_group_id']) {\n            $sg = $this->SharingGroup->find('first', array(\n                    'recursive' => -1,\n                    'conditions' => array('SharingGroup.id' => $feed['Feed']['sharing_group_id'])\n            ));\n            if (!empty($sg)) {\n                $event['Event']['SharingGroup'] = $sg['SharingGroup'];\n            } else {\n                // We have an SG ID for the feed, but the SG is gone. Make the event private as a fall-back.\n                $event['Event']['distribution'] = 0;\n                $event['Event']['sharing_group_id'] = 0;\n            }\n        }\n        if (!$this->__checkIfEventBlockedByFilter($event, $filterRules)) {\n            return 'blocked';\n        }\n        return $event;\n    }\n\n    /**\n     * @param array $feed\n     * @return bool|mixed\n     * @throws Exception\n     */\n    private function __prepareFilterRules($feed)\n    {\n        $filterRules = false;\n        if (isset($feed['Feed']['rules']) && !empty($feed['Feed']['rules'])) {\n            $filterRules = json_decode($feed['Feed']['rules'], true);\n            if ($filterRules === null) {\n                throw new Exception('Could not parse feed filter rules JSON: ' . json_last_error_msg(), json_last_error());\n            }\n        }\n        return $filterRules;\n    }\n\n    private function __setupHttpSocket($feed)\n    {\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        return ($syncTool->setupHttpSocketFeed($feed));\n    }\n\n    /**\n     * @param HttpSocket $HttpSocket\n     * @param array $feed\n     * @param string $uuid\n     * @param $user\n     * @param array|bool $filterRules\n     * @return array|bool|string\n     * @throws Exception\n     */\n    private function __addEventFromFeed($HttpSocket, $feed, $uuid, $user, $filterRules)\n    {\n        $event = $this->downloadAndParseEventFromFeed($feed, $uuid, $HttpSocket);\n        $event = $this->__prepareEvent($event, $feed, $filterRules);\n        if (is_array($event)) {\n            $this->Event = ClassRegistry::init('Event');\n            return $this->Event->_add($event, true, $user);\n        } else {\n            return $event;\n        }\n    }\n\n    /**\n     * @param HttpSocket $HttpSocket\n     * @param array $feed\n     * @param string $uuid\n     * @param int $eventId\n     * @param $user\n     * @param array|bool $filterRules\n     * @return mixed\n     * @throws Exception\n     */\n    private function __updateEventFromFeed($HttpSocket, $feed, $uuid, $eventId, $user, $filterRules)\n    {\n        $event = $this->downloadAndParseEventFromFeed($feed, $uuid, $HttpSocket);\n        $event = $this->__prepareEvent($event, $feed, $filterRules);\n        $this->Event = ClassRegistry::init('Event');\n        return $this->Event->_edit($event, $user, $uuid, $jobId = null);\n    }\n\n    public function addDefaultFeeds($newFeeds)\n    {\n        foreach ($newFeeds as $newFeed) {\n            $existingFeed = $this->find('list', array('conditions' => array('Feed.url' => $newFeed['url'])));\n            $success = true;\n            if (empty($existingFeed)) {\n                $this->create();\n                $feed = array(\n                        'name' => $newFeed['name'],\n                        'provider' => $newFeed['provider'],\n                        'url' => $newFeed['url'],\n                        'enabled' => $newFeed['enabled'],\n                        'caching_enabled' => !empty($newFeed['caching_enabled']) ? $newFeed['caching_enabled'] : 0,\n                        'distribution' => 3,\n                        'sharing_group_id' => 0,\n                        'tag_id' => 0,\n                        'default' => true,\n                );\n                $result = $this->save($feed) && $success;\n            }\n        }\n        return $success;\n    }\n\n    public function downloadFromFeedInitiator($feedId, $user, $jobId = false)\n    {\n        $this->id = $feedId;\n        $this->read();\n        if (isset($this->data['Feed']['settings']) && !empty($this->data['Feed']['settings'])) {\n            $this->data['Feed']['settings'] = json_decode($this->data['Feed']['settings'], true);\n        }\n\n        $HttpSocket = $this->isFeedLocal($this->data) ? false : $this->__setupHttpSocket($this->data);\n        if ($this->data['Feed']['source_format'] == 'misp') {\n            $this->jobProgress($jobId, 'Fetching event manifest.');\n            try {\n                $actions = $this->getNewEventUuids($this->data, $HttpSocket);\n            } catch (Exception $e) {\n                $this->logException(\"Could not get new event uuids for feed $feedId.\", $e);\n                $this->jobProgress($jobId, 'Could not fetch event manifest. See log for more details.');\n                return false;\n            }\n\n            if (empty($actions['add']) && empty($actions['edit'])) {\n                return true;\n            }\n\n            $total = count($actions['add']) + count($actions['edit']);\n            $this->jobProgress($jobId, \"Fetching $total events.\");\n            $result = $this->downloadFromFeed($actions, $this->data, $HttpSocket, $user, $jobId);\n            $this->__cleanupFile($this->data, '/manifest.json');\n        } else {\n            $this->jobProgress($jobId, 'Fetching data.');\n            try {\n                $temp = $this->getFreetextFeed($this->data, $HttpSocket, $this->data['Feed']['source_format'], 'all');\n            } catch (Exception $e) {\n                $this->logException(\"Could not get freetext feed $feedId\", $e);\n                $this->jobProgress($jobId, 'Could not fetch freetext feed. See log for more details.');\n                return false;\n            }\n\n            $data = array();\n            foreach ($temp as $value) {\n                $data[] = array(\n                    'category' => $value['category'],\n                    'type' => $value['default_type'],\n                    'value' => $value['value'],\n                    'to_ids' => $value['to_ids']\n                );\n            }\n            if (empty($data)) {\n                return true;\n            }\n\n            $this->jobProgress($jobId, 'Saving data.', 50);\n\n            try {\n                $result = $this->saveFreetextFeedData($this->data, $data, $user);\n            } catch (Exception $e) {\n                $this->logException(\"Could not save freetext feed data for feed $feedId.\", $e);\n                return false;\n            }\n\n            $this->__cleanupFile($this->data, '');\n        }\n        return $result;\n    }\n\n    private function __cleanupFile($feed, $file)\n    {\n        if ($this->isFeedLocal($feed)) {\n            if (isset($feed['Feed']['delete_local_file']) && $feed['Feed']['delete_local_file']) {\n                if (file_exists($feed['Feed']['url'] . $file)) {\n                    unlink($feed['Feed']['url'] . $file);\n                }\n            }\n        }\n        return true;\n    }\n\n    /**\n     * @param array $feed\n     * @param array $data\n     * @param array $user\n     * @param int|bool $jobId\n     * @return bool\n     * @throws Exception\n     */\n    public function saveFreetextFeedData($feed, $data, $user, $jobId = false)\n    {\n        $this->Event = ClassRegistry::init('Event');\n\n        if ($feed['Feed']['fixed_event'] && $feed['Feed']['event_id']) {\n            $event = $this->Event->find('first', array('conditions' => array('Event.id' => $feed['Feed']['event_id']), 'recursive' => -1));\n            if (empty($event)) {\n                throw new Exception(\"The target event is no longer valid. Make sure that the target event {$feed['Feed']['event_id']} exists.\");\n            }\n        } else {\n            $this->Event->create();\n            $event = array(\n                    'info' => $feed['Feed']['name'] . ' feed',\n                    'analysis' => 2,\n                    'threat_level_id' => 4,\n                    'orgc_id' => $user['org_id'],\n                    'org_id' => $user['org_id'],\n                    'date' => date('Y-m-d'),\n                    'distribution' => $feed['Feed']['distribution'],\n                    'sharing_group_id' => $feed['Feed']['sharing_group_id'],\n                    'user_id' => $user['id']\n            );\n            $result = $this->Event->save($event);\n            if (!$result) {\n                throw new Exception('Something went wrong while creating a new event.');\n            }\n            $event = $this->Event->find('first', array('conditions' => array('Event.id' => $this->Event->id), 'recursive' => -1));\n            if (empty($event)) {\n                throw new Exception(\"The newly created event is no longer valid. Make sure that the target event {$this->Event->id} exists.\");\n            }\n            if ($feed['Feed']['fixed_event']) {\n                $feed['Feed']['event_id'] = $event['Event']['id'];\n                if (!empty($feed['Feed']['settings'])) {\n                    $feed['Feed']['settings'] = json_encode($feed['Feed']['settings']);\n                }\n                $this->save($feed);\n            }\n        }\n        if ($feed['Feed']['fixed_event']) {\n            $temp = $this->Event->Attribute->find('all', array(\n                'conditions' => array(\n                    'Attribute.deleted' => 0,\n                    'Attribute.event_id' => $event['Event']['id']\n                ),\n                'recursive' => -1,\n                'fields' => array('id', 'value1', 'value2')\n            ));\n            $event['Attribute'] = array();\n            foreach ($temp as $t) {\n                if (!empty($t['Attribute']['value2'])) {\n                    $value = $t['Attribute']['value1'] . '|' . $t['Attribute']['value2'];\n                } else {\n                    $value = $t['Attribute']['value1'];\n                }\n                $event['Attribute'][$t['Attribute']['id']] = $value;\n            }\n            unset($temp);\n            foreach ($data as $k => $dataPoint) {\n                $finder = array_search($dataPoint['value'], $event['Attribute']);\n                if ($finder !== false) {\n                    unset($data[$k]);\n                    unset($event['Attribute'][$finder]);\n                }\n            }\n            if ($feed['Feed']['delta_merge']) {\n                $to_delete = array_keys($event['Attribute']);\n                if (!empty($to_delete)) {\n                    $this->Event->Attribute->deleteAll(array('Attribute.id' => $to_delete, 'Attribute.deleted' => 0));\n                }\n            }\n        }\n        if (empty($data)) {\n            return true;\n        }\n\n        $data = array_values($data);\n        $uniqueValues = array();\n        foreach ($data as $key => $value) {\n            if (isset($uniqueValues[$value['value']])) {\n                unset($data[$key]);\n                continue;\n            }\n            $data[$key]['event_id'] = $event['Event']['id'];\n            $data[$key]['distribution'] = $feed['Feed']['distribution'];\n            $data[$key]['sharing_group_id'] = $feed['Feed']['sharing_group_id'];\n            $data[$key]['to_ids'] = $feed['Feed']['override_ids'] ? 0 : $value['to_ids'];\n            $uniqueValues[$value['value']] = true;\n        }\n        $data = array_values($data);\n        foreach ($data as $k => $chunk) {\n            $this->Event->Attribute->create();\n            $this->Event->Attribute->save($chunk);\n            if ($k % 100 == 0) {\n                $this->jobProgress($jobId, null, 50 + round((50 * ((($k + 1) * 100) / count($data)))));\n            }\n        }\n        if (!empty($data)) {\n            unset($event['Event']['timestamp']);\n            unset($event['Event']['attribute_count']);\n            $this->Event->save($event);\n        }\n        if ($feed['Feed']['publish']) {\n            $this->Event->publishRouter($event['Event']['id'], null, $user);\n        }\n        if ($feed['Feed']['tag_id']) {\n            $this->Event->EventTag->attachTagToEvent($event['Event']['id'], $feed['Feed']['tag_id']);\n        }\n        return true;\n    }\n\n    /**\n     * @param $user Not used\n     * @param int|bool $jobId\n     * @param string $scope\n     * @return bool Returns true if at least one feed was cached successfully.\n     * @throws Exception\n     */\n    public function cacheFeedInitiator($user, $jobId = false, $scope = 'freetext')\n    {\n        $params = array(\n            'conditions' => array('caching_enabled' => 1),\n            'recursive' => -1,\n            'fields' => array('source_format', 'input_source', 'url', 'id', 'settings', 'headers')\n        );\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            throw new Exception('Could not reach Redis.');\n        }\n        if ($scope !== 'all') {\n            if (is_numeric($scope)) {\n                $params['conditions']['id'] = $scope;\n            } elseif ($scope == 'freetext' || $scope == 'csv') {\n                $params['conditions']['source_format'] = array('csv', 'freetext');\n            } elseif ($scope == 'misp') {\n                $redis->del('misp:feed_cache:event_uuid_lookup:');\n                $params['conditions']['source_format'] = 'misp';\n            } else {\n                throw new InvalidArgumentException(\"Invalid value for scope, it must be integer or 'freetext', 'csv', 'misp' or 'all' string.\");\n            }\n        } else {\n            $redis->del('misp:feed_cache:combined');\n            $redis->del('misp:feed_cache:event_uuid_lookup:');\n        }\n        $feeds = $this->find('all', $params);\n        $atLeastOneSuccess = false;\n        foreach ($feeds as $k => $feed) {\n            if ($this->__cacheFeed($feed, $redis, $jobId)) {\n                $message = 'Feed ' . $feed['Feed']['id'] . ' cached.';\n                $atLeastOneSuccess = true;\n            } else {\n                $message = 'Failed to cache feed ' . $feed['Feed']['id'] . '. See logs for more details.';\n            }\n\n            $this->jobProgress($jobId, $message, 100 * $k / count($feeds));\n        }\n        return $atLeastOneSuccess;\n    }\n\n    public function attachFeedCacheTimestamps($data)\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return $data;\n        }\n        foreach ($data as $k => $v) {\n            $data[$k]['Feed']['cache_timestamp'] = $redis->get('misp:feed_cache_timestamp:' . $data[$k]['Feed']['id']);\n        }\n        return $data;\n    }\n\n    private function __cacheFeed($feed, $redis, $jobId = false)\n    {\n        $HttpSocket = $this->isFeedLocal($feed) ? false : $this->__setupHttpSocket($feed);\n        if ($feed['Feed']['source_format'] == 'misp') {\n            return $this->__cacheMISPFeed($feed, $redis, $HttpSocket, $jobId);\n        } else {\n            return $this->__cacheFreetextFeed($feed, $redis, $HttpSocket, $jobId);\n        }\n    }\n\n    private function __cacheFreetextFeed($feed, $redis, $HttpSocket, $jobId = false)\n    {\n        $feedId = $feed['Feed']['id'];\n\n        try {\n            $values = $this->getFreetextFeed($feed, $HttpSocket, $feed['Feed']['source_format'], 'all');\n        } catch (Exception $e) {\n            $this->logException(\"Could not get freetext feed $feedId\", $e);\n            $this->jobProgress($jobId, 'Could not fetch freetext feed. See log for more details.');\n            return false;\n        }\n\n        foreach ($values as $k => $value) {\n            $md5Value = md5($value['value']);\n            $redis->sAdd('misp:feed_cache:' . $feedId, $md5Value);\n            $redis->sAdd('misp:feed_cache:combined', $md5Value);\n            if ($k % 1000 == 0) {\n                $this->jobProgress($jobId, \"Feed $feedId: $k/\" . count($values) . \" values cached.\");\n            }\n        }\n        $redis->set('misp:feed_cache_timestamp:' . $feedId, time());\n        return true;\n    }\n\n    private function __cacheMISPFeedTraditional($feed, $redis, $HttpSocket, $jobId = false)\n    {\n        $feedId = $feed['Feed']['id'];\n        $this->Attribute = ClassRegistry::init('Attribute');\n        try {\n            $manifest = $this->getManifest($feed, $HttpSocket);\n        } catch (Exception $e) {\n            $this->logException(\"Could not get manifest for feed $feedId.\", $e);\n            return false;\n        }\n\n        $redis->del('misp:feed_cache:' . $feedId);\n\n        $k = 0;\n        foreach ($manifest as $uuid => $event) {\n            try {\n                $event = $this->downloadAndParseEventFromFeed($feed, $uuid, $HttpSocket);\n            } catch (Exception $e) {\n                $this->logException(\"Could not get and parse event '$uuid' for feed $feedId.\", $e);\n                return false;\n            }\n\n            if (!empty($event['Event']['Attribute'])) {\n                $pipe = $redis->multi(Redis::PIPELINE);\n                foreach ($event['Event']['Attribute'] as $attribute) {\n                    if (!in_array($attribute['type'], $this->Attribute->nonCorrelatingTypes)) {\n                        if (in_array($attribute['type'], $this->Attribute->getCompositeTypes())) {\n                            $value = explode('|', $attribute['value']);\n                            $redis->sAdd('misp:feed_cache:' . $feedId, md5($value[0]));\n                            $redis->sAdd('misp:feed_cache:' . $feedId, md5($value[1]));\n                            $redis->sAdd('misp:feed_cache:combined', md5($value[0]));\n                            $redis->sAdd('misp:feed_cache:combined', md5($value[1]));\n                            $redis->sAdd('misp:feed_cache:event_uuid_lookup:' . md5($value[0]), $feedId . '/' . $event['Event']['uuid']);\n                            $redis->sAdd('misp:feed_cache:event_uuid_lookup:' . md5($value[1]), $feedId . '/' . $event['Event']['uuid']);\n                        } else {\n                            $redis->sAdd('misp:feed_cache:' . $feedId, md5($attribute['value']));\n                            $redis->sAdd('misp:feed_cache:combined', md5($attribute['value']));\n                            $redis->sAdd('misp:feed_cache:event_uuid_lookup:' . md5($attribute['value']), $feedId . '/' . $event['Event']['uuid']);\n                        }\n                    }\n                }\n                $pipe->exec();\n            }\n\n            $k++;\n            if ($k % 10 == 0) {\n                $this->jobProgress($jobId, \"Feed $feedId: $k/\" . count($manifest) . \" events cached.\");\n            }\n        }\n        return true;\n    }\n\n    private function __cacheMISPFeedCache($feed, $redis, $HttpSocket, $jobId = false)\n    {\n        $feedId = $feed['Feed']['id'];\n\n        try {\n            $cache = $this->getCache($feed, $HttpSocket);\n        } catch (Exception $e) {\n            $this->logException(\"Could not get cache file for $feedId.\", $e, LOG_NOTICE);\n            return false;\n        }\n\n        $pipe = $redis->multi(Redis::PIPELINE);\n        foreach ($cache as $v) {\n            $redis->sAdd('misp:feed_cache:' . $feedId, $v[0]);\n            $redis->sAdd('misp:feed_cache:combined', $v[0]);\n            $redis->sAdd('misp:feed_cache:event_uuid_lookup:' . $v[0], $feedId . '/' . $v[1]);\n        }\n        $pipe->exec();\n        $this->jobProgress($jobId, \"Feed $feedId: cached via quick cache.\");\n        return true;\n    }\n\n    private function __cacheMISPFeed($feed, $redis, $HttpSocket, $jobId = false)\n    {\n        $result = true;\n        if (!$this->__cacheMISPFeedCache($feed, $redis, $HttpSocket, $jobId)) {\n            $result = $this->__cacheMISPFeedTraditional($feed, $redis, $HttpSocket, $jobId);\n        };\n        if ($result) {\n            $redis->set('misp:feed_cache_timestamp:' . $feed['Feed']['id'], time());\n        }\n        return $result;\n    }\n\n    public function compareFeeds($id = false)\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return array();\n        }\n        $fields = array('id', 'input_source', 'source_format', 'url', 'provider', 'name', 'default');\n        $feeds = $this->find('all', array(\n            'recursive' => -1,\n            'fields' => $fields,\n            'conditions' => array('Feed.caching_enabled' => 1)\n        ));\n        // we'll use this later for the intersect\n        $fields[] = 'values';\n        $fields = array_flip($fields);\n        // Get all of the feed cache cardinalities for all feeds - if a feed is not cached remove it from the list\n        foreach ($feeds as $k => $feed) {\n            if (!$redis->exists('misp:feed_cache:' . $feed['Feed']['id'])) {\n                unset($feeds[$k]);\n                continue;\n            }\n            $feeds[$k]['Feed']['values'] = $redis->sCard('misp:feed_cache:' . $feed['Feed']['id']);\n        }\n        $feeds = array_values($feeds);\n        $this->Server = ClassRegistry::init('Server');\n        $servers = $this->Server->find('all', array(\n            'recursive' => -1,\n            'fields' => array('id', 'url', 'name'),\n            'contain' => array('RemoteOrg' => array('fields' => array('RemoteOrg.id', 'RemoteOrg.name'))),\n            'conditions' => array('Server.caching_enabled')\n        ));\n        foreach ($servers as $k => $server) {\n            if (!$redis->exists('misp:server_cache:' . $server['Server']['id'])) {\n                unset($servers[$k]);\n                continue;\n            }\n            $servers[$k]['Server']['input_source'] = 'network';\n            $servers[$k]['Server']['source_format'] = 'misp';\n            $servers[$k]['Server']['provider'] = $servers[$k]['RemoteOrg']['name'];\n            $servers[$k]['Server']['default'] = false;\n            $servers[$k]['Server']['is_misp_server'] = true;\n            $servers[$k]['Server']['values'] = $redis->sCard('misp:server_cache:' . $server['Server']['id']);\n        }\n        foreach ($feeds as $k => $feed) {\n            foreach ($feeds as $k2 => $feed2) {\n                if ($k == $k2) {\n                    continue;\n                }\n                $intersect = $redis->sInter('misp:feed_cache:' . $feed['Feed']['id'], 'misp:feed_cache:' . $feed2['Feed']['id']);\n                $feeds[$k]['Feed']['ComparedFeed'][] = array_merge(array_intersect_key($feed2['Feed'], $fields), array(\n                    'overlap_count' => count($intersect),\n                    'overlap_percentage' => round(100 * count($intersect) / $feeds[$k]['Feed']['values']),\n                ));\n            }\n            foreach ($servers as $k2 => $server) {\n                $intersect = $redis->sInter('misp:feed_cache:' . $feed['Feed']['id'], 'misp:server_cache:' . $server['Server']['id']);\n                $feeds[$k]['Feed']['ComparedFeed'][] = array_merge(array_intersect_key($server['Server'], $fields), array(\n                    'overlap_count' => count($intersect),\n                    'overlap_percentage' => round(100 * count($intersect) / $feeds[$k]['Feed']['values']),\n                ));\n            }\n        }\n        foreach ($servers as $k => $server) {\n            foreach ($feeds as $k2 => $feed2) {\n                $intersect = $redis->sInter('misp:server_cache:' . $server['Server']['id'], 'misp:feed_cache:' . $feed2['Feed']['id']);\n                $servers[$k]['Server']['ComparedFeed'][] = array_merge(array_intersect_key($feed2['Feed'], $fields), array(\n                    'overlap_count' => count($intersect),\n                    'overlap_percentage' => round(100 * count($intersect) / $servers[$k]['Server']['values']),\n                ));\n            }\n            foreach ($servers as $k2 => $server2) {\n                if ($k == $k2) {\n                    continue;\n                }\n                $intersect = $redis->sInter('misp:server_cache:' . $server['Server']['id'], 'misp:server_cache:' . $server2['Server']['id']);\n                $servers[$k]['Server']['ComparedFeed'][] = array_merge(array_intersect_key($server2['Server'], $fields), array(\n                    'overlap_count' => count($intersect),\n                    'overlap_percentage' => round(100 * count($intersect) / $servers[$k]['Server']['values']),\n                ));\n            }\n        }\n        foreach ($servers as $k => $server) {\n            $server['Feed'] = $server['Server'];\n            unset($server['Server']);\n            $feeds[] = $server;\n        }\n        return $feeds;\n    }\n\n    public function importFeeds($feeds, $user, $default = false)\n    {\n        if (is_string($feeds)) {\n            $feeds = json_decode($feeds, true);\n        }\n        if ($feeds && !isset($feeds[0])) {\n            $feeds = array($feeds);\n        }\n        $results = array('successes' => 0, 'fails' => 0);\n        if (empty($feeds)) {\n            return $results;\n        }\n        $existingFeeds = $this->find('all', array());\n        foreach ($feeds as $feed) {\n            if ($default) {\n                $feed['Feed']['default'] = 1;\n            } else {\n                $feed['Feed']['default'] = 0;\n            }\n            if (isset($feed['Feed']['id'])) {\n                unset($feed['Feed']['id']);\n            }\n            $found = false;\n            foreach ($existingFeeds as $existingFeed) {\n                if ($existingFeed['Feed']['url'] == $feed['Feed']['url']) {\n                    $found = true;\n                }\n            }\n            if (!$found) {\n                $feed['Feed']['tag_id'] = 0;\n                if (isset($feed['Tag'])) {\n                    $tag_id = $this->Tag->captureTag($feed['Tag'], $user);\n                    if ($tag_id) {\n                        $feed['Feed']['tag_id'] = $tag_id;\n                    }\n                }\n                $this->create();\n                if (!$this->save($feed, true, array('name', 'provider', 'url', 'rules', 'source_format', 'fixed_event', 'delta_merge', 'override_ids', 'publish', 'settings', 'tag_id', 'default', 'lookup_visible'))) {\n                    $results['fails']++;\n                } else {\n                    $results['successes']++;\n                }\n            }\n        }\n        return $results;\n    }\n\n    public function load_default_feeds()\n    {\n        $user = array('Role' => array('perm_tag_editor' => 1, 'perm_site_admin' => 1));\n        $json = file_get_contents(APP . 'files/feed-metadata/defaults.json');\n        $this->importFeeds($json, $user, true);\n        return true;\n    }\n\n    public function setEnableFeedCachingDefaults()\n    {\n        $feeds = $this->find('all', array(\n            'conditions' => array(\n                'Feed.enabled' => 1\n            ),\n            'recursive' => -1\n        ));\n        if (empty($feeds)) {\n            return true;\n        }\n        foreach ($feeds as $feed) {\n            $feed['Feed']['caching_enabled'] = 1;\n            $this->save($feed);\n        }\n        return true;\n    }\n\n    public function getFeedCoverage($id, $source_scope = 'feed', $dataset = 'all')\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return 'Could not reach Redis.';\n        }\n        $this->Server = ClassRegistry::init('Server');\n        $feed_conditions = array('Feed.caching_enabled' => 1);\n        $server_conditions = array('Server.caching_enabled' => 1);\n        if ($source_scope === 'feed') {\n            $feed_conditions['NOT'] = array('Feed.id' => $id);\n        } else {\n            $server_conditions['NOT'] = array('Server.id' => $id);\n        }\n        if ($dataset !== 'all') {\n            if (empty($dataset['Feed'])) {\n                $feed_conditions['OR'] = array('Feed.id' => -1);\n            } else {\n                $feed_conditions['OR'] = array('Feed.id' => $dataset['Feed']);\n            }\n            if (empty($dataset['Server'])) {\n                $server_conditions['OR'] = array('Server.id' => -1);\n            } else {\n                $server_conditions['OR'] = array('Server.id' => $dataset['Server']);\n            }\n        }\n        $other_feeds = $this->find('list', array(\n            'recursive' => -1,\n            'conditions' => $feed_conditions,\n            'fields' => array('Feed.id', 'Feed.id')\n        ));\n        $other_servers = $this->Server->find('list', array(\n            'recursive' => -1,\n            'conditions' => $server_conditions,\n            'fields' => array('Server.id', 'Server.id')\n        ));\n        $feed_element_count = $redis->scard('misp:feed_cache:' . $id);\n        $temp_store = (new RandomTool())->random_str(false, 12);\n        $params = array('misp:feed_temp:' . $temp_store);\n        foreach ($other_feeds as $other_feed) {\n            $params[] = 'misp:feed_cache:' . $other_feed;\n        }\n        foreach ($other_servers as $other_server) {\n            $params[] = 'misp:server_cache:' . $other_server;\n        }\n        if (count($params) != 1 && $feed_element_count > 0) {\n            call_user_func_array(array($redis, 'sunionstore'), $params);\n            call_user_func_array(array($redis, 'sinterstore'), array('misp:feed_temp:' . $temp_store . '_intersect', 'misp:feed_cache:' . $id, 'misp:feed_temp:' . $temp_store));\n            $cardinality_intersect = $redis->scard('misp:feed_temp:' . $temp_store . '_intersect');\n            $coverage = round(100 * $cardinality_intersect / $feed_element_count, 2);\n            $redis->del('misp:feed_temp:' . $temp_store);\n            $redis->del('misp:feed_temp:' . $temp_store . '_intersect');\n        } else {\n            $coverage = 0;\n        }\n        return $coverage;\n    }\n\n    public function getCachedElements($feedId)\n    {\n        $redis = $this->setupRedis();\n        $cardinality = $redis->sCard('misp:feed_cache:' . $feedId);\n        return $cardinality;\n    }\n\n    public function getAllCachingEnabledFeeds($feedId, $intersectingOnly = false) {\n        if ($intersectingOnly) {\n            $redis = $this->setupRedis();\n        }\n        $result['Feed'] = $this->find('all', array(\n            'conditions' => array(\n                'Feed.id !=' => $feedId,\n                'caching_enabled' => 1\n            ),\n            'recursive' => -1,\n            'fields' => array('Feed.id', 'Feed.name', 'Feed.url')\n        ));\n        $this->Server = ClassRegistry::init('Server');\n        $result['Server'] = $this->Server->find('all', array(\n            'conditions' => array(\n                'caching_enabled' => 1\n            ),\n            'recursive' => -1,\n            'fields' => array('Server.id', 'Server.name', 'Server.url')\n        ));\n        $scopes = array('Feed', 'Server');\n        foreach ($scopes as $scope) {\n            foreach ($result[$scope] as $k => $v) {\n                $result[$scope][$k] = $v[$scope];\n            }\n        }\n        if ($intersectingOnly) {\n            foreach ($scopes as $scope) {\n                if (!empty($result[$scope])) {\n                    foreach ($result[$scope] as $k => $feed) {\n                        $intersect = $redis->sInter('misp:feed_cache:' . $feedId, 'misp:' . lcfirst($scope) . '_cache:' . $feed['id']);\n                        if (empty($intersect)) {\n                            unset($result[$scope][$k]);\n                        } else {\n                            $result[$scope][$k]['matching_values'] = count($intersect);\n                        }\n                    }\n                }\n            }\n        }\n        return $result;\n    }\n\n    public function searchCaches($value)\n    {\n        $value = strtolower(trim($value));\n        $hits = array();\n        $this->Server = ClassRegistry::init('Server');\n        $result['Server'] = $this->Server->find('all', array(\n            'conditions' => array(\n                'caching_enabled' => 1\n            ),\n            'recursive' => -1,\n            'fields' => array('Server.id', 'Server.name', 'Server.url')\n        ));\n        $redis = $this->setupRedis();\n        if (empty($value) || $redis->sismember('misp:feed_cache:combined', md5($value))) {\n            $feeds = $this->find('all', array(\n                'conditions' => array(\n                    'caching_enabled' => 1\n                ),\n                'recursive' => -1,\n                'fields' => array('Feed.id', 'Feed.name', 'Feed.url', 'Feed.source_format')\n            ));\n            foreach ($feeds as $feed) {\n                if (empty($value) || $redis->sismember('misp:feed_cache:' . $feed['Feed']['id'], md5($value))) {\n                    if ($feed['Feed']['source_format'] === 'misp') {\n                        $uuid = $redis->smembers('misp:feed_cache:event_uuid_lookup:' . md5($value));\n                        foreach ($uuid as $k => $url) {\n                            $uuid[$k] = explode('/', $url)[1];\n                        }\n                        $feed['Feed']['uuid'] = $uuid;\n                        if (!empty($feed['Feed']['uuid'])) {\n                            foreach ($feed['Feed']['uuid'] as $uuid) {\n                                $feed['Feed']['direct_urls'][] = array(\n                                    'url' => sprintf(\n                                        '%s/feeds/previewEvent/%s/%s',\n                                        Configure::read('MISP.baseurl'),\n                                        h($feed['Feed']['id']),\n                                        h($uuid)\n                                    ),\n                                    'name' => __('Event %s', $uuid)\n                                );\n                            }\n                        }\n                        $feed['Feed']['type'] = 'MISP Feed';\n                    } else {\n                        $feed['Feed']['type'] = 'Feed';\n                        if (!empty($value)) {\n                            $feed['Feed']['direct_urls'][] = array(\n                                'url' => sprintf(\n                                    '%s/feeds/previewIndex/%s',\n                                    Configure::read('MISP.baseurl'),\n                                    h($feed['Feed']['id'])\n                                ),\n                                'name' => __('Feed %s', $feed['Feed']['id'])\n                            );\n                        }\n                    }\n                    $hits[] = $feed;\n                }\n            }\n        }\n        if (empty($value) || $redis->sismember('misp:server_cache:combined', md5($value))) {\n            $this->Server = ClassRegistry::init('Server');\n            $servers = $this->Server->find('all', array(\n                'conditions' => array(\n                    'caching_enabled' => 1\n                ),\n                'recursive' => -1,\n                'fields' => array('Server.id', 'Server.name', 'Server.url')\n            ));\n            foreach ($servers as $server) {\n                if (empty($value) || $redis->sismember('misp:server_cache:' . $server['Server']['id'], md5($value))) {\n                    $uuid = $redis->smembers('misp:server_cache:event_uuid_lookup:' . md5($value));\n                    if (!empty($uuid)) {\n                        foreach ($uuid as $k => $url) {\n                            $uuid[$k] = explode('/', $url)[1];\n                            $server['Server']['direct_urls'][] = array(\n                                'url' => sprintf(\n                                    '%s/servers/previewEvent/%s/%s',\n                                    Configure::read('MISP.baseurl'),\n                                    h($server['Server']['id']),\n                                    h($uuid[$k])\n                                ),\n                                'name' => __('Event %s', h($uuid[$k]))\n                            );\n                        }\n                    }\n                    $server['Server']['uuid'] = $uuid;\n                    $server['Server']['type'] = 'MISP Server';\n                    $hits[] = array('Feed' => $server['Server']);\n                }\n            }\n        }\n        return $hits;\n    }\n\n    /**\n     * Download and parse event from feed.\n     * @param array $feed\n     * @param string $eventUuid\n     * @param HttpSocket $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    private function downloadAndParseEventFromFeed($feed, $eventUuid, $HttpSocket)\n    {\n        if (!Validation::uuid($eventUuid)) {\n            throw new InvalidArgumentException(\"Given event UUID '$eventUuid' is invalid.\");\n        }\n\n        $path = $feed['Feed']['url'] . '/' . $eventUuid . '.json';\n        $data = $this->feedGetUri($feed, $path, $HttpSocket);\n        $event = json_decode($data, true);\n        if ($event === null) {\n            throw new Exception('Could not parse event JSON: ' . json_last_error_msg(), json_last_error());\n        }\n\n        return $event;\n    }\n\n    /**\n     * @param array $feed\n     * @param string $uri\n     * @param HttpSocket $HttpSocket\n     * @param bool $followRedirect\n     * @return string\n     * @throws Exception\n     */\n    private function feedGetUri($feed, $uri, $HttpSocket, $followRedirect = false)\n    {\n        if ($this->isFeedLocal($feed)) {\n            if (file_exists($uri)) {\n                $data = file_get_contents($uri);\n                if ($data === false) {\n                    throw new Exception(\"Could not read local file '$uri'.\");\n                }\n            } else {\n                throw new Exception(\"Local file '$uri' doesn't exists.\");\n            }\n        } else {\n            $request = $this->__createFeedRequest($feed['Feed']['headers']);\n\n            if ($followRedirect) {\n                $response = $this->getFollowRedirect($HttpSocket, $uri, $request);\n            } else {\n                $response = $HttpSocket->get($uri, array(), $request);\n            }\n\n            if ($response === false) {\n                throw new Exception(\"Could not reach '$uri'.\");\n            } else if ($response->code != 200) { // intentionally !=\n                throw new Exception(\"Fetching the '$uri' failed with HTTP error {$response->code}: {$response->reasonPhrase}\");\n            }\n            $data = $response->body;\n        }\n\n        return $data;\n    }\n\n    /**\n     * It should be possible to use 'redirect' $request attribute, but because HttpSocket contains bug that require\n     * certificate for first domain even when redirect to another domain, we need to use own solution.\n     *\n     * @param HttpSocket $HttpSocket\n     * @param string $url\n     * @param array $request\n     * @param int $iterations\n     * @return false|HttpSocketResponse\n     * @throws Exception\n     */\n    private function getFollowRedirect(HttpSocket $HttpSocket, $url, $request, $iterations = 5)\n    {\n        for ($i = 0; $i < $iterations; $i++) {\n            $response = $HttpSocket->get($url, array(), $request);\n            if ($response->isRedirect()) {\n                $HttpSocket = $this->__setupHttpSocket(null); // Replace $HttpSocket with fresh instance\n                $url = trim($response->getHeader('Location'), '=');\n            } else {\n                return $response;\n            }\n        }\n\n        throw new Exception(\"Maximum number of iteration reached.\");\n    }\n\n    /**\n     * @param array $feed\n     * @return bool\n     */\n    private function isFeedLocal($feed)\n    {\n        return isset($feed['Feed']['input_source']) && $feed['Feed']['input_source'] === 'local';\n    }\n\n    /**\n     * @param int|null $jobId\n     * @param string|null $message\n     * @param int|null $progress\n     */\n    private function jobProgress($jobId = null, $message = null, $progress = null)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n\n            $jobData = array($job->primaryKey => $jobId);\n            if ($message) {\n                $jobData['message'] = $message;\n            }\n            if ($progress) {\n                $jobData['progress'] = $progress;\n            }\n            try {\n                $job->save($jobData);\n            } catch (Exception $e) {\n                // ignore error during saving information about job\n            }\n        }\n    }\n\n    /**\n     * remove all events tied to a feed. Returns int on success, error message\n     * as string on failure\n     */\n    public function cleanupFeedEvents($user_id, $id)\n    {\n        $feed = $this->find('first', array(\n            'conditions' => array('Feed.id' => $id),\n            'recursive' => -1\n        ));\n        if (empty($feed)) {\n            return __('Invalid feed id.');\n        }\n        if (!in_array($feed['Feed']['source_format'], array('csv', 'freetext'))) {\n            return __('Feed has to be either a CSV or a freetext feed for the purging to work.');\n        }\n        $this->User = ClassRegistry::init('User');\n        $user = $this->User->getAuthUser($user_id);\n        if (empty($user)) {\n            return __('Invalid user id.');\n        }\n        $conditions = array('Event.info' => $feed['Feed']['name'] . ' feed');\n        $this->Event = ClassRegistry::init('Event');\n        $events = $this->Event->find('list', array(\n            'conditions' => $conditions,\n            'fields' => array('Event.id', 'Event.id')\n        ));\n        $count = count($events);\n        foreach ($events as $event_id) {\n            $this->Event->delete($event_id);\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n                'org' => 'SYSTEM',\n                'model' => 'Feed',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'purge_events',\n                'title' => __('Events related to feed %s purged.', $id),\n                'change' => null,\n        ));\n        $feed['Feed']['fixed_event'] = 1;\n        $feed['Feed']['event_id'] = 0;\n        $this->save($feed);\n        return $count;\n    }\n}\n", "<?php\nApp::uses('AppModel', 'Model');\n\nclass Server extends AppModel\n{\n    public $name = 'Server';\n\n    public $actsAs = array('SysLogLogable.SysLogLogable' => array(\n            'userModel' => 'User',\n            'userKey' => 'user_id',\n            'change' => 'full'\n        ),\n        'Trim',\n        'Containable'\n    );\n\n    public $belongsTo = array(\n        'Organisation' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'org_id',\n        ),\n        'RemoteOrg' => array(\n            'className' => 'Organisation',\n            'foreignKey' => 'remote_org_id',\n        )\n    );\n\n    public $hasMany = array(\n        'SharingGroupServer' => array(\n            'className' => 'SharingGroupServer',\n            'foreignKey' => 'server_id',\n            'dependent'=> true,\n        ),\n        'User' => array(\n            'className' => 'User',\n            'foreignKey' => 'server_id',\n        ),\n    );\n\n    public $displayField = 'url';\n\n    public $validate = array(\n        'url' => array(\n            'url' => array(\n                'rule' => array('url'),\n                'message' => 'Please enter a valid base-url.'\n            )\n        ),\n        'authkey' => array(\n            'rule' => array('validateAuthkey')\n        ),\n        'name' => array(\n            'rule' => array('notBlank'),\n            'allowEmpty' => false,\n            'required' => true\n        ),\n        'org_id' => array(\n            'numeric' => array(\n                'rule' => array('valueIsID'),\n                'allowEmpty' => false,\n                'required' => true,\n            ),\n        ),\n        'push' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'pull' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                //'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'push_sightings' => array(\n            'boolean' => array(\n                'rule' => array('boolean'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'lastpushedid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n        'lastpulledid' => array(\n            'numeric' => array(\n                'rule' => array('numeric'),\n                //'message' => 'Your custom message here',\n                'allowEmpty' => true,\n                'required' => false,\n                //'last' => false, // Stop validation after this rule\n                //'on' => 'create', // Limit validation to 'create' or 'update' operations\n            ),\n        ),\n    );\n\n    public $syncTestErrorCodes = array();\n\n    public function __construct($id = false, $table = null, $ds = null)\n    {\n        parent::__construct($id, $table, $ds);\n\n        $this->syncTestErrorCodes = array(\n            2 => __('Server unreachable'),\n            3 => __('Unexpected error'),\n            4 => __('Authentication failed'),\n            5 => __('Password change required'),\n            6 => __('Terms not accepted')\n        );\n\n        $this->command_line_functions = array(\n            'console_admin_tasks' => array(\n                'data' => array(\n                    'Get setting' => 'MISP/app/Console/cake Admin getSetting [setting]',\n                    'Set setting' => 'MISP/app/Console/cake Admin setSetting [setting] [value]',\n                    'Get authkey' => 'MISP/app/Console/cake Admin getAuthkey [email]',\n                    'Set baseurl' => 'MISP/app/Console/cake Baseurl [baseurl]',\n                    'Change password' => 'MISP/app/Console/cake Password [email] [new_password] [--override_password_change]',\n                    'Clear Bruteforce Entries' => 'MISP/app/Console/cake Admin clearBruteforce [user_email]',\n                    'Run database update' => 'MISP/app/Console/cake Admin updateDatabase',\n                    'Update all JSON structures' => 'MISP/app/Console/cake Admin updateJSON',\n                    'Update Galaxy definitions' => 'MISP/app/Console/cake Admin updateGalaxies',\n                    'Update taxonomy definitions' => 'MISP/app/Console/cake Admin updateTaxonomies',\n                    'Update object templates' => 'MISP/app/Console/cake Admin updateObjectTemplates',\n                    'Update Warninglists' => 'MISP/app/Console/cake Admin updateWarningLists',\n                    'Update Noticelists' => 'MISP/app/Console/cake Admin updateNoticeLists',\n                    'Set default role' => 'MISP/app/Console/cake Admin setDefaultRole [role_id]',\n                    'Get IPs for user ID' => 'MISP/app/Console/cake Admin UserIP [user_id]',\n                    'Get user ID for user IP' => 'MISP/app/Console/cake Admin IPUser [ip]',\n                ),\n                'description' => __('Certain administrative tasks are exposed to the API, these help with maintaining and configuring MISP in an automated way / via external tools.'),\n                'header' => __('Administering MISP via the CLI')\n            ),\n            'console_automation_tasks' => array(\n                'data' => array(\n                    'Pull' => 'MISP/app/Console/cake Server pull [user_id] [server_id] [full|update]',\n                    'Push' => 'MISP/app/Console/cake Server push [user_id] [server_id]',\n                    'Cache feeds for quick lookups' => 'MISP/app/Console/cake Server cacheFeed [user_id] [feed_id|all|csv|text|misp]',\n                    'Fetch feeds as local data' => 'MISP/app/Console/cake Server fetchFeed [user_id] [feed_id|all|csv|text|misp]',\n                    'Run enrichment' => 'MISP/app/Console/cake Event enrichEvent [user_id] [event_id] [json_encoded_module_list]',\n                    'Test' => 'MISP/app/Console/cake Server test [server_id]',\n                    'List' => 'MISP/app/Console/cake Server list'\n                ),\n                'description' => __('If you would like to automate tasks such as caching feeds or pulling from server instances, you can do it using the following command line tools. Simply execute the given commands via the command line / create cron jobs easily out of them.'),\n                'header' => __('Automating certain console tasks')\n            ),\n            'worker_management_tasks' => array(\n                'data' => array(\n                    'Get list of workers' => 'MISP/app/Console/cake Admin getWorkers [all|dead]',\n                    'Start a worker' => 'MISP/app/Console/cake Admin startWorker [queue_name]',\n                    'Restart a worker' => 'MISP/app/Console/cake Admin restartWorker [worker_pid]',\n                    'Kill a worker' => 'MISP/app/Console/cake Admin killWorker [worker_pid]',\n                ),\n                'description' => __('The background workers can be managed via the CLI in addition to the UI / API management tools'),\n                'header' => __('Managing the background workers')\n            )\n        );\n\n        $this->serverSettings = array(\n                'MISP' => array(\n                        'branch' => 1,\n                        'baseurl' => array(\n                                'level' => 0,\n                                'description' => __('The base url of the application (in the format https://www.mymispinstance.com). Several features depend on this setting being correctly set to function.'),\n                                'value' => '',\n                                'errorMessage' => __('The currenty set baseurl does not match the URL through which you have accessed the page. Disregard this if you are accessing the page via an alternate URL (for example via IP address).'),\n                                'test' => 'testBaseURL',\n                                'type' => 'string',\n                        ),\n                        'external_baseurl' => array(\n                                'level' => 0,\n                                'description' => __('The base url of the application (in the format https://www.mymispinstance.com) as visible externally/by other MISPs. MISP will encode this URL in sharing groups when including itself. If this value is not set, the baseurl is used as a fallback.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testURL',\n                                'type' => 'string',\n                        ),\n                        'live' => array(\n                                'level' => 0,\n                                'description' => __('Unless set to true, the instance will only be accessible by site admins.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testLive',\n                                'type' => 'boolean',\n                        ),\n                        'language' => array(\n                                'level' => 0,\n                                'description' => __('Select the language MISP should use. The default is english.'),\n                                'value' => 'eng',\n                                'errorMessage' => '',\n                                'test' => 'testLanguage',\n                                'type' => 'string',\n                                'optionsSource' => 'AvailableLanguages',\n                                'afterHook' => 'cleanCacheFiles'\n                        ),\n                        'default_attribute_memory_coefficient' => array(\n                                'level' => 1,\n                                'description' => __('This values controls the internal fetcher\\'s memory envelope when it comes to attributes. The number provided is the amount of attributes that can be loaded for each MB of PHP memory available in one shot. Consider lowering this number if your instance has a lot of attribute tags / attribute galaxies attached.'),\n                                'value' => 80,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true\n                        ),\n                        'default_event_memory_divisor' => array(\n                                'level' => 1,\n                                'description' => __('This value controls the divisor for attribute weighting when it comes to loading full events. Meaning that it will load coefficient / divisor number of attributes per MB of memory available. Consider raising this number if you have a lot of correlations or highly contextualised events (large number of event level galaxies/tags).'),\n                                'value' => 3,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true\n                        ),\n                        'enable_advanced_correlations' => array(\n                                'level' => 0,\n                                'description' => __('Enable some performance heavy correlations (currently CIDR correlation)'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'server_settings_skip_backup_rotate' => array(\n                            'level' => 1,\n                            'description' => __('Enable this setting to directly save the config.php file without first creating a temporary file and moving it to avoid concurency issues. Generally not recommended, but useful when for example other tools modify/maintain the config.php file.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'python_bin' => array(\n                                'level' => 1,\n                                'description' => __('It is highly recommended to install all the python dependencies in a virtualenv. The recommended location is: %s/venv', ROOT),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'null' => false,\n                                'test' => 'testForBinExec',\n                                'beforeHook' => 'beforeHookBinExec',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'ca_path' => array(\n                                'level' => 1,\n                                'description' => __('MISP will default to the bundled mozilla certificate bundle shipped with the framework, which is rather stale. If you wish to use an alternate bundle, just set this setting using the path to the bundle to use. This setting can only be modified via the CLI.'),\n                                'value' => APP . 'Lib/cakephp/lib/Cake/Config/cacert.pem',\n                                'errorMessage' => '',\n                                'null' => true,\n                                'test' => 'testForCABundle',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'disable_auto_logout' => array(\n                                'level' => 1,\n                                'description' => __('In some cases, a heavily used MISP instance can generate unwanted blackhole errors due to a high number of requests hitting the server. Disable the auto logout functionality to ease the burden on the system.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'ssdeep_correlation_threshold' => array(\n                            'level' => 1,\n                            'description' => __('Set the ssdeep score at which to consider two ssdeep hashes as correlating [1-100]'),\n                            'value' => 40,\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'numeric'\n                        ),\n                        'max_correlations_per_event' => array(\n                                'level' => 1,\n                                'description' => __('Sets the maximum number of correlations that can be fetched with a single event. For extreme edge cases this can prevent memory issues. The default value is 5k.'),\n                                'value' => 5000,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true\n                        ),\n                        'maintenance_message' => array(\n                                'level' => 2,\n                                'description' => __('The message that users will see if the instance is not live.'),\n                                'value' => 'Great things are happening! MISP is undergoing maintenance, but will return shortly. You can contact the administration at $email.',\n                                'errorMessage' => __('If this is not set the default value will be used.'),\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'name' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'version' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disable_cached_exports' => array(\n                                'level' => 1,\n                                'description' => __('Cached exports can take up a considerable amount of space and can be disabled instance wide using this setting. Disabling the cached exports is not recommended as it\\'s a valuable feature, however, if your server is having free space issues it might make sense to take this step.'),\n                                'value' => false,\n                                'null' => true,\n                                'errorMessage' => '',\n                                'test' => 'testDisableCache',\n                                'type' => 'boolean',\n                                'afterHook' => 'disableCacheAfterHook',\n                        ),\n                        'disable_threat_level' => array(\n                                'level' => 1,\n                                'description' => __('Disable displaying / modifications to the threat level altogether on the instance (deprecated field).'),\n                                'value' => false,\n                                'null' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'header' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footermidleft' => array(\n                                'level' => 2,\n                                'description' => __('Footer text prepending the \"Powered by MISP\" text.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footermidright' => array(\n                                'level' => 2,\n                                'description' => __('Footer text following the \"Powered by MISP\" text.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerpart1' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerpart2' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footer' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footerversion' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'footer_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, this setting allows you to display a logo on the right side of the footer. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'home_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, this setting allows you to display a logo as the home icon. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'main_logo' => array(\n                                'level' => 2 ,\n                                'description' => __('If set, the image specified here will replace the main MISP logo on the login screen. Upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'org' => array(\n                                'level' => 1,\n                                'description' => __('The organisation tag of the hosting organisation. This is used in the e-mail subjects.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'host_org_id' => array(\n                                'level' => 0,\n                                'description' => __('The hosting organisation of this instance. If this is not selected then replication instances cannot be added.'),\n                                'value' => '0',\n                                'errorMessage' => '',\n                                'test' => 'testLocalOrg',\n                                'type' => 'numeric',\n                                'optionsSource' => 'LocalOrgs',\n                        ),\n                        'uuid' => array(\n                                'level' => 0,\n                                'description' => __('The MISP instance UUID. This UUID is used to identify this instance.'),\n                                'value' => '0',\n                                'errorMessage' => __('No valid UUID set'),\n                                'test' => 'testUuid',\n                                'type' => 'string'\n                        ),\n                        'logo' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'showorg' => array(\n                                'level' => 0,\n                                'description' => __('Setting this setting to \\'false\\' will hide all organisation names / logos.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'threatlevel_in_email_subject' => array(\n                                'level' => 2,\n                                'description' => __('Put the event threat level in the notification E-mail subject.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                            ),\n                        'email_subject_TLP_string' => array(\n                                'level' => 2,\n                                'description' => __('This is the TLP string for e-mails when email_subject_tag is not found.'),\n                                'value' => 'tlp:amber',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                            ),\n                        'email_subject_tag' => array(\n                                'level' => 2,\n                                'description' => __('If this tag is set on an event it\\'s value will be sent in the E-mail subject. If the tag is not set the email_subject_TLP_string will be used.'),\n                                'value' => 'tlp',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                            ),\n                        'email_subject_include_tag_name' => array(\n                                'level' => 2,\n                                'description' => __('Include in name of the email_subject_tag in the subject. When false only the tag value is used.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                            ),\n                        'taxii_sync' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'taxii_client_path' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'background_jobs' => array(\n                                'level' => 1,\n                                'description' => __('Enables the use of MISP\\'s background processing.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'attachments_dir' => array(\n                                'level' => 2,\n                                'description' => __('Directory where attachments are stored. MISP will NOT migrate the existing data if you change this setting. The only safe way to change this setting is in config.php, when MISP is not running, and after having moved/copied the existing data to the new location. This directory must already exist and be writable and readable by the MISP application.'),\n                                'value' =>  APP . '/files', # GUI display purpose only.\n                                'errorMessage' => '',\n                                'null' => false,\n                                'test' => 'testForWritableDir',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'cached_attachments' => array(\n                                'level' => 1,\n                                'description' => __('Allow the XML caches to include the encoded attachments.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'download_attachments_on_load' => array(\n                            'level' => 2,\n                            'description' => __('Always download attachments when loaded by a user in a browser'),\n                            'value' => true,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 0,\n                                'description' => __('The e-mail address that MISP should use for all notifications'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disable_emailing' => array(\n                                'level' => 0,\n                                'description' => __('You can disable all e-mailing using this setting. When enabled, no outgoing e-mails will be sent by MISP.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'null' => true,\n                                'test' => 'testDisableEmail',\n                                'type' => 'boolean',\n                        ),\n                        'contact' => array(\n                                'level' => 1,\n                                'description' => __('The e-mail address that MISP should include as a contact address for the instance\\'s support team.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'dns' => array(\n                                'level' => 3,\n                                'description' => __('This setting is deprecated and can be safely removed.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cveurl' => array(\n                                'level' => 1,\n                                'description' => __('Turn Vulnerability type attributes into links linking to the provided CVE lookup'),\n                                'value' => 'http://cve.circl.lu/cve/',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cweurl' => array(\n                                'level' => 1,\n                                'description' => __('Turn Weakness type attributes into links linking to the provided CWE lookup'),\n                                'value' => 'http://cve.circl.lu/cwe/',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'disablerestalert' => array(\n                                'level' => 1,\n                                'description' => __('This setting controls whether notification e-mails will be sent when an event is created via the REST interface. It might be a good idea to disable this setting when first setting up a link to another instance to avoid spamming your users during the initial pull. Quick recap: True = Emails are NOT sent, False = Emails are sent on events published via sync / REST.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'extended_alert_subject' => array(\n                                'level' => 1,\n                                'description' => __('enabling this flag will allow the event description to be transmitted in the alert e-mail\\'s subject. Be aware that this is not encrypted by GnuPG, so only enable it if you accept that part of the event description will be sent out in clear-text.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'default_event_distribution' => array(\n                                'level' => 0,\n                                'description' => __('The default distribution setting for events (0-3).'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('0' => 'Your organisation only', '1' => 'This community only', '2' => 'Connected communities', '3' => 'All communities'),\n                        ),\n                        'default_attribute_distribution' => array(\n                                'level' => 0,\n                                'description' => __('The default distribution setting for attributes, set it to \\'event\\' if you would like the attributes to default to the event distribution level. (0-3 or \"event\")'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('0' => 'Your organisation only', '1' => 'This community only', '2' => 'Connected communities', '3' => 'All communities', 'event' => 'Inherit from event'),\n                        ),\n                        'default_event_threat_level' => array(\n                                'level' => 1,\n                                'description' => __('The default threat level setting when creating events.'),\n                                'value' => 4,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array('1' => 'High', '2' => 'Medium', '3' => 'Low', '4' => 'undefined'),\n                        ),\n                        'default_event_tag_collection' => array(\n                            'level' => 0,\n                            'description' => __('The tag collection to be applied to all events created manually.'),\n                            'value' => 0,\n                            'errorMessage' => '',\n                            'test' => 'testTagCollections',\n                            'type' => 'numeric',\n                            'optionsSource' => 'TagCollections',\n                        ),\n                        'default_publish_alert' => array(\n                                'level' => 0,\n                                'description' => __('The default setting for publish alerts when creating users.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'tagging' => array(\n                                'level' => 1,\n                                'description' => __('Enable the tagging feature of MISP. This is highly recommended.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'full_tags_on_event_index' => array(\n                                'level' => 2,\n                                'description' => __('Show the full tag names on the event index.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'options' => array(0 => 'Minimal tags', 1 => 'Full tags', 2 => 'Shortened tags'),\n                        ),\n                        'welcome_text_top' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, before the MISP logo'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'welcome_text_bottom' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, after the MISP logo'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'welcome_logo' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, to the left of the MISP logo, upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'welcome_logo2' => array(\n                                'level' => 2,\n                                'description' => __('Used on the login page, to the right of the MISP logo, upload it as a custom image in the file management tool.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCustomImage',\n                                'type' => 'string',\n                        ),\n                        'title_text' => array(\n                            'level' => 2,\n                            'description' => __('Used in the page title, after the name of the page'),\n                            'value' => 'MISP',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'take_ownership_xml_import' => array(\n                                'level' => 2,\n                                'description' => __('Allows users to take ownership of an event uploaded via the \"Add MISP XML\" button. This allows spoofing the creator of a manually imported event, also breaking possibly breaking the original intended releasability. Synchronising with an instance that has a different creator for the same event can lead to unwanted consequences.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'terms_download' => array(\n                                'level' => 2,\n                                'description' => __('Choose whether the terms and conditions should be displayed inline (false) or offered as a download (true)'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'terms_file' => array(\n                                'level' => 2,\n                                'description' => __('The filename of the terms and conditions file. Make sure that the file is located in your MISP/app/files/terms directory'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForTermsFile',\n                                'type' => 'string'\n                        ),\n                        'showorgalternate' => array(\n                                'level' => 2,\n                                'description' => __('True enables the alternate org fields for the event index (source org and member org) instead of the traditional way of showing only an org field. This allows users to see if an event was uploaded by a member organisation on their MISP instance, or if it originated on an interconnected instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'unpublishedprivate' => array(\n                                'level' => 2,\n                                'description' => __('True will deny access to unpublished events to users outside the organization of the submitter except site admins.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'newUserText' => array(\n                                'level' => 1,\n                                'bigField' => true,\n                                'description' => __('The message sent to the user after account creation (has to be sent manually from the administration interface). Use \\\\n for line-breaks. The following variables will be automatically replaced in the text: $password = a new temporary password that MISP generates, $username = the user\\'s e-mail address, $misp = the url of this instance, $org = the organisation that the instance belongs to, as set in MISP.org, $contact = the e-mail address used to contact the support team, as set in MISP.contact. For example, \"the password for $username is $password\" would appear to a user with the e-mail address user@misp.org as \"the password for user@misp.org is hNamJae81\".'),\n                                'value' => 'Dear new MISP user,\\n\\nWe would hereby like to welcome you to the $org MISP community.\\n\\n Use the credentials below to log into MISP at $misp, where you will be prompted to manually change your password to something of your own choice.\\n\\nUsername: $username\\nPassword: $password\\n\\nIf you have any questions, don\\'t hesitate to contact us at: $contact.\\n\\nBest regards,\\nYour $org MISP support team',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordResetText',\n                                'type' => 'string'\n                        ),\n                        'passwordResetText' => array(\n                                'level' => 1,\n                                'bigField' => true,\n                                'description' => __('The message sent to the users when a password reset is triggered. Use \\\\n for line-breaks. The following variables will be automatically replaced in the text: $password = a new temporary password that MISP generates, $username = the user\\'s e-mail address, $misp = the url of this instance, $contact = the e-mail address used to contact the support team, as set in MISP.contact. For example, \"the password for $username is $password\" would appear to a user with the e-mail address user@misp.org as \"the password for user@misp.org is hNamJae81\".'),\n                                'value' => 'Dear MISP user,\\n\\nA password reset has been triggered for your account. Use the below provided temporary password to log into MISP at $misp, where you will be prompted to manually change your password to something of your own choice.\\n\\nUsername: $username\\nYour temporary password: $password\\n\\nIf you have any questions, don\\'t hesitate to contact us at: $contact.\\n\\nBest regards,\\nYour $org MISP support team',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordResetText',\n                                'type' => 'string'\n                        ),\n                        'enableEventBlacklisting' => array(\n                                'level' => 1,\n                                'description' => __('Since version 2.3.107 you can start blacklisting event UUIDs to prevent them from being pushed to your instance. This functionality will also happen silently whenever an event is deleted, preventing a deleted event from being pushed back from another instance.'),\n                                'value' => true,\n                                'type' => 'boolean',\n                                'test' => 'testBool'\n                        ),\n                        'enableOrgBlacklisting' => array(\n                                'level' => 1,\n                                'description' => __('Blacklisting organisation UUIDs to prevent the creation of any event created by the blacklisted organisation.'),\n                                'value' => true,\n                                'type' => 'boolean',\n                                'test' => 'testBool'\n                        ),\n                        'log_client_ip' => array(\n                                'level' => 1,\n                                'description' => __('If enabled, all log entries will include the IP address of the user.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'beforeHook' => 'ipLogBeforeHook'\n                        ),\n                        'log_auth' => array(\n                                'level' => 1,\n                                'description' => __('If enabled, MISP will log all successful authentications using API keys. The requested URLs are also logged.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'log_skip_db_logs_completely' => array(\n                            'level' => 0,\n                            'description' => __('This functionality allows you to completely disable any logs from being saved in your SQL backend. This is HIGHLY advised against, you lose all the functionalities provided by the audit log subsystem along with the event history (as these are built based on the logs on the fly). Only enable this if you understand and accept the associated risks.'),\n                            'value' => false,\n                            'errorMessage' => __('Logging has now been disabled - your audit logs will not capture failed authentication attempts, your event history logs are not being populated and no system maintenance messages are being logged.'),\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'log_paranoid' => array(\n                                'level' => 0,\n                                'description' => __('If this functionality is enabled all page requests will be logged. Keep in mind this is extremely verbose and will become a burden to your database.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_paranoid_skip_db' => array(\n                                'level' => 0,\n                                'description' => __('You can decide to skip the logging of the paranoid logs to the database.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testParanoidSkipDb',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_paranoid_include_post_body' => array(\n                                'level' => 0,\n                                'description' => __('If paranoid logging is enabled, include the POST body in the entries.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'log_user_ips' => array(\n                                'level' => 0,\n                                'description' => __('Log user IPs on each request. 30 day retention for lookups by IP to get the last authenticated user ID for the given IP, whilst on the reverse, indefinitely stores all associated IPs for a user ID.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'delegation' => array(\n                                'level' => 1,\n                                'description' => __('This feature allows users to create org only events and ask another organisation to take ownership of the event. This allows organisations to remain anonymous by asking a partner to publish an event for them.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showCorrelationsOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the number of correlations visible to the currently logged in user will be visible on the event index UI. This comes at a performance cost but can be very useful to see correlating events at a glance.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showProposalsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the number of proposals for the events are shown on the index.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showSightingsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the aggregate number of attribute sightings within the event becomes visible to the currently logged in user on the event index UI.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'showDiscussionsCountOnIndex' => array(\n                                'level' => 1,\n                                'description' => __('When enabled, the aggregate number of discussion posts for the event becomes visible to the currently logged in user on the event index UI.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'disableUserSelfManagement' => array(\n                                'level' => 1,\n                                'description' => __('When enabled only Org and Site admins can edit a user\\'s profile.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n\n                        ),\n                        'block_event_alert' => array(\n                                'level' => 1,\n                                'description' => __('Enable this setting to start blocking alert e-mails for events with a certain tag. Define the tag in MISP.block_event_alert_tag.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'block_event_alert_tag' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_event_alert setting is set, alert e-mails for events tagged with the tag defined by this setting will be blocked.'),\n                                'value' => 'no-alerts=\"true\"',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => false,\n                        ),\n                        'org_alert_threshold' => array(\n                                'level' => 1,\n                                'description' => __('Set a value to limit the number of email alerts that events can generate per creator organisation (for example, if an organisation pushes out 2000 events in one shot, only alert on the first 20).'),\n                                'value' => 0,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => true,\n                        ),\n                        'block_old_event_alert' => array(\n                                'level' => 1,\n                                'description' => __('Enable this setting to start blocking alert e-mails for old events. The exact timing of what constitutes an old event is defined by MISP.block_old_event_alert_age.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'block_old_event_alert_age' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_old_event_alert setting is set, this setting will control how old an event can be for it to be alerted on. The \"timestamp\" field of the event is used. Expected format: integer, in days'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => false,\n                        ),\n                        'block_old_event_alert_by_date' => array(\n                                'level' => 1,\n                                'description' => __('If the MISP.block_old_event_alert setting is set, this setting will control the threshold for the event.date field, indicating how old an event can be for it to be alerted on. The \"date\" field of the event is used. Expected format: integer, in days'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                                'null' => false,\n                        ),\n                        'tmpdir' => array(\n                                'level' => 1,\n                                'description' => __('Please indicate the temp directory you wish to use for certain functionalities in MISP. By default this is set to /tmp and will be used among others to store certain temporary files extracted from imports during the import process.'),\n                                'value' => '/tmp',\n                                'errorMessage' => '',\n                                'test' => 'testForPath',\n                                'type' => 'string',\n                                'null' => true,\n                                'cli_only' => 1\n                        ),\n                        'custom_css' => array(\n                                'level' => 2,\n                                'description' => __('If you would like to customise the css, simply drop a css file in the /var/www/MISP/app/webroot/css directory and enter the name here.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForStyleFile',\n                                'type' => 'string',\n                                'null' => true,\n                        ),\n                        'proposals_block_attributes' => array(\n                                'level' => 0,\n                                'description' => __('Enable this setting to allow blocking attributes from to_ids sensitive exports if a proposal has been made to it to remove the IDS flag or to remove the attribute altogether. This is a powerful tool to deal with false-positives efficiently.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false,\n                        ),\n                        'incoming_tags_disabled_by_default' => array(\n                                'level' => 1,\n                                'description' => __('Enable this settings if new tags synced / added via incoming events from any source should not be selectable by users by default.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => false\n                        ),\n                        'completely_disable_correlation' => array(\n                                'level' => 0,\n                                'description' => __('*WARNING* This setting will completely disable the correlation on this instance and remove any existing saved correlations. Enabling this will trigger a full recorrelation of all data which is an extremely long and costly procedure. Only enable this if you know what you\\'re doing.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true,\n                                'afterHook' => 'correlationAfterHook',\n                        ),\n                        'allow_disabling_correlation' => array(\n                                'level' => 0,\n                                'description' => __('*WARNING* This setting will give event creators the possibility to disable the correlation of individual events / attributes that they have created.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'redis_host' => array(\n                            'level' => 0,\n                            'description' => __('The host running the redis server to be used for generic MISP tasks such as caching. This is not to be confused by the redis server used by the background processing.'),\n                            'value' => '127.0.0.1',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'redis_port' => array(\n                            'level' => 0,\n                            'description' => __('The port used by the redis server to be used for generic MISP tasks such as caching. This is not to be confused by the redis server used by the background processing.'),\n                            'value' => 6379,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'redis_database' => array(\n                            'level' => 0,\n                            'description' => __('The database on the redis server to be used for generic MISP tasks. If you run more than one MISP instance, please make sure to use a different database on each instance.'),\n                            'value' => 13,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'redis_password' => array(\n                            'level' => 0,\n                            'description' => __('The password on the redis server (if any) to be used for generic MISP tasks.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => null,\n                            'type' => 'string',\n                            'redacted' => true\n                        ),\n                        'event_view_filter_fields' => array(\n                            'level' => 2,\n                            'description' => __('Specify which fields to filter on when you search on the event view. Default values are : \"id, uuid, value, comment, type, category, Tag.name\"'),\n                            'value' => 'id, uuid, value, comment, type, category, Tag.name',\n                            'errorMessage' => '',\n                            'test' => null,\n                            'type' => 'string',\n                        ),\n                        'manage_workers' => array(\n                                'level' => 2,\n                                'description' => __('Set this to false if you would like to disable MISP managing its own worker processes (for example, if you are managing the workers with a systemd unit).'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'deadlock_avoidance' => array(\n                                'level' => 1,\n                                'description' => __('Only enable this if you have some tools using MISP with extreme high concurency. General performance will be lower as normal as certain transactional queries are avoided in favour of shorter table locks.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'updateTimeThreshold' => array(\n                               'level' => 1,\n                               'description' => __('Sets the minimum time before being able to re-trigger an update if the previous one failed. (safe guard to avoid starting the same update multiple time)'),\n                               'value' => '7200',\n                               'test' => 'testForNumeric',\n                               'type' => 'numeric',\n                               'null' => true\n                       )\n                ),\n                'GnuPG' => array(\n                        'branch' => 1,\n                        'binary' => array(\n                                'level' => 2,\n                                'description' => __('The location of the GnuPG executable. If you would like to use a different GnuPG executable than /usr/bin/gpg, you can set it here. If the default is fine, just keep the setting suggested by MISP.'),\n                                'value' => '/usr/bin/gpg',\n                                'errorMessage' => '',\n                                'test' => 'testForGPGBinary',\n                                'type' => 'string',\n                                'cli_only' => 1\n                        ),\n                        'onlyencrypted' => array(\n                                'level' => 0,\n                                'description' => __('Allow (false) unencrypted e-mails to be sent to users that don\\'t have a GnuPG key.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'bodyonlyencrypted' => array(\n                                'level' => 2,\n                                'description' => __('Allow (false) the body of unencrypted e-mails to contain details about the event.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'sign' => array(\n                                'level' => 2,\n                                'description' => __('Enable the signing of GnuPG emails. By default, GnuPG emails are signed'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 0,\n                                'description' => __('The e-mail address that the instance\\'s GnuPG key is tied to.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 1,\n                                'description' => __('The password (if it is set) of the GnuPG key of the instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'redacted' => true\n                        ),\n                        'homedir' => array(\n                                'level' => 0,\n                                'description' => __('The location of the GnuPG homedir.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        )\n                ),\n                'SMIME' => array(\n                        'branch' => 1,\n                        'enabled' => array(\n                                'level' => 2,\n                                'description' => __('Enable SMIME encryption. The encryption posture of the GnuPG.onlyencrypted and GnuPG.bodyonlyencrypted settings are inherited if SMIME is enabled.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                        ),\n                        'email' => array(\n                                'level' => 2,\n                                'description' => __('The e-mail address that the instance\\'s SMIME key is tied to.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'cert_public_sign' => array(\n                                'level' => 2,\n                                'description' => __('The location of the public half of the signing certificate.'),\n                                'value' => '/var/www/MISP/.smime/email@address.com.pem',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'key_sign' => array(\n                                'level' => 2,\n                                'description' => __('The location of the private half of the signing certificate.'),\n                                'value' => '/var/www/MISP/.smime/email@address.com.key',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 2,\n                                'description' => __('The password (if it is set) of the SMIME key of the instance.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'redacted' => true\n                        ),\n                ),\n                'Proxy' => array(\n                        'branch' => 1,\n                        'host' => array(\n                                'level' => 2,\n                                'description' => __('The hostname of an HTTP proxy for outgoing sync requests. Leave empty to not use a proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'port' => array(\n                                'level' => 2,\n                                'description' => __('The TCP port for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'numeric',\n                        ),\n                        'method' => array(\n                                'level' => 2,\n                                'description' => __('The authentication method for the HTTP proxy. Currently supported are Basic or Digest. Leave empty for no proxy authentication.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'user' => array(\n                                'level' => 2,\n                                'description' => __('The authentication username for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'password' => array(\n                                'level' => 2,\n                                'description' => __('The authentication password for the HTTP proxy.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                ),\n                'Security' => array(\n                        'branch' => 1,\n                        'disable_form_security' => array(\n                            'level' => 0,\n                            'description' => __('Disabling this setting will remove all form tampering protection. Do not set this setting pretty much ever. You were warned.'),\n                            'value' => false,\n                            'errorMessage' => 'This setting leaves your users open to CSRF attacks. Do not please consider disabling this setting.',\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'salt' => array(\n                                'level' => 0,\n                                'description' => __('The salt used for the hashed passwords. You cannot reset this from the GUI, only manually from the settings.php file. Keep in mind, this will invalidate all passwords in the database.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testSalt',\n                                'type' => 'string',\n                                'editable' => false,\n                                'redacted' => true\n                        ),\n                        'syslog' => array(\n                            'level' => 0,\n                            'description' => __('Enable this setting to pass all audit log entries directly to syslog. Keep in mind, this is verbose and will include user, organisation, event data.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'password_policy_length' => array(\n                                'level' => 2,\n                                'description' => __('Password length requirement. If it is not set or it is set to 0, then the default value is assumed (12).'),\n                                'value' => '12',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordLength',\n                                'type' => 'numeric',\n                        ),\n                        'password_policy_complexity' => array(\n                                'level' => 2,\n                                'description' => __('Password complexity requirement. Leave it empty for the default setting (3 out of 4, with either a digit or a special char) or enter your own regex. Keep in mind that the length is checked in another key. Default (simple 3 out of 4 or minimum 16 characters): /^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/'),\n                                'value' => '/^((?=.*\\d)|(?=.*\\W+))(?![\\n])(?=.*[A-Z])(?=.*[a-z]).*$|.{16,}/',\n                                'errorMessage' => '',\n                                'test' => 'testPasswordRegex',\n                                'type' => 'string',\n                        ),\n                        'require_password_confirmation' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will require users to submit their current password on any edits to their profile (including a triggered password change). For administrators, the confirmation will be required when changing the profile of any user. Could potentially mitigate an attacker trying to change a compromised user\\'s password in order to establish persistance, however, enabling this feature will be highly annoying to users.'),\n                            'value' => true,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'sanitise_attribute_on_delete' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will sanitise the contents of an attribute on a soft delete'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'hide_organisation_index_from_users' => array(\n                            'level' => 1,\n                            'description' => __('Enabling this setting will block the organisation index from being visible to anyone besides site administrators on the current instance. Keep in mind that users can still see organisations that produce data via events, proposals, event history log entries, etc.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'disable_local_feed_access' => array(\n                                'level' => 0,\n                                'description' => __('Disabling this setting will allow the creation/modification of local feeds (as opposed to network feeds). Enabling this setting will restrict feed sources to be network based only. When disabled, keep in mind that a malicious site administrator could get access to any arbitrary file on the system that the apache user has access to. Make sure that proper safe-guards are in place. This setting can only be modified via the CLI.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true,\n                                'cli_only' => 1\n                        ),\n                        'allow_unsafe_apikey_named_param' => array(\n                            'level' => 0,\n                            'description' => __('Allows passing the API key via the named url parameter \"apikey\" - highly recommended not to enable this, but if you have some dodgy legacy tools that cannot pass the authorization header it can work as a workaround. Again, only use this as a last resort.'),\n                            'value' => false,\n                            'errorMessage' => __('You have enabled the passing of API keys via URL parameters. This is highly recommended against, do you really want to reveal APIkeys in your logs?...'),\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'allow_cors' => array(\n                            'level' => 1,\n                            'description' => __('Allow cross-origin requests to this instance, matching origins given in Security.cors_origins. Set to false to totally disable'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'cors_origins' => array(\n                            'level' => 1,\n                            'description' => __('Set the origins from which MISP will allow cross-origin requests. Useful for external integration. Comma seperate if you need more than one.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'null' => true\n                        ),\n                        'sync_audit' => array(\n                            'level' => 1,\n                            'description' => __('Enable this setting to create verbose logs of synced event data for debugging reasons. Logs are saved in your MISP directory\\'s app/files/scripts/tmp/ directory.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBoolFalse',\n                            'type' => 'boolean',\n                            'null' => true\n                        ),\n                        'user_monitoring_enabled' => array(\n                            'level' => 1,\n                            'description' => __('Enables the functionality to monitor users - thereby enabling all logging functionalities for a single user. This functionality is intrusive and potentially heavy on the system - use it with care.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'null' => true\n                        )\n                ),\n                'SecureAuth' => array(\n                        'branch' => 1,\n                        'amount' => array(\n                                'level' => 0,\n                                'description' => __('The number of tries a user can try to login and fail before the bruteforce protection kicks in.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string',\n                        ),\n                        'expire' => array(\n                                'level' => 0,\n                                'description' => __('The duration (in seconds) of how long the user will be locked out when the allowed number of login attempts are exhausted.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string',\n                        ),\n                ),\n                'Session' => array(\n                        'branch' => 1,\n                        'autoRegenerate' => array(\n                                'level' => 0,\n                                'description' => __('Set to true to automatically regenerate sessions after x number of requests. This might lead to the user getting de-authenticated and is frustrating in general, so only enable it if you really need to regenerate sessions. (Not recommended)'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                        ),\n                        'checkAgent' => array(\n                                'level' => 0,\n                                'description' => __('Set to true to check for the user agent string in each request. This can lead to occasional logouts (not recommended).'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBoolFalse',\n                                'type' => 'boolean',\n                        ),\n                        'defaults' => array(\n                                'level' => 0,\n                                'description' => __('The session type used by MISP. The default setting is php, which will use the session settings configured in php.ini for the session data (supported options: php, database). The recommended option is php and setting your PHP up to use redis sessions via your php.ini. Just add \\'session.save_handler = redis\\' and \"session.save_path = \\'tcp://localhost:6379\\'\" (replace the latter with your redis connection) to '),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForSessionDefaults',\n                                'type' => 'string',\n                                'options' => array('php' => 'php', 'database' => 'database', 'cake' => 'cake', 'cache' => 'cache'),\n                        ),\n                        'timeout' => array(\n                                'level' => 0,\n                                'description' => __('The timeout duration of sessions (in MINUTES). 0 does not mean infinite for the PHP session handler, instead sessions will invalidate immediately.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForNumeric',\n                                'type' => 'string'\n                        ),\n                        'cookieTimeout' => array(\n                                'level' => 0,\n                                'description' => __('The expiration of the cookie (in MINUTES). The session timeout gets refreshed frequently, however the cookies do not. Generally it is recommended to have a much higher cookie_timeout than timeout.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForCookieTimeout',\n                                'type' => 'numeric'\n                        )\n                ),\n                'Plugin' => array(\n                        'branch' => 1,\n                        'RPZ_policy' => array(\n                            'level' => 2,\n                            'description' => __('The default policy action for the values added to the RPZ.'),\n                            'value' => 1,\n                            'errorMessage' => '',\n                            'test' => 'testForRPZBehaviour',\n                            'type' => 'numeric',\n                            'options' => array(0 => 'DROP', 1 => 'NXDOMAIN', 2 => 'NODATA', 3 => 'Local-Data', 4 => 'PASSTHRU', 5 => 'TCP-only' ),\n                        ),\n                        'RPZ_walled_garden' => array(\n                            'level' => 2,\n                            'description' => __('The default walled garden used by the RPZ export if the Local-Data policy setting is picked for the export.'),\n                            'value' => '127.0.0.1',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'RPZ_serial' => array(\n                                'level' => 2,\n                                'description' => __('The serial in the SOA portion of the zone file. (numeric, best practice is yyyymmddrr where rr is the two digit sub-revision of the file. $date will automatically get converted to the current yyyymmdd, so $date00 is a valid setting). Setting it to $time will give you an unixtime-based serial (good then you need more than 99 revisions per day).'),\n                                'value' => '$date00',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZSerial',\n                                'type' => 'string',\n                        ),\n                        'RPZ_refresh' => array(\n                                'level' => 2,\n                                'description' => __('The refresh specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '2h',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_retry' => array(\n                                'level' => 2,\n                                'description' => __('The retry specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '30m',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_expiry' => array(\n                                'level' => 2,\n                                'description' => __('The expiry specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '30d',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_minimum_ttl' => array(\n                                'level' => 2,\n                                'description' => __('The minimum TTL specified in the SOA portion of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '1h',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ttl' => array(\n                                'level' => 2,\n                                'description' => __('The TTL of the zone file. (in seconds, or shorthand duration such as 15m)'),\n                                'value' => '1w',\n                                'errorMessage' => '',\n                                'test' => 'testForRPZDuration',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ns' => array(\n                                'level' => 2,\n                                'description' => __('Nameserver'),\n                                'value' => 'localhost.',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                        ),\n                        'RPZ_ns_alt' => array(\n                            'level' => 2,\n                            'description' => __('Alternate nameserver'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                    ),\n                        'RPZ_email' => array(\n                            'level' => 2,\n                            'description' => __('The e-mail address specified in the SOA portion of the zone file.'),\n                            'value' => 'root.localhost',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the Kafka pub feature of MISP. Make sure that you install the requirements for the plugin to work. Refer to the installation instructions for more information.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'Kafka_brokers' => array(\n                            'level' => 2,\n                            'description' => __('A comma separated list of Kafka bootstrap brokers'),\n                            'value' => 'kafka:9092',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_rdkafka_config' => array(\n                            'level' => 2,\n                            'description' => __('A path to an ini file with configuration options to be passed to rdkafka. Section headers in the ini file will be ignored.'),\n                            'value' => '/etc/rdkafka.ini',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                        ),\n                        'Kafka_include_attachments' => array(\n                            'level' => 2,\n                            'description' => __('Enable this setting to include the base64 encoded payloads of malware-samples/attachments in the output.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any event creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing event creations/edits/deletions.'),\n                            'value' => 'misp_event',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_event_publish_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('If enabled it will publish to Kafka the event at the time that the event gets published in MISP. Event actions (creation or edit) will not be published to Kafka.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_event_publish_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing event information on publish.'),\n                            'value' => 'misp_event_publish',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_object_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_object_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing object creations/edits/deletions.'),\n                            'value' => 'misp_object',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_object_reference_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object reference creations/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_object_reference_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing object reference creations/deletions.'),\n                            'value' => 'misp_object_reference',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any attribute creations/edits/soft deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_attribute_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing attribute creations/edits/soft deletions.'),\n                            'value' => 'misp_attribute',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_shadow_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any proposal creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_shadow_attribute_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing proposal creations/edits/deletions.'),\n                            'value' => 'misp_shadow_attribute',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_tag_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_tag_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => 'misp_tag',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_sighting_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new sightings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_sighting_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing sightings.'),\n                            'value' => 'misp_sighting',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_user_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified users.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_user_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing new/modified users.'),\n                            'value' => 'misp_user',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_organisation_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified organisations.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_organisation_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing new/modified organisations.'),\n                            'value' => 'misp_organisation',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Kafka_audit_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of log entries. Keep in mind, this can get pretty verbose depending on your logging settings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Kafka_audit_notifications_topic' => array(\n                            'level' => 2,\n                            'description' => __('Topic for publishing log entries.'),\n                            'value' => 'misp_audit',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'ZeroMQ_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the pub/sub feature of MISP. Make sure that you install the requirements for the plugin to work. Refer to the installation instructions for more information.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_port' => array(\n                            'level' => 2,\n                            'description' => __('The port that the pub/sub feature will use.'),\n                            'value' => 50000,\n                            'errorMessage' => '',\n                            'test' => 'testForZMQPortNumber',\n                            'type' => 'numeric',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_host' => array(\n                            'level' => 2,\n                            'description' => __('Location of the Redis db used by MISP and the Python PUB script to queue data to be published.'),\n                            'value' => 'localhost',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_port' => array(\n                            'level' => 2,\n                            'description' => __('The port that Redis is listening on.'),\n                            'value' => 6379,\n                            'errorMessage' => '',\n                            'test' => 'testForPortNumber',\n                            'type' => 'numeric',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_password' => array(\n                            'level' => 2,\n                            'description' => __('The password, if set for Redis.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_database' => array(\n                            'level' => 2,\n                            'description' => __('The database to be used for queuing messages for the pub/sub functionality.'),\n                            'value' => 1,\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_redis_namespace' => array(\n                            'level' => 2,\n                            'description' => __('The namespace to be used for queuing messages for the pub/sub functionality.'),\n                            'value' => 'mispq',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string',\n                            'afterHook' => 'zmqAfterHook',\n                        ),\n                        'ZeroMQ_include_attachments' => array(\n                            'level' => 2,\n                            'description' => __('Enable this setting to include the base64 encoded payloads of malware-samples/attachments in the output.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_event_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any event creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_object_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object creations/edits/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_object_reference_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any object reference creations/deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_attribute_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any attribute creations/edits/soft deletions.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_tag_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of any tag creations/edits/deletions as well as tags being attached to / detached from various MISP elements.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_sighting_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new sightings to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_user_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified users to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_organisation_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of new/modified organisations to the ZMQ pubsub feed.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ZeroMQ_audit_notifications_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables the publishing of log entries to the ZMQ pubsub feed. Keep in mind, this can get pretty verbose depending on your logging settings.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ElasticSearch_logging_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enabled logging to an ElasticSearch instance'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'ElasticSearch_connection_string' => array(\n                            'level' => 2,\n                            'description' => __('The URL(s) at which to access ElasticSearch - comma separate if you want to have more than one.'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'ElasticSearch_log_index' => array(\n                            'level' => 2,\n                            'description' => __('The index in which to place logs'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_enable' => array(\n                            'level' => 2,\n                            'description' => __('Enables or disables uploading of malware samples to S3 rather than to disk (WARNING: Get permission from amazon first!)'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'S3_bucket_name' => array(\n                            'level' => 2,\n                            'description' => __('Bucket name to upload to'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_region' => array(\n                            'level' => 2,\n                            'description' => __('Region in which your S3 bucket resides'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_aws_access_key' => array(\n                            'level' => 2,\n                            'description' => __('AWS key to use when uploading samples (WARNING: It\\' highly recommended that you use EC2 IAM roles if at all possible)'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'S3_aws_secret_key' => array(\n                            'level' => 2,\n                            'description' => __('AWS secret key to use when uploading samples'),\n                            'value' => '',\n                            'errorMessage' => '',\n                            'test' => 'testForEmpty',\n                            'type' => 'string'\n                        ),\n                        'Sightings_policy' => array(\n                            'level' => 1,\n                            'description' => __('This setting defines who will have access to seeing the reported sightings. The default setting is the event owner alone (in addition to everyone seeing their own contribution) with the other options being Sighting reporters (meaning the event owner and anyone that provided sighting data about the event) and Everyone (meaning anyone that has access to seeing the event / attribute).'),\n                            'value' => 0,\n                            'errorMessage' => '',\n                            'test' => 'testForSightingVisibility',\n                            'type' => 'numeric',\n                            'options' => array(0 => 'Event Owner', 1 => 'Sighting reporters', 2 => 'Everyone'),\n                        ),\n                        'Sightings_anonymise' => array(\n                            'level' => 1,\n                            'description' => __('Enabling the anonymisation of sightings will simply aggregate all sightings instead of showing the organisations that have reported a sighting. Users will be able to tell the number of sightings their organisation has submitted and the number of sightings for other organisations'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean',\n                        ),\n                        'Sightings_range' => array(\n                            'level' => 1,\n                            'description' => __('Set the range in which sightings will be taken into account when generating graphs. For example a sighting with a sighted_date of 7 years ago might not be relevant anymore. Setting given in number of days, default is 365 days'),\n                            'value' => 365,\n                            'errorMessage' => '',\n                            'test' => 'testForNumeric',\n                            'type' => 'numeric'\n                        ),\n                        'Sightings_sighting_db_enable' => array(\n                            'level' => 1,\n                            'description' => __('Enable SightingDB integration.'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'CustomAuth_enable' => array(\n                                'level' => 2,\n                                'description' => __('Enable this functionality if you would like to handle the authentication via an external tool and authenticate with MISP using a custom header.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true,\n                                'beforeHook' => 'customAuthBeforeHook'\n                        ),\n                        'CustomAuth_header' => array(\n                                'level' => 2,\n                                'description' => __('Set the header that MISP should look for here. If left empty it will default to the Authorization header.'),\n                                'value' => 'Authorization',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_use_header_namespace' => array(\n                                'level' => 2,\n                                'description' => __('Use a header namespace for the auth header - default setting is enabled'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'CustomAuth_header_namespace' => array(\n                                'level' => 2,\n                                'description' => __('The default header namespace for the auth header - default setting is HTTP_'),\n                                'value' => 'HTTP_',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_required' => array(\n                                'level' => 2,\n                                'description' => __('If this setting is enabled then the only way to authenticate will be using the custom header. Altnertatively you can run in mixed mode that will log users in via the header if found, otherwise users will be redirected to the normal login page.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'CustomAuth_only_allow_source' => array(\n                                'level' => 2,\n                                'description' => __('If you are using an external tool to authenticate with MISP and would like to only allow the tool\\'s url as a valid point of entry then set this field. '),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_name' => array(\n                                'level' => 2,\n                                'description' => __('The name of the authentication method, this is cosmetic only and will be shown on the user creation page and logs.'),\n                                'value' => 'External authentication',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_disable_logout' => array(\n                                'level' => 2,\n                                'description' => __('Disable the logout button for users authenticate with the external auth mechanism.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Enrichment_services_enable' => array(\n                            'level' => 0,\n                            'description' => __('Enable/disable the enrichment services'),\n                            'value' => false,\n                            'errorMessage' => '',\n                            'test' => 'testBool',\n                            'type' => 'boolean'\n                        ),\n                        'Enrichment_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the enrichment services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Import_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the import services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Import_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the import services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Import_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the import services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Import_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the import services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => '6666',\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Export_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the export services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Export_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the export services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => '6666',\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Export_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the export services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Export_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the export services'),\n                                'value' => 10,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Enrichment_hover_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the hover over information retrieved from the enrichment modules'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Enrichment_hover_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the hover services'),\n                                'value' => 5,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Enrichment_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access the enrichment services. By default, it is accessible at http://127.0.0.1:6666'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Enrichment_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access the enrichment services. By default, it is accessible at 127.0.0.1:6666'),\n                                'value' => 6666,\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_services_url' => array(\n                                'level' => 1,\n                                'description' => __('The url used to access Cortex. By default, it is accessible at http://cortex-url'),\n                                'value' => 'http://127.0.0.1',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string'\n                        ),\n                        'Cortex_services_port' => array(\n                                'level' => 1,\n                                'description' => __('The port used to access Cortex. By default, this is port 9000'),\n                                'value' => 9000,\n                                'errorMessage' => '',\n                                'test' => 'testForPortNumber',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_services_enable' => array(\n                                'level' => 0,\n                                'description' => __('Enable/disable the Cortex services'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean'\n                        ),\n                        'Cortex_authkey' => array(\n                                'level' => 1,\n                                'description' => __('Set an authentication key to be passed to Cortex'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'Cortex_timeout' => array(\n                                'level' => 1,\n                                'description' => __('Set a timeout for the Cortex services'),\n                                'value' => 120,\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'numeric'\n                        ),\n                        'Cortex_ssl_verify_peer' => array(\n                                'level' => 1,\n                                'description' => __('Set to false to disable SSL verification. This is not recommended.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_verify_host' => array(\n                                'level' => 1,\n                                'description' => __('Set to false if you wish to ignore hostname match errors when validating certificates.'),\n                                'value' => true,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_allow_self_signed' => array(\n                                'level' => 1,\n                                'description' => __('Set to true to enable self-signed certificates to be accepted. This requires Cortex_ssl_verify_peer to be enabled.'),\n                                'value' => false,\n                                'errorMessage' => '',\n                                'test' => 'testBool',\n                                'type' => 'boolean',\n                                'null' => true\n                        ),\n                        'Cortex_ssl_cafile' => array(\n                                'level' => 1,\n                                'description' => __('Set to the absolute path of the Certificate Authority file that you wish to use for verifying SSL certificates.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_custom_password_reset' => array(\n                                'level' => 2,\n                                'description' => __('Provide your custom authentication users with an external URL to the authentication system to reset their passwords.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        ),\n                        'CustomAuth_custom_logout' => array(\n                                'level' => 2,\n                                'description' => __('Provide a custom logout URL for your users that will log them out using the authentication system you use.'),\n                                'value' => '',\n                                'errorMessage' => '',\n                                'test' => 'testForEmpty',\n                                'type' => 'string',\n                                'null' => true\n                        )\n                ),\n                'debug' => array(\n                        'level' => 0,\n                        'description' => __('The debug level of the instance, always use 0 for production instances.'),\n                        'value' => '',\n                        'errorMessage' => '',\n                        'test' => 'testDebug',\n                        'type' => 'numeric',\n                        'options' => array(0 => 'Debug off', 1 => 'Debug on', 2 => 'Debug + SQL dump'),\n                ),\n                'site_admin_debug' => array(\n                        'level' => 0,\n                        'description' => __('The debug level of the instance for site admins. This feature allows site admins to run debug mode on a live instance without exposing it to other users. The most verbose option of debug and site_admin_debug is used for site admins.'),\n                        'value' => '',\n                        'errorMessage' => '',\n                        'test' => 'testDebugAdmin',\n                        'type' => 'boolean',\n                        'null' => true\n                ),\n        );\n    }\n\n    private $__settingTabMergeRules = array(\n            'GnuPG' => 'Encryption',\n            'SMIME' => 'Encryption',\n            'misc' => 'Security',\n            'Security' => 'Security',\n            'Session' => 'Security'\n    );\n\n\n    public $validEventIndexFilters = array('searchall', 'searchpublished', 'searchorg', 'searchtag', 'searcheventid', 'searchdate', 'searcheventinfo', 'searchthreatlevel', 'searchdistribution', 'searchanalysis', 'searchattribute');\n\n    public function isOwnedByOrg($serverid, $org)\n    {\n        return $this->field('id', array('id' => $serverid, 'org' => $org)) === $serverid;\n    }\n\n    public function beforeSave($options = array())\n    {\n        $this->data['Server']['url'] = rtrim($this->data['Server']['url'], '/');\n        if (empty($this->data['Server']['id'])) {\n            $max_prio = $this->find('first', array(\n                'recursive' => -1,\n                'order' => array('Server.priority' => 'DESC'),\n                'fields' => array('Server.priority')\n            ));\n            if (empty($max_prio)) {\n                $max_prio = 0;\n            } else {\n                $max_prio = $max_prio['Server']['priority'];\n            }\n            $this->data['Server']['priority'] = $max_prio + 1;\n        }\n        return true;\n    }\n\n    private function __getEventIdListBasedOnPullTechnique($technique, $server)\n    {\n        if (\"full\" === $technique) {\n            // get a list of the event_ids on the server\n            $eventIds = $this->getEventIdsFromServer($server);\n            if ($eventIds === 403) {\n                return array('error' => array(1, null));\n            } elseif (is_string($eventIds)) {\n                return array('error' => array(2, $eventIds));\n            }\n\n            // reverse array of events, to first get the old ones, and then the new ones\n            if (!empty($eventIds)) {\n                $eventIds = array_reverse($eventIds);\n            }\n        } elseif (\"update\" === $technique) {\n            $eventIds = $this->getEventIdsFromServer($server, false, null, true, true);\n            if ($eventIds === 403) {\n                return array('error' => array(1, null));\n            } elseif (is_string($eventIds)) {\n                return array('error' => array(2, $eventIds));\n            }\n            $eventModel = ClassRegistry::init('Event');\n            $local_event_ids = $eventModel->find('list', array(\n                    'fields' => array('uuid'),\n                    'recursive' => -1,\n            ));\n            $eventIds = array_intersect($eventIds, $local_event_ids);\n        } elseif (is_numeric($technique)) {\n            $eventIds[] = intval($technique);\n        } else {\n            return array('error' => array(4, null));\n        }\n        return $eventIds;\n    }\n\n    private function __checkIfEventIsBlockedBeforePull($event)\n    {\n        if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n            $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n            $r = $this->EventBlacklist->find('first', array('conditions' => array('event_uuid' => $event['Event']['uuid'])));\n            if (!empty($r)) {\n                return true;\n            }\n        }\n        return false;\n    }\n\n    private function __updatePulledEventBeforeInsert(&$event, $server, $user)\n    {\n        // we have an Event array\n        // The event came from a pull, so it should be locked.\n        $event['Event']['locked'] = true;\n        if (!isset($event['Event']['distribution'])) { // version 1\n            $event['Event']['distribution'] = '1';\n        }\n        // Distribution\n        if (empty(Configure::read('MISP.host_org_id')) || !$server['Server']['internal'] ||  Configure::read('MISP.host_org_id') != $server['Server']['org_id']) {\n            switch ($event['Event']['distribution']) {\n                case 1:\n                    // if community only, downgrade to org only after pull\n                    $event['Event']['distribution'] = '0';\n                    break;\n                case 2:\n                    // if connected communities downgrade to community only\n                    $event['Event']['distribution'] = '1';\n                    break;\n            }\n            if (isset($event['Event']['Attribute']) && !empty($event['Event']['Attribute'])) {\n                foreach ($event['Event']['Attribute'] as $key => $a) {\n                    switch ($a['distribution']) {\n                        case '1':\n                            $event['Event']['Attribute'][$key]['distribution'] = '0';\n                            break;\n                        case '2':\n                            $event['Event']['Attribute'][$key]['distribution'] = '1';\n                            break;\n                    }\n                }\n            }\n        }\n        // Distribution, set reporter of the event, being the admin that initiated the pull\n        $event['Event']['user_id'] = $user['id'];\n        return $event;\n    }\n\n    private function __checkIfEventSaveAble($event) {\n        if (!empty($event['Event']['Attribute'])) {\n            foreach ($event['Event']['Attribute'] as $attribute) {\n                if (empty($attribute['deleted'])) {\n                    return true;\n                }\n            }\n        }\n        if (!empty($event['Event']['Object'])) {\n            foreach ($event['Event']['Object'] as $object) {\n                if (!empty($object['deleted'])) {\n                    continue;\n                }\n                if (!empty($object['Attribute'])) {\n                    foreach ($object['Attribute'] as $attribute) {\n                        if (empty($attribute['deleted'])) {\n                            return true;\n                        }\n                    }\n                }\n            }\n        }\n        return false;\n    }\n\n    private function __checkIfPulledEventExistsAndAddOrUpdate($event, $eventId, &$successes, &$fails, $eventModel, $server, $user, $jobId)\n    {\n        // check if the event already exist (using the uuid)\n        $existingEvent = $eventModel->find('first', array('conditions' => array('Event.uuid' => $event['Event']['uuid'])));\n        $passAlong = $server['Server']['id'];\n        if (!$existingEvent) {\n            // add data for newly imported events\n            $result = $eventModel->_add($event, true, $user, $server['Server']['org_id'], $passAlong, true, $jobId);\n            if ($result) {\n                $successes[] = $eventId;\n            } else {\n                $fails[$eventId] = __('Failed (partially?) because of validation errors: ') . json_encode($eventModel->validationErrors, true);\n            }\n        } else {\n            if (!$existingEvent['Event']['locked'] && !$server['Server']['internal']) {\n                $fails[$eventId] = __('Blocked an edit to an event that was created locally. This can happen if a synchronised event that was created on this instance was modified by an administrator on the remote side.');\n            } else {\n                $result = $eventModel->_edit($event, $user, $existingEvent['Event']['id'], $jobId, $passAlong);\n                if ($result === true) {\n                    $successes[] = $eventId;\n                } elseif (isset($result['error'])) {\n                    $fails[$eventId] = $result['error'];\n                } else {\n                    $fails[$eventId] = json_encode($result);\n                }\n            }\n        }\n    }\n\n    private function __pullEvent($eventId, &$successes, &$fails, $eventModel, $server, $user, $jobId)\n    {\n        $event = $eventModel->downloadEventFromServer(\n                $eventId,\n                $server\n        );\n        ;\n        if (!empty($event)) {\n            if ($this->__checkIfEventIsBlockedBeforePull($event)) {\n                return false;\n            }\n            $event = $this->__updatePulledEventBeforeInsert($event, $server, $user);\n            if (!$this->__checkIfEventSaveAble($event)) {\n                $fails[$eventId] = __('Empty event detected.');\n            } else {\n                $this->__checkIfPulledEventExistsAndAddOrUpdate($event, $eventId, $successes, $fails, $eventModel, $server, $user, $jobId);\n            }\n        } else {\n            // error\n            $fails[$eventId] = __('failed downloading the event');\n        }\n        return true;\n    }\n\n    private function __handlePulledProposals($proposals, $events, $job, $jobId, $eventModel, $user)\n    {\n        $pulledProposals = array();\n        if (!empty($proposals)) {\n            $shadowAttribute = ClassRegistry::init('ShadowAttribute');\n            $shadowAttribute->recursive = -1;\n            $uuidEvents = array_flip($events);\n            foreach ($proposals as $k => &$proposal) {\n                $proposal = $proposal['ShadowAttribute'];\n                $oldsa = $shadowAttribute->findOldProposal($proposal);\n                $proposal['event_id'] = $uuidEvents[$proposal['event_uuid']];\n                if (!$oldsa || $oldsa['timestamp'] < $proposal['timestamp']) {\n                    if ($oldsa) {\n                        $shadowAttribute->delete($oldsa['id']);\n                    }\n                    if (!isset($pulledProposals[$proposal['event_id']])) {\n                        $pulledProposals[$proposal['event_id']] = 0;\n                    }\n                    $pulledProposals[$proposal['event_id']]++;\n                    if (isset($proposal['old_id'])) {\n                        $oldAttribute = $eventModel->Attribute->find('first', array('recursive' => -1, 'conditions' => array('uuid' => $proposal['uuid'])));\n                        if ($oldAttribute) {\n                            $proposal['old_id'] = $oldAttribute['Attribute']['id'];\n                        } else {\n                            $proposal['old_id'] = 0;\n                        }\n                    }\n                    // check if this is a proposal from an old MISP instance\n                    if (!isset($proposal['Org']) && isset($proposal['org']) && !empty($proposal['org'])) {\n                        $proposal['Org'] = $proposal['org'];\n                        $proposal['EventOrg'] = $proposal['event_org'];\n                    } elseif (!isset($proposal['Org']) && !isset($proposal['EventOrg'])) {\n                        continue;\n                    }\n                    $proposal['org_id'] = $this->Organisation->captureOrg($proposal['Org'], $user);\n                    $proposal['event_org_id'] = $this->Organisation->captureOrg($proposal['EventOrg'], $user);\n                    unset($proposal['Org']);\n                    unset($proposal['EventOrg']);\n                    $shadowAttribute->create();\n                    if (!isset($proposal['deleted']) || !$proposal['deleted']) {\n                        if ($shadowAttribute->save($proposal)) {\n                            $shadowAttribute->sendProposalAlertEmail($proposal['event_id']);\n                        }\n                    }\n                }\n                if ($jobId) {\n                    if ($k % 50 == 0) {\n                        $job->id =  $jobId;\n                        $job->saveField('progress', 50 * (($k + 1) / count($proposals)) + 50);\n                    }\n                }\n            }\n        }\n        return $pulledProposals;\n    }\n\n    public function pull($user, $id = null, $technique=false, $server, $jobId = false)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->read(null, $jobId);\n            $email = \"Scheduled job\";\n        } else {\n            $job = false;\n            $email = $user['email'];\n        }\n        $eventModel = ClassRegistry::init('Event');\n        $eventIds = array();\n        // if we are downloading a single event, don't fetch all proposals\n        $conditions = is_numeric($technique) ? array('Event.id' => $technique) : array();\n        $eventIds = $this->__getEventIdListBasedOnPullTechnique($technique, $server);\n        $server['Server']['version'] = $this->getRemoteVersion($id);\n        if (!empty($eventIds['error'])) {\n            $errors = array(\n                '1' => __('Not authorised. This is either due to an invalid auth key, or due to the sync user not having authentication permissions enabled on the remote server. Another reason could be an incorrect sync server setting.'),\n                '2' => $eventIds['error'][1],\n                '3' => __('Sorry, this is not yet implemented'),\n                '4' => __('Something went wrong while trying to pull')\n            );\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Server',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'error',\n                'user_id' => $user['id'],\n                'title' => 'Failed pull from ' . $server['Server']['url'] . ' initiated by ' . $email,\n                'change' => !empty($errors[$eventIds['error'][0]]) ? $errors[$eventIds['error'][0]] : __('Unknown issue.')\n            ));\n            return !empty($errors[$eventIds['error'][0]]) ? $errors[$eventIds['error'][0]] : __('Unknown issue.');\n        }\n        $successes = array();\n        $fails = array();\n        // now process the $eventIds to pull each of the events sequentially\n        if (!empty($eventIds)) {\n            // download each event\n            foreach ($eventIds as $k => $eventId) {\n                $this->__pullEvent($eventId, $successes, $fails, $eventModel, $server, $user, $jobId);\n                if ($jobId) {\n                    if ($k % 10 == 0) {\n                        $job->saveField('progress', 50 * (($k + 1) / count($eventIds)));\n                    }\n                }\n            }\n        }\n        if (!empty($fails)) {\n            $this->Log = ClassRegistry::init('Log');\n            foreach ($fails as $eventid => $message) {\n                $this->Log->create();\n                $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'pull',\n                    'user_id' => $user['id'],\n                    'title' => 'Failed to pull event #' . $eventid . '.',\n                    'change' => 'Reason:' . $message\n                ));\n            }\n        }\n        if ($jobId) {\n            $job->saveField('progress', 50);\n            $job->saveField('message', 'Pulling proposals.');\n        }\n        $pulledProposals = $eventModel->ShadowAttribute->pullProposals($user, $server);\n        if ($jobId) {\n            $job->saveField('progress', 75);\n            $job->saveField('message', 'Pulling sightings.');\n        }\n        $pulledSightings = $eventModel->Sighting->pullSightings($user, $server);\n        if ($jobId) {\n            $job->saveField('progress', 100);\n            $job->saveField('message', 'Pull completed.');\n            $job->saveField('status', 4);\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n            'org' => $user['Organisation']['name'],\n            'model' => 'Server',\n            'model_id' => $id,\n            'email' => $user['email'],\n            'action' => 'pull',\n            'user_id' => $user['id'],\n            'title' => 'Pull from ' . $server['Server']['url'] . ' initiated by ' . $email,\n            'change' => sprintf(\n                '%s events, %s proposals and %s sightings pulled or updated. %s events failed or didn\\'t need an update.',\n                count($successes),\n                $pulledProposals,\n                $pulledSightings,\n                count($fails)\n            )\n        ));\n        return array($successes, $fails, $pulledProposals, $pulledSightings);\n    }\n\n    public function filterRuleToParameter($filter_rules)\n    {\n        $final = array();\n        if (empty($filter_rules)) {\n            return $final;\n        }\n        $filter_rules = json_decode($filter_rules, true);\n        $url_params = array();\n        foreach ($filter_rules as $field => $rules) {\n            $temp = array();\n            if ($field === 'url_params') {\n                $url_params = json_decode($rules, true);\n            } else {\n                foreach ($rules as $operator => $elements) {\n                    foreach ($elements as $k => $element) {\n                        if ($operator === 'NOT') {\n                            $element = '!' . $element;\n                        }\n                        if (!empty($element)) {\n                            $temp[] = $element;\n                        }\n                    }\n                }\n                if (!empty($temp)) {\n                    $final[substr($field, 0, strlen($field) -1)] = $temp;\n                }\n            }\n        }\n        if (!empty($url_params)) {\n            $final = array_merge_recursive($final, $url_params);\n        }\n        return $final;\n    }\n\n    private function __orgRuleDowngrade($HttpSocket, $request, $server, $filter_rules)\n    {\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $version_response = $HttpSocket->get($uri, false, $request);\n            $body = $version_response->body;\n            $version_response = json_decode($body, true);\n            $version = $version_response['version'];\n        } catch (Exception $e) {\n            return $e->getMessage();\n        }\n        $version = explode('.', $version);\n        if ($version[0] <= 2 && $version[1] <= 4 && $version[0] <= 123) {\n            $filter_rules['org'] = implode('|', $filter_rules['org']);\n        }\n        return $filter_rules;\n    }\n\n    // Get an array of event_ids that are present on the remote server\n    public function getEventIdsFromServer($server, $all = false, $HttpSocket=null, $force_uuid=false, $ignoreFilterRules = false, $scope = 'events')\n    {\n        $url = $server['Server']['url'];\n        if ($ignoreFilterRules) {\n            $filter_rules = array();\n        } else {\n            $filter_rules = $this->filterRuleToParameter($server['Server']['pull_rules']);\n        }\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        if (!empty($filter_rules['org'])) {\n            $filter_rules = $this->__orgRuleDowngrade($HttpSocket, $request, $server, $filter_rules);\n        }\n        $uri = $url . '/events/index';\n        $filter_rules['minimal'] = 1;\n        $filter_rules['published'] = 1;\n        try {\n            $response = $HttpSocket->post($uri, json_encode($filter_rules), $request);\n            if ($response->isOk()) {\n                $eventArray = json_decode($response->body, true);\n                // correct $eventArray if just one event\n                if (is_array($eventArray) && isset($eventArray['id'])) {\n                    $tmp = $eventArray;\n                    unset($eventArray);\n                    $eventArray[0] = $tmp;\n                    unset($tmp);\n                }\n                $eventIds = array();\n                if ($all) {\n                    if (!empty($eventArray)) {\n                        if ($scope === 'sightings') {\n                            foreach ($eventArray as $event) {\n                                $localEvent = $this->Event->find('first', array(\n                                        'recursive' => -1,\n                                        'fields' => array('Event.uuid', 'Event.sighting_timestamp'),\n                                        'conditions' => array('Event.uuid' => $event['uuid'])\n                                    ));\n                                if (!empty($localEvent) && $localEvent['Event']['sighting_timestamp'] > $event['sighting_timestamp']) {\n                                    $eventIds[] = $event['uuid'];\n                                }\n                            }\n                        } else {\n                            foreach ($eventArray as $event) {\n                                $eventIds[] = $event['uuid'];\n                            }\n                        }\n                    }\n                } else {\n                    // multiple events, iterate over the array\n                    $this->Event = ClassRegistry::init('Event');\n                    $blacklisting = array();\n                    if (Configure::read('MISP.enableEventBlacklisting') !== false) {\n                        $this->EventBlacklist = ClassRegistry::init('EventBlacklist');\n                        $blacklisting['EventBlacklist'] = array(\n                            'index_field' => 'uuid',\n                            'blacklist_field' => 'event_uuid'\n                        );\n                    }\n                    if (Configure::read('MISP.enableOrgBlacklisting') !== false) {\n                        $this->OrgBlacklist = ClassRegistry::init('OrgBlacklist');\n                        $blacklisting['OrgBlacklist'] = array(\n                            'index_field' => 'orgc_uuid',\n                            'blacklist_field' => 'org_uuid'\n                        );\n                    }\n                    foreach ($eventArray as $k => $event) {\n                        if (1 != $event['published']) {\n                            unset($eventArray[$k]); // do not keep non-published events\n                            continue;\n                        }\n                        foreach ($blacklisting as $type => $blacklist) {\n                            if (!empty($eventArray[$k][$blacklist['index_field']])) {\n                                $blacklist_hit = $this->{$type}->find('first', array(\n                                    'conditions' => array($blacklist['blacklist_field'] => $eventArray[$k][$blacklist['index_field']]),\n                                    'recursive' => -1,\n                                    'fields' => array($type . '.id')\n                                ));\n                                if (!empty($blacklist_hit)) {\n                                    unset($eventArray[$k]);\n                                    continue 2;\n                                }\n                            }\n                        }\n                    }\n                    $this->Event->removeOlder($eventArray, $scope);\n                    if (!empty($eventArray)) {\n                        foreach ($eventArray as $event) {\n                            if ($force_uuid) {\n                                $eventIds[] = $event['uuid'];\n                            } else {\n                                $eventIds[] = $event['uuid'];\n                            }\n                        }\n                    }\n                }\n                return $eventIds;\n            }\n            if ($response->code == '403') {\n                return 403;\n            }\n        } catch (SocketException $e) {\n            return $e->getMessage();\n        }\n\n        // error, so return error message, since that is handled and everything is expecting an array\n        return \"Error: got response code \" . $response->code;\n    }\n\n    public function push($id = null, $technique=false, $jobId = false, $HttpSocket, $user)\n    {\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->read(null, $jobId);\n        }\n        $this->Event = ClassRegistry::init('Event');\n        $this->read(null, $id);\n        $url = $this->data['Server']['url'];\n        $push = $this->checkVersionCompatibility($id, $user);\n        if (is_array($push) && !$push['canPush'] && !$push['canSight']) {\n            $push = 'Remote instance is outdated or no permission to push.';\n        }\n        if (!is_array($push)) {\n            $message = sprintf('Push to server %s failed. Reason: %s', $id, $push);\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => 'Failed: Push to ' . $url . ' initiated by ' . $user['email'],\n                    'change' => $message\n            ));\n            if ($jobId) {\n                $job->id = $jobId;\n                $job->saveField('progress', 100);\n                $job->saveField('message', $message);\n                $job->saveField('status', 4);\n            }\n            return $push;\n        }\n\n        // sync events if user is capable\n        if ($push['canPush']) {\n            if (\"full\" == $technique) {\n                $eventid_conditions_key = 'Event.id >';\n                $eventid_conditions_value = 0;\n            } elseif (\"incremental\" == $technique) {\n                $eventid_conditions_key = 'Event.id >';\n                $eventid_conditions_value = $this->data['Server']['lastpushedid'];\n            } elseif (intval($technique) !== 0) {\n                $eventid_conditions_key = 'Event.id';\n                $eventid_conditions_value = intval($technique);\n            } else {\n                throw new InvalidArgumentException(\"Technique parameter must be 'full', 'incremental' or event ID.\");\n            }\n            $sgs = $this->Event->SharingGroup->find('all', array(\n                'recursive' => -1,\n                'contain' => array('Organisation', 'SharingGroupOrg' => array('Organisation'), 'SharingGroupServer')\n            ));\n            $sgIds = array();\n            foreach ($sgs as $k => $sg) {\n                if ($this->Event->SharingGroup->checkIfServerInSG($sg, $this->data)) {\n                    $sgIds[] = $sg['SharingGroup']['id'];\n                }\n            }\n            if (empty($sgIds)) {\n                $sgIds = array(-1);\n            }\n            $findParams = array(\n                    'conditions' => array(\n                            $eventid_conditions_key => $eventid_conditions_value,\n                            'Event.published' => 1,\n                            'Event.attribute_count >' => 0,\n                            'OR' => array(\n                                array(\n                                    'AND' => array(\n                                        array('Event.distribution >' => 0),\n                                        array('Event.distribution <' => 4),\n                                    ),\n                                ),\n                                array(\n                                    'AND' => array(\n                                        'Event.distribution' => 4,\n                                        'Event.sharing_group_id' => $sgIds\n                                    ),\n                                )\n                            )\n                    ), // array of conditions\n                    'recursive' => -1, //int\n                    'contain' => array('EventTag' => array('fields' => array('EventTag.tag_id'))),\n                    'fields' => array('Event.id', 'Event.timestamp', 'Event.sighting_timestamp', 'Event.uuid', 'Event.orgc_id'), // array of field names\n            );\n            $eventIds = $this->Event->find('all', $findParams);\n            $eventUUIDsFiltered = $this->getEventIdsForPush($id, $HttpSocket, $eventIds, $user);\n            if ($eventUUIDsFiltered === false || empty($eventUUIDsFiltered)) {\n                $pushFailed = true;\n            }\n            if (!empty($eventUUIDsFiltered)) {\n                $eventCount = count($eventUUIDsFiltered);\n                // now process the $eventIds to push each of the events sequentially\n                if (!empty($eventUUIDsFiltered)) {\n                    $successes = array();\n                    $fails = array();\n                    $lowestfailedid = null;\n                    foreach ($eventUUIDsFiltered as $k => $eventUuid) {\n                        $params = array();\n                        if (!empty($this->data['Server']['push_rules'])) {\n                            $push_rules = json_decode($this->data['Server']['push_rules'], true);\n                            if (!empty($push_rules['tags']['NOT'])) {\n                                $params['blockedAttributeTags'] = $push_rules['tags']['NOT'];\n                            }\n                        }\n                        $params = array_merge($params, array(\n                            'event_uuid' => $eventUuid,\n                            'includeAttachments' => true,\n                            'includeAllTags' => true,\n                            'deleted' => array(0,1),\n                            'excludeGalaxy' => 1\n                        ));\n                        $event = $this->Event->fetchEvent($user, $params);\n                        $event = $event[0];\n                        $event['Event']['locked'] = 1;\n                        $result = $this->Event->uploadEventToServer($event, $this->data, $HttpSocket);\n                        if ('Success' === $result) {\n                            $successes[] = $event['Event']['id'];\n                        } else {\n                            $fails[$event['Event']['id']] = $result;\n                        }\n                        if ($jobId && $k%10 == 0) {\n                            $job->saveField('progress', 100 * $k / $eventCount);\n                        }\n                    }\n                    if (count($fails) > 0) {\n                        // there are fails, take the lowest fail\n                        $lastpushedid = min(array_keys($fails));\n                    } else {\n                        // no fails, take the highest success\n                        $lastpushedid = max($successes);\n                    }\n                    // increment lastid based on the highest ID seen\n                    // Save the entire Server data instead of just a single field, so that the logger can be fed with the extra fields.\n                    $this->data['Server']['lastpushedid'] = $lastpushedid;\n                    $this->save($this->data);\n                }\n            }\n            $this->syncProposals($HttpSocket, $this->data, null, null, $this->Event);\n        }\n\n        if ($push['canPush'] || $push['canSight']) {\n            $sightingSuccesses = $this->syncSightings($HttpSocket, $this->data, $user, $this->Event);\n        } else {\n            $sightingSuccesses = array();\n        }\n\n        if (!isset($successes)) {\n            $successes = $sightingSuccesses;\n        } else {\n            $successes = array_merge($successes, $sightingSuccesses);\n        }\n        if (!isset($fails)) {\n            $fails = array();\n        }\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        $this->Log->save(array(\n                'org' => $user['Organisation']['name'],\n                'model' => 'Server',\n                'model_id' => $id,\n                'email' => $user['email'],\n                'action' => 'push',\n                'user_id' => $user['id'],\n                'title' => 'Push to ' . $url . ' initiated by ' . $user['email'],\n                'change' => count($successes) . ' events pushed or updated. ' . count($fails) . ' events failed or didn\\'t need an update.'\n        ));\n        if ($jobId) {\n            $job->id = $jobId;\n            $job->saveField('progress', 100);\n            $job->saveField('message', 'Push to server ' . $id . ' complete.');\n            $job->saveField('status', 4);\n        } else {\n            return array($successes, $fails);\n        }\n        return true;\n    }\n\n    public function getEventIdsForPush($id, $HttpSocket, $eventIds, $user)\n    {\n        $server = $this->read(null, $id);\n        $this->Event = ClassRegistry::init('Event');\n\n        foreach ($eventIds as $k => $event) {\n            if (empty($this->eventFilterPushableServers($event, array($server)))) {\n                unset($eventIds[$k]);\n                continue;\n            }\n            unset($eventIds[$k]['Event']['id']);\n        }\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $data = json_encode($eventIds);\n        $uri = $server['Server']['url'] . '/events/filterEventIdsForPush';\n        $response = $HttpSocket->post($uri, $data, $request);\n        if ($response->code == '200') {\n            $uuidList = json_decode($response->body());\n        } else {\n            return false;\n        }\n        return $uuidList;\n    }\n\n    public function syncSightings($HttpSocket, $server, $user, $eventModel)\n    {\n        $successes = array();\n        if (!$server['Server']['push_sightings']) {\n            return $successes;\n        }\n        $this->Sighting = ClassRegistry::init('Sighting');\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $eventIds = $this->getEventIdsFromServer($server, true, $HttpSocket, false, true, 'sightings');\n        // now process the $eventIds to push each of the events sequentially\n        if (!empty($eventIds)) {\n            // check each event and push sightings when needed\n            foreach ($eventIds as $k => $eventId) {\n                $event = $eventModel->fetchEvent($user, $options = array('event_uuid' => $eventId, 'metadata' => true));\n                if (!empty($event)) {\n                    $event = $event[0];\n                    $event['Sighting'] = $this->Sighting->attachToEvent($event, $user);\n                    $result = $eventModel->uploadEventToServer($event, $server, $HttpSocket, 'sightings');\n                    if ($result === 'Success') {\n                        $successes[] = 'Sightings for event ' .  $event['Event']['id'];\n                    }\n                }\n            }\n        }\n        return $successes;\n    }\n\n    public function syncProposals($HttpSocket, $server, $sa_id = null, $event_id = null, $eventModel)\n    {\n        $saModel = ClassRegistry::init('ShadowAttribute');\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        if ($sa_id == null) {\n            if ($event_id == null) {\n                // event_id is null when we are doing a push\n                $ids = $this->getEventIdsFromServer($server, true, $HttpSocket, false, true);\n                // error return strings or ints or throw exceptions\n                if (!is_array($ids)) {\n                    return false;\n                }\n                $conditions = array('uuid' => $ids);\n            } else {\n                $conditions = array('id' => $event_id);\n                // event_id is not null when we are doing a publish\n            }\n            $events = $eventModel->find('all', array(\n                    'conditions' => $conditions,\n                    'recursive' => 1,\n                    'contain' => 'ShadowAttribute',\n                    'fields' => array('Event.uuid')\n            ));\n\n            $fails = 0;\n            $success = 0;\n            $error_message = \"\";\n            foreach ($events as $k => &$event) {\n                if (!empty($event['ShadowAttribute'])) {\n                    foreach ($event['ShadowAttribute'] as &$sa) {\n                        $sa['data'] = $saModel->base64EncodeAttachment($sa);\n                        unset($sa['id']);\n                        unset($sa['value1']);\n                        unset($sa['value2']);\n                    }\n\n                    $data = json_encode($event['ShadowAttribute']);\n                    $request = $this->setupSyncRequest($server);\n                    $uri = $server['Server']['url'] . '/events/pushProposals/' . $event['Event']['uuid'];\n                    $response = $HttpSocket->post($uri, $data, $request);\n                    if ($response->code == '200') {\n                        $result = json_decode($response->body(), true);\n                        if ($result['success']) {\n                            $success += intval($result['counter']);\n                        } else {\n                            $fails++;\n                            if ($error_message == \"\") {\n                                $result['message'];\n                            } else {\n                                $error_message .= \" --- \" . $result['message'];\n                            }\n                        }\n                    } else {\n                        $fails++;\n                    }\n                }\n            }\n        } else {\n            // connect to checkuuid($uuid)\n            $request = $this->setupSyncRequest($server);\n            $uri = $server['Server']['url'] . '/events/checkuuid/' . $sa_id;\n            $response = $HttpSocket->get($uri, '', $request);\n            if ($response->code != '200') {\n                return false;\n            }\n        }\n        return true;\n    }\n\n    public function getCurrentServerSettings()\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $serverSettings = $this->serverSettings;\n        $moduleTypes = array('Enrichment', 'Import', 'Export', 'Cortex');\n        $serverSettings = $this->readModuleSettings($serverSettings, $moduleTypes);\n        return $serverSettings;\n    }\n\n    private function readModuleSettings($serverSettings, $moduleTypes)\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $orgs = $this->Organisation->find('list', array(\n            'conditions' => array(\n                'Organisation.local' => 1\n            ),\n            'fields' => array(\n                'Organisation.id', 'Organisation.name'\n            )\n        ));\n        $orgs = array_merge(array('Unrestricted'), $orgs);\n        foreach ($moduleTypes as $moduleType) {\n            if (Configure::read('Plugin.' . $moduleType . '_services_enable')) {\n                $results = $this->Module->getModuleSettings($moduleType);\n                foreach ($results as $module => $data) {\n                    foreach ($data as $result) {\n                        $setting = array('level' => 1, 'errorMessage' => '');\n                        if ($result['type'] == 'boolean') {\n                            $setting['test'] = 'testBool';\n                            $setting['type'] = 'boolean';\n                            $setting['description'] = __('Enable or disable the %s module.', $module);\n                            $setting['value'] = false;\n                        } elseif ($result['type'] == 'orgs') {\n                            $setting['description'] = __('Restrict the %s module to the given organisation.', $module);\n                            $setting['value'] = 0;\n                            $setting['test'] = 'testLocalOrg';\n                            $setting['type'] = 'numeric';\n                            $setting['optionsSource'] = 'LocalOrgs';\n                        } else {\n                            $setting['test'] = 'testForEmpty';\n                            $setting['type'] = 'string';\n                            $setting['description'] = __('Set this required module specific setting.');\n                            $setting['value'] = '';\n                        }\n                        $serverSettings['Plugin'][$moduleType . '_' . $module . '_' .  $result['name']] = $setting;\n                    }\n                }\n            }\n        }\n        return $serverSettings;\n    }\n\n    private function __serverSettingsRead($serverSettings, $currentSettings)\n    {\n        foreach ($serverSettings as $branchKey => &$branchValue) {\n            if (isset($branchValue['branch'])) {\n                foreach ($branchValue as $leafKey => &$leafValue) {\n                    if ($leafValue['level'] == 3 && !(isset($currentSettings[$branchKey][$leafKey]))) {\n                        continue;\n                    }\n                    $setting = null;\n                    if (isset($currentSettings[$branchKey][$leafKey])) {\n                        $setting = $currentSettings[$branchKey][$leafKey];\n                    }\n                    $leafValue = $this->__evaluateLeaf($leafValue, $leafKey, $setting);\n                    if ($leafKey != 'branch') {\n                        if ($branchKey == 'Plugin') {\n                            $pluginData = explode('_', $leafKey);\n                            $leafValue['subGroup'] = $pluginData[0];\n                        }\n                        if (strpos($branchKey, 'Secur') === 0) {\n                            $leafValue['tab'] = 'Security';\n                        } else {\n                            $leafValue['tab'] = $branchKey;\n                        }\n                        $finalSettingsUnsorted[$branchKey . '.' . $leafKey] = $leafValue;\n                    }\n                }\n            } else {\n                $setting = null;\n                if (isset($currentSettings[$branchKey])) {\n                    $setting = $currentSettings[$branchKey];\n                }\n                $branchValue = $this->__evaluateLeaf($branchValue, $branchKey, $setting);\n                $branchValue['tab'] = 'misc';\n                $finalSettingsUnsorted[$branchKey] = $branchValue;\n            }\n        }\n        return $finalSettingsUnsorted;\n    }\n\n    private function __sortFinalSettings($finalSettingsUnsorted)\n    {\n        $finalSettings = array();\n        for ($i = 0; $i < 4; $i++) {\n            foreach ($finalSettingsUnsorted as $k => $s) {\n                $s['setting'] = $k;\n                if ($s['level'] == $i) {\n                    $finalSettings[] = $s;\n                }\n            }\n        }\n        return $finalSettings;\n    }\n\n    public function serverSettingsRead($unsorted = false)\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $serverSettings = $this->getCurrentServerSettings();\n        $currentSettings = Configure::read();\n        if (Configure::read('Plugin.Enrichment_services_enable')) {\n            $this->readModuleSettings($serverSettings, array('Enrichment'));\n        }\n        $finalSettingsUnsorted = $this->__serverSettingsRead($serverSettings, $currentSettings);\n        foreach ($finalSettingsUnsorted as $key => $temp) {\n            if (in_array($temp['tab'], array_keys($this->__settingTabMergeRules))) {\n                $finalSettingsUnsorted[$key]['tab'] = $this->__settingTabMergeRules[$temp['tab']];\n            }\n        }\n        if ($unsorted) {\n            return $finalSettingsUnsorted;\n        }\n        return $this->__sortFinalSettings($finalSettingsUnsorted);\n    }\n\n    public function serverSettingReadSingle($settingObject, $settingName, $leafKey)\n    {\n        // invalidate config.php from php opcode cache\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n\n        $setting = Configure::read($settingName);\n        $result = $this->__evaluateLeaf($settingObject, $leafKey, $setting);\n        $result['setting'] = $settingName;\n        return $result;\n    }\n\n    private function __evaluateLeaf($leafValue, $leafKey, $setting)\n    {\n        if (isset($setting)) {\n            if (!empty($leafValue['test'])) {\n                $result = $this->{$leafValue['test']}($setting, empty($leafValue['errorMessage']) ? false : $leafValue['errorMessage']);\n                if ($result !== true) {\n                    $leafValue['error'] = 1;\n                    if ($result !== false) {\n                        $leafValue['errorMessage'] = $result;\n                    }\n                }\n            }\n            if ($setting !== '') {\n                $leafValue['value'] = $setting;\n            }\n        } else {\n            if ($leafKey != 'branch' && (!isset($leafValue['null']) || !$leafValue['null'])) {\n                $leafValue['error'] = 1;\n                $leafValue['errorMessage'] = __('Value not set.');\n            }\n        }\n        return $leafValue;\n    }\n\n    public function loadAvailableLanguages()\n    {\n        $dirs = glob(APP . 'Locale/*', GLOB_ONLYDIR);\n        $languages = array('eng' => 'eng');\n        foreach ($dirs as $k => $dir) {\n            $dir = str_replace(APP . 'Locale' . DS, '', $dir);\n            $languages[$dir] = $dir;\n        }\n        return $languages;\n    }\n\n    public function testLanguage($value)\n    {\n        $languages = $this->loadAvailableLanguages();\n        if (!isset($languages[$value])) {\n            return __('Invalid language.');\n        }\n        return true;\n    }\n\n    public function loadTagCollections()\n    {\n        $this->TagCollection = ClassRegistry::init('TagCollection');\n        $user = array('Role' => array('perm_site_admin' => 1));\n        $tagCollections = $this->TagCollection->fetchTagCollection($user);\n        $options = array(0 => 'None');\n        foreach ($tagCollections as $tagCollection) {\n            $options[intval($tagCollection['TagCollection']['id'])] = $tagCollection['TagCollection']['name'];\n        }\n        return $options;\n    }\n\n    public function testTagCollections($value)\n    {\n        $tag_collections = $this->loadTagCollections();\n        if (!isset($tag_collections[intval($value)])) {\n            return __('Invalid tag_collection.');\n        }\n        return true;\n    }\n\n    public function testForNumeric($value)\n    {\n        if (!is_numeric($value)) {\n            return __('This setting has to be a number.');\n        }\n        return true;\n    }\n\n    public function testForCookieTimeout($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < Configure::read('Session.timeout') && $value !== 0) {\n            return __('The cookie timeout is currently lower than the session timeout. This will invalidate the cookie before the session expires.');\n        }\n        return true;\n    }\n\n    public function testUuid($value)\n    {\n        if (empty($value) || !preg_match('/^\\{?[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}\\}?$/', $value)) {\n            return 'Invalid UUID.';\n        }\n        return true;\n    }\n\n    public function testForSessionDefaults($value)\n    {\n        if (empty($value) || !in_array($value, array('php', 'database', 'cake', 'cache'))) {\n            return 'Please choose a valid session handler. Recommended values: php or database. Alternate options are cake (cakephp file based sessions) and cache.';\n        } else {\n            return true;\n        }\n    }\n\n    public function testLocalOrg($value)\n    {\n        $this->Organisation = ClassRegistry::init('Organisation');\n        if ($value == 0) {\n            return 'No organisation selected';\n        }\n        $local_orgs = $this->Organisation->find('list', array(\n            'conditions' => array('local' => 1),\n            'recursive' => -1,\n            'fields' => array('Organisation.id', 'Organisation.name')\n        ));\n        if (in_array($value, array_keys($local_orgs))) {\n            return true;\n        }\n        return 'Invalid organisation';\n    }\n\n    public function testForEmpty($value)\n    {\n        $value = trim($value);\n        if ($value === '') {\n            return 'Value not set.';\n        }\n        return true;\n    }\n\n    public function testForPath($value)\n    {\n        if ($value === '') {\n            return true;\n        }\n        if (preg_match('@^\\/?(([a-z0-9_.]+[a-z0-9_.\\-.\\:]*[a-z0-9_.\\-.\\:]|[a-z0-9_.])+\\/?)+$@i', $value)) {\n            return true;\n        }\n        return 'Invalid characters in the path.';\n    }\n\n    public function beforeHookBinExec($setting, $value)\n    {\n        return $this->testForBinExec($value);\n    }\n\n    public function testForBinExec($value)\n    {\n        if (substr($value, 0, 7) === \"phar://\") {\n            return 'Phar protocol not allowed.';\n        }\n        $finfo = finfo_open(FILEINFO_MIME_TYPE);\n        if ($value === '') {\n            return true;\n        }\n        if (is_executable($value)) {\n            if (finfo_file($finfo, $value) == \"application/x-executable\" || finfo_file($finfo, $value) == \"application/x-sharedlib\") {\n                finfo_close($finfo);\n                return true;\n            } else {\n                return 'Binary file not executable. It is of type: ' . finfo_file($finfo, $value);\n            }\n        } else {\n            return false;\n        }\n    }\n\n    public function testForWritableDir($value)\n    {\n        if (substr($value, 0, 7) === \"phar://\") {\n            return 'Phar protocol not allowed.';\n        }\n        if (!is_dir($value)) {\n            return 'Not a valid directory.';\n        }\n        if (!is_writeable($value)) {\n            return 'Not a writable directory.';\n        }\n        return true;\n    }\n\n    public function testDebug($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if ($this->testForNumeric($value) !== true) {\n            return 'This setting has to be a number between 0 and 2, with 0 disabling debug mode.';\n        }\n        if ($value === 0) {\n            return true;\n        }\n        return 'This setting has to be set to 0 on production systems. Ignore this warning if this is not the case.';\n    }\n\n    public function testDebugAdmin($value)\n    {\n        if ($this->testBool($value) !== true) {\n            return 'This setting has to be either true or false.';\n        }\n        if (!$value) {\n            return true;\n        }\n        return 'Enabling debug is not recommended. Turn this on temporarily if you need to see a stack trace to debug an issue, but make sure this is not left on.';\n    }\n\n    public function testDate($date)\n    {\n        if ($this->testForEmpty($date) !== true) {\n            return $this->testForEmpty($date);\n        }\n        if (!strtotime($date)) {\n            return 'The date that you have entered is invalid. Expected: yyyy-mm-dd';\n        }\n        return true;\n    }\n\n\n    public function getHost()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-Host', $headers)) {\n            $host = $headers['X-Forwarded-Host'];\n        } else {\n            $host = $_SERVER['HTTP_HOST'];\n        }\n        return $host;\n    }\n\n    public function getProto()\n    {\n        if (function_exists('apache_request_headers')) {\n            $headers = apache_request_headers();\n        } else {\n            $headers = $_SERVER;\n        }\n\n        if (array_key_exists('X-Forwarded-Proto', $headers)) {\n            $proto = $headers['X-Forwarded-Proto'];\n        } else {\n            $proto = ((!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off') || $_SERVER['SERVER_PORT'] == 443) === true ? 'HTTPS' : 'HTTP';\n        }\n        return $proto;\n    }\n\n    public function testBaseURL($value)\n    {\n        // only run this check via the GUI, via the CLI it won't work\n        if (php_sapi_name() == 'cli') {\n            if (!empty($value) && !preg_match('/^http(s)?:\\/\\//i', $value)) {\n                return 'Invalid baseurl, please make sure that the protocol is set.';\n            }\n            return true;\n        }\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if ($value != strtolower($this->getProto()) . '://' . $this->getHost()) {\n            return 'Invalid baseurl, it has to be in the \"https://FQDN\" format.';\n        }\n        return true;\n    }\n\n    public function testURL($value)\n    {\n        // only run this check via the GUI, via the CLI it won't work\n        if (!empty($value) && !preg_match('/^http(s)?:\\/\\//i', $value)) {\n            return 'Invalid baseurl, please make sure that the protocol is set.';\n        }\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        return true;\n    }\n\n    public function testDisableEmail($value)\n    {\n        if (isset($value) && $value) {\n            return 'E-mailing is blocked.';\n        }\n        return true;\n    }\n\n    public function testDisableCache($value)\n    {\n        if (isset($value) && $value) {\n            return 'Export caches are disabled.';\n        }\n        return true;\n    }\n\n    public function testLive($value)\n    {\n        if ($this->testBool($value) !== true) {\n            return $this->testBool($value);\n        }\n        if (!$value) {\n            return 'MISP disabled.';\n        }\n        return true;\n    }\n\n    public function testBool($value, $errorMessage = false)\n    {\n        if ($value !== true && $value !== false) {\n            if ($errorMessage) {\n                return $errorMessage;\n            }\n            return 'Value is not a boolean, make sure that you convert \\'true\\' to true for example.';\n        }\n        return true;\n    }\n\n    public function testBoolFalse($value, $errorMessage = false)\n    {\n        if ($this->testBool($value, $errorMessage) !== true) {\n            return $this->testBool($value, $errorMessage);\n        }\n        if ($value !== false) {\n            if ($errorMessage) {\n                return $errorMessage;\n            }\n            return 'It is highly recommended that this setting is disabled. Make sure you understand the impact of having this setting turned on.';\n        } else {\n            return true;\n        }\n    }\n\n    public function testParanoidSkipDb($value)\n    {\n        if (!empty(Configure::read('MISP.log_paranoid')) && empty($value)) {\n            return 'Perhaps consider skipping the database when using paranoid mode. A great number of entries will be added to your log database otherwise that will lead to performance degradation.';\n        }\n        return true;\n    }\n\n    public function testSalt($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (strlen($value) < 32) {\n            return 'The salt has to be an at least 32 byte long string.';\n        }\n        if ($value == \"Rooraenietu8Eeyo<Qu2eeNfterd-dd+\") {\n            return 'This is the default salt shipped with the application and is therefore unsecure.';\n        }\n        return true;\n    }\n\n    public function testForTermsFile($value)\n    {\n        return $this->__testForFile($value, APP . 'files' . DS . 'terms');\n    }\n\n    public function testForCABundle($value)\n    {\n        $file = new File($value);\n        if (!$file->exists()) {\n            return __('Invalid file path or file not accessible.');\n        }\n        if ($file->ext() !== 'pem') {\n            return __('File has to be in .pem format.');\n        }\n    }\n\n    public function testForStyleFile($value)\n    {\n        if (empty($value)) {\n            return true;\n        }\n        return $this->__testForFile($value, APP . 'webroot' . DS . 'css');\n    }\n\n    public function testForCustomImage($value)\n    {\n        return $this->__testForFile($value, APP . 'webroot' . DS . 'img' . DS . 'custom');\n    }\n\n    public function testPasswordLength($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0) {\n            return 'Length cannot be negative, set a positive integer or 0 (to choose the default option).';\n        }\n        return true;\n    }\n\n    public function testForPortNumber($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 21 || $value > 65535) {\n            return 'Make sure that you pick a valid port number.';\n        }\n        return true;\n    }\n\n    public function testForZMQPortNumber($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 49152 || $value > 65535) {\n            return 'It is recommended that you pick a port number in the dynamic range (49152-65535). However, if you have a valid reason to use a different port, ignore this message.';\n        }\n        return true;\n    }\n\n    public function testPasswordRegex($value)\n    {\n        if (!empty($value) && @preg_match($value, 'test') === false) {\n            return 'Invalid regex.';\n        }\n        return true;\n    }\n\n    public function testPasswordResetText($value)\n    {\n        if (strpos($value, '$password') === false || strpos($value, '$username') === false || strpos($value, '$misp') === false) {\n            return 'The text served to the users must include the following replacement strings: \"$username\", \"$password\", \"$misp\"';\n        }\n        return true;\n    }\n\n    public function testForGPGBinary($value)\n    {\n        if (empty($value)) {\n            $value = $this->serverSettings['GnuPG']['binary']['value'];\n        }\n        if (file_exists($value)) {\n            return true;\n        }\n        return 'Could not find the GnuPG executable at the defined location.';\n    }\n\n    public function testForRPZDuration($value)\n    {\n        if (($this->testForNumeric($value) !== true && preg_match('/^[0-9]*[mhdw]$/i', $value)) || $value >= 0) {\n            return true;\n        } else {\n            return 'Negative seconds found. The following formats are accepted: seconds (positive integer), or duration (positive integer) followed by a letter denoting scale (such as m, h, d, w for minutes, hours, days, weeks)';\n        }\n    }\n\n    public function testForRPZBehaviour($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0 || $value > 5) {\n            return 'Invalid setting, valid range is 0-5 (0 = DROP, 1 = NXDOMAIN, 2 = NODATA, 3 = walled garden, 4 = PASSTHRU, 5 = TCP-only.';\n        }\n        return true;\n    }\n\n    public function testForSightingVisibility($value)\n    {\n        $numeric = $this->testForNumeric($value);\n        if ($numeric !== true) {\n            return $numeric;\n        }\n        if ($value < 0 || $value > 2) {\n            return 'Invalid setting, valid range is 0-2 (0 = Event owner, 1 = Sighting reporters, 2 = Everyone.';\n        }\n        return true;\n    }\n\n    public function sightingsBeforeHook($setting, $value)\n    {\n        if ($value == true) {\n            $this->updateDatabase('addSightings');\n        }\n        return true;\n    }\n\n    public function testForRPZSerial($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!preg_match('/^((\\$date(\\d*)|\\$time|\\d*))$/', $value)) {\n            return 'Invalid format.';\n        }\n        return true;\n    }\n\n    public function testForRPZNS($value)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!preg_match('/^\\w+(\\.\\w+)*(\\.?) \\w+(\\.\\w+)*$/', $value)) {\n            return 'Invalid format.';\n        }\n        return true;\n    }\n\n    public function zmqAfterHook($setting, $value)\n    {\n        $pubSubTool = $this->getPubSubTool();\n        // If we are trying to change the enable setting to false, we don't need to test anything, just kill the server and return true.\n        if ($setting == 'Plugin.ZeroMQ_enable') {\n            if ($value == false || $value == 0) {\n                $pubSubTool->killService();\n                return true;\n            }\n        } elseif (!Configure::read('Plugin.ZeroMQ_enable')) {\n            // If we are changing any other ZeroMQ settings but the feature is disabled, don't reload the service\n            return true;\n        }\n        $pubSubTool->reloadServer();\n        return true;\n    }\n\n    public function disableCacheAfterHook($setting, $value)\n    {\n        if ($value) {\n            $this->Event = ClassRegistry::init('Event');\n            App::uses('Folder', 'Utility');\n            App::uses('File', 'Utility');\n            // delete all cache files\n            foreach ($this->Event->export_types as $type => $settings) {\n                $dir = new Folder(APP . 'tmp/cached_exports/' . $type);\n                // No caches created for this type of export, move on\n                if ($dir == null) {\n                    continue;\n                }\n                $files = $dir->find('.*' . $settings['extension']);\n                foreach ($files as $file) {\n                    $file = new File($dir->pwd() . DS . $file);\n                    $file->delete();\n                    $file->close();\n                }\n            }\n        }\n        return true;\n    }\n\n    public function correlationAfterHook($setting, $value)\n    {\n        if (!Configure::read('MISP.background_jobs')) {\n            $this->Attribute = ClassRegistry::init('Attribute');\n            if ($value) {\n                $k = $this->Attribute->purgeCorrelations();\n            } else {\n                $k = $this->Attribute->generateCorrelation();\n            }\n        } else {\n            if ($value == true) {\n                $jobType = 'jobPurgeCorrelation';\n                $jobTypeText = 'purge correlations';\n            } else {\n                $jobType = 'jobGenerateCorrelation';\n                $jobTypeText = 'generate correlation';\n            }\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $data = array(\n                    'worker' => 'default',\n                    'job_type' => $jobTypeText,\n                    'job_input' => 'All attributes',\n                    'status' => 0,\n                    'retries' => 0,\n                    'org' => 'ADMIN',\n                    'message' => 'Job created.',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'default',\n                    'AdminShell',\n                    array($jobType, $jobId),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n        }\n    }\n\n    public function ipLogBeforeHook($setting, $value)\n    {\n        if ($setting == 'MISP.log_client_ip') {\n            if ($value == true) {\n                $this->updateDatabase('addIPLogging');\n            }\n        }\n        return true;\n    }\n\n    public function customAuthBeforeHook($setting, $value)\n    {\n        if (!empty($value)) {\n            $this->updateDatabase('addCustomAuth');\n        }\n        $this->cleanCacheFiles();\n        return true;\n    }\n\n    // never come here directly, always go through a secondary check like testForTermsFile in order to also pass along the expected file path\n    private function __testForFile($value, $path)\n    {\n        if ($this->testForEmpty($value) !== true) {\n            return $this->testForEmpty($value);\n        }\n        if (!$this->checkFilename($value)) {\n            return 'Invalid filename.';\n        }\n        $file = $path . DS . $value;\n        if (!file_exists($file)) {\n            return 'Could not find the specified file. Make sure that it is uploaded into the following directory: ' . $path;\n        }\n        return true;\n    }\n\n    private function __serverSettingNormaliseValue($data, $value, $setting)\n    {\n        if (!empty($data['type'])) {\n            if ($data['type'] == 'boolean') {\n                $value = $value ? true : false;\n            } elseif ($data['type'] == 'numeric') {\n                $value = intval($value);\n            }\n        }\n        return $value;\n    }\n\n    public function getSettingData($setting_name)\n    {\n        // invalidate config.php from php opcode cache\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n        if (strpos($setting_name, 'Plugin.Enrichment') !== false || strpos($setting_name, 'Plugin.Import') !== false || strpos($setting_name, 'Plugin.Export') !== false || strpos($setting_name, 'Plugin.Cortex') !== false) {\n            $serverSettings = $this->getCurrentServerSettings();\n        } else {\n            $serverSettings = $this->serverSettings;\n        }\n        $relevantSettings = (array_intersect_key(Configure::read(), $serverSettings));\n        $setting = false;\n        foreach ($serverSettings as $k => $s) {\n            if (isset($s['branch'])) {\n                foreach ($s as $ek => $es) {\n                    if ($ek != 'branch') {\n                        if ($setting_name == $k . '.' . $ek) {\n                            $setting = $es;\n                            continue 2;\n                        }\n                    }\n                }\n            } else {\n                if ($setting_name == $k) {\n                    $setting = $s;\n                    continue;\n                }\n            }\n        }\n        if (!empty($setting)) {\n            $setting['name'] = $setting_name;\n        }\n        return $setting;\n    }\n\n    public function serverSettingsEditValue($user, $setting, $value, $forceSave = false)\n    {\n        if (isset($setting['beforeHook'])) {\n            $beforeResult = call_user_func_array(array($this, $setting['beforeHook']), array($setting['name'], $value));\n            if ($beforeResult !== true) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $result = $this->Log->save(array(\n                        'org' => $user['Organisation']['name'],\n                        'model' => 'Server',\n                        'model_id' => 0,\n                        'email' => $user['email'],\n                        'action' => 'serverSettingsEdit',\n                        'user_id' => $user['id'],\n                        'title' => 'Server setting issue',\n                        'change' => 'There was an issue witch changing ' . $setting['name'] . ' to ' . $value  . '. The error message returned is: ' . $beforeResult . 'No changes were made.',\n                ));\n                return $beforeResult;\n            }\n        }\n        $value = trim($value);\n        if ($setting['type'] == 'boolean') {\n            $value = ($value ? true : false);\n        }\n        if ($setting['type'] == 'numeric') {\n            $value = intval($value);\n        }\n        if (!empty($setting['test'])) {\n            $testResult = $this->{$setting['test']}($value);\n        } else {\n            $testResult = true;  # No test defined for this setting: cannot fail\n        }\n        if (!$forceSave && $testResult !== true) {\n            if ($testResult === false) {\n                $errorMessage = $setting['errorMessage'];\n            } else {\n                $errorMessage = $testResult;\n            }\n            return $errorMessage;\n        } else {\n            $oldValue = Configure::read($setting['name']);\n            $settingSaveResult = $this->serverSettingsSaveValue($setting['name'], $value);\n\n            if ($settingSaveResult) {\n                $this->Log = ClassRegistry::init('Log');\n                $change = array($setting['name'] => array($oldValue, $value));\n                $this->Log->createLogEntry($user, 'serverSettingsEdit', 'Server', 0, 'Server setting changed', $change);\n\n                // execute after hook\n                if (isset($setting['afterHook'])) {\n                    $afterResult = call_user_func_array(array($this, $setting['afterHook']), array($setting['name'], $value));\n                    if ($afterResult !== true) {\n                        $change = 'There was an issue after setting a new setting. The error message returned is: ' . $afterResult;\n                        $this->Log->createLogEntry($user, 'serverSettingsEdit', 'Server', 0, 'Server setting issue', $change);\n                        return $afterResult;\n                    }\n                }\n                return true;\n            } else {\n                return __('Something went wrong. MISP tried to save a malformed config file. Setting change reverted.');\n            }\n        }\n    }\n\n    public function serverSettingsSaveValue($setting, $value)\n    {\n        // validate if current config.php is intact:\n        $current = file_get_contents(APP . 'Config' . DS . 'config.php');\n        $current = trim($current);\n        if (strlen($current) < 20) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Tried to modify server settings but current config is broken.',\n            ));\n            return false;\n        }\n        copy(APP . 'Config' . DS . 'config.php', APP . 'Config' . DS . 'config.php.bk');\n        $settingObject = $this->getCurrentServerSettings();\n        foreach ($settingObject as $branchName => $branch) {\n            if (!isset($branch['level'])) {\n                foreach ($branch as $settingName => $settingObject) {\n                    if ($setting == $branchName . '.' . $settingName) {\n                        $value = $this->__serverSettingNormaliseValue($settingObject, $value, $setting);\n                    }\n                }\n            } else {\n                if ($setting == $branchName) {\n                    $value = $this->__serverSettingNormaliseValue($branch, $value, $setting);\n                }\n            }\n        }\n        Configure::write($setting, $value);\n        $arrayFix = array(\n            'Security.auth',\n            'ApacheSecureAuth.ldapFilter'\n        );\n        foreach ($arrayFix as $settingFix) {\n            if (Configure::read($settingFix) && is_array(Configure::read($settingFix)) && !empty(Configure::read($settingFix))) {\n                $arrayElements = array();\n                foreach (Configure::read($settingFix) as $array) {\n                    if (!in_array($array, $arrayElements)) {\n                        $arrayElements[] = $array;\n                    }\n                }\n                Configure::write($settingFix, $arrayElements);\n            }\n        }\n        $settingsToSave = array(\n            'debug', 'MISP', 'GnuPG', 'SMIME', 'Proxy', 'SecureAuth',\n            'Security', 'Session.defaults', 'Session.timeout', 'Session.cookieTimeout',\n            'Session.autoRegenerate', 'Session.checkAgent', 'site_admin_debug',\n            'Plugin', 'CertAuth', 'ApacheShibbAuth', 'ApacheSecureAuth'\n        );\n        $settingsArray = array();\n        foreach ($settingsToSave as $setting) {\n            $settingsArray[$setting] = Configure::read($setting);\n        }\n        $settingsString = var_export($settingsArray, true);\n        $settingsString = '<?php' . \"\\n\" . '$config = ' . $settingsString . ';';\n        if (function_exists('opcache_reset')) {\n            opcache_reset();\n        }\n        if (empty(Configure::read('MISP.server_settings_skip_backup_rotate'))) {\n            $randomFilename = $this->generateRandomFileName();\n            // To protect us from 2 admin users having a concurent file write to the config file, solar flares and the bogeyman\n            file_put_contents(APP . 'Config' . DS . $randomFilename, $settingsString);\n            rename(APP . 'Config' . DS . $randomFilename, APP . 'Config' . DS . 'config.php');\n            $config_saved = file_get_contents(APP . 'Config' . DS . 'config.php');\n            // if the saved config file is empty, restore the backup.\n            if (strlen($config_saved) < 20) {\n                copy(APP . 'Config' . DS . 'config.php.bk', APP . 'Config' . DS . 'config.php');\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: Something went wrong saving the config file, reverted to backup file.',\n                ));\n                return false;\n            }\n        } else {\n            file_put_contents(APP . 'Config' . DS . 'config.php', $settingsString);\n        }\n        return true;\n    }\n\n    public function checkVersion($newest)\n    {\n        $version_array = $this->checkMISPVersion();\n        $current = 'v' . $version_array['major'] . '.' . $version_array['minor'] . '.' . $version_array['hotfix'];\n        $newest_array = $this->__dissectVersion($newest);\n        $upToDate = $this->__compareVersions(array($version_array['major'], $version_array['minor'], $version_array['hotfix']), $newest_array, 0);\n        return array('current' => $current, 'newest' => $newest, 'upToDate' => $upToDate);\n    }\n\n    private function __dissectVersion($version)\n    {\n        $version = substr($version, 1);\n        return explode('.', $version);\n    }\n\n    private function __compareVersions($current, $newest, $i)\n    {\n        if ($current[$i] == $newest[$i]) {\n            if ($i < 2) {\n                return $this->__compareVersions($current, $newest, $i+1);\n            } else {\n                return 'same';\n            }\n        } elseif ($current[$i] < $newest[$i]) {\n            return 'older';\n        } else {\n            return 'newer';\n        }\n    }\n\n    public function getFileRules()\n    {\n        $validItems = array(\n                'orgs' => array(\n                        'name' => __('Organisation logos'),\n                        'description' => __('The logo used by an organisation on the event index, event view, discussions, proposals, etc. Make sure that the filename is in the org.png format, where org is the case-sensitive organisation name.'),\n                        'expected' => array(),\n                        'valid_format' => __('48x48 pixel .png files'),\n                        'path' => APP . 'webroot' . DS . 'img' . DS . 'orgs',\n                        'regex' => '.*\\.(png|PNG)$',\n                        'regex_error' => __('Filename must be in the following format: *.png'),\n                        'files' => array(),\n                ),\n                'img' => array(\n                        'name' => __('Additional image files'),\n                        'description' => __('Image files uploaded into this directory can be used for various purposes, such as for the login page logos'),\n                        'expected' => array(\n                                'MISP.footer_logo' => Configure::read('MISP.footer_logo'),\n                                'MISP.home_logo' => Configure::read('MISP.home_logo'),\n                                'MISP.welcome_logo' => Configure::read('MISP.welcome_logo'),\n                                'MISP.welcome_logo2' => Configure::read('MISP.welcome_logo2'),\n                        ),\n                        'valid_format' => __('text/html if served inline, anything that conveys the terms of use if served as download'),\n                        'path' => APP . 'webroot' . DS . 'img' . DS . 'custom',\n                        'regex' => '.*\\.(png|PNG)$',\n                        'regex_error' => __('Filename must be in the following format: *.png'),\n                        'files' => array(),\n                ),\n        );\n        return $validItems;\n    }\n\n    public function grabFiles()\n    {\n        $validItems = $this->getFileRules();\n        App::uses('Folder', 'Utility');\n        App::uses('File', 'Utility');\n        foreach ($validItems as $k => $item) {\n            $dir = new Folder($item['path']);\n            $files = $dir->find($item['regex'], true);\n            foreach ($files as $file) {\n                $f = new File($item['path'] . DS . $file);\n                $validItems[$k]['files'][] = array('filename' => $file, 'filesize' => $f->size(), 'read' => $f->readable(), 'write' => $f->writable(), 'execute' => $f->executable());\n            }\n        }\n        return $validItems;\n    }\n\n    public function runConnectionTest($id)\n    {\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server, null, 5);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $response = $HttpSocket->get($uri, false, $request);\n        } catch (Exception $e) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Connection test failed. Reason: ' . json_encode($e->getMessage()),\n            ));\n            return array('status' => 2);\n        }\n        if ($response->isOk()) {\n            return array('status' => 1, 'message' => $response->body());\n        } else {\n            if ($response->code == '403') {\n                return array('status' => 4);\n            }\n            if ($response->code == '405') {\n                try {\n                    $responseText = json_decode($response->body, true)['message'];\n                } catch (Exception $e) {\n                    return array('status' => 3);\n                }\n                if ($responseText === 'Your user account is expecting a password change, please log in via the web interface and change it before proceeding.') {\n                    return array('status' => 5);\n                } elseif ($responseText === 'You have not accepted the terms of use yet, please log in via the web interface and accept them.') {\n                    return array('status' => 6);\n                }\n            }\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: Connection test failed. Returned data is in the change field.',\n                    'change' => sprintf(\n                        'response () => (%s), response-code () => (%s)',\n                        $response->body,\n                        $response->code\n                    )\n            ));\n            return array('status' => 3);\n        }\n    }\n\n    public function runPOSTtest($id)\n    {\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        if (empty($server)) {\n            throw new InvalidArgumentException(__('Invalid server.'));\n        }\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $testFile = file_get_contents(APP . 'files/scripts/test_payload.txt');\n        $uri = $server['Server']['url'] . '/servers/postTest';\n        $this->Log = ClassRegistry::init('Log');\n        try {\n            $response = $HttpSocket->post($uri, json_encode(array('testString' => $testFile)), $request);\n            $rawBody = $response->body;\n            $response = json_decode($response, true);\n        } catch (Exception $e) {\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: POST connection test failed. Reason: ' . json_encode($e->getMessage()),\n            ));\n            return 8;\n        }\n        if (!isset($response['body']['testString']) || $response['body']['testString'] !== $testFile) {\n            $responseString = '';\n            if (!empty($repsonse['body']['testString'])) {\n                $responseString = $response['body']['testString'];\n            } else if (!empty($rawBody)){\n                $responseString = $rawBody;\n            } else {\n                $responseString = __('Response was empty.');\n            }\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: POST connection test failed due to the message body not containing the expected data. Response: ' . PHP_EOL . PHP_EOL . $responseString,\n            ));\n            return 9;\n        }\n        $headers = array('Accept', 'Content-type');\n        foreach ($headers as $header) {\n            if (!isset($response['headers'][$header]) || $response['headers'][$header] != 'application/json') {\n                $responseHeader = isset($response['headers'][$header]) ? $response['headers'][$header] : 'Header was not set.';\n                $this->Log->create();\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: POST connection test failed due to a header not matching the expected value. Expected: \"application/json\", received \"' . $responseHeader,\n                ));\n                return 10;\n            }\n        }\n        return 1;\n    }\n\n    public function checkVersionCompatibility($id, $user = array(), $HttpSocket = false)\n    {\n        // for event publishing when we don't have a user.\n        if (empty($user)) {\n            $user = array('Organisation' => array('name' => 'SYSTEM'), 'email' => 'SYSTEM', 'id' => 0);\n        }\n        $localVersion = $this->checkMISPVersion();\n        $server = $this->find('first', array('conditions' => array('Server.id' => $id)));\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/servers/getVersion';\n        try {\n            $response = $HttpSocket->get($uri, '', $request);\n        } catch (Exception $e) {\n            $error = $e->getMessage();\n        }\n        if (!isset($response) || $response->code != '200') {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            if (isset($response->code)) {\n                $title = 'Error: Connection to the server has failed.' . (isset($response->code) ? ' Returned response code: ' . $response->code : '');\n            } else {\n                $title = 'Error: Connection to the server has failed. The returned exception\\'s error message was: ' . $e->getMessage();\n            }\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => $title\n            ));\n            return $title;\n        }\n        $remoteVersion = json_decode($response->body, true);\n        $canPush = isset($remoteVersion['perm_sync']) ? $remoteVersion['perm_sync'] : false;\n        $canSight = isset($remoteVersion['perm_sighting']) ? $remoteVersion['perm_sighting'] : false;\n        $remoteVersion = explode('.', $remoteVersion['version']);\n        if (!isset($remoteVersion[0])) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $message = __('Error: Server didn\\'t send the expected response. This may be because the remote server version is outdated.');\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => 'error',\n                    'user_id' => $user['id'],\n                    'title' => $message,\n            ));\n            return $message;\n        }\n        $response = false;\n        $success = false;\n        $issueLevel = \"warning\";\n        if ($localVersion['major'] > $remoteVersion[0]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance's MISP version is behind by a major version.\";\n        }\n        if ($response === false && $localVersion['major'] < $remoteVersion[0]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance is at least a full major version ahead - make sure you update your MISP instance!\";\n        }\n        if ($response === false && $localVersion['minor'] > $remoteVersion[1]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance's MISP version is behind by a minor version.\";\n        }\n        if ($response === false && $localVersion['minor'] < $remoteVersion[1]) {\n            $response = \"Sync to Server ('\" . $id . \"') aborted. The remote instance is at least a full minor version ahead - make sure you update your MISP instance!\";\n        }\n\n        // if we haven't set a message yet, we're good to go. We are only behind by a hotfix version\n        if ($response === false) {\n            $success = true;\n        } else {\n            $issueLevel = \"error\";\n        }\n        if ($response === false && $localVersion['hotfix'] > $remoteVersion[2]) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but the remote instance is a few hotfixes behind.\";\n        }\n        if ($response === false && $localVersion['hotfix'] < $remoteVersion[2]) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but the remote instance is a few hotfixes ahead. Make sure you keep your instance up to date!\";\n        }\n        if (empty($response) && $remoteVersion[2] < 111) {\n            $response = \"Sync to Server ('\" . $id . \"') initiated, but version 2.4.111 is required in order to be able to pull proposals from the remote side.\";\n        }\n\n        if ($response !== false) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $this->Log->save(array(\n                    'org' => $user['Organisation']['name'],\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => $user['email'],\n                    'action' => $issueLevel,\n                    'user_id' => $user['id'],\n                    'title' => ucfirst($issueLevel) . ': ' . $response,\n            ));\n        }\n        return array('success' => $success, 'response' => $response, 'canPush' => $canPush, 'canSight' => $canSight, 'version' => $remoteVersion);\n    }\n\n    public function isJson($string)\n    {\n        return (json_last_error() == JSON_ERROR_NONE);\n    }\n\n    public function captureServer($server, $user)\n    {\n        if (isset($server[0])) {\n            $server = $server[0];\n        }\n        if ($server['url'] == Configure::read('MISP.baseurl')) {\n            return 0;\n        }\n        $existingServer = $this->find('first', array(\n                'recursive' => -1,\n                'conditions' => array('url' => $server['url'])\n        ));\n        // unlike with other capture methods, if we find a server that we don't know\n        // we don't want to save it.\n        if (empty($existingServer)) {\n            return false;\n        }\n        return $existingServer[$this->alias]['id'];\n    }\n\n    public function dbSpaceUsage()\n    {\n        $dataSource = $this->getDataSource()->config['datasource'];\n        if ($dataSource == 'Database/Mysql') {\n            $sql = sprintf(\n                'select TABLE_NAME, sum((DATA_LENGTH+INDEX_LENGTH)/1024/1024) AS used, sum(DATA_FREE)/1024/1024 AS reclaimable from information_schema.tables where table_schema = %s group by TABLE_NAME;',\n                \"'\" . $this->getDataSource()->config['database'] . \"'\"\n            );\n            $sqlResult = $this->query($sql);\n            $result = array();\n            foreach ($sqlResult as $temp) {\n                foreach ($temp[0] as $k => $v) {\n                    $temp[0][$k] = round($v, 2) . 'MB';\n                }\n                $temp[0]['table'] = $temp['tables']['TABLE_NAME'];\n                $result[] = $temp[0];\n            }\n            return $result;\n        }\n        else if ($dataSource == 'Database/Postgres') {\n            $sql = sprintf(\n                'select TABLE_NAME as table, pg_total_relation_size(%s||%s||TABLE_NAME) as used from information_schema.tables where table_schema = %s group by TABLE_NAME;',\n                \"'\" . $this->getDataSource()->config['database'] . \"'\",\n                \"'.'\",\n                \"'\" . $this->getDataSource()->config['database'] . \"'\"\n            );\n            $sqlResult = $this->query($sql);\n            $result = array();\n            foreach ($sqlResult as $temp) {\n                foreach ($temp[0] as $k => $v) {\n                    if ($k == \"table\") {\n                        continue;\n                    }\n                    $temp[0][$k] = round($v / 1024 / 1024, 2) . 'MB';\n                }\n                $temp[0]['reclaimable'] = '0MB';\n                $result[] = $temp[0];\n            }\n            return $result;\n        }\n    }\n\n    public function redisInfo()\n    {\n        $output = array(\n            'extensionVersion' => phpversion('redis'),\n            'connection' => false,\n        );\n\n        try {\n            $redis = $this->setupRedisWithException();\n            $output['connection'] = true;\n            $output = array_merge($output, $redis->info());\n        } catch (Exception $e) {\n            $output['connection_error'] = $e->getMessage();\n        }\n\n        return $output;\n    }\n\n    public function dbSchemaDiagnostic()\n    {\n        $actualDbVersion = $this->AdminSetting->find('first', array(\n            'conditions' => array('setting' => 'db_version')\n        ))['AdminSetting']['value'];\n        $dataSource = $this->getDataSource()->config['datasource'];\n        $schemaDiagnostic = array(\n            'dataSource' => $dataSource,\n            'actual_db_version' => $actualDbVersion,\n            'checked_table_column' => array(),\n            'diagnostic' => array(),\n            'diagnostic_index' => array(),\n            'expected_db_version' => '?',\n            'error' => '',\n            'update_locked' => $this->isUpdateLocked(),\n            'remaining_lock_time' => $this->getLockRemainingTime(),\n            'update_fail_number_reached' => $this->UpdateFailNumberReached(),\n            'indexes' => array()\n        );\n        if ($dataSource == 'Database/Mysql') {\n            $dbActualSchema = $this->getActualDBSchema();\n            $dbExpectedSchema = $this->getExpectedDBSchema();\n            if ($dbExpectedSchema !== false) {\n                $db_schema_comparison = $this->compareDBSchema($dbActualSchema['schema'], $dbExpectedSchema['schema']);\n                $db_indexes_comparison = $this->compareDBIndexes($dbActualSchema['indexes'], $dbExpectedSchema['indexes'], $dbExpectedSchema);\n                $schemaDiagnostic['checked_table_column'] = $dbActualSchema['column'];\n                $schemaDiagnostic['diagnostic'] = $db_schema_comparison;\n                $schemaDiagnostic['diagnostic_index'] = $db_indexes_comparison;\n                $schemaDiagnostic['expected_db_version'] = $dbExpectedSchema['db_version'];\n                foreach($dbActualSchema['schema'] as $tableName => $tableMetas) {\n                    foreach($tableMetas as $tableMeta) {\n                        $schemaDiagnostic['columnPerTable'][$tableName][] = $tableMeta['column_name'];\n                    }\n                }\n                $schemaDiagnostic['indexes'] = $dbActualSchema['indexes'];\n            } else {\n                $schemaDiagnostic['error'] = sprintf('Diagnostic not available as the expected schema file could not be loaded');\n            }\n        } else {\n            $schemaDiagnostic['error'] = sprintf('Diagnostic not available for DataSource `%s`', $dataSource);\n        }\n        if (!empty($schemaDiagnostic['diagnostic'])) {\n            foreach ($schemaDiagnostic['diagnostic'] as $table => &$fields) {\n                foreach ($fields as &$field) {\n                    $field = $this->__attachRecoveryQuery($field, $table);\n                }\n            }\n        }\n        return $schemaDiagnostic;\n    }\n\n    /*\n     * Work in progress, still needs DEFAULT in the schema for it to work correctly\n     * Currently only works for missing_column and column_different\n     * Only currently supported field types are: int, tinyint, varchar, text\n     */\n    private function __attachRecoveryQuery($field, $table)\n    {\n        if (isset($field['error_type'])) {\n            $length = false;\n            if (in_array($field['error_type'], array('missing_column', 'column_different'))) {\n                if ($field['expected']['data_type'] === 'int') {\n                    $length = 11;\n                } elseif ($field['expected']['data_type'] === 'tinyint') {\n                    $length = 1;\n                } elseif ($field['expected']['data_type'] === 'varchar') {\n                    $length = $field['expected']['character_maximum_length'];\n                } elseif ($field['expected']['data_type'] === 'text') {\n                    $length = null;\n                }\n            }\n            if ($length !== false) {\n                switch($field['error_type']) {\n                    case 'missing_column':\n                        $field['sql'] = sprintf(\n                            'ALTER TABLE `%s` ADD COLUMN `%s` %s%s %s %s %s;',\n                            $table,\n                            $field['column_name'],\n                            $field['expected']['data_type'],\n                            $length !== null ? sprintf('(%d)', $length) : '',\n                            isset($field['expected']['column_default']) ? $field['expected']['column_default'] . '\"' : '',\n                            $field['expected']['is_nullable'] === 'NO' ? 'NOT NULL' : 'NULL',\n                            empty($field['expected']['collation_name']) ? '' : 'COLLATE ' . $field['expected']['collation_name']\n                        );\n                        break;\n                    case 'column_different':\n                        $field['sql'] = sprintf(\n                            'ALTER TABLE `%s` MODIFY COLUMN `%s` %s%s %s %s %s;',\n                            $table,\n                            $field['column_name'],\n                            $field['expected']['data_type'],\n                            $length !== null ? sprintf('(%d)', $length) : '',\n                            isset($field['expected']['column_default']) ? 'DEFAULT \"' . $field['expected']['column_default'] . '\"' : '',\n                            $field['expected']['is_nullable'] === 'NO' ? 'NOT NULL' : 'NULL',\n                            empty($field['expected']['collation_name']) ? '' : 'COLLATE ' . $field['expected']['collation_name']\n                        );\n                        break;\n                }\n            } elseif($field['error_type'] == 'missing_table') {\n                $allFields = array();\n                foreach ($field['expected_table'] as $expectedField) {\n                    $length = false;\n                    if ($expectedField['data_type'] === 'int') {\n                        $length = 11;\n                    } elseif ($expectedField['data_type'] === 'tinyint') {\n                        $length = 1;\n                    } elseif ($expectedField['data_type'] === 'varchar') {\n                        $length = $expectedField['character_maximum_length'];\n                    } elseif ($expectedField['data_type'] === 'text') {\n                        $length = null;\n                    }\n                    $fieldSql = sprintf('`%s` %s%s %s %s %s',\n                        $expectedField['column_name'],\n                        $expectedField['data_type'],\n                        $length !== null ? sprintf('(%d)', $length) : '',\n                        isset($expectedField['column_default']) ? 'DEFAULT \"' . $expectedField['column_default'] . '\"' : '',\n                        $expectedField['is_nullable'] === 'NO' ? 'NOT NULL' : 'NULL',\n                        empty($expectedField['collation_name']) ? '' : 'COLLATE ' . $expectedField['collation_name']\n                    );\n                    $allFields[] = $fieldSql;\n                }\n                $field['sql'] = __(\"% The command below is a suggestion and might be incorrect. Please ask if you are not sure what you are doing.\") . \"</br></br>\" . sprintf(\n                    \"CREATE TABLE IF NOT EXISTS `%s` ( %s ) ENGINE=InnoDB DEFAULT CHARSET=utf8 COLLATE=utf8_bin;\",\n                        $table,\n                        implode(', ', $allFields)\n                );\n            }\n        }\n        return $field;\n    }\n\n    public function getExpectedDBSchema()\n    {\n        App::uses('Folder', 'Utility');\n        $file = new File(ROOT . DS . 'db_schema.json', true);\n        $dbExpectedSchema = json_decode($file->read(), true);\n        $file->close();\n        if (!is_null($dbExpectedSchema)) {\n            return $dbExpectedSchema;\n        } else {\n            return false;\n        }\n    }\n\n    // TODO: Use CakePHP 3.X's Schema System\n    /*\n        $db = ConnectionManager::get('default');\n\n        // Create a schema collection.\n        $collection = $db->schemaCollection();\n\n        // Get the table names\n        $tables = $collection->listTables();\n\n        // Get a single table (instance of Schema\\TableSchema)\n        $tableSchema = $collection->describe('posts');\n\n    */\n    public function getActualDBSchema(\n        $tableColumnNames = array(\n            'column_name',\n            'is_nullable',\n            'data_type',\n            'character_maximum_length',\n            'numeric_precision',\n            // 'datetime_precision',    -- Only available on MySQL 5.6+\n            'collation_name',\n            'column_default'\n        )\n    ){\n        $dbActualSchema = array();\n        $dbActualIndexes = array();\n        $dataSource = $this->getDataSource()->config['datasource'];\n        if ($dataSource == 'Database/Mysql') {\n            $sqlGetTable = sprintf('SELECT TABLE_NAME FROM information_schema.tables WHERE table_schema = %s;', \"'\" . $this->getDataSource()->config['database'] . \"'\");\n            $sqlResult = $this->query($sqlGetTable);\n            $tables = HASH::extract($sqlResult, '{n}.tables.TABLE_NAME');\n            foreach ($tables as $table) {\n                $sqlSchema = sprintf(\n                    \"SELECT %s\n                    FROM information_schema.columns\n                    WHERE table_schema = '%s' AND TABLE_NAME = '%s'\", implode(',', $tableColumnNames), $this->getDataSource()->config['database'], $table);\n                $sqlResult = $this->query($sqlSchema);\n                foreach ($sqlResult as $column_schema) {\n                    $column_schema['columns'] = array_change_key_case($column_schema['columns'],CASE_LOWER);\n                    $dbActualSchema[$table][] = $column_schema['columns'];\n                }\n                $dbActualIndexes[$table] = $this->getDatabaseIndexes($this->getDataSource()->config['database'], $table);\n            }\n        }\n        else if ($dataSource == 'Database/Postgres') {\n            return array('Database/Postgres' => array('description' => __('Can\\'t check database schema for Postgres database type')));\n        }\n        return array('schema' => $dbActualSchema, 'column' => $tableColumnNames, 'indexes' => $dbActualIndexes);\n    }\n\n    public function compareDBSchema($dbActualSchema, $dbExpectedSchema)\n    {\n        // Column that should be ignored while performing the comparison\n        $whiteListFields = array(\n            'users' => array('external_auth_required', 'external_auth_key'),\n        );\n        $nonCriticalColumnElements = array('is_nullable', 'collation_name');\n        $dbDiff = array();\n        // perform schema comparison for tables\n        foreach($dbExpectedSchema as $tableName => $columns) {\n            if (!array_key_exists($tableName, $dbActualSchema)) {\n                $dbDiff[$tableName][] = array(\n                    'description' => sprintf(__('Table `%s` does not exist'), $tableName),\n                    'error_type' => 'missing_table',\n                    'expected_table' => $columns,\n                    'column_name' => $tableName,\n                    'is_critical' => true\n                );\n            } else {\n                // perform schema comparison for table's columns\n                $expectedColumnKeys = array();\n                $keyedExpectedColumn = array();\n                foreach($columns as $column) {\n                    $expectedColumnKeys[] = $column['column_name'];\n                    $keyedExpectedColumn[$column['column_name']] = $column;\n                }\n                $existingColumnKeys = array();\n                $keyedActualColumn = array();\n                foreach($dbActualSchema[$tableName] as $column) {\n                    $existingColumnKeys[] = $column['column_name'];\n                    $keyedActualColumn[$column['column_name']] = $column;\n                }\n\n                $additionalKeysInActualSchema = array_diff($existingColumnKeys, $expectedColumnKeys);\n                foreach($additionalKeysInActualSchema as $additionalKeys) {\n                    if (isset($whiteListFields[$tableName]) && in_array($additionalKeys, $whiteListFields[$tableName])) {\n                        continue; // column is whitelisted\n                    }\n                    $dbDiff[$tableName][] = array(\n                        'description' => sprintf(__('Column `%s` exists but should not'), $additionalKeys),\n                        'error_type' => 'additional_column',\n                        'column_name' => $additionalKeys,\n                        'is_critical' => false\n                    );\n                }\n                foreach ($keyedExpectedColumn as $columnName => $column) {\n                    if (isset($whiteListFields[$tableName]) && in_array($columnName, $whiteListFields[$tableName])) {\n                        continue; // column is whitelisted\n                    }\n                    if (isset($keyedActualColumn[$columnName])) {\n                        $colDiff = array_diff_assoc($column, $keyedActualColumn[$columnName]);\n                        if (count($colDiff) > 0) {\n                            $colElementDiffs = array_keys(array_diff_assoc($column, $keyedActualColumn[$columnName]));\n                            $isCritical = false;\n                            foreach($colElementDiffs as $colElementDiff) {\n                                if(!in_array($colElementDiff, $nonCriticalColumnElements)) {\n                                    if ($colElementDiff == 'column_default') {\n                                        $expectedValue = $column['column_default'];\n                                        $actualValue = $keyedActualColumn[$columnName]['column_default'];\n                                        if (preg_match(sprintf('@(\\'|\")+%s(\\1)+@', $expectedValue), $actualValue) || (empty($expectedValue) && $actualValue === 'NULL')) { // some version of mysql quote the default value\n                                            continue;\n                                        } else {\n                                            $isCritical = true;\n                                            break;\n                                        }\n                                    } else {\n                                        $isCritical = true;\n                                        break;\n                                    }\n                                }\n                            }\n                            $dbDiff[$tableName][] = array(\n                                'description' => sprintf(__('Column `%s` is different'), $columnName),\n                                'column_name' => $column['column_name'],\n                                'error_type' => 'column_different',\n                                'actual' => $keyedActualColumn[$columnName],\n                                'expected' => $column,\n                                'is_critical' => $isCritical\n                            );\n                        }\n                    } else {\n                        $dbDiff[$tableName][] = array(\n                            'description' => sprintf(__('Column `%s` does not exist but should'), $columnName),\n                            'column_name' => $columnName,\n                            'error_type' => 'missing_column',\n                            'actual' => array(),\n                            'expected' => $column,\n                            'is_critical' => true\n                        );\n                    }\n                }\n            }\n        }\n        foreach(array_diff(array_keys($dbActualSchema), array_keys($dbExpectedSchema)) as $additionalTable) {\n            $dbDiff[$additionalTable][] = array(\n                'description' => sprintf(__('Table `%s` is an additional table'), $additionalTable),\n                'column_name' => $additionalTable,\n                'error_type' => 'additional_table',\n                'is_critical' => false\n            );\n        }\n        return $dbDiff;\n    }\n\n    public function compareDBIndexes($actualIndex, $expectedIndex, $dbExpectedSchema)\n    {\n        $defaultIndexKeylength = 255;\n        $whitelistTables = array();\n        $indexDiff = array();\n        foreach($expectedIndex as $tableName => $indexes) {\n            if (!array_key_exists($tableName, $actualIndex)) {\n                continue; // If table does not exists, it is covered by the schema diagnostic\n            } elseif(in_array($tableName, $whitelistTables)) {\n                continue; // Ignore whitelisted tables\n            } else {\n                $tableIndexDiff = array_diff($indexes, $actualIndex[$tableName]); // check for missing indexes\n                if (count($tableIndexDiff) > 0) {\n                    foreach($tableIndexDiff as $columnDiff) {\n                        $columnData  = Hash::extract($dbExpectedSchema['schema'][$tableName], sprintf('{n}[column_name=%s]', $columnDiff))[0];\n                        $message = sprintf(__('Column `%s` should be indexed'), $columnDiff);\n                        if ($columnData['data_type'] == 'varchar') {\n                            $keyLength = sprintf('(%s)', $columnData['character_maximum_length'] < $defaultIndexKeylength ? $columnData['character_maximum_length'] : $defaultIndexKeylength);\n                        } elseif ($columnData['data_type'] == 'text') {\n                            $keyLength = sprintf('(%s)', $defaultIndexKeylength);\n                        } else {\n                            $keyLength = '';\n                        }\n                        $sql = sprintf('CREATE INDEX `%s` ON `%s` (%s%s);',\n                            $columnDiff,\n                            $tableName,\n                            $columnDiff,\n                            $keyLength\n                        );\n                        $indexDiff[$tableName][$columnDiff] = array(\n                            'message' => $message,\n                            'sql' => $sql\n                        );\n                    }\n                }\n                $tableIndexDiff = array_diff($actualIndex[$tableName], $indexes); // check for additional indexes\n                if (count($tableIndexDiff) > 0) {\n                    foreach($tableIndexDiff as $columnDiff) {\n                        $message = sprintf(__('Column `%s` is indexed but should not'), $columnDiff);\n                        $sql = sprintf('DROP INDEX `%s` ON %s;',\n                            $columnDiff,\n                            $tableName\n                        );\n                        $indexDiff[$tableName][$columnDiff] = array(\n                            'message' => $message,\n                            'sql' => $sql\n                        );\n                    }\n                }\n            }\n        }\n        return $indexDiff;\n    }\n\n    public function getDatabaseIndexes($database, $table)\n    {\n        $sqlTableIndex = sprintf(\n            \"SELECT DISTINCT TABLE_NAME, COLUMN_NAME FROM information_schema.statistics WHERE TABLE_SCHEMA = '%s' AND TABLE_NAME = '%s';\",\n            $database,\n            $table\n        );\n        $sqlTableIndexResult = $this->query($sqlTableIndex);\n        $tableIndex = Hash::extract($sqlTableIndexResult, '{n}.statistics.COLUMN_NAME');\n        return $tableIndex;\n    }\n\n    public function writeableDirsDiagnostics(&$diagnostic_errors)\n    {\n        App::uses('File', 'Utility');\n        App::uses('Folder', 'Utility');\n        // check writeable directories\n        $writeableDirs = array(\n                '/tmp' => 0,\n                APP . 'tmp' => 0,\n                APP . 'files' => 0,\n                APP . 'files' . DS . 'scripts' . DS . 'tmp' => 0,\n                APP . 'tmp' . DS . 'csv_all' => 0,\n                APP . 'tmp' . DS . 'csv_sig' => 0,\n                APP . 'tmp' . DS . 'md5' => 0,\n                APP . 'tmp' . DS . 'sha1' => 0,\n                APP . 'tmp' . DS . 'snort' => 0,\n                APP . 'tmp' . DS . 'suricata' => 0,\n                APP . 'tmp' . DS . 'text' => 0,\n                APP . 'tmp' . DS . 'xml' => 0,\n                APP . 'tmp' . DS . 'files' => 0,\n                APP . 'tmp' . DS . 'logs' => 0,\n                APP . 'tmp' . DS . 'bro' => 0,\n        );\n        foreach ($writeableDirs as $path => &$error) {\n            $dir = new Folder($path);\n            if (is_null($dir->path)) {\n                $error = 1;\n            }\n            $file = new File($path . DS . 'test.txt', true);\n            if ($error == 0 && !$file->write('test')) {\n                $error = 2;\n            }\n            if ($error != 0) {\n                $diagnostic_errors++;\n            }\n            $file->delete();\n            $file->close();\n        }\n        return $writeableDirs;\n    }\n\n    public function writeableFilesDiagnostics(&$diagnostic_errors)\n    {\n        $writeableFiles = array(\n                APP . 'Config' . DS . 'config.php' => 0,\n                ROOT .  DS . '.git' . DS . 'ORIG_HEAD' => 0,\n        );\n        foreach ($writeableFiles as $path => &$error) {\n            if (!file_exists($path)) {\n                $error = 1;\n                continue;\n            }\n            if (!is_writeable($path)) {\n                $error = 2;\n                $diagnostic_errors++;\n            }\n        }\n        return $writeableFiles;\n    }\n\n    public function readableFilesDiagnostics(&$diagnostic_errors)\n    {\n        $readableFiles = array(\n                APP . 'files' . DS . 'scripts' . DS . 'stixtest.py' => 0\n        );\n        foreach ($readableFiles as $path => &$error) {\n            if (!is_readable($path)) {\n                $error = 1;\n                continue;\n            }\n        }\n        return $readableFiles;\n    }\n\n    public function yaraDiagnostics(&$diagnostic_errors)\n    {\n        $scriptResult = shell_exec($this->getPythonVersion() . ' ' . APP . 'files' . DS . 'scripts' . DS . 'yaratest.py');\n        $scriptResult = json_decode($scriptResult, true);\n        return array('operational' => $scriptResult['success'], 'plyara' => $scriptResult['plyara']);\n    }\n\n    public function stixDiagnostics(&$diagnostic_errors, &$stixVersion, &$cyboxVersion, &$mixboxVersion, &$maecVersion, &$stix2Version, &$pymispVersion)\n    {\n        $result = array();\n        $expected = array('stix' => '>1.2.0.6', 'cybox' => '>2.1.0.18.dev0', 'mixbox' => '1.0.3', 'maec' => '>4.1.0.14', 'stix2' => '>1.2.0', 'pymisp' => '>2.4.120');\n        // check if the STIX and Cybox libraries are working using the test script stixtest.py\n        $scriptResult = shell_exec($this->getPythonVersion() . ' ' . APP . 'files' . DS . 'scripts' . DS . 'stixtest.py');\n        $scriptResult = json_decode($scriptResult, true);\n        if ($scriptResult == null) {\n            return array('operational' => 0, 'stix' => array('expected' => $expected['stix']), 'cybox' => array('expected' => $expected['cybox']), 'mixbox' => array('expected' => $expected['mixbox']), 'maec' => array('expected' => $expected['maec']), 'stix2' => array('expected' => $expected['stix2']), 'pymisp' => array('expected' => $expected['pymisp']));\n        }\n        $scriptResult['operational'] = $scriptResult['success'];\n        if ($scriptResult['operational'] == 0) {\n            $diagnostic_errors++;\n        }\n        $result['operational'] = $scriptResult['operational'];\n        foreach ($expected as $package => $version) {\n            $result[$package]['version'] = $scriptResult[$package];\n            $result[$package]['expected'] = $expected[$package];\n            if ($expected[$package][0] === '>') {\n                $expected[$package] = trim($expected[$package], '>');\n                $result[$package]['status'] = (version_compare($result[$package]['version'], $expected[$package]) >= 0) ? 1 : 0;\n            } else {\n                $result[$package]['status'] = $result[$package]['version'] == $result[$package]['expected'] ? 1 : 0;\n            }\n            if ($result[$package]['status'] == 0) {\n                $diagnostic_errors++;\n            }\n            ${$package . 'Version'}[0] = str_replace('$current', $result[$package]['version'], ${$package . 'Version'}[0]);\n            ${$package . 'Version'}[0] = str_replace('$expected', $result[$package]['expected'], ${$package . 'Version'}[0]);\n        }\n        return $result;\n    }\n\n    public function gpgDiagnostics(&$diagnostic_errors)\n    {\n        $gpgStatus = 0;\n        if (Configure::read('GnuPG.email') && Configure::read('GnuPG.homedir')) {\n            $continue = true;\n            try {\n                if (!class_exists('Crypt_GPG')) {\n                    if (!stream_resolve_include_path('Crypt/GPG.php')) {\n                        throw new Exception(\"Crypt_GPG is not installed\");\n                    }\n                    require_once 'Crypt/GPG.php';\n                }\n                $gpg = new Crypt_GPG(array(\n                    'homedir' => Configure::read('GnuPG.homedir'),\n                    'gpgconf' => Configure::read('GnuPG.gpgconf'),\n                    'binary' => Configure::read('GnuPG.binary') ?: '/usr/bin/gpg'\n                ));\n            } catch (Exception $e) {\n                $this->logException(\"Error during initializing GPG.\", $e, LOG_NOTICE);\n                $gpgStatus = 2;\n                $continue = false;\n            }\n            if ($continue) {\n                try {\n                    $key = $gpg->addSignKey(Configure::read('GnuPG.email'), Configure::read('GnuPG.password'));\n                } catch (Exception $e) {\n                    $this->logException(\"Error during adding GPG signing key.\", $e, LOG_NOTICE);\n                    $gpgStatus = 3;\n                    $continue = false;\n                }\n            }\n            if ($continue) {\n                try {\n                    $gpgStatus = 0;\n                    $signed = $gpg->sign('test', Crypt_GPG::SIGN_MODE_CLEAR);\n                } catch (Exception $e) {\n                    $this->logException(\"Error during GPG signing.\", $e, LOG_NOTICE);\n                    $gpgStatus = 4;\n                }\n            }\n        } else {\n            $gpgStatus = 1;\n        }\n        if ($gpgStatus != 0) {\n            $diagnostic_errors++;\n        }\n        return $gpgStatus;\n    }\n\n    public function zmqDiagnostics(&$diagnostic_errors)\n    {\n        if (!Configure::read('Plugin.ZeroMQ_enable')) {\n            return 1;\n        }\n        $pubSubTool = $this->getPubSubTool();\n        if (!$pubSubTool->checkIfPythonLibInstalled()) {\n            $diagnostic_errors++;\n            return 2;\n        }\n        if ($pubSubTool->checkIfRunning()) {\n            return 0;\n        }\n        $diagnostic_errors++;\n        return 3;\n    }\n\n    public function moduleDiagnostics(&$diagnostic_errors, $type = 'Enrichment')\n    {\n        $this->Module = ClassRegistry::init('Module');\n        $types = array('Enrichment', 'Import', 'Export', 'Cortex');\n        $diagnostic_errors++;\n        if (Configure::read('Plugin.' . $type . '_services_enable')) {\n            $exception = false;\n            $result = $this->Module->getModules(false, $type, $exception);\n            if ($exception) {\n                return $exception;\n            }\n            if (empty($result)) {\n                return 2;\n            }\n            $diagnostic_errors--;\n            return 0;\n        }\n        return 1;\n    }\n\n    public function proxyDiagnostics(&$diagnostic_errors)\n    {\n        $proxyStatus = 0;\n        $proxy = Configure::read('Proxy');\n        if (!empty($proxy['host'])) {\n            App::uses('SyncTool', 'Tools');\n            $syncTool = new SyncTool();\n            try {\n                $HttpSocket = $syncTool->setupHttpSocket();\n                $proxyResponse = $HttpSocket->get('https://www.github.com/');\n            } catch (Exception $e) {\n                $proxyStatus = 2;\n            }\n            if (empty($proxyResponse) || $proxyResponse->code > 399) {\n                $proxyStatus = 2;\n            }\n        } else {\n            $proxyStatus = 1;\n        }\n        if ($proxyStatus > 1) {\n            $diagnostic_errors++;\n        }\n        return $proxyStatus;\n    }\n\n    public function sessionDiagnostics(&$diagnostic_errors = 0, &$sessionCount = '')\n    {\n        if (Configure::read('Session.defaults') !== 'database') {\n            $sessionCount = 'N/A';\n            return 2;\n        }\n        $sql = 'SELECT COUNT(id) AS session_count FROM cake_sessions WHERE expires < ' . time() . ';';\n        $sqlResult = $this->query($sql);\n        if (isset($sqlResult[0][0])) {\n            $sessionCount = $sqlResult[0][0]['session_count'];\n        } else {\n            $sessionCount = 'Error';\n            return 3;\n        }\n        if ($sessionCount > 1000) {\n            $diagnostic_errors++;\n            return 1;\n        }\n        return 0;\n    }\n\n    public function workerDiagnostics(&$workerIssueCount)\n    {\n        try {\n            $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        } catch (Exception $e) {\n            // redis connection failed\n            return array(\n                    'cache' => array('ok' => false),\n                    'default' => array('ok' => false),\n                    'email' => array('ok' => false),\n                    'prio' => array('ok' => false),\n                    'update' => array('ok' => false),\n                    'scheduler' => array('ok' => false)\n            );\n        }\n        $workers = $this->ResqueStatus->getWorkers();\n        if (function_exists('posix_getpwuid')) {\n            $currentUser = posix_getpwuid(posix_geteuid());\n            $currentUser = $currentUser['name'];\n        } else {\n            $currentUser = trim(shell_exec('whoami'));\n        }\n        $worker_array = array(\n                'cache' => array('ok' => true),\n                'default' => array('ok' => true),\n                'email' => array('ok' => true),\n                'prio' => array('ok' => true),\n                'update' => array('ok' => true),\n                'scheduler' => array('ok' => true)\n        );\n        $procAccessible = file_exists('/proc');\n        foreach ($workers as $pid => $worker) {\n            $entry = ($worker['type'] == 'regular') ? $worker['queue'] : $worker['type'];\n            $correct_user = ($currentUser === $worker['user']);\n            if (!is_numeric($pid)) {\n                throw new MethodNotAllowedException('Non numeric PID found.');\n            }\n            if ($procAccessible) {\n                $alive = $correct_user ? (file_exists('/proc/' . addslashes($pid))) : false;\n            } else {\n                $alive = 'N/A';\n            }\n            $ok = true;\n            if (!$alive || !$correct_user) {\n                $ok = false;\n                $workerIssueCount++;\n            }\n            $worker_array[$entry]['workers'][] = array('pid' => $pid, 'user' => $worker['user'], 'alive' => $alive, 'correct_user' => $correct_user, 'ok' => $ok);\n        }\n        foreach ($worker_array as $k => $queue) {\n            if (isset($worker_array[$k]['workers'])) {\n                foreach($worker_array[$k]['workers'] as $worker) {\n                    if ($worker['ok']) {\n                        $worker_array[$k]['ok'] = true; // If at least one worker is up, the queue can be considered working\n                    }\n                }\n            }\n            if ($k != 'scheduler') {\n                $worker_array[$k]['jobCount'] = CakeResque::getQueueSize($k);\n            }\n            if (!isset($queue['workers'])) {\n                $workerIssueCount++;\n                $worker_array[$k]['ok'] = false;\n            }\n        }\n        $worker_array['proc_accessible'] = $procAccessible;\n        $worker_array['controls'] = 1;\n        if (Configure::check('MISP.manage_workers')) {\n            $worker_array['controls'] = Configure::read('MISP.manage_workers');\n        }\n        return $worker_array;\n    }\n\n    public function retrieveCurrentSettings($branch, $subString)\n    {\n        $settings = array();\n        foreach ($this->serverSettings[$branch] as $settingName => $setting) {\n            if (strpos($settingName, $subString) !== false) {\n                $settings[$settingName] = $setting['value'];\n                if (Configure::read('Plugin.' . $settingName)) {\n                    $settings[$settingName] = Configure::read('Plugin.' . $settingName);\n                }\n                if (isset($setting['options'])) {\n                    $settings[$settingName] = $setting['options'][$settings[$settingName]];\n                }\n            }\n        }\n        return $settings;\n    }\n\n    public function killWorker($pid, $user)\n    {\n        if (!is_numeric($pid)) {\n            throw new MethodNotAllowedException('Non numeric PID found!');\n        }\n        $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        $workers = $this->ResqueStatus->getWorkers();\n        $this->Log = ClassRegistry::init('Log');\n        if (isset($workers[$pid])) {\n            $worker = $workers[$pid];\n            if (substr_count(trim(shell_exec('ps -p ' . $pid)), PHP_EOL) > 0 ? true : false) {\n                shell_exec('kill ' . $pid . ' > /dev/null 2>&1 &');\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], false);\n            } else {\n                $this->ResqueStatus->removeWorker($pid);\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], true);\n            }\n            $this->ResqueStatus->removeWorker($pid);\n        }\n    }\n\n    public function workerRemoveDead($user = false)\n    {\n        $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n        $workers = $this->ResqueStatus->getWorkers();\n        if (function_exists('posix_getpwuid')) {\n            $currentUser = posix_getpwuid(posix_geteuid());\n            $currentUser = $currentUser['name'];\n        } else {\n            $currentUser = trim(shell_exec('whoami'));\n        }\n        $killed = array();\n        foreach ($workers as $pid => $worker) {\n            if (!is_numeric($pid)) {\n                throw new MethodNotAllowedException('Non numeric PID found!');\n            }\n            $pidTest = substr_count(trim(shell_exec('ps -p ' . $pid)), PHP_EOL) > 0 ? true : false;\n            if ($worker['user'] == $currentUser && !$pidTest) {\n                $this->ResqueStatus->removeWorker($pid);\n                $this->__logRemoveWorker($user, $pid, $worker['queue'], true);\n                if (empty($killed[$worker['queue']])) {\n                    $killed[$worker['queue']] = 1;\n                } else {\n                    $killed[$worker['queue']] += 1;\n                }\n            }\n        }\n        return $killed;\n    }\n\n    private function __logRemoveWorker($user, $pid, $queue, $dead = false)\n    {\n        $this->Log = ClassRegistry::init('Log');\n        $this->Log->create();\n        if (empty($user)) {\n            $user = array(\n                'id' => 0,\n                'Organisation' => array(\n                    'name' => 'SYSTEM'\n                ),\n                'email' => 'SYSTEM'\n            );\n        }\n        $type = $dead ? 'dead' : 'kill';\n        $text = array(\n            'dead' => array(\n                'action' => 'remove_dead_workers',\n                'title' => __('Removing a dead worker.'),\n                'change' => sprintf(__('Removing dead worker data. Worker was of type %s with pid %s'), $queue, $pid)\n            ),\n            'kill' => array(\n                'action' => 'stop_worker',\n                'title' => __('Stopping a worker.'),\n                'change' => sprintf(__('Stopping a worker. Worker was of type %s with pid %s'), $queue, $pid)\n            )\n        );\n        $this->Log->save(array(\n            'org' => $user['Organisation']['name'],\n            'model' => 'User',\n            'model_id' => $user['id'],\n            'email' => $user['email'],\n            'action' => $text[$type]['action'],\n            'user_id' => $user['id'],\n            'title' => $text[$type]['title'],\n            'change' => $text[$type]['change']\n        ));\n    }\n\n    /* returns the version string of a connected instance\n     * error codes:\n     * 1: received non json response\n     * 2: no route to host\n     * 3: empty result set\n     */\n    public function getRemoteVersion($id)\n    {\n        $server = $this->find('first', array(\n                'conditions' => array('Server.id' => $id),\n        ));\n        if (empty($server)) {\n            return 2;\n        }\n        App::uses('SyncTool', 'Tools');\n        $syncTool = new SyncTool();\n        $HttpSocket = $syncTool->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $response = $HttpSocket->get($server['Server']['url'] . '/servers/getVersion', $data = '', $request);\n        if ($response->code == 200) {\n            try {\n                $data = json_decode($response->body, true);\n            } catch (Exception $e) {\n                return 1;\n            }\n            if (isset($data['version']) && !empty($data['version'])) {\n                return $data['version'];\n            } else {\n                return 3;\n            }\n        }\n        return 2;\n    }\n\n    /**\n     * Returns an array with the events\n     * @param int $id\n     * @param $user - not used\n     * @param array $passedArgs\n     * @return array\n     * @throws Exception\n     */\n    public function previewIndex($id, $user, array $passedArgs)\n    {\n        $validArgs = array_merge(array('sort', 'direction', 'page', 'limit'), $this->validEventIndexFilters);\n        $urlParams = '';\n        foreach ($validArgs as $v) {\n            if (isset($passedArgs[$v])) {\n                $urlParams .= '/' . $v . ':' . $passedArgs[$v];\n            }\n        }\n\n        $relativeUri = '/events/index' . $urlParams;\n        list($events, $response) = $this->serverGetRequest($id, $relativeUri);\n        $totalCount = $response->getHeader('X-Result-Count') ?: 0;\n\n        foreach ($events as $k => $event) {\n            if (!isset($event['Orgc'])) {\n                $event['Orgc']['name'] = $event['orgc'];\n            }\n            if (!isset($event['Org'])) {\n                $event['Org']['name'] = $event['org'];\n            }\n            if (!isset($event['EventTag'])) {\n                $event['EventTag'] = array();\n            }\n            $events[$k] = array('Event' => $event);\n        }\n\n        return array($events, $totalCount);\n    }\n\n    /**\n     * Returns an array with the event.\n     * @param int $serverId\n     * @param int $eventId\n     * @return array\n     * @throws Exception\n     */\n    public function previewEvent($serverId, $eventId)\n    {\n        $relativeUri =  '/events/' . $eventId;\n        list($event) = $this->serverGetRequest($serverId, $relativeUri);\n\n        if (!isset($event['Event']['Orgc'])) {\n            $event['Event']['Orgc']['name'] = $event['Event']['orgc'];\n        }\n        if (isset($event['Event']['Orgc'][0])) {\n            $event['Event']['Orgc'] = $event['Event']['Orgc'][0];\n        }\n        if (!isset($event['Event']['Org'])) {\n            $event['Event']['Org']['name'] = $event['Event']['org'];\n        }\n        if (isset($event['Event']['Org'][0])) {\n            $event['Event']['Org'] = $event['Event']['Org'][0];\n        }\n        if (!isset($event['Event']['EventTag'])) {\n            $event['Event']['EventTag'] = array();\n        }\n\n        return $event;\n    }\n\n    // Loops through all servers and checks which servers' push rules don't conflict with the given event.\n    // returns the server objects that would allow the event to be pushed\n    public function eventFilterPushableServers($event, $servers)\n    {\n        $eventTags = array();\n        $validServers = array();\n        foreach ($event['EventTag'] as $tag) {\n            $eventTags[] = $tag['tag_id'];\n        }\n        foreach ($servers as $server) {\n            $push_rules = json_decode($server['Server']['push_rules'], true);\n            if (!empty($push_rules['tags']['OR'])) {\n                $intersection = array_intersect($push_rules['tags']['OR'], $eventTags);\n                if (empty($intersection)) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['tags']['NOT'])) {\n                $intersection = array_intersect($push_rules['tags']['NOT'], $eventTags);\n                if (!empty($intersection)) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['orgs']['OR'])) {\n                if (!in_array($event['Event']['orgc_id'], $push_rules['orgs']['OR'])) {\n                    continue;\n                }\n            }\n            if (!empty($push_rules['orgs']['NOT'])) {\n                if (in_array($event['Event']['orgc_id'], $push_rules['orgs']['NOT'])) {\n                    continue;\n                }\n            }\n            $validServers[] = $server;\n        }\n        return $validServers;\n    }\n\n    public function extensionDiagnostics()\n    {\n        $results = array();\n        $extensions = array('redis', 'gd', 'ssdeep');\n        foreach ($extensions as $extension) {\n            $results['web']['extensions'][$extension] = extension_loaded($extension);\n        }\n        if (!is_readable(APP . '/files/scripts/selftest.php')) {\n            $results['cli'] = false;\n        } else {\n            $execResult = exec('php ' . APP . '/files/scripts/selftest.php');\n            $results['cli'] = json_decode($execResult, true);\n        }\n        return $results;\n    }\n\n    public function databaseEncodingDiagnostics(&$diagnostic_errors)\n    {\n        if (!isset($this->getDataSource()->config['encoding']) || strtolower($this->getDataSource()->config['encoding']) != 'utf8') {\n            $diagnostic_errors++;\n            return false;\n        }\n        return true;\n    }\n\n    public function getLatestGitRemote()\n    {\n        return exec('timeout 3 git ls-remote https://github.com/MISP/MISP | head -1 | sed \"s/HEAD//\"');\n    }\n\n    public function getCurrentGitStatus()\n    {\n        $status = array();\n        $status['commit'] = exec('git rev-parse HEAD');\n        $status['branch'] = $this->getCurrentBranch();\n        $status['latestCommit'] = $this->getLatestGitremote();\n        return $status;\n    }\n\n    public function getCurrentBranch()\n    {\n        return exec(\"git symbolic-ref HEAD | sed 's!refs\\/heads\\/!!'\");\n    }\n\n    public function checkoutMain()\n    {\n        $mainBranch = '2.4';\n        return exec('git checkout ' . $mainBranch);\n    }\n\n    public function getSubmodulesGitStatus()\n    {\n        exec('cd ' . APP . '../; git submodule status --cached | grep -v ^- | cut -b 2- | cut -d \" \" -f 1,2 ', $submodules_names);\n        $status = array();\n        foreach ($submodules_names as $submodule_name_info) {\n            $submodule_name_info = explode(' ', $submodule_name_info);\n            $superproject_submodule_commit_id = $submodule_name_info[0];\n            $submodule_name = $submodule_name_info[1];\n            $temp = $this->getSubmoduleGitStatus($submodule_name, $superproject_submodule_commit_id);\n            if ( !empty($temp) ) {\n                $status[$submodule_name] = $temp;\n            }\n        }\n        return $status;\n    }\n\n    private function _isAcceptedSubmodule($submodule) {\n        $accepted_submodules_names = array('PyMISP',\n            'app/files/misp-galaxy',\n            'app/files/taxonomies',\n            'app/files/misp-objects',\n            'app/files/noticelists',\n            'app/files/warninglists',\n            'app/files/misp-decaying-models',\n            'cti-python-stix2'\n        );\n        return in_array($submodule, $accepted_submodules_names);\n    }\n\n    public function getSubmoduleGitStatus($submodule_name, $superproject_submodule_commit_id) {\n        $status = array();\n        if ($this->_isAcceptedSubmodule($submodule_name)) {\n            $path = APP . '../' . $submodule_name;\n            $submodule_name=(strpos($submodule_name, '/') >= 0 ? explode('/', $submodule_name) : $submodule_name);\n            $submodule_name=end($submodule_name);\n            $submoduleRemote=exec('cd ' . $path . '; git config --get remote.origin.url');\n            exec(sprintf('cd %s; git rev-parse HEAD', $path), $submodule_current_commit_id);\n            if (!empty($submodule_current_commit_id[0])) {\n                $submodule_current_commit_id = $submodule_current_commit_id[0];\n            } else {\n                $submodule_current_commit_id = null;\n            }\n            $status = array(\n                'moduleName' => $submodule_name,\n                'current' => $submodule_current_commit_id,\n                'currentTimestamp' => exec(sprintf('cd %s; git log -1 --pretty=format:%%ct', $path)),\n                'remoteTimestamp' => exec(sprintf('cd %s; git show -s --pretty=format:%%ct %s', $path, $superproject_submodule_commit_id)),\n                'remote' => $superproject_submodule_commit_id,\n                'upToDate' => '',\n                'isReadable' => is_readable($path) && is_readable($path . '/.git'),\n            );\n\n            if (!empty($status['remote'])) {\n                if ($status['remote'] == $status['current']) {\n                    $status['upToDate'] = 'same';\n                } else if ($status['currentTimestamp'] < $status['remoteTimestamp']) {\n                    $status['upToDate'] = 'older';\n                } else {\n                    $status['upToDate'] = 'younger';\n                }\n            } else {\n                $status['upToDate'] = 'error';\n            }\n\n            if ($status['isReadable'] && !empty($status['remoteTimestamp']) && !empty($status['currentTimestamp'])) {\n                $date1 = new DateTime();\n                $date1->setTimestamp($status['remoteTimestamp']);\n                $date2 = new DateTime();\n                $date2->setTimestamp($status['currentTimestamp']);\n                $status['timeDiff'] = $date1->diff($date2);\n            } else {\n                $status['upToDate'] = 'error';\n            }\n        }\n        return $status;\n    }\n\n    public function updateSubmodule($user, $submodule_name=false) {\n        $path = APP . '../';\n        if ($submodule_name == false) {\n            $command = sprintf('cd %s; git submodule update 2>&1', $path);\n            exec($command, $output, $return_code);\n            $output = implode(\"\\n\", $output);\n            $res = array('status' => ($return_code==0 ? true : false), 'output' => $output);\n            if ($return_code == 0) { // update all DB\n                $res = array_merge($res, $this->updateDatabaseAfterPullRouter($submodule_name, $user));\n            }\n        } else if ($this->_isAcceptedSubmodule($submodule_name)) {\n            $command = sprintf('cd %s; git submodule update -- %s 2>&1', $path, $submodule_name);\n            exec($command, $output, $return_code);\n            $output = implode(\"\\n\", $output);\n            $res = array('status' => ($return_code==0 ? true : false), 'output' => $output);\n            if ($return_code == 0) { // update DB if necessary\n                $res = array_merge($res, $this->updateDatabaseAfterPullRouter($submodule_name, $user));\n            }\n        } else {\n            $res = array('status' => false, 'output' => __('Invalid submodule.'), 'job_sent' => false, 'sync_result' => __('unknown'));\n        }\n        return $res;\n    }\n\n    public function updateDatabaseAfterPullRouter($submodule_name, $user) {\n        if (Configure::read('MISP.background_jobs')) {\n            $job = ClassRegistry::init('Job');\n            $job->create();\n            $eventModel = ClassRegistry::init('Event');\n            $data = array(\n                    'worker' => $eventModel->__getPrioWorkerIfPossible(),\n                    'job_type' => __('update_after_pull'),\n                    'job_input' => __('Updating: ' . $submodule_name),\n                    'status' => 0,\n                    'retries' => 0,\n                    'org_id' => $user['org_id'],\n                    'org' => $user['Organisation']['name'],\n                    'message' => 'Update the database after PULLing the submodule(s).',\n            );\n            $job->save($data);\n            $jobId = $job->id;\n            $process_id = CakeResque::enqueue(\n                    'prio',\n                    'AdminShell',\n                    array('updateAfterPull', $submodule_name, $jobId, $user['id']),\n                    true\n            );\n            $job->saveField('process_id', $process_id);\n            return array('job_sent' => true, 'sync_result' => __('unknown'));\n        } else {\n            $result = $this->updateAfterPull($submodule_name, $user['id']);\n            return array('job_sent' => false, 'sync_result' => $result);\n        }\n    }\n\n    public function updateAfterPull($submodule_name, $userId) {\n        $user = $this->User->getAuthUser($userId);\n        $result = array();\n        if ($user['Role']['perm_site_admin']) {\n            $updateAll = empty($submodule_name);\n            if ($submodule_name == 'app/files/misp-galaxy' || $updateAll) {\n                $this->Galaxy = ClassRegistry::init('Galaxy');\n                $result[] = ($this->Galaxy->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/misp-objects' || $updateAll) {\n                $this->ObjectTemplate = ClassRegistry::init('ObjectTemplate');\n                $result[] = ($this->ObjectTemplate->update($user, false, false) ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/noticelists' || $updateAll) {\n                $this->Noticelist = ClassRegistry::init('Noticelist');\n                $result[] = ($this->Noticelist->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/taxonomies' || $updateAll) {\n                $this->Taxonomy = ClassRegistry::init('Taxonomy');\n                $result[] = ($this->Taxonomy->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n            if ($submodule_name == 'app/files/warninglists' || $updateAll) {\n                $this->Warninglist = ClassRegistry::init('Warninglist');\n                $result[] = ($this->Warninglist->update() ? 'Update `' . h($submodule_name) . '` Sucessful.' : 'Update `'. h($submodule_name) . '` failed.') . PHP_EOL;\n            }\n        }\n        return implode('\\n', $result);\n    }\n\n    public function update($status, &$raw = array())\n    {\n        $final = '';\n        $workingDirectoryPrefix = 'cd $(git rev-parse --show-toplevel) && ';\n        $cleanup_commands = array(\n            // (>^-^)> [hacky]\n            $workingDirectoryPrefix . 'git checkout app/composer.json 2>&1'\n        );\n        foreach ($cleanup_commands as $cleanup_command) {\n            $final .= $cleanup_command . \"\\n\\n\";\n            $status = false;\n            exec($cleanup_command, $output, $status);\n            $raw[] = array(\n                'input' => $cleanup_command,\n                'output' => $output,\n                'status' => $status\n            );\n            $final .= implode(\"\\n\", $output) . \"\\n\\n\";\n        }\n        $command1 = $workingDirectoryPrefix . 'git pull origin ' . $status['branch'] . ' 2>&1';\n        $command2 = $workingDirectoryPrefix . 'git submodule update --init --recursive 2>&1';\n        $final .= $command1 . \"\\n\\n\";\n        $status = false;\n        exec($command1, $output, $status);\n        $raw[] = array(\n            'input' => $command1,\n            'output' => $output,\n            'status' => $status\n        );\n        $final .= implode(\"\\n\", $output) . \"\\n\\n=================================\\n\\n\";\n        $output = array();\n        $final .= $command2 . \"\\n\\n\";\n        $status = false;\n        exec($command2, $output, $status);\n        $raw[] = array(\n            'input' => $command2,\n            'output' => $output,\n            'status' => $status\n        );\n        $final .= implode(\"\\n\", $output);\n        return $final;\n    }\n\n    public function fetchServer($id)\n    {\n        if (empty($id)) {\n            return false;\n        }\n        $conditions = array('Server.id' => $id);\n        if (!is_numeric($id)) {\n            $conditions = array('OR' => array(\n                'LOWER(Server.name)' => strtolower($id),\n                'LOWER(Server.url)' => strtolower($id)\n            ));\n        }\n        $server = $this->find('first', array(\n            'conditions' => $conditions,\n            'recursive' => -1\n        ));\n        return (empty($server)) ? false : $server;\n    }\n\n    public function restartWorkers($user=false)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->workerRemoveDead($user);\n            $prepend = '';\n            shell_exec($prepend . APP . 'Console' . DS . 'worker' . DS . 'start.sh > /dev/null 2>&1 &');\n        }\n        return true;\n    }\n\n    public function restartDeadWorkers($user=false)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $killed = $this->workerRemoveDead($user);\n            foreach ($killed as $queue => $count) {\n                for ($i = 0; $i < $count; $i++) {\n                    $this->startWorker($queue);\n                }\n            }\n        }\n        return true;\n    }\n\n    public function restartWorker($pid)\n    {\n        if (Configure::read('MISP.background_jobs')) {\n            $this->ResqueStatus = new ResqueStatus\\ResqueStatus(Resque::redis());\n            $workers = $this->ResqueStatus->getWorkers();\n            $pid = intval($pid);\n            if (!isset($workers[$pid])) {\n                return __('Invalid worker.');\n            }\n            $currentWorker = $workers[$pid];\n            $this->killWorker($pid, false);\n            $this->startWorker($currentWorker['queue']);\n            return true;\n        }\n        return __('Background workers not enabled.');\n    }\n\n    public function startWorker($queue)\n    {\n        $validTypes = array('default', 'email', 'scheduler', 'cache', 'prio', 'update');\n        if (!in_array($queue, $validTypes)) {\n            return __('Invalid worker type.');\n        }\n        if ($queue != 'scheduler') {\n            shell_exec(APP . 'Console' . DS . 'cake CakeResque.CakeResque start --interval 5 --queue ' . $queue .' > /dev/null 2>&1 &');\n        } else {\n            shell_exec(APP . 'Console' . DS . 'cake CakeResque.CakeResque startscheduler -i 5 > /dev/null 2>&1 &');\n        }\n        return true;\n    }\n\n    public function cacheServerInitiator($user, $id = 'all', $jobId = false)\n    {\n        $params = array(\n            'conditions' => array('caching_enabled' => 1),\n            'recursive' => -1\n        );\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return 'Redis not reachable.';\n        }\n        if ($id !== 'all') {\n            $params['conditions']['Server.id'] = $id;\n        } else {\n            $redis->del('misp:server_cache:combined');\n            $redis->del('misp:server_cache:event_uuid_lookup:');\n        }\n        $servers = $this->find('all', $params);\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->id = $jobId;\n            if (!$job->exists()) {\n                $jobId = false;\n            }\n        }\n        foreach ($servers as $k => $server) {\n            $this->__cacheInstance($server, $redis, $jobId);\n            if ($jobId) {\n                $job->saveField('progress', 100 * $k / count($servers));\n                $job->saveField('message', 'Server ' . $server['Server']['id'] . ' cached.');\n            }\n        }\n        return true;\n    }\n\n    private function __cacheInstance($server, $redis, $jobId = false)\n    {\n        $continue = true;\n        $i = 0;\n        if ($jobId) {\n            $job = ClassRegistry::init('Job');\n            $job->id = $jobId;\n        }\n        $redis->del('misp:server_cache:' . $server['Server']['id']);\n        $HttpSocket = null;\n        $HttpSocket = $this->setupHttpSocket($server, $HttpSocket);\n        while ($continue) {\n            $i++;\n            $pipe = $redis->multi(Redis::PIPELINE);\n            $chunk_size = 50000;\n            $data = $this->__getCachedAttributes($server, $HttpSocket, $chunk_size, $i);\n            if (empty(trim($data))) {\n                $continue = false;\n            } else {\n                $data = explode(PHP_EOL, trim($data));\n                foreach ($data as $entry) {\n                    list($value, $uuid) = explode(',', $entry);\n                    if (!empty($value)) {\n                        $redis->sAdd('misp:server_cache:' . $server['Server']['id'], $value);\n                        $redis->sAdd('misp:server_cache:combined', $value);\n                        $redis->sAdd('misp:server_cache:event_uuid_lookup:' . $value, $server['Server']['id'] . '/' . $uuid);\n                    }\n                }\n            }\n            if ($jobId) {\n                $job->saveField('message', 'Server ' . $server['Server']['id'] . ': ' . ((($i -1) * $chunk_size) + count($data)) . ' attributes cached.');\n            }\n            $pipe->exec();\n        }\n        $redis->set('misp:server_cache_timestamp:' . $server['Server']['id'], time());\n        return true;\n    }\n\n    private function __getCachedAttributes($server, $HttpSocket, $chunk_size, $i)\n    {\n        $filter_rules = array(\n            'returnFormat' => 'cache',\n            'includeEventUuid' => 1,\n            'page' => $i,\n            'limit' => $chunk_size\n        );\n        $request = $this->setupSyncRequest($server);\n        try {\n            $response = $HttpSocket->post($server['Server']['url'] . '/attributes/restSearch.json', json_encode($filter_rules), $request);\n        } catch (SocketException $e) {\n            return $e->getMessage();\n        }\n        return $response->body;\n    }\n\n    public function attachServerCacheTimestamps($data)\n    {\n        $redis = $this->setupRedis();\n        if ($redis === false) {\n            return $data;\n        }\n        foreach ($data as $k => $v) {\n            $data[$k]['Server']['cache_timestamp'] = $redis->get('misp:server_cache_timestamp:' . $data[$k]['Server']['id']);\n        }\n        return $data;\n    }\n\n    public function updateJSON()\n    {\n        $toUpdate = array('Galaxy', 'Noticelist', 'Warninglist', 'Taxonomy', 'ObjectTemplate');\n        $results = array();\n        foreach ($toUpdate as $target) {\n            $this->$target = ClassRegistry::init($target);\n            $result = $this->$target->update();\n            $results[$target] = $result === false ? false : true;\n        }\n        return $results;\n    }\n\n    public function resetRemoteAuthKey($id)\n    {\n        $server = $this->find('first', array(\n            'recursive' => -1,\n            'conditions' => array('Server.id' => $id)\n        ));\n        if (empty($server)) {\n            return __('Invalid server');\n        }\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/users/resetauthkey/me';\n        try {\n            $response = $HttpSocket->post($uri, '{}', $request);\n        } catch (Exception $e) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $message = 'Could not reset the remote authentication key.';\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: ' . $message,\n            ));\n            return $message;\n        }\n        if ($response->isOk()) {\n            try {\n                $response = json_decode($response->body, true);\n            } catch (Exception $e) {\n                $this->Log = ClassRegistry::init('Log');\n                $this->Log->create();\n                $message = 'Invalid response received from the remote instance.';\n                $this->Log->save(array(\n                        'org' => 'SYSTEM',\n                        'model' => 'Server',\n                        'model_id' => $id,\n                        'email' => 'SYSTEM',\n                        'action' => 'error',\n                        'user_id' => 0,\n                        'title' => 'Error: ' . $message,\n                ));\n                return $message;\n            }\n            if (!empty($response['message'])) {\n                $authkey = $response['message'];\n            }\n            if (substr($authkey, 0, 17) === 'Authkey updated: ') {\n                $authkey = substr($authkey, 17, 57);\n            }\n            $server['Server']['authkey'] = $authkey;\n            $this->save($server);\n            return true;\n        } else {\n            return __('Could not reset the remote authentication key.');\n        }\n    }\n\n    public function reprioritise($id = false, $direction = 'up')\n    {\n        $servers = $this->find('all', array(\n            'recursive' => -1,\n            'order' => array('Server.priority ASC', 'Server.id ASC')\n        ));\n        $success = true;\n        if ($id) {\n            foreach ($servers as $k => $server) {\n                if ($server['Server']['id'] && $server['Server']['id'] == $id) {\n                    if (\n                        !($k === 0 && $direction === 'up') &&\n                        !(empty($servers[$k+1]) && $direction === 'down')\n                    ) {\n                        $temp = $servers[$k];\n                        $destination = $direction === 'up' ? $k-1 : $k+1;\n                        $servers[$k] = $servers[$destination];\n                        $servers[$destination] = $temp;\n                    } else {\n                        $success = false;\n                    }\n                }\n            }\n        }\n        foreach ($servers as $k => $server) {\n            $server['Server']['priority'] = $k + 1;\n            $result = $this->save($server);\n            $success = $success && $result;\n        }\n        return $success;\n    }\n\n    /**\n     * @param int $serverId\n     * @param string $relativeUri\n     * @param HttpSocket|null $HttpSocket\n     * @return array\n     * @throws Exception\n     */\n    private function serverGetRequest($serverId, $relativeUri, HttpSocket $HttpSocket = null)\n    {\n        $server = $this->find('first', array(\n            'conditions' => array('Server.id' => $serverId),\n        ));\n        if ($server === null) {\n            throw new Exception(__(\"Server with ID '$serverId' not found.\"));\n        }\n\n        if (!$HttpSocket) {\n            $HttpSocket = $this->setupHttpSocket($server);\n        }\n        $request = $this->setupSyncRequest($server);\n\n        $uri = $server['Server']['url'] . $relativeUri;\n        $response = $HttpSocket->get($uri, array(), $request);\n\n        if ($response === false) {\n            throw new Exception(__(\"Could not reach '$uri'.\"));\n        } else if ($response->code == 404) { // intentional !=\n            throw new NotFoundException(__(\"Fetching the '$uri' failed with HTTP error 404: Not Found\"));\n        } else if ($response->code == 405) { // intentional !=\n            $responseText = json_decode($response->body, true);\n            if ($responseText !== null) {\n                throw new Exception(sprintf(__(\"Fetching the '$uri' failed with HTTP error %s: %s\"), $response->code, $responseText['message']));\n            }\n        }\n\n        if ($response->code != 200) { // intentional !=\n            throw new Exception(sprintf(__(\"Fetching the '$uri' failed with HTTP error %s: %s\"), $response->code, $response->reasonPhrase));\n        }\n\n        $data = json_decode($response->body, true);\n        if ($data === null) {\n            throw new Exception(__('Could not parse JSON: ') . json_last_error_msg(), json_last_error());\n        }\n\n        return array($data, $response);\n    }\n\n    public function getRemoteUser($id)\n    {\n        $server = $this->find('first', array(\n            'conditions' => array('Server.id' => $id),\n            'recursive' => -1\n        ));\n        $HttpSocket = $this->setupHttpSocket($server);\n        $request = $this->setupSyncRequest($server);\n        $uri = $server['Server']['url'] . '/users/view/me.json';\n        try {\n            $response = $HttpSocket->get($uri, false, $request);\n        } catch (Exception $e) {\n            $this->Log = ClassRegistry::init('Log');\n            $this->Log->create();\n            $message = __('Could not reset fetch remote user account.');\n            $this->Log->save(array(\n                    'org' => 'SYSTEM',\n                    'model' => 'Server',\n                    'model_id' => $id,\n                    'email' => 'SYSTEM',\n                    'action' => 'error',\n                    'user_id' => 0,\n                    'title' => 'Error: ' . $message,\n            ));\n            return $message;\n        }\n        if ($response->isOk()) {\n            $user = json_decode($response->body, true);\n            if (!empty($user['User'])) {\n                $result = array(\n                    'Email' => $user['User']['email'],\n                    'Role name' => isset($user['Role']['name']) ? $user['Role']['name'] : 'Unknown, outdated instance',\n                    'Sync flag' => isset($user['Role']['perm_sync']) ? ($user['Role']['perm_sync'] ? 1 : 0) : 'Unknown, outdated instance'\n                );\n                return $result;\n            } else {\n                return __('No user object received in response.');\n            }\n        } else {\n            return $response->code;\n        }\n    }\n}\n", "<div class=\"feed form\">\n<?php echo $this->Form->create('Feed');?>\n    <fieldset>\n        <legend><?php echo __('Add MISP Feed');?></legend>\n        <?php\n            if (!empty(Configure::read('Security.disable_local_feed_access'))) {\n                echo sprintf(\n                    '<p class=\"red bold\">%s</p>',\n                    __('Warning: local feeds are currently disabled by policy, to re-enable the feature, set the Security.allow_local_feed_access flag in the server settings. This setting can only be set via the CLI.')\n                );\n            }\n            echo '<p>' . __('Add a new MISP feed source.') . '</p>';\n            echo $this->Form->input('enabled', array());\n            echo $this->Form->input('caching_enabled', array('label' => __('Caching enabled')));\n    ?>\n        <div class=\"input clear\"></div>\n    <?php\n        echo $this->Form->input('lookup_visible', array('label' => __('Lookup visible')));\n        echo $this->Form->input('name', array(\n                'div' => 'input clear',\n                'placeholder' => __('Feed name'),\n                'class' => 'form-control span6',\n        ));\n        echo $this->Form->input('provider', array(\n                'div' => 'input clear',\n                'label' => __('Provider'),\n                'placeholder' => __('Name of the content provider'),\n                'class' => 'form-control span6'\n        ));\n        $options = array('network' => 'Network');\n        if (empty(Configure::read('Security.disable_local_feed_access'))) {\n            $options['local'] = 'Local';\n        }\n        echo $this->Form->input('input_source', array(\n                'label' => __('Input Source'),\n                'div' => 'input clear',\n                'options' => $options,\n                'class' => 'form-control span6'\n        ));\n        ?>\n        <div class=\"input clear\"></div>\n        <div id=\"DeleteLocalFileDiv\" class=\"optionalField\">\n                <?php\n                    echo $this->Form->input('delete_local_file', array(\n                            'label' => __('Remove input after ingestion')\n                    ));\n            ?>\n        </div>\n        <div class=\"input clear\"></div>\n        <?php\n        echo $this->Form->input('url', array(\n                'div' => 'input clear',\n                'label' => __('URL'),\n                'placeholder' => __('URL of the feed'),\n                'class' => 'form-control span6'\n        ));\n        echo $this->Form->input('source_format', array(\n                'label' => __('Source Format'),\n                'div' => 'input clear',\n                'options' => $feed_types,\n                'class' => 'form-control span6'\n        ));\n    ?>\n        <div id=\"HeadersDiv\">\n    <?php\n            echo $this->Form->input('headers', array(\n                'label' => __('Any headers to be passed with requests (for example: Authorization)'),\n                'div' => 'clear',\n                'class' => 'input-xxlarge',\n                'type' => 'textarea',\n                'placeholder' => __('Line break separated list of headers in the \"headername: value\" format')\n            ));\n    ?>\n            <div>\n                <span id=\"basicAuthFormEnable\" class=\"btn btn-inverse quick-popover\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Add Basic Auth');?></span>\n                <div id=\"basicAuthForm\" class=\"quick-form\" style=\"display:none;\">\n                        <fieldset>\n                            <div class=\"input\">\n                                <label for=\"BasicAuthUsername\"><?php echo __('Username');?></label>\n                                <input class=\"form-control\" type=\"text\" id=\"BasicAuthUsername\"><br />\n                            </div>\n                            <div class=\"input\">\n                                <label for =\"BasicAuthPassword\"><?php echo __('Password');?></label>\n                                <input class=\"form-control\" type=\"text\" id=\"BasicAuthPassword\"><br />\n                            </div>\n                        </fieldset>\n                        <span class=\"btn-inverse btn\" onClick=\"add_basic_auth();\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Add basic auth header'); ?></span>\n                </div>\n            </div><br />\n        </div>\n        <div id=\"TargetDiv\" class=\"optionalField\">\n    <?php\n        echo $this->Form->input('fixed_event', array(\n                'label' => __('Target Event'),\n                'div' => 'input clear',\n                'options' => array('New Event Each Pull', 'Fixed Event'),\n                'class' => 'form-control span6'\n        ));\n    ?>\n        </div>\n        <div id=\"TargetEventDiv\" class=\"optionalField\">\n    <?php\n        echo $this->Form->input('target_event', array(\n                'label' => __('Target Event ID'),\n                'div' => 'input clear',\n                'placeholder' => __('Leave blank unless you want to reuse an existing event.'),\n                'class' => 'form-control span6'\n        ));\n    ?>\n        </div>\n        <div id=\"settingsCsvValueDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.csv.value', array(\n                        'label' => __('Value field(s) in the CSV'),\n                        'title' => __('Select one or several fields that should be parsed by the CSV parser and converted into MISP attributes'),\n                        'div' => 'input clear',\n                        'placeholder' => __('2,3,4 (column position separated by commas)'),\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"settingsCsvDelimiterDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.csv.delimiter', array(\n                        'label' => __('Delimiter'),\n                        'title' => __('Set the default CSV delimiter (default = \",\")'),\n                        'div' => 'input clear',\n                        'placeholder' => ',',\n                        'class' => 'form-control span6',\n                        'value' => isset($this->request->data['Feed']['settings']['csv']['delimiter']) ? $this->request->data['Feed']['settings']['csv']['delimiter'] : ','\n                ));\n            ?>\n        </div>\n        <div id=\"settingsCommonExcluderegexDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.common.excluderegex', array(\n                        'label' => __('Exclusion Regex'),\n                        'title' => __('Add a regex pattern for detecting iocs that should be skipped (this can be useful to exclude any references to the actual report / feed for example)'),\n                        'div' => 'input clear',\n                        'placeholder' => __('Regex pattern, for example: \"/^https://myfeedurl/i'),\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"PublishDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('publish', array(\n                    'label' => __('Auto Publish'),\n                    'title' => __('Publish events directly after pulling the feed - if you would like to review the event before publishing uncheck this'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <div id=\"OverrideIdsDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('override_ids', array(\n                    'label' => __('Override IDS Flag'),\n                    'title' => __('If checked, the IDS flags will always be set to off when pulling from this feed'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <div id=\"DeltaMergeDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('delta_merge', array(\n                    'label' => __('Delta Merge'),\n                    'title' => __('Merge attributes (only add new attributes, remove revoked attributes)'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n    <?php\n        echo $this->Form->input('distribution', array(\n                'options' => array($distributionLevels),\n                'div' => 'input clear',\n                'label' => __('Distribution'),\n                'selected' => isset($this->request->data['Feed']['distribution']) ? $this->request->data['Feed']['distribution'] : 3,\n        ));\n    ?>\n        <div id=\"SGContainer\" style=\"display:none;\">\n    <?php\n        if (!empty($sharingGroups)) {\n            echo $this->Form->input('sharing_group_id', array(\n                    'options' => array($sharingGroups),\n                    'label' => __('Sharing Group'),\n            ));\n        }\n    ?>\n        </div>\n        <div class=\"input clear\"></div>\n    <?php\n        echo $this->Form->input('tag_id', array(\n                'options' => $tags,\n                'label' => __('Default Tag'),\n                'selected' => isset($this->request->data['Feed']['tag_id']) ? $this->request->data['Feed']['tag_id'] : 0,\n        ));\n        echo $this->Form->input('pull_rules', array('style' => 'display:none;', 'label' => false, 'div' => false));\n    ?>\n    </fieldset>\n    <b><?php echo __('Filter rules');?>:</b><br />\n    <span id=\"pull_tags_OR\" style=\"display:none;\"><?php echo __('Events with the following tags allowed');?>: <span id=\"pull_tags_OR_text\" style=\"color:green;\"></span><br /></span>\n    <span id=\"pull_tags_NOT\" style=\"display:none;\"><?php echo __('Events with the following tags blocked');?>: <span id=\"pull_tags_NOT_text\" style=\"color:red;\"></span><br /></span>\n    <span id=\"pull_orgs_OR\" style=\"display:none;\"><?php echo __('Events with the following organisations allowed');?>: <span id=\"pull_orgs_OR_text\" style=\"color:green;\"></span><br /></span>\n    <span id=\"pull_orgs_NOT\" style=\"display:none;\"><?php echo __('Events with the following organisations blocked');?>: <span id=\"pull_orgs_NOT_text\" style=\"color:red;\"></span><br /></span>\n    <span id=\"pull_modify\"  class=\"btn btn-inverse\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Modify');?></span><br /><br />\n    <?php\n    echo $this->Form->button(__('Add'), array('class' => 'btn btn-primary'));\n    echo $this->Form->end();\n    ?>\n    <div id=\"hiddenRuleForms\">\n        <?php echo $this->element('serverRuleElements/pull'); ?>\n    </div>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'feeds', 'menuItem' => 'add'));\n?>\n<script type=\"text/javascript\">\n\nvar rules = {\"pull\": {\"tags\": {\"OR\":[], \"NOT\":[]}, \"orgs\": {\"OR\":[], \"NOT\":[]}}};\nvar validOptions = ['pull'];\nvar validFields = ['tags', 'orgs'];\nvar modelContext = 'Feed';\n\n$(document).ready(function() {\n    feedDistributionChange();\n    $(\"#pull_modify\").click(function() {\n        serverRuleFormActivate('pull');\n    });\n    $(\"#FeedDistribution\").change(function() {\n        feedDistributionChange();\n    });\n    feedFormUpdate();\n    $('#basicAuthFormEnable').click(function() {\n        $('#basicAuthFormEnable').hide();\n        $('#basicAuthForm').show();\n    })\n});\n$(\"#FeedSourceFormat, #FeedFixedEvent, #FeedInputSource\").change(function() {\n    feedFormUpdate();\n});\n</script>\n", "<div class=\"feed form\">\n<?php echo $this->Form->create('Feed');?>\n    <fieldset>\n        <legend><?php echo __('Edit MISP Feed');?></legend>\n        <?php\n            if (!empty(Configure::read('Security.disable_local_feed_access'))) {\n                echo sprintf(\n                    '<p class=\"red bold\">%s</p>',\n                    __('Warning: local feeds are currently disabled by policy, to re-enable the feature, set the Security.allow_local_feed_access flag in the server settings. This setting can only be set via the CLI.')\n                );\n            }\n            echo '<p>' . __('Edit a new MISP feed source.') . '</p>';\n            echo $this->Form->input('enabled', array(\n                'type' => 'checkbox'\n            ));\n            echo $this->Form->input('caching_enabled', array(\n                'type' => 'checkbox'\n            ));\n    ?>\n        <div class=\"input clear\"></div>\n    <?php\n            echo $this->Form->input('lookup_visible', array(\n                'type' => 'checkbox'\n            ));\n            echo $this->Form->input('name', array(\n                    'div' => 'input clear',\n                    'placeholder' => __('Feed name'),\n                    'class' => 'form-control span6',\n            ));\n            echo $this->Form->input('provider', array(\n                    'div' => 'input clear',\n                    'placeholder' => __('Name of the content provider'),\n                    'class' => 'form-control span6'\n            ));\n            $options = array('network' => 'Network');\n            if (empty(Configure::read('Security.disable_local_feed_access'))) {\n                $options['local'] = 'Local';\n            }\n            echo $this->Form->input('input_source', array(\n                    'div' => 'input clear',\n                    'options' => $options,\n                    'class' => 'form-control span6'\n            ));\n            ?>\n            <div id=\"HeadersDiv\"<?php echo $this->request->data['Feed']['input_source'] == 'file' ? 'style=\"display:none;\"' : '';?>>\n        <?php\n                echo $this->Form->input('headers', array(\n                    'label' => __('Any headers to be passed with requests (for example: Authorization)'),\n                    'div' => 'clear',\n                    'class' => 'input-xxlarge',\n                    'type' => 'textarea',\n                    'placeholder' => __('Line break separated list of headers in the \"headername: value\" format')\n                ));\n        ?>\n            <div>\n                <span id=\"basicAuthFormEnable\" class=\"btn btn-inverse quick-popover\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Add Basic Auth');?></span>\n                <div id=\"basicAuthForm\" class=\"quick-form\" style=\"display:none;\">\n                        <fieldset>\n                            <div class=\"input\">\n                                <label for=\"BasicAuthUsername\"><?php echo __('Username');?></label>\n                                <input class=\"form-control\" type=\"text\" id=\"BasicAuthUsername\"><br />\n                            </div>\n                            <div class=\"input\">\n                                <label for =\"BasicAuthPassword\"><?php echo __('Password');?></label>\n                                <input class=\"form-control\" type=\"text\" id=\"BasicAuthPassword\"><br />\n                            </div>\n                        </fieldset>\n                        <span class=\"btn-inverse btn\" onClick=\"add_basic_auth();\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Add basic auth header'); ?></span>\n                </div>\n            </div><br />\n            </div>\n            <div class=\"input clear\"></div>\n            <div id=\"DeleteLocalFileDiv\" class=\"optionalField\">\n                    <?php\n                        echo $this->Form->input('delete_local_file', array(\n                                'label' => __('Remove input after ingestion')\n                        ));\n                ?>\n            </div>\n            <div class=\"input clear\"></div>\n            <?php\n            echo $this->Form->input('url', array(\n                    'div' => 'input clear',\n                    'label' => __('URL'),\n                    'placeholder' => __('URL of the feed'),\n                    'class' => 'form-control span6'\n            ));\n            echo $this->Form->input('source_format', array(\n                    'label' => __('Source Format'),\n                    'div' => 'input clear',\n                    'options' => $feed_types,\n                    'class' => 'form-control span6'\n            ));\n        ?>\n        <div id=\"TargetDiv\" class=\"optionalField\">\n        <?php\n            echo $this->Form->input('fixed_event', array(\n                    'label' => __('Target Event'),\n                    'div' => 'input clear',\n                    'options' => array('New Event Each Pull', 'Fixed Event'),\n                    'class' => 'form-control span6'\n            ));\n        ?>\n        </div>\n        <div id=\"TargetEventDiv\" class=\"optionalField\">\n        <?php\n            echo $this->Form->input('target_event', array(\n                    'label' => __('Target Event ID'),\n                    'div' => 'input clear',\n                    'placeholder' => __('Leave blank unless you want to reuse an existing event.'),\n                    'class' => 'form-control span6'\n            ));\n        ?>\n        </div>\n        <div id=\"settingsCsvValueDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.csv.value', array(\n                        'label' => __('Value field(s) in the CSV'),\n                        'title' => __('Select one or several fields that should be parsed by the CSV parser and converted into MISP attributes'),\n                        'div' => 'input clear',\n                        'placeholder' => __('2,3,4 (column position separated by commas)'),\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"settingsCsvDelimiterDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.csv.delimiter', array(\n                        'label' => __('Delimiter'),\n                        'title' => __('Set the default CSV delimiter (default = \",\")'),\n                        'div' => 'input clear',\n                        'placeholder' => ',',\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"settingsCommonExcluderegexDiv\" class=\"optionalField\">\n            <?php\n                echo $this->Form->input('Feed.settings.common.excluderegex', array(\n                        'label' => __('Exclusion Regex'),\n                        'title' => __('Add a regex pattern for detecting iocs that should be skipped (this can be useful to exclude any references to the actual report / feed for example)'),\n                        'div' => 'input clear',\n                        'placeholder' => __('Regex pattern, for example: \"/^https://myfeedurl/i\"'),\n                        'class' => 'form-control span6'\n                ));\n            ?>\n        </div>\n        <div id=\"PublishDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('publish', array(\n                    'label' => __('Auto Publish'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <div id=\"OverrideIdsDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('override_ids', array(\n                    'label' => __('Override IDS Flag'),\n                    'title' => __('If checked, the IDS flags will always be set to off when pulling from this feed'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <div id=\"DeltaMergeDiv\" class=\"input clear optionalField\">\n        <?php\n            echo $this->Form->input('delta_merge', array(\n                    'label' => __('Delta Merge'),\n                    'title' => __('Merge attributes (only add new attributes, remove revoked attributes)'),\n                    'type' => 'checkbox',\n                    'class' => 'form-control'\n            ));\n        ?>\n        </div>\n        <?php\n            echo $this->Form->input('distribution', array(\n                    'options' => array($distributionLevels),\n                    'div' => 'input clear',\n                    'label' => __('Distribution'),\n            ));\n        ?>\n        <div id=\"SGContainer\" style=\"display:none;\">\n        <?php\n            if (!empty($sharingGroups)) {\n                echo $this->Form->input('sharing_group_id', array(\n                        'options' => array($sharingGroups),\n                        'label' => __('Sharing Group'),\n                ));\n            }\n        ?>\n        </div>\n        <div class=\"input clear\"></div>\n        <?php\n            echo $this->Form->input('tag_id', array(\n                    'options' => $tags,\n                    'label' => __('Default Tag'),\n            ));\n        echo $this->Form->input('pull_rules', array('style' => 'display:none;', 'label' => false, 'div' => false));\n    ?>\n    </fieldset>\n    <b><?php echo __('Filter rules');?>:</b><br />\n    <span id=\"pull_tags_OR\" style=\"display:none;\"><?php echo __('Events with the following tags allowed');?>: <span id=\"pull_tags_OR_text\" style=\"color:green;\"></span><br /></span>\n    <span id=\"pull_tags_NOT\" style=\"display:none;\"><?php echo __('Events with the following tags blocked');?>: <span id=\"pull_tags_NOT_text\" style=\"color:red;\"></span><br /></span>\n    <span id=\"pull_orgs_OR\" style=\"display:none;\"><?php echo __('Events with the following organisations allowed');?>: <span id=\"pull_orgs_OR_text\" style=\"color:green;\"></span><br /></span>\n    <span id=\"pull_orgs_NOT\" style=\"display:none;\"><?php echo __('Events with the following organisations blocked');?>: <span id=\"pull_orgs_NOT_text\" style=\"color:red;\"></span><br /></span>\n    <span id=\"pull_modify\"  class=\"btn btn-inverse\" style=\"line-height:10px; padding: 4px 4px;\"><?php echo __('Modify');?></span><br /><br />\n    <?php\n    echo $this->Form->button(__('Edit'), array('class' => 'btn btn-primary'));\n    echo $this->Form->end();\n    ?>\n    <div id=\"hiddenRuleForms\">\n        <?php echo $this->element('serverRuleElements/pull'); ?>\n    </div>\n</div>\n<?php\n    echo $this->element('/genericElements/SideMenu/side_menu', array('menuList' => 'feeds', 'menuItem' => 'edit'));\n?>\n<script type=\"text/javascript\">\n//\nvar formInfoValues = {\n        'ServerUrl' : \"<?php echo __('The base-url to the external server you want to sync with. Example: https://misppriv.circl.lu');?>\",\n        'ServerName' : \"<?php echo __('A name that will make it clear to your users what this instance is. For example: Organisation A\\'s instance');?>\",\n        'ServerOrganization' : \"<?php echo __('The organization having the external server you want to sync with. Example: BE');?>\",\n        'ServerAuthkey' : \"<?php echo __('You can find the authentication key on your profile on the external server.');?>\",\n        'ServerPush' : \"<?php echo __('Allow the upload of events and their attributes.');?>\",\n        'ServerPull' : \"<?php echo __('Allow the download of events and their attributes from the server.');?>\",\n        'ServerUnpublishEvent' : '<?php echo __('Unpublish new event (working with Push event).');?>',\n        'ServerPublishWithoutEmail' : '<?php echo __('Publish new event without email (working with Pull event).');?>',\n        'ServerSubmittedCert' : \"<?php echo __('You can also upload a certificate file if the instance you are trying to connect to has its own signing authority.');?>\",\n        'ServerSelfSigned' : \"<?php echo __('Click this, if you would like to allow a connection despite the other instance using a self-signed certificate (not recommended).');?>\"\n};\n\n\nvar rules = {\"pull\": {\"tags\": {\"OR\":[], \"NOT\":[]}, \"orgs\": {\"OR\":[], \"NOT\":[]}}};\nvar validOptions = ['pull'];\nvar validFields = ['tags', 'orgs'];\nvar modelContext = 'Feed';\nvar tags = [];\nvar orgs = [];\n\n$(document).ready(function() {\n    rules = convertServerFilterRules(rules);\n    serverRulePopulateTagPicklist();\n    feedDistributionChange();\n    $(\"#pull_modify\").click(function() {\n        serverRuleFormActivate('pull');\n    });\n    $(\"#FeedDistribution\").change(function() {\n        feedDistributionChange();\n    });\n    $('#basicAuthFormEnable').click(function() {\n        $('#basicAuthFormEnable').hide();\n        $('#basicAuthForm').show();\n    })\n    feedFormUpdate();\n});\n\n$(\"#FeedSourceFormat, #FeedFixedEvent, #FeedInputSource\").change(function() {\n    feedFormUpdate();\n});\n</script>\n"], "filenames": ["app/Controller/FeedsController.php", "app/Model/Feed.php", "app/Model/Server.php", "app/View/Feeds/add.ctp", "app/View/Feeds/edit.ctp"], "buggy_code_start_loc": [249, 33, 1297, 5, 5], "buggy_code_end_loc": [349, 48, 1297, 28, 32], "fixing_code_start_loc": [249, 34, 1298, 5, 5], "fixing_code_end_loc": [349, 74, 1308, 38, 42], "type": "NVD-CWE-noinfo", "message": "app/Model/feed.php in MISP before 2.4.124 allows administrators to choose arbitrary files that should be ingested by MISP. This does not cause a leak of the full contents of a file, but does cause a leaks of strings that match certain patterns. Among the data that can leak are passwords from database.php or GPG key passphrases from config.php.", "other": {"cve": {"id": "CVE-2020-11458", "sourceIdentifier": "cve@mitre.org", "published": "2020-04-02T12:15:15.870", "lastModified": "2021-07-21T11:39:23.747", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "app/Model/feed.php in MISP before 2.4.124 allows administrators to choose arbitrary files that should be ingested by MISP. This does not cause a leak of the full contents of a file, but does cause a leaks of strings that match certain patterns. Among the data that can leak are passwords from database.php or GPG key passphrases from config.php."}, {"lang": "es", "value": "El archivo app/Model/feed.php en MISP versiones anteriores a  2.4.124,  permite a administradores elegir archivos arbitrarios que deber\u00edan ser consumidos por MISP. Esto no causa una filtraci\u00f3n de todo el contenido de un archivo, pero s\u00ed una filtraci\u00f3n de cadenas que coinciden con determinados patrones. Entre los datos que pueden filtrarse se encuentran las contrase\u00f1as desde el archivo database.php o las frases de clave GPG desde el archivo config.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:misp:misp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.4.124", "matchCriteriaId": "F514A7E1-4EBA-44ED-B548-C787D4EADC0B"}]}]}], "references": [{"url": "https://github.com/MISP/MISP/commit/30ff4b6451549dae7b526d4fb3a49061311ed477", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://matthias.sdfeu.org/misp-poc.py", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/MISP/MISP/commit/30ff4b6451549dae7b526d4fb3a49061311ed477"}}