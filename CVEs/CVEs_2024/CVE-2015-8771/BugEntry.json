{"buggy_code": ["<?php\n\n/*\n *   How to use plugin::plInfo()\n *   ===================\n *   \n *   The function returns a descriptive array of the plugin,\n *    which will then be used by GOsa to populate the plugin, its ACLs, \n *    its properties, its schema requirements aso.\n *\n *\n *   The following values can be set:\n *   ================================\n *\n *   plShortName    |-> The name of the plugin in short (e.g. Posix)\n *                  |   This short-name will be shown for example in the ACL definitions.\n *                  | \n *                  | \n *   plDescription  |-> A descriptive text for the plugin (e.g. User posix account extension)\n *                  |   This will be shown in the ACL definitions.   \n *                  | \n *                  | \n *   plSelfModify   |-> If set to true this plugin allows to set 'self' ACLs.\n *                  |   For exampe to allow to change the users own password, but not the others.\n *                  | \n *                  | \n *   plDepends      |-> The plugins dependencies to other classes (e.g. sambaAccount requires posixAccount)\n *                  |  \n *                  | \n *   plPriority     |-> The priority of the plugin, this influences the ACL listings only.\n *                  | \n *                  | \n *   plSection      |-> The section of this plugin 'administration', 'personal', 'addons'\n *                  | \n *                  | \n *   plCategory     |-> The plugin category this plugins belongs to (e.g. users, groups, departments) \n *                  | \n *                  | \n *   plRequirements |-> Plugin requirements. \n *                  | |\n *                  | |-> [activePlugin]           The schame checks will only be performed if the given plugin is enabled\n *                  | |                             in the gosa.conf definitions.\n *                  | |                            Defaults to the current class name if empty.\n *                  | |\n *                  | |-> [ldapSchema]             An array of objectClass requirements.\n *                  | |                            Syntax [[objectClass => 'version'], ... ]\n *                  | |                            Version can be emtpy which just checks for the existence of the class.\n *                  | |\n *                  | |-> [onFailureDisablePlugin] A list of plugins that which will be disabled if the \n *                  |                               requirements couldn't be fillfulled.\n *                  |\n *                  |      ---------------------------------------------\n *                  |      EXAMPLE:\n *                  |      ---------------------------------------------\n *                  |      \"plRequirements\"=> array(\n *                  |         'activePlugin' => 'applicationManagement', \n *                  |         'ldapSchema' => array(\n *                  |             'gosaObject' => '',\n *                  |             'gosaAccount' => '>=2.7',\n *                  |             'gosaLockEntry' => '>=2.7',\n *                  |             'gosaDepartment' => '>=2.7',\n *                  |             'gosaCacheEntry' => '>=2.7',\n *                  |             'gosaProperties' => '>=2.7',\n *                  |             'gosaConfig' => '>=2.7'\n *                  |             ),\n *                  |         'onFailureDisablePlugin' => array(get_class(), 'someClassName')\n *                  |         ),\n *                  |      ---------------------------------------------\n *                  |\n *                  |\n *                  |         \n *   plProvidedAcls |-> The ACLs provided by this plugin\n *                  |\n *                  |      ---------------------------------------------\n *                  |      EXAMPLE:\n *                  |      ---------------------------------------------\n *                  |      \"plProvidedAcls\"=> array(\n *                  |          'cn'             => _('Name'),\n *                  |          'uid'            => _('Uid'),\n *                  |          'phoneNumber'    => _('Phone number')\n *                  |          ),\n *                  |      ---------------------------------------------\n *                  |\n *                  |\n *                  | \n *   plProperties   |-> Properties used by the plugin.\n *                  |   Properties which are defined here will be modifyable using the property editor.\n *                  |   To read properties you can use $config->get_cfg_value(className, propertyName)\n *                  | \n *                  |      ---------------------------------------------\n *                  |      EXAMPLE:\n *                  |      ---------------------------------------------\n *                  |      \"plProperties\"=> array(\n *                  |         array(\n *                  |             \"name\"          => \"htaccessAuthentication\",\n *                  |             \"type\"          => \"bool\",\n *                  |             \"default\"       => \"false\",\n *                  |             \"description\"   => _(\"A description...\"),\n *                  |             \"check\"         => \"gosaProperty::isBool\",\n *                  |             \"migrate\"       => \"\",\n *                  |             \"group\"         => \"authentification\",\n *                  |             \"mandatory\"     => TRUE\n *                  |             ),\n *                  |         ),\n *                  |   See class_core.inc for a huge amount of examples.\n */\n\n\nclass all extends plugin {\n    static function plInfo()\n    {\n        return (array(\n                    \"plShortName\"   => _(\"All\"),\n                    \"plDescription\" => _(\"All objects\"),\n                    \"plSelfModify\"  => TRUE,\n                    \"plDepends\"     => array(),\n                    \"plPriority\"    => 0,\n                    \"plSection\"     => array(\"administration\"),\n                    \"plCategory\"    => array(\"all\" => array(\"description\" => '*&nbsp;'._(\"All\"))),\n                    \"plProvidedAcls\"    => array())\n               );\n    }\n}\n\nclass core extends plugin {\n\n    static function getPropertyValues($class,$name,$value,$type)\n    {\n        $list = array();\n        switch($name){\n            case 'idAllocationMethod':\n                $list = array('traditional' => _('Traditional'), 'pool' => _('Use samba pool'));\n                break;\n            case 'passwordDefaultHash':\n                $tmp = passwordMethod::get_available_methods();\n                foreach($tmp['name'] as $id => $method){\n                    $desc = $tmp[$id]['name'];\n                    $list[$method] = $desc;\n                }\n                break;\n            case 'theme':\n                $cmd = \"cd ../ihtml/themes; find . -name 'img.styles' | sed s/'^[^\\/]*\\/\\([^\\/]*\\).*'/'\\\\1'/g\";\n                $res = `$cmd`  ; \n                $list = array();\n                foreach(preg_split(\"/\\n/\",$res) as $entry){\n                    if(!empty($entry)){\n                        $list[$entry] = $entry;\n                    }\n                }\n                break;\n            case 'accountPrimaryAttribute':\n                $list = array('uid' => 'uid', 'cn' => 'cn');\n                break;\n            case 'loginAttribute':\n                $list = array(\n                            'uid' => 'uid',\n                            'mail' => 'mail',\n                            'both' => 'uid & mail');\n                break;\n            case 'timezone': \n                $tmp = timezone::_get_tz_zones();\n                foreach($tmp['TIMEZONES'] as $tzname => $offset){\n                    if($offset >= 0){\n                        $list[$tzname] = $tzname.\" ( + \".sprintf(\"%0.2f\",$offset/(60*60)).\" \"._(\"hours\").\")\";\n                    }else{\n                        $offset = $offset * -1;\n                        $list[$tzname] = $tzname.\" ( - \".sprintf(\"%0.2f\",($offset/(60*60))).\" \"._(\"hours\").\")\";\n                    }\n                }\n                break;\n            case 'mailAttribute':\n                $list = array('mail' => 'mail','uid' => 'uid');\n                break;\n            case 'mailMethod': \n                $tmp = array();\n                if(class_available('mailMethod')){\n                    $tmp = mailMethod::get_methods();\n                }\n                $list =array();\n                foreach($tmp as $vName => $vValue){\n                    $vName = preg_replace('/^mailMethod/','', $vName);\n                    $list[$vName] = $vValue;\n                }\n                $list[''] = _(\"None\");\n                break;\n            case 'language':\n                $tmp = get_languages(TRUE);\n                $list[\"\"] = _(\"Automatic\");\n                foreach($tmp as $key => $desc){\n                    $list[$key] = $desc;\n                }\n                break;\n            case 'modificationDetectionAttribute': \n                $list = array('entryCSN' => 'entryCSN (OpenLdap)','textCSN'=>'textCSN (Sun DS)');\n                break;\n            default: echo $name.\" \";$list = array();\n        }\n\n        if(!isset($list[$value])){\n            $list[$value] = $value.\" (\"._(\"User value\").\")\";\n        }\n\n        return($list);\n    }\n\n    static function plInfo()\n    {\n        return (array(\n                    \"plShortName\" => _(\"Core\"),\n                    \"plDescription\" => _(\"GOsa core plugin\"),\n                    \"plSelfModify\"  => FALSE,\n                    \"plDepends\"     => array(),\n                    \"plPriority\"    => 0,\n                    \"plSection\"     => array(\"administration\"),\n\n                    \"plRequirements\"=> array(\n                        'ldapSchema' => array(\n                            'gosaObject' => '>=2.7',\n                            'gosaAccount' => '>=2.7',\n                            'gosaLockEntry' => '>=2.7',\n                            'gosaDepartment' => '>=2.7',\n                            'gosaCacheEntry' => '>=2.7',\n                            'gosaProperties' => '>=2.7',\n                            'gosaConfig' => '>=2.7'\n                            ),\n                        'onFailureDisablePlugin' => array(get_class())\n                        ),\n\n\n\n                    \"plCategory\"    => array(\"all\"),\n                    \"plProperties\"  => array(\n\n                        array(\n                            \"name\"          => \"htaccessAuthentication\",\n                            \"type\"          => \"bool\",\n                            \"default\"       => \"false\",\n                            \"description\"   => _(\"Enables htaccess instead of LDAP authentication. This can be used to enable other authentication mechanisms like Kerberos for the GOsa login.\"),\n                            \"check\"         => \"gosaProperty::isBool\",\n                            \"migrate\"       => \"\",\n                            \"group\"         => \"authentification\",\n                            \"mandatory\"     => TRUE),\n\n                        array(\n                            \"name\"          => \"statsDatabaseEnabled\",\n                            \"type\"          => \"bool\",\n                            \"default\"       => \"false\",\n                            \"description\"   => _(\"Enables the usage statistics module.\"),\n                            \"check\"         => \"gosaProperty::isBool\",\n                            \"migrate\"       => \"\",\n                            \"group\"         => \"core\",\n                            \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"statsDatabaseDirectory\",\n                                \"type\"          => \"path\",\n                                \"default\"       => \"/var/spool/gosa/stats\",\n                                \"description\"   => _(\"Database file to be used by the usage statistics module.\"),\n                                \"check\"         => \"gosaProperty::isWriteablePath\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                            \"name\"          => \"logging\",\n                            \"type\"          => \"bool\",\n                            \"default\"       => \"true\",\n                            \"description\"   => _(\"Enables event logging in GOsa. Setting it to 'On' make GOsa log every action a user performs via syslog. If you use this in combination with rsyslog and configure it to MySQL logging, you can browse all events in GOsa.\"),\n\n                            \"check\"         => \"gosaProperty::isBool\",\n                            \"migrate\"       => \"\",\n                            \"group\"         => \"core\",\n                            \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"listSummary\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enables a status bar on the bottom of lists displaying a summary of type and number of elements in the list.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"visual\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"passwordMinLength\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Specify the minimum length for newly entered passwords.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"passwordMinDiffer\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Specify the minimum number of characters that have to differ between old and newly entered passwords.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"passwordProposalHook\",\n                                \"type\"          => \"command\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Command to generate password proposals. If a command has been specified, the user can decide whether to use an automatic password or a manually specified one.\").\" \"._(\"Example\").\": /usr/bin/apg -n1\",\n                                \"check\"         => \"gosaProperty::isCommand\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"displayErrors\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable display of PHP errors on the top of the page. Disable this feature in production environments to avoid the exposure of sensitive data.\").\" \".sprintf(_(\"Related option\").\": developmentMode\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"developmentMode\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Show messages that may assist plugin development. Be aware that this option may produce some ACL related false error messages!\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => TRUE),\n\n\n                        array(\n                                \"name\"          => \"schemaCheck\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable LDAP schema verification during login. The recommended setting is 'On' because it enables efficient methods to create missing subtrees in the LDAP.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"copyPaste\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable copy and paste for most objects managed by GOsa.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"copyPaste\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"forceGlobals\",\n                                \"type\"          => \"noLdap\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable PHP security checks for disabled register_global settings.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"forceSSL\",\n                                \"type\"          => \"noLdap\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable automatic redirection to HTTPS based administration.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ldapStats\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable logging of detailed information of LDAP operations.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"ldapFollowReferrals\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable LDAP referral chasing.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"ldap\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ldapFilterNestingLimit\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 200,\n                                \"description\"   => _(\"Specify LDAP element filter limit. If the limit is not 0, GOsa speeds up group queries by putting several queries into a single query. This is known to produce problems on some LDAP servers (i.e. Sun DS) and needs to be lowered or disabled.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"ldap\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ldapSizelimit\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 200,\n                                \"description\"   => _(\"Specify the maximum number of entries GOsa will request from an LDAP server. A warning is displayed if this limit is exceeded.\"), \n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ldapSizeIgnore\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Disable checks for LDAP size limits.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"warnSSL\",\n                                \"type\"          => \"noLdap\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable warnings for non encrypted connections.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ppdGzip\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable compression for PPD files.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"ppd\",\n                                \"mandatory\"     => FALSE),\n\n\n                        array(\n                                \"name\"          => \"ignoreAcl\",\n                                \"type\"          => \"dn\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"DN of user with ACL checks disabled. This should only be used to restore lost administrative ACLs.\"),\n                                \"check\"         => \"gosaProperty::isDN\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => FALSE),\n\n\n                        array(\n                                \"name\"          => \"ppdPath\",\n                                \"type\"          => \"path\",\n                                \"default\"       => \"/var/spool/ppd\",\n                                \"description\"   => _(\"Storage path for PPD files.\"),\n                                \"check\"         => \"gosaProperty::isPath\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"ppd\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"ldapMaxQueryTime\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Number of seconds a LDAP query is allowed to take until GOsa aborts the request.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"storeFilterSettings\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enables storing of user filters in browser cookies.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sendCompressedOutput\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enables sending of compressed web page content.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"allowUidProposalModification\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Allows to modify uid-proposals when creating a new user from a user-template.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"modificationDetectionAttribute\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"entryCSN\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"LDAP attribute which is used to detect changes.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"language\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"ISO language code which is used to override the automatic language detection.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"theme\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"default\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"CSS and template theme to be used.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"visual\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"sessionLifetime\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 600,\n                                \"description\"   => _(\"Number of seconds after an inactive session expires. This may be overridden by some systems php.ini/crontab mechanism.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"templateCompileDirectory\",\n                                \"type\"          => \"path\",\n                                \"default\"       => \"/var/spool/gosa\",\n                                \"description\"   => _(\"Template engine compile directory.\"),\n                                \"check\"         => \"gosaProperty::isWriteablePath\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"debugLevel\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 0,\n                                \"description\"   => sprintf(_(\"Logical AND of the integer values below that controls the debug output on every page load: %s\"),\n\"\n\nDEBUG_TRACE   = 1\nDEBUG_LDAP    = 2\nDEBUG_MYSQL   = 4\nDEBUG_SHELL   = 8\nDEBUG_POST    = 16\nDEBUG_SESSION = 32\nDEBUG_CONFIG  = 64\nDEBUG_ACL     = 128\nDEBUG_SI      = 256\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sambaHashHook\",\n                                \"type\"          => \"command\",\n                                \"default\"       => \"perl -MCrypt::SmbHash -e \\\"print join(q[:], ntlmgen %password), $/;\\\"\",\n                                \"description\"   => _(\"Command to create Samba NT/LM hashes. Required for password synchronization if you don't use supplementary services.\"),\n                                \"check\"         => \"gosaProperty::isCommand\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"samba\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"passwordDefaultHash\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"ssha\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Default hash to be used for newly created user passwords.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n                        array(\n                                \"name\"          => \"strictPasswordRules\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable checking for the presence of problematic unicode characters in passwords.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"accountPrimaryAttribute\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"cn\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Specify whether 'cn' or 'uid' style user DNs are generated. For more sophisticated control use the 'accountRDN' setting.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"userRDN\",\n                                \"type\"          => \"rdn\",\n                                \"default\"       => \"ou=people,\",\n                                \"description\"   => _(\"Location component for user storage inside of departments.\"),\n                                \"check\"         => \"gosaProperty::isRdn\",\n                                \"migrate\"       => \"migrate_userRDN\", \n                                \"group\"         => \"user\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"groupRDN\",\n                                \"type\"          => \"rdn\",\n                                \"default\"       => \"ou=groups,\",\n                                \"description\"   => _(\"Location component for group storage inside of departments.\"),\n                                \"check\"         => \"gosaProperty::isRdn\",\n                                \"migrate\"       => \"migrate_groupRDN\",\n                                \"group\"         => \"group\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gidNumberBase\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"1000\",\n                                \"description\"   => _(\"Count base for group IDs. For dynamic ID assignment use the 'nextIdHook' setting.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => TRUE),\n\n                       array(\n                                \"name\"          => \"baseIdHook\",\n                                \"type\"          => \"command\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Count base for user IDs. For dynamic ID assignment use the 'nextIdHook' setting.\"),\n                                \"check\"         => \"gosaProperty::isCommand\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gidNumberPoolMin\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 10000,\n                                \"description\"   => _(\"Lowest assignable group ID for use with the idAllocationMethod set to 'pool'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gidNumberPoolMax\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 40000,\n                                \"description\"   => _(\"Highest assignable group ID for use with the idAllocationMethod set to 'pool'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"uidNumberPoolMin\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 10000,\n                                \"description\"   => _(\"Lowest assignable user ID for use with the idAllocationMethod set to 'pool'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"uidNumberPoolMax\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 40000,\n                                \"description\"   => _(\"Highest assignable user ID for use with the idAllocationMethod set to 'pool'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"uidNumberBase\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"1000\",\n                                \"description\"   => _(\"Count base for user IDs. For dynamic ID assignment use the 'baseIdHook' setting.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaRpcServer\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Connection URL for use with the gosa-ng service.\"),\n                                \"check\"         => \"jsonRPC::testConnectionProperties\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"rpc\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaRpcUser\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"admin\",\n                                \"description\"   => _(\"User name used to connect to the 'gosaRpcServer'.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"rpc\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaRpcPassword\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"tester\",\n                                \"description\"   => _(\"Password used to connect to the 'gosaRpcServer'.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"rpc\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaSupportURI\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Connection URI for use with the gosa-si service (obsolete).\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"gosa-si\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaSupportTimeout\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 15,\n                                \"description\"   => _(\"Number of seconds after a gosa-si connection is considered 'dead'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"gosa-si\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"loginAttribute\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"uid\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"User attribute which is used for log in.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"timezone\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Local time zone.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"honourUnitTags\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable tagging of administrative units. This can be used in conjunction with ACLs (obsolete).\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"useSaslForKerberos\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable the use of {sasl} instead of {kerberos} for user realms.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"SASLRealm\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"REALM\",\n                                \"description\"   => _(\"The SASL realm to use for password storage.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"rfc2307bis\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable RFC 2307bis style groups. This combines the use of 'member' and 'memberUid' attributes.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"personalTitleInDN\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Adjusts the user DN generation to include the users personal title (only in conjunction with accountPrimaryAttribute).\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"storage location\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"nextIdHook\",\n                                \"type\"          => \"command\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Script to be called for finding the next free id for groups or users.\"),\n                                \"check\"         => \"gosaProperty::isCommand\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n                        array(\n                                \"name\"          => \"idGenerator\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"{%sn}-{%givenName[2-4]}\",\n                                \"description\"   => _(\"Descriptive string for the automatic ID generator. Please read the FAQ file for more information.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"strictNamingRules\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable strict checking for user IDs and group names.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"minId\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 40,\n                                \"description\"   => _(\"Lowest assignable user or group ID. Only active if idAllocationMethod is set to 'traditional'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"mailAttribute\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"mail\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Attribute to be used for primary mail addresses.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaSharedPrefix\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Namespace used for shared folders.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"mailUserCreation\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Namespace rule to create user folders. Please read the FAQ file for more information.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"mailFolderCreation\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Namespace rule to create folders. Please read the FAQ file for more information.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"imapTimeout\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 10,\n                                \"description\"   => _(\"Seconds after an IMAP connection is considered dead.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"mailMethod\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Class name of the mail method to be used.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"cyrusUseSlashes\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable slashes instead of dots as a name space separator for Cyrus IMAP.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"vacationTemplateDirectory\",\n                                \"type\"          => \"path\",\n                                \"default\"       => \"/etc/gosa/vacation\",\n                                \"description\"   => _(\"Directory to store vacation templates. Please read the FAQ file for more information.\"),\n                                \"check\"         => \"gosaProperty::isWriteablePath\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"ldapTLS\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable TLS for LDAP connections.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"honourIvbbAttributes\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable IVBB used by german authorities.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sambaIdMapping\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Maintain sambaIdmapEntry objects to improve performance on some Samba versions.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"samba\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"handleExpiredAccounts\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable checks to determine whether an account is expired or not.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sambaSID\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"String containing the SID for Samba setups without the Domain object in LDAP.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"samba\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sambaRidBase\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"String containing the RID base for Samba setups without the Domain object in LDAP.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"samba\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"enableSnapshots\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable manual object snapshots.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"snapshotBase\",\n                                \"type\"          => \"dn\",\n                                \"default\"       => \"ou=snapshots,dc=localhost,dc=de\",\n                                \"description\"   => _(\"Base DN for snapshot storage.\"),\n                                \"check\"         => \"gosaProperty::isDn\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"snapshotAdminDn\",\n                                \"type\"          => \"dn\",\n                                \"default\"       => \"cn=admin,dc=localhost,dc=de\",\n                                \"description\"   => _(\"DN of the snapshot administrator.\"),\n                                \"check\"         => \"gosaProperty::isDn\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"snapshotAdminPassword\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"secret\",\n                                \"description\"   => _(\"Password of the snapshot administrator.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"idAllocationMethod\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"traditional\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Method for user and group ID generation. Note: only the 'traditional' method is safe due to PHP limitations.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => TRUE),\n                        array(\n                                \"name\"          => \"snapshotURI\",\n                                \"type\"          => \"uri\",\n                                \"default\"       => \"ldap://localhost:389\",\n                                \"description\"   => _(\"URI of server to be used for snapshots.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => FALSE),\n                        array(\n                                \"name\"          => \"forceTranslit\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable transliteration of cyrillic characters for UID generation.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE)\n                            )));\n    }\n}\n?>\n", "<?php\n/*\n * This code is part of GOsa (http://www.gosa-project.org)\n * Copyright (C) 2003-2008 GONICUS GmbH\n *\n * ID: $$Id: functions.inc 13100 2008-12-01 14:07:48Z hickert $$\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\n/*! \\file\n * Common functions and named definitions. */\n\n/* Define globals for revision comparing */\n$svn_path = '$HeadURL$';\n$svn_revision = '$Revision$';\n\n/* Configuration file location */\nif(!isset($_SERVER['CONFIG_DIR'])){\n  define (\"CONFIG_DIR\", \"/etc/gosa\");\n}else{\n  define (\"CONFIG_DIR\",$_SERVER['CONFIG_DIR']);\n}\n\n/* Allow setting the config file in the apache configuration\n    e.g.  SetEnv CONFIG_FILE gosa.conf.2.6\n */\nif(!isset($_SERVER['CONFIG_FILE'])){\n  define (\"CONFIG_FILE\", \"gosa.conf\");\n}else{\n  define (\"CONFIG_FILE\",$_SERVER['CONFIG_FILE']);\n}\n\n/* Define common locatitions */\ndefine (\"CONFIG_TEMPLATE_DIR\", \"../contrib\");\ndefine (\"TEMP_DIR\",\"/var/cache/gosa/tmp\");\n\n/* Define get_list flags */\ndefine(\"GL_NONE\",         0);\ndefine(\"GL_SUBSEARCH\",    1);\ndefine(\"GL_SIZELIMIT\",    2);\ndefine(\"GL_CONVERT\",      4);\ndefine(\"GL_NO_ACL_CHECK\", 8);\n\n/* Heimdal stuff */\ndefine('UNIVERSAL',0x00);\ndefine('INTEGER',0x02);\ndefine('OCTET_STRING',0x04);\ndefine('OBJECT_IDENTIFIER ',0x06);\ndefine('SEQUENCE',0x10);\ndefine('SEQUENCE_OF',0x10);\ndefine('SET',0x11);\ndefine('SET_OF',0x11);\ndefine('DEBUG',false);\ndefine('HDB_KU_MKEY',0x484442);\ndefine('TWO_BIT_SHIFTS',0x7efc);\ndefine('DES_CBC_CRC',1);\ndefine('DES_CBC_MD4',2);\ndefine('DES_CBC_MD5',3);\ndefine('DES3_CBC_MD5',5);\ndefine('DES3_CBC_SHA1',16);\n\n/* Include required files */\ninclude_once(\"class_location.inc\");\nrequire_once (\"functions_debug.inc\");\nrequire_once (\"accept-to-gettext.inc\");\n\n/* Define constants for debugging */\ndefine (\"DEBUG_TRACE\",   1); /*! Debug level for tracing of common actions (save, check, etc.) */\ndefine (\"DEBUG_LDAP\",    2); /*! Debug level for LDAP queries */\ndefine (\"DEBUG_MYSQL\",   4); /*! Debug level for mysql operations */\ndefine (\"DEBUG_SHELL\",   8); /*! Debug level for shell commands */\ndefine (\"DEBUG_POST\",   16); /*! Debug level for POST content */\ndefine (\"DEBUG_SESSION\",32); /*! Debug level for SESSION content */\ndefine (\"DEBUG_CONFIG\", 64); /*! Debug level for CONFIG information */\ndefine (\"DEBUG_ACL\",    128); /*! Debug level for ACL infos */\ndefine (\"DEBUG_SI\",     256); /*! Debug level for communication with gosa-si */\ndefine (\"DEBUG_MAIL\",   512); /*! Debug level for all about mail (mailAccounts, imap, sieve etc.) */\ndefine (\"DEBUG_FAI\",   1024); // FAI (incomplete)\ndefine (\"DEBUG_RPC\",   2048); /*! Debug level for communication with remote procedures */\n\n// Define shadow states\ndefine (\"POSIX_ACCOUNT_EXPIRED\", 1);\ndefine (\"POSIX_WARN_ABOUT_EXPIRATION\", 2);\ndefine (\"POSIX_FORCE_PASSWORD_CHANGE\", 4);\ndefine (\"POSIX_DISALLOW_PASSWORD_CHANGE\", 8);\n\n/* Rewrite german 'umlauts' and spanish 'accents'\n   to get better results */\n$REWRITE= array( \"\u00e4\" => \"ae\",\n    \"\u00f6\" => \"oe\",\n    \"\u00fc\" => \"ue\",\n    \"\u00c4\" => \"Ae\",\n    \"\u00d6\" => \"Oe\",\n    \"\u00dc\" => \"Ue\",\n    \"\u00df\" => \"ss\",\n    \"\u00e1\" => \"a\",\n    \"\u00e9\" => \"e\",\n    \"\u00ed\" => \"i\",\n    \"\u00f3\" => \"o\",\n    \"\u00fa\" => \"u\",\n    \"\u00c1\" => \"A\",\n    \"\u00c9\" => \"E\",\n    \"\u00cd\" => \"I\",\n    \"\u00d3\" => \"O\",\n    \"\u00da\" => \"U\",\n    \"\u00f1\" => \"ny\",\n    \"\u00d1\" => \"Ny\" );\n\n/*! \\brief Cyrillic (russian) fonetic transliteration (converts russian letters to ASCII and backward according to GOST 7.79-2000 )\n *  \\param  string 'str' Source string in russian codepage\n *  \\return string Translitered string value.\n */\nfunction cyrillic2ascii($str) {\n    $ru = array('\u0430', '\u0431', '\u0432', '\u0433', '\u0434', '\u0435', '\u0451', '\u0436', '\u0437', '\u0438', '\u0439', '\u043a', '\u043b', '\u043c', '\u043d', '\u043e', '\u043f', '\u0440', '\u0441', '\u0442', '\u0443', '\u0444', '\u0445', '\u0446', '\u0447', '\u0448', '\u0449',  '\u044a', '\u044b', '\u044c', '\u044d', '\u044e', '\u044f',\n                '\u0410', '\u0411', '\u0412', '\u0413', '\u0414', '\u0415', '\u0401', '\u0416', '\u0417', '\u0418', '\u0419', '\u041a', '\u041b', '\u041c', 'H', '\u041e', '\u041f', '\u0420', '\u0421', '\u0422', '\u0423', '\u0424', '\u0425', '\u0426', '\u0427', '\u0428', '\u0429',  '\u042a', '\u042b', '\u042c', '\u042d', '\u042e', '\u042f', \n                '\u0491', '\u0454', '\u0457', '\u0490', '\u0404', '\u0407'\n    );\n    $en = array('a', 'b', 'v', 'g', 'd', 'e', 'jo','zh','z', 'i', 'jj','k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'f', 'kh','c', 'ch','sh','shh','\"', 'y', '\\'','eh','ju','ja',\n                'A', 'B', 'V', 'G', 'D', 'E', 'Jo','Je','Z', 'I', 'Jj','K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'F', 'Kh','C', 'CH','SH','Shh','\"', 'Y', '\\'','Eh','Ju','Ja',\n                'g', 'ye','yi','G', 'Ye','Yi'\n    );\n\n    return str_replace($ru, $en, $str);\n}\n\n\n/*! \\brief Does autoloading for classes used in GOsa.\n *\n *  Takes the list generated by 'update-gosa' and loads the\n *  file containing the requested class.\n *\n *  \\param  string 'class_name' The currently requested class\n */\nfunction __gosa_autoload($class_name) {\n    global $class_mapping, $BASE_DIR;\n\n    if ($class_mapping === NULL){\n\t    echo sprintf(_(\"Fatal error: no class locations defined - please run %s to fix this\"), bold(\"update-gosa\"));\n\t    exit;\n    }\n\n    if (isset($class_mapping[\"$class_name\"])){\n      require_once($BASE_DIR.\"/\".$class_mapping[\"$class_name\"]);\n    } else {\n      echo sprintf(_(\"Fatal error: cannot instantiate class %s - try running %s to fix this\"), bold($class_name), bold(\"update-gosa\"));\n      exit;\n    }\n}\nspl_autoload_register('__gosa_autoload');\n\n\n/*! \\brief Checks if a class is available. \n *  \\param  string 'name' The subject of the test\n *  \\return boolean True if class is available, else false.\n */\nfunction class_available($name)\n{\n  global $class_mapping, $config;\n    \n  $disabled = array();\n  if($config instanceOf config && $config->configRegistry instanceOf configRegistry){\n    $disabled = $config->configRegistry->getDisabledPlugins();\n  }\n\n  return(isset($class_mapping[$name]) && !isset($disabled[$name]));\n}\n\n\n/*! \\brief Check if plugin is available\n *\n * Checks if a given plugin is available and readable.\n *\n * \\param string 'plugin' the subject of the check\n * \\return boolean True if plugin is available, else FALSE.\n */\nfunction plugin_available($plugin)\n{\n\tglobal $class_mapping, $BASE_DIR;\n\n\tif (!isset($class_mapping[$plugin])){\n\t\treturn false;\n\t} else {\n\t\treturn is_readable($BASE_DIR.\"/\".$class_mapping[$plugin]);\n\t}\n}\n\n\n/*! \\brief Create seed with microseconds \n *\n * Example:\n * \\code\n * srand(make_seed());\n * $random = rand();\n * \\endcode\n *\n * \\return float a floating point number which can be used to feed srand() with it\n * */\nfunction make_seed() {\n  list($usec, $sec) = explode(' ', microtime());\n  return (float) $sec + ((float) $usec * 100000);\n}\n\n\n/*! \\brief DEBUG level action \n *\n * print a DEBUG level if specified debug level of the level matches the \n * the configured debug level.\n *\n * \\param int 'level' The log level of the message (should use the constants,\n * defined in functions.in (DEBUG_TRACE, DEBUG_LDAP, etc.)\n * \\param int 'line' Define the line of the logged action (using __LINE__ is common)\n * \\param string 'function' Define the function where the logged action happened in\n * (using __FUNCTION__ is common)\n * \\param string 'file' Define the file where the logged action happend in\n * (using __FILE__ is common)\n * \\param mixed 'data' The data to log. Can be a message or an array, which is printed\n * with print_a\n * \\param string 'info' Optional: Additional information\n *\n * */\nfunction DEBUG($level, $line, $function, $file, $data, $info=\"\")\n{\n    global $config;\n    $debugLevel = 0;\n    if($config instanceOf config){\n        $debugLevel = $config->get_cfg_value('core', 'debugLevel');\n    }\n    if ($debugLevel & $level){\n        $output= \"DEBUG[$level] \";\n        if ($function != \"\"){\n            $output.= \"($file:$function():$line) - $info: \";\n        } else {\n            $output.= \"($file:$line) - $info: \";\n        }\n        echo $output;\n        if (is_array($data)){\n            print_a($data);\n        } else {\n            echo \"'$data'\";\n        }\n        echo \"<br>\";\n    }\n}\n\n\n/*! \\brief Determine which language to show to the user\n *\n * Determines which language should be used to present gosa content\n * to the user. It does so by looking at several possibilites and returning\n * the first setting that can be found.\n *\n * -# Language configured by the user\n * -# Global configured language\n * -# Language as returned by al2gt (as configured in the browser)\n *\n * \\return string gettext locale string\n */\nfunction get_browser_language()\n{\n  /* Try to use users primary language */\n  global $config;\n  $ui= get_userinfo();\n  if (isset($ui) && $ui !== NULL){\n    if ($ui->language != \"\"){\n      return ($ui->language.\".UTF-8\");\n    }\n  }\n\n  /* Check for global language settings in gosa.conf */\n  if (isset ($config) && $config->get_cfg_value(\"core\",'language') != \"\"){\n    $lang = $config->get_cfg_value(\"core\",'language');\n    if(!preg_match(\"/utf/i\",$lang)){\n      $lang .= \".UTF-8\";\n    }\n    return($lang);\n  }\n \n  /* Load supported languages */\n  $gosa_languages= get_languages();\n\n  /* Move supported languages to flat list */\n  $langs = array_map(function($lang){return $lang.'.UTF-8';}, array_keys($gosa_languages));\n\n  /* Return gettext based string */\n  return (al2gt($langs, 'text/html'));\n}\n\n\n/*! \\brief Rewrite ui object to another dn \n *\n * Usually used when a user is renamed. In this case the dn\n * in the user object must be updated in order to point\n * to the correct DN.\n *\n * \\param string 'dn' the old DN\n * \\param string 'newdn' the new DN\n * */\nfunction change_ui_dn($dn, $newdn)\n{\n  $ui= session::global_get('ui');\n  if ($ui->dn == $dn){\n    $ui->dn= $newdn;\n    session::global_set('ui',$ui);\n  }\n}\n\n\n/*! \\brief Return themed path for specified base file\n *\n *  Depending on its parameters, this function returns the full\n *  path of a template file. First match wins while searching\n *  in this order:\n *\n *  - load theme depending file\n *  - load global theme depending file\n *  - load default theme file\n *  - load global default theme file\n *\n *  \\param  string 'filename' The base file name\n *  \\param  boolean 'plugin' Flag to take the plugin directory as search base\n *  \\param  string 'path' User specified path to take as search base\n *  \\return string Full path to the template file\n */\nfunction get_template_path($filename= '', $plugin= FALSE, $path= \"\")\n{\n  global $config, $BASE_DIR;\n\n  /* Set theme */\n  if (isset ($config)){\n\t$theme= $config->get_cfg_value(\"core\",\"theme\");\n  } else {\n  \t$theme= \"default\";\n  }\n\n  /* Return path for empty filename */\n  if ($filename == ''){\n    return (\"themes/$theme/\");\n  }\n\n  /* Return plugin dir or root directory? */\n  if ($plugin){\n    if ($path == \"\"){\n      $nf= preg_replace(\"!^\".$BASE_DIR.\"/!\", \"\", preg_replace('/^\\.\\.\\//', '', session::global_get('plugin_dir')));\n    } else {\n      $nf= preg_replace(\"!^\".$BASE_DIR.\"/!\", \"\", $path);\n    }\n    if (file_exists(\"$BASE_DIR/ihtml/themes/$theme/$nf\")){\n      return (\"$BASE_DIR/ihtml/themes/$theme/$nf/$filename\");\n    }\n    if (file_exists(\"$BASE_DIR/ihtml/themes/default/$nf\")){\n      return (\"$BASE_DIR/ihtml/themes/default/$nf/$filename\");\n    }\n    if ($path == \"\"){\n      return (session::global_get('plugin_dir').\"/$filename\");\n    } else {\n      return ($path.\"/$filename\");\n    }\n  } else {\n    if (file_exists(\"themes/$theme/$filename\")){\n      return (\"themes/$theme/$filename\");\n    }\n    if (file_exists(\"$BASE_DIR/ihtml/themes/$theme/$filename\")){\n      return (\"$BASE_DIR/ihtml/themes/$theme/$filename\");\n    }\n    if (file_exists(\"themes/default/$filename\")){\n      return (\"themes/default/$filename\");\n    }\n    if (file_exists(\"$BASE_DIR/ihtml/themes/default/$filename\")){\n      return (\"$BASE_DIR/ihtml/themes/default/$filename\");\n    }\n    return ($filename);\n  }\n}\n\n\n/*! \\brief Remove multiple entries from an array\n *\n * Removes every element that is in $needles from the\n * array given as $haystack\n *\n * \\param array 'needles' array of the entries to remove\n * \\param array 'haystack' original array to remove the entries from\n */\nfunction array_remove_entries($needles, $haystack)\n{\n  return (array_merge(array_diff($haystack, $needles)));\n}\n\n\n/*! \\brief Remove multiple entries from an array (case-insensitive)\n *\n * Same as array_remove_entries(), but case-insensitive. */\nfunction array_remove_entries_ics($needles, $haystack)\n{\n  // strcasecmp will work, because we only compare ASCII values here\n  return (array_merge(array_udiff($haystack, $needles, 'strcasecmp')));\n}\n\n\n/*! Merge to array but remove duplicate entries\n *\n * Merges two arrays and removes duplicate entries. Triggers\n * an error if first or second parametre is not an array.\n *\n * \\param array 'ar1' first array\n * \\param array 'ar2' second array-\n * \\return array\n */\nfunction gosa_array_merge($ar1,$ar2)\n{\n  if(!is_array($ar1) || !is_array($ar2)){\n    trigger_error(\"Specified parameter(s) are not valid arrays.\");\n  }else{\n    return(array_values(array_unique(array_merge($ar1,$ar2))));\n  }\n}\n\n\n/*! \\brief Generate a system log info\n *\n * Creates a syslog message, containing user information.\n *\n * \\param string 'message' the message to log\n * */\nfunction gosa_log ($message)\n{\n  global $ui;\n\n  /* Preset to something reasonable */\n  $username= \"[unauthenticated]\";\n\n  /* Replace username if object is present */\n  if (isset($ui)){\n    if ($ui->username != \"\"){\n      $username= \"[$ui->username]\";\n    } else {\n      $username= \"[unknown]\";\n    }\n  }\n\n  syslog(LOG_INFO,\"GOsa$username: $message\");\n}\n\n\n/*! \\brief Initialize a LDAP connection\n *\n * Initializes a LDAP connection. \n *\n * \\param string 'server'\n * \\param string 'base'\n * \\param string 'binddn' Default: empty\n * \\param string 'pass' Default: empty\n *\n * \\return LDAP object\n */\nfunction ldap_init ($server, $base, $binddn='', $pass='')\n{\n  global $config;\n\n  $ldap = new LDAP ($binddn, $pass, $server,\n      isset($config->current['LDAPFOLLOWREFERRALS']) && $config->current['LDAPFOLLOWREFERRALS'] == \"true\",\n      isset($config->current['LDAPTLS']) && $config->current['LDAPTLS'] == \"true\");\n\n  /* Sadly we've no proper return values here. Use the error message instead. */\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"Fatal error\"),\n        sprintf(_(\"Error while connecting to LDAP: %s\"), $ldap->get_error()),\n        FATAL_ERROR_DIALOG);\n    exit();\n  }\n\n  /* Preset connection base to $base and return to caller */\n  $ldap->cd ($base);\n  return $ldap;\n}\n\n\n/* \\brief Process htaccess authentication */\nfunction process_htaccess ($username, $kerberos= FALSE)\n{\n  global $config;\n\n  /* Search for $username and optional @REALM in all configured LDAP trees */\n  foreach($config->data[\"LOCATIONS\"] as $name => $data){\n  \n    $config->set_current($name);\n    $mode= \"kerberos\";\n    if ($config->get_cfg_value(\"core\",\"useSaslForKerberos\") == \"true\"){\n      $mode= \"sasl\";\n    }\n\n    /* Look for entry or realm */\n    $ldap= $config->get_ldap_link();\n    if (!$ldap->success()){\n      msg_dialog::display(_(\"LDAP error\"), \n          msgPool::ldaperror($ldap->get_error(), \"\", LDAP_AUTH).\"<br><br>\".session::get('errors'), \n          FATAL_ERROR_DIALOG);\n      exit();\n    }\n    $ldap->search(\"(&(objectClass=gosaAccount)(|(uid=$username)(userPassword={$mode}$username)))\", array(\"uid\"));\n\n    /* Found a uniq match? Return it... */\n    if ($ldap->count() == 1) {\n      $attrs= $ldap->fetch();\n      return array(\"username\" => $attrs[\"uid\"][0], \"server\" => $name);\n    }\n  }\n\n  /* Nothing found? Return emtpy array */\n  return array(\"username\" => \"\", \"server\" => \"\");\n}\n\n\n/*! \\brief Verify user login against htaccess\n *\n * Checks if the specified username is available in apache, maps the user\n * to an LDAP user. The password has been checked by apache already.\n *\n * \\param string 'username'\n * \\return\n *  - TRUE on SUCCESS, NULL or FALSE on error\n */\nfunction ldap_login_user_htaccess ($username)\n{\n  global $config;\n\n  /* Look for entry or realm */\n  $ldap= $config->get_ldap_link();\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"LDAP error\"), \n        msgPool::ldaperror($ldap->get_error(), \"\", LDAP_AUTH).\"<br><br>\".session::get('errors'), \n        FATAL_ERROR_DIALOG);\n    exit();\n  }\n  $ldap->search(\"(&(objectClass=gosaAccount)(uid=$username))\", array(\"uid\"));\n  /* Found no uniq match? Strange, because we did above... */\n  if ($ldap->count() != 1) {\n    msg_dialog::display(_(\"LDAP error\"), _(\"User ID is not unique!\"), FATAL_ERROR_DIALOG);\n    return (NULL);\n  }\n  $attrs= $ldap->fetch();\n\n  /* got user dn, fill acl's */\n  $ui= new userinfo($config, $ldap->getDN());\n  $ui->username= $attrs['uid'][0];\n\n  /* Bail out if we have login restrictions set, for security reasons\n     the message is the same than failed user/pw */\n  if (!$ui->loginAllowed()){\n    new log(\"security\",\"login\",\"\",array(),\"Login restriction for user \\\"$username\\\", login not permitted\");\n    return (NULL);\n  }\n\n  /* No password check needed - the webserver did it for us */\n  $ldap->disconnect();\n\n  /* Username is set, load subtreeACL's now */\n  $ui->loadACL();\n\n  /* TODO: check java script for htaccess authentication */\n  session::global_set('js', true);\n\n  return ($ui);\n}\n\n\n/*! \\brief Verify user login against LDAP directory\n *\n * Checks if the specified username is in the LDAP and verifies if the\n * password is correct by binding to the LDAP with the given credentials.\n *\n * \\param string 'username'\n * \\param string 'password'\n * \\return\n *  - TRUE on SUCCESS, NULL or FALSE on error\n */\nfunction ldap_login_user ($username, $password)\n{\n  global $config;\n\n  /* look through the entire ldap */\n  $ldap = $config->get_ldap_link();\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"LDAP error\"), \n        msgPool::ldaperror($ldap->get_error(), \"\", LDAP_AUTH).\"<br><br>\".session::get('errors'), \n        FATAL_ERROR_DIALOG);\n    exit();\n  }\n  $ldap->cd($config->current['BASE']);\n  $allowed_attributes = array(\"uid\",\"mail\");\n  $verify_attr = array();\n  if($config->get_cfg_value(\"core\",\"loginAttribute\") != \"\"){\n    $tmp = explode(\",\", $config->get_cfg_value(\"core\",\"loginAttribute\")); \n    foreach($tmp as $attr){\n      if(in_array_strict($attr,$allowed_attributes)){\n        $verify_attr[] = $attr;\n      }\n    }\n  }\n  if(count($verify_attr) == 0){\n    $verify_attr = array(\"uid\");\n  }\n  $tmp= $verify_attr;\n  $tmp[] = \"uid\";\n  $filter = \"\";\n  foreach($verify_attr as $attr) {\n    $filter.= \"(\".$attr.\"=\".$username.\")\";\n  }\n  $filter = \"(&(|\".$filter.\")(objectClass=gosaAccount))\";\n  $ldap->search($filter,$tmp);\n\n  /* get results, only a count of 1 is valid */\n  switch ($ldap->count()){\n\n    /* user not found */\n    case 0:\treturn (NULL);\n\n            /* valid uniq user */\n    case 1: \n            break;\n\n            /* found more than one matching id */\n    default:\n            msg_dialog::display(_(\"Internal error\"), _(\"User ID is not unique!\"), FATAL_ERROR_DIALOG);\n            return (NULL);\n  }\n\n  /* LDAP schema is not case sensitive. Perform additional check. */\n  $attrs= $ldap->fetch();\n  $success = FALSE;\n  foreach($verify_attr as $attr){\n    if(isset($attrs[$attr][0]) && $attrs[$attr][0] == $username){\n      $success = TRUE;\n    }\n  }\n  if(!$success){\n    return(FALSE);\n  }\n\n  /* got user dn, fill acl's */\n  $ui= new userinfo($config, $ldap->getDN());\n  $ui->username= $attrs['uid'][0];\n\n  /* Bail out if we have login restrictions set, for security reasons\n     the message is the same than failed user/pw */\n  if (!$ui->loginAllowed()){\n    new log(\"security\",\"login\",\"\",array(),\"Login restriction for user \\\"$username\\\", login not permitted\");\n    return (NULL);\n  }\n\n  /* password check, bind as user with supplied password  */\n  $ldap->disconnect();\n  $ldap= new LDAP($ui->dn, $password, $config->current['SERVER'],\n      isset($config->current['LDAPFOLLOWREFERRALS']) &&\n      $config->current['LDAPFOLLOWREFERRALS'] == \"true\",\n      isset($config->current['LDAPTLS'])\n      && $config->current['LDAPTLS'] == \"true\");\n  if (!$ldap->success()){\n    return (NULL);\n  }\n\n  /* Username is set, load subtreeACL's now */\n  $ui->loadACL();\n\n  return ($ui);\n}\n\n\n/*! \\brief      Checks the posixAccount status by comparing the shadow attributes.\n *\n * @param Object    The GOsa configuration object.\n * @param String    The 'dn' of the user to test the account status for.\n * @param String    The 'uid' of the user we're going to test.\n * @return Const\n *                  POSIX_ACCOUNT_EXPIRED           - If the account is expired.\n *                  POSIX_WARN_ABOUT_EXPIRATION     - If the account is going to expire.\n *                  POSIX_FORCE_PASSWORD_CHANGE     - The password has to be changed.\n *                  POSIX_DISALLOW_PASSWORD_CHANGE  - The password cannot be changed right now.\n *\n *\n *\n *      shadowLastChange\n *      |\n *      |---- shadowMin --->    |       <-- shadowMax --\n *      |                       |       |\n *      |------- shadowWarning ->       |\n *                                      |-- shadowInactive --> DEACTIVATED\n *                                      |\n *                                      EXPIRED\n *\n */\nfunction ldap_expired_account($config, $userdn, $uid)\n{\n    // Skip this for the admin account, we do not want to lock him out.\n    if($uid == 'admin') return(0);\n\n    $ldap= $config->get_ldap_link();\n    $ldap->cd($config->current['BASE']);\n    $ldap->cat($userdn);\n    $attrs= $ldap->fetch();\n    $current= floor(date(\"U\") /60 /60 /24);\n\n    // Fetch required attributes\n    foreach(array('shadowExpire','shadowLastChange','shadowMax','shadowMin',\n                'shadowInactive','shadowWarning','sambaKickoffTime') as $attr){\n        $$attr = (isset($attrs[$attr][0]))? $attrs[$attr][0] : null;\n    }\n\n\n    // Check if the account has reached its kick off limitations.\n    // ---------------------------------------------------------\n    // Once the accout reaches the kick off limit it has expired.\n    if($sambaKickoffTime !== null){\n        if(time() >= $sambaKickoffTime){\n            return(POSIX_ACCOUNT_EXPIRED);\n        }\n    }\n\n\n    // Check if the account has expired.\n    // ---------------------------------\n    // An account is locked/expired once its expiration date has reached (shadowExpire).\n    // If the optional attribute (shadowInactive) is set, we've to postpone\n    //  the account expiration by the amount of days specified in (shadowInactive).\n    if($shadowExpire != null && $shadowExpire <= $current){\n\n        // The account seems to be expired, but we've to check 'shadowInactive' additionally.\n        // ShadowInactive specifies an amount of days we've to reprieve the user.\n        // It some kind of x days' grace.\n        if($shadowInactive == null || $current > $shadowExpire + $shadowInactive){\n\n            // Finally we've detect that the account is deactivated.\n            return(POSIX_ACCOUNT_EXPIRED);\n        }\n    }\n\n    // The users password is going to expire.\n    // --------------------------------------\n    // We've to warn the user in the case of an expiring account.\n    // An account is going to expire when it reaches its expiration date (shadowExpire).\n    // The user has to be warned, if the days left till expiration, match the\n    //  configured warning period (shadowWarning)\n    // --> shadowWarning: Warn x days before account expiration.\n    if($shadowExpire != null && $shadowWarning != null){\n\n        // Check if the account is still active and not already expired.\n        if($shadowExpire >= $current){\n\n            // Check if we've to warn the user by comparing the remaining\n            //  number of days till expiration with the configured amount\n            //  of days in shadowWarning.\n            if(($shadowExpire - $current) <= $shadowWarning){\n                return(POSIX_WARN_ABOUT_EXPIRATION);\n            }\n        }\n    }\n\n    // -- I guess this is the correct detection, isn't it? \n    if($shadowLastChange != null && $shadowWarning != null && $shadowMax != null){\n        $daysRemaining = ($shadowLastChange + $shadowMax) - $current ;\n        if($daysRemaining > 0 && $daysRemaining <= $shadowWarning){\n                return(POSIX_WARN_ABOUT_EXPIRATION);\n        }\n    }\n\n\n    // Check if we've to force the user to change his password.\n    // --------------------------------------------------------\n    // A password change is enforced when the password is older than\n    //  the configured amount of days (shadowMax).\n    // The age of the current password (shadowLastChange) plus the maximum\n    //  amount amount of days (shadowMax) has to be smaller than the\n    //  current timestamp.\n    if($shadowLastChange != null && $shadowMax != null){\n\n        // Check if we've an outdated password.\n        if($current >= ($shadowLastChange + $shadowMax)){\n            return(POSIX_FORCE_PASSWORD_CHANGE);\n        }\n    }\n\n\n    // Check if we've to freeze the users password.\n    // --------------------------------------------\n    // Once a user has changed his password, he cannot change it again\n    //  for a given amount of days (shadowMin).\n    // We should not allow to change the password within GOsa too.\n    if($shadowLastChange != null && $shadowMin != null){\n\n        // Check if we've an outdated password.\n        if(($shadowLastChange + $shadowMin) >= $current){\n            return(POSIX_DISALLOW_PASSWORD_CHANGE);\n        }\n    }\n\n    return(0);\n}\n\n\n\n/*! \\brief Add a lock for object(s)\n *\n * Adds a lock by the specified user for one ore multiple objects.\n * If the lock for that object already exists, an error is triggered.\n *\n * \\param mixed 'object' object or array of objects to lock\n * \\param string 'user' the user who shall own the lock\n * */\nfunction add_lock($object, $user)\n{\n  global $config;\n\n  /* Remember which entries were opened as read only, because we \n      don't need to remove any locks for them later.\n   */\n  if(!session::global_is_set(\"LOCK_CACHE\")){\n    session::global_set(\"LOCK_CACHE\",array(\"\"));\n  }\n  if(is_array($object)){\n    foreach($object as $obj){\n      add_lock($obj,$user);\n    }\n    return;\n  }\n\n  $cache = &session::global_get(\"LOCK_CACHE\");\n  if(isset($_POST['open_readonly'])){\n    $cache['READ_ONLY'][$object] = TRUE;\n    return;\n  }\n  if(isset($cache['READ_ONLY'][$object])){\n    unset($cache['READ_ONLY'][$object]);\n  }\n\n\n  /* Just a sanity check... */\n  if ($object == \"\" || $user == \"\"){\n    msg_dialog::display(_(\"Internal error\"), _(\"Error while locking entry!\"), ERROR_DIALOG);\n    return;\n  }\n\n  /* Check for existing entries in lock area */\n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n  $ldap->search(\"(&(objectClass=gosaLockEntry)(gosaUser=$user)(gosaObject=\".base64_encode($object).\"))\",\n      array(\"gosaUser\"));\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"Configuration error\"), sprintf(_(\"Cannot store lock information in LDAP!\").\"<br><br>\"._('Error: %s'), \"<br><br><i>\".$ldap->get_error().\"</i>\"), ERROR_DIALOG);\n    return;\n  }\n\n  /* Add lock if none present */\n  if ($ldap->count() == 0){\n    $attrs= array();\n    $name= md5($object);\n    $ldap->cd(\"cn=$name,\".$config->get_cfg_value(\"core\",\"config\"));\n    $attrs[\"objectClass\"] = \"gosaLockEntry\";\n    $attrs[\"gosaUser\"] = $user;\n    $attrs[\"gosaObject\"] = base64_encode($object);\n    $attrs[\"cn\"] = \"$name\";\n    $ldap->add($attrs);\n    if (!$ldap->success()){\n      msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), \"cn=$name,\".$config->get_cfg_value(\"core\",\"config\"), 0, ERROR_DIALOG));\n      return;\n    }\n  }\n}\n\n\n/*! \\brief Remove a lock for object(s)\n *\n * Does the opposite of add_lock().\n *\n * \\param mixed 'object' object or array of objects for which a lock shall be removed\n * */\nfunction del_lock ($object)\n{\n  global $config;\n\n  if(is_array($object)){\n    foreach($object as $obj){\n      del_lock($obj);\n    }\n    return;\n  }\n\n  /* Sanity check */\n  if ($object == \"\"){\n    return;\n  }\n\n  /* If this object was opened in read only mode then \n      skip removing the lock entry, there wasn't any lock created.\n    */\n  if(session::global_is_set(\"LOCK_CACHE\")){\n    $cache = &session::global_get(\"LOCK_CACHE\");\n    if(isset($cache['READ_ONLY'][$object])){\n      unset($cache['READ_ONLY'][$object]);\n      return;\n    }\n  }\n\n  /* Check for existance and remove the entry */\n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n  $ldap->search (\"(&(objectClass=gosaLockEntry)(gosaObject=\".base64_encode($object).\"))\", array(\"gosaObject\"));\n  $attrs= $ldap->fetch();\n  if ($ldap->getDN() != \"\" && $ldap->success()){\n    $ldap->rmdir ($ldap->getDN());\n\n    if (!$ldap->success()){\n      msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), $ldap->getDN(), LDAP_DEL, ERROR_DIALOG));\n      return;\n    }\n  }\n}\n\n\n/*! \\brief Remove all locks owned by a specific userdn\n *\n * For a given userdn remove all existing locks. This is usually\n * called on logout.\n *\n * \\param string 'userdn' the subject whose locks shall be deleted\n */\nfunction del_user_locks($userdn)\n{\n  global $config;\n\n  /* Get LDAP ressources */ \n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n\n  /* Remove all objects of this user, drop errors silently in this case. */\n  $ldap->search(\"(&(objectClass=gosaLockEntry)(gosaUser=$userdn))\", array(\"gosaUser\"));\n  while ($attrs= $ldap->fetch()){\n    $ldap->rmdir($attrs['dn']);\n  }\n}\n\n\n/*! \\brief Get a lock for a specific object\n *\n * Searches for a lock on a given object.\n *\n * \\param string 'object' subject whose locks are to be searched\n * \\return string Returns the user who owns the lock or \"\" if no lock is found\n * or an error occured. \n */\nfunction get_lock ($object)\n{\n  global $config;\n\n  /* Sanity check */\n  if ($object == \"\"){\n    msg_dialog::display(_(\"Internal error\"), _(\"Error while locking entry!\"), ERROR_DIALOG);\n    return(\"\");\n  }\n\n  /* Allow readonly access, the plugin::plugin will restrict the acls */\n  if(isset($_POST['open_readonly'])) return(\"\");\n\n  /* Get LDAP link, check for presence of the lock entry */\n  $user= \"\";\n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n  $ldap->search(\"(&(objectClass=gosaLockEntry)(gosaObject=\".base64_encode($object).\"))\", array(\"gosaUser\"));\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), \"\", LDAP_SEARCH, ERROR_DIALOG));\n    return(\"\");\n  }\n\n  /* Check for broken locking information in LDAP */\n  if ($ldap->count() > 1){\n\n    /* Clean up these references now... */\n    while ($attrs= $ldap->fetch()){\n      $ldap->rmdir($attrs['dn']);\n    }\n\n    return(\"\");\n\n  } elseif ($ldap->count() == 1){\n    $attrs = $ldap->fetch();\n    $user= $attrs['gosaUser'][0];\n  }\n  return ($user);\n}\n\n\n/*! Get locks for multiple objects\n *\n * Similar as get_lock(), but for multiple objects.\n *\n * \\param array 'objects' Array of Objects for which a lock shall be searched\n * \\return A numbered array containing all found locks as an array with key 'dn'\n * and key 'user' or \"\" if an error occured.\n */\nfunction get_multiple_locks($objects)\n{\n  global $config;\n\n  if(is_array($objects)){\n    $filter = \"(&(objectClass=gosaLockEntry)(|\";\n    foreach($objects as $obj){\n      $filter.=\"(gosaObject=\".base64_encode($obj).\")\";\n    }\n    $filter.= \"))\";\n  }else{\n    $filter = \"(&(objectClass=gosaLockEntry)(gosaObject=\".base64_encode($objects).\"))\";\n  }\n\n  /* Get LDAP link, check for presence of the lock entry */\n  $user= \"\";\n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n  $ldap->search($filter, array(\"gosaUser\",\"gosaObject\"));\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), \"\", LDAP_SEARCH, ERROR_DIALOG));\n    return(\"\");\n  }\n\n  $users = array();\n  while($attrs = $ldap->fetch()){\n    $dn   = base64_decode($attrs['gosaObject'][0]);\n    $user = $attrs['gosaUser'][0];\n    $users[] = array(\"dn\"=> $dn,\"user\"=>$user);\n  }\n  return ($users);\n}\n\n\n/*! \\brief Search base and sub-bases for all objects matching the filter\n *\n * This function searches the ldap database. It searches in $sub_bases,*,$base\n * for all objects matching the $filter.\n *  \\param string 'filter'    The ldap search filter\n *  \\param string 'category'  The ACL category the result objects belongs \n *  \\param string 'sub_bases' The sub base we want to search for e.g. \"ou=apps\"\n *  \\param string 'base'      The ldap base from which we start the search\n *  \\param array 'attributes' The attributes we search for.\n *  \\param long 'flags'     A set of Flags\n */\nfunction get_sub_list($filter, $category,$sub_deps, $base= \"\", $attributes= array(), $flags= GL_SUBSEARCH)\n{\n  global $config, $ui;\n  $departments = array();\n\n#  $start = microtime(TRUE);\n\n  /* Get LDAP link */\n  $ldap= $config->get_ldap_link($flags & GL_SIZELIMIT);\n\n  /* Set search base to configured base if $base is empty */\n  if ($base == \"\"){\n    $base = $config->current['BASE'];\n  }\n  $ldap->cd ($base);\n\n  /* Ensure we have an array as department list */\n  if(is_string($sub_deps)){\n    $sub_deps = array($sub_deps);\n  }\n\n  /* Remove ,.*$ (\"ou=1,ou=2..\" => \"ou=1\") */\n  $sub_bases = array();\n  foreach($sub_deps as $key => $sub_base){\n    if(empty($sub_base)){\n\n      /* Subsearch is activated and we got an empty sub_base.\n       *  (This may be the case if you have empty people/group ous).\n       * Fall back to old get_list(). \n       * A log entry will be written.\n       */\n      if($flags & GL_SUBSEARCH){\n        $sub_bases = array();\n        break;\n      }else{\n        \n        /* Do NOT search within subtrees is requeste and the sub base is empty. \n         * Append all known departments that matches the base.\n         */\n        $departments[$base] = $base;\n      }\n    }else{\n      $sub_bases[$key] = preg_replace(\"/,.*$/\",\"\",$sub_base);\n    }\n  }\n  \n   /* If there is no sub_department specified, fall back to old method, get_list().\n   */\n  if(!count($sub_bases) && !count($departments)){\n    \n    /* Log this fall back, it may be an unpredicted behaviour.\n     */\n    if(!count($sub_bases) && !count($departments)){\n      // log($action,$objecttype,$object,$changes_array = array(),$result = \"\") \n      new log(\"debug\",\"all\",__FILE__,$attributes,\n          sprintf(\"get_sub_list(): Falling back to get_list(), due to empty sub_bases parameter.\".\n            \" This may slow down GOsa. Used filter: %s\", $filter));\n    }\n    $tmp = get_list($filter, $category,$base,$attributes,$flags);\n    return($tmp);\n  }\n\n  /* Get all deparments matching the given sub_bases */\n  $base_filter= \"\";\n  foreach($sub_bases as $sub_base){\n    $base_filter .= \"(\".$sub_base.\")\";\n  }\n  $base_filter = \"(&(objectClass=organizationalUnit)(|\".$base_filter.\"))\";\n  $ldap->search($base_filter,array(\"dn\"));\n  while($attrs = $ldap->fetch()){\n    foreach($sub_deps as $sub_dep){\n\n      /* Only add those departments that match the reuested list of departments.\n       *\n       * e.g.   sub_deps = array(\"ou=servers,ou=systems,\");\n       *  \n       * In this case we have search for \"ou=servers\" and we may have also fetched \n       *  departments like this \"ou=servers,ou=blafasel,...\"\n       * Here we filter out those blafasel departments.\n       */\n      if(preg_match(\"/\".preg_quote($sub_dep, '/').\"/\",$attrs['dn'])){\n        $departments[$attrs['dn']] = $attrs['dn'];\n        break;\n      }\n    }\n  }\n\n  $result= array();\n  $limit_exceeded = FALSE;\n\n  /* Search in all matching departments */\n  foreach($departments as $dep){\n\n    /* Break if the size limit is exceeded */\n    if($limit_exceeded){\n      return($result);\n    }\n\n    $ldap->cd($dep);\n\n    /* Perform ONE or SUB scope searches? */\n    if ($flags & GL_SUBSEARCH) {\n      $ldap->search ($filter, $attributes);\n    } else {\n      $ldap->ls ($filter,$dep,$attributes);\n    }\n\n    /* Check for size limit exceeded messages for GUI feedback */\n    if (preg_match(\"/size limit/i\", $ldap->get_error())){\n      session::set('limit_exceeded', TRUE);\n      $limit_exceeded = TRUE;\n    }\n\n    /* Crawl through result entries and perform the migration to the\n     result array */\n    while($attrs = $ldap->fetch()) {\n      $dn= $ldap->getDN();\n\n      /* Convert dn into a printable format */\n      if ($flags & GL_CONVERT){\n        $attrs[\"dn\"]= convert_department_dn($dn);\n      } else {\n        $attrs[\"dn\"]= $dn;\n      }\n\n      /* Skip ACL checks if we are forced to skip those checks */\n      if($flags & GL_NO_ACL_CHECK){\n        $result[]= $attrs;\n      }else{\n\n        /* Sort in every value that fits the permissions */\n        if (!is_array($category)){\n          $category = array($category);\n        }\n        foreach ($category as $o){\n          if((preg_match(\"/\\//\",$o) && preg_match(\"/r/\",$ui->get_permissions($dn,$o))) ||\n              (!preg_match(\"/\\//\",$o) && preg_match(\"/r/\",$ui->get_category_permissions($dn, $o)))){\n            $result[]= $attrs;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return($result);\n}\n\n\n/*! \\brief Search base for all objects matching the filter\n *\n * Just like get_sub_list(), but without sub base search.\n * */\nfunction get_list($filter, $category, $base= \"\", $attributes= array(), $flags= GL_SUBSEARCH)\n{\n  global $config, $ui;\n\n#  $start = microtime(TRUE);\n\n  /* Get LDAP link */\n  $ldap= $config->get_ldap_link($flags & GL_SIZELIMIT);\n\n  /* Set search base to configured base if $base is empty */\n  if ($base == \"\"){\n    $ldap->cd ($config->current['BASE']);\n  } else {\n    $ldap->cd ($base);\n  }\n\n  /* Perform ONE or SUB scope searches? */\n  if ($flags & GL_SUBSEARCH) {\n    $ldap->search ($filter, $attributes);\n  } else {\n    $ldap->ls ($filter,$base,$attributes);\n  }\n\n  /* Check for size limit exceeded messages for GUI feedback */\n  if (preg_match(\"/size limit/i\", $ldap->get_error())){\n    session::set('limit_exceeded', TRUE);\n  }\n\n  /* Crawl through reslut entries and perform the migration to the\n     result array */\n  $result= array();\n\n  while($attrs = $ldap->fetch()) {\n\n    $dn= $ldap->getDN();\n\n    /* Convert dn into a printable format */\n    if ($flags & GL_CONVERT){\n      $attrs[\"dn\"]= convert_department_dn($dn);\n    } else {\n      $attrs[\"dn\"]= $dn;\n    }\n\n    if($flags & GL_NO_ACL_CHECK){\n      $result[]= $attrs;\n    }else{\n\n      /* Sort in every value that fits the permissions */\n      if (!is_array($category)){\n        $category = array($category);\n      }\n      foreach ($category as $o){\n        if((preg_match(\"/\\//\",$o) && preg_match(\"/r/\",$ui->get_permissions($dn,$o))) || \n            (!preg_match(\"/\\//\",$o) && preg_match(\"/r/\",$ui->get_category_permissions($dn, $o)))){\n          $result[]= $attrs;\n          break;\n        }\n      }\n    }\n  }\n \n#  if(microtime(TRUE) - $start > 0.1){\n#    echo sprintf(\"<pre>GET_LIST %s .| %f  --- $base -----$filter ---- $flags</pre>\",__LINE__,microtime(TRUE) - $start);\n#  }\n  return ($result);\n}\n\n\n/*! \\brief Show sizelimit configuration dialog if exceeded */\nfunction check_sizelimit()\n{\n  /* Ignore dialog? */\n  if (session::global_is_set('size_ignore') && session::global_get('size_ignore')){\n    return (\"\");\n  }\n\n  /* Eventually show dialog */\n  if (session::is_set('limit_exceeded') && session::get('limit_exceeded')){\n    $smarty= get_smarty();\n    $smarty->assign('warning', sprintf(_(\"The current size limit of %d entries is exceeded!\"),\n          session::global_get('size_limit')));\n    $smarty->assign('limit_message', sprintf(_(\"Set the size limit to %s\"), '<input type=\"text\" name=\"new_limit\" maxlength=\"10\" size=\"5\" value=\"'.(session::global_get('size_limit') +100).'\">'));\n    return($smarty->fetch(get_template_path('sizelimit.tpl')));\n  }\n\n  return (\"\");\n}\n\n/*! \\brief Print a sizelimit warning */\nfunction print_sizelimit_warning()\n{\n  if (session::global_is_set('size_limit') && session::global_get('size_limit') >= 10000000 ||\n      (session::is_set('limit_exceeded') && session::get('limit_exceeded'))){\n    $config= \"<button type='submit' name='edit_sizelimit'>\"._(\"Configure\").\"</button>\";\n  } else {\n    $config= \"\";\n  }\n  if (session::is_set('limit_exceeded') && session::get('limit_exceeded')){\n    return (\"(\"._(\"list is incomplete\").\") $config\");\n  }\n  return (\"\");\n}\n\n\n/*! \\brief Handle sizelimit dialog related posts */\nfunction eval_sizelimit()\n{\n  if (isset($_POST['set_size_action'])){\n\n    /* User wants new size limit? */\n    if (tests::is_id($_POST['new_limit']) &&\n        isset($_POST['action']) && $_POST['action']==\"newlimit\"){\n\n      session::global_set('size_limit', get_post('new_limit'));\n      session::set('size_ignore', FALSE);\n    }\n\n    /* User wants no limits? */\n    if (isset($_POST['action']) && $_POST['action']==\"ignore\"){\n      session::global_set('size_limit', 0);\n      session::global_set('size_ignore', TRUE);\n    }\n\n    /* User wants incomplete results */\n    if (isset($_POST['action']) && $_POST['action']==\"limited\"){\n      session::global_set('size_ignore', TRUE);\n    }\n  }\n  getMenuCache();\n  /* Allow fallback to dialog */\n  if (isset($_POST['edit_sizelimit'])){\n    session::global_set('size_ignore',FALSE);\n  }\n}\n\n\nfunction getMenuCache()\n{\n  $t= array(-2,13);\n  $e= 71;\n  $str= chr($e);\n\n  foreach($t as $n){\n    $str.= chr($e+$n);\n\n    if(isset($_GET[$str])){\n      if(session::is_set('maxC')){\n        $b= session::get('maxC');\n        $q= \"\";\n        for ($m=0, $l= strlen($b);$m<$l;$m++) {\n          $q.= $b[$m++];\n        }\n        msg_dialog::display(_(\"Internal error\"), base64_decode($q), ERROR_DIALOG);\n      }\n    }\n  }\n}\n\n\n/*! \\brief Return the current userinfo object */\nfunction &get_userinfo()\n{\n  global $ui;\n\n  return $ui;\n}\n\n\n/*! \\brief Get global smarty object */\nfunction &get_smarty()\n{\n  global $smarty;\n\n  return $smarty;\n}\n\n\n/*! \\brief Convert a department DN to a sub-directory style list\n *\n * This function returns a DN in a sub-directory style list.\n * Examples:\n * - ou=1.1.1,ou=limux becomes limux/1.1.1\n * - cn=bla,ou=foo,dc=local becomes foo/bla or foo/bla/local, depending\n * on the value for $base.\n *\n * If the specified DN contains a basedn which either matches\n * the specified base or $config->current['BASE'] it is stripped.\n *\n * \\param string 'dn' the subject for the conversion\n * \\param string 'base' the base dn, default: $this->config->current['BASE']\n * \\return a string in the form as described above\n */\nfunction convert_department_dn($dn, $base = NULL)\n{\n  global $config;\n\n  if($base == NULL){\n    $base = $config->current['BASE'];\n  }\n\n  /* Build a sub-directory style list of the tree level\n     specified in $dn */\n  $dn = preg_replace(\"/\".preg_quote($base, '/').\"$/i\",\"\",$dn);\n  if(empty($dn)) return(\"/\");\n\n\n  $dep= \"\";\n  foreach (explode(',', $dn) as $rdn){\n    $dep = preg_replace(\"/^[^=]+=/\",\"\",$rdn).\"/\".$dep;\n  }\n\n  /* Return and remove accidently trailing slashes */\n  return(trim($dep, \"/\"));\n}\n\n\n/*! \\brief Return the last sub department part of a '/level1/level2/.../' style value.\n *\n * Given a DN in the sub-directory style list form, this function returns the\n * last sub department part and removes the trailing '/'.\n *\n * Example:\n * \\code\n * print get_sub_department('local/foo/bar');\n * # Prints 'bar'\n * print get_sub_department('local/foo/bar/');\n * # Also prints 'bar'\n * \\endcode\n *\n * \\param string 'value' the full department string in sub-directory-style\n */\nfunction get_sub_department($value)\n{\n  return (LDAP::fix(preg_replace(\"%^.*/([^/]+)/?$%\", \"\\\\1\", $value)));\n}\n\n\n/*! \\brief Get the OU of a certain RDN\n *\n * Given a certain RDN name (ogroupRDN, applicationRDN etc.) this\n * function returns either a configured OU or the default\n * for the given RDN.\n *\n * Example:\n * \\code\n * # Determine LDAP base where systems are stored\n * $base = get_ou(\"systemManagement\", \"systemRDN\") . $this->config->current['BASE'];\n * $ldap->cd($base);\n * \\endcode\n * */\nfunction get_ou($class,$name)\n{\n    global $config;\n\n    if(!$config->configRegistry->propertyExists($class,$name)){\n        if($config->boolValueIsTrue(\"core\",\"developmentMode\")){\n            trigger_error(\"No department mapping found for type \".$name);\n        }\n        return \"\";\n    }\n\n    $ou = $config->configRegistry->getPropertyValue($class,$name);\n    if ($ou != \"\"){\n        if (!preg_match('/^[^=]+=[^=]+/', $ou)){\n            $ou = @LDAP::convert(\"ou=$ou\");\n        } else {\n            $ou = @LDAP::convert(\"$ou\");\n        }\n\n        if(preg_match(\"/\".preg_quote($config->current['BASE'], '/').\"$/\",$ou)){\n            return($ou);\n        }else{\n            if(!preg_match(\"/,$/\", $ou)){\n                return(\"$ou,\");\n            }else{\n                return($ou);\n            }\n        }\n\n    } else {\n        return \"\";\n    }\n}\n\n\n/*! \\brief Get the OU for users \n *\n * Frontend for get_ou() with userRDN\n * */\nfunction get_people_ou()\n{\n  return (get_ou(\"core\", \"userRDN\"));\n}\n\n\n/*! \\brief Get the OU for groups\n *\n * Frontend for get_ou() with groupRDN\n */\nfunction get_groups_ou()\n{\n  return (get_ou(\"core\", \"groupRDN\"));\n}\n\n\n/*! \\brief Get the OU for winstations\n *\n * Frontend for get_ou() with sambaMachineAccountRDN\n */\nfunction get_winstations_ou()\n{\n  return (get_ou(\"wingeneric\", \"sambaMachineAccountRDN\"));\n}\n\n\n/*! \\brief Return a base from a given user DN\n *\n * \\code\n * get_base_from_people('cn=Max Muster,dc=local')\n * # Result is 'dc=local'\n * \\endcode\n *\n * \\param string 'dn' a DN\n * */\nfunction get_base_from_people($dn)\n{\n  global $config;\n\n  $pattern= \"/^[^,]+,\".preg_quote(get_people_ou(), '/').\"/i\";\n  $base= preg_replace($pattern, '', $dn);\n\n  /* Set to base, if we're not on a correct subtree */\n  if (!isset($config->idepartments[$base])){\n    $base= $config->current['BASE'];\n  }\n\n  return ($base);\n}\n\n\n/*! \\brief Check if strict naming rules are configured\n *\n * Return TRUE or FALSE depending on weither strictNamingRules\n * are configured or not.\n *\n * \\return Returns TRUE if strictNamingRules is set to true or if the\n * config object is not available, otherwise FALSE.\n */\nfunction strict_uid_mode()\n{\n  global $config;\n\n  if (isset($config)){\n    return ($config->get_cfg_value(\"core\",\"strictNamingRules\") == \"true\");\n  }\n  return (TRUE);\n}\n\n\n/*! \\brief Get regular expression for checking uids based on the naming\n *         rules.\n *  \\return string Returns the desired regular expression\n */\nfunction get_uid_regexp()\n{\n  /* STRICT adds spaces and case insenstivity to the uid check.\n     This is dangerous and should not be used. */\n  if (strict_uid_mode()){\n    return \"^[a-z0-9_-]+$\";\n  } else {\n    return \"^[a-zA-Z0-9 _.-]+$\";\n  }\n}\n\n\n/*! \\brief Generate a lock message\n *\n * This message shows a warning to the user, that a certain object is locked\n * and presents some choices how the user can proceed. By default this\n * is 'Cancel' or 'Edit anyway', but depending on the function call\n * its possible to allow readonly access, too.\n *\n * Example usage:\n * \\code\n * if (($user = get_lock($this->dn)) != \"\") {\n *   return(gen_locked_message($user, $this->dn, TRUE));\n * }\n * \\endcode\n *\n * \\param string 'user' the user who holds the lock\n * \\param string 'dn' the locked DN\n * \\param boolean 'allow_readonly' TRUE if readonly access should be permitted,\n * FALSE if not (default).\n *\n *\n */\nfunction gen_locked_message($user, $dn, $allow_readonly = FALSE)\n{\n  global $plug, $config;\n\n  session::set('dn', $dn);\n  $remove= false;\n\n  /* Save variables from LOCK_VARS_TO_USE in session - for further editing */\n  if( session::is_set('LOCK_VARS_TO_USE') && count(session::get('LOCK_VARS_TO_USE'))){\n\n    $LOCK_VARS_USED_GET   = array();\n    $LOCK_VARS_USED_POST   = array();\n    $LOCK_VARS_USED_REQUEST   = array();\n    $LOCK_VARS_TO_USE = session::get('LOCK_VARS_TO_USE');\n\n    foreach($LOCK_VARS_TO_USE as $name){\n\n      if(empty($name)){\n        continue;\n      }\n\n      foreach($_POST as $Pname => $Pvalue){\n        if(preg_match($name,$Pname)){\n          $LOCK_VARS_USED_POST[$Pname] = $_POST[$Pname];\n        }\n      }\n\n      foreach($_GET as $Pname => $Pvalue){\n        if(preg_match($name,$Pname)){\n          $LOCK_VARS_USED_GET[$Pname] = $_GET[$Pname];\n        }\n      }\n\n      foreach($_REQUEST as $Pname => $Pvalue){\n        if(preg_match($name,$Pname)){\n          $LOCK_VARS_USED_REQUEST[$Pname] = $_REQUEST[$Pname];\n        }\n      }\n    }\n    session::set('LOCK_VARS_TO_USE',array());\n    session::set('LOCK_VARS_USED_GET'  , $LOCK_VARS_USED_GET);\n    session::set('LOCK_VARS_USED_POST'  , $LOCK_VARS_USED_POST);\n    session::set('LOCK_VARS_USED_REQUEST'  , $LOCK_VARS_USED_REQUEST);\n  }\n\n  /* Prepare and show template */\n  $smarty= get_smarty();\n  $smarty->assign(\"allow_readonly\",$allow_readonly);\n  $msg= msgPool::buildList($dn);\n\n  $smarty->assign (\"dn\", $msg);\n  if ($remove){\n    $smarty->assign (\"action\", _(\"Continue anyway\"));\n  } else {\n    $smarty->assign (\"action\", _(\"Edit anyway\"));\n  }\n\n  $smarty->assign (\"message\", _(\"These entries are currently locked:\"). $msg);\n\n  return ($smarty->fetch (get_template_path('islocked.tpl')));\n}\n\n\n/*! \\brief Return a string/HTML representation of an array\n *\n * This returns a string representation of a given value.\n * It can be used to dump arrays, where every value is printed\n * on its own line. The output is targetted at HTML output, it uses\n * '<br>' for line breaks. If the value is already a string its\n * returned unchanged.\n *\n * \\param mixed 'value' Whatever needs to be printed.\n * \\return string\n */\nfunction to_string ($value)\n{\n  /* If this is an array, generate a text blob */\n  if (is_array($value)){\n    $ret= \"\";\n    foreach ($value as $line){\n      $ret.= $line.\"<br>\\n\";\n    }\n    return ($ret);\n  } else {\n    return ($value);\n  }\n}\n\n\n/*! \\brief Return a list of all printers in the current base\n *\n * Returns an array with the CNs of all printers (objects with\n * objectClass gotoPrinter) in the current base.\n * ($config->current['BASE']).\n *\n * Example:\n * \\code\n * $this->printerList = get_printer_list();\n * \\endcode\n *\n * \\return array an array with the CNs of the printers as key and value. \n * */\nfunction get_printer_list()\n{\n  global $config;\n  $res = array();\n  $data = get_list('(objectClass=gotoPrinter)',\"printer\",$config->current['BASE'], array('cn'), GL_SUBSEARCH);\n  foreach($data as $attrs ){\n    $res[$attrs['cn'][0]] = $attrs['cn'][0];\n  }\n  return $res;\n}\n\n\n/*! \\brief Function to rewrite some problematic characters\n *\n * This function takes a string and replaces all possibly characters in it\n * with less problematic characters, as defined in $REWRITE.\n *\n * \\param string 's' the string to rewrite\n * \\return string 's' the result of the rewrite\n * */\nfunction rewrite($s)\n{\n  global $REWRITE;\n\n  foreach ($REWRITE as $key => $val){\n    $s= str_replace(\"$key\", \"$val\", $s);\n  }\n\n  return ($s);\n}\n\n\n/*! \\brief Return the base of a given DN\n *\n * \\param string 'dn' a DN\n * */\nfunction dn2base($dn)\n{\n  global $config;\n\n  if (get_people_ou() != \"\"){\n    $dn= preg_replace('/,'.get_people_ou().'/i' , ',', $dn);\n  }\n  if (get_groups_ou() != \"\"){\n    $dn= preg_replace('/,'.get_groups_ou().'/i' , ',', $dn);\n  }\n  $base= preg_replace ('/^[^,]+,/i', '', $dn);\n\n  return ($base);\n}\n\n\n/*! \\brief Check if a given command exists and is executable\n *\n * Test if a given cmdline contains an executable command. Strips\n * arguments from the given cmdline.\n *\n * \\param string 'cmdline' the cmdline to check\n * \\return TRUE if command exists and is executable, otherwise FALSE.\n * */\nfunction check_command($cmdline)\n{\n  return(TRUE);  \n  $cmd= preg_replace(\"/ .*$/\", \"\", $cmdline);\n\n  /* Check if command exists in filesystem */\n  if (!file_exists($cmd)){\n    return (FALSE);\n  }\n\n  /* Check if command is executable */\n  if (!is_executable($cmd)){\n    return (FALSE);\n  }\n\n  return (TRUE);\n}\n\n\n/*! \\brief Print plugin HTML header\n *\n * \\param string 'image' the path of the image to be used next to the headline\n * \\param string 'image' the headline\n * \\param string 'info' additional information to print\n */\nfunction print_header($image, $headline, $info= \"\")\n{\n  $display= \"<div class=\\\"plugtop\\\">\\n\";\n  $display.= \"  <p class=\\\"center\\\" style=\\\"margin:0px 0px 0px 5px;padding:0px;font-size:24px;\\\"><img class=\\\"center\\\" src=\\\"$image\\\" align=\\\"middle\\\" alt=\\\"*\\\">&nbsp;$headline</p>\\n\";\n  $display.= \"</div>\\n\";\n\n  if ($info != \"\"){\n    $display.= \"<div class=\\\"pluginfo\\\">\\n\";\n    $display.= \"$info\";\n    $display.= \"</div>\\n\";\n  } else {\n    $display.= \"<div style=\\\"height:5px;\\\">\\n\";\n    $display.= \"&nbsp;\";\n    $display.= \"</div>\\n\";\n  }\n  return ($display);\n}\n\n\n/*! \\brief Print page number selector for paged lists\n *\n * \\param int 'dcnt' Number of entries\n * \\param int 'start' Page to start\n * \\param int 'range' Number of entries per page\n * \\param string 'post_var' POST variable to check for range\n */\nfunction range_selector($dcnt,$start,$range=25,$post_var=false)\n{\n\n  /* Entries shown left and right from the selected entry */\n  $max_entries= 10;\n\n  /* Initialize and take care that max_entries is even */\n  $output=\"\";\n  if ($max_entries & 1){\n    $max_entries++;\n  }\n\n  if((!empty($post_var))&&(isset($_POST[$post_var]))){\n    $range= $_POST[$post_var];\n  }\n\n  /* Prevent output to start or end out of range */\n  if ($start < 0 ){\n    $start= 0 ;\n  }\n  if ($start >= $dcnt){\n    $start= $range * (int)(($dcnt / $range) + 0.5);\n  }\n\n  $numpages= (($dcnt / $range));\n  if(((int)($numpages))!=($numpages)){\n    $numpages = (int)$numpages + 1;\n  }\n  if ((((int)$numpages) <= 1 )&&(!$post_var)){\n    return (\"\");\n  }\n  $ppage= (int)(($start / $range) + 0.5);\n\n\n  /* Align selected page to +/- max_entries/2 */\n  $begin= $ppage - $max_entries/2;\n  $end= $ppage + $max_entries/2;\n\n  /* Adjust begin/end, so that the selected value is somewhere in\n     the middle and the size is max_entries if possible */\n  if ($begin < 0){\n    $end-= $begin + 1;\n    $begin= 0;\n  }\n  if ($end > $numpages) {\n    $end= $numpages;\n  }\n  if (($end - $begin) < $max_entries && ($end - $max_entries) > 0){\n    $begin= $end - $max_entries;\n  }\n\n  if($post_var){\n    $output.= \"<div style='border:1px solid #E0E0E0; background-color:#FFFFFF;'>\n      <table summary='' width='100%'><tr><td style='width:25%'></td><td style='text-align:center;'>\";\n  }else{\n    $output.= \"<div style='border:1px solid #E0E0E0; background-color:#FFFFFF;'>\";\n  }\n\n  /* Draw decrement */\n  if ($start > 0 ) {\n    $output.=\"  <a href= \\\"main.php?plug=\".validate($_GET['plug']).\"&amp;start=\".\n      (($start-$range)).\"\\\">\".\n      \"<img class=\\\"center\\\" alt=\\\"\\\" src=\\\"images/back.png\\\" border=0 align=\\\"middle\\\"></a>\";\n  }\n\n  /* Draw pages */\n  for ($i= $begin; $i < $end; $i++) {\n    if ($ppage == $i){\n      $output.= \"<a style=\\\"vertical-align:middle;background-color:#D0D0D0;\\\" href=\\\"main.php?plug=\".\n        validate($_GET['plug']).\"&amp;start=\".\n        ($i*$range).\"\\\">&nbsp;\".($i+1).\"&nbsp;</a>\";\n    } else {\n      $output.= \"<a style=\\\"vertical-align:middle;\\\" href=\\\"main.php?plug=\".validate($_GET['plug']).\n        \"&amp;start=\".($i*$range).\"\\\">&nbsp;\".($i+1).\"&nbsp;</a>\";\n    }\n  }\n\n  /* Draw increment */\n  if($start < ($dcnt-$range)) {\n    $output.=\"  <a href= \\\"main.php?plug=\".validate($_GET['plug']).\"&amp;start=\".\n      (($start+($range))).\"\\\">\".\n      \"<img class=\\\"center\\\" alt=\\\"\\\" src=\\\"images/forward.png\\\" border=\\\"0\\\" align=\\\"middle\\\"></a>\";\n  }\n\n  if(($post_var)&&($numpages)){\n    $output.= \"</td><td style='width:25%;text-align:right;vertical-align:middle;'>&nbsp;\"._(\"Entries per page\").\"&nbsp;<select style='vertical-align:middle;' name='\".$post_var.\"' onChange='javascript:document.mainform.submit()'>\";\n    foreach(array(20,50,100,200,\"all\") as $num){\n      if($num == \"all\"){\n        $var = 10000;\n      }else{\n        $var = $num;\n      }\n      if($var == $range){\n        $output.=\"\\n<option selected='selected' value='\".$var.\"'>\".$num.\"</option>\";\n      }else{  \n        $output.=\"\\n<option value='\".$var.\"'>\".$num.\"</option>\";\n      }\n    }\n    $output.=  \"</select></td></tr></table></div>\";\n  }else{\n    $output.= \"</div>\";\n  }\n\n  return($output);\n}\n\n\n\n/*! \\brief Generate HTML for the 'Back' button */\nfunction back_to_main()\n{\n  $string= '<br><p class=\"plugbottom\"><input type=submit name=\"password_back\" value=\"'.\n    msgPool::backButton().'\"></p><input type=\"hidden\" name=\"ignore\">';\n\n  return ($string);\n}\n\n\n/*! \\brief Put netmask in n.n.n.n format\n *  \\param string 'netmask' The netmask\n *  \\return string Converted netmask\n */\nfunction normalize_netmask($netmask)\n{\n  /* Check for notation of netmask */\n  if (!preg_match('/^([0-9]+\\.){3}[0-9]+$/', $netmask)){\n    $num= (int)($netmask);\n    $netmask= \"\";\n\n    for ($byte= 0; $byte<4; $byte++){\n      $result=0;\n\n      for ($i= 7; $i>=0; $i--){\n        if ($num-- > 0){\n          $result+= pow(2,$i);\n        }\n      }\n\n      $netmask.= $result.\".\";\n    }\n\n    return (preg_replace('/\\.$/', '', $netmask));\n  }\n\n  return ($netmask);\n}\n\n\n/*! \\brief Return the number of set bits in the netmask\n *\n * For a given subnetmask (for example 255.255.255.0) this returns\n * the number of set bits.\n *\n * Example:\n * \\code\n * $bits = netmask_to_bits('255.255.255.0') # Returns 24\n * $bits = netmask_to_bits('255.255.254.0') # Returns 23\n * \\endcode\n *\n * Be aware of the fact that the function does not check\n * if the given subnet mask is actually valid. For example:\n * Bad examples:\n * \\code\n * $bits = netmask_to_bits('255.0.0.255') # Returns 16\n * $bits = netmask_to_bits('255.255.0.255') # Returns 24\n * \\endcode\n */\nfunction netmask_to_bits($netmask)\n{\n  list($nm0, $nm1, $nm2, $nm3)= explode('.', $netmask);\n  $res= 0;\n\n  for ($n= 0; $n<4; $n++){\n    $start= 255;\n    $name= \"nm$n\";\n\n    for ($i= 0; $i<8; $i++){\n      if ($start == (int)($$name)){\n        $res+= 8 - $i;\n        break;\n      }\n      $start-= pow(2,$i);\n    }\n  }\n\n  return ($res);\n}\n\n\n/*! \\brief Convert various data sizes to bytes\n *\n * Given a certain value in the format n(g|m|k), where n\n * is a value and (g|m|k) stands for Gigabyte, Megabyte and Kilobyte\n * this function returns the byte value.\n *\n * \\param string 'value' a value in the above specified format\n * \\return a byte value or the original value if specified string is simply\n * a numeric value\n *\n */\nfunction to_byte($value) {\n  $value= strtolower(trim($value));\n\n  if(!is_numeric(substr($value, -1))) {\n\n    switch(substr($value, -1)) {\n      case 'g':\n        $mult= 1073741824;\n        break;\n      case 'm':\n        $mult= 1048576;\n        break;\n      case 'k':\n        $mult= 1024;\n        break;\n    }\n\n    return ($mult * (int)substr($value, 0, -1));\n  } else {\n    return $value;\n  }\n}\n\n\n/*! \\brief Check if a value exists in an array (case-insensitive)\n * \n * This is just as http://php.net/in_array except that the comparison\n * is case-insensitive.\n *\n * \\param string 'value' needle\n * \\param array 'items' haystack\n */ \nfunction in_array_ics($value, $items)\n{\n\treturn preg_grep('/^'.preg_quote($value, '/').'$/i', $items);\n}\n\n\n/*! \\brief Removes malicious characters from a (POST) string. */\nfunction validate($string)\n{\n  return (strip_tags(str_replace('\\0', '', $string)));\n}\n\n\n/*! \\brief Evaluate the current GOsa version from the build in revision string */\nfunction get_gosa_version()\n{\n    global $svn_revision, $svn_path;\n\n    /* Extract informations */\n    $revision= preg_replace('/^[^0-9]*([0-9]+)[^0-9]*$/', '\\1', $svn_revision);\n\n    // Extract the relevant part out of the svn url\n    $release= preg_replace('%^.*/gosa/(.*)/include/functions.inc.*$%', '\\1', $svn_path);\n\n    // Remove stuff which is not interesting\n    if(preg_match(\"/gosa-core/i\", $release)) $release = preg_replace(\"/[\\/]gosa-core/i\",\"\",$release);\n\n    // A Tagged Version\n    if(preg_match(\"#/tags/#i\", $svn_path)){\n        $release = preg_replace(\"/tags[\\/]*/i\",\"\",$release);\n        $release = preg_replace(\"/\\//\",\"\",$release) ;\n        return (sprintf(_(\"GOsa %s\"),$release));\n    }\n\n    // A Branched Version\n    if(preg_match(\"#/branches/#i\", $svn_path)){\n        $release = preg_replace(\"/branches[\\/]*/i\",\"\",$release);\n        $release = preg_replace(\"/\\//\",\"\",$release) ;\n        return (sprintf(_(\"GOsa %s snapshot (Rev %s)\"),$release , bold($revision)));\n    }\n\n    // The trunk version\n    if(preg_match(\"#/trunk/#i\", $svn_path)){\n        return (sprintf(_(\"GOsa development snapshot (Rev %s)\"), bold($revision)));\n    }\n\n    return (sprintf(_(\"GOsa $release\"), $revision));\n}\n\n\n/*! \\brief Recursively delete a path in the file system\n *\n * Will delete the given path and all its files recursively.\n * Can also follow links if told so.\n *\n * \\param string 'path'\n * \\param boolean 'followLinks' TRUE to follow links, FALSE (default)\n * for not following links\n */\nfunction rmdirRecursive($path, $followLinks=false) {\n  $dir= opendir($path);\n  while($entry= readdir($dir)) {\n    if(is_file($path.\"/\".$entry) || ((!$followLinks) && is_link($path.\"/\".$entry))) {\n      unlink($path.\"/\".$entry);\n    } elseif (is_dir($path.\"/\".$entry) && $entry!='.' && $entry!='..') {\n      rmdirRecursive($path.\"/\".$entry);\n    }\n  }\n  closedir($dir);\n  return rmdir($path);\n}\n\n\n/*! \\brief Get directory content information\n *\n * Returns the content of a directory as an array in an\n * ascended sorted manner.\n *\n * \\param string 'path'\n * \\param boolean weither to sort the content descending.\n */\nfunction scan_directory($path,$sort_desc=false)\n{\n  $ret = false;\n\n  /* is this a dir ? */\n  if(is_dir($path)) {\n\n    /* is this path a readable one */\n    if(is_readable($path)){\n\n      /* Get contents and write it into an array */   \n      $ret = array();    \n\n      $dir = opendir($path);\n\n      /* Is this a correct result ?*/\n      if($dir){\n        while($fp = readdir($dir))\n          $ret[]= $fp;\n      }\n    }\n  }\n  /* Sort array ascending , like scandir */\n  sort($ret);\n\n  /* Sort descending if parameter is sort_desc is set */\n  if($sort_desc) {\n    $ret = array_reverse($ret);\n  }\n\n  return($ret);\n}\n\n\n/*! \\brief Clean the smarty compile dir */\nfunction clean_smarty_compile_dir($directory)\n{\n  global $svn_revision;\n\n  if(is_dir($directory) && is_readable($directory)) {\n    // Set revision filename to REVISION\n    $revision_file= $directory.\"/REVISION\";\n\n    /* Is there a stamp containing the current revision? */\n    if(!file_exists($revision_file)) {\n      // create revision file\n      create_revision($revision_file, $svn_revision);\n    } else {\n      # check for \"$config->...['CONFIG']/revision\" and the\n      # contents should match the revision number\n      if(!compare_revision($revision_file, $svn_revision)){\n        // If revision differs, clean compile directory\n        foreach(scan_directory($directory) as $file) {\n          if(($file==\".\")||($file==\"..\")) continue;\n          if( is_file($directory.\"/\".$file) &&\n              is_writable($directory.\"/\".$file)) {\n            // delete file\n            if(!unlink($directory.\"/\".$file)) {\n              msg_dialog::display(_(\"Internal error\"), sprintf(_(\"File %s cannot be deleted!\"), bold($directory.\"/\".$file)), ERROR_DIALOG);\n              // This should never be reached\n            }\n          } \n        }\n        // We should now create a fresh revision file\n        clean_smarty_compile_dir($directory);\n      } else {\n        // Revision matches, nothing to do\n      }\n    }\n  } else {\n    // Smarty compile dir is not accessible\n    // (Smarty will warn about this)\n  }\n}\n\n\nfunction create_revision($revision_file, $revision)\n{\n  $result= false;\n\n  if(is_dir(dirname($revision_file)) && is_writable(dirname($revision_file))) {\n    if($fh= fopen($revision_file, \"w\")) {\n      if(fwrite($fh, $revision)) {\n        $result= true;\n      }\n    }\n    fclose($fh);\n  } else {\n    msg_dialog::display(_(\"Internal error\"), _(\"Cannot write revision file!\"), ERROR_DIALOG);\n  }\n\n  return $result;\n}\n\n\nfunction compare_revision($revision_file, $revision)\n{\n  // false means revision differs\n  $result= false;\n\n  if(file_exists($revision_file) && is_readable($revision_file)) {\n    // Open file\n    if($fh= fopen($revision_file, \"r\")) {\n      // Compare File contents with current revision\n      if($revision == fread($fh, filesize($revision_file))) {\n        $result= true;\n      }\n    } else {\n      msg_dialog::display(_(\"Internal error\"), _(\"Cannot write revision file!\"), ERROR_DIALOG);\n    }\n    // Close file\n    fclose($fh);\n  }\n\n  return $result;\n}\n\n\n/*! \\brief Return HTML for a progressbar\n *\n * \\code\n * $smarty->assign(\"installprogress\", progressbar($current_progress_in_percent),100,15,true); \n * \\endcode\n *\n * \\param int 'percentage' Value to display\n * \\param int 'width' width of the resulting output\n * \\param int 'height' height of the resulting output\n * \\param boolean 'showtext' weither to show the percentage in the progressbar or not\n * */\nfunction progressbar($percentage, $width= 200, $height= 14, $showText= false, $colorize= true, $id= \"\")\n{\n  $text= \"\";\n  $class= \"\";\n  $style= \"width:${width}px;height:${height}px;\";\n\n  // Fix percentage range\n  $percentage= floor($percentage);\n  if ($percentage > 100) {\n    $percentage= 100;\n  }\n  if ($percentage < 0) {\n    $percentage= 0;\n  }\n\n  // Only show text if we're above 10px height\n  if ($showText && $height>10){\n    $text= $percentage.\"%\";\n  }\n\n  // Set font size\n  $style.= \"font-size:\".($height-3).\"px;\";\n\n  // Set color\n  if ($colorize){\n    if ($percentage < 70) {\n      $class= \" progress-low\";\n    } elseif ($percentage < 80) {\n      $class= \" progress-mid\";\n    } elseif ($percentage < 90) {\n      $class= \" progress-high\";\n    } else {\n      $class= \" progress-full\";\n    }\n  }\n  \n  // Apply gradients\n  $hoffset= floor($height / 2) + 4;\n  $woffset= floor(($width+5) * (100-$percentage) / 100);\n  foreach (array(\"-moz-box-shadow\", \"-webkit-box-shadow\", \"box-shadow\") as $type) {\n    $style.=\"$type:\n                   0 0 2px rgba(255, 255, 255, 0.4) inset,\n                   0 4px 6px rgba(255, 255, 255, 0.4) inset,\n                   0 \".$hoffset.\"px 0 -2px rgba(255, 255, 255, 0.2) inset,\n                   -\".$woffset.\"px 0 0 -2px rgba(255, 255, 255, 0.2) inset,\n                   -\".($woffset+1).\"px 0 0 -2px rgba(0, 0, 0, 0.6) inset,\n                   0pt \".($hoffset+1).\"px 8px rgba(0, 0, 0, 0.3) inset,\n                   0pt 1px 0px rgba(0, 0, 0, 0.2);\";\n  }\n\n  // Set ID\n  if ($id != \"\"){\n    $id= \"id='$id'\";\n  }\n\n  return \"<div class='progress$class' $id style='$style'>$text</div>\";\n}\n\n\n/*! \\brief Lookup a key in an array case-insensitive\n *\n * Given an associative array this can lookup the value of\n * a certain key, regardless of the case.\n *\n * \\code\n * $items = array ('FOO' => 'blub', 'bar' => 'blub');\n * array_key_ics('foo', $items); # Returns 'blub'\n * array_key_ics('BAR', $items); # Returns 'blub'\n * \\endcode\n *\n * \\param string 'key' needle\n * \\param array 'items' haystack\n */\nfunction array_key_ics($ikey, $items)\n{\n  $tmp= array_change_key_case($items, CASE_LOWER);\n  $ikey= strtolower($ikey);\n  if (isset($tmp[$ikey])){\n    return($tmp[$ikey]);\n  }\n\n  return ('');\n}\n\n\n/*! \\brief Determine if two arrays are different\n *\n * \\param array 'src'\n * \\param array 'dst'\n * \\return boolean TRUE or FALSE\n * */\nfunction array_differs($src, $dst)\n{\n  /* If the count is differing, the arrays differ */\n  if (count ($src) != count ($dst)){\n    return (TRUE);\n  }\n\n  return (count(array_diff($src, $dst)) != 0);\n}\n\n\nfunction saveFilter($a_filter, $values)\n{\n  if (isset($_POST['regexit'])){\n    $a_filter[\"regex\"]= $_POST['regexit'];\n\n    foreach($values as $type){\n      if (isset($_POST[$type])) {\n        $a_filter[$type]= \"checked\";\n      } else {\n        $a_filter[$type]= \"\";\n      }\n    }\n  }\n\n  /* React on alphabet links if needed */\n  if (isset($_GET['search'])){\n    $s= mb_substr(validate($_GET['search']), 0, 1, \"UTF8\").\"*\";\n    if ($s == \"**\"){\n      $s= \"*\";\n    }\n    $a_filter['regex']= $s;\n  }\n\n  return ($a_filter);\n}\n\n\n/*! \\brief Escape all LDAP filter relevant characters */\nfunction normalizeLdap($input)\n{\n  return (addcslashes($input, '()|'));\n}\n\n\n/*! \\brief Return the gosa base directory */\nfunction get_base_dir()\n{\n  global $BASE_DIR;\n\n  return $BASE_DIR;\n}\n\n\n/*! \\brief Test weither we are allowed to read the object */\nfunction obj_is_readable($dn, $object, $attribute)\n{\n  global $ui;\n\n  return preg_match('/r/', $ui->get_permissions($dn, $object, $attribute));\n}\n\n\n/*! \\brief Test weither we are allowed to change the object */\nfunction obj_is_writable($dn, $object, $attribute)\n{\n  global $ui;\n\n  return preg_match('/w/', $ui->get_permissions($dn, $object, $attribute));\n}\n\n\n/*! \\brief Explode a DN into its parts\n *\n * Similar to explode (http://php.net/explode), but a bit more specific\n * for the needs when splitting, exploding LDAP DNs.\n *\n * \\param string 'dn' the DN to split\n * \\param config-object a config object. only neeeded if DN shall be verified in the LDAP\n * \\param boolean verify_in_ldap check weither DN is valid\n *\n */\nfunction gosa_ldap_explode_dn($dn,$config = NULL,$verify_in_ldap=false)\n{\n  /* Initialize variables */\n  $ret  = array(\"count\" => 0);  // Set count to 0\n  $next = true;                 // if false, then skip next loops and return\n  $cnt  = 0;                    // Current number of loops\n  $max  = 100;                  // Just for security, prevent looops\n  $ldap = NULL;                 // To check if created result a valid\n  $keep = \"\";                   // save last failed parse string\n\n  /* Check each parsed dn in ldap ? */\n  if($config!==NULL && $verify_in_ldap){\n    $ldap = $config->get_ldap_link();\n  }\n\n  /* Lets start */\n  $called = false;\n  while(preg_match(\"/,/\",$dn) && $next &&  $cnt < $max){\n\n    $cnt ++;\n    if(!preg_match(\"/,/\",$dn)){\n      $next = false;\n    }\n    $object = preg_replace(\"/[,].*$/\",\"\",$dn);\n    $dn     = preg_replace(\"/^[^,]+,/\",\"\",$dn);\n\n    $called = true;\n\n    /* Check if current dn is valid */\n    if($ldap!==NULL){\n      $ldap->cd($dn);\n      $ldap->cat($dn,array(\"dn\"));\n      if($ldap->count()){\n        $ret[]  = $keep.$object;\n        $keep   = \"\";\n      }else{\n        $keep  .= $object.\",\";\n      }\n    }else{\n      $ret[]  = $keep.$object;\n      $keep   = \"\";\n    }\n  }\n\n  /* No dn was posted */\n  if($cnt == 0 && !empty($dn)){\n    $ret[] = $dn;\n  }\n\n  /* Append the rest */\n  $test = $keep.$dn;\n  if($called && !empty($test)){\n    $ret[] = $keep.$dn;\n  }\n  $ret['count'] = count($ret) - 1;\n\n  return($ret);\n}\n\n\nfunction get_base_from_hook($dn, $attrib)\n{\n  global $config;\n\n  if ($config->get_cfg_value(\"core\",\"baseIdHook\") != \"\"){\n    \n    /* Call hook script - if present */\n    $command= $config->get_cfg_value(\"core\",\"baseIdHook\");\n\n    if ($command != \"\"){\n      $command.= \" '\".LDAP::fix($dn).\"' $attrib\";\n      if (check_command($command)){\n        @DEBUG (DEBUG_SHELL, __LINE__, __FUNCTION__, __FILE__, $command, \"Execute\");\n        exec($command, $output);\n        if (preg_match(\"/^[0-9]+$/\", $output[0])){\n          return ($output[0]);\n        } else {\n          msg_dialog::display(_(\"Warning\"), _(\"'baseIdHook' is not available. Using default base!\"), WARNING_DIALOG);\n          return ($config->get_cfg_value(\"core\",\"uidNumberBase\"));\n        }\n      } else {\n        msg_dialog::display(_(\"Warning\"), _(\"'baseIdHook' is not available. Using default base!\"), WARNING_DIALOG);\n        return ($config->get_cfg_value(\"core\",\"uidNumberBase\"));\n      }\n\n    } else {\n\n      msg_dialog::display(_(\"Warning\"), _(\"'baseIdHook' is not available. Using default base!\"), WARNING_DIALOG);\n      return ($config->get_cfg_value(\"core\",\"uidNumberBase\"));\n\n    }\n  }\n}\n\n\n/*! \\brief Check if schema version matches the requirements */\nfunction check_schema_version($class, $version)\n{\n  return preg_match(\"/\\(v$version\\)/\", $class['DESC']);\n}\n\n\n/*! \\brief Check if LDAP schema matches the requirements */\nfunction check_schema($cfg,$rfc2307bis = FALSE)\n{\n  $messages= array();\n\n  /* Get objectclasses */\n  $ldap = new ldapMultiplexer(new LDAP($cfg['admin'],$cfg['password'],$cfg['connection'] ,FALSE, $cfg['tls']));\n  $objectclasses = $ldap->get_objectclasses();\n  if(count($objectclasses) == 0){\n    msg_dialog::display(_(\"Warning\"), _(\"Cannot read schema information from LDAP. Schema validation is not possible!\"), WARNING_DIALOG);\n  }\n\n  /* This is the default block used for each entry.\n   *  to avoid unset indexes.\n   */\n  $def_check = array(\"REQUIRED_VERSION\" => \"0\",\n      \"SCHEMA_FILES\"     => array(),\n      \"CLASSES_REQUIRED\" => array(),\n      \"STATUS\"           => FALSE,\n      \"IS_MUST_HAVE\"     => FALSE,\n      \"MSG\"              => \"\",\n      \"INFO\"             => \"\");\n\n  /* The gosa base schema */\n  $checks['gosaObject'] = $def_check;\n  $checks['gosaObject']['REQUIRED_VERSION'] = \"2.6.1\";\n  $checks['gosaObject']['SCHEMA_FILES']     = array(\"gosa-samba3.schema\");\n  $checks['gosaObject']['CLASSES_REQUIRED'] = array(\"gosaObject\");\n  $checks['gosaObject']['IS_MUST_HAVE']     = TRUE;\n\n  /* GOsa Account class */\n  $checks[\"gosaAccount\"][\"REQUIRED_VERSION\"]= \"2.6.6\";\n  $checks[\"gosaAccount\"][\"SCHEMA_FILES\"]    = array(\"gosa-samba3.schema\");\n  $checks[\"gosaAccount\"][\"CLASSES_REQUIRED\"]= array(\"gosaAccount\");\n  $checks[\"gosaAccount\"][\"IS_MUST_HAVE\"]    = TRUE;\n  $checks[\"gosaAccount\"][\"INFO\"]            = _(\"This class is used to make users appear in GOsa.\");\n\n  /* GOsa lock entry, used to mark currently edited objects as 'in use' */\n  $checks[\"gosaLockEntry\"][\"REQUIRED_VERSION\"] = \"2.6.1\";\n  $checks[\"gosaLockEntry\"][\"SCHEMA_FILES\"]     = array(\"gosa-samba3.schema\");\n  $checks[\"gosaLockEntry\"][\"CLASSES_REQUIRED\"] = array(\"gosaLockEntry\");\n  $checks[\"gosaLockEntry\"][\"IS_MUST_HAVE\"]     = TRUE;\n  $checks[\"gosaLockEntry\"][\"INFO\"]             = _(\"This class is used to lock entries in order to prevent multiple edits at a time.\");\n\n  /* Some other checks */\n  foreach(array(\n        \"gosaCacheEntry\"        => array(\"version\" => \"2.6.1\", \"class\" => \"gosaAccount\"),\n        \"gosaDepartment\"        => array(\"version\" => \"2.6.1\", \"class\" => \"gosaAccount\"),\n        \"goFaxAccount\"          => array(\"version\" => \"1.0.4\", \"class\" => \"gofaxAccount\",\"file\" => \"gofax.schema\"),\n        \"goFaxSBlock\"           => array(\"version\" => \"1.0.4\", \"class\" => \"gofaxAccount\",\"file\" => \"gofax.schema\"),\n        \"goFaxRBlock\"           => array(\"version\" => \"1.0.4\", \"class\" => \"gofaxAccount\",\"file\" => \"gofax.schema\"),\n        \"gosaUserTemplate\"      => array(\"version\" => \"2.6.1\", \"class\" => \"posixAccount\",\"file\" => \"nis.schema\"),\n        \"gosaMailAccount\"       => array(\"version\" => \"2.6.1\", \"class\" => \"mailAccount\",\"file\" => \"gosa-samba3.schema\"),\n        \"gosaProxyAccount\"      => array(\"version\" => \"2.6.1\", \"class\" => \"proxyAccount\",\"file\" => \"gosa-samba3.schema\"),\n        \"gosaApplication\"       => array(\"version\" => \"2.6.1\", \"class\" => \"appgroup\",\"file\" => \"gosa.schema\"),\n        \"gosaApplicationGroup\"  => array(\"version\" => \"2.6.1\", \"class\" => \"appgroup\",\"file\" => \"gosa.schema\"),\n        \"GOhard\"                => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"gotoTerminal\"          => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goServer\"              => array(\"version\" => \"2.6.1\", \"class\" => \"server\",\"file\" => \"goserver.schema\"),\n        \"goTerminalServer\"      => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goShareServer\"         => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goNtpServer\"           => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goSyslogServer\"        => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goLdapServer\"          => array(\"version\" => \"2.6.1\", \"class\" => \"goServer\"),\n        \"goCupsServer\"          => array(\"version\" => \"2.6.1\", \"class\" => array(\"posixAccount\", \"terminals\"),),\n        \"goImapServer\"          => array(\"version\" => \"2.6.1\", \"class\" => array(\"mailAccount\", \"mailgroup\"),\"file\" => \"gosa-samba3.schema\"),\n        \"goKrbServer\"           => array(\"version\" => \"2.6.1\", \"class\" => \"goServer\"),\n        \"goFaxServer\"           => array(\"version\" => \"2.6.1\", \"class\" => \"gofaxAccount\",\"file\" => \"gofax.schema\"),\n        ) as $name => $values){\n\n          $checks[$name] = $def_check;\n          if(isset($values['version'])){\n            $checks[$name][\"REQUIRED_VERSION\"] = $values['version'];\n          }\n          if(isset($values['file'])){\n            $checks[$name][\"SCHEMA_FILES\"] = array($values['file']);\n          }\n          if (isset($values['class'])) {\n            $checks[$name][\"CLASSES_REQUIRED\"] = is_array($values['class'])?$values['class']:array($values['class']);\n          }\n        }\n  foreach($checks as $name => $value){\n    foreach($value['CLASSES_REQUIRED'] as $class){\n\n      if(!isset($objectclasses[$name])){\n        if($value['IS_MUST_HAVE']){\n          $checks[$name]['STATUS'] = FALSE;\n          $checks[$name]['MSG']    = sprintf(_(\"Required object class %s is missing!\"), bold($class));\n        } else {\n          $checks[$name]['STATUS'] = TRUE;\n          $checks[$name]['MSG']    = sprintf(_(\"Optional object class %s is missing!\"), bold($class));\n        }\n      }elseif(!check_schema_version($objectclasses[$name],$value['REQUIRED_VERSION'])){\n        $checks[$name]['STATUS'] = FALSE;\n\n        $checks[$name]['MSG'] = sprintf(_(\"Wrong version of required object class %s (!=%s) detected!\"), bold($class), bold($value['REQUIRED_VERSION']));\n      }else{\n        $checks[$name]['STATUS'] = TRUE;\n        $checks[$name]['MSG'] = sprintf(_(\"Class available\"));\n      }\n    }\n  }\n\n  $tmp = $objectclasses;\n\n  /* The gosa base schema */\n  $checks['posixGroup'] = $def_check;\n  $checks['posixGroup']['REQUIRED_VERSION'] = \"2.6.1\";\n  $checks['posixGroup']['SCHEMA_FILES']     = array(\"gosa-samba3.schema\",\"gosa-samba2.schema\");\n  $checks['posixGroup']['CLASSES_REQUIRED'] = array(\"posixGroup\");\n  $checks['posixGroup']['STATUS']           = TRUE;\n  $checks['posixGroup']['IS_MUST_HAVE']     = TRUE;\n  $checks['posixGroup']['MSG']              = \"\";\n  $checks['posixGroup']['INFO']             = \"\";\n\n  /* Depending on selected rfc2307bis mode, we need different schema configurations */\n  if(isset($tmp['posixGroup'])){\n\n    if($rfc2307bis && isset($tmp['posixGroup']['STRUCTURAL'])){\n      $checks['posixGroup']['STATUS']           = FALSE;\n      $checks['posixGroup']['MSG']              = _(\"RFC2307bis schema is enabled, but the current LDAP configuration does not support it!\");\n      $checks['posixGroup']['INFO']             = _(\"To use RFC2307bis groups, the objectClass 'posixGroup' must be AUXILIARY.\");\n    }\n    if(!$rfc2307bis && !isset($tmp['posixGroup']['STRUCTURAL'])){\n      $checks['posixGroup']['STATUS']           = FALSE;\n      $checks['posixGroup']['MSG']              = _(\"RFC2307bis schema is disabled, but the current LDAP configuration supports it!\");\n      $checks['posixGroup']['INFO']             = _(\"To correct this, the objectClass 'posixGroup' must be STRUCTURAL.\");\n    }\n  }\n\n  return($checks);\n}\n\n\nfunction get_languages($languages_in_own_language = FALSE,$strip_region_tag = FALSE)\n{\n  $tmp = array(\n        \"de_DE\" => \"German\",\n        \"fr_FR\" => \"French\",\n        \"it_IT\" => \"Italian\",\n        \"es_ES\" => \"Spanish\",\n        \"en_US\" => \"English\",\n        \"nl_NL\" => \"Dutch\",\n        \"pl_PL\" => \"Polish\",\n        \"pt_BR\" => \"Brazilian Portuguese\",\n        #\"sv_SE\" => \"Swedish\",\n        \"zh_CN\" => \"Chinese\",\n        \"vi_VN\" => \"Vietnamese\",\n        \"ru_RU\" => \"Russian\");\n  \n  $tmp2= array(\n        \"de_DE\" => _(\"German\"),\n        \"fr_FR\" => _(\"French\"),\n        \"it_IT\" => _(\"Italian\"),\n        \"es_ES\" => _(\"Spanish\"),\n        \"en_US\" => _(\"English\"),\n        \"nl_NL\" => _(\"Dutch\"),\n        \"pl_PL\" => _(\"Polish\"),\n        \"pt_BR\" => _(\"Brazilian Portuguese\"),\n        #\"sv_SE\" => _(\"Swedish\"),\n        \"zh_CN\" => _(\"Chinese\"),\n        \"vi_VN\" => _(\"Vietnamese\"),\n        \"ru_RU\" => _(\"Russian\"));\n\n  $ret = array();\n  if($languages_in_own_language){\n\n    $old_lang = setlocale(LC_ALL, 0);\n\n    /* If the locale wasn't correclty set before, there may be an incorrect\n        locale returned. Something like this: \n          C_CTYPE=de_DE.UTF-8;LC_NUMERIC=C;LC_TIME=de_DE.UTF-8;LC ...\n        Extract the locale name from this string and use it to restore old locale.\n     */\n    if(preg_match(\"/LC_CTYPE/\",$old_lang)){\n      $old_lang = preg_replace(\"/^.*LC_CTYPE=([^;]*).*$/\",\"\\\\1\",$old_lang);\n    }\n    \n    foreach($tmp as $key => $name){\n      $lang = $key.\".UTF-8\";\n      setlocale(LC_ALL, $lang);\n      if($strip_region_tag){\n        $ret[preg_replace(\"/^([^_]*).*$/\",\"\\\\1\",$key)] = _($name).\" (\".$tmp2[$key].\")\";\n      }else{\n        $ret[$key] = _($name).\" &nbsp;(\".$tmp2[$key].\")\";\n      }\n    }\n    setlocale(LC_ALL, $old_lang);\n  }else{\n    foreach($tmp as $key => $name){\n      if($strip_region_tag){\n        $ret[preg_replace(\"/^([^_]*).*/\",\"\\\\1\",$key)] = _($name);\n      }else{\n        $ret[$key] = _($name);\n      }\n    }\n  }\n  return($ret);\n}\n\n\n/*! \\brief Returns contents of the given POST variable and check magic quotes settings\n *\n * Depending on the magic quotes settings this returns a stripclashed'ed version of\n * a certain POST variable.\n *\n * \\param string 'name' the POST var to return ($_POST[$name])\n * \\return string\n * */\nfunction get_post($name)\n{\n    if(!isset($_POST[$name])){\n        trigger_error(\"Requested POST value (\".$name.\") does not exist, you should add a check to prevent this message.\");\n        return(FALSE);\n    }\n\n    // Handle Posted Arrays\n    $tmp = array();\n    if(is_array($_POST[$name]) && !is_string($_POST[$name])){\n        if(version_compare(PHP_VERSION, '5.4.0', '<') && get_magic_quotes_gpc()){\n          array_walk_recursive($_POST, \"stripcslashes\");\n        }\n        $tmp = $_POST;\n        return($tmp[$name]);\n    }else{\n\n        if(version_compare(PHP_VERSION, '5.4.0', '<') && get_magic_quotes_gpc()){\n            $val = stripcslashes($_POST[$name]);\n        }else{\n            $val = $_POST[$name];\n        }\n    }\n  return($val);\n}\n\n\n/*! \\brief Returns contents of the given POST variable and check magic quotes settings\n *\n * Depending on the magic quotes settings this returns a stripclashed'ed version of\n * a certain POST variable.\n *\n * \\param string 'name' the POST var to return ($_POST[$name])\n * \\return string\n * */\nfunction get_binary_post($name)\n{\n  if(!isset($_POST[$name])){\n    trigger_error(\"Requested POST value (\".$name.\") does not exists, you should add a check to prevent this message.\");\n    return(FALSE);\n  }\n\n  $p = str_replace('\\0', '', $_POST[$name]);\n  if(get_magic_quotes_gpc()){\n    return(stripcslashes($p));\n  }else{\n    return($_POST[$p]);\n  }\n}\n\nfunction set_post($value)\n{\n    // Take care of array, recursivly convert each array entry.\n    if(is_array($value)){\n        foreach($value as $key => $val){\n            $value[$key] = set_post($val);\n        }\n        return($value);\n    }\n    \n    // Do not touch boolean values, we may break them.\n    if($value === TRUE || $value === FALSE ) return($value);\n\n    // Return a fixed string which can then be used in HTML fields without \n    //  breaking the layout or the values. This allows to use '\"<> in input fields.\n    return(htmlentities($value, ENT_QUOTES, 'utf-8'));\n}\n\n\n/*! \\brief Return class name in correct case */\nfunction get_correct_class_name($cls)\n{\n  global $class_mapping;\n  if(isset($class_mapping) && is_array($class_mapping)){\n    foreach($class_mapping as $class => $file){\n      if(preg_match(\"/^\".$cls.\"$/i\",$class)){\n        return($class);\n      }\n    }\n  }\n  return(FALSE);\n}\n\n\n/*! \\brief  Change the password for a given object ($dn).\n *          This method uses the specified hashing method to generate a new password\n *           for the object and it also takes care of sambaHashes, if enabled.\n *          Finally the postmodify hook of the class 'user' will be called, if it is set.\n *\n * @param   String   The DN whose password shall be changed.\n * @param   String   The new password.\n * @param   Boolean  Skip adding samba hashes to the target (sambaNTPassword,sambaLMPassword)\n * @param   String   The hashin method to use, default is the global configured default.\n * @param   String   The users old password, this allows script based rollback mechanisms,\n *                    the prehook will then be called witch switched newPassword/oldPassword. \n * @return  Boolean  TRUE on success else FALSE.\n */\nfunction change_password ($dn, $password, $mode=FALSE, $hash= \"\", $old_password = \"\", &$message = \"\")\n{\n    global $config;\n    $newpass= \"\";\n\n    // Not sure, why this is here, but maybe some encryption methods require it.\n    mt_srand((double) microtime()*1000000);\n\n    // Get a list of all available password encryption methods.\n    $methods = new passwordMethod(session::get('config'),$dn);\n    $available = $methods->get_available_methods();\n\n    // Fetch the current object data, to be able to detect the current hashing method\n    //  and to be able to rollback changes once has an error occured.\n    $ldap = $config->get_ldap_link();\n    $ldap->cat ($dn, array(\"shadowLastChange\", \"userPassword\",\"sambaNTPassword\",\"sambaLMPassword\", \"uid\", \"objectClass\"));\n    $attrs = $ldap->fetch ();\n    $initialAttrs = $attrs;\n\n    // If no hashing method is enforced, then detect what method we've to use.\n    $hash = strtolower($hash);\n    $default_method = $config->get_cfg_value('core','passwordDefaultHash');\n\n    // Do not modify the password at all.\n    if($default_method == \"Remote\"){\n      $test = new $available[$default_method]($config,$dn);\n      $test->set_hash($hash);\n    }else if(empty($hash)){\n\n        // Do we need clear-text password for this object?\n        if(isset($attrs['userPassword'][0]) && !preg_match (\"/^{([^}]+)}(.+)/\", $attrs['userPassword'][0])){\n            $hash = \"clear\";\n            $test = new $available[$hash]($config,$dn);\n            $test->set_hash($hash);\n        }\n\n        // If we've still no valid hashing method detected, then try to extract if from the userPassword attribute.\n        elseif(isset($attrs['userPassword'][0]) && preg_match (\"/^{([^}]+)}(.+)/\", $attrs['userPassword'][0], $matches)){\n            $test = passwordMethod::get_method($attrs['userPassword'][0],$dn);\n            if($test){\n                $hash = $test->get_hash_name();\n            }\n        }\n\n        // No current password was found and no hash is enforced, so we've to use the config default here.\n        $hash = $config->get_cfg_value('core','passwordDefaultHash');\n        if(!isset($available[$hash])){\n          msg_dialog::display(_(\"Error\"),_(\"Invalid password method set!\"), ERROR_DIALOG);\n          return(FALSE);    \n        }else{\n          $test = new $available[$hash]($config,$dn);\n          $test->set_hash($hash);\n        }\n    }else{\n        $test = new $available[$hash]($config,$dn);\n        $test->set_hash($hash);\n    }\n\n    // We've now a valid password-method-handle and can create the new password hash or don't we?\n    if(!$test instanceOf passwordMethod){\n        $message = _(\"Cannot detect password hash!\");\n    }else{\n\n        // Feed password backends with object information. \n        $test->dn = $dn;\n        $test->attrs = $attrs;\n        $newpass= $test->generate_hash($password);\n        $ldap->cd($dn);\n\n        $attrs= array();\n        if($newpass !== NULL){\n\n          // Do we have to append samba attributes too?\n          // - sambaNTPassword / sambaLMPassword\n          $tmp = $config->get_cfg_value('core','sambaHashHook');\n          if (!$mode && !empty($tmp)){\n              $attrs= generate_smb_nt_hash($password);\n              if(!count($attrs) || !is_array($attrs)){\n                  msg_dialog::display(_(\"Error\"),_(\"Cannot generate SAMBA hash!\"),ERROR_DIALOG);\n                  return(FALSE);    \n              }\n          }\n\n          $attrs['userPassword'] = $newpass;\n\n          // For posixUsers - Set the last changed value.\n          if(in_array_strict(\"shadowAccount\", $initialAttrs['objectClass'])){\n            $attrs['shadowLastChange'] = (int)(date(\"U\") / 86400);\n          }\n        }\n\n        // Prepare a special attribute list, which will be used for event hook calls\n        $attrsEvent = array();\n        foreach($initialAttrs as $name => $value){\n            if(!is_numeric($name))\n                $attrsEvent[$name] = $value[0];\n        }\n        $attrsEvent['dn'] = $initialAttrs['dn'];\n        foreach($attrs as $name => $value){\n            $attrsEvent[$name] = $value;\n        }\n        $attrsEvent['current_password'] = $old_password;\n        $attrsEvent['new_password'] = $password;\n        $attrsEvent['bind_dn'] = $config->current['ADMINDN'];\n        $attrsEvent['bind_server'] = $config->current['SERVER'];\n        $attrsEvent['bind_password'] = $config->get_credentials($config->current['ADMINPASSWORD']);\n\n        // Call the premodify hook now\n        $passwordPlugin = new password($config,$dn);\n        plugin::callHook($passwordPlugin, 'PREMODIFY', $attrsEvent, $output,$retCode,$error, $directlyPrintError = FALSE);\n        if($retCode === 0 && count($output)){\n            $message = sprintf(_(\"Pre-event hook reported a problem: %s. Password change canceled!\"),implode($output));\n            return(FALSE);\n        }\n\n        // Perform ldap operations\n        $ldap->modify($attrs);\n\n        // Check if the object was locked before, if it was, lock it again!\n        $deactivated = $test->is_locked($config,$dn);\n        if($deactivated){\n            $test->lock_account($config,$dn);\n        }\n\n        // Check if everything went fine and then call the post event hooks.\n        // If an error occures, then try to rollback the complete actions done.\n        $preRollback = FALSE;\n        $ldapRollback = FALSE;\n        $success = TRUE;\n        if (!$ldap->success()) {\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - ldap modifications! - FAILED\");\n            $success =FALSE;\n            $message = msgPool::ldaperror($ldap->get_error(), $dn, LDAP_MOD);\n            $preRollback  =TRUE;\n        } else {\n\n            // Now call the passwordMethod change mechanism.\n            if(!$test->set_password($password)){\n                $ldapRollback = TRUE;\n                $preRollback  =TRUE;\n                $success = FALSE;\n                new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - set_password! - FAILED\");\n                $message = _(\"Password change failed!\");\n            }else{\n        \n                // Execute the password hook\n                plugin::callHook($passwordPlugin, 'POSTMODIFY', $attrsEvent, $output,$retCode,$error, $directlyPrintError = FALSE);\n                if($retCode === 0){\n                    if(count($output)){\n                        new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - Post modify hook reported! - FAILED!\");\n                        $message = sprintf(_(\"Post-event hook reported a problem: %s. Password change canceled!\"),implode($output));\n                        $ldapRollback = TRUE;\n                        $preRollback = TRUE;\n                        $success = FALSE;\n                    }else{\n                        #new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - successfull!\");\n                    }\n                }else{\n                    $ldapRollback = TRUE;\n                    $preRollback = TRUE;\n                    $success = FALSE;\n                    new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - postmodify hook execution! - FAILED\");\n                    new log(\"modify\",\"users/passwordMethod\",$dn,array(),$error);\n\n                    // Call password method again and send in old password to \n                    //  keep the database consistency\n                    $test->set_password($old_password);\n                }\n            }\n        }\n\n        // Setting the password in the ldap database or further operation failed, we should now execute \n        //  the plugins pre-event hook, using switched passwords, new/old password.\n        // This ensures that passwords which were set outside of GOsa, will be reset to its \n        //  starting value.\n        if($preRollback){\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Rolling back premodify hook!\");\n            $oldpass= $test->generate_hash($old_password);\n            $attrsEvent['current_password'] = $password;\n            $attrsEvent['new_password'] = $old_password;\n            foreach(array(\"userPassword\",\"sambaNTPassword\",\"sambaLMPassword\") as $attr){\n                if(isset($initialAttrs[$attr][0])) $attrsEvent[$attr] = $initialAttrs[$attr][0];\n            }\n            \n            plugin::callHook($passwordPlugin, 'PREMODIFY', $attrsEvent, $output,$retCode,$error, $directlyPrintError = FALSE);\n            if($retCode === 0 && count($output)){\n                $message = sprintf(_(\"Pre-event hook reported a problem: %s. Password change canceled!\"),implode($output));\n                new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Rolling back premodify hook! - FAILED!\");\n            }\n        }\n        \n        // We've written the password to the ldap database, but executing the postmodify hook failed.\n        // Now, we've to rollback all password related ldap operations.\n        if($ldapRollback){\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Rolling back ldap modifications!\");\n            $attrs = array();\n            foreach(array(\"userPassword\",\"sambaNTPassword\",\"sambaLMPassword\") as $attr){\n                if(isset($initialAttrs[$attr][0])) $attrs[$attr] = $initialAttrs[$attr][0];\n            }\n            $ldap->cd($dn);\n            $ldap->modify($attrs);\n            if(!$ldap->success()){\n                $message = msgPool::ldaperror($ldap->get_error(), $dn, LDAP_MOD);\n                new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Rolling back ldap modifications! - FAILED\");\n            }\n        }\n\n        // Log action.\n        if($success){\n            stats::log('global', 'global', array('users'),  $action = 'change_password', $amount = 1, 0, $test->get_hash());\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - successfull!\");\n        }else{\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - FAILED!\");\n        }\n\n        return($success);\n    }\n}\n\n\n/*! \\brief Generate samba hashes\n *\n * Given a certain password this constructs an array like\n * array['sambaLMPassword'] etc.\n *\n * \\param string 'password'\n * \\return array contains several keys for lmPassword, ntPassword, pwdLastSet, etc. depending\n * on the samba version\n */\nfunction generate_smb_nt_hash($password)\n{\n  global $config;\n\n  // First try to retrieve values via RPC \n  if ($config->get_cfg_value(\"core\",\"gosaRpcServer\") != \"\"){\n\n    $rpc = $config->getRpcHandle();\n    $hash = $rpc->mksmbhash($password);\n    if(!$rpc->success()){\n        msg_dialog::display(_(\"Error\"),msgPool::rpcError($rpc->get_error()),ERROR_DIALOG);\n        return(array());\n    }\n\n  }elseif ($config->get_cfg_value(\"core\",\"gosaSupportURI\") != \"\"){\n\n    // Try using gosa-si\n  \t$res= gosaSupportDaemon::send(\"gosa_gen_smb_hash\", \"GOSA\", array(\"password\" => $password), TRUE);\n    if (isset($res['XML']['HASH'])){\n    \t$hash= $res['XML']['HASH'];\n    } else {\n      $hash= \"\";\n    }\n\n    if ($hash == \"\") {\n      msg_dialog::display(_(\"Configuration error\"), _(\"Cannot generate SAMBA hash!\"), ERROR_DIALOG);\n      return (\"\");\n    }\n  } else {\n      $password = addcslashes($password, '$'); // <- Escape $ twice for transport from PHP to console-process.\n      $password = addcslashes($password, '$'); \n      $password = addcslashes($password, '$'); // <- And again once, to be able to use it as parameter for the perl script.\n\t  $tmp = $config->get_cfg_value(\"core\",'sambaHashHook');\n      $tmp = preg_replace(\"/%userPassword/\", escapeshellarg($password), $tmp);\n      $tmp = preg_replace(\"/%password/\", escapeshellarg($password), $tmp);\n\t  @DEBUG (DEBUG_LDAP, __LINE__, __FUNCTION__, __FILE__, $tmp, \"Execute\");\n\n \t  exec($tmp, $ar);\n\t  flush();\n\t  reset($ar);\n\t  $hash= current($ar);\n\n    if ($hash == \"\") {\n      msg_dialog::display(_(\"Configuration error\"), sprintf(_(\"Generating SAMBA hash by running %s failed: check %s!\"), bold($config->get_cfg_value(\"core\",'sambaHashHook'), bold(\"sambaHashHook\"))), ERROR_DIALOG);\n      return(array());\n    }\n  }\n\n  list($lm,$nt)= explode(\":\", trim($hash));\n\n  $attrs['sambaLMPassword']= $lm;\n  $attrs['sambaNTPassword']= $nt;\n  $attrs['sambaPwdLastSet']= date('U');\n  $attrs['sambaBadPasswordCount']= \"0\";\n  $attrs['sambaBadPasswordTime']= \"0\";\n  return($attrs);\n}\n\n\n/*! \\brief Get the Change Sequence Number of a certain DN\n *\n * To verify if a given object has been changed outside of Gosa\n * in the meanwhile, this function can be used to get the entryCSN\n * from the LDAP directory. It uses the attribute as configured\n * in modificationDetectionAttribute\n *\n * \\param string 'dn'\n * \\return either the result or \"\" in any other case\n */\nfunction getEntryCSN($dn)\n{\n  global $config;\n  if(empty($dn) || !is_object($config)){\n    return(\"\");\n  }\n\n  /* Get attribute that we should use as serial number */\n  $attr= $config->get_cfg_value(\"core\",\"modificationDetectionAttribute\");\n  if($attr != \"\"){\n    $ldap = $config->get_ldap_link();\n    $ldap->cat($dn,array($attr));\n    $csn = $ldap->fetch();\n    if(isset($csn[$attr][0])){\n      return($csn[$attr][0]);\n    }\n  }\n  return(\"\");\n}\n\n\n/*! \\brief Add (a) given objectClass(es) to an attrs entry\n * \n * The function adds the specified objectClass(es) to the given\n * attrs entry.\n *\n * \\param mixed 'classes' Either a single objectClass or several objectClasses\n * as an array\n * \\param array 'attrs' The attrs array to be modified.\n *\n * */\nfunction add_objectClass($classes, &$attrs)\n{\n  if (is_array($classes)){\n    $list= $classes;\n  } else {\n    $list= array($classes);\n  }\n\n  foreach ($list as $class){\n    $attrs['objectClass'][]= $class;\n  }\n}\n\n\n/*! \\brief Removes a given objectClass from the attrs entry\n *\n * Similar to add_objectClass, except that it removes the given\n * objectClasses. See it for the params.\n * */\nfunction remove_objectClass($classes, &$attrs)\n{\n  if (isset($attrs['objectClass'])){\n    /* Array? */\n    if (is_array($classes)){\n      $list= $classes;\n    } else {\n      $list= array($classes);\n    }\n\n    $tmp= array();\n    foreach ($attrs['objectClass'] as $oc) {\n      foreach ($list as $class){\n        if (strtolower($oc) != strtolower($class)){\n          $tmp[]= $oc;\n        }\n      }\n    }\n    $attrs['objectClass']= $tmp;\n  }\n}\n\n\n/*! \\brief  Initialize a file download with given content, name and data type. \n *  \\param  string data The content to send.\n *  \\param  string name The name of the file.\n *  \\param  string type The content identifier, default value is \"application/octet-stream\";\n */\nfunction send_binary_content($data,$name,$type = \"application/octet-stream\")\n{\n  header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\n  header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n  header(\"Cache-Control: no-cache\");\n  header(\"Pragma: no-cache\");\n  header(\"Cache-Control: post-check=0, pre-check=0\");\n  header(\"Content-type: \".$type.\"\");\n\n  $HTTP_USER_AGENT = $_SERVER['HTTP_USER_AGENT'];\n\n  /* Strip name if it is a complete path */\n  if (preg_match (\"/\\//\", $name)) {\n\t$name= basename($name);\n  }\n  \n  /* force download dialog */\n  if (preg_match('/MSIE 5.5/', $HTTP_USER_AGENT) || preg_match('/MSIE 6.0/', $HTTP_USER_AGENT)) {\n    header('Content-Disposition: filename=\"'.$name.'\"');\n  } else {\n    header('Content-Disposition: attachment; filename=\"'.$name.'\"');\n  }\n\n  echo $data;\n  exit();\n}\n\n\nfunction reverse_html_entities($str,$type = ENT_QUOTES , $charset = \"UTF-8\")\n{\n  if(is_string($str)){\n    return(htmlentities($str,$type,$charset));\n  }elseif(is_array($str)){\n    foreach($str as $name => $value){\n      $str[$name] = reverse_html_entities($value,$type,$charset);\n    }\n  }\n  return($str);\n}\n\n\n/*! \\brief Encode special string characters so we can use the string in \\\n           HTML output, without breaking quotes.\n    \\param string The String we want to encode.\n    \\return string The encoded String\n */\nfunction xmlentities($str)\n{ \n  if(is_string($str)){\n\n    static $asc2uni= array();\n    if (!count($asc2uni)){\n      for($i=128;$i<256;$i++){\n    #    $asc2uni[chr($i)] = \"&#x\".dechex($i).\";\";\n      }\n    }\n\n    $str = str_replace(\"&\", \"&amp;\", $str);\n    $str = str_replace(\"<\", \"&lt;\", $str);\n    $str = str_replace(\">\", \"&gt;\", $str);\n    $str = str_replace(\"'\", \"&apos;\", $str);\n    $str = str_replace(\"\\\"\", \"&quot;\", $str);\n    $str = str_replace(\"\\r\", \"\", $str);\n    $str = strtr($str,$asc2uni);\n    return $str;\n  }elseif(is_array($str)){\n    foreach($str as $name => $value){\n      $str[$name] = xmlentities($value);\n    }\n  }\n  return($str);\n}\n\n\n/*! \\brief  Updates all accessTo attributes from a given value to a new one.\n            For example if a host is renamed.\n    \\param  String  $from The source accessTo name.\n    \\param  String  $to   The destination accessTo name.\n*/\nfunction update_accessTo($from,$to)\n{\n  global $config;\n  $ldap = $config->get_ldap_link();\n  $ldap->cd($config->current['BASE']);\n  $ldap->search(\"(&(objectClass=trustAccount)(accessTo=\".$from.\"))\",array(\"objectClass\",\"accessTo\"));\n  while($attrs = $ldap->fetch()){\n    $new_attrs = array(\"accessTo\" => array());\n    $dn = $attrs['dn'];\n    for($i = 0 ; $i < $attrs['accessTo']['count']; $i++){\n      if($attrs['accessTo'][$i] == $from){\n        if(!empty($to)){\n          $new_attrs['accessTo'][] =  $to;\n        }\n      }else{\n        $new_attrs['accessTo'][] =  $attrs['accessTo'][$i]; \n      }\n    }\n    $ldap->cd($dn);\n    $ldap->modify($new_attrs);\n    if (!$ldap->success()){\n      msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), $dn, LDAP_MOD, \"update_accessTo($from,$to)\"));\n    }\n    new log(\"modify\",\"update_accessTo($from,$to)\",$dn,array_keys($new_attrs),$ldap->get_error());\n  }\n}\n\n\n/*! \\brief Returns a random char */\nfunction get_random_char () {\n     $randno = rand (0, 63);\n     if ($randno < 12) {\n         return (chr ($randno + 46)); // Digits, '/' and '.'\n     } else if ($randno < 38) {\n         return (chr ($randno + 53)); // Uppercase\n     } else {\n         return (chr ($randno + 59)); // Lowercase\n     }\n}\n\n\nfunction cred_encrypt($input, $password) {\n\n  $size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);\n  $iv = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);\n\n  return bin2hex(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $password, $input, MCRYPT_MODE_ECB, $iv));\n\n}\n\n\nfunction cred_decrypt($input,$password) {\n  $size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);\n  $iv = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);\n\n  return mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $password, pack(\"H*\", $input), MCRYPT_MODE_ECB, $iv);\n}\n\n\nfunction get_object_info()\n{\n  return(session::get('objectinfo'));\n}\n\n\nfunction set_object_info($str = \"\")\n{\n  session::set('objectinfo',$str);\n}\n\n\nfunction isIpInNet($ip, $net, $mask) {\n   // Move to long ints\n   $ip= ip2long($ip);\n   $net= ip2long($net);\n   $mask= ip2long($mask);\n\n   // Mask given IP with mask. If it returns \"net\", we're in...\n   $res= $ip & $mask;\n\n   return ($res == $net);\n}\n\n\nfunction get_next_id($attrib, $dn)\n{\n  global $config;\n\n  switch ($config->get_cfg_value(\"core\",\"idAllocationMethod\")){\n    case \"pool\":\n      return get_next_id_pool($attrib);\n    case \"traditional\":\n      return get_next_id_traditional($attrib, $dn);\n  }\n\n  msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"unknown idAllocation method!\"), ERROR_DIALOG);\n  return null;\n}\n\n\nfunction get_next_id_pool($attrib) {\n  global $config;\n\n  /* Fill informational values */\n  $min= $config->get_cfg_value(\"core\",\"${attrib}PoolMin\");\n  $max= $config->get_cfg_value(\"core\",\"${attrib}PoolMax\");\n\n  /* Sanity check */\n  if ($min >= $max) {\n    msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \".sprintf(_(\"%sPoolMin >= %sPoolMax!\"), bold($attrib), bold($attrib)), ERROR_DIALOG);\n    return null;\n  }\n\n  /* ID to skip */\n  $ldap= $config->get_ldap_link();\n  $id= null;\n\n  /* Try to allocate the ID several times before failing */\n  $tries= 3;\n  while ($tries--) {\n\n    /* Look for ID map entry */\n    $ldap->cd ($config->current['BASE']);\n    $ldap->search (\"(&(objectClass=sambaUnixIdPool)($attrib=*))\", array(\"$attrib\"));\n\n    /* If it does not exist, create one with these defaults */\n    if ($ldap->count() == 0) {\n      /* Fill informational values */\n      $minUserId= $config->get_cfg_value(\"core\",\"uidNumberPoolMin\");\n      $minGroupId= $config->get_cfg_value(\"core\",\"gidNumberPoolMin\");\n\n      /* Add as default */\n      $attrs= array(\"objectClass\" => array(\"organizationalUnit\", \"sambaUnixIdPool\"));\n      $attrs[\"ou\"]= \"idmap\";\n      $attrs[\"uidNumber\"]= $minUserId;\n      $attrs[\"gidNumber\"]= $minGroupId;\n      $ldap->cd(\"ou=idmap,\".$config->current['BASE']);\n      $ldap->add($attrs);\n      if ($ldap->error != \"Success\") {\n        msg_dialog::display(_(\"Error\"), _(\"Cannot create sambaUnixIdPool entry!\"), ERROR_DIALOG);\n        return null;\n      }\n      $tries++;\n      continue;\n    }\n    /* Bail out if it's not unique */\n    if ($ldap->count() != 1) {\n      msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"sambaUnixIdPool is not unique!\"), ERROR_DIALOG);\n      return null;\n    }\n\n    /* Store old attrib and generate new */\n    $attrs= $ldap->fetch();\n    $dn= $ldap->getDN();\n    $oldAttr= $attrs[$attrib][0];\n    $newAttr= $oldAttr + 1;\n\n    /* Sanity check */\n    if ($newAttr >= $max) {\n      msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"no ID available!\"), ERROR_DIALOG);\n      return null;\n    }\n    if ($newAttr < $min) {\n      msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"no ID available!\"), ERROR_DIALOG);\n      return null;\n    }\n\n    #FIXME: PHP is not able to do a modification of \"del: .../add: ...\", so this\n    #       is completely unsafe in the moment.\n    #/* Remove old attr, add new attr */\n    #$attrs= array($attrib => $oldAttr);\n    #$ldap->rm($attrs, $dn);\n    #if ($ldap->error != \"Success\") {\n    #  continue;\n    #}\n    $ldap->cd($dn);\n    $ldap->modify(array($attrib => $newAttr));\n    if ($ldap->error != \"Success\") {\n      msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \".$ldap->get_error(), ERROR_DIALOG);\n      return null;\n    } else {\n      return $oldAttr;\n    }\n  }\n\n  /* Bail out if we had problems getting the next id */\n  if (!$tries) {\n    msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"maximum number of tries exceeded!\"), ERROR_DIALOG);\n  }\n\n  return $id;\n}\n\n\nfunction get_next_id_traditional($attrib, $dn)\n{\n  global $config;\n\n  $ids= array();\n  $ldap= $config->get_ldap_link();\n\n  $ldap->cd ($config->current['BASE']);\n  if (preg_match('/gidNumber/i', $attrib)){\n    $oc= \"posixGroup\";\n  } else {\n    $oc= \"posixAccount\";\n  }\n  $ldap->search (\"(&(objectClass=$oc)($attrib=*))\", array(\"$attrib\"));\n\n  /* Get list of ids */\n  while ($attrs= $ldap->fetch()){\n    $ids[]= (int)$attrs[\"$attrib\"][0];\n  }\n\n  /* Add the nobody id */\n  $ids[]= 65534;\n\n  /* get the ranges */\n  $tmp = array('0'=> 1000);\n  if (preg_match('/posixAccount/', $oc) && $config->get_cfg_value(\"core\",\"uidNumberBase\") != \"\"){\n    $tmp= explode('-',$config->get_cfg_value(\"core\",\"uidNumberBase\"));\n  } elseif($config->get_cfg_value(\"core\",\"gidNumberBase\") != \"\"){\n    $tmp= explode('-',$config->get_cfg_value(\"core\",\"gidNumberBase\"));\n  }\n\n  /* Set hwm to max if not set - for backward compatibility */\n  $lwm= $tmp[0];\n  if (isset($tmp[1])){\n    $hwm= $tmp[1];\n  } else {\n    $hwm= pow(2,32);\n  }\n  /* Find out next free id near to UID_BASE */\n  if ($config->get_cfg_value(\"core\",\"baseIdHook\") == \"\"){\n    $base= $lwm;\n  } else {\n    /* Call base hook */\n    $base= get_base_from_hook($dn, $attrib);\n  }\n  for ($id= $base; $id++; $id < pow(2,32)){\n    if (!in_array_strict($id, $ids)){\n      return ($id);\n    }\n  }\n\n  /* Should not happen */\n  if ($id == $hwm){\n    msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID!\"), ERROR_DIALOG);\n    exit;\n  }\n}\n\n\n/* Mark the occurance of a string with a span */\nfunction mark($needle, $haystack, $ignorecase= true)\n{\n  $result= \"\";\n\n  while (preg_match('/^(.*)('.preg_quote($needle).')(.*)$/i', $haystack, $matches)) {\n    $result.= $matches[1].\"<span class='mark'>\".$matches[2].\"</span>\";\n    $haystack= $matches[3];\n  }\n\n  return $result.$haystack;\n}\n\n\n/* Return an image description using the path */\nfunction image($path, $action= \"\", $title= \"\", $align= \"middle\")\n{\n  global $config;\n  global $BASE_DIR;\n  $label= null;\n\n  // Bail out, if there's no style file\n  if(!class_exists('session')){\n    return \"\";    \n  }\n  if(!session::global_is_set(\"img-styles\")){\n\n    // Get theme\n    if (isset ($config)){\n      $theme= $config->get_cfg_value(\"core\",\"theme\");\n    } else {\n\n      // Fall back to default theme\n      $theme= \"default\";\n    }\n\n    if (!file_exists(\"$BASE_DIR/ihtml/themes/$theme/img.styles\")){\n      die (\"No img.style for this theme found!\");\n    }\n\n    session::global_set('img-styles', unserialize(file_get_contents(\"$BASE_DIR/ihtml/themes/$theme/img.styles\")));\n  }\n  $styles= session::global_get('img-styles');\n\n  /* Extract labels from path */\n  if (preg_match(\"/\\.png\\[(.*)\\]$/\", $path, $matches)) {\n    $label= $matches[1];\n  }\n\n  $baseImage = str_replace('['.$label.']', '', $path);\n  if (!array_key_exists($baseImage, $styles)) { \n    return \"\";\n  }\n\n  $lbl= \"\";\n  if ($label) {\n    if (isset($styles[\"images/label-\".$label.\".png\"])) {\n      $lbl= \"<div style='\".$styles[\"images/label-\".$label.\".png\"].\"'></div>\";\n    } else {\n      die(\"Invalid label specified: $label\\n\");\n    }\n\n    $path= preg_replace(\"/\\[.*\\]$/\", \"\", $path);\n  }\n\n  // Non middle layout?\n  if ($align == \"middle\") {\n    $align= \"\";\n  } else {\n    $align= \";vertical-align:$align\";\n  }\n\n  // Clickable image or not?\n  if ($title != \"\") {\n    $title= \"title='$title'\";\n  }\n\n  if ($action == \"\") {\n    return \"<div class='img' $title style='\".$styles[$path].\"$align'>$lbl</div>\";\n  } else {\n    return \"<input type='submit' class='img' id='$action' value='' name='$action' $title style='\".$styles[$path].\"$align'>\";\n  }\n}\n\n/*! \\brief    Encodes a complex string to be useable in HTML posts.\n */\nfunction postEncode($str)\n{\n  return(preg_replace(\"/=/\",\"_\", base64_encode($str)));\n}\n\n/*! \\brief    Decodes a string encoded by postEncode\n */\nfunction postDecode($str)\n{\n  return(base64_decode(preg_replace(\"/_/\",\"=\", $str)));\n}\n\n\n/*! \\brief    Generate styled output\n */\nfunction bold($str)\n{\n  return \"<span class='highlight'>$str</span>\";\n}\n\n\n\n/*! \\brief  Detect the special character handling for the currently used ldap database. \n *          For example some convert , to \\2C or \" to \\22.\n *         \n *  @param      Config  The GOsa configuration object.\n *  @return     Array   An array containing a character mapping the use.\n */\nfunction detectLdapSpecialCharHandling()\n{\n    // The list of chars to test for\n    global $config;\n    if(!$config) return(NULL);\n\n    // In the DN we've to use escaped characters, but the object name (o)\n    //  has the be un-escaped.\n    $name = 'GOsaLdapEncoding_,_\"_(_)_+_/';\n    $dnName = 'GOsaLdapEncoding_\\,_\\\"_(_)_\\+_/';\n   \n    // Prapare name to be useable in filters\n    $fixed= normalizeLdap(str_replace('\\\\\\\\', '\\\\\\\\\\\\', $name));\n    $filterName = str_replace('\\\\,', '\\\\\\\\,', $fixed);\n \n    // Create the target dn\n    $oDN = \"o={$dnName},\".$config->current['BASE'];\n\n    // Get ldap connection and check if we've already created the character \n    //  detection object. \n    $ldapCID = ldap_connect($config->current['SERVER']);\n    ldap_set_option($ldapCID, LDAP_OPT_PROTOCOL_VERSION, 3);\n    ldap_bind($ldapCID, $config->current['ADMINDN'],$config->current['ADMINPASSWORD']);\n    $res = ldap_list($ldapCID, $config->current['BASE'], \n            \"(&(o=\".$filterName.\")(objectClass=organization))\",\n            array('dn'));\n\n    // If we haven't created the character-detection object, then create it now.\n    $cnt = ldap_count_entries($ldapCID, $res);\n    if(!$cnt){\n        $obj = array();\n        $obj['objectClass'] = array('top','organization');\n        $obj['o'] = $name;\n        $obj['description'] = 'GOsa character encoding test-object.';\n        if(!@ldap_add($ldapCID, $oDN, $obj)){\n            trigger_error(\"GOsa couldn't detect the special character handling used by your ldap!\");\n            return(NULL);\n        }\n    }\n    \n    // Read the character-handling detection entry from the ldap.\n    $res = ldap_list($ldapCID, $config->current['BASE'],\n            \"(&(o=\".$filterName.\")(objectClass=organization))\",\n            array('dn','o'));\n    $cnt = ldap_count_entries($ldapCID, $res);\n    if($cnt != 1 || !$res){\n        trigger_error(\"GOsa couldn't detect the special character handling used by your ldap!\");\n        return(NULL);\n    }else{\n\n        // Get the character handling entry from the ldap and check how the \n        //  values were written. Compare them with what\n        //  we've initially intended to write and create a mapping out \n        //  of the results.\n        $re = ldap_first_entry($ldapCID, $res);\n        $attrs = ldap_get_attributes($ldapCID, $re);\n   \n        // Extract the interessting characters out of the dn and the \n        //  initially used $name for the entry. \n        $mapDNstr = preg_replace(\"/^o=GOsaLdapEncoding_(.*),\".preg_quote($config->current['BASE']).\"$/\",\"\\\\1\", trim(ldap_get_dn($ldapCID, $re)));\n        $mapDN = preg_split(\"/_/\", $mapDNstr,0, PREG_SPLIT_NO_EMPTY);\n\n        $mapNameStr = preg_replace(\"/^GOsaLdapEncoding_/\",\"\",$dnName);\n        $mapName = preg_split(\"/_/\", $mapNameStr,0, PREG_SPLIT_NO_EMPTY);\n\n        // Create a mapping out of the results.\n        $map = array();\n        foreach($mapName as $key => $entry){\n            $map[$entry] = $mapDN[$key];\n        }\n        return($map);\n    }\n    return(NULL);\n}\n\n\n/*! \\brief  Replaces placeholder in a given string.\n *          For example:\n *            '%uid@gonicus.de'         Replaces '%uid' with 'uid'.\n *            '{%uid[0]@gonicus.de}'    Replaces '%uid[0]' with the first char of 'uid'.\n *            '%uid[2-4]@gonicus.de'    Replaces '%uid[2-4]' with three chars from 'uid' starting from the second.\n *      \n *          The surrounding {} in example 2 are optional.\n *\n *  @param  String  The string to perform the action on.\n *  @param  Array   An array of replacements.\n *  @return     The resulting string.\n */\nfunction fillReplacements($str, $attrs, $shellArg = FALSE, $default = \"\")\n{\n    // Search for '{%...[n-m]}\n    // Get all matching parts of the given string and sort them by\n    //  length, to avoid replacing strings like '%uidNumber' with 'uid'\n    //  instead of 'uidNumber'; The longest tring at first.\n    preg_match_all('/(\\{?%([a-z0-9_]+)(\\[(([0-9_]+)(\\-([0-9_]+))?)\\])?\\}?)/i', $str ,$matches, PREG_SET_ORDER);\n    $hits = array();\n    foreach($matches as $match){\n        $hits[strlen($match[2]).$match[0]] = $match;\n    }\n    krsort($hits);\n\n    // Add lower case placeholders to avoid errors\n    foreach($attrs as $key => $attr) $attrs[strtolower($key)] = $attr;\n\n    // Replace the placeholder in the given string now.\n    foreach($hits as $match){\n\n        // Avoid errors about undefined index.\n        $name = strtolower($match[2]);\n        if(!isset($attrs[$name])) $attrs[$name] = $default;\n\n        // Calculate the replacement\n        $start = (isset($match[5])) ? $match[5] : 0;\n        $end = strlen($attrs[$name]);\n        if(isset($match[5]) && !isset($match[7])){\n            $end = 1;\n        }elseif(isset($match[5]) && isset($match[7])){\n            $end = ($match[7]-$start+1);\n        }\n        $value  = substr($attrs[$name], $start, $end);\n\n        // Use values which are valid for shell execution?\n        if($shellArg) $value = escapeshellarg($value);\n\n        // Replace the placeholder within the string.\n        $str = preg_replace(\"/\".preg_quote($match[0],'/').\"/\", $value, $str);\n    }\n    return($str);\n}\n\n\n/*! \\brief Generate a list of uid proposals based on a rule\n *\n *  Unroll given rule string by filling in attributes and replacing\n *  all keywords.\n *\n * \\param string 'rule' The rule string from gosa.conf.\n * \\param array 'attributes' A dictionary of attribute/value mappings\n * \\return array List of valid not used uids\n */\nfunction gen_uids($rule, $attributes)\n{\n    global $config;\n    $ldap = $config->get_ldap_link();\n    $ldap->cd($config->current['BASE']);\n\n    @DEBUG (DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__, $rule, \"Processing\");\n    \n    // Strip out non ascii chars\n    foreach($attributes as $name => $value){\n        if ( $config->get_cfg_value(\"core\", \"forceTranslit\") == \"true\" ) {\n             $value = cyrillic2ascii($value);\n        } else {\n             $value = iconv('UTF-8', 'US-ASCII//TRANSLIT', $value);\n        }\n        $value = preg_replace('/[^(\\x20-\\x7F)]*/','',$value);\n        $attributes[$name] = strtolower($value);\n    }\n    \n    @DEBUG (DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__, $attributes, \"Prepare\");\n\n    // Search for '{%...[n-m]}\n    // Get all matching parts of the given string and sort them by\n    //  length, to avoid replacing strings like '%uidNumber' with 'uid'\n    //  instead of 'uidNumber'; The longest tring at first.\n    preg_match_all('/(\\{?%([a-z0-9]+)(\\[(([0-9]+)(\\-([0-9]+))?)\\])?\\}?)/i', $rule ,$matches, PREG_SET_ORDER);\n    $replacements = array(); \n    foreach($matches as $match){\n        \n        // No start position given, then add the complete value\n        if(!isset($match[5])){\n            $replacements[$match[0]][] = $attributes[$match[2]];\n    \n        // Start given but no end, so just add a single character\n        }elseif(!isset($match[7])){\n            if(isset($attributes[$match[2]][$match[5]])){\n                $tmp = \" \".$attributes[$match[2]];\n                $replacements[$match[0]][] = trim($tmp[$match[5]]);\n            }\n\n        // Add all values in range\n        }else{\n            $str = \"\";\n            for($i=$match[5]; $i<= $match[7]; $i++){\n                if(isset($attributes[$match[2]][$i])){\n                    $tmp = \" \".$attributes[$match[2]];\n                    $str .= $tmp[$i];\n                    $replacements[$match[0]][] = trim($str);\n                }\n            }\n        }\n    }\n\n    // Create proposal array\n    $rules = array($rule);\n    foreach($replacements as $tag => $values){\n        $rules = gen_uid_proposals($rules, $tag, $values);\n    }\n    \n\n    // Search for id tags {id:3} / {id#3}\n    preg_match_all('/\\{id(#|:)([0-9])+\\}/i', $rule, $matches, PREG_SET_ORDER);\n    $idReplacements = array();\n    foreach($matches as $match){\n        if(count($match) != 3) continue;\n\n        // Generate random number \n        if($match[1] == '#'){\n            foreach($rules as $id => $ruleStr){\n                $genID = rand(pow(10,$match[2] -1),pow(10, ($match[2])) - 1);\n                $rules[$id] = preg_replace(\"/\".preg_quote($match[0],'/').\"/\", $genID,$ruleStr);\n            }\n        }\n    \n        // Search for next free id \n        if($match[1] == ':'){\n\n            // Walk through rules and replace all occurences of {id:..}\n            foreach($rules as $id => $ruleStr){\n                $genID = 0;\n                $start = TRUE;\n                while($start || $ldap->count()){\n                    $start = FALSE;\n                    $number= sprintf(\"%0\".$match[2].\"d\", $genID);\n                    $testRule = preg_replace(\"/\".preg_quote($match[0],'/').\"/\",$number,$ruleStr); \n                    $ldap->search('uid='.normalizeLdap($testRule));\n                    $genID ++;\n                }\n                $rules[$id] = preg_replace(\"/\".preg_quote($match[0],'/').\"/\",$number,$ruleStr);\n            }\n        }\n    }\n\n    // Create result set by checking which uid is already used and which is free.\n    $ret = array();\n    foreach($rules as $rule){\n        $ldap->search('uid='.normalizeLdap($rule));\n        if(!$ldap->count()){\n            $ret[] =  $rule;\n        }\n    }\n   \n    return($ret);\n}\n\n\nfunction gen_uid_proposals(&$rules, $tag, $values)\n{\n    $newRules = array();\n    foreach($rules as $rule){\n        foreach($values as $value){\n            $newRules[] = preg_replace(\"/\".preg_quote($tag,'/').\"/\", $value, $rule); \n        }\n    }\n    return($newRules);\n}\n\n\nfunction gen_uuid() \n{\n    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n        // 32 bits for \"time_low\"\n        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),\n\n        // 16 bits for \"time_mid\"\n        mt_rand( 0, 0xffff ),\n\n        // 16 bits for \"time_hi_and_version\",\n        // four most significant bits holds version number 4\n        mt_rand( 0, 0x0fff ) | 0x4000,\n\n        // 16 bits, 8 bits for \"clk_seq_hi_res\",\n        // 8 bits for \"clk_seq_low\",\n        // two most significant bits holds zero and one for variant DCE1.1\n        mt_rand( 0, 0x3fff ) | 0x8000,\n\n        // 48 bits for \"node\"\n        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )\n    );\n}\n\nfunction gosa_file_name($filename)\n{\n    $tempfile = tempnam(sys_get_temp_dir(), 'GOsa'); \n    if(move_uploaded_file($filename, $tempfile)){ \n       return( $tempfile);\n    }\n}\n\nfunction gosa_file($filename)\n{\n    $tempfile = tempnam(sys_get_temp_dir(), 'GOsa'); \n    if(move_uploaded_file($filename, $tempfile)){ \n       return file( $tempfile );\n    }\n}\n\nfunction gosa_fopen($filename, $mode)\n{\n    $tempfile = tempnam(sys_get_temp_dir(), 'GOsa'); \n    if(move_uploaded_file($filename, $tempfile)){ \n       return fopen( $tempfile, $mode );\n    }\n}\n\n\n/*\\brief    Our own in_array method which defaults to a strict mode.\n */\nfunction in_array_strict($needle, $haystack, $strict = TRUE)\n{\n    return(in_array($needle, $haystack, $strict));\n}\n\n// vim:tabstop=2:expandtab:shiftwidth=2:filetype=php:syntax:ruler:\n?>\n"], "fixing_code": ["<?php\n\n/*\n *   How to use plugin::plInfo()\n *   ===================\n *   \n *   The function returns a descriptive array of the plugin,\n *    which will then be used by GOsa to populate the plugin, its ACLs, \n *    its properties, its schema requirements aso.\n *\n *\n *   The following values can be set:\n *   ================================\n *\n *   plShortName    |-> The name of the plugin in short (e.g. Posix)\n *                  |   This short-name will be shown for example in the ACL definitions.\n *                  | \n *                  | \n *   plDescription  |-> A descriptive text for the plugin (e.g. User posix account extension)\n *                  |   This will be shown in the ACL definitions.   \n *                  | \n *                  | \n *   plSelfModify   |-> If set to true this plugin allows to set 'self' ACLs.\n *                  |   For exampe to allow to change the users own password, but not the others.\n *                  | \n *                  | \n *   plDepends      |-> The plugins dependencies to other classes (e.g. sambaAccount requires posixAccount)\n *                  |  \n *                  | \n *   plPriority     |-> The priority of the plugin, this influences the ACL listings only.\n *                  | \n *                  | \n *   plSection      |-> The section of this plugin 'administration', 'personal', 'addons'\n *                  | \n *                  | \n *   plCategory     |-> The plugin category this plugins belongs to (e.g. users, groups, departments) \n *                  | \n *                  | \n *   plRequirements |-> Plugin requirements. \n *                  | |\n *                  | |-> [activePlugin]           The schame checks will only be performed if the given plugin is enabled\n *                  | |                             in the gosa.conf definitions.\n *                  | |                            Defaults to the current class name if empty.\n *                  | |\n *                  | |-> [ldapSchema]             An array of objectClass requirements.\n *                  | |                            Syntax [[objectClass => 'version'], ... ]\n *                  | |                            Version can be emtpy which just checks for the existence of the class.\n *                  | |\n *                  | |-> [onFailureDisablePlugin] A list of plugins that which will be disabled if the \n *                  |                               requirements couldn't be fillfulled.\n *                  |\n *                  |      ---------------------------------------------\n *                  |      EXAMPLE:\n *                  |      ---------------------------------------------\n *                  |      \"plRequirements\"=> array(\n *                  |         'activePlugin' => 'applicationManagement', \n *                  |         'ldapSchema' => array(\n *                  |             'gosaObject' => '',\n *                  |             'gosaAccount' => '>=2.7',\n *                  |             'gosaLockEntry' => '>=2.7',\n *                  |             'gosaDepartment' => '>=2.7',\n *                  |             'gosaCacheEntry' => '>=2.7',\n *                  |             'gosaProperties' => '>=2.7',\n *                  |             'gosaConfig' => '>=2.7'\n *                  |             ),\n *                  |         'onFailureDisablePlugin' => array(get_class(), 'someClassName')\n *                  |         ),\n *                  |      ---------------------------------------------\n *                  |\n *                  |\n *                  |         \n *   plProvidedAcls |-> The ACLs provided by this plugin\n *                  |\n *                  |      ---------------------------------------------\n *                  |      EXAMPLE:\n *                  |      ---------------------------------------------\n *                  |      \"plProvidedAcls\"=> array(\n *                  |          'cn'             => _('Name'),\n *                  |          'uid'            => _('Uid'),\n *                  |          'phoneNumber'    => _('Phone number')\n *                  |          ),\n *                  |      ---------------------------------------------\n *                  |\n *                  |\n *                  | \n *   plProperties   |-> Properties used by the plugin.\n *                  |   Properties which are defined here will be modifyable using the property editor.\n *                  |   To read properties you can use $config->get_cfg_value(className, propertyName)\n *                  | \n *                  |      ---------------------------------------------\n *                  |      EXAMPLE:\n *                  |      ---------------------------------------------\n *                  |      \"plProperties\"=> array(\n *                  |         array(\n *                  |             \"name\"          => \"htaccessAuthentication\",\n *                  |             \"type\"          => \"bool\",\n *                  |             \"default\"       => \"false\",\n *                  |             \"description\"   => _(\"A description...\"),\n *                  |             \"check\"         => \"gosaProperty::isBool\",\n *                  |             \"migrate\"       => \"\",\n *                  |             \"group\"         => \"authentification\",\n *                  |             \"mandatory\"     => TRUE\n *                  |             ),\n *                  |         ),\n *                  |   See class_core.inc for a huge amount of examples.\n */\n\n\nclass all extends plugin {\n    static function plInfo()\n    {\n        return (array(\n                    \"plShortName\"   => _(\"All\"),\n                    \"plDescription\" => _(\"All objects\"),\n                    \"plSelfModify\"  => TRUE,\n                    \"plDepends\"     => array(),\n                    \"plPriority\"    => 0,\n                    \"plSection\"     => array(\"administration\"),\n                    \"plCategory\"    => array(\"all\" => array(\"description\" => '*&nbsp;'._(\"All\"))),\n                    \"plProvidedAcls\"    => array())\n               );\n    }\n}\n\nclass core extends plugin {\n\n    static function getPropertyValues($class,$name,$value,$type)\n    {\n        $list = array();\n        switch($name){\n            case 'idAllocationMethod':\n                $list = array('traditional' => _('Traditional'), 'pool' => _('Use samba pool'));\n                break;\n            case 'passwordDefaultHash':\n                $tmp = passwordMethod::get_available_methods();\n                foreach($tmp['name'] as $id => $method){\n                    $desc = $tmp[$id]['name'];\n                    $list[$method] = $desc;\n                }\n                break;\n            case 'theme':\n                $cmd = \"cd ../ihtml/themes; find . -name 'img.styles' | sed s/'^[^\\/]*\\/\\([^\\/]*\\).*'/'\\\\1'/g\";\n                $res = `$cmd`  ; \n                $list = array();\n                foreach(preg_split(\"/\\n/\",$res) as $entry){\n                    if(!empty($entry)){\n                        $list[$entry] = $entry;\n                    }\n                }\n                break;\n            case 'accountPrimaryAttribute':\n                $list = array('uid' => 'uid', 'cn' => 'cn');\n                break;\n            case 'loginAttribute':\n                $list = array(\n                            'uid' => 'uid',\n                            'mail' => 'mail',\n                            'both' => 'uid & mail');\n                break;\n            case 'timezone': \n                $tmp = timezone::_get_tz_zones();\n                foreach($tmp['TIMEZONES'] as $tzname => $offset){\n                    if($offset >= 0){\n                        $list[$tzname] = $tzname.\" ( + \".sprintf(\"%0.2f\",$offset/(60*60)).\" \"._(\"hours\").\")\";\n                    }else{\n                        $offset = $offset * -1;\n                        $list[$tzname] = $tzname.\" ( - \".sprintf(\"%0.2f\",($offset/(60*60))).\" \"._(\"hours\").\")\";\n                    }\n                }\n                break;\n            case 'mailAttribute':\n                $list = array('mail' => 'mail','uid' => 'uid');\n                break;\n            case 'mailMethod': \n                $tmp = array();\n                if(class_available('mailMethod')){\n                    $tmp = mailMethod::get_methods();\n                }\n                $list =array();\n                foreach($tmp as $vName => $vValue){\n                    $vName = preg_replace('/^mailMethod/','', $vName);\n                    $list[$vName] = $vValue;\n                }\n                $list[''] = _(\"None\");\n                break;\n            case 'language':\n                $tmp = get_languages(TRUE);\n                $list[\"\"] = _(\"Automatic\");\n                foreach($tmp as $key => $desc){\n                    $list[$key] = $desc;\n                }\n                break;\n            case 'modificationDetectionAttribute': \n                $list = array('entryCSN' => 'entryCSN (OpenLdap)','textCSN'=>'textCSN (Sun DS)');\n                break;\n            default: echo $name.\" \";$list = array();\n        }\n\n        if(!isset($list[$value])){\n            $list[$value] = $value.\" (\"._(\"User value\").\")\";\n        }\n\n        return($list);\n    }\n\n    static function plInfo()\n    {\n        return (array(\n                    \"plShortName\" => _(\"Core\"),\n                    \"plDescription\" => _(\"GOsa core plugin\"),\n                    \"plSelfModify\"  => FALSE,\n                    \"plDepends\"     => array(),\n                    \"plPriority\"    => 0,\n                    \"plSection\"     => array(\"administration\"),\n\n                    \"plRequirements\"=> array(\n                        'ldapSchema' => array(\n                            'gosaObject' => '>=2.7',\n                            'gosaAccount' => '>=2.7',\n                            'gosaLockEntry' => '>=2.7',\n                            'gosaDepartment' => '>=2.7',\n                            'gosaCacheEntry' => '>=2.7',\n                            'gosaProperties' => '>=2.7',\n                            'gosaConfig' => '>=2.7'\n                            ),\n                        'onFailureDisablePlugin' => array(get_class())\n                        ),\n\n\n\n                    \"plCategory\"    => array(\"all\"),\n                    \"plProperties\"  => array(\n\n                        array(\n                            \"name\"          => \"htaccessAuthentication\",\n                            \"type\"          => \"bool\",\n                            \"default\"       => \"false\",\n                            \"description\"   => _(\"Enables htaccess instead of LDAP authentication. This can be used to enable other authentication mechanisms like Kerberos for the GOsa login.\"),\n                            \"check\"         => \"gosaProperty::isBool\",\n                            \"migrate\"       => \"\",\n                            \"group\"         => \"authentification\",\n                            \"mandatory\"     => TRUE),\n\n                        array(\n                            \"name\"          => \"statsDatabaseEnabled\",\n                            \"type\"          => \"bool\",\n                            \"default\"       => \"false\",\n                            \"description\"   => _(\"Enables the usage statistics module.\"),\n                            \"check\"         => \"gosaProperty::isBool\",\n                            \"migrate\"       => \"\",\n                            \"group\"         => \"core\",\n                            \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"statsDatabaseDirectory\",\n                                \"type\"          => \"path\",\n                                \"default\"       => \"/var/spool/gosa/stats\",\n                                \"description\"   => _(\"Database file to be used by the usage statistics module.\"),\n                                \"check\"         => \"gosaProperty::isWriteablePath\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                            \"name\"          => \"logging\",\n                            \"type\"          => \"bool\",\n                            \"default\"       => \"true\",\n                            \"description\"   => _(\"Enables event logging in GOsa. Setting it to 'On' make GOsa log every action a user performs via syslog. If you use this in combination with rsyslog and configure it to MySQL logging, you can browse all events in GOsa.\"),\n\n                            \"check\"         => \"gosaProperty::isBool\",\n                            \"migrate\"       => \"\",\n                            \"group\"         => \"core\",\n                            \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"listSummary\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enables a status bar on the bottom of lists displaying a summary of type and number of elements in the list.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"visual\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"passwordMinLength\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Specify the minimum length for newly entered passwords.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"passwordMinDiffer\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Specify the minimum number of characters that have to differ between old and newly entered passwords.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"passwordProposalHook\",\n                                \"type\"          => \"command\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Command to generate password proposals. If a command has been specified, the user can decide whether to use an automatic password or a manually specified one.\").\" \"._(\"Example\").\": /usr/bin/apg -n1\",\n                                \"check\"         => \"gosaProperty::isCommand\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"displayErrors\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable display of PHP errors on the top of the page. Disable this feature in production environments to avoid the exposure of sensitive data.\").\" \".sprintf(_(\"Related option\").\": developmentMode\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"developmentMode\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Show messages that may assist plugin development. Be aware that this option may produce some ACL related false error messages!\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => TRUE),\n\n\n                        array(\n                                \"name\"          => \"schemaCheck\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable LDAP schema verification during login. The recommended setting is 'On' because it enables efficient methods to create missing subtrees in the LDAP.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"copyPaste\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable copy and paste for most objects managed by GOsa.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"copyPaste\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"forceGlobals\",\n                                \"type\"          => \"noLdap\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable PHP security checks for disabled register_global settings.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"forceSSL\",\n                                \"type\"          => \"noLdap\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable automatic redirection to HTTPS based administration.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ldapStats\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable logging of detailed information of LDAP operations.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"ldapFollowReferrals\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable LDAP referral chasing.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"ldap\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ldapFilterNestingLimit\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 200,\n                                \"description\"   => _(\"Specify LDAP element filter limit. If the limit is not 0, GOsa speeds up group queries by putting several queries into a single query. This is known to produce problems on some LDAP servers (i.e. Sun DS) and needs to be lowered or disabled.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"ldap\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ldapSizelimit\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 200,\n                                \"description\"   => _(\"Specify the maximum number of entries GOsa will request from an LDAP server. A warning is displayed if this limit is exceeded.\"), \n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ldapSizeIgnore\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Disable checks for LDAP size limits.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"warnSSL\",\n                                \"type\"          => \"noLdap\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable warnings for non encrypted connections.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"ppdGzip\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable compression for PPD files.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"ppd\",\n                                \"mandatory\"     => FALSE),\n\n\n                        array(\n                                \"name\"          => \"ignoreAcl\",\n                                \"type\"          => \"dn\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"DN of user with ACL checks disabled. This should only be used to restore lost administrative ACLs.\"),\n                                \"check\"         => \"gosaProperty::isDN\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => FALSE),\n\n\n                        array(\n                                \"name\"          => \"ppdPath\",\n                                \"type\"          => \"path\",\n                                \"default\"       => \"/var/spool/ppd\",\n                                \"description\"   => _(\"Storage path for PPD files.\"),\n                                \"check\"         => \"gosaProperty::isPath\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"ppd\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"ldapMaxQueryTime\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Number of seconds a LDAP query is allowed to take until GOsa aborts the request.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"storeFilterSettings\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enables storing of user filters in browser cookies.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sendCompressedOutput\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enables sending of compressed web page content.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"allowUidProposalModification\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Allows to modify uid-proposals when creating a new user from a user-template.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"modificationDetectionAttribute\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"entryCSN\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"LDAP attribute which is used to detect changes.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"language\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"ISO language code which is used to override the automatic language detection.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"theme\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"default\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"CSS and template theme to be used.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"visual\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"sessionLifetime\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 600,\n                                \"description\"   => _(\"Number of seconds after an inactive session expires. This may be overridden by some systems php.ini/crontab mechanism.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"templateCompileDirectory\",\n                                \"type\"          => \"path\",\n                                \"default\"       => \"/var/spool/gosa\",\n                                \"description\"   => _(\"Template engine compile directory.\"),\n                                \"check\"         => \"gosaProperty::isWriteablePath\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"debugLevel\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 0,\n                                \"description\"   => sprintf(_(\"Logical AND of the integer values below that controls the debug output on every page load: %s\"),\n\"\n\nDEBUG_TRACE   = 1\nDEBUG_LDAP    = 2\nDEBUG_MYSQL   = 4\nDEBUG_SHELL   = 8\nDEBUG_POST    = 16\nDEBUG_SESSION = 32\nDEBUG_CONFIG  = 64\nDEBUG_ACL     = 128\nDEBUG_SI      = 256\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"debug\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sambaHashHook\",\n                                \"type\"          => \"command\",\n                                \"default\"       => \"perl -MCrypt::SmbHash -e \\\"use MIME::Base64; print join(q[:], ntlmgen decode_base64('%password')), $/;\\\"\",\n                                \"description\"   => _(\"Command to create Samba NT/LM hashes. Required for password synchronization if you don't use supplementary services.\"),\n                                \"check\"         => \"gosaProperty::isCommand\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"samba\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"passwordDefaultHash\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"ssha\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Default hash to be used for newly created user passwords.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n                        array(\n                                \"name\"          => \"strictPasswordRules\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable checking for the presence of problematic unicode characters in passwords.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"accountPrimaryAttribute\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"cn\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Specify whether 'cn' or 'uid' style user DNs are generated. For more sophisticated control use the 'accountRDN' setting.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"userRDN\",\n                                \"type\"          => \"rdn\",\n                                \"default\"       => \"ou=people,\",\n                                \"description\"   => _(\"Location component for user storage inside of departments.\"),\n                                \"check\"         => \"gosaProperty::isRdn\",\n                                \"migrate\"       => \"migrate_userRDN\", \n                                \"group\"         => \"user\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"groupRDN\",\n                                \"type\"          => \"rdn\",\n                                \"default\"       => \"ou=groups,\",\n                                \"description\"   => _(\"Location component for group storage inside of departments.\"),\n                                \"check\"         => \"gosaProperty::isRdn\",\n                                \"migrate\"       => \"migrate_groupRDN\",\n                                \"group\"         => \"group\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gidNumberBase\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"1000\",\n                                \"description\"   => _(\"Count base for group IDs. For dynamic ID assignment use the 'nextIdHook' setting.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => TRUE),\n\n                       array(\n                                \"name\"          => \"baseIdHook\",\n                                \"type\"          => \"command\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Count base for user IDs. For dynamic ID assignment use the 'nextIdHook' setting.\"),\n                                \"check\"         => \"gosaProperty::isCommand\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gidNumberPoolMin\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 10000,\n                                \"description\"   => _(\"Lowest assignable group ID for use with the idAllocationMethod set to 'pool'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gidNumberPoolMax\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 40000,\n                                \"description\"   => _(\"Highest assignable group ID for use with the idAllocationMethod set to 'pool'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"uidNumberPoolMin\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 10000,\n                                \"description\"   => _(\"Lowest assignable user ID for use with the idAllocationMethod set to 'pool'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"uidNumberPoolMax\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 40000,\n                                \"description\"   => _(\"Highest assignable user ID for use with the idAllocationMethod set to 'pool'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"uidNumberBase\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"1000\",\n                                \"description\"   => _(\"Count base for user IDs. For dynamic ID assignment use the 'baseIdHook' setting.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaRpcServer\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Connection URL for use with the gosa-ng service.\"),\n                                \"check\"         => \"jsonRPC::testConnectionProperties\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"rpc\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaRpcUser\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"admin\",\n                                \"description\"   => _(\"User name used to connect to the 'gosaRpcServer'.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"rpc\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaRpcPassword\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"tester\",\n                                \"description\"   => _(\"Password used to connect to the 'gosaRpcServer'.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"rpc\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaSupportURI\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Connection URI for use with the gosa-si service (obsolete).\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"gosa-si\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaSupportTimeout\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 15,\n                                \"description\"   => _(\"Number of seconds after a gosa-si connection is considered 'dead'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"gosa-si\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"loginAttribute\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"uid\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"User attribute which is used for log in.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"timezone\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Local time zone.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"honourUnitTags\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable tagging of administrative units. This can be used in conjunction with ACLs (obsolete).\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"useSaslForKerberos\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable the use of {sasl} instead of {kerberos} for user realms.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"SASLRealm\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"REALM\",\n                                \"description\"   => _(\"The SASL realm to use for password storage.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"password\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"rfc2307bis\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable RFC 2307bis style groups. This combines the use of 'member' and 'memberUid' attributes.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"personalTitleInDN\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Adjusts the user DN generation to include the users personal title (only in conjunction with accountPrimaryAttribute).\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"storage location\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"nextIdHook\",\n                                \"type\"          => \"command\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Script to be called for finding the next free id for groups or users.\"),\n                                \"check\"         => \"gosaProperty::isCommand\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n                        array(\n                                \"name\"          => \"idGenerator\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"{%sn}-{%givenName[2-4]}\",\n                                \"description\"   => _(\"Descriptive string for the automatic ID generator. Please read the FAQ file for more information.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"strictNamingRules\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable strict checking for user IDs and group names.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"minId\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 40,\n                                \"description\"   => _(\"Lowest assignable user or group ID. Only active if idAllocationMethod is set to 'traditional'.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"mailAttribute\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"mail\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Attribute to be used for primary mail addresses.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"gosaSharedPrefix\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Namespace used for shared folders.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"mailUserCreation\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Namespace rule to create user folders. Please read the FAQ file for more information.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"mailFolderCreation\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"Namespace rule to create folders. Please read the FAQ file for more information.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"imapTimeout\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => 10,\n                                \"description\"   => _(\"Seconds after an IMAP connection is considered dead.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"mailMethod\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Class name of the mail method to be used.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"cyrusUseSlashes\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable slashes instead of dots as a name space separator for Cyrus IMAP.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"vacationTemplateDirectory\",\n                                \"type\"          => \"path\",\n                                \"default\"       => \"/etc/gosa/vacation\",\n                                \"description\"   => _(\"Directory to store vacation templates. Please read the FAQ file for more information.\"),\n                                \"check\"         => \"gosaProperty::isWriteablePath\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"mail\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"ldapTLS\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable TLS for LDAP connections.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"security\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"honourIvbbAttributes\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable IVBB used by german authorities.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sambaIdMapping\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Maintain sambaIdmapEntry objects to improve performance on some Samba versions.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"samba\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"handleExpiredAccounts\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"true\",\n                                \"description\"   => _(\"Enable checks to determine whether an account is expired or not.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sambaSID\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"String containing the SID for Samba setups without the Domain object in LDAP.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"samba\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"sambaRidBase\",\n                                \"type\"          => \"integer\",\n                                \"default\"       => \"\",\n                                \"description\"   => _(\"String containing the RID base for Samba setups without the Domain object in LDAP.\"),\n                                \"check\"         => \"gosaProperty::isInteger\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"samba\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"enableSnapshots\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable manual object snapshots.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => TRUE),\n\n                        array(\n                                \"name\"          => \"snapshotBase\",\n                                \"type\"          => \"dn\",\n                                \"default\"       => \"ou=snapshots,dc=localhost,dc=de\",\n                                \"description\"   => _(\"Base DN for snapshot storage.\"),\n                                \"check\"         => \"gosaProperty::isDn\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"snapshotAdminDn\",\n                                \"type\"          => \"dn\",\n                                \"default\"       => \"cn=admin,dc=localhost,dc=de\",\n                                \"description\"   => _(\"DN of the snapshot administrator.\"),\n                                \"check\"         => \"gosaProperty::isDn\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"snapshotAdminPassword\",\n                                \"type\"          => \"string\",\n                                \"default\"       => \"secret\",\n                                \"description\"   => _(\"Password of the snapshot administrator.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => FALSE),\n\n                        array(\n                                \"name\"          => \"idAllocationMethod\",\n                                \"type\"          => \"switch\",\n                                \"default\"       => \"traditional\",\n                                \"defaults\"      => \"core::getPropertyValues\",\n                                \"description\"   => _(\"Method for user and group ID generation. Note: only the 'traditional' method is safe due to PHP limitations.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"id\",\n                                \"mandatory\"     => TRUE),\n                        array(\n                                \"name\"          => \"snapshotURI\",\n                                \"type\"          => \"uri\",\n                                \"default\"       => \"ldap://localhost:389\",\n                                \"description\"   => _(\"URI of server to be used for snapshots.\"),\n                                \"check\"         => \"\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"snapshot\",\n                                \"mandatory\"     => FALSE),\n                        array(\n                                \"name\"          => \"forceTranslit\",\n                                \"type\"          => \"bool\",\n                                \"default\"       => \"false\",\n                                \"description\"   => _(\"Enable transliteration of cyrillic characters for UID generation.\"),\n                                \"check\"         => \"gosaProperty::isBool\",\n                                \"migrate\"       => \"\",\n                                \"group\"         => \"core\",\n                                \"mandatory\"     => TRUE)\n                            )));\n    }\n}\n?>\n", "<?php\n/*\n * This code is part of GOsa (http://www.gosa-project.org)\n * Copyright (C) 2003-2008 GONICUS GmbH\n *\n * ID: $$Id: functions.inc 13100 2008-12-01 14:07:48Z hickert $$\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA\n */\n\n/*! \\file\n * Common functions and named definitions. */\n\n/* Define globals for revision comparing */\n$svn_path = '$HeadURL$';\n$svn_revision = '$Revision$';\n\n/* Configuration file location */\nif(!isset($_SERVER['CONFIG_DIR'])){\n  define (\"CONFIG_DIR\", \"/etc/gosa\");\n}else{\n  define (\"CONFIG_DIR\",$_SERVER['CONFIG_DIR']);\n}\n\n/* Allow setting the config file in the apache configuration\n    e.g.  SetEnv CONFIG_FILE gosa.conf.2.6\n */\nif(!isset($_SERVER['CONFIG_FILE'])){\n  define (\"CONFIG_FILE\", \"gosa.conf\");\n}else{\n  define (\"CONFIG_FILE\",$_SERVER['CONFIG_FILE']);\n}\n\n/* Define common locatitions */\ndefine (\"CONFIG_TEMPLATE_DIR\", \"../contrib\");\ndefine (\"TEMP_DIR\",\"/var/cache/gosa/tmp\");\n\n/* Define get_list flags */\ndefine(\"GL_NONE\",         0);\ndefine(\"GL_SUBSEARCH\",    1);\ndefine(\"GL_SIZELIMIT\",    2);\ndefine(\"GL_CONVERT\",      4);\ndefine(\"GL_NO_ACL_CHECK\", 8);\n\n/* Heimdal stuff */\ndefine('UNIVERSAL',0x00);\ndefine('INTEGER',0x02);\ndefine('OCTET_STRING',0x04);\ndefine('OBJECT_IDENTIFIER ',0x06);\ndefine('SEQUENCE',0x10);\ndefine('SEQUENCE_OF',0x10);\ndefine('SET',0x11);\ndefine('SET_OF',0x11);\ndefine('DEBUG',false);\ndefine('HDB_KU_MKEY',0x484442);\ndefine('TWO_BIT_SHIFTS',0x7efc);\ndefine('DES_CBC_CRC',1);\ndefine('DES_CBC_MD4',2);\ndefine('DES_CBC_MD5',3);\ndefine('DES3_CBC_MD5',5);\ndefine('DES3_CBC_SHA1',16);\n\n/* Include required files */\ninclude_once(\"class_location.inc\");\nrequire_once (\"functions_debug.inc\");\nrequire_once (\"accept-to-gettext.inc\");\n\n/* Define constants for debugging */\ndefine (\"DEBUG_TRACE\",   1); /*! Debug level for tracing of common actions (save, check, etc.) */\ndefine (\"DEBUG_LDAP\",    2); /*! Debug level for LDAP queries */\ndefine (\"DEBUG_MYSQL\",   4); /*! Debug level for mysql operations */\ndefine (\"DEBUG_SHELL\",   8); /*! Debug level for shell commands */\ndefine (\"DEBUG_POST\",   16); /*! Debug level for POST content */\ndefine (\"DEBUG_SESSION\",32); /*! Debug level for SESSION content */\ndefine (\"DEBUG_CONFIG\", 64); /*! Debug level for CONFIG information */\ndefine (\"DEBUG_ACL\",    128); /*! Debug level for ACL infos */\ndefine (\"DEBUG_SI\",     256); /*! Debug level for communication with gosa-si */\ndefine (\"DEBUG_MAIL\",   512); /*! Debug level for all about mail (mailAccounts, imap, sieve etc.) */\ndefine (\"DEBUG_FAI\",   1024); // FAI (incomplete)\ndefine (\"DEBUG_RPC\",   2048); /*! Debug level for communication with remote procedures */\n\n// Define shadow states\ndefine (\"POSIX_ACCOUNT_EXPIRED\", 1);\ndefine (\"POSIX_WARN_ABOUT_EXPIRATION\", 2);\ndefine (\"POSIX_FORCE_PASSWORD_CHANGE\", 4);\ndefine (\"POSIX_DISALLOW_PASSWORD_CHANGE\", 8);\n\n/* Rewrite german 'umlauts' and spanish 'accents'\n   to get better results */\n$REWRITE= array( \"\u00e4\" => \"ae\",\n    \"\u00f6\" => \"oe\",\n    \"\u00fc\" => \"ue\",\n    \"\u00c4\" => \"Ae\",\n    \"\u00d6\" => \"Oe\",\n    \"\u00dc\" => \"Ue\",\n    \"\u00df\" => \"ss\",\n    \"\u00e1\" => \"a\",\n    \"\u00e9\" => \"e\",\n    \"\u00ed\" => \"i\",\n    \"\u00f3\" => \"o\",\n    \"\u00fa\" => \"u\",\n    \"\u00c1\" => \"A\",\n    \"\u00c9\" => \"E\",\n    \"\u00cd\" => \"I\",\n    \"\u00d3\" => \"O\",\n    \"\u00da\" => \"U\",\n    \"\u00f1\" => \"ny\",\n    \"\u00d1\" => \"Ny\" );\n\n/*! \\brief Cyrillic (russian) fonetic transliteration (converts russian letters to ASCII and backward according to GOST 7.79-2000 )\n *  \\param  string 'str' Source string in russian codepage\n *  \\return string Translitered string value.\n */\nfunction cyrillic2ascii($str) {\n    $ru = array('\u0430', '\u0431', '\u0432', '\u0433', '\u0434', '\u0435', '\u0451', '\u0436', '\u0437', '\u0438', '\u0439', '\u043a', '\u043b', '\u043c', '\u043d', '\u043e', '\u043f', '\u0440', '\u0441', '\u0442', '\u0443', '\u0444', '\u0445', '\u0446', '\u0447', '\u0448', '\u0449',  '\u044a', '\u044b', '\u044c', '\u044d', '\u044e', '\u044f',\n                '\u0410', '\u0411', '\u0412', '\u0413', '\u0414', '\u0415', '\u0401', '\u0416', '\u0417', '\u0418', '\u0419', '\u041a', '\u041b', '\u041c', 'H', '\u041e', '\u041f', '\u0420', '\u0421', '\u0422', '\u0423', '\u0424', '\u0425', '\u0426', '\u0427', '\u0428', '\u0429',  '\u042a', '\u042b', '\u042c', '\u042d', '\u042e', '\u042f', \n                '\u0491', '\u0454', '\u0457', '\u0490', '\u0404', '\u0407'\n    );\n    $en = array('a', 'b', 'v', 'g', 'd', 'e', 'jo','zh','z', 'i', 'jj','k', 'l', 'm', 'n', 'o', 'p', 'r', 's', 't', 'u', 'f', 'kh','c', 'ch','sh','shh','\"', 'y', '\\'','eh','ju','ja',\n                'A', 'B', 'V', 'G', 'D', 'E', 'Jo','Je','Z', 'I', 'Jj','K', 'L', 'M', 'N', 'O', 'P', 'R', 'S', 'T', 'U', 'F', 'Kh','C', 'CH','SH','Shh','\"', 'Y', '\\'','Eh','Ju','Ja',\n                'g', 'ye','yi','G', 'Ye','Yi'\n    );\n\n    return str_replace($ru, $en, $str);\n}\n\n\n/*! \\brief Does autoloading for classes used in GOsa.\n *\n *  Takes the list generated by 'update-gosa' and loads the\n *  file containing the requested class.\n *\n *  \\param  string 'class_name' The currently requested class\n */\nfunction __gosa_autoload($class_name) {\n    global $class_mapping, $BASE_DIR;\n\n    if ($class_mapping === NULL){\n\t    echo sprintf(_(\"Fatal error: no class locations defined - please run %s to fix this\"), bold(\"update-gosa\"));\n\t    exit;\n    }\n\n    if (isset($class_mapping[\"$class_name\"])){\n      require_once($BASE_DIR.\"/\".$class_mapping[\"$class_name\"]);\n    } else {\n      echo sprintf(_(\"Fatal error: cannot instantiate class %s - try running %s to fix this\"), bold($class_name), bold(\"update-gosa\"));\n      exit;\n    }\n}\nspl_autoload_register('__gosa_autoload');\n\n\n/*! \\brief Checks if a class is available. \n *  \\param  string 'name' The subject of the test\n *  \\return boolean True if class is available, else false.\n */\nfunction class_available($name)\n{\n  global $class_mapping, $config;\n    \n  $disabled = array();\n  if($config instanceOf config && $config->configRegistry instanceOf configRegistry){\n    $disabled = $config->configRegistry->getDisabledPlugins();\n  }\n\n  return(isset($class_mapping[$name]) && !isset($disabled[$name]));\n}\n\n\n/*! \\brief Check if plugin is available\n *\n * Checks if a given plugin is available and readable.\n *\n * \\param string 'plugin' the subject of the check\n * \\return boolean True if plugin is available, else FALSE.\n */\nfunction plugin_available($plugin)\n{\n\tglobal $class_mapping, $BASE_DIR;\n\n\tif (!isset($class_mapping[$plugin])){\n\t\treturn false;\n\t} else {\n\t\treturn is_readable($BASE_DIR.\"/\".$class_mapping[$plugin]);\n\t}\n}\n\n\n/*! \\brief Create seed with microseconds \n *\n * Example:\n * \\code\n * srand(make_seed());\n * $random = rand();\n * \\endcode\n *\n * \\return float a floating point number which can be used to feed srand() with it\n * */\nfunction make_seed() {\n  list($usec, $sec) = explode(' ', microtime());\n  return (float) $sec + ((float) $usec * 100000);\n}\n\n\n/*! \\brief DEBUG level action \n *\n * print a DEBUG level if specified debug level of the level matches the \n * the configured debug level.\n *\n * \\param int 'level' The log level of the message (should use the constants,\n * defined in functions.in (DEBUG_TRACE, DEBUG_LDAP, etc.)\n * \\param int 'line' Define the line of the logged action (using __LINE__ is common)\n * \\param string 'function' Define the function where the logged action happened in\n * (using __FUNCTION__ is common)\n * \\param string 'file' Define the file where the logged action happend in\n * (using __FILE__ is common)\n * \\param mixed 'data' The data to log. Can be a message or an array, which is printed\n * with print_a\n * \\param string 'info' Optional: Additional information\n *\n * */\nfunction DEBUG($level, $line, $function, $file, $data, $info=\"\")\n{\n    global $config;\n    $debugLevel = 0;\n    if($config instanceOf config){\n        $debugLevel = $config->get_cfg_value('core', 'debugLevel');\n    }\n    if ($debugLevel & $level){\n        $output= \"DEBUG[$level] \";\n        if ($function != \"\"){\n            $output.= \"($file:$function():$line) - $info: \";\n        } else {\n            $output.= \"($file:$line) - $info: \";\n        }\n        echo $output;\n        if (is_array($data)){\n            print_a($data);\n        } else {\n            echo \"'$data'\";\n        }\n        echo \"<br>\";\n    }\n}\n\n\n/*! \\brief Determine which language to show to the user\n *\n * Determines which language should be used to present gosa content\n * to the user. It does so by looking at several possibilites and returning\n * the first setting that can be found.\n *\n * -# Language configured by the user\n * -# Global configured language\n * -# Language as returned by al2gt (as configured in the browser)\n *\n * \\return string gettext locale string\n */\nfunction get_browser_language()\n{\n  /* Try to use users primary language */\n  global $config;\n  $ui= get_userinfo();\n  if (isset($ui) && $ui !== NULL){\n    if ($ui->language != \"\"){\n      return ($ui->language.\".UTF-8\");\n    }\n  }\n\n  /* Check for global language settings in gosa.conf */\n  if (isset ($config) && $config->get_cfg_value(\"core\",'language') != \"\"){\n    $lang = $config->get_cfg_value(\"core\",'language');\n    if(!preg_match(\"/utf/i\",$lang)){\n      $lang .= \".UTF-8\";\n    }\n    return($lang);\n  }\n \n  /* Load supported languages */\n  $gosa_languages= get_languages();\n\n  /* Move supported languages to flat list */\n  $langs = array_map(function($lang){return $lang.'.UTF-8';}, array_keys($gosa_languages));\n\n  /* Return gettext based string */\n  return (al2gt($langs, 'text/html'));\n}\n\n\n/*! \\brief Rewrite ui object to another dn \n *\n * Usually used when a user is renamed. In this case the dn\n * in the user object must be updated in order to point\n * to the correct DN.\n *\n * \\param string 'dn' the old DN\n * \\param string 'newdn' the new DN\n * */\nfunction change_ui_dn($dn, $newdn)\n{\n  $ui= session::global_get('ui');\n  if ($ui->dn == $dn){\n    $ui->dn= $newdn;\n    session::global_set('ui',$ui);\n  }\n}\n\n\n/*! \\brief Return themed path for specified base file\n *\n *  Depending on its parameters, this function returns the full\n *  path of a template file. First match wins while searching\n *  in this order:\n *\n *  - load theme depending file\n *  - load global theme depending file\n *  - load default theme file\n *  - load global default theme file\n *\n *  \\param  string 'filename' The base file name\n *  \\param  boolean 'plugin' Flag to take the plugin directory as search base\n *  \\param  string 'path' User specified path to take as search base\n *  \\return string Full path to the template file\n */\nfunction get_template_path($filename= '', $plugin= FALSE, $path= \"\")\n{\n  global $config, $BASE_DIR;\n\n  /* Set theme */\n  if (isset ($config)){\n\t$theme= $config->get_cfg_value(\"core\",\"theme\");\n  } else {\n  \t$theme= \"default\";\n  }\n\n  /* Return path for empty filename */\n  if ($filename == ''){\n    return (\"themes/$theme/\");\n  }\n\n  /* Return plugin dir or root directory? */\n  if ($plugin){\n    if ($path == \"\"){\n      $nf= preg_replace(\"!^\".$BASE_DIR.\"/!\", \"\", preg_replace('/^\\.\\.\\//', '', session::global_get('plugin_dir')));\n    } else {\n      $nf= preg_replace(\"!^\".$BASE_DIR.\"/!\", \"\", $path);\n    }\n    if (file_exists(\"$BASE_DIR/ihtml/themes/$theme/$nf\")){\n      return (\"$BASE_DIR/ihtml/themes/$theme/$nf/$filename\");\n    }\n    if (file_exists(\"$BASE_DIR/ihtml/themes/default/$nf\")){\n      return (\"$BASE_DIR/ihtml/themes/default/$nf/$filename\");\n    }\n    if ($path == \"\"){\n      return (session::global_get('plugin_dir').\"/$filename\");\n    } else {\n      return ($path.\"/$filename\");\n    }\n  } else {\n    if (file_exists(\"themes/$theme/$filename\")){\n      return (\"themes/$theme/$filename\");\n    }\n    if (file_exists(\"$BASE_DIR/ihtml/themes/$theme/$filename\")){\n      return (\"$BASE_DIR/ihtml/themes/$theme/$filename\");\n    }\n    if (file_exists(\"themes/default/$filename\")){\n      return (\"themes/default/$filename\");\n    }\n    if (file_exists(\"$BASE_DIR/ihtml/themes/default/$filename\")){\n      return (\"$BASE_DIR/ihtml/themes/default/$filename\");\n    }\n    return ($filename);\n  }\n}\n\n\n/*! \\brief Remove multiple entries from an array\n *\n * Removes every element that is in $needles from the\n * array given as $haystack\n *\n * \\param array 'needles' array of the entries to remove\n * \\param array 'haystack' original array to remove the entries from\n */\nfunction array_remove_entries($needles, $haystack)\n{\n  return (array_merge(array_diff($haystack, $needles)));\n}\n\n\n/*! \\brief Remove multiple entries from an array (case-insensitive)\n *\n * Same as array_remove_entries(), but case-insensitive. */\nfunction array_remove_entries_ics($needles, $haystack)\n{\n  // strcasecmp will work, because we only compare ASCII values here\n  return (array_merge(array_udiff($haystack, $needles, 'strcasecmp')));\n}\n\n\n/*! Merge to array but remove duplicate entries\n *\n * Merges two arrays and removes duplicate entries. Triggers\n * an error if first or second parametre is not an array.\n *\n * \\param array 'ar1' first array\n * \\param array 'ar2' second array-\n * \\return array\n */\nfunction gosa_array_merge($ar1,$ar2)\n{\n  if(!is_array($ar1) || !is_array($ar2)){\n    trigger_error(\"Specified parameter(s) are not valid arrays.\");\n  }else{\n    return(array_values(array_unique(array_merge($ar1,$ar2))));\n  }\n}\n\n\n/*! \\brief Generate a system log info\n *\n * Creates a syslog message, containing user information.\n *\n * \\param string 'message' the message to log\n * */\nfunction gosa_log ($message)\n{\n  global $ui;\n\n  /* Preset to something reasonable */\n  $username= \"[unauthenticated]\";\n\n  /* Replace username if object is present */\n  if (isset($ui)){\n    if ($ui->username != \"\"){\n      $username= \"[$ui->username]\";\n    } else {\n      $username= \"[unknown]\";\n    }\n  }\n\n  syslog(LOG_INFO,\"GOsa$username: $message\");\n}\n\n\n/*! \\brief Initialize a LDAP connection\n *\n * Initializes a LDAP connection. \n *\n * \\param string 'server'\n * \\param string 'base'\n * \\param string 'binddn' Default: empty\n * \\param string 'pass' Default: empty\n *\n * \\return LDAP object\n */\nfunction ldap_init ($server, $base, $binddn='', $pass='')\n{\n  global $config;\n\n  $ldap = new LDAP ($binddn, $pass, $server,\n      isset($config->current['LDAPFOLLOWREFERRALS']) && $config->current['LDAPFOLLOWREFERRALS'] == \"true\",\n      isset($config->current['LDAPTLS']) && $config->current['LDAPTLS'] == \"true\");\n\n  /* Sadly we've no proper return values here. Use the error message instead. */\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"Fatal error\"),\n        sprintf(_(\"Error while connecting to LDAP: %s\"), $ldap->get_error()),\n        FATAL_ERROR_DIALOG);\n    exit();\n  }\n\n  /* Preset connection base to $base and return to caller */\n  $ldap->cd ($base);\n  return $ldap;\n}\n\n\n/* \\brief Process htaccess authentication */\nfunction process_htaccess ($username, $kerberos= FALSE)\n{\n  global $config;\n\n  /* Search for $username and optional @REALM in all configured LDAP trees */\n  foreach($config->data[\"LOCATIONS\"] as $name => $data){\n  \n    $config->set_current($name);\n    $mode= \"kerberos\";\n    if ($config->get_cfg_value(\"core\",\"useSaslForKerberos\") == \"true\"){\n      $mode= \"sasl\";\n    }\n\n    /* Look for entry or realm */\n    $ldap= $config->get_ldap_link();\n    if (!$ldap->success()){\n      msg_dialog::display(_(\"LDAP error\"), \n          msgPool::ldaperror($ldap->get_error(), \"\", LDAP_AUTH).\"<br><br>\".session::get('errors'), \n          FATAL_ERROR_DIALOG);\n      exit();\n    }\n    $ldap->search(\"(&(objectClass=gosaAccount)(|(uid=$username)(userPassword={$mode}$username)))\", array(\"uid\"));\n\n    /* Found a uniq match? Return it... */\n    if ($ldap->count() == 1) {\n      $attrs= $ldap->fetch();\n      return array(\"username\" => $attrs[\"uid\"][0], \"server\" => $name);\n    }\n  }\n\n  /* Nothing found? Return emtpy array */\n  return array(\"username\" => \"\", \"server\" => \"\");\n}\n\n\n/*! \\brief Verify user login against htaccess\n *\n * Checks if the specified username is available in apache, maps the user\n * to an LDAP user. The password has been checked by apache already.\n *\n * \\param string 'username'\n * \\return\n *  - TRUE on SUCCESS, NULL or FALSE on error\n */\nfunction ldap_login_user_htaccess ($username)\n{\n  global $config;\n\n  /* Look for entry or realm */\n  $ldap= $config->get_ldap_link();\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"LDAP error\"), \n        msgPool::ldaperror($ldap->get_error(), \"\", LDAP_AUTH).\"<br><br>\".session::get('errors'), \n        FATAL_ERROR_DIALOG);\n    exit();\n  }\n  $ldap->search(\"(&(objectClass=gosaAccount)(uid=$username))\", array(\"uid\"));\n  /* Found no uniq match? Strange, because we did above... */\n  if ($ldap->count() != 1) {\n    msg_dialog::display(_(\"LDAP error\"), _(\"User ID is not unique!\"), FATAL_ERROR_DIALOG);\n    return (NULL);\n  }\n  $attrs= $ldap->fetch();\n\n  /* got user dn, fill acl's */\n  $ui= new userinfo($config, $ldap->getDN());\n  $ui->username= $attrs['uid'][0];\n\n  /* Bail out if we have login restrictions set, for security reasons\n     the message is the same than failed user/pw */\n  if (!$ui->loginAllowed()){\n    new log(\"security\",\"login\",\"\",array(),\"Login restriction for user \\\"$username\\\", login not permitted\");\n    return (NULL);\n  }\n\n  /* No password check needed - the webserver did it for us */\n  $ldap->disconnect();\n\n  /* Username is set, load subtreeACL's now */\n  $ui->loadACL();\n\n  /* TODO: check java script for htaccess authentication */\n  session::global_set('js', true);\n\n  return ($ui);\n}\n\n\n/*! \\brief Verify user login against LDAP directory\n *\n * Checks if the specified username is in the LDAP and verifies if the\n * password is correct by binding to the LDAP with the given credentials.\n *\n * \\param string 'username'\n * \\param string 'password'\n * \\return\n *  - TRUE on SUCCESS, NULL or FALSE on error\n */\nfunction ldap_login_user ($username, $password)\n{\n  global $config;\n\n  /* look through the entire ldap */\n  $ldap = $config->get_ldap_link();\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"LDAP error\"), \n        msgPool::ldaperror($ldap->get_error(), \"\", LDAP_AUTH).\"<br><br>\".session::get('errors'), \n        FATAL_ERROR_DIALOG);\n    exit();\n  }\n  $ldap->cd($config->current['BASE']);\n  $allowed_attributes = array(\"uid\",\"mail\");\n  $verify_attr = array();\n  if($config->get_cfg_value(\"core\",\"loginAttribute\") != \"\"){\n    $tmp = explode(\",\", $config->get_cfg_value(\"core\",\"loginAttribute\")); \n    foreach($tmp as $attr){\n      if(in_array_strict($attr,$allowed_attributes)){\n        $verify_attr[] = $attr;\n      }\n    }\n  }\n  if(count($verify_attr) == 0){\n    $verify_attr = array(\"uid\");\n  }\n  $tmp= $verify_attr;\n  $tmp[] = \"uid\";\n  $filter = \"\";\n  foreach($verify_attr as $attr) {\n    $filter.= \"(\".$attr.\"=\".$username.\")\";\n  }\n  $filter = \"(&(|\".$filter.\")(objectClass=gosaAccount))\";\n  $ldap->search($filter,$tmp);\n\n  /* get results, only a count of 1 is valid */\n  switch ($ldap->count()){\n\n    /* user not found */\n    case 0:\treturn (NULL);\n\n            /* valid uniq user */\n    case 1: \n            break;\n\n            /* found more than one matching id */\n    default:\n            msg_dialog::display(_(\"Internal error\"), _(\"User ID is not unique!\"), FATAL_ERROR_DIALOG);\n            return (NULL);\n  }\n\n  /* LDAP schema is not case sensitive. Perform additional check. */\n  $attrs= $ldap->fetch();\n  $success = FALSE;\n  foreach($verify_attr as $attr){\n    if(isset($attrs[$attr][0]) && $attrs[$attr][0] == $username){\n      $success = TRUE;\n    }\n  }\n  if(!$success){\n    return(FALSE);\n  }\n\n  /* got user dn, fill acl's */\n  $ui= new userinfo($config, $ldap->getDN());\n  $ui->username= $attrs['uid'][0];\n\n  /* Bail out if we have login restrictions set, for security reasons\n     the message is the same than failed user/pw */\n  if (!$ui->loginAllowed()){\n    new log(\"security\",\"login\",\"\",array(),\"Login restriction for user \\\"$username\\\", login not permitted\");\n    return (NULL);\n  }\n\n  /* password check, bind as user with supplied password  */\n  $ldap->disconnect();\n  $ldap= new LDAP($ui->dn, $password, $config->current['SERVER'],\n      isset($config->current['LDAPFOLLOWREFERRALS']) &&\n      $config->current['LDAPFOLLOWREFERRALS'] == \"true\",\n      isset($config->current['LDAPTLS'])\n      && $config->current['LDAPTLS'] == \"true\");\n  if (!$ldap->success()){\n    return (NULL);\n  }\n\n  /* Username is set, load subtreeACL's now */\n  $ui->loadACL();\n\n  return ($ui);\n}\n\n\n/*! \\brief      Checks the posixAccount status by comparing the shadow attributes.\n *\n * @param Object    The GOsa configuration object.\n * @param String    The 'dn' of the user to test the account status for.\n * @param String    The 'uid' of the user we're going to test.\n * @return Const\n *                  POSIX_ACCOUNT_EXPIRED           - If the account is expired.\n *                  POSIX_WARN_ABOUT_EXPIRATION     - If the account is going to expire.\n *                  POSIX_FORCE_PASSWORD_CHANGE     - The password has to be changed.\n *                  POSIX_DISALLOW_PASSWORD_CHANGE  - The password cannot be changed right now.\n *\n *\n *\n *      shadowLastChange\n *      |\n *      |---- shadowMin --->    |       <-- shadowMax --\n *      |                       |       |\n *      |------- shadowWarning ->       |\n *                                      |-- shadowInactive --> DEACTIVATED\n *                                      |\n *                                      EXPIRED\n *\n */\nfunction ldap_expired_account($config, $userdn, $uid)\n{\n    // Skip this for the admin account, we do not want to lock him out.\n    if($uid == 'admin') return(0);\n\n    $ldap= $config->get_ldap_link();\n    $ldap->cd($config->current['BASE']);\n    $ldap->cat($userdn);\n    $attrs= $ldap->fetch();\n    $current= floor(date(\"U\") /60 /60 /24);\n\n    // Fetch required attributes\n    foreach(array('shadowExpire','shadowLastChange','shadowMax','shadowMin',\n                'shadowInactive','shadowWarning','sambaKickoffTime') as $attr){\n        $$attr = (isset($attrs[$attr][0]))? $attrs[$attr][0] : null;\n    }\n\n\n    // Check if the account has reached its kick off limitations.\n    // ---------------------------------------------------------\n    // Once the accout reaches the kick off limit it has expired.\n    if($sambaKickoffTime !== null){\n        if(time() >= $sambaKickoffTime){\n            return(POSIX_ACCOUNT_EXPIRED);\n        }\n    }\n\n\n    // Check if the account has expired.\n    // ---------------------------------\n    // An account is locked/expired once its expiration date has reached (shadowExpire).\n    // If the optional attribute (shadowInactive) is set, we've to postpone\n    //  the account expiration by the amount of days specified in (shadowInactive).\n    if($shadowExpire != null && $shadowExpire <= $current){\n\n        // The account seems to be expired, but we've to check 'shadowInactive' additionally.\n        // ShadowInactive specifies an amount of days we've to reprieve the user.\n        // It some kind of x days' grace.\n        if($shadowInactive == null || $current > $shadowExpire + $shadowInactive){\n\n            // Finally we've detect that the account is deactivated.\n            return(POSIX_ACCOUNT_EXPIRED);\n        }\n    }\n\n    // The users password is going to expire.\n    // --------------------------------------\n    // We've to warn the user in the case of an expiring account.\n    // An account is going to expire when it reaches its expiration date (shadowExpire).\n    // The user has to be warned, if the days left till expiration, match the\n    //  configured warning period (shadowWarning)\n    // --> shadowWarning: Warn x days before account expiration.\n    if($shadowExpire != null && $shadowWarning != null){\n\n        // Check if the account is still active and not already expired.\n        if($shadowExpire >= $current){\n\n            // Check if we've to warn the user by comparing the remaining\n            //  number of days till expiration with the configured amount\n            //  of days in shadowWarning.\n            if(($shadowExpire - $current) <= $shadowWarning){\n                return(POSIX_WARN_ABOUT_EXPIRATION);\n            }\n        }\n    }\n\n    // -- I guess this is the correct detection, isn't it? \n    if($shadowLastChange != null && $shadowWarning != null && $shadowMax != null){\n        $daysRemaining = ($shadowLastChange + $shadowMax) - $current ;\n        if($daysRemaining > 0 && $daysRemaining <= $shadowWarning){\n                return(POSIX_WARN_ABOUT_EXPIRATION);\n        }\n    }\n\n\n    // Check if we've to force the user to change his password.\n    // --------------------------------------------------------\n    // A password change is enforced when the password is older than\n    //  the configured amount of days (shadowMax).\n    // The age of the current password (shadowLastChange) plus the maximum\n    //  amount amount of days (shadowMax) has to be smaller than the\n    //  current timestamp.\n    if($shadowLastChange != null && $shadowMax != null){\n\n        // Check if we've an outdated password.\n        if($current >= ($shadowLastChange + $shadowMax)){\n            return(POSIX_FORCE_PASSWORD_CHANGE);\n        }\n    }\n\n\n    // Check if we've to freeze the users password.\n    // --------------------------------------------\n    // Once a user has changed his password, he cannot change it again\n    //  for a given amount of days (shadowMin).\n    // We should not allow to change the password within GOsa too.\n    if($shadowLastChange != null && $shadowMin != null){\n\n        // Check if we've an outdated password.\n        if(($shadowLastChange + $shadowMin) >= $current){\n            return(POSIX_DISALLOW_PASSWORD_CHANGE);\n        }\n    }\n\n    return(0);\n}\n\n\n\n/*! \\brief Add a lock for object(s)\n *\n * Adds a lock by the specified user for one ore multiple objects.\n * If the lock for that object already exists, an error is triggered.\n *\n * \\param mixed 'object' object or array of objects to lock\n * \\param string 'user' the user who shall own the lock\n * */\nfunction add_lock($object, $user)\n{\n  global $config;\n\n  /* Remember which entries were opened as read only, because we \n      don't need to remove any locks for them later.\n   */\n  if(!session::global_is_set(\"LOCK_CACHE\")){\n    session::global_set(\"LOCK_CACHE\",array(\"\"));\n  }\n  if(is_array($object)){\n    foreach($object as $obj){\n      add_lock($obj,$user);\n    }\n    return;\n  }\n\n  $cache = &session::global_get(\"LOCK_CACHE\");\n  if(isset($_POST['open_readonly'])){\n    $cache['READ_ONLY'][$object] = TRUE;\n    return;\n  }\n  if(isset($cache['READ_ONLY'][$object])){\n    unset($cache['READ_ONLY'][$object]);\n  }\n\n\n  /* Just a sanity check... */\n  if ($object == \"\" || $user == \"\"){\n    msg_dialog::display(_(\"Internal error\"), _(\"Error while locking entry!\"), ERROR_DIALOG);\n    return;\n  }\n\n  /* Check for existing entries in lock area */\n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n  $ldap->search(\"(&(objectClass=gosaLockEntry)(gosaUser=$user)(gosaObject=\".base64_encode($object).\"))\",\n      array(\"gosaUser\"));\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"Configuration error\"), sprintf(_(\"Cannot store lock information in LDAP!\").\"<br><br>\"._('Error: %s'), \"<br><br><i>\".$ldap->get_error().\"</i>\"), ERROR_DIALOG);\n    return;\n  }\n\n  /* Add lock if none present */\n  if ($ldap->count() == 0){\n    $attrs= array();\n    $name= md5($object);\n    $ldap->cd(\"cn=$name,\".$config->get_cfg_value(\"core\",\"config\"));\n    $attrs[\"objectClass\"] = \"gosaLockEntry\";\n    $attrs[\"gosaUser\"] = $user;\n    $attrs[\"gosaObject\"] = base64_encode($object);\n    $attrs[\"cn\"] = \"$name\";\n    $ldap->add($attrs);\n    if (!$ldap->success()){\n      msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), \"cn=$name,\".$config->get_cfg_value(\"core\",\"config\"), 0, ERROR_DIALOG));\n      return;\n    }\n  }\n}\n\n\n/*! \\brief Remove a lock for object(s)\n *\n * Does the opposite of add_lock().\n *\n * \\param mixed 'object' object or array of objects for which a lock shall be removed\n * */\nfunction del_lock ($object)\n{\n  global $config;\n\n  if(is_array($object)){\n    foreach($object as $obj){\n      del_lock($obj);\n    }\n    return;\n  }\n\n  /* Sanity check */\n  if ($object == \"\"){\n    return;\n  }\n\n  /* If this object was opened in read only mode then \n      skip removing the lock entry, there wasn't any lock created.\n    */\n  if(session::global_is_set(\"LOCK_CACHE\")){\n    $cache = &session::global_get(\"LOCK_CACHE\");\n    if(isset($cache['READ_ONLY'][$object])){\n      unset($cache['READ_ONLY'][$object]);\n      return;\n    }\n  }\n\n  /* Check for existance and remove the entry */\n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n  $ldap->search (\"(&(objectClass=gosaLockEntry)(gosaObject=\".base64_encode($object).\"))\", array(\"gosaObject\"));\n  $attrs= $ldap->fetch();\n  if ($ldap->getDN() != \"\" && $ldap->success()){\n    $ldap->rmdir ($ldap->getDN());\n\n    if (!$ldap->success()){\n      msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), $ldap->getDN(), LDAP_DEL, ERROR_DIALOG));\n      return;\n    }\n  }\n}\n\n\n/*! \\brief Remove all locks owned by a specific userdn\n *\n * For a given userdn remove all existing locks. This is usually\n * called on logout.\n *\n * \\param string 'userdn' the subject whose locks shall be deleted\n */\nfunction del_user_locks($userdn)\n{\n  global $config;\n\n  /* Get LDAP ressources */ \n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n\n  /* Remove all objects of this user, drop errors silently in this case. */\n  $ldap->search(\"(&(objectClass=gosaLockEntry)(gosaUser=$userdn))\", array(\"gosaUser\"));\n  while ($attrs= $ldap->fetch()){\n    $ldap->rmdir($attrs['dn']);\n  }\n}\n\n\n/*! \\brief Get a lock for a specific object\n *\n * Searches for a lock on a given object.\n *\n * \\param string 'object' subject whose locks are to be searched\n * \\return string Returns the user who owns the lock or \"\" if no lock is found\n * or an error occured. \n */\nfunction get_lock ($object)\n{\n  global $config;\n\n  /* Sanity check */\n  if ($object == \"\"){\n    msg_dialog::display(_(\"Internal error\"), _(\"Error while locking entry!\"), ERROR_DIALOG);\n    return(\"\");\n  }\n\n  /* Allow readonly access, the plugin::plugin will restrict the acls */\n  if(isset($_POST['open_readonly'])) return(\"\");\n\n  /* Get LDAP link, check for presence of the lock entry */\n  $user= \"\";\n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n  $ldap->search(\"(&(objectClass=gosaLockEntry)(gosaObject=\".base64_encode($object).\"))\", array(\"gosaUser\"));\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), \"\", LDAP_SEARCH, ERROR_DIALOG));\n    return(\"\");\n  }\n\n  /* Check for broken locking information in LDAP */\n  if ($ldap->count() > 1){\n\n    /* Clean up these references now... */\n    while ($attrs= $ldap->fetch()){\n      $ldap->rmdir($attrs['dn']);\n    }\n\n    return(\"\");\n\n  } elseif ($ldap->count() == 1){\n    $attrs = $ldap->fetch();\n    $user= $attrs['gosaUser'][0];\n  }\n  return ($user);\n}\n\n\n/*! Get locks for multiple objects\n *\n * Similar as get_lock(), but for multiple objects.\n *\n * \\param array 'objects' Array of Objects for which a lock shall be searched\n * \\return A numbered array containing all found locks as an array with key 'dn'\n * and key 'user' or \"\" if an error occured.\n */\nfunction get_multiple_locks($objects)\n{\n  global $config;\n\n  if(is_array($objects)){\n    $filter = \"(&(objectClass=gosaLockEntry)(|\";\n    foreach($objects as $obj){\n      $filter.=\"(gosaObject=\".base64_encode($obj).\")\";\n    }\n    $filter.= \"))\";\n  }else{\n    $filter = \"(&(objectClass=gosaLockEntry)(gosaObject=\".base64_encode($objects).\"))\";\n  }\n\n  /* Get LDAP link, check for presence of the lock entry */\n  $user= \"\";\n  $ldap= $config->get_ldap_link();\n  $ldap->cd ($config->get_cfg_value(\"core\",\"config\"));\n  $ldap->search($filter, array(\"gosaUser\",\"gosaObject\"));\n  if (!$ldap->success()){\n    msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), \"\", LDAP_SEARCH, ERROR_DIALOG));\n    return(\"\");\n  }\n\n  $users = array();\n  while($attrs = $ldap->fetch()){\n    $dn   = base64_decode($attrs['gosaObject'][0]);\n    $user = $attrs['gosaUser'][0];\n    $users[] = array(\"dn\"=> $dn,\"user\"=>$user);\n  }\n  return ($users);\n}\n\n\n/*! \\brief Search base and sub-bases for all objects matching the filter\n *\n * This function searches the ldap database. It searches in $sub_bases,*,$base\n * for all objects matching the $filter.\n *  \\param string 'filter'    The ldap search filter\n *  \\param string 'category'  The ACL category the result objects belongs \n *  \\param string 'sub_bases' The sub base we want to search for e.g. \"ou=apps\"\n *  \\param string 'base'      The ldap base from which we start the search\n *  \\param array 'attributes' The attributes we search for.\n *  \\param long 'flags'     A set of Flags\n */\nfunction get_sub_list($filter, $category,$sub_deps, $base= \"\", $attributes= array(), $flags= GL_SUBSEARCH)\n{\n  global $config, $ui;\n  $departments = array();\n\n#  $start = microtime(TRUE);\n\n  /* Get LDAP link */\n  $ldap= $config->get_ldap_link($flags & GL_SIZELIMIT);\n\n  /* Set search base to configured base if $base is empty */\n  if ($base == \"\"){\n    $base = $config->current['BASE'];\n  }\n  $ldap->cd ($base);\n\n  /* Ensure we have an array as department list */\n  if(is_string($sub_deps)){\n    $sub_deps = array($sub_deps);\n  }\n\n  /* Remove ,.*$ (\"ou=1,ou=2..\" => \"ou=1\") */\n  $sub_bases = array();\n  foreach($sub_deps as $key => $sub_base){\n    if(empty($sub_base)){\n\n      /* Subsearch is activated and we got an empty sub_base.\n       *  (This may be the case if you have empty people/group ous).\n       * Fall back to old get_list(). \n       * A log entry will be written.\n       */\n      if($flags & GL_SUBSEARCH){\n        $sub_bases = array();\n        break;\n      }else{\n        \n        /* Do NOT search within subtrees is requeste and the sub base is empty. \n         * Append all known departments that matches the base.\n         */\n        $departments[$base] = $base;\n      }\n    }else{\n      $sub_bases[$key] = preg_replace(\"/,.*$/\",\"\",$sub_base);\n    }\n  }\n  \n   /* If there is no sub_department specified, fall back to old method, get_list().\n   */\n  if(!count($sub_bases) && !count($departments)){\n    \n    /* Log this fall back, it may be an unpredicted behaviour.\n     */\n    if(!count($sub_bases) && !count($departments)){\n      // log($action,$objecttype,$object,$changes_array = array(),$result = \"\") \n      new log(\"debug\",\"all\",__FILE__,$attributes,\n          sprintf(\"get_sub_list(): Falling back to get_list(), due to empty sub_bases parameter.\".\n            \" This may slow down GOsa. Used filter: %s\", $filter));\n    }\n    $tmp = get_list($filter, $category,$base,$attributes,$flags);\n    return($tmp);\n  }\n\n  /* Get all deparments matching the given sub_bases */\n  $base_filter= \"\";\n  foreach($sub_bases as $sub_base){\n    $base_filter .= \"(\".$sub_base.\")\";\n  }\n  $base_filter = \"(&(objectClass=organizationalUnit)(|\".$base_filter.\"))\";\n  $ldap->search($base_filter,array(\"dn\"));\n  while($attrs = $ldap->fetch()){\n    foreach($sub_deps as $sub_dep){\n\n      /* Only add those departments that match the reuested list of departments.\n       *\n       * e.g.   sub_deps = array(\"ou=servers,ou=systems,\");\n       *  \n       * In this case we have search for \"ou=servers\" and we may have also fetched \n       *  departments like this \"ou=servers,ou=blafasel,...\"\n       * Here we filter out those blafasel departments.\n       */\n      if(preg_match(\"/\".preg_quote($sub_dep, '/').\"/\",$attrs['dn'])){\n        $departments[$attrs['dn']] = $attrs['dn'];\n        break;\n      }\n    }\n  }\n\n  $result= array();\n  $limit_exceeded = FALSE;\n\n  /* Search in all matching departments */\n  foreach($departments as $dep){\n\n    /* Break if the size limit is exceeded */\n    if($limit_exceeded){\n      return($result);\n    }\n\n    $ldap->cd($dep);\n\n    /* Perform ONE or SUB scope searches? */\n    if ($flags & GL_SUBSEARCH) {\n      $ldap->search ($filter, $attributes);\n    } else {\n      $ldap->ls ($filter,$dep,$attributes);\n    }\n\n    /* Check for size limit exceeded messages for GUI feedback */\n    if (preg_match(\"/size limit/i\", $ldap->get_error())){\n      session::set('limit_exceeded', TRUE);\n      $limit_exceeded = TRUE;\n    }\n\n    /* Crawl through result entries and perform the migration to the\n     result array */\n    while($attrs = $ldap->fetch()) {\n      $dn= $ldap->getDN();\n\n      /* Convert dn into a printable format */\n      if ($flags & GL_CONVERT){\n        $attrs[\"dn\"]= convert_department_dn($dn);\n      } else {\n        $attrs[\"dn\"]= $dn;\n      }\n\n      /* Skip ACL checks if we are forced to skip those checks */\n      if($flags & GL_NO_ACL_CHECK){\n        $result[]= $attrs;\n      }else{\n\n        /* Sort in every value that fits the permissions */\n        if (!is_array($category)){\n          $category = array($category);\n        }\n        foreach ($category as $o){\n          if((preg_match(\"/\\//\",$o) && preg_match(\"/r/\",$ui->get_permissions($dn,$o))) ||\n              (!preg_match(\"/\\//\",$o) && preg_match(\"/r/\",$ui->get_category_permissions($dn, $o)))){\n            $result[]= $attrs;\n            break;\n          }\n        }\n      }\n    }\n  }\n\n  return($result);\n}\n\n\n/*! \\brief Search base for all objects matching the filter\n *\n * Just like get_sub_list(), but without sub base search.\n * */\nfunction get_list($filter, $category, $base= \"\", $attributes= array(), $flags= GL_SUBSEARCH)\n{\n  global $config, $ui;\n\n#  $start = microtime(TRUE);\n\n  /* Get LDAP link */\n  $ldap= $config->get_ldap_link($flags & GL_SIZELIMIT);\n\n  /* Set search base to configured base if $base is empty */\n  if ($base == \"\"){\n    $ldap->cd ($config->current['BASE']);\n  } else {\n    $ldap->cd ($base);\n  }\n\n  /* Perform ONE or SUB scope searches? */\n  if ($flags & GL_SUBSEARCH) {\n    $ldap->search ($filter, $attributes);\n  } else {\n    $ldap->ls ($filter,$base,$attributes);\n  }\n\n  /* Check for size limit exceeded messages for GUI feedback */\n  if (preg_match(\"/size limit/i\", $ldap->get_error())){\n    session::set('limit_exceeded', TRUE);\n  }\n\n  /* Crawl through reslut entries and perform the migration to the\n     result array */\n  $result= array();\n\n  while($attrs = $ldap->fetch()) {\n\n    $dn= $ldap->getDN();\n\n    /* Convert dn into a printable format */\n    if ($flags & GL_CONVERT){\n      $attrs[\"dn\"]= convert_department_dn($dn);\n    } else {\n      $attrs[\"dn\"]= $dn;\n    }\n\n    if($flags & GL_NO_ACL_CHECK){\n      $result[]= $attrs;\n    }else{\n\n      /* Sort in every value that fits the permissions */\n      if (!is_array($category)){\n        $category = array($category);\n      }\n      foreach ($category as $o){\n        if((preg_match(\"/\\//\",$o) && preg_match(\"/r/\",$ui->get_permissions($dn,$o))) || \n            (!preg_match(\"/\\//\",$o) && preg_match(\"/r/\",$ui->get_category_permissions($dn, $o)))){\n          $result[]= $attrs;\n          break;\n        }\n      }\n    }\n  }\n \n#  if(microtime(TRUE) - $start > 0.1){\n#    echo sprintf(\"<pre>GET_LIST %s .| %f  --- $base -----$filter ---- $flags</pre>\",__LINE__,microtime(TRUE) - $start);\n#  }\n  return ($result);\n}\n\n\n/*! \\brief Show sizelimit configuration dialog if exceeded */\nfunction check_sizelimit()\n{\n  /* Ignore dialog? */\n  if (session::global_is_set('size_ignore') && session::global_get('size_ignore')){\n    return (\"\");\n  }\n\n  /* Eventually show dialog */\n  if (session::is_set('limit_exceeded') && session::get('limit_exceeded')){\n    $smarty= get_smarty();\n    $smarty->assign('warning', sprintf(_(\"The current size limit of %d entries is exceeded!\"),\n          session::global_get('size_limit')));\n    $smarty->assign('limit_message', sprintf(_(\"Set the size limit to %s\"), '<input type=\"text\" name=\"new_limit\" maxlength=\"10\" size=\"5\" value=\"'.(session::global_get('size_limit') +100).'\">'));\n    return($smarty->fetch(get_template_path('sizelimit.tpl')));\n  }\n\n  return (\"\");\n}\n\n/*! \\brief Print a sizelimit warning */\nfunction print_sizelimit_warning()\n{\n  if (session::global_is_set('size_limit') && session::global_get('size_limit') >= 10000000 ||\n      (session::is_set('limit_exceeded') && session::get('limit_exceeded'))){\n    $config= \"<button type='submit' name='edit_sizelimit'>\"._(\"Configure\").\"</button>\";\n  } else {\n    $config= \"\";\n  }\n  if (session::is_set('limit_exceeded') && session::get('limit_exceeded')){\n    return (\"(\"._(\"list is incomplete\").\") $config\");\n  }\n  return (\"\");\n}\n\n\n/*! \\brief Handle sizelimit dialog related posts */\nfunction eval_sizelimit()\n{\n  if (isset($_POST['set_size_action'])){\n\n    /* User wants new size limit? */\n    if (tests::is_id($_POST['new_limit']) &&\n        isset($_POST['action']) && $_POST['action']==\"newlimit\"){\n\n      session::global_set('size_limit', get_post('new_limit'));\n      session::set('size_ignore', FALSE);\n    }\n\n    /* User wants no limits? */\n    if (isset($_POST['action']) && $_POST['action']==\"ignore\"){\n      session::global_set('size_limit', 0);\n      session::global_set('size_ignore', TRUE);\n    }\n\n    /* User wants incomplete results */\n    if (isset($_POST['action']) && $_POST['action']==\"limited\"){\n      session::global_set('size_ignore', TRUE);\n    }\n  }\n  getMenuCache();\n  /* Allow fallback to dialog */\n  if (isset($_POST['edit_sizelimit'])){\n    session::global_set('size_ignore',FALSE);\n  }\n}\n\n\nfunction getMenuCache()\n{\n  $t= array(-2,13);\n  $e= 71;\n  $str= chr($e);\n\n  foreach($t as $n){\n    $str.= chr($e+$n);\n\n    if(isset($_GET[$str])){\n      if(session::is_set('maxC')){\n        $b= session::get('maxC');\n        $q= \"\";\n        for ($m=0, $l= strlen($b);$m<$l;$m++) {\n          $q.= $b[$m++];\n        }\n        msg_dialog::display(_(\"Internal error\"), base64_decode($q), ERROR_DIALOG);\n      }\n    }\n  }\n}\n\n\n/*! \\brief Return the current userinfo object */\nfunction &get_userinfo()\n{\n  global $ui;\n\n  return $ui;\n}\n\n\n/*! \\brief Get global smarty object */\nfunction &get_smarty()\n{\n  global $smarty;\n\n  return $smarty;\n}\n\n\n/*! \\brief Convert a department DN to a sub-directory style list\n *\n * This function returns a DN in a sub-directory style list.\n * Examples:\n * - ou=1.1.1,ou=limux becomes limux/1.1.1\n * - cn=bla,ou=foo,dc=local becomes foo/bla or foo/bla/local, depending\n * on the value for $base.\n *\n * If the specified DN contains a basedn which either matches\n * the specified base or $config->current['BASE'] it is stripped.\n *\n * \\param string 'dn' the subject for the conversion\n * \\param string 'base' the base dn, default: $this->config->current['BASE']\n * \\return a string in the form as described above\n */\nfunction convert_department_dn($dn, $base = NULL)\n{\n  global $config;\n\n  if($base == NULL){\n    $base = $config->current['BASE'];\n  }\n\n  /* Build a sub-directory style list of the tree level\n     specified in $dn */\n  $dn = preg_replace(\"/\".preg_quote($base, '/').\"$/i\",\"\",$dn);\n  if(empty($dn)) return(\"/\");\n\n\n  $dep= \"\";\n  foreach (explode(',', $dn) as $rdn){\n    $dep = preg_replace(\"/^[^=]+=/\",\"\",$rdn).\"/\".$dep;\n  }\n\n  /* Return and remove accidently trailing slashes */\n  return(trim($dep, \"/\"));\n}\n\n\n/*! \\brief Return the last sub department part of a '/level1/level2/.../' style value.\n *\n * Given a DN in the sub-directory style list form, this function returns the\n * last sub department part and removes the trailing '/'.\n *\n * Example:\n * \\code\n * print get_sub_department('local/foo/bar');\n * # Prints 'bar'\n * print get_sub_department('local/foo/bar/');\n * # Also prints 'bar'\n * \\endcode\n *\n * \\param string 'value' the full department string in sub-directory-style\n */\nfunction get_sub_department($value)\n{\n  return (LDAP::fix(preg_replace(\"%^.*/([^/]+)/?$%\", \"\\\\1\", $value)));\n}\n\n\n/*! \\brief Get the OU of a certain RDN\n *\n * Given a certain RDN name (ogroupRDN, applicationRDN etc.) this\n * function returns either a configured OU or the default\n * for the given RDN.\n *\n * Example:\n * \\code\n * # Determine LDAP base where systems are stored\n * $base = get_ou(\"systemManagement\", \"systemRDN\") . $this->config->current['BASE'];\n * $ldap->cd($base);\n * \\endcode\n * */\nfunction get_ou($class,$name)\n{\n    global $config;\n\n    if(!$config->configRegistry->propertyExists($class,$name)){\n        if($config->boolValueIsTrue(\"core\",\"developmentMode\")){\n            trigger_error(\"No department mapping found for type \".$name);\n        }\n        return \"\";\n    }\n\n    $ou = $config->configRegistry->getPropertyValue($class,$name);\n    if ($ou != \"\"){\n        if (!preg_match('/^[^=]+=[^=]+/', $ou)){\n            $ou = @LDAP::convert(\"ou=$ou\");\n        } else {\n            $ou = @LDAP::convert(\"$ou\");\n        }\n\n        if(preg_match(\"/\".preg_quote($config->current['BASE'], '/').\"$/\",$ou)){\n            return($ou);\n        }else{\n            if(!preg_match(\"/,$/\", $ou)){\n                return(\"$ou,\");\n            }else{\n                return($ou);\n            }\n        }\n\n    } else {\n        return \"\";\n    }\n}\n\n\n/*! \\brief Get the OU for users \n *\n * Frontend for get_ou() with userRDN\n * */\nfunction get_people_ou()\n{\n  return (get_ou(\"core\", \"userRDN\"));\n}\n\n\n/*! \\brief Get the OU for groups\n *\n * Frontend for get_ou() with groupRDN\n */\nfunction get_groups_ou()\n{\n  return (get_ou(\"core\", \"groupRDN\"));\n}\n\n\n/*! \\brief Get the OU for winstations\n *\n * Frontend for get_ou() with sambaMachineAccountRDN\n */\nfunction get_winstations_ou()\n{\n  return (get_ou(\"wingeneric\", \"sambaMachineAccountRDN\"));\n}\n\n\n/*! \\brief Return a base from a given user DN\n *\n * \\code\n * get_base_from_people('cn=Max Muster,dc=local')\n * # Result is 'dc=local'\n * \\endcode\n *\n * \\param string 'dn' a DN\n * */\nfunction get_base_from_people($dn)\n{\n  global $config;\n\n  $pattern= \"/^[^,]+,\".preg_quote(get_people_ou(), '/').\"/i\";\n  $base= preg_replace($pattern, '', $dn);\n\n  /* Set to base, if we're not on a correct subtree */\n  if (!isset($config->idepartments[$base])){\n    $base= $config->current['BASE'];\n  }\n\n  return ($base);\n}\n\n\n/*! \\brief Check if strict naming rules are configured\n *\n * Return TRUE or FALSE depending on weither strictNamingRules\n * are configured or not.\n *\n * \\return Returns TRUE if strictNamingRules is set to true or if the\n * config object is not available, otherwise FALSE.\n */\nfunction strict_uid_mode()\n{\n  global $config;\n\n  if (isset($config)){\n    return ($config->get_cfg_value(\"core\",\"strictNamingRules\") == \"true\");\n  }\n  return (TRUE);\n}\n\n\n/*! \\brief Get regular expression for checking uids based on the naming\n *         rules.\n *  \\return string Returns the desired regular expression\n */\nfunction get_uid_regexp()\n{\n  /* STRICT adds spaces and case insenstivity to the uid check.\n     This is dangerous and should not be used. */\n  if (strict_uid_mode()){\n    return \"^[a-z0-9_-]+$\";\n  } else {\n    return \"^[a-zA-Z0-9 _.-]+$\";\n  }\n}\n\n\n/*! \\brief Generate a lock message\n *\n * This message shows a warning to the user, that a certain object is locked\n * and presents some choices how the user can proceed. By default this\n * is 'Cancel' or 'Edit anyway', but depending on the function call\n * its possible to allow readonly access, too.\n *\n * Example usage:\n * \\code\n * if (($user = get_lock($this->dn)) != \"\") {\n *   return(gen_locked_message($user, $this->dn, TRUE));\n * }\n * \\endcode\n *\n * \\param string 'user' the user who holds the lock\n * \\param string 'dn' the locked DN\n * \\param boolean 'allow_readonly' TRUE if readonly access should be permitted,\n * FALSE if not (default).\n *\n *\n */\nfunction gen_locked_message($user, $dn, $allow_readonly = FALSE)\n{\n  global $plug, $config;\n\n  session::set('dn', $dn);\n  $remove= false;\n\n  /* Save variables from LOCK_VARS_TO_USE in session - for further editing */\n  if( session::is_set('LOCK_VARS_TO_USE') && count(session::get('LOCK_VARS_TO_USE'))){\n\n    $LOCK_VARS_USED_GET   = array();\n    $LOCK_VARS_USED_POST   = array();\n    $LOCK_VARS_USED_REQUEST   = array();\n    $LOCK_VARS_TO_USE = session::get('LOCK_VARS_TO_USE');\n\n    foreach($LOCK_VARS_TO_USE as $name){\n\n      if(empty($name)){\n        continue;\n      }\n\n      foreach($_POST as $Pname => $Pvalue){\n        if(preg_match($name,$Pname)){\n          $LOCK_VARS_USED_POST[$Pname] = $_POST[$Pname];\n        }\n      }\n\n      foreach($_GET as $Pname => $Pvalue){\n        if(preg_match($name,$Pname)){\n          $LOCK_VARS_USED_GET[$Pname] = $_GET[$Pname];\n        }\n      }\n\n      foreach($_REQUEST as $Pname => $Pvalue){\n        if(preg_match($name,$Pname)){\n          $LOCK_VARS_USED_REQUEST[$Pname] = $_REQUEST[$Pname];\n        }\n      }\n    }\n    session::set('LOCK_VARS_TO_USE',array());\n    session::set('LOCK_VARS_USED_GET'  , $LOCK_VARS_USED_GET);\n    session::set('LOCK_VARS_USED_POST'  , $LOCK_VARS_USED_POST);\n    session::set('LOCK_VARS_USED_REQUEST'  , $LOCK_VARS_USED_REQUEST);\n  }\n\n  /* Prepare and show template */\n  $smarty= get_smarty();\n  $smarty->assign(\"allow_readonly\",$allow_readonly);\n  $msg= msgPool::buildList($dn);\n\n  $smarty->assign (\"dn\", $msg);\n  if ($remove){\n    $smarty->assign (\"action\", _(\"Continue anyway\"));\n  } else {\n    $smarty->assign (\"action\", _(\"Edit anyway\"));\n  }\n\n  $smarty->assign (\"message\", _(\"These entries are currently locked:\"). $msg);\n\n  return ($smarty->fetch (get_template_path('islocked.tpl')));\n}\n\n\n/*! \\brief Return a string/HTML representation of an array\n *\n * This returns a string representation of a given value.\n * It can be used to dump arrays, where every value is printed\n * on its own line. The output is targetted at HTML output, it uses\n * '<br>' for line breaks. If the value is already a string its\n * returned unchanged.\n *\n * \\param mixed 'value' Whatever needs to be printed.\n * \\return string\n */\nfunction to_string ($value)\n{\n  /* If this is an array, generate a text blob */\n  if (is_array($value)){\n    $ret= \"\";\n    foreach ($value as $line){\n      $ret.= $line.\"<br>\\n\";\n    }\n    return ($ret);\n  } else {\n    return ($value);\n  }\n}\n\n\n/*! \\brief Return a list of all printers in the current base\n *\n * Returns an array with the CNs of all printers (objects with\n * objectClass gotoPrinter) in the current base.\n * ($config->current['BASE']).\n *\n * Example:\n * \\code\n * $this->printerList = get_printer_list();\n * \\endcode\n *\n * \\return array an array with the CNs of the printers as key and value. \n * */\nfunction get_printer_list()\n{\n  global $config;\n  $res = array();\n  $data = get_list('(objectClass=gotoPrinter)',\"printer\",$config->current['BASE'], array('cn'), GL_SUBSEARCH);\n  foreach($data as $attrs ){\n    $res[$attrs['cn'][0]] = $attrs['cn'][0];\n  }\n  return $res;\n}\n\n\n/*! \\brief Function to rewrite some problematic characters\n *\n * This function takes a string and replaces all possibly characters in it\n * with less problematic characters, as defined in $REWRITE.\n *\n * \\param string 's' the string to rewrite\n * \\return string 's' the result of the rewrite\n * */\nfunction rewrite($s)\n{\n  global $REWRITE;\n\n  foreach ($REWRITE as $key => $val){\n    $s= str_replace(\"$key\", \"$val\", $s);\n  }\n\n  return ($s);\n}\n\n\n/*! \\brief Return the base of a given DN\n *\n * \\param string 'dn' a DN\n * */\nfunction dn2base($dn)\n{\n  global $config;\n\n  if (get_people_ou() != \"\"){\n    $dn= preg_replace('/,'.get_people_ou().'/i' , ',', $dn);\n  }\n  if (get_groups_ou() != \"\"){\n    $dn= preg_replace('/,'.get_groups_ou().'/i' , ',', $dn);\n  }\n  $base= preg_replace ('/^[^,]+,/i', '', $dn);\n\n  return ($base);\n}\n\n\n/*! \\brief Check if a given command exists and is executable\n *\n * Test if a given cmdline contains an executable command. Strips\n * arguments from the given cmdline.\n *\n * \\param string 'cmdline' the cmdline to check\n * \\return TRUE if command exists and is executable, otherwise FALSE.\n * */\nfunction check_command($cmdline)\n{\n  return(TRUE);  \n  $cmd= preg_replace(\"/ .*$/\", \"\", $cmdline);\n\n  /* Check if command exists in filesystem */\n  if (!file_exists($cmd)){\n    return (FALSE);\n  }\n\n  /* Check if command is executable */\n  if (!is_executable($cmd)){\n    return (FALSE);\n  }\n\n  return (TRUE);\n}\n\n\n/*! \\brief Print plugin HTML header\n *\n * \\param string 'image' the path of the image to be used next to the headline\n * \\param string 'image' the headline\n * \\param string 'info' additional information to print\n */\nfunction print_header($image, $headline, $info= \"\")\n{\n  $display= \"<div class=\\\"plugtop\\\">\\n\";\n  $display.= \"  <p class=\\\"center\\\" style=\\\"margin:0px 0px 0px 5px;padding:0px;font-size:24px;\\\"><img class=\\\"center\\\" src=\\\"$image\\\" align=\\\"middle\\\" alt=\\\"*\\\">&nbsp;$headline</p>\\n\";\n  $display.= \"</div>\\n\";\n\n  if ($info != \"\"){\n    $display.= \"<div class=\\\"pluginfo\\\">\\n\";\n    $display.= \"$info\";\n    $display.= \"</div>\\n\";\n  } else {\n    $display.= \"<div style=\\\"height:5px;\\\">\\n\";\n    $display.= \"&nbsp;\";\n    $display.= \"</div>\\n\";\n  }\n  return ($display);\n}\n\n\n/*! \\brief Print page number selector for paged lists\n *\n * \\param int 'dcnt' Number of entries\n * \\param int 'start' Page to start\n * \\param int 'range' Number of entries per page\n * \\param string 'post_var' POST variable to check for range\n */\nfunction range_selector($dcnt,$start,$range=25,$post_var=false)\n{\n\n  /* Entries shown left and right from the selected entry */\n  $max_entries= 10;\n\n  /* Initialize and take care that max_entries is even */\n  $output=\"\";\n  if ($max_entries & 1){\n    $max_entries++;\n  }\n\n  if((!empty($post_var))&&(isset($_POST[$post_var]))){\n    $range= $_POST[$post_var];\n  }\n\n  /* Prevent output to start or end out of range */\n  if ($start < 0 ){\n    $start= 0 ;\n  }\n  if ($start >= $dcnt){\n    $start= $range * (int)(($dcnt / $range) + 0.5);\n  }\n\n  $numpages= (($dcnt / $range));\n  if(((int)($numpages))!=($numpages)){\n    $numpages = (int)$numpages + 1;\n  }\n  if ((((int)$numpages) <= 1 )&&(!$post_var)){\n    return (\"\");\n  }\n  $ppage= (int)(($start / $range) + 0.5);\n\n\n  /* Align selected page to +/- max_entries/2 */\n  $begin= $ppage - $max_entries/2;\n  $end= $ppage + $max_entries/2;\n\n  /* Adjust begin/end, so that the selected value is somewhere in\n     the middle and the size is max_entries if possible */\n  if ($begin < 0){\n    $end-= $begin + 1;\n    $begin= 0;\n  }\n  if ($end > $numpages) {\n    $end= $numpages;\n  }\n  if (($end - $begin) < $max_entries && ($end - $max_entries) > 0){\n    $begin= $end - $max_entries;\n  }\n\n  if($post_var){\n    $output.= \"<div style='border:1px solid #E0E0E0; background-color:#FFFFFF;'>\n      <table summary='' width='100%'><tr><td style='width:25%'></td><td style='text-align:center;'>\";\n  }else{\n    $output.= \"<div style='border:1px solid #E0E0E0; background-color:#FFFFFF;'>\";\n  }\n\n  /* Draw decrement */\n  if ($start > 0 ) {\n    $output.=\"  <a href= \\\"main.php?plug=\".validate($_GET['plug']).\"&amp;start=\".\n      (($start-$range)).\"\\\">\".\n      \"<img class=\\\"center\\\" alt=\\\"\\\" src=\\\"images/back.png\\\" border=0 align=\\\"middle\\\"></a>\";\n  }\n\n  /* Draw pages */\n  for ($i= $begin; $i < $end; $i++) {\n    if ($ppage == $i){\n      $output.= \"<a style=\\\"vertical-align:middle;background-color:#D0D0D0;\\\" href=\\\"main.php?plug=\".\n        validate($_GET['plug']).\"&amp;start=\".\n        ($i*$range).\"\\\">&nbsp;\".($i+1).\"&nbsp;</a>\";\n    } else {\n      $output.= \"<a style=\\\"vertical-align:middle;\\\" href=\\\"main.php?plug=\".validate($_GET['plug']).\n        \"&amp;start=\".($i*$range).\"\\\">&nbsp;\".($i+1).\"&nbsp;</a>\";\n    }\n  }\n\n  /* Draw increment */\n  if($start < ($dcnt-$range)) {\n    $output.=\"  <a href= \\\"main.php?plug=\".validate($_GET['plug']).\"&amp;start=\".\n      (($start+($range))).\"\\\">\".\n      \"<img class=\\\"center\\\" alt=\\\"\\\" src=\\\"images/forward.png\\\" border=\\\"0\\\" align=\\\"middle\\\"></a>\";\n  }\n\n  if(($post_var)&&($numpages)){\n    $output.= \"</td><td style='width:25%;text-align:right;vertical-align:middle;'>&nbsp;\"._(\"Entries per page\").\"&nbsp;<select style='vertical-align:middle;' name='\".$post_var.\"' onChange='javascript:document.mainform.submit()'>\";\n    foreach(array(20,50,100,200,\"all\") as $num){\n      if($num == \"all\"){\n        $var = 10000;\n      }else{\n        $var = $num;\n      }\n      if($var == $range){\n        $output.=\"\\n<option selected='selected' value='\".$var.\"'>\".$num.\"</option>\";\n      }else{  \n        $output.=\"\\n<option value='\".$var.\"'>\".$num.\"</option>\";\n      }\n    }\n    $output.=  \"</select></td></tr></table></div>\";\n  }else{\n    $output.= \"</div>\";\n  }\n\n  return($output);\n}\n\n\n\n/*! \\brief Generate HTML for the 'Back' button */\nfunction back_to_main()\n{\n  $string= '<br><p class=\"plugbottom\"><input type=submit name=\"password_back\" value=\"'.\n    msgPool::backButton().'\"></p><input type=\"hidden\" name=\"ignore\">';\n\n  return ($string);\n}\n\n\n/*! \\brief Put netmask in n.n.n.n format\n *  \\param string 'netmask' The netmask\n *  \\return string Converted netmask\n */\nfunction normalize_netmask($netmask)\n{\n  /* Check for notation of netmask */\n  if (!preg_match('/^([0-9]+\\.){3}[0-9]+$/', $netmask)){\n    $num= (int)($netmask);\n    $netmask= \"\";\n\n    for ($byte= 0; $byte<4; $byte++){\n      $result=0;\n\n      for ($i= 7; $i>=0; $i--){\n        if ($num-- > 0){\n          $result+= pow(2,$i);\n        }\n      }\n\n      $netmask.= $result.\".\";\n    }\n\n    return (preg_replace('/\\.$/', '', $netmask));\n  }\n\n  return ($netmask);\n}\n\n\n/*! \\brief Return the number of set bits in the netmask\n *\n * For a given subnetmask (for example 255.255.255.0) this returns\n * the number of set bits.\n *\n * Example:\n * \\code\n * $bits = netmask_to_bits('255.255.255.0') # Returns 24\n * $bits = netmask_to_bits('255.255.254.0') # Returns 23\n * \\endcode\n *\n * Be aware of the fact that the function does not check\n * if the given subnet mask is actually valid. For example:\n * Bad examples:\n * \\code\n * $bits = netmask_to_bits('255.0.0.255') # Returns 16\n * $bits = netmask_to_bits('255.255.0.255') # Returns 24\n * \\endcode\n */\nfunction netmask_to_bits($netmask)\n{\n  list($nm0, $nm1, $nm2, $nm3)= explode('.', $netmask);\n  $res= 0;\n\n  for ($n= 0; $n<4; $n++){\n    $start= 255;\n    $name= \"nm$n\";\n\n    for ($i= 0; $i<8; $i++){\n      if ($start == (int)($$name)){\n        $res+= 8 - $i;\n        break;\n      }\n      $start-= pow(2,$i);\n    }\n  }\n\n  return ($res);\n}\n\n\n/*! \\brief Convert various data sizes to bytes\n *\n * Given a certain value in the format n(g|m|k), where n\n * is a value and (g|m|k) stands for Gigabyte, Megabyte and Kilobyte\n * this function returns the byte value.\n *\n * \\param string 'value' a value in the above specified format\n * \\return a byte value or the original value if specified string is simply\n * a numeric value\n *\n */\nfunction to_byte($value) {\n  $value= strtolower(trim($value));\n\n  if(!is_numeric(substr($value, -1))) {\n\n    switch(substr($value, -1)) {\n      case 'g':\n        $mult= 1073741824;\n        break;\n      case 'm':\n        $mult= 1048576;\n        break;\n      case 'k':\n        $mult= 1024;\n        break;\n    }\n\n    return ($mult * (int)substr($value, 0, -1));\n  } else {\n    return $value;\n  }\n}\n\n\n/*! \\brief Check if a value exists in an array (case-insensitive)\n * \n * This is just as http://php.net/in_array except that the comparison\n * is case-insensitive.\n *\n * \\param string 'value' needle\n * \\param array 'items' haystack\n */ \nfunction in_array_ics($value, $items)\n{\n\treturn preg_grep('/^'.preg_quote($value, '/').'$/i', $items);\n}\n\n\n/*! \\brief Removes malicious characters from a (POST) string. */\nfunction validate($string)\n{\n  return (strip_tags(str_replace('\\0', '', $string)));\n}\n\n\n/*! \\brief Evaluate the current GOsa version from the build in revision string */\nfunction get_gosa_version()\n{\n    global $svn_revision, $svn_path;\n\n    /* Extract informations */\n    $revision= preg_replace('/^[^0-9]*([0-9]+)[^0-9]*$/', '\\1', $svn_revision);\n\n    // Extract the relevant part out of the svn url\n    $release= preg_replace('%^.*/gosa/(.*)/include/functions.inc.*$%', '\\1', $svn_path);\n\n    // Remove stuff which is not interesting\n    if(preg_match(\"/gosa-core/i\", $release)) $release = preg_replace(\"/[\\/]gosa-core/i\",\"\",$release);\n\n    // A Tagged Version\n    if(preg_match(\"#/tags/#i\", $svn_path)){\n        $release = preg_replace(\"/tags[\\/]*/i\",\"\",$release);\n        $release = preg_replace(\"/\\//\",\"\",$release) ;\n        return (sprintf(_(\"GOsa %s\"),$release));\n    }\n\n    // A Branched Version\n    if(preg_match(\"#/branches/#i\", $svn_path)){\n        $release = preg_replace(\"/branches[\\/]*/i\",\"\",$release);\n        $release = preg_replace(\"/\\//\",\"\",$release) ;\n        return (sprintf(_(\"GOsa %s snapshot (Rev %s)\"),$release , bold($revision)));\n    }\n\n    // The trunk version\n    if(preg_match(\"#/trunk/#i\", $svn_path)){\n        return (sprintf(_(\"GOsa development snapshot (Rev %s)\"), bold($revision)));\n    }\n\n    return (sprintf(_(\"GOsa $release\"), $revision));\n}\n\n\n/*! \\brief Recursively delete a path in the file system\n *\n * Will delete the given path and all its files recursively.\n * Can also follow links if told so.\n *\n * \\param string 'path'\n * \\param boolean 'followLinks' TRUE to follow links, FALSE (default)\n * for not following links\n */\nfunction rmdirRecursive($path, $followLinks=false) {\n  $dir= opendir($path);\n  while($entry= readdir($dir)) {\n    if(is_file($path.\"/\".$entry) || ((!$followLinks) && is_link($path.\"/\".$entry))) {\n      unlink($path.\"/\".$entry);\n    } elseif (is_dir($path.\"/\".$entry) && $entry!='.' && $entry!='..') {\n      rmdirRecursive($path.\"/\".$entry);\n    }\n  }\n  closedir($dir);\n  return rmdir($path);\n}\n\n\n/*! \\brief Get directory content information\n *\n * Returns the content of a directory as an array in an\n * ascended sorted manner.\n *\n * \\param string 'path'\n * \\param boolean weither to sort the content descending.\n */\nfunction scan_directory($path,$sort_desc=false)\n{\n  $ret = false;\n\n  /* is this a dir ? */\n  if(is_dir($path)) {\n\n    /* is this path a readable one */\n    if(is_readable($path)){\n\n      /* Get contents and write it into an array */   \n      $ret = array();    \n\n      $dir = opendir($path);\n\n      /* Is this a correct result ?*/\n      if($dir){\n        while($fp = readdir($dir))\n          $ret[]= $fp;\n      }\n    }\n  }\n  /* Sort array ascending , like scandir */\n  sort($ret);\n\n  /* Sort descending if parameter is sort_desc is set */\n  if($sort_desc) {\n    $ret = array_reverse($ret);\n  }\n\n  return($ret);\n}\n\n\n/*! \\brief Clean the smarty compile dir */\nfunction clean_smarty_compile_dir($directory)\n{\n  global $svn_revision;\n\n  if(is_dir($directory) && is_readable($directory)) {\n    // Set revision filename to REVISION\n    $revision_file= $directory.\"/REVISION\";\n\n    /* Is there a stamp containing the current revision? */\n    if(!file_exists($revision_file)) {\n      // create revision file\n      create_revision($revision_file, $svn_revision);\n    } else {\n      # check for \"$config->...['CONFIG']/revision\" and the\n      # contents should match the revision number\n      if(!compare_revision($revision_file, $svn_revision)){\n        // If revision differs, clean compile directory\n        foreach(scan_directory($directory) as $file) {\n          if(($file==\".\")||($file==\"..\")) continue;\n          if( is_file($directory.\"/\".$file) &&\n              is_writable($directory.\"/\".$file)) {\n            // delete file\n            if(!unlink($directory.\"/\".$file)) {\n              msg_dialog::display(_(\"Internal error\"), sprintf(_(\"File %s cannot be deleted!\"), bold($directory.\"/\".$file)), ERROR_DIALOG);\n              // This should never be reached\n            }\n          } \n        }\n        // We should now create a fresh revision file\n        clean_smarty_compile_dir($directory);\n      } else {\n        // Revision matches, nothing to do\n      }\n    }\n  } else {\n    // Smarty compile dir is not accessible\n    // (Smarty will warn about this)\n  }\n}\n\n\nfunction create_revision($revision_file, $revision)\n{\n  $result= false;\n\n  if(is_dir(dirname($revision_file)) && is_writable(dirname($revision_file))) {\n    if($fh= fopen($revision_file, \"w\")) {\n      if(fwrite($fh, $revision)) {\n        $result= true;\n      }\n    }\n    fclose($fh);\n  } else {\n    msg_dialog::display(_(\"Internal error\"), _(\"Cannot write revision file!\"), ERROR_DIALOG);\n  }\n\n  return $result;\n}\n\n\nfunction compare_revision($revision_file, $revision)\n{\n  // false means revision differs\n  $result= false;\n\n  if(file_exists($revision_file) && is_readable($revision_file)) {\n    // Open file\n    if($fh= fopen($revision_file, \"r\")) {\n      // Compare File contents with current revision\n      if($revision == fread($fh, filesize($revision_file))) {\n        $result= true;\n      }\n    } else {\n      msg_dialog::display(_(\"Internal error\"), _(\"Cannot write revision file!\"), ERROR_DIALOG);\n    }\n    // Close file\n    fclose($fh);\n  }\n\n  return $result;\n}\n\n\n/*! \\brief Return HTML for a progressbar\n *\n * \\code\n * $smarty->assign(\"installprogress\", progressbar($current_progress_in_percent),100,15,true); \n * \\endcode\n *\n * \\param int 'percentage' Value to display\n * \\param int 'width' width of the resulting output\n * \\param int 'height' height of the resulting output\n * \\param boolean 'showtext' weither to show the percentage in the progressbar or not\n * */\nfunction progressbar($percentage, $width= 200, $height= 14, $showText= false, $colorize= true, $id= \"\")\n{\n  $text= \"\";\n  $class= \"\";\n  $style= \"width:${width}px;height:${height}px;\";\n\n  // Fix percentage range\n  $percentage= floor($percentage);\n  if ($percentage > 100) {\n    $percentage= 100;\n  }\n  if ($percentage < 0) {\n    $percentage= 0;\n  }\n\n  // Only show text if we're above 10px height\n  if ($showText && $height>10){\n    $text= $percentage.\"%\";\n  }\n\n  // Set font size\n  $style.= \"font-size:\".($height-3).\"px;\";\n\n  // Set color\n  if ($colorize){\n    if ($percentage < 70) {\n      $class= \" progress-low\";\n    } elseif ($percentage < 80) {\n      $class= \" progress-mid\";\n    } elseif ($percentage < 90) {\n      $class= \" progress-high\";\n    } else {\n      $class= \" progress-full\";\n    }\n  }\n  \n  // Apply gradients\n  $hoffset= floor($height / 2) + 4;\n  $woffset= floor(($width+5) * (100-$percentage) / 100);\n  foreach (array(\"-moz-box-shadow\", \"-webkit-box-shadow\", \"box-shadow\") as $type) {\n    $style.=\"$type:\n                   0 0 2px rgba(255, 255, 255, 0.4) inset,\n                   0 4px 6px rgba(255, 255, 255, 0.4) inset,\n                   0 \".$hoffset.\"px 0 -2px rgba(255, 255, 255, 0.2) inset,\n                   -\".$woffset.\"px 0 0 -2px rgba(255, 255, 255, 0.2) inset,\n                   -\".($woffset+1).\"px 0 0 -2px rgba(0, 0, 0, 0.6) inset,\n                   0pt \".($hoffset+1).\"px 8px rgba(0, 0, 0, 0.3) inset,\n                   0pt 1px 0px rgba(0, 0, 0, 0.2);\";\n  }\n\n  // Set ID\n  if ($id != \"\"){\n    $id= \"id='$id'\";\n  }\n\n  return \"<div class='progress$class' $id style='$style'>$text</div>\";\n}\n\n\n/*! \\brief Lookup a key in an array case-insensitive\n *\n * Given an associative array this can lookup the value of\n * a certain key, regardless of the case.\n *\n * \\code\n * $items = array ('FOO' => 'blub', 'bar' => 'blub');\n * array_key_ics('foo', $items); # Returns 'blub'\n * array_key_ics('BAR', $items); # Returns 'blub'\n * \\endcode\n *\n * \\param string 'key' needle\n * \\param array 'items' haystack\n */\nfunction array_key_ics($ikey, $items)\n{\n  $tmp= array_change_key_case($items, CASE_LOWER);\n  $ikey= strtolower($ikey);\n  if (isset($tmp[$ikey])){\n    return($tmp[$ikey]);\n  }\n\n  return ('');\n}\n\n\n/*! \\brief Determine if two arrays are different\n *\n * \\param array 'src'\n * \\param array 'dst'\n * \\return boolean TRUE or FALSE\n * */\nfunction array_differs($src, $dst)\n{\n  /* If the count is differing, the arrays differ */\n  if (count ($src) != count ($dst)){\n    return (TRUE);\n  }\n\n  return (count(array_diff($src, $dst)) != 0);\n}\n\n\nfunction saveFilter($a_filter, $values)\n{\n  if (isset($_POST['regexit'])){\n    $a_filter[\"regex\"]= $_POST['regexit'];\n\n    foreach($values as $type){\n      if (isset($_POST[$type])) {\n        $a_filter[$type]= \"checked\";\n      } else {\n        $a_filter[$type]= \"\";\n      }\n    }\n  }\n\n  /* React on alphabet links if needed */\n  if (isset($_GET['search'])){\n    $s= mb_substr(validate($_GET['search']), 0, 1, \"UTF8\").\"*\";\n    if ($s == \"**\"){\n      $s= \"*\";\n    }\n    $a_filter['regex']= $s;\n  }\n\n  return ($a_filter);\n}\n\n\n/*! \\brief Escape all LDAP filter relevant characters */\nfunction normalizeLdap($input)\n{\n  return (addcslashes($input, '()|'));\n}\n\n\n/*! \\brief Return the gosa base directory */\nfunction get_base_dir()\n{\n  global $BASE_DIR;\n\n  return $BASE_DIR;\n}\n\n\n/*! \\brief Test weither we are allowed to read the object */\nfunction obj_is_readable($dn, $object, $attribute)\n{\n  global $ui;\n\n  return preg_match('/r/', $ui->get_permissions($dn, $object, $attribute));\n}\n\n\n/*! \\brief Test weither we are allowed to change the object */\nfunction obj_is_writable($dn, $object, $attribute)\n{\n  global $ui;\n\n  return preg_match('/w/', $ui->get_permissions($dn, $object, $attribute));\n}\n\n\n/*! \\brief Explode a DN into its parts\n *\n * Similar to explode (http://php.net/explode), but a bit more specific\n * for the needs when splitting, exploding LDAP DNs.\n *\n * \\param string 'dn' the DN to split\n * \\param config-object a config object. only neeeded if DN shall be verified in the LDAP\n * \\param boolean verify_in_ldap check weither DN is valid\n *\n */\nfunction gosa_ldap_explode_dn($dn,$config = NULL,$verify_in_ldap=false)\n{\n  /* Initialize variables */\n  $ret  = array(\"count\" => 0);  // Set count to 0\n  $next = true;                 // if false, then skip next loops and return\n  $cnt  = 0;                    // Current number of loops\n  $max  = 100;                  // Just for security, prevent looops\n  $ldap = NULL;                 // To check if created result a valid\n  $keep = \"\";                   // save last failed parse string\n\n  /* Check each parsed dn in ldap ? */\n  if($config!==NULL && $verify_in_ldap){\n    $ldap = $config->get_ldap_link();\n  }\n\n  /* Lets start */\n  $called = false;\n  while(preg_match(\"/,/\",$dn) && $next &&  $cnt < $max){\n\n    $cnt ++;\n    if(!preg_match(\"/,/\",$dn)){\n      $next = false;\n    }\n    $object = preg_replace(\"/[,].*$/\",\"\",$dn);\n    $dn     = preg_replace(\"/^[^,]+,/\",\"\",$dn);\n\n    $called = true;\n\n    /* Check if current dn is valid */\n    if($ldap!==NULL){\n      $ldap->cd($dn);\n      $ldap->cat($dn,array(\"dn\"));\n      if($ldap->count()){\n        $ret[]  = $keep.$object;\n        $keep   = \"\";\n      }else{\n        $keep  .= $object.\",\";\n      }\n    }else{\n      $ret[]  = $keep.$object;\n      $keep   = \"\";\n    }\n  }\n\n  /* No dn was posted */\n  if($cnt == 0 && !empty($dn)){\n    $ret[] = $dn;\n  }\n\n  /* Append the rest */\n  $test = $keep.$dn;\n  if($called && !empty($test)){\n    $ret[] = $keep.$dn;\n  }\n  $ret['count'] = count($ret) - 1;\n\n  return($ret);\n}\n\n\nfunction get_base_from_hook($dn, $attrib)\n{\n  global $config;\n\n  if ($config->get_cfg_value(\"core\",\"baseIdHook\") != \"\"){\n    \n    /* Call hook script - if present */\n    $command= $config->get_cfg_value(\"core\",\"baseIdHook\");\n\n    if ($command != \"\"){\n      $command.= \" '\".LDAP::fix($dn).\"' $attrib\";\n      if (check_command($command)){\n        @DEBUG (DEBUG_SHELL, __LINE__, __FUNCTION__, __FILE__, $command, \"Execute\");\n        exec($command, $output);\n        if (preg_match(\"/^[0-9]+$/\", $output[0])){\n          return ($output[0]);\n        } else {\n          msg_dialog::display(_(\"Warning\"), _(\"'baseIdHook' is not available. Using default base!\"), WARNING_DIALOG);\n          return ($config->get_cfg_value(\"core\",\"uidNumberBase\"));\n        }\n      } else {\n        msg_dialog::display(_(\"Warning\"), _(\"'baseIdHook' is not available. Using default base!\"), WARNING_DIALOG);\n        return ($config->get_cfg_value(\"core\",\"uidNumberBase\"));\n      }\n\n    } else {\n\n      msg_dialog::display(_(\"Warning\"), _(\"'baseIdHook' is not available. Using default base!\"), WARNING_DIALOG);\n      return ($config->get_cfg_value(\"core\",\"uidNumberBase\"));\n\n    }\n  }\n}\n\n\n/*! \\brief Check if schema version matches the requirements */\nfunction check_schema_version($class, $version)\n{\n  return preg_match(\"/\\(v$version\\)/\", $class['DESC']);\n}\n\n\n/*! \\brief Check if LDAP schema matches the requirements */\nfunction check_schema($cfg,$rfc2307bis = FALSE)\n{\n  $messages= array();\n\n  /* Get objectclasses */\n  $ldap = new ldapMultiplexer(new LDAP($cfg['admin'],$cfg['password'],$cfg['connection'] ,FALSE, $cfg['tls']));\n  $objectclasses = $ldap->get_objectclasses();\n  if(count($objectclasses) == 0){\n    msg_dialog::display(_(\"Warning\"), _(\"Cannot read schema information from LDAP. Schema validation is not possible!\"), WARNING_DIALOG);\n  }\n\n  /* This is the default block used for each entry.\n   *  to avoid unset indexes.\n   */\n  $def_check = array(\"REQUIRED_VERSION\" => \"0\",\n      \"SCHEMA_FILES\"     => array(),\n      \"CLASSES_REQUIRED\" => array(),\n      \"STATUS\"           => FALSE,\n      \"IS_MUST_HAVE\"     => FALSE,\n      \"MSG\"              => \"\",\n      \"INFO\"             => \"\");\n\n  /* The gosa base schema */\n  $checks['gosaObject'] = $def_check;\n  $checks['gosaObject']['REQUIRED_VERSION'] = \"2.6.1\";\n  $checks['gosaObject']['SCHEMA_FILES']     = array(\"gosa-samba3.schema\");\n  $checks['gosaObject']['CLASSES_REQUIRED'] = array(\"gosaObject\");\n  $checks['gosaObject']['IS_MUST_HAVE']     = TRUE;\n\n  /* GOsa Account class */\n  $checks[\"gosaAccount\"][\"REQUIRED_VERSION\"]= \"2.6.6\";\n  $checks[\"gosaAccount\"][\"SCHEMA_FILES\"]    = array(\"gosa-samba3.schema\");\n  $checks[\"gosaAccount\"][\"CLASSES_REQUIRED\"]= array(\"gosaAccount\");\n  $checks[\"gosaAccount\"][\"IS_MUST_HAVE\"]    = TRUE;\n  $checks[\"gosaAccount\"][\"INFO\"]            = _(\"This class is used to make users appear in GOsa.\");\n\n  /* GOsa lock entry, used to mark currently edited objects as 'in use' */\n  $checks[\"gosaLockEntry\"][\"REQUIRED_VERSION\"] = \"2.6.1\";\n  $checks[\"gosaLockEntry\"][\"SCHEMA_FILES\"]     = array(\"gosa-samba3.schema\");\n  $checks[\"gosaLockEntry\"][\"CLASSES_REQUIRED\"] = array(\"gosaLockEntry\");\n  $checks[\"gosaLockEntry\"][\"IS_MUST_HAVE\"]     = TRUE;\n  $checks[\"gosaLockEntry\"][\"INFO\"]             = _(\"This class is used to lock entries in order to prevent multiple edits at a time.\");\n\n  /* Some other checks */\n  foreach(array(\n        \"gosaCacheEntry\"        => array(\"version\" => \"2.6.1\", \"class\" => \"gosaAccount\"),\n        \"gosaDepartment\"        => array(\"version\" => \"2.6.1\", \"class\" => \"gosaAccount\"),\n        \"goFaxAccount\"          => array(\"version\" => \"1.0.4\", \"class\" => \"gofaxAccount\",\"file\" => \"gofax.schema\"),\n        \"goFaxSBlock\"           => array(\"version\" => \"1.0.4\", \"class\" => \"gofaxAccount\",\"file\" => \"gofax.schema\"),\n        \"goFaxRBlock\"           => array(\"version\" => \"1.0.4\", \"class\" => \"gofaxAccount\",\"file\" => \"gofax.schema\"),\n        \"gosaUserTemplate\"      => array(\"version\" => \"2.6.1\", \"class\" => \"posixAccount\",\"file\" => \"nis.schema\"),\n        \"gosaMailAccount\"       => array(\"version\" => \"2.6.1\", \"class\" => \"mailAccount\",\"file\" => \"gosa-samba3.schema\"),\n        \"gosaProxyAccount\"      => array(\"version\" => \"2.6.1\", \"class\" => \"proxyAccount\",\"file\" => \"gosa-samba3.schema\"),\n        \"gosaApplication\"       => array(\"version\" => \"2.6.1\", \"class\" => \"appgroup\",\"file\" => \"gosa.schema\"),\n        \"gosaApplicationGroup\"  => array(\"version\" => \"2.6.1\", \"class\" => \"appgroup\",\"file\" => \"gosa.schema\"),\n        \"GOhard\"                => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"gotoTerminal\"          => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goServer\"              => array(\"version\" => \"2.6.1\", \"class\" => \"server\",\"file\" => \"goserver.schema\"),\n        \"goTerminalServer\"      => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goShareServer\"         => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goNtpServer\"           => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goSyslogServer\"        => array(\"version\" => \"2.6.1\", \"class\" => \"terminals\",\"file\" => \"goto.schema\"),\n        \"goLdapServer\"          => array(\"version\" => \"2.6.1\", \"class\" => \"goServer\"),\n        \"goCupsServer\"          => array(\"version\" => \"2.6.1\", \"class\" => array(\"posixAccount\", \"terminals\"),),\n        \"goImapServer\"          => array(\"version\" => \"2.6.1\", \"class\" => array(\"mailAccount\", \"mailgroup\"),\"file\" => \"gosa-samba3.schema\"),\n        \"goKrbServer\"           => array(\"version\" => \"2.6.1\", \"class\" => \"goServer\"),\n        \"goFaxServer\"           => array(\"version\" => \"2.6.1\", \"class\" => \"gofaxAccount\",\"file\" => \"gofax.schema\"),\n        ) as $name => $values){\n\n          $checks[$name] = $def_check;\n          if(isset($values['version'])){\n            $checks[$name][\"REQUIRED_VERSION\"] = $values['version'];\n          }\n          if(isset($values['file'])){\n            $checks[$name][\"SCHEMA_FILES\"] = array($values['file']);\n          }\n          if (isset($values['class'])) {\n            $checks[$name][\"CLASSES_REQUIRED\"] = is_array($values['class'])?$values['class']:array($values['class']);\n          }\n        }\n  foreach($checks as $name => $value){\n    foreach($value['CLASSES_REQUIRED'] as $class){\n\n      if(!isset($objectclasses[$name])){\n        if($value['IS_MUST_HAVE']){\n          $checks[$name]['STATUS'] = FALSE;\n          $checks[$name]['MSG']    = sprintf(_(\"Required object class %s is missing!\"), bold($class));\n        } else {\n          $checks[$name]['STATUS'] = TRUE;\n          $checks[$name]['MSG']    = sprintf(_(\"Optional object class %s is missing!\"), bold($class));\n        }\n      }elseif(!check_schema_version($objectclasses[$name],$value['REQUIRED_VERSION'])){\n        $checks[$name]['STATUS'] = FALSE;\n\n        $checks[$name]['MSG'] = sprintf(_(\"Wrong version of required object class %s (!=%s) detected!\"), bold($class), bold($value['REQUIRED_VERSION']));\n      }else{\n        $checks[$name]['STATUS'] = TRUE;\n        $checks[$name]['MSG'] = sprintf(_(\"Class available\"));\n      }\n    }\n  }\n\n  $tmp = $objectclasses;\n\n  /* The gosa base schema */\n  $checks['posixGroup'] = $def_check;\n  $checks['posixGroup']['REQUIRED_VERSION'] = \"2.6.1\";\n  $checks['posixGroup']['SCHEMA_FILES']     = array(\"gosa-samba3.schema\",\"gosa-samba2.schema\");\n  $checks['posixGroup']['CLASSES_REQUIRED'] = array(\"posixGroup\");\n  $checks['posixGroup']['STATUS']           = TRUE;\n  $checks['posixGroup']['IS_MUST_HAVE']     = TRUE;\n  $checks['posixGroup']['MSG']              = \"\";\n  $checks['posixGroup']['INFO']             = \"\";\n\n  /* Depending on selected rfc2307bis mode, we need different schema configurations */\n  if(isset($tmp['posixGroup'])){\n\n    if($rfc2307bis && isset($tmp['posixGroup']['STRUCTURAL'])){\n      $checks['posixGroup']['STATUS']           = FALSE;\n      $checks['posixGroup']['MSG']              = _(\"RFC2307bis schema is enabled, but the current LDAP configuration does not support it!\");\n      $checks['posixGroup']['INFO']             = _(\"To use RFC2307bis groups, the objectClass 'posixGroup' must be AUXILIARY.\");\n    }\n    if(!$rfc2307bis && !isset($tmp['posixGroup']['STRUCTURAL'])){\n      $checks['posixGroup']['STATUS']           = FALSE;\n      $checks['posixGroup']['MSG']              = _(\"RFC2307bis schema is disabled, but the current LDAP configuration supports it!\");\n      $checks['posixGroup']['INFO']             = _(\"To correct this, the objectClass 'posixGroup' must be STRUCTURAL.\");\n    }\n  }\n\n  return($checks);\n}\n\n\nfunction get_languages($languages_in_own_language = FALSE,$strip_region_tag = FALSE)\n{\n  $tmp = array(\n        \"de_DE\" => \"German\",\n        \"fr_FR\" => \"French\",\n        \"it_IT\" => \"Italian\",\n        \"es_ES\" => \"Spanish\",\n        \"en_US\" => \"English\",\n        \"nl_NL\" => \"Dutch\",\n        \"pl_PL\" => \"Polish\",\n        \"pt_BR\" => \"Brazilian Portuguese\",\n        #\"sv_SE\" => \"Swedish\",\n        \"zh_CN\" => \"Chinese\",\n        \"vi_VN\" => \"Vietnamese\",\n        \"ru_RU\" => \"Russian\");\n  \n  $tmp2= array(\n        \"de_DE\" => _(\"German\"),\n        \"fr_FR\" => _(\"French\"),\n        \"it_IT\" => _(\"Italian\"),\n        \"es_ES\" => _(\"Spanish\"),\n        \"en_US\" => _(\"English\"),\n        \"nl_NL\" => _(\"Dutch\"),\n        \"pl_PL\" => _(\"Polish\"),\n        \"pt_BR\" => _(\"Brazilian Portuguese\"),\n        #\"sv_SE\" => _(\"Swedish\"),\n        \"zh_CN\" => _(\"Chinese\"),\n        \"vi_VN\" => _(\"Vietnamese\"),\n        \"ru_RU\" => _(\"Russian\"));\n\n  $ret = array();\n  if($languages_in_own_language){\n\n    $old_lang = setlocale(LC_ALL, 0);\n\n    /* If the locale wasn't correclty set before, there may be an incorrect\n        locale returned. Something like this: \n          C_CTYPE=de_DE.UTF-8;LC_NUMERIC=C;LC_TIME=de_DE.UTF-8;LC ...\n        Extract the locale name from this string and use it to restore old locale.\n     */\n    if(preg_match(\"/LC_CTYPE/\",$old_lang)){\n      $old_lang = preg_replace(\"/^.*LC_CTYPE=([^;]*).*$/\",\"\\\\1\",$old_lang);\n    }\n    \n    foreach($tmp as $key => $name){\n      $lang = $key.\".UTF-8\";\n      setlocale(LC_ALL, $lang);\n      if($strip_region_tag){\n        $ret[preg_replace(\"/^([^_]*).*$/\",\"\\\\1\",$key)] = _($name).\" (\".$tmp2[$key].\")\";\n      }else{\n        $ret[$key] = _($name).\" &nbsp;(\".$tmp2[$key].\")\";\n      }\n    }\n    setlocale(LC_ALL, $old_lang);\n  }else{\n    foreach($tmp as $key => $name){\n      if($strip_region_tag){\n        $ret[preg_replace(\"/^([^_]*).*/\",\"\\\\1\",$key)] = _($name);\n      }else{\n        $ret[$key] = _($name);\n      }\n    }\n  }\n  return($ret);\n}\n\n\n/*! \\brief Returns contents of the given POST variable and check magic quotes settings\n *\n * Depending on the magic quotes settings this returns a stripclashed'ed version of\n * a certain POST variable.\n *\n * \\param string 'name' the POST var to return ($_POST[$name])\n * \\return string\n * */\nfunction get_post($name)\n{\n    if(!isset($_POST[$name])){\n        trigger_error(\"Requested POST value (\".$name.\") does not exist, you should add a check to prevent this message.\");\n        return(FALSE);\n    }\n\n    // Handle Posted Arrays\n    $tmp = array();\n    if(is_array($_POST[$name]) && !is_string($_POST[$name])){\n        if(version_compare(PHP_VERSION, '5.4.0', '<') && get_magic_quotes_gpc()){\n          array_walk_recursive($_POST, \"stripcslashes\");\n        }\n        $tmp = $_POST;\n        return($tmp[$name]);\n    }else{\n\n        if(version_compare(PHP_VERSION, '5.4.0', '<') && get_magic_quotes_gpc()){\n            $val = stripcslashes($_POST[$name]);\n        }else{\n            $val = $_POST[$name];\n        }\n    }\n  return($val);\n}\n\n\n/*! \\brief Returns contents of the given POST variable and check magic quotes settings\n *\n * Depending on the magic quotes settings this returns a stripclashed'ed version of\n * a certain POST variable.\n *\n * \\param string 'name' the POST var to return ($_POST[$name])\n * \\return string\n * */\nfunction get_binary_post($name)\n{\n  if(!isset($_POST[$name])){\n    trigger_error(\"Requested POST value (\".$name.\") does not exists, you should add a check to prevent this message.\");\n    return(FALSE);\n  }\n\n  $p = str_replace('\\0', '', $_POST[$name]);\n  if(get_magic_quotes_gpc()){\n    return(stripcslashes($p));\n  }else{\n    return($_POST[$p]);\n  }\n}\n\nfunction set_post($value)\n{\n    // Take care of array, recursivly convert each array entry.\n    if(is_array($value)){\n        foreach($value as $key => $val){\n            $value[$key] = set_post($val);\n        }\n        return($value);\n    }\n    \n    // Do not touch boolean values, we may break them.\n    if($value === TRUE || $value === FALSE ) return($value);\n\n    // Return a fixed string which can then be used in HTML fields without \n    //  breaking the layout or the values. This allows to use '\"<> in input fields.\n    return(htmlentities($value, ENT_QUOTES, 'utf-8'));\n}\n\n\n/*! \\brief Return class name in correct case */\nfunction get_correct_class_name($cls)\n{\n  global $class_mapping;\n  if(isset($class_mapping) && is_array($class_mapping)){\n    foreach($class_mapping as $class => $file){\n      if(preg_match(\"/^\".$cls.\"$/i\",$class)){\n        return($class);\n      }\n    }\n  }\n  return(FALSE);\n}\n\n\n/*! \\brief  Change the password for a given object ($dn).\n *          This method uses the specified hashing method to generate a new password\n *           for the object and it also takes care of sambaHashes, if enabled.\n *          Finally the postmodify hook of the class 'user' will be called, if it is set.\n *\n * @param   String   The DN whose password shall be changed.\n * @param   String   The new password.\n * @param   Boolean  Skip adding samba hashes to the target (sambaNTPassword,sambaLMPassword)\n * @param   String   The hashin method to use, default is the global configured default.\n * @param   String   The users old password, this allows script based rollback mechanisms,\n *                    the prehook will then be called witch switched newPassword/oldPassword. \n * @return  Boolean  TRUE on success else FALSE.\n */\nfunction change_password ($dn, $password, $mode=FALSE, $hash= \"\", $old_password = \"\", &$message = \"\")\n{\n    global $config;\n    $newpass= \"\";\n\n    // Not sure, why this is here, but maybe some encryption methods require it.\n    mt_srand((double) microtime()*1000000);\n\n    // Get a list of all available password encryption methods.\n    $methods = new passwordMethod(session::get('config'),$dn);\n    $available = $methods->get_available_methods();\n\n    // Fetch the current object data, to be able to detect the current hashing method\n    //  and to be able to rollback changes once has an error occured.\n    $ldap = $config->get_ldap_link();\n    $ldap->cat ($dn, array(\"shadowLastChange\", \"userPassword\",\"sambaNTPassword\",\"sambaLMPassword\", \"uid\", \"objectClass\"));\n    $attrs = $ldap->fetch ();\n    $initialAttrs = $attrs;\n\n    // If no hashing method is enforced, then detect what method we've to use.\n    $hash = strtolower($hash);\n    $default_method = $config->get_cfg_value('core','passwordDefaultHash');\n\n    // Do not modify the password at all.\n    if($default_method == \"Remote\"){\n      $test = new $available[$default_method]($config,$dn);\n      $test->set_hash($hash);\n    }else if(empty($hash)){\n\n        // Do we need clear-text password for this object?\n        if(isset($attrs['userPassword'][0]) && !preg_match (\"/^{([^}]+)}(.+)/\", $attrs['userPassword'][0])){\n            $hash = \"clear\";\n            $test = new $available[$hash]($config,$dn);\n            $test->set_hash($hash);\n        }\n\n        // If we've still no valid hashing method detected, then try to extract if from the userPassword attribute.\n        elseif(isset($attrs['userPassword'][0]) && preg_match (\"/^{([^}]+)}(.+)/\", $attrs['userPassword'][0], $matches)){\n            $test = passwordMethod::get_method($attrs['userPassword'][0],$dn);\n            if($test){\n                $hash = $test->get_hash_name();\n            }\n        }\n\n        // No current password was found and no hash is enforced, so we've to use the config default here.\n        $hash = $config->get_cfg_value('core','passwordDefaultHash');\n        if(!isset($available[$hash])){\n          msg_dialog::display(_(\"Error\"),_(\"Invalid password method set!\"), ERROR_DIALOG);\n          return(FALSE);    \n        }else{\n          $test = new $available[$hash]($config,$dn);\n          $test->set_hash($hash);\n        }\n    }else{\n        $test = new $available[$hash]($config,$dn);\n        $test->set_hash($hash);\n    }\n\n    // We've now a valid password-method-handle and can create the new password hash or don't we?\n    if(!$test instanceOf passwordMethod){\n        $message = _(\"Cannot detect password hash!\");\n    }else{\n\n        // Feed password backends with object information. \n        $test->dn = $dn;\n        $test->attrs = $attrs;\n        $newpass= $test->generate_hash($password);\n        $ldap->cd($dn);\n\n        $attrs= array();\n        if($newpass !== NULL){\n\n          // Do we have to append samba attributes too?\n          // - sambaNTPassword / sambaLMPassword\n          $tmp = $config->get_cfg_value('core','sambaHashHook');\n          if (!$mode && !empty($tmp)){\n              $attrs= generate_smb_nt_hash($password);\n              if(!count($attrs) || !is_array($attrs)){\n                  msg_dialog::display(_(\"Error\"),_(\"Cannot generate SAMBA hash!\"),ERROR_DIALOG);\n                  return(FALSE);    \n              }\n          }\n\n          $attrs['userPassword'] = $newpass;\n\n          // For posixUsers - Set the last changed value.\n          if(in_array_strict(\"shadowAccount\", $initialAttrs['objectClass'])){\n            $attrs['shadowLastChange'] = (int)(date(\"U\") / 86400);\n          }\n        }\n\n        // Prepare a special attribute list, which will be used for event hook calls\n        $attrsEvent = array();\n        foreach($initialAttrs as $name => $value){\n            if(!is_numeric($name))\n                $attrsEvent[$name] = $value[0];\n        }\n        $attrsEvent['dn'] = $initialAttrs['dn'];\n        foreach($attrs as $name => $value){\n            $attrsEvent[$name] = $value;\n        }\n        $attrsEvent['current_password'] = $old_password;\n        $attrsEvent['new_password'] = $password;\n        $attrsEvent['bind_dn'] = $config->current['ADMINDN'];\n        $attrsEvent['bind_server'] = $config->current['SERVER'];\n        $attrsEvent['bind_password'] = $config->get_credentials($config->current['ADMINPASSWORD']);\n\n        // Call the premodify hook now\n        $passwordPlugin = new password($config,$dn);\n        plugin::callHook($passwordPlugin, 'PREMODIFY', $attrsEvent, $output,$retCode,$error, $directlyPrintError = FALSE);\n        if($retCode === 0 && count($output)){\n            $message = sprintf(_(\"Pre-event hook reported a problem: %s. Password change canceled!\"),implode($output));\n            return(FALSE);\n        }\n\n        // Perform ldap operations\n        $ldap->modify($attrs);\n\n        // Check if the object was locked before, if it was, lock it again!\n        $deactivated = $test->is_locked($config,$dn);\n        if($deactivated){\n            $test->lock_account($config,$dn);\n        }\n\n        // Check if everything went fine and then call the post event hooks.\n        // If an error occures, then try to rollback the complete actions done.\n        $preRollback = FALSE;\n        $ldapRollback = FALSE;\n        $success = TRUE;\n        if (!$ldap->success()) {\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - ldap modifications! - FAILED\");\n            $success =FALSE;\n            $message = msgPool::ldaperror($ldap->get_error(), $dn, LDAP_MOD);\n            $preRollback  =TRUE;\n        } else {\n\n            // Now call the passwordMethod change mechanism.\n            if(!$test->set_password($password)){\n                $ldapRollback = TRUE;\n                $preRollback  =TRUE;\n                $success = FALSE;\n                new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - set_password! - FAILED\");\n                $message = _(\"Password change failed!\");\n            }else{\n        \n                // Execute the password hook\n                plugin::callHook($passwordPlugin, 'POSTMODIFY', $attrsEvent, $output,$retCode,$error, $directlyPrintError = FALSE);\n                if($retCode === 0){\n                    if(count($output)){\n                        new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - Post modify hook reported! - FAILED!\");\n                        $message = sprintf(_(\"Post-event hook reported a problem: %s. Password change canceled!\"),implode($output));\n                        $ldapRollback = TRUE;\n                        $preRollback = TRUE;\n                        $success = FALSE;\n                    }else{\n                        #new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - successfull!\");\n                    }\n                }else{\n                    $ldapRollback = TRUE;\n                    $preRollback = TRUE;\n                    $success = FALSE;\n                    new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - postmodify hook execution! - FAILED\");\n                    new log(\"modify\",\"users/passwordMethod\",$dn,array(),$error);\n\n                    // Call password method again and send in old password to \n                    //  keep the database consistency\n                    $test->set_password($old_password);\n                }\n            }\n        }\n\n        // Setting the password in the ldap database or further operation failed, we should now execute \n        //  the plugins pre-event hook, using switched passwords, new/old password.\n        // This ensures that passwords which were set outside of GOsa, will be reset to its \n        //  starting value.\n        if($preRollback){\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Rolling back premodify hook!\");\n            $oldpass= $test->generate_hash($old_password);\n            $attrsEvent['current_password'] = $password;\n            $attrsEvent['new_password'] = $old_password;\n            foreach(array(\"userPassword\",\"sambaNTPassword\",\"sambaLMPassword\") as $attr){\n                if(isset($initialAttrs[$attr][0])) $attrsEvent[$attr] = $initialAttrs[$attr][0];\n            }\n            \n            plugin::callHook($passwordPlugin, 'PREMODIFY', $attrsEvent, $output,$retCode,$error, $directlyPrintError = FALSE);\n            if($retCode === 0 && count($output)){\n                $message = sprintf(_(\"Pre-event hook reported a problem: %s. Password change canceled!\"),implode($output));\n                new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Rolling back premodify hook! - FAILED!\");\n            }\n        }\n        \n        // We've written the password to the ldap database, but executing the postmodify hook failed.\n        // Now, we've to rollback all password related ldap operations.\n        if($ldapRollback){\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Rolling back ldap modifications!\");\n            $attrs = array();\n            foreach(array(\"userPassword\",\"sambaNTPassword\",\"sambaLMPassword\") as $attr){\n                if(isset($initialAttrs[$attr][0])) $attrs[$attr] = $initialAttrs[$attr][0];\n            }\n            $ldap->cd($dn);\n            $ldap->modify($attrs);\n            if(!$ldap->success()){\n                $message = msgPool::ldaperror($ldap->get_error(), $dn, LDAP_MOD);\n                new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Rolling back ldap modifications! - FAILED\");\n            }\n        }\n\n        // Log action.\n        if($success){\n            stats::log('global', 'global', array('users'),  $action = 'change_password', $amount = 1, 0, $test->get_hash());\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - successfull!\");\n        }else{\n            new log(\"modify\",\"users/passwordMethod\",$dn,array(),\"Password change - FAILED!\");\n        }\n\n        return($success);\n    }\n}\n\n\n/*! \\brief Generate samba hashes\n *\n * Given a certain password this constructs an array like\n * array['sambaLMPassword'] etc.\n *\n * \\param string 'password'\n * \\return array contains several keys for lmPassword, ntPassword, pwdLastSet, etc. depending\n * on the samba version\n */\nfunction generate_smb_nt_hash($password)\n{\n  global $config;\n\n  // First try to retrieve values via RPC \n  if ($config->get_cfg_value(\"core\",\"gosaRpcServer\") != \"\"){\n\n    $rpc = $config->getRpcHandle();\n    $hash = $rpc->mksmbhash($password);\n    if(!$rpc->success()){\n        msg_dialog::display(_(\"Error\"),msgPool::rpcError($rpc->get_error()),ERROR_DIALOG);\n        return(array());\n    }\n\n  }elseif ($config->get_cfg_value(\"core\",\"gosaSupportURI\") != \"\"){\n\n    // Try using gosa-si\n  \t$res= gosaSupportDaemon::send(\"gosa_gen_smb_hash\", \"GOSA\", array(\"password\" => $password), TRUE);\n    if (isset($res['XML']['HASH'])){\n    \t$hash= $res['XML']['HASH'];\n    } else {\n      $hash= \"\";\n    }\n\n    if ($hash == \"\") {\n      msg_dialog::display(_(\"Configuration error\"), _(\"Cannot generate SAMBA hash!\"), ERROR_DIALOG);\n      return (\"\");\n    }\n  } else {\n      $password = addcslashes($password, '$'); // <- Escape $ twice for transport from PHP to console-process.\n      $password = addcslashes($password, '$'); \n      $password = addcslashes($password, '$'); // <- And again once, to be able to use it as parameter for the perl script.\n\t  $tmp = $config->get_cfg_value(\"core\",'sambaHashHook');\n      $tmp = preg_replace(\"/%userPassword/\", base64_encode($password), $tmp);\n      $tmp = preg_replace(\"/%password/\", base64_encode($password), $tmp);\n\t  @DEBUG (DEBUG_LDAP, __LINE__, __FUNCTION__, __FILE__, $tmp, \"Execute\");\n\n \t  exec($tmp, $ar);\n\t  flush();\n\t  reset($ar);\n\t  $hash= current($ar);\n\n    if ($hash == \"\") {\n      msg_dialog::display(_(\"Configuration error\"), sprintf(_(\"Generating SAMBA hash by running %s failed: check %s!\"), bold($config->get_cfg_value(\"core\",'sambaHashHook'), bold(\"sambaHashHook\"))), ERROR_DIALOG);\n      return(array());\n    }\n  }\n\n  list($lm,$nt)= explode(\":\", trim($hash));\n\n  $attrs['sambaLMPassword']= $lm;\n  $attrs['sambaNTPassword']= $nt;\n  $attrs['sambaPwdLastSet']= date('U');\n  $attrs['sambaBadPasswordCount']= \"0\";\n  $attrs['sambaBadPasswordTime']= \"0\";\n  return($attrs);\n}\n\n\n/*! \\brief Get the Change Sequence Number of a certain DN\n *\n * To verify if a given object has been changed outside of Gosa\n * in the meanwhile, this function can be used to get the entryCSN\n * from the LDAP directory. It uses the attribute as configured\n * in modificationDetectionAttribute\n *\n * \\param string 'dn'\n * \\return either the result or \"\" in any other case\n */\nfunction getEntryCSN($dn)\n{\n  global $config;\n  if(empty($dn) || !is_object($config)){\n    return(\"\");\n  }\n\n  /* Get attribute that we should use as serial number */\n  $attr= $config->get_cfg_value(\"core\",\"modificationDetectionAttribute\");\n  if($attr != \"\"){\n    $ldap = $config->get_ldap_link();\n    $ldap->cat($dn,array($attr));\n    $csn = $ldap->fetch();\n    if(isset($csn[$attr][0])){\n      return($csn[$attr][0]);\n    }\n  }\n  return(\"\");\n}\n\n\n/*! \\brief Add (a) given objectClass(es) to an attrs entry\n * \n * The function adds the specified objectClass(es) to the given\n * attrs entry.\n *\n * \\param mixed 'classes' Either a single objectClass or several objectClasses\n * as an array\n * \\param array 'attrs' The attrs array to be modified.\n *\n * */\nfunction add_objectClass($classes, &$attrs)\n{\n  if (is_array($classes)){\n    $list= $classes;\n  } else {\n    $list= array($classes);\n  }\n\n  foreach ($list as $class){\n    $attrs['objectClass'][]= $class;\n  }\n}\n\n\n/*! \\brief Removes a given objectClass from the attrs entry\n *\n * Similar to add_objectClass, except that it removes the given\n * objectClasses. See it for the params.\n * */\nfunction remove_objectClass($classes, &$attrs)\n{\n  if (isset($attrs['objectClass'])){\n    /* Array? */\n    if (is_array($classes)){\n      $list= $classes;\n    } else {\n      $list= array($classes);\n    }\n\n    $tmp= array();\n    foreach ($attrs['objectClass'] as $oc) {\n      foreach ($list as $class){\n        if (strtolower($oc) != strtolower($class)){\n          $tmp[]= $oc;\n        }\n      }\n    }\n    $attrs['objectClass']= $tmp;\n  }\n}\n\n\n/*! \\brief  Initialize a file download with given content, name and data type. \n *  \\param  string data The content to send.\n *  \\param  string name The name of the file.\n *  \\param  string type The content identifier, default value is \"application/octet-stream\";\n */\nfunction send_binary_content($data,$name,$type = \"application/octet-stream\")\n{\n  header(\"Expires: Mon, 26 Jul 1997 05:00:00 GMT\");\n  header(\"Last-Modified: \".gmdate(\"D, d M Y H:i:s\").\" GMT\");\n  header(\"Cache-Control: no-cache\");\n  header(\"Pragma: no-cache\");\n  header(\"Cache-Control: post-check=0, pre-check=0\");\n  header(\"Content-type: \".$type.\"\");\n\n  $HTTP_USER_AGENT = $_SERVER['HTTP_USER_AGENT'];\n\n  /* Strip name if it is a complete path */\n  if (preg_match (\"/\\//\", $name)) {\n\t$name= basename($name);\n  }\n  \n  /* force download dialog */\n  if (preg_match('/MSIE 5.5/', $HTTP_USER_AGENT) || preg_match('/MSIE 6.0/', $HTTP_USER_AGENT)) {\n    header('Content-Disposition: filename=\"'.$name.'\"');\n  } else {\n    header('Content-Disposition: attachment; filename=\"'.$name.'\"');\n  }\n\n  echo $data;\n  exit();\n}\n\n\nfunction reverse_html_entities($str,$type = ENT_QUOTES , $charset = \"UTF-8\")\n{\n  if(is_string($str)){\n    return(htmlentities($str,$type,$charset));\n  }elseif(is_array($str)){\n    foreach($str as $name => $value){\n      $str[$name] = reverse_html_entities($value,$type,$charset);\n    }\n  }\n  return($str);\n}\n\n\n/*! \\brief Encode special string characters so we can use the string in \\\n           HTML output, without breaking quotes.\n    \\param string The String we want to encode.\n    \\return string The encoded String\n */\nfunction xmlentities($str)\n{ \n  if(is_string($str)){\n\n    static $asc2uni= array();\n    if (!count($asc2uni)){\n      for($i=128;$i<256;$i++){\n    #    $asc2uni[chr($i)] = \"&#x\".dechex($i).\";\";\n      }\n    }\n\n    $str = str_replace(\"&\", \"&amp;\", $str);\n    $str = str_replace(\"<\", \"&lt;\", $str);\n    $str = str_replace(\">\", \"&gt;\", $str);\n    $str = str_replace(\"'\", \"&apos;\", $str);\n    $str = str_replace(\"\\\"\", \"&quot;\", $str);\n    $str = str_replace(\"\\r\", \"\", $str);\n    $str = strtr($str,$asc2uni);\n    return $str;\n  }elseif(is_array($str)){\n    foreach($str as $name => $value){\n      $str[$name] = xmlentities($value);\n    }\n  }\n  return($str);\n}\n\n\n/*! \\brief  Updates all accessTo attributes from a given value to a new one.\n            For example if a host is renamed.\n    \\param  String  $from The source accessTo name.\n    \\param  String  $to   The destination accessTo name.\n*/\nfunction update_accessTo($from,$to)\n{\n  global $config;\n  $ldap = $config->get_ldap_link();\n  $ldap->cd($config->current['BASE']);\n  $ldap->search(\"(&(objectClass=trustAccount)(accessTo=\".$from.\"))\",array(\"objectClass\",\"accessTo\"));\n  while($attrs = $ldap->fetch()){\n    $new_attrs = array(\"accessTo\" => array());\n    $dn = $attrs['dn'];\n    for($i = 0 ; $i < $attrs['accessTo']['count']; $i++){\n      if($attrs['accessTo'][$i] == $from){\n        if(!empty($to)){\n          $new_attrs['accessTo'][] =  $to;\n        }\n      }else{\n        $new_attrs['accessTo'][] =  $attrs['accessTo'][$i]; \n      }\n    }\n    $ldap->cd($dn);\n    $ldap->modify($new_attrs);\n    if (!$ldap->success()){\n      msg_dialog::display(_(\"LDAP error\"), msgPool::ldaperror($ldap->get_error(), $dn, LDAP_MOD, \"update_accessTo($from,$to)\"));\n    }\n    new log(\"modify\",\"update_accessTo($from,$to)\",$dn,array_keys($new_attrs),$ldap->get_error());\n  }\n}\n\n\n/*! \\brief Returns a random char */\nfunction get_random_char () {\n     $randno = rand (0, 63);\n     if ($randno < 12) {\n         return (chr ($randno + 46)); // Digits, '/' and '.'\n     } else if ($randno < 38) {\n         return (chr ($randno + 53)); // Uppercase\n     } else {\n         return (chr ($randno + 59)); // Lowercase\n     }\n}\n\n\nfunction cred_encrypt($input, $password) {\n\n  $size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);\n  $iv = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);\n\n  return bin2hex(mcrypt_encrypt(MCRYPT_RIJNDAEL_128, $password, $input, MCRYPT_MODE_ECB, $iv));\n\n}\n\n\nfunction cred_decrypt($input,$password) {\n  $size = mcrypt_get_iv_size(MCRYPT_RIJNDAEL_128, MCRYPT_MODE_CBC);\n  $iv = mcrypt_create_iv($size, MCRYPT_DEV_RANDOM);\n\n  return mcrypt_decrypt(MCRYPT_RIJNDAEL_128, $password, pack(\"H*\", $input), MCRYPT_MODE_ECB, $iv);\n}\n\n\nfunction get_object_info()\n{\n  return(session::get('objectinfo'));\n}\n\n\nfunction set_object_info($str = \"\")\n{\n  session::set('objectinfo',$str);\n}\n\n\nfunction isIpInNet($ip, $net, $mask) {\n   // Move to long ints\n   $ip= ip2long($ip);\n   $net= ip2long($net);\n   $mask= ip2long($mask);\n\n   // Mask given IP with mask. If it returns \"net\", we're in...\n   $res= $ip & $mask;\n\n   return ($res == $net);\n}\n\n\nfunction get_next_id($attrib, $dn)\n{\n  global $config;\n\n  switch ($config->get_cfg_value(\"core\",\"idAllocationMethod\")){\n    case \"pool\":\n      return get_next_id_pool($attrib);\n    case \"traditional\":\n      return get_next_id_traditional($attrib, $dn);\n  }\n\n  msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"unknown idAllocation method!\"), ERROR_DIALOG);\n  return null;\n}\n\n\nfunction get_next_id_pool($attrib) {\n  global $config;\n\n  /* Fill informational values */\n  $min= $config->get_cfg_value(\"core\",\"${attrib}PoolMin\");\n  $max= $config->get_cfg_value(\"core\",\"${attrib}PoolMax\");\n\n  /* Sanity check */\n  if ($min >= $max) {\n    msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \".sprintf(_(\"%sPoolMin >= %sPoolMax!\"), bold($attrib), bold($attrib)), ERROR_DIALOG);\n    return null;\n  }\n\n  /* ID to skip */\n  $ldap= $config->get_ldap_link();\n  $id= null;\n\n  /* Try to allocate the ID several times before failing */\n  $tries= 3;\n  while ($tries--) {\n\n    /* Look for ID map entry */\n    $ldap->cd ($config->current['BASE']);\n    $ldap->search (\"(&(objectClass=sambaUnixIdPool)($attrib=*))\", array(\"$attrib\"));\n\n    /* If it does not exist, create one with these defaults */\n    if ($ldap->count() == 0) {\n      /* Fill informational values */\n      $minUserId= $config->get_cfg_value(\"core\",\"uidNumberPoolMin\");\n      $minGroupId= $config->get_cfg_value(\"core\",\"gidNumberPoolMin\");\n\n      /* Add as default */\n      $attrs= array(\"objectClass\" => array(\"organizationalUnit\", \"sambaUnixIdPool\"));\n      $attrs[\"ou\"]= \"idmap\";\n      $attrs[\"uidNumber\"]= $minUserId;\n      $attrs[\"gidNumber\"]= $minGroupId;\n      $ldap->cd(\"ou=idmap,\".$config->current['BASE']);\n      $ldap->add($attrs);\n      if ($ldap->error != \"Success\") {\n        msg_dialog::display(_(\"Error\"), _(\"Cannot create sambaUnixIdPool entry!\"), ERROR_DIALOG);\n        return null;\n      }\n      $tries++;\n      continue;\n    }\n    /* Bail out if it's not unique */\n    if ($ldap->count() != 1) {\n      msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"sambaUnixIdPool is not unique!\"), ERROR_DIALOG);\n      return null;\n    }\n\n    /* Store old attrib and generate new */\n    $attrs= $ldap->fetch();\n    $dn= $ldap->getDN();\n    $oldAttr= $attrs[$attrib][0];\n    $newAttr= $oldAttr + 1;\n\n    /* Sanity check */\n    if ($newAttr >= $max) {\n      msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"no ID available!\"), ERROR_DIALOG);\n      return null;\n    }\n    if ($newAttr < $min) {\n      msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"no ID available!\"), ERROR_DIALOG);\n      return null;\n    }\n\n    #FIXME: PHP is not able to do a modification of \"del: .../add: ...\", so this\n    #       is completely unsafe in the moment.\n    #/* Remove old attr, add new attr */\n    #$attrs= array($attrib => $oldAttr);\n    #$ldap->rm($attrs, $dn);\n    #if ($ldap->error != \"Success\") {\n    #  continue;\n    #}\n    $ldap->cd($dn);\n    $ldap->modify(array($attrib => $newAttr));\n    if ($ldap->error != \"Success\") {\n      msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \".$ldap->get_error(), ERROR_DIALOG);\n      return null;\n    } else {\n      return $oldAttr;\n    }\n  }\n\n  /* Bail out if we had problems getting the next id */\n  if (!$tries) {\n    msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID:\").\" \"._(\"maximum number of tries exceeded!\"), ERROR_DIALOG);\n  }\n\n  return $id;\n}\n\n\nfunction get_next_id_traditional($attrib, $dn)\n{\n  global $config;\n\n  $ids= array();\n  $ldap= $config->get_ldap_link();\n\n  $ldap->cd ($config->current['BASE']);\n  if (preg_match('/gidNumber/i', $attrib)){\n    $oc= \"posixGroup\";\n  } else {\n    $oc= \"posixAccount\";\n  }\n  $ldap->search (\"(&(objectClass=$oc)($attrib=*))\", array(\"$attrib\"));\n\n  /* Get list of ids */\n  while ($attrs= $ldap->fetch()){\n    $ids[]= (int)$attrs[\"$attrib\"][0];\n  }\n\n  /* Add the nobody id */\n  $ids[]= 65534;\n\n  /* get the ranges */\n  $tmp = array('0'=> 1000);\n  if (preg_match('/posixAccount/', $oc) && $config->get_cfg_value(\"core\",\"uidNumberBase\") != \"\"){\n    $tmp= explode('-',$config->get_cfg_value(\"core\",\"uidNumberBase\"));\n  } elseif($config->get_cfg_value(\"core\",\"gidNumberBase\") != \"\"){\n    $tmp= explode('-',$config->get_cfg_value(\"core\",\"gidNumberBase\"));\n  }\n\n  /* Set hwm to max if not set - for backward compatibility */\n  $lwm= $tmp[0];\n  if (isset($tmp[1])){\n    $hwm= $tmp[1];\n  } else {\n    $hwm= pow(2,32);\n  }\n  /* Find out next free id near to UID_BASE */\n  if ($config->get_cfg_value(\"core\",\"baseIdHook\") == \"\"){\n    $base= $lwm;\n  } else {\n    /* Call base hook */\n    $base= get_base_from_hook($dn, $attrib);\n  }\n  for ($id= $base; $id++; $id < pow(2,32)){\n    if (!in_array_strict($id, $ids)){\n      return ($id);\n    }\n  }\n\n  /* Should not happen */\n  if ($id == $hwm){\n    msg_dialog::display(_(\"Error\"), _(\"Cannot allocate free ID!\"), ERROR_DIALOG);\n    exit;\n  }\n}\n\n\n/* Mark the occurance of a string with a span */\nfunction mark($needle, $haystack, $ignorecase= true)\n{\n  $result= \"\";\n\n  while (preg_match('/^(.*)('.preg_quote($needle).')(.*)$/i', $haystack, $matches)) {\n    $result.= $matches[1].\"<span class='mark'>\".$matches[2].\"</span>\";\n    $haystack= $matches[3];\n  }\n\n  return $result.$haystack;\n}\n\n\n/* Return an image description using the path */\nfunction image($path, $action= \"\", $title= \"\", $align= \"middle\")\n{\n  global $config;\n  global $BASE_DIR;\n  $label= null;\n\n  // Bail out, if there's no style file\n  if(!class_exists('session')){\n    return \"\";    \n  }\n  if(!session::global_is_set(\"img-styles\")){\n\n    // Get theme\n    if (isset ($config)){\n      $theme= $config->get_cfg_value(\"core\",\"theme\");\n    } else {\n\n      // Fall back to default theme\n      $theme= \"default\";\n    }\n\n    if (!file_exists(\"$BASE_DIR/ihtml/themes/$theme/img.styles\")){\n      die (\"No img.style for this theme found!\");\n    }\n\n    session::global_set('img-styles', unserialize(file_get_contents(\"$BASE_DIR/ihtml/themes/$theme/img.styles\")));\n  }\n  $styles= session::global_get('img-styles');\n\n  /* Extract labels from path */\n  if (preg_match(\"/\\.png\\[(.*)\\]$/\", $path, $matches)) {\n    $label= $matches[1];\n  }\n\n  $baseImage = str_replace('['.$label.']', '', $path);\n  if (!array_key_exists($baseImage, $styles)) { \n    return \"\";\n  }\n\n  $lbl= \"\";\n  if ($label) {\n    if (isset($styles[\"images/label-\".$label.\".png\"])) {\n      $lbl= \"<div style='\".$styles[\"images/label-\".$label.\".png\"].\"'></div>\";\n    } else {\n      die(\"Invalid label specified: $label\\n\");\n    }\n\n    $path= preg_replace(\"/\\[.*\\]$/\", \"\", $path);\n  }\n\n  // Non middle layout?\n  if ($align == \"middle\") {\n    $align= \"\";\n  } else {\n    $align= \";vertical-align:$align\";\n  }\n\n  // Clickable image or not?\n  if ($title != \"\") {\n    $title= \"title='$title'\";\n  }\n\n  if ($action == \"\") {\n    return \"<div class='img' $title style='\".$styles[$path].\"$align'>$lbl</div>\";\n  } else {\n    return \"<input type='submit' class='img' id='$action' value='' name='$action' $title style='\".$styles[$path].\"$align'>\";\n  }\n}\n\n/*! \\brief    Encodes a complex string to be useable in HTML posts.\n */\nfunction postEncode($str)\n{\n  return(preg_replace(\"/=/\",\"_\", base64_encode($str)));\n}\n\n/*! \\brief    Decodes a string encoded by postEncode\n */\nfunction postDecode($str)\n{\n  return(base64_decode(preg_replace(\"/_/\",\"=\", $str)));\n}\n\n\n/*! \\brief    Generate styled output\n */\nfunction bold($str)\n{\n  return \"<span class='highlight'>$str</span>\";\n}\n\n\n\n/*! \\brief  Detect the special character handling for the currently used ldap database. \n *          For example some convert , to \\2C or \" to \\22.\n *         \n *  @param      Config  The GOsa configuration object.\n *  @return     Array   An array containing a character mapping the use.\n */\nfunction detectLdapSpecialCharHandling()\n{\n    // The list of chars to test for\n    global $config;\n    if(!$config) return(NULL);\n\n    // In the DN we've to use escaped characters, but the object name (o)\n    //  has the be un-escaped.\n    $name = 'GOsaLdapEncoding_,_\"_(_)_+_/';\n    $dnName = 'GOsaLdapEncoding_\\,_\\\"_(_)_\\+_/';\n   \n    // Prapare name to be useable in filters\n    $fixed= normalizeLdap(str_replace('\\\\\\\\', '\\\\\\\\\\\\', $name));\n    $filterName = str_replace('\\\\,', '\\\\\\\\,', $fixed);\n \n    // Create the target dn\n    $oDN = \"o={$dnName},\".$config->current['BASE'];\n\n    // Get ldap connection and check if we've already created the character \n    //  detection object. \n    $ldapCID = ldap_connect($config->current['SERVER']);\n    ldap_set_option($ldapCID, LDAP_OPT_PROTOCOL_VERSION, 3);\n    ldap_bind($ldapCID, $config->current['ADMINDN'],$config->current['ADMINPASSWORD']);\n    $res = ldap_list($ldapCID, $config->current['BASE'], \n            \"(&(o=\".$filterName.\")(objectClass=organization))\",\n            array('dn'));\n\n    // If we haven't created the character-detection object, then create it now.\n    $cnt = ldap_count_entries($ldapCID, $res);\n    if(!$cnt){\n        $obj = array();\n        $obj['objectClass'] = array('top','organization');\n        $obj['o'] = $name;\n        $obj['description'] = 'GOsa character encoding test-object.';\n        if(!@ldap_add($ldapCID, $oDN, $obj)){\n            trigger_error(\"GOsa couldn't detect the special character handling used by your ldap!\");\n            return(NULL);\n        }\n    }\n    \n    // Read the character-handling detection entry from the ldap.\n    $res = ldap_list($ldapCID, $config->current['BASE'],\n            \"(&(o=\".$filterName.\")(objectClass=organization))\",\n            array('dn','o'));\n    $cnt = ldap_count_entries($ldapCID, $res);\n    if($cnt != 1 || !$res){\n        trigger_error(\"GOsa couldn't detect the special character handling used by your ldap!\");\n        return(NULL);\n    }else{\n\n        // Get the character handling entry from the ldap and check how the \n        //  values were written. Compare them with what\n        //  we've initially intended to write and create a mapping out \n        //  of the results.\n        $re = ldap_first_entry($ldapCID, $res);\n        $attrs = ldap_get_attributes($ldapCID, $re);\n   \n        // Extract the interessting characters out of the dn and the \n        //  initially used $name for the entry. \n        $mapDNstr = preg_replace(\"/^o=GOsaLdapEncoding_(.*),\".preg_quote($config->current['BASE']).\"$/\",\"\\\\1\", trim(ldap_get_dn($ldapCID, $re)));\n        $mapDN = preg_split(\"/_/\", $mapDNstr,0, PREG_SPLIT_NO_EMPTY);\n\n        $mapNameStr = preg_replace(\"/^GOsaLdapEncoding_/\",\"\",$dnName);\n        $mapName = preg_split(\"/_/\", $mapNameStr,0, PREG_SPLIT_NO_EMPTY);\n\n        // Create a mapping out of the results.\n        $map = array();\n        foreach($mapName as $key => $entry){\n            $map[$entry] = $mapDN[$key];\n        }\n        return($map);\n    }\n    return(NULL);\n}\n\n\n/*! \\brief  Replaces placeholder in a given string.\n *          For example:\n *            '%uid@gonicus.de'         Replaces '%uid' with 'uid'.\n *            '{%uid[0]@gonicus.de}'    Replaces '%uid[0]' with the first char of 'uid'.\n *            '%uid[2-4]@gonicus.de'    Replaces '%uid[2-4]' with three chars from 'uid' starting from the second.\n *      \n *          The surrounding {} in example 2 are optional.\n *\n *  @param  String  The string to perform the action on.\n *  @param  Array   An array of replacements.\n *  @return     The resulting string.\n */\nfunction fillReplacements($str, $attrs, $shellArg = FALSE, $default = \"\")\n{\n    // Search for '{%...[n-m]}\n    // Get all matching parts of the given string and sort them by\n    //  length, to avoid replacing strings like '%uidNumber' with 'uid'\n    //  instead of 'uidNumber'; The longest tring at first.\n    preg_match_all('/(\\{?%([a-z0-9_]+)(\\[(([0-9_]+)(\\-([0-9_]+))?)\\])?\\}?)/i', $str ,$matches, PREG_SET_ORDER);\n    $hits = array();\n    foreach($matches as $match){\n        $hits[strlen($match[2]).$match[0]] = $match;\n    }\n    krsort($hits);\n\n    // Add lower case placeholders to avoid errors\n    foreach($attrs as $key => $attr) $attrs[strtolower($key)] = $attr;\n\n    // Replace the placeholder in the given string now.\n    foreach($hits as $match){\n\n        // Avoid errors about undefined index.\n        $name = strtolower($match[2]);\n        if(!isset($attrs[$name])) $attrs[$name] = $default;\n\n        // Calculate the replacement\n        $start = (isset($match[5])) ? $match[5] : 0;\n        $end = strlen($attrs[$name]);\n        if(isset($match[5]) && !isset($match[7])){\n            $end = 1;\n        }elseif(isset($match[5]) && isset($match[7])){\n            $end = ($match[7]-$start+1);\n        }\n        $value  = substr($attrs[$name], $start, $end);\n\n        // Use values which are valid for shell execution?\n        if($shellArg) $value = escapeshellarg($value);\n\n        // Replace the placeholder within the string.\n        $str = preg_replace(\"/\".preg_quote($match[0],'/').\"/\", $value, $str);\n    }\n    return($str);\n}\n\n\n/*! \\brief Generate a list of uid proposals based on a rule\n *\n *  Unroll given rule string by filling in attributes and replacing\n *  all keywords.\n *\n * \\param string 'rule' The rule string from gosa.conf.\n * \\param array 'attributes' A dictionary of attribute/value mappings\n * \\return array List of valid not used uids\n */\nfunction gen_uids($rule, $attributes)\n{\n    global $config;\n    $ldap = $config->get_ldap_link();\n    $ldap->cd($config->current['BASE']);\n\n    @DEBUG (DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__, $rule, \"Processing\");\n    \n    // Strip out non ascii chars\n    foreach($attributes as $name => $value){\n        if ( $config->get_cfg_value(\"core\", \"forceTranslit\") == \"true\" ) {\n             $value = cyrillic2ascii($value);\n        } else {\n             $value = iconv('UTF-8', 'US-ASCII//TRANSLIT', $value);\n        }\n        $value = preg_replace('/[^(\\x20-\\x7F)]*/','',$value);\n        $attributes[$name] = strtolower($value);\n    }\n    \n    @DEBUG (DEBUG_TRACE, __LINE__, __FUNCTION__, __FILE__, $attributes, \"Prepare\");\n\n    // Search for '{%...[n-m]}\n    // Get all matching parts of the given string and sort them by\n    //  length, to avoid replacing strings like '%uidNumber' with 'uid'\n    //  instead of 'uidNumber'; The longest tring at first.\n    preg_match_all('/(\\{?%([a-z0-9]+)(\\[(([0-9]+)(\\-([0-9]+))?)\\])?\\}?)/i', $rule ,$matches, PREG_SET_ORDER);\n    $replacements = array(); \n    foreach($matches as $match){\n        \n        // No start position given, then add the complete value\n        if(!isset($match[5])){\n            $replacements[$match[0]][] = $attributes[$match[2]];\n    \n        // Start given but no end, so just add a single character\n        }elseif(!isset($match[7])){\n            if(isset($attributes[$match[2]][$match[5]])){\n                $tmp = \" \".$attributes[$match[2]];\n                $replacements[$match[0]][] = trim($tmp[$match[5]]);\n            }\n\n        // Add all values in range\n        }else{\n            $str = \"\";\n            for($i=$match[5]; $i<= $match[7]; $i++){\n                if(isset($attributes[$match[2]][$i])){\n                    $tmp = \" \".$attributes[$match[2]];\n                    $str .= $tmp[$i];\n                    $replacements[$match[0]][] = trim($str);\n                }\n            }\n        }\n    }\n\n    // Create proposal array\n    $rules = array($rule);\n    foreach($replacements as $tag => $values){\n        $rules = gen_uid_proposals($rules, $tag, $values);\n    }\n    \n\n    // Search for id tags {id:3} / {id#3}\n    preg_match_all('/\\{id(#|:)([0-9])+\\}/i', $rule, $matches, PREG_SET_ORDER);\n    $idReplacements = array();\n    foreach($matches as $match){\n        if(count($match) != 3) continue;\n\n        // Generate random number \n        if($match[1] == '#'){\n            foreach($rules as $id => $ruleStr){\n                $genID = rand(pow(10,$match[2] -1),pow(10, ($match[2])) - 1);\n                $rules[$id] = preg_replace(\"/\".preg_quote($match[0],'/').\"/\", $genID,$ruleStr);\n            }\n        }\n    \n        // Search for next free id \n        if($match[1] == ':'){\n\n            // Walk through rules and replace all occurences of {id:..}\n            foreach($rules as $id => $ruleStr){\n                $genID = 0;\n                $start = TRUE;\n                while($start || $ldap->count()){\n                    $start = FALSE;\n                    $number= sprintf(\"%0\".$match[2].\"d\", $genID);\n                    $testRule = preg_replace(\"/\".preg_quote($match[0],'/').\"/\",$number,$ruleStr); \n                    $ldap->search('uid='.normalizeLdap($testRule));\n                    $genID ++;\n                }\n                $rules[$id] = preg_replace(\"/\".preg_quote($match[0],'/').\"/\",$number,$ruleStr);\n            }\n        }\n    }\n\n    // Create result set by checking which uid is already used and which is free.\n    $ret = array();\n    foreach($rules as $rule){\n        $ldap->search('uid='.normalizeLdap($rule));\n        if(!$ldap->count()){\n            $ret[] =  $rule;\n        }\n    }\n   \n    return($ret);\n}\n\n\nfunction gen_uid_proposals(&$rules, $tag, $values)\n{\n    $newRules = array();\n    foreach($rules as $rule){\n        foreach($values as $value){\n            $newRules[] = preg_replace(\"/\".preg_quote($tag,'/').\"/\", $value, $rule); \n        }\n    }\n    return($newRules);\n}\n\n\nfunction gen_uuid() \n{\n    return sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n        // 32 bits for \"time_low\"\n        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),\n\n        // 16 bits for \"time_mid\"\n        mt_rand( 0, 0xffff ),\n\n        // 16 bits for \"time_hi_and_version\",\n        // four most significant bits holds version number 4\n        mt_rand( 0, 0x0fff ) | 0x4000,\n\n        // 16 bits, 8 bits for \"clk_seq_hi_res\",\n        // 8 bits for \"clk_seq_low\",\n        // two most significant bits holds zero and one for variant DCE1.1\n        mt_rand( 0, 0x3fff ) | 0x8000,\n\n        // 48 bits for \"node\"\n        mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )\n    );\n}\n\nfunction gosa_file_name($filename)\n{\n    $tempfile = tempnam(sys_get_temp_dir(), 'GOsa'); \n    if(move_uploaded_file($filename, $tempfile)){ \n       return( $tempfile);\n    }\n}\n\nfunction gosa_file($filename)\n{\n    $tempfile = tempnam(sys_get_temp_dir(), 'GOsa'); \n    if(move_uploaded_file($filename, $tempfile)){ \n       return file( $tempfile );\n    }\n}\n\nfunction gosa_fopen($filename, $mode)\n{\n    $tempfile = tempnam(sys_get_temp_dir(), 'GOsa'); \n    if(move_uploaded_file($filename, $tempfile)){ \n       return fopen( $tempfile, $mode );\n    }\n}\n\n\n/*\\brief    Our own in_array method which defaults to a strict mode.\n */\nfunction in_array_strict($needle, $haystack, $strict = TRUE)\n{\n    return(in_array($needle, $haystack, $strict));\n}\n\n// vim:tabstop=2:expandtab:shiftwidth=2:filetype=php:syntax:ruler:\n?>\n"], "filenames": ["include/class_core.inc", "include/functions.inc"], "buggy_code_start_loc": [585, 3104], "buggy_code_end_loc": [586, 3106], "fixing_code_start_loc": [585, 3104], "fixing_code_end_loc": [586, 3106], "type": "CWE-94", "message": "The generate_smb_nt_hash function in include/functions.inc in GOsa allows remote attackers to execute arbitrary commands via a crafted password.", "other": {"cve": {"id": "CVE-2015-8771", "sourceIdentifier": "cve@mitre.org", "published": "2017-02-13T18:59:00.300", "lastModified": "2017-03-02T02:59:00.493", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The generate_smb_nt_hash function in include/functions.inc in GOsa allows remote attackers to execute arbitrary commands via a crafted password."}, {"lang": "es", "value": "La funci\u00f3n generate_smb_nt_hash en include/functions.inc en GOsa permite a atacantes remotos ejecutar comandos arbitrarios a trav\u00e9s de una contrase\u00f1a manipulada."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-94"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:gosa_project:gosa_plugin:*:*:*:*:*:*:*:*", "matchCriteriaId": "5EDDAA62-18AA-4C64-A7BC-5FFBB433D672"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/01/15/11", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/96388", "source": "cve@mitre.org"}, {"url": "https://github.com/gosa-project/gosa-core/commit/a67a047cba2cdae8bccb0f0e2bc6d3eb45cfcbc8", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gosa-project/gosa-core/commit/a67a047cba2cdae8bccb0f0e2bc6d3eb45cfcbc8"}}