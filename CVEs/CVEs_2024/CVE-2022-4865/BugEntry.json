{"buggy_code": ["import { marked } from \"..\";\nimport Link from \"./Link\";\n\nexport const BOLD_REG = /\\*\\*(.+?)\\*\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(BOLD_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], [Link]);\n  return `<strong>${parsedContent}</strong>`;\n};\n\nexport default {\n  name: \"bold\",\n  regex: BOLD_REG,\n  matcher,\n  renderer,\n};\n", "import { marked } from \"..\";\nimport Link from \"./Link\";\n\nexport const BOLD_EMPHASIS_REG = /\\*\\*\\*(.+?)\\*\\*\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(BOLD_EMPHASIS_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], [Link]);\n  return `<strong><em>${parsedContent}</em></strong>`;\n};\n\nexport default {\n  name: \"bold emphasis\",\n  regex: BOLD_EMPHASIS_REG,\n  matcher,\n  renderer,\n};\n", "import { marked } from \"..\";\nimport Link from \"./Link\";\n\nexport const EMPHASIS_REG = /\\*(.+?)\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(EMPHASIS_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], [Link]);\n  return `<em>${parsedContent}</em>`;\n};\n\nexport default {\n  name: \"emphasis\",\n  regex: EMPHASIS_REG,\n  matcher,\n  renderer,\n};\n", "import { escape } from \"lodash-es\";\nimport Emphasis from \"./Emphasis\";\nimport Bold from \"./Bold\";\nimport { marked } from \"..\";\nimport InlineCode from \"./InlineCode\";\nimport BoldEmphasis from \"./BoldEmphasis\";\n\nexport const LINK_REG = /\\[(.*?)\\]\\((.+?)\\)+/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(LINK_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n  const parsedContent = marked(matchResult[1], [], [InlineCode, BoldEmphasis, Emphasis, Bold]);\n  return `<a class='link' target='_blank' rel='noreferrer' href='${escape(matchResult[2])}'>${parsedContent}</a>`;\n};\n\nexport default {\n  name: \"link\",\n  regex: LINK_REG,\n  matcher,\n  renderer,\n};\n"], "fixing_code": ["import { marked } from \"..\";\nimport Link from \"./Link\";\nimport PlainText from \"./PlainText\";\n\nexport const BOLD_REG = /\\*\\*(.+?)\\*\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(BOLD_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], [Link, PlainText]);\n  return `<strong>${parsedContent}</strong>`;\n};\n\nexport default {\n  name: \"bold\",\n  regex: BOLD_REG,\n  matcher,\n  renderer,\n};\n", "import { marked } from \"..\";\nimport Link from \"./Link\";\nimport PlainText from \"./PlainText\";\n\nexport const BOLD_EMPHASIS_REG = /\\*\\*\\*(.+?)\\*\\*\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(BOLD_EMPHASIS_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], [Link, PlainText]);\n  return `<strong><em>${parsedContent}</em></strong>`;\n};\n\nexport default {\n  name: \"bold emphasis\",\n  regex: BOLD_EMPHASIS_REG,\n  matcher,\n  renderer,\n};\n", "import { marked } from \"..\";\nimport Link from \"./Link\";\nimport PlainText from \"./PlainText\";\n\nexport const EMPHASIS_REG = /\\*(.+?)\\*/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(EMPHASIS_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n\n  const parsedContent = marked(matchResult[1], [], [Link, PlainText]);\n  return `<em>${parsedContent}</em>`;\n};\n\nexport default {\n  name: \"emphasis\",\n  regex: EMPHASIS_REG,\n  matcher,\n  renderer,\n};\n", "import { escape } from \"lodash-es\";\nimport Emphasis from \"./Emphasis\";\nimport Bold from \"./Bold\";\nimport { marked } from \"..\";\nimport InlineCode from \"./InlineCode\";\nimport BoldEmphasis from \"./BoldEmphasis\";\nimport PlainText from \"./PlainText\";\n\nexport const LINK_REG = /\\[(.*?)\\]\\((.+?)\\)+/;\n\nconst matcher = (rawStr: string) => {\n  const matchResult = rawStr.match(LINK_REG);\n  return matchResult;\n};\n\nconst renderer = (rawStr: string): string => {\n  const matchResult = matcher(rawStr);\n  if (!matchResult) {\n    return rawStr;\n  }\n  const parsedContent = marked(matchResult[1], [], [InlineCode, BoldEmphasis, Emphasis, Bold, PlainText]);\n  return `<a class='link' target='_blank' rel='noreferrer' href='${escape(matchResult[2])}'>${parsedContent}</a>`;\n};\n\nexport default {\n  name: \"link\",\n  regex: LINK_REG,\n  matcher,\n  renderer,\n};\n"], "filenames": ["web/src/labs/marked/parser/Bold.ts", "web/src/labs/marked/parser/BoldEmphasis.ts", "web/src/labs/marked/parser/Emphasis.ts", "web/src/labs/marked/parser/Link.ts"], "buggy_code_start_loc": [2, 2, 2, 6], "buggy_code_end_loc": [18, 18, 18, 21], "fixing_code_start_loc": [3, 3, 3, 7], "fixing_code_end_loc": [19, 19, 19, 22], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.1.", "other": {"cve": {"id": "CVE-2022-4865", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-31T09:15:08.213", "lastModified": "2023-01-06T21:22:00.620", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository usememos/memos prior to 0.9.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 8.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:usememos:memos:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.9.1", "matchCriteriaId": "7E75ADB4-9898-49F3-BF80-3C54F4CE0FB4"}]}]}], "references": [{"url": "https://github.com/usememos/memos/commit/7670c9536000bb32c6345d4906a91268dcddd5fc", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/cd8765a2-bf28-4019-8647-882ccf63b2be", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/usememos/memos/commit/7670c9536000bb32c6345d4906a91268dcddd5fc"}}