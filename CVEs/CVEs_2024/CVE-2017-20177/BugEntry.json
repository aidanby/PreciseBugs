{"buggy_code": ["<?php\n/**\n * WangGuard Users Table class.\n *\n */\nrequire_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );\nclass WangGuard_Users_Table extends WP_List_Table {\n\tfunction WangGuard_Users_Table() {\n\t\tglobal $wp_version;\n\t\t$cur_wp_version = preg_replace('/-.*$/', '', $wp_version);\n\t\t$callConstructor = version_compare($cur_wp_version , '3.2.1' , \">=\");\n\t\tif (!$callConstructor) {\n\t\t\tparent::WP_List_Table( array(\n\t\t\t\t'singular' => 'user',\n\t\t\t\t'plural'   => 'users'\n\t\t\t) );\n\t\t}\n\t\telse {\n\t\t\tparent::__construct( array(\n\t\t\t\t'singular' => 'user',\n\t\t\t\t'plural'   => 'users'\n\t\t\t) );\n\t\t}\n\t}\n\tfunction prepare_items() {\n\t\tglobal $role, $usersearch;\n\t\t$usersearch = isset( $_REQUEST['s'] ) ? wp_unslash( trim( $_REQUEST['s'] ) ) : '';\n\t\t$usertype = isset( $_REQUEST['type'] ) ? $_REQUEST['type'] : '';\n\t\t$per_page = ( is_multisite() ) ? 'wangguard_page_wangguard_users_network_per_page' : 'wangguard_page_wangguard_users_per_page';\n\t\t$users_per_page = $this->get_items_per_page( $per_page );\n\t\t$paged = $this->get_pagenum();\n\n\t\t$args = array(\n\t\t\t'number' => $users_per_page,\n\t\t\t'offset' => ( $paged-1 ) * $users_per_page,\n\t\t\t'search' => $usersearch,\n\t\t\t'type' => $usertype,\n\t\t\t'fields' => 'all_with_meta'\n\t\t);\n\t\t$args['search'] = $args['search'];\n\t\tif ( isset( $_REQUEST['orderby'] ) )\n\t\t\t$args['orderby'] = $_REQUEST['orderby'];\n\t\tif ( isset( $_REQUEST['order'] ) )\n\t\t\t$args['order'] = $_REQUEST['order'];\n\t\t// Query the user IDs for this page\n\t\t$wp_user_search = new WangGuard_Users_Query( $args );\n\t\t$this->items = $wp_user_search->get_results();\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $wp_user_search->get_total(),\n\t\t\t'per_page' => $users_per_page,\n\t\t) );\n\t}\n\tfunction no_items() {\n\t\t_e( 'No users were found.' , 'wangguard' );\n\t}\n\tfunction get_views() {\n\t\tglobal $wpdb , $wangguard_g_splog_users_count;\n\t\t$url = 'admin.php?page=wangguard_users';\n\t\t$requestType = \"\";\n\t\tif (isset($_REQUEST['type']))\n\t\t\t$requestType = $_REQUEST['type'];\n\t\t$total = array();\n\t\t//Total users\n\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where 1=1\");\n\t\t$total_users = $Count[0];\n\t\t$class = empty($requestType) ? ' class=\"current\"' : '';\n\t\t$total['all'] = \"<a href='$url'$class>\" . sprintf( __( 'All Members <span class=\"count\">(%s)</span>' , $total_users, 'wangguard' ), number_format_i18n( $total_users ) ) . '</a>';\n\t\t//Unchecked users\n\t\t$table_name = $wpdb->base_prefix . \"wangguarduserstatus\";\n\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where  (not EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID) OR EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID and $table_name.user_status IN ( '', 'not-checked' )))\");\n\t\t$uncheked_users = $wangguard_g_unchecked_users_count = $Count[0];\n\t\t$class = ($requestType == \"uncheked\") ? ' class=\"current\"' : '';\n\t\t$total['uncheked'] = \"<a href='\" . add_query_arg( 'type', \"uncheked\", $url ) . \"'$class>\".sprintf( __( 'Unchecked Users <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $uncheked_users ) ).\"</a>\";\n\t\t//Legitimate users\n\t\t$table_name = $wpdb->base_prefix . \"wangguarduserstatus\";\n\t\t$wgLegitimateSQL = \" AND EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID and $table_name.user_status IN ( 'checked', 'force-checked', 'buyer' ))\";\n\t\tif (wangguard_is_multisite())\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1 AND $wpdb->users.spam = 0\" . $wgLegitimateSQL);\n\t\telseif (defined( 'BP_VERSION' ))\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1\" . $wgLegitimateSQL);\n\t\telse\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1\" . $wgLegitimateSQL);\n\t\t$legitimate_users = $Count[0];\n\t\t$class = ($requestType == \"l\") ? ' class=\"current\"' : '';\n\t\t$total['legitimate'] = \"<a href='\" . add_query_arg( 'type', \"l\", $url ) . \"'$class>\".sprintf( __( 'Verified Members <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $legitimate_users ) ).\"</a>\";\n\t\t//Whitelisted users\n\t\t$table_name = $wpdb->base_prefix . \"wangguarduserstatus\";\n\n\t\t$wgLegitimateSQL = \" AND EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID and $table_name.user_status IN ( 'whitelisted' ))\";\n\t\tif (wangguard_is_multisite())\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1 AND $wpdb->users.spam = 0\" . $wgLegitimateSQL);\n\t\telseif (defined( 'BP_VERSION' ))\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1\" . $wgLegitimateSQL);\n\t\telse\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1\" . $wgLegitimateSQL);\n\t\t$legitimate_users = $Count[0];\n\t\t$class = ($requestType == \"whitelisted\") ? ' class=\"current\"' : '';\n\t\t$total['whitelisted'] = \"<a href='\" . add_query_arg( 'type', \"whitelisted\", $url ) . \"'$class>\".sprintf( __( 'Whitelisted Users <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $legitimate_users ) ).\"</a>\";\n\t\t//Spam users, only BP or MS\n\t\tif (wangguard_is_multisite() || defined( 'BP_VERSION' )) {\n\t\t\tif (wangguard_is_multisite())\n\t\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status = 1 OR $wpdb->users.spam = 1\");\n\t\t\telse\n\t\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status = 1\");\n\t\t\t$spam_users = $Count[0];\n\t\t\t$class = ($requestType == \"spam\") ? ' class=\"current\"' : '';\n\t\t\t$total['spam'] = \"<a href='\" . add_query_arg( 'type', \"spam\", $url ) . \"'$class>\".sprintf( __( 'Spammers <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $spam_users ) ).\"</a>\";\n\t\t}\n\t\t//Sploggers users\n\t\t$table_name = $wpdb->base_prefix . \"wangguarduserstatus\";\n\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID and $table_name.user_status IN ( 'reported', 'autorep' ))\");\n\t\t$splog_users = $wangguard_g_splog_users_count = $Count[0];\n\t\t$class = ($requestType == \"spl\") ? ' class=\"current\"' : '';\n\t\t$total['sploggers'] = \"<a href='\" . add_query_arg( 'type', \"spl\", $url ) . \"'$class>\".sprintf( __( 'Sploggers <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $splog_users ) ).\"</a>\";\n\t\treturn $total;\n\t}\n\tfunction get_bulk_actions() {\n\t\t$actions = array();\n\t\t$actions['reportassplog'] = __( 'Report as Splogger', 'wangguard' );\n\t\tif (wangguard_is_multisite() || defined( 'BP_VERSION' )) {\n\t\t\t$actions['spam'] = _x( 'Mark as Spam', 'user' );\n\t\t\t$actions['notspam'] = _x( 'Not Spam', 'user' );\n\t\t}\n\t\t$actions['whitelist'] = __( 'Whitelist', 'wangguard' );\n\t\t$actions['delete'] = __( 'Delete Users', 'wangguard' );\n\t\treturn $actions;\n\t}\n\tfunction extra_tablenav( $which ) {\n\t\treturn;\n\t}\n\tfunction get_columns() {\n\t\t$c = array(\n\t\t\t'cb'\t\t\t\t=> '<input type=\"checkbox\" />',\n\t\t\t'info'\t\t\t\t=> __( 'Info' , 'wangguard' ),\n\t\t\t'username'\t\t\t=> __( 'Username' , 'wangguard' ),\n\t\t\t'email'\t\t\t\t=> __( 'E-mail' , 'wangguard' ),\n\t\t\t'user_registered'\t=> __( 'Signed up on' , 'wangguard' ),\n\t\t\t'from_ip'\t\t\t=> __( 'User IP' , 'wangguard' ),\n\t\t\t'posts'\t\t\t\t=> __( 'Posts' , 'wangguard' ),\n\t\t\t'wggcomments'\t\t\t=> __( 'Comments' , 'wangguard' ),\n\t\t\t'blogs'\t\t\t\t=> __( 'Blogs' , 'wangguard' ),\n\t\t\t'groups'\t\t\t=> __( 'Admin Group' , 'wangguard' ),\n\t\t);\n\t\treturn $c;\n\t}\n\tfunction get_sortable_columns() {\n\t\t$c = array(\n\t\t\t'username' => 'login',\n\t\t\t'email' => 'email',\n\t\t\t'from_ip' => 'from_ip',\n\t\t\t'user_registered' => 'user_registered',\n\t\t);\n\t\treturn $c;\n\t}\n\tfunction display_rows() {\n\t\t// Query the post counts for this page\n\t\t$style = '';\n\t\t$post_counts = count_many_users_posts( array_keys( $this->items ) );\n\t\tforeach ( $this->items as $userid => $row_data ) {\n\t\t\t$style = ( 'alternate' == $style ) ? '' : 'alternate';\n\t\t\techo \"\\n\\t\", $this->single_row( $row_data, $style , $post_counts[$userid] );\n\t\t}\n\t}\n\t/**\n\t * Generate HTML for a single row on the users.php admin panel.\n\t */\n\tfunction single_row( $row_data, $style = '' , $numposts) {\n\t\tglobal $wpdb , $wp_roles;\n\t\t$url = admin_url('admin.php?page=wangguard_users&order='.(isset($_REQUEST['order']) ? $_REQUEST['order'] : '').'&orderby='.(isset($_REQUEST['orderby']) ? $_REQUEST['orderby'] : ''));\n\t\t//USER\n\t\t$row_data->filter = 'display';\n\t\t$email = $row_data->user_email;\n\t\t$user_id = $row_data->ID;\n\n\t\t$checkbox = '';\n\t\t$actions = false;\n\t\tif (defined('BP_VERSION')) {\n\t\t\tadd_thickbox();\n\t\t\t$user_editobj_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( stripslashes( $_SERVER['REQUEST_URI'] ) ), \"user-edit.php?user_id=\" . $user_id) );\n\t\t\t$editobj_link = esc_url(  bp_core_get_user_domain($user_id));\n\t\t\t// Set up the hover actions for this user\n\t\t\t$actions['edituser'] = \"<a href='{$user_editobj_link}' target='_blank'>\" . __( 'Edit user', 'wangguard' ) . \"</a>\";\n\t\t\t$actions['bpprofile'] = \"<a href='{$editobj_link}?TB_iframe=true&width=900&height=550' class='thickbox'>\" . __( 'BP Profile', 'wangguard' ) . \"</a>\";\n\t\t\t$report = \"<strong><a target=\\\"_blank\\\" href=\\\"$editobj_link\\\">{$row_data->user_login}</a></strong><br />\";\n\t\t} else {\n\t\t\t$editobj_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( stripslashes( $_SERVER['REQUEST_URI'] ) ), \"user-edit.php?user_id=\" . $user_id ) );\n\t\t\t$report = \"<strong><a target=\\\"_blank\\\" href=\\\"$editobj_link\\\">{$row_data->user_login}</a></strong><br />\";\n\t\t}\n\t\t// @TODO: some sort of check whether the user is editable or not?\n\t\t// Set up the checkbox ( because the user is editable, otherwise its empty )\n\t\t$checkbox = \"<input type='checkbox' name='users[]' id='user_{$user_id}' value='{$user_id}' />\";\n\t\t$role = reset( $row_data->roles );\n\t\tif (!empty($role))\n\t\t\t$role = $wp_roles->role_names[$role];\n\n\t\t// Prepare row classes\n\t\t$row_classes = array( $style );\n\t\tif ( @$row_data->spam || @$row_data->user_status ) {\n\t\t\t$row_classes[] = 'site-spammed';\n\t\t}\n\t\t/**\n\t\t * Fires before generating HTML class statement for each row.\n\t\t *\n\t\t * @since WangGuard (1.6.3)\n\t\t *\n\t\t * @param array     $row_classes \tClasses to be applied to the row.\n\t\t * @param object    $row_data \t\tWP_User object.\n\t\t */\n\t\t$row_classes = apply_filters( 'wg_users_table_row_classes', $row_classes, $row_data );\n\t\t$row_classes_html = 'class=\"' . implode( ' ', $row_classes ) . '\"';\n\n\t\t// Begin row output\n\t\t$r = '<tr id=\"user-' . $user_id . '\" ' . $row_classes_html . '>';\n\n\t\tlist( $columns, $hidden ) = $this->get_column_info();\n\n\t\tforeach ( $columns as $column_name => $column_display_name ) {\n\t\t\tswitch ( $column_name ) {\n\t\t\t\tcase 'cb':\n\t\t\t\t\t$cell_contents = $checkbox;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'info':\n\t\t\t\t\tadd_thickbox();\n\t\t\t\t\tif ( !is_multisite() ) {\n\t\t\t\t\t\t$url = esc_url( admin_url( add_query_arg( array( 'page' => 'wangguard_users_info' ), 'admin.php' ) ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$url = esc_url( network_admin_url( add_query_arg( array( 'page' => 'wangguard_users_info' ), 'admin.php' ) ) );\n\t\t\t\t\t}\n\t\t\t\t\t$arrayUrl = array ('userID' => $user_id, 'userIP' => $row_data->user_ip, '?TB_iframe' => 'true', 'width' => '900', 'height' => '550' );\n\t\t\t\t\t$final_user_info_url = esc_url( add_query_arg(  $arrayUrl , $url ));\n\t\t\t\t\t$cell_contents = \"<a class='thickbox' title='\" . __( 'Info about','wangguard') . \" {$row_data->first_name} {$row_data->last_name}' href='\" . $final_user_info_url . \"'><img class='alignnone size-full wp-image-2055' alt='Info about {$row_data->first_name} {$row_data->last_name}' src='\" . plugins_url( 'img/info-wgg.png' , __FILE__ ) . \"' width='15' height='15' /> \" . __('User Info', 'wangguard' ) . \"</a>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'username':\n\t\t\t\t\t$avatar = get_avatar( $user_id, 32 );\n\t\t\t\t\t$cell_contents = \"$avatar $report <span style='font-size:11px'>{$role}\" . ($actions ? $this->row_actions( $actions ) : \"\") . \"</span>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'name':\n\t\t\t\t\t$cell_contents = \"{$row_data->first_name} {$row_data->last_name}\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'email':\n\t\t\t\t\t$cell_contents = \"<a href='mailto:{$email}' title='\" . esc_attr( sprintf( __( 'E-mail: %s' ), $email ) ) . \"'>{$email}</a>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'user_registered':\n\t\t\t\t\t$cell_contents = \"<span style='font-size:11px'>\".date(get_option('date_format'), strtotime($row_data->user_registered)) . \" \" . date(get_option('time_format'), strtotime($row_data->user_registered)).\"</span>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'from_ip':\n\t\t\t\t\t$cell_contents = \"<div class='wangguard-user-ip' data='{$row_data->user_ip}'><span class='wangguard-user-ip-bb'>\";\n\t\t\t\t\t$cell_contents .= $row_data->user_ip;\n\t\t\t\t\t$cell_contents .= '</span>';\n\t\t\t\t\tif ($row_data->user_ip_is_proxy) {\n\t\t\t\t\t\t$cell_contents .= \" <span class='wangguard_proxy'>\" . __( 'proxy' , 'wangguard') .  \"</span>\";\n\t\t\t\t\t}\n\t\t\t\t\t$cell_contents .= \"</div>\";\n\t\t\t\t\tif (!empty($row_data->user_reported_proxy_ip)) {\n\t\t\t\t\t\t$cell_contents .= \"<div class='wangguard-user-ip' data='{$row_data->user_reported_proxy_ip}'><span class='wangguard-user-ip-bb'>\";\n\t\t\t\t\t\t$cell_contents .= $row_data->user_reported_proxy_ip;\n\t\t\t\t\t\t$cell_contents .= '</span>';\n\t\t\t\t\t\t$cell_contents .= \" <span class='wangguard_proxy'>\" . __( 'reported proxy' , 'wangguard') .  \"</span>\";\n\t\t\t\t\t\t$cell_contents .= \"</div>\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'posts':\n\t\t\t\t\tif ( $numposts > 0 ) {\n\t\t\t\t\t\t$cell_contents = \"<a target='_blank' href='edit.php?author={$user_id}' title='\" . esc_attr__( 'View posts by this author' ) . \"' class='edit'>\";\n\t\t\t\t\t\t$cell_contents .= $numposts;\n\t\t\t\t\t\t$cell_contents .= '</a>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$cell_contents = 0;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'blogs':\n\t\t\t\t\tadd_thickbox();\n\t\t\t\t\t$cell_contents = '';\n\t\t\t\t\tif (function_exists(\"get_blogs_of_user\")) {\n\t\t\t\t\t\t$blogs = @get_blogs_of_user( $user_id, true );\n\t\t\t\t\t\tif (is_array($blogs)) {\n\t\t\t\t\t\t\tforeach ( (array) $blogs as $key => $details ) {\n\t\t\t\t\t\t\t\t$cell_contents .= '- <a href=\"'. $details->siteurl .'?TB_iframe=true&width=900&height=550\" class=\"thickbox\" title=\"'. htmlentities($details->siteurl, 0, 'UTF-8') .'\">'.$details->blogname.'</a><br/>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'wggcomments':\n\t\t\t\t\t//add_thickbox();\n\t\t\t\t\t$args = array(\n\t\t\t\t\t\t'user_id' => $user_id, // use user_id\n\t\t\t\t\t\t'count' => true //return only the count\n\t\t\t\t\t\t);\n\t\t\t\t\t$comments = get_comments($args);\n\t\t\t\t\t$cell_contents = '<p>' . $comments . '</p>';\n\n\t\t\t\t\t/*$args = array(\n\t\t\t\t\t\t'user_id' => $user_id, // use user_id\n\t\t\t\t\t\t);\n\t\t\t\t\t$cell_contents = '';\n\t\t\t\t\t$comments = get_comments($args);\n\t\t\t\t\tforeach($comments as $comment) :\n\t\t\t\t\t$cell_contents .= '<p>- ' . $comment->comment_content . '</p>';\n\t\t\t\t\tendforeach;*/\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'groups':\n\t\t\t\t\tadd_thickbox();\n\t\t\t\t\t$cell_contents = '';\n\t\t\t\t\tif ( ( defined( 'BP_VERSION' ) ) && ( class_exists('BP_Groups_Member') ) ) {\n\t\t\t\t\t\t$groups = BP_Groups_Member::get_is_admin_of( $user_id );\n\t\t\t\t\t\tif ( ! empty( $groups['groups'] ) ) {\n\t\t\t\t\t\t\tforeach ( $groups['groups'] as $group ) {\n\t\t\t\t\t\t\t\t$group_permalink = bp_get_group_permalink( $group );\n\t\t\t\t\t\t\t\t$cell_contents .= '- <a href=\"' . $group_permalink . '?TB_iframe=true&width=900&height=550\" class=\"thickbox\" title=\"'. htmlentities( $group_permalink, 0, 'UTF-8') .'\">'. bp_get_group_name( $group ) .'</a><br/>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'wgstatus':\n\t\t\t\t\t$cell_contents = wangguard_user_custom_columns( \"\" , \"wangguardstatus\" , $user_id );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Fires before outputting the generated HTML for each cell.\n\t\t\t *\n\t\t\t * This is a variable hook, depending on which cell is being generated.\n\t\t\t * The potential hooks are:\n\t\t\t * wg_users_table_cb_cell, wg_users_table_info_cell, wg_users_table_username_cell\n\t\t\t * wg_users_table_name_cell, wg_users_table_email_cell\n\t\t\t * wg_users_table_user_registered_cell, wg_users_table_from_ip_cell,\n\t\t\t * wg_users_table_posts_cell, wg_users_table_blogs_cell,\n\t\t\t * wg_users_table_groups_cell, wg_users_table_wgstatus_cell\n\t\t\t *\n\t\t\t * @since WangGuard (1.6.3)\n\t\t\t *\n\t\t\t * @param string    $cell_contents \tGenerated HTML for the cell.\n\t\t\t * @param object    $row_data \t\tWP_User object.\n  \t\t\t * @param string    $column_name \tName of column being generated.\n\t\t\t */\n\t\t\t$cell_contents = apply_filters( 'wg_users_table_' . $column_name . '_cell', $cell_contents, $row_data, $column_name );\n\n\t\t\tif ( $column_name == 'cb' ) {\n\t\t\t\t$r .= '<th scope=\"row\" class=\"check-column\">' . $cell_contents . '</th>';\n\t\t\t} else if ( $column_name == 'info' ) {\n\t\t\t\t$r .= '<td  width=\"25\">' . $cell_contents . '</td>';\n\t\t\t} else {\n\t\t\t\t// Prepare cell classes\n\t\t\t\t$classes = array( $column_name, 'column-' . $column_name );\n\t\t\t\tif ( ( $column_name == 'posts' ) || ( $column_name == 'wggcomments' ) ) {\n\t\t\t\t\t$classes[] = 'num';\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * Fires before generating HTML class statement for each cell.\n\t\t\t\t *\n\t\t\t\t * @since WangGuard (1.6.3)\n\t\t\t\t *\n\t\t\t\t * @param array     $classes \t\t\t\tClasses to be applied to the cell.\n\t\t\t\t * @param string    $column_name \t\t\tName of column being generated.\n\t\t\t\t * @param object    $row_data \t\t\t\tWP_User object.\n\t\t\t\t */\n\t\t\t\t$classes = apply_filters( 'wg_users_table_cell_classes', $classes, $column_name, $row_data );\n\t\t\t\t$classes_html = 'class=\"' . implode( ' ', $classes ) . '\"';\n\t\t\t\t$r .= \"<td {$classes_html}>\" . $cell_contents . '</td>';\n\t\t\t}\n\t\t}\n\t\t$r .= '</tr>';\n\t\treturn $r;\n\t}\n}\nclass WangGuard_Users_Query {\n\t/**\n\t * List of found user ids\n\t */\n\tvar $results;\n\t/**\n\t * Total number of found users for the current query\n\t */\n\tvar $total_users = 0;\n\t// SQL clauses\n\tvar $query_fields_u;\n\tvar $query_from_u;\n\tvar $query_where_u;\n\tvar $query_orderby;\n\tvar $query_limit;\n\t/**\n\t * PHP4 constructor\n\t */\n\tfunction WangGuard_Users_Query( $query = null ) {\n\t\t$this->__construct( $query );\n\t}\n\t/**\n\t * PHP5 constructor\n\t * @return WangGuard_Users_Query\n\t */\n\tfunction __construct( $query = null ) {\n\t\tif ( !empty( $query ) ) {\n\t\t\t$this->query_vars = wp_parse_args( $query, array(\n\t\t\t\t'orderby' => 'user_registered',\n\t\t\t\t'order' => 'DESC',\n\t\t\t\t'search' => '',\n\t\t\t\t'offset' => '',\n\t\t\t\t'number' => '',\n\t\t\t\t'type' => '',\n\t\t\t\t'count_total' => true\n\t\t\t) );\n\t\t\t$this->prepare_query();\n\t\t\t$this->query();\n\t\t}\n\t}\n\t/**\n\t * Prepare the query variables\n\t */\n\tfunction prepare_query() {\n\t\tglobal $wpdb;\n\t\t$qv = &$this->query_vars;\n\t\t$tableUserStatus = $wpdb->base_prefix . \"wangguarduserstatus\";\n\t\t$this->query_fields_u = \"$wpdb->users.ID , $wpdb->users.user_login , $tableUserStatus.user_status, $tableUserStatus.user_ip as status_user_ip, $tableUserStatus.user_proxy_ip as status_user_proxy_ip\";\n\t\t$this->query_from_u = \"FROM $wpdb->users LEFT JOIN $tableUserStatus ON $wpdb->users.ID = $tableUserStatus.ID\";\n\t\t//search\n\t\t$this->query_where_u = '';\n\t\tif (!empty($qv['search'])) {\n\t\t\tif (empty($this->query_where_u))\n\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\telse\n\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t$this->query_where_u .= \"($wpdb->users.user_login LIKE '%\".like_escape($qv['search']).\"%' OR $wpdb->users.user_nicename LIKE '%\".like_escape($qv['search']).\"%' OR $wpdb->users.user_email LIKE '%\".like_escape($qv['search']).\"%')\";\n\t\t}\n\t\tswitch ($qv['type']) {\n\t\t\tcase 'l':\n\t\t\t\t//Legitimate users filter\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\t//Legitimate users\n\t\t\t\t$wgLegitimateSQL = \" $tableUserStatus.user_status IN ( 'checked', 'force-checked' )\";\n\t\t\t\tif (wangguard_is_multisite())\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status <> 1 AND $wpdb->users.spam = 0 AND \" . $wgLegitimateSQL;\n\t\t\t\telseif (defined( 'BP_VERSION' ))\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status <> 1 AND \" . $wgLegitimateSQL;\n\t\t\t\telse\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status <> 1 AND \" . $wgLegitimateSQL;\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t\tcase 'spam':\n\t\t\t\t//Spam users filter\n\t\t\t\tif (!wangguard_is_multisite() && !defined('BP_VERSION'))\n\t\t\t\t\tbreak;\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\tif (wangguard_is_multisite())\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status = 1 OR $wpdb->users.spam = 1\";\n\t\t\t\telse\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status = 1\";\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t\tcase 'spl':\n\t\t\t\t//Spoggers users filter\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\t$wgLegitimateSQL = \" $tableUserStatus.user_status IN ( 'reported', 'autorep' )\";\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t\tcase 'uncheked':\n\t\t\t\t//Unchecked users filter\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\t$wgLegitimateSQL = \"(not EXISTS (select user_status from $tableUserStatus where $tableUserStatus.ID = {$wpdb->users}.ID) OR EXISTS (select user_status from $tableUserStatus where $tableUserStatus.ID = {$wpdb->users}.ID and $tableUserStatus.user_status IN ( '', 'not-checked' )))\";\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t\tcase 'whitelisted':\n\t\t\t\t//Spoggers users filter\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\t$wgLegitimateSQL = \" $tableUserStatus.user_status IN ( 'whitelisted' )\";\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t}\n\t\t// sorting\n\t\tswitch ($qv['orderby']) {\n\t\t\tcase \"email\":\n\t\t\t\t$orderby = \"$wpdb->users.user_email\";\n\t\t\t\tbreak;\n\t\t\tcase \"user_registered\":\n\t\t\t\t$orderby = \"$wpdb->users.user_registered\";\n\t\t\t\tbreak;\n\t\t\tcase \"from_ip\":\n\t\t\t\t$orderby = \"case when $tableUserStatus.user_proxy_ip = '' then $tableUserStatus.user_ip else $tableUserStatus.user_proxy_ip end\";\n\t\t\t\tbreak;\n\t\t\tcase \"login\":\n\t\t\tdefault:\n\t\t\t\t$orderby = \"$wpdb->users.user_login\";\n\t\t\t\tbreak;\n\t\t}\n\t\t$qv['order'] = strtoupper( $qv['order'] );\n\t\tif ( 'ASC' == $qv['order'] )\n\t\t\t$order = 'ASC';\n\t\telse\n\t\t\t$order = 'DESC';\n\t\t$this->query_orderby = \"ORDER BY $orderby $order\";\n\t\t// limit\n\t\tif ( $qv['number'] ) {\n\t\t\tif ( $qv['offset'] )\n\t\t\t\t$this->query_limit = $wpdb->prepare(\"LIMIT %d, %d\", $qv['offset'], $qv['number']);\n\t\t\telse\n\t\t\t\t$this->query_limit = $wpdb->prepare(\"LIMIT %d\", $qv['number']);\n\t\t}\n\t\t//_parse_meta_query( $qv );\n\t}\n\t/**\n\t * Execute the query, with the current variables\n\t */\n\tfunction query() {\n\t\tglobal $wpdb;\n\t\t$this->results = $wpdb->get_results(\"SELECT {$this->query_fields_u} {$this->query_from_u} {$this->query_where_u} {$this->query_orderby} {$this->query_limit}\");\n\t\t//echo(\"SELECT {$this->query_fields_u} {$this->query_from_u} {$this->query_where_u} {$this->query_orderby} {$this->query_limit}\");\n\t\tif ( $this->query_vars['count_total'] ) {\n\t\t\t$this->total_users = $wpdb->get_var(\"SELECT COUNT(*) {$this->query_from_u} {$this->query_where_u}\");\n\t\t}\n\t\tif ( !$this->results )\n\t\t\treturn;\n\t\t$r = array();\n\t\tforeach ( $this->results as $userrow ) {\n\t\t\t$userid = $userrow->ID;\n\t\t\t$r[ $userid ] = new WP_User( $userid );\n\t\t\tif ($_SERVER['SERVER_ADDR'] == $userrow->status_user_ip) {\n\t\t\t\t//server is behind an nginx/other proxy, grab the proxy address\n\t\t\t\t$r[ $userid ]->user_ip = !empty($userrow->status_user_proxy_ip) ? $userrow->status_user_proxy_ip : $userrow->status_user_ip;\n\t\t\t\t$r[ $userid ]->user_reported_proxy_ip = '';\n\t\t\t\t$r[ $userid ]->user_ip_is_proxy = !empty($userrow->status_user_proxy_ip);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//disply stored client IP addr, report proxy addr detected, just for admin info\n\t\t\t\t$r[ $userid ]->user_ip = $userrow->status_user_ip;\n\t\t\t\t$r[ $userid ]->user_reported_proxy_ip = $userrow->status_user_proxy_ip;\n\t\t\t\t$r[ $userid ]->user_ip_is_proxy = false;\n\t\t\t}\n\t\t\t$r[ $userid ]->user_row = $userrow;\n\t\t}\n\t\t$this->results = $r;\n\t}\n\tfunction get_results() {\n\t\treturn $this->results;\n\t}\n\tfunction get_total() {\n\t\treturn $this->total_users;\n\t}\n}\n?>\n", "<?php\n/*\n* WangGuard Users Info\n*/\nif ( !defined( 'ABSPATH' ) ) exit;\nfunction wangguard_users_info() {\n\tglobal $wpdb,$wangguard_nonce, $wangguard_api_key, $blog_id;\n\tif ( !current_user_can('level_10') )\n\t\tdie(__('Cheatin&#8217; uh?', 'wangguard'));\n\t\t$userID = $_GET[\"userID\"];\n\t\t$userIP = $_GET[\"userIP\"];\n\t\t$user_info = get_userdata($userID);\n\t//$blogID = $user_info->primary_blog;\n\t//if ( function_exists( is_multisite() ) ) {\n\t//$blog_details = get_blog_details( array( 'blog_id' => $blogID ) );\n\t//}\n?>\n<div class=\"wrap about-wrap\">\n\t\t\t<h1><?php  printf( __( 'Info about %s' ), $user_info->user_login ); ?></h1>\n\t\t\t<div class=\"about-text\"><?php __( 'This is a Beta page. We are working hard.', 'wangguard'  ); ?></div>\n\t\t\t<div class=\"wangguard-avatar\"><?php  echo get_avatar( $user_info->user_email , 120 ); ?></div>\n\t\t\t<h2 class=\"nav-tab-wrapper\">\n\t\t\t\t<a class=\"nav-tab nav-tab-active\" href=\"\">\n\t\t\t\t\t<?php  _e( 'General' ); ?>\n\t\t\t\t</a>\n\t\t\t</h2>\n\t\t\t<div class=\"changelog\">\n\t\t\t\t<h3><?php  _e( 'This is a Beta Screen', 'wangguard' ); ?></h3>\n\t\t\t\t<div class=\"feature-section col two-col\"><div>\n\t\t\t\t\t\t<p><?php\n\t\t\t\t\t\t\tprintf( __('Username: %s<br />'), $user_info->user_login);\n\t\t\t\t\t\t\tprintf( __('User ID: %s <br />'), $user_info->ID);\n\t\t\t\t\t\t\tprintf( __('User IP: %s <br />'), $userIP);\n\t\t\t\t\t\t\tprintf( __('User nicename: %s <br />'), $user_info->user_nicename);\n\t\t\t\t\t ?></p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"last-feature\"><p><?php\n\t\t\t\t\t\tprintf( __('User email: %s <br />'), $user_info->user_email);\n\t\t\t\t\t\tprintf( __('User registered: %s <br />'), $user_info->user_registered);\n\t\t\t\t\t\tprintf( __('User nickname: %s <br />'), $user_info->nickname);\n\t\t\t\t\t// if ( wangguard_is_multisite() ){\n\t\t\t\t\t//\t echo 'Blog ID: ' . $blogID . '<br />';\n\t\t\t\t\t//\t echo 'User primary Blog : ' . $blog_details->blogname . '<br />';\n\t\t\t\t\t//\t }\n\t\t\t\t\t?></p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<?php\n\t}\n?>"], "fixing_code": ["<?php\n/**\n * WangGuard Users Table class.\n *\n */\nrequire_once( ABSPATH . 'wp-admin/includes/class-wp-list-table.php' );\nclass WangGuard_Users_Table extends WP_List_Table {\n\tfunction WangGuard_Users_Table() {\n\t\tglobal $wp_version;\n\t\t$cur_wp_version = preg_replace('/-.*$/', '', $wp_version);\n\t\t$callConstructor = version_compare($cur_wp_version , '3.2.1' , \">=\");\n\t\tif (!$callConstructor) {\n\t\t\tparent::WP_List_Table( array(\n\t\t\t\t'singular' => 'user',\n\t\t\t\t'plural'   => 'users'\n\t\t\t) );\n\t\t}\n\t\telse {\n\t\t\tparent::__construct( array(\n\t\t\t\t'singular' => 'user',\n\t\t\t\t'plural'   => 'users'\n\t\t\t) );\n\t\t}\n\t}\n\tfunction prepare_items() {\n\t\tglobal $role, $usersearch;\n\t\t$usersearch = isset( $_REQUEST['s'] ) ? wp_unslash( trim( $_REQUEST['s'] ) ) : '';\n\t\t$usertype = isset( $_REQUEST['type'] ) ? $_REQUEST['type'] : '';\n\t\t$per_page = ( is_multisite() ) ? 'wangguard_page_wangguard_users_network_per_page' : 'wangguard_page_wangguard_users_per_page';\n\t\t$users_per_page = $this->get_items_per_page( $per_page );\n\t\t$paged = $this->get_pagenum();\n\n\t\t$args = array(\n\t\t\t'number' => $users_per_page,\n\t\t\t'offset' => ( $paged-1 ) * $users_per_page,\n\t\t\t'search' => $usersearch,\n\t\t\t'type' => $usertype,\n\t\t\t'fields' => 'all_with_meta'\n\t\t);\n\t\t$args['search'] = $args['search'];\n\t\tif ( isset( $_REQUEST['orderby'] ) )\n\t\t\t$args['orderby'] = $_REQUEST['orderby'];\n\t\tif ( isset( $_REQUEST['order'] ) )\n\t\t\t$args['order'] = $_REQUEST['order'];\n\t\t// Query the user IDs for this page\n\t\t$wp_user_search = new WangGuard_Users_Query( $args );\n\t\t$this->items = $wp_user_search->get_results();\n\t\t$this->set_pagination_args( array(\n\t\t\t'total_items' => $wp_user_search->get_total(),\n\t\t\t'per_page' => $users_per_page,\n\t\t) );\n\t}\n\tfunction no_items() {\n\t\t_e( 'No users were found.' , 'wangguard' );\n\t}\n\tfunction get_views() {\n\t\tglobal $wpdb , $wangguard_g_splog_users_count;\n\t\t$url = 'admin.php?page=wangguard_users';\n\t\t$requestType = \"\";\n\t\tif (isset($_REQUEST['type']))\n\t\t\t$requestType = $_REQUEST['type'];\n\t\t$total = array();\n\t\t//Total users\n\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where 1=1\");\n\t\t$total_users = $Count[0];\n\t\t$class = empty($requestType) ? ' class=\"current\"' : '';\n\t\t$total['all'] = \"<a href='$url'$class>\" . sprintf( __( 'All Members <span class=\"count\">(%s)</span>' , $total_users, 'wangguard' ), number_format_i18n( $total_users ) ) . '</a>';\n\t\t//Unchecked users\n\t\t$table_name = $wpdb->base_prefix . \"wangguarduserstatus\";\n\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where  (not EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID) OR EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID and $table_name.user_status IN ( '', 'not-checked' )))\");\n\t\t$uncheked_users = $wangguard_g_unchecked_users_count = $Count[0];\n\t\t$class = ($requestType == \"uncheked\") ? ' class=\"current\"' : '';\n\t\t$total['uncheked'] = \"<a href='\" . add_query_arg( 'type', \"uncheked\", $url ) . \"'$class>\".sprintf( __( 'Unchecked Users <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $uncheked_users ) ).\"</a>\";\n\t\t//Legitimate users\n\t\t$table_name = $wpdb->base_prefix . \"wangguarduserstatus\";\n\t\t$wgLegitimateSQL = \" AND EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID and $table_name.user_status IN ( 'checked', 'force-checked', 'buyer' ))\";\n\t\tif (wangguard_is_multisite())\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1 AND $wpdb->users.spam = 0\" . $wgLegitimateSQL);\n\t\telseif (defined( 'BP_VERSION' ))\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1\" . $wgLegitimateSQL);\n\t\telse\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1\" . $wgLegitimateSQL);\n\t\t$legitimate_users = $Count[0];\n\t\t$class = ($requestType == \"l\") ? ' class=\"current\"' : '';\n\t\t$total['legitimate'] = \"<a href='\" . add_query_arg( 'type', \"l\", $url ) . \"'$class>\".sprintf( __( 'Verified Members <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $legitimate_users ) ).\"</a>\";\n\t\t//Whitelisted users\n\t\t$table_name = $wpdb->base_prefix . \"wangguarduserstatus\";\n\n\t\t$wgLegitimateSQL = \" AND EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID and $table_name.user_status IN ( 'whitelisted' ))\";\n\t\tif (wangguard_is_multisite())\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1 AND $wpdb->users.spam = 0\" . $wgLegitimateSQL);\n\t\telseif (defined( 'BP_VERSION' ))\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1\" . $wgLegitimateSQL);\n\t\telse\n\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status <> 1\" . $wgLegitimateSQL);\n\t\t$legitimate_users = $Count[0];\n\t\t$class = ($requestType == \"whitelisted\") ? ' class=\"current\"' : '';\n\t\t$total['whitelisted'] = \"<a href='\" . add_query_arg( 'type', \"whitelisted\", $url ) . \"'$class>\".sprintf( __( 'Whitelisted Users <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $legitimate_users ) ).\"</a>\";\n\t\t//Spam users, only BP or MS\n\t\tif (wangguard_is_multisite() || defined( 'BP_VERSION' )) {\n\t\t\tif (wangguard_is_multisite())\n\t\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status = 1 OR $wpdb->users.spam = 1\");\n\t\t\telse\n\t\t\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where $wpdb->users.user_status = 1\");\n\t\t\t$spam_users = $Count[0];\n\t\t\t$class = ($requestType == \"spam\") ? ' class=\"current\"' : '';\n\t\t\t$total['spam'] = \"<a href='\" . add_query_arg( 'type', \"spam\", $url ) . \"'$class>\".sprintf( __( 'Spammers <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $spam_users ) ).\"</a>\";\n\t\t}\n\t\t//Sploggers users\n\t\t$table_name = $wpdb->base_prefix . \"wangguarduserstatus\";\n\t\t$Count = $wpdb->get_col( \"select count(*) as q from $wpdb->users where EXISTS (select user_status from $table_name where $table_name.ID = {$wpdb->users}.ID and $table_name.user_status IN ( 'reported', 'autorep' ))\");\n\t\t$splog_users = $wangguard_g_splog_users_count = $Count[0];\n\t\t$class = ($requestType == \"spl\") ? ' class=\"current\"' : '';\n\t\t$total['sploggers'] = \"<a href='\" . add_query_arg( 'type', \"spl\", $url ) . \"'$class>\".sprintf( __( 'Sploggers <span class=\"count\">(%s)</span>' , 'wangguard'), number_format_i18n( $splog_users ) ).\"</a>\";\n\t\treturn $total;\n\t}\n\tfunction get_bulk_actions() {\n\t\t$actions = array();\n\t\t$actions['reportassplog'] = __( 'Report as Splogger', 'wangguard' );\n\t\tif (wangguard_is_multisite() || defined( 'BP_VERSION' )) {\n\t\t\t$actions['spam'] = _x( 'Mark as Spam', 'user' );\n\t\t\t$actions['notspam'] = _x( 'Not Spam', 'user' );\n\t\t}\n\t\t$actions['whitelist'] = __( 'Whitelist', 'wangguard' );\n\t\t$actions['delete'] = __( 'Delete Users', 'wangguard' );\n\t\treturn $actions;\n\t}\n\tfunction extra_tablenav( $which ) {\n\t\treturn;\n\t}\n\tfunction get_columns() {\n\t\t$c = array(\n\t\t\t'cb'\t\t\t\t=> '<input type=\"checkbox\" />',\n\t\t\t'info'\t\t\t\t=> __( 'Info' , 'wangguard' ),\n\t\t\t'username'\t\t\t=> __( 'Username' , 'wangguard' ),\n\t\t\t'email'\t\t\t\t=> __( 'E-mail' , 'wangguard' ),\n\t\t\t'user_registered'\t=> __( 'Signed up on' , 'wangguard' ),\n\t\t\t'from_ip'\t\t\t=> __( 'User IP' , 'wangguard' ),\n\t\t\t'posts'\t\t\t\t=> __( 'Posts' , 'wangguard' ),\n\t\t\t'wggcomments'\t\t\t=> __( 'Comments' , 'wangguard' ),\n\t\t\t'blogs'\t\t\t\t=> __( 'Blogs' , 'wangguard' ),\n\t\t\t'groups'\t\t\t=> __( 'Admin Group' , 'wangguard' ),\n\t\t);\n\t\treturn $c;\n\t}\n\tfunction get_sortable_columns() {\n\t\t$c = array(\n\t\t\t'username' => 'login',\n\t\t\t'email' => 'email',\n\t\t\t'from_ip' => 'from_ip',\n\t\t\t'user_registered' => 'user_registered',\n\t\t);\n\t\treturn $c;\n\t}\n\tfunction display_rows() {\n\t\t// Query the post counts for this page\n\t\t$style = '';\n\t\t$post_counts = count_many_users_posts( array_keys( $this->items ) );\n\t\tforeach ( $this->items as $userid => $row_data ) {\n\t\t\t$style = ( 'alternate' == $style ) ? '' : 'alternate';\n\t\t\techo \"\\n\\t\", $this->single_row( $row_data, $style , $post_counts[$userid] );\n\t\t}\n\t}\n\t/**\n\t * Generate HTML for a single row on the users.php admin panel.\n\t */\n\tfunction single_row( $row_data, $style = '' , $numposts) {\n\t\tglobal $wpdb , $wp_roles;\n\t\t$url = admin_url('admin.php?page=wangguard_users&order='.(isset($_REQUEST['order']) ? $_REQUEST['order'] : '').'&orderby='.(isset($_REQUEST['orderby']) ? $_REQUEST['orderby'] : ''));\n\t\t//USER\n\t\t$row_data->filter = 'display';\n\t\t$email = $row_data->user_email;\n\t\t$user_id = $row_data->ID;\n\n\t\t$checkbox = '';\n\t\t$actions = false;\n\t\tif (defined('BP_VERSION')) {\n\t\t\tadd_thickbox();\n\t\t\t$user_editobj_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( stripslashes( $_SERVER['REQUEST_URI'] ) ), \"user-edit.php?user_id=\" . $user_id) );\n\t\t\t$editobj_link = esc_url(  bp_core_get_user_domain($user_id));\n\t\t\t// Set up the hover actions for this user\n\t\t\t$actions['edituser'] = \"<a href='{$user_editobj_link}' target='_blank'>\" . __( 'Edit user', 'wangguard' ) . \"</a>\";\n\t\t\t$actions['bpprofile'] = \"<a href='{$editobj_link}?TB_iframe=true&width=900&height=550' class='thickbox'>\" . __( 'BP Profile', 'wangguard' ) . \"</a>\";\n\t\t\t$report = \"<strong><a target=\\\"_blank\\\" href=\\\"$editobj_link\\\">{$row_data->user_login}</a></strong><br />\";\n\t\t} else {\n\t\t\t$editobj_link = esc_url( add_query_arg( 'wp_http_referer', urlencode( stripslashes( $_SERVER['REQUEST_URI'] ) ), \"user-edit.php?user_id=\" . $user_id ) );\n\t\t\t$report = \"<strong><a target=\\\"_blank\\\" href=\\\"$editobj_link\\\">{$row_data->user_login}</a></strong><br />\";\n\t\t}\n\t\t// @TODO: some sort of check whether the user is editable or not?\n\t\t// Set up the checkbox ( because the user is editable, otherwise its empty )\n\t\t$checkbox = \"<input type='checkbox' name='users[]' id='user_{$user_id}' value='{$user_id}' />\";\n\t\t$role = reset( $row_data->roles );\n\t\tif (!empty($role))\n\t\t\t$role = $wp_roles->role_names[$role];\n\n\t\t// Prepare row classes\n\t\t$row_classes = array( $style );\n\t\tif ( @$row_data->spam || @$row_data->user_status ) {\n\t\t\t$row_classes[] = 'site-spammed';\n\t\t}\n\t\t/**\n\t\t * Fires before generating HTML class statement for each row.\n\t\t *\n\t\t * @since WangGuard (1.6.3)\n\t\t *\n\t\t * @param array     $row_classes \tClasses to be applied to the row.\n\t\t * @param object    $row_data \t\tWP_User object.\n\t\t */\n\t\t$row_classes = apply_filters( 'wg_users_table_row_classes', $row_classes, $row_data );\n\t\t$row_classes_html = 'class=\"' . implode( ' ', $row_classes ) . '\"';\n\n\t\t// Begin row output\n\t\t$r = '<tr id=\"user-' . $user_id . '\" ' . $row_classes_html . '>';\n\n\t\tlist( $columns, $hidden ) = $this->get_column_info();\n\n\t\tforeach ( $columns as $column_name => $column_display_name ) {\n\t\t\tswitch ( $column_name ) {\n\t\t\t\tcase 'cb':\n\t\t\t\t\t$cell_contents = $checkbox;\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'info':\n\t\t\t\t\tadd_thickbox();\n\t\t\t\t\tif ( !is_multisite() ) {\n\t\t\t\t\t\t$url = esc_url( admin_url( add_query_arg( array( 'page' => 'wangguard_users_info' ), 'admin.php' ) ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$url = esc_url( network_admin_url( add_query_arg( array( 'page' => 'wangguard_users_info' ), 'admin.php' ) ) );\n\t\t\t\t\t}\n\t\t\t\t\t$arrayUrl = array ('userID' => $user_id, '?TB_iframe' => 'true', 'width' => '900', 'height' => '550' );\n\t\t\t\t\t$final_user_info_url = esc_url( add_query_arg(  $arrayUrl , $url ));\n\t\t\t\t\t$cell_contents = \"<a class='thickbox' title='\" . __( 'Info about','wangguard') . \" {$row_data->first_name} {$row_data->last_name}' href='\" . $final_user_info_url . \"'><img class='alignnone size-full wp-image-2055' alt='Info about {$row_data->first_name} {$row_data->last_name}' src='\" . plugins_url( 'img/info-wgg.png' , __FILE__ ) . \"' width='15' height='15' /> \" . __('User Info', 'wangguard' ) . \"</a>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'username':\n\t\t\t\t\t$avatar = get_avatar( $user_id, 32 );\n\t\t\t\t\t$cell_contents = \"$avatar $report <span style='font-size:11px'>{$role}\" . ($actions ? $this->row_actions( $actions ) : \"\") . \"</span>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'name':\n\t\t\t\t\t$cell_contents = \"{$row_data->first_name} {$row_data->last_name}\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'email':\n\t\t\t\t\t$cell_contents = \"<a href='mailto:{$email}' title='\" . esc_attr( sprintf( __( 'E-mail: %s' ), $email ) ) . \"'>{$email}</a>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'user_registered':\n\t\t\t\t\t$cell_contents = \"<span style='font-size:11px'>\".date(get_option('date_format'), strtotime($row_data->user_registered)) . \" \" . date(get_option('time_format'), strtotime($row_data->user_registered)).\"</span>\";\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'from_ip':\n\t\t\t\t\t$cell_contents = \"<div class='wangguard-user-ip' data='{$row_data->user_ip}'><span class='wangguard-user-ip-bb'>\";\n\t\t\t\t\t$cell_contents .= $row_data->user_ip;\n\t\t\t\t\t$cell_contents .= '</span>';\n\t\t\t\t\tif ($row_data->user_ip_is_proxy) {\n\t\t\t\t\t\t$cell_contents .= \" <span class='wangguard_proxy'>\" . __( 'proxy' , 'wangguard') .  \"</span>\";\n\t\t\t\t\t}\n\t\t\t\t\t$cell_contents .= \"</div>\";\n\t\t\t\t\tif (!empty($row_data->user_reported_proxy_ip)) {\n\t\t\t\t\t\t$cell_contents .= \"<div class='wangguard-user-ip' data='{$row_data->user_reported_proxy_ip}'><span class='wangguard-user-ip-bb'>\";\n\t\t\t\t\t\t$cell_contents .= $row_data->user_reported_proxy_ip;\n\t\t\t\t\t\t$cell_contents .= '</span>';\n\t\t\t\t\t\t$cell_contents .= \" <span class='wangguard_proxy'>\" . __( 'reported proxy' , 'wangguard') .  \"</span>\";\n\t\t\t\t\t\t$cell_contents .= \"</div>\";\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'posts':\n\t\t\t\t\tif ( $numposts > 0 ) {\n\t\t\t\t\t\t$cell_contents = \"<a target='_blank' href='edit.php?author={$user_id}' title='\" . esc_attr__( 'View posts by this author' ) . \"' class='edit'>\";\n\t\t\t\t\t\t$cell_contents .= $numposts;\n\t\t\t\t\t\t$cell_contents .= '</a>';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$cell_contents = 0;\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'blogs':\n\t\t\t\t\tadd_thickbox();\n\t\t\t\t\t$cell_contents = '';\n\t\t\t\t\tif (function_exists(\"get_blogs_of_user\")) {\n\t\t\t\t\t\t$blogs = @get_blogs_of_user( $user_id, true );\n\t\t\t\t\t\tif (is_array($blogs)) {\n\t\t\t\t\t\t\tforeach ( (array) $blogs as $key => $details ) {\n\t\t\t\t\t\t\t\t$cell_contents .= '- <a href=\"'. $details->siteurl .'?TB_iframe=true&width=900&height=550\" class=\"thickbox\" title=\"'. htmlentities($details->siteurl, 0, 'UTF-8') .'\">'.$details->blogname.'</a><br/>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'wggcomments':\n\t\t\t\t\t//add_thickbox();\n\t\t\t\t\t$args = array(\n\t\t\t\t\t\t'user_id' => $user_id, // use user_id\n\t\t\t\t\t\t'count' => true //return only the count\n\t\t\t\t\t\t);\n\t\t\t\t\t$comments = get_comments($args);\n\t\t\t\t\t$cell_contents = '<p>' . $comments . '</p>';\n\n\t\t\t\t\t/*$args = array(\n\t\t\t\t\t\t'user_id' => $user_id, // use user_id\n\t\t\t\t\t\t);\n\t\t\t\t\t$cell_contents = '';\n\t\t\t\t\t$comments = get_comments($args);\n\t\t\t\t\tforeach($comments as $comment) :\n\t\t\t\t\t$cell_contents .= '<p>- ' . $comment->comment_content . '</p>';\n\t\t\t\t\tendforeach;*/\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'groups':\n\t\t\t\t\tadd_thickbox();\n\t\t\t\t\t$cell_contents = '';\n\t\t\t\t\tif ( ( defined( 'BP_VERSION' ) ) && ( class_exists('BP_Groups_Member') ) ) {\n\t\t\t\t\t\t$groups = BP_Groups_Member::get_is_admin_of( $user_id );\n\t\t\t\t\t\tif ( ! empty( $groups['groups'] ) ) {\n\t\t\t\t\t\t\tforeach ( $groups['groups'] as $group ) {\n\t\t\t\t\t\t\t\t$group_permalink = bp_get_group_permalink( $group );\n\t\t\t\t\t\t\t\t$cell_contents .= '- <a href=\"' . $group_permalink . '?TB_iframe=true&width=900&height=550\" class=\"thickbox\" title=\"'. htmlentities( $group_permalink, 0, 'UTF-8') .'\">'. bp_get_group_name( $group ) .'</a><br/>';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'wgstatus':\n\t\t\t\t\t$cell_contents = wangguard_user_custom_columns( \"\" , \"wangguardstatus\" , $user_id );\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/**\n\t\t\t * Fires before outputting the generated HTML for each cell.\n\t\t\t *\n\t\t\t * This is a variable hook, depending on which cell is being generated.\n\t\t\t * The potential hooks are:\n\t\t\t * wg_users_table_cb_cell, wg_users_table_info_cell, wg_users_table_username_cell\n\t\t\t * wg_users_table_name_cell, wg_users_table_email_cell\n\t\t\t * wg_users_table_user_registered_cell, wg_users_table_from_ip_cell,\n\t\t\t * wg_users_table_posts_cell, wg_users_table_blogs_cell,\n\t\t\t * wg_users_table_groups_cell, wg_users_table_wgstatus_cell\n\t\t\t *\n\t\t\t * @since WangGuard (1.6.3)\n\t\t\t *\n\t\t\t * @param string    $cell_contents \tGenerated HTML for the cell.\n\t\t\t * @param object    $row_data \t\tWP_User object.\n  \t\t\t * @param string    $column_name \tName of column being generated.\n\t\t\t */\n\t\t\t$cell_contents = apply_filters( 'wg_users_table_' . $column_name . '_cell', $cell_contents, $row_data, $column_name );\n\n\t\t\tif ( $column_name == 'cb' ) {\n\t\t\t\t$r .= '<th scope=\"row\" class=\"check-column\">' . $cell_contents . '</th>';\n\t\t\t} else if ( $column_name == 'info' ) {\n\t\t\t\t$r .= '<td  width=\"25\">' . $cell_contents . '</td>';\n\t\t\t} else {\n\t\t\t\t// Prepare cell classes\n\t\t\t\t$classes = array( $column_name, 'column-' . $column_name );\n\t\t\t\tif ( ( $column_name == 'posts' ) || ( $column_name == 'wggcomments' ) ) {\n\t\t\t\t\t$classes[] = 'num';\n\t\t\t\t}\n\t\t\t\t/**\n\t\t\t\t * Fires before generating HTML class statement for each cell.\n\t\t\t\t *\n\t\t\t\t * @since WangGuard (1.6.3)\n\t\t\t\t *\n\t\t\t\t * @param array     $classes \t\t\t\tClasses to be applied to the cell.\n\t\t\t\t * @param string    $column_name \t\t\tName of column being generated.\n\t\t\t\t * @param object    $row_data \t\t\t\tWP_User object.\n\t\t\t\t */\n\t\t\t\t$classes = apply_filters( 'wg_users_table_cell_classes', $classes, $column_name, $row_data );\n\t\t\t\t$classes_html = 'class=\"' . implode( ' ', $classes ) . '\"';\n\t\t\t\t$r .= \"<td {$classes_html}>\" . $cell_contents . '</td>';\n\t\t\t}\n\t\t}\n\t\t$r .= '</tr>';\n\t\treturn $r;\n\t}\n}\nclass WangGuard_Users_Query {\n\t/**\n\t * List of found user ids\n\t */\n\tvar $results;\n\t/**\n\t * Total number of found users for the current query\n\t */\n\tvar $total_users = 0;\n\t// SQL clauses\n\tvar $query_fields_u;\n\tvar $query_from_u;\n\tvar $query_where_u;\n\tvar $query_orderby;\n\tvar $query_limit;\n\t/**\n\t * PHP4 constructor\n\t */\n\tfunction WangGuard_Users_Query( $query = null ) {\n\t\t$this->__construct( $query );\n\t}\n\t/**\n\t * PHP5 constructor\n\t * @return WangGuard_Users_Query\n\t */\n\tfunction __construct( $query = null ) {\n\t\tif ( !empty( $query ) ) {\n\t\t\t$this->query_vars = wp_parse_args( $query, array(\n\t\t\t\t'orderby' => 'user_registered',\n\t\t\t\t'order' => 'DESC',\n\t\t\t\t'search' => '',\n\t\t\t\t'offset' => '',\n\t\t\t\t'number' => '',\n\t\t\t\t'type' => '',\n\t\t\t\t'count_total' => true\n\t\t\t) );\n\t\t\t$this->prepare_query();\n\t\t\t$this->query();\n\t\t}\n\t}\n\t/**\n\t * Prepare the query variables\n\t */\n\tfunction prepare_query() {\n\t\tglobal $wpdb;\n\t\t$qv = &$this->query_vars;\n\t\t$tableUserStatus = $wpdb->base_prefix . \"wangguarduserstatus\";\n\t\t$this->query_fields_u = \"$wpdb->users.ID , $wpdb->users.user_login , $tableUserStatus.user_status, $tableUserStatus.user_ip as status_user_ip, $tableUserStatus.user_proxy_ip as status_user_proxy_ip\";\n\t\t$this->query_from_u = \"FROM $wpdb->users LEFT JOIN $tableUserStatus ON $wpdb->users.ID = $tableUserStatus.ID\";\n\t\t//search\n\t\t$this->query_where_u = '';\n\t\tif (!empty($qv['search'])) {\n\t\t\tif (empty($this->query_where_u))\n\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\telse\n\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t$this->query_where_u .= \"($wpdb->users.user_login LIKE '%\".like_escape($qv['search']).\"%' OR $wpdb->users.user_nicename LIKE '%\".like_escape($qv['search']).\"%' OR $wpdb->users.user_email LIKE '%\".like_escape($qv['search']).\"%')\";\n\t\t}\n\t\tswitch ($qv['type']) {\n\t\t\tcase 'l':\n\t\t\t\t//Legitimate users filter\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\t//Legitimate users\n\t\t\t\t$wgLegitimateSQL = \" $tableUserStatus.user_status IN ( 'checked', 'force-checked' )\";\n\t\t\t\tif (wangguard_is_multisite())\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status <> 1 AND $wpdb->users.spam = 0 AND \" . $wgLegitimateSQL;\n\t\t\t\telseif (defined( 'BP_VERSION' ))\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status <> 1 AND \" . $wgLegitimateSQL;\n\t\t\t\telse\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status <> 1 AND \" . $wgLegitimateSQL;\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t\tcase 'spam':\n\t\t\t\t//Spam users filter\n\t\t\t\tif (!wangguard_is_multisite() && !defined('BP_VERSION'))\n\t\t\t\t\tbreak;\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\tif (wangguard_is_multisite())\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status = 1 OR $wpdb->users.spam = 1\";\n\t\t\t\telse\n\t\t\t\t\t$wgLegitimateSQL = \" $wpdb->users.user_status = 1\";\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t\tcase 'spl':\n\t\t\t\t//Spoggers users filter\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\t$wgLegitimateSQL = \" $tableUserStatus.user_status IN ( 'reported', 'autorep' )\";\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t\tcase 'uncheked':\n\t\t\t\t//Unchecked users filter\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\t$wgLegitimateSQL = \"(not EXISTS (select user_status from $tableUserStatus where $tableUserStatus.ID = {$wpdb->users}.ID) OR EXISTS (select user_status from $tableUserStatus where $tableUserStatus.ID = {$wpdb->users}.ID and $tableUserStatus.user_status IN ( '', 'not-checked' )))\";\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t\tcase 'whitelisted':\n\t\t\t\t//Spoggers users filter\n\t\t\t\tif (empty($this->query_where_u))\n\t\t\t\t\t$this->query_where_u = \" WHERE \";\n\t\t\t\telse\n\t\t\t\t\t$this->query_where_u .= \" AND \";\n\t\t\t\t$wgLegitimateSQL = \" $tableUserStatus.user_status IN ( 'whitelisted' )\";\n\t\t\t\t$this->query_where_u .= $wgLegitimateSQL;\n\t\t\t\tbreak;\n\t\t}\n\t\t// sorting\n\t\tswitch ($qv['orderby']) {\n\t\t\tcase \"email\":\n\t\t\t\t$orderby = \"$wpdb->users.user_email\";\n\t\t\t\tbreak;\n\t\t\tcase \"user_registered\":\n\t\t\t\t$orderby = \"$wpdb->users.user_registered\";\n\t\t\t\tbreak;\n\t\t\tcase \"from_ip\":\n\t\t\t\t$orderby = \"case when $tableUserStatus.user_proxy_ip = '' then $tableUserStatus.user_ip else $tableUserStatus.user_proxy_ip end\";\n\t\t\t\tbreak;\n\t\t\tcase \"login\":\n\t\t\tdefault:\n\t\t\t\t$orderby = \"$wpdb->users.user_login\";\n\t\t\t\tbreak;\n\t\t}\n\t\t$qv['order'] = strtoupper( $qv['order'] );\n\t\tif ( 'ASC' == $qv['order'] )\n\t\t\t$order = 'ASC';\n\t\telse\n\t\t\t$order = 'DESC';\n\t\t$this->query_orderby = \"ORDER BY $orderby $order\";\n\t\t// limit\n\t\tif ( $qv['number'] ) {\n\t\t\tif ( $qv['offset'] )\n\t\t\t\t$this->query_limit = $wpdb->prepare(\"LIMIT %d, %d\", $qv['offset'], $qv['number']);\n\t\t\telse\n\t\t\t\t$this->query_limit = $wpdb->prepare(\"LIMIT %d\", $qv['number']);\n\t\t}\n\t\t//_parse_meta_query( $qv );\n\t}\n\t/**\n\t * Execute the query, with the current variables\n\t */\n\tfunction query() {\n\t\tglobal $wpdb;\n\t\t$this->results = $wpdb->get_results(\"SELECT {$this->query_fields_u} {$this->query_from_u} {$this->query_where_u} {$this->query_orderby} {$this->query_limit}\");\n\t\t//echo(\"SELECT {$this->query_fields_u} {$this->query_from_u} {$this->query_where_u} {$this->query_orderby} {$this->query_limit}\");\n\t\tif ( $this->query_vars['count_total'] ) {\n\t\t\t$this->total_users = $wpdb->get_var(\"SELECT COUNT(*) {$this->query_from_u} {$this->query_where_u}\");\n\t\t}\n\t\tif ( !$this->results )\n\t\t\treturn;\n\t\t$r = array();\n\t\tforeach ( $this->results as $userrow ) {\n\t\t\t$userid = $userrow->ID;\n\t\t\t$r[ $userid ] = new WP_User( $userid );\n\t\t\tif ($_SERVER['SERVER_ADDR'] == $userrow->status_user_ip) {\n\t\t\t\t//server is behind an nginx/other proxy, grab the proxy address\n\t\t\t\t$r[ $userid ]->user_ip = !empty($userrow->status_user_proxy_ip) ? $userrow->status_user_proxy_ip : $userrow->status_user_ip;\n\t\t\t\t$r[ $userid ]->user_reported_proxy_ip = '';\n\t\t\t\t$r[ $userid ]->user_ip_is_proxy = !empty($userrow->status_user_proxy_ip);\n\t\t\t}\n\t\t\telse {\n\t\t\t\t//disply stored client IP addr, report proxy addr detected, just for admin info\n\t\t\t\t$r[ $userid ]->user_ip = $userrow->status_user_ip;\n\t\t\t\t$r[ $userid ]->user_reported_proxy_ip = $userrow->status_user_proxy_ip;\n\t\t\t\t$r[ $userid ]->user_ip_is_proxy = false;\n\t\t\t}\n\t\t\t$r[ $userid ]->user_row = $userrow;\n\t\t}\n\t\t$this->results = $r;\n\t}\n\tfunction get_results() {\n\t\treturn $this->results;\n\t}\n\tfunction get_total() {\n\t\treturn $this->total_users;\n\t}\n}\n?>\n", "<?php\n/*\n* WangGuard Users Info\n*/\nif ( !defined( 'ABSPATH' ) ) exit;\nfunction wangguard_users_info() {\n\tglobal $wpdb,$wangguard_nonce, $wangguard_api_key, $blog_id;\n\tif ( !current_user_can('level_10') )\n\t\tdie(__('Cheatin&#8217; uh?', 'wangguard'));\n\t\t$userID = absint( $_GET[\"userID\"] );\n\t\t$user_info = get_userdata($userID);\n\n\t\t$table = $wpdb->base_prefix . 'wangguarduserstatus';\n\t\t$userIP = $wpdb->get_var( $wpdb->prepare( \"SELECT user_ip FROM $table WHERE ID = %d\", $userID ) );\n\t\t$userIP = $userIP ? $userIP : '';\n\t//$blogID = $user_info->primary_blog;\n\t//if ( function_exists( is_multisite() ) ) {\n\t//$blog_details = get_blog_details( array( 'blog_id' => $blogID ) );\n\t//}\n?>\n<div class=\"wrap about-wrap\">\n\t\t\t<h1><?php  printf( __( 'Info about %s' ), $user_info->user_login ); ?></h1>\n\t\t\t<div class=\"about-text\"><?php __( 'This is a Beta page. We are working hard.', 'wangguard'  ); ?></div>\n\t\t\t<div class=\"wangguard-avatar\"><?php  echo get_avatar( $user_info->user_email , 120 ); ?></div>\n\t\t\t<h2 class=\"nav-tab-wrapper\">\n\t\t\t\t<a class=\"nav-tab nav-tab-active\" href=\"\">\n\t\t\t\t\t<?php  _e( 'General' ); ?>\n\t\t\t\t</a>\n\t\t\t</h2>\n\t\t\t<div class=\"changelog\">\n\t\t\t\t<h3><?php  _e( 'This is a Beta Screen', 'wangguard' ); ?></h3>\n\t\t\t\t<div class=\"feature-section col two-col\"><div>\n\t\t\t\t\t\t<p><?php\n\t\t\t\t\t\t\tprintf( __('Username: %s<br />'), $user_info->user_login);\n\t\t\t\t\t\t\tprintf( __('User ID: %s <br />'), $user_info->ID);\n\t\t\t\t\t\t\tprintf( __('User IP: %s <br />'), $userIP);\n\t\t\t\t\t\t\tprintf( __('User nicename: %s <br />'), $user_info->user_nicename);\n\t\t\t\t\t ?></p>\n\t\t\t\t\t</div>\n\t\t\t\t\t<div class=\"last-feature\"><p><?php\n\t\t\t\t\t\tprintf( __('User email: %s <br />'), $user_info->user_email);\n\t\t\t\t\t\tprintf( __('User registered: %s <br />'), $user_info->user_registered);\n\t\t\t\t\t\tprintf( __('User nickname: %s <br />'), $user_info->nickname);\n\t\t\t\t\t// if ( wangguard_is_multisite() ){\n\t\t\t\t\t//\t echo 'Blog ID: ' . $blogID . '<br />';\n\t\t\t\t\t//\t echo 'User primary Blog : ' . $blog_details->blogname . '<br />';\n\t\t\t\t\t//\t }\n\t\t\t\t\t?></p>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\t\t</div>\n\t\t<?php\n\t}\n?>"], "filenames": ["wangguard-class-wp-users.php", "wangguard-user-info.php"], "buggy_code_start_loc": [229, 10], "buggy_code_end_loc": [230, 12], "fixing_code_start_loc": [229, 10], "fixing_code_end_loc": [230, 16], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, has been found in WangGuard Plugin 1.8.0. Affected by this issue is the function wangguard_users_info of the file wangguard-user-info.php of the component WGG User List Handler. The manipulation of the argument userIP leads to cross site scripting. The attack may be launched remotely. The name of the patch is 88414951e30773c8d2ec13b99642688284bf3189. It is recommended to apply a patch to fix this issue. VDB-220214 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2017-20177", "sourceIdentifier": "cna@vuldb.com", "published": "2023-02-06T20:15:10.763", "lastModified": "2023-02-14T02:19:17.660", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in WangGuard Plugin 1.8.0. Affected by this issue is the function wangguard_users_info of the file wangguard-user-info.php of the component WGG User List Handler. The manipulation of the argument userIP leads to cross site scripting. The attack may be launched remotely. The name of the patch is 88414951e30773c8d2ec13b99642688284bf3189. It is recommended to apply a patch to fix this issue. VDB-220214 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wangguard_project:wangguard:1.8.0:*:*:*:*:wordpress:*:*", "matchCriteriaId": "136BF087-7C7D-4FA1-9061-45E60780BF42"}]}]}], "references": [{"url": "https://github.com/joseconti/WangGuard/commit/88414951e30773c8d2ec13b99642688284bf3189", "source": "cna@vuldb.com", "tags": ["Patch"]}, {"url": "https://github.com/joseconti/WangGuard/pull/14", "source": "cna@vuldb.com", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://vuldb.com/?ctiid.220214", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.220214", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/joseconti/WangGuard/commit/88414951e30773c8d2ec13b99642688284bf3189"}}