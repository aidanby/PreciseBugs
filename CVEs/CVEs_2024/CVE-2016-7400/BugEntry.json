{"buggy_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class mysqli_database\n *\n * This is the MySQLi-specific implementation of the database class.\n * @package Subsystems\n * @subpackage Database\n */\n/** @define \"BASE\" \"../..\" */\n\nclass mysqli_database extends database {\n\n    /**\n     * Make a connection to the Database Server\n     *\n     * Takes the supplied credentials (username / password) and tries to\n     * connect to the server and select the given database.  All the rules\n     * governing mysqli_connect also govern this method.\n     *\n     * @param string $username The username to connect to the server as.\n     * @param string $password The password for $username\n     * @param string $hostname The hostname of the database server.  If\n     *   localhost is specified, a local socket connection will be attempted.\n     * @param string $database The name of the database to use.  Multi-database\n     *   sites are still not yet supported.\n     * @param bool $new Whether or not to force the PHP connection function to establish\n     *   a distinctly new connection handle to the server.\n     */\n\n\tfunction __construct($username, $password, $hostname, $database, $new=false) {\n\t\tif (strstr($hostname,':')) {\n\t\t\tlist ( $host, $port ) = @explode (\":\", $hostname);\n\t\t} else {\n            $host = $hostname;\n        }\n\t\tif ($this->connection = @mysqli_connect($host, $username, $password, $database, $port)) {\n\t\t\t$this->havedb = true;\n\t\t}\n\t\t//fix to support utf8, warning it only works from a certain mySQL version on\n\t\t//needed on mySQL servers that don't have the default connection encoding setting to utf8\n\n\t\t//As we do not have any setting for ISAM or InnoDB tables yet, i set the minimum specs\n\t\t// for using this feature to 4.1.2, although isam tables got the support for utf8 already in 4.1\n\t\t//anything else would result in an inconsistent user experience\n\t\t//TODO: determine how to handle encoding on postgres\n\n\t\tlist($major, $minor, $micro) = sscanf(@mysqli_get_server_info($this->connection), \"%d.%d.%d-%s\");\n\t\tif(defined('DB_ENCODING')) {\n\t\t\t//SET NAMES is possible since version 4.1\n\t\t\tif(($major > 4) OR (($major == 4) AND ($minor >= 1))) {\n\t\t\t\t@mysqli_query($this->connection, \"SET NAMES \" . DB_ENCODING);\n\t\t\t}\n\t\t}\n\n\t\t$this->prefix = DB_TABLE_PREFIX . '_';\n\t}\n\n    /**\n     * Create a new Table\n     *\n     * Creates a new database table, according to the passed data definition.\n     *\n     * This function abides by the Exponent Data Definition Language, and interprets\n     * its general structure for MySQL.\n     *\n     * @param string $tablename The name of the table to create\n     * @param array $datadef The data definition to create, expressed in\n     *   the Exponent Data Definition Language.\n     * @param array $info Information about the table itself.\n     * @return array\n\t */\n\tfunction createTable($tablename, $datadef, $info) {\n\t\tif (!is_array($info))\n            $info = array(); // Initialize for later use.\n\n\t\t$sql = \"CREATE TABLE `\" . $this->prefix . \"$tablename` (\";\n\t\t$primary = array();\n\t\t$fulltext = array();\n\t\t$unique = array();\n\t\t$index = array();\n\t\tforeach ($datadef as $name=>$def) {\n\t\t\tif ($def != null) {\n\t\t\t\t$sql .= $this->fieldSQL($name,$def) . \",\";\n\t\t\t\tif (!empty($def[DB_PRIMARY]))  $primary[] = $name;\n\t\t\t\tif (!empty($def[DB_FULLTEXT])) $fulltext[] = $name;\n\t\t\t\tif (isset($def[DB_INDEX]) && ($def[DB_INDEX] > 0)) {\n\t\t\t\t\tif ($def[DB_FIELD_TYPE] == DB_DEF_STRING) {\n\t\t\t\t\t\t$index[$name] = $def[DB_INDEX];\n                    } else {\n                        $index[$name] = 0;\n                    }\n                }\n                if (isset($def[DB_UNIQUE])) {\n                    if (!isset($unique[$def[DB_UNIQUE]]))\n                        $unique[$def[DB_UNIQUE]] = array();\n                    $unique[$def[DB_UNIQUE]][] = $name;\n                }\n            }\n        }\n        $sql = substr($sql, 0, -1);\n        if (count($primary)) {\n            $sql .= \", PRIMARY KEY ( `\" . implode(\"` , `\", $primary) . \"`)\";\n        }\n        if (count($fulltext)) {\n//            $sql .= \", FULLTEXT ( `\" . implode(\"` , `\", $fulltext) . \"`)\";\n            $sql .= \", FULLTEXT `\" . $fulltext[0] . \"`\" . \"( `\" . implode(\"` , `\", $fulltext) . \"`)\";\n        }\n        if (!empty($unique)) foreach ($unique as $key => $value) {\n            $sql .= \", UNIQUE `\" . $key . \"` ( `\" . implode(\"` , `\", $value) . \"`)\";\n        }\n        foreach ($index as $key => $value) {\n            $sql .= \", INDEX (`\" . $key . \"`\" . (($value > 0) ? \"(\" . $value . \")\" : \"\") . \")\";\n        }\n        $sql .= \")\";\n        if (defined(DB_ENCODING)) {\n            $sql .= \" ENGINE = MYISAM CHARACTER SET \" . DB_ENCODING;\n        } else {\n            $sql .= \" ENGINE = MYISAM CHARACTER SET utf8 COLLATE utf8_unicode_ci\";\n        }\n\n        if (isset($info[DB_TABLE_COMMENT])) {\n            $sql .= \" COMMENT = '\" . $info[DB_TABLE_COMMENT] . \"'\";\n        }\n\n        @mysqli_query($this->connection, $sql);\n\n        $return = array(\n            $tablename => ($this->tableExists($tablename) ? DATABASE_TABLE_INSTALLED : DATABASE_TABLE_FAILED)\n        );\n\n        return $return;\n    }\n\n    /**\n     * Alter an existing table\n     *\n     * Alters the structure of an existing database table to conform to the passed\n     * data definition.\n     *\n     * This function abides by the Exponent Data Definition Language, and interprets\n     * its general structure for MySQL.\n     *\n     * @param string $tablename The name of the table to alter\n     * @param array $newdatadef The new data definition for the table.\n     *   This is expressed in the Exponent Data Definition Language\n     * @param array $info Information about the table itself.\n     * @param bool $aggressive Whether or not to aggressively update the table definition.\n     *   An aggressive update will drop columns in the table that are not in the Exponent definition.\n     * @return array\n     */\n    function alterTable($tablename, $newdatadef, $info, $aggressive = false) {\n        expSession::clearAllUsersSessionCache();\n        $dd = $this->getDataDefinition($tablename);\n        $modified = false;\n\n        // collect any indexes & keys to the table\n        $primary = array();\n        $fulltext = array();\n        $unique = array();\n        $index = array();\n        foreach ($newdatadef as $name=>$def) {\n            if ($def != null) {\n                if (!empty($def[DB_PRIMARY]))  $primary[] = $name;\n                if (!empty($def[DB_FULLTEXT])) $fulltext[] = $name;\n                if (isset($def[DB_INDEX]) && ($def[DB_INDEX] > 0)) {\n                    if ($def[DB_FIELD_TYPE] == DB_DEF_STRING) {\n                          $index[$name] = $def[DB_INDEX];\n                      } else {\n                          $index[$name] = 0;\n                      }\n                  }\n                  if (isset($def[DB_UNIQUE])) {\n                      if (!isset($unique[$def[DB_UNIQUE]]))\n                          $unique[$def[DB_UNIQUE]] = array();\n                      $unique[$def[DB_UNIQUE]][] = $name;\n                }\n            }\n        }\n\n        //Drop any old columns from the table if aggressive mode is set.\n        if ($aggressive) {\n            //update primary keys to 'release' columns\n            $sql = \"ALTER IGNORE TABLE `\" . $this->prefix . \"$tablename` \";\n            if (count($primary)) {\n                $sql .= \" DROP PRIMARY KEY, ADD PRIMARY KEY ( `\" . implode(\"` , `\",$primary) . \"` )\";\n            }\n            @mysqli_query($this->connection, $sql);\n\n            if (is_array($newdatadef) && is_array($dd)) {\n                $oldcols = @array_diff_assoc($dd, $newdatadef);\n                if (count($oldcols)) {\n                    $modified = true;\n                    $sql = \"ALTER TABLE `\" . $this->prefix . \"$tablename` \";\n                    foreach ($oldcols as $name => $def) {\n                        $sql .= \" DROP COLUMN \" . $name . \",\";\n                    }\n                    $sql = substr($sql, 0, -1);\n                    @mysqli_query($this->connection, $sql);\n                }\n            }\n        }\n\n        //Add any new columns to the table\n        if (is_array($newdatadef) && is_array($dd)) {\n            $diff = @array_diff_assoc($newdatadef, $dd);\n            if (count($diff)) {\n                $modified = true;\n                $sql = \"ALTER TABLE `\" . $this->prefix . \"$tablename` \";\n                foreach ($diff as $name => $def) {\n                    $sql .= \" ADD COLUMN (\" . $this->fieldSQL($name, $def) . \"),\";\n                }\n                $sql = substr($sql, 0, -1);\n                @mysqli_query($this->connection, $sql);\n            }\n\n            // alter any existing columns here\n            $diff_c = @expCore::array_diff_assoc_recursive($newdatadef, $dd);\n            $sql = \"ALTER TABLE `\" . $this->prefix . \"$tablename` \";\n            $changed = false;\n            if (is_array($diff_c)) {\n                foreach ($diff_c as $name => $def) {\n                    if (!array_key_exists($name, $diff) && (isset($def[DB_FIELD_TYPE]) || isset($def[DB_FIELD_LEN]) || isset($def[DB_DEFAULT]) || isset($def[DB_INCREMENT]))) {  // wasn't a new column\n                        if ($dd[$name][DB_FIELD_TYPE] == DB_DEF_STRING) {\n                            //check for actual lengths vs. exp placeholder lengths\n                            $newlen = $newdatadef[$name][DB_FIELD_LEN];\n                            $len = $dd[$name][DB_FIELD_LEN];\n                            if ($len >= 16777216 && $newlen >= 16777216) {\n                                continue;\n                            }\n                            if ($len >= 65536 && $newlen >= 65536) {\n                                continue;\n                            }\n                            if ($len >= 256 && $newlen >= 256) {\n                                continue;\n                            }\n                        }\n                        $changed = true;\n                        $sql .= ' MODIFY ' . $this->fieldSQL($name,$newdatadef[$name]) . \",\";\n                    }\n                }\n            }\n            if ($changed) {\n                $modified = true;\n                $sql = substr($sql, 0, -1);\n                @mysqli_query($this->connection, $sql);\n            }\n        }\n\n        //Add any new indexes & keys to the table\n        $sql = \"ALTER\" . (empty($aggressive) ? \"\" : \" IGNORE\") . \" TABLE `\" . $this->prefix . \"$tablename` \";\n\n        $sep = false;\n        if (count($primary)) {\n            $sql .= \" DROP PRIMARY KEY, ADD PRIMARY KEY ( `\" . implode(\"` , `\",$primary) . \"` )\";\n            $sep = true;\n        }\n        if (count($fulltext)) {\n            if ($sep) $sql .= ' ,';\n//            $sql .= \" ADD FULLTEXT ( `\" . implode(\"` , `\", $fulltext) . \"`)\";\n            // drop the index first so we don't get dupes\n            $drop = \"DROP INDEX \" . $fulltext[0] . \" ON \" . $this->prefix . $tablename;\n            @mysqli_query($this->connection, $drop);\n            $sql .= \" ADD FULLTEXT `\" . $fulltext[0] . \"`\" . \"( `\" . implode(\"` , `\", $fulltext) . \"`)\";\n            $sep = true;\n        }\n        if (!empty($unique)) foreach ($unique as $key=>$value) {\n            if ($sep) $sql .= ' ,';\n            $sql .= \", ADD UNIQUE `\".$key.\"` ( `\" . implode(\"` , `\",$value) . \" `)\";\n            $sep = true;\n        }\n\n        foreach ($index as $key => $value) {\n            // drop the index first so we don't get dupes\n            $drop = \"DROP INDEX \" . $key . \" ON \" . $this->prefix . $tablename;\n            @mysqli_query($this->connection, $drop);\n\n            // re-add the index\n            if ($sep) $sql .= ' ,';\n//            $sql .= \" ADD INDEX (`\" . $key . \"`)\";  //FIXME we don't add column length??\n            $sql .= \" ADD INDEX (`\" . $key . \"`\" . (($value > 0) ? \"(\" . $value . \")\" : \"\") . \")\";\n            $sep = true;\n        }\n        @mysqli_query($this->connection, $sql);\n\n        //Get the return code\n        $return = array(\n            $tablename => ($modified ? TABLE_ALTER_SUCCEEDED : TABLE_ALTER_NOT_NEEDED)\n        );\n\n        return $return;\n    }\n\n    /**\n     * Drop a table from the database\n     *\n     * Removes an existing table from the database. Returns true if the table was dropped, false if there\n     * was an error returned by the MySQL server.\n     *\n     * @param string $table The name of the table to drop.\n     * @return bool\n     */\n    function dropTable($table) {\n        return @mysqli_query($this->connection, \"DROP TABLE `\" . $this->prefix . \"$table`\") !== false;\n    }\n\n    /**\n     * Run raw SQL.  Returns true if the query succeeded, and false\n     *   if an error was returned from the MySQL server.\n     *\n     * <div style=\"color:red\">If you can help it, do not use this function.  It presents Database Portability Issues.</div>\n     *\n     * Runs a straight SQL query on the database.  This is not a\n     * very portable way of dealing with the database, and is only\n     * provided as a last resort.\n     *\n     * @param string $sql The SQL query to run\n\t * @param bool $escape Indicates if the query will be escape\n     * @return mixed\n     */\n    function sql($sql, $escape = true) {\n\t\tif($escape == true) {\n\t\t\t$res = @mysqli_query($this->connection, mysqli_real_escape_string($this->connection, $sql));\n\t\t} else {\n\t\t\t$res = @mysqli_query($this->connection, $sql);\n\t\t}\n        return $res;\n    }\n\n\t/**\n\t * Update a column in all records in a table\n\t *\n\t * @param  $table\n\t * @param  $col\n\t * @param $val\n\t * @param int|null $where\n\t * @return void\n\t */\n    function columnUpdate($table, $col, $val, $where=1) {         \n        $res = @mysqli_query($this->connection, \"UPDATE `\" . $this->prefix . \"$table` SET `$col`='\" . $val . \"' WHERE $where\");\n        /*if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0; $i < mysqli_num_rows($res); $i++)\n            $objects[] = mysqli_fetch_object($res);*/\n        //return $objects;\n    }\n\n    /**\n     * Select a series of objects\n     *\n     * Selects a set of objects from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of objects, in any random order.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *   is specified as null, then no criteria is applied, and all objects are\n     *   returned\n     * @param null $orderby\n     * @return array\n     */\n    function selectObjects($table, $where = null, $orderby = null) {\n        if ($where == null)\n            $where = \"1\";\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $objects[] = mysqli_fetch_object($res);\n        return $objects;\n    }\n\n\t/**\n\t * @param  $terms\n\t * @param null $where\n\t * @return array\n\t */\n    function selectSearch($terms, $where = null) {\n        if ($where == null)\n            $where = \"1\";\n\n        $sql = \"SELECT *, MATCH (s.title, s.body) AGAINST ('\" . $terms . \"*') as score from \" . $this->prefix . \"search as s \";\n        $sql .= \"WHERE MATCH (title, body) against ('\" . $terms . \"*' IN BOOLEAN MODE) ORDER BY score DESC\";\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $objects[] = mysqli_fetch_object($res);\n        return $objects;\n    }\n\n\t/**\n\t * @param null $colsA\n\t * @param null $colsB\n\t * @param  $tableA\n\t * @param  $tableB\n\t * @param  $keyA\n\t * @param null $keyB\n\t * @param null $where\n\t * @param null $orderby\n\t * @return array'\n\t */\n    function selectAndJoinObjects($colsA=null, $colsB=null, $tableA, $tableB, $keyA, $keyB=null, $where = null, $orderby = null) {\n        $sql = 'SELECT ';\n        if ($colsA != null) {\n            if (!is_array($colsA)) {\n                $sql .= 'a.' . $colsA . ', ';\n            } else {\n                foreach ($colsA as $colA) {\n                    $sql .= 'a.' . $colA . ', ';\n                }\n            }\n        } else {\n            $sql .= ' a.*, ';\n        }\n\n        if ($colsB != null) {\n            if (!is_array($colsB)) {\n                $sql .= 'b.' . $colsB . ' ';\n            } else {\n                $i = 1;\n                foreach ($colsB as $colB) {\n                    $sql .= 'b.' . $colB;\n                    if ($i < count($colsB))\n                        $sql .= ', ';\n                    $i++;\n                }\n            }\n        } else {\n            $sql .= ' b.* ';\n        }\n\n        $sql .= ' FROM ' . $this->prefix . $tableA . ' a JOIN ' . $this->prefix . $tableB . ' b ';\n        $sql .= is_null($keyB) ? 'USING(' . $keyA . ')' : 'ON a.' . $keyA . ' = b.' . $keyB;\n\n        if ($where == null)\n            $where = \"1\";\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n\n        $res = @mysqli_query($this->connection, $sql . \" WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $objects[] = mysqli_fetch_object($res);\n        return $objects;\n    }\n\n\t/**\n     * Select a single object by sql\n     *\n\t * @param  $sql\n\t * @return null|void\n\t */\n    function selectObjectBySql($sql) {\n        //$logFile = \"C:\\\\xampp\\\\htdocs\\\\supserg\\\\tmp\\\\queryLog.txt\";\n        //$lfh = fopen($logFile, 'a');\n        //fwrite($lfh, $sql . \"\\n\");    \n        //fclose($lfh);                 \n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return null;\n        return mysqli_fetch_object($res);\n    }\n\n\t/**\n     * Select a series of objects by sql\n     *\n\t * @param  $sql\n\t * @return array\n\t */\n    function selectObjectsBySql($sql) {\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $objects[] = mysqli_fetch_object($res);\n        return $objects;\n    }\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @param null $orderby\n\t * @param bool $distinct\n\t * @return array\n\t */\n    function selectColumn($table, $col, $where = null, $orderby = null, $distinct=false) {\n        if ($where == null)\n            $where = \"1\";\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n        $dist = empty($distinct) ? '' : 'DISTINCT ';\n\n        $res = @mysqli_query($this->connection, \"SELECT \" . $dist . $col . \" FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $resarray = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $row = mysqli_fetch_array($res, MYSQLI_NUM);\n            $resarray[$i] = $row[0];\n        }\n        return $resarray;\n    }\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return int\n\t */\n    function selectSum($table, $col, $where = null) {\n        if ($where == null)\n            $where = \"1\";\n\n        $res = @mysqli_query($this->connection, \"SELECT SUM(\" . $col . \") FROM `\" . $this->prefix . \"$table` WHERE $where\");\n        if ($res == null)\n            return 0;\n        $resarray = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $row = mysqli_fetch_array($res, MYSQLI_NUM);\n            $resarray[$i] = $row[0];\n        }\n        return $resarray[0];\n    }\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @param null $orderby\n\t * @return array\n\t */\n    function selectDropdown($table, $col, $where = null, $orderby = null) {\n        if ($where == null)\n            $where = \"1\";\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $resarray = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $row = mysqli_fetch_object($res);\n            $resarray[$row->id] = $row->$col;\n        }\n        return $resarray;\n    }\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return null\n\t */\n    function selectValue($table, $col, $where=null) {\n        if ($where == null)\n            $where = \"1\";\n        $sql = \"SELECT \" . $col . \" FROM `\" . $this->prefix . \"$table` WHERE $where LIMIT 0,1\";\n        $res = @mysqli_query($this->connection, $sql);\n\n        if ($res == null)\n            return null;\n        $obj = mysqli_fetch_object($res);\n        if (is_object($obj)) {\n            return $obj->$col;\n        } else {\n            return null;\n        }\n    }\n\n\t/**\n\t * @param  $sql\n\t * @return null\n\t */\n    function selectValueBySql($sql) {\n        $res = $this->sql($sql);\n        if ($res == null)\n            return null;\n        $r = mysqli_fetch_row($res);\n        if (is_array($r)) {\n            return $r[0];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Select a series of objects, and return by ID\n     *\n     * Selects a set of objects from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table. Returns an\n     * array of objects, in any random order.  The indices of the array\n     * are the IDs of the objects.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *   is specified as null, then no criteria is applied, and all objects are\n     *   returned\n     * @param null $orderby\n     * @return array\n     */\n    function selectObjectsIndexedArray($table, $where = null, $orderby = null) {\n        if ($where == null)\n            $where = \"1\";\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $o = mysqli_fetch_object($res);\n            $objects[$o->id] = $o;\n        }\n        return $objects;\n    }\n\n    /**\n     * Count Objects matching a given criteria\n     *\n     * @param string $table The name of the table to count objects in.\n     * @param string $where Criteria for counting.\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return int\n     */\n    function countObjects($table, $where = null, $is_revisioned=false, $needs_approval=false) {\n        if ($where == null)\n            $where = \"1\";\n        $as = '';\n        if ($is_revisioned) {\n   //            $where.= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE $where)\";\n            $where .= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE id = rev.id \";\n            if ($needs_approval) $where .= ' AND (approved=1 OR poster=' . $needs_approval . ' OR editor=' . $needs_approval . ')';\n            $where .= \")\";\n            $as = ' AS rev';\n        }\n        $res = @mysqli_query($this->connection, \"SELECT COUNT(*) as c FROM `\" . $this->prefix . \"$table`\" . $as . \" WHERE $where\");\n        if ($res == null)\n            return 0;\n        $obj = mysqli_fetch_object($res);\n        return $obj->c;\n    }\n\n    /**\n     * Count Objects matching a given criteria using raw sql\n     *\n     * @param string $sql The sql query to be run\n     * @return int\n     */\n    function countObjectsBySql($sql) {\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return 0;\n        $obj = mysqli_fetch_object($res);\n        return $obj->c;\n    }\n\n    /**\n     * Count Objects matching a given criteria using raw sql\n     *\n     * @param string $sql The sql query to be run\n     * @return int|void\n     */\n    function queryRows($sql) {\n        $res = @mysqli_query($this->connection, $sql);\n        return empty($res) ? 0 : mysqli_num_rows($res);\n    }\n\n    /**\n     * Select a single object.\n     *\n     * Selects an objects from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a single record from a database table. Returns the\n     * first record/object found (in the case of multiple-result queries,\n     * there is no way to determine which of the set will be returned).\n     * If no record(s) match the query, null is returned.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.\n     * @return object/null|void\n     */\n    function selectObject($table, $where) {\n        $res = mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where LIMIT 0,1\");\n        if ($res == null)\n            return null;\n        return mysqli_fetch_object($res);\n    }\n\n\t/**\n\t * @param $table\n\t * @param string $lockType\n\t * @return mixed\n\t */\n\tfunction lockTable($table,$lockType=\"WRITE\") {\n        $sql = \"LOCK TABLES `\" . $this->prefix . \"$table` $lockType\";\n       \n        $res = mysqli_query($this->connection, $sql); \n        return $res;\n    }\n\n\t/**\n\t * @return mixed\n\t */\n\tfunction unlockTables() {\n        $sql = \"UNLOCK TABLES\";\n        \n        $res = mysqli_query($this->connection, $sql);\n        return $res;\n    }\n    \n\t/**\n     * Insert an Object into some table in the Database\n     *\n     * This method will return the ID assigned to the new record by MySQL.  Note that\n     * object attributes starting with an underscore ('_') will be ignored and NOT inserted\n     * into the table as a field value.\n     *\n     * @param object $object The object to insert.\n     * @param string $table The logical table name to insert into.  This does not include the table prefix, which\n     *    is automagically prepended for you.\n     * @return int|void\n     */\n    function insertObject($object, $table) {\n        //if ($table==\"text\") eDebug($object,true); \n        $sql = \"INSERT INTO `\" . $this->prefix . \"$table` (\";\n        $values = \") VALUES (\";\n        foreach (get_object_vars($object) as $var => $val) {\n            //We do not want to save any fields that start with an '_'\n            if ($var{0} != '_') {\n                $sql .= \"`$var`,\";\n                if ($values != \") VALUES (\") {\n                    $values .= \",\";\n                }\n                $values .= \"'\" . mysqli_real_escape_string($this->connection, $val) . \"'\";\n            }\n        }\n        $sql = substr($sql, 0, -1) . substr($values, 0) . \")\";\n        //if($table=='text')eDebug($sql,true);\n        if (@mysqli_query($this->connection, $sql) != false) {\n            $id = mysqli_insert_id($this->connection);\n            return $id;\n        } else\n            return 0;\n    }\n\n    /**\n     * Delete one or more objects from the given table.\n     *\n     * @param string $table The name of the table to delete from.\n     * @param string $where Criteria for determining which record(s) to delete.\n     * @return mixed\n     */\n    function delete($table, $where = null) {\n        if ($where != null) {\n            $res = @mysqli_query($this->connection, \"DELETE FROM `\" . $this->prefix . \"$table` WHERE $where\");\n            return $res;\n        } else {\n            $res = @mysqli_query($this->connection, \"TRUNCATE TABLE `\" . $this->prefix . \"$table`\");\n            return $res;\n        }\n    }\n\n    /**\n     * Update one or more objects in the database.\n     *\n     * This function will only update the attributes of the resulting record(s)\n     * that are also member attributes of the $object object.\n     *\n     * @param object $object An object specifying the fields and values for updating.\n     *    In most cases, this will be the altered object originally returned from one of\n     *    the select* methods.\n     * @param string $table The table to update in.\n     * @param string $where Optional criteria used to narrow the result set.\n     * @param string $identifier\n     * @param bool $is_revisioned\n     * @return bool|int|void\n     */\n    function updateObject($object, $table, $where=null, $identifier='id', $is_revisioned=false) {\n\n        if ($is_revisioned) {\n            $object->revision_id++;\n            //if ($table==\"text\") eDebug($object);\n            $res = $this->insertObject($object, $table);\n            //if ($table==\"text\") eDebug($object,true); \n            $this->trim_revisions($table, $object->$identifier, WORKFLOW_REVISION_LIMIT);\n            return $res;\n        }\n        $sql = \"UPDATE \" . $this->prefix . \"$table SET \";\n        foreach (get_object_vars($object) as $var => $val) {\n            //We do not want to save any fields that start with an '_'\n            //if($is_revisioned && $var=='revision_id') $val++;\n            if ($var{0} != '_') {\n                if (is_array($val) || is_object($val)) {\n                    $val = serialize($val);   \n                    $sql .= \"`$var`='\".$val.\"',\";\n                } else {\n                    $sql .= \"`$var`='\".mysqli_real_escape_string($this->connection,$val).\"',\";\n                }\n            }\n        }\n        $sql = substr($sql, 0, -1) . \" WHERE \";\n        if ($where != null)\n            $sql .= $where;\n        else\n            $sql .= \"`\" . $identifier . \"`=\" . $object->$identifier;\n        //if ($table == 'text') eDebug($sql,true);        \n        $res = (@mysqli_query($this->connection, $sql) != false);\n        return $res;\n    }\n\n\t/**\n\t * Find the maximum value of a field.  This is similar to a standard\n\t * SELECT MAX(field) ... query.\n\t *\n\t * @param string $table The name of the table to select from.\n\t * @param string $attribute The attribute name to find a maximum value for.\n\t * @param string $groupfields A comma-separated list of fields (or a single field) name, used\n\t *    for a GROUP BY clause.  This can also be passed as an array of fields.\n\t * @param string $where Optional criteria for narrowing the result set.\n\t * @return mixed\n\t */\n    function max($table, $attribute, $groupfields = null, $where = null) {\n        if (is_array($groupfields))\n            $groupfields = implode(\",\", $groupfields);\n        $sql = \"SELECT MAX($attribute) as fieldmax FROM `\" . $this->prefix . \"$table`\";\n        if ($where != null)\n            $sql .= \" WHERE $where\";\n        if ($groupfields != null)\n            $sql .= \" GROUP BY $groupfields\";\n\n        $res = @mysqli_query($this->connection, $sql);\n\n        if ($res != null)\n            $res = mysqli_fetch_object($res);\n        if (!$res)\n            return null;\n        return $res->fieldmax;\n    }\n\n\t/**\n\t * Find the minimum value of a field.  This is similar to a standard\n\t * SELECT MIN(field) ... query.\n\t *\n\t * @internal Internal\n\t * @param string $table The name of the table to select from.\n\t * @param string $attribute The attribute name to find a minimum value for.\n\t * @param string $groupfields A comma-separated list of fields (or a single field) name, used\n\t *    for a GROUP BY clause.  This can also be passed as an array of fields.\n\t * @param string $where Optional criteria for narrowing the result set.\n\t * @return null\n\t */\n    function min($table, $attribute, $groupfields = null, $where = null) {\n        if (is_array($groupfields))\n            $groupfields = implode(\",\", $groupfields);\n        $sql = \"SELECT MIN($attribute) as fieldmin FROM `\" . $this->prefix . \"$table`\";\n        if ($where != null)\n            $sql .= \" WHERE $where\";\n        if ($groupfields != null)\n            $sql .= \" GROUP BY $groupfields\";\n\n        $res = @mysqli_query($this->connection, $sql);\n\n        if ($res != null)\n            $res = mysqli_fetch_object($res);\n        if (!$res)\n            return null;\n        return $res->fieldmin;\n    }\n\n    /**\n     * Increment a numeric table field in a table.\n     *\n     * @param string $table The name of the table to increment in.\n     * @param string $field The field to increment.\n     * @param integer $step The step value.  Usually 1.  This can be negative, to\n     *    decrement, but the decrement() method is preferred, for readability.\n     * @param string $where Optional criteria to determine which records to update.\n     * @return mixed\n     */\n    function increment($table, $field, $step, $where = null) {\n        if ($where == null)\n            $where = \"1\";\n        $sql = \"UPDATE `\" . $this->prefix . \"$table` SET `$field`=`$field`+$step WHERE $where\";\n        return @mysqli_query($this->connection, $sql);\n    }\n\n    /**\n     * Check to see if the named table exists in the database.\n     * Returns true if the table exists, and false if it doesn't.\n     *\n     * @param string $table Name of the table to look for.\n     * @return bool\n     */\n    function tableExists($table) {\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` LIMIT 0,1\");\n        return ($res != null);\n    }\n\n    /**\n     * Get a list of all tables in the database.  Optionally, only the tables\n     * in the current logical database (tables with the same prefix) can\n     * be retrieved.\n     *\n     * @param bool $prefixed_only Whether to return only the tables\n     *    for the logical database, or all tables in the physical database.\n     * @return array\n     */\n    function getTables($prefixed_only=true) {\n        $res = @mysqli_query($this->connection, \"SHOW TABLES\");\n        $tables = array();\n        for ($i = 0; $res && $i < mysqli_num_rows($res); $i++) {\n            $tmp = mysqli_fetch_array($res);\n            if ($prefixed_only && substr($tmp[0], 0, strlen($this->prefix)) == $this->prefix) {\n                $tables[] = $tmp[0];\n            } else if (!$prefixed_only) {\n                $tables[] = $tmp[0];\n            }\n        }\n        return $tables;\n    }\n\n    /**\n     * Runs whatever table optimization routines the database engine supports.\n     *\n     * @param string $table The name of the table to optimize.\n     * @return bool\n     */\n    function optimize($table) {\n        $res = (@mysqli_query($this->connection, \"OPTIMIZE TABLE `\" . $this->prefix . \"$table`\") != false);\n        return $res;\n    }\n\n    /**\n     * Retrieve table information for a named table.\n     * Returns an object, with the following attributes:\n     * <ul>\n     * <li><b>rows</b> -- The number of rows in the table.</li>\n     * <li><b>average_row_length</b> -- The average storage size of a row in the table.</li>\n     * <li><b>data_total</b> -- How much total disk space is used by the table.</li>\n     * <li><b>data_overhead</b> -- How much storage space in the table is unused (for compacting purposes)</li>\n     * </ul>\n     * @param  $table\n     * @return null\n     */\n    function tableInfo($table) {\n        $sql = \"SHOW TABLE STATUS LIKE '\" . $this->prefix . \"$table'\";\n        $res = @mysqli_query($this->connection, $sql);\n        if (!$res)\n            return null;\n        return $this->translateTableStatus(mysqli_fetch_object($res));\n    }\n\n    /**\n     * Returns table information for all tables in the database.\n     * This function effectively calls tableInfo() on each table found.\n     * @return array\n     */\n    function databaseInfo() {\n//        $sql = \"SHOW TABLE STATUS\";\n        $res = @mysqli_query($this->connection, \"SHOW TABLE STATUS LIKE '\" . $this->prefix . \"%'\");\n        $info = array();\n        for ($i = 0; $res && $i < mysqli_num_rows($res); $i++) {\n            $obj = mysqli_fetch_object($res);\n            $info[substr($obj->Name, strlen($this->prefix))] = $this->translateTableStatus($obj);\n        }\n        return $info;\n    }\n\n\t/**\n\t * @param  $table\n\t * @return array\n\t */\n    function describeTable($table) {\n        if (!$this->tableExists($table))\n            return array();\n        $res = @mysqli_query($this->connection, \"DESCRIBE `\" . $this->prefix . \"$table`\");\n        $dd = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $fieldObj = mysqli_fetch_object($res);\n\n            $fieldObj->ExpFieldType = $this->getDDFieldType($fieldObj);\n            if ($fieldObj->ExpFieldType == DB_DEF_STRING) {\n                $fieldObj->ExpFieldLength = $this->getDDStringLen($fieldObj);\n            }\n\n            $dd[$fieldObj->Field] = $fieldObj;\n        }\n\n        return $dd;\n    }\n\n    /**\n     * Build a data definition from a pre-existing table.  This is used\n     * to intelligently alter tables that have already been installed.\n     *\n     * @param string $table The name of the table to get a data definition for.\n     * @return array|null\n     */\n    function getDataDefinition($table) {\n        // make sure the table exists\n        if (!$this->tableExists($table))\n            return array();\n\n        // check if we have a cached version of this table description.\n        if (expSession::issetTableCache($table))\n            return expSession::getTableCache($table);\n\n        $res = @mysqli_query($this->connection, \"DESCRIBE `\" . $this->prefix . \"$table`\");\n        $dd = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $fieldObj = mysqli_fetch_object($res);\n\n            $field = array();\n            $field[DB_FIELD_TYPE] = $this->getDDFieldType($fieldObj);\n            if ($field[DB_FIELD_TYPE] == DB_DEF_STRING) {\n                $field[DB_FIELD_LEN] = $this->getDDStringLen($fieldObj);\n            }\n            //additional field attributes\n            $default = $this->getDDDefault($fieldObj);\n            if ($default != null)\n                $field[DB_DEFAULT] = $default;\n            $field[DB_INCREMENT] = $this->getDDAutoIncrement($fieldObj);\n            $key = $this->getDDKey($fieldObj);\n            if ($key)\n                $field[$key] = true;\n\n            $dd[$fieldObj->Field] = $field;\n        }\n\n        // save this table description to cache so we don't need to go the DB next time.\n        expSession::setTableCache($table, $dd);\n        return $dd;\n    }\n\n    /**\n     * Returns an error message from the database server.  This is intended to be\n     * used by the implementers of the database wrapper, so that certain\n     * cryptic error messages can be reworded.\n     * @return string\n     */\n    function error() {\n        if ($this->connection && mysqli_errno($this->connection) != 0) {\n            $errno = mysqli_errno($this->connection);\n            switch ($errno) {\n                case 1046:\n                    return \"1046 : \".gt(\"Selected database does not exist\");\n                default:\n                    return mysqli_errno($this->connection) . \" : \" . mysqli_error($this->connection);\n            }\n        } else if ($this->connection == false) {\n            return gt(\"Unable to connect to database server\");\n        } else\n            return \"\";\n    }\n\n    /**\n     * Checks whether the database connection has experienced an error.\n     * @return bool\n     */\n    function inError() {\n        return ($this->connection != null && mysqli_errno($this->connection) != 0);\n    }\n\n\t/**\n\t * Unescape a string based on the database connection\n\t * @param $string\n\t * @return string\n\t */\n\tfunction escapeString($string) {\n\t    return (mysqli_real_escape_string($this->connection, $string));\n\t}\n\n    /**\n     * Select an array of arrays\n     *\n     * Selects a set of arrays from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of arrays, in any random order.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *   is specified as null, then no criteria is applied, and all objects are\n     *   returned\n     * @param string $orderby\n     * @return array\n     */\n    function selectArrays($table, $where = null, $orderby = null) {\n        if ($where == null)\n            $where = \"1\";\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $arrays = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $arrays[] = mysqli_fetch_assoc($res);\n        return $arrays;\n    }\n\n    /**\n     * Select an array of arrays\n     *\n     * Selects a set of arrays from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of arrays, in any random order.\n     *\n     * @param string $sql The name of the table/object to look at\n     * @return array\n     */\n    function selectArraysBySql($sql) {        \n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return array();\n        $arrays = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $arrays[] = mysqli_fetch_assoc($res);\n        return $arrays;\n    }\n\n    /**\n     * Select a record from the database as an array\n     * Selects a set of arrays from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of arrays, in any random order.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *                      is specified as null, then no criteria is applied, and all objects are\n     *                      returned\n     * @param null   $orderby\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return array|void\n     */\n    function selectArray($table, $where = null, $orderby = null, $is_revisioned=false, $needs_approval=false) {\n        if ($where == null)\n            $where = \"1\";\n        $as = '';\n        if ($is_revisioned) {\n   //            $where.= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE $where)\";\n            $where .= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE id = rev.id \";\n            if ($needs_approval) $where .= ' AND (approved=1 OR poster=' . $needs_approval . ' OR editor=' . $needs_approval . ')';\n            $where .= \")\";\n            $as = ' AS rev';\n        }\n        $orderby = empty($orderby) ? '' : \"ORDER BY \" . $orderby;\n        $sql = \"SELECT * FROM `\" . $this->prefix . \"$table`\" . $as . \" WHERE $where $orderby LIMIT 0,1\";\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return array();\n        return mysqli_fetch_assoc($res);\n    }\n\n    /**\n     * Instantiate objects from selected records from the database\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *                      is specified as null, then no criteria is applied, and all objects are\n     *                      returned\n     * @param string $classname\n     * @param bool   $get_assoc\n     * @param bool   $get_attached\n     * @param array  $except\n     * @param bool   $cascade_except\n     * @param null   $order\n     * @param null   $limitsql\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return array\n     */\n    function selectExpObjects($table, $where=null, $classname, $get_assoc=true, $get_attached=true, $except=array(), $cascade_except=false, $order=null, $limitsql=null, $is_revisioned=false, $needs_approval=false) {\n        if ($where == null)\n            $where = \"1\";\n        $as = '';\n        if ($is_revisioned) {\n   //            $where.= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE $where)\";\n            $where .= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE id = rev.id \";\n            if ($needs_approval) $where .= ' AND (approved=1 OR poster=' . $needs_approval . ' OR editor=' . $needs_approval . ')';\n            $where .= \")\";\n            $as = ' AS rev';\n        }\n        $sql = \"SELECT * FROM `\" . $this->prefix . \"$table`\" . $as . \" WHERE $where\";\n        $sql .= empty($order) ? '' : ' ORDER BY ' . $order;\n        $sql .= empty($limitsql) ? '' : $limitsql;\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return array();\n        $arrays = array();\n        $numrows = mysqli_num_rows($res);\n        for ($i = 0; $i < $numrows; $i++) {  //FIXME this can run us out of memory with too many rows\n            $assArr = mysqli_fetch_assoc($res);\n            $assArr['except'] = $except;\n            if($cascade_except) $assArr['cascade_except'] = $cascade_except;\n            $arrays[] = new $classname($assArr, $get_assoc, $get_attached);\n        }\n        return $arrays;\n    }\n\n    /**\n     * Instantiate objects from selected records from the database\n\n     * @param string $sql The sql statement to run on the model/classname\n     * @param string $classname Can be $this->baseclassname\n     * Returns an array of fields\n     * @param bool $get_assoc\n     * @param bool $get_attached\n     * @return array\n     */\n    function selectExpObjectsBySql($sql, $classname, $get_assoc=true, $get_attached=true) {\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return array();\n        $arrays = array();\n        $numrows = mysqli_num_rows($res);\n        for ($i = 0; $i < $numrows; $i++)\n            $arrays[] = new $classname(mysqli_fetch_assoc($res), true, true);\n        return $arrays;\n    }\n\n\t/**\n\t * This function returns all the text columns in the given table\n\t * @param $table\n\t * @return array\n\t */\n\tfunction getTextColumns($table) {\n\t\t$sql = \"SHOW COLUMNS FROM \" . $this->prefix.$table . \" WHERE type = 'text' OR type like 'varchar%'\";\n\t\t$res = @mysqli_query($this->connection, $sql);\n\t\tif ($res == null)\n            return array();\n\t\t$records = array();\n\t\twhile($row = mysqli_fetch_object($res)) {\n\t\t\t$records[] = $row->Field;\n\t\t}\n\t\t\n\t\treturn $records;\n\t}\n\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the expDatabase subsystem\n * Handles all database abstraction in Exponent.\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\nclass expDatabase {\n\n\t/**\n\t * Connect to the Exponent database\n\t *\n\t * This function attempts to connect to the exponent database,\n\t * and then returns the database object to the caller.\n\t *\n\t * @param string $username the database username\n\t * @param string $password the database password\n\t * @param string $hostname the url of the database server\n\t * @param string $database the name of the database\n\t * @param string $dbclass\n\t * @param bool $new\n\t * @return \\database the database object\n\t */\n\tpublic static function connect($username,$password,$hostname,$database,$dbclass = '',$new=false,$log=null) {\n\t\tif (!defined('DB_ENGINE')) {\n\t\t\t$backends = array_keys(self::backends(1));\n\t\t\tif (count($backends)) {\n\t\t\t\tdefine('DB_ENGINE',$backends[0]);\n\t\t\t} else {\n\t\t\t\tdefine('DB_ENGINE','NOTSUPPORTED');\n\t\t\t}\n\t\t}\n\t\t(include_once(BASE.'framework/core/subsystems/database/'.DB_ENGINE.'.php')) or exit(gt('None of the installed Exponent Database Backends will work with this server\\'s version of PHP.'));\n\t\tif ($dbclass == '' || $dbclass == null) $dbclass = DB_ENGINE;\n\t\t(include_once(BASE.'framework/core/subsystems/database/'.$dbclass.'.php')) or exit(gt('The specified database backend').'  ('.$dbclass.') '.gt('is not supported by Exponent'));\n\t\t$dbclass .= '_database';\n\t\t$newdb = new $dbclass($username,$password,$hostname,$database,$new,$log);\n        if (!$newdb->tableExists('user')) {\n            $newdb->havedb = false;\n        }\n\t\treturn $newdb;\n\t}\n\n\t/**\n\t * List all available database backends\n\t *\n\t * This function looks for available database engines,\n\t * and then returns an array to the caller.\n\t *\n\t * @param int $valid_only\n\t * @return Array An associative array of engine identifiers.\n\t *\tThe internal engine name is the key, and the external\n\t *\tdescriptive name is the value.\n\t */\n\tpublic static function backends($valid_only = 1) {\n\t\t$options = array();\n\t\t$dh = opendir(BASE.'framework/core/subsystems/database');\n\t\twhile (($file = readdir($dh)) !== false) {\n\t\t\tif (is_file(BASE.'framework/core/subsystems/database/'.$file) && is_readable(BASE.'framework/core/subsystems/database/'.$file) && substr($file,-9,9) == '.info.php') {\n\t\t\t\t$info = include(BASE.'framework/core/subsystems/database/'.$file);\n\t\t\t\tif ($info['is_valid'] == 1 || !$valid_only) {\n\t\t\t\t\t$options[substr($file,0,-9)] = $info['name'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $options;\n\t}\n\n    public static function fix_table_names() {\n        global $db;\n\n        // fix table names\n        $tablenames = array (\n            'content_expcats'=>'content_expCats',\n            'content_expcomments'=>'content_expComments',\n            'content_expdefinablefields'=>'content_expDefinableFields',\n            'content_expdefinablefields_value'=>'content_expDefinableFields_value',\n            'content_expfiles'=>'content_expFiles',\n            'content_expratings'=>'content_expRatings',\n            'content_expsimplenote'=>'content_expSimpleNote',\n            'content_exptags'=>'content_expTags',\n            'expcats'=>'expCats',\n            'expcomments'=>'expComments',\n            'expdefinablefields'=>'expDefinableFields',\n            'expealerts'=>'expeAlerts',\n            'expealerts_temp'=>'expeAlerts_temp',\n            'expfiles'=>'expFiles',\n            'expratings'=>'expRatings',\n            'exprss'=>'expRss',\n            'expsimplenote'=>'expSimpleNote',\n            'exptags'=>'expTags',\n\t\t\t'bing_product_types_storecategories'=>'bing_product_types_storeCategories',\n\t\t\t'google_product_types_storecategories'=>'google_product_types_storeCategories',\n\t\t\t'nextag_product_types_storecategories'=>'nextag_product_types_storeCategories',\n\t\t\t'pricegrabber_product_types_storecategories'=>'pricegrabber_product_types_storeCategories',\n\t\t\t'shopping_product_types_storecategories'=>'shopping_product_types_storeCategories',\n\t\t\t'shopzilla_product_types_storecategories'=>'shopzilla_product_types_storeCategories',\n\t\t\t'crosssellitem_product'=>'crosssellItem_product',\n\t\t\t'product_storecategories'=>'product_storeCategories',\n\t\t\t'storecategories'=>'storeCategories',\n        );\n\n        $renamed = array();\n        foreach ($tablenames as $oldtablename=>$newtablename) {\n            if (!$db->tableExists($newtablename)) {\n                $db->sql('RENAME TABLE '.$db->prefix.$oldtablename.' TO '.$db->prefix.$newtablename);\n                $renamed[] = $newtablename;\n            }\n        }\n        return $renamed;\n    }\n\n    public static function install_dbtables($aggressive=false, $workflow=ENABLE_WORKFLOW) {\n   \t    global $db;\n\n   \t\texpSession::clearAllUsersSessionCache();\n   \t\t$tables = array();\n\n   \t\t// first the core definitions\n   \t\t$coredefs = BASE.'framework/core/definitions';\n   \t\tif (is_readable($coredefs)) {\n   \t\t\t$dh = opendir($coredefs);\n   \t\t\twhile (($file = readdir($dh)) !== false) {\n   \t\t\t\tif (is_readable(\"$coredefs/$file\") && is_file(\"$coredefs/$file\") && substr($file,-4,4) == \".php\" && substr($file,-9,9) != \".info.php\") {\n   \t\t\t\t\t$tablename = substr($file,0,-4);\n   \t\t\t\t\t$dd = include(\"$coredefs/$file\");\n   \t\t\t\t\t$info = null;\n   \t\t\t\t\tif (is_readable(\"$coredefs/$tablename.info.php\")) $info = include(\"$coredefs/$tablename.info.php\");\n   \t\t\t\t\tif (!$db->tableExists($tablename)) {\n   \t\t\t\t\t\tforeach ($db->createTable($tablename, $dd, $info) as $key=>$status) {\n   \t\t\t\t\t\t\t$tables[$key] = $status;\n   \t\t\t\t\t\t}\n   \t\t\t\t\t} else {\n   \t\t\t\t\t\tforeach ($db->alterTable($tablename, $dd, $info, $aggressive) as $key=>$status) {\n//\t\t\t\t\t\t\tif (isset($tables[$key])) echo \"$tablename, $key<br>\";  //FIXME we shouldn't echo this, already installed?\n   \t\t\t\t\t\t\tif ($status == TABLE_ALTER_FAILED){\n   \t\t\t\t\t\t\t\t$tables[$key] = $status;\n   \t\t\t\t\t\t\t} else {\n   \t\t\t\t\t\t\t\t$tables[$key] = ($status == TABLE_ALTER_NOT_NEEDED ? DATABASE_TABLE_EXISTED : DATABASE_TABLE_ALTERED);\n   \t\t\t\t\t\t\t}\n\n   \t\t\t\t\t\t}\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n\n   \t\t// then search for module definitions\n   \t\t$moddefs = array(\n   \t\t\tBASE.'themes/'.DISPLAY_THEME.'/modules',\n   \t\t\tBASE.\"framework/modules\",\n   \t\t\t);\n        $models = expModules::initializeModels();\n   \t\tforeach ($moddefs as $moddef) {\n   \t\t\tif (is_readable($moddef)) {\n   \t\t\t\t$dh = opendir($moddef);\n   \t\t\t\twhile (($file = readdir($dh)) !== false) {\n   \t\t\t\t\tif (is_dir($moddef.'/'.$file) && ($file != '..' && $file != '.')) {\n   \t\t\t\t\t\t$dirpath = $moddef.'/'.$file.'/definitions';\n   \t\t\t\t\t\tif (file_exists($dirpath)) {\n   \t\t\t\t\t\t\t$def_dir = opendir($dirpath);\n   \t\t\t\t\t\t\twhile (($def = readdir($def_dir)) !== false) {\n   \t//\t\t\t\t\t\t\teDebug(\"$dirpath/$def\");\n   \t\t\t\t\t\t\t\tif (is_readable(\"$dirpath/$def\") && is_file(\"$dirpath/$def\") && substr($def,-4,4) == \".php\" && substr($def,-9,9) != \".info.php\") {\n   \t\t\t\t\t\t\t\t\t$tablename = substr($def,0,-4);\n   \t\t\t\t\t\t\t\t\t$dd = include(\"$dirpath/$def\");\n   \t\t\t\t\t\t\t\t\t$info = null;\n//                                    foreach ($models as $modelname=>$modelpath) {\n                                    $rev_aggressive = $aggressive;\n                                    // add workflow fields\n                                    if (!empty($models[substr($def,0,-4)])) {\n                                        $modelname = substr($def,0,-4);\n                                        $model = new $modelname();\n                                        if ($model->supports_revisions && $workflow) {\n                                            $dd['revision_id'] = array(\n                                                DB_FIELD_TYPE=>DB_DEF_INTEGER,\n                                                DB_PRIMARY=>true,\n                                                DB_DEFAULT=>1,\n                                            );\n                                            $dd['approved'] = array(\n                                                DB_FIELD_TYPE=>DB_DEF_BOOLEAN\n                                            );\n                                            $rev_aggressive = true;\n                                        }\n                                    }\n   \t\t\t\t\t\t\t\t\tif (is_readable(\"$dirpath/$tablename.info.php\")) $info = include(\"$dirpath/$tablename.info.php\");\n   \t\t\t\t\t\t\t\t\tif (!$db->tableExists($tablename)) {\n   \t\t\t\t\t\t\t\t\t\tforeach ($db->createTable($tablename, $dd, $info) as $key=>$status) {\n   \t\t\t\t\t\t\t\t\t\t\t$tables[$key] = $status;\n   \t\t\t\t\t\t\t\t\t\t}\n   \t\t\t\t\t\t\t\t\t} else {\n   \t\t\t\t\t\t\t\t\t\tforeach ($db->alterTable($tablename, $dd, $info, $rev_aggressive) as $key=>$status) {\n//\t\t\t\t\t\t\t\t\t\t\tif (isset($tables[$key])) echo \"$tablename, $key<br>\";  //FIXME we shouldn't echo this, already installed?\n   \t\t\t\t\t\t\t\t\t\t\tif ($status == TABLE_ALTER_FAILED){\n   \t\t\t\t\t\t\t\t\t\t\t\t$tables[$key] = $status;\n   \t\t\t\t\t\t\t\t\t\t\t} else {\n   \t\t\t\t\t\t\t\t\t\t\t\t$tables[$key] = ($status == TABLE_ALTER_NOT_NEEDED ? DATABASE_TABLE_EXISTED : DATABASE_TABLE_ALTERED);\n   \t\t\t\t\t\t\t\t\t\t\t}\n\n   \t\t\t\t\t\t\t\t\t\t}\n   \t\t\t\t\t\t\t\t\t}\n   \t\t\t\t\t\t\t\t}\n   \t\t\t\t\t\t\t}\n   \t\t\t\t\t\t}\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n   \t\treturn $tables;\n   \t}\n}\n\n/**\n* This is the class database\n*\n* This is the generic implementation of the database class.\n* @subpackage Database\n* @package Subsystems\n*/\n\nabstract class database {\n\n\t/**\n\t* @var string $connection Database connection string\n\t*/\n\tvar $connection = null;\n\t/**\n\t* @var boolean $havedb\n\t*/\n\tvar $havedb = false;\n\t/**\n\t* @var string $prefix Database prefix\n\t*/\n\tvar $prefix = \"\";\n\n\t/**\n\t * Make a connection to the Database Server\n\t *\n\t * Takes the supplied credentials (username / password) and tries to\n\t * connect to the server and select the given database.  All the rules\n\t * governing database connect also govern this method.\n\t *\n\t * @param string $username The username to connect to the server as.\n\t * @param string $password The password for $username\n\t * @param string $hostname The hostname of the database server.  If\n\t *   localhost is specified, a local socket connection will be attempted.\n\t * @param string $database The name of the database to use.  Multi-database\n\t *   sites are still not yet supported.\n\t * @param bool $new Whether or not to force the PHP connection function to establish\n\t *   a distinctly new connection handle to the server.\n\t */\n\n\t//\tfunction connect ($username, $password, $hostname, $database, $new=false) {\n\tabstract function __construct($username, $password, $hostname, $database, $new=false);\n\n\t   /**\n\t    * Create a new Table\n\t    *\n\t    * Creates a new database table, according to the passed data definition.\n\t    *\n\t    * This function abides by the Exponent Data Definition Language, and interprets\n\t    * its general structure for databases.\n\t    *\n\t    * @param string $tablename The name of the table to create\n\t    * @param array $datadef The data definition to create, expressed in\n\t    *   the Exponent Data Definition Language.\n\t    * @param array $info Information about the table itself.\n\t    * @return array\n\t */\n\tabstract function createTable($tablename, $datadef, $info);\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $name\n\t* @param  $def\n\t* @return bool|string\n\t*/\n\tfunction fieldSQL($name, $def) {\n\t   $sql = \"`$name`\";\n\t   if (!isset($def[DB_FIELD_TYPE])) {\n\t       return false;\n\t   }\n\t   $type = $def[DB_FIELD_TYPE];\n\t   if ($type == DB_DEF_ID) {\n\t       $sql .= \" INT(11)\";\n\t   } else if ($type == DB_DEF_BOOLEAN) {\n\t       $sql .= \" TINYINT(1)\";\n\t   } else if ($type == DB_DEF_TIMESTAMP) {\n\t       $sql .= \" INT(14)\";\n       } else if ($type == DB_DEF_DATETIME) {\n   \t       $sql .= \" DATETIME\";\n\t   } else if ($type == DB_DEF_INTEGER) {\n\t       $sql .= \" INT(8)\";\n\t   } else if ($type == DB_DEF_STRING) {\n\t       if (isset($def[DB_FIELD_LEN]) && is_int($def[DB_FIELD_LEN])) {\n\t           $len = $def[DB_FIELD_LEN];\n\t           if ($len < 256)\n\t               $sql .= \" VARCHAR($len)\";\n\t           else if ($len < 65536)\n\t               $sql .= \" TEXT\";\n\t           else if ($len < 16777216)\n\t               $sql .= \" MEDIUMTEXT\";\n\t           else\n\t               $sql .= \"LONGTEXT\";\n\t       } else {  // default size of 'TEXT'instead of error\n               $sql .= \" TEXT\";\n\t       }\n\t   } else if ($type == DB_DEF_DECIMAL) {\n\t       $sql .= \" DOUBLE\";\n\t   } else {\n\t       return false; // must specify known FIELD_TYPE\n\t   }\n\t   $sql .= \" NOT NULL\";\n\t   if (isset($def[DB_DEFAULT]))\n\t       $sql .= \" DEFAULT '\" . $def[DB_DEFAULT] . \"'\";\n\n\t   if (isset($def[DB_INCREMENT]) && $def[DB_INCREMENT])\n\t       $sql .= \" AUTO_INCREMENT\";\n\t   return $sql;\n\t}\n\n\t/**\n\t* Switch field values between two entries in a  Table\n\t*\n\t* Switches values between two table entries for things like swapping rank, etc...\n\t* @param  $table\n\t* @param  $field\n\t* @param  $a\n\t* @param  $b\n\t* @param null $additional_where\n\t* @return bool\n\t*/\n\tfunction switchValues($table, $field, $a, $b, $additional_where = null) {\n\t   if ($additional_where == null) {\n\t       $additional_where = '1';\n\t   }\n       $a = intval($a);\n       $b = intval($b);\n\t   $object_a = $this->selectObject($table, \"$field='$a' AND $additional_where\");\n\t   $object_b = $this->selectObject($table, \"$field='$b' AND $additional_where\");\n\n\t   if ($object_a && $object_b) {\n\t       $tmp = $object_a->$field;\n\t       $object_a->$field = $object_b->$field;\n\t       $object_b->$field = $tmp;\n\n\t       $this->updateObject($object_a, $table);\n\t       $this->updateObject($object_b, $table);\n\n\t       return true;\n\t   } else {\n\t       return false;\n\t   }\n\t}\n\n\t/**\n\t* Checks to see if the connection for this database object is valid.\n\t* @return bool True if the connection can be used to execute SQL queries.\n\t*/\n\tfunction isValid() {\n\t   return ($this->connection != null && $this->havedb);\n\t}\n\n\t/**\n\t* Test the privileges of the user account for the connection.\n\t* Tests run include:\n\t* <ul>\n\t* <li>CREATE TABLE</li>\n\t* <li>INSERT</li>\n\t* <li>SELECT</li>\n\t* <li>UPDATE</li>\n\t* <li>DELETE</li>\n\t* <li>ALTER TABLE</li>\n\t* <li>DROP TABLE</li>\n\t* </ul>\n\t* These tests must be performed in order, for logical reasons.  Execution\n\t* terminates when the first test fails, and the status flag array is returned then.\n\t* Returns an array of status flags.  Key is the test name.  Value is a boolean,\n\t* true if the test succeeded, and false if it failed.\n\t* @return array\n\t*/\n\tfunction testPrivileges() {\n\n\t   $status = array();\n\n\t   $tablename = \"___testertable\" . uniqid(\"\");\n\t   $dd = array(\n\t       \"id\" => array(\n\t           DB_FIELD_TYPE => DB_DEF_ID,\n\t           DB_PRIMARY => true,\n\t           DB_INCREMENT => true),\n\t       \"name\" => array(\n\t           DB_FIELD_TYPE => DB_DEF_STRING,\n\t           DB_FIELD_LEN => 100)\n\t   );\n\n\t   $this->createTable($tablename, $dd, array());\n\t   if (!$this->tableExists($tablename)) {\n\t       $status[\"CREATE TABLE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"CREATE TABLE\"] = true;\n\n\t   $o = new stdClass();\n\t   $o->name = \"Testing Name\";\n\t   $insert_id = $this->insertObject($o, $tablename);\n\t   if ($insert_id == 0) {\n\t       $status[\"INSERT\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"INSERT\"] = true;\n\n\t   $o = $this->selectObject($tablename, \"id=\" . $insert_id);\n\t   if ($o == null || $o->name != \"Testing Name\") {\n\t       $status[\"SELECT\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"SELECT\"] = true;\n\n\t   $o->name = \"Testing 2\";\n\t   if (!$this->updateObject($o, $tablename)) {\n\t       $status[\"UPDATE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"UPDATE\"] = true;\n\n\t   $this->delete($tablename, \"id=\" . $insert_id);\n\t   $o = $this->selectObject($tablename, \"id=\" . $insert_id);\n\t   if ($o != null) {\n\t       $status[\"DELETE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"DELETE\"] = true;\n\n\t   $dd[\"thirdcol\"] = array(\n\t       DB_FIELD_TYPE => DB_DEF_TIMESTAMP);\n\n\t   $this->alterTable($tablename, $dd, array());\n\t   $o = new stdClass();\n\t   $o->name = \"Alter Test\";\n\t   $o->thirdcol = \"Third Column\";\n\t   if (!$this->insertObject($o, $tablename)) {\n\t       $status[\"ALTER TABLE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"ALTER TABLE\"] = true;\n\n\t   $this->dropTable($tablename);\n\t   if ($this->tableExists($tablename)) {\n\t       $status[\"DROP TABLE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"DROP TABLE\"] = true;\n\n\t   foreach ($this->getTables() as $t) {\n\t       if (substr($t, 0, 14 + strlen($this->prefix)) == $this->prefix . \"___testertable\")\n\t           $this->dropTable($t);\n\t   }\n\n\t   return $status;\n\t}\n\n\t/**\n\t* Alter an existing table\n\t*\n\t* Alters the structure of an existing database table to conform to the passed\n\t* data definition.\n\t*\n\t* This function abides by the Exponent Data Definition Language, and interprets\n\t* its general structure for databases.\n\t*\n\t* @param string $tablename The name of the table to alter\n\t* @param array $newdatadef The new data definition for the table.\n\t*   This is expressed in the Exponent Data Definition Language\n\t* @param array $info Information about the table itself.\n\t* @param bool $aggressive Whether or not to aggressively update the table definition.\n\t*   An aggressive update will drop columns in the table that are not in the Exponent definition.\n\t* @return array\n\t*/\n\tabstract function alterTable($tablename, $newdatadef, $info, $aggressive = false);\n\n\t/**\n\t* Drop a table from the database\n\t*\n\t* Removes an existing table from the database. Returns true if the table was dropped, false if there\n\t* was an error returned by the database server.\n\t*\n\t* @param string $table The name of the table to drop.\n\t* @return bool\n\t*/\n\tabstract function dropTable($table);\n\n\t/**\n\t * Run raw SQL.  Returns true if the query succeeded, and false\n\t *   if an error was returned from the database server.\n\t *\n\t * <div style=\"color:red\">If you can help it, do not use this function.  It presents Database Portability Issues.</div>\n\t *\n\t * Runs a straight SQL query on the database.  This is not a\n\t * very portable way of dealing with the database, and is only\n\t * provided as a last resort.\n\t *\n\t * @param string $sql The SQL query to run\n\t * @param bool $escape\n\t * @return mixed\n\t */\n\tabstract function sql($sql, $escape = true);\n\n\t/**\n\t * Toggle a boolean value in a Table Entry\n\t *\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return void\n\t */\n\tfunction toggle($table, $col, $where=null) {\n\t   $obj = $this->selectObject($table, $where);\n\t   $obj->$col = ($obj->$col == 0) ? 1 : 0;\n\t   $this->updateObject($obj, $table);\n\t}\n\n\t/**\n\t * Update a column in all records in a table\n\t *\n\t * @param  $table\n\t * @param  $col\n\t * @param $val\n\t * @param int|null $where\n\t * @return void\n\t */\n\tabstract function columnUpdate($table, $col, $val, $where=1);\n\n\t/**\n\t * @param  $object\n\t * @param  $table\n\t * @param  $col\n\t * @param int|null $where\n\t * @return bool\n\t */\n\tfunction setUniqueFlag($object, $table, $col, $where=1) {\n\t   if (isset($object->id)) {\n\t       $this->sql(\"UPDATE \" . $this->prefix . $table . \" SET \" . $col . \"=0 WHERE \" . $where);\n\t       $this->sql(\"UPDATE \" . $this->prefix . $table . \" SET \" . $col . \"=1 WHERE id=\" . $object->id);\n\t       return true;\n\t   }\n\t   return false;\n\t}\n\n\t/**\n\t* Select a series of objects\n\t*\n\t* Selects a set of objects from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a set of records from a database table.  Returns an\n\t* array of objects, in any random order.\n\t*\n\t* @param string $table The name of the table/object to look at\n\t* @param string $where Criteria used to narrow the result set.  If this\n\t*   is specified as null, then no criteria is applied, and all objects are\n\t*   returned\n\t* @param null $orderby\n\t* @return array\n\t*/\n\tabstract function selectObjects($table, $where = null, $orderby = null);\n\n\t/**\n\t * @param  $terms\n\t * @param null $where\n\t * @return array\n\t */\n\tfunction selectSearch($terms, $where = null) {  //FIXME never used\n\n\t}\n\n\t/**\n\t * @param null $colsA\n\t * @param null $colsB\n\t * @param  $tableA\n\t * @param  $tableB\n\t * @param  $keyA\n\t * @param null $keyB\n\t * @param null $where\n\t * @param null $orderby\n\t * @return array'\n\t */\n\tfunction selectAndJoinObjects($colsA=null, $colsB=null, $tableA, $tableB, $keyA, $keyB=null, $where = null, $orderby = null) {  //FIXME never used\n\n\t}\n\n\t/**\n\t * Select a single object by sql\n\t *\n\t * @param  $sql\n\t * @return null|void\n\t */\n\tabstract function selectObjectBySql($sql);\n\n\t/**\n\t * Select a series of objects by sql\n\t *\n\t * @param  $sql\n\t * @return array\n\t */\n\tabstract function selectObjectsBySql($sql);\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @param null $orderby\n\t * @param bool $distinct\n\t * @return array\n\t */\n\tabstract function selectColumn($table, $col, $where = null, $orderby = null, $distinct=false);\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return int\n\t */\n\tfunction selectSum($table, $col, $where = null) {  //FIXME never used\n\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @param null $orderby\n\t * @return array\n\t */\n\tabstract function selectDropdown($table, $col, $where = null, $orderby = null);\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return null\n\t */\n\tabstract function selectValue($table, $col, $where=null);\n\n\t/**\n\t * @param  $sql\n\t * @return null\n\t */\n\tfunction selectValueBySql($sql) {  //FIXME never used\n\n\t}\n\n\t/**\n\t* This function takes an array of indexes and returns an array with the objects associated with each id\n\t* @param  $table\n\t* @param array $array\n\t* @param null $orderby\n\t* @return array\n\t*/\n\tfunction selectObjectsInArray($table, $array=array(), $orderby=null) {\n\t   $where = 'id IN ' . implode(\",\", $array);\n\t   $res = $this->selectObjects($table, $where, $orderby);\n\t   return $res;\n\t}\n\n\t/**\n\t* Select a series of objects, and return by ID\n\t*\n\t* Selects a set of objects from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a set of records from a database table. Returns an\n\t* array of objects, in any random order.  The indices of the array\n\t* are the IDs of the objects.\n\t*\n\t* @param string $table The name of the table/object to look at\n\t* @param string $where Criteria used to narrow the result set.  If this\n\t*   is specified as null, then no criteria is applied, and all objects are\n\t*   returned\n\t* @param null $orderby\n\t* @return array\n\t*/\n\tabstract function selectObjectsIndexedArray($table, $where = null, $orderby = null);\n\n    /**\n     * Count Objects matching a given criteria\n     *\n     * @param string $table The name of the table to count objects in.\n     * @param string $where Criteria for counting.\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return int\n     */\n\tabstract function countObjects($table, $where = null, $is_revisioned=false, $needs_approval=false);\n\n\t/**\n\t* Count Objects matching a given criteria using raw sql\n\t*\n\t* @param string $sql The sql query to be run\n\t* @return int\n\t*/\n\tabstract function countObjectsBySql($sql);\n\n\t/**\n\t* Count Objects matching a given criteria using raw sql\n\t*\n\t* @param string $sql The sql query to be run\n\t* @return int|void\n\t*/\n\tfunction queryRows($sql) { //FIXME never used\n\n\t}\n\n\t/**\n\t* Select a single object.\n\t*\n\t* Selects an objects from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a single record from a database table. Returns the\n\t* first record/object found (in the case of multiple-result queries,\n\t* there is no way to determine which of the set will be returned).\n\t* If no record(s) match the query, null is returned.\n\t*\n\t* @param string $table The name of the table/object to look at\n\t* @param string $where Criteria used to narrow the result set.\n\t* @return object|null|void\n\t*/\n\tabstract function selectObject($table, $where);\n\n\t/**\n\t * @param $table\n\t * @param string $lockType\n\t * @return mixed\n\t */\n\tabstract function lockTable($table,$lockType=\"WRITE\");\n\n\t/**\n\t * @return mixed\n\t */\n\tabstract function unlockTables();\n\n\t/**\n\t* Insert an Object into some table in the Database\n\t*\n\t* This method will return the ID assigned to the new record by database.  Note that\n\t* object attributes starting with an underscore ('_') will be ignored and NOT inserted\n\t* into the table as a field value.\n\t*\n\t* @param object $object The object to insert.\n\t* @param string $table The logical table name to insert into.  This does not include the table prefix, which\n\t*    is automagically prepended for you.\n\t* @return int|void\n\t*/\n\tabstract function insertObject($object, $table);\n\n\t/**\n\t* Delete one or more objects from the given table.\n\t*\n\t* @param string $table The name of the table to delete from.\n\t* @param string $where Criteria for determining which record(s) to delete.\n\t* @return mixed\n\t*/\n\tabstract function delete($table, $where = null);\n\n\t/**\n\t* Update one or more objects in the database.\n\t*\n\t* This function will only update the attributes of the resulting record(s)\n\t* that are also member attributes of the $object object.\n\t*\n\t* @param object $object An object specifying the fields and values for updating.\n\t*    In most cases, this will be the altered object originally returned from one of\n\t*    the select* methods.\n\t* @param string $table The table to update in.\n\t* @param string $where Optional criteria used to narrow the result set.\n\t* @param string $identifier\n\t* @param bool $is_revisioned\n\t* @return bool|int|void\n\t*/\n\tabstract function updateObject($object, $table, $where=null, $identifier='id', $is_revisioned=false);\n\n    /**\n     * Reduces table item revisions to a passed total\n     *\n     * @param string  $table     The name of the table to trim\n     * @param integer $id        The item id\n     * @param integer $num       The number of revisions to retain\n     * @param int     $workflow  is workflow turned on (or force)\n     */\n    public function trim_revisions($table, $id, $num, $workflow=ENABLE_WORKFLOW) {\n        if ($workflow && $num) {\n            $max_revision = $this->max($table, 'revision_id', null, 'id='.$id);\n            $max_approved = $this->max($table, 'revision_id', null, 'id='.$id.' AND approved=1');\n            $min_revision = $this->min($table, 'revision_id', null, 'id='.$id);\n            if ($max_revision == null) {\n                return;\n            }\n            if (($max_revision - $num) > $max_approved) {\n                $approved_max = ' AND revision_id < ' . $max_approved;  // never delete most recent approved item\n            } else {\n                $approved_max = '';\n            }\n            if ($max_revision - $min_revision >= $num) {\n                $this->delete($table, 'id=' . $id . ' AND revision_id <= ' . ($max_revision - $num) . $approved_max);\n            }\n            if (!empty($approved_max)) {\n                // we've trimmed all the fat below the newest approved item, now trim the dead wood above it\n                $this->delete($table, 'id=' . $id . ' AND revision_id <= ' . ($max_revision - $num + 1) . ' AND revision_id > ' . $max_approved);\n            }\n        }\n    }\n\n\t/**\n\t * Find the maximum value of a field.  This is similar to a standard\n\t * SELECT MAX(field) ... query.\n\t *\n\t * @param string $table The name of the table to select from.\n\t * @param string $attribute The attribute name to find a maximum value for.\n\t * @param string $groupfields A comma-separated list of fields (or a single field) name, used\n\t *    for a GROUP BY clause.  This can also be passed as an array of fields.\n\t * @param string $where Optional criteria for narrowing the result set.\n\t * @return mixed\n\t */\n\tabstract function max($table, $attribute, $groupfields = null, $where = null);\n\n\t/**\n\t * Find the minimum value of a field.  This is similar to a standard\n\t * SELECT MIN(field) ... query.\n\t *\n\t * @internal Internal\n\t * @param string $table The name of the table to select from.\n\t * @param string $attribute The attribute name to find a minimum value for.\n\t * @param string $groupfields A comma-separated list of fields (or a single field) name, used\n\t *    for a GROUP BY clause.  This can also be passed as an array of fields.\n\t * @param string $where Optional criteria for narrowing the result set.\n\t * @return null\n\t */\n\tabstract function min($table, $attribute, $groupfields = null, $where = null);\n\n\t/**\n\t* Increment a numeric table field in a table.\n\t*\n\t* @param string $table The name of the table to increment in.\n\t* @param string $field The field to increment.\n\t* @param integer $step The step value.  Usually 1.  This can be negative, to\n\t*    decrement, but the decrement() method is preferred, for readability.\n\t* @param string $where Optional criteria to determine which records to update.\n\t* @return mixed\n\t*/\n\tabstract function increment($table, $field, $step, $where = null);\n\n\t/**\n\t* Decrement a numeric table field in a table.\n\t*\n\t* @param string $table The name of the table to decrement in.\n\t* @param string $field The field to decrement.\n\t* @param integer $step The step value.  Usually 1.  This can be negative, to\n\t*    increment, but the increment() method is preferred, for readability.\n\t* @param string $where Optional criteria to determine which records to update.\n\t*/\n\n\tfunction decrement($table, $field, $step, $where = null) {\n\t   $this->increment($table, $field, -1 * $step, $where);\n\t}\n\n\t/**\n\t* Check to see if the named table exists in the database.\n\t* Returns true if the table exists, and false if it doesn't.\n\t*\n\t* @param string $table Name of the table to look for.\n\t* @return bool\n\t*/\n\tabstract function tableExists($table);\n\n\t/**\n\t* Get a list of all tables in the database.  Optionally, only the tables\n\t* in the current logical database (tables with the same prefix) can\n\t* be retrieved.\n\t*\n\t* @param bool $prefixed_only Whether to return only the tables\n\t*    for the logical database, or all tables in the physical database.\n\t* @return array\n\t*/\n\tabstract function getTables($prefixed_only=true);\n\n\t/**\n\t* Runs whatever table optimization routines the database engine supports.\n\t*\n\t* @param string $table The name of the table to optimize.\n\t* @return bool\n\t*/\n\tabstract function optimize($table);\n\n\t/**\n\t* Retrieve table information for a named table.\n\t* Returns an object, with the following attributes:\n\t* <ul>\n\t* <li><b>rows</b> -- The number of rows in the table.</li>\n\t* <li><b>average_row_length</b> -- The average storage size of a row in the table.</li>\n\t* <li><b>data_total</b> -- How much total disk space is used by the table.</li>\n\t* <li><b>data_overhead</b> -- How much storage space in the table is unused (for compacting purposes)</li>\n\t* </ul>\n\t* @param  $table\n\t* @return null\n\t*/\n\tfunction tableInfo($table) {  //FIXME never used\n\n\t}\n\n\t/**\n\t* Check whether or not a table in the database is empty (0 rows).\n\t* Returns tue of the specified table has no rows, and false if otherwise.\n\t*\n\t* @param string $table Name of the table to check.\n\t* @return bool\n\t*/\n\tfunction tableIsEmpty($table) {\n\t   return ($this->countObjects($table) == 0);\n\t}\n\n\t/**\n\t* Returns table information for all tables in the database.\n\t* This function effectively calls tableInfo() on each table found.\n\t* @return array\n\t*/\n\tabstract function databaseInfo();\n\n\t/**\n\t* This is an internal function for use only within the database database class\n\t* @internal Internal\n\t* @param  $status\n\t* @return null\n\t*/\n\tfunction translateTableStatus($status) {\n\t   $data = new stdClass();\n\t   $data->rows = $status->Rows;\n\t   $data->average_row_lenth = $status->Avg_row_length;\n\t   $data->data_overhead = $status->Data_free;\n\t   $data->data_total = $status->Data_length;\n\n\t   return $data;\n\t}\n\n\t/**\n\t * @param  $table\n\t * @return array\n\t */\n\tfunction describeTable($table) { //FIXME never used\n\n\t}\n\n\t/**\n\t* Build a data definition from a pre-existing table.  This is used\n\t* to intelligently alter tables that have already been installed.\n\t*\n\t* @param string $table The name of the table to get a data definition for.\n\t* @return array|null\n\t*/\n\tabstract function getDataDefinition($table);\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int\n\t*/\n\tfunction getDDFieldType($fieldObj) {\n\t   $type = strtolower($fieldObj->Type);\n\n\t   if ($type == \"int(11)\")\n\t       return DB_DEF_ID;\n\t   if ($type == \"int(8)\")\n\t       return DB_DEF_INTEGER;\n\t   elseif ($type == \"tinyint(1)\")\n\t       return DB_DEF_BOOLEAN;\n\t   elseif ($type == \"int(14)\")\n\t       return DB_DEF_TIMESTAMP;\n       elseif ($type == \"datetime\")\n  \t       return DB_DEF_TIMESTAMP;\n\t   //else if (substr($type,5) == \"double\")\n           //return DB_DEF_DECIMAL;\n\t   elseif ($type == \"double\")\n\t       return DB_DEF_DECIMAL;\n\t   // Strings\n\t   elseif ($type == \"text\" || $type == \"mediumtext\" || $type == \"longtext\" || strpos($type, \"varchar(\") !== false) {\n\t       return DB_DEF_STRING;\n\t   } else {\n           return DB_DEF_INTEGER;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDStringLen($fieldObj) {\n\t   $type = strtolower($fieldObj->Type);\n\t   if ($type == \"text\")\n\t       return 65535;\n\t   else if ($type == \"mediumtext\")\n\t       return 16777215;\n\t   else if ($type == \"longtext\")\n\t       return 16777216;\n\t   else if (strpos($type, \"varchar(\") !== false) {\n\t       return str_replace(array(\"varchar(\", \")\"), \"\", $type) + 0;\n\t   } else {\n           return 256;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDKey($fieldObj) {\n\t   $key = strtolower($fieldObj->Key);\n\t   if ($key == \"pri\")\n\t       return DB_PRIMARY;\n\t   else if ($key == \"uni\") {\n\t       return DB_UNIQUE;\n\t   } else {\n           return false;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDAutoIncrement($fieldObj) {\n\t   $auto = strtolower($fieldObj->Extra);\n\t   if ($auto == \"auto_increment\") {\n\t       return true;\n\t   } else {\n           return false;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDIsNull($fieldObj) {\n\t   $null = strtolower($fieldObj->Null);\n\t   if ($null == \"yes\") {\n\t       return true;\n\t   } else {\n           return false;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDDefault($fieldObj) {\n\t\treturn strtolower($fieldObj->Default);\n\t}\n\n\t/**\n\t* Returns an error message from the database server.  This is intended to be\n\t* used by the implementers of the database wrapper, so that certain\n\t* cryptic error messages can be reworded.\n\t* @return string\n\t*/\n\tabstract function error();\n\n\t/**\n\t* Checks whether the database connection has experienced an error.\n\t* @return bool\n\t*/\n\tabstract function inError();\n\n\t/**\n\t * Unescape a string based on the database connection\n\t * @param $string\n\t * @return string\n\t */\n\tabstract function escapeString($string);\n\n\t/**\n\t * Create a SQL \"limit\" phrase\n\t *\n\t * @param  $num\n\t * @param  $offset\n\t * @return string\n\t */\n\tfunction limit($num, $offset) {\n\t   return ' LIMIT ' . $offset . ',' . $num . ' ';\n\t}\n\n\t/**\n\t* Select an array of arrays\n\t*\n\t* Selects a set of arrays from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a set of records from a database table.  Returns an\n\t* array of arrays, in any random order.\n\t*\n\t* @param string $table The name of the table/object to look at\n\t* @param string $where Criteria used to narrow the result set.  If this\n\t*   is specified as null, then no criteria is applied, and all objects are\n\t*   returned\n\t* @param string $orderby\n\t* @return array\n\t*/\n\tabstract function selectArrays($table, $where = null, $orderby = null);\n\n\t/**\n\t* Select an array of arrays\n\t*\n\t* Selects a set of arrays from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a set of records from a database table.  Returns an\n\t* array of arrays, in any random order.\n\t*\n\t* @param string $sql The name of the table/object to look at\n\t* @return array\n\t*/\n\tabstract function selectArraysBySql($sql);\n\n    /**\n     * Select a record from the database as an array\n     * Selects a set of arrays from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of arrays, in any random order.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *                      is specified as null, then no criteria is applied, and all objects are\n     *                      returned\n     * @param null   $orderby\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return array|void\n     */\n\tabstract function selectArray($table, $where = null, $orderby = null, $is_revisioned=false, $needs_approval=false);\n\n    /**\n\t * Instantiate objects from selected records from the database\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *                      is specified as null, then no criteria is applied, and all objects are\n     *                      returned\n     * @param        $classname\n     * @param bool   $get_assoc\n     * @param bool   $get_attached\n     * @param array  $except\n     * @param bool   $cascade_except\n     * @param null   $order\n     * @param null   $limitsql\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return array\n     */\n\tabstract function selectExpObjects($table, $where=null, $classname, $get_assoc=true, $get_attached=true, $except=array(), $cascade_except=false, $order=null, $limitsql=null, $is_revisioned=false, $needs_approval=false);\n\n\t/**\n\t * Instantiate objects from selected records from the database\n\t *\n\t* @param string $sql The sql statement to run on the model/classname\n\t* @param string $classname Can be $this->baseclassname\n\t* Returns an array of fields\n\t* @param bool $get_assoc\n\t* @param bool $get_attached\n\t* @return array\n\t*/\n\tfunction selectExpObjectsBySql($sql, $classname, $get_assoc=true, $get_attached=true) {  //FIXME never used\n\n\t}\n\n\t/**\n\t * @param  $table\n\t * @return array\n\t */\n\tfunction selectNestedTree($table) {\n\t   $sql = 'SELECT node.*, (COUNT(parent.sef_url) - 1) AS depth\n\t\tFROM `' . $this->prefix . $table . '` AS node,\n\t\t`' . $this->prefix . $table . '` AS parent\n\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\tGROUP BY node.sef_url\n\t\tORDER BY node.lft';\n\t   return $this->selectObjectsBySql($sql);\n\t}\n\n\tfunction selectFormattedNestedTree($table) {\n\t\t$sql = \"SELECT CONCAT( REPEAT( '&#160;&#160;&#160;', (COUNT(parent.title) -1) ), node.title) AS title, node.id\n\t\t\t\tFROM \" .$this->prefix . $table. \" as node, \" .$this->prefix . $table. \" as parent\n\t\t\t\tWHERE node.lft BETWEEN parent.lft and parent.rgt\n\t\t\t\tGROUP BY node.title, node.id\n\t\t\t\tORDER BY node.lft\";\n\n\t\treturn $this->selectObjectsBySql($sql);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param  $start\n\t * @param  $width\n\t * @return void\n\t */\n\tfunction adjustNestedTreeFrom($table, $start, $width) {\n\t   $table = $this->prefix . $table;\n\t   $this->sql('UPDATE `' . $table . '` SET rgt = rgt + ' . $width . ' WHERE rgt >=' . $start);\n\t   $this->sql('UPDATE `' . $table . '` SET lft = lft + ' . $width . ' WHERE lft >=' . $start);\n\t   //eDebug('UPDATE `'.$table.'` SET rgt = rgt + '.$width.' WHERE rgt >='.$start);\n\t   //eDebug('UPDATE `'.$table.'` SET lft = lft + '.$width.' WHERE lft >='.$start);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param  $lft\n\t * @param  $rgt\n\t * @param  $width\n\t * @return void\n\t */\n\tfunction adjustNestedTreeBetween($table, $lft, $rgt, $width) {\n\t   $table = $this->prefix . $table;\n\t   $this->sql('UPDATE `' . $table . '` SET rgt = rgt + ' . $width . ' WHERE rgt BETWEEN ' . $lft . ' AND ' . $rgt);\n\t   $this->sql('UPDATE `' . $table . '` SET lft = lft + ' . $width . ' WHERE lft BETWEEN ' . $lft . ' AND ' . $rgt);\n\t   //eDebug('UPDATE `'.$table.'` SET rgt = rgt + '.$width.' WHERE rgt BETWEEN '.$lft.' AND '.$rgt);\n\t   //eDebug('UPDATE `'.$table.'` SET lft = lft + '.$width.' WHERE lft BETWEEN '.$lft.' AND '.$rgt);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param null $node\n\t * @return array\n\t */\n\tfunction selectNestedBranch($table, $node=null) {\n\t   if (empty($node))\n\t       return array();\n\n\t   $where = is_numeric($node) ? 'id=' . $node : 'title=\"' . $node . '\"';\n//\t   global $db;\n\t   $sql = 'SELECT node.*,\n\t           (COUNT(parent.title) - (sub_tree.depth + 1)) AS depth\n\t           FROM `' . $this->prefix . $table . '` AS node,\n\t           `' . $this->prefix . $table . '` AS parent,\n\t           `' . $this->prefix . $table . '` AS sub_parent,\n\t                   (       SELECT node.*, (COUNT(parent.title) - 1) AS depth\n\t                           FROM `' . $this->prefix . $table . '` AS node,\n\t                           `' . $this->prefix . $table . '` AS parent\n\t                           WHERE node.lft BETWEEN parent.lft\n\t                           AND parent.rgt AND node.' . $where . '\n\t                           GROUP BY node.title\n\t                           ORDER BY node.lft )\n\t           AS sub_tree\n\t           WHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t           AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt\n\t           AND sub_parent.title = sub_tree.title\n\t           GROUP BY node.title\n\t           ORDER BY node.lft;';\n\n\t   return $this->selectObjectsBySql($sql);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param  $lft\n\t * @param  $rgt\n\t * @return void\n\t */\n\tfunction deleteNestedNode($table, $lft, $rgt) {\n\t   $table = $this->prefix . $table;\n\n\t   $width = ($rgt - $lft) + 1;\n\t   $this->sql('DELETE FROM `' . $table . '` WHERE lft BETWEEN ' . $lft . ' AND ' . $rgt);\n\t   $this->sql('UPDATE `' . $table . '` SET rgt = rgt - ' . $width . ' WHERE rgt > ' . $rgt);\n\t   $this->sql('UPDATE `' . $table . '` SET lft = lft - ' . $width . ' WHERE lft > ' . $rgt);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param null $node\n\t * @return array\n\t */\n\tfunction selectPathToNestedNode($table, $node=null) {\n\t   if (empty($node))\n\t       return array();\n\n\t   $where = is_numeric($node) ? 'id=' . $node : 'title=\"' . $node . '\"';\n\t   $sql = 'SELECT parent.*\n\t\tFROM `' . $this->prefix . $table . '` AS node,\n\t\t`' . $this->prefix . $table . '` AS parent\n\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\tAND node.' . $where . '\n\t\tORDER BY parent.lft;';\n\t   return $this->selectObjectsBySql($sql);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param null $node\n\t * @return array\n\t */\n\tfunction selectNestedNodeParent($table, $node=null) {\n\t   if (empty($node))\n\t       return array();\n\n\t   $where = is_numeric($node) ? 'id=' . $node : 'title=\"' . $node . '\"';\n\t   $sql = 'SELECT parent.*\n\t\tFROM `' . $this->prefix . $table . '` AS node,\n\t\t`' . $this->prefix . $table . '` AS parent\n\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\tAND node.' . $where . '\n\t\tORDER BY parent.lft DESC\n\t\tLIMIT 1, 1;';\n\t   $parent_array = $this->selectObjectsBySql($sql);\n\t   return $parent_array[0];\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param null $node\n\t * @return array\n\t */\n\tfunction selectNestedNodeChildren($table, $node=null) {\n\t   if (empty($node))\n\t       return array();\n\n\t   $where = is_numeric($node) ? 'node.id=' . $node : 'node.title=\"' . $node . '\"';\n\t   $sql = '\n\t\tSELECT node.*, (COUNT(parent.title) - (sub_tree.depth + 1)) AS depth\n\t\tFROM ' . $this->prefix . $table . ' AS node,\n\t\t\t' . $this->prefix . $table . ' AS parent,\n\t\t\t' . $this->prefix . $table . ' AS sub_parent,\n\t\t\t(\n\t\t\t\tSELECT node.*, (COUNT(parent.title) - 1) AS depth\n\t\t\t\tFROM ' . $this->prefix . $table . ' AS node,\n\t\t\t\t' . $this->prefix . $table . ' AS parent\n\t\t\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\t\t\tAND ' . $where . '\n\t\t\t\tGROUP BY node.title\n\t\t\t\tORDER BY node.lft\n\t\t\t)AS sub_tree\n\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\t\tAND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt\n\t\t\tAND sub_parent.title = sub_tree.title\n\t\tGROUP BY node.title\n\t\tHAVING depth = 1\n\t\tORDER BY node.lft;';\n\t$children = $this->selectObjectsBySql($sql);\n\t   return $children;\n\t}\n\n\t/**\n\t * This function returns all the text columns in the given table\n\t * @param $table\n\t * @return array\n\t */\n\tabstract function getTextColumns($table);\n\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expRouter\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n\nclass expRouter {\n\n    private $maps = array();\n    public  $url_parts = '';\n    public  $current_url = '';\n    /**\n     * Type of url\n     * either 'base' (default page), 'page', 'action', or 'malformed'\n     * @var string\n     */\n    public  $url_type = '';\n    /**\n     * Style of url\n     * either 'sef' or 'query'\n     * @var string\n     */\n    public  $url_style = '';\n    public  $params = array();\n    public  $sefPath = null;\n    \n    function __construct() {\n        self::getRouterMaps();\n    }\n\n    /**\n     * remove trailing slash\n     *\n     * @param $fulllink\n     *\n     * @return string\n     */\n    public static function cleanLink($fulllink)\n    {           \n        if(substr($fulllink, -1) == '/') $fulllink = substr($fulllink, 0, -1);  \n        return $fulllink;                                   \n    }\n    \n    /**\n\t * Will build url to a module/page/etc (determined by what is passed to the $params array).\n\t *\n\t * @param array $params The params that are passed will determine what link is make\n\t *               section\n\t *               action\n\t *               sef_name\n\t *               module\n\t *               controller\n\t *               action\n\t *\n\t * @param bool $force_old_school Old School as in not SEF.\n\t *\n\t * @param bool $secure If you set $secure true but ENABLE_SSL is not turned on in the config this will be forced false\n\t *\n\t * @param bool $no_map Ignore router_maps\n     *\n\t * @return string A url\n\t */\n    public function makeLink($params, $force_old_school=false, $secure=false, $no_map=false) {\n        $secure = ENABLE_SSL == 1 ? $secure : false;  // check if this site can use SSL if not then force the link to not be secure\n        $linkbase =  $secure ? URL_BASE_SECURE : URL_BASE;\n        $linkbase .= SCRIPT_RELATIVE;\n                \n        if (isset($params['section']) && $params['section'] == SITE_DEFAULT_SECTION) {            \n            return self::cleanLink($linkbase);\n        }\n\n        // Check to see if SEF_URLS have been turned on in the site config\n        if (SEF_URLS == 1 && ($_SERVER[\"PHP_SELF\"] == PATH_RELATIVE.'index.php' || $_SERVER[\"PHP_SELF\"] == PATH_RELATIVE.'install/index.php') && $force_old_school == false) {\n            \n            if (isset($params['section']) && !isset($params['action'])) {                \n                if (empty($params['sef_name'])) {\n                    global $db;\n\n                    $params['sef_name'] = $db->selectValue('section', 'sef_name', 'id='.intval($params['section']));\n                }                               \n                return self::cleanLink($linkbase.$params['sef_name']);\n            } else {                \n                // initialize the link\n                $link = '';               \n        \n                // we need to add the change the module parameter to controller if it exists\n                // we can remove this snippit once the old modules are gone.\n                if (!empty($params['module']) && empty($params['controller'])) $params['controller'] = $params['module'];\n            \n                // check to see if we have a router mapping for this controller/action\n                if (empty($no_map)){\n                    for ($i = 0, $iMax = count($this->maps); $i < $iMax; $i++) {\n                        $missing_params = array(\"dump\");\n\n                        if ((!empty($params) && !empty($params['controller']) && !empty($params['action'])) && (in_array($params['controller'], $this->maps[$i]) && in_array($params['action'], $this->maps[$i]) && (!isset($this->maps[$i]['src']) || in_array($params['src'], $this->maps[$i])))) {\n                            $missing_params = array_diff_key($this->maps[$i]['url_parts'], $params);\n                        }\n\n                        if (count($missing_params) == 0) {\n                            foreach($this->maps[$i]['url_parts'] as $key=>$value) {\n                                if ($key == 'controller') {\n                                    $link .= urlencode($value).\"/\";\n                                } else {\n                                    $link .= urlencode($params[$key]).\"/\";\n                                }\n                            }\n                            break;  // if this hits then we've found a match\n                        }\n                    }\n                }\n\n                // if we found a mapping for this link then we can return it now.\n                //if ($link != '') return self::encode($linkbase.$link);\n                if ($link != '') return self::cleanLink($linkbase.$link);\n                \n                if (!empty($params['controller'])) $link .= $params['controller'].'/';\n                if (!empty($params['action'])) $link .= $params['action'].'/';\n                foreach ($params as $key=>$value) {\n                    if(!is_array($value) && strpos($key,'__') !== 0 && $key !== 'PHPSESSID') {\n                        $value = trim($value);\n                        $key = trim($key);\n                        if ($value != \"\") {\n                            if ($key != 'module' && $key != 'action' && $key != 'controller') {\n                                if ($key != 'src') {\n                                    $link .= urlencode($key).\"/\".urlencode($value).\"/\";\n                                } else {\n                                    $link .= $key.\"/\".$value.\"/\";\n                                }\n                            }\n                        }\n                    }\n                }\n                //trim last / off                 \n                return self::cleanLink($linkbase.$link);\n            }\n        } else {\n            // if the users don't have SEF URL's turned on then we make the link the old school way.\n            if (!empty($params['sef_name'])) unset($params['sef_name']);\n            $link = $linkbase . SCRIPT_FILENAME . \"?\";\n            foreach ($params as $key=>$value) {\n                if (!is_array($value) && strpos($key,'__') !== 0 && $key !== 'PHPSESSID'){\n                    $value = trim($value);\n                    $key = trim($key);\n                    if ($value != \"\") {\n                        if ($key != 'src') {\n                            $link .= urlencode($key).\"=\".urlencode($value).\"&\";\n                        } else {\n                            $link .= $key.\"=\".$value.\"&\";\n                        }                    \n                    }\n                }\n            }\n\n            $link = substr($link,0,-1);\n            return $link; // phillip: removed htmlspecialchars so that links return without parsing & to &amp; in URL strings\n            //return htmlspecialchars($link,ENT_QUOTES);\n        }\n    }\n\n    /**\n     * Returns a cleaner canonical link sans 'src' param\n     *\n     * @return string\n     */\n    public function plainPath() {\n        $params = $this->params;\n        unset($params['src']);\n        return $this->makeLink($params);\n    }\n\n    public function routeRequest() {\n        global $user;\n\n        // strip out possible xss exploits via url\n        foreach ($_GET as $key=>$var) {\n            if (is_string($var) && strpos($var,'\">')) {\n                unset(\n                    $_GET[$key],\n                    $_REQUEST[$key]\n                );\n            }\n        }\n        // conventional method to ensure the 'id' is an id\n        if (isset($_GET['id'])) {\n            $_GET['id'] = intval($_GET['id']);\n            $_REQUEST['id'] = intval($_REQUEST['id']);\n        }\n        if (empty($user->id) || (!empty($user->id) && !$user->isAdmin())) {  //FIXME why would $user be empty here unless $db is down?\n//            $_REQUEST['route_sanitized'] = true;//FIXME debug test\n            expString::sanitize($_REQUEST);  // strip other exploits like sql injections\n        }\n\n        // start splitting the URL into it's different parts\n        $this->splitURL();\n        // edebug($this,1);\n\n        if ($this->url_style == 'sef') {\n            if ($this->url_type == 'page' || $this->url_type == 'base') {\n                $ret = $this->routePageRequest();               // if we hit this the formatting of the URL looks like the user is trying to go to a page.\n                if (!$ret) $this->url_type = 'malformed';\n            } elseif ($this->url_type == 'action') {\n                $this->isMappedURL();                       //check for a router map\n                $ret = $this->routeActionRequest();         // we didn't have a map for this URL.  Try to route it with this function.\n\n                // if this url wasn't a valid section, or action then kill it.  It might not actually be a \"bad\" url, \n                // but this is a precautionary measure against bad paths on images, css & js file, etc...with the new\n                // mod_rewrite rules these bad paths will not route thru here so we need to take them into account and\n                // deal with them accordingly.\n                if (!$ret) $this->url_type = 'malformed';  \n            } elseif ($this->url_type == 'post') {\n                // some forms aren't getting the controller field set right when the form is created\n                // we are putting this check here to safe guard against a controller being referred to as\n                // a module in the form.\n                if (!empty($_POST['controller']) || !empty($_POST['module'])) {\n                    $module = !empty($_POST['controller']) ? expString::sanitize($_POST['controller']) : expString::sanitize($_POST['module']);\n                    // Figure out if this is module or controller request - WE ONLY NEED THIS CODE UNTIL WE PULL OUT THE OLD MODULES\n                    if (expModules::controllerExists($module)) {\n                        $_POST['controller'] = $module;\n                        $_REQUEST['controller'] = $module;\n                    }\n                }\n            }\n        } elseif ($this->url_style == 'query' && SEF_URLS == 1 && !empty($_REQUEST['section']) && PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1) {\n            // if we hit this it's an old school url coming in and we're trying to use SEF's. \n            // we will send a permanent redirect so the search engines don't freak out about 2 links pointing\n            // to the same page.\n            header(\"Location: \".$this->makeLink(array('section'=>intval($_REQUEST['section']))),TRUE,301);          \n        }\n\n        // if this is a valid URL then we build out the current_url var which is used by flow, and possibly other places too\n        if ($this->url_type != 'malformed') {               \n            $this->current_url = $this->buildCurrentUrl();\n        } else {\n            // check if the URL is looking for a non-existent page or controller (we will check for bad action in renderAction())\n            // if page or controller is not found we will route to the not found controller.            \n            $_REQUEST['controller'] = 'notfound';\n            $_REQUEST['action'] = 'handle';\n        }\n    }\n\n    //FIXME what are we doing with this history? saving each page load\n    public function updateHistory($section=null) {\n        global $db,$user;\n\n        // if its not already set\n        // configurable tracking length\n        setcookie('UserUID',expSession::getTicketString(),86400 * TRACKING_COOKIE_EXPIRES);\n        $cookieID = (empty($_COOKIE['UserUID'])) ? expSession::getTicketString() : $_COOKIE['UserUID'];\n        // Build out the object to insert into the db.\n        // Get our parameters.\n        $tmpParams = array();\n        foreach ($this->params as $key=>$value) {\n            if ($key != 'module' && $key != 'action' && $key != 'controller' && $key != 'section') {\n                $tmpParams[$key] = $value;\n            }\n        }\n        $trackingObject = new stdClass();\n        $trackingObject->params = serialize($tmpParams);\n        if ($this->url_type == 'page' || $this->url_type == 'base') {\n            $trackingObject->section = $section;\n        } else {\n            $trackingObject->module = ($_SERVER['REQUEST_METHOD'] == 'POST') ? (empty($_POST['controller']) ? expString::sanitize($_POST['module']) : expString::sanitize($_POST['controller'])) : $this->url_parts[0];\n            $trackingObject->action = ($_SERVER['REQUEST_METHOD'] == 'POST') ? $_POST['action'] : $this->url_parts[1];\n        }\n        $trackingObject->referer = empty($_SERVER['HTTP_REFERER']) ? null : $_SERVER['HTTP_REFERER'];\n        $trackingObject->cookieUID = $cookieID;\n        $trackingObject->user_id = $user->id;\n        $trackingObject->timestamp = time();\n        $trackingObject->user_address = $_SERVER['REMOTE_ADDR'];\n        $trackingObject->user_agent = $_SERVER['HTTP_USER_AGENT'];\n        $trackingObject->session_id = $_COOKIE['PHPSESSID'];\n        $db->insertObject($trackingObject,'tracking_rawdata');\n    }\n\n    public function splitURL() {\n        global $db;\n\n        $this->url_parts = array();\n        $this->buildSEFPath();\n\n        if (!empty($this->sefPath)) {\n            $this->url_style = 'sef';\n            $this->url_parts = explode('/', $this->sefPath);     \n\n            // remove empty first and last url_parts if they exist\n            //if (empty($this->url_parts[count($this->url_parts)-1])) array_pop($this->url_parts);\n            if ($this->url_parts[count($this->url_parts)-1] == '') array_pop($this->url_parts);\n            if (empty($this->url_parts[0])) array_shift($this->url_parts);\n            \n            if (count($this->url_parts) < 1 || (empty($this->url_parts[0]) && count($this->url_parts) == 1) ) {\n                $this->url_type = 'base';  // no params\n            } elseif (count($this->url_parts) == 1 || $db->selectObject('section', \"sef_name='\" . substr($db->escapeString($this->sefPath),1) . \"'\") != null) {\n                $this->url_type = 'page';  // single param is page name\n            } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n                $this->url_type = 'post';  // params via form/post\n            } else {\n                // take a peek and see if a page exists with the same name as the first value...if so we probably have a page with\n                // extra perms...like printerfriendly=1 or ajax_action=1;\n                if (($db->selectObject('section', \"sef_name='\" . $db->escapeString($this->url_parts[0]) . \"'\") != null) && (in_array(array('printerfriendly','exportaspdf','ajax_action'), $this->url_parts))) {\n                    $this->url_type = 'page';\n                } else {\n                    $this->url_type = 'action';\n                }\n            }\n            $this->params = $this->convertPartsToParams();\n        } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            $this->url_style = 'sef';\n            $this->url_type = 'post';\n            $this->params = $this->convertPartsToParams();\n        } elseif (isset($_SERVER['REQUEST_URI'])) {\n            // if we hit here, we don't really need to do much.  All the pertinent info will come thru in the POST/GET vars\n            // so we don't really need to worry about what the URL looks like.\n            if ($_SERVER['REQUEST_URI'] == PATH_RELATIVE) {\n                $this->url_type = 'base';\n                $this->params = array();\n            } else {\n                $sefPath = explode('%22%3E',$_SERVER['REQUEST_URI']);  // remove any attempts to close the command\n                $_SERVER['REQUEST_URI'] = $sefPath[0];\n                $this->url_style = 'query';\n            }\n        } else {\n            $this->url_type = 'base';\n            $this->params = array();\n        }\n                              \n        // Check if this was a printer friendly link request\n        define('PRINTER_FRIENDLY', (isset($_REQUEST['printerfriendly']) || isset($this->params['printerfriendly'])) ? 1 : 0);         \n        define('EXPORT_AS_PDF', (isset($_REQUEST['exportaspdf']) || isset($this->params['exportaspdf'])) ? 1 : 0);\n        define('EXPORT_AS_PDF_LANDSCAPE', (isset($_REQUEST['landscapepdf']) || isset($this->params['landscapepdf'])) ? 1 : 0);\n    }\n\n    public function routePageRequest() {        \n//        global $db;\n\n        if ($this->url_type == 'base') {\n            // if we made it in here this is a request for http://www.baseurl.com\n            if (expTheme::inAction()) {\n                $_REQUEST['section'] = (expSession::is_set('last_section') ? expSession::get('last_section') : SITE_DEFAULT_SECTION);\n            } else {\n                $_REQUEST['section'] = SITE_DEFAULT_SECTION;  \n            }\n        } else {\n            // Try to look up the page by sef_name first.  If that doesn't exist, strip out the dashes and\n            // check the regular page names.  If that still doesn't work then we'll redirect them to the \n            // search module using the page name as the search string.\n            $section = $this->getPageByName(substr($this->sefPath,1));\n            ########################################################\n            #FJD TODO:  this needs further refinement\n            #currently this requires a matching routerMap as such to work properly:\n            /*\n            $maps[] = array('controller'=>'store',\n                    'action'=>'showall',\n                    'url_parts'=>array(                \n                            'title'=>'(.*)'),\n            );\n            $maps[] = array('controller'=>'store',\n                    'action'=>'showByTitle',\n                    'url_parts'=>array(                \n                            'title'=>'(.*)'),\n            );\n            */\n            //if section is empty, we'll look for the page overrides first and route to \n            //routeActionRequest with some hand wacked variables. If we can't find an override\n            //then we'll return false as usual\n            // since we only received a single param and it wasn't a page, try for store category, or a product\n            if (empty($section)) {\n                $sef_url = $this->url_parts[0];\n                //check for a category\n                $c = new storeCategory();                \n                $cat = $c->findBy('sef_url', $sef_url);\n                if (empty($cat)) {\n                    //check for a product\n                    $p = new product();\n                    $prod = $p->findBy('sef_url', $sef_url);\n                    if(!empty($prod)) {\n                        //fake parts and route to action  \n                        $this->url_type = 'action';                   \n                        $this->url_parts[0] = 'store'; //controller\n                        $this->url_parts[1] = 'show'; //controller\n                        $this->url_parts[2] = 'title'; //controller\n                        $this->url_parts[3] = $sef_url; //controller\n                        //eDebug($this->url_parts,true);\n                        $this->params = $this->convertPartsToParams();\n                        return $this->routeActionRequest();\n                    }\n                    //else fall through\n                } else {\n                    //fake parts and route to action \n                    $this->url_type = 'action';                                      \n                    $this->url_parts[0] = 'store'; //controller\n                    $this->url_parts[1] = 'showall'; //controller\n                    $this->url_parts[2] = 'title'; //controller                    \n                    $this->url_parts[3] = $sef_url; //controller\n                    //eDebug($this->url_parts,true);\n                    $this->params = $this->convertPartsToParams();\n                    return $this->routeActionRequest();\n                }\n                return false;\n            }\n            #########################################################\n            //if (empty($section)) return false;  //couldnt find the page..let the calling action deal with it.\n            $_REQUEST['section'] = $section->id;\n        }\n        \n        expHistory::set('viewable', array('section'=>intval($_REQUEST['section'])));\n        return true;\n    }\n\n    /**\n     * figure out if this action is mapped via the mapping file (router_maps.php)\n     */\n    public function isMappedURL() {\n        $part_count = count($this->url_parts);\n        foreach ($this->maps as $map) {\n            $matched = true;\n            $pairs = array();\n            $i = 0;\n            if ($part_count == count($map['url_parts'])) {               \n                foreach($map['url_parts'] as $key=>$map_part) {\n                    $res = preg_match(\"/^$map_part/\", $this->url_parts[$i]);\n                    if ($res != 1) {\n                        $matched = false;\n                        break;\n                    } \n                    $pairs[$key] = $this->url_parts[$i];\n                    $i++;\n                }\n            } else {\n                $matched = false;\n            }            \n              \n            if ($matched) {\n                // safeguard against false matches when a real action was what the user really wanted.\n                if (count($this->url_parts) >= 2 && method_exists(expModules::getController($this->url_parts[0]), $this->url_parts[1]))\n                    return false;\n\n                $this->url_parts = array();\n                $this->url_parts[0] = $map['controller'];\n                $this->url_parts[1] = $map['action'];\n        \n                if (isset($map['view'])) {\n                    $this->url_parts[2] = 'view';\n                    $this->url_parts[3] = $map['view'];\n                }\n\n                foreach($map as $key=>$value) {\n                    if ($key != 'controller' && $key != 'action' && $key != 'view' && $key != 'url_parts') {\n                        $this->url_parts[] = $key;\n                        $this->url_parts[] = $value;\n                    }\n                }\n\n                foreach($pairs as $key=>$value) {\n                    if ($key != 'controller') {\n                        $this->url_parts[] = $key;\n                        $this->url_parts[] = $value;\n                    }\n                }\n                \n                $this->params = $this->convertPartsToParams();\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public function routeActionRequest() {\n        $return_params = array('controller'=>'','action'=>'','url_parts'=>array());\n    \n        // If we have three url parts we assume they are controller->action->id, otherwise split them out into name<=>value pairs\n        $return_params['controller'] = $this->url_parts[0]; // set the controller/module\n        $return_params['action'] = $this->url_parts[1];     // set the action\n\n        // Figure out if this is module or controller request - WE ONLY NEED THIS CODE UNTIL WE PULL OUT THE OLD MODULES\n        if (expModules::controllerExists($return_params['controller'])) {\n            $requestType = 'controller';\n//        } elseif (is_dir(BASE.'framework/modules-1/'.$return_params['controller'])) {\n//            $requestType = 'module';\n        } else {\n            return false;  //this is an invalid url return an let the calling function deal with it.\n        }\n\n        // now figure out the name<=>value pairs\n        if (count($this->url_parts) == 3) {\n            if ( is_numeric($this->url_parts[2])) {\n                $return_params['url_parts']['id'] = $this->url_parts[2];\n            }\n        } else {\n            for ($i = 2, $iMax = count($this->url_parts); $i < $iMax; $i++) {\n                if ($i % 2 == 0) {\n                    $return_params['url_parts'][$this->url_parts[$i]] = isset($this->url_parts[$i+1]) ? $this->url_parts[$i+1] : '';\n                }\n            }\n        }        \n\n        // Set the module or controller - this how the actual routing happens\n        $_REQUEST[$requestType] = $return_params['controller']; //url_parts[0];\n        $_GET[$requestType] = $return_params['controller'];\n        $_POST[$requestType] = $return_params['controller'];\n    \n        // Set the action for this module or controller\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            // most of the time we can just grab the action outta the POST array since this is passed as a hidden field, \n            // but sometimes it is actually set as the action on the form itself...then we get it from the params array instead.\n            $action = !empty($_POST['action']) ? $_POST['action'] : $this->params['action'];\n        } else {\n            $action = $return_params['action'];\n        }\n    \n        $_REQUEST['action'] = $action;\n        $_GET['action'] = $action;\n        $_POST['action'] = $action;\n\n        // pass off the name<=>value pairs\n        foreach($return_params['url_parts'] as $key=>$value) {\n            $save_value = expString::sanitize($value);\n            $_REQUEST[$key] = $save_value;\n            $_GET[$key] = $save_value;\n        }\n\n        return true;\n    }\n\n    public function buildCurrentUrl() {\n        $url =  URL_BASE;\n        if ($this->url_style == 'sef') {\n            $url .= substr(PATH_RELATIVE,0,-1).$this->sefPath;\n        } else {\n            $url .= urldecode((empty($_SERVER['REQUEST_URI'])) ? $_ENV['REQUEST_URI'] : $_SERVER['REQUEST_URI']);\n        }\n        return expString::sanitize($url);\n    }\n\n    public static function encode($url) {\n        $url = str_replace('&', 'and', $url);\n        return preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '-', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '-', $url))));\n    }\n    \n    public static function decode($url) {\n        $url = str_replace('-', ' ', $url);\n        return str_replace('+', '-', $url);\n    }\n\n    public function getSefUrlByPageId($id=null) {  //FIXME this method is never called and doesn't do anything as written\n        if (!empty($id)) {\n            global $db;\n\n            $section = $db->selectObject('section', 'id='.intval($id));\n            $url = URL_FULL;\n            $url .= !empty($section->sef_name) ? $section->sef_name : $section->name;\n        }\n    }\n\n    public function buildUrlByPageId($id=null) {\n        global $db;\n\n        //$url = URL_FULL;\n        $url = '';\n        if (!empty($id)) {\n            if (SEF_URLS == 1) {\n                $section = $db->selectObject('section', 'id='.intval($id));\n                if ($section->id != SITE_DEFAULT_SECTION) {\n                    $url .= !empty($section->sef_name) ? $section->sef_name : $section->name;\n                }\n            } else {\n                $url .= 'index.php?section='.$id;\n            }\n        }\n        return $url;\n    }\n\n    public function printerFriendlyLink($link_text=\"Printer Friendly\", $class=null, $width=800, $height=600, $view='', $title_text = \"Printer Friendly\") {\n        $url = '';\n        if (PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1) {\n            $class = !empty($class) ? $class : 'printer-friendly-link';\n            $url =  '<a class=\"'.$class.'\" href=\"javascript:void(0)\" onclick=\"window.open(\\'';\n            if (!empty($_REQUEST['view']) && !empty($view) && $_REQUEST['view'] != $view) {\n                $_REQUEST['view'] = $view;\n            }\n            if ($this->url_style == 'sef') {\n                $url .= $this->convertToOldSchoolUrl();\n                if (empty($_REQUEST['view']) && !empty($view)) $url .= '&view='.$view;\n                if ($this->url_type=='base') $url .= '/index.php?section='.SITE_DEFAULT_SECTION;\n            } else {\n                $url .= $this->current_url;\n            }\n            $url .= '&printerfriendly=1\\' , \\'mywindow\\',\\'menubar=1,resizable=1,scrollbars=1,width='.$width.',height='.$height.'\\');\"';\n            $url .= ' title=\"'.$title_text.'\"';\n            $url .= '> '.$link_text.'</a>';\n            $url = str_replace('&ajax_action=1','',$url);\n        }\n        \n        return $url; \n    }\n\n    public function exportAsPDFLink($link_text=\"Export as PDF\", $class=null, $width=800, $height=600, $view='', $orientation=false, $limit='', $title_text=\"Export as PDF\") {\n        $url = '';\n        if (EXPORT_AS_PDF != 1 && PRINTER_FRIENDLY != 1) {\n            $class = !empty($class) ? $class : 'export-pdf-link';\n            $url =  '<a class=\"'.$class.'\" href=\"javascript:void(0)\" onclick=\"window.open(\\'';\n            if (!empty($_REQUEST['view']) && !empty($view) && $_REQUEST['view'] != $view) {\n                $_REQUEST['view'] = $view;\n            }\n            if ($this->url_style == 'sef') {\n                $url .= $this->convertToOldSchoolUrl();\n                if (empty($_REQUEST['view']) && !empty($view)) $url .= '&view='.$view;\n                if ($this->url_type=='base') $url .= '/index.php?section='.SITE_DEFAULT_SECTION;\n            } else {\n                $url .= $this->current_url;\n            }\n            if (!empty($orientation)) {\n                $orientation = '&landscapepdf='.$orientation;\n            }\n            if (!empty($limit)) {\n                $limit = '&limit='.$limit;\n            }\n            $url .= '&exportaspdf=1'.$orientation.$limit.'&\\' , \\'mywindow\\',\\'menubar=1,resizable=1,scrollbars=1,width='.$width.',height='.$height.'\\');\"';\n            $url .= ' title=\"'.$title_text.'\"';\n            $url .= '> '.$link_text.'</a>';\n            $url = str_replace('&ajax_action=1','',$url);\n        }\n\n        return $url;\n    }\n\n    public function convertToOldSchoolUrl() {\n        $params = $this->convertPartsToParams();\n        return $this->makeLink($params, true);\n    }\n\n    public function convertPartsToParams() {\n        $params = array();\n        if ($this->url_type == 'base') {\n            $params['section'] = SITE_DEFAULT_SECTION;\n        } elseif ($this->url_type == 'page') {\n            $section = $this->getPageByName(substr($this->sefPath,1));\n            $params['section'] = empty($section->id) ? null : $section->id;\n        } elseif ($this->url_type == 'action') {\n            $params['controller'] = $this->url_parts[0];\n            $params['action'] = !empty($this->url_parts[1]) ? $this->url_parts[1] : null;\n            for ($i = 2, $iMax = count($this->url_parts); $i < $iMax; $i++) {\n                if ($i % 2 == 0) {\n                    $params[$this->url_parts[$i]] = isset($this->url_parts[$i+1]) ? $this->url_parts[$i+1] : '';\n                }\n            }\n        } elseif ($this->url_type == 'post') {\n            if (isset($_REQUEST['PHPSESSID'])) unset($_REQUEST['PHPSESSID']);\n//            foreach($_REQUEST as $name=>$val) {\n////                if (get_magic_quotes_gpc()) $val = stripslashes($val);  // magic quotes fix??\n////                $params[$name] = $val;\n//                $params[$name] = expString::sanitize($val);  //FIXME need array sanitizer\n//            }\n//            if (empty($_REQUEST['route_sanitized']))\n                $params = expString::sanitize($_REQUEST);\n//            if (empty($data['route_sanitized'])) $_REQUEST['pre_sanitized'] = true;//FIXME debug test\n        }\n        //TODO: fully sanitize all params values here for ---We already do this!\n//        if (isset($params['src'])) $params['src'] = expString::sanitize(htmlspecialchars($params['src']));\n        return $params;\n    }\n\n    public function getPageByName($url_name) {\n        global $db;\n        \n        $section = null;\n        if (is_numeric($url_name)) {\n            $section = $db->selectObject('section', 'id=' . $url_name);\n            if ($section == null) $section = $db->selectObject('section', \"sef_name='\" . $url_name . \"'\");\n        } elseif ($this->url_type == 'base') {\n            // if we made it in here this is a request for http://www.baseurl.com\n            $section = $db->selectObject('section', 'id='.SITE_DEFAULT_SECTION);\n        } else {\n            $section = $db->selectObject('section', \"sef_name='\".$url_name.\"'\");\n        }\n        // if section is still empty then we should route the user to the search (cool new feature :-) )\n        // at some point we need to write a special action/view for the search module that lets the user\n        // know they were redirected to search since the page they tried to go to directly didn't exist.\n#       if (empty($section)) {\n#           header(\"Refresh: 0; url=\".$this->makeLink(array('module'=>'search', 'action'=>'search', 'search_string'=>$this->url_parts[0])), false, 404);\n#           exit();\n#       } else {\n#           return $section;\n#       }\n        return $section;\n    }\n    \n    private function buildSEFPath () {\n        // Apache\n        if (strpos($_SERVER['SERVER_SOFTWARE'],'Apache') !== false || strpos($_SERVER['SERVER_SOFTWARE'],'WebServerX') !== false) {\n            switch(php_sapi_name()) {\n                case \"cgi\":\n                    $this->sefPath = !empty($_SERVER['REQUEST_URI']) ? urldecode($_SERVER['REQUEST_URI']): null;\n                    break;\n                case \"cgi-fcgi\":\n                    if (isset($_SERVER['REDIRECT_URL']) && $_SERVER['REDIRECT_URL'] != PATH_RELATIVE.'index.php') {\n                        $this->sefPath = urldecode($_SERVER['REDIRECT_URL']);\n                    } elseif (!empty($_ENV['REQUEST_URI'])) {\n                        $this->sefPath = urldecode($_ENV['REQUEST_URI']);\n                    } else {\n                        $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n                    }\n                    break;\n                default:\n                    $this->sefPath = !empty($_SERVER['REDIRECT_URL']) ? urldecode($_SERVER['REDIRECT_URL']) : null;\n                    break;\n            }\n        // Lighty ???\n        } elseif (strpos(strtolower($_SERVER['SERVER_SOFTWARE']),'lighttpd') !== false) {\n            //FIXME, we still need a good lighttpd.conf rewrite config for sef_urls to work\n            if (isset($_SERVER['ORIG_PATH_INFO'])) {\n                $this->sefPath = urldecode($_SERVER['ORIG_PATH_INFO']);\n            } elseif (isset($_SERVER['REDIRECT_URI'])){\n                $this->sefPath = urldecode(substr($_SERVER['REDIRECT_URI'],9));\n            } elseif (isset($_SERVER['REQUEST_URI'])){\n                $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n            }\n        // Nginx ???\n        } elseif (strpos(strtolower($_SERVER['SERVER_SOFTWARE']),'nginx') !== false) {\n            $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n        } else {\n            $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n        }\n        \n        $this->sefPath = substr($this->sefPath,strlen(substr(PATH_RELATIVE,0,-1))); \n        if (strpos($this->sefPath,'/index.php') === 0) {\n            $this->sefPath = null;\n        }\n        \n\t\t//parse the ecommerce tracking code if present and include in the object\n        if(isset($_SERVER['argv']) && is_array($_SERVER['argv']))\n        {\n            foreach($_SERVER['argv'] as $set)\n            {\n                $s = explode(\"=\",$set);\n                if($s[0] == \"ectid\")\n                {\n                    $this->ectid = $s[1];    \n                }   \n            }            \n        }\n        if (substr($this->sefPath,-1) == \"/\") $this->sefPath = substr($this->sefPath,0,-1);\n        // sanitize it\n        $sefPath = explode('\">',$this->sefPath);  // remove any attempts to close the command\n        $this->sefPath = expString::sanitize($sefPath[0]);\n    }\n\n    public function getSection() {\n        global $db;\n\n        if (expTheme::inAction()) {\n            if (isset($_REQUEST['section'])) {\n                $section = $this->url_style==\"sef\" ? $this->getPageByName($_REQUEST['section'])->id : intval($_REQUEST['section']) ;\n            } else {\n                $section = (expSession::is_set('last_section') ? expSession::get('last_section') : SITE_DEFAULT_SECTION);\n            }\n        } else {\n            $section = (isset($_REQUEST['section']) ? intval($_REQUEST['section']) : SITE_DEFAULT_SECTION);\n        }\n        $testsection = $db->selectObject('section','id='.$section);\n        if (empty($testsection)) {\n            $section = SITE_DEFAULT_SECTION;\n        }\n        return $section;\n    }\n\n    public function getSectionObj($section) {\n        global $db;\n\n        if ($section == \"*\") {\n            $sectionObj = call_user_func(expModules::getModuleClassName($this->params['controller']) . \"::getSection\", $this->params);\n        } else {\n//            $sectionObj = $db->selectObject('section','id='. intval($section));\n            $sectionObj = new section(intval($section));\n        }\n//        $sectionObj = $db->selectObject('section','id='. intval($section));\n        if (!$sectionObj->canView()) {\n            define('AUTHORIZED_SECTION',0);\n        } else {\n            define('AUTHORIZED_SECTION',1);\n        }\n        if (!$sectionObj->isPublic()) {\n            define('PUBLIC_SECTION',0);\n        } else {\n            define('PUBLIC_SECTION',1);\n        }\n    \n        if (isset($_REQUEST['section'])) {\n            expSession::set('last_section', intval($_REQUEST['section']));\n        } elseif ($section == SITE_DEFAULT_SECTION) {\n            expSession::set('last_section', intval(SITE_DEFAULT_SECTION));\n        } else {\n            //expSession::unset('last_section');\n        }\n        return $sectionObj;\n    }\n    \n    public function getRouterMaps() {\n        $mapfile = BASE.'framework/core/router_maps.php';\n\t\tif (file_exists(BASE.'themes/'.DISPLAY_THEME.'/router_maps.php')) {\n\t\t\t$mapfile = BASE.'themes/'.DISPLAY_THEME.'/router_maps.php';\n        }\n\n        include_once($mapfile);\n        $this->maps = $maps;  // $maps is set by included $mapfile\n    }\n    \n    public function getTrackingId()\n    {        \n        if(isset($this->ectid)) return $this->ectid;\n        else return '';\n    }\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expString\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n/** @define \"BASE\" \"../../..\" */\n\nclass expString {\n\n    /**\n     * Routine to convert string to UTF\n     *\n     * @static\n     * @param string $string\n     * @return string\n     */\n\tstatic function convertUTF($string) {\n\t\treturn $string = str_replace('?', '', htmlspecialchars($string, ENT_IGNORE, 'UTF-8'));\n\t} \n\n    /**\n     * Routine to check if string is valid UTF string\n     *\n     * @static\n     * @param string $string\n     * @return bool\n     */\n\tstatic function validUTF($string) {\n\t\tif(!mb_check_encoding($string, 'UTF-8') OR !($string === mb_convert_encoding(mb_convert_encoding($string, 'UTF-32', 'UTF-8' ), 'UTF-8', 'UTF-32'))) {\n\t\t\treturn false;\n\t\t}\t\t\n\t\treturn true;\n\t}\n\n    /**\n     * Routine to strip unreadable characters from string - ascii 32 to 126\n     *\n     * @static\n     * @param string $string\n     * @return string\n     */\n\tstatic function onlyReadables($string) {\n        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {\n\t\t\t$chr = $string{$i};\n\t\t\t$ord = ord($chr);\n\t\t\tif ($ord<32 or $ord>126) {\n\t\t\t$chr = \"~\";\n\t\t\t$string{$i} = $chr;\n\t\t\t}\n\t\t}\n\t\treturn str_replace(\"~\", \"\", $string);\n\t}\n\n    /**\n     * Routine to\n     *\n     * @static\n     * @param string $str\n     * @param bool $unescape should the string also be unescaped?\n     * @return mixed|string\n     */\n\tstatic function parseAndTrim($str, $unescape=false) {\n        if (is_array($str)) {\n            $rst = array();\n            foreach ($str as $key=>$st) {\n                $rst[$key] = self::parseAndTrim($st, $unescape);\n            }\n            return $rst;\n        }\n\n        $str = str_replace(\"<br>\",\" \",$str);\n        $str = str_replace(\"</br>\",\" \",$str);\n        $str = str_replace(\"<br/>\",\" \",$str);\n        $str = str_replace(\"<br />\",\" \",$str);\n        $str = str_replace(\"\\r\\n\",\" \",$str);\n        $str = str_replace('\"',\"&quot;\",$str);\n        $str = str_replace(\"'\",\"&#39;\",$str);\n        $str = str_replace(\"\u2019\",\"&rsquo;\",$str);\n        $str = str_replace(\"\u2018\",\"&lsquo;\",$str);\n        $str = str_replace(\"\u00ae\",\"&#174;\",$str);\n        $str = str_replace(\"\u2013\",\"-\", $str);\n        $str = str_replace(\"\u2014\",\"&#151;\", $str);\n        $str = str_replace(\"\u201d\",\"&rdquo;\", $str);\n        $str = str_replace(\"\u201c\",\"&ldquo;\", $str);\n        $str = str_replace(\"\u00bc\",\"&#188;\",$str);\n        $str = str_replace(\"\u00bd\",\"&#189;\",$str);\n        $str = str_replace(\"\u00be\",\"&#190;\",$str);\n\t\t$str = str_replace(\"\u2122\",\"&trade;\", $str);\n\t\t$str = trim($str);\n\t\t\n        if ($unescape) {\n\t\t\t$str = stripcslashes($str);  \n\t\t} else {\n\t        $str = addslashes($str);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Routine to convert string to an XML safe string\n     *\n     * @static\n     * @param string $str\n     * @return string\n     */\n\tstatic function convertXMLFeedSafeChar($str) {\n\t\t$str = str_replace(\"<br>\",\"\",$str);\n        $str = str_replace(\"</br>\",\"\",$str);\n        $str = str_replace(\"<br/>\",\"\",$str);\n        $str = str_replace(\"<br />\",\"\",$str);\n        $str = str_replace(\"&quot;\",'\"',$str);\n        $str = str_replace(\"&#39;\",\"'\",$str);\n        $str = str_replace(\"&rsquo;\",\"'\",$str);\n        $str = str_replace(\"&lsquo;\",\"'\",$str);        \n        $str = str_replace(\"&#174;\",\"\",$str);\n        $str = str_replace(\"\ufffd\",\"-\", $str);\n        $str = str_replace(\"\ufffd\",\"-\", $str); \n        $str = str_replace(\"\ufffd\", '\"', $str);\n        $str = str_replace(\"&rdquo;\",'\"', $str);\n        $str = str_replace(\"\ufffd\", '\"', $str);\n        $str = str_replace(\"&ldquo;\",'\"', $str);\n        $str = str_replace(\"\\r\\n\",\" \",$str); \n        $str = str_replace(\"\ufffd\",\" 1/4\",$str);\n        $str = str_replace(\"&#188;\",\" 1/4\", $str);\n        $str = str_replace(\"\ufffd\",\" 1/2\",$str);\n        $str = str_replace(\"&#189;\",\" 1/2\",$str);\n        $str = str_replace(\"\ufffd\",\" 3/4\",$str);\n        $str = str_replace(\"&#190;\",\" 3/4\",$str);\n        $str = str_replace(\"\ufffd\", \"(TM)\", $str);\n        $str = str_replace(\"&trade;\",\"(TM)\", $str);\n        $str = str_replace(\"&reg;\",\"(R)\", $str);\n        $str = str_replace(\"\ufffd\",\"(R)\",$str);        \n        $str = str_replace(\"&\",\"&amp;\",$str);      \n\t\t$str = str_replace(\">\",\"&gt;\",$str);      \t\t\n        return trim($str);\n\t}\n\n    /**\n     * Routine to convert any smart quotes into normal quotes\n     *\n     * @param string $str\n     * @return string\n     */\n    public static function convertSmartQuotes($str) {\n    \t$find[] = '\ufffd';  // left side double smart quote\n    \t$find[] = '\ufffd';  // right side double smart quote\n    \t$find[] = '\ufffd';  // left side single smart quote\n    \t$find[] = '\ufffd';  // right side single smart quote\n    \t$find[] = '\ufffd';  // elipsis\n    \t$find[] = '\ufffd';  // em dash\n    \t$find[] = '\ufffd';  // en dash\n\n        $replace[] = '\"';\n       \t$replace[] = '\"';\n       \t$replace[] = \"'\";\n       \t$replace[] = \"'\";\n       \t$replace[] = \"...\";\n       \t$replace[] = \"-\";\n       \t$replace[] = \"-\";\n\n        $find[] = '\u201c';  // left side double smart quote\n        $find[] = '\u201d';  // right side double smart quote\n        $find[] = '\u2018';  // left side single smart quote\n        $find[] = '\u2019';  // right side single smart quote\n        $find[] = '\u2026';  // ellipsis\n        $find[] = '\u2014';  // em dash\n        $find[] = '\u2013';  // en dash\n\n        $replace[] = '\"';\n        $replace[] = '\"';\n        $replace[] = \"'\";\n        $replace[] = \"'\";\n        $replace[] = \"...\";\n        $replace[] = \"-\";\n        $replace[] = \"-\";\n\n//        $find[] = chr(145);\n//        $find[] = chr(146);\n//        $find[] = chr(147);\n//        $find[] = chr(148);\n//        $find[] = chr(150);\n//        $find[] = chr(151);\n//        $find[] = chr(133);\n//        $find[] = chr(149);\n//        $find[] = chr(11);\n//\n//        $replace[] = \"'\";\n//        $replace[] = \"'\";\n//        $replace[] = \"\\\"\";\n//        $replace[] = \"\\\"\";\n//        $replace[] = \"-\";\n//        $replace[] = \"-\";\n//        $replace[] = \"...\";\n//        $replace[] = \"&bull;\";\n//        $replace[] = \"\\n\";\n\n    \treturn str_replace($find, $replace, $str);\n    }\n\n    /**\n     * Enhanced variation of strip_tags with 'invert' option to remove specific tags\n     *\n     * @param $text\n     * @param string $tags\n     * @param bool $invert\n     * @return mixed\n     */\n    public static function strip_tags_content($text, $tags = '', $invert = false)\n    {\n        preg_match_all('/<(.+?)[\\s]*\\/?[\\s]*>/si', trim($tags), $tags);\n        $tags = array_unique($tags[1]);\n\n        if (is_array($tags) AND count($tags) > 0) {\n            if ($invert == false) {\n                return preg_replace('@<(?!(?:' . implode('|', $tags) . ')\\b)(\\w+)\\b.*?>.*?</\\1>@si', '', $text);\n            } else {\n                return preg_replace('@<(' . implode('|', $tags) . ')\\b.*?>.*?</\\1>@si', '', $text);\n            }\n        } elseif ($invert == false) {\n            return preg_replace('@<(\\w+)\\b.*?>.*?</\\1>@si', '', $text);\n        }\n        return $text;\n    }\n\n    /**\\\n     * Replace any non-ascii character with its hex code with NO active db connection\n     */\n    public static function escape($value) {\n        global $db;\n\n        if ($db->havedb) {\n            return $db->escapeString($value);\n        }\n\n        $return = '';\n        for ($i = 0, $iMax = strlen($value); $i < $iMax; $i++) {\n            $char = $value[$i];\n            $ord = ord($char);\n            if($char !== \"'\" && $char !== \"\\\"\" && $char !== '\\\\' && $ord >= 32 && $ord <= 126)\n                $return .= $char;\n            else\n                $return .= '\\\\x' . dechex($ord);\n        }\n        return $return;\n    }\n\n    /**\n     * Summarize or short a long string\n     *\n     * @param        $string\n     * @param string $strtype\n     * @param string $type\n     *\n     * @return string\n     */\n    public static function summarize($string, $strtype='html', $type='para', $more='...') {\n        $sep = ($strtype == \"html\" ? array(\"</p>\", \"</div>\") : array(\"\\r\\n\", \"\\n\", \"\\r\"));\n        $origstring = $string;\n\n        switch ($type) {\n            case \"para\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&amp;#160;\",\" \",htmlentities(expString::convertSmartQuotes(strip_tags($string)),ENT_QUOTES));\n                return expString::convertSmartQuotes(strip_tags($string));\n                break;\n            case \"paralinks\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&#160;\",\" \",htmlspecialchars_decode(htmlentities(expString::convertSmartQuotes(strip_tags($string,'<a>')),ENT_QUOTES)));\n                return expString::convertSmartQuotes(strip_tags($string, '<a>'));\n                break;\n            case \"parapaged\":\n//               $s = '<div style=\"page-break-after: always;\"><span style=\"display: none;\">&nbsp;</span></div>';\n                $s = '<div style=\"page-break-after: always';\n                $para = explode($s, $string);\n                $string = $para[0];\n                return expString::convertSmartQuotes($string);\n                break;\n            case \"parahtml\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n                if (!empty($string)) {\n                    $isText = true;\n                    $ret = \"\";\n                    $i = 0;\n    //                    $currentChar = \"\";\n    //                    $lastSpacePosition = -1;\n    //                    $lastChar = \"\";\n                    $tagsArray = array();\n                    $currentTag = \"\";\n    //                    $tagLevel = 0;\n    //                    $noTagLength = strlen(strip_tags($string));\n\n                    // Parser loop\n                    for ($j = 0, $jMax = strlen($string); $j < $jMax; $j++) {\n\n                        $currentChar = substr($string, $j, 1);\n                        $ret .= $currentChar;\n\n                        // Lesser than event\n                        if ($currentChar == \"<\") $isText = false;\n\n                        // Character handler\n                        if ($isText) {\n\n                            // Memorize last space position\n                            if ($currentChar == \" \") {\n                                $lastSpacePosition = $j;\n                            } else {\n                                $lastChar = $currentChar;\n                            }\n\n                            $i++;\n                        } else {\n                            $currentTag .= $currentChar;\n                        }\n\n                        // Greater than event\n                        if ($currentChar == \">\") {\n                            $isText = true;\n\n                            // Opening tag handler\n                            if ((strpos($currentTag, \"<\") !== FALSE) &&\n                                (strpos($currentTag, \"/>\") === FALSE) &&\n                                (strpos($currentTag, \"</\") === FALSE)\n                            ) {\n\n                                // Tag has attribute(s)\n                                if (strpos($currentTag, \" \") !== FALSE) {\n                                    $currentTag = substr($currentTag, 1, strpos($currentTag, \" \") - 1);\n                                } else {\n                                    // Tag doesn't have attribute(s)\n                                    $currentTag = substr($currentTag, 1, -1);\n                                }\n\n                                array_push($tagsArray, $currentTag);\n\n                            } else if (strpos($currentTag, \"</\") !== FALSE) {\n                                array_pop($tagsArray);\n                            }\n\n                            $currentTag = \"\";\n                        }\n                    }\n                    // Cut HTML string at last space position\n                    //                if ($length < $noTagLength) {\n                    //                    if ($lastSpacePosition != -1) {\n                    //                        $ret = substr($string, 0, $lastSpacePosition);\n                    //                    } else {\n                    //                        $ret = substr($string, $j);\n                    //                    }\n                    //                }\n                    if (sizeof($tagsArray) != 0) {\n                        // Close broken XHTML elements\n                        while (sizeof($tagsArray) != 0) {\n                            if (sizeof($tagsArray) > 1) {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            } // You may add more tags here to put the link and added text before the closing tag\n                            elseif ($aTag == 'p' || 'div') {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            } else {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            }\n                        }\n                    }\n                }\n                return expString::convertSmartQuotes($string);\n                break;\n            default:\n                $words = explode(\" \", strip_tags($string));\n                $string = implode(\" \", array_slice($words, 0, $type + 0));\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&amp;#160;\",\" \",htmlentities(expString::convertSmartQuotes($string),ENT_QUOTES));\n                return expString::convertSmartQuotes($string);\n                break;\n        }\n    }\n\n    public static function parseAndTrimExport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n        //echo \"1<br>\"; eDebug($str);\n\n        $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#174;\", $str);\n        $str = str_replace(\"\ufffd\", \"-\", $str);\n        $str = str_replace(\"\ufffd\", \"&#151;\", $str);\n        $str = str_replace(\"\ufffd\", \"&rdquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&ldquo;\", $str);\n        $str = str_replace(\"\\r\\n\", \" \", $str);\n        $str = str_replace(\"\\t\", \" \", $str);\n        $str = str_replace(\",\", \"\\,\", $str);\n        $str = str_replace(\"\ufffd\", \"&#188;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#189;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#190;\", $str);\n\n        if (!$isHTML) {\n            $str = str_replace('\\\"', \"&quot;\", $str);\n            $str = str_replace('\"', \"&quot;\", $str);\n        } else {\n            $str = str_replace('\"', '\"\"', $str);\n        }\n\n        //$str = htmlspecialchars($str);\n        //$str = utf8_encode($str);\n        $str = trim(str_replace(\"\ufffd\", \"&trade;\", $str));\n        //echo \"2<br>\"; eDebug($str,die);\n        return $str;\n    }\n\n    public static function parseAndTrimImport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n        //echo \"1<br>\"; eDebug($str);\n        global $db;\n\n        $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#174;\", $str);\n        $str = str_replace(\"\ufffd\", \"-\", $str);\n        $str = str_replace(\"\ufffd\", \"&#151;\", $str);\n        $str = str_replace(\"\ufffd\", \"&rdquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&ldquo;\", $str);\n        $str = str_replace(\"\\r\\n\", \" \", $str);\n        $str = str_replace(\"\\,\", \",\", $str);\n        $str = str_replace('\"\"', '\"', $str); //do this no matter what...in case someone added a quote in a non HTML field\n        if (!$isHTML) {\n            //if HTML, then leave the single quotes alone, otheriwse replace w/ special Char\n            $str = str_replace('\"', \"&quot;\", $str);\n        }\n        $str = str_replace(\"\ufffd\", \"&#188;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#189;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#190;\", $str);\n        //$str = htmlspecialchars($str);\n        //$str = utf8_encode($str);\n//        if (DB_ENGINE=='mysqli') {\n//\t        $str = @mysqli_real_escape_string($db->connection,trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n//        } elseif(DB_ENGINE=='mysql') {\n//            $str = @mysql_real_escape_string(trim(str_replace(\"\ufffd\", \"&trade;\", $str)),$db->connection);\n//        } else {\n//\t        $str = trim(str_replace(\"\ufffd\", \"&trade;\", $str));\n//        }\n        $str = @$db->escapeString($db->connection, trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n        //echo \"2<br>\"; eDebug($str,die);\n        return $str;\n    }\n\n    public static function outputField($val, $eof = ',', $isHTML = false) {\n        $newVal = self::parseAndTrimExport($val, $isHTML);\n        if ($newVal != '') return '\"' . $newVal . '\"' . $eof;\n        else return $eof;\n    }\n\n    public static function stripLineEndings($val) {\n        return preg_replace('/\\r\\n/', ' ', trim($val));\n    }\n\n    /**\n     * Scrub input string for possible security issues.\n     *\n     * @static\n     * @param $data string\n     * @return string\n     */\n    public static function sanitize(&$data) {\n//        return $data;\n\n        if (is_array($data)) {\n            $saved_params = array();\n            if (!empty($data['controller']) && $data['controller'] == 'snippet') {\n                $saved_params['body'] = $data['body'];  // store snippet body\n            }\n            foreach ($data as $var=>$val) {\n//                $data[$var] = self::sanitize($val);\n                $data[$var] = self::xss_clean($val);\n            }\n            if (!empty($saved_params)) {\n                $data = array_merge($data, $saved_params);  // add stored snippet body\n            }\n        } else {\n            if (empty($data)) {\n                return $data;\n            }\n\n            $data = self::xss_clean($data);\n\n            //fixme orig exp method\n            if(0) {\n                // remove whitespaces and tags\n//            $data = strip_tags(trim($data));\n                // remove whitespaces and script tags\n                $data = self::strip_tags_content(trim($data), '<script>', true);\n//            $data = self::strip_tags_content(trim($data), '<iframe>', true);\n\n                // apply stripslashes if magic_quotes_gpc is enabled\n                if (get_magic_quotes_gpc()) {\n                    $data = stripslashes($data);\n                }\n\n                $data = self::escape($data);\n\n                // re-escape newlines\n                $data = str_replace(array('\\r', '\\n'), array(\"\\r\", \"\\n\"), $data);\n            }\n        }\n        return $data;\n    }\n\n    // xss_clean //\n\n    /**\n  \t * Character set\n  \t *\n  \t * Will be overridden by the constructor.\n  \t *\n  \t * @var\tstring\n  \t */\n  \tpublic static $charset = 'UTF-8';\n\n    /**\n   \t * XSS Hash\n   \t *\n   \t * Random Hash for protecting URLs.\n   \t *\n   \t * @var\tstring\n   \t */\n   \tprotected static $_xss_hash;\n\n    /**\n   \t * List of never allowed strings\n   \t *\n   \t * @var\tarray\n   \t */\n    protected static $_never_allowed_str =\tarray(\n   \t\t'document.cookie'\t=> '[removed]',\n   \t\t'document.write'\t=> '[removed]',\n   \t\t'.parentNode'\t\t=> '[removed]',\n   \t\t'.innerHTML'\t\t=> '[removed]',\n   \t\t'-moz-binding'\t\t=> '[removed]',\n   \t\t'<!--'\t\t\t\t=> '&lt;!--',\n   \t\t'-->'\t\t\t\t=> '--&gt;',\n   \t\t'<![CDATA['\t\t\t=> '&lt;![CDATA[',\n   \t\t'<comment>'\t\t\t=> '&lt;comment&gt;'\n   \t);\n\n   \t/**\n   \t * List of never allowed regex replacements\n   \t *\n   \t * @var\tarray\n   \t */\n    protected static $_never_allowed_regex = array(\n   \t\t'javascript\\s*:',\n   \t\t'(document|(document\\.)?window)\\.(location|on\\w*)',\n   \t\t'expression\\s*(\\(|&\\#40;)', // CSS and IE\n   \t\t'vbscript\\s*:', // IE, surprise!\n   \t\t'wscript\\s*:', // IE\n   \t\t'jscript\\s*:', // IE\n   \t\t'vbs\\s*:', // IE\n   \t\t'Redirect\\s+30\\d',\n   \t\t\"([\\\"'])?data\\s*:[^\\\\1]*?base64[^\\\\1]*?,[^\\\\1]*?\\\\1?\"\n   \t);\n\n    /**\n   \t * XSS Clean\n   \t *\n   \t * Sanitizes data so that Cross Site Scripting Hacks can be\n   \t * prevented.  This method does a fair amount of work but\n   \t * it is extremely thorough, designed to prevent even the\n   \t * most obscure XSS attempts.  Nothing is ever 100% foolproof,\n   \t * of course, but I haven't been able to get anything passed\n   \t * the filter.\n   \t *\n   \t * Note: Should only be used to deal with data upon submission.\n   \t *\t It's not something that should be used for general\n   \t *\t runtime processing.\n   \t *\n   \t * @link\thttp://channel.bitflux.ch/wiki/XSS_Prevention\n   \t * \t\tBased in part on some code and ideas from Bitflux.\n   \t *\n   \t * @link\thttp://ha.ckers.org/xss.html\n   \t * \t\tTo help develop this script I used this great list of\n   \t *\t\tvulnerabilities along with a few other hacks I've\n   \t *\t\tharvested from examining vulnerabilities in other programs.\n   \t *\n   \t * @param\tstring|string[]\t$str\t\tInput data\n   \t * @param \tbool\t\t$is_image\tWhether the input is an image\n   \t * @return\tstring\n   \t */\n   \tpublic static function xss_clean($str, $is_image = FALSE)\n   \t{\n   \t\t// Is the string an array?\n   \t\tif (is_array($str))\n   \t\t{\n   \t\t\twhile (list($key) = each($str))\n   \t\t\t{\n                if (preg_match('/^[a-zA-Z0-9_\\x7f-\\xff]*$/', $key)) {  // check for valid array name\n                    $str[$key] = self::xss_clean($str[$key]);\n                } else {\n                    return null;\n                }\n   \t\t\t}\n\n   \t\t\treturn $str;\n   \t\t}\n\n   \t\t// Remove Invisible Characters\n   \t\t$str = self::remove_invisible_characters($str);\n\n   \t\t/*\n   \t\t * URL Decode\n   \t\t *\n   \t\t * Just in case stuff like this is submitted:\n   \t\t *\n   \t\t * <a href=\"http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D\">Google</a>\n   \t\t *\n   \t\t * Note: Use rawurldecode() so it does not remove plus signs\n   \t\t */\n   \t\tdo\n   \t\t{\n   \t\t\t$str = rawurldecode($str);\n   \t\t}\n   \t\twhile (preg_match('/%[0-9a-f]{2,}/i', $str));\n\n   \t\t/*\n   \t\t * Convert character entities to ASCII\n   \t\t *\n   \t\t * This permits our tests below to work reliably.\n   \t\t * We only convert entities that are within tags since\n   \t\t * these are the ones that will pose security problems.\n   \t\t */\n   \t\t$str = preg_replace_callback(\"/[^a-z0-9>]+[a-z0-9]+=([\\'\\\"]).*?\\\\1/si\", array('self', '_convert_attribute'), $str);\n   \t\t$str = preg_replace_callback('/<\\w+.*/si', array('self', '_decode_entity'), $str);\n\n   \t\t// Remove Invisible Characters Again!\n   \t\t$str = self::remove_invisible_characters($str);\n\n   \t\t/*\n   \t\t * Convert all tabs to spaces\n   \t\t *\n   \t\t * This prevents strings like this: ja\tvascript\n   \t\t * NOTE: we deal with spaces between characters later.\n   \t\t * NOTE: preg_replace was found to be amazingly slow here on\n   \t\t * large blocks of data, so we use str_replace.\n   \t\t */\n   \t\t$str = str_replace(\"\\t\", ' ', $str);\n\n   \t\t// Capture converted string for later comparison\n   \t\t$converted_string = $str;\n\n   \t\t// Remove Strings that are never allowed\n   \t\t$str = self::_do_never_allowed($str);\n\n   \t\t/*\n   \t\t * Makes PHP tags safe\n   \t\t *\n   \t\t * Note: XML tags are inadvertently replaced too:\n   \t\t *\n   \t\t * <?xml\n   \t\t *\n   \t\t * But it doesn't seem to pose a problem.\n   \t\t */\n   \t\tif ($is_image === TRUE)\n   \t\t{\n   \t\t\t// Images have a tendency to have the PHP short opening and\n   \t\t\t// closing tags every so often so we skip those and only\n   \t\t\t// do the long opening tags.\n   \t\t\t$str = preg_replace('/<\\?(php)/i', '&lt;?\\\\1', $str);\n   \t\t}\n   \t\telse\n   \t\t{\n   \t\t\t$str = str_replace(array('<?', '?'.'>'), array('&lt;?', '?&gt;'), $str);\n   \t\t}\n\n   \t\t/*\n   \t\t * Compact any exploded words\n   \t\t *\n   \t\t * This corrects words like:  j a v a s c r i p t\n   \t\t * These words are compacted back to their correct state.\n   \t\t */\n   \t\t$words = array(\n   \t\t\t'javascript', 'expression', 'vbscript', 'jscript', 'wscript',\n   \t\t\t'vbs', 'script', 'base64', 'applet', 'alert', 'document',\n   \t\t\t'write', 'cookie', 'window', 'confirm', 'prompt', 'eval'\n   \t\t);\n\n   \t\tforeach ($words as $word)\n   \t\t{\n   \t\t\t$word = implode('\\s*', str_split($word)).'\\s*';\n\n   \t\t\t// We only want to do this when it is followed by a non-word character\n   \t\t\t// That way valid stuff like \"dealer to\" does not become \"dealerto\"\n   \t\t\t$str = preg_replace_callback('#('.substr($word, 0, -3).')(\\W)#is', array('self', '_compact_exploded_words'), $str);\n   \t\t}\n\n   \t\t/*\n   \t\t * Remove disallowed Javascript in links or img tags\n   \t\t * We used to do some version comparisons and use of stripos(),\n   \t\t * but it is dog slow compared to these simplified non-capturing\n   \t\t * preg_match(), especially if the pattern exists in the string\n   \t\t *\n   \t\t * Note: It was reported that not only space characters, but all in\n   \t\t * the following pattern can be parsed as separators between a tag name\n   \t\t * and its attributes: [\\d\\s\"\\'`;,\\/\\=\\(\\x00\\x0B\\x09\\x0C]\n   \t\t * ... however, remove_invisible_characters() above already strips the\n   \t\t * hex-encoded ones, so we'll skip them below.\n   \t\t */\n   \t\tdo\n   \t\t{\n   \t\t\t$original = $str;\n\n   \t\t\tif (preg_match('/<a/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace_callback('#<a[^a-z0-9>]+([^>]*?)(?:>|$)#si', array('self', '_js_link_removal'), $str);\n   \t\t\t}\n\n   \t\t\tif (preg_match('/<img/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace_callback('#<img[^a-z0-9]+([^>]*?)(?:\\s?/?>|$)#si', array('self', '_js_img_removal'), $str);\n   \t\t\t}\n\n   \t\t\tif (preg_match('/script|xss/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace('#</*(?:script|xss).*?>#si', '[removed]', $str);\n   \t\t\t}\n   \t\t}\n   \t\twhile ($original !== $str);\n   \t\tunset($original);\n\n   \t\t/*\n   \t\t * Sanitize naughty HTML elements\n   \t\t *\n   \t\t * If a tag containing any of the words in the list\n   \t\t * below is found, the tag gets converted to entities.\n   \t\t *\n   \t\t * So this: <blink>\n   \t\t * Becomes: &lt;blink&gt;\n   \t\t */\n   \t\t$pattern = '#'\n   \t\t\t.'<((?<slash>/*\\s*)(?<tagName>[a-z0-9]+)(?=[^a-z0-9]|$)' // tag start and name, followed by a non-tag character\n   \t\t\t.'[^\\s\\042\\047a-z0-9>/=]*' // a valid attribute character immediately after the tag would count as a separator\n   \t\t\t// optional attributes\n   \t\t\t.'(?<attributes>(?:[\\s\\042\\047/=]*' // non-attribute characters, excluding > (tag close) for obvious reasons\n   \t\t\t.'[^\\s\\042\\047>/=]+' // attribute characters\n   \t\t\t// optional attribute-value\n   \t\t\t\t.'(?:\\s*=' // attribute-value separator\n   \t\t\t\t\t.'(?:[^\\s\\042\\047=><`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=><`]*))' // single, double or non-quoted value\n   \t\t\t\t.')?' // end optional attribute-value group\n   \t\t\t.')*)' // end optional attributes group\n   \t\t\t.'[^>]*)(?<closeTag>\\>)?#isS';\n\n   \t\t// Note: It would be nice to optimize this for speed, BUT\n   \t\t//       only matching the naughty elements here results in\n   \t\t//       false positives and in turn - vulnerabilities!\n   \t\tdo\n   \t\t{\n   \t\t\t$old_str = $str;\n   \t\t\t$str = preg_replace_callback($pattern, array('self', '_sanitize_naughty_html'), $str);\n   \t\t}\n   \t\twhile ($old_str !== $str);\n   \t\tunset($old_str);\n\n   \t\t/*\n   \t\t * Sanitize naughty scripting elements\n   \t\t *\n   \t\t * Similar to above, only instead of looking for\n   \t\t * tags it looks for PHP and JavaScript commands\n   \t\t * that are disallowed. Rather than removing the\n   \t\t * code, it simply converts the parenthesis to entities\n   \t\t * rendering the code un-executable.\n   \t\t *\n   \t\t * For example:\teval('some code')\n   \t\t * Becomes:\teval&#40;'some code'&#41;\n   \t\t */\n   \t\t$str = preg_replace(\n   \t\t\t'#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)\\((.*?)\\)#si',\n   \t\t\t'\\\\1\\\\2&#40;\\\\3&#41;',\n   \t\t\t$str\n   \t\t);\n\n   \t\t// Final clean up\n   \t\t// This adds a bit of extra precaution in case\n   \t\t// something got through the above filters\n   \t\t$str = self::_do_never_allowed($str);\n\n   \t\t/*\n   \t\t * Images are Handled in a Special Way\n   \t\t * - Essentially, we want to know that after all of the character\n   \t\t * conversion is done whether any unwanted, likely XSS, code was found.\n   \t\t * If not, we return TRUE, as the image is clean.\n   \t\t * However, if the string post-conversion does not matched the\n   \t\t * string post-removal of XSS, then it fails, as there was unwanted XSS\n   \t\t * code found and removed/changed during processing.\n   \t\t */\n   \t\tif ($is_image === TRUE)\n   \t\t{\n   \t\t\treturn ($str === $converted_string);\n   \t\t}\n\n   \t\treturn $str;\n   \t}\n\n    /**\n   \t * Do Never Allowed\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param \tstring\n   \t * @return \tstring\n   \t */\n   \tprotected static function _do_never_allowed($str)\n   \t{\n   \t\t$str = str_replace(array_keys(self::$_never_allowed_str), self::$_never_allowed_str, $str);\n\n   \t\tforeach (self::$_never_allowed_regex as $regex)\n   \t\t{\n   \t\t\t$str = preg_replace('#'.$regex.'#is', '[removed]', $str);\n   \t\t}\n\n   \t\treturn $str;\n   \t}\n\n\t/**\n\t * Remove Invisible Characters\n\t *\n\t * This prevents sandwiching null characters\n\t * between ascii characters, like Java\\0script.\n\t *\n\t * @param\tstring\n\t * @param\tbool\n\t * @return\tstring\n\t */\n\tpublic static function remove_invisible_characters($str, $url_encoded = TRUE)\n\t{\n\t\t$non_displayables = array();\n\n\t\t// every control character except newline (dec 10),\n\t\t// carriage return (dec 13) and horizontal tab (dec 09)\n\t\tif ($url_encoded)\n\t\t{\n\t\t\t$non_displayables[] = '/%0[0-8bcef]/';\t// url encoded 00-08, 11, 12, 14, 15\n\t\t\t$non_displayables[] = '/%1[0-9a-f]/';\t// url encoded 16-31\n\t\t}\n\n\t\t$non_displayables[] = '/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]+/S';\t// 00-08, 11, 12, 14-31, 127\n\n\t\tdo\n\t\t{\n\t\t\t$str = preg_replace($non_displayables, '', $str, -1, $count);\n\t\t}\n\t\twhile ($count);\n\n\t\treturn $str;\n\t}\n\n    /**\n   \t * HTML Entity Decode Callback\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _decode_entity($match)\n   \t{\n   \t\t// Protect GET variables in URLs\n   \t\t// 901119URL5918AMP18930PROTECT8198\n   \t\t$match = preg_replace('|\\&([a-z\\_0-9\\-]+)\\=([a-z\\_0-9\\-/]+)|i', self::xss_hash().'\\\\1=\\\\2', $match[0]);\n\n   \t\t// Decode, then un-protect URL GET vars\n   \t\treturn str_replace(\n            self::xss_hash(),\n   \t\t\t'&',\n            self::entity_decode($match, self::$charset)\n   \t\t);\n   \t}\n\n    /**\n   \t * XSS Hash\n   \t *\n   \t * Generates the XSS hash if needed and returns it.\n   \t *\n   \t * @see\t\tCI_Security::$_xss_hash\n   \t * @return\tstring\tXSS hash\n   \t */\n   \tpublic static function xss_hash()\n   \t{\n   \t\tif (self::$_xss_hash === NULL)\n   \t\t{\n   \t\t\t$rand = self::get_random_bytes(16);\n            self::$_xss_hash = ($rand === FALSE)\n   \t\t\t\t? md5(uniqid(mt_rand(), TRUE))\n   \t\t\t\t: bin2hex($rand);\n   \t\t}\n\n   \t\treturn self::$_xss_hash;\n   \t}\n\n    /**\n   \t * HTML Entities Decode\n   \t *\n   \t * A replacement for html_entity_decode()\n   \t *\n   \t * The reason we are not using html_entity_decode() by itself is because\n   \t * while it is not technically correct to leave out the semicolon\n   \t * at the end of an entity most browsers will still interpret the entity\n   \t * correctly. html_entity_decode() does not convert entities without\n   \t * semicolons, so we are left with our own little solution here. Bummer.\n   \t *\n   \t * @link\thttp://php.net/html-entity-decode\n   \t *\n   \t * @param\tstring\t$str\t\tInput\n   \t * @param\tstring\t$charset\tCharacter set\n   \t * @return\tstring\n   \t */\n   \tpublic static function entity_decode($str, $charset = NULL)\n   \t{\n   \t\tif (strpos($str, '&') === FALSE)\n   \t\t{\n   \t\t\treturn $str;\n   \t\t}\n\n   \t\tstatic $_entities;\n\n   \t\tisset($charset) OR $charset = self::$charset;\n   \t\t$flag = expCore::is_php('5.4')\n   \t\t\t? ENT_COMPAT | ENT_HTML5\n   \t\t\t: ENT_COMPAT;\n\n   \t\tdo\n   \t\t{\n   \t\t\t$str_compare = $str;\n\n   \t\t\t// Decode standard entities, avoiding false positives\n   \t\t\tif (preg_match_all('/&[a-z]{2,}(?![a-z;])/i', $str, $matches))\n   \t\t\t{\n   \t\t\t\tif ( ! isset($_entities))\n   \t\t\t\t{\n   \t\t\t\t\t$_entities = array_map(\n   \t\t\t\t\t\t'strtolower',\n                        expCore::is_php('5.3.4')\n   \t\t\t\t\t\t\t? get_html_translation_table(HTML_ENTITIES, $flag, $charset)\n   \t\t\t\t\t\t\t: get_html_translation_table(HTML_ENTITIES, $flag)\n   \t\t\t\t\t);\n\n   \t\t\t\t\t// If we're not on PHP 5.4+, add the possibly dangerous HTML 5\n   \t\t\t\t\t// entities to the array manually\n   \t\t\t\t\tif ($flag === ENT_COMPAT)\n   \t\t\t\t\t{\n   \t\t\t\t\t\t$_entities[':'] = '&colon;';\n   \t\t\t\t\t\t$_entities['('] = '&lpar;';\n   \t\t\t\t\t\t$_entities[')'] = '&rpar;';\n   \t\t\t\t\t\t$_entities[\"\\n\"] = '&newline;';\n   \t\t\t\t\t\t$_entities[\"\\t\"] = '&tab;';\n   \t\t\t\t\t}\n   \t\t\t\t}\n\n   \t\t\t\t$replace = array();\n   \t\t\t\t$matches = array_unique(array_map('strtolower', $matches[0]));\n   \t\t\t\tforeach ($matches as &$match)\n   \t\t\t\t{\n   \t\t\t\t\tif (($char = array_search($match.';', $_entities, TRUE)) !== FALSE)\n   \t\t\t\t\t{\n   \t\t\t\t\t\t$replace[$match] = $char;\n   \t\t\t\t\t}\n   \t\t\t\t}\n\n   \t\t\t\t$str = str_ireplace(array_keys($replace), array_values($replace), $str);\n   \t\t\t}\n\n   \t\t\t// Decode numeric & UTF16 two byte entities\n   \t\t\t$str = html_entity_decode(\n   \t\t\t\tpreg_replace('/(&#(?:x0*[0-9a-f]{2,5}(?![0-9a-f;])|(?:0*\\d{2,4}(?![0-9;]))))/iS', '$1;', $str),\n   \t\t\t\t$flag,\n   \t\t\t\t$charset\n   \t\t\t);\n   \t\t}\n   \t\twhile ($str_compare !== $str);\n   \t\treturn $str;\n   \t}\n\n    /**\n   \t * Get random bytes\n   \t *\n   \t * @param\tint\t$length\tOutput length\n   \t * @return\tstring\n   \t */\n   \tpublic static function get_random_bytes($length)\n   \t{\n   \t\tif (empty($length) OR ! ctype_digit((string) $length))\n   \t\t{\n   \t\t\treturn FALSE;\n   \t\t}\n\n   \t\t// Unfortunately, none of the following PRNGs is guaranteed to exist ...\n   \t\tif (defined('MCRYPT_DEV_URANDOM') && ($output = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM)) !== FALSE)\n   \t\t{\n   \t\t\treturn $output;\n   \t\t}\n\n\n   \t\tif (is_readable('/dev/urandom') && ($fp = fopen('/dev/urandom', 'rb')) !== FALSE)\n   \t\t{\n   \t\t\t// Try not to waste entropy ...\n            expCore::is_php('5.4') && stream_set_chunk_size($fp, $length);\n   \t\t\t$output = fread($fp, $length);\n   \t\t\tfclose($fp);\n   \t\t\tif ($output !== FALSE)\n   \t\t\t{\n   \t\t\t\treturn $output;\n   \t\t\t}\n   \t\t}\n\n   \t\tif (function_exists('openssl_random_pseudo_bytes'))\n   \t\t{\n   \t\t\treturn openssl_random_pseudo_bytes($length);\n   \t\t}\n\n   \t\treturn FALSE;\n   \t}\n\n    /**\n   \t * Attribute Conversion\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _convert_attribute($match)\n   \t{\n   \t\treturn str_replace(array('>', '<', '\\\\'), array('&gt;', '&lt;', '\\\\\\\\'), $match[0]);\n   \t}\n\n    /**\n   \t * Compact Exploded Words\n   \t *\n   \t * Callback method for xss_clean() to remove whitespace from\n   \t * things like 'j a v a s c r i p t'.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$matches\n   \t * @return\tstring\n   \t */\n   \tprotected static function _compact_exploded_words($matches)\n   \t{\n   \t\treturn preg_replace('/\\s+/s', '', $matches[1]).$matches[2];\n   \t}\n\n    /**\n   \t * JS Link Removal\n   \t *\n   \t * Callback method for xss_clean() to sanitize links.\n   \t *\n   \t * This limits the PCRE backtracks, making it more performance friendly\n   \t * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in\n   \t * PHP 5.2+ on link-heavy strings.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _js_link_removal($match)\n   \t{\n   \t\treturn str_replace(\n   \t\t\t$match[1],\n   \t\t\tpreg_replace(\n   \t\t\t\t'#href=.*?(?:(?:alert|prompt|confirm)(?:\\(|&\\#40;)|javascript:|livescript:|mocha:|charset=|window\\.|document\\.|\\.cookie|<script|<xss|data\\s*:)#si',\n   \t\t\t\t'',\n   \t\t\t\tself::_filter_attributes($match[1])\n   \t\t\t),\n   \t\t\t$match[0]\n   \t\t);\n   \t}\n\n    /**\n   \t * JS Image Removal\n   \t *\n   \t * Callback method for xss_clean() to sanitize image tags.\n   \t *\n   \t * This limits the PCRE backtracks, making it more performance friendly\n   \t * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in\n   \t * PHP 5.2+ on image tag heavy strings.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _js_img_removal($match)\n   \t{\n   \t\treturn str_replace(\n   \t\t\t$match[1],\n   \t\t\tpreg_replace(\n   \t\t\t\t'#src=.*?(?:(?:alert|prompt|confirm|eval)(?:\\(|&\\#40;)|javascript:|livescript:|mocha:|charset=|window\\.|document\\.|\\.cookie|<script|<xss|base64\\s*,)#si',\n   \t\t\t\t'',\n   \t\t\t\tself::_filter_attributes($match[1])\n   \t\t\t),\n   \t\t\t$match[0]\n   \t\t);\n   \t}\n\n    /**\n   \t * Filter Attributes\n   \t *\n   \t * Filters tag attributes for consistency and safety.\n   \t *\n   \t * @used-by\tCI_Security::_js_img_removal()\n   \t * @used-by\tCI_Security::_js_link_removal()\n   \t * @param\tstring\t$str\n   \t * @return\tstring\n   \t */\n   \tprotected static function _filter_attributes($str)\n   \t{\n   \t\t$out = '';\n   \t\tif (preg_match_all('#\\s*[a-z\\-]+\\s*=\\s*(\\042|\\047)([^\\\\1]*?)\\\\1#is', $str, $matches))\n   \t\t{\n   \t\t\tforeach ($matches[0] as $match)\n   \t\t\t{\n   \t\t\t\t$out .= preg_replace('#/\\*.*?\\*/#s', '', $match);\n   \t\t\t}\n   \t\t}\n\n   \t\treturn $out;\n   \t}\n\n    /**\n   \t * Sanitize Naughty HTML\n   \t *\n   \t * Callback method for xss_clean() to remove naughty HTML elements.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$matches\n   \t * @return\tstring\n   \t */\n   \tprotected static function _sanitize_naughty_html($matches)\n   \t{\n   \t\tstatic $naughty_tags    = array(\n   \t\t\t'alert', 'prompt', 'confirm', 'applet', 'audio', 'basefont', 'base', 'behavior', 'bgsound',\n   \t\t\t'blink', 'body', 'embed', 'expression', 'form', 'frameset', 'frame', 'head', 'html', 'ilayer',\n   \t\t\t'input', 'button', 'select', 'isindex', 'layer', 'link', 'meta', 'keygen', 'object',\n   \t\t\t'plaintext', 'script', 'textarea', 'title', 'math', 'video', 'svg', 'xml', 'xss'\n            //,'style', 'iframe'\n   \t\t);\n\n   \t\tstatic $evil_attributes = array(\n   \t\t\t'on\\w+', 'xmlns', 'formaction', 'form', 'xlink:href', 'FSCommand', 'seekSegmentTime'\n            //, 'style'\n   \t\t);\n\n   \t\t// First, escape unclosed tags\n   \t\tif (empty($matches['closeTag']))\n   \t\t{\n   \t\t\treturn '&lt;'.$matches[1];\n   \t\t}\n   \t\t// Is the element that we caught naughty? If so, escape it\n   \t\telseif (in_array(strtolower($matches['tagName']), $naughty_tags, TRUE))\n   \t\t{\n   \t\t\treturn '&lt;'.$matches[1].'&gt;';\n   \t\t}\n   \t\t// For other tags, see if their attributes are \"evil\" and strip those\n   \t\telseif (isset($matches['attributes']))\n   \t\t{\n   \t\t\t// We'll store the already fitlered attributes here\n   \t\t\t$attributes = array();\n\n   \t\t\t// Attribute-catching pattern\n   \t\t\t$attributes_pattern = '#'\n   \t\t\t\t.'(?<name>[^\\s\\042\\047>/=]+)' // attribute characters\n   \t\t\t\t// optional attribute-value\n   \t\t\t\t.'(?:\\s*=(?<value>[^\\s\\042\\047=><`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=><`]*)))' // attribute-value separator\n   \t\t\t\t.'#i';\n\n   \t\t\t// Blacklist pattern for evil attribute names\n   \t\t\t$is_evil_pattern = '#^('.implode('|', $evil_attributes).')$#i';\n\n   \t\t\t// Each iteration filters a single attribute\n   \t\t\tdo\n   \t\t\t{\n   \t\t\t\t// Strip any non-alpha characters that may preceed an attribute.\n   \t\t\t\t// Browsers often parse these incorrectly and that has been a\n   \t\t\t\t// of numerous XSS issues we've had.\n   \t\t\t\t$matches['attributes'] = preg_replace('#^[^a-z]+#i', '', $matches['attributes']);\n\n   \t\t\t\tif ( ! preg_match($attributes_pattern, $matches['attributes'], $attribute, PREG_OFFSET_CAPTURE))\n   \t\t\t\t{\n   \t\t\t\t\t// No (valid) attribute found? Discard everything else inside the tag\n   \t\t\t\t\tbreak;\n   \t\t\t\t}\n\n   \t\t\t\tif (\n   \t\t\t\t\t// Is it indeed an \"evil\" attribute?\n   \t\t\t\t\tpreg_match($is_evil_pattern, $attribute['name'][0])\n   \t\t\t\t\t// Or does it have an equals sign, but no value and not quoted? Strip that too!\n   \t\t\t\t\tOR (trim($attribute['value'][0]) === '')\n   \t\t\t\t)\n   \t\t\t\t{\n   \t\t\t\t\t$attributes[] = 'xss=removed';\n   \t\t\t\t}\n   \t\t\t\telse\n   \t\t\t\t{\n   \t\t\t\t\t$attributes[] = $attribute[0][0];\n   \t\t\t\t}\n\n   \t\t\t\t$matches['attributes'] = substr($matches['attributes'], $attribute[0][1] + strlen($attribute[0][0]));\n   \t\t\t}\n   \t\t\twhile ($matches['attributes'] !== '');\n\n   \t\t\t$attributes = empty($attributes)\n   \t\t\t\t? ''\n   \t\t\t\t: ' '.implode(' ', $attributes);\n   \t\t\treturn '<'.$matches['slash'].$matches['tagName'].$attributes.'>';\n   \t\t}\n\n   \t\treturn $matches[0];\n   \t}\n\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expTheme\n *\n * @package    Subsystems\n * @subpackage Subsystems\n */\n\n/** @define \"BASE\" \"../../..\" */\nclass expTheme\n{\n\n    public static function initialize()\n    {\n        global $auto_dirs2;\n\n        // Initialize the theme subsystem 1.0 compatibility layer if requested\n\t\tif (defined('OLD_THEME_COMPATIBLE') && OLD_THEME_COMPATIBLE)\n            require_once(BASE.'framework/core/compat/theme.php');\n\n        if (!defined('DISPLAY_THEME')) {\n            /* exdoc\n             * The directory and class name of the current active theme.  This may be different\n             * than the configured theme (DISPLAY_THEME_REAL) due to previewing.\n             */\n            define('DISPLAY_THEME', DISPLAY_THEME_REAL);\n        }\n\n        if (!defined('THEME_ABSOLUTE')) {\n            /* exdoc\n             * The absolute path to the current active theme's files.  This is similar to the BASE constant\n             */\n            define('THEME_ABSOLUTE', BASE . 'themes/' . DISPLAY_THEME . '/'); // This is the recommended way\n        }\n\n        if (!defined('THEME_RELATIVE')) {\n            /* exdoc\n             * The relative web path to the current active theme.  This is similar to the PATH_RELATIVE constant.\n             */\n            define('THEME_RELATIVE', PATH_RELATIVE . 'themes/' . DISPLAY_THEME . '/');\n        }\n        if (!defined('THEME_STYLE')) {\n            /* exdoc\n             * The name of the current active theme style.\n             */\n            define('THEME_STYLE', THEME_STYLE_REAL);\n        }\n        if (THEME_STYLE != '' && file_exists(BASE . 'themes/' . DISPLAY_THEME . '/config_' . THEME_STYLE . '.php')) {\n            @include_once(BASE . 'themes/' . DISPLAY_THEME . '/config_' . THEME_STYLE . '.php');\n        } elseif (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/config.php')) {\n            @include_once(BASE . 'themes/' . DISPLAY_THEME . '/config.php');\n        }\n        if (!defined('BTN_SIZE')) {\n            define('BTN_SIZE', 'medium');\n        } // Awesome Button theme\n        if (!defined('BTN_COLOR')) {\n            define('BTN_COLOR', 'black');\n        } // Awesome Button theme\n        if (!defined('SWATCH')) {\n            define('SWATCH', \"''\");\n        } // Twitter Bootstrap theme\n\n        // add our theme folder into autoload to prioritize custom (theme) modules\n        array_unshift($auto_dirs2, BASE . 'themes/' . DISPLAY_THEME . '/modules');\n    }\n\n    public static function head($config = array())\n    {\n        echo self::headerInfo($config);\n        self::advertiseRSS();\n    }\n\n    public static function headerInfo($config)\n    {\n        global $sectionObj, $validateTheme, $head_config, $auto_dirs, $less_vars, $framework;\n\n        $validateTheme['headerinfo'] = true;\n        // end checking for headerInfo\n\n        // globalize header configuration\n        $head_config = $config;\n\n        // set theme framework type\n        $framework = !empty($head_config['framework']) ? $head_config['framework'] : '';\n        if (empty($framework)) {\n            if (NEWUI) {\n                $framework = 'newui';\n            } else {\n                $framework = 'yui';  // yui is the 2.x default framework\n            }\n        }\n        expSession::set('framework', $framework);\n\n        // set the global less variables from the head config\n        if (!empty($config['lessvars'])) {\n            $less_vars = $config['lessvars'];\n        } else {\n            $less_vars = array();\n        }\n\n        // check to see if we're in XHTML or HTML mode\n        if (isset($config['xhtml']) && $config['xhtml'] == true) {\n            define('XHTML', 1);\n            define('XHTML_CLOSING', \"/\"); //default\n        } else {\n            define('XHTML', 0);\n            define('XHTML_CLOSING', \"\");\n        }\n\n        // load primer, lessprimer, link (css) and lesscss & normalize CSS files\n        if (!empty($config['css_primer']) || !empty($config['lessprimer']) || !empty($config['link']) || !empty($config['lesscss']) || !empty($config['normalize'])) {\n            expCSS::pushToHead($config);\n        };\n\n        // default loading of primer CSS files to true if not set\n        if (empty($config['css_primer']) && empty($config['lessprimer'])) {\n            $head_config = array('css_primer' => true) + $head_config;\n        }\n\n        // parse & load core css files\n        if (isset($config['css_core'])) {\n            if (is_array($config['css_core'])) {\n                $corecss = implode(\",\", $config['css_core']);\n                expCSS::pushToHead(\n                    array(\n                        \"corecss\" => $corecss\n                    )\n                );\n            }\n        } else {\n            $head_config['css_core'] = false;\n        };\n\n        // default loading of view based CSS inclusion is true if not set\n        if (!empty($config['css_links']) || !isset($config['css_links'])) {\n            $head_config['css_links'] = true;\n        }\n\n        // default theme css collecting is true if not set\n        if (!empty($config['css_theme']) || !isset($config['css_theme'])) {\n            $head_config['css_theme'] = true;\n        }\n\n        if (empty($sectionObj)) {\n            return false;\n        }\n\n        // set up controls search order based on framework\n        if (empty($head_config['framework'])) {\n            $head_config['framework'] = '';\n        }\n        if (bs() || $framework == 'jquery') {\n            array_unshift(\n                $auto_dirs,\n                BASE . 'framework/core/forms/controls/jquery'\n            );\n        }\n        if (bs(true)) {\n            array_unshift(\n                $auto_dirs,\n                BASE . 'framework/core/forms/controls/bootstrap'\n            );\n        }\n        if (bs3(true)) {\n            array_unshift(\n                $auto_dirs,\n                BASE . 'framework/core/forms/controls/bootstrap3'\n            );\n        }\n        if (newui()) {\n            expCSS::pushToHead(array(\n                \"lessprimer\"=>\"external/bootstrap3/less/newui.less\",\n//                \"lessvars\"=>array(\n//                    'swatch'=>'cerulean',  // newui uses this swatch\n//                    'themepath'=>'cerulean',  // hack to prevent crash\n//                ),\n            ));\n            if (!defined(\"BTN_SIZE\")) define(\"BTN_SIZE\", 'small');\n            array_unshift($auto_dirs, BASE . 'framework/core/forms/controls/newui');\n        }\n        array_unshift($auto_dirs, BASE . 'themes/' . DISPLAY_THEME . '/controls');\n\n//        if (!expSession::is_set('framework') || expSession::get(\n//                'framework'\n//            ) != $head_config['framework']\n//        ) {\n//            expSession::set('framework', $head_config['framework']);\n//        }\n        // mark the theme framework\n\n        $metainfo = self::pageMetaInfo();\n\n        // default to showing all meta tags unless specifically set to false\n        if (!isset($config['meta']['content_type'])) {\n            $config['meta']['content_type'] = true;\n        }\n        if (!isset($config['meta']['content_language'])) {\n            $config['meta']['content_language'] = true;\n        }\n        if (!isset($config['meta']['generator'])) {\n            $config['meta']['generator'] = true;\n        }\n        if (!isset($config['meta']['keywords'])) {\n            $config['meta']['keywords'] = true;\n        }\n        if (!isset($config['meta']['description'])) {\n            $config['meta']['description'] = true;\n        }\n        if (!isset($config['meta']['canonical'])) {\n            $config['meta']['canonical'] = true;\n        }\n        if (!isset($config['meta']['rich'])) {\n            $config['meta']['rich'] = true;\n        }\n        if (!isset($config['meta']['fb'])) {\n            $config['meta']['fb'] = true;\n        }\n        if (!isset($config['meta']['tw'])) {\n            $config['meta']['tw'] = true;\n        }\n        if (!isset($config['meta']['viewport'])) {\n            $config['meta']['viewport'] = true;\n        }\n        if (!isset($config['meta']['ie_compat'])) {\n            $config['meta']['ie_compat'] = true;\n        }\n\n        $str = '<title>' . $metainfo['title'] . \"</title>\\n\";\n        if ($config['meta']['content_type']) {\n            $str .= \"\\t\" . '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' . LANG_CHARSET . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        $locale = strtolower(str_replace('_', '-', LOCALE));\n        if ($config['meta']['content_language']) {\n            $str .= \"\\t\" . '<meta content=\"' . $locale . '\" http-equiv=\"Content-Language\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['generator']) {\n            $str .= \"\\t\" . '<meta name=\"Generator\" content=\"Exponent Content Management System - v' . expVersion::getVersion(\n                    true\n                ) . self::getThemeDetails() . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['keywords']) {\n            $str .= \"\\t\" . '<meta name=\"Keywords\" content=\"' . $metainfo['keywords'] . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['description']) {\n            $str .= \"\\t\" . '<meta name=\"Description\" content=\"' . $metainfo['description'] . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['canonical'] && !empty($metainfo['canonical'])) {\n            $str .= \"\\t\" . '<link rel=\"canonical\" href=\"' . $metainfo['canonical'] . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['rich'] && !empty($metainfo['rich'])) {\n            $str .= \"\\t\" . $metainfo['rich'] . \"\\n\";\n        }\n        if ($config['meta']['fb'] && !empty($metainfo['fb'])) {\n            foreach ($metainfo['fb'] as $key => $value) {\n                if (!empty($value)) {\n                    $str .= \"\\t\" . '<meta property=\"og:' . $key . '\" content=\"' . $value . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n                }\n            }\n        }\n        if ($config['meta']['tw'] && !empty($metainfo['tw'])) {\n            foreach ($metainfo['tw'] as $key => $value) {\n                if (!empty($value)) {\n                    $str .= \"\\t\" . '<meta name=\"twitter:' . $key . '\" content=\"' . $value . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n                }\n            }\n        }\n\n        if ($metainfo['noindex'] || $metainfo['nofollow']) {\n            $str .= \"\\t\" . '<meta name=\"robots\" content=\"' . (!empty($metainfo['noindex']) ? 'noindex' : '') . ' ' . ($metainfo['nofollow'] ? 'nofollow' : '') . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        if (empty($config['viewport'])) {\n            $viewport = 'width=device-width, user-scalable=yes';\n        } else {\n            if (!empty($config['viewport']['width'])) {\n                $viewport = 'width=' . $config['viewport']['width'];\n            } else {\n                $viewport = 'width=device-width';\n            }\n            if (!empty($config['viewport']['height'])) {\n                $viewport .= ', height=' . $config['viewport']['height'];\n            }\n            if (!empty($config['viewport']['initial_scale'])) {\n                $viewport .= ' initial-scale=' . $config['viewport']['initial_scale'];\n//            } else {\n//                $viewport .= ', initial-scale=1.0';\n            }\n            if (!empty($config['viewport']['minimum_scale'])) {\n                $viewport .= ', minimum-scale=' . $config['viewport']['minimum_scale'];\n            }\n            if (!empty($config['viewport']['maximum_scale'])) {\n                $viewport .= ', maximum-scale=' . $config['viewport']['maximum_scale'];\n            }\n            if (!empty($config['viewport']['user_scalable'])) {\n                $viewport .= ', user-scalable=' . ($config['viewport']['user_scalable'] ? \"yes\" : \"no\");\n            } else {\n                $viewport .= ', user-scalable=yes';\n            }\n        }\n        if ($config['meta']['viewport']) {\n            $str .= \"\\t\" . '<meta name=\"viewport\" content=\"' . $viewport . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        // favicon\n        if (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/favicon.png')) {\n            $str .= \"\\t\" . '<link rel=\"icon\" href=\"' . URL_FULL . 'themes/' . DISPLAY_THEME . '/favicon.png\" type=\"image/png\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        } elseif (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/favicon.ico')) {\n            $str .= \"\\t\" . '<link rel=\"icon\" href=\"' . URL_FULL . 'themes/' . DISPLAY_THEME . '/favicon.ico\" type=\"image/x-icon\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        // touch icons\n        if (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/apple-touch-icon.png')) {\n            $str .= \"\\t\" . '<link rel=\"apple-touch-icon\" href=\"' . URL_FULL . 'themes/' . DISPLAY_THEME . '/apple-touch-icon.png\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/apple-touch-icon-precomposed.png')) {\n            $str .= \"\\t\" . '<link rel=\"apple-touch-icon-precomposed\" href=\"' . URL_FULL . 'themes/' . DISPLAY_THEME . '/apple-touch-icon-precomposed.png\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        // support for xmlrpc blog editors like Windows Live Writer, etc...\n        if (USE_XMLRPC) {\n            if (file_exists(BASE . 'rsd.xml')) {\n                $str .= \"\\t\" . '<link rel=\"EditURI\" href=\"' . URL_FULL . 'rsd.xml\" type=\"application/rsd+xml\" ' . XHTML_CLOSING . '>' . \"\\n\";\n            }\n            $str .= \"\\t\" . '<link rel=\"wlwmanifest\" href=\"' . URL_FULL . 'wlwmanifest.xml\" type=\"application/wlwmanifest+xml\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        // when minification is used, the comment below gets replaced when the buffer is dumped\n        $str .= '<!-- MINIFY REPLACE -->';\n\n        if ($config['meta']['ie_compat']) {\n            // some IE 6 support\n            $str .= \"\\t\" . '<!--[if IE 6]><style type=\"text/css\">  body { behavior: url(' . PATH_RELATIVE . 'external/csshover.htc); }</style><![endif]-->' . \"\\n\";\n\n            // css3 transform support for IE 6-8\n//            $str .= \"\\t\" . '<!--[if lt IE 9]><style type=\"text/css\">  body { behavior: url(' . PATH_RELATIVE . 'external/ms-transform.htc); }</style><![endif]-->' . \"\\n\";\n\n            // html5 support for IE 6-8\n            $str .= \"\\t\" . '<!--[if lt IE 9]><script src=\"' . PATH_RELATIVE . 'external/html5shiv/html5shiv-shiv.js\"></script><![endif]-->' . \"\\n\";\n\n            // media css support for IE 6-8\n            $str .= \"\\t\" . '<!--[if lt IE 9]><script src=\"' . PATH_RELATIVE . 'external/Respond-1.4.2/dest/respond.min.js\"></script><![endif]-->' . \"\\n\";\n\n            // canvas support for IE 6-8 - now done by webshims\n//            $str .= \"\\t\" . '<!--[if lt IE 9]><script src=\"' . PATH_RELATIVE . 'external/excanvas.js\"></script><![endif]-->' . \"\\n\";\n\n            //Win 8/IE 10 work around\n            $str .= \"\\t\" . '<!--[if IE 10]><link rel=\"stylesheet\" href=\"' . PATH_RELATIVE . 'external/ie10-viewport-bug-workaround.css\" type=\"text/css\"' . XHTML_CLOSING . '><![endif]-->' . \"\\n\";\n            $str .= \"\\t\" . '<!--[if IE 10]><script src=\"' . PATH_RELATIVE . 'external/ie10-viewport-bug-workaround.js\"></script><![endif]-->' . \"\\n\";\n\n            // turn off ie compatibility mode which will break the display\n            $str .= \"\\t\" . '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        return $str;\n    }\n\n    public static function foot($params = array())\n    {\n        self::footerInfo($params);\n    }\n\n    public static function footerInfo($params = array())\n    {\n        // checks to see if the theme is calling footerInfo.\n        global $validateTheme, $user, $jsForHead;\n\n        $validateTheme['footerinfo'] = true;\n\n        if (!empty($user->getsToolbar) && PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1 && !defined(\n                'SOURCE_SELECTOR'\n            ) && empty($params['hide-slingbar'])\n        ) {\n            self::module(array(\"controller\" => \"administration\", \"action\" => \"toolbar\", \"source\" => \"admin\"));\n        }\n\n        if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {\n            echo '<div style=\"text-align:center\"><a href=\"', makeLink(\n                    array('module' => 'administration', 'action' => 'togglemobile')\n                ), '\">', gt('View site in'), ' ', (MOBILE ? \"Classic\" : \"Mobile\"), ' ', gt('mode'), '</a></div>';\n        }\n        // load primer, lessprimer, & normalize CSS files\n\n        if (!empty($params['src']) || !empty($params['content']) || !empty($params['yui3mods']) || !empty($params['jquery']) || !empty($params['bootstrap'])) {\n            expJavascript::pushToFoot($params);\n        }\n        self::processCSSandJS();\n        echo expJavascript::footJavascriptOutput();\n\n        expSession::deleteVar(\n            \"last_POST\"\n        ); //ADK - putting this here so one form doesn't unset it before another form needs it.\n        expSession::deleteVar(\n            'last_post_errors'\n        );\n    }\n\n    public static function pageMetaInfo()\n    {\n        global $sectionObj, $router;\n\n        $metainfo = array();\n        if (self::inAction() && (!empty($router->url_parts[0]) && expModules::controllerExists(\n                    $router->url_parts[0]\n                ))\n        ) {\n//            $classname = expModules::getControllerClassName($router->url_parts[0]);\n//            $controller = new $classname();\n            $controller = expModules::getController($router->url_parts[0]);\n            $metainfo = $controller->metainfo();\n        }\n        if (empty($metainfo)) {\n            $metainfo['title'] = empty($sectionObj->page_title) ? SITE_TITLE : $sectionObj->page_title;\n            $metainfo['keywords'] = empty($sectionObj->keywords) ? SITE_KEYWORDS : $sectionObj->keywords;\n            $metainfo['description'] = empty($sectionObj->description) ? SITE_DESCRIPTION : $sectionObj->description;\n            $metainfo['canonical'] = empty($sectionObj->canonical) ? URL_FULL . $sectionObj->sef_name : $sectionObj->canonical;\n            $metainfo['noindex'] = empty($sectionObj->noindex) ? false : $sectionObj->noindex;\n            $metainfo['nofollow'] = empty($sectionObj->nofollow) ? false : $sectionObj->nofollow;\n        }\n\n        // clean up meta tag output\n        foreach ($metainfo as $key=>$value) {\n            $metainfo[$key] = expString::parseAndTrim($value, true);\n        }\n        return $metainfo;\n    }\n\n    public static function grabView($path, $filename)\n    { //FIXME Not used\n        $dirs = array(\n            BASE . 'themes/' . DISPLAY_THEME . '/' . $path,\n            BASE . 'framework/' . $path,\n        );\n\n        foreach ($dirs as $dir) {\n            if (file_exists($dir . $filename . '.tpl')) {\n                return $dir . $form . '.tpl';\n            } //FIXME $form is not set??\n        }\n\n        return false;\n    }\n\n    public static function grabViews($path, $filter = '')\n    { //FIXME Not used\n        $dirs = array(\n            BASE . 'framework/' . $path,\n            BASE . 'themes/' . DISPLAY_THEME . '/' . $path,\n        );\n\n        $files = array();\n        foreach ($dirs as $dir) {\n            if (is_dir($dir) && is_readable($dir)) {\n                $dh = opendir($dir);\n                while (($filename = readdir($dh)) !== false) {\n                    $file = $dir . $filename;\n                    if (is_file($file)) { //FIXME this should be $file instead of $filename?\n                        $files[$filename] = $file;\n                    }\n                }\n            }\n        }\n\n        return $files;\n    }\n\n    public static function processCSSandJS()\n    {\n        global $jsForHead, $cssForHead;\n\n        // returns string, either minified combo url or multiple link and script tags\n        $jsForHead = expJavascript::parseJSFiles();\n        $cssForHead = expCSS::parseCSSFiles();\n    }\n\n    public static function removeCss()\n    {\n        expFile::removeFilesInDirectory(BASE . 'tmp/minify'); // also clear the minify engine's cache\n        return expFile::removeFilesInDirectory(BASE . 'tmp/css');\n    }\n\n    public static function clearSmartyCache()\n    {\n        self::removeSmartyCache();\n        flash('message', gt(\"Smarty Cache has been cleared\"));\n        expHistory::back();\n    }\n\n    public static function removeSmartyCache()\n    {\n        expFile::removeFilesInDirectory(BASE . 'tmp/cache'); // alt location for cache\n        return expFile::removeFilesInDirectory(BASE . 'tmp/views_c');\n    }\n\n    /** exdoc\n     * Output <link /> elements for each RSS feed on the site\n     *\n     * @node Subsystems:Theme\n     */\n    public static function advertiseRSS()\n    {\n        if (defined('ADVERTISE_RSS') && ADVERTISE_RSS == 1) {\n            echo \"\\t<!-- RSS Feeds -->\\r\\n\";\n            $rss = new expRss();\n            $feeds = $rss->getFeeds('advertise=1');\n            foreach ($feeds as $feed) {\n                if ($feed->enable_rss) {\n//\t\t\t\t\t$title = empty($feed->feed_title) ? 'RSS' : htmlspecialchars($feed->feed_title, ENT_QUOTES);\n                    $title = empty($feed->title) ? 'RSS - ' . ORGANIZATION_NAME : htmlspecialchars(\n                        $feed->title,\n                        ENT_QUOTES\n                    );\n                    $params['module'] = $feed->module;\n                    $params['src'] = $feed->src;\n//\t\t\t\t\techo \"\\t\".'<link rel=\"alternate\" type=\"application/rss+xml\" title=\"' . $title . '\" href=\"' . expCore::makeRSSLink($params) . \"\\\" />\\n\";\n                    //FIXME need to use $feed instead of $params\n                    echo \"\\t\" . '<link rel=\"alternate\" type=\"application/rss+xml\" title=\"', $title, '\" href=\"', expCore::makeLink(\n                            array('controller' => 'rss', 'action' => 'feed', 'title' => $feed->sef_url)\n                        ), \"\\\" />\\r\\n\";\n                }\n            }\n        }\n    }\n\n    public static function loadActionMaps()\n    {\n        if (is_readable(BASE . 'themes/' . DISPLAY_THEME . '/action_maps.php')) {\n            return include(BASE . 'themes/' . DISPLAY_THEME . '/action_maps.php');\n        } else {\n            return array();\n        }\n    }\n\n    public static function satisfyThemeRequirements()\n    {\n        global $validateTheme;\n\n        if ($validateTheme['headerinfo'] == false) {\n            echo \"<h1 style='padding:10px;border:5px solid #992222;color:red;background:white;position:absolute;top:100px;left:300px;width:400px;z-index:999'>expTheme::head() is a required function in your theme.  Please refer to the Exponent documentation for details:<br />\n\t\t\t<a href=\\\"http://docs.exponentcms.org/docs/current/header-info\\\" target=\\\"_blank\\\">http://docs.exponentcms.org/</a>\n\t\t\t</h1>\";\n            die();\n        }\n\n        if ($validateTheme['footerinfo'] == false) {\n            echo \"<h1 style='padding:10px;border:5px solid #992222;color:red;background:white;position:absolute;top:100px;left:300px;width:400px;z-index:999'>expTheme::foot() is a required function in your theme.  Please refer to the Exponent documentation for details:<br />\n\t\t\t<a href=\\\"http://docs.exponentcms.org/docs/current/footer-info\\\" target=\\\"_blank\\\">http://docs.exponentcms.org/</a>\n\t\t\t</h1>\";\n            die();\n        }\n    }\n\n    public static function getTheme()\n    {\n        global $sectionObj, $router;\n\n        // Grabs the action maps files for theme overrides\n        $action_maps = self::loadActionMaps();\n\n//\t\t$mobile = self::is_mobile();\n\n        // if we are in an action, get the particulars for the module\n        if (self::inAction()) {\n//            $module = isset($_REQUEST['module']) ? expString::sanitize(\n//                $_REQUEST['module']\n//            ) : expString::sanitize($_REQUEST['controller']);\n            $module = isset($_REQUEST['module']) ? $_REQUEST['module'] : $_REQUEST['controller'];\n        }\n\n        // if we are in an action and have action maps to work with...\n        if (self::inAction() && (!empty($action_maps[$module]) && (array_key_exists(\n                        $_REQUEST['action'],\n                        $action_maps[$module]\n                    ) || array_key_exists('*', $action_maps[$module])))\n        ) {\n            $actionname = array_key_exists($_REQUEST['action'], $action_maps[$module]) ? $_REQUEST['action'] : '*';\n            $actiontheme = explode(\":\", $action_maps[$module][$actionname]);\n\n            // this resets the section object. we're suppressing notices with @ because getSectionObj sets constants, which cannot be changed\n            // since this will be the second time Exponent calls this function on the page load.\n            if (!empty($actiontheme[1])) {\n                $sectionObj = @$router->getSectionObj($actiontheme[1]);\n            }\n\n            if ($actiontheme[0] == \"default\" || $actiontheme[0] == \"Default\" || $actiontheme[0] == \"index\") {\n                if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {\n                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php';\n                } else {\n                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/index.php';\n                }\n            } elseif (is_readable(BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $actiontheme[0] . '.php')) {\n                if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $actiontheme[0] . '.php')) {\n                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $actiontheme[0] . '.php';\n                } else {\n                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $actiontheme[0] . '.php';\n                }\n            } else {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/index.php';\n            }\n        } elseif ($sectionObj->subtheme != '' && is_readable(\n                BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $sectionObj->subtheme . '.php'\n            )\n        ) {\n            if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $sectionObj->subtheme . '.php')) {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $sectionObj->subtheme . '.php';\n            } elseif (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php';\n            } else {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $sectionObj->subtheme . '.php';\n            }\n        } else {\n            if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php';\n            } else {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/index.php';\n            }\n        }\n        if (!is_readable($theme)) {\n            if (is_readable(BASE . 'framework/core/index.php')) {\n                $theme = BASE . 'framework/core/index.php';  // use the fallback bare essentials theme\n            }\n        }\n        return $theme;\n    }\n\n    /** exdoc\n     * @state <b>UNDOCUMENTED</b>\n     *\n     * @node  Undocumented\n     *\n     * @param bool   $include_default\n     * @param string $theme\n     *\n     * @return array\n     */\n    public static function getSubthemes($include_default = true, $theme = DISPLAY_THEME)\n    {\n        $base = BASE . \"themes/$theme/subthemes\";\n        // The array of subthemes.  If the theme has no subthemes directory,\n        // or the directory is not readable by the web server, this empty array\n        // will be returned (Unless the caller wanted us to include the default layout)\n        $subs = array();\n        if ($include_default == true) {\n            // Caller wants us to include the default layout.\n            $subs[''] = DEFAULT_VIEW; // Not really its intended use, but it works.\n        }\n\n        if (is_readable($base)) {\n            // subthemes directory exists and is readable by the web server.  Continue on.\n            $dh = opendir($base);\n            // Read out all entries in the THEMEDIR/subthemes directory\n            while (($s = readdir($dh)) !== false) {\n                if (substr($s, -4, 4) == '.php' && substr($s, 0, 1) != '_' && is_file($base . \"/$s\") && is_readable(\n                        $base . \"/$s\"\n                    )\n                ) {\n                    // Only readable .php files are allowed to be subtheme files.\n                    $subs[substr($s, 0, -4)] = substr($s, 0, -4);\n                }\n            }\n            // Sort the subthemes by their keys (which are the same as the values)\n            // using a natural string comparison function (PHP built-in)\n            uksort($subs, 'strnatcmp');\n        }\n        return $subs;\n    }\n\n    public static function getPrinterFriendlyTheme()\n    {\n        global $framework;\n\n        $common = 'framework/core/printer-friendly.php';\n        $theme = 'themes/' . DISPLAY_THEME . '/printer-friendly.php';\n        if (empty($framework)) {\n            $fw = expSession::get('framework');\n            $fwprint = 'framework/core/printer-friendly.' . $fw . '.php';\n        } else {\n            $fwprint = 'framework/core/printer-friendly.' . $framework . '.php';\n        }\n\n        if (is_readable($theme)) {\n            return $theme;\n        } elseif (is_readable($fwprint)) {\n            return $fwprint;\n        } elseif (is_readable($common)) {\n            return $common;\n        } else {\n            return null;\n        }\n    }\n\n    /** exdoc\n     * Checks to see if the page is currently in an action.  Useful only if the theme does not use the self::main() function\n     * Returns whether or not an action should be run.\n     *\n     * @node Subsystems:Theme\n     * @return boolean\n     */\n    public static function inPreview()\n    {\n        $level = 99;\n        if (expSession::is_set('uilevel')) {\n            $level = expSession::get('uilevel');\n        }\n        return ($level == UILEVEL_PREVIEW);\n    }\n\n    public static function inAction($action=null)\n    {\n        return (isset($_REQUEST['action']) && (isset($_REQUEST['module']) || isset($_REQUEST['controller'])) && (!isset($action) || ($action == $_REQUEST['action'])));\n    }\n\n    public static function reRoutActionTo($theme = \"\")\n    {\n        if (empty($theme)) {\n            return false;\n        }\n        if (self::inAction()) {\n            include_once(BASE . \"themes/\" . DISPLAY_THEME . \"/\" . $theme);\n            exit;\n        }\n        return false;\n    }\n\n    /** exdoc\n     * Runs the appropriate action, by looking at the $_REQUEST variable.\n     *\n     * @node Subsystems:Theme\n     * @return bool\n     */\n    public static function runAction()\n    {\n        global $user;\n\n        if (self::inAction()) {\n            if (!AUTHORIZED_SECTION && !expJavascript::inAjaxAction())\n                notfoundController::handle_not_authorized();\n//\t\t\tif (expSession::is_set(\"themeopt_override\")) {\n//\t\t\t\t$config = expSession::get(\"themeopt_override\");\n//\t\t\t\techo \"<a href='\".$config['mainpage'].\"'>\".$config['backlinktext'].\"</a><br /><br />\";\n//\t\t\t}\n\n            //FIXME clean our passed parameters\n//            foreach ($_REQUEST as $key=>$param) {  //FIXME need array sanitizer\n//                $_REQUEST[$key] = expString::sanitize($param);\n//            }\n//            if (empty($_REQUEST['route_sanitized'])) {\n            if (!$user->isAdmin())\n                expString::sanitize($_REQUEST);\n//            } elseif (empty($_REQUEST['array_sanitized'])) {\n                $tmp =1;  //FIXME we've already sanitized at this point\n//            } else {\n//                $tmp =1;  //FIXME we've already sanitized at this point\n//            }\n\n            //FIXME: module/controller glue code..remove ASAP\n            $module = empty($_REQUEST['controller']) ? $_REQUEST['module'] : $_REQUEST['controller'];\n//\t\t\t$isController = expModules::controllerExists($module);\n\n//\t\t\tif ($isController && !isset($_REQUEST['_common'])) {\n            if (expModules::controllerExists($module)) {\n                // this is being set just in case the url said module=modname instead of controller=modname\n                // with SEF URls turned on its not really an issue, but with them off some of the links\n                // aren't being made correctly...depending on how the {link} plugin was used in the view.\n                $_REQUEST['controller'] = $module;\n\n//                if (!isset($_REQUEST['action'])) $_REQUEST['action'] = 'showall';\n//                if (isset($_REQUEST['view']) && $_REQUEST['view'] != $_REQUEST['action']) {\n//                    $test = explode('_',$_REQUEST['view']);\n//                    if ($test[0] != $_REQUEST['action']) {\n//                        $_REQUEST['view'] = $_REQUEST['action'].'_'.$_REQUEST['view'];\n//                    }\n//                } elseif (!empty($_REQUEST['action'])) {\n//                    $_REQUEST['view'] = $_REQUEST['action'];\n//                } else {\n//                    $_REQUEST['view'] = 'showall';\n//                }\n\n                echo renderAction($_REQUEST);\n//\t\t\t} else {\n//\t\t\t\tif ($_REQUEST['action'] == 'index') {\n//\t\t\t\t\t$view = empty($_REQUEST['view']) ? 'Default' : $_REQUEST['view'];\n//\t\t\t\t\t$title = empty($_REQUEST['title']) ? '' : expString::sanitize($_REQUEST['title']);\n//\t\t\t\t\t$src = empty($_REQUEST['src']) ? null : expString::sanitize($_REQUEST['src']);\n//\t\t\t\t\tself::showModule($module, $view, $title, $src);\n//\t\t\t\t\treturn true;\n//\t\t\t\t}\n//\n//\t\t\t\tglobal $db, $user;  // these globals are needed for the old school actions which are loaded\n//\n//\t\t\t\t// the only reason we should have a controller down in this section is if we are hitting a common action like\n//\t\t\t\t// userperms or groupperms...deal with it.\n////\t\t\t\t$loc = new stdClass();\n////\t\t\t\t$loc->mod = $module;\n////\t\t\t\t$loc->src = (isset($_REQUEST['src']) ? expString::sanitize($_REQUEST['src']) : \"\");\n////\t\t\t\t$loc->int = (!empty($_REQUEST['int']) ? strval(intval($_REQUEST['int'])) : \"\");\n//                $loc = expCore::makeLocation($module,(isset($_REQUEST['src']) ? expString::sanitize($_REQUEST['src']) : \"\"),(!empty($_REQUEST['int']) ? strval(intval($_REQUEST['int'])) : \"\"));\n//\t\t\t\t//if (isset($_REQUEST['act'])) $loc->act = $_REQUEST['act'];\n//\n//\t\t\t\tif (isset($_REQUEST['_common'])) {\n//\t\t\t\t\t$actfile = \"/common/actions/\" . $_REQUEST['action'] . \".php\";\n//\t\t\t\t} else {\n//\t\t\t\t\t$actfile = \"/\" . $module . \"/actions/\" . $_REQUEST['action'] . \".php\";\n//\t\t\t\t}\n//\n//\t\t\t\tif (is_readable(BASE.\"themes/\".DISPLAY_THEME.\"/modules\".$actfile)) {\n//                    include_once(BASE.\"themes/\".DISPLAY_THEME.\"/modules\".$actfile);\n////\t\t\t\t} elseif (is_readable(BASE.'framework/modules-1/'.$actfile)) {\n////\t\t\t\t\tinclude_once(BASE.'framework/modules-1/'.$actfile);\n//\t\t\t\t} else {\n//\t\t\t\t\techo SITE_404_HTML . '<br /><br /><hr size=\"1\" />';\n//\t\t\t\t\techo sprintf(gt('No such module action').' : %1 : %2',strip_tags($module),strip_tags($_REQUEST['action']));\n//\t\t\t\t\techo '<br />';\n//\t\t\t\t}\n            }\n        }\n        return false;\n    }\n\n    public static function showAction($module, $action, $src = \"\", $params = array())\n    { //FIXME only used by smarty functions, old school?\n        global $user;\n\n        $loc = expCore::makeLocation($module, (isset($src) ? $src : \"\"), (isset($int) ? $int : \"\"));\n\n        $actfile = \"/\" . $module . \"/actions/\" . $action . \".php\";\n        if (isset($params)) {\n//            foreach ($params as $key => $value) {  //FIXME need array sanitizer\n////                $_GET[$key] = $value;\n//                $_GET[$key] = expString::sanitize($value);\n//            }\n            if (!$user->isAdmin()) expString::sanitize($_GET);\n        }\n        //if (isset($['_common'])) $actfile = \"/common/actions/\" . $_REQUEST['action'] . \".php\";\n\n        if (is_readable(BASE . \"themes/\" . DISPLAY_THEME . \"/modules\" . $actfile)) {\n            include(BASE . \"themes/\" . DISPLAY_THEME . \"/modules\" . $actfile);\n//   \t\t} elseif (is_readable(BASE.'framework/modules-1/'.$actfile)) {\n//   \t\t\tinclude(BASE.'framework/modules-1/'.$actfile);\n        } else {\n            notfoundController::handle_not_found();\n            echo '<br /><hr size=\"1\" />';\n            echo sprintf(\n                gt('No such module action') . ' : %1 : %2',\n                strip_tags($_REQUEST['module']),\n                strip_tags($_REQUEST['action'])\n            );\n            echo '<br />';\n        }\n    }\n\n    /** exdoc\n     * Redirect User to Default Section\n     *\n     * @node Subsystems:Theme\n     */\n    public static function goDefaultSection()\n    {\n        $last_section = expSession::get(\"last_section\");\n        if (defined('SITE_DEFAULT_SECTION') && SITE_DEFAULT_SECTION != $last_section) {\n            header(\"Location: \" . URL_FULL . \"index.php?section=\" . SITE_DEFAULT_SECTION);\n            exit();\n        } else {\n            global $db;\n\n            $section = $db->selectObject(\"section\", \"public = 1 AND active = 1\"); // grab first section, go there\n            if ($section) {\n                header(\"Location: \" . URL_FULL . \"index.php?section=\" . $section->id);\n                exit();\n            } else {\n                notfoundController::handle_not_found();\n            }\n        }\n    }\n\n    /** exdoc\n     * Takes care of all the specifics of either showing a sectional container or running an action.\n     *\n     * @node Subsystems:Theme\n     */\n    public static function main()\n    {\n        global $db;\n\n        if ((!defined('SOURCE_SELECTOR') || SOURCE_SELECTOR == 1)) {\n            $last_section = expSession::get(\"last_section\");\n            $section = $db->selectObject(\"section\", \"id=\" . $last_section);\n            // View authorization will be taken care of by the runAction and mainContainer functions\n            if (self::inAction()) {\n                if (!PRINTER_FRIENDLY && !EXPORT_AS_PDF)\n                    echo show_msg_queue();\n                self::runAction();\n            } else {\n                if ($section == null) {\n                    self::goDefaultSection();\n                } else {\n                    if (!PRINTER_FRIENDLY && !EXPORT_AS_PDF)\n                        echo show_msg_queue();\n                    self::mainContainer();\n                }\n            }\n//        } else {\n//            if (isset($_REQUEST['module'])) {\n//                include_once(BASE.\"framework/modules/container/orphans_content.php\");  //FIXME not sure how to convert this yet\n//            } else {\n//                echo gt('Select a module');\n//            }\n        }\n    }\n\n    /** exdoc\n     * Useful only if theme does not use self::main\n     *\n     * @return void\n     * @internal param bool $public Whether or not the page is public.\n     * @node     Subsystems:Theme\n     */\n    public static function mainContainer()\n    {\n        global $router;\n\n        if (!AUTHORIZED_SECTION) {\n            // Set this so that a login on an Auth Denied page takes them back to the previously Auth-Denied page\n            //\t\t\texpHistory::flowSet(SYS_FLOW_PROTECTED,SYS_FLOW_SECTIONAL);\n            expHistory::set('manageable', $router->params);\n            notfoundController::handle_not_authorized();\n            return;\n        }\n\n        if (PUBLIC_SECTION) {\n            //\t\t\texpHistory::flowSet(SYS_FLOW_PUBLIC,SYS_FLOW_SECTIONAL);\n            expHistory::set('viewable', $router->params);\n        } else {\n            //\t\t\texpHistory::flowSet(SYS_FLOW_PROTECTED,SYS_FLOW_SECTIONAL);\n            expHistory::set('manageable', $router->params);\n        }\n\n        #   if (expSession::is_set(\"themeopt_override\")) {\n        #       $config = expSession::get(\"themeopt_override\");\n//   \t\t\tself::showSectionalModule(\"containermodule\",\"Default\",\"\",\"@section\",false,true);  //FIXME change to showModule call\n        self::module(\n            array(\n                \"controller\" => \"container\",\n                \"action\"     => \"showall\",\n                \"view\"       => \"showall\",\n                \"source\"     => \"@section\",\n                \"scope\"      => \"sectional\"\n            )\n        );\n\n        #   } else {\n        #       self::showSectionalModule(\"containermodule\",\"Default\",\"\",\"@section\");\n        #   }\n    }\n\n    /** exdoc\n     * Calls the necessary methods to show a specific module, in a section-sensitive way.\n     *\n     * @param string $module   The classname of the module to display\n     * @param string $view     The name of the view to display the module with\n     * @param string $title    The title of the module (support is view-dependent)\n     * @param string $prefix   The prefix of the module's source.  The current section id will be appended to this\n     * @param bool   $pickable Whether or not the module is pickable in the Source Picker.\n     * @param bool   $hide_menu\n     *\n     * @return void\n     * @node Subsystems:Theme\n     * @deprecated 2.2.1\n     */\n    public static function showSectionalModule(\n        $module,\n        $view,\n        $title,\n        $prefix = null,\n        $pickable = false,\n        $hide_menu = false\n    ) {\n        global $module_scope;\n\n        self::deprecated('expTheme::module()', $module, $view);\n        $module = expModules::getModuleName($module); //FIXME patch to cleanup module name\n        if ($prefix == null) {\n            $prefix = \"@section\";\n        }\n\n        $src = $prefix;\n\n//\t\tif (expSession::is_set(\"themeopt_override\")) {\n//\t\t\t$config = expSession::get(\"themeopt_override\");\n//\t\t\tif (in_array($module,$config['ignore_mods'])) return;\n//\t\t\t$src = $config['src_prefix'].$prefix;  //FIXME there is no such config index\n//\t\t\t$section = null;\n//\t\t} else {\n        global $sectionObj;\n\n        //$last_section = expSession::get(\"last_section\");\n        //$section = $db->selectObject(\"section\",\"id=\".$last_section);\n        $src .= $sectionObj->id;\n//\t\t}\n        $module_scope[$src][$module] = new stdClass();\n        $module_scope[$src][$module]->scope = 'sectional';\n\n        self::showModule($module, $view, $title, $src, false, null, $hide_menu);\n    }\n\n    /** exdoc\n     * Calls the necessary methods to show a specific module in such a way that the current\n     * section displays the same content as its top-level parent and all of the top-level parent's\n     * children, grand-children, grand-grand-children, etc.\n     *\n     * @param string $module   The classname of the module to display\n     * @param string $view     The name of the view to display the module with\n     * @param string $title    The title of the module (support is view-dependent)\n     * @param string $prefix   The prefix of the module's source.  The current section id will be appended to this\n     * @param bool   $pickable Whether or not the module is pickable in the Source Picker.\n     * @param bool   $hide_menu\n     *\n     * @node Subsystems:Theme\n     * @deprecated 2.2.1\n     */\n    public static function showTopSectionalModule(\n        $module,\n        $view,\n        $title,\n        $prefix = null,\n        $pickable = false,\n        $hide_menu = false\n    ) {\n        global $db, $module_scope, $sectionObj;\n\n        self::deprecated('expTheme::module()', $module, $view);\n        $module = expModules::getModuleName($module); //FIXME patch to cleanup module name\n        if ($prefix == null) {\n            $prefix = \"@section\";\n        }\n//\t\t$last_section = expSession::get(\"last_section\");\n//\t\t$section = $db->selectObject(\"section\",\"id=\".$last_section);\n        $section = $sectionObj; //FIXME let's try $sectionObj instead of last_section\n//        $module_scope[$prefix.$section->id][$module] = new stdClass();\n        $module_scope[$prefix . $section->id][$module]->scope = 'top-sectional';\n        // Loop until we find the top level parent.\n        while ($section->parent != 0) {\n            $section = $db->selectObject(\"section\", \"id=\" . $section->parent);\n        }\n\n        self::showModule($module, $view, $title, $prefix . $section->id, false, null, $hide_menu);\n    }\n\n    /** exdoc\n     * Calls the necessary methods to show a specific controller, in a section-sensitive way.\n     *\n     * @param array $params\n     *\n     * @internal param string $module The classname of the module to display\n     * @internal param string $view The name of the view to display the module with\n     * @internal param string $title The title of the module (support is view-dependent)\n     * @internal param string $prefix The prefix of the module's source.  The current section id will be appended to this\n     * @internal param bool $pickable Whether or not the module is pickable in the Source Picker.\n     * @internal param bool $hide_menu\n     * @return void\n     * @node     Subsystems:Theme\n     * @deprecated 2.2.1\n     */\n    public static function showSectionalController($params = array())\n    { //FIXME not used in base system (custom themes?)\n        global $sectionObj, $module_scope;\n\n        $src = \"@section\" . $sectionObj->id;\n        $params['source'] = $src;\n//        $module_scope[$params['source']][(isset($params['module'])?$params['module']:$params['controller'])] = new stdClass();\n        $module_scope[$params['source']][(isset($params['module']) ? $params['module'] : $params['controller'])]->scope = 'sectional';\n        $module = !empty($params['module']) ? $params['module'] : $params['controller'];\n        $view = !empty($params['action']) ? $params['action'] : $params['view'];\n        self::deprecated('expTheme::module()', $module, $view);\n        self::module($params);\n    }\n\n    /**\n     * @deprecated 2.2.1\n     */\n    public static function showController($params = array())\n    {\n        $module = !empty($params['module']) ? $params['module'] : $params['controller'];\n        $view = !empty($params['action']) ? $params['action'] : $params['view'];\n        self::deprecated('expTheme::module()', $module, $view);\n        self::module($params);\n//        global $sectionObj, $db, $module_scope;\n//        if (empty($params)) {\n//\t        return false;\n//        } elseif (isset($params['module'])) {\n//            self::module($params);\n//        } else if (isset($params['controller'])) {\n//\t\t\t$params['view'] = isset($params['view']) ? $params['view'] : $params['action'];\n//\t\t\t$params['title'] = isset($params['moduletitle']) ? $params['moduletitle'] : '';\n//\t\t\t$params['chrome'] = (!isset($params['chrome']) || (isset($params['chrome'])&&empty($params['chrome']))) ? true : false;\n//\t\t\t$params['scope'] = isset($params['scope']) ? $params['scope'] : 'global';\n//\n//\t\t\t// set the controller and action to the one called via the function params\n//\t\t\t$requestvars = isset($params['params']) ? $params['params'] : array();\n//\t\t\t$requestvars['controller'] = $params['controller'];\n//\t\t\t$requestvars['action'] = isset($params['action']) ? $params['action'] : null;\n//\t\t\t$requestvars['view'] = isset($params['view']) ? $params['view'] : null;\n//\n//\t\t\t// figure out the scope of the module and set the source accordingly\n//\t\t\tif ($params['scope'] == 'global') {\n//\t\t\t\t$params['source'] = isset($params['source']) ? $params['source'] : null;\n//\t\t\t} elseif ($params['scope'] == 'sectional') {\n//\t\t\t\t$params['source']  = isset($params['source']) ? $params['source'] : '@section';\n//\t\t\t\t$params['source'] .= $sectionObj->id;\n//\t\t\t} elseif ($params['scope'] == 'top-sectional') {\n//\t\t\t\t$params['source']  = isset($params['source']) ? $params['source'] : '@section';\n//\t\t\t\t$section = $sectionObj;\n//\t\t\t\twhile ($section->parent > 0) $section = $db->selectObject(\"section\",\"id=\".$section->parent);\n//\t\t\t\t$params['source'] .= $section->id;\n//\t\t\t}\n////            $module_scope[$params['source']][(isset($params['module'])?$params['module']:$params['controller'])] = new stdClass();\n//            $module_scope[$params['source']][(isset($params['module'])?$params['module']:$params['controller'])]->scope = $params['scope'];\n//\t\t\tself::showModule(expModules::getControllerClassName($params['controller']),$params['view'],$params['title'],$params['source'],false,null,$params['chrome'],$requestvars);\n//        }\n//        return false;\n    }\n\n    /**\n     * Entry point for displaying modules\n     * Packages $params for calling showModule method\n     *\n     * @param array $params list of module parameters\n     *\n     * @return bool\n     */\n    public static function module($params)\n    {\n        global $db, $module_scope, $sectionObj;\n\n        if (empty($params)) {\n            return false;\n        } elseif (isset($params['module']) && expModules::controllerExists($params['module'])) {\n            // hack to add compatibility for modules converted to controllers, but still hard-coded the old way\n            $params['controller'] = $params['module'];\n            unset($params['module']);\n        }\n        if (!isset($params['action'])) {\n            $params['action'] = 'showall';\n        }\n        if (isset($params['view']) && $params['view'] != $params['action']) {\n            $test = explode('_', $params['view']);\n            if ($test[0] != $params['action']) {\n                $params['view'] = $params['action'] . '_' . $params['view'];\n            }\n        } elseif (!empty($params['action'])) {\n            $params['view'] = $params['action'];\n        } else {\n            $params['view'] = 'showall';\n        }\n//\t    if (isset($params['controller'])) {\n        $controller = expModules::getModuleName($params['controller']);\n//            $params['view'] = isset($params['view']) ? $params['view'] : $params['action'];\n        $params['title'] = isset($params['moduletitle']) ? $params['moduletitle'] : '';\n        $params['chrome'] = (!isset($params['chrome']) || (isset($params['chrome']) && empty($params['chrome']))) ? true : false;\n        $params['scope'] = isset($params['scope']) ? $params['scope'] : 'global';\n\n        // set the controller and action to the one called via the function params\n        $requestvars = isset($params['params']) ? $params['params'] : array();\n        $requestvars['controller'] = $controller;\n        $requestvars['action'] = isset($params['action']) ? $params['action'] : null;\n        $requestvars['view'] = isset($params['view']) ? $params['view'] : null;\n\n        // figure out the scope of the module and set the source accordingly\n        if ($params['scope'] == 'global') {\n            $params['source'] = isset($params['source']) ? $params['source'] : null;\n        } elseif ($params['scope'] == 'sectional') {\n            $params['source'] = isset($params['source']) ? $params['source'] : '@section';\n            $params['source'] .= $sectionObj->id;\n        } elseif ($params['scope'] == 'top-sectional') {\n            $params['source'] = isset($params['source']) ? $params['source'] : '@section';\n            $section = $sectionObj;\n            while ($section->parent > 0) {\n                $section = $db->selectObject(\"section\", \"id=\" . $section->parent);\n            }\n            $params['source'] .= $section->id;\n        }\n        $module_scope[$params['source']][$controller] = new stdClass();\n        $module_scope[$params['source']][$controller]->scope = $params['scope'];\n//            self::showModule(expModules::getControllerClassName($params['controller']),$params['view'],$params['title'],$params['source'],false,null,$params['chrome'],$requestvars);\n        return self::showModule(\n            $controller,\n            $params['view'],\n            $params['title'],\n            $params['source'],\n            false,\n            null,\n            $params['chrome'],\n            $requestvars\n        );\n//        } elseif (isset($params['module'])) {\n//            $module = expModules::getModuleClassName($params['module']);\n//            $moduletitle = (isset($params['moduletitle'])) ? $params['moduletitle'] : \"\";\n//            $source = (isset($params['source'])) ? $params['source'] : \"\";\n//            $chrome = (isset($params['chrome'])) ? $params['chrome'] : false;\n//            $scope = (isset($params['scope'])) ? $params['scope'] : \"global\";\n//\n//            if ($scope==\"global\") {\n//                self::showModule($module,$params['view'],$moduletitle,$source,false,null,$chrome);\n//            }\n//            if ($scope==\"top-sectional\") {\n////                self::showTopSectionalModule($params['module'].\"module\", //module\n////                                             $params['view'], //view\n////                                             $moduletitle, // Title\n////                                             $source, // source\n////                                             false, // used to apply to source picker. does nothing now.\n////                                             $chrome // Show chrome\n////                                            );\n//                if ($source == null) $source = \"@section\";\n//                //FIXME - $section might be empty!  We're getting it from last_section instead of sectionObj??\n////                $last_section = expSession::get(\"last_section\");\n////                $section = $db->selectObject(\"section\",\"id=\".$last_section);\n//                $section = $sectionObj;  //FIXME let's try $sectionObj instead of last_section\n//                // Loop until we find the top level parent.\n//                while ($section->parent != 0) $section = $db->selectObject(\"section\",\"id=\".$section->parent);\n//                $module_scope[$source.$section->id][$module]= new stdClass();\n//                $module_scope[$source.$section->id][$module]->scope = 'top-sectional';\n//                self::showModule($module,$params['view'],$moduletitle,$source.$section->id,false,null,$chrome);\n//            }\n//            if ($scope==\"sectional\") {\n////                self::showSectionalModule($params['module'].\"module\", //module\n////                                          $params['view'], //view\n////                                          $moduletitle, // title\n////                                          $source, // source/prefix\n////                                          false, // used to apply to source picker. does nothing now.\n////                                          $chrome // Show chrome\n////                                        );\n//                if ($source == null) $source = \"@section\";\n//                $src = $source;\n//                $src .= $sectionObj->id;\n//                $module_scope[$src][$module] = new stdClass();\n//                $module_scope[$src][$module]->scope = 'sectional';\n//                self::showModule($module,$params['view'],$moduletitle,$src,false,null,$chrome);\n//            }\n//        }\n//        return false;\n    }\n\n    /** exdoc\n     * Calls the necessary methods to show a specific module - NOT intended to be called directly from theme\n     *\n     * @param string $module   The classname of the module to display\n     * @param string $view     The name of the view to display the module with\n     * @param string $title    The title of the module (support is view-dependent)\n     * @param string $source   The source of the module.\n     * @param bool   $pickable Whether or not the module is pickable in the Source Picker.\n     * @param null   $section\n     * @param bool   $hide_menu\n     * @param array  $params\n     *\n     * @return void\n     * @node Subsystems:Theme\n     */\n    public static function showModule(\n        $module,\n        $view = \"Default\",\n        $title = \"\",\n        $source = null,\n        $pickable = false,\n        $section = null,\n        $hide_menu = false,\n        $params = array()\n    ) {\n        $module = expModules::getModuleName($module); //FIXME patch to cleanup module name\n        if (!AUTHORIZED_SECTION && $module != 'navigation' && $module != 'login') {\n            return;\n        }\n\n        global $db, $sectionObj, $module_scope;\n\n        // Ensure that we have a section\n        //FJD - changed to $sectionObj\n        if ($sectionObj == null) {\n            $section_id = expSession::get('last_section');\n            if ($section_id == null) {\n                $section_id = SITE_DEFAULT_SECTION;\n            }\n            $sectionObj = $db->selectObject('section', 'id=' . $section_id);\n            //$section->id = $section_id;\n        }\n        if ($module == \"login\" && defined('PREVIEW_READONLY') && PREVIEW_READONLY == 1) {\n            return;\n        }\n\n//\t\tif (expSession::is_set(\"themeopt_override\")) {\n//\t\t\t$config = expSession::get(\"themeopt_override\");\n//\t\t\tif (in_array($module,$config['ignore_mods'])) return;\n//\t\t}\n        if (empty($params['action'])) {\n            $params['action'] = $view;\n        }\n        $loc = expCore::makeLocation($module, $source . \"\");\n\n        if (empty($module_scope[$source][$module]->scope)) {\n            $module_scope[$source][$module] = new stdClass();\n            $module_scope[$source][$module]->scope = 'global';\n        }\n        // make sure we've added this module to the sectionref table\n        $secref = $db->selectObject(\"sectionref\", \"module='$module' AND source='\" . $loc->src . \"'\");\n        if ($secref == null) {\n            $secref = new stdClass();\n            $secref->module = $module;\n            $secref->source = $loc->src;\n            $secref->internal = \"\";\n            $secref->refcount = 1000; // only hard-coded modules should be missing\n            if ($sectionObj != null) {\n                $secref->section = $sectionObj->id;\n            }\n//\t\t\t  $secref->is_original = 1;\n            $db->insertObject($secref, 'sectionref');\n//        } elseif ($sectionObj != null && $secref->section != $sectionObj->id) {\n//            $secref->section = $sectionObj->id;\n//            $db->updateObject($secref, 'sectionref');\n        }\n        // add (hard-coded) modules to the container table, nested containers added in container showall method??\n        $container = $db->selectObject('container', \"internal='\" . serialize($loc) . \"'\");\n        if (empty($container->id)) {\n            //if container isn't here already, then create it...hard-coded from theme template\n            $newcontainer = new stdClass();\n            $newcontainer->internal = serialize($loc);\n            $newcontainer->external = serialize(null);\n            $newcontainer->title = $title;\n            $newcontainer->view = $view;\n            $newcontainer->action = $params['action'];\n            $newcontainer->id = $db->insertObject($newcontainer, 'container');\n        }\n        if (empty($title) && !empty($container->title)) {\n            $title = $container->title;\n        }\n//\t\t$iscontroller = expModules::controllerExists($module);\n\n        if (defined('SELECTOR') && call_user_func(array(expModules::getModuleClassName($module), \"hasSources\"))) {\n            containerController::wrapOutput($module, $view, $loc, $title);\n        } else {\n//\t\t\tif (is_callable(array($module,\"show\")) || $iscontroller) {\n            if (expModules::controllerExists($module)) {\n                // FIXME: we are checking here for a new MVC style controller or an old school module. We only need to perform\n                // this check until we get the old modules all gone...until then we have the check and a lot of code duplication\n                // in the if blocks below...oh well, that's life.\n//\t\t\t\tif (!$iscontroller) {\n////\t\t\t\t\tif ((!$hide_menu && $loc->mod != \"containermodule\" && (call_user_func(array($module,\"hasSources\")) || $db->tableExists($loc->mod.\"_config\")))) {\n//                    if ((!$hide_menu && (call_user_func(array($module,\"hasSources\")) || $db->tableExists($loc->mod.\"_config\")))) {\n//                        $container = new stdClass();  //php 5.4\n//\t\t\t\t\t\t$container->permissions = array(\n//\t\t\t\t\t\t\t'manage'=>(expPermissions::check('manage',$loc) ? 1 : 0),\n//\t\t\t\t\t\t\t'configure'=>(expPermissions::check('configure',$loc) ? 1 : 0)\n//\t\t\t\t\t\t);\n//\n//\t\t\t\t\t\tif ($container->permissions['manage'] || $container->permissions['configure']) {\n//\t\t\t\t\t\t\t$container->randomizer = mt_rand(1,ceil(microtime(1)));\n//\t\t\t\t\t\t\t$container->view = $view;\n//\t\t\t\t\t\t\t$container->info['class'] = expModules::getModuleClassName($loc->mod);\n//\t\t\t\t\t\t\t$container->info['module'] = call_user_func(array($module,\"name\"));\n//\t\t\t\t\t\t\t$container->info['source'] = $loc->src;\n//                            $container->info['scope'] = $module_scope[$source][$module]->scope;\n//\t\t\t\t\t\t\t$container->info['hasConfig'] = $db->tableExists($loc->mod.\"_config\");\n////\t\t\t\t\t\t\t$template = new template('containermodule','_hardcoded_module_menu',$loc);\n////                            $template = new template('containerController','_hardcoded_module_menu',$loc,false,'controllers');\n//                            $c2 = new containerController();\n//                            $template = expTemplate::get_template_for_action($c2,'_hardcoded_module_menu');\n//\t\t\t\t\t\t\t$template->assign('container', $container);\n//\t\t\t\t\t\t\t$template->output();\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t} else {\n                // if we hit here we're dealing with a hard-coded controller...not a module\n                if (!$hide_menu && $loc->mod != \"container\") {\n                    $controller = expModules::getController($module);\n//                        $controller = expModules::getControllerClassName($module);\n                    $hccontainer = new stdClass(); //php 5.4\n                    $hccontainer->permissions = array(\n                        'manage'    => (expPermissions::check('manage', $loc) ? 1 : 0),\n                        'configure' => (expPermissions::check('configure', $loc) ? 1 : 0)\n                    );\n\n                    if ($hccontainer->permissions['manage'] || $hccontainer->permissions['configure']) {\n                        $hccontainer->randomizer = mt_rand(1, ceil(microtime(1)));\n                        $hccontainer->view = $view;\n                        $hccontainer->action = $params['action'];\n                        $hccontainer->info['class'] = expModules::getModuleClassName($loc->mod);\n                        $hccontainer->info['module'] = $controller->displayname();\n//                            $hccontainer->info['module'] = $controller::displayname();\n                        $hccontainer->info['source'] = $loc->src;\n                        $hccontainer->info['scope'] = $module_scope[$source][$module]->scope;\n//\t\t\t\t\t\t\t$hccontainer->info['hasConfig'] = true;\n//\t\t\t\t\t\t\t$template = new template('containermodule','_hardcoded_module_menu',$loc);\n//\t\t\t\t\t\t\t$template = new template('containerController','_hardcoded_module_menu',$loc,false,'controllers');\n                        $c2 = new containerController();\n                        $template = expTemplate::get_template_for_action($c2, '_hardcoded_module_menu');\n                        $template->assign('container', $hccontainer);\n                        $template->output();\n                    }\n                }\n//\t\t\t\t}\n\n//\t\t\t\tif ($iscontroller) {\n                $params['src'] = $loc->src;\n                $params['controller'] = $module;\n                $params['view'] = $view;\n                $params['moduletitle'] = $title;\n                return renderAction($params);\n//\t\t\t\t} else {\n//\t\t\t\t\tcall_user_func(array($module,\"show\"),$view,$loc,$title);\n//\t\t\t\t}\n            } else {\n                echo sprintf(gt('The module \"%s\" was not found in the system.'), $module);\n                return false;\n            }\n        }\n    }\n\n    public static function getThemeDetails() {\n        $theme_file = DISPLAY_THEME;\n        if (is_readable(BASE.'themes/'.$theme_file.'/class.php')) {\n            // Need to avoid the duplicate theme problem.\n            if (!class_exists($theme_file)) {\n                include_once(BASE.'themes/'.$theme_file.'/class.php');\n            }\n\n            if (class_exists($theme_file)) {\n                // Need to avoid instantiating non-existent classes.\n                $theme = new $theme_file();\n                return ' ' . gt('using') . ' ' . $theme->name() . ' ' . gt('by') . ' ' . $theme->author();\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Return the color style for the current framework\n     *\n     * @param        $color\n     *\n     * @return mixed|string\n     */\n    public static function buttonColor($color = null)\n    {\n        $colors = array(\n            'green'   => 'btn-success',\n            'blue'    => 'btn-primary',\n            'red'     => 'btn-danger',\n            'magenta' => 'btn-danger',\n            'orange'  => 'btn-warning',\n            'yellow'  => 'btn-warning',\n            'grey'    => 'btn-default',\n            'purple'  => 'btn-info',\n            'black'   => 'btn-inverse',\n            'pink'    => 'btn-danger',\n        );\n        if (bs()) {\n            if (!empty($colors[$color])) { // awesome to bootstrap button conversion\n                $found = $colors[$color];\n            } else {\n                $found = 'btn-default';\n            }\n        } else {\n            $found = array_search($color, $colors); // bootstrap to awesome button conversion?\n            if (empty($found)) {\n                $found = $color;\n            } else {\n                $found = BTN_COLOR;\n            }\n        }\n        return $found;\n    }\n\n    /**\n     * Return the button size for the current framework\n     *\n     * @param        $size\n     *\n     * @return mixed|string\n     */\n    public static function buttonSize($size = null)\n    {\n        if (bs2()) {\n            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {\n                $btn_size = ''; // actually default size, NOT true bootstrap large\n            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {\n                $btn_size = 'btn-mini';\n            } else { // medium\n                $btn_size = 'btn-small';\n            }\n            return $btn_size;\n        } elseif (bs3()) {\n            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {\n                $btn_size = 'btn-lg';\n            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {\n                $btn_size = 'btn-sm';\n            } elseif (BTN_SIZE == 'extrasmall' || (!empty($size) && $size == 'extrasmall')) {\n                $btn_size = 'btn-xs';\n            } else { // medium\n                $btn_size = '';\n            }\n            return $btn_size;\n        } else {\n            if (empty($size)) {\n                $size = BTN_SIZE;\n            }\n            return $size;\n        }\n    }\n\n    /**\n     * Return the button color and size style for the current framework\n     *\n     * @param null   $color\n     * @param        $size\n     *\n     * @return mixed|string\n     */\n    public static function buttonStyle($color = null, $size = null)\n    {\n        if (bs()) {\n            $btn_class = 'btn ' . self::buttonColor($color) . ' ' . self::buttonSize($size);\n        } else {\n            $btn_size = !empty($size) ? $size : BTN_SIZE;\n            $btn_color = !empty($color) ? $color : BTN_COLOR;\n            $btn_class = \"awesome \" . $btn_size . \" \" . $btn_color;\n        }\n        return $btn_class;\n    }\n\n    /**\n     * Return the icon associated for the current frameowrk\n     *\n     * @param        $class\n     *\n     * @return stdClass|string\n     */\n    public static function buttonIcon($class, $size=null)\n    {\n        $btn_type = '';\n        if (bs2()) {\n            switch ($class) {\n                case 'delete' :\n                case 'delete-title' :\n                    $class = \"remove-sign\";\n                    $btn_type = \"btn-danger\"; // red\n                    break;\n                case 'add' :\n                case 'add-title' :\n                case 'add-body' :\n                case 'switchtheme add' :\n                    $class = \"plus-sign\";\n                    $btn_type = \"btn-success\"; // green\n                    break;\n                case 'copy' :\n                    $class = \"copy\";\n                    break;\n                case 'downloadfile' :\n                case 'export' :\n                    $class = \"download-alt\";\n                    break;\n                case 'uploadfile' :\n                case 'import' :\n                    $class = \"upload-alt\";\n                    break;\n                case 'manage' :\n                    $class = \"briefcase\";\n                    break;\n                case 'merge' :\n                case 'arrow_merge' :\n                    $class = \"signin\";\n                    break;\n                case 'reranklink' :\n                case 'alphasort' :\n                    $class = \"sort\";\n                    break;\n                case 'configure' :\n                    $class = \"wrench\";\n                    break;\n                case 'view' :\n                    $class = \"search\";\n                    break;\n                case 'page_next' :\n                    $class = 'double-angle-right';\n                    break;\n                case 'page_prev' :\n                    $class = 'double-angle-left';\n                    break;\n                case 'password' :\n                case 'change_password' :\n                    $class = 'key';\n                    break;\n                case 'clean' :\n                    $class = 'check';\n                    break;\n                case 'userperms' :\n                    $class = 'user';\n                    break;\n                case 'groupperms' :\n                    $class = 'group';\n                    break;\n                case 'monthviewlink' :\n                case 'weekviewlink' :\n                    $class = 'calendar';\n                    break;\n                case 'listviewlink' :\n                    $class = 'list';\n                    break;\n                case 'adminviewlink' :\n                    $class = 'cogs';\n                    break;\n                case 'approve' :\n                    $class = \"check\";\n                    $btn_type = \"btn-success\"; // green\n                    break;\n                case 'ajax' :\n                    $class = \"spinner icon-spin\";\n                    break;\n            }\n            $found = new stdClass();\n            $found->type = $btn_type;\n            $found->class = $class;\n            $found->size = self::iconSize($size);\n            $found->prefix = 'icon-';\n            return $found;\n        } elseif (bs3()) {\n            switch ($class) {\n                case 'delete' :\n                case 'delete-title' :\n                    $class = \"times-circle\";\n                    $btn_type = \"btn-danger\";  // red\n                    break;\n                case 'add' :\n                case 'add-title' :\n                case 'add-body' :\n                case 'switchtheme add' :\n                    $class = \"plus-circle\";\n                    $btn_type = \"btn-success\";  // green\n                    break;\n                case 'copy' :\n                    $class = \"files-o\";\n                    break;\n                case 'downloadfile' :\n                case 'export' :\n                    $class = \"download\";\n                    break;\n                case 'uploadfile' :\n                case 'import' :\n                    $class = \"upload\";\n                    break;\n                case 'manage' :\n                    $class = \"briefcase\";\n                    break;\n                case 'merge' :\n                case 'arrow_merge' :\n                    $class = \"sign-in\";\n                    break;\n                case 'reranklink' :\n                case 'alphasort' :\n                    $class = \"sort\";\n                    break;\n                case 'configure' :\n                    $class = \"wrench\";\n                    break;\n                case 'view' :\n                    $class = \"search\";\n                    break;\n                case 'page_next' :\n                    $class ='angle-double-right';\n                    break;\n                case 'page_prev' :\n                    $class = 'angle-double-left';\n                    break;\n                case 'password' :\n                case 'change_password' :\n                    $class = 'key';\n                    break;\n                case 'clean' :\n                    $class = 'check-square-o';\n                    break;\n                case 'trash' :\n                    $class = \"trash-o\";\n                    break;\n                case 'userperms' :\n                    $class = 'user';\n                    break;\n                case 'groupperms' :\n                    $class = 'group';\n                    break;\n                case 'monthviewlink' :\n                case 'weekviewlink' :\n                    $class = 'calendar';\n                    break;\n                case 'listviewlink' :\n                    $class = 'list';\n                    break;\n                case 'adminviewlink' :\n                    $class = 'cogs';\n                    break;\n                case 'approve' :\n                    $class = \"check\";\n                    $btn_type = \"btn-success\"; // green\n                    break;\n                case 'ajax' :\n                    $class = \"spinner fa-spin\";\n                    break;\n            }\n            $found = new stdClass();\n            $found->type = $btn_type;\n            $found->class = $class;\n            $found->size = self::iconSize($size);\n            $found->prefix = 'fa fa-';\n            return $found;\n        } else {\n            return $class;\n        }\n    }\n\n    /**\n     * Return the full icon style string for the current framework\n     *\n     * @param        $class\n     *\n     * @return string\n     */\n    public static function iconStyle($class, $text = null) {\n        $style = self::buttonIcon($class);\n        if (!empty($style->prefix)) {\n            if ($text) {\n                return '<i class=\"' .$style->prefix . $style->class . '\"></i> '. $text;\n            } else {\n                return $style->prefix . $style->class;\n            }\n        } else {\n            return $style;\n        }\n    }\n\n    /**\n     * Return the icon size for the current framework\n     *\n     * @param        $size\n     *\n     * @return mixed|string\n     */\n    public static function iconSize($size = null)\n    {\n        if (bs2()) {\n            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {\n                $icon_size = 'icon-large';\n            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {\n                $icon_size = '';\n            } else { // medium\n                $icon_size = 'icon-large';\n            }\n            return $icon_size;\n        } elseif (bs3()) {\n            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {\n                $icon_size = 'fa-lg';\n            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {\n                $icon_size = '';\n            } else { // medium\n                $icon_size = 'fa-lg';\n            }\n            return $icon_size;\n        } else {\n            return BTN_SIZE;\n        }\n    }\n\n    public static function is_mobile()\n    {\n        $tablet_browser = 0;\n        $mobile_browser = 0;\n\n        if (preg_match(\n            '/(tablet|ipad|playbook)|(android(?!.*(mobi|opera mini)))/i',\n            strtolower($_SERVER['HTTP_USER_AGENT'])\n        )\n        ) {\n            $tablet_browser++;\n        }\n\n        if (preg_match(\n            '/(up.browser|up.link|mmp|symbian|smartphone|midp|wap|phone|android|iemobile)/i',\n            strtolower($_SERVER['HTTP_USER_AGENT'])\n        )\n        ) {\n            $mobile_browser++;\n        }\n\n        if ((!empty($_SERVER['HTTP_ACCEPT']) && strpos(\n                    strtolower($_SERVER['HTTP_ACCEPT']),\n                    'application/vnd.wap.xhtml+xml'\n                ) > 0) or ((isset($_SERVER['HTTP_X_WAP_PROFILE']) or isset($_SERVER['HTTP_PROFILE'])))\n        ) {\n            $mobile_browser++;\n        }\n\n        $mobile_ua = strtolower(substr($_SERVER['HTTP_USER_AGENT'], 0, 4));\n        $mobile_agents = array(\n            'w3c ',\n            'acs-',\n            'alav',\n            'alca',\n            'amoi',\n            'audi',\n            'avan',\n            'benq',\n            'bird',\n            'blac',\n            'blaz',\n            'brew',\n            'cell',\n            'cldc',\n            'cmd-',\n            'dang',\n            'doco',\n            'eric',\n            'hipt',\n            'inno',\n            'ipaq',\n            'java',\n            'jigs',\n            'kddi',\n            'keji',\n            'leno',\n            'lg-c',\n            'lg-d',\n            'lg-g',\n            'lge-',\n            'maui',\n            'maxo',\n            'midp',\n            'mits',\n            'mmef',\n            'mobi',\n            'mot-',\n            'moto',\n            'mwbp',\n            'nec-',\n            'newt',\n            'noki',\n            'palm',\n            'pana',\n            'pant',\n            'phil',\n            'play',\n            'port',\n            'prox',\n            'qwap',\n            'sage',\n            'sams',\n            'sany',\n            'sch-',\n            'sec-',\n            'send',\n            'seri',\n            'sgh-',\n            'shar',\n            'sie-',\n            'siem',\n            'smal',\n            'smar',\n            'sony',\n            'sph-',\n            'symb',\n            't-mo',\n            'teli',\n            'tim-',\n            'tosh',\n            'tsm-',\n            'upg1',\n            'upsi',\n            'vk-v',\n            'voda',\n            'wap-',\n            'wapa',\n            'wapi',\n            'wapp',\n            'wapr',\n            'webc',\n            'winw',\n            'winw',\n            'xda ',\n            'xda-'\n        );\n\n        if (in_array($mobile_ua, $mobile_agents)) {\n            $mobile_browser++;\n        }\n\n        if (strpos(strtolower($_SERVER['HTTP_USER_AGENT']), 'opera mini') > 0) {\n            $mobile_browser++;\n            //Check for tablets on opera mini alternative headers\n            $stock_ua = strtolower(\n                isset($_SERVER['HTTP_X_OPERAMINI_PHONE_UA']) ? $_SERVER['HTTP_X_OPERAMINI_PHONE_UA'] : (isset($_SERVER['HTTP_DEVICE_STOCK_UA']) ? $_SERVER['HTTP_DEVICE_STOCK_UA'] : '')\n            );\n            if (preg_match('/(tablet|ipad|playbook)|(android(?!.*mobile))/i', $stock_ua)) {\n                $tablet_browser++;\n            }\n        }\n\n        if (strpos(strtolower($_SERVER['HTTP_USER_AGENT']), 'windows') > 0) {\n            $mobile_browser = 0;\n        }\n\n        if ($tablet_browser > 0) {\n            // do something for tablet devices\n//           print 'is tablet';\n        } elseif ($mobile_browser > 0) {\n            // do something for mobile devices\n//            print 'is mobile';\n        } else {\n            // do something for everything else\n//            print 'is desktop';\n        }\n\n        return $mobile_browser;\n    }\n\n    /**\n     * Warn admin of obsolete theme methods\n     *\n     * @param string $newcall\n     * @param null $controller\n     * @param null $actionview\n     */\n    public static function deprecated($newcall = \"expTheme::module()\", $controller = null, $actionview = null)\n    {\n        global $user;\n\n        if ($user->isAdmin() && DEVELOPMENT) {\n            $trace = debug_backtrace();\n            $caller = $trace[1];\n            if (substr($caller['file'], -16, 6) == 'compat') {\n                $caller = $trace[2];\n            }\n            $oldcall = $caller['function'];\n            if ($caller['class'] == 'expTheme') {\n                $oldcall = $caller['class'] . '::' . $oldcall;\n            }\n            $message = '<strong>' . $oldcall . '</strong> ' . gt(\n                    'is deprecated and should be replaced by'\n                ) . ' <strong>' . $newcall . '</strong>';\n            if (!empty($controller)) {\n                $message .= '<br>' . gt(\n                        'for hard coded module'\n                    ) . ' - <strong>' . $controller . ' / ' . $actionview . '</strong>';\n            }\n            $message .= '<br>' . gt('line') . ' #' . $caller['line'] . ' ' . gt('of') . $caller['file'];\n            $message .= ' <a class=\"helplink\" title=\"' . gt('Get Theme Update Help') . '\" href=\"' . help::makeHelpLink(\n                    'theme_update'\n                ) . '\" target=\"_blank\">' . gt('Help') . '</a>';\n            flash('notice', $message);\n        }\n    }\n\n}\n\n?>"], "fixing_code": ["<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class mysqli_database\n *\n * This is the MySQLi-specific implementation of the database class.\n * @package Subsystems\n * @subpackage Database\n */\n/** @define \"BASE\" \"../..\" */\n\nclass mysqli_database extends database {\n\n    /**\n     * Make a connection to the Database Server\n     *\n     * Takes the supplied credentials (username / password) and tries to\n     * connect to the server and select the given database.  All the rules\n     * governing mysqli_connect also govern this method.\n     *\n     * @param string $username The username to connect to the server as.\n     * @param string $password The password for $username\n     * @param string $hostname The hostname of the database server.  If\n     *   localhost is specified, a local socket connection will be attempted.\n     * @param string $database The name of the database to use.  Multi-database\n     *   sites are still not yet supported.\n     * @param bool $new Whether or not to force the PHP connection function to establish\n     *   a distinctly new connection handle to the server.\n     */\n\n\tfunction __construct($username, $password, $hostname, $database, $new=false) {\n\t\tif (strstr($hostname,':')) {\n\t\t\tlist ( $host, $port ) = @explode (\":\", $hostname);\n\t\t} else {\n            $host = $hostname;\n        }\n\t\tif ($this->connection = @mysqli_connect($host, $username, $password, $database, $port)) {\n\t\t\t$this->havedb = true;\n\t\t}\n\t\t//fix to support utf8, warning it only works from a certain mySQL version on\n\t\t//needed on mySQL servers that don't have the default connection encoding setting to utf8\n\n\t\t//As we do not have any setting for ISAM or InnoDB tables yet, i set the minimum specs\n\t\t// for using this feature to 4.1.2, although isam tables got the support for utf8 already in 4.1\n\t\t//anything else would result in an inconsistent user experience\n\t\t//TODO: determine how to handle encoding on postgres\n\n\t\tlist($major, $minor, $micro) = sscanf(@mysqli_get_server_info($this->connection), \"%d.%d.%d-%s\");\n\t\tif(defined('DB_ENCODING')) {\n\t\t\t//SET NAMES is possible since version 4.1\n\t\t\tif(($major > 4) OR (($major == 4) AND ($minor >= 1))) {\n\t\t\t\t@mysqli_query($this->connection, \"SET NAMES \" . DB_ENCODING);\n\t\t\t}\n\t\t}\n\n\t\t$this->prefix = DB_TABLE_PREFIX . '_';\n\t}\n\n    /**\n     * Create a new Table\n     *\n     * Creates a new database table, according to the passed data definition.\n     *\n     * This function abides by the Exponent Data Definition Language, and interprets\n     * its general structure for MySQL.\n     *\n     * @param string $tablename The name of the table to create\n     * @param array $datadef The data definition to create, expressed in\n     *   the Exponent Data Definition Language.\n     * @param array $info Information about the table itself.\n     * @return array\n\t */\n\tfunction createTable($tablename, $datadef, $info) {\n\t\tif (!is_array($info))\n            $info = array(); // Initialize for later use.\n\n\t\t$sql = \"CREATE TABLE `\" . $this->prefix . \"$tablename` (\";\n\t\t$primary = array();\n\t\t$fulltext = array();\n\t\t$unique = array();\n\t\t$index = array();\n\t\tforeach ($datadef as $name=>$def) {\n\t\t\tif ($def != null) {\n\t\t\t\t$sql .= $this->fieldSQL($name,$def) . \",\";\n\t\t\t\tif (!empty($def[DB_PRIMARY]))  $primary[] = $name;\n\t\t\t\tif (!empty($def[DB_FULLTEXT])) $fulltext[] = $name;\n\t\t\t\tif (isset($def[DB_INDEX]) && ($def[DB_INDEX] > 0)) {\n\t\t\t\t\tif ($def[DB_FIELD_TYPE] == DB_DEF_STRING) {\n\t\t\t\t\t\t$index[$name] = $def[DB_INDEX];\n                    } else {\n                        $index[$name] = 0;\n                    }\n                }\n                if (isset($def[DB_UNIQUE])) {\n                    if (!isset($unique[$def[DB_UNIQUE]]))\n                        $unique[$def[DB_UNIQUE]] = array();\n                    $unique[$def[DB_UNIQUE]][] = $name;\n                }\n            }\n        }\n        $sql = substr($sql, 0, -1);\n        if (count($primary)) {\n            $sql .= \", PRIMARY KEY ( `\" . implode(\"` , `\", $primary) . \"`)\";\n        }\n        if (count($fulltext)) {\n//            $sql .= \", FULLTEXT ( `\" . implode(\"` , `\", $fulltext) . \"`)\";\n            $sql .= \", FULLTEXT `\" . $fulltext[0] . \"`\" . \"( `\" . implode(\"` , `\", $fulltext) . \"`)\";\n        }\n        if (!empty($unique)) foreach ($unique as $key => $value) {\n            $sql .= \", UNIQUE `\" . $key . \"` ( `\" . implode(\"` , `\", $value) . \"`)\";\n        }\n        foreach ($index as $key => $value) {\n            $sql .= \", INDEX (`\" . $key . \"`\" . (($value > 0) ? \"(\" . $value . \")\" : \"\") . \")\";\n        }\n        $sql .= \")\";\n        if (defined(DB_ENCODING)) {\n            $sql .= \" ENGINE = MYISAM CHARACTER SET \" . DB_ENCODING;\n        } else {\n            $sql .= \" ENGINE = MYISAM CHARACTER SET utf8 COLLATE utf8_unicode_ci\";\n        }\n\n        if (isset($info[DB_TABLE_COMMENT])) {\n            $sql .= \" COMMENT = '\" . $info[DB_TABLE_COMMENT] . \"'\";\n        }\n\n        @mysqli_query($this->connection, $sql);\n\n        $return = array(\n            $tablename => ($this->tableExists($tablename) ? DATABASE_TABLE_INSTALLED : DATABASE_TABLE_FAILED)\n        );\n\n        return $return;\n    }\n\n    /**\n     * Alter an existing table\n     *\n     * Alters the structure of an existing database table to conform to the passed\n     * data definition.\n     *\n     * This function abides by the Exponent Data Definition Language, and interprets\n     * its general structure for MySQL.\n     *\n     * @param string $tablename The name of the table to alter\n     * @param array $newdatadef The new data definition for the table.\n     *   This is expressed in the Exponent Data Definition Language\n     * @param array $info Information about the table itself.\n     * @param bool $aggressive Whether or not to aggressively update the table definition.\n     *   An aggressive update will drop columns in the table that are not in the Exponent definition.\n     * @return array\n     */\n    function alterTable($tablename, $newdatadef, $info, $aggressive = false) {\n        expSession::clearAllUsersSessionCache();\n        $dd = $this->getDataDefinition($tablename);\n        $modified = false;\n\n        // collect any indexes & keys to the table\n        $primary = array();\n        $fulltext = array();\n        $unique = array();\n        $index = array();\n        foreach ($newdatadef as $name=>$def) {\n            if ($def != null) {\n                if (!empty($def[DB_PRIMARY]))  $primary[] = $name;\n                if (!empty($def[DB_FULLTEXT])) $fulltext[] = $name;\n                if (isset($def[DB_INDEX]) && ($def[DB_INDEX] > 0)) {\n                    if ($def[DB_FIELD_TYPE] == DB_DEF_STRING) {\n                          $index[$name] = $def[DB_INDEX];\n                      } else {\n                          $index[$name] = 0;\n                      }\n                  }\n                  if (isset($def[DB_UNIQUE])) {\n                      if (!isset($unique[$def[DB_UNIQUE]]))\n                          $unique[$def[DB_UNIQUE]] = array();\n                      $unique[$def[DB_UNIQUE]][] = $name;\n                }\n            }\n        }\n\n        //Drop any old columns from the table if aggressive mode is set.\n        if ($aggressive) {\n            //update primary keys to 'release' columns\n            $sql = \"ALTER IGNORE TABLE `\" . $this->prefix . \"$tablename` \";\n            if (count($primary)) {\n                $sql .= \" DROP PRIMARY KEY, ADD PRIMARY KEY ( `\" . implode(\"` , `\",$primary) . \"` )\";\n            }\n            @mysqli_query($this->connection, $sql);\n\n            if (is_array($newdatadef) && is_array($dd)) {\n                $oldcols = @array_diff_assoc($dd, $newdatadef);\n                if (count($oldcols)) {\n                    $modified = true;\n                    $sql = \"ALTER TABLE `\" . $this->prefix . \"$tablename` \";\n                    foreach ($oldcols as $name => $def) {\n                        $sql .= \" DROP COLUMN \" . $name . \",\";\n                    }\n                    $sql = substr($sql, 0, -1);\n                    @mysqli_query($this->connection, $sql);\n                }\n            }\n        }\n\n        //Add any new columns to the table\n        if (is_array($newdatadef) && is_array($dd)) {\n            $diff = @array_diff_assoc($newdatadef, $dd);\n            if (count($diff)) {\n                $modified = true;\n                $sql = \"ALTER TABLE `\" . $this->prefix . \"$tablename` \";\n                foreach ($diff as $name => $def) {\n                    $sql .= \" ADD COLUMN (\" . $this->fieldSQL($name, $def) . \"),\";\n                }\n                $sql = substr($sql, 0, -1);\n                @mysqli_query($this->connection, $sql);\n            }\n\n            // alter any existing columns here\n            $diff_c = @expCore::array_diff_assoc_recursive($newdatadef, $dd);\n            $sql = \"ALTER TABLE `\" . $this->prefix . \"$tablename` \";\n            $changed = false;\n            if (is_array($diff_c)) {\n                foreach ($diff_c as $name => $def) {\n                    if (!array_key_exists($name, $diff) && (isset($def[DB_FIELD_TYPE]) || isset($def[DB_FIELD_LEN]) || isset($def[DB_DEFAULT]) || isset($def[DB_INCREMENT]))) {  // wasn't a new column\n                        if ($dd[$name][DB_FIELD_TYPE] == DB_DEF_STRING) {\n                            //check for actual lengths vs. exp placeholder lengths\n                            $newlen = $newdatadef[$name][DB_FIELD_LEN];\n                            $len = $dd[$name][DB_FIELD_LEN];\n                            if ($len >= 16777216 && $newlen >= 16777216) {\n                                continue;\n                            }\n                            if ($len >= 65536 && $newlen >= 65536) {\n                                continue;\n                            }\n                            if ($len >= 256 && $newlen >= 256) {\n                                continue;\n                            }\n                        }\n                        $changed = true;\n                        $sql .= ' MODIFY ' . $this->fieldSQL($name,$newdatadef[$name]) . \",\";\n                    }\n                }\n            }\n            if ($changed) {\n                $modified = true;\n                $sql = substr($sql, 0, -1);\n                @mysqli_query($this->connection, $sql);\n            }\n        }\n\n        //Add any new indexes & keys to the table\n        $sql = \"ALTER\" . (empty($aggressive) ? \"\" : \" IGNORE\") . \" TABLE `\" . $this->prefix . \"$tablename` \";\n\n        $sep = false;\n        if (count($primary)) {\n            $sql .= \" DROP PRIMARY KEY, ADD PRIMARY KEY ( `\" . implode(\"` , `\",$primary) . \"` )\";\n            $sep = true;\n        }\n        if (count($fulltext)) {\n            if ($sep) $sql .= ' ,';\n//            $sql .= \" ADD FULLTEXT ( `\" . implode(\"` , `\", $fulltext) . \"`)\";\n            // drop the index first so we don't get dupes\n            $drop = \"DROP INDEX \" . $fulltext[0] . \" ON \" . $this->prefix . $tablename;\n            @mysqli_query($this->connection, $drop);\n            $sql .= \" ADD FULLTEXT `\" . $fulltext[0] . \"`\" . \"( `\" . implode(\"` , `\", $fulltext) . \"`)\";\n            $sep = true;\n        }\n        if (!empty($unique)) foreach ($unique as $key=>$value) {\n            if ($sep) $sql .= ' ,';\n            $sql .= \", ADD UNIQUE `\".$key.\"` ( `\" . implode(\"` , `\",$value) . \" `)\";\n            $sep = true;\n        }\n\n        foreach ($index as $key => $value) {\n            // drop the index first so we don't get dupes\n            $drop = \"DROP INDEX \" . $key . \" ON \" . $this->prefix . $tablename;\n            @mysqli_query($this->connection, $drop);\n\n            // re-add the index\n            if ($sep) $sql .= ' ,';\n//            $sql .= \" ADD INDEX (`\" . $key . \"`)\";  //FIXME we don't add column length??\n            $sql .= \" ADD INDEX (`\" . $key . \"`\" . (($value > 0) ? \"(\" . $value . \")\" : \"\") . \")\";\n            $sep = true;\n        }\n        @mysqli_query($this->connection, $sql);\n\n        //Get the return code\n        $return = array(\n            $tablename => ($modified ? TABLE_ALTER_SUCCEEDED : TABLE_ALTER_NOT_NEEDED)\n        );\n\n        return $return;\n    }\n\n    /**\n     * Drop a table from the database\n     *\n     * Removes an existing table from the database. Returns true if the table was dropped, false if there\n     * was an error returned by the MySQL server.\n     *\n     * @param string $table The name of the table to drop.\n     * @return bool\n     */\n    function dropTable($table) {\n        return @mysqli_query($this->connection, \"DROP TABLE `\" . $this->prefix . \"$table`\") !== false;\n    }\n\n    /**\n     * Run raw SQL.  Returns true if the query succeeded, and false\n     *   if an error was returned from the MySQL server.\n     *\n     * <div style=\"color:red\">If you can help it, do not use this function.  It presents Database Portability Issues.</div>\n     *\n     * Runs a straight SQL query on the database.  This is not a\n     * very portable way of dealing with the database, and is only\n     * provided as a last resort.\n     *\n     * @param string $sql The SQL query to run\n\t * @param bool $escape Indicates if the query will be escape\n     * @return mixed\n     */\n    function sql($sql, $escape = true) {\n\t\tif($escape == true) {\n\t\t\t$res = @mysqli_query($this->connection, mysqli_real_escape_string($this->connection, $sql));\n\t\t} else {\n\t\t\t$res = @mysqli_query($this->connection, $sql);\n\t\t}\n        return $res;\n    }\n\n\t/**\n\t * Update a column in all records in a table\n\t *\n\t * @param  $table\n\t * @param  $col\n\t * @param $val\n\t * @param int|null $where\n\t * @return void\n\t */\n    function columnUpdate($table, $col, $val, $where=1) {         \n        $res = @mysqli_query($this->connection, \"UPDATE `\" . $this->prefix . \"$table` SET `$col`='\" . $val . \"' WHERE $where\");\n        /*if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0; $i < mysqli_num_rows($res); $i++)\n            $objects[] = mysqli_fetch_object($res);*/\n        //return $objects;\n    }\n\n    /**\n     * Select a series of objects\n     *\n     * Selects a set of objects from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of objects, in any random order.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *   is specified as null, then no criteria is applied, and all objects are\n     *   returned\n     * @param null $orderby\n     * @return array\n     */\n    function selectObjects($table, $where = null, $orderby = null) {\n        if ($where == null)\n            $where = \"1\";\n        else\n            $where = $this->injectProof($where);\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $objects[] = mysqli_fetch_object($res);\n        return $objects;\n    }\n\n\t/**\n\t * @param  $terms\n\t * @param null $where\n\t * @return array\n\t */\n    function selectSearch($terms, $where = null) {\n        if ($where == null)\n            $where = \"1\";\n\n        $sql = \"SELECT *, MATCH (s.title, s.body) AGAINST ('\" . $terms . \"*') as score from \" . $this->prefix . \"search as s \";\n        $sql .= \"WHERE MATCH (title, body) against ('\" . $terms . \"*' IN BOOLEAN MODE) ORDER BY score DESC\";\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $objects[] = mysqli_fetch_object($res);\n        return $objects;\n    }\n\n\t/**\n\t * @param null $colsA\n\t * @param null $colsB\n\t * @param  $tableA\n\t * @param  $tableB\n\t * @param  $keyA\n\t * @param null $keyB\n\t * @param null $where\n\t * @param null $orderby\n\t * @return array'\n\t */\n    function selectAndJoinObjects($colsA=null, $colsB=null, $tableA, $tableB, $keyA, $keyB=null, $where = null, $orderby = null) {\n        $sql = 'SELECT ';\n        if ($colsA != null) {\n            if (!is_array($colsA)) {\n                $sql .= 'a.' . $colsA . ', ';\n            } else {\n                foreach ($colsA as $colA) {\n                    $sql .= 'a.' . $colA . ', ';\n                }\n            }\n        } else {\n            $sql .= ' a.*, ';\n        }\n\n        if ($colsB != null) {\n            if (!is_array($colsB)) {\n                $sql .= 'b.' . $colsB . ' ';\n            } else {\n                $i = 1;\n                foreach ($colsB as $colB) {\n                    $sql .= 'b.' . $colB;\n                    if ($i < count($colsB))\n                        $sql .= ', ';\n                    $i++;\n                }\n            }\n        } else {\n            $sql .= ' b.* ';\n        }\n\n        $sql .= ' FROM ' . $this->prefix . $tableA . ' a JOIN ' . $this->prefix . $tableB . ' b ';\n        $sql .= is_null($keyB) ? 'USING(' . $keyA . ')' : 'ON a.' . $keyA . ' = b.' . $keyB;\n\n        if ($where == null)\n            $where = \"1\";\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n\n        $res = @mysqli_query($this->connection, $sql . \" WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $objects[] = mysqli_fetch_object($res);\n        return $objects;\n    }\n\n\t/**\n     * Select a single object by sql\n     *\n\t * @param  $sql\n\t * @return null|void\n\t */\n    function selectObjectBySql($sql) {\n        //$logFile = \"C:\\\\xampp\\\\htdocs\\\\supserg\\\\tmp\\\\queryLog.txt\";\n        //$lfh = fopen($logFile, 'a');\n        //fwrite($lfh, $sql . \"\\n\");    \n        //fclose($lfh);                 \n        $res = @mysqli_query($this->connection, $this->injectProof($sql));\n        if ($res == null)\n            return null;\n        return mysqli_fetch_object($res);\n    }\n\n\t/**\n     * Select a series of objects by sql\n     *\n\t * @param  $sql\n\t * @return array\n\t */\n    function selectObjectsBySql($sql) {\n        $res = @mysqli_query($this->connection, $this->injectProof($sql));\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $objects[] = mysqli_fetch_object($res);\n        return $objects;\n    }\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @param null $orderby\n\t * @param bool $distinct\n\t * @return array\n\t */\n    function selectColumn($table, $col, $where = null, $orderby = null, $distinct=false) {\n        if ($where == null)\n            $where = \"1\";\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n        $dist = empty($distinct) ? '' : 'DISTINCT ';\n\n        $res = @mysqli_query($this->connection, \"SELECT \" . $dist . $col . \" FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $resarray = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $row = mysqli_fetch_array($res, MYSQLI_NUM);\n            $resarray[$i] = $row[0];\n        }\n        return $resarray;\n    }\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return int\n\t */\n    function selectSum($table, $col, $where = null) {\n        if ($where == null)\n            $where = \"1\";\n\n        $res = @mysqli_query($this->connection, \"SELECT SUM(\" . $col . \") FROM `\" . $this->prefix . \"$table` WHERE $where\");\n        if ($res == null)\n            return 0;\n        $resarray = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $row = mysqli_fetch_array($res, MYSQLI_NUM);\n            $resarray[$i] = $row[0];\n        }\n        return $resarray[0];\n    }\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @param null $orderby\n\t * @return array\n\t */\n    function selectDropdown($table, $col, $where = null, $orderby = null) {\n        if ($where == null)\n            $where = \"1\";\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $resarray = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $row = mysqli_fetch_object($res);\n            $resarray[$row->id] = $row->$col;\n        }\n        return $resarray;\n    }\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return null\n\t */\n    function selectValue($table, $col, $where=null) {\n        if ($where == null)\n            $where = \"1\";\n        $sql = \"SELECT \" . $col . \" FROM `\" . $this->prefix . \"$table` WHERE $where LIMIT 0,1\";\n        $res = @mysqli_query($this->connection, $sql);\n\n        if ($res == null)\n            return null;\n        $obj = mysqli_fetch_object($res);\n        if (is_object($obj)) {\n            return $obj->$col;\n        } else {\n            return null;\n        }\n    }\n\n\t/**\n\t * @param  $sql\n\t * @return null\n\t */\n    function selectValueBySql($sql) {\n        $res = $this->sql($sql);\n        if ($res == null)\n            return null;\n        $r = mysqli_fetch_row($res);\n        if (is_array($r)) {\n            return $r[0];\n        } else {\n            return null;\n        }\n    }\n\n    /**\n     * Select a series of objects, and return by ID\n     *\n     * Selects a set of objects from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table. Returns an\n     * array of objects, in any random order.  The indices of the array\n     * are the IDs of the objects.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *   is specified as null, then no criteria is applied, and all objects are\n     *   returned\n     * @param null $orderby\n     * @return array\n     */\n    function selectObjectsIndexedArray($table, $where = null, $orderby = null) {\n        if ($where == null)\n            $where = \"1\";\n        else\n            $where = $this->injectProof($where);\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n\n        if ($res == null)\n            return array();\n        $objects = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $o = mysqli_fetch_object($res);\n            $objects[$o->id] = $o;\n        }\n        return $objects;\n    }\n\n    /**\n     * Count Objects matching a given criteria\n     *\n     * @param string $table The name of the table to count objects in.\n     * @param string $where Criteria for counting.\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return int\n     */\n    function countObjects($table, $where = null, $is_revisioned=false, $needs_approval=false) {\n        if ($where == null)\n            $where = \"1\";\n        $as = '';\n        if ($is_revisioned) {\n   //            $where.= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE $where)\";\n            $where .= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE id = rev.id \";\n            if ($needs_approval) $where .= ' AND (approved=1 OR poster=' . $needs_approval . ' OR editor=' . $needs_approval . ')';\n            $where .= \")\";\n            $as = ' AS rev';\n        }\n        $res = @mysqli_query($this->connection, \"SELECT COUNT(*) as c FROM `\" . $this->prefix . \"$table`\" . $as . \" WHERE $where\");\n        if ($res == null)\n            return 0;\n        $obj = mysqli_fetch_object($res);\n        return $obj->c;\n    }\n\n    /**\n     * Count Objects matching a given criteria using raw sql\n     *\n     * @param string $sql The sql query to be run\n     * @return int\n     */\n    function countObjectsBySql($sql) {\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return 0;\n        $obj = mysqli_fetch_object($res);\n        return $obj->c;\n    }\n\n    /**\n     * Count Objects matching a given criteria using raw sql\n     *\n     * @param string $sql The sql query to be run\n     * @return int|void\n     */\n    function queryRows($sql) {\n        $res = @mysqli_query($this->connection, $sql);\n        return empty($res) ? 0 : mysqli_num_rows($res);\n    }\n\n    /**\n     * Select a single object.\n     *\n     * Selects an objects from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a single record from a database table. Returns the\n     * first record/object found (in the case of multiple-result queries,\n     * there is no way to determine which of the set will be returned).\n     * If no record(s) match the query, null is returned.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.\n     * @return object/null|void\n     */\n    function selectObject($table, $where) {\n        $where = $this->injectProof($where);\n        $res = mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where LIMIT 0,1\");\n        if ($res == null)\n            return null;\n        return mysqli_fetch_object($res);\n    }\n\n\t/**\n\t * @param $table\n\t * @param string $lockType\n\t * @return mixed\n\t */\n\tfunction lockTable($table,$lockType=\"WRITE\") {\n        $sql = \"LOCK TABLES `\" . $this->prefix . \"$table` $lockType\";\n       \n        $res = mysqli_query($this->connection, $sql); \n        return $res;\n    }\n\n\t/**\n\t * @return mixed\n\t */\n\tfunction unlockTables() {\n        $sql = \"UNLOCK TABLES\";\n        \n        $res = mysqli_query($this->connection, $sql);\n        return $res;\n    }\n    \n\t/**\n     * Insert an Object into some table in the Database\n     *\n     * This method will return the ID assigned to the new record by MySQL.  Note that\n     * object attributes starting with an underscore ('_') will be ignored and NOT inserted\n     * into the table as a field value.\n     *\n     * @param object $object The object to insert.\n     * @param string $table The logical table name to insert into.  This does not include the table prefix, which\n     *    is automagically prepended for you.\n     * @return int|void\n     */\n    function insertObject($object, $table) {\n        //if ($table==\"text\") eDebug($object,true); \n        $sql = \"INSERT INTO `\" . $this->prefix . \"$table` (\";\n        $values = \") VALUES (\";\n        foreach (get_object_vars($object) as $var => $val) {\n            //We do not want to save any fields that start with an '_'\n            if ($var{0} != '_') {\n                $sql .= \"`$var`,\";\n                if ($values != \") VALUES (\") {\n                    $values .= \",\";\n                }\n                $values .= \"'\" . $this->escapeString($val) . \"'\";\n            }\n        }\n        $sql = substr($sql, 0, -1) . substr($values, 0) . \")\";\n        //if($table=='text')eDebug($sql,true);\n        if (@mysqli_query($this->connection, $sql) != false) {\n            $id = mysqli_insert_id($this->connection);\n            return $id;\n        } else\n            return 0;\n    }\n\n    /**\n     * Delete one or more objects from the given table.\n     *\n     * @param string $table The name of the table to delete from.\n     * @param string $where Criteria for determining which record(s) to delete.\n     * @return mixed\n     */\n    function delete($table, $where = null) {\n        if ($where != null) {\n            $res = @mysqli_query($this->connection, \"DELETE FROM `\" . $this->prefix . \"$table` WHERE $where\");\n            return $res;\n        } else {\n            $res = @mysqli_query($this->connection, \"TRUNCATE TABLE `\" . $this->prefix . \"$table`\");\n            return $res;\n        }\n    }\n\n    /**\n     * Update one or more objects in the database.\n     *\n     * This function will only update the attributes of the resulting record(s)\n     * that are also member attributes of the $object object.\n     *\n     * @param object $object An object specifying the fields and values for updating.\n     *    In most cases, this will be the altered object originally returned from one of\n     *    the select* methods.\n     * @param string $table The table to update in.\n     * @param string $where Optional criteria used to narrow the result set.\n     * @param string $identifier\n     * @param bool $is_revisioned\n     * @return bool|int|void\n     */\n    function updateObject($object, $table, $where=null, $identifier='id', $is_revisioned=false) {\n\n        if ($is_revisioned) {\n            $object->revision_id++;\n            //if ($table==\"text\") eDebug($object);\n            $res = $this->insertObject($object, $table);\n            //if ($table==\"text\") eDebug($object,true); \n            $this->trim_revisions($table, $object->$identifier, WORKFLOW_REVISION_LIMIT);\n            return $res;\n        }\n        $sql = \"UPDATE \" . $this->prefix . \"$table SET \";\n        foreach (get_object_vars($object) as $var => $val) {\n            //We do not want to save any fields that start with an '_'\n            //if($is_revisioned && $var=='revision_id') $val++;\n            if ($var{0} != '_') {\n                if (is_array($val) || is_object($val)) {\n                    $val = serialize($val);   \n                    $sql .= \"`$var`='\".$val.\"',\";\n                } else {\n                    $sql .= \"`$var`='\" . $this->escapeString($val) . \"',\";\n                }\n            }\n        }\n        $sql = substr($sql, 0, -1) . \" WHERE \";\n        if ($where != null)\n            $sql .= $this->injectProof($where);\n        else\n            $sql .= \"`\" . $identifier . \"`=\" . $object->$identifier;\n        //if ($table == 'text') eDebug($sql,true);        \n        $res = (@mysqli_query($this->connection, $sql) != false);\n        return $res;\n    }\n\n\t/**\n\t * Find the maximum value of a field.  This is similar to a standard\n\t * SELECT MAX(field) ... query.\n\t *\n\t * @param string $table The name of the table to select from.\n\t * @param string $attribute The attribute name to find a maximum value for.\n\t * @param string $groupfields A comma-separated list of fields (or a single field) name, used\n\t *    for a GROUP BY clause.  This can also be passed as an array of fields.\n\t * @param string $where Optional criteria for narrowing the result set.\n\t * @return mixed\n\t */\n    function max($table, $attribute, $groupfields = null, $where = null) {\n        if (is_array($groupfields))\n            $groupfields = implode(\",\", $groupfields);\n        $sql = \"SELECT MAX($attribute) as fieldmax FROM `\" . $this->prefix . \"$table`\";\n        if ($where != null)\n            $sql .= \" WHERE $where\";\n        if ($groupfields != null)\n            $sql .= \" GROUP BY $groupfields\";\n\n        $res = @mysqli_query($this->connection, $sql);\n\n        if ($res != null)\n            $res = mysqli_fetch_object($res);\n        if (!$res)\n            return null;\n        return $res->fieldmax;\n    }\n\n\t/**\n\t * Find the minimum value of a field.  This is similar to a standard\n\t * SELECT MIN(field) ... query.\n\t *\n\t * @internal Internal\n\t * @param string $table The name of the table to select from.\n\t * @param string $attribute The attribute name to find a minimum value for.\n\t * @param string $groupfields A comma-separated list of fields (or a single field) name, used\n\t *    for a GROUP BY clause.  This can also be passed as an array of fields.\n\t * @param string $where Optional criteria for narrowing the result set.\n\t * @return null\n\t */\n    function min($table, $attribute, $groupfields = null, $where = null) {\n        if (is_array($groupfields))\n            $groupfields = implode(\",\", $groupfields);\n        $sql = \"SELECT MIN($attribute) as fieldmin FROM `\" . $this->prefix . \"$table`\";\n        if ($where != null)\n            $sql .= \" WHERE $where\";\n        if ($groupfields != null)\n            $sql .= \" GROUP BY $groupfields\";\n\n        $res = @mysqli_query($this->connection, $sql);\n\n        if ($res != null)\n            $res = mysqli_fetch_object($res);\n        if (!$res)\n            return null;\n        return $res->fieldmin;\n    }\n\n    /**\n     * Increment a numeric table field in a table.\n     *\n     * @param string $table The name of the table to increment in.\n     * @param string $field The field to increment.\n     * @param integer $step The step value.  Usually 1.  This can be negative, to\n     *    decrement, but the decrement() method is preferred, for readability.\n     * @param string $where Optional criteria to determine which records to update.\n     * @return mixed\n     */\n    function increment($table, $field, $step, $where = null) {\n        if ($where == null)\n            $where = \"1\";\n        $sql = \"UPDATE `\" . $this->prefix . \"$table` SET `$field`=`$field`+$step WHERE $where\";\n        return @mysqli_query($this->connection, $sql);\n    }\n\n    /**\n     * Check to see if the named table exists in the database.\n     * Returns true if the table exists, and false if it doesn't.\n     *\n     * @param string $table Name of the table to look for.\n     * @return bool\n     */\n    function tableExists($table) {\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` LIMIT 0,1\");\n        return ($res != null);\n    }\n\n    /**\n     * Get a list of all tables in the database.  Optionally, only the tables\n     * in the current logical database (tables with the same prefix) can\n     * be retrieved.\n     *\n     * @param bool $prefixed_only Whether to return only the tables\n     *    for the logical database, or all tables in the physical database.\n     * @return array\n     */\n    function getTables($prefixed_only=true) {\n        $res = @mysqli_query($this->connection, \"SHOW TABLES\");\n        $tables = array();\n        for ($i = 0; $res && $i < mysqli_num_rows($res); $i++) {\n            $tmp = mysqli_fetch_array($res);\n            if ($prefixed_only && substr($tmp[0], 0, strlen($this->prefix)) == $this->prefix) {\n                $tables[] = $tmp[0];\n            } else if (!$prefixed_only) {\n                $tables[] = $tmp[0];\n            }\n        }\n        return $tables;\n    }\n\n    /**\n     * Runs whatever table optimization routines the database engine supports.\n     *\n     * @param string $table The name of the table to optimize.\n     * @return bool\n     */\n    function optimize($table) {\n        $res = (@mysqli_query($this->connection, \"OPTIMIZE TABLE `\" . $this->prefix . \"$table`\") != false);\n        return $res;\n    }\n\n    /**\n     * Retrieve table information for a named table.\n     * Returns an object, with the following attributes:\n     * <ul>\n     * <li><b>rows</b> -- The number of rows in the table.</li>\n     * <li><b>average_row_length</b> -- The average storage size of a row in the table.</li>\n     * <li><b>data_total</b> -- How much total disk space is used by the table.</li>\n     * <li><b>data_overhead</b> -- How much storage space in the table is unused (for compacting purposes)</li>\n     * </ul>\n     * @param  $table\n     * @return null\n     */\n    function tableInfo($table) {\n        $sql = \"SHOW TABLE STATUS LIKE '\" . $this->prefix . \"$table'\";\n        $res = @mysqli_query($this->connection, $sql);\n        if (!$res)\n            return null;\n        return $this->translateTableStatus(mysqli_fetch_object($res));\n    }\n\n    /**\n     * Returns table information for all tables in the database.\n     * This function effectively calls tableInfo() on each table found.\n     * @return array\n     */\n    function databaseInfo() {\n//        $sql = \"SHOW TABLE STATUS\";\n        $res = @mysqli_query($this->connection, \"SHOW TABLE STATUS LIKE '\" . $this->prefix . \"%'\");\n        $info = array();\n        for ($i = 0; $res && $i < mysqli_num_rows($res); $i++) {\n            $obj = mysqli_fetch_object($res);\n            $info[substr($obj->Name, strlen($this->prefix))] = $this->translateTableStatus($obj);\n        }\n        return $info;\n    }\n\n\t/**\n\t * @param  $table\n\t * @return array\n\t */\n    function describeTable($table) {\n        if (!$this->tableExists($table))\n            return array();\n        $res = @mysqli_query($this->connection, \"DESCRIBE `\" . $this->prefix . \"$table`\");\n        $dd = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $fieldObj = mysqli_fetch_object($res);\n\n            $fieldObj->ExpFieldType = $this->getDDFieldType($fieldObj);\n            if ($fieldObj->ExpFieldType == DB_DEF_STRING) {\n                $fieldObj->ExpFieldLength = $this->getDDStringLen($fieldObj);\n            }\n\n            $dd[$fieldObj->Field] = $fieldObj;\n        }\n\n        return $dd;\n    }\n\n    /**\n     * Build a data definition from a pre-existing table.  This is used\n     * to intelligently alter tables that have already been installed.\n     *\n     * @param string $table The name of the table to get a data definition for.\n     * @return array|null\n     */\n    function getDataDefinition($table) {\n        // make sure the table exists\n        if (!$this->tableExists($table))\n            return array();\n\n        // check if we have a cached version of this table description.\n        if (expSession::issetTableCache($table))\n            return expSession::getTableCache($table);\n\n        $res = @mysqli_query($this->connection, \"DESCRIBE `\" . $this->prefix . \"$table`\");\n        $dd = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++) {\n            $fieldObj = mysqli_fetch_object($res);\n\n            $field = array();\n            $field[DB_FIELD_TYPE] = $this->getDDFieldType($fieldObj);\n            if ($field[DB_FIELD_TYPE] == DB_DEF_STRING) {\n                $field[DB_FIELD_LEN] = $this->getDDStringLen($fieldObj);\n            }\n            //additional field attributes\n            $default = $this->getDDDefault($fieldObj);\n            if ($default != null)\n                $field[DB_DEFAULT] = $default;\n            $field[DB_INCREMENT] = $this->getDDAutoIncrement($fieldObj);\n            $key = $this->getDDKey($fieldObj);\n            if ($key)\n                $field[$key] = true;\n\n            $dd[$fieldObj->Field] = $field;\n        }\n\n        // save this table description to cache so we don't need to go the DB next time.\n        expSession::setTableCache($table, $dd);\n        return $dd;\n    }\n\n    /**\n     * Returns an error message from the database server.  This is intended to be\n     * used by the implementers of the database wrapper, so that certain\n     * cryptic error messages can be reworded.\n     * @return string\n     */\n    function error() {\n        if ($this->connection && mysqli_errno($this->connection) != 0) {\n            $errno = mysqli_errno($this->connection);\n            switch ($errno) {\n                case 1046:\n                    return \"1046 : \".gt(\"Selected database does not exist\");\n                default:\n                    return mysqli_errno($this->connection) . \" : \" . mysqli_error($this->connection);\n            }\n        } else if ($this->connection == false) {\n            return gt(\"Unable to connect to database server\");\n        } else\n            return \"\";\n    }\n\n    /**\n     * Checks whether the database connection has experienced an error.\n     * @return bool\n     */\n    function inError() {\n        return ($this->connection != null && mysqli_errno($this->connection) != 0);\n    }\n\n\t/**\n\t * Unescape a string based on the database connection\n\t * @param $string\n\t * @return string\n\t */\n\tfunction escapeString($string) {\n\t    return (mysqli_real_escape_string($this->connection, $string));\n\t}\n\n    /**\n     * Select an array of arrays\n     *\n     * Selects a set of arrays from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of arrays, in any random order.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *   is specified as null, then no criteria is applied, and all objects are\n     *   returned\n     * @param string $orderby\n     * @return array\n     */\n    function selectArrays($table, $where = null, $orderby = null) {\n        if ($where == null)\n            $where = \"1\";\n        else\n            $where = $this->injectProof($where);\n        if ($orderby == null)\n            $orderby = '';\n        else\n            $orderby = \"ORDER BY \" . $orderby;\n\n        $res = @mysqli_query($this->connection, \"SELECT * FROM `\" . $this->prefix . \"$table` WHERE $where $orderby\");\n        if ($res == null)\n            return array();\n        $arrays = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $arrays[] = mysqli_fetch_assoc($res);\n        return $arrays;\n    }\n\n    /**\n     * Select an array of arrays\n     *\n     * Selects a set of arrays from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of arrays, in any random order.\n     *\n     * @param string $sql The name of the table/object to look at\n     * @return array\n     */\n    function selectArraysBySql($sql) {        \n        $res = @mysqli_query($this->connection, $this->injectProof($sql));\n        if ($res == null)\n            return array();\n        $arrays = array();\n        for ($i = 0, $iMax = mysqli_num_rows($res); $i < $iMax; $i++)\n            $arrays[] = mysqli_fetch_assoc($res);\n        return $arrays;\n    }\n\n    /**\n     * Select a record from the database as an array\n     * Selects a set of arrays from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of arrays, in any random order.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *                      is specified as null, then no criteria is applied, and all objects are\n     *                      returned\n     * @param null   $orderby\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return array|void\n     */\n    function selectArray($table, $where = null, $orderby = null, $is_revisioned=false, $needs_approval=false) {\n        if ($where == null)\n            $where = \"1\";\n        else\n            $where = $this->injectProof($where);\n        $as = '';\n        if ($is_revisioned) {\n   //            $where.= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE $where)\";\n            $where .= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE id = rev.id \";\n            if ($needs_approval) $where .= ' AND (approved=1 OR poster=' . $needs_approval . ' OR editor=' . $needs_approval . ')';\n            $where .= \")\";\n            $as = ' AS rev';\n        }\n        $orderby = empty($orderby) ? '' : \"ORDER BY \" . $orderby;\n        $sql = \"SELECT * FROM `\" . $this->prefix . \"$table`\" . $as . \" WHERE $where $orderby LIMIT 0,1\";\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return array();\n        return mysqli_fetch_assoc($res);\n    }\n\n    /**\n     * Instantiate objects from selected records from the database\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *                      is specified as null, then no criteria is applied, and all objects are\n     *                      returned\n     * @param string $classname\n     * @param bool   $get_assoc\n     * @param bool   $get_attached\n     * @param array  $except\n     * @param bool   $cascade_except\n     * @param null   $order\n     * @param null   $limitsql\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return array\n     */\n    function selectExpObjects($table, $where=null, $classname, $get_assoc=true, $get_attached=true, $except=array(), $cascade_except=false, $order=null, $limitsql=null, $is_revisioned=false, $needs_approval=false) {\n        if ($where == null)\n            $where = \"1\";\n        else\n            $where = $this->injectProof($where);\n        $as = '';\n        if ($is_revisioned) {\n   //            $where.= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE $where)\";\n            $where .= \" AND revision_id=(SELECT MAX(revision_id) FROM `\" . $this->prefix . \"$table` WHERE id = rev.id \";\n            if ($needs_approval) $where .= ' AND (approved=1 OR poster=' . $needs_approval . ' OR editor=' . $needs_approval . ')';\n            $where .= \")\";\n            $as = ' AS rev';\n        }\n        $sql = \"SELECT * FROM `\" . $this->prefix . \"$table`\" . $as . \" WHERE $where\";\n        $sql .= empty($order) ? '' : ' ORDER BY ' . $order;\n        $sql .= empty($limitsql) ? '' : $limitsql;\n        $res = @mysqli_query($this->connection, $sql);\n        if ($res == null)\n            return array();\n        $arrays = array();\n        $numrows = mysqli_num_rows($res);\n        for ($i = 0; $i < $numrows; $i++) {  //FIXME this can run us out of memory with too many rows\n            $assArr = mysqli_fetch_assoc($res);\n            $assArr['except'] = $except;\n            if($cascade_except) $assArr['cascade_except'] = $cascade_except;\n            $arrays[] = new $classname($assArr, $get_assoc, $get_attached);\n        }\n        return $arrays;\n    }\n\n    /**\n     * Instantiate objects from selected records from the database\n\n     * @param string $sql The sql statement to run on the model/classname\n     * @param string $classname Can be $this->baseclassname\n     * Returns an array of fields\n     * @param bool $get_assoc\n     * @param bool $get_attached\n     * @return array\n     */\n    function selectExpObjectsBySql($sql, $classname, $get_assoc=true, $get_attached=true) {\n        $res = @mysqli_query($this->connection, $this->injectProof($sql));\n        if ($res == null)\n            return array();\n        $arrays = array();\n        $numrows = mysqli_num_rows($res);\n        for ($i = 0; $i < $numrows; $i++)\n            $arrays[] = new $classname(mysqli_fetch_assoc($res), true, true);\n        return $arrays;\n    }\n\n\t/**\n\t * This function returns all the text columns in the given table\n\t * @param $table\n\t * @return array\n\t */\n\tfunction getTextColumns($table) {\n\t\t$sql = \"SHOW COLUMNS FROM \" . $this->prefix.$table . \" WHERE type = 'text' OR type like 'varchar%'\";\n\t\t$res = @mysqli_query($this->connection, $sql);\n\t\tif ($res == null)\n            return array();\n\t\t$records = array();\n\t\twhile($row = mysqli_fetch_object($res)) {\n\t\t\t$records[] = $row->Field;\n\t\t}\n\t\t\n\t\treturn $records;\n\t}\n\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the expDatabase subsystem\n * Handles all database abstraction in Exponent.\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\nclass expDatabase {\n\n\t/**\n\t * Connect to the Exponent database\n\t *\n\t * This function attempts to connect to the exponent database,\n\t * and then returns the database object to the caller.\n\t *\n\t * @param string $username the database username\n\t * @param string $password the database password\n\t * @param string $hostname the url of the database server\n\t * @param string $database the name of the database\n\t * @param string $dbclass\n\t * @param bool $new\n\t * @return \\database the database object\n\t */\n\tpublic static function connect($username,$password,$hostname,$database,$dbclass = '',$new=false,$log=null) {\n\t\tif (!defined('DB_ENGINE')) {\n\t\t\t$backends = array_keys(self::backends(1));\n\t\t\tif (count($backends)) {\n\t\t\t\tdefine('DB_ENGINE',$backends[0]);\n\t\t\t} else {\n\t\t\t\tdefine('DB_ENGINE','NOTSUPPORTED');\n\t\t\t}\n\t\t}\n\t\t(include_once(BASE.'framework/core/subsystems/database/'.DB_ENGINE.'.php')) or exit(gt('None of the installed Exponent Database Backends will work with this server\\'s version of PHP.'));\n\t\tif ($dbclass == '' || $dbclass == null) $dbclass = DB_ENGINE;\n\t\t(include_once(BASE.'framework/core/subsystems/database/'.$dbclass.'.php')) or exit(gt('The specified database backend').'  ('.$dbclass.') '.gt('is not supported by Exponent'));\n\t\t$dbclass .= '_database';\n\t\t$newdb = new $dbclass($username,$password,$hostname,$database,$new,$log);\n        if (!$newdb->tableExists('user')) {\n            $newdb->havedb = false;\n        }\n\t\treturn $newdb;\n\t}\n\n\t/**\n\t * List all available database backends\n\t *\n\t * This function looks for available database engines,\n\t * and then returns an array to the caller.\n\t *\n\t * @param int $valid_only\n\t * @return Array An associative array of engine identifiers.\n\t *\tThe internal engine name is the key, and the external\n\t *\tdescriptive name is the value.\n\t */\n\tpublic static function backends($valid_only = 1) {\n\t\t$options = array();\n\t\t$dh = opendir(BASE.'framework/core/subsystems/database');\n\t\twhile (($file = readdir($dh)) !== false) {\n\t\t\tif (is_file(BASE.'framework/core/subsystems/database/'.$file) && is_readable(BASE.'framework/core/subsystems/database/'.$file) && substr($file,-9,9) == '.info.php') {\n\t\t\t\t$info = include(BASE.'framework/core/subsystems/database/'.$file);\n\t\t\t\tif ($info['is_valid'] == 1 || !$valid_only) {\n\t\t\t\t\t$options[substr($file,0,-9)] = $info['name'];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $options;\n\t}\n\n    public static function fix_table_names() {\n        global $db;\n\n        // fix table names\n        $tablenames = array (\n            'content_expcats'=>'content_expCats',\n            'content_expcomments'=>'content_expComments',\n            'content_expdefinablefields'=>'content_expDefinableFields',\n            'content_expdefinablefields_value'=>'content_expDefinableFields_value',\n            'content_expfiles'=>'content_expFiles',\n            'content_expratings'=>'content_expRatings',\n            'content_expsimplenote'=>'content_expSimpleNote',\n            'content_exptags'=>'content_expTags',\n            'expcats'=>'expCats',\n            'expcomments'=>'expComments',\n            'expdefinablefields'=>'expDefinableFields',\n            'expealerts'=>'expeAlerts',\n            'expealerts_temp'=>'expeAlerts_temp',\n            'expfiles'=>'expFiles',\n            'expratings'=>'expRatings',\n            'exprss'=>'expRss',\n            'expsimplenote'=>'expSimpleNote',\n            'exptags'=>'expTags',\n\t\t\t'bing_product_types_storecategories'=>'bing_product_types_storeCategories',\n\t\t\t'google_product_types_storecategories'=>'google_product_types_storeCategories',\n\t\t\t'nextag_product_types_storecategories'=>'nextag_product_types_storeCategories',\n\t\t\t'pricegrabber_product_types_storecategories'=>'pricegrabber_product_types_storeCategories',\n\t\t\t'shopping_product_types_storecategories'=>'shopping_product_types_storeCategories',\n\t\t\t'shopzilla_product_types_storecategories'=>'shopzilla_product_types_storeCategories',\n\t\t\t'crosssellitem_product'=>'crosssellItem_product',\n\t\t\t'product_storecategories'=>'product_storeCategories',\n\t\t\t'storecategories'=>'storeCategories',\n        );\n\n        $renamed = array();\n        foreach ($tablenames as $oldtablename=>$newtablename) {\n            if (!$db->tableExists($newtablename)) {\n                $db->sql('RENAME TABLE '.$db->prefix.$oldtablename.' TO '.$db->prefix.$newtablename);\n                $renamed[] = $newtablename;\n            }\n        }\n        return $renamed;\n    }\n\n    public static function install_dbtables($aggressive=false, $workflow=ENABLE_WORKFLOW) {\n   \t    global $db;\n\n   \t\texpSession::clearAllUsersSessionCache();\n   \t\t$tables = array();\n\n   \t\t// first the core definitions\n   \t\t$coredefs = BASE.'framework/core/definitions';\n   \t\tif (is_readable($coredefs)) {\n   \t\t\t$dh = opendir($coredefs);\n   \t\t\twhile (($file = readdir($dh)) !== false) {\n   \t\t\t\tif (is_readable(\"$coredefs/$file\") && is_file(\"$coredefs/$file\") && substr($file,-4,4) == \".php\" && substr($file,-9,9) != \".info.php\") {\n   \t\t\t\t\t$tablename = substr($file,0,-4);\n   \t\t\t\t\t$dd = include(\"$coredefs/$file\");\n   \t\t\t\t\t$info = null;\n   \t\t\t\t\tif (is_readable(\"$coredefs/$tablename.info.php\")) $info = include(\"$coredefs/$tablename.info.php\");\n   \t\t\t\t\tif (!$db->tableExists($tablename)) {\n   \t\t\t\t\t\tforeach ($db->createTable($tablename, $dd, $info) as $key=>$status) {\n   \t\t\t\t\t\t\t$tables[$key] = $status;\n   \t\t\t\t\t\t}\n   \t\t\t\t\t} else {\n   \t\t\t\t\t\tforeach ($db->alterTable($tablename, $dd, $info, $aggressive) as $key=>$status) {\n//\t\t\t\t\t\t\tif (isset($tables[$key])) echo \"$tablename, $key<br>\";  //FIXME we shouldn't echo this, already installed?\n   \t\t\t\t\t\t\tif ($status == TABLE_ALTER_FAILED){\n   \t\t\t\t\t\t\t\t$tables[$key] = $status;\n   \t\t\t\t\t\t\t} else {\n   \t\t\t\t\t\t\t\t$tables[$key] = ($status == TABLE_ALTER_NOT_NEEDED ? DATABASE_TABLE_EXISTED : DATABASE_TABLE_ALTERED);\n   \t\t\t\t\t\t\t}\n\n   \t\t\t\t\t\t}\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n\n   \t\t// then search for module definitions\n   \t\t$moddefs = array(\n   \t\t\tBASE.'themes/'.DISPLAY_THEME.'/modules',\n   \t\t\tBASE.\"framework/modules\",\n   \t\t\t);\n        $models = expModules::initializeModels();\n   \t\tforeach ($moddefs as $moddef) {\n   \t\t\tif (is_readable($moddef)) {\n   \t\t\t\t$dh = opendir($moddef);\n   \t\t\t\twhile (($file = readdir($dh)) !== false) {\n   \t\t\t\t\tif (is_dir($moddef.'/'.$file) && ($file != '..' && $file != '.')) {\n   \t\t\t\t\t\t$dirpath = $moddef.'/'.$file.'/definitions';\n   \t\t\t\t\t\tif (file_exists($dirpath)) {\n   \t\t\t\t\t\t\t$def_dir = opendir($dirpath);\n   \t\t\t\t\t\t\twhile (($def = readdir($def_dir)) !== false) {\n   \t//\t\t\t\t\t\t\teDebug(\"$dirpath/$def\");\n   \t\t\t\t\t\t\t\tif (is_readable(\"$dirpath/$def\") && is_file(\"$dirpath/$def\") && substr($def,-4,4) == \".php\" && substr($def,-9,9) != \".info.php\") {\n   \t\t\t\t\t\t\t\t\t$tablename = substr($def,0,-4);\n   \t\t\t\t\t\t\t\t\t$dd = include(\"$dirpath/$def\");\n   \t\t\t\t\t\t\t\t\t$info = null;\n//                                    foreach ($models as $modelname=>$modelpath) {\n                                    $rev_aggressive = $aggressive;\n                                    // add workflow fields\n                                    if (!empty($models[substr($def,0,-4)])) {\n                                        $modelname = substr($def,0,-4);\n                                        $model = new $modelname();\n                                        if ($model->supports_revisions && $workflow) {\n                                            $dd['revision_id'] = array(\n                                                DB_FIELD_TYPE=>DB_DEF_INTEGER,\n                                                DB_PRIMARY=>true,\n                                                DB_DEFAULT=>1,\n                                            );\n                                            $dd['approved'] = array(\n                                                DB_FIELD_TYPE=>DB_DEF_BOOLEAN\n                                            );\n                                            $rev_aggressive = true;\n                                        }\n                                    }\n   \t\t\t\t\t\t\t\t\tif (is_readable(\"$dirpath/$tablename.info.php\")) $info = include(\"$dirpath/$tablename.info.php\");\n   \t\t\t\t\t\t\t\t\tif (!$db->tableExists($tablename)) {\n   \t\t\t\t\t\t\t\t\t\tforeach ($db->createTable($tablename, $dd, $info) as $key=>$status) {\n   \t\t\t\t\t\t\t\t\t\t\t$tables[$key] = $status;\n   \t\t\t\t\t\t\t\t\t\t}\n   \t\t\t\t\t\t\t\t\t} else {\n   \t\t\t\t\t\t\t\t\t\tforeach ($db->alterTable($tablename, $dd, $info, $rev_aggressive) as $key=>$status) {\n//\t\t\t\t\t\t\t\t\t\t\tif (isset($tables[$key])) echo \"$tablename, $key<br>\";  //FIXME we shouldn't echo this, already installed?\n   \t\t\t\t\t\t\t\t\t\t\tif ($status == TABLE_ALTER_FAILED){\n   \t\t\t\t\t\t\t\t\t\t\t\t$tables[$key] = $status;\n   \t\t\t\t\t\t\t\t\t\t\t} else {\n   \t\t\t\t\t\t\t\t\t\t\t\t$tables[$key] = ($status == TABLE_ALTER_NOT_NEEDED ? DATABASE_TABLE_EXISTED : DATABASE_TABLE_ALTERED);\n   \t\t\t\t\t\t\t\t\t\t\t}\n\n   \t\t\t\t\t\t\t\t\t\t}\n   \t\t\t\t\t\t\t\t\t}\n   \t\t\t\t\t\t\t\t}\n   \t\t\t\t\t\t\t}\n   \t\t\t\t\t\t}\n   \t\t\t\t\t}\n   \t\t\t\t}\n   \t\t\t}\n   \t\t}\n   \t\treturn $tables;\n   \t}\n}\n\n/**\n* This is the class database\n*\n* This is the generic implementation of the database class.\n* @subpackage Database\n* @package Subsystems\n*/\n\nabstract class database {\n\n\t/**\n\t* @var string $connection Database connection string\n\t*/\n\tvar $connection = null;\n\t/**\n\t* @var boolean $havedb\n\t*/\n\tvar $havedb = false;\n\t/**\n\t* @var string $prefix Database prefix\n\t*/\n\tvar $prefix = \"\";\n\n\t/**\n\t * Make a connection to the Database Server\n\t *\n\t * Takes the supplied credentials (username / password) and tries to\n\t * connect to the server and select the given database.  All the rules\n\t * governing database connect also govern this method.\n\t *\n\t * @param string $username The username to connect to the server as.\n\t * @param string $password The password for $username\n\t * @param string $hostname The hostname of the database server.  If\n\t *   localhost is specified, a local socket connection will be attempted.\n\t * @param string $database The name of the database to use.  Multi-database\n\t *   sites are still not yet supported.\n\t * @param bool $new Whether or not to force the PHP connection function to establish\n\t *   a distinctly new connection handle to the server.\n\t */\n\n\t//\tfunction connect ($username, $password, $hostname, $database, $new=false) {\n\tabstract function __construct($username, $password, $hostname, $database, $new=false);\n\n\t   /**\n\t    * Create a new Table\n\t    *\n\t    * Creates a new database table, according to the passed data definition.\n\t    *\n\t    * This function abides by the Exponent Data Definition Language, and interprets\n\t    * its general structure for databases.\n\t    *\n\t    * @param string $tablename The name of the table to create\n\t    * @param array $datadef The data definition to create, expressed in\n\t    *   the Exponent Data Definition Language.\n\t    * @param array $info Information about the table itself.\n\t    * @return array\n\t */\n\tabstract function createTable($tablename, $datadef, $info);\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $name\n\t* @param  $def\n\t* @return bool|string\n\t*/\n\tfunction fieldSQL($name, $def) {\n\t   $sql = \"`$name`\";\n\t   if (!isset($def[DB_FIELD_TYPE])) {\n\t       return false;\n\t   }\n\t   $type = $def[DB_FIELD_TYPE];\n\t   if ($type == DB_DEF_ID) {\n\t       $sql .= \" INT(11)\";\n\t   } else if ($type == DB_DEF_BOOLEAN) {\n\t       $sql .= \" TINYINT(1)\";\n\t   } else if ($type == DB_DEF_TIMESTAMP) {\n\t       $sql .= \" INT(14)\";\n       } else if ($type == DB_DEF_DATETIME) {\n   \t       $sql .= \" DATETIME\";\n\t   } else if ($type == DB_DEF_INTEGER) {\n\t       $sql .= \" INT(8)\";\n\t   } else if ($type == DB_DEF_STRING) {\n\t       if (isset($def[DB_FIELD_LEN]) && is_int($def[DB_FIELD_LEN])) {\n\t           $len = $def[DB_FIELD_LEN];\n\t           if ($len < 256)\n\t               $sql .= \" VARCHAR($len)\";\n\t           else if ($len < 65536)\n\t               $sql .= \" TEXT\";\n\t           else if ($len < 16777216)\n\t               $sql .= \" MEDIUMTEXT\";\n\t           else\n\t               $sql .= \"LONGTEXT\";\n\t       } else {  // default size of 'TEXT'instead of error\n               $sql .= \" TEXT\";\n\t       }\n\t   } else if ($type == DB_DEF_DECIMAL) {\n\t       $sql .= \" DOUBLE\";\n\t   } else {\n\t       return false; // must specify known FIELD_TYPE\n\t   }\n\t   $sql .= \" NOT NULL\";\n\t   if (isset($def[DB_DEFAULT]))\n\t       $sql .= \" DEFAULT '\" . $def[DB_DEFAULT] . \"'\";\n\n\t   if (isset($def[DB_INCREMENT]) && $def[DB_INCREMENT])\n\t       $sql .= \" AUTO_INCREMENT\";\n\t   return $sql;\n\t}\n\n\t/**\n\t* Switch field values between two entries in a  Table\n\t*\n\t* Switches values between two table entries for things like swapping rank, etc...\n\t* @param  $table\n\t* @param  $field\n\t* @param  $a\n\t* @param  $b\n\t* @param null $additional_where\n\t* @return bool\n\t*/\n\tfunction switchValues($table, $field, $a, $b, $additional_where = null) {\n\t   if ($additional_where == null) {\n\t       $additional_where = '1';\n\t   }\n       $a = intval($a);\n       $b = intval($b);\n\t   $object_a = $this->selectObject($table, \"$field='$a' AND $additional_where\");\n\t   $object_b = $this->selectObject($table, \"$field='$b' AND $additional_where\");\n\n\t   if ($object_a && $object_b) {\n\t       $tmp = $object_a->$field;\n\t       $object_a->$field = $object_b->$field;\n\t       $object_b->$field = $tmp;\n\n\t       $this->updateObject($object_a, $table);\n\t       $this->updateObject($object_b, $table);\n\n\t       return true;\n\t   } else {\n\t       return false;\n\t   }\n\t}\n\n\t/**\n\t* Checks to see if the connection for this database object is valid.\n\t* @return bool True if the connection can be used to execute SQL queries.\n\t*/\n\tfunction isValid() {\n\t   return ($this->connection != null && $this->havedb);\n\t}\n\n\t/**\n\t* Test the privileges of the user account for the connection.\n\t* Tests run include:\n\t* <ul>\n\t* <li>CREATE TABLE</li>\n\t* <li>INSERT</li>\n\t* <li>SELECT</li>\n\t* <li>UPDATE</li>\n\t* <li>DELETE</li>\n\t* <li>ALTER TABLE</li>\n\t* <li>DROP TABLE</li>\n\t* </ul>\n\t* These tests must be performed in order, for logical reasons.  Execution\n\t* terminates when the first test fails, and the status flag array is returned then.\n\t* Returns an array of status flags.  Key is the test name.  Value is a boolean,\n\t* true if the test succeeded, and false if it failed.\n\t* @return array\n\t*/\n\tfunction testPrivileges() {\n\n\t   $status = array();\n\n\t   $tablename = \"___testertable\" . uniqid(\"\");\n\t   $dd = array(\n\t       \"id\" => array(\n\t           DB_FIELD_TYPE => DB_DEF_ID,\n\t           DB_PRIMARY => true,\n\t           DB_INCREMENT => true),\n\t       \"name\" => array(\n\t           DB_FIELD_TYPE => DB_DEF_STRING,\n\t           DB_FIELD_LEN => 100)\n\t   );\n\n\t   $this->createTable($tablename, $dd, array());\n\t   if (!$this->tableExists($tablename)) {\n\t       $status[\"CREATE TABLE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"CREATE TABLE\"] = true;\n\n\t   $o = new stdClass();\n\t   $o->name = \"Testing Name\";\n\t   $insert_id = $this->insertObject($o, $tablename);\n\t   if ($insert_id == 0) {\n\t       $status[\"INSERT\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"INSERT\"] = true;\n\n\t   $o = $this->selectObject($tablename, \"id=\" . $insert_id);\n\t   if ($o == null || $o->name != \"Testing Name\") {\n\t       $status[\"SELECT\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"SELECT\"] = true;\n\n\t   $o->name = \"Testing 2\";\n\t   if (!$this->updateObject($o, $tablename)) {\n\t       $status[\"UPDATE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"UPDATE\"] = true;\n\n\t   $this->delete($tablename, \"id=\" . $insert_id);\n\t   $o = $this->selectObject($tablename, \"id=\" . $insert_id);\n\t   if ($o != null) {\n\t       $status[\"DELETE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"DELETE\"] = true;\n\n\t   $dd[\"thirdcol\"] = array(\n\t       DB_FIELD_TYPE => DB_DEF_TIMESTAMP);\n\n\t   $this->alterTable($tablename, $dd, array());\n\t   $o = new stdClass();\n\t   $o->name = \"Alter Test\";\n\t   $o->thirdcol = \"Third Column\";\n\t   if (!$this->insertObject($o, $tablename)) {\n\t       $status[\"ALTER TABLE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"ALTER TABLE\"] = true;\n\n\t   $this->dropTable($tablename);\n\t   if ($this->tableExists($tablename)) {\n\t       $status[\"DROP TABLE\"] = false;\n\t       return $status;\n\t   } else\n\t       $status[\"DROP TABLE\"] = true;\n\n\t   foreach ($this->getTables() as $t) {\n\t       if (substr($t, 0, 14 + strlen($this->prefix)) == $this->prefix . \"___testertable\")\n\t           $this->dropTable($t);\n\t   }\n\n\t   return $status;\n\t}\n\n\t/**\n\t* Alter an existing table\n\t*\n\t* Alters the structure of an existing database table to conform to the passed\n\t* data definition.\n\t*\n\t* This function abides by the Exponent Data Definition Language, and interprets\n\t* its general structure for databases.\n\t*\n\t* @param string $tablename The name of the table to alter\n\t* @param array $newdatadef The new data definition for the table.\n\t*   This is expressed in the Exponent Data Definition Language\n\t* @param array $info Information about the table itself.\n\t* @param bool $aggressive Whether or not to aggressively update the table definition.\n\t*   An aggressive update will drop columns in the table that are not in the Exponent definition.\n\t* @return array\n\t*/\n\tabstract function alterTable($tablename, $newdatadef, $info, $aggressive = false);\n\n\t/**\n\t* Drop a table from the database\n\t*\n\t* Removes an existing table from the database. Returns true if the table was dropped, false if there\n\t* was an error returned by the database server.\n\t*\n\t* @param string $table The name of the table to drop.\n\t* @return bool\n\t*/\n\tabstract function dropTable($table);\n\n\t/**\n\t * Run raw SQL.  Returns true if the query succeeded, and false\n\t *   if an error was returned from the database server.\n\t *\n\t * <div style=\"color:red\">If you can help it, do not use this function.  It presents Database Portability Issues.</div>\n\t *\n\t * Runs a straight SQL query on the database.  This is not a\n\t * very portable way of dealing with the database, and is only\n\t * provided as a last resort.\n\t *\n\t * @param string $sql The SQL query to run\n\t * @param bool $escape\n\t * @return mixed\n\t */\n\tabstract function sql($sql, $escape = true);\n\n\t/**\n\t * Toggle a boolean value in a Table Entry\n\t *\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return void\n\t */\n\tfunction toggle($table, $col, $where=null) {\n\t   $obj = $this->selectObject($table, $where);\n\t   $obj->$col = ($obj->$col == 0) ? 1 : 0;\n\t   $this->updateObject($obj, $table);\n\t}\n\n\t/**\n\t * Update a column in all records in a table\n\t *\n\t * @param  $table\n\t * @param  $col\n\t * @param $val\n\t * @param int|null $where\n\t * @return void\n\t */\n\tabstract function columnUpdate($table, $col, $val, $where=1);\n\n\t/**\n\t * @param  $object\n\t * @param  $table\n\t * @param  $col\n\t * @param int|null $where\n\t * @return bool\n\t */\n\tfunction setUniqueFlag($object, $table, $col, $where=1) {\n\t   if (isset($object->id)) {\n\t       $this->sql(\"UPDATE \" . $this->prefix . $table . \" SET \" . $col . \"=0 WHERE \" . $where);\n\t       $this->sql(\"UPDATE \" . $this->prefix . $table . \" SET \" . $col . \"=1 WHERE id=\" . $object->id);\n\t       return true;\n\t   }\n\t   return false;\n\t}\n\n\t/**\n\t* Select a series of objects\n\t*\n\t* Selects a set of objects from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a set of records from a database table.  Returns an\n\t* array of objects, in any random order.\n\t*\n\t* @param string $table The name of the table/object to look at\n\t* @param string $where Criteria used to narrow the result set.  If this\n\t*   is specified as null, then no criteria is applied, and all objects are\n\t*   returned\n\t* @param null $orderby\n\t* @return array\n\t*/\n\tabstract function selectObjects($table, $where = null, $orderby = null);\n\n\t/**\n\t * @param  $terms\n\t * @param null $where\n\t * @return array\n\t */\n\tfunction selectSearch($terms, $where = null) {  //FIXME never used\n\n\t}\n\n\t/**\n\t * @param null $colsA\n\t * @param null $colsB\n\t * @param  $tableA\n\t * @param  $tableB\n\t * @param  $keyA\n\t * @param null $keyB\n\t * @param null $where\n\t * @param null $orderby\n\t * @return array'\n\t */\n\tfunction selectAndJoinObjects($colsA=null, $colsB=null, $tableA, $tableB, $keyA, $keyB=null, $where = null, $orderby = null) {  //FIXME never used\n\n\t}\n\n\t/**\n\t * Select a single object by sql\n\t *\n\t * @param  $sql\n\t * @return null|void\n\t */\n\tabstract function selectObjectBySql($sql);\n\n\t/**\n\t * Select a series of objects by sql\n\t *\n\t * @param  $sql\n\t * @return array\n\t */\n\tabstract function selectObjectsBySql($sql);\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @param null $orderby\n\t * @param bool $distinct\n\t * @return array\n\t */\n\tabstract function selectColumn($table, $col, $where = null, $orderby = null, $distinct=false);\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return int\n\t */\n\tfunction selectSum($table, $col, $where = null) {  //FIXME never used\n\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @param null $orderby\n\t * @return array\n\t */\n\tabstract function selectDropdown($table, $col, $where = null, $orderby = null);\n\n\t/**\n\t * @param  $table\n\t * @param  $col\n\t * @param null $where\n\t * @return null\n\t */\n\tabstract function selectValue($table, $col, $where=null);\n\n\t/**\n\t * @param  $sql\n\t * @return null\n\t */\n\tfunction selectValueBySql($sql) {  //FIXME never used\n\n\t}\n\n\t/**\n\t* This function takes an array of indexes and returns an array with the objects associated with each id\n\t* @param  $table\n\t* @param array $array\n\t* @param null $orderby\n\t* @return array\n\t*/\n\tfunction selectObjectsInArray($table, $array=array(), $orderby=null) {\n\t   $where = 'id IN ' . implode(\",\", $array);\n\t   $res = $this->selectObjects($table, $where, $orderby);\n\t   return $res;\n\t}\n\n\t/**\n\t* Select a series of objects, and return by ID\n\t*\n\t* Selects a set of objects from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a set of records from a database table. Returns an\n\t* array of objects, in any random order.  The indices of the array\n\t* are the IDs of the objects.\n\t*\n\t* @param string $table The name of the table/object to look at\n\t* @param string $where Criteria used to narrow the result set.  If this\n\t*   is specified as null, then no criteria is applied, and all objects are\n\t*   returned\n\t* @param null $orderby\n\t* @return array\n\t*/\n\tabstract function selectObjectsIndexedArray($table, $where = null, $orderby = null);\n\n    /**\n     * Count Objects matching a given criteria\n     *\n     * @param string $table The name of the table to count objects in.\n     * @param string $where Criteria for counting.\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return int\n     */\n\tabstract function countObjects($table, $where = null, $is_revisioned=false, $needs_approval=false);\n\n\t/**\n\t* Count Objects matching a given criteria using raw sql\n\t*\n\t* @param string $sql The sql query to be run\n\t* @return int\n\t*/\n\tabstract function countObjectsBySql($sql);\n\n\t/**\n\t* Count Objects matching a given criteria using raw sql\n\t*\n\t* @param string $sql The sql query to be run\n\t* @return int|void\n\t*/\n\tfunction queryRows($sql) { //FIXME never used\n\n\t}\n\n\t/**\n\t* Select a single object.\n\t*\n\t* Selects an objects from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a single record from a database table. Returns the\n\t* first record/object found (in the case of multiple-result queries,\n\t* there is no way to determine which of the set will be returned).\n\t* If no record(s) match the query, null is returned.\n\t*\n\t* @param string $table The name of the table/object to look at\n\t* @param string $where Criteria used to narrow the result set.\n\t* @return object|null|void\n\t*/\n\tabstract function selectObject($table, $where);\n\n\t/**\n\t * @param $table\n\t * @param string $lockType\n\t * @return mixed\n\t */\n\tabstract function lockTable($table,$lockType=\"WRITE\");\n\n\t/**\n\t * @return mixed\n\t */\n\tabstract function unlockTables();\n\n\t/**\n\t* Insert an Object into some table in the Database\n\t*\n\t* This method will return the ID assigned to the new record by database.  Note that\n\t* object attributes starting with an underscore ('_') will be ignored and NOT inserted\n\t* into the table as a field value.\n\t*\n\t* @param object $object The object to insert.\n\t* @param string $table The logical table name to insert into.  This does not include the table prefix, which\n\t*    is automagically prepended for you.\n\t* @return int|void\n\t*/\n\tabstract function insertObject($object, $table);\n\n\t/**\n\t* Delete one or more objects from the given table.\n\t*\n\t* @param string $table The name of the table to delete from.\n\t* @param string $where Criteria for determining which record(s) to delete.\n\t* @return mixed\n\t*/\n\tabstract function delete($table, $where = null);\n\n\t/**\n\t* Update one or more objects in the database.\n\t*\n\t* This function will only update the attributes of the resulting record(s)\n\t* that are also member attributes of the $object object.\n\t*\n\t* @param object $object An object specifying the fields and values for updating.\n\t*    In most cases, this will be the altered object originally returned from one of\n\t*    the select* methods.\n\t* @param string $table The table to update in.\n\t* @param string $where Optional criteria used to narrow the result set.\n\t* @param string $identifier\n\t* @param bool $is_revisioned\n\t* @return bool|int|void\n\t*/\n\tabstract function updateObject($object, $table, $where=null, $identifier='id', $is_revisioned=false);\n\n    /**\n     * Reduces table item revisions to a passed total\n     *\n     * @param string  $table     The name of the table to trim\n     * @param integer $id        The item id\n     * @param integer $num       The number of revisions to retain\n     * @param int     $workflow  is workflow turned on (or force)\n     */\n    public function trim_revisions($table, $id, $num, $workflow=ENABLE_WORKFLOW) {\n        if ($workflow && $num) {\n            $max_revision = $this->max($table, 'revision_id', null, 'id='.$id);\n            $max_approved = $this->max($table, 'revision_id', null, 'id='.$id.' AND approved=1');\n            $min_revision = $this->min($table, 'revision_id', null, 'id='.$id);\n            if ($max_revision == null) {\n                return;\n            }\n            if (($max_revision - $num) > $max_approved) {\n                $approved_max = ' AND revision_id < ' . $max_approved;  // never delete most recent approved item\n            } else {\n                $approved_max = '';\n            }\n            if ($max_revision - $min_revision >= $num) {\n                $this->delete($table, 'id=' . $id . ' AND revision_id <= ' . ($max_revision - $num) . $approved_max);\n            }\n            if (!empty($approved_max)) {\n                // we've trimmed all the fat below the newest approved item, now trim the dead wood above it\n                $this->delete($table, 'id=' . $id . ' AND revision_id <= ' . ($max_revision - $num + 1) . ' AND revision_id > ' . $max_approved);\n            }\n        }\n    }\n\n\t/**\n\t * Find the maximum value of a field.  This is similar to a standard\n\t * SELECT MAX(field) ... query.\n\t *\n\t * @param string $table The name of the table to select from.\n\t * @param string $attribute The attribute name to find a maximum value for.\n\t * @param string $groupfields A comma-separated list of fields (or a single field) name, used\n\t *    for a GROUP BY clause.  This can also be passed as an array of fields.\n\t * @param string $where Optional criteria for narrowing the result set.\n\t * @return mixed\n\t */\n\tabstract function max($table, $attribute, $groupfields = null, $where = null);\n\n\t/**\n\t * Find the minimum value of a field.  This is similar to a standard\n\t * SELECT MIN(field) ... query.\n\t *\n\t * @internal Internal\n\t * @param string $table The name of the table to select from.\n\t * @param string $attribute The attribute name to find a minimum value for.\n\t * @param string $groupfields A comma-separated list of fields (or a single field) name, used\n\t *    for a GROUP BY clause.  This can also be passed as an array of fields.\n\t * @param string $where Optional criteria for narrowing the result set.\n\t * @return null\n\t */\n\tabstract function min($table, $attribute, $groupfields = null, $where = null);\n\n\t/**\n\t* Increment a numeric table field in a table.\n\t*\n\t* @param string $table The name of the table to increment in.\n\t* @param string $field The field to increment.\n\t* @param integer $step The step value.  Usually 1.  This can be negative, to\n\t*    decrement, but the decrement() method is preferred, for readability.\n\t* @param string $where Optional criteria to determine which records to update.\n\t* @return mixed\n\t*/\n\tabstract function increment($table, $field, $step, $where = null);\n\n\t/**\n\t* Decrement a numeric table field in a table.\n\t*\n\t* @param string $table The name of the table to decrement in.\n\t* @param string $field The field to decrement.\n\t* @param integer $step The step value.  Usually 1.  This can be negative, to\n\t*    increment, but the increment() method is preferred, for readability.\n\t* @param string $where Optional criteria to determine which records to update.\n\t*/\n\n\tfunction decrement($table, $field, $step, $where = null) {\n\t   $this->increment($table, $field, -1 * $step, $where);\n\t}\n\n\t/**\n\t* Check to see if the named table exists in the database.\n\t* Returns true if the table exists, and false if it doesn't.\n\t*\n\t* @param string $table Name of the table to look for.\n\t* @return bool\n\t*/\n\tabstract function tableExists($table);\n\n\t/**\n\t* Get a list of all tables in the database.  Optionally, only the tables\n\t* in the current logical database (tables with the same prefix) can\n\t* be retrieved.\n\t*\n\t* @param bool $prefixed_only Whether to return only the tables\n\t*    for the logical database, or all tables in the physical database.\n\t* @return array\n\t*/\n\tabstract function getTables($prefixed_only=true);\n\n\t/**\n\t* Runs whatever table optimization routines the database engine supports.\n\t*\n\t* @param string $table The name of the table to optimize.\n\t* @return bool\n\t*/\n\tabstract function optimize($table);\n\n\t/**\n\t* Retrieve table information for a named table.\n\t* Returns an object, with the following attributes:\n\t* <ul>\n\t* <li><b>rows</b> -- The number of rows in the table.</li>\n\t* <li><b>average_row_length</b> -- The average storage size of a row in the table.</li>\n\t* <li><b>data_total</b> -- How much total disk space is used by the table.</li>\n\t* <li><b>data_overhead</b> -- How much storage space in the table is unused (for compacting purposes)</li>\n\t* </ul>\n\t* @param  $table\n\t* @return null\n\t*/\n\tfunction tableInfo($table) {  //FIXME never used\n\n\t}\n\n\t/**\n\t* Check whether or not a table in the database is empty (0 rows).\n\t* Returns tue of the specified table has no rows, and false if otherwise.\n\t*\n\t* @param string $table Name of the table to check.\n\t* @return bool\n\t*/\n\tfunction tableIsEmpty($table) {\n\t   return ($this->countObjects($table) == 0);\n\t}\n\n\t/**\n\t* Returns table information for all tables in the database.\n\t* This function effectively calls tableInfo() on each table found.\n\t* @return array\n\t*/\n\tabstract function databaseInfo();\n\n\t/**\n\t* This is an internal function for use only within the database database class\n\t* @internal Internal\n\t* @param  $status\n\t* @return null\n\t*/\n\tfunction translateTableStatus($status) {\n\t   $data = new stdClass();\n\t   $data->rows = $status->Rows;\n\t   $data->average_row_lenth = $status->Avg_row_length;\n\t   $data->data_overhead = $status->Data_free;\n\t   $data->data_total = $status->Data_length;\n\n\t   return $data;\n\t}\n\n\t/**\n\t * @param  $table\n\t * @return array\n\t */\n\tfunction describeTable($table) { //FIXME never used\n\n\t}\n\n\t/**\n\t* Build a data definition from a pre-existing table.  This is used\n\t* to intelligently alter tables that have already been installed.\n\t*\n\t* @param string $table The name of the table to get a data definition for.\n\t* @return array|null\n\t*/\n\tabstract function getDataDefinition($table);\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int\n\t*/\n\tfunction getDDFieldType($fieldObj) {\n\t   $type = strtolower($fieldObj->Type);\n\n\t   if ($type == \"int(11)\")\n\t       return DB_DEF_ID;\n\t   if ($type == \"int(8)\")\n\t       return DB_DEF_INTEGER;\n\t   elseif ($type == \"tinyint(1)\")\n\t       return DB_DEF_BOOLEAN;\n\t   elseif ($type == \"int(14)\")\n\t       return DB_DEF_TIMESTAMP;\n       elseif ($type == \"datetime\")\n  \t       return DB_DEF_TIMESTAMP;\n\t   //else if (substr($type,5) == \"double\")\n           //return DB_DEF_DECIMAL;\n\t   elseif ($type == \"double\")\n\t       return DB_DEF_DECIMAL;\n\t   // Strings\n\t   elseif ($type == \"text\" || $type == \"mediumtext\" || $type == \"longtext\" || strpos($type, \"varchar(\") !== false) {\n\t       return DB_DEF_STRING;\n\t   } else {\n           return DB_DEF_INTEGER;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDStringLen($fieldObj) {\n\t   $type = strtolower($fieldObj->Type);\n\t   if ($type == \"text\")\n\t       return 65535;\n\t   else if ($type == \"mediumtext\")\n\t       return 16777215;\n\t   else if ($type == \"longtext\")\n\t       return 16777216;\n\t   else if (strpos($type, \"varchar(\") !== false) {\n\t       return str_replace(array(\"varchar(\", \")\"), \"\", $type) + 0;\n\t   } else {\n           return 256;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDKey($fieldObj) {\n\t   $key = strtolower($fieldObj->Key);\n\t   if ($key == \"pri\")\n\t       return DB_PRIMARY;\n\t   else if ($key == \"uni\") {\n\t       return DB_UNIQUE;\n\t   } else {\n           return false;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDAutoIncrement($fieldObj) {\n\t   $auto = strtolower($fieldObj->Extra);\n\t   if ($auto == \"auto_increment\") {\n\t       return true;\n\t   } else {\n           return false;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDIsNull($fieldObj) {\n\t   $null = strtolower($fieldObj->Null);\n\t   if ($null == \"yes\") {\n\t       return true;\n\t   } else {\n           return false;\n       }\n\t}\n\n\t/**\n\t* This is an internal function for use only within the database class\n\t* @internal Internal\n\t* @param  $fieldObj\n\t* @return int|mixed\n\t*/\n\tfunction getDDDefault($fieldObj) {\n\t\treturn strtolower($fieldObj->Default);\n\t}\n\n\t/**\n\t* Returns an error message from the database server.  This is intended to be\n\t* used by the implementers of the database wrapper, so that certain\n\t* cryptic error messages can be reworded.\n\t* @return string\n\t*/\n\tabstract function error();\n\n\t/**\n\t* Checks whether the database connection has experienced an error.\n\t* @return bool\n\t*/\n\tabstract function inError();\n\n\t/**\n\t * Unescape a string based on the database connection\n\t * @param $string\n\t * @return string\n\t */\n\tabstract function escapeString($string);\n\n    /**\n   \t * Unescape a string based on the database connection\n   \t * @param $string\n   \t * @return string\n   \t */\n   \tfunction injectProof($string) {\n   \t    $quotes = substr_count(\"'\", $string);\n        if ($quotes % 2 != 0)\n            $string = $this->escapeString($string);\n        $dquotes = substr_count('\"', $string);\n        if ($dquotes % 2 != 0)\n            $string = $this->escapeString($string);\n        return $string;\n    }\n\n\t/**\n\t * Create a SQL \"limit\" phrase\n\t *\n\t * @param  $num\n\t * @param  $offset\n\t * @return string\n\t */\n\tfunction limit($num, $offset) {\n\t   return ' LIMIT ' . $offset . ',' . $num . ' ';\n\t}\n\n\t/**\n\t* Select an array of arrays\n\t*\n\t* Selects a set of arrays from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a set of records from a database table.  Returns an\n\t* array of arrays, in any random order.\n\t*\n\t* @param string $table The name of the table/object to look at\n\t* @param string $where Criteria used to narrow the result set.  If this\n\t*   is specified as null, then no criteria is applied, and all objects are\n\t*   returned\n\t* @param string $orderby\n\t* @return array\n\t*/\n\tabstract function selectArrays($table, $where = null, $orderby = null);\n\n\t/**\n\t* Select an array of arrays\n\t*\n\t* Selects a set of arrays from the database.  Because of the way\n\t* Exponent handles objects and database tables, this is akin to\n\t* SELECTing a set of records from a database table.  Returns an\n\t* array of arrays, in any random order.\n\t*\n\t* @param string $sql The name of the table/object to look at\n\t* @return array\n\t*/\n\tabstract function selectArraysBySql($sql);\n\n    /**\n     * Select a record from the database as an array\n     * Selects a set of arrays from the database.  Because of the way\n     * Exponent handles objects and database tables, this is akin to\n     * SELECTing a set of records from a database table.  Returns an\n     * array of arrays, in any random order.\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *                      is specified as null, then no criteria is applied, and all objects are\n     *                      returned\n     * @param null   $orderby\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return array|void\n     */\n\tabstract function selectArray($table, $where = null, $orderby = null, $is_revisioned=false, $needs_approval=false);\n\n    /**\n\t * Instantiate objects from selected records from the database\n     *\n     * @param string $table The name of the table/object to look at\n     * @param string $where Criteria used to narrow the result set.  If this\n     *                      is specified as null, then no criteria is applied, and all objects are\n     *                      returned\n     * @param        $classname\n     * @param bool   $get_assoc\n     * @param bool   $get_attached\n     * @param array  $except\n     * @param bool   $cascade_except\n     * @param null   $order\n     * @param null   $limitsql\n     * @param bool   $is_revisioned\n     * @param bool   $needs_approval\n     *\n     * @return array\n     */\n\tabstract function selectExpObjects($table, $where=null, $classname, $get_assoc=true, $get_attached=true, $except=array(), $cascade_except=false, $order=null, $limitsql=null, $is_revisioned=false, $needs_approval=false);\n\n\t/**\n\t * Instantiate objects from selected records from the database\n\t *\n\t* @param string $sql The sql statement to run on the model/classname\n\t* @param string $classname Can be $this->baseclassname\n\t* Returns an array of fields\n\t* @param bool $get_assoc\n\t* @param bool $get_attached\n\t* @return array\n\t*/\n\tfunction selectExpObjectsBySql($sql, $classname, $get_assoc=true, $get_attached=true) {  //FIXME never used\n\n\t}\n\n\t/**\n\t * @param  $table\n\t * @return array\n\t */\n\tfunction selectNestedTree($table) {\n\t   $sql = 'SELECT node.*, (COUNT(parent.sef_url) - 1) AS depth\n\t\tFROM `' . $this->prefix . $table . '` AS node,\n\t\t`' . $this->prefix . $table . '` AS parent\n\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\tGROUP BY node.sef_url\n\t\tORDER BY node.lft';\n\t   return $this->selectObjectsBySql($sql);\n\t}\n\n\tfunction selectFormattedNestedTree($table) {\n\t\t$sql = \"SELECT CONCAT( REPEAT( '&#160;&#160;&#160;', (COUNT(parent.title) -1) ), node.title) AS title, node.id\n\t\t\t\tFROM \" .$this->prefix . $table. \" as node, \" .$this->prefix . $table. \" as parent\n\t\t\t\tWHERE node.lft BETWEEN parent.lft and parent.rgt\n\t\t\t\tGROUP BY node.title, node.id\n\t\t\t\tORDER BY node.lft\";\n\n\t\treturn $this->selectObjectsBySql($sql);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param  $start\n\t * @param  $width\n\t * @return void\n\t */\n\tfunction adjustNestedTreeFrom($table, $start, $width) {\n\t   $table = $this->prefix . $table;\n\t   $this->sql('UPDATE `' . $table . '` SET rgt = rgt + ' . $width . ' WHERE rgt >=' . $start);\n\t   $this->sql('UPDATE `' . $table . '` SET lft = lft + ' . $width . ' WHERE lft >=' . $start);\n\t   //eDebug('UPDATE `'.$table.'` SET rgt = rgt + '.$width.' WHERE rgt >='.$start);\n\t   //eDebug('UPDATE `'.$table.'` SET lft = lft + '.$width.' WHERE lft >='.$start);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param  $lft\n\t * @param  $rgt\n\t * @param  $width\n\t * @return void\n\t */\n\tfunction adjustNestedTreeBetween($table, $lft, $rgt, $width) {\n\t   $table = $this->prefix . $table;\n\t   $this->sql('UPDATE `' . $table . '` SET rgt = rgt + ' . $width . ' WHERE rgt BETWEEN ' . $lft . ' AND ' . $rgt);\n\t   $this->sql('UPDATE `' . $table . '` SET lft = lft + ' . $width . ' WHERE lft BETWEEN ' . $lft . ' AND ' . $rgt);\n\t   //eDebug('UPDATE `'.$table.'` SET rgt = rgt + '.$width.' WHERE rgt BETWEEN '.$lft.' AND '.$rgt);\n\t   //eDebug('UPDATE `'.$table.'` SET lft = lft + '.$width.' WHERE lft BETWEEN '.$lft.' AND '.$rgt);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param null $node\n\t * @return array\n\t */\n\tfunction selectNestedBranch($table, $node=null) {\n\t   if (empty($node))\n\t       return array();\n\n\t   $where = is_numeric($node) ? 'id=' . $node : 'title=\"' . $node . '\"';\n//\t   global $db;\n\t   $sql = 'SELECT node.*,\n\t           (COUNT(parent.title) - (sub_tree.depth + 1)) AS depth\n\t           FROM `' . $this->prefix . $table . '` AS node,\n\t           `' . $this->prefix . $table . '` AS parent,\n\t           `' . $this->prefix . $table . '` AS sub_parent,\n\t                   (       SELECT node.*, (COUNT(parent.title) - 1) AS depth\n\t                           FROM `' . $this->prefix . $table . '` AS node,\n\t                           `' . $this->prefix . $table . '` AS parent\n\t                           WHERE node.lft BETWEEN parent.lft\n\t                           AND parent.rgt AND node.' . $where . '\n\t                           GROUP BY node.title\n\t                           ORDER BY node.lft )\n\t           AS sub_tree\n\t           WHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t           AND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt\n\t           AND sub_parent.title = sub_tree.title\n\t           GROUP BY node.title\n\t           ORDER BY node.lft;';\n\n\t   return $this->selectObjectsBySql($sql);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param  $lft\n\t * @param  $rgt\n\t * @return void\n\t */\n\tfunction deleteNestedNode($table, $lft, $rgt) {\n\t   $table = $this->prefix . $table;\n\n\t   $width = ($rgt - $lft) + 1;\n\t   $this->sql('DELETE FROM `' . $table . '` WHERE lft BETWEEN ' . $lft . ' AND ' . $rgt);\n\t   $this->sql('UPDATE `' . $table . '` SET rgt = rgt - ' . $width . ' WHERE rgt > ' . $rgt);\n\t   $this->sql('UPDATE `' . $table . '` SET lft = lft - ' . $width . ' WHERE lft > ' . $rgt);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param null $node\n\t * @return array\n\t */\n\tfunction selectPathToNestedNode($table, $node=null) {\n\t   if (empty($node))\n\t       return array();\n\n\t   $where = is_numeric($node) ? 'id=' . $node : 'title=\"' . $node . '\"';\n\t   $sql = 'SELECT parent.*\n\t\tFROM `' . $this->prefix . $table . '` AS node,\n\t\t`' . $this->prefix . $table . '` AS parent\n\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\tAND node.' . $where . '\n\t\tORDER BY parent.lft;';\n\t   return $this->selectObjectsBySql($sql);\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param null $node\n\t * @return array\n\t */\n\tfunction selectNestedNodeParent($table, $node=null) {\n\t   if (empty($node))\n\t       return array();\n\n\t   $where = is_numeric($node) ? 'id=' . $node : 'title=\"' . $node . '\"';\n\t   $sql = 'SELECT parent.*\n\t\tFROM `' . $this->prefix . $table . '` AS node,\n\t\t`' . $this->prefix . $table . '` AS parent\n\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\tAND node.' . $where . '\n\t\tORDER BY parent.lft DESC\n\t\tLIMIT 1, 1;';\n\t   $parent_array = $this->selectObjectsBySql($sql);\n\t   return $parent_array[0];\n\t}\n\n\t/**\n\t * @param  $table\n\t * @param null $node\n\t * @return array\n\t */\n\tfunction selectNestedNodeChildren($table, $node=null) {\n\t   if (empty($node))\n\t       return array();\n\n\t   $where = is_numeric($node) ? 'node.id=' . $node : 'node.title=\"' . $node . '\"';\n\t   $sql = '\n\t\tSELECT node.*, (COUNT(parent.title) - (sub_tree.depth + 1)) AS depth\n\t\tFROM ' . $this->prefix . $table . ' AS node,\n\t\t\t' . $this->prefix . $table . ' AS parent,\n\t\t\t' . $this->prefix . $table . ' AS sub_parent,\n\t\t\t(\n\t\t\t\tSELECT node.*, (COUNT(parent.title) - 1) AS depth\n\t\t\t\tFROM ' . $this->prefix . $table . ' AS node,\n\t\t\t\t' . $this->prefix . $table . ' AS parent\n\t\t\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\t\t\tAND ' . $where . '\n\t\t\t\tGROUP BY node.title\n\t\t\t\tORDER BY node.lft\n\t\t\t)AS sub_tree\n\t\tWHERE node.lft BETWEEN parent.lft AND parent.rgt\n\t\t\tAND node.lft BETWEEN sub_parent.lft AND sub_parent.rgt\n\t\t\tAND sub_parent.title = sub_tree.title\n\t\tGROUP BY node.title\n\t\tHAVING depth = 1\n\t\tORDER BY node.lft;';\n\t$children = $this->selectObjectsBySql($sql);\n\t   return $children;\n\t}\n\n\t/**\n\t * This function returns all the text columns in the given table\n\t * @param $table\n\t * @return array\n\t */\n\tabstract function getTextColumns($table);\n\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expRouter\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n\nclass expRouter {\n\n    private $maps = array();\n    public  $url_parts = '';\n    public  $current_url = '';\n    /**\n     * Type of url\n     * either 'base' (default page), 'page', 'action', or 'malformed'\n     * @var string\n     */\n    public  $url_type = '';\n    /**\n     * Style of url\n     * either 'sef' or 'query'\n     * @var string\n     */\n    public  $url_style = '';\n    public  $params = array();\n    public  $sefPath = null;\n    \n    function __construct() {\n        self::getRouterMaps();\n    }\n\n    /**\n     * remove trailing slash\n     *\n     * @param $fulllink\n     *\n     * @return string\n     */\n    public static function cleanLink($fulllink)\n    {           \n        if(substr($fulllink, -1) == '/') $fulllink = substr($fulllink, 0, -1);  \n        return $fulllink;                                   \n    }\n    \n    /**\n\t * Will build url to a module/page/etc (determined by what is passed to the $params array).\n\t *\n\t * @param array $params The params that are passed will determine what link is make\n\t *               section\n\t *               action\n\t *               sef_name\n\t *               module\n\t *               controller\n\t *               action\n\t *\n\t * @param bool $force_old_school Old School as in not SEF.\n\t *\n\t * @param bool $secure If you set $secure true but ENABLE_SSL is not turned on in the config this will be forced false\n\t *\n\t * @param bool $no_map Ignore router_maps\n     *\n\t * @return string A url\n\t */\n    public function makeLink($params, $force_old_school=false, $secure=false, $no_map=false) {\n        $secure = ENABLE_SSL == 1 ? $secure : false;  // check if this site can use SSL if not then force the link to not be secure\n        $linkbase =  $secure ? URL_BASE_SECURE : URL_BASE;\n        $linkbase .= SCRIPT_RELATIVE;\n                \n        if (isset($params['section']) && $params['section'] == SITE_DEFAULT_SECTION) {            \n            return self::cleanLink($linkbase);\n        }\n\n        // Check to see if SEF_URLS have been turned on in the site config\n        if (SEF_URLS == 1 && ($_SERVER[\"PHP_SELF\"] == PATH_RELATIVE.'index.php' || $_SERVER[\"PHP_SELF\"] == PATH_RELATIVE.'install/index.php') && $force_old_school == false) {\n            \n            if (isset($params['section']) && !isset($params['action'])) {                \n                if (empty($params['sef_name'])) {\n                    global $db;\n\n                    $params['sef_name'] = $db->selectValue('section', 'sef_name', 'id='.intval($params['section']));\n                }                               \n                return self::cleanLink($linkbase.$params['sef_name']);\n            } else {                \n                // initialize the link\n                $link = '';               \n        \n                // we need to add the change the module parameter to controller if it exists\n                // we can remove this snippit once the old modules are gone.\n                if (!empty($params['module']) && empty($params['controller'])) $params['controller'] = $params['module'];\n            \n                // check to see if we have a router mapping for this controller/action\n                if (empty($no_map)){\n                    for ($i = 0, $iMax = count($this->maps); $i < $iMax; $i++) {\n                        $missing_params = array(\"dump\");\n\n                        if ((!empty($params) && !empty($params['controller']) && !empty($params['action'])) && (in_array($params['controller'], $this->maps[$i]) && in_array($params['action'], $this->maps[$i]) && (!isset($this->maps[$i]['src']) || in_array($params['src'], $this->maps[$i])))) {\n                            $missing_params = array_diff_key($this->maps[$i]['url_parts'], $params);\n                        }\n\n                        if (count($missing_params) == 0) {\n                            foreach($this->maps[$i]['url_parts'] as $key=>$value) {\n                                if ($key == 'controller') {\n                                    $link .= urlencode($value).\"/\";\n                                } else {\n                                    $link .= urlencode($params[$key]).\"/\";\n                                }\n                            }\n                            break;  // if this hits then we've found a match\n                        }\n                    }\n                }\n\n                // if we found a mapping for this link then we can return it now.\n                //if ($link != '') return self::encode($linkbase.$link);\n                if ($link != '') return self::cleanLink($linkbase.$link);\n                \n                if (!empty($params['controller'])) $link .= $params['controller'].'/';\n                if (!empty($params['action'])) $link .= $params['action'].'/';\n                foreach ($params as $key=>$value) {\n                    if(!is_array($value) && strpos($key,'__') !== 0 && $key !== 'PHPSESSID') {\n                        $value = trim($value);\n                        $key = trim($key);\n                        if ($value != \"\") {\n                            if ($key != 'module' && $key != 'action' && $key != 'controller') {\n                                if ($key != 'src') {\n                                    $link .= urlencode($key).\"/\".urlencode($value).\"/\";\n                                } else {\n                                    $link .= $key.\"/\".$value.\"/\";\n                                }\n                            }\n                        }\n                    }\n                }\n                //trim last / off                 \n                return self::cleanLink($linkbase.$link);\n            }\n        } else {\n            // if the users don't have SEF URL's turned on then we make the link the old school way.\n            if (!empty($params['sef_name'])) unset($params['sef_name']);\n            $link = $linkbase . SCRIPT_FILENAME . \"?\";\n            foreach ($params as $key=>$value) {\n                if (!is_array($value) && strpos($key,'__') !== 0 && $key !== 'PHPSESSID'){\n                    $value = trim($value);\n                    $key = trim($key);\n                    if ($value != \"\") {\n                        if ($key != 'src') {\n                            $link .= urlencode($key).\"=\".urlencode($value).\"&\";\n                        } else {\n                            $link .= $key.\"=\".$value.\"&\";\n                        }                    \n                    }\n                }\n            }\n\n            $link = substr($link,0,-1);\n            return $link; // phillip: removed htmlspecialchars so that links return without parsing & to &amp; in URL strings\n            //return htmlspecialchars($link,ENT_QUOTES);\n        }\n    }\n\n    /**\n     * Returns a cleaner canonical link sans 'src' param\n     *\n     * @return string\n     */\n    public function plainPath() {\n        $params = $this->params;\n        unset($params['src']);\n        return $this->makeLink($params);\n    }\n\n    public function routeRequest() {\n        global $user;\n\n        // strip out possible xss exploits via url\n        foreach ($_GET as $key=>$var) {\n            if (is_string($var) && strpos($var,'\">')) {\n                unset(\n                    $_GET[$key],\n                    $_REQUEST[$key]\n                );\n            }\n        }\n        // conventional method to ensure the 'id' is only an id\n        if (isset($_REQUEST['id'])) {\n            if (isset($_GET['id']))\n                $_GET['id'] = intval($_GET['id']);\n            if (isset($_POST['id']))\n                $_POST['id'] = intval($_POST['id']);\n\n            $_REQUEST['id'] = intval($_REQUEST['id']);\n        }\n        // do the same for the other id's\n        foreach ($_REQUEST as $key=>$var) {\n            if (is_string($var) && strrpos($key,'_id',-3) !== false) {\n                if (isset($_GET[$key]))\n                    $_GET[$key] = intval($_GET[$key]);\n                if (isset($_POST[$key]))\n                    $_POST[$key] = intval($_POST[$key]);\n\n                $_REQUEST[$key] = intval($_REQUEST[$key]);\n            }\n        }\n        if (empty($user->id) || (!empty($user->id) && !$user->isAdmin())) {  //FIXME why would $user be empty here unless $db is down?\n//            $_REQUEST['route_sanitized'] = true;//FIXME debug test\n            expString::sanitize($_REQUEST);  // strip other exploits like sql injections\n        }\n\n        // start splitting the URL into it's different parts\n        $this->splitURL();\n        // edebug($this,1);\n\n        if ($this->url_style == 'sef') {\n            if ($this->url_type == 'page' || $this->url_type == 'base') {\n                $ret = $this->routePageRequest();               // if we hit this the formatting of the URL looks like the user is trying to go to a page.\n                if (!$ret) $this->url_type = 'malformed';\n            } elseif ($this->url_type == 'action') {\n                $this->isMappedURL();                       //check for a router map\n                $ret = $this->routeActionRequest();         // we didn't have a map for this URL.  Try to route it with this function.\n\n                // if this url wasn't a valid section, or action then kill it.  It might not actually be a \"bad\" url, \n                // but this is a precautionary measure against bad paths on images, css & js file, etc...with the new\n                // mod_rewrite rules these bad paths will not route thru here so we need to take them into account and\n                // deal with them accordingly.\n                if (!$ret) $this->url_type = 'malformed';  \n            } elseif ($this->url_type == 'post') {\n                // some forms aren't getting the controller field set right when the form is created\n                // we are putting this check here to safe guard against a controller being referred to as\n                // a module in the form.\n                if (!empty($_POST['controller']) || !empty($_POST['module'])) {\n                    $module = !empty($_POST['controller']) ? expString::sanitize($_POST['controller']) : expString::sanitize($_POST['module']);\n                    // Figure out if this is module or controller request - WE ONLY NEED THIS CODE UNTIL WE PULL OUT THE OLD MODULES\n                    if (expModules::controllerExists($module)) {\n                        $_POST['controller'] = $module;\n                        $_REQUEST['controller'] = $module;\n                    }\n                }\n            }\n        } elseif ($this->url_style == 'query' && SEF_URLS == 1 && !empty($_REQUEST['section']) && PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1) {\n            // if we hit this it's an old school url coming in and we're trying to use SEF's. \n            // we will send a permanent redirect so the search engines don't freak out about 2 links pointing\n            // to the same page.\n            header(\"Location: \".$this->makeLink(array('section'=>intval($_REQUEST['section']))),TRUE,301);          \n        }\n\n        // if this is a valid URL then we build out the current_url var which is used by flow, and possibly other places too\n        if ($this->url_type != 'malformed') {               \n            $this->current_url = $this->buildCurrentUrl();\n        } else {\n            // check if the URL is looking for a non-existent page or controller (we will check for bad action in renderAction())\n            // if page or controller is not found we will route to the not found controller.            \n            $_REQUEST['controller'] = 'notfound';\n            $_REQUEST['action'] = 'handle';\n        }\n    }\n\n    //FIXME what are we doing with this history? saving each page load\n    public function updateHistory($section=null) {\n        global $db,$user;\n\n        // if its not already set\n        // configurable tracking length\n        setcookie('UserUID',expSession::getTicketString(),86400 * TRACKING_COOKIE_EXPIRES);\n        $cookieID = (empty($_COOKIE['UserUID'])) ? expSession::getTicketString() : $_COOKIE['UserUID'];\n        // Build out the object to insert into the db.\n        // Get our parameters.\n        $tmpParams = array();\n        foreach ($this->params as $key=>$value) {\n            if ($key != 'module' && $key != 'action' && $key != 'controller' && $key != 'section') {\n                $tmpParams[$key] = $value;\n            }\n        }\n        $trackingObject = new stdClass();\n        $trackingObject->params = serialize($tmpParams);\n        if ($this->url_type == 'page' || $this->url_type == 'base') {\n            $trackingObject->section = $section;\n        } else {\n            $trackingObject->module = ($_SERVER['REQUEST_METHOD'] == 'POST') ? (empty($_POST['controller']) ? expString::sanitize($_POST['module']) : expString::sanitize($_POST['controller'])) : $this->url_parts[0];\n            $trackingObject->action = ($_SERVER['REQUEST_METHOD'] == 'POST') ? $_POST['action'] : $this->url_parts[1];\n        }\n        $trackingObject->referer = empty($_SERVER['HTTP_REFERER']) ? null : $_SERVER['HTTP_REFERER'];\n        $trackingObject->cookieUID = $cookieID;\n        $trackingObject->user_id = $user->id;\n        $trackingObject->timestamp = time();\n        $trackingObject->user_address = $_SERVER['REMOTE_ADDR'];\n        $trackingObject->user_agent = $_SERVER['HTTP_USER_AGENT'];\n        $trackingObject->session_id = $_COOKIE['PHPSESSID'];\n        $db->insertObject($trackingObject,'tracking_rawdata');\n    }\n\n    public function splitURL() {\n        global $db;\n\n        $this->url_parts = array();\n        $this->buildSEFPath();\n\n        if (!empty($this->sefPath)) {\n            $this->url_style = 'sef';\n            $this->url_parts = explode('/', $this->sefPath);     \n\n            // remove empty first and last url_parts if they exist\n            //if (empty($this->url_parts[count($this->url_parts)-1])) array_pop($this->url_parts);\n            if ($this->url_parts[count($this->url_parts)-1] == '') array_pop($this->url_parts);\n            if (empty($this->url_parts[0])) array_shift($this->url_parts);\n            \n            if (count($this->url_parts) < 1 || (empty($this->url_parts[0]) && count($this->url_parts) == 1) ) {\n                $this->url_type = 'base';  // no params\n            } elseif (count($this->url_parts) == 1 || $db->selectObject('section', \"sef_name='\" . substr($this->sefPath,1) . \"'\") != null) {\n                $this->url_type = 'page';  // single param is page name\n            } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n                $this->url_type = 'post';  // params via form/post\n            } else {\n                // take a peek and see if a page exists with the same name as the first value...if so we probably have a page with\n                // extra perms...like printerfriendly=1 or ajax_action=1;\n                if (($db->selectObject('section', \"sef_name='\" . $this->url_parts[0] . \"'\") != null) && (in_array(array('printerfriendly','exportaspdf','ajax_action'), $this->url_parts))) {\n                    $this->url_type = 'page';\n                } else {\n                    $this->url_type = 'action';\n                }\n            }\n            $this->params = $this->convertPartsToParams();\n        } elseif ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            $this->url_style = 'sef';\n            $this->url_type = 'post';\n            $this->params = $this->convertPartsToParams();\n        } elseif (isset($_SERVER['REQUEST_URI'])) {\n            // if we hit here, we don't really need to do much.  All the pertinent info will come thru in the POST/GET vars\n            // so we don't really need to worry about what the URL looks like.\n            if ($_SERVER['REQUEST_URI'] == PATH_RELATIVE) {\n                $this->url_type = 'base';\n                $this->params = array();\n            } else {\n                $sefPath = explode('%22%3E',$_SERVER['REQUEST_URI']);  // remove any attempts to close the command\n                $_SERVER['REQUEST_URI'] = $sefPath[0];\n                $this->url_style = 'query';\n            }\n        } else {\n            $this->url_type = 'base';\n            $this->params = array();\n        }\n                              \n        // Check if this was a printer friendly link request\n        define('PRINTER_FRIENDLY', (isset($_REQUEST['printerfriendly']) || isset($this->params['printerfriendly'])) ? 1 : 0);         \n        define('EXPORT_AS_PDF', (isset($_REQUEST['exportaspdf']) || isset($this->params['exportaspdf'])) ? 1 : 0);\n        define('EXPORT_AS_PDF_LANDSCAPE', (isset($_REQUEST['landscapepdf']) || isset($this->params['landscapepdf'])) ? 1 : 0);\n    }\n\n    public function routePageRequest() {        \n//        global $db;\n\n        if ($this->url_type == 'base') {\n            // if we made it in here this is a request for http://www.baseurl.com\n            if (expTheme::inAction()) {\n                $_REQUEST['section'] = (expSession::is_set('last_section') ? expSession::get('last_section') : SITE_DEFAULT_SECTION);\n            } else {\n                $_REQUEST['section'] = SITE_DEFAULT_SECTION;  \n            }\n        } else {\n            // Try to look up the page by sef_name first.  If that doesn't exist, strip out the dashes and\n            // check the regular page names.  If that still doesn't work then we'll redirect them to the \n            // search module using the page name as the search string.\n            $section = $this->getPageByName(substr($this->sefPath,1));\n            ########################################################\n            #FJD TODO:  this needs further refinement\n            #currently this requires a matching routerMap as such to work properly:\n            /*\n            $maps[] = array('controller'=>'store',\n                    'action'=>'showall',\n                    'url_parts'=>array(                \n                            'title'=>'(.*)'),\n            );\n            $maps[] = array('controller'=>'store',\n                    'action'=>'showByTitle',\n                    'url_parts'=>array(                \n                            'title'=>'(.*)'),\n            );\n            */\n            //if section is empty, we'll look for the page overrides first and route to \n            //routeActionRequest with some hand wacked variables. If we can't find an override\n            //then we'll return false as usual\n            // since we only received a single param and it wasn't a page, try for store category, or a product\n            if (empty($section)) {\n                $sef_url = $this->url_parts[0];\n                //check for a category\n                $c = new storeCategory();                \n                $cat = $c->findBy('sef_url', $sef_url);\n                if (empty($cat)) {\n                    //check for a product\n                    $p = new product();\n                    $prod = $p->findBy('sef_url', $sef_url);\n                    if(!empty($prod)) {\n                        //fake parts and route to action  \n                        $this->url_type = 'action';                   \n                        $this->url_parts[0] = 'store'; //controller\n                        $this->url_parts[1] = 'show'; //controller\n                        $this->url_parts[2] = 'title'; //controller\n                        $this->url_parts[3] = $sef_url; //controller\n                        //eDebug($this->url_parts,true);\n                        $this->params = $this->convertPartsToParams();\n                        return $this->routeActionRequest();\n                    }\n                    //else fall through\n                } else {\n                    //fake parts and route to action \n                    $this->url_type = 'action';                                      \n                    $this->url_parts[0] = 'store'; //controller\n                    $this->url_parts[1] = 'showall'; //controller\n                    $this->url_parts[2] = 'title'; //controller                    \n                    $this->url_parts[3] = $sef_url; //controller\n                    //eDebug($this->url_parts,true);\n                    $this->params = $this->convertPartsToParams();\n                    return $this->routeActionRequest();\n                }\n                return false;\n            }\n            #########################################################\n            //if (empty($section)) return false;  //couldnt find the page..let the calling action deal with it.\n            $_REQUEST['section'] = $section->id;\n        }\n        \n        expHistory::set('viewable', array('section'=>intval($_REQUEST['section'])));\n        return true;\n    }\n\n    /**\n     * figure out if this action is mapped via the mapping file (router_maps.php)\n     */\n    public function isMappedURL() {\n        $part_count = count($this->url_parts);\n        foreach ($this->maps as $map) {\n            $matched = true;\n            $pairs = array();\n            $i = 0;\n            if ($part_count == count($map['url_parts'])) {               \n                foreach($map['url_parts'] as $key=>$map_part) {\n                    $res = preg_match(\"/^$map_part/\", $this->url_parts[$i]);\n                    if ($res != 1) {\n                        $matched = false;\n                        break;\n                    } \n                    $pairs[$key] = $this->url_parts[$i];\n                    $i++;\n                }\n            } else {\n                $matched = false;\n            }            \n              \n            if ($matched) {\n                // safeguard against false matches when a real action was what the user really wanted.\n                if (count($this->url_parts) >= 2 && method_exists(expModules::getController($this->url_parts[0]), $this->url_parts[1]))\n                    return false;\n\n                $this->url_parts = array();\n                $this->url_parts[0] = $map['controller'];\n                $this->url_parts[1] = $map['action'];\n        \n                if (isset($map['view'])) {\n                    $this->url_parts[2] = 'view';\n                    $this->url_parts[3] = $map['view'];\n                }\n\n                foreach($map as $key=>$value) {\n                    if ($key != 'controller' && $key != 'action' && $key != 'view' && $key != 'url_parts') {\n                        $this->url_parts[] = $key;\n                        $this->url_parts[] = $value;\n                    }\n                }\n\n                foreach($pairs as $key=>$value) {\n                    if ($key != 'controller') {\n                        $this->url_parts[] = $key;\n                        $this->url_parts[] = $value;\n                    }\n                }\n                \n                $this->params = $this->convertPartsToParams();\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    public function routeActionRequest() {\n        $return_params = array('controller'=>'','action'=>'','url_parts'=>array());\n    \n        // If we have three url parts we assume they are controller->action->id, otherwise split them out into name<=>value pairs\n        $return_params['controller'] = $this->url_parts[0]; // set the controller/module\n        $return_params['action'] = $this->url_parts[1];     // set the action\n\n        // Figure out if this is module or controller request - WE ONLY NEED THIS CODE UNTIL WE PULL OUT THE OLD MODULES\n        if (expModules::controllerExists($return_params['controller'])) {\n            $requestType = 'controller';\n//        } elseif (is_dir(BASE.'framework/modules-1/'.$return_params['controller'])) {\n//            $requestType = 'module';\n        } else {\n            return false;  //this is an invalid url return an let the calling function deal with it.\n        }\n\n        // now figure out the name<=>value pairs\n        if (count($this->url_parts) == 3) {\n            if ( is_numeric($this->url_parts[2])) {\n                $return_params['url_parts']['id'] = $this->url_parts[2];\n            }\n        } else {\n            for ($i = 2, $iMax = count($this->url_parts); $i < $iMax; $i++) {\n                if ($i % 2 == 0) {\n                    $return_params['url_parts'][$this->url_parts[$i]] = isset($this->url_parts[$i+1]) ? $this->url_parts[$i+1] : '';\n                }\n            }\n        }        \n\n        // Set the module or controller - this how the actual routing happens\n        $_REQUEST[$requestType] = $return_params['controller']; //url_parts[0];\n        $_GET[$requestType] = $return_params['controller'];\n        $_POST[$requestType] = $return_params['controller'];\n    \n        // Set the action for this module or controller\n        if ($_SERVER['REQUEST_METHOD'] == 'POST') {\n            // most of the time we can just grab the action outta the POST array since this is passed as a hidden field, \n            // but sometimes it is actually set as the action on the form itself...then we get it from the params array instead.\n            $action = !empty($_POST['action']) ? $_POST['action'] : $this->params['action'];\n        } else {\n            $action = $return_params['action'];\n        }\n    \n        $_REQUEST['action'] = $action;\n        $_GET['action'] = $action;\n        $_POST['action'] = $action;\n\n        // pass off the name<=>value pairs\n        foreach($return_params['url_parts'] as $key=>$value) {\n            $save_value = expString::sanitize($value);\n            $_REQUEST[$key] = $save_value;\n            $_GET[$key] = $save_value;\n        }\n\n        return true;\n    }\n\n    public function buildCurrentUrl() {\n        $url =  URL_BASE;\n        if ($this->url_style == 'sef') {\n            $url .= substr(PATH_RELATIVE,0,-1).$this->sefPath;\n        } else {\n            $url .= urldecode((empty($_SERVER['REQUEST_URI'])) ? $_ENV['REQUEST_URI'] : $_SERVER['REQUEST_URI']);\n        }\n        return expString::escape(expString::sanitize($url));\n    }\n\n    public static function encode($url) {\n        $url = str_replace('&', 'and', $url);\n        return preg_replace(\"/(-)$/\", \"\", preg_replace('/(-){2,}/', '-', strtolower(preg_replace(\"/([^0-9a-z-_\\+])/i\", '-', $url))));\n    }\n    \n    public static function decode($url) {\n        $url = str_replace('-', ' ', $url);\n        return str_replace('+', '-', $url);\n    }\n\n    public function getSefUrlByPageId($id=null) {  //FIXME this method is never called and doesn't do anything as written\n        if (!empty($id)) {\n            global $db;\n\n            $section = $db->selectObject('section', 'id='.intval($id));\n            $url = URL_FULL;\n            $url .= !empty($section->sef_name) ? $section->sef_name : $section->name;\n        }\n    }\n\n    public function buildUrlByPageId($id=null) {\n        global $db;\n\n        //$url = URL_FULL;\n        $url = '';\n        if (!empty($id)) {\n            if (SEF_URLS == 1) {\n                $section = $db->selectObject('section', 'id='.intval($id));\n                if ($section->id != SITE_DEFAULT_SECTION) {\n                    $url .= !empty($section->sef_name) ? $section->sef_name : $section->name;\n                }\n            } else {\n                $url .= 'index.php?section='.$id;\n            }\n        }\n        return $url;\n    }\n\n    public function printerFriendlyLink($link_text=\"Printer Friendly\", $class=null, $width=800, $height=600, $view='', $title_text = \"Printer Friendly\") {\n        $url = '';\n        if (PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1) {\n            $class = !empty($class) ? $class : 'printer-friendly-link';\n            $url =  '<a class=\"'.$class.'\" href=\"javascript:void(0)\" onclick=\"window.open(\\'';\n            if (!empty($_REQUEST['view']) && !empty($view) && $_REQUEST['view'] != $view) {\n                $_REQUEST['view'] = $view;\n            }\n            if ($this->url_style == 'sef') {\n                $url .= $this->convertToOldSchoolUrl();\n                if (empty($_REQUEST['view']) && !empty($view)) $url .= '&view='.$view;\n                if ($this->url_type=='base') $url .= '/index.php?section='.SITE_DEFAULT_SECTION;\n            } else {\n                $url .= $this->current_url;\n            }\n            $url .= '&printerfriendly=1\\' , \\'mywindow\\',\\'menubar=1,resizable=1,scrollbars=1,width='.$width.',height='.$height.'\\');\"';\n            $url .= ' title=\"'.$title_text.'\"';\n            $url .= '> '.$link_text.'</a>';\n            $url = str_replace('&ajax_action=1','',$url);\n        }\n        \n        return $url; \n    }\n\n    public function exportAsPDFLink($link_text=\"Export as PDF\", $class=null, $width=800, $height=600, $view='', $orientation=false, $limit='', $title_text=\"Export as PDF\") {\n        $url = '';\n        if (EXPORT_AS_PDF != 1 && PRINTER_FRIENDLY != 1) {\n            $class = !empty($class) ? $class : 'export-pdf-link';\n            $url =  '<a class=\"'.$class.'\" href=\"javascript:void(0)\" onclick=\"window.open(\\'';\n            if (!empty($_REQUEST['view']) && !empty($view) && $_REQUEST['view'] != $view) {\n                $_REQUEST['view'] = $view;\n            }\n            if ($this->url_style == 'sef') {\n                $url .= $this->convertToOldSchoolUrl();\n                if (empty($_REQUEST['view']) && !empty($view)) $url .= '&view='.$view;\n                if ($this->url_type=='base') $url .= '/index.php?section='.SITE_DEFAULT_SECTION;\n            } else {\n                $url .= $this->current_url;\n            }\n            if (!empty($orientation)) {\n                $orientation = '&landscapepdf='.$orientation;\n            }\n            if (!empty($limit)) {\n                $limit = '&limit='.$limit;\n            }\n            $url .= '&exportaspdf=1'.$orientation.$limit.'&\\' , \\'mywindow\\',\\'menubar=1,resizable=1,scrollbars=1,width='.$width.',height='.$height.'\\');\"';\n            $url .= ' title=\"'.$title_text.'\"';\n            $url .= '> '.$link_text.'</a>';\n            $url = str_replace('&ajax_action=1','',$url);\n        }\n\n        return $url;\n    }\n\n    public function convertToOldSchoolUrl() {\n        $params = $this->convertPartsToParams();\n        return $this->makeLink($params, true);\n    }\n\n    public function convertPartsToParams() {\n        $params = array();\n        if ($this->url_type == 'base') {\n            $params['section'] = SITE_DEFAULT_SECTION;\n        } elseif ($this->url_type == 'page') {\n            $section = $this->getPageByName(substr($this->sefPath,1));\n            $params['section'] = empty($section->id) ? null : $section->id;\n        } elseif ($this->url_type == 'action') {\n            $params['controller'] = $this->url_parts[0];\n            $params['action'] = !empty($this->url_parts[1]) ? $this->url_parts[1] : null;\n            for ($i = 2, $iMax = count($this->url_parts); $i < $iMax; $i++) {\n                if ($i % 2 == 0) {\n                    $params[$this->url_parts[$i]] = isset($this->url_parts[$i+1]) ? $this->url_parts[$i+1] : '';\n                }\n            }\n        } elseif ($this->url_type == 'post') {\n            if (isset($_REQUEST['PHPSESSID'])) unset($_REQUEST['PHPSESSID']);\n//            foreach($_REQUEST as $name=>$val) {\n////                if (get_magic_quotes_gpc()) $val = stripslashes($val);  // magic quotes fix??\n////                $params[$name] = $val;\n//                $params[$name] = expString::sanitize($val);  //FIXME need array sanitizer\n//            }\n//            if (empty($_REQUEST['route_sanitized']))\n                $params = expString::sanitize($_REQUEST);\n//            if (empty($data['route_sanitized'])) $_REQUEST['pre_sanitized'] = true;//FIXME debug test\n        }\n        //TODO: fully sanitize all params values here for ---We already do this!\n//        if (isset($params['src'])) $params['src'] = expString::sanitize(htmlspecialchars($params['src']));\n        return $params;\n    }\n\n    public function getPageByName($url_name) {\n        global $db;\n        \n        $section = null;\n        if (is_numeric($url_name)) {\n            $section = $db->selectObject('section', 'id=' . $url_name);\n            if ($section == null) $section = $db->selectObject('section', \"sef_name='\" . $url_name . \"'\");\n        } elseif ($this->url_type == 'base') {\n            // if we made it in here this is a request for http://www.baseurl.com\n            $section = $db->selectObject('section', 'id='.SITE_DEFAULT_SECTION);\n        } else {\n            $section = $db->selectObject('section', \"sef_name='\".$url_name.\"'\");\n        }\n        // if section is still empty then we should route the user to the search (cool new feature :-) )\n        // at some point we need to write a special action/view for the search module that lets the user\n        // know they were redirected to search since the page they tried to go to directly didn't exist.\n#       if (empty($section)) {\n#           header(\"Refresh: 0; url=\".$this->makeLink(array('module'=>'search', 'action'=>'search', 'search_string'=>$this->url_parts[0])), false, 404);\n#           exit();\n#       } else {\n#           return $section;\n#       }\n        return $section;\n    }\n    \n    private function buildSEFPath () {\n        // Apache\n        if (strpos($_SERVER['SERVER_SOFTWARE'],'Apache') !== false || strpos($_SERVER['SERVER_SOFTWARE'],'WebServerX') !== false) {\n            switch(php_sapi_name()) {\n                case \"cgi\":\n                    $this->sefPath = !empty($_SERVER['REQUEST_URI']) ? urldecode($_SERVER['REQUEST_URI']): null;\n                    break;\n                case \"cgi-fcgi\":\n                    if (isset($_SERVER['REDIRECT_URL']) && $_SERVER['REDIRECT_URL'] != PATH_RELATIVE.'index.php') {\n                        $this->sefPath = urldecode($_SERVER['REDIRECT_URL']);\n                    } elseif (!empty($_ENV['REQUEST_URI'])) {\n                        $this->sefPath = urldecode($_ENV['REQUEST_URI']);\n                    } else {\n                        $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n                    }\n                    break;\n                default:\n                    $this->sefPath = !empty($_SERVER['REDIRECT_URL']) ? urldecode($_SERVER['REDIRECT_URL']) : null;\n                    break;\n            }\n        // Lighty ???\n        } elseif (strpos(strtolower($_SERVER['SERVER_SOFTWARE']),'lighttpd') !== false) {\n            //FIXME, we still need a good lighttpd.conf rewrite config for sef_urls to work\n            if (isset($_SERVER['ORIG_PATH_INFO'])) {\n                $this->sefPath = urldecode($_SERVER['ORIG_PATH_INFO']);\n            } elseif (isset($_SERVER['REDIRECT_URI'])){\n                $this->sefPath = urldecode(substr($_SERVER['REDIRECT_URI'],9));\n            } elseif (isset($_SERVER['REQUEST_URI'])){\n                $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n            }\n        // Nginx ???\n        } elseif (strpos(strtolower($_SERVER['SERVER_SOFTWARE']),'nginx') !== false) {\n            $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n        } else {\n            $this->sefPath = urldecode($_SERVER['REQUEST_URI']);\n        }\n        \n        $this->sefPath = substr($this->sefPath,strlen(substr(PATH_RELATIVE,0,-1))); \n        if (strpos($this->sefPath,'/index.php') === 0) {\n            $this->sefPath = null;\n        }\n        \n\t\t//parse the ecommerce tracking code if present and include in the object\n        if(isset($_SERVER['argv']) && is_array($_SERVER['argv']))\n        {\n            foreach($_SERVER['argv'] as $set)\n            {\n                $s = explode(\"=\",$set);\n                if($s[0] == \"ectid\")\n                {\n                    $this->ectid = $s[1];    \n                }   \n            }            \n        }\n        if (substr($this->sefPath,-1) == \"/\") $this->sefPath = substr($this->sefPath,0,-1);\n        // sanitize it\n        $sefPath = explode('\">',$this->sefPath);  // remove any attempts to close the command\n        $this->sefPath = expString::escape(expString::sanitize($sefPath[0]));\n    }\n\n    public function getSection() {\n        global $db;\n\n        if (expTheme::inAction()) {\n            if (isset($_REQUEST['section'])) {\n                $section = $this->url_style==\"sef\" ? $this->getPageByName($_REQUEST['section'])->id : intval($_REQUEST['section']) ;\n            } else {\n                $section = (expSession::is_set('last_section') ? expSession::get('last_section') : SITE_DEFAULT_SECTION);\n            }\n        } else {\n            $section = (isset($_REQUEST['section']) ? intval($_REQUEST['section']) : SITE_DEFAULT_SECTION);\n        }\n        $testsection = $db->selectObject('section','id='.$section);\n        if (empty($testsection)) {\n            $section = SITE_DEFAULT_SECTION;\n        }\n        return $section;\n    }\n\n    public function getSectionObj($section) {\n        global $db;\n\n        if ($section == \"*\") {\n            $sectionObj = call_user_func(expModules::getModuleClassName($this->params['controller']) . \"::getSection\", $this->params);\n        } else {\n//            $sectionObj = $db->selectObject('section','id='. intval($section));\n            $sectionObj = new section(intval($section));\n        }\n//        $sectionObj = $db->selectObject('section','id='. intval($section));\n        if (!$sectionObj->canView()) {\n            define('AUTHORIZED_SECTION',0);\n        } else {\n            define('AUTHORIZED_SECTION',1);\n        }\n        if (!$sectionObj->isPublic()) {\n            define('PUBLIC_SECTION',0);\n        } else {\n            define('PUBLIC_SECTION',1);\n        }\n    \n        if (isset($_REQUEST['section'])) {\n            expSession::set('last_section', intval($_REQUEST['section']));\n        } elseif ($section == SITE_DEFAULT_SECTION) {\n            expSession::set('last_section', intval(SITE_DEFAULT_SECTION));\n        } else {\n            //expSession::unset('last_section');\n        }\n        return $sectionObj;\n    }\n    \n    public function getRouterMaps() {\n        $mapfile = BASE.'framework/core/router_maps.php';\n\t\tif (file_exists(BASE.'themes/'.DISPLAY_THEME.'/router_maps.php')) {\n\t\t\t$mapfile = BASE.'themes/'.DISPLAY_THEME.'/router_maps.php';\n        }\n\n        include_once($mapfile);\n        $this->maps = $maps;  // $maps is set by included $mapfile\n    }\n    \n    public function getTrackingId()\n    {        \n        if(isset($this->ectid)) return $this->ectid;\n        else return '';\n    }\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expString\n *\n * @package Subsystems\n * @subpackage Subsystems\n */\n/** @define \"BASE\" \"../../..\" */\n\nclass expString {\n\n    /**\n     * Routine to convert string to UTF\n     *\n     * @static\n     * @param string $string\n     * @return string\n     */\n\tstatic function convertUTF($string) {\n\t\treturn $string = str_replace('?', '', htmlspecialchars($string, ENT_IGNORE, 'UTF-8'));\n\t} \n\n    /**\n     * Routine to check if string is valid UTF string\n     *\n     * @static\n     * @param string $string\n     * @return bool\n     */\n\tstatic function validUTF($string) {\n\t\tif(!mb_check_encoding($string, 'UTF-8') OR !($string === mb_convert_encoding(mb_convert_encoding($string, 'UTF-32', 'UTF-8' ), 'UTF-8', 'UTF-32'))) {\n\t\t\treturn false;\n\t\t}\t\t\n\t\treturn true;\n\t}\n\n    /**\n     * Routine to strip unreadable characters from string - ascii 32 to 126\n     *\n     * @static\n     * @param string $string\n     * @return string\n     */\n\tstatic function onlyReadables($string) {\n        for ($i = 0, $iMax = strlen($string); $i < $iMax; $i++) {\n\t\t\t$chr = $string{$i};\n\t\t\t$ord = ord($chr);\n\t\t\tif ($ord<32 or $ord>126) {\n\t\t\t$chr = \"~\";\n\t\t\t$string{$i} = $chr;\n\t\t\t}\n\t\t}\n\t\treturn str_replace(\"~\", \"\", $string);\n\t}\n\n    /**\n     * Routine to\n     *\n     * @static\n     * @param string $str\n     * @param bool $unescape should the string also be unescaped?\n     * @return mixed|string\n     */\n\tstatic function parseAndTrim($str, $unescape=false) {\n        if (is_array($str)) {\n            $rst = array();\n            foreach ($str as $key=>$st) {\n                $rst[$key] = self::parseAndTrim($st, $unescape);\n            }\n            return $rst;\n        }\n\n        $str = str_replace(\"<br>\",\" \",$str);\n        $str = str_replace(\"</br>\",\" \",$str);\n        $str = str_replace(\"<br/>\",\" \",$str);\n        $str = str_replace(\"<br />\",\" \",$str);\n        $str = str_replace(\"\\r\\n\",\" \",$str);\n        $str = str_replace('\"',\"&quot;\",$str);\n        $str = str_replace(\"'\",\"&#39;\",$str);\n        $str = str_replace(\"\u2019\",\"&rsquo;\",$str);\n        $str = str_replace(\"\u2018\",\"&lsquo;\",$str);\n        $str = str_replace(\"\u00ae\",\"&#174;\",$str);\n        $str = str_replace(\"\u2013\",\"-\", $str);\n        $str = str_replace(\"\u2014\",\"&#151;\", $str);\n        $str = str_replace(\"\u201d\",\"&rdquo;\", $str);\n        $str = str_replace(\"\u201c\",\"&ldquo;\", $str);\n        $str = str_replace(\"\u00bc\",\"&#188;\",$str);\n        $str = str_replace(\"\u00bd\",\"&#189;\",$str);\n        $str = str_replace(\"\u00be\",\"&#190;\",$str);\n\t\t$str = str_replace(\"\u2122\",\"&trade;\", $str);\n\t\t$str = trim($str);\n\t\t\n        if ($unescape) {\n\t\t\t$str = stripcslashes($str);  \n\t\t} else {\n\t        $str = addslashes($str);\n        }\n\n        return $str;\n    }\n\n    /**\n     * Routine to convert string to an XML safe string\n     *\n     * @static\n     * @param string $str\n     * @return string\n     */\n\tstatic function convertXMLFeedSafeChar($str) {\n\t\t$str = str_replace(\"<br>\",\"\",$str);\n        $str = str_replace(\"</br>\",\"\",$str);\n        $str = str_replace(\"<br/>\",\"\",$str);\n        $str = str_replace(\"<br />\",\"\",$str);\n        $str = str_replace(\"&quot;\",'\"',$str);\n        $str = str_replace(\"&#39;\",\"'\",$str);\n        $str = str_replace(\"&rsquo;\",\"'\",$str);\n        $str = str_replace(\"&lsquo;\",\"'\",$str);        \n        $str = str_replace(\"&#174;\",\"\",$str);\n        $str = str_replace(\"\ufffd\",\"-\", $str);\n        $str = str_replace(\"\ufffd\",\"-\", $str); \n        $str = str_replace(\"\ufffd\", '\"', $str);\n        $str = str_replace(\"&rdquo;\",'\"', $str);\n        $str = str_replace(\"\ufffd\", '\"', $str);\n        $str = str_replace(\"&ldquo;\",'\"', $str);\n        $str = str_replace(\"\\r\\n\",\" \",$str); \n        $str = str_replace(\"\ufffd\",\" 1/4\",$str);\n        $str = str_replace(\"&#188;\",\" 1/4\", $str);\n        $str = str_replace(\"\ufffd\",\" 1/2\",$str);\n        $str = str_replace(\"&#189;\",\" 1/2\",$str);\n        $str = str_replace(\"\ufffd\",\" 3/4\",$str);\n        $str = str_replace(\"&#190;\",\" 3/4\",$str);\n        $str = str_replace(\"\ufffd\", \"(TM)\", $str);\n        $str = str_replace(\"&trade;\",\"(TM)\", $str);\n        $str = str_replace(\"&reg;\",\"(R)\", $str);\n        $str = str_replace(\"\ufffd\",\"(R)\",$str);        \n        $str = str_replace(\"&\",\"&amp;\",$str);      \n\t\t$str = str_replace(\">\",\"&gt;\",$str);      \t\t\n        return trim($str);\n\t}\n\n    /**\n     * Routine to convert any smart quotes into normal quotes\n     *\n     * @param string $str\n     * @return string\n     */\n    public static function convertSmartQuotes($str) {\n    \t$find[] = '\ufffd';  // left side double smart quote\n    \t$find[] = '\ufffd';  // right side double smart quote\n    \t$find[] = '\ufffd';  // left side single smart quote\n    \t$find[] = '\ufffd';  // right side single smart quote\n    \t$find[] = '\ufffd';  // elipsis\n    \t$find[] = '\ufffd';  // em dash\n    \t$find[] = '\ufffd';  // en dash\n\n        $replace[] = '\"';\n       \t$replace[] = '\"';\n       \t$replace[] = \"'\";\n       \t$replace[] = \"'\";\n       \t$replace[] = \"...\";\n       \t$replace[] = \"-\";\n       \t$replace[] = \"-\";\n\n        $find[] = '\u201c';  // left side double smart quote\n        $find[] = '\u201d';  // right side double smart quote\n        $find[] = '\u2018';  // left side single smart quote\n        $find[] = '\u2019';  // right side single smart quote\n        $find[] = '\u2026';  // ellipsis\n        $find[] = '\u2014';  // em dash\n        $find[] = '\u2013';  // en dash\n\n        $replace[] = '\"';\n        $replace[] = '\"';\n        $replace[] = \"'\";\n        $replace[] = \"'\";\n        $replace[] = \"...\";\n        $replace[] = \"-\";\n        $replace[] = \"-\";\n\n//        $find[] = chr(145);\n//        $find[] = chr(146);\n//        $find[] = chr(147);\n//        $find[] = chr(148);\n//        $find[] = chr(150);\n//        $find[] = chr(151);\n//        $find[] = chr(133);\n//        $find[] = chr(149);\n//        $find[] = chr(11);\n//\n//        $replace[] = \"'\";\n//        $replace[] = \"'\";\n//        $replace[] = \"\\\"\";\n//        $replace[] = \"\\\"\";\n//        $replace[] = \"-\";\n//        $replace[] = \"-\";\n//        $replace[] = \"...\";\n//        $replace[] = \"&bull;\";\n//        $replace[] = \"\\n\";\n\n    \treturn str_replace($find, $replace, $str);\n    }\n\n    /**\n     * Enhanced variation of strip_tags with 'invert' option to remove specific tags\n     *\n     * @param $text\n     * @param string $tags\n     * @param bool $invert\n     * @return mixed\n     */\n    public static function strip_tags_content($text, $tags = '', $invert = false)\n    {\n        preg_match_all('/<(.+?)[\\s]*\\/?[\\s]*>/si', trim($tags), $tags);\n        $tags = array_unique($tags[1]);\n\n        if (is_array($tags) AND count($tags) > 0) {\n            if ($invert == false) {\n                return preg_replace('@<(?!(?:' . implode('|', $tags) . ')\\b)(\\w+)\\b.*?>.*?</\\1>@si', '', $text);\n            } else {\n                return preg_replace('@<(' . implode('|', $tags) . ')\\b.*?>.*?</\\1>@si', '', $text);\n            }\n        } elseif ($invert == false) {\n            return preg_replace('@<(\\w+)\\b.*?>.*?</\\1>@si', '', $text);\n        }\n        return $text;\n    }\n\n    /**\\\n     * Replace any non-ascii character with its hex code with NO active db connection\n     */\n    public static function escape($value) {\n        global $db;\n\n        if ($db->havedb) {\n            return $db->escapeString($value);\n        }\n\n        $return = '';\n        for ($i = 0, $iMax = strlen($value); $i < $iMax; $i++) {\n            $char = $value[$i];\n            $ord = ord($char);\n            if($char !== \"'\" && $char !== \"\\\"\" && $char !== '\\\\' && $ord >= 32 && $ord <= 126)\n                $return .= $char;\n            else\n                $return .= '\\\\x' . dechex($ord);\n        }\n        return $return;\n    }\n\n    /**\n     * Summarize or short a long string\n     *\n     * @param        $string\n     * @param string $strtype\n     * @param string $type\n     *\n     * @return string\n     */\n    public static function summarize($string, $strtype='html', $type='para', $more='...') {\n        $sep = ($strtype == \"html\" ? array(\"</p>\", \"</div>\") : array(\"\\r\\n\", \"\\n\", \"\\r\"));\n        $origstring = $string;\n\n        switch ($type) {\n            case \"para\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&amp;#160;\",\" \",htmlentities(expString::convertSmartQuotes(strip_tags($string)),ENT_QUOTES));\n                return expString::convertSmartQuotes(strip_tags($string));\n                break;\n            case \"paralinks\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&#160;\",\" \",htmlspecialchars_decode(htmlentities(expString::convertSmartQuotes(strip_tags($string,'<a>')),ENT_QUOTES)));\n                return expString::convertSmartQuotes(strip_tags($string, '<a>'));\n                break;\n            case \"parapaged\":\n//               $s = '<div style=\"page-break-after: always;\"><span style=\"display: none;\">&nbsp;</span></div>';\n                $s = '<div style=\"page-break-after: always';\n                $para = explode($s, $string);\n                $string = $para[0];\n                return expString::convertSmartQuotes($string);\n                break;\n            case \"parahtml\":\n                foreach ($sep as $s) {\n                    $para = explode($s, $string);\n                    $string = $para[0];\n                }\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n                if (!empty($string)) {\n                    $isText = true;\n                    $ret = \"\";\n                    $i = 0;\n    //                    $currentChar = \"\";\n    //                    $lastSpacePosition = -1;\n    //                    $lastChar = \"\";\n                    $tagsArray = array();\n                    $currentTag = \"\";\n    //                    $tagLevel = 0;\n    //                    $noTagLength = strlen(strip_tags($string));\n\n                    // Parser loop\n                    for ($j = 0, $jMax = strlen($string); $j < $jMax; $j++) {\n\n                        $currentChar = substr($string, $j, 1);\n                        $ret .= $currentChar;\n\n                        // Lesser than event\n                        if ($currentChar == \"<\") $isText = false;\n\n                        // Character handler\n                        if ($isText) {\n\n                            // Memorize last space position\n                            if ($currentChar == \" \") {\n                                $lastSpacePosition = $j;\n                            } else {\n                                $lastChar = $currentChar;\n                            }\n\n                            $i++;\n                        } else {\n                            $currentTag .= $currentChar;\n                        }\n\n                        // Greater than event\n                        if ($currentChar == \">\") {\n                            $isText = true;\n\n                            // Opening tag handler\n                            if ((strpos($currentTag, \"<\") !== FALSE) &&\n                                (strpos($currentTag, \"/>\") === FALSE) &&\n                                (strpos($currentTag, \"</\") === FALSE)\n                            ) {\n\n                                // Tag has attribute(s)\n                                if (strpos($currentTag, \" \") !== FALSE) {\n                                    $currentTag = substr($currentTag, 1, strpos($currentTag, \" \") - 1);\n                                } else {\n                                    // Tag doesn't have attribute(s)\n                                    $currentTag = substr($currentTag, 1, -1);\n                                }\n\n                                array_push($tagsArray, $currentTag);\n\n                            } else if (strpos($currentTag, \"</\") !== FALSE) {\n                                array_pop($tagsArray);\n                            }\n\n                            $currentTag = \"\";\n                        }\n                    }\n                    // Cut HTML string at last space position\n                    //                if ($length < $noTagLength) {\n                    //                    if ($lastSpacePosition != -1) {\n                    //                        $ret = substr($string, 0, $lastSpacePosition);\n                    //                    } else {\n                    //                        $ret = substr($string, $j);\n                    //                    }\n                    //                }\n                    if (sizeof($tagsArray) != 0) {\n                        // Close broken XHTML elements\n                        while (sizeof($tagsArray) != 0) {\n                            if (sizeof($tagsArray) > 1) {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            } // You may add more tags here to put the link and added text before the closing tag\n                            elseif ($aTag == 'p' || 'div') {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            } else {\n                                $aTag = array_pop($tagsArray);\n                                $string .= \"</\" . $aTag . \">\";\n                            }\n                        }\n                    }\n                }\n                return expString::convertSmartQuotes($string);\n                break;\n            default:\n                $words = explode(\" \", strip_tags($string));\n                $string = implode(\" \", array_slice($words, 0, $type + 0));\n                if (strlen($string) < strlen($origstring)) {\n                    $string .= \" \" . $more;\n                }\n    //\t\t\treturn str_replace(\"&amp;#160;\",\" \",htmlentities(expString::convertSmartQuotes($string),ENT_QUOTES));\n                return expString::convertSmartQuotes($string);\n                break;\n        }\n    }\n\n    public static function parseAndTrimExport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n        //echo \"1<br>\"; eDebug($str);\n\n        $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#174;\", $str);\n        $str = str_replace(\"\ufffd\", \"-\", $str);\n        $str = str_replace(\"\ufffd\", \"&#151;\", $str);\n        $str = str_replace(\"\ufffd\", \"&rdquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&ldquo;\", $str);\n        $str = str_replace(\"\\r\\n\", \" \", $str);\n        $str = str_replace(\"\\t\", \" \", $str);\n        $str = str_replace(\",\", \"\\,\", $str);\n        $str = str_replace(\"\ufffd\", \"&#188;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#189;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#190;\", $str);\n\n        if (!$isHTML) {\n            $str = str_replace('\\\"', \"&quot;\", $str);\n            $str = str_replace('\"', \"&quot;\", $str);\n        } else {\n            $str = str_replace('\"', '\"\"', $str);\n        }\n\n        //$str = htmlspecialchars($str);\n        //$str = utf8_encode($str);\n        $str = trim(str_replace(\"\ufffd\", \"&trade;\", $str));\n        //echo \"2<br>\"; eDebug($str,die);\n        return $str;\n    }\n\n    public static function parseAndTrimImport($str, $isHTML = false) { //\ufffdDeath from above\ufffd? \ufffd\n        //echo \"1<br>\"; eDebug($str);\n        global $db;\n\n        $str = str_replace(\"\ufffd\", \"&rsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&lsquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#174;\", $str);\n        $str = str_replace(\"\ufffd\", \"-\", $str);\n        $str = str_replace(\"\ufffd\", \"&#151;\", $str);\n        $str = str_replace(\"\ufffd\", \"&rdquo;\", $str);\n        $str = str_replace(\"\ufffd\", \"&ldquo;\", $str);\n        $str = str_replace(\"\\r\\n\", \" \", $str);\n        $str = str_replace(\"\\,\", \",\", $str);\n        $str = str_replace('\"\"', '\"', $str); //do this no matter what...in case someone added a quote in a non HTML field\n        if (!$isHTML) {\n            //if HTML, then leave the single quotes alone, otheriwse replace w/ special Char\n            $str = str_replace('\"', \"&quot;\", $str);\n        }\n        $str = str_replace(\"\ufffd\", \"&#188;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#189;\", $str);\n        $str = str_replace(\"\ufffd\", \"&#190;\", $str);\n        //$str = htmlspecialchars($str);\n        //$str = utf8_encode($str);\n//        if (DB_ENGINE=='mysqli') {\n//\t        $str = @mysqli_real_escape_string($db->connection,trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n//        } elseif(DB_ENGINE=='mysql') {\n//            $str = @mysql_real_escape_string(trim(str_replace(\"\ufffd\", \"&trade;\", $str)),$db->connection);\n//        } else {\n//\t        $str = trim(str_replace(\"\ufffd\", \"&trade;\", $str));\n//        }\n        $str = @$db->escapeString($db->connection, trim(str_replace(\"\ufffd\", \"&trade;\", $str)));\n        //echo \"2<br>\"; eDebug($str,die);\n        return $str;\n    }\n\n    public static function outputField($val, $eof = ',', $isHTML = false) {\n        $newVal = self::parseAndTrimExport($val, $isHTML);\n        if ($newVal != '') return '\"' . $newVal . '\"' . $eof;\n        else return $eof;\n    }\n\n    public static function stripLineEndings($val) {\n        return preg_replace('/\\r\\n/', ' ', trim($val));\n    }\n\n    /**\n     * Scrub input string for possible security issues.\n     *\n     * @static\n     * @param $data string\n     * @return string\n     */\n    public static function sanitize(&$data) {\n//        return $data;\n\n        if (is_array($data)) {\n            $saved_params = array();\n            if (!empty($data['controller']) && $data['controller'] == 'snippet') {\n                $saved_params['body'] = $data['body'];  // store snippet body\n            }\n            foreach ($data as $var=>$val) {\n//                $data[$var] = self::sanitize($val);\n                $data[$var] = self::xss_clean($val);\n            }\n            if (!empty($saved_params)) {\n                $data = array_merge($data, $saved_params);  // add stored snippet body\n            }\n        } else {\n            if (empty($data)) {\n                return $data;\n            }\n\n            $data = self::xss_clean($data);\n\n            //fixme orig exp method\n//            if(0) {\n//                // remove whitespaces and tags\n////            $data = strip_tags(trim($data));\n//                // remove whitespaces and script tags\n//                $data = self::strip_tags_content(trim($data), '<script>', true);\n////            $data = self::strip_tags_content(trim($data), '<iframe>', true);\n//\n//                // apply stripslashes if magic_quotes_gpc is enabled\n//                if (get_magic_quotes_gpc()) {\n//                    $data = stripslashes($data);\n//                }\n//\n//                $data = self::escape($data);\n//\n//                // re-escape newlines\n//                $data = str_replace(array('\\r', '\\n'), array(\"\\r\", \"\\n\"), $data);\n//            }\n        }\n        return $data;\n    }\n\n    // xss_clean //\n\n    /**\n  \t * Character set\n  \t *\n  \t * Will be overridden by the constructor.\n  \t *\n  \t * @var\tstring\n  \t */\n  \tpublic static $charset = 'UTF-8';\n\n    /**\n   \t * XSS Hash\n   \t *\n   \t * Random Hash for protecting URLs.\n   \t *\n   \t * @var\tstring\n   \t */\n   \tprotected static $_xss_hash;\n\n    /**\n   \t * List of never allowed strings\n   \t *\n   \t * @var\tarray\n   \t */\n    protected static $_never_allowed_str =\tarray(\n   \t\t'document.cookie'\t=> '[removed]',\n   \t\t'document.write'\t=> '[removed]',\n   \t\t'.parentNode'\t\t=> '[removed]',\n   \t\t'.innerHTML'\t\t=> '[removed]',\n   \t\t'-moz-binding'\t\t=> '[removed]',\n   \t\t'<!--'\t\t\t\t=> '&lt;!--',\n   \t\t'-->'\t\t\t\t=> '--&gt;',\n   \t\t'<![CDATA['\t\t\t=> '&lt;![CDATA[',\n   \t\t'<comment>'\t\t\t=> '&lt;comment&gt;'\n   \t);\n\n   \t/**\n   \t * List of never allowed regex replacements\n   \t *\n   \t * @var\tarray\n   \t */\n    protected static $_never_allowed_regex = array(\n   \t\t'javascript\\s*:',\n   \t\t'(document|(document\\.)?window)\\.(location|on\\w*)',\n   \t\t'expression\\s*(\\(|&\\#40;)', // CSS and IE\n   \t\t'vbscript\\s*:', // IE, surprise!\n   \t\t'wscript\\s*:', // IE\n   \t\t'jscript\\s*:', // IE\n   \t\t'vbs\\s*:', // IE\n   \t\t'Redirect\\s+30\\d',\n   \t\t\"([\\\"'])?data\\s*:[^\\\\1]*?base64[^\\\\1]*?,[^\\\\1]*?\\\\1?\"\n   \t);\n\n    /**\n   \t * XSS Clean\n   \t *\n   \t * Sanitizes data so that Cross Site Scripting Hacks can be\n   \t * prevented.  This method does a fair amount of work but\n   \t * it is extremely thorough, designed to prevent even the\n   \t * most obscure XSS attempts.  Nothing is ever 100% foolproof,\n   \t * of course, but I haven't been able to get anything passed\n   \t * the filter.\n   \t *\n   \t * Note: Should only be used to deal with data upon submission.\n   \t *\t It's not something that should be used for general\n   \t *\t runtime processing.\n   \t *\n   \t * @link\thttp://channel.bitflux.ch/wiki/XSS_Prevention\n   \t * \t\tBased in part on some code and ideas from Bitflux.\n   \t *\n   \t * @link\thttp://ha.ckers.org/xss.html\n   \t * \t\tTo help develop this script I used this great list of\n   \t *\t\tvulnerabilities along with a few other hacks I've\n   \t *\t\tharvested from examining vulnerabilities in other programs.\n   \t *\n   \t * @param\tstring|string[]\t$str\t\tInput data\n   \t * @param \tbool\t\t$is_image\tWhether the input is an image\n   \t * @return\tstring\n   \t */\n   \tpublic static function xss_clean($str, $is_image = FALSE)\n   \t{\n   \t\t// Is the string an array?\n   \t\tif (is_array($str))\n   \t\t{\n   \t\t\twhile (list($key) = each($str))\n   \t\t\t{\n                if (preg_match('/^[a-zA-Z0-9_\\x7f-\\xff]*$/', $key)) {  // check for valid array name\n                    $str[$key] = self::xss_clean($str[$key]);\n                } else {\n                    return null;\n                }\n   \t\t\t}\n\n   \t\t\treturn $str;\n   \t\t}\n\n   \t\t// Remove Invisible Characters\n   \t\t$str = self::remove_invisible_characters($str);\n\n   \t\t/*\n   \t\t * URL Decode\n   \t\t *\n   \t\t * Just in case stuff like this is submitted:\n   \t\t *\n   \t\t * <a href=\"http://%77%77%77%2E%67%6F%6F%67%6C%65%2E%63%6F%6D\">Google</a>\n   \t\t *\n   \t\t * Note: Use rawurldecode() so it does not remove plus signs\n   \t\t */\n   \t\tdo\n   \t\t{\n   \t\t\t$str = rawurldecode($str);\n   \t\t}\n   \t\twhile (preg_match('/%[0-9a-f]{2,}/i', $str));\n\n   \t\t/*\n   \t\t * Convert character entities to ASCII\n   \t\t *\n   \t\t * This permits our tests below to work reliably.\n   \t\t * We only convert entities that are within tags since\n   \t\t * these are the ones that will pose security problems.\n   \t\t */\n   \t\t$str = preg_replace_callback(\"/[^a-z0-9>]+[a-z0-9]+=([\\'\\\"]).*?\\\\1/si\", array('self', '_convert_attribute'), $str);\n   \t\t$str = preg_replace_callback('/<\\w+.*/si', array('self', '_decode_entity'), $str);\n\n   \t\t// Remove Invisible Characters Again!\n   \t\t$str = self::remove_invisible_characters($str);\n\n   \t\t/*\n   \t\t * Convert all tabs to spaces\n   \t\t *\n   \t\t * This prevents strings like this: ja\tvascript\n   \t\t * NOTE: we deal with spaces between characters later.\n   \t\t * NOTE: preg_replace was found to be amazingly slow here on\n   \t\t * large blocks of data, so we use str_replace.\n   \t\t */\n   \t\t$str = str_replace(\"\\t\", ' ', $str);\n\n   \t\t// Capture converted string for later comparison\n   \t\t$converted_string = $str;\n\n   \t\t// Remove Strings that are never allowed\n   \t\t$str = self::_do_never_allowed($str);\n\n   \t\t/*\n   \t\t * Makes PHP tags safe\n   \t\t *\n   \t\t * Note: XML tags are inadvertently replaced too:\n   \t\t *\n   \t\t * <?xml\n   \t\t *\n   \t\t * But it doesn't seem to pose a problem.\n   \t\t */\n   \t\tif ($is_image === TRUE)\n   \t\t{\n   \t\t\t// Images have a tendency to have the PHP short opening and\n   \t\t\t// closing tags every so often so we skip those and only\n   \t\t\t// do the long opening tags.\n   \t\t\t$str = preg_replace('/<\\?(php)/i', '&lt;?\\\\1', $str);\n   \t\t}\n   \t\telse\n   \t\t{\n   \t\t\t$str = str_replace(array('<?', '?'.'>'), array('&lt;?', '?&gt;'), $str);\n   \t\t}\n\n   \t\t/*\n   \t\t * Compact any exploded words\n   \t\t *\n   \t\t * This corrects words like:  j a v a s c r i p t\n   \t\t * These words are compacted back to their correct state.\n   \t\t */\n   \t\t$words = array(\n   \t\t\t'javascript', 'expression', 'vbscript', 'jscript', 'wscript',\n   \t\t\t'vbs', 'script', 'base64', 'applet', 'alert', 'document',\n   \t\t\t'write', 'cookie', 'window', 'confirm', 'prompt', 'eval'\n   \t\t);\n\n   \t\tforeach ($words as $word)\n   \t\t{\n   \t\t\t$word = implode('\\s*', str_split($word)).'\\s*';\n\n   \t\t\t// We only want to do this when it is followed by a non-word character\n   \t\t\t// That way valid stuff like \"dealer to\" does not become \"dealerto\"\n   \t\t\t$str = preg_replace_callback('#('.substr($word, 0, -3).')(\\W)#is', array('self', '_compact_exploded_words'), $str);\n   \t\t}\n\n   \t\t/*\n   \t\t * Remove disallowed Javascript in links or img tags\n   \t\t * We used to do some version comparisons and use of stripos(),\n   \t\t * but it is dog slow compared to these simplified non-capturing\n   \t\t * preg_match(), especially if the pattern exists in the string\n   \t\t *\n   \t\t * Note: It was reported that not only space characters, but all in\n   \t\t * the following pattern can be parsed as separators between a tag name\n   \t\t * and its attributes: [\\d\\s\"\\'`;,\\/\\=\\(\\x00\\x0B\\x09\\x0C]\n   \t\t * ... however, remove_invisible_characters() above already strips the\n   \t\t * hex-encoded ones, so we'll skip them below.\n   \t\t */\n   \t\tdo\n   \t\t{\n   \t\t\t$original = $str;\n\n   \t\t\tif (preg_match('/<a/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace_callback('#<a[^a-z0-9>]+([^>]*?)(?:>|$)#si', array('self', '_js_link_removal'), $str);\n   \t\t\t}\n\n   \t\t\tif (preg_match('/<img/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace_callback('#<img[^a-z0-9]+([^>]*?)(?:\\s?/?>|$)#si', array('self', '_js_img_removal'), $str);\n   \t\t\t}\n\n   \t\t\tif (preg_match('/script|xss/i', $str))\n   \t\t\t{\n   \t\t\t\t$str = preg_replace('#</*(?:script|xss).*?>#si', '[removed]', $str);\n   \t\t\t}\n   \t\t}\n   \t\twhile ($original !== $str);\n   \t\tunset($original);\n\n   \t\t/*\n   \t\t * Sanitize naughty HTML elements\n   \t\t *\n   \t\t * If a tag containing any of the words in the list\n   \t\t * below is found, the tag gets converted to entities.\n   \t\t *\n   \t\t * So this: <blink>\n   \t\t * Becomes: &lt;blink&gt;\n   \t\t */\n   \t\t$pattern = '#'\n   \t\t\t.'<((?<slash>/*\\s*)(?<tagName>[a-z0-9]+)(?=[^a-z0-9]|$)' // tag start and name, followed by a non-tag character\n   \t\t\t.'[^\\s\\042\\047a-z0-9>/=]*' // a valid attribute character immediately after the tag would count as a separator\n   \t\t\t// optional attributes\n   \t\t\t.'(?<attributes>(?:[\\s\\042\\047/=]*' // non-attribute characters, excluding > (tag close) for obvious reasons\n   \t\t\t.'[^\\s\\042\\047>/=]+' // attribute characters\n   \t\t\t// optional attribute-value\n   \t\t\t\t.'(?:\\s*=' // attribute-value separator\n   \t\t\t\t\t.'(?:[^\\s\\042\\047=><`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=><`]*))' // single, double or non-quoted value\n   \t\t\t\t.')?' // end optional attribute-value group\n   \t\t\t.')*)' // end optional attributes group\n   \t\t\t.'[^>]*)(?<closeTag>\\>)?#isS';\n\n   \t\t// Note: It would be nice to optimize this for speed, BUT\n   \t\t//       only matching the naughty elements here results in\n   \t\t//       false positives and in turn - vulnerabilities!\n   \t\tdo\n   \t\t{\n   \t\t\t$old_str = $str;\n   \t\t\t$str = preg_replace_callback($pattern, array('self', '_sanitize_naughty_html'), $str);\n   \t\t}\n   \t\twhile ($old_str !== $str);\n   \t\tunset($old_str);\n\n   \t\t/*\n   \t\t * Sanitize naughty scripting elements\n   \t\t *\n   \t\t * Similar to above, only instead of looking for\n   \t\t * tags it looks for PHP and JavaScript commands\n   \t\t * that are disallowed. Rather than removing the\n   \t\t * code, it simply converts the parenthesis to entities\n   \t\t * rendering the code un-executable.\n   \t\t *\n   \t\t * For example:\teval('some code')\n   \t\t * Becomes:\teval&#40;'some code'&#41;\n   \t\t */\n   \t\t$str = preg_replace(\n   \t\t\t'#(alert|prompt|confirm|cmd|passthru|eval|exec|expression|system|fopen|fsockopen|file|file_get_contents|readfile|unlink)(\\s*)\\((.*?)\\)#si',\n   \t\t\t'\\\\1\\\\2&#40;\\\\3&#41;',\n   \t\t\t$str\n   \t\t);\n\n   \t\t// Final clean up\n   \t\t// This adds a bit of extra precaution in case\n   \t\t// something got through the above filters\n   \t\t$str = self::_do_never_allowed($str);\n\n   \t\t/*\n   \t\t * Images are Handled in a Special Way\n   \t\t * - Essentially, we want to know that after all of the character\n   \t\t * conversion is done whether any unwanted, likely XSS, code was found.\n   \t\t * If not, we return TRUE, as the image is clean.\n   \t\t * However, if the string post-conversion does not matched the\n   \t\t * string post-removal of XSS, then it fails, as there was unwanted XSS\n   \t\t * code found and removed/changed during processing.\n   \t\t */\n   \t\tif ($is_image === TRUE)\n   \t\t{\n   \t\t\treturn ($str === $converted_string);\n   \t\t}\n\n   \t\treturn $str;\n   \t}\n\n    /**\n   \t * Do Never Allowed\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param \tstring\n   \t * @return \tstring\n   \t */\n   \tprotected static function _do_never_allowed($str)\n   \t{\n   \t\t$str = str_replace(array_keys(self::$_never_allowed_str), self::$_never_allowed_str, $str);\n\n   \t\tforeach (self::$_never_allowed_regex as $regex)\n   \t\t{\n   \t\t\t$str = preg_replace('#'.$regex.'#is', '[removed]', $str);\n   \t\t}\n\n   \t\treturn $str;\n   \t}\n\n\t/**\n\t * Remove Invisible Characters\n\t *\n\t * This prevents sandwiching null characters\n\t * between ascii characters, like Java\\0script.\n\t *\n\t * @param\tstring\n\t * @param\tbool\n\t * @return\tstring\n\t */\n\tpublic static function remove_invisible_characters($str, $url_encoded = TRUE)\n\t{\n\t\t$non_displayables = array();\n\n\t\t// every control character except newline (dec 10),\n\t\t// carriage return (dec 13) and horizontal tab (dec 09)\n\t\tif ($url_encoded)\n\t\t{\n\t\t\t$non_displayables[] = '/%0[0-8bcef]/';\t// url encoded 00-08, 11, 12, 14, 15\n\t\t\t$non_displayables[] = '/%1[0-9a-f]/';\t// url encoded 16-31\n\t\t}\n\n\t\t$non_displayables[] = '/[\\x00-\\x08\\x0B\\x0C\\x0E-\\x1F\\x7F]+/S';\t// 00-08, 11, 12, 14-31, 127\n\n\t\tdo\n\t\t{\n\t\t\t$str = preg_replace($non_displayables, '', $str, -1, $count);\n\t\t}\n\t\twhile ($count);\n\n\t\treturn $str;\n\t}\n\n    /**\n   \t * HTML Entity Decode Callback\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _decode_entity($match)\n   \t{\n   \t\t// Protect GET variables in URLs\n   \t\t// 901119URL5918AMP18930PROTECT8198\n   \t\t$match = preg_replace('|\\&([a-z\\_0-9\\-]+)\\=([a-z\\_0-9\\-/]+)|i', self::xss_hash().'\\\\1=\\\\2', $match[0]);\n\n   \t\t// Decode, then un-protect URL GET vars\n   \t\treturn str_replace(\n            self::xss_hash(),\n   \t\t\t'&',\n            self::entity_decode($match, self::$charset)\n   \t\t);\n   \t}\n\n    /**\n   \t * XSS Hash\n   \t *\n   \t * Generates the XSS hash if needed and returns it.\n   \t *\n   \t * @see\t\tCI_Security::$_xss_hash\n   \t * @return\tstring\tXSS hash\n   \t */\n   \tpublic static function xss_hash()\n   \t{\n   \t\tif (self::$_xss_hash === NULL)\n   \t\t{\n   \t\t\t$rand = self::get_random_bytes(16);\n            self::$_xss_hash = ($rand === FALSE)\n   \t\t\t\t? md5(uniqid(mt_rand(), TRUE))\n   \t\t\t\t: bin2hex($rand);\n   \t\t}\n\n   \t\treturn self::$_xss_hash;\n   \t}\n\n    /**\n   \t * HTML Entities Decode\n   \t *\n   \t * A replacement for html_entity_decode()\n   \t *\n   \t * The reason we are not using html_entity_decode() by itself is because\n   \t * while it is not technically correct to leave out the semicolon\n   \t * at the end of an entity most browsers will still interpret the entity\n   \t * correctly. html_entity_decode() does not convert entities without\n   \t * semicolons, so we are left with our own little solution here. Bummer.\n   \t *\n   \t * @link\thttp://php.net/html-entity-decode\n   \t *\n   \t * @param\tstring\t$str\t\tInput\n   \t * @param\tstring\t$charset\tCharacter set\n   \t * @return\tstring\n   \t */\n   \tpublic static function entity_decode($str, $charset = NULL)\n   \t{\n   \t\tif (strpos($str, '&') === FALSE)\n   \t\t{\n   \t\t\treturn $str;\n   \t\t}\n\n   \t\tstatic $_entities;\n\n   \t\tisset($charset) OR $charset = self::$charset;\n   \t\t$flag = expCore::is_php('5.4')\n   \t\t\t? ENT_COMPAT | ENT_HTML5\n   \t\t\t: ENT_COMPAT;\n\n   \t\tdo\n   \t\t{\n   \t\t\t$str_compare = $str;\n\n   \t\t\t// Decode standard entities, avoiding false positives\n   \t\t\tif (preg_match_all('/&[a-z]{2,}(?![a-z;])/i', $str, $matches))\n   \t\t\t{\n   \t\t\t\tif ( ! isset($_entities))\n   \t\t\t\t{\n   \t\t\t\t\t$_entities = array_map(\n   \t\t\t\t\t\t'strtolower',\n                        expCore::is_php('5.3.4')\n   \t\t\t\t\t\t\t? get_html_translation_table(HTML_ENTITIES, $flag, $charset)\n   \t\t\t\t\t\t\t: get_html_translation_table(HTML_ENTITIES, $flag)\n   \t\t\t\t\t);\n\n   \t\t\t\t\t// If we're not on PHP 5.4+, add the possibly dangerous HTML 5\n   \t\t\t\t\t// entities to the array manually\n   \t\t\t\t\tif ($flag === ENT_COMPAT)\n   \t\t\t\t\t{\n   \t\t\t\t\t\t$_entities[':'] = '&colon;';\n   \t\t\t\t\t\t$_entities['('] = '&lpar;';\n   \t\t\t\t\t\t$_entities[')'] = '&rpar;';\n   \t\t\t\t\t\t$_entities[\"\\n\"] = '&newline;';\n   \t\t\t\t\t\t$_entities[\"\\t\"] = '&tab;';\n   \t\t\t\t\t}\n   \t\t\t\t}\n\n   \t\t\t\t$replace = array();\n   \t\t\t\t$matches = array_unique(array_map('strtolower', $matches[0]));\n   \t\t\t\tforeach ($matches as &$match)\n   \t\t\t\t{\n   \t\t\t\t\tif (($char = array_search($match.';', $_entities, TRUE)) !== FALSE)\n   \t\t\t\t\t{\n   \t\t\t\t\t\t$replace[$match] = $char;\n   \t\t\t\t\t}\n   \t\t\t\t}\n\n   \t\t\t\t$str = str_ireplace(array_keys($replace), array_values($replace), $str);\n   \t\t\t}\n\n   \t\t\t// Decode numeric & UTF16 two byte entities\n   \t\t\t$str = html_entity_decode(\n   \t\t\t\tpreg_replace('/(&#(?:x0*[0-9a-f]{2,5}(?![0-9a-f;])|(?:0*\\d{2,4}(?![0-9;]))))/iS', '$1;', $str),\n   \t\t\t\t$flag,\n   \t\t\t\t$charset\n   \t\t\t);\n   \t\t}\n   \t\twhile ($str_compare !== $str);\n   \t\treturn $str;\n   \t}\n\n    /**\n   \t * Get random bytes\n   \t *\n   \t * @param\tint\t$length\tOutput length\n   \t * @return\tstring\n   \t */\n   \tpublic static function get_random_bytes($length)\n   \t{\n   \t\tif (empty($length) OR ! ctype_digit((string) $length))\n   \t\t{\n   \t\t\treturn FALSE;\n   \t\t}\n\n   \t\t// Unfortunately, none of the following PRNGs is guaranteed to exist ...\n   \t\tif (defined('MCRYPT_DEV_URANDOM') && ($output = mcrypt_create_iv($length, MCRYPT_DEV_URANDOM)) !== FALSE)\n   \t\t{\n   \t\t\treturn $output;\n   \t\t}\n\n\n   \t\tif (is_readable('/dev/urandom') && ($fp = fopen('/dev/urandom', 'rb')) !== FALSE)\n   \t\t{\n   \t\t\t// Try not to waste entropy ...\n            expCore::is_php('5.4') && stream_set_chunk_size($fp, $length);\n   \t\t\t$output = fread($fp, $length);\n   \t\t\tfclose($fp);\n   \t\t\tif ($output !== FALSE)\n   \t\t\t{\n   \t\t\t\treturn $output;\n   \t\t\t}\n   \t\t}\n\n   \t\tif (function_exists('openssl_random_pseudo_bytes'))\n   \t\t{\n   \t\t\treturn openssl_random_pseudo_bytes($length);\n   \t\t}\n\n   \t\treturn FALSE;\n   \t}\n\n    /**\n   \t * Attribute Conversion\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _convert_attribute($match)\n   \t{\n   \t\treturn str_replace(array('>', '<', '\\\\'), array('&gt;', '&lt;', '\\\\\\\\'), $match[0]);\n   \t}\n\n    /**\n   \t * Compact Exploded Words\n   \t *\n   \t * Callback method for xss_clean() to remove whitespace from\n   \t * things like 'j a v a s c r i p t'.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$matches\n   \t * @return\tstring\n   \t */\n   \tprotected static function _compact_exploded_words($matches)\n   \t{\n   \t\treturn preg_replace('/\\s+/s', '', $matches[1]).$matches[2];\n   \t}\n\n    /**\n   \t * JS Link Removal\n   \t *\n   \t * Callback method for xss_clean() to sanitize links.\n   \t *\n   \t * This limits the PCRE backtracks, making it more performance friendly\n   \t * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in\n   \t * PHP 5.2+ on link-heavy strings.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _js_link_removal($match)\n   \t{\n   \t\treturn str_replace(\n   \t\t\t$match[1],\n   \t\t\tpreg_replace(\n   \t\t\t\t'#href=.*?(?:(?:alert|prompt|confirm)(?:\\(|&\\#40;)|javascript:|livescript:|mocha:|charset=|window\\.|document\\.|\\.cookie|<script|<xss|data\\s*:)#si',\n   \t\t\t\t'',\n   \t\t\t\tself::_filter_attributes($match[1])\n   \t\t\t),\n   \t\t\t$match[0]\n   \t\t);\n   \t}\n\n    /**\n   \t * JS Image Removal\n   \t *\n   \t * Callback method for xss_clean() to sanitize image tags.\n   \t *\n   \t * This limits the PCRE backtracks, making it more performance friendly\n   \t * and prevents PREG_BACKTRACK_LIMIT_ERROR from being triggered in\n   \t * PHP 5.2+ on image tag heavy strings.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$match\n   \t * @return\tstring\n   \t */\n   \tprotected static function _js_img_removal($match)\n   \t{\n   \t\treturn str_replace(\n   \t\t\t$match[1],\n   \t\t\tpreg_replace(\n   \t\t\t\t'#src=.*?(?:(?:alert|prompt|confirm|eval)(?:\\(|&\\#40;)|javascript:|livescript:|mocha:|charset=|window\\.|document\\.|\\.cookie|<script|<xss|base64\\s*,)#si',\n   \t\t\t\t'',\n   \t\t\t\tself::_filter_attributes($match[1])\n   \t\t\t),\n   \t\t\t$match[0]\n   \t\t);\n   \t}\n\n    /**\n   \t * Filter Attributes\n   \t *\n   \t * Filters tag attributes for consistency and safety.\n   \t *\n   \t * @used-by\tCI_Security::_js_img_removal()\n   \t * @used-by\tCI_Security::_js_link_removal()\n   \t * @param\tstring\t$str\n   \t * @return\tstring\n   \t */\n   \tprotected static function _filter_attributes($str)\n   \t{\n   \t\t$out = '';\n   \t\tif (preg_match_all('#\\s*[a-z\\-]+\\s*=\\s*(\\042|\\047)([^\\\\1]*?)\\\\1#is', $str, $matches))\n   \t\t{\n   \t\t\tforeach ($matches[0] as $match)\n   \t\t\t{\n   \t\t\t\t$out .= preg_replace('#/\\*.*?\\*/#s', '', $match);\n   \t\t\t}\n   \t\t}\n\n   \t\treturn $out;\n   \t}\n\n    /**\n   \t * Sanitize Naughty HTML\n   \t *\n   \t * Callback method for xss_clean() to remove naughty HTML elements.\n   \t *\n   \t * @used-by\tCI_Security::xss_clean()\n   \t * @param\tarray\t$matches\n   \t * @return\tstring\n   \t */\n   \tprotected static function _sanitize_naughty_html($matches)\n   \t{\n   \t\tstatic $naughty_tags    = array(\n   \t\t\t'alert', 'prompt', 'confirm', 'applet', 'audio', 'basefont', 'base', 'behavior', 'bgsound',\n   \t\t\t'blink', 'body', 'embed', 'expression', 'form', 'frameset', 'frame', 'head', 'html', 'ilayer',\n   \t\t\t'input', 'button', 'select', 'isindex', 'layer', 'link', 'meta', 'keygen', 'object',\n   \t\t\t'plaintext', 'script', 'textarea', 'title', 'math', 'video', 'svg', 'xml', 'xss'\n            //,'style', 'iframe'\n   \t\t);\n\n   \t\tstatic $evil_attributes = array(\n   \t\t\t'on\\w+', 'xmlns', 'formaction', 'form', 'xlink:href', 'FSCommand', 'seekSegmentTime'\n            //, 'style'\n   \t\t);\n\n   \t\t// First, escape unclosed tags\n   \t\tif (empty($matches['closeTag']))\n   \t\t{\n   \t\t\treturn '&lt;'.$matches[1];\n   \t\t}\n   \t\t// Is the element that we caught naughty? If so, escape it\n   \t\telseif (in_array(strtolower($matches['tagName']), $naughty_tags, TRUE))\n   \t\t{\n   \t\t\treturn '&lt;'.$matches[1].'&gt;';\n   \t\t}\n   \t\t// For other tags, see if their attributes are \"evil\" and strip those\n   \t\telseif (isset($matches['attributes']))\n   \t\t{\n   \t\t\t// We'll store the already fitlered attributes here\n   \t\t\t$attributes = array();\n\n   \t\t\t// Attribute-catching pattern\n   \t\t\t$attributes_pattern = '#'\n   \t\t\t\t.'(?<name>[^\\s\\042\\047>/=]+)' // attribute characters\n   \t\t\t\t// optional attribute-value\n   \t\t\t\t.'(?:\\s*=(?<value>[^\\s\\042\\047=><`]+|\\s*\\042[^\\042]*\\042|\\s*\\047[^\\047]*\\047|\\s*(?U:[^\\s\\042\\047=><`]*)))' // attribute-value separator\n   \t\t\t\t.'#i';\n\n   \t\t\t// Blacklist pattern for evil attribute names\n   \t\t\t$is_evil_pattern = '#^('.implode('|', $evil_attributes).')$#i';\n\n   \t\t\t// Each iteration filters a single attribute\n   \t\t\tdo\n   \t\t\t{\n   \t\t\t\t// Strip any non-alpha characters that may preceed an attribute.\n   \t\t\t\t// Browsers often parse these incorrectly and that has been a\n   \t\t\t\t// of numerous XSS issues we've had.\n   \t\t\t\t$matches['attributes'] = preg_replace('#^[^a-z]+#i', '', $matches['attributes']);\n\n   \t\t\t\tif ( ! preg_match($attributes_pattern, $matches['attributes'], $attribute, PREG_OFFSET_CAPTURE))\n   \t\t\t\t{\n   \t\t\t\t\t// No (valid) attribute found? Discard everything else inside the tag\n   \t\t\t\t\tbreak;\n   \t\t\t\t}\n\n   \t\t\t\tif (\n   \t\t\t\t\t// Is it indeed an \"evil\" attribute?\n   \t\t\t\t\tpreg_match($is_evil_pattern, $attribute['name'][0])\n   \t\t\t\t\t// Or does it have an equals sign, but no value and not quoted? Strip that too!\n   \t\t\t\t\tOR (trim($attribute['value'][0]) === '')\n   \t\t\t\t)\n   \t\t\t\t{\n   \t\t\t\t\t$attributes[] = 'xss=removed';\n   \t\t\t\t}\n   \t\t\t\telse\n   \t\t\t\t{\n   \t\t\t\t\t$attributes[] = $attribute[0][0];\n   \t\t\t\t}\n\n   \t\t\t\t$matches['attributes'] = substr($matches['attributes'], $attribute[0][1] + strlen($attribute[0][0]));\n   \t\t\t}\n   \t\t\twhile ($matches['attributes'] !== '');\n\n   \t\t\t$attributes = empty($attributes)\n   \t\t\t\t? ''\n   \t\t\t\t: ' '.implode(' ', $attributes);\n   \t\t\treturn '<'.$matches['slash'].$matches['tagName'].$attributes.'>';\n   \t\t}\n\n   \t\treturn $matches[0];\n   \t}\n\n}\n\n?>", "<?php\n##################################################\n#\n# Copyright (c) 2004-2016 OIC Group, Inc.\n#\n# This file is part of Exponent\n#\n# Exponent is free software; you can redistribute\n# it and/or modify it under the terms of the GNU\n# General Public License as published by the Free\n# Software Foundation; either version 2 of the\n# License, or (at your option) any later version.\n#\n# GPL: http://www.gnu.org/licenses/gpl.txt\n#\n##################################################\n\n/**\n * This is the class expTheme\n *\n * @package    Subsystems\n * @subpackage Subsystems\n */\n\n/** @define \"BASE\" \"../../..\" */\nclass expTheme\n{\n\n    public static function initialize()\n    {\n        global $auto_dirs2;\n\n        // Initialize the theme subsystem 1.0 compatibility layer if requested\n\t\tif (defined('OLD_THEME_COMPATIBLE') && OLD_THEME_COMPATIBLE)\n            require_once(BASE.'framework/core/compat/theme.php');\n\n        if (!defined('DISPLAY_THEME')) {\n            /* exdoc\n             * The directory and class name of the current active theme.  This may be different\n             * than the configured theme (DISPLAY_THEME_REAL) due to previewing.\n             */\n            define('DISPLAY_THEME', DISPLAY_THEME_REAL);\n        }\n\n        if (!defined('THEME_ABSOLUTE')) {\n            /* exdoc\n             * The absolute path to the current active theme's files.  This is similar to the BASE constant\n             */\n            define('THEME_ABSOLUTE', BASE . 'themes/' . DISPLAY_THEME . '/'); // This is the recommended way\n        }\n\n        if (!defined('THEME_RELATIVE')) {\n            /* exdoc\n             * The relative web path to the current active theme.  This is similar to the PATH_RELATIVE constant.\n             */\n            define('THEME_RELATIVE', PATH_RELATIVE . 'themes/' . DISPLAY_THEME . '/');\n        }\n        if (!defined('THEME_STYLE')) {\n            /* exdoc\n             * The name of the current active theme style.\n             */\n            define('THEME_STYLE', THEME_STYLE_REAL);\n        }\n        if (THEME_STYLE != '' && file_exists(BASE . 'themes/' . DISPLAY_THEME . '/config_' . THEME_STYLE . '.php')) {\n            @include_once(BASE . 'themes/' . DISPLAY_THEME . '/config_' . THEME_STYLE . '.php');\n        } elseif (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/config.php')) {\n            @include_once(BASE . 'themes/' . DISPLAY_THEME . '/config.php');\n        }\n        if (!defined('BTN_SIZE')) {\n            define('BTN_SIZE', 'medium');\n        } // Awesome Button theme\n        if (!defined('BTN_COLOR')) {\n            define('BTN_COLOR', 'black');\n        } // Awesome Button theme\n        if (!defined('SWATCH')) {\n            define('SWATCH', \"''\");\n        } // Twitter Bootstrap theme\n\n        // add our theme folder into autoload to prioritize custom (theme) modules\n        array_unshift($auto_dirs2, BASE . 'themes/' . DISPLAY_THEME . '/modules');\n    }\n\n    public static function head($config = array())\n    {\n        echo self::headerInfo($config);\n        self::advertiseRSS();\n    }\n\n    public static function headerInfo($config)\n    {\n        global $sectionObj, $validateTheme, $head_config, $auto_dirs, $less_vars, $framework;\n\n        $validateTheme['headerinfo'] = true;\n        // end checking for headerInfo\n\n        // globalize header configuration\n        $head_config = $config;\n\n        // set theme framework type\n        $framework = !empty($head_config['framework']) ? $head_config['framework'] : '';\n        if (empty($framework)) {\n            if (NEWUI) {\n                $framework = 'newui';\n            } else {\n                $framework = 'yui';  // yui is the 2.x default framework\n            }\n        }\n        expSession::set('framework', $framework);\n\n        // set the global less variables from the head config\n        if (!empty($config['lessvars'])) {\n            $less_vars = $config['lessvars'];\n        } else {\n            $less_vars = array();\n        }\n\n        // check to see if we're in XHTML or HTML mode\n        if (isset($config['xhtml']) && $config['xhtml'] == true) {\n            define('XHTML', 1);\n            define('XHTML_CLOSING', \"/\"); //default\n        } else {\n            define('XHTML', 0);\n            define('XHTML_CLOSING', \"\");\n        }\n\n        // load primer, lessprimer, link (css) and lesscss & normalize CSS files\n        if (!empty($config['css_primer']) || !empty($config['lessprimer']) || !empty($config['link']) || !empty($config['lesscss']) || !empty($config['normalize'])) {\n            expCSS::pushToHead($config);\n        };\n\n        // default loading of primer CSS files to true if not set\n        if (empty($config['css_primer']) && empty($config['lessprimer'])) {\n            $head_config = array('css_primer' => true) + $head_config;\n        }\n\n        // parse & load core css files\n        if (isset($config['css_core'])) {\n            if (is_array($config['css_core'])) {\n                $corecss = implode(\",\", $config['css_core']);\n                expCSS::pushToHead(\n                    array(\n                        \"corecss\" => $corecss\n                    )\n                );\n            }\n        } else {\n            $head_config['css_core'] = false;\n        };\n\n        // default loading of view based CSS inclusion is true if not set\n        if (!empty($config['css_links']) || !isset($config['css_links'])) {\n            $head_config['css_links'] = true;\n        }\n\n        // default theme css collecting is true if not set\n        if (!empty($config['css_theme']) || !isset($config['css_theme'])) {\n            $head_config['css_theme'] = true;\n        }\n\n        if (empty($sectionObj)) {\n            return false;\n        }\n\n        // set up controls search order based on framework\n        if (empty($head_config['framework'])) {\n            $head_config['framework'] = '';\n        }\n        if (bs() || $framework == 'jquery') {\n            array_unshift(\n                $auto_dirs,\n                BASE . 'framework/core/forms/controls/jquery'\n            );\n        }\n        if (bs(true)) {\n            array_unshift(\n                $auto_dirs,\n                BASE . 'framework/core/forms/controls/bootstrap'\n            );\n        }\n        if (bs3(true)) {\n            array_unshift(\n                $auto_dirs,\n                BASE . 'framework/core/forms/controls/bootstrap3'\n            );\n        }\n        if (newui()) {\n            expCSS::pushToHead(array(\n                \"lessprimer\"=>\"external/bootstrap3/less/newui.less\",\n//                \"lessvars\"=>array(\n//                    'swatch'=>'cerulean',  // newui uses this swatch\n//                    'themepath'=>'cerulean',  // hack to prevent crash\n//                ),\n            ));\n            if (!defined(\"BTN_SIZE\")) define(\"BTN_SIZE\", 'small');\n            array_unshift($auto_dirs, BASE . 'framework/core/forms/controls/newui');\n        }\n        array_unshift($auto_dirs, BASE . 'themes/' . DISPLAY_THEME . '/controls');\n\n//        if (!expSession::is_set('framework') || expSession::get(\n//                'framework'\n//            ) != $head_config['framework']\n//        ) {\n//            expSession::set('framework', $head_config['framework']);\n//        }\n        // mark the theme framework\n\n        $metainfo = self::pageMetaInfo();\n\n        // default to showing all meta tags unless specifically set to false\n        if (!isset($config['meta']['content_type'])) {\n            $config['meta']['content_type'] = true;\n        }\n        if (!isset($config['meta']['content_language'])) {\n            $config['meta']['content_language'] = true;\n        }\n        if (!isset($config['meta']['generator'])) {\n            $config['meta']['generator'] = true;\n        }\n        if (!isset($config['meta']['keywords'])) {\n            $config['meta']['keywords'] = true;\n        }\n        if (!isset($config['meta']['description'])) {\n            $config['meta']['description'] = true;\n        }\n        if (!isset($config['meta']['canonical'])) {\n            $config['meta']['canonical'] = true;\n        }\n        if (!isset($config['meta']['rich'])) {\n            $config['meta']['rich'] = true;\n        }\n        if (!isset($config['meta']['fb'])) {\n            $config['meta']['fb'] = true;\n        }\n        if (!isset($config['meta']['tw'])) {\n            $config['meta']['tw'] = true;\n        }\n        if (!isset($config['meta']['viewport'])) {\n            $config['meta']['viewport'] = true;\n        }\n        if (!isset($config['meta']['ie_compat'])) {\n            $config['meta']['ie_compat'] = true;\n        }\n\n        $str = '<title>' . $metainfo['title'] . \"</title>\\n\";\n        if ($config['meta']['content_type']) {\n            $str .= \"\\t\" . '<meta http-equiv=\"Content-Type\" content=\"text/html; charset=' . LANG_CHARSET . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        $locale = strtolower(str_replace('_', '-', LOCALE));\n        if ($config['meta']['content_language']) {\n            $str .= \"\\t\" . '<meta content=\"' . $locale . '\" http-equiv=\"Content-Language\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['generator']) {\n            $str .= \"\\t\" . '<meta name=\"Generator\" content=\"Exponent Content Management System - v' . expVersion::getVersion(\n                    true\n                ) . self::getThemeDetails() . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['keywords']) {\n            $str .= \"\\t\" . '<meta name=\"Keywords\" content=\"' . $metainfo['keywords'] . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['description']) {\n            $str .= \"\\t\" . '<meta name=\"Description\" content=\"' . $metainfo['description'] . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['canonical'] && !empty($metainfo['canonical'])) {\n            $str .= \"\\t\" . '<link rel=\"canonical\" href=\"' . $metainfo['canonical'] . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if ($config['meta']['rich'] && !empty($metainfo['rich'])) {\n            $str .= \"\\t\" . $metainfo['rich'] . \"\\n\";\n        }\n        if ($config['meta']['fb'] && !empty($metainfo['fb'])) {\n            foreach ($metainfo['fb'] as $key => $value) {\n                if (!empty($value)) {\n                    $str .= \"\\t\" . '<meta property=\"og:' . $key . '\" content=\"' . $value . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n                }\n            }\n        }\n        if ($config['meta']['tw'] && !empty($metainfo['tw'])) {\n            foreach ($metainfo['tw'] as $key => $value) {\n                if (!empty($value)) {\n                    $str .= \"\\t\" . '<meta name=\"twitter:' . $key . '\" content=\"' . $value . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n                }\n            }\n        }\n\n        if ($metainfo['noindex'] || $metainfo['nofollow']) {\n            $str .= \"\\t\" . '<meta name=\"robots\" content=\"' . (!empty($metainfo['noindex']) ? 'noindex' : '') . ' ' . ($metainfo['nofollow'] ? 'nofollow' : '') . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        if (empty($config['viewport'])) {\n            $viewport = 'width=device-width, user-scalable=yes';\n        } else {\n            if (!empty($config['viewport']['width'])) {\n                $viewport = 'width=' . $config['viewport']['width'];\n            } else {\n                $viewport = 'width=device-width';\n            }\n            if (!empty($config['viewport']['height'])) {\n                $viewport .= ', height=' . $config['viewport']['height'];\n            }\n            if (!empty($config['viewport']['initial_scale'])) {\n                $viewport .= ' initial-scale=' . $config['viewport']['initial_scale'];\n//            } else {\n//                $viewport .= ', initial-scale=1.0';\n            }\n            if (!empty($config['viewport']['minimum_scale'])) {\n                $viewport .= ', minimum-scale=' . $config['viewport']['minimum_scale'];\n            }\n            if (!empty($config['viewport']['maximum_scale'])) {\n                $viewport .= ', maximum-scale=' . $config['viewport']['maximum_scale'];\n            }\n            if (!empty($config['viewport']['user_scalable'])) {\n                $viewport .= ', user-scalable=' . ($config['viewport']['user_scalable'] ? \"yes\" : \"no\");\n            } else {\n                $viewport .= ', user-scalable=yes';\n            }\n        }\n        if ($config['meta']['viewport']) {\n            $str .= \"\\t\" . '<meta name=\"viewport\" content=\"' . $viewport . '\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        // favicon\n        if (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/favicon.png')) {\n            $str .= \"\\t\" . '<link rel=\"icon\" href=\"' . URL_FULL . 'themes/' . DISPLAY_THEME . '/favicon.png\" type=\"image/png\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        } elseif (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/favicon.ico')) {\n            $str .= \"\\t\" . '<link rel=\"icon\" href=\"' . URL_FULL . 'themes/' . DISPLAY_THEME . '/favicon.ico\" type=\"image/x-icon\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        // touch icons\n        if (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/apple-touch-icon.png')) {\n            $str .= \"\\t\" . '<link rel=\"apple-touch-icon\" href=\"' . URL_FULL . 'themes/' . DISPLAY_THEME . '/apple-touch-icon.png\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n        if (file_exists(BASE . 'themes/' . DISPLAY_THEME . '/apple-touch-icon-precomposed.png')) {\n            $str .= \"\\t\" . '<link rel=\"apple-touch-icon-precomposed\" href=\"' . URL_FULL . 'themes/' . DISPLAY_THEME . '/apple-touch-icon-precomposed.png\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        // support for xmlrpc blog editors like Windows Live Writer, etc...\n        if (USE_XMLRPC) {\n            if (file_exists(BASE . 'rsd.xml')) {\n                $str .= \"\\t\" . '<link rel=\"EditURI\" href=\"' . URL_FULL . 'rsd.xml\" type=\"application/rsd+xml\" ' . XHTML_CLOSING . '>' . \"\\n\";\n            }\n            $str .= \"\\t\" . '<link rel=\"wlwmanifest\" href=\"' . URL_FULL . 'wlwmanifest.xml\" type=\"application/wlwmanifest+xml\" ' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        // when minification is used, the comment below gets replaced when the buffer is dumped\n        $str .= '<!-- MINIFY REPLACE -->';\n\n        if ($config['meta']['ie_compat']) {\n            // some IE 6 support\n            $str .= \"\\t\" . '<!--[if IE 6]><style type=\"text/css\">  body { behavior: url(' . PATH_RELATIVE . 'external/csshover.htc); }</style><![endif]-->' . \"\\n\";\n\n            // css3 transform support for IE 6-8\n//            $str .= \"\\t\" . '<!--[if lt IE 9]><style type=\"text/css\">  body { behavior: url(' . PATH_RELATIVE . 'external/ms-transform.htc); }</style><![endif]-->' . \"\\n\";\n\n            // html5 support for IE 6-8\n            $str .= \"\\t\" . '<!--[if lt IE 9]><script src=\"' . PATH_RELATIVE . 'external/html5shiv/html5shiv-shiv.js\"></script><![endif]-->' . \"\\n\";\n\n            // media css support for IE 6-8\n            $str .= \"\\t\" . '<!--[if lt IE 9]><script src=\"' . PATH_RELATIVE . 'external/Respond-1.4.2/dest/respond.min.js\"></script><![endif]-->' . \"\\n\";\n\n            // canvas support for IE 6-8 - now done by webshims\n//            $str .= \"\\t\" . '<!--[if lt IE 9]><script src=\"' . PATH_RELATIVE . 'external/excanvas.js\"></script><![endif]-->' . \"\\n\";\n\n            //Win 8/IE 10 work around\n            $str .= \"\\t\" . '<!--[if IE 10]><link rel=\"stylesheet\" href=\"' . PATH_RELATIVE . 'external/ie10-viewport-bug-workaround.css\" type=\"text/css\"' . XHTML_CLOSING . '><![endif]-->' . \"\\n\";\n            $str .= \"\\t\" . '<!--[if IE 10]><script src=\"' . PATH_RELATIVE . 'external/ie10-viewport-bug-workaround.js\"></script><![endif]-->' . \"\\n\";\n\n            // turn off ie compatibility mode which will break the display\n            $str .= \"\\t\" . '<meta http-equiv=\"X-UA-Compatible\" content=\"IE=edge\"' . XHTML_CLOSING . '>' . \"\\n\";\n        }\n\n        return $str;\n    }\n\n    public static function foot($params = array())\n    {\n        self::footerInfo($params);\n    }\n\n    public static function footerInfo($params = array())\n    {\n        // checks to see if the theme is calling footerInfo.\n        global $validateTheme, $user, $jsForHead;\n\n        $validateTheme['footerinfo'] = true;\n\n        if (!empty($user->getsToolbar) && PRINTER_FRIENDLY != 1 && EXPORT_AS_PDF != 1 && !defined(\n                'SOURCE_SELECTOR'\n            ) && empty($params['hide-slingbar'])\n        ) {\n            self::module(array(\"controller\" => \"administration\", \"action\" => \"toolbar\", \"source\" => \"admin\"));\n        }\n\n        if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {\n            echo '<div style=\"text-align:center\"><a href=\"', makeLink(\n                    array('module' => 'administration', 'action' => 'togglemobile')\n                ), '\">', gt('View site in'), ' ', (MOBILE ? \"Classic\" : \"Mobile\"), ' ', gt('mode'), '</a></div>';\n        }\n        // load primer, lessprimer, & normalize CSS files\n\n        if (!empty($params['src']) || !empty($params['content']) || !empty($params['yui3mods']) || !empty($params['jquery']) || !empty($params['bootstrap'])) {\n            expJavascript::pushToFoot($params);\n        }\n        self::processCSSandJS();\n        echo expJavascript::footJavascriptOutput();\n\n        expSession::deleteVar(\n            \"last_POST\"\n        ); //ADK - putting this here so one form doesn't unset it before another form needs it.\n        expSession::deleteVar(\n            'last_post_errors'\n        );\n    }\n\n    public static function pageMetaInfo()\n    {\n        global $sectionObj, $router;\n\n        $metainfo = array();\n        if (self::inAction() && (!empty($router->url_parts[0]) && expModules::controllerExists(\n                    $router->url_parts[0]\n                ))\n        ) {\n//            $classname = expModules::getControllerClassName($router->url_parts[0]);\n//            $controller = new $classname();\n            $controller = expModules::getController($router->url_parts[0]);\n            $metainfo = $controller->metainfo();\n        }\n        if (empty($metainfo)) {\n            $metainfo['title'] = empty($sectionObj->page_title) ? SITE_TITLE : $sectionObj->page_title;\n            $metainfo['keywords'] = empty($sectionObj->keywords) ? SITE_KEYWORDS : $sectionObj->keywords;\n            $metainfo['description'] = empty($sectionObj->description) ? SITE_DESCRIPTION : $sectionObj->description;\n            $metainfo['canonical'] = empty($sectionObj->canonical) ? URL_FULL . $sectionObj->sef_name : $sectionObj->canonical;\n            $metainfo['noindex'] = empty($sectionObj->noindex) ? false : $sectionObj->noindex;\n            $metainfo['nofollow'] = empty($sectionObj->nofollow) ? false : $sectionObj->nofollow;\n        }\n\n        // clean up meta tag output\n        foreach ($metainfo as $key=>$value) {\n            $metainfo[$key] = expString::parseAndTrim($value, true);\n        }\n        return $metainfo;\n    }\n\n    public static function grabView($path, $filename)\n    { //FIXME Not used\n        $dirs = array(\n            BASE . 'themes/' . DISPLAY_THEME . '/' . $path,\n            BASE . 'framework/' . $path,\n        );\n\n        foreach ($dirs as $dir) {\n            if (file_exists($dir . $filename . '.tpl')) {\n                return $dir . $form . '.tpl';\n            } //FIXME $form is not set??\n        }\n\n        return false;\n    }\n\n    public static function grabViews($path, $filter = '')\n    { //FIXME Not used\n        $dirs = array(\n            BASE . 'framework/' . $path,\n            BASE . 'themes/' . DISPLAY_THEME . '/' . $path,\n        );\n\n        $files = array();\n        foreach ($dirs as $dir) {\n            if (is_dir($dir) && is_readable($dir)) {\n                $dh = opendir($dir);\n                while (($filename = readdir($dh)) !== false) {\n                    $file = $dir . $filename;\n                    if (is_file($file)) { //FIXME this should be $file instead of $filename?\n                        $files[$filename] = $file;\n                    }\n                }\n            }\n        }\n\n        return $files;\n    }\n\n    public static function processCSSandJS()\n    {\n        global $jsForHead, $cssForHead;\n\n        // returns string, either minified combo url or multiple link and script tags\n        $jsForHead = expJavascript::parseJSFiles();\n        $cssForHead = expCSS::parseCSSFiles();\n    }\n\n    public static function removeCss()\n    {\n        expFile::removeFilesInDirectory(BASE . 'tmp/minify'); // also clear the minify engine's cache\n        return expFile::removeFilesInDirectory(BASE . 'tmp/css');\n    }\n\n    public static function clearSmartyCache()\n    {\n        self::removeSmartyCache();\n        flash('message', gt(\"Smarty Cache has been cleared\"));\n        expHistory::back();\n    }\n\n    public static function removeSmartyCache()\n    {\n        expFile::removeFilesInDirectory(BASE . 'tmp/cache'); // alt location for cache\n        return expFile::removeFilesInDirectory(BASE . 'tmp/views_c');\n    }\n\n    /** exdoc\n     * Output <link /> elements for each RSS feed on the site\n     *\n     * @node Subsystems:Theme\n     */\n    public static function advertiseRSS()\n    {\n        if (defined('ADVERTISE_RSS') && ADVERTISE_RSS == 1) {\n            echo \"\\t<!-- RSS Feeds -->\\r\\n\";\n            $rss = new expRss();\n            $feeds = $rss->getFeeds('advertise=1');\n            foreach ($feeds as $feed) {\n                if ($feed->enable_rss) {\n//\t\t\t\t\t$title = empty($feed->feed_title) ? 'RSS' : htmlspecialchars($feed->feed_title, ENT_QUOTES);\n                    $title = empty($feed->title) ? 'RSS - ' . ORGANIZATION_NAME : htmlspecialchars(\n                        $feed->title,\n                        ENT_QUOTES\n                    );\n                    $params['module'] = $feed->module;\n                    $params['src'] = $feed->src;\n//\t\t\t\t\techo \"\\t\".'<link rel=\"alternate\" type=\"application/rss+xml\" title=\"' . $title . '\" href=\"' . expCore::makeRSSLink($params) . \"\\\" />\\n\";\n                    //FIXME need to use $feed instead of $params\n                    echo \"\\t\" . '<link rel=\"alternate\" type=\"application/rss+xml\" title=\"', $title, '\" href=\"', expCore::makeLink(\n                            array('controller' => 'rss', 'action' => 'feed', 'title' => $feed->sef_url)\n                        ), \"\\\" />\\r\\n\";\n                }\n            }\n        }\n    }\n\n    public static function loadActionMaps()\n    {\n        if (is_readable(BASE . 'themes/' . DISPLAY_THEME . '/action_maps.php')) {\n            return include(BASE . 'themes/' . DISPLAY_THEME . '/action_maps.php');\n        } else {\n            return array();\n        }\n    }\n\n    public static function satisfyThemeRequirements()\n    {\n        global $validateTheme;\n\n        if ($validateTheme['headerinfo'] == false) {\n            echo \"<h1 style='padding:10px;border:5px solid #992222;color:red;background:white;position:absolute;top:100px;left:300px;width:400px;z-index:999'>expTheme::head() is a required function in your theme.  Please refer to the Exponent documentation for details:<br />\n\t\t\t<a href=\\\"http://docs.exponentcms.org/docs/current/header-info\\\" target=\\\"_blank\\\">http://docs.exponentcms.org/</a>\n\t\t\t</h1>\";\n            die();\n        }\n\n        if ($validateTheme['footerinfo'] == false) {\n            echo \"<h1 style='padding:10px;border:5px solid #992222;color:red;background:white;position:absolute;top:100px;left:300px;width:400px;z-index:999'>expTheme::foot() is a required function in your theme.  Please refer to the Exponent documentation for details:<br />\n\t\t\t<a href=\\\"http://docs.exponentcms.org/docs/current/footer-info\\\" target=\\\"_blank\\\">http://docs.exponentcms.org/</a>\n\t\t\t</h1>\";\n            die();\n        }\n    }\n\n    public static function getTheme()\n    {\n        global $sectionObj, $router;\n\n        // Grabs the action maps files for theme overrides\n        $action_maps = self::loadActionMaps();\n\n//\t\t$mobile = self::is_mobile();\n\n        // if we are in an action, get the particulars for the module\n        if (self::inAction()) {\n//            $module = isset($_REQUEST['module']) ? expString::sanitize(\n//                $_REQUEST['module']\n//            ) : expString::sanitize($_REQUEST['controller']);\n            $module = isset($_REQUEST['module']) ? $_REQUEST['module'] : $_REQUEST['controller'];\n        }\n\n        // if we are in an action and have action maps to work with...\n        if (self::inAction() && (!empty($action_maps[$module]) && (array_key_exists(\n                        $_REQUEST['action'],\n                        $action_maps[$module]\n                    ) || array_key_exists('*', $action_maps[$module])))\n        ) {\n            $actionname = array_key_exists($_REQUEST['action'], $action_maps[$module]) ? $_REQUEST['action'] : '*';\n            $actiontheme = explode(\":\", $action_maps[$module][$actionname]);\n\n            // this resets the section object. we're suppressing notices with @ because getSectionObj sets constants, which cannot be changed\n            // since this will be the second time Exponent calls this function on the page load.\n            if (!empty($actiontheme[1])) {\n                $sectionObj = @$router->getSectionObj($actiontheme[1]);\n            }\n\n            if ($actiontheme[0] == \"default\" || $actiontheme[0] == \"Default\" || $actiontheme[0] == \"index\") {\n                if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {\n                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php';\n                } else {\n                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/index.php';\n                }\n            } elseif (is_readable(BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $actiontheme[0] . '.php')) {\n                if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $actiontheme[0] . '.php')) {\n                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $actiontheme[0] . '.php';\n                } else {\n                    $theme = BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $actiontheme[0] . '.php';\n                }\n            } else {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/index.php';\n            }\n        } elseif ($sectionObj->subtheme != '' && is_readable(\n                BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $sectionObj->subtheme . '.php'\n            )\n        ) {\n            if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $sectionObj->subtheme . '.php')) {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/' . $sectionObj->subtheme . '.php';\n            } elseif (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php';\n            } else {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/subthemes/' . $sectionObj->subtheme . '.php';\n            }\n        } else {\n            if (MOBILE && is_readable(BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php')) {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/mobile/index.php';\n            } else {\n                $theme = BASE . 'themes/' . DISPLAY_THEME . '/index.php';\n            }\n        }\n        if (!is_readable($theme)) {\n            if (is_readable(BASE . 'framework/core/index.php')) {\n                $theme = BASE . 'framework/core/index.php';  // use the fallback bare essentials theme\n            }\n        }\n        return $theme;\n    }\n\n    /** exdoc\n     * @state <b>UNDOCUMENTED</b>\n     *\n     * @node  Undocumented\n     *\n     * @param bool   $include_default\n     * @param string $theme\n     *\n     * @return array\n     */\n    public static function getSubthemes($include_default = true, $theme = DISPLAY_THEME)\n    {\n        $base = BASE . \"themes/$theme/subthemes\";\n        // The array of subthemes.  If the theme has no subthemes directory,\n        // or the directory is not readable by the web server, this empty array\n        // will be returned (Unless the caller wanted us to include the default layout)\n        $subs = array();\n        if ($include_default == true) {\n            // Caller wants us to include the default layout.\n            $subs[''] = DEFAULT_VIEW; // Not really its intended use, but it works.\n        }\n\n        if (is_readable($base)) {\n            // subthemes directory exists and is readable by the web server.  Continue on.\n            $dh = opendir($base);\n            // Read out all entries in the THEMEDIR/subthemes directory\n            while (($s = readdir($dh)) !== false) {\n                if (substr($s, -4, 4) == '.php' && substr($s, 0, 1) != '_' && is_file($base . \"/$s\") && is_readable(\n                        $base . \"/$s\"\n                    )\n                ) {\n                    // Only readable .php files are allowed to be subtheme files.\n                    $subs[substr($s, 0, -4)] = substr($s, 0, -4);\n                }\n            }\n            // Sort the subthemes by their keys (which are the same as the values)\n            // using a natural string comparison function (PHP built-in)\n            uksort($subs, 'strnatcmp');\n        }\n        return $subs;\n    }\n\n    public static function getPrinterFriendlyTheme()\n    {\n        global $framework;\n\n        $common = 'framework/core/printer-friendly.php';\n        $theme = 'themes/' . DISPLAY_THEME . '/printer-friendly.php';\n        if (empty($framework)) {\n            $fw = expSession::get('framework');\n            $fwprint = 'framework/core/printer-friendly.' . $fw . '.php';\n        } else {\n            $fwprint = 'framework/core/printer-friendly.' . $framework . '.php';\n        }\n\n        if (is_readable($theme)) {\n            return $theme;\n        } elseif (is_readable($fwprint)) {\n            return $fwprint;\n        } elseif (is_readable($common)) {\n            return $common;\n        } else {\n            return null;\n        }\n    }\n\n    /** exdoc\n     * Checks to see if the page is currently in an action.  Useful only if the theme does not use the self::main() function\n     * Returns whether or not an action should be run.\n     *\n     * @node Subsystems:Theme\n     * @return boolean\n     */\n    public static function inPreview()\n    {\n        $level = 99;\n        if (expSession::is_set('uilevel')) {\n            $level = expSession::get('uilevel');\n        }\n        return ($level == UILEVEL_PREVIEW);\n    }\n\n    public static function inAction($action=null)\n    {\n        return (isset($_REQUEST['action']) && (isset($_REQUEST['module']) || isset($_REQUEST['controller'])) && (!isset($action) || ($action == $_REQUEST['action'])));\n    }\n\n    public static function reRoutActionTo($theme = \"\")\n    {\n        if (empty($theme)) {\n            return false;\n        }\n        if (self::inAction()) {\n            include_once(BASE . \"themes/\" . DISPLAY_THEME . \"/\" . $theme);\n            exit;\n        }\n        return false;\n    }\n\n    /** exdoc\n     * Runs the appropriate action, by looking at the $_REQUEST variable.\n     *\n     * @node Subsystems:Theme\n     * @return bool\n     */\n    public static function runAction()\n    {\n        global $user;\n\n        if (self::inAction()) {\n            if (!AUTHORIZED_SECTION && !expJavascript::inAjaxAction())\n                notfoundController::handle_not_authorized();\n//\t\t\tif (expSession::is_set(\"themeopt_override\")) {\n//\t\t\t\t$config = expSession::get(\"themeopt_override\");\n//\t\t\t\techo \"<a href='\".$config['mainpage'].\"'>\".$config['backlinktext'].\"</a><br /><br />\";\n//\t\t\t}\n\n            //FIXME clean our passed parameters\n//            foreach ($_REQUEST as $key=>$param) {  //FIXME need array sanitizer\n//                $_REQUEST[$key] = expString::sanitize($param);\n//            }\n//            if (empty($_REQUEST['route_sanitized'])) {\n            if (!$user->isAdmin())\n                expString::sanitize($_REQUEST);\n//            } elseif (empty($_REQUEST['array_sanitized'])) {\n//                $tmp =1;  //FIXME we've already sanitized at this point\n//            } else {\n//                $tmp =1;  //FIXME we've already sanitized at this point\n//            }\n\n            //FIXME: module/controller glue code..remove ASAP\n            $module = empty($_REQUEST['controller']) ? $_REQUEST['module'] : $_REQUEST['controller'];\n//\t\t\t$isController = expModules::controllerExists($module);\n\n//\t\t\tif ($isController && !isset($_REQUEST['_common'])) {\n            if (expModules::controllerExists($module)) {\n                // this is being set just in case the url said module=modname instead of controller=modname\n                // with SEF URls turned on its not really an issue, but with them off some of the links\n                // aren't being made correctly...depending on how the {link} plugin was used in the view.\n                $_REQUEST['controller'] = $module;\n\n//                if (!isset($_REQUEST['action'])) $_REQUEST['action'] = 'showall';\n//                if (isset($_REQUEST['view']) && $_REQUEST['view'] != $_REQUEST['action']) {\n//                    $test = explode('_',$_REQUEST['view']);\n//                    if ($test[0] != $_REQUEST['action']) {\n//                        $_REQUEST['view'] = $_REQUEST['action'].'_'.$_REQUEST['view'];\n//                    }\n//                } elseif (!empty($_REQUEST['action'])) {\n//                    $_REQUEST['view'] = $_REQUEST['action'];\n//                } else {\n//                    $_REQUEST['view'] = 'showall';\n//                }\n\n                echo renderAction($_REQUEST);\n//\t\t\t} else {\n//\t\t\t\tif ($_REQUEST['action'] == 'index') {\n//\t\t\t\t\t$view = empty($_REQUEST['view']) ? 'Default' : $_REQUEST['view'];\n//\t\t\t\t\t$title = empty($_REQUEST['title']) ? '' : expString::sanitize($_REQUEST['title']);\n//\t\t\t\t\t$src = empty($_REQUEST['src']) ? null : expString::sanitize($_REQUEST['src']);\n//\t\t\t\t\tself::showModule($module, $view, $title, $src);\n//\t\t\t\t\treturn true;\n//\t\t\t\t}\n//\n//\t\t\t\tglobal $db, $user;  // these globals are needed for the old school actions which are loaded\n//\n//\t\t\t\t// the only reason we should have a controller down in this section is if we are hitting a common action like\n//\t\t\t\t// userperms or groupperms...deal with it.\n////\t\t\t\t$loc = new stdClass();\n////\t\t\t\t$loc->mod = $module;\n////\t\t\t\t$loc->src = (isset($_REQUEST['src']) ? expString::sanitize($_REQUEST['src']) : \"\");\n////\t\t\t\t$loc->int = (!empty($_REQUEST['int']) ? strval(intval($_REQUEST['int'])) : \"\");\n//                $loc = expCore::makeLocation($module,(isset($_REQUEST['src']) ? expString::sanitize($_REQUEST['src']) : \"\"),(!empty($_REQUEST['int']) ? strval(intval($_REQUEST['int'])) : \"\"));\n//\t\t\t\t//if (isset($_REQUEST['act'])) $loc->act = $_REQUEST['act'];\n//\n//\t\t\t\tif (isset($_REQUEST['_common'])) {\n//\t\t\t\t\t$actfile = \"/common/actions/\" . $_REQUEST['action'] . \".php\";\n//\t\t\t\t} else {\n//\t\t\t\t\t$actfile = \"/\" . $module . \"/actions/\" . $_REQUEST['action'] . \".php\";\n//\t\t\t\t}\n//\n//\t\t\t\tif (is_readable(BASE.\"themes/\".DISPLAY_THEME.\"/modules\".$actfile)) {\n//                    include_once(BASE.\"themes/\".DISPLAY_THEME.\"/modules\".$actfile);\n////\t\t\t\t} elseif (is_readable(BASE.'framework/modules-1/'.$actfile)) {\n////\t\t\t\t\tinclude_once(BASE.'framework/modules-1/'.$actfile);\n//\t\t\t\t} else {\n//\t\t\t\t\techo SITE_404_HTML . '<br /><br /><hr size=\"1\" />';\n//\t\t\t\t\techo sprintf(gt('No such module action').' : %1 : %2',strip_tags($module),strip_tags($_REQUEST['action']));\n//\t\t\t\t\techo '<br />';\n//\t\t\t\t}\n            }\n        }\n        return false;\n    }\n\n    public static function showAction($module, $action, $src = \"\", $params = array())\n    { //FIXME only used by smarty functions, old school?\n        global $user;\n\n        $loc = expCore::makeLocation($module, (isset($src) ? $src : \"\"), (isset($int) ? $int : \"\"));\n\n        $actfile = \"/\" . $module . \"/actions/\" . $action . \".php\";\n        if (isset($params)) {\n//            foreach ($params as $key => $value) {  //FIXME need array sanitizer\n////                $_GET[$key] = $value;\n//                $_GET[$key] = expString::sanitize($value);\n//            }\n            if (!$user->isAdmin())\n                expString::sanitize($_GET);\n        }\n        //if (isset($['_common'])) $actfile = \"/common/actions/\" . $_REQUEST['action'] . \".php\";\n\n        if (is_readable(BASE . \"themes/\" . DISPLAY_THEME . \"/modules\" . $actfile)) {\n            include(BASE . \"themes/\" . DISPLAY_THEME . \"/modules\" . $actfile);\n//   \t\t} elseif (is_readable(BASE.'framework/modules-1/'.$actfile)) {\n//   \t\t\tinclude(BASE.'framework/modules-1/'.$actfile);\n        } else {\n            notfoundController::handle_not_found();\n            echo '<br /><hr size=\"1\" />';\n            echo sprintf(\n                gt('No such module action') . ' : %1 : %2',\n                strip_tags($_REQUEST['module']),\n                strip_tags($_REQUEST['action'])\n            );\n            echo '<br />';\n        }\n    }\n\n    /** exdoc\n     * Redirect User to Default Section\n     *\n     * @node Subsystems:Theme\n     */\n    public static function goDefaultSection()\n    {\n        $last_section = expSession::get(\"last_section\");\n        if (defined('SITE_DEFAULT_SECTION') && SITE_DEFAULT_SECTION != $last_section) {\n            header(\"Location: \" . URL_FULL . \"index.php?section=\" . SITE_DEFAULT_SECTION);\n            exit();\n        } else {\n            global $db;\n\n            $section = $db->selectObject(\"section\", \"public = 1 AND active = 1\"); // grab first section, go there\n            if ($section) {\n                header(\"Location: \" . URL_FULL . \"index.php?section=\" . $section->id);\n                exit();\n            } else {\n                notfoundController::handle_not_found();\n            }\n        }\n    }\n\n    /** exdoc\n     * Takes care of all the specifics of either showing a sectional container or running an action.\n     *\n     * @node Subsystems:Theme\n     */\n    public static function main()\n    {\n        global $db;\n\n        if ((!defined('SOURCE_SELECTOR') || SOURCE_SELECTOR == 1)) {\n            $last_section = expSession::get(\"last_section\");\n            $section = $db->selectObject(\"section\", \"id=\" . $last_section);\n            // View authorization will be taken care of by the runAction and mainContainer functions\n            if (self::inAction()) {\n                if (!PRINTER_FRIENDLY && !EXPORT_AS_PDF)\n                    echo show_msg_queue();\n                self::runAction();\n            } else {\n                if ($section == null) {\n                    self::goDefaultSection();\n                } else {\n                    if (!PRINTER_FRIENDLY && !EXPORT_AS_PDF)\n                        echo show_msg_queue();\n                    self::mainContainer();\n                }\n            }\n//        } else {\n//            if (isset($_REQUEST['module'])) {\n//                include_once(BASE.\"framework/modules/container/orphans_content.php\");  //FIXME not sure how to convert this yet\n//            } else {\n//                echo gt('Select a module');\n//            }\n        }\n    }\n\n    /** exdoc\n     * Useful only if theme does not use self::main\n     *\n     * @return void\n     * @internal param bool $public Whether or not the page is public.\n     * @node     Subsystems:Theme\n     */\n    public static function mainContainer()\n    {\n        global $router;\n\n        if (!AUTHORIZED_SECTION) {\n            // Set this so that a login on an Auth Denied page takes them back to the previously Auth-Denied page\n            //\t\t\texpHistory::flowSet(SYS_FLOW_PROTECTED,SYS_FLOW_SECTIONAL);\n            expHistory::set('manageable', $router->params);\n            notfoundController::handle_not_authorized();\n            return;\n        }\n\n        if (PUBLIC_SECTION) {\n            //\t\t\texpHistory::flowSet(SYS_FLOW_PUBLIC,SYS_FLOW_SECTIONAL);\n            expHistory::set('viewable', $router->params);\n        } else {\n            //\t\t\texpHistory::flowSet(SYS_FLOW_PROTECTED,SYS_FLOW_SECTIONAL);\n            expHistory::set('manageable', $router->params);\n        }\n\n        #   if (expSession::is_set(\"themeopt_override\")) {\n        #       $config = expSession::get(\"themeopt_override\");\n//   \t\t\tself::showSectionalModule(\"containermodule\",\"Default\",\"\",\"@section\",false,true);  //FIXME change to showModule call\n        self::module(\n            array(\n                \"controller\" => \"container\",\n                \"action\"     => \"showall\",\n                \"view\"       => \"showall\",\n                \"source\"     => \"@section\",\n                \"scope\"      => \"sectional\"\n            )\n        );\n\n        #   } else {\n        #       self::showSectionalModule(\"containermodule\",\"Default\",\"\",\"@section\");\n        #   }\n    }\n\n    /** exdoc\n     * Calls the necessary methods to show a specific module, in a section-sensitive way.\n     *\n     * @param string $module   The classname of the module to display\n     * @param string $view     The name of the view to display the module with\n     * @param string $title    The title of the module (support is view-dependent)\n     * @param string $prefix   The prefix of the module's source.  The current section id will be appended to this\n     * @param bool   $pickable Whether or not the module is pickable in the Source Picker.\n     * @param bool   $hide_menu\n     *\n     * @return void\n     * @node Subsystems:Theme\n     * @deprecated 2.2.1\n     */\n    public static function showSectionalModule(\n        $module,\n        $view,\n        $title,\n        $prefix = null,\n        $pickable = false,\n        $hide_menu = false\n    ) {\n        global $module_scope;\n\n        self::deprecated('expTheme::module()', $module, $view);\n        $module = expModules::getModuleName($module); //FIXME patch to cleanup module name\n        if ($prefix == null) {\n            $prefix = \"@section\";\n        }\n\n        $src = $prefix;\n\n//\t\tif (expSession::is_set(\"themeopt_override\")) {\n//\t\t\t$config = expSession::get(\"themeopt_override\");\n//\t\t\tif (in_array($module,$config['ignore_mods'])) return;\n//\t\t\t$src = $config['src_prefix'].$prefix;  //FIXME there is no such config index\n//\t\t\t$section = null;\n//\t\t} else {\n        global $sectionObj;\n\n        //$last_section = expSession::get(\"last_section\");\n        //$section = $db->selectObject(\"section\",\"id=\".$last_section);\n        $src .= $sectionObj->id;\n//\t\t}\n        $module_scope[$src][$module] = new stdClass();\n        $module_scope[$src][$module]->scope = 'sectional';\n\n        self::showModule($module, $view, $title, $src, false, null, $hide_menu);\n    }\n\n    /** exdoc\n     * Calls the necessary methods to show a specific module in such a way that the current\n     * section displays the same content as its top-level parent and all of the top-level parent's\n     * children, grand-children, grand-grand-children, etc.\n     *\n     * @param string $module   The classname of the module to display\n     * @param string $view     The name of the view to display the module with\n     * @param string $title    The title of the module (support is view-dependent)\n     * @param string $prefix   The prefix of the module's source.  The current section id will be appended to this\n     * @param bool   $pickable Whether or not the module is pickable in the Source Picker.\n     * @param bool   $hide_menu\n     *\n     * @node Subsystems:Theme\n     * @deprecated 2.2.1\n     */\n    public static function showTopSectionalModule(\n        $module,\n        $view,\n        $title,\n        $prefix = null,\n        $pickable = false,\n        $hide_menu = false\n    ) {\n        global $db, $module_scope, $sectionObj;\n\n        self::deprecated('expTheme::module()', $module, $view);\n        $module = expModules::getModuleName($module); //FIXME patch to cleanup module name\n        if ($prefix == null) {\n            $prefix = \"@section\";\n        }\n//\t\t$last_section = expSession::get(\"last_section\");\n//\t\t$section = $db->selectObject(\"section\",\"id=\".$last_section);\n        $section = $sectionObj; //FIXME let's try $sectionObj instead of last_section\n//        $module_scope[$prefix.$section->id][$module] = new stdClass();\n        $module_scope[$prefix . $section->id][$module]->scope = 'top-sectional';\n        // Loop until we find the top level parent.\n        while ($section->parent != 0) {\n            $section = $db->selectObject(\"section\", \"id=\" . $section->parent);\n        }\n\n        self::showModule($module, $view, $title, $prefix . $section->id, false, null, $hide_menu);\n    }\n\n    /** exdoc\n     * Calls the necessary methods to show a specific controller, in a section-sensitive way.\n     *\n     * @param array $params\n     *\n     * @internal param string $module The classname of the module to display\n     * @internal param string $view The name of the view to display the module with\n     * @internal param string $title The title of the module (support is view-dependent)\n     * @internal param string $prefix The prefix of the module's source.  The current section id will be appended to this\n     * @internal param bool $pickable Whether or not the module is pickable in the Source Picker.\n     * @internal param bool $hide_menu\n     * @return void\n     * @node     Subsystems:Theme\n     * @deprecated 2.2.1\n     */\n    public static function showSectionalController($params = array())\n    { //FIXME not used in base system (custom themes?)\n        global $sectionObj, $module_scope;\n\n        $src = \"@section\" . $sectionObj->id;\n        $params['source'] = $src;\n//        $module_scope[$params['source']][(isset($params['module'])?$params['module']:$params['controller'])] = new stdClass();\n        $module_scope[$params['source']][(isset($params['module']) ? $params['module'] : $params['controller'])]->scope = 'sectional';\n        $module = !empty($params['module']) ? $params['module'] : $params['controller'];\n        $view = !empty($params['action']) ? $params['action'] : $params['view'];\n        self::deprecated('expTheme::module()', $module, $view);\n        self::module($params);\n    }\n\n    /**\n     * @deprecated 2.2.1\n     */\n    public static function showController($params = array())\n    {\n        $module = !empty($params['module']) ? $params['module'] : $params['controller'];\n        $view = !empty($params['action']) ? $params['action'] : $params['view'];\n        self::deprecated('expTheme::module()', $module, $view);\n        self::module($params);\n//        global $sectionObj, $db, $module_scope;\n//        if (empty($params)) {\n//\t        return false;\n//        } elseif (isset($params['module'])) {\n//            self::module($params);\n//        } else if (isset($params['controller'])) {\n//\t\t\t$params['view'] = isset($params['view']) ? $params['view'] : $params['action'];\n//\t\t\t$params['title'] = isset($params['moduletitle']) ? $params['moduletitle'] : '';\n//\t\t\t$params['chrome'] = (!isset($params['chrome']) || (isset($params['chrome'])&&empty($params['chrome']))) ? true : false;\n//\t\t\t$params['scope'] = isset($params['scope']) ? $params['scope'] : 'global';\n//\n//\t\t\t// set the controller and action to the one called via the function params\n//\t\t\t$requestvars = isset($params['params']) ? $params['params'] : array();\n//\t\t\t$requestvars['controller'] = $params['controller'];\n//\t\t\t$requestvars['action'] = isset($params['action']) ? $params['action'] : null;\n//\t\t\t$requestvars['view'] = isset($params['view']) ? $params['view'] : null;\n//\n//\t\t\t// figure out the scope of the module and set the source accordingly\n//\t\t\tif ($params['scope'] == 'global') {\n//\t\t\t\t$params['source'] = isset($params['source']) ? $params['source'] : null;\n//\t\t\t} elseif ($params['scope'] == 'sectional') {\n//\t\t\t\t$params['source']  = isset($params['source']) ? $params['source'] : '@section';\n//\t\t\t\t$params['source'] .= $sectionObj->id;\n//\t\t\t} elseif ($params['scope'] == 'top-sectional') {\n//\t\t\t\t$params['source']  = isset($params['source']) ? $params['source'] : '@section';\n//\t\t\t\t$section = $sectionObj;\n//\t\t\t\twhile ($section->parent > 0) $section = $db->selectObject(\"section\",\"id=\".$section->parent);\n//\t\t\t\t$params['source'] .= $section->id;\n//\t\t\t}\n////            $module_scope[$params['source']][(isset($params['module'])?$params['module']:$params['controller'])] = new stdClass();\n//            $module_scope[$params['source']][(isset($params['module'])?$params['module']:$params['controller'])]->scope = $params['scope'];\n//\t\t\tself::showModule(expModules::getControllerClassName($params['controller']),$params['view'],$params['title'],$params['source'],false,null,$params['chrome'],$requestvars);\n//        }\n//        return false;\n    }\n\n    /**\n     * Entry point for displaying modules\n     * Packages $params for calling showModule method\n     *\n     * @param array $params list of module parameters\n     *\n     * @return bool\n     */\n    public static function module($params)\n    {\n        global $db, $module_scope, $sectionObj;\n\n        if (empty($params)) {\n            return false;\n        } elseif (isset($params['module']) && expModules::controllerExists($params['module'])) {\n            // hack to add compatibility for modules converted to controllers, but still hard-coded the old way\n            $params['controller'] = $params['module'];\n            unset($params['module']);\n        }\n        if (!isset($params['action'])) {\n            $params['action'] = 'showall';\n        }\n        if (isset($params['view']) && $params['view'] != $params['action']) {\n            $test = explode('_', $params['view']);\n            if ($test[0] != $params['action']) {\n                $params['view'] = $params['action'] . '_' . $params['view'];\n            }\n        } elseif (!empty($params['action'])) {\n            $params['view'] = $params['action'];\n        } else {\n            $params['view'] = 'showall';\n        }\n//\t    if (isset($params['controller'])) {\n        $controller = expModules::getModuleName($params['controller']);\n//            $params['view'] = isset($params['view']) ? $params['view'] : $params['action'];\n        $params['title'] = isset($params['moduletitle']) ? $params['moduletitle'] : '';\n        $params['chrome'] = (!isset($params['chrome']) || (isset($params['chrome']) && empty($params['chrome']))) ? true : false;\n        $params['scope'] = isset($params['scope']) ? $params['scope'] : 'global';\n\n        // set the controller and action to the one called via the function params\n        $requestvars = isset($params['params']) ? $params['params'] : array();\n        $requestvars['controller'] = $controller;\n        $requestvars['action'] = isset($params['action']) ? $params['action'] : null;\n        $requestvars['view'] = isset($params['view']) ? $params['view'] : null;\n\n        // figure out the scope of the module and set the source accordingly\n        if ($params['scope'] == 'global') {\n            $params['source'] = isset($params['source']) ? $params['source'] : null;\n        } elseif ($params['scope'] == 'sectional') {\n            $params['source'] = isset($params['source']) ? $params['source'] : '@section';\n            $params['source'] .= $sectionObj->id;\n        } elseif ($params['scope'] == 'top-sectional') {\n            $params['source'] = isset($params['source']) ? $params['source'] : '@section';\n            $section = $sectionObj;\n            while ($section->parent > 0) {\n                $section = $db->selectObject(\"section\", \"id=\" . $section->parent);\n            }\n            $params['source'] .= $section->id;\n        }\n        $module_scope[$params['source']][$controller] = new stdClass();\n        $module_scope[$params['source']][$controller]->scope = $params['scope'];\n//            self::showModule(expModules::getControllerClassName($params['controller']),$params['view'],$params['title'],$params['source'],false,null,$params['chrome'],$requestvars);\n        return self::showModule(\n            $controller,\n            $params['view'],\n            $params['title'],\n            $params['source'],\n            false,\n            null,\n            $params['chrome'],\n            $requestvars\n        );\n//        } elseif (isset($params['module'])) {\n//            $module = expModules::getModuleClassName($params['module']);\n//            $moduletitle = (isset($params['moduletitle'])) ? $params['moduletitle'] : \"\";\n//            $source = (isset($params['source'])) ? $params['source'] : \"\";\n//            $chrome = (isset($params['chrome'])) ? $params['chrome'] : false;\n//            $scope = (isset($params['scope'])) ? $params['scope'] : \"global\";\n//\n//            if ($scope==\"global\") {\n//                self::showModule($module,$params['view'],$moduletitle,$source,false,null,$chrome);\n//            }\n//            if ($scope==\"top-sectional\") {\n////                self::showTopSectionalModule($params['module'].\"module\", //module\n////                                             $params['view'], //view\n////                                             $moduletitle, // Title\n////                                             $source, // source\n////                                             false, // used to apply to source picker. does nothing now.\n////                                             $chrome // Show chrome\n////                                            );\n//                if ($source == null) $source = \"@section\";\n//                //FIXME - $section might be empty!  We're getting it from last_section instead of sectionObj??\n////                $last_section = expSession::get(\"last_section\");\n////                $section = $db->selectObject(\"section\",\"id=\".$last_section);\n//                $section = $sectionObj;  //FIXME let's try $sectionObj instead of last_section\n//                // Loop until we find the top level parent.\n//                while ($section->parent != 0) $section = $db->selectObject(\"section\",\"id=\".$section->parent);\n//                $module_scope[$source.$section->id][$module]= new stdClass();\n//                $module_scope[$source.$section->id][$module]->scope = 'top-sectional';\n//                self::showModule($module,$params['view'],$moduletitle,$source.$section->id,false,null,$chrome);\n//            }\n//            if ($scope==\"sectional\") {\n////                self::showSectionalModule($params['module'].\"module\", //module\n////                                          $params['view'], //view\n////                                          $moduletitle, // title\n////                                          $source, // source/prefix\n////                                          false, // used to apply to source picker. does nothing now.\n////                                          $chrome // Show chrome\n////                                        );\n//                if ($source == null) $source = \"@section\";\n//                $src = $source;\n//                $src .= $sectionObj->id;\n//                $module_scope[$src][$module] = new stdClass();\n//                $module_scope[$src][$module]->scope = 'sectional';\n//                self::showModule($module,$params['view'],$moduletitle,$src,false,null,$chrome);\n//            }\n//        }\n//        return false;\n    }\n\n    /** exdoc\n     * Calls the necessary methods to show a specific module - NOT intended to be called directly from theme\n     *\n     * @param string $module   The classname of the module to display\n     * @param string $view     The name of the view to display the module with\n     * @param string $title    The title of the module (support is view-dependent)\n     * @param string $source   The source of the module.\n     * @param bool   $pickable Whether or not the module is pickable in the Source Picker.\n     * @param null   $section\n     * @param bool   $hide_menu\n     * @param array  $params\n     *\n     * @return void\n     * @node Subsystems:Theme\n     */\n    public static function showModule(\n        $module,\n        $view = \"Default\",\n        $title = \"\",\n        $source = null,\n        $pickable = false,\n        $section = null,\n        $hide_menu = false,\n        $params = array()\n    ) {\n        $module = expModules::getModuleName($module); //FIXME patch to cleanup module name\n        if (!AUTHORIZED_SECTION && $module != 'navigation' && $module != 'login') {\n            return;\n        }\n\n        global $db, $sectionObj, $module_scope;\n\n        // Ensure that we have a section\n        //FJD - changed to $sectionObj\n        if ($sectionObj == null) {\n            $section_id = expSession::get('last_section');\n            if ($section_id == null) {\n                $section_id = SITE_DEFAULT_SECTION;\n            }\n            $sectionObj = $db->selectObject('section', 'id=' . $section_id);\n            //$section->id = $section_id;\n        }\n        if ($module == \"login\" && defined('PREVIEW_READONLY') && PREVIEW_READONLY == 1) {\n            return;\n        }\n\n//\t\tif (expSession::is_set(\"themeopt_override\")) {\n//\t\t\t$config = expSession::get(\"themeopt_override\");\n//\t\t\tif (in_array($module,$config['ignore_mods'])) return;\n//\t\t}\n        if (empty($params['action'])) {\n            $params['action'] = $view;\n        }\n        $loc = expCore::makeLocation($module, $source . \"\");\n\n        if (empty($module_scope[$source][$module]->scope)) {\n            $module_scope[$source][$module] = new stdClass();\n            $module_scope[$source][$module]->scope = 'global';\n        }\n        // make sure we've added this module to the sectionref table\n        $secref = $db->selectObject(\"sectionref\", \"module='$module' AND source='\" . $loc->src . \"'\");\n        if ($secref == null) {\n            $secref = new stdClass();\n            $secref->module = $module;\n            $secref->source = $loc->src;\n            $secref->internal = \"\";\n            $secref->refcount = 1000; // only hard-coded modules should be missing\n            if ($sectionObj != null) {\n                $secref->section = $sectionObj->id;\n            }\n//\t\t\t  $secref->is_original = 1;\n            $db->insertObject($secref, 'sectionref');\n//        } elseif ($sectionObj != null && $secref->section != $sectionObj->id) {\n//            $secref->section = $sectionObj->id;\n//            $db->updateObject($secref, 'sectionref');\n        }\n        // add (hard-coded) modules to the container table, nested containers added in container showall method??\n        $container = $db->selectObject('container', \"internal='\" . serialize($loc) . \"'\");\n        if (empty($container->id)) {\n            //if container isn't here already, then create it...hard-coded from theme template\n            $newcontainer = new stdClass();\n            $newcontainer->internal = serialize($loc);\n            $newcontainer->external = serialize(null);\n            $newcontainer->title = $title;\n            $newcontainer->view = $view;\n            $newcontainer->action = $params['action'];\n            $newcontainer->id = $db->insertObject($newcontainer, 'container');\n        }\n        if (empty($title) && !empty($container->title)) {\n            $title = $container->title;\n        }\n//\t\t$iscontroller = expModules::controllerExists($module);\n\n        if (defined('SELECTOR') && call_user_func(array(expModules::getModuleClassName($module), \"hasSources\"))) {\n            containerController::wrapOutput($module, $view, $loc, $title);\n        } else {\n//\t\t\tif (is_callable(array($module,\"show\")) || $iscontroller) {\n            if (expModules::controllerExists($module)) {\n                // FIXME: we are checking here for a new MVC style controller or an old school module. We only need to perform\n                // this check until we get the old modules all gone...until then we have the check and a lot of code duplication\n                // in the if blocks below...oh well, that's life.\n//\t\t\t\tif (!$iscontroller) {\n////\t\t\t\t\tif ((!$hide_menu && $loc->mod != \"containermodule\" && (call_user_func(array($module,\"hasSources\")) || $db->tableExists($loc->mod.\"_config\")))) {\n//                    if ((!$hide_menu && (call_user_func(array($module,\"hasSources\")) || $db->tableExists($loc->mod.\"_config\")))) {\n//                        $container = new stdClass();  //php 5.4\n//\t\t\t\t\t\t$container->permissions = array(\n//\t\t\t\t\t\t\t'manage'=>(expPermissions::check('manage',$loc) ? 1 : 0),\n//\t\t\t\t\t\t\t'configure'=>(expPermissions::check('configure',$loc) ? 1 : 0)\n//\t\t\t\t\t\t);\n//\n//\t\t\t\t\t\tif ($container->permissions['manage'] || $container->permissions['configure']) {\n//\t\t\t\t\t\t\t$container->randomizer = mt_rand(1,ceil(microtime(1)));\n//\t\t\t\t\t\t\t$container->view = $view;\n//\t\t\t\t\t\t\t$container->info['class'] = expModules::getModuleClassName($loc->mod);\n//\t\t\t\t\t\t\t$container->info['module'] = call_user_func(array($module,\"name\"));\n//\t\t\t\t\t\t\t$container->info['source'] = $loc->src;\n//                            $container->info['scope'] = $module_scope[$source][$module]->scope;\n//\t\t\t\t\t\t\t$container->info['hasConfig'] = $db->tableExists($loc->mod.\"_config\");\n////\t\t\t\t\t\t\t$template = new template('containermodule','_hardcoded_module_menu',$loc);\n////                            $template = new template('containerController','_hardcoded_module_menu',$loc,false,'controllers');\n//                            $c2 = new containerController();\n//                            $template = expTemplate::get_template_for_action($c2,'_hardcoded_module_menu');\n//\t\t\t\t\t\t\t$template->assign('container', $container);\n//\t\t\t\t\t\t\t$template->output();\n//\t\t\t\t\t\t}\n//\t\t\t\t\t}\n//\t\t\t\t} else {\n                // if we hit here we're dealing with a hard-coded controller...not a module\n                if (!$hide_menu && $loc->mod != \"container\") {\n                    $controller = expModules::getController($module);\n//                        $controller = expModules::getControllerClassName($module);\n                    $hccontainer = new stdClass(); //php 5.4\n                    $hccontainer->permissions = array(\n                        'manage'    => (expPermissions::check('manage', $loc) ? 1 : 0),\n                        'configure' => (expPermissions::check('configure', $loc) ? 1 : 0)\n                    );\n\n                    if ($hccontainer->permissions['manage'] || $hccontainer->permissions['configure']) {\n                        $hccontainer->randomizer = mt_rand(1, ceil(microtime(1)));\n                        $hccontainer->view = $view;\n                        $hccontainer->action = $params['action'];\n                        $hccontainer->info['class'] = expModules::getModuleClassName($loc->mod);\n                        $hccontainer->info['module'] = $controller->displayname();\n//                            $hccontainer->info['module'] = $controller::displayname();\n                        $hccontainer->info['source'] = $loc->src;\n                        $hccontainer->info['scope'] = $module_scope[$source][$module]->scope;\n//\t\t\t\t\t\t\t$hccontainer->info['hasConfig'] = true;\n//\t\t\t\t\t\t\t$template = new template('containermodule','_hardcoded_module_menu',$loc);\n//\t\t\t\t\t\t\t$template = new template('containerController','_hardcoded_module_menu',$loc,false,'controllers');\n                        $c2 = new containerController();\n                        $template = expTemplate::get_template_for_action($c2, '_hardcoded_module_menu');\n                        $template->assign('container', $hccontainer);\n                        $template->output();\n                    }\n                }\n//\t\t\t\t}\n\n//\t\t\t\tif ($iscontroller) {\n                $params['src'] = $loc->src;\n                $params['controller'] = $module;\n                $params['view'] = $view;\n                $params['moduletitle'] = $title;\n                return renderAction($params);\n//\t\t\t\t} else {\n//\t\t\t\t\tcall_user_func(array($module,\"show\"),$view,$loc,$title);\n//\t\t\t\t}\n            } else {\n                echo sprintf(gt('The module \"%s\" was not found in the system.'), $module);\n                return false;\n            }\n        }\n    }\n\n    public static function getThemeDetails() {\n        $theme_file = DISPLAY_THEME;\n        if (is_readable(BASE.'themes/'.$theme_file.'/class.php')) {\n            // Need to avoid the duplicate theme problem.\n            if (!class_exists($theme_file)) {\n                include_once(BASE.'themes/'.$theme_file.'/class.php');\n            }\n\n            if (class_exists($theme_file)) {\n                // Need to avoid instantiating non-existent classes.\n                $theme = new $theme_file();\n                return ' ' . gt('using') . ' ' . $theme->name() . ' ' . gt('by') . ' ' . $theme->author();\n            }\n        }\n        return '';\n    }\n\n    /**\n     * Return the color style for the current framework\n     *\n     * @param        $color\n     *\n     * @return mixed|string\n     */\n    public static function buttonColor($color = null)\n    {\n        $colors = array(\n            'green'   => 'btn-success',\n            'blue'    => 'btn-primary',\n            'red'     => 'btn-danger',\n            'magenta' => 'btn-danger',\n            'orange'  => 'btn-warning',\n            'yellow'  => 'btn-warning',\n            'grey'    => 'btn-default',\n            'purple'  => 'btn-info',\n            'black'   => 'btn-inverse',\n            'pink'    => 'btn-danger',\n        );\n        if (bs()) {\n            if (!empty($colors[$color])) { // awesome to bootstrap button conversion\n                $found = $colors[$color];\n            } else {\n                $found = 'btn-default';\n            }\n        } else {\n            $found = array_search($color, $colors); // bootstrap to awesome button conversion?\n            if (empty($found)) {\n                $found = $color;\n            } else {\n                $found = BTN_COLOR;\n            }\n        }\n        return $found;\n    }\n\n    /**\n     * Return the button size for the current framework\n     *\n     * @param        $size\n     *\n     * @return mixed|string\n     */\n    public static function buttonSize($size = null)\n    {\n        if (bs2()) {\n            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {\n                $btn_size = ''; // actually default size, NOT true bootstrap large\n            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {\n                $btn_size = 'btn-mini';\n            } else { // medium\n                $btn_size = 'btn-small';\n            }\n            return $btn_size;\n        } elseif (bs3()) {\n            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {\n                $btn_size = 'btn-lg';\n            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {\n                $btn_size = 'btn-sm';\n            } elseif (BTN_SIZE == 'extrasmall' || (!empty($size) && $size == 'extrasmall')) {\n                $btn_size = 'btn-xs';\n            } else { // medium\n                $btn_size = '';\n            }\n            return $btn_size;\n        } else {\n            if (empty($size)) {\n                $size = BTN_SIZE;\n            }\n            return $size;\n        }\n    }\n\n    /**\n     * Return the button color and size style for the current framework\n     *\n     * @param null   $color\n     * @param        $size\n     *\n     * @return mixed|string\n     */\n    public static function buttonStyle($color = null, $size = null)\n    {\n        if (bs()) {\n            $btn_class = 'btn ' . self::buttonColor($color) . ' ' . self::buttonSize($size);\n        } else {\n            $btn_size = !empty($size) ? $size : BTN_SIZE;\n            $btn_color = !empty($color) ? $color : BTN_COLOR;\n            $btn_class = \"awesome \" . $btn_size . \" \" . $btn_color;\n        }\n        return $btn_class;\n    }\n\n    /**\n     * Return the icon associated for the current frameowrk\n     *\n     * @param        $class\n     *\n     * @return stdClass|string\n     */\n    public static function buttonIcon($class, $size=null)\n    {\n        $btn_type = '';\n        if (bs2()) {\n            switch ($class) {\n                case 'delete' :\n                case 'delete-title' :\n                    $class = \"remove-sign\";\n                    $btn_type = \"btn-danger\"; // red\n                    break;\n                case 'add' :\n                case 'add-title' :\n                case 'add-body' :\n                case 'switchtheme add' :\n                    $class = \"plus-sign\";\n                    $btn_type = \"btn-success\"; // green\n                    break;\n                case 'copy' :\n                    $class = \"copy\";\n                    break;\n                case 'downloadfile' :\n                case 'export' :\n                    $class = \"download-alt\";\n                    break;\n                case 'uploadfile' :\n                case 'import' :\n                    $class = \"upload-alt\";\n                    break;\n                case 'manage' :\n                    $class = \"briefcase\";\n                    break;\n                case 'merge' :\n                case 'arrow_merge' :\n                    $class = \"signin\";\n                    break;\n                case 'reranklink' :\n                case 'alphasort' :\n                    $class = \"sort\";\n                    break;\n                case 'configure' :\n                    $class = \"wrench\";\n                    break;\n                case 'view' :\n                    $class = \"search\";\n                    break;\n                case 'page_next' :\n                    $class = 'double-angle-right';\n                    break;\n                case 'page_prev' :\n                    $class = 'double-angle-left';\n                    break;\n                case 'password' :\n                case 'change_password' :\n                    $class = 'key';\n                    break;\n                case 'clean' :\n                    $class = 'check';\n                    break;\n                case 'userperms' :\n                    $class = 'user';\n                    break;\n                case 'groupperms' :\n                    $class = 'group';\n                    break;\n                case 'monthviewlink' :\n                case 'weekviewlink' :\n                    $class = 'calendar';\n                    break;\n                case 'listviewlink' :\n                    $class = 'list';\n                    break;\n                case 'adminviewlink' :\n                    $class = 'cogs';\n                    break;\n                case 'approve' :\n                    $class = \"check\";\n                    $btn_type = \"btn-success\"; // green\n                    break;\n                case 'ajax' :\n                    $class = \"spinner icon-spin\";\n                    break;\n            }\n            $found = new stdClass();\n            $found->type = $btn_type;\n            $found->class = $class;\n            $found->size = self::iconSize($size);\n            $found->prefix = 'icon-';\n            return $found;\n        } elseif (bs3()) {\n            switch ($class) {\n                case 'delete' :\n                case 'delete-title' :\n                    $class = \"times-circle\";\n                    $btn_type = \"btn-danger\";  // red\n                    break;\n                case 'add' :\n                case 'add-title' :\n                case 'add-body' :\n                case 'switchtheme add' :\n                    $class = \"plus-circle\";\n                    $btn_type = \"btn-success\";  // green\n                    break;\n                case 'copy' :\n                    $class = \"files-o\";\n                    break;\n                case 'downloadfile' :\n                case 'export' :\n                    $class = \"download\";\n                    break;\n                case 'uploadfile' :\n                case 'import' :\n                    $class = \"upload\";\n                    break;\n                case 'manage' :\n                    $class = \"briefcase\";\n                    break;\n                case 'merge' :\n                case 'arrow_merge' :\n                    $class = \"sign-in\";\n                    break;\n                case 'reranklink' :\n                case 'alphasort' :\n                    $class = \"sort\";\n                    break;\n                case 'configure' :\n                    $class = \"wrench\";\n                    break;\n                case 'view' :\n                    $class = \"search\";\n                    break;\n                case 'page_next' :\n                    $class ='angle-double-right';\n                    break;\n                case 'page_prev' :\n                    $class = 'angle-double-left';\n                    break;\n                case 'password' :\n                case 'change_password' :\n                    $class = 'key';\n                    break;\n                case 'clean' :\n                    $class = 'check-square-o';\n                    break;\n                case 'trash' :\n                    $class = \"trash-o\";\n                    break;\n                case 'userperms' :\n                    $class = 'user';\n                    break;\n                case 'groupperms' :\n                    $class = 'group';\n                    break;\n                case 'monthviewlink' :\n                case 'weekviewlink' :\n                    $class = 'calendar';\n                    break;\n                case 'listviewlink' :\n                    $class = 'list';\n                    break;\n                case 'adminviewlink' :\n                    $class = 'cogs';\n                    break;\n                case 'approve' :\n                    $class = \"check\";\n                    $btn_type = \"btn-success\"; // green\n                    break;\n                case 'ajax' :\n                    $class = \"spinner fa-spin\";\n                    break;\n            }\n            $found = new stdClass();\n            $found->type = $btn_type;\n            $found->class = $class;\n            $found->size = self::iconSize($size);\n            $found->prefix = 'fa fa-';\n            return $found;\n        } else {\n            return $class;\n        }\n    }\n\n    /**\n     * Return the full icon style string for the current framework\n     *\n     * @param        $class\n     *\n     * @return string\n     */\n    public static function iconStyle($class, $text = null) {\n        $style = self::buttonIcon($class);\n        if (!empty($style->prefix)) {\n            if ($text) {\n                return '<i class=\"' .$style->prefix . $style->class . '\"></i> '. $text;\n            } else {\n                return $style->prefix . $style->class;\n            }\n        } else {\n            return $style;\n        }\n    }\n\n    /**\n     * Return the icon size for the current framework\n     *\n     * @param        $size\n     *\n     * @return mixed|string\n     */\n    public static function iconSize($size = null)\n    {\n        if (bs2()) {\n            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {\n                $icon_size = 'icon-large';\n            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {\n                $icon_size = '';\n            } else { // medium\n                $icon_size = 'icon-large';\n            }\n            return $icon_size;\n        } elseif (bs3()) {\n            if (BTN_SIZE == 'large' || (!empty($size) && $size == 'large')) {\n                $icon_size = 'fa-lg';\n            } elseif (BTN_SIZE == 'small' || (!empty($size) && $size == 'small')) {\n                $icon_size = '';\n            } else { // medium\n                $icon_size = 'fa-lg';\n            }\n            return $icon_size;\n        } else {\n            return BTN_SIZE;\n        }\n    }\n\n    public static function is_mobile()\n    {\n        $tablet_browser = 0;\n        $mobile_browser = 0;\n\n        if (preg_match(\n            '/(tablet|ipad|playbook)|(android(?!.*(mobi|opera mini)))/i',\n            strtolower($_SERVER['HTTP_USER_AGENT'])\n        )\n        ) {\n            $tablet_browser++;\n        }\n\n        if (preg_match(\n            '/(up.browser|up.link|mmp|symbian|smartphone|midp|wap|phone|android|iemobile)/i',\n            strtolower($_SERVER['HTTP_USER_AGENT'])\n        )\n        ) {\n            $mobile_browser++;\n        }\n\n        if ((!empty($_SERVER['HTTP_ACCEPT']) && strpos(\n                    strtolower($_SERVER['HTTP_ACCEPT']),\n                    'application/vnd.wap.xhtml+xml'\n                ) > 0) or ((isset($_SERVER['HTTP_X_WAP_PROFILE']) or isset($_SERVER['HTTP_PROFILE'])))\n        ) {\n            $mobile_browser++;\n        }\n\n        $mobile_ua = strtolower(substr($_SERVER['HTTP_USER_AGENT'], 0, 4));\n        $mobile_agents = array(\n            'w3c ',\n            'acs-',\n            'alav',\n            'alca',\n            'amoi',\n            'audi',\n            'avan',\n            'benq',\n            'bird',\n            'blac',\n            'blaz',\n            'brew',\n            'cell',\n            'cldc',\n            'cmd-',\n            'dang',\n            'doco',\n            'eric',\n            'hipt',\n            'inno',\n            'ipaq',\n            'java',\n            'jigs',\n            'kddi',\n            'keji',\n            'leno',\n            'lg-c',\n            'lg-d',\n            'lg-g',\n            'lge-',\n            'maui',\n            'maxo',\n            'midp',\n            'mits',\n            'mmef',\n            'mobi',\n            'mot-',\n            'moto',\n            'mwbp',\n            'nec-',\n            'newt',\n            'noki',\n            'palm',\n            'pana',\n            'pant',\n            'phil',\n            'play',\n            'port',\n            'prox',\n            'qwap',\n            'sage',\n            'sams',\n            'sany',\n            'sch-',\n            'sec-',\n            'send',\n            'seri',\n            'sgh-',\n            'shar',\n            'sie-',\n            'siem',\n            'smal',\n            'smar',\n            'sony',\n            'sph-',\n            'symb',\n            't-mo',\n            'teli',\n            'tim-',\n            'tosh',\n            'tsm-',\n            'upg1',\n            'upsi',\n            'vk-v',\n            'voda',\n            'wap-',\n            'wapa',\n            'wapi',\n            'wapp',\n            'wapr',\n            'webc',\n            'winw',\n            'winw',\n            'xda ',\n            'xda-'\n        );\n\n        if (in_array($mobile_ua, $mobile_agents)) {\n            $mobile_browser++;\n        }\n\n        if (strpos(strtolower($_SERVER['HTTP_USER_AGENT']), 'opera mini') > 0) {\n            $mobile_browser++;\n            //Check for tablets on opera mini alternative headers\n            $stock_ua = strtolower(\n                isset($_SERVER['HTTP_X_OPERAMINI_PHONE_UA']) ? $_SERVER['HTTP_X_OPERAMINI_PHONE_UA'] : (isset($_SERVER['HTTP_DEVICE_STOCK_UA']) ? $_SERVER['HTTP_DEVICE_STOCK_UA'] : '')\n            );\n            if (preg_match('/(tablet|ipad|playbook)|(android(?!.*mobile))/i', $stock_ua)) {\n                $tablet_browser++;\n            }\n        }\n\n        if (strpos(strtolower($_SERVER['HTTP_USER_AGENT']), 'windows') > 0) {\n            $mobile_browser = 0;\n        }\n\n        if ($tablet_browser > 0) {\n            // do something for tablet devices\n//           print 'is tablet';\n        } elseif ($mobile_browser > 0) {\n            // do something for mobile devices\n//            print 'is mobile';\n        } else {\n            // do something for everything else\n//            print 'is desktop';\n        }\n\n        return $mobile_browser;\n    }\n\n    /**\n     * Warn admin of obsolete theme methods\n     *\n     * @param string $newcall\n     * @param null $controller\n     * @param null $actionview\n     */\n    public static function deprecated($newcall = \"expTheme::module()\", $controller = null, $actionview = null)\n    {\n        global $user;\n\n        if ($user->isAdmin() && DEVELOPMENT) {\n            $trace = debug_backtrace();\n            $caller = $trace[1];\n            if (substr($caller['file'], -16, 6) == 'compat') {\n                $caller = $trace[2];\n            }\n            $oldcall = $caller['function'];\n            if ($caller['class'] == 'expTheme') {\n                $oldcall = $caller['class'] . '::' . $oldcall;\n            }\n            $message = '<strong>' . $oldcall . '</strong> ' . gt(\n                    'is deprecated and should be replaced by'\n                ) . ' <strong>' . $newcall . '</strong>';\n            if (!empty($controller)) {\n                $message .= '<br>' . gt(\n                        'for hard coded module'\n                    ) . ' - <strong>' . $controller . ' / ' . $actionview . '</strong>';\n            }\n            $message .= '<br>' . gt('line') . ' #' . $caller['line'] . ' ' . gt('of') . $caller['file'];\n            $message .= ' <a class=\"helplink\" title=\"' . gt('Get Theme Update Help') . '\" href=\"' . help::makeHelpLink(\n                    'theme_update'\n                ) . '\" target=\"_blank\">' . gt('Help') . '</a>';\n            flash('notice', $message);\n        }\n    }\n\n}\n\n?>"], "filenames": ["framework/core/subsystems/database/mysqli.php", "framework/core/subsystems/expDatabase.php", "framework/core/subsystems/expRouter.php", "framework/core/subsystems/expString.php", "framework/core/subsystems/expTheme.php"], "buggy_code_start_loc": [381, 1107, 201, 525, 765], "buggy_code_end_loc": [1263, 1107, 764, 542, 847], "fixing_code_start_loc": [382, 1108, 201, 525, 765], "fixing_code_end_loc": [1274, 1123, 779, 542, 848], "type": "CWE-89", "message": "Multiple SQL injection vulnerabilities in Exponent CMS before 2.4.0 allow remote attackers to execute arbitrary SQL commands via the (1) id parameter in an activate_address address controller action, (2) title parameter in a show blog controller action, or (3) content_id parameter in a showComments expComment controller action.", "other": {"cve": {"id": "CVE-2016-7400", "sourceIdentifier": "cve@mitre.org", "published": "2017-02-07T15:59:00.507", "lastModified": "2018-02-27T02:29:00.317", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Multiple SQL injection vulnerabilities in Exponent CMS before 2.4.0 allow remote attackers to execute arbitrary SQL commands via the (1) id parameter in an activate_address address controller action, (2) title parameter in a show blog controller action, or (3) content_id parameter in a showComments expComment controller action."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de inyecci\u00f3n SQL en Exponent CMS en versiones anteriores a 2.4.0 permite a atacantes remotos ejecutar comandos SQL arbitrarios a trav\u00e9s del par\u00e1metro (1) id en una acci\u00f3n de controlador de direcci\u00f3n activate_address, (2) title en una acci\u00f3n del controlador show blog o (3) content_id en una acci\u00f3n del controlador showComments expComment."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:exponentcms:exponent_cms:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.3.9", "matchCriteriaId": "C723D5FF-CEE4-461B-911F-E760A7BF1805"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2016/09/18/10", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2016/09/18/2", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/93041", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://exponentcms.lighthouseapp.com/projects/61783/changesets/e916702a91a6342bbab483a2be2ba2f11dca3aa3", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/exponentcms/exponent-cms/commit/e916702a91a6342bbab483a2be2ba2f11dca3aa3", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/exponentcms/exponent-cms/releases/tag/v2.4.0", "source": "cve@mitre.org"}, {"url": "https://www.exploit-db.com/exploits/40412/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/exponentcms/exponent-cms/commit/e916702a91a6342bbab483a2be2ba2f11dca3aa3"}}