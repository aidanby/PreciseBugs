{"buggy_code": ["<?php\n/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once \"./setup/classes/class.ilSetup.php\";\nrequire_once('./Services/Database/classes/class.ilDBConstants.php');\n\n/**\n * Setup GUI class\n *\n * class to setup ILIAS first and maintain the ini-settings and the database\n *\n * @author   Sascha Hofmann <shofmann@databay.de>\n * @version  $Id$\n */\nclass ilSetupGUI\n{\n\tvar $tpl;       // template object\n\tvar $lng;       // language objet\n\tvar $log;       // log object\n\n\tvar $btn_prev_on = false;   // toggle previous button on/off\n\tvar $btn_prev_cmd;          // command processed when previous button was clicked\n\tvar $btn_prev_lng;          // previous button label\n\n\tvar $btn_next_on = false;   // toggle NEXT button on/off\n\tvar $btn_next_cmd;          // command processed when next button was clicked\n\tvar $btn_next_lng;          // next button label\n\n\tvar $revision;              // cvs revision of this script\n\tvar $version;               // cvs version of this script\n\tvar $lang;                  // current language (lang_key)\n\n\tvar $cmd;                       // command variable\n\tvar $display_mode = \"view\";     // view mode (setup or details)\n\n\t/**\n\t * Constructor\n\t *\n\t */\n\tfunction __construct()\n\t{\n\t\tglobal $tpl, $lng;\n\n\t\t$this->tpl = $tpl;\n\t\t$this->lng = $lng;\n\n\t\t// note: this is currently only used for subtabs, alex 8.1.2012\n\t\tinclude_once(\"./Services/UIComponent/Tabs/classes/class.ilTabsGUI.php\");\n\t\t$this->tabs = new ilTabsGUI();\n\t\t$this->tabs->setSetupMode(true);\n\n\t\tinclude_once(\"./Services/jQuery/classes/class.iljQueryUtil.php\");\n\t\tiljQueryUtil::initjQuery($this->tpl);\n\t\tinclude_once(\"./Services/YUI/classes/class.ilYuiUtil.php\");\n\t\tilYuiUtil::initDomEvent();\n\n\t\t$tpl->addJavaScript(\"./Services/JavaScript/js/Basic.js\", 0);\n\n\t\tinclude_once(\"./Services/UICore/classes/class.ilUIFramework.php\");\n\t\tilUIFramework::init($this->tpl);\n\n\t\t// CVS - REVISION - DO NOT MODIFY\n\t\t$this->revision = '$Revision$';\n\t\t$this->version = \"2 \".substr(substr($this->revision,1),0,-2);\n\t\t$this->lang = $this->lng->lang_key;\n\n\t\t// init setup\n\t\t$this->setup = new ilSetup($_SESSION[\"auth\"],$_SESSION[\"access_mode\"]);\n\n\t\t// init client object if exists\n\t\t$client_id = ($_GET[\"client_id\"]) ? $_GET[\"client_id\"] : $_SESSION[\"ClientId\"];\n\t\tif ($_POST[\"client_id\"] != \"\")\n\t\t{\n\t\t\t$client_id = $_POST[\"client_id\"];\n\t\t}\n\n/*if ($_POST[\"client_id\"] == \"\")\n{\necho \"<br>+\".$_GET[\"client_id\"];\necho \"<br>+\".$_POST[\"client_id\"];\necho \"<br>+\".$_SESSION[\"ClientId\"];\necho \"<br>+\".$client_id;\n}*/\n\t\t// for security\n\t\tif (!$this->setup->isAdmin() and $client_id != $_SESSION[\"ClientId\"])\n\t\t{\n\t\t\t$client_id = $_SESSION[\"ClientId\"];\n\t\t}\n\n\t\t$this->client_id = $client_id;\n\n\t\t$this->setup->ini_client_exists = $this->setup->newClient($client_id);\n\t\tif (is_object($this->setup->getClient()))\n\t\t{\n\t\t\t$this->setup->getClient()->status = $this->setup->getStatus($client_id);\n\t\t}\n\n\t\t// determine command\n\t\tif (($this->cmd = $_GET[\"cmd\"]) == \"gateway\")\n\t\t{\n\t\t\t// surpress warning if POST is not set\n\t\t\t@$this->cmd = key($_POST[\"cmd\"]);\n\t\t}\n\n\t\t// determine display mode here\n\t\t// TODO: depending on previous setting (session)\n\t\t// OR switch to 'setup'-mode if someone logs in as client and client's setup wasn't finished (-> entry in settings table does not exist)\n\t\tif ($this->setup->isAuthenticated() and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $this->cmd != \"clientlist\" and $this->cmd != \"\")\n\t\t{\n\t\t\t$this->setDisplayMode(\"setup\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->setDisplayMode($_SESSION[\"display_mode\"]);\n\t\t}\n\n\t\t// output starts here\n\n\n\t\t// main cmd handling\n\t\tif (!$this->setup->isAuthenticated() or !$this->setup->isInstalled())\n\t\t{\n\t\t\t// check for first time installation or migrate an old one first\n\t\t\tif (!$this->setup->isInstalled() or !($this->setup->ini->readVariable(\"clients\",\"path\")))\n\t\t\t{\n\t\t\t\t$this->cmdInstall();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($this->cmd == \"performLogin\" || $this->cmd == \"performMLogin\")\n\t\t\t\t{\n\t\t\t\t\t$cmd = $this->cmd;\n\t\t\t\t\t$this->$cmd();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayLogin();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($this->setup->isAdmin())\n\t\t\t{\n\t\t\t\t$this->cmdAdmin();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->cmdClient();\n\t\t\t}\n\t\t}\n\n\t\t// display header\n\t\t$this->displayHeader();\n\n\t\tif (DEBUG)\n\t\t{\n\t\t\techo \"cmd: \".$this->cmd.\" | access: \".$this->setup->access_mode.\" | display: \".$this->display_mode;\n\t\t\tvar_dump($this->setup->getClient()->status);\n\t\t}\n\n\t\t// display footer\n\t\t$this->displayFooter();\n\n\t\t// end output\n\n\t}  // end constructor\n\n\t// cmd subsets\n\n\t/**\n\t * process valid commands for pre-installation status\n\t */\n\tfunction cmdInstall()\n\t{\n\t\t$cmd = $this->cmd;\n\t\tswitch ($this->cmd)\n\t\t{\n\t\t\tcase NULL:\n\t\t\tcase \"preliminaries\":\n\t\t\t\t$this->setup->checkPreliminaries();\n\t\t\t\t$this->displayPreliminaries();\n\t\t\t\tbreak;\n\n\t\t\tcase \"install\":\n\t\t\t\t$this->displayMasterSetup();\n\t\t\t\tbreak;\n\n\t\t\tcase \"determineToolsPathInstall\":\n\t\t\t\t$this->determineToolsPathInstall();\n\t\t\t\tbreak;\n\n\t\t\tcase \"saveBasicSettings\":\n\t\t\t\t$this->$cmd();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$this->displayError($this->lng->txt(\"unknown_command\").\": '\".$this->cmd.\"'\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * process valid commands for admins\n\t */\n\tfunction cmdAdmin()\n\t{\n\t\t$cmd = $this->cmd;\n\t\tswitch ($this->cmd)\n\t\t{\n\t\t\tcase NULL:\n\t\t\tcase \"clientlist\":\n\t\t\t\t\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->displayClientList();\n\t\t\t\t$this->active_tab = \"clientlist\";\n\t\t\t\tbreak;\n\n\t\t\tcase \"changepassword\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->changeMasterPassword();\n\t\t\t\t$this->active_tab = \"password\";\n\t\t\t\tbreak;\n\n\t\t\tcase \"mastersettings\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->changeMasterSettings();\n\t\t\t\t$this->active_tab = \"basicsettings\";\n\t\t\t\tbreak;\n\n\t\t\tcase \"determineToolsPath\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->determineToolsPath();\n\t\t\t\tbreak;\n\n\t\t\tcase \"changedefault\":\n\t\t\t\t$this->changeDefaultClient();\n\t\t\t\tbreak;\n\n\t\t\tcase \"newclient\":\n\t\t\t\t$this->cmd = \"selectdb\";\n\t\t\t\t$this->setDisplayMode(\"setup\");\n\t\t\t\t$this->setup->ini_client_exists = $this->setup->newClient();\n\t\t\t\t$this->selectDBType();\n\t\t\t\tbreak;\n\n\t\t\tcase \"selectdbtype\":\n\t\t\tcase \"displayIni\":\n\t\t\t\t$this->cmd = \"ini\";\n\t\t\t\t$this->setDisplayMode(\"setup\");\n\t\t\t\t//$this->setup->ini_client_exists = $this->setup->newClient($this->client_id);\n\t\t\t\t$this->displayIni();\n\t\t\t\tbreak;\n\n\t\t\tcase \"startup\":\n\t\t\t\t$this->setDisplayMode(\"setup\");\n\t\t\t\t$this->setup->ini_client_exists = $this->setup->newClient();\n\t\t\t\t$this->displayStartup();\n\t\t\t\tbreak;\n\n\t\t\tcase \"delete\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->displayDeleteConfirmation();\n\t\t\t\tbreak;\n\n\t\t\tcase \"togglelist\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->toggleClientList();\n\t\t\t\tbreak;\n\n\t\t\tcase \"preliminaries\":\n\t\t\t\t$this->setup->checkPreliminaries();\n\t\t\t\t$this->displayPreliminaries();\n\t\t\t\t$this->active_tab = \"preliminaries\";\n\t\t\t\tbreak;\n\n\t\t\tcase \"updateBasicSettings\":\n\t\t\tcase \"performLogin\":\n\t\t\tcase \"performMLogin\":\n\t\t\t\t$this->$cmd();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$this->cmdClient();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * process valid commands for all clients\n\t */\n\tfunction cmdClient()\n\t{\n\t\t$cmd = $this->cmd;\n\t\tswitch ($this->cmd)\n\t\t{\n\t\t\tcase NULL:\n\t\t\tcase \"view\":\n\t\t\t\tif ($this->setup->getClient()->db_installed)\n\t\t\t\t{\n\t\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t\t$this->displayClientOverview();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->cmd = \"db\";\n\t\t\t\t\t$this->displayDatabase();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"ini\":\n\t\t\t\t// only allow access to ini if db does not exist yet\n\t\t\t\t//if ($this->setup->getClient()->db_installed)\n\t\t\t\t//{\n\t\t\t\t//\t$this->cmd = \"db\";\n\t\t\t\t//\t$this->displayDatabase();\n\t\t\t\t//}\n\t\t\t\t//else\n\t\t\t\t//{\n\t\t\t\t\t$this->displayIni();\n\t\t\t\t//}\n\t\t\t\tbreak;\n\n\t\t\tcase \"db\":\n\t\t\t\t$this->displayDatabase();\n\t\t\t\tbreak;\n\n\t\t\tcase \"dbslave\":\n\t\t\t\t$this->displayDatabaseSlave();\n\t\t\t\tbreak;\n\n\t\t\tcase \"sess\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"sess\" and $this->setup->error === true)\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displaySessions();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"lang\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"lang\" and $this->setup->error === true)\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayLanguages();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"contact\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"contact\")\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayContactData();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"proxy\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"proxy\")\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayProxy();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"cache\":\n\t\t\t\t$this->displayCache();\n\t\t\t\tbreak;\n\n\n\t\t\tcase \"nic\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"nic\")\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayNIC();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"finish\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"finish\")\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayFinishSetup();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"changeaccess\":\n\t\t\t\t$this->changeAccessMode($_GET[\"back\"]);\n\t\t\t\tbreak;\n\n\t\t\tcase \"logout\":\n\t\t\t\t$this->displayLogout();\n\t\t\t\tbreak;\n\n\t\t\tcase \"login\":\n\t\t\t\tsession_destroy();\n\t\t\t\tilUtil::redirect(ILIAS_HTTP_PATH.\"/login.php?client_id=\".$this->setup->getClient()->getId());\n\t\t\t\tbreak;\n\n\t\t\tcase \"login_new\":\n\t\t\t\tif ($this->setup->getClient()->ini->readVariable(\"client\",\"access\") != \"1\")\n\t\t\t\t{\n\t\t\t\t\t$this->setup->getClient()->ini->setVariable(\"client\",\"access\",\"1\");\n\t\t\t\t\t$this->setup->getClient()->ini->write();\n\t\t\t\t}\n\n\t\t\t\tsession_destroy();\n\t\t\t\tilUtil::redirect(ILIAS_HTTP_PATH.\"/login.php?client_id=\".$this->setup->getClient()->getId());\n\t\t\t\tbreak;\n\n\t\t\tcase \"tools\":\n\t\t\t\t$this->displayTools();\n\t\t\t\tbreak;\n\n\t\t\tcase \"reloadStructure\":\n\t\t\t\t$this->reloadControlStructure();\n\t\t\t\tbreak;\n\n\t\t\tcase 'switchTree':\n\t\t\t\t$this->switchTree();\n\t\t\t\tbreak;\n\n\t\t\tcase \"saveClientIni\":\n\t\t\tcase \"installDatabase\":\n\t\t\tcase \"displayDatabase\":\n\t\t\tcase \"updateDatabase\":\n\t\t\tcase \"showUpdateSteps\":\n\t\t\tcase \"saveLanguages\":\n\t\t\tcase \"saveContact\":\n\t\t\tcase \"displayContactData\":\n\t\t\tcase \"displayNIC\":\n\t\t\tcase \"saveRegistration\":\n\t\t\tcase \"applyHotfix\":\n\t\t\tcase \"showHotfixSteps\":\n\t\t\tcase \"applyCustomUpdates\":\n\t\t\tcase \"changeSettingsType\":\n\t\t\tcase \"showLongerSettings\":\n\t\t\tcase \"cloneSelectSource\":\n\t\t\tcase \"cloneSaveSource\":\n\t\t\tcase \"saveProxy\":\n\t\t\tcase \"displayPassword\":\n\t\t\tcase \"savePassword\":\n\t\t\tcase \"saveDbSlave\":\n\t\t\tcase \"saveCache\":\n\t\t\tcase \"addMemcacheServer\":\n\t\t\tcase \"deleteMemcacheServer\":\n\t\t\tcase \"editMemcacheServer\":\n\t\t\tcase \"createMemcacheServer\":\n\t\t\tcase \"updateMemcacheServer\":\n\t\t\tcase \"flushCache\":\n\t\t\t\t$this->$cmd();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$this->setDisplayMode(\"setup\");\n\t\t\t\t$this->displayError($this->lng->txt(\"unknown_command\").\": '\".$this->cmd.\"'\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// end cmd subsets \n\n\t////\n\t//// GENERAL DISPLAY FUNCTIONS\n\t////\n\n\t/**\n\t * set display mode to 'view' or 'setup'\n\t * 'setup' -> show status panel and (prev/next) navigation buttons\n\t * 'view' -> show overall status and tabs under title bar\n\t *\n\t * @param    string      display mode\n\t * @return   boolean     true if display mode was successfully set\n\t */\n\tfunction setDisplayMode($a_mode)\n\t{\n\t\t// security\n\t\tif ($a_mode != \"view\" and $a_mode != \"setup\")\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->display_mode = $a_mode;\n\t\t$_SESSION[\"display_mode\"] = $this->display_mode;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * display header with admin links and language flags\n\t */\n\tfunction displayHeader()\n\t{\n\t\t$languages = $this->lng->getLanguages();\n\n\t\t$count = (int) round(count($languages) / 2);\n\t\t$num = 1;\n\t\t\n\t\tsort($languages); // #16837\n\t\tforeach ($languages as $lang_key)\n\t\t{\n\t\t\t/*\n\t\t\tif ($num === $count)\n\t\t\t{\n\t\t\t\t$this->tpl->touchBlock(\"lng_new_row\");\n\t\t\t}\n\t\t\t*/\n\t\t\t$this->tpl->setCurrentBlock(\"languages\");\n\t\t\t$this->tpl->setVariable(\"LINK_LANG\", \"./setup.php?cmd=\".$this->cmd.\"&amp;lang=\".$lang_key);\n\t\t\t$this->tpl->setVariable(\"LANG_NAME\", $this->lng->txt(\"meta_l_\".$lang_key));\n\t\t\t$this->tpl->setVariable(\"LANG_ICON\", $lang_key);\n\t\t\t$this->tpl->setVariable(\"LANG_KEY\", $lang_key);\n\t\t\t$this->tpl->setVariable(\"BORDER\", 0);\n\t\t\t$this->tpl->setVariable(\"VSPACE\", 0);\n\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t$num++;\n\t\t}\n\n\t\tif (count($languages) % 2)\n\t\t{\n\t\t\t$this->tpl->touchBlock(\"lng_empty_cell\");\n\t\t}\n\n\t\tif ($this->cmd != \"logout\" and $this->setup->isInstalled() and $this->setup->isAuthenticated())\n\t\t{\n\t\t\t// add client link\n\t\t\tif ($this->setup->isAdmin())\n\t\t\t{\n\t\t\t\tif ($this->display_mode == \"view\" or $this->cmd == \"clientlist\" or $this->cmd == \"changepassword\" or $this->cmd == \"mastersettings\")\n\t\t\t\t{\n\t\t\t\t\t$this->tpl->setCurrentBlock(\"add_client\");\n\t\t\t\t\t$this->tpl->setVariable(\"TXT_ADD_CLIENT\",ucfirst($this->lng->txt(\"new_client\")));\n\t\t\t\t\t$this->tpl->parseCurrentBlock();\n\t\t\t\t}\n\n\t\t\t\t// client list link\n\t\t\t\t$class = ($this->active_tab == \"clientlist\")\n\t\t\t\t\t? \"ilSMActive\"\n\t\t\t\t\t: \"ilSMInactive\";\n\t\t\t\t$this->tpl->setCurrentBlock(\"display_list\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_LIST\",ucfirst($this->lng->txt(\"list_clients\")));\n\t\t\t\t$this->tpl->setVariable(\"TAB_CLASS\", $class);\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t\t// edit paths link\n\t\t\t\t$class = ($this->active_tab == \"basicsettings\")\n\t\t\t\t\t? \"ilSMActive\"\n\t\t\t\t\t: \"ilSMInactive\";\n\t\t\t\t$this->tpl->setCurrentBlock(\"edit_pathes\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_EDIT_PATHES\",$this->lng->txt(\"basic_settings\"));\n\t\t\t\t$this->tpl->setVariable(\"TAB_CLASS\", $class);\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t\t// preliminaries\n\t\t\t\t$class = ($this->active_tab == \"preliminaries\")\n\t\t\t\t\t? \"ilSMActive\"\n\t\t\t\t\t: \"ilSMInactive\";\n\t\t\t\t$this->tpl->setCurrentBlock(\"preliminaries\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_PRELIMINARIES\",$this->lng->txt(\"preliminaries\"));\n\t\t\t\t$this->tpl->setVariable(\"TAB_CLASS\", $class);\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t\t// change password link\n\t\t\t\t$class = ($this->active_tab == \"password\")\n\t\t\t\t\t? \"ilSMActive\"\n\t\t\t\t\t: \"ilSMInactive\";\n\t\t\t\t$this->tpl->setCurrentBlock(\"change_password\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_CHANGE_PASSWORD\",ucfirst($this->lng->txt(\"password\")));\n\t\t\t\t$this->tpl->setVariable(\"TAB_CLASS\", $class);\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\t\t\t}\n\n\t\t\t// logout link\n\t\t\tif ($this->setup->isAuthenticated())\n\t\t\t{\n\t\t\t\t$this->tpl->setCurrentBlock(\"logout\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_LOGOUT\",$this->lng->txt(\"logout\"));\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\t\t\t}\n\t\t}\n\n\t\t$this->tpl->setVariable(\"VAL_CMD\", $_GET[\"cmd\"]);\n\t\t$this->tpl->setVariable(\"TXT_OK\",$this->lng->txt(\"change\"));\n\t\t$this->tpl->setVariable(\"TXT_CHOOSE_LANGUAGE\",$this->lng->txt(\"choose_language\"));\n\t\t$this->tpl->setVariable(\"PAGETITLE\",\"Setup\");\n\t\t//$this->tpl->setVariable(\"LOCATION_STYLESHEET\",\"./templates/blueshadow.css\");\n\t\t$this->tpl->setVariable(\"LOCATION_STYLESHEET\",\"../templates/default/delos.css\");\n\t\t$this->tpl->setVariable(\"LOCATION_CONTENT_STYLESHEET\",\"./css/setup.css\");\n\t\t$this->tpl->setVariable(\"TXT_ILIAS_VERSION\", \"ILIAS \".ILIAS_VERSION);\n\t\t$this->tpl->setVariable(\"TXT_SETUP\",$this->lng->txt(\"setup\"));\n\t\t$this->tpl->setVariable(\"VERSION\", $this->version);\n\t\t$this->tpl->setVariable(\"TXT_VERSION\", $this->lng->txt(\"version\"));\n\t\t$this->tpl->setVariable(\"LANG\", $this->lang);\n\t}\n\n\t/**\n\t * page output and set title\n\t */\n\tfunction displayFooter()\n\t{\n\t\t// footer (not really)\n\t\tif ($this->cmd != \"logout\")\n\t\t{\n\t\t\tif ($this->setup->ini_ilias_exists and $this->display_mode == \"setup\" and $this->setup->getClient()->getId() != \"\")\n\t\t\t{\n\t\t\t\t$this->tpl->setVariable(\"TXT_ACCESS_MODE\",\"(\".$this->lng->txt(\"client_id\").\": \".$this->setup->getClient()->getId().\")\");\n\t\t\t}\n\t\t\telseif ($this->setup->isAdmin())\n\t\t\t{\n\t\t\t\t$this->tpl->setVariable(\"TXT_ACCESS_MODE\",\"(\".$this->lng->txt(\"root_access\").\")\");\n\t\t\t}\n\n\t\t\t$this->displayNavButtons();\n\t\t}\n\n\t\t$this->tpl->show();\n\t}\n\n\t/**\n\t * display navigation buttons\n\t *\n\t * @return   boolean     false if both buttons are deactivated\n\t */\n\tfunction displayNavButtons()\n\t{\n\t\tif (!$this->btn_prev_on and !$this->btn_next_on)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$ntpl = new ilTemplate(\"tpl.navbuttons.html\", true, true, \"setup\");\n\t\t//$this->tpl->addBlockFile(\"NAVBUTTONS\",\"navbuttons\",\"tpl.navbuttons.html\", \"setup\");\n\n\t\t$ntpl->setVariable(\"FORMACTION_BUTTONS\",\"setup.php?cmd=gateway\");\n\n\t\tif ($this->btn_prev_on)\n\t\t{\n\t\t\t$ntpl->setCurrentBlock(\"btn_back\");\n\t\t\t$ntpl->setVariable(\"TXT_PREV\", $this->btn_prev_lng);\n\t\t\t$ntpl->setVariable(\"CMD_PREV\", $this->btn_prev_cmd);\n\t\t\t$ntpl->parseCurrentBlock();\n\t\t}\n\n\t\tif ($this->btn_next_on)\n\t\t{\n\t\t\t$ntpl->setCurrentBlock(\"btn_forward\");\n\t\t\t$ntpl->setVariable(\"TXT_NEXT\", $this->btn_next_lng);\n\t\t\t$ntpl->setVariable(\"CMD_NEXT\", $this->btn_next_cmd);\n\t\t\t$ntpl->parseCurrentBlock();\n\t\t}\n\n\t\t$nav_html = $ntpl->get();\n\t\t$this->tpl->setVariable(\"NAVBUTTONS\", $nav_html);\n\t\tif (!$this->no_second_nav)\n\t\t{\n\t\t\t$this->tpl->setVariable(\"NAVBUTTONS2\", $nav_html);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * set previous navigation button\n\t *\n\t * @param    string      command to process on click\n\t * @param    string      button label\n\t */\n\tfunction SetButtonPrev($a_cmd = 0,$a_lng = 0)\n\t{\n\t\t$this->btn_prev_on = true;\n\t\t$this->btn_prev_cmd = ($a_cmd) ? $a_cmd : \"gateway\";\n\t\t$this->btn_prev_lng = ($a_lng) ? $this->lng->txt($a_lng) : $this->lng->txt(\"prev\");\n\t}\n\n\t/**\n\t * set next navigation button\n\t *\n\t * @param    string      command to process on click\n\t * @param    string      button label\n\t */\n\tfunction SetButtonNext($a_cmd,$a_lng = 0)\n\t{\n\t\t$this->btn_next_on = true;\n\t\t$this->btn_next_cmd = ($a_cmd) ? $a_cmd : \"gateway\";\n\t\t$this->btn_next_lng = ($a_lng) ? $this->lng->txt($a_lng) : $this->lng->txt(\"next\");\n\t}\n\n\t////\n\t//// CLIENT OVERVIEW\n\t////\n\n\t/**\n\t * display client overview panel\n\t */\n\tfunction displayClientOverview()\n\t{\n\t\t$this->checkDisplayMode();\n\n\t\t// disable/enable button\n\t\t$btpl = new ilTemplate(\"tpl.buttons.html\", true, true, \"setup\");\n\t\t$btpl->setCurrentBlock(\"btn\");\n\t\t$btpl->setVariable(\"CMD\", \"changeaccess\");\n\t\t$access_button = ($this->setup->getClient()->status[\"access\"][\"status\"]) ? \"disable\" : \"enable\";\n\t\t$btpl->setVariable(\"TXT\", $this->lng->txt($access_button));\n\t\t$btpl->setVariable(\"FORMACTION\", \"setup.php?cmd=gateway\");\n\t\t$btpl->parseCurrentBlock();\n\t\t$this->tpl->setVariable(\"BUTTONS\", $btpl->get());\n\n\t\t$this->initClientOverviewForm();\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\t$this->displayStatusPanel();\n\t}\n\n\t/**\n\t * Init client overview form.\n\t */\n\tpublic function initClientOverviewForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t$this->form->setTitle($lng->txt(\"client_info\"));\n\n\t\t// installation name\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"inst_name\"), \"inst_name\");\n\t\t$ne->setValue(($this->setup->getClient()->getName())\n\t\t\t? $this->setup->getClient()->getName()\n\t\t\t: \"&lt;\".$this->lng->txt(\"no_client_name\").\"&gt;\");\n\t\t$ne->setInfo($this->setup->getClient()->getDescription());\n\t\t$this->form->addItem($ne);\n\n\t\t// client id\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"client_id\"), \"client_id\");\n\t\t$ne->setValue($this->setup->getClient()->getId());\n\t\t$this->form->addItem($ne);\n\n\t\t// nic id\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"ilias_nic_id\"), \"nic_id\");\n\t\t$ne->setValue(($this->setup->getClient()->db_installed)\n\t\t\t? $settings[\"inst_id\"]\n\t\t\t: $txt_no_database);\n\t\t$this->form->addItem($ne);\n\n\t\t// database version\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"db_version\"), \"db_vers\");\n\t\t$ne->setValue(($this->setup->getClient()->db_installed)\n\t\t\t? $settings[\"db_version\"]\n\t\t\t: $txt_no_database);\n\t\t$this->form->addItem($ne);\n\n\t\t// access status\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"access_status\"), \"status\");\n\t\t//$access_link = \"&nbsp;&nbsp;[<a href=\\\"setup.php?cmd=changeaccess&client_id=\".$this->setup->getClient()->getId().\"&back=view\\\">\".$this->lng->txt($access_button).\"</a>]\";\n\t\t$access_status = ($this->setup->getClient()->status[\"access\"][\"status\"]) ? \"online\" : \"disabled\";\n\t\t$ne->setValue($this->lng->txt($access_status).$access_link);\n\t\t$this->form->addItem($ne);\n\n\t\t// server information\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($this->lng->txt(\"server_info\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// ilias version\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"ilias_version\"), \"il_vers\");\n\t\t$ne->setValue(ILIAS_VERSION);\n\t\t$this->form->addItem($ne);\n\n\t\t// host\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"host\"), \"host\");\n\t\t$ne->setValue($_SERVER[\"SERVER_NAME\"]);\n\t\t$this->form->addItem($ne);\n\n\t\t// ip address and port\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"ip_address\").\" & \".\n\t\t\t$lng->txt(\"port\"));\n\t\t$ne->setValue($_SERVER[\"SERVER_ADDR\"].\":\".$_SERVER[\"SERVER_PORT\"]);\n\t\t$this->form->addItem($ne);\n\n\t\t// server software\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"server_software\"), \"server_softw\");\n\t\t$ne->setValue($_SERVER[\"SERVER_SOFTWARE\"]);\n\t\t$this->form->addItem($ne);\n\n\t\t// http path\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"http_path\"), \"http_path\");\n\t\t$ne->setValue(ILIAS_HTTP_PATH);\n\t\t$this->form->addItem($ne);\n\n\t\t// absolute path\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"absolute_path\"), \"absolute_path\");\n\t\t$ne->setValue(ILIAS_ABSOLUTE_PATH);\n\t\t$this->form->addItem($ne);\n\n\t\t// third party tools\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($this->lng->txt(\"3rd_party_software\"));\n\t\t$this->form->addItem($sh);\n\n\t\t$tools = array(\"convert\", \"zip\", \"unzip\", \"ghostscript\", \"java\", \"ffmpeg\");\n\n\t\tforeach ($tools as $tool)\n\t\t{\n\t\t\t// tool\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt($tool.\"_path\"), $tool.\"_path\");\n\t\t\t$p = $this->setup->ini->readVariable(\"tools\", $tool);\n\t\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t\t$this->form->addItem($ne);\n\t\t}\n\n\t\t// latex\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"url_to_latex\"), \"latex_url\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\", \"latex\"); // #13109\n\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// virus scanner\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"virus_scanner\"), \"vscan\");\n\t\t$ne->setValue($this->setup->ini->readVariable(\"tools\",\"vscantype\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// scan command\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"scan_command\"), \"scan\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\",\"scancommand\");\n\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// clean command\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"clean_command\"), \"clean\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\",\"cleancommand\");\n\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// system styles\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"enable_system_styles_management\"), \"enable_system_styles_management\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\",\"enable_system_styles_management\");\n\t\t$ne->setValue($p ? $this->lng->txt(\"enabled\") : $this->lng->txt(\"not_enabled\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// lessc command\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"lessc\"), \"lessc\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\",\"lessc\");\n\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t$this->form->addItem($ne);\n\n\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t////\n\t//// PRELIMINARIES\n\t////\n\n\t/**\n\t * display preliminaries page\n\t */\n\tfunction displayPreliminaries()\n\t{\n\t\t$OK = \"<font color=\\\"green\\\"><strong>OK</strong></font>\";\n\t\t$FAILED = \"<strong><font color=\\\"red\\\">FAILED</font></strong>\";\n\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.preliminaries.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_SETUP_TITLE\",$this->lng->txt(\"ilias_setup\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_WELCOME\", $this->lng->txt(\"setup_welcome\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_INIFILE_DESC\", $this->lng->txt(\"setup_inifile_desc\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_DATABASE_DESC\", $this->lng->txt(\"setup_database_desc\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_LANGUAGES_DESC\", $this->lng->txt(\"setup_languages_desc\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_PASSWORD_DESC\", $this->lng->txt(\"setup_password_desc\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_NIC_DESC\", $this->lng->txt(\"setup_nic_desc\"));\n\n\t\t$server_os = php_uname();\n\t\t$server_web = $_SERVER[\"SERVER_SOFTWARE\"];\n\t\t$environment = $this->lng->txt(\"env_using\").\" \".$server_os.\" <br/>\".$this->lng->txt(\"with\").\" \".$server_web;\n\n\t\tif ((stristr($server_os,\"linux\") || stristr($server_os,\"windows\")) && stristr($server_web,\"apache\"))\n\t\t{\n\t\t\t$env_comment = $this->lng->txt(\"env_ok\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$env_comment = \"<font color=\\\"red\\\">\".$this->lng->txt(\"env_warning\").\"</font>\";\n\t\t}\n\n\t\t$this->tpl->setVariable(\"TXT_ENV_TITLE\", $this->lng->txt(\"environment\"));\n\t\t$this->tpl->setVariable(\"TXT_ENV_INTRO\", $environment);\n\t\t$this->tpl->setVariable(\"TXT_ENV_COMMENT\", $env_comment);\n\n\t\t$this->tpl->setVariable(\"TXT_PRE_TITLE\", $this->lng->txt(\"preliminaries\"));\n\t\t$this->tpl->setVariable(\"TXT_PRE_INTRO\", $this->lng->txt(\"pre_intro\"));\n\n\t\t$preliminaries = array(\"php\", \"root\", \"folder_create\",\n\t\t\t\"cookies_enabled\", \"dom\", \"xsl\", \"gd\", \"memory\");\n\t\tif ($this->setup->hasOpCacheEnabled()) {\n\t\t\t$preliminaries[] = 'load_comments';\n\t\t}\n\n\t\tforeach ($preliminaries as $preliminary)\n\t\t{\n\t\t\t$this->tpl->setCurrentBlock(\"preliminary\");\n\t\t\t$this->tpl->setVariable(\"TXT_PRE\", $this->lng->txt(\"pre_\".$preliminary));\n\t\t\tif ($this->setup->preliminaries_result[$preliminary][\"status\"] == true)\n\t\t\t{\n\t\t\t\t$this->tpl->setVariable(\"STATUS_PRE\", $OK);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->tpl->setVariable(\"STATUS_PRE\", $FAILED);\n\t\t\t}\n\t\t\t$this->tpl->setVariable(\"COMMENT_PRE\", $this->setup->preliminaries_result[$preliminary][\"comment\"]);\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t}\n\n\t\t// summary\n\t\tif ($this->setup->preliminaries === true)\n\t\t{\n\t\t\tif ($this->setup->isInstalled())\n\t\t\t{\n\t\t\t\t$cmd = \"mastersettings\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$cmd = \"install\";\n\t\t\t}\n\t\t\t$btn_text = ($this->cmd == \"preliminaries\") ? \"\" : \"installation\";\n//echo \"-\".$this->display_mode.\"-\";\n\t\t\t$this->setButtonNext($cmd,$btn_text);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->tpl->setCurrentBlock(\"premessage\");\n\t\t\t$this->tpl->setVariable(\"TXT_PRE_ERR\", sprintf($this->lng->txt(\"pre_error\"),\n\t\t\t\t\"http://www.ilias.de/docu/goto.php?target=pg_6531_367&client_id=docu\"));\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t}\n\t}\n\n\t////\n\t//// BASIC SETTINGS\n\t////\n\n\t/**\n\t * display master setup form & process form input\n\t */\n\tfunction displayMasterSetup($a_omit_init = false)\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.std_layout.html\", \"setup\");\n\t\t$this->tpl->setVariable(\"TXT_HEADER\", $this->lng->txt(\"basic_settings\"));\n\t\t$this->tpl->setVariable(\"TXT_INFO\",\n\t\t\t$this->lng->txt(\"info_text_first_install\").\"<br/>\".$this->lng->txt(\"info_text_pathes\"));\n\n\t\t$this->setButtonPrev(\"preliminaries\");\n\n\t\tif ($this->setup->isInstalled())\n\t\t{\n\t\t\t$this->setButtonNext(\"list\");\n\t\t}\n\n\t\tif (!$a_omit_init)\n\t\t{\n\t\t\t$this->initBasicSettingsForm(true);\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", \"<br>\".$this->form->getHTML().\"<br>\");\n\t}\n\n\t/**\n\t * display master settings and process form input\n\t */\n\tfunction changeMasterSettings($a_omit_init = false)\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.std_layout.html\", \"setup\");\n\t\t$this->tpl->setVariable(\"TXT_HEADER\", $this->lng->txt(\"basic_settings\"));\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_pathes\"));\n\n\t\t$this->btn_next_on = true;\n\t\t$this->btn_next_lng = $this->lng->txt(\"create_new_client\").\"...\";\n\t\t$this->btn_next_cmd = \"newclient\";\n\n\t\tif (!$a_omit_init)\n\t\t{\n\t\t\t$this->initBasicSettingsForm();\n\t\t\t$this->getBasicSettingsValues();\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", \"<br>\".$this->form->getHTML().\"<br>\");\n\t}\n\n\t/**\n\t * Init basic settings form.\n\t */\n\tpublic function initBasicSettingsForm($a_install = false)\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// webspace dir\t\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"data_directory_in_ws\"), \"webspace_dir\");\n\t\tif ($a_install)\n\t\t{\n\t\t\t$ne->setInfo($this->lng->txt(\"data_directory_in_ws_info\"));\n\t\t}\n\t\t$cwd = ilUtil::isWindows()\n\t\t\t? str_replace(\"\\\\\", \"/\", getcwd())\n\t\t\t: getcwd();\n\n\t\t$ne->setValue($cwd.\"/data\");\n\t\t$this->form->addItem($ne);\n\n\t\t// data dir\n\t\tif ($a_install)\n\t\t{\n\t\t\t$ti = new ilTextInputGUI($lng->txt(\"data_directory_outside_ws\"), \"datadir_path\");\n\t\t\t$ti->setInfo($lng->txt(\"data_directory_info\"));\n\t\t\t$ti->setRequired(true);\n\t\t\t$this->form->addItem($ti);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"data_directory_outside_ws\"), \"data_dir\");\n\t\t\t$this->form->addItem($ne);\n\t\t}\n\n\t\t$lvext = (ilUtil::isWindows())\n\t\t\t? \"_win\"\n\t\t\t: \"\";\n\n\n\t\t// logging\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"logging\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// path to log file\n\t\t$ti = new ilTextInputGUI($lng->txt(\"log_path\"), \"log_path\");\n\t\t$ti->setInfo($lng->txt(\"log_path_comment\".$lvext));\n\t\t$this->form->addItem($ti);\n\n\t\t// disable logging \n\t\t$cb = new ilCheckboxInputGUI($lng->txt(\"disable_logging\"), \"chk_log_status\");\n\t\t$this->form->addItem($cb);\n\n\t\t// path to error log dir\n\t\t$ti = new ilTextInputGUI($lng->txt(\"error_log_path\"), \"error_log_path\");\n\t\t$ti->setInfo($lng->txt(\"error_log_path_comment\".$lvext));\n\t\t$this->form->addItem($ti);\n\n\t\t// server settings\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"server_settings\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// time zone\n\t\tinclude_once(\"./Services/Calendar/classes/class.ilCalendarUtil.php\");\n\t\t$si = new ilSelectInputGUI($lng->txt(\"time_zone\"), \"time_zone\");\n\t\t$si->setOptions(array_merge(\n\t\t\tarray(\"\" => \"-- \".$lng->txt(\"please_select\").\" --\"),\n\t\t\tilCalendarUtil::_getShortTimeZoneList()));\n\t\t$si->setRequired(true);\n\t\t$this->form->addItem($si);\n\n\t\t// https settings\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"https_settings\"));\n\t\t$this->form->addItem($sh);\n\n\t\t$check = new ilCheckboxInputGUI($lng->txt('ps_auto_https'),'auto_https_detect_enabled');\n\t\t$check->setOptionTitle($lng->txt('ps_auto_https_description'));\n\t\t$check->setValue(1);\n\n\t\t$text = new ilTextInputGUI($lng->txt('ps_auto_https_header_name'),'auto_https_detect_header_name');\n\t\t$text->setSize(24);\n\t\t$text->setMaxLength(64);\n\t\t$text->setRequired(true);\n\t\t$check->addSubItem($text);\n\n\t\t$text = new ilTextInputGUI($lng->txt('ps_auto_https_header_value'),'auto_https_detect_header_value');\n\t\t$text->setSize(24);\n\t\t$text->setMaxLength(64);\n\t\t$text->setRequired(true);\n\t\t$check->addSubItem($text);\n\n\t\t$this->form->addItem($check);\n\n\t\t// required 3rd party tools\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"3rd_party_software_req\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// convert path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"convert_path\"), \"convert_path\");\n\t\t$ti->setInfo($lng->txt(\"convert_path_comment\".$lvext));\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// zip path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"zip_path\"), \"zip_path\");\n\t\t$ti->setInfo($lng->txt(\"zip_path_comment\".$lvext));\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// unzip path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"unzip_path\"), \"unzip_path\");\n\t\t$ti->setInfo($lng->txt(\"unzip_path_comment\".$lvext));\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// optional 3rd party tools\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"3rd_party_software_opt\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// ghostscript path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"ghostscript_path\"), \"ghostscript_path\");\n\t\t$ti->setInfo($lng->txt(\"ghostscript_path_comment\".$lvext));\n\t\t$this->form->addItem($ti);\n\n\t\t// ffmpeg path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"ffmpeg_path\"), \"ffmpeg_path\");\n\t\t$ti->setInfo($lng->txt(\"ffmpeg_path_comment\"));\n\t\t$this->form->addItem($ti);\n\n\t\t// latex\n\t\t$ti = new ilTextInputGUI($lng->txt(\"url_to_latex\"), \"latex_url\");\n\t\t$ti->setInfo($lng->txt(\"latex_url_comment\"));\n\t\t$this->form->addItem($ti);\n\n\t\t// virus scanner\n\t\t$options = array(\n\t\t\t\"none\" => $lng->txt(\"none\"),\n\t\t\t\"sophos\" => $lng->txt(\"sophos\"),\n\t\t\t\"antivir\" => $lng->txt(\"antivir\"),\n\t\t\t\"clamav\" => $lng->txt(\"clamav\")\n\t\t\t);\n\t\t$si = new ilSelectInputGUI($lng->txt(\"virus_scanner\"), \"vscanner_type\");\n\t\t$si->setOptions($options);\n\t\t$this->form->addItem($si);\n\n\t\t// scan command\n\t\t$ti = new ilTextInputGUI($lng->txt(\"scan_command\"), \"scan_command\");\n\t\t$this->form->addItem($ti);\n\n\t\t// clean command\n\t\t$ti = new ilTextInputGUI($lng->txt(\"clean_command\"), \"clean_command\");\n\t\t$this->form->addItem($ti);\n\n\t\t// enabled system styles mangesment\n\t\t$check = new ilCheckboxInputGUI($lng->txt('enable_system_styles_management'),'enable_system_styles_management');\n\t\t$check->setInfo($lng->txt('enable_system_styles_management_info'));\n\t\t$check->setValue(1);\n\n\t\t// lessc command\n\t\t$lessc = new ilTextInputGUI($lng->txt(\"lessc_path\"), \"lessc_path\");\n\t\t$lessc->setInfo($lng->txt(\"lessc_path_comment\"));\n\t\t$check->addSubItem($lessc);\n\n\t\t$this->form->addItem($check);\n\n\n\t\tif ($a_install)\n\t\t{\n\t\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t\t$sh->setTitle($lng->txt(\"master_password\"));\n\t\t\t$this->form->addItem($sh);\n\n\t\t\t// password\n\t\t\t$pi = new ilPasswordInputGUI($lng->txt(\"password\"), \"password\");\n\t\t\t$pi->setRequired(true);\n\t\t\t$pi->setSkipSyntaxCheck(true);\n\t\t\t$pi->setInfo($lng->txt(\"password_info\"));\n\t\t\t$this->form->addItem($pi);\n\t\t}\n\n\t\tif ($a_install)\n\t\t{\n\t\t\t$this->form->addCommandButton(\"saveBasicSettings\", $lng->txt(\"save\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->form->addCommandButton(\"updateBasicSettings\", $lng->txt(\"save\"));\n\t\t\t$this->form->addCommandButton(\"determineToolsPath\", $lng->txt(\"determine_tools_paths\"));\n\t\t}\n\n\t\t$this->form->setTitle($lng->txt(\"data_directories\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\tif ($a_install)\n\t\t{\n\t\t\t$det = $this->determineTools();\n\t\t\t$this->form->setValuesByArray($det);\n\t\t}\n\n\t}\n\n\t/**\n\t * Get current values for basic settings from\n\t */\n\tpublic function getBasicSettingsValues()\n\t{\n\t\t$values = array();\n\n\t\t$values[\"webspace_dir\"] = getcwd().\"/data\";\n\t\t$values[\"data_dir\"] = $this->setup->ini->readVariable(\"clients\",\"datadir\");\n\t\t$values[\"convert_path\"] = $this->setup->ini->readVariable(\"tools\",\"convert\");\n\t\t$values[\"zip_path\"] = $this->setup->ini->readVariable(\"tools\",\"zip\");\n\t\t$values[\"unzip_path\"] = $this->setup->ini->readVariable(\"tools\",\"unzip\");\n\t\t$values[\"ghostscript_path\"] = $this->setup->ini->readVariable(\"tools\",\"ghostscript\");\n\t\t//$values[\"mkisofs_path\"] = $this->setup->ini->readVariable(\"tools\",\"mkisofs\");\n\t\t$values[\"ffmpeg_path\"] = $this->setup->ini->readVariable(\"tools\",\"ffmpeg\");\n\t\t$values[\"latex_url\"] = $this->setup->ini->readVariable(\"tools\",\"latex\");\n\t\t$values[\"fop_path\"] = $this->setup->ini->readVariable(\"tools\",\"fop\");\n\t\t$values[\"vscanner_type\"] = $this->setup->ini->readVariable(\"tools\", \"vscantype\");\n\t\t$values[\"scan_command\"] = $this->setup->ini->readVariable(\"tools\", \"scancommand\");\n\t\t$values[\"clean_command\"] = $this->setup->ini->readVariable(\"tools\", \"cleancommand\");\n\t\t$values[\"enable_system_styles_management\"] = $this->setup->ini->readVariable(\"tools\", \"enable_system_styles_management\");\n\t\t$values[\"lessc_path\"] = $this->setup->ini->readVariable(\"tools\", \"lessc\");\n\t\t$values[\"log_path\"] = $this->setup->ini->readVariable(\"log\",\"path\").\"/\".\n\t\t\t$this->setup->ini->readVariable(\"log\",\"file\");\n\t\t$values[\"chk_log_status\"] = !$this->setup->ini->readVariable(\"log\",\"enabled\");\n\t\t$values[\"error_log_path\"] = $this->setup->ini->readVariable(\"log\",\"error_path\");\n\t\t$values[\"time_zone\"] = $this->setup->ini->readVariable(\"server\", \"timezone\");\n\n\t\t// https settings\n\t\t$values[\"auto_https_detect_enabled\"] = $this->setup->ini->readVariable(\"https\", \"auto_https_detect_enabled\");\n\t\t$values[\"auto_https_detect_header_name\"] = $this->setup->ini->readVariable(\"https\", \"auto_https_detect_header_name\");\n\t\t$values[\"auto_https_detect_header_value\"] = $this->setup->ini->readVariable(\"https\", \"auto_https_detect_header_value\");\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\n\t/**\n\t * Save basic settings form\n\t */\n\tpublic function saveBasicSettings()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl;\n\n\t\t$this->initBasicSettingsForm(true);\n\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t// correct paths on windows\n\t\t\tif (ilUtil::isWindows())\n\t\t\t{\n\t\t\t\t$fs = array(\"datadir_path\", \"log_path\", \"convert_path\", \"zip_path\",\n\t\t\t\t\t\"unzip_path\", \"ghostscript_path\", \"ffmpeg_path\",\"lessc_path\");\n\t\t\t\tforeach ($fs as $f)\n\t\t\t\t{\n\t\t\t\t\t$_POST[$f] = str_replace(\"\\\\\", \"/\", $_POST[$f]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$_POST[\"setup_pass\"] = $_POST[\"password\"];\n\t\t\t$_POST[\"setup_pass2\"] = $_POST[\"password_retype\"];\n\t\t\tif (!$this->setup->checkDataDirSetup($_POST))\n\t\t\t{\n\t\t\t\t$i = $this->form->getItemByPostVar(\"datadir_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->checkLogSetup($_POST))\n\t\t\t{\n\t\t\t\t$i = $this->form->getItemByPostVar(\"log_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if(!$this->setup->checkErrorLogSetup($_POST[\"error_log_path\"])) {\n\t\t\t\t$i = $this->form->getItemByPostVar(\"error_log_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->checkPasswordSetup($_POST))\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->saveMasterSetup($_POST))\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()),true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_saved\"),true);\n\t\t\t\tilUtil::redirect(\"setup.php?cmd=mastersettings\");\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayMasterSetup(true);\n\t}\n\n\t/**\n\t * Update basic settings form\n\t */\n\tpublic function updateBasicSettings()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl;\n\n\t\t$this->initBasicSettingsForm();\n\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\tif (ilUtil::isWindows())\n\t\t\t{\n\t\t\t\t$fs = array(\"datadir_path\", \"log_path\", \"convert_path\", \"zip_path\",\n\t\t\t\t\t\"unzip_path\", \"ghostscript_path\", \"ffmpeg_path\",\"lessc_path\");\n\t\t\t\tforeach ($fs as $f)\n\t\t\t\t{\n\t\t\t\t\t$_POST[$f] = str_replace(\"\\\\\", \"/\", $_POST[$f]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$this->setup->checkLogSetup($_POST))\n\t\t\t{\n\t\t\t\t$i = $this->form->getItemByPostVar(\"log_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->checkErrorLogSetup($_POST[\"error_log_path\"])) {\n\t\t\t\t$i = $this->form->getItemByPostVar(\"error_log_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->updateMasterSettings($_POST))\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()),true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_saved\"),true);\n\t\t\t\tilUtil::redirect(\"setup.php?cmd=mastersettings\");\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->changeMasterSettings(true);\n\t}\n\n\t////\n\t//// LOGIN\n\t////\n\n\t/**\n\t * login to a client\n\t */\n\tfunction loginClient()\n\t{\n\t\tsession_destroy();\n\n\t\tilUtil::redirect(ILIAS_HTTP_PATH.\"/login.php?client_id=\".$this->setup->getClient()->getId());\n\t}\n\n\t/**\n\t * display login form and process form\n\t */\n\tfunction displayLogin($a_omit_minit = false, $a_omit_cinit = false)\n\t{\n\t\tglobal $lng;\n\t\t$this->tpl->setVariable(\"SETUP_LOGIN_CLASS\", \" ilSetupLogin\");\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.std_layout.html\", \"setup\");\n\n\t\tif ($a_omit_minit)\n\t\t{\n\t\t\t$m_form = $this->form->getHTML();\n\t\t}\n\t\tif (!$a_omit_cinit)\n\t\t{\n\t\t\t$this->initClientLoginForm();\n\t\t}\n\t\t$cl_form = $this->form->getHTML();\n\t\tif (!$a_omit_minit)\n\t\t{\n\t\t\t$this->initMasterLoginForm();\n\t\t\t$m_form = $this->form->getHTML();\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $cl_form.\"<br>\".$m_form);\n\t\t$this->tpl->setVariable(\"TXT_HEADER\", $lng->txt(\"login\"));\n\t}\n\n\t/**\n\t* Master Login\n\t*/\n\tpublic function performMLogin()\n\t{\n\t\t$this->initMasterLoginForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t$i = $this->form->getItemByPostVar(\"mpassword\");\n\t\t\tif (!$this->setup->loginAsAdmin($_POST[\"mpassword\"]))\n\t\t\t{\n\t\t\t\t$i->setAlert($this->lng->txt(\"login_invalid\"));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// everything ok -> we are authenticated\n\t\t\t\tilUtil::redirect(\"setup.php\");\n\t\t\t}\n\t\t}\n\n\t\t// something wrong -> display login again\t\t\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayLogin(true);\n\t}\n\n\t/**\n\t * Login\n\t */\n\tfunction performLogin()\n\t{\n\t\t$this->initClientLoginForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t$i = $this->form->getItemByPostVar(\"password\");\n\t\t\tif (!$this->setup->loginAsClient(\n\t\t\t\tarray(\"client_id\" => $_POST[\"client_id\"],\n\t\t\t\t\"username\" => $_POST[\"username\"], \"password\" => $_POST[\"password\"])))\n\t\t\t{\n\t\t\t\t$i->setAlert($this->setup->getError());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// everything ok -> we are authenticated\n\t\t\t\tilUtil::redirect(\"setup.php\");\n\t\t\t}\n\t\t}\n\n\t\t// something wrong -> display login again\t\t\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayLogin(false, true);\n\t}\n\n\t/**\n\t* Init client login form.\n\t*/\n\tpublic function initClientLoginForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\t\t$this->form->setId(\"client_login\");\n\n\t\t// client id\n\t\t$ti = new ilTextInputGUI($lng->txt(\"client_id\"), \"client_id\");\n\t\t$ti->setMaxLength(32);\n\t\t$ti->setSize(20);\n\t\t$this->form->addItem($ti);\n\n\t\t// username\n\t\t$ti = new ilTextInputGUI($lng->txt(\"username\"), \"username\");\n\t\t$ti->setSize(20);\n\t\t$this->form->addItem($ti);\n\n\t\t// password\n\t\t$pi = new ilPasswordInputGUI($lng->txt(\"password\"), \"password\");\n\t\t$pi->setSize(20);\n\t\t$pi->setRetype(false);\n\t\t$pi->setSkipSyntaxCheck(true);\n\t\t$this->form->addItem($pi);\n\n\t\t$this->form->addCommandButton(\"performLogin\", $lng->txt(\"login\"));\n\n\t\t$this->form->setTitle($lng->txt(\"client_login\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t* Init master login form.\n\t*/\n\tpublic function initMasterLoginForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\t\t$this->form->setId(\"master_login\");\t\t\n\t\t// password\n\t\t$pi = new ilPasswordInputGUI($lng->txt(\"password\"), \"mpassword\");\n\t\t$pi->setSize(20);\n\t\t$pi->setRetype(false);\n\t\t$pi->setSkipSyntaxCheck(true);\n\t\t$this->form->addItem($pi);\n\n\t\t$this->form->addCommandButton(\"performMLogin\", $lng->txt(\"login\"));\n\n\t\t$this->form->setTitle($lng->txt(\"admin_login\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t}\n\n\t////\n\t//// CLIENT LIST\n\t////\n\n\t/**\n\t * display client list and process form input\n\t */\n\tfunction displayClientList()\n\t{\n\t\t$_SESSION[\"ClientId\"] = \"\";\n\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.clientlist.html\", \"setup\");\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_list\"));\n\t\tilUtil::sendInfo();\n\n\t\t// common\n\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt(\"list_clients\"));\n\t\t$this->tpl->setVariable(\"TXT_LISTSTATUS\",($this->setup->ini->readVariable(\"clients\",\"list\")) ? $this->lng->txt(\"display_clientlist\") : $this->lng->txt(\"hide_clientlist\"));\n\t\t$this->tpl->setVariable(\"TXT_TOGGLELIST\",($this->setup->ini->readVariable(\"clients\",\"list\")) ? $this->lng->txt(\"disable\") : $this->lng->txt(\"enable\"));\n\n\t\tinclude_once(\"./setup/classes/class.ilClientListTableGUI.php\");\n\t\t$tab = new ilClientListTableGUI($this->setup);\n\t\t$this->tpl->setVariable(\"CLIENT_LIST\", $tab->getHTML());\n\n\t\t// create new client button\n\t\t$this->btn_next_on = true;\n\t\t$this->btn_next_lng = $this->lng->txt(\"create_new_client\").\"...\";\n\t\t$this->btn_next_cmd = \"newclient\";\n\t}\n\n\t/**\n\t* Determine tools paths\n\t*/\n\tfunction determineToolsPath()\n\t{\n\t\t$_POST = $this->determineTools($_POST);\n\t\t$this->updateBasicSettings();\n\t}\n\n\t/**\n\t* Determine tools paths\n\t*/\n\tfunction determineToolsPathInstall()\n\t{\n\t\t$this->displayMasterSetup(true);\n\t}\n\n\t/**\n\t* Determine Tools\n\t*/\n\tfunction determineTools($a_tools = array())\n\t{\n\t\t$cwd = ilUtil::isWindows()\n\t\t\t? str_replace(\"\\\\\", \"/\", getcwd())\n\t\t\t: getcwd();\n\t\tif (!ilUtil::isWindows())\n\t\t{\n\t\t\t$tools = array(\"convert\" => \"convert\",\n\t\t\t\t\"zip\" => \"zip\", \"unzip\" => \"unzip\", \"ghostscript\" => \"gs\",\n\t\t\t\t\"java\" => \"java\", \"ffmpeg\" => \"ffmpeg\", \"lessc\"=>\"lessc\");\n\t\t\t$dirs = array(\"/usr/local\", \"/usr/local/bin\", \"/usr/bin\", \"/bin\", \"/sw/bin\", \"/usr/bin\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$tools = array(\"convert\" => \"convert.exe\",\n\t\t\t\t\"zip\" => \"zip.exe\", \"unzip\" => \"unzip.exe\");\n\t\t\t$dirs = array();\n\t\t}\n\t\tforeach($tools as $k => $tool)\n\t\t{\n\t\t\t// try which command\n\t\t\tunset($ret);\n\t\t\t@exec(\"which \".$tool, $ret);\n\t\t\tif (substr($ret[0], 0, 3) != \"no \" && substr($ret[0], 0, 1) == \"/\")\n\t\t\t{\n\t\t\t\t$a_tools[$k.\"_path\"] = $ret[0];\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// try common directories\n\t\t\tforeach($dirs as $dir)\n\t\t\t{\n\t\t\t\tif (@is_file($dir.\"/\".$tool))\n\t\t\t\t{\n\t\t\t\t\t$a_tools[$k.\"_path\"] = $dir.\"/\".$tool;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $a_tools;\n\t}\n\n\n\t////\n\t//// NEW CLIENT STEP 1: SELECT DB TYPE\n\t////\n\n\t/**\n\t * Select database type\n\t *\n\t */\n\tfunction selectDBType()\n\t{\n\t\t$this->checkDisplayMode(\"create_new_client\");\n\n\t\tunset($_SESSION[\"db_type\"]);\n\t\t$this->initDBSelectionForm();\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\tif ($this->setup->getClient()->status[\"ini\"][\"status\"]) {\n\t\t\t$this->setButtonNext(\"db\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Init db selection form.\n\t */\n\tpublic function initDBSelectionForm()\n\t{\n\t\tglobal $lng;\n\n\t\trequire_once('./Services/Form/classes/class.ilPropertyFormGUI.php');\n\t\trequire_once('./Services/Database/classes/class.ilDBConstants.php');\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// db type\n\t\t$options = ilDBConstants::getAvailableTypes(true);\n\t\t$si = new ilSelectInputGUI($lng->txt(\"db_type\"), \"db_type\");\n\t\t$si->setOptions($options);\n\t\t$si->setInfo($lng->txt(\"\"));\n\t\t$this->form->addItem($si);\n\n\t\t$this->form->addCommandButton(\"selectdbtype\", $lng->txt(\"save\"));\n\n\t\t$this->form->setTitle($lng->txt(\"db_selection\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t////\n\t//// NEW CLIENT STEP 2: SELECT DB TYPE\n\t////\n\n\t/**\n\t * display setup in step\n\t */\n\tfunction displayIni($a_omit_form_init = false)\n\t{\n\t\t$this->checkDisplayMode(\"create_new_client\");\n\n\t\tif ($_POST[\"db_type\"] != \"\") {\n\t\t\t$_SESSION[\"db_type\"] = $_POST[\"db_type\"];\n\t\t} else {\n\t\t\t$_POST[\"db_type\"] = $_SESSION[\"db_type\"];\n\t\t}\n\n\t\t$has_ini = $this->setup->getClient()->status[\"ini\"][\"status\"];\n\n\t\t// use value from client ini if setup was resumed (no value in session)\n\t\tif (!$_SESSION[\"db_type\"] && $has_ini) {\n\t\t\t$_SESSION[\"db_type\"] = $this->setup->getClient()->getDbType();\n\t\t}\n\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_ini\"));\n\t\tif (!$a_omit_form_init) {\n\t\t\t$this->initClientIniForm();\n\t\t\t$this->getClientIniValues();\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\tif ($has_ini) {\n\t\t\t$this->setButtonNext(\"db\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Init client ini form.\n\t */\n\tprotected function initClientIniForm()\n\t{\n\t\tglobal $lng;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// client id\n\t\tif ($this->setup->ini_client_exists) {\n\t\t\t$hi = new ilHiddenInputGUI(\"client_id\");\n\t\t\t$hi->setValue($this->client_id);\n\t\t\t$this->form->addItem($hi);\n\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"client_id\"), \"hh\");\n\t\t\t$ne->setValue($this->client_id);\n\t\t\t$this->form->addItem($ne);\n\t\t} else {\n\t\t\t$ti = new ilTextInputGUI($lng->txt(\"client_id\"), \"client_id\");\n\t\t\t$ti->setMaxLength(32);\n\t\t\t$ti->setRequired(true);\n\t\t\t$this->form->addItem($ti);\n\t\t}\n\n\t\t// database connection\t\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"db_conn\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// db type\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"db_type\"), \"dbt\");\n\t\t$at = ilDBConstants::getAvailableTypes(true);\n\t\t$ne->setValue($at[$_SESSION[\"db_type\"]] );\n\t\t$this->form->addItem($ne);\n\n\t\t// db host\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_host\"), \"db_host\");\n\t\t$ti->setMaxLength(120);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// db name\n\t\trequire_once('./Services/Database/classes/class.ilDBConstants.php');\n\t\tif (!in_array($_SESSION[\"db_type\"], array( ilDBConstants::TYPE_ORACLE ))) {\n\t\t\t$ti = new ilTextInputGUI($lng->txt(\"db_name\"), \"db_name\");\n\t\t\t$ti->setRequired(true);\n\t\t} else {\n\t\t\t$ti = new ilTextInputGUI($lng->txt(\"db_service_name\"), \"db_name\");\n\t\t}\n\t\t$ti->setMaxLength(40);\n\t\t$this->form->addItem($ti);\n\n\t\t// db user\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_user\"), \"db_user\");\n\t\t$ti->setMaxLength(40);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// db port\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_port\"), \"db_port\");\n\t\t$ti->setMaxLength(8);\n\t\t$this->form->addItem($ti);\n\n\t\t// db password\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_pass\"), \"db_pass\");\n\t\t$ti->setMaxLength(40);\n\t\t$this->form->addItem($ti);\n\n\t\t$this->form->addCommandButton(\"saveClientIni\", $lng->txt(\"save\"));\n\n\t\t$this->form->setTitle($lng->txt(\"inst_identification\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t * Get current values for client ini from\n\t */\n\tpublic function getClientIniValues()\n\t{\n\t\t$values = array();\n\n\t\t$values[\"db_host\"] = $this->setup->getClient()->getDbHost();\n\t\t$values[\"db_user\"] = $this->setup->getClient()->getDbUser();\n\t\t$values[\"db_port\"] = $this->setup->getClient()->getDbPort();\n\t\t$values[\"db_pass\"] = $this->setup->getClient()->getDbPass();\n\t\t$values[\"db_name\"] = $this->setup->getClient()->getDbName();\n\t\t$values[\"client_id\"] = $this->setup->getClient()->getId();\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\t\n\t/**\n\t * Save client ini form\n\t */\n\tpublic function saveClientIni()\n\t{\n\t\t$this->initClientIniForm();\n\t\tif ($this->form->checkInput()) {\n\t\t\tif (strlen($_POST[\"client_id\"]) != strlen(urlencode(($_POST[\"client_id\"])))\n\t\t\t    || !$this->setup->isValidClientId($_POST[\"client_id\"])\n\t\t\t) {\n\t\t\t\t$i = $this->form->getItemByPostVar(\"client_id\");\n\t\t\t\t$i->setAlert($this->lng->txt(\"ini_client_id_invalid\"));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"ini_client_id_invalid\"), true);\n\t\t\t} else {\n\t\t\t\tif (strlen($_POST[\"client_id\"]) < 4) {\n\t\t\t\t\t$i = $this->form->getItemByPostVar(\"client_id\");\n\t\t\t\t\t$i->setAlert($this->lng->txt(\"ini_client_id_too_short\"));\n\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"ini_client_id_too_short\"), true);\n\t\t\t\t} else {\n\t\t\t\t\tif (strlen($_POST[\"client_id\"]) > 32) {\n\t\t\t\t\t\t$i = $this->form->getItemByPostVar(\"client_id\");\n\t\t\t\t\t\t$i->setAlert($this->lng->txt(\"ini_client_id_too_long\"));\n\t\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"ini_client_id_too_long\"), true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!$this->setup->ini_client_exists && file_exists(ILIAS_ABSOLUTE_PATH . \"/\" . ILIAS_WEB_DIR . \"/\" . $_POST[\"client_id\"])) {\n\t\t\t\t\t\t\t$i = $this->form->getItemByPostVar(\"client_id\");\n\t\t\t\t\t\t\t$i->setAlert($this->lng->txt(\"ini_client_id_exists\"));\n\t\t\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"ini_client_id_exists\"), true);\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// save some old values\n\t\t\t\t\t\t\t$old_db_name = $this->setup->getClient()->getDbName();\n\t\t\t\t\t\t\t$old_db_type = $this->setup->getClient()->getDbType();\n\t\t\t\t\t\t\t$old_client_id = $this->setup->getClient()->getId();\n\n\t\t\t\t\t\t\t// create new client object if it does not exist\n\t\t\t\t\t\t\tif (!$this->setup->ini_client_exists) {\n\t\t\t\t\t\t\t\t$client_id = $_POST[\"client_id\"];\n\t\t\t\t\t\t\t\t$this->setup->newClient($client_id);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// set client data\n\t\t\t\t\t\t\t$this->setup->getClient()->setId($_POST[\"client_id\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbHost($_POST[\"db_host\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbName($_POST[\"db_name\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbUser($_POST[\"db_user\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbPort($_POST[\"db_port\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbPass($_POST[\"db_pass\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbType($_SESSION[\"db_type\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDSN();\n\n\t\t\t\t\t\t\t// try to connect to database\n\t\t\t\t\t\t\tif (!$this->setup->getClient()->getDBSetup()->isConnectable()) {\n\t\t\t\t\t\t\t\t$i = $this->form->getItemByPostVar(\"db_host\");\n\t\t\t\t\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getClient()->getError()));\n\t\t\t\t\t\t\t\tilUtil::sendFailure($this->setup->getClient()->getError(), true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// check if db exists\n\t\t\t\t\t\t\t\t$db_installed = $this->setup->getClient()->getDBSetup()->isDatabaseInstalled();\n\n\t\t\t\t\t\t\t\tif ($db_installed and (!$this->setup->ini_ilias_exists or ($this->setup->getClient()->getDbName() != $old_db_name))) {\n\t\t\t\t\t\t\t\t\t$_POST[\"db_name\"] = $old_db_name;\n\t\t\t\t\t\t\t\t\t$message = ucfirst($this->lng->txt(\"database\")) . \" \\\"\" . $this->setup->getClient()->getDbName() . \"\\\" \"\n\t\t\t\t\t\t\t\t\t           . $this->lng->txt(\"ini_db_name_exists\");\n\t\t\t\t\t\t\t\t\t$i = $this->form->getItemByPostVar(\"db_name\");\n\t\t\t\t\t\t\t\t\t$i->setAlert($message);\n\t\t\t\t\t\t\t\t\tilUtil::sendFailure($message, true);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// all ok. create client.ini and save posted data\n\t\t\t\t\t\t\t\t\tif (!$this->setup->ini_client_exists) {\n\t\t\t\t\t\t\t\t\t\tif ($this->setup->saveNewClient()) {\n\t\t\t\t\t\t\t\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_saved\"), true);\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"status\"] = true;\n\t\t\t\t\t\t\t\t\t\t\t$_SESSION[\"ClientId\"] = $client_id;\n\t\t\t\t\t\t\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayIni&client_id=\" . $client_id);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t$err = $this->setup->getError();\n\t\t\t\t\t\t\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"save_error\") . \": \" . $err, true);\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"status\"] = false;\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"comment\"] = $err;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif ($this->setup->getClient()->ini->write()) {\n\t\t\t\t\t\t\t\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_changed\"));\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"status\"] = true;\n\t\t\t\t\t\t\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayIni\");\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t$err = $this->setup->getClient()->ini->getError();\n\t\t\t\t\t\t\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"save_error\") . \": \" . $err, true);\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"status\"] = false;\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"comment\"] = $err;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayIni(true);\n\t}\n\n\t/**\n\t * display error page\n\t *\n\t * @param    string  error message\n\t */\n\tfunction displayError($a_message)\n\t{\n\t\t$this->setDisplayMode(\"view\");\n\n\t\t$this->tpl->addBlockFile(\"CONTENT\", \"content\", \"tpl.error.html\", \"setup\");\n\n\t\t$this->tpl->setCurrentBlock(\"content\");\n\t\t$this->tpl->setVariable(\"FORMACTION\", $_SESSION[\"referer\"]);\n\t\t$this->tpl->setVariable(\"TXT_BACK\", $this->lng->txt(\"back\"));\n\t\t$this->tpl->setVariable(\"ERROR_MESSAGE\", ($a_message));\n\t\t$this->tpl->parseCurrentBlock();\n\n//\t\t$this->tpl->show();\n//\t\texit();\n\t}\n\n\t/**\n\t * display logout page\n\t */\n\tfunction displayLogout()\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.logout.html\", \"setup\");\n\n\t\tsession_destroy();\n\n\t\t$this->logged_out = true;\n\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt(\"logged_out\"));\n\t\t$this->tpl->setCurrentBlock(\"home_link\");\n\t\t$this->tpl->setVariable(\"TXT_INDEX\",$this->lng->txt(\"ilias_homepage\"));\n\t\t$this->tpl->setVariable(\"LNK_INDEX\",ILIAS_HTTP_PATH.\"/index.php\");\n\t\t$this->tpl->parseCurrentBlock();\n\t}\n\n\t/**\n\t * display process panel\n\t */\n\tfunction displayProcessPanel()\n\t{\n\t\tinclude_once(\"./Services/UIComponent/Checklist/classes/class.ilChecklistGUI.php\");\n\t\t$checklist = new ilChecklistGUI();\n\t\t$checklist->setHeading($this->lng->txt(\"setup_process_status\"));\n\n\n\t\t$OK = \"<font color=\\\"green\\\"><strong>OK</strong></font>\";\n\n\t\t$steps = $this->setup->getStatus();\n\t\t\n\t\t// #16846\n\t\t$first = array(\"selectdb\" => array(\n\t\t\t\"status\" => ((bool)$_SESSION[\"db_type\"] || (bool)$steps[\"ini\"][\"status\"]),\n\t\t\t\"text\" => $this->lng->txt(\"db_selection\"),\n\t\t\t\"comment\" => \"\"\n\t\t));\n\t\t\n\t\t$steps = $first + $steps;\t\t\n\n\t\t// remove access step\n\t\tunset($steps[\"access\"]);\n\n\t\t$steps[\"ini\"][\"text\"] = $this->lng->txt(\"setup_process_step_ini\");\n\t\t$steps[\"db\"][\"text\"]  = $this->lng->txt(\"setup_process_step_db\");\n\t\t//$steps[\"sess\"][\"text\"]      = $this->lng->txt(\"setup_process_step_sess\");\n\t\t$steps[\"lang\"][\"text\"]    = $this->lng->txt(\"setup_process_step_lang\");\n\t\t$steps[\"contact\"][\"text\"] = $this->lng->txt(\"setup_process_step_contact\");\n\t\t$steps[\"proxy\"][\"text\"]   = $this->lng->txt(\"setup_process_step_proxy\");\n\t\t$steps[\"nic\"][\"text\"]     = $this->lng->txt(\"setup_process_step_nic\");\n\t\t$steps[\"finish\"][\"text\"]  = $this->lng->txt(\"setup_process_step_finish\");\n\n\t\t$stpl = new ilTemplate(\"tpl.process_panel.html\", true, true, \"setup\");\n\n\t\t$num = 1;\n\n\t\tforeach ($steps as $key => $val)\n\t\t{\n\t\t\t$stpl->setCurrentBlock(\"menu_row\");\n\t\t\t$stpl->setVariable(\"TXT_STEP\",$this->lng->txt(\"step\").\" \".$num.\": &nbsp;\");\n\t\t\t$stpl->setVariable(\"TXT_ACTION\",$val[\"text\"]);\n\t\t\t$stpl->setVariable(\"IMG_ARROW\", \"spacer.png\");\n\n\t\t\tif ($this->cmd == $key and isset($this->cmd))\n\t\t\t{\n\t\t\t\t$stpl->setVariable(\"HIGHLIGHT\", \" style=\\\"font-weight:bold;\\\"\");\n\t\t\t}\n\n\t\t\t$status = ($val[\"status\"]) ? $OK : \"\";\n\n\t\t\t$stpl->setVariable(\"TXT_STATUS\",$status);\n\t\t\t$stpl->parseCurrentBlock();\n\n\t\t\t$checklist->addEntry($num.\". \".$val[\"text\"], \"\",\n\t\t\t\t($val[\"status\"]) ?\n\t\t\t\t\tilChecklistGUI::STATUS_OK : ilChecklistGUI::STATUS_NOT_OK,\n\t\t\t\t($this->cmd == $key and isset($this->cmd)),\n\t\t\t\t\"\");\n\n\t\t\t$num++;\n\t\t}\n\n\t\t$stpl->setVariable(\"TXT_SETUP_PROCESS_STATUS\",$this->lng->txt(\"setup_process_status\"));\n\n\t\t$this->tpl->setVariable(\"PROCESS_MENU\", $checklist->getHTML());\n\t}\n\n\t/**\n\t * display status panel\n\t */\n\tfunction displayStatusPanel()\n\t{\n\t\tinclude_once(\"./Services/UIComponent/Checklist/classes/class.ilChecklistGUI.php\");\n\t\t$checklist = new ilChecklistGUI();\n\t\t$checklist->setHeading($this->lng->txt(\"overall_status\"));\n\t\t\n\t\t$OK = \"<font color=\\\"green\\\"><strong>OK</strong></font>\";\n\n\t\t//$this->tpl->addBlockFile(\"STATUS_PANEL\",\"status_panel\",\"tpl.status_panel.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_OVERALL_STATUS\", $this->lng->txt(\"overall_status\"));\n\t\t// display status\n\t\tif ($this->setup->getClient()->status)\n\t\t{\n\t\t\tforeach ($this->setup->getClient()->status as $key => $val)\n\t\t\t{\n\t\t\t\t$status = ($val[\"status\"]) ? $OK : \"&nbsp;\";\n//\t\t\t\t$this->tpl->setCurrentBlock(\"status_row\");\n//\t\t\t\t$this->tpl->setVariable(\"TXT_STEP\", $this->lng->txt(\"step_\".$key));\n//\t\t\t\t$this->tpl->setVariable(\"TXT_STATUS\",$status);\n\n\n//\t\t\t\t$this->tpl->setVariable(\"TXT_COMMENT\",$val[\"comment\"]);\n//\t\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t\t$checklist->addEntry($this->lng->txt(\"step_\".$key), \"\",\n\t\t\t\t\t($val[\"status\"]) ?\n\t\t\t\t\t\tilChecklistGUI::STATUS_OK : ilChecklistGUI::STATUS_NO_STATUS, false, $val[\"comment\"]);\n\t\t\t}\n\t\t}\n\t\t$this->tpl->setVariable(\"STATUS_PANEL\", $checklist->getHTML());\n\t}\n\n\t/**\n\t * determine display mode and load according html layout\n\t *\n\t * @param    string  set title for display mode 'setup'\n\t */\n\tfunction checkDisplayMode($a_title = \"\")\n\t{\n\t\tswitch ($this->display_mode)\n\t\t{\n\t\t\tcase \"view\":\n\t\t\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.clientview.html\", \"setup\");\n\t\t\t\t// display tabs\n\t\t\t\tinclude \"./setup/include/inc.client_tabs.php\";\n\t\t\t\t$client_name = ($this->setup->getClient()->getName()) ? $this->setup->getClient()->getName() : $this->lng->txt(\"no_client_name\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_HEADER\",$client_name.\" (\".$this->lng->txt(\"client_id\").\": \".$this->setup->getClient()->getId().\")\");\n\t\t\t\tbreak;\n\n\t\t\tcase \"setup\":\n\t\t\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.clientsetup.html\", \"setup\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt($a_title));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$this->displayError($this->lng->txt(\"unknown_display_mode\"));\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Show subtabs\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction displaySubTabs()\n\t{\n\t\t$sub_tab_html = $this->tabs->getSubTabHTML();\n\t\tif ($sub_tab_html != \"\")\n\t\t{\n\t\t\t$this->tpl->setVariable(\"SUBTABS\", $sub_tab_html);\n\t\t}\n\n\t}\n\n\n\t/**\n\t * determine display mode and load correct panel\n\t */\n\tfunction checkPanelMode()\n\t{\n\t\tswitch ($this->display_mode)\n\t\t{\n\t\t\tcase \"view\":\n\t\t\t\t$this->displayStatusPanel();\n\t\t\t\tbreak;\n\n\t\t\tcase \"setup\":\n\t\t\t\t$this->displayProcessPanel();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * display intro page for the first client installation\n\t */\n\tfunction displayStartup()\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.clientsetup.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_INFO\",$this->lng->txt(\"info_text_first_client\"));\n\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt(\"setup_first_client\"));\n\n\t\t$this->displayProcessPanel();\n\n\t\t$this->setButtonNext(\"ini\");\n\t}\n\n\t////\n\t//// DISPLAY DATABASE\n\t////\n\n\t/**\n\t * display database form and process form input\n\t */\n\tfunction displayDatabase()\n\t{\n\t\tglobal $ilErr,$ilDB,$ilLog;\n\n\t\t$this->checkDisplayMode(\"setup_database\");\n\n\t\t// database is intalled\n\t\tif ($this->setup->getClient()->getDBSetup()->isDatabaseInstalled())\n\t\t{\n\t\t\t$this->setDbSubTabs(\"db\");\n\n\t\t\t$ilDB = $this->setup->getClient()->getDB();\n\t\t\t$this->lng->setDbHandler($ilDB);\n\t\t\tinclude_once \"./Services/Database/classes/class.ilDBUpdate.php\";\n\t\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t\t$db_status = $dbupdate->getDBVersionStatus();\n\t\t\t$hotfix_available = $dbupdate->hotfixAvailable();\n\t\t\t$custom_updates_available = $dbupdate->customUpdatesAvailable();\n\t\t\t$this->initClientDbForm(false, $dbupdate, $db_status, $hotfix_available, $custom_updates_available);\n\t\t\t$this->getClientDbFormValues($dbupdate);\n\t\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\t\tif ($db_status)\n\t\t\t{\n\t\t\t\t$this->setButtonNext(\"lang\");\n\t\t\t}\n\t\t}\n\t\telse\t// database is not installed\n\t\t{\n\t\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_db\").\"<br />\".\n\t\t\t\t\"<p><code>CREATE DATABASE &lt;your_db&gt; CHARACTER SET utf8 COLLATE &lt;your_collation&gt;</code></p>\".\n\t\t\t\t\"<p><b>\".$this->lng->txt(\"info_text_db2\").\"</b></p><br/>\");\n\n\t\t\t$this->initClientDbForm();\n\t\t\t$this->getClientDbFormValues();\n\t\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t\t\t$this->setButtonPrev(\"ini\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\n\t\t$this->displaySubTabs();\n\t}\n\n\n\tprotected function displayCache() {\n\t\trequire_once('Services/Form/classes/class.ilPropertyFormGUI.php');\n\t\trequire_once('Services/GlobalCache/classes/class.ilGlobalCache.php');\n\t\trequire_once('./Services/GlobalCache/classes/Settings/class.ilGlobalCacheSettings.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\t\t/**\n\t\t * @var $ini ilIniFile\n\t\t */\n\n\t\t$ilGlobalCacheSettings = new ilGlobalCacheSettings();\n\t\t$ilGlobalCacheSettings->readFromIniFile($this->setup->getClient()->ini);\n\n\t\t$cache_form = new ilPropertyFormGUI();\n\t\t$cache_form->setTitle($this->lng->txt('global_cache_configuration'));\n\t\t$cache_form->addCommandButton('saveCache', $this->lng->txt('save'));\n\t\t$cache_form->setFormAction('setup.php?cmd=gateway');\n\n\t\t$some_inactive = false;\n\t\t$message = '';\n\t\t$service_type = new ilRadioGroupInputGUI($this->lng->txt('global_cache_service_type'), 'global_cache_service_type');\n\n\t\t$option = new ilRadioOption($this->lng->txt('none'), - 1);\n\t\t$service_type->addOption($option);\n\n\t\tforeach (ilGlobalCache::getAllTypes() as $type) {\n\t\t\t$option = new ilRadioOption($this->lng->txt('global_cache_service_type_' . $type->getServiceType()), $type->getServiceType());\n\t\t\t$option->setInfo($this->lng->txt('global_cache_install_info_' . $type->getServiceType()));\n\t\t\tif (! $type->isCacheServiceInstallable()) {\n\t\t\t\t$option->setDisabled(true);\n\t\t\t\t$message .= $this->lng->txt('global_cache_service_type_' . $type->getServiceType()) . ': ' . $type->getInstallationFailureReason()\n\t\t\t\t\t. '; ';\n\t\t\t\t$some_inactive = true;\n\t\t\t}\n\t\t\t$service_type->addOption($option);\n\t\t}\n\n\t\tif ($some_inactive) {\n\t\t\t$service_type->setAlert($message);\n\t\t\tilUtil::sendInfo($this->lng->txt('global_cache_supported_services'));\n\t\t}\n\n\t\t$service_type->setValue($ilGlobalCacheSettings->isActive() ? $ilGlobalCacheSettings->getService() : - 1);\n\t\t$cache_form->addItem($service_type);\n\t\tif ($ilGlobalCacheSettings->isActive()) {\n\n\t\t\t$h = new ilFormSectionHeaderGUI();\n\t\t\t$h->setTitle($this->lng->txt('cache_activated_components'));\n\t\t\t$cache_form->addItem($h);\n\n\t\t\tforeach (ilGlobalCache::getAvailableComponents() as $comp) {\n\t\t\t\t$cc = new ilCheckboxInputGUI($this->lng->txt('cache_activate_' . $comp), 'activate[' . $comp . ']');\n\t\t\t\t$cc->setChecked($ilGlobalCacheSettings->isComponentActivated($comp));\n\t\t\t\t$cache_form->addItem($cc);\n\t\t\t}\n\n\t\t\t$cc = new ilCheckboxInputGUI($this->lng->txt('cache_activate_all' ), 'activate[all]');\n\t\t\t$cc->setChecked($ilGlobalCacheSettings->areAllComponentActivated());\n\t\t\t$cache_form->addItem($cc);\n\t\t}\n\n\t\t$table_html = '';\n\t\trequire_once('./Services/UIComponent/Toolbar/classes/class.ilToolbarGUI.php');\n\t\trequire_once('./Services/UIComponent/Button/classes/class.ilLinkButton.php');\n\t\t$ilToolbarGUI = new ilToolbarGUI();\n\t\tif ($ilGlobalCacheSettings->isActive()) {\n\t\t\t$b = ilLinkButton::getInstance();\n\t\t\t$b->setCaption('cache_flush');\n\t\t\t$b->setUrl('setup.php?cmd=flushCache');\n\t\t\t$ilToolbarGUI->addButtonInstance($b);\n\t\t}\n\n\t\tif ($ilGlobalCacheSettings->getService() == ilGlobalCache::TYPE_MEMCACHED) {\n\t\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerTableGUI.php');\n\t\t\t$b = ilLinkButton::getInstance();\n\t\t\t$b->setCaption('memcache_add');\n\t\t\t$b->setUrl('setup.php?cmd=addMemcacheServer');\n\t\t\t$ilToolbarGUI->addButtonInstance($b);\n\t\t\t$ilMemcacheServerTableGUI = new ilMemcacheServerTableGUI(NULL);\n\t\t\t$table_html = $ilMemcacheServerTableGUI->getHTML();\n\t\t}\n\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilToolbarGUI->getHTML() . $cache_form->getHTML() . $table_html);\n\t}\n\n\n\tprotected function flushCache() {\n\t\trequire_once('Services/GlobalCache/classes/class.ilGlobalCache.php');\n\t\tilGlobalCache::flushAll();\n\t\tilUtil::redirect('setup.php?cmd=cache');\n\t}\n\n\n\tprotected function addMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerFormGUI.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\t\t$ilMemcacheServerFormGUI = new ilMemcacheServerFormGUI(new ilMemcacheServer());\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilMemcacheServerFormGUI->getHTML());\n\t}\n\n\n\tprotected function createMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerFormGUI.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\t\t$ilMemcacheServerFormGUI = new ilMemcacheServerFormGUI(new ilMemcacheServer());\n\t\t$ilMemcacheServerFormGUI->setValuesByPost();\n\t\tif ($ilMemcacheServerFormGUI->saveObject()) {\n\t\t\tilUtil::redirect('setup.php?cmd=cache');\n\t\t}\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilMemcacheServerFormGUI->getHTML());\n\t}\n\n\n\tprotected function editMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerFormGUI.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\t\t$ilMemcacheServerFormGUI = new ilMemcacheServerFormGUI(ilMemcacheServer::find($_GET['mcsid']));\n\t\t$ilMemcacheServerFormGUI->fillForm();\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilMemcacheServerFormGUI->getHTML());\n\t}\n\n\n\tprotected function updateMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerFormGUI.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\n\t\t$ilMemcacheServerFormGUI = new ilMemcacheServerFormGUI(ilMemcacheServer::find($_GET['mcsid']));\n\t\t$ilMemcacheServerFormGUI->setValuesByPost();\n\t\tif ($ilMemcacheServerFormGUI->saveObject()) {\n\t\t\tilUtil::redirect('setup.php?cmd=cache');\n\t\t}\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilMemcacheServerFormGUI->getHTML());\n\t}\n\n\n\tprotected function deleteMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServer.php');\n\t\t$ilMemcacheServer = ilMemcacheServer::find($_GET['mcsid']);\n\t\t$ilMemcacheServer->delete();\n\t\tilUtil::redirect('setup.php?cmd=cache');\n\t}\n\n\n\tpublic function saveCache() {\n\t\t/**\n\t\t * @var $ini ilIniFile\n\t\t */\n\t\trequire_once('Services/GlobalCache/classes/class.ilGlobalCache.php');\n\t\trequire_once('./Services/GlobalCache/classes/Settings/class.ilGlobalCacheSettings.php');\n\t\tilGlobalCache::flushAll();\n\t\t$ini = $this->setup->getClient()->ini;\n\n\t\t$ilGlobalCacheSettings = new ilGlobalCacheSettings();\n\t\t$ilGlobalCacheSettings->readFromIniFile($ini);\n\t\t$service_type = $_POST['global_cache_service_type'];\n\t\t$ilGlobalCacheSettings->setActive(($service_type >= 0) ? true : false);\n\t\t$ilGlobalCacheSettings->setService($service_type);\n\t\t$ilGlobalCacheSettings->resetActivatedComponents();\n\t\tif (is_array($_POST['activate']) && count($_POST['activate']) > 0) {\n\t\t\tforeach ($_POST['activate'] as $comp => $a) {\n\t\t\t\tif ($comp == 'all') {\n\t\t\t\t\t$ilGlobalCacheSettings->activateAll();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$ilGlobalCacheSettings->addActivatedComponent($comp);\n\t\t\t}\n\t\t}\n\n\t\t$ilGlobalCacheSettings->writeToIniFile($ini);\n\n\t\tilUtil::sendSuccess($this->lng->txt('saved_successfully'), true);\n\t\tilUtil::redirect('setup.php?cmd=cache');\n\t}\n\n\n\t/**\n\t * Display database slave\n\t */\n\tfunction displayDatabaseSlave($a_from_save = false)\n\t{\n\t\tglobal $ilErr,$ilDB,$ilLog;\n\n\t\t$this->checkDisplayMode(\"setup_database\");\n\n\t\t//$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.clientsetup_db.html\", \"setup\");\n\n\t\t// database is intalled\n\t\tif (!$this->setup->getClient()->db_installed)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$this->setDbSubTabs(\"repl\");\n\n\t\tif (!$a_from_save)\n\t\t{\n\t\t\t$ilDB = $this->setup->getClient()->db;\n\t\t\t$this->lng->setDbHandler($ilDB);\n\t\t}\n\n\t\tilUtil::sendInfo($this->lng->txt(\"mysql_replication_info_alpha\"));\n\n\t\tif (!$a_from_save)\n\t\t{\n\t\t\t$this->initDbSlaveForm();\n\t\t}\n\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\t$this->checkPanelMode();\n\n\t\t$this->displaySubTabs();\n\t}\n\n\t/**\n\t * Init db slave form\n\t */\n\tpublic function initDbSlaveForm()\n\t{\n\t\tglobal $lng, $ilCtrl, $ilDB;\n\n\t\t$client = $this->setup->getClient();\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// db type\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"db_type\"), \"slave_type\");\n\t\t$ne->setValue($lng->txt(\"db_\".$ilDB->getDbType()));\n\t\t$this->form->addItem($ne);\n\n\t\t// activate slave\n\t\t$act = new ilCheckboxInputGUI($this->lng->txt(\"db_active\"), \"slave_active\");\n\t\t$act->setChecked($client->getDbSlaveActive());\n\t\t$this->form->addItem($act);\n\n\t\t// slave host\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_host\"), \"slave_host\");\n\t\t$ti->setValue($client->getDbSlaveHost());\n\t\t$ti->setMaxLength(120);\n\t\t$ti->setRequired(true);\n\t\t$act->addSubItem($ti);\n\n\t\t// slave name\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_name\"), \"slave_name\");\n\t\t$ti->setValue($client->getDbSlaveName());\n\t\t$ti->setRequired(true);\n\t\t$ti->setMaxLength(40);\n\t\t$act->addSubItem($ti);\n\n\t\t// slave user\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_user\"), \"slave_user\");\n\t\t$ti->setValue($client->getDbSlaveUser());\n\t\t$ti->setMaxLength(40);\n\t\t$ti->setRequired(true);\n\t\t$act->addSubItem($ti);\n\n\t\t// slave port\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_port\"), \"slave_port\");\n\t\t$ti->setValue($client->getDbSlavePort());\n\t\t$ti->setMaxLength(8);\n\t\t$act->addSubItem($ti);\n\n\t\t// set password\n\t\t$set_pw = new ilCheckboxInputGUI($this->lng->txt(\"db_set_password\"), \"set_slave_password\");\n\t\t$act->addSubItem($set_pw);\n\n\t\t// slave password\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_pass\"), \"slave_pass\");\n\t\t$ti->setMaxLength(40);\n\t\t$set_pw->addSubItem($ti);\n\n\t\t$this->form->addCommandButton(\"saveDbSlave\", $lng->txt(\"save\"));\n\n\t\t$this->form->setTitle($lng->txt(\"db_slave_settings\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t * Save db slave form\n\t */\n\tpublic function saveDbSlave()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl, $ilDB;\n\n\t\t$client = $this->setup->getClient();\n\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$this->lng->setDbHandler($ilDB);\n\n\t\t$this->initDbSlaveForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t$client->setDbSlaveActive($this->form->getInput(\"slave_active\"));\n\t\t\tif ($this->form->getInput(\"slave_active\"))\n\t\t\t{\n\t\t\t\t$client->setDbSlaveHost($this->form->getInput(\"slave_host\"));\n\t\t\t\t$client->setDbSlaveUser($this->form->getInput(\"slave_user\"));\n\t\t\t\t$client->setDbSlavePort($this->form->getInput(\"slave_port\"));\n\t\t\t\t$client->setDbSlaveName($this->form->getInput(\"slave_name\"));\n\t\t\t\tif ($this->form->getInput(\"set_slave_password\"))\n\t\t\t\t{\n\t\t\t\t\t$client->setDbSlavePass($this->form->getInput(\"slave_pass\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\t$client->writeIni();\n\n\t\t\tilUtil::sendSuccess($lng->txt(\"saved_successfully\"), true);\n\t\t\tilUtil::redirect(\"setup.php?cmd=dbslave\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->form->setValuesByPost();\n\t\t\t$this->displayDatabaseSlave(true);\n\t\t}\n\t}\n\n\n\t/**\n\t * Set db subtabs\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction setDbSubtabs($a_subtab_id = \"db\")\n\t{\n\t\tglobal $ilDB;\n\n\t\tif ($ilDB->getDbType() == \"mysql\")\n\t\t{\n\t\t\t$this->tabs->addSubTab(\"db\", $this->lng->txt(\"db_master\"), \"setup.php?client_id=\".$this->client_id.\"&cmd=db\");\n\t\t\t$this->tabs->addSubTab(\"repl\", $this->lng->txt(\"db_slave\"), \"setup.php?client_id=\".$this->client_id.\"&cmd=dbslave\");\n\t\t}\n\n\t\t$this->tabs->activateSubTab($a_subtab_id);\n\t}\n\n\n\n\t/**\n\t* Init client db form.\n\t*/\n\tpublic function initClientDbForm($a_install = true, $dbupdate = null, $db_status = false, $hotfix_available = false, $custom_updates_available = false)\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// type\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"db_type\"), \"db_type\");\n\t\t$this->form->addItem($ne);\n\n\t\t// version\n\t\tif ($this->setup->getClient()->getDBSetup()->isDatabaseInstalled()\n\t\t    && in_array($this->setup->getClient()->getDbType(), array(\n\t\t\t\tilDBConstants::TYPE_MYSQL,\n\t\t\t\tilDBConstants::TYPE_INNODB,\n\t\t\t))\n\t\t) {\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"version\"), \"db_version\");\n\t\t\t$ilDB = $this->setup->getClient()->db;\n\t\t\t$ne->setValue($ilDB->getDBVersion());\n\t\t\t$this->form->addItem($ne);\n\t\t}\n\n\t\t// host\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"host\"), \"db_host\");\n\t\t$this->form->addItem($ne);\n\n\t\t// name\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"name\"), \"db_name\");\n\t\t$this->form->addItem($ne);\n\n\t\t// user\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"user\"), \"db_user\");\n\t\t$this->form->addItem($ne);\n\n\t\t// port\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"port\"), \"db_port\");\n\t\t$this->form->addItem($ne);\n\n\t\t// creation / collation for mysql\n\t\tif ((in_array($this->setup->getClient()->getDBType(), ilDBConstants::getInstallableTypes()) && $a_install))\n\t\t{\n\t\t\t// create database \n\t\t\t$cb = new ilCheckboxInputGUI($lng->txt(\"database_create\"), \"chk_db_create\");\n\n\t\t\t\t// collation\n\t\t\t\t$collations = array\n\t\t\t\t(\n\t\t\t\t\t\"utf8_unicode_ci\",\n\t\t\t\t\t\"utf8_general_ci\",\n\t\t\t\t\t\"utf8_czech_ci\",\n\t\t\t\t\t\"utf8_danish_ci\",\n\t\t\t\t\t\"utf8_estonian_ci\",\n\t\t\t\t\t\"utf8_icelandic_ci\",\n\t\t\t\t\t\"utf8_latvian_ci\",\n\t\t\t\t\t\"utf8_lithuanian_ci\",\n\t\t\t\t\t\"utf8_persian_ci\",\n\t\t\t\t\t\"utf8_polish_ci\",\n\t\t\t\t\t\"utf8_roman_ci\",\n\t\t\t\t\t\"utf8_romanian_ci\",\n\t\t\t\t\t\"utf8_slovak_ci\",\n\t\t\t\t\t\"utf8_slovenian_ci\",\n\t\t\t\t\t\"utf8_spanish2_ci\",\n\t\t\t\t\t\"utf8_spanish_ci\",\n\t\t\t\t\t\"utf8_swedish_ci\",\n\t\t\t\t\t\"utf8_turkish_ci\"\n\t\t\t\t);\n\t\t\t\tforeach($collations as $collation)\n\t\t\t\t{\n\t\t\t\t\t$options[$collation] = $collation;\n\t\t\t\t}\n\t\t\t\t$si = new ilSelectInputGUI($lng->txt(\"collation\"), \"collation\");\n\t\t\t\t$si->setOptions($options);\n\t\t\t\t$si->setInfo($this->lng->txt(\"info_text_db_collation2\").\" \".\n\t\t\t\t\t\"<a target=\\\"_new\\\" href=\\\"http://dev.mysql.com/doc/mysql/en/charset-unicode-sets.html\\\">\".\n\t\t\t\t\t\" MySQL Reference Manual :: 10.11.1 Unicode Character Sets</a>\");\n\t\t\t\t$cb->addSubItem($si);\n\n\t\t\t$this->form->addItem($cb);\n\t\t}\n\n\t\tif ($a_install)\n\t\t{\n\t\t\t$this->form->addCommandButton(\"installDatabase\", $lng->txt(\"database_install\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ilDB = $this->setup->getClient()->db;\n\t\t\t$this->lng->setDbHandler($ilDB);\n\t\t\t$dbupdate = new ilDBUpdate($ilDB);\n\n\t\t\t// database version\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"database_version\"), \"curv\");\n\t\t\t$ne->setValue($dbupdate->currentVersion);\n\t\t\t$this->form->addItem($ne);\n\n\t\t\t// file version\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"file_version\"), \"filev\");\n\t\t\t$ne->setValue($dbupdate->fileVersion);\n\t\t\t$this->form->addItem($ne);\n\n\t\t\tif (!$db_status = $dbupdate->getDBVersionStatus())\n\t\t\t{\n\t\t\t\t// next update step\n\t\t\t\t$options = array();\n\t\t\t\tfor ($i = $dbupdate->currentVersion + 1; $i <= $dbupdate->fileVersion; $i++)\n\t\t\t\t{\n\t\t\t\t\t$options[$i] = $i;\n\t\t\t\t}\n\t\t\t\tif (count($options) > 1)\n\t\t\t\t{\n\t\t\t\t\t$si = new ilSelectInputGUI($lng->txt(\"next_update_break\"), \"update_break\");\n\t\t\t\t\t$si->setOptions($options);\n\t\t\t\t\t$si->setInfo($lng->txt(\"next_update_break_info\"));\n\t\t\t\t\t$this->form->addItem($si);\n\t\t\t\t}\n\n\t\t\t\tif ($dbupdate->getRunningStatus() > 0)\n\t\t\t\t{\n\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"db_update_interrupted\").\" (Step \".$dbupdate->getRunningStatus().\") <br /><br />\".\n\t\t\t\t\t\t$this->lng->txt(\"db_update_interrupted_avoid\"));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tilUtil::sendInfo($this->lng->txt(\"database_needs_update\"));\n\t\t\t\t}\n\t\t\t\t$this->form->addCommandButton(\"updateDatabase\", $lng->txt(\"database_update\"));\n\t\t\t\t$this->form->addCommandButton(\"showUpdateSteps\", $lng->txt(\"show_update_steps\"));\n\t\t\t}\n\t\t\telse if ($hotfix_available)\n\t\t\t{\n\t\t\t\t// hotfix current version\n\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"applied_hotfixes\"), \"curhf\");\n\t\t\t\t$ne->setValue($dbupdate->getHotfixCurrentVersion());\n\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t// hotfix file version\n\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"available_hotfixes\"), \"filehf\");\n\t\t\t\t$ne->setValue($dbupdate->getHotfixFileVersion());\n\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t$this->form->addCommandButton(\"applyHotfix\", $lng->txt(\"apply_hotfixes\"));\n\t\t\t\t$this->form->addCommandButton(\"showHotfixSteps\", $lng->txt(\"show_update_steps\"));\n\t\t\t\tilUtil::sendInfo($this->lng->txt(\"database_needs_update\"));\n\t\t\t}\n\t\t\telseif($custom_updates_available)\n\t\t\t{\n\t\t\t\t// custom updates current version\n\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"applied_custom_updates\"), \"curcu\");\n\t\t\t\t$ne->setValue($dbupdate->getCustomUpdatesCurrentVersion());\n\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t// custom updates file version\n\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"available_custom_updates\"), \"filecu\");\n\t\t\t\t$ne->setValue($dbupdate->getCustomUpdatesFileVersion());\n\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t$this->form->addCommandButton(\"applyCustomUpdates\", $lng->txt(\"apply_custom_updates\"));\n\t\t\t\tilUtil::sendInfo($this->lng->txt(\"database_needs_update\"));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($dbupdate->getHotfixFileVersion() > 0)\n\t\t\t\t{\n\t\t\t\t\t// hotfix current version\n\t\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"applied_hotfixes\"), \"curhf\");\n\t\t\t\t\t$ne->setValue($dbupdate->getHotfixCurrentVersion());\n\t\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t\t// hotfix file version\n\t\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"available_hotfixes\"), \"filehf\");\n\t\t\t\t\t$ne->setValue($dbupdate->getHotfixFileVersion());\n\t\t\t\t\t$this->form->addItem($ne);\n\t\t\t\t}\n\t\t\t\tif ($dbupdate->getCustomUpdatesFileVersion() > 0)\n\t\t\t\t{\n\t\t\t\t\t// custom updates current version\n\t\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"applied_custom_updates\"), \"curcu\");\n\t\t\t\t\t$ne->setValue($dbupdate->getCustomUpdatesCurrentVersion());\n\t\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t\t// custom updates file version\n\t\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"available_custom_updates\"), \"filecu\");\n\t\t\t\t\t$ne->setValue($dbupdate->getCustomUpdatesFileVersion());\n\t\t\t\t\t$this->form->addItem($ne);\n\t\t\t\t}\n\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"database_is_uptodate\"));\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setTitle($lng->txt(\"database\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t* Get current values for client db from\n\t*\n\t*/\n\tpublic function getClientDbFormValues($dbupdate = null)\n\t{\n\t\t$values = array();\n\t\t$values[\"db_host\"] = $this->setup->getClient()->getDbHost();\n\t\t$values[\"db_name\"] = $this->setup->getClient()->getDbName();\n\t\t$values[\"db_user\"] = $this->setup->getClient()->getDbUser();\n\t\t$values[\"db_port\"] = $this->setup->getClient()->getDbPort();\n\t\t$values[\"db_type\"] = ilDBConstants::describe($this->setup->getClient()->getDbType());\n\t\tif (is_object($dbupdate))\n\t\t{\n\t\t\t$values[\"update_break\"] = $dbupdate->fileVersion;\n\t\t\tif (($dbupdate->fileVersion - $dbupdate->currentVersion) >= 200)\n\t\t\t{\n\t\t\t\t$values[\"update_break\"] = $dbupdate->currentVersion + 200 -\n\t\t\t\t\t($dbupdate->currentVersion % 100);\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\n\t////\n\t//// INSTALL DATABASE\n\t////\n\n\t/**\n\t * Install the database\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction installDatabase()\n\t{\n\t\tif (!$this->setup->getClient()->getDBSetup()->isDatabaseExisting()) {\n\t\t\tif ($_POST[\"chk_db_create\"]) {\n\t\t\t\tif (!$this->setup->createDatabase($_POST[\"collation\"])) {\n\t\t\t\t\techo \"installation failed\";\n\t\t\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()), true);\n\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"database_not_exists_create_first\"), true);\n\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t\t\t}\n\t\t}\n\t\tif (!$this->setup->installDatabase()) {\n\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()), true);\n\t\t} else {\n\t\t\tilUtil::sendSuccess($this->lng->txt(\"database_installed\"), true);\n\t\t}\n\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t}\n\n\t////\n\t//// UPDATE DATABASE\n\t////\n\n\t/**\n\t * Update database\n\t */\n\tfunction updateDatabase()\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\t$ilCtrlStructureReader->setIniFile($this->setup->getClient()->ini);\n\n\t\tinclude_once \"./Services/Database/classes/class.ilDBUpdate.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacAdmin.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacReview.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacSystem.php\";\n\t\tinclude_once \"./Services/Tree/classes/class.ilTree.php\";\n\t\tinclude_once \"./Services/Xml/classes/class.ilSaxParser.php\";\n\t\tinclude_once \"./Services/Object/classes/class.ilObjectDefinition.php\";\n\n\n\t\t// referencing db handler in language class\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$this->lng->setDbHandler($ilDB);\n\n\t\t// run dbupdate\n\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t$dbupdate->applyUpdate((int) $_POST[\"update_break\"]);\n\n\t\tif ($dbupdate->updateMsg == \"no_changes\")\n\t\t{\n\t\t\t$message = $this->lng->txt(\"no_changes\").\". \".$this->lng->txt(\"database_is_uptodate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sep = \"\";\n\t\t\tforeach ($dbupdate->updateMsg as $row)\n\t\t\t{\n\t\t\t\tif ($row[\"msg\"] == \"update_applied\")\n\t\t\t\t{\n\t\t\t\t\t$a_message.= $sep.$row[\"nr\"];\n\t\t\t\t\t$sep = \", \";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$e_message.= \"<br/>\".$this->lng->txt($row[\"msg\"]).\": \".$row[\"nr\"];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($a_message != \"\")\n\t\t\t{\n\t\t\t\t$a_message = $this->lng->txt(\"update_applied\").\": \".$a_message;\n\t\t\t}\n\t\t}\n\n\t\tilUtil::sendInfo($a_message.$e_message, true);\n\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t}\n\n\t////\n\t//// UPDATE DATABASE\n\t////\n\n\t/**\n\t * Show hotfix steps\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction showHotfixSteps()\n\t{\n\t\t$this->showUpdateSteps(true);\n\t}\n\n\n\t/**\n\t * Update database\n\t */\n\tfunction showUpdateSteps($a_hotfix = false)\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\t$this->checkDisplayMode(\"setup_database\");\n\n\t\t//$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.clientsetup_db.html\", \"setup\");\n\n\t\t// database is intalled\n\t\tif ($this->setup->getClient()->db_installed)\n\t\t{\n\t\t\t$ilDB = $this->setup->getClient()->db;\n\t\t\t$this->lng->setDbHandler($ilDB);\n\t\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t\t$db_status = $dbupdate->getDBVersionStatus();\n\t\t\t$hotfix_available = $dbupdate->hotfixAvailable();\n\t\t\t$custom_updates_available = $dbupdate->customUpdatesAvailable();\n//\t\t\t$this->initClientDbForm(false, $dbupdate, $db_status, $hotfix_available, $custom_updates_available);\n//\t\t\t$this->getClientDbFormValues($dbupdate);\n\n\t\t\t$ntpl = new ilTemplate(\"tpl.setup_steps.html\", true, true, \"setup\");\n\t\t\tif ($a_hotfix)\n\t\t\t{\n\t\t\t\t$ntpl->setVariable(\"CONTENT\", $dbupdate->getHotfixSteps());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ntpl->setVariable(\"CONTENT\", $dbupdate->getUpdateSteps($_POST[\"update_break\"]));\n\t\t\t}\n\t\t\t$ntpl->setVariable(\"BACK\", $this->lng->txt(\"back\"));\n\t\t\t$ntpl->setVariable(\"HREF_BACK\", \"./setup.php?client_id=&cmd=db\");\n\t\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $ntpl->get());\n\t\t}\n\t}\n\n\n\t////\n\t//// Apply hotfixes\n\t////\n\n\t/**\n\t * Apply hotfixes\n\t */\n\tfunction applyHotfix()\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\t$ilCtrlStructureReader->setIniFile($this->setup->getClient()->ini);\n\n\t\tinclude_once \"./Services/Database/classes/class.ilDBUpdate.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacAdmin.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacReview.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacSystem.php\";\n\t\tinclude_once \"./Services/Tree/classes/class.ilTree.php\";\n\t\tinclude_once \"./Services/Xml/classes/class.ilSaxParser.php\";\n\t\tinclude_once \"./Services/Object/classes/class.ilObjectDefinition.php\";\n\n\t\t// referencing db handler in language class\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$this->lng->setDbHandler($ilDB);\n\n\t\t// run dbupdate\n\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t$dbupdate->applyHotfix();\n\n\t\tif ($dbupdate->updateMsg == \"no_changes\")\n\t\t{\n\t\t\t$message = $this->lng->txt(\"no_changes\").\". \".$this->lng->txt(\"database_is_uptodate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sep = \"\";\n\t\t\tforeach ($dbupdate->updateMsg as $row)\n\t\t\t{\n\t\t\t\tif ($row[\"msg\"] == \"update_applied\")\n\t\t\t\t{\n\t\t\t\t\t$a_message.= $sep.$row[\"nr\"];\n\t\t\t\t\t$sep = \", \";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$e_message.= \"<br/>\".$this->lng->txt($row[\"msg\"]).\": \".$row[\"nr\"];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($a_message != \"\")\n\t\t\t{\n\t\t\t\t$a_message = $this->lng->txt(\"update_applied\").\": \".$a_message;\n\t\t\t}\n\t\t}\n\n\t\tilUtil::sendInfo($a_message.$e_message, true);\n\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t}\n\n\t////\n\t//// SESSION\n\t////\n\n    /**\n\t * display sessions form and process form input\n\t */\n\tfunction displaySessions()\n\t{\n\t\trequire_once('Services/Authentication/classes/class.ilSessionControl.php');\n\n\t\t$this->checkDisplayMode(\"setup_sessions\");\n\n\t\tif (!$this->setup->getClient()->db_installed)\n\t\t{\n\t\t\t// program should never come to this place\n\t\t\t$message = \"No database found! Please install database first.\";\n\t\t\tilUtil::sendInfo($message);\n\t\t}\n\n\t\t$setting_fields = ilSessionControl::getSettingFields();\n\n\t\t$valid = true;\n\t\t$settings = array();\n\n\t\tforeach( $setting_fields as $field )\n\t\t{\n\t\t\tif( $field == 'session_allow_client_maintenance' )\n\t\t\t{\n\t\t\t\tif( isset($_POST[$field]) )\t\t$_POST[$field] = '1';\n\t\t\t\telse\t\t\t\t\t\t\t$_POST[$field] = '0';\n\t\t\t}\n\n\t\t\tif( isset($_POST[$field]) && $_POST[$field] != '' )\n\t\t\t{\n\t\t\t\t$settings[$field] = $_POST[$field];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$valid = false;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\tif($valid) $this->setup->setSessionSettings($settings);\n\n\t\t$settings = $this->setup->getSessionSettings();\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$form = new ilPropertyFormGUI();\n\n\t\tinclude_once 'Services/Authentication/classes/class.ilSession.php';\n\n\t\t// BEGIN SESSION SETTINGS\n\t\t// create session handling radio group\n\t\t$ssettings = new ilRadioGroupInputGUI($this->lng->txt('sess_mode'), 'session_handling_type');\n\t\t$ssettings->setValue($settings['session_handling_type'], ilSession::SESSION_HANDLING_FIXED);\n\n\t\t// first option, fixed session duration\n\t\t$fixed = new ilRadioOption($this->lng->txt('sess_fixed_duration'), ilSession::SESSION_HANDLING_FIXED);\n\n\t\t// add session handling to radio group\n\t\t$ssettings->addOption($fixed);\n\n\t\t// second option, session control\n\t\t$ldsh = new ilRadioOption($this->lng->txt('sess_load_dependent_session_handling'), ilSession::SESSION_HANDLING_LOAD_DEPENDENT);\n\n\t\t// this is the max count of active sessions\n\t\t// that are getting started simlutanously\n\t\t$ti = new ilTextInputGUI($this->lng->txt('sess_max_session_count'), \"session_max_count\");\n\t\t$ti->setInfo($this->lng->txt('sess_max_session_count_info'));\n\t\t$ti->setMaxLength(5);\n\t\t$ti->setSize(5);\n\t\t$ti->setValue($settings['session_max_count']);\n\t\t$ldsh->addSubItem($ti);\n\n\t\t// after this (min) idle time the session can be deleted,\n\t\t// if there are further requests for new sessions,\n\t\t// but max session count is reached yet\n\t\t$ti = new ilTextInputGUI($this->lng->txt('sess_min_session_idle'), \"session_min_idle\");\n\t\t$ti->setInfo($this->lng->txt('sess_min_session_idle_info'));\n\t\t$ti->setMaxLength(5);\n\t\t$ti->setSize(5);\n\t\t$ti->setValue($settings['session_min_idle']);\n\t\t$ldsh->addSubItem($ti);\n\n\t\t// after this (max) idle timeout the session expires\n\t\t// and become invalid, so it is not considered anymore\n\t\t// when calculating current count of active sessions\n\t\t$ti = new ilTextInputGUI($this->lng->txt('sess_max_session_idle'), \"session_max_idle\");\n\t\t$ti->setInfo($this->lng->txt('sess_max_session_idle_info'));\n\t\t$ti->setMaxLength(5);\n\t\t$ti->setSize(5);\n\t\t$ti->setValue($settings['session_max_idle']);\n\t\t$ldsh->addSubItem($ti);\n\n\t\t// this is the max duration that can elapse between the first and the secnd\n\t\t// request to the system before the session is immidietly deleted\n\t\t$ti = new ilTextInputGUI($this->lng->txt('sess_max_session_idle_after_first_request'), \"session_max_idle_after_first_request\");\n\t\t$ti->setInfo($this->lng->txt('sess_max_session_idle_after_first_request_info'));\n\t\t$ti->setMaxLength(5);\n\t\t$ti->setSize(5);\n\t\t$ti->setValue($settings['session_max_idle_after_first_request']);\n\t\t$ldsh->addSubItem($ti);\n\n\t\t// add session control to radio group\n\t\t$ssettings->addOption($ldsh);\n\n\t\t$form->addItem($ssettings);\n\n\t\t// controls the ability t maintenance the following\n\t\t// settings in client administration\n\t\t$chkb = new ilCheckboxInputGUI($this->lng->txt('sess_allow_client_maintenance'), \"session_allow_client_maintenance\");\n\t\t$chkb->setInfo($this->lng->txt('sess_allow_client_maintenance_info'));\n\t\t$chkb->setChecked($settings['session_allow_client_maintenance'] ? true : false);\n\t\t$form->addItem($chkb);\n\t\t// END SESSION SETTINGS\n\n\t\t// save and cancel commands\n\t\t$form->addCommandButton(\"sess\", $this->lng->txt('save'));\n\n\t\t$form->setTitle($this->lng->txt(\"sess_sessions\"));\n\t\t$form->setFormAction('setup.php?client_id='.$this->client_id.'&cmd=sess');\n\n\t\t$this->tpl->setVariable(\"TXT_SETUP_TITLE\",ucfirst(trim($this->lng->txt('sess_sessions'))));\n\t\t$this->tpl->setVariable(\"TXT_INFO\", '');\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $form->getHTML());\n\n\t\t/*$this->setButtonPrev(\"db\");\n\n\t\tif($this->setup->checkClientSessionSettings($this->client,true))\n\t\t{\n\t\t\t$this->setButtonNext(\"lang\");\n\t\t}*/\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t////\n\t//// LANGUAGES\n\t////\n\n\t/**\n\t * display language form and process form input\n\t */\n\tfunction displayLanguages()\n\t{\n\t\t$this->checkDisplayMode(\"setup_languages\");\n\n\t\tif (!$this->setup->getClient()->db_installed)\n\t\t{\n\t\t\t// program should never come to this place\n\t\t\t$message = \"No database found! Please install database first.\";\n\t\t\tilUtil::sendFailure($message);\n\t\t}\n\n\t\tinclude_once(\"./setup/classes/class.ilSetupLanguageTableGUI.php\");\n\t\t$tab = new ilSetupLanguageTableGUI($this->setup->getClient());\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $tab->getHTML());\n\n\t\t$this->tpl->setVariable(\"TXT_SETUP_TITLE\",ucfirst(trim($this->lng->txt(\"setup_languages\"))));\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_lang\"));\n\n\t\t$installed_langs = $this->lng->getInstalledLanguages();\n\t\t$lang_count = count($installed_langs);\n\t\tif ($lang_count > 0)\n\t\t{\n\t\t\t$this->setup->getClient()->status[\"lang\"][\"status\"] = true;\n\t\t\t$this->setup->getClient()->status[\"lang\"][\"comment\"] = $lang_count.\" \".$this->lng->txt(\"languages_installed\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->setup->getClient()->status[\"lang\"][\"status\"] = false;\n\t\t\t$this->setup->getClient()->status[\"lang\"][\"comment\"] = $this->lng->txt(\"lang_none_installed\");\n\t\t}\n\n\t\t$this->setButtonPrev(\"lang\");\n\n\t\tif ($lang_count > 0)\n\t\t{\n\t\t\t$this->setButtonNext(\"contact\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Save languages\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction saveLanguages()\n\t{\n\t\tif (empty($_POST[\"form\"][\"lang_id\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"lang_min_one_language\"), true);\n\t\t\tilUtil::redirect(\"setup.php?cmd=lang\");\n\t\t}\n\n\t\tif (!in_array($_POST[\"form\"][\"lang_default\"],$_POST[\"form\"][\"lang_id\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"lang_not_installed_default\"), true);\n\t\t\tilUtil::redirect(\"setup.php?cmd=lang\");\n\t\t}\n\n\t\t$result = $this->lng->installLanguages($_POST[\"form\"][\"lang_id\"], $_POST[\"form\"][\"lang_local\"]);\n\n\t\tif (is_array($result))\n\t\t{\n\t\t\t$count = count($result);\n\t\t\t$txt = \"tet\";\n\n\t\t\tforeach ($result as $key => $lang_key)\n\t\t\t{\n\t\t\t\t$list .= $this->lng->txt(\"lang_\".$lang_key);\n\n\t\t\t\tif ($count > $key + 1)\n\t\t\t\t{\n\t\t\t\t\t$list .= \", \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->setup->getClient()->setDefaultLanguage($_POST[\"form\"][\"lang_default\"]);\n\t\t$message = $this->lng->txt(\"languages_installed\");\n\n\t\tif ($result !== true)\n\t\t{\n\t\t\t$message .= \"<br/>(\".$this->lng->txt(\"langs_not_valid_not_installed\").\": \".$list.\")\";\n\t\t}\n\t\tilUtil::sendInfo($message, true);\n\t\tilUtil::redirect(\"setup.php?cmd=lang\");\n\t}\n\n\t////\n\t//// CONTACT DATA\n\t////\t\n\n\t/**\n\t * display contact data form and process form input\n\t */\n\tfunction displayContactData($a_omit_init = false)\n\t{\n\t\t$this->checkDisplayMode(\"setup_contact_data\");\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\tif (!$a_omit_init)\n\t\t{\n\t\t\t$this->initContactDataForm();\n\t\t\t$this->getContactValues();\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_contact\"));\n\t\t$this->setButtonPrev(\"lang\");\n\n\t\t$check = $this->setup->checkClientContact($this->setup->client);\n\n\t\t$this->setup->getClient()->status[\"contact\"][\"status\"] = $check[\"status\"];\n\t\t$this->setup->getClient()->status[\"contact\"][\"comment\"] = $check[\"comment\"];\n\n\t\tif ($check[\"status\"])\n\t\t{\n\t\t\t$this->setButtonNext(\"proxy\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Init contact data form.\n\t *\n\t * @param        int        $a_mode        Edit Mode\n\t */\n\tpublic function initContactDataForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// name\n\t\t$ti = new ilTextInputGUI($lng->txt(\"name\"), \"inst_name\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// description\n\t\t$ti = new ilTextInputGUI($lng->txt(\"client_info\"), \"inst_info\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$this->form->addItem($ti);\n\n\t\t// institution\n\t\t$ti = new ilTextInputGUI($lng->txt(\"client_institution\"), \"inst_institution\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$this->form->addItem($ti);\n\n\t\t// contact data\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"contact_data\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// first name\n\t\t$ti = new ilTextInputGUI($lng->txt(\"firstname\"), \"admin_firstname\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// last name\n\t\t$ti = new ilTextInputGUI($lng->txt(\"lastname\"), \"admin_lastname\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t$fs = array (\n\t\t\t\"title\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"position\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"institution\" => array(\"max\" => 200, \"size\" => 30),\n\t\t\t\"street\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"zipcode\" => array(\"max\" => 10, \"size\" => 5),\n\t\t\t\"city\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"country\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"phone\" => array(\"max\" => 64, \"size\" => 30)\n\t\t\t);\n\t\tforeach ($fs as $f => $op)\n\t\t{\n\t\t\t// field\n\t\t\t$ti = new ilTextInputGUI($lng->txt($f), \"admin_\".$f);\n\t\t\t$ti->setMaxLength($op[\"max\"]);\n\t\t\t$ti->setSize($op[\"size\"]);\n\t\t\t$ti->setInfo($lng->txt(\"\"));\n\t\t\t$this->form->addItem($ti);\n\t\t}\n\n\t\t// email\n\t\t$ti = new ilEmailInputGUI($lng->txt(\"email\"), \"admin_email\");\n\t\t$ti->setRequired(true);\n\t\t$ti->allowRFC822(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// feedback recipient\n\t\t/*$ti = new ilEmailInputGUI($lng->txt(\"feedback_recipient\"), \"feedback_recipient\");\n\t\t$ti->setInfo($lng->txt(\"feedback_recipient_info\"));\n\t\t$ti->setRequired(true);\n\t\t$ti->allowRFC822(true);\n\t\t$this->form->addItem($ti);*/\n\n\t\t// error recipient\n\t\t/*$ti = new ilEmailInputGUI($lng->txt(\"error_recipient\"), \"error_recipient\");\n\t\t$ti->allowRFC822(true);\n\t\t$this->form->addItem($ti);*/\n\n\t\t$this->form->addCommandButton(\"saveContact\", $lng->txt(\"save\"));\n\n\t\t$this->form->setTitle($lng->txt(\"client_data\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t * Get current values for contact from\n\t */\n\tpublic function getContactValues()\n\t{\n\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\t$values = $settings;\n\n\t\t$values[\"inst_name\"] = ($this->setup->getClient()->getName())\n\t\t\t? $this->setup->getClient()->getName()\n\t\t\t: $this->setup->getClient()->getId();\n\t\t$values[\"inst_info\"] = $this->setup->getClient()->getDescription();\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\n\t/**\n\t * Save contact form\n\t */\n\tpublic function saveContact()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl;\n\n\t\t$this->initContactDataForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t$this->setup->getClient()->setSetting(\"admin_firstname\", $_POST[\"admin_firstname\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_lastname\", $_POST[\"admin_lastname\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_title\", $_POST[\"admin_title\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_position\", $_POST[\"admin_position\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_institution\", $_POST[\"admin_institution\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_street\", $_POST[\"admin_street\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_zipcode\", $_POST[\"admin_zipcode\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_city\", $_POST[\"admin_city\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_country\", $_POST[\"admin_country\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_phone\", $_POST[\"admin_phone\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_email\", $_POST[\"admin_email\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"inst_institution\", $_POST[\"inst_institution\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"inst_name\", $_POST[\"inst_name\"]);\n\t\t\t//$this->setup->getClient()->setSetting(\"feedback_recipient\", $_POST[\"feedback_recipient\"]);\n\t\t\t//$this->setup->getClient()->setSetting(\"error_recipient\", $_POST[\"error_recipient\"]);\n\n\t\t\t// update client.ini\n\t\t\t$this->setup->getClient()->setName($_POST[\"inst_name\"]);\n\t\t\t$this->setup->getClient()->setDescription($_POST[\"inst_info\"]);\n\t\t\t$this->setup->getClient()->ini->write();\n\n\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_saved\"), true);\n\t\t\tilUtil::redirect(\"setup.php?cmd=displayContactData\");\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayContactData(true);\n\t}\n\n\t//// \n\t//// NIC Registration\n\t////  \n\n\t/**\n\t * display nic registration form and process form input\n\t */\n\tfunction displayNIC($a_omit_init = false)\n\t{\n\t\t$this->checkDisplayMode(\"nic_registration\");\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\t\t$nic_key = $this->setup->getClient()->getNICkey();\n\n\t\t// reload settings\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n//var_dump($settings);\n\t\tif ($settings[\"nic_enabled\"] == \"1\" && $settings[\"inst_id\"] > 0)\n\t\t{\n\t\t\t$this->no_second_nav = true;\n\t\t\t$this->tpl->setVariable(\"TXT_INFO\",$this->lng->txt(\"info_text_nic3\").\" \".$settings[\"inst_id\"].\".\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// reload settings\n\t\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_nic\"));\n\t\t\tif (!$a_omit_init)\n\t\t\t{\n\t\t\t\t$this->initRegistrationForm();\n\t\t\t\t$this->getRegistrationValues();\n\t\t\t}\n\t\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\t\tif (isset($settings[\"nic_enabled\"]))\n\t\t\t{\n\t\t\t\t$this->setup->getClient()->status[\"nic\"][\"status\"] = true;\n\t\t\t}\n\n\t\t}\n\n\t\t$this->setButtonPrev(\"proxy\");\n\n\t\tif ($this->setup->getClient()->status[\"nic\"][\"status\"])\n\t\t{\n\t\t\t$this->setButtonNext(\"finish\",\"finish\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Init registration form.\n\t *\n\t * @param        int        $a_mode        Edit Mode\n\t */\n\tpublic function initRegistrationForm($a_mode = \"edit\")\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// registration type\n\t\t$radg = new ilRadioGroupInputGUI($lng->txt(\"nic_registration\"), \"register\");\n\t\t$radg->setValue(1);\n\t\t$op1 = new ilRadioOption($lng->txt(\"nic_reg_online\"), 1);\n\t\t$radg->addOption($op1);\n\t\t$op1 = new ilRadioOption($lng->txt(\"nic_reg_disable\"), 0, $lng->txt(\"nic_reg_disable_info\"));\n\t\t$radg->addOption($op1);\n\t\t$this->form->addItem($radg);\n\n\t\t$this->form->addCommandButton(\"saveRegistration\", $lng->txt(\"save\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t * Get current values for registration from\n\t */\n\tpublic function getRegistrationValues()\n\t{\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\t\t$nic_key = $this->setup->getClient()->getNICkey();\n\n\n\t\t$values = array();\n\n\t\tif (!isset($settings[\"nic_enabled\"]) or $settings[\"nic_enabled\"] == \"1\")\n\t\t{\n\t\t\t$values[\"register\"] = 1;\n\t\t}\n\t\t/*elseif ($settings[\"nic_enabled\"] == \"2\")\n\t\t{\n\t\t\t$this->tpl->setVariable(\"EMAIL\",$checked);\n\t\t}*/\n\t\telse\n\t\t{\n\t\t\t$values[\"register\"] = 0;\n\t\t}\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\n\t/**\n\t * Save registration form\n\t */\n\tpublic function saveRegistration()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl;\n\n\t\t$this->initRegistrationForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t// check register option\n\t\t\tif ($_POST[\"register\"] == 1)\n\t\t\t{\n\t\t\t\t// update nic\n\t\t\t\t$this->setup->getClient()->updateNIC($this->setup->ilias_nic_server);\n//var_dump($this->setup->getClient()->nic_status);\n\t\t\t\t// online registration failed\n\t\t\t\tif (empty($this->setup->getClient()->nic_status[2]))\n\t\t\t\t{\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"nic_enabled\",\"-1\");\n\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"nic_reg_failed\"), true);\n\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayNIC\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"inst_id\",$this->setup->getClient()->nic_status[2]);\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"nic_enabled\",\"1\");\n\t\t\t\t\t$this->setup->getClient()->status[\"nic\"][\"status\"] = true;\n\t\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"nic_reg_enabled\"), true);\n\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayNIC\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*elseif ($_POST[\"form\"][\"register\"] == 2)\n\t\t\t{\n\t\t\t\t$nic_by_email = (int) $_POST[\"form\"][\"nic_id\"];\n\t\t\t\t\n\t\t\t\t$checksum = md5($nic_key.$nic_by_email);\n\t\t\t\t\n\t\t\t\tif (!$nic_by_email or $_POST[\"form\"][\"nic_checksum\"] != $checksum)\n\t\t\t\t{\n\t\t\t\t\t$message = $this->lng->txt(\"nic_reg_enter_correct_id\");     \n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"inst_id\",$nic_by_email);\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"nic_enabled\",\"1\");\n\t\t\t\t\t$message = $this->lng->txt(\"nic_reg_enabled\");      \n\t\t\t\t}\n\t\t\t}*/\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->setup->getClient()->setSetting(\"inst_id\",\"0\");\n\t\t\t\t$this->setup->getClient()->setSetting(\"nic_enabled\",\"0\");\n\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"nic_reg_disabled\"), true);\n\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayNIC\");\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayNIC(true);\n\t}\n\n\t////\n\t//// Tools\n\t////\n\n\t/**\n\t * display tools\n\t */\n\tfunction displayTools()\n\t{\n\t\t$this->checkDisplayMode();\n\n\t\t// output\n\t\tilUtil::sendInfo();\n\n\t\t// use property forms and add the settings type switch\n\t\t$ctrl_structure_form = $this->initControlStructureForm();\n\t\t$settings_type_form = $this->initSettingsTypeForm();\n\t\t$mp_ns_form = $this->initTreeImplementationForm();\n\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\",\n\t\t\t$ctrl_structure_form->getHTML() . \"<br />\" .\n\t\t\t$settings_type_form->getHTML().'<br />'.\n\t\t\t$mp_ns_form->getHTML());\n\n\t}\n\n\tpublic function initTreeImplementationForm()\n\t{\n\t\tinclude_once (\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n        $form = new ilPropertyFormGUI();\n\n\t\t$form->setId('tree_impl');\n\t\t$form->setTitle($this->lng->txt('tree_implementation'));\n\t\t$form->setFormAction('setup.php?cmd=gateway');\n\n\n\t\t$options = new ilRadioGroupInputGUI('', 'tree_impl_type');\n\t\t#$options->setRequired(true);\n\n\t\t$set = new ilSetting('common');\n\t\t$type = ($set->get('main_tree_impl','ns') == 'ns' ? 'ns' : 'mp');\n\n\n\t\t$options->setValue($type);\n\n\t\t$ns = new ilRadioOption($this->lng->txt('tree_implementation_ns'), 'ns');\n\t\t$options->addOption($ns);\n\n\t\t$mp = new ilRadioOption($this->lng->txt('tree_implementation_mp'),'mp');\n\t\t$options->addOption($mp);\n\n\t\t$form->addItem($options);\n\t\t$form->addCommandButton('switchTree', $this->lng->txt('tree_implementation_switch_btn'));\n\t\t$form->setShowTopButtons(false);\n\n\t\treturn $form;\n\n\t}\n\n\tpublic function switchTree()\n\t{\n\t\t$set = new ilSetting('common');\n\t\t$type = ($set->get('main_tree_impl','ns') == 'ns' ? 'ns' : 'mp');\n\n\t\tif($type == 'ns' and $_POST['tree_impl_type'] == 'mp')\n\t\t{\n\t\t\t// To mp\n\t\t\tinclude_once './Services/Tree/classes/class.ilMaterializedPathTree.php';\n\t\t\tilMaterializedPathTree::createFromParentReleation();\n\n\t\t\t$GLOBALS['ilDB']->dropIndexByFields('tree',array('lft'));\n\t\t\t$GLOBALS['ilDB']->dropIndexByFields('tree',array('path'));\n\t\t\t$GLOBALS['ilDB']->addIndex('tree',array('path'),'i4');\n\n\t\t\t$set->set('main_tree_impl', 'mp');\n\n\t\t}\n\t\telseif($type == 'mp' and $_POST['tree_impl_type'] == 'ns')\n\t\t{\n\t\t\tinclude_once './Services/Tree/classes/class.ilTree.php';\n\t\t\t$GLOBALS['ilSetting'] = $set;\n\t\t\t$GLOBALS[\"DIC\"][\"ilSetting\"] = function($c) {\n\t\t\t\treturn $GLOBALS[\"ilSetting\"];\n\t\t\t};\n\t\t\t$tree = new ilTree(1);\n\t\t\t$tree->renumber(1);\n\n\t\t\t$GLOBALS['ilDB']->dropIndexByFields('tree',array('lft'));\n\t\t\t$GLOBALS['ilDB']->dropIndexByFields('tree',array('path'));\n\t\t\t$GLOBALS['ilDB']->addIndex('tree',array('lft'),'i4');\n\n\t\t\t$set->set('main_tree_impl', 'ns');\n\t\t}\n\n\t\tilUtil::sendInfo($this->lng->txt(\"tree_implementation_switched\"), true);\n\t\t$this->displayTools();\n\t}\n\n\t/**\n\t* Init the form to reload the control structure\n\t*\n\t* @return   object  property form to reload control structure\n\t*/\n\tfunction initControlStructureForm()\n\t{\n\t\tinclude_once (\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n        $form = new ilPropertyFormGUI();\n\n\t\t$form->setId(\"control_structure\");\n\t\t$form->setTitle($this->lng->txt(\"ctrl_structure\"));\n\t\t$form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$cset = $ilDB->query(\"SELECT count(*) as cnt FROM ctrl_calls\");\n\t\t$crec = $ilDB->fetchAssoc($cset);\n\n\t\t$item = new ilCustomInputGUI($this->lng->txt(\"ctrl_structure_reload\"));\n\t\tif ($crec[\"cnt\"] == 0)\n\t\t{\n\t\t\t$item->setInfo($this->lng->txt(\"ctrl_missing_desc\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$item->setInfo($this->lng->txt(\"ctrl_structure_desc\"));\n\t\t}\n\t\t$form->addItem($item);\n\n\t\t$form->addCommandButton(\"reloadStructure\", $this->lng->txt(\"reload\"));\n\t\treturn $form;\n\t}\n\n\n\t/**\n\t* reload control structure\n\t*/\n\tfunction reloadControlStructure()\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\tif (!$this->setup->getClient()->db_installed)\n\t\t{\n\t\t\tilUtil::sendInfo($this->lng->txt(\"no_db\"), true);\n\t\t\t$this->displayTools();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// referencing does not work in dbupdate-script\n\t\t$GLOBALS[\"ilDB\"] = $this->setup->getClient()->getDB();\n\t\t$GLOBALS[\"DIC\"][\"ilDB\"] = function($c) {\n\t\t\treturn $GLOBALS[\"ilDB\"];\n\t\t};\n// BEGIN WebDAV\n\t\t// read module and service information into db\n\t\trequire_once \"./setup/classes/class.ilModuleReader.php\";\n\t\trequire_once \"./setup/classes/class.ilServiceReader.php\";\n\t\trequire_once \"./setup/classes/class.ilCtrlStructureReader.php\";\n\n\t\trequire_once \"./Services/Component/classes/class.ilModule.php\";\n\t\trequire_once \"./Services/Component/classes/class.ilService.php\";\n\t\t$modules = ilModule::getAvailableCoreModules();\n\t\t$services = ilService::getAvailableCoreServices();\n\n\t\t// clear tables\n\t\t$mr = new ilModuleReader(\"\", \"\", \"\");\n\t\t$mr->clearTables();\n\t\tforeach($modules as $module)\n\t\t{\n\t\t\t$mr = new ilModuleReader(ILIAS_ABSOLUTE_PATH.\"/Modules/\".$module[\"subdir\"].\"/module.xml\",\n\t\t\t\t$module[\"subdir\"], \"Modules\");\n\t\t\t$mr->getModules();\n\t\t\tunset($mr);\n\t\t}\n\n\t\t// clear tables\n\t\t$sr = new ilServiceReader(\"\", \"\", \"\");\n\t\t$sr->clearTables();\n\t\tforeach($services as $service)\n\t\t{\n\t\t\t$sr = new ilServiceReader(ILIAS_ABSOLUTE_PATH.\"/Services/\".$service[\"subdir\"].\"/service.xml\",\n\t\t\t\t$service[\"subdir\"], \"Services\");\n\t\t\t$sr->getServices();\n\t\t\tunset($sr);\n\t\t}\n// END WebDAV\n\n\t\t$ilCtrlStructureReader->readStructure(true);\n\t\tilUtil::sendInfo($this->lng->txt(\"ctrl_structure_reloaded\"), true);\n\t\t$this->displayTools();\n\t}\n\n\t/**\n\t* Init the form to change the settings value type\n\t*\n\t* @return   object  property form to change settings type\n\t*/\n\tfunction initSettingsTypeForm()\n\t{\n\t\tinclude_once(\"./Services/Administration/classes/class.ilSetting.php\");\n\t\t$type = ilSetting::_getValueType();\n\n\t\tinclude_once (\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n        $form = new ilPropertyFormGUI();\n\n\t\t$form->setId(\"settings_type\");\n\t\t$form->setTitle($this->lng->txt(\"settings_type\"));\n\t\t$form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\t$item = new ilNonEditableValueGUI($this->lng->txt('settings_type_current'));\n\t\t$item->setValue(strtoupper($type));\n\n\t\tif ($type == \"clob\")\n\t\t{\n\t\t\t$item->setInfo($this->lng->txt('settings_info_clob'));\n            $form->addCommandButton(\"showLongerSettings\", $this->lng->txt(\"settings_show_longer\"));\n            $form->addCommandButton(\"changeSettingsType\", $this->lng->txt(\"settings_change_text\"));\n\t    }\n\t\telse\n\t\t{\n\t\t\t$item->setInfo($this->lng->txt('settings_info_text'));\n           \t$form->addCommandButton(\"changeSettingsType\", $this->lng->txt(\"settings_change_clob\"));\n\t\t}\n\t\t$form->addItem($item);\n\n\t\tif (is_array($this->longer_settings))\n\t\t{\n\t\t\t$item = new ilCustomInputGUI($this->lng->txt('settings_longer_values'));\n\n\t\t\tif (count($this->longer_settings))\n\t\t\t{\n\t            foreach ($this->longer_settings as $row)\n\t\t\t\t{\n\t                $subitem = new ilCustomInputGUI(sprintf($this->lng->txt('settings_key_info'), $row['module'], $row['keyword']));\n\t\t\t\t\t$subitem->setInfo($row['value']);\n\t\t\t\t\t$item->addSubItem($subitem);\n\t            }\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t            $item->setHTML($this->lng->txt('settings_no_longer_values'));\n\t        }\n\t\t\t$form->addItem($item);\n\t    }\n\n\t\treturn $form;\n\t}\n\n\n\t/**\n\t* change the type of the value field in settings table\n\t*/\n\tfunction changeSettingsType()\n\t{\n\t\tinclude_once(\"./Services/Administration/classes/class.ilSetting.php\");\n\t\t$old_type = ilSetting::_getValueType();\n\n\t\tif ($old_type == \"clob\")\n\t\t{\n\t\t\t$longer_settings = ilSetting::_getLongerSettings();\n\t\t\tif (count($longer_settings))\n\t\t\t{\n\t            $this->longer_settings = $longer_settings;\n                ilUtil::sendFailure($this->lng->txt(\"settings_too_long\"));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t        \t$changed = ilSetting::_changeValueType('text');\n\t        }\n\t    }\n\t\telse\n\t\t{\n\t        $changed = ilSetting::_changeValueType('clob');\n\t    }\n\n\t\tif ($changed)\n\t\t{\n\t\t\tilUtil::sendInfo($this->lng->txt(\"settings_type_changed\"));\n\t\t}\n\n\t\t$this->displayTools();\n\t}\n\n\n\t/**\n\t* show a list of setting values that are loger than 4000 characters\n\t*\n\t*/\n\tfunction showLongerSettings()\n\t{\n\t\tinclude_once(\"./Services/Administration/classes/class.ilSetting.php\");\n\t\t$this->longer_settings = ilSetting::_getLongerSettings();\n\t\t$this->displayTools();\n\t}\n\n\t/**\n\t * display change password form and process form input\n\t */\n\tfunction changeMasterPassword()\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.std_layout.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_password\"));\n\n\t\t// formular sent\n\t\tif ($_POST[\"form\"])\n\t\t{\n\t\t\t$pass_old = $this->setup->getPassword();\n\n\t\t\tif (empty($_POST[\"form\"][\"pass_old\"]))\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_enter_old\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif (md5($_POST[\"form\"][\"pass_old\"]) != $pass_old)\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_old_wrong\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif (empty($_POST[\"form\"][\"pass\"]))\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_empty\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif ($_POST[\"form\"][\"pass\"] != $_POST[\"form\"][\"pass2\"])\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_not_match\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif (md5($_POST[\"form\"][\"pass\"]) == $pass_old)\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_same\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif (!$this->setup->setPassword($_POST[\"form\"][\"pass\"]))\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"save_error\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tilUtil::sendInfo($this->lng->txt(\"password_changed\"),true);\n\t\t\tilUtil::redirect(\"setup.php\");\n\t\t}\n\n\t\t// output\n\t\t$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.form_change_admin_password.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt(\"password_new_master\"));\n\n\t\t// pass form\n\t\t$this->tpl->setVariable(\"FORMACTION\", \"setup.php?cmd=gateway\");\n\t\t$this->tpl->setVariable(\"TXT_REQUIRED_FIELDS\", $this->lng->txt(\"required_field\"));\n\t\t$this->tpl->setVariable(\"TXT_PASS_TITLE\",$this->lng->txt(\"change_password\"));\n\t\t$this->tpl->setVariable(\"TXT_PASS_OLD\",$this->lng->txt(\"set_oldpasswd\"));\n\t\t$this->tpl->setVariable(\"TXT_PASS\",$this->lng->txt(\"set_newpasswd\"));\n\t\t$this->tpl->setVariable(\"TXT_PASS2\",$this->lng->txt(\"password_retype\"));\n\t\t$this->tpl->setVariable(\"TXT_SAVE\", $this->lng->txt(\"save\"));\n\t}\n\n\t/**\n\t * display finish setup page\n\t */\n\tfunction displayFinishSetup()\n\t{\n\t\t$this->checkDisplayMode(\"finish_setup\");\n\t\t$this->no_second_nav = true;\n//echo \"<b>1</b>\";\n\t\tif ($this->validateSetup())\n\t\t{\n\t\t\t$txt_info = $this->lng->txt(\"info_text_finish1\").\"<br /><br />\".\n\t\t\t\t\"<p>\".$this->lng->txt(\"user\").\": <b>root</b><br />\".\n\t\t\t\t$this->lng->txt(\"password\").\": <b>homer</b></p>\";\n\t\t\t$this->setButtonNext(\"login_new\",\"login\");\n//echo \"<b>2</b>\";\n\t\t\t$this->setup->getClient()->reconnect();\t\t// if this is not done, the writing of\n\t\t\t\t\t\t\t\t\t\t\t// the setup_ok fails (with MDB2 and a larger\n\t\t\t\t\t\t\t\t\t\t\t// client list), alex 17.1.2008\n\t\t\t$this->setup->getClient()->setSetting(\"setup_ok\",1);\n//$this->setup->getClient()->setSetting(\"zzz\", \"Z\");\n//echo \"<b>3</b>\";\n\t\t\t$this->setup->getClient()->status[\"finish\"][\"status\"] = true;\n//echo \"<b>4</b>\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$txt_info = $this->lng->txt(\"info_text_finish2\");\n\t\t}\n\n//echo \"<b>5</b>\";\n\t\t// output\n\t\t$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.clientsetup_finish.html\", \"setup\");\n\t\t$this->tpl->setVariable(\"TXT_INFO\",$txt_info);\n\n\t\t$this->setButtonPrev(\"nic\");\n//echo \"<b>6</b>\";\n\t\t$this->checkPanelMode();\n//echo \"<b>7</b>\";\n\t}\n\n\t/**\n\t * display delete client confirmation form and process form input\n\t */\n\tfunction displayDeleteConfirmation()\n\t{\n\t\t$this->checkDisplayMode();\n\n\t\t// formular sent\n\t\tif ($_POST[\"form\"][\"delete\"])\n\t\t{\n\t\t\t$ini = true;\n\t\t\t$db = false;\n\t\t\t$files = false;\n\n\t\t\t/* disabled\n\t\t\tswitch ($_POST[\"form\"][\"delete\"])\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\t$ini = true;\n\t\t\t\t\tbreak;\n\t\t\t\n\t\t\t\tcase 2:\n\t\t\t\t\t$ini = true;\n\t\t\t\t\t$db = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\t$ini = true;\n\t\t\t\t\t$db = true;\n\t\t\t\t\t$files = true;\n\t\t\t\t\tbreak;      \n\t\t\t}\n\t\t\t*/\n\n\t\t\t$msg = $this->setup->getClient()->delete($ini,$db,$files);\n\n\t\t\tilUtil::sendInfo($this->lng->txt(\"client_deleted\"),true);\n\t\t\tilUtil::redirect(\"setup.php\");\n\t\t}\n\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_delete\"));\n\n\t\t// output\n\t\t$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.form_delete_client.html\", \"setup\");\n\n\t\t// delete panel\n\t\t$this->tpl->setVariable(\"FORMACTION\", \"setup.php?cmd=gateway\");\n\t\t$this->tpl->setVariable(\"TXT_DELETE\", $this->lng->txt(\"delete\"));\n\t\t$this->tpl->setVariable(\"TXT_DELETE_CONFIRM\", $this->lng->txt(\"delete_confirm\"));\n\t\t$this->tpl->setVariable(\"TXT_DELETE_INFO\", $this->lng->txt(\"delete_info\"));\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * enable/disable access to a client\n\t *\n\t * @param    string  jump back to this script\n\t */\n\tfunction changeAccessMode($a_back)\n\t{\n\t\tif ($this->setup->getClient()->status[\"finish\"][\"status\"])\n\t\t{\n\t\t\t$val = ($this->setup->getClient()->ini->readVariable(\"client\",\"access\")) ? \"0\" : true;\n\t\t\t$this->setup->getClient()->ini->setVariable(\"client\",\"access\",$val);\n\t\t\t$this->setup->getClient()->ini->write();\n\t\t\t$message = \"client_access_mode_changed\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$message = \"client_setup_not_finished\";\n\t\t}\n\n\t\tilUtil::sendInfo($this->lng->txt($message),true);\n\n\t\tilUtil::redirect(\"setup.php?cmd=\".$a_back);\n\t}\n\n\t/**\n\t * set defualt client\n\t */\n\tfunction changeDefaultClient()\n\t{\n\t\tif ($_POST[\"form\"])\n\t\t{\n\t\t\t$client = new ilClient($_POST[\"form\"][\"default\"], $this->setup->db_connections);\n\n\t\t\tif (!$client->init())\n\t\t\t{\n\t\t\t\t$this->setup->raiseError($this->lng->txt(\"no_valid_client_id\"),$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\t$status = $this->setup->getStatus($client);\n\n\t\t\tif ($status[\"finish\"][\"status\"])\n\t\t\t{\n\t\t\t\t$this->setup->ini->setVariable(\"clients\",\"default\",$client->getId());\n\t\t\t\t$this->setup->ini->write();\n\t\t\t\t$message = \"default_client_changed\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$message = \"client_setup_not_finished\";\n\t\t\t}\n\t\t}\n\n\t\tilUtil::sendInfo($this->lng->txt($message),true);\n\n\t\tilUtil::redirect(\"setup.php\");\n\t}\n\n\t/**\n\t * validatesetup status again\n\t * and set access mode of the first client to online\n\t */\n\tfunction validateSetup()\n\t{\n\t\tforeach ($this->setup->getClient()->status as $key => $val)\n\t\t{\n\t\t\tif ($key != \"finish\" and $key != \"access\")\n\t\t\t{\n\t\t\t\tif ($val[\"status\"] != true)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n//$this->setup->getClient()->setSetting(\"zzz\", \"V\");\n\t\t$clientlist = new ilClientList($this->setup->db_connections);\n//$this->setup->getClient()->setSetting(\"zzz\", \"W\");\n\t\t$list = $clientlist->getClients();\n//$this->setup->getClient()->setSetting(\"zzz\", \"X\");\n\t\tif (count($list) == 1)\n\t\t{\n\t\t\t$this->setup->ini->setVariable(\"clients\",\"default\",$this->setup->getClient()->getId());\n\t\t\t$this->setup->ini->write();\n\n\t\t\t$this->setup->getClient()->ini->setVariable(\"client\",\"access\",1);\n\t\t\t$this->setup->getClient()->ini->write();\n\t\t}\n//$this->setup->getClient()->setSetting(\"zzz\", \"Y\");\n\t\treturn true;\n\t}\n\n\t/**\n\t * if setting up a client was not finished, jump back to the first uncompleted setup step\n\t */\n\tfunction jumpToFirstUnfinishedSetupStep()\n\t{\n\t\tif (!$this->setup->getClient()->status[\"db\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"db\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayDatabase();\n\t\t}\n\t\telseif (!$this->setup->getClient()->status[\"lang\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"lang\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayLanguages();\n\t\t}\n\t\telseif (!$this->setup->getClient()->status[\"contact\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"contact\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayContactData();\n\t\t}\n\t\telseif(!$this->setup->getClient()->status['proxy']['status'])\n\t\t{\n\t\t\t$this->cmd = \"proxy\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayProxy();\n\t\t}\n\t\telseif (!$this->setup->getClient()->status[\"nic\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"nic\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayNIC();\n\t\t}\n\t\telseif (!$this->setup->getClient()->status[\"finish\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"finish\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayFinishSetup();\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * enable/disable client list on index page\n\t */\n\tfunction toggleClientList()\n\t{\n\t\tif ($this->setup->ini->readVariable(\"clients\",\"list\"))\n\t\t{\n\t\t\t$this->setup->ini->setVariable(\"clients\",\"list\",\"0\");\n\t\t\t$this->setup->ini->write();\n\t\t\tilUtil::sendInfo($this->lng->txt(\"list_disabled\"),true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->setup->ini->setVariable(\"clients\",\"list\",\"1\");\n\t\t\t$this->setup->ini->write();\n\t\t\tilUtil::sendInfo($this->lng->txt(\"list_enabled\"),true);\n\t\t}\n\n\t\tilUtil::redirect(\"setup.php\");\n\t}\n\n\t////\n\t//// APPLY CUSTOM DB UPDATES\n\t////\n\n\tfunction applyCustomUpdates()\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\t$ilCtrlStructureReader->setIniFile($this->setup->getClient()->ini);\n\n\t\tinclude_once \"./Services/Database/classes/class.ilDBUpdate.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacAdmin.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacReview.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacSystem.php\";\n\t\tinclude_once \"./Services/Tree/classes/class.ilTree.php\";\n\t\tinclude_once \"./Services/Xml/classes/class.ilSaxParser.php\";\n\t\tinclude_once \"./Services/Object/classes/class.ilObjectDefinition.php\";\n\n\t\t// referencing db handler in language class\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$this->lng->setDbHandler($ilDB);\n\n\t\t// run dbupdate\n\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t$dbupdate->applyCustomUpdates();\n\n\t\tif ($dbupdate->updateMsg == \"no_changes\")\n\t\t{\n\t\t\t$message = $this->lng->txt(\"no_changes\").\". \".$this->lng->txt(\"database_is_uptodate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sep = \"\";\n\t\t\tforeach ($dbupdate->updateMsg as $row)\n\t\t\t{\n\t\t\t\tif ($row[\"msg\"] == \"update_applied\")\n\t\t\t\t{\n\t\t\t\t\t$a_message.= $sep.$row[\"nr\"];\n\t\t\t\t\t$sep = \", \";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$e_message.= \"<br/>\".$this->lng->txt($row[\"msg\"]).\": \".$row[\"nr\"];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($a_message != \"\")\n\t\t\t{\n\t\t\t\t$a_message = $this->lng->txt(\"update_applied\").\": \".$a_message;\n\t\t\t}\n\t\t}\n\n\t\tilUtil::sendInfo($a_message.$e_message, true);\n\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t}\n\n\t/**\n\t * Initialize clone form\n\t */\n\tfunction cloneInitForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\t$this->checkDisplayMode();\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t$this->form->setId(\"clone_form\");\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\tif ($this->setup->getClient()->status[\"access\"][\"status\"] === false and stripos($this->setup->getClient()->getName(),\"master\") === false and $this->setup->getClient()->getdbType() == \"mysql\" and $this->setup->getClient()->db_exists )\n\t\t{\n\t\t\t$this->form->setTitle($this->lng->txt(\"clone_source\"));\n\t\t\t$clients = array();\n\t\t\t$clientlist = new ilClientList($this->setup->db_connections);\n\t\t\t$list = $clientlist->getClients();\n\t\t\t$clientlistarray = array();\n\n\t\t\tforeach ($list as $key => $client){\n\t\t\t\tif ((strcmp($key, $this->setup->getClient()->getId()) != '0') && ($client->getDbType() == 'mysql')) {  // You cannot clone yourself\n\t\t\t\t\t$clientlistarray[$client->id] = $client->id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$si = new ilSelectInputGUI($lng->txt(\"clone_selectsource\"), \"source\");\n\n\t\t\t$si->setOptions(array_merge(\n\t\t\t\tarray(\"\" => \"-- \".$lng->txt(\"please_select\").\" --\"),\n\t\t\t\t$clientlistarray));\n\t\t\t$si->setRequired(true);\n\t\t\t$this->form->addItem($si);\n\n\t\t\t$cb = new ilCheckboxInputGUI($lng->txt(\"clone_areyousure\"), \"iamsure\");\n\t\t\t$cb->setRequired(true);\n\t\t\t$this->form->addItem($cb);\n\n\t\t\t$this->form->addCommandButton(\"cloneSaveSource\", $lng->txt(\"cloneit\"));\n\t\t} else {\n\t\t\t$disabledmessage = \"<h1>\" . $this->lng->txt(\"clone_disabledmessage\") .\"</h1><br>\";\n\t\t\tif (!$this->setup->getClient()->status[\"access\"][\"status\"] === false) {\n\t\t\t\t$disabledmessage .= $this->lng->txt(\"clone_clientnotdisabled\") . \"<br>\";\n\t\t\t}\n\t\t\tif (!stripos($this->setup->getClient()->getName(),\"aster\") === false) {\n\t\t\t\t$disabledmessage .= $this->lng->txt(\"clone_clientismaster\") . \"<br>\";\n\t\t\t}\n\t\t\tif ($this->setup->getClient()->getdbType() != \"mysql\") {\n\t\t\t\t$disabledmessage .= $this->lng->txt(\"clone_clientisnotmysql\") . \"<br>\";\n\t\t\t}\n\t\t\tif (!$this->setup->getClient()->db_exists) {\n\t\t\t\t$disabledmessage .= $this->lng->txt(\"clone_clientnodatabase\") . \"<br>\";\n\t\t\t}\n\t\t\t$this->form->setTitle($disabledmessage);\n\t\t}\n\t}\n\n\tfunction cloneSelectSource() {\n\n\t\tif (!$this->setup->isAdmin())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$this->cloneInitForm();\n\t\t$this->form->setValuesByPost();\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_clone\"));\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t}\n\n\tfunction cloneSaveSource()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tif (!$this->setup->isAdmin())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$this->cloneInitForm();\n\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\tif ($this->form->getInput(\"iamsure\") != \"1\")\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"clone_youmustcheckiamsure\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\t\t\tif (!$this->setup->cloneFromSource($this->form->getInput(\"source\")))\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"clone_error\");\n\t\t\t\t$this->setup->raiseError($message . \" -> \" . $this->setup->error,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tilUtil::sendInfo($this->lng->txt(\"client_cloned\"),true);\n\t\t\t// ilUtil::redirect(\"setup.php\");\n\t\t}\n\t\t$this->form->setValuesByPost();\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_clone\"));\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t}\n\n\tpublic function displayProxy($a_omit_init = false)\n\t{\n\t\t$this->checkDisplayMode(\"proxy\");\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\tif (!$a_omit_init)\n\t\t{\n\t\t\tinclude_once(\"./Services/Administration/classes/class.ilSetting.php\");\n\t\t\t$this->initProxyForm();\n\t\t\t$this->form->setValuesByArray(array(\n\t\t\t\t'proxy_status' => (bool)$settings['proxy_status'],\n\t\t\t\t'proxy_host' => $settings['proxy_host'],\n\t\t\t\t'proxy_port' => $settings['proxy_port']\n\t\t\t));\n\t\t\tif((bool)$settings['proxy_status'])\n\t\t\t{\n\t\t\t\t$this->setup->printProxyStatus($this->setup->client);\n\t\t\t}\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_proxy\"));\n\n\n\t\t$check = $this->setup->checkClientProxySettings($this->setup->client);\n\n\t\t$this->setup->getClient()->status[\"proxy\"][\"status\"] = $check[\"status\"];\n\t\t$this->setup->getClient()->status[\"proxy\"][\"comment\"] = $check[\"comment\"];\n\t\t$this->setup->getClient()->status[\"proxy\"][\"text\"] = $check[\"comment\"];\n\n\t\tif ($check[\"status\"])\n\t\t{\n\t\t\t$this->setButtonNext(\"nic\");\n\t\t}\n\n\t\t$this->setButtonPrev(\"contact\");\n\t\t$this->checkPanelMode();\n\t}\n\tprivate function initProxyForm()\n\t{\n\t\tglobal $lng;\n\n\t\tinclude_once('Services/Form/classes/class.ilPropertyFormGUI.php');\n\t\t$this->form = new ilPropertyFormGUI();\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\t// Proxy status\n\t\t$proxs = new ilCheckboxInputGUI($lng->txt('proxy_status'), 'proxy_status');\n\t\t$proxs->setInfo($lng->txt('proxy_status_info'));\n\t\t$proxs->setValue(1);\n\t\t$this->form->addItem($proxs);\n\n\t\t// Proxy availability\n\t\t$proxa = new ilCustomInputGUI('', 'proxy_availability');\n\t\t$proxs->addSubItem($proxa);\n\n\t\t// Proxy\n\t\t$prox = new ilTextInputGUI($lng->txt('proxy_host'), 'proxy_host');\n\t\t$prox->setInfo($lng->txt('proxy_host_info'));\n\t\t$proxs->addSubItem($prox);\n\n\t\t// Proxy Port\n\t\t$proxp = new ilTextInputGUI($lng->txt('proxy_port'), 'proxy_port');\n\t\t$proxp->setInfo($lng->txt('proxy_port_info'));\n\t\t$proxp->setSize(10);\n\t\t$proxp->setMaxLength(10);\n\t\t$proxs->addSubItem($proxp);\n\n\t\t// save and cancel commands\n\t\t$this->form->addCommandButton('saveProxy', $lng->txt('save'));\n\t}\n\n\t/**\n\t *\n\t * Save proxy settings\n\t *\n\t * @access\tpublic\n\t *\n\t */\n\tpublic function saveProxy()\n\t{\n\t\tglobal $lng;\n\n\t\t$this->initProxyForm();\n\t\t$isFormValid = $this->form->checkInput();\n\n\t\t$new_settings['proxy_status'] = (int)$this->form->getInput('proxy_status');\n\t\t$new_settings['proxy_host'] = trim($this->form->getInput('proxy_host'));\n\t\t$new_settings['proxy_port'] = trim($this->form->getInput('proxy_port'));\n\n\t\tif($isFormValid)\n\t\t{\n\t\t\tif($new_settings['proxy_status'] == true)\n\t\t\t{\n\t\t\t\tif(!strlen($new_settings['proxy_host']))\n\t\t\t\t{\n\t\t\t\t\t$isFormValid = false;\n\t\t\t\t\t$this->form->getItemByPostVar('proxy_host')->setAlert($lng->txt('msg_input_is_required'));\n\t\t\t\t}\n\t\t\t\tif(!strlen($new_settings['proxy_port']))\n\t\t\t\t{\n\t\t\t\t\t$isFormValid = false;\n\t\t\t\t\t$this->form->getItemByPostVar('proxy_port')->setAlert($lng->txt('msg_input_is_required'));\n\t\t\t\t}\n\t\t\t\tif(!preg_match('/[0-9]{1,}/', $new_settings['proxy_port']) ||\n\t\t\t\t\t$new_settings['proxy_port'] < 0 ||\n\t\t\t\t\t$new_settings['proxy_port'] > 65535)\n\t\t\t\t{\n\t\t\t\t\t$isFormValid = false;\n\t\t\t\t\t$this->form->getItemByPostVar('proxy_port')->setAlert($lng->txt('proxy_port_numeric'));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($isFormValid)\n\t\t\t{\n\t\t\t\t$this->setup->saveProxySettings($new_settings);\n\n\t\t\t\tilUtil::sendSuccess($lng->txt('saved_successfully'));\n\t\t\t\t$settings = $this->setup->getClient()->getAllSettings();\n\t\t\t\tif($settings['proxy_status'] == true)\n\t\t\t\t{\n\t\t\t\t\t$this->setup->printProxyStatus($this->setup->client);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($lng->txt('form_input_not_valid'));\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\n\t\t$this->displayProxy(true);\n\t}\n} // END class.ilSetupGUI\n?>\n"], "fixing_code": ["<?php\n/* Copyright (c) 1998-2009 ILIAS open source, Extended GPL, see docs/LICENSE */\n\nrequire_once \"./setup/classes/class.ilSetup.php\";\nrequire_once('./Services/Database/classes/class.ilDBConstants.php');\n\n/**\n * Setup GUI class\n *\n * class to setup ILIAS first and maintain the ini-settings and the database\n *\n * @author   Sascha Hofmann <shofmann@databay.de>\n * @version  $Id$\n */\nclass ilSetupGUI\n{\n\tvar $tpl;       // template object\n\tvar $lng;       // language objet\n\tvar $log;       // log object\n\n\tvar $btn_prev_on = false;   // toggle previous button on/off\n\tvar $btn_prev_cmd;          // command processed when previous button was clicked\n\tvar $btn_prev_lng;          // previous button label\n\n\tvar $btn_next_on = false;   // toggle NEXT button on/off\n\tvar $btn_next_cmd;          // command processed when next button was clicked\n\tvar $btn_next_lng;          // next button label\n\n\tvar $revision;              // cvs revision of this script\n\tvar $version;               // cvs version of this script\n\tvar $lang;                  // current language (lang_key)\n\n\tvar $cmd;                       // command variable\n\tvar $display_mode = \"view\";     // view mode (setup or details)\n\n\t/**\n\t * Constructor\n\t *\n\t */\n\tfunction __construct()\n\t{\n\t\tglobal $tpl, $lng;\n\n\t\t$this->tpl = $tpl;\n\t\t$this->lng = $lng;\n\n\t\t// note: this is currently only used for subtabs, alex 8.1.2012\n\t\tinclude_once(\"./Services/UIComponent/Tabs/classes/class.ilTabsGUI.php\");\n\t\t$this->tabs = new ilTabsGUI();\n\t\t$this->tabs->setSetupMode(true);\n\n\t\tinclude_once(\"./Services/jQuery/classes/class.iljQueryUtil.php\");\n\t\tiljQueryUtil::initjQuery($this->tpl);\n\t\tinclude_once(\"./Services/YUI/classes/class.ilYuiUtil.php\");\n\t\tilYuiUtil::initDomEvent();\n\n\t\t$tpl->addJavaScript(\"./Services/JavaScript/js/Basic.js\", 0);\n\n\t\tinclude_once(\"./Services/UICore/classes/class.ilUIFramework.php\");\n\t\tilUIFramework::init($this->tpl);\n\n\t\t// CVS - REVISION - DO NOT MODIFY\n\t\t$this->revision = '$Revision$';\n\t\t$this->version = \"2 \".substr(substr($this->revision,1),0,-2);\n\t\t$this->lang = $this->lng->lang_key;\n\n\t\t// init setup\n\t\t$this->setup = new ilSetup($_SESSION[\"auth\"],$_SESSION[\"access_mode\"]);\n\n\t\t// init client object if exists\n\t\t$client_id = ($_GET[\"client_id\"]) ? $_GET[\"client_id\"] : $_SESSION[\"ClientId\"];\n\t\tif ($_POST[\"client_id\"] != \"\")\n\t\t{\n\t\t\t$client_id = $_POST[\"client_id\"];\n\t\t}\n\n/*if ($_POST[\"client_id\"] == \"\")\n{\necho \"<br>+\".$_GET[\"client_id\"];\necho \"<br>+\".$_POST[\"client_id\"];\necho \"<br>+\".$_SESSION[\"ClientId\"];\necho \"<br>+\".$client_id;\n}*/\n\t\t// for security\n\t\tif (!$this->setup->isAdmin() and $client_id != $_SESSION[\"ClientId\"])\n\t\t{\n\t\t\t$client_id = $_SESSION[\"ClientId\"];\n\t\t}\n\n\t\t$this->client_id = $client_id;\n\n\t\t$this->setup->ini_client_exists = $this->setup->newClient($client_id);\n\t\tif (is_object($this->setup->getClient()))\n\t\t{\n\t\t\t$this->setup->getClient()->status = $this->setup->getStatus($client_id);\n\t\t}\n\n\t\t// determine command\n\t\tif (($this->cmd = $_GET[\"cmd\"]) == \"gateway\")\n\t\t{\n\t\t\t// surpress warning if POST is not set\n\t\t\t@$this->cmd = key($_POST[\"cmd\"]);\n\t\t}\n\n\t\t// determine display mode here\n\t\t// TODO: depending on previous setting (session)\n\t\t// OR switch to 'setup'-mode if someone logs in as client and client's setup wasn't finished (-> entry in settings table does not exist)\n\t\tif ($this->setup->isAuthenticated() and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $this->cmd != \"clientlist\" and $this->cmd != \"\")\n\t\t{\n\t\t\t$this->setDisplayMode(\"setup\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->setDisplayMode($_SESSION[\"display_mode\"]);\n\t\t}\n\n\t\t// output starts here\n\n\n\t\t// main cmd handling\n\t\tif (!$this->setup->isAuthenticated() or !$this->setup->isInstalled())\n\t\t{\n\t\t\t// check for first time installation or migrate an old one first\n\t\t\tif (!$this->setup->isInstalled() or !($this->setup->ini->readVariable(\"clients\",\"path\")))\n\t\t\t{\n\t\t\t\t$this->cmdInstall();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($this->cmd == \"performLogin\" || $this->cmd == \"performMLogin\")\n\t\t\t\t{\n\t\t\t\t\t$cmd = $this->cmd;\n\t\t\t\t\t$this->$cmd();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayLogin();\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\telse\n\t\t{\n\t\t\tif ($this->setup->isAdmin())\n\t\t\t{\n\t\t\t\t$this->cmdAdmin();\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->cmdClient();\n\t\t\t}\n\t\t}\n\n\t\t// display header\n\t\t$this->displayHeader();\n\n\t\tif (DEBUG)\n\t\t{\n\t\t\techo \"cmd: \".$this->cmd.\" | access: \".$this->setup->access_mode.\" | display: \".$this->display_mode;\n\t\t\tvar_dump($this->setup->getClient()->status);\n\t\t}\n\n\t\t// display footer\n\t\t$this->displayFooter();\n\n\t\t// end output\n\n\t}  // end constructor\n\n\t// cmd subsets\n\n\t/**\n\t * process valid commands for pre-installation status\n\t */\n\tfunction cmdInstall()\n\t{\n\t\t$cmd = $this->cmd;\n\t\tswitch ($this->cmd)\n\t\t{\n\t\t\tcase NULL:\n\t\t\tcase \"preliminaries\":\n\t\t\t\t$this->setup->checkPreliminaries();\n\t\t\t\t$this->displayPreliminaries();\n\t\t\t\tbreak;\n\n\t\t\tcase \"install\":\n\t\t\t\t$this->displayMasterSetup();\n\t\t\t\tbreak;\n\n\t\t\tcase \"determineToolsPathInstall\":\n\t\t\t\t$this->determineToolsPathInstall();\n\t\t\t\tbreak;\n\n\t\t\tcase \"saveBasicSettings\":\n\t\t\t\t$this->$cmd();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$this->displayError($this->lng->txt(\"unknown_command\").\": '\".$this->cmd.\"'\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * process valid commands for admins\n\t */\n\tfunction cmdAdmin()\n\t{\n\t\t$cmd = $this->cmd;\n\t\tswitch ($this->cmd)\n\t\t{\n\t\t\tcase NULL:\n\t\t\tcase \"clientlist\":\n\t\t\t\t\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->displayClientList();\n\t\t\t\t$this->active_tab = \"clientlist\";\n\t\t\t\tbreak;\n\n\t\t\tcase \"changepassword\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->changeMasterPassword();\n\t\t\t\t$this->active_tab = \"password\";\n\t\t\t\tbreak;\n\n\t\t\tcase \"mastersettings\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->changeMasterSettings();\n\t\t\t\t$this->active_tab = \"basicsettings\";\n\t\t\t\tbreak;\n\n\t\t\tcase \"determineToolsPath\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->determineToolsPath();\n\t\t\t\tbreak;\n\n\t\t\tcase \"changedefault\":\n\t\t\t\t$this->changeDefaultClient();\n\t\t\t\tbreak;\n\n\t\t\tcase \"newclient\":\n\t\t\t\t$this->cmd = \"selectdb\";\n\t\t\t\t$this->setDisplayMode(\"setup\");\n\t\t\t\t$this->setup->ini_client_exists = $this->setup->newClient();\n\t\t\t\t$this->selectDBType();\n\t\t\t\tbreak;\n\n\t\t\tcase \"selectdbtype\":\n\t\t\tcase \"displayIni\":\n\t\t\t\t$this->cmd = \"ini\";\n\t\t\t\t$this->setDisplayMode(\"setup\");\n\t\t\t\t//$this->setup->ini_client_exists = $this->setup->newClient($this->client_id);\n\t\t\t\t$this->displayIni();\n\t\t\t\tbreak;\n\n\t\t\tcase \"startup\":\n\t\t\t\t$this->setDisplayMode(\"setup\");\n\t\t\t\t$this->setup->ini_client_exists = $this->setup->newClient();\n\t\t\t\t$this->displayStartup();\n\t\t\t\tbreak;\n\n\t\t\tcase \"delete\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->displayDeleteConfirmation();\n\t\t\t\tbreak;\n\n\t\t\tcase \"togglelist\":\n\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t$this->toggleClientList();\n\t\t\t\tbreak;\n\n\t\t\tcase \"preliminaries\":\n\t\t\t\t$this->setup->checkPreliminaries();\n\t\t\t\t$this->displayPreliminaries();\n\t\t\t\t$this->active_tab = \"preliminaries\";\n\t\t\t\tbreak;\n\n\t\t\tcase \"updateBasicSettings\":\n\t\t\tcase \"performLogin\":\n\t\t\tcase \"performMLogin\":\n\t\t\t\t$this->$cmd();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$this->cmdClient();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * process valid commands for all clients\n\t */\n\tfunction cmdClient()\n\t{\n\t\t$cmd = $this->cmd;\n\t\tswitch ($this->cmd)\n\t\t{\n\t\t\tcase NULL:\n\t\t\tcase \"view\":\n\t\t\t\tif ($this->setup->getClient()->db_installed)\n\t\t\t\t{\n\t\t\t\t\t$this->setDisplayMode(\"view\");\n\t\t\t\t\t$this->displayClientOverview();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->cmd = \"db\";\n\t\t\t\t\t$this->displayDatabase();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"ini\":\n\t\t\t\t// only allow access to ini if db does not exist yet\n\t\t\t\t//if ($this->setup->getClient()->db_installed)\n\t\t\t\t//{\n\t\t\t\t//\t$this->cmd = \"db\";\n\t\t\t\t//\t$this->displayDatabase();\n\t\t\t\t//}\n\t\t\t\t//else\n\t\t\t\t//{\n\t\t\t\t\t$this->displayIni();\n\t\t\t\t//}\n\t\t\t\tbreak;\n\n\t\t\tcase \"db\":\n\t\t\t\t$this->displayDatabase();\n\t\t\t\tbreak;\n\n\t\t\tcase \"dbslave\":\n\t\t\t\t$this->displayDatabaseSlave();\n\t\t\t\tbreak;\n\n\t\t\tcase \"sess\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"sess\" and $this->setup->error === true)\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displaySessions();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"lang\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"lang\" and $this->setup->error === true)\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayLanguages();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"contact\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"contact\")\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayContactData();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"proxy\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"proxy\")\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayProxy();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"cache\":\n\t\t\t\t$this->displayCache();\n\t\t\t\tbreak;\n\n\n\t\t\tcase \"nic\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"nic\")\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayNIC();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"finish\":\n\t\t\t\tif (!isset($_GET[\"lang\"]) and !$this->setup->getClient()->status[\"finish\"][\"status\"] and $_GET[\"cmd\"] == \"finish\")\n\t\t\t\t{\n\t\t\t\t\t$this->jumpToFirstUnfinishedSetupStep();\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->displayFinishSetup();\n\t\t\t\t}\n\t\t\t\tbreak;\n\n\t\t\tcase \"changeaccess\":\n\t\t\t\t$this->changeAccessMode($_GET[\"back\"]);\n\t\t\t\tbreak;\n\n\t\t\tcase \"logout\":\n\t\t\t\t$this->displayLogout();\n\t\t\t\tbreak;\n\n\t\t\tcase \"login\":\n\t\t\t\tsession_destroy();\n\t\t\t\tilUtil::redirect(ILIAS_HTTP_PATH.\"/login.php?client_id=\".$this->setup->getClient()->getId());\n\t\t\t\tbreak;\n\n\t\t\tcase \"login_new\":\n\t\t\t\tif ($this->setup->getClient()->ini->readVariable(\"client\",\"access\") != \"1\")\n\t\t\t\t{\n\t\t\t\t\t$this->setup->getClient()->ini->setVariable(\"client\",\"access\",\"1\");\n\t\t\t\t\t$this->setup->getClient()->ini->write();\n\t\t\t\t}\n\n\t\t\t\tsession_destroy();\n\t\t\t\tilUtil::redirect(ILIAS_HTTP_PATH.\"/login.php?client_id=\".$this->setup->getClient()->getId());\n\t\t\t\tbreak;\n\n\t\t\tcase \"tools\":\n\t\t\t\t$this->displayTools();\n\t\t\t\tbreak;\n\n\t\t\tcase \"reloadStructure\":\n\t\t\t\t$this->reloadControlStructure();\n\t\t\t\tbreak;\n\n\t\t\tcase 'switchTree':\n\t\t\t\t$this->switchTree();\n\t\t\t\tbreak;\n\n\t\t\tcase \"saveClientIni\":\n\t\t\tcase \"installDatabase\":\n\t\t\tcase \"displayDatabase\":\n\t\t\tcase \"updateDatabase\":\n\t\t\tcase \"showUpdateSteps\":\n\t\t\tcase \"saveLanguages\":\n\t\t\tcase \"saveContact\":\n\t\t\tcase \"displayContactData\":\n\t\t\tcase \"displayNIC\":\n\t\t\tcase \"saveRegistration\":\n\t\t\tcase \"applyHotfix\":\n\t\t\tcase \"showHotfixSteps\":\n\t\t\tcase \"applyCustomUpdates\":\n\t\t\tcase \"changeSettingsType\":\n\t\t\tcase \"showLongerSettings\":\n\t\t\tcase \"cloneSelectSource\":\n\t\t\tcase \"cloneSaveSource\":\n\t\t\tcase \"saveProxy\":\n\t\t\tcase \"displayPassword\":\n\t\t\tcase \"savePassword\":\n\t\t\tcase \"saveDbSlave\":\n\t\t\tcase \"saveCache\":\n\t\t\tcase \"addMemcacheServer\":\n\t\t\tcase \"deleteMemcacheServer\":\n\t\t\tcase \"editMemcacheServer\":\n\t\t\tcase \"createMemcacheServer\":\n\t\t\tcase \"updateMemcacheServer\":\n\t\t\tcase \"flushCache\":\n\t\t\t\t$this->$cmd();\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$this->setDisplayMode(\"setup\");\n\t\t\t\t$this->displayError($this->lng->txt(\"unknown_command\").\": '\".$this->cmd.\"'\");\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t// end cmd subsets \n\n\t////\n\t//// GENERAL DISPLAY FUNCTIONS\n\t////\n\n\t/**\n\t * set display mode to 'view' or 'setup'\n\t * 'setup' -> show status panel and (prev/next) navigation buttons\n\t * 'view' -> show overall status and tabs under title bar\n\t *\n\t * @param    string      display mode\n\t * @return   boolean     true if display mode was successfully set\n\t */\n\tfunction setDisplayMode($a_mode)\n\t{\n\t\t// security\n\t\tif ($a_mode != \"view\" and $a_mode != \"setup\")\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$this->display_mode = $a_mode;\n\t\t$_SESSION[\"display_mode\"] = $this->display_mode;\n\n\t\treturn true;\n\t}\n\n\t/**\n\t * display header with admin links and language flags\n\t */\n\tfunction displayHeader()\n\t{\n\t\t$languages = $this->lng->getLanguages();\n\n\t\t$count = (int) round(count($languages) / 2);\n\t\t$num = 1;\n\t\t\n\t\tsort($languages); // #16837\n\t\tforeach ($languages as $lang_key)\n\t\t{\n\t\t\t/*\n\t\t\tif ($num === $count)\n\t\t\t{\n\t\t\t\t$this->tpl->touchBlock(\"lng_new_row\");\n\t\t\t}\n\t\t\t*/\n\t\t\t$this->tpl->setCurrentBlock(\"languages\");\n\t\t\t$this->tpl->setVariable(\"LINK_LANG\", \"./setup.php?cmd=\".$this->cmd.\"&amp;lang=\".$lang_key);\n\t\t\t$this->tpl->setVariable(\"LANG_NAME\", $this->lng->txt(\"meta_l_\".$lang_key));\n\t\t\t$this->tpl->setVariable(\"LANG_ICON\", $lang_key);\n\t\t\t$this->tpl->setVariable(\"LANG_KEY\", $lang_key);\n\t\t\t$this->tpl->setVariable(\"BORDER\", 0);\n\t\t\t$this->tpl->setVariable(\"VSPACE\", 0);\n\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t$num++;\n\t\t}\n\n\t\tif (count($languages) % 2)\n\t\t{\n\t\t\t$this->tpl->touchBlock(\"lng_empty_cell\");\n\t\t}\n\n\t\tif ($this->cmd != \"logout\" and $this->setup->isInstalled() and $this->setup->isAuthenticated())\n\t\t{\n\t\t\t// add client link\n\t\t\tif ($this->setup->isAdmin())\n\t\t\t{\n\t\t\t\tif ($this->display_mode == \"view\" or $this->cmd == \"clientlist\" or $this->cmd == \"changepassword\" or $this->cmd == \"mastersettings\")\n\t\t\t\t{\n\t\t\t\t\t$this->tpl->setCurrentBlock(\"add_client\");\n\t\t\t\t\t$this->tpl->setVariable(\"TXT_ADD_CLIENT\",ucfirst($this->lng->txt(\"new_client\")));\n\t\t\t\t\t$this->tpl->parseCurrentBlock();\n\t\t\t\t}\n\n\t\t\t\t// client list link\n\t\t\t\t$class = ($this->active_tab == \"clientlist\")\n\t\t\t\t\t? \"ilSMActive\"\n\t\t\t\t\t: \"ilSMInactive\";\n\t\t\t\t$this->tpl->setCurrentBlock(\"display_list\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_LIST\",ucfirst($this->lng->txt(\"list_clients\")));\n\t\t\t\t$this->tpl->setVariable(\"TAB_CLASS\", $class);\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t\t// edit paths link\n\t\t\t\t$class = ($this->active_tab == \"basicsettings\")\n\t\t\t\t\t? \"ilSMActive\"\n\t\t\t\t\t: \"ilSMInactive\";\n\t\t\t\t$this->tpl->setCurrentBlock(\"edit_pathes\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_EDIT_PATHES\",$this->lng->txt(\"basic_settings\"));\n\t\t\t\t$this->tpl->setVariable(\"TAB_CLASS\", $class);\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t\t// preliminaries\n\t\t\t\t$class = ($this->active_tab == \"preliminaries\")\n\t\t\t\t\t? \"ilSMActive\"\n\t\t\t\t\t: \"ilSMInactive\";\n\t\t\t\t$this->tpl->setCurrentBlock(\"preliminaries\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_PRELIMINARIES\",$this->lng->txt(\"preliminaries\"));\n\t\t\t\t$this->tpl->setVariable(\"TAB_CLASS\", $class);\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t\t// change password link\n\t\t\t\t$class = ($this->active_tab == \"password\")\n\t\t\t\t\t? \"ilSMActive\"\n\t\t\t\t\t: \"ilSMInactive\";\n\t\t\t\t$this->tpl->setCurrentBlock(\"change_password\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_CHANGE_PASSWORD\",ucfirst($this->lng->txt(\"password\")));\n\t\t\t\t$this->tpl->setVariable(\"TAB_CLASS\", $class);\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\t\t\t}\n\n\t\t\t// logout link\n\t\t\tif ($this->setup->isAuthenticated())\n\t\t\t{\n\t\t\t\t$this->tpl->setCurrentBlock(\"logout\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_LOGOUT\",$this->lng->txt(\"logout\"));\n\t\t\t\t$this->tpl->parseCurrentBlock();\n\t\t\t}\n\t\t}\n\n\t\t$this->tpl->setVariable(\"VAL_CMD\", htmlspecialchars($_GET[\"cmd\"]));\n\t\t$this->tpl->setVariable(\"TXT_OK\",$this->lng->txt(\"change\"));\n\t\t$this->tpl->setVariable(\"TXT_CHOOSE_LANGUAGE\",$this->lng->txt(\"choose_language\"));\n\t\t$this->tpl->setVariable(\"PAGETITLE\",\"Setup\");\n\t\t//$this->tpl->setVariable(\"LOCATION_STYLESHEET\",\"./templates/blueshadow.css\");\n\t\t$this->tpl->setVariable(\"LOCATION_STYLESHEET\",\"../templates/default/delos.css\");\n\t\t$this->tpl->setVariable(\"LOCATION_CONTENT_STYLESHEET\",\"./css/setup.css\");\n\t\t$this->tpl->setVariable(\"TXT_ILIAS_VERSION\", \"ILIAS \".ILIAS_VERSION);\n\t\t$this->tpl->setVariable(\"TXT_SETUP\",$this->lng->txt(\"setup\"));\n\t\t$this->tpl->setVariable(\"VERSION\", $this->version);\n\t\t$this->tpl->setVariable(\"TXT_VERSION\", $this->lng->txt(\"version\"));\n\t\t$this->tpl->setVariable(\"LANG\", $this->lang);\n\t}\n\n\t/**\n\t * page output and set title\n\t */\n\tfunction displayFooter()\n\t{\n\t\t// footer (not really)\n\t\tif ($this->cmd != \"logout\")\n\t\t{\n\t\t\tif ($this->setup->ini_ilias_exists and $this->display_mode == \"setup\" and $this->setup->getClient()->getId() != \"\")\n\t\t\t{\n\t\t\t\t$this->tpl->setVariable(\"TXT_ACCESS_MODE\",\"(\".$this->lng->txt(\"client_id\").\": \".$this->setup->getClient()->getId().\")\");\n\t\t\t}\n\t\t\telseif ($this->setup->isAdmin())\n\t\t\t{\n\t\t\t\t$this->tpl->setVariable(\"TXT_ACCESS_MODE\",\"(\".$this->lng->txt(\"root_access\").\")\");\n\t\t\t}\n\n\t\t\t$this->displayNavButtons();\n\t\t}\n\n\t\t$this->tpl->show();\n\t}\n\n\t/**\n\t * display navigation buttons\n\t *\n\t * @return   boolean     false if both buttons are deactivated\n\t */\n\tfunction displayNavButtons()\n\t{\n\t\tif (!$this->btn_prev_on and !$this->btn_next_on)\n\t\t{\n\t\t\treturn false;\n\t\t}\n\n\t\t$ntpl = new ilTemplate(\"tpl.navbuttons.html\", true, true, \"setup\");\n\t\t//$this->tpl->addBlockFile(\"NAVBUTTONS\",\"navbuttons\",\"tpl.navbuttons.html\", \"setup\");\n\n\t\t$ntpl->setVariable(\"FORMACTION_BUTTONS\",\"setup.php?cmd=gateway\");\n\n\t\tif ($this->btn_prev_on)\n\t\t{\n\t\t\t$ntpl->setCurrentBlock(\"btn_back\");\n\t\t\t$ntpl->setVariable(\"TXT_PREV\", $this->btn_prev_lng);\n\t\t\t$ntpl->setVariable(\"CMD_PREV\", $this->btn_prev_cmd);\n\t\t\t$ntpl->parseCurrentBlock();\n\t\t}\n\n\t\tif ($this->btn_next_on)\n\t\t{\n\t\t\t$ntpl->setCurrentBlock(\"btn_forward\");\n\t\t\t$ntpl->setVariable(\"TXT_NEXT\", $this->btn_next_lng);\n\t\t\t$ntpl->setVariable(\"CMD_NEXT\", $this->btn_next_cmd);\n\t\t\t$ntpl->parseCurrentBlock();\n\t\t}\n\n\t\t$nav_html = $ntpl->get();\n\t\t$this->tpl->setVariable(\"NAVBUTTONS\", $nav_html);\n\t\tif (!$this->no_second_nav)\n\t\t{\n\t\t\t$this->tpl->setVariable(\"NAVBUTTONS2\", $nav_html);\n\t\t}\n\t\treturn true;\n\t}\n\n\t/**\n\t * set previous navigation button\n\t *\n\t * @param    string      command to process on click\n\t * @param    string      button label\n\t */\n\tfunction SetButtonPrev($a_cmd = 0,$a_lng = 0)\n\t{\n\t\t$this->btn_prev_on = true;\n\t\t$this->btn_prev_cmd = ($a_cmd) ? $a_cmd : \"gateway\";\n\t\t$this->btn_prev_lng = ($a_lng) ? $this->lng->txt($a_lng) : $this->lng->txt(\"prev\");\n\t}\n\n\t/**\n\t * set next navigation button\n\t *\n\t * @param    string      command to process on click\n\t * @param    string      button label\n\t */\n\tfunction SetButtonNext($a_cmd,$a_lng = 0)\n\t{\n\t\t$this->btn_next_on = true;\n\t\t$this->btn_next_cmd = ($a_cmd) ? $a_cmd : \"gateway\";\n\t\t$this->btn_next_lng = ($a_lng) ? $this->lng->txt($a_lng) : $this->lng->txt(\"next\");\n\t}\n\n\t////\n\t//// CLIENT OVERVIEW\n\t////\n\n\t/**\n\t * display client overview panel\n\t */\n\tfunction displayClientOverview()\n\t{\n\t\t$this->checkDisplayMode();\n\n\t\t// disable/enable button\n\t\t$btpl = new ilTemplate(\"tpl.buttons.html\", true, true, \"setup\");\n\t\t$btpl->setCurrentBlock(\"btn\");\n\t\t$btpl->setVariable(\"CMD\", \"changeaccess\");\n\t\t$access_button = ($this->setup->getClient()->status[\"access\"][\"status\"]) ? \"disable\" : \"enable\";\n\t\t$btpl->setVariable(\"TXT\", $this->lng->txt($access_button));\n\t\t$btpl->setVariable(\"FORMACTION\", \"setup.php?cmd=gateway\");\n\t\t$btpl->parseCurrentBlock();\n\t\t$this->tpl->setVariable(\"BUTTONS\", $btpl->get());\n\n\t\t$this->initClientOverviewForm();\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\t$this->displayStatusPanel();\n\t}\n\n\t/**\n\t * Init client overview form.\n\t */\n\tpublic function initClientOverviewForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t$this->form->setTitle($lng->txt(\"client_info\"));\n\n\t\t// installation name\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"inst_name\"), \"inst_name\");\n\t\t$ne->setValue(($this->setup->getClient()->getName())\n\t\t\t? $this->setup->getClient()->getName()\n\t\t\t: \"&lt;\".$this->lng->txt(\"no_client_name\").\"&gt;\");\n\t\t$ne->setInfo($this->setup->getClient()->getDescription());\n\t\t$this->form->addItem($ne);\n\n\t\t// client id\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"client_id\"), \"client_id\");\n\t\t$ne->setValue($this->setup->getClient()->getId());\n\t\t$this->form->addItem($ne);\n\n\t\t// nic id\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"ilias_nic_id\"), \"nic_id\");\n\t\t$ne->setValue(($this->setup->getClient()->db_installed)\n\t\t\t? $settings[\"inst_id\"]\n\t\t\t: $txt_no_database);\n\t\t$this->form->addItem($ne);\n\n\t\t// database version\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"db_version\"), \"db_vers\");\n\t\t$ne->setValue(($this->setup->getClient()->db_installed)\n\t\t\t? $settings[\"db_version\"]\n\t\t\t: $txt_no_database);\n\t\t$this->form->addItem($ne);\n\n\t\t// access status\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"access_status\"), \"status\");\n\t\t//$access_link = \"&nbsp;&nbsp;[<a href=\\\"setup.php?cmd=changeaccess&client_id=\".$this->setup->getClient()->getId().\"&back=view\\\">\".$this->lng->txt($access_button).\"</a>]\";\n\t\t$access_status = ($this->setup->getClient()->status[\"access\"][\"status\"]) ? \"online\" : \"disabled\";\n\t\t$ne->setValue($this->lng->txt($access_status).$access_link);\n\t\t$this->form->addItem($ne);\n\n\t\t// server information\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($this->lng->txt(\"server_info\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// ilias version\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"ilias_version\"), \"il_vers\");\n\t\t$ne->setValue(ILIAS_VERSION);\n\t\t$this->form->addItem($ne);\n\n\t\t// host\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"host\"), \"host\");\n\t\t$ne->setValue($_SERVER[\"SERVER_NAME\"]);\n\t\t$this->form->addItem($ne);\n\n\t\t// ip address and port\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"ip_address\").\" & \".\n\t\t\t$lng->txt(\"port\"));\n\t\t$ne->setValue($_SERVER[\"SERVER_ADDR\"].\":\".$_SERVER[\"SERVER_PORT\"]);\n\t\t$this->form->addItem($ne);\n\n\t\t// server software\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"server_software\"), \"server_softw\");\n\t\t$ne->setValue($_SERVER[\"SERVER_SOFTWARE\"]);\n\t\t$this->form->addItem($ne);\n\n\t\t// http path\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"http_path\"), \"http_path\");\n\t\t$ne->setValue(ILIAS_HTTP_PATH);\n\t\t$this->form->addItem($ne);\n\n\t\t// absolute path\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"absolute_path\"), \"absolute_path\");\n\t\t$ne->setValue(ILIAS_ABSOLUTE_PATH);\n\t\t$this->form->addItem($ne);\n\n\t\t// third party tools\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($this->lng->txt(\"3rd_party_software\"));\n\t\t$this->form->addItem($sh);\n\n\t\t$tools = array(\"convert\", \"zip\", \"unzip\", \"ghostscript\", \"java\", \"ffmpeg\");\n\n\t\tforeach ($tools as $tool)\n\t\t{\n\t\t\t// tool\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt($tool.\"_path\"), $tool.\"_path\");\n\t\t\t$p = $this->setup->ini->readVariable(\"tools\", $tool);\n\t\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t\t$this->form->addItem($ne);\n\t\t}\n\n\t\t// latex\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"url_to_latex\"), \"latex_url\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\", \"latex\"); // #13109\n\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// virus scanner\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"virus_scanner\"), \"vscan\");\n\t\t$ne->setValue($this->setup->ini->readVariable(\"tools\",\"vscantype\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// scan command\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"scan_command\"), \"scan\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\",\"scancommand\");\n\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// clean command\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"clean_command\"), \"clean\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\",\"cleancommand\");\n\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// system styles\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"enable_system_styles_management\"), \"enable_system_styles_management\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\",\"enable_system_styles_management\");\n\t\t$ne->setValue($p ? $this->lng->txt(\"enabled\") : $this->lng->txt(\"not_enabled\"));\n\t\t$this->form->addItem($ne);\n\n\t\t// lessc command\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"lessc\"), \"lessc\");\n\t\t$p = $this->setup->ini->readVariable(\"tools\",\"lessc\");\n\t\t$ne->setValue($p ? $p : $this->lng->txt(\"not_configured\"));\n\t\t$this->form->addItem($ne);\n\n\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t////\n\t//// PRELIMINARIES\n\t////\n\n\t/**\n\t * display preliminaries page\n\t */\n\tfunction displayPreliminaries()\n\t{\n\t\t$OK = \"<font color=\\\"green\\\"><strong>OK</strong></font>\";\n\t\t$FAILED = \"<strong><font color=\\\"red\\\">FAILED</font></strong>\";\n\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.preliminaries.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_SETUP_TITLE\",$this->lng->txt(\"ilias_setup\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_WELCOME\", $this->lng->txt(\"setup_welcome\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_INIFILE_DESC\", $this->lng->txt(\"setup_inifile_desc\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_DATABASE_DESC\", $this->lng->txt(\"setup_database_desc\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_LANGUAGES_DESC\", $this->lng->txt(\"setup_languages_desc\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_PASSWORD_DESC\", $this->lng->txt(\"setup_password_desc\"));\n\t\t$this->tpl->setVariable(\"TXT_SETUP_NIC_DESC\", $this->lng->txt(\"setup_nic_desc\"));\n\n\t\t$server_os = php_uname();\n\t\t$server_web = $_SERVER[\"SERVER_SOFTWARE\"];\n\t\t$environment = $this->lng->txt(\"env_using\").\" \".$server_os.\" <br/>\".$this->lng->txt(\"with\").\" \".$server_web;\n\n\t\tif ((stristr($server_os,\"linux\") || stristr($server_os,\"windows\")) && stristr($server_web,\"apache\"))\n\t\t{\n\t\t\t$env_comment = $this->lng->txt(\"env_ok\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$env_comment = \"<font color=\\\"red\\\">\".$this->lng->txt(\"env_warning\").\"</font>\";\n\t\t}\n\n\t\t$this->tpl->setVariable(\"TXT_ENV_TITLE\", $this->lng->txt(\"environment\"));\n\t\t$this->tpl->setVariable(\"TXT_ENV_INTRO\", $environment);\n\t\t$this->tpl->setVariable(\"TXT_ENV_COMMENT\", $env_comment);\n\n\t\t$this->tpl->setVariable(\"TXT_PRE_TITLE\", $this->lng->txt(\"preliminaries\"));\n\t\t$this->tpl->setVariable(\"TXT_PRE_INTRO\", $this->lng->txt(\"pre_intro\"));\n\n\t\t$preliminaries = array(\"php\", \"root\", \"folder_create\",\n\t\t\t\"cookies_enabled\", \"dom\", \"xsl\", \"gd\", \"memory\");\n\t\tif ($this->setup->hasOpCacheEnabled()) {\n\t\t\t$preliminaries[] = 'load_comments';\n\t\t}\n\n\t\tforeach ($preliminaries as $preliminary)\n\t\t{\n\t\t\t$this->tpl->setCurrentBlock(\"preliminary\");\n\t\t\t$this->tpl->setVariable(\"TXT_PRE\", $this->lng->txt(\"pre_\".$preliminary));\n\t\t\tif ($this->setup->preliminaries_result[$preliminary][\"status\"] == true)\n\t\t\t{\n\t\t\t\t$this->tpl->setVariable(\"STATUS_PRE\", $OK);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->tpl->setVariable(\"STATUS_PRE\", $FAILED);\n\t\t\t}\n\t\t\t$this->tpl->setVariable(\"COMMENT_PRE\", $this->setup->preliminaries_result[$preliminary][\"comment\"]);\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t}\n\n\t\t// summary\n\t\tif ($this->setup->preliminaries === true)\n\t\t{\n\t\t\tif ($this->setup->isInstalled())\n\t\t\t{\n\t\t\t\t$cmd = \"mastersettings\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$cmd = \"install\";\n\t\t\t}\n\t\t\t$btn_text = ($this->cmd == \"preliminaries\") ? \"\" : \"installation\";\n//echo \"-\".$this->display_mode.\"-\";\n\t\t\t$this->setButtonNext($cmd,$btn_text);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->tpl->setCurrentBlock(\"premessage\");\n\t\t\t$this->tpl->setVariable(\"TXT_PRE_ERR\", sprintf($this->lng->txt(\"pre_error\"),\n\t\t\t\t\"http://www.ilias.de/docu/goto.php?target=pg_6531_367&client_id=docu\"));\n\t\t\t$this->tpl->parseCurrentBlock();\n\t\t}\n\t}\n\n\t////\n\t//// BASIC SETTINGS\n\t////\n\n\t/**\n\t * display master setup form & process form input\n\t */\n\tfunction displayMasterSetup($a_omit_init = false)\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.std_layout.html\", \"setup\");\n\t\t$this->tpl->setVariable(\"TXT_HEADER\", $this->lng->txt(\"basic_settings\"));\n\t\t$this->tpl->setVariable(\"TXT_INFO\",\n\t\t\t$this->lng->txt(\"info_text_first_install\").\"<br/>\".$this->lng->txt(\"info_text_pathes\"));\n\n\t\t$this->setButtonPrev(\"preliminaries\");\n\n\t\tif ($this->setup->isInstalled())\n\t\t{\n\t\t\t$this->setButtonNext(\"list\");\n\t\t}\n\n\t\tif (!$a_omit_init)\n\t\t{\n\t\t\t$this->initBasicSettingsForm(true);\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", \"<br>\".$this->form->getHTML().\"<br>\");\n\t}\n\n\t/**\n\t * display master settings and process form input\n\t */\n\tfunction changeMasterSettings($a_omit_init = false)\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.std_layout.html\", \"setup\");\n\t\t$this->tpl->setVariable(\"TXT_HEADER\", $this->lng->txt(\"basic_settings\"));\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_pathes\"));\n\n\t\t$this->btn_next_on = true;\n\t\t$this->btn_next_lng = $this->lng->txt(\"create_new_client\").\"...\";\n\t\t$this->btn_next_cmd = \"newclient\";\n\n\t\tif (!$a_omit_init)\n\t\t{\n\t\t\t$this->initBasicSettingsForm();\n\t\t\t$this->getBasicSettingsValues();\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", \"<br>\".$this->form->getHTML().\"<br>\");\n\t}\n\n\t/**\n\t * Init basic settings form.\n\t */\n\tpublic function initBasicSettingsForm($a_install = false)\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// webspace dir\t\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"data_directory_in_ws\"), \"webspace_dir\");\n\t\tif ($a_install)\n\t\t{\n\t\t\t$ne->setInfo($this->lng->txt(\"data_directory_in_ws_info\"));\n\t\t}\n\t\t$cwd = ilUtil::isWindows()\n\t\t\t? str_replace(\"\\\\\", \"/\", getcwd())\n\t\t\t: getcwd();\n\n\t\t$ne->setValue($cwd.\"/data\");\n\t\t$this->form->addItem($ne);\n\n\t\t// data dir\n\t\tif ($a_install)\n\t\t{\n\t\t\t$ti = new ilTextInputGUI($lng->txt(\"data_directory_outside_ws\"), \"datadir_path\");\n\t\t\t$ti->setInfo($lng->txt(\"data_directory_info\"));\n\t\t\t$ti->setRequired(true);\n\t\t\t$this->form->addItem($ti);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"data_directory_outside_ws\"), \"data_dir\");\n\t\t\t$this->form->addItem($ne);\n\t\t}\n\n\t\t$lvext = (ilUtil::isWindows())\n\t\t\t? \"_win\"\n\t\t\t: \"\";\n\n\n\t\t// logging\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"logging\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// path to log file\n\t\t$ti = new ilTextInputGUI($lng->txt(\"log_path\"), \"log_path\");\n\t\t$ti->setInfo($lng->txt(\"log_path_comment\".$lvext));\n\t\t$this->form->addItem($ti);\n\n\t\t// disable logging \n\t\t$cb = new ilCheckboxInputGUI($lng->txt(\"disable_logging\"), \"chk_log_status\");\n\t\t$this->form->addItem($cb);\n\n\t\t// path to error log dir\n\t\t$ti = new ilTextInputGUI($lng->txt(\"error_log_path\"), \"error_log_path\");\n\t\t$ti->setInfo($lng->txt(\"error_log_path_comment\".$lvext));\n\t\t$this->form->addItem($ti);\n\n\t\t// server settings\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"server_settings\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// time zone\n\t\tinclude_once(\"./Services/Calendar/classes/class.ilCalendarUtil.php\");\n\t\t$si = new ilSelectInputGUI($lng->txt(\"time_zone\"), \"time_zone\");\n\t\t$si->setOptions(array_merge(\n\t\t\tarray(\"\" => \"-- \".$lng->txt(\"please_select\").\" --\"),\n\t\t\tilCalendarUtil::_getShortTimeZoneList()));\n\t\t$si->setRequired(true);\n\t\t$this->form->addItem($si);\n\n\t\t// https settings\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"https_settings\"));\n\t\t$this->form->addItem($sh);\n\n\t\t$check = new ilCheckboxInputGUI($lng->txt('ps_auto_https'),'auto_https_detect_enabled');\n\t\t$check->setOptionTitle($lng->txt('ps_auto_https_description'));\n\t\t$check->setValue(1);\n\n\t\t$text = new ilTextInputGUI($lng->txt('ps_auto_https_header_name'),'auto_https_detect_header_name');\n\t\t$text->setSize(24);\n\t\t$text->setMaxLength(64);\n\t\t$text->setRequired(true);\n\t\t$check->addSubItem($text);\n\n\t\t$text = new ilTextInputGUI($lng->txt('ps_auto_https_header_value'),'auto_https_detect_header_value');\n\t\t$text->setSize(24);\n\t\t$text->setMaxLength(64);\n\t\t$text->setRequired(true);\n\t\t$check->addSubItem($text);\n\n\t\t$this->form->addItem($check);\n\n\t\t// required 3rd party tools\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"3rd_party_software_req\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// convert path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"convert_path\"), \"convert_path\");\n\t\t$ti->setInfo($lng->txt(\"convert_path_comment\".$lvext));\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// zip path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"zip_path\"), \"zip_path\");\n\t\t$ti->setInfo($lng->txt(\"zip_path_comment\".$lvext));\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// unzip path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"unzip_path\"), \"unzip_path\");\n\t\t$ti->setInfo($lng->txt(\"unzip_path_comment\".$lvext));\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// optional 3rd party tools\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"3rd_party_software_opt\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// ghostscript path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"ghostscript_path\"), \"ghostscript_path\");\n\t\t$ti->setInfo($lng->txt(\"ghostscript_path_comment\".$lvext));\n\t\t$this->form->addItem($ti);\n\n\t\t// ffmpeg path\n\t\t$ti = new ilTextInputGUI($lng->txt(\"ffmpeg_path\"), \"ffmpeg_path\");\n\t\t$ti->setInfo($lng->txt(\"ffmpeg_path_comment\"));\n\t\t$this->form->addItem($ti);\n\n\t\t// latex\n\t\t$ti = new ilTextInputGUI($lng->txt(\"url_to_latex\"), \"latex_url\");\n\t\t$ti->setInfo($lng->txt(\"latex_url_comment\"));\n\t\t$this->form->addItem($ti);\n\n\t\t// virus scanner\n\t\t$options = array(\n\t\t\t\"none\" => $lng->txt(\"none\"),\n\t\t\t\"sophos\" => $lng->txt(\"sophos\"),\n\t\t\t\"antivir\" => $lng->txt(\"antivir\"),\n\t\t\t\"clamav\" => $lng->txt(\"clamav\")\n\t\t\t);\n\t\t$si = new ilSelectInputGUI($lng->txt(\"virus_scanner\"), \"vscanner_type\");\n\t\t$si->setOptions($options);\n\t\t$this->form->addItem($si);\n\n\t\t// scan command\n\t\t$ti = new ilTextInputGUI($lng->txt(\"scan_command\"), \"scan_command\");\n\t\t$this->form->addItem($ti);\n\n\t\t// clean command\n\t\t$ti = new ilTextInputGUI($lng->txt(\"clean_command\"), \"clean_command\");\n\t\t$this->form->addItem($ti);\n\n\t\t// enabled system styles mangesment\n\t\t$check = new ilCheckboxInputGUI($lng->txt('enable_system_styles_management'),'enable_system_styles_management');\n\t\t$check->setInfo($lng->txt('enable_system_styles_management_info'));\n\t\t$check->setValue(1);\n\n\t\t// lessc command\n\t\t$lessc = new ilTextInputGUI($lng->txt(\"lessc_path\"), \"lessc_path\");\n\t\t$lessc->setInfo($lng->txt(\"lessc_path_comment\"));\n\t\t$check->addSubItem($lessc);\n\n\t\t$this->form->addItem($check);\n\n\n\t\tif ($a_install)\n\t\t{\n\t\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t\t$sh->setTitle($lng->txt(\"master_password\"));\n\t\t\t$this->form->addItem($sh);\n\n\t\t\t// password\n\t\t\t$pi = new ilPasswordInputGUI($lng->txt(\"password\"), \"password\");\n\t\t\t$pi->setRequired(true);\n\t\t\t$pi->setSkipSyntaxCheck(true);\n\t\t\t$pi->setInfo($lng->txt(\"password_info\"));\n\t\t\t$this->form->addItem($pi);\n\t\t}\n\n\t\tif ($a_install)\n\t\t{\n\t\t\t$this->form->addCommandButton(\"saveBasicSettings\", $lng->txt(\"save\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->form->addCommandButton(\"updateBasicSettings\", $lng->txt(\"save\"));\n\t\t\t$this->form->addCommandButton(\"determineToolsPath\", $lng->txt(\"determine_tools_paths\"));\n\t\t}\n\n\t\t$this->form->setTitle($lng->txt(\"data_directories\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\tif ($a_install)\n\t\t{\n\t\t\t$det = $this->determineTools();\n\t\t\t$this->form->setValuesByArray($det);\n\t\t}\n\n\t}\n\n\t/**\n\t * Get current values for basic settings from\n\t */\n\tpublic function getBasicSettingsValues()\n\t{\n\t\t$values = array();\n\n\t\t$values[\"webspace_dir\"] = getcwd().\"/data\";\n\t\t$values[\"data_dir\"] = $this->setup->ini->readVariable(\"clients\",\"datadir\");\n\t\t$values[\"convert_path\"] = $this->setup->ini->readVariable(\"tools\",\"convert\");\n\t\t$values[\"zip_path\"] = $this->setup->ini->readVariable(\"tools\",\"zip\");\n\t\t$values[\"unzip_path\"] = $this->setup->ini->readVariable(\"tools\",\"unzip\");\n\t\t$values[\"ghostscript_path\"] = $this->setup->ini->readVariable(\"tools\",\"ghostscript\");\n\t\t//$values[\"mkisofs_path\"] = $this->setup->ini->readVariable(\"tools\",\"mkisofs\");\n\t\t$values[\"ffmpeg_path\"] = $this->setup->ini->readVariable(\"tools\",\"ffmpeg\");\n\t\t$values[\"latex_url\"] = $this->setup->ini->readVariable(\"tools\",\"latex\");\n\t\t$values[\"fop_path\"] = $this->setup->ini->readVariable(\"tools\",\"fop\");\n\t\t$values[\"vscanner_type\"] = $this->setup->ini->readVariable(\"tools\", \"vscantype\");\n\t\t$values[\"scan_command\"] = $this->setup->ini->readVariable(\"tools\", \"scancommand\");\n\t\t$values[\"clean_command\"] = $this->setup->ini->readVariable(\"tools\", \"cleancommand\");\n\t\t$values[\"enable_system_styles_management\"] = $this->setup->ini->readVariable(\"tools\", \"enable_system_styles_management\");\n\t\t$values[\"lessc_path\"] = $this->setup->ini->readVariable(\"tools\", \"lessc\");\n\t\t$values[\"log_path\"] = $this->setup->ini->readVariable(\"log\",\"path\").\"/\".\n\t\t\t$this->setup->ini->readVariable(\"log\",\"file\");\n\t\t$values[\"chk_log_status\"] = !$this->setup->ini->readVariable(\"log\",\"enabled\");\n\t\t$values[\"error_log_path\"] = $this->setup->ini->readVariable(\"log\",\"error_path\");\n\t\t$values[\"time_zone\"] = $this->setup->ini->readVariable(\"server\", \"timezone\");\n\n\t\t// https settings\n\t\t$values[\"auto_https_detect_enabled\"] = $this->setup->ini->readVariable(\"https\", \"auto_https_detect_enabled\");\n\t\t$values[\"auto_https_detect_header_name\"] = $this->setup->ini->readVariable(\"https\", \"auto_https_detect_header_name\");\n\t\t$values[\"auto_https_detect_header_value\"] = $this->setup->ini->readVariable(\"https\", \"auto_https_detect_header_value\");\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\n\t/**\n\t * Save basic settings form\n\t */\n\tpublic function saveBasicSettings()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl;\n\n\t\t$this->initBasicSettingsForm(true);\n\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t// correct paths on windows\n\t\t\tif (ilUtil::isWindows())\n\t\t\t{\n\t\t\t\t$fs = array(\"datadir_path\", \"log_path\", \"convert_path\", \"zip_path\",\n\t\t\t\t\t\"unzip_path\", \"ghostscript_path\", \"ffmpeg_path\",\"lessc_path\");\n\t\t\t\tforeach ($fs as $f)\n\t\t\t\t{\n\t\t\t\t\t$_POST[$f] = str_replace(\"\\\\\", \"/\", $_POST[$f]);\n\t\t\t\t}\n\t\t\t}\n\t\t\t$_POST[\"setup_pass\"] = $_POST[\"password\"];\n\t\t\t$_POST[\"setup_pass2\"] = $_POST[\"password_retype\"];\n\t\t\tif (!$this->setup->checkDataDirSetup($_POST))\n\t\t\t{\n\t\t\t\t$i = $this->form->getItemByPostVar(\"datadir_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->checkLogSetup($_POST))\n\t\t\t{\n\t\t\t\t$i = $this->form->getItemByPostVar(\"log_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if(!$this->setup->checkErrorLogSetup($_POST[\"error_log_path\"])) {\n\t\t\t\t$i = $this->form->getItemByPostVar(\"error_log_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->checkPasswordSetup($_POST))\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->saveMasterSetup($_POST))\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()),true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_saved\"),true);\n\t\t\t\tilUtil::redirect(\"setup.php?cmd=mastersettings\");\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayMasterSetup(true);\n\t}\n\n\t/**\n\t * Update basic settings form\n\t */\n\tpublic function updateBasicSettings()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl;\n\n\t\t$this->initBasicSettingsForm();\n\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\tif (ilUtil::isWindows())\n\t\t\t{\n\t\t\t\t$fs = array(\"datadir_path\", \"log_path\", \"convert_path\", \"zip_path\",\n\t\t\t\t\t\"unzip_path\", \"ghostscript_path\", \"ffmpeg_path\",\"lessc_path\");\n\t\t\t\tforeach ($fs as $f)\n\t\t\t\t{\n\t\t\t\t\t$_POST[$f] = str_replace(\"\\\\\", \"/\", $_POST[$f]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif (!$this->setup->checkLogSetup($_POST))\n\t\t\t{\n\t\t\t\t$i = $this->form->getItemByPostVar(\"log_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->checkErrorLogSetup($_POST[\"error_log_path\"])) {\n\t\t\t\t$i = $this->form->getItemByPostVar(\"error_log_path\");\n\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getError()));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"form_input_not_valid\"),true);\n\t\t\t}\n\t\t\telse if (!$this->setup->updateMasterSettings($_POST))\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()),true);\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_saved\"),true);\n\t\t\t\tilUtil::redirect(\"setup.php?cmd=mastersettings\");\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->changeMasterSettings(true);\n\t}\n\n\t////\n\t//// LOGIN\n\t////\n\n\t/**\n\t * login to a client\n\t */\n\tfunction loginClient()\n\t{\n\t\tsession_destroy();\n\n\t\tilUtil::redirect(ILIAS_HTTP_PATH.\"/login.php?client_id=\".$this->setup->getClient()->getId());\n\t}\n\n\t/**\n\t * display login form and process form\n\t */\n\tfunction displayLogin($a_omit_minit = false, $a_omit_cinit = false)\n\t{\n\t\tglobal $lng;\n\t\t$this->tpl->setVariable(\"SETUP_LOGIN_CLASS\", \" ilSetupLogin\");\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.std_layout.html\", \"setup\");\n\n\t\tif ($a_omit_minit)\n\t\t{\n\t\t\t$m_form = $this->form->getHTML();\n\t\t}\n\t\tif (!$a_omit_cinit)\n\t\t{\n\t\t\t$this->initClientLoginForm();\n\t\t}\n\t\t$cl_form = $this->form->getHTML();\n\t\tif (!$a_omit_minit)\n\t\t{\n\t\t\t$this->initMasterLoginForm();\n\t\t\t$m_form = $this->form->getHTML();\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $cl_form.\"<br>\".$m_form);\n\t\t$this->tpl->setVariable(\"TXT_HEADER\", $lng->txt(\"login\"));\n\t}\n\n\t/**\n\t* Master Login\n\t*/\n\tpublic function performMLogin()\n\t{\n\t\t$this->initMasterLoginForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t$i = $this->form->getItemByPostVar(\"mpassword\");\n\t\t\tif (!$this->setup->loginAsAdmin($_POST[\"mpassword\"]))\n\t\t\t{\n\t\t\t\t$i->setAlert($this->lng->txt(\"login_invalid\"));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// everything ok -> we are authenticated\n\t\t\t\tilUtil::redirect(\"setup.php\");\n\t\t\t}\n\t\t}\n\n\t\t// something wrong -> display login again\t\t\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayLogin(true);\n\t}\n\n\t/**\n\t * Login\n\t */\n\tfunction performLogin()\n\t{\n\t\t$this->initClientLoginForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t$i = $this->form->getItemByPostVar(\"password\");\n\t\t\tif (!$this->setup->loginAsClient(\n\t\t\t\tarray(\"client_id\" => $_POST[\"client_id\"],\n\t\t\t\t\"username\" => $_POST[\"username\"], \"password\" => $_POST[\"password\"])))\n\t\t\t{\n\t\t\t\t$i->setAlert($this->setup->getError());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t// everything ok -> we are authenticated\n\t\t\t\tilUtil::redirect(\"setup.php\");\n\t\t\t}\n\t\t}\n\n\t\t// something wrong -> display login again\t\t\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayLogin(false, true);\n\t}\n\n\t/**\n\t* Init client login form.\n\t*/\n\tpublic function initClientLoginForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\t\t$this->form->setId(\"client_login\");\n\n\t\t// client id\n\t\t$ti = new ilTextInputGUI($lng->txt(\"client_id\"), \"client_id\");\n\t\t$ti->setMaxLength(32);\n\t\t$ti->setSize(20);\n\t\t$this->form->addItem($ti);\n\n\t\t// username\n\t\t$ti = new ilTextInputGUI($lng->txt(\"username\"), \"username\");\n\t\t$ti->setSize(20);\n\t\t$this->form->addItem($ti);\n\n\t\t// password\n\t\t$pi = new ilPasswordInputGUI($lng->txt(\"password\"), \"password\");\n\t\t$pi->setSize(20);\n\t\t$pi->setRetype(false);\n\t\t$pi->setSkipSyntaxCheck(true);\n\t\t$this->form->addItem($pi);\n\n\t\t$this->form->addCommandButton(\"performLogin\", $lng->txt(\"login\"));\n\n\t\t$this->form->setTitle($lng->txt(\"client_login\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t* Init master login form.\n\t*/\n\tpublic function initMasterLoginForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\t\t$this->form->setId(\"master_login\");\t\t\n\t\t// password\n\t\t$pi = new ilPasswordInputGUI($lng->txt(\"password\"), \"mpassword\");\n\t\t$pi->setSize(20);\n\t\t$pi->setRetype(false);\n\t\t$pi->setSkipSyntaxCheck(true);\n\t\t$this->form->addItem($pi);\n\n\t\t$this->form->addCommandButton(\"performMLogin\", $lng->txt(\"login\"));\n\n\t\t$this->form->setTitle($lng->txt(\"admin_login\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t}\n\n\t////\n\t//// CLIENT LIST\n\t////\n\n\t/**\n\t * display client list and process form input\n\t */\n\tfunction displayClientList()\n\t{\n\t\t$_SESSION[\"ClientId\"] = \"\";\n\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.clientlist.html\", \"setup\");\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_list\"));\n\t\tilUtil::sendInfo();\n\n\t\t// common\n\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt(\"list_clients\"));\n\t\t$this->tpl->setVariable(\"TXT_LISTSTATUS\",($this->setup->ini->readVariable(\"clients\",\"list\")) ? $this->lng->txt(\"display_clientlist\") : $this->lng->txt(\"hide_clientlist\"));\n\t\t$this->tpl->setVariable(\"TXT_TOGGLELIST\",($this->setup->ini->readVariable(\"clients\",\"list\")) ? $this->lng->txt(\"disable\") : $this->lng->txt(\"enable\"));\n\n\t\tinclude_once(\"./setup/classes/class.ilClientListTableGUI.php\");\n\t\t$tab = new ilClientListTableGUI($this->setup);\n\t\t$this->tpl->setVariable(\"CLIENT_LIST\", $tab->getHTML());\n\n\t\t// create new client button\n\t\t$this->btn_next_on = true;\n\t\t$this->btn_next_lng = $this->lng->txt(\"create_new_client\").\"...\";\n\t\t$this->btn_next_cmd = \"newclient\";\n\t}\n\n\t/**\n\t* Determine tools paths\n\t*/\n\tfunction determineToolsPath()\n\t{\n\t\t$_POST = $this->determineTools($_POST);\n\t\t$this->updateBasicSettings();\n\t}\n\n\t/**\n\t* Determine tools paths\n\t*/\n\tfunction determineToolsPathInstall()\n\t{\n\t\t$this->displayMasterSetup(true);\n\t}\n\n\t/**\n\t* Determine Tools\n\t*/\n\tfunction determineTools($a_tools = array())\n\t{\n\t\t$cwd = ilUtil::isWindows()\n\t\t\t? str_replace(\"\\\\\", \"/\", getcwd())\n\t\t\t: getcwd();\n\t\tif (!ilUtil::isWindows())\n\t\t{\n\t\t\t$tools = array(\"convert\" => \"convert\",\n\t\t\t\t\"zip\" => \"zip\", \"unzip\" => \"unzip\", \"ghostscript\" => \"gs\",\n\t\t\t\t\"java\" => \"java\", \"ffmpeg\" => \"ffmpeg\", \"lessc\"=>\"lessc\");\n\t\t\t$dirs = array(\"/usr/local\", \"/usr/local/bin\", \"/usr/bin\", \"/bin\", \"/sw/bin\", \"/usr/bin\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$tools = array(\"convert\" => \"convert.exe\",\n\t\t\t\t\"zip\" => \"zip.exe\", \"unzip\" => \"unzip.exe\");\n\t\t\t$dirs = array();\n\t\t}\n\t\tforeach($tools as $k => $tool)\n\t\t{\n\t\t\t// try which command\n\t\t\tunset($ret);\n\t\t\t@exec(\"which \".$tool, $ret);\n\t\t\tif (substr($ret[0], 0, 3) != \"no \" && substr($ret[0], 0, 1) == \"/\")\n\t\t\t{\n\t\t\t\t$a_tools[$k.\"_path\"] = $ret[0];\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// try common directories\n\t\t\tforeach($dirs as $dir)\n\t\t\t{\n\t\t\t\tif (@is_file($dir.\"/\".$tool))\n\t\t\t\t{\n\t\t\t\t\t$a_tools[$k.\"_path\"] = $dir.\"/\".$tool;\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn $a_tools;\n\t}\n\n\n\t////\n\t//// NEW CLIENT STEP 1: SELECT DB TYPE\n\t////\n\n\t/**\n\t * Select database type\n\t *\n\t */\n\tfunction selectDBType()\n\t{\n\t\t$this->checkDisplayMode(\"create_new_client\");\n\n\t\tunset($_SESSION[\"db_type\"]);\n\t\t$this->initDBSelectionForm();\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\tif ($this->setup->getClient()->status[\"ini\"][\"status\"]) {\n\t\t\t$this->setButtonNext(\"db\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Init db selection form.\n\t */\n\tpublic function initDBSelectionForm()\n\t{\n\t\tglobal $lng;\n\n\t\trequire_once('./Services/Form/classes/class.ilPropertyFormGUI.php');\n\t\trequire_once('./Services/Database/classes/class.ilDBConstants.php');\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// db type\n\t\t$options = ilDBConstants::getAvailableTypes(true);\n\t\t$si = new ilSelectInputGUI($lng->txt(\"db_type\"), \"db_type\");\n\t\t$si->setOptions($options);\n\t\t$si->setInfo($lng->txt(\"\"));\n\t\t$this->form->addItem($si);\n\n\t\t$this->form->addCommandButton(\"selectdbtype\", $lng->txt(\"save\"));\n\n\t\t$this->form->setTitle($lng->txt(\"db_selection\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t////\n\t//// NEW CLIENT STEP 2: SELECT DB TYPE\n\t////\n\n\t/**\n\t * display setup in step\n\t */\n\tfunction displayIni($a_omit_form_init = false)\n\t{\n\t\t$this->checkDisplayMode(\"create_new_client\");\n\n\t\tif ($_POST[\"db_type\"] != \"\") {\n\t\t\t$_SESSION[\"db_type\"] = $_POST[\"db_type\"];\n\t\t} else {\n\t\t\t$_POST[\"db_type\"] = $_SESSION[\"db_type\"];\n\t\t}\n\n\t\t$has_ini = $this->setup->getClient()->status[\"ini\"][\"status\"];\n\n\t\t// use value from client ini if setup was resumed (no value in session)\n\t\tif (!$_SESSION[\"db_type\"] && $has_ini) {\n\t\t\t$_SESSION[\"db_type\"] = $this->setup->getClient()->getDbType();\n\t\t}\n\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_ini\"));\n\t\tif (!$a_omit_form_init) {\n\t\t\t$this->initClientIniForm();\n\t\t\t$this->getClientIniValues();\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\tif ($has_ini) {\n\t\t\t$this->setButtonNext(\"db\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Init client ini form.\n\t */\n\tprotected function initClientIniForm()\n\t{\n\t\tglobal $lng;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// client id\n\t\tif ($this->setup->ini_client_exists) {\n\t\t\t$hi = new ilHiddenInputGUI(\"client_id\");\n\t\t\t$hi->setValue($this->client_id);\n\t\t\t$this->form->addItem($hi);\n\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"client_id\"), \"hh\");\n\t\t\t$ne->setValue($this->client_id);\n\t\t\t$this->form->addItem($ne);\n\t\t} else {\n\t\t\t$ti = new ilTextInputGUI($lng->txt(\"client_id\"), \"client_id\");\n\t\t\t$ti->setMaxLength(32);\n\t\t\t$ti->setRequired(true);\n\t\t\t$this->form->addItem($ti);\n\t\t}\n\n\t\t// database connection\t\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"db_conn\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// db type\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"db_type\"), \"dbt\");\n\t\t$at = ilDBConstants::getAvailableTypes(true);\n\t\t$ne->setValue($at[$_SESSION[\"db_type\"]] );\n\t\t$this->form->addItem($ne);\n\n\t\t// db host\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_host\"), \"db_host\");\n\t\t$ti->setMaxLength(120);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// db name\n\t\trequire_once('./Services/Database/classes/class.ilDBConstants.php');\n\t\tif (!in_array($_SESSION[\"db_type\"], array( ilDBConstants::TYPE_ORACLE ))) {\n\t\t\t$ti = new ilTextInputGUI($lng->txt(\"db_name\"), \"db_name\");\n\t\t\t$ti->setRequired(true);\n\t\t} else {\n\t\t\t$ti = new ilTextInputGUI($lng->txt(\"db_service_name\"), \"db_name\");\n\t\t}\n\t\t$ti->setMaxLength(40);\n\t\t$this->form->addItem($ti);\n\n\t\t// db user\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_user\"), \"db_user\");\n\t\t$ti->setMaxLength(40);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// db port\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_port\"), \"db_port\");\n\t\t$ti->setMaxLength(8);\n\t\t$this->form->addItem($ti);\n\n\t\t// db password\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_pass\"), \"db_pass\");\n\t\t$ti->setMaxLength(40);\n\t\t$this->form->addItem($ti);\n\n\t\t$this->form->addCommandButton(\"saveClientIni\", $lng->txt(\"save\"));\n\n\t\t$this->form->setTitle($lng->txt(\"inst_identification\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t * Get current values for client ini from\n\t */\n\tpublic function getClientIniValues()\n\t{\n\t\t$values = array();\n\n\t\t$values[\"db_host\"] = $this->setup->getClient()->getDbHost();\n\t\t$values[\"db_user\"] = $this->setup->getClient()->getDbUser();\n\t\t$values[\"db_port\"] = $this->setup->getClient()->getDbPort();\n\t\t$values[\"db_pass\"] = $this->setup->getClient()->getDbPass();\n\t\t$values[\"db_name\"] = $this->setup->getClient()->getDbName();\n\t\t$values[\"client_id\"] = $this->setup->getClient()->getId();\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\t\n\t/**\n\t * Save client ini form\n\t */\n\tpublic function saveClientIni()\n\t{\n\t\t$this->initClientIniForm();\n\t\tif ($this->form->checkInput()) {\n\t\t\tif (strlen($_POST[\"client_id\"]) != strlen(urlencode(($_POST[\"client_id\"])))\n\t\t\t    || !$this->setup->isValidClientId($_POST[\"client_id\"])\n\t\t\t) {\n\t\t\t\t$i = $this->form->getItemByPostVar(\"client_id\");\n\t\t\t\t$i->setAlert($this->lng->txt(\"ini_client_id_invalid\"));\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"ini_client_id_invalid\"), true);\n\t\t\t} else {\n\t\t\t\tif (strlen($_POST[\"client_id\"]) < 4) {\n\t\t\t\t\t$i = $this->form->getItemByPostVar(\"client_id\");\n\t\t\t\t\t$i->setAlert($this->lng->txt(\"ini_client_id_too_short\"));\n\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"ini_client_id_too_short\"), true);\n\t\t\t\t} else {\n\t\t\t\t\tif (strlen($_POST[\"client_id\"]) > 32) {\n\t\t\t\t\t\t$i = $this->form->getItemByPostVar(\"client_id\");\n\t\t\t\t\t\t$i->setAlert($this->lng->txt(\"ini_client_id_too_long\"));\n\t\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"ini_client_id_too_long\"), true);\n\t\t\t\t\t} else {\n\t\t\t\t\t\tif (!$this->setup->ini_client_exists && file_exists(ILIAS_ABSOLUTE_PATH . \"/\" . ILIAS_WEB_DIR . \"/\" . $_POST[\"client_id\"])) {\n\t\t\t\t\t\t\t$i = $this->form->getItemByPostVar(\"client_id\");\n\t\t\t\t\t\t\t$i->setAlert($this->lng->txt(\"ini_client_id_exists\"));\n\t\t\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"ini_client_id_exists\"), true);\n\t\t\t\t\t\t} else {\n\n\t\t\t\t\t\t\t// save some old values\n\t\t\t\t\t\t\t$old_db_name = $this->setup->getClient()->getDbName();\n\t\t\t\t\t\t\t$old_db_type = $this->setup->getClient()->getDbType();\n\t\t\t\t\t\t\t$old_client_id = $this->setup->getClient()->getId();\n\n\t\t\t\t\t\t\t// create new client object if it does not exist\n\t\t\t\t\t\t\tif (!$this->setup->ini_client_exists) {\n\t\t\t\t\t\t\t\t$client_id = $_POST[\"client_id\"];\n\t\t\t\t\t\t\t\t$this->setup->newClient($client_id);\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// set client data\n\t\t\t\t\t\t\t$this->setup->getClient()->setId($_POST[\"client_id\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbHost($_POST[\"db_host\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbName($_POST[\"db_name\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbUser($_POST[\"db_user\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbPort($_POST[\"db_port\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbPass($_POST[\"db_pass\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDbType($_SESSION[\"db_type\"]);\n\t\t\t\t\t\t\t$this->setup->getClient()->setDSN();\n\n\t\t\t\t\t\t\t// try to connect to database\n\t\t\t\t\t\t\tif (!$this->setup->getClient()->getDBSetup()->isConnectable()) {\n\t\t\t\t\t\t\t\t$i = $this->form->getItemByPostVar(\"db_host\");\n\t\t\t\t\t\t\t\t$i->setAlert($this->lng->txt($this->setup->getClient()->getError()));\n\t\t\t\t\t\t\t\tilUtil::sendFailure($this->setup->getClient()->getError(), true);\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t// check if db exists\n\t\t\t\t\t\t\t\t$db_installed = $this->setup->getClient()->getDBSetup()->isDatabaseInstalled();\n\n\t\t\t\t\t\t\t\tif ($db_installed and (!$this->setup->ini_ilias_exists or ($this->setup->getClient()->getDbName() != $old_db_name))) {\n\t\t\t\t\t\t\t\t\t$_POST[\"db_name\"] = $old_db_name;\n\t\t\t\t\t\t\t\t\t$message = ucfirst($this->lng->txt(\"database\")) . \" \\\"\" . $this->setup->getClient()->getDbName() . \"\\\" \"\n\t\t\t\t\t\t\t\t\t           . $this->lng->txt(\"ini_db_name_exists\");\n\t\t\t\t\t\t\t\t\t$i = $this->form->getItemByPostVar(\"db_name\");\n\t\t\t\t\t\t\t\t\t$i->setAlert($message);\n\t\t\t\t\t\t\t\t\tilUtil::sendFailure($message, true);\n\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t// all ok. create client.ini and save posted data\n\t\t\t\t\t\t\t\t\tif (!$this->setup->ini_client_exists) {\n\t\t\t\t\t\t\t\t\t\tif ($this->setup->saveNewClient()) {\n\t\t\t\t\t\t\t\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_saved\"), true);\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"status\"] = true;\n\t\t\t\t\t\t\t\t\t\t\t$_SESSION[\"ClientId\"] = $client_id;\n\t\t\t\t\t\t\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayIni&client_id=\" . $client_id);\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t$err = $this->setup->getError();\n\t\t\t\t\t\t\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"save_error\") . \": \" . $err, true);\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"status\"] = false;\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"comment\"] = $err;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\tif ($this->setup->getClient()->ini->write()) {\n\t\t\t\t\t\t\t\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_changed\"));\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"status\"] = true;\n\t\t\t\t\t\t\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayIni\");\n\t\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t\t$err = $this->setup->getClient()->ini->getError();\n\t\t\t\t\t\t\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"save_error\") . \": \" . $err, true);\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"status\"] = false;\n\t\t\t\t\t\t\t\t\t\t\t$this->setup->getClient()->status[\"ini\"][\"comment\"] = $err;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayIni(true);\n\t}\n\n\t/**\n\t * display error page\n\t *\n\t * @param    string  error message\n\t */\n\tfunction displayError($a_message)\n\t{\n\t\t$this->setDisplayMode(\"view\");\n\n\t\t$this->tpl->addBlockFile(\"CONTENT\", \"content\", \"tpl.error.html\", \"setup\");\n\n\t\t$this->tpl->setCurrentBlock(\"content\");\n\t\t$this->tpl->setVariable(\"FORMACTION\", $_SESSION[\"referer\"]);\n\t\t$this->tpl->setVariable(\"TXT_BACK\", $this->lng->txt(\"back\"));\n\t\t$this->tpl->setVariable(\"ERROR_MESSAGE\", ($a_message));\n\t\t$this->tpl->parseCurrentBlock();\n\n//\t\t$this->tpl->show();\n//\t\texit();\n\t}\n\n\t/**\n\t * display logout page\n\t */\n\tfunction displayLogout()\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.logout.html\", \"setup\");\n\n\t\tsession_destroy();\n\n\t\t$this->logged_out = true;\n\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt(\"logged_out\"));\n\t\t$this->tpl->setCurrentBlock(\"home_link\");\n\t\t$this->tpl->setVariable(\"TXT_INDEX\",$this->lng->txt(\"ilias_homepage\"));\n\t\t$this->tpl->setVariable(\"LNK_INDEX\",ILIAS_HTTP_PATH.\"/index.php\");\n\t\t$this->tpl->parseCurrentBlock();\n\t}\n\n\t/**\n\t * display process panel\n\t */\n\tfunction displayProcessPanel()\n\t{\n\t\tinclude_once(\"./Services/UIComponent/Checklist/classes/class.ilChecklistGUI.php\");\n\t\t$checklist = new ilChecklistGUI();\n\t\t$checklist->setHeading($this->lng->txt(\"setup_process_status\"));\n\n\n\t\t$OK = \"<font color=\\\"green\\\"><strong>OK</strong></font>\";\n\n\t\t$steps = $this->setup->getStatus();\n\t\t\n\t\t// #16846\n\t\t$first = array(\"selectdb\" => array(\n\t\t\t\"status\" => ((bool)$_SESSION[\"db_type\"] || (bool)$steps[\"ini\"][\"status\"]),\n\t\t\t\"text\" => $this->lng->txt(\"db_selection\"),\n\t\t\t\"comment\" => \"\"\n\t\t));\n\t\t\n\t\t$steps = $first + $steps;\t\t\n\n\t\t// remove access step\n\t\tunset($steps[\"access\"]);\n\n\t\t$steps[\"ini\"][\"text\"] = $this->lng->txt(\"setup_process_step_ini\");\n\t\t$steps[\"db\"][\"text\"]  = $this->lng->txt(\"setup_process_step_db\");\n\t\t//$steps[\"sess\"][\"text\"]      = $this->lng->txt(\"setup_process_step_sess\");\n\t\t$steps[\"lang\"][\"text\"]    = $this->lng->txt(\"setup_process_step_lang\");\n\t\t$steps[\"contact\"][\"text\"] = $this->lng->txt(\"setup_process_step_contact\");\n\t\t$steps[\"proxy\"][\"text\"]   = $this->lng->txt(\"setup_process_step_proxy\");\n\t\t$steps[\"nic\"][\"text\"]     = $this->lng->txt(\"setup_process_step_nic\");\n\t\t$steps[\"finish\"][\"text\"]  = $this->lng->txt(\"setup_process_step_finish\");\n\n\t\t$stpl = new ilTemplate(\"tpl.process_panel.html\", true, true, \"setup\");\n\n\t\t$num = 1;\n\n\t\tforeach ($steps as $key => $val)\n\t\t{\n\t\t\t$stpl->setCurrentBlock(\"menu_row\");\n\t\t\t$stpl->setVariable(\"TXT_STEP\",$this->lng->txt(\"step\").\" \".$num.\": &nbsp;\");\n\t\t\t$stpl->setVariable(\"TXT_ACTION\",$val[\"text\"]);\n\t\t\t$stpl->setVariable(\"IMG_ARROW\", \"spacer.png\");\n\n\t\t\tif ($this->cmd == $key and isset($this->cmd))\n\t\t\t{\n\t\t\t\t$stpl->setVariable(\"HIGHLIGHT\", \" style=\\\"font-weight:bold;\\\"\");\n\t\t\t}\n\n\t\t\t$status = ($val[\"status\"]) ? $OK : \"\";\n\n\t\t\t$stpl->setVariable(\"TXT_STATUS\",$status);\n\t\t\t$stpl->parseCurrentBlock();\n\n\t\t\t$checklist->addEntry($num.\". \".$val[\"text\"], \"\",\n\t\t\t\t($val[\"status\"]) ?\n\t\t\t\t\tilChecklistGUI::STATUS_OK : ilChecklistGUI::STATUS_NOT_OK,\n\t\t\t\t($this->cmd == $key and isset($this->cmd)),\n\t\t\t\t\"\");\n\n\t\t\t$num++;\n\t\t}\n\n\t\t$stpl->setVariable(\"TXT_SETUP_PROCESS_STATUS\",$this->lng->txt(\"setup_process_status\"));\n\n\t\t$this->tpl->setVariable(\"PROCESS_MENU\", $checklist->getHTML());\n\t}\n\n\t/**\n\t * display status panel\n\t */\n\tfunction displayStatusPanel()\n\t{\n\t\tinclude_once(\"./Services/UIComponent/Checklist/classes/class.ilChecklistGUI.php\");\n\t\t$checklist = new ilChecklistGUI();\n\t\t$checklist->setHeading($this->lng->txt(\"overall_status\"));\n\t\t\n\t\t$OK = \"<font color=\\\"green\\\"><strong>OK</strong></font>\";\n\n\t\t//$this->tpl->addBlockFile(\"STATUS_PANEL\",\"status_panel\",\"tpl.status_panel.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_OVERALL_STATUS\", $this->lng->txt(\"overall_status\"));\n\t\t// display status\n\t\tif ($this->setup->getClient()->status)\n\t\t{\n\t\t\tforeach ($this->setup->getClient()->status as $key => $val)\n\t\t\t{\n\t\t\t\t$status = ($val[\"status\"]) ? $OK : \"&nbsp;\";\n//\t\t\t\t$this->tpl->setCurrentBlock(\"status_row\");\n//\t\t\t\t$this->tpl->setVariable(\"TXT_STEP\", $this->lng->txt(\"step_\".$key));\n//\t\t\t\t$this->tpl->setVariable(\"TXT_STATUS\",$status);\n\n\n//\t\t\t\t$this->tpl->setVariable(\"TXT_COMMENT\",$val[\"comment\"]);\n//\t\t\t\t$this->tpl->parseCurrentBlock();\n\n\t\t\t\t$checklist->addEntry($this->lng->txt(\"step_\".$key), \"\",\n\t\t\t\t\t($val[\"status\"]) ?\n\t\t\t\t\t\tilChecklistGUI::STATUS_OK : ilChecklistGUI::STATUS_NO_STATUS, false, $val[\"comment\"]);\n\t\t\t}\n\t\t}\n\t\t$this->tpl->setVariable(\"STATUS_PANEL\", $checklist->getHTML());\n\t}\n\n\t/**\n\t * determine display mode and load according html layout\n\t *\n\t * @param    string  set title for display mode 'setup'\n\t */\n\tfunction checkDisplayMode($a_title = \"\")\n\t{\n\t\tswitch ($this->display_mode)\n\t\t{\n\t\t\tcase \"view\":\n\t\t\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.clientview.html\", \"setup\");\n\t\t\t\t// display tabs\n\t\t\t\tinclude \"./setup/include/inc.client_tabs.php\";\n\t\t\t\t$client_name = ($this->setup->getClient()->getName()) ? $this->setup->getClient()->getName() : $this->lng->txt(\"no_client_name\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_HEADER\",$client_name.\" (\".$this->lng->txt(\"client_id\").\": \".$this->setup->getClient()->getId().\")\");\n\t\t\t\tbreak;\n\n\t\t\tcase \"setup\":\n\t\t\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.clientsetup.html\", \"setup\");\n\t\t\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt($a_title));\n\t\t\t\tbreak;\n\n\t\t\tdefault:\n\t\t\t\t$this->displayError($this->lng->txt(\"unknown_display_mode\"));\n\t\t\t\texit();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * Show subtabs\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction displaySubTabs()\n\t{\n\t\t$sub_tab_html = $this->tabs->getSubTabHTML();\n\t\tif ($sub_tab_html != \"\")\n\t\t{\n\t\t\t$this->tpl->setVariable(\"SUBTABS\", $sub_tab_html);\n\t\t}\n\n\t}\n\n\n\t/**\n\t * determine display mode and load correct panel\n\t */\n\tfunction checkPanelMode()\n\t{\n\t\tswitch ($this->display_mode)\n\t\t{\n\t\t\tcase \"view\":\n\t\t\t\t$this->displayStatusPanel();\n\t\t\t\tbreak;\n\n\t\t\tcase \"setup\":\n\t\t\t\t$this->displayProcessPanel();\n\t\t\t\tbreak;\n\t\t}\n\t}\n\n\t/**\n\t * display intro page for the first client installation\n\t */\n\tfunction displayStartup()\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.clientsetup.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_INFO\",$this->lng->txt(\"info_text_first_client\"));\n\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt(\"setup_first_client\"));\n\n\t\t$this->displayProcessPanel();\n\n\t\t$this->setButtonNext(\"ini\");\n\t}\n\n\t////\n\t//// DISPLAY DATABASE\n\t////\n\n\t/**\n\t * display database form and process form input\n\t */\n\tfunction displayDatabase()\n\t{\n\t\tglobal $ilErr,$ilDB,$ilLog;\n\n\t\t$this->checkDisplayMode(\"setup_database\");\n\n\t\t// database is intalled\n\t\tif ($this->setup->getClient()->getDBSetup()->isDatabaseInstalled())\n\t\t{\n\t\t\t$this->setDbSubTabs(\"db\");\n\n\t\t\t$ilDB = $this->setup->getClient()->getDB();\n\t\t\t$this->lng->setDbHandler($ilDB);\n\t\t\tinclude_once \"./Services/Database/classes/class.ilDBUpdate.php\";\n\t\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t\t$db_status = $dbupdate->getDBVersionStatus();\n\t\t\t$hotfix_available = $dbupdate->hotfixAvailable();\n\t\t\t$custom_updates_available = $dbupdate->customUpdatesAvailable();\n\t\t\t$this->initClientDbForm(false, $dbupdate, $db_status, $hotfix_available, $custom_updates_available);\n\t\t\t$this->getClientDbFormValues($dbupdate);\n\t\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\t\tif ($db_status)\n\t\t\t{\n\t\t\t\t$this->setButtonNext(\"lang\");\n\t\t\t}\n\t\t}\n\t\telse\t// database is not installed\n\t\t{\n\t\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_db\").\"<br />\".\n\t\t\t\t\"<p><code>CREATE DATABASE &lt;your_db&gt; CHARACTER SET utf8 COLLATE &lt;your_collation&gt;</code></p>\".\n\t\t\t\t\"<p><b>\".$this->lng->txt(\"info_text_db2\").\"</b></p><br/>\");\n\n\t\t\t$this->initClientDbForm();\n\t\t\t$this->getClientDbFormValues();\n\t\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t\t\t$this->setButtonPrev(\"ini\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\n\t\t$this->displaySubTabs();\n\t}\n\n\n\tprotected function displayCache() {\n\t\trequire_once('Services/Form/classes/class.ilPropertyFormGUI.php');\n\t\trequire_once('Services/GlobalCache/classes/class.ilGlobalCache.php');\n\t\trequire_once('./Services/GlobalCache/classes/Settings/class.ilGlobalCacheSettings.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\t\t/**\n\t\t * @var $ini ilIniFile\n\t\t */\n\n\t\t$ilGlobalCacheSettings = new ilGlobalCacheSettings();\n\t\t$ilGlobalCacheSettings->readFromIniFile($this->setup->getClient()->ini);\n\n\t\t$cache_form = new ilPropertyFormGUI();\n\t\t$cache_form->setTitle($this->lng->txt('global_cache_configuration'));\n\t\t$cache_form->addCommandButton('saveCache', $this->lng->txt('save'));\n\t\t$cache_form->setFormAction('setup.php?cmd=gateway');\n\n\t\t$some_inactive = false;\n\t\t$message = '';\n\t\t$service_type = new ilRadioGroupInputGUI($this->lng->txt('global_cache_service_type'), 'global_cache_service_type');\n\n\t\t$option = new ilRadioOption($this->lng->txt('none'), - 1);\n\t\t$service_type->addOption($option);\n\n\t\tforeach (ilGlobalCache::getAllTypes() as $type) {\n\t\t\t$option = new ilRadioOption($this->lng->txt('global_cache_service_type_' . $type->getServiceType()), $type->getServiceType());\n\t\t\t$option->setInfo($this->lng->txt('global_cache_install_info_' . $type->getServiceType()));\n\t\t\tif (! $type->isCacheServiceInstallable()) {\n\t\t\t\t$option->setDisabled(true);\n\t\t\t\t$message .= $this->lng->txt('global_cache_service_type_' . $type->getServiceType()) . ': ' . $type->getInstallationFailureReason()\n\t\t\t\t\t. '; ';\n\t\t\t\t$some_inactive = true;\n\t\t\t}\n\t\t\t$service_type->addOption($option);\n\t\t}\n\n\t\tif ($some_inactive) {\n\t\t\t$service_type->setAlert($message);\n\t\t\tilUtil::sendInfo($this->lng->txt('global_cache_supported_services'));\n\t\t}\n\n\t\t$service_type->setValue($ilGlobalCacheSettings->isActive() ? $ilGlobalCacheSettings->getService() : - 1);\n\t\t$cache_form->addItem($service_type);\n\t\tif ($ilGlobalCacheSettings->isActive()) {\n\n\t\t\t$h = new ilFormSectionHeaderGUI();\n\t\t\t$h->setTitle($this->lng->txt('cache_activated_components'));\n\t\t\t$cache_form->addItem($h);\n\n\t\t\tforeach (ilGlobalCache::getAvailableComponents() as $comp) {\n\t\t\t\t$cc = new ilCheckboxInputGUI($this->lng->txt('cache_activate_' . $comp), 'activate[' . $comp . ']');\n\t\t\t\t$cc->setChecked($ilGlobalCacheSettings->isComponentActivated($comp));\n\t\t\t\t$cache_form->addItem($cc);\n\t\t\t}\n\n\t\t\t$cc = new ilCheckboxInputGUI($this->lng->txt('cache_activate_all' ), 'activate[all]');\n\t\t\t$cc->setChecked($ilGlobalCacheSettings->areAllComponentActivated());\n\t\t\t$cache_form->addItem($cc);\n\t\t}\n\n\t\t$table_html = '';\n\t\trequire_once('./Services/UIComponent/Toolbar/classes/class.ilToolbarGUI.php');\n\t\trequire_once('./Services/UIComponent/Button/classes/class.ilLinkButton.php');\n\t\t$ilToolbarGUI = new ilToolbarGUI();\n\t\tif ($ilGlobalCacheSettings->isActive()) {\n\t\t\t$b = ilLinkButton::getInstance();\n\t\t\t$b->setCaption('cache_flush');\n\t\t\t$b->setUrl('setup.php?cmd=flushCache');\n\t\t\t$ilToolbarGUI->addButtonInstance($b);\n\t\t}\n\n\t\tif ($ilGlobalCacheSettings->getService() == ilGlobalCache::TYPE_MEMCACHED) {\n\t\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerTableGUI.php');\n\t\t\t$b = ilLinkButton::getInstance();\n\t\t\t$b->setCaption('memcache_add');\n\t\t\t$b->setUrl('setup.php?cmd=addMemcacheServer');\n\t\t\t$ilToolbarGUI->addButtonInstance($b);\n\t\t\t$ilMemcacheServerTableGUI = new ilMemcacheServerTableGUI(NULL);\n\t\t\t$table_html = $ilMemcacheServerTableGUI->getHTML();\n\t\t}\n\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilToolbarGUI->getHTML() . $cache_form->getHTML() . $table_html);\n\t}\n\n\n\tprotected function flushCache() {\n\t\trequire_once('Services/GlobalCache/classes/class.ilGlobalCache.php');\n\t\tilGlobalCache::flushAll();\n\t\tilUtil::redirect('setup.php?cmd=cache');\n\t}\n\n\n\tprotected function addMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerFormGUI.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\t\t$ilMemcacheServerFormGUI = new ilMemcacheServerFormGUI(new ilMemcacheServer());\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilMemcacheServerFormGUI->getHTML());\n\t}\n\n\n\tprotected function createMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerFormGUI.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\t\t$ilMemcacheServerFormGUI = new ilMemcacheServerFormGUI(new ilMemcacheServer());\n\t\t$ilMemcacheServerFormGUI->setValuesByPost();\n\t\tif ($ilMemcacheServerFormGUI->saveObject()) {\n\t\t\tilUtil::redirect('setup.php?cmd=cache');\n\t\t}\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilMemcacheServerFormGUI->getHTML());\n\t}\n\n\n\tprotected function editMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerFormGUI.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\t\t$ilMemcacheServerFormGUI = new ilMemcacheServerFormGUI(ilMemcacheServer::find($_GET['mcsid']));\n\t\t$ilMemcacheServerFormGUI->fillForm();\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilMemcacheServerFormGUI->getHTML());\n\t}\n\n\n\tprotected function updateMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServerFormGUI.php');\n\t\t$this->checkDisplayMode('setup_cache');\n\n\t\t$ilMemcacheServerFormGUI = new ilMemcacheServerFormGUI(ilMemcacheServer::find($_GET['mcsid']));\n\t\t$ilMemcacheServerFormGUI->setValuesByPost();\n\t\tif ($ilMemcacheServerFormGUI->saveObject()) {\n\t\t\tilUtil::redirect('setup.php?cmd=cache');\n\t\t}\n\t\t$this->tpl->setVariable('SETUP_CONTENT', $ilMemcacheServerFormGUI->getHTML());\n\t}\n\n\n\tprotected function deleteMemcacheServer() {\n\t\trequire_once('./Services/GlobalCache/classes/Memcache/class.ilMemcacheServer.php');\n\t\t$ilMemcacheServer = ilMemcacheServer::find($_GET['mcsid']);\n\t\t$ilMemcacheServer->delete();\n\t\tilUtil::redirect('setup.php?cmd=cache');\n\t}\n\n\n\tpublic function saveCache() {\n\t\t/**\n\t\t * @var $ini ilIniFile\n\t\t */\n\t\trequire_once('Services/GlobalCache/classes/class.ilGlobalCache.php');\n\t\trequire_once('./Services/GlobalCache/classes/Settings/class.ilGlobalCacheSettings.php');\n\t\tilGlobalCache::flushAll();\n\t\t$ini = $this->setup->getClient()->ini;\n\n\t\t$ilGlobalCacheSettings = new ilGlobalCacheSettings();\n\t\t$ilGlobalCacheSettings->readFromIniFile($ini);\n\t\t$service_type = $_POST['global_cache_service_type'];\n\t\t$ilGlobalCacheSettings->setActive(($service_type >= 0) ? true : false);\n\t\t$ilGlobalCacheSettings->setService($service_type);\n\t\t$ilGlobalCacheSettings->resetActivatedComponents();\n\t\tif (is_array($_POST['activate']) && count($_POST['activate']) > 0) {\n\t\t\tforeach ($_POST['activate'] as $comp => $a) {\n\t\t\t\tif ($comp == 'all') {\n\t\t\t\t\t$ilGlobalCacheSettings->activateAll();\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t$ilGlobalCacheSettings->addActivatedComponent($comp);\n\t\t\t}\n\t\t}\n\n\t\t$ilGlobalCacheSettings->writeToIniFile($ini);\n\n\t\tilUtil::sendSuccess($this->lng->txt('saved_successfully'), true);\n\t\tilUtil::redirect('setup.php?cmd=cache');\n\t}\n\n\n\t/**\n\t * Display database slave\n\t */\n\tfunction displayDatabaseSlave($a_from_save = false)\n\t{\n\t\tglobal $ilErr,$ilDB,$ilLog;\n\n\t\t$this->checkDisplayMode(\"setup_database\");\n\n\t\t//$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.clientsetup_db.html\", \"setup\");\n\n\t\t// database is intalled\n\t\tif (!$this->setup->getClient()->db_installed)\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$this->setDbSubTabs(\"repl\");\n\n\t\tif (!$a_from_save)\n\t\t{\n\t\t\t$ilDB = $this->setup->getClient()->db;\n\t\t\t$this->lng->setDbHandler($ilDB);\n\t\t}\n\n\t\tilUtil::sendInfo($this->lng->txt(\"mysql_replication_info_alpha\"));\n\n\t\tif (!$a_from_save)\n\t\t{\n\t\t\t$this->initDbSlaveForm();\n\t\t}\n\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\t$this->checkPanelMode();\n\n\t\t$this->displaySubTabs();\n\t}\n\n\t/**\n\t * Init db slave form\n\t */\n\tpublic function initDbSlaveForm()\n\t{\n\t\tglobal $lng, $ilCtrl, $ilDB;\n\n\t\t$client = $this->setup->getClient();\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// db type\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"db_type\"), \"slave_type\");\n\t\t$ne->setValue($lng->txt(\"db_\".$ilDB->getDbType()));\n\t\t$this->form->addItem($ne);\n\n\t\t// activate slave\n\t\t$act = new ilCheckboxInputGUI($this->lng->txt(\"db_active\"), \"slave_active\");\n\t\t$act->setChecked($client->getDbSlaveActive());\n\t\t$this->form->addItem($act);\n\n\t\t// slave host\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_host\"), \"slave_host\");\n\t\t$ti->setValue($client->getDbSlaveHost());\n\t\t$ti->setMaxLength(120);\n\t\t$ti->setRequired(true);\n\t\t$act->addSubItem($ti);\n\n\t\t// slave name\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_name\"), \"slave_name\");\n\t\t$ti->setValue($client->getDbSlaveName());\n\t\t$ti->setRequired(true);\n\t\t$ti->setMaxLength(40);\n\t\t$act->addSubItem($ti);\n\n\t\t// slave user\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_user\"), \"slave_user\");\n\t\t$ti->setValue($client->getDbSlaveUser());\n\t\t$ti->setMaxLength(40);\n\t\t$ti->setRequired(true);\n\t\t$act->addSubItem($ti);\n\n\t\t// slave port\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_port\"), \"slave_port\");\n\t\t$ti->setValue($client->getDbSlavePort());\n\t\t$ti->setMaxLength(8);\n\t\t$act->addSubItem($ti);\n\n\t\t// set password\n\t\t$set_pw = new ilCheckboxInputGUI($this->lng->txt(\"db_set_password\"), \"set_slave_password\");\n\t\t$act->addSubItem($set_pw);\n\n\t\t// slave password\n\t\t$ti = new ilTextInputGUI($lng->txt(\"db_pass\"), \"slave_pass\");\n\t\t$ti->setMaxLength(40);\n\t\t$set_pw->addSubItem($ti);\n\n\t\t$this->form->addCommandButton(\"saveDbSlave\", $lng->txt(\"save\"));\n\n\t\t$this->form->setTitle($lng->txt(\"db_slave_settings\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t * Save db slave form\n\t */\n\tpublic function saveDbSlave()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl, $ilDB;\n\n\t\t$client = $this->setup->getClient();\n\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$this->lng->setDbHandler($ilDB);\n\n\t\t$this->initDbSlaveForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t$client->setDbSlaveActive($this->form->getInput(\"slave_active\"));\n\t\t\tif ($this->form->getInput(\"slave_active\"))\n\t\t\t{\n\t\t\t\t$client->setDbSlaveHost($this->form->getInput(\"slave_host\"));\n\t\t\t\t$client->setDbSlaveUser($this->form->getInput(\"slave_user\"));\n\t\t\t\t$client->setDbSlavePort($this->form->getInput(\"slave_port\"));\n\t\t\t\t$client->setDbSlaveName($this->form->getInput(\"slave_name\"));\n\t\t\t\tif ($this->form->getInput(\"set_slave_password\"))\n\t\t\t\t{\n\t\t\t\t\t$client->setDbSlavePass($this->form->getInput(\"slave_pass\"));\n\t\t\t\t}\n\t\t\t}\n\t\t\t$client->writeIni();\n\n\t\t\tilUtil::sendSuccess($lng->txt(\"saved_successfully\"), true);\n\t\t\tilUtil::redirect(\"setup.php?cmd=dbslave\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->form->setValuesByPost();\n\t\t\t$this->displayDatabaseSlave(true);\n\t\t}\n\t}\n\n\n\t/**\n\t * Set db subtabs\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction setDbSubtabs($a_subtab_id = \"db\")\n\t{\n\t\tglobal $ilDB;\n\n\t\tif ($ilDB->getDbType() == \"mysql\")\n\t\t{\n\t\t\t$this->tabs->addSubTab(\"db\", $this->lng->txt(\"db_master\"), \"setup.php?client_id=\".$this->client_id.\"&cmd=db\");\n\t\t\t$this->tabs->addSubTab(\"repl\", $this->lng->txt(\"db_slave\"), \"setup.php?client_id=\".$this->client_id.\"&cmd=dbslave\");\n\t\t}\n\n\t\t$this->tabs->activateSubTab($a_subtab_id);\n\t}\n\n\n\n\t/**\n\t* Init client db form.\n\t*/\n\tpublic function initClientDbForm($a_install = true, $dbupdate = null, $db_status = false, $hotfix_available = false, $custom_updates_available = false)\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// type\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"db_type\"), \"db_type\");\n\t\t$this->form->addItem($ne);\n\n\t\t// version\n\t\tif ($this->setup->getClient()->getDBSetup()->isDatabaseInstalled()\n\t\t    && in_array($this->setup->getClient()->getDbType(), array(\n\t\t\t\tilDBConstants::TYPE_MYSQL,\n\t\t\t\tilDBConstants::TYPE_INNODB,\n\t\t\t))\n\t\t) {\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"version\"), \"db_version\");\n\t\t\t$ilDB = $this->setup->getClient()->db;\n\t\t\t$ne->setValue($ilDB->getDBVersion());\n\t\t\t$this->form->addItem($ne);\n\t\t}\n\n\t\t// host\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"host\"), \"db_host\");\n\t\t$this->form->addItem($ne);\n\n\t\t// name\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"name\"), \"db_name\");\n\t\t$this->form->addItem($ne);\n\n\t\t// user\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"user\"), \"db_user\");\n\t\t$this->form->addItem($ne);\n\n\t\t// port\n\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"port\"), \"db_port\");\n\t\t$this->form->addItem($ne);\n\n\t\t// creation / collation for mysql\n\t\tif ((in_array($this->setup->getClient()->getDBType(), ilDBConstants::getInstallableTypes()) && $a_install))\n\t\t{\n\t\t\t// create database \n\t\t\t$cb = new ilCheckboxInputGUI($lng->txt(\"database_create\"), \"chk_db_create\");\n\n\t\t\t\t// collation\n\t\t\t\t$collations = array\n\t\t\t\t(\n\t\t\t\t\t\"utf8_unicode_ci\",\n\t\t\t\t\t\"utf8_general_ci\",\n\t\t\t\t\t\"utf8_czech_ci\",\n\t\t\t\t\t\"utf8_danish_ci\",\n\t\t\t\t\t\"utf8_estonian_ci\",\n\t\t\t\t\t\"utf8_icelandic_ci\",\n\t\t\t\t\t\"utf8_latvian_ci\",\n\t\t\t\t\t\"utf8_lithuanian_ci\",\n\t\t\t\t\t\"utf8_persian_ci\",\n\t\t\t\t\t\"utf8_polish_ci\",\n\t\t\t\t\t\"utf8_roman_ci\",\n\t\t\t\t\t\"utf8_romanian_ci\",\n\t\t\t\t\t\"utf8_slovak_ci\",\n\t\t\t\t\t\"utf8_slovenian_ci\",\n\t\t\t\t\t\"utf8_spanish2_ci\",\n\t\t\t\t\t\"utf8_spanish_ci\",\n\t\t\t\t\t\"utf8_swedish_ci\",\n\t\t\t\t\t\"utf8_turkish_ci\"\n\t\t\t\t);\n\t\t\t\tforeach($collations as $collation)\n\t\t\t\t{\n\t\t\t\t\t$options[$collation] = $collation;\n\t\t\t\t}\n\t\t\t\t$si = new ilSelectInputGUI($lng->txt(\"collation\"), \"collation\");\n\t\t\t\t$si->setOptions($options);\n\t\t\t\t$si->setInfo($this->lng->txt(\"info_text_db_collation2\").\" \".\n\t\t\t\t\t\"<a target=\\\"_new\\\" href=\\\"http://dev.mysql.com/doc/mysql/en/charset-unicode-sets.html\\\">\".\n\t\t\t\t\t\" MySQL Reference Manual :: 10.11.1 Unicode Character Sets</a>\");\n\t\t\t\t$cb->addSubItem($si);\n\n\t\t\t$this->form->addItem($cb);\n\t\t}\n\n\t\tif ($a_install)\n\t\t{\n\t\t\t$this->form->addCommandButton(\"installDatabase\", $lng->txt(\"database_install\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$ilDB = $this->setup->getClient()->db;\n\t\t\t$this->lng->setDbHandler($ilDB);\n\t\t\t$dbupdate = new ilDBUpdate($ilDB);\n\n\t\t\t// database version\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"database_version\"), \"curv\");\n\t\t\t$ne->setValue($dbupdate->currentVersion);\n\t\t\t$this->form->addItem($ne);\n\n\t\t\t// file version\n\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"file_version\"), \"filev\");\n\t\t\t$ne->setValue($dbupdate->fileVersion);\n\t\t\t$this->form->addItem($ne);\n\n\t\t\tif (!$db_status = $dbupdate->getDBVersionStatus())\n\t\t\t{\n\t\t\t\t// next update step\n\t\t\t\t$options = array();\n\t\t\t\tfor ($i = $dbupdate->currentVersion + 1; $i <= $dbupdate->fileVersion; $i++)\n\t\t\t\t{\n\t\t\t\t\t$options[$i] = $i;\n\t\t\t\t}\n\t\t\t\tif (count($options) > 1)\n\t\t\t\t{\n\t\t\t\t\t$si = new ilSelectInputGUI($lng->txt(\"next_update_break\"), \"update_break\");\n\t\t\t\t\t$si->setOptions($options);\n\t\t\t\t\t$si->setInfo($lng->txt(\"next_update_break_info\"));\n\t\t\t\t\t$this->form->addItem($si);\n\t\t\t\t}\n\n\t\t\t\tif ($dbupdate->getRunningStatus() > 0)\n\t\t\t\t{\n\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"db_update_interrupted\").\" (Step \".$dbupdate->getRunningStatus().\") <br /><br />\".\n\t\t\t\t\t\t$this->lng->txt(\"db_update_interrupted_avoid\"));\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\tilUtil::sendInfo($this->lng->txt(\"database_needs_update\"));\n\t\t\t\t}\n\t\t\t\t$this->form->addCommandButton(\"updateDatabase\", $lng->txt(\"database_update\"));\n\t\t\t\t$this->form->addCommandButton(\"showUpdateSteps\", $lng->txt(\"show_update_steps\"));\n\t\t\t}\n\t\t\telse if ($hotfix_available)\n\t\t\t{\n\t\t\t\t// hotfix current version\n\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"applied_hotfixes\"), \"curhf\");\n\t\t\t\t$ne->setValue($dbupdate->getHotfixCurrentVersion());\n\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t// hotfix file version\n\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"available_hotfixes\"), \"filehf\");\n\t\t\t\t$ne->setValue($dbupdate->getHotfixFileVersion());\n\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t$this->form->addCommandButton(\"applyHotfix\", $lng->txt(\"apply_hotfixes\"));\n\t\t\t\t$this->form->addCommandButton(\"showHotfixSteps\", $lng->txt(\"show_update_steps\"));\n\t\t\t\tilUtil::sendInfo($this->lng->txt(\"database_needs_update\"));\n\t\t\t}\n\t\t\telseif($custom_updates_available)\n\t\t\t{\n\t\t\t\t// custom updates current version\n\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"applied_custom_updates\"), \"curcu\");\n\t\t\t\t$ne->setValue($dbupdate->getCustomUpdatesCurrentVersion());\n\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t// custom updates file version\n\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"available_custom_updates\"), \"filecu\");\n\t\t\t\t$ne->setValue($dbupdate->getCustomUpdatesFileVersion());\n\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t$this->form->addCommandButton(\"applyCustomUpdates\", $lng->txt(\"apply_custom_updates\"));\n\t\t\t\tilUtil::sendInfo($this->lng->txt(\"database_needs_update\"));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tif ($dbupdate->getHotfixFileVersion() > 0)\n\t\t\t\t{\n\t\t\t\t\t// hotfix current version\n\t\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"applied_hotfixes\"), \"curhf\");\n\t\t\t\t\t$ne->setValue($dbupdate->getHotfixCurrentVersion());\n\t\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t\t// hotfix file version\n\t\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"available_hotfixes\"), \"filehf\");\n\t\t\t\t\t$ne->setValue($dbupdate->getHotfixFileVersion());\n\t\t\t\t\t$this->form->addItem($ne);\n\t\t\t\t}\n\t\t\t\tif ($dbupdate->getCustomUpdatesFileVersion() > 0)\n\t\t\t\t{\n\t\t\t\t\t// custom updates current version\n\t\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"applied_custom_updates\"), \"curcu\");\n\t\t\t\t\t$ne->setValue($dbupdate->getCustomUpdatesCurrentVersion());\n\t\t\t\t\t$this->form->addItem($ne);\n\n\t\t\t\t\t// custom updates file version\n\t\t\t\t\t$ne = new ilNonEditableValueGUI($lng->txt(\"available_custom_updates\"), \"filecu\");\n\t\t\t\t\t$ne->setValue($dbupdate->getCustomUpdatesFileVersion());\n\t\t\t\t\t$this->form->addItem($ne);\n\t\t\t\t}\n\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"database_is_uptodate\"));\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setTitle($lng->txt(\"database\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t* Get current values for client db from\n\t*\n\t*/\n\tpublic function getClientDbFormValues($dbupdate = null)\n\t{\n\t\t$values = array();\n\t\t$values[\"db_host\"] = $this->setup->getClient()->getDbHost();\n\t\t$values[\"db_name\"] = $this->setup->getClient()->getDbName();\n\t\t$values[\"db_user\"] = $this->setup->getClient()->getDbUser();\n\t\t$values[\"db_port\"] = $this->setup->getClient()->getDbPort();\n\t\t$values[\"db_type\"] = ilDBConstants::describe($this->setup->getClient()->getDbType());\n\t\tif (is_object($dbupdate))\n\t\t{\n\t\t\t$values[\"update_break\"] = $dbupdate->fileVersion;\n\t\t\tif (($dbupdate->fileVersion - $dbupdate->currentVersion) >= 200)\n\t\t\t{\n\t\t\t\t$values[\"update_break\"] = $dbupdate->currentVersion + 200 -\n\t\t\t\t\t($dbupdate->currentVersion % 100);\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\n\t////\n\t//// INSTALL DATABASE\n\t////\n\n\t/**\n\t * Install the database\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction installDatabase()\n\t{\n\t\tif (!$this->setup->getClient()->getDBSetup()->isDatabaseExisting()) {\n\t\t\tif ($_POST[\"chk_db_create\"]) {\n\t\t\t\tif (!$this->setup->createDatabase($_POST[\"collation\"])) {\n\t\t\t\t\techo \"installation failed\";\n\t\t\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()), true);\n\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tilUtil::sendFailure($this->lng->txt(\"database_not_exists_create_first\"), true);\n\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t\t\t}\n\t\t}\n\t\tif (!$this->setup->installDatabase()) {\n\t\t\tilUtil::sendFailure($this->lng->txt($this->setup->getError()), true);\n\t\t} else {\n\t\t\tilUtil::sendSuccess($this->lng->txt(\"database_installed\"), true);\n\t\t}\n\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t}\n\n\t////\n\t//// UPDATE DATABASE\n\t////\n\n\t/**\n\t * Update database\n\t */\n\tfunction updateDatabase()\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\t$ilCtrlStructureReader->setIniFile($this->setup->getClient()->ini);\n\n\t\tinclude_once \"./Services/Database/classes/class.ilDBUpdate.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacAdmin.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacReview.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacSystem.php\";\n\t\tinclude_once \"./Services/Tree/classes/class.ilTree.php\";\n\t\tinclude_once \"./Services/Xml/classes/class.ilSaxParser.php\";\n\t\tinclude_once \"./Services/Object/classes/class.ilObjectDefinition.php\";\n\n\n\t\t// referencing db handler in language class\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$this->lng->setDbHandler($ilDB);\n\n\t\t// run dbupdate\n\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t$dbupdate->applyUpdate((int) $_POST[\"update_break\"]);\n\n\t\tif ($dbupdate->updateMsg == \"no_changes\")\n\t\t{\n\t\t\t$message = $this->lng->txt(\"no_changes\").\". \".$this->lng->txt(\"database_is_uptodate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sep = \"\";\n\t\t\tforeach ($dbupdate->updateMsg as $row)\n\t\t\t{\n\t\t\t\tif ($row[\"msg\"] == \"update_applied\")\n\t\t\t\t{\n\t\t\t\t\t$a_message.= $sep.$row[\"nr\"];\n\t\t\t\t\t$sep = \", \";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$e_message.= \"<br/>\".$this->lng->txt($row[\"msg\"]).\": \".$row[\"nr\"];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($a_message != \"\")\n\t\t\t{\n\t\t\t\t$a_message = $this->lng->txt(\"update_applied\").\": \".$a_message;\n\t\t\t}\n\t\t}\n\n\t\tilUtil::sendInfo($a_message.$e_message, true);\n\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t}\n\n\t////\n\t//// UPDATE DATABASE\n\t////\n\n\t/**\n\t * Show hotfix steps\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction showHotfixSteps()\n\t{\n\t\t$this->showUpdateSteps(true);\n\t}\n\n\n\t/**\n\t * Update database\n\t */\n\tfunction showUpdateSteps($a_hotfix = false)\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\t$this->checkDisplayMode(\"setup_database\");\n\n\t\t//$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.clientsetup_db.html\", \"setup\");\n\n\t\t// database is intalled\n\t\tif ($this->setup->getClient()->db_installed)\n\t\t{\n\t\t\t$ilDB = $this->setup->getClient()->db;\n\t\t\t$this->lng->setDbHandler($ilDB);\n\t\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t\t$db_status = $dbupdate->getDBVersionStatus();\n\t\t\t$hotfix_available = $dbupdate->hotfixAvailable();\n\t\t\t$custom_updates_available = $dbupdate->customUpdatesAvailable();\n//\t\t\t$this->initClientDbForm(false, $dbupdate, $db_status, $hotfix_available, $custom_updates_available);\n//\t\t\t$this->getClientDbFormValues($dbupdate);\n\n\t\t\t$ntpl = new ilTemplate(\"tpl.setup_steps.html\", true, true, \"setup\");\n\t\t\tif ($a_hotfix)\n\t\t\t{\n\t\t\t\t$ntpl->setVariable(\"CONTENT\", $dbupdate->getHotfixSteps());\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$ntpl->setVariable(\"CONTENT\", $dbupdate->getUpdateSteps($_POST[\"update_break\"]));\n\t\t\t}\n\t\t\t$ntpl->setVariable(\"BACK\", $this->lng->txt(\"back\"));\n\t\t\t$ntpl->setVariable(\"HREF_BACK\", \"./setup.php?client_id=&cmd=db\");\n\t\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $ntpl->get());\n\t\t}\n\t}\n\n\n\t////\n\t//// Apply hotfixes\n\t////\n\n\t/**\n\t * Apply hotfixes\n\t */\n\tfunction applyHotfix()\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\t$ilCtrlStructureReader->setIniFile($this->setup->getClient()->ini);\n\n\t\tinclude_once \"./Services/Database/classes/class.ilDBUpdate.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacAdmin.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacReview.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacSystem.php\";\n\t\tinclude_once \"./Services/Tree/classes/class.ilTree.php\";\n\t\tinclude_once \"./Services/Xml/classes/class.ilSaxParser.php\";\n\t\tinclude_once \"./Services/Object/classes/class.ilObjectDefinition.php\";\n\n\t\t// referencing db handler in language class\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$this->lng->setDbHandler($ilDB);\n\n\t\t// run dbupdate\n\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t$dbupdate->applyHotfix();\n\n\t\tif ($dbupdate->updateMsg == \"no_changes\")\n\t\t{\n\t\t\t$message = $this->lng->txt(\"no_changes\").\". \".$this->lng->txt(\"database_is_uptodate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sep = \"\";\n\t\t\tforeach ($dbupdate->updateMsg as $row)\n\t\t\t{\n\t\t\t\tif ($row[\"msg\"] == \"update_applied\")\n\t\t\t\t{\n\t\t\t\t\t$a_message.= $sep.$row[\"nr\"];\n\t\t\t\t\t$sep = \", \";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$e_message.= \"<br/>\".$this->lng->txt($row[\"msg\"]).\": \".$row[\"nr\"];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($a_message != \"\")\n\t\t\t{\n\t\t\t\t$a_message = $this->lng->txt(\"update_applied\").\": \".$a_message;\n\t\t\t}\n\t\t}\n\n\t\tilUtil::sendInfo($a_message.$e_message, true);\n\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t}\n\n\t////\n\t//// SESSION\n\t////\n\n    /**\n\t * display sessions form and process form input\n\t */\n\tfunction displaySessions()\n\t{\n\t\trequire_once('Services/Authentication/classes/class.ilSessionControl.php');\n\n\t\t$this->checkDisplayMode(\"setup_sessions\");\n\n\t\tif (!$this->setup->getClient()->db_installed)\n\t\t{\n\t\t\t// program should never come to this place\n\t\t\t$message = \"No database found! Please install database first.\";\n\t\t\tilUtil::sendInfo($message);\n\t\t}\n\n\t\t$setting_fields = ilSessionControl::getSettingFields();\n\n\t\t$valid = true;\n\t\t$settings = array();\n\n\t\tforeach( $setting_fields as $field )\n\t\t{\n\t\t\tif( $field == 'session_allow_client_maintenance' )\n\t\t\t{\n\t\t\t\tif( isset($_POST[$field]) )\t\t$_POST[$field] = '1';\n\t\t\t\telse\t\t\t\t\t\t\t$_POST[$field] = '0';\n\t\t\t}\n\n\t\t\tif( isset($_POST[$field]) && $_POST[$field] != '' )\n\t\t\t{\n\t\t\t\t$settings[$field] = $_POST[$field];\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$valid = false;\n\t\t\t\tbreak;\n\t\t\t}\n\n\t\t}\n\n\t\tif($valid) $this->setup->setSessionSettings($settings);\n\n\t\t$settings = $this->setup->getSessionSettings();\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$form = new ilPropertyFormGUI();\n\n\t\tinclude_once 'Services/Authentication/classes/class.ilSession.php';\n\n\t\t// BEGIN SESSION SETTINGS\n\t\t// create session handling radio group\n\t\t$ssettings = new ilRadioGroupInputGUI($this->lng->txt('sess_mode'), 'session_handling_type');\n\t\t$ssettings->setValue($settings['session_handling_type'], ilSession::SESSION_HANDLING_FIXED);\n\n\t\t// first option, fixed session duration\n\t\t$fixed = new ilRadioOption($this->lng->txt('sess_fixed_duration'), ilSession::SESSION_HANDLING_FIXED);\n\n\t\t// add session handling to radio group\n\t\t$ssettings->addOption($fixed);\n\n\t\t// second option, session control\n\t\t$ldsh = new ilRadioOption($this->lng->txt('sess_load_dependent_session_handling'), ilSession::SESSION_HANDLING_LOAD_DEPENDENT);\n\n\t\t// this is the max count of active sessions\n\t\t// that are getting started simlutanously\n\t\t$ti = new ilTextInputGUI($this->lng->txt('sess_max_session_count'), \"session_max_count\");\n\t\t$ti->setInfo($this->lng->txt('sess_max_session_count_info'));\n\t\t$ti->setMaxLength(5);\n\t\t$ti->setSize(5);\n\t\t$ti->setValue($settings['session_max_count']);\n\t\t$ldsh->addSubItem($ti);\n\n\t\t// after this (min) idle time the session can be deleted,\n\t\t// if there are further requests for new sessions,\n\t\t// but max session count is reached yet\n\t\t$ti = new ilTextInputGUI($this->lng->txt('sess_min_session_idle'), \"session_min_idle\");\n\t\t$ti->setInfo($this->lng->txt('sess_min_session_idle_info'));\n\t\t$ti->setMaxLength(5);\n\t\t$ti->setSize(5);\n\t\t$ti->setValue($settings['session_min_idle']);\n\t\t$ldsh->addSubItem($ti);\n\n\t\t// after this (max) idle timeout the session expires\n\t\t// and become invalid, so it is not considered anymore\n\t\t// when calculating current count of active sessions\n\t\t$ti = new ilTextInputGUI($this->lng->txt('sess_max_session_idle'), \"session_max_idle\");\n\t\t$ti->setInfo($this->lng->txt('sess_max_session_idle_info'));\n\t\t$ti->setMaxLength(5);\n\t\t$ti->setSize(5);\n\t\t$ti->setValue($settings['session_max_idle']);\n\t\t$ldsh->addSubItem($ti);\n\n\t\t// this is the max duration that can elapse between the first and the secnd\n\t\t// request to the system before the session is immidietly deleted\n\t\t$ti = new ilTextInputGUI($this->lng->txt('sess_max_session_idle_after_first_request'), \"session_max_idle_after_first_request\");\n\t\t$ti->setInfo($this->lng->txt('sess_max_session_idle_after_first_request_info'));\n\t\t$ti->setMaxLength(5);\n\t\t$ti->setSize(5);\n\t\t$ti->setValue($settings['session_max_idle_after_first_request']);\n\t\t$ldsh->addSubItem($ti);\n\n\t\t// add session control to radio group\n\t\t$ssettings->addOption($ldsh);\n\n\t\t$form->addItem($ssettings);\n\n\t\t// controls the ability t maintenance the following\n\t\t// settings in client administration\n\t\t$chkb = new ilCheckboxInputGUI($this->lng->txt('sess_allow_client_maintenance'), \"session_allow_client_maintenance\");\n\t\t$chkb->setInfo($this->lng->txt('sess_allow_client_maintenance_info'));\n\t\t$chkb->setChecked($settings['session_allow_client_maintenance'] ? true : false);\n\t\t$form->addItem($chkb);\n\t\t// END SESSION SETTINGS\n\n\t\t// save and cancel commands\n\t\t$form->addCommandButton(\"sess\", $this->lng->txt('save'));\n\n\t\t$form->setTitle($this->lng->txt(\"sess_sessions\"));\n\t\t$form->setFormAction('setup.php?client_id='.$this->client_id.'&cmd=sess');\n\n\t\t$this->tpl->setVariable(\"TXT_SETUP_TITLE\",ucfirst(trim($this->lng->txt('sess_sessions'))));\n\t\t$this->tpl->setVariable(\"TXT_INFO\", '');\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $form->getHTML());\n\n\t\t/*$this->setButtonPrev(\"db\");\n\n\t\tif($this->setup->checkClientSessionSettings($this->client,true))\n\t\t{\n\t\t\t$this->setButtonNext(\"lang\");\n\t\t}*/\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t////\n\t//// LANGUAGES\n\t////\n\n\t/**\n\t * display language form and process form input\n\t */\n\tfunction displayLanguages()\n\t{\n\t\t$this->checkDisplayMode(\"setup_languages\");\n\n\t\tif (!$this->setup->getClient()->db_installed)\n\t\t{\n\t\t\t// program should never come to this place\n\t\t\t$message = \"No database found! Please install database first.\";\n\t\t\tilUtil::sendFailure($message);\n\t\t}\n\n\t\tinclude_once(\"./setup/classes/class.ilSetupLanguageTableGUI.php\");\n\t\t$tab = new ilSetupLanguageTableGUI($this->setup->getClient());\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $tab->getHTML());\n\n\t\t$this->tpl->setVariable(\"TXT_SETUP_TITLE\",ucfirst(trim($this->lng->txt(\"setup_languages\"))));\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_lang\"));\n\n\t\t$installed_langs = $this->lng->getInstalledLanguages();\n\t\t$lang_count = count($installed_langs);\n\t\tif ($lang_count > 0)\n\t\t{\n\t\t\t$this->setup->getClient()->status[\"lang\"][\"status\"] = true;\n\t\t\t$this->setup->getClient()->status[\"lang\"][\"comment\"] = $lang_count.\" \".$this->lng->txt(\"languages_installed\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->setup->getClient()->status[\"lang\"][\"status\"] = false;\n\t\t\t$this->setup->getClient()->status[\"lang\"][\"comment\"] = $this->lng->txt(\"lang_none_installed\");\n\t\t}\n\n\t\t$this->setButtonPrev(\"lang\");\n\n\t\tif ($lang_count > 0)\n\t\t{\n\t\t\t$this->setButtonNext(\"contact\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Save languages\n\t *\n\t * @param\n\t * @return\n\t */\n\tfunction saveLanguages()\n\t{\n\t\tif (empty($_POST[\"form\"][\"lang_id\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"lang_min_one_language\"), true);\n\t\t\tilUtil::redirect(\"setup.php?cmd=lang\");\n\t\t}\n\n\t\tif (!in_array($_POST[\"form\"][\"lang_default\"],$_POST[\"form\"][\"lang_id\"]))\n\t\t{\n\t\t\tilUtil::sendFailure($this->lng->txt(\"lang_not_installed_default\"), true);\n\t\t\tilUtil::redirect(\"setup.php?cmd=lang\");\n\t\t}\n\n\t\t$result = $this->lng->installLanguages($_POST[\"form\"][\"lang_id\"], $_POST[\"form\"][\"lang_local\"]);\n\n\t\tif (is_array($result))\n\t\t{\n\t\t\t$count = count($result);\n\t\t\t$txt = \"tet\";\n\n\t\t\tforeach ($result as $key => $lang_key)\n\t\t\t{\n\t\t\t\t$list .= $this->lng->txt(\"lang_\".$lang_key);\n\n\t\t\t\tif ($count > $key + 1)\n\t\t\t\t{\n\t\t\t\t\t$list .= \", \";\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t$this->setup->getClient()->setDefaultLanguage($_POST[\"form\"][\"lang_default\"]);\n\t\t$message = $this->lng->txt(\"languages_installed\");\n\n\t\tif ($result !== true)\n\t\t{\n\t\t\t$message .= \"<br/>(\".$this->lng->txt(\"langs_not_valid_not_installed\").\": \".$list.\")\";\n\t\t}\n\t\tilUtil::sendInfo($message, true);\n\t\tilUtil::redirect(\"setup.php?cmd=lang\");\n\t}\n\n\t////\n\t//// CONTACT DATA\n\t////\t\n\n\t/**\n\t * display contact data form and process form input\n\t */\n\tfunction displayContactData($a_omit_init = false)\n\t{\n\t\t$this->checkDisplayMode(\"setup_contact_data\");\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\tif (!$a_omit_init)\n\t\t{\n\t\t\t$this->initContactDataForm();\n\t\t\t$this->getContactValues();\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_contact\"));\n\t\t$this->setButtonPrev(\"lang\");\n\n\t\t$check = $this->setup->checkClientContact($this->setup->client);\n\n\t\t$this->setup->getClient()->status[\"contact\"][\"status\"] = $check[\"status\"];\n\t\t$this->setup->getClient()->status[\"contact\"][\"comment\"] = $check[\"comment\"];\n\n\t\tif ($check[\"status\"])\n\t\t{\n\t\t\t$this->setButtonNext(\"proxy\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Init contact data form.\n\t *\n\t * @param        int        $a_mode        Edit Mode\n\t */\n\tpublic function initContactDataForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// name\n\t\t$ti = new ilTextInputGUI($lng->txt(\"name\"), \"inst_name\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// description\n\t\t$ti = new ilTextInputGUI($lng->txt(\"client_info\"), \"inst_info\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$this->form->addItem($ti);\n\n\t\t// institution\n\t\t$ti = new ilTextInputGUI($lng->txt(\"client_institution\"), \"inst_institution\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$this->form->addItem($ti);\n\n\t\t// contact data\n\t\t$sh = new ilFormSectionHeaderGUI();\n\t\t$sh->setTitle($lng->txt(\"contact_data\"));\n\t\t$this->form->addItem($sh);\n\n\t\t// first name\n\t\t$ti = new ilTextInputGUI($lng->txt(\"firstname\"), \"admin_firstname\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// last name\n\t\t$ti = new ilTextInputGUI($lng->txt(\"lastname\"), \"admin_lastname\");\n\t\t$ti->setMaxLength(64);\n\t\t$ti->setSize(30);\n\t\t$ti->setRequired(true);\n\t\t$this->form->addItem($ti);\n\n\t\t$fs = array (\n\t\t\t\"title\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"position\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"institution\" => array(\"max\" => 200, \"size\" => 30),\n\t\t\t\"street\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"zipcode\" => array(\"max\" => 10, \"size\" => 5),\n\t\t\t\"city\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"country\" => array(\"max\" => 64, \"size\" => 30),\n\t\t\t\"phone\" => array(\"max\" => 64, \"size\" => 30)\n\t\t\t);\n\t\tforeach ($fs as $f => $op)\n\t\t{\n\t\t\t// field\n\t\t\t$ti = new ilTextInputGUI($lng->txt($f), \"admin_\".$f);\n\t\t\t$ti->setMaxLength($op[\"max\"]);\n\t\t\t$ti->setSize($op[\"size\"]);\n\t\t\t$ti->setInfo($lng->txt(\"\"));\n\t\t\t$this->form->addItem($ti);\n\t\t}\n\n\t\t// email\n\t\t$ti = new ilEmailInputGUI($lng->txt(\"email\"), \"admin_email\");\n\t\t$ti->setRequired(true);\n\t\t$ti->allowRFC822(true);\n\t\t$this->form->addItem($ti);\n\n\t\t// feedback recipient\n\t\t/*$ti = new ilEmailInputGUI($lng->txt(\"feedback_recipient\"), \"feedback_recipient\");\n\t\t$ti->setInfo($lng->txt(\"feedback_recipient_info\"));\n\t\t$ti->setRequired(true);\n\t\t$ti->allowRFC822(true);\n\t\t$this->form->addItem($ti);*/\n\n\t\t// error recipient\n\t\t/*$ti = new ilEmailInputGUI($lng->txt(\"error_recipient\"), \"error_recipient\");\n\t\t$ti->allowRFC822(true);\n\t\t$this->form->addItem($ti);*/\n\n\t\t$this->form->addCommandButton(\"saveContact\", $lng->txt(\"save\"));\n\n\t\t$this->form->setTitle($lng->txt(\"client_data\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t * Get current values for contact from\n\t */\n\tpublic function getContactValues()\n\t{\n\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\t$values = $settings;\n\n\t\t$values[\"inst_name\"] = ($this->setup->getClient()->getName())\n\t\t\t? $this->setup->getClient()->getName()\n\t\t\t: $this->setup->getClient()->getId();\n\t\t$values[\"inst_info\"] = $this->setup->getClient()->getDescription();\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\n\t/**\n\t * Save contact form\n\t */\n\tpublic function saveContact()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl;\n\n\t\t$this->initContactDataForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t$this->setup->getClient()->setSetting(\"admin_firstname\", $_POST[\"admin_firstname\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_lastname\", $_POST[\"admin_lastname\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_title\", $_POST[\"admin_title\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_position\", $_POST[\"admin_position\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_institution\", $_POST[\"admin_institution\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_street\", $_POST[\"admin_street\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_zipcode\", $_POST[\"admin_zipcode\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_city\", $_POST[\"admin_city\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_country\", $_POST[\"admin_country\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_phone\", $_POST[\"admin_phone\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"admin_email\", $_POST[\"admin_email\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"inst_institution\", $_POST[\"inst_institution\"]);\n\t\t\t$this->setup->getClient()->setSetting(\"inst_name\", $_POST[\"inst_name\"]);\n\t\t\t//$this->setup->getClient()->setSetting(\"feedback_recipient\", $_POST[\"feedback_recipient\"]);\n\t\t\t//$this->setup->getClient()->setSetting(\"error_recipient\", $_POST[\"error_recipient\"]);\n\n\t\t\t// update client.ini\n\t\t\t$this->setup->getClient()->setName($_POST[\"inst_name\"]);\n\t\t\t$this->setup->getClient()->setDescription($_POST[\"inst_info\"]);\n\t\t\t$this->setup->getClient()->ini->write();\n\n\t\t\tilUtil::sendSuccess($this->lng->txt(\"settings_saved\"), true);\n\t\t\tilUtil::redirect(\"setup.php?cmd=displayContactData\");\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayContactData(true);\n\t}\n\n\t//// \n\t//// NIC Registration\n\t////  \n\n\t/**\n\t * display nic registration form and process form input\n\t */\n\tfunction displayNIC($a_omit_init = false)\n\t{\n\t\t$this->checkDisplayMode(\"nic_registration\");\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\t\t$nic_key = $this->setup->getClient()->getNICkey();\n\n\t\t// reload settings\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n//var_dump($settings);\n\t\tif ($settings[\"nic_enabled\"] == \"1\" && $settings[\"inst_id\"] > 0)\n\t\t{\n\t\t\t$this->no_second_nav = true;\n\t\t\t$this->tpl->setVariable(\"TXT_INFO\",$this->lng->txt(\"info_text_nic3\").\" \".$settings[\"inst_id\"].\".\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t// reload settings\n\t\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_nic\"));\n\t\t\tif (!$a_omit_init)\n\t\t\t{\n\t\t\t\t$this->initRegistrationForm();\n\t\t\t\t$this->getRegistrationValues();\n\t\t\t}\n\t\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\t\t\tif (isset($settings[\"nic_enabled\"]))\n\t\t\t{\n\t\t\t\t$this->setup->getClient()->status[\"nic\"][\"status\"] = true;\n\t\t\t}\n\n\t\t}\n\n\t\t$this->setButtonPrev(\"proxy\");\n\n\t\tif ($this->setup->getClient()->status[\"nic\"][\"status\"])\n\t\t{\n\t\t\t$this->setButtonNext(\"finish\",\"finish\");\n\t\t}\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * Init registration form.\n\t *\n\t * @param        int        $a_mode        Edit Mode\n\t */\n\tpublic function initRegistrationForm($a_mode = \"edit\")\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t// registration type\n\t\t$radg = new ilRadioGroupInputGUI($lng->txt(\"nic_registration\"), \"register\");\n\t\t$radg->setValue(1);\n\t\t$op1 = new ilRadioOption($lng->txt(\"nic_reg_online\"), 1);\n\t\t$radg->addOption($op1);\n\t\t$op1 = new ilRadioOption($lng->txt(\"nic_reg_disable\"), 0, $lng->txt(\"nic_reg_disable_info\"));\n\t\t$radg->addOption($op1);\n\t\t$this->form->addItem($radg);\n\n\t\t$this->form->addCommandButton(\"saveRegistration\", $lng->txt(\"save\"));\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\t}\n\n\t/**\n\t * Get current values for registration from\n\t */\n\tpublic function getRegistrationValues()\n\t{\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\t\t$nic_key = $this->setup->getClient()->getNICkey();\n\n\n\t\t$values = array();\n\n\t\tif (!isset($settings[\"nic_enabled\"]) or $settings[\"nic_enabled\"] == \"1\")\n\t\t{\n\t\t\t$values[\"register\"] = 1;\n\t\t}\n\t\t/*elseif ($settings[\"nic_enabled\"] == \"2\")\n\t\t{\n\t\t\t$this->tpl->setVariable(\"EMAIL\",$checked);\n\t\t}*/\n\t\telse\n\t\t{\n\t\t\t$values[\"register\"] = 0;\n\t\t}\n\n\t\t$this->form->setValuesByArray($values);\n\t}\n\n\t/**\n\t * Save registration form\n\t */\n\tpublic function saveRegistration()\n\t{\n\t\tglobal $tpl, $lng, $ilCtrl;\n\n\t\t$this->initRegistrationForm();\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\t// check register option\n\t\t\tif ($_POST[\"register\"] == 1)\n\t\t\t{\n\t\t\t\t// update nic\n\t\t\t\t$this->setup->getClient()->updateNIC($this->setup->ilias_nic_server);\n//var_dump($this->setup->getClient()->nic_status);\n\t\t\t\t// online registration failed\n\t\t\t\tif (empty($this->setup->getClient()->nic_status[2]))\n\t\t\t\t{\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"nic_enabled\",\"-1\");\n\t\t\t\t\tilUtil::sendFailure($this->lng->txt(\"nic_reg_failed\"), true);\n\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayNIC\");\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"inst_id\",$this->setup->getClient()->nic_status[2]);\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"nic_enabled\",\"1\");\n\t\t\t\t\t$this->setup->getClient()->status[\"nic\"][\"status\"] = true;\n\t\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"nic_reg_enabled\"), true);\n\t\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayNIC\");\n\t\t\t\t}\n\t\t\t}\n\t\t\t/*elseif ($_POST[\"form\"][\"register\"] == 2)\n\t\t\t{\n\t\t\t\t$nic_by_email = (int) $_POST[\"form\"][\"nic_id\"];\n\t\t\t\t\n\t\t\t\t$checksum = md5($nic_key.$nic_by_email);\n\t\t\t\t\n\t\t\t\tif (!$nic_by_email or $_POST[\"form\"][\"nic_checksum\"] != $checksum)\n\t\t\t\t{\n\t\t\t\t\t$message = $this->lng->txt(\"nic_reg_enter_correct_id\");     \n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"inst_id\",$nic_by_email);\n\t\t\t\t\t$this->setup->getClient()->setSetting(\"nic_enabled\",\"1\");\n\t\t\t\t\t$message = $this->lng->txt(\"nic_reg_enabled\");      \n\t\t\t\t}\n\t\t\t}*/\n\t\t\telse\n\t\t\t{\n\t\t\t\t$this->setup->getClient()->setSetting(\"inst_id\",\"0\");\n\t\t\t\t$this->setup->getClient()->setSetting(\"nic_enabled\",\"0\");\n\t\t\t\tilUtil::sendSuccess($this->lng->txt(\"nic_reg_disabled\"), true);\n\t\t\t\tilUtil::redirect(\"setup.php?cmd=displayNIC\");\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->displayNIC(true);\n\t}\n\n\t////\n\t//// Tools\n\t////\n\n\t/**\n\t * display tools\n\t */\n\tfunction displayTools()\n\t{\n\t\t$this->checkDisplayMode();\n\n\t\t// output\n\t\tilUtil::sendInfo();\n\n\t\t// use property forms and add the settings type switch\n\t\t$ctrl_structure_form = $this->initControlStructureForm();\n\t\t$settings_type_form = $this->initSettingsTypeForm();\n\t\t$mp_ns_form = $this->initTreeImplementationForm();\n\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\",\n\t\t\t$ctrl_structure_form->getHTML() . \"<br />\" .\n\t\t\t$settings_type_form->getHTML().'<br />'.\n\t\t\t$mp_ns_form->getHTML());\n\n\t}\n\n\tpublic function initTreeImplementationForm()\n\t{\n\t\tinclude_once (\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n        $form = new ilPropertyFormGUI();\n\n\t\t$form->setId('tree_impl');\n\t\t$form->setTitle($this->lng->txt('tree_implementation'));\n\t\t$form->setFormAction('setup.php?cmd=gateway');\n\n\n\t\t$options = new ilRadioGroupInputGUI('', 'tree_impl_type');\n\t\t#$options->setRequired(true);\n\n\t\t$set = new ilSetting('common');\n\t\t$type = ($set->get('main_tree_impl','ns') == 'ns' ? 'ns' : 'mp');\n\n\n\t\t$options->setValue($type);\n\n\t\t$ns = new ilRadioOption($this->lng->txt('tree_implementation_ns'), 'ns');\n\t\t$options->addOption($ns);\n\n\t\t$mp = new ilRadioOption($this->lng->txt('tree_implementation_mp'),'mp');\n\t\t$options->addOption($mp);\n\n\t\t$form->addItem($options);\n\t\t$form->addCommandButton('switchTree', $this->lng->txt('tree_implementation_switch_btn'));\n\t\t$form->setShowTopButtons(false);\n\n\t\treturn $form;\n\n\t}\n\n\tpublic function switchTree()\n\t{\n\t\t$set = new ilSetting('common');\n\t\t$type = ($set->get('main_tree_impl','ns') == 'ns' ? 'ns' : 'mp');\n\n\t\tif($type == 'ns' and $_POST['tree_impl_type'] == 'mp')\n\t\t{\n\t\t\t// To mp\n\t\t\tinclude_once './Services/Tree/classes/class.ilMaterializedPathTree.php';\n\t\t\tilMaterializedPathTree::createFromParentReleation();\n\n\t\t\t$GLOBALS['ilDB']->dropIndexByFields('tree',array('lft'));\n\t\t\t$GLOBALS['ilDB']->dropIndexByFields('tree',array('path'));\n\t\t\t$GLOBALS['ilDB']->addIndex('tree',array('path'),'i4');\n\n\t\t\t$set->set('main_tree_impl', 'mp');\n\n\t\t}\n\t\telseif($type == 'mp' and $_POST['tree_impl_type'] == 'ns')\n\t\t{\n\t\t\tinclude_once './Services/Tree/classes/class.ilTree.php';\n\t\t\t$GLOBALS['ilSetting'] = $set;\n\t\t\t$GLOBALS[\"DIC\"][\"ilSetting\"] = function($c) {\n\t\t\t\treturn $GLOBALS[\"ilSetting\"];\n\t\t\t};\n\t\t\t$tree = new ilTree(1);\n\t\t\t$tree->renumber(1);\n\n\t\t\t$GLOBALS['ilDB']->dropIndexByFields('tree',array('lft'));\n\t\t\t$GLOBALS['ilDB']->dropIndexByFields('tree',array('path'));\n\t\t\t$GLOBALS['ilDB']->addIndex('tree',array('lft'),'i4');\n\n\t\t\t$set->set('main_tree_impl', 'ns');\n\t\t}\n\n\t\tilUtil::sendInfo($this->lng->txt(\"tree_implementation_switched\"), true);\n\t\t$this->displayTools();\n\t}\n\n\t/**\n\t* Init the form to reload the control structure\n\t*\n\t* @return   object  property form to reload control structure\n\t*/\n\tfunction initControlStructureForm()\n\t{\n\t\tinclude_once (\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n        $form = new ilPropertyFormGUI();\n\n\t\t$form->setId(\"control_structure\");\n\t\t$form->setTitle($this->lng->txt(\"ctrl_structure\"));\n\t\t$form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$cset = $ilDB->query(\"SELECT count(*) as cnt FROM ctrl_calls\");\n\t\t$crec = $ilDB->fetchAssoc($cset);\n\n\t\t$item = new ilCustomInputGUI($this->lng->txt(\"ctrl_structure_reload\"));\n\t\tif ($crec[\"cnt\"] == 0)\n\t\t{\n\t\t\t$item->setInfo($this->lng->txt(\"ctrl_missing_desc\"));\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$item->setInfo($this->lng->txt(\"ctrl_structure_desc\"));\n\t\t}\n\t\t$form->addItem($item);\n\n\t\t$form->addCommandButton(\"reloadStructure\", $this->lng->txt(\"reload\"));\n\t\treturn $form;\n\t}\n\n\n\t/**\n\t* reload control structure\n\t*/\n\tfunction reloadControlStructure()\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\tif (!$this->setup->getClient()->db_installed)\n\t\t{\n\t\t\tilUtil::sendInfo($this->lng->txt(\"no_db\"), true);\n\t\t\t$this->displayTools();\n\t\t\treturn;\n\t\t}\n\t\t\n\t\t// referencing does not work in dbupdate-script\n\t\t$GLOBALS[\"ilDB\"] = $this->setup->getClient()->getDB();\n\t\t$GLOBALS[\"DIC\"][\"ilDB\"] = function($c) {\n\t\t\treturn $GLOBALS[\"ilDB\"];\n\t\t};\n// BEGIN WebDAV\n\t\t// read module and service information into db\n\t\trequire_once \"./setup/classes/class.ilModuleReader.php\";\n\t\trequire_once \"./setup/classes/class.ilServiceReader.php\";\n\t\trequire_once \"./setup/classes/class.ilCtrlStructureReader.php\";\n\n\t\trequire_once \"./Services/Component/classes/class.ilModule.php\";\n\t\trequire_once \"./Services/Component/classes/class.ilService.php\";\n\t\t$modules = ilModule::getAvailableCoreModules();\n\t\t$services = ilService::getAvailableCoreServices();\n\n\t\t// clear tables\n\t\t$mr = new ilModuleReader(\"\", \"\", \"\");\n\t\t$mr->clearTables();\n\t\tforeach($modules as $module)\n\t\t{\n\t\t\t$mr = new ilModuleReader(ILIAS_ABSOLUTE_PATH.\"/Modules/\".$module[\"subdir\"].\"/module.xml\",\n\t\t\t\t$module[\"subdir\"], \"Modules\");\n\t\t\t$mr->getModules();\n\t\t\tunset($mr);\n\t\t}\n\n\t\t// clear tables\n\t\t$sr = new ilServiceReader(\"\", \"\", \"\");\n\t\t$sr->clearTables();\n\t\tforeach($services as $service)\n\t\t{\n\t\t\t$sr = new ilServiceReader(ILIAS_ABSOLUTE_PATH.\"/Services/\".$service[\"subdir\"].\"/service.xml\",\n\t\t\t\t$service[\"subdir\"], \"Services\");\n\t\t\t$sr->getServices();\n\t\t\tunset($sr);\n\t\t}\n// END WebDAV\n\n\t\t$ilCtrlStructureReader->readStructure(true);\n\t\tilUtil::sendInfo($this->lng->txt(\"ctrl_structure_reloaded\"), true);\n\t\t$this->displayTools();\n\t}\n\n\t/**\n\t* Init the form to change the settings value type\n\t*\n\t* @return   object  property form to change settings type\n\t*/\n\tfunction initSettingsTypeForm()\n\t{\n\t\tinclude_once(\"./Services/Administration/classes/class.ilSetting.php\");\n\t\t$type = ilSetting::_getValueType();\n\n\t\tinclude_once (\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n        $form = new ilPropertyFormGUI();\n\n\t\t$form->setId(\"settings_type\");\n\t\t$form->setTitle($this->lng->txt(\"settings_type\"));\n\t\t$form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\t$item = new ilNonEditableValueGUI($this->lng->txt('settings_type_current'));\n\t\t$item->setValue(strtoupper($type));\n\n\t\tif ($type == \"clob\")\n\t\t{\n\t\t\t$item->setInfo($this->lng->txt('settings_info_clob'));\n            $form->addCommandButton(\"showLongerSettings\", $this->lng->txt(\"settings_show_longer\"));\n            $form->addCommandButton(\"changeSettingsType\", $this->lng->txt(\"settings_change_text\"));\n\t    }\n\t\telse\n\t\t{\n\t\t\t$item->setInfo($this->lng->txt('settings_info_text'));\n           \t$form->addCommandButton(\"changeSettingsType\", $this->lng->txt(\"settings_change_clob\"));\n\t\t}\n\t\t$form->addItem($item);\n\n\t\tif (is_array($this->longer_settings))\n\t\t{\n\t\t\t$item = new ilCustomInputGUI($this->lng->txt('settings_longer_values'));\n\n\t\t\tif (count($this->longer_settings))\n\t\t\t{\n\t            foreach ($this->longer_settings as $row)\n\t\t\t\t{\n\t                $subitem = new ilCustomInputGUI(sprintf($this->lng->txt('settings_key_info'), $row['module'], $row['keyword']));\n\t\t\t\t\t$subitem->setInfo($row['value']);\n\t\t\t\t\t$item->addSubItem($subitem);\n\t            }\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t            $item->setHTML($this->lng->txt('settings_no_longer_values'));\n\t        }\n\t\t\t$form->addItem($item);\n\t    }\n\n\t\treturn $form;\n\t}\n\n\n\t/**\n\t* change the type of the value field in settings table\n\t*/\n\tfunction changeSettingsType()\n\t{\n\t\tinclude_once(\"./Services/Administration/classes/class.ilSetting.php\");\n\t\t$old_type = ilSetting::_getValueType();\n\n\t\tif ($old_type == \"clob\")\n\t\t{\n\t\t\t$longer_settings = ilSetting::_getLongerSettings();\n\t\t\tif (count($longer_settings))\n\t\t\t{\n\t            $this->longer_settings = $longer_settings;\n                ilUtil::sendFailure($this->lng->txt(\"settings_too_long\"));\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t        \t$changed = ilSetting::_changeValueType('text');\n\t        }\n\t    }\n\t\telse\n\t\t{\n\t        $changed = ilSetting::_changeValueType('clob');\n\t    }\n\n\t\tif ($changed)\n\t\t{\n\t\t\tilUtil::sendInfo($this->lng->txt(\"settings_type_changed\"));\n\t\t}\n\n\t\t$this->displayTools();\n\t}\n\n\n\t/**\n\t* show a list of setting values that are loger than 4000 characters\n\t*\n\t*/\n\tfunction showLongerSettings()\n\t{\n\t\tinclude_once(\"./Services/Administration/classes/class.ilSetting.php\");\n\t\t$this->longer_settings = ilSetting::_getLongerSettings();\n\t\t$this->displayTools();\n\t}\n\n\t/**\n\t * display change password form and process form input\n\t */\n\tfunction changeMasterPassword()\n\t{\n\t\t$this->tpl->addBlockFile(\"CONTENT\",\"content\",\"tpl.std_layout.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_password\"));\n\n\t\t// formular sent\n\t\tif ($_POST[\"form\"])\n\t\t{\n\t\t\t$pass_old = $this->setup->getPassword();\n\n\t\t\tif (empty($_POST[\"form\"][\"pass_old\"]))\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_enter_old\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif (md5($_POST[\"form\"][\"pass_old\"]) != $pass_old)\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_old_wrong\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif (empty($_POST[\"form\"][\"pass\"]))\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_empty\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif ($_POST[\"form\"][\"pass\"] != $_POST[\"form\"][\"pass2\"])\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_not_match\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif (md5($_POST[\"form\"][\"pass\"]) == $pass_old)\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"password_same\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tif (!$this->setup->setPassword($_POST[\"form\"][\"pass\"]))\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"save_error\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tilUtil::sendInfo($this->lng->txt(\"password_changed\"),true);\n\t\t\tilUtil::redirect(\"setup.php\");\n\t\t}\n\n\t\t// output\n\t\t$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.form_change_admin_password.html\", \"setup\");\n\n\t\t$this->tpl->setVariable(\"TXT_HEADER\",$this->lng->txt(\"password_new_master\"));\n\n\t\t// pass form\n\t\t$this->tpl->setVariable(\"FORMACTION\", \"setup.php?cmd=gateway\");\n\t\t$this->tpl->setVariable(\"TXT_REQUIRED_FIELDS\", $this->lng->txt(\"required_field\"));\n\t\t$this->tpl->setVariable(\"TXT_PASS_TITLE\",$this->lng->txt(\"change_password\"));\n\t\t$this->tpl->setVariable(\"TXT_PASS_OLD\",$this->lng->txt(\"set_oldpasswd\"));\n\t\t$this->tpl->setVariable(\"TXT_PASS\",$this->lng->txt(\"set_newpasswd\"));\n\t\t$this->tpl->setVariable(\"TXT_PASS2\",$this->lng->txt(\"password_retype\"));\n\t\t$this->tpl->setVariable(\"TXT_SAVE\", $this->lng->txt(\"save\"));\n\t}\n\n\t/**\n\t * display finish setup page\n\t */\n\tfunction displayFinishSetup()\n\t{\n\t\t$this->checkDisplayMode(\"finish_setup\");\n\t\t$this->no_second_nav = true;\n//echo \"<b>1</b>\";\n\t\tif ($this->validateSetup())\n\t\t{\n\t\t\t$txt_info = $this->lng->txt(\"info_text_finish1\").\"<br /><br />\".\n\t\t\t\t\"<p>\".$this->lng->txt(\"user\").\": <b>root</b><br />\".\n\t\t\t\t$this->lng->txt(\"password\").\": <b>homer</b></p>\";\n\t\t\t$this->setButtonNext(\"login_new\",\"login\");\n//echo \"<b>2</b>\";\n\t\t\t$this->setup->getClient()->reconnect();\t\t// if this is not done, the writing of\n\t\t\t\t\t\t\t\t\t\t\t// the setup_ok fails (with MDB2 and a larger\n\t\t\t\t\t\t\t\t\t\t\t// client list), alex 17.1.2008\n\t\t\t$this->setup->getClient()->setSetting(\"setup_ok\",1);\n//$this->setup->getClient()->setSetting(\"zzz\", \"Z\");\n//echo \"<b>3</b>\";\n\t\t\t$this->setup->getClient()->status[\"finish\"][\"status\"] = true;\n//echo \"<b>4</b>\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$txt_info = $this->lng->txt(\"info_text_finish2\");\n\t\t}\n\n//echo \"<b>5</b>\";\n\t\t// output\n\t\t$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.clientsetup_finish.html\", \"setup\");\n\t\t$this->tpl->setVariable(\"TXT_INFO\",$txt_info);\n\n\t\t$this->setButtonPrev(\"nic\");\n//echo \"<b>6</b>\";\n\t\t$this->checkPanelMode();\n//echo \"<b>7</b>\";\n\t}\n\n\t/**\n\t * display delete client confirmation form and process form input\n\t */\n\tfunction displayDeleteConfirmation()\n\t{\n\t\t$this->checkDisplayMode();\n\n\t\t// formular sent\n\t\tif ($_POST[\"form\"][\"delete\"])\n\t\t{\n\t\t\t$ini = true;\n\t\t\t$db = false;\n\t\t\t$files = false;\n\n\t\t\t/* disabled\n\t\t\tswitch ($_POST[\"form\"][\"delete\"])\n\t\t\t{\n\t\t\t\tcase 1:\n\t\t\t\t\t$ini = true;\n\t\t\t\t\tbreak;\n\t\t\t\n\t\t\t\tcase 2:\n\t\t\t\t\t$ini = true;\n\t\t\t\t\t$db = true;\n\t\t\t\t\tbreak;\n\n\t\t\t\tcase 3:\n\t\t\t\t\t$ini = true;\n\t\t\t\t\t$db = true;\n\t\t\t\t\t$files = true;\n\t\t\t\t\tbreak;      \n\t\t\t}\n\t\t\t*/\n\n\t\t\t$msg = $this->setup->getClient()->delete($ini,$db,$files);\n\n\t\t\tilUtil::sendInfo($this->lng->txt(\"client_deleted\"),true);\n\t\t\tilUtil::redirect(\"setup.php\");\n\t\t}\n\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_delete\"));\n\n\t\t// output\n\t\t$this->tpl->addBlockFile(\"SETUP_CONTENT\",\"setup_content\",\"tpl.form_delete_client.html\", \"setup\");\n\n\t\t// delete panel\n\t\t$this->tpl->setVariable(\"FORMACTION\", \"setup.php?cmd=gateway\");\n\t\t$this->tpl->setVariable(\"TXT_DELETE\", $this->lng->txt(\"delete\"));\n\t\t$this->tpl->setVariable(\"TXT_DELETE_CONFIRM\", $this->lng->txt(\"delete_confirm\"));\n\t\t$this->tpl->setVariable(\"TXT_DELETE_INFO\", $this->lng->txt(\"delete_info\"));\n\n\t\t$this->checkPanelMode();\n\t}\n\n\t/**\n\t * enable/disable access to a client\n\t *\n\t * @param    string  jump back to this script\n\t */\n\tfunction changeAccessMode($a_back)\n\t{\n\t\tif ($this->setup->getClient()->status[\"finish\"][\"status\"])\n\t\t{\n\t\t\t$val = ($this->setup->getClient()->ini->readVariable(\"client\",\"access\")) ? \"0\" : true;\n\t\t\t$this->setup->getClient()->ini->setVariable(\"client\",\"access\",$val);\n\t\t\t$this->setup->getClient()->ini->write();\n\t\t\t$message = \"client_access_mode_changed\";\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$message = \"client_setup_not_finished\";\n\t\t}\n\n\t\tilUtil::sendInfo($this->lng->txt($message),true);\n\n\t\tilUtil::redirect(\"setup.php?cmd=\".$a_back);\n\t}\n\n\t/**\n\t * set defualt client\n\t */\n\tfunction changeDefaultClient()\n\t{\n\t\tif ($_POST[\"form\"])\n\t\t{\n\t\t\t$client = new ilClient($_POST[\"form\"][\"default\"], $this->setup->db_connections);\n\n\t\t\tif (!$client->init())\n\t\t\t{\n\t\t\t\t$this->setup->raiseError($this->lng->txt(\"no_valid_client_id\"),$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\t$status = $this->setup->getStatus($client);\n\n\t\t\tif ($status[\"finish\"][\"status\"])\n\t\t\t{\n\t\t\t\t$this->setup->ini->setVariable(\"clients\",\"default\",$client->getId());\n\t\t\t\t$this->setup->ini->write();\n\t\t\t\t$message = \"default_client_changed\";\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\t$message = \"client_setup_not_finished\";\n\t\t\t}\n\t\t}\n\n\t\tilUtil::sendInfo($this->lng->txt($message),true);\n\n\t\tilUtil::redirect(\"setup.php\");\n\t}\n\n\t/**\n\t * validatesetup status again\n\t * and set access mode of the first client to online\n\t */\n\tfunction validateSetup()\n\t{\n\t\tforeach ($this->setup->getClient()->status as $key => $val)\n\t\t{\n\t\t\tif ($key != \"finish\" and $key != \"access\")\n\t\t\t{\n\t\t\t\tif ($val[\"status\"] != true)\n\t\t\t\t{\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n//$this->setup->getClient()->setSetting(\"zzz\", \"V\");\n\t\t$clientlist = new ilClientList($this->setup->db_connections);\n//$this->setup->getClient()->setSetting(\"zzz\", \"W\");\n\t\t$list = $clientlist->getClients();\n//$this->setup->getClient()->setSetting(\"zzz\", \"X\");\n\t\tif (count($list) == 1)\n\t\t{\n\t\t\t$this->setup->ini->setVariable(\"clients\",\"default\",$this->setup->getClient()->getId());\n\t\t\t$this->setup->ini->write();\n\n\t\t\t$this->setup->getClient()->ini->setVariable(\"client\",\"access\",1);\n\t\t\t$this->setup->getClient()->ini->write();\n\t\t}\n//$this->setup->getClient()->setSetting(\"zzz\", \"Y\");\n\t\treturn true;\n\t}\n\n\t/**\n\t * if setting up a client was not finished, jump back to the first uncompleted setup step\n\t */\n\tfunction jumpToFirstUnfinishedSetupStep()\n\t{\n\t\tif (!$this->setup->getClient()->status[\"db\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"db\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayDatabase();\n\t\t}\n\t\telseif (!$this->setup->getClient()->status[\"lang\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"lang\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayLanguages();\n\t\t}\n\t\telseif (!$this->setup->getClient()->status[\"contact\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"contact\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayContactData();\n\t\t}\n\t\telseif(!$this->setup->getClient()->status['proxy']['status'])\n\t\t{\n\t\t\t$this->cmd = \"proxy\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayProxy();\n\t\t}\n\t\telseif (!$this->setup->getClient()->status[\"nic\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"nic\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayNIC();\n\t\t}\n\t\telseif (!$this->setup->getClient()->status[\"finish\"][\"status\"])\n\t\t{\n\t\t\t$this->cmd = \"finish\";\n\t\t\tilUtil::sendInfo($this->lng->txt(\"finish_initial_setup_first\"),true);\n\t\t\t$this->displayFinishSetup();\n\t\t}\n\t\telse\n\t\t{\n\t\t\treturn false;\n\t\t}\n\t}\n\n\t/**\n\t * enable/disable client list on index page\n\t */\n\tfunction toggleClientList()\n\t{\n\t\tif ($this->setup->ini->readVariable(\"clients\",\"list\"))\n\t\t{\n\t\t\t$this->setup->ini->setVariable(\"clients\",\"list\",\"0\");\n\t\t\t$this->setup->ini->write();\n\t\t\tilUtil::sendInfo($this->lng->txt(\"list_disabled\"),true);\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$this->setup->ini->setVariable(\"clients\",\"list\",\"1\");\n\t\t\t$this->setup->ini->write();\n\t\t\tilUtil::sendInfo($this->lng->txt(\"list_enabled\"),true);\n\t\t}\n\n\t\tilUtil::redirect(\"setup.php\");\n\t}\n\n\t////\n\t//// APPLY CUSTOM DB UPDATES\n\t////\n\n\tfunction applyCustomUpdates()\n\t{\n\t\tglobal $ilCtrlStructureReader;\n\n\t\t$ilCtrlStructureReader->setIniFile($this->setup->getClient()->ini);\n\n\t\tinclude_once \"./Services/Database/classes/class.ilDBUpdate.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacAdmin.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacReview.php\";\n\t\tinclude_once \"./Services/AccessControl/classes/class.ilRbacSystem.php\";\n\t\tinclude_once \"./Services/Tree/classes/class.ilTree.php\";\n\t\tinclude_once \"./Services/Xml/classes/class.ilSaxParser.php\";\n\t\tinclude_once \"./Services/Object/classes/class.ilObjectDefinition.php\";\n\n\t\t// referencing db handler in language class\n\t\t$ilDB = $this->setup->getClient()->db;\n\t\t$this->lng->setDbHandler($ilDB);\n\n\t\t// run dbupdate\n\t\t$dbupdate = new ilDBUpdate($ilDB);\n\t\t$dbupdate->applyCustomUpdates();\n\n\t\tif ($dbupdate->updateMsg == \"no_changes\")\n\t\t{\n\t\t\t$message = $this->lng->txt(\"no_changes\").\". \".$this->lng->txt(\"database_is_uptodate\");\n\t\t}\n\t\telse\n\t\t{\n\t\t\t$sep = \"\";\n\t\t\tforeach ($dbupdate->updateMsg as $row)\n\t\t\t{\n\t\t\t\tif ($row[\"msg\"] == \"update_applied\")\n\t\t\t\t{\n\t\t\t\t\t$a_message.= $sep.$row[\"nr\"];\n\t\t\t\t\t$sep = \", \";\n\t\t\t\t}\n\t\t\t\telse\n\t\t\t\t{\n\t\t\t\t\t$e_message.= \"<br/>\".$this->lng->txt($row[\"msg\"]).\": \".$row[\"nr\"];\n\t\t\t\t}\n\t\t\t}\n\t\t\tif ($a_message != \"\")\n\t\t\t{\n\t\t\t\t$a_message = $this->lng->txt(\"update_applied\").\": \".$a_message;\n\t\t\t}\n\t\t}\n\n\t\tilUtil::sendInfo($a_message.$e_message, true);\n\t\tilUtil::redirect(\"setup.php?cmd=displayDatabase\");\n\t}\n\n\t/**\n\t * Initialize clone form\n\t */\n\tfunction cloneInitForm()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\t$this->checkDisplayMode();\n\n\t\tinclude_once(\"Services/Form/classes/class.ilPropertyFormGUI.php\");\n\t\t$this->form = new ilPropertyFormGUI();\n\n\t\t$this->form->setId(\"clone_form\");\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\tif ($this->setup->getClient()->status[\"access\"][\"status\"] === false and stripos($this->setup->getClient()->getName(),\"master\") === false and $this->setup->getClient()->getdbType() == \"mysql\" and $this->setup->getClient()->db_exists )\n\t\t{\n\t\t\t$this->form->setTitle($this->lng->txt(\"clone_source\"));\n\t\t\t$clients = array();\n\t\t\t$clientlist = new ilClientList($this->setup->db_connections);\n\t\t\t$list = $clientlist->getClients();\n\t\t\t$clientlistarray = array();\n\n\t\t\tforeach ($list as $key => $client){\n\t\t\t\tif ((strcmp($key, $this->setup->getClient()->getId()) != '0') && ($client->getDbType() == 'mysql')) {  // You cannot clone yourself\n\t\t\t\t\t$clientlistarray[$client->id] = $client->id;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$si = new ilSelectInputGUI($lng->txt(\"clone_selectsource\"), \"source\");\n\n\t\t\t$si->setOptions(array_merge(\n\t\t\t\tarray(\"\" => \"-- \".$lng->txt(\"please_select\").\" --\"),\n\t\t\t\t$clientlistarray));\n\t\t\t$si->setRequired(true);\n\t\t\t$this->form->addItem($si);\n\n\t\t\t$cb = new ilCheckboxInputGUI($lng->txt(\"clone_areyousure\"), \"iamsure\");\n\t\t\t$cb->setRequired(true);\n\t\t\t$this->form->addItem($cb);\n\n\t\t\t$this->form->addCommandButton(\"cloneSaveSource\", $lng->txt(\"cloneit\"));\n\t\t} else {\n\t\t\t$disabledmessage = \"<h1>\" . $this->lng->txt(\"clone_disabledmessage\") .\"</h1><br>\";\n\t\t\tif (!$this->setup->getClient()->status[\"access\"][\"status\"] === false) {\n\t\t\t\t$disabledmessage .= $this->lng->txt(\"clone_clientnotdisabled\") . \"<br>\";\n\t\t\t}\n\t\t\tif (!stripos($this->setup->getClient()->getName(),\"aster\") === false) {\n\t\t\t\t$disabledmessage .= $this->lng->txt(\"clone_clientismaster\") . \"<br>\";\n\t\t\t}\n\t\t\tif ($this->setup->getClient()->getdbType() != \"mysql\") {\n\t\t\t\t$disabledmessage .= $this->lng->txt(\"clone_clientisnotmysql\") . \"<br>\";\n\t\t\t}\n\t\t\tif (!$this->setup->getClient()->db_exists) {\n\t\t\t\t$disabledmessage .= $this->lng->txt(\"clone_clientnodatabase\") . \"<br>\";\n\t\t\t}\n\t\t\t$this->form->setTitle($disabledmessage);\n\t\t}\n\t}\n\n\tfunction cloneSelectSource() {\n\n\t\tif (!$this->setup->isAdmin())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$this->cloneInitForm();\n\t\t$this->form->setValuesByPost();\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_clone\"));\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t}\n\n\tfunction cloneSaveSource()\n\t{\n\t\tglobal $lng, $ilCtrl;\n\n\t\tif (!$this->setup->isAdmin())\n\t\t{\n\t\t\treturn;\n\t\t}\n\n\t\t$this->cloneInitForm();\n\n\t\tif ($this->form->checkInput())\n\t\t{\n\t\t\tif ($this->form->getInput(\"iamsure\") != \"1\")\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"clone_youmustcheckiamsure\");\n\t\t\t\t$this->setup->raiseError($message,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\t\t\tif (!$this->setup->cloneFromSource($this->form->getInput(\"source\")))\n\t\t\t{\n\t\t\t\t$message = $this->lng->txt(\"clone_error\");\n\t\t\t\t$this->setup->raiseError($message . \" -> \" . $this->setup->error,$this->setup->error_obj->MESSAGE);\n\t\t\t}\n\n\t\t\tilUtil::sendInfo($this->lng->txt(\"client_cloned\"),true);\n\t\t\t// ilUtil::redirect(\"setup.php\");\n\t\t}\n\t\t$this->form->setValuesByPost();\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_clone\"));\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t}\n\n\tpublic function displayProxy($a_omit_init = false)\n\t{\n\t\t$this->checkDisplayMode(\"proxy\");\n\t\t$settings = $this->setup->getClient()->getAllSettings();\n\n\t\tif (!$a_omit_init)\n\t\t{\n\t\t\tinclude_once(\"./Services/Administration/classes/class.ilSetting.php\");\n\t\t\t$this->initProxyForm();\n\t\t\t$this->form->setValuesByArray(array(\n\t\t\t\t'proxy_status' => (bool)$settings['proxy_status'],\n\t\t\t\t'proxy_host' => $settings['proxy_host'],\n\t\t\t\t'proxy_port' => $settings['proxy_port']\n\t\t\t));\n\t\t\tif((bool)$settings['proxy_status'])\n\t\t\t{\n\t\t\t\t$this->setup->printProxyStatus($this->setup->client);\n\t\t\t}\n\t\t}\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\t\t$this->tpl->setVariable(\"TXT_INFO\", $this->lng->txt(\"info_text_proxy\"));\n\n\n\t\t$check = $this->setup->checkClientProxySettings($this->setup->client);\n\n\t\t$this->setup->getClient()->status[\"proxy\"][\"status\"] = $check[\"status\"];\n\t\t$this->setup->getClient()->status[\"proxy\"][\"comment\"] = $check[\"comment\"];\n\t\t$this->setup->getClient()->status[\"proxy\"][\"text\"] = $check[\"comment\"];\n\n\t\tif ($check[\"status\"])\n\t\t{\n\t\t\t$this->setButtonNext(\"nic\");\n\t\t}\n\n\t\t$this->setButtonPrev(\"contact\");\n\t\t$this->checkPanelMode();\n\t}\n\tprivate function initProxyForm()\n\t{\n\t\tglobal $lng;\n\n\t\tinclude_once('Services/Form/classes/class.ilPropertyFormGUI.php');\n\t\t$this->form = new ilPropertyFormGUI();\n\t\t$this->form->setFormAction(\"setup.php?cmd=gateway\");\n\n\t\t// Proxy status\n\t\t$proxs = new ilCheckboxInputGUI($lng->txt('proxy_status'), 'proxy_status');\n\t\t$proxs->setInfo($lng->txt('proxy_status_info'));\n\t\t$proxs->setValue(1);\n\t\t$this->form->addItem($proxs);\n\n\t\t// Proxy availability\n\t\t$proxa = new ilCustomInputGUI('', 'proxy_availability');\n\t\t$proxs->addSubItem($proxa);\n\n\t\t// Proxy\n\t\t$prox = new ilTextInputGUI($lng->txt('proxy_host'), 'proxy_host');\n\t\t$prox->setInfo($lng->txt('proxy_host_info'));\n\t\t$proxs->addSubItem($prox);\n\n\t\t// Proxy Port\n\t\t$proxp = new ilTextInputGUI($lng->txt('proxy_port'), 'proxy_port');\n\t\t$proxp->setInfo($lng->txt('proxy_port_info'));\n\t\t$proxp->setSize(10);\n\t\t$proxp->setMaxLength(10);\n\t\t$proxs->addSubItem($proxp);\n\n\t\t// save and cancel commands\n\t\t$this->form->addCommandButton('saveProxy', $lng->txt('save'));\n\t}\n\n\t/**\n\t *\n\t * Save proxy settings\n\t *\n\t * @access\tpublic\n\t *\n\t */\n\tpublic function saveProxy()\n\t{\n\t\tglobal $lng;\n\n\t\t$this->initProxyForm();\n\t\t$isFormValid = $this->form->checkInput();\n\n\t\t$new_settings['proxy_status'] = (int)$this->form->getInput('proxy_status');\n\t\t$new_settings['proxy_host'] = trim($this->form->getInput('proxy_host'));\n\t\t$new_settings['proxy_port'] = trim($this->form->getInput('proxy_port'));\n\n\t\tif($isFormValid)\n\t\t{\n\t\t\tif($new_settings['proxy_status'] == true)\n\t\t\t{\n\t\t\t\tif(!strlen($new_settings['proxy_host']))\n\t\t\t\t{\n\t\t\t\t\t$isFormValid = false;\n\t\t\t\t\t$this->form->getItemByPostVar('proxy_host')->setAlert($lng->txt('msg_input_is_required'));\n\t\t\t\t}\n\t\t\t\tif(!strlen($new_settings['proxy_port']))\n\t\t\t\t{\n\t\t\t\t\t$isFormValid = false;\n\t\t\t\t\t$this->form->getItemByPostVar('proxy_port')->setAlert($lng->txt('msg_input_is_required'));\n\t\t\t\t}\n\t\t\t\tif(!preg_match('/[0-9]{1,}/', $new_settings['proxy_port']) ||\n\t\t\t\t\t$new_settings['proxy_port'] < 0 ||\n\t\t\t\t\t$new_settings['proxy_port'] > 65535)\n\t\t\t\t{\n\t\t\t\t\t$isFormValid = false;\n\t\t\t\t\t$this->form->getItemByPostVar('proxy_port')->setAlert($lng->txt('proxy_port_numeric'));\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif($isFormValid)\n\t\t\t{\n\t\t\t\t$this->setup->saveProxySettings($new_settings);\n\n\t\t\t\tilUtil::sendSuccess($lng->txt('saved_successfully'));\n\t\t\t\t$settings = $this->setup->getClient()->getAllSettings();\n\t\t\t\tif($settings['proxy_status'] == true)\n\t\t\t\t{\n\t\t\t\t\t$this->setup->printProxyStatus($this->setup->client);\n\t\t\t\t}\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tilUtil::sendFailure($lng->txt('form_input_not_valid'));\n\t\t\t}\n\t\t}\n\n\t\t$this->form->setValuesByPost();\n\t\t$this->tpl->setVariable(\"SETUP_CONTENT\", $this->form->getHTML());\n\n\n\t\t$this->displayProxy(true);\n\t}\n} // END class.ilSetupGUI\n?>\n"], "filenames": ["setup/classes/class.ilSetupGUI.php"], "buggy_code_start_loc": [599], "buggy_code_end_loc": [600], "fixing_code_start_loc": [599], "fixing_code_end_loc": [600], "type": "CWE-79", "message": "ILIAS before 5.2.4 has XSS via the cmd parameter to the displayHeader function in setup/classes/class.ilSetupGUI.php in the Setup component.", "other": {"cve": {"id": "CVE-2018-5688", "sourceIdentifier": "cve@mitre.org", "published": "2018-01-14T20:29:00.243", "lastModified": "2018-02-05T21:45:16.563", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "ILIAS before 5.2.4 has XSS via the cmd parameter to the displayHeader function in setup/classes/class.ilSetupGUI.php in the Setup component."}, {"lang": "es", "value": "ILIAS, en versiones anteriores a la 5.2.4, tiene XSS mediante el par\u00e1metro cmd en la funci\u00f3n displayHeader en setup/classes/class.ilSetupGUI.php en el componente Setup."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ilias:ilias:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.2.4", "matchCriteriaId": "67CFBC1F-142E-4D12-87DA-F1A26EF958D1"}]}]}], "references": [{"url": "https://github.com/ILIAS-eLearning/ILIAS/commit/c0f326d05231072e33679b84835c03d5043255cb", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://www.exploit-db.com/exploits/43595/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://www.ilias.de/docu/goto_docu_pg_75029_35.html", "source": "cve@mitre.org", "tags": ["Release Notes"]}]}, "github_commit_url": "https://github.com/ILIAS-eLearning/ILIAS/commit/c0f326d05231072e33679b84835c03d5043255cb"}}