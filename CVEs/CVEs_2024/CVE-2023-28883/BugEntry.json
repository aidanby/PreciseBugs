{"buggy_code": ["<?php\n\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Inflector;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\ORM\\TableRegistry;\nuse Cake\\Event\\EventInterface;\nuse Cake\\Core\\Configure;\n\nclass InstanceController extends AppController\n{\n    public function beforeFilter(EventInterface $event)\n    {\n        parent::beforeFilter($event);\n        $this->set('metaGroup', !empty($this->isAdmin) ? 'Cerebrate' : 'Administration');\n    }\n\n    public function home()\n    {\n        $statistics = $this->Instance->getStatistics();\n        $this->set('statistics', $statistics);\n    }\n\n    public function status()\n    {\n        $data = file_get_contents(APP . 'VERSION.json');\n        $data = json_decode($data, true);\n        $data['user'] = $this->ACL->getUser();\n        return $this->RestResponse->viewData($data, 'json');\n    }\n\n    public function searchAll()\n    {\n        $searchValue = $this->request->getQuery('search');\n        $model = $this->request->getQuery('model', null);\n        $limit = $this->request->getQuery('limit', 5);\n        if (!empty($this->request->getQuery('show_all', false))) {\n            $limit = null;\n        }\n        $data = [];\n        if (!empty($searchValue)) {\n            $data = $this->Instance->searchAll($searchValue, $this->ACL->getUser(), $limit, $model);\n        }\n        if ($this->ParamHandler->isRest()) {\n            return $this->RestResponse->viewData($data, 'json');\n        }\n        $this->set('data', $data);\n    }\n\n    public function migrationIndex()\n    {\n        $migrationStatus = $this->Instance->getMigrationStatus();\n\n        $this->loadModel('Phinxlog');\n        $status = $this->Phinxlog->mergeMigrationLogIntoStatus($migrationStatus['status']);\n\n        foreach ($status as $i => $entry) {\n            if (!empty($entry['plugin'])) {\n                $pluginTablename = sprintf('%s_phinxlog', Inflector::underscore($entry['plugin']));\n                $pluginTablename = str_replace(['\\\\', '/', '.'], '_', $pluginTablename);\n                $status[$i] = $this->Phinxlog->mergeMigrationLogIntoStatus([$entry], $pluginTablename)[0];\n\n            }\n        }\n        usort($status, function($a, $b) {\n            return strcmp($b['id'], $a['id']);\n        });\n        if ($this->ParamHandler->isRest()) {\n            return $this->RestResponse->viewData([\n                'status' => $status,\n                'updateAvailables' => $migrationStatus['updateAvailables'],\n            ], 'json');\n        }\n        $this->set('status', $status);\n        $this->set('updateAvailables', $migrationStatus['updateAvailables']);\n    }\n\n    public function migrate($version=null) {\n        if ($this->request->is('post')) {\n            if (is_null($version)) {\n                $migrateResult = $this->Instance->migrate();\n            } else {\n                $migrateResult = $this->Instance->migrate(['target' => $version]);\n            }\n            if ($this->ParamHandler->isRest() || $this->ParamHandler->isAjax()) {\n                if ($migrateResult['success']) {\n                    return $this->RestResponse->saveSuccessResponse('instance', 'migrate', false, false, __('Migration sucessful'));\n                } else {\n                    return $this->RestResponse->saveFailResponse('instance', 'migrate', false, $migrateResult['error']);\n                }\n            } else {\n                if ($migrateResult['success']) {\n                    $this->Flash->success(__('Migration sucessful'));\n                    $this->redirect(['action' => 'migrationIndex']);\n                } else {\n                    $this->Flash->error(__('Migration fail'));\n                    $this->redirect(['action' => 'migrationIndex']);\n                }\n            }\n        }\n        $migrationStatus = $this->Instance->getMigrationStatus();\n        $this->set('title',  __n('Run database update?', 'Run all database updates?', count($migrationStatus['updateAvailables'])));\n        $this->set('question', __('The process might take some time.'));\n        $this->set('actionName', __n('Run update', 'Run all updates', count($migrationStatus['updateAvailables'])));\n        $this->set('path', ['controller' => 'instance', 'action' => 'migrate']);\n        $this->render('/genericTemplates/confirm');\n    }\n\n    public function rollback($version=null) {\n        if ($this->request->is('post')) {\n            if (is_null($version)) {\n                $migrateResult = $this->Instance->rollback();\n            } else {\n                $migrateResult = $this->Instance->rollback(['target' => $version]);\n            }\n            if ($this->ParamHandler->isRest() || $this->ParamHandler->isAjax()) {\n                if ($migrateResult['success']) {\n                    return $this->RestResponse->saveSuccessResponse('instance', 'rollback', false, false, __('Rollback sucessful'));\n                } else {\n                    return $this->RestResponse->saveFailResponse('instance', 'rollback', false, $migrateResult['error']);\n                }\n            } else {\n                if ($migrateResult['success']) {\n                    $this->Flash->success(__('Rollback sucessful'));\n                    $this->redirect(['action' => 'migrationIndex']);\n                } else {\n                    $this->Flash->error(__('Rollback fail'));\n                    $this->redirect(['action' => 'migrationIndex']);\n                }\n            }\n        }\n        $migrationStatus = $this->Instance->getMigrationStatus();\n        $this->set('title',  __('Run database rollback?'));\n        $this->set('question', __('The process might take some time.'));\n        $this->set('actionName', __('Run rollback'));\n        $this->set('path', ['controller' => 'instance', 'action' => 'rollback']);\n        $this->render('/genericTemplates/confirm');\n    }\n\n    public function settings()\n    {\n        $this->Settings = $this->getTableLocator()->get('Settings');\n        $all = $this->Settings->getSettings(true);\n        if ($this->ParamHandler->isRest()) {\n            return $this->RestResponse->viewData([\n                'settingsProvider' => $all['settingsProvider'],\n                'settings' => $all['settings'],\n                'settingsFlattened' => $all['settingsFlattened'],\n                'notices' => $all['notices'],\n            ], 'json');\n        }\n        $this->set('settingsProvider', $all['settingsProvider']);\n        $this->set('settings', $all['settings']);\n        $this->set('settingsFlattened', $all['settingsFlattened']);\n        $this->set('notices', $all['notices']);\n    }\n\n    public function saveSetting()\n    {\n        if ($this->request->is('post')) {\n            $data = $this->ParamHandler->harvestParams([\n                'name',\n                'value'\n            ]);\n            $this->Settings = $this->getTableLocator()->get('Settings');\n            $errors = $this->Settings->saveSetting($data['name'], $data['value']);\n            $message = __('Could not save setting `{0}`', $data['name']);\n            if (empty($errors)) {\n                $message = __('Setting `{0}` saved', $data['name']);\n                $data = $this->Settings->getSetting($data['name']);\n            }\n            $this->CRUD->setResponseForController('saveSetting', empty($errors), $message, $data, $errors);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n    }\n}\n", "<?php\n\nnamespace App\\Model\\Table;\n\nuse App\\Model\\Table\\AppTable;\nuse Cake\\ORM\\Table;\nuse Cake\\ORM\\TableRegistry;\nuse Cake\\Validation\\Validator;\nuse Migrations\\Migrations;\nuse Cake\\Filesystem\\Folder;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\n\nclass InstanceTable extends AppTable\n{\n    protected $activePlugins = ['Tags', 'ADmad/SocialAuth'];\n    public $seachAllTables = [];\n\n    public function initialize(array $config): void\n    {\n        parent::initialize($config);\n        $this->addBehavior('AuditLog');\n        $this->setDisplayField('name');\n        $this->setSearchAllTables();\n    }\n\n    public function validationDefault(Validator $validator): Validator\n    {\n        return $validator;\n    }\n\n    public function setSearchAllTables(): void\n    {\n        $this->seachAllTables = [\n            'Broods' => ['conditions' => false, 'afterFind' => false],\n            'Individuals' => ['conditions' => false, 'afterFind' => false],\n            'Organisations' => ['conditions' => false, 'afterFind' => false],\n            'SharingGroups' => [\n                'conditions' => false,\n                'afterFind' => function($result, $user) {\n                    foreach ($result as $i => $row) {\n                        if (empty($user['role']['perm_admin'])) {\n                            $orgFound = false;\n                            if (!empty($row['sharing_group_orgs'])) {\n                                foreach ($row['sharing_group_orgs'] as $org) {\n                                    if ($org['id'] === $user['organisation_id']) {\n                                        $orgFound = true;\n                                    }\n                                }\n                            }\n                            if ($row['organisation_id'] !== $user['organisation_id'] && !$orgFound) {\n                                unset($result[$i]);\n                            }\n                        }\n                    }\n                    return $result;\n                },\n            ],\n            'Users' => [\n                'conditions' => function($user) {\n                    $conditions = [];\n                    if (empty($user['role']['perm_admin'])) {\n                        $conditions['Users.organisation_id'] = $user['organisation_id'];\n                    }\n                    return $conditions;\n                },\n                'afterFind' => function ($result, $user) {\n                    return $result;\n                },\n            ],\n            'EncryptionKeys' => ['conditions' => false, 'afterFind' => false],\n        ];\n    }\n\n    public function getStatistics(int $days=30): array\n    {\n        $models = ['Individuals', 'Organisations', 'Alignments', 'EncryptionKeys', 'SharingGroups', 'Users', 'Broods', 'Tags.Tags'];\n        foreach ($models as $model) {\n            $table = TableRegistry::getTableLocator()->get($model);\n            $statistics[$model] = $this->getActivityStatisticsForModel($table, $days);\n        }\n        return $statistics;\n    }\n\n    public function searchAll($value, $user, $limit=5, $model=null)\n    {\n        $results = [];\n        $models = $this->seachAllTables;\n        if (!is_null($model)) {\n            if (in_array($model, array_keys($this->seachAllTables))) {\n                $models = [$model => $this->seachAllTables[$model]];\n            } else {\n                return $results; // Cannot search in this model\n            }\n        }\n\n        // search in metafields. FIXME?: Use meta-fields type handler to search for meta-field values\n        if (is_null($model)) {\n            $metaFieldTable = TableRegistry::get('MetaFields');\n            $query = $metaFieldTable->find()->where([\n                'value LIKE' => '%' . $value . '%'\n            ]);\n            $results['MetaFields']['amount'] = $query->count();\n            $result = $query->limit($limit)->all()->toList();\n            if (!empty($result)) {\n                $results['MetaFields']['entries'] = $result;\n            }\n        }\n\n        foreach ($models as $tableName => $tableConfig) {\n            $controller = $this->getController($tableName);\n            $table = TableRegistry::get($tableName);\n            $query = $table->find();\n            $quickFilters = $this->getQuickFiltersFieldsFromController($controller);\n            $containFields = $this->getContainFieldsFromController($controller);\n            if (empty($quickFilters)) {\n                continue; // make sure we are filtering on something\n            }\n            $params = ['quickFilter' => $value];\n            $quickFilterOptions = ['quickFilters' => $quickFilters];\n            $query = $controller->CRUD->setQuickFilters($params, $query, $quickFilterOptions);\n            if (!empty($tableConfig['conditions'])) {\n                $whereClause = [];\n                if (is_callable($tableConfig['conditions'])) {\n                    $whereClause = $tableConfig['conditions']($user);\n                } else {\n                    $whereClause = $tableConfig['conditions'];\n                }\n                $query->where($whereClause);\n            }\n            if (!empty($containFields)) {\n                $query->contain($containFields);\n            }\n            if (!empty($tableConfig['contain'])) {\n                $query->contain($tableConfig['contain']);\n            }\n            if (empty($tableConfig['afterFind'])) {\n                $results[$tableName]['amount'] = $query->count();\n            }\n            $result = $query->limit($limit)->all()->toList();\n            if (!empty($result)) {\n                if (!empty($tableConfig['afterFind'])) {\n                    $result = $tableConfig['afterFind']($result, $user);\n                }\n                $results[$tableName]['entries'] = $result;\n                $results[$tableName]['amount'] = count($result);\n            }\n        }\n        return $results;\n    }\n\n    public function getController($name)\n    {\n        $controllerName = \"\\\\App\\\\Controller\\\\{$name}Controller\";\n        if (!class_exists($controllerName)) {\n            throw new MethodNotAllowedException(__('Model `{0}` does not exists', $name));\n        }\n        $controller = new $controllerName;\n        return $controller;\n    }\n\n    public function getQuickFiltersFieldsFromController($controller)\n    {\n        return !empty($controller->quickFilterFields) ? $controller->quickFilterFields : [];\n    }\n\n    public function getContainFieldsFromController($controller)\n    {\n        return !empty($controller->containFields) ? $controller->containFields : [];\n    }\n\n    public function getMigrationStatus()\n    {\n        $migrations = new Migrations();\n        $status = $migrations->status();\n        foreach ($this->activePlugins as $pluginName) {\n            $pluginStatus = $migrations->status([\n                'plugin' => $pluginName\n            ]);\n            $pluginStatus = array_map(function ($entry) use ($pluginName) {\n                $entry['plugin'] = $pluginName;\n                return $entry;\n            }, $pluginStatus);\n            $status = array_merge($status, $pluginStatus);\n        }\n        $status = array_reverse($status);\n\n        $updateAvailables = array_filter($status, function ($update) {\n            return $update['status'] != 'up';\n        });\n        return [\n            'status' => $status,\n            'updateAvailables' => $updateAvailables,\n        ];\n    }\n\n    public function migrate($version=null) {\n        $migrations = new Migrations();\n        if (is_null($version)) {\n            $migrationResult = $migrations->migrate();\n        } else {\n            $migrationResult = $migrations->migrate(['target' => $version]);\n        }\n        $command = ROOT . '/bin/cake schema_cache clear';\n        $output = shell_exec($command);\n        return [\n            'success' => true\n        ];\n    }\n\n    public function rollback($version=null) {\n        $migrations = new Migrations();\n        if (is_null($version)) {\n            $migrationResult = $migrations->rollback();\n        } else {\n            $migrationResult = $migrations->rollback(['target' => $version]);\n        }\n        return [\n            'success' => true\n        ];\n    }\n\n    public function getAvailableThemes()\n    {\n        $themesPath = ROOT . '/webroot/css/themes';\n        $dir = new Folder($themesPath);\n        $filesRegex = 'bootstrap-(?P<themename>\\w+)\\.css';\n        $themeRegex = '/' . 'bootstrap-(?P<themename>\\w+)\\.css' . '/';\n        $files = $dir->find($filesRegex);\n        $themes = [];\n        foreach ($files as $filename) {\n            $matches = [];\n            $themeName = preg_match($themeRegex, $filename, $matches);\n            if (!empty($matches['themename'])) {\n                $themes[] =  $matches['themename'];\n            }\n        }\n        return $themes;\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Controller;\n\nuse App\\Controller\\AppController;\nuse Cake\\Utility\\Inflector;\nuse Cake\\Utility\\Hash;\nuse Cake\\Utility\\Text;\nuse \\Cake\\Database\\Expression\\QueryExpression;\nuse Cake\\ORM\\TableRegistry;\nuse Cake\\Event\\EventInterface;\nuse Cake\\Core\\Configure;\n\nclass InstanceController extends AppController\n{\n    public function beforeFilter(EventInterface $event)\n    {\n        parent::beforeFilter($event);\n        $this->set('metaGroup', !empty($this->isAdmin) ? 'Cerebrate' : 'Administration');\n    }\n\n    public function home()\n    {\n        $statistics = $this->Instance->getStatistics();\n        $this->set('statistics', $statistics);\n    }\n\n    public function status()\n    {\n        $data = file_get_contents(APP . 'VERSION.json');\n        $data = json_decode($data, true);\n        $data['user'] = $this->ACL->getUser();\n        return $this->RestResponse->viewData($data, 'json');\n    }\n\n    public function searchAll()\n    {\n        $searchValue = $this->request->getQuery('search');\n        $model = $this->request->getQuery('model', null);\n        $limit = $this->request->getQuery('limit', 5);\n        $limit = is_numeric($limit) ? $limit : 5;\n        if (!empty($this->request->getQuery('show_all', false))) {\n            $limit = null;\n        }\n        $data = [];\n        if (!empty($searchValue)) {\n            $data = $this->Instance->searchAll($searchValue, $this->ACL->getUser(), $limit, $model);\n        }\n        if ($this->ParamHandler->isRest()) {\n            return $this->RestResponse->viewData($data, 'json');\n        }\n        $this->set('data', $data);\n    }\n\n    public function migrationIndex()\n    {\n        $migrationStatus = $this->Instance->getMigrationStatus();\n\n        $this->loadModel('Phinxlog');\n        $status = $this->Phinxlog->mergeMigrationLogIntoStatus($migrationStatus['status']);\n\n        foreach ($status as $i => $entry) {\n            if (!empty($entry['plugin'])) {\n                $pluginTablename = sprintf('%s_phinxlog', Inflector::underscore($entry['plugin']));\n                $pluginTablename = str_replace(['\\\\', '/', '.'], '_', $pluginTablename);\n                $status[$i] = $this->Phinxlog->mergeMigrationLogIntoStatus([$entry], $pluginTablename)[0];\n\n            }\n        }\n        usort($status, function($a, $b) {\n            return strcmp($b['id'], $a['id']);\n        });\n        if ($this->ParamHandler->isRest()) {\n            return $this->RestResponse->viewData([\n                'status' => $status,\n                'updateAvailables' => $migrationStatus['updateAvailables'],\n            ], 'json');\n        }\n        $this->set('status', $status);\n        $this->set('updateAvailables', $migrationStatus['updateAvailables']);\n    }\n\n    public function migrate($version=null) {\n        if ($this->request->is('post')) {\n            if (is_null($version)) {\n                $migrateResult = $this->Instance->migrate();\n            } else {\n                $migrateResult = $this->Instance->migrate(['target' => $version]);\n            }\n            if ($this->ParamHandler->isRest() || $this->ParamHandler->isAjax()) {\n                if ($migrateResult['success']) {\n                    return $this->RestResponse->saveSuccessResponse('instance', 'migrate', false, false, __('Migration sucessful'));\n                } else {\n                    return $this->RestResponse->saveFailResponse('instance', 'migrate', false, $migrateResult['error']);\n                }\n            } else {\n                if ($migrateResult['success']) {\n                    $this->Flash->success(__('Migration sucessful'));\n                    $this->redirect(['action' => 'migrationIndex']);\n                } else {\n                    $this->Flash->error(__('Migration fail'));\n                    $this->redirect(['action' => 'migrationIndex']);\n                }\n            }\n        }\n        $migrationStatus = $this->Instance->getMigrationStatus();\n        $this->set('title',  __n('Run database update?', 'Run all database updates?', count($migrationStatus['updateAvailables'])));\n        $this->set('question', __('The process might take some time.'));\n        $this->set('actionName', __n('Run update', 'Run all updates', count($migrationStatus['updateAvailables'])));\n        $this->set('path', ['controller' => 'instance', 'action' => 'migrate']);\n        $this->render('/genericTemplates/confirm');\n    }\n\n    public function rollback($version=null) {\n        if ($this->request->is('post')) {\n            if (is_null($version)) {\n                $migrateResult = $this->Instance->rollback();\n            } else {\n                $migrateResult = $this->Instance->rollback(['target' => $version]);\n            }\n            if ($this->ParamHandler->isRest() || $this->ParamHandler->isAjax()) {\n                if ($migrateResult['success']) {\n                    return $this->RestResponse->saveSuccessResponse('instance', 'rollback', false, false, __('Rollback sucessful'));\n                } else {\n                    return $this->RestResponse->saveFailResponse('instance', 'rollback', false, $migrateResult['error']);\n                }\n            } else {\n                if ($migrateResult['success']) {\n                    $this->Flash->success(__('Rollback sucessful'));\n                    $this->redirect(['action' => 'migrationIndex']);\n                } else {\n                    $this->Flash->error(__('Rollback fail'));\n                    $this->redirect(['action' => 'migrationIndex']);\n                }\n            }\n        }\n        $migrationStatus = $this->Instance->getMigrationStatus();\n        $this->set('title',  __('Run database rollback?'));\n        $this->set('question', __('The process might take some time.'));\n        $this->set('actionName', __('Run rollback'));\n        $this->set('path', ['controller' => 'instance', 'action' => 'rollback']);\n        $this->render('/genericTemplates/confirm');\n    }\n\n    public function settings()\n    {\n        $this->Settings = $this->getTableLocator()->get('Settings');\n        $all = $this->Settings->getSettings(true);\n        if ($this->ParamHandler->isRest()) {\n            return $this->RestResponse->viewData([\n                'settingsProvider' => $all['settingsProvider'],\n                'settings' => $all['settings'],\n                'settingsFlattened' => $all['settingsFlattened'],\n                'notices' => $all['notices'],\n            ], 'json');\n        }\n        $this->set('settingsProvider', $all['settingsProvider']);\n        $this->set('settings', $all['settings']);\n        $this->set('settingsFlattened', $all['settingsFlattened']);\n        $this->set('notices', $all['notices']);\n    }\n\n    public function saveSetting()\n    {\n        if ($this->request->is('post')) {\n            $data = $this->ParamHandler->harvestParams([\n                'name',\n                'value'\n            ]);\n            $this->Settings = $this->getTableLocator()->get('Settings');\n            $errors = $this->Settings->saveSetting($data['name'], $data['value']);\n            $message = __('Could not save setting `{0}`', $data['name']);\n            if (empty($errors)) {\n                $message = __('Setting `{0}` saved', $data['name']);\n                $data = $this->Settings->getSetting($data['name']);\n            }\n            $this->CRUD->setResponseForController('saveSetting', empty($errors), $message, $data, $errors);\n            $responsePayload = $this->CRUD->getResponsePayload();\n            if (!empty($responsePayload)) {\n                return $responsePayload;\n            }\n        }\n    }\n}\n", "<?php\n\nnamespace App\\Model\\Table;\n\nuse App\\Model\\Table\\AppTable;\nuse Cake\\ORM\\Table;\nuse Cake\\ORM\\TableRegistry;\nuse Cake\\Validation\\Validator;\nuse Migrations\\Migrations;\nuse Cake\\Filesystem\\Folder;\nuse Cake\\Http\\Exception\\MethodNotAllowedException;\n\nclass InstanceTable extends AppTable\n{\n    protected $activePlugins = ['Tags', 'ADmad/SocialAuth'];\n    public $seachAllTables = [];\n\n    public function initialize(array $config): void\n    {\n        parent::initialize($config);\n        $this->addBehavior('AuditLog');\n        $this->setDisplayField('name');\n        $this->setSearchAllTables();\n    }\n\n    public function validationDefault(Validator $validator): Validator\n    {\n        return $validator;\n    }\n\n    public function setSearchAllTables(): void\n    {\n        $this->seachAllTables = [\n            'Broods' => ['conditions' => false, 'afterFind' => false],\n            'Individuals' => ['conditions' => false, 'afterFind' => false],\n            'Organisations' => ['conditions' => false, 'afterFind' => false],\n            'SharingGroups' => [\n                'conditions' => false,\n                'afterFind' => function($result, $user) {\n                    foreach ($result as $i => $row) {\n                        if (empty($user['role']['perm_admin'])) {\n                            $orgFound = false;\n                            if (!empty($row['sharing_group_orgs'])) {\n                                foreach ($row['sharing_group_orgs'] as $org) {\n                                    if ($org['id'] === $user['organisation_id']) {\n                                        $orgFound = true;\n                                    }\n                                }\n                            }\n                            if ($row['organisation_id'] !== $user['organisation_id'] && !$orgFound) {\n                                unset($result[$i]);\n                            }\n                        }\n                    }\n                    return $result;\n                },\n            ],\n            'Users' => [\n                'conditions' => function($user) {\n                    $conditions = [];\n                    if (empty($user['role']['perm_admin'])) {\n                        $conditions['Users.organisation_id'] = $user['organisation_id'];\n                    }\n                    return $conditions;\n                },\n                'afterFind' => function ($result, $user) {\n                    return $result;\n                },\n            ],\n            'EncryptionKeys' => ['conditions' => false, 'afterFind' => false],\n        ];\n    }\n\n    public function getStatistics(int $days=30): array\n    {\n        $models = ['Individuals', 'Organisations', 'Alignments', 'EncryptionKeys', 'SharingGroups', 'Users', 'Broods', 'Tags.Tags'];\n        foreach ($models as $model) {\n            $table = TableRegistry::getTableLocator()->get($model);\n            $statistics[$model] = $this->getActivityStatisticsForModel($table, $days);\n        }\n        return $statistics;\n    }\n\n    public function searchAll($value, $user, int $limit=5, $model=null)\n    {\n        $results = [];\n        $models = $this->seachAllTables;\n        if (!is_null($model)) {\n            if (in_array($model, array_keys($this->seachAllTables))) {\n                $models = [$model => $this->seachAllTables[$model]];\n            } else {\n                return $results; // Cannot search in this model\n            }\n        }\n\n        // search in metafields. FIXME?: Use meta-fields type handler to search for meta-field values\n        if (is_null($model)) {\n            $metaFieldTable = TableRegistry::get('MetaFields');\n            $query = $metaFieldTable->find()->where([\n                'value LIKE' => '%' . $value . '%'\n            ]);\n            $results['MetaFields']['amount'] = $query->count();\n            $result = $query->limit($limit)->all()->toList();\n            if (!empty($result)) {\n                $results['MetaFields']['entries'] = $result;\n            }\n        }\n\n        foreach ($models as $tableName => $tableConfig) {\n            $controller = $this->getController($tableName);\n            $table = TableRegistry::get($tableName);\n            $query = $table->find();\n            $quickFilters = $this->getQuickFiltersFieldsFromController($controller);\n            $containFields = $this->getContainFieldsFromController($controller);\n            if (empty($quickFilters)) {\n                continue; // make sure we are filtering on something\n            }\n            $params = ['quickFilter' => $value];\n            $quickFilterOptions = ['quickFilters' => $quickFilters];\n            $query = $controller->CRUD->setQuickFilters($params, $query, $quickFilterOptions);\n            if (!empty($tableConfig['conditions'])) {\n                $whereClause = [];\n                if (is_callable($tableConfig['conditions'])) {\n                    $whereClause = $tableConfig['conditions']($user);\n                } else {\n                    $whereClause = $tableConfig['conditions'];\n                }\n                $query->where($whereClause);\n            }\n            if (!empty($containFields)) {\n                $query->contain($containFields);\n            }\n            if (!empty($tableConfig['contain'])) {\n                $query->contain($tableConfig['contain']);\n            }\n            if (empty($tableConfig['afterFind'])) {\n                $results[$tableName]['amount'] = $query->count();\n            }\n            $result = $query->limit($limit)->all()->toList();\n            if (!empty($result)) {\n                if (!empty($tableConfig['afterFind'])) {\n                    $result = $tableConfig['afterFind']($result, $user);\n                }\n                $results[$tableName]['entries'] = $result;\n                $results[$tableName]['amount'] = count($result);\n            }\n        }\n        return $results;\n    }\n\n    public function getController($name)\n    {\n        $controllerName = \"\\\\App\\\\Controller\\\\{$name}Controller\";\n        if (!class_exists($controllerName)) {\n            throw new MethodNotAllowedException(__('Model `{0}` does not exists', $name));\n        }\n        $controller = new $controllerName;\n        return $controller;\n    }\n\n    public function getQuickFiltersFieldsFromController($controller)\n    {\n        return !empty($controller->quickFilterFields) ? $controller->quickFilterFields : [];\n    }\n\n    public function getContainFieldsFromController($controller)\n    {\n        return !empty($controller->containFields) ? $controller->containFields : [];\n    }\n\n    public function getMigrationStatus()\n    {\n        $migrations = new Migrations();\n        $status = $migrations->status();\n        foreach ($this->activePlugins as $pluginName) {\n            $pluginStatus = $migrations->status([\n                'plugin' => $pluginName\n            ]);\n            $pluginStatus = array_map(function ($entry) use ($pluginName) {\n                $entry['plugin'] = $pluginName;\n                return $entry;\n            }, $pluginStatus);\n            $status = array_merge($status, $pluginStatus);\n        }\n        $status = array_reverse($status);\n\n        $updateAvailables = array_filter($status, function ($update) {\n            return $update['status'] != 'up';\n        });\n        return [\n            'status' => $status,\n            'updateAvailables' => $updateAvailables,\n        ];\n    }\n\n    public function migrate($version=null) {\n        $migrations = new Migrations();\n        if (is_null($version)) {\n            $migrationResult = $migrations->migrate();\n        } else {\n            $migrationResult = $migrations->migrate(['target' => $version]);\n        }\n        $command = ROOT . '/bin/cake schema_cache clear';\n        $output = shell_exec($command);\n        return [\n            'success' => true\n        ];\n    }\n\n    public function rollback($version=null) {\n        $migrations = new Migrations();\n        if (is_null($version)) {\n            $migrationResult = $migrations->rollback();\n        } else {\n            $migrationResult = $migrations->rollback(['target' => $version]);\n        }\n        return [\n            'success' => true\n        ];\n    }\n\n    public function getAvailableThemes()\n    {\n        $themesPath = ROOT . '/webroot/css/themes';\n        $dir = new Folder($themesPath);\n        $filesRegex = 'bootstrap-(?P<themename>\\w+)\\.css';\n        $themeRegex = '/' . 'bootstrap-(?P<themename>\\w+)\\.css' . '/';\n        $files = $dir->find($filesRegex);\n        $themes = [];\n        foreach ($files as $filename) {\n            $matches = [];\n            $themeName = preg_match($themeRegex, $filename, $matches);\n            if (!empty($matches['themename'])) {\n                $themes[] =  $matches['themename'];\n            }\n        }\n        return $themes;\n    }\n}\n"], "filenames": ["src/Controller/InstanceController.php", "src/Model/Table/InstanceTable.php"], "buggy_code_start_loc": [40, 84], "buggy_code_end_loc": [40, 85], "fixing_code_start_loc": [41, 84], "fixing_code_end_loc": [42, 85], "type": "CWE-89", "message": "In Cerebrate 1.13, a blind SQL injection exists in the searchAll API endpoint.", "other": {"cve": {"id": "CVE-2023-28883", "sourceIdentifier": "cve@mitre.org", "published": "2023-03-27T03:15:07.193", "lastModified": "2023-03-31T00:15:04.617", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Cerebrate 1.13, a blind SQL injection exists in the searchAll API endpoint."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cerebrate-project:cerebrate:1.13:*:*:*:*:*:*:*", "matchCriteriaId": "9EC9D276-F497-4347-9E8D-70EEEDD450B1"}]}]}], "references": [{"url": "https://github.com/cerebrate-project/cerebrate/commit/5f1c99cd534442ec40c2129769608e3e61ff8be3", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/cerebrate-project/cerebrate/commit/5f1c99cd534442ec40c2129769608e3e61ff8be3"}}