{"buggy_code": ["/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.apiv1.backupconfig;\n\nimport com.thoughtworks.go.api.ApiController;\nimport com.thoughtworks.go.api.ApiVersion;\nimport com.thoughtworks.go.api.CrudController;\nimport com.thoughtworks.go.api.base.OutputWriter;\nimport com.thoughtworks.go.api.representers.JsonReader;\nimport com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\nimport com.thoughtworks.go.api.util.GsonTransformer;\nimport com.thoughtworks.go.api.util.MessageJson;\nimport com.thoughtworks.go.apiv1.backupconfig.representers.BackupConfigRepresenter;\nimport com.thoughtworks.go.config.BackupConfig;\nimport com.thoughtworks.go.config.exceptions.EntityType;\nimport com.thoughtworks.go.config.exceptions.GoConfigInvalidException;\nimport com.thoughtworks.go.config.update.CreateOrUpdateBackupConfigCommand;\nimport com.thoughtworks.go.config.update.DeleteBackupConfigCommand;\nimport com.thoughtworks.go.server.service.GoConfigService;\nimport com.thoughtworks.go.spark.Routes;\nimport com.thoughtworks.go.spark.spring.SparkSpringController;\nimport org.apache.http.HttpStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport spark.Request;\nimport spark.Response;\n\nimport java.io.IOException;\nimport java.util.function.Consumer;\n\nimport static spark.Spark.*;\n\n@Component\npublic class BackupConfigControllerV1 extends ApiController implements SparkSpringController, CrudController<BackupConfig> {\n\n    private final ApiAuthenticationHelper apiAuthenticationHelper;\n    private final GoConfigService goConfigService;\n\n    @Autowired\n    public BackupConfigControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, GoConfigService goConfigService) {\n        super(ApiVersion.v1);\n        this.apiAuthenticationHelper = apiAuthenticationHelper;\n        this.goConfigService = goConfigService;\n    }\n\n    @Override\n    public String controllerBasePath() {\n        return Routes.BackupConfig.BASE;\n    }\n\n    @Override\n    public void setupRoutes() {\n        path(controllerBasePath(), () -> {\n            before(\"\", mimeType, this::setContentType);\n\n\n            // change the line below to enable appropriate security\n            before(\"\", mimeType, this.apiAuthenticationHelper::checkAdminUserAnd403);\n\n            get(\"\", mimeType, this::show);\n\n            post(\"\", mimeType, this::createOrUpdate);\n            put(\"\", mimeType, this::createOrUpdate);\n\n            delete(\"\", mimeType, this::deleteBackupConfig);\n        });\n    }\n\n    public String show(Request req, Response res) throws IOException {\n        BackupConfig backupConfig = doFetchEntityFromConfig();\n\n        if (backupConfig == null) {\n            backupConfig = new BackupConfig();\n        }\n\n        return writerForTopLevelObject(req, res, jsonWriter(backupConfig));\n    }\n\n    public String createOrUpdate(Request req, Response res) throws IOException {\n        BackupConfig backupConfig = buildEntityFromRequestBody(req);\n        try {\n            goConfigService.updateConfig(new CreateOrUpdateBackupConfigCommand(backupConfig), currentUsername());\n        } catch (GoConfigInvalidException e) {\n            res.status(HttpStatus.SC_UNPROCESSABLE_ENTITY);\n            return MessageJson.create(e.getMessage(), jsonWriter(backupConfig));\n        }\n        return show(req, res);\n    }\n\n    public String deleteBackupConfig(Request req, Response res) throws IOException {\n        // to throw a NFE, if none is available\n        fetchEntityFromConfig();\n\n        goConfigService.updateConfig(new DeleteBackupConfigCommand(), currentUsername());\n\n        return renderMessage(res, 200, EntityType.BackupConfig.deleteSuccessful());\n    }\n\n    @Override\n    public String etagFor(BackupConfig entityFromServer) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public EntityType getEntityType() {\n        return EntityType.BackupConfig;\n    }\n\n    @Override\n    public BackupConfig doFetchEntityFromConfig() {\n        return goConfigService.serverConfig().getBackupConfig();\n    }\n\n    @Override\n    public BackupConfig buildEntityFromRequestBody(Request req) {\n        JsonReader jsonReader = GsonTransformer.getInstance().jsonReaderFrom(req.body());\n        return BackupConfigRepresenter.fromJSON(jsonReader);\n    }\n\n    @Override\n    public Consumer<OutputWriter> jsonWriter(BackupConfig backupConfig) {\n        return outputWriter -> BackupConfigRepresenter.toJSON(outputWriter, backupConfig);\n    }\n}\n"], "fixing_code": ["/*\n * Copyright 2021 ThoughtWorks, Inc.\n *\n * Licensed under the Apache License, Version 2.0 (the \"License\");\n * you may not use this file except in compliance with the License.\n * You may obtain a copy of the License at\n *\n *     http://www.apache.org/licenses/LICENSE-2.0\n *\n * Unless required by applicable law or agreed to in writing, software\n * distributed under the License is distributed on an \"AS IS\" BASIS,\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n * See the License for the specific language governing permissions and\n * limitations under the License.\n */\npackage com.thoughtworks.go.apiv1.backupconfig;\n\nimport com.thoughtworks.go.api.ApiController;\nimport com.thoughtworks.go.api.ApiVersion;\nimport com.thoughtworks.go.api.CrudController;\nimport com.thoughtworks.go.api.base.OutputWriter;\nimport com.thoughtworks.go.api.representers.JsonReader;\nimport com.thoughtworks.go.api.spring.ApiAuthenticationHelper;\nimport com.thoughtworks.go.api.util.GsonTransformer;\nimport com.thoughtworks.go.api.util.MessageJson;\nimport com.thoughtworks.go.apiv1.backupconfig.representers.BackupConfigRepresenter;\nimport com.thoughtworks.go.config.BackupConfig;\nimport com.thoughtworks.go.config.exceptions.EntityType;\nimport com.thoughtworks.go.config.exceptions.GoConfigInvalidException;\nimport com.thoughtworks.go.config.update.CreateOrUpdateBackupConfigCommand;\nimport com.thoughtworks.go.config.update.DeleteBackupConfigCommand;\nimport com.thoughtworks.go.server.service.GoConfigService;\nimport com.thoughtworks.go.spark.Routes;\nimport com.thoughtworks.go.spark.spring.SparkSpringController;\nimport org.apache.http.HttpStatus;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Component;\nimport spark.Request;\nimport spark.Response;\n\nimport java.io.IOException;\nimport java.util.function.Consumer;\n\nimport static spark.Spark.*;\n\n@Component\npublic class BackupConfigControllerV1 extends ApiController implements SparkSpringController, CrudController<BackupConfig> {\n\n    private final ApiAuthenticationHelper apiAuthenticationHelper;\n    private final GoConfigService goConfigService;\n\n    @Autowired\n    public BackupConfigControllerV1(ApiAuthenticationHelper apiAuthenticationHelper, GoConfigService goConfigService) {\n        super(ApiVersion.v1);\n        this.apiAuthenticationHelper = apiAuthenticationHelper;\n        this.goConfigService = goConfigService;\n    }\n\n    @Override\n    public String controllerBasePath() {\n        return Routes.BackupConfig.BASE;\n    }\n\n    @Override\n    public void setupRoutes() {\n        path(controllerBasePath(), () -> {\n            before(\"\", mimeType, this::setContentType);\n            before(\"/*\", mimeType, this::setContentType);\n            before(\"\", mimeType, this::verifyContentType);\n            before(\"/*\", mimeType, this::verifyContentType);\n\n            // change the line below to enable appropriate security\n            before(\"\", mimeType, this.apiAuthenticationHelper::checkAdminUserAnd403);\n\n            get(\"\", mimeType, this::show);\n\n            post(\"\", mimeType, this::createOrUpdate);\n            put(\"\", mimeType, this::createOrUpdate);\n\n            delete(\"\", mimeType, this::deleteBackupConfig);\n        });\n    }\n\n    public String show(Request req, Response res) throws IOException {\n        BackupConfig backupConfig = doFetchEntityFromConfig();\n\n        if (backupConfig == null) {\n            backupConfig = new BackupConfig();\n        }\n\n        return writerForTopLevelObject(req, res, jsonWriter(backupConfig));\n    }\n\n    public String createOrUpdate(Request req, Response res) throws IOException {\n        BackupConfig backupConfig = buildEntityFromRequestBody(req);\n        try {\n            goConfigService.updateConfig(new CreateOrUpdateBackupConfigCommand(backupConfig), currentUsername());\n        } catch (GoConfigInvalidException e) {\n            res.status(HttpStatus.SC_UNPROCESSABLE_ENTITY);\n            return MessageJson.create(e.getMessage(), jsonWriter(backupConfig));\n        }\n        return show(req, res);\n    }\n\n    public String deleteBackupConfig(Request req, Response res) throws IOException {\n        // to throw a NFE, if none is available\n        fetchEntityFromConfig();\n\n        goConfigService.updateConfig(new DeleteBackupConfigCommand(), currentUsername());\n\n        return renderMessage(res, 200, EntityType.BackupConfig.deleteSuccessful());\n    }\n\n    @Override\n    public String etagFor(BackupConfig entityFromServer) {\n        throw new UnsupportedOperationException();\n    }\n\n    @Override\n    public EntityType getEntityType() {\n        return EntityType.BackupConfig;\n    }\n\n    @Override\n    public BackupConfig doFetchEntityFromConfig() {\n        return goConfigService.serverConfig().getBackupConfig();\n    }\n\n    @Override\n    public BackupConfig buildEntityFromRequestBody(Request req) {\n        JsonReader jsonReader = GsonTransformer.getInstance().jsonReaderFrom(req.body());\n        return BackupConfigRepresenter.fromJSON(jsonReader);\n    }\n\n    @Override\n    public Consumer<OutputWriter> jsonWriter(BackupConfig backupConfig) {\n        return outputWriter -> BackupConfigRepresenter.toJSON(outputWriter, backupConfig);\n    }\n}\n"], "filenames": ["api/api-backup-config-v1/src/main/java/com/thoughtworks/go/apiv1/backupconfig/BackupConfigControllerV1.java"], "buggy_code_start_loc": [68], "buggy_code_end_loc": [69], "fixing_code_start_loc": [68], "fixing_code_end_loc": [71], "type": "CWE-352", "message": "In GoCD, versions 19.6.0 to 21.1.0 are vulnerable to Cross-Site Request Forgery due to missing CSRF protection at the `/go/api/config/backup` endpoint. An attacker can trick a victim to click on a malicious link which could change backup configurations or execute system commands in the post_backup_script field.", "other": {"cve": {"id": "CVE-2021-25924", "sourceIdentifier": "vulnerabilitylab@mend.io", "published": "2021-04-01T18:15:12.997", "lastModified": "2021-04-06T18:26:10.417", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In GoCD, versions 19.6.0 to 21.1.0 are vulnerable to Cross-Site Request Forgery due to missing CSRF protection at the `/go/api/config/backup` endpoint. An attacker can trick a victim to click on a malicious link which could change backup configurations or execute system commands in the post_backup_script field."}, {"lang": "es", "value": "En GoCD, versiones 19.6.0 hasta 21.1.0, son vulnerables a un ataque de tipo Cross-Site Request Forgery debido a la falta de protecci\u00f3n CSRF en el endpoint \"/go/api/config/backup\".&#xa0;Un atacante puede enga\u00f1ar a una v\u00edctima para que haga clic en un enlace malicioso que podr\u00eda cambiar la configuraci\u00f3n de la copia de seguridad o ejecutar comandos del sistema en el campo post_backup_script."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 9.3}, "baseSeverity": "HIGH", "exploitabilityScore": 8.6, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:thoughtworks:gocd:*:*:*:*:*:*:*:*", "versionStartIncluding": "19.6.0", "versionEndExcluding": "21.2.0", "matchCriteriaId": "89B93525-69E5-40CF-BBC6-0D5608C7783C"}]}]}], "references": [{"url": "https://github.com/gocd/gocd/commit/7d0baab0d361c377af84994f95ba76c280048548", "source": "vulnerabilitylab@mend.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.whitesourcesoftware.com/vulnerability-database/CVE-2021-25924,", "source": "vulnerabilitylab@mend.io", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gocd/gocd/commit/7d0baab0d361c377af84994f95ba76c280048548"}}