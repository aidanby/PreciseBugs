{"buggy_code": ["'use strict';\n\nvar\trequest = require('request'),\n\tcheerio = require('cheerio');\n\n\nvar shorthandProperties = {\n\t\"image\": \"image:url\",\n\t\"video\": \"video:url\",\n\t\"audio\": \"audio:url\"\n}\n\n\nexports = module.exports = function(url, cb, options){\n  var userAgent = (options || {}).userAgent || 'NodeOpenGraphCrawler (https://github.com/samholmes/node-open-graph)'\n\texports.getHTML(url, userAgent, function(err, html){\n\t\tif (err) return cb(err);\n\n\t\ttry {\n\t\t\tvar parsedMeta = exports.parse(html, options);\n\t\t}\n\t\tcatch (parseErr) {\n\t\t\tcb(parseErr);\n\t\t}\n\n\t\tcb(null, parsedMeta);\n\t})\n}\n\n\nexports.getHTML = function(url, userAgent, cb){\n\tvar purl = require('url').parse(url);\n\n\tif (!purl.protocol)\n\t\tpurl = require('url').parse(\"http://\"+url);\n\n\turl = require('url').format(purl);\n\n\trequest({\n\t\t\turl: url,\n\t\t\tencoding: 'utf8',\n\t\t\tgzip: true,\n      jar: true,\n      headers: { 'User-Agent': userAgent },\n\t\t},\n\t\tfunction(err, res, body) {\n\t\t\tif (err) return cb(err);\n\n\t\t\tif (res.statusCode === 200) {\n\t\t\t\tcb(null, body);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcb(new Error(\"Request failed with HTTP status code: \"+res.statusCode));\n\t\t\t}\n\t\t})\n}\n\n\nexports.parse = function($, options){\n\toptions = options || {};\n\n\tif (typeof $ === 'string')\n\t\t$ = cheerio.load($);\n\n\t// Check for xml namespace\n\tvar namespace,\n\t\t$html = $('html');\n\n\tif ($html.length)\n\t{\n\t\tvar attribKeys = Object.keys($html[0].attribs);\n\n\t\tattribKeys.some(function(attrName){\n\t\t\tvar attrValue = $html.attr(attrName);\n\n\t\t\tif (attrValue.toLowerCase() === 'http://opengraphprotocol.org/schema/'\n\t\t\t\t&& attrName.substring(0, 6) == 'xmlns:')\n\t\t\t{\n\t\t\t\tnamespace = attrName.substring(6);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t})\n\t}\n\telse if (options.strict)\n\t\treturn null;\n\n\tif (!namespace)\n\t\t// If no namespace is explicitly set..\n\t\tif (options.strict)\n\t\t\t// and strict mode is specified, abort parse.\n\t\t\treturn null;\n\t\telse\n\t\t\t// and strict mode is not specific, then default to \"og\"\n\t\t\tnamespace = \"og\";\n\n\tvar meta = {},\n\t\tmetaTags = $('meta');\n\n\tmetaTags.each(function() {\n\t\tvar element = $(this),\n\t\t\tpropertyAttr = element.attr('property');\n\n\t\t// If meta element isn't an \"og:\" property, skip it\n\t\tif (!propertyAttr || propertyAttr.substring(0, namespace.length) !== namespace)\n\t\t\treturn;\n\n\t\tvar property = propertyAttr.substring(namespace.length+1),\n\t\t\tcontent = element.attr('content');\n\n\t\t// If property is a shorthand for a longer property,\n\t\t// Use the full property\n\t\tproperty = shorthandProperties[property] || property;\n\n\n\t\tvar key, tmp,\n\t\t\tptr = meta,\n\t\t\tkeys = property.split(':', 4);\n\n\t\t// we want to leave one key to assign to so we always use references\n\t\t// as long as there's one key left, we're dealing with a sub-node and not a value\n\n\t\twhile (keys.length > 1) {\n\t\t\tkey = keys.shift();\n\n\t\t\tif (Array.isArray(ptr[key])) {\n\t\t\t\t// the last index of ptr[key] should become\n\t\t\t\t// the object we are examining.\n\t\t\t\ttmp = ptr[key].length-1;\n\t\t\t\tptr = ptr[key];\n\t\t\t\tkey = tmp;\n\t\t\t}\n\n\t\t\tif (typeof ptr[key] === 'string') {\n\t\t\t\t// if it's a string, convert it\n\t\t\t\tptr[key] = { '': ptr[key] };\n\t\t\t} else if (ptr[key] === undefined) {\n\t\t\t\t// create a new key\n\t\t\t\tptr[key] = {};\n\t\t\t}\n\n\t\t\t// move our pointer to the next subnode\n\t\t\tptr = ptr[key];\n\t\t}\n\n\t\t// deal with the last key\n\t\tkey = keys.shift();\n\n\t\tif (ptr[key] === undefined) {\n\t\t\tptr[key] = content;\n\t\t} else if (Array.isArray(ptr[key])) {\n\t\t\tptr[key].push(content);\n\t\t} else {\n\t\t\tptr[key] = [ ptr[key], content ];\n\t\t}\n\t});\n\n\n\t// If no 'og:title', use title tag\n\tif(!meta.hasOwnProperty('title')){\n\t\tmeta['title'] = $('title').text();\n\t}\n\n\n\t// Temporary fallback for image meta.\n\t// Fallback to the first image on the page.\n\t// In the future, the image property could be populated\n\t// with an array of images, maybe.\n\tif(!meta.hasOwnProperty('image')){\n\t\tvar img = $('img');\n\n\t\t// If there are image elements in the page\n\t\tif(img.length){\n\t\t\tvar imgObj = {};\n\t\t\timgObj.url = $('img').attr('src');\n\n\t\t\t// Set image width and height properties if respective attributes exist\n\t\t\tif($('img').attr('width'))\n\t\t\t\timgObj.width = $('img').attr('width');\n\t\t\tif($('img').attr('height'))\n\t\t\t\timgObj.height = $('img').attr('height');\n\n\t\t\tmeta['image'] = imgObj;\n\t\t}\n\n\t}\n\n\treturn meta;\n}\n"], "fixing_code": ["'use strict';\n\nvar\trequest = require('request'),\n\tcheerio = require('cheerio');\n\n\nvar shorthandProperties = {\n\t\"image\": \"image:url\",\n\t\"video\": \"video:url\",\n\t\"audio\": \"audio:url\"\n}\n\nvar keyBlacklist = [\n\t'__proto__',\n\t'constructor',\n\t'prototype'\n]\n\nexports = module.exports = function(url, cb, options){\n  var userAgent = (options || {}).userAgent || 'NodeOpenGraphCrawler (https://github.com/samholmes/node-open-graph)'\n\texports.getHTML(url, userAgent, function(err, html){\n\t\tif (err) return cb(err);\n\n\t\ttry {\n\t\t\tvar parsedMeta = exports.parse(html, options);\n\t\t}\n\t\tcatch (parseErr) {\n\t\t\tcb(parseErr);\n\t\t}\n\n\t\tcb(null, parsedMeta);\n\t})\n}\n\n\nexports.getHTML = function(url, userAgent, cb){\n\tvar purl = require('url').parse(url);\n\n\tif (!purl.protocol)\n\t\tpurl = require('url').parse(\"http://\"+url);\n\n\turl = require('url').format(purl);\n\n\trequest({\n\t\t\turl: url,\n\t\t\tencoding: 'utf8',\n\t\t\tgzip: true,\n      jar: true,\n      headers: { 'User-Agent': userAgent },\n\t\t},\n\t\tfunction(err, res, body) {\n\t\t\tif (err) return cb(err);\n\n\t\t\tif (res.statusCode === 200) {\n\t\t\t\tcb(null, body);\n\t\t\t}\n\t\t\telse {\n\t\t\t\tcb(new Error(\"Request failed with HTTP status code: \"+res.statusCode));\n\t\t\t}\n\t\t})\n}\n\n\nexports.parse = function($, options){\n\toptions = options || {};\n\n\tif (typeof $ === 'string')\n\t\t$ = cheerio.load($);\n\n\t// Check for xml namespace\n\tvar namespace,\n\t\t$html = $('html');\n\n\tif ($html.length)\n\t{\n\t\tvar attribKeys = Object.keys($html[0].attribs);\n\n\t\tattribKeys.some(function(attrName){\n\t\t\tvar attrValue = $html.attr(attrName);\n\n\t\t\tif (attrValue.toLowerCase() === 'http://opengraphprotocol.org/schema/'\n\t\t\t\t&& attrName.substring(0, 6) == 'xmlns:')\n\t\t\t{\n\t\t\t\tnamespace = attrName.substring(6);\n\t\t\t\treturn false;\n\t\t\t}\n\t\t})\n\t}\n\telse if (options.strict)\n\t\treturn null;\n\n\tif (!namespace)\n\t\t// If no namespace is explicitly set..\n\t\tif (options.strict)\n\t\t\t// and strict mode is specified, abort parse.\n\t\t\treturn null;\n\t\telse\n\t\t\t// and strict mode is not specific, then default to \"og\"\n\t\t\tnamespace = \"og\";\n\n\tvar meta = {},\n\t\tmetaTags = $('meta');\n\n\tmetaTags.each(function() {\n\t\tvar element = $(this),\n\t\t\tpropertyAttr = element.attr('property');\n\n\t\t// If meta element isn't an \"og:\" property, skip it\n\t\tif (!propertyAttr || propertyAttr.substring(0, namespace.length) !== namespace)\n\t\t\treturn;\n\n\t\tvar property = propertyAttr.substring(namespace.length+1),\n\t\t\tcontent = element.attr('content');\n\n\t\t// If property is a shorthand for a longer property,\n\t\t// Use the full property\n\t\tproperty = shorthandProperties[property] || property;\n\n\n\t\tvar key, tmp,\n\t\t\tptr = meta,\n\t\t\tkeys = property.split(':', 4);\n\n\t\t// we want to leave one key to assign to so we always use references\n\t\t// as long as there's one key left, we're dealing with a sub-node and not a value\n\n\t\twhile (keys.length > 1) {\n\t\t\tkey = keys.shift();\n\n\t\t\tif (keyBlacklist.includes(key)) continue\n\n\t\t\tif (Array.isArray(ptr[key])) {\n\t\t\t\t// the last index of ptr[key] should become\n\t\t\t\t// the object we are examining.\n\t\t\t\ttmp = ptr[key].length-1;\n\t\t\t\tptr = ptr[key];\n\t\t\t\tkey = tmp;\n\t\t\t}\n\n\t\t\tif (typeof ptr[key] === 'string') {\n\t\t\t\t// if it's a string, convert it\n\t\t\t\tptr[key] = { '': ptr[key] };\n\t\t\t} else if (ptr[key] === undefined) {\n\t\t\t\t// create a new key\n\t\t\t\tptr[key] = {};\n\t\t\t}\n\n\t\t\t// move our pointer to the next subnode\n\t\t\tptr = ptr[key];\n\t\t}\n\n\t\t// deal with the last key\n\t\tkey = keys.shift();\n\n\t\tif (ptr[key] === undefined) {\n\t\t\tptr[key] = content;\n\t\t} else if (Array.isArray(ptr[key])) {\n\t\t\tptr[key].push(content);\n\t\t} else {\n\t\t\tptr[key] = [ ptr[key], content ];\n\t\t}\n\t});\n\n\n\t// If no 'og:title', use title tag\n\tif(!meta.hasOwnProperty('title')){\n\t\tmeta['title'] = $('title').text();\n\t}\n\n\n\t// Temporary fallback for image meta.\n\t// Fallback to the first image on the page.\n\t// In the future, the image property could be populated\n\t// with an array of images, maybe.\n\tif(!meta.hasOwnProperty('image')){\n\t\tvar img = $('img');\n\n\t\t// If there are image elements in the page\n\t\tif(img.length){\n\t\t\tvar imgObj = {};\n\t\t\timgObj.url = $('img').attr('src');\n\n\t\t\t// Set image width and height properties if respective attributes exist\n\t\t\tif($('img').attr('width'))\n\t\t\t\timgObj.width = $('img').attr('width');\n\t\t\tif($('img').attr('height'))\n\t\t\t\timgObj.height = $('img').attr('height');\n\n\t\t\tmeta['image'] = imgObj;\n\t\t}\n\n\t}\n\n\treturn meta;\n}\n"], "filenames": ["index.js"], "buggy_code_start_loc": [12], "buggy_code_end_loc": [124], "fixing_code_start_loc": [13], "fixing_code_end_loc": [132], "type": "CWE-1321", "message": "This affects the package open-graph before 0.2.6. The function parse could be tricked into adding or modifying properties of Object.prototype using a __proto__ or constructor payload.", "other": {"cve": {"id": "CVE-2021-23419", "sourceIdentifier": "report@snyk.io", "published": "2021-08-08T08:15:06.150", "lastModified": "2022-12-02T19:35:03.043", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package open-graph before 0.2.6. The function parse could be tricked into adding or modifying properties of Object.prototype using a __proto__ or constructor payload."}, {"lang": "es", "value": "Esto afecta al paquete open-graph versiones anteriores a 0.2.6. La funci\u00f3n parse pod\u00eda ser enga\u00f1ada para a\u00f1adir o modificar propiedades de Object.prototype usando un __proto__ o constructor de carga \u00fatil"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 7.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1321"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-graph_project:open-graph:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.2.6", "matchCriteriaId": "B18168DF-2673-479E-B2E9-3B137561A850"}]}]}], "references": [{"url": "https://github.com/samholmes/node-open-graph/commit/a0cef507a90adaac7dbbe9c404f09a50bdefb348", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-JS-OPENGRAPH-1536747", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/samholmes/node-open-graph/commit/a0cef507a90adaac7dbbe9c404f09a50bdefb348"}}