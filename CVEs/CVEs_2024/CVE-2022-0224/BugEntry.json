{"buggy_code": ["<?php\n/* Copyright (C) 2001-2003 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2017 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2009 Regis Houssin        <regis.houssin@inodbox.com>\n * Copyright (C) 2016      Fr\u00e9d\u00e9ric France      <frederic.france@free.fr>\n * Copyright (C) 2020      Pierre Ardoin     \t<mapiolca@me.com>\n * Copyright (C) 2020\t\tTobias Sekan\t\t<tobias.sekan@startmail.com>\n * Copyright (C) 2021      Gauthier VERDOL     \t<gauthier.verdol@atm-consulting.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file\t\thtdocs/compta/sociales/list.php\n *\t\\ingroup\ttax\n *\t\\brief\t\tPage to list all social contributions\n */\n\nrequire '../../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/compta/sociales/class/chargesociales.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/compta/bank/class/account.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formsocialcontrib.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\nif (!empty($conf->projet->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\n}\n\n// Load translation files required by the page\n$langs->loadLangs(array('compta', 'banks', 'bills', 'hrm', 'projects'));\n\n$action\t\t\t\t= GETPOST('action', 'aZ09');\n$massaction\t\t\t= GETPOST('massaction', 'alpha');\n$confirm\t\t\t= GETPOST('confirm', 'alpha');\n$optioncss = GETPOST('optioncss', 'alpha');\n$contextpage\t\t= GETPOST('contextpage', 'aZ') ? GETPOST('contextpage', 'aZ') : 'sclist';\n\n$search_ref\t\t\t= GETPOST('search_ref', 'int');\n$search_label = GETPOST('search_label', 'alpha');\n$search_amount\t\t= GETPOST('search_amount', 'alpha');\n$search_status\t\t= GETPOST('search_status', 'int');\n$search_day_lim\t\t= GETPOST('search_day_lim', 'int');\n$search_month_lim = GETPOST('search_month_lim', 'int');\n$search_year_lim\t= GETPOST('search_year_lim', 'int');\n$search_project_ref = GETPOST('search_project_ref', 'alpha');\n$search_project = GETPOST('search_project', 'alpha');\n$search_users = GETPOST('search_users');\n$search_type = GETPOST('search_type', 'int');\n$search_account\t\t\t\t= GETPOST('search_account', 'int');\n\n$limit = GETPOST('limit', 'int') ? GETPOST('limit', 'int') : $conf->liste_limit;\n$sortfield\t\t\t= GETPOST(\"sortfield\", 'alpha');\n$sortorder\t\t\t= GETPOST(\"sortorder\", 'aZ09comma');\n$page = GETPOSTISSET('pageplusone') ? (GETPOST('pageplusone') - 1) : GETPOST(\"page\", 'int');\n\nif (empty($page) || $page == -1) {\n\t$page = 0; // If $page is not defined, or '' or -1\n}\n$offset = $limit * $page;\n$pageprev = $page - 1;\n$pagenext = $page + 1;\n\nif (!$sortfield) {\n\t$sortfield = \"cs.date_ech\";\n}\nif (!$sortorder) {\n\t$sortorder = \"DESC\";\n}\n\n$year = GETPOST(\"year\", 'int');\n$filtre = GETPOST(\"filtre\", 'int');\n\nif (!GETPOSTISSET('search_typeid')) {\n\t$newfiltre = str_replace('filtre=', '', $filtre);\n\t$filterarray = explode('-', $newfiltre);\n\tforeach ($filterarray as $val) {\n\t\t$part = explode(':', $val);\n\t\tif ($part[0] == 'cs.fk_type') {\n\t\t\t$search_typeid = $part[1];\n\t\t}\n\t}\n} else {\n\t$search_typeid = GETPOST('search_typeid', 'int');\n}\n\n$arrayfields = array(\n\t'cs.rowid'\t\t=>array('label'=>\"Ref\", 'checked'=>1, 'position'=>10),\n\t'cs.libelle'\t=>array('label'=>\"Label\", 'checked'=>1, 'position'=>20),\n\t'cs.fk_type'\t=>array('label'=>\"Type\", 'checked'=>1, 'position'=>30),\n\t'cs.date_ech'\t=>array('label'=>\"Date\", 'checked'=>1, 'position'=>40),\n\t'cs.periode'\t=>array('label'=>\"PeriodEndDate\", 'checked'=>1, 'position'=>50),\n\t'p.ref'\t\t\t=>array('label'=>\"ProjectRef\", 'checked'=>1, 'position'=>60, 'enable'=>(!empty($conf->projet->enabled))),\n\t'cs.fk_user'\t=>array('label'=>\"Employee\", 'checked'=>1, 'position'=>70),\n\t'cs.fk_mode_reglement'\t=>array('checked'=>-1, 'position'=>80, 'label'=>\"DefaultPaymentMode\"),\n\t'cs.amount'\t\t=>array('label'=>\"Amount\", 'checked'=>1, 'position'=>100),\n\t'cs.paye'\t\t=>array('label'=>\"Status\", 'checked'=>1, 'position'=>110),\n);\n\nif (!empty($conf->banque->enabled)) {\n\t$arrayfields['cs.fk_account'] = array('checked'=>-1, 'position'=>90, 'label'=>\"DefaultBankAccount\");\n}\n\n$arrayfields = dol_sort_array($arrayfields, 'position');\n\n// Initialize technical object to manage hooks of page. Note that conf->hooks_modules contains array of hook context\n$hookmanager->initHooks(array('sclist'));\n$object = new ChargeSociales($db);\n\n// Security check\n$socid = GETPOST(\"socid\", 'int');\nif ($user->socid) {\n\t$socid = $user->socid;\n}\n$result = restrictedArea($user, 'tax', '', 'chargesociales', 'charges');\n\n\n/*\n * Actions\n */\n\n$parameters = array('socid'=>$socid);\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) {\n\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n}\n\n\nif (empty($reshook)) {\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_changeselectedfields.inc.php';\n\n\t// All tests are required to be compatible with all browsers\n\tif (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')) {\n\t\t$search_ref = '';\n\t\t$search_label = '';\n\t\t$search_amount = '';\n\t\t$search_status = '';\n\t\t$search_typeid = '';\n\t\t$year = '';\n\t\t$search_day_lim = '';\n\t\t$search_year_lim = '';\n\t\t$search_month_lim = '';\n\t\t$search_project_ref = '';\n\t\t$search_project = '';\n\t\t$search_users = '';\n\t\t$search_type = '';\n\t\t$search_account = '';\n\t\t$search_array_options = array();\n\t}\n}\n\n/*\n *\tView\n */\n\n$form = new Form($db);\n$formother = new FormOther($db);\n$bankstatic = new Account($db);\n$formsocialcontrib = new FormSocialContrib($db);\n$chargesociale_static = new ChargeSociales($db);\nif (!empty($conf->projet->enabled)) {\n\t$projectstatic = new Project($db);\n}\n\nllxHeader('', $langs->trans(\"SocialContributions\"));\n\n$sql = \"SELECT cs.rowid, cs.fk_type as type, cs.fk_user,\";\n$sql .= \" cs.amount, cs.date_ech, cs.libelle as label, cs.paye, cs.periode,\";\nif (!empty($conf->projet->enabled)) {\n\t$sql .= \" p.rowid as project_id, p.ref as project_ref, p.title as project_label,\";\n}\n$sql .= \" c.libelle as type_label, cs.fk_account,\";\n$sql .= \" ba.label as blabel, ba.ref as bref, ba.number as bnumber, ba.account_number, ba.iban_prefix as iban, ba.bic, ba.currency_code, ba.clos,\";\n$sql .= \" SUM(pc.amount) as alreadypayed, pay.code as payment_code\";\n$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_chargesociales as c,\";\n$sql .= \" \".MAIN_DB_PREFIX.\"chargesociales as cs\";\n$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"bank_account as ba ON (cs.fk_account = ba.rowid)\";\n$sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_paiement as pay ON (cs.fk_mode_reglement = pay.id)';\nif (!empty($conf->projet->enabled)) {\n\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"projet as p ON p.rowid = cs.fk_projet\";\n}\n$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"paiementcharge as pc ON pc.fk_charge = cs.rowid\";\n$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"user as u ON (cs.fk_user = u.rowid)\";\n$sql .= \" WHERE cs.fk_type = c.id\";\n$sql .= \" AND cs.entity = \".$conf->entity;\n// Search criteria\nif ($search_ref) {\n\t$sql .= \" AND cs.ref = '\".$db->escape($search_ref).\"'\";\n}\nif ($search_label) {\n\t$sql .= natural_search(\"cs.libelle\", $search_label);\n}\nif (!empty($conf->projet->enabled)) {\n\tif ($search_project_ref != '') {\n\t\t$sql .= natural_search(\"p.ref\", $search_project_ref);\n\t}\n}\nif (!empty($search_users)) {\n\t$sql .= ' AND cs.fk_user IN('.implode(', ', $search_users).')';\n}\nif (!empty($search_type) && $search_type > 0) {\n\t$sql .= ' AND cs.fk_mode_reglement='.$search_type;\n}\nif (!empty($search_account) && $search_account > 0) {\n\t$sql .= ' AND cs.fk_account='.$search_account;\n}\nif ($search_amount) {\n\t$sql .= natural_search(\"cs.amount\", $search_amount, 1);\n}\nif ($search_status != '' && $search_status >= 0) {\n\t$sql .= \" AND cs.paye = \".((int) $search_status);\n}\n$sql .= dolSqlDateFilter(\"cs.periode\", $search_day_lim, $search_month_lim, $search_year_lim);\n//$sql.= dolSqlDateFilter(\"cs.periode\", 0, 0, $year);\nif ($year > 0) {\n\t$sql .= \" AND (\";\n\t// Si period renseignee on l'utilise comme critere de date, sinon on prend date echeance,\n\t// ceci afin d'etre compatible avec les cas ou la periode n'etait pas obligatoire\n\t$sql .= \"   (cs.periode IS NOT NULL AND date_format(cs.periode, '%Y') = '\".$db->escape($year).\"') \";\n\t$sql .= \"OR (cs.periode IS NULL AND date_format(cs.date_ech, '%Y') = '\".$db->escape($year).\"')\";\n\t$sql .= \")\";\n}\nif ($search_typeid > 0) {\n\t$sql .= \" AND cs.fk_type = \".((int) $search_typeid);\n}\n$sql .= \" GROUP BY cs.rowid, cs.fk_type, cs.fk_user, cs.amount, cs.date_ech, cs.libelle, cs.paye, cs.periode, c.libelle, cs.fk_account, ba.label, ba.ref, ba.number, ba.account_number, ba.iban_prefix, ba.bic, ba.currency_code, ba.clos, pay.code, u.lastname\";\nif (!empty($conf->projet->enabled)) {\n\t$sql .= \", p.rowid, p.ref, p.title\";\n}\n$sql .= $db->order($sortfield, $sortorder);\n\n$totalnboflines = 0;\n$result = $db->query($sql);\nif ($result) {\n\t$totalnboflines = $db->num_rows($result);\n}\n$sql .= $db->plimit($limit + 1, $offset);\n\n$resql = $db->query($sql);\nif (!$resql) {\n\tdol_print_error($db);\n\tllxFooter();\n\t$db->close();\n\texit;\n}\n\n$num = $db->num_rows($resql);\n$i = 0;\n\n$param = '';\nif (!empty($contextpage) && $contextpage != $_SERVER[\"PHP_SELF\"]) {\n\t$param .= '&contextpage='.urlencode($contextpage);\n}\nif ($limit > 0 && $limit != $conf->liste_limit) {\n\t$param .= '&limit='.urlencode($limit);\n}\nif ($search_ref) {\n\t$param .= '&search_ref='.urlencode($search_ref);\n}\nif ($search_label) {\n\t$param .= '&search_label='.urlencode($search_label);\n}\nif ($search_project_ref >= 0) {\n\t$param .= \"&search_project_ref=\".urlencode($search_project_ref);\n}\nif ($search_amount) {\n\t$param .= '&search_amount='.urlencode($search_amount);\n}\nif ($search_typeid) {\n\t$param .= '&search_typeid='.urlencode($search_typeid);\n}\nif ($search_users) {\n\tforeach ($search_users as $id_user) {\n\t\t$param .= '&search_users[]='.urlencode($id_user);\n\t}\n}\nif ($search_type) {\n\t$param .= '&search_type='.urlencode($search_type);\n}\nif ($search_account) {\n\t$param .= '&search_account='.$search_account;\n}\nif ($search_status != '' && $search_status != '-1') {\n\t$param .= '&search_status='.urlencode($search_status);\n}\nif ($year) {\n\t$param .= '&year='.urlencode($year);\n}\n\n$newcardbutton = '';\nif ($user->rights->tax->charges->creer) {\n\t$newcardbutton .= dolGetButtonTitle($langs->trans('MenuNewSocialContribution'), '', 'fa fa-plus-circle', DOL_URL_ROOT.'/compta/sociales/card.php?action=create');\n}\n\nprint '<form method=\"POST\" action=\"'.$_SERVER[\"PHP_SELF\"].'\">';\nif ($optioncss != '') {\n\tprint '<input type=\"hidden\" name=\"optioncss\" value=\"'.$optioncss.'\">';\n}\nprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\nprint '<input type=\"hidden\" name=\"action\" value=\"list\">';\nprint '<input type=\"hidden\" name=\"formfilteraction\" id=\"formfilteraction\" value=\"list\">';\nprint '<input type=\"hidden\" name=\"sortfield\" value=\"'.$sortfield.'\">';\nprint '<input type=\"hidden\" name=\"sortorder\" value=\"'.$sortorder.'\">';\nprint '<input type=\"hidden\" name=\"search_status\" value=\"'.$search_status.'\">';\nprint '<input type=\"hidden\" name=\"contextpage\" value=\"'.$contextpage.'\">';\n\n$center = '';\nif ($year) {\n\t$center = '<a href=\"list.php?year='.($year - 1).'\">'.img_previous().'</a>';\n\t$center .= ' '.$langs->trans(\"Year\").' '.$year;\n\t$center .= ' <a href=\"list.php?year='.($year + 1).'\">'.img_next().'</a>';\n}\n\nprint_barre_liste($langs->trans(\"SocialContributions\"), $page, $_SERVER[\"PHP_SELF\"], $param, $sortfield, $sortorder, $center, $num, $totalnboflines, 'bill', 0, $newcardbutton, '', $limit, 0, 0, 1);\n\nif (empty($mysoc->country_id) && empty($mysoc->country_code)) {\n\tprint '<div class=\"error\">';\n\t$langs->load(\"errors\");\n\t$countrynotdefined = $langs->trans(\"ErrorSetACountryFirst\");\n\tprint $countrynotdefined;\n\tprint '</div>';\n\n\tprint '</form>';\n\tllxFooter();\n\t$db->close();\n}\n\n$varpage = empty($contextpage) ? $_SERVER[\"PHP_SELF\"] : $contextpage;\n$selectedfields = $form->multiSelectArrayWithCheckbox('selectedfields', $arrayfields, $varpage); // This also change content of $arrayfields\nif ($massactionbutton) {\n\t$selectedfields .= $form->showCheckAddButtons('checkforselect', 1);\n}\n\nprint '<div class=\"div-table-responsive\">';\nprint '<table class=\"tagtable liste'.($moreforfilter ? \" listwithfilterbefore\" : '').'\">'.\"\\n\";\n\nprint '<tr class=\"liste_titre_filter\">';\n\n// Filters: Line number (placeholder)\nif (!empty($conf->global->MAIN_VIEW_LINE_NUMBER_IN_LIST)) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '</td>';\n}\n\n// Filter: Ref\nif (!empty($arrayfields['cs.rowid']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '<input class=\"flat maxwidth75\" type=\"text\" name=\"search_ref\" value=\"'.dol_escape_htmltag($search_ref).'\">';\n\tprint '</td>';\n}\n\n// Filter: Label\nif (!empty($arrayfields['cs.rowid']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '<input type=\"text\" class=\"flat maxwidth100\" name=\"search_label\" value=\"'.dol_escape_htmltag($search_label).'\">';\n\tprint '</td>';\n}\n\n// Filter: Type\nif (!empty($arrayfields['cs.fk_type']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\t$formsocialcontrib->select_type_socialcontrib($search_typeid, 'search_typeid', 1, 0, 0, 'maxwidth150', 1);\n\tprint '</td>';\n}\n\n// Filter: Date (placeholder)\nif (!empty($arrayfields['cs.date_ech']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '</td>';\n}\n\n// Filter: Period end date\nif (!empty($arrayfields['cs.periode']['checked'])) {\n\tprint '<td class=\"liste_titre center\">';\n\tif (!empty($conf->global->MAIN_LIST_FILTER_ON_DAY)) {\n\t\tprint '<input class=\"flat valignmiddle\" type=\"text\" size=\"1\" maxlength=\"2\" name=\"search_day_lim\" value=\"'.dol_escape_htmltag($search_day_lim).'\">';\n\t}\n\tprint '<input class=\"flat valignmiddle width25\" type=\"text\" size=\"1\" maxlength=\"2\" name=\"search_month_lim\" value=\"'.dol_escape_htmltag($search_month_lim).'\">';\n\t$formother->select_year($search_year_lim ? $search_year_lim : -1, 'search_year_lim', 1, 20, 5, 0, 0, '', 'widthauto valignmiddle');\n\tprint '</td>';\n}\n\n// Filter: Project ref\nif (!empty($arrayfields['p.ref']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '<input type=\"text\" class=\"flat\" size=\"6\" name=\"search_project_ref\" value=\"'.$search_project_ref.'\">';\n\tprint '</td>';\n}\n\nif (!empty($arrayfields['cs.fk_user']['checked'])) {\n\t// Employee\n\tprint '<td class=\"liste_titre\">';\n\tprint $form->select_dolusers($search_users, 'search_users', 1, null, 0, '', '', '0', '0', 0, '', 0, '', '', 0, 0, true);\n}\n\n// Filter: Type\nif (!empty($arrayfields['cs.fk_mode_reglement']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\t$form->select_types_paiements($search_type, 'search_type', '', 0, 1, 1, 0, 1, 'maxwidth150');\n\tprint '</td>';\n}\n\n// Filter: Bank Account\nif (!empty($arrayfields['cs.fk_account']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\t$form->select_comptes($search_account, 'search_account', 0, '', 1, '', 0, 'maxwidth150');\n\tprint '</td>';\n}\n\n// Filter: Amount\nif (!empty($arrayfields['cs.amount']['checked'])) {\n\tprint '<td class=\"liste_titre right\">';\n\tprint '<input class=\"flat maxwidth75\" type=\"text\" name=\"search_amount\" value=\"'.dol_escape_htmltag($search_amount).'\">';\n\tprint '</td>';\n}\n\n// Filter: Status\nif (!empty($arrayfields['cs.paye']['checked'])) {\n\tprint '<td class=\"liste_titre maxwidthonsmartphone right\">';\n\t$liststatus = array('0'=>$langs->trans(\"Unpaid\"), '1'=>$langs->trans(\"Paid\"));\n\tprint $form->selectarray('search_status', $liststatus, $search_status, 1, 0, 0, '', 0, 0, 0, '', 'maxwidth100', 1);\n\tprint '</td>';\n}\n\n// Fields from hook\n$parameters = array('arrayfields'=>$arrayfields);\n$reshook = $hookmanager->executeHooks('printFieldListOption', $parameters); // Note that $action and $object may have been modified by hook\nprint $hookmanager->resPrint;\n\n// Filter: Buttons\nprint '<td class=\"liste_titre maxwidthsearch\">';\nprint $form->showFilterAndCheckAddButtons(0);\nprint '</td>';\n\nprint '</tr>';\n\nprint '<tr class=\"liste_titre\">';\nif (!empty($conf->global->MAIN_VIEW_LINE_NUMBER_IN_LIST)) {\n\tprint_liste_field_titre('#', $_SERVER['PHP_SELF'], '', '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.rowid']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.rowid']['label'], $_SERVER[\"PHP_SELF\"], \"cs.rowid\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.libelle']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.libelle']['label'], $_SERVER[\"PHP_SELF\"], \"cs.libelle\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.fk_type']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.fk_type']['label'], $_SERVER[\"PHP_SELF\"], \"cs.fk_type\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.date_ech']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.date_ech']['label'], $_SERVER[\"PHP_SELF\"], \"cs.date_ech\", '', $param, '', $sortfield, $sortorder, 'center ');\n}\nif (!empty($arrayfields['cs.periode']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.periode']['label'], $_SERVER[\"PHP_SELF\"], \"cs.periode\", '', $param, '', $sortfield, $sortorder, 'center ');\n}\nif (!empty($arrayfields['p.ref']['checked'])) {\n\tprint_liste_field_titre($arrayfields['p.ref']['label'], $_SERVER[\"PHP_SELF\"], \"p.ref\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.fk_user']['checked'])) {\n\tprint_liste_field_titre(\"Employee\", $_SERVER[\"PHP_SELF\"], \"u.lastname\", \"\", $param, 'class=\"left\"', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.fk_mode_reglement']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.fk_mode_reglement']['label'], $_SERVER[\"PHP_SELF\"], \"cs.fk_mode_reglement\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.fk_account']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.fk_account']['label'], $_SERVER[\"PHP_SELF\"], \"cs.fk_account\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.amount']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.amount']['label'], $_SERVER[\"PHP_SELF\"], \"cs.amount\", '', $param, 'class=\"right\"', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.paye']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.paye']['label'], $_SERVER[\"PHP_SELF\"], \"cs.paye\", '', $param, 'class=\"right\"', $sortfield, $sortorder);\n}\n\n// Hook fields\n$parameters = array('arrayfields'=>$arrayfields, 'param'=>$param, 'sortfield'=>$sortfield, 'sortorder'=>$sortorder);\n$reshook = $hookmanager->executeHooks('printFieldListTitle', $parameters); // Note that $action and $object may have been modified by hook\nprint $hookmanager->resPrint;\n\nprint_liste_field_titre($selectedfields, $_SERVER[\"PHP_SELF\"], '', '', '', '', $sortfield, $sortorder, 'maxwidthsearch ');\nprint '</tr>';\n\n$i = 0;\n\t\t$totalarray = $TLoadedUsers = array();\nwhile ($i < min($num, $limit)) {\n\t$obj = $db->fetch_object($resql);\n\n\t$chargesociale_static->id = $obj->rowid;\n\t$chargesociale_static->ref = $obj->rowid;\n\t$chargesociale_static->label = $obj->label;\n\t$chargesociale_static->type_label = $obj->type_label;\n\tif (!empty($conf->projet->enabled)) {\n\t\t$projectstatic->id = $obj->project_id;\n\t\t$projectstatic->ref = $obj->project_ref;\n\t\t$projectstatic->title = $obj->project_label;\n\t}\n\n\tprint '<tr class=\"oddeven\">';\n\n\t// Line number\n\tif (!empty($conf->global->MAIN_VIEW_LINE_NUMBER_IN_LIST)) {\n\t\tprint '<td>'.(($offset * $limit) + $i).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Ref\n\tif (!empty($arrayfields['cs.rowid']['checked'])) {\n\t\tprint '<td>'.$chargesociale_static->getNomUrl(1, '20').'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Label\n\tif (!empty($arrayfields['cs.libelle']['checked'])) {\n\t\tprint '<td class=\"tdoverflowmax200\" title=\"'.dol_escape_htmltag($obj->label).'\">'.dol_escape_htmltag($obj->label).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Type\n\tif (!empty($arrayfields['cs.fk_type']['checked'])) {\n\t\tprint '<td class=\"tdoverflowmax200\" title=\"'.dol_escape_htmltag($obj->type_label).'\">'.dol_escape_htmltag($obj->type_label).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Date\n\tif (!empty($arrayfields['cs.date_ech']['checked'])) {\n\t\tprint '<td class=\"center\">'.dol_print_date($db->jdate($obj->date_ech), 'day').'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Date end period\n\tif (!empty($arrayfields['cs.periode']['checked'])) {\n\t\tprint '<td class=\"center\">';\n\t\tif ($obj->periode) {\n\t\t\tprint '<a href=\"list.php?search_year_lim='.dol_print_date($db->jdate($obj->periode), \"%Y\").'\">';\n\t\t\tprint dol_print_date($db->jdate($obj->periode), 'day');\n\t\t\tprint '</a>';\n\t\t}\n\t\tprint '</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Project ref\n\tif (!empty($arrayfields['p.ref']['checked'])) {\n\t\tprint '<td class=\"nowrap\">';\n\t\tif ($obj->project_id > 0) {\n\t\t\tprint $projectstatic->getNomUrl(1);\n\t\t}\n\t\tprint '</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\tif (!empty($arrayfields['cs.fk_user']['checked'])) {\n\t\t// Employee\n\t\tprint \"<td>\";\n\t\tif (!empty($obj->fk_user)) {\n\t\t\tif (!empty($TLoadedUsers[$obj->fk_user])) {\n\t\t\t\t$ustatic = $TLoadedUsers[$obj->fk_user];\n\t\t\t} else {\n\t\t\t\t$ustatic = new User($db);\n\t\t\t\t$ustatic->fetch($obj->fk_user);\n\t\t\t\t$TLoadedUsers[$obj->fk_user] = $ustatic;\n\t\t\t}\n\t\t\tprint $ustatic->getNomUrl(-1);\n\t\t}\n\t\tprint \"</td>\\n\";\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Type\n\tif (!empty($arrayfields['cs.fk_mode_reglement']['checked'])) {\n\t\tprint '<td>';\n\t\tif (!empty($obj->payment_code)) print $langs->trans(\"PaymentTypeShort\".$obj->payment_code);\n\t\tprint '</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Account\n\tif (!empty($arrayfields['cs.fk_account']['checked'])) {\n\t\tprint '<td>';\n\t\tif ($obj->fk_account > 0) {\n\t\t\t$bankstatic->id = $obj->fk_account;\n\t\t\t$bankstatic->ref = $obj->bref;\n\t\t\t$bankstatic->number = $obj->bnumber;\n\t\t\t$bankstatic->iban = $obj->iban;\n\t\t\t$bankstatic->bic = $obj->bic;\n\t\t\t$bankstatic->currency_code = $langs->trans(\"Currency\".$obj->currency_code);\n\t\t\t$bankstatic->account_number = $obj->account_number;\n\t\t\t$bankstatic->clos = $obj->clos;\n\n\t\t\t//$accountingjournal->fetch($obj->fk_accountancy_journal);\n\t\t\t//$bankstatic->accountancy_journal = $accountingjournal->getNomUrl(0, 1, 1, '', 1);\n\n\t\t\t$bankstatic->label = $obj->blabel;\n\t\t\tprint $bankstatic->getNomUrl(1);\n\t\t}\n\t\tprint '</td>';\n\t\tif (!$i) $totalarray['nbfield']++;\n\t}\n\n\t// Amount\n\tif (!empty($arrayfields['cs.amount']['checked'])) {\n\t\tprint '<td class=\"nowrap amount right\">'.price($obj->amount).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t\tif (!$i) {\n\t\t\t$totalarray['pos'][$totalarray['nbfield']] = 'totalttcfield';\n\t\t}\n\t\t$totalarray['val']['totalttcfield'] += $obj->amount;\n\t}\n\n\t// Status\n\tif (!empty($arrayfields['cs.paye']['checked'])) {\n\t\tprint '<td class=\"nowrap right\">'.$chargesociale_static->LibStatut($obj->paye, 5, $obj->alreadypayed).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Buttons\n\tprint '<td></td>';\n\tif (!$i) {\n\t\t$totalarray['nbfield']++;\n\t}\n\n\tprint '</tr>';\n\t$i++;\n}\n\n// Show total line\ninclude DOL_DOCUMENT_ROOT.'/core/tpl/list_print_total.tpl.php';\n\nprint '</table>';\nprint '</div>';\nprint '</form>';\n\n// End of page\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2013 Laurent Destailleur  <eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n * or see https://www.gnu.org/\n */\n\n/**\n *      \\file       test/phpunit/SqlTest.php\n *      \\ingroup    test\n *      \\brief      PHPUnit test\n *      \\remarks    To run this script as CLI:  phpunit filename.php\n */\n\nglobal $conf,$user,$langs,$db;\n//define('TEST_DB_FORCE_TYPE','mysql');\t// This is to force using mysql driver\n//require_once 'PHPUnit/Autoload.php';\nrequire_once dirname(__FILE__).'/../../htdocs/master.inc.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/security.lib.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/security2.lib.php';\n\nif (! defined('NOREQUIREUSER')) {\n\tdefine('NOREQUIREUSER', '1');\n}\nif (! defined('NOREQUIREDB')) {\n\tdefine('NOREQUIREDB', '1');\n}\nif (! defined('NOREQUIRESOC')) {\n\tdefine('NOREQUIRESOC', '1');\n}\nif (! defined('NOREQUIRETRAN')) {\n\tdefine('NOREQUIRETRAN', '1');\n}\nif (! defined('NOCSRFCHECK')) {\n\tdefine('NOCSRFCHECK', '1');\n}\nif (! defined('NOTOKENRENEWAL')) {\n\tdefine('NOTOKENRENEWAL', '1');\n}\nif (! defined('NOREQUIREMENU')) {\n\tdefine('NOREQUIREMENU', '1'); // If there is no menu to show\n}\nif (! defined('NOREQUIREHTML')) {\n\tdefine('NOREQUIREHTML', '1'); // If we don't need to load the html.form.class.php\n}\nif (! defined('NOREQUIREAJAX')) {\n\tdefine('NOREQUIREAJAX', '1');\n}\nif (! defined(\"NOLOGIN\")) {\n\tdefine(\"NOLOGIN\", '1');       // If this page is public (can be called outside logged session)\n}\n\nif (empty($user->id)) {\n\tprint \"Load permissions for admin user nb 1\\n\";\n\t$user->fetch(1);\n\t$user->getrights();\n}\n$conf->global->MAIN_DISABLE_ALL_MAILS=1;\n\n\n/**\n * Class for PHPUnit tests\n *\n * @backupGlobals disabled\n * @backupStaticAttributes enabled\n * @remarks\tbackupGlobals must be disabled to have db,conf,user and lang not erased.\n */\nclass CodingPhpTest extends PHPUnit\\Framework\\TestCase\n{\n\tprotected $savconf;\n\tprotected $savuser;\n\tprotected $savlangs;\n\tprotected $savdb;\n\n\t/**\n\t * Constructor\n\t * We save global variables into local variables\n\t *\n\t * @return SecurityTest\n\t */\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\n\t\t//$this->sharedFixture\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$this->savconf=$conf;\n\t\t$this->savuser=$user;\n\t\t$this->savlangs=$langs;\n\t\t$this->savdb=$db;\n\n\t\tprint __METHOD__.\" db->type=\".$db->type.\" user->id=\".$user->id;\n\t\t//print \" - db \".$db->db;\n\t\tprint \"\\n\";\n\t}\n\n\t/**\n\t * setUpBeforeClass\n\t *\n\t * @return void\n\t */\n\tpublic static function setUpBeforeClass()\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$db->begin(); // This is to have all actions inside a transaction even if test launched without suite.\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * tearDownAfterClass\n\t *\n\t * @return\tvoid\n\t */\n\tpublic static function tearDownAfterClass()\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$db->rollback();\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * Init phpunit tests\n\t *\n\t * @return  void\n\t */\n\tprotected function setUp()\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * End phpunit tests\n\t *\n\t * @return  void\n\t */\n\tprotected function tearDown()\n\t{\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * testSql\n\t *\n\t * @return string\n\t */\n\tpublic function testPHP()\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\t$filesarray = dol_dir_list(DOL_DOCUMENT_ROOT, 'files', 1, '\\.php', null, 'fullname', SORT_ASC, 0, 0, '', 1);\n\t\t//$filesarray = dol_dir_list(DOL_DOCUMENT_ROOT, 'files', 1, '\\.php', null, 'fullname');\n\n\t\tforeach ($filesarray as $key => $file) {\n\t\t\tif (preg_match('/\\/htdocs\\/includes\\//', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/\\/htdocs\\/custom\\//', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/\\/htdocs\\/dolimed/', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/\\/htdocs\\/nltechno/', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/\\/htdocs\\/teclib/', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tprint 'Check php file '.$file['fullname'].\"\\n\";\n\t\t\t$filecontent=file_get_contents($file['fullname']);\n\n\t\t\tif (preg_match('/\\.class\\.php/', $file['relativename'])\n\t\t\t\t|| preg_match('/boxes\\/box_/', $file['relativename'])\n\t\t\t\t|| preg_match('/modules\\/.*\\/doc\\/(doc|pdf)_/', $file['relativename'])\n\t\t\t\t|| preg_match('/modules\\/(import|mailings|printing)\\//', $file['relativename'])\n\t\t\t\t|| in_array($file['name'], array('modules_boxes.php', 'rapport.pdf.php', 'TraceableDB.php'))) {\n\t\t\t\tif (! in_array($file['name'], array(\n\t\t\t\t\t'api.class.php',\n\t\t\t\t\t'actioncomm.class.php',\n\t\t\t\t\t'commonobject.class.php',\n\t\t\t\t\t'conf.class.php',\n\t\t\t\t\t'html.form.class.php',\n\t\t\t\t\t'html.formmail.class.php',\n\t\t\t\t\t'infobox.class.php',\n\t\t\t\t\t'link.class.php',\n\t\t\t\t\t'translate.class.php',\n\t\t\t\t\t'utils.class.php',\n\t\t\t\t\t'modules_product.class.php',\n\t\t\t\t\t'modules_societe.class.php',\n\t\t\t\t\t'TraceableDB.php',\n\t\t\t\t\t'expeditionbatch.class.php',\n\t\t\t\t\t'expensereport_ik.class.php',\n\t\t\t\t\t'expensereport_rule.class.php',\n\t\t\t\t\t'multicurrency.class.php',\n\t\t\t\t\t'productbatch.class.php',\n\t\t\t\t\t'reception.class.php',\n\t\t\t\t\t'societe.class.php' ,\n\t\t\t\t\t'account.class.php'\n\t\t\t\t))) {\n\t\t\t\t\t// Must must not found $db->\n\t\t\t\t\t$ok=true;\n\t\t\t\t\t$matches=array();\n\t\t\t\t\t// Check string $db-> inside a class.php file (it should be $this->db-> insto such classes)\n\t\t\t\t\tpreg_match_all('/'.preg_quote('$db->', '/').'/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t\t\t$ok=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t\t\t$this->assertTrue($ok, 'Found string $db-> into a .class.php file in '.$file['relativename']);\n\t\t\t\t\t//exit;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (! in_array($file['name'], array(\n\t\t\t\t\t'extrafieldsinexport.inc.php',\n\t\t\t\t\t'DolQueryCollector.php'\n\t\t\t\t))) {\n\t\t\t\t\t// Must must not found $this->db->\n\t\t\t\t\t$ok=true;\n\t\t\t\t\t$matches=array();\n\t\t\t\t\t// Check string $this->db-> into a non class.php file (it shoud be $db-> into such classes)\n\t\t\t\t\tpreg_match_all('/'.preg_quote('$this->db->', '/').'/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t\t\t$ok=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t\t\t$this->assertTrue($ok, 'Found string $this->db-> in '.$file['relativename']);\n\t\t\t\t\t//exit;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\t// Check string get_class...\n\t\t\tpreg_match_all('/'.preg_quote('get_class($this).\"::\".__METHOD__', '/').'/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t$ok=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found string get_class($this).\"::\".__METHOD__ that must be replaced with __METHOD__ only in '.$file['relativename']);\n\t\t\t//exit;\n\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\t// Check string $this->db->idate without quotes\n\t\t\tpreg_match_all('/(..)\\s*\\.\\s*\\$this->db->idate\\(/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($val[1] != '\\'\"' && $val[1] != '\\'\\'') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found a $this->db->idate to forge a sql request without quotes around this date field '.$file['relativename']);\n\t\t\t//exit;\n\n\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\n\t\t\t// Check sql string AND ... yyy = \".$xxx\n\t\t\t//  with xxx that is not 'thi' (for $this->db->sanitize) and 'db-' (for $db->sanitize). It means we forget a ' if string or an (int) if int when forging sql request.\n\t\t\tpreg_match_all('/(DELETE|OR|AND)\\s.*([^\\s][^\\s][^\\s])\\s*=\\s*\"\\s*\\.\\s*\\$(...)/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($val[2] == 'ity' && $val[3] == 'con') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar_dump($matches);\n\t\t\t\t$ok=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non quoted or not casted var into sql request '.$file['relativename'].' - Bad.');\n\t\t\t//exit;\n\n\n\t\t\t// Check string   ='\".$this->xxx   with xxx that is not 'escape'. It means we forget a db->escape when forging sql request.\n\t\t\tpreg_match_all('/=\\s*\\'\"\\s*\\.\\s*\\$this->(....)/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($val[1] != 'db->' && $val[1] != 'esca') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non escaped string in building of a sql request '.$file['relativename'].' - Bad.');\n\t\t\t//exit;\n\n\t\t\t// Check string sql|set...'\".$yyy->xxx   with xxx that is not 'escape', 'idate', .... It means we forget a db->escape when forging sql request.\n\t\t\tpreg_match_all('/(sql|SET).+\\s*\\'\"\\s*\\.\\s*\\$(.........)/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif (! in_array($val[2], array('this->db-', 'this->esc', 'db->escap', 'dbsession', 'db->idate', 'excludeGr', 'includeGr'))) {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non escaped string in building of a sql request '.$file['relativename'].': '.$val[0].' - Bad.');\n\t\t\t//exit;\n\n\t\t\t// Check string 'IN (\".xxx' or 'IN (\\'.xxx'  with xxx that is not '$this->db->sanitize' and not '$db->sanitize'. It means we forget a db->sanitize when forging sql request.\n\t\t\tpreg_match_all('/ IN \\([\\'\"]\\s*\\.\\s*(.........)/i', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif (!in_array($val[1], array('$db->sani', '$this->db', 'getEntity', 'WON\\',\\'L', 'self::STA', 'Commande:', 'CommandeF', 'Entrepot:', 'Facture::', 'FactureFo', 'ExpenseRe', 'Societe::', 'Ticket::S'))) {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non sanitized string in building of a IN or NOT IN sql request '.$file['relativename'].' - Bad.');\n\t\t\t//exit;\n\n\t\t\t// Check string 'IN (\\'\".xxx'   with xxx that is not '$this->db->sanitize' and not '$db->sanitize'. It means we forget a db->sanitize when forging sql request.\n\t\t\tpreg_match_all('/ IN \\(\\'\"\\s*\\.\\s*(.........)/i', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif (!in_array($val[1], array('$db->sani', '$this->db', 'getEntity', 'WON\\',\\'L', 'self::STA', 'Commande:', 'CommandeF', 'Entrepot:', 'Facture::', 'FactureFo', 'ExpenseRe', 'Societe::', 'Ticket::S'))) {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non sanitized string in building of a IN or NOT IN sql request '.$file['relativename'].' - Bad.');\n\t\t\t//exit;\n\n\t\t\t// Test that output of $_SERVER\\[\\'QUERY_STRING\\'\\] is escaped.\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/(..............)\\$_SERVER\\[\\'QUERY_STRING\\'\\]/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($val[1] != 'scape_htmltag(' && $val[1] != 'ing_nohtmltag(' && $val[1] != 'dol_escape_js(') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a $_SERVER[\\'QUERY_STRING\\'] without dol_escape_htmltag neither dol_string_nohtmltag around it, in file '.$file['relativename'].' ('.$val[1].'$_SERVER[\\'QUERY_STRING\\']). Bad.');\n\n\n\t\t\t// Test that first param of print_liste_field_titre is a translation key and not the translated value\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\t// Check string ='print_liste_field_titre\\(\\$langs'.\n\t\t\tpreg_match_all('/print_liste_field_titre\\(\\$langs/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t   $ok=false;\n\t\t\t\t   break;\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a use of print_liste_field_titre with first parameter that is a translated value instead of just the translation key in file '.$file['relativename'].'. Bad.');\n\n\n\t\t\t// Test we don't have <br />\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/<br\\s+\\/>/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($file['name'] != 'functions.lib.php') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a tag <br /> that is for xml in file '.$file['relativename'].'. You must use html syntax <br> instead.');\n\n\n\t\t\t// Test we don't have name=\"token\" value=\"'.$_SESSION['newtoken'], we must use name=\"token\" value=\"'.newToken() instead.\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/name=\"token\" value=\"\\'\\s*\\.\\s*\\$_SESSION/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($file['name'] != 'excludefile.php') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a forbidden string sequence into '.$file['relativename'].' : name=\"token\" value=\"\\'.$_SESSION[..., you must use a newToken() instead of $_SESSION[\\'newtoken\\'].');\n\n\n\t\t\t// Test we don't have @var array(\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/@var\\s+array\\(/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t$ok=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a declaration @var array() instead of @var array in file '.$file['relativename'].'.');\n\n\n\t\t\t// Test we don't have CURDATE()\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/CURDATE\\(\\)/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t$ok=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a CURDATE\\(\\) into code. Do not use this SQL method in file '.$file['relativename'].'. You must use the PHP function dol_now() instead.');\n\t\t}\n\n\t\treturn;\n\t}\n}\n"], "fixing_code": ["<?php\n/* Copyright (C) 2001-2003 Rodolphe Quiedeville <rodolphe@quiedeville.org>\n * Copyright (C) 2004-2017 Laurent Destailleur  <eldy@users.sourceforge.net>\n * Copyright (C) 2005-2009 Regis Houssin        <regis.houssin@inodbox.com>\n * Copyright (C) 2016      Fr\u00e9d\u00e9ric France      <frederic.france@free.fr>\n * Copyright (C) 2020      Pierre Ardoin     \t<mapiolca@me.com>\n * Copyright (C) 2020\t\tTobias Sekan\t\t<tobias.sekan@startmail.com>\n * Copyright (C) 2021      Gauthier VERDOL     \t<gauthier.verdol@atm-consulting.fr>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n */\n\n/**\n *\t\\file\t\thtdocs/compta/sociales/list.php\n *\t\\ingroup\ttax\n *\t\\brief\t\tPage to list all social contributions\n */\n\nrequire '../../main.inc.php';\nrequire_once DOL_DOCUMENT_ROOT.'/compta/sociales/class/chargesociales.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/compta/bank/class/account.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formsocialcontrib.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/class/html.formother.class.php';\nrequire_once DOL_DOCUMENT_ROOT.'/core/lib/date.lib.php';\nif (!empty($conf->projet->enabled)) {\n\trequire_once DOL_DOCUMENT_ROOT.'/projet/class/project.class.php';\n}\n\n// Load translation files required by the page\n$langs->loadLangs(array('compta', 'banks', 'bills', 'hrm', 'projects'));\n\n$action\t\t\t\t= GETPOST('action', 'aZ09');\n$massaction\t\t\t= GETPOST('massaction', 'alpha');\n$confirm\t\t\t= GETPOST('confirm', 'alpha');\n$optioncss = GETPOST('optioncss', 'alpha');\n$contextpage\t\t= GETPOST('contextpage', 'aZ') ? GETPOST('contextpage', 'aZ') : 'sclist';\n\n$search_ref\t\t\t= GETPOST('search_ref', 'int');\n$search_label = GETPOST('search_label', 'alpha');\n$search_amount\t\t= GETPOST('search_amount', 'alpha');\n$search_status\t\t= GETPOST('search_status', 'int');\n$search_day_lim\t\t= GETPOST('search_day_lim', 'int');\n$search_month_lim = GETPOST('search_month_lim', 'int');\n$search_year_lim\t= GETPOST('search_year_lim', 'int');\n$search_project_ref = GETPOST('search_project_ref', 'alpha');\n$search_project = GETPOST('search_project', 'alpha');\n$search_users = GETPOST('search_users');\n$search_type = GETPOST('search_type', 'int');\n$search_account\t\t\t\t= GETPOST('search_account', 'int');\n\n$limit = GETPOST('limit', 'int') ? GETPOST('limit', 'int') : $conf->liste_limit;\n$sortfield\t\t\t= GETPOST(\"sortfield\", 'alpha');\n$sortorder\t\t\t= GETPOST(\"sortorder\", 'aZ09comma');\n$page = GETPOSTISSET('pageplusone') ? (GETPOST('pageplusone') - 1) : GETPOST(\"page\", 'int');\n\nif (empty($page) || $page == -1) {\n\t$page = 0; // If $page is not defined, or '' or -1\n}\n$offset = $limit * $page;\n$pageprev = $page - 1;\n$pagenext = $page + 1;\n\nif (!$sortfield) {\n\t$sortfield = \"cs.date_ech\";\n}\nif (!$sortorder) {\n\t$sortorder = \"DESC\";\n}\n\n$year = GETPOST(\"year\", 'int');\n$filtre = GETPOST(\"filtre\", 'int');\n\nif (!GETPOSTISSET('search_typeid')) {\n\t$newfiltre = str_replace('filtre=', '', $filtre);\n\t$filterarray = explode('-', $newfiltre);\n\tforeach ($filterarray as $val) {\n\t\t$part = explode(':', $val);\n\t\tif ($part[0] == 'cs.fk_type') {\n\t\t\t$search_typeid = $part[1];\n\t\t}\n\t}\n} else {\n\t$search_typeid = GETPOST('search_typeid', 'int');\n}\n\n$arrayfields = array(\n\t'cs.rowid'\t\t=>array('label'=>\"Ref\", 'checked'=>1, 'position'=>10),\n\t'cs.libelle'\t=>array('label'=>\"Label\", 'checked'=>1, 'position'=>20),\n\t'cs.fk_type'\t=>array('label'=>\"Type\", 'checked'=>1, 'position'=>30),\n\t'cs.date_ech'\t=>array('label'=>\"Date\", 'checked'=>1, 'position'=>40),\n\t'cs.periode'\t=>array('label'=>\"PeriodEndDate\", 'checked'=>1, 'position'=>50),\n\t'p.ref'\t\t\t=>array('label'=>\"ProjectRef\", 'checked'=>1, 'position'=>60, 'enable'=>(!empty($conf->projet->enabled))),\n\t'cs.fk_user'\t=>array('label'=>\"Employee\", 'checked'=>1, 'position'=>70),\n\t'cs.fk_mode_reglement'\t=>array('checked'=>-1, 'position'=>80, 'label'=>\"DefaultPaymentMode\"),\n\t'cs.amount'\t\t=>array('label'=>\"Amount\", 'checked'=>1, 'position'=>100),\n\t'cs.paye'\t\t=>array('label'=>\"Status\", 'checked'=>1, 'position'=>110),\n);\n\nif (!empty($conf->banque->enabled)) {\n\t$arrayfields['cs.fk_account'] = array('checked'=>-1, 'position'=>90, 'label'=>\"DefaultBankAccount\");\n}\n\n$arrayfields = dol_sort_array($arrayfields, 'position');\n\n// Initialize technical object to manage hooks of page. Note that conf->hooks_modules contains array of hook context\n$hookmanager->initHooks(array('sclist'));\n$object = new ChargeSociales($db);\n\n// Security check\n$socid = GETPOST(\"socid\", 'int');\nif ($user->socid) {\n\t$socid = $user->socid;\n}\n$result = restrictedArea($user, 'tax', '', 'chargesociales', 'charges');\n\n\n/*\n * Actions\n */\n\n$parameters = array('socid'=>$socid);\n$reshook = $hookmanager->executeHooks('doActions', $parameters, $object, $action); // Note that $action and $object may have been modified by some hooks\nif ($reshook < 0) {\n\tsetEventMessages($hookmanager->error, $hookmanager->errors, 'errors');\n}\n\n\nif (empty($reshook)) {\n\tinclude DOL_DOCUMENT_ROOT.'/core/actions_changeselectedfields.inc.php';\n\n\t// All tests are required to be compatible with all browsers\n\tif (GETPOST('button_removefilter_x', 'alpha') || GETPOST('button_removefilter.x', 'alpha') || GETPOST('button_removefilter', 'alpha')) {\n\t\t$search_ref = '';\n\t\t$search_label = '';\n\t\t$search_amount = '';\n\t\t$search_status = '';\n\t\t$search_typeid = '';\n\t\t$year = '';\n\t\t$search_day_lim = '';\n\t\t$search_year_lim = '';\n\t\t$search_month_lim = '';\n\t\t$search_project_ref = '';\n\t\t$search_project = '';\n\t\t$search_users = '';\n\t\t$search_type = '';\n\t\t$search_account = '';\n\t\t$search_array_options = array();\n\t}\n}\n\n/*\n *\tView\n */\n\n$form = new Form($db);\n$formother = new FormOther($db);\n$bankstatic = new Account($db);\n$formsocialcontrib = new FormSocialContrib($db);\n$chargesociale_static = new ChargeSociales($db);\nif (!empty($conf->projet->enabled)) {\n\t$projectstatic = new Project($db);\n}\n\nllxHeader('', $langs->trans(\"SocialContributions\"));\n\n$sql = \"SELECT cs.rowid, cs.fk_type as type, cs.fk_user,\";\n$sql .= \" cs.amount, cs.date_ech, cs.libelle as label, cs.paye, cs.periode,\";\nif (!empty($conf->projet->enabled)) {\n\t$sql .= \" p.rowid as project_id, p.ref as project_ref, p.title as project_label,\";\n}\n$sql .= \" c.libelle as type_label, cs.fk_account,\";\n$sql .= \" ba.label as blabel, ba.ref as bref, ba.number as bnumber, ba.account_number, ba.iban_prefix as iban, ba.bic, ba.currency_code, ba.clos,\";\n$sql .= \" SUM(pc.amount) as alreadypayed, pay.code as payment_code\";\n$sql .= \" FROM \".MAIN_DB_PREFIX.\"c_chargesociales as c,\";\n$sql .= \" \".MAIN_DB_PREFIX.\"chargesociales as cs\";\n$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"bank_account as ba ON (cs.fk_account = ba.rowid)\";\n$sql .= ' LEFT JOIN '.MAIN_DB_PREFIX.'c_paiement as pay ON (cs.fk_mode_reglement = pay.id)';\nif (!empty($conf->projet->enabled)) {\n\t$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"projet as p ON p.rowid = cs.fk_projet\";\n}\n$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"paiementcharge as pc ON pc.fk_charge = cs.rowid\";\n$sql .= \" LEFT JOIN \".MAIN_DB_PREFIX.\"user as u ON (cs.fk_user = u.rowid)\";\n$sql .= \" WHERE cs.fk_type = c.id\";\n$sql .= \" AND cs.entity = \".$conf->entity;\n// Search criteria\nif ($search_ref) {\n\t$sql .= \" AND cs.ref = '\".$db->escape($search_ref).\"'\";\n}\nif ($search_label) {\n\t$sql .= natural_search(\"cs.libelle\", $search_label);\n}\nif (!empty($conf->projet->enabled)) {\n\tif ($search_project_ref != '') {\n\t\t$sql .= natural_search(\"p.ref\", $search_project_ref);\n\t}\n}\nif (!empty($search_users)) {\n\t$sql .= ' AND cs.fk_user IN ('.$db->sanitize(implode(', ', $search_users)).')';\n}\nif (!empty($search_type) && $search_type > 0) {\n\t$sql .= ' AND cs.fk_mode_reglement='.$search_type;\n}\nif (!empty($search_account) && $search_account > 0) {\n\t$sql .= ' AND cs.fk_account='.$search_account;\n}\nif ($search_amount) {\n\t$sql .= natural_search(\"cs.amount\", $search_amount, 1);\n}\nif ($search_status != '' && $search_status >= 0) {\n\t$sql .= \" AND cs.paye = \".((int) $search_status);\n}\n$sql .= dolSqlDateFilter(\"cs.periode\", $search_day_lim, $search_month_lim, $search_year_lim);\n//$sql.= dolSqlDateFilter(\"cs.periode\", 0, 0, $year);\nif ($year > 0) {\n\t$sql .= \" AND (\";\n\t// Si period renseignee on l'utilise comme critere de date, sinon on prend date echeance,\n\t// ceci afin d'etre compatible avec les cas ou la periode n'etait pas obligatoire\n\t$sql .= \"   (cs.periode IS NOT NULL AND date_format(cs.periode, '%Y') = '\".$db->escape($year).\"') \";\n\t$sql .= \"OR (cs.periode IS NULL AND date_format(cs.date_ech, '%Y') = '\".$db->escape($year).\"')\";\n\t$sql .= \")\";\n}\nif ($search_typeid > 0) {\n\t$sql .= \" AND cs.fk_type = \".((int) $search_typeid);\n}\n$sql .= \" GROUP BY cs.rowid, cs.fk_type, cs.fk_user, cs.amount, cs.date_ech, cs.libelle, cs.paye, cs.periode, c.libelle, cs.fk_account, ba.label, ba.ref, ba.number, ba.account_number, ba.iban_prefix, ba.bic, ba.currency_code, ba.clos, pay.code, u.lastname\";\nif (!empty($conf->projet->enabled)) {\n\t$sql .= \", p.rowid, p.ref, p.title\";\n}\n$sql .= $db->order($sortfield, $sortorder);\n\n$totalnboflines = 0;\n$result = $db->query($sql);\nif ($result) {\n\t$totalnboflines = $db->num_rows($result);\n}\n$sql .= $db->plimit($limit + 1, $offset);\n\n$resql = $db->query($sql);\nif (!$resql) {\n\tdol_print_error($db);\n\tllxFooter();\n\t$db->close();\n\texit;\n}\n\n$num = $db->num_rows($resql);\n$i = 0;\n\n$param = '';\nif (!empty($contextpage) && $contextpage != $_SERVER[\"PHP_SELF\"]) {\n\t$param .= '&contextpage='.urlencode($contextpage);\n}\nif ($limit > 0 && $limit != $conf->liste_limit) {\n\t$param .= '&limit='.urlencode($limit);\n}\nif ($search_ref) {\n\t$param .= '&search_ref='.urlencode($search_ref);\n}\nif ($search_label) {\n\t$param .= '&search_label='.urlencode($search_label);\n}\nif ($search_project_ref >= 0) {\n\t$param .= \"&search_project_ref=\".urlencode($search_project_ref);\n}\nif ($search_amount) {\n\t$param .= '&search_amount='.urlencode($search_amount);\n}\nif ($search_typeid) {\n\t$param .= '&search_typeid='.urlencode($search_typeid);\n}\nif ($search_users) {\n\tforeach ($search_users as $id_user) {\n\t\t$param .= '&search_users[]='.urlencode($id_user);\n\t}\n}\nif ($search_type) {\n\t$param .= '&search_type='.urlencode($search_type);\n}\nif ($search_account) {\n\t$param .= '&search_account='.$search_account;\n}\nif ($search_status != '' && $search_status != '-1') {\n\t$param .= '&search_status='.urlencode($search_status);\n}\nif ($year) {\n\t$param .= '&year='.urlencode($year);\n}\n\n$newcardbutton = '';\nif ($user->rights->tax->charges->creer) {\n\t$newcardbutton .= dolGetButtonTitle($langs->trans('MenuNewSocialContribution'), '', 'fa fa-plus-circle', DOL_URL_ROOT.'/compta/sociales/card.php?action=create');\n}\n\nprint '<form method=\"POST\" action=\"'.$_SERVER[\"PHP_SELF\"].'\">';\nif ($optioncss != '') {\n\tprint '<input type=\"hidden\" name=\"optioncss\" value=\"'.$optioncss.'\">';\n}\nprint '<input type=\"hidden\" name=\"token\" value=\"'.newToken().'\">';\nprint '<input type=\"hidden\" name=\"action\" value=\"list\">';\nprint '<input type=\"hidden\" name=\"formfilteraction\" id=\"formfilteraction\" value=\"list\">';\nprint '<input type=\"hidden\" name=\"sortfield\" value=\"'.$sortfield.'\">';\nprint '<input type=\"hidden\" name=\"sortorder\" value=\"'.$sortorder.'\">';\nprint '<input type=\"hidden\" name=\"search_status\" value=\"'.$search_status.'\">';\nprint '<input type=\"hidden\" name=\"contextpage\" value=\"'.$contextpage.'\">';\n\n$center = '';\nif ($year) {\n\t$center = '<a href=\"list.php?year='.($year - 1).'\">'.img_previous().'</a>';\n\t$center .= ' '.$langs->trans(\"Year\").' '.$year;\n\t$center .= ' <a href=\"list.php?year='.($year + 1).'\">'.img_next().'</a>';\n}\n\nprint_barre_liste($langs->trans(\"SocialContributions\"), $page, $_SERVER[\"PHP_SELF\"], $param, $sortfield, $sortorder, $center, $num, $totalnboflines, 'bill', 0, $newcardbutton, '', $limit, 0, 0, 1);\n\nif (empty($mysoc->country_id) && empty($mysoc->country_code)) {\n\tprint '<div class=\"error\">';\n\t$langs->load(\"errors\");\n\t$countrynotdefined = $langs->trans(\"ErrorSetACountryFirst\");\n\tprint $countrynotdefined;\n\tprint '</div>';\n\n\tprint '</form>';\n\tllxFooter();\n\t$db->close();\n}\n\n$varpage = empty($contextpage) ? $_SERVER[\"PHP_SELF\"] : $contextpage;\n$selectedfields = $form->multiSelectArrayWithCheckbox('selectedfields', $arrayfields, $varpage); // This also change content of $arrayfields\nif ($massactionbutton) {\n\t$selectedfields .= $form->showCheckAddButtons('checkforselect', 1);\n}\n\nprint '<div class=\"div-table-responsive\">';\nprint '<table class=\"tagtable liste'.($moreforfilter ? \" listwithfilterbefore\" : '').'\">'.\"\\n\";\n\nprint '<tr class=\"liste_titre_filter\">';\n\n// Filters: Line number (placeholder)\nif (!empty($conf->global->MAIN_VIEW_LINE_NUMBER_IN_LIST)) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '</td>';\n}\n\n// Filter: Ref\nif (!empty($arrayfields['cs.rowid']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '<input class=\"flat maxwidth75\" type=\"text\" name=\"search_ref\" value=\"'.dol_escape_htmltag($search_ref).'\">';\n\tprint '</td>';\n}\n\n// Filter: Label\nif (!empty($arrayfields['cs.rowid']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '<input type=\"text\" class=\"flat maxwidth100\" name=\"search_label\" value=\"'.dol_escape_htmltag($search_label).'\">';\n\tprint '</td>';\n}\n\n// Filter: Type\nif (!empty($arrayfields['cs.fk_type']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\t$formsocialcontrib->select_type_socialcontrib($search_typeid, 'search_typeid', 1, 0, 0, 'maxwidth150', 1);\n\tprint '</td>';\n}\n\n// Filter: Date (placeholder)\nif (!empty($arrayfields['cs.date_ech']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '</td>';\n}\n\n// Filter: Period end date\nif (!empty($arrayfields['cs.periode']['checked'])) {\n\tprint '<td class=\"liste_titre center\">';\n\tif (!empty($conf->global->MAIN_LIST_FILTER_ON_DAY)) {\n\t\tprint '<input class=\"flat valignmiddle\" type=\"text\" size=\"1\" maxlength=\"2\" name=\"search_day_lim\" value=\"'.dol_escape_htmltag($search_day_lim).'\">';\n\t}\n\tprint '<input class=\"flat valignmiddle width25\" type=\"text\" size=\"1\" maxlength=\"2\" name=\"search_month_lim\" value=\"'.dol_escape_htmltag($search_month_lim).'\">';\n\t$formother->select_year($search_year_lim ? $search_year_lim : -1, 'search_year_lim', 1, 20, 5, 0, 0, '', 'widthauto valignmiddle');\n\tprint '</td>';\n}\n\n// Filter: Project ref\nif (!empty($arrayfields['p.ref']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\tprint '<input type=\"text\" class=\"flat\" size=\"6\" name=\"search_project_ref\" value=\"'.$search_project_ref.'\">';\n\tprint '</td>';\n}\n\nif (!empty($arrayfields['cs.fk_user']['checked'])) {\n\t// Employee\n\tprint '<td class=\"liste_titre\">';\n\tprint $form->select_dolusers($search_users, 'search_users', 1, null, 0, '', '', '0', '0', 0, '', 0, '', '', 0, 0, true);\n}\n\n// Filter: Type\nif (!empty($arrayfields['cs.fk_mode_reglement']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\t$form->select_types_paiements($search_type, 'search_type', '', 0, 1, 1, 0, 1, 'maxwidth150');\n\tprint '</td>';\n}\n\n// Filter: Bank Account\nif (!empty($arrayfields['cs.fk_account']['checked'])) {\n\tprint '<td class=\"liste_titre\">';\n\t$form->select_comptes($search_account, 'search_account', 0, '', 1, '', 0, 'maxwidth150');\n\tprint '</td>';\n}\n\n// Filter: Amount\nif (!empty($arrayfields['cs.amount']['checked'])) {\n\tprint '<td class=\"liste_titre right\">';\n\tprint '<input class=\"flat maxwidth75\" type=\"text\" name=\"search_amount\" value=\"'.dol_escape_htmltag($search_amount).'\">';\n\tprint '</td>';\n}\n\n// Filter: Status\nif (!empty($arrayfields['cs.paye']['checked'])) {\n\tprint '<td class=\"liste_titre maxwidthonsmartphone right\">';\n\t$liststatus = array('0'=>$langs->trans(\"Unpaid\"), '1'=>$langs->trans(\"Paid\"));\n\tprint $form->selectarray('search_status', $liststatus, $search_status, 1, 0, 0, '', 0, 0, 0, '', 'maxwidth100', 1);\n\tprint '</td>';\n}\n\n// Fields from hook\n$parameters = array('arrayfields'=>$arrayfields);\n$reshook = $hookmanager->executeHooks('printFieldListOption', $parameters); // Note that $action and $object may have been modified by hook\nprint $hookmanager->resPrint;\n\n// Filter: Buttons\nprint '<td class=\"liste_titre maxwidthsearch\">';\nprint $form->showFilterAndCheckAddButtons(0);\nprint '</td>';\n\nprint '</tr>';\n\nprint '<tr class=\"liste_titre\">';\nif (!empty($conf->global->MAIN_VIEW_LINE_NUMBER_IN_LIST)) {\n\tprint_liste_field_titre('#', $_SERVER['PHP_SELF'], '', '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.rowid']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.rowid']['label'], $_SERVER[\"PHP_SELF\"], \"cs.rowid\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.libelle']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.libelle']['label'], $_SERVER[\"PHP_SELF\"], \"cs.libelle\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.fk_type']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.fk_type']['label'], $_SERVER[\"PHP_SELF\"], \"cs.fk_type\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.date_ech']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.date_ech']['label'], $_SERVER[\"PHP_SELF\"], \"cs.date_ech\", '', $param, '', $sortfield, $sortorder, 'center ');\n}\nif (!empty($arrayfields['cs.periode']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.periode']['label'], $_SERVER[\"PHP_SELF\"], \"cs.periode\", '', $param, '', $sortfield, $sortorder, 'center ');\n}\nif (!empty($arrayfields['p.ref']['checked'])) {\n\tprint_liste_field_titre($arrayfields['p.ref']['label'], $_SERVER[\"PHP_SELF\"], \"p.ref\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.fk_user']['checked'])) {\n\tprint_liste_field_titre(\"Employee\", $_SERVER[\"PHP_SELF\"], \"u.lastname\", \"\", $param, 'class=\"left\"', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.fk_mode_reglement']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.fk_mode_reglement']['label'], $_SERVER[\"PHP_SELF\"], \"cs.fk_mode_reglement\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.fk_account']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.fk_account']['label'], $_SERVER[\"PHP_SELF\"], \"cs.fk_account\", '', $param, '', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.amount']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.amount']['label'], $_SERVER[\"PHP_SELF\"], \"cs.amount\", '', $param, 'class=\"right\"', $sortfield, $sortorder);\n}\nif (!empty($arrayfields['cs.paye']['checked'])) {\n\tprint_liste_field_titre($arrayfields['cs.paye']['label'], $_SERVER[\"PHP_SELF\"], \"cs.paye\", '', $param, 'class=\"right\"', $sortfield, $sortorder);\n}\n\n// Hook fields\n$parameters = array('arrayfields'=>$arrayfields, 'param'=>$param, 'sortfield'=>$sortfield, 'sortorder'=>$sortorder);\n$reshook = $hookmanager->executeHooks('printFieldListTitle', $parameters); // Note that $action and $object may have been modified by hook\nprint $hookmanager->resPrint;\n\nprint_liste_field_titre($selectedfields, $_SERVER[\"PHP_SELF\"], '', '', '', '', $sortfield, $sortorder, 'maxwidthsearch ');\nprint '</tr>';\n\n$i = 0;\n\t\t$totalarray = $TLoadedUsers = array();\nwhile ($i < min($num, $limit)) {\n\t$obj = $db->fetch_object($resql);\n\n\t$chargesociale_static->id = $obj->rowid;\n\t$chargesociale_static->ref = $obj->rowid;\n\t$chargesociale_static->label = $obj->label;\n\t$chargesociale_static->type_label = $obj->type_label;\n\tif (!empty($conf->projet->enabled)) {\n\t\t$projectstatic->id = $obj->project_id;\n\t\t$projectstatic->ref = $obj->project_ref;\n\t\t$projectstatic->title = $obj->project_label;\n\t}\n\n\tprint '<tr class=\"oddeven\">';\n\n\t// Line number\n\tif (!empty($conf->global->MAIN_VIEW_LINE_NUMBER_IN_LIST)) {\n\t\tprint '<td>'.(($offset * $limit) + $i).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Ref\n\tif (!empty($arrayfields['cs.rowid']['checked'])) {\n\t\tprint '<td>'.$chargesociale_static->getNomUrl(1, '20').'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Label\n\tif (!empty($arrayfields['cs.libelle']['checked'])) {\n\t\tprint '<td class=\"tdoverflowmax200\" title=\"'.dol_escape_htmltag($obj->label).'\">'.dol_escape_htmltag($obj->label).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Type\n\tif (!empty($arrayfields['cs.fk_type']['checked'])) {\n\t\tprint '<td class=\"tdoverflowmax200\" title=\"'.dol_escape_htmltag($obj->type_label).'\">'.dol_escape_htmltag($obj->type_label).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Date\n\tif (!empty($arrayfields['cs.date_ech']['checked'])) {\n\t\tprint '<td class=\"center\">'.dol_print_date($db->jdate($obj->date_ech), 'day').'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Date end period\n\tif (!empty($arrayfields['cs.periode']['checked'])) {\n\t\tprint '<td class=\"center\">';\n\t\tif ($obj->periode) {\n\t\t\tprint '<a href=\"list.php?search_year_lim='.dol_print_date($db->jdate($obj->periode), \"%Y\").'\">';\n\t\t\tprint dol_print_date($db->jdate($obj->periode), 'day');\n\t\t\tprint '</a>';\n\t\t}\n\t\tprint '</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Project ref\n\tif (!empty($arrayfields['p.ref']['checked'])) {\n\t\tprint '<td class=\"nowrap\">';\n\t\tif ($obj->project_id > 0) {\n\t\t\tprint $projectstatic->getNomUrl(1);\n\t\t}\n\t\tprint '</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\tif (!empty($arrayfields['cs.fk_user']['checked'])) {\n\t\t// Employee\n\t\tprint \"<td>\";\n\t\tif (!empty($obj->fk_user)) {\n\t\t\tif (!empty($TLoadedUsers[$obj->fk_user])) {\n\t\t\t\t$ustatic = $TLoadedUsers[$obj->fk_user];\n\t\t\t} else {\n\t\t\t\t$ustatic = new User($db);\n\t\t\t\t$ustatic->fetch($obj->fk_user);\n\t\t\t\t$TLoadedUsers[$obj->fk_user] = $ustatic;\n\t\t\t}\n\t\t\tprint $ustatic->getNomUrl(-1);\n\t\t}\n\t\tprint \"</td>\\n\";\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Type\n\tif (!empty($arrayfields['cs.fk_mode_reglement']['checked'])) {\n\t\tprint '<td>';\n\t\tif (!empty($obj->payment_code)) print $langs->trans(\"PaymentTypeShort\".$obj->payment_code);\n\t\tprint '</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Account\n\tif (!empty($arrayfields['cs.fk_account']['checked'])) {\n\t\tprint '<td>';\n\t\tif ($obj->fk_account > 0) {\n\t\t\t$bankstatic->id = $obj->fk_account;\n\t\t\t$bankstatic->ref = $obj->bref;\n\t\t\t$bankstatic->number = $obj->bnumber;\n\t\t\t$bankstatic->iban = $obj->iban;\n\t\t\t$bankstatic->bic = $obj->bic;\n\t\t\t$bankstatic->currency_code = $langs->trans(\"Currency\".$obj->currency_code);\n\t\t\t$bankstatic->account_number = $obj->account_number;\n\t\t\t$bankstatic->clos = $obj->clos;\n\n\t\t\t//$accountingjournal->fetch($obj->fk_accountancy_journal);\n\t\t\t//$bankstatic->accountancy_journal = $accountingjournal->getNomUrl(0, 1, 1, '', 1);\n\n\t\t\t$bankstatic->label = $obj->blabel;\n\t\t\tprint $bankstatic->getNomUrl(1);\n\t\t}\n\t\tprint '</td>';\n\t\tif (!$i) $totalarray['nbfield']++;\n\t}\n\n\t// Amount\n\tif (!empty($arrayfields['cs.amount']['checked'])) {\n\t\tprint '<td class=\"nowrap amount right\">'.price($obj->amount).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t\tif (!$i) {\n\t\t\t$totalarray['pos'][$totalarray['nbfield']] = 'totalttcfield';\n\t\t}\n\t\t$totalarray['val']['totalttcfield'] += $obj->amount;\n\t}\n\n\t// Status\n\tif (!empty($arrayfields['cs.paye']['checked'])) {\n\t\tprint '<td class=\"nowrap right\">'.$chargesociale_static->LibStatut($obj->paye, 5, $obj->alreadypayed).'</td>';\n\t\tif (!$i) {\n\t\t\t$totalarray['nbfield']++;\n\t\t}\n\t}\n\n\t// Buttons\n\tprint '<td></td>';\n\tif (!$i) {\n\t\t$totalarray['nbfield']++;\n\t}\n\n\tprint '</tr>';\n\t$i++;\n}\n\n// Show total line\ninclude DOL_DOCUMENT_ROOT.'/core/tpl/list_print_total.tpl.php';\n\nprint '</table>';\nprint '</div>';\nprint '</form>';\n\n// End of page\nllxFooter();\n$db->close();\n", "<?php\n/* Copyright (C) 2013 Laurent Destailleur  <eldy@users.sourceforge.net>\n *\n * This program is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 3 of the License, or\n * (at your option) any later version.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with this program. If not, see <https://www.gnu.org/licenses/>.\n * or see https://www.gnu.org/\n */\n\n/**\n *      \\file       test/phpunit/SqlTest.php\n *      \\ingroup    test\n *      \\brief      PHPUnit test\n *      \\remarks    To run this script as CLI:  phpunit filename.php\n */\n\nglobal $conf,$user,$langs,$db;\n//define('TEST_DB_FORCE_TYPE','mysql');\t// This is to force using mysql driver\n//require_once 'PHPUnit/Autoload.php';\nrequire_once dirname(__FILE__).'/../../htdocs/master.inc.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/security.lib.php';\nrequire_once dirname(__FILE__).'/../../htdocs/core/lib/security2.lib.php';\n\nif (! defined('NOREQUIREUSER')) {\n\tdefine('NOREQUIREUSER', '1');\n}\nif (! defined('NOREQUIREDB')) {\n\tdefine('NOREQUIREDB', '1');\n}\nif (! defined('NOREQUIRESOC')) {\n\tdefine('NOREQUIRESOC', '1');\n}\nif (! defined('NOREQUIRETRAN')) {\n\tdefine('NOREQUIRETRAN', '1');\n}\nif (! defined('NOCSRFCHECK')) {\n\tdefine('NOCSRFCHECK', '1');\n}\nif (! defined('NOTOKENRENEWAL')) {\n\tdefine('NOTOKENRENEWAL', '1');\n}\nif (! defined('NOREQUIREMENU')) {\n\tdefine('NOREQUIREMENU', '1'); // If there is no menu to show\n}\nif (! defined('NOREQUIREHTML')) {\n\tdefine('NOREQUIREHTML', '1'); // If we don't need to load the html.form.class.php\n}\nif (! defined('NOREQUIREAJAX')) {\n\tdefine('NOREQUIREAJAX', '1');\n}\nif (! defined(\"NOLOGIN\")) {\n\tdefine(\"NOLOGIN\", '1');       // If this page is public (can be called outside logged session)\n}\n\nif (empty($user->id)) {\n\tprint \"Load permissions for admin user nb 1\\n\";\n\t$user->fetch(1);\n\t$user->getrights();\n}\n$conf->global->MAIN_DISABLE_ALL_MAILS=1;\n\n\n/**\n * Class for PHPUnit tests\n *\n * @backupGlobals disabled\n * @backupStaticAttributes enabled\n * @remarks\tbackupGlobals must be disabled to have db,conf,user and lang not erased.\n */\nclass CodingPhpTest extends PHPUnit\\Framework\\TestCase\n{\n\tprotected $savconf;\n\tprotected $savuser;\n\tprotected $savlangs;\n\tprotected $savdb;\n\n\t/**\n\t * Constructor\n\t * We save global variables into local variables\n\t *\n\t * @return SecurityTest\n\t */\n\tpublic function __construct()\n\t{\n\t\tparent::__construct();\n\n\t\t//$this->sharedFixture\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$this->savconf=$conf;\n\t\t$this->savuser=$user;\n\t\t$this->savlangs=$langs;\n\t\t$this->savdb=$db;\n\n\t\tprint __METHOD__.\" db->type=\".$db->type.\" user->id=\".$user->id;\n\t\t//print \" - db \".$db->db;\n\t\tprint \"\\n\";\n\t}\n\n\t/**\n\t * setUpBeforeClass\n\t *\n\t * @return void\n\t */\n\tpublic static function setUpBeforeClass()\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$db->begin(); // This is to have all actions inside a transaction even if test launched without suite.\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * tearDownAfterClass\n\t *\n\t * @return\tvoid\n\t */\n\tpublic static function tearDownAfterClass()\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$db->rollback();\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * Init phpunit tests\n\t *\n\t * @return  void\n\t */\n\tprotected function setUp()\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * End phpunit tests\n\t *\n\t * @return  void\n\t */\n\tprotected function tearDown()\n\t{\n\t\tprint __METHOD__.\"\\n\";\n\t}\n\n\t/**\n\t * testSql\n\t *\n\t * @return string\n\t */\n\tpublic function testPHP()\n\t{\n\t\tglobal $conf,$user,$langs,$db;\n\t\t$conf=$this->savconf;\n\t\t$user=$this->savuser;\n\t\t$langs=$this->savlangs;\n\t\t$db=$this->savdb;\n\n\t\tinclude_once DOL_DOCUMENT_ROOT.'/core/lib/files.lib.php';\n\t\t$filesarray = dol_dir_list(DOL_DOCUMENT_ROOT, 'files', 1, '\\.php', null, 'fullname', SORT_ASC, 0, 0, '', 1);\n\t\t//$filesarray = dol_dir_list(DOL_DOCUMENT_ROOT, 'files', 1, '\\.php', null, 'fullname');\n\n\t\tforeach ($filesarray as $key => $file) {\n\t\t\tif (preg_match('/\\/htdocs\\/includes\\//', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/\\/htdocs\\/custom\\//', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/\\/htdocs\\/dolimed/', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/\\/htdocs\\/nltechno/', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (preg_match('/\\/htdocs\\/teclib/', $file['fullname'])) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tprint 'Check php file '.$file['fullname'].\"\\n\";\n\t\t\t$filecontent=file_get_contents($file['fullname']);\n\n\t\t\tif (preg_match('/\\.class\\.php/', $file['relativename'])\n\t\t\t\t|| preg_match('/boxes\\/box_/', $file['relativename'])\n\t\t\t\t|| preg_match('/modules\\/.*\\/doc\\/(doc|pdf)_/', $file['relativename'])\n\t\t\t\t|| preg_match('/modules\\/(import|mailings|printing)\\//', $file['relativename'])\n\t\t\t\t|| in_array($file['name'], array('modules_boxes.php', 'rapport.pdf.php', 'TraceableDB.php'))) {\n\t\t\t\tif (! in_array($file['name'], array(\n\t\t\t\t\t'api.class.php',\n\t\t\t\t\t'actioncomm.class.php',\n\t\t\t\t\t'commonobject.class.php',\n\t\t\t\t\t'conf.class.php',\n\t\t\t\t\t'html.form.class.php',\n\t\t\t\t\t'html.formmail.class.php',\n\t\t\t\t\t'infobox.class.php',\n\t\t\t\t\t'link.class.php',\n\t\t\t\t\t'translate.class.php',\n\t\t\t\t\t'utils.class.php',\n\t\t\t\t\t'modules_product.class.php',\n\t\t\t\t\t'modules_societe.class.php',\n\t\t\t\t\t'TraceableDB.php',\n\t\t\t\t\t'expeditionbatch.class.php',\n\t\t\t\t\t'expensereport_ik.class.php',\n\t\t\t\t\t'expensereport_rule.class.php',\n\t\t\t\t\t'multicurrency.class.php',\n\t\t\t\t\t'productbatch.class.php',\n\t\t\t\t\t'reception.class.php',\n\t\t\t\t\t'societe.class.php' ,\n\t\t\t\t\t'account.class.php'\n\t\t\t\t))) {\n\t\t\t\t\t// Must must not found $db->\n\t\t\t\t\t$ok=true;\n\t\t\t\t\t$matches=array();\n\t\t\t\t\t// Check string $db-> inside a class.php file (it should be $this->db-> insto such classes)\n\t\t\t\t\tpreg_match_all('/'.preg_quote('$db->', '/').'/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t\t\t$ok=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t\t\t$this->assertTrue($ok, 'Found string $db-> into a .class.php file in '.$file['relativename']);\n\t\t\t\t\t//exit;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif (! in_array($file['name'], array(\n\t\t\t\t\t'extrafieldsinexport.inc.php',\n\t\t\t\t\t'DolQueryCollector.php'\n\t\t\t\t))) {\n\t\t\t\t\t// Must must not found $this->db->\n\t\t\t\t\t$ok=true;\n\t\t\t\t\t$matches=array();\n\t\t\t\t\t// Check string $this->db-> into a non class.php file (it shoud be $db-> into such classes)\n\t\t\t\t\tpreg_match_all('/'.preg_quote('$this->db->', '/').'/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t\t\t$ok=false;\n\t\t\t\t\t\tbreak;\n\t\t\t\t\t}\n\t\t\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t\t\t$this->assertTrue($ok, 'Found string $this->db-> in '.$file['relativename']);\n\t\t\t\t\t//exit;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\t// Check string get_class...\n\t\t\tpreg_match_all('/'.preg_quote('get_class($this).\"::\".__METHOD__', '/').'/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t$ok=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found string get_class($this).\"::\".__METHOD__ that must be replaced with __METHOD__ only in '.$file['relativename']);\n\t\t\t//exit;\n\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\t// Check string $this->db->idate without quotes\n\t\t\tpreg_match_all('/(..)\\s*\\.\\s*\\$this->db->idate\\(/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($val[1] != '\\'\"' && $val[1] != '\\'\\'') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found a $this->db->idate to forge a sql request without quotes around this date field '.$file['relativename']);\n\t\t\t//exit;\n\n\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\n\t\t\t// Check sql string AND ... yyy = \".$xxx\n\t\t\t//  with xxx that is not 'thi' (for $this->db->sanitize) and 'db-' (for $db->sanitize). It means we forget a ' if string or an (int) if int when forging sql request.\n\t\t\tpreg_match_all('/(DELETE|OR|AND)\\s.*([^\\s][^\\s][^\\s])\\s*=\\s*\"\\s*\\.\\s*\\$(...)/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($val[2] == 'ity' && $val[3] == 'con') {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tvar_dump($matches);\n\t\t\t\t$ok=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non quoted or not casted var into sql request '.$file['relativename'].' - Bad.');\n\t\t\t//exit;\n\n\n\t\t\t// Check string   ='\".$this->xxx   with xxx that is not 'escape'. It means we forget a db->escape when forging sql request.\n\t\t\tpreg_match_all('/=\\s*\\'\"\\s*\\.\\s*\\$this->(....)/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($val[1] != 'db->' && $val[1] != 'esca') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non escaped string in building of a sql request '.$file['relativename'].' - Bad.');\n\t\t\t//exit;\n\n\t\t\t// Check string sql|set...'\".$yyy->xxx   with xxx that is not 'escape', 'idate', .... It means we forget a db->escape when forging sql request.\n\t\t\tpreg_match_all('/(sql|SET).+\\s*\\'\"\\s*\\.\\s*\\$(.........)/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif (! in_array($val[2], array('this->db-', 'this->esc', 'db->escap', 'dbsession', 'db->idate', 'excludeGr', 'includeGr'))) {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non escaped string in building of a sql request '.$file['relativename'].': '.$val[0].' - Bad.');\n\t\t\t//exit;\n\n\t\t\t// Checks with IN\n\n\t\t\t// Check string ' IN (\".xxx' or ' IN (\\'.xxx'  with xxx that is not '$this->db->sanitize' and not '$db->sanitize'. It means we forget a db->sanitize when forging sql request.\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/\\s+IN\\s*\\([\\'\"]\\s*\\.\\s*(.........)/i', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t//var_dump($val);\n\t\t\t\tif (!in_array($val[1], array('$db->sani', '$this->db', 'getEntity', 'WON\\',\\'L', 'self::STA', 'Commande:', 'CommandeF', 'Entrepot:', 'Facture::', 'FactureFo', 'ExpenseRe', 'Societe::', 'Ticket::S'))) {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non sanitized string in building of a IN or NOT IN sql request '.$file['relativename'].' - Bad.');\n\t\t\t//exit;\n\n\t\t\t// Check string ' IN (\\'\".xxx'   with xxx that is not '$this->db->sanitize' and not '$db->sanitize'. It means we forget a db->sanitize when forging sql request.\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/\\s+IN\\s*\\(\\'\"\\s*\\.\\s*(.........)/i', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t//var_dump($val);\n\t\t\t\tif (!in_array($val[1], array('$db->sani', '$this->db', 'getEntity', 'WON\\',\\'L', 'self::STA', 'Commande:', 'CommandeF', 'Entrepot:', 'Facture::', 'FactureFo', 'ExpenseRe', 'Societe::', 'Ticket::S'))) {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t\t//if ($reg[0] != 'db') $ok=false;\n\t\t\t}\n\t\t\t//print __METHOD__.\" Result for checking we don't have non escaped string in sql requests for file \".$file.\"\\n\";\n\t\t\t$this->assertTrue($ok, 'Found non sanitized string in building of a IN or NOT IN sql request '.$file['relativename'].' - Bad.');\n\t\t\t//exit;\n\n\t\t\t// Test that output of $_SERVER\\[\\'QUERY_STRING\\'\\] is escaped.\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/(..............)\\$_SERVER\\[\\'QUERY_STRING\\'\\]/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($val[1] != 'scape_htmltag(' && $val[1] != 'ing_nohtmltag(' && $val[1] != 'dol_escape_js(') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a $_SERVER[\\'QUERY_STRING\\'] without dol_escape_htmltag neither dol_string_nohtmltag around it, in file '.$file['relativename'].' ('.$val[1].'$_SERVER[\\'QUERY_STRING\\']). Bad.');\n\n\n\t\t\t// Test that first param of print_liste_field_titre is a translation key and not the translated value\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\t// Check string ='print_liste_field_titre\\(\\$langs'.\n\t\t\tpreg_match_all('/print_liste_field_titre\\(\\$langs/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t   $ok=false;\n\t\t\t\t   break;\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a use of print_liste_field_titre with first parameter that is a translated value instead of just the translation key in file '.$file['relativename'].'. Bad.');\n\n\n\t\t\t// Test we don't have <br />\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/<br\\s+\\/>/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($file['name'] != 'functions.lib.php') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a tag <br /> that is for xml in file '.$file['relativename'].'. You must use html syntax <br> instead.');\n\n\n\t\t\t// Test we don't have name=\"token\" value=\"'.$_SESSION['newtoken'], we must use name=\"token\" value=\"'.newToken() instead.\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/name=\"token\" value=\"\\'\\s*\\.\\s*\\$_SESSION/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\tif ($file['name'] != 'excludefile.php') {\n\t\t\t\t\t$ok=false;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a forbidden string sequence into '.$file['relativename'].' : name=\"token\" value=\"\\'.$_SESSION[..., you must use a newToken() instead of $_SESSION[\\'newtoken\\'].');\n\n\n\t\t\t// Test we don't have @var array(\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/@var\\s+array\\(/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t$ok=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a declaration @var array() instead of @var array in file '.$file['relativename'].'.');\n\n\n\t\t\t// Test we don't have CURDATE()\n\t\t\t$ok=true;\n\t\t\t$matches=array();\n\t\t\tpreg_match_all('/CURDATE\\(\\)/', $filecontent, $matches, PREG_SET_ORDER);\n\t\t\tforeach ($matches as $key => $val) {\n\t\t\t\t$ok=false;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t$this->assertTrue($ok, 'Found a CURDATE\\(\\) into code. Do not use this SQL method in file '.$file['relativename'].'. You must use the PHP function dol_now() instead.');\n\t\t}\n\n\t\treturn;\n\t}\n}\n"], "filenames": ["htdocs/compta/sociales/list.php", "test/phpunit/CodingPhpTest.php"], "buggy_code_start_loc": [209, 331], "buggy_code_end_loc": [210, 347], "fixing_code_start_loc": [209, 331], "fixing_code_end_loc": [210, 355], "type": "CWE-89", "message": "dolibarr is vulnerable to Improper Neutralization of Special Elements used in an SQL Command", "other": {"cve": {"id": "CVE-2022-0224", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-14T18:15:10.243", "lastModified": "2022-11-17T17:41:02.950", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "dolibarr is vulnerable to Improper Neutralization of Special Elements used in an SQL Command"}, {"lang": "es", "value": "dolibarr es vulnerable a una Neutralizaci\u00f3n Inapropiada de los Elementos Especiales usados en un Comando SQL"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 8.3, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.5}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:dolibarr:dolibarr_erp\\/crm:*:*:*:*:*:*:*:*", "versionEndExcluding": "15.0.0", "matchCriteriaId": "53A392E2-A18F-45C3-99B4-8D763AB20BE4"}]}]}], "references": [{"url": "https://github.com/dolibarr/dolibarr/commit/b9b45fb50618aa8053961f50bc8604b188d0ea79", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/f1d1ce3e-ca92-4c7b-b1b8-934e28eaa486", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/dolibarr/dolibarr/commit/b9b45fb50618aa8053961f50bc8604b188d0ea79"}}