{"buggy_code": ["/*\n * The MIT License\n *\n * Copyright (c) 2004-2009, Sun Microsystems, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.diagnosis;\n\nimport hudson.model.AdministrativeMonitor;\nimport jenkins.model.Jenkins;\nimport hudson.model.AbstractModelObject;\nimport hudson.Extension;\nimport hudson.ExtensionPoint;\nimport hudson.ExtensionList;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.QueryParameter;\n\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * Monitors the disk usage of <tt>JENKINS_HOME</tt>, and if it's almost filled up, warn the user.\n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic final class HudsonHomeDiskUsageMonitor extends AdministrativeMonitor {\n    /**\n     * Value updated by {@link HudsonHomeDiskUsageChecker}.\n     */\n    /*package*/ boolean activated;\n\n    public HudsonHomeDiskUsageMonitor() {\n        super(\"hudsonHomeIsFull\");\n    }\n\n    public boolean isActivated() {\n        return activated;\n    }\n    \n    @Override\n    public String getDisplayName() {\n    \treturn Messages.HudsonHomeDiskUsageMonitor_DisplayName();\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    public HttpResponse doAct(@QueryParameter String no) throws IOException {\n        if(no!=null) {\n            disable(true);\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return HttpResponses.redirectToDot();\n        }\n    }\n\n    public List<Solution> getSolutions() {\n        return Solution.all();\n    }\n\n    /**\n     * Binds a solution to the URL.\n     */\n    public Solution getSolution(String id) {\n        for( Solution s : Solution.all() )\n            if(s.id.equals(id))\n                return s;\n        return null;\n    }\n\n    /**\n     * Short cut for getting the singleton instance.\n     */\n    public static HudsonHomeDiskUsageMonitor get() {\n        return all().get(HudsonHomeDiskUsageMonitor.class);\n    }\n\n    /**\n     * Extension point for suggesting solutions for full JENKINS_HOME.\n     *\n     * <h3>Views</h3>\n     * <dl>\n     * <dt>message.jelly</dt>\n     * <dd>\n     * This view is rendered inside an LI tag as a possible solution to the full JENKINS_HOME problem.\n     * </dd>\n     * </dl>\n     */\n    public static abstract class Solution extends AbstractModelObject implements ExtensionPoint {\n        /**\n         * Human-readable ID of this monitor, which needs to be unique within the system.\n         *\n         * <p>\n         * This ID is used to remember persisted setting for this monitor,\n         * so the ID should remain consistent beyond the Hudson JVM lifespan.\n         */\n        public final String id;\n\n        protected Solution(String id) {\n            this.id = id;\n        }\n\n        protected Solution() {\n            this.id = this.getClass().getName();\n        }\n\n        /**\n         * Returns the URL of this monitor, relative to the context path.\n         */\n        public String getUrl() {\n            return HudsonHomeDiskUsageMonitor.get().getUrl()+\"/solution/\"+id;\n        }\n\n        /**\n         * All registered {@link Solution}s.\n         */\n        public static ExtensionList<Solution> all() {\n            return ExtensionList.lookup(Solution.class);\n        }\n    }\n}\n", "/*\n * The MIT License\n *\n * Copyright (c) 2004-2010, Sun Microsystems, Inc., Alan Harder\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.diagnosis;\n\nimport com.google.common.base.Predicate;\nimport com.thoughtworks.xstream.converters.UnmarshallingContext;\nimport hudson.Extension;\nimport hudson.XmlFile;\nimport hudson.model.AdministrativeMonitor;\nimport hudson.model.Item;\nimport hudson.model.Job;\nimport hudson.model.ManagementLink;\nimport hudson.model.Run;\nimport hudson.model.Saveable;\nimport hudson.model.listeners.ItemListener;\nimport hudson.model.listeners.RunListener;\nimport hudson.model.listeners.SaveableListener;\nimport hudson.security.ACL;\nimport hudson.util.RobustReflectionConverter;\nimport hudson.util.VersionNumber;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.annotation.CheckForNull;\nimport jenkins.model.Jenkins;\nimport org.acegisecurity.context.SecurityContext;\nimport org.acegisecurity.context.SecurityContextHolder;\nimport org.kohsuke.accmod.Restricted;\nimport org.kohsuke.accmod.restrictions.NoExternalUse;\nimport org.kohsuke.stapler.HttpRedirect;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\n/**\n * Tracks whether any data structure changes were corrected when loading XML,\n * that could be resaved to migrate that data to the new format.\n *\n * @author Alan.Harder@Sun.Com\n */\n@Extension\npublic class OldDataMonitor extends AdministrativeMonitor {\n    private static final Logger LOGGER = Logger.getLogger(OldDataMonitor.class.getName());\n\n    private ConcurrentMap<SaveableReference,VersionRange> data = new ConcurrentHashMap<SaveableReference,VersionRange>();\n\n    static OldDataMonitor get(Jenkins j) {\n        return (OldDataMonitor) j.getAdministrativeMonitor(\"OldData\");\n    }\n\n    public OldDataMonitor() {\n        super(\"OldData\");\n    }\n\n    @Override\n    public String getDisplayName() {\n        return Messages.OldDataMonitor_DisplayName();\n    }\n\n    public boolean isActivated() {\n        return !data.isEmpty();\n    }\n\n    public Map<Saveable,VersionRange> getData() {\n        Map<Saveable,VersionRange> r = new HashMap<Saveable,VersionRange>();\n        for (Map.Entry<SaveableReference,VersionRange> entry : this.data.entrySet()) {\n            Saveable s = entry.getKey().get();\n            if (s != null) {\n                r.put(s, entry.getValue());\n            }\n        }\n        return r;\n    }\n\n    private static void remove(Saveable obj, boolean isDelete) {\n        Jenkins j = Jenkins.getInstance();\n        if (j != null) {\n            OldDataMonitor odm = get(j);\n            SecurityContext oldContext = ACL.impersonate(ACL.SYSTEM);\n            try {\n                odm.data.remove(referTo(obj));\n                if (isDelete && obj instanceof Job<?, ?>) {\n                    for (Run r : ((Job<?, ?>) obj).getBuilds()) {\n                        odm.data.remove(referTo(r));\n                    }\n                }\n            } finally {\n                SecurityContextHolder.setContext(oldContext);\n            }\n        }\n    }\n\n    // Listeners to remove data here if resaved or deleted in regular Hudson usage\n\n    @Extension\n    public static final SaveableListener changeListener = new SaveableListener() {\n        @Override\n        public void onChange(Saveable obj, XmlFile file) {\n            remove(obj, false);\n        }\n    };\n\n    @Extension\n    public static final ItemListener itemDeleteListener = new ItemListener() {\n        @Override\n        public void onDeleted(Item item) {\n            remove(item, true);\n        }\n    };\n\n    @Extension\n    public static final RunListener<Run> runDeleteListener = new RunListener<Run>() {\n        @Override\n        public void onDeleted(Run run) {\n            remove(run, true);\n        }\n    };\n\n    /**\n     * Inform monitor that some data in a deprecated format has been loaded,\n     * and converted in-memory to a new structure.\n     * @param obj Saveable object; calling save() on this object will persist\n     *            the data in its new format to disk.\n     * @param version Hudson release when the data structure changed.\n     */\n    public static void report(Saveable obj, String version) {\n        OldDataMonitor odm = get(Jenkins.getInstance());\n        try {\n            SaveableReference ref = referTo(obj);\n            while (true) {\n                VersionRange vr = odm.data.get(ref);\n                if (vr != null && odm.data.replace(ref, vr, new VersionRange(vr, version, null))) {\n                    break;\n                } else if (odm.data.putIfAbsent(ref, new VersionRange(null, version, null)) == null) {\n                    break;\n                }\n            }\n        } catch (IllegalArgumentException ex) {\n            LOGGER.log(Level.WARNING, \"Bad parameter given to OldDataMonitor\", ex);\n        }\n    }\n\n    /**\n     * Inform monitor that some data in a deprecated format has been loaded, during\n     * XStream unmarshalling when the Saveable containing this object is not available.\n     * @param context XStream unmarshalling context\n     * @param version Hudson release when the data structure changed.\n     */\n    public static void report(UnmarshallingContext context, String version) {\n        RobustReflectionConverter.addErrorInContext(context, new ReportException(version));\n    }\n\n    private static class ReportException extends Exception {\n        private String version;\n        private ReportException(String version) {\n            this.version = version;\n        }\n    }\n\n    /**\n     * Inform monitor that some unreadable data was found while loading.\n     * @param obj Saveable object; calling save() on this object will discard the unreadable data.\n     * @param errors Exception(s) thrown while loading, regarding the unreadable classes/fields.\n     */\n    public static void report(Saveable obj, Collection<Throwable> errors) {\n        StringBuilder buf = new StringBuilder();\n        int i = 0;\n        for (Throwable e : errors) {\n            if (e instanceof ReportException) {\n                report(obj, ((ReportException)e).version);\n            } else {\n                if (++i > 1) buf.append(\", \");\n                buf.append(e.getClass().getSimpleName()).append(\": \").append(e.getMessage());\n            }\n        }\n        if (buf.length() == 0) return;\n        Jenkins j = Jenkins.getInstance();\n        if (j == null) {\n            // Startup failed, something is very broken, so report what we can.\n            for (Throwable t : errors) {\n                LOGGER.log(Level.WARNING, \"could not read \" + obj + \" (and Jenkins did not start up)\", t);\n            }\n            return;\n        }\n        OldDataMonitor odm = get(j);\n        SaveableReference ref = referTo(obj);\n        while (true) {\n            VersionRange vr = odm.data.get(ref);\n            if (vr != null && odm.data.replace(ref, vr, new VersionRange(vr, null, buf.toString()))) {\n                break;\n            } else if (odm.data.putIfAbsent(ref, new VersionRange(null, null, buf.toString())) == null) {\n                break;\n            }\n        }\n    }\n\n    public static class VersionRange {\n        private static VersionNumber currentVersion = Jenkins.getVersion();\n\n        final VersionNumber min;\n        final VersionNumber max;\n        final boolean single;\n        final public String extra;\n\n        public VersionRange(VersionRange previous, String version, String extra) {\n            if (previous == null) {\n                min = max = version != null ? new VersionNumber(version) : null;\n                this.single = true;\n                this.extra = extra;\n            } else if (version == null) {\n                min = previous.min;\n                max = previous.max;\n                single = previous.single;\n                this.extra = extra;\n            } else {\n                VersionNumber ver = new VersionNumber(version);\n                if (previous.min == null || ver.isOlderThan(previous.min)) {\n                    this.min = ver;\n                } else {\n                    this.min = previous.min;\n                }\n                if (previous.max == null || ver.isNewerThan(previous.max)) {\n                    this.max = ver;\n                } else {\n                    this.max = previous.max;\n                }\n                this.single = this.max.isNewerThan(this.min);\n                this.extra = extra;\n            }\n        }\n\n        @Override\n        public String toString() {\n            return min==null ? \"\" : min.toString() + (single ? \"\" : \" - \" + max.toString());\n        }\n\n        /**\n         * Does this version range contain a version more than the given number of releases ago?\n         * @param threshold Number of releases\n         * @return True if the major version# differs or the minor# differs by >= threshold\n         */\n        public boolean isOld(int threshold) {\n            return currentVersion != null && min != null && (currentVersion.digit(0) > min.digit(0)\n                    || (currentVersion.digit(0) == min.digit(0)\n                    && currentVersion.digit(1) - min.digit(1) >= threshold));\n        }\n\n    }\n\n    /**\n     * Sorted list of unique max-versions in the data set.  For select list in jelly.\n     */\n    @Restricted(NoExternalUse.class)\n    public Iterator<VersionNumber> getVersionList() {\n        TreeSet<VersionNumber> set = new TreeSet<VersionNumber>();\n        for (VersionRange vr : data.values()) {\n            if (vr.max != null) {\n                set.add(vr.max);\n            }\n        }\n        return set.iterator();\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    @RequirePOST\n    public HttpResponse doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {\n        if (req.hasParameter(\"no\")) {\n            disable(true);\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return new HttpRedirect(\"manage\");\n        }\n    }\n\n    /**\n     * Save all or some of the files to persist data in the new forms.\n     * Remove those items from the data map.\n     */\n    @RequirePOST\n    public HttpResponse doUpgrade(StaplerRequest req, StaplerResponse rsp) {\n        final String thruVerParam = req.getParameter(\"thruVer\");\n        final VersionNumber thruVer = thruVerParam.equals(\"all\") ? null : new VersionNumber(thruVerParam);\n\n        saveAndRemoveEntries(new Predicate<Map.Entry<SaveableReference, VersionRange>>() {\n            @Override\n            public boolean apply(Map.Entry<SaveableReference, VersionRange> entry) {\n                VersionNumber version = entry.getValue().max;\n                return version != null && (thruVer == null || !version.isNewerThan(thruVer));\n            }\n        });\n\n        return HttpResponses.forwardToPreviousPage();\n    }\n\n    /**\n     * Save all files containing only unreadable data (no data upgrades), which discards this data.\n     * Remove those items from the data map.\n     */\n    @RequirePOST\n    public HttpResponse doDiscard(StaplerRequest req, StaplerResponse rsp) {\n        saveAndRemoveEntries( new Predicate<Map.Entry<SaveableReference,VersionRange>>() {\n            @Override\n            public boolean apply(Map.Entry<SaveableReference, VersionRange> entry) {\n                return entry.getValue().max == null;\n            }\n        });\n\n        return HttpResponses.forwardToPreviousPage();\n    }\n\n    private void saveAndRemoveEntries(Predicate<Map.Entry<SaveableReference, VersionRange>> matchingPredicate) {\n        /*\n         * Note that there a race condition here: we acquire the lock and get localCopy which includes some\n         * project (say); then we go through our loop and save that project; then someone POSTs a new\n         * config.xml for the project with some old data, causing remove to be called and the project to be\n         * added to data (in the new version); then we hit the end of this method and the project is removed\n         * from data again, even though it again has old data.\n         *\n         * In practice this condition is extremely unlikely, and not a major problem even if it\n         * does occur: just means the user will be prompted to discard less than they should have been (and\n         * would see the warning again after next restart).\n         */\n        List<SaveableReference> removed = new ArrayList<SaveableReference>();\n        for (Map.Entry<SaveableReference,VersionRange> entry : data.entrySet()) {\n            if (matchingPredicate.apply(entry)) {\n                Saveable s = entry.getKey().get();\n                if (s != null) {\n                    try {\n                        s.save();\n                    } catch (Exception x) {\n                        LOGGER.log(Level.WARNING, \"failed to save \" + s, x);\n                    }\n                }\n                removed.add(entry.getKey());\n            }\n        }\n\n        data.keySet().removeAll(removed);\n    }\n\n    public HttpResponse doIndex(StaplerResponse rsp) throws IOException {\n        return new HttpRedirect(\"manage\");\n    }\n\n    /** Reference to a saveable object that need not actually hold it in heap. */\n    private interface SaveableReference {\n        @CheckForNull Saveable get();\n        // must also define equals, hashCode\n    }\n\n    private static SaveableReference referTo(Saveable s) {\n        if (s instanceof Run) {\n            Job parent = ((Run) s).getParent();\n            if (Jenkins.getInstance().getItemByFullName(parent.getFullName()) == parent) {\n                return new RunSaveableReference((Run) s);\n            }\n        }\n        return new SimpleSaveableReference(s);\n    }\n\n    private static final class SimpleSaveableReference implements SaveableReference {\n        private final Saveable instance;\n        SimpleSaveableReference(Saveable instance) {\n            this.instance = instance;\n        }\n        @Override public Saveable get() {\n            return instance;\n        }\n        @Override public int hashCode() {\n            return instance.hashCode();\n        }\n        @Override public boolean equals(Object obj) {\n            return obj instanceof SimpleSaveableReference && instance.equals(((SimpleSaveableReference) obj).instance);\n        }\n    }\n\n    // could easily make an ItemSaveableReference, but Jenkins holds all these strongly, so why bother\n\n    private static final class RunSaveableReference implements SaveableReference {\n        private final String id;\n        RunSaveableReference(Run<?,?> r) {\n            id = r.getExternalizableId();\n        }\n        @Override public Saveable get() {\n            try {\n                return Run.fromExternalizableId(id);\n            } catch (IllegalArgumentException x) {\n                // Typically meaning the job or build was since deleted.\n                LOGGER.log(Level.FINE, null, x);\n                return null;\n            }\n        }\n        @Override public int hashCode() {\n            return id.hashCode();\n        }\n        @Override public boolean equals(Object obj) {\n            return obj instanceof RunSaveableReference && id.equals(((RunSaveableReference) obj).id);\n        }\n    }\n\n    @Extension\n    public static class ManagementLinkImpl extends ManagementLink {\n        @Override\n        public String getIconFileName() {\n            return \"document.png\";\n        }\n\n        @Override\n        public String getUrlName() {\n            return \"administrativeMonitor/OldData/\";\n        }\n\n        @Override\n        public String getDescription() {\n            return Messages.OldDataMonitor_Description();\n        }\n\n        public String getDisplayName() {\n            return Messages.OldDataMonitor_DisplayName();\n        }\n    }\n}\n", "/*\n * The MIT License\n *\n * Copyright (c) 2010, InfraDNA, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.diagnosis;\n\nimport hudson.Extension;\nimport hudson.Util;\nimport hudson.model.AdministrativeMonitor;\nimport org.kohsuke.stapler.HttpRedirect;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.QueryParameter;\n\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jenkins.model.Jenkins;\nimport org.kohsuke.stapler.Stapler;\n\n/**\n * Looks out for a broken reverse proxy setup that doesn't rewrite the location header correctly.\n *\n * <p>\n * Have the JavaScript make an AJAX call, to which we respond with 302 redirect. If the reverse proxy\n * is done correctly, this will be handled by {@link #doFoo()}, but otherwise we'll report that as an error.\n * Unfortunately, {@code XmlHttpRequest} doesn't expose properties that allow the client-side JavaScript\n * to learn the details of the failure, so we have to make do with limited information.\n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class ReverseProxySetupMonitor extends AdministrativeMonitor {\n\n    private static final Logger LOGGER = Logger.getLogger(ReverseProxySetupMonitor.class.getName());\n\n    @Override\n    public boolean isActivated() {\n        // return true to always inject an HTML fragment to perform a test\n        return true;\n    }\n\n    public HttpResponse doTest() {\n        String referer = Stapler.getCurrentRequest().getReferer();\n        Jenkins j = Jenkins.getInstance();\n        assert j != null;\n        // May need to send an absolute URL, since handling of HttpRedirect with a relative URL does not currently honor X-Forwarded-Proto/Port at all.\n        String redirect = j.getRootUrl() + \"administrativeMonitor/\" + id + \"/testForReverseProxySetup/\" + (referer != null ? Util.rawEncode(referer) : \"NO-REFERER\") + \"/\";\n        LOGGER.log(Level.FINE, \"coming from {0} and redirecting to {1}\", new Object[] {referer, redirect});\n        return new HttpRedirect(redirect);\n    }\n\n    public void getTestForReverseProxySetup(String rest) {\n        Jenkins j = Jenkins.getInstance();\n        assert j != null;\n        String inferred = j.getRootUrlFromRequest() + \"manage\";\n        // TODO this could also verify that j.getRootUrl() has been properly configured, and send a different message if not\n        if (rest.startsWith(inferred)) { // not using equals due to JENKINS-24014\n            throw HttpResponses.ok();\n        } else {\n            LOGGER.log(Level.WARNING, \"{0} vs. {1}\", new Object[] {inferred, rest});\n            throw HttpResponses.errorWithoutStack(404, inferred + \" vs. \" + rest);\n        }\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    public HttpResponse doAct(@QueryParameter String no) throws IOException {\n        if(no!=null) { // dismiss\n            disable(true);\n            // of course the irony is that this redirect won't work\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return new HttpRedirect(\"https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+says+my+reverse+proxy+setup+is+broken\");\n        }\n    }\n}\n\n", "/*\n * The MIT License\n *\n * Copyright (c) 2004-2009, Sun Microsystems, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.diagnosis;\n\nimport hudson.model.AdministrativeMonitor;\nimport jenkins.model.Jenkins;\nimport hudson.Extension;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\n\nimport java.io.IOException;\n\n/**\n * If Hudson is run with a lot of jobs but no views, suggest the user that they can create views.\n *\n * <p>\n * I noticed at an user visit that some users didn't notice the '+' icon in the tab bar. \n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class TooManyJobsButNoView extends AdministrativeMonitor {\n    public boolean isActivated() {\n        Jenkins h = Jenkins.getInstance();\n        return h.getViews().size()==1 && h.getItemMap().size()> THRESHOLD;\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {\n        if(req.hasParameter(\"no\")) {\n            disable(true);\n            rsp.sendRedirect(req.getContextPath()+\"/manage\");\n        } else {\n            rsp.sendRedirect(req.getContextPath()+\"/newView\");\n        }\n    }\n\n    public static final int THRESHOLD = 16;\n}\n", "/*\n * The MIT License\n * \n * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.model;\n\nimport hudson.ExtensionPoint;\nimport hudson.ExtensionList;\nimport hudson.Extension;\nimport hudson.ExtensionPoint.LegacyInstancesAreScopedToHudson;\nimport hudson.triggers.SCMTrigger;\nimport hudson.triggers.TimerTrigger;\n\nimport java.util.Set;\nimport java.io.IOException;\n\nimport jenkins.model.Jenkins;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\n\n/**\n * Checks the health of a subsystem of Jenkins and if there's something\n * that requires administrator's attention, notify the administrator.\n *\n * <h2>How to implement?</h2>\n * <p>\n * Plugins who wish to contribute such notifications can implement this\n * class and put {@link Extension} on it to register it to Jenkins.\n *\n * <p>\n * Once installed, it's the implementer's responsibility to perform\n * monitoring and activate/deactivate the monitor accordingly. Sometimes\n * this can be done by updating a flag from code (see {@link SCMTrigger}\n * for one such example), while other times it's more convenient to do\n * so by running some code periodically (for this, use {@link TimerTrigger#timer})\n *\n * <p>\n * {@link AdministrativeMonitor}s are bound to URL by {@link Jenkins#getAdministrativeMonitor(String)}.\n * See {@link #getUrl()}.\n *\n * <h3>Views</h3>\n * <dl>\n * <dt>message.jelly</dt>\n * <dd>\n * If {@link #isActivated()} returns true, Jenkins will use the <tt>message.jelly</tt>\n * view of this object to render the warning text. This happens in the\n * <tt>http://SERVER/jenkins/manage</tt> page. This view should typically render\n * a DIV box with class='error' or class='warning' with a human-readable text\n * inside it. It often also contains a link to a page that provides more details\n * about the problem.\n * </dd>\n * </dl>\n *\n * @author Kohsuke Kawaguchi\n * @since 1.273\n * @see Jenkins#administrativeMonitors\n */\n@LegacyInstancesAreScopedToHudson\npublic abstract class AdministrativeMonitor extends AbstractModelObject implements ExtensionPoint {\n    /**\n     * Human-readable ID of this monitor, which needs to be unique within the system.\n     *\n     * <p>\n     * This ID is used to remember persisted setting for this monitor,\n     * so the ID should remain consistent beyond the Hudson JVM lifespan.\n     */\n    public final String id;\n\n    protected AdministrativeMonitor(String id) {\n        this.id = id;\n    }\n\n    protected AdministrativeMonitor() {\n        this.id = this.getClass().getName();\n    }\n\n    /**\n     * Returns the URL of this monitor, relative to the context path, like \"administrativeMonitor/foobar\".\n     */\n    public String getUrl() {\n        return \"administrativeMonitor/\"+id;\n    }\n\n    public String getDisplayName() {\n        return id;\n    }\n\n    public final String getSearchUrl() {\n        return getUrl();\n    }\n\n    /**\n     * Mark this monitor as disabled, to prevent this from showing up in the UI.\n     */\n    public void disable(boolean value) throws IOException {\n        AbstractCIBase hudson = Jenkins.getInstance();\n        Set<String> set = hudson.disabledAdministrativeMonitors;\n        if(value)   set.add(id);\n        else        set.remove(id);\n        hudson.save();\n    }\n\n    /**\n     * Returns true if this monitor {@link #disable(boolean) isn't disabled} earlier.\n     *\n     * <p>\n     * This flag implements the ability for the admin to say \"no thank you\" to the monitor that\n     * he wants to ignore.\n     */\n    public boolean isEnabled() {\n        return !((AbstractCIBase)Jenkins.getInstance()).disabledAdministrativeMonitors.contains(id);\n    }\n\n    /**\n     * Returns true if this monitor is activated and\n     * wants to produce a warning message.\n     *\n     * <p>\n     * This method is called from the HTML rendering thread,\n     * so it should run efficiently.\n     */\n    public abstract boolean isActivated();\n\n    /**\n     * URL binding to disable this monitor.\n     */\n    public void doDisable(StaplerRequest req, StaplerResponse rsp) throws IOException {\n        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\n        disable(true);\n        rsp.sendRedirect2(req.getContextPath()+\"/manage\");\n    }\n\n    /**\n     * All registered {@link AdministrativeMonitor} instances.\n     */\n    public static ExtensionList<AdministrativeMonitor> all() {\n        return ExtensionList.lookup(AdministrativeMonitor.class);\n    }\n}\n", "package jenkins.diagnostics;\n\nimport hudson.Extension;\nimport hudson.model.AdministrativeMonitor;\nimport jenkins.model.Jenkins;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\n\nimport java.io.IOException;\n\n/**\n * Unsecured Jenkins is, well, insecure.\n *\n * <p>\n * Call attention to the fact that Jenkins is not secured, and encourage the administrator\n * to take an action.\n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class SecurityIsOffMonitor extends AdministrativeMonitor {\n    @Override\n    public boolean isActivated() {\n        return !Jenkins.getInstance().isUseSecurity();\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {\n        if(req.hasParameter(\"no\")) {\n            disable(true);\n            rsp.sendRedirect(req.getContextPath()+\"/manage\");\n        } else {\n            rsp.sendRedirect(req.getContextPath()+\"/configureSecurity\");\n        }\n    }\n}\n", "package jenkins.security;\n\nimport hudson.Extension;\nimport hudson.init.InitMilestone;\nimport hudson.init.Initializer;\nimport hudson.model.TaskListener;\nimport hudson.util.HttpResponses;\nimport hudson.util.SecretRewriter;\nimport hudson.util.VersionNumber;\nimport jenkins.management.AsynchronousAdministrativeMonitor;\nimport jenkins.model.Jenkins;\nimport jenkins.util.io.FileBoolean;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.StaplerProxy;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.security.GeneralSecurityException;\nimport java.util.Date;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Warns the administrator to run {@link SecretRewriter}\n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class RekeySecretAdminMonitor extends AsynchronousAdministrativeMonitor implements StaplerProxy {\n\n    /**\n     * Whether we detected a need to run the rewrite program.\n     * Once we set it to true, we'll never turn it off.\n     *\n     * If the admin decides to dismiss this warning, we use {@link #isEnabled()} for that.\n     *\n     * In this way we can correctly differentiate all the different states.\n     */\n    private final FileBoolean needed = state(\"needed\");\n\n    /**\n     * If the scanning process has run to the completion, we set to this true.\n     */\n    private final FileBoolean done = state(\"done\");\n\n    /**\n     * If the rewrite process is scheduled upon the next boot.\n     */\n    private final FileBoolean scanOnBoot = state(\"scanOnBoot\");\n\n    public RekeySecretAdminMonitor() throws IOException {\n        // if JENKINS_HOME existed <1.497, we need to offer rewrite\n        // this computation needs to be done and the value be captured,\n        // since $JENKINS_HOME/config.xml can be saved later before the user has\n        // actually rewritten XML files.\n        Jenkins j = Jenkins.getInstance();\n        if (j.isUpgradedFromBefore(new VersionNumber(\"1.496.*\"))\n        &&  new FileBoolean(new File(j.getRootDir(),\"secret.key.not-so-secret\")).isOff())\n            needed.on();\n    }\n\n    /**\n     * Requires ADMINISTER permission for any operation in here.\n     */\n    public Object getTarget() {\n        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\n        return this;\n    }\n\n    @Override\n    public boolean isActivated() {\n        return needed.isOn();\n    }\n\n    /**\n     * Indicates that the re-keying has run to the completion.\n     */\n    public boolean isDone() {\n        return done.isOn();\n    }\n\n    public void setNeeded() {\n        needed.on();\n    }\n\n    public boolean isScanOnBoot() {\n        return scanOnBoot.isOn();\n    }\n\n    @RequirePOST\n    public HttpResponse doScan(StaplerRequest req) throws IOException, GeneralSecurityException {\n        if(req.hasParameter(\"background\")) {\n            start(false);\n        } else\n        if(req.hasParameter(\"schedule\")) {\n            scanOnBoot.on();\n        } else\n        if(req.hasParameter(\"dismiss\")) {\n            disable(true);\n        } else\n            throw HttpResponses.error(400,\"Invalid request submission: \" + req.getParameterMap());\n\n        return HttpResponses.redirectViaContextPath(\"/manage\");\n    }\n\n\n    private FileBoolean state(String name) {\n        return new FileBoolean(new File(getBaseDir(),name));\n    }\n\n    @Initializer(fatal=false,after=InitMilestone.PLUGINS_STARTED,before=InitMilestone.EXTENSIONS_AUGMENTED)\n    // as early as possible, but this needs to be late enough that the ConfidentialStore is available\n    public static void scanOnReboot() throws InterruptedException, IOException, GeneralSecurityException {\n        RekeySecretAdminMonitor m = new RekeySecretAdminMonitor();  // throw-away instance\n\n        FileBoolean flag = m.scanOnBoot;\n        if (flag.isOn()) {\n            flag.off();\n            m.start(false).join();\n            // block the boot until the rewrite process is complete\n            // don't let the failure in RekeyThread block Jenkins boot.\n        }\n    }\n\n    @Override\n    public String getDisplayName() {\n        return Messages.RekeySecretAdminMonitor_DisplayName();\n    }\n\n    /**\n     * Rewrite log file.\n     */\n    @Override\n    protected File getLogFile() {\n        return new File(getBaseDir(),\"rekey.log\");\n    }\n\n    @Override\n    protected void fix(TaskListener listener) throws Exception {\n        LOGGER.info(\"Initiating a re-keying of secrets. See \"+getLogFile());\n\n        SecretRewriter rewriter = new SecretRewriter(new File(getBaseDir(),\"backups\"));\n\n        try {\n            PrintStream log = listener.getLogger();\n            log.println(\"Started re-keying \" + new Date());\n            int count = rewriter.rewriteRecursive(Jenkins.getInstance().getRootDir(), listener);\n            log.printf(\"Completed re-keying %d files on %s\\n\",count,new Date());\n            new RekeySecretAdminMonitor().done.on();\n            LOGGER.info(\"Secret re-keying completed\");\n        } catch (Exception e) {\n            LOGGER.log(Level.SEVERE, \"Fatal failure in re-keying secrets\",e);\n            e.printStackTrace(listener.error(\"Fatal failure in rewriting secrets\"));\n        }\n    }\n\n    private static final Logger LOGGER = Logger.getLogger(RekeySecretAdminMonitor.class.getName());\n\n}\n", "package jenkins.security.s2m;\n\nimport hudson.Extension;\nimport hudson.FilePath;\nimport hudson.model.AdministrativeMonitor;\nimport hudson.remoting.Callable;\nimport jenkins.model.Jenkins;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.QueryParameter;\n\nimport javax.inject.Inject;\nimport java.io.IOException;\n\n/**\n * Report any rejected {@link Callable}s and {@link FilePath} executions and allow\n * admins to whitelist them.\n *\n * @since 1.THU\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class AdminCallableMonitor extends AdministrativeMonitor {\n    @Inject\n    Jenkins jenkins;\n\n    @Inject\n    AdminWhitelistRule rule;\n\n    public AdminCallableMonitor() {\n        super(\"slaveToMasterAccessControl\");\n    }\n\n    @Override\n    public boolean isActivated() {\n        return !rule.rejected.describe().isEmpty();\n    }\n\n    @Override\n    public String getDisplayName() {\n        return \"Slave \\u2192 Master Access Control\";\n    }\n\n    // bind this to URL\n    public AdminWhitelistRule getRule() {\n        return rule;\n    }\n\n    /**\n     * Depending on whether the user said \"examin\" or \"dismiss\", send him to the right place.\n     */\n    public HttpResponse doAct(@QueryParameter String dismiss) throws IOException {\n        if(dismiss!=null) {\n            disable(true);\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return HttpResponses.redirectTo(\"rule/\");\n        }\n    }\n\n    public HttpResponse doIndex() {\n        return HttpResponses.redirectTo(\"rule/\");\n    }\n}\n", "package jenkins.security.s2m;\n\nimport hudson.Extension;\nimport hudson.model.AdministrativeMonitor;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.QueryParameter;\n\nimport javax.inject.Inject;\nimport java.io.IOException;\n\n/**\n * If {@link AdminWhitelistRule#masterKillSwitch} is on, warn the user.\n *\n * @author Kohsuke Kawaguchi\n * @since 1.THU\n */\n@Extension\npublic class MasterKillSwitchWarning extends AdministrativeMonitor {\n    @Inject\n    AdminWhitelistRule rule;\n\n    @Inject\n    MasterKillSwitchConfiguration config;\n\n    @Override\n    public boolean isActivated() {\n        return rule.getMasterKillSwitch() && config.isRelevant();\n    }\n\n    public HttpResponse doAct(@QueryParameter String dismiss) throws IOException {\n        if(dismiss!=null) {\n            disable(true);\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return HttpResponses.redirectViaContextPath(\"configureSecurity\");\n        }\n    }\n}\n", "<!--\nThe MIT License\n\nCopyright (c) 2004-2009, Sun Microsystems, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n-->\n\n<?jelly escape-by-default='true'?>\n<j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" xmlns:d=\"jelly:define\" xmlns:l=\"/lib/layout\" xmlns:t=\"/lib/hudson\" xmlns:f=\"/lib/form\" xmlns:i=\"jelly:fmt\">\n\t<l:layout title=\"${%JENKINS_HOME is almost full}\" permission=\"${app.ADMINISTER}\">\n\t\t<l:main-panel>\n      <h1>\n        <l:icon class=\"icon-warning icon-xlg\"/>\n        ${%blurb}\n      </h1>\n\n      <p>\n        ${%description.1(app.rootDir)}\n      </p><p>\n        ${%description.2}\n      </p>\n\n      <ol>\n        <li>\n          ${%solution.1}\n        </li>\n        <li>\n          ${%solution.2}\n        </li>\n        <j:forEach var=\"s\" items=\"${it.solutions}\">\n          <li>\n            <st:include page=\"message.jelly\" it=\"${s}\" />\n          </li>\n        </j:forEach>\n      </ol>\n    </l:main-panel>\n\t</l:layout>\n</j:jelly>\n", "<!--\nThe MIT License\n\nCopyright (c) 2004-2010, Sun Microsystems, Inc., Alan Harder\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n-->\n\n<?jelly escape-by-default='true'?>\n<j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" xmlns:d=\"jelly:define\" xmlns:l=\"/lib/layout\" xmlns:t=\"/lib/hudson\" xmlns:f=\"/lib/form\">\n<l:layout title=\"${%Manage Old Data}\" permission=\"${app.ADMINISTER}\">\n  <st:include page=\"sidepanel.jelly\" it=\"${app}\"/>\n  <l:main-panel>\n    <h1>${%Manage Old Data}</h1>\n    <p>${%blurb.1}</p>\n    <p>${%blurb.2}</p>\n    <table class=\"pane bigtable\" style=\"width:auto\">\n      <tr><th>${%Type}</th><th>${%Name}</th><th>${%Version}</th><th></th></tr>\n      <j:forEach var=\"item\" items=\"${it.data.entrySet()}\">\n        <j:set var=\"obj\" value=\"${item.key}\"/>\n        <j:set var=\"range\" value=\"${item.value}\"/>\n        <j:choose>\n          <j:when test=\"${range!=''}\">\n            <j:if test=\"${range.isOld(150)}\"><j:set var=\"range\"><b>${range}</b></j:set></j:if>\n            <tr>\n              <td>${obj.class.name}</td>\n              <!-- fullName is first to avoid calling User.get(String) for User object -->\n              <td>${obj.fullName?:obj.fullDisplayName?:obj.displayName?:obj.name}</td>\n              <td>${range}</td>\n              <td style=\"white-space:normal\">${item.value.extra}</td>\n            </tr>\n          </j:when>\n          <j:otherwise>\n            <j:if test=\"${item.value.extra!=null}\"><j:set var=\"hasExtra\" value=\"${true}\"/></j:if>\n          </j:otherwise>\n        </j:choose>\n      </j:forEach>\n    </table>\n    <p>${%blurb.3}</p>\n    <p>${%blurb.4}</p>\n    <j:set var=\"vers\" value=\"${it.versionList}\"/>\n    <j:choose>\n      <j:when test=\"${vers.hasNext()}\">\n        <form action=\"upgrade\" method=\"POST\" name=\"oldDataUpgrade\">\n          ${%Resave data files with structure changes no newer than Jenkins}\n          <select name=\"thruVer\">\n            <j:forEach var=\"ver\" items=\"${vers}\">\n              <f:option>${ver}</f:option>\n            </j:forEach>\n          </select>\n          ${%blurb.5}\n          <br/>\n          <f:submit value=\"${%Upgrade}\"/>\n        </form>\n      </j:when>\n      <j:otherwise>\n        ${%No old data was found.}\n      </j:otherwise>\n    </j:choose>\n    <j:if test=\"${hasExtra}\">\n      <br/>\n      <h2>${%Unreadable Data}</h2>\n      <p>${%blurb.6}</p>\n      <table class=\"pane bigtable\" style=\"width:auto\">\n        <tr><th>${%Type}</th><th>${%Name}</th><th>${%Error}</th></tr>\n        <j:forEach var=\"item\" items=\"${it.data.entrySet()}\">\n          <j:if test=\"${item.value.extra!=null and item.value==''}\">\n            <j:set var=\"obj\" value=\"${item.key}\"/>\n            <tr>\n              <td>${obj.class.name}</td>\n              <td>${obj.fullName?:obj.fullDisplayName?:obj.displayName?:obj.name}</td>\n              <td style=\"white-space:normal\">${item.value.extra}</td>\n            </tr>\n          </j:if>\n        </j:forEach>\n      </table>\n      <br/>\n      <form action=\"discard\" method=\"POST\" name=\"discardUnreadable\">\n        <f:submit value=\"${%Discard Unreadable Data}\"/>\n      </form>\n    </j:if>\n  </l:main-panel>\n</l:layout>\n</j:jelly>\n", "package hudson.diagnosis;\n\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\n\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.jvnet.hudson.test.JenkinsRule;\nimport org.xml.sax.SAXException;\nimport com.gargoylesoftware.htmlunit.html.HtmlPage;\nimport com.gargoylesoftware.htmlunit.html.HtmlForm;\nimport com.gargoylesoftware.htmlunit.ElementNotFoundException;\n\nimport java.io.IOException;\n\n/**\n * @author Kohsuke Kawaguchi\n */\npublic class HudsonHomeDiskUsageMonitorTest {\n\n    @Rule\n    public JenkinsRule j = new JenkinsRule();\n\n    @Test\n    public void flow() throws Exception {\n        // manually activate this\n        HudsonHomeDiskUsageMonitor mon = HudsonHomeDiskUsageMonitor.get();\n        mon.activated = true;\n\n        // clicking yes should take us to somewhere\n        j.submit(getForm(mon), \"yes\");\n        assertTrue(mon.isEnabled());\n\n        // now dismiss\n        // submit(getForm(mon),\"no\"); TODO: figure out why this test is fragile\n        mon.doAct(\"no\");\n        assertFalse(mon.isEnabled());\n\n        // and make sure it's gone\n        try {\n            fail(getForm(mon)+\" shouldn't be there\");\n        } catch (ElementNotFoundException e) {\n            // as expected\n        }\n    }\n\n    /**\n     * Gets the warning form.\n     */\n    private HtmlForm getForm(HudsonHomeDiskUsageMonitor mon) throws IOException, SAXException {\n        HtmlPage p = j.createWebClient().goTo(\"manage\");\n        return p.getFormByName(mon.id);\n    }\n}\n"], "fixing_code": ["/*\n * The MIT License\n *\n * Copyright (c) 2004-2009, Sun Microsystems, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.diagnosis;\n\nimport hudson.model.AdministrativeMonitor;\nimport hudson.model.AbstractModelObject;\nimport hudson.Extension;\nimport hudson.ExtensionPoint;\nimport hudson.ExtensionList;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.QueryParameter;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\nimport java.io.IOException;\nimport java.util.List;\n\n/**\n * Monitors the disk usage of <tt>JENKINS_HOME</tt>, and if it's almost filled up, warn the user.\n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic final class HudsonHomeDiskUsageMonitor extends AdministrativeMonitor {\n    /**\n     * Value updated by {@link HudsonHomeDiskUsageChecker}.\n     */\n    /*package*/ boolean activated;\n\n    public HudsonHomeDiskUsageMonitor() {\n        super(\"hudsonHomeIsFull\");\n    }\n\n    public boolean isActivated() {\n        return activated;\n    }\n    \n    @Override\n    public String getDisplayName() {\n    \treturn Messages.HudsonHomeDiskUsageMonitor_DisplayName();\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    @RequirePOST\n    public HttpResponse doAct(@QueryParameter String no) throws IOException {\n        if(no!=null) {\n            disable(true);\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return HttpResponses.redirectToDot();\n        }\n    }\n\n    public List<Solution> getSolutions() {\n        return Solution.all();\n    }\n\n    /**\n     * Binds a solution to the URL.\n     */\n    public Solution getSolution(String id) {\n        for( Solution s : Solution.all() )\n            if(s.id.equals(id))\n                return s;\n        return null;\n    }\n\n    /**\n     * Short cut for getting the singleton instance.\n     */\n    public static HudsonHomeDiskUsageMonitor get() {\n        return all().get(HudsonHomeDiskUsageMonitor.class);\n    }\n\n    /**\n     * Extension point for suggesting solutions for full JENKINS_HOME.\n     *\n     * <h3>Views</h3>\n     * <dl>\n     * <dt>message.jelly</dt>\n     * <dd>\n     * This view is rendered inside an LI tag as a possible solution to the full JENKINS_HOME problem.\n     * </dd>\n     * </dl>\n     */\n    public static abstract class Solution extends AbstractModelObject implements ExtensionPoint {\n        /**\n         * Human-readable ID of this monitor, which needs to be unique within the system.\n         *\n         * <p>\n         * This ID is used to remember persisted setting for this monitor,\n         * so the ID should remain consistent beyond the Hudson JVM lifespan.\n         */\n        public final String id;\n\n        protected Solution(String id) {\n            this.id = id;\n        }\n\n        protected Solution() {\n            this.id = this.getClass().getName();\n        }\n\n        /**\n         * Returns the URL of this monitor, relative to the context path.\n         */\n        public String getUrl() {\n            return HudsonHomeDiskUsageMonitor.get().getUrl()+\"/solution/\"+id;\n        }\n\n        /**\n         * All registered {@link Solution}s.\n         */\n        public static ExtensionList<Solution> all() {\n            return ExtensionList.lookup(Solution.class);\n        }\n    }\n}\n", "/*\n * The MIT License\n *\n * Copyright (c) 2004-2010, Sun Microsystems, Inc., Alan Harder\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.diagnosis;\n\nimport com.google.common.base.Predicate;\nimport com.thoughtworks.xstream.converters.UnmarshallingContext;\nimport hudson.Extension;\nimport hudson.XmlFile;\nimport hudson.model.AdministrativeMonitor;\nimport hudson.model.Item;\nimport hudson.model.Job;\nimport hudson.model.ManagementLink;\nimport hudson.model.Run;\nimport hudson.model.Saveable;\nimport hudson.model.listeners.ItemListener;\nimport hudson.model.listeners.RunListener;\nimport hudson.model.listeners.SaveableListener;\nimport hudson.security.ACL;\nimport hudson.util.RobustReflectionConverter;\nimport hudson.util.VersionNumber;\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.HashMap;\nimport java.util.Iterator;\nimport java.util.List;\nimport java.util.Map;\nimport java.util.TreeSet;\nimport java.util.concurrent.ConcurrentHashMap;\nimport java.util.concurrent.ConcurrentMap;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport javax.annotation.CheckForNull;\n\nimport jenkins.model.Jenkins;\nimport org.acegisecurity.context.SecurityContext;\nimport org.acegisecurity.context.SecurityContextHolder;\nimport org.kohsuke.accmod.Restricted;\nimport org.kohsuke.accmod.restrictions.NoExternalUse;\nimport org.kohsuke.stapler.HttpRedirect;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\n/**\n * Tracks whether any data structure changes were corrected when loading XML,\n * that could be resaved to migrate that data to the new format.\n *\n * @author Alan.Harder@Sun.Com\n */\n@Extension\npublic class OldDataMonitor extends AdministrativeMonitor {\n    private static final Logger LOGGER = Logger.getLogger(OldDataMonitor.class.getName());\n\n    private ConcurrentMap<SaveableReference,VersionRange> data = new ConcurrentHashMap<SaveableReference,VersionRange>();\n\n    static OldDataMonitor get(Jenkins j) {\n        return (OldDataMonitor) j.getAdministrativeMonitor(\"OldData\");\n    }\n\n    public OldDataMonitor() {\n        super(\"OldData\");\n    }\n\n    @Override\n    public String getDisplayName() {\n        return Messages.OldDataMonitor_DisplayName();\n    }\n\n    public boolean isActivated() {\n        return !data.isEmpty();\n    }\n\n    public Map<Saveable,VersionRange> getData() {\n        Map<Saveable,VersionRange> r = new HashMap<Saveable,VersionRange>();\n        for (Map.Entry<SaveableReference,VersionRange> entry : this.data.entrySet()) {\n            Saveable s = entry.getKey().get();\n            if (s != null) {\n                r.put(s, entry.getValue());\n            }\n        }\n        return r;\n    }\n\n    private static void remove(Saveable obj, boolean isDelete) {\n        Jenkins j = Jenkins.getInstance();\n        if (j != null) {\n            OldDataMonitor odm = get(j);\n            SecurityContext oldContext = ACL.impersonate(ACL.SYSTEM);\n            try {\n                odm.data.remove(referTo(obj));\n                if (isDelete && obj instanceof Job<?, ?>) {\n                    for (Run r : ((Job<?, ?>) obj).getBuilds()) {\n                        odm.data.remove(referTo(r));\n                    }\n                }\n            } finally {\n                SecurityContextHolder.setContext(oldContext);\n            }\n        }\n    }\n\n    // Listeners to remove data here if resaved or deleted in regular Hudson usage\n\n    @Extension\n    public static final SaveableListener changeListener = new SaveableListener() {\n        @Override\n        public void onChange(Saveable obj, XmlFile file) {\n            remove(obj, false);\n        }\n    };\n\n    @Extension\n    public static final ItemListener itemDeleteListener = new ItemListener() {\n        @Override\n        public void onDeleted(Item item) {\n            remove(item, true);\n        }\n    };\n\n    @Extension\n    public static final RunListener<Run> runDeleteListener = new RunListener<Run>() {\n        @Override\n        public void onDeleted(Run run) {\n            remove(run, true);\n        }\n    };\n\n    /**\n     * Inform monitor that some data in a deprecated format has been loaded,\n     * and converted in-memory to a new structure.\n     * @param obj Saveable object; calling save() on this object will persist\n     *            the data in its new format to disk.\n     * @param version Hudson release when the data structure changed.\n     */\n    public static void report(Saveable obj, String version) {\n        OldDataMonitor odm = get(Jenkins.getInstance());\n        try {\n            SaveableReference ref = referTo(obj);\n            while (true) {\n                VersionRange vr = odm.data.get(ref);\n                if (vr != null && odm.data.replace(ref, vr, new VersionRange(vr, version, null))) {\n                    break;\n                } else if (odm.data.putIfAbsent(ref, new VersionRange(null, version, null)) == null) {\n                    break;\n                }\n            }\n        } catch (IllegalArgumentException ex) {\n            LOGGER.log(Level.WARNING, \"Bad parameter given to OldDataMonitor\", ex);\n        }\n    }\n\n    /**\n     * Inform monitor that some data in a deprecated format has been loaded, during\n     * XStream unmarshalling when the Saveable containing this object is not available.\n     * @param context XStream unmarshalling context\n     * @param version Hudson release when the data structure changed.\n     */\n    public static void report(UnmarshallingContext context, String version) {\n        RobustReflectionConverter.addErrorInContext(context, new ReportException(version));\n    }\n\n    private static class ReportException extends Exception {\n        private String version;\n        private ReportException(String version) {\n            this.version = version;\n        }\n    }\n\n    /**\n     * Inform monitor that some unreadable data was found while loading.\n     * @param obj Saveable object; calling save() on this object will discard the unreadable data.\n     * @param errors Exception(s) thrown while loading, regarding the unreadable classes/fields.\n     */\n    public static void report(Saveable obj, Collection<Throwable> errors) {\n        StringBuilder buf = new StringBuilder();\n        int i = 0;\n        for (Throwable e : errors) {\n            if (e instanceof ReportException) {\n                report(obj, ((ReportException)e).version);\n            } else {\n                if (++i > 1) buf.append(\", \");\n                buf.append(e.getClass().getSimpleName()).append(\": \").append(e.getMessage());\n            }\n        }\n        if (buf.length() == 0) return;\n        Jenkins j = Jenkins.getInstance();\n        if (j == null) {\n            // Startup failed, something is very broken, so report what we can.\n            for (Throwable t : errors) {\n                LOGGER.log(Level.WARNING, \"could not read \" + obj + \" (and Jenkins did not start up)\", t);\n            }\n            return;\n        }\n        OldDataMonitor odm = get(j);\n        SaveableReference ref = referTo(obj);\n        while (true) {\n            VersionRange vr = odm.data.get(ref);\n            if (vr != null && odm.data.replace(ref, vr, new VersionRange(vr, null, buf.toString()))) {\n                break;\n            } else if (odm.data.putIfAbsent(ref, new VersionRange(null, null, buf.toString())) == null) {\n                break;\n            }\n        }\n    }\n\n    public static class VersionRange {\n        private static VersionNumber currentVersion = Jenkins.getVersion();\n\n        final VersionNumber min;\n        final VersionNumber max;\n        final boolean single;\n        final public String extra;\n\n        public VersionRange(VersionRange previous, String version, String extra) {\n            if (previous == null) {\n                min = max = version != null ? new VersionNumber(version) : null;\n                this.single = true;\n                this.extra = extra;\n            } else if (version == null) {\n                min = previous.min;\n                max = previous.max;\n                single = previous.single;\n                this.extra = extra;\n            } else {\n                VersionNumber ver = new VersionNumber(version);\n                if (previous.min == null || ver.isOlderThan(previous.min)) {\n                    this.min = ver;\n                } else {\n                    this.min = previous.min;\n                }\n                if (previous.max == null || ver.isNewerThan(previous.max)) {\n                    this.max = ver;\n                } else {\n                    this.max = previous.max;\n                }\n                this.single = this.max.isNewerThan(this.min);\n                this.extra = extra;\n            }\n        }\n\n        @Override\n        public String toString() {\n            return min==null ? \"\" : min.toString() + (single ? \"\" : \" - \" + max.toString());\n        }\n\n        /**\n         * Does this version range contain a version more than the given number of releases ago?\n         * @param threshold Number of releases\n         * @return True if the major version# differs or the minor# differs by >= threshold\n         */\n        public boolean isOld(int threshold) {\n            return currentVersion != null && min != null && (currentVersion.digit(0) > min.digit(0)\n                    || (currentVersion.digit(0) == min.digit(0)\n                    && currentVersion.digit(1) - min.digit(1) >= threshold));\n        }\n\n    }\n\n    /**\n     * Sorted list of unique max-versions in the data set.  For select list in jelly.\n     */\n    @Restricted(NoExternalUse.class)\n    public Iterator<VersionNumber> getVersionList() {\n        TreeSet<VersionNumber> set = new TreeSet<VersionNumber>();\n        for (VersionRange vr : data.values()) {\n            if (vr.max != null) {\n                set.add(vr.max);\n            }\n        }\n        return set.iterator();\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    @RequirePOST\n    public HttpResponse doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {\n        if (req.hasParameter(\"no\")) {\n            disable(true);\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return new HttpRedirect(\"manage\");\n        }\n    }\n\n    /**\n     * Save all or some of the files to persist data in the new forms.\n     * Remove those items from the data map.\n     */\n    @RequirePOST\n    public HttpResponse doUpgrade(StaplerRequest req, StaplerResponse rsp) {\n        final String thruVerParam = req.getParameter(\"thruVer\");\n        final VersionNumber thruVer = thruVerParam.equals(\"all\") ? null : new VersionNumber(thruVerParam);\n\n        saveAndRemoveEntries(new Predicate<Map.Entry<SaveableReference, VersionRange>>() {\n            @Override\n            public boolean apply(Map.Entry<SaveableReference, VersionRange> entry) {\n                VersionNumber version = entry.getValue().max;\n                return version != null && (thruVer == null || !version.isNewerThan(thruVer));\n            }\n        });\n\n        return HttpResponses.forwardToPreviousPage();\n    }\n\n    /**\n     * Save all files containing only unreadable data (no data upgrades), which discards this data.\n     * Remove those items from the data map.\n     */\n    @RequirePOST\n    public HttpResponse doDiscard(StaplerRequest req, StaplerResponse rsp) {\n        saveAndRemoveEntries( new Predicate<Map.Entry<SaveableReference,VersionRange>>() {\n            @Override\n            public boolean apply(Map.Entry<SaveableReference, VersionRange> entry) {\n                return entry.getValue().max == null;\n            }\n        });\n\n        return HttpResponses.forwardToPreviousPage();\n    }\n\n    private void saveAndRemoveEntries(Predicate<Map.Entry<SaveableReference, VersionRange>> matchingPredicate) {\n        /*\n         * Note that there a race condition here: we acquire the lock and get localCopy which includes some\n         * project (say); then we go through our loop and save that project; then someone POSTs a new\n         * config.xml for the project with some old data, causing remove to be called and the project to be\n         * added to data (in the new version); then we hit the end of this method and the project is removed\n         * from data again, even though it again has old data.\n         *\n         * In practice this condition is extremely unlikely, and not a major problem even if it\n         * does occur: just means the user will be prompted to discard less than they should have been (and\n         * would see the warning again after next restart).\n         */\n        List<SaveableReference> removed = new ArrayList<SaveableReference>();\n        for (Map.Entry<SaveableReference,VersionRange> entry : data.entrySet()) {\n            if (matchingPredicate.apply(entry)) {\n                Saveable s = entry.getKey().get();\n                if (s != null) {\n                    try {\n                        s.save();\n                    } catch (Exception x) {\n                        LOGGER.log(Level.WARNING, \"failed to save \" + s, x);\n                    }\n                }\n                removed.add(entry.getKey());\n            }\n        }\n\n        data.keySet().removeAll(removed);\n    }\n\n    public HttpResponse doIndex(StaplerResponse rsp) throws IOException {\n        return new HttpRedirect(\"manage\");\n    }\n\n    /** Reference to a saveable object that need not actually hold it in heap. */\n    private interface SaveableReference {\n        @CheckForNull Saveable get();\n        // must also define equals, hashCode\n    }\n\n    private static SaveableReference referTo(Saveable s) {\n        if (s instanceof Run) {\n            Job parent = ((Run) s).getParent();\n            if (Jenkins.getInstance().getItemByFullName(parent.getFullName()) == parent) {\n                return new RunSaveableReference((Run) s);\n            }\n        }\n        return new SimpleSaveableReference(s);\n    }\n\n    private static final class SimpleSaveableReference implements SaveableReference {\n        private final Saveable instance;\n        SimpleSaveableReference(Saveable instance) {\n            this.instance = instance;\n        }\n        @Override public Saveable get() {\n            return instance;\n        }\n        @Override public int hashCode() {\n            return instance.hashCode();\n        }\n        @Override public boolean equals(Object obj) {\n            return obj instanceof SimpleSaveableReference && instance.equals(((SimpleSaveableReference) obj).instance);\n        }\n    }\n\n    // could easily make an ItemSaveableReference, but Jenkins holds all these strongly, so why bother\n\n    private static final class RunSaveableReference implements SaveableReference {\n        private final String id;\n        RunSaveableReference(Run<?,?> r) {\n            id = r.getExternalizableId();\n        }\n        @Override public Saveable get() {\n            try {\n                return Run.fromExternalizableId(id);\n            } catch (IllegalArgumentException x) {\n                // Typically meaning the job or build was since deleted.\n                LOGGER.log(Level.FINE, null, x);\n                return null;\n            }\n        }\n        @Override public int hashCode() {\n            return id.hashCode();\n        }\n        @Override public boolean equals(Object obj) {\n            return obj instanceof RunSaveableReference && id.equals(((RunSaveableReference) obj).id);\n        }\n    }\n\n    @Extension\n    public static class ManagementLinkImpl extends ManagementLink {\n        @Override\n        public String getIconFileName() {\n            return \"document.png\";\n        }\n\n        @Override\n        public String getUrlName() {\n            return \"administrativeMonitor/OldData/\";\n        }\n\n        @Override\n        public String getDescription() {\n            return Messages.OldDataMonitor_Description();\n        }\n\n        public String getDisplayName() {\n            return Messages.OldDataMonitor_DisplayName();\n        }\n    }\n}\n", "/*\n * The MIT License\n *\n * Copyright (c) 2010, InfraDNA, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.diagnosis;\n\nimport hudson.Extension;\nimport hudson.Util;\nimport hudson.model.AdministrativeMonitor;\nimport org.kohsuke.stapler.HttpRedirect;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.QueryParameter;\n\nimport java.io.IOException;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\nimport jenkins.model.Jenkins;\nimport org.kohsuke.stapler.Stapler;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\n/**\n * Looks out for a broken reverse proxy setup that doesn't rewrite the location header correctly.\n *\n * <p>\n * Have the JavaScript make an AJAX call, to which we respond with 302 redirect. If the reverse proxy\n * is done correctly, this will be handled by {@link #doFoo()}, but otherwise we'll report that as an error.\n * Unfortunately, {@code XmlHttpRequest} doesn't expose properties that allow the client-side JavaScript\n * to learn the details of the failure, so we have to make do with limited information.\n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class ReverseProxySetupMonitor extends AdministrativeMonitor {\n\n    private static final Logger LOGGER = Logger.getLogger(ReverseProxySetupMonitor.class.getName());\n\n    @Override\n    public boolean isActivated() {\n        // return true to always inject an HTML fragment to perform a test\n        return true;\n    }\n\n    public HttpResponse doTest() {\n        String referer = Stapler.getCurrentRequest().getReferer();\n        Jenkins j = Jenkins.getInstance();\n        assert j != null;\n        // May need to send an absolute URL, since handling of HttpRedirect with a relative URL does not currently honor X-Forwarded-Proto/Port at all.\n        String redirect = j.getRootUrl() + \"administrativeMonitor/\" + id + \"/testForReverseProxySetup/\" + (referer != null ? Util.rawEncode(referer) : \"NO-REFERER\") + \"/\";\n        LOGGER.log(Level.FINE, \"coming from {0} and redirecting to {1}\", new Object[] {referer, redirect});\n        return new HttpRedirect(redirect);\n    }\n\n    public void getTestForReverseProxySetup(String rest) {\n        Jenkins j = Jenkins.getInstance();\n        assert j != null;\n        String inferred = j.getRootUrlFromRequest() + \"manage\";\n        // TODO this could also verify that j.getRootUrl() has been properly configured, and send a different message if not\n        if (rest.startsWith(inferred)) { // not using equals due to JENKINS-24014\n            throw HttpResponses.ok();\n        } else {\n            LOGGER.log(Level.WARNING, \"{0} vs. {1}\", new Object[] {inferred, rest});\n            throw HttpResponses.errorWithoutStack(404, inferred + \" vs. \" + rest);\n        }\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    @RequirePOST\n    public HttpResponse doAct(@QueryParameter String no) throws IOException {\n        if(no!=null) { // dismiss\n            disable(true);\n            // of course the irony is that this redirect won't work\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return new HttpRedirect(\"https://wiki.jenkins-ci.org/display/JENKINS/Jenkins+says+my+reverse+proxy+setup+is+broken\");\n        }\n    }\n}\n\n", "/*\n * The MIT License\n *\n * Copyright (c) 2004-2009, Sun Microsystems, Inc.\n *\n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n *\n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n *\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.diagnosis;\n\nimport hudson.model.AdministrativeMonitor;\nimport jenkins.model.Jenkins;\nimport hudson.Extension;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\nimport java.io.IOException;\n\n/**\n * If Hudson is run with a lot of jobs but no views, suggest the user that they can create views.\n *\n * <p>\n * I noticed at an user visit that some users didn't notice the '+' icon in the tab bar. \n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class TooManyJobsButNoView extends AdministrativeMonitor {\n    public boolean isActivated() {\n        Jenkins h = Jenkins.getInstance();\n        return h.getViews().size()==1 && h.getItemMap().size()> THRESHOLD;\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    @RequirePOST\n    public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {\n        if(req.hasParameter(\"no\")) {\n            disable(true);\n            rsp.sendRedirect(req.getContextPath()+\"/manage\");\n        } else {\n            rsp.sendRedirect(req.getContextPath()+\"/newView\");\n        }\n    }\n\n    public static final int THRESHOLD = 16;\n}\n", "/*\n * The MIT License\n * \n * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.model;\n\nimport hudson.ExtensionPoint;\nimport hudson.ExtensionList;\nimport hudson.Extension;\nimport hudson.ExtensionPoint.LegacyInstancesAreScopedToHudson;\nimport hudson.triggers.SCMTrigger;\nimport hudson.triggers.TimerTrigger;\n\nimport java.util.Set;\nimport java.io.IOException;\n\nimport jenkins.model.Jenkins;\nimport org.kohsuke.accmod.Restricted;\nimport org.kohsuke.accmod.restrictions.NoExternalUse;\nimport org.kohsuke.stapler.StaplerProxy;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\n/**\n * Checks the health of a subsystem of Jenkins and if there's something\n * that requires administrator's attention, notify the administrator.\n *\n * <h2>How to implement?</h2>\n * <p>\n * Plugins who wish to contribute such notifications can implement this\n * class and put {@link Extension} on it to register it to Jenkins.\n *\n * <p>\n * Once installed, it's the implementer's responsibility to perform\n * monitoring and activate/deactivate the monitor accordingly. Sometimes\n * this can be done by updating a flag from code (see {@link SCMTrigger}\n * for one such example), while other times it's more convenient to do\n * so by running some code periodically (for this, use {@link TimerTrigger#timer})\n *\n * <p>\n * {@link AdministrativeMonitor}s are bound to URL by {@link Jenkins#getAdministrativeMonitor(String)}.\n * See {@link #getUrl()}.\n *\n * <h3>Views</h3>\n * <dl>\n * <dt>message.jelly</dt>\n * <dd>\n * If {@link #isActivated()} returns true, Jenkins will use the <tt>message.jelly</tt>\n * view of this object to render the warning text. This happens in the\n * <tt>http://SERVER/jenkins/manage</tt> page. This view should typically render\n * a DIV box with class='error' or class='warning' with a human-readable text\n * inside it. It often also contains a link to a page that provides more details\n * about the problem.\n * </dd>\n * </dl>\n *\n * @author Kohsuke Kawaguchi\n * @since 1.273\n * @see Jenkins#administrativeMonitors\n */\n@LegacyInstancesAreScopedToHudson\npublic abstract class AdministrativeMonitor extends AbstractModelObject implements ExtensionPoint, StaplerProxy {\n    /**\n     * Human-readable ID of this monitor, which needs to be unique within the system.\n     *\n     * <p>\n     * This ID is used to remember persisted setting for this monitor,\n     * so the ID should remain consistent beyond the Hudson JVM lifespan.\n     */\n    public final String id;\n\n    protected AdministrativeMonitor(String id) {\n        this.id = id;\n    }\n\n    protected AdministrativeMonitor() {\n        this.id = this.getClass().getName();\n    }\n\n    /**\n     * Returns the URL of this monitor, relative to the context path, like \"administrativeMonitor/foobar\".\n     */\n    public String getUrl() {\n        return \"administrativeMonitor/\"+id;\n    }\n\n    public String getDisplayName() {\n        return id;\n    }\n\n    public final String getSearchUrl() {\n        return getUrl();\n    }\n\n    /**\n     * Mark this monitor as disabled, to prevent this from showing up in the UI.\n     */\n    public void disable(boolean value) throws IOException {\n        AbstractCIBase hudson = Jenkins.getInstance();\n        Set<String> set = hudson.disabledAdministrativeMonitors;\n        if(value)   set.add(id);\n        else        set.remove(id);\n        hudson.save();\n    }\n\n    /**\n     * Returns true if this monitor {@link #disable(boolean) isn't disabled} earlier.\n     *\n     * <p>\n     * This flag implements the ability for the admin to say \"no thank you\" to the monitor that\n     * he wants to ignore.\n     */\n    public boolean isEnabled() {\n        return !((AbstractCIBase)Jenkins.getInstance()).disabledAdministrativeMonitors.contains(id);\n    }\n\n    /**\n     * Returns true if this monitor is activated and\n     * wants to produce a warning message.\n     *\n     * <p>\n     * This method is called from the HTML rendering thread,\n     * so it should run efficiently.\n     */\n    public abstract boolean isActivated();\n\n    /**\n     * URL binding to disable this monitor.\n     */\n    @RequirePOST\n    public void doDisable(StaplerRequest req, StaplerResponse rsp) throws IOException {\n        disable(true);\n        rsp.sendRedirect2(req.getContextPath()+\"/manage\");\n    }\n\n    /**\n     * Requires ADMINISTER permission for any operation in here.\n     */\n    @Restricted(NoExternalUse.class)\n    public Object getTarget() {\n        Jenkins.getInstance().checkPermission(Jenkins.ADMINISTER);\n        return this;\n    }\n\n    /**\n     * All registered {@link AdministrativeMonitor} instances.\n     */\n    public static ExtensionList<AdministrativeMonitor> all() {\n        return ExtensionList.lookup(AdministrativeMonitor.class);\n    }\n}\n", "package jenkins.diagnostics;\n\nimport hudson.Extension;\nimport hudson.model.AdministrativeMonitor;\nimport jenkins.model.Jenkins;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.StaplerResponse;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\nimport java.io.IOException;\n\n/**\n * Unsecured Jenkins is, well, insecure.\n *\n * <p>\n * Call attention to the fact that Jenkins is not secured, and encourage the administrator\n * to take an action.\n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class SecurityIsOffMonitor extends AdministrativeMonitor {\n    @Override\n    public boolean isActivated() {\n        return !Jenkins.getInstance().isUseSecurity();\n    }\n\n    /**\n     * Depending on whether the user said \"yes\" or \"no\", send him to the right place.\n     */\n    @RequirePOST\n    public void doAct(StaplerRequest req, StaplerResponse rsp) throws IOException {\n        if(req.hasParameter(\"no\")) {\n            disable(true);\n            rsp.sendRedirect(req.getContextPath()+\"/manage\");\n        } else {\n            rsp.sendRedirect(req.getContextPath()+\"/configureSecurity\");\n        }\n    }\n}\n", "package jenkins.security;\n\nimport hudson.Extension;\nimport hudson.init.InitMilestone;\nimport hudson.init.Initializer;\nimport hudson.model.TaskListener;\nimport hudson.util.HttpResponses;\nimport hudson.util.SecretRewriter;\nimport hudson.util.VersionNumber;\nimport jenkins.management.AsynchronousAdministrativeMonitor;\nimport jenkins.model.Jenkins;\nimport jenkins.util.io.FileBoolean;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.StaplerRequest;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\nimport java.io.File;\nimport java.io.IOException;\nimport java.io.PrintStream;\nimport java.security.GeneralSecurityException;\nimport java.util.Date;\nimport java.util.logging.Level;\nimport java.util.logging.Logger;\n\n/**\n * Warns the administrator to run {@link SecretRewriter}\n *\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class RekeySecretAdminMonitor extends AsynchronousAdministrativeMonitor {\n\n    /**\n     * Whether we detected a need to run the rewrite program.\n     * Once we set it to true, we'll never turn it off.\n     *\n     * If the admin decides to dismiss this warning, we use {@link #isEnabled()} for that.\n     *\n     * In this way we can correctly differentiate all the different states.\n     */\n    private final FileBoolean needed = state(\"needed\");\n\n    /**\n     * If the scanning process has run to the completion, we set to this true.\n     */\n    private final FileBoolean done = state(\"done\");\n\n    /**\n     * If the rewrite process is scheduled upon the next boot.\n     */\n    private final FileBoolean scanOnBoot = state(\"scanOnBoot\");\n\n    public RekeySecretAdminMonitor() throws IOException {\n        // if JENKINS_HOME existed <1.497, we need to offer rewrite\n        // this computation needs to be done and the value be captured,\n        // since $JENKINS_HOME/config.xml can be saved later before the user has\n        // actually rewritten XML files.\n        Jenkins j = Jenkins.getInstance();\n        if (j.isUpgradedFromBefore(new VersionNumber(\"1.496.*\"))\n        &&  new FileBoolean(new File(j.getRootDir(),\"secret.key.not-so-secret\")).isOff())\n            needed.on();\n    }\n\n    @Override\n    public boolean isActivated() {\n        return needed.isOn();\n    }\n\n    /**\n     * Indicates that the re-keying has run to the completion.\n     */\n    public boolean isDone() {\n        return done.isOn();\n    }\n\n    public void setNeeded() {\n        needed.on();\n    }\n\n    public boolean isScanOnBoot() {\n        return scanOnBoot.isOn();\n    }\n\n    @RequirePOST\n    public HttpResponse doScan(StaplerRequest req) throws IOException, GeneralSecurityException {\n        if(req.hasParameter(\"background\")) {\n            start(false);\n        } else\n        if(req.hasParameter(\"schedule\")) {\n            scanOnBoot.on();\n        } else\n        if(req.hasParameter(\"dismiss\")) {\n            disable(true);\n        } else\n            throw HttpResponses.error(400,\"Invalid request submission: \" + req.getParameterMap());\n\n        return HttpResponses.redirectViaContextPath(\"/manage\");\n    }\n\n\n    private FileBoolean state(String name) {\n        return new FileBoolean(new File(getBaseDir(),name));\n    }\n\n    @Initializer(fatal=false,after=InitMilestone.PLUGINS_STARTED,before=InitMilestone.EXTENSIONS_AUGMENTED)\n    // as early as possible, but this needs to be late enough that the ConfidentialStore is available\n    public static void scanOnReboot() throws InterruptedException, IOException, GeneralSecurityException {\n        RekeySecretAdminMonitor m = new RekeySecretAdminMonitor();  // throw-away instance\n\n        FileBoolean flag = m.scanOnBoot;\n        if (flag.isOn()) {\n            flag.off();\n            m.start(false).join();\n            // block the boot until the rewrite process is complete\n            // don't let the failure in RekeyThread block Jenkins boot.\n        }\n    }\n\n    @Override\n    public String getDisplayName() {\n        return Messages.RekeySecretAdminMonitor_DisplayName();\n    }\n\n    /**\n     * Rewrite log file.\n     */\n    @Override\n    protected File getLogFile() {\n        return new File(getBaseDir(),\"rekey.log\");\n    }\n\n    @Override\n    protected void fix(TaskListener listener) throws Exception {\n        LOGGER.info(\"Initiating a re-keying of secrets. See \"+getLogFile());\n\n        SecretRewriter rewriter = new SecretRewriter(new File(getBaseDir(),\"backups\"));\n\n        try {\n            PrintStream log = listener.getLogger();\n            log.println(\"Started re-keying \" + new Date());\n            int count = rewriter.rewriteRecursive(Jenkins.getInstance().getRootDir(), listener);\n            log.printf(\"Completed re-keying %d files on %s\\n\",count,new Date());\n            new RekeySecretAdminMonitor().done.on();\n            LOGGER.info(\"Secret re-keying completed\");\n        } catch (Exception e) {\n            LOGGER.log(Level.SEVERE, \"Fatal failure in re-keying secrets\",e);\n            e.printStackTrace(listener.error(\"Fatal failure in rewriting secrets\"));\n        }\n    }\n\n    private static final Logger LOGGER = Logger.getLogger(RekeySecretAdminMonitor.class.getName());\n\n}\n", "package jenkins.security.s2m;\n\nimport hudson.Extension;\nimport hudson.FilePath;\nimport hudson.model.AdministrativeMonitor;\nimport hudson.remoting.Callable;\nimport jenkins.model.Jenkins;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.QueryParameter;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\nimport javax.inject.Inject;\nimport java.io.IOException;\n\n/**\n * Report any rejected {@link Callable}s and {@link FilePath} executions and allow\n * admins to whitelist them.\n *\n * @since 1.THU\n * @author Kohsuke Kawaguchi\n */\n@Extension\npublic class AdminCallableMonitor extends AdministrativeMonitor {\n    @Inject\n    Jenkins jenkins;\n\n    @Inject\n    AdminWhitelistRule rule;\n\n    public AdminCallableMonitor() {\n        super(\"slaveToMasterAccessControl\");\n    }\n\n    @Override\n    public boolean isActivated() {\n        return !rule.rejected.describe().isEmpty();\n    }\n\n    @Override\n    public String getDisplayName() {\n        return \"Slave \\u2192 Master Access Control\";\n    }\n\n    // bind this to URL\n    public AdminWhitelistRule getRule() {\n        return rule;\n    }\n\n    /**\n     * Depending on whether the user said \"examin\" or \"dismiss\", send him to the right place.\n     */\n    @RequirePOST\n    public HttpResponse doAct(@QueryParameter String dismiss) throws IOException {\n        if(dismiss!=null) {\n            disable(true);\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return HttpResponses.redirectTo(\"rule/\");\n        }\n    }\n\n    public HttpResponse doIndex() {\n        return HttpResponses.redirectTo(\"rule/\");\n    }\n}\n", "package jenkins.security.s2m;\n\nimport hudson.Extension;\nimport hudson.model.AdministrativeMonitor;\nimport org.kohsuke.stapler.HttpResponse;\nimport org.kohsuke.stapler.HttpResponses;\nimport org.kohsuke.stapler.QueryParameter;\nimport org.kohsuke.stapler.interceptor.RequirePOST;\n\nimport javax.inject.Inject;\nimport java.io.IOException;\n\n/**\n * If {@link AdminWhitelistRule#masterKillSwitch} is on, warn the user.\n *\n * @author Kohsuke Kawaguchi\n * @since 1.THU\n */\n@Extension\npublic class MasterKillSwitchWarning extends AdministrativeMonitor {\n    @Inject\n    AdminWhitelistRule rule;\n\n    @Inject\n    MasterKillSwitchConfiguration config;\n\n    @Override\n    public boolean isActivated() {\n        return rule.getMasterKillSwitch() && config.isRelevant();\n    }\n\n    @RequirePOST\n    public HttpResponse doAct(@QueryParameter String dismiss) throws IOException {\n        if(dismiss!=null) {\n            disable(true);\n            return HttpResponses.redirectViaContextPath(\"/manage\");\n        } else {\n            return HttpResponses.redirectViaContextPath(\"configureSecurity\");\n        }\n    }\n}\n", "<!--\nThe MIT License\n\nCopyright (c) 2004-2009, Sun Microsystems, Inc.\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n-->\n\n<?jelly escape-by-default='true'?>\n<j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" xmlns:d=\"jelly:define\" xmlns:l=\"/lib/layout\" xmlns:t=\"/lib/hudson\" xmlns:f=\"/lib/form\" xmlns:i=\"jelly:fmt\">\n\t<l:layout title=\"${%JENKINS_HOME is almost full}\">\n\t\t<l:main-panel>\n      <h1>\n        <l:icon class=\"icon-warning icon-xlg\"/>\n        ${%blurb}\n      </h1>\n\n      <p>\n        ${%description.1(app.rootDir)}\n      </p><p>\n        ${%description.2}\n      </p>\n\n      <ol>\n        <li>\n          ${%solution.1}\n        </li>\n        <li>\n          ${%solution.2}\n        </li>\n        <j:forEach var=\"s\" items=\"${it.solutions}\">\n          <li>\n            <st:include page=\"message.jelly\" it=\"${s}\" />\n          </li>\n        </j:forEach>\n      </ol>\n    </l:main-panel>\n\t</l:layout>\n</j:jelly>\n", "<!--\nThe MIT License\n\nCopyright (c) 2004-2010, Sun Microsystems, Inc., Alan Harder\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in\nall copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\nTHE SOFTWARE.\n-->\n\n<?jelly escape-by-default='true'?>\n<j:jelly xmlns:j=\"jelly:core\" xmlns:st=\"jelly:stapler\" xmlns:d=\"jelly:define\" xmlns:l=\"/lib/layout\" xmlns:t=\"/lib/hudson\" xmlns:f=\"/lib/form\">\n<l:layout title=\"${%Manage Old Data}\">\n  <st:include page=\"sidepanel.jelly\" it=\"${app}\"/>\n  <l:main-panel>\n    <h1>${%Manage Old Data}</h1>\n    <p>${%blurb.1}</p>\n    <p>${%blurb.2}</p>\n    <table class=\"pane bigtable\" style=\"width:auto\">\n      <tr><th>${%Type}</th><th>${%Name}</th><th>${%Version}</th><th></th></tr>\n      <j:forEach var=\"item\" items=\"${it.data.entrySet()}\">\n        <j:set var=\"obj\" value=\"${item.key}\"/>\n        <j:set var=\"range\" value=\"${item.value}\"/>\n        <j:choose>\n          <j:when test=\"${range!=''}\">\n            <j:if test=\"${range.isOld(150)}\"><j:set var=\"range\"><b>${range}</b></j:set></j:if>\n            <tr>\n              <td>${obj.class.name}</td>\n              <!-- fullName is first to avoid calling User.get(String) for User object -->\n              <td>${obj.fullName?:obj.fullDisplayName?:obj.displayName?:obj.name}</td>\n              <td>${range}</td>\n              <td style=\"white-space:normal\">${item.value.extra}</td>\n            </tr>\n          </j:when>\n          <j:otherwise>\n            <j:if test=\"${item.value.extra!=null}\"><j:set var=\"hasExtra\" value=\"${true}\"/></j:if>\n          </j:otherwise>\n        </j:choose>\n      </j:forEach>\n    </table>\n    <p>${%blurb.3}</p>\n    <p>${%blurb.4}</p>\n    <j:set var=\"vers\" value=\"${it.versionList}\"/>\n    <j:choose>\n      <j:when test=\"${vers.hasNext()}\">\n        <form action=\"upgrade\" method=\"POST\" name=\"oldDataUpgrade\">\n          ${%Resave data files with structure changes no newer than Jenkins}\n          <select name=\"thruVer\">\n            <j:forEach var=\"ver\" items=\"${vers}\">\n              <f:option>${ver}</f:option>\n            </j:forEach>\n          </select>\n          ${%blurb.5}\n          <br/>\n          <f:submit value=\"${%Upgrade}\"/>\n        </form>\n      </j:when>\n      <j:otherwise>\n        ${%No old data was found.}\n      </j:otherwise>\n    </j:choose>\n    <j:if test=\"${hasExtra}\">\n      <br/>\n      <h2>${%Unreadable Data}</h2>\n      <p>${%blurb.6}</p>\n      <table class=\"pane bigtable\" style=\"width:auto\">\n        <tr><th>${%Type}</th><th>${%Name}</th><th>${%Error}</th></tr>\n        <j:forEach var=\"item\" items=\"${it.data.entrySet()}\">\n          <j:if test=\"${item.value.extra!=null and item.value==''}\">\n            <j:set var=\"obj\" value=\"${item.key}\"/>\n            <tr>\n              <td>${obj.class.name}</td>\n              <td>${obj.fullName?:obj.fullDisplayName?:obj.displayName?:obj.name}</td>\n              <td style=\"white-space:normal\">${item.value.extra}</td>\n            </tr>\n          </j:if>\n        </j:forEach>\n      </table>\n      <br/>\n      <form action=\"discard\" method=\"POST\" name=\"discardUnreadable\">\n        <f:submit value=\"${%Discard Unreadable Data}\"/>\n      </form>\n    </j:if>\n  </l:main-panel>\n</l:layout>\n</j:jelly>\n", "package hudson.diagnosis;\n\nimport static org.junit.Assert.assertEquals;\nimport static org.junit.Assert.assertFalse;\nimport static org.junit.Assert.assertTrue;\nimport static org.junit.Assert.fail;\n\nimport com.gargoylesoftware.htmlunit.FailingHttpStatusCodeException;\nimport com.gargoylesoftware.htmlunit.HttpMethod;\nimport com.gargoylesoftware.htmlunit.WebRequest;\nimport com.gargoylesoftware.htmlunit.util.NameValuePair;\nimport hudson.model.User;\nimport hudson.security.GlobalMatrixAuthorizationStrategy;\nimport hudson.security.HudsonPrivateSecurityRealm;\nimport hudson.security.Permission;\nimport jenkins.model.Jenkins;\nimport org.acegisecurity.context.SecurityContextHolder;\nimport org.junit.Rule;\nimport org.junit.Test;\nimport org.jvnet.hudson.test.Issue;\nimport org.jvnet.hudson.test.JenkinsRule;\nimport org.xml.sax.SAXException;\nimport com.gargoylesoftware.htmlunit.html.HtmlPage;\nimport com.gargoylesoftware.htmlunit.html.HtmlForm;\nimport com.gargoylesoftware.htmlunit.ElementNotFoundException;\n\nimport java.io.IOException;\nimport java.util.Collections;\n\n/**\n * @author Kohsuke Kawaguchi\n */\npublic class HudsonHomeDiskUsageMonitorTest {\n\n    @Rule\n    public JenkinsRule j = new JenkinsRule();\n\n    @Test\n    public void flow() throws Exception {\n        // manually activate this\n        HudsonHomeDiskUsageMonitor mon = HudsonHomeDiskUsageMonitor.get();\n        mon.activated = true;\n\n        // clicking yes should take us to somewhere\n        j.submit(getForm(mon), \"yes\");\n        assertTrue(mon.isEnabled());\n\n        // now dismiss\n        // submit(getForm(mon),\"no\"); TODO: figure out why this test is fragile\n        mon.doAct(\"no\");\n        assertFalse(mon.isEnabled());\n\n        // and make sure it's gone\n        try {\n            fail(getForm(mon)+\" shouldn't be there\");\n        } catch (ElementNotFoundException e) {\n            // as expected\n        }\n    }\n\n    @Issue(\"SECURITY-371\")\n    @Test\n    public void noAccessForNonAdmin() throws Exception {\n        JenkinsRule.WebClient wc = j.createWebClient();\n\n        // TODO: Use MockAuthorizationStrategy in later versions\n        JenkinsRule.DummySecurityRealm realm = j.createDummySecurityRealm();\n        realm.addGroups(\"administrator\", \"admins\");\n        realm.addGroups(\"bob\", \"users\");\n        j.jenkins.setSecurityRealm(realm);\n        GlobalMatrixAuthorizationStrategy auth = new GlobalMatrixAuthorizationStrategy();\n        auth.add(Jenkins.ADMINISTER, \"admins\");\n        auth.add(Jenkins.READ, \"users\");\n        j.jenkins.setAuthorizationStrategy(auth);\n\n        WebRequest request = new WebRequest(wc.createCrumbedUrl(\"administrativeMonitor/hudsonHomeIsFull/act\"), HttpMethod.POST);\n        NameValuePair param = new NameValuePair(\"no\", \"true\");\n        request.setRequestParameters(Collections.singletonList(param));\n\n        HudsonHomeDiskUsageMonitor mon = HudsonHomeDiskUsageMonitor.get();\n\n        try {\n            wc.login(\"bob\");\n            wc.getPage(request);\n        } catch (FailingHttpStatusCodeException e) {\n            assertEquals(403, e.getStatusCode());\n        }\n        assertTrue(mon.isEnabled());\n\n        try {\n            WebRequest getIndex = new WebRequest(wc.createCrumbedUrl(\"administrativeMonitor/hudsonHomeIsFull\"), HttpMethod.GET);\n            wc.getPage(getIndex);\n        } catch (FailingHttpStatusCodeException e) {\n            assertEquals(403, e.getStatusCode());\n        }\n\n        wc.login(\"administrator\");\n        wc.getPage(request);\n        assertFalse(mon.isEnabled());\n\n    }\n\n    /**\n     * Gets the warning form.\n     */\n    private HtmlForm getForm(HudsonHomeDiskUsageMonitor mon) throws IOException, SAXException {\n        HtmlPage p = j.createWebClient().goTo(\"manage\");\n        return p.getFormByName(mon.id);\n    }\n}\n"], "filenames": ["core/src/main/java/hudson/diagnosis/HudsonHomeDiskUsageMonitor.java", "core/src/main/java/hudson/diagnosis/OldDataMonitor.java", "core/src/main/java/hudson/diagnosis/ReverseProxySetupMonitor.java", "core/src/main/java/hudson/diagnosis/TooManyJobsButNoView.java", "core/src/main/java/hudson/model/AdministrativeMonitor.java", "core/src/main/java/jenkins/diagnostics/SecurityIsOffMonitor.java", "core/src/main/java/jenkins/security/RekeySecretAdminMonitor.java", "core/src/main/java/jenkins/security/s2m/AdminCallableMonitor.java", "core/src/main/java/jenkins/security/s2m/MasterKillSwitchWarning.java", "core/src/main/resources/hudson/diagnosis/HudsonHomeDiskUsageMonitor/index.jelly", "core/src/main/resources/hudson/diagnosis/OldDataMonitor/manage.jelly", "test/src/test/java/hudson/diagnosis/HudsonHomeDiskUsageMonitorTest.java"], "buggy_code_start_loc": [27, 54, 38, 30, 36, 7, 14, 10, 7, 27, 27, 2], "buggy_code_end_loc": [66, 54, 87, 51, 149, 29, 71, 51, 30, 28, 28, 47], "fixing_code_start_loc": [26, 55, 39, 31, 37, 8, 13, 11, 8, 27, 27, 3], "fixing_code_end_loc": [68, 56, 90, 54, 163, 32, 61, 54, 33, 28, 28, 103], "type": "CWE-287", "message": "In Jenkins before versions 2.44, 2.32.2 low privilege users were able to act on administrative monitors due to them not being consistently protected by permission checks (SECURITY-371).", "other": {"cve": {"id": "CVE-2017-2604", "sourceIdentifier": "secalert@redhat.com", "published": "2018-05-15T21:29:00.353", "lastModified": "2019-10-09T23:26:55.243", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "In Jenkins before versions 2.44, 2.32.2 low privilege users were able to act on administrative monitors due to them not being consistently protected by permission checks (SECURITY-371)."}, {"lang": "es", "value": "En Jenkins en versiones anteriores a la 2.44 y 2.32.2, los usuarios de privilegios bajos pod\u00edan realizar acciones en los monitores administrativos debido a que no estaban protegidos de forma consistente por controles de permisos (SECURITY-371)."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "secalert@redhat.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-358"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jenkins:jenkins:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.44", "matchCriteriaId": "D4595374-F7F2-43D5-BB78-37E8377B1E45"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jenkins:jenkins:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.32.2", "matchCriteriaId": "F43F1677-395C-4DB8-B54F-C6F54CEDD224"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/95959", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-2604", "source": "secalert@redhat.com", "tags": ["Issue Tracking"]}, {"url": "https://github.com/jenkinsci/jenkins/commit/6efcf6c2ac39bc5c59ac7251822be8ddf67ceaf8", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://jenkins.io/security/advisory/2017-02-01/", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/jenkinsci/jenkins/commit/6efcf6c2ac39bc5c59ac7251822be8ddf67ceaf8"}}