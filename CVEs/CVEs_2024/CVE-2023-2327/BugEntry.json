{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classes.data.date\");\npimcore.object.classes.data.date = Class.create(pimcore.object.classes.data.data, {\n\n    type: \"date\",\n    /**\n     * define where this datatype is allowed\n     */\n    allowIn: {\n        object: true,\n        objectbrick: true,\n        fieldcollection: true,\n        localizedfield: true,\n        classificationstore: true,\n        block: true,\n        encryptedField: true\n    },\n\n    initialize: function (treeNode, initData) {\n        this.type = \"date\";\n\n        this.initData(initData);\n\n        this.treeNode = treeNode;\n    },\n\n    getTypeName: function () {\n        return t(\"date\");\n    },\n\n    getGroup: function () {\n        return \"date\";\n    },\n\n    getIconClass: function () {\n        return \"pimcore_icon_date\";\n    },\n\n    getLayout: function ($super) {\n        $super();\n\n        this.specificPanel.removeAll();\n        var specificItems = this.getSpecificPanelItems(this.datax, false);\n\n        this.specificPanel.add(specificItems);\n\n        return this.layout;\n    },\n\n    getSpecificPanelItems: function (datax, inEncryptedField) {\n        if(this.isInCustomLayoutEditor()) {\n            return [];\n        }\n\n        var defaultDateConfig = {\n            fieldLabel: t(\"default_value\"),\n            name: \"defaultValue\",\n            cls: \"object_field\",\n            width: 300,\n            disabled: datax.useCurrentDate\n        };\n\n        if (datax.defaultValue) {\n            var tmpDate;\n            if (typeof datax.defaultValue === 'object') {\n                tmpDate = datax.defaultValue;\n            } else {\n                tmpDate = new Date(datax.defaultValue * 1000);\n            }\n\n            defaultDateConfig.value = tmpDate;\n        }\n\n        var defaultDateField = new Ext.form.DateField(defaultDateConfig);\n\n        var specificItems = [\n            defaultDateField,\n            {\n                xtype: 'textfield',\n                width: 600,\n                fieldLabel: t(\"default_value_generator\"),\n                labelWidth: 140,\n                name: 'defaultValueGenerator',\n                value: datax.defaultValueGenerator\n            },\n            {\n                xtype: \"checkbox\",\n                fieldLabel: t(\"use_current_date\"),\n                name: \"useCurrentDate\",\n                checked: datax.useCurrentDate,\n                listeners: {\n                    change: this.toggleDefaultDate.bind(this, defaultDateField)\n                },\n                disabled: this.isInCustomLayoutEditor()\n            }, {\n                xtype: \"panel\",\n                bodyStyle: \"padding-top: 3px\",\n                style: \"margin-bottom: 10px\",\n                html: '<span class=\"object_field_setting_warning\">' + t('inherited_default_value_warning') + '</span>'\n            }\n        ];\n\n        if (!inEncryptedField) {\n\n            var columnTypeData = [[\"bigint(20)\", \"BIGINT\"], [\"date\", \"DATE\"]];\n\n            var columnTypeField = new Ext.form.ComboBox({\n                name: \"columnType\",\n                mode: 'local',\n                autoSelect: true,\n                forceSelection: true,\n                editable: false,\n                fieldLabel: t(\"column_type\"),\n                value: datax.columnType != \"bigint(20)\" && datax.columnType != \"date\" ? 'bigint(20)' : datax.columnType,\n                store: new Ext.data.ArrayStore({\n                    fields: [\n                        'id',\n                        'label'\n                    ],\n                    data: columnTypeData\n                }),\n                triggerAction: 'all',\n                valueField: 'id',\n                displayField: 'label'\n            });\n\n\n            specificItems.push(columnTypeField);\n        }\n\n        return specificItems;\n    },\n\n    toggleDefaultDate: function (defaultDateField, checkbox, checked) {\n        if (checked) {\n            defaultDateField.setValue(null);\n            defaultDateField.setDisabled(true);\n        } else {\n            defaultDateField.enable();\n        }\n    },\n\n    applyData: function ($super) {\n        $super();\n        this.datax.queryColumnType = this.datax.columnType;\n    },\n\n    applySpecialData: function (source) {\n        if (source.datax) {\n            if (!this.datax) {\n                this.datax = {};\n            }\n            Ext.apply(this.datax,\n                {\n                    defaultValue: source.datax.defaultValue,\n                    useCurrentDate: source.datax.useCurrentDate,\n                    defaultValueGenerator: source.datax.defaultValueGenerator,\n                    columnType: source.datax.columnType\n                });\n        }\n    }\n\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classes.data.datetime\");\npimcore.object.classes.data.datetime = Class.create(pimcore.object.classes.data.data, {\n\n    type:\"datetime\",\n    /**\n     * define where this datatype is allowed\n     */\n    allowIn:{\n        object:true,\n        objectbrick:true,\n        fieldcollection:true,\n        localizedfield:true,\n        classificationstore : true,\n        block: true,\n        encryptedField: true\n    },\n\n    initialize:function (treeNode, initData) {\n        this.type = \"datetime\";\n\n        this.initData(initData);\n\n        this.treeNode = treeNode;\n    },\n\n    getGroup:function () {\n        return \"date\";\n    },\n\n\n    getTypeName:function () {\n        return t(\"datetime\");\n    },\n\n    getIconClass:function () {\n        return \"pimcore_icon_datetime\";\n    },\n\n    getLayout:function ($super) {\n\n        $super();\n\n        this.specificPanel.removeAll();\n\n        var specificItems = this.getSpecificPanelItems(this.datax);\n        this.specificPanel.add(specificItems);\n\n        return this.layout;\n    },\n\n    getSpecificPanelItems: function (datax, inEncryptedField) {\n        if(this.isInCustomLayoutEditor()) {\n            return [];\n        }\n\n        var specificItems = [];\n\n        var defaultValue = new Ext.form.Hidden({\n            xtype:\"hidden\",\n            name:\"defaultValue\",\n            value: datax.defaultValue\n        });\n\n        var date = {\n            cls:\"object_field\",\n            width:300\n        };\n\n        var time = {\n            format:\"H:i\",\n            emptyText:\"\",\n            width:120\n        };\n\n\n        if (datax.defaultValue) {\n            var tmpDate;\n            if(typeof datax.defaultValue === 'object'){\n                tmpDate = datax.defaultValue;\n            } else {\n                tmpDate = new Date(datax.defaultValue * 1000);\n            }\n\n            date.value = tmpDate;\n            time.value = Ext.Date.format(tmpDate, \"H:i\");\n        }\n\n        var datefield = new Ext.form.DateField(date);\n        var timefield = new Ext.form.TimeField(time);\n\n        datefield.addListener(\"change\", this.setDefaultValue.bind(this, defaultValue, datefield, timefield));\n        timefield.addListener(\"change\", this.setDefaultValue.bind(this, defaultValue, datefield, timefield));\n\n        if(datax.useCurrentDate){\n            datefield.setDisabled(true);\n            timefield.setDisabled(true);\n        }\n\n        var defaultComponent = new Ext.form.FieldSet({\n            layout: 'hbox',\n            title: t(\"default_value\"),\n            style: \"border: none !important\",\n            combineErrors:false,\n            items:[datefield, timefield],\n            cls:\"object_field\"\n        });\n\n        var columnTypeData = [[\"bigint(20)\", \"BIGINT\"], [\"datetime\", \"DATETIME\"]];\n\n        var columnTypeField = new Ext.form.ComboBox({\n            name: \"columnType\",\n            mode: 'local',\n            autoSelect: true,\n            forceSelection: true,\n            editable: false,\n            fieldLabel: t(\"column_type\"),\n            value: datax.columnType != \"bigint(20)\" && datax.columnType != \"datetime\" ? 'bigint(20)' : datax.columnType ,\n            store: new Ext.data.ArrayStore({\n                fields: [\n                    'id',\n                    'label'\n                ],\n                data: columnTypeData\n            }),\n            triggerAction: 'all',\n            valueField: 'id',\n            displayField: 'label'\n        });\n\n\n        specificItems = specificItems.concat(\n            [\n                defaultComponent,\n                defaultValue,\n                {\n                    xtype: 'textfield',\n                    width: 600,\n                    fieldLabel: t(\"default_value_generator\"),\n                    labelWidth: 140,\n                    name: 'defaultValueGenerator',\n                    value: datax.defaultValueGenerator\n                },\n                {\n                    xtype:\"checkbox\",\n                    fieldLabel:t(\"use_current_date\"),\n                    name:\"useCurrentDate\",\n                    checked:datax.useCurrentDate,\n                    disabled: this.isInCustomLayoutEditor(),\n                    listeners:{\n                        change:this.toggleDefaultDate.bind(this, defaultValue, datefield, timefield)\n                    }\n                }, {\n                xtype: \"displayfield\",\n                hideLabel:true,\n                html:'<span class=\"object_field_setting_warning\">' +t('inherited_default_value_warning')+'</span>'\n            },\n                columnTypeField\n            ]);\n\n\n        return specificItems;\n\n    },\n\n    setDefaultValue:function (defaultValue, datefield, timefield) {\n\n        if (datefield.getValue()) {\n            var dateString = Ext.Date.format(datefield.getValue(), \"Y-m-d\");\n\n            if (timefield.getValue()) {\n                dateString += \" \" + Ext.Date.format(timefield.getValue(), \"H:i\");\n            }\n            else {\n                dateString += \" 00:00\";\n            }\n\n            defaultValue.setValue((Ext.Date.parseDate(dateString, \"Y-m-d H:i\").getTime())/1000);\n\n        } else {\n            defaultValue.setValue(null);\n        }\n    },\n\n    toggleDefaultDate:function (defaultValue, datefield, timefield, checkbox, checked) {\n            if (checked) {\n                datefield.setValue(null);\n                timefield.setValue(null);\n                defaultValue.setValue(null);\n                datefield.setDisabled(true);\n                timefield.setDisabled(true);\n            } else {\n                datefield.enable();\n                timefield.enable();\n            }\n\n\n    },\n\n    applyData: function ($super) {\n        $super();\n        this.datax.queryColumnType = this.datax.columnType;\n    },\n\n    applySpecialData: function(source) {\n        if (source.datax) {\n            if (!this.datax) {\n                this.datax =  {};\n            }\n            Ext.apply(this.datax,\n                {\n                    defaultValue: source.datax.defaultValue,\n                    useCurrentDate: source.datax.useCurrentDate,\n                    defaultValueGenerator: source.datax.defaultValueGenerator,\n                    columnType: source.datax.columnType\n                });\n        }\n    }\n\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classes.data.date\");\npimcore.object.classes.data.date = Class.create(pimcore.object.classes.data.data, {\n\n    type: \"date\",\n    /**\n     * define where this datatype is allowed\n     */\n    allowIn: {\n        object: true,\n        objectbrick: true,\n        fieldcollection: true,\n        localizedfield: true,\n        classificationstore: true,\n        block: true,\n        encryptedField: true\n    },\n\n    initialize: function (treeNode, initData) {\n        this.type = \"date\";\n\n        this.initData(initData);\n\n        this.treeNode = treeNode;\n    },\n\n    getTypeName: function () {\n        return t(\"date\");\n    },\n\n    getGroup: function () {\n        return \"date\";\n    },\n\n    getIconClass: function () {\n        return \"pimcore_icon_date\";\n    },\n\n    getLayout: function ($super) {\n        $super();\n\n        this.specificPanel.removeAll();\n        var specificItems = this.getSpecificPanelItems(this.datax, false);\n\n        this.specificPanel.add(specificItems);\n\n        return this.layout;\n    },\n\n    getSpecificPanelItems: function (datax, inEncryptedField) {\n        if(this.isInCustomLayoutEditor()) {\n            return [];\n        }\n\n        var defaultDateConfig = {\n            fieldLabel: t(\"default_value\"),\n            name: \"defaultValue\",\n            cls: \"object_field\",\n            width: 300,\n            disabled: datax.useCurrentDate,\n            listeners: {\n                change: function (defaultDateField, newValue, oldValue) {\n                    if(typeof this.getValue() != 'object') {\n                        this.setValue(null);\n                    }\n                }\n            }\n        };\n\n        if (datax.defaultValue) {\n            var tmpDate;\n            if (typeof datax.defaultValue === 'object') {\n                tmpDate = datax.defaultValue;\n            } else {\n                tmpDate = new Date(datax.defaultValue * 1000);\n            }\n\n            defaultDateConfig.value = tmpDate;\n        }\n\n        var defaultDateField = new Ext.form.DateField(defaultDateConfig);\n\n        var specificItems = [\n            defaultDateField,\n            {\n                xtype: 'textfield',\n                width: 600,\n                fieldLabel: t(\"default_value_generator\"),\n                labelWidth: 140,\n                name: 'defaultValueGenerator',\n                value: datax.defaultValueGenerator\n            },\n            {\n                xtype: \"checkbox\",\n                fieldLabel: t(\"use_current_date\"),\n                name: \"useCurrentDate\",\n                checked: datax.useCurrentDate,\n                listeners: {\n                    change: this.toggleDefaultDate.bind(this, defaultDateField)\n                },\n                disabled: this.isInCustomLayoutEditor()\n            }, {\n                xtype: \"panel\",\n                bodyStyle: \"padding-top: 3px\",\n                style: \"margin-bottom: 10px\",\n                html: '<span class=\"object_field_setting_warning\">' + t('inherited_default_value_warning') + '</span>'\n            }\n        ];\n\n        if (!inEncryptedField) {\n\n            var columnTypeData = [[\"bigint(20)\", \"BIGINT\"], [\"date\", \"DATE\"]];\n\n            var columnTypeField = new Ext.form.ComboBox({\n                name: \"columnType\",\n                mode: 'local',\n                autoSelect: true,\n                forceSelection: true,\n                editable: false,\n                fieldLabel: t(\"column_type\"),\n                value: datax.columnType != \"bigint(20)\" && datax.columnType != \"date\" ? 'bigint(20)' : datax.columnType,\n                store: new Ext.data.ArrayStore({\n                    fields: [\n                        'id',\n                        'label'\n                    ],\n                    data: columnTypeData\n                }),\n                triggerAction: 'all',\n                valueField: 'id',\n                displayField: 'label'\n            });\n\n\n            specificItems.push(columnTypeField);\n        }\n\n        return specificItems;\n    },\n\n    toggleDefaultDate: function (defaultDateField, checkbox, checked) {\n        if (checked) {\n            defaultDateField.setValue(null);\n            defaultDateField.setDisabled(true);\n        } else {\n            defaultDateField.enable();\n        }\n    },\n\n    applyData: function ($super) {\n        $super();\n        this.datax.queryColumnType = this.datax.columnType;\n    },\n\n    applySpecialData: function (source) {\n        if (source.datax) {\n            if (!this.datax) {\n                this.datax = {};\n            }\n            Ext.apply(this.datax,\n                {\n                    defaultValue: source.datax.defaultValue,\n                    useCurrentDate: source.datax.useCurrentDate,\n                    defaultValueGenerator: source.datax.defaultValueGenerator,\n                    columnType: source.datax.columnType\n                });\n        }\n    }\n\n});\n", "/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.object.classes.data.datetime\");\npimcore.object.classes.data.datetime = Class.create(pimcore.object.classes.data.data, {\n\n    type:\"datetime\",\n    /**\n     * define where this datatype is allowed\n     */\n    allowIn:{\n        object:true,\n        objectbrick:true,\n        fieldcollection:true,\n        localizedfield:true,\n        classificationstore : true,\n        block: true,\n        encryptedField: true\n    },\n\n    initialize:function (treeNode, initData) {\n        this.type = \"datetime\";\n\n        this.initData(initData);\n\n        this.treeNode = treeNode;\n    },\n\n    getGroup:function () {\n        return \"date\";\n    },\n\n\n    getTypeName:function () {\n        return t(\"datetime\");\n    },\n\n    getIconClass:function () {\n        return \"pimcore_icon_datetime\";\n    },\n\n    getLayout:function ($super) {\n\n        $super();\n\n        this.specificPanel.removeAll();\n\n        var specificItems = this.getSpecificPanelItems(this.datax);\n        this.specificPanel.add(specificItems);\n\n        return this.layout;\n    },\n\n    getSpecificPanelItems: function (datax, inEncryptedField) {\n        if(this.isInCustomLayoutEditor()) {\n            return [];\n        }\n\n        var specificItems = [];\n\n        var defaultValue = new Ext.form.Hidden({\n            xtype:\"hidden\",\n            name:\"defaultValue\",\n            value: datax.defaultValue\n        });\n\n        var date = {\n            cls:\"object_field\",\n            width:300\n        };\n\n        var time = {\n            format:\"H:i\",\n            emptyText:\"\",\n            width:120\n        };\n\n\n        if (datax.defaultValue) {\n            var tmpDate;\n            if(typeof datax.defaultValue === 'object'){\n                tmpDate = datax.defaultValue;\n            } else {\n                tmpDate = new Date(datax.defaultValue * 1000);\n            }\n\n            date.value = tmpDate;\n            time.value = Ext.Date.format(tmpDate, \"H:i\");\n        }\n\n        var datefield = new Ext.form.DateField(date);\n        var timefield = new Ext.form.TimeField(time);\n\n        datefield.addListener(\"change\", this.setDefaultValue.bind(this, defaultValue, datefield, timefield));\n        timefield.addListener(\"change\", this.setDefaultValue.bind(this, defaultValue, datefield, timefield));\n\n        if(datax.useCurrentDate){\n            datefield.setDisabled(true);\n            timefield.setDisabled(true);\n        }\n\n        var defaultComponent = new Ext.form.FieldSet({\n            layout: 'hbox',\n            title: t(\"default_value\"),\n            style: \"border: none !important\",\n            combineErrors:false,\n            items:[datefield, timefield],\n            cls:\"object_field\"\n        });\n\n        var columnTypeData = [[\"bigint(20)\", \"BIGINT\"], [\"datetime\", \"DATETIME\"]];\n\n        var columnTypeField = new Ext.form.ComboBox({\n            name: \"columnType\",\n            mode: 'local',\n            autoSelect: true,\n            forceSelection: true,\n            editable: false,\n            fieldLabel: t(\"column_type\"),\n            value: datax.columnType != \"bigint(20)\" && datax.columnType != \"datetime\" ? 'bigint(20)' : datax.columnType ,\n            store: new Ext.data.ArrayStore({\n                fields: [\n                    'id',\n                    'label'\n                ],\n                data: columnTypeData\n            }),\n            triggerAction: 'all',\n            valueField: 'id',\n            displayField: 'label'\n        });\n\n\n        specificItems = specificItems.concat(\n            [\n                defaultComponent,\n                defaultValue,\n                {\n                    xtype: 'textfield',\n                    width: 600,\n                    fieldLabel: t(\"default_value_generator\"),\n                    labelWidth: 140,\n                    name: 'defaultValueGenerator',\n                    value: datax.defaultValueGenerator\n                },\n                {\n                    xtype:\"checkbox\",\n                    fieldLabel:t(\"use_current_date\"),\n                    name:\"useCurrentDate\",\n                    checked:datax.useCurrentDate,\n                    disabled: this.isInCustomLayoutEditor(),\n                    listeners:{\n                        change:this.toggleDefaultDate.bind(this, defaultValue, datefield, timefield)\n                    }\n                }, {\n                xtype: \"displayfield\",\n                hideLabel:true,\n                html:'<span class=\"object_field_setting_warning\">' +t('inherited_default_value_warning')+'</span>'\n            },\n                columnTypeField\n            ]);\n\n\n        return specificItems;\n\n    },\n\n    setDefaultValue:function (defaultValue, datefield, timefield) {\n        if(datefield.getValue() && typeof datefield.getValue() === 'object') {\n            var dateString = Ext.Date.format(datefield.getValue(), \"Y-m-d\");\n\n            if (timefield.getValue()) {\n                dateString += \" \" + Ext.Date.format(timefield.getValue(), \"H:i\");\n            } else {\n                dateString += \" 00:00\";\n            }\n\n            defaultValue.setValue((Ext.Date.parseDate(dateString, \"Y-m-d H:i\").getTime()) / 1000);\n        } else {\n            datefield.setValue(null);\n            defaultValue.setValue(null);\n        }\n    },\n\n    toggleDefaultDate:function (defaultValue, datefield, timefield, checkbox, checked) {\n            if (checked) {\n                datefield.setValue(null);\n                timefield.setValue(null);\n                defaultValue.setValue(null);\n                datefield.setDisabled(true);\n                timefield.setDisabled(true);\n            } else {\n                datefield.enable();\n                timefield.enable();\n            }\n\n\n    },\n\n    applyData: function ($super) {\n        $super();\n        this.datax.queryColumnType = this.datax.columnType;\n    },\n\n    applySpecialData: function(source) {\n        if (source.datax) {\n            if (!this.datax) {\n                this.datax =  {};\n            }\n            Ext.apply(this.datax,\n                {\n                    defaultValue: source.datax.defaultValue,\n                    useCurrentDate: source.datax.useCurrentDate,\n                    defaultValueGenerator: source.datax.defaultValueGenerator,\n                    columnType: source.datax.columnType\n                });\n        }\n    }\n\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/object/classes/data/date.js", "bundles/AdminBundle/Resources/public/js/pimcore/object/classes/data/datetime.js"], "buggy_code_start_loc": [72, 179], "buggy_code_end_loc": [73, 192], "fixing_code_start_loc": [72, 179], "fixing_code_end_loc": [80, 191], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.21.", "other": {"cve": {"id": "CVE-2023-2327", "sourceIdentifier": "security@huntr.dev", "published": "2023-04-27T10:15:09.603", "lastModified": "2023-05-08T18:25:26.400", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.0, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.6, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.21", "matchCriteriaId": "72C537D6-67BA-4562-B853-F99E6C14315C"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/fb3056a21d439135480ee299bf1ab646867b5f4f", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/7336b71f-a36f-4ce7-a26d-c8335ac713d6", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/fb3056a21d439135480ee299bf1ab646867b5f4f"}}