{"buggy_code": ["/*\n * The MIT License\n * \n * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi, Matthew R. Harrah\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.security;\n\nimport java.util.Properties;\nimport java.util.logging.Logger;\nimport java.util.logging.Level;\nimport java.io.IOException;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport hudson.Util;\nimport org.acegisecurity.Authentication;\nimport org.acegisecurity.AuthenticationException;\nimport org.acegisecurity.ui.webapp.AuthenticationProcessingFilter;\n\n/**\n * {@link AuthenticationProcessingFilter} with a change for Jenkins so that\n * we can pick up the hidden \"from\" form field defined in <tt>login.jelly</tt>\n * to send the user back to where he came from, after a successful authentication.\n * \n * @author Kohsuke Kawaguchi\n */\npublic class AuthenticationProcessingFilter2 extends AuthenticationProcessingFilter {\n    @Override\n    protected String determineTargetUrl(HttpServletRequest request) {\n        String targetUrl = request.getParameter(\"from\");\n        request.getSession().setAttribute(\"from\", targetUrl);\n\n        if (targetUrl == null)\n            return getDefaultTargetUrl();\n\n        if (Util.isAbsoluteUri(targetUrl))\n            return \".\"; // avoid open redirect\n\n        // URL returned from determineTargetUrl() is resolved against the context path,\n        // whereas the \"from\" URL is resolved against the top of the website, so adjust this.\n        if(targetUrl.startsWith(request.getContextPath()))\n            return targetUrl.substring(request.getContextPath().length());\n\n        // not sure when this happens, but apparently this happens in some case.\n        // see #1274\n        return targetUrl;\n    }\n\n    /**\n     * @see org.acegisecurity.ui.AbstractProcessingFilter#determineFailureUrl(javax.servlet.http.HttpServletRequest, org.acegisecurity.AuthenticationException)\n     */\n    @Override\n    protected String determineFailureUrl(HttpServletRequest request, AuthenticationException failed) {\n        Properties excMap = getExceptionMappings();\n\t\tString failedClassName = failed.getClass().getName();\n\t\tString whereFrom = request.getParameter(\"from\");\n\t\trequest.getSession().setAttribute(\"from\", whereFrom);\n\t\treturn excMap.getProperty(failedClassName, getAuthenticationFailureUrl());\n    }\n\n    @Override\n    protected void onSuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, Authentication authResult) throws IOException {\n        super.onSuccessfulAuthentication(request,response,authResult);\n        // make sure we have a session to store this successful authentication, given that we no longer\n        // let HttpSessionContextIntegrationFilter2 to create sessions.\n        // HttpSessionContextIntegrationFilter stores the updated SecurityContext object into this session later\n        // (either when a redirect is issued, via its HttpResponseWrapper, or when the execution returns to its\n        // doFilter method.\n        request.getSession();\n    }\n\n    /**\n     * Leave the information about login failure.\n     *\n     * <p>\n     * Otherwise it seems like Acegi doesn't really leave the detail of the failure anywhere.\n     */\n    @Override\n    protected void onUnsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException {\n        super.onUnsuccessfulAuthentication(request, response, failed);\n        LOGGER.log(Level.INFO, \"Login attempt failed\", failed);\n    }\n\n    private static final Logger LOGGER = Logger.getLogger(AuthenticationProcessingFilter2.class.getName());\n}\n"], "fixing_code": ["/*\n * The MIT License\n * \n * Copyright (c) 2004-2009, Sun Microsystems, Inc., Kohsuke Kawaguchi, Matthew R. Harrah\n * \n * Permission is hereby granted, free of charge, to any person obtaining a copy\n * of this software and associated documentation files (the \"Software\"), to deal\n * in the Software without restriction, including without limitation the rights\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\n * copies of the Software, and to permit persons to whom the Software is\n * furnished to do so, subject to the following conditions:\n * \n * The above copyright notice and this permission notice shall be included in\n * all copies or substantial portions of the Software.\n * \n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN\n * THE SOFTWARE.\n */\npackage hudson.security;\n\nimport java.util.Properties;\nimport java.util.logging.Logger;\nimport java.util.logging.Level;\nimport java.io.IOException;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpServletResponse;\n\nimport hudson.Util;\nimport org.acegisecurity.Authentication;\nimport org.acegisecurity.AuthenticationException;\nimport org.acegisecurity.ui.webapp.AuthenticationProcessingFilter;\n\n/**\n * {@link AuthenticationProcessingFilter} with a change for Jenkins so that\n * we can pick up the hidden \"from\" form field defined in <tt>login.jelly</tt>\n * to send the user back to where he came from, after a successful authentication.\n * \n * @author Kohsuke Kawaguchi\n */\npublic class AuthenticationProcessingFilter2 extends AuthenticationProcessingFilter {\n    @Override\n    protected String determineTargetUrl(HttpServletRequest request) {\n        String targetUrl = request.getParameter(\"from\");\n        request.getSession().setAttribute(\"from\", targetUrl);\n\n        if (targetUrl == null)\n            return getDefaultTargetUrl();\n\n        if (Util.isAbsoluteUri(targetUrl))\n            return \".\"; // avoid open redirect\n\n        // URL returned from determineTargetUrl() is resolved against the context path,\n        // whereas the \"from\" URL is resolved against the top of the website, so adjust this.\n        if(targetUrl.startsWith(request.getContextPath()))\n            return targetUrl.substring(request.getContextPath().length());\n\n        // not sure when this happens, but apparently this happens in some case.\n        // see #1274\n        return targetUrl;\n    }\n\n    /**\n     * @see org.acegisecurity.ui.AbstractProcessingFilter#determineFailureUrl(javax.servlet.http.HttpServletRequest, org.acegisecurity.AuthenticationException)\n     */\n    @Override\n    protected String determineFailureUrl(HttpServletRequest request, AuthenticationException failed) {\n        Properties excMap = getExceptionMappings();\n\t\tString failedClassName = failed.getClass().getName();\n\t\tString whereFrom = request.getParameter(\"from\");\n\t\trequest.getSession().setAttribute(\"from\", whereFrom);\n\t\treturn excMap.getProperty(failedClassName, getAuthenticationFailureUrl());\n    }\n\n    @Override\n    protected void onSuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, Authentication authResult) throws IOException {\n        super.onSuccessfulAuthentication(request,response,authResult);\n        // make sure we have a session to store this successful authentication, given that we no longer\n        // let HttpSessionContextIntegrationFilter2 to create sessions.\n        // HttpSessionContextIntegrationFilter stores the updated SecurityContext object into this session later\n        // (either when a redirect is issued, via its HttpResponseWrapper, or when the execution returns to its\n        // doFilter method.\n        request.getSession().invalidate();\n        request.getSession();\n    }\n\n    /**\n     * Leave the information about login failure.\n     *\n     * <p>\n     * Otherwise it seems like Acegi doesn't really leave the detail of the failure anywhere.\n     */\n    @Override\n    protected void onUnsuccessfulAuthentication(HttpServletRequest request, HttpServletResponse response, AuthenticationException failed) throws IOException {\n        super.onUnsuccessfulAuthentication(request, response, failed);\n        LOGGER.log(Level.INFO, \"Login attempt failed\", failed);\n    }\n\n    private static final Logger LOGGER = Logger.getLogger(AuthenticationProcessingFilter2.class.getName());\n}\n"], "filenames": ["core/src/main/java/hudson/security/AuthenticationProcessingFilter2.java"], "buggy_code_start_loc": [87], "buggy_code_end_loc": [87], "fixing_code_start_loc": [88], "fixing_code_end_loc": [89], "type": "CWE-287", "message": "Session fixation vulnerability in Jenkins before 1.551 and LTS before 1.532.2 allows remote attackers to hijack web sessions via vectors involving the \"override\" of Jenkins cookies.", "other": {"cve": {"id": "CVE-2014-2066", "sourceIdentifier": "security@debian.org", "published": "2014-10-17T15:55:05.853", "lastModified": "2016-06-13T23:40:17.913", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Session fixation vulnerability in Jenkins before 1.551 and LTS before 1.532.2 allows remote attackers to hijack web sessions via vectors involving the \"override\" of Jenkins cookies."}, {"lang": "es", "value": "Vulnerabilidad de fijaci\u00f3n de sesi\u00f3n en Jenkins en versiones anteriores a 1.551 y LTS en versiones anteriores a 1.532.2 permite a atacantes remotos secuestrar sesiones web a trav\u00e9s de vectores implicando las cookies \"override\" de Jenkins."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jenkins:jenkins:*:*:*:*:lts:*:*:*", "versionEndIncluding": "1.532.1", "matchCriteriaId": "F5EDE52E-F7BE-457D-8E56-F24800F02241"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:jenkins:jenkins:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.550", "matchCriteriaId": "07E4FEB5-A7D9-49FE-839A-0D650CC19C42"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2014/02/21/2", "source": "security@debian.org"}, {"url": "https://github.com/jenkinsci/jenkins/commit/8ac74c350779921598f9d5edfed39dd35de8842a", "source": "security@debian.org", "tags": ["Patch"]}, {"url": "https://wiki.jenkins-ci.org/display/SECURITY/Jenkins+Security+Advisory+2014-02-14", "source": "security@debian.org", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/jenkinsci/jenkins/commit/8ac74c350779921598f9d5edfed39dd35de8842a"}}