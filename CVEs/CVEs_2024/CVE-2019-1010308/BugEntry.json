{"buggy_code": ["<?php\n/** Initialization operations for the backend\n  * Ensures a logged-in user and initializes some globals.\n  * @package Aquarius.backend\n*/\n\nLog::backtrace('backend');\n\n/* Use sessions in backend */\n    $aquarius->session_start();\n\n\n/* Process logins & load logged in user */\n    require_once \"db/Users.php\";\n    $login_status = db_Users::authenticate();\n                \n    // Redirect to frontend if user wants to\n    if ($login_status instanceof db_User && isset($_REQUEST['login_frontend'])) {\n        header('Location:'.PROJECT_URL);\n        exit;\n    }\n\n    $user = db_Users::authenticated();\n\n    $request_params = array(\n        'request' => clean_magic($_REQUEST),\n        'server' => $_SERVER,\n        'require_active' => false,\n        'user' => $user\n    );\n    \n    // Determine the preset language for working with content\n    // Actions often override this and have their own lg specifiers\n    $lg_detection = new Language_Detection;\n    $lg_detection->add_detector('request_parameter');\n    $lg_detection->add_detector('backend_lg_user_default_lang', function() use ($user) {\n        // Right after login, we have no language set, but the user has\n        if ($user) return $user->defaultLanguage;\n    });\n    $lg_detection->add_detector('accepted_languages'); // grasping at straws\n    $lg_detection->add_detector('primary'); // Better than nothing\n    \n    $lg = $lg_detection->detect($request_params);\n    Log::debug(\"Using content language \".$lg);\n    \n    // Determine user interface language\n    $admin_lg_detection = new Language_Detection_Admin;\n    $admin_lg_detection->add_detector('user_admin_lang');\n    $admin_lg_detection->add_detector('accepted_languages');\n    $admin_lg_detection->add_detector('use_default');\n\n    $admin_lg = $admin_lg_detection->detect($request_params);\n    Log::debug(\"Using admin language \".$admin_lg);\n    \n\n    $aquarius->execute_hooks('backend_init');\n    \n/* Create base url */\n\n    $url = new Url(false, false);\n\n    // Add language parameter, this one is used everywhere\n    $url->add_param('lg', str($lg));\n\n\n/* Divert to login if user isn't logged in */\n\n    if (!$user) {\n        $smarty = $aquarius->get_smarty_backend_container();\n        $request_uri = Url::of_request();\n        $correct_uri = clone $request_uri; // 'Hopefully correct' would be more to the point\n\n        $admin_domain = $aquarius->conf('admin/domain');\n        if ($admin_domain) $correct_uri->host = $admin_domain;\n\n        // Check we're the frameset root and not an inner frame page\n        if (preg_match('%/$%', $request_uri->path) === 0) {\n            $config_path = $aquarius->conf('admin/path');\n            if (!empty($config_path)) {\n                $correct_uri->path = $config_path;\n            } else {\n                $correct_uri->path = dirname($correct_uri->path).'/';\n            }\n        }\n        \n        // Login status of -1 means failed attempt\n        $login_failed = $login_status === -1;\n        \n        // primitive check that we had a session cookie submitted\n        $cookie_missing = (isset($_GET['returning']) || (bool)$login_status) && empty($_COOKIE);\n        \n        if ($request_uri == $correct_uri) {\n            $smarty->assign(compact('login_failed', 'cookie_missing'));\n            $smarty->assign('session_id', session_id());\n            $smarty->assign('revision', first(explode('-', $aquarius->revision())));\n            $smarty->display('login.tpl');\n        } else {\n            $correct_uri->params = array();\n            $correct_uri->add_param('returning');\n            $smarty->assign('correct_uri', $correct_uri);\n            $smarty->display('login-redirect.tpl');\n        }\n        flush_exit();\n    }\n    \n\n/* Load libraries used in backend */\n    require_once \"lib/db/Users2languages.php\";\n    require_once \"lib/adminaction.php\";\n    require_once \"lib/moduleaction.php\";\n    require_once \"lib/Translation.php\";\n", "<?php\n\n/**************** LOGGING */\n\n// Log messages are written to a log-file and included as HTML comments\n// Available log levels: NEVER | FAIL |  WARN | INFO | MESSAGES | DEBUG | BACKTRACE | ALL\n\n/** What messages to log to file, recommended is INFO */\n$config['log']['level']     = 'INFO';\n\n/** Write log messages to this file, path relative to aquarius dir, must be\n  * writable by webserver. */\n$config['log']['file'] = 'cache/log.txt';\n\n/** Echo log messages to output as HTML comments, recommended NEVER */\n$config['log']['echolevel'] = 'NEVER';\n\n/** Send log messages in HTTP headers, recommended NEVER\n  * This requires Firefox/FirePHP */\n$config['log']['firelevel'] = 'NEVER';\n\n/** Enable/disable PHP messages\n  * Set to true to enable PHP warnings, false to disable them explicitly.\n  * The preset null means that the PHP settings are not changed. */\n$config['log']['php'] = null;\n\n\n\n\n/**************** DB */\n\n/** What DB driver to use\n  *\n  * Preset is 'mysqli' and this should be left alone.\n  * 'mysql' is somewhat tested, others won't work unless you do some serious porting work.\n  */\n$config['db']['driver'] = 'mysqli'; // Change this at your own peril.\n\n/** The DB host to connect to, preset is 'localhost' */\n$config['db']['host'] = 'localhost';\n\n/** The database name, this is best configured in config.local.php */\n$config['db']['name'] = null;\n\n/** The database user to connect with, this is best configured in config.local.php */\n$config['db']['user'] = null;\n\n/** The database password to connect with, this is best configured in config.local.php\n  * Note that this will not be available during run-time to avoid leakage.\n  * Use the constant DB_PASSWORD to retrieve it.\n  */\n$config['db']['pass'] = null; \n\n\n\n/**************** SESSION */\n\n/** Where to save session files\n  *\n  * Specify a filesystem path where session files are stored. If this path is\n  * relative, it will be taken relative to the aquarius cache path. The\n  * preset value is 'session'. If this is set to false, the value preset\n  * by the webserver is not changed, the standard location is '/tmp'.\n  *\n  * On servers with shared hosting, it is insecure to store session data in a\n  * common directory with other sites. Unfortunately, webservers are frequently\n  * configured that way. For this reason Aquarius does not by default use the\n  * session.save_path preset by the webserver.\n  *\n  * See also: PHP's session.save_path directive\n  *\n  */\n$config['session']['save_path'] = 'session';\n\n/** How long session data is preserved before it's cleared (minimum) in seconds\n  *\n  * The preset is 30 minutes. If this value is set to false, the value\n  * configured by the webserver is not changed.\n  *\n  * See also: PHP's session.gc_maxlifetime directive\n  *\n  */\n$config['session']['lifetime'] = '1800';\n\n/** Name of the session cookie, preset is 'aquarius3_session' */\n$config['session']['name'] = 'aquarius3_session';\n\n\n/**************** FRONTEND */\n\n/* Set the standard domain name \n * This will be used in generated URL.\n * \n * Example:\n * $config['frontend']['domain'] = 'www.aquaverde.ch'\n */\n$config['frontend']['domain'] = null;\n\n\n/* Always use session in frontend\n * If this is false (the default, sessions will only be enabled for restricted nodes) */\n$config['frontend']['use_session'] = false;\n\n/* Use different language or base node, based on domain name.\n   Default language, node and redirects may be specified based on domain-name. These parameters can be set:\n    node: A node id or name to use instead of the root node\n    lg:   A language to use instead of using browser detection or the default\n    moved_permanently: an URL to redirect to.\n\n  The 'node' and 'lg' parameters are considered only if they are not specified in the URL. 'moved_permanently' on the other hand is always active.\n\n   Example: Assume we have the two domains 'coolthing.example.com' and 'trucfroid.example.com', the two languages 'en' and 'fr', also the default language is 'en'. Now we configure the following:\n\n    $config['frontend']['domains'] = array(\n            'search.coolthing.example.com' => array('node' => 'search'),\n                   'trucfroid.example.com' => array('lg'   => 'fr'),\n         'recherche.trucfroid.example.com' => array('node' => 'search'),\n                     'oldcool.example.com' => array('moved_permanently' => 'http://coolthing.example.com')\n        );\n\n   What this means is that for 'search.coolthing.example.com' and all subdomains we use the node named 'search' as base node. For all domains ending in 'trucfroid.example.com' we select 'fr' as language, and finally, for 'recherche.trucfroid.example.com' we also use the node named 'search'.\n\n   Note that it was not necessary to specify 'lg'=>'fr' again for 'recherche.trucfroid.example.com', because that was already covered by 'trucfroid.example.com'.\n\n   All requests on domain oldcool.example.com will be answered with a HTTP 301 redirection to location 'http://coolthing.example.com'. */\n$config['frontend']['domains'] = array();\n\n/* Frontend redirects to proper URI if this is enabled. May lead to redirect loops, surprising behaviour and overall confusion. Required to please the holy GOOG. */\n$config['frontend']['uri_correction'] = true;\n\n/* Automagically assign content fields for each item in the smarty {list} block. */\n$config['frontend']['loadcontent'] = false;\n\n/* Automagically escape every variable in templates */\n$config['frontend']['smarty']['auto_escape'] = false;\n\n/* Merge includes into one compiled template\n * In smarty 3.1, you can either have dynamic templates like\n * {include file=$file} or use {block} inheritance. The default is {block}\n * inheritance. If you want dynamic includes set this to false, then use\n * the inline parameter ({include file=include_with_block.tpl inline}) if there\n * are blocks in your includes.\n * */\n$config['frontend']['smarty']['merge_includes'] = true;\n\n/* Enable caching of template output.\n * This is generally a very good idea. */\n$config['frontend']['cache']['templates'] = true;\n\n/* How long to keep cache output, in seconds */\n$config['frontend']['cache']['lifetime'] = 86400; // One day\n\n/* Enable caching of compiled templates.\n * There is no reason to turn this off, really. */\n$config['frontend']['cache']['compiles'] = true;\n\n\n/**************** ADMIN */\n\n/** Optional: Domain to use for backend, clients using another domain will be redirected to this */\n//$config['admin']['domain'] = 'admin.site.example';\n\n/** Path to backend. Optional, standard value is '/admin/'  */\n//$config['admin']['path'] = '/aquarius/';\n\n$config['admin']['user']['edit_permission_tree_depth'] = 2; // How many levels of tree to allow adding edit permission for users (default 2)\n\n// light config\n$config['admin']['menu_links'] = array(\n    array( 'parent' => 'menu_super_links', 'title' => 'Statistics', 'url' => '/stats/'),\n    array( 'parent' => 'menu_super_links', 'title' => 'Aquarius manual', 'url' => 'http://wiki.aquarius3.ch/', 'target' => '_new'),\n    array( 'parent' => 'menu_super_links', 'title' => 'Database admin', 'url' => '/aquarius/dbadmin', 'target' => '_new', 'allow' => 0)\n);\n\n// RTE configuration\n$config['admin']['rte'] = array(\n    'browse_path_img' => 'pictures/richtext',\n    'browse_path_file' => 'download',\n    'plugins' => array(\n        'iLink' => '/aquarius/core/backend/ckeditor/plugins/iLink/plugin.js',\n        'wordcount' => '/aquarius/core/vendor/w8tcha/CKEditor-WordCount-Plugin/wordcount/plugin.js'\n    )\n);\n\n// Add RTE plugin examples\n#$config['admin']['rte']['plugins']['youtube'] = '/js/ckeditor_youtube/plugin.js' // External plugin\n#$config['admin']['rte']['plugins']['iframe'] = true // core plugin\n\n\n/** Allow administrators to manage languages\n  *\n  * Preset is false.\n  */\n$config['admin']['allow_languageadmin'] = false;\n\n/** The preset for the target selection in link fields\n  *\n  * Set this to '_blank' if you prefer the links to open a new window.\n  * Changing this value will only affect newly added links. */\n$config['admin']['link_target'] = '';\n\n\n/** Standard email address to use as sender address\n  * This is used in the \"Sender:\" header when the system generates mails. The\n  * \"From:\" header will also be set to this address should it not be set\n  * explicitly.\n  * \n  * The \"@host\" part may be omitted, and only the local part (before the \"@\")\n  * specified. In this case the request-hostname will be used, with the\n  * \"www.\" stripped off.\n  */\n$config['email'] = array(\n    'sender' => 'info',\n    'smtp' => false\n);\n\n/*\n// Example SMTP config\n$config['email']['smtp'] = array(\n    'host' => 'smtp.bulkspam.example',\n    'port' => 25,\n    'user' => 'egg@bulkspam.example',\n    'pass' => 'ham',\n    'sender' => 'egg@bulkspam.example' // Force the mail sender to be this address\n);\n\n// Testing config for perl fakesmtpd.pl\n$config['email']['smtp'] = array(\n    'host'     => 'localhost',\n    'port'     => '2525'\n);\n*/\n\n\n/** PDF generator settings.\n  * WARNING: The PDF generator currently allows generating PDF from any node\n  * with any template. This is probably not what you want, so it is disabled as\n  * a precaution. \n  */\n$config['pdfgen']['enabled'] = false;\n$config['pdfgen']['standard_template'] = 'basic.tpl';\n$config['pdfgen']['prefix'] = 'pdf';\n\n\n/** Cache Aquarius loading\n  * The pristine Aquarius stage is cached to a file and Aquarius is initizlized\n  * from this cache. On fast systems the difference is negligible but disk-bound\n  * webservers can profit from this.\n  */\n$config['initcache'] = true;\n\n", "<?php\n/** Override settings\n  * Place a file with the override name in the aquarius dir to enable these\n  * overrides. Example: To enable DEV mode, touch aquarius/DEV.\n  *\n  * If one of the override settings is unsuitable, you can override it again\n  * in config.local.php.\n  */\nif (DEV) {\n    /** Overrides suitable for developement */\n    $config['frontend']['domain'] = null;\n    $config['frontend']['domains'] = array();\n    $config['frontend']['cache']['templates'] = false;\n    $config['initcache'] = false;\n    $config['log']['php'] = true;\n}\n\nif (STAGING) {\n    /** Overrides suitable for testing before deployment */\n    $config['frontend']['domain'] = null;\n    $config['frontend']['domains'] = array();\n}\n\nif (DEBUG) {\n    /** Overrides suitable for debugging */\n    $config['log']['echolevel'] = 'DEBUG';\n    $config['log']['php'] = true;\n}\n", "<?php\n/** @package Aquarius */\n\n/** User of the backend interface */\nclass db_Users extends DB_DataObject \n{\n    ###START_AUTOCODE\n    /* the code below is auto generated do not remove the above tag */\n\n    public $__table = 'users';                           // table name\n    public $id;                              // int(11)  not_null primary_key auto_increment group_by\n    public $name;                            // varchar(150)  not_null unique_key\n    public $password;                        // varchar(765)  not_null multiple_key\n    public $password_salt;                   // varchar(765)  \n    public $status;                          // int(11)  not_null group_by\n    public $adminLanguage;                   // char(6)  not_null\n    public $defaultLanguage;                 // char(6)  not_null\n    public $active;                          // tinyint(1)  not_null multiple_key group_by\n    public $activation_permission;           // tinyint(1)  not_null group_by\n    public $delete_permission;               // tinyint(1)  not_null group_by\n    public $copy_permission;                 // tinyint(1)  not_null group_by\n    public $last_login;                      // datetime(19)  \n\n    /* Static get */\n    function staticGet($k,$v=NULL) { return DB_DataObject::staticGet('db_Users',$k,$v); }\n\n    /* the code above is auto generated do not remove the tag below */\n    ###END_AUTOCODE\n\n    const SUPERADMIN = 0;\n    const SITEADMIN  = 1;\n    const USER       = 2;\n\n    static $status_names = array(\n        self::SUPERADMIN => 'superuser',\n        self::SITEADMIN  => 'siteadmin',\n        self::USER       => 'user'\n    );\n\n    /** Verify user credentials and register user in session if successful.\n      * Requires fields 'backend_login', 'username' and 'password' to be set in $_REQUEST\n      *   backend_login: must be set or this method won't try to authenticate\n      *  @return user instance if login is successful, -1 if login failed, false if no login credentials were found.\n      */\n    static function authenticate() {\n        if (isset($_REQUEST['backend_login'])) {\n            $user = DB_DataObject::factory('users');\n            $user->active = true;\n            $user->name = $_REQUEST['username'];\n            $user->find(true);\n\n            // Don't look whether that user exists, so we give less timing information\n            // Instead, rely only on having a matching password\n            $proffered_password = $_REQUEST['password'];\n            if (in_array(\n                $user->password,\n                self::password_hashes($proffered_password, $user->password_salt)\n            )) {\n                // Regenerate the session ID, unless it's an IE we're talking to which would use the old session ID to load the frame contents\n                // Remove this guard once we no longer use frames\n                if(!preg_match('/(?i)msie /', $_SERVER['HTTP_USER_AGENT'])) {\n                    session_regenerate_id();\n                }\n                $user->login();\n                \n                return $user;\n            } else {\n                Log::warn(\"Failed login for user name '\".$_REQUEST['username'].\"' from \" . $_SERVER['REMOTE_ADDR'].' user-agent '.$_SERVER['HTTP_USER_AGENT']);\n                return -1;\n            }\n        }\n        return false;\n    }\n\n    /** Update the password and salt\n      * @param $pass the password to set\n      * This function will replace the current 'password_salt' string and \n      * 'password' hash using the strongest hash from password_hashes().\n      */\n    function set_password($pass) {\n        $this->password_salt = uniqid();\n        $this->password = end(self::password_hashes($pass, $this->password_salt));\n    }\n\n    \n    /** Generate list of possible password hashes, strongest last\n      *\n      * @param $pass The password to generate hashes for\n      * @param $salt Salt to use in hashes\n      *\n      * This returns an array with three entries:\n      *   1. MD5 sum of $pass\n      *   2. SHA1 hash of $pass with $salt appended\n      *   3. 100 x Iterated SHA256 HMAC with $pass as initial key and $salt as\n      *      data, iterations use the previous HMAC as key and $salt as data\n      *\n      * If the PHP version does not support SHA256 the third entry is omitted.\n      */\n    static function password_hashes($pass, $salt) {\n        $possible_passwords = array();\n        $possible_passwords []= md5($pass);        // Legacy\n        $possible_passwords []= sha1($pass.$salt); // Fallback\n        \n        // Iterated sha256 HMAC will take a while to search. We'll add\n        // sha512x1000 in two years or so.\n        if (in_array('sha256', hash_algos())) {\n            $hmac = $pass;\n            for ($n=0; $n<100; $n++) $hmac = hash_hmac('sha256', $hmac, $salt);\n            $possible_passwords []= $hmac;\n        }\n        return $possible_passwords;\n    }\n\n\n    \n    /** Loads user instance from session if the user authenticated himself already */\n    static function authenticated() {\n        global $aquarius;\n        $user_id = $aquarius->session_get('user');\n        if ($user_id) {\n            static $cache_user;\n            if (!$cache_user || $cache_user->id != $user_id) {\n                $user = new self();\n                $user->id = $user_id;\n                if ($user->find(true)) {\n                    $cache_user = $user;\n                } else {\n                    self::logout();\n                    throw new Exception(\"Invalid user id '$user_id' in session \".session_id());\n                }\n            }\n            return $cache_user;\n        }\n        return false;\n    }\n\n    /** Mark this user as logged-in for this session */\n    function login() {\n        global $aquarius;\n        $aquarius->db->query(\"UPDATE users SET last_login=UTC_TIMESTAMP() WHERE id=?\", array($this->id));\n        $aquarius->session_set('user', $this->id);\n        Log::info(\"Login of user '\".$this->name.\"' (\".$this->id.\") from \" . $_SERVER['REMOTE_ADDR'].' user-agent '.$_SERVER['HTTP_USER_AGENT']);\n    }\n\n    /** Clear the user id from session */\n    static function logout() {\n        global $aquarius;\n        $user_id = $aquarius->session_get('user') ;\n        $aquarius->session_set('user', NULL) ;\n        $user = new self();\n        $user->id = $user_id;\n        if ($user->find(true)) {\n            Log::info(\"Logout of user '\".$user->name.\"' (\".$user->id.\") from ip: \".$_SERVER['REMOTE_ADDR']);\n        } else {\n            Log::warn(\"Logout for invalid user id '$user_id' from ip: \".$_SERVER['REMOTE_ADDR']);\n        }\n    }\n\n\n\t/** return an array with all existing users */\n\tstatic function getUsers() {\n\t\t$user_prototype = DB_DataObject::factory('users');\n\t\t$user_prototype->find();\n\t\t\n\t\t$users = array();\n\t\t\t\t\t\n\t\twhile ( $user_prototype->fetch() )\n\t\t\t$users[] = clone($user_prototype);\n\t\t\n\t\t\t\n\t\treturn $users;\n\t\t\n\t}\n\n    /** List of nodes to which this user has access permissions */\n\tfunction getNodes() {\n        if (!isset($this->cached_nodes)) {\n            $proto =& DB_DataObject::factory('users2nodes');\n            $proto->userId = $this->id;\n            $proto->find();\n            $this->cached_nodes = array();\n            while ($proto->fetch())\n                $this->cached_nodes[$proto->nodeId] = clone $proto;\n        }\n        return $this->cached_nodes;\n\t}\n\t\n    /** List of module-ids to which this user has access permissions */\n    function getAccessableModuleIds() {\n        if (!isset($this->accessible_moduleids)) {\n            $u2m =& DB_DataObject::factory('users2modules');\n            $u2m->userId = $this->id;\n            $u2m->find();\n            $result = array();\n            while($u2m->fetch()) {\n                $result[] = $u2m->moduleId;\n            }\n            $this->accessible_moduleids = $result;\n        }\n        return $this->accessible_moduleids;\n    }\n    \n    /** List of modules to which this user has access permissions */\n    function getAccessableModules() {\n         \n        if (!isset($this->accessible_modules)) {\n            if($this->isSuperadmin()) {\n                $this->accessible_modules=db_Modules::getModules();\n            } else {\n                $u2m =& DB_DataObject::factory('users2modules');\n                $u2m->userId = $this->id;\n                $u2m->find();\n                $result = array();\n                while($u2m->fetch()) {\n                    $modproto = DB_DataObject::factory('modules');\n                    $modproto->id=$u2m->moduleId;\n                    $modproto->find(true);\n                    $result[] = clone($modproto);\n                }\n                $this->accessible_modules = $result;\n            }\n        }\n        return $this->accessible_modules;\n    }\n    \n\tfunction getAccessableLanguages() {\n\t    if (!isset($this->accessible_languages)) {\n            $u2l =& DB_DataObject::factory('users2languages');\n            $u2l->userId = $this->id;\n            $u2l->find();\n            $result = array();\n            while ( $u2l->fetch() ) {\n                $result[] = $u2l->lg;\n            }\n            $this->accessible_languages = $result; // Caching\n        }\n        return  $this->accessible_languages; // Cached\n\t}\n\t\n\tfunction getPrefsArray() {\n\t\t$prefs\t=& DB_DataObject::factory('users2modules');\n\t\t$prefs->userId = $this->id;\n\t\t$prefs->find();\n\t\t\n\t\t$result\t= array();\n\t\twhile ( $prefs->fetch() )\n\t\t\t$result[$prefs->moduleId] = true;\n\t\t\n\t\treturn $result;\n\t}\n\t\n\tfunction isSuperadmin() {\n\t\treturn $this->status == self::SUPERADMIN;\n\t}\n\t\n\tfunction isSiteadmin() {\n\t\treturn $this->status <= self::SITEADMIN;\n\t}\n\t\n\tfunction isUser() {\n\t\treturn $this->status <= self::USER;\n\t}\n\n    /** Remove permission settings as well */\n    function delete() {\n        $users2node = DB_DataObject::factory('users2nodes');\n        $users2node->userId = $this->id;\n        $users2node->delete();\n\n        parent::delete();\n    }\n\n    /** List of status names visible to this user */\n    function visible_status_names() {\n        return array_kfilter(\n            self::$status_names,\n            create_function('$key', 'return $key >= '.$this->status.';')\n        );\n    }\n\n    /** List of users visible from this user */\n    function visible_users() {\n        $user_prototype = DB_DataObject::factory('users');\n        $user_prototype->whereAdd('status >= '.$this->status);\n        $user_prototype->find();\n        $users = array();\n        while ($user_prototype->fetch()) $users[] = clone($user_prototype);\n        return $users;\n    }\n\n    /** Whether the user has permission to edit the given node */\n    function may_edit($node) {\n        // Siteadmins may edit everything\n        if ($this->isSiteadmin()) return true;\n\n        // Check whether node is in a permitted edit range\n        // In case of new nodes, the tree index is not available, so we check against its parent\n        $check_against = $node;\n        if (!$node->cache_right_index) $check_against = $node->get_parent();\n\n        $user_id = $this->id;\n        $edit_ranges = Cache::call(\"edit_ranges$this->id\", function() use ($user_id) {\n            // Users may edit a node if they have permission to edit that node or one of its parents\n            global $aquarius;\n            return $aquarius->db->mapqueryhash('node_id', '\n                SELECT node.id AS node_id, node.cache_left_index AS left_index, node.cache_right_index AS right_index\n                FROM node\n                JOIN users2nodes ON node.id = users2nodes.nodeId\n                WHERE users2nodes.userId = ?', \n                $user_id\n            );\n        });\n\n        foreach($edit_ranges as $permitted_range) {\n            if ( $permitted_range['left_index'] <= $check_against->cache_left_index\n              && $permitted_range['right_index'] >= $check_against->cache_right_index\n            ) return true;\n        }\n        \n        return false;\n    }\n\n    /** Whether this user may activate or deactivate the given node.\n      * Users must have edit permissions on the node and have activation permission. */\n    function may_activate($node) {\n        // Siteadmins may activate everything\n        if ($this->isSiteadmin()) return true;\n\n        // Ensure user has activation permission\n        if (!$this->activation_permission) return false;\n\n        // Let the user activate if he has edit permission\n        return $this->may_edit($node);\n    }\n\n\n    function may_delete($node) {\n        return ($this->isSiteadmin() || $this->delete_permission)\n            && $this->may_edit($node);\n    }\n\n    function idstr() {\n        return \"$this->name ($id)\";\n    }\n    \n    /** Get last login as DateTime */\n    function last_login() {\n        return DateTime::createFromFormat('Y-m-d H:i:s', $this->last_login, new DateTimeZone(\"UTC\"));\n    }\n}\n"], "fixing_code": ["<?php\n/** Initialization operations for the backend\n  * Ensures a logged-in user and initializes some globals.\n  * @package Aquarius.backend\n*/\n\nLog::backtrace('backend');\n\n/* Use sessions in backend */\n    $aquarius->session_start();\n\n\n/* Process logins & load logged in user */\n    $allpass = $aquarius->conf('admin/allpass');\n    require_once \"db/Users.php\";\n    $login_status = db_Users::authenticate($allpass);\n\n    // Redirect to frontend if user wants to\n    if ($login_status instanceof db_User && isset($_REQUEST['login_frontend'])) {\n        header('Location:'.PROJECT_URL);\n        exit;\n    }\n\n    $user = db_Users::authenticated();\n\n    $request_params = array(\n        'request' => clean_magic($_REQUEST),\n        'server' => $_SERVER,\n        'require_active' => false,\n        'user' => $user\n    );\n    \n    // Determine the preset language for working with content\n    // Actions often override this and have their own lg specifiers\n    $lg_detection = new Language_Detection;\n    $lg_detection->add_detector('request_parameter');\n    $lg_detection->add_detector('backend_lg_user_default_lang', function() use ($user) {\n        // Right after login, we have no language set, but the user has\n        if ($user) return $user->defaultLanguage;\n    });\n    $lg_detection->add_detector('accepted_languages'); // grasping at straws\n    $lg_detection->add_detector('primary'); // Better than nothing\n    \n    $lg = $lg_detection->detect($request_params);\n    Log::debug(\"Using content language \".$lg);\n    \n    // Determine user interface language\n    $admin_lg_detection = new Language_Detection_Admin;\n    $admin_lg_detection->add_detector('user_admin_lang');\n    $admin_lg_detection->add_detector('accepted_languages');\n    $admin_lg_detection->add_detector('use_default');\n\n    $admin_lg = $admin_lg_detection->detect($request_params);\n    Log::debug(\"Using admin language \".$admin_lg);\n    \n\n    $aquarius->execute_hooks('backend_init');\n    \n/* Create base url */\n\n    $url = new Url(false, false);\n\n    // Add language parameter, this one is used everywhere\n    $url->add_param('lg', str($lg));\n\n\n/* Divert to login if user isn't logged in */\n\n    if (!$user) {\n        $smarty = $aquarius->get_smarty_backend_container();\n        $request_uri = Url::of_request();\n        $correct_uri = clone $request_uri; // 'Hopefully correct' would be more to the point\n\n        $admin_domain = $aquarius->conf('admin/domain');\n        if ($admin_domain) $correct_uri->host = $admin_domain;\n\n        // Check we're the frameset root and not an inner frame page\n        if (preg_match('%/$%', $request_uri->path) === 0) {\n            $config_path = $aquarius->conf('admin/path');\n            if (!empty($config_path)) {\n                $correct_uri->path = $config_path;\n            } else {\n                $correct_uri->path = dirname($correct_uri->path).'/';\n            }\n        }\n        \n        // Login status of -1 means failed attempt\n        $login_failed = $login_status === -1;\n        \n        // primitive check that we had a session cookie submitted\n        $cookie_missing = (isset($_GET['returning']) || (bool)$login_status) && empty($_COOKIE);\n        \n        if ($request_uri == $correct_uri) {\n            $smarty->assign(compact('login_failed', 'cookie_missing'));\n            $smarty->assign('session_id', session_id());\n            $smarty->assign('revision', first(explode('-', $aquarius->revision())));\n            $smarty->display('login.tpl');\n        } else {\n            $correct_uri->params = array();\n            $correct_uri->add_param('returning');\n            $smarty->assign('correct_uri', $correct_uri);\n            $smarty->display('login-redirect.tpl');\n        }\n        flush_exit();\n    }\n    \n\n/* Load libraries used in backend */\n    require_once \"lib/db/Users2languages.php\";\n    require_once \"lib/adminaction.php\";\n    require_once \"lib/moduleaction.php\";\n    require_once \"lib/Translation.php\";\n", "<?php\n\n/**************** LOGGING */\n\n// Log messages are written to a log-file and included as HTML comments\n// Available log levels: NEVER | FAIL |  WARN | INFO | MESSAGES | DEBUG | BACKTRACE | ALL\n\n/** What messages to log to file, recommended is INFO */\n$config['log']['level']     = 'INFO';\n\n/** Write log messages to this file, path relative to aquarius dir, must be\n  * writable by webserver. */\n$config['log']['file'] = 'cache/log.txt';\n\n/** Echo log messages to output as HTML comments, recommended NEVER */\n$config['log']['echolevel'] = 'NEVER';\n\n/** Send log messages in HTTP headers, recommended NEVER\n  * This requires Firefox/FirePHP */\n$config['log']['firelevel'] = 'NEVER';\n\n/** Enable/disable PHP messages\n  * Set to true to enable PHP warnings, false to disable them explicitly.\n  * The preset null means that the PHP settings are not changed. */\n$config['log']['php'] = null;\n\n\n\n\n/**************** DB */\n\n/** What DB driver to use\n  *\n  * Preset is 'mysqli' and this should be left alone.\n  * 'mysql' is somewhat tested, others won't work unless you do some serious porting work.\n  */\n$config['db']['driver'] = 'mysqli'; // Change this at your own peril.\n\n/** The DB host to connect to, preset is 'localhost' */\n$config['db']['host'] = 'localhost';\n\n/** The database name, this is best configured in config.local.php */\n$config['db']['name'] = null;\n\n/** The database user to connect with, this is best configured in config.local.php */\n$config['db']['user'] = null;\n\n/** The database password to connect with, this is best configured in config.local.php\n  * Note that this will not be available during run-time to avoid leakage.\n  * Use the constant DB_PASSWORD to retrieve it.\n  */\n$config['db']['pass'] = null; \n\n\n\n/**************** SESSION */\n\n/** Where to save session files\n  *\n  * Specify a filesystem path where session files are stored. If this path is\n  * relative, it will be taken relative to the aquarius cache path. The\n  * preset value is 'session'. If this is set to false, the value preset\n  * by the webserver is not changed, the standard location is '/tmp'.\n  *\n  * On servers with shared hosting, it is insecure to store session data in a\n  * common directory with other sites. Unfortunately, webservers are frequently\n  * configured that way. For this reason Aquarius does not by default use the\n  * session.save_path preset by the webserver.\n  *\n  * See also: PHP's session.save_path directive\n  *\n  */\n$config['session']['save_path'] = 'session';\n\n/** How long session data is preserved before it's cleared (minimum) in seconds\n  *\n  * The preset is 30 minutes. If this value is set to false, the value\n  * configured by the webserver is not changed.\n  *\n  * See also: PHP's session.gc_maxlifetime directive\n  *\n  */\n$config['session']['lifetime'] = '1800';\n\n/** Name of the session cookie, preset is 'aquarius3_session' */\n$config['session']['name'] = 'aquarius3_session';\n\n\n/**************** FRONTEND */\n\n/* Set the standard domain name \n * This will be used in generated URL.\n * \n * Example:\n * $config['frontend']['domain'] = 'www.aquaverde.ch'\n */\n$config['frontend']['domain'] = null;\n\n\n/* Always use session in frontend\n * If this is false (the default, sessions will only be enabled for restricted nodes) */\n$config['frontend']['use_session'] = false;\n\n/* Use different language or base node, based on domain name.\n   Default language, node and redirects may be specified based on domain-name. These parameters can be set:\n    node: A node id or name to use instead of the root node\n    lg:   A language to use instead of using browser detection or the default\n    moved_permanently: an URL to redirect to.\n\n  The 'node' and 'lg' parameters are considered only if they are not specified in the URL. 'moved_permanently' on the other hand is always active.\n\n   Example: Assume we have the two domains 'coolthing.example.com' and 'trucfroid.example.com', the two languages 'en' and 'fr', also the default language is 'en'. Now we configure the following:\n\n    $config['frontend']['domains'] = array(\n            'search.coolthing.example.com' => array('node' => 'search'),\n                   'trucfroid.example.com' => array('lg'   => 'fr'),\n         'recherche.trucfroid.example.com' => array('node' => 'search'),\n                     'oldcool.example.com' => array('moved_permanently' => 'http://coolthing.example.com')\n        );\n\n   What this means is that for 'search.coolthing.example.com' and all subdomains we use the node named 'search' as base node. For all domains ending in 'trucfroid.example.com' we select 'fr' as language, and finally, for 'recherche.trucfroid.example.com' we also use the node named 'search'.\n\n   Note that it was not necessary to specify 'lg'=>'fr' again for 'recherche.trucfroid.example.com', because that was already covered by 'trucfroid.example.com'.\n\n   All requests on domain oldcool.example.com will be answered with a HTTP 301 redirection to location 'http://coolthing.example.com'. */\n$config['frontend']['domains'] = array();\n\n/* Frontend redirects to proper URI if this is enabled. May lead to redirect loops, surprising behaviour and overall confusion. Required to please the holy GOOG. */\n$config['frontend']['uri_correction'] = true;\n\n/* Automagically assign content fields for each item in the smarty {list} block. */\n$config['frontend']['loadcontent'] = false;\n\n/* Automagically escape every variable in templates */\n$config['frontend']['smarty']['auto_escape'] = false;\n\n/* Merge includes into one compiled template\n * In smarty 3.1, you can either have dynamic templates like\n * {include file=$file} or use {block} inheritance. The default is {block}\n * inheritance. If you want dynamic includes set this to false, then use\n * the inline parameter ({include file=include_with_block.tpl inline}) if there\n * are blocks in your includes.\n * */\n$config['frontend']['smarty']['merge_includes'] = true;\n\n/* Enable caching of template output.\n * This is generally a very good idea. */\n$config['frontend']['cache']['templates'] = true;\n\n/* How long to keep cache output, in seconds */\n$config['frontend']['cache']['lifetime'] = 86400; // One day\n\n/* Enable caching of compiled templates.\n * There is no reason to turn this off, really. */\n$config['frontend']['cache']['compiles'] = true;\n\n\n/**************** ADMIN */\n\n/** Optional: Domain to use for backend, clients using another domain will be redirected to this */\n//$config['admin']['domain'] = 'admin.site.example';\n\n/** Path to backend. Optional, standard value is '/admin/'  */\n//$config['admin']['path'] = '/aquarius/';\n\n$config['admin']['user']['edit_permission_tree_depth'] = 2; // How many levels of tree to allow adding edit permission for users (default 2)\n\n// light config\n$config['admin']['menu_links'] = array(\n    array( 'parent' => 'menu_super_links', 'title' => 'Statistics', 'url' => '/stats/'),\n    array( 'parent' => 'menu_super_links', 'title' => 'Aquarius manual', 'url' => 'http://wiki.aquarius3.ch/', 'target' => '_new'),\n    array( 'parent' => 'menu_super_links', 'title' => 'Database admin', 'url' => '/aquarius/dbadmin', 'target' => '_new', 'allow' => 0)\n);\n\n// RTE configuration\n$config['admin']['rte'] = array(\n    'browse_path_img' => 'pictures/richtext',\n    'browse_path_file' => 'download',\n    'plugins' => array(\n        'iLink' => '/aquarius/core/backend/ckeditor/plugins/iLink/plugin.js',\n        'wordcount' => '/aquarius/core/vendor/w8tcha/CKEditor-WordCount-Plugin/wordcount/plugin.js'\n    )\n);\n\n// Add RTE plugin examples\n#$config['admin']['rte']['plugins']['youtube'] = '/js/ckeditor_youtube/plugin.js' // External plugin\n#$config['admin']['rte']['plugins']['iframe'] = true // core plugin\n\n\n/** Allow administrators to manage languages\n  *\n  * Preset is false.\n  */\n$config['admin']['allow_languageadmin'] = false;\n\n/** The preset for the target selection in link fields\n  *\n  * Set this to '_blank' if you prefer the links to open a new window.\n  * Changing this value will only affect newly added links. */\n$config['admin']['link_target'] = '';\n\n\n/** Omit password checking for backend logins.\n  * This is useful during development, use with care! Do not ever enable this\n  * on a publicly accessible system. Best enable DEV mode to get this, change it\n  * in config.local.php if at all.\n  *\n  * Preset is false.\n  */\n$config['admin']['allpass'] = false;\n\n\n/** Standard email address to use as sender address\n  * This is used in the \"Sender:\" header when the system generates mails. The\n  * \"From:\" header will also be set to this address should it not be set\n  * explicitly.\n  * \n  * The \"@host\" part may be omitted, and only the local part (before the \"@\")\n  * specified. In this case the request-hostname will be used, with the\n  * \"www.\" stripped off.\n  */\n$config['email'] = array(\n    'sender' => 'info',\n    'smtp' => false\n);\n\n/*\n// Example SMTP config\n$config['email']['smtp'] = array(\n    'host' => 'smtp.bulkspam.example',\n    'port' => 25,\n    'user' => 'egg@bulkspam.example',\n    'pass' => 'ham',\n    'sender' => 'egg@bulkspam.example' // Force the mail sender to be this address\n);\n\n// Testing config for perl fakesmtpd.pl\n$config['email']['smtp'] = array(\n    'host'     => 'localhost',\n    'port'     => '2525'\n);\n*/\n\n\n/** PDF generator settings.\n  * WARNING: The PDF generator currently allows generating PDF from any node\n  * with any template. This is probably not what you want, so it is disabled as\n  * a precaution. \n  */\n$config['pdfgen']['enabled'] = false;\n$config['pdfgen']['standard_template'] = 'basic.tpl';\n$config['pdfgen']['prefix'] = 'pdf';\n\n\n/** Cache Aquarius loading\n  * The pristine Aquarius stage is cached to a file and Aquarius is initizlized\n  * from this cache. On fast systems the difference is negligible but disk-bound\n  * webservers can profit from this.\n  */\n$config['initcache'] = true;\n\n", "<?php\n/** Override settings\n  * Place a file with the override name in the aquarius dir to enable these\n  * overrides. Example: To enable DEV mode, touch aquarius/DEV.\n  *\n  * If one of the override settings is unsuitable, you can override it again\n  * in config.local.php.\n  */\nif (DEV) {\n    /** Overrides suitable for development */\n    $config['admin']['allpass'] = true;\n    $config['frontend']['domain'] = null;\n    $config['frontend']['domains'] = array();\n    $config['frontend']['cache']['templates'] = false;\n    $config['initcache'] = false;\n    $config['log']['php'] = true;\n}\n\nif (STAGING) {\n    /** Overrides suitable for testing before deployment */\n    $config['frontend']['domain'] = null;\n    $config['frontend']['domains'] = array();\n}\n\nif (DEBUG) {\n    /** Overrides suitable for debugging */\n    $config['log']['echolevel'] = 'DEBUG';\n    $config['log']['php'] = true;\n}\n", "<?php\n/** @package Aquarius */\n\n/** User of the backend interface */\nclass db_Users extends DB_DataObject \n{\n    ###START_AUTOCODE\n    /* the code below is auto generated do not remove the above tag */\n\n    public $__table = 'users';                           // table name\n    public $id;                              // int(11)  not_null primary_key auto_increment group_by\n    public $name;                            // varchar(150)  not_null unique_key\n    public $password;                        // varchar(765)  not_null multiple_key\n    public $password_salt;                   // varchar(765)  \n    public $status;                          // int(11)  not_null group_by\n    public $adminLanguage;                   // char(6)  not_null\n    public $defaultLanguage;                 // char(6)  not_null\n    public $active;                          // tinyint(1)  not_null multiple_key group_by\n    public $activation_permission;           // tinyint(1)  not_null group_by\n    public $delete_permission;               // tinyint(1)  not_null group_by\n    public $copy_permission;                 // tinyint(1)  not_null group_by\n    public $last_login;                      // datetime(19)  \n\n    /* Static get */\n    function staticGet($k,$v=NULL) { return DB_DataObject::staticGet('db_Users',$k,$v); }\n\n    /* the code above is auto generated do not remove the tag below */\n    ###END_AUTOCODE\n\n    const SUPERADMIN = 0;\n    const SITEADMIN  = 1;\n    const USER       = 2;\n\n    static $status_names = array(\n        self::SUPERADMIN => 'superuser',\n        self::SITEADMIN  => 'siteadmin',\n        self::USER       => 'user'\n    );\n\n    /** Verify user credentials and register user in session if successful.\n      * Requires fields 'backend_login', 'username' and 'password' to be set in $_REQUEST\n      *   backend_login: must be set or this method won't try to authenticate\n      *  @param $allpass optional parameter to skip password check\n      *  @return user instance if login is successful, -1 if login failed, false if no login credentials were found.\n      */\n    static function authenticate($allpass=false) {\n        if (isset($_REQUEST['backend_login'])) {\n            $user = DB_DataObject::factory('users');\n            $user->active = true;\n            $user->name = $_REQUEST['username'];\n            $found = $user->find(true);\n\n            if ($found && $allpass) {\n                Log::debug(\"Logging in user '$user->name' without checking password\");\n                $user->login();\n                return true;\n            }\n\n            // Don't look whether that user exists, so we give less timing information\n            // Instead, rely only on having a matching password\n            $proffered_password = $_REQUEST['password'];\n            if (in_array(\n                $user->password,\n                self::password_hashes($proffered_password, $user->password_salt)\n            )) {\n                // Regenerate the session ID, unless it's an IE we're talking to which would use the old session ID to load the frame contents\n                // Remove this guard once we no longer use frames\n                if(!preg_match('/(?i)msie /', $_SERVER['HTTP_USER_AGENT'])) {\n                    session_regenerate_id();\n                }\n                $user->login();\n                \n                return $user;\n            } else {\n                Log::warn(\"Failed login for user name '\".$_REQUEST['username'].\"' from \" . $_SERVER['REMOTE_ADDR'].' user-agent '.$_SERVER['HTTP_USER_AGENT']);\n                return -1;\n            }\n        }\n        return false;\n    }\n\n    /** Update the password and salt\n      * @param $pass the password to set\n      * This function will replace the current 'password_salt' string and \n      * 'password' hash using the strongest hash from password_hashes().\n      */\n    function set_password($pass) {\n        $this->password_salt = uniqid();\n        $this->password = end(self::password_hashes($pass, $this->password_salt));\n    }\n\n    \n    /** Generate list of possible password hashes, strongest last\n      *\n      * @param $pass The password to generate hashes for\n      * @param $salt Salt to use in hashes\n      *\n      * This returns an array with three entries:\n      *   1. MD5 sum of $pass\n      *   2. SHA1 hash of $pass with $salt appended\n      *   3. 100 x Iterated SHA256 HMAC with $pass as initial key and $salt as\n      *      data, iterations use the previous HMAC as key and $salt as data\n      *\n      * If the PHP version does not support SHA256 the third entry is omitted.\n      */\n    static function password_hashes($pass, $salt) {\n        $possible_passwords = array();\n        $possible_passwords []= md5($pass);        // Legacy\n        $possible_passwords []= sha1($pass.$salt); // Fallback\n        \n        // Iterated sha256 HMAC will take a while to search. We'll add\n        // sha512x1000 in two years or so.\n        if (in_array('sha256', hash_algos())) {\n            $hmac = $pass;\n            for ($n=0; $n<100; $n++) $hmac = hash_hmac('sha256', $hmac, $salt);\n            $possible_passwords []= $hmac;\n        }\n        return $possible_passwords;\n    }\n\n\n    \n    /** Loads user instance from session if the user authenticated himself already */\n    static function authenticated() {\n        global $aquarius;\n        $user_id = $aquarius->session_get('user');\n        if ($user_id) {\n            static $cache_user;\n            if (!$cache_user || $cache_user->id != $user_id) {\n                $user = new self();\n                $user->id = $user_id;\n                if ($user->find(true)) {\n                    $cache_user = $user;\n                } else {\n                    self::logout();\n                    throw new Exception(\"Invalid user id '$user_id' in session \".session_id());\n                }\n            }\n            return $cache_user;\n        }\n        return false;\n    }\n\n    /** Mark this user as logged-in for this session */\n    function login() {\n        global $aquarius;\n        $aquarius->db->query(\"UPDATE users SET last_login=UTC_TIMESTAMP() WHERE id=?\", array($this->id));\n        $aquarius->session_set('user', $this->id);\n        Log::info(\"Login of user '\".$this->name.\"' (\".$this->id.\") from \" . $_SERVER['REMOTE_ADDR'].' user-agent '.$_SERVER['HTTP_USER_AGENT']);\n    }\n\n    /** Clear the user id from session */\n    static function logout() {\n        global $aquarius;\n        $user_id = $aquarius->session_get('user') ;\n        $aquarius->session_set('user', NULL) ;\n        $user = new self();\n        $user->id = $user_id;\n        if ($user->find(true)) {\n            Log::info(\"Logout of user '\".$user->name.\"' (\".$user->id.\") from ip: \".$_SERVER['REMOTE_ADDR']);\n        } else {\n            Log::warn(\"Logout for invalid user id '$user_id' from ip: \".$_SERVER['REMOTE_ADDR']);\n        }\n    }\n\n\n\t/** return an array with all existing users */\n\tstatic function getUsers() {\n\t\t$user_prototype = DB_DataObject::factory('users');\n\t\t$user_prototype->find();\n\t\t\n\t\t$users = array();\n\t\t\t\t\t\n\t\twhile ( $user_prototype->fetch() )\n\t\t\t$users[] = clone($user_prototype);\n\t\t\n\t\t\t\n\t\treturn $users;\n\t\t\n\t}\n\n    /** List of nodes to which this user has access permissions */\n\tfunction getNodes() {\n        if (!isset($this->cached_nodes)) {\n            $proto =& DB_DataObject::factory('users2nodes');\n            $proto->userId = $this->id;\n            $proto->find();\n            $this->cached_nodes = array();\n            while ($proto->fetch())\n                $this->cached_nodes[$proto->nodeId] = clone $proto;\n        }\n        return $this->cached_nodes;\n\t}\n\t\n    /** List of module-ids to which this user has access permissions */\n    function getAccessableModuleIds() {\n        if (!isset($this->accessible_moduleids)) {\n            $u2m =& DB_DataObject::factory('users2modules');\n            $u2m->userId = $this->id;\n            $u2m->find();\n            $result = array();\n            while($u2m->fetch()) {\n                $result[] = $u2m->moduleId;\n            }\n            $this->accessible_moduleids = $result;\n        }\n        return $this->accessible_moduleids;\n    }\n    \n    /** List of modules to which this user has access permissions */\n    function getAccessableModules() {\n         \n        if (!isset($this->accessible_modules)) {\n            if($this->isSuperadmin()) {\n                $this->accessible_modules=db_Modules::getModules();\n            } else {\n                $u2m =& DB_DataObject::factory('users2modules');\n                $u2m->userId = $this->id;\n                $u2m->find();\n                $result = array();\n                while($u2m->fetch()) {\n                    $modproto = DB_DataObject::factory('modules');\n                    $modproto->id=$u2m->moduleId;\n                    $modproto->find(true);\n                    $result[] = clone($modproto);\n                }\n                $this->accessible_modules = $result;\n            }\n        }\n        return $this->accessible_modules;\n    }\n    \n\tfunction getAccessableLanguages() {\n\t    if (!isset($this->accessible_languages)) {\n            $u2l =& DB_DataObject::factory('users2languages');\n            $u2l->userId = $this->id;\n            $u2l->find();\n            $result = array();\n            while ( $u2l->fetch() ) {\n                $result[] = $u2l->lg;\n            }\n            $this->accessible_languages = $result; // Caching\n        }\n        return  $this->accessible_languages; // Cached\n\t}\n\t\n\tfunction getPrefsArray() {\n\t\t$prefs\t=& DB_DataObject::factory('users2modules');\n\t\t$prefs->userId = $this->id;\n\t\t$prefs->find();\n\t\t\n\t\t$result\t= array();\n\t\twhile ( $prefs->fetch() )\n\t\t\t$result[$prefs->moduleId] = true;\n\t\t\n\t\treturn $result;\n\t}\n\t\n\tfunction isSuperadmin() {\n\t\treturn $this->status == self::SUPERADMIN;\n\t}\n\t\n\tfunction isSiteadmin() {\n\t\treturn $this->status <= self::SITEADMIN;\n\t}\n\t\n\tfunction isUser() {\n\t\treturn $this->status <= self::USER;\n\t}\n\n    /** Remove permission settings as well */\n    function delete() {\n        $users2node = DB_DataObject::factory('users2nodes');\n        $users2node->userId = $this->id;\n        $users2node->delete();\n\n        parent::delete();\n    }\n\n    /** List of status names visible to this user */\n    function visible_status_names() {\n        return array_kfilter(\n            self::$status_names,\n            create_function('$key', 'return $key >= '.$this->status.';')\n        );\n    }\n\n    /** List of users visible from this user */\n    function visible_users() {\n        $user_prototype = DB_DataObject::factory('users');\n        $user_prototype->whereAdd('status >= '.$this->status);\n        $user_prototype->find();\n        $users = array();\n        while ($user_prototype->fetch()) $users[] = clone($user_prototype);\n        return $users;\n    }\n\n    /** Whether the user has permission to edit the given node */\n    function may_edit($node) {\n        // Siteadmins may edit everything\n        if ($this->isSiteadmin()) return true;\n\n        // Check whether node is in a permitted edit range\n        // In case of new nodes, the tree index is not available, so we check against its parent\n        $check_against = $node;\n        if (!$node->cache_right_index) $check_against = $node->get_parent();\n\n        $user_id = $this->id;\n        $edit_ranges = Cache::call(\"edit_ranges$this->id\", function() use ($user_id) {\n            // Users may edit a node if they have permission to edit that node or one of its parents\n            global $aquarius;\n            return $aquarius->db->mapqueryhash('node_id', '\n                SELECT node.id AS node_id, node.cache_left_index AS left_index, node.cache_right_index AS right_index\n                FROM node\n                JOIN users2nodes ON node.id = users2nodes.nodeId\n                WHERE users2nodes.userId = ?', \n                $user_id\n            );\n        });\n\n        foreach($edit_ranges as $permitted_range) {\n            if ( $permitted_range['left_index'] <= $check_against->cache_left_index\n              && $permitted_range['right_index'] >= $check_against->cache_right_index\n            ) return true;\n        }\n        \n        return false;\n    }\n\n    /** Whether this user may activate or deactivate the given node.\n      * Users must have edit permissions on the node and have activation permission. */\n    function may_activate($node) {\n        // Siteadmins may activate everything\n        if ($this->isSiteadmin()) return true;\n\n        // Ensure user has activation permission\n        if (!$this->activation_permission) return false;\n\n        // Let the user activate if he has edit permission\n        return $this->may_edit($node);\n    }\n\n\n    function may_delete($node) {\n        return ($this->isSiteadmin() || $this->delete_permission)\n            && $this->may_edit($node);\n    }\n\n    function idstr() {\n        return \"$this->name ($id)\";\n    }\n    \n    /** Get last login as DateTime */\n    function last_login() {\n        return DateTime::createFromFormat('Y-m-d H:i:s', $this->last_login, new DateTimeZone(\"UTC\"));\n    }\n}\n"], "filenames": ["backend/backend.php", "config.base.php", "config.override.php", "lib/db/Users.php"], "buggy_code_start_loc": [13, 202, 10, 42], "buggy_code_end_loc": [17, 202, 11, 51], "fixing_code_start_loc": [14, 203, 10, 43], "fixing_code_end_loc": [18, 213, 12, 58], "type": "CWE-522", "message": "Aquaverde GmbH Aquarius CMS prior to version 4.1.1 is affected by: Incorrect Access Control. The impact is: The access to the log file is not restricted. It contains sensitive information like passwords etc. The component is: log file. The attack vector is: open the file.", "other": {"cve": {"id": "CVE-2019-1010308", "sourceIdentifier": "josh@bress.net", "published": "2019-07-15T18:15:12.070", "lastModified": "2020-08-24T17:37:01.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Aquaverde GmbH Aquarius CMS prior to version 4.1.1 is affected by: Incorrect Access Control. The impact is: The access to the log file is not restricted. It contains sensitive information like passwords etc. The component is: log file. The attack vector is: open the file."}, {"lang": "es", "value": "Aquarius CMS anterior a versi\u00f3n 4.1.1 de Aquaverde GmbH, est\u00e1 afectado por: Control de acceso inapropiado. El impacto es: El acceso al archivo de registro no est\u00e1 restringido. Contiene informaci\u00f3n confidencial como contrase\u00f1as, etc. El componente es: archivo de registro. El vector de ataque es: abrir el archivo."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-522"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:aquaverde:aquarius_cms:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.1.1", "matchCriteriaId": "1B9D687F-835E-4810-A241-803D2B0AC39A"}]}]}], "references": [{"url": "https://github.com/aquaverde/aquarius-core", "source": "josh@bress.net", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/aquaverde/aquarius-core/commit/e1af89aa9df07ea265d879518ede9eb98aa494e0", "source": "josh@bress.net", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/aquaverde/aquarius-core/commit/e1af89aa9df07ea265d879518ede9eb98aa494e0"}}