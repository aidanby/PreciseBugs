{"buggy_code": ["package validator\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"strings\"\n\n\t\"github.com/answerdev/answer/internal/base/reason\"\n\t\"github.com/answerdev/answer/internal/base/translator\"\n\t\"github.com/go-playground/locales\"\n\tgerman \"github.com/go-playground/locales/de\"\n\tenglish \"github.com/go-playground/locales/en\"\n\tspanish \"github.com/go-playground/locales/es\"\n\tfrench \"github.com/go-playground/locales/fr\"\n\titalian \"github.com/go-playground/locales/it\"\n\tjapanese \"github.com/go-playground/locales/ja\"\n\tkorean \"github.com/go-playground/locales/ko\"\n\tportuguese \"github.com/go-playground/locales/pt\"\n\trussian \"github.com/go-playground/locales/ru\"\n\tvietnamese \"github.com/go-playground/locales/vi\"\n\tchinese \"github.com/go-playground/locales/zh\"\n\tchineseTraditional \"github.com/go-playground/locales/zh_Hant_TW\"\n\tut \"github.com/go-playground/universal-translator\"\n\t\"github.com/go-playground/validator/v10\"\n\t\"github.com/go-playground/validator/v10/translations/en\"\n\t\"github.com/go-playground/validator/v10/translations/es\"\n\t\"github.com/go-playground/validator/v10/translations/fr\"\n\t\"github.com/go-playground/validator/v10/translations/it\"\n\t\"github.com/go-playground/validator/v10/translations/ja\"\n\t\"github.com/go-playground/validator/v10/translations/pt\"\n\t\"github.com/go-playground/validator/v10/translations/ru\"\n\t\"github.com/go-playground/validator/v10/translations/vi\"\n\t\"github.com/go-playground/validator/v10/translations/zh\"\n\t\"github.com/go-playground/validator/v10/translations/zh_tw\"\n\tmyErrors \"github.com/segmentfault/pacman/errors\"\n\t\"github.com/segmentfault/pacman/i18n\"\n\t\"github.com/segmentfault/pacman/log\"\n)\n\ntype TranslatorLocal struct {\n\tLa           i18n.Language\n\tLo           locales.Translator\n\tRegisterFunc func(v *validator.Validate, trans ut.Translator) (err error)\n}\n\nvar (\n\tallLanguageTranslators = []*TranslatorLocal{\n\t\t{La: i18n.LanguageChinese, Lo: chinese.New(), RegisterFunc: zh.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageChineseTraditional, Lo: chineseTraditional.New(), RegisterFunc: zh_tw.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageEnglish, Lo: english.New(), RegisterFunc: en.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageGerman, Lo: german.New(), RegisterFunc: nil},\n\t\t{La: i18n.LanguageSpanish, Lo: spanish.New(), RegisterFunc: es.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageFrench, Lo: french.New(), RegisterFunc: fr.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageItalian, Lo: italian.New(), RegisterFunc: it.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageJapanese, Lo: japanese.New(), RegisterFunc: ja.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageKorean, Lo: korean.New(), RegisterFunc: nil},\n\t\t{La: i18n.LanguagePortuguese, Lo: portuguese.New(), RegisterFunc: pt.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageRussian, Lo: russian.New(), RegisterFunc: ru.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageVietnamese, Lo: vietnamese.New(), RegisterFunc: vi.RegisterDefaultTranslations},\n\t}\n)\n\n// MyValidator my validator\ntype MyValidator struct {\n\tValidate *validator.Validate\n\tTran     ut.Translator\n\tLang     i18n.Language\n}\n\n// FormErrorField indicates the current form error content. which field is error and error message.\ntype FormErrorField struct {\n\tErrorField string `json:\"error_field\"`\n\tErrorMsg   string `json:\"error_msg\"`\n}\n\n// GlobalValidatorMapping is a mapping from validator to translator used\nvar GlobalValidatorMapping = make(map[i18n.Language]*MyValidator, 0)\n\nfunc init() {\n\tfor _, t := range allLanguageTranslators {\n\t\ttran, val := getTran(t.Lo), createDefaultValidator(t.La)\n\t\tif t.RegisterFunc != nil {\n\t\t\tif err := t.RegisterFunc(val, tran); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\t\tGlobalValidatorMapping[t.La] = &MyValidator{Validate: val, Tran: tran, Lang: t.La}\n\t}\n}\n\nfunc getTran(lo locales.Translator) ut.Translator {\n\ttran, ok := ut.New(lo, lo).GetTranslator(lo.Locale())\n\tif !ok {\n\t\tpanic(fmt.Sprintf(\"not found translator %s\", lo.Locale()))\n\t}\n\treturn tran\n}\n\nfunc NotBlank(fl validator.FieldLevel) (res bool) {\n\tfield := fl.Field()\n\tswitch field.Kind() {\n\tcase reflect.String:\n\t\ttrimSpace := strings.TrimSpace(field.String())\n\t\tres := len(trimSpace) > 0\n\t\tif !res {\n\t\t\tfield.SetString(trimSpace)\n\t\t}\n\t\treturn true\n\tcase reflect.Chan, reflect.Map, reflect.Slice, reflect.Array:\n\t\treturn field.Len() > 0\n\tcase reflect.Ptr, reflect.Interface, reflect.Func:\n\t\treturn !field.IsNil()\n\tdefault:\n\t\treturn field.IsValid() && field.Interface() != reflect.Zero(field.Type()).Interface()\n\t}\n}\n\nfunc createDefaultValidator(la i18n.Language) *validator.Validate {\n\tvalidate := validator.New()\n\t// _ = validate.RegisterValidation(\"notblank\", validators.NotBlank)\n\t_ = validate.RegisterValidation(\"notblank\", NotBlank)\n\tvalidate.RegisterTagNameFunc(func(fld reflect.StructField) (res string) {\n\t\tdefer func() {\n\t\t\tif len(res) > 0 {\n\t\t\t\tres = translator.Tr(la, res)\n\t\t\t}\n\t\t}()\n\t\tif jsonTag := fld.Tag.Get(\"json\"); len(jsonTag) > 0 {\n\t\t\tif jsonTag == \"-\" {\n\t\t\t\treturn \"\"\n\t\t\t}\n\t\t\treturn jsonTag\n\t\t}\n\t\tif formTag := fld.Tag.Get(\"form\"); len(formTag) > 0 {\n\t\t\treturn formTag\n\t\t}\n\t\treturn fld.Name\n\t})\n\treturn validate\n}\n\nfunc GetValidatorByLang(lang i18n.Language) *MyValidator {\n\tif GlobalValidatorMapping[lang] != nil {\n\t\treturn GlobalValidatorMapping[lang]\n\t}\n\treturn GlobalValidatorMapping[i18n.DefaultLanguage]\n}\n\n// Check /\nfunc (m *MyValidator) Check(value interface{}) (errFields []*FormErrorField, err error) {\n\terr = m.Validate.Struct(value)\n\tif err != nil {\n\t\tvar valErrors validator.ValidationErrors\n\t\tif !errors.As(err, &valErrors) {\n\t\t\tlog.Error(err)\n\t\t\treturn nil, errors.New(\"validate check exception\")\n\t\t}\n\n\t\tfor _, fieldError := range valErrors {\n\t\t\terrField := &FormErrorField{\n\t\t\t\tErrorField: fieldError.Field(),\n\t\t\t\tErrorMsg:   fieldError.Translate(m.Tran),\n\t\t\t}\n\n\t\t\t// get original tag name from value for set err field key.\n\t\t\tstructNamespace := fieldError.StructNamespace()\n\t\t\t_, fieldName, found := strings.Cut(structNamespace, \".\")\n\t\t\tif found {\n\t\t\t\toriginalTag := getObjectTagByFieldName(value, fieldName)\n\t\t\t\tif len(originalTag) > 0 {\n\t\t\t\t\terrField.ErrorField = originalTag\n\t\t\t\t}\n\t\t\t}\n\t\t\terrFields = append(errFields, errField)\n\t\t}\n\t\tif len(errFields) > 0 {\n\t\t\terrMsg := \"\"\n\t\t\tif len(errFields) == 1 {\n\t\t\t\terrMsg = errFields[0].ErrorMsg\n\t\t\t}\n\t\t\treturn errFields, myErrors.BadRequest(reason.RequestFormatError).WithMsg(errMsg)\n\t\t}\n\t}\n\n\tif v, ok := value.(Checker); ok {\n\t\terrFields, err = v.Check()\n\t\tif err == nil {\n\t\t\treturn nil, nil\n\t\t}\n\t\tfor _, errField := range errFields {\n\t\t\terrField.ErrorMsg = translator.Tr(m.Lang, errField.ErrorMsg)\n\t\t}\n\t\treturn errFields, err\n\t}\n\treturn nil, nil\n}\n\n// Checker .\ntype Checker interface {\n\tCheck() (errField []*FormErrorField, err error)\n}\n\nfunc getObjectTagByFieldName(obj interface{}, fieldName string) (tag string) {\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\tlog.Error(err)\n\t\t}\n\t}()\n\n\tobjT := reflect.TypeOf(obj)\n\tobjT = objT.Elem()\n\n\tstructField, exists := objT.FieldByName(fieldName)\n\tif !exists {\n\t\treturn \"\"\n\t}\n\ttag = structField.Tag.Get(\"json\")\n\tif len(tag) == 0 {\n\t\treturn structField.Tag.Get(\"form\")\n\t}\n\treturn tag\n}\n", "package controller_admin\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/answerdev/answer/internal/base/handler\"\n\t\"github.com/answerdev/answer/internal/base/middleware\"\n\t\"github.com/answerdev/answer/internal/schema\"\n\t\"github.com/answerdev/answer/internal/service/siteinfo\"\n\t\"github.com/gin-gonic/gin\"\n)\n\n// SiteInfoController site info controller\ntype SiteInfoController struct {\n\tsiteInfoService *siteinfo.SiteInfoService\n}\n\n// NewSiteInfoController new site info controller\nfunc NewSiteInfoController(siteInfoService *siteinfo.SiteInfoService) *SiteInfoController {\n\treturn &SiteInfoController{\n\t\tsiteInfoService: siteInfoService,\n\t}\n}\n\n// GetGeneral get site general information\n// @Summary get site general information\n// @Description get site general information\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteGeneralResp}\n// @Router /answer/admin/api/siteinfo/general [get]\nfunc (sc *SiteInfoController) GetGeneral(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteGeneral(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetInterface get site interface\n// @Summary get site interface\n// @Description get site interface\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteInterfaceResp}\n// @Router /answer/admin/api/siteinfo/interface [get]\nfunc (sc *SiteInfoController) GetInterface(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteInterface(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteBranding get site interface\n// @Summary get site interface\n// @Description get site interface\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteBrandingResp}\n// @Router /answer/admin/api/siteinfo/branding [get]\nfunc (sc *SiteInfoController) GetSiteBranding(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteBranding(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteWrite get site interface\n// @Summary get site interface\n// @Description get site interface\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteWriteResp}\n// @Router /answer/admin/api/siteinfo/write [get]\nfunc (sc *SiteInfoController) GetSiteWrite(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteWrite(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteLegal Set the legal information for the site\n// @Summary Set the legal information for the site\n// @Description Set the legal information for the site\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteLegalResp}\n// @Router /answer/admin/api/siteinfo/legal [get]\nfunc (sc *SiteInfoController) GetSiteLegal(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteLegal(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSeo get site seo information\n// @Summary get site seo information\n// @Description get site seo information\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteSeoResp}\n// @Router /answer/admin/api/siteinfo/seo [get]\nfunc (sc *SiteInfoController) GetSeo(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSeo(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteLogin get site info login config\n// @Summary get site info login config\n// @Description get site info login config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteLoginResp}\n// @Router /answer/admin/api/siteinfo/login [get]\nfunc (sc *SiteInfoController) GetSiteLogin(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteLogin(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteCustomCssHTML get site info custom html css config\n// @Summary get site info custom html css config\n// @Description get site info custom html css config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteCustomCssHTMLResp}\n// @Router /answer/admin/api/siteinfo/custom-css-html [get]\nfunc (sc *SiteInfoController) GetSiteCustomCssHTML(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteCustomCssHTML(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteTheme get site info theme config\n// @Summary get site info theme config\n// @Description get site info theme config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteThemeResp}\n// @Router /answer/admin/api/siteinfo/theme [get]\nfunc (sc *SiteInfoController) GetSiteTheme(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteTheme(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetRobots get site robots information\n// @Summary get site robots information\n// @Description get site robots information\n// @Tags site\n// @Produce json\n// @Success 200 {string} txt \"\"\n// @Router /robots.txt [get]\nfunc (sc *SiteInfoController) GetRobots(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSeo(ctx)\n\tif err != nil {\n\t\tctx.String(http.StatusOK, \"\")\n\t\treturn\n\t}\n\tctx.String(http.StatusOK, resp.Robots)\n}\n\n// GetRobots get site robots information\n// @Summary get site robots information\n// @Description get site robots information\n// @Tags site\n// @Produce json\n// @Success 200 {string} txt \"\"\n// @Router /custom.css [get]\nfunc (sc *SiteInfoController) GetCss(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteCustomCssHTML(ctx)\n\tif err != nil {\n\t\tctx.String(http.StatusOK, \"\")\n\t\treturn\n\t}\n\tctx.Header(\"content-type\", \"text/css;charset=utf-8\")\n\tctx.String(http.StatusOK, resp.CustomCss)\n}\n\n// UpdateSeo update site seo information\n// @Summary update site seo information\n// @Description update site seo information\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteSeoReq true \"seo\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/seo [put]\nfunc (sc *SiteInfoController) UpdateSeo(ctx *gin.Context) {\n\treq := schema.SiteSeoReq{}\n\tif handler.BindAndCheck(ctx, &req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSeo(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateGeneral update site general information\n// @Summary update site general information\n// @Description update site general information\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteGeneralReq true \"general\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/general [put]\nfunc (sc *SiteInfoController) UpdateGeneral(ctx *gin.Context) {\n\treq := schema.SiteGeneralReq{}\n\tif handler.BindAndCheck(ctx, &req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteGeneral(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateInterface update site interface\n// @Summary update site info interface\n// @Description update site info interface\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteInterfaceReq true \"general\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/interface [put]\nfunc (sc *SiteInfoController) UpdateInterface(ctx *gin.Context) {\n\treq := schema.SiteInterfaceReq{}\n\tif handler.BindAndCheck(ctx, &req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteInterface(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateBranding update site branding\n// @Summary update site info branding\n// @Description update site info branding\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteBrandingReq true \"branding info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/branding [put]\nfunc (sc *SiteInfoController) UpdateBranding(ctx *gin.Context) {\n\treq := &schema.SiteBrandingReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteBranding(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateSiteWrite update site write info\n// @Summary update site write info\n// @Description update site write info\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteWriteReq true \"write info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/write [put]\nfunc (sc *SiteInfoController) UpdateSiteWrite(ctx *gin.Context) {\n\treq := &schema.SiteWriteReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\treq.UserID = middleware.GetLoginUserIDFromContext(ctx)\n\n\tresp, err := sc.siteInfoService.SaveSiteWrite(ctx, req)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// UpdateSiteLegal update site legal info\n// @Summary update site legal info\n// @Description update site legal info\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteLegalReq true \"write info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/legal [put]\nfunc (sc *SiteInfoController) UpdateSiteLegal(ctx *gin.Context) {\n\treq := &schema.SiteLegalReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteLegal(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateSiteLogin update site login\n// @Summary update site login\n// @Description update site login\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteLoginReq true \"login info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/login [put]\nfunc (sc *SiteInfoController) UpdateSiteLogin(ctx *gin.Context) {\n\treq := &schema.SiteLoginReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteLogin(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateSiteCustomCssHTML update site custom css html config\n// @Summary update site custom css html config\n// @Description update site custom css html config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteCustomCssHTMLReq true \"login info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/custom-css-html [put]\nfunc (sc *SiteInfoController) UpdateSiteCustomCssHTML(ctx *gin.Context) {\n\treq := &schema.SiteCustomCssHTMLReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteCustomCssHTML(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// SaveSiteTheme update site custom css html config\n// @Summary update site custom css html config\n// @Description update site custom css html config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteThemeReq true \"login info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/theme [put]\nfunc (sc *SiteInfoController) SaveSiteTheme(ctx *gin.Context) {\n\treq := &schema.SiteThemeReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteTheme(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// GetSMTPConfig get smtp config\n// @Summary GetSMTPConfig get smtp config\n// @Description GetSMTPConfig get smtp config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.GetSMTPConfigResp}\n// @Router /answer/admin/api/setting/smtp [get]\nfunc (sc *SiteInfoController) GetSMTPConfig(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSMTPConfig(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// UpdateSMTPConfig update smtp config\n// @Summary update smtp config\n// @Description update smtp config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.UpdateSMTPConfigReq true \"smtp config\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/setting/smtp [put]\nfunc (sc *SiteInfoController) UpdateSMTPConfig(ctx *gin.Context) {\n\treq := &schema.UpdateSMTPConfigReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.UpdateSMTPConfig(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n", "package schema\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/mail\"\n\t\"net/url\"\n\n\t\"github.com/answerdev/answer/internal/base/handler\"\n\t\"github.com/answerdev/answer/internal/base/reason\"\n\t\"github.com/answerdev/answer/internal/base/translator\"\n\t\"github.com/answerdev/answer/internal/base/validator\"\n\t\"github.com/segmentfault/pacman/errors\"\n)\n\nconst PermaLinkQuestionIDAndTitle = 1\nconst PermaLinkQuestionID = 2\n\n// SiteGeneralReq site general request\ntype SiteGeneralReq struct {\n\tName             string `validate:\"required,gt=1,lte=128\" form:\"name\" json:\"name\"`\n\tShortDescription string `validate:\"omitempty,gt=3,lte=255\" form:\"short_description\" json:\"short_description\"`\n\tDescription      string `validate:\"omitempty,gt=3,lte=2000\" form:\"description\" json:\"description\"`\n\tSiteUrl          string `validate:\"required,gt=1,lte=512,url\" form:\"site_url\" json:\"site_url\"`\n\tContactEmail     string `validate:\"required,gt=1,lte=512,email\" form:\"contact_email\" json:\"contact_email\"`\n}\n\ntype SiteSeoReq struct {\n\tPermaLink int    `validate:\"required,lte=3,gte=0\" form:\"permalink\" json:\"permalink\"`\n\tRobots    string `validate:\"required\" form:\"robots\" json:\"robots\"`\n}\n\nfunc (r *SiteGeneralReq) FormatSiteUrl() {\n\tparsedUrl, err := url.Parse(r.SiteUrl)\n\tif err != nil {\n\t\treturn\n\t}\n\tr.SiteUrl = fmt.Sprintf(\"%s://%s\", parsedUrl.Scheme, parsedUrl.Host)\n}\n\n// SiteInterfaceReq site interface request\ntype SiteInterfaceReq struct {\n\tLanguage string `validate:\"required,gt=1,lte=128\" form:\"language\" json:\"language\"`\n\tTimeZone string `validate:\"required,gt=1,lte=128\" form:\"time_zone\" json:\"time_zone\"`\n}\n\n// SiteBrandingReq site branding request\ntype SiteBrandingReq struct {\n\tLogo       string `validate:\"omitempty,gt=0,lte=512\" form:\"logo\" json:\"logo\"`\n\tMobileLogo string `validate:\"omitempty,gt=0,lte=512\" form:\"mobile_logo\" json:\"mobile_logo\"`\n\tSquareIcon string `validate:\"omitempty,gt=0,lte=512\" form:\"square_icon\" json:\"square_icon\"`\n\tFavicon    string `validate:\"omitempty,gt=0,lte=512\" form:\"favicon\" json:\"favicon\"`\n}\n\n// SiteWriteReq site write request\ntype SiteWriteReq struct {\n\tRequiredTag   bool     `validate:\"omitempty\" form:\"required_tag\" json:\"required_tag\"`\n\tRecommendTags []string `validate:\"omitempty\" form:\"recommend_tags\" json:\"recommend_tags\"`\n\tReservedTags  []string `validate:\"omitempty\" form:\"reserved_tags\" json:\"reserved_tags\"`\n\tUserID        string   `json:\"-\"`\n}\n\n// SiteLegalReq site branding request\ntype SiteLegalReq struct {\n\tTermsOfServiceOriginalText string `json:\"terms_of_service_original_text\"`\n\tTermsOfServiceParsedText   string `json:\"terms_of_service_parsed_text\"`\n\tPrivacyPolicyOriginalText  string `json:\"privacy_policy_original_text\"`\n\tPrivacyPolicyParsedText    string `json:\"privacy_policy_parsed_text\"`\n}\n\n// GetSiteLegalInfoReq site site legal request\ntype GetSiteLegalInfoReq struct {\n\tInfoType string `validate:\"required,oneof=tos privacy\" form:\"info_type\"`\n}\n\nfunc (r *GetSiteLegalInfoReq) IsTOS() bool {\n\treturn r.InfoType == \"tos\"\n}\n\nfunc (r *GetSiteLegalInfoReq) IsPrivacy() bool {\n\treturn r.InfoType == \"privacy\"\n}\n\n// GetSiteLegalInfoResp get site legal info response\ntype GetSiteLegalInfoResp struct {\n\tTermsOfServiceOriginalText string `json:\"terms_of_service_original_text,omitempty\"`\n\tTermsOfServiceParsedText   string `json:\"terms_of_service_parsed_text,omitempty\"`\n\tPrivacyPolicyOriginalText  string `json:\"privacy_policy_original_text,omitempty\"`\n\tPrivacyPolicyParsedText    string `json:\"privacy_policy_parsed_text,omitempty\"`\n}\n\n// SiteLoginReq site login request\ntype SiteLoginReq struct {\n\tAllowNewRegistrations bool `json:\"allow_new_registrations\"`\n\tLoginRequired         bool `json:\"login_required\"`\n}\n\n// SiteCustomCssHTMLReq site custom css html\ntype SiteCustomCssHTMLReq struct {\n\tCustomHead   string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_head\"`\n\tCustomCss    string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_css\"`\n\tCustomHeader string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_header\"`\n\tCustomFooter string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_footer\"`\n}\n\n// SiteThemeReq site theme config\ntype SiteThemeReq struct {\n\tTheme       string                 `validate:\"required,gt=0,lte=255\" json:\"theme\"`\n\tThemeConfig map[string]interface{} `validate:\"omitempty\" json:\"theme_config\"`\n}\n\n// SiteGeneralResp site general response\ntype SiteGeneralResp SiteGeneralReq\n\n// SiteInterfaceResp site interface response\ntype SiteInterfaceResp SiteInterfaceReq\n\n// SiteBrandingResp site branding response\ntype SiteBrandingResp SiteBrandingReq\n\n// SiteLoginResp site login response\ntype SiteLoginResp SiteLoginReq\n\n// SiteCustomCssHTMLResp site custom css html response\ntype SiteCustomCssHTMLResp SiteCustomCssHTMLReq\n\n// SiteThemeResp site theme response\ntype SiteThemeResp struct {\n\tThemeOptions []*ThemeOption         `json:\"theme_options\"`\n\tTheme        string                 `json:\"theme\"`\n\tThemeConfig  map[string]interface{} `json:\"theme_config\"`\n}\n\nfunc (s *SiteThemeResp) TrTheme(ctx context.Context) {\n\tla := handler.GetLangByCtx(ctx)\n\tfor _, option := range s.ThemeOptions {\n\t\ttr := translator.Tr(la, option.Value)\n\t\t// if tr is equal the option value means not found translation, so use the original label\n\t\tif tr != option.Value {\n\t\t\toption.Label = tr\n\t\t}\n\t}\n}\n\n// ThemeOption get label option\ntype ThemeOption struct {\n\tLabel string `json:\"label\"`\n\tValue string `json:\"value\"`\n}\n\n// SiteWriteResp site write response\ntype SiteWriteResp SiteWriteReq\n\n// SiteLegalResp site write response\ntype SiteLegalResp SiteLegalReq\n\n// SiteSeoResp site write response\ntype SiteSeoResp SiteSeoReq\n\n// SiteInfoResp get site info response\ntype SiteInfoResp struct {\n\tGeneral       *SiteGeneralResp       `json:\"general\"`\n\tInterface     *SiteInterfaceResp     `json:\"interface\"`\n\tBranding      *SiteBrandingResp      `json:\"branding\"`\n\tLogin         *SiteLoginResp         `json:\"login\"`\n\tTheme         *SiteThemeResp         `json:\"theme\"`\n\tCustomCssHtml *SiteCustomCssHTMLResp `json:\"custom_css_html\"`\n\tSiteSeo       *SiteSeoReq            `json:\"site_seo\"`\n}\ntype TemplateSiteInfoResp struct {\n\tGeneral       *SiteGeneralResp       `json:\"general\"`\n\tInterface     *SiteInterfaceResp     `json:\"interface\"`\n\tBranding      *SiteBrandingResp      `json:\"branding\"`\n\tSiteSeo       *SiteSeoReq            `json:\"site_seo\"`\n\tCustomCssHtml *SiteCustomCssHTMLResp `json:\"custom_css_html\"`\n\tTitle         string\n\tYear          string\n\tCanonical     string\n\tJsonLD        string\n\tKeywords      string\n\tDescription   string\n}\n\n// UpdateSMTPConfigReq get smtp config request\ntype UpdateSMTPConfigReq struct {\n\tFromEmail          string `validate:\"omitempty,gt=0,lte=256\" json:\"from_email\"`\n\tFromName           string `validate:\"omitempty,gt=0,lte=256\" json:\"from_name\"`\n\tSMTPHost           string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_host\"`\n\tSMTPPort           int    `validate:\"omitempty,min=1,max=65535\" json:\"smtp_port\"`\n\tEncryption         string `validate:\"omitempty,oneof=SSL\" json:\"encryption\"` // \"\" SSL\n\tSMTPUsername       string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_username\"`\n\tSMTPPassword       string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_password\"`\n\tSMTPAuthentication bool   `validate:\"omitempty\" json:\"smtp_authentication\"`\n\tTestEmailRecipient string `validate:\"omitempty,email\" json:\"test_email_recipient\"`\n}\n\nfunc (r *UpdateSMTPConfigReq) Check() (errField []*validator.FormErrorField, err error) {\n\t_, err = mail.ParseAddress(r.FromName)\n\tif err == nil {\n\t\treturn append(errField, &validator.FormErrorField{\n\t\t\tErrorField: \"from_name\",\n\t\t\tErrorMsg:   reason.SMTPConfigFromNameCannotBeEmail,\n\t\t}), errors.BadRequest(reason.SMTPConfigFromNameCannotBeEmail)\n\t}\n\treturn nil, nil\n}\n\n// GetSMTPConfigResp get smtp config response\ntype GetSMTPConfigResp struct {\n\tFromEmail          string `json:\"from_email\"`\n\tFromName           string `json:\"from_name\"`\n\tSMTPHost           string `json:\"smtp_host\"`\n\tSMTPPort           int    `json:\"smtp_port\"`\n\tEncryption         string `json:\"encryption\"` // \"\" SSL\n\tSMTPUsername       string `json:\"smtp_username\"`\n\tSMTPPassword       string `json:\"smtp_password\"`\n\tSMTPAuthentication bool   `json:\"smtp_authentication\"`\n}\n\n// GetManifestJsonResp get manifest json response\ntype GetManifestJsonResp struct {\n\tManifestVersion int               `json:\"manifest_version\"`\n\tVersion         string            `json:\"version\"`\n\tShortName       string            `json:\"short_name\"`\n\tName            string            `json:\"name\"`\n\tIcons           map[string]string `json:\"icons\"`\n\tStartUrl        string            `json:\"start_url\"`\n\tDisplay         string            `json:\"display\"`\n\tThemeColor      string            `json:\"theme_color\"`\n\tBackgroundColor string            `json:\"background_color\"`\n}\n"], "fixing_code": ["package validator\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"reflect\"\n\t\"strings\"\n\n\t\"github.com/answerdev/answer/internal/base/reason\"\n\t\"github.com/answerdev/answer/internal/base/translator\"\n\t\"github.com/go-playground/locales\"\n\tgerman \"github.com/go-playground/locales/de\"\n\tenglish \"github.com/go-playground/locales/en\"\n\tspanish \"github.com/go-playground/locales/es\"\n\tfrench \"github.com/go-playground/locales/fr\"\n\titalian \"github.com/go-playground/locales/it\"\n\tjapanese \"github.com/go-playground/locales/ja\"\n\tkorean \"github.com/go-playground/locales/ko\"\n\tportuguese \"github.com/go-playground/locales/pt\"\n\trussian \"github.com/go-playground/locales/ru\"\n\tvietnamese \"github.com/go-playground/locales/vi\"\n\tchinese \"github.com/go-playground/locales/zh\"\n\tchineseTraditional \"github.com/go-playground/locales/zh_Hant_TW\"\n\tut \"github.com/go-playground/universal-translator\"\n\t\"github.com/go-playground/validator/v10\"\n\t\"github.com/go-playground/validator/v10/translations/en\"\n\t\"github.com/go-playground/validator/v10/translations/es\"\n\t\"github.com/go-playground/validator/v10/translations/fr\"\n\t\"github.com/go-playground/validator/v10/translations/it\"\n\t\"github.com/go-playground/validator/v10/translations/ja\"\n\t\"github.com/go-playground/validator/v10/translations/pt\"\n\t\"github.com/go-playground/validator/v10/translations/ru\"\n\t\"github.com/go-playground/validator/v10/translations/vi\"\n\t\"github.com/go-playground/validator/v10/translations/zh\"\n\t\"github.com/go-playground/validator/v10/translations/zh_tw\"\n\t\"github.com/microcosm-cc/bluemonday\"\n\tmyErrors \"github.com/segmentfault/pacman/errors\"\n\t\"github.com/segmentfault/pacman/i18n\"\n\t\"github.com/segmentfault/pacman/log\"\n)\n\ntype TranslatorLocal struct {\n\tLa           i18n.Language\n\tLo           locales.Translator\n\tRegisterFunc func(v *validator.Validate, trans ut.Translator) (err error)\n}\n\nvar (\n\tallLanguageTranslators = []*TranslatorLocal{\n\t\t{La: i18n.LanguageChinese, Lo: chinese.New(), RegisterFunc: zh.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageChineseTraditional, Lo: chineseTraditional.New(), RegisterFunc: zh_tw.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageEnglish, Lo: english.New(), RegisterFunc: en.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageGerman, Lo: german.New(), RegisterFunc: nil},\n\t\t{La: i18n.LanguageSpanish, Lo: spanish.New(), RegisterFunc: es.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageFrench, Lo: french.New(), RegisterFunc: fr.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageItalian, Lo: italian.New(), RegisterFunc: it.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageJapanese, Lo: japanese.New(), RegisterFunc: ja.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageKorean, Lo: korean.New(), RegisterFunc: nil},\n\t\t{La: i18n.LanguagePortuguese, Lo: portuguese.New(), RegisterFunc: pt.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageRussian, Lo: russian.New(), RegisterFunc: ru.RegisterDefaultTranslations},\n\t\t{La: i18n.LanguageVietnamese, Lo: vietnamese.New(), RegisterFunc: vi.RegisterDefaultTranslations},\n\t}\n)\n\n// MyValidator my validator\ntype MyValidator struct {\n\tValidate *validator.Validate\n\tTran     ut.Translator\n\tLang     i18n.Language\n}\n\n// FormErrorField indicates the current form error content. which field is error and error message.\ntype FormErrorField struct {\n\tErrorField string `json:\"error_field\"`\n\tErrorMsg   string `json:\"error_msg\"`\n}\n\n// GlobalValidatorMapping is a mapping from validator to translator used\nvar GlobalValidatorMapping = make(map[i18n.Language]*MyValidator, 0)\n\nfunc init() {\n\tfor _, t := range allLanguageTranslators {\n\t\ttran, val := getTran(t.Lo), createDefaultValidator(t.La)\n\t\tif t.RegisterFunc != nil {\n\t\t\tif err := t.RegisterFunc(val, tran); err != nil {\n\t\t\t\tpanic(err)\n\t\t\t}\n\t\t}\n\t\tGlobalValidatorMapping[t.La] = &MyValidator{Validate: val, Tran: tran, Lang: t.La}\n\t}\n}\n\nfunc getTran(lo locales.Translator) ut.Translator {\n\ttran, ok := ut.New(lo, lo).GetTranslator(lo.Locale())\n\tif !ok {\n\t\tpanic(fmt.Sprintf(\"not found translator %s\", lo.Locale()))\n\t}\n\treturn tran\n}\n\nfunc NotBlank(fl validator.FieldLevel) (res bool) {\n\tfield := fl.Field()\n\tswitch field.Kind() {\n\tcase reflect.String:\n\t\ttrimSpace := strings.TrimSpace(field.String())\n\t\tres := len(trimSpace) > 0\n\t\tif !res {\n\t\t\tfield.SetString(trimSpace)\n\t\t}\n\t\treturn true\n\tcase reflect.Chan, reflect.Map, reflect.Slice, reflect.Array:\n\t\treturn field.Len() > 0\n\tcase reflect.Ptr, reflect.Interface, reflect.Func:\n\t\treturn !field.IsNil()\n\tdefault:\n\t\treturn field.IsValid() && field.Interface() != reflect.Zero(field.Type()).Interface()\n\t}\n}\n\nfunc Sanitizer(fl validator.FieldLevel) (res bool) {\n\tfield := fl.Field()\n\tswitch field.Kind() {\n\tcase reflect.String:\n\t\tfilter := bluemonday.UGCPolicy()\n\t\tfield.SetString(filter.Sanitize(field.String()))\n\t\treturn true\n\tcase reflect.Chan, reflect.Map, reflect.Slice, reflect.Array:\n\t\treturn field.Len() > 0\n\tcase reflect.Ptr, reflect.Interface, reflect.Func:\n\t\treturn !field.IsNil()\n\tdefault:\n\t\treturn field.IsValid() && field.Interface() != reflect.Zero(field.Type()).Interface()\n\t}\n}\n\nfunc createDefaultValidator(la i18n.Language) *validator.Validate {\n\tvalidate := validator.New()\n\t// _ = validate.RegisterValidation(\"notblank\", validators.NotBlank)\n\t_ = validate.RegisterValidation(\"notblank\", NotBlank)\n\t_ = validate.RegisterValidation(\"sanitizer\", Sanitizer)\n\tvalidate.RegisterTagNameFunc(func(fld reflect.StructField) (res string) {\n\t\tdefer func() {\n\t\t\tif len(res) > 0 {\n\t\t\t\tres = translator.Tr(la, res)\n\t\t\t}\n\t\t}()\n\t\tif jsonTag := fld.Tag.Get(\"json\"); len(jsonTag) > 0 {\n\t\t\tif jsonTag == \"-\" {\n\t\t\t\treturn \"\"\n\t\t\t}\n\t\t\treturn jsonTag\n\t\t}\n\t\tif formTag := fld.Tag.Get(\"form\"); len(formTag) > 0 {\n\t\t\treturn formTag\n\t\t}\n\t\treturn fld.Name\n\t})\n\treturn validate\n}\n\nfunc GetValidatorByLang(lang i18n.Language) *MyValidator {\n\tif GlobalValidatorMapping[lang] != nil {\n\t\treturn GlobalValidatorMapping[lang]\n\t}\n\treturn GlobalValidatorMapping[i18n.DefaultLanguage]\n}\n\n// Check /\nfunc (m *MyValidator) Check(value interface{}) (errFields []*FormErrorField, err error) {\n\terr = m.Validate.Struct(value)\n\tif err != nil {\n\t\tvar valErrors validator.ValidationErrors\n\t\tif !errors.As(err, &valErrors) {\n\t\t\tlog.Error(err)\n\t\t\treturn nil, errors.New(\"validate check exception\")\n\t\t}\n\n\t\tfor _, fieldError := range valErrors {\n\t\t\terrField := &FormErrorField{\n\t\t\t\tErrorField: fieldError.Field(),\n\t\t\t\tErrorMsg:   fieldError.Translate(m.Tran),\n\t\t\t}\n\n\t\t\t// get original tag name from value for set err field key.\n\t\t\tstructNamespace := fieldError.StructNamespace()\n\t\t\t_, fieldName, found := strings.Cut(structNamespace, \".\")\n\t\t\tif found {\n\t\t\t\toriginalTag := getObjectTagByFieldName(value, fieldName)\n\t\t\t\tif len(originalTag) > 0 {\n\t\t\t\t\terrField.ErrorField = originalTag\n\t\t\t\t}\n\t\t\t}\n\t\t\terrFields = append(errFields, errField)\n\t\t}\n\t\tif len(errFields) > 0 {\n\t\t\terrMsg := \"\"\n\t\t\tif len(errFields) == 1 {\n\t\t\t\terrMsg = errFields[0].ErrorMsg\n\t\t\t}\n\t\t\treturn errFields, myErrors.BadRequest(reason.RequestFormatError).WithMsg(errMsg)\n\t\t}\n\t}\n\n\tif v, ok := value.(Checker); ok {\n\t\terrFields, err = v.Check()\n\t\tif err == nil {\n\t\t\treturn nil, nil\n\t\t}\n\t\tfor _, errField := range errFields {\n\t\t\terrField.ErrorMsg = translator.Tr(m.Lang, errField.ErrorMsg)\n\t\t}\n\t\treturn errFields, err\n\t}\n\treturn nil, nil\n}\n\n// Checker .\ntype Checker interface {\n\tCheck() (errField []*FormErrorField, err error)\n}\n\nfunc getObjectTagByFieldName(obj interface{}, fieldName string) (tag string) {\n\tdefer func() {\n\t\tif err := recover(); err != nil {\n\t\t\tlog.Error(err)\n\t\t}\n\t}()\n\n\tobjT := reflect.TypeOf(obj)\n\tobjT = objT.Elem()\n\n\tstructField, exists := objT.FieldByName(fieldName)\n\tif !exists {\n\t\treturn \"\"\n\t}\n\ttag = structField.Tag.Get(\"json\")\n\tif len(tag) == 0 {\n\t\treturn structField.Tag.Get(\"form\")\n\t}\n\treturn tag\n}\n", "package controller_admin\n\nimport (\n\t\"net/http\"\n\n\t\"github.com/answerdev/answer/internal/base/handler\"\n\t\"github.com/answerdev/answer/internal/base/middleware\"\n\t\"github.com/answerdev/answer/internal/schema\"\n\t\"github.com/answerdev/answer/internal/service/siteinfo\"\n\t\"github.com/gin-gonic/gin\"\n)\n\n// SiteInfoController site info controller\ntype SiteInfoController struct {\n\tsiteInfoService *siteinfo.SiteInfoService\n}\n\n// NewSiteInfoController new site info controller\nfunc NewSiteInfoController(siteInfoService *siteinfo.SiteInfoService) *SiteInfoController {\n\treturn &SiteInfoController{\n\t\tsiteInfoService: siteInfoService,\n\t}\n}\n\n// GetGeneral get site general information\n// @Summary get site general information\n// @Description get site general information\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteGeneralResp}\n// @Router /answer/admin/api/siteinfo/general [get]\nfunc (sc *SiteInfoController) GetGeneral(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteGeneral(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetInterface get site interface\n// @Summary get site interface\n// @Description get site interface\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteInterfaceResp}\n// @Router /answer/admin/api/siteinfo/interface [get]\nfunc (sc *SiteInfoController) GetInterface(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteInterface(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteBranding get site interface\n// @Summary get site interface\n// @Description get site interface\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteBrandingResp}\n// @Router /answer/admin/api/siteinfo/branding [get]\nfunc (sc *SiteInfoController) GetSiteBranding(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteBranding(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteWrite get site interface\n// @Summary get site interface\n// @Description get site interface\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteWriteResp}\n// @Router /answer/admin/api/siteinfo/write [get]\nfunc (sc *SiteInfoController) GetSiteWrite(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteWrite(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteLegal Set the legal information for the site\n// @Summary Set the legal information for the site\n// @Description Set the legal information for the site\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteLegalResp}\n// @Router /answer/admin/api/siteinfo/legal [get]\nfunc (sc *SiteInfoController) GetSiteLegal(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteLegal(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSeo get site seo information\n// @Summary get site seo information\n// @Description get site seo information\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteSeoResp}\n// @Router /answer/admin/api/siteinfo/seo [get]\nfunc (sc *SiteInfoController) GetSeo(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSeo(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteLogin get site info login config\n// @Summary get site info login config\n// @Description get site info login config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteLoginResp}\n// @Router /answer/admin/api/siteinfo/login [get]\nfunc (sc *SiteInfoController) GetSiteLogin(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteLogin(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteCustomCssHTML get site info custom html css config\n// @Summary get site info custom html css config\n// @Description get site info custom html css config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteCustomCssHTMLResp}\n// @Router /answer/admin/api/siteinfo/custom-css-html [get]\nfunc (sc *SiteInfoController) GetSiteCustomCssHTML(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteCustomCssHTML(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetSiteTheme get site info theme config\n// @Summary get site info theme config\n// @Description get site info theme config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.SiteThemeResp}\n// @Router /answer/admin/api/siteinfo/theme [get]\nfunc (sc *SiteInfoController) GetSiteTheme(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteTheme(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// GetRobots get site robots information\n// @Summary get site robots information\n// @Description get site robots information\n// @Tags site\n// @Produce json\n// @Success 200 {string} txt \"\"\n// @Router /robots.txt [get]\nfunc (sc *SiteInfoController) GetRobots(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSeo(ctx)\n\tif err != nil {\n\t\tctx.String(http.StatusOK, \"\")\n\t\treturn\n\t}\n\tctx.String(http.StatusOK, resp.Robots)\n}\n\n// GetRobots get site robots information\n// @Summary get site robots information\n// @Description get site robots information\n// @Tags site\n// @Produce json\n// @Success 200 {string} txt \"\"\n// @Router /custom.css [get]\nfunc (sc *SiteInfoController) GetCss(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSiteCustomCssHTML(ctx)\n\tif err != nil {\n\t\tctx.String(http.StatusOK, \"\")\n\t\treturn\n\t}\n\tctx.Header(\"content-type\", \"text/css;charset=utf-8\")\n\tctx.String(http.StatusOK, resp.CustomCss)\n}\n\n// UpdateSeo update site seo information\n// @Summary update site seo information\n// @Description update site seo information\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteSeoReq true \"seo\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/seo [put]\nfunc (sc *SiteInfoController) UpdateSeo(ctx *gin.Context) {\n\treq := schema.SiteSeoReq{}\n\tif handler.BindAndCheck(ctx, &req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSeo(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateGeneral update site general information\n// @Summary update site general information\n// @Description update site general information\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteGeneralReq true \"general\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/general [put]\nfunc (sc *SiteInfoController) UpdateGeneral(ctx *gin.Context) {\n\treq := schema.SiteGeneralReq{}\n\tif handler.BindAndCheck(ctx, &req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteGeneral(ctx, req)\n\thandler.HandleResponse(ctx, err, req)\n}\n\n// UpdateInterface update site interface\n// @Summary update site info interface\n// @Description update site info interface\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteInterfaceReq true \"general\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/interface [put]\nfunc (sc *SiteInfoController) UpdateInterface(ctx *gin.Context) {\n\treq := schema.SiteInterfaceReq{}\n\tif handler.BindAndCheck(ctx, &req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteInterface(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateBranding update site branding\n// @Summary update site info branding\n// @Description update site info branding\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteBrandingReq true \"branding info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/branding [put]\nfunc (sc *SiteInfoController) UpdateBranding(ctx *gin.Context) {\n\treq := &schema.SiteBrandingReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteBranding(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateSiteWrite update site write info\n// @Summary update site write info\n// @Description update site write info\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteWriteReq true \"write info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/write [put]\nfunc (sc *SiteInfoController) UpdateSiteWrite(ctx *gin.Context) {\n\treq := &schema.SiteWriteReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\treq.UserID = middleware.GetLoginUserIDFromContext(ctx)\n\n\tresp, err := sc.siteInfoService.SaveSiteWrite(ctx, req)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// UpdateSiteLegal update site legal info\n// @Summary update site legal info\n// @Description update site legal info\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteLegalReq true \"write info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/legal [put]\nfunc (sc *SiteInfoController) UpdateSiteLegal(ctx *gin.Context) {\n\treq := &schema.SiteLegalReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteLegal(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateSiteLogin update site login\n// @Summary update site login\n// @Description update site login\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteLoginReq true \"login info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/login [put]\nfunc (sc *SiteInfoController) UpdateSiteLogin(ctx *gin.Context) {\n\treq := &schema.SiteLoginReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteLogin(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// UpdateSiteCustomCssHTML update site custom css html config\n// @Summary update site custom css html config\n// @Description update site custom css html config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteCustomCssHTMLReq true \"login info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/custom-css-html [put]\nfunc (sc *SiteInfoController) UpdateSiteCustomCssHTML(ctx *gin.Context) {\n\treq := &schema.SiteCustomCssHTMLReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteCustomCssHTML(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// SaveSiteTheme update site custom css html config\n// @Summary update site custom css html config\n// @Description update site custom css html config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.SiteThemeReq true \"login info\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/siteinfo/theme [put]\nfunc (sc *SiteInfoController) SaveSiteTheme(ctx *gin.Context) {\n\treq := &schema.SiteThemeReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.SaveSiteTheme(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n\n// GetSMTPConfig get smtp config\n// @Summary GetSMTPConfig get smtp config\n// @Description GetSMTPConfig get smtp config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Success 200 {object} handler.RespBody{data=schema.GetSMTPConfigResp}\n// @Router /answer/admin/api/setting/smtp [get]\nfunc (sc *SiteInfoController) GetSMTPConfig(ctx *gin.Context) {\n\tresp, err := sc.siteInfoService.GetSMTPConfig(ctx)\n\thandler.HandleResponse(ctx, err, resp)\n}\n\n// UpdateSMTPConfig update smtp config\n// @Summary update smtp config\n// @Description update smtp config\n// @Security ApiKeyAuth\n// @Tags admin\n// @Produce json\n// @Param data body schema.UpdateSMTPConfigReq true \"smtp config\"\n// @Success 200 {object} handler.RespBody{}\n// @Router /answer/admin/api/setting/smtp [put]\nfunc (sc *SiteInfoController) UpdateSMTPConfig(ctx *gin.Context) {\n\treq := &schema.UpdateSMTPConfigReq{}\n\tif handler.BindAndCheck(ctx, req) {\n\t\treturn\n\t}\n\terr := sc.siteInfoService.UpdateSMTPConfig(ctx, req)\n\thandler.HandleResponse(ctx, err, nil)\n}\n", "package schema\n\nimport (\n\t\"context\"\n\t\"fmt\"\n\t\"net/mail\"\n\t\"net/url\"\n\n\t\"github.com/answerdev/answer/internal/base/handler\"\n\t\"github.com/answerdev/answer/internal/base/reason\"\n\t\"github.com/answerdev/answer/internal/base/translator\"\n\t\"github.com/answerdev/answer/internal/base/validator\"\n\t\"github.com/segmentfault/pacman/errors\"\n)\n\nconst PermaLinkQuestionIDAndTitle = 1\nconst PermaLinkQuestionID = 2\n\n// SiteGeneralReq site general request\ntype SiteGeneralReq struct {\n\tName             string `validate:\"required,sanitizer,gt=1,lte=128\" form:\"name\" json:\"name\"`\n\tShortDescription string `validate:\"omitempty,sanitizer,gt=3,lte=255\" form:\"short_description\" json:\"short_description\"`\n\tDescription      string `validate:\"omitempty,sanitizer,gt=3,lte=2000\" form:\"description\" json:\"description\"`\n\tSiteUrl          string `validate:\"required,sanitizer,gt=1,lte=512,url\" form:\"site_url\" json:\"site_url\"`\n\tContactEmail     string `validate:\"required,sanitizer,gt=1,lte=512,email\" form:\"contact_email\" json:\"contact_email\"`\n}\n\ntype SiteSeoReq struct {\n\tPermaLink int    `validate:\"required,lte=3,gte=0\" form:\"permalink\" json:\"permalink\"`\n\tRobots    string `validate:\"required\" form:\"robots\" json:\"robots\"`\n}\n\nfunc (r *SiteGeneralReq) FormatSiteUrl() {\n\tparsedUrl, err := url.Parse(r.SiteUrl)\n\tif err != nil {\n\t\treturn\n\t}\n\tr.SiteUrl = fmt.Sprintf(\"%s://%s\", parsedUrl.Scheme, parsedUrl.Host)\n}\n\n// SiteInterfaceReq site interface request\ntype SiteInterfaceReq struct {\n\tLanguage string `validate:\"required,gt=1,lte=128\" form:\"language\" json:\"language\"`\n\tTimeZone string `validate:\"required,gt=1,lte=128\" form:\"time_zone\" json:\"time_zone\"`\n}\n\n// SiteBrandingReq site branding request\ntype SiteBrandingReq struct {\n\tLogo       string `validate:\"omitempty,gt=0,lte=512\" form:\"logo\" json:\"logo\"`\n\tMobileLogo string `validate:\"omitempty,gt=0,lte=512\" form:\"mobile_logo\" json:\"mobile_logo\"`\n\tSquareIcon string `validate:\"omitempty,gt=0,lte=512\" form:\"square_icon\" json:\"square_icon\"`\n\tFavicon    string `validate:\"omitempty,gt=0,lte=512\" form:\"favicon\" json:\"favicon\"`\n}\n\n// SiteWriteReq site write request\ntype SiteWriteReq struct {\n\tRequiredTag   bool     `validate:\"omitempty\" form:\"required_tag\" json:\"required_tag\"`\n\tRecommendTags []string `validate:\"omitempty\" form:\"recommend_tags\" json:\"recommend_tags\"`\n\tReservedTags  []string `validate:\"omitempty\" form:\"reserved_tags\" json:\"reserved_tags\"`\n\tUserID        string   `json:\"-\"`\n}\n\n// SiteLegalReq site branding request\ntype SiteLegalReq struct {\n\tTermsOfServiceOriginalText string `json:\"terms_of_service_original_text\"`\n\tTermsOfServiceParsedText   string `json:\"terms_of_service_parsed_text\"`\n\tPrivacyPolicyOriginalText  string `json:\"privacy_policy_original_text\"`\n\tPrivacyPolicyParsedText    string `json:\"privacy_policy_parsed_text\"`\n}\n\n// GetSiteLegalInfoReq site site legal request\ntype GetSiteLegalInfoReq struct {\n\tInfoType string `validate:\"required,oneof=tos privacy\" form:\"info_type\"`\n}\n\nfunc (r *GetSiteLegalInfoReq) IsTOS() bool {\n\treturn r.InfoType == \"tos\"\n}\n\nfunc (r *GetSiteLegalInfoReq) IsPrivacy() bool {\n\treturn r.InfoType == \"privacy\"\n}\n\n// GetSiteLegalInfoResp get site legal info response\ntype GetSiteLegalInfoResp struct {\n\tTermsOfServiceOriginalText string `json:\"terms_of_service_original_text,omitempty\"`\n\tTermsOfServiceParsedText   string `json:\"terms_of_service_parsed_text,omitempty\"`\n\tPrivacyPolicyOriginalText  string `json:\"privacy_policy_original_text,omitempty\"`\n\tPrivacyPolicyParsedText    string `json:\"privacy_policy_parsed_text,omitempty\"`\n}\n\n// SiteLoginReq site login request\ntype SiteLoginReq struct {\n\tAllowNewRegistrations bool `json:\"allow_new_registrations\"`\n\tLoginRequired         bool `json:\"login_required\"`\n}\n\n// SiteCustomCssHTMLReq site custom css html\ntype SiteCustomCssHTMLReq struct {\n\tCustomHead   string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_head\"`\n\tCustomCss    string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_css\"`\n\tCustomHeader string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_header\"`\n\tCustomFooter string `validate:\"omitempty,gt=0,lte=65536\" json:\"custom_footer\"`\n}\n\n// SiteThemeReq site theme config\ntype SiteThemeReq struct {\n\tTheme       string                 `validate:\"required,gt=0,lte=255\" json:\"theme\"`\n\tThemeConfig map[string]interface{} `validate:\"omitempty\" json:\"theme_config\"`\n}\n\n// SiteGeneralResp site general response\ntype SiteGeneralResp SiteGeneralReq\n\n// SiteInterfaceResp site interface response\ntype SiteInterfaceResp SiteInterfaceReq\n\n// SiteBrandingResp site branding response\ntype SiteBrandingResp SiteBrandingReq\n\n// SiteLoginResp site login response\ntype SiteLoginResp SiteLoginReq\n\n// SiteCustomCssHTMLResp site custom css html response\ntype SiteCustomCssHTMLResp SiteCustomCssHTMLReq\n\n// SiteThemeResp site theme response\ntype SiteThemeResp struct {\n\tThemeOptions []*ThemeOption         `json:\"theme_options\"`\n\tTheme        string                 `json:\"theme\"`\n\tThemeConfig  map[string]interface{} `json:\"theme_config\"`\n}\n\nfunc (s *SiteThemeResp) TrTheme(ctx context.Context) {\n\tla := handler.GetLangByCtx(ctx)\n\tfor _, option := range s.ThemeOptions {\n\t\ttr := translator.Tr(la, option.Value)\n\t\t// if tr is equal the option value means not found translation, so use the original label\n\t\tif tr != option.Value {\n\t\t\toption.Label = tr\n\t\t}\n\t}\n}\n\n// ThemeOption get label option\ntype ThemeOption struct {\n\tLabel string `json:\"label\"`\n\tValue string `json:\"value\"`\n}\n\n// SiteWriteResp site write response\ntype SiteWriteResp SiteWriteReq\n\n// SiteLegalResp site write response\ntype SiteLegalResp SiteLegalReq\n\n// SiteSeoResp site write response\ntype SiteSeoResp SiteSeoReq\n\n// SiteInfoResp get site info response\ntype SiteInfoResp struct {\n\tGeneral       *SiteGeneralResp       `json:\"general\"`\n\tInterface     *SiteInterfaceResp     `json:\"interface\"`\n\tBranding      *SiteBrandingResp      `json:\"branding\"`\n\tLogin         *SiteLoginResp         `json:\"login\"`\n\tTheme         *SiteThemeResp         `json:\"theme\"`\n\tCustomCssHtml *SiteCustomCssHTMLResp `json:\"custom_css_html\"`\n\tSiteSeo       *SiteSeoReq            `json:\"site_seo\"`\n}\ntype TemplateSiteInfoResp struct {\n\tGeneral       *SiteGeneralResp       `json:\"general\"`\n\tInterface     *SiteInterfaceResp     `json:\"interface\"`\n\tBranding      *SiteBrandingResp      `json:\"branding\"`\n\tSiteSeo       *SiteSeoReq            `json:\"site_seo\"`\n\tCustomCssHtml *SiteCustomCssHTMLResp `json:\"custom_css_html\"`\n\tTitle         string\n\tYear          string\n\tCanonical     string\n\tJsonLD        string\n\tKeywords      string\n\tDescription   string\n}\n\n// UpdateSMTPConfigReq get smtp config request\ntype UpdateSMTPConfigReq struct {\n\tFromEmail          string `validate:\"omitempty,gt=0,lte=256\" json:\"from_email\"`\n\tFromName           string `validate:\"omitempty,gt=0,lte=256\" json:\"from_name\"`\n\tSMTPHost           string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_host\"`\n\tSMTPPort           int    `validate:\"omitempty,min=1,max=65535\" json:\"smtp_port\"`\n\tEncryption         string `validate:\"omitempty,oneof=SSL\" json:\"encryption\"` // \"\" SSL\n\tSMTPUsername       string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_username\"`\n\tSMTPPassword       string `validate:\"omitempty,gt=0,lte=256\" json:\"smtp_password\"`\n\tSMTPAuthentication bool   `validate:\"omitempty\" json:\"smtp_authentication\"`\n\tTestEmailRecipient string `validate:\"omitempty,email\" json:\"test_email_recipient\"`\n}\n\nfunc (r *UpdateSMTPConfigReq) Check() (errField []*validator.FormErrorField, err error) {\n\t_, err = mail.ParseAddress(r.FromName)\n\tif err == nil {\n\t\treturn append(errField, &validator.FormErrorField{\n\t\t\tErrorField: \"from_name\",\n\t\t\tErrorMsg:   reason.SMTPConfigFromNameCannotBeEmail,\n\t\t}), errors.BadRequest(reason.SMTPConfigFromNameCannotBeEmail)\n\t}\n\treturn nil, nil\n}\n\n// GetSMTPConfigResp get smtp config response\ntype GetSMTPConfigResp struct {\n\tFromEmail          string `json:\"from_email\"`\n\tFromName           string `json:\"from_name\"`\n\tSMTPHost           string `json:\"smtp_host\"`\n\tSMTPPort           int    `json:\"smtp_port\"`\n\tEncryption         string `json:\"encryption\"` // \"\" SSL\n\tSMTPUsername       string `json:\"smtp_username\"`\n\tSMTPPassword       string `json:\"smtp_password\"`\n\tSMTPAuthentication bool   `json:\"smtp_authentication\"`\n}\n\n// GetManifestJsonResp get manifest json response\ntype GetManifestJsonResp struct {\n\tManifestVersion int               `json:\"manifest_version\"`\n\tVersion         string            `json:\"version\"`\n\tShortName       string            `json:\"short_name\"`\n\tName            string            `json:\"name\"`\n\tIcons           map[string]string `json:\"icons\"`\n\tStartUrl        string            `json:\"start_url\"`\n\tDisplay         string            `json:\"display\"`\n\tThemeColor      string            `json:\"theme_color\"`\n\tBackgroundColor string            `json:\"background_color\"`\n}\n"], "filenames": ["internal/base/validator/validator.go", "internal/controller_admin/siteinfo_controller.go", "internal/schema/siteinfo_schema.go"], "buggy_code_start_loc": [35, 208, 21], "buggy_code_end_loc": [122, 209, 26], "fixing_code_start_loc": [36, 208, 21], "fixing_code_end_loc": [141, 209, 26], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.5.", "other": {"cve": {"id": "CVE-2023-0934", "sourceIdentifier": "security@huntr.dev", "published": "2023-02-21T15:15:12.107", "lastModified": "2023-03-06T15:46:55.853", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository answerdev/answer prior to 1.0.5."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:answer:answer:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0.5", "matchCriteriaId": "BEA7FFD2-1A13-45E3-AD90-671B0E1C5FF3"}]}]}], "references": [{"url": "https://github.com/answerdev/answer/commit/edc06942d51fa8e56a134c5c7e5c8826d9260da0", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/cd213098-5bab-487f-82c7-13698ad43b51", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/answerdev/answer/commit/edc06942d51fa8e56a134c5c7e5c8826d9260da0"}}