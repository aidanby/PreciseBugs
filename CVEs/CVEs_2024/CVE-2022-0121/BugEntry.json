{"buggy_code": ["<template>\n  <div class=\"flex flex-col flex-1\">\n    <div\n      class=\"sticky z-10 flex items-center justify-between pl-4 border-b bg-primary border-dividerLight top-lowerSecondaryStickyFold\"\n    >\n      <label class=\"font-semibold text-secondaryLight\">\n        {{ t(\"response.body\") }}\n      </label>\n      <div class=\"flex\">\n        <ButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('state.linewrap')\"\n          :class=\"{ '!text-accent': linewrapEnabled }\"\n          svg=\"wrap-text\"\n          @click.native.prevent=\"linewrapEnabled = !linewrapEnabled\"\n        />\n        <ButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"\n            previewEnabled ? t('hide.preview') : t('response.preview_html')\n          \"\n          :svg=\"!previewEnabled ? 'eye' : 'eye-off'\"\n          @click.native.prevent=\"togglePreview\"\n        />\n        <ButtonSecondary\n          v-if=\"response.body\"\n          ref=\"downloadResponse\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('action.download_file')\"\n          :svg=\"downloadIcon\"\n          @click.native=\"downloadResponse\"\n        />\n        <ButtonSecondary\n          v-if=\"response.body\"\n          ref=\"copyResponse\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('action.copy')\"\n          :svg=\"copyIcon\"\n          @click.native=\"copyResponse\"\n        />\n      </div>\n    </div>\n    <div v-show=\"!previewEnabled\" ref=\"htmlResponse\"></div>\n    <iframe\n      v-show=\"previewEnabled\"\n      ref=\"previewFrame\"\n      class=\"covers-response\"\n      src=\"about:blank\"\n      loading=\"lazy\"\n    ></iframe>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref, reactive } from \"@nuxtjs/composition-api\"\nimport { useCodemirror } from \"~/helpers/editor/codemirror\"\nimport { copyToClipboard } from \"~/helpers/utils/clipboard\"\nimport { HoppRESTResponse } from \"~/helpers/types/HoppRESTResponse\"\nimport { useI18n, useToast } from \"~/helpers/utils/composables\"\n\nconst t = useI18n()\n\nconst props = defineProps<{\n  response: HoppRESTResponse\n}>()\n\nconst toast = useToast()\n\nconst responseBodyText = computed(() => {\n  if (\n    props.response.type === \"loading\" ||\n    props.response.type === \"network_fail\"\n  )\n    return \"\"\n  if (typeof props.response.body === \"string\") return props.response.body\n  else {\n    const res = new TextDecoder(\"utf-8\").decode(props.response.body)\n    // HACK: Temporary trailing null character issue from the extension fix\n    return res.replace(/\\0+$/, \"\")\n  }\n})\n\nconst downloadIcon = ref(\"download\")\nconst copyIcon = ref(\"copy\")\nconst previewEnabled = ref(false)\nconst previewFrame = ref<any | null>(null)\nconst url = ref(\"\")\n\nconst htmlResponse = ref<any | null>(null)\nconst linewrapEnabled = ref(true)\n\nuseCodemirror(\n  htmlResponse,\n  responseBodyText,\n  reactive({\n    extendedEditorConfig: {\n      mode: \"htmlmixed\",\n      readOnly: true,\n      lineWrapping: linewrapEnabled,\n    },\n    linter: null,\n    completer: null,\n    environmentHighlights: true,\n  })\n)\n\nconst downloadResponse = () => {\n  const dataToWrite = responseBodyText.value\n  const file = new Blob([dataToWrite], { type: \"text/html\" })\n  const a = document.createElement(\"a\")\n  const url = URL.createObjectURL(file)\n  a.href = url\n  // TODO get uri from meta\n  a.download = `${url.split(\"/\").pop().split(\"#\")[0].split(\"?\")[0]}`\n  document.body.appendChild(a)\n  a.click()\n  downloadIcon.value = \"check\"\n  toast.success(`${t(\"state.download_started\")}`)\n  setTimeout(() => {\n    document.body.removeChild(a)\n    URL.revokeObjectURL(url)\n    downloadIcon.value = \"download\"\n  }, 1000)\n}\n\nconst copyResponse = () => {\n  copyToClipboard(responseBodyText.value)\n  copyIcon.value = \"check\"\n  toast.success(`${t(\"state.copied_to_clipboard\")}`)\n  setTimeout(() => (copyIcon.value = \"copy\"), 1000)\n}\n\nconst togglePreview = () => {\n  previewEnabled.value = !previewEnabled.value\n  if (previewEnabled.value) {\n    if (previewFrame.value.getAttribute(\"data-previewing-url\") === url.value)\n      return\n    // Use DOMParser to parse document HTML.\n    const previewDocument = new DOMParser().parseFromString(\n      responseBodyText.value,\n      \"text/html\"\n    )\n    // Inject <base href=\"...\"> tag to head, to fix relative CSS/HTML paths.\n    previewDocument.head.innerHTML =\n      `<base href=\"${url.value}\">` + previewDocument.head.innerHTML\n    // Finally, set the iframe source to the resulting HTML.\n    previewFrame.value.srcdoc = previewDocument.documentElement.outerHTML\n    previewFrame.value.setAttribute(\"data-previewing-url\", url.value)\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.covers-response {\n  @apply bg-white;\n  @apply h-full;\n  @apply w-full;\n  @apply border;\n  @apply border-dividerLight;\n  @apply z-5;\n}\n</style>\n"], "fixing_code": ["<template>\n  <div class=\"flex flex-col flex-1\">\n    <div\n      class=\"sticky z-10 flex items-center justify-between pl-4 border-b bg-primary border-dividerLight top-lowerSecondaryStickyFold\"\n    >\n      <label class=\"font-semibold text-secondaryLight\">\n        {{ t(\"response.body\") }}\n      </label>\n      <div class=\"flex\">\n        <ButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('state.linewrap')\"\n          :class=\"{ '!text-accent': linewrapEnabled }\"\n          svg=\"wrap-text\"\n          @click.native.prevent=\"linewrapEnabled = !linewrapEnabled\"\n        />\n        <ButtonSecondary\n          v-if=\"response.body\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"\n            previewEnabled ? t('hide.preview') : t('response.preview_html')\n          \"\n          :svg=\"!previewEnabled ? 'eye' : 'eye-off'\"\n          @click.native.prevent=\"togglePreview\"\n        />\n        <ButtonSecondary\n          v-if=\"response.body\"\n          ref=\"downloadResponse\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('action.download_file')\"\n          :svg=\"downloadIcon\"\n          @click.native=\"downloadResponse\"\n        />\n        <ButtonSecondary\n          v-if=\"response.body\"\n          ref=\"copyResponse\"\n          v-tippy=\"{ theme: 'tooltip' }\"\n          :title=\"t('action.copy')\"\n          :svg=\"copyIcon\"\n          @click.native=\"copyResponse\"\n        />\n      </div>\n    </div>\n    <div v-show=\"!previewEnabled\" ref=\"htmlResponse\"></div>\n    <iframe\n      v-show=\"previewEnabled\"\n      ref=\"previewFrame\"\n      class=\"covers-response\"\n      src=\"about:blank\"\n      loading=\"lazy\"\n      sandbox=\"\"\n    ></iframe>\n  </div>\n</template>\n\n<script setup lang=\"ts\">\nimport { computed, ref, reactive } from \"@nuxtjs/composition-api\"\nimport { useCodemirror } from \"~/helpers/editor/codemirror\"\nimport { copyToClipboard } from \"~/helpers/utils/clipboard\"\nimport { HoppRESTResponse } from \"~/helpers/types/HoppRESTResponse\"\nimport { useI18n, useToast } from \"~/helpers/utils/composables\"\n\nconst t = useI18n()\n\nconst props = defineProps<{\n  response: HoppRESTResponse\n}>()\n\nconst toast = useToast()\n\nconst responseBodyText = computed(() => {\n  if (\n    props.response.type === \"loading\" ||\n    props.response.type === \"network_fail\"\n  )\n    return \"\"\n  if (typeof props.response.body === \"string\") return props.response.body\n  else {\n    const res = new TextDecoder(\"utf-8\").decode(props.response.body)\n    // HACK: Temporary trailing null character issue from the extension fix\n    return res.replace(/\\0+$/, \"\")\n  }\n})\n\nconst downloadIcon = ref(\"download\")\nconst copyIcon = ref(\"copy\")\nconst previewEnabled = ref(false)\nconst previewFrame = ref<any | null>(null)\nconst url = ref(\"\")\n\nconst htmlResponse = ref<any | null>(null)\nconst linewrapEnabled = ref(true)\n\nuseCodemirror(\n  htmlResponse,\n  responseBodyText,\n  reactive({\n    extendedEditorConfig: {\n      mode: \"htmlmixed\",\n      readOnly: true,\n      lineWrapping: linewrapEnabled,\n    },\n    linter: null,\n    completer: null,\n    environmentHighlights: true,\n  })\n)\n\nconst downloadResponse = () => {\n  const dataToWrite = responseBodyText.value\n  const file = new Blob([dataToWrite], { type: \"text/html\" })\n  const a = document.createElement(\"a\")\n  const url = URL.createObjectURL(file)\n  a.href = url\n  // TODO get uri from meta\n  a.download = `${url.split(\"/\").pop().split(\"#\")[0].split(\"?\")[0]}`\n  document.body.appendChild(a)\n  a.click()\n  downloadIcon.value = \"check\"\n  toast.success(`${t(\"state.download_started\")}`)\n  setTimeout(() => {\n    document.body.removeChild(a)\n    URL.revokeObjectURL(url)\n    downloadIcon.value = \"download\"\n  }, 1000)\n}\n\nconst copyResponse = () => {\n  copyToClipboard(responseBodyText.value)\n  copyIcon.value = \"check\"\n  toast.success(`${t(\"state.copied_to_clipboard\")}`)\n  setTimeout(() => (copyIcon.value = \"copy\"), 1000)\n}\n\nconst togglePreview = () => {\n  previewEnabled.value = !previewEnabled.value\n  if (previewEnabled.value) {\n    if (previewFrame.value.getAttribute(\"data-previewing-url\") === url.value)\n      return\n    // Use DOMParser to parse document HTML.\n    const previewDocument = new DOMParser().parseFromString(\n      responseBodyText.value,\n      \"text/html\"\n    )\n    // Inject <base href=\"...\"> tag to head, to fix relative CSS/HTML paths.\n    previewDocument.head.innerHTML =\n      `<base href=\"${url.value}\">` + previewDocument.head.innerHTML\n    // Finally, set the iframe source to the resulting HTML.\n    previewFrame.value.srcdoc = previewDocument.documentElement.outerHTML\n    previewFrame.value.setAttribute(\"data-previewing-url\", url.value)\n  }\n}\n</script>\n\n<style lang=\"scss\" scoped>\n.covers-response {\n  @apply bg-white;\n  @apply h-full;\n  @apply w-full;\n  @apply border;\n  @apply border-dividerLight;\n  @apply z-5;\n}\n</style>\n"], "filenames": ["packages/hoppscotch-app/components/lenses/renderers/HTMLLensRenderer.vue"], "buggy_code_start_loc": [51], "buggy_code_end_loc": [51], "fixing_code_start_loc": [52], "fixing_code_end_loc": [53], "type": "CWE-200", "message": "hoppscotch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor", "other": {"cve": {"id": "CVE-2022-0121", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-06T03:15:06.790", "lastModified": "2022-01-12T18:29:32.147", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "hoppscotch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor"}, {"lang": "es", "value": "hoppscotch es vulnerable a una Exposici\u00f3n de Informaci\u00f3n Confidencial a un Actor no Autorizado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 6.8, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hoppscotch:hoppscotch:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.1.0", "matchCriteriaId": "5A92277F-504E-41F5-A4FF-AB6F826C105F"}]}]}], "references": [{"url": "https://github.com/hoppscotch/hoppscotch/commit/86ef1a4e143ea5bb0c7b309574127cc39d4faa74", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/b70a6191-8226-4ac6-b817-cae7332a68ee", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/hoppscotch/hoppscotch/commit/86ef1a4e143ea5bb0c7b309574127cc39d4faa74"}}