{"buggy_code": ["# -*- coding: utf-8 -*-\n'''\nWrapper around Server Density API\n=================================\n\n.. versionadded:: 2014.7.0\n'''\nimport requests\nimport json\nimport logging\n\nfrom salt.exceptions import CommandExecutionError\n\nlog = logging.getLogger(__name__)\n\n\ndef get_sd_auth(val, sd_auth_pillar_name='serverdensity'):\n    '''\n    Returns requested Server Density authentication value from pillar.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.get_sd_auth <val>\n    '''\n    sd_pillar = __pillar__.get(sd_auth_pillar_name)\n    log.debug('Server Density Pillar: {0}'.format(sd_pillar))\n    if not sd_pillar:\n        log.error('Cloud not load {0} pillar'.format(sd_auth_pillar_name))\n        raise CommandExecutionError(\n            '{0} pillar is required for authentication'.format(sd_auth_pillar_name)\n        )\n\n    try:\n        return sd_pillar[val]\n    except KeyError:\n        log.error('Cloud not find value {0} in pillar'.format(val))\n        raise CommandExecutionError('{0} value was not found in pillar'.format(val))\n\n\ndef _clean_salt_variables(params, variable_prefix=\"__\"):\n    '''\n    Pops out variables from params which starts with `variable_prefix`.\n    '''\n    map(params.pop, [k for k in params if k.startswith(variable_prefix)])\n    return params\n\n\ndef create(name, **params):\n    '''\n    Function to create device in Server Density. For more info, see the `API\n    docs`__.\n\n    .. __: https://apidocs.serverdensity.com/Inventory/Devices/Creating\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.create lama\n        salt '*' serverdensity_device.create rich_lama group=lama_band installedRAM=32768\n    '''\n    log.debug('Server Density params: {0}'.format(params))\n    params = _clean_salt_variables(params)\n\n    params['name'] = name\n    api_response = requests.post(\n        'https://api.serverdensity.io/inventory/devices/',\n        params={'token': get_sd_auth('api_token')},\n        data=params\n    )\n    log.debug('Server Density API Response: {0}'.format(api_response))\n    log.debug('Server Density API Response content: {0}'.format(api_response.content))\n    if api_response.status_code == 200:\n        try:\n            return json.loads(api_response.content)\n        except ValueError:\n            log.error('Could not parse API Response content: {0}'.format(api_response.content))\n            raise CommandExecutionError(\n                'Failed to create, API Response: {0}'.format(api_response)\n            )\n    else:\n        return None\n\n\ndef delete(device_id):\n    '''\n    Delete a device from Server Density. For more information, see the `API\n    docs`__.\n\n    .. __: https://apidocs.serverdensity.com/Inventory/Devices/Deleting\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.delete 51f7eafcdba4bb235e000ae4\n    '''\n    api_response = requests.delete(\n        'https://api.serverdensity.io/inventory/devices/' + device_id,\n        params={'token': get_sd_auth('api_token')}\n    )\n    log.debug('Server Density API Response: {0}'.format(api_response))\n    log.debug('Server Density API Response content: {0}'.format(api_response.content))\n    if api_response.status_code == 200:\n        try:\n            return json.loads(api_response.content)\n        except ValueError:\n            log.error('Could not parse API Response content: {0}'.format(api_response.content))\n            raise CommandExecutionError(\n                'Failed to create, API Response: {0}'.format(api_response)\n            )\n    else:\n        return None\n\n\ndef ls(**params):\n    '''\n    List devices in Server Density\n\n    Results will be filtered by any params passed to this function. For more\n    information, see the API docs on listing_ and searching_.\n\n    .. _listing: https://apidocs.serverdensity.com/Inventory/Devices/Listing\n    .. _searching: https://apidocs.serverdensity.com/Inventory/Devices/Searching\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.ls\n        salt '*' serverdensity_device.ls name=lama\n        salt '*' serverdensity_device.ls name=lama group=lama_band installedRAM=32768\n    '''\n    params = _clean_salt_variables(params)\n\n    endpoint = 'devices'\n\n    # Change endpoint if there are params to filter by:\n    if params:\n        endpoint = 'resources'\n\n    # Convert all ints to strings:\n    for k, v in params.items():\n        params[k] = str(v)\n\n    api_response = requests.get(\n        'https://api.serverdensity.io/inventory/{0}'.format(endpoint),\n        params={'token': get_sd_auth('api_token'), 'filter': json.dumps(params)}\n    )\n    log.debug('Server Density API Response: {0}'.format(api_response))\n    log.debug('Server Density API Response content: {0}'.format(api_response.content))\n    if api_response.status_code == 200:\n        try:\n            return json.loads(api_response.content)\n        except ValueError:\n            log.error(\n                'Could not parse Server Density API Response content: {0}'\n                .format(api_response.content)\n            )\n            raise CommandExecutionError(\n                'Failed to create, Server Density API Response: {0}'\n                .format(api_response)\n            )\n    else:\n        return None\n\n\ndef update(device_id, **params):\n    '''\n    Updates device information in Server Density. For more information see the\n    `API docs`__.\n\n    .. __: https://apidocs.serverdensity.com/Inventory/Devices/Updating\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.update 51f7eafcdba4bb235e000ae4 name=lama group=lama_band\n        salt '*' serverdensity_device.update 51f7eafcdba4bb235e000ae4 name=better_lama group=rock_lamas swapSpace=512\n    '''\n    params = _clean_salt_variables(params)\n\n    api_response = requests.put(\n        'https://api.serverdensity.io/inventory/devices/' + device_id,\n        params={'token': get_sd_auth('api_token')},\n        data=params\n    )\n    log.debug('Server Density API Response: {0}'.format(api_response))\n    log.debug('Server Density API Response content: {0}'.format(api_response.content))\n    if api_response.status_code == 200:\n        try:\n            return json.loads(api_response.content)\n        except ValueError:\n            log.error(\n                'Could not parse Server Density API Response content: {0}'\n                .format(api_response.content)\n            )\n            raise CommandExecutionError(\n                'Failed to create, API Response: {0}'.format(api_response)\n            )\n    else:\n        return None\n\n\ndef install_agent(agent_key):\n    '''\n    Function downloads Server Density installation agent, and installs sd-agent\n    with agent_key.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.install_agent c2bbdd6689ff46282bdaa07555641498\n    '''\n    work_dir = '/tmp/'\n    account_url = get_sd_auth('account_url')\n\n    __salt__['cmd.run'](\n        cmd='curl https://www.serverdensity.com/downloads/agent-install.sh -o install.sh',\n        cwd=work_dir\n    )\n    __salt__['cmd.run'](cmd='chmod +x install.sh', cwd=work_dir)\n\n    return __salt__['cmd.run'](\n        cmd='./install.sh -a {account_url} -k {agent_key}'.format(\n            account_url=account_url, agent_key=agent_key),\n        cwd=work_dir\n    )\n"], "fixing_code": ["# -*- coding: utf-8 -*-\n'''\nWrapper around Server Density API\n=================================\n\n.. versionadded:: 2014.7.0\n'''\nimport requests\nimport json\nimport logging\nimport os\nimport tempfile\n\nfrom salt.exceptions import CommandExecutionError\n\nlog = logging.getLogger(__name__)\n\n\ndef get_sd_auth(val, sd_auth_pillar_name='serverdensity'):\n    '''\n    Returns requested Server Density authentication value from pillar.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.get_sd_auth <val>\n    '''\n    sd_pillar = __pillar__.get(sd_auth_pillar_name)\n    log.debug('Server Density Pillar: {0}'.format(sd_pillar))\n    if not sd_pillar:\n        log.error('Cloud not load {0} pillar'.format(sd_auth_pillar_name))\n        raise CommandExecutionError(\n            '{0} pillar is required for authentication'.format(sd_auth_pillar_name)\n        )\n\n    try:\n        return sd_pillar[val]\n    except KeyError:\n        log.error('Cloud not find value {0} in pillar'.format(val))\n        raise CommandExecutionError('{0} value was not found in pillar'.format(val))\n\n\ndef _clean_salt_variables(params, variable_prefix=\"__\"):\n    '''\n    Pops out variables from params which starts with `variable_prefix`.\n    '''\n    map(params.pop, [k for k in params if k.startswith(variable_prefix)])\n    return params\n\n\ndef create(name, **params):\n    '''\n    Function to create device in Server Density. For more info, see the `API\n    docs`__.\n\n    .. __: https://apidocs.serverdensity.com/Inventory/Devices/Creating\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.create lama\n        salt '*' serverdensity_device.create rich_lama group=lama_band installedRAM=32768\n    '''\n    log.debug('Server Density params: {0}'.format(params))\n    params = _clean_salt_variables(params)\n\n    params['name'] = name\n    api_response = requests.post(\n        'https://api.serverdensity.io/inventory/devices/',\n        params={'token': get_sd_auth('api_token')},\n        data=params\n    )\n    log.debug('Server Density API Response: {0}'.format(api_response))\n    log.debug('Server Density API Response content: {0}'.format(api_response.content))\n    if api_response.status_code == 200:\n        try:\n            return json.loads(api_response.content)\n        except ValueError:\n            log.error('Could not parse API Response content: {0}'.format(api_response.content))\n            raise CommandExecutionError(\n                'Failed to create, API Response: {0}'.format(api_response)\n            )\n    else:\n        return None\n\n\ndef delete(device_id):\n    '''\n    Delete a device from Server Density. For more information, see the `API\n    docs`__.\n\n    .. __: https://apidocs.serverdensity.com/Inventory/Devices/Deleting\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.delete 51f7eafcdba4bb235e000ae4\n    '''\n    api_response = requests.delete(\n        'https://api.serverdensity.io/inventory/devices/' + device_id,\n        params={'token': get_sd_auth('api_token')}\n    )\n    log.debug('Server Density API Response: {0}'.format(api_response))\n    log.debug('Server Density API Response content: {0}'.format(api_response.content))\n    if api_response.status_code == 200:\n        try:\n            return json.loads(api_response.content)\n        except ValueError:\n            log.error('Could not parse API Response content: {0}'.format(api_response.content))\n            raise CommandExecutionError(\n                'Failed to create, API Response: {0}'.format(api_response)\n            )\n    else:\n        return None\n\n\ndef ls(**params):\n    '''\n    List devices in Server Density\n\n    Results will be filtered by any params passed to this function. For more\n    information, see the API docs on listing_ and searching_.\n\n    .. _listing: https://apidocs.serverdensity.com/Inventory/Devices/Listing\n    .. _searching: https://apidocs.serverdensity.com/Inventory/Devices/Searching\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.ls\n        salt '*' serverdensity_device.ls name=lama\n        salt '*' serverdensity_device.ls name=lama group=lama_band installedRAM=32768\n    '''\n    params = _clean_salt_variables(params)\n\n    endpoint = 'devices'\n\n    # Change endpoint if there are params to filter by:\n    if params:\n        endpoint = 'resources'\n\n    # Convert all ints to strings:\n    for k, v in params.items():\n        params[k] = str(v)\n\n    api_response = requests.get(\n        'https://api.serverdensity.io/inventory/{0}'.format(endpoint),\n        params={'token': get_sd_auth('api_token'), 'filter': json.dumps(params)}\n    )\n    log.debug('Server Density API Response: {0}'.format(api_response))\n    log.debug('Server Density API Response content: {0}'.format(api_response.content))\n    if api_response.status_code == 200:\n        try:\n            return json.loads(api_response.content)\n        except ValueError:\n            log.error(\n                'Could not parse Server Density API Response content: {0}'\n                .format(api_response.content)\n            )\n            raise CommandExecutionError(\n                'Failed to create, Server Density API Response: {0}'\n                .format(api_response)\n            )\n    else:\n        return None\n\n\ndef update(device_id, **params):\n    '''\n    Updates device information in Server Density. For more information see the\n    `API docs`__.\n\n    .. __: https://apidocs.serverdensity.com/Inventory/Devices/Updating\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.update 51f7eafcdba4bb235e000ae4 name=lama group=lama_band\n        salt '*' serverdensity_device.update 51f7eafcdba4bb235e000ae4 name=better_lama group=rock_lamas swapSpace=512\n    '''\n    params = _clean_salt_variables(params)\n\n    api_response = requests.put(\n        'https://api.serverdensity.io/inventory/devices/' + device_id,\n        params={'token': get_sd_auth('api_token')},\n        data=params\n    )\n    log.debug('Server Density API Response: {0}'.format(api_response))\n    log.debug('Server Density API Response content: {0}'.format(api_response.content))\n    if api_response.status_code == 200:\n        try:\n            return json.loads(api_response.content)\n        except ValueError:\n            log.error(\n                'Could not parse Server Density API Response content: {0}'\n                .format(api_response.content)\n            )\n            raise CommandExecutionError(\n                'Failed to create, API Response: {0}'.format(api_response)\n            )\n    else:\n        return None\n\n\ndef install_agent(agent_key):\n    '''\n    Function downloads Server Density installation agent, and installs sd-agent\n    with agent_key.\n\n    CLI Example:\n\n    .. code-block:: bash\n\n        salt '*' serverdensity_device.install_agent c2bbdd6689ff46282bdaa07555641498\n    '''\n    work_dir = os.path.join(__opts__['cachedir'], 'tmp')\n    if not os.path.isdir(work_dir):\n        os.mkdir(work_dir)\n    install_file = tempfile.NamedTemporaryFile(dir=work_dir,\n                                                   suffix='.sh',\n                                                   delete=False)\n    install_filename = install_file.name\n    install_file.close()\n    account_url = get_sd_auth('account_url')\n\n    __salt__['cmd.run'](\n        cmd='curl https://www.serverdensity.com/downloads/agent-install.sh -o {0}'.format(install_filename),\n        cwd=work_dir\n    )\n    __salt__['cmd.run'](cmd='chmod +x {0}'.format(install_filename), cwd=work_dir)\n\n    return __salt__['cmd.run'](\n        cmd='./{filename} -a {account_url} -k {agent_key}'.format(\n            filename=install_filename, account_url=account_url, agent_key=agent_key),\n        cwd=work_dir\n    )\n"], "filenames": ["salt/modules/serverdensity_device.py"], "buggy_code_start_loc": [10], "buggy_code_end_loc": [231], "fixing_code_start_loc": [11], "fixing_code_end_loc": [240], "type": "CWE-19", "message": "modules/serverdensity_device.py in SaltStack before 2014.7.4 does not properly handle files in /tmp.", "other": {"cve": {"id": "CVE-2015-1838", "sourceIdentifier": "secalert@redhat.com", "published": "2017-04-13T14:59:00.713", "lastModified": "2017-04-19T19:35:25.010", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "modules/serverdensity_device.py in SaltStack before 2014.7.4 does not properly handle files in /tmp."}, {"lang": "es", "value": "modules/serverdensity_device.py en SaltStack en versiones anteriores a 2014.7.4 no maneja correctamente archivos en /tmp."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 4.6}, "baseSeverity": "MEDIUM", "exploitabilityScore": 3.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-19"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:saltstack:salt:*:*:*:*:*:*:*:*", "versionEndIncluding": "2014.7.3", "matchCriteriaId": "AABB487A-AC69-46DA-97AC-7467DC67A05D"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:23:*:*:*:*:*:*:*", "matchCriteriaId": "E79AB8DD-C907-4038-A931-1A5A4CFB6A5B"}]}]}], "references": [{"url": "http://lists.fedoraproject.org/pipermail/package-announce/2016-January/175568.html", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1212784", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://docs.saltstack.com/en/latest/topics/releases/2014.7.4.html", "source": "secalert@redhat.com", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://github.com/saltstack/salt/commit/e11298d7155e9982749483ca5538e46090caef9c", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/saltstack/salt/commit/e11298d7155e9982749483ca5538e46090caef9c"}}