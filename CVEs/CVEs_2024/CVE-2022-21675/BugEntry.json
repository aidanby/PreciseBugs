{"buggy_code": ["package the.bytecode.club.bytecodeviewer.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Enumeration;\nimport java.util.Objects;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\n/***************************************************************************\n * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *\n * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *\n *                                                                         *\n * This program is free software: you can redistribute it and/or modify    *\n *   it under the terms of the GNU General Public License as published by  *\n *   the Free Software Foundation, either version 3 of the License, or     *\n *   (at your option) any later version.                                   *\n *                                                                         *\n *   This program is distributed in the hope that it will be useful,       *\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n *   GNU General Public License for more details.                          *\n *                                                                         *\n *   You should have received a copy of the GNU General Public License     *\n *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n ***************************************************************************/\n\n/**\n * Rudimentary utility class for Zip archives.\n */\npublic final class ZipUtils {\n\n    // TODO: Maybe migrate to org.apache.commons.compress.archivers.examples.Expander?\n    /**\n     * Unzip files to path.\n     *\n     * @param jarPath        the zip file name\n     * @param destinationDir the file extract path\n     * @throws IOException Signals that an I/O exception has occurred.\n     */\n    public static void unzipFilesToPath(String jarPath, String destinationDir) throws IOException {\n        File file = new File(jarPath);\n        try (JarFile jar = new JarFile(file)) {\n\n            // fist get all directories,\n            // then make those directory on the destination Path\n            /*for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {\n                JarEntry entry = (JarEntry) enums.nextElement();\n\n                String fileName = destinationDir + File.separator + entry.getName();\n                File f = new File(fileName);\n\n                if (fileName.endsWith(\"/\")) {\n                    f.mkdirs();\n                }\n\n            }*/\n\n            //now create all files\n            for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {\n                JarEntry entry = enums.nextElement();\n\n                String fileName = destinationDir + File.separator + entry.getName();\n                File f = new File(fileName);\n\n                if (!f.getCanonicalPath().startsWith(destinationDir)) {\n                    System.out.println(\"Zip Slip exploit detected. Skipping entry \" + entry.getName());\n                    continue;\n                }\n\n                File parent = f.getParentFile();\n                if (!parent.exists()) {\n                    parent.mkdirs();\n                }\n\n                if (!fileName.endsWith(\"/\")) {\n                    try (InputStream is = jar.getInputStream(entry);\n                         FileOutputStream fos = new FileOutputStream(f)) {\n                        // write contents of 'is' to 'fos'\n                        while (is.available() > 0) {\n                            fos.write(is.read());\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public static void zipFile(File inputFile, File outputZip) {\n        byte[] buffer = new byte[1024];\n\n        try (FileOutputStream fos = new FileOutputStream(outputZip);\n             ZipOutputStream zos = new ZipOutputStream(fos)) {\n            ZipEntry ze = new ZipEntry(inputFile.getName());\n            zos.putNextEntry(ze);\n            try (FileInputStream in = new FileInputStream(inputFile)) {\n                int len;\n                while ((len = in.read(buffer)) > 0) {\n                    zos.write(buffer, 0, len);\n                }\n            }\n            zos.closeEntry();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void zipFolder(String srcFolder, String destZipFile, String ignore) throws Exception {\n        try (FileOutputStream fileWriter = new FileOutputStream(destZipFile);\n             ZipOutputStream zip = new ZipOutputStream(fileWriter)) {\n            addFolderToZip(\"\", srcFolder, zip, ignore);\n            zip.flush();\n        }\n    }\n\n    public static void zipFolderAPKTool(String srcFolder, String destZipFile) throws Exception {\n        try (FileOutputStream fileWriter = new FileOutputStream(destZipFile);\n             ZipOutputStream zip = new ZipOutputStream(fileWriter)) {\n            addFolderToZipAPKTool(\"\", srcFolder, zip);\n            zip.flush();\n        }\n    }\n\n    public static void addFileToZip(String path, String srcFile, ZipOutputStream zip, String ignore)\n            throws Exception {\n\n        File folder = new File(srcFile);\n        if (folder.isDirectory()) {\n            addFolderToZip(path, srcFile, zip, ignore);\n        } else {\n            byte[] buf = new byte[1024];\n            int len;\n            try (FileInputStream in = new FileInputStream(srcFile)) {\n                ZipEntry entry;\n                if (ignore == null)\n                    entry = new ZipEntry(path + \"/\" + folder.getName());\n                else\n                    entry = new ZipEntry(path.replace(ignore, \"BCV_Krakatau\") + \"/\" + folder.getName());\n                zip.putNextEntry(entry);\n                while ((len = in.read(buf)) > 0) {\n                    zip.write(buf, 0, len);\n                }\n            }\n        }\n    }\n\n    public static void addFileToZipAPKTool(String path, String srcFile, ZipOutputStream zip) throws Exception {\n        File folder = new File(srcFile);\n\n        String check = path.toLowerCase();\n        //if(check.startsWith(\"decoded unknown\") || check.startsWith(\"decoded lib\") || check.startsWith(\"decoded\n        // assets\") || check.startsWith(\"decoded original\") || check.startsWith(\"decoded smali\") || check.startsWith\n        // (\"decoded apktool.yml\"))\n        if (check.startsWith(\"decoded original\") || check.startsWith(\"decoded smali\") || check.startsWith(\"decoded \"\n                + \"apktool.yml\"))\n            return;\n\n        //if(path.equals(\"original\") || path.equals(\"classes.dex\") || path.equals(\"apktool.yml\"))\n        //    continue;\n\n        if (folder.isDirectory()) {\n            addFolderToZipAPKTool(path, srcFile, zip);\n        } else {\n            byte[] buf = new byte[1024];\n            int len;\n            try (FileInputStream in = new FileInputStream(srcFile)) {\n                ZipEntry entry;\n\n                entry = new ZipEntry(path + \"/\" + folder.getName());\n                zip.putNextEntry(entry);\n\n                while ((len = in.read(buf)) > 0) {\n                    zip.write(buf, 0, len);\n                }\n            }\n        }\n    }\n\n    public static void addFolderToZip(String path, String srcFolder, ZipOutputStream zip, String ignore)\n            throws Exception {\n        File folder = new File(srcFolder);\n\n        for (String fileName : Objects.requireNonNull(folder.list())) {\n            if (path.isEmpty()) {\n                addFileToZip(folder.getName(), srcFolder + \"/\" + fileName, zip, ignore);\n            } else {\n                addFileToZip(path + \"/\" + folder.getName(), srcFolder + \"/\" + fileName, zip, ignore);\n            }\n        }\n    }\n\n    public static void addFolderToZipAPKTool(String path, String srcFolder, ZipOutputStream zip) throws Exception {\n        File folder = new File(srcFolder);\n\n        for (String fileName : Objects.requireNonNull(folder.list())) {\n            if (path.isEmpty()) {\n                addFileToZipAPKTool(folder.getName(), srcFolder + \"/\" + fileName, zip);\n            } else {\n                addFileToZipAPKTool(path + \"/\" + folder.getName(), srcFolder + \"/\" + fileName, zip);\n            }\n        }\n    }\n}\n"], "fixing_code": ["package the.bytecode.club.bytecodeviewer.util;\n\nimport java.io.File;\nimport java.io.FileInputStream;\nimport java.io.FileOutputStream;\nimport java.io.IOException;\nimport java.io.InputStream;\nimport java.util.Enumeration;\nimport java.util.Objects;\nimport java.util.jar.JarEntry;\nimport java.util.jar.JarFile;\nimport java.util.zip.ZipEntry;\nimport java.util.zip.ZipOutputStream;\n\n/***************************************************************************\n * Bytecode Viewer (BCV) - Java & Android Reverse Engineering Suite        *\n * Copyright (C) 2014 Kalen 'Konloch' Kinloch - http://bytecodeviewer.com  *\n *                                                                         *\n * This program is free software: you can redistribute it and/or modify    *\n *   it under the terms of the GNU General Public License as published by  *\n *   the Free Software Foundation, either version 3 of the License, or     *\n *   (at your option) any later version.                                   *\n *                                                                         *\n *   This program is distributed in the hope that it will be useful,       *\n *   but WITHOUT ANY WARRANTY; without even the implied warranty of        *\n *   MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the         *\n *   GNU General Public License for more details.                          *\n *                                                                         *\n *   You should have received a copy of the GNU General Public License     *\n *   along with this program.  If not, see <http://www.gnu.org/licenses/>. *\n ***************************************************************************/\n\n/**\n * Rudimentary utility class for Zip archives.\n */\npublic final class ZipUtils {\n\n    // TODO: Maybe migrate to org.apache.commons.compress.archivers.examples.Expander?\n    /**\n     * Unzip files to path.\n     *\n     * @param jarPath        the zip file name\n     * @param destinationDir the file extract path\n     * @throws IOException Signals that an I/O exception has occurred.\n     */\n    public static void unzipFilesToPath(String jarPath, String destinationDir) throws IOException {\n        String canonicalDestDir = new File(destinationDir).getCanonicalPath();\n        if (!canonicalDestDir.endsWith(File.separator)) {\n            canonicalDestDir += File.separator;\n        }\n\n        File file = new File(jarPath);\n        try (JarFile jar = new JarFile(file)) {\n\n            // fist get all directories,\n            // then make those directory on the destination Path\n            /*for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {\n                JarEntry entry = (JarEntry) enums.nextElement();\n\n                String fileName = destinationDir + File.separator + entry.getName();\n                File f = new File(fileName);\n\n                if (fileName.endsWith(\"/\")) {\n                    f.mkdirs();\n                }\n\n            }*/\n\n            //now create all files\n            for (Enumeration<JarEntry> enums = jar.entries(); enums.hasMoreElements(); ) {\n                JarEntry entry = enums.nextElement();\n\n                String fileName = destinationDir + File.separator + entry.getName();\n                File f = new File(fileName);\n\n                if (!f.getCanonicalPath().startsWith(canonicalDestDir)) {\n                    System.out.println(\"Zip Slip exploit detected. Skipping entry \" + entry.getName());\n                    continue;\n                }\n\n                File parent = f.getParentFile();\n                if (!parent.exists()) {\n                    parent.mkdirs();\n                }\n\n                if (!fileName.endsWith(\"/\")) {\n                    try (InputStream is = jar.getInputStream(entry);\n                         FileOutputStream fos = new FileOutputStream(f)) {\n                        // write contents of 'is' to 'fos'\n                        while (is.available() > 0) {\n                            fos.write(is.read());\n                        }\n                    }\n                }\n            }\n        }\n    }\n\n    public static void zipFile(File inputFile, File outputZip) {\n        byte[] buffer = new byte[1024];\n\n        try (FileOutputStream fos = new FileOutputStream(outputZip);\n             ZipOutputStream zos = new ZipOutputStream(fos)) {\n            ZipEntry ze = new ZipEntry(inputFile.getName());\n            zos.putNextEntry(ze);\n            try (FileInputStream in = new FileInputStream(inputFile)) {\n                int len;\n                while ((len = in.read(buffer)) > 0) {\n                    zos.write(buffer, 0, len);\n                }\n            }\n            zos.closeEntry();\n        } catch (Exception e) {\n            e.printStackTrace();\n        }\n    }\n\n    public static void zipFolder(String srcFolder, String destZipFile, String ignore) throws Exception {\n        try (FileOutputStream fileWriter = new FileOutputStream(destZipFile);\n             ZipOutputStream zip = new ZipOutputStream(fileWriter)) {\n            addFolderToZip(\"\", srcFolder, zip, ignore);\n            zip.flush();\n        }\n    }\n\n    public static void zipFolderAPKTool(String srcFolder, String destZipFile) throws Exception {\n        try (FileOutputStream fileWriter = new FileOutputStream(destZipFile);\n             ZipOutputStream zip = new ZipOutputStream(fileWriter)) {\n            addFolderToZipAPKTool(\"\", srcFolder, zip);\n            zip.flush();\n        }\n    }\n\n    public static void addFileToZip(String path, String srcFile, ZipOutputStream zip, String ignore)\n            throws Exception {\n\n        File folder = new File(srcFile);\n        if (folder.isDirectory()) {\n            addFolderToZip(path, srcFile, zip, ignore);\n        } else {\n            byte[] buf = new byte[1024];\n            int len;\n            try (FileInputStream in = new FileInputStream(srcFile)) {\n                ZipEntry entry;\n                if (ignore == null)\n                    entry = new ZipEntry(path + \"/\" + folder.getName());\n                else\n                    entry = new ZipEntry(path.replace(ignore, \"BCV_Krakatau\") + \"/\" + folder.getName());\n                zip.putNextEntry(entry);\n                while ((len = in.read(buf)) > 0) {\n                    zip.write(buf, 0, len);\n                }\n            }\n        }\n    }\n\n    public static void addFileToZipAPKTool(String path, String srcFile, ZipOutputStream zip) throws Exception {\n        File folder = new File(srcFile);\n\n        String check = path.toLowerCase();\n        //if(check.startsWith(\"decoded unknown\") || check.startsWith(\"decoded lib\") || check.startsWith(\"decoded\n        // assets\") || check.startsWith(\"decoded original\") || check.startsWith(\"decoded smali\") || check.startsWith\n        // (\"decoded apktool.yml\"))\n        if (check.startsWith(\"decoded original\") || check.startsWith(\"decoded smali\") || check.startsWith(\"decoded \"\n                + \"apktool.yml\"))\n            return;\n\n        //if(path.equals(\"original\") || path.equals(\"classes.dex\") || path.equals(\"apktool.yml\"))\n        //    continue;\n\n        if (folder.isDirectory()) {\n            addFolderToZipAPKTool(path, srcFile, zip);\n        } else {\n            byte[] buf = new byte[1024];\n            int len;\n            try (FileInputStream in = new FileInputStream(srcFile)) {\n                ZipEntry entry;\n\n                entry = new ZipEntry(path + \"/\" + folder.getName());\n                zip.putNextEntry(entry);\n\n                while ((len = in.read(buf)) > 0) {\n                    zip.write(buf, 0, len);\n                }\n            }\n        }\n    }\n\n    public static void addFolderToZip(String path, String srcFolder, ZipOutputStream zip, String ignore)\n            throws Exception {\n        File folder = new File(srcFolder);\n\n        for (String fileName : Objects.requireNonNull(folder.list())) {\n            if (path.isEmpty()) {\n                addFileToZip(folder.getName(), srcFolder + \"/\" + fileName, zip, ignore);\n            } else {\n                addFileToZip(path + \"/\" + folder.getName(), srcFolder + \"/\" + fileName, zip, ignore);\n            }\n        }\n    }\n\n    public static void addFolderToZipAPKTool(String path, String srcFolder, ZipOutputStream zip) throws Exception {\n        File folder = new File(srcFolder);\n\n        for (String fileName : Objects.requireNonNull(folder.list())) {\n            if (path.isEmpty()) {\n                addFileToZipAPKTool(folder.getName(), srcFolder + \"/\" + fileName, zip);\n            } else {\n                addFileToZipAPKTool(path + \"/\" + folder.getName(), srcFolder + \"/\" + fileName, zip);\n            }\n        }\n    }\n}\n"], "filenames": ["src/main/java/the/bytecode/club/bytecodeviewer/util/ZipUtils.java"], "buggy_code_start_loc": [46], "buggy_code_end_loc": [72], "fixing_code_start_loc": [47], "fixing_code_end_loc": [77], "type": "CWE-22", "message": "Bytecode Viewer (BCV) is a Java/Android reverse engineering suite. Versions of the package prior to 2.11.0 are vulnerable to Arbitrary File Write via Archive Extraction (AKA \"Zip Slip\"). The vulnerability is exploited using a specially crafted archive that holds directory traversal filenames (e.g. ../../evil.exe). The Zip Slip vulnerability can affect numerous archive formats, including zip, jar, tar, war, cpio, apk, rar and 7z. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim\u00e2\u20ac\u2122s machine. The impact of a Zip Slip vulnerability would allow an attacker to create or overwrite existing files on the filesystem. In the context of a web application, a web shell could be placed within the application directory to achieve code execution. All users should upgrade to BCV v2.11.0 when possible to receive a patch. There are no recommended workarounds aside from upgrading.", "other": {"cve": {"id": "CVE-2022-21675", "sourceIdentifier": "security-advisories@github.com", "published": "2022-01-12T19:15:09.117", "lastModified": "2022-01-19T19:25:53.877", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Bytecode Viewer (BCV) is a Java/Android reverse engineering suite. Versions of the package prior to 2.11.0 are vulnerable to Arbitrary File Write via Archive Extraction (AKA \"Zip Slip\"). The vulnerability is exploited using a specially crafted archive that holds directory traversal filenames (e.g. ../../evil.exe). The Zip Slip vulnerability can affect numerous archive formats, including zip, jar, tar, war, cpio, apk, rar and 7z. The attacker can then overwrite executable files and either invoke them remotely or wait for the system or user to call them, thus achieving remote command execution on the victim\u00e2\u20ac\u2122s machine. The impact of a Zip Slip vulnerability would allow an attacker to create or overwrite existing files on the filesystem. In the context of a web application, a web shell could be placed within the application directory to achieve code execution. All users should upgrade to BCV v2.11.0 when possible to receive a patch. There are no recommended workarounds aside from upgrading."}, {"lang": "es", "value": "Bytecode Viewer (BCV) es una suite de ingenier\u00eda inversa para Java/Android. Las versiones del paquete anteriores a 2.11.0 son vulnerables a una escritura arbitraria de archivos por medio de la extracci\u00f3n de archivos (tambi\u00e9n se conoce como \"Zip Slip\"). La vulnerabilidad es explotada usando un archivo especialmente dise\u00f1ado que contiene nombres de archivos de navegaci\u00f3n de directorios (por ejemplo, ../../evil.exe). La vulnerabilidad Zip Slip puede afectar a numerosos formatos de archivo, como zip, jar, tar, war, cpio, apk, rar y 7z. El atacante puede entonces sobrescribir los archivos ejecutables e invocarlos remotamente o esperar a que el sistema o el usuario los llame, logrando as\u00ed una ejecuci\u00f3n de comandos remota en la m\u00e1quina de la v\u00edctima. El impacto de una vulnerabilidad de Zip Slip permitir\u00eda a un atacante crear o sobrescribir archivos existentes en el sistema de archivos. En el contexto de una aplicaci\u00f3n web, podr\u00eda colocarse una shell web dentro del directorio de la aplicaci\u00f3n para lograr una ejecuci\u00f3n de c\u00f3digo. Todos los usuarios deber\u00edan actualizar a BCV versi\u00f3n v2.11.0 cuando sea posible para recibir el parche. No se presentan medidas de mitigaci\u00f3n recomendadas aparte de la actualizaci\u00f3n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:L/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.9, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.1, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:bytecode_viewer_project:bytecode_viewer:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.10.16", "versionEndExcluding": "2.11.0", "matchCriteriaId": "7E51FE80-DA4D-4D06-8E0E-CA444BF24079"}]}]}], "references": [{"url": "https://github.com/Konloch/bytecode-viewer/commit/1ec02658fe6858162f5e6a24f97928de6696c5cb", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Konloch/bytecode-viewer/commit/c968e94b2c93da434a4ecfac6d08eda162d615d0", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/Konloch/bytecode-viewer/releases/tag/v2.11.0", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/Konloch/bytecode-viewer/security/advisories/GHSA-3wq9-j4fc-4wmc", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Konloch/bytecode-viewer/commit/1ec02658fe6858162f5e6a24f97928de6696c5cb"}}