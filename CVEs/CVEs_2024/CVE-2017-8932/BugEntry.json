{"buggy_code": ["// Copyright 2010 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage elliptic\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"math/big\"\n\t\"testing\"\n)\n\nfunc TestOnCurve(t *testing.T) {\n\tp224 := P224()\n\tif !p224.IsOnCurve(p224.Params().Gx, p224.Params().Gy) {\n\t\tt.Errorf(\"FAIL\")\n\t}\n}\n\nfunc TestOffCurve(t *testing.T) {\n\tp224 := P224()\n\tx, y := new(big.Int).SetInt64(1), new(big.Int).SetInt64(1)\n\tif p224.IsOnCurve(x, y) {\n\t\tt.Errorf(\"FAIL: point off curve is claimed to be on the curve\")\n\t}\n\tb := Marshal(p224, x, y)\n\tx1, y1 := Unmarshal(p224, b)\n\tif x1 != nil || y1 != nil {\n\t\tt.Errorf(\"FAIL: unmarshaling a point not on the curve succeeded\")\n\t}\n}\n\ntype baseMultTest struct {\n\tk    string\n\tx, y string\n}\n\nvar p224BaseMultTests = []baseMultTest{\n\t{\n\t\t\"1\",\n\t\t\"b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21\",\n\t\t\"bd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34\",\n\t},\n\t{\n\t\t\"2\",\n\t\t\"706a46dc76dcb76798e60e6d89474788d16dc18032d268fd1a704fa6\",\n\t\t\"1c2b76a7bc25e7702a704fa986892849fca629487acf3709d2e4e8bb\",\n\t},\n\t{\n\t\t\"3\",\n\t\t\"df1b1d66a551d0d31eff822558b9d2cc75c2180279fe0d08fd896d04\",\n\t\t\"a3f7f03cadd0be444c0aa56830130ddf77d317344e1af3591981a925\",\n\t},\n\t{\n\t\t\"4\",\n\t\t\"ae99feebb5d26945b54892092a8aee02912930fa41cd114e40447301\",\n\t\t\"482580a0ec5bc47e88bc8c378632cd196cb3fa058a7114eb03054c9\",\n\t},\n\t{\n\t\t\"5\",\n\t\t\"31c49ae75bce7807cdff22055d94ee9021fedbb5ab51c57526f011aa\",\n\t\t\"27e8bff1745635ec5ba0c9f1c2ede15414c6507d29ffe37e790a079b\",\n\t},\n\t{\n\t\t\"6\",\n\t\t\"1f2483f82572251fca975fea40db821df8ad82a3c002ee6c57112408\",\n\t\t\"89faf0ccb750d99b553c574fad7ecfb0438586eb3952af5b4b153c7e\",\n\t},\n\t{\n\t\t\"7\",\n\t\t\"db2f6be630e246a5cf7d99b85194b123d487e2d466b94b24a03c3e28\",\n\t\t\"f3a30085497f2f611ee2517b163ef8c53b715d18bb4e4808d02b963\",\n\t},\n\t{\n\t\t\"8\",\n\t\t\"858e6f9cc6c12c31f5df124aa77767b05c8bc021bd683d2b55571550\",\n\t\t\"46dcd3ea5c43898c5c5fc4fdac7db39c2f02ebee4e3541d1e78047a\",\n\t},\n\t{\n\t\t\"9\",\n\t\t\"2fdcccfee720a77ef6cb3bfbb447f9383117e3daa4a07e36ed15f78d\",\n\t\t\"371732e4f41bf4f7883035e6a79fcedc0e196eb07b48171697517463\",\n\t},\n\t{\n\t\t\"10\",\n\t\t\"aea9e17a306517eb89152aa7096d2c381ec813c51aa880e7bee2c0fd\",\n\t\t\"39bb30eab337e0a521b6cba1abe4b2b3a3e524c14a3fe3eb116b655f\",\n\t},\n\t{\n\t\t\"11\",\n\t\t\"ef53b6294aca431f0f3c22dc82eb9050324f1d88d377e716448e507c\",\n\t\t\"20b510004092e96636cfb7e32efded8265c266dfb754fa6d6491a6da\",\n\t},\n\t{\n\t\t\"12\",\n\t\t\"6e31ee1dc137f81b056752e4deab1443a481033e9b4c93a3044f4f7a\",\n\t\t\"207dddf0385bfdeab6e9acda8da06b3bbef224a93ab1e9e036109d13\",\n\t},\n\t{\n\t\t\"13\",\n\t\t\"34e8e17a430e43289793c383fac9774247b40e9ebd3366981fcfaeca\",\n\t\t\"252819f71c7fb7fbcb159be337d37d3336d7feb963724fdfb0ecb767\",\n\t},\n\t{\n\t\t\"14\",\n\t\t\"a53640c83dc208603ded83e4ecf758f24c357d7cf48088b2ce01e9fa\",\n\t\t\"d5814cd724199c4a5b974a43685fbf5b8bac69459c9469bc8f23ccaf\",\n\t},\n\t{\n\t\t\"15\",\n\t\t\"baa4d8635511a7d288aebeedd12ce529ff102c91f97f867e21916bf9\",\n\t\t\"979a5f4759f80f4fb4ec2e34f5566d595680a11735e7b61046127989\",\n\t},\n\t{\n\t\t\"16\",\n\t\t\"b6ec4fe1777382404ef679997ba8d1cc5cd8e85349259f590c4c66d\",\n\t\t\"3399d464345906b11b00e363ef429221f2ec720d2f665d7dead5b482\",\n\t},\n\t{\n\t\t\"17\",\n\t\t\"b8357c3a6ceef288310e17b8bfeff9200846ca8c1942497c484403bc\",\n\t\t\"ff149efa6606a6bd20ef7d1b06bd92f6904639dce5174db6cc554a26\",\n\t},\n\t{\n\t\t\"18\",\n\t\t\"c9ff61b040874c0568479216824a15eab1a838a797d189746226e4cc\",\n\t\t\"ea98d60e5ffc9b8fcf999fab1df7e7ef7084f20ddb61bb045a6ce002\",\n\t},\n\t{\n\t\t\"19\",\n\t\t\"a1e81c04f30ce201c7c9ace785ed44cc33b455a022f2acdbc6cae83c\",\n\t\t\"dcf1f6c3db09c70acc25391d492fe25b4a180babd6cea356c04719cd\",\n\t},\n\t{\n\t\t\"20\",\n\t\t\"fcc7f2b45df1cd5a3c0c0731ca47a8af75cfb0347e8354eefe782455\",\n\t\t\"d5d7110274cba7cdee90e1a8b0d394c376a5573db6be0bf2747f530\",\n\t},\n\t{\n\t\t\"112233445566778899\",\n\t\t\"61f077c6f62ed802dad7c2f38f5c67f2cc453601e61bd076bb46179e\",\n\t\t\"2272f9e9f5933e70388ee652513443b5e289dd135dcc0d0299b225e4\",\n\t},\n\t{\n\t\t\"112233445566778899112233445566778899\",\n\t\t\"29895f0af496bfc62b6ef8d8a65c88c613949b03668aab4f0429e35\",\n\t\t\"3ea6e53f9a841f2019ec24bde1a75677aa9b5902e61081c01064de93\",\n\t},\n\t{\n\t\t\"6950511619965839450988900688150712778015737983940691968051900319680\",\n\t\t\"ab689930bcae4a4aa5f5cb085e823e8ae30fd365eb1da4aba9cf0379\",\n\t\t\"3345a121bbd233548af0d210654eb40bab788a03666419be6fbd34e7\",\n\t},\n\t{\n\t\t\"13479972933410060327035789020509431695094902435494295338570602119423\",\n\t\t\"bdb6a8817c1f89da1c2f3dd8e97feb4494f2ed302a4ce2bc7f5f4025\",\n\t\t\"4c7020d57c00411889462d77a5438bb4e97d177700bf7243a07f1680\",\n\t},\n\t{\n\t\t\"13479971751745682581351455311314208093898607229429740618390390702079\",\n\t\t\"d58b61aa41c32dd5eba462647dba75c5d67c83606c0af2bd928446a9\",\n\t\t\"d24ba6a837be0460dd107ae77725696d211446c5609b4595976b16bd\",\n\t},\n\t{\n\t\t\"13479972931865328106486971546324465392952975980343228160962702868479\",\n\t\t\"dc9fa77978a005510980e929a1485f63716df695d7a0c18bb518df03\",\n\t\t\"ede2b016f2ddffc2a8c015b134928275ce09e5661b7ab14ce0d1d403\",\n\t},\n\t{\n\t\t\"11795773708834916026404142434151065506931607341523388140225443265536\",\n\t\t\"499d8b2829cfb879c901f7d85d357045edab55028824d0f05ba279ba\",\n\t\t\"bf929537b06e4015919639d94f57838fa33fc3d952598dcdbb44d638\",\n\t},\n\t{\n\t\t\"784254593043826236572847595991346435467177662189391577090\",\n\t\t\"8246c999137186632c5f9eddf3b1b0e1764c5e8bd0e0d8a554b9cb77\",\n\t\t\"e80ed8660bc1cb17ac7d845be40a7a022d3306f116ae9f81fea65947\",\n\t},\n\t{\n\t\t\"13479767645505654746623887797783387853576174193480695826442858012671\",\n\t\t\"6670c20afcceaea672c97f75e2e9dd5c8460e54bb38538ebb4bd30eb\",\n\t\t\"f280d8008d07a4caf54271f993527d46ff3ff46fd1190a3f1faa4f74\",\n\t},\n\t{\n\t\t\"205688069665150753842126177372015544874550518966168735589597183\",\n\t\t\"eca934247425cfd949b795cb5ce1eff401550386e28d1a4c5a8eb\",\n\t\t\"d4c01040dba19628931bc8855370317c722cbd9ca6156985f1c2e9ce\",\n\t},\n\t{\n\t\t\"13479966930919337728895168462090683249159702977113823384618282123295\",\n\t\t\"ef353bf5c73cd551b96d596fbc9a67f16d61dd9fe56af19de1fba9cd\",\n\t\t\"21771b9cdce3e8430c09b3838be70b48c21e15bc09ee1f2d7945b91f\",\n\t},\n\t{\n\t\t\"50210731791415612487756441341851895584393717453129007497216\",\n\t\t\"4036052a3091eb481046ad3289c95d3ac905ca0023de2c03ecd451cf\",\n\t\t\"d768165a38a2b96f812586a9d59d4136035d9c853a5bf2e1c86a4993\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368041\",\n\t\t\"fcc7f2b45df1cd5a3c0c0731ca47a8af75cfb0347e8354eefe782455\",\n\t\t\"f2a28eefd8b345832116f1e574f2c6b2c895aa8c24941f40d8b80ad1\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368042\",\n\t\t\"a1e81c04f30ce201c7c9ace785ed44cc33b455a022f2acdbc6cae83c\",\n\t\t\"230e093c24f638f533dac6e2b6d01da3b5e7f45429315ca93fb8e634\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368043\",\n\t\t\"c9ff61b040874c0568479216824a15eab1a838a797d189746226e4cc\",\n\t\t\"156729f1a003647030666054e208180f8f7b0df2249e44fba5931fff\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368044\",\n\t\t\"b8357c3a6ceef288310e17b8bfeff9200846ca8c1942497c484403bc\",\n\t\t\"eb610599f95942df1082e4f9426d086fb9c6231ae8b24933aab5db\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368045\",\n\t\t\"b6ec4fe1777382404ef679997ba8d1cc5cd8e85349259f590c4c66d\",\n\t\t\"cc662b9bcba6f94ee4ff1c9c10bd6ddd0d138df2d099a282152a4b7f\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368046\",\n\t\t\"baa4d8635511a7d288aebeedd12ce529ff102c91f97f867e21916bf9\",\n\t\t\"6865a0b8a607f0b04b13d1cb0aa992a5a97f5ee8ca1849efb9ed8678\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368047\",\n\t\t\"a53640c83dc208603ded83e4ecf758f24c357d7cf48088b2ce01e9fa\",\n\t\t\"2a7eb328dbe663b5a468b5bc97a040a3745396ba636b964370dc3352\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368048\",\n\t\t\"34e8e17a430e43289793c383fac9774247b40e9ebd3366981fcfaeca\",\n\t\t\"dad7e608e380480434ea641cc82c82cbc92801469c8db0204f13489a\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368049\",\n\t\t\"6e31ee1dc137f81b056752e4deab1443a481033e9b4c93a3044f4f7a\",\n\t\t\"df82220fc7a4021549165325725f94c3410ddb56c54e161fc9ef62ee\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368050\",\n\t\t\"ef53b6294aca431f0f3c22dc82eb9050324f1d88d377e716448e507c\",\n\t\t\"df4aefffbf6d1699c930481cd102127c9a3d992048ab05929b6e5927\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368051\",\n\t\t\"aea9e17a306517eb89152aa7096d2c381ec813c51aa880e7bee2c0fd\",\n\t\t\"c644cf154cc81f5ade49345e541b4d4b5c1adb3eb5c01c14ee949aa2\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368052\",\n\t\t\"2fdcccfee720a77ef6cb3bfbb447f9383117e3daa4a07e36ed15f78d\",\n\t\t\"c8e8cd1b0be40b0877cfca1958603122f1e6914f84b7e8e968ae8b9e\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368053\",\n\t\t\"858e6f9cc6c12c31f5df124aa77767b05c8bc021bd683d2b55571550\",\n\t\t\"fb9232c15a3bc7673a3a03b0253824c53d0fd1411b1cabe2e187fb87\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368054\",\n\t\t\"db2f6be630e246a5cf7d99b85194b123d487e2d466b94b24a03c3e28\",\n\t\t\"f0c5cff7ab680d09ee11dae84e9c1072ac48ea2e744b1b7f72fd469e\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368055\",\n\t\t\"1f2483f82572251fca975fea40db821df8ad82a3c002ee6c57112408\",\n\t\t\"76050f3348af2664aac3a8b05281304ebc7a7914c6ad50a4b4eac383\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368056\",\n\t\t\"31c49ae75bce7807cdff22055d94ee9021fedbb5ab51c57526f011aa\",\n\t\t\"d817400e8ba9ca13a45f360e3d121eaaeb39af82d6001c8186f5f866\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368057\",\n\t\t\"ae99feebb5d26945b54892092a8aee02912930fa41cd114e40447301\",\n\t\t\"fb7da7f5f13a43b81774373c879cd32d6934c05fa758eeb14fcfab38\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368058\",\n\t\t\"df1b1d66a551d0d31eff822558b9d2cc75c2180279fe0d08fd896d04\",\n\t\t\"5c080fc3522f41bbb3f55a97cfecf21f882ce8cbb1e50ca6e67e56dc\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368059\",\n\t\t\"706a46dc76dcb76798e60e6d89474788d16dc18032d268fd1a704fa6\",\n\t\t\"e3d4895843da188fd58fb0567976d7b50359d6b78530c8f62d1b1746\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368060\",\n\t\t\"b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21\",\n\t\t\"42c89c774a08dc04b3dd201932bc8a5ea5f8b89bbb2a7e667aff81cd\",\n\t},\n}\n\nfunc TestBaseMult(t *testing.T) {\n\tp224 := P224()\n\tfor i, e := range p224BaseMultTests {\n\t\tk, ok := new(big.Int).SetString(e.k, 10)\n\t\tif !ok {\n\t\t\tt.Errorf(\"%d: bad value for k: %s\", i, e.k)\n\t\t}\n\t\tx, y := p224.ScalarBaseMult(k.Bytes())\n\t\tif fmt.Sprintf(\"%x\", x) != e.x || fmt.Sprintf(\"%x\", y) != e.y {\n\t\t\tt.Errorf(\"%d: bad output for k=%s: got (%x, %x), want (%s, %s)\", i, e.k, x, y, e.x, e.y)\n\t\t}\n\t\tif testing.Short() && i > 5 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc TestGenericBaseMult(t *testing.T) {\n\t// We use the P224 CurveParams directly in order to test the generic implementation.\n\tp224 := P224().Params()\n\tfor i, e := range p224BaseMultTests {\n\t\tk, ok := new(big.Int).SetString(e.k, 10)\n\t\tif !ok {\n\t\t\tt.Errorf(\"%d: bad value for k: %s\", i, e.k)\n\t\t}\n\t\tx, y := p224.ScalarBaseMult(k.Bytes())\n\t\tif fmt.Sprintf(\"%x\", x) != e.x || fmt.Sprintf(\"%x\", y) != e.y {\n\t\t\tt.Errorf(\"%d: bad output for k=%s: got (%x, %x), want (%s, %s)\", i, e.k, x, y, e.x, e.y)\n\t\t}\n\t\tif testing.Short() && i > 5 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc TestP256BaseMult(t *testing.T) {\n\tp256 := P256()\n\tp256Generic := p256.Params()\n\n\tscalars := make([]*big.Int, 0, len(p224BaseMultTests)+1)\n\tfor _, e := range p224BaseMultTests {\n\t\tk, _ := new(big.Int).SetString(e.k, 10)\n\t\tscalars = append(scalars, k)\n\t}\n\tk := new(big.Int).SetInt64(1)\n\tk.Lsh(k, 500)\n\tscalars = append(scalars, k)\n\n\tfor i, k := range scalars {\n\t\tx, y := p256.ScalarBaseMult(k.Bytes())\n\t\tx2, y2 := p256Generic.ScalarBaseMult(k.Bytes())\n\t\tif x.Cmp(x2) != 0 || y.Cmp(y2) != 0 {\n\t\t\tt.Errorf(\"#%d: got (%x, %x), want (%x, %x)\", i, x, y, x2, y2)\n\t\t}\n\n\t\tif testing.Short() && i > 5 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc TestP256Mult(t *testing.T) {\n\tp256 := P256()\n\tp256Generic := p256.Params()\n\n\tfor i, e := range p224BaseMultTests {\n\t\tx, _ := new(big.Int).SetString(e.x, 16)\n\t\ty, _ := new(big.Int).SetString(e.y, 16)\n\t\tk, _ := new(big.Int).SetString(e.k, 10)\n\n\t\txx, yy := p256.ScalarMult(x, y, k.Bytes())\n\t\txx2, yy2 := p256Generic.ScalarMult(x, y, k.Bytes())\n\t\tif xx.Cmp(xx2) != 0 || yy.Cmp(yy2) != 0 {\n\t\t\tt.Errorf(\"#%d: got (%x, %x), want (%x, %x)\", i, xx, yy, xx2, yy2)\n\t\t}\n\t\tif testing.Short() && i > 5 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc TestInfinity(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tcurve Curve\n\t}{\n\t\t{\"p224\", P224()},\n\t\t{\"p256\", P256()},\n\t}\n\n\tfor _, test := range tests {\n\t\tcurve := test.curve\n\t\tx, y := curve.ScalarBaseMult(nil)\n\t\tif x.Sign() != 0 || y.Sign() != 0 {\n\t\t\tt.Errorf(\"%s: x^0 != \u221e\", test.name)\n\t\t}\n\t\tx.SetInt64(0)\n\t\ty.SetInt64(0)\n\n\t\tx2, y2 := curve.Double(x, y)\n\t\tif x2.Sign() != 0 || y2.Sign() != 0 {\n\t\t\tt.Errorf(\"%s: 2\u221e != \u221e\", test.name)\n\t\t}\n\n\t\tbaseX := curve.Params().Gx\n\t\tbaseY := curve.Params().Gy\n\n\t\tx3, y3 := curve.Add(baseX, baseY, x, y)\n\t\tif x3.Cmp(baseX) != 0 || y3.Cmp(baseY) != 0 {\n\t\t\tt.Errorf(\"%s: x+\u221e != x\", test.name)\n\t\t}\n\n\t\tx4, y4 := curve.Add(x, y, baseX, baseY)\n\t\tif x4.Cmp(baseX) != 0 || y4.Cmp(baseY) != 0 {\n\t\t\tt.Errorf(\"%s: \u221e+x != x\", test.name)\n\t\t}\n\t}\n}\n\nfunc BenchmarkBaseMult(b *testing.B) {\n\tb.ResetTimer()\n\tp224 := P224()\n\te := p224BaseMultTests[25]\n\tk, _ := new(big.Int).SetString(e.k, 10)\n\tb.StartTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tp224.ScalarBaseMult(k.Bytes())\n\t}\n}\n\nfunc BenchmarkBaseMultP256(b *testing.B) {\n\tb.ResetTimer()\n\tp256 := P256()\n\te := p224BaseMultTests[25]\n\tk, _ := new(big.Int).SetString(e.k, 10)\n\tb.StartTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tp256.ScalarBaseMult(k.Bytes())\n\t}\n}\n\nfunc BenchmarkScalarMultP256(b *testing.B) {\n\tb.ResetTimer()\n\tp256 := P256()\n\t_, x, y, _ := GenerateKey(p256, rand.Reader)\n\tpriv, _, _, _ := GenerateKey(p256, rand.Reader)\n\n\tb.StartTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tp256.ScalarMult(x, y, priv)\n\t}\n}\n\nfunc TestMarshal(t *testing.T) {\n\tp224 := P224()\n\t_, x, y, err := GenerateKey(p224, rand.Reader)\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tserialized := Marshal(p224, x, y)\n\txx, yy := Unmarshal(p224, serialized)\n\tif xx == nil {\n\t\tt.Error(\"failed to unmarshal\")\n\t\treturn\n\t}\n\tif xx.Cmp(x) != 0 || yy.Cmp(y) != 0 {\n\t\tt.Error(\"unmarshal returned different values\")\n\t\treturn\n\t}\n}\n\nfunc TestP224Overflow(t *testing.T) {\n\t// This tests for a specific bug in the P224 implementation.\n\tp224 := P224()\n\tpointData, _ := hex.DecodeString(\"049B535B45FB0A2072398A6831834624C7E32CCFD5A4B933BCEAF77F1DD945E08BBE5178F5EDF5E733388F196D2A631D2E075BB16CBFEEA15B\")\n\tx, y := Unmarshal(p224, pointData)\n\tif !p224.IsOnCurve(x, y) {\n\t\tt.Error(\"P224 failed to validate a correct point\")\n\t}\n}\n", "// Copyright 2015 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// This file contains constant-time, 64-bit assembly implementation of\n// P256. The optimizations performed here are described in detail in:\n// S.Gueron and V.Krasnov, \"Fast prime field elliptic-curve cryptography with\n//                          256-bit primes\"\n// http://link.springer.com/article/10.1007%2Fs13389-014-0090-x\n// https://eprint.iacr.org/2013/816.pdf\n\n#include \"textflag.h\"\n\n#define res_ptr DI\n#define x_ptr SI\n#define y_ptr CX\n\n#define acc0 R8\n#define acc1 R9\n#define acc2 R10\n#define acc3 R11\n#define acc4 R12\n#define acc5 R13\n#define t0 R14\n#define t1 R15\n\nDATA p256const0<>+0x00(SB)/8, $0x00000000ffffffff\nDATA p256const1<>+0x00(SB)/8, $0xffffffff00000001\nDATA p256ordK0<>+0x00(SB)/8, $0xccd1c8aaee00bc4f\nDATA p256ord<>+0x00(SB)/8, $0xf3b9cac2fc632551\nDATA p256ord<>+0x08(SB)/8, $0xbce6faada7179e84\nDATA p256ord<>+0x10(SB)/8, $0xffffffffffffffff\nDATA p256ord<>+0x18(SB)/8, $0xffffffff00000000\nDATA p256one<>+0x00(SB)/8, $0x0000000000000001\nDATA p256one<>+0x08(SB)/8, $0xffffffff00000000\nDATA p256one<>+0x10(SB)/8, $0xffffffffffffffff\nDATA p256one<>+0x18(SB)/8, $0x00000000fffffffe\nGLOBL p256const0<>(SB), 8, $8\nGLOBL p256const1<>(SB), 8, $8\nGLOBL p256ordK0<>(SB), 8, $8\nGLOBL p256ord<>(SB), 8, $32\nGLOBL p256one<>(SB), 8, $32\n\n/* ---------------------------------------*/\n// func p256LittleToBig(res []byte, in []uint64)\nTEXT \u00b7p256LittleToBig(SB),NOSPLIT,$0\n\tJMP \u00b7p256BigToLittle(SB)\n/* ---------------------------------------*/\n// func p256BigToLittle(res []uint64, in []byte)\nTEXT \u00b7p256BigToLittle(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in+24(FP), x_ptr\n\n\tMOVQ (8*0)(x_ptr), acc0\n\tMOVQ (8*1)(x_ptr), acc1\n\tMOVQ (8*2)(x_ptr), acc2\n\tMOVQ (8*3)(x_ptr), acc3\n\n\tBSWAPQ acc0\n\tBSWAPQ acc1\n\tBSWAPQ acc2\n\tBSWAPQ acc3\n\n\tMOVQ acc3, (8*0)(res_ptr)\n\tMOVQ acc2, (8*1)(res_ptr)\n\tMOVQ acc1, (8*2)(res_ptr)\n\tMOVQ acc0, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256MovCond(res, a, b []uint64, cond int)\n// If cond == 0 res=b, else res=a\nTEXT \u00b7p256MovCond(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ a+24(FP), x_ptr\n\tMOVQ b+48(FP), y_ptr\n\tMOVQ cond+72(FP), X12\n\n\tPXOR X13, X13\n\tPSHUFD $0, X12, X12\n\tPCMPEQL X13, X12\n\n\tMOVOU X12, X0\n\tPANDN (16*0)(x_ptr), X0\n\tMOVOU X12, X1\n\tPANDN (16*1)(x_ptr), X1\n\tMOVOU X12, X2\n\tPANDN (16*2)(x_ptr), X2\n\tMOVOU X12, X3\n\tPANDN (16*3)(x_ptr), X3\n\tMOVOU X12, X4\n\tPANDN (16*4)(x_ptr), X4\n\tMOVOU X12, X5\n\tPANDN (16*5)(x_ptr), X5\n\n\tMOVOU (16*0)(y_ptr), X6\n\tMOVOU (16*1)(y_ptr), X7\n\tMOVOU (16*2)(y_ptr), X8\n\tMOVOU (16*3)(y_ptr), X9\n\tMOVOU (16*4)(y_ptr), X10\n\tMOVOU (16*5)(y_ptr), X11\n\n\tPAND X12, X6\n\tPAND X12, X7\n\tPAND X12, X8\n\tPAND X12, X9\n\tPAND X12, X10\n\tPAND X12, X11\n\n\tPXOR X6, X0\n\tPXOR X7, X1\n\tPXOR X8, X2\n\tPXOR X9, X3\n\tPXOR X10, X4\n\tPXOR X11, X5\n\n\tMOVOU X0, (16*0)(res_ptr)\n\tMOVOU X1, (16*1)(res_ptr)\n\tMOVOU X2, (16*2)(res_ptr)\n\tMOVOU X3, (16*3)(res_ptr)\n\tMOVOU X4, (16*4)(res_ptr)\n\tMOVOU X5, (16*5)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256NegCond(val []uint64, cond int)\nTEXT \u00b7p256NegCond(SB),NOSPLIT,$0\n\tMOVQ val+0(FP), res_ptr\n\tMOVQ cond+24(FP), t0\n\t// acc = poly\n\tMOVQ $-1, acc0\n\tMOVQ p256const0<>(SB), acc1\n\tMOVQ $0, acc2\n\tMOVQ p256const1<>(SB), acc3\n\t// Load the original value\n\tMOVQ (8*0)(res_ptr), acc5\n\tMOVQ (8*1)(res_ptr), x_ptr\n\tMOVQ (8*2)(res_ptr), y_ptr\n\tMOVQ (8*3)(res_ptr), t1\n\t// Speculatively subtract\n\tSUBQ acc5, acc0\n\tSBBQ x_ptr, acc1\n\tSBBQ y_ptr, acc2\n\tSBBQ t1, acc3\n\t// If condition is 0, keep original value\n\tTESTQ t0, t0\n\tCMOVQEQ acc5, acc0\n\tCMOVQEQ x_ptr, acc1\n\tCMOVQEQ y_ptr, acc2\n\tCMOVQEQ t1, acc3\n\t// Store result\n\tMOVQ acc0, (8*0)(res_ptr)\n\tMOVQ acc1, (8*1)(res_ptr)\n\tMOVQ acc2, (8*2)(res_ptr)\n\tMOVQ acc3, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256Sqr(res, in []uint64)\nTEXT \u00b7p256Sqr(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in+24(FP), x_ptr\n\t// y[1:] * y[0]\n\tMOVQ (8*0)(x_ptr), t0\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tMOVQ AX, acc1\n\tMOVQ DX, acc2\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\t// y[2:] * y[1]\n\tMOVQ (8*1)(x_ptr), t0\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, acc5\n\t// y[3] * y[2]\n\tMOVQ (8*2)(x_ptr), t0\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, y_ptr\n\tXORQ t1, t1\n\t// *2\n\tADDQ acc1, acc1\n\tADCQ acc2, acc2\n\tADCQ acc3, acc3\n\tADCQ acc4, acc4\n\tADCQ acc5, acc5\n\tADCQ y_ptr, y_ptr\n\tADCQ $0, t1\n\t// Missing products\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ AX\n\tMOVQ AX, acc0\n\tMOVQ DX, t0\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc1\n\tADCQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t0\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc3\n\tADCQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t0\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc5\n\tADCQ AX, y_ptr\n\tADCQ DX, t1\n\tMOVQ t1, x_ptr\n\t// First reduction step\n\tMOVQ acc0, AX\n\tMOVQ acc0, t1\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc0, acc1\n\tADCQ t1, acc2\n\tADCQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc0\n\t// Second reduction step\n\tMOVQ acc1, AX\n\tMOVQ acc1, t1\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc1, acc2\n\tADCQ t1, acc3\n\tADCQ AX, acc0\n\tADCQ $0, DX\n\tMOVQ DX, acc1\n\t// Third reduction step\n\tMOVQ acc2, AX\n\tMOVQ acc2, t1\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc2, acc3\n\tADCQ t1, acc0\n\tADCQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, acc2\n\t// Last reduction step\n\tXORQ t0, t0\n\tMOVQ acc3, AX\n\tMOVQ acc3, t1\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc3, acc0\n\tADCQ t1, acc1\n\tADCQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\t// Add bits [511:256] of the sqr result\n\tADCQ acc4, acc0\n\tADCQ acc5, acc1\n\tADCQ y_ptr, acc2\n\tADCQ x_ptr, acc3\n\tADCQ $0, t0\n\n\tMOVQ acc0, acc4\n\tMOVQ acc1, acc5\n\tMOVQ acc2, y_ptr\n\tMOVQ acc3, t1\n\t// Subtract p256\n\tSUBQ $-1, acc0\n\tSBBQ p256const0<>(SB) ,acc1\n\tSBBQ $0, acc2\n\tSBBQ p256const1<>(SB), acc3\n\tSBBQ $0, t0\n\n\tCMOVQCS acc4, acc0\n\tCMOVQCS acc5, acc1\n\tCMOVQCS y_ptr, acc2\n\tCMOVQCS t1, acc3\n\n\tMOVQ acc0, (8*0)(res_ptr)\n\tMOVQ acc1, (8*1)(res_ptr)\n\tMOVQ acc2, (8*2)(res_ptr)\n\tMOVQ acc3, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256Mul(res, in1, in2 []uint64)\nTEXT \u00b7p256Mul(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in1+24(FP), x_ptr\n\tMOVQ in2+48(FP), y_ptr\n\t// x * y[0]\n\tMOVQ (8*0)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tMOVQ AX, acc0\n\tMOVQ DX, acc1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, acc2\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\tXORQ acc5, acc5\n\t// First reduction step\n\tMOVQ acc0, AX\n\tMOVQ acc0, t1\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc0, acc1\n\tADCQ t1, acc2\n\tADCQ AX, acc3\n\tADCQ DX, acc4\n\tADCQ $0, acc5\n\tXORQ acc0, acc0\n\t// x * y[1]\n\tMOVQ (8*1)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ DX, acc5\n\tADCQ $0, acc0\n\t// Second reduction step\n\tMOVQ acc1, AX\n\tMOVQ acc1, t1\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc1, acc2\n\tADCQ t1, acc3\n\tADCQ AX, acc4\n\tADCQ DX, acc5\n\tADCQ $0, acc0\n\tXORQ acc1, acc1\n\t// x * y[2]\n\tMOVQ (8*2)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ DX, acc0\n\tADCQ $0, acc1\n\t// Third reduction step\n\tMOVQ acc2, AX\n\tMOVQ acc2, t1\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc2, acc3\n\tADCQ t1, acc4\n\tADCQ AX, acc5\n\tADCQ DX, acc0\n\tADCQ $0, acc1\n\tXORQ acc2, acc2\n\t// x * y[3]\n\tMOVQ (8*3)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc0\n\tADCQ $0, DX\n\tADDQ AX, acc0\n\tADCQ DX, acc1\n\tADCQ $0, acc2\n\t// Last reduction step\n\tMOVQ acc3, AX\n\tMOVQ acc3, t1\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc3, acc4\n\tADCQ t1, acc5\n\tADCQ AX, acc0\n\tADCQ DX, acc1\n\tADCQ $0, acc2\n\t// Copy result [255:0]\n\tMOVQ acc4, x_ptr\n\tMOVQ acc5, acc3\n\tMOVQ acc0, t0\n\tMOVQ acc1, t1\n\t// Subtract p256\n\tSUBQ $-1, acc4\n\tSBBQ p256const0<>(SB) ,acc5\n\tSBBQ $0, acc0\n\tSBBQ p256const1<>(SB), acc1\n\tSBBQ $0, acc2\n\n\tCMOVQCS x_ptr, acc4\n\tCMOVQCS acc3, acc5\n\tCMOVQCS t0, acc0\n\tCMOVQCS t1, acc1\n\n\tMOVQ acc4, (8*0)(res_ptr)\n\tMOVQ acc5, (8*1)(res_ptr)\n\tMOVQ acc0, (8*2)(res_ptr)\n\tMOVQ acc1, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256FromMont(res, in []uint64)\nTEXT \u00b7p256FromMont(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in+24(FP), x_ptr\n\n\tMOVQ (8*0)(x_ptr), acc0\n\tMOVQ (8*1)(x_ptr), acc1\n\tMOVQ (8*2)(x_ptr), acc2\n\tMOVQ (8*3)(x_ptr), acc3\n\tXORQ acc4, acc4\n\n\t// Only reduce, no multiplications are needed\n\t// First stage\n\tMOVQ acc0, AX\n\tMOVQ acc0, t1\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc0, acc1\n\tADCQ t1, acc2\n\tADCQ AX, acc3\n\tADCQ DX, acc4\n\tXORQ acc5, acc5\n\t// Second stage\n\tMOVQ acc1, AX\n\tMOVQ acc1, t1\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc1, acc2\n\tADCQ t1, acc3\n\tADCQ AX, acc4\n\tADCQ DX, acc5\n\tXORQ acc0, acc0\n\t// Third stage\n\tMOVQ acc2, AX\n\tMOVQ acc2, t1\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc2, acc3\n\tADCQ t1, acc4\n\tADCQ AX, acc5\n\tADCQ DX, acc0\n\tXORQ acc1, acc1\n\t// Last stage\n\tMOVQ acc3, AX\n\tMOVQ acc3, t1\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc3, acc4\n\tADCQ t1, acc5\n\tADCQ AX, acc0\n\tADCQ DX, acc1\n\n\tMOVQ acc4, x_ptr\n\tMOVQ acc5, acc3\n\tMOVQ acc0, t0\n\tMOVQ acc1, t1\n\n\tSUBQ $-1, acc4\n\tSBBQ p256const0<>(SB), acc5\n\tSBBQ $0, acc0\n\tSBBQ p256const1<>(SB), acc1\n\n\tCMOVQCS x_ptr, acc4\n\tCMOVQCS acc3, acc5\n\tCMOVQCS t0, acc0\n\tCMOVQCS t1, acc1\n\n\tMOVQ acc4, (8*0)(res_ptr)\n\tMOVQ acc5, (8*1)(res_ptr)\n\tMOVQ acc0, (8*2)(res_ptr)\n\tMOVQ acc1, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// Constant time point access to arbitrary point table.\n// Indexed from 1 to 15, with -1 offset\n// (index 0 is implicitly point at infinity)\n// func p256Select(point, table []uint64, idx int)\nTEXT \u00b7p256Select(SB),NOSPLIT,$0\n\tMOVQ idx+48(FP),AX\n\tMOVQ table+24(FP),DI\n\tMOVQ point+0(FP),DX\n\n\tPXOR X15, X15\t// X15 = 0\n\tPCMPEQL X14, X14 // X14 = -1\n\tPSUBL X14, X15   // X15 = 1\n\tMOVL AX, X14\n\tPSHUFD $0, X14, X14\n\n\tPXOR X0, X0\n\tPXOR X1, X1\n\tPXOR X2, X2\n\tPXOR X3, X3\n\tPXOR X4, X4\n\tPXOR X5, X5\n\tMOVQ $16, AX\n\n\tMOVOU X15, X13\n\nloop_select:\n\n\t\tMOVOU X13, X12\n\t\tPADDL X15, X13\n\t\tPCMPEQL X14, X12\n\n\t\tMOVOU (16*0)(DI), X6\n\t\tMOVOU (16*1)(DI), X7\n\t\tMOVOU (16*2)(DI), X8\n\t\tMOVOU (16*3)(DI), X9\n\t\tMOVOU (16*4)(DI), X10\n\t\tMOVOU (16*5)(DI), X11\n\t\tADDQ $(16*6), DI\n\n\t\tPAND X12, X6\n\t\tPAND X12, X7\n\t\tPAND X12, X8\n\t\tPAND X12, X9\n\t\tPAND X12, X10\n\t\tPAND X12, X11\n\n\t\tPXOR X6, X0\n\t\tPXOR X7, X1\n\t\tPXOR X8, X2\n\t\tPXOR X9, X3\n\t\tPXOR X10, X4\n\t\tPXOR X11, X5\n\n\t\tDECQ AX\n\t\tJNE loop_select\n\n\tMOVOU X0, (16*0)(DX)\n\tMOVOU X1, (16*1)(DX)\n\tMOVOU X2, (16*2)(DX)\n\tMOVOU X3, (16*3)(DX)\n\tMOVOU X4, (16*4)(DX)\n\tMOVOU X5, (16*5)(DX)\n\n\tRET\n/* ---------------------------------------*/\n// Constant time point access to base point table.\n// func p256SelectBase(point, table []uint64, idx int)\nTEXT \u00b7p256SelectBase(SB),NOSPLIT,$0\n\tMOVQ idx+48(FP),AX\n\tMOVQ table+24(FP),DI\n\tMOVQ point+0(FP),DX\n\n\tPXOR X15, X15\t// X15 = 0\n\tPCMPEQL X14, X14 // X14 = -1\n\tPSUBL X14, X15   // X15 = 1\n\tMOVL AX, X14\n\tPSHUFD $0, X14, X14\n\n\tPXOR X0, X0\n\tPXOR X1, X1\n\tPXOR X2, X2\n\tPXOR X3, X3\n\tMOVQ $32, AX\n\n\tMOVOU X15, X13\n\nloop_select_base:\n\n\t\tMOVOU X13, X12\n\t\tPADDL X15, X13\n\t\tPCMPEQL X14, X12\n\n\t\tMOVOU (16*0)(DI), X4\n\t\tMOVOU (16*1)(DI), X5\n\t\tMOVOU (16*2)(DI), X6\n\t\tMOVOU (16*3)(DI), X7\n\n\t\tMOVOU (16*4)(DI), X8\n\t\tMOVOU (16*5)(DI), X9\n\t\tMOVOU (16*6)(DI), X10\n\t\tMOVOU (16*7)(DI), X11\n\n\t\tADDQ $(16*8), DI\n\n\t\tPAND X12, X4\n\t\tPAND X12, X5\n\t\tPAND X12, X6\n\t\tPAND X12, X7\n\n\t\tMOVOU X13, X12\n\t\tPADDL X15, X13\n\t\tPCMPEQL X14, X12\n\n\t\tPAND X12, X8\n\t\tPAND X12, X9\n\t\tPAND X12, X10\n\t\tPAND X12, X11\n\n\t\tPXOR X4, X0\n\t\tPXOR X5, X1\n\t\tPXOR X6, X2\n\t\tPXOR X7, X3\n\n\t\tPXOR X8, X0\n\t\tPXOR X9, X1\n\t\tPXOR X10, X2\n\t\tPXOR X11, X3\n\n\t\tDECQ AX\n\t\tJNE loop_select_base\n\n\tMOVOU X0, (16*0)(DX)\n\tMOVOU X1, (16*1)(DX)\n\tMOVOU X2, (16*2)(DX)\n\tMOVOU X3, (16*3)(DX)\n\n\tRET\n/* ---------------------------------------*/\n// func p256OrdMul(res, in1, in2 []uint64)\nTEXT \u00b7p256OrdMul(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in1+24(FP), x_ptr\n\tMOVQ in2+48(FP), y_ptr\n\t// x * y[0]\n\tMOVQ (8*0)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tMOVQ AX, acc0\n\tMOVQ DX, acc1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, acc2\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\tXORQ acc5, acc5\n\t// First reduction step\n\tMOVQ acc0, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc0\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc1\n\tADCQ $0, DX\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x10(SB), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x18(SB), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ DX, acc4\n\tADCQ $0, acc5\n\t// x * y[1]\n\tMOVQ (8*1)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ DX, acc5\n\tADCQ $0, acc0\n\t// Second reduction step\n\tMOVQ acc1, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x10(SB), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x18(SB), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ DX, acc5\n\tADCQ $0, acc0\n\t// x * y[2]\n\tMOVQ (8*2)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ DX, acc0\n\tADCQ $0, acc1\n\t// Third reduction step\n\tMOVQ acc2, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x10(SB), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x18(SB), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ DX, acc0\n\tADCQ $0, acc1\n\t// x * y[3]\n\tMOVQ (8*3)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc0\n\tADCQ $0, DX\n\tADDQ AX, acc0\n\tADCQ DX, acc1\n\tADCQ $0, acc2\n\t// Last reduction step\n\tMOVQ acc3, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x10(SB), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x18(SB), AX\n\tMULQ t0\n\tADDQ t1, acc0\n\tADCQ $0, DX\n\tADDQ AX, acc0\n\tADCQ DX, acc1\n\tADCQ $0, acc2\n\t// Copy result [255:0]\n\tMOVQ acc4, x_ptr\n\tMOVQ acc5, acc3\n\tMOVQ acc0, t0\n\tMOVQ acc1, t1\n\t// Subtract p256\n\tSUBQ p256ord<>+0x00(SB), acc4\n\tSBBQ p256ord<>+0x08(SB) ,acc5\n\tSBBQ p256ord<>+0x10(SB), acc0\n\tSBBQ p256ord<>+0x18(SB), acc1\n\tSBBQ $0, acc2\n\n\tCMOVQCS x_ptr, acc4\n\tCMOVQCS acc3, acc5\n\tCMOVQCS t0, acc0\n\tCMOVQCS t1, acc1\n\n\tMOVQ acc4, (8*0)(res_ptr)\n\tMOVQ acc5, (8*1)(res_ptr)\n\tMOVQ acc0, (8*2)(res_ptr)\n\tMOVQ acc1, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256OrdSqr(res, in []uint64, n int)\nTEXT \u00b7p256OrdSqr(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in+24(FP), x_ptr\n\tMOVQ n+48(FP), BX\n\nordSqrLoop:\n\n\t// y[1:] * y[0]\n\tMOVQ (8*0)(x_ptr), t0\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tMOVQ AX, acc1\n\tMOVQ DX, acc2\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\t// y[2:] * y[1]\n\tMOVQ (8*1)(x_ptr), t0\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, acc5\n\t// y[3] * y[2]\n\tMOVQ (8*2)(x_ptr), t0\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, y_ptr\n\tXORQ t1, t1\n\t// *2\n\tADDQ acc1, acc1\n\tADCQ acc2, acc2\n\tADCQ acc3, acc3\n\tADCQ acc4, acc4\n\tADCQ acc5, acc5\n\tADCQ y_ptr, y_ptr\n\tADCQ $0, t1\n\t// Missing products\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ AX\n\tMOVQ AX, acc0\n\tMOVQ DX, t0\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc1\n\tADCQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t0\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc3\n\tADCQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t0\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc5\n\tADCQ AX, y_ptr\n\tADCQ DX, t1\n\tMOVQ t1, x_ptr\n\t// First reduction step\n\tMOVQ acc0, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc0\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc1\n\tADCQ $0, DX\n\tADDQ AX, acc1\n\n\tMOVQ t0, t1\n\tADCQ DX, acc2\n\tADCQ $0, t1\n\tSUBQ t0, acc2\n\tSBBQ $0, t1\n\n\tMOVQ t0, AX\n\tMOVQ t0, DX\n\tMOVQ t0, acc0\n\tSHLQ $32, AX\n\tSHRQ $32, DX\n\n\tADDQ t1, acc3\n\tADCQ $0, acc0\n\tSUBQ AX, acc3\n\tSBBQ DX, acc0\n\t// Second reduction step\n\tMOVQ acc1, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\n\tMOVQ t0, t1\n\tADCQ DX, acc3\n\tADCQ $0, t1\n\tSUBQ t0, acc3\n\tSBBQ $0, t1\n\n\tMOVQ t0, AX\n\tMOVQ t0, DX\n\tMOVQ t0, acc1\n\tSHLQ $32, AX\n\tSHRQ $32, DX\n\n\tADDQ t1, acc0\n\tADCQ $0, acc1\n\tSUBQ AX, acc0\n\tSBBQ DX, acc1\n\t// Third reduction step\n\tMOVQ acc2, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\n\tMOVQ t0, t1\n\tADCQ DX, acc0\n\tADCQ $0, t1\n\tSUBQ t0, acc0\n\tSBBQ $0, t1\n\n\tMOVQ t0, AX\n\tMOVQ t0, DX\n\tMOVQ t0, acc2\n\tSHLQ $32, AX\n\tSHRQ $32, DX\n\n\tADDQ t1, acc1\n\tADCQ $0, acc2\n\tSUBQ AX, acc1\n\tSBBQ DX, acc2\n\t// Last reduction step\n\tMOVQ acc3, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc0\n\tADCQ $0, DX\n\tADDQ AX, acc0\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ t0, t1\n\tADCQ DX, acc1\n\tADCQ $0, t1\n\tSUBQ t0, acc1\n\tSBBQ $0, t1\n\n\tMOVQ t0, AX\n\tMOVQ t0, DX\n\tMOVQ t0, acc3\n\tSHLQ $32, AX\n\tSHRQ $32, DX\n\n\tADDQ t1, acc2\n\tADCQ $0, acc3\n\tSUBQ AX, acc2\n\tSBBQ DX, acc3\n\tXORQ t0, t0\n\t// Add bits [511:256] of the sqr result\n\tADCQ acc4, acc0\n\tADCQ acc5, acc1\n\tADCQ y_ptr, acc2\n\tADCQ x_ptr, acc3\n\tADCQ $0, t0\n\n\tMOVQ acc0, acc4\n\tMOVQ acc1, acc5\n\tMOVQ acc2, y_ptr\n\tMOVQ acc3, t1\n\t// Subtract p256\n\tSUBQ p256ord<>+0x00(SB), acc0\n\tSBBQ p256ord<>+0x08(SB) ,acc1\n\tSBBQ p256ord<>+0x10(SB), acc2\n\tSBBQ p256ord<>+0x18(SB), acc3\n\tSBBQ $0, t0\n\n\tCMOVQCS acc4, acc0\n\tCMOVQCS acc5, acc1\n\tCMOVQCS y_ptr, acc2\n\tCMOVQCS t1, acc3\n\n\tMOVQ acc0, (8*0)(res_ptr)\n\tMOVQ acc1, (8*1)(res_ptr)\n\tMOVQ acc2, (8*2)(res_ptr)\n\tMOVQ acc3, (8*3)(res_ptr)\n\tMOVQ res_ptr, x_ptr\n\tDECQ BX\n\tJNE ordSqrLoop\n\n\tRET\n/* ---------------------------------------*/\n#undef res_ptr\n#undef x_ptr\n#undef y_ptr\n\n#undef acc0\n#undef acc1\n#undef acc2\n#undef acc3\n#undef acc4\n#undef acc5\n#undef t0\n#undef t1\n/* ---------------------------------------*/\n#define mul0 AX\n#define mul1 DX\n#define acc0 BX\n#define acc1 CX\n#define acc2 R8\n#define acc3 R9\n#define acc4 R10\n#define acc5 R11\n#define acc6 R12\n#define acc7 R13\n#define t0 R14\n#define t1 R15\n#define t2 DI\n#define t3 SI\n#define hlp BP\n/* ---------------------------------------*/\nTEXT p256SubInternal(SB),NOSPLIT,$0\n\tXORQ mul0, mul0\n\tSUBQ t0, acc4\n\tSBBQ t1, acc5\n\tSBBQ t2, acc6\n\tSBBQ t3, acc7\n\tSBBQ $0, mul0\n\n\tMOVQ acc4, acc0\n\tMOVQ acc5, acc1\n\tMOVQ acc6, acc2\n\tMOVQ acc7, acc3\n\n\tADDQ $-1, acc4\n\tADCQ p256const0<>(SB), acc5\n\tADCQ $0, acc6\n\tADCQ p256const1<>(SB), acc7\n\tADCQ $0, mul0\n\n\tCMOVQNE acc0, acc4\n\tCMOVQNE acc1, acc5\n\tCMOVQNE acc2, acc6\n\tCMOVQNE acc3, acc7\n\n\tRET\n/* ---------------------------------------*/\nTEXT p256MulInternal(SB),NOSPLIT,$0\n\tMOVQ acc4, mul0\n\tMULQ t0\n\tMOVQ mul0, acc0\n\tMOVQ mul1, acc1\n\n\tMOVQ acc4, mul0\n\tMULQ t1\n\tADDQ mul0, acc1\n\tADCQ $0, mul1\n\tMOVQ mul1, acc2\n\n\tMOVQ acc4, mul0\n\tMULQ t2\n\tADDQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, acc3\n\n\tMOVQ acc4, mul0\n\tMULQ t3\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, acc4\n\n\tMOVQ acc5, mul0\n\tMULQ t0\n\tADDQ mul0, acc1\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc5, mul0\n\tMULQ t1\n\tADDQ hlp, acc2\n\tADCQ $0, mul1\n\tADDQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc5, mul0\n\tMULQ t2\n\tADDQ hlp, acc3\n\tADCQ $0, mul1\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc5, mul0\n\tMULQ t3\n\tADDQ hlp, acc4\n\tADCQ $0, mul1\n\tADDQ mul0, acc4\n\tADCQ $0, mul1\n\tMOVQ mul1, acc5\n\n\tMOVQ acc6, mul0\n\tMULQ t0\n\tADDQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc6, mul0\n\tMULQ t1\n\tADDQ hlp, acc3\n\tADCQ $0, mul1\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc6, mul0\n\tMULQ t2\n\tADDQ hlp, acc4\n\tADCQ $0, mul1\n\tADDQ mul0, acc4\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc6, mul0\n\tMULQ t3\n\tADDQ hlp, acc5\n\tADCQ $0, mul1\n\tADDQ mul0, acc5\n\tADCQ $0, mul1\n\tMOVQ mul1, acc6\n\n\tMOVQ acc7, mul0\n\tMULQ t0\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc7, mul0\n\tMULQ t1\n\tADDQ hlp, acc4\n\tADCQ $0, mul1\n\tADDQ mul0, acc4\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc7, mul0\n\tMULQ t2\n\tADDQ hlp, acc5\n\tADCQ $0, mul1\n\tADDQ mul0, acc5\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc7, mul0\n\tMULQ t3\n\tADDQ hlp, acc6\n\tADCQ $0, mul1\n\tADDQ mul0, acc6\n\tADCQ $0, mul1\n\tMOVQ mul1, acc7\n\t// First reduction step\n\tMOVQ acc0, mul0\n\tMOVQ acc0, hlp\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc0, acc1\n\tADCQ hlp, acc2\n\tADCQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, acc0\n\t// Second reduction step\n\tMOVQ acc1, mul0\n\tMOVQ acc1, hlp\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc1, acc2\n\tADCQ hlp, acc3\n\tADCQ mul0, acc0\n\tADCQ $0, mul1\n\tMOVQ mul1, acc1\n\t// Third reduction step\n\tMOVQ acc2, mul0\n\tMOVQ acc2, hlp\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc2, acc3\n\tADCQ hlp, acc0\n\tADCQ mul0, acc1\n\tADCQ $0, mul1\n\tMOVQ mul1, acc2\n\t// Last reduction step\n\tMOVQ acc3, mul0\n\tMOVQ acc3, hlp\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc3, acc0\n\tADCQ hlp, acc1\n\tADCQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, acc3\n\tBYTE $0x48; BYTE $0xc7; BYTE $0xc5; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00   // MOVQ $0, BP\n\t// Add bits [511:256] of the result\n\tADCQ acc0, acc4\n\tADCQ acc1, acc5\n\tADCQ acc2, acc6\n\tADCQ acc3, acc7\n\tADCQ $0, hlp\n\t// Copy result\n\tMOVQ acc4, acc0\n\tMOVQ acc5, acc1\n\tMOVQ acc6, acc2\n\tMOVQ acc7, acc3\n\t// Subtract p256\n\tSUBQ $-1, acc4\n\tSBBQ p256const0<>(SB) ,acc5\n\tSBBQ $0, acc6\n\tSBBQ p256const1<>(SB), acc7\n\tSBBQ $0, hlp\n\t// If the result of the subtraction is negative, restore the previous result\n\tCMOVQCS acc0, acc4\n\tCMOVQCS acc1, acc5\n\tCMOVQCS acc2, acc6\n\tCMOVQCS acc3, acc7\n\n\tRET\n/* ---------------------------------------*/\nTEXT p256SqrInternal(SB),NOSPLIT,$0\n\n\tMOVQ acc4, mul0\n\tMULQ acc5\n\tMOVQ mul0, acc1\n\tMOVQ mul1, acc2\n\n\tMOVQ acc4, mul0\n\tMULQ acc6\n\tADDQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, acc3\n\n\tMOVQ acc4, mul0\n\tMULQ acc7\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, t0\n\n\tMOVQ acc5, mul0\n\tMULQ acc6\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc5, mul0\n\tMULQ acc7\n\tADDQ hlp, t0\n\tADCQ $0, mul1\n\tADDQ mul0, t0\n\tADCQ $0, mul1\n\tMOVQ mul1, t1\n\n\tMOVQ acc6, mul0\n\tMULQ acc7\n\tADDQ mul0, t1\n\tADCQ $0, mul1\n\tMOVQ mul1, t2\n\tXORQ t3, t3\n\t// *2\n\tADDQ acc1, acc1\n\tADCQ acc2, acc2\n\tADCQ acc3, acc3\n\tADCQ t0, t0\n\tADCQ t1, t1\n\tADCQ t2, t2\n\tADCQ $0, t3\n\t// Missing products\n\tMOVQ acc4, mul0\n\tMULQ mul0\n\tMOVQ mul0, acc0\n\tMOVQ DX, acc4\n\n\tMOVQ acc5, mul0\n\tMULQ mul0\n\tADDQ acc4, acc1\n\tADCQ mul0, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\n\tMOVQ acc6, mul0\n\tMULQ mul0\n\tADDQ acc4, acc3\n\tADCQ mul0, t0\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\n\tMOVQ acc7, mul0\n\tMULQ mul0\n\tADDQ acc4, t1\n\tADCQ mul0, t2\n\tADCQ DX, t3\n\t// First reduction step\n\tMOVQ acc0, mul0\n\tMOVQ acc0, hlp\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc0, acc1\n\tADCQ hlp, acc2\n\tADCQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, acc0\n\t// Second reduction step\n\tMOVQ acc1, mul0\n\tMOVQ acc1, hlp\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc1, acc2\n\tADCQ hlp, acc3\n\tADCQ mul0, acc0\n\tADCQ $0, mul1\n\tMOVQ mul1, acc1\n\t// Third reduction step\n\tMOVQ acc2, mul0\n\tMOVQ acc2, hlp\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc2, acc3\n\tADCQ hlp, acc0\n\tADCQ mul0, acc1\n\tADCQ $0, mul1\n\tMOVQ mul1, acc2\n\t// Last reduction step\n\tMOVQ acc3, mul0\n\tMOVQ acc3, hlp\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc3, acc0\n\tADCQ hlp, acc1\n\tADCQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, acc3\n\tBYTE $0x48; BYTE $0xc7; BYTE $0xc5; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00   // MOVQ $0, BP\n\t// Add bits [511:256] of the result\n\tADCQ acc0, t0\n\tADCQ acc1, t1\n\tADCQ acc2, t2\n\tADCQ acc3, t3\n\tADCQ $0, hlp\n\t// Copy result\n\tMOVQ t0, acc4\n\tMOVQ t1, acc5\n\tMOVQ t2, acc6\n\tMOVQ t3, acc7\n\t// Subtract p256\n\tSUBQ $-1, acc4\n\tSBBQ p256const0<>(SB) ,acc5\n\tSBBQ $0, acc6\n\tSBBQ p256const1<>(SB), acc7\n\tSBBQ $0, hlp\n\t// If the result of the subtraction is negative, restore the previous result\n\tCMOVQCS t0, acc4\n\tCMOVQCS t1, acc5\n\tCMOVQCS t2, acc6\n\tCMOVQCS t3, acc7\n\n\tRET\n/* ---------------------------------------*/\n#define p256MulBy2Inline\\\n\tXORQ mul0, mul0;\\\n\tADDQ acc4, acc4;\\\n\tADCQ acc5, acc5;\\\n\tADCQ acc6, acc6;\\\n\tADCQ acc7, acc7;\\\n\tADCQ $0, mul0;\\\n\tMOVQ acc4, t0;\\\n\tMOVQ acc5, t1;\\\n\tMOVQ acc6, t2;\\\n\tMOVQ acc7, t3;\\\n\tSUBQ $-1, t0;\\\n\tSBBQ p256const0<>(SB), t1;\\\n\tSBBQ $0, t2;\\\n\tSBBQ p256const1<>(SB), t3;\\\n\tSBBQ $0, mul0;\\\n\tCMOVQCS acc4, t0;\\\n\tCMOVQCS acc5, t1;\\\n\tCMOVQCS acc6, t2;\\\n\tCMOVQCS acc7, t3;\n/* ---------------------------------------*/\n#define p256AddInline \\\n\tXORQ mul0, mul0;\\\n\tADDQ t0, acc4;\\\n\tADCQ t1, acc5;\\\n\tADCQ t2, acc6;\\\n\tADCQ t3, acc7;\\\n\tADCQ $0, mul0;\\\n\tMOVQ acc4, t0;\\\n\tMOVQ acc5, t1;\\\n\tMOVQ acc6, t2;\\\n\tMOVQ acc7, t3;\\\n\tSUBQ $-1, t0;\\\n\tSBBQ p256const0<>(SB), t1;\\\n\tSBBQ $0, t2;\\\n\tSBBQ p256const1<>(SB), t3;\\\n\tSBBQ $0, mul0;\\\n\tCMOVQCS acc4, t0;\\\n\tCMOVQCS acc5, t1;\\\n\tCMOVQCS acc6, t2;\\\n\tCMOVQCS acc7, t3;\n/* ---------------------------------------*/\n#define LDacc(src) MOVQ src(8*0), acc4; MOVQ src(8*1), acc5; MOVQ src(8*2), acc6; MOVQ src(8*3), acc7\n#define LDt(src)   MOVQ src(8*0), t0; MOVQ src(8*1), t1; MOVQ src(8*2), t2; MOVQ src(8*3), t3\n#define ST(dst)    MOVQ acc4, dst(8*0); MOVQ acc5, dst(8*1); MOVQ acc6, dst(8*2); MOVQ acc7, dst(8*3)\n#define STt(dst)   MOVQ t0, dst(8*0); MOVQ t1, dst(8*1); MOVQ t2, dst(8*2); MOVQ t3, dst(8*3)\n#define acc2t      MOVQ acc4, t0; MOVQ acc5, t1; MOVQ acc6, t2; MOVQ acc7, t3\n#define t2acc      MOVQ t0, acc4; MOVQ t1, acc5; MOVQ t2, acc6; MOVQ t3, acc7\n/* ---------------------------------------*/\n#define x1in(off) (32*0 + off)(SP)\n#define y1in(off) (32*1 + off)(SP)\n#define z1in(off) (32*2 + off)(SP)\n#define x2in(off) (32*3 + off)(SP)\n#define y2in(off) (32*4 + off)(SP)\n#define xout(off) (32*5 + off)(SP)\n#define yout(off) (32*6 + off)(SP)\n#define zout(off) (32*7 + off)(SP)\n#define s2(off)   (32*8 + off)(SP)\n#define z1sqr(off) (32*9 + off)(SP)\n#define h(off)\t  (32*10 + off)(SP)\n#define r(off)\t  (32*11 + off)(SP)\n#define hsqr(off) (32*12 + off)(SP)\n#define rsqr(off) (32*13 + off)(SP)\n#define hcub(off) (32*14 + off)(SP)\n#define rptr\t  (32*15)(SP)\n#define sel_save  (32*15 + 8)(SP)\n#define zero_save (32*15 + 8 + 4)(SP)\n\n// func p256PointAddAffineAsm(res, in1, in2 []uint64, sign, sel, zero int)\nTEXT \u00b7p256PointAddAffineAsm(SB),0,$512-96\n\t// Move input to stack in order to free registers\n\tMOVQ res+0(FP), AX\n\tMOVQ in1+24(FP), BX\n\tMOVQ in2+48(FP), CX\n\tMOVQ sign+72(FP), DX\n\tMOVQ sel+80(FP), t1\n\tMOVQ zero+88(FP), t2\n\n\tMOVOU (16*0)(BX), X0\n\tMOVOU (16*1)(BX), X1\n\tMOVOU (16*2)(BX), X2\n\tMOVOU (16*3)(BX), X3\n\tMOVOU (16*4)(BX), X4\n\tMOVOU (16*5)(BX), X5\n\n\tMOVOU X0, x1in(16*0)\n\tMOVOU X1, x1in(16*1)\n\tMOVOU X2, y1in(16*0)\n\tMOVOU X3, y1in(16*1)\n\tMOVOU X4, z1in(16*0)\n\tMOVOU X5, z1in(16*1)\n\n\tMOVOU (16*0)(CX), X0\n\tMOVOU (16*1)(CX), X1\n\n\tMOVOU X0, x2in(16*0)\n\tMOVOU X1, x2in(16*1)\n\t// Store pointer to result\n\tMOVQ mul0, rptr\n\tMOVL t1, sel_save\n\tMOVL t2, zero_save\n\t// Negate y2in based on sign\n\tMOVQ (16*2 + 8*0)(CX), acc4\n\tMOVQ (16*2 + 8*1)(CX), acc5\n\tMOVQ (16*2 + 8*2)(CX), acc6\n\tMOVQ (16*2 + 8*3)(CX), acc7\n\tMOVQ $-1, acc0\n\tMOVQ p256const0<>(SB), acc1\n\tMOVQ $0, acc2\n\tMOVQ p256const1<>(SB), acc3\n\tXORQ mul0, mul0\n\t// Speculatively subtract\n\tSUBQ acc4, acc0\n\tSBBQ acc5, acc1\n\tSBBQ acc6, acc2\n\tSBBQ acc7, acc3\n\tSBBQ $0, mul0\n\tMOVQ acc0, t0\n\tMOVQ acc1, t1\n\tMOVQ acc2, t2\n\tMOVQ acc3, t3\n\t// Add in case the operand was > p256\n\tADDQ $-1, acc0\n\tADCQ p256const0<>(SB), acc1\n\tADCQ $0, acc2\n\tADCQ p256const1<>(SB), acc3\n\tADCQ $0, mul0\n\tCMOVQNE t0, acc0\n\tCMOVQNE t1, acc1\n\tCMOVQNE t2, acc2\n\tCMOVQNE t3, acc3\n\t// If condition is 0, keep original value\n\tTESTQ DX, DX\n\tCMOVQEQ acc4, acc0\n\tCMOVQEQ acc5, acc1\n\tCMOVQEQ acc6, acc2\n\tCMOVQEQ acc7, acc3\n\t// Store result\n\tMOVQ acc0, y2in(8*0)\n\tMOVQ acc1, y2in(8*1)\n\tMOVQ acc2, y2in(8*2)\n\tMOVQ acc3, y2in(8*3)\n\t// Begin point add\n\tLDacc (z1in)\n\tCALL p256SqrInternal(SB)\t// z1\u02c62\n\tST (z1sqr)\n\n\tLDt (x2in)\n\tCALL p256MulInternal(SB)\t// x2 * z1\u02c62\n\n\tLDt (x1in)\n\tCALL p256SubInternal(SB)\t// h = u2 - u1\n\tST (h)\n\n\tLDt (z1in)\n\tCALL p256MulInternal(SB)\t// z3 = h * z1\n\tST (zout)\n\n\tLDacc (z1sqr)\n\tCALL p256MulInternal(SB)\t// z1\u02c63\n\n\tLDt (y2in)\n\tCALL p256MulInternal(SB)\t// s2 = y2 * z1\u02c63\n\tST (s2)\n\n\tLDt (y1in)\n\tCALL p256SubInternal(SB)\t// r = s2 - s1\n\tST (r)\n\n\tCALL p256SqrInternal(SB)\t// rsqr = r\u02c62\n\tST (rsqr)\n\n\tLDacc (h)\n\tCALL p256SqrInternal(SB)\t// hsqr = h\u02c62\n\tST (hsqr)\n\n\tLDt (h)\n\tCALL p256MulInternal(SB)\t// hcub = h\u02c63\n\tST (hcub)\n\n\tLDt (y1in)\n\tCALL p256MulInternal(SB)\t// y1 * h\u02c63\n\tST (s2)\n\n\tLDacc (x1in)\n\tLDt (hsqr)\n\tCALL p256MulInternal(SB)\t// u1 * h\u02c62\n\tST (h)\n\n\tp256MulBy2Inline\t\t\t// u1 * h\u02c62 * 2, inline\n\tLDacc (rsqr)\n\tCALL p256SubInternal(SB)\t// r\u02c62 - u1 * h\u02c62 * 2\n\n\tLDt (hcub)\n\tCALL p256SubInternal(SB)\n\tST (xout)\n\n\tMOVQ acc4, t0\n\tMOVQ acc5, t1\n\tMOVQ acc6, t2\n\tMOVQ acc7, t3\n\tLDacc (h)\n\tCALL p256SubInternal(SB)\n\n\tLDt (r)\n\tCALL p256MulInternal(SB)\n\n\tLDt (s2)\n\tCALL p256SubInternal(SB)\n\tST (yout)\n\t// Load stored values from stack\n\tMOVQ rptr, AX\n\tMOVL sel_save, BX\n\tMOVL zero_save, CX\n\t// The result is not valid if (sel == 0), conditional choose\n\tMOVOU xout(16*0), X0\n\tMOVOU xout(16*1), X1\n\tMOVOU yout(16*0), X2\n\tMOVOU yout(16*1), X3\n\tMOVOU zout(16*0), X4\n\tMOVOU zout(16*1), X5\n\n\tMOVL BX, X6\n\tMOVL CX, X7\n\n\tPXOR X8, X8\n\tPCMPEQL X9, X9\n\n\tPSHUFD $0, X6, X6\n\tPSHUFD $0, X7, X7\n\n\tPCMPEQL X8, X6\n\tPCMPEQL X8, X7\n\n\tMOVOU X6, X15\n\tPANDN X9, X15\n\n\tMOVOU x1in(16*0), X9\n\tMOVOU x1in(16*1), X10\n\tMOVOU y1in(16*0), X11\n\tMOVOU y1in(16*1), X12\n\tMOVOU z1in(16*0), X13\n\tMOVOU z1in(16*1), X14\n\n\tPAND X15, X0\n\tPAND X15, X1\n\tPAND X15, X2\n\tPAND X15, X3\n\tPAND X15, X4\n\tPAND X15, X5\n\n\tPAND X6, X9\n\tPAND X6, X10\n\tPAND X6, X11\n\tPAND X6, X12\n\tPAND X6, X13\n\tPAND X6, X14\n\n\tPXOR X9, X0\n\tPXOR X10, X1\n\tPXOR X11, X2\n\tPXOR X12, X3\n\tPXOR X13, X4\n\tPXOR X14, X5\n\t// Similarly if zero == 0\n\tPCMPEQL X9, X9\n\tMOVOU X7, X15\n\tPANDN X9, X15\n\n\tMOVOU x2in(16*0), X9\n\tMOVOU x2in(16*1), X10\n\tMOVOU y2in(16*0), X11\n\tMOVOU y2in(16*1), X12\n\tMOVOU p256one<>+0x00(SB), X13\n\tMOVOU p256one<>+0x10(SB), X14\n\n\tPAND X15, X0\n\tPAND X15, X1\n\tPAND X15, X2\n\tPAND X15, X3\n\tPAND X15, X4\n\tPAND X15, X5\n\n\tPAND X7, X9\n\tPAND X7, X10\n\tPAND X7, X11\n\tPAND X7, X12\n\tPAND X7, X13\n\tPAND X7, X14\n\n\tPXOR X9, X0\n\tPXOR X10, X1\n\tPXOR X11, X2\n\tPXOR X12, X3\n\tPXOR X13, X4\n\tPXOR X14, X5\n\t// Finally output the result\n\tMOVOU X0, (16*0)(AX)\n\tMOVOU X1, (16*1)(AX)\n\tMOVOU X2, (16*2)(AX)\n\tMOVOU X3, (16*3)(AX)\n\tMOVOU X4, (16*4)(AX)\n\tMOVOU X5, (16*5)(AX)\n\tMOVQ $0, rptr\n\n\tRET\n#undef x1in\n#undef y1in\n#undef z1in\n#undef x2in\n#undef y2in\n#undef xout\n#undef yout\n#undef zout\n#undef s2\n#undef z1sqr\n#undef h\n#undef r\n#undef hsqr\n#undef rsqr\n#undef hcub\n#undef rptr\n#undef sel_save\n#undef zero_save\n/* ---------------------------------------*/\n#define x1in(off) (32*0 + off)(SP)\n#define y1in(off) (32*1 + off)(SP)\n#define z1in(off) (32*2 + off)(SP)\n#define x2in(off) (32*3 + off)(SP)\n#define y2in(off) (32*4 + off)(SP)\n#define z2in(off) (32*5 + off)(SP)\n\n#define xout(off) (32*6 + off)(SP)\n#define yout(off) (32*7 + off)(SP)\n#define zout(off) (32*8 + off)(SP)\n\n#define u1(off)    (32*9 + off)(SP)\n#define u2(off)    (32*10 + off)(SP)\n#define s1(off)    (32*11 + off)(SP)\n#define s2(off)    (32*12 + off)(SP)\n#define z1sqr(off) (32*13 + off)(SP)\n#define z2sqr(off) (32*14 + off)(SP)\n#define h(off)     (32*15 + off)(SP)\n#define r(off)     (32*16 + off)(SP)\n#define hsqr(off)  (32*17 + off)(SP)\n#define rsqr(off)  (32*18 + off)(SP)\n#define hcub(off)  (32*19 + off)(SP)\n#define rptr       (32*20)(SP)\n\n//func p256PointAddAsm(res, in1, in2 []uint64)\nTEXT \u00b7p256PointAddAsm(SB),0,$672-72\n\t// Move input to stack in order to free registers\n\tMOVQ res+0(FP), AX\n\tMOVQ in1+24(FP), BX\n\tMOVQ in2+48(FP), CX\n\n\tMOVOU (16*0)(BX), X0\n\tMOVOU (16*1)(BX), X1\n\tMOVOU (16*2)(BX), X2\n\tMOVOU (16*3)(BX), X3\n\tMOVOU (16*4)(BX), X4\n\tMOVOU (16*5)(BX), X5\n\n\tMOVOU X0, x1in(16*0)\n\tMOVOU X1, x1in(16*1)\n\tMOVOU X2, y1in(16*0)\n\tMOVOU X3, y1in(16*1)\n\tMOVOU X4, z1in(16*0)\n\tMOVOU X5, z1in(16*1)\n\n\tMOVOU (16*0)(CX), X0\n\tMOVOU (16*1)(CX), X1\n\tMOVOU (16*2)(CX), X2\n\tMOVOU (16*3)(CX), X3\n\tMOVOU (16*4)(CX), X4\n\tMOVOU (16*5)(CX), X5\n\n\tMOVOU X0, x2in(16*0)\n\tMOVOU X1, x2in(16*1)\n\tMOVOU X2, y2in(16*0)\n\tMOVOU X3, y2in(16*1)\n\tMOVOU X4, z2in(16*0)\n\tMOVOU X5, z2in(16*1)\n\t// Store pointer to result\n\tMOVQ AX, rptr\n\t// Begin point add\n\tLDacc (z2in)\n\tCALL p256SqrInternal(SB)\t// z2\u02c62\n\tST (z2sqr)\n\tLDt (z2in)\n\tCALL p256MulInternal(SB)\t// z2\u02c63\n\tLDt (y1in)\n\tCALL p256MulInternal(SB)\t// s1 = z2\u02c63*y1\n\tST (s1)\n\n\tLDacc (z1in)\n\tCALL p256SqrInternal(SB)\t// z1\u02c62\n\tST (z1sqr)\n\tLDt (z1in)\n\tCALL p256MulInternal(SB)\t// z1\u02c63\n\tLDt (y2in)\n\tCALL p256MulInternal(SB)\t// s2 = z1\u02c63*y2\n\tST (s2)\n\n\tLDt (s1)\n\tCALL p256SubInternal(SB)\t// r = s2 - s1\n\tST (r)\n\n\tLDacc (z2sqr)\n\tLDt (x1in)\n\tCALL p256MulInternal(SB)\t// u1 = x1 * z2\u02c62\n\tST (u1)\n\tLDacc (z1sqr)\n\tLDt (x2in)\n\tCALL p256MulInternal(SB)\t// u2 = x2 * z1\u02c62\n\tST (u2)\n\n\tLDt (u1)\n\tCALL p256SubInternal(SB)\t// h = u2 - u1\n\tST (h)\n\n\tLDacc (r)\n\tCALL p256SqrInternal(SB)\t// rsqr = r\u02c62\n\tST (rsqr)\n\n\tLDacc (h)\n\tCALL p256SqrInternal(SB)\t// hsqr = h\u02c62\n\tST (hsqr)\n\n\tLDt (h)\n\tCALL p256MulInternal(SB)\t// hcub = h\u02c63\n\tST (hcub)\n\n\tLDt (s1)\n\tCALL p256MulInternal(SB)\n\tST (s2)\n\n\tLDacc (z1in)\n\tLDt (z2in)\n\tCALL p256MulInternal(SB)\t// z1 * z2\n\tLDt (h)\n\tCALL p256MulInternal(SB)\t// z1 * z2 * h\n\tST (zout)\n\n\tLDacc (hsqr)\n\tLDt (u1)\n\tCALL p256MulInternal(SB)\t// h\u02c62 * u1\n\tST (u2)\n\n\tp256MulBy2Inline\t// u1 * h\u02c62 * 2, inline\n\tLDacc (rsqr)\n\tCALL p256SubInternal(SB)\t// r\u02c62 - u1 * h\u02c62 * 2\n\n\tLDt (hcub)\n\tCALL p256SubInternal(SB)\n\tST (xout)\n\n\tMOVQ acc4, t0\n\tMOVQ acc5, t1\n\tMOVQ acc6, t2\n\tMOVQ acc7, t3\n\tLDacc (u2)\n\tCALL p256SubInternal(SB)\n\n\tLDt (r)\n\tCALL p256MulInternal(SB)\n\n\tLDt (s2)\n\tCALL p256SubInternal(SB)\n\tST (yout)\n\n\tMOVOU xout(16*0), X0\n\tMOVOU xout(16*1), X1\n\tMOVOU yout(16*0), X2\n\tMOVOU yout(16*1), X3\n\tMOVOU zout(16*0), X4\n\tMOVOU zout(16*1), X5\n\t// Finally output the result\n\tMOVQ rptr, AX\n\tMOVQ $0, rptr\n\tMOVOU X0, (16*0)(AX)\n\tMOVOU X1, (16*1)(AX)\n\tMOVOU X2, (16*2)(AX)\n\tMOVOU X3, (16*3)(AX)\n\tMOVOU X4, (16*4)(AX)\n\tMOVOU X5, (16*5)(AX)\n\n\tRET\n#undef x1in\n#undef y1in\n#undef z1in\n#undef x2in\n#undef y2in\n#undef z2in\n#undef xout\n#undef yout\n#undef zout\n#undef s1\n#undef s2\n#undef u1\n#undef u2\n#undef z1sqr\n#undef z2sqr\n#undef h\n#undef r\n#undef hsqr\n#undef rsqr\n#undef hcub\n#undef rptr\n/* ---------------------------------------*/\n#define x(off) (32*0 + off)(SP)\n#define y(off) (32*1 + off)(SP)\n#define z(off) (32*2 + off)(SP)\n\n#define s(off)\t(32*3 + off)(SP)\n#define m(off)\t(32*4 + off)(SP)\n#define zsqr(off) (32*5 + off)(SP)\n#define tmp(off)  (32*6 + off)(SP)\n#define rptr\t  (32*7)(SP)\n\n//func p256PointDoubleAsm(res, in []uint64)\nTEXT \u00b7p256PointDoubleAsm(SB),NOSPLIT,$256-48\n\t// Move input to stack in order to free registers\n\tMOVQ res+0(FP), AX\n\tMOVQ in+24(FP), BX\n\n\tMOVOU (16*0)(BX), X0\n\tMOVOU (16*1)(BX), X1\n\tMOVOU (16*2)(BX), X2\n\tMOVOU (16*3)(BX), X3\n\tMOVOU (16*4)(BX), X4\n\tMOVOU (16*5)(BX), X5\n\n\tMOVOU X0, x(16*0)\n\tMOVOU X1, x(16*1)\n\tMOVOU X2, y(16*0)\n\tMOVOU X3, y(16*1)\n\tMOVOU X4, z(16*0)\n\tMOVOU X5, z(16*1)\n\t// Store pointer to result\n\tMOVQ AX, rptr\n\t// Begin point double\n\tLDacc (z)\n\tCALL p256SqrInternal(SB)\n\tST (zsqr)\n\n\tLDt (x)\n\tp256AddInline\n\tSTt (m)\n\n\tLDacc (z)\n\tLDt (y)\n\tCALL p256MulInternal(SB)\n\tp256MulBy2Inline\n\tMOVQ rptr, AX\n\t// Store z\n\tMOVQ t0, (16*4 + 8*0)(AX)\n\tMOVQ t1, (16*4 + 8*1)(AX)\n\tMOVQ t2, (16*4 + 8*2)(AX)\n\tMOVQ t3, (16*4 + 8*3)(AX)\n\n\tLDacc (x)\n\tLDt (zsqr)\n\tCALL p256SubInternal(SB)\n\tLDt (m)\n\tCALL p256MulInternal(SB)\n\tST (m)\n\t// Multiply by 3\n\tp256MulBy2Inline\n\tLDacc (m)\n\tp256AddInline\n\tSTt (m)\n\t////////////////////////\n\tLDacc (y)\n\tp256MulBy2Inline\n\tt2acc\n\tCALL p256SqrInternal(SB)\n\tST (s)\n\tCALL p256SqrInternal(SB)\n\t// Divide by 2\n\tXORQ mul0, mul0\n\tMOVQ acc4, t0\n\tMOVQ acc5, t1\n\tMOVQ acc6, t2\n\tMOVQ acc7, t3\n\n\tADDQ $-1, acc4\n\tADCQ p256const0<>(SB), acc5\n\tADCQ $0, acc6\n\tADCQ p256const1<>(SB), acc7\n\tADCQ $0, mul0\n\tTESTQ $1, t0\n\n\tCMOVQEQ t0, acc4\n\tCMOVQEQ t1, acc5\n\tCMOVQEQ t2, acc6\n\tCMOVQEQ t3, acc7\n\tANDQ t0, mul0\n\n\tSHRQ $1, acc4:acc5\n\tSHRQ $1, acc5:acc6\n\tSHRQ $1, acc6:acc7\n\tSHRQ $1, acc7:mul0\n\tST (y)\n\t/////////////////////////\n\tLDacc (x)\n\tLDt (s)\n\tCALL p256MulInternal(SB)\n\tST (s)\n\tp256MulBy2Inline\n\tSTt (tmp)\n\n\tLDacc (m)\n\tCALL p256SqrInternal(SB)\n\tLDt (tmp)\n\tCALL p256SubInternal(SB)\n\n\tMOVQ rptr, AX\n\t// Store x\n\tMOVQ acc4, (16*0 + 8*0)(AX)\n\tMOVQ acc5, (16*0 + 8*1)(AX)\n\tMOVQ acc6, (16*0 + 8*2)(AX)\n\tMOVQ acc7, (16*0 + 8*3)(AX)\n\n\tacc2t\n\tLDacc (s)\n\tCALL p256SubInternal(SB)\n\n\tLDt (m)\n\tCALL p256MulInternal(SB)\n\n\tLDt (y)\n\tCALL p256SubInternal(SB)\n\tMOVQ rptr, AX\n\t// Store y\n\tMOVQ acc4, (16*2 + 8*0)(AX)\n\tMOVQ acc5, (16*2 + 8*1)(AX)\n\tMOVQ acc6, (16*2 + 8*2)(AX)\n\tMOVQ acc7, (16*2 + 8*3)(AX)\n\t///////////////////////\n\tMOVQ $0, rptr\n\n\tRET\n/* ---------------------------------------*/\n\n"], "fixing_code": ["// Copyright 2010 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\npackage elliptic\n\nimport (\n\t\"crypto/rand\"\n\t\"encoding/hex\"\n\t\"fmt\"\n\t\"math/big\"\n\t\"testing\"\n)\n\nfunc TestOnCurve(t *testing.T) {\n\tp224 := P224()\n\tif !p224.IsOnCurve(p224.Params().Gx, p224.Params().Gy) {\n\t\tt.Errorf(\"FAIL\")\n\t}\n}\n\nfunc TestOffCurve(t *testing.T) {\n\tp224 := P224()\n\tx, y := new(big.Int).SetInt64(1), new(big.Int).SetInt64(1)\n\tif p224.IsOnCurve(x, y) {\n\t\tt.Errorf(\"FAIL: point off curve is claimed to be on the curve\")\n\t}\n\tb := Marshal(p224, x, y)\n\tx1, y1 := Unmarshal(p224, b)\n\tif x1 != nil || y1 != nil {\n\t\tt.Errorf(\"FAIL: unmarshaling a point not on the curve succeeded\")\n\t}\n}\n\ntype baseMultTest struct {\n\tk    string\n\tx, y string\n}\n\nvar p224BaseMultTests = []baseMultTest{\n\t{\n\t\t\"1\",\n\t\t\"b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21\",\n\t\t\"bd376388b5f723fb4c22dfe6cd4375a05a07476444d5819985007e34\",\n\t},\n\t{\n\t\t\"2\",\n\t\t\"706a46dc76dcb76798e60e6d89474788d16dc18032d268fd1a704fa6\",\n\t\t\"1c2b76a7bc25e7702a704fa986892849fca629487acf3709d2e4e8bb\",\n\t},\n\t{\n\t\t\"3\",\n\t\t\"df1b1d66a551d0d31eff822558b9d2cc75c2180279fe0d08fd896d04\",\n\t\t\"a3f7f03cadd0be444c0aa56830130ddf77d317344e1af3591981a925\",\n\t},\n\t{\n\t\t\"4\",\n\t\t\"ae99feebb5d26945b54892092a8aee02912930fa41cd114e40447301\",\n\t\t\"482580a0ec5bc47e88bc8c378632cd196cb3fa058a7114eb03054c9\",\n\t},\n\t{\n\t\t\"5\",\n\t\t\"31c49ae75bce7807cdff22055d94ee9021fedbb5ab51c57526f011aa\",\n\t\t\"27e8bff1745635ec5ba0c9f1c2ede15414c6507d29ffe37e790a079b\",\n\t},\n\t{\n\t\t\"6\",\n\t\t\"1f2483f82572251fca975fea40db821df8ad82a3c002ee6c57112408\",\n\t\t\"89faf0ccb750d99b553c574fad7ecfb0438586eb3952af5b4b153c7e\",\n\t},\n\t{\n\t\t\"7\",\n\t\t\"db2f6be630e246a5cf7d99b85194b123d487e2d466b94b24a03c3e28\",\n\t\t\"f3a30085497f2f611ee2517b163ef8c53b715d18bb4e4808d02b963\",\n\t},\n\t{\n\t\t\"8\",\n\t\t\"858e6f9cc6c12c31f5df124aa77767b05c8bc021bd683d2b55571550\",\n\t\t\"46dcd3ea5c43898c5c5fc4fdac7db39c2f02ebee4e3541d1e78047a\",\n\t},\n\t{\n\t\t\"9\",\n\t\t\"2fdcccfee720a77ef6cb3bfbb447f9383117e3daa4a07e36ed15f78d\",\n\t\t\"371732e4f41bf4f7883035e6a79fcedc0e196eb07b48171697517463\",\n\t},\n\t{\n\t\t\"10\",\n\t\t\"aea9e17a306517eb89152aa7096d2c381ec813c51aa880e7bee2c0fd\",\n\t\t\"39bb30eab337e0a521b6cba1abe4b2b3a3e524c14a3fe3eb116b655f\",\n\t},\n\t{\n\t\t\"11\",\n\t\t\"ef53b6294aca431f0f3c22dc82eb9050324f1d88d377e716448e507c\",\n\t\t\"20b510004092e96636cfb7e32efded8265c266dfb754fa6d6491a6da\",\n\t},\n\t{\n\t\t\"12\",\n\t\t\"6e31ee1dc137f81b056752e4deab1443a481033e9b4c93a3044f4f7a\",\n\t\t\"207dddf0385bfdeab6e9acda8da06b3bbef224a93ab1e9e036109d13\",\n\t},\n\t{\n\t\t\"13\",\n\t\t\"34e8e17a430e43289793c383fac9774247b40e9ebd3366981fcfaeca\",\n\t\t\"252819f71c7fb7fbcb159be337d37d3336d7feb963724fdfb0ecb767\",\n\t},\n\t{\n\t\t\"14\",\n\t\t\"a53640c83dc208603ded83e4ecf758f24c357d7cf48088b2ce01e9fa\",\n\t\t\"d5814cd724199c4a5b974a43685fbf5b8bac69459c9469bc8f23ccaf\",\n\t},\n\t{\n\t\t\"15\",\n\t\t\"baa4d8635511a7d288aebeedd12ce529ff102c91f97f867e21916bf9\",\n\t\t\"979a5f4759f80f4fb4ec2e34f5566d595680a11735e7b61046127989\",\n\t},\n\t{\n\t\t\"16\",\n\t\t\"b6ec4fe1777382404ef679997ba8d1cc5cd8e85349259f590c4c66d\",\n\t\t\"3399d464345906b11b00e363ef429221f2ec720d2f665d7dead5b482\",\n\t},\n\t{\n\t\t\"17\",\n\t\t\"b8357c3a6ceef288310e17b8bfeff9200846ca8c1942497c484403bc\",\n\t\t\"ff149efa6606a6bd20ef7d1b06bd92f6904639dce5174db6cc554a26\",\n\t},\n\t{\n\t\t\"18\",\n\t\t\"c9ff61b040874c0568479216824a15eab1a838a797d189746226e4cc\",\n\t\t\"ea98d60e5ffc9b8fcf999fab1df7e7ef7084f20ddb61bb045a6ce002\",\n\t},\n\t{\n\t\t\"19\",\n\t\t\"a1e81c04f30ce201c7c9ace785ed44cc33b455a022f2acdbc6cae83c\",\n\t\t\"dcf1f6c3db09c70acc25391d492fe25b4a180babd6cea356c04719cd\",\n\t},\n\t{\n\t\t\"20\",\n\t\t\"fcc7f2b45df1cd5a3c0c0731ca47a8af75cfb0347e8354eefe782455\",\n\t\t\"d5d7110274cba7cdee90e1a8b0d394c376a5573db6be0bf2747f530\",\n\t},\n\t{\n\t\t\"112233445566778899\",\n\t\t\"61f077c6f62ed802dad7c2f38f5c67f2cc453601e61bd076bb46179e\",\n\t\t\"2272f9e9f5933e70388ee652513443b5e289dd135dcc0d0299b225e4\",\n\t},\n\t{\n\t\t\"112233445566778899112233445566778899\",\n\t\t\"29895f0af496bfc62b6ef8d8a65c88c613949b03668aab4f0429e35\",\n\t\t\"3ea6e53f9a841f2019ec24bde1a75677aa9b5902e61081c01064de93\",\n\t},\n\t{\n\t\t\"6950511619965839450988900688150712778015737983940691968051900319680\",\n\t\t\"ab689930bcae4a4aa5f5cb085e823e8ae30fd365eb1da4aba9cf0379\",\n\t\t\"3345a121bbd233548af0d210654eb40bab788a03666419be6fbd34e7\",\n\t},\n\t{\n\t\t\"13479972933410060327035789020509431695094902435494295338570602119423\",\n\t\t\"bdb6a8817c1f89da1c2f3dd8e97feb4494f2ed302a4ce2bc7f5f4025\",\n\t\t\"4c7020d57c00411889462d77a5438bb4e97d177700bf7243a07f1680\",\n\t},\n\t{\n\t\t\"13479971751745682581351455311314208093898607229429740618390390702079\",\n\t\t\"d58b61aa41c32dd5eba462647dba75c5d67c83606c0af2bd928446a9\",\n\t\t\"d24ba6a837be0460dd107ae77725696d211446c5609b4595976b16bd\",\n\t},\n\t{\n\t\t\"13479972931865328106486971546324465392952975980343228160962702868479\",\n\t\t\"dc9fa77978a005510980e929a1485f63716df695d7a0c18bb518df03\",\n\t\t\"ede2b016f2ddffc2a8c015b134928275ce09e5661b7ab14ce0d1d403\",\n\t},\n\t{\n\t\t\"11795773708834916026404142434151065506931607341523388140225443265536\",\n\t\t\"499d8b2829cfb879c901f7d85d357045edab55028824d0f05ba279ba\",\n\t\t\"bf929537b06e4015919639d94f57838fa33fc3d952598dcdbb44d638\",\n\t},\n\t{\n\t\t\"784254593043826236572847595991346435467177662189391577090\",\n\t\t\"8246c999137186632c5f9eddf3b1b0e1764c5e8bd0e0d8a554b9cb77\",\n\t\t\"e80ed8660bc1cb17ac7d845be40a7a022d3306f116ae9f81fea65947\",\n\t},\n\t{\n\t\t\"13479767645505654746623887797783387853576174193480695826442858012671\",\n\t\t\"6670c20afcceaea672c97f75e2e9dd5c8460e54bb38538ebb4bd30eb\",\n\t\t\"f280d8008d07a4caf54271f993527d46ff3ff46fd1190a3f1faa4f74\",\n\t},\n\t{\n\t\t\"205688069665150753842126177372015544874550518966168735589597183\",\n\t\t\"eca934247425cfd949b795cb5ce1eff401550386e28d1a4c5a8eb\",\n\t\t\"d4c01040dba19628931bc8855370317c722cbd9ca6156985f1c2e9ce\",\n\t},\n\t{\n\t\t\"13479966930919337728895168462090683249159702977113823384618282123295\",\n\t\t\"ef353bf5c73cd551b96d596fbc9a67f16d61dd9fe56af19de1fba9cd\",\n\t\t\"21771b9cdce3e8430c09b3838be70b48c21e15bc09ee1f2d7945b91f\",\n\t},\n\t{\n\t\t\"50210731791415612487756441341851895584393717453129007497216\",\n\t\t\"4036052a3091eb481046ad3289c95d3ac905ca0023de2c03ecd451cf\",\n\t\t\"d768165a38a2b96f812586a9d59d4136035d9c853a5bf2e1c86a4993\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368041\",\n\t\t\"fcc7f2b45df1cd5a3c0c0731ca47a8af75cfb0347e8354eefe782455\",\n\t\t\"f2a28eefd8b345832116f1e574f2c6b2c895aa8c24941f40d8b80ad1\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368042\",\n\t\t\"a1e81c04f30ce201c7c9ace785ed44cc33b455a022f2acdbc6cae83c\",\n\t\t\"230e093c24f638f533dac6e2b6d01da3b5e7f45429315ca93fb8e634\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368043\",\n\t\t\"c9ff61b040874c0568479216824a15eab1a838a797d189746226e4cc\",\n\t\t\"156729f1a003647030666054e208180f8f7b0df2249e44fba5931fff\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368044\",\n\t\t\"b8357c3a6ceef288310e17b8bfeff9200846ca8c1942497c484403bc\",\n\t\t\"eb610599f95942df1082e4f9426d086fb9c6231ae8b24933aab5db\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368045\",\n\t\t\"b6ec4fe1777382404ef679997ba8d1cc5cd8e85349259f590c4c66d\",\n\t\t\"cc662b9bcba6f94ee4ff1c9c10bd6ddd0d138df2d099a282152a4b7f\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368046\",\n\t\t\"baa4d8635511a7d288aebeedd12ce529ff102c91f97f867e21916bf9\",\n\t\t\"6865a0b8a607f0b04b13d1cb0aa992a5a97f5ee8ca1849efb9ed8678\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368047\",\n\t\t\"a53640c83dc208603ded83e4ecf758f24c357d7cf48088b2ce01e9fa\",\n\t\t\"2a7eb328dbe663b5a468b5bc97a040a3745396ba636b964370dc3352\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368048\",\n\t\t\"34e8e17a430e43289793c383fac9774247b40e9ebd3366981fcfaeca\",\n\t\t\"dad7e608e380480434ea641cc82c82cbc92801469c8db0204f13489a\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368049\",\n\t\t\"6e31ee1dc137f81b056752e4deab1443a481033e9b4c93a3044f4f7a\",\n\t\t\"df82220fc7a4021549165325725f94c3410ddb56c54e161fc9ef62ee\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368050\",\n\t\t\"ef53b6294aca431f0f3c22dc82eb9050324f1d88d377e716448e507c\",\n\t\t\"df4aefffbf6d1699c930481cd102127c9a3d992048ab05929b6e5927\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368051\",\n\t\t\"aea9e17a306517eb89152aa7096d2c381ec813c51aa880e7bee2c0fd\",\n\t\t\"c644cf154cc81f5ade49345e541b4d4b5c1adb3eb5c01c14ee949aa2\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368052\",\n\t\t\"2fdcccfee720a77ef6cb3bfbb447f9383117e3daa4a07e36ed15f78d\",\n\t\t\"c8e8cd1b0be40b0877cfca1958603122f1e6914f84b7e8e968ae8b9e\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368053\",\n\t\t\"858e6f9cc6c12c31f5df124aa77767b05c8bc021bd683d2b55571550\",\n\t\t\"fb9232c15a3bc7673a3a03b0253824c53d0fd1411b1cabe2e187fb87\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368054\",\n\t\t\"db2f6be630e246a5cf7d99b85194b123d487e2d466b94b24a03c3e28\",\n\t\t\"f0c5cff7ab680d09ee11dae84e9c1072ac48ea2e744b1b7f72fd469e\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368055\",\n\t\t\"1f2483f82572251fca975fea40db821df8ad82a3c002ee6c57112408\",\n\t\t\"76050f3348af2664aac3a8b05281304ebc7a7914c6ad50a4b4eac383\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368056\",\n\t\t\"31c49ae75bce7807cdff22055d94ee9021fedbb5ab51c57526f011aa\",\n\t\t\"d817400e8ba9ca13a45f360e3d121eaaeb39af82d6001c8186f5f866\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368057\",\n\t\t\"ae99feebb5d26945b54892092a8aee02912930fa41cd114e40447301\",\n\t\t\"fb7da7f5f13a43b81774373c879cd32d6934c05fa758eeb14fcfab38\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368058\",\n\t\t\"df1b1d66a551d0d31eff822558b9d2cc75c2180279fe0d08fd896d04\",\n\t\t\"5c080fc3522f41bbb3f55a97cfecf21f882ce8cbb1e50ca6e67e56dc\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368059\",\n\t\t\"706a46dc76dcb76798e60e6d89474788d16dc18032d268fd1a704fa6\",\n\t\t\"e3d4895843da188fd58fb0567976d7b50359d6b78530c8f62d1b1746\",\n\t},\n\t{\n\t\t\"26959946667150639794667015087019625940457807714424391721682722368060\",\n\t\t\"b70e0cbd6bb4bf7f321390b94a03c1d356c21122343280d6115c1d21\",\n\t\t\"42c89c774a08dc04b3dd201932bc8a5ea5f8b89bbb2a7e667aff81cd\",\n\t},\n}\n\ntype scalarMultTest struct {\n\tk          string\n\txIn, yIn   string\n\txOut, yOut string\n}\n\nvar p256MultTests = []scalarMultTest{\n\t{\n\t\t\"2a265f8bcbdcaf94d58519141e578124cb40d64a501fba9c11847b28965bc737\",\n\t\t\"023819813ac969847059028ea88a1f30dfbcde03fc791d3a252c6b41211882ea\",\n\t\t\"f93e4ae433cc12cf2a43fc0ef26400c0e125508224cdb649380f25479148a4ad\",\n\t\t\"4d4de80f1534850d261075997e3049321a0864082d24a917863366c0724f5ae3\",\n\t\t\"a22d2b7f7818a3563e0f7a76c9bf0921ac55e06e2e4d11795b233824b1db8cc0\",\n\t},\n\t{\n\t\t\"313f72ff9fe811bf573176231b286a3bdb6f1b14e05c40146590727a71c3bccd\",\n\t\t\"cc11887b2d66cbae8f4d306627192522932146b42f01d3c6f92bd5c8ba739b06\",\n\t\t\"a2f08a029cd06b46183085bae9248b0ed15b70280c7ef13a457f5af382426031\",\n\t\t\"831c3f6b5f762d2f461901577af41354ac5f228c2591f84f8a6e51e2e3f17991\",\n\t\t\"93f90934cd0ef2c698cc471c60a93524e87ab31ca2412252337f364513e43684\",\n\t},\n}\n\nfunc TestBaseMult(t *testing.T) {\n\tp224 := P224()\n\tfor i, e := range p224BaseMultTests {\n\t\tk, ok := new(big.Int).SetString(e.k, 10)\n\t\tif !ok {\n\t\t\tt.Errorf(\"%d: bad value for k: %s\", i, e.k)\n\t\t}\n\t\tx, y := p224.ScalarBaseMult(k.Bytes())\n\t\tif fmt.Sprintf(\"%x\", x) != e.x || fmt.Sprintf(\"%x\", y) != e.y {\n\t\t\tt.Errorf(\"%d: bad output for k=%s: got (%x, %x), want (%s, %s)\", i, e.k, x, y, e.x, e.y)\n\t\t}\n\t\tif testing.Short() && i > 5 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc TestGenericBaseMult(t *testing.T) {\n\t// We use the P224 CurveParams directly in order to test the generic implementation.\n\tp224 := P224().Params()\n\tfor i, e := range p224BaseMultTests {\n\t\tk, ok := new(big.Int).SetString(e.k, 10)\n\t\tif !ok {\n\t\t\tt.Errorf(\"%d: bad value for k: %s\", i, e.k)\n\t\t}\n\t\tx, y := p224.ScalarBaseMult(k.Bytes())\n\t\tif fmt.Sprintf(\"%x\", x) != e.x || fmt.Sprintf(\"%x\", y) != e.y {\n\t\t\tt.Errorf(\"%d: bad output for k=%s: got (%x, %x), want (%s, %s)\", i, e.k, x, y, e.x, e.y)\n\t\t}\n\t\tif testing.Short() && i > 5 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc TestP256BaseMult(t *testing.T) {\n\tp256 := P256()\n\tp256Generic := p256.Params()\n\n\tscalars := make([]*big.Int, 0, len(p224BaseMultTests)+1)\n\tfor _, e := range p224BaseMultTests {\n\t\tk, _ := new(big.Int).SetString(e.k, 10)\n\t\tscalars = append(scalars, k)\n\t}\n\tk := new(big.Int).SetInt64(1)\n\tk.Lsh(k, 500)\n\tscalars = append(scalars, k)\n\n\tfor i, k := range scalars {\n\t\tx, y := p256.ScalarBaseMult(k.Bytes())\n\t\tx2, y2 := p256Generic.ScalarBaseMult(k.Bytes())\n\t\tif x.Cmp(x2) != 0 || y.Cmp(y2) != 0 {\n\t\t\tt.Errorf(\"#%d: got (%x, %x), want (%x, %x)\", i, x, y, x2, y2)\n\t\t}\n\n\t\tif testing.Short() && i > 5 {\n\t\t\tbreak\n\t\t}\n\t}\n}\n\nfunc TestP256Mult(t *testing.T) {\n\tp256 := P256()\n\tp256Generic := p256.Params()\n\n\tfor i, e := range p224BaseMultTests {\n\t\tx, _ := new(big.Int).SetString(e.x, 16)\n\t\ty, _ := new(big.Int).SetString(e.y, 16)\n\t\tk, _ := new(big.Int).SetString(e.k, 10)\n\n\t\txx, yy := p256.ScalarMult(x, y, k.Bytes())\n\t\txx2, yy2 := p256Generic.ScalarMult(x, y, k.Bytes())\n\t\tif xx.Cmp(xx2) != 0 || yy.Cmp(yy2) != 0 {\n\t\t\tt.Errorf(\"#%d: got (%x, %x), want (%x, %x)\", i, xx, yy, xx2, yy2)\n\t\t}\n\t\tif testing.Short() && i > 5 {\n\t\t\tbreak\n\t\t}\n\t}\n\n\tfor i, e := range p256MultTests {\n\t\tx, _ := new(big.Int).SetString(e.xIn, 16)\n\t\ty, _ := new(big.Int).SetString(e.yIn, 16)\n\t\tk, _ := new(big.Int).SetString(e.k, 16)\n\t\texpectedX, _ := new(big.Int).SetString(e.xOut, 16)\n\t\texpectedY, _ := new(big.Int).SetString(e.yOut, 16)\n\n\t\txx, yy := p256.ScalarMult(x, y, k.Bytes())\n\t\tif xx.Cmp(expectedX) != 0 || yy.Cmp(expectedY) != 0 {\n\t\t\tt.Errorf(\"#%d: got (%x, %x), want (%x, %x)\", i, xx, yy, expectedX, expectedY)\n\t\t}\n\t}\n}\n\nfunc TestInfinity(t *testing.T) {\n\ttests := []struct {\n\t\tname  string\n\t\tcurve Curve\n\t}{\n\t\t{\"p224\", P224()},\n\t\t{\"p256\", P256()},\n\t}\n\n\tfor _, test := range tests {\n\t\tcurve := test.curve\n\t\tx, y := curve.ScalarBaseMult(nil)\n\t\tif x.Sign() != 0 || y.Sign() != 0 {\n\t\t\tt.Errorf(\"%s: x^0 != \u221e\", test.name)\n\t\t}\n\t\tx.SetInt64(0)\n\t\ty.SetInt64(0)\n\n\t\tx2, y2 := curve.Double(x, y)\n\t\tif x2.Sign() != 0 || y2.Sign() != 0 {\n\t\t\tt.Errorf(\"%s: 2\u221e != \u221e\", test.name)\n\t\t}\n\n\t\tbaseX := curve.Params().Gx\n\t\tbaseY := curve.Params().Gy\n\n\t\tx3, y3 := curve.Add(baseX, baseY, x, y)\n\t\tif x3.Cmp(baseX) != 0 || y3.Cmp(baseY) != 0 {\n\t\t\tt.Errorf(\"%s: x+\u221e != x\", test.name)\n\t\t}\n\n\t\tx4, y4 := curve.Add(x, y, baseX, baseY)\n\t\tif x4.Cmp(baseX) != 0 || y4.Cmp(baseY) != 0 {\n\t\t\tt.Errorf(\"%s: \u221e+x != x\", test.name)\n\t\t}\n\t}\n}\n\nfunc BenchmarkBaseMult(b *testing.B) {\n\tb.ResetTimer()\n\tp224 := P224()\n\te := p224BaseMultTests[25]\n\tk, _ := new(big.Int).SetString(e.k, 10)\n\tb.StartTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tp224.ScalarBaseMult(k.Bytes())\n\t}\n}\n\nfunc BenchmarkBaseMultP256(b *testing.B) {\n\tb.ResetTimer()\n\tp256 := P256()\n\te := p224BaseMultTests[25]\n\tk, _ := new(big.Int).SetString(e.k, 10)\n\tb.StartTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tp256.ScalarBaseMult(k.Bytes())\n\t}\n}\n\nfunc BenchmarkScalarMultP256(b *testing.B) {\n\tb.ResetTimer()\n\tp256 := P256()\n\t_, x, y, _ := GenerateKey(p256, rand.Reader)\n\tpriv, _, _, _ := GenerateKey(p256, rand.Reader)\n\n\tb.StartTimer()\n\tfor i := 0; i < b.N; i++ {\n\t\tp256.ScalarMult(x, y, priv)\n\t}\n}\n\nfunc TestMarshal(t *testing.T) {\n\tp224 := P224()\n\t_, x, y, err := GenerateKey(p224, rand.Reader)\n\tif err != nil {\n\t\tt.Error(err)\n\t\treturn\n\t}\n\tserialized := Marshal(p224, x, y)\n\txx, yy := Unmarshal(p224, serialized)\n\tif xx == nil {\n\t\tt.Error(\"failed to unmarshal\")\n\t\treturn\n\t}\n\tif xx.Cmp(x) != 0 || yy.Cmp(y) != 0 {\n\t\tt.Error(\"unmarshal returned different values\")\n\t\treturn\n\t}\n}\n\nfunc TestP224Overflow(t *testing.T) {\n\t// This tests for a specific bug in the P224 implementation.\n\tp224 := P224()\n\tpointData, _ := hex.DecodeString(\"049B535B45FB0A2072398A6831834624C7E32CCFD5A4B933BCEAF77F1DD945E08BBE5178F5EDF5E733388F196D2A631D2E075BB16CBFEEA15B\")\n\tx, y := Unmarshal(p224, pointData)\n\tif !p224.IsOnCurve(x, y) {\n\t\tt.Error(\"P224 failed to validate a correct point\")\n\t}\n}\n", "// Copyright 2015 The Go Authors. All rights reserved.\n// Use of this source code is governed by a BSD-style\n// license that can be found in the LICENSE file.\n\n// This file contains constant-time, 64-bit assembly implementation of\n// P256. The optimizations performed here are described in detail in:\n// S.Gueron and V.Krasnov, \"Fast prime field elliptic-curve cryptography with\n//                          256-bit primes\"\n// http://link.springer.com/article/10.1007%2Fs13389-014-0090-x\n// https://eprint.iacr.org/2013/816.pdf\n\n#include \"textflag.h\"\n\n#define res_ptr DI\n#define x_ptr SI\n#define y_ptr CX\n\n#define acc0 R8\n#define acc1 R9\n#define acc2 R10\n#define acc3 R11\n#define acc4 R12\n#define acc5 R13\n#define t0 R14\n#define t1 R15\n\nDATA p256const0<>+0x00(SB)/8, $0x00000000ffffffff\nDATA p256const1<>+0x00(SB)/8, $0xffffffff00000001\nDATA p256ordK0<>+0x00(SB)/8, $0xccd1c8aaee00bc4f\nDATA p256ord<>+0x00(SB)/8, $0xf3b9cac2fc632551\nDATA p256ord<>+0x08(SB)/8, $0xbce6faada7179e84\nDATA p256ord<>+0x10(SB)/8, $0xffffffffffffffff\nDATA p256ord<>+0x18(SB)/8, $0xffffffff00000000\nDATA p256one<>+0x00(SB)/8, $0x0000000000000001\nDATA p256one<>+0x08(SB)/8, $0xffffffff00000000\nDATA p256one<>+0x10(SB)/8, $0xffffffffffffffff\nDATA p256one<>+0x18(SB)/8, $0x00000000fffffffe\nGLOBL p256const0<>(SB), 8, $8\nGLOBL p256const1<>(SB), 8, $8\nGLOBL p256ordK0<>(SB), 8, $8\nGLOBL p256ord<>(SB), 8, $32\nGLOBL p256one<>(SB), 8, $32\n\n/* ---------------------------------------*/\n// func p256LittleToBig(res []byte, in []uint64)\nTEXT \u00b7p256LittleToBig(SB),NOSPLIT,$0\n\tJMP \u00b7p256BigToLittle(SB)\n/* ---------------------------------------*/\n// func p256BigToLittle(res []uint64, in []byte)\nTEXT \u00b7p256BigToLittle(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in+24(FP), x_ptr\n\n\tMOVQ (8*0)(x_ptr), acc0\n\tMOVQ (8*1)(x_ptr), acc1\n\tMOVQ (8*2)(x_ptr), acc2\n\tMOVQ (8*3)(x_ptr), acc3\n\n\tBSWAPQ acc0\n\tBSWAPQ acc1\n\tBSWAPQ acc2\n\tBSWAPQ acc3\n\n\tMOVQ acc3, (8*0)(res_ptr)\n\tMOVQ acc2, (8*1)(res_ptr)\n\tMOVQ acc1, (8*2)(res_ptr)\n\tMOVQ acc0, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256MovCond(res, a, b []uint64, cond int)\n// If cond == 0 res=b, else res=a\nTEXT \u00b7p256MovCond(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ a+24(FP), x_ptr\n\tMOVQ b+48(FP), y_ptr\n\tMOVQ cond+72(FP), X12\n\n\tPXOR X13, X13\n\tPSHUFD $0, X12, X12\n\tPCMPEQL X13, X12\n\n\tMOVOU X12, X0\n\tPANDN (16*0)(x_ptr), X0\n\tMOVOU X12, X1\n\tPANDN (16*1)(x_ptr), X1\n\tMOVOU X12, X2\n\tPANDN (16*2)(x_ptr), X2\n\tMOVOU X12, X3\n\tPANDN (16*3)(x_ptr), X3\n\tMOVOU X12, X4\n\tPANDN (16*4)(x_ptr), X4\n\tMOVOU X12, X5\n\tPANDN (16*5)(x_ptr), X5\n\n\tMOVOU (16*0)(y_ptr), X6\n\tMOVOU (16*1)(y_ptr), X7\n\tMOVOU (16*2)(y_ptr), X8\n\tMOVOU (16*3)(y_ptr), X9\n\tMOVOU (16*4)(y_ptr), X10\n\tMOVOU (16*5)(y_ptr), X11\n\n\tPAND X12, X6\n\tPAND X12, X7\n\tPAND X12, X8\n\tPAND X12, X9\n\tPAND X12, X10\n\tPAND X12, X11\n\n\tPXOR X6, X0\n\tPXOR X7, X1\n\tPXOR X8, X2\n\tPXOR X9, X3\n\tPXOR X10, X4\n\tPXOR X11, X5\n\n\tMOVOU X0, (16*0)(res_ptr)\n\tMOVOU X1, (16*1)(res_ptr)\n\tMOVOU X2, (16*2)(res_ptr)\n\tMOVOU X3, (16*3)(res_ptr)\n\tMOVOU X4, (16*4)(res_ptr)\n\tMOVOU X5, (16*5)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256NegCond(val []uint64, cond int)\nTEXT \u00b7p256NegCond(SB),NOSPLIT,$0\n\tMOVQ val+0(FP), res_ptr\n\tMOVQ cond+24(FP), t0\n\t// acc = poly\n\tMOVQ $-1, acc0\n\tMOVQ p256const0<>(SB), acc1\n\tMOVQ $0, acc2\n\tMOVQ p256const1<>(SB), acc3\n\t// Load the original value\n\tMOVQ (8*0)(res_ptr), acc5\n\tMOVQ (8*1)(res_ptr), x_ptr\n\tMOVQ (8*2)(res_ptr), y_ptr\n\tMOVQ (8*3)(res_ptr), t1\n\t// Speculatively subtract\n\tSUBQ acc5, acc0\n\tSBBQ x_ptr, acc1\n\tSBBQ y_ptr, acc2\n\tSBBQ t1, acc3\n\t// If condition is 0, keep original value\n\tTESTQ t0, t0\n\tCMOVQEQ acc5, acc0\n\tCMOVQEQ x_ptr, acc1\n\tCMOVQEQ y_ptr, acc2\n\tCMOVQEQ t1, acc3\n\t// Store result\n\tMOVQ acc0, (8*0)(res_ptr)\n\tMOVQ acc1, (8*1)(res_ptr)\n\tMOVQ acc2, (8*2)(res_ptr)\n\tMOVQ acc3, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256Sqr(res, in []uint64)\nTEXT \u00b7p256Sqr(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in+24(FP), x_ptr\n\t// y[1:] * y[0]\n\tMOVQ (8*0)(x_ptr), t0\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tMOVQ AX, acc1\n\tMOVQ DX, acc2\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\t// y[2:] * y[1]\n\tMOVQ (8*1)(x_ptr), t0\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, acc5\n\t// y[3] * y[2]\n\tMOVQ (8*2)(x_ptr), t0\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, y_ptr\n\tXORQ t1, t1\n\t// *2\n\tADDQ acc1, acc1\n\tADCQ acc2, acc2\n\tADCQ acc3, acc3\n\tADCQ acc4, acc4\n\tADCQ acc5, acc5\n\tADCQ y_ptr, y_ptr\n\tADCQ $0, t1\n\t// Missing products\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ AX\n\tMOVQ AX, acc0\n\tMOVQ DX, t0\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc1\n\tADCQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t0\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc3\n\tADCQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t0\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc5\n\tADCQ AX, y_ptr\n\tADCQ DX, t1\n\tMOVQ t1, x_ptr\n\t// First reduction step\n\tMOVQ acc0, AX\n\tMOVQ acc0, t1\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc0, acc1\n\tADCQ t1, acc2\n\tADCQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc0\n\t// Second reduction step\n\tMOVQ acc1, AX\n\tMOVQ acc1, t1\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc1, acc2\n\tADCQ t1, acc3\n\tADCQ AX, acc0\n\tADCQ $0, DX\n\tMOVQ DX, acc1\n\t// Third reduction step\n\tMOVQ acc2, AX\n\tMOVQ acc2, t1\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc2, acc3\n\tADCQ t1, acc0\n\tADCQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, acc2\n\t// Last reduction step\n\tXORQ t0, t0\n\tMOVQ acc3, AX\n\tMOVQ acc3, t1\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc3, acc0\n\tADCQ t1, acc1\n\tADCQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\t// Add bits [511:256] of the sqr result\n\tADCQ acc4, acc0\n\tADCQ acc5, acc1\n\tADCQ y_ptr, acc2\n\tADCQ x_ptr, acc3\n\tADCQ $0, t0\n\n\tMOVQ acc0, acc4\n\tMOVQ acc1, acc5\n\tMOVQ acc2, y_ptr\n\tMOVQ acc3, t1\n\t// Subtract p256\n\tSUBQ $-1, acc0\n\tSBBQ p256const0<>(SB) ,acc1\n\tSBBQ $0, acc2\n\tSBBQ p256const1<>(SB), acc3\n\tSBBQ $0, t0\n\n\tCMOVQCS acc4, acc0\n\tCMOVQCS acc5, acc1\n\tCMOVQCS y_ptr, acc2\n\tCMOVQCS t1, acc3\n\n\tMOVQ acc0, (8*0)(res_ptr)\n\tMOVQ acc1, (8*1)(res_ptr)\n\tMOVQ acc2, (8*2)(res_ptr)\n\tMOVQ acc3, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256Mul(res, in1, in2 []uint64)\nTEXT \u00b7p256Mul(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in1+24(FP), x_ptr\n\tMOVQ in2+48(FP), y_ptr\n\t// x * y[0]\n\tMOVQ (8*0)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tMOVQ AX, acc0\n\tMOVQ DX, acc1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, acc2\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\tXORQ acc5, acc5\n\t// First reduction step\n\tMOVQ acc0, AX\n\tMOVQ acc0, t1\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc0, acc1\n\tADCQ t1, acc2\n\tADCQ AX, acc3\n\tADCQ DX, acc4\n\tADCQ $0, acc5\n\tXORQ acc0, acc0\n\t// x * y[1]\n\tMOVQ (8*1)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ DX, acc5\n\tADCQ $0, acc0\n\t// Second reduction step\n\tMOVQ acc1, AX\n\tMOVQ acc1, t1\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc1, acc2\n\tADCQ t1, acc3\n\tADCQ AX, acc4\n\tADCQ DX, acc5\n\tADCQ $0, acc0\n\tXORQ acc1, acc1\n\t// x * y[2]\n\tMOVQ (8*2)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ DX, acc0\n\tADCQ $0, acc1\n\t// Third reduction step\n\tMOVQ acc2, AX\n\tMOVQ acc2, t1\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc2, acc3\n\tADCQ t1, acc4\n\tADCQ AX, acc5\n\tADCQ DX, acc0\n\tADCQ $0, acc1\n\tXORQ acc2, acc2\n\t// x * y[3]\n\tMOVQ (8*3)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc0\n\tADCQ $0, DX\n\tADDQ AX, acc0\n\tADCQ DX, acc1\n\tADCQ $0, acc2\n\t// Last reduction step\n\tMOVQ acc3, AX\n\tMOVQ acc3, t1\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc3, acc4\n\tADCQ t1, acc5\n\tADCQ AX, acc0\n\tADCQ DX, acc1\n\tADCQ $0, acc2\n\t// Copy result [255:0]\n\tMOVQ acc4, x_ptr\n\tMOVQ acc5, acc3\n\tMOVQ acc0, t0\n\tMOVQ acc1, t1\n\t// Subtract p256\n\tSUBQ $-1, acc4\n\tSBBQ p256const0<>(SB) ,acc5\n\tSBBQ $0, acc0\n\tSBBQ p256const1<>(SB), acc1\n\tSBBQ $0, acc2\n\n\tCMOVQCS x_ptr, acc4\n\tCMOVQCS acc3, acc5\n\tCMOVQCS t0, acc0\n\tCMOVQCS t1, acc1\n\n\tMOVQ acc4, (8*0)(res_ptr)\n\tMOVQ acc5, (8*1)(res_ptr)\n\tMOVQ acc0, (8*2)(res_ptr)\n\tMOVQ acc1, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256FromMont(res, in []uint64)\nTEXT \u00b7p256FromMont(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in+24(FP), x_ptr\n\n\tMOVQ (8*0)(x_ptr), acc0\n\tMOVQ (8*1)(x_ptr), acc1\n\tMOVQ (8*2)(x_ptr), acc2\n\tMOVQ (8*3)(x_ptr), acc3\n\tXORQ acc4, acc4\n\n\t// Only reduce, no multiplications are needed\n\t// First stage\n\tMOVQ acc0, AX\n\tMOVQ acc0, t1\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc0, acc1\n\tADCQ t1, acc2\n\tADCQ AX, acc3\n\tADCQ DX, acc4\n\tXORQ acc5, acc5\n\t// Second stage\n\tMOVQ acc1, AX\n\tMOVQ acc1, t1\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc1, acc2\n\tADCQ t1, acc3\n\tADCQ AX, acc4\n\tADCQ DX, acc5\n\tXORQ acc0, acc0\n\t// Third stage\n\tMOVQ acc2, AX\n\tMOVQ acc2, t1\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc2, acc3\n\tADCQ t1, acc4\n\tADCQ AX, acc5\n\tADCQ DX, acc0\n\tXORQ acc1, acc1\n\t// Last stage\n\tMOVQ acc3, AX\n\tMOVQ acc3, t1\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, t1\n\tADDQ acc3, acc4\n\tADCQ t1, acc5\n\tADCQ AX, acc0\n\tADCQ DX, acc1\n\n\tMOVQ acc4, x_ptr\n\tMOVQ acc5, acc3\n\tMOVQ acc0, t0\n\tMOVQ acc1, t1\n\n\tSUBQ $-1, acc4\n\tSBBQ p256const0<>(SB), acc5\n\tSBBQ $0, acc0\n\tSBBQ p256const1<>(SB), acc1\n\n\tCMOVQCS x_ptr, acc4\n\tCMOVQCS acc3, acc5\n\tCMOVQCS t0, acc0\n\tCMOVQCS t1, acc1\n\n\tMOVQ acc4, (8*0)(res_ptr)\n\tMOVQ acc5, (8*1)(res_ptr)\n\tMOVQ acc0, (8*2)(res_ptr)\n\tMOVQ acc1, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// Constant time point access to arbitrary point table.\n// Indexed from 1 to 15, with -1 offset\n// (index 0 is implicitly point at infinity)\n// func p256Select(point, table []uint64, idx int)\nTEXT \u00b7p256Select(SB),NOSPLIT,$0\n\tMOVQ idx+48(FP),AX\n\tMOVQ table+24(FP),DI\n\tMOVQ point+0(FP),DX\n\n\tPXOR X15, X15\t// X15 = 0\n\tPCMPEQL X14, X14 // X14 = -1\n\tPSUBL X14, X15   // X15 = 1\n\tMOVL AX, X14\n\tPSHUFD $0, X14, X14\n\n\tPXOR X0, X0\n\tPXOR X1, X1\n\tPXOR X2, X2\n\tPXOR X3, X3\n\tPXOR X4, X4\n\tPXOR X5, X5\n\tMOVQ $16, AX\n\n\tMOVOU X15, X13\n\nloop_select:\n\n\t\tMOVOU X13, X12\n\t\tPADDL X15, X13\n\t\tPCMPEQL X14, X12\n\n\t\tMOVOU (16*0)(DI), X6\n\t\tMOVOU (16*1)(DI), X7\n\t\tMOVOU (16*2)(DI), X8\n\t\tMOVOU (16*3)(DI), X9\n\t\tMOVOU (16*4)(DI), X10\n\t\tMOVOU (16*5)(DI), X11\n\t\tADDQ $(16*6), DI\n\n\t\tPAND X12, X6\n\t\tPAND X12, X7\n\t\tPAND X12, X8\n\t\tPAND X12, X9\n\t\tPAND X12, X10\n\t\tPAND X12, X11\n\n\t\tPXOR X6, X0\n\t\tPXOR X7, X1\n\t\tPXOR X8, X2\n\t\tPXOR X9, X3\n\t\tPXOR X10, X4\n\t\tPXOR X11, X5\n\n\t\tDECQ AX\n\t\tJNE loop_select\n\n\tMOVOU X0, (16*0)(DX)\n\tMOVOU X1, (16*1)(DX)\n\tMOVOU X2, (16*2)(DX)\n\tMOVOU X3, (16*3)(DX)\n\tMOVOU X4, (16*4)(DX)\n\tMOVOU X5, (16*5)(DX)\n\n\tRET\n/* ---------------------------------------*/\n// Constant time point access to base point table.\n// func p256SelectBase(point, table []uint64, idx int)\nTEXT \u00b7p256SelectBase(SB),NOSPLIT,$0\n\tMOVQ idx+48(FP),AX\n\tMOVQ table+24(FP),DI\n\tMOVQ point+0(FP),DX\n\n\tPXOR X15, X15\t// X15 = 0\n\tPCMPEQL X14, X14 // X14 = -1\n\tPSUBL X14, X15   // X15 = 1\n\tMOVL AX, X14\n\tPSHUFD $0, X14, X14\n\n\tPXOR X0, X0\n\tPXOR X1, X1\n\tPXOR X2, X2\n\tPXOR X3, X3\n\tMOVQ $32, AX\n\n\tMOVOU X15, X13\n\nloop_select_base:\n\n\t\tMOVOU X13, X12\n\t\tPADDL X15, X13\n\t\tPCMPEQL X14, X12\n\n\t\tMOVOU (16*0)(DI), X4\n\t\tMOVOU (16*1)(DI), X5\n\t\tMOVOU (16*2)(DI), X6\n\t\tMOVOU (16*3)(DI), X7\n\n\t\tMOVOU (16*4)(DI), X8\n\t\tMOVOU (16*5)(DI), X9\n\t\tMOVOU (16*6)(DI), X10\n\t\tMOVOU (16*7)(DI), X11\n\n\t\tADDQ $(16*8), DI\n\n\t\tPAND X12, X4\n\t\tPAND X12, X5\n\t\tPAND X12, X6\n\t\tPAND X12, X7\n\n\t\tMOVOU X13, X12\n\t\tPADDL X15, X13\n\t\tPCMPEQL X14, X12\n\n\t\tPAND X12, X8\n\t\tPAND X12, X9\n\t\tPAND X12, X10\n\t\tPAND X12, X11\n\n\t\tPXOR X4, X0\n\t\tPXOR X5, X1\n\t\tPXOR X6, X2\n\t\tPXOR X7, X3\n\n\t\tPXOR X8, X0\n\t\tPXOR X9, X1\n\t\tPXOR X10, X2\n\t\tPXOR X11, X3\n\n\t\tDECQ AX\n\t\tJNE loop_select_base\n\n\tMOVOU X0, (16*0)(DX)\n\tMOVOU X1, (16*1)(DX)\n\tMOVOU X2, (16*2)(DX)\n\tMOVOU X3, (16*3)(DX)\n\n\tRET\n/* ---------------------------------------*/\n// func p256OrdMul(res, in1, in2 []uint64)\nTEXT \u00b7p256OrdMul(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in1+24(FP), x_ptr\n\tMOVQ in2+48(FP), y_ptr\n\t// x * y[0]\n\tMOVQ (8*0)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tMOVQ AX, acc0\n\tMOVQ DX, acc1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, acc2\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\tXORQ acc5, acc5\n\t// First reduction step\n\tMOVQ acc0, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc0\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc1\n\tADCQ $0, DX\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x10(SB), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x18(SB), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ DX, acc4\n\tADCQ $0, acc5\n\t// x * y[1]\n\tMOVQ (8*1)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ DX, acc5\n\tADCQ $0, acc0\n\t// Second reduction step\n\tMOVQ acc1, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x10(SB), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x18(SB), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ DX, acc5\n\tADCQ $0, acc0\n\t// x * y[2]\n\tMOVQ (8*2)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ DX, acc0\n\tADCQ $0, acc1\n\t// Third reduction step\n\tMOVQ acc2, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x10(SB), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x18(SB), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ DX, acc0\n\tADCQ $0, acc1\n\t// x * y[3]\n\tMOVQ (8*3)(y_ptr), t0\n\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc0\n\tADCQ $0, DX\n\tADDQ AX, acc0\n\tADCQ DX, acc1\n\tADCQ $0, acc2\n\t// Last reduction step\n\tMOVQ acc3, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x10(SB), AX\n\tMULQ t0\n\tADDQ t1, acc5\n\tADCQ $0, DX\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x18(SB), AX\n\tMULQ t0\n\tADDQ t1, acc0\n\tADCQ $0, DX\n\tADDQ AX, acc0\n\tADCQ DX, acc1\n\tADCQ $0, acc2\n\t// Copy result [255:0]\n\tMOVQ acc4, x_ptr\n\tMOVQ acc5, acc3\n\tMOVQ acc0, t0\n\tMOVQ acc1, t1\n\t// Subtract p256\n\tSUBQ p256ord<>+0x00(SB), acc4\n\tSBBQ p256ord<>+0x08(SB) ,acc5\n\tSBBQ p256ord<>+0x10(SB), acc0\n\tSBBQ p256ord<>+0x18(SB), acc1\n\tSBBQ $0, acc2\n\n\tCMOVQCS x_ptr, acc4\n\tCMOVQCS acc3, acc5\n\tCMOVQCS t0, acc0\n\tCMOVQCS t1, acc1\n\n\tMOVQ acc4, (8*0)(res_ptr)\n\tMOVQ acc5, (8*1)(res_ptr)\n\tMOVQ acc0, (8*2)(res_ptr)\n\tMOVQ acc1, (8*3)(res_ptr)\n\n\tRET\n/* ---------------------------------------*/\n// func p256OrdSqr(res, in []uint64, n int)\nTEXT \u00b7p256OrdSqr(SB),NOSPLIT,$0\n\tMOVQ res+0(FP), res_ptr\n\tMOVQ in+24(FP), x_ptr\n\tMOVQ n+48(FP), BX\n\nordSqrLoop:\n\n\t// y[1:] * y[0]\n\tMOVQ (8*0)(x_ptr), t0\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ t0\n\tMOVQ AX, acc1\n\tMOVQ DX, acc2\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc3\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\t// y[2:] * y[1]\n\tMOVQ (8*1)(x_ptr), t0\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ t1, acc4\n\tADCQ $0, DX\n\tADDQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, acc5\n\t// y[3] * y[2]\n\tMOVQ (8*2)(x_ptr), t0\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ t0\n\tADDQ AX, acc5\n\tADCQ $0, DX\n\tMOVQ DX, y_ptr\n\tXORQ t1, t1\n\t// *2\n\tADDQ acc1, acc1\n\tADCQ acc2, acc2\n\tADCQ acc3, acc3\n\tADCQ acc4, acc4\n\tADCQ acc5, acc5\n\tADCQ y_ptr, y_ptr\n\tADCQ $0, t1\n\t// Missing products\n\tMOVQ (8*0)(x_ptr), AX\n\tMULQ AX\n\tMOVQ AX, acc0\n\tMOVQ DX, t0\n\n\tMOVQ (8*1)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc1\n\tADCQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t0\n\n\tMOVQ (8*2)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc3\n\tADCQ AX, acc4\n\tADCQ $0, DX\n\tMOVQ DX, t0\n\n\tMOVQ (8*3)(x_ptr), AX\n\tMULQ AX\n\tADDQ t0, acc5\n\tADCQ AX, y_ptr\n\tADCQ DX, t1\n\tMOVQ t1, x_ptr\n\t// First reduction step\n\tMOVQ acc0, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc0\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc1\n\tADCQ $0, DX\n\tADDQ AX, acc1\n\n\tMOVQ t0, t1\n\tADCQ DX, acc2\n\tADCQ $0, t1\n\tSUBQ t0, acc2\n\tSBBQ $0, t1\n\n\tMOVQ t0, AX\n\tMOVQ t0, DX\n\tMOVQ t0, acc0\n\tSHLQ $32, AX\n\tSHRQ $32, DX\n\n\tADDQ t1, acc3\n\tADCQ $0, acc0\n\tSUBQ AX, acc3\n\tSBBQ DX, acc0\n\t// Second reduction step\n\tMOVQ acc1, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc1\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc2\n\tADCQ $0, DX\n\tADDQ AX, acc2\n\n\tMOVQ t0, t1\n\tADCQ DX, acc3\n\tADCQ $0, t1\n\tSUBQ t0, acc3\n\tSBBQ $0, t1\n\n\tMOVQ t0, AX\n\tMOVQ t0, DX\n\tMOVQ t0, acc1\n\tSHLQ $32, AX\n\tSHRQ $32, DX\n\n\tADDQ t1, acc0\n\tADCQ $0, acc1\n\tSUBQ AX, acc0\n\tSBBQ DX, acc1\n\t// Third reduction step\n\tMOVQ acc2, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc2\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc3\n\tADCQ $0, DX\n\tADDQ AX, acc3\n\n\tMOVQ t0, t1\n\tADCQ DX, acc0\n\tADCQ $0, t1\n\tSUBQ t0, acc0\n\tSBBQ $0, t1\n\n\tMOVQ t0, AX\n\tMOVQ t0, DX\n\tMOVQ t0, acc2\n\tSHLQ $32, AX\n\tSHRQ $32, DX\n\n\tADDQ t1, acc1\n\tADCQ $0, acc2\n\tSUBQ AX, acc1\n\tSBBQ DX, acc2\n\t// Last reduction step\n\tMOVQ acc3, AX\n\tMULQ p256ordK0<>(SB)\n\tMOVQ AX, t0\n\n\tMOVQ p256ord<>+0x00(SB), AX\n\tMULQ t0\n\tADDQ AX, acc3\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ p256ord<>+0x08(SB), AX\n\tMULQ t0\n\tADDQ t1, acc0\n\tADCQ $0, DX\n\tADDQ AX, acc0\n\tADCQ $0, DX\n\tMOVQ DX, t1\n\n\tMOVQ t0, t1\n\tADCQ DX, acc1\n\tADCQ $0, t1\n\tSUBQ t0, acc1\n\tSBBQ $0, t1\n\n\tMOVQ t0, AX\n\tMOVQ t0, DX\n\tMOVQ t0, acc3\n\tSHLQ $32, AX\n\tSHRQ $32, DX\n\n\tADDQ t1, acc2\n\tADCQ $0, acc3\n\tSUBQ AX, acc2\n\tSBBQ DX, acc3\n\tXORQ t0, t0\n\t// Add bits [511:256] of the sqr result\n\tADCQ acc4, acc0\n\tADCQ acc5, acc1\n\tADCQ y_ptr, acc2\n\tADCQ x_ptr, acc3\n\tADCQ $0, t0\n\n\tMOVQ acc0, acc4\n\tMOVQ acc1, acc5\n\tMOVQ acc2, y_ptr\n\tMOVQ acc3, t1\n\t// Subtract p256\n\tSUBQ p256ord<>+0x00(SB), acc0\n\tSBBQ p256ord<>+0x08(SB) ,acc1\n\tSBBQ p256ord<>+0x10(SB), acc2\n\tSBBQ p256ord<>+0x18(SB), acc3\n\tSBBQ $0, t0\n\n\tCMOVQCS acc4, acc0\n\tCMOVQCS acc5, acc1\n\tCMOVQCS y_ptr, acc2\n\tCMOVQCS t1, acc3\n\n\tMOVQ acc0, (8*0)(res_ptr)\n\tMOVQ acc1, (8*1)(res_ptr)\n\tMOVQ acc2, (8*2)(res_ptr)\n\tMOVQ acc3, (8*3)(res_ptr)\n\tMOVQ res_ptr, x_ptr\n\tDECQ BX\n\tJNE ordSqrLoop\n\n\tRET\n/* ---------------------------------------*/\n#undef res_ptr\n#undef x_ptr\n#undef y_ptr\n\n#undef acc0\n#undef acc1\n#undef acc2\n#undef acc3\n#undef acc4\n#undef acc5\n#undef t0\n#undef t1\n/* ---------------------------------------*/\n#define mul0 AX\n#define mul1 DX\n#define acc0 BX\n#define acc1 CX\n#define acc2 R8\n#define acc3 R9\n#define acc4 R10\n#define acc5 R11\n#define acc6 R12\n#define acc7 R13\n#define t0 R14\n#define t1 R15\n#define t2 DI\n#define t3 SI\n#define hlp BP\n/* ---------------------------------------*/\nTEXT p256SubInternal(SB),NOSPLIT,$0\n\tXORQ mul0, mul0\n\tSUBQ t0, acc4\n\tSBBQ t1, acc5\n\tSBBQ t2, acc6\n\tSBBQ t3, acc7\n\tSBBQ $0, mul0\n\n\tMOVQ acc4, acc0\n\tMOVQ acc5, acc1\n\tMOVQ acc6, acc2\n\tMOVQ acc7, acc3\n\n\tADDQ $-1, acc4\n\tADCQ p256const0<>(SB), acc5\n\tADCQ $0, acc6\n\tADCQ p256const1<>(SB), acc7\n\tANDQ $1, mul0\n\n\tCMOVQEQ acc0, acc4\n\tCMOVQEQ acc1, acc5\n\tCMOVQEQ acc2, acc6\n\tCMOVQEQ acc3, acc7\n\n\tRET\n/* ---------------------------------------*/\nTEXT p256MulInternal(SB),NOSPLIT,$0\n\tMOVQ acc4, mul0\n\tMULQ t0\n\tMOVQ mul0, acc0\n\tMOVQ mul1, acc1\n\n\tMOVQ acc4, mul0\n\tMULQ t1\n\tADDQ mul0, acc1\n\tADCQ $0, mul1\n\tMOVQ mul1, acc2\n\n\tMOVQ acc4, mul0\n\tMULQ t2\n\tADDQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, acc3\n\n\tMOVQ acc4, mul0\n\tMULQ t3\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, acc4\n\n\tMOVQ acc5, mul0\n\tMULQ t0\n\tADDQ mul0, acc1\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc5, mul0\n\tMULQ t1\n\tADDQ hlp, acc2\n\tADCQ $0, mul1\n\tADDQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc5, mul0\n\tMULQ t2\n\tADDQ hlp, acc3\n\tADCQ $0, mul1\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc5, mul0\n\tMULQ t3\n\tADDQ hlp, acc4\n\tADCQ $0, mul1\n\tADDQ mul0, acc4\n\tADCQ $0, mul1\n\tMOVQ mul1, acc5\n\n\tMOVQ acc6, mul0\n\tMULQ t0\n\tADDQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc6, mul0\n\tMULQ t1\n\tADDQ hlp, acc3\n\tADCQ $0, mul1\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc6, mul0\n\tMULQ t2\n\tADDQ hlp, acc4\n\tADCQ $0, mul1\n\tADDQ mul0, acc4\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc6, mul0\n\tMULQ t3\n\tADDQ hlp, acc5\n\tADCQ $0, mul1\n\tADDQ mul0, acc5\n\tADCQ $0, mul1\n\tMOVQ mul1, acc6\n\n\tMOVQ acc7, mul0\n\tMULQ t0\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc7, mul0\n\tMULQ t1\n\tADDQ hlp, acc4\n\tADCQ $0, mul1\n\tADDQ mul0, acc4\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc7, mul0\n\tMULQ t2\n\tADDQ hlp, acc5\n\tADCQ $0, mul1\n\tADDQ mul0, acc5\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc7, mul0\n\tMULQ t3\n\tADDQ hlp, acc6\n\tADCQ $0, mul1\n\tADDQ mul0, acc6\n\tADCQ $0, mul1\n\tMOVQ mul1, acc7\n\t// First reduction step\n\tMOVQ acc0, mul0\n\tMOVQ acc0, hlp\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc0, acc1\n\tADCQ hlp, acc2\n\tADCQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, acc0\n\t// Second reduction step\n\tMOVQ acc1, mul0\n\tMOVQ acc1, hlp\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc1, acc2\n\tADCQ hlp, acc3\n\tADCQ mul0, acc0\n\tADCQ $0, mul1\n\tMOVQ mul1, acc1\n\t// Third reduction step\n\tMOVQ acc2, mul0\n\tMOVQ acc2, hlp\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc2, acc3\n\tADCQ hlp, acc0\n\tADCQ mul0, acc1\n\tADCQ $0, mul1\n\tMOVQ mul1, acc2\n\t// Last reduction step\n\tMOVQ acc3, mul0\n\tMOVQ acc3, hlp\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc3, acc0\n\tADCQ hlp, acc1\n\tADCQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, acc3\n\tBYTE $0x48; BYTE $0xc7; BYTE $0xc5; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00   // MOVQ $0, BP\n\t// Add bits [511:256] of the result\n\tADCQ acc0, acc4\n\tADCQ acc1, acc5\n\tADCQ acc2, acc6\n\tADCQ acc3, acc7\n\tADCQ $0, hlp\n\t// Copy result\n\tMOVQ acc4, acc0\n\tMOVQ acc5, acc1\n\tMOVQ acc6, acc2\n\tMOVQ acc7, acc3\n\t// Subtract p256\n\tSUBQ $-1, acc4\n\tSBBQ p256const0<>(SB) ,acc5\n\tSBBQ $0, acc6\n\tSBBQ p256const1<>(SB), acc7\n\tSBBQ $0, hlp\n\t// If the result of the subtraction is negative, restore the previous result\n\tCMOVQCS acc0, acc4\n\tCMOVQCS acc1, acc5\n\tCMOVQCS acc2, acc6\n\tCMOVQCS acc3, acc7\n\n\tRET\n/* ---------------------------------------*/\nTEXT p256SqrInternal(SB),NOSPLIT,$0\n\n\tMOVQ acc4, mul0\n\tMULQ acc5\n\tMOVQ mul0, acc1\n\tMOVQ mul1, acc2\n\n\tMOVQ acc4, mul0\n\tMULQ acc6\n\tADDQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, acc3\n\n\tMOVQ acc4, mul0\n\tMULQ acc7\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, t0\n\n\tMOVQ acc5, mul0\n\tMULQ acc6\n\tADDQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, hlp\n\n\tMOVQ acc5, mul0\n\tMULQ acc7\n\tADDQ hlp, t0\n\tADCQ $0, mul1\n\tADDQ mul0, t0\n\tADCQ $0, mul1\n\tMOVQ mul1, t1\n\n\tMOVQ acc6, mul0\n\tMULQ acc7\n\tADDQ mul0, t1\n\tADCQ $0, mul1\n\tMOVQ mul1, t2\n\tXORQ t3, t3\n\t// *2\n\tADDQ acc1, acc1\n\tADCQ acc2, acc2\n\tADCQ acc3, acc3\n\tADCQ t0, t0\n\tADCQ t1, t1\n\tADCQ t2, t2\n\tADCQ $0, t3\n\t// Missing products\n\tMOVQ acc4, mul0\n\tMULQ mul0\n\tMOVQ mul0, acc0\n\tMOVQ DX, acc4\n\n\tMOVQ acc5, mul0\n\tMULQ mul0\n\tADDQ acc4, acc1\n\tADCQ mul0, acc2\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\n\tMOVQ acc6, mul0\n\tMULQ mul0\n\tADDQ acc4, acc3\n\tADCQ mul0, t0\n\tADCQ $0, DX\n\tMOVQ DX, acc4\n\n\tMOVQ acc7, mul0\n\tMULQ mul0\n\tADDQ acc4, t1\n\tADCQ mul0, t2\n\tADCQ DX, t3\n\t// First reduction step\n\tMOVQ acc0, mul0\n\tMOVQ acc0, hlp\n\tSHLQ $32, acc0\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc0, acc1\n\tADCQ hlp, acc2\n\tADCQ mul0, acc3\n\tADCQ $0, mul1\n\tMOVQ mul1, acc0\n\t// Second reduction step\n\tMOVQ acc1, mul0\n\tMOVQ acc1, hlp\n\tSHLQ $32, acc1\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc1, acc2\n\tADCQ hlp, acc3\n\tADCQ mul0, acc0\n\tADCQ $0, mul1\n\tMOVQ mul1, acc1\n\t// Third reduction step\n\tMOVQ acc2, mul0\n\tMOVQ acc2, hlp\n\tSHLQ $32, acc2\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc2, acc3\n\tADCQ hlp, acc0\n\tADCQ mul0, acc1\n\tADCQ $0, mul1\n\tMOVQ mul1, acc2\n\t// Last reduction step\n\tMOVQ acc3, mul0\n\tMOVQ acc3, hlp\n\tSHLQ $32, acc3\n\tMULQ p256const1<>(SB)\n\tSHRQ $32, hlp\n\tADDQ acc3, acc0\n\tADCQ hlp, acc1\n\tADCQ mul0, acc2\n\tADCQ $0, mul1\n\tMOVQ mul1, acc3\n\tBYTE $0x48; BYTE $0xc7; BYTE $0xc5; BYTE $0x00; BYTE $0x00; BYTE $0x00; BYTE $0x00   // MOVQ $0, BP\n\t// Add bits [511:256] of the result\n\tADCQ acc0, t0\n\tADCQ acc1, t1\n\tADCQ acc2, t2\n\tADCQ acc3, t3\n\tADCQ $0, hlp\n\t// Copy result\n\tMOVQ t0, acc4\n\tMOVQ t1, acc5\n\tMOVQ t2, acc6\n\tMOVQ t3, acc7\n\t// Subtract p256\n\tSUBQ $-1, acc4\n\tSBBQ p256const0<>(SB) ,acc5\n\tSBBQ $0, acc6\n\tSBBQ p256const1<>(SB), acc7\n\tSBBQ $0, hlp\n\t// If the result of the subtraction is negative, restore the previous result\n\tCMOVQCS t0, acc4\n\tCMOVQCS t1, acc5\n\tCMOVQCS t2, acc6\n\tCMOVQCS t3, acc7\n\n\tRET\n/* ---------------------------------------*/\n#define p256MulBy2Inline\\\n\tXORQ mul0, mul0;\\\n\tADDQ acc4, acc4;\\\n\tADCQ acc5, acc5;\\\n\tADCQ acc6, acc6;\\\n\tADCQ acc7, acc7;\\\n\tADCQ $0, mul0;\\\n\tMOVQ acc4, t0;\\\n\tMOVQ acc5, t1;\\\n\tMOVQ acc6, t2;\\\n\tMOVQ acc7, t3;\\\n\tSUBQ $-1, t0;\\\n\tSBBQ p256const0<>(SB), t1;\\\n\tSBBQ $0, t2;\\\n\tSBBQ p256const1<>(SB), t3;\\\n\tSBBQ $0, mul0;\\\n\tCMOVQCS acc4, t0;\\\n\tCMOVQCS acc5, t1;\\\n\tCMOVQCS acc6, t2;\\\n\tCMOVQCS acc7, t3;\n/* ---------------------------------------*/\n#define p256AddInline \\\n\tXORQ mul0, mul0;\\\n\tADDQ t0, acc4;\\\n\tADCQ t1, acc5;\\\n\tADCQ t2, acc6;\\\n\tADCQ t3, acc7;\\\n\tADCQ $0, mul0;\\\n\tMOVQ acc4, t0;\\\n\tMOVQ acc5, t1;\\\n\tMOVQ acc6, t2;\\\n\tMOVQ acc7, t3;\\\n\tSUBQ $-1, t0;\\\n\tSBBQ p256const0<>(SB), t1;\\\n\tSBBQ $0, t2;\\\n\tSBBQ p256const1<>(SB), t3;\\\n\tSBBQ $0, mul0;\\\n\tCMOVQCS acc4, t0;\\\n\tCMOVQCS acc5, t1;\\\n\tCMOVQCS acc6, t2;\\\n\tCMOVQCS acc7, t3;\n/* ---------------------------------------*/\n#define LDacc(src) MOVQ src(8*0), acc4; MOVQ src(8*1), acc5; MOVQ src(8*2), acc6; MOVQ src(8*3), acc7\n#define LDt(src)   MOVQ src(8*0), t0; MOVQ src(8*1), t1; MOVQ src(8*2), t2; MOVQ src(8*3), t3\n#define ST(dst)    MOVQ acc4, dst(8*0); MOVQ acc5, dst(8*1); MOVQ acc6, dst(8*2); MOVQ acc7, dst(8*3)\n#define STt(dst)   MOVQ t0, dst(8*0); MOVQ t1, dst(8*1); MOVQ t2, dst(8*2); MOVQ t3, dst(8*3)\n#define acc2t      MOVQ acc4, t0; MOVQ acc5, t1; MOVQ acc6, t2; MOVQ acc7, t3\n#define t2acc      MOVQ t0, acc4; MOVQ t1, acc5; MOVQ t2, acc6; MOVQ t3, acc7\n/* ---------------------------------------*/\n#define x1in(off) (32*0 + off)(SP)\n#define y1in(off) (32*1 + off)(SP)\n#define z1in(off) (32*2 + off)(SP)\n#define x2in(off) (32*3 + off)(SP)\n#define y2in(off) (32*4 + off)(SP)\n#define xout(off) (32*5 + off)(SP)\n#define yout(off) (32*6 + off)(SP)\n#define zout(off) (32*7 + off)(SP)\n#define s2(off)   (32*8 + off)(SP)\n#define z1sqr(off) (32*9 + off)(SP)\n#define h(off)\t  (32*10 + off)(SP)\n#define r(off)\t  (32*11 + off)(SP)\n#define hsqr(off) (32*12 + off)(SP)\n#define rsqr(off) (32*13 + off)(SP)\n#define hcub(off) (32*14 + off)(SP)\n#define rptr\t  (32*15)(SP)\n#define sel_save  (32*15 + 8)(SP)\n#define zero_save (32*15 + 8 + 4)(SP)\n\n// func p256PointAddAffineAsm(res, in1, in2 []uint64, sign, sel, zero int)\nTEXT \u00b7p256PointAddAffineAsm(SB),0,$512-96\n\t// Move input to stack in order to free registers\n\tMOVQ res+0(FP), AX\n\tMOVQ in1+24(FP), BX\n\tMOVQ in2+48(FP), CX\n\tMOVQ sign+72(FP), DX\n\tMOVQ sel+80(FP), t1\n\tMOVQ zero+88(FP), t2\n\n\tMOVOU (16*0)(BX), X0\n\tMOVOU (16*1)(BX), X1\n\tMOVOU (16*2)(BX), X2\n\tMOVOU (16*3)(BX), X3\n\tMOVOU (16*4)(BX), X4\n\tMOVOU (16*5)(BX), X5\n\n\tMOVOU X0, x1in(16*0)\n\tMOVOU X1, x1in(16*1)\n\tMOVOU X2, y1in(16*0)\n\tMOVOU X3, y1in(16*1)\n\tMOVOU X4, z1in(16*0)\n\tMOVOU X5, z1in(16*1)\n\n\tMOVOU (16*0)(CX), X0\n\tMOVOU (16*1)(CX), X1\n\n\tMOVOU X0, x2in(16*0)\n\tMOVOU X1, x2in(16*1)\n\t// Store pointer to result\n\tMOVQ mul0, rptr\n\tMOVL t1, sel_save\n\tMOVL t2, zero_save\n\t// Negate y2in based on sign\n\tMOVQ (16*2 + 8*0)(CX), acc4\n\tMOVQ (16*2 + 8*1)(CX), acc5\n\tMOVQ (16*2 + 8*2)(CX), acc6\n\tMOVQ (16*2 + 8*3)(CX), acc7\n\tMOVQ $-1, acc0\n\tMOVQ p256const0<>(SB), acc1\n\tMOVQ $0, acc2\n\tMOVQ p256const1<>(SB), acc3\n\tXORQ mul0, mul0\n\t// Speculatively subtract\n\tSUBQ acc4, acc0\n\tSBBQ acc5, acc1\n\tSBBQ acc6, acc2\n\tSBBQ acc7, acc3\n\tSBBQ $0, mul0\n\tMOVQ acc0, t0\n\tMOVQ acc1, t1\n\tMOVQ acc2, t2\n\tMOVQ acc3, t3\n\t// Add in case the operand was > p256\n\tADDQ $-1, acc0\n\tADCQ p256const0<>(SB), acc1\n\tADCQ $0, acc2\n\tADCQ p256const1<>(SB), acc3\n\tADCQ $0, mul0\n\tCMOVQNE t0, acc0\n\tCMOVQNE t1, acc1\n\tCMOVQNE t2, acc2\n\tCMOVQNE t3, acc3\n\t// If condition is 0, keep original value\n\tTESTQ DX, DX\n\tCMOVQEQ acc4, acc0\n\tCMOVQEQ acc5, acc1\n\tCMOVQEQ acc6, acc2\n\tCMOVQEQ acc7, acc3\n\t// Store result\n\tMOVQ acc0, y2in(8*0)\n\tMOVQ acc1, y2in(8*1)\n\tMOVQ acc2, y2in(8*2)\n\tMOVQ acc3, y2in(8*3)\n\t// Begin point add\n\tLDacc (z1in)\n\tCALL p256SqrInternal(SB)\t// z1\u02c62\n\tST (z1sqr)\n\n\tLDt (x2in)\n\tCALL p256MulInternal(SB)\t// x2 * z1\u02c62\n\n\tLDt (x1in)\n\tCALL p256SubInternal(SB)\t// h = u2 - u1\n\tST (h)\n\n\tLDt (z1in)\n\tCALL p256MulInternal(SB)\t// z3 = h * z1\n\tST (zout)\n\n\tLDacc (z1sqr)\n\tCALL p256MulInternal(SB)\t// z1\u02c63\n\n\tLDt (y2in)\n\tCALL p256MulInternal(SB)\t// s2 = y2 * z1\u02c63\n\tST (s2)\n\n\tLDt (y1in)\n\tCALL p256SubInternal(SB)\t// r = s2 - s1\n\tST (r)\n\n\tCALL p256SqrInternal(SB)\t// rsqr = r\u02c62\n\tST (rsqr)\n\n\tLDacc (h)\n\tCALL p256SqrInternal(SB)\t// hsqr = h\u02c62\n\tST (hsqr)\n\n\tLDt (h)\n\tCALL p256MulInternal(SB)\t// hcub = h\u02c63\n\tST (hcub)\n\n\tLDt (y1in)\n\tCALL p256MulInternal(SB)\t// y1 * h\u02c63\n\tST (s2)\n\n\tLDacc (x1in)\n\tLDt (hsqr)\n\tCALL p256MulInternal(SB)\t// u1 * h\u02c62\n\tST (h)\n\n\tp256MulBy2Inline\t\t\t// u1 * h\u02c62 * 2, inline\n\tLDacc (rsqr)\n\tCALL p256SubInternal(SB)\t// r\u02c62 - u1 * h\u02c62 * 2\n\n\tLDt (hcub)\n\tCALL p256SubInternal(SB)\n\tST (xout)\n\n\tMOVQ acc4, t0\n\tMOVQ acc5, t1\n\tMOVQ acc6, t2\n\tMOVQ acc7, t3\n\tLDacc (h)\n\tCALL p256SubInternal(SB)\n\n\tLDt (r)\n\tCALL p256MulInternal(SB)\n\n\tLDt (s2)\n\tCALL p256SubInternal(SB)\n\tST (yout)\n\t// Load stored values from stack\n\tMOVQ rptr, AX\n\tMOVL sel_save, BX\n\tMOVL zero_save, CX\n\t// The result is not valid if (sel == 0), conditional choose\n\tMOVOU xout(16*0), X0\n\tMOVOU xout(16*1), X1\n\tMOVOU yout(16*0), X2\n\tMOVOU yout(16*1), X3\n\tMOVOU zout(16*0), X4\n\tMOVOU zout(16*1), X5\n\n\tMOVL BX, X6\n\tMOVL CX, X7\n\n\tPXOR X8, X8\n\tPCMPEQL X9, X9\n\n\tPSHUFD $0, X6, X6\n\tPSHUFD $0, X7, X7\n\n\tPCMPEQL X8, X6\n\tPCMPEQL X8, X7\n\n\tMOVOU X6, X15\n\tPANDN X9, X15\n\n\tMOVOU x1in(16*0), X9\n\tMOVOU x1in(16*1), X10\n\tMOVOU y1in(16*0), X11\n\tMOVOU y1in(16*1), X12\n\tMOVOU z1in(16*0), X13\n\tMOVOU z1in(16*1), X14\n\n\tPAND X15, X0\n\tPAND X15, X1\n\tPAND X15, X2\n\tPAND X15, X3\n\tPAND X15, X4\n\tPAND X15, X5\n\n\tPAND X6, X9\n\tPAND X6, X10\n\tPAND X6, X11\n\tPAND X6, X12\n\tPAND X6, X13\n\tPAND X6, X14\n\n\tPXOR X9, X0\n\tPXOR X10, X1\n\tPXOR X11, X2\n\tPXOR X12, X3\n\tPXOR X13, X4\n\tPXOR X14, X5\n\t// Similarly if zero == 0\n\tPCMPEQL X9, X9\n\tMOVOU X7, X15\n\tPANDN X9, X15\n\n\tMOVOU x2in(16*0), X9\n\tMOVOU x2in(16*1), X10\n\tMOVOU y2in(16*0), X11\n\tMOVOU y2in(16*1), X12\n\tMOVOU p256one<>+0x00(SB), X13\n\tMOVOU p256one<>+0x10(SB), X14\n\n\tPAND X15, X0\n\tPAND X15, X1\n\tPAND X15, X2\n\tPAND X15, X3\n\tPAND X15, X4\n\tPAND X15, X5\n\n\tPAND X7, X9\n\tPAND X7, X10\n\tPAND X7, X11\n\tPAND X7, X12\n\tPAND X7, X13\n\tPAND X7, X14\n\n\tPXOR X9, X0\n\tPXOR X10, X1\n\tPXOR X11, X2\n\tPXOR X12, X3\n\tPXOR X13, X4\n\tPXOR X14, X5\n\t// Finally output the result\n\tMOVOU X0, (16*0)(AX)\n\tMOVOU X1, (16*1)(AX)\n\tMOVOU X2, (16*2)(AX)\n\tMOVOU X3, (16*3)(AX)\n\tMOVOU X4, (16*4)(AX)\n\tMOVOU X5, (16*5)(AX)\n\tMOVQ $0, rptr\n\n\tRET\n#undef x1in\n#undef y1in\n#undef z1in\n#undef x2in\n#undef y2in\n#undef xout\n#undef yout\n#undef zout\n#undef s2\n#undef z1sqr\n#undef h\n#undef r\n#undef hsqr\n#undef rsqr\n#undef hcub\n#undef rptr\n#undef sel_save\n#undef zero_save\n/* ---------------------------------------*/\n#define x1in(off) (32*0 + off)(SP)\n#define y1in(off) (32*1 + off)(SP)\n#define z1in(off) (32*2 + off)(SP)\n#define x2in(off) (32*3 + off)(SP)\n#define y2in(off) (32*4 + off)(SP)\n#define z2in(off) (32*5 + off)(SP)\n\n#define xout(off) (32*6 + off)(SP)\n#define yout(off) (32*7 + off)(SP)\n#define zout(off) (32*8 + off)(SP)\n\n#define u1(off)    (32*9 + off)(SP)\n#define u2(off)    (32*10 + off)(SP)\n#define s1(off)    (32*11 + off)(SP)\n#define s2(off)    (32*12 + off)(SP)\n#define z1sqr(off) (32*13 + off)(SP)\n#define z2sqr(off) (32*14 + off)(SP)\n#define h(off)     (32*15 + off)(SP)\n#define r(off)     (32*16 + off)(SP)\n#define hsqr(off)  (32*17 + off)(SP)\n#define rsqr(off)  (32*18 + off)(SP)\n#define hcub(off)  (32*19 + off)(SP)\n#define rptr       (32*20)(SP)\n\n//func p256PointAddAsm(res, in1, in2 []uint64)\nTEXT \u00b7p256PointAddAsm(SB),0,$672-72\n\t// Move input to stack in order to free registers\n\tMOVQ res+0(FP), AX\n\tMOVQ in1+24(FP), BX\n\tMOVQ in2+48(FP), CX\n\n\tMOVOU (16*0)(BX), X0\n\tMOVOU (16*1)(BX), X1\n\tMOVOU (16*2)(BX), X2\n\tMOVOU (16*3)(BX), X3\n\tMOVOU (16*4)(BX), X4\n\tMOVOU (16*5)(BX), X5\n\n\tMOVOU X0, x1in(16*0)\n\tMOVOU X1, x1in(16*1)\n\tMOVOU X2, y1in(16*0)\n\tMOVOU X3, y1in(16*1)\n\tMOVOU X4, z1in(16*0)\n\tMOVOU X5, z1in(16*1)\n\n\tMOVOU (16*0)(CX), X0\n\tMOVOU (16*1)(CX), X1\n\tMOVOU (16*2)(CX), X2\n\tMOVOU (16*3)(CX), X3\n\tMOVOU (16*4)(CX), X4\n\tMOVOU (16*5)(CX), X5\n\n\tMOVOU X0, x2in(16*0)\n\tMOVOU X1, x2in(16*1)\n\tMOVOU X2, y2in(16*0)\n\tMOVOU X3, y2in(16*1)\n\tMOVOU X4, z2in(16*0)\n\tMOVOU X5, z2in(16*1)\n\t// Store pointer to result\n\tMOVQ AX, rptr\n\t// Begin point add\n\tLDacc (z2in)\n\tCALL p256SqrInternal(SB)\t// z2\u02c62\n\tST (z2sqr)\n\tLDt (z2in)\n\tCALL p256MulInternal(SB)\t// z2\u02c63\n\tLDt (y1in)\n\tCALL p256MulInternal(SB)\t// s1 = z2\u02c63*y1\n\tST (s1)\n\n\tLDacc (z1in)\n\tCALL p256SqrInternal(SB)\t// z1\u02c62\n\tST (z1sqr)\n\tLDt (z1in)\n\tCALL p256MulInternal(SB)\t// z1\u02c63\n\tLDt (y2in)\n\tCALL p256MulInternal(SB)\t// s2 = z1\u02c63*y2\n\tST (s2)\n\n\tLDt (s1)\n\tCALL p256SubInternal(SB)\t// r = s2 - s1\n\tST (r)\n\n\tLDacc (z2sqr)\n\tLDt (x1in)\n\tCALL p256MulInternal(SB)\t// u1 = x1 * z2\u02c62\n\tST (u1)\n\tLDacc (z1sqr)\n\tLDt (x2in)\n\tCALL p256MulInternal(SB)\t// u2 = x2 * z1\u02c62\n\tST (u2)\n\n\tLDt (u1)\n\tCALL p256SubInternal(SB)\t// h = u2 - u1\n\tST (h)\n\n\tLDacc (r)\n\tCALL p256SqrInternal(SB)\t// rsqr = r\u02c62\n\tST (rsqr)\n\n\tLDacc (h)\n\tCALL p256SqrInternal(SB)\t// hsqr = h\u02c62\n\tST (hsqr)\n\n\tLDt (h)\n\tCALL p256MulInternal(SB)\t// hcub = h\u02c63\n\tST (hcub)\n\n\tLDt (s1)\n\tCALL p256MulInternal(SB)\n\tST (s2)\n\n\tLDacc (z1in)\n\tLDt (z2in)\n\tCALL p256MulInternal(SB)\t// z1 * z2\n\tLDt (h)\n\tCALL p256MulInternal(SB)\t// z1 * z2 * h\n\tST (zout)\n\n\tLDacc (hsqr)\n\tLDt (u1)\n\tCALL p256MulInternal(SB)\t// h\u02c62 * u1\n\tST (u2)\n\n\tp256MulBy2Inline\t// u1 * h\u02c62 * 2, inline\n\tLDacc (rsqr)\n\tCALL p256SubInternal(SB)\t// r\u02c62 - u1 * h\u02c62 * 2\n\n\tLDt (hcub)\n\tCALL p256SubInternal(SB)\n\tST (xout)\n\n\tMOVQ acc4, t0\n\tMOVQ acc5, t1\n\tMOVQ acc6, t2\n\tMOVQ acc7, t3\n\tLDacc (u2)\n\tCALL p256SubInternal(SB)\n\n\tLDt (r)\n\tCALL p256MulInternal(SB)\n\n\tLDt (s2)\n\tCALL p256SubInternal(SB)\n\tST (yout)\n\n\tMOVOU xout(16*0), X0\n\tMOVOU xout(16*1), X1\n\tMOVOU yout(16*0), X2\n\tMOVOU yout(16*1), X3\n\tMOVOU zout(16*0), X4\n\tMOVOU zout(16*1), X5\n\t// Finally output the result\n\tMOVQ rptr, AX\n\tMOVQ $0, rptr\n\tMOVOU X0, (16*0)(AX)\n\tMOVOU X1, (16*1)(AX)\n\tMOVOU X2, (16*2)(AX)\n\tMOVOU X3, (16*3)(AX)\n\tMOVOU X4, (16*4)(AX)\n\tMOVOU X5, (16*5)(AX)\n\n\tRET\n#undef x1in\n#undef y1in\n#undef z1in\n#undef x2in\n#undef y2in\n#undef z2in\n#undef xout\n#undef yout\n#undef zout\n#undef s1\n#undef s2\n#undef u1\n#undef u2\n#undef z1sqr\n#undef z2sqr\n#undef h\n#undef r\n#undef hsqr\n#undef rsqr\n#undef hcub\n#undef rptr\n/* ---------------------------------------*/\n#define x(off) (32*0 + off)(SP)\n#define y(off) (32*1 + off)(SP)\n#define z(off) (32*2 + off)(SP)\n\n#define s(off)\t(32*3 + off)(SP)\n#define m(off)\t(32*4 + off)(SP)\n#define zsqr(off) (32*5 + off)(SP)\n#define tmp(off)  (32*6 + off)(SP)\n#define rptr\t  (32*7)(SP)\n\n//func p256PointDoubleAsm(res, in []uint64)\nTEXT \u00b7p256PointDoubleAsm(SB),NOSPLIT,$256-48\n\t// Move input to stack in order to free registers\n\tMOVQ res+0(FP), AX\n\tMOVQ in+24(FP), BX\n\n\tMOVOU (16*0)(BX), X0\n\tMOVOU (16*1)(BX), X1\n\tMOVOU (16*2)(BX), X2\n\tMOVOU (16*3)(BX), X3\n\tMOVOU (16*4)(BX), X4\n\tMOVOU (16*5)(BX), X5\n\n\tMOVOU X0, x(16*0)\n\tMOVOU X1, x(16*1)\n\tMOVOU X2, y(16*0)\n\tMOVOU X3, y(16*1)\n\tMOVOU X4, z(16*0)\n\tMOVOU X5, z(16*1)\n\t// Store pointer to result\n\tMOVQ AX, rptr\n\t// Begin point double\n\tLDacc (z)\n\tCALL p256SqrInternal(SB)\n\tST (zsqr)\n\n\tLDt (x)\n\tp256AddInline\n\tSTt (m)\n\n\tLDacc (z)\n\tLDt (y)\n\tCALL p256MulInternal(SB)\n\tp256MulBy2Inline\n\tMOVQ rptr, AX\n\t// Store z\n\tMOVQ t0, (16*4 + 8*0)(AX)\n\tMOVQ t1, (16*4 + 8*1)(AX)\n\tMOVQ t2, (16*4 + 8*2)(AX)\n\tMOVQ t3, (16*4 + 8*3)(AX)\n\n\tLDacc (x)\n\tLDt (zsqr)\n\tCALL p256SubInternal(SB)\n\tLDt (m)\n\tCALL p256MulInternal(SB)\n\tST (m)\n\t// Multiply by 3\n\tp256MulBy2Inline\n\tLDacc (m)\n\tp256AddInline\n\tSTt (m)\n\t////////////////////////\n\tLDacc (y)\n\tp256MulBy2Inline\n\tt2acc\n\tCALL p256SqrInternal(SB)\n\tST (s)\n\tCALL p256SqrInternal(SB)\n\t// Divide by 2\n\tXORQ mul0, mul0\n\tMOVQ acc4, t0\n\tMOVQ acc5, t1\n\tMOVQ acc6, t2\n\tMOVQ acc7, t3\n\n\tADDQ $-1, acc4\n\tADCQ p256const0<>(SB), acc5\n\tADCQ $0, acc6\n\tADCQ p256const1<>(SB), acc7\n\tADCQ $0, mul0\n\tTESTQ $1, t0\n\n\tCMOVQEQ t0, acc4\n\tCMOVQEQ t1, acc5\n\tCMOVQEQ t2, acc6\n\tCMOVQEQ t3, acc7\n\tANDQ t0, mul0\n\n\tSHRQ $1, acc4:acc5\n\tSHRQ $1, acc5:acc6\n\tSHRQ $1, acc6:acc7\n\tSHRQ $1, acc7:mul0\n\tST (y)\n\t/////////////////////////\n\tLDacc (x)\n\tLDt (s)\n\tCALL p256MulInternal(SB)\n\tST (s)\n\tp256MulBy2Inline\n\tSTt (tmp)\n\n\tLDacc (m)\n\tCALL p256SqrInternal(SB)\n\tLDt (tmp)\n\tCALL p256SubInternal(SB)\n\n\tMOVQ rptr, AX\n\t// Store x\n\tMOVQ acc4, (16*0 + 8*0)(AX)\n\tMOVQ acc5, (16*0 + 8*1)(AX)\n\tMOVQ acc6, (16*0 + 8*2)(AX)\n\tMOVQ acc7, (16*0 + 8*3)(AX)\n\n\tacc2t\n\tLDacc (s)\n\tCALL p256SubInternal(SB)\n\n\tLDt (m)\n\tCALL p256MulInternal(SB)\n\n\tLDt (y)\n\tCALL p256SubInternal(SB)\n\tMOVQ rptr, AX\n\t// Store y\n\tMOVQ acc4, (16*2 + 8*0)(AX)\n\tMOVQ acc5, (16*2 + 8*1)(AX)\n\tMOVQ acc6, (16*2 + 8*2)(AX)\n\tMOVQ acc7, (16*2 + 8*3)(AX)\n\t///////////////////////\n\tMOVQ $0, rptr\n\n\tRET\n/* ---------------------------------------*/\n\n"], "filenames": ["src/crypto/elliptic/elliptic_test.go", "src/crypto/elliptic/p256_asm_amd64.s"], "buggy_code_start_loc": [302, 1317], "buggy_code_end_loc": [379, 1323], "fixing_code_start_loc": [303, 1317], "fixing_code_end_loc": [416, 1323], "type": "CWE-682", "message": "A bug in the standard library ScalarMult implementation of curve P-256 for amd64 architectures in Go before 1.7.6 and 1.8.x before 1.8.2 causes incorrect results to be generated for specific input points. An adaptive attack can be mounted to progressively extract the scalar input to ScalarMult by submitting crafted points and observing failures to the derive correct output. This leads to a full key recovery attack against static ECDH, as used in popular JWT libraries.", "other": {"cve": {"id": "CVE-2017-8932", "sourceIdentifier": "cve@mitre.org", "published": "2017-07-06T16:29:00.420", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A bug in the standard library ScalarMult implementation of curve P-256 for amd64 architectures in Go before 1.7.6 and 1.8.x before 1.8.2 causes incorrect results to be generated for specific input points. An adaptive attack can be mounted to progressively extract the scalar input to ScalarMult by submitting crafted points and observing failures to the derive correct output. This leads to a full key recovery attack against static ECDH, as used in popular JWT libraries."}, {"lang": "es", "value": "Un error en la implementaci\u00f3n de la biblioteca est\u00e1ndar ScalarMult de curve P-256 para arquitecturas amd64 en Go anterior a versi\u00f3n 1.7.6 y 1.8.x anterior a versi\u00f3n 1.8.2, causa resultados incorrectos para ser generados por puntos de entrada espec\u00edficos. Se puede montar un ataque adaptativo para extraer progresivamente la entrada scalar hacia ScalarMult mediante el env\u00edo de puntos creados y observando fallos para la salida correcta derivada. Esto conduce a un ataque de recuperaci\u00f3n de clave completa contra ECDH est\u00e1tico, tal y como es usado en las bibliotecas populares JWT."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-682"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:golang:go:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.7.5", "matchCriteriaId": "8244E4BF-E822-40BF-B436-35B073514530"}, {"vulnerable": true, "criteria": "cpe:2.3:a:golang:go:1.8:*:*:*:*:*:*:*", "matchCriteriaId": "19B9EAD3-EF36-4F95-8DB4-9FB8E19CC0D0"}, {"vulnerable": true, "criteria": "cpe:2.3:a:golang:go:1.8.1:*:*:*:*:*:*:*", "matchCriteriaId": "A0DC2B77-B2C2-41AE-B51E-A766C79AA00F"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:novell:suse_package_hub_for_suse_linux_enterprise:12:*:*:*:*:*:*:*", "matchCriteriaId": "B5BEF8F1-A70F-455C-BFDD-09E0A658F702"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:25:*:*:*:*:*:*:*", "matchCriteriaId": "772E9557-A371-4664-AE2D-4135AAEB89AA"}, {"vulnerable": true, "criteria": "cpe:2.3:o:opensuse:leap:42.2:*:*:*:*:*:*:*", "matchCriteriaId": "1EA337A3-B9A3-4962-B8BD-8E0C7C5B28EB"}]}]}], "references": [{"url": "http://lists.opensuse.org/opensuse-updates/2017-06/msg00079.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "http://lists.opensuse.org/opensuse-updates/2017-06/msg00080.html", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:1859", "source": "cve@mitre.org"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=1455191", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Third Party Advisory"]}, {"url": "https://github.com/golang/go/commit/9294fa2749ffee7edbbb817a0ef9fe633136fa9c", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://github.com/golang/go/issues/20040", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://go-review.googlesource.com/c/41070/", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://groups.google.com/d/msg/golang-announce/B5ww0iFt1_Q/TgUFJV14BgAJ", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LZH4T47ROLZ6YEZBDVXVS2KISTDMXAPS/", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/golang/go/commit/9294fa2749ffee7edbbb817a0ef9fe633136fa9c"}}