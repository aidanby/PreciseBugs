{"buggy_code": ["<?php\nnamespace um\\core;\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) exit;\n\nif ( ! class_exists( 'um\\core\\Shortcodes' ) ) {\n\n\n\t/**\n\t * Class Shortcodes\n\t * @package um\\core\n\t */\n\tclass Shortcodes {\n\n\t\tvar $profile_role = '';\n\n\t\t/**\n\t\t * Shortcodes constructor.\n\t\t */\n\t\tfunction __construct() {\n\n\t\t\t$this->message_mode = false;\n\t\t\t$this->custom_message = '';\n\n\t\t\t$this->loop = array();\n\n\t\t\tadd_shortcode( 'ultimatemember', array( &$this, 'ultimatemember' ) );\n\n\t\t\tadd_shortcode( 'ultimatemember_login', array( &$this, 'ultimatemember_login' ) );\n\t\t\tadd_shortcode( 'ultimatemember_register', array( &$this, 'ultimatemember_register' ) );\n\t\t\tadd_shortcode( 'ultimatemember_profile', array( &$this, 'ultimatemember_profile' ) );\n\t\t\tadd_shortcode( 'ultimatemember_directory', array( &$this, 'ultimatemember_directory' ) );\n\n\t\t\tadd_shortcode( 'um_loggedin', array( &$this, 'um_loggedin' ) );\n\t\t\tadd_shortcode( 'um_loggedout', array( &$this, 'um_loggedout' ) );\n\t\t\tadd_shortcode( 'um_show_content', array( &$this, 'um_shortcode_show_content_for_role' ) );\n\t\t\tadd_shortcode( 'ultimatemember_searchform', array( &$this, 'ultimatemember_searchform' ) );\n\n\t\t\tadd_filter( 'body_class', array( &$this, 'body_class' ), 0 );\n\n\t\t\tadd_filter( 'um_shortcode_args_filter', array( &$this, 'display_logout_form' ), 99 );\n\t\t\tadd_filter( 'um_shortcode_args_filter', array( &$this, 'parse_shortcode_args' ), 99 );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_emoji_base_uri\n\t\t\t * @description Change Emoji base URL\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$url\",\"type\":\"string\",\"desc\":\"Base URL\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_emoji_base_uri', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_emoji_base_uri', 'my_emoji_base_uri', 10, 1 );\n\t\t\t * function my_emoji_base_uri( $url ) {\n\t\t\t *     // your code here\n\t\t\t *     return $url;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$base_uri = apply_filters( 'um_emoji_base_uri', 'https://s.w.org/images/core/emoji/' );\n\n\t\t\t$this->emoji[':)'] = $base_uri . '72x72/1f604.png';\n\t\t\t$this->emoji[':smiley:'] = $base_uri . '72x72/1f603.png';\n\t\t\t$this->emoji[':D'] = $base_uri . '72x72/1f600.png';\n\t\t\t$this->emoji[':$'] = $base_uri . '72x72/1f60a.png';\n\t\t\t$this->emoji[':relaxed:'] = $base_uri . '72x72/263a.png';\n\t\t\t$this->emoji[';)'] = $base_uri . '72x72/1f609.png';\n\t\t\t$this->emoji[':heart_eyes:'] = $base_uri . '72x72/1f60d.png';\n\t\t\t$this->emoji[':kissing_heart:'] = $base_uri . '72x72/1f618.png';\n\t\t\t$this->emoji[':kissing_closed_eyes:'] = $base_uri . '72x72/1f61a.png';\n\t\t\t$this->emoji[':kissing:'] = $base_uri . '72x72/1f617.png';\n\t\t\t$this->emoji[':kissing_smiling_eyes:'] = $base_uri . '72x72/1f619.png';\n\t\t\t$this->emoji[';P'] = $base_uri . '72x72/1f61c.png';\n\t\t\t$this->emoji[':P'] = $base_uri . '72x72/1f61b.png';\n\t\t\t$this->emoji[':stuck_out_tongue_closed_eyes:'] = $base_uri . '72x72/1f61d.png';\n\t\t\t$this->emoji[':flushed:'] = $base_uri . '72x72/1f633.png';\n\t\t\t$this->emoji[':grin:'] = $base_uri . '72x72/1f601.png';\n\t\t\t$this->emoji[':pensive:'] = $base_uri . '72x72/1f614.png';\n\t\t\t$this->emoji[':relieved:'] = $base_uri . '72x72/1f60c.png';\n\t\t\t$this->emoji[':unamused'] = $base_uri . '72x72/1f612.png';\n\t\t\t$this->emoji[':('] = $base_uri . '72x72/1f61e.png';\n\t\t\t$this->emoji[':persevere:'] = $base_uri . '72x72/1f623.png';\n\t\t\t$this->emoji[\":'(\"] = $base_uri . '72x72/1f622.png';\n\t\t\t$this->emoji[':joy:'] = $base_uri . '72x72/1f602.png';\n\t\t\t$this->emoji[':sob:'] = $base_uri . '72x72/1f62d.png';\n\t\t\t$this->emoji[':sleepy:'] = $base_uri . '72x72/1f62a.png';\n\t\t\t$this->emoji[':disappointed_relieved:'] = $base_uri . '72x72/1f625.png';\n\t\t\t$this->emoji[':cold_sweat:'] = $base_uri . '72x72/1f630.png';\n\t\t\t$this->emoji[':sweat_smile:'] = $base_uri . '72x72/1f605.png';\n\t\t\t$this->emoji[':sweat:'] = $base_uri . '72x72/1f613.png';\n\t\t\t$this->emoji[':weary:'] = $base_uri . '72x72/1f629.png';\n\t\t\t$this->emoji[':tired_face:'] = $base_uri . '72x72/1f62b.png';\n\t\t\t$this->emoji[':fearful:'] = $base_uri . '72x72/1f628.png';\n\t\t\t$this->emoji[':scream:'] = $base_uri . '72x72/1f631.png';\n\t\t\t$this->emoji[':angry:'] = $base_uri . '72x72/1f620.png';\n\t\t\t$this->emoji[':rage:'] = $base_uri . '72x72/1f621.png';\n\t\t\t$this->emoji[':triumph'] = $base_uri . '72x72/1f624.png';\n\t\t\t$this->emoji[':confounded:'] = $base_uri . '72x72/1f616.png';\n\t\t\t$this->emoji[':laughing:'] = $base_uri . '72x72/1f606.png';\n\t\t\t$this->emoji[':yum:'] = $base_uri . '72x72/1f60b.png';\n\t\t\t$this->emoji[':mask:'] = $base_uri . '72x72/1f637.png';\n\t\t\t$this->emoji[':cool:'] = $base_uri . '72x72/1f60e.png';\n\t\t\t$this->emoji[':sleeping:'] = $base_uri . '72x72/1f634.png';\n\t\t\t$this->emoji[':dizzy_face:'] = $base_uri . '72x72/1f635.png';\n\t\t\t$this->emoji[':astonished:'] = $base_uri . '72x72/1f632.png';\n\t\t\t$this->emoji[':worried:'] = $base_uri . '72x72/1f61f.png';\n\t\t\t$this->emoji[':frowning:'] = $base_uri . '72x72/1f626.png';\n\t\t\t$this->emoji[':anguished:'] = $base_uri . '72x72/1f627.png';\n\t\t\t$this->emoji[':smiling_imp:'] = $base_uri . '72x72/1f608.png';\n\t\t\t$this->emoji[':imp:'] = $base_uri . '72x72/1f47f.png';\n\t\t\t$this->emoji[':open_mouth:'] = $base_uri . '72x72/1f62e.png';\n\t\t\t$this->emoji[':grimacing:'] = $base_uri . '72x72/1f62c.png';\n\t\t\t$this->emoji[':neutral_face:'] = $base_uri . '72x72/1f610.png';\n\t\t\t$this->emoji[':confused:'] = $base_uri . '72x72/1f615.png';\n\t\t\t$this->emoji[':hushed:'] = $base_uri . '72x72/1f62f.png';\n\t\t\t$this->emoji[':no_mouth:'] = $base_uri . '72x72/1f636.png';\n\t\t\t$this->emoji[':innocent:'] = $base_uri . '72x72/1f607.png';\n\t\t\t$this->emoji[':smirk:'] = $base_uri . '72x72/1f60f.png';\n\t\t\t$this->emoji[':expressionless:'] = $base_uri . '72x72/1f611.png';\n\n\t\t}\n\n\n\t\t/**\n\t\t * Conditional logout form\n\t\t *\n\t\t * @param array $args\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction display_logout_form( $args ) {\n\t\t\tif ( is_user_logged_in() && isset( $args['mode'] ) && $args['mode'] == 'login' ) {\n\n\t\t\t\tif ( isset( UM()->user()->preview ) && UM()->user()->preview ) {\n\t\t\t\t\treturn $args;\n\t\t\t\t}\n\n\t\t\t\tif ( get_current_user_id() != um_user( 'ID' ) ) {\n\t\t\t\t\tum_fetch_user( get_current_user_id() );\n\t\t\t\t}\n\n\t\t\t\t$args['template'] = 'logout';\n\t\t\t}\n\n\t\t\treturn $args;\n\t\t}\n\n\n\t\t/**\n\t\t * Filter shortcode args\n\t\t *\n\t\t * @param array $args\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction parse_shortcode_args( $args ) {\n\t\t\tif ( $this->message_mode == true ) {\n\t\t\t\tif ( ! empty( $_REQUEST['um_role'] ) ) {\n\t\t\t\t\t$args['template'] = 'message';\n\t\t\t\t\t$roleID = sanitize_key( $_REQUEST['um_role'] );\n\t\t\t\t\t$role = UM()->roles()->role_data( $roleID );\n\n\t\t\t\t\tif ( ! empty( $role ) && ! empty( $role['status'] ) ) {\n\t\t\t\t\t\t$message_key = $role['status'] . '_message';\n\t\t\t\t\t\t$this->custom_message = ! empty( $role[ $message_key ] ) ? stripslashes( $role[ $message_key ] ) : '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach ( $args as $k => $v ) {\n\t\t\t\t$args[ $k ] = maybe_unserialize( $args[ $k ] );\n\t\t\t}\n\n\t\t\treturn $args;\n\t\t}\n\n\n\t\t/**\n\t\t * Emoji support\n\t\t *\n\t\t * @param $content\n\t\t *\n\t\t * @return mixed|string\n\t\t */\n\t\tfunction emotize( $content ) {\n\t\t\t$content = stripslashes( $content );\n\t\t\tforeach ( $this->emoji as $code => $val ) {\n\t\t\t\t$regex = str_replace(array('(', ')'), array(\"\\\\\" . '(', \"\\\\\" . ')'), $code);\n\t\t\t\t$content = preg_replace('/(' . $regex . ')(\\s|$)/', '<img src=\"' . $val . '\" alt=\"' . $code . '\" title=\"' . $code . '\" class=\"emoji\" />$2', $content);\n\t\t\t}\n\t\t\treturn $content;\n\t\t}\n\n\n\t\t/**\n\t\t * Remove wpautop filter for post content if it's UM core page\n\t\t */\n\t\tfunction is_um_page() {\n\t\t\tif ( is_ultimatemember() ) {\n\t\t\t\tremove_filter( 'the_content', 'wpautop' );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Extend body classes\n\t\t *\n\t\t * @param $classes\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction body_class( $classes ) {\n\t\t\t$array = UM()->config()->permalinks;\n\t\t\tif ( ! $array ) {\n\t\t\t\treturn $classes;\n\t\t\t}\n\n\t\t\tforeach ( $array as $slug => $info ) {\n\t\t\t\tif ( um_is_core_page( $slug ) ) {\n\n\t\t\t\t\t$classes[] = 'um-page-' . $slug;\n\n\t\t\t\t\tif ( is_user_logged_in() ) {\n\t\t\t\t\t\t$classes[] = 'um-page-loggedin';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$classes[] = 'um-page-loggedout';\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( um_is_core_page( 'user' ) && um_is_user_himself() ) {\n\t\t\t\t$classes[] = 'um-own-profile';\n\t\t\t}\n\n\t\t\treturn $classes;\n\t\t}\n\n\n\t\t/**\n\t\t * Retrieve core login form\n\t\t *\n\t\t * @return int\n\t\t */\n\t\tfunction core_login_form() {\n\t\t\t$forms = get_posts(array('post_type' => 'um_form', 'posts_per_page' => 1, 'meta_key' => '_um_core', 'meta_value' => 'login'));\n\t\t\t$form_id = isset( $forms[0]->ID ) ? $forms[0]->ID: 0;\n\n\t\t\treturn $form_id;\n\t\t}\n\n\n\t\t/**\n\t\t * Load a compatible template\n\t\t *\n\t\t * @param $tpl\n\t\t */\n\t\tfunction load_template( $tpl ) {\n\t\t\t$loop = ( $this->loop ) ? $this->loop : array();\n\n\t\t\tif ( isset( $this->set_args ) && is_array( $this->set_args ) ) {\n\t\t\t\t$args = $this->set_args;\n\n\t\t\t\tunset( $args['file'] );\n\t\t\t\tunset( $args['theme_file'] );\n\t\t\t\tunset( $args['tpl'] );\n\n\t\t\t\t$args = apply_filters( 'um_template_load_args', $args, $tpl );\n\n\t\t\t\textract( $args );\n\t\t\t}\n\n\t\t\t// Avoid Directory Traversal vulnerability.\n\t\t\t$tpl = trim( $tpl, \"./\\\\\" );\n\n\t\t\t$file = um_path . \"templates/{$tpl}.php\";\n\t\t\t$theme_file = get_stylesheet_directory() . \"/ultimate-member/templates/{$tpl}.php\";\n\t\t\tif ( file_exists( $theme_file ) ) {\n\t\t\t\t$file = $theme_file;\n\t\t\t}\n\n\t\t\tif ( file_exists( $file ) ) {\n\t\t\t\tinclude $file;\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Add class based on shortcode\n\t\t *\n\t\t * @param $mode\n\t\t * @param array $args\n\t\t *\n\t\t * @return mixed|string|void\n\t\t */\n\t\tfunction get_class($mode, $args = array()) {\n\n\t\t\t$classes = 'um-' . $mode;\n\n\t\t\tif (is_admin()) {\n\t\t\t\t$classes .= ' um-in-admin';\n\t\t\t}\n\n\t\t\tif (isset(UM()->form()->errors) && UM()->form()->errors) {\n\t\t\t\t$classes .= ' um-err';\n\t\t\t}\n\n\t\t\tif (UM()->fields()->editing == true) {\n\t\t\t\t$classes .= ' um-editing';\n\t\t\t}\n\n\t\t\tif (UM()->fields()->viewing == true) {\n\t\t\t\t$classes .= ' um-viewing';\n\t\t\t}\n\n\t\t\tif (isset($args['template']) && $args['template'] != $args['mode']) {\n\t\t\t\t$classes .= ' um-' . $args['template'];\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_form_official_classes__hook\n\t\t\t * @description Change official form classes\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$classes\",\"type\":\"string\",\"desc\":\"Classes string\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_form_official_classes__hook', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_form_official_classes__hook', 'my_form_official_classes', 10, 1 );\n\t\t\t * function my_form_official_classes( $classes ) {\n\t\t\t *     // your code here\n\t\t\t *     return $classes;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$classes = apply_filters( 'um_form_official_classes__hook', $classes );\n\t\t\treturn $classes;\n\t\t}\n\n\n\t\t/**\n\t\t * Logged-in only content\n\t\t *\n\t\t * @param array $args\n\t\t * @param string $content\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction um_loggedin( $args = array(), $content = \"\" ) {\n\t\t\tob_start();\n\n\t\t\t$args = shortcode_atts(\n\t\t\t\tarray(\n\t\t\t\t\t'lock_text' => __( 'This content has been restricted to logged in users only. Please <a href=\"{login_referrer}\">login</a> to view this content.', 'ultimate-member' ),\n\t\t\t\t\t'show_lock' => 'yes',\n\t\t\t\t),\n\t\t\t\t$args,\n\t\t\t\t'um_loggedin'\n\t\t\t);\n\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\tif ( 'no' === $args['show_lock'] ) {\n\t\t\t\t\techo '';\n\t\t\t\t} else {\n\t\t\t\t\t$args['lock_text'] = $this->convert_locker_tags( $args['lock_text'] );\n\t\t\t\t\tUM()->get_template( 'login-to-view.php', '', $args, true );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\techo do_shortcode( $this->convert_locker_tags( wpautop( $content ) ) );\n\t\t\t\t} else {\n\t\t\t\t\techo apply_shortcodes( $this->convert_locker_tags( wpautop( $content ) ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$output = ob_get_clean();\n\n\t\t\treturn htmlspecialchars_decode( $output, ENT_NOQUOTES );\n\t\t}\n\n\n\t\t/**\n\t\t * Logged-out only content\n\t\t *\n\t\t * @param array $args\n\t\t * @param string $content\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction um_loggedout( $args = array(), $content = '' ) {\n\t\t\tob_start();\n\n\t\t\t// Hide for logged in users\n\t\t\tif ( is_user_logged_in() ) {\n\t\t\t\techo '';\n\t\t\t} else {\n\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\techo do_shortcode( wpautop( $content ) );\n\t\t\t\t} else {\n\t\t\t\t\techo apply_shortcodes( wpautop( $content ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$output = ob_get_clean();\n\t\t\treturn $output;\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember_login( $args = array() ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$args = ! empty( $args ) ? $args : array();\n\n\t\t\t$default_login = $wpdb->get_var(\n\t\t\t\t\"SELECT pm.post_id \n\t\t\t\tFROM {$wpdb->postmeta} pm \n\t\t\t\tLEFT JOIN {$wpdb->postmeta} pm2 ON( pm.post_id = pm2.post_id AND pm2.meta_key = '_um_is_default' )\n\t\t\t\tWHERE pm.meta_key = '_um_mode' AND \n\t\t\t\t\t  pm.meta_value = 'login' AND \n\t\t\t\t\t  pm2.meta_value = '1'\"\n\t\t\t);\n\n\t\t\t$args['form_id'] = $default_login;\n\t\t\t$shortcode_attrs = '';\n\t\t\tforeach ( $args as $key => $value ) {\n\t\t\t\t$shortcode_attrs .= \" {$key}=\\\"{$value}\\\"\";\n\t\t\t}\n\n\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\treturn do_shortcode( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t} else {\n\t\t\t\treturn apply_shortcodes( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember_register( $args = array() ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$args = ! empty( $args ) ? $args : array();\n\n\t\t\t$default_register = $wpdb->get_var(\n\t\t\t\t\"SELECT pm.post_id \n\t\t\t\tFROM {$wpdb->postmeta} pm \n\t\t\t\tLEFT JOIN {$wpdb->postmeta} pm2 ON( pm.post_id = pm2.post_id AND pm2.meta_key = '_um_is_default' )\n\t\t\t\tWHERE pm.meta_key = '_um_mode' AND \n\t\t\t\t\t  pm.meta_value = 'register' AND \n\t\t\t\t\t  pm2.meta_value = '1'\"\n\t\t\t);\n\n\t\t\t$args['form_id'] = $default_register;\n\t\t\t$shortcode_attrs = '';\n\t\t\tforeach ( $args as $key => $value ) {\n\t\t\t\t$shortcode_attrs .= \" {$key}=\\\"{$value}\\\"\";\n\t\t\t}\n\n\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\treturn do_shortcode( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t} else {\n\t\t\t\treturn apply_shortcodes( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember_profile( $args = array() ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$args = ! empty( $args ) ? $args : array();\n\n\t\t\t$default_profile = $wpdb->get_var(\n\t\t\t\t\"SELECT pm.post_id \n\t\t\t\tFROM {$wpdb->postmeta} pm \n\t\t\t\tLEFT JOIN {$wpdb->postmeta} pm2 ON( pm.post_id = pm2.post_id AND pm2.meta_key = '_um_is_default' )\n\t\t\t\tWHERE pm.meta_key = '_um_mode' AND \n\t\t\t\t\t  pm.meta_value = 'profile' AND \n\t\t\t\t\t  pm2.meta_value = '1'\"\n\t\t\t);\n\n\t\t\t$args['form_id'] = $default_profile;\n\n\t\t\t$shortcode_attrs = '';\n\t\t\tforeach ( $args as $key => $value ) {\n\t\t\t\t$shortcode_attrs .= \" {$key}=\\\"{$value}\\\"\";\n\t\t\t}\n\n\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\treturn do_shortcode( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t} else {\n\t\t\t\treturn apply_shortcodes( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember_directory( $args = array() ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$args = ! empty( $args ) ? $args : array();\n\n\t\t\t$default_directory = $wpdb->get_var(\n\t\t\t\t\"SELECT pm.post_id \n\t\t\t\tFROM {$wpdb->postmeta} pm \n\t\t\t\tLEFT JOIN {$wpdb->postmeta} pm2 ON( pm.post_id = pm2.post_id AND pm2.meta_key = '_um_is_default' )\n\t\t\t\tWHERE pm.meta_key = '_um_mode' AND \n\t\t\t\t\t  pm.meta_value = 'directory' AND \n\t\t\t\t\t  pm2.meta_value = '1'\"\n\t\t\t);\n\n\t\t\t$args['form_id'] = $default_directory;\n\n\t\t\t$shortcode_attrs = '';\n\t\t\tforeach ( $args as $key => $value ) {\n\t\t\t\t$shortcode_attrs .= \" {$key}=\\\"{$value}\\\"\";\n\t\t\t}\n\n\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\treturn do_shortcode( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t} else {\n\t\t\t\treturn apply_shortcodes( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Shortcode\n\t\t *\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember( $args = array() ) {\n\t\t\treturn $this->load( $args );\n\t\t}\n\n\n\t\t/**\n\t\t * Load a module with global function\n\t\t *\n\t\t * @param $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction load( $args ) {\n\t\t\t$defaults = array();\n\t\t\t$args = wp_parse_args( $args, $defaults );\n\n\t\t\t// when to not continue\n\t\t\t$this->form_id = isset( $args['form_id'] ) ? $args['form_id'] : null;\n\t\t\tif ( ! $this->form_id ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->form_status = get_post_status( $this->form_id );\n\t\t\tif ( $this->form_status != 'publish' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// get data into one global array\n\t\t\t$post_data = UM()->query()->post_data( $this->form_id );\n\t\t\t$args = array_merge( $args, $post_data );\n\n\t\t\tob_start();\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_pre_args_setup\n\t\t\t * @description Change arguments on load shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$post_data\",\"type\":\"string\",\"desc\":\"$_POST data\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_pre_args_setup', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_pre_args_setup', 'my_pre_args_setup', 10, 1 );\n\t\t\t * function my_pre_args_setup( $post_data ) {\n\t\t\t *     // your code here\n\t\t\t *     return $post_data;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$args = apply_filters( 'um_pre_args_setup', $args );\n\n\t\t\tif ( ! isset( $args['template'] ) ) {\n\t\t\t\t$args['template'] = '';\n\t\t\t}\n\n\t\t\tif ( isset( $post_data['template'] ) && $post_data['template'] != $args['template'] ) {\n\t\t\t\t$args['template'] = $post_data['template'];\n\t\t\t}\n\n\t\t\tif ( ! $this->template_exists( $args['template'] ) ) {\n\t\t\t\t$args['template'] = $post_data['mode'];\n\t\t\t}\n\n\t\t\tif ( ! isset( $post_data['template'] ) ) {\n\t\t\t\t$post_data['template'] = $post_data['mode'];\n\t\t\t}\n\n\t\t\tif ( 'directory' == $args['mode'] ) {\n\t\t\t\twp_enqueue_script( 'um_members' );\n\t\t\t\tif ( is_rtl() ) {\n\t\t\t\t\twp_enqueue_style( 'um_members_rtl' );\n\t\t\t\t} else {\n\t\t\t\t\twp_enqueue_style( 'um_members' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( 'directory' != $args['mode'] ) {\n\t\t\t\t$args = array_merge( $post_data, $args );\n\n\t\t\t\tif ( empty( $args['use_custom_settings'] ) ) {\n\t\t\t\t\t$args = array_merge( $args, $this->get_css_args( $args ) );\n\t\t\t\t} else {\n\t\t\t\t\t$args = array_merge( $this->get_css_args( $args ), $args );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// filter for arguments\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_shortcode_args_filter\n\t\t\t * @description Change arguments on load shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$args\",\"type\":\"string\",\"desc\":\"Shortcode arguments\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_shortcode_args_filter', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_shortcode_args_filter', 'my_shortcode_args', 10, 1 );\n\t\t\t * function my_shortcode_args( $args ) {\n\t\t\t *     // your code here\n\t\t\t *     return $args;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$args = apply_filters( 'um_shortcode_args_filter', $args );\n\n\t\t\t/**\n\t\t\t * @var string $mode\n\t\t\t */\n\t\t\textract( $args, EXTR_SKIP );\n\n\t\t\t//not display on admin preview\n\t\t\tif ( empty( $_POST['act_id'] ) || sanitize_key( $_POST['act_id'] ) !== 'um_admin_preview_form' ) {\n\n\t\t\t\t$enable_loggedin_registration = apply_filters( 'um_registration_for_loggedin_users', false, $args );\n\n\t\t\t\tif ( 'register' == $mode && is_user_logged_in() && ! $enable_loggedin_registration ) {\n\t\t\t\t\tob_get_clean();\n\t\t\t\t\treturn __( 'You are already registered', 'ultimate-member' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// for profiles only\n\t\t\tif ( $mode == 'profile' && um_profile_id() ) {\n\n\t\t\t\t//set requested user if it's not setup from permalinks (for not profile page in edit mode)\n\t\t\t\tif ( ! um_get_requested_user() ) {\n\t\t\t\t\tum_set_requested_user( um_profile_id() );\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $args['use_custom_settings'] ) ) { // Option \"Apply custom settings to this form\"\n\t\t\t\t\tif ( ! empty( $args['role'] ) ) { // Option \"Make this profile form role-specific\"\n\n\t\t\t\t\t\t// show the first Profile Form with role selected, don't show profile forms below the page with other role-specific setting\n\t\t\t\t\t\tif ( empty( $this->profile_role ) ) {\n\t\t\t\t\t\t\t$current_user_roles = UM()->roles()->get_all_user_roles( um_profile_id() );\n\n\t\t\t\t\t\t\tif ( empty( $current_user_roles ) ) {\n\t\t\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t} elseif ( is_array( $args['role'] ) ) {\n\t\t\t\t\t\t\t\tif ( ! count( array_intersect( $args['role'], $current_user_roles ) ) ) {\n\t\t\t\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ( ! in_array( $args['role'], $current_user_roles ) ) {\n\t\t\t\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$this->profile_role = $args['role'];\n\t\t\t\t\t\t} elseif ( $this->profile_role != $args['role'] ) {\n\t\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_pre_{$mode}_shortcode\n\t\t\t * @description Action pre-load form shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$args\",\"type\":\"array\",\"desc\":\"Form shortcode pre-loading\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_pre_{$mode}_shortcode', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_pre_{$mode}_shortcode', 'my_pre_shortcode', 10, 1 );\n\t\t\t * function my_pre_shortcode( $args ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_pre_{$mode}_shortcode\", $args );\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_before_form_is_loaded\n\t\t\t * @description Action pre-load form shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$args\",\"type\":\"array\",\"desc\":\"Form shortcode pre-loading\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_before_form_is_loaded', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_before_form_is_loaded', 'my_pre_shortcode', 10, 1 );\n\t\t\t * function my_pre_shortcode( $args ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_before_form_is_loaded\", $args );\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_before_{$mode}_form_is_loaded\n\t\t\t * @description Action pre-load form shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$args\",\"type\":\"array\",\"desc\":\"Form shortcode pre-loading\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_before_{$mode}_form_is_loaded', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_before_{$mode}_form_is_loaded', 'my_pre_shortcode', 10, 1 );\n\t\t\t * function my_pre_shortcode( $args ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_before_{$mode}_form_is_loaded\", $args );\n\n\t\t\t$this->template_load( $template, $args );\n\n\t\t\t$this->dynamic_css( $args );\n\n\t\t\tif ( um_get_requested_user() || $mode == 'logout' ) {\n\t\t\t\tum_reset_user();\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_after_everything_output\n\t\t\t * @description Action after load shortcode content\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_after_everything_output', 'function_name', 10 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_after_everything_output', 'my_after_everything_output', 10 );\n\t\t\t * function my_after_everything_output() {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( 'um_after_everything_output' );\n\n\t\t\t$output = ob_get_clean();\n\t\t\treturn $output;\n\t\t}\n\n\n\t\t/**\n\t\t * Get dynamic CSS args\n\t\t *\n\t\t * @param $args\n\t\t * @return array\n\t\t */\n\t\tfunction get_css_args( $args ) {\n\t\t\t$arr = um_styling_defaults( $args['mode'] );\n\t\t\t$arr = array_merge( $arr, array( 'form_id' => $args['form_id'], 'mode' => $args['mode'] ) );\n\t\t\treturn $arr;\n\t\t}\n\n\n\t\t/**\n\t\t * Load dynamic css\n\t\t *\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction dynamic_css( $args = array() ) {\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_disable_dynamic_global_css\n\t\t\t * @description Turn on for disable global dynamic CSS for fix the issue #306\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$disable\",\"type\":\"bool\",\"desc\":\"Disable global CSS\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_disable_dynamic_global_css', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_disable_dynamic_global_css', 'my_disable_dynamic_global_css', 10, 1 );\n\t\t\t * function my_disable_dynamic_global_css( $disable ) {\n\t\t\t *     // your code here\n\t\t\t *     return $disable;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$disable_css = apply_filters( 'um_disable_dynamic_global_css', false );\n\t\t\tif ( $disable_css )\n\t\t\t\treturn '';\n\n\t\t\t/**\n\t\t\t * @var $mode\n\t\t\t */\n\t\t\textract( $args );\n\n\t\t\tinclude_once um_path . 'assets/dynamic_css/dynamic_global.php';\n\n\t\t\tif ( isset( $mode ) && in_array( $mode, array( 'profile', 'directory' ) ) ) {\n\t\t\t\t$file = um_path . 'assets/dynamic_css/dynamic_' . $mode . '.php';\n\n\t\t\t\tif ( file_exists( $file ) )\n\t\t\t\t\tinclude_once $file;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\n\n\t\t/**\n\t\t * Loads a template file\n\t\t *\n\t\t * @param $template\n\t\t * @param array $args\n\t\t */\n\t\tfunction template_load( $template, $args = array() ) {\n\t\t\tif ( is_array( $args ) ) {\n\t\t\t\t$this->set_args = $args;\n\t\t\t}\n\t\t\t$this->load_template( $template );\n\t\t}\n\n\n\t\t/**\n\t\t * Checks if a template file exists\n\t\t *\n\t\t * @param $template\n\t\t *\n\t\t * @return bool\n\t\t */\n\t\tfunction template_exists($template) {\n\n\t\t\t$file = um_path . 'templates/' . $template . '.php';\n\t\t\t$theme_file = get_stylesheet_directory() . '/ultimate-member/templates/' . $template . '.php';\n\n\t\t\tif (file_exists($theme_file) || file_exists($file)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\n\t\t/**\n\t\t * Get File Name without path and extension\n\t\t *\n\t\t * @param $file\n\t\t *\n\t\t * @return mixed|string\n\t\t */\n\t\tfunction get_template_name( $file ) {\n\t\t\t$file = basename( $file );\n\t\t\t$file = preg_replace( '/\\\\.[^.\\\\s]{3,4}$/', '', $file );\n\t\t\treturn $file;\n\t\t}\n\n\n\t\t/**\n\t\t * Get Templates\n\t\t *\n\t\t * @param null $excluded\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction get_templates( $excluded = null ) {\n\n\t\t\tif ( $excluded ) {\n\t\t\t\t$array[ $excluded ] = __( 'Default Template', 'ultimate-member' );\n\t\t\t}\n\n\t\t\t$paths[] = glob( um_path . 'templates/' . '*.php' );\n\n\t\t\tif ( file_exists( get_stylesheet_directory() . '/ultimate-member/templates/' ) ) {\n\t\t\t\t$paths[] = glob( get_stylesheet_directory() . '/ultimate-member/templates/' . '*.php' );\n\t\t\t}\n\n\t\t\tif ( isset( $paths ) && ! empty( $paths ) ) {\n\n\t\t\t\tforeach ( $paths as $k => $files ) {\n\n\t\t\t\t\tif ( isset( $files ) && ! empty( $files ) ) {\n\n\t\t\t\t\t\tforeach ( $files as $file ) {\n\n\t\t\t\t\t\t\t$clean_filename = $this->get_template_name( $file );\n\n\t\t\t\t\t\t\tif ( 0 === strpos( $clean_filename, $excluded ) ) {\n\n\t\t\t\t\t\t\t\t$source = file_get_contents( $file );\n\t\t\t\t\t\t\t\t$tokens = @\\token_get_all( $source );\n\t\t\t\t\t\t\t\t$comment = array(\n\t\t\t\t\t\t\t\t\tT_COMMENT, // All comments since PHP5\n\t\t\t\t\t\t\t\t\tT_DOC_COMMENT, // PHPDoc comments\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tforeach ( $tokens as $token ) {\n\t\t\t\t\t\t\t\t\tif ( in_array( $token[0], $comment ) && strstr( $token[1], '/* Template:' ) && $clean_filename != $excluded ) {\n\t\t\t\t\t\t\t\t\t\t$txt = $token[1];\n\t\t\t\t\t\t\t\t\t\t$txt = str_replace( '/* Template: ', '', $txt );\n\t\t\t\t\t\t\t\t\t\t$txt = str_replace( ' */', '', $txt );\n\t\t\t\t\t\t\t\t\t\t$array[ $clean_filename ] = $txt;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $array;\n\t\t}\n\n\n\t\t/**\n\t\t * Get Shortcode for given form ID\n\t\t *\n\t\t * @param $post_id\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_shortcode( $post_id ) {\n\t\t\t$shortcode = '[ultimatemember form_id=\"' . $post_id . '\"]';\n\t\t\treturn $shortcode;\n\t\t}\n\n\n\t\t/**\n\t\t * Get Shortcode for given form ID\n\t\t *\n\t\t * @param $post_id\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_default_shortcode( $post_id ) {\n\t\t\t$mode = UM()->query()->get_attr( 'mode', $post_id );\n\n\t\t\tswitch ( $mode ) {\n\t\t\t\tcase 'login':\n\t\t\t\t\t$shortcode = '[ultimatemember_login]';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'profile':\n\t\t\t\t\t$shortcode = '[ultimatemember_profile]';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'register':\n\t\t\t\t\t$shortcode = '[ultimatemember_register]';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'directory':\n\t\t\t\t\t$shortcode = '[ultimatemember_directory]';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn $shortcode;\n\t\t}\n\n\n\t\t/**\n\t\t * Convert access lock tags\n\t\t *\n\t\t * @param $str\n\t\t *\n\t\t * @return mixed|string\n\t\t */\n\t\tfunction convert_locker_tags( $str ) {\n\t\t\tadd_filter( 'um_template_tags_patterns_hook', array( &$this, 'add_placeholder' ), 10, 1 );\n\t\t\tadd_filter( 'um_template_tags_replaces_hook', array( &$this, 'add_replace_placeholder' ), 10, 1 );\n\t\t\treturn um_convert_tags( $str, array(), false );\n\t\t}\n\n\n\t\t/**\n\t\t * Convert user tags in a string\n\t\t *\n\t\t * @param $str\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction convert_user_tags( $str ) {\n\n\t\t\t$pattern_array = array(\n\t\t\t\t'{first_name}',\n\t\t\t\t'{last_name}',\n\t\t\t\t'{display_name}',\n\t\t\t\t'{user_avatar_small}',\n\t\t\t\t'{username}',\n\t\t\t\t'{nickname}',\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_allowed_user_tags_patterns\n\t\t\t * @description Extend user placeholders patterns\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$patterns\",\"type\":\"array\",\"desc\":\"Placeholders\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_allowed_user_tags_patterns', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_allowed_user_tags_patterns', 'my_allowed_user_tags', 10, 1 );\n\t\t\t * function my_allowed_user_tags( $patterns ) {\n\t\t\t *     // your code here\n\t\t\t *     return $patterns;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$pattern_array = apply_filters( 'um_allowed_user_tags_patterns', $pattern_array );\n\n\t\t\t//$matches = false;\n\t\t\tforeach ( $pattern_array as $pattern ) {\n\n\t\t\t\tif ( preg_match( $pattern, $str ) ) {\n\n\t\t\t\t\t$value = '';\n\t\t\t\t\tif ( is_user_logged_in() ) {\n\t\t\t\t\t\t$usermeta = str_replace( '{', '', $pattern );\n\t\t\t\t\t\t$usermeta = str_replace( '}', '', $usermeta );\n\n\t\t\t\t\t\tif ( $usermeta == 'user_avatar_small' ) {\n\t\t\t\t\t\t\t$value = get_avatar( um_user( 'ID' ), 40 );\n\t\t\t\t\t\t} elseif ( um_user( $usermeta ) ) {\n\t\t\t\t\t\t\t$value = um_user( $usermeta );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( $usermeta == 'username' ) {\n\t\t\t\t\t\t\t$value = um_user( 'user_login' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( $usermeta == 'nickname' ) {\n\t\t\t\t\t\t\t$value = um_profile( 'nickname' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * UM hook\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @type filter\n\t\t\t\t\t\t * @title um_profile_tag_hook__{$usermeta}\n\t\t\t\t\t\t * @description Change usermeta field value\n\t\t\t\t\t\t * @input_vars\n\t\t\t\t\t\t * [{\"var\":\"$value\",\"type\":\"array\",\"desc\":\"Meta field value\"},\n\t\t\t\t\t\t * {\"var\":\"$user_id\",\"type\":\"array\",\"desc\":\"User ID\"}]\n\t\t\t\t\t\t * @change_log\n\t\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t\t * @usage\n\t\t\t\t\t\t * <?php add_filter( 'um_profile_tag_hook__{$usermeta}', 'function_name', 10, 2 ); ?>\n\t\t\t\t\t\t * @example\n\t\t\t\t\t\t * <?php\n\t\t\t\t\t\t * add_filter( 'um_profile_tag_hook__{$usermeta}', 'my_profile_tag', 10, 2 );\n\t\t\t\t\t\t * function my_profile_tag( $value, $user_id ) {\n\t\t\t\t\t\t *     // your code here\n\t\t\t\t\t\t *     return $value;\n\t\t\t\t\t\t * }\n\t\t\t\t\t\t * ?>\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$value = apply_filters( \"um_profile_tag_hook__{$usermeta}\", $value, um_user( 'ID' ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t$str = preg_replace( '/' . $pattern . '/', $value, $str );\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $str;\n\t\t}\n\n\n\t\t/**\n\t\t * Shortcode: Show custom content to specific role\n\t\t *\n\t\t * Show content to specific roles\n\t\t * [um_show_content roles='member'] <!-- insert content here -->  [/um_show_content]\n\t\t * You can add multiple target roles, just use ',' e.g.  [um_show_content roles='member,candidates,pets']\n\t\t *\n\t\t * Hide content from specific roles\n\t\t * [um_show_content not='contributors'] <!-- insert content here -->  [/um_show_content]\n\t\t * You can add multiple target roles, just use ',' e.g.  [um_show_content roles='member,candidates,pets']\n\t\t *\n\t\t * @param  array $atts\n\t\t * @param  string $content\n\t\t * @return string\n\t\t */\n\t\tfunction um_shortcode_show_content_for_role( $atts = array() , $content = '' ) {\n\t\t\tglobal $user_ID;\n\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$a = shortcode_atts( array(\n\t\t\t\t'roles' => '',\n\t\t\t\t'not' => '',\n\t\t\t\t'is_profile' => false,\n\t\t\t), $atts );\n\n\t\t\tif ( $a['is_profile'] ) {\n\t\t\t\tum_fetch_user( um_profile_id() );\n\t\t\t} else {\n\t\t\t\tum_fetch_user( $user_ID );\n\t\t\t}\n\n\t\t\t$current_user_roles = um_user( 'roles' );\n\n\t\t\tif ( ! empty( $a['not'] ) && ! empty( $a['roles'] ) ) {\n\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\treturn do_shortcode( $this->convert_locker_tags( $content ) );\n\t\t\t\t} else {\n\t\t\t\t\treturn apply_shortcodes( $this->convert_locker_tags( $content ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! empty( $a['not'] ) ) {\n\t\t\t\t$not_in_roles = explode( \",\", $a['not'] );\n\n\t\t\t\tif ( is_array( $not_in_roles ) && ( empty( $current_user_roles ) || count( array_intersect( $current_user_roles, $not_in_roles ) ) <= 0 ) ) {\n\t\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\t\treturn do_shortcode( $this->convert_locker_tags( $content ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn apply_shortcodes( $this->convert_locker_tags( $content ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$roles = explode( \",\", $a['roles'] );\n\n\t\t\t\tif ( ! empty( $current_user_roles ) && is_array( $roles ) && count( array_intersect( $current_user_roles, $roles ) ) > 0 ) {\n\t\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\t\treturn do_shortcode( $this->convert_locker_tags( $content ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn apply_shortcodes( $this->convert_locker_tags( $content ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t * @param string $content\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tpublic function ultimatemember_searchform( $args = array(), $content = \"\" ) {\n\t\t\tif ( ! UM()->options()->get( 'members_page' ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t$member_directory_ids = array();\n\n\t\t\t$page_id = UM()->config()->permalinks['members'];\n\t\t\tif ( ! empty( $page_id ) ) {\n\t\t\t\t$members_page = get_post( $page_id );\n\t\t\t\tif ( ! empty( $members_page ) && ! is_wp_error( $members_page ) ) {\n\t\t\t\t\tif ( ! empty( $members_page->post_content ) ) {\n\t\t\t\t\t\tpreg_match_all( '/\\[ultimatemember[^\\]]*?form_id\\=[\\'\"]*?(\\d+)[\\'\"]*?/i', $members_page->post_content, $matches );\n\t\t\t\t\t\tif ( ! empty( $matches[1] ) && is_array( $matches[1] ) ) {\n\t\t\t\t\t\t\t$member_directory_ids = array_map( 'absint', $matches[1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( empty( $member_directory_ids ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t//current user priority role\n\t\t\t$priority_user_role = false;\n\t\t\tif ( is_user_logged_in() ) {\n\t\t\t\t$priority_user_role = UM()->roles()->get_priority_user_role( get_current_user_id() );\n\t\t\t}\n\n\t\t\t$query = array();\n\t\t\tforeach ( $member_directory_ids as $directory_id ) {\n\t\t\t\t$directory_data = UM()->query()->post_data( $directory_id );\n\n\t\t\t\tif ( isset( $directory_data['roles_can_search'] ) ) {\n\t\t\t\t\t$directory_data['roles_can_search'] = maybe_unserialize( $directory_data['roles_can_search'] );\n\t\t\t\t}\n\n\t\t\t\t$show_search = empty( $directory_data['roles_can_search'] ) || ( ! empty( $priority_user_role ) && in_array( $priority_user_role, $directory_data['roles_can_search'] ) );\n\t\t\t\tif ( empty( $directory_data['search'] ) || ! $show_search ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$hash = UM()->member_directory()->get_directory_hash( $directory_id );\n\n\t\t\t\t$query[ 'search_' . $hash ] = ! empty( $_GET[ 'search_' . $hash ] ) ? sanitize_text_field( $_GET[ 'search_' . $hash ] ) : '';\n\t\t\t}\n\n\t\t\tif ( empty( $query ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t$search_value = array_values( $query );\n\n\t\t\t$template = UM()->get_template( 'searchform.php', '', array( 'query' => $query, 'search_value' => $search_value[0], 'members_page' => um_get_core_page( 'members' ) ) );\n\n\t\t\treturn $template;\n\t\t}\n\n\n\t\t/**\n\t\t * UM Placeholders for login referrer\n\t\t *\n\t\t * @param $placeholders\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction add_placeholder( $placeholders ) {\n\t\t\t$placeholders[] = '{login_referrer}';\n\t\t\treturn $placeholders;\n\t\t}\n\n\n\t\t/**\n\t\t * UM Replace Placeholders for login referrer\n\t\t *\n\t\t * @param $replace_placeholders\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction add_replace_placeholder( $replace_placeholders ) {\n\t\t\t$replace_placeholders[] = um_dynamic_login_page_redirect();\n\t\t\treturn $replace_placeholders;\n\t\t}\n\n\t}\n}\n"], "fixing_code": ["<?php\nnamespace um\\core;\n\n// Exit if accessed directly\nif ( ! defined( 'ABSPATH' ) ) exit;\n\nif ( ! class_exists( 'um\\core\\Shortcodes' ) ) {\n\n\n\t/**\n\t * Class Shortcodes\n\t * @package um\\core\n\t */\n\tclass Shortcodes {\n\n\t\tvar $profile_role = '';\n\n\t\t/**\n\t\t * Shortcodes constructor.\n\t\t */\n\t\tfunction __construct() {\n\n\t\t\t$this->message_mode = false;\n\t\t\t$this->custom_message = '';\n\n\t\t\t$this->loop = array();\n\n\t\t\tadd_shortcode( 'ultimatemember', array( &$this, 'ultimatemember' ) );\n\n\t\t\tadd_shortcode( 'ultimatemember_login', array( &$this, 'ultimatemember_login' ) );\n\t\t\tadd_shortcode( 'ultimatemember_register', array( &$this, 'ultimatemember_register' ) );\n\t\t\tadd_shortcode( 'ultimatemember_profile', array( &$this, 'ultimatemember_profile' ) );\n\t\t\tadd_shortcode( 'ultimatemember_directory', array( &$this, 'ultimatemember_directory' ) );\n\n\t\t\tadd_shortcode( 'um_loggedin', array( &$this, 'um_loggedin' ) );\n\t\t\tadd_shortcode( 'um_loggedout', array( &$this, 'um_loggedout' ) );\n\t\t\tadd_shortcode( 'um_show_content', array( &$this, 'um_shortcode_show_content_for_role' ) );\n\t\t\tadd_shortcode( 'ultimatemember_searchform', array( &$this, 'ultimatemember_searchform' ) );\n\n\t\t\tadd_filter( 'body_class', array( &$this, 'body_class' ), 0 );\n\n\t\t\tadd_filter( 'um_shortcode_args_filter', array( &$this, 'display_logout_form' ), 99 );\n\t\t\tadd_filter( 'um_shortcode_args_filter', array( &$this, 'parse_shortcode_args' ), 99 );\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_emoji_base_uri\n\t\t\t * @description Change Emoji base URL\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$url\",\"type\":\"string\",\"desc\":\"Base URL\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_emoji_base_uri', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_emoji_base_uri', 'my_emoji_base_uri', 10, 1 );\n\t\t\t * function my_emoji_base_uri( $url ) {\n\t\t\t *     // your code here\n\t\t\t *     return $url;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$base_uri = apply_filters( 'um_emoji_base_uri', 'https://s.w.org/images/core/emoji/' );\n\n\t\t\t$this->emoji[':)'] = $base_uri . '72x72/1f604.png';\n\t\t\t$this->emoji[':smiley:'] = $base_uri . '72x72/1f603.png';\n\t\t\t$this->emoji[':D'] = $base_uri . '72x72/1f600.png';\n\t\t\t$this->emoji[':$'] = $base_uri . '72x72/1f60a.png';\n\t\t\t$this->emoji[':relaxed:'] = $base_uri . '72x72/263a.png';\n\t\t\t$this->emoji[';)'] = $base_uri . '72x72/1f609.png';\n\t\t\t$this->emoji[':heart_eyes:'] = $base_uri . '72x72/1f60d.png';\n\t\t\t$this->emoji[':kissing_heart:'] = $base_uri . '72x72/1f618.png';\n\t\t\t$this->emoji[':kissing_closed_eyes:'] = $base_uri . '72x72/1f61a.png';\n\t\t\t$this->emoji[':kissing:'] = $base_uri . '72x72/1f617.png';\n\t\t\t$this->emoji[':kissing_smiling_eyes:'] = $base_uri . '72x72/1f619.png';\n\t\t\t$this->emoji[';P'] = $base_uri . '72x72/1f61c.png';\n\t\t\t$this->emoji[':P'] = $base_uri . '72x72/1f61b.png';\n\t\t\t$this->emoji[':stuck_out_tongue_closed_eyes:'] = $base_uri . '72x72/1f61d.png';\n\t\t\t$this->emoji[':flushed:'] = $base_uri . '72x72/1f633.png';\n\t\t\t$this->emoji[':grin:'] = $base_uri . '72x72/1f601.png';\n\t\t\t$this->emoji[':pensive:'] = $base_uri . '72x72/1f614.png';\n\t\t\t$this->emoji[':relieved:'] = $base_uri . '72x72/1f60c.png';\n\t\t\t$this->emoji[':unamused'] = $base_uri . '72x72/1f612.png';\n\t\t\t$this->emoji[':('] = $base_uri . '72x72/1f61e.png';\n\t\t\t$this->emoji[':persevere:'] = $base_uri . '72x72/1f623.png';\n\t\t\t$this->emoji[\":'(\"] = $base_uri . '72x72/1f622.png';\n\t\t\t$this->emoji[':joy:'] = $base_uri . '72x72/1f602.png';\n\t\t\t$this->emoji[':sob:'] = $base_uri . '72x72/1f62d.png';\n\t\t\t$this->emoji[':sleepy:'] = $base_uri . '72x72/1f62a.png';\n\t\t\t$this->emoji[':disappointed_relieved:'] = $base_uri . '72x72/1f625.png';\n\t\t\t$this->emoji[':cold_sweat:'] = $base_uri . '72x72/1f630.png';\n\t\t\t$this->emoji[':sweat_smile:'] = $base_uri . '72x72/1f605.png';\n\t\t\t$this->emoji[':sweat:'] = $base_uri . '72x72/1f613.png';\n\t\t\t$this->emoji[':weary:'] = $base_uri . '72x72/1f629.png';\n\t\t\t$this->emoji[':tired_face:'] = $base_uri . '72x72/1f62b.png';\n\t\t\t$this->emoji[':fearful:'] = $base_uri . '72x72/1f628.png';\n\t\t\t$this->emoji[':scream:'] = $base_uri . '72x72/1f631.png';\n\t\t\t$this->emoji[':angry:'] = $base_uri . '72x72/1f620.png';\n\t\t\t$this->emoji[':rage:'] = $base_uri . '72x72/1f621.png';\n\t\t\t$this->emoji[':triumph'] = $base_uri . '72x72/1f624.png';\n\t\t\t$this->emoji[':confounded:'] = $base_uri . '72x72/1f616.png';\n\t\t\t$this->emoji[':laughing:'] = $base_uri . '72x72/1f606.png';\n\t\t\t$this->emoji[':yum:'] = $base_uri . '72x72/1f60b.png';\n\t\t\t$this->emoji[':mask:'] = $base_uri . '72x72/1f637.png';\n\t\t\t$this->emoji[':cool:'] = $base_uri . '72x72/1f60e.png';\n\t\t\t$this->emoji[':sleeping:'] = $base_uri . '72x72/1f634.png';\n\t\t\t$this->emoji[':dizzy_face:'] = $base_uri . '72x72/1f635.png';\n\t\t\t$this->emoji[':astonished:'] = $base_uri . '72x72/1f632.png';\n\t\t\t$this->emoji[':worried:'] = $base_uri . '72x72/1f61f.png';\n\t\t\t$this->emoji[':frowning:'] = $base_uri . '72x72/1f626.png';\n\t\t\t$this->emoji[':anguished:'] = $base_uri . '72x72/1f627.png';\n\t\t\t$this->emoji[':smiling_imp:'] = $base_uri . '72x72/1f608.png';\n\t\t\t$this->emoji[':imp:'] = $base_uri . '72x72/1f47f.png';\n\t\t\t$this->emoji[':open_mouth:'] = $base_uri . '72x72/1f62e.png';\n\t\t\t$this->emoji[':grimacing:'] = $base_uri . '72x72/1f62c.png';\n\t\t\t$this->emoji[':neutral_face:'] = $base_uri . '72x72/1f610.png';\n\t\t\t$this->emoji[':confused:'] = $base_uri . '72x72/1f615.png';\n\t\t\t$this->emoji[':hushed:'] = $base_uri . '72x72/1f62f.png';\n\t\t\t$this->emoji[':no_mouth:'] = $base_uri . '72x72/1f636.png';\n\t\t\t$this->emoji[':innocent:'] = $base_uri . '72x72/1f607.png';\n\t\t\t$this->emoji[':smirk:'] = $base_uri . '72x72/1f60f.png';\n\t\t\t$this->emoji[':expressionless:'] = $base_uri . '72x72/1f611.png';\n\n\t\t}\n\n\n\t\t/**\n\t\t * Conditional logout form\n\t\t *\n\t\t * @param array $args\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction display_logout_form( $args ) {\n\t\t\tif ( is_user_logged_in() && isset( $args['mode'] ) && $args['mode'] == 'login' ) {\n\n\t\t\t\tif ( isset( UM()->user()->preview ) && UM()->user()->preview ) {\n\t\t\t\t\treturn $args;\n\t\t\t\t}\n\n\t\t\t\tif ( get_current_user_id() != um_user( 'ID' ) ) {\n\t\t\t\t\tum_fetch_user( get_current_user_id() );\n\t\t\t\t}\n\n\t\t\t\t$args['template'] = 'logout';\n\t\t\t}\n\n\t\t\treturn $args;\n\t\t}\n\n\n\t\t/**\n\t\t * Filter shortcode args\n\t\t *\n\t\t * @param array $args\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction parse_shortcode_args( $args ) {\n\t\t\tif ( $this->message_mode == true ) {\n\t\t\t\tif ( ! empty( $_REQUEST['um_role'] ) ) {\n\t\t\t\t\t$args['template'] = 'message';\n\t\t\t\t\t$roleID = sanitize_key( $_REQUEST['um_role'] );\n\t\t\t\t\t$role = UM()->roles()->role_data( $roleID );\n\n\t\t\t\t\tif ( ! empty( $role ) && ! empty( $role['status'] ) ) {\n\t\t\t\t\t\t$message_key = $role['status'] . '_message';\n\t\t\t\t\t\t$this->custom_message = ! empty( $role[ $message_key ] ) ? stripslashes( $role[ $message_key ] ) : '';\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tforeach ( $args as $k => $v ) {\n\t\t\t\t$args[ $k ] = maybe_unserialize( $args[ $k ] );\n\t\t\t}\n\n\t\t\treturn $args;\n\t\t}\n\n\n\t\t/**\n\t\t * Emoji support\n\t\t *\n\t\t * @param $content\n\t\t *\n\t\t * @return mixed|string\n\t\t */\n\t\tfunction emotize( $content ) {\n\t\t\t$content = stripslashes( $content );\n\t\t\tforeach ( $this->emoji as $code => $val ) {\n\t\t\t\t$regex = str_replace(array('(', ')'), array(\"\\\\\" . '(', \"\\\\\" . ')'), $code);\n\t\t\t\t$content = preg_replace('/(' . $regex . ')(\\s|$)/', '<img src=\"' . $val . '\" alt=\"' . $code . '\" title=\"' . $code . '\" class=\"emoji\" />$2', $content);\n\t\t\t}\n\t\t\treturn $content;\n\t\t}\n\n\n\t\t/**\n\t\t * Remove wpautop filter for post content if it's UM core page\n\t\t */\n\t\tfunction is_um_page() {\n\t\t\tif ( is_ultimatemember() ) {\n\t\t\t\tremove_filter( 'the_content', 'wpautop' );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Extend body classes\n\t\t *\n\t\t * @param $classes\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction body_class( $classes ) {\n\t\t\t$array = UM()->config()->permalinks;\n\t\t\tif ( ! $array ) {\n\t\t\t\treturn $classes;\n\t\t\t}\n\n\t\t\tforeach ( $array as $slug => $info ) {\n\t\t\t\tif ( um_is_core_page( $slug ) ) {\n\n\t\t\t\t\t$classes[] = 'um-page-' . $slug;\n\n\t\t\t\t\tif ( is_user_logged_in() ) {\n\t\t\t\t\t\t$classes[] = 'um-page-loggedin';\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$classes[] = 'um-page-loggedout';\n\t\t\t\t\t}\n\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( um_is_core_page( 'user' ) && um_is_user_himself() ) {\n\t\t\t\t$classes[] = 'um-own-profile';\n\t\t\t}\n\n\t\t\treturn $classes;\n\t\t}\n\n\n\t\t/**\n\t\t * Retrieve core login form\n\t\t *\n\t\t * @return int\n\t\t */\n\t\tfunction core_login_form() {\n\t\t\t$forms = get_posts(array('post_type' => 'um_form', 'posts_per_page' => 1, 'meta_key' => '_um_core', 'meta_value' => 'login'));\n\t\t\t$form_id = isset( $forms[0]->ID ) ? $forms[0]->ID: 0;\n\n\t\t\treturn $form_id;\n\t\t}\n\n\n\t\t/**\n\t\t * Load a compatible template\n\t\t *\n\t\t * @param $tpl\n\t\t */\n\t\tfunction load_template( $tpl ) {\n\t\t\t$loop = ( $this->loop ) ? $this->loop : array();\n\n\t\t\tif ( isset( $this->set_args ) && is_array( $this->set_args ) ) {\n\t\t\t\t$args = $this->set_args;\n\n\t\t\t\tunset( $args['file'] );\n\t\t\t\tunset( $args['theme_file'] );\n\t\t\t\tunset( $args['tpl'] );\n\n\t\t\t\t$args = apply_filters( 'um_template_load_args', $args, $tpl );\n\n\t\t\t\textract( $args );\n\t\t\t}\n\n\t\t\t$file = um_path . \"templates/{$tpl}.php\";\n\t\t\t$theme_file = get_stylesheet_directory() . \"/ultimate-member/templates/{$tpl}.php\";\n\t\t\tif ( file_exists( $theme_file ) ) {\n\t\t\t\t$file = $theme_file;\n\t\t\t}\n\n\t\t\tif ( file_exists( $file ) ) {\n\t\t\t\t// Avoid Directory Traversal vulnerability by the checking the realpath.\n\t\t\t\t// Templates can be situated only in the get_stylesheet_directory() or plugindir templates.\n\t\t\t\t$real_file = realpath( $file );\n\t\t\t\tif ( 0 === strpos( $real_file, um_path . \"templates\" . DIRECTORY_SEPARATOR ) || 0 === strpos( $real_file, get_stylesheet_directory() . DIRECTORY_SEPARATOR . 'ultimate-member' . DIRECTORY_SEPARATOR . 'templates' . DIRECTORY_SEPARATOR ) ) {\n\t\t\t\t\tinclude $file;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Add class based on shortcode\n\t\t *\n\t\t * @param $mode\n\t\t * @param array $args\n\t\t *\n\t\t * @return mixed|string|void\n\t\t */\n\t\tfunction get_class($mode, $args = array()) {\n\n\t\t\t$classes = 'um-' . $mode;\n\n\t\t\tif (is_admin()) {\n\t\t\t\t$classes .= ' um-in-admin';\n\t\t\t}\n\n\t\t\tif (isset(UM()->form()->errors) && UM()->form()->errors) {\n\t\t\t\t$classes .= ' um-err';\n\t\t\t}\n\n\t\t\tif (UM()->fields()->editing == true) {\n\t\t\t\t$classes .= ' um-editing';\n\t\t\t}\n\n\t\t\tif (UM()->fields()->viewing == true) {\n\t\t\t\t$classes .= ' um-viewing';\n\t\t\t}\n\n\t\t\tif (isset($args['template']) && $args['template'] != $args['mode']) {\n\t\t\t\t$classes .= ' um-' . $args['template'];\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_form_official_classes__hook\n\t\t\t * @description Change official form classes\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$classes\",\"type\":\"string\",\"desc\":\"Classes string\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_form_official_classes__hook', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_form_official_classes__hook', 'my_form_official_classes', 10, 1 );\n\t\t\t * function my_form_official_classes( $classes ) {\n\t\t\t *     // your code here\n\t\t\t *     return $classes;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$classes = apply_filters( 'um_form_official_classes__hook', $classes );\n\t\t\treturn $classes;\n\t\t}\n\n\n\t\t/**\n\t\t * Logged-in only content\n\t\t *\n\t\t * @param array $args\n\t\t * @param string $content\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction um_loggedin( $args = array(), $content = \"\" ) {\n\t\t\tob_start();\n\n\t\t\t$args = shortcode_atts(\n\t\t\t\tarray(\n\t\t\t\t\t'lock_text' => __( 'This content has been restricted to logged in users only. Please <a href=\"{login_referrer}\">login</a> to view this content.', 'ultimate-member' ),\n\t\t\t\t\t'show_lock' => 'yes',\n\t\t\t\t),\n\t\t\t\t$args,\n\t\t\t\t'um_loggedin'\n\t\t\t);\n\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\tif ( 'no' === $args['show_lock'] ) {\n\t\t\t\t\techo '';\n\t\t\t\t} else {\n\t\t\t\t\t$args['lock_text'] = $this->convert_locker_tags( $args['lock_text'] );\n\t\t\t\t\tUM()->get_template( 'login-to-view.php', '', $args, true );\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\techo do_shortcode( $this->convert_locker_tags( wpautop( $content ) ) );\n\t\t\t\t} else {\n\t\t\t\t\techo apply_shortcodes( $this->convert_locker_tags( wpautop( $content ) ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$output = ob_get_clean();\n\n\t\t\treturn htmlspecialchars_decode( $output, ENT_NOQUOTES );\n\t\t}\n\n\n\t\t/**\n\t\t * Logged-out only content\n\t\t *\n\t\t * @param array $args\n\t\t * @param string $content\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction um_loggedout( $args = array(), $content = '' ) {\n\t\t\tob_start();\n\n\t\t\t// Hide for logged in users\n\t\t\tif ( is_user_logged_in() ) {\n\t\t\t\techo '';\n\t\t\t} else {\n\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\techo do_shortcode( wpautop( $content ) );\n\t\t\t\t} else {\n\t\t\t\t\techo apply_shortcodes( wpautop( $content ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$output = ob_get_clean();\n\t\t\treturn $output;\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember_login( $args = array() ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$args = ! empty( $args ) ? $args : array();\n\n\t\t\t$default_login = $wpdb->get_var(\n\t\t\t\t\"SELECT pm.post_id \n\t\t\t\tFROM {$wpdb->postmeta} pm \n\t\t\t\tLEFT JOIN {$wpdb->postmeta} pm2 ON( pm.post_id = pm2.post_id AND pm2.meta_key = '_um_is_default' )\n\t\t\t\tWHERE pm.meta_key = '_um_mode' AND \n\t\t\t\t\t  pm.meta_value = 'login' AND \n\t\t\t\t\t  pm2.meta_value = '1'\"\n\t\t\t);\n\n\t\t\t$args['form_id'] = $default_login;\n\t\t\t$shortcode_attrs = '';\n\t\t\tforeach ( $args as $key => $value ) {\n\t\t\t\t$shortcode_attrs .= \" {$key}=\\\"{$value}\\\"\";\n\t\t\t}\n\n\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\treturn do_shortcode( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t} else {\n\t\t\t\treturn apply_shortcodes( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember_register( $args = array() ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$args = ! empty( $args ) ? $args : array();\n\n\t\t\t$default_register = $wpdb->get_var(\n\t\t\t\t\"SELECT pm.post_id \n\t\t\t\tFROM {$wpdb->postmeta} pm \n\t\t\t\tLEFT JOIN {$wpdb->postmeta} pm2 ON( pm.post_id = pm2.post_id AND pm2.meta_key = '_um_is_default' )\n\t\t\t\tWHERE pm.meta_key = '_um_mode' AND \n\t\t\t\t\t  pm.meta_value = 'register' AND \n\t\t\t\t\t  pm2.meta_value = '1'\"\n\t\t\t);\n\n\t\t\t$args['form_id'] = $default_register;\n\t\t\t$shortcode_attrs = '';\n\t\t\tforeach ( $args as $key => $value ) {\n\t\t\t\t$shortcode_attrs .= \" {$key}=\\\"{$value}\\\"\";\n\t\t\t}\n\n\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\treturn do_shortcode( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t} else {\n\t\t\t\treturn apply_shortcodes( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember_profile( $args = array() ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$args = ! empty( $args ) ? $args : array();\n\n\t\t\t$default_profile = $wpdb->get_var(\n\t\t\t\t\"SELECT pm.post_id \n\t\t\t\tFROM {$wpdb->postmeta} pm \n\t\t\t\tLEFT JOIN {$wpdb->postmeta} pm2 ON( pm.post_id = pm2.post_id AND pm2.meta_key = '_um_is_default' )\n\t\t\t\tWHERE pm.meta_key = '_um_mode' AND \n\t\t\t\t\t  pm.meta_value = 'profile' AND \n\t\t\t\t\t  pm2.meta_value = '1'\"\n\t\t\t);\n\n\t\t\t$args['form_id'] = $default_profile;\n\n\t\t\t$shortcode_attrs = '';\n\t\t\tforeach ( $args as $key => $value ) {\n\t\t\t\t$shortcode_attrs .= \" {$key}=\\\"{$value}\\\"\";\n\t\t\t}\n\n\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\treturn do_shortcode( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t} else {\n\t\t\t\treturn apply_shortcodes( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember_directory( $args = array() ) {\n\t\t\tglobal $wpdb;\n\n\t\t\t$args = ! empty( $args ) ? $args : array();\n\n\t\t\t$default_directory = $wpdb->get_var(\n\t\t\t\t\"SELECT pm.post_id \n\t\t\t\tFROM {$wpdb->postmeta} pm \n\t\t\t\tLEFT JOIN {$wpdb->postmeta} pm2 ON( pm.post_id = pm2.post_id AND pm2.meta_key = '_um_is_default' )\n\t\t\t\tWHERE pm.meta_key = '_um_mode' AND \n\t\t\t\t\t  pm.meta_value = 'directory' AND \n\t\t\t\t\t  pm2.meta_value = '1'\"\n\t\t\t);\n\n\t\t\t$args['form_id'] = $default_directory;\n\n\t\t\t$shortcode_attrs = '';\n\t\t\tforeach ( $args as $key => $value ) {\n\t\t\t\t$shortcode_attrs .= \" {$key}=\\\"{$value}\\\"\";\n\t\t\t}\n\n\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\treturn do_shortcode( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t} else {\n\t\t\t\treturn apply_shortcodes( \"[ultimatemember {$shortcode_attrs} /]\" );\n\t\t\t}\n\t\t}\n\n\n\t\t/**\n\t\t * Shortcode\n\t\t *\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction ultimatemember( $args = array() ) {\n\t\t\treturn $this->load( $args );\n\t\t}\n\n\n\t\t/**\n\t\t * Load a module with global function\n\t\t *\n\t\t * @param $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction load( $args ) {\n\t\t\t$defaults = array();\n\t\t\t$args = wp_parse_args( $args, $defaults );\n\n\t\t\t// when to not continue\n\t\t\t$this->form_id = isset( $args['form_id'] ) ? $args['form_id'] : null;\n\t\t\tif ( ! $this->form_id ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$this->form_status = get_post_status( $this->form_id );\n\t\t\tif ( $this->form_status != 'publish' ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t// get data into one global array\n\t\t\t$post_data = UM()->query()->post_data( $this->form_id );\n\t\t\t$args = array_merge( $args, $post_data );\n\n\t\t\tob_start();\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_pre_args_setup\n\t\t\t * @description Change arguments on load shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$post_data\",\"type\":\"string\",\"desc\":\"$_POST data\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_pre_args_setup', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_pre_args_setup', 'my_pre_args_setup', 10, 1 );\n\t\t\t * function my_pre_args_setup( $post_data ) {\n\t\t\t *     // your code here\n\t\t\t *     return $post_data;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$args = apply_filters( 'um_pre_args_setup', $args );\n\n\t\t\tif ( ! isset( $args['template'] ) ) {\n\t\t\t\t$args['template'] = '';\n\t\t\t}\n\n\t\t\tif ( isset( $post_data['template'] ) && $post_data['template'] != $args['template'] ) {\n\t\t\t\t$args['template'] = $post_data['template'];\n\t\t\t}\n\n\t\t\tif ( ! $this->template_exists( $args['template'] ) ) {\n\t\t\t\t$args['template'] = $post_data['mode'];\n\t\t\t}\n\n\t\t\tif ( ! isset( $post_data['template'] ) ) {\n\t\t\t\t$post_data['template'] = $post_data['mode'];\n\t\t\t}\n\n\t\t\tif ( 'directory' == $args['mode'] ) {\n\t\t\t\twp_enqueue_script( 'um_members' );\n\t\t\t\tif ( is_rtl() ) {\n\t\t\t\t\twp_enqueue_style( 'um_members_rtl' );\n\t\t\t\t} else {\n\t\t\t\t\twp_enqueue_style( 'um_members' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( 'directory' != $args['mode'] ) {\n\t\t\t\t$args = array_merge( $post_data, $args );\n\n\t\t\t\tif ( empty( $args['use_custom_settings'] ) ) {\n\t\t\t\t\t$args = array_merge( $args, $this->get_css_args( $args ) );\n\t\t\t\t} else {\n\t\t\t\t\t$args = array_merge( $this->get_css_args( $args ), $args );\n\t\t\t\t}\n\t\t\t}\n\t\t\t// filter for arguments\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_shortcode_args_filter\n\t\t\t * @description Change arguments on load shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$args\",\"type\":\"string\",\"desc\":\"Shortcode arguments\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_shortcode_args_filter', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_shortcode_args_filter', 'my_shortcode_args', 10, 1 );\n\t\t\t * function my_shortcode_args( $args ) {\n\t\t\t *     // your code here\n\t\t\t *     return $args;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$args = apply_filters( 'um_shortcode_args_filter', $args );\n\n\t\t\t/**\n\t\t\t * @var string $mode\n\t\t\t */\n\t\t\textract( $args, EXTR_SKIP );\n\n\t\t\t//not display on admin preview\n\t\t\tif ( empty( $_POST['act_id'] ) || sanitize_key( $_POST['act_id'] ) !== 'um_admin_preview_form' ) {\n\n\t\t\t\t$enable_loggedin_registration = apply_filters( 'um_registration_for_loggedin_users', false, $args );\n\n\t\t\t\tif ( 'register' == $mode && is_user_logged_in() && ! $enable_loggedin_registration ) {\n\t\t\t\t\tob_get_clean();\n\t\t\t\t\treturn __( 'You are already registered', 'ultimate-member' );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// for profiles only\n\t\t\tif ( $mode == 'profile' && um_profile_id() ) {\n\n\t\t\t\t//set requested user if it's not setup from permalinks (for not profile page in edit mode)\n\t\t\t\tif ( ! um_get_requested_user() ) {\n\t\t\t\t\tum_set_requested_user( um_profile_id() );\n\t\t\t\t}\n\n\t\t\t\tif ( ! empty( $args['use_custom_settings'] ) ) { // Option \"Apply custom settings to this form\"\n\t\t\t\t\tif ( ! empty( $args['role'] ) ) { // Option \"Make this profile form role-specific\"\n\n\t\t\t\t\t\t// show the first Profile Form with role selected, don't show profile forms below the page with other role-specific setting\n\t\t\t\t\t\tif ( empty( $this->profile_role ) ) {\n\t\t\t\t\t\t\t$current_user_roles = UM()->roles()->get_all_user_roles( um_profile_id() );\n\n\t\t\t\t\t\t\tif ( empty( $current_user_roles ) ) {\n\t\t\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t} elseif ( is_array( $args['role'] ) ) {\n\t\t\t\t\t\t\t\tif ( ! count( array_intersect( $args['role'], $current_user_roles ) ) ) {\n\t\t\t\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\tif ( ! in_array( $args['role'], $current_user_roles ) ) {\n\t\t\t\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t$this->profile_role = $args['role'];\n\t\t\t\t\t\t} elseif ( $this->profile_role != $args['role'] ) {\n\t\t\t\t\t\t\tob_get_clean();\n\t\t\t\t\t\t\treturn '';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_pre_{$mode}_shortcode\n\t\t\t * @description Action pre-load form shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$args\",\"type\":\"array\",\"desc\":\"Form shortcode pre-loading\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_pre_{$mode}_shortcode', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_pre_{$mode}_shortcode', 'my_pre_shortcode', 10, 1 );\n\t\t\t * function my_pre_shortcode( $args ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_pre_{$mode}_shortcode\", $args );\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_before_form_is_loaded\n\t\t\t * @description Action pre-load form shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$args\",\"type\":\"array\",\"desc\":\"Form shortcode pre-loading\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_before_form_is_loaded', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_before_form_is_loaded', 'my_pre_shortcode', 10, 1 );\n\t\t\t * function my_pre_shortcode( $args ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_before_form_is_loaded\", $args );\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_before_{$mode}_form_is_loaded\n\t\t\t * @description Action pre-load form shortcode\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$args\",\"type\":\"array\",\"desc\":\"Form shortcode pre-loading\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_before_{$mode}_form_is_loaded', 'function_name', 10, 1 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_before_{$mode}_form_is_loaded', 'my_pre_shortcode', 10, 1 );\n\t\t\t * function my_pre_shortcode( $args ) {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( \"um_before_{$mode}_form_is_loaded\", $args );\n\n\t\t\t$this->template_load( $template, $args );\n\n\t\t\t$this->dynamic_css( $args );\n\n\t\t\tif ( um_get_requested_user() || $mode == 'logout' ) {\n\t\t\t\tum_reset_user();\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type action\n\t\t\t * @title um_after_everything_output\n\t\t\t * @description Action after load shortcode content\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage add_action( 'um_after_everything_output', 'function_name', 10 );\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_action( 'um_after_everything_output', 'my_after_everything_output', 10 );\n\t\t\t * function my_after_everything_output() {\n\t\t\t *     // your code here\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\tdo_action( 'um_after_everything_output' );\n\n\t\t\t$output = ob_get_clean();\n\t\t\treturn $output;\n\t\t}\n\n\n\t\t/**\n\t\t * Get dynamic CSS args\n\t\t *\n\t\t * @param $args\n\t\t * @return array\n\t\t */\n\t\tfunction get_css_args( $args ) {\n\t\t\t$arr = um_styling_defaults( $args['mode'] );\n\t\t\t$arr = array_merge( $arr, array( 'form_id' => $args['form_id'], 'mode' => $args['mode'] ) );\n\t\t\treturn $arr;\n\t\t}\n\n\n\t\t/**\n\t\t * Load dynamic css\n\t\t *\n\t\t * @param array $args\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction dynamic_css( $args = array() ) {\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_disable_dynamic_global_css\n\t\t\t * @description Turn on for disable global dynamic CSS for fix the issue #306\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$disable\",\"type\":\"bool\",\"desc\":\"Disable global CSS\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_disable_dynamic_global_css', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_disable_dynamic_global_css', 'my_disable_dynamic_global_css', 10, 1 );\n\t\t\t * function my_disable_dynamic_global_css( $disable ) {\n\t\t\t *     // your code here\n\t\t\t *     return $disable;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$disable_css = apply_filters( 'um_disable_dynamic_global_css', false );\n\t\t\tif ( $disable_css )\n\t\t\t\treturn '';\n\n\t\t\t/**\n\t\t\t * @var $mode\n\t\t\t */\n\t\t\textract( $args );\n\n\t\t\tinclude_once um_path . 'assets/dynamic_css/dynamic_global.php';\n\n\t\t\tif ( isset( $mode ) && in_array( $mode, array( 'profile', 'directory' ) ) ) {\n\t\t\t\t$file = um_path . 'assets/dynamic_css/dynamic_' . $mode . '.php';\n\n\t\t\t\tif ( file_exists( $file ) )\n\t\t\t\t\tinclude_once $file;\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\n\n\t\t/**\n\t\t * Loads a template file\n\t\t *\n\t\t * @param $template\n\t\t * @param array $args\n\t\t */\n\t\tfunction template_load( $template, $args = array() ) {\n\t\t\tif ( is_array( $args ) ) {\n\t\t\t\t$this->set_args = $args;\n\t\t\t}\n\t\t\t$this->load_template( $template );\n\t\t}\n\n\n\t\t/**\n\t\t * Checks if a template file exists\n\t\t *\n\t\t * @param $template\n\t\t *\n\t\t * @return bool\n\t\t */\n\t\tfunction template_exists($template) {\n\n\t\t\t$file = um_path . 'templates/' . $template . '.php';\n\t\t\t$theme_file = get_stylesheet_directory() . '/ultimate-member/templates/' . $template . '.php';\n\n\t\t\tif (file_exists($theme_file) || file_exists($file)) {\n\t\t\t\treturn true;\n\t\t\t}\n\n\t\t\treturn false;\n\t\t}\n\n\n\t\t/**\n\t\t * Get File Name without path and extension\n\t\t *\n\t\t * @param $file\n\t\t *\n\t\t * @return mixed|string\n\t\t */\n\t\tfunction get_template_name( $file ) {\n\t\t\t$file = basename( $file );\n\t\t\t$file = preg_replace( '/\\\\.[^.\\\\s]{3,4}$/', '', $file );\n\t\t\treturn $file;\n\t\t}\n\n\n\t\t/**\n\t\t * Get Templates\n\t\t *\n\t\t * @param null $excluded\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction get_templates( $excluded = null ) {\n\n\t\t\tif ( $excluded ) {\n\t\t\t\t$array[ $excluded ] = __( 'Default Template', 'ultimate-member' );\n\t\t\t}\n\n\t\t\t$paths[] = glob( um_path . 'templates/' . '*.php' );\n\n\t\t\tif ( file_exists( get_stylesheet_directory() . '/ultimate-member/templates/' ) ) {\n\t\t\t\t$paths[] = glob( get_stylesheet_directory() . '/ultimate-member/templates/' . '*.php' );\n\t\t\t}\n\n\t\t\tif ( isset( $paths ) && ! empty( $paths ) ) {\n\n\t\t\t\tforeach ( $paths as $k => $files ) {\n\n\t\t\t\t\tif ( isset( $files ) && ! empty( $files ) ) {\n\n\t\t\t\t\t\tforeach ( $files as $file ) {\n\n\t\t\t\t\t\t\t$clean_filename = $this->get_template_name( $file );\n\n\t\t\t\t\t\t\tif ( 0 === strpos( $clean_filename, $excluded ) ) {\n\n\t\t\t\t\t\t\t\t$source = file_get_contents( $file );\n\t\t\t\t\t\t\t\t$tokens = @\\token_get_all( $source );\n\t\t\t\t\t\t\t\t$comment = array(\n\t\t\t\t\t\t\t\t\tT_COMMENT, // All comments since PHP5\n\t\t\t\t\t\t\t\t\tT_DOC_COMMENT, // PHPDoc comments\n\t\t\t\t\t\t\t\t);\n\t\t\t\t\t\t\t\tforeach ( $tokens as $token ) {\n\t\t\t\t\t\t\t\t\tif ( in_array( $token[0], $comment ) && strstr( $token[1], '/* Template:' ) && $clean_filename != $excluded ) {\n\t\t\t\t\t\t\t\t\t\t$txt = $token[1];\n\t\t\t\t\t\t\t\t\t\t$txt = str_replace( '/* Template: ', '', $txt );\n\t\t\t\t\t\t\t\t\t\t$txt = str_replace( ' */', '', $txt );\n\t\t\t\t\t\t\t\t\t\t$array[ $clean_filename ] = $txt;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t}\n\n\t\t\t\t\t}\n\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $array;\n\t\t}\n\n\n\t\t/**\n\t\t * Get Shortcode for given form ID\n\t\t *\n\t\t * @param $post_id\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_shortcode( $post_id ) {\n\t\t\t$shortcode = '[ultimatemember form_id=\"' . $post_id . '\"]';\n\t\t\treturn $shortcode;\n\t\t}\n\n\n\t\t/**\n\t\t * Get Shortcode for given form ID\n\t\t *\n\t\t * @param $post_id\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tfunction get_default_shortcode( $post_id ) {\n\t\t\t$mode = UM()->query()->get_attr( 'mode', $post_id );\n\n\t\t\tswitch ( $mode ) {\n\t\t\t\tcase 'login':\n\t\t\t\t\t$shortcode = '[ultimatemember_login]';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'profile':\n\t\t\t\t\t$shortcode = '[ultimatemember_profile]';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'register':\n\t\t\t\t\t$shortcode = '[ultimatemember_register]';\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'directory':\n\t\t\t\t\t$shortcode = '[ultimatemember_directory]';\n\t\t\t\t\tbreak;\n\t\t\t}\n\n\t\t\treturn $shortcode;\n\t\t}\n\n\n\t\t/**\n\t\t * Convert access lock tags\n\t\t *\n\t\t * @param $str\n\t\t *\n\t\t * @return mixed|string\n\t\t */\n\t\tfunction convert_locker_tags( $str ) {\n\t\t\tadd_filter( 'um_template_tags_patterns_hook', array( &$this, 'add_placeholder' ), 10, 1 );\n\t\t\tadd_filter( 'um_template_tags_replaces_hook', array( &$this, 'add_replace_placeholder' ), 10, 1 );\n\t\t\treturn um_convert_tags( $str, array(), false );\n\t\t}\n\n\n\t\t/**\n\t\t * Convert user tags in a string\n\t\t *\n\t\t * @param $str\n\t\t *\n\t\t * @return mixed\n\t\t */\n\t\tfunction convert_user_tags( $str ) {\n\n\t\t\t$pattern_array = array(\n\t\t\t\t'{first_name}',\n\t\t\t\t'{last_name}',\n\t\t\t\t'{display_name}',\n\t\t\t\t'{user_avatar_small}',\n\t\t\t\t'{username}',\n\t\t\t\t'{nickname}',\n\t\t\t);\n\n\t\t\t/**\n\t\t\t * UM hook\n\t\t\t *\n\t\t\t * @type filter\n\t\t\t * @title um_allowed_user_tags_patterns\n\t\t\t * @description Extend user placeholders patterns\n\t\t\t * @input_vars\n\t\t\t * [{\"var\":\"$patterns\",\"type\":\"array\",\"desc\":\"Placeholders\"}]\n\t\t\t * @change_log\n\t\t\t * [\"Since: 2.0\"]\n\t\t\t * @usage\n\t\t\t * <?php add_filter( 'um_allowed_user_tags_patterns', 'function_name', 10, 1 ); ?>\n\t\t\t * @example\n\t\t\t * <?php\n\t\t\t * add_filter( 'um_allowed_user_tags_patterns', 'my_allowed_user_tags', 10, 1 );\n\t\t\t * function my_allowed_user_tags( $patterns ) {\n\t\t\t *     // your code here\n\t\t\t *     return $patterns;\n\t\t\t * }\n\t\t\t * ?>\n\t\t\t */\n\t\t\t$pattern_array = apply_filters( 'um_allowed_user_tags_patterns', $pattern_array );\n\n\t\t\t//$matches = false;\n\t\t\tforeach ( $pattern_array as $pattern ) {\n\n\t\t\t\tif ( preg_match( $pattern, $str ) ) {\n\n\t\t\t\t\t$value = '';\n\t\t\t\t\tif ( is_user_logged_in() ) {\n\t\t\t\t\t\t$usermeta = str_replace( '{', '', $pattern );\n\t\t\t\t\t\t$usermeta = str_replace( '}', '', $usermeta );\n\n\t\t\t\t\t\tif ( $usermeta == 'user_avatar_small' ) {\n\t\t\t\t\t\t\t$value = get_avatar( um_user( 'ID' ), 40 );\n\t\t\t\t\t\t} elseif ( um_user( $usermeta ) ) {\n\t\t\t\t\t\t\t$value = um_user( $usermeta );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( $usermeta == 'username' ) {\n\t\t\t\t\t\t\t$value = um_user( 'user_login' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( $usermeta == 'nickname' ) {\n\t\t\t\t\t\t\t$value = um_profile( 'nickname' );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t/**\n\t\t\t\t\t\t * UM hook\n\t\t\t\t\t\t *\n\t\t\t\t\t\t * @type filter\n\t\t\t\t\t\t * @title um_profile_tag_hook__{$usermeta}\n\t\t\t\t\t\t * @description Change usermeta field value\n\t\t\t\t\t\t * @input_vars\n\t\t\t\t\t\t * [{\"var\":\"$value\",\"type\":\"array\",\"desc\":\"Meta field value\"},\n\t\t\t\t\t\t * {\"var\":\"$user_id\",\"type\":\"array\",\"desc\":\"User ID\"}]\n\t\t\t\t\t\t * @change_log\n\t\t\t\t\t\t * [\"Since: 2.0\"]\n\t\t\t\t\t\t * @usage\n\t\t\t\t\t\t * <?php add_filter( 'um_profile_tag_hook__{$usermeta}', 'function_name', 10, 2 ); ?>\n\t\t\t\t\t\t * @example\n\t\t\t\t\t\t * <?php\n\t\t\t\t\t\t * add_filter( 'um_profile_tag_hook__{$usermeta}', 'my_profile_tag', 10, 2 );\n\t\t\t\t\t\t * function my_profile_tag( $value, $user_id ) {\n\t\t\t\t\t\t *     // your code here\n\t\t\t\t\t\t *     return $value;\n\t\t\t\t\t\t * }\n\t\t\t\t\t\t * ?>\n\t\t\t\t\t\t */\n\t\t\t\t\t\t$value = apply_filters( \"um_profile_tag_hook__{$usermeta}\", $value, um_user( 'ID' ) );\n\t\t\t\t\t}\n\n\t\t\t\t\t$str = preg_replace( '/' . $pattern . '/', $value, $str );\n\t\t\t\t}\n\n\t\t\t}\n\n\t\t\treturn $str;\n\t\t}\n\n\n\t\t/**\n\t\t * Shortcode: Show custom content to specific role\n\t\t *\n\t\t * Show content to specific roles\n\t\t * [um_show_content roles='member'] <!-- insert content here -->  [/um_show_content]\n\t\t * You can add multiple target roles, just use ',' e.g.  [um_show_content roles='member,candidates,pets']\n\t\t *\n\t\t * Hide content from specific roles\n\t\t * [um_show_content not='contributors'] <!-- insert content here -->  [/um_show_content]\n\t\t * You can add multiple target roles, just use ',' e.g.  [um_show_content roles='member,candidates,pets']\n\t\t *\n\t\t * @param  array $atts\n\t\t * @param  string $content\n\t\t * @return string\n\t\t */\n\t\tfunction um_shortcode_show_content_for_role( $atts = array() , $content = '' ) {\n\t\t\tglobal $user_ID;\n\n\t\t\tif ( ! is_user_logged_in() ) {\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\t$a = shortcode_atts( array(\n\t\t\t\t'roles' => '',\n\t\t\t\t'not' => '',\n\t\t\t\t'is_profile' => false,\n\t\t\t), $atts );\n\n\t\t\tif ( $a['is_profile'] ) {\n\t\t\t\tum_fetch_user( um_profile_id() );\n\t\t\t} else {\n\t\t\t\tum_fetch_user( $user_ID );\n\t\t\t}\n\n\t\t\t$current_user_roles = um_user( 'roles' );\n\n\t\t\tif ( ! empty( $a['not'] ) && ! empty( $a['roles'] ) ) {\n\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\treturn do_shortcode( $this->convert_locker_tags( $content ) );\n\t\t\t\t} else {\n\t\t\t\t\treturn apply_shortcodes( $this->convert_locker_tags( $content ) );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( ! empty( $a['not'] ) ) {\n\t\t\t\t$not_in_roles = explode( \",\", $a['not'] );\n\n\t\t\t\tif ( is_array( $not_in_roles ) && ( empty( $current_user_roles ) || count( array_intersect( $current_user_roles, $not_in_roles ) ) <= 0 ) ) {\n\t\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\t\treturn do_shortcode( $this->convert_locker_tags( $content ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn apply_shortcodes( $this->convert_locker_tags( $content ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$roles = explode( \",\", $a['roles'] );\n\n\t\t\t\tif ( ! empty( $current_user_roles ) && is_array( $roles ) && count( array_intersect( $current_user_roles, $roles ) ) > 0 ) {\n\t\t\t\t\tif ( version_compare( get_bloginfo('version'),'5.4', '<' ) ) {\n\t\t\t\t\t\treturn do_shortcode( $this->convert_locker_tags( $content ) );\n\t\t\t\t\t} else {\n\t\t\t\t\t\treturn apply_shortcodes( $this->convert_locker_tags( $content ) );\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\treturn '';\n\t\t}\n\n\n\t\t/**\n\t\t * @param array $args\n\t\t * @param string $content\n\t\t *\n\t\t * @return string\n\t\t */\n\t\tpublic function ultimatemember_searchform( $args = array(), $content = \"\" ) {\n\t\t\tif ( ! UM()->options()->get( 'members_page' ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t$member_directory_ids = array();\n\n\t\t\t$page_id = UM()->config()->permalinks['members'];\n\t\t\tif ( ! empty( $page_id ) ) {\n\t\t\t\t$members_page = get_post( $page_id );\n\t\t\t\tif ( ! empty( $members_page ) && ! is_wp_error( $members_page ) ) {\n\t\t\t\t\tif ( ! empty( $members_page->post_content ) ) {\n\t\t\t\t\t\tpreg_match_all( '/\\[ultimatemember[^\\]]*?form_id\\=[\\'\"]*?(\\d+)[\\'\"]*?/i', $members_page->post_content, $matches );\n\t\t\t\t\t\tif ( ! empty( $matches[1] ) && is_array( $matches[1] ) ) {\n\t\t\t\t\t\t\t$member_directory_ids = array_map( 'absint', $matches[1] );\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ( empty( $member_directory_ids ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t//current user priority role\n\t\t\t$priority_user_role = false;\n\t\t\tif ( is_user_logged_in() ) {\n\t\t\t\t$priority_user_role = UM()->roles()->get_priority_user_role( get_current_user_id() );\n\t\t\t}\n\n\t\t\t$query = array();\n\t\t\tforeach ( $member_directory_ids as $directory_id ) {\n\t\t\t\t$directory_data = UM()->query()->post_data( $directory_id );\n\n\t\t\t\tif ( isset( $directory_data['roles_can_search'] ) ) {\n\t\t\t\t\t$directory_data['roles_can_search'] = maybe_unserialize( $directory_data['roles_can_search'] );\n\t\t\t\t}\n\n\t\t\t\t$show_search = empty( $directory_data['roles_can_search'] ) || ( ! empty( $priority_user_role ) && in_array( $priority_user_role, $directory_data['roles_can_search'] ) );\n\t\t\t\tif ( empty( $directory_data['search'] ) || ! $show_search ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$hash = UM()->member_directory()->get_directory_hash( $directory_id );\n\n\t\t\t\t$query[ 'search_' . $hash ] = ! empty( $_GET[ 'search_' . $hash ] ) ? sanitize_text_field( $_GET[ 'search_' . $hash ] ) : '';\n\t\t\t}\n\n\t\t\tif ( empty( $query ) ) {\n\t\t\t\treturn '';\n\t\t\t}\n\n\t\t\t$search_value = array_values( $query );\n\n\t\t\t$template = UM()->get_template( 'searchform.php', '', array( 'query' => $query, 'search_value' => $search_value[0], 'members_page' => um_get_core_page( 'members' ) ) );\n\n\t\t\treturn $template;\n\t\t}\n\n\n\t\t/**\n\t\t * UM Placeholders for login referrer\n\t\t *\n\t\t * @param $placeholders\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction add_placeholder( $placeholders ) {\n\t\t\t$placeholders[] = '{login_referrer}';\n\t\t\treturn $placeholders;\n\t\t}\n\n\n\t\t/**\n\t\t * UM Replace Placeholders for login referrer\n\t\t *\n\t\t * @param $replace_placeholders\n\t\t *\n\t\t * @return array\n\t\t */\n\t\tfunction add_replace_placeholder( $replace_placeholders ) {\n\t\t\t$replace_placeholders[] = um_dynamic_login_page_redirect();\n\t\t\treturn $replace_placeholders;\n\t\t}\n\n\t}\n}\n"], "filenames": ["includes/core/class-shortcodes.php"], "buggy_code_start_loc": [279], "buggy_code_end_loc": [290], "fixing_code_start_loc": [278], "fixing_code_end_loc": [292], "type": "CWE-21", "message": "A vulnerability, which was classified as critical, has been found in Ultimate Member Plugin up to 2.5.0. This issue affects the function load_template of the file includes/core/class-shortcodes.php of the component Template Handler. The manipulation of the argument tpl leads to pathname traversal. The attack may be initiated remotely. Upgrading to version 2.5.1 is able to address this issue. The name of the patch is e1bc94c1100f02a129721ba4be5fbc44c3d78ec4. It is recommended to upgrade the affected component. The identifier VDB-213545 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2022-3966", "sourceIdentifier": "cna@vuldb.com", "published": "2022-11-13T08:15:15.607", "lastModified": "2022-11-17T17:18:07.970", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as critical, has been found in Ultimate Member Plugin up to 2.5.0. This issue affects the function load_template of the file includes/core/class-shortcodes.php of the component Template Handler. The manipulation of the argument tpl leads to pathname traversal. The attack may be initiated remotely. Upgrading to version 2.5.1 is able to address this issue. The name of the patch is e1bc94c1100f02a129721ba4be5fbc44c3d78ec4. It is recommended to upgrade the affected component. The identifier VDB-213545 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-21"}, {"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ultimatemember:ultimate_member:*:*:*:*:*:wordpress:*:*", "versionEndExcluding": "2.5.1", "matchCriteriaId": "1D0F9909-DAAA-4B41-A39B-946DC1460D50"}]}]}], "references": [{"url": "https://github.com/ultimatemember/ultimatemember/commit/e1bc94c1100f02a129721ba4be5fbc44c3d78ec4", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ultimatemember/ultimatemember/releases/tag/2.5.1", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.213545", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ultimatemember/ultimatemember/commit/e1bc94c1100f02a129721ba4be5fbc44c3d78ec4"}}