{"buggy_code": ["<?php\nnamespace Froxlor\\Database\\Manager;\n\nuse Froxlor\\Database\\Database;\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright (c) the authors\n * @author Michael Kaufmann <mkaufmann@nutime.de>\n * @author Froxlor team <team@froxlor.org> (2010-)\n * @license GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package Classes\n *         \n * @since 0.9.31\n *       \n */\n\n/**\n * Class DbManagerMySQL\n *\n * Explicit class for database-management like creating\n * and removing databases, users and permissions for MySQL\n *\n * @copyright (c) the authors\n * @author Michael Kaufmann <mkaufmann@nutime.de>\n * @author Froxlor team <team@froxlor.org> (2010-)\n * @license GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package Classes\n */\nclass DbManagerMySQL\n{\n\n\t/**\n\t * FroxlorLogger object\n\t *\n\t * @var object\n\t */\n\tprivate $log = null;\n\n\t/**\n\t * main constructor\n\t *\n\t * @param \\Froxlor\\FroxlorLogger $log\n\t */\n\tpublic function __construct(&$log = null)\n\t{\n\t\t$this->log = $log;\n\t}\n\n\t/**\n\t * creates a database\n\t *\n\t * @param string $dbname\n\t */\n\tpublic function createDatabase($dbname = null)\n\t{\n\t\tDatabase::query(\"CREATE DATABASE `\" . $dbname . \"`\");\n\t}\n\n\t/**\n\t * grants access privileges on a database with the same\n\t * username and sets the password for that user the given access_host\n\t *\n\t * @param string $username\n\t * @param string $password\n\t * @param string $access_host\n\t * @param bool $p_encrypted\n\t *        \toptional, whether the password is encrypted or not, default false\n\t * @param bool $update\n\t *        \toptional, whether to update the password only (not create user)\n\t */\n\tpublic function grantPrivilegesTo($username = null, $password = null, $access_host = null, $p_encrypted = false, $update = false)\n\t{\n\t\tif (! $update) {\n\t\t\t// create user\n\t\t\tif ($p_encrypted) {\n\t\t\t\tif (version_compare(Database::getAttribute(\\PDO::ATTR_SERVER_VERSION), '5.7.0', '<')) {\n\t\t\t\t\t$stmt = Database::prepare(\"\n\t\t\t\t\t\tCREATE USER '\" . $username . \"'@'\" . $access_host . \"' IDENTIFIED BY PASSWORD :password\n\t\t\t\t\t\");\n\t\t\t\t} else {\n\t\t\t\t\t$stmt = Database::prepare(\"\n\t\t\t\t\t\tCREATE USER '\" . $username . \"'@'\" . $access_host . \"' IDENTIFIED WITH mysql_native_password AS :password\n\t\t\t\t\t\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$stmt = Database::prepare(\"\n\t\t\t\t\tCREATE USER '\" . $username . \"'@'\" . $access_host . \"' IDENTIFIED BY :password\n\t\t\t\t\");\n\t\t\t}\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"password\" => $password\n\t\t\t));\n\t\t\t// grant privileges\n\t\t\t$stmt = Database::prepare(\"\n\t\t\t\tGRANT ALL ON `\" . $username . \"`.* TO :username@:host\n\t\t\t\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"username\" => $username,\n\t\t\t\t\"host\" => $access_host\n\t\t\t));\n\t\t} else {\n\t\t\t// set password\n\t\t\tif (version_compare(Database::getAttribute(\\PDO::ATTR_SERVER_VERSION), '5.7.6', '<')) {\n\t\t\t\tif ($p_encrypted) {\n\t\t\t\t\t$stmt = Database::prepare(\"SET PASSWORD FOR :username@:host = :password\");\n\t\t\t\t} else {\n\t\t\t\t\t$stmt = Database::prepare(\"SET PASSWORD FOR :username@:host = PASSWORD(:password)\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($p_encrypted) {\n\t\t\t\t\t$stmt = Database::prepare(\"ALTER USER :username@:host IDENTIFIED WITH mysql_native_password AS :password\");\n\t\t\t\t} else {\n\t\t\t\t\t$stmt = Database::prepare(\"ALTER USER :username@:host IDENTIFIED BY :password\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"username\" => $username,\n\t\t\t\t\"host\" => $access_host,\n\t\t\t\t\"password\" => $password\n\t\t\t));\n\t\t}\n\t}\n\n\t/**\n\t * removes the given database from the dbms and also\n\t * takes away any privileges from a user to that db\n\t *\n\t * @param string $dbname\n\t */\n\tpublic function deleteDatabase($dbname = null)\n\t{\n\t\tif (Database::getAttribute(\\PDO::ATTR_SERVER_VERSION) < '5.0.2') {\n\t\t\t// failsafe if user has been deleted manually (requires MySQL 4.1.2+)\n\t\t\t$stmt = Database::prepare(\"REVOKE ALL PRIVILEGES, GRANT OPTION FROM `\" . $dbname . \"`\");\n\t\t\tDatabase::pexecute($stmt, array(), false);\n\t\t}\n\n\t\t$host_res_stmt = Database::prepare(\"\n\t\t\tSELECT `Host` FROM `mysql`.`user` WHERE `User` = :dbname\");\n\t\tDatabase::pexecute($host_res_stmt, array(\n\t\t\t'dbname' => $dbname\n\t\t));\n\n\t\t// as of MySQL 5.0.2 this also revokes privileges. (requires MySQL 4.1.2+)\n\t\tif (version_compare(Database::getAttribute(\\PDO::ATTR_SERVER_VERSION), '5.7.0', '<')) {\n\t\t\t$drop_stmt = Database::prepare(\"DROP USER :dbname@:host\");\n\t\t} else {\n\t\t\t$drop_stmt = Database::prepare(\"DROP USER IF EXISTS :dbname@:host\");\n\t\t}\n\t\twhile ($host = $host_res_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\tDatabase::pexecute($drop_stmt, array(\n\t\t\t\t'dbname' => $dbname,\n\t\t\t\t'host' => $host['Host']\n\t\t\t), false);\n\t\t}\n\n\t\t$drop_stmt = Database::prepare(\"DROP DATABASE IF EXISTS `\" . $dbname . \"`\");\n\t\tDatabase::pexecute($drop_stmt);\n\t}\n\n\t/**\n\t * removes a user from the dbms and revokes all privileges\n\t *\n\t * @param string $username\n\t * @param string $host\n\t */\n\tpublic function deleteUser($username = null, $host = null)\n\t{\n\t\tif (Database::getAttribute(\\PDO::ATTR_SERVER_VERSION) < '5.0.2') {\n\t\t\t// Revoke privileges (only required for MySQL 4.1.2 - 5.0.1)\n\t\t\t$stmt = Database::prepare(\"REVOKE ALL PRIVILEGES ON * . * FROM `\" . $username . \"`@`\" . $host . \"`\");\n\t\t\tDatabase::pexecute($stmt);\n\t\t}\n\t\t// as of MySQL 5.0.2 this also revokes privileges. (requires MySQL 4.1.2+)\n\t\tif (version_compare(Database::getAttribute(\\PDO::ATTR_SERVER_VERSION), '5.7.0', '<')) {\n\t\t\t$stmt = Database::prepare(\"DROP USER :username@:host\");\n\t\t} else {\n\t\t\t$stmt = Database::prepare(\"DROP USER IF EXISTS :username@:host\");\n\t\t}\n\t\tDatabase::pexecute($stmt, array(\n\t\t\t\"username\" => $username,\n\t\t\t\"host\" => $host\n\t\t));\n\t}\n\n\t/**\n\t * removes permissions from a user\n\t *\n\t * @param string $username\n\t * @param string $host\n\t *        \t(unused in mysql)\n\t */\n\tpublic function disableUser($username = null, $host = null)\n\t{\n\t\t$stmt = Database::prepare('REVOKE ALL PRIVILEGES, GRANT OPTION FROM `' . $username . '`@`' . $host . '`');\n\t\tDatabase::pexecute($stmt, array(), false);\n\t}\n\n\t/**\n\t * re-grant permissions to a user\n\t *\n\t * @param string $username\n\t * @param string $host\n\t */\n\tpublic function enableUser($username = null, $host = null)\n\t{\n\t\t// check whether user exists to avoid errors\n\t\t$exist_check_stmt = Database::prepare(\"SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '\" . $username . \"' AND host = '\" . $host . \"')\");\n\t\t$exist_check = Database::pexecute_first($exist_check_stmt);\n\t\tif ($exist_check && array_pop($exist_check) == '1') {\n\t\t\tDatabase::query('GRANT ALL PRIVILEGES ON `' . $username . '`.* TO `' . $username . '`@`' . $host . '`');\n\t\t\tDatabase::query('GRANT ALL PRIVILEGES ON `' . str_replace('_', '\\_', $username) . '` . * TO `' . $username . '`@`' . $host . '`');\n\t\t}\n\t}\n\n\t/**\n\t * flushes the privileges...pretty obvious eh?\n\t */\n\tpublic function flushPrivileges()\n\t{\n\t\tDatabase::query(\"FLUSH PRIVILEGES\");\n\t}\n\n\t/**\n\t * return an array of all usernames used in that DBMS\n\t *\n\t * @param bool $user_only\n\t *        \tif false, * will be selected from mysql.user and slightly different array will be generated\n\t *        \t\n\t * @return array\n\t */\n\tpublic function getAllSqlUsers($user_only = true)\n\t{\n\t\tif ($user_only == false) {\n\t\t\t$result_stmt = Database::prepare('SELECT * FROM mysql.user');\n\t\t} else {\n\t\t\t$result_stmt = Database::prepare('SELECT `User` FROM mysql.user');\n\t\t}\n\t\tDatabase::pexecute($result_stmt);\n\t\t$allsqlusers = array();\n\t\twhile ($row = $result_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\tif ($user_only == false) {\n\t\t\t\tif (! isset($allsqlusers[$row['User']]) || ! is_array($allsqlusers[$row['User']])) {\n\t\t\t\t\t$allsqlusers[$row['User']] = array(\n\t\t\t\t\t\t'password' => $row['Password'] ?? $row['authentication_string'],\n\t\t\t\t\t\t'hosts' => array()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t$allsqlusers[$row['User']]['hosts'][] = $row['Host'];\n\t\t\t} else {\n\t\t\t\t$allsqlusers[] = $row['User'];\n\t\t\t}\n\t\t}\n\t\treturn $allsqlusers;\n\t}\n}\n"], "fixing_code": ["<?php\nnamespace Froxlor\\Database\\Manager;\n\nuse Froxlor\\Database\\Database;\n\n/**\n * This file is part of the Froxlor project.\n * Copyright (c) 2010 the Froxlor Team (see authors).\n *\n * For the full copyright and license information, please view the COPYING\n * file that was distributed with this source code. You can also view the\n * COPYING file online at http://files.froxlor.org/misc/COPYING.txt\n *\n * @copyright (c) the authors\n * @author Michael Kaufmann <mkaufmann@nutime.de>\n * @author Froxlor team <team@froxlor.org> (2010-)\n * @license GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package Classes\n *         \n * @since 0.9.31\n *       \n */\n\n/**\n * Class DbManagerMySQL\n *\n * Explicit class for database-management like creating\n * and removing databases, users and permissions for MySQL\n *\n * @copyright (c) the authors\n * @author Michael Kaufmann <mkaufmann@nutime.de>\n * @author Froxlor team <team@froxlor.org> (2010-)\n * @license GPLv2 http://files.froxlor.org/misc/COPYING.txt\n * @package Classes\n */\nclass DbManagerMySQL\n{\n\n\t/**\n\t * FroxlorLogger object\n\t *\n\t * @var object\n\t */\n\tprivate $log = null;\n\n\t/**\n\t * main constructor\n\t *\n\t * @param \\Froxlor\\FroxlorLogger $log\n\t */\n\tpublic function __construct(&$log = null)\n\t{\n\t\t$this->log = $log;\n\t}\n\n\t/**\n\t * creates a database\n\t *\n\t * @param string $dbname\n\t */\n\tpublic function createDatabase($dbname = null)\n\t{\n\t\t$stmt = Database::prepare(\"CREATE DATABASE :dbname\");\n\t\tDatabase::pexecute($stmt, [\n\t\t\t'dbname' => $dbname\n\t\t]);\n\t}\n\n\t/**\n\t * grants access privileges on a database with the same\n\t * username and sets the password for that user the given access_host\n\t *\n\t * @param string $username\n\t * @param string $password\n\t * @param string $access_host\n\t * @param bool $p_encrypted\n\t *        \toptional, whether the password is encrypted or not, default false\n\t * @param bool $update\n\t *        \toptional, whether to update the password only (not create user)\n\t */\n\tpublic function grantPrivilegesTo($username = null, $password = null, $access_host = null, $p_encrypted = false, $update = false)\n\t{\n\t\tif (! $update) {\n\t\t\t// create user\n\t\t\tif ($p_encrypted) {\n\t\t\t\tif (version_compare(Database::getAttribute(\\PDO::ATTR_SERVER_VERSION), '5.7.0', '<')) {\n\t\t\t\t\t$stmt = Database::prepare(\"\n\t\t\t\t\t\tCREATE USER '\" . $username . \"'@'\" . $access_host . \"' IDENTIFIED BY PASSWORD :password\n\t\t\t\t\t\");\n\t\t\t\t} else {\n\t\t\t\t\t$stmt = Database::prepare(\"\n\t\t\t\t\t\tCREATE USER '\" . $username . \"'@'\" . $access_host . \"' IDENTIFIED WITH mysql_native_password AS :password\n\t\t\t\t\t\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$stmt = Database::prepare(\"\n\t\t\t\t\tCREATE USER '\" . $username . \"'@'\" . $access_host . \"' IDENTIFIED BY :password\n\t\t\t\t\");\n\t\t\t}\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"password\" => $password\n\t\t\t));\n\t\t\t// grant privileges\n\t\t\t$stmt = Database::prepare(\"\n\t\t\t\tGRANT ALL ON `\" . $username . \"`.* TO :username@:host\n\t\t\t\");\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"username\" => $username,\n\t\t\t\t\"host\" => $access_host\n\t\t\t));\n\t\t} else {\n\t\t\t// set password\n\t\t\tif (version_compare(Database::getAttribute(\\PDO::ATTR_SERVER_VERSION), '5.7.6', '<')) {\n\t\t\t\tif ($p_encrypted) {\n\t\t\t\t\t$stmt = Database::prepare(\"SET PASSWORD FOR :username@:host = :password\");\n\t\t\t\t} else {\n\t\t\t\t\t$stmt = Database::prepare(\"SET PASSWORD FOR :username@:host = PASSWORD(:password)\");\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tif ($p_encrypted) {\n\t\t\t\t\t$stmt = Database::prepare(\"ALTER USER :username@:host IDENTIFIED WITH mysql_native_password AS :password\");\n\t\t\t\t} else {\n\t\t\t\t\t$stmt = Database::prepare(\"ALTER USER :username@:host IDENTIFIED BY :password\");\n\t\t\t\t}\n\t\t\t}\n\t\t\tDatabase::pexecute($stmt, array(\n\t\t\t\t\"username\" => $username,\n\t\t\t\t\"host\" => $access_host,\n\t\t\t\t\"password\" => $password\n\t\t\t));\n\t\t}\n\t}\n\n\t/**\n\t * removes the given database from the dbms and also\n\t * takes away any privileges from a user to that db\n\t *\n\t * @param string $dbname\n\t */\n\tpublic function deleteDatabase($dbname = null)\n\t{\n\t\tif (Database::getAttribute(\\PDO::ATTR_SERVER_VERSION) < '5.0.2') {\n\t\t\t// failsafe if user has been deleted manually (requires MySQL 4.1.2+)\n\t\t\t$stmt = Database::prepare(\"REVOKE ALL PRIVILEGES, GRANT OPTION FROM `\" . $dbname . \"`\");\n\t\t\tDatabase::pexecute($stmt, array(), false);\n\t\t}\n\n\t\t$host_res_stmt = Database::prepare(\"\n\t\t\tSELECT `Host` FROM `mysql`.`user` WHERE `User` = :dbname\");\n\t\tDatabase::pexecute($host_res_stmt, array(\n\t\t\t'dbname' => $dbname\n\t\t));\n\n\t\t// as of MySQL 5.0.2 this also revokes privileges. (requires MySQL 4.1.2+)\n\t\tif (version_compare(Database::getAttribute(\\PDO::ATTR_SERVER_VERSION), '5.7.0', '<')) {\n\t\t\t$drop_stmt = Database::prepare(\"DROP USER :dbname@:host\");\n\t\t} else {\n\t\t\t$drop_stmt = Database::prepare(\"DROP USER IF EXISTS :dbname@:host\");\n\t\t}\n\t\twhile ($host = $host_res_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\tDatabase::pexecute($drop_stmt, array(\n\t\t\t\t'dbname' => $dbname,\n\t\t\t\t'host' => $host['Host']\n\t\t\t), false);\n\t\t}\n\n\t\t$drop_stmt = Database::prepare(\"DROP DATABASE IF EXISTS `\" . $dbname . \"`\");\n\t\tDatabase::pexecute($drop_stmt);\n\t}\n\n\t/**\n\t * removes a user from the dbms and revokes all privileges\n\t *\n\t * @param string $username\n\t * @param string $host\n\t */\n\tpublic function deleteUser($username = null, $host = null)\n\t{\n\t\tif (Database::getAttribute(\\PDO::ATTR_SERVER_VERSION) < '5.0.2') {\n\t\t\t// Revoke privileges (only required for MySQL 4.1.2 - 5.0.1)\n\t\t\t$stmt = Database::prepare(\"REVOKE ALL PRIVILEGES ON * . * FROM `\" . $username . \"`@`\" . $host . \"`\");\n\t\t\tDatabase::pexecute($stmt);\n\t\t}\n\t\t// as of MySQL 5.0.2 this also revokes privileges. (requires MySQL 4.1.2+)\n\t\tif (version_compare(Database::getAttribute(\\PDO::ATTR_SERVER_VERSION), '5.7.0', '<')) {\n\t\t\t$stmt = Database::prepare(\"DROP USER :username@:host\");\n\t\t} else {\n\t\t\t$stmt = Database::prepare(\"DROP USER IF EXISTS :username@:host\");\n\t\t}\n\t\tDatabase::pexecute($stmt, array(\n\t\t\t\"username\" => $username,\n\t\t\t\"host\" => $host\n\t\t));\n\t}\n\n\t/**\n\t * removes permissions from a user\n\t *\n\t * @param string $username\n\t * @param string $host\n\t *        \t(unused in mysql)\n\t */\n\tpublic function disableUser($username = null, $host = null)\n\t{\n\t\t$stmt = Database::prepare('REVOKE ALL PRIVILEGES, GRANT OPTION FROM `' . $username . '`@`' . $host . '`');\n\t\tDatabase::pexecute($stmt, array(), false);\n\t}\n\n\t/**\n\t * re-grant permissions to a user\n\t *\n\t * @param string $username\n\t * @param string $host\n\t */\n\tpublic function enableUser($username = null, $host = null)\n\t{\n\t\t// check whether user exists to avoid errors\n\t\t$exist_check_stmt = Database::prepare(\"SELECT EXISTS(SELECT 1 FROM mysql.user WHERE user = '\" . $username . \"' AND host = '\" . $host . \"')\");\n\t\t$exist_check = Database::pexecute_first($exist_check_stmt);\n\t\tif ($exist_check && array_pop($exist_check) == '1') {\n\t\t\tDatabase::query('GRANT ALL PRIVILEGES ON `' . $username . '`.* TO `' . $username . '`@`' . $host . '`');\n\t\t\tDatabase::query('GRANT ALL PRIVILEGES ON `' . str_replace('_', '\\_', $username) . '` . * TO `' . $username . '`@`' . $host . '`');\n\t\t}\n\t}\n\n\t/**\n\t * flushes the privileges...pretty obvious eh?\n\t */\n\tpublic function flushPrivileges()\n\t{\n\t\tDatabase::query(\"FLUSH PRIVILEGES\");\n\t}\n\n\t/**\n\t * return an array of all usernames used in that DBMS\n\t *\n\t * @param bool $user_only\n\t *        \tif false, * will be selected from mysql.user and slightly different array will be generated\n\t *        \t\n\t * @return array\n\t */\n\tpublic function getAllSqlUsers($user_only = true)\n\t{\n\t\tif ($user_only == false) {\n\t\t\t$result_stmt = Database::prepare('SELECT * FROM mysql.user');\n\t\t} else {\n\t\t\t$result_stmt = Database::prepare('SELECT `User` FROM mysql.user');\n\t\t}\n\t\tDatabase::pexecute($result_stmt);\n\t\t$allsqlusers = array();\n\t\twhile ($row = $result_stmt->fetch(\\PDO::FETCH_ASSOC)) {\n\t\t\tif ($user_only == false) {\n\t\t\t\tif (! isset($allsqlusers[$row['User']]) || ! is_array($allsqlusers[$row['User']])) {\n\t\t\t\t\t$allsqlusers[$row['User']] = array(\n\t\t\t\t\t\t'password' => $row['Password'] ?? $row['authentication_string'],\n\t\t\t\t\t\t'hosts' => array()\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t\t$allsqlusers[$row['User']]['hosts'][] = $row['Host'];\n\t\t\t} else {\n\t\t\t\t$allsqlusers[] = $row['User'];\n\t\t\t}\n\t\t}\n\t\treturn $allsqlusers;\n\t}\n}\n"], "filenames": ["lib/Froxlor/Database/Manager/DbManagerMySQL.php"], "buggy_code_start_loc": [63], "buggy_code_end_loc": [64], "fixing_code_start_loc": [63], "fixing_code_end_loc": [67], "type": "CWE-89", "message": "Froxlor through 0.10.29.1 allows SQL injection in Database/Manager/DbManagerMySQL.php via a custom DB name.", "other": {"cve": {"id": "CVE-2021-42325", "sourceIdentifier": "cve@mitre.org", "published": "2021-10-12T20:15:07.617", "lastModified": "2021-11-26T21:03:04.953", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Froxlor through 0.10.29.1 allows SQL injection in Database/Manager/DbManagerMySQL.php via a custom DB name."}, {"lang": "es", "value": "Froxlor versiones hasta 0.10.29.1, permite una inyecci\u00f3n SQL en el archivo Database/Manager/DbManagerMySQL.php por medio de un nombre de base de datos personalizado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:froxlor:froxlor:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.10.30", "matchCriteriaId": "BD72399A-F69E-462C-AF85-050A88737ED6"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/164800/Froxlor-0.10.29.1-SQL-Injection.html", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/Froxlor/Froxlor/commit/eb592340b022298f62a0a3e8450dbfbe29585782", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.exploit-db.com/exploits/50502", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}]}, "github_commit_url": "https://github.com/Froxlor/Froxlor/commit/eb592340b022298f62a0a3e8450dbfbe29585782"}}