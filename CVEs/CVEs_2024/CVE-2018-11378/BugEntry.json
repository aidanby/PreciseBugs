{"buggy_code": ["/* radare - LGPL - Copyright 2017 - pancake, cgvwzq */\n\n// http://webassembly.org/docs/binary-encoding/#module-structure\n\n#include <r_asm.h>\n#include <r_lib.h>\n#include <string.h>\n\n#include \"../../asm/arch/wasm/wasm.h\"\n#include \"../../bin/format/wasm/wasm.h\"\n\nstatic WasmOpDef opcodes[256] = {\n\t[WASM_OP_TRAP] = { \"trap\", 1, 1 },\n\t[WASM_OP_NOP] = { \"nop\", 1, 1 },\n\t[WASM_OP_BLOCK] = { \"block\", 2, 2 },\n\t[WASM_OP_LOOP] = { \"loop\", 2, 2 },\n\t[WASM_OP_IF] = { \"if\", 2, 2 },\n\t[WASM_OP_ELSE] = { \"else\", 1, 1 },\n\t[WASM_OP_END] = { \"end\", 1, 1 },\n\t[WASM_OP_BR] = { \"br\", 2, 2 },\n\t[WASM_OP_BRIF] = { \"br_if\", 2, 2 },\n\t[WASM_OP_BRTABLE] = { \"brtable\", 3, 0 },\n\t[WASM_OP_RETURN] = { \"return\", 1, 1 },\n\t[WASM_OP_CALL] = { \"call\" , 2, 2 },\n\t[WASM_OP_CALLINDIRECT] = { \"call_indirect\", 3, 3 },\n\t[WASM_OP_DROP] = { \"drop\", 1, 1 },\n\t[WASM_OP_SELECT] = { \"select\", 1, 1 },\n\t[WASM_OP_GETLOCAL] = { \"get_local\", 2, 2 },\n\t[WASM_OP_SETLOCAL] = { \"set_local\", 2, 2 },\n\t[WASM_OP_TEELOCAL] = { \"tee_local\", 2, 2 },\n\t[WASM_OP_GETGLOBAL] = { \"get_global\", 2, 2 },\n\t[WASM_OP_SETGLOBAL] = { \"set_global\", 2, 2 },\n\t[WASM_OP_I32LOAD] = { \"i32.load\", 3, 3 },\n\t[WASM_OP_I64LOAD] = { \"i64.load\", 3, 3 },\n\t[WASM_OP_F32LOAD] = { \"f32.load\", 3, 3 },\n\t[WASM_OP_F64LOAD] = { \"f64.load\", 3, 3 },\n\t[WASM_OP_I32LOAD8S] = { \"i32.load8_s\", 3, 3 },\n\t[WASM_OP_I32LOAD8U] = { \"i32.load8_u\", 3, 3 },\n\t[WASM_OP_I32LOAD16S] = { \"i32.load16_s\", 3, 3 },\n\t[WASM_OP_I32LOAD16U] = { \"i32.load_16_u\", 3, 3 },\n\t[WASM_OP_I64LOAD8S] = { \"i64.load8_s\", 3, 3 },\n\t[WASM_OP_I64LOAD8U] = { \"i64.load8_u\", 3, 3 },\n\t[WASM_OP_I64LOAD16S] = { \"i64.load16_s\", 3, 3 },\n\t[WASM_OP_I64LOAD16U] = { \"i64.load16_u\", 3, 3 },\n\t[WASM_OP_I64LOAD32S] = { \"i64.load32_s\", 3, 3 },\n\t[WASM_OP_I64LOAD32U] = { \"i64.load32_u\", 3, 3 },\n\t[WASM_OP_I32STORE] = { \"i32.store\", 3, 3 },\n\t[WASM_OP_I64STORE] = { \"i64.store\", 3, 3 },\n\t[WASM_OP_F32STORE] = { \"f32.store\", 3, 3 },\n\t[WASM_OP_F64STORE] = { \"f64.store\", 3, 3 },\n\t[WASM_OP_I32STORE8] = { \"i32.store8\", 3, 3 },\n\t[WASM_OP_I32STORE16] = { \"i32.store16\", 3, 3 },\n\t[WASM_OP_I64STORE8] = { \"i64.store8\", 3, 3 },\n\t[WASM_OP_I64STORE16] = { \"i64.store16\", 3, 3 },\n\t[WASM_OP_I64STORE32] = { \"i64.store32\", 3, 3 },\n\t[WASM_OP_CURRENTMEMORY] = { \"current_memory\", 2, 2 },\n\t[WASM_OP_GROWMEMORY] = { \"grow_memory\", 2, 2 },\n\t[WASM_OP_I32CONST] = { \"i32.const\", 2, 2 },\n\t[WASM_OP_I64CONST] = { \"i64.const\", 2, 2 },\n\t[WASM_OP_F32CONST] = { \"f32.const\", 2, 2 },\n\t[WASM_OP_F64CONST] = { \"f64.const\", 2, 2 },\n\t[WASM_OP_I32EQZ] = { \"i32.eqz\", 1, 1 },\n\t[WASM_OP_I32EQ] = { \"i32.eq\", 1, 1 },\n\t[WASM_OP_I32NE] = { \"i32.ne\", 1, 1},\n\t[WASM_OP_I32LTS] = { \"i32.lt_s\", 1, 1 },\n\t[WASM_OP_I32LTU] = { \"i32.lt_u\", 1, 1 },\n\t[WASM_OP_I32GTS] = { \"i32.gt_s\", 1, 1 },\n\t[WASM_OP_I32GTU] = { \"i32.gt_u\", 1, 1 },\n\t[WASM_OP_I32LES] = { \"i32.le_s\", 1, 1 },\n\t[WASM_OP_I32LEU] = { \"i32.le_u\", 1, 1 },\n\t[WASM_OP_I32GES] = { \"i32.ge_s\", 1, 1 },\n\t[WASM_OP_I32GEU] = { \"i32.ge_u\", 1, 1 },\n\t[WASM_OP_I64EQZ] = { \"i64.eqz\", 1, 1 },\n\t[WASM_OP_I64EQ] = {\" i64.eq\", 1, 1 },\n\t[WASM_OP_I64NE] = {\" i64.ne\", 1, 1 },\n\t[WASM_OP_I64LTS] = { \"i64.lt_s\", 1, 1 },\n\t[WASM_OP_I64LTU] = { \"i64.lt_u\", 1, 1 },\n\t[WASM_OP_I64GTS] = { \"i64.gt_s\", 1, 1 },\n\t[WASM_OP_I64GTU] = { \"i64.gt_u\", 1, 1 },\n\t[WASM_OP_I64LES] = { \"i64.le_s\", 1, 1 },\n\t[WASM_OP_I64LEU] = { \"i64.le_u\", 1, 1 },\n\t[WASM_OP_I64GES] = { \"i64.ge_s\", 1, 1 },\n\t[WASM_OP_I64GEU] = { \"i64.ge_u\", 1, 1 },\n\t[WASM_OP_F32EQ] = { \"f32.eq\", 1, 1 },\n\t[WASM_OP_F32NE] = { \"f32.ne\", 1, 1 },\n\t[WASM_OP_F32LT] = { \"f32.lt\", 1, 1 },\n\t[WASM_OP_F32GT] = { \"f32.gt\", 1, 1 },\n\t[WASM_OP_F32LE] = { \"f32.le\", 1, 1 },\n\t[WASM_OP_F32GE] = { \"f32.ge\", 1, 1 },\n\t[WASM_OP_F64EQ] = { \"f64.eq\", 1, 1 },\n\t[WASM_OP_F64NE] = { \"f64.ne\", 1, 1 },\n\t[WASM_OP_F64LT] = { \"f64.lt\", 1, 1 },\n\t[WASM_OP_F64GT] = { \"f64.gt\", 1, 1 },\n\t[WASM_OP_F64LE] = { \"f64.le\", 1, 1 },\n\t[WASM_OP_F64GE] = { \"f64.ge\", 1, 1 },\n\t[WASM_OP_I32CLZ] = { \"i32.clz\", 1, 1 },\n\t[WASM_OP_I32CTZ] = { \"i32.ctz\", 1, 1 },\n\t[WASM_OP_I32POPCNT] = { \"i32.popcnt\", 1, 1 },\n\t[WASM_OP_I32ADD] = { \"i32.add\", 1, 1 },\n\t[WASM_OP_I32SUB] = { \"i32.sub\", 1, 1 },\n\t[WASM_OP_I32MUL] = { \"i32.mul\", 1, 1 },\n\t[WASM_OP_I32DIVS] = { \"i32.div_s\", 1, 1 },\n\t[WASM_OP_I32DIVU] = { \"i32.div_u\", 1, 1 },\n\t[WASM_OP_I32REMS] = { \"i32.rem_s\", 1, 1 },\n\t[WASM_OP_I32REMU] = { \"i32.rem_u\", 1, 1 },\n\t[WASM_OP_I32AND] = { \"i32.and\", 1, 1 },\n\t[WASM_OP_I32OR] = { \"i32.or\", 1, 1 },\n\t[WASM_OP_I32XOR] = { \"i32.xor\", 1, 1 },\n\t[WASM_OP_I32SHL] = { \"i32.shl\", 1, 1 },\n\t[WASM_OP_I32SHRS] = { \"i32.shr_s\", 1, 1 },\n\t[WASM_OP_I32SHRU] = { \"i32.shr_u\", 1, 1 },\n\t[WASM_OP_I32ROTL] = { \"i32.rotl\", 1, 1 },\n\t[WASM_OP_I32ROTR] = { \"i32.rotr\", 1, 1 },\n\t[WASM_OP_I64CLZ] = { \"i64.clz\", 1, 1 },\n\t[WASM_OP_I64CTZ] = { \"i64.ctz\", 1, 1 },\n\t[WASM_OP_I64POPCNT] = { \"i64.popcnt\", 1, 1 },\n\t[WASM_OP_I64ADD] = { \"i64.add\", 1, 1 },\n\t[WASM_OP_I64SUB] = { \"i64.sub\", 1, 1 },\n\t[WASM_OP_I64MUL] = { \"i64.mul\", 1, 1 },\n\t[WASM_OP_I64DIVS] = { \"i64.div_s\", 1, 1 },\n\t[WASM_OP_I64DIVU] = { \"i64.div_u\", 1, 1 },\n\t[WASM_OP_I64REMS] = { \"i64.rem_s\", 1, 1 },\n\t[WASM_OP_I64REMU] = { \"i64.rem_u\", 1, 1 },\n\t[WASM_OP_I64AND] = { \"i64.and\", 1, 1 },\n\t[WASM_OP_I64OR] = { \"i64.or\", 1, 1 },\n\t[WASM_OP_I64XOR] = { \"i64.xor\", 1, 1 },\n\t[WASM_OP_I64SHL] = { \"i64.shl\", 1, 1 },\n\t[WASM_OP_I64SHRS] = { \"i64.shr_s\", 1, 1 },\n\t[WASM_OP_I64SHRU] = { \"i64.shr_u\", 1, 1 },\n\t[WASM_OP_I64ROTL] = { \"i64.rotl\", 1, 1 },\n\t[WASM_OP_I64ROTR] = { \"i64.rotr\", 1, 1 },\n\t[WASM_OP_F32ABS] = { \"f32.abs\", 1, 1 },\n\t[WASM_OP_F32NEG] = { \"f32.neg\", 1, 1 },\n\t[WASM_OP_F32CEIL] = { \"f32.ceil\", 1, 1 },\n\t[WASM_OP_F32FLOOR] = { \"f32.floor\", 1, 1 },\n\t[WASM_OP_F32TRUNC] = { \"f32.trunc\", 1, 1 },\n\t[WASM_OP_F32NEAREST] = { \"f32.nearest\", 1, 1 },\n\t[WASM_OP_F32SQRT] = { \"f32.sqrt\", 1, 1 },\n\t[WASM_OP_F32ADD] = { \"f32.add\", 1, 1 },\n\t[WASM_OP_F32SUB] =  { \"f32.sub\", 1, 1 },\n\t[WASM_OP_F32MUL] = { \"f32.mul\", 1, 1 },\n\t[WASM_OP_F32DIV] = { \"f32.div\", 1, 1 },\n\t[WASM_OP_F32MIN] = { \"f32.min\", 1, 1 },\n\t[WASM_OP_F32MAX] = { \"f32.max\", 1, 1 },\n\t[WASM_OP_F32COPYSIGN] = {\" f32.copysign\", 1, 1 },\n\t[WASM_OP_F64ABS] = { \"f64.abs\", 1, 1 },\n\t[WASM_OP_F64NEG] = { \"f64.neg\", 1, 1 },\n\t[WASM_OP_F64CEIL] = { \"f64.ceil\", 1, 1 },\n\t[WASM_OP_F64FLOOR] = { \"f64.floor\", 1, 1 },\n\t[WASM_OP_F64TRUNC] = { \"f64.trunc\", 1, 1 },\n\t[WASM_OP_F64NEAREST] = { \"f64.nearest\", 1, 1 },\n\t[WASM_OP_F64SQRT] = { \"f64.sqrt\", 1, 1 },\n\t[WASM_OP_F64ADD] = { \"f64.add\", 1, 1 },\n\t[WASM_OP_F64SUB] = { \"f64.sub\", 1, 1 },\n\t[WASM_OP_F64MUL] = { \"f64.mul\", 1, 1 },\n\t[WASM_OP_F64DIV] = { \"f64.div\", 1, 1 },\n\t[WASM_OP_F64MIN] = { \"f64.min\", 1, 1 },\n\t[WASM_OP_F64MAX] = { \"f64.max\", 1, 1 },\n\t[WASM_OP_F64COPYSIGN] = { \"f64.copysign\", 1, 1 },\n\t[WASM_OP_I32WRAPI64] = { \"i32.wrap/i64\", 1, 1 },\n\t[WASM_OP_I32TRUNCSF32] = { \"i32.trunc_s/f32\", 1, 1 },\n\t[WASM_OP_I32TRUNCUF32] = { \"i32.trunc_u/f32\", 1, 1 },\n\t[WASM_OP_I32TRUNCSF64] = { \"i32.trunc_s/f64\", 1, 1 },\n\t[WASM_OP_I32TRUNCUF64] = { \"i32.trunc_u/f64\", 1, 1 },\n\t[WASM_OP_I64EXTENDSI32] = { \"i64.extend_s/i32\", 1, 1 },\n\t[WASM_OP_I64EXTENDUI32] = { \"i64.extend_u/i32\", 1, 1 },\n\t[WASM_OP_I64TRUNCSF32] = { \"i64.trunc_s/f32\", 1, 1 },\n\t[WASM_OP_I64TRUNCUF32] = { \"i64.trunc_u/f32\", 1, 1 },\n\t[WASM_OP_I64TRUNCSF64] = { \"i64.trunc_s/f64\", 1, 1 },\n\t[WASM_OP_I64TRUNCUF64] = { \"i64.trunc_u/f64\", 1, 1 },\n\t[WASM_OP_F32CONVERTSI32] = { \"f32.convert_s/i32\", 1, 1 },\n\t[WASM_OP_F32CONVERTUI32] = { \"f32.convert_u/i32\", 1, 1 },\n\t[WASM_OP_F32CONVERTSI64] = { \"f32.convert_s/i64\", 1, 1 },\n\t[WASM_OP_F32CONVERTUI64] = { \"f32.convert_u/i64\", 1, 1 },\n\t[WASM_OP_F32DEMOTEF64] = { \"f32.demote/f64\", 1, 1 },\n\t[WASM_OP_F64CONVERTSI32] = { \"f64.convert_s/i32\", 1, 1 },\n\t[WASM_OP_F64CONVERTUI32] = { \"f64.convert_u/i32\", 1, 1 },\n\t[WASM_OP_F64CONVERTSI64] = { \"f64.convert_s/i64\", 1, 1 },\n\t[WASM_OP_F64CONVERTUI64] = { \"f64.convert_u/i64\", 1, 1 },\n\t[WASM_OP_F64PROMOTEF32] = { \"f64.promote/f32\", 1, 1 },\n\t[WASM_OP_I32REINTERPRETF32] = { \"i32.reinterpret/f32\", 1, 1 },\n\t[WASM_OP_I64REINTERPRETF64] = { \"i64.reinterpret/f64\", 1, 1 },\n\t[WASM_OP_F32REINTERPRETI32] = { \"f32.reinterpret/i32\", 1, 1 },\n\t[WASM_OP_F64REINTERPRETI64] = { \"f64/reinterpret/i64\", 1, 1 }\n};\n\nint wasm_asm(const char *str, unsigned char *buf, int buf_len) {\n\t// TODO: add immediates assembly\n\tint i = 0, len = -1;\n\tchar tmp[R_ASM_BUFSIZE];\n\twhile (str[i] != ' ' && i < buf_len) {\n\t\ttmp[i] = str[i];\n\t\ti++;\n\t}\n\ttmp[i] = 0;\n\tfor (i = 0; i < 0xff; i++) {\n\t\tWasmOpDef *opdef = &opcodes[i];\n\t\tif (opdef->txt) {\n\t\t\tif (!strcmp (opdef->txt, tmp)) {\n\t\t\t\tbuf[0] = i;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn len;\n}\n\nint wasm_dis(WasmOp *op, const unsigned char *buf, int buf_len) {\n\top->len = 1;\n\top->op = buf[0];\n\tif (op->op > 0xbf) {\n\t\treturn 1;\n\t}\n\t// add support for extension opcodes (SIMD + atomics)\n\tWasmOpDef *opdef = &opcodes[op->op];\n\tswitch (op->op) {\n\tcase WASM_OP_TRAP:\n\tcase WASM_OP_NOP:\n\tcase WASM_OP_ELSE:\n\tcase WASM_OP_RETURN:\n\tcase WASM_OP_DROP:\n\tcase WASM_OP_SELECT:\n\tcase WASM_OP_I32EQZ:\n\tcase WASM_OP_I32EQ:\n\tcase WASM_OP_I32NE:\n\tcase WASM_OP_I32LTS:\n\tcase WASM_OP_I32LTU:\n\tcase WASM_OP_I32GTS:\n\tcase WASM_OP_I32GTU:\n\tcase WASM_OP_I32LES:\n\tcase WASM_OP_I32LEU:\n\tcase WASM_OP_I32GES:\n\tcase WASM_OP_I32GEU:\n\tcase WASM_OP_I64EQZ:\n\tcase WASM_OP_I64EQ:\n\tcase WASM_OP_I64NE:\n\tcase WASM_OP_I64LTS:\n\tcase WASM_OP_I64LTU:\n\tcase WASM_OP_I64GTS:\n\tcase WASM_OP_I64GTU:\n\tcase WASM_OP_I64LES:\n\tcase WASM_OP_I64LEU:\n\tcase WASM_OP_I64GES:\n\tcase WASM_OP_I64GEU:\n\tcase WASM_OP_F32EQ:\n\tcase WASM_OP_F32NE:\n\tcase WASM_OP_F32LT:\n\tcase WASM_OP_F32GT:\n\tcase WASM_OP_F32LE:\n\tcase WASM_OP_F32GE:\n\tcase WASM_OP_F64EQ:\n\tcase WASM_OP_F64NE:\n\tcase WASM_OP_F64LT:\n\tcase WASM_OP_F64GT:\n\tcase WASM_OP_F64LE:\n\tcase WASM_OP_F64GE:\n\tcase WASM_OP_I32CLZ:\n\tcase WASM_OP_I32CTZ:\n\tcase WASM_OP_I32POPCNT:\n\tcase WASM_OP_I32ADD:\n\tcase WASM_OP_I32SUB:\n\tcase WASM_OP_I32MUL:\n\tcase WASM_OP_I32DIVS:\n\tcase WASM_OP_I32DIVU:\n\tcase WASM_OP_I32REMS:\n\tcase WASM_OP_I32REMU:\n\tcase WASM_OP_I32AND:\n\tcase WASM_OP_I32OR:\n\tcase WASM_OP_I32XOR:\n\tcase WASM_OP_I32SHL:\n\tcase WASM_OP_I32SHRS:\n\tcase WASM_OP_I32SHRU:\n\tcase WASM_OP_I32ROTL:\n\tcase WASM_OP_I32ROTR:\n\tcase WASM_OP_I64CLZ:\n\tcase WASM_OP_I64CTZ:\n\tcase WASM_OP_I64POPCNT:\n\tcase WASM_OP_I64ADD:\n\tcase WASM_OP_I64SUB:\n\tcase WASM_OP_I64MUL:\n\tcase WASM_OP_I64DIVS:\n\tcase WASM_OP_I64DIVU:\n\tcase WASM_OP_I64REMS:\n\tcase WASM_OP_I64REMU:\n\tcase WASM_OP_I64AND:\n\tcase WASM_OP_I64OR:\n\tcase WASM_OP_I64XOR:\n\tcase WASM_OP_I64SHL:\n\tcase WASM_OP_I64SHRS:\n\tcase WASM_OP_I64SHRU:\n\tcase WASM_OP_I64ROTL:\n\tcase WASM_OP_I64ROTR:\n\tcase WASM_OP_F32ABS:\n\tcase WASM_OP_F32NEG:\n\tcase WASM_OP_F32CEIL:\n\tcase WASM_OP_F32FLOOR:\n\tcase WASM_OP_F32TRUNC:\n\tcase WASM_OP_F32NEAREST:\n\tcase WASM_OP_F32SQRT:\n\tcase WASM_OP_F32ADD:\n\tcase WASM_OP_F32SUB:\n\tcase WASM_OP_F32MUL:\n\tcase WASM_OP_F32DIV:\n\tcase WASM_OP_F32MIN:\n\tcase WASM_OP_F32MAX:\n\tcase WASM_OP_F32COPYSIGN:\n\tcase WASM_OP_F64ABS:\n\tcase WASM_OP_F64NEG:\n\tcase WASM_OP_F64CEIL:\n\tcase WASM_OP_F64FLOOR:\n\tcase WASM_OP_F64TRUNC:\n\tcase WASM_OP_F64NEAREST:\n\tcase WASM_OP_F64SQRT:\n\tcase WASM_OP_F64ADD:\n\tcase WASM_OP_F64SUB:\n\tcase WASM_OP_F64MUL:\n\tcase WASM_OP_F64DIV:\n\tcase WASM_OP_F64MIN:\n\tcase WASM_OP_F64MAX:\n\tcase WASM_OP_F64COPYSIGN:\n\tcase WASM_OP_I32WRAPI64:\n\tcase WASM_OP_I32TRUNCSF32:\n\tcase WASM_OP_I32TRUNCUF32:\n\tcase WASM_OP_I32TRUNCSF64:\n\tcase WASM_OP_I32TRUNCUF64:\n\tcase WASM_OP_I64EXTENDSI32:\n\tcase WASM_OP_I64EXTENDUI32:\n\tcase WASM_OP_I64TRUNCSF32:\n\tcase WASM_OP_I64TRUNCUF32:\n\tcase WASM_OP_I64TRUNCSF64:\n\tcase WASM_OP_I64TRUNCUF64:\n\tcase WASM_OP_F32CONVERTSI32:\n\tcase WASM_OP_F32CONVERTUI32:\n\tcase WASM_OP_F32CONVERTSI64:\n\tcase WASM_OP_F32CONVERTUI64:\n\tcase WASM_OP_F32DEMOTEF64:\n\tcase WASM_OP_F64CONVERTSI32:\n\tcase WASM_OP_F64CONVERTUI32:\n\tcase WASM_OP_F64CONVERTSI64:\n\tcase WASM_OP_F64CONVERTUI64:\n\tcase WASM_OP_F64PROMOTEF32:\n\tcase WASM_OP_I32REINTERPRETF32:\n\tcase WASM_OP_I64REINTERPRETF64:\n\tcase WASM_OP_F32REINTERPRETI32:\n\tcase WASM_OP_F64REINTERPRETI64:\n\tcase WASM_OP_END:\n\t\t{\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s\", opdef->txt);\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_BLOCK:\n\tcase WASM_OP_LOOP:\n\tcase WASM_OP_IF:\n\t\t{\n\t\t\tst32 val = 0;\n\t\t\tsize_t n = read_i32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tswitch (0x80 - val) {\n\t\t\tcase R_BIN_WASM_VALUETYPE_EMPTY:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tcase R_BIN_WASM_VALUETYPE_i32:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result i32)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tcase R_BIN_WASM_VALUETYPE_i64:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result i64)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tcase R_BIN_WASM_VALUETYPE_f32:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result f32)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tcase R_BIN_WASM_VALUETYPE_f64:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result f64)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result ?)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_BR:\n\tcase WASM_OP_BRIF:\n\tcase WASM_OP_CALL:\n\t\t{\n\t\t\tut32 val = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d\", opdef->txt, val);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_BRTABLE:\n\t\t{\n\t\t\tut32 count = 0, *table = NULL, def = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &count);\n\t\t\tif (!(n > 0 && n < buf_len)) {\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif (!(table = calloc (count, sizeof (ut32)))) {\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tint i = 0;\n\t\t\top->len += n;\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &table[i]);\n\t\t\t\tif (!(op->len + n <= buf_len)) {\n\t\t\t\t\tgoto beach;\n\t\t\t\t}\n\t\t\t\top->len += n;\n\t\t\t}\n\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &def);\n\t\t\tif (!(n > 0 && n + op->len < buf_len)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\top->len += n;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d \", opdef->txt, count);\n\t\t\tfor (i = 0; i < count && strlen (op->txt) + 10 < R_ASM_BUFSIZE; i++) {\n\t\t\t\tint optxtlen = strlen (op->txt);\n\t\t\t\tsnprintf (op->txt + optxtlen, R_ASM_BUFSIZE - optxtlen, \"%d \", table[i]);\n\t\t\t}\n\t\t\tsnprintf (op->txt + strlen (op->txt), R_ASM_BUFSIZE, \"%d\", def);\n\t\t\tfree (table);\n\t\t\tbreak;\n\t\t\tbeach:\n\t\t\tfree (table);\n\t\t\tgoto err;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_CALLINDIRECT:\n\t\t{\n\t\t\tut32 val = 0, reserved = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\top->len += n;\n\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &reserved);\n\t\t\tif (!(n == 1 && op->len + n <= buf_len)) goto err;\n\t\t\treserved &= 0x1;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d %d\", opdef->txt, val, reserved);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_GETLOCAL:\n\tcase WASM_OP_SETLOCAL:\n\tcase WASM_OP_TEELOCAL:\n\tcase WASM_OP_GETGLOBAL:\n\tcase WASM_OP_SETGLOBAL:\n\t\t{\n\t\t\tut32 val = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d\", opdef->txt, val);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_I32LOAD:\n\tcase WASM_OP_I64LOAD:\n\tcase WASM_OP_F32LOAD:\n\tcase WASM_OP_F64LOAD:\n\tcase WASM_OP_I32LOAD8S:\n\tcase WASM_OP_I32LOAD8U:\n\tcase WASM_OP_I32LOAD16S:\n\tcase WASM_OP_I32LOAD16U:\n\tcase WASM_OP_I64LOAD8S:\n\tcase WASM_OP_I64LOAD8U:\n\tcase WASM_OP_I64LOAD16S:\n\tcase WASM_OP_I64LOAD16U:\n\tcase WASM_OP_I64LOAD32S:\n\tcase WASM_OP_I64LOAD32U:\n\tcase WASM_OP_I32STORE:\n\tcase WASM_OP_I64STORE:\n\tcase WASM_OP_F32STORE:\n\tcase WASM_OP_F64STORE:\n\tcase WASM_OP_I32STORE8:\n\tcase WASM_OP_I32STORE16:\n\tcase WASM_OP_I64STORE8:\n\tcase WASM_OP_I64STORE16:\n\tcase WASM_OP_I64STORE32:\n\t\t{\n\t\t\tut32 flag = 0, offset = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &flag);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\top->len += n;\n\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &offset);\n\t\t\tif (!(n > 0 && op->len + n <= buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d %d\", opdef->txt, flag, offset);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_CURRENTMEMORY:\n\tcase WASM_OP_GROWMEMORY:\n\t\t{\n\t\t\tut32 reserved = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &reserved);\n\t\t\tif (!(n == 1 && n < buf_len)) goto err;\n\t\t\treserved &= 0x1;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d\", opdef->txt, reserved);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\n\tcase WASM_OP_I32CONST:\n\t\t{\n\t\t\tst32 val = 0;\n\t\t\tsize_t n = read_i32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %\" PFMT32d, opdef->txt, val);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_I64CONST:\n\t\t{\n\t\t\tst64 val = 0;\n\t\t\tsize_t n = read_i64_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %\" PFMT64d, opdef->txt, val);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_F32CONST:\n\t\t{\n\t\t\tut32 val = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tlong double d =  (long double)val;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %\" LDBLFMT, opdef->txt, d);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_F64CONST:\n\t\t{\n\t\t\tut64 val = 0;\n\t\t\tsize_t n = read_u64_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tlong double d =  (long double)val;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %\" LDBLFMT, opdef->txt, d);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tgoto err;\n\t}\n\n\treturn op->len;\n\nerr:\n\top->len = 1;\n\tsnprintf (op->txt, R_ASM_BUFSIZE, \"invalid\");\n\treturn op->len;\n}\n"], "fixing_code": ["/* radare - LGPL - Copyright 2017 - pancake, cgvwzq */\n\n// http://webassembly.org/docs/binary-encoding/#module-structure\n\n#include <r_asm.h>\n#include <r_lib.h>\n#include <string.h>\n\n#include \"../../asm/arch/wasm/wasm.h\"\n#include \"../../bin/format/wasm/wasm.h\"\n\nstatic WasmOpDef opcodes[256] = {\n\t[WASM_OP_TRAP] = { \"trap\", 1, 1 },\n\t[WASM_OP_NOP] = { \"nop\", 1, 1 },\n\t[WASM_OP_BLOCK] = { \"block\", 2, 2 },\n\t[WASM_OP_LOOP] = { \"loop\", 2, 2 },\n\t[WASM_OP_IF] = { \"if\", 2, 2 },\n\t[WASM_OP_ELSE] = { \"else\", 1, 1 },\n\t[WASM_OP_END] = { \"end\", 1, 1 },\n\t[WASM_OP_BR] = { \"br\", 2, 2 },\n\t[WASM_OP_BRIF] = { \"br_if\", 2, 2 },\n\t[WASM_OP_BRTABLE] = { \"brtable\", 3, 0 },\n\t[WASM_OP_RETURN] = { \"return\", 1, 1 },\n\t[WASM_OP_CALL] = { \"call\" , 2, 2 },\n\t[WASM_OP_CALLINDIRECT] = { \"call_indirect\", 3, 3 },\n\t[WASM_OP_DROP] = { \"drop\", 1, 1 },\n\t[WASM_OP_SELECT] = { \"select\", 1, 1 },\n\t[WASM_OP_GETLOCAL] = { \"get_local\", 2, 2 },\n\t[WASM_OP_SETLOCAL] = { \"set_local\", 2, 2 },\n\t[WASM_OP_TEELOCAL] = { \"tee_local\", 2, 2 },\n\t[WASM_OP_GETGLOBAL] = { \"get_global\", 2, 2 },\n\t[WASM_OP_SETGLOBAL] = { \"set_global\", 2, 2 },\n\t[WASM_OP_I32LOAD] = { \"i32.load\", 3, 3 },\n\t[WASM_OP_I64LOAD] = { \"i64.load\", 3, 3 },\n\t[WASM_OP_F32LOAD] = { \"f32.load\", 3, 3 },\n\t[WASM_OP_F64LOAD] = { \"f64.load\", 3, 3 },\n\t[WASM_OP_I32LOAD8S] = { \"i32.load8_s\", 3, 3 },\n\t[WASM_OP_I32LOAD8U] = { \"i32.load8_u\", 3, 3 },\n\t[WASM_OP_I32LOAD16S] = { \"i32.load16_s\", 3, 3 },\n\t[WASM_OP_I32LOAD16U] = { \"i32.load_16_u\", 3, 3 },\n\t[WASM_OP_I64LOAD8S] = { \"i64.load8_s\", 3, 3 },\n\t[WASM_OP_I64LOAD8U] = { \"i64.load8_u\", 3, 3 },\n\t[WASM_OP_I64LOAD16S] = { \"i64.load16_s\", 3, 3 },\n\t[WASM_OP_I64LOAD16U] = { \"i64.load16_u\", 3, 3 },\n\t[WASM_OP_I64LOAD32S] = { \"i64.load32_s\", 3, 3 },\n\t[WASM_OP_I64LOAD32U] = { \"i64.load32_u\", 3, 3 },\n\t[WASM_OP_I32STORE] = { \"i32.store\", 3, 3 },\n\t[WASM_OP_I64STORE] = { \"i64.store\", 3, 3 },\n\t[WASM_OP_F32STORE] = { \"f32.store\", 3, 3 },\n\t[WASM_OP_F64STORE] = { \"f64.store\", 3, 3 },\n\t[WASM_OP_I32STORE8] = { \"i32.store8\", 3, 3 },\n\t[WASM_OP_I32STORE16] = { \"i32.store16\", 3, 3 },\n\t[WASM_OP_I64STORE8] = { \"i64.store8\", 3, 3 },\n\t[WASM_OP_I64STORE16] = { \"i64.store16\", 3, 3 },\n\t[WASM_OP_I64STORE32] = { \"i64.store32\", 3, 3 },\n\t[WASM_OP_CURRENTMEMORY] = { \"current_memory\", 2, 2 },\n\t[WASM_OP_GROWMEMORY] = { \"grow_memory\", 2, 2 },\n\t[WASM_OP_I32CONST] = { \"i32.const\", 2, 2 },\n\t[WASM_OP_I64CONST] = { \"i64.const\", 2, 2 },\n\t[WASM_OP_F32CONST] = { \"f32.const\", 2, 2 },\n\t[WASM_OP_F64CONST] = { \"f64.const\", 2, 2 },\n\t[WASM_OP_I32EQZ] = { \"i32.eqz\", 1, 1 },\n\t[WASM_OP_I32EQ] = { \"i32.eq\", 1, 1 },\n\t[WASM_OP_I32NE] = { \"i32.ne\", 1, 1},\n\t[WASM_OP_I32LTS] = { \"i32.lt_s\", 1, 1 },\n\t[WASM_OP_I32LTU] = { \"i32.lt_u\", 1, 1 },\n\t[WASM_OP_I32GTS] = { \"i32.gt_s\", 1, 1 },\n\t[WASM_OP_I32GTU] = { \"i32.gt_u\", 1, 1 },\n\t[WASM_OP_I32LES] = { \"i32.le_s\", 1, 1 },\n\t[WASM_OP_I32LEU] = { \"i32.le_u\", 1, 1 },\n\t[WASM_OP_I32GES] = { \"i32.ge_s\", 1, 1 },\n\t[WASM_OP_I32GEU] = { \"i32.ge_u\", 1, 1 },\n\t[WASM_OP_I64EQZ] = { \"i64.eqz\", 1, 1 },\n\t[WASM_OP_I64EQ] = {\" i64.eq\", 1, 1 },\n\t[WASM_OP_I64NE] = {\" i64.ne\", 1, 1 },\n\t[WASM_OP_I64LTS] = { \"i64.lt_s\", 1, 1 },\n\t[WASM_OP_I64LTU] = { \"i64.lt_u\", 1, 1 },\n\t[WASM_OP_I64GTS] = { \"i64.gt_s\", 1, 1 },\n\t[WASM_OP_I64GTU] = { \"i64.gt_u\", 1, 1 },\n\t[WASM_OP_I64LES] = { \"i64.le_s\", 1, 1 },\n\t[WASM_OP_I64LEU] = { \"i64.le_u\", 1, 1 },\n\t[WASM_OP_I64GES] = { \"i64.ge_s\", 1, 1 },\n\t[WASM_OP_I64GEU] = { \"i64.ge_u\", 1, 1 },\n\t[WASM_OP_F32EQ] = { \"f32.eq\", 1, 1 },\n\t[WASM_OP_F32NE] = { \"f32.ne\", 1, 1 },\n\t[WASM_OP_F32LT] = { \"f32.lt\", 1, 1 },\n\t[WASM_OP_F32GT] = { \"f32.gt\", 1, 1 },\n\t[WASM_OP_F32LE] = { \"f32.le\", 1, 1 },\n\t[WASM_OP_F32GE] = { \"f32.ge\", 1, 1 },\n\t[WASM_OP_F64EQ] = { \"f64.eq\", 1, 1 },\n\t[WASM_OP_F64NE] = { \"f64.ne\", 1, 1 },\n\t[WASM_OP_F64LT] = { \"f64.lt\", 1, 1 },\n\t[WASM_OP_F64GT] = { \"f64.gt\", 1, 1 },\n\t[WASM_OP_F64LE] = { \"f64.le\", 1, 1 },\n\t[WASM_OP_F64GE] = { \"f64.ge\", 1, 1 },\n\t[WASM_OP_I32CLZ] = { \"i32.clz\", 1, 1 },\n\t[WASM_OP_I32CTZ] = { \"i32.ctz\", 1, 1 },\n\t[WASM_OP_I32POPCNT] = { \"i32.popcnt\", 1, 1 },\n\t[WASM_OP_I32ADD] = { \"i32.add\", 1, 1 },\n\t[WASM_OP_I32SUB] = { \"i32.sub\", 1, 1 },\n\t[WASM_OP_I32MUL] = { \"i32.mul\", 1, 1 },\n\t[WASM_OP_I32DIVS] = { \"i32.div_s\", 1, 1 },\n\t[WASM_OP_I32DIVU] = { \"i32.div_u\", 1, 1 },\n\t[WASM_OP_I32REMS] = { \"i32.rem_s\", 1, 1 },\n\t[WASM_OP_I32REMU] = { \"i32.rem_u\", 1, 1 },\n\t[WASM_OP_I32AND] = { \"i32.and\", 1, 1 },\n\t[WASM_OP_I32OR] = { \"i32.or\", 1, 1 },\n\t[WASM_OP_I32XOR] = { \"i32.xor\", 1, 1 },\n\t[WASM_OP_I32SHL] = { \"i32.shl\", 1, 1 },\n\t[WASM_OP_I32SHRS] = { \"i32.shr_s\", 1, 1 },\n\t[WASM_OP_I32SHRU] = { \"i32.shr_u\", 1, 1 },\n\t[WASM_OP_I32ROTL] = { \"i32.rotl\", 1, 1 },\n\t[WASM_OP_I32ROTR] = { \"i32.rotr\", 1, 1 },\n\t[WASM_OP_I64CLZ] = { \"i64.clz\", 1, 1 },\n\t[WASM_OP_I64CTZ] = { \"i64.ctz\", 1, 1 },\n\t[WASM_OP_I64POPCNT] = { \"i64.popcnt\", 1, 1 },\n\t[WASM_OP_I64ADD] = { \"i64.add\", 1, 1 },\n\t[WASM_OP_I64SUB] = { \"i64.sub\", 1, 1 },\n\t[WASM_OP_I64MUL] = { \"i64.mul\", 1, 1 },\n\t[WASM_OP_I64DIVS] = { \"i64.div_s\", 1, 1 },\n\t[WASM_OP_I64DIVU] = { \"i64.div_u\", 1, 1 },\n\t[WASM_OP_I64REMS] = { \"i64.rem_s\", 1, 1 },\n\t[WASM_OP_I64REMU] = { \"i64.rem_u\", 1, 1 },\n\t[WASM_OP_I64AND] = { \"i64.and\", 1, 1 },\n\t[WASM_OP_I64OR] = { \"i64.or\", 1, 1 },\n\t[WASM_OP_I64XOR] = { \"i64.xor\", 1, 1 },\n\t[WASM_OP_I64SHL] = { \"i64.shl\", 1, 1 },\n\t[WASM_OP_I64SHRS] = { \"i64.shr_s\", 1, 1 },\n\t[WASM_OP_I64SHRU] = { \"i64.shr_u\", 1, 1 },\n\t[WASM_OP_I64ROTL] = { \"i64.rotl\", 1, 1 },\n\t[WASM_OP_I64ROTR] = { \"i64.rotr\", 1, 1 },\n\t[WASM_OP_F32ABS] = { \"f32.abs\", 1, 1 },\n\t[WASM_OP_F32NEG] = { \"f32.neg\", 1, 1 },\n\t[WASM_OP_F32CEIL] = { \"f32.ceil\", 1, 1 },\n\t[WASM_OP_F32FLOOR] = { \"f32.floor\", 1, 1 },\n\t[WASM_OP_F32TRUNC] = { \"f32.trunc\", 1, 1 },\n\t[WASM_OP_F32NEAREST] = { \"f32.nearest\", 1, 1 },\n\t[WASM_OP_F32SQRT] = { \"f32.sqrt\", 1, 1 },\n\t[WASM_OP_F32ADD] = { \"f32.add\", 1, 1 },\n\t[WASM_OP_F32SUB] =  { \"f32.sub\", 1, 1 },\n\t[WASM_OP_F32MUL] = { \"f32.mul\", 1, 1 },\n\t[WASM_OP_F32DIV] = { \"f32.div\", 1, 1 },\n\t[WASM_OP_F32MIN] = { \"f32.min\", 1, 1 },\n\t[WASM_OP_F32MAX] = { \"f32.max\", 1, 1 },\n\t[WASM_OP_F32COPYSIGN] = {\" f32.copysign\", 1, 1 },\n\t[WASM_OP_F64ABS] = { \"f64.abs\", 1, 1 },\n\t[WASM_OP_F64NEG] = { \"f64.neg\", 1, 1 },\n\t[WASM_OP_F64CEIL] = { \"f64.ceil\", 1, 1 },\n\t[WASM_OP_F64FLOOR] = { \"f64.floor\", 1, 1 },\n\t[WASM_OP_F64TRUNC] = { \"f64.trunc\", 1, 1 },\n\t[WASM_OP_F64NEAREST] = { \"f64.nearest\", 1, 1 },\n\t[WASM_OP_F64SQRT] = { \"f64.sqrt\", 1, 1 },\n\t[WASM_OP_F64ADD] = { \"f64.add\", 1, 1 },\n\t[WASM_OP_F64SUB] = { \"f64.sub\", 1, 1 },\n\t[WASM_OP_F64MUL] = { \"f64.mul\", 1, 1 },\n\t[WASM_OP_F64DIV] = { \"f64.div\", 1, 1 },\n\t[WASM_OP_F64MIN] = { \"f64.min\", 1, 1 },\n\t[WASM_OP_F64MAX] = { \"f64.max\", 1, 1 },\n\t[WASM_OP_F64COPYSIGN] = { \"f64.copysign\", 1, 1 },\n\t[WASM_OP_I32WRAPI64] = { \"i32.wrap/i64\", 1, 1 },\n\t[WASM_OP_I32TRUNCSF32] = { \"i32.trunc_s/f32\", 1, 1 },\n\t[WASM_OP_I32TRUNCUF32] = { \"i32.trunc_u/f32\", 1, 1 },\n\t[WASM_OP_I32TRUNCSF64] = { \"i32.trunc_s/f64\", 1, 1 },\n\t[WASM_OP_I32TRUNCUF64] = { \"i32.trunc_u/f64\", 1, 1 },\n\t[WASM_OP_I64EXTENDSI32] = { \"i64.extend_s/i32\", 1, 1 },\n\t[WASM_OP_I64EXTENDUI32] = { \"i64.extend_u/i32\", 1, 1 },\n\t[WASM_OP_I64TRUNCSF32] = { \"i64.trunc_s/f32\", 1, 1 },\n\t[WASM_OP_I64TRUNCUF32] = { \"i64.trunc_u/f32\", 1, 1 },\n\t[WASM_OP_I64TRUNCSF64] = { \"i64.trunc_s/f64\", 1, 1 },\n\t[WASM_OP_I64TRUNCUF64] = { \"i64.trunc_u/f64\", 1, 1 },\n\t[WASM_OP_F32CONVERTSI32] = { \"f32.convert_s/i32\", 1, 1 },\n\t[WASM_OP_F32CONVERTUI32] = { \"f32.convert_u/i32\", 1, 1 },\n\t[WASM_OP_F32CONVERTSI64] = { \"f32.convert_s/i64\", 1, 1 },\n\t[WASM_OP_F32CONVERTUI64] = { \"f32.convert_u/i64\", 1, 1 },\n\t[WASM_OP_F32DEMOTEF64] = { \"f32.demote/f64\", 1, 1 },\n\t[WASM_OP_F64CONVERTSI32] = { \"f64.convert_s/i32\", 1, 1 },\n\t[WASM_OP_F64CONVERTUI32] = { \"f64.convert_u/i32\", 1, 1 },\n\t[WASM_OP_F64CONVERTSI64] = { \"f64.convert_s/i64\", 1, 1 },\n\t[WASM_OP_F64CONVERTUI64] = { \"f64.convert_u/i64\", 1, 1 },\n\t[WASM_OP_F64PROMOTEF32] = { \"f64.promote/f32\", 1, 1 },\n\t[WASM_OP_I32REINTERPRETF32] = { \"i32.reinterpret/f32\", 1, 1 },\n\t[WASM_OP_I64REINTERPRETF64] = { \"i64.reinterpret/f64\", 1, 1 },\n\t[WASM_OP_F32REINTERPRETI32] = { \"f32.reinterpret/i32\", 1, 1 },\n\t[WASM_OP_F64REINTERPRETI64] = { \"f64/reinterpret/i64\", 1, 1 }\n};\n\nint wasm_asm(const char *str, unsigned char *buf, int buf_len) {\n\t// TODO: add immediates assembly\n\tint i = 0, len = -1;\n\tchar tmp[R_ASM_BUFSIZE];\n\twhile (str[i] != ' ' && i < buf_len) {\n\t\ttmp[i] = str[i];\n\t\ti++;\n\t}\n\ttmp[i] = 0;\n\tfor (i = 0; i < 0xff; i++) {\n\t\tWasmOpDef *opdef = &opcodes[i];\n\t\tif (opdef->txt) {\n\t\t\tif (!strcmp (opdef->txt, tmp)) {\n\t\t\t\tbuf[0] = i;\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t}\n\t}\n\treturn len;\n}\n\nint wasm_dis(WasmOp *op, const unsigned char *buf, int buf_len) {\n\top->len = 1;\n\top->op = buf[0];\n\tif (op->op > 0xbf) {\n\t\treturn 1;\n\t}\n\t// add support for extension opcodes (SIMD + atomics)\n\tWasmOpDef *opdef = &opcodes[op->op];\n\tswitch (op->op) {\n\tcase WASM_OP_TRAP:\n\tcase WASM_OP_NOP:\n\tcase WASM_OP_ELSE:\n\tcase WASM_OP_RETURN:\n\tcase WASM_OP_DROP:\n\tcase WASM_OP_SELECT:\n\tcase WASM_OP_I32EQZ:\n\tcase WASM_OP_I32EQ:\n\tcase WASM_OP_I32NE:\n\tcase WASM_OP_I32LTS:\n\tcase WASM_OP_I32LTU:\n\tcase WASM_OP_I32GTS:\n\tcase WASM_OP_I32GTU:\n\tcase WASM_OP_I32LES:\n\tcase WASM_OP_I32LEU:\n\tcase WASM_OP_I32GES:\n\tcase WASM_OP_I32GEU:\n\tcase WASM_OP_I64EQZ:\n\tcase WASM_OP_I64EQ:\n\tcase WASM_OP_I64NE:\n\tcase WASM_OP_I64LTS:\n\tcase WASM_OP_I64LTU:\n\tcase WASM_OP_I64GTS:\n\tcase WASM_OP_I64GTU:\n\tcase WASM_OP_I64LES:\n\tcase WASM_OP_I64LEU:\n\tcase WASM_OP_I64GES:\n\tcase WASM_OP_I64GEU:\n\tcase WASM_OP_F32EQ:\n\tcase WASM_OP_F32NE:\n\tcase WASM_OP_F32LT:\n\tcase WASM_OP_F32GT:\n\tcase WASM_OP_F32LE:\n\tcase WASM_OP_F32GE:\n\tcase WASM_OP_F64EQ:\n\tcase WASM_OP_F64NE:\n\tcase WASM_OP_F64LT:\n\tcase WASM_OP_F64GT:\n\tcase WASM_OP_F64LE:\n\tcase WASM_OP_F64GE:\n\tcase WASM_OP_I32CLZ:\n\tcase WASM_OP_I32CTZ:\n\tcase WASM_OP_I32POPCNT:\n\tcase WASM_OP_I32ADD:\n\tcase WASM_OP_I32SUB:\n\tcase WASM_OP_I32MUL:\n\tcase WASM_OP_I32DIVS:\n\tcase WASM_OP_I32DIVU:\n\tcase WASM_OP_I32REMS:\n\tcase WASM_OP_I32REMU:\n\tcase WASM_OP_I32AND:\n\tcase WASM_OP_I32OR:\n\tcase WASM_OP_I32XOR:\n\tcase WASM_OP_I32SHL:\n\tcase WASM_OP_I32SHRS:\n\tcase WASM_OP_I32SHRU:\n\tcase WASM_OP_I32ROTL:\n\tcase WASM_OP_I32ROTR:\n\tcase WASM_OP_I64CLZ:\n\tcase WASM_OP_I64CTZ:\n\tcase WASM_OP_I64POPCNT:\n\tcase WASM_OP_I64ADD:\n\tcase WASM_OP_I64SUB:\n\tcase WASM_OP_I64MUL:\n\tcase WASM_OP_I64DIVS:\n\tcase WASM_OP_I64DIVU:\n\tcase WASM_OP_I64REMS:\n\tcase WASM_OP_I64REMU:\n\tcase WASM_OP_I64AND:\n\tcase WASM_OP_I64OR:\n\tcase WASM_OP_I64XOR:\n\tcase WASM_OP_I64SHL:\n\tcase WASM_OP_I64SHRS:\n\tcase WASM_OP_I64SHRU:\n\tcase WASM_OP_I64ROTL:\n\tcase WASM_OP_I64ROTR:\n\tcase WASM_OP_F32ABS:\n\tcase WASM_OP_F32NEG:\n\tcase WASM_OP_F32CEIL:\n\tcase WASM_OP_F32FLOOR:\n\tcase WASM_OP_F32TRUNC:\n\tcase WASM_OP_F32NEAREST:\n\tcase WASM_OP_F32SQRT:\n\tcase WASM_OP_F32ADD:\n\tcase WASM_OP_F32SUB:\n\tcase WASM_OP_F32MUL:\n\tcase WASM_OP_F32DIV:\n\tcase WASM_OP_F32MIN:\n\tcase WASM_OP_F32MAX:\n\tcase WASM_OP_F32COPYSIGN:\n\tcase WASM_OP_F64ABS:\n\tcase WASM_OP_F64NEG:\n\tcase WASM_OP_F64CEIL:\n\tcase WASM_OP_F64FLOOR:\n\tcase WASM_OP_F64TRUNC:\n\tcase WASM_OP_F64NEAREST:\n\tcase WASM_OP_F64SQRT:\n\tcase WASM_OP_F64ADD:\n\tcase WASM_OP_F64SUB:\n\tcase WASM_OP_F64MUL:\n\tcase WASM_OP_F64DIV:\n\tcase WASM_OP_F64MIN:\n\tcase WASM_OP_F64MAX:\n\tcase WASM_OP_F64COPYSIGN:\n\tcase WASM_OP_I32WRAPI64:\n\tcase WASM_OP_I32TRUNCSF32:\n\tcase WASM_OP_I32TRUNCUF32:\n\tcase WASM_OP_I32TRUNCSF64:\n\tcase WASM_OP_I32TRUNCUF64:\n\tcase WASM_OP_I64EXTENDSI32:\n\tcase WASM_OP_I64EXTENDUI32:\n\tcase WASM_OP_I64TRUNCSF32:\n\tcase WASM_OP_I64TRUNCUF32:\n\tcase WASM_OP_I64TRUNCSF64:\n\tcase WASM_OP_I64TRUNCUF64:\n\tcase WASM_OP_F32CONVERTSI32:\n\tcase WASM_OP_F32CONVERTUI32:\n\tcase WASM_OP_F32CONVERTSI64:\n\tcase WASM_OP_F32CONVERTUI64:\n\tcase WASM_OP_F32DEMOTEF64:\n\tcase WASM_OP_F64CONVERTSI32:\n\tcase WASM_OP_F64CONVERTUI32:\n\tcase WASM_OP_F64CONVERTSI64:\n\tcase WASM_OP_F64CONVERTUI64:\n\tcase WASM_OP_F64PROMOTEF32:\n\tcase WASM_OP_I32REINTERPRETF32:\n\tcase WASM_OP_I64REINTERPRETF64:\n\tcase WASM_OP_F32REINTERPRETI32:\n\tcase WASM_OP_F64REINTERPRETI64:\n\tcase WASM_OP_END:\n\t\t{\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s\", opdef->txt);\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_BLOCK:\n\tcase WASM_OP_LOOP:\n\tcase WASM_OP_IF:\n\t\t{\n\t\t\tst32 val = 0;\n\t\t\tsize_t n = read_i32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tswitch (0x80 - val) {\n\t\t\tcase R_BIN_WASM_VALUETYPE_EMPTY:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tcase R_BIN_WASM_VALUETYPE_i32:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result i32)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tcase R_BIN_WASM_VALUETYPE_i64:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result i64)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tcase R_BIN_WASM_VALUETYPE_f32:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result f32)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tcase R_BIN_WASM_VALUETYPE_f64:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result f64)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s (result ?)\", opdef->txt);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_BR:\n\tcase WASM_OP_BRIF:\n\tcase WASM_OP_CALL:\n\t\t{\n\t\t\tut32 val = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d\", opdef->txt, val);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_BRTABLE:\n\t\t{\n\t\t\tut32 count = 0, *table = NULL, def = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &count);\n\t\t\tif (!(n > 0 && n < buf_len)) {\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tif (!(table = calloc (count, sizeof (ut32)))) {\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tint i = 0;\n\t\t\top->len += n;\n\t\t\tfor (i = 0; i < count; i++) {\n\t\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &table[i]);\n\t\t\t\tif (!(op->len + n <= buf_len)) {\n\t\t\t\t\tgoto beach;\n\t\t\t\t}\n\t\t\t\top->len += n;\n\t\t\t}\n\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &def);\n\t\t\tif (!(n > 0 && n + op->len < buf_len)) {\n\t\t\t\tgoto beach;\n\t\t\t}\n\t\t\top->len += n;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d \", opdef->txt, count);\n\t\t\tchar *txt = op->txt;\n\t\t\tint txtLen = strlen (op->txt);\n\t\t\tint txtLeft = R_ASM_BUFSIZE - txtLen;\n\t\t\ttxt += txtLen;\n\t\t\tfor (i = 0; i < count && txtLen + 10 < R_ASM_BUFSIZE; i++) {\n\t\t\t\tsnprintf (txt, txtLeft, \"%d \", table[i]);\n\t\t\t\ttxtLen = strlen (txt);\n\t\t\t\ttxt += txtLen;\n\t\t\t\ttxtLeft -= txtLen;\n\t\t\t}\n\t\t\tsnprintf (txt, txtLeft - 1, \"%d\", def);\n\t\t\tfree (table);\n\t\t\tbreak;\n\t\tbeach:\n\t\t\tfree (table);\n\t\t\tgoto err;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_CALLINDIRECT:\n\t\t{\n\t\t\tut32 val = 0, reserved = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\top->len += n;\n\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &reserved);\n\t\t\tif (!(n == 1 && op->len + n <= buf_len)) goto err;\n\t\t\treserved &= 0x1;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d %d\", opdef->txt, val, reserved);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_GETLOCAL:\n\tcase WASM_OP_SETLOCAL:\n\tcase WASM_OP_TEELOCAL:\n\tcase WASM_OP_GETGLOBAL:\n\tcase WASM_OP_SETGLOBAL:\n\t\t{\n\t\t\tut32 val = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d\", opdef->txt, val);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_I32LOAD:\n\tcase WASM_OP_I64LOAD:\n\tcase WASM_OP_F32LOAD:\n\tcase WASM_OP_F64LOAD:\n\tcase WASM_OP_I32LOAD8S:\n\tcase WASM_OP_I32LOAD8U:\n\tcase WASM_OP_I32LOAD16S:\n\tcase WASM_OP_I32LOAD16U:\n\tcase WASM_OP_I64LOAD8S:\n\tcase WASM_OP_I64LOAD8U:\n\tcase WASM_OP_I64LOAD16S:\n\tcase WASM_OP_I64LOAD16U:\n\tcase WASM_OP_I64LOAD32S:\n\tcase WASM_OP_I64LOAD32U:\n\tcase WASM_OP_I32STORE:\n\tcase WASM_OP_I64STORE:\n\tcase WASM_OP_F32STORE:\n\tcase WASM_OP_F64STORE:\n\tcase WASM_OP_I32STORE8:\n\tcase WASM_OP_I32STORE16:\n\tcase WASM_OP_I64STORE8:\n\tcase WASM_OP_I64STORE16:\n\tcase WASM_OP_I64STORE32:\n\t\t{\n\t\t\tut32 flag = 0, offset = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &flag);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\top->len += n;\n\t\t\tn = read_u32_leb128 (buf + op->len, buf + buf_len, &offset);\n\t\t\tif (!(n > 0 && op->len + n <= buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d %d\", opdef->txt, flag, offset);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_CURRENTMEMORY:\n\tcase WASM_OP_GROWMEMORY:\n\t\t{\n\t\t\tut32 reserved = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &reserved);\n\t\t\tif (!(n == 1 && n < buf_len)) goto err;\n\t\t\treserved &= 0x1;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %d\", opdef->txt, reserved);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\n\tcase WASM_OP_I32CONST:\n\t\t{\n\t\t\tst32 val = 0;\n\t\t\tsize_t n = read_i32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %\" PFMT32d, opdef->txt, val);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_I64CONST:\n\t\t{\n\t\t\tst64 val = 0;\n\t\t\tsize_t n = read_i64_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %\" PFMT64d, opdef->txt, val);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_F32CONST:\n\t\t{\n\t\t\tut32 val = 0;\n\t\t\tsize_t n = read_u32_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tlong double d =  (long double)val;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %\" LDBLFMT, opdef->txt, d);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tcase WASM_OP_F64CONST:\n\t\t{\n\t\t\tut64 val = 0;\n\t\t\tsize_t n = read_u64_leb128 (buf + 1, buf + buf_len, &val);\n\t\t\tif (!(n > 0 && n < buf_len)) goto err;\n\t\t\tlong double d =  (long double)val;\n\t\t\tsnprintf (op->txt, R_ASM_BUFSIZE, \"%s %\" LDBLFMT, opdef->txt, d);\n\t\t\top->len += n;\n\t\t}\n\t\tbreak;\n\tdefault:\n\t\tgoto err;\n\t}\n\n\treturn op->len;\n\nerr:\n\top->len = 1;\n\tsnprintf (op->txt, R_ASM_BUFSIZE, \"invalid\");\n\treturn op->len;\n}\n"], "filenames": ["libr/asm/arch/wasm/wasm.c"], "buggy_code_start_loc": [417], "buggy_code_end_loc": [425], "fixing_code_start_loc": [417], "fixing_code_end_loc": [431], "type": "CWE-119", "message": "The wasm_dis() function in libr/asm/arch/wasm/wasm.c in or possibly have unspecified other impact via a crafted WASM file.", "other": {"cve": {"id": "CVE-2018-11378", "sourceIdentifier": "cve@mitre.org", "published": "2018-05-22T19:29:00.380", "lastModified": "2018-06-28T14:45:38.627", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The wasm_dis() function in libr/asm/arch/wasm/wasm.c in or possibly have unspecified other impact via a crafted WASM file."}, {"lang": "es", "value": "La funci\u00f3n wasm_dis() en libr/asm/arch/wasm/wasm.c podr\u00eda tener otro tipo de impacto sin especificar mediante un archivo WASM manipulado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:radare:radare2:2.5.0:*:*:*:*:*:*:*", "matchCriteriaId": "81E40EFA-5307-45F3-9722-CB499D21141F"}]}]}], "references": [{"url": "https://github.com/radare/radare2/commit/bd276ef2fd8ac3401e65be7c126a43175ccfbcd7", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/radare/radare2/issues/9969", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/radare/radare2/commit/bd276ef2fd8ac3401e65be7c126a43175ccfbcd7"}}