{"buggy_code": ["import logging\nfrom logging.handlers import RotatingFileHandler\nimport random\nimport re\n\nfrom flask import Flask, render_template, request\nfrom flask_wtf import FlaskForm\nfrom wtforms import SelectField, TextAreaField\n\nfrom .generate.generator import PoemMaker\n\npm = PoemMaker()\npm.setup()\n\napp = Flask(__name__)\napp.config.update(WTF_CSRF_ENABLED=False)\n\nhandler = RotatingFileHandler('poems.log', maxBytes=10000, backupCount=1)\nhandler.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\napp.logger.addHandler(handler)\n\n\ndef alphanum(s):\n    return re.sub(r'[^a-z]+', '', s.lower())\n\n\nclass GeneratePoemForm(FlaskForm):\n    source = SelectField('Source', choices=[(k, k) for k in pm.text_sources.keys()])\n    style = SelectField('Style', choices=[(k, k) for k in pm.poem_styles.keys()])\n\n\nclass UploadTextForm(FlaskForm):\n    poem_format = SelectField('Format', choices=[(k, k) for k in pm.poem_styles.keys()])\n    source_text = TextAreaField('Text', render_kw={'rows': 20, 'cols': 200})\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef generate_page():\n    def valid_param(param, d):\n        if param is not None:\n            for k in d.keys():\n                if alphanum(param) == alphanum(k):\n                    return k\n\n    form = GeneratePoemForm()\n\n    app.logger.debug(form.validate())\n    if form.errors:\n        app.logger.warning(form.errors)\n\n    if form.validate_on_submit():\n        source = form.source.data\n        style = form.style.data\n    else:\n        try:\n            source_ask = request.args.get('source') or request.args.get('style')\n            source_param = valid_param(source_ask, pm.text_sources)\n            if source_param is not None:\n                source = source_param\n            else:\n                source = random.choice(list(pm.text_sources.keys()))\n            form.source.data = source\n\n            style_ask = request.args.get('poem') or request.args.get('style')\n            style_param = valid_param(style_ask, pm.poem_styles)\n            if style_param is not None:\n                style = style_param\n            else:\n                style = random.choice(list(pm.poem_styles.keys()))\n            form.style.data = style\n        except:\n            app.logger.exception('Failed to select source and style')\n\n    poem = pm.generate(source, style)\n    app.logger.info(poem)\n    print(poem)\n    return render_template('generate.html', form=form, poem=poem)\n\n\n@app.route('/custom', methods=['GET', 'POST'])\ndef upload():\n    form = UploadTextForm()\n\n    if form.validate_on_submit():\n        print('asdf')\n        source_text = form.source_text.data\n        poem_format = form.poem_format.data\n\n        form.source_text.render_kw['hidden'] = True\n\n        try:\n            poem = pm.generate_custom(source_text, poem_format)\n            app.logger.info(poem)\n            print(poem)\n        except IndexError:\n            poem=\"Sorry! I couldn't find a valid poem with that input. :(\"\n        return render_template('custom_poem.html', form=form, poem=poem)\n\n    if 'hidden' in form.source_text.render_kw:\n        del form.source_text.render_kw['hidden']\n    return render_template('custom.html', form=form)\n\n\nif __name__ == '__main__':\n    app.run()\n", "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <title>\n    a poem from you <3\n  </title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\" crossorigin=\"anonymous\">\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"row my-5 text-center\">\n      <div class=\"col\">\n        <form action=\"\" method=\"POST\">\n          <div class=\"form-group my-3\">\n            <label for=\"source_text\" class=\"mb-3\">Copy-paste your text! The longer it is, the better and more varied results will be. It will be sanitized with most punctuation and all capitalization and whitespace stripped.</label>\n            {{ form.source_text }}\n          </div>\n          <div class=\"form-group my-3\">\n            I want a {{ form.poem_format }}\n          </div>\n          <div class=\"form-group my-3\">\n            <input type='submit' value='go!' onclick=\"this.disabled=true;this.value='thinking...';this.form.submit();\">\n          </div>\n          <div class=\"form-group my-3\">\n            <p>If your input is long, it could take a while to analyze! Please be patient :)</p>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n  <footer class=\"page-footer fixed-bottom font-small text-center text-secondary\">\n  <p>\n    made with love by <a class=\"text-info\" href=\"https://www.twitter.com/hartknyx\">@hartknyx</a> |\n    open source at <a class=\"text-info\" href=\"https://www.github.com/katlings/pyambic-pentameter\">github</a> |\n    <a href=\"/\">home</a>\n  </p>\n  </footer>\n</body>\n</html>\n", "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <title>\n    a poem from you <3\n  </title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\" crossorigin=\"anonymous\">\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"row my-5\">\n      <div class=\"col\">\n        <p style=\"white-space: pre-wrap\">{{poem}}</p>\n      </div>\n    </div>\n    <div class=\"row my-5 text-center\">\n      <div class=\"col\">\n        <form action=\"\" method=\"POST\">\n          {{ form.source_text }}\n          <div class=\"form-group my-3\">\n            I want a {{ form.poem_format }}\n          </div>\n          <div class=\"form-group my-3\">\n            <input type='submit' value='another!'>\n          </div>\n        </form>\n      </div>\n    </div>\n    <div class=\"row my-5 text-center\">\n      <div class=\"col\">\n        <form action=\"/custom\">\n          <input type='submit' value='let me try new text!'>\n        </form>\n      </div>\n    </div>\n  </div>\n  <footer class=\"page-footer fixed-bottom font-small text-center text-secondary\">\n  <p>\n    made with love by <a class=\"text-info\" href=\"https://www.twitter.com/hartknyx\">@hartknyx</a> |\n    open source at <a class=\"text-info\" href=\"https://www.github.com/katlings/pyambic-pentameter\">github</a> |\n    <a href=\"/\">home</a>\n  </p>\n  </footer>\n</body>\n</html>\n", "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <title>\n    a poem for you <3\n  </title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\" crossorigin=\"anonymous\">\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"row my-5\">\n      <div class=\"col-md\">\n        <p>&nbsp;</p>\n        <p style=\"white-space: pre-wrap\">{{poem}}</p>\n      </div>\n\n      <div class=\"col-md pt-5 text-center\">\n        <div class=\"row my-3\">\n          <div class=\"col\">\n            <form action=\"\" method=\"POST\">\n              <h5>\n              I want a {{ form.style }} in the style of {{ form.source }}\n              <input type='submit' value='go'>\n              </h5>\n            </form>\n          </div>\n        </div>\n        <div class=\"row my-3\">\n          <div class=\"col\">\n            <form action='/'>\n              <input type='submit' value='random'>\n            </form>\n          </div>\n        </div>\n        <div class=\"row my-3\">\n          <div class=\"col\">\n            <form action='/custom'>\n              <input type='submit' value='use my own text!'>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <footer class=\"page-footer fixed-bottom font-small text-center text-secondary\">\n  <p>\n    made with love by <a class=\"text-info\" href=\"https://www.twitter.com/hartknyx\">@hartknyx</a> |\n    open source at <a class=\"text-info\" href=\"https://www.github.com/katlings/pyambic-pentameter\">github</a> |\n    craigslist text courtesy of <a class=\"text-info\" href=\"https://www.brittg.com/\">brittg</a>\n  </p>\n  </footer>\n</body>\n</html>\n"], "fixing_code": ["import logging\nfrom logging.handlers import RotatingFileHandler\nimport os\nimport random\nimport re\n\nfrom flask import Flask, render_template, request\nfrom flask_wtf import FlaskForm\nfrom wtforms import SelectField, TextAreaField\n\nfrom .generate.generator import PoemMaker\n\npm = PoemMaker()\npm.setup()\n\napp = Flask(__name__)\nSECRET_KEY = os.urandom(32)\napp.config['SECRET_KEY'] = SECRET_KEY\n\nhandler = RotatingFileHandler('poems.log', maxBytes=10000, backupCount=1)\nhandler.setLevel(logging.INFO)\nformatter = logging.Formatter(\"%(asctime)s - %(name)s - %(levelname)s - %(message)s\")\nhandler.setFormatter(formatter)\napp.logger.addHandler(handler)\n\n\ndef alphanum(s):\n    return re.sub(r'[^a-z]+', '', s.lower())\n\n\nclass GeneratePoemForm(FlaskForm):\n    source = SelectField('Source', choices=[(k, k) for k in pm.text_sources.keys()])\n    style = SelectField('Style', choices=[(k, k) for k in pm.poem_styles.keys()])\n\n\nclass UploadTextForm(FlaskForm):\n    poem_format = SelectField('Format', choices=[(k, k) for k in pm.poem_styles.keys()])\n    source_text = TextAreaField('Text', render_kw={'rows': 20, 'cols': 200})\n\n\n@app.route('/', methods=['GET', 'POST'])\ndef generate_page():\n    def valid_param(param, d):\n        if param is not None:\n            for k in d.keys():\n                if alphanum(param) == alphanum(k):\n                    return k\n\n    form = GeneratePoemForm()\n\n    app.logger.debug(form.validate())\n    if form.errors:\n        app.logger.warning(form.errors)\n\n    if form.validate_on_submit():\n        source = form.source.data\n        style = form.style.data\n    else:\n        try:\n            source_ask = request.args.get('source') or request.args.get('style')\n            source_param = valid_param(source_ask, pm.text_sources)\n            if source_param is not None:\n                source = source_param\n            else:\n                source = random.choice(list(pm.text_sources.keys()))\n            form.source.data = source\n\n            style_ask = request.args.get('poem') or request.args.get('style')\n            style_param = valid_param(style_ask, pm.poem_styles)\n            if style_param is not None:\n                style = style_param\n            else:\n                style = random.choice(list(pm.poem_styles.keys()))\n            form.style.data = style\n        except:\n            app.logger.exception('Failed to select source and style')\n\n    poem = pm.generate(source, style)\n    app.logger.info(poem)\n    print(poem)\n    return render_template('generate.html', form=form, poem=poem)\n\n\n@app.route('/custom', methods=['GET', 'POST'])\ndef upload():\n    form = UploadTextForm()\n\n    if form.validate_on_submit():\n        print('asdf')\n        source_text = form.source_text.data\n        poem_format = form.poem_format.data\n\n        form.source_text.render_kw['hidden'] = True\n\n        try:\n            poem = pm.generate_custom(source_text, poem_format)\n            app.logger.info(poem)\n            print(poem)\n        except IndexError:\n            poem=\"Sorry! I couldn't find a valid poem with that input. :(\"\n        return render_template('custom_poem.html', form=form, poem=poem)\n\n    if 'hidden' in form.source_text.render_kw:\n        del form.source_text.render_kw['hidden']\n    return render_template('custom.html', form=form)\n\n\nif __name__ == '__main__':\n    app.run()\n", "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <title>\n    a poem from you <3\n  </title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\" crossorigin=\"anonymous\">\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"row my-5 text-center\">\n      <div class=\"col\">\n        <form action=\"\" method=\"POST\">\n          {{ form.csrf_token }}\n          <div class=\"form-group my-3\">\n            <label for=\"source_text\" class=\"mb-3\">Copy-paste your text! The longer it is, the better and more varied results will be. It will be sanitized with most punctuation and all capitalization and whitespace stripped.</label>\n            {{ form.source_text }}\n          </div>\n          <div class=\"form-group my-3\">\n            I want a {{ form.poem_format }}\n          </div>\n          <div class=\"form-group my-3\">\n            <input type='submit' value='go!' onclick=\"this.disabled=true;this.value='thinking...';this.form.submit();\">\n          </div>\n          <div class=\"form-group my-3\">\n            <p>If your input is long, it could take a while to analyze! Please be patient :)</p>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n  <footer class=\"page-footer fixed-bottom font-small text-center text-secondary\">\n  <p>\n    made with love by <a class=\"text-info\" href=\"https://www.twitter.com/hartknyx\">@hartknyx</a> |\n    open source at <a class=\"text-info\" href=\"https://www.github.com/katlings/pyambic-pentameter\">github</a> |\n    <a href=\"/\">home</a>\n  </p>\n  </footer>\n</body>\n</html>\n", "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <title>\n    a poem from you <3\n  </title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\" crossorigin=\"anonymous\">\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"row my-5\">\n      <div class=\"col\">\n        <p style=\"white-space: pre-wrap\">{{poem}}</p>\n      </div>\n    </div>\n    <div class=\"row my-5 text-center\">\n      <div class=\"col\">\n        <form action=\"\" method=\"POST\">\n          {{ form.csrf_token }}\n          {{ form.source_text }}\n          <div class=\"form-group my-3\">\n            I want a {{ form.poem_format }}\n          </div>\n          <div class=\"form-group my-3\">\n            <input type='submit' value='another!'>\n          </div>\n        </form>\n      </div>\n    </div>\n    <div class=\"row my-5 text-center\">\n      <div class=\"col\">\n        <form action=\"/custom\">\n          <input type='submit' value='let me try new text!'>\n        </form>\n      </div>\n    </div>\n  </div>\n  <footer class=\"page-footer fixed-bottom font-small text-center text-secondary\">\n  <p>\n    made with love by <a class=\"text-info\" href=\"https://www.twitter.com/hartknyx\">@hartknyx</a> |\n    open source at <a class=\"text-info\" href=\"https://www.github.com/katlings/pyambic-pentameter\">github</a> |\n    <a href=\"/\">home</a>\n  </p>\n  </footer>\n</body>\n</html>\n", "<!doctype html>\n<html lang=\"en\">\n<head>\n  <meta charset=\"utf-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n  <title>\n    a poem for you <3\n  </title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.1/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-F3w7mX95PdgyTmZZMECAngseQB83DfGTowi0iMjiWaeVhAn4FJkqJByhZMI3AhiU\" crossorigin=\"anonymous\">\n</head>\n<body>\n  <div class=\"container\">\n    <div class=\"row my-5\">\n      <div class=\"col-md\">\n        <p>&nbsp;</p>\n        <p style=\"white-space: pre-wrap\">{{poem}}</p>\n      </div>\n\n      <div class=\"col-md pt-5 text-center\">\n        <div class=\"row my-3\">\n          <div class=\"col\">\n            <form action=\"\" method=\"POST\">\n              {{ form.csrf_token }}\n              <h5>\n              I want a {{ form.style }} in the style of {{ form.source }}\n              <input type='submit' value='go'>\n              </h5>\n            </form>\n          </div>\n        </div>\n        <div class=\"row my-3\">\n          <div class=\"col\">\n            <form action='/'>\n              <input type='submit' value='random'>\n            </form>\n          </div>\n        </div>\n        <div class=\"row my-3\">\n          <div class=\"col\">\n            <form action='/custom'>\n              <input type='submit' value='use my own text!'>\n            </form>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n  <footer class=\"page-footer fixed-bottom font-small text-center text-secondary\">\n  <p>\n    made with love by <a class=\"text-info\" href=\"https://www.twitter.com/hartknyx\">@hartknyx</a> |\n    open source at <a class=\"text-info\" href=\"https://www.github.com/katlings/pyambic-pentameter\">github</a> |\n    craigslist text courtesy of <a class=\"text-info\" href=\"https://www.brittg.com/\">brittg</a>\n  </p>\n  </footer>\n</body>\n</html>\n"], "filenames": ["app.py", "templates/custom.html", "templates/custom_poem.html", "templates/generate.html"], "buggy_code_start_loc": [2, 15, 20, 22], "buggy_code_end_loc": [17, 15, 20, 22], "fixing_code_start_loc": [3, 16, 21, 23], "fixing_code_end_loc": [19, 17, 22, 24], "type": "CWE-352", "message": "A vulnerability, which was classified as problematic, was found in katlings pyambic-pentameter. Affected is an unknown function. The manipulation leads to cross-site request forgery. It is possible to launch the attack remotely. The name of the patch is 974f21aa1b2527ef39c8afe1a5060548217deca8. It is recommended to apply a patch to fix this issue. VDB-216498 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2021-4275", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-21T22:15:08.357", "lastModified": "2022-12-28T21:36:14.633", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, was found in katlings pyambic-pentameter. Affected is an unknown function. The manipulation leads to cross-site request forgery. It is possible to launch the attack remotely. The name of the patch is 974f21aa1b2527ef39c8afe1a5060548217deca8. It is recommended to apply a patch to fix this issue. VDB-216498 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}, {"lang": "en", "value": "CWE-862"}, {"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pyambic-pentameter_project:pyambic-pentameter:-:*:*:*:*:*:*:*", "matchCriteriaId": "0DE99A10-69AA-43DB-8AD7-D67CA9F68C24"}]}]}], "references": [{"url": "https://github.com/katlings/pyambic-pentameter/commit/974f21aa1b2527ef39c8afe1a5060548217deca8", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216498", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/katlings/pyambic-pentameter/commit/974f21aa1b2527ef39c8afe1a5060548217deca8"}}