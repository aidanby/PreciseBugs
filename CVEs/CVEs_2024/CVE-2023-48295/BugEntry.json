{"buggy_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\DeviceGroup;\nuse Flasher\\Prime\\FlasherInterface;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Validation\\Rule;\nuse LibreNMS\\Alerting\\QueryBuilderFilter;\nuse LibreNMS\\Alerting\\QueryBuilderFluentParser;\n\nclass DeviceGroupController extends Controller\n{\n    public function __construct()\n    {\n        $this->authorizeResource(DeviceGroup::class, 'device_group');\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        $this->authorize('manage', DeviceGroup::class);\n\n        return view('device-group.index', [\n            'device_groups' => DeviceGroup::orderBy('name')->withCount('devices')->get(),\n        ]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function create()\n    {\n        return view('device-group.create', [\n            'device_group' => new DeviceGroup(),\n            'filters' => json_encode(new QueryBuilderFilter('group')),\n        ]);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function store(Request $request, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => 'required|string|unique:device_groups',\n            'type' => 'required|in:dynamic,static',\n            'devices' => 'array|required_if:type,static',\n            'devices.*' => 'integer',\n            'rules' => 'json|required_if:type,dynamic',\n        ]);\n\n        $deviceGroup = DeviceGroup::make($request->only(['name', 'desc', 'type']));\n        $deviceGroup->rules = json_decode($request->rules);\n        $deviceGroup->save();\n\n        if ($request->type == 'static') {\n            $deviceGroup->devices()->sync($request->devices);\n        }\n\n        $flasher->addSuccess(__('Device Group :name created', ['name' => $deviceGroup->name]));\n\n        return redirect()->route('device-groups.index');\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function show(DeviceGroup $deviceGroup)\n    {\n        return redirect(url('/devices/group=' . $deviceGroup->id));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\View\\View\n     */\n    public function edit(DeviceGroup $deviceGroup)\n    {\n        // convert old rules on edit\n        if (is_null($deviceGroup->rules)) {\n            $query_builder = QueryBuilderFluentParser::fromOld($deviceGroup->pattern);\n            $deviceGroup->rules = $query_builder->toArray();\n        }\n\n        return view('device-group.edit', [\n            'device_group' => $deviceGroup,\n            'filters' => json_encode(new QueryBuilderFilter('group')),\n        ]);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function update(Request $request, DeviceGroup $deviceGroup, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => [\n                'required',\n                'string',\n                Rule::unique('device_groups')->where(function ($query) use ($deviceGroup) {\n                    $query->where('id', '!=', $deviceGroup->id);\n                }),\n            ],\n            'type' => 'required|in:dynamic,static',\n            'devices' => 'array|required_if:type,static',\n            'devices.*' => 'integer',\n            'rules' => 'json|required_if:type,dynamic',\n        ]);\n\n        $deviceGroup->fill($request->only(['name', 'desc', 'type']));\n\n        $devices_updated = false;\n        if ($deviceGroup->type == 'static') {\n            // sync device_ids from input\n            $updated = $deviceGroup->devices()->sync($request->get('devices', []));\n            // check for attached/detached/updated\n            $devices_updated = array_sum(array_map(function ($device_ids) {\n                return count($device_ids);\n            }, $updated)) > 0;\n        } else {\n            $deviceGroup->rules = json_decode($request->rules);\n        }\n\n        if ($deviceGroup->isDirty() || $devices_updated) {\n            try {\n                if ($deviceGroup->save() || $devices_updated) {\n                    $flasher->addSuccess(__('Device Group :name updated', ['name' => $deviceGroup->name]));\n                } else {\n                    $flasher->addError(__('Failed to save'));\n\n                    return redirect()->back()->withInput();\n                }\n            } catch (\\Illuminate\\Database\\QueryException $e) {\n                return redirect()->back()->withInput()->withErrors([\n                    'rules' => __('Rules resulted in invalid query: ') . $e->getMessage(),\n                ]);\n            }\n        } else {\n            $flasher->addInfo(__('No changes made'));\n        }\n\n        return redirect()->route('device-groups.index');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(DeviceGroup $deviceGroup)\n    {\n        if ($deviceGroup->serviceTemplates()->exists()) {\n            $msg = __('Device Group :name still has Service Templates associated with it. Please remove or update the Service Template accordingly', ['name' => $deviceGroup->name]);\n\n            return response($msg, 200);\n        }\n        $deviceGroup->delete();\n\n        $msg = __('Device Group :name deleted', ['name' => htmlentities($deviceGroup->name)]);\n\n        return response($msg, 200);\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Models\\DeviceGroup;\nuse Flasher\\Prime\\FlasherInterface;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Validation\\Rule;\nuse LibreNMS\\Alerting\\QueryBuilderFilter;\nuse LibreNMS\\Alerting\\QueryBuilderFluentParser;\n\nclass DeviceGroupController extends Controller\n{\n    public function __construct()\n    {\n        $this->authorizeResource(DeviceGroup::class, 'device_group');\n    }\n\n    /**\n     * Display a listing of the resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function index()\n    {\n        $this->authorize('manage', DeviceGroup::class);\n\n        return view('device-group.index', [\n            'device_groups' => DeviceGroup::orderBy('name')->withCount('devices')->get(),\n        ]);\n    }\n\n    /**\n     * Show the form for creating a new resource.\n     *\n     * @return \\Illuminate\\View\\View\n     */\n    public function create()\n    {\n        return view('device-group.create', [\n            'device_group' => new DeviceGroup(),\n            'filters' => json_encode(new QueryBuilderFilter('group')),\n        ]);\n    }\n\n    /**\n     * Store a newly created resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function store(Request $request, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => 'required|string|unique:device_groups',\n            'type' => 'required|in:dynamic,static',\n            'devices' => 'array|required_if:type,static',\n            'devices.*' => 'integer',\n            'rules' => 'json|required_if:type,dynamic',\n        ]);\n\n        $deviceGroup = DeviceGroup::make($request->only(['name', 'desc', 'type']));\n        $deviceGroup->rules = json_decode($request->rules);\n        $deviceGroup->save();\n\n        if ($request->type == 'static') {\n            $deviceGroup->devices()->sync($request->devices);\n        }\n\n        $flasher->addSuccess(__('Device Group :name created', ['name' => htmlentities($deviceGroup->name)]));\n\n        return redirect()->route('device-groups.index');\n    }\n\n    /**\n     * Display the specified resource.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function show(DeviceGroup $deviceGroup)\n    {\n        return redirect(url('/devices/group=' . $deviceGroup->id));\n    }\n\n    /**\n     * Show the form for editing the specified resource.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\View\\View\n     */\n    public function edit(DeviceGroup $deviceGroup)\n    {\n        // convert old rules on edit\n        if (is_null($deviceGroup->rules)) {\n            $query_builder = QueryBuilderFluentParser::fromOld($deviceGroup->pattern);\n            $deviceGroup->rules = $query_builder->toArray();\n        }\n\n        return view('device-group.edit', [\n            'device_group' => $deviceGroup,\n            'filters' => json_encode(new QueryBuilderFilter('group')),\n        ]);\n    }\n\n    /**\n     * Update the specified resource in storage.\n     *\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\RedirectResponse\n     */\n    public function update(Request $request, DeviceGroup $deviceGroup, FlasherInterface $flasher)\n    {\n        $this->validate($request, [\n            'name' => [\n                'required',\n                'string',\n                Rule::unique('device_groups')->where(function ($query) use ($deviceGroup) {\n                    $query->where('id', '!=', $deviceGroup->id);\n                }),\n            ],\n            'type' => 'required|in:dynamic,static',\n            'devices' => 'array|required_if:type,static',\n            'devices.*' => 'integer',\n            'rules' => 'json|required_if:type,dynamic',\n        ]);\n\n        $deviceGroup->fill($request->only(['name', 'desc', 'type']));\n\n        $devices_updated = false;\n        if ($deviceGroup->type == 'static') {\n            // sync device_ids from input\n            $updated = $deviceGroup->devices()->sync($request->get('devices', []));\n            // check for attached/detached/updated\n            $devices_updated = array_sum(array_map(function ($device_ids) {\n                return count($device_ids);\n            }, $updated)) > 0;\n        } else {\n            $deviceGroup->rules = json_decode($request->rules);\n        }\n\n        if ($deviceGroup->isDirty() || $devices_updated) {\n            try {\n                if ($deviceGroup->save() || $devices_updated) {\n                    $flasher->addSuccess(__('Device Group :name updated', ['name' => htmlentities($deviceGroup->name)]));\n                } else {\n                    $flasher->addError(__('Failed to save'));\n\n                    return redirect()->back()->withInput();\n                }\n            } catch (\\Illuminate\\Database\\QueryException $e) {\n                return redirect()->back()->withInput()->withErrors([\n                    'rules' => __('Rules resulted in invalid query: ') . $e->getMessage(),\n                ]);\n            }\n        } else {\n            $flasher->addInfo(__('No changes made'));\n        }\n\n        return redirect()->route('device-groups.index');\n    }\n\n    /**\n     * Remove the specified resource from storage.\n     *\n     * @param  \\App\\Models\\DeviceGroup  $deviceGroup\n     * @return \\Illuminate\\Http\\Response\n     */\n    public function destroy(DeviceGroup $deviceGroup)\n    {\n        if ($deviceGroup->serviceTemplates()->exists()) {\n            $msg = __('Device Group :name still has Service Templates associated with it. Please remove or update the Service Template accordingly', ['name' => htmlentities($deviceGroup->name)]);\n\n            return response($msg, 200);\n        }\n        $deviceGroup->delete();\n\n        $msg = __('Device Group :name deleted', ['name' => htmlentities($deviceGroup->name)]);\n\n        return response($msg, 200);\n    }\n}\n"], "filenames": ["app/Http/Controllers/DeviceGroupController.php"], "buggy_code_start_loc": [70], "buggy_code_end_loc": [174], "fixing_code_start_loc": [70], "fixing_code_end_loc": [174], "type": "CWE-79", "message": "LibreNMS is an auto-discovering PHP/MySQL/SNMP based network monitoring which includes support for a wide range of network hardware and operating systems. Affected versions are subject to a cross site scripting (XSS) vulnerability in the device group popups. This issue has been addressed in commit `faf66035ea` which has been included in release version 23.11.0. Users are advised to upgrade. There are no known workarounds for this vulnerability.", "other": {"cve": {"id": "CVE-2023-48295", "sourceIdentifier": "security-advisories@github.com", "published": "2023-11-17T21:15:07.680", "lastModified": "2023-11-25T01:21:51.610", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LibreNMS is an auto-discovering PHP/MySQL/SNMP based network monitoring which includes support for a wide range of network hardware and operating systems. Affected versions are subject to a cross site scripting (XSS) vulnerability in the device group popups. This issue has been addressed in commit `faf66035ea` which has been included in release version 23.11.0. Users are advised to upgrade. There are no known workarounds for this vulnerability."}, {"lang": "es", "value": "LibreNMS es un monitor de red basado en PHP/MySQL/SNMP con descubrimiento autom\u00e1tico que incluye soporte para una amplia gama de hardware de red y sistemas operativos. Las versiones afectadas est\u00e1n sujetas a una vulnerabilidad de cross site scripting (XSS) en las ventanas emergentes del grupo de dispositivos. Este problema se solucion\u00f3 en el commit `faf66035ea` que se incluy\u00f3 en la versi\u00f3n 23.11.0. Se recomienda a los usuarios que actualicen. No se conocen workarounds para esta vulnerabilidad."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 4.2}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:librenms:librenms:*:*:*:*:*:*:*:*", "versionEndExcluding": "23.11.0", "matchCriteriaId": "24B09F58-7CE2-470F-8F5B-6771753682A6"}]}]}], "references": [{"url": "https://github.com/librenms/librenms/blob/63eeeb71722237d1461a37bb6da99fda25e02c91/app/Http/Controllers/DeviceGroupController.php#L173C21-L173C21", "source": "security-advisories@github.com", "tags": ["Product"]}, {"url": "https://github.com/librenms/librenms/commit/faf66035ea1f4c1c4f34559b9d0ed40ee4a19f90", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/librenms/librenms/security/advisories/GHSA-8phr-637g-pxrg", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/librenms/librenms/commit/faf66035ea1f4c1c4f34559b9d0ed40ee4a19f90"}}