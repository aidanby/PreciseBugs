{"buggy_code": ["<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Reports;\n\nuse Pimcore\\Model\\Tool\\CustomReport;\nuse Symfony\\Component\\Filesystem\\Exception\\FileNotFoundException;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/custom-report\")\n */\nclass CustomReportController extends ReportsControllerBase\n{\n    /**\n     * @Route(\"/tree\", name=\"pimcore_admin_reports_customreport_tree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n        $reports = CustomReport\\Config::getReportsList();\n\n        return $this->adminJson($reports);\n    }\n\n    /**\n     * @Route(\"/portlet-report-list\", name=\"pimcore_admin_reports_customreport_portletreportlist\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function portletReportListAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        $reports = CustomReport\\Config::getReportsList($this->getAdminUser());\n\n        return $this->adminJson(['data' => $reports]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"pimcore_admin_reports_customreport_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $success = false;\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n\n        if (!$report) {\n            $report = new CustomReport\\Config();\n            $report->setName($request->get('name'));\n            $report->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $report->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_reports_customreport_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        $report->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clone\", name=\"pimcore_admin_reports_customreport_clone\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function cloneAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $newName = $request->get('newName');\n        $report = CustomReport\\Config::getByName($newName);\n        if ($report) {\n            throw new \\Exception('report already exists');\n        }\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        $reportData = $this->encodeJson($report);\n        $reportData = $this->decodeJson($reportData);\n\n        unset($reportData['name']);\n        $reportData['name'] = $newName;\n\n        foreach ($reportData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"pimcore_admin_reports_customreport_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $this->checkPermissionsHasOneOf(['reports_config', 'reports']);\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n\n        return $this->adminJson($report);\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_reports_customreport_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        $data = $this->decodeJson($request->get('configuration'));\n\n        if (!is_array($data['yAxis'])) {\n            $data['yAxis'] = strlen($data['yAxis']) ? [$data['yAxis']] : [];\n        }\n\n        foreach ($data as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/column-config\", name=\"pimcore_admin_reports_customreport_columnconfig\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function columnConfigAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        $columnConfiguration = $report->getColumnConfiguration();\n        if (!is_array($columnConfiguration)) {\n            $columnConfiguration = [];\n        }\n\n        $configuration = json_decode($request->get('configuration'));\n        $configuration = $configuration[0];\n\n        $success = false;\n        $columns = null;\n        $errorMessage = null;\n\n        $result = [];\n\n        try {\n            $adapter = CustomReport\\Config::getAdapter($configuration);\n            $columns = $adapter->getColumns($configuration);\n            if (!is_array($columns)) {\n                $columns = [];\n            }\n\n            foreach ($columnConfiguration as $item) {\n                $name = $item['name'];\n                if (in_array($name, $columns)) {\n                    $result[] = $name;\n                    array_splice($columns, array_search($name, $columns), 1);\n                }\n            }\n            foreach ($columns as $remainingColumn) {\n                $result[] = $remainingColumn;\n            }\n\n            $success = true;\n        } catch (\\Exception $e) {\n            $errorMessage = $e->getMessage();\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'columns' => $result,\n            'errorMessage' => $errorMessage,\n        ]);\n    }\n\n    /**\n     * @Route(\"/get-report-config\", name=\"pimcore_admin_reports_customreport_getreportconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getReportConfigAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $reports = [];\n\n        $list = new CustomReport\\Config\\Listing();\n        $items = $list->getDao()->loadForGivenUser($this->getAdminUser());\n\n        /** @var CustomReport\\Config $report */\n        foreach ($items as $report) {\n            $reports[] = [\n                'name' => $report->getName(),\n                'niceName' => $report->getNiceName(),\n                'iconClass' => $report->getIconClass(),\n                'group' => $report->getGroup(),\n                'groupIconClass' => $report->getGroupIconClass(),\n                'menuShortcut' => $report->getMenuShortcut(),\n                'reportClass' => $report->getReportClass(),\n            ];\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'reports' => $reports,\n        ]);\n    }\n\n    /**\n     * @Route(\"/data\", name=\"pimcore_admin_reports_customreport_data\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function dataAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $offset = $request->get('start', 0);\n        $limit = $request->get('limit', 40);\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n        $sort = null;\n        $dir = null;\n        if ($sortingSettings['orderKey']) {\n            $sort = $sortingSettings['orderKey'];\n            $dir = $sortingSettings['order'];\n        }\n\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $result = $adapter->getData($filters, $sort, $dir, $offset, $limit, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/drill-down-options\", name=\"pimcore_admin_reports_customreport_drilldownoptions\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function drillDownOptionsAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $field = $request->get('field');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getAvailableOptions($filters, $field, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/chart\", name=\"pimcore_admin_reports_customreport_chart\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function chartAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getData($filters, $sort, $dir, null, null, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-csv\", name=\"pimcore_admin_reports_customreport_createcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        set_time_limit(300);\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = $request->get('filter') ? json_decode(urldecode($request->get('filter')), true) : null;\n        $drillDownFilters = $request->get('drillDownFilters', null);\n        $includeHeaders = $request->get('headers', false);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n\n        $columns = $config->getColumnConfiguration();\n        $fields = [];\n        foreach ($columns as $column) {\n            if ($column['export']) {\n                $fields[] = $column['name'];\n            }\n        }\n\n        $configuration = $config->getDataSourceConfig();\n        //if many rows returned as an array than use the first row. Fixes: #782\n        $configuration = is_array($configuration)\n            ? $configuration[0]\n            : $configuration;\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $offset = $request->get('offset', 0);\n        $limit = 5000;\n        $tempData = [];\n        $result = $adapter->getData($filters, $sort, $dir, $offset * $limit, $limit, $fields, $drillDownFilters);\n        ++$offset;\n\n        if (!($exportFile = $request->get('exportFile'))) {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/report-export-' . uniqid() . '.csv';\n            @unlink($exportFile);\n        }\n\n        $fp = fopen($exportFile, 'a');\n\n        if ($includeHeaders) {\n            fputcsv($fp, $fields, ';');\n        }\n\n        foreach ($result['data'] as $row) {\n            fputcsv($fp, array_values($row), ';');\n        }\n\n        fclose($fp);\n\n        $progress = $result['total'] ? ($offset * $limit) / $result['total'] : 1;\n        $progress = $progress > 1 ? 1 : $progress;\n\n        return new JsonResponse([\n            'exportFile' => $exportFile,\n            'offset' => $offset,\n            'progress' => $progress,\n            'finished' => empty($result['data']) || count($result['data']) < $limit,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-csv\", name=\"pimcore_admin_reports_customreport_downloadcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function downloadCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        if ($exportFile = $request->get('exportFile')) {\n            $response = new BinaryFileResponse($exportFile);\n            $response->headers->set('Content-Type', 'text/csv; charset=UTF-8');\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'export.csv');\n            $response->deleteFileAfterSend(true);\n\n            return $response;\n        }\n        throw new FileNotFoundException(\"File \\\"$exportFile\\\" not found!\");\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Enterprise License (PEL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PEL\n */\n\nnamespace Pimcore\\Bundle\\AdminBundle\\Controller\\Reports;\n\nuse Pimcore\\Model\\Tool\\CustomReport;\nuse Symfony\\Component\\Filesystem\\Exception\\FileNotFoundException;\nuse Symfony\\Component\\HttpFoundation\\BinaryFileResponse;\nuse Symfony\\Component\\HttpFoundation\\JsonResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpFoundation\\ResponseHeaderBag;\nuse Symfony\\Component\\Routing\\Annotation\\Route;\n\n/**\n * @Route(\"/custom-report\")\n */\nclass CustomReportController extends ReportsControllerBase\n{\n    /**\n     * @Route(\"/tree\", name=\"pimcore_admin_reports_customreport_tree\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function treeAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n        $reports = CustomReport\\Config::getReportsList();\n\n        return $this->adminJson($reports);\n    }\n\n    /**\n     * @Route(\"/portlet-report-list\", name=\"pimcore_admin_reports_customreport_portletreportlist\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function portletReportListAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        $reports = CustomReport\\Config::getReportsList($this->getAdminUser());\n\n        return $this->adminJson(['data' => $reports]);\n    }\n\n    /**\n     * @Route(\"/add\", name=\"pimcore_admin_reports_customreport_add\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function addAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $success = false;\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n\n        if (!$report) {\n            $report = new CustomReport\\Config();\n            $report->setName($request->get('name'));\n            $report->save();\n\n            $success = true;\n        }\n\n        return $this->adminJson(['success' => $success, 'id' => $report->getName()]);\n    }\n\n    /**\n     * @Route(\"/delete\", name=\"pimcore_admin_reports_customreport_delete\", methods={\"DELETE\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function deleteAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        $report->delete();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/clone\", name=\"pimcore_admin_reports_customreport_clone\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function cloneAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $newName = $request->get('newName');\n        $report = CustomReport\\Config::getByName($newName);\n        if ($report) {\n            throw new \\Exception('report already exists');\n        }\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        $reportData = $this->encodeJson($report);\n        $reportData = $this->decodeJson($reportData);\n\n        unset($reportData['name']);\n        $reportData['name'] = $newName;\n\n        foreach ($reportData as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/get\", name=\"pimcore_admin_reports_customreport_get\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getAction(Request $request)\n    {\n        $this->checkPermissionsHasOneOf(['reports_config', 'reports']);\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n\n        return $this->adminJson($report);\n    }\n\n    /**\n     * @Route(\"/update\", name=\"pimcore_admin_reports_customreport_update\", methods={\"PUT\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function updateAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        $data = $this->decodeJson($request->get('configuration'));\n\n        if (!is_array($data['yAxis'])) {\n            $data['yAxis'] = strlen($data['yAxis']) ? [$data['yAxis']] : [];\n        }\n\n        foreach ($data as $key => $value) {\n            $setter = 'set' . ucfirst($key);\n            if (method_exists($report, $setter)) {\n                $report->$setter($value);\n            }\n        }\n\n        $report->save();\n\n        return $this->adminJson(['success' => true]);\n    }\n\n    /**\n     * @Route(\"/column-config\", name=\"pimcore_admin_reports_customreport_columnconfig\", methods={\"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function columnConfigAction(Request $request)\n    {\n        $this->checkPermission('reports_config');\n\n        $report = CustomReport\\Config::getByName($request->get('name'));\n        $columnConfiguration = $report->getColumnConfiguration();\n        if (!is_array($columnConfiguration)) {\n            $columnConfiguration = [];\n        }\n\n        $configuration = json_decode($request->get('configuration'));\n        $configuration = $configuration[0];\n\n        $success = false;\n        $columns = null;\n        $errorMessage = null;\n\n        $result = [];\n\n        try {\n            $adapter = CustomReport\\Config::getAdapter($configuration);\n            $columns = $adapter->getColumns($configuration);\n            if (!is_array($columns)) {\n                $columns = [];\n            }\n\n            foreach ($columnConfiguration as $item) {\n                $name = $item['name'];\n                if (in_array($name, $columns)) {\n                    $result[] = $name;\n                    array_splice($columns, array_search($name, $columns), 1);\n                }\n            }\n            foreach ($columns as $remainingColumn) {\n                $result[] = $remainingColumn;\n            }\n\n            $success = true;\n        } catch (\\Exception $e) {\n            $errorMessage = $e->getMessage();\n        }\n\n        return $this->adminJson([\n            'success' => $success,\n            'columns' => $result,\n            'errorMessage' => $errorMessage,\n        ]);\n    }\n\n    /**\n     * @Route(\"/get-report-config\", name=\"pimcore_admin_reports_customreport_getreportconfig\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function getReportConfigAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $reports = [];\n\n        $list = new CustomReport\\Config\\Listing();\n        $items = $list->getDao()->loadForGivenUser($this->getAdminUser());\n\n        /** @var CustomReport\\Config $report */\n        foreach ($items as $report) {\n            $reports[] = [\n                'name' => $report->getName(),\n                'niceName' => $report->getNiceName(),\n                'iconClass' => $report->getIconClass(),\n                'group' => $report->getGroup(),\n                'groupIconClass' => $report->getGroupIconClass(),\n                'menuShortcut' => $report->getMenuShortcut(),\n                'reportClass' => $report->getReportClass(),\n            ];\n        }\n\n        return $this->adminJson([\n            'success' => true,\n            'reports' => $reports,\n        ]);\n    }\n\n    /**\n     * @Route(\"/data\", name=\"pimcore_admin_reports_customreport_data\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function dataAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $offset = $request->get('start', 0);\n        $limit = $request->get('limit', 40);\n        $sortingSettings = \\Pimcore\\Bundle\\AdminBundle\\Helper\\QueryParams::extractSortingSettings(array_merge($request->request->all(), $request->query->all()));\n        $sort = null;\n        $dir = null;\n        if ($sortingSettings['orderKey']) {\n            $sort = $sortingSettings['orderKey'];\n            $dir = $sortingSettings['order'];\n        }\n\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $result = $adapter->getData($filters, $sort, $dir, $offset, $limit, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/drill-down-options\", name=\"pimcore_admin_reports_customreport_drilldownoptions\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function drillDownOptionsAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $field = $request->get('field');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getAvailableOptions($filters, $field, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/chart\", name=\"pimcore_admin_reports_customreport_chart\", methods={\"GET\", \"POST\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function chartAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = ($request->get('filter') ? json_decode($request->get('filter'), true) : null);\n        $drillDownFilters = $request->get('drillDownFilters', null);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n\n        $configuration = $config->getDataSourceConfig();\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n        $result = $adapter->getData($filters, $sort, $dir, null, null, null, $drillDownFilters);\n\n        return $this->adminJson([\n            'success' => true,\n            'data' => $result['data'],\n            'total' => $result['total'],\n        ]);\n    }\n\n    /**\n     * @Route(\"/create-csv\", name=\"pimcore_admin_reports_customreport_createcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return JsonResponse\n     */\n    public function createCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n\n        set_time_limit(300);\n\n        $sort = $request->get('sort');\n        $dir = $request->get('dir');\n        $filters = $request->get('filter') ? json_decode(urldecode($request->get('filter')), true) : null;\n        $drillDownFilters = $request->get('drillDownFilters', null);\n        $includeHeaders = $request->get('headers', false);\n\n        $config = CustomReport\\Config::getByName($request->get('name'));\n\n        $columns = $config->getColumnConfiguration();\n        $fields = [];\n        foreach ($columns as $column) {\n            if ($column['export']) {\n                $fields[] = $column['name'];\n            }\n        }\n\n        $configuration = $config->getDataSourceConfig();\n        //if many rows returned as an array than use the first row. Fixes: #782\n        $configuration = is_array($configuration)\n            ? $configuration[0]\n            : $configuration;\n\n        $adapter = CustomReport\\Config::getAdapter($configuration, $config);\n\n        $offset = $request->get('offset', 0);\n        $limit = 5000;\n        $tempData = [];\n        $result = $adapter->getData($filters, $sort, $dir, $offset * $limit, $limit, $fields, $drillDownFilters);\n        ++$offset;\n\n        if (!($exportFile = $request->get('exportFile'))) {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/report-export-' . uniqid() . '.csv';\n            @unlink($exportFile);\n        }\n\n        $fp = fopen($exportFile, 'a');\n\n        if ($includeHeaders) {\n            fputcsv($fp, $fields, ';');\n        }\n\n        foreach ($result['data'] as $row) {\n            fputcsv($fp, array_values($row), ';');\n        }\n\n        fclose($fp);\n\n        $progress = $result['total'] ? ($offset * $limit) / $result['total'] : 1;\n        $progress = $progress > 1 ? 1 : $progress;\n\n        return new JsonResponse([\n            'exportFile' => basename($exportFile),\n            'offset' => $offset,\n            'progress' => $progress,\n            'finished' => empty($result['data']) || count($result['data']) < $limit,\n        ]);\n    }\n\n    /**\n     * @Route(\"/download-csv\", name=\"pimcore_admin_reports_customreport_downloadcsv\", methods={\"GET\"})\n     *\n     * @param Request $request\n     *\n     * @return BinaryFileResponse\n     */\n    public function downloadCsvAction(Request $request)\n    {\n        $this->checkPermission('reports');\n        if ($exportFile = $request->get('exportFile')) {\n            $exportFile = PIMCORE_SYSTEM_TEMP_DIRECTORY . '/' . basename($exportFile);\n            $response = new BinaryFileResponse($exportFile);\n            $response->headers->set('Content-Type', 'text/csv; charset=UTF-8');\n            $response->setContentDisposition(ResponseHeaderBag::DISPOSITION_ATTACHMENT, 'export.csv');\n            $response->deleteFileAfterSend(true);\n\n            return $response;\n        }\n        throw new FileNotFoundException(\"File \\\"$exportFile\\\" not found!\");\n    }\n}\n"], "filenames": ["bundles/AdminBundle/Controller/Reports/CustomReportController.php"], "buggy_code_start_loc": [436], "buggy_code_end_loc": [453], "fixing_code_start_loc": [436], "fixing_code_end_loc": [455], "type": "CWE-22", "message": "This affects the package pimcore/pimcore before 6.8.8. A Local FIle Inclusion vulnerability exists in the downloadCsvAction function of the CustomReportController class (bundles/AdminBundle/Controller/Reports/CustomReportController.php). An authenticated user can reach this function with a GET request at the following endpoint: /admin/reports/custom-report/download-csv?exportFile=&91;filename]. Since exportFile variable is not sanitized, an attacker can exploit a local file inclusion vulnerability.", "other": {"cve": {"id": "CVE-2021-23340", "sourceIdentifier": "report@snyk.io", "published": "2021-02-18T15:15:14.953", "lastModified": "2021-02-25T17:21:09.590", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "This affects the package pimcore/pimcore before 6.8.8. A Local FIle Inclusion vulnerability exists in the downloadCsvAction function of the CustomReportController class (bundles/AdminBundle/Controller/Reports/CustomReportController.php). An authenticated user can reach this function with a GET request at the following endpoint: /admin/reports/custom-report/download-csv?exportFile=&91;filename]. Since exportFile variable is not sanitized, an attacker can exploit a local file inclusion vulnerability."}, {"lang": "es", "value": "Esto afecta al paquete pimcore/pimcore versiones anteriores a 6.8.8.&#xa0;Se presenta una vulnerabilidad de inclusi\u00f3n de archivo local en la funci\u00f3n downloadCsvAction de la clase CustomReportController (bundles/AdminBundle/Controller/Reports/CustomReportController.php).&#xa0;Un usuario autenticado puede acceder a esta funci\u00f3n con una petici\u00f3n GET en el siguiente endpoint: /admin/reports/custom-report/download-csv?exportFile=&amp;91;filename].&#xa0;Dado que la variable exportFile no est\u00e1 saneada, un atacante puede explotar una vulnerabilidad de inclusi\u00f3n de archivos locales"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}, {"source": "report@snyk.io", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 4.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-22"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "6.8.8", "matchCriteriaId": "815CB9D7-CE44-4E76-8F5E-EAAC9BC8F7F5"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/blob/v6.7.2/bundles/AdminBundle/Controller/Reports/CustomReportController.php%23L454", "source": "report@snyk.io", "tags": ["Broken Link", "Third Party Advisory"]}, {"url": "https://github.com/pimcore/pimcore/commit/1786bdd4962ee51544fad537352c2b4223309442", "source": "report@snyk.io", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://snyk.io/vuln/SNYK-PHP-PIMCOREPIMCORE-1070132", "source": "report@snyk.io", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/1786bdd4962ee51544fad537352c2b4223309442"}}