{"buggy_code": ["/**\n * @preserve date-and-time.js (c) KNOWLEDGECODE | MIT\n */\n(function (global) {\n    'use strict';\n\n    var date = {},\n        locales = {},\n        plugins = {},\n        lang = 'en',\n        _res = {\n            MMMM: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            MMM: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dddd: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            ddd: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dd: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            A: ['AM', 'PM']\n        },\n        _formatter = {\n            YYYY: function (d/*, formatString*/) { return ('000' + d.getFullYear()).slice(-4); },\n            YY: function (d/*, formatString*/) { return ('0' + d.getFullYear()).slice(-2); },\n            Y: function (d/*, formatString*/) { return '' + d.getFullYear(); },\n            MMMM: function (d/*, formatString*/) { return this.res.MMMM[d.getMonth()]; },\n            MMM: function (d/*, formatString*/) { return this.res.MMM[d.getMonth()]; },\n            MM: function (d/*, formatString*/) { return ('0' + (d.getMonth() + 1)).slice(-2); },\n            M: function (d/*, formatString*/) { return '' + (d.getMonth() + 1); },\n            DD: function (d/*, formatString*/) { return ('0' + d.getDate()).slice(-2); },\n            D: function (d/*, formatString*/) { return '' + d.getDate(); },\n            HH: function (d/*, formatString*/) { return ('0' + d.getHours()).slice(-2); },\n            H: function (d/*, formatString*/) { return '' + d.getHours(); },\n            A: function (d/*, formatString*/) { return this.res.A[d.getHours() > 11 | 0]; },\n            hh: function (d/*, formatString*/) { return ('0' + (d.getHours() % 12 || 12)).slice(-2); },\n            h: function (d/*, formatString*/) { return '' + (d.getHours() % 12 || 12); },\n            mm: function (d/*, formatString*/) { return ('0' + d.getMinutes()).slice(-2); },\n            m: function (d/*, formatString*/) { return '' + d.getMinutes(); },\n            ss: function (d/*, formatString*/) { return ('0' + d.getSeconds()).slice(-2); },\n            s: function (d/*, formatString*/) { return '' + d.getSeconds(); },\n            SSS: function (d/*, formatString*/) { return ('00' + d.getMilliseconds()).slice(-3); },\n            SS: function (d/*, formatString*/) { return ('0' + (d.getMilliseconds() / 10 | 0)).slice(-2); },\n            S: function (d/*, formatString*/) { return '' + (d.getMilliseconds() / 100 | 0); },\n            dddd: function (d/*, formatString*/) { return this.res.dddd[d.getDay()]; },\n            ddd: function (d/*, formatString*/) { return this.res.ddd[d.getDay()]; },\n            dd: function (d/*, formatString*/) { return this.res.dd[d.getDay()]; },\n            Z: function (d/*, formatString*/) { return d.utc ? '+0000' : /[\\+-]\\d{4}/.exec(d.toTimeString())[0]; },\n            post: function (str) { return str; }\n        },\n        _parser = {\n            YYYY: function (str/*, formatString */) { return this.exec(/^\\d{4}/, str); },\n            Y: function (str/*, formatString */) { return this.exec(/^\\d{1,4}/, str); },\n            MMMM: function (str/*, formatString */) {\n                var result = this.find(this.res.MMMM, str);\n                result.value++;\n                return result;\n            },\n            MMM: function (str/*, formatString */) {\n                var result = this.find(this.res.MMM, str);\n                result.value++;\n                return result;\n            },\n            MM: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            M: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            DD: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            D: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            HH: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            H: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            A: function (str/*, formatString */) { return this.find(this.res.A, str); },\n            hh: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            h: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            mm: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            m: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            ss: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            s: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            SSS: function (str/*, formatString */) { return this.exec(/^\\d{1,3}/, str); },\n            SS: function (str/*, formatString */) {\n                var result = this.exec(/^\\d\\d?/, str);\n                result.value *= 10;\n                return result;\n            },\n            S: function (str/*, formatString */) {\n                var result = this.exec(/^\\d/, str);\n                result.value *= 100;\n                return result;\n            },\n            Z: function (str/*, formatString */) {\n                var result = this.exec(/^[\\+-]\\d{2}[0-5]\\d/, str);\n                result.value = (result.value / 100 | 0) * -60 - result.value % 100;\n                return result;\n            },\n            h12: function (h, a) { return (h === 12 ? 0 : h) + a * 12; },\n            exec: function (re, str) {\n                var result = (re.exec(str) || [''])[0];\n                return { value: result | 0, length: result.length };\n            },\n            find: function (array, str) {\n                var index = -1, length = 0;\n\n                for (var i = 0, len = array.length, item; i < len; i++) {\n                    item = array[i];\n                    if (!str.indexOf(item) && item.length > length) {\n                        index = i;\n                        length = item.length;\n                    }\n                }\n                return { value: index, length: length };\n            },\n            pre: function (str) { return str; }\n        },\n        customize = function (code, base, locale) {\n            var extend = function (proto, props, res) {\n                    var Locale = function (r) {\n                        if (r) { this.res = r; }\n                    };\n\n                    Locale.prototype = proto;\n                    Locale.prototype.constructor = Locale;\n\n                    var newLocale = new Locale(res),\n                        value;\n\n                    for (var key in props || {}) {\n                        value = props[key];\n                        newLocale[key] = value.slice ? value.slice() : value;\n                    }\n                    return newLocale;\n                },\n                loc = { res: extend(base.res, locale.res) };\n\n            loc.formatter = extend(base.formatter, locale.formatter, loc.res);\n            loc.parser = extend(base.parser, locale.parser, loc.res);\n            locales[code] = loc;\n        };\n\n    /**\n     * compiling a format string\n     * @param {string} formatString - a format string\n     * @returns {Array.<string>} a compiled object\n     */\n    date.compile = function (formatString) {\n        var re = /\\[([^\\[\\]]*|\\[[^\\[\\]]*\\])*\\]|([A-Za-z])\\2+|\\.{3}|./g, keys, pattern = [formatString];\n\n        while ((keys = re.exec(formatString))) {\n            pattern[pattern.length] = keys[0];\n        }\n        return pattern;\n    };\n\n    /**\n     * formatting a date\n     * @param {Date} dateObj - a Date object\n     * @param {string|Array.<string>} arg - a format string or a compiled object\n     * @param {boolean} [utc] - output as UTC\n     * @returns {string} a formatted string\n     */\n    date.format = function (dateObj, arg, utc) {\n        var pattern = typeof arg === 'string' ? date.compile(arg) : arg,\n            d = date.addMinutes(dateObj, utc ? dateObj.getTimezoneOffset() : 0),\n            formatter = locales[lang].formatter, str = '';\n\n        d.utc = utc || false;\n        for (var i = 1, len = pattern.length, token; i < len; i++) {\n            token = pattern[i];\n            str += formatter[token] ? formatter.post(formatter[token](d, pattern[0])) : token.replace(/\\[(.*)]/, '$1');\n        }\n        return str;\n    };\n\n    /**\n     * pre-parsing a date string\n     * @param {string} dateString - a date string\n     * @param {string|Array.<string>} arg - a format string or a compiled object\n     * @returns {Object} a date structure\n     */\n    date.preparse = function (dateString, arg) {\n        var pattern = typeof arg === 'string' ? date.compile(arg) : arg,\n            dt = { Y: 1970, M: 1, D: 1, H: 0, A: 0, h: 0, m: 0, s: 0, S: 0, Z: 0, _index: 0, _length: 0, _match: 0 },\n            comment = /\\[(.*)]/, parser = locales[lang].parser, offset = 0;\n\n        dateString = parser.pre(dateString);\n        for (var i = 1, len = pattern.length, token, result; i < len; i++) {\n            token = pattern[i];\n            if (parser[token]) {\n                result = parser[token](dateString.slice(offset), pattern[0]);\n                if (!result.length) {\n                    break;\n                }\n                offset += result.length;\n                dt[token.charAt(0)] = result.value;\n                dt._match++;\n            } else if (token === dateString.charAt(offset) || token === ' ') {\n                offset++;\n            } else if (comment.test(token) && !dateString.slice(offset).indexOf(comment.exec(token)[1])) {\n                offset += token.length - 2;\n            } else if (token === '...') {\n                offset = dateString.length;\n                break;\n            } else {\n                break;\n            }\n        }\n        dt.H = dt.H || parser.h12(dt.h, dt.A);\n        dt._index = offset;\n        dt._length = dateString.length;\n        return dt;\n    };\n\n    /**\n     * validation\n     * @param {Object|string} arg1 - a date structure or a date string\n     * @param {string|Array.<string>} [arg2] - a format string or a compiled object\n     * @returns {boolean} whether the date string is a valid date\n     */\n    date.isValid = function (arg1, arg2) {\n        var dt = typeof arg1 === 'string' ? date.preparse(arg1, arg2) : arg1,\n            last = [31, 28 + date.isLeapYear(dt.Y) | 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][dt.M - 1];\n\n        return !(\n            dt._index < 1 || dt._length < 1 || dt._index - dt._length || dt._match < 1 ||\n            dt.Y < 1 || dt.Y > 9999 || dt.M < 1 || dt.M > 12 || dt.D < 1 || dt.D > last ||\n            dt.H < 0 || dt.H > 23 || dt.m < 0 || dt.m > 59 || dt.s < 0 || dt.s > 59 || dt.S < 0 || dt.S > 999 ||\n            dt.Z < -720 || dt.Z > 840\n        );\n    };\n\n    /**\n     * parsing a date string\n     * @param {string} dateString - a date string\n     * @param {string|Array.<string>} arg - a format string or a compiled object\n     * @param {boolean} [utc] - input as UTC\n     * @returns {Date} a constructed date\n     */\n    date.parse = function (dateString, arg, utc) {\n        var dt = date.preparse(dateString, arg);\n\n        if (date.isValid(dt)) {\n            dt.M -= dt.Y < 100 ? 22801 : 1; // 22801 = 1900 * 12 + 1\n            if (utc || dt.Z) {\n                return new Date(Date.UTC(dt.Y, dt.M, dt.D, dt.H, dt.m + dt.Z, dt.s, dt.S));\n            }\n            return new Date(dt.Y, dt.M, dt.D, dt.H, dt.m, dt.s, dt.S);\n        }\n        return new Date(NaN);\n    };\n\n    /**\n     * transformation of date string\n     * @param {string} dateString - a date string\n     * @param {string|Array.<string>} arg1 - the format string of the date string or the compiled object\n     * @param {string|Array.<string>} arg2 - the transformed format string or the compiled object\n     * @param {boolean} [utc] - output as UTC\n     * @returns {string} a formatted string\n     */\n    date.transform = function (dateString, arg1, arg2, utc) {\n        return date.format(date.parse(dateString, arg1), arg2, utc);\n    };\n\n    /**\n     * adding years\n     * @param {Date} dateObj - a date object\n     * @param {number} years - number of years to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addYears = function (dateObj, years) {\n        return date.addMonths(dateObj, years * 12);\n    };\n\n    /**\n     * adding months\n     * @param {Date} dateObj - a date object\n     * @param {number} months - number of months to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addMonths = function (dateObj, months) {\n        var d = new Date(dateObj.getTime());\n\n        d.setMonth(d.getMonth() + months);\n        return d;\n    };\n\n    /**\n     * adding days\n     * @param {Date} dateObj - a date object\n     * @param {number} days - number of days to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addDays = function (dateObj, days) {\n        var d = new Date(dateObj.getTime());\n\n        d.setDate(d.getDate() + days);\n        return d;\n    };\n\n    /**\n     * adding hours\n     * @param {Date} dateObj - a date object\n     * @param {number} hours - number of hours to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addHours = function (dateObj, hours) {\n        return date.addMinutes(dateObj, hours * 60);\n    };\n\n    /**\n     * adding minutes\n     * @param {Date} dateObj - a date object\n     * @param {number} minutes - number of minutes to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addMinutes = function (dateObj, minutes) {\n        return date.addSeconds(dateObj, minutes * 60);\n    };\n\n    /**\n     * adding seconds\n     * @param {Date} dateObj - a date object\n     * @param {number} seconds - number of seconds to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addSeconds = function (dateObj, seconds) {\n        return date.addMilliseconds(dateObj, seconds * 1000);\n    };\n\n    /**\n     * adding milliseconds\n     * @param {Date} dateObj - a date object\n     * @param {number} milliseconds - number of milliseconds to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addMilliseconds = function (dateObj, milliseconds) {\n        return new Date(dateObj.getTime() + milliseconds);\n    };\n\n    /**\n     * subtracting\n     * @param {Date} date1 - a Date object\n     * @param {Date} date2 - a Date object\n     * @returns {Object} a result object subtracting date2 from date1\n     */\n    date.subtract = function (date1, date2) {\n        var delta = date1.getTime() - date2.getTime();\n\n        return {\n            toMilliseconds: function () {\n                return delta;\n            },\n            toSeconds: function () {\n                return delta / 1000;\n            },\n            toMinutes: function () {\n                return delta / 60000;\n            },\n            toHours: function () {\n                return delta / 3600000;\n            },\n            toDays: function () {\n                return delta / 86400000;\n            }\n        };\n    };\n\n    /**\n     * leap year\n     * @param {number} y - year\n     * @returns {boolean} whether the year is a leap year\n     */\n    date.isLeapYear = function (y) {\n        return (!(y % 4) && !!(y % 100)) || !(y % 400);\n    };\n\n    /**\n     * comparison of two dates\n     * @param {Date} date1 - a Date object\n     * @param {Date} date2 - a Date object\n     * @returns {boolean} whether the dates are the same day (times are ignored)\n     */\n    date.isSameDay = function (date1, date2) {\n        return date1.toDateString() === date2.toDateString();\n    };\n\n    /**\n     * change locale or setting a new locale definition\n     * @param {Function|string} [code] - locale function | language code\n     * @param {Object} [locale] - locale definition\n     * @returns {string} current language code\n     */\n    date.locale = function (code, locale) {\n        if (locale) {\n            customize(code, { res: _res, formatter: _formatter, parser: _parser }, locale);\n        } else if (typeof code === 'function') {\n            lang = code(date);\n        } else if (code) {\n            if (global && !global.date) {\n                console.warn('This method of changing the locale is deprecated. See documentation for details.');\n            }\n            lang = code;\n        }\n        return lang;\n    };\n\n    /**\n     * locale extension\n     * @param {Object} extension - locale extension\n     * @returns {void}\n     */\n    date.extend = function (extension) {\n        var extender = extension.extender || {};\n\n        for (var key in extender) {\n            if (!date[key]) {\n                date[key] = extender[key];\n            }\n        }\n        if (extension.formatter || extension.parser || extension.res) {\n            customize(lang, locales[lang], extension);\n        }\n    };\n\n    /**\n     * plugin import or definition\n     * @param {Function|string} plugin - plugin function | plugin name\n     * @param {Object} [extension] - locale extension\n     * @returns {void}\n     */\n    date.plugin = function (plugin, extension) {\n        if (typeof plugin === 'function') {\n            date.extend(plugins[plugin(date)]);\n        } else {\n            plugins[plugin] = plugins[plugin] || extension;\n            if (!extension && plugins[plugin]) {\n                date.extend(plugins[plugin]);\n                if (global && !global.date) {\n                    console.warn('This method of applying plugins is deprecated. See documentation for details.');\n                }\n            }\n        }\n    };\n\n    // Create default locale (English)\n    date.locale(lang, {});\n\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = date;\n    } else if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return date;\n        });\n    } else {\n        global.date = date;\n    }\n\n}(this));\n", "/*\n date-and-time.js (c) KNOWLEDGECODE | MIT\n*/\n(function(q){var d={},t={},r={},m=\"en\",v={MMMM:\"January February March April May June July August September October November December\".split(\" \"),MMM:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \"),dddd:\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),ddd:\"Sun Mon Tue Wed Thu Fri Sat\".split(\" \"),dd:\"Su Mo Tu We Th Fr Sa\".split(\" \"),A:[\"AM\",\"PM\"]},w={YYYY:function(a){return(\"000\"+a.getFullYear()).slice(-4)},YY:function(a){return(\"0\"+a.getFullYear()).slice(-2)},Y:function(a){return\"\"+\na.getFullYear()},MMMM:function(a){return this.res.MMMM[a.getMonth()]},MMM:function(a){return this.res.MMM[a.getMonth()]},MM:function(a){return(\"0\"+(a.getMonth()+1)).slice(-2)},M:function(a){return\"\"+(a.getMonth()+1)},DD:function(a){return(\"0\"+a.getDate()).slice(-2)},D:function(a){return\"\"+a.getDate()},HH:function(a){return(\"0\"+a.getHours()).slice(-2)},H:function(a){return\"\"+a.getHours()},A:function(a){return this.res.A[11<a.getHours()|0]},hh:function(a){return(\"0\"+(a.getHours()%12||12)).slice(-2)},\nh:function(a){return\"\"+(a.getHours()%12||12)},mm:function(a){return(\"0\"+a.getMinutes()).slice(-2)},m:function(a){return\"\"+a.getMinutes()},ss:function(a){return(\"0\"+a.getSeconds()).slice(-2)},s:function(a){return\"\"+a.getSeconds()},SSS:function(a){return(\"00\"+a.getMilliseconds()).slice(-3)},SS:function(a){return(\"0\"+(a.getMilliseconds()/10|0)).slice(-2)},S:function(a){return\"\"+(a.getMilliseconds()/100|0)},dddd:function(a){return this.res.dddd[a.getDay()]},ddd:function(a){return this.res.ddd[a.getDay()]},\ndd:function(a){return this.res.dd[a.getDay()]},Z:function(a){return a.utc?\"+0000\":/[\\+-]\\d{4}/.exec(a.toTimeString())[0]},post:function(a){return a}},x={YYYY:function(a){return this.exec(/^\\d{4}/,a)},Y:function(a){return this.exec(/^\\d{1,4}/,a)},MMMM:function(a){a=this.find(this.res.MMMM,a);a.value++;return a},MMM:function(a){a=this.find(this.res.MMM,a);a.value++;return a},MM:function(a){return this.exec(/^\\d\\d/,a)},M:function(a){return this.exec(/^\\d\\d?/,a)},DD:function(a){return this.exec(/^\\d\\d/,\na)},D:function(a){return this.exec(/^\\d\\d?/,a)},HH:function(a){return this.exec(/^\\d\\d/,a)},H:function(a){return this.exec(/^\\d\\d?/,a)},A:function(a){return this.find(this.res.A,a)},hh:function(a){return this.exec(/^\\d\\d/,a)},h:function(a){return this.exec(/^\\d\\d?/,a)},mm:function(a){return this.exec(/^\\d\\d/,a)},m:function(a){return this.exec(/^\\d\\d?/,a)},ss:function(a){return this.exec(/^\\d\\d/,a)},s:function(a){return this.exec(/^\\d\\d?/,a)},SSS:function(a){return this.exec(/^\\d{1,3}/,a)},SS:function(a){a=\nthis.exec(/^\\d\\d?/,a);a.value*=10;return a},S:function(a){a=this.exec(/^\\d/,a);a.value*=100;return a},Z:function(a){a=this.exec(/^[\\+-]\\d{2}[0-5]\\d/,a);a.value=-60*(a.value/100|0)-a.value%100;return a},h12:function(a,c){return(12===a?0:a)+12*c},exec:function(a,c){var b=(a.exec(c)||[\"\"])[0];return{value:b|0,length:b.length}},find:function(a,c){for(var b=-1,e=0,g=0,h=a.length,f;g<h;g++)f=a[g],!c.indexOf(f)&&f.length>e&&(b=g,e=f.length);return{value:b,length:e}},pre:function(a){return a}},u=function(a,\nc,b){var e=function(h,f,l){var p=function(n){n&&(this.res=n)};p.prototype=h;p.prototype.constructor=p;h=new p(l);for(var k in f||{})l=f[k],h[k]=l.slice?l.slice():l;return h},g={res:e(c.res,b.res)};g.formatter=e(c.formatter,b.formatter,g.res);g.parser=e(c.parser,b.parser,g.res);t[a]=g};d.compile=function(a){for(var c=/\\[([^\\[\\]]*|\\[[^\\[\\]]*\\])*\\]|([A-Za-z])\\2+|\\.{3}|./g,b,e=[a];b=c.exec(a);)e[e.length]=b[0];return e};d.format=function(a,c,b){c=\"string\"===typeof c?d.compile(c):c;a=d.addMinutes(a,b?\na.getTimezoneOffset():0);var e=t[m].formatter,g=\"\";a.utc=b||!1;b=1;for(var h=c.length,f;b<h;b++)f=c[b],g+=e[f]?e.post(e[f](a,c[0])):f.replace(/\\[(.*)]/,\"$1\");return g};d.preparse=function(a,c){var b=\"string\"===typeof c?d.compile(c):c,e={Y:1970,M:1,D:1,H:0,A:0,h:0,m:0,s:0,S:0,Z:0,_index:0,_length:0,_match:0},g=/\\[(.*)]/,h=t[m].parser,f=0;a=h.pre(a);for(var l=1,p=b.length,k,n;l<p;l++)if(k=b[l],h[k]){n=h[k](a.slice(f),b[0]);if(!n.length)break;f+=n.length;e[k.charAt(0)]=n.value;e._match++}else if(k===\na.charAt(f)||\" \"===k)f++;else if(g.test(k)&&!a.slice(f).indexOf(g.exec(k)[1]))f+=k.length-2;else{\"...\"===k&&(f=a.length);break}e.H=e.H||h.h12(e.h,e.A);e._index=f;e._length=a.length;return e};d.isValid=function(a,c){var b=\"string\"===typeof a?d.preparse(a,c):a,e=[31,28+d.isLeapYear(b.Y)|0,31,30,31,30,31,31,30,31,30,31][b.M-1];return!(1>b._index||1>b._length||b._index-b._length||1>b._match||1>b.Y||9999<b.Y||1>b.M||12<b.M||1>b.D||b.D>e||0>b.H||23<b.H||0>b.m||59<b.m||0>b.s||59<b.s||0>b.S||999<b.S||-720>\nb.Z||840<b.Z)};d.parse=function(a,c,b){a=d.preparse(a,c);return d.isValid(a)?(a.M-=100>a.Y?22801:1,b||a.Z?new Date(Date.UTC(a.Y,a.M,a.D,a.H,a.m+a.Z,a.s,a.S)):new Date(a.Y,a.M,a.D,a.H,a.m,a.s,a.S)):new Date(NaN)};d.transform=function(a,c,b,e){return d.format(d.parse(a,c),b,e)};d.addYears=function(a,c){return d.addMonths(a,12*c)};d.addMonths=function(a,c){var b=new Date(a.getTime());b.setMonth(b.getMonth()+c);return b};d.addDays=function(a,c){var b=new Date(a.getTime());b.setDate(b.getDate()+c);return b};\nd.addHours=function(a,c){return d.addMinutes(a,60*c)};d.addMinutes=function(a,c){return d.addSeconds(a,60*c)};d.addSeconds=function(a,c){return d.addMilliseconds(a,1E3*c)};d.addMilliseconds=function(a,c){return new Date(a.getTime()+c)};d.subtract=function(a,c){var b=a.getTime()-c.getTime();return{toMilliseconds:function(){return b},toSeconds:function(){return b/1E3},toMinutes:function(){return b/6E4},toHours:function(){return b/36E5},toDays:function(){return b/864E5}}};d.isLeapYear=function(a){return!(a%\n4)&&!!(a%100)||!(a%400)};d.isSameDay=function(a,c){return a.toDateString()===c.toDateString()};d.locale=function(a,c){c?u(a,{res:v,formatter:w,parser:x},c):\"function\"===typeof a?m=a(d):a&&(q&&!q.date&&console.warn(\"This method of changing the locale is deprecated. See documentation for details.\"),m=a);return m};d.extend=function(a){var c=a.extender||{},b;for(b in c)d[b]||(d[b]=c[b]);(a.formatter||a.parser||a.res)&&u(m,t[m],a)};d.plugin=function(a,c){\"function\"===typeof a?d.extend(r[a(d)]):(r[a]=r[a]||\nc,!c&&r[a]&&(d.extend(r[a]),q&&!q.date&&console.warn(\"This method of applying plugins is deprecated. See documentation for details.\")))};d.locale(m,{});\"object\"===typeof module&&\"object\"===typeof module.exports?module.exports=d:\"function\"===typeof define&&define.amd?define([],function(){return d}):q.date=d})(this);\n"], "fixing_code": ["/**\n * @preserve date-and-time.js (c) KNOWLEDGECODE | MIT\n */\n(function (global) {\n    'use strict';\n\n    var date = {},\n        locales = {},\n        plugins = {},\n        lang = 'en',\n        _res = {\n            MMMM: ['January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November', 'December'],\n            MMM: ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'],\n            dddd: ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'],\n            ddd: ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'],\n            dd: ['Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'],\n            A: ['AM', 'PM']\n        },\n        _formatter = {\n            YYYY: function (d/*, formatString*/) { return ('000' + d.getFullYear()).slice(-4); },\n            YY: function (d/*, formatString*/) { return ('0' + d.getFullYear()).slice(-2); },\n            Y: function (d/*, formatString*/) { return '' + d.getFullYear(); },\n            MMMM: function (d/*, formatString*/) { return this.res.MMMM[d.getMonth()]; },\n            MMM: function (d/*, formatString*/) { return this.res.MMM[d.getMonth()]; },\n            MM: function (d/*, formatString*/) { return ('0' + (d.getMonth() + 1)).slice(-2); },\n            M: function (d/*, formatString*/) { return '' + (d.getMonth() + 1); },\n            DD: function (d/*, formatString*/) { return ('0' + d.getDate()).slice(-2); },\n            D: function (d/*, formatString*/) { return '' + d.getDate(); },\n            HH: function (d/*, formatString*/) { return ('0' + d.getHours()).slice(-2); },\n            H: function (d/*, formatString*/) { return '' + d.getHours(); },\n            A: function (d/*, formatString*/) { return this.res.A[d.getHours() > 11 | 0]; },\n            hh: function (d/*, formatString*/) { return ('0' + (d.getHours() % 12 || 12)).slice(-2); },\n            h: function (d/*, formatString*/) { return '' + (d.getHours() % 12 || 12); },\n            mm: function (d/*, formatString*/) { return ('0' + d.getMinutes()).slice(-2); },\n            m: function (d/*, formatString*/) { return '' + d.getMinutes(); },\n            ss: function (d/*, formatString*/) { return ('0' + d.getSeconds()).slice(-2); },\n            s: function (d/*, formatString*/) { return '' + d.getSeconds(); },\n            SSS: function (d/*, formatString*/) { return ('00' + d.getMilliseconds()).slice(-3); },\n            SS: function (d/*, formatString*/) { return ('0' + (d.getMilliseconds() / 10 | 0)).slice(-2); },\n            S: function (d/*, formatString*/) { return '' + (d.getMilliseconds() / 100 | 0); },\n            dddd: function (d/*, formatString*/) { return this.res.dddd[d.getDay()]; },\n            ddd: function (d/*, formatString*/) { return this.res.ddd[d.getDay()]; },\n            dd: function (d/*, formatString*/) { return this.res.dd[d.getDay()]; },\n            Z: function (d/*, formatString*/) { return d.utc ? '+0000' : /[\\+-]\\d{4}/.exec(d.toTimeString())[0]; },\n            post: function (str) { return str; }\n        },\n        _parser = {\n            YYYY: function (str/*, formatString */) { return this.exec(/^\\d{4}/, str); },\n            Y: function (str/*, formatString */) { return this.exec(/^\\d{1,4}/, str); },\n            MMMM: function (str/*, formatString */) {\n                var result = this.find(this.res.MMMM, str);\n                result.value++;\n                return result;\n            },\n            MMM: function (str/*, formatString */) {\n                var result = this.find(this.res.MMM, str);\n                result.value++;\n                return result;\n            },\n            MM: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            M: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            DD: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            D: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            HH: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            H: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            A: function (str/*, formatString */) { return this.find(this.res.A, str); },\n            hh: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            h: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            mm: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            m: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            ss: function (str/*, formatString */) { return this.exec(/^\\d\\d/, str); },\n            s: function (str/*, formatString */) { return this.exec(/^\\d\\d?/, str); },\n            SSS: function (str/*, formatString */) { return this.exec(/^\\d{1,3}/, str); },\n            SS: function (str/*, formatString */) {\n                var result = this.exec(/^\\d\\d?/, str);\n                result.value *= 10;\n                return result;\n            },\n            S: function (str/*, formatString */) {\n                var result = this.exec(/^\\d/, str);\n                result.value *= 100;\n                return result;\n            },\n            Z: function (str/*, formatString */) {\n                var result = this.exec(/^[\\+-]\\d{2}[0-5]\\d/, str);\n                result.value = (result.value / 100 | 0) * -60 - result.value % 100;\n                return result;\n            },\n            h12: function (h, a) { return (h === 12 ? 0 : h) + a * 12; },\n            exec: function (re, str) {\n                var result = (re.exec(str) || [''])[0];\n                return { value: result | 0, length: result.length };\n            },\n            find: function (array, str) {\n                var index = -1, length = 0;\n\n                for (var i = 0, len = array.length, item; i < len; i++) {\n                    item = array[i];\n                    if (!str.indexOf(item) && item.length > length) {\n                        index = i;\n                        length = item.length;\n                    }\n                }\n                return { value: index, length: length };\n            },\n            pre: function (str) { return str; }\n        },\n        customize = function (code, base, locale) {\n            var extend = function (proto, props, res) {\n                    var Locale = function (r) {\n                        if (r) { this.res = r; }\n                    };\n\n                    Locale.prototype = proto;\n                    Locale.prototype.constructor = Locale;\n\n                    var newLocale = new Locale(res),\n                        value;\n\n                    for (var key in props || {}) {\n                        value = props[key];\n                        newLocale[key] = value.slice ? value.slice() : value;\n                    }\n                    return newLocale;\n                },\n                loc = { res: extend(base.res, locale.res) };\n\n            loc.formatter = extend(base.formatter, locale.formatter, loc.res);\n            loc.parser = extend(base.parser, locale.parser, loc.res);\n            locales[code] = loc;\n        };\n\n    /**\n     * compiling a format string\n     * @param {string} formatString - a format string\n     * @returns {Array.<string>} a compiled object\n     */\n    date.compile = function (formatString) {\n        var re = /\\[([^\\[\\]]|\\[[^\\[\\]]*])*]|([A-Za-z])\\2+|\\.{3}|./g, keys, pattern = [formatString];\n\n        while ((keys = re.exec(formatString))) {\n            pattern[pattern.length] = keys[0];\n        }\n        return pattern;\n    };\n\n    /**\n     * formatting a date\n     * @param {Date} dateObj - a Date object\n     * @param {string|Array.<string>} arg - a format string or a compiled object\n     * @param {boolean} [utc] - output as UTC\n     * @returns {string} a formatted string\n     */\n    date.format = function (dateObj, arg, utc) {\n        var pattern = typeof arg === 'string' ? date.compile(arg) : arg,\n            d = date.addMinutes(dateObj, utc ? dateObj.getTimezoneOffset() : 0),\n            formatter = locales[lang].formatter, str = '';\n\n        d.utc = utc || false;\n        for (var i = 1, len = pattern.length, token; i < len; i++) {\n            token = pattern[i];\n            str += formatter[token] ? formatter.post(formatter[token](d, pattern[0])) : token.replace(/\\[(.*)]/, '$1');\n        }\n        return str;\n    };\n\n    /**\n     * pre-parsing a date string\n     * @param {string} dateString - a date string\n     * @param {string|Array.<string>} arg - a format string or a compiled object\n     * @returns {Object} a date structure\n     */\n    date.preparse = function (dateString, arg) {\n        var pattern = typeof arg === 'string' ? date.compile(arg) : arg,\n            dt = { Y: 1970, M: 1, D: 1, H: 0, A: 0, h: 0, m: 0, s: 0, S: 0, Z: 0, _index: 0, _length: 0, _match: 0 },\n            comment = /\\[(.*)]/, parser = locales[lang].parser, offset = 0;\n\n        dateString = parser.pre(dateString);\n        for (var i = 1, len = pattern.length, token, result; i < len; i++) {\n            token = pattern[i];\n            if (parser[token]) {\n                result = parser[token](dateString.slice(offset), pattern[0]);\n                if (!result.length) {\n                    break;\n                }\n                offset += result.length;\n                dt[token.charAt(0)] = result.value;\n                dt._match++;\n            } else if (token === dateString.charAt(offset) || token === ' ') {\n                offset++;\n            } else if (comment.test(token) && !dateString.slice(offset).indexOf(comment.exec(token)[1])) {\n                offset += token.length - 2;\n            } else if (token === '...') {\n                offset = dateString.length;\n                break;\n            } else {\n                break;\n            }\n        }\n        dt.H = dt.H || parser.h12(dt.h, dt.A);\n        dt._index = offset;\n        dt._length = dateString.length;\n        return dt;\n    };\n\n    /**\n     * validation\n     * @param {Object|string} arg1 - a date structure or a date string\n     * @param {string|Array.<string>} [arg2] - a format string or a compiled object\n     * @returns {boolean} whether the date string is a valid date\n     */\n    date.isValid = function (arg1, arg2) {\n        var dt = typeof arg1 === 'string' ? date.preparse(arg1, arg2) : arg1,\n            last = [31, 28 + date.isLeapYear(dt.Y) | 0, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31][dt.M - 1];\n\n        return !(\n            dt._index < 1 || dt._length < 1 || dt._index - dt._length || dt._match < 1 ||\n            dt.Y < 1 || dt.Y > 9999 || dt.M < 1 || dt.M > 12 || dt.D < 1 || dt.D > last ||\n            dt.H < 0 || dt.H > 23 || dt.m < 0 || dt.m > 59 || dt.s < 0 || dt.s > 59 || dt.S < 0 || dt.S > 999 ||\n            dt.Z < -720 || dt.Z > 840\n        );\n    };\n\n    /**\n     * parsing a date string\n     * @param {string} dateString - a date string\n     * @param {string|Array.<string>} arg - a format string or a compiled object\n     * @param {boolean} [utc] - input as UTC\n     * @returns {Date} a constructed date\n     */\n    date.parse = function (dateString, arg, utc) {\n        var dt = date.preparse(dateString, arg);\n\n        if (date.isValid(dt)) {\n            dt.M -= dt.Y < 100 ? 22801 : 1; // 22801 = 1900 * 12 + 1\n            if (utc || dt.Z) {\n                return new Date(Date.UTC(dt.Y, dt.M, dt.D, dt.H, dt.m + dt.Z, dt.s, dt.S));\n            }\n            return new Date(dt.Y, dt.M, dt.D, dt.H, dt.m, dt.s, dt.S);\n        }\n        return new Date(NaN);\n    };\n\n    /**\n     * transformation of date string\n     * @param {string} dateString - a date string\n     * @param {string|Array.<string>} arg1 - the format string of the date string or the compiled object\n     * @param {string|Array.<string>} arg2 - the transformed format string or the compiled object\n     * @param {boolean} [utc] - output as UTC\n     * @returns {string} a formatted string\n     */\n    date.transform = function (dateString, arg1, arg2, utc) {\n        return date.format(date.parse(dateString, arg1), arg2, utc);\n    };\n\n    /**\n     * adding years\n     * @param {Date} dateObj - a date object\n     * @param {number} years - number of years to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addYears = function (dateObj, years) {\n        return date.addMonths(dateObj, years * 12);\n    };\n\n    /**\n     * adding months\n     * @param {Date} dateObj - a date object\n     * @param {number} months - number of months to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addMonths = function (dateObj, months) {\n        var d = new Date(dateObj.getTime());\n\n        d.setMonth(d.getMonth() + months);\n        return d;\n    };\n\n    /**\n     * adding days\n     * @param {Date} dateObj - a date object\n     * @param {number} days - number of days to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addDays = function (dateObj, days) {\n        var d = new Date(dateObj.getTime());\n\n        d.setDate(d.getDate() + days);\n        return d;\n    };\n\n    /**\n     * adding hours\n     * @param {Date} dateObj - a date object\n     * @param {number} hours - number of hours to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addHours = function (dateObj, hours) {\n        return date.addMinutes(dateObj, hours * 60);\n    };\n\n    /**\n     * adding minutes\n     * @param {Date} dateObj - a date object\n     * @param {number} minutes - number of minutes to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addMinutes = function (dateObj, minutes) {\n        return date.addSeconds(dateObj, minutes * 60);\n    };\n\n    /**\n     * adding seconds\n     * @param {Date} dateObj - a date object\n     * @param {number} seconds - number of seconds to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addSeconds = function (dateObj, seconds) {\n        return date.addMilliseconds(dateObj, seconds * 1000);\n    };\n\n    /**\n     * adding milliseconds\n     * @param {Date} dateObj - a date object\n     * @param {number} milliseconds - number of milliseconds to add\n     * @returns {Date} a date after adding the value\n     */\n    date.addMilliseconds = function (dateObj, milliseconds) {\n        return new Date(dateObj.getTime() + milliseconds);\n    };\n\n    /**\n     * subtracting\n     * @param {Date} date1 - a Date object\n     * @param {Date} date2 - a Date object\n     * @returns {Object} a result object subtracting date2 from date1\n     */\n    date.subtract = function (date1, date2) {\n        var delta = date1.getTime() - date2.getTime();\n\n        return {\n            toMilliseconds: function () {\n                return delta;\n            },\n            toSeconds: function () {\n                return delta / 1000;\n            },\n            toMinutes: function () {\n                return delta / 60000;\n            },\n            toHours: function () {\n                return delta / 3600000;\n            },\n            toDays: function () {\n                return delta / 86400000;\n            }\n        };\n    };\n\n    /**\n     * leap year\n     * @param {number} y - year\n     * @returns {boolean} whether the year is a leap year\n     */\n    date.isLeapYear = function (y) {\n        return (!(y % 4) && !!(y % 100)) || !(y % 400);\n    };\n\n    /**\n     * comparison of two dates\n     * @param {Date} date1 - a Date object\n     * @param {Date} date2 - a Date object\n     * @returns {boolean} whether the dates are the same day (times are ignored)\n     */\n    date.isSameDay = function (date1, date2) {\n        return date1.toDateString() === date2.toDateString();\n    };\n\n    /**\n     * change locale or setting a new locale definition\n     * @param {Function|string} [code] - locale function | language code\n     * @param {Object} [locale] - locale definition\n     * @returns {string} current language code\n     */\n    date.locale = function (code, locale) {\n        if (locale) {\n            customize(code, { res: _res, formatter: _formatter, parser: _parser }, locale);\n        } else if (typeof code === 'function') {\n            lang = code(date);\n        } else if (code) {\n            if (global && !global.date) {\n                console.warn('This method of changing the locale is deprecated. See documentation for details.');\n            }\n            lang = code;\n        }\n        return lang;\n    };\n\n    /**\n     * locale extension\n     * @param {Object} extension - locale extension\n     * @returns {void}\n     */\n    date.extend = function (extension) {\n        var extender = extension.extender || {};\n\n        for (var key in extender) {\n            if (!date[key]) {\n                date[key] = extender[key];\n            }\n        }\n        if (extension.formatter || extension.parser || extension.res) {\n            customize(lang, locales[lang], extension);\n        }\n    };\n\n    /**\n     * plugin import or definition\n     * @param {Function|string} plugin - plugin function | plugin name\n     * @param {Object} [extension] - locale extension\n     * @returns {void}\n     */\n    date.plugin = function (plugin, extension) {\n        if (typeof plugin === 'function') {\n            date.extend(plugins[plugin(date)]);\n        } else {\n            plugins[plugin] = plugins[plugin] || extension;\n            if (!extension && plugins[plugin]) {\n                date.extend(plugins[plugin]);\n                if (global && !global.date) {\n                    console.warn('This method of applying plugins is deprecated. See documentation for details.');\n                }\n            }\n        }\n    };\n\n    // Create default locale (English)\n    date.locale(lang, {});\n\n    if (typeof module === 'object' && typeof module.exports === 'object') {\n        module.exports = date;\n    } else if (typeof define === 'function' && define.amd) {\n        define([], function () {\n            return date;\n        });\n    } else {\n        global.date = date;\n    }\n\n}(this));\n", "/*\n date-and-time.js (c) KNOWLEDGECODE | MIT\n*/\n(function(q){var d={},t={},r={},m=\"en\",v={MMMM:\"January February March April May June July August September October November December\".split(\" \"),MMM:\"Jan Feb Mar Apr May Jun Jul Aug Sep Oct Nov Dec\".split(\" \"),dddd:\"Sunday Monday Tuesday Wednesday Thursday Friday Saturday\".split(\" \"),ddd:\"Sun Mon Tue Wed Thu Fri Sat\".split(\" \"),dd:\"Su Mo Tu We Th Fr Sa\".split(\" \"),A:[\"AM\",\"PM\"]},w={YYYY:function(a){return(\"000\"+a.getFullYear()).slice(-4)},YY:function(a){return(\"0\"+a.getFullYear()).slice(-2)},Y:function(a){return\"\"+\na.getFullYear()},MMMM:function(a){return this.res.MMMM[a.getMonth()]},MMM:function(a){return this.res.MMM[a.getMonth()]},MM:function(a){return(\"0\"+(a.getMonth()+1)).slice(-2)},M:function(a){return\"\"+(a.getMonth()+1)},DD:function(a){return(\"0\"+a.getDate()).slice(-2)},D:function(a){return\"\"+a.getDate()},HH:function(a){return(\"0\"+a.getHours()).slice(-2)},H:function(a){return\"\"+a.getHours()},A:function(a){return this.res.A[11<a.getHours()|0]},hh:function(a){return(\"0\"+(a.getHours()%12||12)).slice(-2)},\nh:function(a){return\"\"+(a.getHours()%12||12)},mm:function(a){return(\"0\"+a.getMinutes()).slice(-2)},m:function(a){return\"\"+a.getMinutes()},ss:function(a){return(\"0\"+a.getSeconds()).slice(-2)},s:function(a){return\"\"+a.getSeconds()},SSS:function(a){return(\"00\"+a.getMilliseconds()).slice(-3)},SS:function(a){return(\"0\"+(a.getMilliseconds()/10|0)).slice(-2)},S:function(a){return\"\"+(a.getMilliseconds()/100|0)},dddd:function(a){return this.res.dddd[a.getDay()]},ddd:function(a){return this.res.ddd[a.getDay()]},\ndd:function(a){return this.res.dd[a.getDay()]},Z:function(a){return a.utc?\"+0000\":/[\\+-]\\d{4}/.exec(a.toTimeString())[0]},post:function(a){return a}},x={YYYY:function(a){return this.exec(/^\\d{4}/,a)},Y:function(a){return this.exec(/^\\d{1,4}/,a)},MMMM:function(a){a=this.find(this.res.MMMM,a);a.value++;return a},MMM:function(a){a=this.find(this.res.MMM,a);a.value++;return a},MM:function(a){return this.exec(/^\\d\\d/,a)},M:function(a){return this.exec(/^\\d\\d?/,a)},DD:function(a){return this.exec(/^\\d\\d/,\na)},D:function(a){return this.exec(/^\\d\\d?/,a)},HH:function(a){return this.exec(/^\\d\\d/,a)},H:function(a){return this.exec(/^\\d\\d?/,a)},A:function(a){return this.find(this.res.A,a)},hh:function(a){return this.exec(/^\\d\\d/,a)},h:function(a){return this.exec(/^\\d\\d?/,a)},mm:function(a){return this.exec(/^\\d\\d/,a)},m:function(a){return this.exec(/^\\d\\d?/,a)},ss:function(a){return this.exec(/^\\d\\d/,a)},s:function(a){return this.exec(/^\\d\\d?/,a)},SSS:function(a){return this.exec(/^\\d{1,3}/,a)},SS:function(a){a=\nthis.exec(/^\\d\\d?/,a);a.value*=10;return a},S:function(a){a=this.exec(/^\\d/,a);a.value*=100;return a},Z:function(a){a=this.exec(/^[\\+-]\\d{2}[0-5]\\d/,a);a.value=-60*(a.value/100|0)-a.value%100;return a},h12:function(a,c){return(12===a?0:a)+12*c},exec:function(a,c){var b=(a.exec(c)||[\"\"])[0];return{value:b|0,length:b.length}},find:function(a,c){for(var b=-1,e=0,g=0,h=a.length,f;g<h;g++)f=a[g],!c.indexOf(f)&&f.length>e&&(b=g,e=f.length);return{value:b,length:e}},pre:function(a){return a}},u=function(a,\nc,b){var e=function(h,f,l){var p=function(n){n&&(this.res=n)};p.prototype=h;p.prototype.constructor=p;h=new p(l);for(var k in f||{})l=f[k],h[k]=l.slice?l.slice():l;return h},g={res:e(c.res,b.res)};g.formatter=e(c.formatter,b.formatter,g.res);g.parser=e(c.parser,b.parser,g.res);t[a]=g};d.compile=function(a){for(var c=/\\[([^\\[\\]]|\\[[^\\[\\]]*])*]|([A-Za-z])\\2+|\\.{3}|./g,b,e=[a];b=c.exec(a);)e[e.length]=b[0];return e};d.format=function(a,c,b){c=\"string\"===typeof c?d.compile(c):c;a=d.addMinutes(a,b?a.getTimezoneOffset():\n0);var e=t[m].formatter,g=\"\";a.utc=b||!1;b=1;for(var h=c.length,f;b<h;b++)f=c[b],g+=e[f]?e.post(e[f](a,c[0])):f.replace(/\\[(.*)]/,\"$1\");return g};d.preparse=function(a,c){var b=\"string\"===typeof c?d.compile(c):c,e={Y:1970,M:1,D:1,H:0,A:0,h:0,m:0,s:0,S:0,Z:0,_index:0,_length:0,_match:0},g=/\\[(.*)]/,h=t[m].parser,f=0;a=h.pre(a);for(var l=1,p=b.length,k,n;l<p;l++)if(k=b[l],h[k]){n=h[k](a.slice(f),b[0]);if(!n.length)break;f+=n.length;e[k.charAt(0)]=n.value;e._match++}else if(k===a.charAt(f)||\" \"===k)f++;\nelse if(g.test(k)&&!a.slice(f).indexOf(g.exec(k)[1]))f+=k.length-2;else{\"...\"===k&&(f=a.length);break}e.H=e.H||h.h12(e.h,e.A);e._index=f;e._length=a.length;return e};d.isValid=function(a,c){var b=\"string\"===typeof a?d.preparse(a,c):a,e=[31,28+d.isLeapYear(b.Y)|0,31,30,31,30,31,31,30,31,30,31][b.M-1];return!(1>b._index||1>b._length||b._index-b._length||1>b._match||1>b.Y||9999<b.Y||1>b.M||12<b.M||1>b.D||b.D>e||0>b.H||23<b.H||0>b.m||59<b.m||0>b.s||59<b.s||0>b.S||999<b.S||-720>b.Z||840<b.Z)};d.parse=\nfunction(a,c,b){a=d.preparse(a,c);return d.isValid(a)?(a.M-=100>a.Y?22801:1,b||a.Z?new Date(Date.UTC(a.Y,a.M,a.D,a.H,a.m+a.Z,a.s,a.S)):new Date(a.Y,a.M,a.D,a.H,a.m,a.s,a.S)):new Date(NaN)};d.transform=function(a,c,b,e){return d.format(d.parse(a,c),b,e)};d.addYears=function(a,c){return d.addMonths(a,12*c)};d.addMonths=function(a,c){var b=new Date(a.getTime());b.setMonth(b.getMonth()+c);return b};d.addDays=function(a,c){var b=new Date(a.getTime());b.setDate(b.getDate()+c);return b};d.addHours=function(a,\nc){return d.addMinutes(a,60*c)};d.addMinutes=function(a,c){return d.addSeconds(a,60*c)};d.addSeconds=function(a,c){return d.addMilliseconds(a,1E3*c)};d.addMilliseconds=function(a,c){return new Date(a.getTime()+c)};d.subtract=function(a,c){var b=a.getTime()-c.getTime();return{toMilliseconds:function(){return b},toSeconds:function(){return b/1E3},toMinutes:function(){return b/6E4},toHours:function(){return b/36E5},toDays:function(){return b/864E5}}};d.isLeapYear=function(a){return!(a%4)&&!!(a%100)||\n!(a%400)};d.isSameDay=function(a,c){return a.toDateString()===c.toDateString()};d.locale=function(a,c){c?u(a,{res:v,formatter:w,parser:x},c):\"function\"===typeof a?m=a(d):a&&(q&&!q.date&&console.warn(\"This method of changing the locale is deprecated. See documentation for details.\"),m=a);return m};d.extend=function(a){var c=a.extender||{},b;for(b in c)d[b]||(d[b]=c[b]);(a.formatter||a.parser||a.res)&&u(m,t[m],a)};d.plugin=function(a,c){\"function\"===typeof a?d.extend(r[a(d)]):(r[a]=r[a]||c,!c&&r[a]&&\n(d.extend(r[a]),q&&!q.date&&console.warn(\"This method of applying plugins is deprecated. See documentation for details.\")))};d.locale(m,{});\"object\"===typeof module&&\"object\"===typeof module.exports?module.exports=d:\"function\"===typeof define&&define.amd?define([],function(){return d}):q.date=d})(this);\n"], "filenames": ["date-and-time.js", "date-and-time.min.js"], "buggy_code_start_loc": [139, 10], "buggy_code_end_loc": [140, 17], "fixing_code_start_loc": [139, 10], "fixing_code_end_loc": [140, 17], "type": "CWE-400", "message": "date-and-time is an npm package for manipulating date and time. In date-and-time before version 0.14.2, there a regular expression involved in parsing which can be exploited to to cause a denial of service. This is fixed in version 0.14.2.", "other": {"cve": {"id": "CVE-2020-26289", "sourceIdentifier": "security-advisories@github.com", "published": "2020-12-28T19:15:12.907", "lastModified": "2020-12-30T15:51:17.230", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "date-and-time is an npm package for manipulating date and time. In date-and-time before version 0.14.2, there a regular expression involved in parsing which can be exploited to to cause a denial of service. This is fixed in version 0.14.2."}, {"lang": "es", "value": "date-and-time es un paquete npm para manipular la fecha y la hora.&#xa0;En date-and-time versi\u00f3n anterior a 0.14.2, se presenta una expresi\u00f3n regular involucrada en el an\u00e1lisis que puede ser explotada para causar una denegaci\u00f3n de servicio.&#xa0;Esto es corregido en la versi\u00f3n 0.14.2"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-400"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:date-and-time_project:date-and-time:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "0.14.2", "matchCriteriaId": "E2BDED94-23BF-417B-8EAB-47051D12BD0A"}]}]}], "references": [{"url": "https://github.com/knowledgecode/date-and-time/commit/9e4b501eacddccc8b1f559fb414f48472ee17c2a", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/knowledgecode/date-and-time/security/advisories/GHSA-r92x-f52r-x54g", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://www.npmjs.com/package/date-and-time", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/knowledgecode/date-and-time/commit/9e4b501eacddccc8b1f559fb414f48472ee17c2a"}}