{"buggy_code": ["<?php\n\n/**\n * Escaping Functions\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Boyd Stephen Smith Jr.\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2011 Boyd Stephen Smith Jr.\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n/**\n * Escape a javascript literal.\n */\nfunction js_escape($text)\n{\n    return json_encode($text);\n}\n\n/**\n * Escape a javascript literal within html onclick attribute.\n */\nfunction attr_js($text)\n{\n    return attr(json_encode($text));\n}\n\n/**\n * Escape html and url encode a url item.\n */\nfunction attr_url($text)\n{\n    return attr(urlencode($text ?? ''));\n}\n\n/**\n * Escape js and url encode a url item.\n */\nfunction js_url($text)\n{\n    return js_escape(urlencode($text));\n}\n\n/**\n * Escape variables that are outputted into the php error log.\n */\nfunction errorLogEscape($text)\n{\n    return attr($text);\n}\n\n/**\n * Escape variables that are outputted into csv and spreadsheet files.\n * See here: https://www.owasp.org/index.php/CSV_Injection\n * Based mitigation strategy on this report: https://asecurityz.blogspot.com/2017/12/csv-injection-mitigations.html\n *  1. Remove all the following characters:  = + \" |\n *  2. Only remove leading - characters (since need in dates)\n *  3. Only remove leading @ characters (since need in email addresses)\n *  4. Surround with double quotes (no reference link, but seems very reasonable, which will prevent commas from breaking things).\n * If needed in future, will add a second parameter called 'options' which will be an array of option tokens that will allow\n * less stringent (or more stringent) mechanisms to escape for csv.\n */\nfunction csvEscape($text)\n{\n    // 1. Remove all the following characters:  = + \" |\n    $text = preg_replace('/[=+\"|]/', '', $text);\n\n    // 2. Only remove leading - characters (since need in dates)\n    // 3. Only remove leading @ characters (since need in email addresses)\n    $text = preg_replace('/^[\\-@]+/', '', $text);\n\n    // 4. Surround with double quotes (no reference link, but seems very reasonable, which will prevent commas from breaking things).\n    return '\"' . $text . '\"';\n}\n\n/**\n *\n * references: https://stackoverflow.com/questions/3426090/how-do-you-make-strings-xml-safe\n *             https://www.php.net/htmlspecialchars\n *             https://www.php.net/XMLWriter\n *\n *\n * Escapes & < > ' \"\n * TODO: not sure if need to escape ' and \", which are escaping for now (via the ENT_QUOTES flag)\n */\nfunction xmlEscape($text)\n{\n    return htmlspecialchars(($text ?? ''), ENT_XML1 | ENT_QUOTES);\n}\n\n/**\n * Escape a PHP string for use as (part of) an HTML / XML text node.\n *\n * It only escapes a few special chars: the ampersand (&) and both the left-\n * pointing angle bracket (<) and the right-pointing angle bracket (>), since\n * these are the only characters that are special in a text node.  Minimal\n * quoting is preferred because it produces smaller and more easily human-\n * readable output.\n *\n * Some characters simply cannot appear in valid XML documents, even\n * as entities but, this function does not attempt to handle them.\n *\n * NOTE: Attribute values are NOT text nodes, and require additional escaping.\n *\n * @param string $text The string to escape, possibly including \"&\", \"<\",\n *                     or \">\".\n * @return string The string, with \"&\", \"<\", and \">\" escaped.\n */\nfunction text($text)\n{\n    return htmlspecialchars(($text ?? ''), ENT_NOQUOTES);\n}\n\n/**\n * Escape a PHP string for use as (part of) an HTML / XML attribute value.\n *\n * It escapes several special chars: the ampersand (&), the double quote\n * (\"), the singlequote ('), and both the left-pointing angle bracket (<)\n * and the right-pointing angle bracket (>), since these are the characters\n * that are special in an attribute value.\n *\n * Some characters simply cannot appear in valid XML documents, even\n * as entities but, this function does not attempt to handle them.\n *\n * NOTE: This can be used as a \"generic\" HTML escape since it does maximal\n * quoting.  However, some HTML and XML contexts (CDATA) don't provide\n * escape mechanisms.  Also, further pre- or post-escaping might need to\n * be done when embdedded other languages (like JavaScript) inside HTML /\n * XML documents.\n *\n * @param string $text The string to escape, possibly including (&), (<),\n *                     (>), ('), and (\").\n * @return string The string, with (&), (<), (>), (\"), and (') escaped.\n */\nfunction attr($text)\n{\n    return htmlspecialchars(($text ?? ''), ENT_QUOTES);\n}\n\n/**\n * Don't call this function.  You don't see this function.  This function\n * doesn't exist.\n *\n * TODO: Hide this function so it can be called from this file but not from\n * PHP that includes / requires this file.  Either that, or write reasonable\n * documentation and clean up the name.\n */\nfunction hsc_private_xl_or_warn($key)\n{\n    if (function_exists('xl')) {\n        return xl($key);\n    } else {\n        trigger_error(\n            'Translation via xl() was requested, but the xl()'\n            . ' function is not defined, yet.',\n            E_USER_WARNING\n        );\n        return $key;\n    }\n}\n\n/**\n * Translate via xl() and then escape via text().\n *\n * @param string $key The string to escape, possibly including \"&\", \"<\",\n *                    or \">\".\n * @return string The string, with \"&\", \"<\", and \">\" escaped.\n */\nfunction xlt($key)\n{\n    return text(hsc_private_xl_or_warn($key));\n}\n\n/**\n * Translate via xl() and then escape via attr().\n *\n * @param string $key The string to escape, possibly including (&), (<),\n *                    (>), ('), and (\").\n * @return string The string, with (&), (<), (>), (\"), and (') escaped.\n */\nfunction xla($key)\n{\n    return attr(hsc_private_xl_or_warn($key));\n}\n\n/*\n * Translate via xl() and then escape via js_escape for use with javascript literals\n */\nfunction xlj($key)\n{\n    return js_escape(hsc_private_xl_or_warn($key));\n}\n\n/*\n * Deprecated\n *Translate via xl() and then escape via addslashes for use with javascript literals\n */\nfunction xls($key)\n{\n    return addslashes(hsc_private_xl_or_warn($key));\n}\n", "<?php\n\n/**\n * TwigExtension class.\n *\n * OpenEMR central extension interface for twig.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019-2021 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace OpenEMR\\Common\\Twig;\n\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Core\\Header;\nuse OpenEMR\\Core\\Kernel;\nuse OpenEMR\\OeUI\\OemrUI;\nuse OpenEMR\\Services\\Globals\\GlobalsService;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\Extension\\GlobalsInterface;\nuse Twig\\TwigFilter;\nuse Twig\\TwigFunction;\nuse Twig\\TwigTest;\n\nclass TwigExtension extends AbstractExtension implements GlobalsInterface\n{\n    protected $globals;\n\n    /**\n     * @var Kernel\n     */\n    protected $kernel;\n\n    /**\n     * TwigExtension constructor.\n     * @param GlobalsService $globals\n     * @param Kernel|null $kernel\n     */\n    public function __construct(GlobalsService $globals, ?Kernel $kernel)\n    {\n        $this->globals = $globals->getGlobalsMetadata();\n        $this->kernel = $kernel;\n    }\n\n    public function getGlobals(): array\n    {\n        return [\n            'assets_dir' => $this->globals['assets_static_relative'],\n            'srcdir' => $this->globals['srcdir'],\n            'rootdir' => $this->globals['rootdir'],\n            'webroot' => $this->globals['webroot'],\n            'assetVersion' => $this->globals['v_js_includes'],\n        ];\n    }\n\n    public function getTests(): array\n    {\n        return [\n            // can be used like {% if is numeric %}...{% endif %}\n            new TwigTest('numeric', function ($value) {\n                return is_numeric($value); })\n        ];\n    }\n\n    public function getFunctions(): array\n    {\n        return [\n            new TwigFunction(\n                'setupHeader',\n                function ($assets = array()) {\n                    return Header::setupHeader($assets);\n                }\n            ),\n\n            new TwigFunction(\n                'generateFormField',\n                function ($frow, $currentValue) {\n                    // generate_form_field() echo's the form, here we capture the echo into\n                    // the output buffer, assign it to a variable and return the variable\n                    // this allows twig templates to call generate_form_field().\n                    ob_start();\n                    generate_form_field($frow, $currentValue);\n                    return ob_get_clean();\n                }\n            ),\n\n            new TwigFunction(\n                'tabRow',\n                function ($formType, $result1, $result2) {\n                    ob_start();\n                    display_layout_tabs($formType, $result1, $result2);\n                    return ob_get_clean();\n                }\n            ),\n\n            new TwigFunction(\n                'tabData',\n                function ($formType, $result1, $result2) {\n                    ob_start();\n                    display_layout_tabs_data($formType, $result1, $result2);\n                    return ob_get_clean();\n                }\n            ),\n\n            new TwigFunction(\n                'imageWidget',\n                function ($id, $category) {\n                    ob_start();\n                    image_widget($id, $category);\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'fireEvent',\n                function ($eventName, $eventData = array()) {\n                    if (empty($this->kernel)) {\n                        return '';\n                    }\n                    ob_start();\n                    $this->kernel->getEventDispatcher()->dispatch(new GenericEvent($eventName, $eventData), $eventName);\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'csrfToken',\n                function ($subject = 'default') {\n                    return sprintf('<input type=\"hidden\" name=\"_token\" value=\"%s\">', attr(CsrfUtils::collectCsrfToken($subject)));\n                }\n            ),\n            new TwigFunction(\n                'csrfTokenRaw',\n                function ($subject = 'default') {\n                    return CsrfUtils::collectCsrfToken($subject);\n                }\n            ),\n            new TwigFunction(\n                'jqueryDateTimePicker',\n                function ($domSelector, $datetimepicker_timepicker = true, $datetimepicker_showseconds = true, $datetimepicker_formatInput = true) {\n                    ob_start();\n                    echo \"$('\" . $domSelector . \"').datetimepicker({\";\n\n                    require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php');\n                    echo \"})\";\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'DateToYYYYMMDD_js',\n                function () {\n                    ob_start();\n                    require $GLOBALS['srcdir'] . \"/formatting_DateToYYYYMMDD_js.js.php\";\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'oemrUiBelowContainerDiv',\n                function ($oemr_settings) {\n                    $oemrUi = new OemrUI($oemr_settings);\n                    ob_start();\n                    $oemrUi->oeBelowContainerDiv();\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'oemHelpIcon',\n                function () {\n                    // this setups a variable called $help_icon... strange\n                    require $GLOBALS['srcdir'] . \"/display_help_icon_inc.php\";\n                    return $help_icon ?? '';\n                }\n            )\n        ];\n    }\n\n    public function getFilters(): array\n    {\n        return [\n            new TwigFilter(\n                'text',\n                function ($string) {\n                    return text($string);\n                }\n            ),\n            new TwigFilter(\n                'attr',\n                function ($string) {\n                    return attr($string);\n                }\n            ),\n            new TwigFilter(\n                'js_escape',\n                function ($string) {\n                    return js_escape($string);\n                }\n            ),\n            new TwigFilter(\n                'attr_js',\n                function ($string) {\n                    return attr_js($string);\n                }\n            ),\n            new TwigFilter(\n                'attr_url',\n                function ($string) {\n                    return attr_url($string);\n                }\n            ),\n            new TwigFilter(\n                'js_url',\n                function ($string) {\n                    return js_url($string);\n                }\n            ),\n            new TwigFilter(\n                'xl',\n                function ($string) {\n                    return xl($string);\n                }\n            ),\n            new TwigFilter(\n                'xlt',\n                function ($string) {\n                    return xlt($string);\n                }\n            ),\n            new TwigFilter(\n                'xla',\n                function ($string) {\n                    return xla($string);\n                }\n            ),\n            new TwigFilter(\n                'xlj',\n                function ($string) {\n                    return xlj($string);\n                }\n            ),\n            new TwigFilter(\n                'xls',\n                function ($string) {\n                    return xls($string);\n                }\n            ),\n            new TwigFilter(\n                'money',\n                function ($amount) {\n                    return oeFormatMoney($amount);\n                }\n            ),\n            new TwigFilter(\n                'shortDate',\n                function ($string) {\n                    return oeFormatShortDate($string);\n                }\n            ),\n            new TwigFilter(\n                'xlDocCategory',\n                function ($string) {\n                    return xl_document_category($string);\n                }\n            ),\n\n            new TwigFilter(\n                'xlFormTitle',\n                function ($string) {\n                    return xl_form_title($string);\n                }\n            ),\n            // we have some weirdness if we have a date string in the format of YmdHi, it blows things up so we have\n            // to pass our date filters through this dateToTime function.  Hopefully we can figure this out later.\n            new TwigFilter(\n                'dateToTime',\n                function ($str) {\n                    return strtotime($str);\n                }\n            )\n        ];\n    }\n}\n", "<html>\n<head>\n    {{ setupHeader() }}\n    <title>{{ \"About\"|xlt }} {{ applicationTitle|text }}</title>\n    <script>\n        var registrationTranslations = {{ registrationTranslations }}\n        var registrationConstants = {\n            \"webroot\": {{ webroot|js_escape }}\n        }\n    </script>\n\n    <script src=\"{{ webroot|attr }}/interface/product_registration/product_registration_service.js?v={{ assetVersion|attr }}\"></script>\n    <script src=\"{{ webroot|attr }}/interface/product_registration/product_registration_controller.js?v={{ assetVersion|attr }}\"></script>\n\n    <script>\n        $(function () {\n            var productRegistrationController = new ProductRegistrationController();\n            productRegistrationController.getProductRegistrationStatus(function (err, data) {\n                if (err) { return; }\n\n                if (data.statusAsString === 'UNREGISTERED') {\n                    productRegistrationController.showProductRegistrationModal();\n                } else if (data.statusAsString === 'REGISTERED') {\n                    productRegistrationController.displayRegistrationInformationIfDivExists(data);\n                }\n            });\n        });\n    </script>\n</head>\n<body class=\"body_top\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-sm-12 col-lg-8 offset-lg-2 mt-5\">\n                <h1 class=\"text-center\">{{ \"About\"|xlt }} {{ applicationTitle|text }}</h1>\n\n                <span class=\"product-registration\">\n                    <span class=\"email\"></span>\n                </span>\n\n                <div class=\"version-info d-flex justify-content-between\">\n                    <p>{{ \"Version Number\"|xlt }}</p>\n                    <strong>{{ versionNumber|text }}</strong>\n                </div>\n\n                <div class=\"uuid-info d-flex justify-content-between\">\n                    <p>{{ \"Unique Installation UUID\"|xlt }}</p>\n                    <strong>{{ theUUID|text }}</strong>\n                </div>\n\n                {% if supportPhoneNumber %}\n                <div class=\"phone d-flex justify-content-between\">\n                    <p>{{ \"Support Phone Number\"|xlt }}</p>\n                    <strong><a href=\"tel:{{ supportPhoneNumber|attr }}\" target=\"_blank\">{{ supportPhoneNumber|text }}</a></strong>\n                </div>\n                {% endif %}\n\n                {% if onlineSupportHref %}\n                <div class=\"online-support d-flex justify-content-between\">\n                    <p>{{\" Online Support\"|xlt }}</p>\n                    <strong><a href=\"{{ onlineSupportHref|attr }}\" target=\"_blank\" rel=\"noopener\">{{ onlineSupportHref|text }}</a></strong>\n\n                </div>\n                {% endif %}\n\n                {% if userManualHref %}\n                <div class=\"user-manual mt-3\">\n                    <a href=\"{{ userManualHref|attr }}\" target=\"_blank\" rel=\"opener\" class=\"btn text-left btn-block btn-outline-secondary btn-lg\">\n                        <i class=\"fa fa-fw fa-book fa-lg\"></i>&nbsp;{{ \"User Manual\"|xlt }}\n                    </a>\n                </div>\n                {% endif %}\n\n                {% if displayAcknowledgements %}\n                <div class=\"ack mt-3\">\n                    <a href=\"../../acknowledge_license_cert.html\" target=\"_blank\" class=\"btn text-left btn-block btn-outline-secondary btn-lg\">\n                        <i class=\"fa fa-fw fa-certificate fa-lg\"></i>&nbsp;{{ \"Acknowledgments, Licensing and Certification\"|xlt }}\n                    </a>\n                </div>\n                {% endif %}\n\n                {% if displayReview %}\n                <div class=\"review mt-3\">\n                    <a href=\"https://www.softwareadvice.com/medical/openemr-review/?step=1\" target=\"_blank\" rel=\"noopener\" class=\"btn text-left btn-block btn-outline-secondary btn-lg\">\n                        <i class=\"fa fa-fw fa-thumbs-up fa-lg\"></i>&nbsp;{{ \"Write a Review\"|xlt }}\n                    </a>\n                </div>\n                {% endif %}\n\n                {% if displayDonations %}\n                <div class=\"donations mt-3\">\n                    <a href=\"https://www.open-emr.org/donate\" target=\"_blank\" rel=\"opener\" class=\"btn text-left btn-block btn-outline-danger btn-lg\">\n                        <i class=\"fa fa-fw fa-heart fa-lg\"></i>&nbsp;{{ \"Donate Now\"|xlt }}\n                    </a>\n                </div>\n                {% endif %}\n            </div>\n        </div>\n    </div>\n\n    <div class=\"product-registration-modal modal fade\">\n        <div class=\"modal-dialog modal-dialog-centered\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\"></div>\n                <div class=\"modal-body\">\n                    <p class=\"context\">\n                        {{ \"Register your installation with the OpenEMR Foundation to receive important notifications, such as security fixes and new release announcements.\"|xlt }}\n                    </p>\n                    <input placeholder=\"{{ 'email'|xla }}\" type=\"email\" class=\"email w-100 text-body form-control\">\n                    <p class=\"message font-italic\"></p>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-secondary submit\">{{ \"Submit\"|xlt }}</button>\n                    <button type=\"button\" class=\"btn btn-secondary nothanks\">{{ \"No Thanks\"|xlt }}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n"], "fixing_code": ["<?php\n\n/**\n * Escaping Functions\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Boyd Stephen Smith Jr.\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @copyright Copyright (c) 2011 Boyd Stephen Smith Jr.\n * @copyright Copyright (c) 2018 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\n/**\n * Escape a javascript literal.\n */\nfunction js_escape($text)\n{\n    return json_encode($text);\n}\n\n/**\n * Escape a javascript literal within html onclick attribute.\n */\nfunction attr_js($text)\n{\n    return attr(json_encode($text));\n}\n\n/**\n * Escape html and url encode a url item.\n */\nfunction attr_url($text)\n{\n    return attr(urlencode($text ?? ''));\n}\n\n/**\n * Escape js and url encode a url item.\n */\nfunction js_url($text)\n{\n    return js_escape(urlencode($text));\n}\n\n/**\n * Escape variables that are outputted into the php error log.\n */\nfunction errorLogEscape($text)\n{\n    return attr($text);\n}\n\n/**\n * Escape variables that are outputted into csv and spreadsheet files.\n * See here: https://www.owasp.org/index.php/CSV_Injection\n * Based mitigation strategy on this report: https://asecurityz.blogspot.com/2017/12/csv-injection-mitigations.html\n *  1. Remove all the following characters:  = + \" |\n *  2. Only remove leading - characters (since need in dates)\n *  3. Only remove leading @ characters (since need in email addresses)\n *  4. Surround with double quotes (no reference link, but seems very reasonable, which will prevent commas from breaking things).\n * If needed in future, will add a second parameter called 'options' which will be an array of option tokens that will allow\n * less stringent (or more stringent) mechanisms to escape for csv.\n */\nfunction csvEscape($text)\n{\n    // 1. Remove all the following characters:  = + \" |\n    $text = preg_replace('/[=+\"|]/', '', $text);\n\n    // 2. Only remove leading - characters (since need in dates)\n    // 3. Only remove leading @ characters (since need in email addresses)\n    $text = preg_replace('/^[\\-@]+/', '', $text);\n\n    // 4. Surround with double quotes (no reference link, but seems very reasonable, which will prevent commas from breaking things).\n    return '\"' . $text . '\"';\n}\n\n/**\n *\n * references: https://stackoverflow.com/questions/3426090/how-do-you-make-strings-xml-safe\n *             https://www.php.net/htmlspecialchars\n *             https://www.php.net/XMLWriter\n *\n *\n * Escapes & < > ' \"\n * TODO: not sure if need to escape ' and \", which are escaping for now (via the ENT_QUOTES flag)\n */\nfunction xmlEscape($text)\n{\n    return htmlspecialchars(($text ?? ''), ENT_XML1 | ENT_QUOTES);\n}\n\n/**\n * Special function to remove the 'javascript' string (case insensitive) for when including a variable within a html link\n */\nfunction javascriptStringRemove($text)\n{\n    return str_ireplace('javascript', '', $text ?? '');\n}\n\n/**\n * Escape a PHP string for use as (part of) an HTML / XML text node.\n *\n * It only escapes a few special chars: the ampersand (&) and both the left-\n * pointing angle bracket (<) and the right-pointing angle bracket (>), since\n * these are the only characters that are special in a text node.  Minimal\n * quoting is preferred because it produces smaller and more easily human-\n * readable output.\n *\n * Some characters simply cannot appear in valid XML documents, even\n * as entities but, this function does not attempt to handle them.\n *\n * NOTE: Attribute values are NOT text nodes, and require additional escaping.\n *\n * @param string $text The string to escape, possibly including \"&\", \"<\",\n *                     or \">\".\n * @return string The string, with \"&\", \"<\", and \">\" escaped.\n */\nfunction text($text)\n{\n    return htmlspecialchars(($text ?? ''), ENT_NOQUOTES);\n}\n\n/**\n * Escape a PHP string for use as (part of) an HTML / XML attribute value.\n *\n * It escapes several special chars: the ampersand (&), the double quote\n * (\"), the singlequote ('), and both the left-pointing angle bracket (<)\n * and the right-pointing angle bracket (>), since these are the characters\n * that are special in an attribute value.\n *\n * Some characters simply cannot appear in valid XML documents, even\n * as entities but, this function does not attempt to handle them.\n *\n * NOTE: This can be used as a \"generic\" HTML escape since it does maximal\n * quoting.  However, some HTML and XML contexts (CDATA) don't provide\n * escape mechanisms.  Also, further pre- or post-escaping might need to\n * be done when embdedded other languages (like JavaScript) inside HTML /\n * XML documents.\n *\n * @param string $text The string to escape, possibly including (&), (<),\n *                     (>), ('), and (\").\n * @return string The string, with (&), (<), (>), (\"), and (') escaped.\n */\nfunction attr($text)\n{\n    return htmlspecialchars(($text ?? ''), ENT_QUOTES);\n}\n\n/**\n * Don't call this function.  You don't see this function.  This function\n * doesn't exist.\n *\n * TODO: Hide this function so it can be called from this file but not from\n * PHP that includes / requires this file.  Either that, or write reasonable\n * documentation and clean up the name.\n */\nfunction hsc_private_xl_or_warn($key)\n{\n    if (function_exists('xl')) {\n        return xl($key);\n    } else {\n        trigger_error(\n            'Translation via xl() was requested, but the xl()'\n            . ' function is not defined, yet.',\n            E_USER_WARNING\n        );\n        return $key;\n    }\n}\n\n/**\n * Translate via xl() and then escape via text().\n *\n * @param string $key The string to escape, possibly including \"&\", \"<\",\n *                    or \">\".\n * @return string The string, with \"&\", \"<\", and \">\" escaped.\n */\nfunction xlt($key)\n{\n    return text(hsc_private_xl_or_warn($key));\n}\n\n/**\n * Translate via xl() and then escape via attr().\n *\n * @param string $key The string to escape, possibly including (&), (<),\n *                    (>), ('), and (\").\n * @return string The string, with (&), (<), (>), (\"), and (') escaped.\n */\nfunction xla($key)\n{\n    return attr(hsc_private_xl_or_warn($key));\n}\n\n/*\n * Translate via xl() and then escape via js_escape for use with javascript literals\n */\nfunction xlj($key)\n{\n    return js_escape(hsc_private_xl_or_warn($key));\n}\n\n/*\n * Deprecated\n *Translate via xl() and then escape via addslashes for use with javascript literals\n */\nfunction xls($key)\n{\n    return addslashes(hsc_private_xl_or_warn($key));\n}\n", "<?php\n\n/**\n * TwigExtension class.\n *\n * OpenEMR central extension interface for twig.\n *\n * @package   OpenEMR\n * @link      https://www.open-emr.org\n * @author    Brady Miller <brady.g.miller@gmail.com>\n * @author    Jerry Padgett <sjpadgett@gmail.com>\n * @copyright Copyright (c) 2019-2021 Brady Miller <brady.g.miller@gmail.com>\n * @license   https://github.com/openemr/openemr/blob/master/LICENSE GNU General Public License 3\n */\n\nnamespace OpenEMR\\Common\\Twig;\n\nuse OpenEMR\\Common\\Csrf\\CsrfUtils;\nuse OpenEMR\\Core\\Header;\nuse OpenEMR\\Core\\Kernel;\nuse OpenEMR\\OeUI\\OemrUI;\nuse OpenEMR\\Services\\Globals\\GlobalsService;\nuse Symfony\\Component\\EventDispatcher\\GenericEvent;\nuse Twig\\Extension\\AbstractExtension;\nuse Twig\\Extension\\GlobalsInterface;\nuse Twig\\TwigFilter;\nuse Twig\\TwigFunction;\nuse Twig\\TwigTest;\n\nclass TwigExtension extends AbstractExtension implements GlobalsInterface\n{\n    protected $globals;\n\n    /**\n     * @var Kernel\n     */\n    protected $kernel;\n\n    /**\n     * TwigExtension constructor.\n     * @param GlobalsService $globals\n     * @param Kernel|null $kernel\n     */\n    public function __construct(GlobalsService $globals, ?Kernel $kernel)\n    {\n        $this->globals = $globals->getGlobalsMetadata();\n        $this->kernel = $kernel;\n    }\n\n    public function getGlobals(): array\n    {\n        return [\n            'assets_dir' => $this->globals['assets_static_relative'],\n            'srcdir' => $this->globals['srcdir'],\n            'rootdir' => $this->globals['rootdir'],\n            'webroot' => $this->globals['webroot'],\n            'assetVersion' => $this->globals['v_js_includes'],\n        ];\n    }\n\n    public function getTests(): array\n    {\n        return [\n            // can be used like {% if is numeric %}...{% endif %}\n            new TwigTest('numeric', function ($value) {\n                return is_numeric($value); })\n        ];\n    }\n\n    public function getFunctions(): array\n    {\n        return [\n            new TwigFunction(\n                'setupHeader',\n                function ($assets = array()) {\n                    return Header::setupHeader($assets);\n                }\n            ),\n\n            new TwigFunction(\n                'generateFormField',\n                function ($frow, $currentValue) {\n                    // generate_form_field() echo's the form, here we capture the echo into\n                    // the output buffer, assign it to a variable and return the variable\n                    // this allows twig templates to call generate_form_field().\n                    ob_start();\n                    generate_form_field($frow, $currentValue);\n                    return ob_get_clean();\n                }\n            ),\n\n            new TwigFunction(\n                'tabRow',\n                function ($formType, $result1, $result2) {\n                    ob_start();\n                    display_layout_tabs($formType, $result1, $result2);\n                    return ob_get_clean();\n                }\n            ),\n\n            new TwigFunction(\n                'tabData',\n                function ($formType, $result1, $result2) {\n                    ob_start();\n                    display_layout_tabs_data($formType, $result1, $result2);\n                    return ob_get_clean();\n                }\n            ),\n\n            new TwigFunction(\n                'imageWidget',\n                function ($id, $category) {\n                    ob_start();\n                    image_widget($id, $category);\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'fireEvent',\n                function ($eventName, $eventData = array()) {\n                    if (empty($this->kernel)) {\n                        return '';\n                    }\n                    ob_start();\n                    $this->kernel->getEventDispatcher()->dispatch(new GenericEvent($eventName, $eventData), $eventName);\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'csrfToken',\n                function ($subject = 'default') {\n                    return sprintf('<input type=\"hidden\" name=\"_token\" value=\"%s\">', attr(CsrfUtils::collectCsrfToken($subject)));\n                }\n            ),\n            new TwigFunction(\n                'csrfTokenRaw',\n                function ($subject = 'default') {\n                    return CsrfUtils::collectCsrfToken($subject);\n                }\n            ),\n            new TwigFunction(\n                'jqueryDateTimePicker',\n                function ($domSelector, $datetimepicker_timepicker = true, $datetimepicker_showseconds = true, $datetimepicker_formatInput = true) {\n                    ob_start();\n                    echo \"$('\" . $domSelector . \"').datetimepicker({\";\n\n                    require($GLOBALS['srcdir'] . '/js/xl/jquery-datetimepicker-2-5-4.js.php');\n                    echo \"})\";\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'DateToYYYYMMDD_js',\n                function () {\n                    ob_start();\n                    require $GLOBALS['srcdir'] . \"/formatting_DateToYYYYMMDD_js.js.php\";\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'oemrUiBelowContainerDiv',\n                function ($oemr_settings) {\n                    $oemrUi = new OemrUI($oemr_settings);\n                    ob_start();\n                    $oemrUi->oeBelowContainerDiv();\n                    return ob_get_clean();\n                }\n            ),\n            new TwigFunction(\n                'oemHelpIcon',\n                function () {\n                    // this setups a variable called $help_icon... strange\n                    require $GLOBALS['srcdir'] . \"/display_help_icon_inc.php\";\n                    return $help_icon ?? '';\n                }\n            )\n        ];\n    }\n\n    public function getFilters(): array\n    {\n        return [\n            new TwigFilter(\n                'text',\n                function ($string) {\n                    return text($string);\n                }\n            ),\n            new TwigFilter(\n                'attr',\n                function ($string) {\n                    return attr($string);\n                }\n            ),\n            new TwigFilter(\n                'js_escape',\n                function ($string) {\n                    return js_escape($string);\n                }\n            ),\n            new TwigFilter(\n                'attr_js',\n                function ($string) {\n                    return attr_js($string);\n                }\n            ),\n            new TwigFilter(\n                'attr_url',\n                function ($string) {\n                    return attr_url($string);\n                }\n            ),\n            new TwigFilter(\n                'js_url',\n                function ($string) {\n                    return js_url($string);\n                }\n            ),\n            new TwigFilter(\n                'javascriptStringRemove',\n                function ($string) {\n                    return javascriptStringRemove($string);\n                }\n            ),\n            new TwigFilter(\n                'xl',\n                function ($string) {\n                    return xl($string);\n                }\n            ),\n            new TwigFilter(\n                'xlt',\n                function ($string) {\n                    return xlt($string);\n                }\n            ),\n            new TwigFilter(\n                'xla',\n                function ($string) {\n                    return xla($string);\n                }\n            ),\n            new TwigFilter(\n                'xlj',\n                function ($string) {\n                    return xlj($string);\n                }\n            ),\n            new TwigFilter(\n                'xls',\n                function ($string) {\n                    return xls($string);\n                }\n            ),\n            new TwigFilter(\n                'money',\n                function ($amount) {\n                    return oeFormatMoney($amount);\n                }\n            ),\n            new TwigFilter(\n                'shortDate',\n                function ($string) {\n                    return oeFormatShortDate($string);\n                }\n            ),\n            new TwigFilter(\n                'xlDocCategory',\n                function ($string) {\n                    return xl_document_category($string);\n                }\n            ),\n\n            new TwigFilter(\n                'xlFormTitle',\n                function ($string) {\n                    return xl_form_title($string);\n                }\n            ),\n            // we have some weirdness if we have a date string in the format of YmdHi, it blows things up so we have\n            // to pass our date filters through this dateToTime function.  Hopefully we can figure this out later.\n            new TwigFilter(\n                'dateToTime',\n                function ($str) {\n                    return strtotime($str);\n                }\n            )\n        ];\n    }\n}\n", "<html>\n<head>\n    {{ setupHeader() }}\n    <title>{{ \"About\"|xlt }} {{ applicationTitle|text }}</title>\n    <script>\n        var registrationTranslations = {{ registrationTranslations }}\n        var registrationConstants = {\n            \"webroot\": {{ webroot|js_escape }}\n        }\n    </script>\n\n    <script src=\"{{ webroot|attr }}/interface/product_registration/product_registration_service.js?v={{ assetVersion|attr }}\"></script>\n    <script src=\"{{ webroot|attr }}/interface/product_registration/product_registration_controller.js?v={{ assetVersion|attr }}\"></script>\n\n    <script>\n        $(function () {\n            var productRegistrationController = new ProductRegistrationController();\n            productRegistrationController.getProductRegistrationStatus(function (err, data) {\n                if (err) { return; }\n\n                if (data.statusAsString === 'UNREGISTERED') {\n                    productRegistrationController.showProductRegistrationModal();\n                } else if (data.statusAsString === 'REGISTERED') {\n                    productRegistrationController.displayRegistrationInformationIfDivExists(data);\n                }\n            });\n        });\n    </script>\n</head>\n<body class=\"body_top\">\n    <div class=\"container\">\n        <div class=\"row\">\n            <div class=\"col-sm-12 col-lg-8 offset-lg-2 mt-5\">\n                <h1 class=\"text-center\">{{ \"About\"|xlt }} {{ applicationTitle|text }}</h1>\n\n                <span class=\"product-registration\">\n                    <span class=\"email\"></span>\n                </span>\n\n                <div class=\"version-info d-flex justify-content-between\">\n                    <p>{{ \"Version Number\"|xlt }}</p>\n                    <strong>{{ versionNumber|text }}</strong>\n                </div>\n\n                <div class=\"uuid-info d-flex justify-content-between\">\n                    <p>{{ \"Unique Installation UUID\"|xlt }}</p>\n                    <strong>{{ theUUID|text }}</strong>\n                </div>\n\n                {% if supportPhoneNumber %}\n                <div class=\"phone d-flex justify-content-between\">\n                    <p>{{ \"Support Phone Number\"|xlt }}</p>\n                    <strong><a href=\"tel:{{ supportPhoneNumber|javascriptStringRemove|attr }}\" target=\"_blank\">{{ supportPhoneNumber|text }}</a></strong>\n                </div>\n                {% endif %}\n\n                {% if onlineSupportHref %}\n                <div class=\"online-support d-flex justify-content-between\">\n                    <p>{{\" Online Support\"|xlt }}</p>\n                    <strong><a href=\"{{ onlineSupportHref|javascriptStringRemove|attr }}\" target=\"_blank\" rel=\"noopener\">{{ onlineSupportHref|text }}</a></strong>\n\n                </div>\n                {% endif %}\n\n                {% if userManualHref %}\n                <div class=\"user-manual mt-3\">\n                    <a href=\"{{ userManualHref|javascriptStringRemove|attr }}\" target=\"_blank\" rel=\"opener\" class=\"btn text-left btn-block btn-outline-secondary btn-lg\">\n                        <i class=\"fa fa-fw fa-book fa-lg\"></i>&nbsp;{{ \"User Manual\"|xlt }}\n                    </a>\n                </div>\n                {% endif %}\n\n                {% if displayAcknowledgements %}\n                <div class=\"ack mt-3\">\n                    <a href=\"../../acknowledge_license_cert.html\" target=\"_blank\" class=\"btn text-left btn-block btn-outline-secondary btn-lg\">\n                        <i class=\"fa fa-fw fa-certificate fa-lg\"></i>&nbsp;{{ \"Acknowledgments, Licensing and Certification\"|xlt }}\n                    </a>\n                </div>\n                {% endif %}\n\n                {% if displayReview %}\n                <div class=\"review mt-3\">\n                    <a href=\"https://www.softwareadvice.com/medical/openemr-review/?step=1\" target=\"_blank\" rel=\"noopener\" class=\"btn text-left btn-block btn-outline-secondary btn-lg\">\n                        <i class=\"fa fa-fw fa-thumbs-up fa-lg\"></i>&nbsp;{{ \"Write a Review\"|xlt }}\n                    </a>\n                </div>\n                {% endif %}\n\n                {% if displayDonations %}\n                <div class=\"donations mt-3\">\n                    <a href=\"https://www.open-emr.org/donate\" target=\"_blank\" rel=\"opener\" class=\"btn text-left btn-block btn-outline-danger btn-lg\">\n                        <i class=\"fa fa-fw fa-heart fa-lg\"></i>&nbsp;{{ \"Donate Now\"|xlt }}\n                    </a>\n                </div>\n                {% endif %}\n            </div>\n        </div>\n    </div>\n\n    <div class=\"product-registration-modal modal fade\">\n        <div class=\"modal-dialog modal-dialog-centered\">\n            <div class=\"modal-content\">\n                <div class=\"modal-header\"></div>\n                <div class=\"modal-body\">\n                    <p class=\"context\">\n                        {{ \"Register your installation with the OpenEMR Foundation to receive important notifications, such as security fixes and new release announcements.\"|xlt }}\n                    </p>\n                    <input placeholder=\"{{ 'email'|xla }}\" type=\"email\" class=\"email w-100 text-body form-control\">\n                    <p class=\"message font-italic\"></p>\n                </div>\n                <div class=\"modal-footer\">\n                    <button type=\"button\" class=\"btn btn-secondary submit\">{{ \"Submit\"|xlt }}</button>\n                    <button type=\"button\" class=\"btn btn-secondary nothanks\">{{ \"No Thanks\"|xlt }}</button>\n                </div>\n            </div>\n        </div>\n    </div>\n</body>\n</html>\n"], "filenames": ["library/htmlspecialchars.inc.php", "src/Common/Twig/TwigExtension.php", "templates/core/about.html.twig"], "buggy_code_start_loc": [91, 219, 53], "buggy_code_end_loc": [91, 219, 68], "fixing_code_start_loc": [92, 220, 53], "fixing_code_end_loc": [100, 226, 68], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository openemr/openemr prior to 7.0.0.2.", "other": {"cve": {"id": "CVE-2022-4733", "sourceIdentifier": "security@huntr.dev", "published": "2022-12-27T15:15:12.700", "lastModified": "2023-01-05T16:30:54.203", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository openemr/openemr prior to 7.0.0.2."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 6.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.5}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:open-emr:openemr:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.0.0.2", "matchCriteriaId": "C397DED6-5350-43A0-B65D-FB92E8587CED"}]}]}], "references": [{"url": "https://github.com/openemr/openemr/commit/4565d8d1eb80c6aa42cf6b1810ba0a64e0f6abde", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/f353adfb-e5b8-43e7-957a-894670fd4ccd", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/openemr/openemr/commit/4565d8d1eb80c6aa42cf6b1810ba0a64e0f6abde"}}