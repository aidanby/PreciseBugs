{"buggy_code": ["<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Transformers\\LoginAttemptsTransformer;\nuse App\\Models\\Ldap;\nuse App\\Models\\Setting;\nuse App\\Notifications\\MailTest;\nuse App\\Services\\LdapAd;\nuse GuzzleHttp\\Client;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\Validator; // forward-port of v4 LDAP model for Sync\n\nclass SettingsController extends Controller\n{\n    /**\n     * Test the ldap settings\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @param App\\Models\\LdapAd $ldap\n     *\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function ldapAdSettingsTest(LdapAd $ldap): JsonResponse\n    {\n        if (! $ldap->init()) {\n            Log::info('LDAP is not enabled so we cannot test.');\n\n            return response()->json(['message' => 'LDAP is not enabled, cannot test.'], 400);\n        }\n\n        // The connect, bind and resulting users message\n        $message = [];\n\n        // This is all kinda fucked right now. The connection test doesn't actually do what you think,\n        // // and the way we parse the errors\n        // on the JS side is horrible.\n        Log::info('Preparing to test LDAP user login');\n        // Test user can connect to the LDAP server\n        try {\n            $ldap->testLdapAdUserConnection();\n            $message['login'] = [\n                'message' => 'Successfully connected to LDAP server.',\n            ];\n        } catch (\\Exception $ex) {\n            \\Log::debug('Connection to LDAP server '.Setting::getSettings()->ldap_server.' failed. Please check your LDAP settings and try again. Server Responded with error: '.$ex->getMessage());\n\n            return response()->json(\n                ['message' => 'Connection to LDAP server '.Setting::getSettings()->ldap_server.\" failed. Verify that the LDAP hostname is entered correctly and that it can be reached from this web server. \\n\\nServer Responded with error: \".$ex->getMessage(),\n\n                ], 400);\n        }\n\n        Log::info('Preparing to test LDAP bind connection');\n        // Test user can bind to the LDAP server\n        try {\n            Log::info('Testing Bind');\n            $ldap->testLdapAdBindConnection();\n            $message['bind'] = [\n                'message' => 'Successfully bound to LDAP server.',\n            ];\n        } catch (\\Exception $ex) {\n            Log::info('LDAP Bind failed');\n\n            return response()->json(['message' => 'Connection to LDAP successful, but we were unable to Bind the LDAP user '.Setting::getSettings()->ldap_uname.\". Verify your that your LDAP Bind username and password are correct. \\n\\nServer Responded with error: \".$ex->getMessage(),\n            ], 400);\n        }\n\n        Log::info('Preparing to get sample user set from LDAP directory');\n        // Get a sample of 10 users so user can verify the data is correct\n        $settings = Setting::getSettings();\n        try {\n            Log::info('Testing LDAP sync');\n            error_reporting(E_ALL & ~E_DEPRECATED); // workaround for php7.4, which deprecates ldap_control_paged_result\n            // $users = $ldap->testUserImportSync(); // from AdLdap2 from v5, disabling and falling back to v4's sync code\n            $users = collect(Ldap::findLdapUsers())->slice(0, 11)->filter(function ($value, $key) { //choosing ELEVEN because one is going to be the count, which we're about to filter out in the next line\n                return is_int($key);\n            })->map(function ($item) use ($settings) {\n                return (object) [\n                    'username'        => $item[$settings['ldap_username_field']][0] ?? null,\n                    'employee_number' => $item[$settings['ldap_emp_num']][0] ?? null,\n                    'lastname'        => $item[$settings['ldap_lname_field']][0] ?? null,\n                    'firstname'       => $item[$settings['ldap_fname_field']][0] ?? null,\n                    'email'           => $item[$settings['ldap_email']][0] ?? null,\n                ];\n            });\n            if ($users->count() > 0) {\n                $message['user_sync'] = [\n                    'users' => $users,\n                ];\n            } else {\n                $message['user_sync'] = [\n                    'message' => 'Connection to LDAP was successful, however there were no users returned from your query. You should confirm the Base Bind DN above.',\n                ];\n\n                return response()->json($message, 400);\n            }\n        } catch (\\Exception $ex) {\n            Log::info('LDAP sync failed');\n            $message['user_sync'] = [\n                'message' => 'Error getting users from LDAP directory, error: '.$ex->getMessage(),\n            ];\n\n            return response()->json($message, 400);\n        }\n\n        return response()->json($message, 200);\n    }\n\n    public function ldaptestlogin(Request $request, LdapAd $ldap)\n    {\n        if (Setting::getSettings()->ldap_enabled != '1') {\n            \\Log::debug('LDAP is not enabled. Cannot test.');\n\n            return response()->json(['message' => 'LDAP is not enabled, cannot test.'], 400);\n        }\n\n        $rules = [\n            'ldaptest_user' => 'required',\n            'ldaptest_password' => 'required',\n        ];\n\n        $validator = Validator::make($request->all(), $rules);\n        if ($validator->fails()) {\n            \\Log::debug('LDAP Validation test failed.');\n            $validation_errors = implode(' ', $validator->errors()->all());\n\n            return response()->json(['message' => $validator->errors()->all()], 400);\n        }\n\n        \\Log::debug('Preparing to test LDAP login');\n        try {\n            DB::beginTransaction(); //this was the easiest way to invoke a full test of an LDAP login without adding new users to the DB (which may not be desired)\n\n            // $results = $ldap->ldap->auth()->attempt($request->input('ldaptest_username'), $request->input('ldaptest_password'), true);\n            // can't do this because that's a protected property.\n\n            $results = $ldap->ldapLogin($request->input('ldaptest_user'), $request->input('ldaptest_password')); // this would normally create a user on success (if they didn't already exist), but for the transaction\n            if ($results) {\n                return response()->json(['message' => 'It worked! '.$request->input('ldaptest_user').' successfully binded to LDAP.'], 200);\n            } else {\n                return response()->json(['message' => 'Login Failed. '.$request->input('ldaptest_user').' did not successfully bind to LDAP.'], 400);\n            }\n        } catch (\\Exception $e) {\n            \\Log::debug('Connection failed');\n\n            return response()->json(['message' => $e->getMessage()], 400);\n        } finally {\n            DB::rollBack(); // ALWAYS rollback, whether success or failure\n        }\n    }\n\n    public function slacktest(Request $request)\n    {\n        $slack = new Client([\n            'base_url' => e($request->input('slack_endpoint')),\n            'defaults' => [\n                'exceptions' => false,\n            ],\n        ]);\n\n        $payload = json_encode(\n            [\n                'channel'    => e($request->input('slack_channel')),\n                'text'       => trans('general.slack_test_msg'),\n                'username'    => e($request->input('slack_botname')),\n                'icon_emoji' => ':heart:',\n            ]);\n\n        try {\n            $slack->post($request->input('slack_endpoint'), ['body' => $payload]);\n\n            return response()->json(['message' => 'Success'], 200);\n        } catch (\\Exception $e) {\n            return response()->json(['message' => 'Oops! Please check the channel name and webhook endpoint URL. Slack responded with: '.$e->getMessage()], 400);\n        }\n\n        return response()->json(['message' => 'Something went wrong :( '], 400);\n    }\n\n    /**\n     * Test the email configuration\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return Redirect\n     */\n    public function ajaxTestEmail()\n    {\n        if (! config('app.lock_passwords')) {\n            try {\n                Notification::send(Setting::first(), new MailTest());\n\n                return response()->json(['message' => 'Mail sent to '.config('mail.reply_to.address')], 200);\n            } catch (\\Exception $e) {\n                return response()->json(['message' => $e->getMessage()], 500);\n            }\n        }\n\n        return response()->json(['message' => 'Mail would have been sent, but this application is in demo mode! '], 200);\n    }\n\n    /**\n     * Delete server-cached barcodes\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0.0]\n     * @return Response\n     */\n    public function purgeBarcodes()\n    {\n        $file_count = 0;\n        $files = Storage::disk('public')->files('barcodes');\n\n        foreach ($files as $file) { // iterate files\n\n            $file_parts = explode('.', $file);\n            $extension = end($file_parts);\n            \\Log::debug($extension);\n\n            // Only generated barcodes would have a .png file extension\n            if ($extension == 'png') {\n                \\Log::debug('Deleting: '.$file);\n\n                try {\n                    Storage::disk('public')->delete($file);\n                    \\Log::debug('Deleting: '.$file);\n                    $file_count++;\n                } catch (\\Exception $e) {\n                    \\Log::debug($e);\n                }\n            }\n        }\n\n        return response()->json(['message' => 'Deleted '.$file_count.' barcodes'], 200);\n    }\n\n    /**\n     * Get a list of login attempts\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0.0]\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function showLoginAttempts(Request $request)\n    {\n        $allowed_columns = ['id', 'username', 'remote_ip', 'user_agent', 'successful', 'created_at'];\n\n        $login_attempts = DB::table('login_attempts');\n        $order = $request->input('order') === 'asc' ? 'asc' : 'desc';\n        $sort = in_array($request->get('sort'), $allowed_columns) ? $request->get('sort') : 'created_at';\n\n        $total = $login_attempts->count();\n        $login_attempts->orderBy($sort, $order);\n        $login_attempt_results = $login_attempts->skip(request('offset', 0))->take(request('limit', 20))->get();\n\n        return (new LoginAttemptsTransformer)->transformLoginAttempts($login_attempt_results, $total);\n    }\n}\n", "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Helpers\\Helper;\nuse App\\Helpers\\StorageHelper;\nuse App\\Http\\Requests\\ImageUploadRequest;\nuse App\\Http\\Requests\\SettingsSamlRequest;\nuse App\\Http\\Requests\\SetupUserRequest;\nuse App\\Models\\Setting;\nuse App\\Models\\User;\nuse App\\Notifications\\FirstAdminNotification;\nuse App\\Notifications\\MailTest;\nuse Auth;\nuse Crypt;\nuse DB;\nuse enshrined\\svgSanitize\\Sanitizer;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Image;\nuse Input;\nuse Redirect;\nuse Response;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Facades\\Artisan;\n\n/**\n * This controller handles all actions related to Settings for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass SettingsController extends Controller\n{\n    /**\n     * Checks to see whether or not the database has a migrations table\n     * and a user, otherwise display the setup view.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function getSetupIndex()\n    {\n        $start_settings['php_version_min'] = false;\n\n        if (version_compare(PHP_VERSION, config('app.min_php'), '<')) {\n            return response('<center><h1>This software requires PHP version '.config('app.min_php').' or greater. This server is running '.PHP_VERSION.'. </h1><h2>Please upgrade PHP on this server and try again. </h2></center>', 500);\n        }\n\n        try {\n            $conn = DB::select('select 2 + 2');\n            $start_settings['db_conn'] = true;\n            $start_settings['db_name'] = DB::connection()->getDatabaseName();\n            $start_settings['db_error'] = null;\n        } catch (\\PDOException $e) {\n            $start_settings['db_conn'] = false;\n            $start_settings['db_name'] = config('database.connections.mysql.database');\n            $start_settings['db_error'] = $e->getMessage();\n        }\n\n        $protocol = array_key_exists('HTTPS', $_SERVER) && ('on' == $_SERVER['HTTPS']) ? 'https://' : 'http://';\n\n        $host = array_key_exists('SERVER_NAME', $_SERVER) ? $_SERVER['SERVER_NAME'] : null;\n        $port = array_key_exists('SERVER_PORT', $_SERVER) ? $_SERVER['SERVER_PORT'] : null;\n        if (('http://' === $protocol && '80' != $port) || ('https://' === $protocol && '443' != $port)) {\n            $host .= ':'.$port;\n        }\n        $pageURL = $protocol.$host.$_SERVER['REQUEST_URI'];\n\n        $start_settings['url_valid'] = (url('/').'/setup' === $pageURL);\n\n        $start_settings['url_config'] = url('/');\n        $start_settings['real_url'] = $pageURL;\n        $start_settings['php_version_min'] = true;\n\n        // Curl the .env file to make sure it's not accessible via a browser\n        $ch = curl_init($protocol.$host.'/.env');\n        curl_setopt($ch, CURLOPT_HEADER, true);    // we want headers\n        curl_setopt($ch, CURLOPT_NOBODY, true);    // we don't need body\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        $output = curl_exec($ch);\n        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if (404 == $httpcode || 403 == $httpcode || 0 == $httpcode) {\n            $start_settings['env_exposed'] = false;\n        } else {\n            $start_settings['env_exposed'] = true;\n        }\n\n        if (\\App::Environment('production') && (true == config('app.debug'))) {\n            $start_settings['debug_exposed'] = true;\n        } else {\n            $start_settings['debug_exposed'] = false;\n        }\n\n        $environment = app()->environment();\n        if ('production' != $environment) {\n            $start_settings['env'] = $environment;\n            $start_settings['prod'] = false;\n        } else {\n            $start_settings['env'] = $environment;\n            $start_settings['prod'] = true;\n        }\n\n        if (function_exists('posix_getpwuid')) { // Probably Linux\n            $owner = posix_getpwuid(fileowner($_SERVER['SCRIPT_FILENAME']));\n            $start_settings['owner'] = $owner['name'];\n        } else { // Windows\n            // TODO: Is there a way of knowing if a windows user has elevated permissions\n            // This just gets the user name, which likely isn't 'root'\n            // $start_settings['owner'] = getenv('USERNAME');\n            $start_settings['owner'] = '';\n        }\n\n        if (('root' === $start_settings['owner']) || ('0' === $start_settings['owner'])) {\n            $start_settings['owner_is_admin'] = true;\n        } else {\n            $start_settings['owner_is_admin'] = false;\n        }\n\n        if ((is_writable(storage_path()))\n            && (is_writable(storage_path().'/framework'))\n            && (is_writable(storage_path().'/framework/cache'))\n            && (is_writable(storage_path().'/framework/sessions'))\n            && (is_writable(storage_path().'/framework/views'))\n            && (is_writable(storage_path().'/logs'))\n        ) {\n            $start_settings['writable'] = true;\n        } else {\n            $start_settings['writable'] = false;\n        }\n\n        $start_settings['gd'] = extension_loaded('gd');\n\n        return view('setup/index')\n            ->with('step', 1)\n            ->with('start_settings', $start_settings)\n            ->with('section', 'Pre-Flight Check');\n    }\n\n    /**\n     * Save the first admin user from Setup.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return Redirect\n     */\n    public function postSaveFirstAdmin(SetupUserRequest $request)\n    {\n        $user = new User();\n        $user->first_name = $data['first_name'] = $request->input('first_name');\n        $user->last_name = $request->input('last_name');\n        $user->email = $data['email'] = $request->input('email');\n        $user->activated = 1;\n        $permissions = ['superuser' => 1];\n        $user->permissions = json_encode($permissions);\n        $user->username = $data['username'] = $request->input('username');\n        $user->password = bcrypt($request->input('password'));\n        $data['password'] = $request->input('password');\n\n        $settings = new Setting();\n        $settings->full_multiple_companies_support = $request->input('full_multiple_companies_support', 0);\n        $settings->site_name = $request->input('site_name');\n        $settings->alert_email = $request->input('email');\n        $settings->alerts_enabled = 1;\n        $settings->pwd_secure_min = 10;\n        $settings->brand = 1;\n        $settings->locale = $request->input('locale', 'en');\n        $settings->default_currency = $request->input('default_currency', 'USD');\n        $settings->user_id = 1;\n        $settings->email_domain = $request->input('email_domain');\n        $settings->email_format = $request->input('email_format');\n        $settings->next_auto_tag_base = 1;\n        $settings->auto_increment_assets = $request->input('auto_increment_assets', 0);\n        $settings->auto_increment_prefix = $request->input('auto_increment_prefix');\n\n        if ((! $user->isValid()) || (! $settings->isValid())) {\n            return redirect()->back()->withInput()->withErrors($user->getErrors())->withErrors($settings->getErrors());\n        } else {\n            $user->save();\n            Auth::login($user, true);\n            $settings->save();\n\n            if ($request->input('email_creds') == '1') {\n                $data = [];\n                $data['email'] = $user->email;\n                $data['username'] = $user->username;\n                $data['first_name'] = $user->first_name;\n                $data['last_name'] = $user->last_name;\n                $data['password'] = $request->input('password');\n                $user->notify(new FirstAdminNotification($data));\n            }\n\n            return redirect()->route('setup.done');\n        }\n    }\n\n    /**\n     * Return the admin user creation form in Setup.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function getSetupUser()\n    {\n        return view('setup/user')\n            ->with('step', 3)\n            ->with('section', 'Create a User');\n    }\n\n    /**\n     * Return the view that tells the user that the Setup is done.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function getSetupDone()\n    {\n        return view('setup/done')\n            ->with('step', 4)\n            ->with('section', 'Done!');\n    }\n\n    /**\n     * Migrate the database tables, and return the output\n     * to a view for Setup.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function getSetupMigrate()\n    {\n        Artisan::call('migrate', ['--force' => true]);\n        if ((! file_exists(storage_path().'/oauth-private.key')) || (! file_exists(storage_path().'/oauth-public.key'))) {\n            Artisan::call('migrate', ['--path' => 'vendor/laravel/passport/database/migrations', '--force' => true]);\n            Artisan::call('passport:install');\n        }\n\n        return view('setup/migrate')\n            ->with('output', 'Databases installed!')\n            ->with('step', 2)\n            ->with('section', 'Create Database Tables');\n    }\n\n    /**\n     * Return a view that shows some of the key settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function index()\n    {\n        $settings = Setting::getSettings();\n\n        return view('settings/index', compact('settings'));\n    }\n\n    /**\n     * Return the admin settings page.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getEdit()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings/general', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getSettings()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings/general', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postSettings(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->modellist_displays = '';\n\n        if (($request->filled('show_in_model_list')) && (count($request->input('show_in_model_list')) > 0)) {\n            $setting->modellist_displays = implode(',', $request->input('show_in_model_list'));\n        }\n\n        $setting->full_multiple_companies_support = $request->input('full_multiple_companies_support', '0');\n        $setting->unique_serial = $request->input('unique_serial', '0');\n        $setting->show_images_in_email = $request->input('show_images_in_email', '0');\n        $setting->show_archived_in_list = $request->input('show_archived_in_list', '0');\n        $setting->dashboard_message = $request->input('dashboard_message');\n        $setting->email_domain = $request->input('email_domain');\n        $setting->email_format = $request->input('email_format');\n        $setting->username_format = $request->input('username_format');\n        $setting->require_accept_signature = $request->input('require_accept_signature');\n        $setting->show_assigned_assets = $request->input('show_assigned_assets', '0');\n        if (! config('app.lock_passwords')) {\n            $setting->login_note = $request->input('login_note');\n        }\n\n        $setting->default_eula_text = $request->input('default_eula_text');\n        $setting->thumbnail_max_h = $request->input('thumbnail_max_h');\n        $setting->privacy_policy_link = $request->input('privacy_policy_link');\n\n        $setting->depreciation_method = $request->input('depreciation_method');\n\n        if ($request->input('per_page') != '') {\n            $setting->per_page = $request->input('per_page');\n        } else {\n            $setting->per_page = 200;\n        }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getBranding()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.branding', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postBranding(ImageUploadRequest $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->brand = $request->input('brand', '1');\n        $setting->header_color = $request->input('header_color');\n        $setting->support_footer = $request->input('support_footer');\n        $setting->version_footer = $request->input('version_footer');\n        $setting->footer_text = $request->input('footer_text');\n        $setting->skin = $request->input('skin');\n        $setting->allow_user_skin = $request->input('allow_user_skin');\n        $setting->show_url_in_emails = $request->input('show_url_in_emails', '0');\n        $setting->logo_print_assets = $request->input('logo_print_assets', '0');\n\n        // Only allow the site name and CSS to be changed if lock_passwords is false\n        // Because public demos make people act like dicks\n        if (! config('app.lock_passwords')) {\n            $setting->site_name = $request->input('site_name');\n            $setting->custom_css = $request->input('custom_css');\n        }\n\n        $setting = $request->handleImages($setting, 600, 'logo', '', 'logo');\n\n        if ('1' == $request->input('clear_logo')) {\n                Storage::disk('public')->delete($setting->logo);\n            $setting->logo = null;\n                $setting->brand = 1;\n        }\n\n        $setting = $request->handleImages($setting, 600, 'email_logo', '', 'email_logo');\n\n\n       if ('1' == $request->input('clear_email_logo')) {\n            Storage::disk('public')->delete($setting->email_logo);\n            $setting->email_logo = null;\n            // If they are uploading an image, validate it and upload it\n        }\n\n        $setting = $request->handleImages($setting, 600, 'label_logo', '', 'label_logo');\n\n        if ('1' == $request->input('clear_label_logo')) {\n            Storage::disk('public')->delete($setting->label_logo);\n            $setting->label_logo = null;\n        }\n\n\n        // If the user wants to clear the favicon...\n         if ($request->hasFile('favicon')) {\n            $favicon_image = $favicon_upload = $request->file('favicon');\n            $favicon_ext = $favicon_image->getClientOriginalExtension();\n            $setting->favicon = $favicon_file_name = 'favicon-uploaded.'.$favicon_ext;\n\n            if (($favicon_image->getClientOriginalExtension() != 'ico') && ($favicon_image->getClientOriginalExtension() != 'svg')) {\n                $favicon_upload = Image::make($favicon_image->getRealPath())->resize(null, 36, function ($constraint) {\n                    $constraint->aspectRatio();\n                    $constraint->upsize();\n                });\n\n                // This requires a string instead of an object, so we use ($string)\n                Storage::disk('public')->put($favicon_file_name, (string) $favicon_upload->encode());\n            } else {\n                Storage::disk('public')->put($favicon_file_name, file_get_contents($request->file('favicon')));\n            }\n\n\n            // Remove Current image if exists\n            if (($setting->favicon) && (file_exists($favicon_file_name))) {\n                Storage::disk('public')->delete($favicon_file_name);\n            }\n        } elseif ('1' == $request->input('clear_favicon')) {\n             Storage::disk('public')->delete($setting->clear_favicon);\n            $setting->favicon = null;\n\n             // If they are uploading an image, validate it and upload it\n         }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getSecurity()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.security', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postSecurity(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n        if (! config('app.lock_passwords')) {\n            if ('' == $request->input('two_factor_enabled')) {\n                $setting->two_factor_enabled = null;\n            } else {\n                $setting->two_factor_enabled = $request->input('two_factor_enabled');\n            }\n\n            // remote user login\n            $setting->login_remote_user_enabled = (int) $request->input('login_remote_user_enabled');\n            $setting->login_common_disabled = (int) $request->input('login_common_disabled');\n            $setting->login_remote_user_custom_logout_url = $request->input('login_remote_user_custom_logout_url');\n            $setting->login_remote_user_header_name = $request->input('login_remote_user_header_name');\n        }\n\n        $setting->pwd_secure_uncommon = (int) $request->input('pwd_secure_uncommon');\n        $setting->pwd_secure_min = (int) $request->input('pwd_secure_min');\n        $setting->pwd_secure_complexity = '';\n\n\n        if ($request->filled('pwd_secure_complexity')) {\n            $setting->pwd_secure_complexity = implode('|', $request->input('pwd_secure_complexity'));\n        }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getLocalization()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.localization', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postLocalization(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        if (! config('app.lock_passwords')) {\n            $setting->locale = $request->input('locale', 'en');\n        }\n        $setting->default_currency = $request->input('default_currency', '$');\n        $setting->date_display_format = $request->input('date_display_format');\n        $setting->time_display_format = $request->input('time_display_format');\n        $setting->digit_separator = $request->input('digit_separator');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getAlerts()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.alerts', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postAlerts(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $alert_email = rtrim($request->input('alert_email'), ',');\n        $alert_email = trim($alert_email);\n        $admin_cc_email = rtrim($request->input('admin_cc_email'), ',');\n        $admin_cc_email = trim($admin_cc_email);\n\n        $setting->alert_email = $alert_email;\n        $setting->admin_cc_email = $admin_cc_email;\n        $setting->alerts_enabled = $request->input('alerts_enabled', '0');\n        $setting->alert_interval = $request->input('alert_interval');\n        $setting->alert_threshold = $request->input('alert_threshold');\n        $setting->audit_interval = $request->input('audit_interval');\n        $setting->audit_warning_days = $request->input('audit_warning_days');\n        $setting->show_alerts_in_menu = $request->input('show_alerts_in_menu', '0');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getSlack()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.slack', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postSlack(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $validatedData = $request->validate([\n            'slack_channel'   => 'regex:/(?<!\\w)#\\w+/|required_with:slack_endpoint|nullable',\n        ]);\n\n        if ($validatedData) {\n            $setting->slack_endpoint = $request->input('slack_endpoint');\n            $setting->slack_channel = $request->input('slack_channel');\n            $setting->slack_botname = $request->input('slack_botname');\n        }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getAssetTags()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.asset_tags', compact('setting'));\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postAssetTags(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->auto_increment_prefix = $request->input('auto_increment_prefix');\n        $setting->auto_increment_assets = $request->input('auto_increment_assets', '0');\n        $setting->zerofill_count = $request->input('zerofill_count');\n        $setting->next_auto_tag_base = $request->input('next_auto_tag_base');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getBarcodes()\n    {\n        $setting = Setting::getSettings();\n        $is_gd_installed = extension_loaded('gd');\n\n        return view('settings.barcodes', compact('setting'))->with('is_gd_installed', $is_gd_installed);\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postBarcodes(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->qr_code = $request->input('qr_code', '0');\n        $setting->alt_barcode = $request->input('alt_barcode');\n        $setting->alt_barcode_enabled = $request->input('alt_barcode_enabled', '0');\n        $setting->barcode_type = $request->input('barcode_type');\n        $setting->qr_text = $request->input('qr_text');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function getPhpInfo()\n    {\n        if (true === config('app.debug')) {\n            return view('settings.phpinfo');\n        }\n\n        return redirect()->route('settings.index')\n            ->with('error', 'PHP syetem debugging information is only available when debug is enabled in your .env file.');\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function getLabels()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.labels', compact('setting'));\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function postLabels(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n        $setting->labels_per_page = $request->input('labels_per_page');\n        $setting->labels_width = $request->input('labels_width');\n        $setting->labels_height = $request->input('labels_height');\n        $setting->labels_pmargin_left = $request->input('labels_pmargin_left');\n        $setting->labels_pmargin_right = $request->input('labels_pmargin_right');\n        $setting->labels_pmargin_top = $request->input('labels_pmargin_top');\n        $setting->labels_pmargin_bottom = $request->input('labels_pmargin_bottom');\n        $setting->labels_display_bgutter = $request->input('labels_display_bgutter');\n        $setting->labels_display_sgutter = $request->input('labels_display_sgutter');\n        $setting->labels_fontsize = $request->input('labels_fontsize');\n        $setting->labels_pagewidth = $request->input('labels_pagewidth');\n        $setting->labels_pageheight = $request->input('labels_pageheight');\n        $setting->labels_display_company_name = $request->input('labels_display_company_name', '0');\n        $setting->labels_display_company_name = $request->input('labels_display_company_name', '0');\n\n        if ($request->filled('labels_display_name')) {\n            $setting->labels_display_name = 1;\n        } else {\n            $setting->labels_display_name = 0;\n        }\n\n        if ($request->filled('labels_display_serial')) {\n            $setting->labels_display_serial = 1;\n        } else {\n            $setting->labels_display_serial = 0;\n        }\n\n        if ($request->filled('labels_display_tag')) {\n            $setting->labels_display_tag = 1;\n        } else {\n            $setting->labels_display_tag = 0;\n        }\n\n        if ($request->filled('labels_display_tag')) {\n            $setting->labels_display_tag = 1;\n        } else {\n            $setting->labels_display_tag = 0;\n        }\n\n        if ($request->filled('labels_display_model')) {\n            $setting->labels_display_model = 1;\n        } else {\n            $setting->labels_display_model = 0;\n        }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function getLdapSettings()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.ldap', compact('setting'));\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function postLdapSettings(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        if (! config('app.lock_passwords') === true) {\n            $setting->ldap_enabled = $request->input('ldap_enabled', '0');\n            $setting->ldap_server = $request->input('ldap_server');\n            $setting->ldap_server_cert_ignore = $request->input('ldap_server_cert_ignore', false);\n            $setting->ldap_uname = $request->input('ldap_uname');\n            if ($request->filled('ldap_pword')) {\n                $setting->ldap_pword = Crypt::encrypt($request->input('ldap_pword'));\n            }\n            $setting->ldap_basedn = $request->input('ldap_basedn');\n            $setting->ldap_filter = $request->input('ldap_filter');\n            $setting->ldap_username_field = $request->input('ldap_username_field');\n            $setting->ldap_lname_field = $request->input('ldap_lname_field');\n            $setting->ldap_fname_field = $request->input('ldap_fname_field');\n            $setting->ldap_auth_filter_query = $request->input('ldap_auth_filter_query');\n            $setting->ldap_version = $request->input('ldap_version');\n            $setting->ldap_active_flag = $request->input('ldap_active_flag');\n            $setting->ldap_emp_num = $request->input('ldap_emp_num');\n            $setting->ldap_email = $request->input('ldap_email');\n            $setting->ad_domain = $request->input('ad_domain');\n            $setting->is_ad = $request->input('is_ad', '0');\n            $setting->ad_append_domain = $request->input('ad_append_domain', '0');\n            $setting->ldap_tls = $request->input('ldap_tls', '0');\n            $setting->ldap_pw_sync = $request->input('ldap_pw_sync', '0');\n            $setting->custom_forgot_pass_url = $request->input('custom_forgot_pass_url');\n            $setting->ldap_phone_field = $request->input('ldap_phone');\n            $setting->ldap_jobtitle = $request->input('ldap_jobtitle');\n            $setting->ldap_country = $request->input('ldap_country');\n            $setting->ldap_dept = $request->input('ldap_dept');\n            $setting->ldap_client_tls_cert   = $request->input('ldap_client_tls_cert');\n            $setting->ldap_client_tls_key    = $request->input('ldap_client_tls_key');\n\n\n        }\n\n        if ($setting->save()) {\n            $setting->update_client_side_cert_files();\n            return redirect()->route('settings.ldap.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author Johnson Yi <jyi.dev@outlook.com>\n     *\n     * @since v5.0.0\n     *\n     * @return View\n     */\n    public function getSamlSettings()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.saml', compact('setting'));\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author Johnson Yi <jyi.dev@outlook.com>\n     *\n     * @since v5.0.0\n     *\n     * @return View\n     */\n    public function postSamlSettings(SettingsSamlRequest $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->saml_enabled = $request->input('saml_enabled', '0');\n        $setting->saml_idp_metadata = $request->input('saml_idp_metadata');\n        $setting->saml_attr_mapping_username = $request->input('saml_attr_mapping_username');\n        $setting->saml_forcelogin = $request->input('saml_forcelogin', '0');\n        $setting->saml_slo = $request->input('saml_slo', '0');\n        if (! empty($request->input('saml_sp_privatekey'))) {\n            $setting->saml_sp_x509cert = $request->input('saml_sp_x509cert');\n            $setting->saml_sp_privatekey = $request->input('saml_sp_privatekey');\n        }\n        if (! empty($request->input('saml_sp_x509certNew'))) {\n            $setting->saml_sp_x509certNew = $request->input('saml_sp_x509certNew');\n        } else {\n            $setting->saml_sp_x509certNew = '';\n        }\n        $setting->saml_custom_settings = $request->input('saml_custom_settings');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.saml.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Show the listing of backups.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.8]\n     *\n     * @return View\n     */\n    public function getBackups()\n    {\n        $path = 'app/backups';\n        $backup_files = Storage::files($path);\n        $files_raw = [];\n\n\n        if (count($backup_files) > 0) {\n            for ($f = 0; $f < count($backup_files); $f++) {\n\n                // Skip dotfiles like .gitignore and .DS_STORE\n                if ((substr(basename($backup_files[$f]), 0, 1) != '.')) {\n                    //$lastmodified = Carbon::parse(Storage::lastModified($backup_files[$f]))->toDatetimeString();\n                    $file_timestamp = Storage::lastModified($backup_files[$f]);\n\n\n                    $files_raw[] = [\n                        'filename' => basename($backup_files[$f]),\n                        'filesize' => Setting::fileSizeConvert(Storage::size($backup_files[$f])),\n                        'modified_value' => $file_timestamp,\n                        'modified_display' => Helper::getFormattedDateObject($file_timestamp, $type = 'datetime', false),\n                        \n                    ];\n                }\n               \n            }\n        }\n\n        // Reverse the array so it lists oldest first\n        $files = array_reverse($files_raw);\n\n        return view('settings/backups', compact('path', 'files'));\n    }\n\n    /**\n     * Process the backup.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.8]\n     *\n     * @return Redirect\n     */\n    public function postBackups()\n    {\n        if (! config('app.lock_passwords')) {\n            Artisan::call('backup:run');\n            $output = Artisan::output();\n\n            // Backup completed\n            if (! preg_match('/failed/', $output)) {\n                return redirect()->route('settings.backups.index')\n                    ->with('success', trans('admin/settings/message.backup.generated'));\n            }\n\n            $formatted_output = str_replace('Backup completed!', '', $output);\n            $output_split = explode('...', $formatted_output);\n\n            if (array_key_exists(2, $output_split)) {\n                return redirect()->route('settings.backups.index')->with('error', $output_split[2]);\n            }\n\n            return redirect()->route('settings.backups.index')->with('error', $formatted_output);\n        }\n\n        return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n    }\n\n    /**\n     * Download the backup file.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.8]\n     *\n     * @return Storage\n     */\n    public function downloadFile($filename = null)\n    {\n        $path = 'app/backups';\n\n        if (! config('app.lock_passwords')) {\n            if (Storage::exists($path.'/'.$filename)) {\n                return StorageHelper::downloader($path.'/'.$filename);\n            } else {\n                // Redirect to the backup page\n                return redirect()->route('settings.backups.index')->with('error', trans('admin/settings/message.backup.file_not_found'));\n            }\n        } else {\n            // Redirect to the backup page\n            return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n        }\n    }\n\n    /**\n     * Delete the backup file.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.8]\n     *\n     * @return View\n     */\n    public function deleteFile($filename = null)\n    {\n        if (! config('app.lock_passwords')) {\n            $path = 'app/backups';\n\n            if (Storage::exists($path.'/'.$filename)) {\n                try {\n                    Storage::delete($path.'/'.$filename);\n\n                    return redirect()->route('settings.backups.index')->with('success', trans('admin/settings/message.backup.file_deleted'));\n                } catch (\\Exception $e) {\n                    \\Log::debug($e);\n                }\n            } else {\n                return redirect()->route('settings.backups.index')->with('error', trans('admin/settings/message.backup.file_not_found'));\n            }\n        } else {\n            return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n        }\n    }\n\n\n    /**\n     * Uploads a backup file\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v6.0]\n     *\n     * @return Redirect\n     */\n\n    public function postUploadBackup(Request $request) {\n\n        if (! config('app.lock_passwords')) {\n            if (!$request->hasFile('file')) {\n                return redirect()->route('settings.backups.index')->with('error', 'No file uploaded');\n            } else {\n                $max_file_size = Helper::file_upload_max_size();\n\n                $rules = [\n                    'file' => 'required|mimes:zip|max:'.$max_file_size,\n                ];\n\n                $validator = \\Validator::make($request->all(), $rules);\n\n                if ($validator->passes()) {\n\n                        $upload_filename = 'uploaded-'.date('U').'-'.Str::slug(pathinfo($request->file('file')->getClientOriginalName(), PATHINFO_FILENAME)).'.zip';\n\n                        Storage::putFileAs('app/backups', $request->file('file'), $upload_filename);\n            \n                        return redirect()->route('settings.backups.index')->with('success', 'File uploaded');\n                } else {\n                    return redirect()->route('settings.backups.index')->withErrors($request->getErrors());\n                }\n            }\n\n        } else {\n            return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n        }    \n\n        \n        \n    }\n\n    /**\n     * Restore the backup file.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v6.0]\n     *\n     * @return View\n     */\n    public function postRestore($filename = null)\n    {\n        \n        if (! config('app.lock_passwords')) {\n            $path = 'app/backups';\n\n            if (Storage::exists($path.'/'.$filename)) {\n\n                // grab the user's info so we can make sure they exist in the system\n                $user = User::find(Auth::user()->id);\n\n\n                // TODO: run a backup \n\n                // TODO: add db:wipe \n\n\n                // run the restore command\n                Artisan::call('snipeit:restore', \n                [\n                    '--force' => true, \n                    '--no-progress' => true, \n                    'filename' => storage_path($path).'/'.$filename\n                ]);\n\n                $output = Artisan::output();\n                    \n            \n                // If it's greater than 300, it probably worked\n                if (strlen($output) > 300) {\n                    \\Auth::logout();\n                    return redirect()->route('login')->with('success', 'Your system has been restored. Please login again.');\n                } else {\n                    return redirect()->route('settings.backups.index')->with('error', $output);\n\n                }\n                //dd($output);\n\n                // TODO: insert the user if they are not there in the old one\n                \n\n\n\n                // log the user out\n                \n\n\n            } else {\n                return redirect()->route('settings.backups.index')->with('error', trans('admin/settings/message.backup.file_not_found'));\n            }\n        } else {\n            return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n        }\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function getPurge()\n    {\n        \\Log::warning('User ID '.Auth::user()->id.' is attempting a PURGE');\n\n        return view('settings.purge-form');\n    }\n\n    /**\n     * Purges soft-deletes.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function postPurge(Request $request)\n    {\n        if (! config('app.lock_passwords')) {\n            if ('DELETE' == $request->input('confirm_purge')) {\n                \\Log::warning('User ID '.Auth::user()->id.' initiated a PURGE!');\n                // Run a backup immediately before processing\n                Artisan::call('backup:run');\n                Artisan::call('snipeit:purge', ['--force' => 'true', '--no-interaction' => true]);\n                $output = Artisan::output();\n\n                return view('settings/purge')\n                    ->with('output', $output)->with('success', trans('admin/settings/message.purge.success'));\n            } else {\n                return redirect()->back()->with('error', trans('admin/settings/message.purge.validation_failed'));\n            }\n        } else {\n            return redirect()->back()->with('error', trans('general.feature_disabled'));\n        }\n    }\n\n    /**\n     * Returns a page with the API token generation interface.\n     *\n     * We created a controller method for this because closures aren't allowed\n     * in the routes file if you want to be able to cache the routes.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function api()\n    {\n        return view('settings.api');\n    }\n\n    /**\n     * Test the email configuration.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return Redirect\n     */\n    public function ajaxTestEmail()\n    {\n        try {\n            (new User())->forceFill([\n                'name'  => config('mail.from.name'),\n                'email' => config('mail.from.address'),\n            ])->notify(new MailTest());\n\n            return response()->json(Helper::formatStandardApiResponse('success', null, 'Maiol sent!'));\n        } catch (Exception $e) {\n            return response()->json(Helper::formatStandardApiResponse('success', null, $e->getMessage()));\n        }\n    }\n\n    public function getLoginAttempts()\n    {\n        return view('settings.logins');\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Parsedown;\nuse Watson\\Validating\\ValidatingTrait;\n\n/**\n * Settings model.\n */\nclass Setting extends Model\n{\n    use HasFactory;\n    use Notifiable, ValidatingTrait;\n\n    /**\n     * The app settings cache key name.\n     *\n     * @var string\n     */\n    const APP_SETTINGS_KEY = 'snipeit_app_settings';\n\n    /**\n     * The setup check cache key name.\n     *\n     * @var string\n     */\n    const SETUP_CHECK_KEY = 'snipeit_setup_check';\n\n    /**\n     * Whether the model should inject it's identifier to the unique\n     * validation rules before attempting validation. If this property\n     * is not set in the model it will default to true.\n     *\n     * @var bool\n     */\n    protected $injectUniqueIdentifier = true;\n\n    /**\n     * Model rules.\n     *\n     * @var array\n     */\n    protected $rules = [\n          'brand'                               => 'required|min:1|numeric',\n          'qr_text'                             => 'max:31|nullable',\n          'alert_email'                         => 'email_array|nullable',\n          'admin_cc_email'                      => 'email|nullable',\n          'default_currency'                    => 'required',\n          'locale'                              => 'required',\n          'slack_endpoint'                      => 'url|required_with:slack_channel|nullable',\n          'labels_per_page'                     => 'numeric',\n          'slack_channel'                       => 'regex:/^[\\#\\@]?\\w+/|required_with:slack_endpoint|nullable',\n          'slack_botname'                       => 'string|nullable',\n          'labels_width'                        => 'numeric',\n          'labels_height'                       => 'numeric',\n          'labels_pmargin_left'                 => 'numeric|nullable',\n          'labels_pmargin_right'                => 'numeric|nullable',\n          'labels_pmargin_top'                  => 'numeric|nullable',\n          'labels_pmargin_bottom'               => 'numeric|nullable',\n          'labels_display_bgutter'              => 'numeric|nullable',\n          'labels_display_sgutter'              => 'numeric|nullable',\n          'labels_fontsize'                     => 'numeric|min:5',\n          'labels_pagewidth'                    => 'numeric|nullable',\n          'labels_pageheight'                   => 'numeric|nullable',\n          'login_remote_user_enabled'           => 'numeric|nullable',\n          'login_common_disabled'               => 'numeric|nullable',\n          'login_remote_user_custom_logout_url' => 'string|nullable',\n          'login_remote_user_header_name'       => 'string|nullable',\n          'thumbnail_max_h'                     => 'numeric|max:500|min:25',\n          'pwd_secure_min'                      => 'numeric|required|min:8',\n          'audit_warning_days'                  => 'numeric|nullable',\n          'audit_interval'                      => 'numeric|nullable',\n          'custom_forgot_pass_url'              => 'url|nullable',\n          'privacy_policy_link'                 => 'nullable|url',\n    ];\n\n    protected $fillable = [\n        'site_name',\n        'email_domain',\n        'email_format',\n        'username_format',\n    ];\n\n    /**\n     * Get the app settings.\n     *  Cache is expired on Setting model saved in EventServiceProvider.\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return \\App\\Models\\Setting|null\n     */\n    public static function getSettings(): ?self\n    {\n        return Cache::rememberForever(self::APP_SETTINGS_KEY, function () {\n            // Need for setup as no tables exist\n            try {\n                return self::first();\n            } catch (\\Throwable $th) {\n                return null;\n            }\n        });\n    }\n\n    /**\n     * Check to see if setup process is complete.\n     *  Cache is expired on Setting model saved in EventServiceProvider.\n     *\n     * @return bool\n     */\n    public static function setupCompleted(): bool\n    {\n        try {\n            $usercount = User::withTrashed()->count();\n            $settingsCount = self::count();\n\n            return $usercount > 0 && $settingsCount > 0;\n        } catch (\\Throwable $th) {\n            \\Log::debug('User table and settings table DO NOT exist or DO NOT have records');\n            // Catch the error if the tables dont exit\n            return false;\n        }\n    }\n\n    /**\n     * Get the current Laravel version.\n     *\n     * @return string\n     */\n    public function lar_ver(): string\n    {\n        $app = App::getFacadeApplication();\n\n        return $app::VERSION;\n    }\n\n    /**\n     * Get the default EULA text.\n     *\n     * @return string|null\n     */\n    public static function getDefaultEula(): ?string\n    {\n        if (self::getSettings()->default_eula_text) {\n            $parsedown = new Parsedown();\n\n            return $parsedown->text(e(self::getSettings()->default_eula_text));\n        }\n\n        return null;\n    }\n\n    /**\n     * Check wether to show in model dropdowns.\n     *\n     * @param string $element\n     *\n     * @return bool\n     */\n    public function modellistCheckedValue($element): bool\n    {\n        $settings = self::getSettings();\n        // If the value is blank for some reason\n        if ($settings->modellist_displays == '') {\n            return false;\n        }\n\n        $values = explode(',', $settings->modellist_displays);\n\n        foreach ($values as $value) {\n            if ($value == $element) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Escapes the custom CSS, and then un-escapes the greater-than symbol\n     * so it can work with direct descendant characters for bootstrap\n     * menu overrides like:.\n     *\n     * .skin-blue .sidebar-menu>li.active>a, .skin-blue .sidebar-menu>li:hover>a\n     *\n     * Important: Do not remove the e() escaping here, as we output raw in the blade.\n     *\n     * @return string escaped CSS\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     */\n    public function show_custom_css(): string\n    {\n        $custom_css = self::getSettings()->custom_css;\n        $custom_css = e($custom_css);\n        // Needed for modifying the bootstrap nav :(\n        $custom_css = str_ireplace('script', 'SCRIPTS-NOT-ALLOWED-HERE', $custom_css);\n        $custom_css = str_replace('&gt;', '>', $custom_css);\n        // Allow String output (needs quotes)\n        $custom_css = str_replace('&quot;', '\"', $custom_css);\n\n        return $custom_css;\n    }\n\n    /**\n     * Converts bytes into human readable file size.\n     *\n     * @param string $bytes\n     *\n     * @return string human readable file size (2,87 \u041c\u0431)\n     *\n     * @author Mogilev Arseny\n     */\n    public static function fileSizeConvert($bytes): string\n    {\n        $bytes = floatval($bytes);\n        $arBytes = [\n                0 => [\n                    'UNIT'  => 'TB',\n                    'VALUE' => pow(1024, 4),\n                ],\n                1 => [\n                    'UNIT'  => 'GB',\n                    'VALUE' => pow(1024, 3),\n                ],\n                2 => [\n                    'UNIT'  => 'MB',\n                    'VALUE' => pow(1024, 2),\n                ],\n                3 => [\n                    'UNIT'  => 'KB',\n                    'VALUE' => 1024,\n                ],\n                4 => [\n                    'UNIT'  => 'B',\n                    'VALUE' => 1,\n                ],\n            ];\n\n        foreach ($arBytes as $arItem) {\n            if ($bytes >= $arItem['VALUE']) {\n                $result = $bytes / $arItem['VALUE'];\n                $result = round($result, 2).$arItem['UNIT'];\n                break;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * The url for slack notifications.\n     *  Used by Notifiable trait.\n     *\n     * @return string\n     */\n    public function routeNotificationForSlack(): string\n    {\n        // At this point the endpoint is the same for everything.\n        //  In the future this may want to be adapted for individual notifications.\n        return self::getSettings()->slack_endpoint;\n    }\n\n    /**\n     * Get the mail reply to address from configuration.\n     *\n     * @return string\n     */\n    public function routeNotificationForMail(): string\n    {\n        // At this point the endpoint is the same for everything.\n        //  In the future this may want to be adapted for individual notifications.\n        return config('mail.reply_to.address');\n    }\n\n    /**\n     * Get the password complexity rule.\n     *\n     * @return string\n     */\n    public static function passwordComplexityRulesSaving($action = 'update'): string\n    {\n        $security_rules = '';\n        $settings = self::getSettings();\n\n        // Check if they have uncommon password enforcement selected in settings\n        if ($settings->pwd_secure_uncommon == 1) {\n            $security_rules .= '|dumbpwd';\n        }\n\n        // Check for any secure password complexity rules that may have been selected\n        if ($settings->pwd_secure_complexity != '') {\n            $security_rules .= '|'.$settings->pwd_secure_complexity;\n        }\n\n        if ($action == 'update') {\n            return 'nullable|min:'.$settings->pwd_secure_min.$security_rules;\n        }\n\n        return 'required|min:'.$settings->pwd_secure_min.$security_rules;\n    }\n\n    /**\n     * Get the specific LDAP settings\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return Collection\n     */\n    public static function getLdapSettings(): Collection\n    {\n        $ldapSettings = self::select([\n            'ldap_enabled',\n            'ldap_server',\n            'ldap_uname',\n            'ldap_pword',\n            'ldap_basedn',\n            'ldap_filter',\n            'ldap_username_field',\n            'ldap_lname_field',\n            'ldap_fname_field',\n            'ldap_auth_filter_query',\n            'ldap_version',\n            'ldap_active_flag',\n            'ldap_emp_num',\n            'ldap_email',\n            'ldap_server_cert_ignore',\n            'ldap_port',\n            'ldap_tls',\n            'ldap_pw_sync',\n            'is_ad',\n            'ad_domain',\n            'ad_append_domain',\n            'ldap_client_tls_key',\n            'ldap_client_tls_cert'\n            ])->first()->getAttributes();\n\n        return collect($ldapSettings);\n    }\n\n    /**\n     * Return the filename for the client-side SSL cert\n     *\n     * @var string\n     */\n    public static function get_client_side_cert_path()\n    {\n        return storage_path().'/ldap_client_tls.cert';\n    }\n\n    /**\n     * Return the filename for the client-side SSL key\n     *\n     * @var string\n     */\n    public static function get_client_side_key_path()\n    {\n        return storage_path().'/ldap_client_tls.key';\n    }\n\n    public function update_client_side_cert_files()\n    {\n        /**\n         * I'm not sure if it makes sense to have a cert but no key\n         * nor vice versa, but for now I'm just leaving it like this.\n         *\n         * Also, we could easily set this up with an event handler and\n         * self::saved() or something like that but there's literally only\n         * one place where we will do that, so I'll just explicitly call\n         * this method at that spot instead. It'll be easier to debug and understand.\n         */\n        if ($this->ldap_client_tls_cert) {\n            file_put_contents(self::get_client_side_cert_path(), $this->ldap_client_tls_cert);\n        } else {\n            if (file_exists(self::get_client_side_cert_path())) {\n                unlink(self::get_client_side_cert_path());\n            }\n        }\n\n        if ($this->ldap_client_tls_key) {\n            file_put_contents(self::get_client_side_key_path(), $this->ldap_client_tls_key);\n        } else {\n            if (file_exists(self::get_client_side_key_path())) {\n                unlink(self::get_client_side_key_path());\n            }\n        }\n    }\n\n\n}\n", "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Validation Language Lines\n    |--------------------------------------------------------------------------\n    |\n    | The following language lines contain the default error messages used by\n    | the validator class. Some of these rules have multiple versions such\n    | such as the size rules. Feel free to tweak each of these messages.\n    |\n    */\n\n    'accepted'             => 'The :attribute must be accepted.',\n    'active_url'           => 'The :attribute is not a valid URL.',\n    'after'                => 'The :attribute must be a date after :date.',\n    'after_or_equal'       => 'The :attribute must be a date after or equal to :date.',\n    'alpha'                => 'The :attribute may only contain letters.',\n    'alpha_dash'           => 'The :attribute may only contain letters, numbers, and dashes.',\n    'alpha_num'            => 'The :attribute may only contain letters and numbers.',\n    'array'                => 'The :attribute must be an array.',\n    'before'               => 'The :attribute must be a date before :date.',\n    'before_or_equal'      => 'The :attribute must be a date before or equal to :date.',\n    'between'              => [\n        'numeric' => 'The :attribute must be between :min - :max.',\n        'file'    => 'The :attribute must be between :min - :max kilobytes.',\n        'string'  => 'The :attribute must be between :min - :max characters.',\n        'array'   => 'The :attribute must have between :min and :max items.',\n    ],\n    'boolean'              => 'The :attribute must be true or false.',\n    'confirmed'            => 'The :attribute confirmation does not match.',\n    'date'                 => 'The :attribute is not a valid date.',\n    'date_format'          => 'The :attribute does not match the format :format.',\n    'different'            => 'The :attribute and :other must be different.',\n    'digits'               => 'The :attribute must be :digits digits.',\n    'digits_between'       => 'The :attribute must be between :min and :max digits.',\n    'dimensions'           => 'The :attribute has invalid image dimensions.',\n    'distinct'             => 'The :attribute field has a duplicate value.',\n    'email'                => 'The :attribute format is invalid.',\n    'exists'               => 'The selected :attribute is invalid.',\n    'file'                 => 'The :attribute must be a file.',\n    'filled'               => 'The :attribute field must have a value.',\n    'image'                => 'The :attribute must be an image.',\n    'in'                   => 'The selected :attribute is invalid.',\n    'in_array'             => 'The :attribute field does not exist in :other.',\n    'integer'              => 'The :attribute must be an integer.',\n    'ip'                   => 'The :attribute must be a valid IP address.',\n    'ipv4'                 => 'The :attribute must be a valid IPv4 address.',\n    'ipv6'                 => 'The :attribute must be a valid IPv6 address.',\n    'json'                 => 'The :attribute must be a valid JSON string.',\n    'max'                  => [\n        'numeric' => 'The :attribute may not be greater than :max.',\n        'file'    => 'The :attribute may not be greater than :max kilobytes.',\n        'string'  => 'The :attribute may not be greater than :max characters.',\n        'array'   => 'The :attribute may not have more than :max items.',\n    ],\n    'mimes'                => 'The :attribute must be a file of type: :values.',\n    'mimetypes'            => 'The :attribute must be a file of type: :values.',\n    'min'                  => [\n        'numeric' => 'The :attribute must be at least :min.',\n        'file'    => 'The :attribute must be at least :min kilobytes.',\n        'string'  => 'The :attribute must be at least :min characters.',\n        'array'   => 'The :attribute must have at least :min items.',\n    ],\n    'not_in'               => 'The selected :attribute is invalid.',\n    'numeric'              => 'The :attribute must be a number.',\n    'present'              => 'The :attribute field must be present.',\n    'valid_regex'          => 'That is not a valid regex. ',\n    'regex'                => 'The :attribute format is invalid.',\n    'required'             => 'The :attribute field is required.',\n    'required_if'          => 'The :attribute field is required when :other is :value.',\n    'required_unless'      => 'The :attribute field is required unless :other is in :values.',\n    'required_with'        => 'The :attribute field is required when :values is present.',\n    'required_with_all'    => 'The :attribute field is required when :values is present.',\n    'required_without'     => 'The :attribute field is required when :values is not present.',\n    'required_without_all' => 'The :attribute field is required when none of :values are present.',\n    'same'                 => 'The :attribute and :other must match.',\n    'size'                 => [\n        'numeric' => 'The :attribute must be :size.',\n        'file'    => 'The :attribute must be :size kilobytes.',\n        'string'  => 'The :attribute must be :size characters.',\n        'array'   => 'The :attribute must contain :size items.',\n    ],\n    'string'               => 'The :attribute must be a string.',\n    'timezone'             => 'The :attribute must be a valid zone.',\n    'unique'               => 'The :attribute has already been taken.',\n    'uploaded'             => 'The :attribute failed to upload.',\n    'url'                  => 'The :attribute format is invalid.',\n    'unique_undeleted'     => 'The :attribute must be unique.',\n    'non_circular'         => 'The :attribute must not create a circular reference.',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Custom Validation Language Lines\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify custom validation messages for attributes using the\n    | convention \"attribute.rule\" to name the lines. This makes it quick to\n    | specify a specific custom language line for a given attribute rule.\n    |\n    */\n\n    /*\n    |--------------------------------------------------------------------------\n    | Custom Validation Language Lines\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify custom validation messages for attributes using the\n    | convention \"attribute.rule\" to name the lines. This makes it quick to\n    | specify a specific custom language line for a given attribute rule.\n    |\n    */\n\n    'custom' => [\n        'alpha_space' => 'The :attribute field contains a character that is not allowed.',\n        'email_array'      => 'One or more email addresses is invalid.',\n        'hashed_pass'      => 'Your current password is incorrect',\n        'dumbpwd'          => 'That password is too common.',\n        'statuslabel_type' => 'You must select a valid status label type',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Custom Validation Attributes\n    |--------------------------------------------------------------------------\n    |\n    | The following language lines are used to swap attribute place-holders\n    | with something more reader friendly such as E-Mail Address instead\n    | of \"email\". This simply helps us make messages a little cleaner.\n    |\n    */\n\n    'attributes' => [],\n\n];\n", "@extends('layouts/default')\n\n{{-- Page title --}}\n@section('title')\n    Update Slack Settings\n    @parent\n@stop\n\n@section('header_right')\n    <a href=\"{{ route('settings.index') }}\" class=\"btn btn-primary\"> {{ trans('general.back') }}</a>\n@stop\n\n\n{{-- Page content --}}\n@section('content')\n\n    <style>\n        .checkbox label {\n            padding-right: 40px;\n        }\n    </style>\n\n\n    {{ Form::open(['method' => 'POST', 'files' => false, 'autocomplete' => 'off', 'class' => 'form-horizontal', 'role' => 'form' ]) }}\n    <!-- CSRF Token -->\n    {{csrf_field()}}\n\n    <div class=\"row\">\n        <div class=\"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2\">\n\n\n            <div class=\"panel box box-default\">\n                <div class=\"box-header with-border\">\n                    <h2 class=\"box-title\">\n                        <i class=\"fab fa-slack\"></i> Slack\n                    </h2>\n                </div>\n                <div class=\"box-body\">\n\n\n                    <p style=\"padding: 20px;\">\n                        {!! trans('admin/settings/general.slack_integration_help',array('slack_link' => 'https://my.slack.com/services/new/incoming-webhook')) !!}\n\n                    @if (($setting->slack_channel=='') && ($setting->slack_endpoint==''))\n                           {{ trans('admin/settings/general.slack_integration_help_button') }}\n                    @endif\n                    </p>\n\n\n                    <div class=\"col-md-12\" style=\"border-top: 0px;\">\n\n\n                        <!-- slack endpoint -->\n                        <div class=\"form-group required {{ $errors->has('slack_endpoint') ? 'error' : '' }}\">\n                            <div class=\"col-md-2\">\n                                {{ Form::label('slack_endpoint', trans('admin/settings/general.slack_endpoint')) }}\n                            </div>\n                            <div class=\"col-md-10\">\n                                @if (config('app.lock_passwords')===true)\n                                    {{ Form::text('slack_endpoint', old('slack_endpoint', $setting->slack_endpoint), array('class' => 'form-control','disabled'=>'disabled','placeholder' => 'https://hooks.slack.com/services/XXXXXXXXXXXXXXXXXXXXX', 'id' => 'slack_endpoint')) }}\n                                    <p class=\"text-warning\"><i class=\"fas fa-lock\"></i> {{ trans('general.feature_disabled') }}</p>\n\n                                @else\n                                    {{ Form::text('slack_endpoint', old('slack_endpoint', $setting->slack_endpoint), array('class' => 'form-control','placeholder' => 'https://hooks.slack.com/services/XXXXXXXXXXXXXXXXXXXXX', 'id' => 'slack_endpoint')) }}\n                                @endif\n                                {!! $errors->first('slack_endpoint', '<span class=\"alert-msg\" aria-hidden=\"true\">:message</span>') !!}\n                            </div>\n                        </div>\n\n                        <!-- slack channel -->\n                        <div class=\"form-group required {{ $errors->has('slack_channel') ? 'error' : '' }}\">\n                            <div class=\"col-md-2\">\n                                {{ Form::label('slack_channel', trans('admin/settings/general.slack_channel')) }}\n                            </div>\n                            <div class=\"col-md-10\">\n                                @if (config('app.lock_passwords')===true)\n                                    {{ Form::text('slack_channel', old('slack_channel', $setting->slack_channel), array('class' => 'form-control','disabled'=>'disabled','placeholder' => '#IT-Ops')) }}\n                                    <p class=\"text-warning\"><i class=\"fas fa-lock\"></i> {{ trans('general.feature_disabled') }}</p>\n\n                                @else\n                                    {{ Form::text('slack_channel', old('slack_channel', $setting->slack_channel), array('class' => 'form-control','placeholder' => '#IT-Ops')) }}\n                                @endif\n                                {!! $errors->first('slack_channel', '<span class=\"alert-msg\" aria-hidden=\"true\">:message</span>') !!}\n                            </div>\n                        </div>\n\n                        <!-- slack botname -->\n                        <div class=\"form-group required {{ $errors->has('slack_botname') ? 'error' : '' }}\">\n                            <div class=\"col-md-2\">\n                                {{ Form::label('slack_botname', trans('admin/settings/general.slack_botname')) }}\n                            </div>\n                            <div class=\"col-md-10\">\n                                @if (config('app.lock_passwords')===true)\n                                    {{ Form::text('slack_botname', old('slack_botname', $setting->slack_botname), array('class' => 'form-control','disabled'=>'disabled','placeholder' => 'Snipe-Bot')) }}\n                                    <p class=\"text-warning\"><i class=\"fas fa-lock\"></i> {{ trans('general.feature_disabled') }}</p>\n\n                                @else\n                                    {{ Form::text('slack_botname', old('slack_botname', $setting->slack_botname), array('class' => 'form-control','placeholder' => 'Snipe-Bot')) }}\n                                @endif\n                                {!! $errors->first('slack_botname', '<span class=\"alert-msg\" aria-hidden=\"true\">:message</span>') !!}\n                            </div>\n                        </div>\n\n                        <div class=\"form-group\" id=\"slacktestcontainer\" style=\"display: none\">\n                            <div class=\"col-md-2\">\n                                {{ Form::label('test_slack', 'Test Slack') }}\n                            </div>\n                            <div class=\"col-md-10\" id=\"slacktestrow\">\n                                <a class=\"btn btn-default btn-sm pull-left\" id=\"slacktest\" style=\"margin-right: 10px;\">Test <i class=\"fab fa-slack\"></i> Integration</a>\n                            </div>\n                            <div class=\"col-md-10 col-md-offset-2\">\n                                <span id=\"slacktesticon\"></span>\n                                <span id=\"slacktestresult\"></span>\n                                <span id=\"slackteststatus\"></span>\n                            </div>\n\n\n                        </div>\n                    </div> <!--/-->\n                </div> <!--/.box-body-->\n                <div class=\"box-footer\">\n                    <div class=\"text-left col-md-6\">\n                        <a class=\"btn btn-link text-left\" href=\"{{ route('settings.index') }}\">{{ trans('button.cancel') }}</a>\n                    </div>\n                    <div class=\"text-right col-md-6\">\n                        <button type=\"submit\" id=\"save_slack\" class=\"btn btn-primary\" disabled><i class=\"fas fa-check icon-white\" aria-hidden=\"true\"></i> {{ trans('general.save') }}</button>\n                    </div>\n\n                </div>\n            </div> <!-- /box -->\n        </div> <!-- /.col-md-8-->\n    </div> <!-- /.row-->\n\n    {{Form::close()}}\n\n@stop\n\n@push('js')\n    <script nonce=\"{{ csrf_token() }}\">\n        var fieldcheck = function (event) {\n            if($('#slack_endpoint').val() != \"\" && $('#slack_channel').val() != \"\" && $('#slack_botname').val() != \"\") {\n                //enable test button *only* if all three fields are filled in\n                $('#slacktestcontainer').fadeIn(500);\n            } else {\n                //otherwise it's hidden\n                $('#slacktestcontainer').fadeOut(500);\n            }\n\n            if(event) { //on 'initial load' we don't *have* an 'event', but in the regular keyup callback, we *do*. So this only fires on 'real' callback events, not on first load\n                if($('#slack_endpoint').val() == \"\" && $('#slack_channel').val() == \"\" && $('#slack_botname').val() == \"\") {\n                    // if all three fields are blank, the user may want to disable Slack integration; enable the Save button\n                    $('#save_slack').removeAttr('disabled');\n                }\n            }\n        };\n\n        fieldcheck(); //run our field-checker once on page-load to set the initial state correctly.\n\n        $('input:text').keyup(fieldcheck); // if *any* text field changes, we recalculate button states\n\n\n        $(\"#slacktest\").click(function() {\n\n            $(\"#slacktestrow\").removeClass('text-success');\n            $(\"#slacktestrow\").removeClass('text-danger');\n            $(\"#slackteststatus\").removeClass('text-danger');\n            $(\"#slackteststatus\").html('');\n            $(\"#slacktesticon\").html('<i class=\"fas fa-spinner spin\"></i> Sending Slack test message...');\n            $.ajax({\n                url: '{{ route('api.settings.slacktest') }}',\n                type: 'POST',\n                headers: {\n                    \"X-Requested-With\": 'XMLHttpRequest',\n                    \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr('content')\n                },\n                data: {\n                    'slack_endpoint': $('#slack_endpoint').val(),\n                    'slack_channel': $('#slack_channel').val(),\n                    'slack_botname': $('#slack_botname').val(),\n\n                },\n\n                dataType: 'json',\n\n                success: function (data) {\n                    $('#save_slack').removeAttr('disabled');\n                    $(\"#slacktesticon\").html('');\n                    $(\"#slacktestrow\").addClass('text-success');\n                    $(\"#slackteststatus\").addClass('text-success');\n                    $(\"#slackteststatus\").html('<i class=\"fas fa-check text-success\"></i> Success! Check the ' + $('#slack_channel').val() + ' channel for your test message, and be sure to click SAVE below to store your settings.');\n                },\n\n                error: function (data) {\n\n\n                    if (data.responseJSON) {\n                        var errors = data.responseJSON.message;\n                    } else {\n                        var errors;\n                    }\n\n                    var error_text = '';\n\n                    $('#save_slack').attr(\"disabled\", true);\n                    $(\"#slacktesticon\").html('');\n                    $(\"#slackteststatus\").addClass('text-danger');\n                    $(\"#slacktesticon\").html('<i class=\"fas fa-exclamation-triangle text-danger\"></i>');\n\n                    if (data.status == 500) {\n                        $('#slackteststatus').html('500 Server Error');\n                    } else if (data.status == 400) {\n\n                        if (typeof errors != 'string') {\n\n                            for (i = 0; i < errors.length; i++) {\n                                if (errors[i]) {\n                                    error_text += '<li>Error: ' + errors[i];\n                                }\n\n                            }\n\n                        } else {\n                            error_text = errors;\n                        }\n\n                        $('#slackteststatus').html(error_text);\n\n                    } else {\n                        $('#slackteststatus').html(data.responseText.message);\n                    }\n                }\n\n\n            });\n            return false;\n        });\n\n    </script>\n\n@endpush\n"], "fixing_code": ["<?php\n\nnamespace App\\Http\\Controllers\\Api;\n\nuse App\\Http\\Controllers\\Controller;\nuse App\\Http\\Transformers\\LoginAttemptsTransformer;\nuse App\\Models\\Ldap;\nuse App\\Models\\Setting;\nuse App\\Notifications\\MailTest;\nuse App\\Services\\LdapAd;\nuse GuzzleHttp\\Client;\nuse Illuminate\\Http\\JsonResponse;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Http\\Response;\nuse Illuminate\\Support\\Facades\\DB;\nuse Illuminate\\Support\\Facades\\Log;\nuse Illuminate\\Support\\Facades\\Notification;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Illuminate\\Support\\Facades\\Validator; // forward-port of v4 LDAP model for Sync\n\nclass SettingsController extends Controller\n{\n    /**\n     * Test the ldap settings\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @param App\\Models\\LdapAd $ldap\n     *\n     * @return \\Illuminate\\Http\\JsonResponse\n     */\n    public function ldapAdSettingsTest(LdapAd $ldap): JsonResponse\n    {\n        if (! $ldap->init()) {\n            Log::info('LDAP is not enabled so we cannot test.');\n\n            return response()->json(['message' => 'LDAP is not enabled, cannot test.'], 400);\n        }\n\n        // The connect, bind and resulting users message\n        $message = [];\n\n        // This is all kinda fucked right now. The connection test doesn't actually do what you think,\n        // // and the way we parse the errors\n        // on the JS side is horrible.\n        Log::info('Preparing to test LDAP user login');\n        // Test user can connect to the LDAP server\n        try {\n            $ldap->testLdapAdUserConnection();\n            $message['login'] = [\n                'message' => 'Successfully connected to LDAP server.',\n            ];\n        } catch (\\Exception $ex) {\n            \\Log::debug('Connection to LDAP server '.Setting::getSettings()->ldap_server.' failed. Please check your LDAP settings and try again. Server Responded with error: '.$ex->getMessage());\n\n            return response()->json(\n                ['message' => 'Connection to LDAP server '.Setting::getSettings()->ldap_server.\" failed. Verify that the LDAP hostname is entered correctly and that it can be reached from this web server. \\n\\nServer Responded with error: \".$ex->getMessage(),\n\n                ], 400);\n        }\n\n        Log::info('Preparing to test LDAP bind connection');\n        // Test user can bind to the LDAP server\n        try {\n            Log::info('Testing Bind');\n            $ldap->testLdapAdBindConnection();\n            $message['bind'] = [\n                'message' => 'Successfully bound to LDAP server.',\n            ];\n        } catch (\\Exception $ex) {\n            Log::info('LDAP Bind failed');\n\n            return response()->json(['message' => 'Connection to LDAP successful, but we were unable to Bind the LDAP user '.Setting::getSettings()->ldap_uname.\". Verify your that your LDAP Bind username and password are correct. \\n\\nServer Responded with error: \".$ex->getMessage(),\n            ], 400);\n        }\n\n        Log::info('Preparing to get sample user set from LDAP directory');\n        // Get a sample of 10 users so user can verify the data is correct\n        $settings = Setting::getSettings();\n        try {\n            Log::info('Testing LDAP sync');\n            error_reporting(E_ALL & ~E_DEPRECATED); // workaround for php7.4, which deprecates ldap_control_paged_result\n            // $users = $ldap->testUserImportSync(); // from AdLdap2 from v5, disabling and falling back to v4's sync code\n            $users = collect(Ldap::findLdapUsers())->slice(0, 11)->filter(function ($value, $key) { //choosing ELEVEN because one is going to be the count, which we're about to filter out in the next line\n                return is_int($key);\n            })->map(function ($item) use ($settings) {\n                return (object) [\n                    'username'        => $item[$settings['ldap_username_field']][0] ?? null,\n                    'employee_number' => $item[$settings['ldap_emp_num']][0] ?? null,\n                    'lastname'        => $item[$settings['ldap_lname_field']][0] ?? null,\n                    'firstname'       => $item[$settings['ldap_fname_field']][0] ?? null,\n                    'email'           => $item[$settings['ldap_email']][0] ?? null,\n                ];\n            });\n            if ($users->count() > 0) {\n                $message['user_sync'] = [\n                    'users' => $users,\n                ];\n            } else {\n                $message['user_sync'] = [\n                    'message' => 'Connection to LDAP was successful, however there were no users returned from your query. You should confirm the Base Bind DN above.',\n                ];\n\n                return response()->json($message, 400);\n            }\n        } catch (\\Exception $ex) {\n            Log::info('LDAP sync failed');\n            $message['user_sync'] = [\n                'message' => 'Error getting users from LDAP directory, error: '.$ex->getMessage(),\n            ];\n\n            return response()->json($message, 400);\n        }\n\n        return response()->json($message, 200);\n    }\n\n    public function ldaptestlogin(Request $request, LdapAd $ldap)\n    {\n        if (Setting::getSettings()->ldap_enabled != '1') {\n            \\Log::debug('LDAP is not enabled. Cannot test.');\n\n            return response()->json(['message' => 'LDAP is not enabled, cannot test.'], 400);\n        }\n\n        $rules = [\n            'ldaptest_user' => 'required',\n            'ldaptest_password' => 'required',\n        ];\n\n        $validator = Validator::make($request->all(), $rules);\n        if ($validator->fails()) {\n            \\Log::debug('LDAP Validation test failed.');\n            $validation_errors = implode(' ', $validator->errors()->all());\n\n            return response()->json(['message' => $validator->errors()->all()], 400);\n        }\n\n        \\Log::debug('Preparing to test LDAP login');\n        try {\n            DB::beginTransaction(); //this was the easiest way to invoke a full test of an LDAP login without adding new users to the DB (which may not be desired)\n\n            // $results = $ldap->ldap->auth()->attempt($request->input('ldaptest_username'), $request->input('ldaptest_password'), true);\n            // can't do this because that's a protected property.\n\n            $results = $ldap->ldapLogin($request->input('ldaptest_user'), $request->input('ldaptest_password')); // this would normally create a user on success (if they didn't already exist), but for the transaction\n            if ($results) {\n                return response()->json(['message' => 'It worked! '.$request->input('ldaptest_user').' successfully binded to LDAP.'], 200);\n            } else {\n                return response()->json(['message' => 'Login Failed. '.$request->input('ldaptest_user').' did not successfully bind to LDAP.'], 400);\n            }\n        } catch (\\Exception $e) {\n            \\Log::debug('Connection failed');\n\n            return response()->json(['message' => $e->getMessage()], 400);\n        } finally {\n            DB::rollBack(); // ALWAYS rollback, whether success or failure\n        }\n    }\n\n    public function slacktest(Request $request)\n    {\n\n        // Only attempt the slack request if the validation passes\n        if ($request->validate([\n            'slack_endpoint'   => 'url|required_with:slack_channel|starts_with:https://hooks.slack.com|nullable',\n            'slack_channel'   => 'required_with:slack_endpoint|starts_with:#|nullable',\n        ])) {\n            $slack = new Client([\n                'base_url' => e($request->input('slack_endpoint')),\n                'defaults' => [\n                    'exceptions' => false,\n                ],\n            ]);\n\n            $payload = json_encode(\n                [\n                    'channel'    => e($request->input('slack_channel')),\n                    'text'       => trans('general.slack_test_msg'),\n                    'username'    => e($request->input('slack_botname')),\n                    'icon_emoji' => ':heart:',\n                ]);\n\n            try {\n                $slack->post($request->input('slack_endpoint'), ['body' => $payload]);\n\n                return response()->json(['message' => 'Success'], 200);\n            } catch (\\Exception $e) {\n                return response()->json(['message' => 'Oops! Please check the channel name and webhook endpoint URL. Slack responded with: '.$e->getMessage()], 400);\n            }\n        }\n\n        return response()->json(['message' => 'Something went wrong :( '], 400);\n    }\n\n    /**\n     * Test the email configuration\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v3.0]\n     * @return Redirect\n     */\n    public function ajaxTestEmail()\n    {\n        if (! config('app.lock_passwords')) {\n            try {\n                Notification::send(Setting::first(), new MailTest());\n\n                return response()->json(['message' => 'Mail sent to '.config('mail.reply_to.address')], 200);\n            } catch (\\Exception $e) {\n                return response()->json(['message' => $e->getMessage()], 500);\n            }\n        }\n\n        return response()->json(['message' => 'Mail would have been sent, but this application is in demo mode! '], 200);\n    }\n\n    /**\n     * Delete server-cached barcodes\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0.0]\n     * @return Response\n     */\n    public function purgeBarcodes()\n    {\n        $file_count = 0;\n        $files = Storage::disk('public')->files('barcodes');\n\n        foreach ($files as $file) { // iterate files\n\n            $file_parts = explode('.', $file);\n            $extension = end($file_parts);\n            \\Log::debug($extension);\n\n            // Only generated barcodes would have a .png file extension\n            if ($extension == 'png') {\n                \\Log::debug('Deleting: '.$file);\n\n                try {\n                    Storage::disk('public')->delete($file);\n                    \\Log::debug('Deleting: '.$file);\n                    $file_count++;\n                } catch (\\Exception $e) {\n                    \\Log::debug($e);\n                }\n            }\n        }\n\n        return response()->json(['message' => 'Deleted '.$file_count.' barcodes'], 200);\n    }\n\n    /**\n     * Get a list of login attempts\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     * @since [v5.0.0]\n     * @param  \\Illuminate\\Http\\Request  $request\n     * @return array\n     */\n    public function showLoginAttempts(Request $request)\n    {\n        $allowed_columns = ['id', 'username', 'remote_ip', 'user_agent', 'successful', 'created_at'];\n\n        $login_attempts = DB::table('login_attempts');\n        $order = $request->input('order') === 'asc' ? 'asc' : 'desc';\n        $sort = in_array($request->get('sort'), $allowed_columns) ? $request->get('sort') : 'created_at';\n\n        $total = $login_attempts->count();\n        $login_attempts->orderBy($sort, $order);\n        $login_attempt_results = $login_attempts->skip(request('offset', 0))->take(request('limit', 20))->get();\n\n        return (new LoginAttemptsTransformer)->transformLoginAttempts($login_attempt_results, $total);\n    }\n}\n", "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse App\\Helpers\\Helper;\nuse App\\Helpers\\StorageHelper;\nuse App\\Http\\Requests\\ImageUploadRequest;\nuse App\\Http\\Requests\\SettingsSamlRequest;\nuse App\\Http\\Requests\\SetupUserRequest;\nuse App\\Models\\Setting;\nuse App\\Models\\User;\nuse App\\Notifications\\FirstAdminNotification;\nuse App\\Notifications\\MailTest;\nuse Auth;\nuse Crypt;\nuse DB;\nuse enshrined\\svgSanitize\\Sanitizer;\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Storage;\nuse Image;\nuse Input;\nuse Redirect;\nuse Response;\nuse Illuminate\\Support\\Str;\nuse Illuminate\\Support\\Facades\\Artisan;\n\n/**\n * This controller handles all actions related to Settings for\n * the Snipe-IT Asset Management application.\n *\n * @version    v1.0\n */\nclass SettingsController extends Controller\n{\n    /**\n     * Checks to see whether or not the database has a migrations table\n     * and a user, otherwise display the setup view.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function getSetupIndex()\n    {\n        $start_settings['php_version_min'] = false;\n\n        if (version_compare(PHP_VERSION, config('app.min_php'), '<')) {\n            return response('<center><h1>This software requires PHP version '.config('app.min_php').' or greater. This server is running '.PHP_VERSION.'. </h1><h2>Please upgrade PHP on this server and try again. </h2></center>', 500);\n        }\n\n        try {\n            $conn = DB::select('select 2 + 2');\n            $start_settings['db_conn'] = true;\n            $start_settings['db_name'] = DB::connection()->getDatabaseName();\n            $start_settings['db_error'] = null;\n        } catch (\\PDOException $e) {\n            $start_settings['db_conn'] = false;\n            $start_settings['db_name'] = config('database.connections.mysql.database');\n            $start_settings['db_error'] = $e->getMessage();\n        }\n\n        $protocol = array_key_exists('HTTPS', $_SERVER) && ('on' == $_SERVER['HTTPS']) ? 'https://' : 'http://';\n\n        $host = array_key_exists('SERVER_NAME', $_SERVER) ? $_SERVER['SERVER_NAME'] : null;\n        $port = array_key_exists('SERVER_PORT', $_SERVER) ? $_SERVER['SERVER_PORT'] : null;\n        if (('http://' === $protocol && '80' != $port) || ('https://' === $protocol && '443' != $port)) {\n            $host .= ':'.$port;\n        }\n        $pageURL = $protocol.$host.$_SERVER['REQUEST_URI'];\n\n        $start_settings['url_valid'] = (url('/').'/setup' === $pageURL);\n\n        $start_settings['url_config'] = url('/');\n        $start_settings['real_url'] = $pageURL;\n        $start_settings['php_version_min'] = true;\n\n        // Curl the .env file to make sure it's not accessible via a browser\n        $ch = curl_init($protocol.$host.'/.env');\n        curl_setopt($ch, CURLOPT_HEADER, true);    // we want headers\n        curl_setopt($ch, CURLOPT_NOBODY, true);    // we don't need body\n        curl_setopt($ch, CURLOPT_RETURNTRANSFER, true);\n        curl_setopt($ch, CURLOPT_TIMEOUT, 10);\n        $output = curl_exec($ch);\n        $httpcode = curl_getinfo($ch, CURLINFO_HTTP_CODE);\n        curl_close($ch);\n\n        if (404 == $httpcode || 403 == $httpcode || 0 == $httpcode) {\n            $start_settings['env_exposed'] = false;\n        } else {\n            $start_settings['env_exposed'] = true;\n        }\n\n        if (\\App::Environment('production') && (true == config('app.debug'))) {\n            $start_settings['debug_exposed'] = true;\n        } else {\n            $start_settings['debug_exposed'] = false;\n        }\n\n        $environment = app()->environment();\n        if ('production' != $environment) {\n            $start_settings['env'] = $environment;\n            $start_settings['prod'] = false;\n        } else {\n            $start_settings['env'] = $environment;\n            $start_settings['prod'] = true;\n        }\n\n        if (function_exists('posix_getpwuid')) { // Probably Linux\n            $owner = posix_getpwuid(fileowner($_SERVER['SCRIPT_FILENAME']));\n            $start_settings['owner'] = $owner['name'];\n        } else { // Windows\n            // TODO: Is there a way of knowing if a windows user has elevated permissions\n            // This just gets the user name, which likely isn't 'root'\n            // $start_settings['owner'] = getenv('USERNAME');\n            $start_settings['owner'] = '';\n        }\n\n        if (('root' === $start_settings['owner']) || ('0' === $start_settings['owner'])) {\n            $start_settings['owner_is_admin'] = true;\n        } else {\n            $start_settings['owner_is_admin'] = false;\n        }\n\n        if ((is_writable(storage_path()))\n            && (is_writable(storage_path().'/framework'))\n            && (is_writable(storage_path().'/framework/cache'))\n            && (is_writable(storage_path().'/framework/sessions'))\n            && (is_writable(storage_path().'/framework/views'))\n            && (is_writable(storage_path().'/logs'))\n        ) {\n            $start_settings['writable'] = true;\n        } else {\n            $start_settings['writable'] = false;\n        }\n\n        $start_settings['gd'] = extension_loaded('gd');\n\n        return view('setup/index')\n            ->with('step', 1)\n            ->with('start_settings', $start_settings)\n            ->with('section', 'Pre-Flight Check');\n    }\n\n    /**\n     * Save the first admin user from Setup.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return Redirect\n     */\n    public function postSaveFirstAdmin(SetupUserRequest $request)\n    {\n        $user = new User();\n        $user->first_name = $data['first_name'] = $request->input('first_name');\n        $user->last_name = $request->input('last_name');\n        $user->email = $data['email'] = $request->input('email');\n        $user->activated = 1;\n        $permissions = ['superuser' => 1];\n        $user->permissions = json_encode($permissions);\n        $user->username = $data['username'] = $request->input('username');\n        $user->password = bcrypt($request->input('password'));\n        $data['password'] = $request->input('password');\n\n        $settings = new Setting();\n        $settings->full_multiple_companies_support = $request->input('full_multiple_companies_support', 0);\n        $settings->site_name = $request->input('site_name');\n        $settings->alert_email = $request->input('email');\n        $settings->alerts_enabled = 1;\n        $settings->pwd_secure_min = 10;\n        $settings->brand = 1;\n        $settings->locale = $request->input('locale', 'en');\n        $settings->default_currency = $request->input('default_currency', 'USD');\n        $settings->user_id = 1;\n        $settings->email_domain = $request->input('email_domain');\n        $settings->email_format = $request->input('email_format');\n        $settings->next_auto_tag_base = 1;\n        $settings->auto_increment_assets = $request->input('auto_increment_assets', 0);\n        $settings->auto_increment_prefix = $request->input('auto_increment_prefix');\n\n        if ((! $user->isValid()) || (! $settings->isValid())) {\n            return redirect()->back()->withInput()->withErrors($user->getErrors())->withErrors($settings->getErrors());\n        } else {\n            $user->save();\n            Auth::login($user, true);\n            $settings->save();\n\n            if ($request->input('email_creds') == '1') {\n                $data = [];\n                $data['email'] = $user->email;\n                $data['username'] = $user->username;\n                $data['first_name'] = $user->first_name;\n                $data['last_name'] = $user->last_name;\n                $data['password'] = $request->input('password');\n                $user->notify(new FirstAdminNotification($data));\n            }\n\n            return redirect()->route('setup.done');\n        }\n    }\n\n    /**\n     * Return the admin user creation form in Setup.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function getSetupUser()\n    {\n        return view('setup/user')\n            ->with('step', 3)\n            ->with('section', 'Create a User');\n    }\n\n    /**\n     * Return the view that tells the user that the Setup is done.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function getSetupDone()\n    {\n        return view('setup/done')\n            ->with('step', 4)\n            ->with('section', 'Done!');\n    }\n\n    /**\n     * Migrate the database tables, and return the output\n     * to a view for Setup.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function getSetupMigrate()\n    {\n        Artisan::call('migrate', ['--force' => true]);\n        if ((! file_exists(storage_path().'/oauth-private.key')) || (! file_exists(storage_path().'/oauth-public.key'))) {\n            Artisan::call('migrate', ['--path' => 'vendor/laravel/passport/database/migrations', '--force' => true]);\n            Artisan::call('passport:install');\n        }\n\n        return view('setup/migrate')\n            ->with('output', 'Databases installed!')\n            ->with('step', 2)\n            ->with('section', 'Create Database Tables');\n    }\n\n    /**\n     * Return a view that shows some of the key settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function index()\n    {\n        $settings = Setting::getSettings();\n\n        return view('settings/index', compact('settings'));\n    }\n\n    /**\n     * Return the admin settings page.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getEdit()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings/general', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getSettings()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings/general', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postSettings(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->modellist_displays = '';\n\n        if (($request->filled('show_in_model_list')) && (count($request->input('show_in_model_list')) > 0)) {\n            $setting->modellist_displays = implode(',', $request->input('show_in_model_list'));\n        }\n\n        $setting->full_multiple_companies_support = $request->input('full_multiple_companies_support', '0');\n        $setting->unique_serial = $request->input('unique_serial', '0');\n        $setting->show_images_in_email = $request->input('show_images_in_email', '0');\n        $setting->show_archived_in_list = $request->input('show_archived_in_list', '0');\n        $setting->dashboard_message = $request->input('dashboard_message');\n        $setting->email_domain = $request->input('email_domain');\n        $setting->email_format = $request->input('email_format');\n        $setting->username_format = $request->input('username_format');\n        $setting->require_accept_signature = $request->input('require_accept_signature');\n        $setting->show_assigned_assets = $request->input('show_assigned_assets', '0');\n        if (! config('app.lock_passwords')) {\n            $setting->login_note = $request->input('login_note');\n        }\n\n        $setting->default_eula_text = $request->input('default_eula_text');\n        $setting->thumbnail_max_h = $request->input('thumbnail_max_h');\n        $setting->privacy_policy_link = $request->input('privacy_policy_link');\n\n        $setting->depreciation_method = $request->input('depreciation_method');\n\n        if ($request->input('per_page') != '') {\n            $setting->per_page = $request->input('per_page');\n        } else {\n            $setting->per_page = 200;\n        }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getBranding()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.branding', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postBranding(ImageUploadRequest $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->brand = $request->input('brand', '1');\n        $setting->header_color = $request->input('header_color');\n        $setting->support_footer = $request->input('support_footer');\n        $setting->version_footer = $request->input('version_footer');\n        $setting->footer_text = $request->input('footer_text');\n        $setting->skin = $request->input('skin');\n        $setting->allow_user_skin = $request->input('allow_user_skin');\n        $setting->show_url_in_emails = $request->input('show_url_in_emails', '0');\n        $setting->logo_print_assets = $request->input('logo_print_assets', '0');\n\n        // Only allow the site name and CSS to be changed if lock_passwords is false\n        // Because public demos make people act like dicks\n        if (! config('app.lock_passwords')) {\n            $setting->site_name = $request->input('site_name');\n            $setting->custom_css = $request->input('custom_css');\n        }\n\n        $setting = $request->handleImages($setting, 600, 'logo', '', 'logo');\n\n        if ('1' == $request->input('clear_logo')) {\n                Storage::disk('public')->delete($setting->logo);\n            $setting->logo = null;\n                $setting->brand = 1;\n        }\n\n        $setting = $request->handleImages($setting, 600, 'email_logo', '', 'email_logo');\n\n\n       if ('1' == $request->input('clear_email_logo')) {\n            Storage::disk('public')->delete($setting->email_logo);\n            $setting->email_logo = null;\n            // If they are uploading an image, validate it and upload it\n        }\n\n        $setting = $request->handleImages($setting, 600, 'label_logo', '', 'label_logo');\n\n        if ('1' == $request->input('clear_label_logo')) {\n            Storage::disk('public')->delete($setting->label_logo);\n            $setting->label_logo = null;\n        }\n\n\n        // If the user wants to clear the favicon...\n         if ($request->hasFile('favicon')) {\n            $favicon_image = $favicon_upload = $request->file('favicon');\n            $favicon_ext = $favicon_image->getClientOriginalExtension();\n            $setting->favicon = $favicon_file_name = 'favicon-uploaded.'.$favicon_ext;\n\n            if (($favicon_image->getClientOriginalExtension() != 'ico') && ($favicon_image->getClientOriginalExtension() != 'svg')) {\n                $favicon_upload = Image::make($favicon_image->getRealPath())->resize(null, 36, function ($constraint) {\n                    $constraint->aspectRatio();\n                    $constraint->upsize();\n                });\n\n                // This requires a string instead of an object, so we use ($string)\n                Storage::disk('public')->put($favicon_file_name, (string) $favicon_upload->encode());\n            } else {\n                Storage::disk('public')->put($favicon_file_name, file_get_contents($request->file('favicon')));\n            }\n\n\n            // Remove Current image if exists\n            if (($setting->favicon) && (file_exists($favicon_file_name))) {\n                Storage::disk('public')->delete($favicon_file_name);\n            }\n        } elseif ('1' == $request->input('clear_favicon')) {\n             Storage::disk('public')->delete($setting->clear_favicon);\n            $setting->favicon = null;\n\n             // If they are uploading an image, validate it and upload it\n         }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getSecurity()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.security', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postSecurity(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n        if (! config('app.lock_passwords')) {\n            if ('' == $request->input('two_factor_enabled')) {\n                $setting->two_factor_enabled = null;\n            } else {\n                $setting->two_factor_enabled = $request->input('two_factor_enabled');\n            }\n\n            // remote user login\n            $setting->login_remote_user_enabled = (int) $request->input('login_remote_user_enabled');\n            $setting->login_common_disabled = (int) $request->input('login_common_disabled');\n            $setting->login_remote_user_custom_logout_url = $request->input('login_remote_user_custom_logout_url');\n            $setting->login_remote_user_header_name = $request->input('login_remote_user_header_name');\n        }\n\n        $setting->pwd_secure_uncommon = (int) $request->input('pwd_secure_uncommon');\n        $setting->pwd_secure_min = (int) $request->input('pwd_secure_min');\n        $setting->pwd_secure_complexity = '';\n\n\n        if ($request->filled('pwd_secure_complexity')) {\n            $setting->pwd_secure_complexity = implode('|', $request->input('pwd_secure_complexity'));\n        }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getLocalization()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.localization', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postLocalization(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        if (! config('app.lock_passwords')) {\n            $setting->locale = $request->input('locale', 'en');\n        }\n        $setting->default_currency = $request->input('default_currency', '$');\n        $setting->date_display_format = $request->input('date_display_format');\n        $setting->time_display_format = $request->input('time_display_format');\n        $setting->digit_separator = $request->input('digit_separator');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getAlerts()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.alerts', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postAlerts(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $alert_email = rtrim($request->input('alert_email'), ',');\n        $alert_email = trim($alert_email);\n        $admin_cc_email = rtrim($request->input('admin_cc_email'), ',');\n        $admin_cc_email = trim($admin_cc_email);\n\n        $setting->alert_email = $alert_email;\n        $setting->admin_cc_email = $admin_cc_email;\n        $setting->alerts_enabled = $request->input('alerts_enabled', '0');\n        $setting->alert_interval = $request->input('alert_interval');\n        $setting->alert_threshold = $request->input('alert_threshold');\n        $setting->audit_interval = $request->input('audit_interval');\n        $setting->audit_warning_days = $request->input('audit_warning_days');\n        $setting->show_alerts_in_menu = $request->input('show_alerts_in_menu', '0');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getSlack()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.slack', compact('setting'));\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postSlack(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getAssetTags()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.asset_tags', compact('setting'));\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postAssetTags(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->auto_increment_prefix = $request->input('auto_increment_prefix');\n        $setting->auto_increment_assets = $request->input('auto_increment_assets', '0');\n        $setting->zerofill_count = $request->input('zerofill_count');\n        $setting->next_auto_tag_base = $request->input('next_auto_tag_base');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function getBarcodes()\n    {\n        $setting = Setting::getSettings();\n        $is_gd_installed = extension_loaded('gd');\n\n        return view('settings.barcodes', compact('setting'))->with('is_gd_installed', $is_gd_installed);\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.0]\n     *\n     * @return View\n     */\n    public function postBarcodes(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->qr_code = $request->input('qr_code', '0');\n        $setting->alt_barcode = $request->input('alt_barcode');\n        $setting->alt_barcode_enabled = $request->input('alt_barcode_enabled', '0');\n        $setting->barcode_type = $request->input('barcode_type');\n        $setting->qr_text = $request->input('qr_text');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function getPhpInfo()\n    {\n        if (true === config('app.debug')) {\n            return view('settings.phpinfo');\n        }\n\n        return redirect()->route('settings.index')\n            ->with('error', 'PHP syetem debugging information is only available when debug is enabled in your .env file.');\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function getLabels()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.labels', compact('setting'));\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function postLabels(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n        $setting->labels_per_page = $request->input('labels_per_page');\n        $setting->labels_width = $request->input('labels_width');\n        $setting->labels_height = $request->input('labels_height');\n        $setting->labels_pmargin_left = $request->input('labels_pmargin_left');\n        $setting->labels_pmargin_right = $request->input('labels_pmargin_right');\n        $setting->labels_pmargin_top = $request->input('labels_pmargin_top');\n        $setting->labels_pmargin_bottom = $request->input('labels_pmargin_bottom');\n        $setting->labels_display_bgutter = $request->input('labels_display_bgutter');\n        $setting->labels_display_sgutter = $request->input('labels_display_sgutter');\n        $setting->labels_fontsize = $request->input('labels_fontsize');\n        $setting->labels_pagewidth = $request->input('labels_pagewidth');\n        $setting->labels_pageheight = $request->input('labels_pageheight');\n        $setting->labels_display_company_name = $request->input('labels_display_company_name', '0');\n        $setting->labels_display_company_name = $request->input('labels_display_company_name', '0');\n\n        if ($request->filled('labels_display_name')) {\n            $setting->labels_display_name = 1;\n        } else {\n            $setting->labels_display_name = 0;\n        }\n\n        if ($request->filled('labels_display_serial')) {\n            $setting->labels_display_serial = 1;\n        } else {\n            $setting->labels_display_serial = 0;\n        }\n\n        if ($request->filled('labels_display_tag')) {\n            $setting->labels_display_tag = 1;\n        } else {\n            $setting->labels_display_tag = 0;\n        }\n\n        if ($request->filled('labels_display_tag')) {\n            $setting->labels_display_tag = 1;\n        } else {\n            $setting->labels_display_tag = 0;\n        }\n\n        if ($request->filled('labels_display_model')) {\n            $setting->labels_display_model = 1;\n        } else {\n            $setting->labels_display_model = 0;\n        }\n\n        if ($setting->save()) {\n            return redirect()->route('settings.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function getLdapSettings()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.ldap', compact('setting'));\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function postLdapSettings(Request $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        if (! config('app.lock_passwords') === true) {\n            $setting->ldap_enabled = $request->input('ldap_enabled', '0');\n            $setting->ldap_server = $request->input('ldap_server');\n            $setting->ldap_server_cert_ignore = $request->input('ldap_server_cert_ignore', false);\n            $setting->ldap_uname = $request->input('ldap_uname');\n            if ($request->filled('ldap_pword')) {\n                $setting->ldap_pword = Crypt::encrypt($request->input('ldap_pword'));\n            }\n            $setting->ldap_basedn = $request->input('ldap_basedn');\n            $setting->ldap_filter = $request->input('ldap_filter');\n            $setting->ldap_username_field = $request->input('ldap_username_field');\n            $setting->ldap_lname_field = $request->input('ldap_lname_field');\n            $setting->ldap_fname_field = $request->input('ldap_fname_field');\n            $setting->ldap_auth_filter_query = $request->input('ldap_auth_filter_query');\n            $setting->ldap_version = $request->input('ldap_version');\n            $setting->ldap_active_flag = $request->input('ldap_active_flag');\n            $setting->ldap_emp_num = $request->input('ldap_emp_num');\n            $setting->ldap_email = $request->input('ldap_email');\n            $setting->ad_domain = $request->input('ad_domain');\n            $setting->is_ad = $request->input('is_ad', '0');\n            $setting->ad_append_domain = $request->input('ad_append_domain', '0');\n            $setting->ldap_tls = $request->input('ldap_tls', '0');\n            $setting->ldap_pw_sync = $request->input('ldap_pw_sync', '0');\n            $setting->custom_forgot_pass_url = $request->input('custom_forgot_pass_url');\n            $setting->ldap_phone_field = $request->input('ldap_phone');\n            $setting->ldap_jobtitle = $request->input('ldap_jobtitle');\n            $setting->ldap_country = $request->input('ldap_country');\n            $setting->ldap_dept = $request->input('ldap_dept');\n            $setting->ldap_client_tls_cert   = $request->input('ldap_client_tls_cert');\n            $setting->ldap_client_tls_key    = $request->input('ldap_client_tls_key');\n\n\n        }\n\n        if ($setting->save()) {\n            $setting->update_client_side_cert_files();\n            return redirect()->route('settings.ldap.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author Johnson Yi <jyi.dev@outlook.com>\n     *\n     * @since v5.0.0\n     *\n     * @return View\n     */\n    public function getSamlSettings()\n    {\n        $setting = Setting::getSettings();\n\n        return view('settings.saml', compact('setting'));\n    }\n\n    /**\n     * Saves settings from form.\n     *\n     * @author Johnson Yi <jyi.dev@outlook.com>\n     *\n     * @since v5.0.0\n     *\n     * @return View\n     */\n    public function postSamlSettings(SettingsSamlRequest $request)\n    {\n        if (is_null($setting = Setting::getSettings())) {\n            return redirect()->to('admin')->with('error', trans('admin/settings/message.update.error'));\n        }\n\n        $setting->saml_enabled = $request->input('saml_enabled', '0');\n        $setting->saml_idp_metadata = $request->input('saml_idp_metadata');\n        $setting->saml_attr_mapping_username = $request->input('saml_attr_mapping_username');\n        $setting->saml_forcelogin = $request->input('saml_forcelogin', '0');\n        $setting->saml_slo = $request->input('saml_slo', '0');\n        if (! empty($request->input('saml_sp_privatekey'))) {\n            $setting->saml_sp_x509cert = $request->input('saml_sp_x509cert');\n            $setting->saml_sp_privatekey = $request->input('saml_sp_privatekey');\n        }\n        if (! empty($request->input('saml_sp_x509certNew'))) {\n            $setting->saml_sp_x509certNew = $request->input('saml_sp_x509certNew');\n        } else {\n            $setting->saml_sp_x509certNew = '';\n        }\n        $setting->saml_custom_settings = $request->input('saml_custom_settings');\n\n        if ($setting->save()) {\n            return redirect()->route('settings.saml.index')\n                ->with('success', trans('admin/settings/message.update.success'));\n        }\n\n        return redirect()->back()->withInput()->withErrors($setting->getErrors());\n    }\n\n    /**\n     * Show the listing of backups.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.8]\n     *\n     * @return View\n     */\n    public function getBackups()\n    {\n        $path = 'app/backups';\n        $backup_files = Storage::files($path);\n        $files_raw = [];\n\n\n        if (count($backup_files) > 0) {\n            for ($f = 0; $f < count($backup_files); $f++) {\n\n                // Skip dotfiles like .gitignore and .DS_STORE\n                if ((substr(basename($backup_files[$f]), 0, 1) != '.')) {\n                    //$lastmodified = Carbon::parse(Storage::lastModified($backup_files[$f]))->toDatetimeString();\n                    $file_timestamp = Storage::lastModified($backup_files[$f]);\n\n\n                    $files_raw[] = [\n                        'filename' => basename($backup_files[$f]),\n                        'filesize' => Setting::fileSizeConvert(Storage::size($backup_files[$f])),\n                        'modified_value' => $file_timestamp,\n                        'modified_display' => Helper::getFormattedDateObject($file_timestamp, $type = 'datetime', false),\n                        \n                    ];\n                }\n               \n            }\n        }\n\n        // Reverse the array so it lists oldest first\n        $files = array_reverse($files_raw);\n\n        return view('settings/backups', compact('path', 'files'));\n    }\n\n    /**\n     * Process the backup.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.8]\n     *\n     * @return Redirect\n     */\n    public function postBackups()\n    {\n        if (! config('app.lock_passwords')) {\n            Artisan::call('backup:run');\n            $output = Artisan::output();\n\n            // Backup completed\n            if (! preg_match('/failed/', $output)) {\n                return redirect()->route('settings.backups.index')\n                    ->with('success', trans('admin/settings/message.backup.generated'));\n            }\n\n            $formatted_output = str_replace('Backup completed!', '', $output);\n            $output_split = explode('...', $formatted_output);\n\n            if (array_key_exists(2, $output_split)) {\n                return redirect()->route('settings.backups.index')->with('error', $output_split[2]);\n            }\n\n            return redirect()->route('settings.backups.index')->with('error', $formatted_output);\n        }\n\n        return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n    }\n\n    /**\n     * Download the backup file.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.8]\n     *\n     * @return Storage\n     */\n    public function downloadFile($filename = null)\n    {\n        $path = 'app/backups';\n\n        if (! config('app.lock_passwords')) {\n            if (Storage::exists($path.'/'.$filename)) {\n                return StorageHelper::downloader($path.'/'.$filename);\n            } else {\n                // Redirect to the backup page\n                return redirect()->route('settings.backups.index')->with('error', trans('admin/settings/message.backup.file_not_found'));\n            }\n        } else {\n            // Redirect to the backup page\n            return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n        }\n    }\n\n    /**\n     * Delete the backup file.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v1.8]\n     *\n     * @return View\n     */\n    public function deleteFile($filename = null)\n    {\n        if (! config('app.lock_passwords')) {\n            $path = 'app/backups';\n\n            if (Storage::exists($path.'/'.$filename)) {\n                try {\n                    Storage::delete($path.'/'.$filename);\n\n                    return redirect()->route('settings.backups.index')->with('success', trans('admin/settings/message.backup.file_deleted'));\n                } catch (\\Exception $e) {\n                    \\Log::debug($e);\n                }\n            } else {\n                return redirect()->route('settings.backups.index')->with('error', trans('admin/settings/message.backup.file_not_found'));\n            }\n        } else {\n            return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n        }\n    }\n\n\n    /**\n     * Uploads a backup file\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v6.0]\n     *\n     * @return Redirect\n     */\n\n    public function postUploadBackup(Request $request) {\n\n        if (! config('app.lock_passwords')) {\n            if (!$request->hasFile('file')) {\n                return redirect()->route('settings.backups.index')->with('error', 'No file uploaded');\n            } else {\n                $max_file_size = Helper::file_upload_max_size();\n\n                $rules = [\n                    'file' => 'required|mimes:zip|max:'.$max_file_size,\n                ];\n\n                $validator = \\Validator::make($request->all(), $rules);\n\n                if ($validator->passes()) {\n\n                        $upload_filename = 'uploaded-'.date('U').'-'.Str::slug(pathinfo($request->file('file')->getClientOriginalName(), PATHINFO_FILENAME)).'.zip';\n\n                        Storage::putFileAs('app/backups', $request->file('file'), $upload_filename);\n            \n                        return redirect()->route('settings.backups.index')->with('success', 'File uploaded');\n                } else {\n                    return redirect()->route('settings.backups.index')->withErrors($request->getErrors());\n                }\n            }\n\n        } else {\n            return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n        }    \n\n        \n        \n    }\n\n    /**\n     * Restore the backup file.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v6.0]\n     *\n     * @return View\n     */\n    public function postRestore($filename = null)\n    {\n        \n        if (! config('app.lock_passwords')) {\n            $path = 'app/backups';\n\n            if (Storage::exists($path.'/'.$filename)) {\n\n                // grab the user's info so we can make sure they exist in the system\n                $user = User::find(Auth::user()->id);\n\n\n                // TODO: run a backup \n\n                // TODO: add db:wipe \n\n\n                // run the restore command\n                Artisan::call('snipeit:restore', \n                [\n                    '--force' => true, \n                    '--no-progress' => true, \n                    'filename' => storage_path($path).'/'.$filename\n                ]);\n\n                $output = Artisan::output();\n                    \n            \n                // If it's greater than 300, it probably worked\n                if (strlen($output) > 300) {\n                    \\Auth::logout();\n                    return redirect()->route('login')->with('success', 'Your system has been restored. Please login again.');\n                } else {\n                    return redirect()->route('settings.backups.index')->with('error', $output);\n\n                }\n                //dd($output);\n\n                // TODO: insert the user if they are not there in the old one\n                \n\n\n\n                // log the user out\n                \n\n\n            } else {\n                return redirect()->route('settings.backups.index')->with('error', trans('admin/settings/message.backup.file_not_found'));\n            }\n        } else {\n            return redirect()->route('settings.backups.index')->with('error', trans('general.feature_disabled'));\n        }\n    }\n\n    /**\n     * Return a form to allow a super admin to update settings.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function getPurge()\n    {\n        \\Log::warning('User ID '.Auth::user()->id.' is attempting a PURGE');\n\n        return view('settings.purge-form');\n    }\n\n    /**\n     * Purges soft-deletes.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return View\n     */\n    public function postPurge(Request $request)\n    {\n        if (! config('app.lock_passwords')) {\n            if ('DELETE' == $request->input('confirm_purge')) {\n                \\Log::warning('User ID '.Auth::user()->id.' initiated a PURGE!');\n                // Run a backup immediately before processing\n                Artisan::call('backup:run');\n                Artisan::call('snipeit:purge', ['--force' => 'true', '--no-interaction' => true]);\n                $output = Artisan::output();\n\n                return view('settings/purge')\n                    ->with('output', $output)->with('success', trans('admin/settings/message.purge.success'));\n            } else {\n                return redirect()->back()->with('error', trans('admin/settings/message.purge.validation_failed'));\n            }\n        } else {\n            return redirect()->back()->with('error', trans('general.feature_disabled'));\n        }\n    }\n\n    /**\n     * Returns a page with the API token generation interface.\n     *\n     * We created a controller method for this because closures aren't allowed\n     * in the routes file if you want to be able to cache the routes.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v4.0]\n     *\n     * @return View\n     */\n    public function api()\n    {\n        return view('settings.api');\n    }\n\n    /**\n     * Test the email configuration.\n     *\n     * @author [A. Gianotto] [<snipe@snipe.net>]\n     *\n     * @since [v3.0]\n     *\n     * @return Redirect\n     */\n    public function ajaxTestEmail()\n    {\n        try {\n            (new User())->forceFill([\n                'name'  => config('mail.from.name'),\n                'email' => config('mail.from.address'),\n            ])->notify(new MailTest());\n\n            return response()->json(Helper::formatStandardApiResponse('success', null, 'Maiol sent!'));\n        } catch (Exception $e) {\n            return response()->json(Helper::formatStandardApiResponse('success', null, $e->getMessage()));\n        }\n    }\n\n    public function getLoginAttempts()\n    {\n        return view('settings.logins');\n    }\n}\n", "<?php\n\nnamespace App\\Models;\n\nuse Illuminate\\Database\\Eloquent\\Factories\\HasFactory;\nuse Illuminate\\Database\\Eloquent\\Model;\nuse Illuminate\\Notifications\\Notifiable;\nuse Illuminate\\Support\\Collection;\nuse Illuminate\\Support\\Facades\\App;\nuse Illuminate\\Support\\Facades\\Cache;\nuse Parsedown;\nuse Watson\\Validating\\ValidatingTrait;\n\n/**\n * Settings model.\n */\nclass Setting extends Model\n{\n    use HasFactory;\n    use Notifiable, ValidatingTrait;\n\n    /**\n     * The app settings cache key name.\n     *\n     * @var string\n     */\n    const APP_SETTINGS_KEY = 'snipeit_app_settings';\n\n    /**\n     * The setup check cache key name.\n     *\n     * @var string\n     */\n    const SETUP_CHECK_KEY = 'snipeit_setup_check';\n\n    /**\n     * Whether the model should inject it's identifier to the unique\n     * validation rules before attempting validation. If this property\n     * is not set in the model it will default to true.\n     *\n     * @var bool\n     */\n    protected $injectUniqueIdentifier = true;\n\n    /**\n     * Model rules.\n     *\n     * @var array\n     */\n    protected $rules = [\n          'brand'                               => 'required|min:1|numeric',\n          'qr_text'                             => 'max:31|nullable',\n          'alert_email'                         => 'email_array|nullable',\n          'admin_cc_email'                      => 'email|nullable',\n          'default_currency'                    => 'required',\n          'locale'                              => 'required',\n          'slack_endpoint'                      => 'url|required_with:slack_channel|nullable|starts_with:https://hooks.slack.com',\n          'labels_per_page'                     => 'numeric',\n          'slack_channel'                       => 'required_with:slack_endpoint|starts_with:#|nullable',\n          'slack_botname'                       => 'string|nullable',\n          'labels_width'                        => 'numeric',\n          'labels_height'                       => 'numeric',\n          'labels_pmargin_left'                 => 'numeric|nullable',\n          'labels_pmargin_right'                => 'numeric|nullable',\n          'labels_pmargin_top'                  => 'numeric|nullable',\n          'labels_pmargin_bottom'               => 'numeric|nullable',\n          'labels_display_bgutter'              => 'numeric|nullable',\n          'labels_display_sgutter'              => 'numeric|nullable',\n          'labels_fontsize'                     => 'numeric|min:5',\n          'labels_pagewidth'                    => 'numeric|nullable',\n          'labels_pageheight'                   => 'numeric|nullable',\n          'login_remote_user_enabled'           => 'numeric|nullable',\n          'login_common_disabled'               => 'numeric|nullable',\n          'login_remote_user_custom_logout_url' => 'string|nullable',\n          'login_remote_user_header_name'       => 'string|nullable',\n          'thumbnail_max_h'                     => 'numeric|max:500|min:25',\n          'pwd_secure_min'                      => 'numeric|required|min:8',\n          'audit_warning_days'                  => 'numeric|nullable',\n          'audit_interval'                      => 'numeric|nullable',\n          'custom_forgot_pass_url'              => 'url|nullable',\n          'privacy_policy_link'                 => 'nullable|url',\n    ];\n\n    protected $fillable = [\n        'site_name',\n        'email_domain',\n        'email_format',\n        'username_format',\n    ];\n\n    /**\n     * Get the app settings.\n     *  Cache is expired on Setting model saved in EventServiceProvider.\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return \\App\\Models\\Setting|null\n     */\n    public static function getSettings(): ?self\n    {\n        return Cache::rememberForever(self::APP_SETTINGS_KEY, function () {\n            // Need for setup as no tables exist\n            try {\n                return self::first();\n            } catch (\\Throwable $th) {\n                return null;\n            }\n        });\n    }\n\n    /**\n     * Check to see if setup process is complete.\n     *  Cache is expired on Setting model saved in EventServiceProvider.\n     *\n     * @return bool\n     */\n    public static function setupCompleted(): bool\n    {\n        try {\n            $usercount = User::withTrashed()->count();\n            $settingsCount = self::count();\n\n            return $usercount > 0 && $settingsCount > 0;\n        } catch (\\Throwable $th) {\n            \\Log::debug('User table and settings table DO NOT exist or DO NOT have records');\n            // Catch the error if the tables dont exit\n            return false;\n        }\n    }\n\n    /**\n     * Get the current Laravel version.\n     *\n     * @return string\n     */\n    public function lar_ver(): string\n    {\n        $app = App::getFacadeApplication();\n\n        return $app::VERSION;\n    }\n\n    /**\n     * Get the default EULA text.\n     *\n     * @return string|null\n     */\n    public static function getDefaultEula(): ?string\n    {\n        if (self::getSettings()->default_eula_text) {\n            $parsedown = new Parsedown();\n\n            return $parsedown->text(e(self::getSettings()->default_eula_text));\n        }\n\n        return null;\n    }\n\n    /**\n     * Check wether to show in model dropdowns.\n     *\n     * @param string $element\n     *\n     * @return bool\n     */\n    public function modellistCheckedValue($element): bool\n    {\n        $settings = self::getSettings();\n        // If the value is blank for some reason\n        if ($settings->modellist_displays == '') {\n            return false;\n        }\n\n        $values = explode(',', $settings->modellist_displays);\n\n        foreach ($values as $value) {\n            if ($value == $element) {\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Escapes the custom CSS, and then un-escapes the greater-than symbol\n     * so it can work with direct descendant characters for bootstrap\n     * menu overrides like:.\n     *\n     * .skin-blue .sidebar-menu>li.active>a, .skin-blue .sidebar-menu>li:hover>a\n     *\n     * Important: Do not remove the e() escaping here, as we output raw in the blade.\n     *\n     * @return string escaped CSS\n     *\n     * @author A. Gianotto <snipe@snipe.net>\n     */\n    public function show_custom_css(): string\n    {\n        $custom_css = self::getSettings()->custom_css;\n        $custom_css = e($custom_css);\n        // Needed for modifying the bootstrap nav :(\n        $custom_css = str_ireplace('script', 'SCRIPTS-NOT-ALLOWED-HERE', $custom_css);\n        $custom_css = str_replace('&gt;', '>', $custom_css);\n        // Allow String output (needs quotes)\n        $custom_css = str_replace('&quot;', '\"', $custom_css);\n\n        return $custom_css;\n    }\n\n    /**\n     * Converts bytes into human readable file size.\n     *\n     * @param string $bytes\n     *\n     * @return string human readable file size (2,87 \u041c\u0431)\n     *\n     * @author Mogilev Arseny\n     */\n    public static function fileSizeConvert($bytes): string\n    {\n        $bytes = floatval($bytes);\n        $arBytes = [\n                0 => [\n                    'UNIT'  => 'TB',\n                    'VALUE' => pow(1024, 4),\n                ],\n                1 => [\n                    'UNIT'  => 'GB',\n                    'VALUE' => pow(1024, 3),\n                ],\n                2 => [\n                    'UNIT'  => 'MB',\n                    'VALUE' => pow(1024, 2),\n                ],\n                3 => [\n                    'UNIT'  => 'KB',\n                    'VALUE' => 1024,\n                ],\n                4 => [\n                    'UNIT'  => 'B',\n                    'VALUE' => 1,\n                ],\n            ];\n\n        foreach ($arBytes as $arItem) {\n            if ($bytes >= $arItem['VALUE']) {\n                $result = $bytes / $arItem['VALUE'];\n                $result = round($result, 2).$arItem['UNIT'];\n                break;\n            }\n        }\n\n        return $result;\n    }\n\n    /**\n     * The url for slack notifications.\n     *  Used by Notifiable trait.\n     *\n     * @return string\n     */\n    public function routeNotificationForSlack(): string\n    {\n        // At this point the endpoint is the same for everything.\n        //  In the future this may want to be adapted for individual notifications.\n        return self::getSettings()->slack_endpoint;\n    }\n\n    /**\n     * Get the mail reply to address from configuration.\n     *\n     * @return string\n     */\n    public function routeNotificationForMail(): string\n    {\n        // At this point the endpoint is the same for everything.\n        //  In the future this may want to be adapted for individual notifications.\n        return config('mail.reply_to.address');\n    }\n\n    /**\n     * Get the password complexity rule.\n     *\n     * @return string\n     */\n    public static function passwordComplexityRulesSaving($action = 'update'): string\n    {\n        $security_rules = '';\n        $settings = self::getSettings();\n\n        // Check if they have uncommon password enforcement selected in settings\n        if ($settings->pwd_secure_uncommon == 1) {\n            $security_rules .= '|dumbpwd';\n        }\n\n        // Check for any secure password complexity rules that may have been selected\n        if ($settings->pwd_secure_complexity != '') {\n            $security_rules .= '|'.$settings->pwd_secure_complexity;\n        }\n\n        if ($action == 'update') {\n            return 'nullable|min:'.$settings->pwd_secure_min.$security_rules;\n        }\n\n        return 'required|min:'.$settings->pwd_secure_min.$security_rules;\n    }\n\n    /**\n     * Get the specific LDAP settings\n     *\n     * @author Wes Hulette <jwhulette@gmail.com>\n     *\n     * @since 5.0.0\n     *\n     * @return Collection\n     */\n    public static function getLdapSettings(): Collection\n    {\n        $ldapSettings = self::select([\n            'ldap_enabled',\n            'ldap_server',\n            'ldap_uname',\n            'ldap_pword',\n            'ldap_basedn',\n            'ldap_filter',\n            'ldap_username_field',\n            'ldap_lname_field',\n            'ldap_fname_field',\n            'ldap_auth_filter_query',\n            'ldap_version',\n            'ldap_active_flag',\n            'ldap_emp_num',\n            'ldap_email',\n            'ldap_server_cert_ignore',\n            'ldap_port',\n            'ldap_tls',\n            'ldap_pw_sync',\n            'is_ad',\n            'ad_domain',\n            'ad_append_domain',\n            'ldap_client_tls_key',\n            'ldap_client_tls_cert'\n            ])->first()->getAttributes();\n\n        return collect($ldapSettings);\n    }\n\n    /**\n     * Return the filename for the client-side SSL cert\n     *\n     * @var string\n     */\n    public static function get_client_side_cert_path()\n    {\n        return storage_path().'/ldap_client_tls.cert';\n    }\n\n    /**\n     * Return the filename for the client-side SSL key\n     *\n     * @var string\n     */\n    public static function get_client_side_key_path()\n    {\n        return storage_path().'/ldap_client_tls.key';\n    }\n\n    public function update_client_side_cert_files()\n    {\n        /**\n         * I'm not sure if it makes sense to have a cert but no key\n         * nor vice versa, but for now I'm just leaving it like this.\n         *\n         * Also, we could easily set this up with an event handler and\n         * self::saved() or something like that but there's literally only\n         * one place where we will do that, so I'll just explicitly call\n         * this method at that spot instead. It'll be easier to debug and understand.\n         */\n        if ($this->ldap_client_tls_cert) {\n            file_put_contents(self::get_client_side_cert_path(), $this->ldap_client_tls_cert);\n        } else {\n            if (file_exists(self::get_client_side_cert_path())) {\n                unlink(self::get_client_side_cert_path());\n            }\n        }\n\n        if ($this->ldap_client_tls_key) {\n            file_put_contents(self::get_client_side_key_path(), $this->ldap_client_tls_key);\n        } else {\n            if (file_exists(self::get_client_side_key_path())) {\n                unlink(self::get_client_side_key_path());\n            }\n        }\n    }\n\n\n}\n", "<?php\n\nreturn [\n\n    /*\n    |--------------------------------------------------------------------------\n    | Validation Language Lines\n    |--------------------------------------------------------------------------\n    |\n    | The following language lines contain the default error messages used by\n    | the validator class. Some of these rules have multiple versions such\n    | such as the size rules. Feel free to tweak each of these messages.\n    |\n    */\n\n    'accepted'             => 'The :attribute must be accepted.',\n    'active_url'           => 'The :attribute is not a valid URL.',\n    'after'                => 'The :attribute must be a date after :date.',\n    'after_or_equal'       => 'The :attribute must be a date after or equal to :date.',\n    'alpha'                => 'The :attribute may only contain letters.',\n    'alpha_dash'           => 'The :attribute may only contain letters, numbers, and dashes.',\n    'alpha_num'            => 'The :attribute may only contain letters and numbers.',\n    'array'                => 'The :attribute must be an array.',\n    'before'               => 'The :attribute must be a date before :date.',\n    'before_or_equal'      => 'The :attribute must be a date before or equal to :date.',\n    'between'              => [\n        'numeric' => 'The :attribute must be between :min - :max.',\n        'file'    => 'The :attribute must be between :min - :max kilobytes.',\n        'string'  => 'The :attribute must be between :min - :max characters.',\n        'array'   => 'The :attribute must have between :min and :max items.',\n    ],\n    'boolean'              => 'The :attribute must be true or false.',\n    'confirmed'            => 'The :attribute confirmation does not match.',\n    'date'                 => 'The :attribute is not a valid date.',\n    'date_format'          => 'The :attribute does not match the format :format.',\n    'different'            => 'The :attribute and :other must be different.',\n    'digits'               => 'The :attribute must be :digits digits.',\n    'digits_between'       => 'The :attribute must be between :min and :max digits.',\n    'dimensions'           => 'The :attribute has invalid image dimensions.',\n    'distinct'             => 'The :attribute field has a duplicate value.',\n    'email'                => 'The :attribute format is invalid.',\n    'exists'               => 'The selected :attribute is invalid.',\n    'file'                 => 'The :attribute must be a file.',\n    'filled'               => 'The :attribute field must have a value.',\n    'image'                => 'The :attribute must be an image.',\n    'in'                   => 'The selected :attribute is invalid.',\n    'in_array'             => 'The :attribute field does not exist in :other.',\n    'integer'              => 'The :attribute must be an integer.',\n    'ip'                   => 'The :attribute must be a valid IP address.',\n    'ipv4'                 => 'The :attribute must be a valid IPv4 address.',\n    'ipv6'                 => 'The :attribute must be a valid IPv6 address.',\n    'json'                 => 'The :attribute must be a valid JSON string.',\n    'max'                  => [\n        'numeric' => 'The :attribute may not be greater than :max.',\n        'file'    => 'The :attribute may not be greater than :max kilobytes.',\n        'string'  => 'The :attribute may not be greater than :max characters.',\n        'array'   => 'The :attribute may not have more than :max items.',\n    ],\n    'mimes'                => 'The :attribute must be a file of type: :values.',\n    'mimetypes'            => 'The :attribute must be a file of type: :values.',\n    'min'                  => [\n        'numeric' => 'The :attribute must be at least :min.',\n        'file'    => 'The :attribute must be at least :min kilobytes.',\n        'string'  => 'The :attribute must be at least :min characters.',\n        'array'   => 'The :attribute must have at least :min items.',\n    ],\n    'starts_with'          => 'The :attribute must start with one of the following: :values.',\n    'not_in'               => 'The selected :attribute is invalid.',\n    'numeric'              => 'The :attribute must be a number.',\n    'present'              => 'The :attribute field must be present.',\n    'valid_regex'          => 'That is not a valid regex. ',\n    'regex'                => 'The :attribute format is invalid.',\n    'required'             => 'The :attribute field is required.',\n    'required_if'          => 'The :attribute field is required when :other is :value.',\n    'required_unless'      => 'The :attribute field is required unless :other is in :values.',\n    'required_with'        => 'The :attribute field is required when :values is present.',\n    'required_with_all'    => 'The :attribute field is required when :values is present.',\n    'required_without'     => 'The :attribute field is required when :values is not present.',\n    'required_without_all' => 'The :attribute field is required when none of :values are present.',\n    'same'                 => 'The :attribute and :other must match.',\n    'size'                 => [\n        'numeric' => 'The :attribute must be :size.',\n        'file'    => 'The :attribute must be :size kilobytes.',\n        'string'  => 'The :attribute must be :size characters.',\n        'array'   => 'The :attribute must contain :size items.',\n    ],\n    'string'               => 'The :attribute must be a string.',\n    'timezone'             => 'The :attribute must be a valid zone.',\n    'unique'               => 'The :attribute has already been taken.',\n    'uploaded'             => 'The :attribute failed to upload.',\n    'url'                  => 'The :attribute format is invalid.',\n    'unique_undeleted'     => 'The :attribute must be unique.',\n    'non_circular'         => 'The :attribute must not create a circular reference.',\n\n    /*\n    |--------------------------------------------------------------------------\n    | Custom Validation Language Lines\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify custom validation messages for attributes using the\n    | convention \"attribute.rule\" to name the lines. This makes it quick to\n    | specify a specific custom language line for a given attribute rule.\n    |\n    */\n\n    /*\n    |--------------------------------------------------------------------------\n    | Custom Validation Language Lines\n    |--------------------------------------------------------------------------\n    |\n    | Here you may specify custom validation messages for attributes using the\n    | convention \"attribute.rule\" to name the lines. This makes it quick to\n    | specify a specific custom language line for a given attribute rule.\n    |\n    */\n\n    'custom' => [\n        'alpha_space' => 'The :attribute field contains a character that is not allowed.',\n        'email_array'      => 'One or more email addresses is invalid.',\n        'hashed_pass'      => 'Your current password is incorrect',\n        'dumbpwd'          => 'That password is too common.',\n        'statuslabel_type' => 'You must select a valid status label type',\n    ],\n\n    /*\n    |--------------------------------------------------------------------------\n    | Custom Validation Attributes\n    |--------------------------------------------------------------------------\n    |\n    | The following language lines are used to swap attribute place-holders\n    | with something more reader friendly such as E-Mail Address instead\n    | of \"email\". This simply helps us make messages a little cleaner.\n    |\n    */\n\n    'attributes' => [],\n\n];\n", "@extends('layouts/default')\n\n{{-- Page title --}}\n@section('title')\n    Update Slack Settings\n    @parent\n@stop\n\n@section('header_right')\n    <a href=\"{{ route('settings.index') }}\" class=\"btn btn-primary\"> {{ trans('general.back') }}</a>\n@stop\n\n\n{{-- Page content --}}\n@section('content')\n\n    <style>\n        .checkbox label {\n            padding-right: 40px;\n        }\n    </style>\n\n\n    {{ Form::open(['method' => 'POST', 'files' => false, 'autocomplete' => 'off', 'class' => 'form-horizontal', 'role' => 'form' ]) }}\n    <!-- CSRF Token -->\n    {{csrf_field()}}\n\n    <div class=\"row\">\n        <div class=\"col-sm-10 col-sm-offset-1 col-md-8 col-md-offset-2\">\n\n\n            <div class=\"panel box box-default\">\n                <div class=\"box-header with-border\">\n                    <h2 class=\"box-title\">\n                        <i class=\"fab fa-slack\"></i> Slack\n                    </h2>\n                </div>\n                <div class=\"box-body\">\n\n\n                    <p style=\"padding: 20px;\">\n                        {!! trans('admin/settings/general.slack_integration_help',array('slack_link' => 'https://my.slack.com/services/new/incoming-webhook')) !!}\n\n                    @if (($setting->slack_channel=='') && ($setting->slack_endpoint==''))\n                           {{ trans('admin/settings/general.slack_integration_help_button') }}\n                    @endif\n                    </p>\n\n\n                    <div class=\"col-md-12\" style=\"border-top: 0px;\">\n\n\n                        <!-- slack endpoint -->\n                        <div class=\"form-group required {{ $errors->has('slack_endpoint') ? 'error' : '' }}\">\n                            <div class=\"col-md-2\">\n                                {{ Form::label('slack_endpoint', trans('admin/settings/general.slack_endpoint')) }}\n                            </div>\n                            <div class=\"col-md-10\">\n                                @if (config('app.lock_passwords')===true)\n                                    {{ Form::text('slack_endpoint', old('slack_endpoint', $setting->slack_endpoint), array('class' => 'form-control','disabled'=>'disabled','placeholder' => 'https://hooks.slack.com/services/XXXXXXXXXXXXXXXXXXXXX', 'id' => 'slack_endpoint')) }}\n                                    <p class=\"text-warning\"><i class=\"fas fa-lock\"></i> {{ trans('general.feature_disabled') }}</p>\n\n                                @else\n                                    {{ Form::text('slack_endpoint', old('slack_endpoint', $setting->slack_endpoint), array('class' => 'form-control','placeholder' => 'https://hooks.slack.com/services/XXXXXXXXXXXXXXXXXXXXX', 'id' => 'slack_endpoint')) }}\n                                @endif\n                                {!! $errors->first('slack_endpoint', '<span class=\"alert-msg\" aria-hidden=\"true\">:message</span>') !!}\n                            </div>\n                        </div>\n\n                        <!-- slack channel -->\n                        <div class=\"form-group required {{ $errors->has('slack_channel') ? 'error' : '' }}\">\n                            <div class=\"col-md-2\">\n                                {{ Form::label('slack_channel', trans('admin/settings/general.slack_channel')) }}\n                            </div>\n                            <div class=\"col-md-10\">\n                                @if (config('app.lock_passwords')===true)\n                                    {{ Form::text('slack_channel', old('slack_channel', $setting->slack_channel), array('class' => 'form-control','disabled'=>'disabled','placeholder' => '#IT-Ops')) }}\n                                    <p class=\"text-warning\"><i class=\"fas fa-lock\"></i> {{ trans('general.feature_disabled') }}</p>\n\n                                @else\n                                    {{ Form::text('slack_channel', old('slack_channel', $setting->slack_channel), array('class' => 'form-control','placeholder' => '#IT-Ops')) }}\n                                @endif\n                                {!! $errors->first('slack_channel', '<span class=\"alert-msg\" aria-hidden=\"true\">:message</span>') !!}\n                            </div>\n                        </div>\n\n                        <!-- slack botname -->\n                        <div class=\"form-group required {{ $errors->has('slack_botname') ? 'error' : '' }}\">\n                            <div class=\"col-md-2\">\n                                {{ Form::label('slack_botname', trans('admin/settings/general.slack_botname')) }}\n                            </div>\n                            <div class=\"col-md-10\">\n                                @if (config('app.lock_passwords')===true)\n                                    {{ Form::text('slack_botname', old('slack_botname', $setting->slack_botname), array('class' => 'form-control','disabled'=>'disabled','placeholder' => 'Snipe-Bot')) }}\n                                    <p class=\"text-warning\"><i class=\"fas fa-lock\"></i> {{ trans('general.feature_disabled') }}</p>\n\n                                @else\n                                    {{ Form::text('slack_botname', old('slack_botname', $setting->slack_botname), array('class' => 'form-control','placeholder' => 'Snipe-Bot')) }}\n                                @endif\n                                {!! $errors->first('slack_botname', '<span class=\"alert-msg\" aria-hidden=\"true\">:message</span>') !!}\n                            </div>\n                        </div>\n\n                        <div class=\"form-group\" id=\"slacktestcontainer\" style=\"display: none\">\n                            <div class=\"col-md-2\">\n                                {{ Form::label('test_slack', 'Test Slack') }}\n                            </div>\n                            <div class=\"col-md-10\" id=\"slacktestrow\">\n                                <a class=\"btn btn-default btn-sm pull-left\" id=\"slacktest\" style=\"margin-right: 10px;\">Test <i class=\"fab fa-slack\"></i> Integration</a>\n                            </div>\n                            <div class=\"col-md-10 col-md-offset-2\">\n                                <span id=\"slacktesticon\"></span>\n                                <span id=\"slacktestresult\"></span>\n                                <span id=\"slackteststatus\"></span>\n                            </div>\n\n\n                        </div>\n                    </div> <!--/-->\n                </div> <!--/.box-body-->\n                <div class=\"box-footer\">\n                    <div class=\"text-left col-md-6\">\n                        <a class=\"btn btn-link text-left\" href=\"{{ route('settings.index') }}\">{{ trans('button.cancel') }}</a>\n                    </div>\n                    <div class=\"text-right col-md-6\">\n                        <button type=\"submit\" id=\"save_slack\" class=\"btn btn-primary\" disabled><i class=\"fas fa-check icon-white\" aria-hidden=\"true\"></i> {{ trans('general.save') }}</button>\n                    </div>\n\n                </div>\n            </div> <!-- /box -->\n        </div> <!-- /.col-md-8-->\n    </div> <!-- /.row-->\n\n    {{Form::close()}}\n\n@stop\n\n@push('js')\n    <script nonce=\"{{ csrf_token() }}\">\n        var fieldcheck = function (event) {\n            if($('#slack_endpoint').val() != \"\" && $('#slack_channel').val() != \"\" && $('#slack_botname').val() != \"\") {\n                //enable test button *only* if all three fields are filled in\n                $('#slacktestcontainer').fadeIn(500);\n            } else {\n                //otherwise it's hidden\n                $('#slacktestcontainer').fadeOut(500);\n            }\n\n            if(event) { //on 'initial load' we don't *have* an 'event', but in the regular keyup callback, we *do*. So this only fires on 'real' callback events, not on first load\n                if($('#slack_endpoint').val() == \"\" && $('#slack_channel').val() == \"\" && $('#slack_botname').val() == \"\") {\n                    // if all three fields are blank, the user may want to disable Slack integration; enable the Save button\n                    $('#save_slack').removeAttr('disabled');\n                }\n            }\n        };\n\n        fieldcheck(); //run our field-checker once on page-load to set the initial state correctly.\n\n        $('input:text').keyup(fieldcheck); // if *any* text field changes, we recalculate button states\n\n\n        $(\"#slacktest\").click(function() {\n\n            $(\"#slacktestrow\").removeClass('text-success');\n            $(\"#slacktestrow\").removeClass('text-danger');\n            $(\"#slackteststatus\").removeClass('text-danger');\n            $(\"#slackteststatus\").html('');\n            $(\"#slacktesticon\").html('<i class=\"fas fa-spinner spin\"></i> Sending Slack test message...');\n            $.ajax({\n                url: '{{ route('api.settings.slacktest') }}',\n                type: 'POST',\n                headers: {\n                    \"X-Requested-With\": 'XMLHttpRequest',\n                    \"X-CSRF-TOKEN\": $('meta[name=\"csrf-token\"]').attr('content')\n                },\n                data: {\n                    'slack_endpoint': $('#slack_endpoint').val(),\n                    'slack_channel': $('#slack_channel').val(),\n                    'slack_botname': $('#slack_botname').val(),\n\n                },\n\n                dataType: 'json',\n\n                success: function (data) {\n                    $('#save_slack').removeAttr('disabled');\n                    $(\"#slacktesticon\").html('');\n                    $(\"#slacktestrow\").addClass('text-success');\n                    $(\"#slackteststatus\").addClass('text-success');\n                    $(\"#slackteststatus\").html('<i class=\"fas fa-check text-success\"></i> Success! Check the ' + $('#slack_channel').val() + ' channel for your test message, and be sure to click SAVE below to store your settings.');\n                },\n\n                error: function (data) {\n\n\n                    if (data.responseJSON) {\n                        var errors = data.responseJSON.errors;\n                        var error_msg = data.responseJSON.message;\n                    } else {\n                        var errors;\n                        var error_msg = 'Something went wrong.';\n                    }\n\n                    var error_text = '';\n\n                    $('#save_slack').attr(\"disabled\", true);\n                    $(\"#slacktesticon\").html('');\n                    $(\"#slackteststatus\").addClass('text-danger');\n                    $(\"#slacktesticon\").html('<i class=\"fas fa-exclamation-triangle text-danger\"></i><span class=\"text-danger\">' + error_msg+ '</span>');\n\n                    \n                    if (data.status == 500) {\n                        $('#slackteststatus').html('500 Server Error');\n                    } else if ((data.status == 400) || (data.status == 422)) {\n                        console.log('Type of errors is '+ typeof errors);\n                        console.log('Data status was 400 or 422');\n\n                        if (typeof errors != 'string') {\n                        \n                            console.log(errors.length);\n\n                            for (i in errors) {\n                                if (errors[i]) {\n                                    error_text += '<li>Error: ' + errors[i];\n                                }\n\n                            }\n\n                        } else {\n\n                            error_text = errors;\n                        }\n\n                        $('#slackteststatus').html(error_text);\n\n                    } else {\n                        $('#slackteststatus').html(data.responseText.message);\n                    }\n                }\n\n\n            });\n            return false;\n        });\n\n    </script>\n\n@endpush\n"], "filenames": ["app/Http/Controllers/Api/SettingsController.php", "app/Http/Controllers/SettingsController.php", "app/Models/Setting.php", "resources/lang/en/validation.php", "resources/views/settings/slack.blade.php"], "buggy_code_start_loc": [165, 666, 57, 66, 197], "buggy_code_end_loc": [186, 676, 60, 66, 222], "fixing_code_start_loc": [165, 665, 57, 67, 197], "fixing_code_end_loc": [193, 665, 60, 68, 231], "type": "CWE-918", "message": "snipe-it is vulnerable to Server-Side Request Forgery (SSRF)", "other": {"cve": {"id": "CVE-2021-4075", "sourceIdentifier": "security@huntr.dev", "published": "2021-12-06T21:15:07.907", "lastModified": "2021-12-07T17:22:45.857", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "snipe-it is vulnerable to Server-Side Request Forgery (SSRF)"}, {"lang": "es", "value": "snipe-it es vulnerable a un ataque de tipo Server-Side Request Forgery (SSRF)"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 2.7, "baseSeverity": "LOW"}, "exploitabilityScore": 1.2, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-918"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:snipeitapp:snipe-it:-:*:*:*:*:*:*:*", "matchCriteriaId": "E65E2A3E-1538-4D14-A297-8A1CFA3AF5C8"}]}]}], "references": [{"url": "https://github.com/snipe/snipe-it/commit/4612b9e711b3ff5d2bcddbec5b18866d25f8e34e", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/4386fd8b-8c80-42bb-87b8-b506c46597de", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/snipe/snipe-it/commit/4612b9e711b3ff5d2bcddbec5b18866d25f8e34e"}}