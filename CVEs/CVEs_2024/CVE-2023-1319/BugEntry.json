{"buggy_code": ["<?php\n/*********************************************************************\n    class.role.php\n\n    Role-based access\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2014 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR . 'class.forms.php';\n\nclass RoleModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => ROLE_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'extensions' => array(\n                'null' => true,\n                'list' => true,\n                'reverse' => 'StaffDeptAccess.role',\n            ),\n            'agents' => array(\n                'reverse' => 'Staff.role',\n            ),\n        ),\n    );\n\n    // Flags\n    const FLAG_ENABLED   = 0x0001;\n\n    protected function hasFlag($flag) {\n        return ($this->get('flags') & $flag) !== 0;\n    }\n\n    protected function clearFlag($flag) {\n        return $this->set('flags', $this->get('flags') & ~$flag);\n    }\n\n    protected function setFlag($flag) {\n        return $this->set('flags', $this->get('flags') | $flag);\n    }\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getName() {\n        return $this->name;\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function getInfo() {\n        return $this->ht;\n    }\n\n    function isEnabled() {\n        return $this->hasFlag(self::FLAG_ENABLED);\n    }\n\n    function isDeleteable() {\n        return $this->extensions->count() + $this->agents->count() == 0;\n    }\n\n}\n\nclass Role extends RoleModel {\n    var $form;\n    var $entry;\n\n    var $_perm;\n\n    function hasPerm($perm) {\n        return $this->getPermission()->has($perm);\n    }\n\n    function getPermission() {\n        if (!$this->_perm) {\n            $this->_perm = new RolePermission(\n                isset($this->permissions) ? $this->permissions : array()\n            );\n        }\n        return $this->_perm;\n    }\n\n    function getPermissionInfo() {\n        return $this->getPermission()->getInfo();\n    }\n\n    function getTranslateTag($subtag) {\n        return _H(sprintf('role.%s.%s', $subtag, $this->getId()));\n    }\n    function getLocal($subtag) {\n        $tag = $this->getTranslateTag($subtag);\n        $T = CustomDataTranslation::translate($tag);\n        return $T != $tag ? $T : $this->ht[$subtag];\n    }\n\n    function to_json() {\n\n        $info = array(\n                'id'    => $this->getId(),\n                'name'  => $this->getName()\n                );\n\n        return JsonDataEncoder::encode($info);\n    }\n\n    function __toString() {\n        return (string) $this->getName();\n    }\n\n    function __call($what, $args) {\n        $rv = null;\n        if($this->getPermission() && is_callable(array($this->_perm, $what)))\n            $rv = $args\n                ? call_user_func_array(array($this->_perm, $what), $args)\n                : call_user_func(array($this->_perm, $what));\n\n        return $rv;\n    }\n\n    private function updatePerms($vars, &$errors=array()) {\n        $config = array();\n        $permissions = $this->getPermission();\n\n        foreach ($vars as $k => $val) {\n            if (!array_key_exists($val, $permissions->perms)) {\n                $type = array('type' => 'edited', 'key' => $val);\n                Signal::send('object.edited', $this, $type);\n            }\n        }\n\n        foreach (RolePermission::allPermissions() as $g => $perms) {\n            foreach($perms as $k => $v) {\n                if (!in_array($k, $vars) && array_key_exists($k, $permissions->perms)) {\n                    $type = array('type' => 'edited', 'key' => $k);\n                    Signal::send('object.edited', $this, $type);\n                }\n                $permissions->set($k, in_array($k, $vars) ? 1 : 0);\n            }\n        }\n        $this->permissions = $permissions->toJson();\n    }\n\n    function update($vars, &$errors) {\n        if (!$vars['name'])\n            $errors['name'] = __('Name required');\n        elseif (($r=Role::lookup(array('name'=>$vars['name'])))\n                && $r->getId() != $vars['id'])\n            $errors['name'] = __('Name already in use');\n        elseif (!$vars['perms'] || !count($vars['perms']))\n            $errors['err'] = __('Must check at least one permission for the role');\n\n        if ($errors)\n            return false;\n\n        $this->name = $vars['name'];\n        $this->notes = $vars['notes'];\n\n        $this->updatePerms($vars['perms'], $errors);\n\n        if (!$this->save(true))\n            return false;\n\n        return true;\n    }\n\n    function save($refetch=false) {\n        if (count($this->dirty))\n            $this->set('updated', new SqlFunction('NOW'));\n        if (isset($this->dirty['notes']))\n            $this->notes = Format::sanitize($this->notes);\n\n        return parent::save($refetch || $this->dirty);\n    }\n\n    function delete() {\n\n        if (!$this->isDeleteable())\n            return false;\n\n        if (!parent::delete())\n            return false;\n\n        $type = array('type' => 'deleted');\n        Signal::send('object.deleted', $this, $type);\n\n        // Remove dept access entries\n        StaffDeptAccess::objects()\n            ->filter(array('role_id'=>$this->getId()))\n            ->update(array('role_id' => 0));\n\n        return true;\n    }\n\n    static function create($vars=false) {\n        $role = new static($vars);\n        $role->created = SqlFunction::NOW();\n        return $role;\n    }\n\n    static function __create($vars, &$errors) {\n        $role = self::create($vars);\n        if ($vars['permissions'])\n            $role->updatePerms($vars['permissions']);\n\n        $role->save();\n        return $role;\n    }\n\n    static function getRoles($criteria=null, $localize=true) {\n        static $roles = null;\n\n        if (!isset($roles) || $criteria) {\n\n            $filters = array();\n            if (isset($criteria['enabled'])) {\n                $q = new Q(array('flags__hasbit' => self::FLAG_ENABLED));\n                if (!$criteria['enabled'])\n                    $q->negate();\n                $filters[] = $q;\n            }\n\n            $query = self::objects()\n                ->order_by('name')\n                ->values_flat('id', 'name');\n\n            if ($filters)\n                $query->filter($filters);\n\n            $localize_this = function($id, $default) use ($localize) {\n                if (!$localize)\n                    return $default;\n                $tag = _H(\"role.name.{$id}\");\n                $T = CustomDataTranslation::translate($tag);\n                return $T != $tag ? $T : $default;\n            };\n\n            $names = array();\n            foreach ($query as $row)\n                $names[$row[0]] = $localize_this($row[0], $row[1]);\n\n            if ($criteria || !$localize)\n                return $names;\n\n            $roles = $names;\n        }\n\n        return $roles;\n    }\n\n    static function getActiveRoles() {\n        static $roles = null;\n\n        if (!isset($roles))\n            $roles = self::getRoles(array('enabled' => true));\n\n        return $roles;\n    }\n}\n\n\nclass RolePermission {\n\n    // Predefined groups are for sort order.\n    // New groups will be appended to the bottom\n    static protected $_permissions = array(\n            /* @trans */ 'Tickets' => array(),\n            /* @trans */ 'Tasks' => array(),\n            /* @trans */ 'Users' => array(),\n            /* @trans */ 'Organizations' => array(),\n            /* @trans */ 'Knowledgebase' => array(),\n            /* @trans */ 'Miscellaneous' => array(),\n            );\n\n    var $perms;\n\n\n    function __construct($perms) {\n        $this->perms = $perms;\n        if (is_string($this->perms))\n            $this->perms = JsonDataParser::parse($this->perms);\n        elseif (!$this->perms)\n            $this->perms = array();\n    }\n\n    function exists($perm) {\n        return array_key_exists($perm, $this->perms ?: array());\n    }\n\n    function has($perm) {\n        return (bool) $this->get($perm);\n    }\n\n    function get($perm) {\n        return @$this->perms[$perm];\n    }\n\n    function set($perm, $value) {\n        if (!$value)\n            unset($this->perms[$perm]);\n        else\n            $this->perms[$perm] = $value;\n    }\n\n    function toJson() {\n        return JsonDataEncoder::encode($this->perms);\n    }\n\n    function getInfo() {\n        return $this->perms;\n    }\n\n    function merge($perms) {\n        if ($perms instanceof self)\n            $perms = $perms->getInfo();\n        foreach ($perms as $perm=>$value) {\n            if (is_numeric($perm)) {\n                // Array of perm names\n                $perm = $value;\n                $value = true;\n            }\n            $this->set($perm, $value);\n        }\n    }\n\n    static function allPermissions() {\n        static $sorted = false;\n\n        if (!$sorted) {\n            // Sort permissions in alphabetical order\n            foreach (static::$_permissions as $k => $v) {\n                asort(static::$_permissions[$k]);\n            }\n            $sorted = true;\n        }\n\n        return static::$_permissions;\n    }\n\n    static function register($group, $perms, $prepend=false) {\n        if ($prepend) {\n            static::$_permissions[$group] = array_merge(\n                $perms, static::$_permissions[$group] ?: array());\n        }\n        else {\n            static::$_permissions[$group] = array_merge(\n                static::$_permissions[$group] ?: array(), $perms);\n        }\n    }\n}\n\nclass RoleQuickAddForm\nextends AbstractForm {\n    function buildFields() {\n        $permissions = array();\n        foreach (RolePermission::allPermissions() as $g => $perms) {\n            foreach ($perms as $k => $v) {\n                if ($v['primary'])\n                    continue;\n                $permissions[$g][$k] = \"{$v['title']} \u2014 {$v['desc']}\";\n            }\n        }\n        return array(\n            'name' => new TextboxField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __('Name'),\n                    'classes' => 'span12',\n                    'autofocus' => true,\n                    'length' => 128,\n                ),\n            )),\n            'clone' => new ChoiceField(array(\n                'default' => 0,\n                'choices' =>\n                    array(0 => '\u2014 '.__('Clone an existing role').' \u2014')\n                    + Role::getRoles(),\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n            )),\n            'perms' => new ChoiceField(array(\n                'choices' => $permissions,\n                'widget' => 'TabbedBoxChoicesWidget',\n                'configuration' => array(\n                    'multiple' => true,\n                    'classes' => 'vertical-pad',\n                ),\n            )),\n        );\n    }\n\n    function getClean($validate = true) {\n        $clean = parent::getClean();\n        // Index permissions as ['ticket.edit' => 1]\n        $clean['perms'] = array_keys($clean['perms']);\n        return $clean;\n    }\n\n    function render($staff=true, $title=false, $options=array()) {\n        return parent::render($staff, $title, $options + array('template' => 'dynamic-form-simple.tmpl.php'));\n    }\n}\n"], "fixing_code": ["<?php\n/*********************************************************************\n    class.role.php\n\n    Role-based access\n\n    Peter Rotich <peter@osticket.com>\n    Copyright (c)  2014 osTicket\n    http://www.osticket.com\n\n    Released under the GNU General Public License WITHOUT ANY WARRANTY.\n    See LICENSE.TXT for details.\n\n    vim: expandtab sw=4 ts=4 sts=4:\n**********************************************************************/\nrequire_once INCLUDE_DIR . 'class.forms.php';\n\nclass RoleModel extends VerySimpleModel {\n    static $meta = array(\n        'table' => ROLE_TABLE,\n        'pk' => array('id'),\n        'joins' => array(\n            'extensions' => array(\n                'null' => true,\n                'list' => true,\n                'reverse' => 'StaffDeptAccess.role',\n            ),\n            'agents' => array(\n                'reverse' => 'Staff.role',\n            ),\n        ),\n    );\n\n    // Flags\n    const FLAG_ENABLED   = 0x0001;\n\n    protected function hasFlag($flag) {\n        return ($this->get('flags') & $flag) !== 0;\n    }\n\n    protected function clearFlag($flag) {\n        return $this->set('flags', $this->get('flags') & ~$flag);\n    }\n\n    protected function setFlag($flag) {\n        return $this->set('flags', $this->get('flags') | $flag);\n    }\n\n    function getId() {\n        return $this->id;\n    }\n\n    function getName() {\n        return $this->name;\n    }\n\n    function getCreateDate() {\n        return $this->created;\n    }\n\n    function getUpdateDate() {\n        return $this->updated;\n    }\n\n    function getInfo() {\n        return $this->ht;\n    }\n\n    function isEnabled() {\n        return $this->hasFlag(self::FLAG_ENABLED);\n    }\n\n    function isDeleteable() {\n        return $this->extensions->count() + $this->agents->count() == 0;\n    }\n\n}\n\nclass Role extends RoleModel {\n    var $form;\n    var $entry;\n\n    var $_perm;\n\n    function hasPerm($perm) {\n        return $this->getPermission()->has($perm);\n    }\n\n    function getPermission() {\n        if (!$this->_perm) {\n            $this->_perm = new RolePermission(\n                isset($this->permissions) ? $this->permissions : array()\n            );\n        }\n        return $this->_perm;\n    }\n\n    function getPermissionInfo() {\n        return $this->getPermission()->getInfo();\n    }\n\n    function getTranslateTag($subtag) {\n        return _H(sprintf('role.%s.%s', $subtag, $this->getId()));\n    }\n    function getLocal($subtag) {\n        $tag = $this->getTranslateTag($subtag);\n        $T = CustomDataTranslation::translate($tag);\n        return $T != $tag ? $T : $this->ht[$subtag];\n    }\n\n    function to_json() {\n\n        $info = array(\n                'id'    => $this->getId(),\n                'name'  => $this->getName()\n                );\n\n        return JsonDataEncoder::encode($info);\n    }\n\n    function __toString() {\n        return (string) $this->getName();\n    }\n\n    function __call($what, $args) {\n        $rv = null;\n        if($this->getPermission() && is_callable(array($this->_perm, $what)))\n            $rv = $args\n                ? call_user_func_array(array($this->_perm, $what), $args)\n                : call_user_func(array($this->_perm, $what));\n\n        return $rv;\n    }\n\n    private function updatePerms($vars, &$errors=array()) {\n        $config = array();\n        $permissions = $this->getPermission();\n\n        foreach ($vars as $k => $val) {\n            if (!array_key_exists($val, $permissions->perms)) {\n                $type = array('type' => 'edited', 'key' => $val);\n                Signal::send('object.edited', $this, $type);\n            }\n        }\n\n        foreach (RolePermission::allPermissions() as $g => $perms) {\n            foreach($perms as $k => $v) {\n                if (!in_array($k, $vars) && array_key_exists($k, $permissions->perms)) {\n                    $type = array('type' => 'edited', 'key' => $k);\n                    Signal::send('object.edited', $this, $type);\n                }\n                $permissions->set($k, in_array($k, $vars) ? 1 : 0);\n            }\n        }\n        $this->permissions = $permissions->toJson();\n    }\n\n    function update($vars, &$errors) {\n        $name = Format::sanitize($vars['name']);\n        if (!$name)\n            $errors['name'] = __('Name required');\n        elseif (($r=Role::lookup(array('name'=>$name)))\n                && $r->getId() != $vars['id'])\n            $errors['name'] = __('Name already in use');\n        elseif (!$vars['perms'] || !count($vars['perms']))\n            $errors['err'] = __('Must check at least one permission for the role');\n\n        if ($errors)\n            return false;\n\n        $this->name = $name;\n        $this->notes = Format::sanitize($vars['notes']);\n\n        $this->updatePerms($vars['perms'], $errors);\n\n        if (!$this->save(true))\n            return false;\n\n        return true;\n    }\n\n    function save($refetch=false) {\n        if (count($this->dirty))\n            $this->set('updated', new SqlFunction('NOW'));\n        if (isset($this->dirty['notes']))\n            $this->notes = Format::sanitize($this->notes);\n\n        return parent::save($refetch || $this->dirty);\n    }\n\n    function delete() {\n\n        if (!$this->isDeleteable())\n            return false;\n\n        if (!parent::delete())\n            return false;\n\n        $type = array('type' => 'deleted');\n        Signal::send('object.deleted', $this, $type);\n\n        // Remove dept access entries\n        StaffDeptAccess::objects()\n            ->filter(array('role_id'=>$this->getId()))\n            ->update(array('role_id' => 0));\n\n        return true;\n    }\n\n    static function create($vars=false) {\n        $role = new static($vars);\n        $role->created = SqlFunction::NOW();\n        return $role;\n    }\n\n    static function __create($vars, &$errors) {\n        $role = self::create($vars);\n        if ($vars['permissions'])\n            $role->updatePerms($vars['permissions']);\n\n        $role->save();\n        return $role;\n    }\n\n    static function getRoles($criteria=null, $localize=true) {\n        static $roles = null;\n\n        if (!isset($roles) || $criteria) {\n\n            $filters = array();\n            if (isset($criteria['enabled'])) {\n                $q = new Q(array('flags__hasbit' => self::FLAG_ENABLED));\n                if (!$criteria['enabled'])\n                    $q->negate();\n                $filters[] = $q;\n            }\n\n            $query = self::objects()\n                ->order_by('name')\n                ->values_flat('id', 'name');\n\n            if ($filters)\n                $query->filter($filters);\n\n            $localize_this = function($id, $default) use ($localize) {\n                if (!$localize)\n                    return $default;\n                $tag = _H(\"role.name.{$id}\");\n                $T = CustomDataTranslation::translate($tag);\n                return $T != $tag ? $T : $default;\n            };\n\n            $names = array();\n            foreach ($query as $row)\n                $names[$row[0]] = $localize_this($row[0], $row[1]);\n\n            if ($criteria || !$localize)\n                return $names;\n\n            $roles = $names;\n        }\n\n        return $roles;\n    }\n\n    static function getActiveRoles() {\n        static $roles = null;\n\n        if (!isset($roles))\n            $roles = self::getRoles(array('enabled' => true));\n\n        return $roles;\n    }\n}\n\n\nclass RolePermission {\n\n    // Predefined groups are for sort order.\n    // New groups will be appended to the bottom\n    static protected $_permissions = array(\n            /* @trans */ 'Tickets' => array(),\n            /* @trans */ 'Tasks' => array(),\n            /* @trans */ 'Users' => array(),\n            /* @trans */ 'Organizations' => array(),\n            /* @trans */ 'Knowledgebase' => array(),\n            /* @trans */ 'Miscellaneous' => array(),\n            );\n\n    var $perms;\n\n\n    function __construct($perms) {\n        $this->perms = $perms;\n        if (is_string($this->perms))\n            $this->perms = JsonDataParser::parse($this->perms);\n        elseif (!$this->perms)\n            $this->perms = array();\n    }\n\n    function exists($perm) {\n        return array_key_exists($perm, $this->perms ?: array());\n    }\n\n    function has($perm) {\n        return (bool) $this->get($perm);\n    }\n\n    function get($perm) {\n        return @$this->perms[$perm];\n    }\n\n    function set($perm, $value) {\n        if (!$value)\n            unset($this->perms[$perm]);\n        else\n            $this->perms[$perm] = $value;\n    }\n\n    function toJson() {\n        return JsonDataEncoder::encode($this->perms);\n    }\n\n    function getInfo() {\n        return $this->perms;\n    }\n\n    function merge($perms) {\n        if ($perms instanceof self)\n            $perms = $perms->getInfo();\n        foreach ($perms as $perm=>$value) {\n            if (is_numeric($perm)) {\n                // Array of perm names\n                $perm = $value;\n                $value = true;\n            }\n            $this->set($perm, $value);\n        }\n    }\n\n    static function allPermissions() {\n        static $sorted = false;\n\n        if (!$sorted) {\n            // Sort permissions in alphabetical order\n            foreach (static::$_permissions as $k => $v) {\n                asort(static::$_permissions[$k]);\n            }\n            $sorted = true;\n        }\n\n        return static::$_permissions;\n    }\n\n    static function register($group, $perms, $prepend=false) {\n        if ($prepend) {\n            static::$_permissions[$group] = array_merge(\n                $perms, static::$_permissions[$group] ?: array());\n        }\n        else {\n            static::$_permissions[$group] = array_merge(\n                static::$_permissions[$group] ?: array(), $perms);\n        }\n    }\n}\n\nclass RoleQuickAddForm\nextends AbstractForm {\n    function buildFields() {\n        $permissions = array();\n        foreach (RolePermission::allPermissions() as $g => $perms) {\n            foreach ($perms as $k => $v) {\n                if ($v['primary'])\n                    continue;\n                $permissions[$g][$k] = \"{$v['title']} \u2014 {$v['desc']}\";\n            }\n        }\n        return array(\n            'name' => new TextboxField(array(\n                'required' => true,\n                'configuration' => array(\n                    'placeholder' => __('Name'),\n                    'classes' => 'span12',\n                    'autofocus' => true,\n                    'length' => 128,\n                ),\n            )),\n            'clone' => new ChoiceField(array(\n                'default' => 0,\n                'choices' =>\n                    array(0 => '\u2014 '.__('Clone an existing role').' \u2014')\n                    + Role::getRoles(),\n                'configuration' => array(\n                    'classes' => 'span12',\n                ),\n            )),\n            'perms' => new ChoiceField(array(\n                'choices' => $permissions,\n                'widget' => 'TabbedBoxChoicesWidget',\n                'configuration' => array(\n                    'multiple' => true,\n                    'classes' => 'vertical-pad',\n                ),\n            )),\n        );\n    }\n\n    function getClean($validate = true) {\n        $clean = parent::getClean();\n        // Index permissions as ['ticket.edit' => 1]\n        $clean['perms'] = array_keys($clean['perms']);\n        return $clean;\n    }\n\n    function render($staff=true, $title=false, $options=array()) {\n        return parent::render($staff, $title, $options + array('template' => 'dynamic-form-simple.tmpl.php'));\n    }\n}\n"], "filenames": ["include/class.role.php"], "buggy_code_start_loc": [159], "buggy_code_end_loc": [172], "fixing_code_start_loc": [159], "fixing_code_end_loc": [173], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository osticket/osticket prior to v1.16.6.", "other": {"cve": {"id": "CVE-2023-1319", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-10T16:15:10.927", "lastModified": "2023-03-13T03:47:27.243", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository osticket/osticket prior to v1.16.6."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.8, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.7, "impactScore": 2.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:enhancesoft:osticket:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.16.6", "matchCriteriaId": "2B613AD0-4A4B-4AE9-8971-66464AEE67B6"}]}]}], "references": [{"url": "https://github.com/osticket/osticket/commit/9fb01bc12fbae06aa2c2b4d1bc9b4a08db4bb3e0", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/a822067a-d90d-4c3e-b9ef-9b2a5c2bc97f", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/osticket/osticket/commit/9fb01bc12fbae06aa2c2b4d1bc9b4a08db4bb3e0"}}