{"buggy_code": ["<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Jean-Philippe LEVY\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\nglobal $path_nagios_bin;\nglobal $path_nagios_etc;\n\n$array_msg = array (\n\t0 => \"EON - Standard Error \",\n\t1 => \"EON - Could not connect to Database \",\n\t2 => \"EON - Could not find file \",\n\t3 => \"EON - Could not write in file (verify access) \",\n\t4 => \"EON - Could not get the value in parameters : \",\n\t5 => \"EON - Error uploading file \",\n\t6 => \"EON - Operation successful\",\n\t7 => \"EON - Form error \",\n\t8 => \"EON - User / Group \",\n\t9 => \"EON - Graph \",\n\t10 => \"EON - Name Error\",\n\t11 => \"EON - GED\");\n\n$array_tools = array (\n\t\"snmpwalk\"\t\t => \"tools/snmpwalk.php\",\n\t\"show interface\" => \"tools/interface.php\",\n\t\"show port\" \t => \"tools/port.php\");\n\n$array_group_mgt = array (\n    \"label.admin_group.select_add\" => \"add_group\",\n\t\"label.admin_group.select_del\" => \"delete_group\",\n\t\"label.admin_group.select_import\" => \"import_user\",\n\t);\n\n$array_user_mgt = array (\n\t\"label.admin_user.select_add\" => \"add_user\",\n\t\"label.admin_user.select_del\" => \"delete_user\");\n\n$array_bp_mgt = array (\n\t\"add\" \t\t\t\t=> \"add_process\",\n\t\"delete\" \t\t\t=> \"delete_process\",\n\t\"delete on cascade\" => \"cascade_delete\",\n\t\"delete all\" \t\t=> \"delete_all\",\n\t\"duplicate\" \t\t=> \"duplicate\",\n\t\"back-up file\" \t\t=> \"backup\");\n\n$array_ged_types = array(\n\t0 => \"label.all\",\n\t1 => \"services\",\n\t2 => \"snmp trap\",\n\t/* 3 => \"performances\"); */\n);\n\n$array_ged_packets = array (\n\t\"equipment\"\t\t\t=>\tarray(\"type\"=>true,\"key\"=>true,\"col\"=>true),\n\t\"service\"\t\t\t=>\tarray(\"type\"=>true,\"key\"=>true,\"col\"=>true),\n\t\"state\"\t\t\t\t=>\tarray(\"type\"=>true,\"key\"=>true,\"col\"=>true),\n\t\"owner\"\t\t\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>true),\n\t\"description\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>true),\n\t\"ip_address\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"host_alias\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"hostgroups\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"servicegroups\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"comments\"\t\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"original-time\"\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>true,\"db_col\"=>\"o_sec\"),\n\t\"last-time\"\t\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>true,\"db_col\"=>\"l_sec\"),\n\t\"acknowledge-time\"\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>false,\"db_col\"=>\"a_sec\"),\n\t\"occurences\"\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>true,\"db_col\"=>\"occ\"),\n\t\"source\"\t\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>false,\"db_col\"=>\"src\"),\n\t\"type\"\t\t\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>false),\n\t\"id\"\t\t\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>false)\n);\n\n$array_ged_filters = array (\n\t\"equipment\" \t=> \"host\",\n\t\"service\" \t\t=> \"service\",\n\t\"description\" \t=> \"description\",\n\t\"hostgroups\" \t=> \"hostgroup\",\n\t\"servicegroups\" => \"servicegroup\",\n\t\"owner\" \t\t=> \"owner\",\n\t\"src\"\t\t\t=> \"source\"\n);\n\n$array_ged_states = array (\n\t\"ok\"\t\t=>\t\"0\",\n\t\"warning\"\t=>\t\"1\",\n\t\"critical\"\t=>\t\"2\",\n\t\"unknown\"\t=>\t\"3\",\n);\n\n$array_action_option = array(\n\t0 => \"action.details\",\n\t1 => \"action.edit\",\n\t2 => \"action.own\",\n\t3 => \"action.disown\",\n\t4 => \"action.ack\",\n);\n\n$array_resolve_action_option = array(\n\t0 => \"action.details\",\n\t5 => \"action.delete\",\n);\n\n$array_serv_system = array (\n\t\"Nagios\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x nagios\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start nagios ; sudo /bin/systemctl status nagios\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop nagios ; sudo /bin/systemctl status nagios\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart nagios ; sudo /bin/systemctl status nagios\",\n\t\t\t\"reload\" => \"sudo /bin/systemctl reload nagios ; sudo /bin/systemctl status nagios\",\n\t\t\t\"verify\" => \"$path_nagios_bin -v $path_nagios_etc\")),\n\t\"Ged agent\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x ged\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start gedd ; sudo /bin/systemctl status gedd\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop gedd ; sudo /bin/systemctl status gedd\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart gedd ; sudo /bin/systemctl status gedd\")),\n\t\"SNMP agent\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x snmpd\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start snmpd ; sudo /bin/systemctl status snmpd\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop snmpd ; sudo /bin/systemctl status snmpd\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart snmpd ; sudo /bin/systemctl status snmpd\",\n\t\t\t\"reload\" => \"sudo /bin/systemctl reload snmpd ; sudo /bin/systemctl status snmpd\")),\n\t\"SNMP trap agent\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x snmptrapd\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start snmptrapd ; sudo /bin/systemctl status snmptrapd\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop snmptrapd ; sudo /bin/systemctl status snmptrapd\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart snmptrapd ; sudo /bin/systemctl status snmptrapd\",\n\t\t\t\"reload\" => \"sudo /bin/systemctl reload snmptrapd ; sudo /bin/systemctl status snmptrapd\")),\n\t\"SNMP trap traductor\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x snmptt\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start snmptt ; sudo /bin/systemctl status snmptt\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop snmptt ; sudo /bin/systemctl status snmptt\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart snmptt ; sudo /bin/systemctl status snmptt\",\n\t\t\t\"reload\" => \"sudo /bin/systemctl reload snmptt ; sudo /bin/systemctl status snmptt\")),\n);\n\n$ged_active_intervals = array(\n\t\"day\" \t=> time() - 60*5,\n\t\"week\" \t=> time() - 60*15,\n\t\"month\" => time() - 60*30,\n\t\"year\"\t=> time() - 60*60,\n);\n\n$ged_history_intervals = array(\n\t\"day\" \t=> time() - 86400,\n\t\"week\" \t=> time() - 86400*7,\n\t\"month\" => time() - 86400*30,\n\t\"year\" \t=> time() - 86400*365,\n);\n\n$ged_sla_intervals = array(\n\t\"first\" \t=> 60*5,\n\t\"second\" \t=> 60*10,\n\t\"third\" \t=> 60*20,\n\t\"fourth\" \t=> \"\",\n);\n\n// sockets definition (for multi-backends !)\n$sockets = array(\n        \"unix::-1:/srv/eyesofnetwork/nagios/var/log/rw/live\"\n        //\"tcp:192.168.197.100:6557:\",\n        //\"tcp:192.168.197.102:6557:\"\n);\n\n?>\n", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Jean-Philippe LEVY\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\n# Internationalization\ninclude(\"Translator.class.php\");\n\n// Display Error Message \nfunction message($id, $text, $type){\n\t\n\tglobal $array_msg;\n\t\n\t// Get standard message if exists\n\tif(isset($array_msg[$id])) { $tempid=$array_msg[$id]; } \n\telse { $tempid=\"\"; }\n\t\n\t// Define the message type and icon\n\tswitch($type)\n\t{\n\t\tcase \"critical\":\n\t\t\t$alert_type = \"danger\";\n\t\t\t$alert_icon = \"fa-exclamation-circle\";\n\t\t\tbreak;\n\t\tcase \"warning\":\n\t\t\t$alert_type = \"warning\";\n\t\t\t$alert_icon = \"fa-warning\";\n\t\t\tbreak;\n   \t\tcase \"ok\":\n   \t\t\t$alert_type = \"success\";\n\t\t\t$alert_icon = \"fa-check-circle\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$alert_type = \"info\";\n\t\t\t$alert_icon = \"fa-info-circle\";\n\t\t\tbreak;\n\t}\n\n\t// Display the message\n\techo \"<p class='alert alert-dismissible alert-\".$alert_type.\" fade in'>\n\t\t\t<button type='button' class='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t  <span aria-hidden='true'>&times;</span>\n\t\t\t</button>\n\t\t\t<i class='fa \".$alert_icon.\"'></i> $tempid $text\n\t\t  </p>\";\n}\n\n// Connect to Database\nfunction sqlrequest($database,$sql,$id=false){\n\n\t// Get the global value\n\tglobal $database_host;\n\tglobal $database_username;\n\tglobal $database_password;\n\n\t$connexion = mysqli_connect($database_host, $database_username, $database_password, $database);\n\tif (!$connexion) {\n\t\techo \"<ul>\";\n\t\techo \"<li class='msg_title'>Alert EyesOfNetwork - Message EON-database connect</li>\";\n\t\techo \"<li class='msg'> Could not connect to database : $database ($database_host)</li>\";\n\t\techo \"</ul>\";\n\t\texit(1);\n\t}\n\n\tif ( $database == \"eonweb\" ) {\n\t\t// Force UTF-8\n\t\tmysqli_query($connexion, \"SET NAMES 'utf8'\");\n\t}\n\t$result=mysqli_query($connexion, \"$sql\");\n\n\tif($id==true)\n\t\t$result=mysqli_insert_id($connexion);\n\t\t\n\tmysqli_close($connexion);\n\treturn $result;\n}\n\n// Display array value\nfunction display_value($value, $key){\n\techo \"$value\\n\";\n}\n\n// Function Edit and Modify a file\nfunction filemodify($path,$get=false){\n\tif(is_writable($path)) {\n\t\n\t\t// Test If Update or Display.\n\t\tif (isset($_POST['maj'])) {\n\t\t\tif (!$fconf = fopen($path, \"w\")) message(2,$path,\"critical\");\n\t\t\t// Write the change\n\t\t\tif (fwrite ($fconf, str_replace(\"\\r\\n\", \"\\n\", $_POST['maj'])) === FALSE) message(3,$path,\"critical\");\n\t\t\telse { \n\t\t\t\tmessage(6,\" : File updated\",\"ok\");\n\t\t\t}\n\t\t\tfclose ($fconf);\n\t\t\tif (!$fconf = fopen($path, \"r\")) message(2,$path,\"critical\");\n\t\t}\n\t\telse if (!$fconf = fopen($path, \"r\")) message(2,$path,\"critical\");\n\n\t\t// Display the Text Area and button\n\t\techo \"<form method='post' action='./index.php\";\n\t\tif($get)\n\t\t\techo \"?file=$get\";\n\t\techo \"'>\";\n\t\techo '<div class=\"form-group\">';\n\t\techo \"<textarea class='form-control textarea' cols='100' rows='20' name='maj' scrolling='no'>\";\n\t\t\tprint file_get_contents($path);\n\t\techo \"</textarea>\";\n\t\techo '</div>';\n\t\techo '<div class=\"form-group\">';\n\t\techo \"<input class='btn btn-primary' type='submit' value='\".getLabel(\"action.update\").\"'>\";\n\t\techo '</div>';\n\t\techo \"</form>\";\n\t\tfclose ($fconf);\n\t}\n\telse message(3,$path,\"critical\");\n}\n\n// Host List form Nagios\nfunction get_host_list_from_nagios($field=false, $queue = false){\n\tglobal $database_lilac;\n\tglobal $database_ged;\n\t$hosts=array();\n\n\tif($field && $field != 'owner'){\n\t\tswitch ($field) {\n\t\t\tcase 'service': $column = 'description'; break;\n\t\t\tcase 'description': echo json_encode($hosts); return; break;\n\t\t\tdefault: $column = 'name'; break;\n\t\t}\n\t\t$request=\"SELECT DISTINCT $column FROM nagios_$field ORDER BY $column\";\n\t\t$db = $database_lilac;\n\t} elseif ($field && $field === 'owner') {\n\t\t$request=\"SELECT DISTINCT owner FROM nagios_queue_$queue WHERE owner != '' ORDER BY owner\";\n\t\t$db = $database_ged;\n\t}\n\telse {\n\t\t$request=\"SELECT name FROM nagios_host\n\t\tUNION SELECT name from nagios_hostgroup\n\t\tUNION SELECT name from nagios_service_group\n\t\tORDER BY name\";\n\t\t$db = $database_lilac;\n\t}\n\n\t$result=sqlrequest($db,$request);\n \twhile ($line = mysqli_fetch_array($result)){ \n\t\tarray_push($hosts, $line[0]);\n\t}\n\techo json_encode($hosts);\n}\n\n// Host and Address list from nagios. //TODO send the adress\nfunction get_host_list(){\n\tglobal $database_lilac;\n\t$hosts=array();\n\n\t$result=sqlrequest($database_lilac,\"SELECT name,address FROM nagios_host ORDER BY name\");\n\n \twhile ($line = mysqli_fetch_array($result)){ \n\t\t$hosts[]=$line[0];\n\t\t$hosts[]=$line[1];\n\t}\n\techo json_encode($hosts);\n}\n\n// Host and Address listbox from nagios. //TODO send the adress\nfunction get_host_listbox_from_nagios(){\n\tglobal $database_lilac;\n\t\n\t// create input autocomplete with all nagios host values\n\techo \"<label>Host</label>\";\n\t$result=sqlrequest($database_lilac,\"SELECT DISTINCT name FROM nagios_host UNION ALL SELECT DISTINCT address FROM nagios_host\");\n\t$input = \"<input id='host_list' class='form-control' type='text' name='host_list' onFocus='$(this).autocomplete({source: [\";\n\twhile ($line = mysqli_fetch_array($result))\n\t{\n\t\t$input .= '\"'.$line[0].'\",';\n\t}\n\t$input = rtrim($input, \",\");\n\t$input .= \"]})'>\";\n\t\n\techo '<div class=\"input-group\">';\n\techo \t$input;\n\techo \t'<span class=\"input-group-btn\">\n\t\t\t\t<input class=\"btn btn-primary\" type=\"submit\" name=\"run\" value=\"'.getLabel(\"action.run\").'\" >\n\t\t\t</span>\n\t\t\t';\n\techo '</div>';\n}\n\n// Host list from CACTI\nfunction get_title_list_from_cacti(){\n\n\tglobal $database_cacti;\n\n\t$titles=array();\n\t$request=\"SELECT DISTINCT graph_templates_graph.title FROM graph_local,graph_templates_graph WHERE graph_templates_graph.local_graph_id=graph_local.id ORDER BY title\";\n\t$result=sqlrequest($database_cacti,$request);\n\twhile ($line = mysqli_fetch_array($result)){\n\t$line[0]=str_replace(\"|host_description| - \",\"\",$line[0]);\n\t\t$titles[]=$line[0];\n\t}\n\techo json_encode($titles);\n}\n\n// Host listbox from CACTI\nfunction get_host_listbox_from_cacti(){\n\t\n\tglobal $database_cacti;\n\t\n\t$ref = \"\";\n\tif( isset($_GET['host']) ){\n\t\t$ref = $_GET['host'];\n\t}\n\t\n\t$result=sqlrequest($database_cacti,\"SELECT DISTINCT host.id,hostname,description FROM host INNER JOIN graph_local ON host.id = graph_local.host_id ORDER BY hostname ASC\");\n\techo \"<SELECT name='host' class='form-control' size=7>\";\n        while ($line = mysqli_fetch_array($result))\n        {\n\t\t\techo \"<OPTION value='$line[0]' \";\n\t\t\tif($ref == $line[0]){echo 'selected=\"selected\"';}\n\t\t\techo \">&nbsp;$line[1] ($line[2])&nbsp;</OPTION>\";\n        }\n        echo \"</SELECT><br>\";\n}\n\n// system function : CUT\nfunction cut($string, $width, $padding = \"...\"){\n    return (strlen($string) > $width ? substr($string, 0, $width-strlen($padding)).$padding : $string);\n} \n\n// Get graph from CACTI\nfunction get_graph_listbox_from_cacti(){\n\t\n\tglobal $database_cacti;\n\t\n\t$ref = \"\";\n\tif( isset($_GET['graph']) ){\n\t\t$ref = $_GET['graph'];\n\t}\n\t\n\t$result=sqlrequest($database_cacti,\"SELECT DISTINCT graph_templates.id,name FROM graph_templates INNER JOIN graph_local ON graph_local.graph_template_id = graph_templates.id ORDER BY name ASC\");\n\techo \"<SELECT name='graph' class='form-control' size=7>\";\n\twhile ($line = mysqli_fetch_array($result))\n\t{\n\t\techo \"<OPTION value='$line[0]' \";\n\t\tif($ref == $line[0]){echo 'selected=\"selected\"';}\n\t\techo \">&nbsp;$line[1]&nbsp;</OPTION>\";\n\t}\n\techo \"</SELECT><br>\";\n}\n\n// Display TOOL list\nfunction get_tool_listbox(){\n\t// Get the global table\n\tglobal $array_tools;\n\t\n\techo \"<label>\".getLabel(\"label.tool_all.tool\").\"</label>\";\t\n\n\t// Get the first array key\n\treset($array_tools);\n\n\t// Display the list of tool\n\techo \"<SELECT id='tool_list' name='tool_list' class='form-control'>\";\n \twhile (list($tool_name, $tool_url) = each($array_tools)) \n\t{\n\t\techo \"<OPTION value='$tool_url'>$tool_name</OPTION>\";\n\t}\n\techo \"</SELECT>\";\n}\n\n// Display min and max port value for show port tool\nfunction get_toolport_ports(){\n\tglobal $default_minport;\n\tglobal $default_maxport;\n\t\n\techo \"<label>Port min - Port max</label>\";\n\techo \"<div class='row'><div class='col-md-4'><input id='min_port' class='form-control' type=text name='min_port' value=$default_minport size=8></div>\";\n\techo \"<div class='col-md-4'><input id='max_port' class='form-control' type=text name='max_port' value=$default_maxport size=8></div></div>\";\n}\n\n// Display User list\nfunction get_user_listbox(){\n\techo \"<h2>Select user : </h2>\";\n        global $database_eonweb;\n\n        $result=sqlrequest($database_eonweb,\"SELECT DISTINCT user_name,user_id,group_id,user_descr FROM users ORDER BY user_name\");\n        print \"<SELECT name='users_list' class='select' size=15>\";\n        while ($line = mysqli_fetch_array($result))\n        {\n                print \"<OPTION value='$line[1]'>$line[0] : $line[3]</OPTION>\";\n        }\n        print \"</SELECT>\";\n}\n\n// Retrive form data\nfunction retrieve_form_data($field_name,$default_value){\n\tif (!isset ($_GET[$field_name]))\n\t\tif (!isset ($_POST[$field_name]))\n\t\t\treturn $default_value;\n\t\telse\n\t\t\treturn $_POST[$field_name];\t\n\telse \n\t\treturn $_GET[$field_name];\n}\n\n// Delete accents\nfunction stripAccents($str, $charset='utf-8'){\n    $str = htmlentities($str, ENT_NOQUOTES, $charset);\n\n    $str = preg_replace('#\\&([A-za-z])(?:acute|cedil|circ|grave|ring|tilde|uml)\\;#', '\\1', $str);\n    $str = preg_replace('#\\&([A-za-z]{2})(?:lig)\\;#', '\\1', $str); \n    $str = preg_replace('#\\&[^;]+\\;#', '', $str); \n\n    return $str;\n}\n\n// Add Logs\nfunction logging($module,$command,$user=false){\n\tglobal $database_eonweb;\n\tglobal $dateformat;\n\tif($user)\n\t\tsqlrequest($database_eonweb,\"insert into logs values ('','\".time().\"','$user','$module','$command','\".$_SERVER[\"REMOTE_ADDR\"].\"');\");\n\telseif(isset($_COOKIE['user_name']))\n\t\tsqlrequest($database_eonweb,\"insert into logs values ('','\".time().\"','\".$_COOKIE['user_name'].\"','$module','$command','\".$_SERVER[\"REMOTE_ADDR\"].\"');\");\n}\n\n// Time\nfunction getmtime(){\n  \n    $temps = microtime();\n    $temps = explode(' ', $temps);\n    return $temps[1] + $temps[0];\n \n}\n\n// Get the informations of nagios' config's file.\nfunction getBpProcess(){\n\t\n\tglobal $path_nagiosbpcfg ;\n\tglobal $path_nagiosbpcfg_lock ;\n\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file\n    fputs($fp,getmypid());\n    fclose($fp);\n\n    $tabProcess = array() ;\n\t$lines = file($path_nagiosbpcfg);\n\tif (!$lines) {\n\t\tunlink($path_nagiosbpcfg_lock);\t//Unlock the file\n\t\tmessage(2,$path_nagiosbpcfg,\"critical\");\n\t}\n\tforeach( $lines as $line) {\n\t\t\n\t\tif ( trim($line) == \"# Fin def\") {\t//End of definition\n\t\t\t$tabProcess[] = $tabProp ;\n\t\t\t$tabProp = null ;\n\t\t}\n\t\telseif ( preg_match(\"/^# (ET|OU|MIN)$/\", $line, $match)) {\n\t\t\t$tabProp['type'] = $match[1];\t//Get the type of the process\n\t\t}\n\t\telseif ( preg_match(\"/^display (\\d)*/\", $line, $match)) {\t//Get the prirority\n\t\t\t$tabProp['prio'] = $match[1] ;\n\t\t\t$tab = explode(\";\",$line);\n\t\t\t$tabProp['pnom'] = $tab[2];\n\t\t}\n\t\telseif ( strpos($line,\"info_url\") !== false) {\t//Get the link\n\t\t\t$tab = explode(\";\", $line);\n\t\t\t$tabProp['url'] = $tab[count($tab)-1] ;\n\t\t}\n\t\telseif ( strpos($line,\"external_info\") !== false) {\t//Get the command\n\t\t\t$tab = explode(\";\", $line);\n\t\t\t$tabProp['cmd'] = $tab[count($tab)-1] ;\n\t\t}\n\t\telseif ( strpos($line,\"=\") !== false) {\t//Get the name, the minimun, and the services\n\t\t\t$tab = explode(\"=\", $line);\n\t\t\t$tabProp['nom'] = trim($tab[0]);\n\t\t\tif ($tabProp['type'] == \"MIN\") {\n\t\t\t\t$tabProp['min'] = (int)trim($tab[1]);\n\t\t\t\t$tab = explode(\":\",$tab[1]);\n\t\t\t\t$tabProp['serv'] = $tab[1];\n\t\t\t}\n\t\t\telse $tabProp['serv'] = $tab[1];\n\t\t}\n\t}\n\n\tunlink($path_nagiosbpcfg_lock);\t//Unlock the file\n\treturn $tabProcess ;\n}\n\n// Wait the end of modification of a file\nfunction wait($file){\n\t$retry = 0 ;\n\n\twhile (file_exists($file)){\n\t\tif($retry>20) { die (\"$file is already in use!\"); }\n        $retry++;\n        sleep(1);\n\t}\n}\n\n// Insert a value in an array\nfunction array_push_after($src,$in,$pos){\n    if(is_int($pos)) $R=array_merge(array_slice($src,0,$pos+1), $in, array_slice($src,$pos+1));\n    else{\n        foreach($src as $k=>$v){\n            $R[$k]=$v;\n            if($k==$pos)$R=array_merge($R,$in);\n        }\n    }return $R;\n}\n\n//Format the nagios.conf file\nfunction formatFile(){\n\tglobal $path_nagiosbpcfg;\n\tglobal $path_nagiosbpcfg_lock;\n\tglobal $database_nagios;\n\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file.\n\tfputs($fp,getmypid());\n\tfclose($fp);\n\n\t$lines = file($path_nagiosbpcfg);\n\t$file[0] = \"# Checked\\n\";\n\tif ( empty($lines) || trim($lines[0]) != \"# Checked\"){\t//Not checked. Let's read it !\n\n\t\twrite_file($path_nagiosbpcfg,array_merge($file,$lines),\"w\",\" : File updated\");\n\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp\");\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp_services\");\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp_links\");\n\t\t$tabName = array();\n\t\t$tabDef = array();\t\t\t\n\n\t\tforeach($lines as $i => $line){\n\t\t\tif ($line[0] == \"#\"){\n\t\t\t\tunset($lines[$i]); continue;\t//A commented line. Delete.\n\t\t\t}\n\t\t\tif (($posComment = strpos($line,\"#\")) !== false){\t//Found a commentary. Delete.\n\t\t\t\t$line = substr($line,0,$posComment);\t\n\t\t\t}\n\t\t\t//No more commentary in the file\n\n\t\t\tif (strpos($line,\"=\") !== false){\t//Found a name\n\t\t\t\t$tab = explode(\"=\",$line);\n\t\t\t\t$tabName[] = trim($tab[0]);\t//Keep the name\n\t\t\t\t$vals = explode(\"=\",$line);\n\t\t\t\t$tabDef[] = $vals[1];\t//Keep the whole line\n\t\t\t\tunset($lines[$i]);\n\t\t\t}\n\t\t}\n\n\t\t//There we got all the names.\n\t\t$serv = null;\n\t\tforeach($tabName as $i => $name){\n\t\t\t$type = $prio = $url = $cmd = $val = $desc = \"\" ;\n\t\t\t//Try to get the type. Default ET\n\t\t\tif ( strpos($tabDef[$i], \":\")){\n\t\t\t\t$vals = explode(\"of:\",$tabDef[$i]);\n\t\t\t\t$val = trim($vals[0]);\n\t\t\t\t$type = \"MIN\";\n\t\t\t\t$serv = $vals[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( strpos($tabDef[$i], \"&\")) $type = \"ET\";\n\t\t\t\telseif ( strpos($tabDef[$i], \"|\")) $type = \"OU\";\n\t\t\t\telse $type = \"ET\";\n\t\t\t\t$serv = $tabDef[$i];\n\t\t\t}\n\t\t\t\n\t\t\tforeach($lines as $j=>$line){\n\t\t\t\tif (strpos($line,\"$name;\") !== false){\t//We found a name\n\t\t\t\t\tif ( preg_match(\"/^display (\\d)+/\", $line,$match)){\n\t\t\t\t\t\t$prio = $match[1];\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$desc = trim($vals[2]);\n\t\t\t\t\t} \n\t\t\t\t\telseif ( strpos($line,\"info_url\") !== false) {\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$url = trim($vals[1]);\n\t\t\t\t\t}\n\t\t\t\t\telseif ( strpos($line,\"external_info\") !== false) {\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$cmd= trim($vals[1]);\n\t\t\t\t\t}\n\t\t\t\t\tunset($lines[$j]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($prio == \"\" ) $prio = \"null\";\n\t\t\tsqlrequest($database_nagios,\"INSERT INTO bp VALUES('$name','$desc','$prio','$type','$cmd','$url','$val','1')\");\n\n\t\t\tswitch ($type){\n\t\t\t\tcase \"ET\": $vals = explode(\"&\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"OU\": $vals = explode(\"|\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"MIN\": $vals = explode(\"+\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tforeach ($vals as $v) {\n\t\t\t\tif ( strpos($v,\";\") !== false ){\n\t\t\t\t\t$val = explode(\";\",$v); $host=trim($val[0]); $service=trim($val[1]);\n\t\t\t\t\tsqlrequest($database_nagios,\"INSERT INTO bp_services VALUES('','$name','$host','$service')\");\n\t\t\t\t}\n\t\t\t\telse sqlrequest($database_nagios,\"INSERT INTO bp_links VALUES('','$name','\".trim($v).\"')\");\n\t\t\t}\n\t\t}\n\t\tmessage(6,\" : Database updated with configuration file\",\"ok\");\n\t}\n\tunlink($path_nagiosbpcfg_lock);\n}\n\n//Write in a file, with error or succes message\nfunction write_file($file,$contenu,$mode,$message = null){\n\tif(is_writable($file)){\n\t\t$error = 0 ;\n\t\tif (!$fconf = fopen($file, $mode)) message(2,$file,\"critical\");\n\t\t\n\t\tif ( is_array($contenu)){\n\t\t\tforeach ($contenu as $line) {\n\t\t\t\tif (fwrite ($fconf, $line) === FALSE) $error = 1 ;\n\t\t\t}\n\t\t}\n\t\telse if (fwrite ($fconf, $contenu) === FALSE) $error = 1 ;\n\n\t\tif ($error) message(3,$file,\"critical\");\n\t\telse if ( $message != null )message(6,$message,\"ok\");\n\t\tfclose ($fconf);\n\t}\n\telse \n\t\tmessage(3,$file,\"critical\");\n}\n\n// MySQL request in php array \nfunction sqlArrayNagios($request){\n\tglobal $database_nagios;\n\t$result = sqlrequest($database_nagios,$request);\n\t$values = array();\n\tfor ($i=0; $i<mysqli_num_rows($result); ++$i) $values[] = mysqli_fetch_assoc($result);\n\treturn $values ;\n}\n\n// NagiosBP file backup\nfunction backup_file($start){\n\tglobal $path_nagiosbpcfg;\n\tglobal $path_nagiosbpcfg_bu;\n\n\tfor ($i = $start; $i > 0; $i--){\n\t\tif ( file_exists($path_nagiosbpcfg_bu.$i)){\n\t\t\tif ( $i == $start) unlink($path_nagiosbpcfg_bu.$i);\n\t\t\telse {\n\t\t\t\trename($path_nagiosbpcfg_bu.$i,$path_nagiosbpcfg_bu.($i+1));\n\t\t\t}\n\t\t}\n\t}\n\tcopy($path_nagiosbpcfg,$path_nagiosbpcfg_bu.'1');\n}\n\n// NagiosBP file creation\nfunction buildFile(){\n\n\tglobal $path_nagiosbpcfg_lock;\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file.\n\tfputs($fp,getmypid());\n\tfclose($fp);\n\n\tglobal $max_bu_file;\n\tbackup_file($max_bu_file);\n\tglobal $path_nagiosbpcfg;\n\t$request = \"SELECT * FROM bp WHERE `name` NOT IN (SELECT bp_name FROM bp_links) AND `is_define`='1'\";\n\t$values = sqlArrayNagios($request);\n\t$prevRequest = str_replace(\"*\",\"name\",$request); \n\n\t$file[] = \"# Checked\";\n\tforeach( $values as $metier){\n\t\t$writenBP[] = $metier['name'];\n\t  \tswitch( $metier['type']) {\n\t   \t\tcase \"ET\" : $sep = \"&\";break;\n\t   \t\tcase \"OU\" : $sep = \"|\";break;\n\t   \t\tcase \"MIN\" : $sep = \"+\";break;\n\t   \t}\n\t   \t$result = sqlArrayNagios(\"SELECT host,service FROM bp_services WHERE bp_name='$metier[name]'\");\n\t   \t$strServ = $string = null;\n\t   \tforeach($result as $serv){\n\t   \t\tif ( is_null($strServ) ) {\n\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t   \t\t\t$strServ = \"$serv[host];$serv[service]\";\n\t   \t\t}\n\t   \t\telse $strServ .= \" $sep $serv[host];$serv[service]\";\n\t   \t}\n\t   \t$string .= $strServ.\"\\n\";\n\t   \tif ( $metier['priority'] != \"null\") $string .= \"display $metier[priority];$metier[name];$metier[description]\\n\";\n\t   \tif ( $metier['command'] != \"\") $string .= \"external_info $metier[name];$metier[command]\\n\";\n\t   \tif ( $metier['url'] != \"\") $string .= \"info_url $metier[name];$metier[url]\\n\";\n\t   \t$file[] = $string;\n    }\n\n\tif ( $values ) build($prevRequest,$file,$writenBP);\n    write_file($path_nagiosbpcfg,$file,\"w\",\" : File updated\");\n    unlink($path_nagiosbpcfg_lock);\n}\n\n// Nagiosbp build\nfunction build($pRequest,&$file,$pWritenBP){\n\n\t$values = sqlArrayNagios($pRequest);\n\tunset($r);\n\tforeach( $values as $v){\n\t\tif ( !isset($r) ) $r = \"SELECT bp_name FROM bp_links WHERE (bp_link='$v[name]' \";\n\t\telse $r .= \" OR bp_link='$v[name]'\";\n\t}\n\t$values = sqlArrayNagios($r.\")\");\n\n\tif ($values){\n\t\tunset($r);\n\t\tforeach ($values as $v) {\n\t\t\tif ( !isset($r) ) $r = \"SELECT * FROM bp WHERE (name='$v[bp_name]' \";\n\t\t\telse $r .= \" OR name='$v[bp_name]'\";\n\t\t}\n\t\t$values = sqlArrayNagios($r.\") AND `is_define`='1'\");\n\t\t/*$request = \"SELECT * FROM bp WHERE `name` IN (SELECT bp_name FROM bp_links WHERE bp_link IN ($pRequest)) AND `is_define`='1'\";\n\t\t$values = sqlArrayNagios($request);\n\t\tsql takes to much time with this type of request. We split it in multiple request instead.*/\n\t\t$prevRequest = str_replace(\"*\",\"name\",$r.\") AND `is_define`='1'\");\n\t\t$writenBP = $pWritenBP;\n\n\n\t\tforeach ($pWritenBP as $r) {\n\t\t\tif ( !isset($reqC)) $reqC = \"SELECT COUNT(bp_name) AS nbr FROM bp_links WHERE (bp_link='$r' \";\n\t\t\telse $reqC .= \" OR bp_link='$r'\";\n\t\t}\n\n\t\tforeach( $values as $metier){\n\t\t\tif (in_array($metier, $pWritenBP)) continue;\n\t\t\t\n\t\t\t$requestC = $reqC.\") AND bp_name='$metier[name]'\";\n\t\t\t$count = sqlArrayNagios($requestC);\n\t\t\t$cnt = sqlArrayNagios(\"SELECT COUNT(bp_name) AS nbr FROM bp_links WHERE bp_name='$metier[name]'\");\n\t\t\t\n\t\t\tif ( $count[0]['nbr'] == $cnt[0]['nbr']){\n\t\t\t\t$writenBP[] = $metier['name'];\n\t\t\t  \tswitch( $metier['type']) {\n\t\t\t   \t\tcase \"ET\" : $sep = \"&\";break;\n\t\t\t   \t\tcase \"OU\" : $sep = \"|\";break;\n\t\t\t   \t\tcase \"MIN\" : $sep = \"+\";break;\n\t\t\t   \t}\n\t\t\t   \t$result = sqlArrayNagios(\"SELECT host,service FROM bp_services WHERE bp_name='$metier[name]'\");\n\t\t\t   \t$strServ = $string = null;\n\n\t\t\t   \tforeach($result as $serv){\n\t\t\t   \t\tif ( is_null($strServ) ) {\n\t\t\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t\t\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t\t\t   \t\t\t$strServ = \"$serv[host];$serv[service]\";\n\t\t\t   \t\t}\n\t\t\t   \t\telse $strServ .= \" $sep $serv[host];$serv[service]\";\n\t\t\t   \t}\n\t\t\t   \t$result = sqlArrayNagios(\"SELECT bp_link FROM bp_links WHERE bp_name='$metier[name]'\");\n\t\t\t   \tforeach($result as $serv){\n\t\t\t   \t\tif ( is_null($strServ) ) {\n\t\t\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t\t\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t\t\t   \t\t\t$strServ = \"$serv[bp_link]\";\n\t\t\t   \t\t}\n\t\t\t   \t\telse $strServ .= \" $sep $serv[bp_link]\";\n\t\t\t   \t}\n\t\t\t   \t$string .= $strServ.\"\\n\";\n\t\t\t   \tif ( $metier['priority'] != \"null\") $string .= \"display $metier[priority];$metier[name];$metier[description]\\n\";\n\t\t\t   \tif ( $metier['command'] != \"\") $string .= \"external_info $metier[name];$metier[command]\\n\";\n\t\t\t   \tif ( $metier['url'] != \"\") $string .= \"info_url $metier[name];$metier[url]\\n\";\n\t\t\t   \t$file[] = $string;\n\t\t\t}\n\t    }\n\n\t    build($prevRequest,$file,$writenBP);\n\t}\n}\n\n// Ldap escape special caracters\nfunction ldap_escape ($str){\n\n\t$str = trim($str);\n\n\tif ( isset($str) ) {\n\t\t$str = str_replace(\"\\\\\", \"\\\\\\\\\", $str);\n\t\t$str = str_replace(\"'\", \"\\'\", $str);\n\t\t$str = str_replace('\"', '\\\"', $str);\n\t}\n\n\treturn $str;\n\n}\n\n// User creation\nfunction insert_user($user_name, $user_descr, $user_group, $user_password1, $user_password2, $user_type, $user_location, $user_mail, $user_limitation, $message, $in_nagvis = false, $in_cacti = false, $nagvis_group){\n\tglobal $database_host;\n\tglobal $database_cacti;\n\tglobal $database_username;\n\tglobal $database_password;\n\n\tglobal $database_eonweb;\n\tglobal $database_lilac;\n\t$user_id=null;\n\n\t// Check if user exist\n\t$user_exist=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT count('user_name') from users where user_name='$user_name';\"),0);\n\n\t// Check user descr\n\tif($user_descr==\"\")\n\t\t$user_descr=$user_name;\n\n\tif($user_location != \"\" && $user_location != null){\n\t\tif( strpos($user_location, \" -- \") !== false && strpos($user_location, \"|\") !== false ){\n\t\t\t$user_location_parts = explode(\" -- \", $user_location);\n\t\t\t$user_loc = explode(\"|\", $user_location_parts[1]);\n\t\t\t$user_dn_name = $user_loc[0];\n\t\t\t$user_name = $user_dn_name;\n\t\t\t$user_location = $user_loc[1];\n\t\t}\n\t\telse{\n\t\t\t$user_location = $user_location;\n\t\t}\n\t}\n\t\n\tif (($user_name != \"\") && ($user_name != null) && ($user_exist == 0)) {\n\t\tif (($user_password1 != \"\") && ($user_password1 != null) && ($user_password1 == $user_password2)) {\n\t\t\t$user_password = md5($user_password1);\n\t\t\t\n\t\t\t// Insert into eonweb\n\t\t\tsqlrequest(\"$database_eonweb\",\"INSERT INTO users (user_name,user_descr,group_id,user_passwd,user_type,user_location,user_limitation) VALUES('$user_name', '$user_descr', '$user_group', '$user_password', '$user_type', '$user_location','$user_limitation')\");\n\t\t\t$user_id=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT user_id FROM users WHERE user_name='$user_name'\"),0,\"user_id\");\n\t\t\t$group_name=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT group_name FROM groups WHERE group_id='$user_group'\"),0,\"group_name\");\n\n\t\t\t// Insert into lilac\n\t\t\t$lilac_period=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_timeperiod limit 1\"),0,\"id\");\n\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact (id,name,alias,email,host_notifications_enabled,service_notifications_enabled,host_notification_period,service_notification_period,host_notification_on_down,host_notification_on_unreachable,host_notification_on_recovery,host_notification_on_flapping,service_notification_on_warning,service_notification_on_unknown,service_notification_on_critical,service_notification_on_recovery,service_notification_on_flapping,can_submit_commands,retain_status_information,retain_nonstatus_information,host_notification_on_scheduled_downtime) VALUES('','$user_name','$user_descr','$user_mail', 1, 1, '$lilac_period', '$lilac_period', 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1 ,1, 1, 1);\");\n\n\t\t\t// Lilac contact_group_member\n\t\t\t$lilac_contactgroupid=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_contact_group WHERE name='$group_name'\"),0,\"id\");\n\t\t\t$lilac_contactid=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_contact where name='$user_name'\"),0,\"id\");\n\t\t\tif($lilac_contactgroupid!=\"\" and $lilac_contactid!=\"\" and $user_limitation!=\"1\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_group_member (contactgroup, contact) VALUES ('$lilac_contactgroupid', '$lilac_contactid')\");\n\n\t\t\t// Insert into nagvis\n\t\t\tif($in_nagvis == \"yes\"){\n\t\t\t\t$bdd = new PDO('sqlite:/srv/eyesofnetwork/nagvis/etc/auth.db');\n\n\t\t\t\t$req = $bdd->query(\"SELECT count(*) FROM users WHERE name = '$user_name'\");\n\t\t\t\t$nagvis_user_exist = $req->fetch();\n\n\t\t\t\tif ($nagvis_user_exist[\"count(*)\"] == 0){\n\t\t\t\t\t// this is nagvis default salt for password encryption security\n\t\t\t\t\t$nagvis_salt = '29d58ead6a65f5c00342ae03cdc6d26565e20954';\n\t\t\t\t\t\n\t\t\t\t\t// insert user in nagvis SQLite DB\n\t\t\t\t\t$sql = \"INSERT INTO users (name, password) VALUES ('$user_name', '\".sha1($nagvis_salt.$user_password1).\"')\";\n\t\t\t\t\t$bdd->exec($sql);\n\n\t\t\t\t\t// insert user's right as \"Guest\" by default\n\t\t\t\t\t$sql = \"SELECT userId FROM users WHERE name = '$user_name'\";\n\t\t\t\t\t$req = $bdd->query($sql);\n\t\t\t\t\t$result = $req->fetch();\n\t\t\t\t\t$nagvis_id = $result['userId'];\n\n\t\t\t\t\t$sql = \"INSERT INTO users2roles (userId, roleId) VALUES ($nagvis_id, $nagvis_group)\";\n\t\t\t\t\t$bdd->exec($sql);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Insert into cacti\n\t\t\tif($in_cacti == \"yes\"){\n\t\t\t\t$bdd = new PDO('mysql:host='.$database_host.';dbname='.$database_cacti, $database_username, $database_password);\n\t\t\t\t$req = $bdd->query(\"SELECT count(*) FROM user_auth WHERE username='$user_name'\");\n\t\t\t\t$cacti_user_exist = $req->fetch();\n\t\t\t\tif ($cacti_user_exist[\"count(*)\"] == 0){\n\t\t\t\t\t$bdd->exec(\"INSERT INTO user_auth (username,password,realm,full_name,show_tree,show_list,show_preview,graph_settings,login_opts,policy_graphs,policy_trees,policy_hosts,policy_graph_templates,enabled) VALUES ('$user_name','',2,'$user_descr','on','on','on','on',3,2,2,2,2,'on')\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Messages\n\t\t\tlogging(\"admin_user\",\"INSERT : $user_name $user_descr $user_limitation $user_group $user_type $user_location\");\n\t\t\tif($message){ message(8,\" : User Inserted\",'ok'); }\n\n\t\t\t// Lilac contact_commands\n\t\t\t$lilac_contact_hcommand=mysqli_result(sqlrequest(\"$database_lilac\",\"select id from nagios_command where name like 'notify-by-email-host'\"),0,\"id\");\n\t\t\t$lilac_contact_scommand=mysqli_result(sqlrequest(\"$database_lilac\",\"select id from nagios_command where name like 'notify-by-email-service'\"),0,\"id\");\n\t\t\tif($lilac_contactid!=\"\" and $lilac_contact_hcommand!=\"\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_notification_command (contact_id,command,type) values ('$lilac_contactid','$lilac_contact_hcommand','host')\");\n\t\t\telseif($lilac_contact_hcommand==\"\")\n\t\t\t\tmessage(8,\" : Verify contact 'notify-by-email-host' command in nagios configurator\",'warning');\n\t\t\tif($lilac_contactid!=\"\" and $lilac_contact_scommand!=\"\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_notification_command (contact_id,command,type) values ('$lilac_contactid','$lilac_contact_scommand','service')\");\n\t\t\telseif($lilac_contact_scommand==\"\")\n\t\t\t\tmessage(8,\" : Verify contact 'notify-by-email-service' command in nagios configurator\",'warning');\n\t\t}\n\t\telse\n\t\t\tmessage(8,\" : Passwords do not match or are empty\",'warning');\n\t}\n\telseif($user_exist != 0 )\n\t\tmessage(8,\" : User $user_name already exists\",'warning');\n\telse\n\t\tmessage(8,\" : User name can not be empty\",'warning');\n\treturn $user_id;\n}\n\n// \"mysqli\" version of mysql_result\nfunction mysqli_result($res, $row, $field=0){\n    $res->data_seek($row);\n\tif(gettype($field) == \"string\"){\n\t\t$datarow = $res->fetch_assoc();\n\t}\n    else{\n\t\t$datarow = $res->fetch_array();\n\t}\n    return $datarow[$field];\n}\n\n// get traduction words\nfunction getLabel($reference){\n\n        global $dictionnary;\n        global $path_messages;\n        global $path_messages_custom;\n        global $t;\n\n        // Load dictionnary if not isset\n        if(!isset($t)) {\n                $t = new Translator();\n                $t::initFile($path_messages,$path_messages_custom);\n                $dictionnary = $t::createPHPDictionnary();\n        }\n\n        // Display dictionnary reference if isset or reference\n        if(isset($dictionnary[$reference])) {\n                $label = $dictionnary[$reference];\n        }\n        else {\n                $label = $reference;\n        }\n\n        return $label;\n\n}\n\n// get default page\nfunction getDefaultPage($usrlimit=0){\n\n\tglobal $t;\n\tglobal $defaultpage;\n\tglobal $path_menu_limited;\n\tglobal $path_menu_limited_custom;\n\tglobal $path_menus;\n\tglobal $path_menus_custom;\n\n\t// load dictionnary if not isset\n\tif(!isset($t)) {\n\t\t$t = new Translator();\n\t}\n\t\n\t// get json file\n\tif(isset($_COOKIE[\"user_limitation\"])) { $usrlimit = $_COOKIE[\"user_limitation\"]; }\n\tif($usrlimit == 1){\n\t\t$file=$t::getFile($path_menu_limited, $path_menu_limited_custom);\n\t\t$json_content = file_get_contents($file);\n\t\t$links = json_decode($json_content, true);\n\t\tforeach ($links[\"link\"] as $link) {\n\t\t\tif(isset($link[\"default\"])) {\n\t\t\t\tif( $link[\"default\"] != null ){\n\t\t\t\t\t$defaultpage = $link[\"url\"];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} \n\t\n\treturn $defaultpage;\n\n}\n\n// get frame url\nfunction getFrameURL($url){\n\tglobal $path_frame;\n\t\n\t$frame_url = $path_frame.urlencode($url);\n\treturn $frame_url;\n}\n\nfunction pieChart($queue, $field, $search, $period)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tif($queue == \"active\"){ global $ged_active_intervals; extract($ged_active_intervals); }\n\telse{ global $ged_history_intervals; extract($ged_history_intervals); }\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\t// set the period clause (according to checkboxes checked)\n\t$period_clause = \"\";\n\tif( isset($period) && $period != \"\" )\n\t{\n\t\tswitch($period)\n\t\t{\n\t\t\tcase \"day\": $period_clause = \" AND o_sec >= $day\"; break;\n\t\t\tcase \"week\": $period_clause = \" AND o_sec >= $week AND o_sec < $day\"; break;\n\t\t\tcase \"month\": $period_clause = \" AND o_sec >= $month AND o_sec < $week\"; break;\n\t\t\tcase \"year\": $period_clause = \" AND o_sec >= $year AND o_sec < $month\"; break;\n\t\t}\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($array_ged_states as $key => $state)\n\t\t{\n\t\t\tif($key == \"ok\")\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif( !isset($array_result[\"$key\"]) ){\n\t\t\t\t$array_result[\"$key\"] = 0;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"'\";\n\t\t\t$sql .= $search_clause;\n\t\t\t$sql .= $period_clause;\n\t\t\t\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t$result = mysqli_fetch_row($result);\n\t\t\t$array_result[\"$key\"] += $result[0];\n\t\t}\n\t}\n\treturn json_encode($array_result);\n}\n\nfunction barChart($queue, $field, $search)\n{\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tif($queue == \"active\"){ global $ged_active_intervals; extract($ged_active_intervals); }\n\telse{ global $ged_history_intervals; extract($ged_history_intervals); }\n\t\n\t\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t$array_result = array();\n\t$array_now_day = array();\n\t$array_day_week = array();\n\t$array_week_month = array();\n\t$array_month_year = array();\n\t$array_year_more = array();\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($array_ged_states as $key => $state)\n\t\t{\n\t\t\tif($key == \"ok\")\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif( !isset($array_now_day[\"$key\"]) ){$array_now_day[\"$key\"] = 0;}\n\t\t\tif( !isset($array_day_week[\"$key\"]) ){$array_day_week[\"$key\"] = 0;}\n\t\t\tif( !isset($array_week_month[\"$key\"]) ){$array_week_month[\"$key\"] = 0;}\n\t\t\tif( !isset($array_month_year[\"$key\"]) ){$array_month_year[\"$key\"] = 0;}\n\t\t\tif( !isset($array_year_more[\"$key\"]) ){$array_year_more[\"$key\"] = 0;}\n\t\t\t$sql = \"\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $day\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $week AND o_sec < $day\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $month AND o_sec < $week\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $year AND o_sec < $month\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec < $year\".$search_clause;\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t\n\t\t\t$cpt = 0;\n\t\t\twhile( $row = mysqli_fetch_row($result) )\n\t\t\t{\n\t\t\t\tswitch($cpt)\n\t\t\t\t{\n\t\t\t\t\tcase 0: $array_now_day[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 1: $array_day_week[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 2: $array_week_month[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 3: $array_month_year[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 4: $array_year_more[\"$key\"] += $row[0]; break;\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t}\n\t}\n\tarray_push($array_result, $array_now_day);\n\tarray_push($array_result, $array_day_week);\n\tarray_push($array_result, $array_week_month);\n\tarray_push($array_result, $array_month_year);\n\tarray_push($array_result, $array_year_more);\n\t\n\treturn json_encode($array_result);\n}\n\nfunction slaPieChart($field, $search, $period)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $ged_sla_intervals;\n\tglobal $ged_history_intervals;\n\textract($ged_sla_intervals);\n\textract($ged_history_intervals);\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\t// set the period clause (according to checkboxes checked)\n\t$period_clause = \"\";\n\tif( isset($period) && $period != \"\" )\n\t{\n\t\tswitch($period)\n\t\t{\n\t\t\tcase \"day\": $period_clause = \" AND o_sec >= $day\"; break;\n\t\t\tcase \"week\": $period_clause = \" AND o_sec >= $week AND o_sec < $day\"; break;\n\t\t\tcase \"month\": $period_clause = \" AND o_sec >= $month AND o_sec < $week\"; break;\n\t\t\tcase \"year\": $period_clause = \" AND o_sec >= $year AND o_sec < $month\"; break;\n\t\t}\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($ged_sla_intervals as $key => $value)\n\t\t{\n\t\t\tif( !isset($array_result[\"$key\"]) ){\n\t\t\t\t$array_result[\"$key\"] = 0;\n\t\t\t}\n\t\t\t\n\t\t\t$sla_clause = \"\";\n\t\t\tswitch($key)\n\t\t\t{\n\t\t\t\tcase \"first\" : $sla_clause = \" AND a_sec-o_sec < $first\"; break;\n\t\t\t\tcase \"second\": $sla_clause = \" AND a_sec-o_sec >= $first AND a_sec-o_sec < $second\"; break;\n\t\t\t\tcase \"third\" : $sla_clause = \" AND a_sec-o_sec >= $second AND a_sec-o_sec < $third\"; break;\n\t\t\t\tcase \"fourth\": $sla_clause = \" AND a_sec-o_sec >= $third\"; break;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state!='0'\".$sla_clause;\n\t\t\t$sql .= $search_clause;\n\t\t\t$sql .= $period_clause;\n\t\t\t\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t$result = mysqli_fetch_row($result);\n\t\t\t$array_result[\"$key\"] += $result[0];\n\t\t}\n\t}\n\treturn json_encode($array_result);\n}\n\nfunction slaBarChart($field, $search)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tglobal $ged_sla_intervals;\n\tglobal $ged_history_intervals;\n\textract($ged_sla_intervals);\n\textract($ged_history_intervals);\n\t\n\t$array_result = array();\n\t$array_now_day = array();\n\t$array_day_week = array();\n\t$array_week_month = array();\n\t$array_month_year = array();\n\t$array_year_more = array();\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($ged_sla_intervals as $key => $value)\n\t\t{\n\t\t\tif( !isset($array_now_day[\"$key\"]) ){$array_now_day[\"$key\"] = 0;}\n\t\t\tif( !isset($array_day_week[\"$key\"]) ){$array_day_week[\"$key\"] = 0;}\n\t\t\tif( !isset($array_week_month[\"$key\"]) ){$array_week_month[\"$key\"] = 0;}\n\t\t\tif( !isset($array_month_year[\"$key\"]) ){$array_month_year[\"$key\"] = 0;}\n\t\t\tif( !isset($array_year_more[\"$key\"]) ){$array_year_more[\"$key\"] = 0;}\n\t\t\t\n\t\t\tswitch($key)\n\t\t\t{\n\t\t\t\tcase \"first\" : $sla_clause = \" AND a_sec-o_sec < $first\"; break;\n\t\t\t\tcase \"second\": $sla_clause = \" AND a_sec-o_sec >= $first AND a_sec-o_sec < $second\"; break;\n\t\t\t\tcase \"third\" : $sla_clause = \" AND a_sec-o_sec >= $second AND a_sec-o_sec < $third\"; break;\n\t\t\t\tcase \"fourth\": $sla_clause = \" AND a_sec-o_sec >= $third\"; break;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $day\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $week AND o_sec < $day\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $month AND o_sec < $week\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $year AND o_sec < $month\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec < $year\".$sla_clause.$search_clause;\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t\n\t\t\t$cpt = 0;\n\t\t\twhile( $row = mysqli_fetch_row($result) )\n\t\t\t{\n\t\t\t\tswitch($cpt)\n\t\t\t\t{\n\t\t\t\t\tcase 0: $array_now_day[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 1: $array_day_week[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 2: $array_week_month[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 3: $array_month_year[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 4: $array_year_more[\"$key\"] += $row[0]; break;\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t}\n\t}\n\tarray_push($array_result, $array_now_day);\n\tarray_push($array_result, $array_day_week);\n\tarray_push($array_result, $array_week_month);\n\tarray_push($array_result, $array_month_year);\n\tarray_push($array_result, $array_year_more);\n\t\n\treturn json_encode($array_result);\n}\n\n?>\n", "<?php\n  // Mot tap\u00e9 par l'utilisateur\n  $q = $_GET['query'];\n\t$table_name = $_GET['table_name'];\n\n    try {\n        $bdd = new PDO('mysql:host=localhost;dbname=lilac', 'root', 'root66');\n    } catch(Exception $e) {\n\t\t echo \"Connection failed: \" . $e->getMessage();\n        exit('Impossible de se connecter \u00e0 la base de donn\u00e9es.');\n    }\n\n    // Requ\u00eate SQL\n    $requete = \"SELECT name FROM \" . $table_name .  \" WHERE name LIKE '\". $q .\"%' LIMIT 0, 10\";\n\n\tforeach  ($bdd->query($requete) as $row) {\n\t\t$suggestions['suggestions'][] = $row['name'];\n\t}\n    echo json_encode($suggestions);\n?>\n", "<?php\n\n$action = isset($_GET['action']) ? $_GET['action'] : false;\n$bp_name = isset($_GET['bp_name']) ? $_GET['bp_name'] : false;\n$host_name = isset($_GET['host_name']) ? $_GET['host_name'] : false;\n$service = isset($_GET['service']) ? $_GET['service'] : false;\n$new_services = isset($_GET['new_services']) ? $_GET['new_services'] : false;\n\n$uniq_name = isset($_GET['uniq_name']) ? $_GET['uniq_name'] : false;\n$uniq_name_orig = isset($_GET['uniq_name_orig']) ? $_GET['uniq_name_orig'] : false;\n$process_name = isset($_GET['process_name']) ? $_GET['process_name'] : false;\n$display = isset($_GET['display']) ? $_GET['display'] : false;\n$url = isset($_GET['url']) ? $_GET['url'] : false;\n$command = isset($_GET['command']) ? $_GET['command'] : false;\n$type = isset($_GET['type']) ? $_GET['type'] : false;\n$min_value = isset($_GET['min_value']) ? $_GET['min_value'] : false;\n\ntry {\n\t$bdd = new PDO('mysql:host=localhost;dbname=nagiosbp', 'root', 'root66');\n} catch(Exception $e) {\n\techo \"Connection failed: \" . $e->getMessage();\n\texit('Impossible de se connecter \u00e0 la base de donn\u00e9es.');\n}\n\nif($action == 'verify_services'){\n    verify_services($bp_name,$host_name,$bdd);\n}\n\nelseif($action == 'delete_bp'){\n    delete_bp($bp_name,$bdd);\n}\n\nelseif($action == 'list_services'){\n    list_services($host_name);\n}\n\nelseif($action == 'list_process'){\n\tlist_process($bp_name,$display,$bdd);\n}\n\nelseif ($action == 'add_services'){\n\tadd_services($bp_name,$new_services,$bdd);\n}\n\nelseif ($action == 'add_process'){\n    add_process($bp_name,$new_services,$bdd);\n}\n\nelseif ($action == 'add_application'){\n\tadd_application($uniq_name_orig,$uniq_name,$process_name,$display,$url,$command,$type,$min_value,$bdd);\n}\n\nelseif ($action == 'build_file'){\n\tbuild_file($bdd);\n}\n\nelseif ($action == 'info_application'){\n\tinfo_application($bp_name,$bdd);\n}\n\nelseif ($action == 'check_app_exists'){\n\tcheck_app_exists($uniq_name, $bdd);\n}\n\nfunction verify_services($bp,$host,$bdd){\n\t$sql = \"select COUNT(*),service from bp_services where bp_name = '\" . $bp . \"' and host = '\". $host . \"'\";\n\t$req = $bdd->query($sql);\n\t$informations = $req->fetch();\n\t$number_services = intval($informations['COUNT(*)']);\n\t$service = $informations['service'];\n\n\techo $bp . \"::\" . $host . \"::\" . $number_services . \"::\" . $service;\n}\n\nfunction delete_bp($bp,$bdd){\n    $sql = \"delete from bp where name = '\" . $bp . \"'\";\n    $bdd->exec($sql);\n\n\t$sql = \"delete from bp_services where bp_name = '\" . $bp . \"'\";\n    $bdd->exec($sql);\n\n\t$sql = \"delete from bp_links where bp_name = '\" . $bp . \"'\";\n\t$bdd->exec($sql);\n\t\n\t$sql = \"delete from bp_links where bp_link = '\" . $bp . \"'\";\n\t$bdd->exec($sql);\n}\n\nfunction list_services($host_name){\n\t$path_nagios_ser = \"/srv/eyesofnetwork/nagios/etc/objects/services.cfg\";\n\n\t$tabServices = array() ;\n\t$tabServices['service'] = array() ;\n    $lignes = file($path_nagios_ser);\n\t$hasMatch = 0;\n\t\n    foreach( $lignes as $ligne) {\n\n        if ( preg_match(\"/$host_name$/\", trim($ligne), $match)) {  //Get Host name\n            $hasMatch = 1;\n        }\n        elseif ( preg_match(\"#^service_description#\", trim($ligne))) {\n\t\t\t$service = preg_split(\"/[\\s]+/\", trim($ligne));\n            if ($hasMatch)\n                $tabServices['service'][] = $service[1];\n            $hasMatch = 0;\n        }\n    }\n\tnatcasesort($tabServices['service']);\n\tarray_unshift($tabServices['service'],\"Hoststatus\");\n\techo json_encode($tabServices);\n}\n\nfunction list_process($bp,$display,$bdd){\n\t$sql = \"select name from bp where is_define = 1 and name!='\".$bp.\"' and priority = '\" . $display . \"'\";\n\t$req = $bdd->query($sql);\n\t$process = $req->fetchall();\n\n    echo json_encode($process);\n}\n\nfunction add_services($bp,$services,$bdd){\n\t$list_services = array();\n\t$old_list_services = array();\n\t\n\tif(is_array($services)) {\n\t\tforeach($services as $values){\n\t\t\t$value = explode(\"::\", $values);\n\t\t\t$service = $value[1];\n\t\t\t$list_services[] = $service;\n\t\t}\n\t}\n\t$sql = \"select service,host from bp_services where bp_name = '\" . $bp . \"'\";\n\t$req = $bdd->query($sql);\n\n\t$sql = \"delete from bp_services where bp_name = '\" . $bp . \"'\";\n\t$bdd->exec($sql);\n\n\tif(count($services) > 0){\n\t\t$sql = \"update bp set is_define = 1 where name = '\" . $bp . \"'\";\n\t\t$bdd->exec($sql);\n\t}\n\n\telse{\n\t\t$sql = \"update bp set is_define = 0 where name = '\" . $bp . \"'\";\n        $bdd->exec($sql);\n    }\n\n\tif(is_array($services)) {\n\t\tforeach($services as $values){\n\t\t\t$value = explode(\"::\", $values);\n\t\t\t$host = $value[0];\n\t\t\t$service = $value[1];\n\t\t\techo $service;\n\t\t\t$sql = \"insert into bp_services (bp_name,host,service) values('\" . trim($bp) . \"','\" . $host . \"','\" . $service . \"')\";\n\t\t\t$bdd->exec($sql);\n\t\t}\n\t}\n}\n\nfunction add_process($bp,$process,$bdd){\n    $sql = \"delete from bp_links where bp_name = '\" . $bp . \"'\";\n    $bdd->exec($sql);\n\t$sql = \"update bp set is_define = 0 where name = '\" . $bp . \"'\";\n\t$bdd->exec($sql);\t\n\n    if(count($process) > 0 and is_array($process)){\n        $sql = \"update bp set is_define = 1 where name = '\" . $bp . \"'\";\n        $bdd->exec($sql);\n\t\n\t\tforeach($process as $values){\n\t\t\t$value = explode(\"::\", $values);\n\t\t\t$bp_link = $value[1];\n\n\t\t\t$sql = \"insert into bp_links (bp_name,bp_link) values('\" . $bp . \"','\" . $bp_link . \"')\";\n\n\t\t\t$bdd->exec($sql);\n\t\t}\t\n\t}\n}\n\nfunction check_app_exists($uniq_name, $bdd)\n{\n\t$sql = \"select count(*) from bp where name = '\" . $uniq_name . \"';\";\n\t$req = $bdd->query($sql);\n\t$bp_exist = $req->fetch(PDO::FETCH_NUM);\n\t\n\tif($bp_exist[0] == 1){\n\t\techo \"true\";\n\t} else {\n\t\techo \"false\";\n\t}\n}\n\nfunction add_application($uniq_name_orig,$uniq_name,$process_name,$display,$url,$command,$type,$min_value,$bdd){\n\tif($type != 'MIN'){\n\t\t$min_value = \"\";\n\t}\n\t$sql = \"select count(*) from bp where name = '\" . $uniq_name . \"';\";\n\t$req = $bdd->query($sql);\n\t$bp_exist = $req->fetch();\n\n\t// add\n\tif($bp_exist[0] == 0 and empty($uniq_name_orig)){\n\t\t$sql = \"insert into bp (name,description,priority,type,command,url,min_value) values('\" . $uniq_name .\"','\" . $process_name .\"','\" . $display . \"','\" . $type . \"','\" . $command . \"','\" . $url . \"','\" . $min_value . \"')\";\n\t\t$bdd->exec($sql);\n\t}\n\t// uniq name modification\n\telseif($uniq_name_orig != $uniq_name) {\n\t\tif($bp_exist[0] != 0){\n\t\t\t// TODO QUENTIN\n\t\t} else {\n\t\t\t$sql = \"update bp set name = '\" . $uniq_name . \"',description = '\" . $process_name . \"',priority = '\" . $display . \"',type = '\" . $type . \"',command = '\" . $command . \"',url = '\" . $url . \"',min_value = '\" . $min_value . \"' where name = '\" . $uniq_name_orig . \"'\";\n\t\t\t$bdd->exec($sql);\n\t\t\t$sql = \"update bp_links set bp_name = '\" . $uniq_name . \"' where bp_name = '\" . $uniq_name_orig . \"'\";\n\t\t\t$bdd->exec($sql);\t\t\n\t\t\t$sql = \"update bp_links set bp_link = '\" . $uniq_name . \"' where bp_link = '\" . $uniq_name_orig . \"'\";\n\t\t\t$bdd->exec($sql);\n\t\t\t$sql = \"update bp_services set bp_name = '\" . $uniq_name . \"' where bp_name = '\" . $uniq_name_orig . \"'\";\t\t\t\t\t\n\t\t\t$bdd->exec($sql);\t\t\n\t\t}\n\t}\t\n\t// modification\n\telse{\n\t\t$sql = \"update bp set name = '\" . $uniq_name . \"',description = '\" . $process_name . \"',priority = '\" . $display . \"',type = '\" . $type . \"',command = '\" . $command . \"',url = '\" . $url . \"',min_value = '\" . $min_value . \"' where name = '\" . $uniq_name . \"'\";\n\t\t$bdd->exec($sql);\t\n\t}\n}\n\nfunction build_file($bdd){\n\t\n\t$bp_sons=array();\n\t\n\t$sql = \"SELECT * FROM bp where is_define ='1'\";\n\t$req = $bdd->query($sql);\n\t$bps_informations = $req->fetchall();\n\t$file = \"../../../../nagiosbp/etc/nagios-bp.conf\";\n\t$backup_file = \"../../../../nagiosbp/etc/nagios-bp.conf_old\";\n\tcopy($file,$backup_file);\n\t$bp_file = fopen($file, \"w\");\n\tfputs($bp_file, \"#\\n\");\n\tfputs($bp_file, \"# EyesOfNetwork\\n\");\n\tfputs($bp_file, \"#\\n\");\n\t\n\tforeach($bps_informations as $bp_informations){\n\t\tif(!in_array($bp_informations['name'],$bp_sons,true)) {\n\t\t\t$bp_sons=build_file_recursive($bdd,$bp_file,$bp_informations,$bp_sons);\n\t\t}\n\t}\n\tfclose($bp_file);\n}\n\nfunction build_file_recursive($bdd,$bp_file,$bp_informations,$bp_sons){\n\n\t$sql = \"SELECT bp_link FROM bp_links where bp_name='\".$bp_informations['name'].\"'\";\n\t$req = $bdd->query($sql);\n\tif($req->rowCount() == 0) {\n\t\t$bp_sons[]=$bp_informations['name'];\n\t\tbuild_file_bp($bdd,$bp_file, $bp_informations);\n\t} else {\n\t\t$bp_links = $req->fetchall();\n\t\tforeach($bp_links as $bp_link){\n\t\t\t$sql = \"SELECT * FROM bp where is_define ='1' and name='\".$bp_link[\"bp_link\"].\"'\";\n\t\t\t$req = $bdd->query($sql);\n\t\t\t$bps_sons_informations = $req->fetchall();\n\t\t\tforeach($bps_sons_informations as $bp_sons_informations){\n\t\t\t\tif(!in_array($bp_sons_informations['name'],$bp_sons,true)) {\n\t\t\t\t\t$bp_sons=build_file_recursive($bdd,$bp_file,$bp_sons_informations,$bp_sons);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$bp_sons[]=$bp_informations['name'];\n\t\tbuild_file_bp($bdd,$bp_file, $bp_informations);\n\t}\n\treturn $bp_sons;\n}\n\nfunction build_file_bp($bdd,$bp_file, $bp_informations){\n\tfputs($bp_file, $bp_informations['name'] . \" = \");\n\tif($bp_informations['type'] == 'ET'){\n\t\t$type = \"&\";\n\t}\n\telseif($bp_informations['type'] == 'OU'){\n\t\t$type = \"|\";\n\t}\n\telse{\n\t\t$type = \"+\";\n\t\tfputs($bp_file, $bp_informations['min_value'] . \" of: \");\n\t}\n\t$sql = \"select host,service from bp_services where bp_name = '\" . $bp_informations['name'] . \"'\";\n\t$req = $bdd->query($sql);\n\t$host_services = $req->fetchall();\n\n\t$counter1 = count($host_services);\n\t$counter2 = 0;\n\n\tforeach($host_services as $services){\n\t\tfputs($bp_file,$services['host'] . \";\" . $services['service']);\n\t\t$counter2 += 1;\n\n\t\tif($counter2 < $counter1){\n\t\t\tfputs($bp_file, \" \" . $type . \" \");\n\t\t}\n\t}\n\n\t$sql = \"select bp_link from bp_links where bp_name = '\" .$bp_informations['name'] . \"'\";\n\t$req = $bdd->query($sql);\n\t$link_informations = $req->fetchall();\n\n\t$counter1 = count($link_informations);\n\t$counter2 = 0;\n\n\tforeach($link_informations as $link_infos){\n\t\tfputs($bp_file,$link_infos['bp_link']);\n\t\t$counter2 += 1;\n\n\t\tif($counter2 < $counter1){\n\t\t\tfputs($bp_file, \" \" . $type . \" \");\n\t\t}\n\t}\n\n\tfputs($bp_file, \"\\n\");\n\n\tfputs($bp_file, \"display \" . $bp_informations['priority'] . \";\" . $bp_informations['name'] . \";\" . $bp_informations['description'] . \"\\n\");\n\n\tif(! empty($bp_informations['url'])){\n\t\tfputs($bp_file, \"info_url \" . $bp_informations['name'] . \";\" . $bp_informations['url'] . \"\\n\");\n\t}\n\n\tif(! empty($bp_informations['command'])){\n\t\tfputs($bp_file, \"external_info \" . $bp_informations['name'] . \";\" . $bp_informations['command'] . \"\\n\");\n\t}\n}\n\nfunction info_application($bp_name, $bdd){\n\t$sql = \"select * from bp where name = '\" . $bp_name . \"'\";\n\t$req = $bdd->query($sql);\n\t$info = $req->fetch();\n\techo json_encode($info);\n}\n\n?>\n", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Quentin HOARAU\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\ninclude(\"../../include/config.php\");\ninclude(\"../../include/function.php\");\n\n// Search function for Jquery an exit\nif(isset($_GET['term']) && isset($_GET['request']) && $_GET['request'] == \"search_user\") {\n\t$result=sqlrequest($database_eonweb,\"select * from ldap_users_extended where (user LIKE '%\".$_GET['term'].\"%') OR (login LIKE '%\".$_GET['term'].\"%') order by user\");\n\t\n\t$array = array();\n\twhile ($line = mysqli_fetch_array($result)){\n\t\tarray_push($array, $line[0]);\n\t}\n\techo json_encode($array);\n}\n\n?>\n", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Jean-Philippe LEVY\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\n# Check optionnal module to load\nif(isset($_GET[\"module\"]) && isset($_GET[\"link\"])) { \n\n\t$module=exec(\"rpm -q \".$_GET[\"module\"].\" |grep '.eon' |wc -l\");\n\t\n\t# Redirect to module page if rpm installed\n\tif($module!=0) { header('Location: '.$_GET[\"link\"].''); }\n\n} \n\t\ninclude(\"../header.php\"); \ninclude(\"../side.php\"); \n\n?>\n\n<div id=\"page-wrapper\">\n\n\t<div class=\"row\">\n\t\t<div class=\"col-lg-12\">\n\t\t\t<h1 class=\"page-header\"><?php echo getLabel(\"label.home_about.title\"); ?></h1>\n\t\t</div>\n\t</div>\n\n\t<div class=\"row\">\n\t<?php \n\t\t# Module not installed\n\t\tif(isset($module)) {\n\t\t\tmessage(0,\" : Module \".$_GET[\"module\"].\" is not installed\",'warning'); \n\t\t} \n\t\t# Module or link not specified\n\t\telse {\n\t\t\tmessage(0,\" : Not allowed\",'critical'); \n\t\t}\n\t?>\n\t</div>\n\t\n</div>\n\n<?php include(\"../footer.php\"); ?>\n", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Quentin HOARAU\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\ninclude(\"../../include/config.php\");\ninclude(\"../../include/arrays.php\");\ninclude(\"../../include/function.php\"); \ninclude(\"ged_functions.php\");\n\nextract($_GET);\n\n// get all GED filters\n$default = \"\";\n$file=\"../../cache/\".$_COOKIE[\"user_name\"].\"-ged.xml\";\nif(file_exists($file)){\n\t$xmlfilters = new DOMDocument(\"1.0\",\"UTF-8\");\n\t$xmlfilters->load($file);\n\n\t$xpath = new DOMXPath($xmlfilters);\n\n\t$g=$xmlfilters->getElementsByTagName(\"ged\")->item(0);\n\n\t//Default filter detection\n\t$default=$g->getElementsByTagName(\"default\")->item(0)->nodeValue;\n}\n\n?>\n\n<form id=\"ged-table\" method=\"POST\" onsubmit=\"return false;\" class=\"form-inline\">\n\t<div class=\"dataTable_wrapper\">\n\t\t<table id=\"events-table\" class=\"table table-striped datatable-eonweb-ajax table-condensed table-hover\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th class=\"col-md-1\"><?php echo getLabel(\"label.state\") ?></th>\n\t\t\t\t\t<?php\n\t\t\t\t\tforeach ($array_ged_packets as $key => $value) {\n\t\t\t\t\t\tif($value[\"col\"] == true && $key != \"state\"){\n\t\t\t\t\t\t\techo \"<th>\".ucfirst($key).\"</th>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<?php\n\t\t\t\t\tif($_GET[\"type\"] == 0){\n\t\t\t\t\t\t$ged_where = \"WHERE pkt_type_id!='0'\";\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$ged_where = \"WHERE pkt_type_id='\".$_GET[\"type\"].\"'\";\n\t\t\t\t\t}\n\t\t\t\t\t$gedsql_result1=sqlrequest($database_ged,\"SELECT pkt_type_id,pkt_type_name FROM pkt_type $ged_where AND pkt_type_id<'100';\");\n\t\t\t\t\t\n\t\t\t\t\twhile($ged_type = mysqli_fetch_assoc($gedsql_result1)){\n\n\t\t\t\t\t\t// request for ged events according to queue and filters\n\t\t\t\t\t\t$sql = createSelectClause($ged_type[\"pkt_type_name\"], $queue);\n\t\t\t\t\t\t\n\t\t\t\t\t\t// time periods (only in active events);\n\t\t\t\t\t\tif($time_period != \"\"){\n\t\t\t\t\t\t\t// define all times needed (for each range)\n\t\t\t\t\t\t\t$actual_time = time();\n\t\t\t\t\t\t\t$five_minutes = $actual_time - (60 * 5);\n\t\t\t\t\t\t\t$fifteen_minutes = $actual_time - (60 * 15);\n\t\t\t\t\t\t\t$thirty_minutes = $actual_time - (60 * 30);\n\t\t\t\t\t\t\t$one_hour = $actual_time - (60 * 60);\n\n\t\t\t\t\t\t\tswitch ($time_period) {\n\t\t\t\t\t\t\t\tcase '0-5m':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= \". $actual_time .\" AND o_sec > \". $five_minutes;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '5-15m':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= \". $five_minutes .\" AND o_sec > \". $fifteen_minutes;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '15-30m':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= \". $fifteen_minutes .\" AND o_sec > \". $thirty_minutes;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '30m-1h':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= \". $thirty_minutes .\" AND o_sec > \". $one_hour;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'more':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= \". $one_hour;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif($ack_time != \"\"){\n\t\t\t\t\t\t\t$sql .= \" AND a_sec - o_sec >= $ack_time\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if there's a default filter\n\t\t\t\t\t\t$array_filters = [];\n\t\t\t\t\t\tif($default!=\"\"){\n\t\t\t\t\t\t\t$g_filters = $xpath->query(\"//ged/filters[@name='$default']/filter\");\n\n\t\t\t\t\t\t\t$xmlcpt=0;\n\t\t\t\t\t\t\tforeach($g_filters as $g_filter){\n\t\t\t\t\t\t\t\t$array_filters[$xmlcpt][$g_filter->getAttribute(\"name\")] = $g_filter->nodeValue;\n\t\t\t\t\t\t\t\t$xmlcpt++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// XML filters if activated for the user\n\t\t\t\t\t\tif( count($array_filters) > 0 ){\n\t\t\t\t\t\t\t$sqlcpt=0;\n\t\t\t\t\t\t\tfor($i=0;$i<$xmlcpt;$i++) {\n\t\t\t\t\t\t\t\tforeach ($array_filters[$i] as $key => $value) {\n\t\t\t\t\t\t\t\t\t// advanced search (with *)\n\t\t\t\t\t\t\t\t\t$like = \"\";\n\t\t\t\t\t\t\t\t\tif( substr($value, 0, 1) === '*' ){\n\t\t\t\t\t\t\t\t\t\t$like .= \"%\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$like .= trim($value, '*');\n\t\t\t\t\t\t\t\t\tif ( substr($value, -1) === '*' ) {\n\t\t\t\t\t\t\t\t\t\t$like .= \"%\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif($sqlcpt==\"0\") {\n\t\t\t\t\t\t\t\t\t\t$sql .= \" AND ($key LIKE '$like'\";\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$sql .= \" OR $key LIKE '$like'\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$sqlcpt++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$sql .= \")\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$sql .= createWhereClause($owner,$filter,$search,$daterange,$ok,$warning,$critical,$unknown);\n\n\t\t\t\t\t\t$request = sqlrequest($database_ged, $sql);\n\t\t\t\t\t\twhile($event = mysqli_fetch_object($request)){\n\t\t\t\t\t\t\t$event_state = getEventState($event);\n\t\t\t\t\t\t\t$row_class = getClassRow($event_state);\n\n\t\t\t\t\t\t\techo '<tr class=\"'.$row_class.'\" name=\"'.$ged_type[\"pkt_type_name\"].'\">';\n\t\t\t\t\t\t\tcreateTableRow($event, $event_state, $queue);\n\t\t\t\t\t\t\techo \"</tr>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\n\t<div class=\"form-group\">\n\t\t<select id=\"ged-action\" class=\"form-control\" name=\"ged_actions\">\n\t\t\t<?php\n\t\t\t\tif($queue == \"active\"){\n\t\t\t\t\t$actions = $array_action_option;\n\t\t\t\t} else {\n\t\t\t\t\t$actions = $array_resolve_action_option;\n\t\t\t\t}\n\t\t\t\tforeach ($actions as $key => $value) {\n\t\t\t\t\techo \"<option value=\\\"$key\\\">\".getLabel(\"$value\").\"</option>\";\n\t\t\t\t}\n\t\t\t?>\n\t\t</select>\n\t</div>\n\t<button id=\"exec-ged-action\" class=\"btn btn-primary\" type=\"submit\" name=\"action\" value=\"submit\"><?php echo getLabel(\"action.submit\"); ?></button>\n\t<button id=\"select-all\" class=\"btn btn-primary\"><?php echo getLabel(\"action.select_all\"); ?></button>\n\t<button id=\"unselect-all\" class=\"btn btn-primary hidden\"><?php echo getLabel(\"action.unselect_all\"); ?></button>\n</form>\n\n<script src=\"/bower_components/datatables/media/js/jquery.dataTables.min.js\"></script>\n<script src=\"/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.min.js\"></script>\n<script src=\"/bower_components/datatables-responsive/js/dataTables.responsive.js\"></script>\n<script type=\"text/javascript\">\n\t$('.datatable-eonweb-ajax').DataTable({\n\t\tresponsive: true,\n\t\tlengthMenu: [ [10, 25, 50, 100, -1], [10, 25, 50, 100, dictionnary['label.all']] ],\n\t\tlanguage: {\n\t\t\tlengthMenu: dictionnary['action.display'] + \" _MENU_ \" + dictionnary['label.entries'],\n\t\t\tsearch: dictionnary['action.search']+\":\",\n\t\t\tpaginate: {\n\t\t\t\tfirst:      dictionnary['action.first'],\n\t\t\t\tprevious:   dictionnary['action.previous'],\n\t\t\t\tnext:       dictionnary['action.next'],\n\t\t\t\tlast:       dictionnary['action.last']\n\t\t\t},\n\t\t\tinfo:           dictionnary['label.datatable.info'],\n\t\t\tinfoEmpty:      dictionnary['label.datatable.infoempty'],\n\t\t\tinfoFiltered:   dictionnary['label.datatable.infofiltered'],\n\t\t\tzeroRecords: \tdictionnary['label.datatable.zerorecords']\n\t\t},\n\t\taaSorting: []\n\t});\n</script>", "<?php \n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Quentin HOARAU\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\ninclude(\"../../include/config.php\");\ninclude(\"../../include/arrays.php\");\ninclude(\"../../include/function.php\"); \ninclude(\"ged_functions.php\");\n\n// create variables from $_GET\nextract($_GET);\n\nif(isset($action) && $action != \"\" && (isset($selected_events) && count($selected_events) > 0) || isset($filter_name) || isset($filter) ){\n\tswitch ($action) {\n\t\tcase \"0\":\n\t\t\tdetails($selected_events, $queue);\n\t\t\tbreak;\n\t\tcase \"1\":\n\t\t\tedit($selected_events, $queue);\n\t\t\tbreak;\n\t\tcase 'edit_event':\n\t\t\teditEvent($selected_events, $queue, $comments);\n\t\t\tbreak;\n\t\tcase 'edit_all_event':\n\t\t\teditAllEvents($selected_events, $queue, $comments);\n\t\t\tbreak;\n\t\tcase 'confirm':\n\t\t\tif($global_action == \"4\"){\n\t\t\t\tacknowledge($selected_events, $queue, $global_action);\n\t\t\t} elseif($global_action == \"5\") {\n\t\t\t\tdelete($selected_events, $queue);\n\t\t\t} else {\n\t\t\t\townDisown($selected_events, $queue, $global_action);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'changeGedFilter':\n\t\t\tchangeGedFilter($filter_name);\n\t\t\tbreak;\n\t\tcase 'advancedFilterSearch':\n\t\t\tadvancedFilterSearch($queue, $filter);\n\t\t\tbreak;\n\t}\n}\n?>", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Quentin HOARAU\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\ninclude(\"../../include/config.php\");\ninclude(\"../../include/arrays.php\");\n\nfunction getEventState($event)\n{\n\tswitch ($event->state) {\n\t\tcase 0: $event_state = \"OK\";\t\tbreak;\n\t\tcase 1: $event_state = \"WARNING\";\tbreak;\n\t\tcase 2: $event_state = \"CRITICAL\";\tbreak;\n\t\tcase 3: $event_state = \"UNKNOWN\";\tbreak;\n\t}\n\n\treturn $event_state;\n}\n\nfunction getClassRow($event_state)\n{\n\tswitch ($event_state) {\n\t\tcase \"OK\"\t\t: $row_class = \"success\";\tbreak;\n\t\tcase \"WARNING\"\t: $row_class = \"warning\";\tbreak;\n\t\tcase \"CRITICAL\"\t: $row_class = \"danger\"; \tbreak;\n\t\tcase \"UNKNOWN\"\t: $row_class = \"info\"; \t\tbreak;\n\t}\n\n\treturn $row_class;\n}\n\nfunction createTableRow($event, $event_state, $queue)\n{\n\tglobal $dateformat;\n\tglobal $ged_prefix;\n\t\n\tforeach ($event as $key => $value) {\n\t\t$class = \"\";\n\n\t\tif($key == \"equipment\"){\n\t\t\t$url_host = preg_replace(\"/^\".$ged_prefix.\"/\",\"\",$value,1);\n\t\t\t$thruk_url = urlencode(\"/thruk/cgi-bin/extinfo.cgi?type=1&host=$url_host\");\n\t\t\t$value = '<a href=\"../module_frame/index.php?url='.$thruk_url.'\">'.$value.'</a>';\n\t\t\t$class = 'class=\"host\"';\n\t\t}\n\t\tif($key == \"service\"){\n\t\t\t$url_host = preg_replace(\"/^\".$ged_prefix.\"/\",\"\",$event->equipment,1);\n\t\t\t$thruk_url = urlencode(\"/thruk/cgi-bin/extinfo.cgi?type=2&host=\".$url_host.\"&service=$value\");\n\t\t\t$value = '<a href=\"../module_frame/index.php?url='.$thruk_url.'\">'.$value.'</a>';\n\t\t\t$class = 'class=\"service\"';\n\t\t}\n\t\tif ($key == \"state\" || $key == \"comments\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif($key == \"o_sec\" || $key == \"l_sec\"){\n\t\t\tif($queue == \"active\"){\n\t\t\t\t$value = time() - $value;\n\t\t\t\t$value = round($value/60);\n\t\t\t\t$value .= \" min\";\n\t\t\t} else {\n\t\t\t\t$value = date($dateformat, $value);\n\t\t\t}\n\t\t}\n\t\tif($key == \"id\"){\n\t\t\t$value = \"<input type='hidden' value='\".$value.\"'>\";\n\t\t\t$class = 'class=\"text-center\"';\n\t\t\tif($event->comments != \"\"){\n\t\t\t\t$value .= ' <i class=\"glyphicon glyphicon-comment\"></i>';\n\t\t\t}\n\t\t\tif($event->owner != \"\"){\n\t\t\t\t$value .= ' <i class=\"glyphicon glyphicon-floppy-disk\"></i>';\n\t\t\t}\n\t\t}\n\n\t\techo \"<td $class>$value</td>\";\n\t}\t\n}\n\nfunction createSelectClause($ged_type, $queue)\n{\n\tglobal $array_ged_packets;\n\tglobal $database_ged;\n\n\t$sql = \"SELECT id,\";\n\tforeach ($array_ged_packets as $key => $value) {\n\t\tif($value[\"col\"] == true){\n\t\t\tif(isset($value[\"db_col\"])){\n\t\t\t\t$sql .= $value[\"db_col\"].',';\n\t\t\t} else {\n\t\t\t\t$sql .= $key.',';\n\t\t\t}\n\t\t}\n\t}\n\t$sql .= \"comments\";\n\t//$sql = trim($sql, \",\");\n\t$sql .= \" FROM \".$ged_type.\"_queue_\".$queue;\n\t$sql .= \" WHERE id > 0\";\n\n\treturn $sql;\n}\n\nfunction createWhereClause($owner, $filter, $search, $daterange, $ok, $warning, $critical, $unknown)\n{\n\t$where_clause = \"\";\n\t\n\t// owner\n\tif($owner == \"owned\"){ $where_clause .= \" AND owner != ''\"; }\n\telseif($owner == \"not owned\"){ $where_clause .= \" AND owner = ''\"; }\n\n\t// advanced search (with *)\n\tif($search != \"\"){\n\t\t$like = \"\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\n\t\t$where_clause .= \" AND $filter LIKE '$like'\";\n\t}\n\n\t// daterange\n\tif($daterange != \"\"){\n\t\t$daterange_parts = explode(\" - \", $daterange);\n\t\t$start = $daterange_parts[0];\n\t\t$end = $daterange_parts[1];\n\n\t\t// modify start and end timestamp (1 Jan 1970 = -3600).\n\t\t// perhaps a little bug from DateRangePicker\n\t\t$start = strtotime($start);\n\t\t$start += 3600;\n\t\t$end = strtotime($end);\n\t\t$end += 86400 + 3600;\n\t\t$where_clause .= \" AND o_sec > $start AND o_sec < $end\";\n\t}\n\n\t// states\n\t$states_list = \"\";\n\tif($ok != \"\")\t\t{ $states_list .= \"0,\"; }\n\tif($warning != \"\")\t{ $states_list .= \"1,\"; }\n\tif($critical != \"\")\t{ $states_list .= \"2,\"; }\n\tif($unknown != \"\")\t{ $states_list .= \"3,\"; }\n\t$states_list = trim($states_list, \",\");\n\t\n\tif($states_list != \"\"){\n\t\t$where_clause .= \" AND state IN ($states_list)\";\n\t}\n\n\t$where_clause .= \" ORDER BY o_sec DESC LIMIT 500\";\n\treturn $where_clause;\n}\n\nfunction createDetailRow($event, $db_col_name, $row_name)\n{\n\tglobal $dateformat;\n\n\t// display a good date format\n\tif($db_col_name == \"o_sec\" || $db_col_name == \"l_sec\" || $db_col_name == \"a_sec\"){\n\t\tif($db_col_name == \"a_sec\" && $event[\"queue\"] == \"a\"){\n\t\t\treturn false;\n\t\t}\n\t\tif($db_col_name == \"a_sec\" && $event[$db_col_name] == 0){\n\t\t\t$event[$db_col_name] = \"\";\n\t\t}\n\t\t$event[$db_col_name] = date($dateformat, $event[$db_col_name]+0);\n\t}\n\n\t// display a good state format\n\tif($db_col_name == \"state\"){\n\t\tswitch($event[$db_col_name]){\n\t\t\tcase 0: $event[$db_col_name] = \"OK\"; break;\n\t\t\tcase 1: $event[$db_col_name] = \"WARNING\"; break;\n\t\t\tcase 2: $event[$db_col_name] = \"CRITICAL\"; break;\n\t\t\tcase 3: $event[$db_col_name] = \"UNKNOWN\"; break;\n\t\t}\n\t}\n\n\techo '<tr>';\n\t\techo '<th scope=\"row\">'.getLabel($row_name).'</th>';\n\t\techo '<td>'.$event[$db_col_name].'</td>';\n\techo '</tr>';\n}\n\nfunction details($selected_events, $queue)\n{\n\tglobal $database_ged;\n\n\t// get all needed infos into variables\n\t$value_parts = explode(\":\", $selected_events);\n\t$id = $value_parts[0];\n\t$ged_type = $value_parts[1];\n\n\t$sql = \"SELECT * FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = $id\";\n\t$result = sqlrequest($database_ged, $sql);\n\t$event = mysqli_fetch_assoc($result);\n\n\t// display event's details\n\techo '<table class=\"table table-hover table-condensed\">';\n\t\techo '<tbody>';\n\t\t\tcreateDetailRow($event, \"equipment\", \"label.host\");\n\t\t\tcreateDetailRow($event, \"host_alias\", \"label.host_alias\");\n\t\t\tcreateDetailRow($event, \"ip_address\", \"label.ip_address\");\n\t\t\tcreateDetailRow($event, \"service\", \"label.service\");\n\t\t\tcreateDetailRow($event, \"state\", \"label.state\");\n\t\t\tcreateDetailRow($event, \"description\", \"label.desc\");\n\t\t\tcreateDetailRow($event, \"occ\", \"label.occurence\");\n\t\t\tcreateDetailRow($event, \"o_sec\", \"label.o_time\");\n\t\t\tcreateDetailRow($event, \"l_sec\", \"label.l_time\");\n\t\t\tcreateDetailRow($event, \"a_sec\", \"label.a_time\");\n\t\t\tcreateDetailRow($event, \"hostgroups\", \"label.hostgroups\");\n\t\t\tcreateDetailRow($event, \"servicegroups\", \"label.servicegroups\");\n\t\t\tcreateDetailRow($event, \"src\", \"label.source\");\n\t\t\tcreateDetailRow($event, \"owner\", \"label.owner\");\n\t\t\tcreateDetailRow($event, \"comments\", \"label.comments\");\n\t\techo '</tbody>';\n\techo '</table>';\n}\n\nfunction edit($selected_events, $queue)\n{\n\tglobal $database_ged;\n\n\t// get all needed infos into variables\n\t$value_parts = explode(\":\", $selected_events);\n\t$id = $value_parts[0];\n\t$ged_type = $value_parts[1];\n\n\t$sql = \"SELECT comments FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = $id\";\n\t$result = sqlrequest($database_ged, $sql);\n\t$event = mysqli_fetch_assoc($result);\n\n\t$event[\"comments\"] = str_replace(\"\\'\", \"'\", $event[\"comments\"]);\n\t$event[\"comments\"] = str_replace(\"\\#\", \"#'\", $event[\"comments\"]);\n\n\techo \"\n\t<form id='edit-event-form'>\n\t\t<div class='form-group'>\n\t\t\t<label>\".getLabel(\"label.add_comment\").\"</label>\n\t\t\t<textarea id='event-comments' class='form-control textarea' rows='10'>\".$event[\"comments\"].\"</textarea>\n\t\t</div>\n\t</form>\";\n}\n\nfunction editEvent($selected_events, $queue, $comments)\n{\n\tglobal $database_ged;\n\n\t// get all needed infos into variables\n\t$value_parts = explode(\":\", $selected_events);\n\t$id = $value_parts[0];\n\t$ged_type = $value_parts[1];\n\n\t// format comment string to avoid errors\n\t$comments = str_replace(\"'\", \"\\'\", $comments);\n\t$comments = str_replace(\"#\", \"\\#\", $comments);\n\n\t$sql = \"UPDATE \".$ged_type.\"_queue_\".$queue.\" SET comments='$comments' WHERE id = $id\";\n\t$result = sqlrequest($database_ged, $sql);\n\tif($result){\n\t\tmessage(11, \" : \".getLabel(\"message.event_edited\"), \"ok\");\n\t} else {\n\t\tmessage(11, \" : \".getLabel(\"message.event_edited_error\"), \"danger\");\n\t}\n}\n\nfunction editAllEvents($selected_events, $queue, $comments)\n{\n\tglobal $database_ged;\n\n\t$success = true;\n\tforeach ($selected_events as $key => $value) {\n\t\t// get all needed infos into variables\n\t\t$value_parts = explode(\":\", $value);\n\t\t$id = $value_parts[0];\n\t\t$ged_type = $value_parts[1];\n\n\t\t// format comment string to avoid errors\n\t\t$comments = str_replace(\"'\", \"\\'\", $comments);\n\t\t$comments = str_replace(\"#\", \"\\#\", $comments);\n\n\t\t$sql = \"UPDATE \".$ged_type.\"_queue_\".$queue.\" SET comments='$comments' WHERE id = $id\";\n\t\t$result = sqlrequest($database_ged, $sql);\n\t\tif(!$result){\n\t\t\t$success = false;\n\t\t}\n\t}\n\n\t// display the final message\n\tif($success){\n\t\tmessage(11, \" : \".getLabel(\"message.event_edited\"), \"ok\");\n\t} else {\n\t\tmessage(11, \" : \".getLabel(\"message.event_edited_error\"), \"danger\");\n\t}\n}\n\nfunction ownDisown($selected_events, $queue, $global_action)\n{\n\tglobal $database_ged;\n\tglobal $array_ged_packets;\n\tglobal $path_ged_bin;\n\tglobal $array_serv_system;\n\n\tif(exec($array_serv_system[\"Ged agent\"][\"status\"])==NULL) {\n\t\treturn message(0,\" : ged daemon must be dead\",\"critical\");\n\t}\n\n\tif($global_action == 2){\n\t\t$owner = $_COOKIE['user_name'].\"@\".getenv(\"SERVER_NAME\");\n\t} else {\n\t\t$owner = \"\";\n\t}\n\n\tforeach ($selected_events as $value) {\n\t\t$value_parts = explode(\":\", $value);\n\t\t$id = $value_parts[0];\n\t\t$ged_type = $value_parts[1];\n\t\tif($ged_type == \"nagios\"){ $ged_type_nbr = 1; }\n\t\tif($ged_type == \"snmptrap\"){ $ged_type_nbr = 2; }\n\n\t\t$sql = \"SELECT * FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = $id\";\n\t\t$result = sqlrequest($database_ged, $sql);\n\t\t$event = mysqli_fetch_assoc($result);\n\n\t\t$ged_command = \"-update -type $ged_type_nbr \";\n\t\tforeach ($array_ged_packets as $key => $value) {\n\t\t\tif($value[\"type\"] == true){\n\t\t\t\tif($key == \"owner\"){\n\t\t\t\t\t$event[$key] = $owner;\n\t\t\t\t}\n\t\t\t\t$ged_command .= \"\\\"\".$event[$key].\"\\\" \";\n\t\t\t}\n\t\t}\n\t\t$ged_command = trim($ged_command, \" \");\n\n\t\tshell_exec($path_ged_bin.\" \".$ged_command);\n\t\tlogging(\"ged_update\",$ged_command);\n\t}\n}\n\nfunction acknowledge($selected_events, $queue)\n{\n\tglobal $database_ged;\n\tglobal $array_ged_packets;\n\tglobal $path_ged_bin;\n\tglobal $array_serv_system;\n\n\tif(exec($array_serv_system[\"Ged agent\"][\"status\"])==NULL) {\n\t\treturn message(0,\" : ged daemon must be dead\",\"critical\");\n\t}\n\n\t$owner = $_COOKIE['user_name'].\"@\".getenv(\"SERVER_NAME\");\n\n\tforeach ($selected_events as $value) {\n\t\t$value_parts = explode(\":\", $value);\n\t\t$id = $value_parts[0];\n\t\t$ged_type = $value_parts[1];\n\t\tif($ged_type == \"nagios\"){ $ged_type_nbr = 1; }\n\t\tif($ged_type == \"snmptrap\"){ $ged_type_nbr = 2; }\n\n\t\t$event_to_delete = [];\n\t\tarray_push($event_to_delete, $value);\n\n\t\t$sql = \"SELECT * FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = $id\";\n\t\t$result = sqlrequest($database_ged, $sql);\n\t\t$event = mysqli_fetch_assoc($result);\n\n\t\t$ged_command = \"-update -type $ged_type_nbr \";\n\t\tforeach ($array_ged_packets as $key => $value) {\n\t\t\tif($value[\"type\"] == true){\n\t\t\t\tif($key == \"owner\"){\n\t\t\t\t\t$event[$key] = $owner;\n\t\t\t\t}\n\t\t\t\t$ged_command .= \"\\\"\".$event[$key].\"\\\" \";\n\t\t\t}\n\t\t}\n\t\t$ged_command = trim($ged_command, \" \");\n\n\t\tshell_exec($path_ged_bin.\" \".$ged_command);\n\t\tlogging(\"ged_update\",$ged_command);\n\t\tdelete($event_to_delete, $queue);\n\t}\n}\n\nfunction delete($selected_events, $queue)\n{\n\tglobal $database_ged;\n\tglobal $array_ged_packets;\n\tglobal $path_ged_bin;\n\tglobal $array_serv_system;\n\n\tif(exec($array_serv_system[\"Ged agent\"][\"status\"])==NULL) {\n\t\treturn message(0,\" : ged daemon must be dead\",\"critical\");\n\t}\n\n\t$id_list = \"\";\n\tforeach ($selected_events as $value) {\n\t\t$value_parts = explode(\":\", $value);\n\t\t$id = $value_parts[0];\n\t\t$ged_type = $value_parts[1];\n\t\t$ged_type_nbr = 0;\n\t\tif($ged_type == \"nagios\"){ $ged_type_nbr = 1; }\n\t\tif($ged_type == \"snmptrap\"){ $ged_type_nbr = 2; }\n\n\t\t$sql = \"SELECT * FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = $id\";\n\t\t$result = sqlrequest($database_ged, $sql);\n\t\t$event = mysqli_fetch_assoc($result);\n\n\t\tif($queue == \"active\"){\n\t\t\t$ged_command = \"-drop -type $ged_type_nbr -queue $queue \";\n\t\t\tforeach ($array_ged_packets as $key => $value) {\n\t\t\t\tif($value[\"key\"] == true){\n\t\t\t\t\t$ged_command .= \"\\\"\".$event[$key].\"\\\" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\t$ged_command = trim($ged_command, \" \");\n\n\t\t\tshell_exec($path_ged_bin.\" \".$ged_command);\n\t\t\tlogging(\"ged_update\",$ged_command);\n\t\t} else {\n\t\t\t$id_list .= $id.\",\";\n\t\t}\n\t}\n\n\tif($queue == \"history\"){\n\t\t$id_list = trim($id_list, \",\");\n\t\t$ged_command = \"-drop -id \".$id_list.\" -queue history\";\n\n\t\tshell_exec($path_ged_bin.\" \".$ged_command);\n\t\tlogging(\"ged_update\",$ged_command);\n\t}\n}\n\n// Open Xml function\nfunction openXml($file=false)\n{\n\t$dom = new DOMDocument(\"1.0\",\"UTF-8\");\n\t$dom->preserveWhiteSpace = false;\n\t$dom->formatOutput = true;\n\tif($file)\n\t\t$dom->load($file);\n\treturn $dom;\n}\n\nfunction changeGedFilter($filter_name)\n{\n\t$file=\"../../cache/\".$_COOKIE[\"user_name\"].\"-ged.xml\";\n\n\tif(file_exists($file)){\n\t\t$xmlfilters = new DOMDocument(\"1.0\",\"UTF-8\");\n\t\t$xmlfilters->load($file);\n\n\t\t$root = $xmlfilters->getElementsByTagName(\"ged\")->item(0);\n\t\t$root->removeChild($root->getElementsByTagName('default')->item(0));\n\t\t$default = $xmlfilters->createElement(\"default\");\n\t\t$default = $root->appendChild($default);\n\t\t$default = $root->getElementsByTagName(\"default\")->item(0);\n\t\t$default->appendChild($xmlfilters->createTextNode($filter_name));\n\t\t$xmlfilters->save($file);\n\t}\n}\n\n// advanced search autocomplete\nfunction advancedFilterSearch($queue, $filter)\n{\n\tglobal $database_ged;\n\t$datas = array();\n\n\tif($filter == \"description\"){\n\t\techo json_encode($datas);\n\t\treturn false;\n\t}\n\n\t$gedsql_result1=sqlrequest($database_ged,\"SELECT pkt_type_id,pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100';\");\n\t\n\t\n\twhile($ged_type = mysqli_fetch_assoc($gedsql_result1)){\n\t\t$sql = \"SELECT DISTINCT $filter FROM \".$ged_type[\"pkt_type_name\"].\"_queue_\".$queue;\n\n\t\t$results = sqlrequest($database_ged, $sql);\n\t\twhile($result = mysqli_fetch_array($results)){\n\t\t\tif( !in_array($result[$filter], $datas) && $result[$filter] != \"\" ){\n\t\t\t\tarray_push($datas, $result[$filter]);\n\t\t\t}\n\t\t}\n\t}\n\n\techo json_encode($datas);\n}\n\n?>\n"], "fixing_code": ["<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Jean-Philippe LEVY\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\nglobal $path_nagios_bin;\nglobal $path_nagios_etc;\n\n$array_msg = array (\n\t0 => \"EON - Standard Error \",\n\t1 => \"EON - Could not connect to Database \",\n\t2 => \"EON - Could not find file \",\n\t3 => \"EON - Could not write in file (verify access) \",\n\t4 => \"EON - Could not get the value in parameters : \",\n\t5 => \"EON - Error uploading file \",\n\t6 => \"EON - Operation successful\",\n\t7 => \"EON - Form error \",\n\t8 => \"EON - User / Group \",\n\t9 => \"EON - Graph \",\n\t10 => \"EON - Name Error\",\n\t11 => \"EON - GED\");\n\n$array_modules = array (\"glpi\",\"ocsinventory-reports\");\n\t\n$array_tools = array (\n\t\"snmpwalk\"\t\t => \"tools/snmpwalk.php\",\n\t\"show interface\" => \"tools/interface.php\",\n\t\"show port\" \t => \"tools/port.php\");\n\n$array_group_mgt = array (\n    \"label.admin_group.select_add\" => \"add_group\",\n\t\"label.admin_group.select_del\" => \"delete_group\",\n\t\"label.admin_group.select_import\" => \"import_user\",\n\t);\n\n$array_user_mgt = array (\n\t\"label.admin_user.select_add\" => \"add_user\",\n\t\"label.admin_user.select_del\" => \"delete_user\");\n\n$array_bp_mgt = array (\n\t\"add\" \t\t\t\t=> \"add_process\",\n\t\"delete\" \t\t\t=> \"delete_process\",\n\t\"delete on cascade\" => \"cascade_delete\",\n\t\"delete all\" \t\t=> \"delete_all\",\n\t\"duplicate\" \t\t=> \"duplicate\",\n\t\"back-up file\" \t\t=> \"backup\");\n\n$array_ged_queues = array(\"active\",\"sync\",\"history\");\n\t\t\n$array_ged_types = array(\n\t0 => \"label.all\",\n\t1 => \"services\",\n\t2 => \"snmp trap\",\n\t/* 3 => \"performances\"); */\n);\n\n$array_ged_packets = array (\n\t\"equipment\"\t\t\t=>\tarray(\"type\"=>true,\"key\"=>true,\"col\"=>true),\n\t\"service\"\t\t\t=>\tarray(\"type\"=>true,\"key\"=>true,\"col\"=>true),\n\t\"state\"\t\t\t\t=>\tarray(\"type\"=>true,\"key\"=>true,\"col\"=>true),\n\t\"owner\"\t\t\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>true),\n\t\"description\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>true),\n\t\"ip_address\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"host_alias\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"hostgroups\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"servicegroups\"\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"comments\"\t\t\t=>\tarray(\"type\"=>true,\"key\"=>false,\"col\"=>false),\n\t\"original-time\"\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>true,\"db_col\"=>\"o_sec\"),\n\t\"last-time\"\t\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>true,\"db_col\"=>\"l_sec\"),\n\t\"acknowledge-time\"\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>false,\"db_col\"=>\"a_sec\"),\n\t\"occurences\"\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>true,\"db_col\"=>\"occ\"),\n\t\"source\"\t\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>false,\"db_col\"=>\"src\"),\n\t\"type\"\t\t\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>false),\n\t\"id\"\t\t\t\t=>\tarray(\"type\"=>false,\"key\"=>false,\"col\"=>false)\n);\n\n$array_ged_filters = array (\n\t\"equipment\" \t=> \"host\",\n\t\"service\" \t\t=> \"service\",\n\t\"description\" \t=> \"description\",\n\t\"hostgroups\" \t=> \"hostgroup\",\n\t\"servicegroups\" => \"servicegroup\",\n\t\"owner\" \t\t=> \"owner\",\n\t\"src\"\t\t\t=> \"source\"\n);\n\n$array_ged_states = array (\n\t\"ok\"\t\t=>\t\"0\",\n\t\"warning\"\t=>\t\"1\",\n\t\"critical\"\t=>\t\"2\",\n\t\"unknown\"\t=>\t\"3\",\n);\n\n$array_action_option = array(\n\t0 => \"action.details\",\n\t1 => \"action.edit\",\n\t2 => \"action.own\",\n\t3 => \"action.disown\",\n\t4 => \"action.ack\",\n);\n\n$array_resolve_action_option = array(\n\t0 => \"action.details\",\n\t5 => \"action.delete\",\n);\n\n$array_serv_system = array (\n\t\"Nagios\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x nagios\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start nagios ; sudo /bin/systemctl status nagios\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop nagios ; sudo /bin/systemctl status nagios\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart nagios ; sudo /bin/systemctl status nagios\",\n\t\t\t\"reload\" => \"sudo /bin/systemctl reload nagios ; sudo /bin/systemctl status nagios\",\n\t\t\t\"verify\" => \"$path_nagios_bin -v $path_nagios_etc\")),\n\t\"Ged agent\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x ged\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start gedd ; sudo /bin/systemctl status gedd\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop gedd ; sudo /bin/systemctl status gedd\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart gedd ; sudo /bin/systemctl status gedd\")),\n\t\"SNMP agent\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x snmpd\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start snmpd ; sudo /bin/systemctl status snmpd\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop snmpd ; sudo /bin/systemctl status snmpd\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart snmpd ; sudo /bin/systemctl status snmpd\",\n\t\t\t\"reload\" => \"sudo /bin/systemctl reload snmpd ; sudo /bin/systemctl status snmpd\")),\n\t\"SNMP trap agent\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x snmptrapd\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start snmptrapd ; sudo /bin/systemctl status snmptrapd\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop snmptrapd ; sudo /bin/systemctl status snmptrapd\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart snmptrapd ; sudo /bin/systemctl status snmptrapd\",\n\t\t\t\"reload\" => \"sudo /bin/systemctl reload snmptrapd ; sudo /bin/systemctl status snmptrapd\")),\n\t\"SNMP trap traductor\" => array (\n\t\t\"status\" => \"pidof -o $$ -o %PPID -x snmptt\",\n\t\t\"proc_act\" => array (\n\t\t\t\"start\" => \"sudo /bin/systemctl start snmptt ; sudo /bin/systemctl status snmptt\",\n\t\t\t\"stop\" => \"sudo /bin/systemctl stop snmptt ; sudo /bin/systemctl status snmptt\",\n\t\t\t\"restart\" => \"sudo /bin/systemctl restart snmptt ; sudo /bin/systemctl status snmptt\",\n\t\t\t\"reload\" => \"sudo /bin/systemctl reload snmptt ; sudo /bin/systemctl status snmptt\")),\n);\n\n$ged_active_intervals = array(\n\t\"day\" \t=> time() - 60*5,\n\t\"week\" \t=> time() - 60*15,\n\t\"month\" => time() - 60*30,\n\t\"year\"\t=> time() - 60*60,\n);\n\n$ged_history_intervals = array(\n\t\"day\" \t=> time() - 86400,\n\t\"week\" \t=> time() - 86400*7,\n\t\"month\" => time() - 86400*30,\n\t\"year\" \t=> time() - 86400*365,\n);\n\n$ged_sla_intervals = array(\n\t\"first\" \t=> 60*5,\n\t\"second\" \t=> 60*10,\n\t\"third\" \t=> 60*20,\n\t\"fourth\" \t=> \"\",\n);\n\n// sockets definition (for multi-backends !)\n$sockets = array(\n        \"unix::-1:/srv/eyesofnetwork/nagios/var/log/rw/live\"\n        //\"tcp:192.168.197.100:6557:\",\n        //\"tcp:192.168.197.102:6557:\"\n);\n\n?>\n", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Jean-Philippe LEVY\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\n# Internationalization\ninclude(\"Translator.class.php\");\n\n// Display Error Message \nfunction message($id, $text, $type){\n\t\n\tglobal $array_msg;\n\t\n\t// Get standard message if exists\n\tif(isset($array_msg[$id])) { $tempid=$array_msg[$id]; } \n\telse { $tempid=\"\"; }\n\t\n\t// Define the message type and icon\n\tswitch($type)\n\t{\n\t\tcase \"critical\":\n\t\t\t$alert_type = \"danger\";\n\t\t\t$alert_icon = \"fa-exclamation-circle\";\n\t\t\tbreak;\n\t\tcase \"warning\":\n\t\t\t$alert_type = \"warning\";\n\t\t\t$alert_icon = \"fa-warning\";\n\t\t\tbreak;\n   \t\tcase \"ok\":\n   \t\t\t$alert_type = \"success\";\n\t\t\t$alert_icon = \"fa-check-circle\";\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$alert_type = \"info\";\n\t\t\t$alert_icon = \"fa-info-circle\";\n\t\t\tbreak;\n\t}\n\n\t// Display the message\n\techo \"<p class='alert alert-dismissible alert-\".$alert_type.\" fade in'>\n\t\t\t<button type='button' class='close' data-dismiss='alert' aria-label='Close'>\n\t\t\t  <span aria-hidden='true'>&times;</span>\n\t\t\t</button>\n\t\t\t<i class='fa \".$alert_icon.\"'></i> $tempid $text\n\t\t  </p>\";\n}\n\n// Connect to Database\nfunction sqlrequest($database,$sql,$id=false,$prepare=false){\n\n\t// Get the global value\n\tglobal $database_host;\n\tglobal $database_username;\n\tglobal $database_password;\n\n\t$connexion = mysqli_connect($database_host, $database_username, $database_password, $database);\n\tif (!$connexion) {\n\t\techo \"<ul>\";\n\t\techo \"<li class='msg_title'>Alert EyesOfNetwork - Message EON-database connect</li>\";\n\t\techo \"<li class='msg'> Could not connect to database : $database ($database_host)</li>\";\n\t\techo \"</ul>\";\n\t\texit(1);\n\t}\n\n\tif ( $database == \"eonweb\" ) {\n\t\t// Force UTF-8\n\t\tmysqli_query($connexion, \"SET NAMES 'utf8'\");\n\t}\n\t\n\tif(is_array($prepare)) {\n\t\t$stmt = mysqli_prepare($connexion,$sql);\n\t\t\n\t\tif(isset($prepare[0]) && isset($prepare[1])) {\n\t\t\t$ref = new ReflectionClass('mysqli_stmt');\n\t\t\t$method = $ref->getMethod(\"bind_param\");\n\t\t\t$method->invokeArgs($stmt,$prepare);\n\t\t}\n\t\t\n\t\tmysqli_stmt_execute($stmt);\n\t\t$result = mysqli_stmt_get_result($stmt);\n\t} else {\n\t\t$result=mysqli_query($connexion, \"$sql\");\n\t}\n\t\t\n\tif($id==true)\n\t\t$result=mysqli_insert_id($connexion);\n\t\t\n\tmysqli_close($connexion);\n\treturn $result;\n}\n\n// Display array value\nfunction display_value($value, $key){\n\techo \"$value\\n\";\n}\n\n// Function Edit and Modify a file\nfunction filemodify($path,$get=false){\n\tif(is_writable($path)) {\n\t\n\t\t// Test If Update or Display.\n\t\tif (isset($_POST['maj'])) {\n\t\t\tif (!$fconf = fopen($path, \"w\")) message(2,$path,\"critical\");\n\t\t\t// Write the change\n\t\t\tif (fwrite ($fconf, str_replace(\"\\r\\n\", \"\\n\", $_POST['maj'])) === FALSE) message(3,$path,\"critical\");\n\t\t\telse { \n\t\t\t\tmessage(6,\" : File updated\",\"ok\");\n\t\t\t}\n\t\t\tfclose ($fconf);\n\t\t\tif (!$fconf = fopen($path, \"r\")) message(2,$path,\"critical\");\n\t\t}\n\t\telse if (!$fconf = fopen($path, \"r\")) message(2,$path,\"critical\");\n\n\t\t// Display the Text Area and button\n\t\techo \"<form method='post' action='./index.php\";\n\t\tif($get)\n\t\t\techo \"?file=$get\";\n\t\techo \"'>\";\n\t\techo '<div class=\"form-group\">';\n\t\techo \"<textarea class='form-control textarea' cols='100' rows='20' name='maj' scrolling='no'>\";\n\t\t\tprint file_get_contents($path);\n\t\techo \"</textarea>\";\n\t\techo '</div>';\n\t\techo '<div class=\"form-group\">';\n\t\techo \"<input class='btn btn-primary' type='submit' value='\".getLabel(\"action.update\").\"'>\";\n\t\techo '</div>';\n\t\techo \"</form>\";\n\t\tfclose ($fconf);\n\t}\n\telse message(3,$path,\"critical\");\n}\n\n// Host List form Nagios\nfunction get_host_list_from_nagios($field=false, $queue = false){\n\tglobal $database_lilac;\n\tglobal $database_ged;\n\t$hosts=array();\n\n\tif($field && $field != 'owner'){\n\t\tswitch ($field) {\n\t\t\tcase 'service': $column = 'description'; break;\n\t\t\tcase 'description': echo json_encode($hosts); return; break;\n\t\t\tdefault: $column = 'name'; break;\n\t\t}\n\t\t$request=\"SELECT DISTINCT $column FROM nagios_$field ORDER BY $column\";\n\t\t$db = $database_lilac;\n\t} elseif ($field && $field === 'owner') {\n\t\t$request=\"SELECT DISTINCT owner FROM nagios_queue_$queue WHERE owner != '' ORDER BY owner\";\n\t\t$db = $database_ged;\n\t}\n\telse {\n\t\t$request=\"SELECT name FROM nagios_host\n\t\tUNION SELECT name from nagios_hostgroup\n\t\tUNION SELECT name from nagios_service_group\n\t\tORDER BY name\";\n\t\t$db = $database_lilac;\n\t}\n\n\t$result=sqlrequest($db,$request);\n \twhile ($line = mysqli_fetch_array($result)){ \n\t\tarray_push($hosts, $line[0]);\n\t}\n\techo json_encode($hosts);\n}\n\n// Host and Address list from nagios. //TODO send the adress\nfunction get_host_list(){\n\tglobal $database_lilac;\n\t$hosts=array();\n\n\t$result=sqlrequest($database_lilac,\"SELECT name,address FROM nagios_host ORDER BY name\");\n\n \twhile ($line = mysqli_fetch_array($result)){ \n\t\t$hosts[]=$line[0];\n\t\t$hosts[]=$line[1];\n\t}\n\techo json_encode($hosts);\n}\n\n// Host and Address listbox from nagios. //TODO send the adress\nfunction get_host_listbox_from_nagios(){\n\tglobal $database_lilac;\n\t\n\t// create input autocomplete with all nagios host values\n\techo \"<label>Host</label>\";\n\t$result=sqlrequest($database_lilac,\"SELECT DISTINCT name FROM nagios_host UNION ALL SELECT DISTINCT address FROM nagios_host\");\n\t$input = \"<input id='host_list' class='form-control' type='text' name='host_list' onFocus='$(this).autocomplete({source: [\";\n\twhile ($line = mysqli_fetch_array($result))\n\t{\n\t\t$input .= '\"'.$line[0].'\",';\n\t}\n\t$input = rtrim($input, \",\");\n\t$input .= \"]})'>\";\n\t\n\techo '<div class=\"input-group\">';\n\techo \t$input;\n\techo \t'<span class=\"input-group-btn\">\n\t\t\t\t<input class=\"btn btn-primary\" type=\"submit\" name=\"run\" value=\"'.getLabel(\"action.run\").'\" >\n\t\t\t</span>\n\t\t\t';\n\techo '</div>';\n}\n\n// Host list from CACTI\nfunction get_title_list_from_cacti(){\n\n\tglobal $database_cacti;\n\n\t$titles=array();\n\t$request=\"SELECT DISTINCT graph_templates_graph.title FROM graph_local,graph_templates_graph WHERE graph_templates_graph.local_graph_id=graph_local.id ORDER BY title\";\n\t$result=sqlrequest($database_cacti,$request);\n\twhile ($line = mysqli_fetch_array($result)){\n\t$line[0]=str_replace(\"|host_description| - \",\"\",$line[0]);\n\t\t$titles[]=$line[0];\n\t}\n\techo json_encode($titles);\n}\n\n// Host listbox from CACTI\nfunction get_host_listbox_from_cacti(){\n\t\n\tglobal $database_cacti;\n\t\n\t$ref = \"\";\n\tif( isset($_GET['host']) ){\n\t\t$ref = $_GET['host'];\n\t}\n\t\n\t$result=sqlrequest($database_cacti,\"SELECT DISTINCT host.id,hostname,description FROM host INNER JOIN graph_local ON host.id = graph_local.host_id ORDER BY hostname ASC\");\n\techo \"<SELECT name='host' class='form-control' size=7>\";\n        while ($line = mysqli_fetch_array($result))\n        {\n\t\t\techo \"<OPTION value='$line[0]' \";\n\t\t\tif($ref == $line[0]){echo 'selected=\"selected\"';}\n\t\t\techo \">&nbsp;$line[1] ($line[2])&nbsp;</OPTION>\";\n        }\n        echo \"</SELECT><br>\";\n}\n\n// system function : CUT\nfunction cut($string, $width, $padding = \"...\"){\n    return (strlen($string) > $width ? substr($string, 0, $width-strlen($padding)).$padding : $string);\n} \n\n// Get graph from CACTI\nfunction get_graph_listbox_from_cacti(){\n\t\n\tglobal $database_cacti;\n\t\n\t$ref = \"\";\n\tif( isset($_GET['graph']) ){\n\t\t$ref = $_GET['graph'];\n\t}\n\t\n\t$result=sqlrequest($database_cacti,\"SELECT DISTINCT graph_templates.id,name FROM graph_templates INNER JOIN graph_local ON graph_local.graph_template_id = graph_templates.id ORDER BY name ASC\");\n\techo \"<SELECT name='graph' class='form-control' size=7>\";\n\twhile ($line = mysqli_fetch_array($result))\n\t{\n\t\techo \"<OPTION value='$line[0]' \";\n\t\tif($ref == $line[0]){echo 'selected=\"selected\"';}\n\t\techo \">&nbsp;$line[1]&nbsp;</OPTION>\";\n\t}\n\techo \"</SELECT><br>\";\n}\n\n// Display TOOL list\nfunction get_tool_listbox(){\n\t// Get the global table\n\tglobal $array_tools;\n\t\n\techo \"<label>\".getLabel(\"label.tool_all.tool\").\"</label>\";\t\n\n\t// Get the first array key\n\treset($array_tools);\n\n\t// Display the list of tool\n\techo \"<SELECT id='tool_list' name='tool_list' class='form-control'>\";\n \twhile (list($tool_name, $tool_url) = each($array_tools)) \n\t{\n\t\techo \"<OPTION value='$tool_url'>$tool_name</OPTION>\";\n\t}\n\techo \"</SELECT>\";\n}\n\n// Display min and max port value for show port tool\nfunction get_toolport_ports(){\n\tglobal $default_minport;\n\tglobal $default_maxport;\n\t\n\techo \"<label>Port min - Port max</label>\";\n\techo \"<div class='row'><div class='col-md-4'><input id='min_port' class='form-control' type=text name='min_port' value=$default_minport size=8></div>\";\n\techo \"<div class='col-md-4'><input id='max_port' class='form-control' type=text name='max_port' value=$default_maxport size=8></div></div>\";\n}\n\n// Display User list\nfunction get_user_listbox(){\n\techo \"<h2>Select user : </h2>\";\n        global $database_eonweb;\n\n        $result=sqlrequest($database_eonweb,\"SELECT DISTINCT user_name,user_id,group_id,user_descr FROM users ORDER BY user_name\");\n        print \"<SELECT name='users_list' class='select' size=15>\";\n        while ($line = mysqli_fetch_array($result))\n        {\n                print \"<OPTION value='$line[1]'>$line[0] : $line[3]</OPTION>\";\n        }\n        print \"</SELECT>\";\n}\n\n// Retrive form data\nfunction retrieve_form_data($field_name,$default_value){\n\tif (!isset ($_GET[$field_name]))\n\t\tif (!isset ($_POST[$field_name]))\n\t\t\treturn $default_value;\n\t\telse\n\t\t\treturn $_POST[$field_name];\t\n\telse \n\t\treturn $_GET[$field_name];\n}\n\n// Delete accents\nfunction stripAccents($str, $charset='utf-8'){\n    $str = htmlentities($str, ENT_NOQUOTES, $charset);\n\n    $str = preg_replace('#\\&([A-za-z])(?:acute|cedil|circ|grave|ring|tilde|uml)\\;#', '\\1', $str);\n    $str = preg_replace('#\\&([A-za-z]{2})(?:lig)\\;#', '\\1', $str); \n    $str = preg_replace('#\\&[^;]+\\;#', '', $str); \n\n    return $str;\n}\n\n// Add Logs\nfunction logging($module,$command,$user=false){\n\tglobal $database_eonweb;\n\tglobal $dateformat;\n\tif($user)\n\t\tsqlrequest($database_eonweb,\"insert into logs values ('','\".time().\"','$user','$module','$command','\".$_SERVER[\"REMOTE_ADDR\"].\"');\");\n\telseif(isset($_COOKIE['user_name']))\n\t\tsqlrequest($database_eonweb,\"insert into logs values ('','\".time().\"','\".$_COOKIE['user_name'].\"','$module','$command','\".$_SERVER[\"REMOTE_ADDR\"].\"');\");\n}\n\n// Time\nfunction getmtime(){\n  \n    $temps = microtime();\n    $temps = explode(' ', $temps);\n    return $temps[1] + $temps[0];\n \n}\n\n// Get the informations of nagios' config's file.\nfunction getBpProcess(){\n\t\n\tglobal $path_nagiosbpcfg ;\n\tglobal $path_nagiosbpcfg_lock ;\n\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file\n    fputs($fp,getmypid());\n    fclose($fp);\n\n    $tabProcess = array() ;\n\t$lines = file($path_nagiosbpcfg);\n\tif (!$lines) {\n\t\tunlink($path_nagiosbpcfg_lock);\t//Unlock the file\n\t\tmessage(2,$path_nagiosbpcfg,\"critical\");\n\t}\n\tforeach( $lines as $line) {\n\t\t\n\t\tif ( trim($line) == \"# Fin def\") {\t//End of definition\n\t\t\t$tabProcess[] = $tabProp ;\n\t\t\t$tabProp = null ;\n\t\t}\n\t\telseif ( preg_match(\"/^# (ET|OU|MIN)$/\", $line, $match)) {\n\t\t\t$tabProp['type'] = $match[1];\t//Get the type of the process\n\t\t}\n\t\telseif ( preg_match(\"/^display (\\d)*/\", $line, $match)) {\t//Get the prirority\n\t\t\t$tabProp['prio'] = $match[1] ;\n\t\t\t$tab = explode(\";\",$line);\n\t\t\t$tabProp['pnom'] = $tab[2];\n\t\t}\n\t\telseif ( strpos($line,\"info_url\") !== false) {\t//Get the link\n\t\t\t$tab = explode(\";\", $line);\n\t\t\t$tabProp['url'] = $tab[count($tab)-1] ;\n\t\t}\n\t\telseif ( strpos($line,\"external_info\") !== false) {\t//Get the command\n\t\t\t$tab = explode(\";\", $line);\n\t\t\t$tabProp['cmd'] = $tab[count($tab)-1] ;\n\t\t}\n\t\telseif ( strpos($line,\"=\") !== false) {\t//Get the name, the minimun, and the services\n\t\t\t$tab = explode(\"=\", $line);\n\t\t\t$tabProp['nom'] = trim($tab[0]);\n\t\t\tif ($tabProp['type'] == \"MIN\") {\n\t\t\t\t$tabProp['min'] = (int)trim($tab[1]);\n\t\t\t\t$tab = explode(\":\",$tab[1]);\n\t\t\t\t$tabProp['serv'] = $tab[1];\n\t\t\t}\n\t\t\telse $tabProp['serv'] = $tab[1];\n\t\t}\n\t}\n\n\tunlink($path_nagiosbpcfg_lock);\t//Unlock the file\n\treturn $tabProcess ;\n}\n\n// Wait the end of modification of a file\nfunction wait($file){\n\t$retry = 0 ;\n\n\twhile (file_exists($file)){\n\t\tif($retry>20) { die (\"$file is already in use!\"); }\n        $retry++;\n        sleep(1);\n\t}\n}\n\n// Insert a value in an array\nfunction array_push_after($src,$in,$pos){\n    if(is_int($pos)) $R=array_merge(array_slice($src,0,$pos+1), $in, array_slice($src,$pos+1));\n    else{\n        foreach($src as $k=>$v){\n            $R[$k]=$v;\n            if($k==$pos)$R=array_merge($R,$in);\n        }\n    }return $R;\n}\n\n//Format the nagios.conf file\nfunction formatFile(){\n\tglobal $path_nagiosbpcfg;\n\tglobal $path_nagiosbpcfg_lock;\n\tglobal $database_nagios;\n\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file.\n\tfputs($fp,getmypid());\n\tfclose($fp);\n\n\t$lines = file($path_nagiosbpcfg);\n\t$file[0] = \"# Checked\\n\";\n\tif ( empty($lines) || trim($lines[0]) != \"# Checked\"){\t//Not checked. Let's read it !\n\n\t\twrite_file($path_nagiosbpcfg,array_merge($file,$lines),\"w\",\" : File updated\");\n\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp\");\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp_services\");\n\t\tsqlrequest($database_nagios,\"DELETE FROM bp_links\");\n\t\t$tabName = array();\n\t\t$tabDef = array();\t\t\t\n\n\t\tforeach($lines as $i => $line){\n\t\t\tif ($line[0] == \"#\"){\n\t\t\t\tunset($lines[$i]); continue;\t//A commented line. Delete.\n\t\t\t}\n\t\t\tif (($posComment = strpos($line,\"#\")) !== false){\t//Found a commentary. Delete.\n\t\t\t\t$line = substr($line,0,$posComment);\t\n\t\t\t}\n\t\t\t//No more commentary in the file\n\n\t\t\tif (strpos($line,\"=\") !== false){\t//Found a name\n\t\t\t\t$tab = explode(\"=\",$line);\n\t\t\t\t$tabName[] = trim($tab[0]);\t//Keep the name\n\t\t\t\t$vals = explode(\"=\",$line);\n\t\t\t\t$tabDef[] = $vals[1];\t//Keep the whole line\n\t\t\t\tunset($lines[$i]);\n\t\t\t}\n\t\t}\n\n\t\t//There we got all the names.\n\t\t$serv = null;\n\t\tforeach($tabName as $i => $name){\n\t\t\t$type = $prio = $url = $cmd = $val = $desc = \"\" ;\n\t\t\t//Try to get the type. Default ET\n\t\t\tif ( strpos($tabDef[$i], \":\")){\n\t\t\t\t$vals = explode(\"of:\",$tabDef[$i]);\n\t\t\t\t$val = trim($vals[0]);\n\t\t\t\t$type = \"MIN\";\n\t\t\t\t$serv = $vals[1];\n\t\t\t}\n\t\t\telse {\n\t\t\t\tif ( strpos($tabDef[$i], \"&\")) $type = \"ET\";\n\t\t\t\telseif ( strpos($tabDef[$i], \"|\")) $type = \"OU\";\n\t\t\t\telse $type = \"ET\";\n\t\t\t\t$serv = $tabDef[$i];\n\t\t\t}\n\t\t\t\n\t\t\tforeach($lines as $j=>$line){\n\t\t\t\tif (strpos($line,\"$name;\") !== false){\t//We found a name\n\t\t\t\t\tif ( preg_match(\"/^display (\\d)+/\", $line,$match)){\n\t\t\t\t\t\t$prio = $match[1];\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$desc = trim($vals[2]);\n\t\t\t\t\t} \n\t\t\t\t\telseif ( strpos($line,\"info_url\") !== false) {\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$url = trim($vals[1]);\n\t\t\t\t\t}\n\t\t\t\t\telseif ( strpos($line,\"external_info\") !== false) {\n\t\t\t\t\t\t$vals = explode(\";\",$line);\n\t\t\t\t\t\t$cmd= trim($vals[1]);\n\t\t\t\t\t}\n\t\t\t\t\tunset($lines[$j]);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\tif ($prio == \"\" ) $prio = \"null\";\n\t\t\tsqlrequest($database_nagios,\"INSERT INTO bp VALUES('$name','$desc','$prio','$type','$cmd','$url','$val','1')\");\n\n\t\t\tswitch ($type){\n\t\t\t\tcase \"ET\": $vals = explode(\"&\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"OU\": $vals = explode(\"|\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t\tcase \"MIN\": $vals = explode(\"+\",$serv);\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t\tforeach ($vals as $v) {\n\t\t\t\tif ( strpos($v,\";\") !== false ){\n\t\t\t\t\t$val = explode(\";\",$v); $host=trim($val[0]); $service=trim($val[1]);\n\t\t\t\t\tsqlrequest($database_nagios,\"INSERT INTO bp_services VALUES('','$name','$host','$service')\");\n\t\t\t\t}\n\t\t\t\telse sqlrequest($database_nagios,\"INSERT INTO bp_links VALUES('','$name','\".trim($v).\"')\");\n\t\t\t}\n\t\t}\n\t\tmessage(6,\" : Database updated with configuration file\",\"ok\");\n\t}\n\tunlink($path_nagiosbpcfg_lock);\n}\n\n//Write in a file, with error or succes message\nfunction write_file($file,$contenu,$mode,$message = null){\n\tif(is_writable($file)){\n\t\t$error = 0 ;\n\t\tif (!$fconf = fopen($file, $mode)) message(2,$file,\"critical\");\n\t\t\n\t\tif ( is_array($contenu)){\n\t\t\tforeach ($contenu as $line) {\n\t\t\t\tif (fwrite ($fconf, $line) === FALSE) $error = 1 ;\n\t\t\t}\n\t\t}\n\t\telse if (fwrite ($fconf, $contenu) === FALSE) $error = 1 ;\n\n\t\tif ($error) message(3,$file,\"critical\");\n\t\telse if ( $message != null )message(6,$message,\"ok\");\n\t\tfclose ($fconf);\n\t}\n\telse \n\t\tmessage(3,$file,\"critical\");\n}\n\n// MySQL request in php array \nfunction sqlArrayNagios($request){\n\tglobal $database_nagios;\n\t$result = sqlrequest($database_nagios,$request);\n\t$values = array();\n\tfor ($i=0; $i<mysqli_num_rows($result); ++$i) $values[] = mysqli_fetch_assoc($result);\n\treturn $values ;\n}\n\n// NagiosBP file backup\nfunction backup_file($start){\n\tglobal $path_nagiosbpcfg;\n\tglobal $path_nagiosbpcfg_bu;\n\n\tfor ($i = $start; $i > 0; $i--){\n\t\tif ( file_exists($path_nagiosbpcfg_bu.$i)){\n\t\t\tif ( $i == $start) unlink($path_nagiosbpcfg_bu.$i);\n\t\t\telse {\n\t\t\t\trename($path_nagiosbpcfg_bu.$i,$path_nagiosbpcfg_bu.($i+1));\n\t\t\t}\n\t\t}\n\t}\n\tcopy($path_nagiosbpcfg,$path_nagiosbpcfg_bu.'1');\n}\n\n// NagiosBP file creation\nfunction buildFile(){\n\n\tglobal $path_nagiosbpcfg_lock;\n\twait($path_nagiosbpcfg_lock);\t//Wait for the file to not be in use.\n\t$fp=@fopen($path_nagiosbpcfg_lock,\"w\");\t//Lock the file.\n\tfputs($fp,getmypid());\n\tfclose($fp);\n\n\tglobal $max_bu_file;\n\tbackup_file($max_bu_file);\n\tglobal $path_nagiosbpcfg;\n\t$request = \"SELECT * FROM bp WHERE `name` NOT IN (SELECT bp_name FROM bp_links) AND `is_define`='1'\";\n\t$values = sqlArrayNagios($request);\n\t$prevRequest = str_replace(\"*\",\"name\",$request); \n\n\t$file[] = \"# Checked\";\n\tforeach( $values as $metier){\n\t\t$writenBP[] = $metier['name'];\n\t  \tswitch( $metier['type']) {\n\t   \t\tcase \"ET\" : $sep = \"&\";break;\n\t   \t\tcase \"OU\" : $sep = \"|\";break;\n\t   \t\tcase \"MIN\" : $sep = \"+\";break;\n\t   \t}\n\t   \t$result = sqlArrayNagios(\"SELECT host,service FROM bp_services WHERE bp_name='$metier[name]'\");\n\t   \t$strServ = $string = null;\n\t   \tforeach($result as $serv){\n\t   \t\tif ( is_null($strServ) ) {\n\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t   \t\t\t$strServ = \"$serv[host];$serv[service]\";\n\t   \t\t}\n\t   \t\telse $strServ .= \" $sep $serv[host];$serv[service]\";\n\t   \t}\n\t   \t$string .= $strServ.\"\\n\";\n\t   \tif ( $metier['priority'] != \"null\") $string .= \"display $metier[priority];$metier[name];$metier[description]\\n\";\n\t   \tif ( $metier['command'] != \"\") $string .= \"external_info $metier[name];$metier[command]\\n\";\n\t   \tif ( $metier['url'] != \"\") $string .= \"info_url $metier[name];$metier[url]\\n\";\n\t   \t$file[] = $string;\n    }\n\n\tif ( $values ) build($prevRequest,$file,$writenBP);\n    write_file($path_nagiosbpcfg,$file,\"w\",\" : File updated\");\n    unlink($path_nagiosbpcfg_lock);\n}\n\n// Nagiosbp build\nfunction build($pRequest,&$file,$pWritenBP){\n\n\t$values = sqlArrayNagios($pRequest);\n\tunset($r);\n\tforeach( $values as $v){\n\t\tif ( !isset($r) ) $r = \"SELECT bp_name FROM bp_links WHERE (bp_link='$v[name]' \";\n\t\telse $r .= \" OR bp_link='$v[name]'\";\n\t}\n\t$values = sqlArrayNagios($r.\")\");\n\n\tif ($values){\n\t\tunset($r);\n\t\tforeach ($values as $v) {\n\t\t\tif ( !isset($r) ) $r = \"SELECT * FROM bp WHERE (name='$v[bp_name]' \";\n\t\t\telse $r .= \" OR name='$v[bp_name]'\";\n\t\t}\n\t\t$values = sqlArrayNagios($r.\") AND `is_define`='1'\");\n\t\t/*$request = \"SELECT * FROM bp WHERE `name` IN (SELECT bp_name FROM bp_links WHERE bp_link IN ($pRequest)) AND `is_define`='1'\";\n\t\t$values = sqlArrayNagios($request);\n\t\tsql takes to much time with this type of request. We split it in multiple request instead.*/\n\t\t$prevRequest = str_replace(\"*\",\"name\",$r.\") AND `is_define`='1'\");\n\t\t$writenBP = $pWritenBP;\n\n\n\t\tforeach ($pWritenBP as $r) {\n\t\t\tif ( !isset($reqC)) $reqC = \"SELECT COUNT(bp_name) AS nbr FROM bp_links WHERE (bp_link='$r' \";\n\t\t\telse $reqC .= \" OR bp_link='$r'\";\n\t\t}\n\n\t\tforeach( $values as $metier){\n\t\t\tif (in_array($metier, $pWritenBP)) continue;\n\t\t\t\n\t\t\t$requestC = $reqC.\") AND bp_name='$metier[name]'\";\n\t\t\t$count = sqlArrayNagios($requestC);\n\t\t\t$cnt = sqlArrayNagios(\"SELECT COUNT(bp_name) AS nbr FROM bp_links WHERE bp_name='$metier[name]'\");\n\t\t\t\n\t\t\tif ( $count[0]['nbr'] == $cnt[0]['nbr']){\n\t\t\t\t$writenBP[] = $metier['name'];\n\t\t\t  \tswitch( $metier['type']) {\n\t\t\t   \t\tcase \"ET\" : $sep = \"&\";break;\n\t\t\t   \t\tcase \"OU\" : $sep = \"|\";break;\n\t\t\t   \t\tcase \"MIN\" : $sep = \"+\";break;\n\t\t\t   \t}\n\t\t\t   \t$result = sqlArrayNagios(\"SELECT host,service FROM bp_services WHERE bp_name='$metier[name]'\");\n\t\t\t   \t$strServ = $string = null;\n\n\t\t\t   \tforeach($result as $serv){\n\t\t\t   \t\tif ( is_null($strServ) ) {\n\t\t\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t\t\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t\t\t   \t\t\t$strServ = \"$serv[host];$serv[service]\";\n\t\t\t   \t\t}\n\t\t\t   \t\telse $strServ .= \" $sep $serv[host];$serv[service]\";\n\t\t\t   \t}\n\t\t\t   \t$result = sqlArrayNagios(\"SELECT bp_link FROM bp_links WHERE bp_name='$metier[name]'\");\n\t\t\t   \tforeach($result as $serv){\n\t\t\t   \t\tif ( is_null($strServ) ) {\n\t\t\t   \t\t\t$string = \"\\n#\\n# Name : $metier[name]\\n# Type : $metier[type]\\n$metier[name] = \";\n\t\t\t   \t\t\tif ( $metier['type'] == \"MIN\") $string .= \"$metier[min_value] of: \";\n\t\t\t   \t\t\t$strServ = \"$serv[bp_link]\";\n\t\t\t   \t\t}\n\t\t\t   \t\telse $strServ .= \" $sep $serv[bp_link]\";\n\t\t\t   \t}\n\t\t\t   \t$string .= $strServ.\"\\n\";\n\t\t\t   \tif ( $metier['priority'] != \"null\") $string .= \"display $metier[priority];$metier[name];$metier[description]\\n\";\n\t\t\t   \tif ( $metier['command'] != \"\") $string .= \"external_info $metier[name];$metier[command]\\n\";\n\t\t\t   \tif ( $metier['url'] != \"\") $string .= \"info_url $metier[name];$metier[url]\\n\";\n\t\t\t   \t$file[] = $string;\n\t\t\t}\n\t    }\n\n\t    build($prevRequest,$file,$writenBP);\n\t}\n}\n\n// Ldap escape special caracters\nfunction ldap_escape ($str){\n\n\t$str = trim($str);\n\n\tif ( isset($str) ) {\n\t\t$str = str_replace(\"\\\\\", \"\\\\\\\\\", $str);\n\t\t$str = str_replace(\"'\", \"\\'\", $str);\n\t\t$str = str_replace('\"', '\\\"', $str);\n\t}\n\n\treturn $str;\n\n}\n\n// User creation\nfunction insert_user($user_name, $user_descr, $user_group, $user_password1, $user_password2, $user_type, $user_location, $user_mail, $user_limitation, $message, $in_nagvis = false, $in_cacti = false, $nagvis_group){\n\tglobal $database_host;\n\tglobal $database_cacti;\n\tglobal $database_username;\n\tglobal $database_password;\n\n\tglobal $database_eonweb;\n\tglobal $database_lilac;\n\t$user_id=null;\n\n\t// Check if user exist\n\t$user_exist=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT count('user_name') from users where user_name='$user_name';\"),0);\n\n\t// Check user descr\n\tif($user_descr==\"\")\n\t\t$user_descr=$user_name;\n\n\tif($user_location != \"\" && $user_location != null){\n\t\tif( strpos($user_location, \" -- \") !== false && strpos($user_location, \"|\") !== false ){\n\t\t\t$user_location_parts = explode(\" -- \", $user_location);\n\t\t\t$user_loc = explode(\"|\", $user_location_parts[1]);\n\t\t\t$user_dn_name = $user_loc[0];\n\t\t\t$user_name = $user_dn_name;\n\t\t\t$user_location = $user_loc[1];\n\t\t}\n\t\telse{\n\t\t\t$user_location = $user_location;\n\t\t}\n\t}\n\t\n\tif (($user_name != \"\") && ($user_name != null) && ($user_exist == 0)) {\n\t\tif (($user_password1 != \"\") && ($user_password1 != null) && ($user_password1 == $user_password2)) {\n\t\t\t$user_password = md5($user_password1);\n\t\t\t\n\t\t\t// Insert into eonweb\n\t\t\tsqlrequest(\"$database_eonweb\",\"INSERT INTO users (user_name,user_descr,group_id,user_passwd,user_type,user_location,user_limitation) VALUES('$user_name', '$user_descr', '$user_group', '$user_password', '$user_type', '$user_location','$user_limitation')\");\n\t\t\t$user_id=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT user_id FROM users WHERE user_name='$user_name'\"),0,\"user_id\");\n\t\t\t$group_name=mysqli_result(sqlrequest(\"$database_eonweb\",\"SELECT group_name FROM groups WHERE group_id='$user_group'\"),0,\"group_name\");\n\n\t\t\t// Insert into lilac\n\t\t\t$lilac_period=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_timeperiod limit 1\"),0,\"id\");\n\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact (id,name,alias,email,host_notifications_enabled,service_notifications_enabled,host_notification_period,service_notification_period,host_notification_on_down,host_notification_on_unreachable,host_notification_on_recovery,host_notification_on_flapping,service_notification_on_warning,service_notification_on_unknown,service_notification_on_critical,service_notification_on_recovery,service_notification_on_flapping,can_submit_commands,retain_status_information,retain_nonstatus_information,host_notification_on_scheduled_downtime) VALUES('','$user_name','$user_descr','$user_mail', 1, 1, '$lilac_period', '$lilac_period', 1, 1, 1, 1, 1, 1, 1, 1, 1 ,1 ,1, 1, 1);\");\n\n\t\t\t// Lilac contact_group_member\n\t\t\t$lilac_contactgroupid=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_contact_group WHERE name='$group_name'\"),0,\"id\");\n\t\t\t$lilac_contactid=mysqli_result(sqlrequest(\"$database_lilac\",\"SELECT id FROM nagios_contact where name='$user_name'\"),0,\"id\");\n\t\t\tif($lilac_contactgroupid!=\"\" and $lilac_contactid!=\"\" and $user_limitation!=\"1\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_group_member (contactgroup, contact) VALUES ('$lilac_contactgroupid', '$lilac_contactid')\");\n\n\t\t\t// Insert into nagvis\n\t\t\tif($in_nagvis == \"yes\"){\n\t\t\t\t$bdd = new PDO('sqlite:/srv/eyesofnetwork/nagvis/etc/auth.db');\n\n\t\t\t\t$req = $bdd->query(\"SELECT count(*) FROM users WHERE name = '$user_name'\");\n\t\t\t\t$nagvis_user_exist = $req->fetch();\n\n\t\t\t\tif ($nagvis_user_exist[\"count(*)\"] == 0){\n\t\t\t\t\t// this is nagvis default salt for password encryption security\n\t\t\t\t\t$nagvis_salt = '29d58ead6a65f5c00342ae03cdc6d26565e20954';\n\t\t\t\t\t\n\t\t\t\t\t// insert user in nagvis SQLite DB\n\t\t\t\t\t$sql = \"INSERT INTO users (name, password) VALUES ('$user_name', '\".sha1($nagvis_salt.$user_password1).\"')\";\n\t\t\t\t\t$bdd->exec($sql);\n\n\t\t\t\t\t// insert user's right as \"Guest\" by default\n\t\t\t\t\t$sql = \"SELECT userId FROM users WHERE name = '$user_name'\";\n\t\t\t\t\t$req = $bdd->query($sql);\n\t\t\t\t\t$result = $req->fetch();\n\t\t\t\t\t$nagvis_id = $result['userId'];\n\n\t\t\t\t\t$sql = \"INSERT INTO users2roles (userId, roleId) VALUES ($nagvis_id, $nagvis_group)\";\n\t\t\t\t\t$bdd->exec($sql);\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Insert into cacti\n\t\t\tif($in_cacti == \"yes\"){\n\t\t\t\t$bdd = new PDO('mysql:host='.$database_host.';dbname='.$database_cacti, $database_username, $database_password);\n\t\t\t\t$req = $bdd->query(\"SELECT count(*) FROM user_auth WHERE username='$user_name'\");\n\t\t\t\t$cacti_user_exist = $req->fetch();\n\t\t\t\tif ($cacti_user_exist[\"count(*)\"] == 0){\n\t\t\t\t\t$bdd->exec(\"INSERT INTO user_auth (username,password,realm,full_name,show_tree,show_list,show_preview,graph_settings,login_opts,policy_graphs,policy_trees,policy_hosts,policy_graph_templates,enabled) VALUES ('$user_name','',2,'$user_descr','on','on','on','on',3,2,2,2,2,'on')\");\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Messages\n\t\t\tlogging(\"admin_user\",\"INSERT : $user_name $user_descr $user_limitation $user_group $user_type $user_location\");\n\t\t\tif($message){ message(8,\" : User Inserted\",'ok'); }\n\n\t\t\t// Lilac contact_commands\n\t\t\t$lilac_contact_hcommand=mysqli_result(sqlrequest(\"$database_lilac\",\"select id from nagios_command where name like 'notify-by-email-host'\"),0,\"id\");\n\t\t\t$lilac_contact_scommand=mysqli_result(sqlrequest(\"$database_lilac\",\"select id from nagios_command where name like 'notify-by-email-service'\"),0,\"id\");\n\t\t\tif($lilac_contactid!=\"\" and $lilac_contact_hcommand!=\"\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_notification_command (contact_id,command,type) values ('$lilac_contactid','$lilac_contact_hcommand','host')\");\n\t\t\telseif($lilac_contact_hcommand==\"\")\n\t\t\t\tmessage(8,\" : Verify contact 'notify-by-email-host' command in nagios configurator\",'warning');\n\t\t\tif($lilac_contactid!=\"\" and $lilac_contact_scommand!=\"\")\n\t\t\t\tsqlrequest(\"$database_lilac\",\"INSERT INTO nagios_contact_notification_command (contact_id,command,type) values ('$lilac_contactid','$lilac_contact_scommand','service')\");\n\t\t\telseif($lilac_contact_scommand==\"\")\n\t\t\t\tmessage(8,\" : Verify contact 'notify-by-email-service' command in nagios configurator\",'warning');\n\t\t}\n\t\telse\n\t\t\tmessage(8,\" : Passwords do not match or are empty\",'warning');\n\t}\n\telseif($user_exist != 0 )\n\t\tmessage(8,\" : User $user_name already exists\",'warning');\n\telse\n\t\tmessage(8,\" : User name can not be empty\",'warning');\n\treturn $user_id;\n}\n\n// \"mysqli\" version of mysql_result\nfunction mysqli_result($res, $row, $field=0){\n    $res->data_seek($row);\n\tif(gettype($field) == \"string\"){\n\t\t$datarow = $res->fetch_assoc();\n\t}\n    else{\n\t\t$datarow = $res->fetch_array();\n\t}\n    return $datarow[$field];\n}\n\n// get traduction words\nfunction getLabel($reference){\n\n        global $dictionnary;\n        global $path_messages;\n        global $path_messages_custom;\n        global $t;\n\n        // Load dictionnary if not isset\n        if(!isset($t)) {\n                $t = new Translator();\n                $t::initFile($path_messages,$path_messages_custom);\n                $dictionnary = $t::createPHPDictionnary();\n        }\n\n        // Display dictionnary reference if isset or reference\n        if(isset($dictionnary[$reference])) {\n                $label = $dictionnary[$reference];\n        }\n        else {\n                $label = $reference;\n        }\n\n        return $label;\n\n}\n\n// get default page\nfunction getDefaultPage($usrlimit=0){\n\n\tglobal $t;\n\tglobal $defaultpage;\n\tglobal $path_menu_limited;\n\tglobal $path_menu_limited_custom;\n\tglobal $path_menus;\n\tglobal $path_menus_custom;\n\n\t// load dictionnary if not isset\n\tif(!isset($t)) {\n\t\t$t = new Translator();\n\t}\n\t\n\t// get json file\n\tif(isset($_COOKIE[\"user_limitation\"])) { $usrlimit = $_COOKIE[\"user_limitation\"]; }\n\tif($usrlimit == 1){\n\t\t$file=$t::getFile($path_menu_limited, $path_menu_limited_custom);\n\t\t$json_content = file_get_contents($file);\n\t\t$links = json_decode($json_content, true);\n\t\tforeach ($links[\"link\"] as $link) {\n\t\t\tif(isset($link[\"default\"])) {\n\t\t\t\tif( $link[\"default\"] != null ){\n\t\t\t\t\t$defaultpage = $link[\"url\"];\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t} \n\t\n\treturn $defaultpage;\n\n}\n\n// get frame url\nfunction getFrameURL($url){\n\tglobal $path_frame;\n\t\n\t$frame_url = $path_frame.urlencode($url);\n\treturn $frame_url;\n}\n\nfunction pieChart($queue, $field, $search, $period)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tif($queue == \"active\"){ global $ged_active_intervals; extract($ged_active_intervals); }\n\telse{ global $ged_history_intervals; extract($ged_history_intervals); }\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\t// set the period clause (according to checkboxes checked)\n\t$period_clause = \"\";\n\tif( isset($period) && $period != \"\" )\n\t{\n\t\tswitch($period)\n\t\t{\n\t\t\tcase \"day\": $period_clause = \" AND o_sec >= $day\"; break;\n\t\t\tcase \"week\": $period_clause = \" AND o_sec >= $week AND o_sec < $day\"; break;\n\t\t\tcase \"month\": $period_clause = \" AND o_sec >= $month AND o_sec < $week\"; break;\n\t\t\tcase \"year\": $period_clause = \" AND o_sec >= $year AND o_sec < $month\"; break;\n\t\t}\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($array_ged_states as $key => $state)\n\t\t{\n\t\t\tif($key == \"ok\")\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif( !isset($array_result[\"$key\"]) ){\n\t\t\t\t$array_result[\"$key\"] = 0;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"'\";\n\t\t\t$sql .= $search_clause;\n\t\t\t$sql .= $period_clause;\n\t\t\t\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t$result = mysqli_fetch_row($result);\n\t\t\t$array_result[\"$key\"] += $result[0];\n\t\t}\n\t}\n\treturn json_encode($array_result);\n}\n\nfunction barChart($queue, $field, $search)\n{\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tif($queue == \"active\"){ global $ged_active_intervals; extract($ged_active_intervals); }\n\telse{ global $ged_history_intervals; extract($ged_history_intervals); }\n\t\n\t\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t$array_result = array();\n\t$array_now_day = array();\n\t$array_day_week = array();\n\t$array_week_month = array();\n\t$array_month_year = array();\n\t$array_year_more = array();\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($array_ged_states as $key => $state)\n\t\t{\n\t\t\tif($key == \"ok\")\n\t\t\t{\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\t\n\t\t\tif( !isset($array_now_day[\"$key\"]) ){$array_now_day[\"$key\"] = 0;}\n\t\t\tif( !isset($array_day_week[\"$key\"]) ){$array_day_week[\"$key\"] = 0;}\n\t\t\tif( !isset($array_week_month[\"$key\"]) ){$array_week_month[\"$key\"] = 0;}\n\t\t\tif( !isset($array_month_year[\"$key\"]) ){$array_month_year[\"$key\"] = 0;}\n\t\t\tif( !isset($array_year_more[\"$key\"]) ){$array_year_more[\"$key\"] = 0;}\n\t\t\t$sql = \"\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $day\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $week AND o_sec < $day\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $month AND o_sec < $week\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec >= $year AND o_sec < $month\".$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_\".$queue.\" WHERE state='\".$state.\"' AND queue='\".substr($queue{0},0,1).\"' AND o_sec < $year\".$search_clause;\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t\n\t\t\t$cpt = 0;\n\t\t\twhile( $row = mysqli_fetch_row($result) )\n\t\t\t{\n\t\t\t\tswitch($cpt)\n\t\t\t\t{\n\t\t\t\t\tcase 0: $array_now_day[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 1: $array_day_week[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 2: $array_week_month[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 3: $array_month_year[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 4: $array_year_more[\"$key\"] += $row[0]; break;\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t}\n\t}\n\tarray_push($array_result, $array_now_day);\n\tarray_push($array_result, $array_day_week);\n\tarray_push($array_result, $array_week_month);\n\tarray_push($array_result, $array_month_year);\n\tarray_push($array_result, $array_year_more);\n\t\n\treturn json_encode($array_result);\n}\n\nfunction slaPieChart($field, $search, $period)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $ged_sla_intervals;\n\tglobal $ged_history_intervals;\n\textract($ged_sla_intervals);\n\textract($ged_history_intervals);\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\t// set the period clause (according to checkboxes checked)\n\t$period_clause = \"\";\n\tif( isset($period) && $period != \"\" )\n\t{\n\t\tswitch($period)\n\t\t{\n\t\t\tcase \"day\": $period_clause = \" AND o_sec >= $day\"; break;\n\t\t\tcase \"week\": $period_clause = \" AND o_sec >= $week AND o_sec < $day\"; break;\n\t\t\tcase \"month\": $period_clause = \" AND o_sec >= $month AND o_sec < $week\"; break;\n\t\t\tcase \"year\": $period_clause = \" AND o_sec >= $year AND o_sec < $month\"; break;\n\t\t}\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($ged_sla_intervals as $key => $value)\n\t\t{\n\t\t\tif( !isset($array_result[\"$key\"]) ){\n\t\t\t\t$array_result[\"$key\"] = 0;\n\t\t\t}\n\t\t\t\n\t\t\t$sla_clause = \"\";\n\t\t\tswitch($key)\n\t\t\t{\n\t\t\t\tcase \"first\" : $sla_clause = \" AND a_sec-o_sec < $first\"; break;\n\t\t\t\tcase \"second\": $sla_clause = \" AND a_sec-o_sec >= $first AND a_sec-o_sec < $second\"; break;\n\t\t\t\tcase \"third\" : $sla_clause = \" AND a_sec-o_sec >= $second AND a_sec-o_sec < $third\"; break;\n\t\t\t\tcase \"fourth\": $sla_clause = \" AND a_sec-o_sec >= $third\"; break;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state!='0'\".$sla_clause;\n\t\t\t$sql .= $search_clause;\n\t\t\t$sql .= $period_clause;\n\t\t\t\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t$result = mysqli_fetch_row($result);\n\t\t\t$array_result[\"$key\"] += $result[0];\n\t\t}\n\t}\n\treturn json_encode($array_result);\n}\n\nfunction slaBarChart($field, $search)\n{\n\t// all external variables we need\n\tglobal $database_ged;\n\tglobal $array_ged_states;\n\tglobal $ged_sla_intervals;\n\tglobal $ged_history_intervals;\n\textract($ged_sla_intervals);\n\textract($ged_history_intervals);\n\t\n\t$array_result = array();\n\t$array_now_day = array();\n\t$array_day_week = array();\n\t$array_week_month = array();\n\t$array_month_year = array();\n\t$array_year_more = array();\n\t\n\t$array_result = array();\n\t$sql = \"SELECT pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100'\";\n\t$pkt_result = sqlrequest($database_ged, $sql);\n\t\n\t// set the search clause (according to field and value)\n\t$search_clause = \"\";\n\tif( isset($search) && $search != \"\" )\n\t{\n\t\tswitch ($field) {\n\t\t\tcase 'host': $field = 'equipment'; break;\n\t\t\tcase 'hostgroup': $field = 'hostgroups'; break;\n\t\t\tcase 'service_group': $field = 'servicegroups'; break;\n\t\t}\n\t\t$like = \"'\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= \"'\";\n\t\t$search_clause = \" AND $field LIKE $like\";\n\t}\n\t\n\twhile( $pkt = mysqli_fetch_row($pkt_result) )\n\t{\n\t\tforeach($ged_sla_intervals as $key => $value)\n\t\t{\n\t\t\tif( !isset($array_now_day[\"$key\"]) ){$array_now_day[\"$key\"] = 0;}\n\t\t\tif( !isset($array_day_week[\"$key\"]) ){$array_day_week[\"$key\"] = 0;}\n\t\t\tif( !isset($array_week_month[\"$key\"]) ){$array_week_month[\"$key\"] = 0;}\n\t\t\tif( !isset($array_month_year[\"$key\"]) ){$array_month_year[\"$key\"] = 0;}\n\t\t\tif( !isset($array_year_more[\"$key\"]) ){$array_year_more[\"$key\"] = 0;}\n\t\t\t\n\t\t\tswitch($key)\n\t\t\t{\n\t\t\t\tcase \"first\" : $sla_clause = \" AND a_sec-o_sec < $first\"; break;\n\t\t\t\tcase \"second\": $sla_clause = \" AND a_sec-o_sec >= $first AND a_sec-o_sec < $second\"; break;\n\t\t\t\tcase \"third\" : $sla_clause = \" AND a_sec-o_sec >= $second AND a_sec-o_sec < $third\"; break;\n\t\t\t\tcase \"fourth\": $sla_clause = \" AND a_sec-o_sec >= $third\"; break;\n\t\t\t}\n\t\t\t$sql = \"SELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $day\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $week AND o_sec < $day\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $month AND o_sec < $week\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec >= $year AND o_sec < $month\".$sla_clause.$search_clause.\n\t\t\t\t\" UNION ALL\n\t\t\t\tSELECT count(id) FROM \".$pkt[0].\"_queue_history WHERE queue='h' AND state !='0' AND o_sec < $year\".$sla_clause.$search_clause;\n\t\t\t$result = sqlrequest($database_ged, $sql);\n\t\t\t\n\t\t\t$cpt = 0;\n\t\t\twhile( $row = mysqli_fetch_row($result) )\n\t\t\t{\n\t\t\t\tswitch($cpt)\n\t\t\t\t{\n\t\t\t\t\tcase 0: $array_now_day[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 1: $array_day_week[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 2: $array_week_month[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 3: $array_month_year[\"$key\"] += $row[0]; break;\n\t\t\t\t\tcase 4: $array_year_more[\"$key\"] += $row[0]; break;\n\t\t\t\t}\n\t\t\t\t$cpt++;\n\t\t\t}\n\t\t}\n\t}\n\tarray_push($array_result, $array_now_day);\n\tarray_push($array_result, $array_day_week);\n\tarray_push($array_result, $array_week_month);\n\tarray_push($array_result, $array_month_year);\n\tarray_push($array_result, $array_year_more);\n\t\n\treturn json_encode($array_result);\n}\n\n?>\n", "<?php\n\ninclude(\"../../../include/config.php\");\n\n// Mot tap\u00e9 par l'utilisateur\n$q = $_GET['query'];\n$table_name = $_GET['table_name'];\n\ntry {\n\t$bdd = new PDO('mysql:host=localhost;dbname='.$database_lilac, $database_username, $database_password);\n} catch(Exception $e) {\n\t echo \"Connection failed: \" . $e->getMessage();\n\texit('Impossible de se connecter \u00e0 la base de donn\u00e9es.');\n}\n\n// Requ\u00eate SQL\n$requete = \"SELECT name FROM \" . $table_name .  \" WHERE name LIKE '\". $q .\"%' LIMIT 0, 10\";\n\nforeach  ($bdd->query($requete) as $row) {\n\t$suggestions['suggestions'][] = $row['name'];\n}\necho json_encode($suggestions);\n\n?>\n", "<?php\n\ninclude(\"../../../include/config.php\");\n\n$action = isset($_GET['action']) ? $_GET['action'] : false;\n$bp_name = isset($_GET['bp_name']) ? $_GET['bp_name'] : false;\n$host_name = isset($_GET['host_name']) ? $_GET['host_name'] : false;\n$service = isset($_GET['service']) ? $_GET['service'] : false;\n$new_services = isset($_GET['new_services']) ? $_GET['new_services'] : false;\n\n$uniq_name = isset($_GET['uniq_name']) ? $_GET['uniq_name'] : false;\n$uniq_name_orig = isset($_GET['uniq_name_orig']) ? $_GET['uniq_name_orig'] : false;\n$process_name = isset($_GET['process_name']) ? $_GET['process_name'] : false;\n$display = isset($_GET['display']) ? $_GET['display'] : false;\n$url = isset($_GET['url']) ? $_GET['url'] : false;\n$command = isset($_GET['command']) ? $_GET['command'] : false;\n$type = isset($_GET['type']) ? $_GET['type'] : false;\n$min_value = isset($_GET['min_value']) ? $_GET['min_value'] : false;\n\ntry {\n\t$bdd = new PDO('mysql:host=localhost;dbname='.$database_nagios, $database_username, $database_password);\n} catch(Exception $e) {\n\techo \"Connection failed: \" . $e->getMessage();\n\texit('Impossible de se connecter \u00e0 la base de donn\u00e9es.');\n}\n\nif($action == 'verify_services'){\n    verify_services($bp_name,$host_name,$bdd);\n}\n\nelseif($action == 'delete_bp'){\n    delete_bp($bp_name,$bdd);\n}\n\nelseif($action == 'list_services'){\n    list_services($host_name);\n}\n\nelseif($action == 'list_process'){\n\tlist_process($bp_name,$display,$bdd);\n}\n\nelseif ($action == 'add_services'){\n\tadd_services($bp_name,$new_services,$bdd);\n}\n\nelseif ($action == 'add_process'){\n    add_process($bp_name,$new_services,$bdd);\n}\n\nelseif ($action == 'add_application'){\n\tadd_application($uniq_name_orig,$uniq_name,$process_name,$display,$url,$command,$type,$min_value,$bdd);\n}\n\nelseif ($action == 'build_file'){\n\tbuild_file($bdd);\n}\n\nelseif ($action == 'info_application'){\n\tinfo_application($bp_name,$bdd);\n}\n\nelseif ($action == 'check_app_exists'){\n\tcheck_app_exists($uniq_name, $bdd);\n}\n\nfunction verify_services($bp,$host,$bdd){\n\t$sql = \"select COUNT(*),service from bp_services where bp_name = '\" . $bp . \"' and host = '\". $host . \"'\";\n\t$req = $bdd->query($sql);\n\t$informations = $req->fetch();\n\t$number_services = intval($informations['COUNT(*)']);\n\t$service = $informations['service'];\n\n\techo $bp . \"::\" . $host . \"::\" . $number_services . \"::\" . $service;\n}\n\nfunction delete_bp($bp,$bdd){\n\t$sql = \"delete from bp where name = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp));\n\n\t$sql = \"delete from bp_services where bp_name = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp));\n\n\t$sql = \"delete from bp_links where bp_name = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp));\n\t\n\t$sql = \"delete from bp_links where bp_link = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp));\n}\n\nfunction list_services($host_name){\n\t$path_nagios_ser = \"/srv/eyesofnetwork/nagios/etc/objects/services.cfg\";\n\n\t$tabServices = array() ;\n\t$tabServices['service'] = array() ;\n    $lignes = file($path_nagios_ser);\n\t$hasMatch = 0;\n\t\n    foreach( $lignes as $ligne) {\n\n        if ( preg_match(\"/$host_name$/\", trim($ligne), $match)) {  //Get Host name\n            $hasMatch = 1;\n        }\n        elseif ( preg_match(\"#^service_description#\", trim($ligne))) {\n\t\t\t$service = preg_split(\"/[\\s]+/\", trim($ligne));\n            if ($hasMatch)\n                $tabServices['service'][] = $service[1];\n            $hasMatch = 0;\n        }\n    }\n\tnatcasesort($tabServices['service']);\n\tarray_unshift($tabServices['service'],\"Hoststatus\");\n\techo json_encode($tabServices);\n}\n\nfunction list_process($bp,$display,$bdd){\n\t$sql = \"select name from bp where is_define = 1 and name!=? and priority = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp,$display));\n\t$process = $req->fetchall();\n\n    echo json_encode($process);\n}\n\nfunction add_services($bp,$services,$bdd){\n\t$list_services = array();\n\t$old_list_services = array();\n\t\n\tif(is_array($services)) {\n\t\tforeach($services as $values){\n\t\t\t$value = explode(\"::\", $values);\n\t\t\t$service = $value[1];\n\t\t\t$list_services[] = $service;\n\t\t}\n\t}\n\n\t$sql = \"delete from bp_services where bp_name = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp));\n\n\tif(count($services) > 0){\n\t\t$sql = \"update bp set is_define = 1 where name = ?\";\n\t\t$req = $bdd->prepare($sql);\n\t\t$req->execute(array($bp));\n\t}\n\telse{\n\t\t$sql = \"update bp set is_define = 0 where name = ?\";\n\t\t$req = $bdd->prepare($sql);\n\t\t$req->execute(array($bp));\n    }\n\n\tif(is_array($services)) {\n\t\tforeach($services as $values){\n\t\t\t$value = explode(\"::\", $values);\n\t\t\t$host = $value[0];\n\t\t\t$service = $value[1];\n\t\t\techo $service;\n\t\t\t$sql = \"insert into bp_services (bp_name,host,service) values(?,?,?)\";\n\t\t\t$req = $bdd->prepare($sql);\n\t\t\t$req->execute(array(trim($bp),$host,$service));\n\t\t}\n\t}\n}\n\nfunction add_process($bp,$process,$bdd){\n\t$sql = \"delete from bp_links where bp_name = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp));\n\t$sql = \"update bp set is_define = 0 where name = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp));\n\n    if(count($process) > 0 and is_array($process)){\n\t\t$sql = \"update bp set is_define = 1 where name = ?\";\n\t\t$req = $bdd->prepare($sql);\n\t\t$req->execute(array($bp));\n\t\n\t\tforeach($process as $values){\n\t\t\t$value = explode(\"::\", $values);\n\t\t\t$bp_link = $value[1];\n\n\t\t\t$sql = \"insert into bp_links (bp_name,bp_link) values(?,?)\";\n\n\t\t\t$req = $bdd->prepare($sql);\n\t\t\t$req->execute(array($bp,$bp_link));\n\t\t}\t\n\t}\n}\n\nfunction check_app_exists($uniq_name, $bdd)\n{\n\t$sql = \"select count(*) from bp where name = ?;\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($uniq_name));\n\t$bp_exist = $req->fetch(PDO::FETCH_NUM);\n\t\n\tif($bp_exist[0] == 1){\n\t\techo \"true\";\n\t} else {\n\t\techo \"false\";\n\t}\n}\n\nfunction add_application($uniq_name_orig,$uniq_name,$process_name,$display,$url,$command,$type,$min_value,$bdd){\n\tif($type != 'MIN'){\n\t\t$min_value = \"\";\n\t}\n\t$sql = \"select count(*) from bp where name = ?;\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($uniq_name));\n\t$bp_exist = $req->fetch();\n\n\t// add\n\tif($bp_exist[0] == 0 and empty($uniq_name_orig)){\n\t\t$sql = \"insert into bp (name,description,priority,type,command,url,min_value) values(?,?,?,?,?,?,?)\";\n\t\t$req = $bdd->prepare($sql);\n\t\t$req->execute(array($uniq_name,$process_name,$display,$type,$command,$url,$min_value));\n\t}\n\t// uniq name modification\n\telseif($uniq_name_orig != $uniq_name) {\n\t\tif($bp_exist[0] != 0){\n\t\t\t// TODO QUENTIN\n\t\t} else {\n\t\t\t$sql = \"update bp set name = ?,description = ?,priority = ?,type = ?,command = ?,url = ?,min_value = ? where name = ?\";\n\t\t\t$req = $bdd->prepare($sql);\n\t\t\t$req->execute(array($uniq_name,$process_name,$display,$type,$command,$url,$min_value,$uniq_name_orig));\n\t\t\t$sql = \"update bp_links set bp_name = ? where bp_name = ?\";\n\t\t\t$req = $bdd->prepare($sql);\n\t\t\t$req->execute(array($uniq_name,$uniq_name_orig));\t\n\t\t\t$sql = \"update bp_links set bp_link = ? where bp_link = ?\";\n\t\t\t$req = $bdd->prepare($sql);\n\t\t\t$req->execute(array($uniq_name,$uniq_name_orig));\n\t\t\t$sql = \"update bp_services set bp_name = ? where bp_name = ?\";\t\t\t\t\t\n\t\t\t$req = $bdd->prepare($sql);\n\t\t\t$req->execute(array($uniq_name,$uniq_name_orig));\t\n\t\t}\n\t}\t\n\t// modification\n\telse{\n\t\t$sql = \"update bp set name = ?,description = ?,priority = ?,type = ?,command = ?,url = ?,min_value = ? where name = ?\";\n\t\t$req = $bdd->prepare($sql);\n\t\t$req->execute(array($uniq_name,$process_name,$display,$type,$command,$url,$min_value,$uniq_name));\n\t}\n}\n\nfunction build_file($bdd){\n\t\n\t$bp_sons=array();\n\t\n\t$sql = \"SELECT * FROM bp where is_define ='1'\";\n\t$req = $bdd->query($sql);\n\t$bps_informations = $req->fetchall();\n\t$file = \"../../../../nagiosbp/etc/nagios-bp.conf\";\n\t$backup_file = \"../../../../nagiosbp/etc/nagios-bp.conf_old\";\n\tcopy($file,$backup_file);\n\t$bp_file = fopen($file, \"w\");\n\tfputs($bp_file, \"#\\n\");\n\tfputs($bp_file, \"# EyesOfNetwork\\n\");\n\tfputs($bp_file, \"#\\n\");\n\t\n\tforeach($bps_informations as $bp_informations){\n\t\tif(!in_array($bp_informations['name'],$bp_sons,true)) {\n\t\t\t$bp_sons=build_file_recursive($bdd,$bp_file,$bp_informations,$bp_sons);\n\t\t}\n\t}\n\tfclose($bp_file);\n}\n\nfunction build_file_recursive($bdd,$bp_file,$bp_informations,$bp_sons){\n\n\t$sql = \"SELECT bp_link FROM bp_links where bp_name=?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp_informations['name']));\n\tif($req->rowCount() == 0) {\n\t\t$bp_sons[]=$bp_informations['name'];\n\t\tbuild_file_bp($bdd,$bp_file, $bp_informations);\n\t} else {\n\t\t$bp_links = $req->fetchall();\n\t\tforeach($bp_links as $bp_link){\n\t\t\t$sql = \"SELECT * FROM bp where is_define ='1' and name=?\";\n\t\t\t$req = $bdd->prepare($sql);\n\t\t\t$req->execute(array($bp_link[\"bp_link\"]));\n\t\t\t$bps_sons_informations = $req->fetchall();\n\t\t\tforeach($bps_sons_informations as $bp_sons_informations){\n\t\t\t\tif(!in_array($bp_sons_informations['name'],$bp_sons,true)) {\n\t\t\t\t\t$bp_sons=build_file_recursive($bdd,$bp_file,$bp_sons_informations,$bp_sons);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t$bp_sons[]=$bp_informations['name'];\n\t\tbuild_file_bp($bdd,$bp_file, $bp_informations);\n\t}\n\treturn $bp_sons;\n}\n\nfunction build_file_bp($bdd,$bp_file, $bp_informations){\n\tfputs($bp_file, $bp_informations['name'] . \" = \");\n\tif($bp_informations['type'] == 'ET'){\n\t\t$type = \"&\";\n\t}\n\telseif($bp_informations['type'] == 'OU'){\n\t\t$type = \"|\";\n\t}\n\telse{\n\t\t$type = \"+\";\n\t\tfputs($bp_file, $bp_informations['min_value'] . \" of: \");\n\t}\n\t$sql = \"select host,service from bp_services where bp_name = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp_informations['name']));\n\t$host_services = $req->fetchall();\n\n\t$counter1 = count($host_services);\n\t$counter2 = 0;\n\n\tforeach($host_services as $services){\n\t\tfputs($bp_file,$services['host'] . \";\" . $services['service']);\n\t\t$counter2 += 1;\n\n\t\tif($counter2 < $counter1){\n\t\t\tfputs($bp_file, \" \" . $type . \" \");\n\t\t}\n\t}\n\n\t$sql = \"select bp_link from bp_links where bp_name = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp_informations['name']));\n\t$link_informations = $req->fetchall();\n\n\t$counter1 = count($link_informations);\n\t$counter2 = 0;\n\n\tforeach($link_informations as $link_infos){\n\t\tfputs($bp_file,$link_infos['bp_link']);\n\t\t$counter2 += 1;\n\n\t\tif($counter2 < $counter1){\n\t\t\tfputs($bp_file, \" \" . $type . \" \");\n\t\t}\n\t}\n\n\tfputs($bp_file, \"\\n\");\n\n\tfputs($bp_file, \"display \" . $bp_informations['priority'] . \";\" . $bp_informations['name'] . \";\" . $bp_informations['description'] . \"\\n\");\n\n\tif(! empty($bp_informations['url'])){\n\t\tfputs($bp_file, \"info_url \" . $bp_informations['name'] . \";\" . $bp_informations['url'] . \"\\n\");\n\t}\n\n\tif(! empty($bp_informations['command'])){\n\t\tfputs($bp_file, \"external_info \" . $bp_informations['name'] . \";\" . $bp_informations['command'] . \"\\n\");\n\t}\n}\n\nfunction info_application($bp_name, $bdd){\n\t$sql = \"select * from bp where name = ?\";\n\t$req = $bdd->prepare($sql);\n\t$req->execute(array($bp_name));\n\t$info = $req->fetch();\n\techo json_encode($info);\n}\n\n?>\n", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Quentin HOARAU\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\ninclude(\"../../include/config.php\");\ninclude(\"../../include/function.php\");\n\n// Search function for Jquery an exit\nif(isset($_GET['term']) && isset($_GET['request']) && $_GET['request'] == \"search_user\") {\n\t$sql=\"select * from ldap_users_extended where (user LIKE ?) OR (login LIKE ?) order by user\";\n\t$result=sqlrequest($database_eonweb,$sql,false,array(\"ss\",\"%\".$_GET['term'].\"%\",\"%\".$_GET['term'].\"%\"));\n\t\n\t$array = array();\n\twhile ($line = mysqli_fetch_array($result)){\n\t\tarray_push($array, $line[0]);\n\t}\n\techo json_encode($array);\n}\n\n?>\n", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Jean-Philippe LEVY\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\n# Check optionnal module to load\nif(isset($_GET[\"module\"]) && isset($_GET[\"link\"])) { \n\n\tinclude(\"../include/config.php\");\n\tinclude(\"../include/arrays.php\");\n\t\n\tif(in_array($_GET[\"module\"],$array_modules)) {\n\t\t$module=exec(\"rpm -q \".$_GET[\"module\"].\" |grep '.eon' |wc -l\");\n\t\t# Redirect to module page if rpm installed\n\t\tif($module!=0) { header('Location: '.$_GET[\"link\"].''); }\n\t}\n\n} \n\t\ninclude(\"../header.php\"); \ninclude(\"../side.php\"); \n\n?>\n\n<div id=\"page-wrapper\">\n\n\t<div class=\"row\">\n\t\t<div class=\"col-lg-12\">\n\t\t\t<h1 class=\"page-header\"><?php echo getLabel(\"label.home_about.title\"); ?></h1>\n\t\t</div>\n\t</div>\n\n\t<div class=\"row\">\n\t<?php \n\t\t# Module not installed\n\t\tif(isset($module)) {\n\t\t\tmessage(0,\" : Module \".$_GET[\"module\"].\" is not installed\",'warning'); \n\t\t} \n\t\t# Module or link not specified\n\t\telse {\n\t\t\tmessage(0,\" : Not allowed\",'critical'); \n\t\t}\n\t?>\n\t</div>\n\t\n</div>\n\n<?php include(\"../footer.php\"); ?>\n", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Quentin HOARAU\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\ninclude(\"../../include/config.php\");\ninclude(\"../../include/arrays.php\");\ninclude(\"../../include/function.php\"); \ninclude(\"ged_functions.php\");\n\nextract($_GET);\nif(!isset($queue)) { $queue=\"active\"; } \nelseif(!in_array($queue,$array_ged_queues)) { $queue=\"active\"; }\n\n// get all GED filters\n$default = \"\";\n$file=\"../../cache/\".$_COOKIE[\"user_name\"].\"-ged.xml\";\nif(file_exists($file)){\n\t$xmlfilters = new DOMDocument(\"1.0\",\"UTF-8\");\n\t$xmlfilters->load($file);\n\n\t$xpath = new DOMXPath($xmlfilters);\n\n\t$g=$xmlfilters->getElementsByTagName(\"ged\")->item(0);\n\n\t//Default filter detection\n\t$default=$g->getElementsByTagName(\"default\")->item(0)->nodeValue;\n}\n\n?>\n\n<form id=\"ged-table\" method=\"POST\" onsubmit=\"return false;\" class=\"form-inline\">\n\t<div class=\"dataTable_wrapper\">\n\t\t<table id=\"events-table\" class=\"table table-striped datatable-eonweb-ajax table-condensed table-hover\">\n\t\t\t<thead>\n\t\t\t\t<tr>\n\t\t\t\t\t<th class=\"col-md-1\"><?php echo getLabel(\"label.state\") ?></th>\n\t\t\t\t\t<?php\n\t\t\t\t\tforeach ($array_ged_packets as $key => $value) {\n\t\t\t\t\t\tif($value[\"col\"] == true && $key != \"state\"){\n\t\t\t\t\t\t\techo \"<th>\".ucfirst($key).\"</th>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\t?>\n\t\t\t\t</tr>\n\t\t\t</thead>\n\t\t\t<tbody>\n\t\t\t\t<?php\n\t\t\t\t\tif($_GET[\"type\"] == 0){\n\t\t\t\t\t\t$sql = \"SELECT pkt_type_id,pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100';\";\n\t\t\t\t\t\t$gedsql_result1=sqlrequest($database_ged,$sql);\n\t\t\t\t\t} else {\n\t\t\t\t\t\t$sql = \"SELECT pkt_type_id,pkt_type_name FROM pkt_type WHERE pkt_type_id=? AND pkt_type_id<'100';\";\n\t\t\t\t\t\t$prepare=array(\"i\",(int)$_GET[\"type\"]);\n\t\t\t\t\t\t$gedsql_result1=sqlrequest($database_ged,$sql,false,$prepare);\n\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\n\t\t\t\t\twhile($ged_type = mysqli_fetch_assoc($gedsql_result1)){\n\n\t\t\t\t\t\t// request for ged events according to queue and filters\n\t\t\t\t\t\t$sql = createSelectClause($ged_type[\"pkt_type_name\"], $queue);\n\t\t\t\t\t\t$mysqli_prepare=array(\"\");\n\t\t\t\t\t\t\n\t\t\t\t\t\t// time periods (only in active events);\n\t\t\t\t\t\tif($time_period != \"\"){\n\t\t\t\t\t\t\t// define all times needed (for each range)\n\t\t\t\t\t\t\t$actual_time = time();\n\t\t\t\t\t\t\t$five_minutes = $actual_time - (60 * 5);\n\t\t\t\t\t\t\t$fifteen_minutes = $actual_time - (60 * 15);\n\t\t\t\t\t\t\t$thirty_minutes = $actual_time - (60 * 30);\n\t\t\t\t\t\t\t$one_hour = $actual_time - (60 * 60);\n\n\t\t\t\t\t\t\tswitch ($time_period) {\n\t\t\t\t\t\t\t\tcase '0-5m':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= ? AND o_sec > ?\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[0].=\"ii\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(int)$actual_time;\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(int)$five_minutes;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '5-15m':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= ? AND o_sec > ?\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[0].=\"ii\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(int)$five_minutes;\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(int)$fifteen_minutes;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '15-30m':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= ? AND o_sec > ?\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[0].=\"ii\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(int)$fifteen_minutes;\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(int)$thirty_minutes;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase '30m-1h':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= ? AND o_sec > ?\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[0].=\"ii\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(int)$thirty_minutes;\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(int)$one_hour;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t\tcase 'more':\n\t\t\t\t\t\t\t\t\t$sql .= \" AND o_sec <= ?\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[0].=\"i\";\n\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(int)$one_hour;\n\t\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif($ack_time != \"\"){\n\t\t\t\t\t\t\t$sql .= \" AND a_sec - o_sec >= ?\";\n\t\t\t\t\t\t\t$mysqli_prepare=array(\"i\",(int)$ack_time);\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// if there's a default filter\n\t\t\t\t\t\t$array_filters = [];\n\t\t\t\t\t\tif($default!=\"\"){\n\t\t\t\t\t\t\t$g_filters = $xpath->query(\"//ged/filters[@name='$default']/filter\");\n\n\t\t\t\t\t\t\t$xmlcpt=0;\n\t\t\t\t\t\t\tforeach($g_filters as $g_filter){\n\t\t\t\t\t\t\t\t$array_filters[$xmlcpt][$g_filter->getAttribute(\"name\")] = $g_filter->nodeValue;\n\t\t\t\t\t\t\t\t$xmlcpt++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// XML filters if activated for the user\n\t\t\t\t\t\tif( count($array_filters) > 0 ){\n\t\t\t\t\t\t\t$sqlcpt=0;\n\t\t\t\t\t\t\tfor($i=0;$i<$xmlcpt;$i++) {\n\t\t\t\t\t\t\t\tforeach ($array_filters[$i] as $key => $value) {\n\t\t\t\t\t\t\t\t\t// advanced search (with *)\n\t\t\t\t\t\t\t\t\t$like = \"\";\n\t\t\t\t\t\t\t\t\tif( substr($value, 0, 1) === '*' ){\n\t\t\t\t\t\t\t\t\t\t$like .= \"%\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$like .= trim($value, '*');\n\t\t\t\t\t\t\t\t\tif ( substr($value, -1) === '*' ) {\n\t\t\t\t\t\t\t\t\t\t$like .= \"%\";\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\tif($sqlcpt==\"0\") {\n\t\t\t\t\t\t\t\t\t\t$sql .= \" AND ($key LIKE ?\";\n\t\t\t\t\t\t\t\t\t\t$mysqli_prepare[0].=\"s\";\n\t\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(string)$like;\n\t\t\t\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t\t\t\t$sql .= \" OR $key LIKE ?\";\n\t\t\t\t\t\t\t\t\t\t$mysqli_prepare[0].=\"s\";\n\t\t\t\t\t\t\t\t\t\t$mysqli_prepare[]=(string)$like;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t$sqlcpt++;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t$sql .= \")\";\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t$sql .= createWhereClause($owner,$filter,$search,$daterange,$ok,$warning,$critical,$unknown);\n\n\t\t\t\t\t\t$request = sqlrequest($database_ged, $sql, false, $mysqli_prepare);\n\t\t\t\t\t\twhile($event = mysqli_fetch_object($request)){\n\t\t\t\t\t\t\t$event_state = getEventState($event);\n\t\t\t\t\t\t\t$row_class = getClassRow($event_state);\n\n\t\t\t\t\t\t\techo '<tr class=\"'.$row_class.'\" name=\"'.$ged_type[\"pkt_type_name\"].'\">';\n\t\t\t\t\t\t\tcreateTableRow($event, $event_state, $queue);\n\t\t\t\t\t\t\techo \"</tr>\";\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t?>\n\t\t\t</tbody>\n\t\t</table>\n\t</div>\n\n\t<div class=\"form-group\">\n\t\t<select id=\"ged-action\" class=\"form-control\" name=\"ged_actions\">\n\t\t\t<?php\n\t\t\t\tif($queue == \"active\"){\n\t\t\t\t\t$actions = $array_action_option;\n\t\t\t\t} else {\n\t\t\t\t\t$actions = $array_resolve_action_option;\n\t\t\t\t}\n\t\t\t\tforeach ($actions as $key => $value) {\n\t\t\t\t\techo \"<option value=\\\"$key\\\">\".getLabel(\"$value\").\"</option>\";\n\t\t\t\t}\n\t\t\t?>\n\t\t</select>\n\t</div>\n\t<button id=\"exec-ged-action\" class=\"btn btn-primary\" type=\"submit\" name=\"action\" value=\"submit\"><?php echo getLabel(\"action.submit\"); ?></button>\n\t<button id=\"select-all\" class=\"btn btn-primary\"><?php echo getLabel(\"action.select_all\"); ?></button>\n\t<button id=\"unselect-all\" class=\"btn btn-primary hidden\"><?php echo getLabel(\"action.unselect_all\"); ?></button>\n</form>\n\n<script src=\"/bower_components/datatables/media/js/jquery.dataTables.min.js\"></script>\n<script src=\"/bower_components/datatables-plugins/integration/bootstrap/3/dataTables.bootstrap.min.js\"></script>\n<script src=\"/bower_components/datatables-responsive/js/dataTables.responsive.js\"></script>\n<script type=\"text/javascript\">\n\t$('.datatable-eonweb-ajax').DataTable({\n\t\tresponsive: true,\n\t\tlengthMenu: [ [10, 25, 50, 100, -1], [10, 25, 50, 100, dictionnary['label.all']] ],\n\t\tlanguage: {\n\t\t\tlengthMenu: dictionnary['action.display'] + \" _MENU_ \" + dictionnary['label.entries'],\n\t\t\tsearch: dictionnary['action.search']+\":\",\n\t\t\tpaginate: {\n\t\t\t\tfirst:      dictionnary['action.first'],\n\t\t\t\tprevious:   dictionnary['action.previous'],\n\t\t\t\tnext:       dictionnary['action.next'],\n\t\t\t\tlast:       dictionnary['action.last']\n\t\t\t},\n\t\t\tinfo:           dictionnary['label.datatable.info'],\n\t\t\tinfoEmpty:      dictionnary['label.datatable.infoempty'],\n\t\t\tinfoFiltered:   dictionnary['label.datatable.infofiltered'],\n\t\t\tzeroRecords: \tdictionnary['label.datatable.zerorecords']\n\t\t},\n\t\taaSorting: []\n\t});\n</script>", "<?php \n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Quentin HOARAU\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\ninclude(\"../../include/config.php\");\ninclude(\"../../include/arrays.php\");\ninclude(\"../../include/function.php\"); \ninclude(\"ged_functions.php\");\n\n// create variables from $_GET\nextract($_GET);\nif(!isset($queue)) { $queue=\"active\"; } \nelseif(!in_array($queue,$array_ged_queues)) { $queue=\"active\"; }\n\nif(isset($action) && $action != \"\" && (isset($selected_events) && count($selected_events) > 0) || isset($filter_name) || isset($filter) ){\n\tswitch ($action) {\n\t\tcase \"0\":\n\t\t\tdetails($selected_events, $queue);\n\t\t\tbreak;\n\t\tcase \"1\":\n\t\t\tedit($selected_events, $queue);\n\t\t\tbreak;\n\t\tcase 'edit_event':\n\t\t\teditEvent($selected_events, $queue, $comments);\n\t\t\tbreak;\n\t\tcase 'edit_all_event':\n\t\t\teditAllEvents($selected_events, $queue, $comments);\n\t\t\tbreak;\n\t\tcase 'confirm':\n\t\t\tif($global_action == \"4\"){\n\t\t\t\tacknowledge($selected_events, $queue, $global_action);\n\t\t\t} elseif($global_action == \"5\") {\n\t\t\t\tdelete($selected_events, $queue);\n\t\t\t} else {\n\t\t\t\townDisown($selected_events, $queue, $global_action);\n\t\t\t}\n\t\t\tbreak;\n\t\tcase 'changeGedFilter':\n\t\t\tchangeGedFilter($filter_name);\n\t\t\tbreak;\n\t\tcase 'advancedFilterSearch':\n\t\t\tadvancedFilterSearch($queue, $filter);\n\t\t\tbreak;\n\t}\n}\n?>", "<?php\n/*\n#########################################\n#\n# Copyright (C) 2016 EyesOfNetwork Team\n# DEV NAME : Quentin HOARAU\n# VERSION : 5.0\n# APPLICATION : eonweb for eyesofnetwork project\n#\n# LICENCE :\n# This program is free software; you can redistribute it and/or\n# modify it under the terms of the GNU General Public License\n# as published by the Free Software Foundation; either version 2\n# of the License, or (at your option) any later version.\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n#########################################\n*/\n\ninclude(\"../../include/config.php\");\ninclude(\"../../include/arrays.php\");\n\nfunction getEventState($event)\n{\n\tswitch ($event->state) {\n\t\tcase 0: $event_state = \"OK\";\t\tbreak;\n\t\tcase 1: $event_state = \"WARNING\";\tbreak;\n\t\tcase 2: $event_state = \"CRITICAL\";\tbreak;\n\t\tcase 3: $event_state = \"UNKNOWN\";\tbreak;\n\t}\n\n\treturn $event_state;\n}\n\nfunction getClassRow($event_state)\n{\n\tswitch ($event_state) {\n\t\tcase \"OK\"\t\t: $row_class = \"success\";\tbreak;\n\t\tcase \"WARNING\"\t: $row_class = \"warning\";\tbreak;\n\t\tcase \"CRITICAL\"\t: $row_class = \"danger\"; \tbreak;\n\t\tcase \"UNKNOWN\"\t: $row_class = \"info\"; \t\tbreak;\n\t}\n\n\treturn $row_class;\n}\n\nfunction createTableRow($event, $event_state, $queue)\n{\n\tglobal $array_ged_queues;\n\tglobal $dateformat;\n\tglobal $ged_prefix;\n\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\t\n\tforeach ($event as $key => $value) {\n\t\t$class = \"\";\n\n\t\tif($key == \"equipment\"){\n\t\t\t$url_host = preg_replace(\"/^\".$ged_prefix.\"/\",\"\",$value,1);\n\t\t\t$thruk_url = urlencode(\"/thruk/cgi-bin/extinfo.cgi?type=1&host=$url_host\");\n\t\t\t$value = '<a href=\"../module_frame/index.php?url='.$thruk_url.'\">'.$value.'</a>';\n\t\t\t$class = 'class=\"host\"';\n\t\t}\n\t\tif($key == \"service\"){\n\t\t\t$url_host = preg_replace(\"/^\".$ged_prefix.\"/\",\"\",$event->equipment,1);\n\t\t\t$thruk_url = urlencode(\"/thruk/cgi-bin/extinfo.cgi?type=2&host=\".$url_host.\"&service=$value\");\n\t\t\t$value = '<a href=\"../module_frame/index.php?url='.$thruk_url.'\">'.$value.'</a>';\n\t\t\t$class = 'class=\"service\"';\n\t\t}\n\t\tif ($key == \"state\" || $key == \"comments\") {\n\t\t\tcontinue;\n\t\t}\n\t\tif($key == \"o_sec\" || $key == \"l_sec\"){\n\t\t\tif($queue == \"active\"){\n\t\t\t\t$value = time() - $value;\n\t\t\t\t$value = round($value/60);\n\t\t\t\t$value .= \" min\";\n\t\t\t} else {\n\t\t\t\t$value = date($dateformat, $value);\n\t\t\t}\n\t\t}\n\t\tif($key == \"id\"){\n\t\t\t$value = \"<input type='hidden' value='\".$value.\"'>\";\n\t\t\t$class = 'class=\"text-center\"';\n\t\t\tif($event->comments != \"\"){\n\t\t\t\t$value .= ' <i class=\"glyphicon glyphicon-comment\"></i>';\n\t\t\t}\n\t\t\tif($event->owner != \"\"){\n\t\t\t\t$value .= ' <i class=\"glyphicon glyphicon-floppy-disk\"></i>';\n\t\t\t}\n\t\t}\n\n\t\techo \"<td $class>$value</td>\";\n\t}\t\n}\n\nfunction createSelectClause($ged_type, $queue)\n{\n\tglobal $array_ged_queues; \n\tglobal $array_ged_packets;\n\tglobal $database_ged;\n\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\n\t$sql = \"SELECT id,\";\n\tforeach ($array_ged_packets as $key => $value) {\n\t\tif($value[\"col\"] == true){\n\t\t\tif(isset($value[\"db_col\"])){\n\t\t\t\t$sql .= $value[\"db_col\"].',';\n\t\t\t} else {\n\t\t\t\t$sql .= $key.',';\n\t\t\t}\n\t\t}\n\t}\n\t$sql .= \"comments\";\n\t//$sql = trim($sql, \",\");\n\t$sql .= \" FROM \".$ged_type.\"_queue_\".$queue;\n\t$sql .= \" WHERE id > 0\";\n\n\treturn $sql;\n}\n\nfunction createWhereClause($owner, $filter, $search, $daterange, $ok, $warning, $critical, $unknown)\n{\n\t\n\tglobal $mysqli_prepare;\n\t\n\t$where_clause = \"\";\n\t\n\t// owner\n\tif($owner == \"owned\"){ $where_clause .= \" AND owner != ''\"; }\n\telseif($owner == \"not owned\"){ $where_clause .= \" AND owner = ''\"; }\n\n\t// advanced search (with *)\n\tif($search != \"\"){\n\t\t$like = \"\";\n\t\tif( substr($search, 0, 1) === '*' ){\n\t\t\t$like .= \"%\";\n\t\t}\n\t\t$like .= trim($search, '*');\n\t\tif ( substr($search, -1) === '*' ) {\n\t\t\t$like .= \"%\";\n\t\t}\n\n\t\t$where_clause .= \" AND $filter LIKE ?\";\n\t\t$mysqli_prepare[0].=\"s\";\n\t\t$mysqli_prepare[]=(string)$like;\n\t}\n\n\t// daterange\n\tif($daterange != \"\"){\n\t\t$daterange_parts = explode(\" - \", $daterange);\n\t\t$start = $daterange_parts[0];\n\t\t$end = $daterange_parts[1];\n\n\t\t// modify start and end timestamp (1 Jan 1970 = -3600).\n\t\t// perhaps a little bug from DateRangePicker\n\t\t$start = strtotime($start);\n\t\t$start += 3600;\n\t\t$end = strtotime($end);\n\t\t$end += 86400 + 3600;\n\t\t$where_clause .= \" AND o_sec > ? AND o_sec < ?\";\n\t\t$mysqli_prepare[0].=\"ii\";\n\t\t$mysqli_prepare[]=(int)$start;\n\t\t$mysqli_prepare[]=(int)$end;\n\t}\n\n\t// states\n\t$states_list = \"\";\n\tif($ok != \"\")\t\t{ $states_list .= \"?,\"; $mysqli_prepare[0].=\"i\"; $mysqli_prepare[]=0; }\n\tif($warning != \"\")\t{ $states_list .= \"?,\"; $mysqli_prepare[0].=\"i\"; $mysqli_prepare[]=1; }\n\tif($critical != \"\")\t{ $states_list .= \"?,\"; $mysqli_prepare[0].=\"i\"; $mysqli_prepare[]=2; }\n\tif($unknown != \"\")\t{ $states_list .= \"?,\"; $mysqli_prepare[0].=\"i\"; $mysqli_prepare[]=3; }\n\t$states_list = trim($states_list, \",\");\n\t\n\tif($states_list != \"\"){\n\t\t$where_clause .= \" AND state IN ($states_list)\";\n\t}\n\n\t$where_clause .= \" ORDER BY o_sec DESC LIMIT 500\";\n\treturn $where_clause;\n}\n\nfunction createDetailRow($event, $db_col_name, $row_name)\n{\n\tglobal $dateformat;\n\n\t// display a good date format\n\tif($db_col_name == \"o_sec\" || $db_col_name == \"l_sec\" || $db_col_name == \"a_sec\"){\n\t\tif($db_col_name == \"a_sec\" && $event[\"queue\"] == \"a\"){\n\t\t\treturn false;\n\t\t}\n\t\tif($db_col_name == \"a_sec\" && $event[$db_col_name] == 0){\n\t\t\t$event[$db_col_name] = \"\";\n\t\t}\n\t\t$event[$db_col_name] = date($dateformat, $event[$db_col_name]+0);\n\t}\n\n\t// display a good state format\n\tif($db_col_name == \"state\"){\n\t\tswitch($event[$db_col_name]){\n\t\t\tcase 0: $event[$db_col_name] = \"OK\"; break;\n\t\t\tcase 1: $event[$db_col_name] = \"WARNING\"; break;\n\t\t\tcase 2: $event[$db_col_name] = \"CRITICAL\"; break;\n\t\t\tcase 3: $event[$db_col_name] = \"UNKNOWN\"; break;\n\t\t}\n\t}\n\n\techo '<tr>';\n\t\techo '<th scope=\"row\">'.getLabel($row_name).'</th>';\n\t\techo '<td>'.$event[$db_col_name].'</td>';\n\techo '</tr>';\n}\n\nfunction details($selected_events, $queue)\n{\n\tglobal $array_ged_queues; \n\tglobal $database_ged;\n\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\n\t// get all needed infos into variables\n\t$value_parts = explode(\":\", $selected_events);\n\t$id = $value_parts[0];\n\t$ged_type = $value_parts[1];\n\n\t$sql = \"SELECT * FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = ?\";\n\t$result = sqlrequest($database_ged, $sql, false, array(\"s\",(string)$id));\n\t$event = mysqli_fetch_assoc($result);\n\n\t// display event's details\n\techo '<table class=\"table table-hover table-condensed\">';\n\t\techo '<tbody>';\n\t\t\tcreateDetailRow($event, \"equipment\", \"label.host\");\n\t\t\tcreateDetailRow($event, \"host_alias\", \"label.host_alias\");\n\t\t\tcreateDetailRow($event, \"ip_address\", \"label.ip_address\");\n\t\t\tcreateDetailRow($event, \"service\", \"label.service\");\n\t\t\tcreateDetailRow($event, \"state\", \"label.state\");\n\t\t\tcreateDetailRow($event, \"description\", \"label.desc\");\n\t\t\tcreateDetailRow($event, \"occ\", \"label.occurence\");\n\t\t\tcreateDetailRow($event, \"o_sec\", \"label.o_time\");\n\t\t\tcreateDetailRow($event, \"l_sec\", \"label.l_time\");\n\t\t\tcreateDetailRow($event, \"a_sec\", \"label.a_time\");\n\t\t\tcreateDetailRow($event, \"hostgroups\", \"label.hostgroups\");\n\t\t\tcreateDetailRow($event, \"servicegroups\", \"label.servicegroups\");\n\t\t\tcreateDetailRow($event, \"src\", \"label.source\");\n\t\t\tcreateDetailRow($event, \"owner\", \"label.owner\");\n\t\t\tcreateDetailRow($event, \"comments\", \"label.comments\");\n\t\techo '</tbody>';\n\techo '</table>';\n}\n\nfunction edit($selected_events, $queue)\n{\n\tglobal $array_ged_queues; \n\tglobal $database_ged;\n\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\n\t// get all needed infos into variables\n\t$value_parts = explode(\":\", $selected_events);\n\t$id = $value_parts[0];\n\t$ged_type = $value_parts[1];\n\n\t$sql = \"SELECT comments FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = ?\";\n\t$result = sqlrequest($database_ged, $sql, false, array(\"s\",(string)$id));\n\t$event = mysqli_fetch_assoc($result);\n\n\techo \"\n\t<form id='edit-event-form'>\n\t\t<div class='form-group'>\n\t\t\t<label>\".getLabel(\"label.add_comment\").\"</label>\n\t\t\t<textarea id='event-comments' class='form-control textarea' rows='10'>\".$event[\"comments\"].\"</textarea>\n\t\t</div>\n\t</form>\";\n}\n\nfunction editEvent($selected_events, $queue, $comments)\n{\n\tglobal $array_ged_queues;\n\tglobal $database_ged;\n\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\t\n\t// get all needed infos into variables\n\t$value_parts = explode(\":\", $selected_events);\n\t$id = $value_parts[0];\n\t$ged_type = $value_parts[1];\n\n\t$sql = \"UPDATE \".$ged_type.\"_queue_\".$queue.\" SET comments=? WHERE id = ?\";\n\t$result = sqlrequest($database_ged, $sql, false, array(\"ss\",(string)$comments,(string)$id));\n\tif($result){\n\t\tmessage(11, \" : \".getLabel(\"message.event_edited\"), \"ok\");\n\t} else {\n\t\tmessage(11, \" : \".getLabel(\"message.event_edited_error\"), \"danger\");\n\t}\n}\n\nfunction editAllEvents($selected_events, $queue, $comments)\n{\n\tglobal $array_ged_queues;\n\tglobal $database_ged;\n\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\t\n\t$success = true;\n\tforeach ($selected_events as $key => $value) {\n\t\t// get all needed infos into variables\n\t\t$value_parts = explode(\":\", $value);\n\t\t$id = $value_parts[0];\n\t\t$ged_type = $value_parts[1];\n\n\t\t$sql = \"UPDATE \".$ged_type.\"_queue_\".$queue.\" SET comments=? WHERE id = ?\";\n\t\t$result = sqlrequest($database_ged, $sql, false, array(\"ss\",(string)$comments,(string)$id));\n\t\tif(!$result){\n\t\t\t$success = false;\n\t\t}\n\t}\n\n\t// display the final message\n\tif($success){\n\t\tmessage(11, \" : \".getLabel(\"message.event_edited\"), \"ok\");\n\t} else {\n\t\tmessage(11, \" : \".getLabel(\"message.event_edited_error\"), \"danger\");\n\t}\n}\n\nfunction ownDisown($selected_events, $queue, $global_action)\n{\n\tglobal $database_ged;\n\tglobal $array_ged_packets;\n\tglobal $array_ged_queues;\n\tglobal $path_ged_bin;\n\tglobal $array_serv_system;\n\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\t\n\tif(exec($array_serv_system[\"Ged agent\"][\"status\"])==NULL) {\n\t\treturn message(0,\" : ged daemon must be dead\",\"critical\");\n\t}\n\n\tif($global_action == 2){\n\t\t$owner = $_COOKIE['user_name'].\"@\".getenv(\"SERVER_NAME\");\n\t} else {\n\t\t$owner = \"\";\n\t}\n\n\tforeach ($selected_events as $value) {\n\t\t$value_parts = explode(\":\", $value);\n\t\t$id = $value_parts[0];\n\t\t$ged_type = $value_parts[1];\n\t\tif($ged_type == \"nagios\"){ $ged_type_nbr = 1; }\n\t\tif($ged_type == \"snmptrap\"){ $ged_type_nbr = 2; }\n\n\t\t$sql = \"SELECT * FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = ?\";\n\t\t$result = sqlrequest($database_ged, $sql, false, array(\"s\",(string)$id));\n\t\t$event = mysqli_fetch_assoc($result);\n\n\t\t$ged_command = \"-update -type $ged_type_nbr \";\n\t\tforeach ($array_ged_packets as $key => $value) {\n\t\t\tif($value[\"type\"] == true){\n\t\t\t\tif($key == \"owner\"){\n\t\t\t\t\t$event[$key] = $owner;\n\t\t\t\t}\n\t\t\t\t$ged_command .= \"\\\"\".$event[$key].\"\\\" \";\n\t\t\t}\n\t\t}\n\t\t$ged_command = trim($ged_command, \" \");\n\t\t$ged_command=escapeshellcmd($ged_command);\n\t\t\n\t\tshell_exec($path_ged_bin.\" \".$ged_command);\n\t\tlogging(\"ged_update\",$ged_command);\n\t}\n}\n\nfunction acknowledge($selected_events, $queue)\n{\n\tglobal $array_ged_queues;\n\tglobal $database_ged;\n\tglobal $array_ged_packets;\n\tglobal $path_ged_bin;\n\tglobal $array_serv_system;\n\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\t\n\tif(exec($array_serv_system[\"Ged agent\"][\"status\"])==NULL) {\n\t\treturn message(0,\" : ged daemon must be dead\",\"critical\");\n\t}\n\n\t$owner = $_COOKIE['user_name'].\"@\".getenv(\"SERVER_NAME\");\n\n\tforeach ($selected_events as $value) {\n\t\t$value_parts = explode(\":\", $value);\n\t\t$id = $value_parts[0];\n\t\t$ged_type = $value_parts[1];\n\t\tif($ged_type == \"nagios\"){ $ged_type_nbr = 1; }\n\t\tif($ged_type == \"snmptrap\"){ $ged_type_nbr = 2; }\n\n\t\t$event_to_delete = [];\n\t\tarray_push($event_to_delete, $value);\n\n\t\t$sql = \"SELECT * FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = ?\";\n\t\t$result = sqlrequest($database_ged, $sql, false, array(\"s\",(string)$id));\n\t\t$event = mysqli_fetch_assoc($result);\n\n\t\t$ged_command = \"-update -type $ged_type_nbr \";\n\t\tforeach ($array_ged_packets as $key => $value) {\n\t\t\tif($value[\"type\"] == true){\n\t\t\t\tif($key == \"owner\"){\n\t\t\t\t\t$event[$key] = $owner;\n\t\t\t\t}\n\t\t\t\t$ged_command .= \"\\\"\".$event[$key].\"\\\" \";\n\t\t\t}\n\t\t}\n\t\t$ged_command = trim($ged_command, \" \");\n\t\t$ged_command=escapeshellcmd($ged_command);\n\t\t\n\t\tshell_exec($path_ged_bin.\" \".$ged_command);\n\t\tlogging(\"ged_update\",$ged_command);\n\t\tdelete($event_to_delete, $queue);\n\t}\n}\n\nfunction delete($selected_events, $queue)\n{\n\tglobal $array_ged_queues;\n\tglobal $database_ged;\n\tglobal $array_ged_packets;\n\tglobal $path_ged_bin;\n\tglobal $array_serv_system;\n\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\t\n\tif(exec($array_serv_system[\"Ged agent\"][\"status\"])==NULL) {\n\t\treturn message(0,\" : ged daemon must be dead\",\"critical\");\n\t}\n\n\t$id_list = \"\";\n\tforeach ($selected_events as $value) {\n\t\t$value_parts = explode(\":\", $value);\n\t\t$id = $value_parts[0];\n\t\t$ged_type = $value_parts[1];\n\t\t$ged_type_nbr = 0;\n\t\tif($ged_type == \"nagios\"){ $ged_type_nbr = 1; }\n\t\tif($ged_type == \"snmptrap\"){ $ged_type_nbr = 2; }\n\n\t\t$sql = \"SELECT * FROM \".$ged_type.\"_queue_\".$queue.\" WHERE id = $id\";\n\t\t$result = sqlrequest($database_ged, $sql);\n\t\t$event = mysqli_fetch_assoc($result);\n\n\t\tif($queue == \"active\"){\n\t\t\t$ged_command = \"-drop -type $ged_type_nbr -queue $queue \";\n\t\t\tforeach ($array_ged_packets as $key => $value) {\n\t\t\t\tif($value[\"key\"] == true){\n\t\t\t\t\t$ged_command .= \"\\\"\".$event[$key].\"\\\" \";\n\t\t\t\t}\n\t\t\t}\n\t\t\t$ged_command = trim($ged_command, \" \");\n\t\t\t$ged_command=escapeshellcmd($ged_command);\n\t\t\t\t\t\n\t\t\tshell_exec($path_ged_bin.\" \".$ged_command);\n\t\t\tlogging(\"ged_update\",$ged_command);\n\t\t} else {\n\t\t\t$id_list .= $id.\",\";\n\t\t}\n\t}\n\n\tif($queue == \"history\"){\n\t\t$id_list = trim($id_list, \",\");\n\t\t$ged_command = \"-drop -id \".$id_list.\" -queue history\";\n\t\t$ged_command=escapeshellcmd($ged_command);\n\t\t\n\t\tshell_exec($path_ged_bin.\" \".$ged_command);\n\t\tlogging(\"ged_update\",$ged_command);\n\t}\n}\n\n// Open Xml function\nfunction openXml($file=false)\n{\n\t$dom = new DOMDocument(\"1.0\",\"UTF-8\");\n\t$dom->preserveWhiteSpace = false;\n\t$dom->formatOutput = true;\n\tif($file)\n\t\t$dom->load($file);\n\treturn $dom;\n}\n\nfunction changeGedFilter($filter_name)\n{\n\t$file=\"../../cache/\".$_COOKIE[\"user_name\"].\"-ged.xml\";\n\n\tif(file_exists($file)){\n\t\t$xmlfilters = new DOMDocument(\"1.0\",\"UTF-8\");\n\t\t$xmlfilters->load($file);\n\n\t\t$root = $xmlfilters->getElementsByTagName(\"ged\")->item(0);\n\t\t$root->removeChild($root->getElementsByTagName('default')->item(0));\n\t\t$default = $xmlfilters->createElement(\"default\");\n\t\t$default = $root->appendChild($default);\n\t\t$default = $root->getElementsByTagName(\"default\")->item(0);\n\t\t$default->appendChild($xmlfilters->createTextNode($filter_name));\n\t\t$xmlfilters->save($file);\n\t}\n}\n\n// advanced search autocomplete\nfunction advancedFilterSearch($queue, $filter)\n{\n\tglobal $array_ged_packets;\n\tglobal $array_ged_queues;\n\tglobal $database_ged;\n\t$datas = array();\n\t\n\tif(!in_array($queue,$array_ged_queues)) { $queue=$array_ged_queues[0]; }\n\n\tif($filter == \"description\"){\n\t\techo json_encode($datas);\n\t\treturn false;\n\t}\n\n\t$gedsql_result1=sqlrequest($database_ged,\"SELECT pkt_type_id,pkt_type_name FROM pkt_type WHERE pkt_type_id!='0' AND pkt_type_id<'100';\");\n\t\n\tif(isset($array_ged_packets[$filter])) {\n\t\twhile($ged_type = mysqli_fetch_assoc($gedsql_result1)){\n\t\t\t$sql = \"SELECT DISTINCT $filter FROM \".$ged_type[\"pkt_type_name\"].\"_queue_\".$queue;\n\n\t\t\t$results = sqlrequest($database_ged, $sql);\n\t\t\twhile($result = mysqli_fetch_array($results)){\n\t\t\t\tif( !in_array($result[$filter], $datas) && $result[$filter] != \"\" ){\n\t\t\t\t\tarray_push($datas, $result[$filter]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\techo json_encode($datas);\n}\n\n?>\n"], "filenames": ["include/arrays.php", "include/function.php", "module/admin_bp/php/auto_completion.php", "module/admin_bp/php/function_bp.php", "module/admin_user/search.php", "module/index.php", "module/monitoring_ged/ajax.php", "module/monitoring_ged/ged_actions.php", "module/monitoring_ged/ged_functions.php"], "buggy_code_start_loc": [39, 66, 2, 1, 28, 26, 28, 29, 51], "buggy_code_end_loc": [62, 88, 20, 338, 29, 30, 148, 29, 503], "fixing_code_start_loc": [40, 66, 1, 2, 28, 26, 29, 30, 52], "fixing_code_end_loc": [67, 102, 24, 363, 30, 34, 172, 32, 536], "type": "CWE-78", "message": "EyesOfNetwork (\"EON\") 5.0 and earlier allows remote authenticated users to execute arbitrary code via shell metacharacters in the selected_events[] parameter in the (1) acknowledge, (2) delete, or (3) ownDisown function in module/monitoring_ged/ged_functions.php or the (4) module parameter to module/index.php.", "other": {"cve": {"id": "CVE-2017-6087", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-24T14:59:00.337", "lastModified": "2019-10-03T00:03:26.223", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "EyesOfNetwork (\"EON\") 5.0 and earlier allows remote authenticated users to execute arbitrary code via shell metacharacters in the selected_events[] parameter in the (1) acknowledge, (2) delete, or (3) ownDisown function in module/monitoring_ged/ged_functions.php or the (4) module parameter to module/index.php."}, {"lang": "es", "value": "EyesOfNetwork (\"EON\") 5.0 y versiones anteriores permite a usuarios remotos autenticados ejecutar c\u00f3digo arbitrario a trav\u00e9s de metacaracteres de shell en el par\u00e1metro selected_events[] en la funci\u00f3n (1) acknowledge, (2) delete o (3) ownDisown en module/monitoring_ged/ged_functions.php o el par\u00e1metro (4) module para module/index.php."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:eonweb_project:eonweb:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.0-0", "matchCriteriaId": "DAF7DE70-DC0F-49D1-88D5-5BFBD9CC9879"}]}]}], "references": [{"url": "http://www.openwall.com/lists/oss-security/2017/03/23/5", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/97109", "source": "cve@mitre.org"}, {"url": "https://github.com/EyesOfNetworkCommunity/eonweb/commit/196729cc045ef93ceeddd1de505a1de8f9cdf74d", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://sysdream.com/news/lab/2017-03-14-cve-2017-6087-eon-5-0-remote-code-execution/", "source": "cve@mitre.org"}, {"url": "https://www.exploit-db.com/exploits/41746/", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/EyesOfNetworkCommunity/eonweb/commit/196729cc045ef93ceeddd1de505a1de8f9cdf74d"}}