{"buggy_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/array_ops.cc\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/reverse_op.h\"\n#include <memory>\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/bounds_check.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/type_traits.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace {\n\n// Reverse rows (middle dimension) of a three dimensional tensor.\n// NUM_CHANNELS can be <= 0 to compute it dynamically from <input>\n// Otherwise, it must equal input.dim_size(2) and is used as a compile-time\n// constant.\ntemplate <typename T, int NUM_CHANNELS>\nvoid ReverseRows(OpKernelContext* context, const Tensor& input,\n                 Tensor* result) {\n  auto work = [&input, result](int64 start, int64 end) {\n    const int64 inner_size =\n        NUM_CHANNELS > 0 ? NUM_CHANNELS : input.dim_size(2);\n    const int64 middle_size = input.dim_size(1);\n    const int64 row_size = inner_size * middle_size;\n    DCHECK_EQ(input.dim_size(2), inner_size);\n\n    const T* in_ptr = input.bit_casted_tensor<T, 3>().data();\n    T* out_ptr = result->bit_casted_tensor<T, 3>().data();\n\n    in_ptr += start * row_size;\n    out_ptr += start * row_size;\n\n    for (int outer_dim = start; outer_dim < end; ++outer_dim) {\n      out_ptr += row_size;\n      int remaining = middle_size;\n      while (remaining > 0) {\n        out_ptr -= inner_size;\n        memcpy(out_ptr, in_ptr, inner_size * sizeof(T));\n        in_ptr += inner_size;\n        --remaining;\n      }\n\n      out_ptr += row_size;\n    }\n  };\n\n  // Shard across outer dimension.\n  const int64 N = input.dim_size(0);\n  const int64 cost_per_unit = input.NumElements() / N;\n  auto worker_threads = context->device()->tensorflow_cpu_worker_threads();\n  Shard(worker_threads->num_threads, worker_threads->workers, N, cost_per_unit,\n        std::move(work));\n}\n\ntemplate <typename T>\nstruct data_type_can_memcpy {\n  static constexpr bool value =\n      std::is_same<T, uint8>::value || std::is_same<T, int8>::value ||\n      std::is_same<T, bool>::value || std::is_same<T, uint16>::value ||\n      std::is_same<T, int16>::value || std::is_same<T, Eigen::half>::value ||\n      std::is_same<T, int32>::value || std::is_same<T, float>::value ||\n      std::is_same<T, int64>::value || std::is_same<T, double>::value ||\n      std::is_same<T, complex64>::value || std::is_same<T, complex128>::value;\n};\n\ntemplate <typename T, int NUM_CHANNELS>\ntypename std::enable_if<data_type_can_memcpy<T>::value>::type\nDoHandleReverseCase(OpKernelContext* context, const Tensor& input,\n                    Tensor* result) {\n  if (sizeof(T) == 1) {\n    static_assert(sizeof(uint8) == 1, \"uint8 must be 1 byte.\");\n    ReverseRows<uint8, NUM_CHANNELS>(context, input, result);\n  } else if (sizeof(T) == 2) {\n    static_assert(sizeof(uint16) == 2, \"uint16 must be 2 bytes\");\n    ReverseRows<uint16, NUM_CHANNELS>(context, input, result);\n  } else if (sizeof(T) == 4) {\n    static_assert(sizeof(uint32) == 4, \"uint32 must be 4 bytes\");\n    ReverseRows<uint32, NUM_CHANNELS>(context, input, result);\n  } else if (sizeof(T) == 8) {\n    static_assert(sizeof(uint64) == 8, \"uint64 must be 8 bytes\");\n    ReverseRows<uint64, NUM_CHANNELS>(context, input, result);\n  } else if (sizeof(T) == 16) {\n    static_assert(sizeof(complex128) == 16, \"complex128 must be 16 bytes\");\n    ReverseRows<complex128, NUM_CHANNELS>(context, input, result);\n  } else {\n    context->CtxFailure(errors::InvalidArgument(DataTypeString(input.dtype()),\n                                                \" has unexpected size of \",\n                                                sizeof(T), \" bytes\"));\n  }\n}\n\ntemplate <typename T, int NUM_CHANNELS>\ntypename std::enable_if<!data_type_can_memcpy<T>::value>::type\nDoHandleReverseCase(OpKernelContext* context, const Tensor& input,\n                    Tensor* result) {}\n\n}  // namespace\n\ntemplate <typename Device, typename T, int NDIMS>\nvoid HandleReverseCase(OpKernelContext* context,\n                       typename TTypes<bool, 1>::ConstTensor dims,\n                       Tensor* result) {\n  const Tensor& input = context->input(0);\n\n  // Use optimized reverse if possible.\n  if (NDIMS == 3 && std::is_same<Device, CPUDevice>::value &&\n      data_type_can_memcpy<T>::value && (!dims(0) && dims(1) && !dims(2))) {\n    if (input.dim_size(2) == 3) {\n      DoHandleReverseCase<T, 3>(context, input, result);\n    } else {\n      DoHandleReverseCase<T, -1>(context, input, result);\n    }\n    return;\n  }\n  typename Eigen::array<bool, NDIMS> axes_di;\n  for (int i = 0; i < NDIMS; i++) {\n    axes_di[i] = dims(i);\n  }\n  functor::Reverse<Device, T, NDIMS>()(context->eigen_device<Device>(),\n                                       input.tensor<T, NDIMS>(), axes_di,\n                                       result->tensor<T, NDIMS>());\n}\n\ntemplate <typename Device, typename T>\nclass ReverseOp : public OpKernel {\n public:\n  explicit ReverseOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& dims = context->input(1);\n\n    if (TensorShapeUtils::IsScalar(input.shape())) {\n      context->set_output(0, input);\n    } else {\n      const int input_dims = input.dims();\n      OP_REQUIRES(context, TensorShapeUtils::IsVector(dims.shape()),\n                  errors::InvalidArgument(\"'dims' must be 1-dimension, not \",\n                                          dims.dims()));\n\n      OP_REQUIRES(\n          context, input_dims == dims.dim_size(0),\n          errors::InvalidArgument(\n              \"'dims' must have the same number of values as 'input' has \"\n              \"dimensions. 'input' has \",\n              input_dims, \"'dims' has \", dims.dim_size(0), \" values\"));\n      OP_REQUIRES(context, input_dims <= 8,\n                  errors::Unimplemented(\n                      \"reverse is not implemented for tensors of rank > 8.\"));\n\n      Tensor* output = nullptr;\n      OP_REQUIRES_OK(context,\n                     context->allocate_output(0, input.shape(), &output));\n\n#define HANDLE_REVERSE(NDIMS)                                               \\\n  case NDIMS:                                                               \\\n    HandleReverseCase<Device, T, NDIMS>(context, dims.vec<bool>(), output); \\\n    return;\n\n      switch (input_dims) {\n        HANDLE_REVERSE(0);\n        HANDLE_REVERSE(1);\n        HANDLE_REVERSE(2);\n        HANDLE_REVERSE(3);\n        HANDLE_REVERSE(4);\n        HANDLE_REVERSE(5);\n        HANDLE_REVERSE(6);\n        HANDLE_REVERSE(7);\n        HANDLE_REVERSE(8);\n      }\n#undef HANDLE_REVERSE\n    }\n  }\n};\n\ntemplate <typename Device, typename T, int NDIMS>\nvoid HandleReverseV2Case(OpKernelContext* context,\n                         const gtl::ArraySlice<bool> axes, Tensor* result) {\n  const Tensor& input = context->input(0);\n\n  // Use optimized reverse if possible.\n  if (NDIMS == 3 && std::is_same<Device, CPUDevice>::value &&\n      data_type_can_memcpy<T>::value && (!axes[0] && axes[1] && !axes[2])) {\n    if (input.dim_size(2) == 3) {\n      DoHandleReverseCase<T, 3>(context, input, result);\n    } else {\n      DoHandleReverseCase<T, -1>(context, input, result);\n    }\n    return;\n  }\n\n  typename Eigen::array<bool, NDIMS> axes_di;\n  for (int i = 0; i < NDIMS; i++) {\n    axes_di[i] = axes[i];\n  }\n  functor::Reverse<Device, T, NDIMS>()(context->eigen_device<Device>(),\n                                       input.tensor<T, NDIMS>(), axes_di,\n                                       result->tensor<T, NDIMS>());\n}\n\ntemplate <typename Device, typename T, typename Tidx>\nclass ReverseV2Op : public OpKernel {\n public:\n  explicit ReverseV2Op(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& sparse_dims = context->input(1);\n\n    if (TensorShapeUtils::IsScalar(input.shape()) || input.NumElements() == 0) {\n      context->set_output(0, input);\n    } else {\n      const int input_dims = input.dims();\n      const TensorShape& sparse_dims_shape = sparse_dims.shape();\n      const auto& axes_sparse_flat = sparse_dims.flat<Tidx>();\n\n      OP_REQUIRES(context, TensorShapeUtils::IsVector(sparse_dims_shape),\n                  errors::InvalidArgument(\"'dims' must be 1-dimension, not \",\n                                          sparse_dims.dims()));\n      gtl::InlinedVector<bool, 8> axes_dense(input_dims, false);\n      for (int dummy = 0; dummy < axes_sparse_flat.size(); dummy++) {\n        Tidx axis = internal::SubtleMustCopy<Tidx>(axes_sparse_flat(dummy));\n        Tidx canonical_axis = axis < 0 ? input_dims + axis : axis;\n        OP_REQUIRES(context, canonical_axis >= 0 && canonical_axis < input_dims,\n                    errors::InvalidArgument(\"'axis'[\", dummy, \"] = \", axis,\n                                            \" is out of valid range [\", 0, \", \",\n                                            input_dims - 1));\n        OP_REQUIRES(context, !axes_dense[canonical_axis],\n                    errors::InvalidArgument(\"axis \", canonical_axis,\n                                            \" specified more than once.\"));\n        axes_dense[canonical_axis] = true;\n      }\n\n      OP_REQUIRES(context, input_dims <= 8,\n                  errors::Unimplemented(\n                      \"reverse is not implemented for tensors of rank > 8.\"));\n\n      Tensor* output = nullptr;\n      OP_REQUIRES_OK(context,\n                     context->allocate_output(0, input.shape(), &output));\n\n      // TODO(cwhipkey): we can do dimension folding to reduce, e.g., a reverse\n      // of a single dimension to the dims=3 or dims=2 case, regardless of the\n      // number of dimensions in the tensor. This would let some ops use faster\n      // lower-dimension code (and use optimized versions).\n\n#define HANDLE_REVERSE(NDIMS)                                           \\\n  case NDIMS:                                                           \\\n    HandleReverseV2Case<Device, T, NDIMS>(context, axes_dense, output); \\\n    return;\n\n      switch (input_dims) {\n        HANDLE_REVERSE(0);\n        HANDLE_REVERSE(1);\n        HANDLE_REVERSE(2);\n        HANDLE_REVERSE(3);\n        HANDLE_REVERSE(4);\n        HANDLE_REVERSE(5);\n        HANDLE_REVERSE(6);\n        HANDLE_REVERSE(7);\n        HANDLE_REVERSE(8);\n      }\n#undef HANDLE_REVERSE\n    }\n  }\n};\n\n#define REGISTER_KERNELS(T)                                  \\\n  REGISTER_KERNEL_BUILDER(Name(\"Reverse\")                    \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .HostMemory(\"dims\"),           \\\n                          ReverseOp<CPUDevice, T>)           \\\n  REGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")                  \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<int32>(\"Tidx\") \\\n                              .HostMemory(\"axis\"),           \\\n                          ReverseV2Op<CPUDevice, T, int32>)  \\\n  REGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")                  \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<int64>(\"Tidx\") \\\n                              .HostMemory(\"axis\"),           \\\n                          ReverseV2Op<CPUDevice, T, int64>)\nTF_CALL_POD_TYPES(REGISTER_KERNELS);\nTF_CALL_tstring(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n// Forward declarations of the function specializations for GPU (to prevent\n// building the GPU versions here, they will be built compiling _gpu.cu.cc).\nnamespace functor {\n#define DECLARE_GPU_SPEC_DIM(T, DIM)                                  \\\n  template <>                                                         \\\n  void Reverse<GPUDevice, T, DIM>::operator()(                        \\\n      const GPUDevice& d, typename TTypes<T, DIM>::ConstTensor input, \\\n      const Eigen::array<bool, DIM>& reverse_dims,                    \\\n      typename TTypes<T, DIM>::Tensor output);                        \\\n  extern template struct Reverse<GPUDevice, T, DIM>;\n#define DECLARE_GPU_SPEC(T)  \\\n  DECLARE_GPU_SPEC_DIM(T, 0) \\\n  DECLARE_GPU_SPEC_DIM(T, 1) \\\n  DECLARE_GPU_SPEC_DIM(T, 2) \\\n  DECLARE_GPU_SPEC_DIM(T, 3) \\\n  DECLARE_GPU_SPEC_DIM(T, 4) \\\n  DECLARE_GPU_SPEC_DIM(T, 5) \\\n  DECLARE_GPU_SPEC_DIM(T, 6) \\\n  DECLARE_GPU_SPEC_DIM(T, 7) \\\n  DECLARE_GPU_SPEC_DIM(T, 8)\n\nTF_CALL_uint8(DECLARE_GPU_SPEC);\nTF_CALL_int8(DECLARE_GPU_SPEC);\nTF_CALL_GPU_ALL_TYPES(DECLARE_GPU_SPEC);\n#undef DECLARE_GPU_SPEC\n#undef DECLARE_GPU_SPEC_DIM\n}  // namespace functor\n\n// Registration of the GPU implementations.\n#define REGISTER_GPU_KERNELS(T)                              \\\n  REGISTER_KERNEL_BUILDER(Name(\"Reverse\")                    \\\n                              .Device(DEVICE_GPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .HostMemory(\"dims\"),           \\\n                          ReverseOp<GPUDevice, T>)           \\\n  REGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")                  \\\n                              .Device(DEVICE_GPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<int32>(\"Tidx\") \\\n                              .HostMemory(\"axis\"),           \\\n                          ReverseV2Op<GPUDevice, T, int32>)  \\\n  REGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")                  \\\n                              .Device(DEVICE_GPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<int64>(\"Tidx\") \\\n                              .HostMemory(\"axis\"),           \\\n                          ReverseV2Op<GPUDevice, T, int64>)\nTF_CALL_uint8(REGISTER_GPU_KERNELS);\nTF_CALL_int8(REGISTER_GPU_KERNELS);\nTF_CALL_GPU_ALL_TYPES(REGISTER_GPU_KERNELS);\n#undef REGISTER_GPU_KERNEL\n\n// A special GPU kernel for int32.\n// TODO(b/25387198): Also enable int32 in device memory. This kernel\n// registration requires all int32 inputs and outputs to be in host memory.\nREGISTER_KERNEL_BUILDER(Name(\"Reverse\")\n                            .Device(DEVICE_GPU)\n                            .TypeConstraint<int32>(\"T\")\n                            .HostMemory(\"tensor\")\n                            .HostMemory(\"dims\")\n                            .HostMemory(\"output\"),\n                        ReverseOp<CPUDevice, int32>);\nREGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")\n                            .Device(DEVICE_GPU)\n                            .TypeConstraint<int32>(\"T\")\n                            .TypeConstraint<int32>(\"Tidx\")\n                            .HostMemory(\"tensor\")\n                            .HostMemory(\"axis\")\n                            .HostMemory(\"output\"),\n                        ReverseV2Op<CPUDevice, int32, int32>);\nREGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")\n                            .Device(DEVICE_GPU)\n                            .TypeConstraint<int32>(\"T\")\n                            .TypeConstraint<int64>(\"Tidx\")\n                            .HostMemory(\"tensor\")\n                            .HostMemory(\"axis\")\n                            .HostMemory(\"output\"),\n                        ReverseV2Op<CPUDevice, int32, int64>);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n}  // namespace tensorflow\n"], "fixing_code": ["/* Copyright 2015 The TensorFlow Authors. All Rights Reserved.\n\nLicensed under the Apache License, Version 2.0 (the \"License\");\nyou may not use this file except in compliance with the License.\nYou may obtain a copy of the License at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable law or agreed to in writing, software\ndistributed under the License is distributed on an \"AS IS\" BASIS,\nWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\nSee the License for the specific language governing permissions and\nlimitations under the License.\n==============================================================================*/\n\n// See docs in ../ops/array_ops.cc\n#define EIGEN_USE_THREADS\n\n#include \"tensorflow/core/kernels/reverse_op.h\"\n#include <memory>\n#include \"third_party/eigen3/unsupported/Eigen/CXX11/Tensor\"\n#include \"tensorflow/core/framework/bounds_check.h\"\n#include \"tensorflow/core/framework/op_kernel.h\"\n#include \"tensorflow/core/framework/register_types.h\"\n#include \"tensorflow/core/framework/tensor.h\"\n#include \"tensorflow/core/framework/tensor_shape.h\"\n#include \"tensorflow/core/framework/type_traits.h\"\n#include \"tensorflow/core/framework/types.h\"\n#include \"tensorflow/core/lib/core/status.h\"\n#include \"tensorflow/core/platform/logging.h\"\n#include \"tensorflow/core/util/work_sharder.h\"\n\nnamespace tensorflow {\n\ntypedef Eigen::ThreadPoolDevice CPUDevice;\ntypedef Eigen::GpuDevice GPUDevice;\n\nnamespace {\n\n// Reverse rows (middle dimension) of a three dimensional tensor.\n// NUM_CHANNELS can be <= 0 to compute it dynamically from <input>\n// Otherwise, it must equal input.dim_size(2) and is used as a compile-time\n// constant.\ntemplate <typename T, int NUM_CHANNELS>\nvoid ReverseRows(OpKernelContext* context, const Tensor& input,\n                 Tensor* result) {\n  auto work = [&input, result](int64 start, int64 end) {\n    const int64 inner_size =\n        NUM_CHANNELS > 0 ? NUM_CHANNELS : input.dim_size(2);\n    const int64 middle_size = input.dim_size(1);\n    const int64 row_size = inner_size * middle_size;\n    DCHECK_EQ(input.dim_size(2), inner_size);\n\n    const T* in_ptr = input.bit_casted_tensor<T, 3>().data();\n    T* out_ptr = result->bit_casted_tensor<T, 3>().data();\n\n    in_ptr += start * row_size;\n    out_ptr += start * row_size;\n\n    for (int outer_dim = start; outer_dim < end; ++outer_dim) {\n      out_ptr += row_size;\n      int remaining = middle_size;\n      while (remaining > 0) {\n        out_ptr -= inner_size;\n        memcpy(out_ptr, in_ptr, inner_size * sizeof(T));\n        in_ptr += inner_size;\n        --remaining;\n      }\n\n      out_ptr += row_size;\n    }\n  };\n\n  // Shard across outer dimension.\n  const int64 N = input.dim_size(0);\n  const int64 cost_per_unit = input.NumElements() / N;\n  auto worker_threads = context->device()->tensorflow_cpu_worker_threads();\n  Shard(worker_threads->num_threads, worker_threads->workers, N, cost_per_unit,\n        std::move(work));\n}\n\ntemplate <typename T>\nstruct data_type_can_memcpy {\n  static constexpr bool value =\n      std::is_same<T, uint8>::value || std::is_same<T, int8>::value ||\n      std::is_same<T, bool>::value || std::is_same<T, uint16>::value ||\n      std::is_same<T, int16>::value || std::is_same<T, Eigen::half>::value ||\n      std::is_same<T, int32>::value || std::is_same<T, float>::value ||\n      std::is_same<T, int64>::value || std::is_same<T, double>::value ||\n      std::is_same<T, complex64>::value || std::is_same<T, complex128>::value;\n};\n\ntemplate <typename T, int NUM_CHANNELS>\ntypename std::enable_if<data_type_can_memcpy<T>::value>::type\nDoHandleReverseCase(OpKernelContext* context, const Tensor& input,\n                    Tensor* result) {\n  if (sizeof(T) == 1) {\n    static_assert(sizeof(uint8) == 1, \"uint8 must be 1 byte.\");\n    ReverseRows<uint8, NUM_CHANNELS>(context, input, result);\n  } else if (sizeof(T) == 2) {\n    static_assert(sizeof(uint16) == 2, \"uint16 must be 2 bytes\");\n    ReverseRows<uint16, NUM_CHANNELS>(context, input, result);\n  } else if (sizeof(T) == 4) {\n    static_assert(sizeof(uint32) == 4, \"uint32 must be 4 bytes\");\n    ReverseRows<uint32, NUM_CHANNELS>(context, input, result);\n  } else if (sizeof(T) == 8) {\n    static_assert(sizeof(uint64) == 8, \"uint64 must be 8 bytes\");\n    ReverseRows<uint64, NUM_CHANNELS>(context, input, result);\n  } else if (sizeof(T) == 16) {\n    static_assert(sizeof(complex128) == 16, \"complex128 must be 16 bytes\");\n    ReverseRows<complex128, NUM_CHANNELS>(context, input, result);\n  } else {\n    context->CtxFailure(errors::InvalidArgument(DataTypeString(input.dtype()),\n                                                \" has unexpected size of \",\n                                                sizeof(T), \" bytes\"));\n  }\n}\n\ntemplate <typename T, int NUM_CHANNELS>\ntypename std::enable_if<!data_type_can_memcpy<T>::value>::type\nDoHandleReverseCase(OpKernelContext* context, const Tensor& input,\n                    Tensor* result) {}\n\n}  // namespace\n\ntemplate <typename Device, typename T, int NDIMS>\nvoid HandleReverseCase(OpKernelContext* context,\n                       typename TTypes<bool, 1>::ConstTensor dims,\n                       Tensor* result) {\n  const Tensor& input = context->input(0);\n\n  // Use optimized reverse if possible.\n  if (NDIMS == 3 && std::is_same<Device, CPUDevice>::value &&\n      data_type_can_memcpy<T>::value && (!dims(0) && dims(1) && !dims(2))) {\n    if (input.dim_size(2) == 3) {\n      DoHandleReverseCase<T, 3>(context, input, result);\n    } else {\n      DoHandleReverseCase<T, -1>(context, input, result);\n    }\n    return;\n  }\n  typename Eigen::array<bool, NDIMS> axes_di;\n  for (int i = 0; i < NDIMS; i++) {\n    axes_di[i] = dims(i);\n  }\n  functor::Reverse<Device, T, NDIMS>()(context->eigen_device<Device>(),\n                                       input.tensor<T, NDIMS>(), axes_di,\n                                       result->tensor<T, NDIMS>());\n}\n\ntemplate <typename Device, typename T>\nclass ReverseOp : public OpKernel {\n public:\n  explicit ReverseOp(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    // If input is provided, check to make sure the first dimension is valid.\n    if (input.dims() > 0) {\n      OP_REQUIRES(\n          context, input.dim_size(0) != 0,\n          errors::InvalidArgument(\"Invalid input first dimension. Found 0.\"));\n    }\n    const Tensor& dims = context->input(1);\n\n    if (TensorShapeUtils::IsScalar(input.shape())) {\n      context->set_output(0, input);\n    } else {\n      const int input_dims = input.dims();\n      OP_REQUIRES(context, TensorShapeUtils::IsVector(dims.shape()),\n                  errors::InvalidArgument(\"'dims' must be 1-dimension, not \",\n                                          dims.dims()));\n\n      OP_REQUIRES(\n          context, input_dims == dims.dim_size(0),\n          errors::InvalidArgument(\n              \"'dims' must have the same number of values as 'input' has \"\n              \"dimensions. 'input' has \",\n              input_dims, \"'dims' has \", dims.dim_size(0), \" values\"));\n      OP_REQUIRES(context, input_dims <= 8,\n                  errors::Unimplemented(\n                      \"reverse is not implemented for tensors of rank > 8.\"));\n\n      Tensor* output = nullptr;\n      OP_REQUIRES_OK(context,\n                     context->allocate_output(0, input.shape(), &output));\n\n#define HANDLE_REVERSE(NDIMS)                                               \\\n  case NDIMS:                                                               \\\n    HandleReverseCase<Device, T, NDIMS>(context, dims.vec<bool>(), output); \\\n    return;\n\n      switch (input_dims) {\n        HANDLE_REVERSE(0);\n        HANDLE_REVERSE(1);\n        HANDLE_REVERSE(2);\n        HANDLE_REVERSE(3);\n        HANDLE_REVERSE(4);\n        HANDLE_REVERSE(5);\n        HANDLE_REVERSE(6);\n        HANDLE_REVERSE(7);\n        HANDLE_REVERSE(8);\n      }\n#undef HANDLE_REVERSE\n    }\n  }\n};\n\ntemplate <typename Device, typename T, int NDIMS>\nvoid HandleReverseV2Case(OpKernelContext* context,\n                         const gtl::ArraySlice<bool> axes, Tensor* result) {\n  const Tensor& input = context->input(0);\n\n  // Use optimized reverse if possible.\n  if (NDIMS == 3 && std::is_same<Device, CPUDevice>::value &&\n      data_type_can_memcpy<T>::value && (!axes[0] && axes[1] && !axes[2])) {\n    if (input.dim_size(2) == 3) {\n      DoHandleReverseCase<T, 3>(context, input, result);\n    } else {\n      DoHandleReverseCase<T, -1>(context, input, result);\n    }\n    return;\n  }\n\n  typename Eigen::array<bool, NDIMS> axes_di;\n  for (int i = 0; i < NDIMS; i++) {\n    axes_di[i] = axes[i];\n  }\n  functor::Reverse<Device, T, NDIMS>()(context->eigen_device<Device>(),\n                                       input.tensor<T, NDIMS>(), axes_di,\n                                       result->tensor<T, NDIMS>());\n}\n\ntemplate <typename Device, typename T, typename Tidx>\nclass ReverseV2Op : public OpKernel {\n public:\n  explicit ReverseV2Op(OpKernelConstruction* context) : OpKernel(context) {}\n\n  void Compute(OpKernelContext* context) override {\n    const Tensor& input = context->input(0);\n    const Tensor& sparse_dims = context->input(1);\n\n    if (TensorShapeUtils::IsScalar(input.shape()) || input.NumElements() == 0) {\n      context->set_output(0, input);\n    } else {\n      const int input_dims = input.dims();\n      const TensorShape& sparse_dims_shape = sparse_dims.shape();\n      const auto& axes_sparse_flat = sparse_dims.flat<Tidx>();\n\n      OP_REQUIRES(context, TensorShapeUtils::IsVector(sparse_dims_shape),\n                  errors::InvalidArgument(\"'dims' must be 1-dimension, not \",\n                                          sparse_dims.dims()));\n      gtl::InlinedVector<bool, 8> axes_dense(input_dims, false);\n      for (int dummy = 0; dummy < axes_sparse_flat.size(); dummy++) {\n        Tidx axis = internal::SubtleMustCopy<Tidx>(axes_sparse_flat(dummy));\n        Tidx canonical_axis = axis < 0 ? input_dims + axis : axis;\n        OP_REQUIRES(context, canonical_axis >= 0 && canonical_axis < input_dims,\n                    errors::InvalidArgument(\"'axis'[\", dummy, \"] = \", axis,\n                                            \" is out of valid range [\", 0, \", \",\n                                            input_dims - 1));\n        OP_REQUIRES(context, !axes_dense[canonical_axis],\n                    errors::InvalidArgument(\"axis \", canonical_axis,\n                                            \" specified more than once.\"));\n        axes_dense[canonical_axis] = true;\n      }\n\n      OP_REQUIRES(context, input_dims <= 8,\n                  errors::Unimplemented(\n                      \"reverse is not implemented for tensors of rank > 8.\"));\n\n      Tensor* output = nullptr;\n      OP_REQUIRES_OK(context,\n                     context->allocate_output(0, input.shape(), &output));\n\n      // TODO(cwhipkey): we can do dimension folding to reduce, e.g., a reverse\n      // of a single dimension to the dims=3 or dims=2 case, regardless of the\n      // number of dimensions in the tensor. This would let some ops use faster\n      // lower-dimension code (and use optimized versions).\n\n#define HANDLE_REVERSE(NDIMS)                                           \\\n  case NDIMS:                                                           \\\n    HandleReverseV2Case<Device, T, NDIMS>(context, axes_dense, output); \\\n    return;\n\n      switch (input_dims) {\n        HANDLE_REVERSE(0);\n        HANDLE_REVERSE(1);\n        HANDLE_REVERSE(2);\n        HANDLE_REVERSE(3);\n        HANDLE_REVERSE(4);\n        HANDLE_REVERSE(5);\n        HANDLE_REVERSE(6);\n        HANDLE_REVERSE(7);\n        HANDLE_REVERSE(8);\n      }\n#undef HANDLE_REVERSE\n    }\n  }\n};\n\n#define REGISTER_KERNELS(T)                                  \\\n  REGISTER_KERNEL_BUILDER(Name(\"Reverse\")                    \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .HostMemory(\"dims\"),           \\\n                          ReverseOp<CPUDevice, T>)           \\\n  REGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")                  \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<int32>(\"Tidx\") \\\n                              .HostMemory(\"axis\"),           \\\n                          ReverseV2Op<CPUDevice, T, int32>)  \\\n  REGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")                  \\\n                              .Device(DEVICE_CPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<int64>(\"Tidx\") \\\n                              .HostMemory(\"axis\"),           \\\n                          ReverseV2Op<CPUDevice, T, int64>)\nTF_CALL_POD_TYPES(REGISTER_KERNELS);\nTF_CALL_tstring(REGISTER_KERNELS);\n#undef REGISTER_KERNELS\n\n#if GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n// Forward declarations of the function specializations for GPU (to prevent\n// building the GPU versions here, they will be built compiling _gpu.cu.cc).\nnamespace functor {\n#define DECLARE_GPU_SPEC_DIM(T, DIM)                                  \\\n  template <>                                                         \\\n  void Reverse<GPUDevice, T, DIM>::operator()(                        \\\n      const GPUDevice& d, typename TTypes<T, DIM>::ConstTensor input, \\\n      const Eigen::array<bool, DIM>& reverse_dims,                    \\\n      typename TTypes<T, DIM>::Tensor output);                        \\\n  extern template struct Reverse<GPUDevice, T, DIM>;\n#define DECLARE_GPU_SPEC(T)  \\\n  DECLARE_GPU_SPEC_DIM(T, 0) \\\n  DECLARE_GPU_SPEC_DIM(T, 1) \\\n  DECLARE_GPU_SPEC_DIM(T, 2) \\\n  DECLARE_GPU_SPEC_DIM(T, 3) \\\n  DECLARE_GPU_SPEC_DIM(T, 4) \\\n  DECLARE_GPU_SPEC_DIM(T, 5) \\\n  DECLARE_GPU_SPEC_DIM(T, 6) \\\n  DECLARE_GPU_SPEC_DIM(T, 7) \\\n  DECLARE_GPU_SPEC_DIM(T, 8)\n\nTF_CALL_uint8(DECLARE_GPU_SPEC);\nTF_CALL_int8(DECLARE_GPU_SPEC);\nTF_CALL_GPU_ALL_TYPES(DECLARE_GPU_SPEC);\n#undef DECLARE_GPU_SPEC\n#undef DECLARE_GPU_SPEC_DIM\n}  // namespace functor\n\n// Registration of the GPU implementations.\n#define REGISTER_GPU_KERNELS(T)                              \\\n  REGISTER_KERNEL_BUILDER(Name(\"Reverse\")                    \\\n                              .Device(DEVICE_GPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .HostMemory(\"dims\"),           \\\n                          ReverseOp<GPUDevice, T>)           \\\n  REGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")                  \\\n                              .Device(DEVICE_GPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<int32>(\"Tidx\") \\\n                              .HostMemory(\"axis\"),           \\\n                          ReverseV2Op<GPUDevice, T, int32>)  \\\n  REGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")                  \\\n                              .Device(DEVICE_GPU)            \\\n                              .TypeConstraint<T>(\"T\")        \\\n                              .TypeConstraint<int64>(\"Tidx\") \\\n                              .HostMemory(\"axis\"),           \\\n                          ReverseV2Op<GPUDevice, T, int64>)\nTF_CALL_uint8(REGISTER_GPU_KERNELS);\nTF_CALL_int8(REGISTER_GPU_KERNELS);\nTF_CALL_GPU_ALL_TYPES(REGISTER_GPU_KERNELS);\n#undef REGISTER_GPU_KERNEL\n\n// A special GPU kernel for int32.\n// TODO(b/25387198): Also enable int32 in device memory. This kernel\n// registration requires all int32 inputs and outputs to be in host memory.\nREGISTER_KERNEL_BUILDER(Name(\"Reverse\")\n                            .Device(DEVICE_GPU)\n                            .TypeConstraint<int32>(\"T\")\n                            .HostMemory(\"tensor\")\n                            .HostMemory(\"dims\")\n                            .HostMemory(\"output\"),\n                        ReverseOp<CPUDevice, int32>);\nREGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")\n                            .Device(DEVICE_GPU)\n                            .TypeConstraint<int32>(\"T\")\n                            .TypeConstraint<int32>(\"Tidx\")\n                            .HostMemory(\"tensor\")\n                            .HostMemory(\"axis\")\n                            .HostMemory(\"output\"),\n                        ReverseV2Op<CPUDevice, int32, int32>);\nREGISTER_KERNEL_BUILDER(Name(\"ReverseV2\")\n                            .Device(DEVICE_GPU)\n                            .TypeConstraint<int32>(\"T\")\n                            .TypeConstraint<int64>(\"Tidx\")\n                            .HostMemory(\"tensor\")\n                            .HostMemory(\"axis\")\n                            .HostMemory(\"output\"),\n                        ReverseV2Op<CPUDevice, int32, int64>);\n#endif  // GOOGLE_CUDA || TENSORFLOW_USE_ROCM\n\n}  // namespace tensorflow\n"], "filenames": ["tensorflow/core/kernels/reverse_op.cc"], "buggy_code_start_loc": [157], "buggy_code_end_loc": [157], "fixing_code_start_loc": [158], "fixing_code_end_loc": [164], "type": "CWE-369", "message": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range.", "other": {"cve": {"id": "CVE-2021-29556", "sourceIdentifier": "security-advisories@github.com", "published": "2021-05-14T20:15:13.207", "lastModified": "2021-07-27T17:17:03.300", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "TensorFlow is an end-to-end open source platform for machine learning. An attacker can cause a denial of service via a FPE runtime error in `tf.raw_ops.Reverse`. This is because the implementation(https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) performs a division based on the first dimension of the tensor argument. The fix will be included in TensorFlow 2.5.0. We will also cherrypick this commit on TensorFlow 2.4.2, TensorFlow 2.3.3, TensorFlow 2.2.3 and TensorFlow 2.1.4, as these are also affected and still in supported range."}, {"lang": "es", "value": "TensorFlow es una plataforma de c\u00f3digo abierto de extremo a extremo para el aprendizaje autom\u00e1tico.&#xa0;Un atacante puede causar una denegaci\u00f3n de servicio por medio de un error de tiempo de ejecuci\u00f3n de FPE en \"tf.raw_ops.Reverse\".&#xa0;Esto es debido a que la implementaci\u00f3n (https://github.com/tensorflow/tensorflow/blob/36229ea9e9451dac14a8b1f4711c435a1d84a594/tensorflow/core/kernels/reverse_op.cc#L75-L76) realiza una divisi\u00f3n basada en una primera dimensi\u00f3n del argumento del tensor.&#xa0;La correcci\u00f3n ser\u00e1 inclu\u00edda en TensorFlow versi\u00f3n 2.5.0.&#xa0;Tambi\u00e9n seleccionaremos este commit en TensorFlow versi\u00f3n 2.4.2, TensorFlow versi\u00f3n 2.3.3, TensorFlow versi\u00f3n 2.2.3 y TensorFlow versi\u00f3n 2.1.4, ya que estos tambi\u00e9n est\u00e1n afectados y a\u00fan est\u00e1n en el rango admitido"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:H/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "LOCAL", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 2.5, "baseSeverity": "LOW"}, "exploitabilityScore": 1.0, "impactScore": 1.4}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:L/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "LOCAL", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 2.1}, "baseSeverity": "LOW", "exploitabilityScore": 3.9, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-369"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.4", "matchCriteriaId": "323ABCCE-24EB-47CC-87F6-48C101477587"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.2.0", "versionEndExcluding": "2.2.3", "matchCriteriaId": "64ABA90C-0649-4BB0-89C9-83C14BBDCC0F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.0", "versionEndExcluding": "2.3.3", "matchCriteriaId": "0F83E0CF-CBF6-4C24-8683-3E7A5DC95BA9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:google:tensorflow:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.4.0", "versionEndExcluding": "2.4.2", "matchCriteriaId": "8259531B-A8AC-4F8B-B60F-B69DE4767C03"}]}]}], "references": [{"url": "https://github.com/tensorflow/tensorflow/commit/4071d8e2f6c45c1955a811fee757ca2adbe462c1", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/tensorflow/tensorflow/security/advisories/GHSA-fxqh-cfjm-fp93", "source": "security-advisories@github.com", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/tensorflow/tensorflow/commit/4071d8e2f6c45c1955a811fee757ca2adbe462c1"}}