{"buggy_code": ["/* eslint-env browser, jquery */\n/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n/* global moment, serverurl */\n\nimport Prism from 'prismjs'\nimport hljs from 'highlight.js'\nimport PDFObject from 'pdfobject'\nimport S from 'string'\nimport { saveAs } from 'file-saver'\nimport escapeHTML from 'escape-html'\n\nimport getUIElements from './lib/editor/ui-elements'\n\nimport markdownit from 'markdown-it'\nimport markdownitContainer from 'markdown-it-container'\n\n/* Defined regex markdown it plugins */\nimport Plugin from 'markdown-it-regexp'\n\nrequire('prismjs/themes/prism.css')\nrequire('prismjs/components/prism-wiki')\nrequire('prismjs/components/prism-haskell')\nrequire('prismjs/components/prism-go')\nrequire('prismjs/components/prism-typescript')\nrequire('prismjs/components/prism-jsx')\nrequire('prismjs/components/prism-makefile')\nrequire('prismjs/components/prism-gherkin')\n\nrequire('./lib/common/login')\nrequire('./locale')\nrequire('../vendor/md-toc')\nvar Viz = require('viz.js')\nconst ui = getUIElements()\n\n// auto update last change\nwindow.createtime = null\nwindow.lastchangetime = null\nwindow.lastchangeui = {\n  statusChanged: $('.ui-status-lastchange.changed'),\n  statusCreated: $('.ui-status-lastchange.created'),\n  time: $('.ui-lastchange'),\n  user: $('.ui-lastchangeuser'),\n  nouser: $('.ui-no-lastchangeuser')\n}\n\nconst ownerui = $('.ui-owner')\n\nexport function updateLastChange () {\n  if (!window.lastchangeui) return\n  if (window.createtime) {\n    if (window.createtime && !window.lastchangetime) {\n      window.lastchangeui.statusChanged.hide()\n      window.lastchangeui.statusCreated.show()\n    } else {\n      window.lastchangeui.statusChanged.show()\n      window.lastchangeui.statusCreated.hide()\n    }\n    const time = window.lastchangetime || window.createtime\n    window.lastchangeui.time.html(moment(time).fromNow())\n    window.lastchangeui.time.attr('title', moment(time).format('llll'))\n  }\n}\nsetInterval(updateLastChange, 60000)\n\nwindow.lastchangeuser = null\nwindow.lastchangeuserprofile = null\n\nexport function updateLastChangeUser () {\n  if (window.lastchangeui) {\n    if (window.lastchangeuser && window.lastchangeuserprofile) {\n      const icon = window.lastchangeui.user.children('i')\n      icon.attr('title', window.lastchangeuserprofile.name).tooltip('fixTitle')\n      if (window.lastchangeuserprofile.photo) { icon.attr('style', `background-image:url(${window.lastchangeuserprofile.photo})`) }\n      window.lastchangeui.user.show()\n      window.lastchangeui.nouser.hide()\n    } else {\n      window.lastchangeui.user.hide()\n      window.lastchangeui.nouser.show()\n    }\n  }\n}\n\nwindow.owner = null\nwindow.ownerprofile = null\n\nexport function updateOwner () {\n  if (ownerui) {\n    if (window.owner && window.ownerprofile && window.owner !== window.lastchangeuser) {\n      const icon = ownerui.children('i')\n      icon.attr('title', window.ownerprofile.name).tooltip('fixTitle')\n      const styleString = `background-image:url(${window.ownerprofile.photo})`\n      if (window.ownerprofile.photo && icon.attr('style') !== styleString) { icon.attr('style', styleString) }\n      ownerui.show()\n    } else {\n      ownerui.hide()\n    }\n  }\n}\n\n// get title\nfunction getTitle (view) {\n  let title = ''\n  if (md && md.meta && md.meta.title && (typeof md.meta.title === 'string' || typeof md.meta.title === 'number')) {\n    title = md.meta.title\n  } else {\n    const h1s = view.find('h1')\n    if (h1s.length > 0) {\n      title = h1s.first().text()\n    } else {\n      title = null\n    }\n  }\n  return title\n}\n\n// render title\nexport function renderTitle (view) {\n  let title = getTitle(view)\n  if (title) {\n    title += ' - HedgeDoc'\n  } else {\n    title = 'HedgeDoc - Collaborative markdown notes'\n  }\n  return title\n}\n\n// render filename\nexport function renderFilename (view) {\n  let filename = getTitle(view)\n  if (!filename) {\n    filename = 'Untitled'\n  }\n  return filename\n}\n\n// render tags\nexport function renderTags (view) {\n  const tags = []\n  const rawtags = []\n  if (md && md.meta && md.meta.tags && (typeof md.meta.tags === 'string' || typeof md.meta.tags === 'number')) {\n    const metaTags = (`${md.meta.tags}`).split(',')\n    for (let i = 0; i < metaTags.length; i++) {\n      const text = metaTags[i].trim()\n      if (text) rawtags.push(text)\n    }\n  } else {\n    view.find('h6').each((key, value) => {\n      if (/^tags/gmi.test($(value).text())) {\n        const codes = $(value).find('code')\n        for (let i = 0; i < codes.length; i++) {\n          const text = codes[i].innerHTML.trim()\n          if (text) rawtags.push(text)\n        }\n      }\n    })\n  }\n  for (let i = 0; i < rawtags.length; i++) {\n    let found = false\n    for (let j = 0; j < tags.length; j++) {\n      if (tags[j] === rawtags[i]) {\n        found = true\n        break\n      }\n    }\n    if (!found) { tags.push(rawtags[i]) }\n  }\n  return tags\n}\n\nfunction slugifyWithUTF8 (text) {\n  // remove HTML tags and trim spaces\n  let newText = S(text).trim().stripTags().s\n  // replace space between words with dashes\n  newText = newText.replace(/\\s+/g, '-')\n  // slugify string to make it valid as an attribute\n  newText = newText.replace(/([!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~])/g, '')\n  return newText\n}\n\nexport function isValidURL (str) {\n  try {\n    const url = new URL(str)\n    return ['http:', 'https:'].includes(url.protocol)\n  } catch (e) {\n    return false\n  }\n}\n\n// parse meta\nexport function parseMeta (md, edit, view, toc, tocAffix) {\n  let lang = null\n  let dir = null\n  let breaks = true\n  if (md && md.meta) {\n    const meta = md.meta\n    lang = meta.lang\n    dir = meta.dir\n    breaks = meta.breaks\n  }\n  // text language\n  if (lang && typeof lang === 'string') {\n    view.attr('lang', lang)\n    toc.attr('lang', lang)\n    tocAffix.attr('lang', lang)\n    if (edit) { edit.attr('lang', lang) }\n  } else {\n    view.removeAttr('lang')\n    toc.removeAttr('lang')\n    tocAffix.removeAttr('lang')\n    if (edit) { edit.removeAttr('lang', lang) }\n  }\n  // text direction\n  if (dir && typeof dir === 'string') {\n    view.attr('dir', dir)\n    toc.attr('dir', dir)\n    tocAffix.attr('dir', dir)\n  } else {\n    view.removeAttr('dir')\n    toc.removeAttr('dir')\n    tocAffix.removeAttr('dir')\n  }\n  // breaks\n  if (typeof breaks === 'boolean' && !breaks) {\n    md.options.breaks = false\n  } else {\n    md.options.breaks = true\n  }\n}\n\nwindow.viewAjaxCallback = null\n\n// regex for extra tags\nconst spaceregex = /\\s*/\nconst notinhtmltagregex = /(?![^<]*>|[^<>]*<\\/)/\nlet coloregex = /\\[color=([#|(|)|\\s|,|\\w]*?)\\]/\ncoloregex = new RegExp(coloregex.source + notinhtmltagregex.source, 'g')\nlet nameregex = /\\[name=(.*?)\\]/\nlet timeregex = /\\[time=([:|,|+|-|(|)|\\s|\\w]*?)\\]/\nconst nameandtimeregex = new RegExp(nameregex.source + spaceregex.source + timeregex.source + notinhtmltagregex.source, 'g')\nnameregex = new RegExp(nameregex.source + notinhtmltagregex.source, 'g')\ntimeregex = new RegExp(timeregex.source + notinhtmltagregex.source, 'g')\n\nfunction replaceExtraTags (html) {\n  html = html.replace(coloregex, '<span class=\"color\" data-color=\"$1\"></span>')\n  html = html.replace(nameandtimeregex, '<small><i class=\"fa fa-user\"></i> $1 <i class=\"fa fa-clock-o\"></i> $2</small>')\n  html = html.replace(nameregex, '<small><i class=\"fa fa-user\"></i> $1</small>')\n  html = html.replace(timeregex, '<small><i class=\"fa fa-clock-o\"></i> $1</small>')\n  return html\n}\n\nif (typeof window.mermaid !== 'undefined' && window.mermaid) window.mermaid.startOnLoad = false\n\n// dynamic event or object binding here\nexport function finishView (view) {\n  // todo list\n  const lis = view.find('li.raw').removeClass('raw').sortByDepth().toArray()\n\n  for (let li of lis) {\n    let html = $(li).clone()[0].innerHTML\n    const p = $(li).children('p')\n    if (p.length === 1) {\n      html = p.html()\n      li = p[0]\n    }\n    html = replaceExtraTags(html)\n    li.innerHTML = html\n    let disabled = 'disabled'\n    if (typeof editor !== 'undefined' && window.havePermission()) { disabled = '' }\n    if (/^\\s*\\[[x ]\\]\\s*/.test(html)) {\n      li.innerHTML = html.replace(/^\\s*\\[ \\]\\s*/, `<input type=\"checkbox\" class=\"task-list-item-checkbox \"${disabled}><label></label>`)\n        .replace(/^\\s*\\[x\\]\\s*/, `<input type=\"checkbox\" class=\"task-list-item-checkbox\" checked ${disabled}><label></label>`)\n      if (li.tagName.toLowerCase() !== 'li') {\n        li.parentElement.setAttribute('class', 'task-list-item')\n      } else {\n        li.setAttribute('class', 'task-list-item')\n      }\n    }\n    if (typeof editor !== 'undefined' && window.havePermission()) { $(li).find('input').change(toggleTodoEvent) }\n    // color tag in list will convert it to tag icon with color\n    const tagColor = $(li).closest('ul').find('.color')\n    tagColor.each((key, value) => {\n      $(value).addClass('fa fa-tag').css('color', $(value).attr('data-color'))\n    })\n  }\n\n  // youtube\n  view.find('div.youtube.raw').removeClass('raw')\n    .click(function () {\n      imgPlayiframe(this, '//www.youtube.com/embed/')\n    })\n    // vimeo\n  view.find('div.vimeo.raw').removeClass('raw')\n    .click(function () {\n      imgPlayiframe(this, '//player.vimeo.com/video/')\n    })\n    .each((key, value) => {\n      $.ajax({\n        type: 'GET',\n        url: `//vimeo.com/api/v2/video/${$(value).attr('data-videoid')}.json`,\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success (data) {\n          const thumbnailSrc = data[0].thumbnail_large\n          const image = `<img src=\"${thumbnailSrc}\" />`\n          $(value).prepend(image)\n          if (window.viewAjaxCallback) window.viewAjaxCallback()\n        }\n      })\n    })\n    // gist\n  view.find('code[data-gist-id]').each((key, value) => {\n    if ($(value).children().length === 0) { $(value).gist(window.viewAjaxCallback) }\n  })\n  // sequence diagram\n  const sequences = view.find('div.sequence-diagram.raw').removeClass('raw')\n  sequences.each((key, value) => {\n    try {\n      var $value = $(value)\n      const $ele = $(value).parent().parent()\n\n      const sequence = $value\n      sequence.sequenceDiagram({\n        theme: 'simple'\n      })\n\n      $ele.addClass('sequence-diagram')\n      $value.children().unwrap().unwrap()\n      const svg = $ele.find('> svg')\n      svg[0].setAttribute('viewBox', `0 0 ${svg.attr('width')} ${svg.attr('height')}`)\n      svg[0].setAttribute('preserveAspectRatio', 'xMidYMid meet')\n    } catch (err) {\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(err)}</div>`)\n      console.warn(err)\n    }\n  })\n  // flowchart\n  const flow = view.find('div.flow-chart.raw').removeClass('raw')\n  flow.each((key, value) => {\n    try {\n      var $value = $(value)\n      const $ele = $(value).parent().parent()\n\n      const chart = window.flowchart.parse($value.text())\n      $value.html('')\n      chart.drawSVG(value, {\n        'line-width': 2,\n        'fill': 'none',\n        'font-size': '16px',\n        'font-family': \"'Andale Mono', monospace\"\n      })\n\n      $ele.addClass('flow-chart')\n      $value.children().unwrap().unwrap()\n    } catch (err) {\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(err)}</div>`)\n      console.warn(err)\n    }\n  })\n  // graphviz\n  var graphvizs = view.find('div.graphviz.raw').removeClass('raw')\n  graphvizs.each(function (key, value) {\n    try {\n      var $value = $(value)\n      var $ele = $(value).parent().parent()\n\n      var graphviz = Viz($value.text())\n      if (!graphviz) throw Error('viz.js output empty graph')\n      $value.html(graphviz)\n\n      $ele.addClass('graphviz')\n      $value.children().unwrap().unwrap()\n    } catch (err) {\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(err)}</div>`)\n      console.warn(err)\n    }\n  })\n  // mermaid\n  const mermaids = view.find('div.mermaid.raw').removeClass('raw')\n  mermaids.each((key, value) => {\n    try {\n      var $value = $(value)\n      const $ele = $(value).closest('pre')\n\n      window.mermaid.mermaidAPI.parse($value.text())\n      $ele.addClass('mermaid')\n      $ele.html($value.text())\n      window.mermaid.init(undefined, $ele)\n    } catch (err) {\n      var errormessage = err\n      if (err.str) {\n        errormessage = err.str\n      }\n\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(errormessage)}</div>`)\n      console.warn(errormessage)\n    }\n  })\n  // abc.js\n  const abcs = view.find('div.abc.raw').removeClass('raw')\n  abcs.each((key, value) => {\n    try {\n      var $value = $(value)\n      var $ele = $(value).parent().parent()\n\n      window.ABCJS.renderAbc(value, $value.text())\n\n      $ele.addClass('abc')\n      $value.children().unwrap().unwrap()\n      const svg = $ele.find('> svg')\n      svg[0].setAttribute('viewBox', `0 0 ${svg.attr('width')} ${svg.attr('height')}`)\n      svg[0].setAttribute('preserveAspectRatio', 'xMidYMid meet')\n    } catch (err) {\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(err)}</div>`)\n      console.warn(err)\n    }\n  })\n  // image href new window(emoji not included)\n  const images = view.find('img.raw[src]').removeClass('raw')\n  images.each((key, value) => {\n    // if it's already wrapped by link, then ignore\n    const $value = $(value)\n    $value[0].onload = e => {\n      if (window.viewAjaxCallback) window.viewAjaxCallback()\n    }\n  })\n  // blockquote\n  const blockquote = view.find('blockquote.raw').removeClass('raw')\n  const blockquoteP = blockquote.find('p')\n  blockquoteP.each((key, value) => {\n    let html = $(value).html()\n    html = replaceExtraTags(html)\n    $(value).html(html)\n  })\n  // color tag in blockquote will change its left border color\n  const blockquoteColor = blockquote.find('.color')\n  blockquoteColor.each((key, value) => {\n    $(value).closest('blockquote').css('border-left-color', $(value).attr('data-color'))\n  })\n  // slideshare\n  view.find('div.slideshare.raw').removeClass('raw')\n    .each((key, value) => {\n      $.ajax({\n        type: 'GET',\n        url: `//www.slideshare.net/api/oembed/2?url=http://www.slideshare.net/${$(value).attr('data-slideshareid')}&format=json`,\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success (data) {\n          const $html = $(data.html)\n          const iframe = $html.closest('iframe')\n          const caption = $html.closest('div')\n          const inner = $('<div class=\"inner\"></div>').append(iframe)\n          const height = iframe.attr('height')\n          const width = iframe.attr('width')\n          const ratio = (height / width) * 100\n          inner.css('padding-bottom', `${ratio}%`)\n          $(value).html(inner).append(caption)\n          if (window.viewAjaxCallback) window.viewAjaxCallback()\n        }\n      })\n    })\n    // speakerdeck\n  view.find('div.speakerdeck.raw').removeClass('raw')\n    .each((key, value) => {\n      const url = `https://speakerdeck.com/${$(value).attr('data-speakerdeckid')}`\n      const inner = $('<a>Speakerdeck</a>')\n      inner.attr('href', url)\n      inner.attr('rel', 'noopener noreferrer')\n      inner.attr('target', '_blank')\n      $(value).append(inner)\n    })\n    // pdf\n  view.find('div.pdf.raw').removeClass('raw')\n    .each(function (key, value) {\n      const url = $(value).attr('data-pdfurl')\n      const inner = $('<div></div>')\n      $(this).append(inner)\n      PDFObject.embed(url, inner, {\n        height: '400px'\n      })\n    })\n    // syntax highlighting\n  view.find('code.raw').removeClass('raw')\n    .each((key, value) => {\n      const langDiv = $(value)\n      if (langDiv.length > 0) {\n        const reallang = langDiv[0].className.replace(/hljs|wrap/g, '').trim()\n        const codeDiv = langDiv.find('.code')\n        let code = ''\n        if (codeDiv.length > 0) code = codeDiv.html()\n        else code = langDiv.html()\n        var result\n        if (!reallang) {\n          result = {\n            value: code\n          }\n        } else if (reallang === 'haskell' || reallang === 'go' || reallang === 'typescript' || reallang === 'jsx' || reallang === 'gherkin') {\n          code = S(code).unescapeHTML().s\n          result = {\n            value: Prism.highlight(code, Prism.languages[reallang])\n          }\n        } else if (reallang === 'tiddlywiki' || reallang === 'mediawiki') {\n          code = S(code).unescapeHTML().s\n          result = {\n            value: Prism.highlight(code, Prism.languages.wiki)\n          }\n        } else if (reallang === 'cmake') {\n          code = S(code).unescapeHTML().s\n          result = {\n            value: Prism.highlight(code, Prism.languages.makefile)\n          }\n        } else {\n          code = S(code).unescapeHTML().s\n          const languages = hljs.listLanguages()\n          if (!languages.includes(reallang)) {\n            result = hljs.highlightAuto(code)\n          } else {\n            result = hljs.highlight(reallang, code)\n          }\n        }\n        if (codeDiv.length > 0) codeDiv.html(result.value)\n        else langDiv.html(result.value)\n      }\n    })\n    // mathjax\n  const mathjaxdivs = view.find('span.mathjax.raw').removeClass('raw').toArray()\n  try {\n    if (mathjaxdivs.length > 1) {\n      window.MathJax.Hub.Queue(['Typeset', window.MathJax.Hub, mathjaxdivs])\n      window.MathJax.Hub.Queue(window.viewAjaxCallback)\n    } else if (mathjaxdivs.length > 0) {\n      window.MathJax.Hub.Queue(['Typeset', window.MathJax.Hub, mathjaxdivs[0]])\n      window.MathJax.Hub.Queue(window.viewAjaxCallback)\n    }\n  } catch (err) {\n    console.warn(err)\n  }\n  // render title\n  document.title = renderTitle(view)\n}\n\n// only static transform should be here\nexport function postProcess (code) {\n  const result = $(`<div>${code}</div>`)\n  // process style tags\n  result.find('style').each((key, value) => {\n    let html = $(value).html()\n    // unescape > symbel inside the style tags\n    html = html.replace(/&gt;/g, '>')\n    // remove css @import to prevent XSS\n    html = html.replace(/@import url\\(([^)]*)\\);?/gi, '')\n    $(value).html(html)\n  })\n  // link should open in new window or tab\n  // also add noopener to prevent clickjacking\n  // See details: https://mathiasbynens.github.io/rel-noopener/\n  result.find('a:not([href^=\"#\"]):not([target])').attr('target', '_blank').attr('rel', 'noopener')\n  // update continue line numbers\n  const linenumberdivs = result.find('.gutter.linenumber').toArray()\n  for (let i = 0; i < linenumberdivs.length; i++) {\n    if ($(linenumberdivs[i]).hasClass('continue')) {\n      const startnumber = linenumberdivs[i - 1] ? parseInt($(linenumberdivs[i - 1]).find('> span').last().attr('data-linenumber')) : 0\n      $(linenumberdivs[i]).find('> span').each((key, value) => {\n        $(value).attr('data-linenumber', startnumber + key + 1)\n      })\n    }\n  }\n  // show yaml meta paring error\n  if (md.metaError) {\n    var warning = result.find('div#meta-error')\n    if (warning && warning.length > 0) {\n      warning.text(md.metaError)\n    } else {\n      warning = $(`<div id=\"meta-error\" class=\"alert alert-warning\">${escapeHTML(md.metaError)}</div>`)\n      result.prepend(warning)\n    }\n  }\n  return result\n}\nwindow.postProcess = postProcess\n\nvar domevents = Object.getOwnPropertyNames(document).concat(Object.getOwnPropertyNames(Object.getPrototypeOf(Object.getPrototypeOf(document)))).concat(Object.getOwnPropertyNames(Object.getPrototypeOf(window))).filter(function (i) {\n  return !i.indexOf('on') && (document[i] === null || typeof document[i] === 'function')\n}).filter(function (elem, pos, self) {\n  return self.indexOf(elem) === pos\n})\n\nexport function removeDOMEvents (view) {\n  for (var i = 0, l = domevents.length; i < l; i++) {\n    view.find('[' + domevents[i] + ']').removeAttr(domevents[i])\n  }\n}\nwindow.removeDOMEvents = removeDOMEvents\n\nfunction generateCleanHTML (view) {\n  const src = view.clone()\n  const eles = src.find('*')\n  // remove syncscroll parts\n  eles.removeClass('part')\n  src.find('*[class=\"\"]').removeAttr('class')\n  eles.removeAttr('data-startline data-endline')\n  src.find(\"a[href^='#'][smoothhashscroll]\").removeAttr('smoothhashscroll')\n  // remove gist content\n  src.find('code[data-gist-id]').children().remove()\n  // disable todo list\n  src.find('input.task-list-item-checkbox').attr('disabled', '')\n  // replace emoji image path\n  src.find('img.emoji').each((key, value) => {\n    let name = $(value).attr('alt')\n    name = name.substr(1)\n    name = name.slice(0, name.length - 1)\n    $(value).attr('src', `https://cdnjs.cloudflare.com/ajax/libs/emojify.js/1.1.0/images/basic/${name}.png`)\n  })\n  // replace video to iframe\n  src.find('div[data-videoid]').each((key, value) => {\n    const id = $(value).attr('data-videoid')\n    const style = $(value).attr('style')\n    let url = null\n    if ($(value).hasClass('youtube')) {\n      url = 'https://www.youtube.com/embed/'\n    } else if ($(value).hasClass('vimeo')) {\n      url = 'https://player.vimeo.com/video/'\n    }\n    if (url) {\n      const iframe = $('<iframe frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>')\n      iframe.attr('src', url + id)\n      iframe.attr('style', style)\n      $(value).html(iframe)\n    }\n  })\n  return src\n}\n\nexport function exportToRawHTML (view) {\n  const filename = `${renderFilename(ui.area.markdown)}.html`\n  const src = generateCleanHTML(view)\n  $(src).find('a.anchor').remove()\n  const html = src[0].outerHTML\n  const blob = new Blob([html], {\n    type: 'text/html;charset=utf-8'\n  })\n  saveAs(blob, filename, true)\n}\n\n// extract markdown body to html and compile to template\nexport function exportToHTML (view) {\n  const title = renderTitle(ui.area.markdown)\n  const filename = `${renderFilename(ui.area.markdown)}.html`\n  const src = generateCleanHTML(view)\n  // generate toc\n  const toc = $('#ui-toc').clone()\n  toc.find('*').removeClass('active').find(\"a[href^='#'][smoothhashscroll]\").removeAttr('smoothhashscroll')\n  const tocAffix = $('#ui-toc-affix').clone()\n  tocAffix.find('*').removeClass('active').find(\"a[href^='#'][smoothhashscroll]\").removeAttr('smoothhashscroll')\n  // generate html via template\n  $.get(`${serverurl}/build/html.min.css`, css => {\n    $.get(`${serverurl}/views/html.hbs`, data => {\n      const template = window.Handlebars.compile(data)\n      const context = {\n        url: serverurl,\n        title,\n        css,\n        html: src[0].outerHTML,\n        'ui-toc': toc.html(),\n        'ui-toc-affix': tocAffix.html(),\n        lang: (md && md.meta && md.meta.lang) ? `lang=\"${md.meta.lang}\"` : null,\n        dir: (md && md.meta && md.meta.dir) ? `dir=\"${md.meta.dir}\"` : null\n      }\n      const html = template(context)\n      const blob = new Blob([html], {\n        type: 'text/html;charset=utf-8'\n      })\n      saveAs(blob, filename, true)\n    })\n  })\n}\n\n// jQuery sortByDepth\n$.fn.sortByDepth = function () {\n  const ar = this.map(function () {\n    return {\n      length: $(this).parents().length,\n      elt: this\n    }\n  }).get()\n\n  const result = []\n  let i = ar.length\n  ar.sort((a, b) => a.length - b.length)\n  while (i--) {\n    result.push(ar[i].elt)\n  }\n  return $(result)\n}\n\nfunction toggleTodoEvent (e) {\n  const startline = $(this).closest('li').attr('data-startline') - 1\n  const line = window.editor.getLine(startline)\n  const matches = line.match(/^[>\\s-]*[-+*]\\s\\[([x ])\\]/)\n  if (matches && matches.length >= 2) {\n    let checked = null\n    if (matches[1] === 'x') { checked = true } else if (matches[1] === ' ') { checked = false }\n    const replacements = matches[0].match(/(^[>\\s-]*[-+*]\\s\\[)([x ])(\\])/)\n    window.editor.replaceRange(checked ? ' ' : 'x', {\n      line: startline,\n      ch: replacements[1].length\n    }, {\n      line: startline,\n      ch: replacements[1].length + 1\n    }, '+input')\n  }\n}\n\n// remove hash\nfunction removeHash () {\n  history.pushState('', document.title, window.location.pathname + window.location.search)\n}\n\nlet tocExpand = false\n\nfunction checkExpandToggle () {\n  const toc = $('.ui-toc-dropdown .toc')\n  const toggle = $('.expand-toggle')\n  if (!tocExpand) {\n    toc.removeClass('expand')\n    toggle.text('Expand all')\n  } else {\n    toc.addClass('expand')\n    toggle.text('Collapse all')\n  }\n}\n\n// toc\nexport function generateToc (id) {\n  const target = $(`#${id}`)\n  target.html('')\n  /* eslint-disable no-unused-vars */\n  var toc = new window.Toc('doc', {\n    'level': 3,\n    'top': -1,\n    'class': 'toc',\n    'ulClass': 'nav',\n    'targetId': id,\n    'process': getHeaderContent\n  })\n  /* eslint-enable no-unused-vars */\n  if (target.text() === 'undefined') { target.html('') }\n  const tocMenu = $('<div class=\"toc-menu\"></div')\n  const toggle = $('<a class=\"expand-toggle\" href=\"#\">Expand all</a>')\n  const backtotop = $('<a class=\"back-to-top\" href=\"#\">Back to top</a>')\n  const gotobottom = $('<a class=\"go-to-bottom\" href=\"#\">Go to bottom</a>')\n  checkExpandToggle()\n  toggle.click(e => {\n    e.preventDefault()\n    e.stopPropagation()\n    tocExpand = !tocExpand\n    checkExpandToggle()\n  })\n  backtotop.click(e => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (window.scrollToTop) { window.scrollToTop() }\n    removeHash()\n  })\n  gotobottom.click(e => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (window.scrollToBottom) { window.scrollToBottom() }\n    removeHash()\n  })\n  tocMenu.append(toggle).append(backtotop).append(gotobottom)\n  target.append(tocMenu)\n}\n\n// smooth all hash trigger scrolling\nexport function smoothHashScroll () {\n  const hashElements = $(\"a[href^='#']:not([smoothhashscroll])\").toArray()\n\n  for (const element of hashElements) {\n    const $element = $(element)\n    const hash = element.hash\n    if (hash) {\n      $element.on('click', function (e) {\n        // store hash\n        const hash = decodeURIComponent(this.hash)\n        // escape special characters in jquery selector\n        const $hash = $(hash.replace(/(:|\\.|\\[|\\]|,)/g, '\\\\$1'))\n        // return if no element been selected\n        if ($hash.length <= 0) return\n        // prevent default anchor click behavior\n        e.preventDefault()\n        // animate\n        $('body, html').stop(true, true).animate({\n          scrollTop: $hash.offset().top\n        }, 100, 'linear', () => {\n          // when done, add hash to url\n          // (default click behaviour)\n          window.location.hash = hash\n        })\n      })\n      $element.attr('smoothhashscroll', '')\n    }\n  }\n}\n\nfunction imgPlayiframe (element, src) {\n  if (!$(element).attr('data-videoid')) return\n  const iframe = $(\"<iframe frameborder='0' webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\")\n  $(iframe).attr('src', `${src + $(element).attr('data-videoid')}?autoplay=1`)\n  $(element).find('img').css('visibility', 'hidden')\n  $(element).append(iframe)\n}\n\nconst anchorForId = id => {\n  const anchor = document.createElement('a')\n  anchor.className = 'anchor hidden-xs'\n  anchor.href = `#${id}`\n  anchor.innerHTML = '<i class=\"fa fa-link\"></i>'\n  anchor.title = id\n  return anchor\n}\n\nconst createHeaderId = (headerContent, headerIds = null) => {\n  // to escape characters not allow in css and humanize\n  const slug = slugifyWithUTF8(headerContent)\n  let id\n  if (window.linkifyHeaderStyle === 'keep-case') {\n    id = slug\n  } else if (window.linkifyHeaderStyle === 'lower-case') {\n    // to make compatible with GitHub, GitLab, Pandoc and many more\n    id = slug.toLowerCase()\n  } else if (window.linkifyHeaderStyle === 'gfm') {\n    // see GitHub implementation reference:\n    // https://gist.github.com/asabaylus/3071099#gistcomment-1593627\n    // it works like 'lower-case', but ...\n    const idBase = slug.toLowerCase()\n    id = idBase\n    if (headerIds !== null) {\n      // ... making sure the id is unique\n      let i = 1\n      while (headerIds.has(id)) {\n        id = idBase + '-' + i\n        i++\n      }\n      headerIds.add(id)\n    }\n  } else {\n    throw new Error('Unknown linkifyHeaderStyle value \"' + window.linkifyHeaderStyle + '\"')\n  }\n  return id\n}\n\nconst linkifyAnchors = (level, containingElement) => {\n  const headers = containingElement.getElementsByTagName(`h${level}`)\n\n  for (let i = 0, l = headers.length; i < l; i++) {\n    let header = headers[i]\n    if (header.getElementsByClassName('anchor').length === 0) {\n      if (typeof header.id === 'undefined' || header.id === '') {\n        header.id = createHeaderId(getHeaderContent(header))\n      }\n      if (!(typeof header.id === 'undefined' || header.id === '')) {\n        header.insertBefore(anchorForId(header.id), header.firstChild)\n      }\n    }\n  }\n}\n\nexport function autoLinkify (view) {\n  const contentBlock = view[0]\n  if (!contentBlock) {\n    return\n  }\n  for (let level = 1; level <= 6; level++) {\n    linkifyAnchors(level, contentBlock)\n  }\n}\n\nfunction getHeaderContent (header) {\n  const headerHTML = $(header).clone()\n  headerHTML.find('.MathJax_Preview').remove()\n  headerHTML.find('.MathJax').remove()\n  return headerHTML[0].innerHTML\n}\n\nfunction changeHeaderId ($header, id, newId) {\n  $header.attr('id', newId)\n  const $headerLink = $header.find(`> a.anchor[href=\"#${id}\"]`)\n  $headerLink.attr('href', `#${newId}`)\n  $headerLink.attr('title', newId)\n}\n\nexport function deduplicatedHeaderId (view) {\n  // headers contained in the last change\n  const headers = view.find(':header.raw').removeClass('raw').toArray()\n  if (headers.length === 0) {\n    return\n  }\n  if (window.linkifyHeaderStyle === 'gfm') {\n    // consistent with GitHub, GitLab, Pandoc & co.\n    // all headers contained in the document, in order of appearance\n    const allHeaders = view.find(`:header`).toArray()\n    // list of finaly assigned header IDs\n    const headerIds = new Set()\n    for (let j = 0; j < allHeaders.length; j++) {\n      const $header = $(allHeaders[j])\n      const id = $header.attr('id')\n      const newId = createHeaderId(getHeaderContent($header), headerIds)\n      changeHeaderId($header, id, newId)\n    }\n  } else {\n    // the legacy way\n    for (let i = 0; i < headers.length; i++) {\n      const id = $(headers[i]).attr('id')\n      if (!id) continue\n      const duplicatedHeaders = view.find(`:header[id=\"${id}\"]`).toArray()\n      for (let j = 0; j < duplicatedHeaders.length; j++) {\n        if (duplicatedHeaders[j] !== headers[i]) {\n          const newId = id + j\n          const $header = $(duplicatedHeaders[j])\n          changeHeaderId($header, id, newId)\n        }\n      }\n    }\n  }\n}\n\nexport function renderTOC (view) {\n  const tocs = view.find('.toc').toArray()\n  for (let i = 0; i < tocs.length; i++) {\n    const toc = $(tocs[i])\n    const id = `toc${i}`\n    toc.attr('id', id)\n    const target = $(`#${id}`)\n    target.html('')\n    /* eslint-disable no-unused-vars */\n    let TOC = new window.Toc('doc', {\n      'level': 3,\n      'top': -1,\n      'class': 'toc',\n      'targetId': id,\n      'process': getHeaderContent\n    })\n    /* eslint-enable no-unused-vars */\n    if (target.text() === 'undefined') { target.html('') }\n    target.replaceWith(target.html())\n  }\n}\n\nexport function scrollToHash () {\n  const hash = location.hash\n  location.hash = ''\n  location.hash = hash\n}\n\nfunction highlightRender (code, lang) {\n  if (!lang || /no(-?)highlight|plain|text/.test(lang)) { return }\n  code = S(code).escapeHTML().s\n  if (lang === 'sequence') {\n    return `<div class=\"sequence-diagram raw\">${code}</div>`\n  } else if (lang === 'flow') {\n    return `<div class=\"flow-chart raw\">${code}</div>`\n  } else if (lang === 'graphviz') {\n    return `<div class=\"graphviz raw\">${code}</div>`\n  } else if (lang === 'mermaid') {\n    return `<div class=\"mermaid raw\">${code}</div>`\n  } else if (lang === 'abc') {\n    return `<div class=\"abc raw\">${code}</div>`\n  }\n  const result = {\n    value: code\n  }\n  const showlinenumbers = /=$|=\\d+$|=\\+$/.test(lang)\n  if (showlinenumbers) {\n    let startnumber = 1\n    const matches = lang.match(/=(\\d+)$/)\n    if (matches) { startnumber = parseInt(matches[1]) }\n    const lines = result.value.split('\\n')\n    const linenumbers = []\n    for (let i = 0; i < lines.length - 1; i++) {\n      linenumbers[i] = `<span data-linenumber='${startnumber + i}'></span>`\n    }\n    const continuelinenumber = /=\\+$/.test(lang)\n    const linegutter = `<div class='gutter linenumber${continuelinenumber ? ' continue' : ''}'>${linenumbers.join('\\n')}</div>`\n    result.value = `<div class='wrapper'>${linegutter}<div class='code'>${result.value}</div></div>`\n  }\n  return result.value\n}\n\nexport let md = markdownit('default', {\n  html: true,\n  breaks: true,\n  langPrefix: '',\n  linkify: true,\n  typographer: true,\n  highlight: highlightRender\n})\nwindow.md = md\n\nmd.use(require('markdown-it-abbr'))\nmd.use(require('markdown-it-footnote'))\nmd.use(require('markdown-it-deflist'))\nmd.use(require('markdown-it-mark'))\nmd.use(require('markdown-it-ins'))\nmd.use(require('markdown-it-sub'))\nmd.use(require('markdown-it-sup'))\nmd.use(require('markdown-it-mathjax')({\n  beforeMath: '<span class=\"mathjax raw\">',\n  afterMath: '</span>',\n  beforeInlineMath: '<span class=\"mathjax raw\">\\\\(',\n  afterInlineMath: '\\\\)</span>',\n  beforeDisplayMath: '<span class=\"mathjax raw\">\\\\[',\n  afterDisplayMath: '\\\\]</span>'\n}))\nmd.use(require('markdown-it-imsize'))\n\nmd.use(require('markdown-it-emoji'), {\n  shortcuts: {}\n})\n\nwindow.emojify.setConfig({\n  blacklist: {\n    elements: ['script', 'textarea', 'a', 'pre', 'code', 'svg'],\n    classes: ['no-emojify']\n  },\n  img_dir: `${serverurl}/build/emojify.js/dist/images/basic`,\n  ignore_emoticons: true\n})\n\nmd.renderer.rules.emoji = (token, idx) => window.emojify.replace(`:${token[idx].markup}:`)\n\nfunction renderContainer (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('role', 'alert')\n  tokens[idx].attrJoin('class', 'alert')\n  tokens[idx].attrJoin('class', `alert-${tokens[idx].info.trim()}`)\n  return self.renderToken(...arguments)\n}\nmd.use(markdownitContainer, 'success', { render: renderContainer })\nmd.use(markdownitContainer, 'info', { render: renderContainer })\nmd.use(markdownitContainer, 'warning', { render: renderContainer })\nmd.use(markdownitContainer, 'danger', { render: renderContainer })\n\nlet defaultImageRender = md.renderer.rules.image\nmd.renderer.rules.image = function (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('class', 'raw')\n  return defaultImageRender(...arguments)\n}\nmd.renderer.rules.list_item_open = function (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('class', 'raw')\n  return self.renderToken(...arguments)\n}\nmd.renderer.rules.blockquote_open = function (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('class', 'raw')\n  return self.renderToken(...arguments)\n}\nmd.renderer.rules.heading_open = function (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('class', 'raw')\n  return self.renderToken(...arguments)\n}\nmd.renderer.rules.fence = (tokens, idx, options, env, self) => {\n  const token = tokens[idx]\n  const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n  let langName = ''\n  let highlighted\n\n  if (info) {\n    langName = info.split(/\\s+/g)[0]\n    if (/!$/.test(info)) token.attrJoin('class', 'wrap')\n    token.attrJoin('class', options.langPrefix + langName.replace(/=$|=\\d+$|=\\+$|!$|=!$/, ''))\n    token.attrJoin('class', 'hljs')\n    token.attrJoin('class', 'raw')\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName) || md.utils.escapeHtml(token.content)\n  } else {\n    highlighted = md.utils.escapeHtml(token.content)\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return `${highlighted}\\n`\n  }\n\n  return `<pre><code${self.renderAttrs(token)}>${highlighted}</code></pre>\\n`\n}\n\n// youtube\nconst youtubePlugin = new Plugin(\n  // regexp to match\n  /{%youtube\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const videoid = match[1]\n    if (!videoid) return\n    const div = $('<div class=\"youtube raw\"></div>')\n    div.attr('data-videoid', videoid)\n    const thumbnailSrc = `//img.youtube.com/vi/${videoid}/hqdefault.jpg`\n    const image = `<img src=\"${thumbnailSrc}\" />`\n    div.append(image)\n    const icon = '<i class=\"icon fa fa-youtube-play fa-5x\"></i>'\n    div.append(icon)\n    return div[0].outerHTML\n  }\n)\n// vimeo\nconst vimeoPlugin = new Plugin(\n  // regexp to match\n  /{%vimeo\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const videoid = match[1]\n    if (!videoid) return\n    const div = $('<div class=\"vimeo raw\"></div>')\n    div.attr('data-videoid', videoid)\n    const icon = '<i class=\"icon fa fa-vimeo-square fa-5x\"></i>'\n    div.append(icon)\n    return div[0].outerHTML\n  }\n)\n// gist\nconst gistPlugin = new Plugin(\n  // regexp to match\n  /{%gist\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const gistid = match[1]\n    const code = `<code data-gist-id=\"${gistid}\"></code>`\n    return code\n  }\n)\n// TOC\nconst tocPlugin = new Plugin(\n  // regexp to match\n  /^\\[TOC\\]$/i,\n\n  (match, utils) => '<div class=\"toc\"></div>'\n)\n// slideshare\nconst slidesharePlugin = new Plugin(\n  // regexp to match\n  /{%slideshare\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const slideshareid = match[1]\n    const div = $('<div class=\"slideshare raw\"></div>')\n    div.attr('data-slideshareid', slideshareid)\n    return div[0].outerHTML\n  }\n)\n// speakerdeck\nconst speakerdeckPlugin = new Plugin(\n  // regexp to match\n  /{%speakerdeck\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const speakerdeckid = match[1]\n    const div = $('<div class=\"speakerdeck raw\"></div>')\n    div.attr('data-speakerdeckid', speakerdeckid)\n    return div[0].outerHTML\n  }\n)\n// pdf\nconst pdfPlugin = new Plugin(\n  // regexp to match\n  /{%pdf\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const pdfurl = match[1]\n    if (!isValidURL(pdfurl)) return match[0]\n    const div = $('<div class=\"pdf raw\"></div>')\n    div.attr('data-pdfurl', pdfurl)\n    return div[0].outerHTML\n  }\n)\n\nconst emojijsPlugin = new Plugin(\n  // regexp to match emoji shortcodes :something:\n  // We generate an universal regex that guaranteed only contains the\n  // emojies we have available. This should prevent all false-positives\n  new RegExp(':(' + window.emojify.emojiNames.map((item) => { return RegExp.escape(item) }).join('|') + '):', 'i'),\n\n  (match, utils) => {\n    const emoji = match[1].toLowerCase()\n    const div = $(`<img class=\"emoji\" alt=\":${emoji}:\" src=\"${serverurl}/build/emojify.js/dist/images/basic/${emoji}.png\"></img>`)\n    return div[0].outerHTML\n  }\n)\n\n// yaml meta, from https://github.com/eugeneware/remarkable-meta\nfunction get (state, line) {\n  const pos = state.bMarks[line]\n  const max = state.eMarks[line]\n  return state.src.substr(pos, max - pos)\n}\n\nfunction meta (state, start, end, silent) {\n  if (start !== 0 || state.blkIndent !== 0) return false\n  if (state.tShift[start] < 0) return false\n  if (!get(state, start).match(/^---$/)) return false\n\n  const data = []\n  for (var line = start + 1; line < end; line++) {\n    const str = get(state, line)\n    if (str.match(/^(\\.{3}|-{3})$/)) break\n    if (state.tShift[line] < 0) break\n    data.push(str)\n  }\n\n  if (line >= end) return false\n\n  try {\n    md.meta = window.jsyaml.safeLoad(data.join('\\n')) || {}\n    delete md.metaError\n  } catch (err) {\n    md.metaError = err\n    console.warn(err)\n    return false\n  }\n\n  state.line = line + 1\n\n  return true\n}\n\nfunction metaPlugin (md) {\n  md.meta = md.meta || {}\n  md.block.ruler.before('code', 'meta', meta, {\n    alt: []\n  })\n}\n\nmd.use(metaPlugin)\nmd.use(emojijsPlugin)\nmd.use(youtubePlugin)\nmd.use(vimeoPlugin)\nmd.use(gistPlugin)\nmd.use(tocPlugin)\nmd.use(slidesharePlugin)\nmd.use(speakerdeckPlugin)\nmd.use(pdfPlugin)\n\nexport default {\n  md\n}\n"], "fixing_code": ["/* eslint-env browser, jquery */\n/* eslint no-console: [\"error\", { allow: [\"warn\", \"error\"] }] */\n/* global moment, serverurl */\n\nimport Prism from 'prismjs'\nimport hljs from 'highlight.js'\nimport PDFObject from 'pdfobject'\nimport S from 'string'\nimport { saveAs } from 'file-saver'\nimport escapeHTML from 'escape-html'\n\nimport getUIElements from './lib/editor/ui-elements'\n\nimport markdownit from 'markdown-it'\nimport markdownitContainer from 'markdown-it-container'\n\n/* Defined regex markdown it plugins */\nimport Plugin from 'markdown-it-regexp'\n\nrequire('prismjs/themes/prism.css')\nrequire('prismjs/components/prism-wiki')\nrequire('prismjs/components/prism-haskell')\nrequire('prismjs/components/prism-go')\nrequire('prismjs/components/prism-typescript')\nrequire('prismjs/components/prism-jsx')\nrequire('prismjs/components/prism-makefile')\nrequire('prismjs/components/prism-gherkin')\n\nrequire('./lib/common/login')\nrequire('./locale')\nrequire('../vendor/md-toc')\nvar Viz = require('viz.js')\nconst ui = getUIElements()\n\n// auto update last change\nwindow.createtime = null\nwindow.lastchangetime = null\nwindow.lastchangeui = {\n  statusChanged: $('.ui-status-lastchange.changed'),\n  statusCreated: $('.ui-status-lastchange.created'),\n  time: $('.ui-lastchange'),\n  user: $('.ui-lastchangeuser'),\n  nouser: $('.ui-no-lastchangeuser')\n}\n\nconst ownerui = $('.ui-owner')\n\nexport function updateLastChange () {\n  if (!window.lastchangeui) return\n  if (window.createtime) {\n    if (window.createtime && !window.lastchangetime) {\n      window.lastchangeui.statusChanged.hide()\n      window.lastchangeui.statusCreated.show()\n    } else {\n      window.lastchangeui.statusChanged.show()\n      window.lastchangeui.statusCreated.hide()\n    }\n    const time = window.lastchangetime || window.createtime\n    window.lastchangeui.time.html(moment(time).fromNow())\n    window.lastchangeui.time.attr('title', moment(time).format('llll'))\n  }\n}\nsetInterval(updateLastChange, 60000)\n\nwindow.lastchangeuser = null\nwindow.lastchangeuserprofile = null\n\nexport function updateLastChangeUser () {\n  if (window.lastchangeui) {\n    if (window.lastchangeuser && window.lastchangeuserprofile) {\n      const icon = window.lastchangeui.user.children('i')\n      icon.attr('title', window.lastchangeuserprofile.name).tooltip('fixTitle')\n      if (window.lastchangeuserprofile.photo) { icon.attr('style', `background-image:url(${window.lastchangeuserprofile.photo})`) }\n      window.lastchangeui.user.show()\n      window.lastchangeui.nouser.hide()\n    } else {\n      window.lastchangeui.user.hide()\n      window.lastchangeui.nouser.show()\n    }\n  }\n}\n\nwindow.owner = null\nwindow.ownerprofile = null\n\nexport function updateOwner () {\n  if (ownerui) {\n    if (window.owner && window.ownerprofile && window.owner !== window.lastchangeuser) {\n      const icon = ownerui.children('i')\n      icon.attr('title', window.ownerprofile.name).tooltip('fixTitle')\n      const styleString = `background-image:url(${window.ownerprofile.photo})`\n      if (window.ownerprofile.photo && icon.attr('style') !== styleString) { icon.attr('style', styleString) }\n      ownerui.show()\n    } else {\n      ownerui.hide()\n    }\n  }\n}\n\n// get title\nfunction getTitle (view) {\n  let title = ''\n  if (md && md.meta && md.meta.title && (typeof md.meta.title === 'string' || typeof md.meta.title === 'number')) {\n    title = md.meta.title\n  } else {\n    const h1s = view.find('h1')\n    if (h1s.length > 0) {\n      title = h1s.first().text()\n    } else {\n      title = null\n    }\n  }\n  return title\n}\n\n// render title\nexport function renderTitle (view) {\n  let title = getTitle(view)\n  if (title) {\n    title += ' - HedgeDoc'\n  } else {\n    title = 'HedgeDoc - Collaborative markdown notes'\n  }\n  return title\n}\n\n// render filename\nexport function renderFilename (view) {\n  let filename = getTitle(view)\n  if (!filename) {\n    filename = 'Untitled'\n  }\n  return filename\n}\n\n// render tags\nexport function renderTags (view) {\n  const tags = []\n  const rawtags = []\n  if (md && md.meta && md.meta.tags && (typeof md.meta.tags === 'string' || typeof md.meta.tags === 'number')) {\n    const metaTags = (`${md.meta.tags}`).split(',')\n    for (let i = 0; i < metaTags.length; i++) {\n      const text = metaTags[i].trim()\n      if (text) rawtags.push(text)\n    }\n  } else {\n    view.find('h6').each((key, value) => {\n      if (/^tags/gmi.test($(value).text())) {\n        const codes = $(value).find('code')\n        for (let i = 0; i < codes.length; i++) {\n          const text = codes[i].innerHTML.trim()\n          if (text) rawtags.push(text)\n        }\n      }\n    })\n  }\n  for (let i = 0; i < rawtags.length; i++) {\n    let found = false\n    for (let j = 0; j < tags.length; j++) {\n      if (tags[j] === rawtags[i]) {\n        found = true\n        break\n      }\n    }\n    if (!found) { tags.push(rawtags[i]) }\n  }\n  return tags\n}\n\nfunction slugifyWithUTF8 (text) {\n  // remove HTML tags and trim spaces\n  let newText = S(text).trim().stripTags().s\n  // replace space between words with dashes\n  newText = newText.replace(/\\s+/g, '-')\n  // slugify string to make it valid as an attribute\n  newText = newText.replace(/([!\"#$%&'()*+,./:;<=>?@[\\\\\\]^`{|}~])/g, '')\n  return newText\n}\n\nexport function isValidURL (str) {\n  try {\n    const url = new URL(str)\n    return ['http:', 'https:'].includes(url.protocol)\n  } catch (e) {\n    return false\n  }\n}\n\n// parse meta\nexport function parseMeta (md, edit, view, toc, tocAffix) {\n  let lang = null\n  let dir = null\n  let breaks = true\n  if (md && md.meta) {\n    const meta = md.meta\n    lang = meta.lang\n    dir = meta.dir\n    breaks = meta.breaks\n  }\n  // text language\n  if (lang && typeof lang === 'string') {\n    view.attr('lang', lang)\n    toc.attr('lang', lang)\n    tocAffix.attr('lang', lang)\n    if (edit) { edit.attr('lang', lang) }\n  } else {\n    view.removeAttr('lang')\n    toc.removeAttr('lang')\n    tocAffix.removeAttr('lang')\n    if (edit) { edit.removeAttr('lang', lang) }\n  }\n  // text direction\n  if (dir && typeof dir === 'string') {\n    view.attr('dir', dir)\n    toc.attr('dir', dir)\n    tocAffix.attr('dir', dir)\n  } else {\n    view.removeAttr('dir')\n    toc.removeAttr('dir')\n    tocAffix.removeAttr('dir')\n  }\n  // breaks\n  if (typeof breaks === 'boolean' && !breaks) {\n    md.options.breaks = false\n  } else {\n    md.options.breaks = true\n  }\n}\n\nwindow.viewAjaxCallback = null\n\n// regex for extra tags\nconst spaceregex = /\\s*/\nconst notinhtmltagregex = /(?![^<]*>|[^<>]*<\\/)/\nlet coloregex = /\\[color=([#|(|)|\\s|,|\\w]*?)\\]/\ncoloregex = new RegExp(coloregex.source + notinhtmltagregex.source, 'g')\nlet nameregex = /\\[name=(.*?)\\]/\nlet timeregex = /\\[time=([:|,|+|-|(|)|\\s|\\w]*?)\\]/\nconst nameandtimeregex = new RegExp(nameregex.source + spaceregex.source + timeregex.source + notinhtmltagregex.source, 'g')\nnameregex = new RegExp(nameregex.source + notinhtmltagregex.source, 'g')\ntimeregex = new RegExp(timeregex.source + notinhtmltagregex.source, 'g')\n\nfunction replaceExtraTags (html) {\n  html = html.replace(coloregex, '<span class=\"color\" data-color=\"$1\"></span>')\n  html = html.replace(nameandtimeregex, '<small><i class=\"fa fa-user\"></i> $1 <i class=\"fa fa-clock-o\"></i> $2</small>')\n  html = html.replace(nameregex, '<small><i class=\"fa fa-user\"></i> $1</small>')\n  html = html.replace(timeregex, '<small><i class=\"fa fa-clock-o\"></i> $1</small>')\n  return html\n}\n\nif (typeof window.mermaid !== 'undefined' && window.mermaid) window.mermaid.startOnLoad = false\n\n// dynamic event or object binding here\nexport function finishView (view) {\n  // todo list\n  const lis = view.find('li.raw').removeClass('raw').sortByDepth().toArray()\n\n  for (let li of lis) {\n    let html = $(li).clone()[0].innerHTML\n    const p = $(li).children('p')\n    if (p.length === 1) {\n      html = p.html()\n      li = p[0]\n    }\n    html = replaceExtraTags(html)\n    li.innerHTML = html\n    let disabled = 'disabled'\n    if (typeof editor !== 'undefined' && window.havePermission()) { disabled = '' }\n    if (/^\\s*\\[[x ]\\]\\s*/.test(html)) {\n      li.innerHTML = html.replace(/^\\s*\\[ \\]\\s*/, `<input type=\"checkbox\" class=\"task-list-item-checkbox \"${disabled}><label></label>`)\n        .replace(/^\\s*\\[x\\]\\s*/, `<input type=\"checkbox\" class=\"task-list-item-checkbox\" checked ${disabled}><label></label>`)\n      if (li.tagName.toLowerCase() !== 'li') {\n        li.parentElement.setAttribute('class', 'task-list-item')\n      } else {\n        li.setAttribute('class', 'task-list-item')\n      }\n    }\n    if (typeof editor !== 'undefined' && window.havePermission()) { $(li).find('input').change(toggleTodoEvent) }\n    // color tag in list will convert it to tag icon with color\n    const tagColor = $(li).closest('ul').find('.color')\n    tagColor.each((key, value) => {\n      $(value).addClass('fa fa-tag').css('color', $(value).attr('data-color'))\n    })\n  }\n\n  // youtube\n  view.find('div.youtube.raw').removeClass('raw')\n    .click(function () {\n      imgPlayiframe(this, '//www.youtube.com/embed/')\n    })\n    // vimeo\n  view.find('div.vimeo.raw').removeClass('raw')\n    .click(function () {\n      imgPlayiframe(this, '//player.vimeo.com/video/')\n    })\n    .each((key, value) => {\n      $.ajax({\n        type: 'GET',\n        url: `//vimeo.com/api/v2/video/${$(value).attr('data-videoid')}.json`,\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success (data) {\n          const thumbnailSrc = data[0].thumbnail_large\n          const image = `<img src=\"${thumbnailSrc}\" />`\n          $(value).prepend(image)\n          if (window.viewAjaxCallback) window.viewAjaxCallback()\n        }\n      })\n    })\n    // gist\n  view.find('code[data-gist-id]').each((key, value) => {\n    if ($(value).children().length === 0) { $(value).gist(window.viewAjaxCallback) }\n  })\n  // sequence diagram\n  const sequences = view.find('div.sequence-diagram.raw').removeClass('raw')\n  sequences.each((key, value) => {\n    try {\n      var $value = $(value)\n      const $ele = $(value).parent().parent()\n\n      const sequence = $value\n      sequence.sequenceDiagram({\n        theme: 'simple'\n      })\n\n      $ele.addClass('sequence-diagram')\n      $value.children().unwrap().unwrap()\n      const svg = $ele.find('> svg')\n      svg[0].setAttribute('viewBox', `0 0 ${svg.attr('width')} ${svg.attr('height')}`)\n      svg[0].setAttribute('preserveAspectRatio', 'xMidYMid meet')\n    } catch (err) {\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(err)}</div>`)\n      console.warn(err)\n    }\n  })\n  // flowchart\n  const flow = view.find('div.flow-chart.raw').removeClass('raw')\n  flow.each((key, value) => {\n    try {\n      var $value = $(value)\n      const $ele = $(value).parent().parent()\n\n      const chart = window.flowchart.parse($value.text())\n      $value.html('')\n      chart.drawSVG(value, {\n        'line-width': 2,\n        'fill': 'none',\n        'font-size': '16px',\n        'font-family': \"'Andale Mono', monospace\"\n      })\n\n      $ele.addClass('flow-chart')\n      $value.children().unwrap().unwrap()\n    } catch (err) {\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(err)}</div>`)\n      console.warn(err)\n    }\n  })\n  // graphviz\n  var graphvizs = view.find('div.graphviz.raw').removeClass('raw')\n  graphvizs.each(function (key, value) {\n    try {\n      var $value = $(value)\n      var $ele = $(value).parent().parent()\n\n      var graphviz = Viz($value.text())\n      if (!graphviz) throw Error('viz.js output empty graph')\n      $value.html(graphviz)\n\n      $ele.addClass('graphviz')\n      $value.children().unwrap().unwrap()\n    } catch (err) {\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(err)}</div>`)\n      console.warn(err)\n    }\n  })\n  // mermaid\n  const mermaids = view.find('div.mermaid.raw').removeClass('raw')\n  mermaids.each((key, value) => {\n    try {\n      var $value = $(value)\n      const $ele = $(value).closest('pre')\n\n      window.mermaid.mermaidAPI.parse($value.text())\n      $ele.addClass('mermaid')\n      $ele.text($value.text())\n      window.mermaid.init(undefined, $ele)\n    } catch (err) {\n      var errormessage = err\n      if (err.str) {\n        errormessage = err.str\n      }\n\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(errormessage)}</div>`)\n      console.warn(errormessage)\n    }\n  })\n  // abc.js\n  const abcs = view.find('div.abc.raw').removeClass('raw')\n  abcs.each((key, value) => {\n    try {\n      var $value = $(value)\n      var $ele = $(value).parent().parent()\n\n      window.ABCJS.renderAbc(value, $value.text())\n\n      $ele.addClass('abc')\n      $value.children().unwrap().unwrap()\n      const svg = $ele.find('> svg')\n      svg[0].setAttribute('viewBox', `0 0 ${svg.attr('width')} ${svg.attr('height')}`)\n      svg[0].setAttribute('preserveAspectRatio', 'xMidYMid meet')\n    } catch (err) {\n      $value.unwrap()\n      $value.parent().append(`<div class=\"alert alert-warning\">${escapeHTML(err)}</div>`)\n      console.warn(err)\n    }\n  })\n  // image href new window(emoji not included)\n  const images = view.find('img.raw[src]').removeClass('raw')\n  images.each((key, value) => {\n    // if it's already wrapped by link, then ignore\n    const $value = $(value)\n    $value[0].onload = e => {\n      if (window.viewAjaxCallback) window.viewAjaxCallback()\n    }\n  })\n  // blockquote\n  const blockquote = view.find('blockquote.raw').removeClass('raw')\n  const blockquoteP = blockquote.find('p')\n  blockquoteP.each((key, value) => {\n    let html = $(value).html()\n    html = replaceExtraTags(html)\n    $(value).html(html)\n  })\n  // color tag in blockquote will change its left border color\n  const blockquoteColor = blockquote.find('.color')\n  blockquoteColor.each((key, value) => {\n    $(value).closest('blockquote').css('border-left-color', $(value).attr('data-color'))\n  })\n  // slideshare\n  view.find('div.slideshare.raw').removeClass('raw')\n    .each((key, value) => {\n      $.ajax({\n        type: 'GET',\n        url: `//www.slideshare.net/api/oembed/2?url=http://www.slideshare.net/${$(value).attr('data-slideshareid')}&format=json`,\n        jsonp: 'callback',\n        dataType: 'jsonp',\n        success (data) {\n          const $html = $(data.html)\n          const iframe = $html.closest('iframe')\n          const caption = $html.closest('div')\n          const inner = $('<div class=\"inner\"></div>').append(iframe)\n          const height = iframe.attr('height')\n          const width = iframe.attr('width')\n          const ratio = (height / width) * 100\n          inner.css('padding-bottom', `${ratio}%`)\n          $(value).html(inner).append(caption)\n          if (window.viewAjaxCallback) window.viewAjaxCallback()\n        }\n      })\n    })\n    // speakerdeck\n  view.find('div.speakerdeck.raw').removeClass('raw')\n    .each((key, value) => {\n      const url = `https://speakerdeck.com/${$(value).attr('data-speakerdeckid')}`\n      const inner = $('<a>Speakerdeck</a>')\n      inner.attr('href', url)\n      inner.attr('rel', 'noopener noreferrer')\n      inner.attr('target', '_blank')\n      $(value).append(inner)\n    })\n    // pdf\n  view.find('div.pdf.raw').removeClass('raw')\n    .each(function (key, value) {\n      const url = $(value).attr('data-pdfurl')\n      const inner = $('<div></div>')\n      $(this).append(inner)\n      PDFObject.embed(url, inner, {\n        height: '400px'\n      })\n    })\n    // syntax highlighting\n  view.find('code.raw').removeClass('raw')\n    .each((key, value) => {\n      const langDiv = $(value)\n      if (langDiv.length > 0) {\n        const reallang = langDiv[0].className.replace(/hljs|wrap/g, '').trim()\n        const codeDiv = langDiv.find('.code')\n        let code = ''\n        if (codeDiv.length > 0) code = codeDiv.html()\n        else code = langDiv.html()\n        var result\n        if (!reallang) {\n          result = {\n            value: code\n          }\n        } else if (reallang === 'haskell' || reallang === 'go' || reallang === 'typescript' || reallang === 'jsx' || reallang === 'gherkin') {\n          code = S(code).unescapeHTML().s\n          result = {\n            value: Prism.highlight(code, Prism.languages[reallang])\n          }\n        } else if (reallang === 'tiddlywiki' || reallang === 'mediawiki') {\n          code = S(code).unescapeHTML().s\n          result = {\n            value: Prism.highlight(code, Prism.languages.wiki)\n          }\n        } else if (reallang === 'cmake') {\n          code = S(code).unescapeHTML().s\n          result = {\n            value: Prism.highlight(code, Prism.languages.makefile)\n          }\n        } else {\n          code = S(code).unescapeHTML().s\n          const languages = hljs.listLanguages()\n          if (!languages.includes(reallang)) {\n            result = hljs.highlightAuto(code)\n          } else {\n            result = hljs.highlight(reallang, code)\n          }\n        }\n        if (codeDiv.length > 0) codeDiv.html(result.value)\n        else langDiv.html(result.value)\n      }\n    })\n    // mathjax\n  const mathjaxdivs = view.find('span.mathjax.raw').removeClass('raw').toArray()\n  try {\n    if (mathjaxdivs.length > 1) {\n      window.MathJax.Hub.Queue(['Typeset', window.MathJax.Hub, mathjaxdivs])\n      window.MathJax.Hub.Queue(window.viewAjaxCallback)\n    } else if (mathjaxdivs.length > 0) {\n      window.MathJax.Hub.Queue(['Typeset', window.MathJax.Hub, mathjaxdivs[0]])\n      window.MathJax.Hub.Queue(window.viewAjaxCallback)\n    }\n  } catch (err) {\n    console.warn(err)\n  }\n  // render title\n  document.title = renderTitle(view)\n}\n\n// only static transform should be here\nexport function postProcess (code) {\n  const result = $(`<div>${code}</div>`)\n  // process style tags\n  result.find('style').each((key, value) => {\n    let html = $(value).html()\n    // unescape > symbel inside the style tags\n    html = html.replace(/&gt;/g, '>')\n    // remove css @import to prevent XSS\n    html = html.replace(/@import url\\(([^)]*)\\);?/gi, '')\n    $(value).html(html)\n  })\n  // link should open in new window or tab\n  // also add noopener to prevent clickjacking\n  // See details: https://mathiasbynens.github.io/rel-noopener/\n  result.find('a:not([href^=\"#\"]):not([target])').attr('target', '_blank').attr('rel', 'noopener')\n  // update continue line numbers\n  const linenumberdivs = result.find('.gutter.linenumber').toArray()\n  for (let i = 0; i < linenumberdivs.length; i++) {\n    if ($(linenumberdivs[i]).hasClass('continue')) {\n      const startnumber = linenumberdivs[i - 1] ? parseInt($(linenumberdivs[i - 1]).find('> span').last().attr('data-linenumber')) : 0\n      $(linenumberdivs[i]).find('> span').each((key, value) => {\n        $(value).attr('data-linenumber', startnumber + key + 1)\n      })\n    }\n  }\n  // show yaml meta paring error\n  if (md.metaError) {\n    var warning = result.find('div#meta-error')\n    if (warning && warning.length > 0) {\n      warning.text(md.metaError)\n    } else {\n      warning = $(`<div id=\"meta-error\" class=\"alert alert-warning\">${escapeHTML(md.metaError)}</div>`)\n      result.prepend(warning)\n    }\n  }\n  return result\n}\nwindow.postProcess = postProcess\n\nvar domevents = Object.getOwnPropertyNames(document).concat(Object.getOwnPropertyNames(Object.getPrototypeOf(Object.getPrototypeOf(document)))).concat(Object.getOwnPropertyNames(Object.getPrototypeOf(window))).filter(function (i) {\n  return !i.indexOf('on') && (document[i] === null || typeof document[i] === 'function')\n}).filter(function (elem, pos, self) {\n  return self.indexOf(elem) === pos\n})\n\nexport function removeDOMEvents (view) {\n  for (var i = 0, l = domevents.length; i < l; i++) {\n    view.find('[' + domevents[i] + ']').removeAttr(domevents[i])\n  }\n}\nwindow.removeDOMEvents = removeDOMEvents\n\nfunction generateCleanHTML (view) {\n  const src = view.clone()\n  const eles = src.find('*')\n  // remove syncscroll parts\n  eles.removeClass('part')\n  src.find('*[class=\"\"]').removeAttr('class')\n  eles.removeAttr('data-startline data-endline')\n  src.find(\"a[href^='#'][smoothhashscroll]\").removeAttr('smoothhashscroll')\n  // remove gist content\n  src.find('code[data-gist-id]').children().remove()\n  // disable todo list\n  src.find('input.task-list-item-checkbox').attr('disabled', '')\n  // replace emoji image path\n  src.find('img.emoji').each((key, value) => {\n    let name = $(value).attr('alt')\n    name = name.substr(1)\n    name = name.slice(0, name.length - 1)\n    $(value).attr('src', `https://cdnjs.cloudflare.com/ajax/libs/emojify.js/1.1.0/images/basic/${name}.png`)\n  })\n  // replace video to iframe\n  src.find('div[data-videoid]').each((key, value) => {\n    const id = $(value).attr('data-videoid')\n    const style = $(value).attr('style')\n    let url = null\n    if ($(value).hasClass('youtube')) {\n      url = 'https://www.youtube.com/embed/'\n    } else if ($(value).hasClass('vimeo')) {\n      url = 'https://player.vimeo.com/video/'\n    }\n    if (url) {\n      const iframe = $('<iframe frameborder=\"0\" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>')\n      iframe.attr('src', url + id)\n      iframe.attr('style', style)\n      $(value).html(iframe)\n    }\n  })\n  return src\n}\n\nexport function exportToRawHTML (view) {\n  const filename = `${renderFilename(ui.area.markdown)}.html`\n  const src = generateCleanHTML(view)\n  $(src).find('a.anchor').remove()\n  const html = src[0].outerHTML\n  const blob = new Blob([html], {\n    type: 'text/html;charset=utf-8'\n  })\n  saveAs(blob, filename, true)\n}\n\n// extract markdown body to html and compile to template\nexport function exportToHTML (view) {\n  const title = renderTitle(ui.area.markdown)\n  const filename = `${renderFilename(ui.area.markdown)}.html`\n  const src = generateCleanHTML(view)\n  // generate toc\n  const toc = $('#ui-toc').clone()\n  toc.find('*').removeClass('active').find(\"a[href^='#'][smoothhashscroll]\").removeAttr('smoothhashscroll')\n  const tocAffix = $('#ui-toc-affix').clone()\n  tocAffix.find('*').removeClass('active').find(\"a[href^='#'][smoothhashscroll]\").removeAttr('smoothhashscroll')\n  // generate html via template\n  $.get(`${serverurl}/build/html.min.css`, css => {\n    $.get(`${serverurl}/views/html.hbs`, data => {\n      const template = window.Handlebars.compile(data)\n      const context = {\n        url: serverurl,\n        title,\n        css,\n        html: src[0].outerHTML,\n        'ui-toc': toc.html(),\n        'ui-toc-affix': tocAffix.html(),\n        lang: (md && md.meta && md.meta.lang) ? `lang=\"${md.meta.lang}\"` : null,\n        dir: (md && md.meta && md.meta.dir) ? `dir=\"${md.meta.dir}\"` : null\n      }\n      const html = template(context)\n      const blob = new Blob([html], {\n        type: 'text/html;charset=utf-8'\n      })\n      saveAs(blob, filename, true)\n    })\n  })\n}\n\n// jQuery sortByDepth\n$.fn.sortByDepth = function () {\n  const ar = this.map(function () {\n    return {\n      length: $(this).parents().length,\n      elt: this\n    }\n  }).get()\n\n  const result = []\n  let i = ar.length\n  ar.sort((a, b) => a.length - b.length)\n  while (i--) {\n    result.push(ar[i].elt)\n  }\n  return $(result)\n}\n\nfunction toggleTodoEvent (e) {\n  const startline = $(this).closest('li').attr('data-startline') - 1\n  const line = window.editor.getLine(startline)\n  const matches = line.match(/^[>\\s-]*[-+*]\\s\\[([x ])\\]/)\n  if (matches && matches.length >= 2) {\n    let checked = null\n    if (matches[1] === 'x') { checked = true } else if (matches[1] === ' ') { checked = false }\n    const replacements = matches[0].match(/(^[>\\s-]*[-+*]\\s\\[)([x ])(\\])/)\n    window.editor.replaceRange(checked ? ' ' : 'x', {\n      line: startline,\n      ch: replacements[1].length\n    }, {\n      line: startline,\n      ch: replacements[1].length + 1\n    }, '+input')\n  }\n}\n\n// remove hash\nfunction removeHash () {\n  history.pushState('', document.title, window.location.pathname + window.location.search)\n}\n\nlet tocExpand = false\n\nfunction checkExpandToggle () {\n  const toc = $('.ui-toc-dropdown .toc')\n  const toggle = $('.expand-toggle')\n  if (!tocExpand) {\n    toc.removeClass('expand')\n    toggle.text('Expand all')\n  } else {\n    toc.addClass('expand')\n    toggle.text('Collapse all')\n  }\n}\n\n// toc\nexport function generateToc (id) {\n  const target = $(`#${id}`)\n  target.html('')\n  /* eslint-disable no-unused-vars */\n  var toc = new window.Toc('doc', {\n    'level': 3,\n    'top': -1,\n    'class': 'toc',\n    'ulClass': 'nav',\n    'targetId': id,\n    'process': getHeaderContent\n  })\n  /* eslint-enable no-unused-vars */\n  if (target.text() === 'undefined') { target.html('') }\n  const tocMenu = $('<div class=\"toc-menu\"></div')\n  const toggle = $('<a class=\"expand-toggle\" href=\"#\">Expand all</a>')\n  const backtotop = $('<a class=\"back-to-top\" href=\"#\">Back to top</a>')\n  const gotobottom = $('<a class=\"go-to-bottom\" href=\"#\">Go to bottom</a>')\n  checkExpandToggle()\n  toggle.click(e => {\n    e.preventDefault()\n    e.stopPropagation()\n    tocExpand = !tocExpand\n    checkExpandToggle()\n  })\n  backtotop.click(e => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (window.scrollToTop) { window.scrollToTop() }\n    removeHash()\n  })\n  gotobottom.click(e => {\n    e.preventDefault()\n    e.stopPropagation()\n    if (window.scrollToBottom) { window.scrollToBottom() }\n    removeHash()\n  })\n  tocMenu.append(toggle).append(backtotop).append(gotobottom)\n  target.append(tocMenu)\n}\n\n// smooth all hash trigger scrolling\nexport function smoothHashScroll () {\n  const hashElements = $(\"a[href^='#']:not([smoothhashscroll])\").toArray()\n\n  for (const element of hashElements) {\n    const $element = $(element)\n    const hash = element.hash\n    if (hash) {\n      $element.on('click', function (e) {\n        // store hash\n        const hash = decodeURIComponent(this.hash)\n        // escape special characters in jquery selector\n        const $hash = $(hash.replace(/(:|\\.|\\[|\\]|,)/g, '\\\\$1'))\n        // return if no element been selected\n        if ($hash.length <= 0) return\n        // prevent default anchor click behavior\n        e.preventDefault()\n        // animate\n        $('body, html').stop(true, true).animate({\n          scrollTop: $hash.offset().top\n        }, 100, 'linear', () => {\n          // when done, add hash to url\n          // (default click behaviour)\n          window.location.hash = hash\n        })\n      })\n      $element.attr('smoothhashscroll', '')\n    }\n  }\n}\n\nfunction imgPlayiframe (element, src) {\n  if (!$(element).attr('data-videoid')) return\n  const iframe = $(\"<iframe frameborder='0' webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>\")\n  $(iframe).attr('src', `${src + $(element).attr('data-videoid')}?autoplay=1`)\n  $(element).find('img').css('visibility', 'hidden')\n  $(element).append(iframe)\n}\n\nconst anchorForId = id => {\n  const anchor = document.createElement('a')\n  anchor.className = 'anchor hidden-xs'\n  anchor.href = `#${id}`\n  anchor.innerHTML = '<i class=\"fa fa-link\"></i>'\n  anchor.title = id\n  return anchor\n}\n\nconst createHeaderId = (headerContent, headerIds = null) => {\n  // to escape characters not allow in css and humanize\n  const slug = slugifyWithUTF8(headerContent)\n  let id\n  if (window.linkifyHeaderStyle === 'keep-case') {\n    id = slug\n  } else if (window.linkifyHeaderStyle === 'lower-case') {\n    // to make compatible with GitHub, GitLab, Pandoc and many more\n    id = slug.toLowerCase()\n  } else if (window.linkifyHeaderStyle === 'gfm') {\n    // see GitHub implementation reference:\n    // https://gist.github.com/asabaylus/3071099#gistcomment-1593627\n    // it works like 'lower-case', but ...\n    const idBase = slug.toLowerCase()\n    id = idBase\n    if (headerIds !== null) {\n      // ... making sure the id is unique\n      let i = 1\n      while (headerIds.has(id)) {\n        id = idBase + '-' + i\n        i++\n      }\n      headerIds.add(id)\n    }\n  } else {\n    throw new Error('Unknown linkifyHeaderStyle value \"' + window.linkifyHeaderStyle + '\"')\n  }\n  return id\n}\n\nconst linkifyAnchors = (level, containingElement) => {\n  const headers = containingElement.getElementsByTagName(`h${level}`)\n\n  for (let i = 0, l = headers.length; i < l; i++) {\n    let header = headers[i]\n    if (header.getElementsByClassName('anchor').length === 0) {\n      if (typeof header.id === 'undefined' || header.id === '') {\n        header.id = createHeaderId(getHeaderContent(header))\n      }\n      if (!(typeof header.id === 'undefined' || header.id === '')) {\n        header.insertBefore(anchorForId(header.id), header.firstChild)\n      }\n    }\n  }\n}\n\nexport function autoLinkify (view) {\n  const contentBlock = view[0]\n  if (!contentBlock) {\n    return\n  }\n  for (let level = 1; level <= 6; level++) {\n    linkifyAnchors(level, contentBlock)\n  }\n}\n\nfunction getHeaderContent (header) {\n  const headerHTML = $(header).clone()\n  headerHTML.find('.MathJax_Preview').remove()\n  headerHTML.find('.MathJax').remove()\n  return headerHTML[0].innerHTML\n}\n\nfunction changeHeaderId ($header, id, newId) {\n  $header.attr('id', newId)\n  const $headerLink = $header.find(`> a.anchor[href=\"#${id}\"]`)\n  $headerLink.attr('href', `#${newId}`)\n  $headerLink.attr('title', newId)\n}\n\nexport function deduplicatedHeaderId (view) {\n  // headers contained in the last change\n  const headers = view.find(':header.raw').removeClass('raw').toArray()\n  if (headers.length === 0) {\n    return\n  }\n  if (window.linkifyHeaderStyle === 'gfm') {\n    // consistent with GitHub, GitLab, Pandoc & co.\n    // all headers contained in the document, in order of appearance\n    const allHeaders = view.find(`:header`).toArray()\n    // list of finaly assigned header IDs\n    const headerIds = new Set()\n    for (let j = 0; j < allHeaders.length; j++) {\n      const $header = $(allHeaders[j])\n      const id = $header.attr('id')\n      const newId = createHeaderId(getHeaderContent($header), headerIds)\n      changeHeaderId($header, id, newId)\n    }\n  } else {\n    // the legacy way\n    for (let i = 0; i < headers.length; i++) {\n      const id = $(headers[i]).attr('id')\n      if (!id) continue\n      const duplicatedHeaders = view.find(`:header[id=\"${id}\"]`).toArray()\n      for (let j = 0; j < duplicatedHeaders.length; j++) {\n        if (duplicatedHeaders[j] !== headers[i]) {\n          const newId = id + j\n          const $header = $(duplicatedHeaders[j])\n          changeHeaderId($header, id, newId)\n        }\n      }\n    }\n  }\n}\n\nexport function renderTOC (view) {\n  const tocs = view.find('.toc').toArray()\n  for (let i = 0; i < tocs.length; i++) {\n    const toc = $(tocs[i])\n    const id = `toc${i}`\n    toc.attr('id', id)\n    const target = $(`#${id}`)\n    target.html('')\n    /* eslint-disable no-unused-vars */\n    let TOC = new window.Toc('doc', {\n      'level': 3,\n      'top': -1,\n      'class': 'toc',\n      'targetId': id,\n      'process': getHeaderContent\n    })\n    /* eslint-enable no-unused-vars */\n    if (target.text() === 'undefined') { target.html('') }\n    target.replaceWith(target.html())\n  }\n}\n\nexport function scrollToHash () {\n  const hash = location.hash\n  location.hash = ''\n  location.hash = hash\n}\n\nfunction highlightRender (code, lang) {\n  if (!lang || /no(-?)highlight|plain|text/.test(lang)) { return }\n  code = S(code).escapeHTML().s\n  if (lang === 'sequence') {\n    return `<div class=\"sequence-diagram raw\">${code}</div>`\n  } else if (lang === 'flow') {\n    return `<div class=\"flow-chart raw\">${code}</div>`\n  } else if (lang === 'graphviz') {\n    return `<div class=\"graphviz raw\">${code}</div>`\n  } else if (lang === 'mermaid') {\n    return `<div class=\"mermaid raw\">${code}</div>`\n  } else if (lang === 'abc') {\n    return `<div class=\"abc raw\">${code}</div>`\n  }\n  const result = {\n    value: code\n  }\n  const showlinenumbers = /=$|=\\d+$|=\\+$/.test(lang)\n  if (showlinenumbers) {\n    let startnumber = 1\n    const matches = lang.match(/=(\\d+)$/)\n    if (matches) { startnumber = parseInt(matches[1]) }\n    const lines = result.value.split('\\n')\n    const linenumbers = []\n    for (let i = 0; i < lines.length - 1; i++) {\n      linenumbers[i] = `<span data-linenumber='${startnumber + i}'></span>`\n    }\n    const continuelinenumber = /=\\+$/.test(lang)\n    const linegutter = `<div class='gutter linenumber${continuelinenumber ? ' continue' : ''}'>${linenumbers.join('\\n')}</div>`\n    result.value = `<div class='wrapper'>${linegutter}<div class='code'>${result.value}</div></div>`\n  }\n  return result.value\n}\n\nexport let md = markdownit('default', {\n  html: true,\n  breaks: true,\n  langPrefix: '',\n  linkify: true,\n  typographer: true,\n  highlight: highlightRender\n})\nwindow.md = md\n\nmd.use(require('markdown-it-abbr'))\nmd.use(require('markdown-it-footnote'))\nmd.use(require('markdown-it-deflist'))\nmd.use(require('markdown-it-mark'))\nmd.use(require('markdown-it-ins'))\nmd.use(require('markdown-it-sub'))\nmd.use(require('markdown-it-sup'))\nmd.use(require('markdown-it-mathjax')({\n  beforeMath: '<span class=\"mathjax raw\">',\n  afterMath: '</span>',\n  beforeInlineMath: '<span class=\"mathjax raw\">\\\\(',\n  afterInlineMath: '\\\\)</span>',\n  beforeDisplayMath: '<span class=\"mathjax raw\">\\\\[',\n  afterDisplayMath: '\\\\]</span>'\n}))\nmd.use(require('markdown-it-imsize'))\n\nmd.use(require('markdown-it-emoji'), {\n  shortcuts: {}\n})\n\nwindow.emojify.setConfig({\n  blacklist: {\n    elements: ['script', 'textarea', 'a', 'pre', 'code', 'svg'],\n    classes: ['no-emojify']\n  },\n  img_dir: `${serverurl}/build/emojify.js/dist/images/basic`,\n  ignore_emoticons: true\n})\n\nmd.renderer.rules.emoji = (token, idx) => window.emojify.replace(`:${token[idx].markup}:`)\n\nfunction renderContainer (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('role', 'alert')\n  tokens[idx].attrJoin('class', 'alert')\n  tokens[idx].attrJoin('class', `alert-${tokens[idx].info.trim()}`)\n  return self.renderToken(...arguments)\n}\nmd.use(markdownitContainer, 'success', { render: renderContainer })\nmd.use(markdownitContainer, 'info', { render: renderContainer })\nmd.use(markdownitContainer, 'warning', { render: renderContainer })\nmd.use(markdownitContainer, 'danger', { render: renderContainer })\n\nlet defaultImageRender = md.renderer.rules.image\nmd.renderer.rules.image = function (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('class', 'raw')\n  return defaultImageRender(...arguments)\n}\nmd.renderer.rules.list_item_open = function (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('class', 'raw')\n  return self.renderToken(...arguments)\n}\nmd.renderer.rules.blockquote_open = function (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('class', 'raw')\n  return self.renderToken(...arguments)\n}\nmd.renderer.rules.heading_open = function (tokens, idx, options, env, self) {\n  tokens[idx].attrJoin('class', 'raw')\n  return self.renderToken(...arguments)\n}\nmd.renderer.rules.fence = (tokens, idx, options, env, self) => {\n  const token = tokens[idx]\n  const info = token.info ? md.utils.unescapeAll(token.info).trim() : ''\n  let langName = ''\n  let highlighted\n\n  if (info) {\n    langName = info.split(/\\s+/g)[0]\n    if (/!$/.test(info)) token.attrJoin('class', 'wrap')\n    token.attrJoin('class', options.langPrefix + langName.replace(/=$|=\\d+$|=\\+$|!$|=!$/, ''))\n    token.attrJoin('class', 'hljs')\n    token.attrJoin('class', 'raw')\n  }\n\n  if (options.highlight) {\n    highlighted = options.highlight(token.content, langName) || md.utils.escapeHtml(token.content)\n  } else {\n    highlighted = md.utils.escapeHtml(token.content)\n  }\n\n  if (highlighted.indexOf('<pre') === 0) {\n    return `${highlighted}\\n`\n  }\n\n  return `<pre><code${self.renderAttrs(token)}>${highlighted}</code></pre>\\n`\n}\n\n// youtube\nconst youtubePlugin = new Plugin(\n  // regexp to match\n  /{%youtube\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const videoid = match[1]\n    if (!videoid) return\n    const div = $('<div class=\"youtube raw\"></div>')\n    div.attr('data-videoid', videoid)\n    const thumbnailSrc = `//img.youtube.com/vi/${videoid}/hqdefault.jpg`\n    const image = `<img src=\"${thumbnailSrc}\" />`\n    div.append(image)\n    const icon = '<i class=\"icon fa fa-youtube-play fa-5x\"></i>'\n    div.append(icon)\n    return div[0].outerHTML\n  }\n)\n// vimeo\nconst vimeoPlugin = new Plugin(\n  // regexp to match\n  /{%vimeo\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const videoid = match[1]\n    if (!videoid) return\n    const div = $('<div class=\"vimeo raw\"></div>')\n    div.attr('data-videoid', videoid)\n    const icon = '<i class=\"icon fa fa-vimeo-square fa-5x\"></i>'\n    div.append(icon)\n    return div[0].outerHTML\n  }\n)\n// gist\nconst gistPlugin = new Plugin(\n  // regexp to match\n  /{%gist\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const gistid = match[1]\n    const code = `<code data-gist-id=\"${gistid}\"></code>`\n    return code\n  }\n)\n// TOC\nconst tocPlugin = new Plugin(\n  // regexp to match\n  /^\\[TOC\\]$/i,\n\n  (match, utils) => '<div class=\"toc\"></div>'\n)\n// slideshare\nconst slidesharePlugin = new Plugin(\n  // regexp to match\n  /{%slideshare\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const slideshareid = match[1]\n    const div = $('<div class=\"slideshare raw\"></div>')\n    div.attr('data-slideshareid', slideshareid)\n    return div[0].outerHTML\n  }\n)\n// speakerdeck\nconst speakerdeckPlugin = new Plugin(\n  // regexp to match\n  /{%speakerdeck\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const speakerdeckid = match[1]\n    const div = $('<div class=\"speakerdeck raw\"></div>')\n    div.attr('data-speakerdeckid', speakerdeckid)\n    return div[0].outerHTML\n  }\n)\n// pdf\nconst pdfPlugin = new Plugin(\n  // regexp to match\n  /{%pdf\\s*([\\d\\D]*?)\\s*%}/,\n\n  (match, utils) => {\n    const pdfurl = match[1]\n    if (!isValidURL(pdfurl)) return match[0]\n    const div = $('<div class=\"pdf raw\"></div>')\n    div.attr('data-pdfurl', pdfurl)\n    return div[0].outerHTML\n  }\n)\n\nconst emojijsPlugin = new Plugin(\n  // regexp to match emoji shortcodes :something:\n  // We generate an universal regex that guaranteed only contains the\n  // emojies we have available. This should prevent all false-positives\n  new RegExp(':(' + window.emojify.emojiNames.map((item) => { return RegExp.escape(item) }).join('|') + '):', 'i'),\n\n  (match, utils) => {\n    const emoji = match[1].toLowerCase()\n    const div = $(`<img class=\"emoji\" alt=\":${emoji}:\" src=\"${serverurl}/build/emojify.js/dist/images/basic/${emoji}.png\"></img>`)\n    return div[0].outerHTML\n  }\n)\n\n// yaml meta, from https://github.com/eugeneware/remarkable-meta\nfunction get (state, line) {\n  const pos = state.bMarks[line]\n  const max = state.eMarks[line]\n  return state.src.substr(pos, max - pos)\n}\n\nfunction meta (state, start, end, silent) {\n  if (start !== 0 || state.blkIndent !== 0) return false\n  if (state.tShift[start] < 0) return false\n  if (!get(state, start).match(/^---$/)) return false\n\n  const data = []\n  for (var line = start + 1; line < end; line++) {\n    const str = get(state, line)\n    if (str.match(/^(\\.{3}|-{3})$/)) break\n    if (state.tShift[line] < 0) break\n    data.push(str)\n  }\n\n  if (line >= end) return false\n\n  try {\n    md.meta = window.jsyaml.safeLoad(data.join('\\n')) || {}\n    delete md.metaError\n  } catch (err) {\n    md.metaError = err\n    console.warn(err)\n    return false\n  }\n\n  state.line = line + 1\n\n  return true\n}\n\nfunction metaPlugin (md) {\n  md.meta = md.meta || {}\n  md.block.ruler.before('code', 'meta', meta, {\n    alt: []\n  })\n}\n\nmd.use(metaPlugin)\nmd.use(emojijsPlugin)\nmd.use(youtubePlugin)\nmd.use(vimeoPlugin)\nmd.use(gistPlugin)\nmd.use(tocPlugin)\nmd.use(slidesharePlugin)\nmd.use(speakerdeckPlugin)\nmd.use(pdfPlugin)\n\nexport default {\n  md\n}\n"], "filenames": ["public/js/extra.js"], "buggy_code_start_loc": [389], "buggy_code_end_loc": [390], "fixing_code_start_loc": [389], "fixing_code_end_loc": [390], "type": "CWE-79", "message": "HedgeDoc is a collaborative platform for writing and sharing markdown. In HedgeDoc before version 1.7.1 an attacker can inject arbitrary `script` tags in HedgeDoc notes using mermaid diagrams. Our content security policy prevents loading scripts from most locations, but `www.google-analytics.com` is allowed. Using Google Tag Manger it is possible to inject arbitrary JavaScript and execute it on page load. Depending on the configuration of the instance, the attacker may not need authentication to create or edit notes. The problem is patched in HedgeDoc 1.7.1. As a workaround one can disallow `www.google-analytics.com` in the `Content-Security-Policy` header. Note that other ways to leverage the `script` tag injection might exist.", "other": {"cve": {"id": "CVE-2020-26287", "sourceIdentifier": "security-advisories@github.com", "published": "2020-12-29T00:15:12.673", "lastModified": "2020-12-30T16:50:07.600", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "HedgeDoc is a collaborative platform for writing and sharing markdown. In HedgeDoc before version 1.7.1 an attacker can inject arbitrary `script` tags in HedgeDoc notes using mermaid diagrams. Our content security policy prevents loading scripts from most locations, but `www.google-analytics.com` is allowed. Using Google Tag Manger it is possible to inject arbitrary JavaScript and execute it on page load. Depending on the configuration of the instance, the attacker may not need authentication to create or edit notes. The problem is patched in HedgeDoc 1.7.1. As a workaround one can disallow `www.google-analytics.com` in the `Content-Security-Policy` header. Note that other ways to leverage the `script` tag injection might exist."}, {"lang": "es", "value": "HedgeDoc es una plataforma colaborativa para escribir y compartir rebajas.&#xa0;En HedgeDoc versiones anteriores a 1.7.1, un atacante puede inyectar etiquetas \"script\" arbitrarias en las notas de HedgeDoc usando diagramas mermaid.&#xa0;Nuestra pol\u00edtica de seguridad de contenido evita una carga de scripts de la mayor\u00eda de las ubicaciones, pero se permite \"www.google-analytics.com\"&#xa0;Usando Google Tag Manager, es posible inyectar JavaScript arbitrario y ejecutarlo al cargar la p\u00e1gina.&#xa0;Dependiendo de la configuraci\u00f3n de la instancia, es posible que el atacante no necesite autenticaci\u00f3n para crear o editar notas.&#xa0;El problema est\u00e1 parcheado en HedgeDoc versi\u00f3n 1.7.1.&#xa0;Como soluci\u00f3n alternativa, se puede rechazar \"www.google-analytics.com\" en el encabezado \"Content-Security-Policy\".&#xa0;Tome en cuenta que pueden presentar otras formas de aprovechar la inyecci\u00f3n de etiquetas \"script\""}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 8.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.3, "impactScore": 5.8}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hedgedoc:hedgedoc:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.7.1", "matchCriteriaId": "DB55BE58-3D3F-40C5-89FE-2AACEA56F4E0"}]}]}], "references": [{"url": "https://github.com/Alemmi/ctf-writeups/blob/main/hxpctf-2020/hackme/solution.md", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/hackmdio/codimd/issues/1630", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/hedgedoc/hedgedoc/commit/58276ebbf4504a682454a3686dcaff88bc1069d4", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/hedgedoc/hedgedoc/releases/tag/1.7.1", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/hedgedoc/hedgedoc/security/advisories/GHSA-g6w6-7xf9-m95p", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/hedgedoc/hedgedoc/commit/58276ebbf4504a682454a3686dcaff88bc1069d4"}}