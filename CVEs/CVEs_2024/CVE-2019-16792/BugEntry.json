{"buggy_code": ["##############################################################################\n#\n# Copyright (c) 2001, 2002 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\"\"\"HTTP Request Parser\n\nThis server uses asyncore to accept connections and do initial\nprocessing but threads to do work.\n\"\"\"\nimport re\nfrom io import BytesIO\n\nfrom waitress.buffers import OverflowableBuffer\nfrom waitress.compat import tostr, unquote_bytes_to_wsgi, urlparse\nfrom waitress.receiver import ChunkedReceiver, FixedStreamReceiver\nfrom waitress.utilities import (\n    BadRequest,\n    RequestEntityTooLarge,\n    RequestHeaderFieldsTooLarge,\n    find_double_newline,\n)\n\n\nclass ParsingError(Exception):\n    pass\n\n\nclass HTTPRequestParser(object):\n    \"\"\"A structure that collects the HTTP request.\n\n    Once the stream is completed, the instance is passed to\n    a server task constructor.\n    \"\"\"\n\n    completed = False  # Set once request is completed.\n    empty = False  # Set if no request was made.\n    expect_continue = False  # client sent \"Expect: 100-continue\" header\n    headers_finished = False  # True when headers have been read\n    header_plus = b\"\"\n    chunked = False\n    content_length = 0\n    header_bytes_received = 0\n    body_bytes_received = 0\n    body_rcv = None\n    version = \"1.0\"\n    error = None\n    connection_close = False\n\n    # Other attributes: first_line, header, headers, command, uri, version,\n    # path, query, fragment\n\n    def __init__(self, adj):\n        \"\"\"\n        adj is an Adjustments object.\n        \"\"\"\n        # headers is a mapping containing keys translated to uppercase\n        # with dashes turned into underscores.\n        self.headers = {}\n        self.adj = adj\n\n    def received(self, data):\n        \"\"\"\n        Receives the HTTP stream for one request.  Returns the number of\n        bytes consumed.  Sets the completed flag once both the header and the\n        body have been received.\n        \"\"\"\n        if self.completed:\n            return 0  # Can't consume any more.\n\n        datalen = len(data)\n        br = self.body_rcv\n        if br is None:\n            # In header.\n            max_header = self.adj.max_request_header_size\n\n            s = self.header_plus + data\n            index = find_double_newline(s)\n            consumed = 0\n\n            if index >= 0:\n                # If the headers have ended, and we also have part of the body\n                # message in data we still want to validate we aren't going\n                # over our limit for received headers.\n                self.header_bytes_received += index\n                consumed = datalen - (len(s) - index)\n            else:\n                self.header_bytes_received += datalen\n                consumed = datalen\n\n            # If the first line + headers is over the max length, we return a\n            # RequestHeaderFieldsTooLarge error rather than continuing to\n            # attempt to parse the headers.\n            if self.header_bytes_received >= max_header:\n                self.parse_header(b\"GET / HTTP/1.0\\r\\n\")\n                self.error = RequestHeaderFieldsTooLarge(\n                    \"exceeds max_header of %s\" % max_header\n                )\n                self.completed = True\n                return consumed\n\n            if index >= 0:\n                # Header finished.\n                header_plus = s[:index]\n\n                # Remove preceeding blank lines. This is suggested by\n                # https://tools.ietf.org/html/rfc7230#section-3.5 to support\n                # clients sending an extra CR LF after another request when\n                # using HTTP pipelining\n                header_plus = header_plus.lstrip()\n\n                if not header_plus:\n                    self.empty = True\n                    self.completed = True\n                else:\n                    try:\n                        self.parse_header(header_plus)\n                    except ParsingError as e:\n                        self.error = BadRequest(e.args[0])\n                        self.completed = True\n                    else:\n                        if self.body_rcv is None:\n                            # no content-length header and not a t-e: chunked\n                            # request\n                            self.completed = True\n                        if self.content_length > 0:\n                            max_body = self.adj.max_request_body_size\n                            # we won't accept this request if the content-length\n                            # is too large\n                            if self.content_length >= max_body:\n                                self.error = RequestEntityTooLarge(\n                                    \"exceeds max_body of %s\" % max_body\n                                )\n                                self.completed = True\n                self.headers_finished = True\n                return consumed\n\n            # Header not finished yet.\n            self.header_plus = s\n            return datalen\n        else:\n            # In body.\n            consumed = br.received(data)\n            self.body_bytes_received += consumed\n            max_body = self.adj.max_request_body_size\n            if self.body_bytes_received >= max_body:\n                # this will only be raised during t-e: chunked requests\n                self.error = RequestEntityTooLarge(\"exceeds max_body of %s\" % max_body)\n                self.completed = True\n            elif br.error:\n                # garbage in chunked encoding input probably\n                self.error = br.error\n                self.completed = True\n            elif br.completed:\n                # The request (with the body) is ready to use.\n                self.completed = True\n                if self.chunked:\n                    # We've converted the chunked transfer encoding request\n                    # body into a normal request body, so we know its content\n                    # length; set the header here.  We already popped the\n                    # TRANSFER_ENCODING header in parse_header, so this will\n                    # appear to the client to be an entirely non-chunked HTTP\n                    # request with a valid content-length.\n                    self.headers[\"CONTENT_LENGTH\"] = str(br.__len__())\n\n            return consumed\n\n    def parse_header(self, header_plus):\n        \"\"\"\n        Parses the header_plus block of text (the headers plus the\n        first line of the request).\n        \"\"\"\n        index = header_plus.find(b\"\\r\\n\")\n        if index >= 0:\n            first_line = header_plus[:index].rstrip()\n            header = header_plus[index + 2 :]\n        else:\n            raise ParsingError(\"HTTP message header invalid\")\n\n        if b\"\\r\" in first_line or b\"\\n\" in first_line:\n            raise ParsingError(\"Bare CR or LF found in HTTP message\")\n\n        self.first_line = first_line  # for testing\n\n        lines = get_header_lines(header)\n\n        headers = self.headers\n        for line in lines:\n            index = line.find(b\":\")\n            if index > 0:\n                key = line[:index]\n\n                if key != key.strip():\n                    raise ParsingError(\"Invalid whitespace after field-name\")\n\n                if b\"_\" in key:\n                    continue\n                value = line[index + 1 :].strip()\n                key1 = tostr(key.upper().replace(b\"-\", b\"_\"))\n                # If a header already exists, we append subsequent values\n                # seperated by a comma. Applications already need to handle\n                # the comma seperated values, as HTTP front ends might do\n                # the concatenation for you (behavior specified in RFC2616).\n                try:\n                    headers[key1] += tostr(b\", \" + value)\n                except KeyError:\n                    headers[key1] = tostr(value)\n            # else there's garbage in the headers?\n\n        # command, uri, version will be bytes\n        command, uri, version = crack_first_line(first_line)\n        version = tostr(version)\n        command = tostr(command)\n        self.command = command\n        self.version = version\n        (\n            self.proxy_scheme,\n            self.proxy_netloc,\n            self.path,\n            self.query,\n            self.fragment,\n        ) = split_uri(uri)\n        self.url_scheme = self.adj.url_scheme\n        connection = headers.get(\"CONNECTION\", \"\")\n\n        if version == \"1.0\":\n            if connection.lower() != \"keep-alive\":\n                self.connection_close = True\n\n        if version == \"1.1\":\n            # since the server buffers data from chunked transfers and clients\n            # never need to deal with chunked requests, downstream clients\n            # should not see the HTTP_TRANSFER_ENCODING header; we pop it\n            # here\n            te = headers.pop(\"TRANSFER_ENCODING\", \"\")\n            if te.lower() == \"chunked\":\n                self.chunked = True\n                buf = OverflowableBuffer(self.adj.inbuf_overflow)\n                self.body_rcv = ChunkedReceiver(buf)\n            expect = headers.get(\"EXPECT\", \"\").lower()\n            self.expect_continue = expect == \"100-continue\"\n            if connection.lower() == \"close\":\n                self.connection_close = True\n\n        if not self.chunked:\n            try:\n                cl = int(headers.get(\"CONTENT_LENGTH\", 0))\n            except ValueError:\n                cl = 0\n            self.content_length = cl\n            if cl > 0:\n                buf = OverflowableBuffer(self.adj.inbuf_overflow)\n                self.body_rcv = FixedStreamReceiver(cl, buf)\n\n    def get_body_stream(self):\n        body_rcv = self.body_rcv\n        if body_rcv is not None:\n            return body_rcv.getfile()\n        else:\n            return BytesIO()\n\n    def close(self):\n        body_rcv = self.body_rcv\n        if body_rcv is not None:\n            body_rcv.getbuf().close()\n\n\ndef split_uri(uri):\n    # urlsplit handles byte input by returning bytes on py3, so\n    # scheme, netloc, path, query, and fragment are bytes\n\n    scheme = netloc = path = query = fragment = b\"\"\n\n    # urlsplit below will treat this as a scheme-less netloc, thereby losing\n    # the original intent of the request. Here we shamelessly stole 4 lines of\n    # code from the CPython stdlib to parse out the fragment and query but\n    # leave the path alone. See\n    # https://github.com/python/cpython/blob/8c9e9b0cd5b24dfbf1424d1f253d02de80e8f5ef/Lib/urllib/parse.py#L465-L468\n    # and https://github.com/Pylons/waitress/issues/260\n\n    if uri[:2] == b\"//\":\n        path = uri\n\n        if b\"#\" in path:\n            path, fragment = path.split(b\"#\", 1)\n\n        if b\"?\" in path:\n            path, query = path.split(b\"?\", 1)\n    else:\n        try:\n            scheme, netloc, path, query, fragment = urlparse.urlsplit(uri)\n        except UnicodeError:\n            raise ParsingError(\"Bad URI\")\n\n    return (\n        tostr(scheme),\n        tostr(netloc),\n        unquote_bytes_to_wsgi(path),\n        tostr(query),\n        tostr(fragment),\n    )\n\n\ndef get_header_lines(header):\n    \"\"\"\n    Splits the header into lines, putting multi-line headers together.\n    \"\"\"\n    r = []\n    lines = header.split(b\"\\r\\n\")\n    for line in lines:\n        if b\"\\r\" in line or b\"\\n\" in line:\n            raise ParsingError('Bare CR or LF found in header line \"%s\"' % tostr(line))\n\n        if line.startswith((b\" \", b\"\\t\")):\n            if not r:\n                # https://corte.si/posts/code/pathod/pythonservers/index.html\n                raise ParsingError('Malformed header line \"%s\"' % tostr(line))\n            r[-1] += line\n        else:\n            r.append(line)\n    return r\n\n\nfirst_line_re = re.compile(\n    b\"([^ ]+) \"\n    b\"((?:[^ :?#]+://[^ ?#/]*(?:[0-9]{1,5})?)?[^ ]+)\"\n    b\"(( HTTP/([0-9.]+))$|$)\"\n)\n\n\ndef crack_first_line(line):\n    m = first_line_re.match(line)\n    if m is not None and m.end() == len(line):\n        if m.group(3):\n            version = m.group(5)\n        else:\n            version = b\"\"\n        method = m.group(1)\n\n        # the request methods that are currently defined are all uppercase:\n        # https://www.iana.org/assignments/http-methods/http-methods.xhtml and\n        # the request method is case sensitive according to\n        # https://tools.ietf.org/html/rfc7231#section-4.1\n\n        # By disallowing anything but uppercase methods we save poor\n        # unsuspecting souls from sending lowercase HTTP methods to waitress\n        # and having the request complete, while servers like nginx drop the\n        # request onto the floor.\n        if method != method.upper():\n            raise ParsingError('Malformed HTTP method \"%s\"' % tostr(method))\n        uri = m.group(2)\n        return method, uri, version\n    else:\n        return b\"\", b\"\", b\"\"\n", "##############################################################################\n#\n# Copyright (c) 2002 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\"\"\"HTTP Request Parser tests\n\"\"\"\nimport unittest\n\nfrom waitress.compat import text_, tobytes\n\n\nclass TestHTTPRequestParser(unittest.TestCase):\n    def setUp(self):\n        from waitress.parser import HTTPRequestParser\n        from waitress.adjustments import Adjustments\n\n        my_adj = Adjustments()\n        self.parser = HTTPRequestParser(my_adj)\n\n    def test_get_body_stream_None(self):\n        self.parser.body_recv = None\n        result = self.parser.get_body_stream()\n        self.assertEqual(result.getvalue(), b\"\")\n\n    def test_get_body_stream_nonNone(self):\n        body_rcv = DummyBodyStream()\n        self.parser.body_rcv = body_rcv\n        result = self.parser.get_body_stream()\n        self.assertEqual(result, body_rcv)\n\n    def test_received_get_no_headers(self):\n        data = b\"HTTP/1.0 GET /foobar\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 24)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(self.parser.headers, {})\n\n    def test_received_bad_host_header(self):\n        from waitress.utilities import BadRequest\n\n        data = b\"HTTP/1.0 GET /foobar\\r\\n Host: foo\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 36)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(self.parser.error.__class__, BadRequest)\n\n    def test_received_nonsense_nothing(self):\n        data = b\"\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 4)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(self.parser.headers, {})\n\n    def test_received_no_doublecr(self):\n        data = b\"GET /foobar HTTP/8.4\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 22)\n        self.assertFalse(self.parser.completed)\n        self.assertEqual(self.parser.headers, {})\n\n    def test_received_already_completed(self):\n        self.parser.completed = True\n        result = self.parser.received(b\"a\")\n        self.assertEqual(result, 0)\n\n    def test_received_cl_too_large(self):\n        from waitress.utilities import RequestEntityTooLarge\n\n        self.parser.adj.max_request_body_size = 2\n        data = b\"GET /foobar HTTP/8.4\\r\\nContent-Length: 10\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 44)\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(isinstance(self.parser.error, RequestEntityTooLarge))\n\n    def test_received_headers_too_large(self):\n        from waitress.utilities import RequestHeaderFieldsTooLarge\n\n        self.parser.adj.max_request_header_size = 2\n        data = b\"GET /foobar HTTP/8.4\\r\\nX-Foo: 1\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 34)\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(isinstance(self.parser.error, RequestHeaderFieldsTooLarge))\n\n    def test_received_body_too_large(self):\n        from waitress.utilities import RequestEntityTooLarge\n\n        self.parser.adj.max_request_body_size = 2\n        data = (\n            b\"GET /foobar HTTP/1.1\\r\\n\"\n            b\"Transfer-Encoding: chunked\\r\\n\"\n            b\"X-Foo: 1\\r\\n\"\n            b\"\\r\\n\"\n            b\"1d;\\r\\n\"\n            b\"This string has 29 characters\\r\\n\"\n            b\"0\\r\\n\\r\\n\"\n        )\n\n        result = self.parser.received(data)\n        self.assertEqual(result, 62)\n        self.parser.received(data[result:])\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(isinstance(self.parser.error, RequestEntityTooLarge))\n\n    def test_received_error_from_parser(self):\n        from waitress.utilities import BadRequest\n\n        data = (\n            b\"GET /foobar HTTP/1.1\\r\\n\"\n            b\"Transfer-Encoding: chunked\\r\\n\"\n            b\"X-Foo: 1\\r\\n\"\n            b\"\\r\\n\"\n            b\"garbage\\r\\n\"\n        )\n        # header\n        result = self.parser.received(data)\n        # body\n        result = self.parser.received(data[result:])\n        self.assertEqual(result, 9)\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(isinstance(self.parser.error, BadRequest))\n\n    def test_received_chunked_completed_sets_content_length(self):\n        data = (\n            b\"GET /foobar HTTP/1.1\\r\\n\"\n            b\"Transfer-Encoding: chunked\\r\\n\"\n            b\"X-Foo: 1\\r\\n\"\n            b\"\\r\\n\"\n            b\"1d;\\r\\n\"\n            b\"This string has 29 characters\\r\\n\"\n            b\"0\\r\\n\\r\\n\"\n        )\n        result = self.parser.received(data)\n        self.assertEqual(result, 62)\n        data = data[result:]\n        result = self.parser.received(data)\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(self.parser.error is None)\n        self.assertEqual(self.parser.headers[\"CONTENT_LENGTH\"], \"29\")\n\n    def test_parse_header_gardenpath(self):\n        data = b\"GET /foobar HTTP/8.4\\r\\nfoo: bar\\r\\n\"\n        self.parser.parse_header(data)\n        self.assertEqual(self.parser.first_line, b\"GET /foobar HTTP/8.4\")\n        self.assertEqual(self.parser.headers[\"FOO\"], \"bar\")\n\n    def test_parse_header_no_cr_in_headerplus(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\"\n\n        try:\n            self.parser.parse_header(data)\n        except ParsingError:\n            pass\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_bad_content_length(self):\n        data = b\"GET /foobar HTTP/8.4\\r\\ncontent-length: abc\\r\\n\"\n        self.parser.parse_header(data)\n        self.assertEqual(self.parser.body_rcv, None)\n\n    def test_parse_header_11_te_chunked(self):\n        # NB: test that capitalization of header value is unimportant\n        data = b\"GET /foobar HTTP/1.1\\r\\ntransfer-encoding: ChUnKed\\r\\n\"\n        self.parser.parse_header(data)\n        self.assertEqual(self.parser.body_rcv.__class__.__name__, \"ChunkedReceiver\")\n\n    def test_parse_header_11_expect_continue(self):\n        data = b\"GET /foobar HTTP/1.1\\r\\nexpect: 100-continue\\r\\n\"\n        self.parser.parse_header(data)\n        self.assertEqual(self.parser.expect_continue, True)\n\n    def test_parse_header_connection_close(self):\n        data = b\"GET /foobar HTTP/1.1\\r\\nConnection: close\\r\\n\"\n        self.parser.parse_header(data)\n        self.assertEqual(self.parser.connection_close, True)\n\n    def test_close_with_body_rcv(self):\n        body_rcv = DummyBodyStream()\n        self.parser.body_rcv = body_rcv\n        self.parser.close()\n        self.assertTrue(body_rcv.closed)\n\n    def test_close_with_no_body_rcv(self):\n        self.parser.body_rcv = None\n        self.parser.close()  # doesn't raise\n\n    def test_parse_header_lf_only(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\nfoo: bar\"\n\n        try:\n            self.parser.parse_header(data)\n        except ParsingError:\n            pass\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_cr_only(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\rfoo: bar\"\n        try:\n            self.parser.parse_header(data)\n        except ParsingError:\n            pass\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_extra_lf_in_header(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\r\\nfoo: \\nbar\\r\\n\"\n        try:\n            self.parser.parse_header(data)\n        except ParsingError as e:\n            self.assertIn(\"Bare CR or LF found in header line\", e.args[0])\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_extra_lf_in_first_line(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar\\n HTTP/8.4\\r\\n\"\n        try:\n            self.parser.parse_header(data)\n        except ParsingError as e:\n            self.assertIn(\"Bare CR or LF found in HTTP message\", e.args[0])\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_invalid_whitespace(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\r\\nfoo : bar\\r\\n\"\n        try:\n            self.parser.parse_header(data)\n        except ParsingError as e:\n            self.assertIn(\"Invalid whitespace after field-name\", e.args[0])\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n\nclass Test_split_uri(unittest.TestCase):\n    def _callFUT(self, uri):\n        from waitress.parser import split_uri\n\n        (\n            self.proxy_scheme,\n            self.proxy_netloc,\n            self.path,\n            self.query,\n            self.fragment,\n        ) = split_uri(uri)\n\n    def test_split_uri_unquoting_unneeded(self):\n        self._callFUT(b\"http://localhost:8080/abc def\")\n        self.assertEqual(self.path, \"/abc def\")\n\n    def test_split_uri_unquoting_needed(self):\n        self._callFUT(b\"http://localhost:8080/abc%20def\")\n        self.assertEqual(self.path, \"/abc def\")\n\n    def test_split_url_with_query(self):\n        self._callFUT(b\"http://localhost:8080/abc?a=1&b=2\")\n        self.assertEqual(self.path, \"/abc\")\n        self.assertEqual(self.query, \"a=1&b=2\")\n\n    def test_split_url_with_query_empty(self):\n        self._callFUT(b\"http://localhost:8080/abc?\")\n        self.assertEqual(self.path, \"/abc\")\n        self.assertEqual(self.query, \"\")\n\n    def test_split_url_with_fragment(self):\n        self._callFUT(b\"http://localhost:8080/#foo\")\n        self.assertEqual(self.path, \"/\")\n        self.assertEqual(self.fragment, \"foo\")\n\n    def test_split_url_https(self):\n        self._callFUT(b\"https://localhost:8080/\")\n        self.assertEqual(self.path, \"/\")\n        self.assertEqual(self.proxy_scheme, \"https\")\n        self.assertEqual(self.proxy_netloc, \"localhost:8080\")\n\n    def test_split_uri_unicode_error_raises_parsing_error(self):\n        # See https://github.com/Pylons/waitress/issues/64\n        from waitress.parser import ParsingError\n\n        # Either pass or throw a ParsingError, just don't throw another type of\n        # exception as that will cause the connection to close badly:\n        try:\n            self._callFUT(b\"/\\xd0\")\n        except ParsingError:\n            pass\n\n    def test_split_uri_path(self):\n        self._callFUT(b\"//testing/whatever\")\n        self.assertEqual(self.path, \"//testing/whatever\")\n        self.assertEqual(self.proxy_scheme, \"\")\n        self.assertEqual(self.proxy_netloc, \"\")\n        self.assertEqual(self.query, \"\")\n        self.assertEqual(self.fragment, \"\")\n\n    def test_split_uri_path_query(self):\n        self._callFUT(b\"//testing/whatever?a=1&b=2\")\n        self.assertEqual(self.path, \"//testing/whatever\")\n        self.assertEqual(self.proxy_scheme, \"\")\n        self.assertEqual(self.proxy_netloc, \"\")\n        self.assertEqual(self.query, \"a=1&b=2\")\n        self.assertEqual(self.fragment, \"\")\n\n    def test_split_uri_path_query_fragment(self):\n        self._callFUT(b\"//testing/whatever?a=1&b=2#fragment\")\n        self.assertEqual(self.path, \"//testing/whatever\")\n        self.assertEqual(self.proxy_scheme, \"\")\n        self.assertEqual(self.proxy_netloc, \"\")\n        self.assertEqual(self.query, \"a=1&b=2\")\n        self.assertEqual(self.fragment, \"fragment\")\n\n\nclass Test_get_header_lines(unittest.TestCase):\n    def _callFUT(self, data):\n        from waitress.parser import get_header_lines\n\n        return get_header_lines(data)\n\n    def test_get_header_lines(self):\n        result = self._callFUT(b\"slam\\r\\nslim\")\n        self.assertEqual(result, [b\"slam\", b\"slim\"])\n\n    def test_get_header_lines_folded(self):\n        # From RFC2616:\n        # HTTP/1.1 header field values can be folded onto multiple lines if the\n        # continuation line begins with a space or horizontal tab. All linear\n        # white space, including folding, has the same semantics as SP. A\n        # recipient MAY replace any linear white space with a single SP before\n        # interpreting the field value or forwarding the message downstream.\n\n        # We are just preserving the whitespace that indicates folding.\n        result = self._callFUT(b\"slim\\r\\n slam\")\n        self.assertEqual(result, [b\"slim slam\"])\n\n    def test_get_header_lines_tabbed(self):\n        result = self._callFUT(b\"slam\\r\\n\\tslim\")\n        self.assertEqual(result, [b\"slam\\tslim\"])\n\n    def test_get_header_lines_malformed(self):\n        # https://corte.si/posts/code/pathod/pythonservers/index.html\n        from waitress.parser import ParsingError\n\n        self.assertRaises(ParsingError, self._callFUT, b\" Host: localhost\\r\\n\\r\\n\")\n\n\nclass Test_crack_first_line(unittest.TestCase):\n    def _callFUT(self, line):\n        from waitress.parser import crack_first_line\n\n        return crack_first_line(line)\n\n    def test_crack_first_line_matchok(self):\n        result = self._callFUT(b\"GET / HTTP/1.0\")\n        self.assertEqual(result, (b\"GET\", b\"/\", b\"1.0\"))\n\n    def test_crack_first_line_lowercase_method(self):\n        from waitress.parser import ParsingError\n\n        self.assertRaises(ParsingError, self._callFUT, b\"get / HTTP/1.0\")\n\n    def test_crack_first_line_nomatch(self):\n        result = self._callFUT(b\"GET / bleh\")\n        self.assertEqual(result, (b\"\", b\"\", b\"\"))\n\n        result = self._callFUT(b\"GET /info?txtAirPlay&txtRAOP RTSP/1.0\")\n        self.assertEqual(result, (b\"\", b\"\", b\"\"))\n\n    def test_crack_first_line_missing_version(self):\n        result = self._callFUT(b\"GET /\")\n        self.assertEqual(result, (b\"GET\", b\"/\", b\"\"))\n\n\nclass TestHTTPRequestParserIntegration(unittest.TestCase):\n    def setUp(self):\n        from waitress.parser import HTTPRequestParser\n        from waitress.adjustments import Adjustments\n\n        my_adj = Adjustments()\n        self.parser = HTTPRequestParser(my_adj)\n\n    def feed(self, data):\n        parser = self.parser\n\n        for n in range(100):  # make sure we never loop forever\n            consumed = parser.received(data)\n            data = data[consumed:]\n\n            if parser.completed:\n                return\n        raise ValueError(\"Looping\")  # pragma: no cover\n\n    def testSimpleGET(self):\n        data = (\n            b\"GET /foobar HTTP/8.4\\r\\n\"\n            b\"FirstName: mickey\\r\\n\"\n            b\"lastname: Mouse\\r\\n\"\n            b\"content-length: 6\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello.\"\n        )\n        parser = self.parser\n        self.feed(data)\n        self.assertTrue(parser.completed)\n        self.assertEqual(parser.version, \"8.4\")\n        self.assertFalse(parser.empty)\n        self.assertEqual(\n            parser.headers,\n            {\"FIRSTNAME\": \"mickey\", \"LASTNAME\": \"Mouse\", \"CONTENT_LENGTH\": \"6\",},\n        )\n        self.assertEqual(parser.path, \"/foobar\")\n        self.assertEqual(parser.command, \"GET\")\n        self.assertEqual(parser.query, \"\")\n        self.assertEqual(parser.proxy_scheme, \"\")\n        self.assertEqual(parser.proxy_netloc, \"\")\n        self.assertEqual(parser.get_body_stream().getvalue(), b\"Hello.\")\n\n    def testComplexGET(self):\n        data = (\n            b\"GET /foo/a+%2B%2F%C3%A4%3D%26a%3Aint?d=b+%2B%2F%3D%26b%3Aint&c+%2B%2F%3D%26c%3Aint=6 HTTP/8.4\\r\\n\"\n            b\"FirstName: mickey\\r\\n\"\n            b\"lastname: Mouse\\r\\n\"\n            b\"content-length: 10\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello mickey.\"\n        )\n        parser = self.parser\n        self.feed(data)\n        self.assertEqual(parser.command, \"GET\")\n        self.assertEqual(parser.version, \"8.4\")\n        self.assertFalse(parser.empty)\n        self.assertEqual(\n            parser.headers,\n            {\"FIRSTNAME\": \"mickey\", \"LASTNAME\": \"Mouse\", \"CONTENT_LENGTH\": \"10\"},\n        )\n        # path should be utf-8 encoded\n        self.assertEqual(\n            tobytes(parser.path).decode(\"utf-8\"),\n            text_(b\"/foo/a++/\\xc3\\xa4=&a:int\", \"utf-8\"),\n        )\n        self.assertEqual(\n            parser.query, \"d=b+%2B%2F%3D%26b%3Aint&c+%2B%2F%3D%26c%3Aint=6\"\n        )\n        self.assertEqual(parser.get_body_stream().getvalue(), b\"Hello mick\")\n\n    def testProxyGET(self):\n        data = (\n            b\"GET https://example.com:8080/foobar HTTP/8.4\\r\\n\"\n            b\"content-length: 6\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello.\"\n        )\n        parser = self.parser\n        self.feed(data)\n        self.assertTrue(parser.completed)\n        self.assertEqual(parser.version, \"8.4\")\n        self.assertFalse(parser.empty)\n        self.assertEqual(parser.headers, {\"CONTENT_LENGTH\": \"6\"})\n        self.assertEqual(parser.path, \"/foobar\")\n        self.assertEqual(parser.command, \"GET\")\n        self.assertEqual(parser.proxy_scheme, \"https\")\n        self.assertEqual(parser.proxy_netloc, \"example.com:8080\")\n        self.assertEqual(parser.command, \"GET\")\n        self.assertEqual(parser.query, \"\")\n        self.assertEqual(parser.get_body_stream().getvalue(), b\"Hello.\")\n\n    def testDuplicateHeaders(self):\n        # Ensure that headers with the same key get concatenated as per\n        # RFC2616.\n        data = (\n            b\"GET /foobar HTTP/8.4\\r\\n\"\n            b\"x-forwarded-for: 10.11.12.13\\r\\n\"\n            b\"x-forwarded-for: unknown,127.0.0.1\\r\\n\"\n            b\"X-Forwarded_for: 255.255.255.255\\r\\n\"\n            b\"content-length: 6\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello.\"\n        )\n        self.feed(data)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(\n            self.parser.headers,\n            {\n                \"CONTENT_LENGTH\": \"6\",\n                \"X_FORWARDED_FOR\": \"10.11.12.13, unknown,127.0.0.1\",\n            },\n        )\n\n    def testSpoofedHeadersDropped(self):\n        data = (\n            b\"GET /foobar HTTP/8.4\\r\\n\"\n            b\"x-auth_user: bob\\r\\n\"\n            b\"content-length: 6\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello.\"\n        )\n        self.feed(data)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(self.parser.headers, {\"CONTENT_LENGTH\": \"6\",})\n\n\nclass DummyBodyStream(object):\n    def getfile(self):\n        return self\n\n    def getbuf(self):\n        return self\n\n    def close(self):\n        self.closed = True\n"], "fixing_code": ["##############################################################################\n#\n# Copyright (c) 2001, 2002 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\"\"\"HTTP Request Parser\n\nThis server uses asyncore to accept connections and do initial\nprocessing but threads to do work.\n\"\"\"\nimport re\nfrom io import BytesIO\n\nfrom waitress.buffers import OverflowableBuffer\nfrom waitress.compat import tostr, unquote_bytes_to_wsgi, urlparse\nfrom waitress.receiver import ChunkedReceiver, FixedStreamReceiver\nfrom waitress.utilities import (\n    BadRequest,\n    RequestEntityTooLarge,\n    RequestHeaderFieldsTooLarge,\n    find_double_newline,\n)\n\n\nclass ParsingError(Exception):\n    pass\n\n\nclass HTTPRequestParser(object):\n    \"\"\"A structure that collects the HTTP request.\n\n    Once the stream is completed, the instance is passed to\n    a server task constructor.\n    \"\"\"\n\n    completed = False  # Set once request is completed.\n    empty = False  # Set if no request was made.\n    expect_continue = False  # client sent \"Expect: 100-continue\" header\n    headers_finished = False  # True when headers have been read\n    header_plus = b\"\"\n    chunked = False\n    content_length = 0\n    header_bytes_received = 0\n    body_bytes_received = 0\n    body_rcv = None\n    version = \"1.0\"\n    error = None\n    connection_close = False\n\n    # Other attributes: first_line, header, headers, command, uri, version,\n    # path, query, fragment\n\n    def __init__(self, adj):\n        \"\"\"\n        adj is an Adjustments object.\n        \"\"\"\n        # headers is a mapping containing keys translated to uppercase\n        # with dashes turned into underscores.\n        self.headers = {}\n        self.adj = adj\n\n    def received(self, data):\n        \"\"\"\n        Receives the HTTP stream for one request.  Returns the number of\n        bytes consumed.  Sets the completed flag once both the header and the\n        body have been received.\n        \"\"\"\n        if self.completed:\n            return 0  # Can't consume any more.\n\n        datalen = len(data)\n        br = self.body_rcv\n        if br is None:\n            # In header.\n            max_header = self.adj.max_request_header_size\n\n            s = self.header_plus + data\n            index = find_double_newline(s)\n            consumed = 0\n\n            if index >= 0:\n                # If the headers have ended, and we also have part of the body\n                # message in data we still want to validate we aren't going\n                # over our limit for received headers.\n                self.header_bytes_received += index\n                consumed = datalen - (len(s) - index)\n            else:\n                self.header_bytes_received += datalen\n                consumed = datalen\n\n            # If the first line + headers is over the max length, we return a\n            # RequestHeaderFieldsTooLarge error rather than continuing to\n            # attempt to parse the headers.\n            if self.header_bytes_received >= max_header:\n                self.parse_header(b\"GET / HTTP/1.0\\r\\n\")\n                self.error = RequestHeaderFieldsTooLarge(\n                    \"exceeds max_header of %s\" % max_header\n                )\n                self.completed = True\n                return consumed\n\n            if index >= 0:\n                # Header finished.\n                header_plus = s[:index]\n\n                # Remove preceeding blank lines. This is suggested by\n                # https://tools.ietf.org/html/rfc7230#section-3.5 to support\n                # clients sending an extra CR LF after another request when\n                # using HTTP pipelining\n                header_plus = header_plus.lstrip()\n\n                if not header_plus:\n                    self.empty = True\n                    self.completed = True\n                else:\n                    try:\n                        self.parse_header(header_plus)\n                    except ParsingError as e:\n                        self.error = BadRequest(e.args[0])\n                        self.completed = True\n                    else:\n                        if self.body_rcv is None:\n                            # no content-length header and not a t-e: chunked\n                            # request\n                            self.completed = True\n                        if self.content_length > 0:\n                            max_body = self.adj.max_request_body_size\n                            # we won't accept this request if the content-length\n                            # is too large\n                            if self.content_length >= max_body:\n                                self.error = RequestEntityTooLarge(\n                                    \"exceeds max_body of %s\" % max_body\n                                )\n                                self.completed = True\n                self.headers_finished = True\n                return consumed\n\n            # Header not finished yet.\n            self.header_plus = s\n            return datalen\n        else:\n            # In body.\n            consumed = br.received(data)\n            self.body_bytes_received += consumed\n            max_body = self.adj.max_request_body_size\n            if self.body_bytes_received >= max_body:\n                # this will only be raised during t-e: chunked requests\n                self.error = RequestEntityTooLarge(\"exceeds max_body of %s\" % max_body)\n                self.completed = True\n            elif br.error:\n                # garbage in chunked encoding input probably\n                self.error = br.error\n                self.completed = True\n            elif br.completed:\n                # The request (with the body) is ready to use.\n                self.completed = True\n                if self.chunked:\n                    # We've converted the chunked transfer encoding request\n                    # body into a normal request body, so we know its content\n                    # length; set the header here.  We already popped the\n                    # TRANSFER_ENCODING header in parse_header, so this will\n                    # appear to the client to be an entirely non-chunked HTTP\n                    # request with a valid content-length.\n                    self.headers[\"CONTENT_LENGTH\"] = str(br.__len__())\n\n            return consumed\n\n    def parse_header(self, header_plus):\n        \"\"\"\n        Parses the header_plus block of text (the headers plus the\n        first line of the request).\n        \"\"\"\n        index = header_plus.find(b\"\\r\\n\")\n        if index >= 0:\n            first_line = header_plus[:index].rstrip()\n            header = header_plus[index + 2 :]\n        else:\n            raise ParsingError(\"HTTP message header invalid\")\n\n        if b\"\\r\" in first_line or b\"\\n\" in first_line:\n            raise ParsingError(\"Bare CR or LF found in HTTP message\")\n\n        self.first_line = first_line  # for testing\n\n        lines = get_header_lines(header)\n\n        headers = self.headers\n        for line in lines:\n            index = line.find(b\":\")\n            if index > 0:\n                key = line[:index]\n\n                if key != key.strip():\n                    raise ParsingError(\"Invalid whitespace after field-name\")\n\n                if b\"_\" in key:\n                    continue\n                value = line[index + 1 :].strip()\n                key1 = tostr(key.upper().replace(b\"-\", b\"_\"))\n                # If a header already exists, we append subsequent values\n                # seperated by a comma. Applications already need to handle\n                # the comma seperated values, as HTTP front ends might do\n                # the concatenation for you (behavior specified in RFC2616).\n                try:\n                    headers[key1] += tostr(b\", \" + value)\n                except KeyError:\n                    headers[key1] = tostr(value)\n            # else there's garbage in the headers?\n\n        # command, uri, version will be bytes\n        command, uri, version = crack_first_line(first_line)\n        version = tostr(version)\n        command = tostr(command)\n        self.command = command\n        self.version = version\n        (\n            self.proxy_scheme,\n            self.proxy_netloc,\n            self.path,\n            self.query,\n            self.fragment,\n        ) = split_uri(uri)\n        self.url_scheme = self.adj.url_scheme\n        connection = headers.get(\"CONNECTION\", \"\")\n\n        if version == \"1.0\":\n            if connection.lower() != \"keep-alive\":\n                self.connection_close = True\n\n        if version == \"1.1\":\n            # since the server buffers data from chunked transfers and clients\n            # never need to deal with chunked requests, downstream clients\n            # should not see the HTTP_TRANSFER_ENCODING header; we pop it\n            # here\n            te = headers.pop(\"TRANSFER_ENCODING\", \"\")\n            if te.lower() == \"chunked\":\n                self.chunked = True\n                buf = OverflowableBuffer(self.adj.inbuf_overflow)\n                self.body_rcv = ChunkedReceiver(buf)\n            expect = headers.get(\"EXPECT\", \"\").lower()\n            self.expect_continue = expect == \"100-continue\"\n            if connection.lower() == \"close\":\n                self.connection_close = True\n\n        if not self.chunked:\n            try:\n                cl = int(headers.get(\"CONTENT_LENGTH\", 0))\n            except ValueError:\n                raise ParsingError(\"Content-Length is invalid\")\n\n            self.content_length = cl\n            if cl > 0:\n                buf = OverflowableBuffer(self.adj.inbuf_overflow)\n                self.body_rcv = FixedStreamReceiver(cl, buf)\n\n    def get_body_stream(self):\n        body_rcv = self.body_rcv\n        if body_rcv is not None:\n            return body_rcv.getfile()\n        else:\n            return BytesIO()\n\n    def close(self):\n        body_rcv = self.body_rcv\n        if body_rcv is not None:\n            body_rcv.getbuf().close()\n\n\ndef split_uri(uri):\n    # urlsplit handles byte input by returning bytes on py3, so\n    # scheme, netloc, path, query, and fragment are bytes\n\n    scheme = netloc = path = query = fragment = b\"\"\n\n    # urlsplit below will treat this as a scheme-less netloc, thereby losing\n    # the original intent of the request. Here we shamelessly stole 4 lines of\n    # code from the CPython stdlib to parse out the fragment and query but\n    # leave the path alone. See\n    # https://github.com/python/cpython/blob/8c9e9b0cd5b24dfbf1424d1f253d02de80e8f5ef/Lib/urllib/parse.py#L465-L468\n    # and https://github.com/Pylons/waitress/issues/260\n\n    if uri[:2] == b\"//\":\n        path = uri\n\n        if b\"#\" in path:\n            path, fragment = path.split(b\"#\", 1)\n\n        if b\"?\" in path:\n            path, query = path.split(b\"?\", 1)\n    else:\n        try:\n            scheme, netloc, path, query, fragment = urlparse.urlsplit(uri)\n        except UnicodeError:\n            raise ParsingError(\"Bad URI\")\n\n    return (\n        tostr(scheme),\n        tostr(netloc),\n        unquote_bytes_to_wsgi(path),\n        tostr(query),\n        tostr(fragment),\n    )\n\n\ndef get_header_lines(header):\n    \"\"\"\n    Splits the header into lines, putting multi-line headers together.\n    \"\"\"\n    r = []\n    lines = header.split(b\"\\r\\n\")\n    for line in lines:\n        if b\"\\r\" in line or b\"\\n\" in line:\n            raise ParsingError('Bare CR or LF found in header line \"%s\"' % tostr(line))\n\n        if line.startswith((b\" \", b\"\\t\")):\n            if not r:\n                # https://corte.si/posts/code/pathod/pythonservers/index.html\n                raise ParsingError('Malformed header line \"%s\"' % tostr(line))\n            r[-1] += line\n        else:\n            r.append(line)\n    return r\n\n\nfirst_line_re = re.compile(\n    b\"([^ ]+) \"\n    b\"((?:[^ :?#]+://[^ ?#/]*(?:[0-9]{1,5})?)?[^ ]+)\"\n    b\"(( HTTP/([0-9.]+))$|$)\"\n)\n\n\ndef crack_first_line(line):\n    m = first_line_re.match(line)\n    if m is not None and m.end() == len(line):\n        if m.group(3):\n            version = m.group(5)\n        else:\n            version = b\"\"\n        method = m.group(1)\n\n        # the request methods that are currently defined are all uppercase:\n        # https://www.iana.org/assignments/http-methods/http-methods.xhtml and\n        # the request method is case sensitive according to\n        # https://tools.ietf.org/html/rfc7231#section-4.1\n\n        # By disallowing anything but uppercase methods we save poor\n        # unsuspecting souls from sending lowercase HTTP methods to waitress\n        # and having the request complete, while servers like nginx drop the\n        # request onto the floor.\n        if method != method.upper():\n            raise ParsingError('Malformed HTTP method \"%s\"' % tostr(method))\n        uri = m.group(2)\n        return method, uri, version\n    else:\n        return b\"\", b\"\", b\"\"\n", "##############################################################################\n#\n# Copyright (c) 2002 Zope Foundation and Contributors.\n# All Rights Reserved.\n#\n# This software is subject to the provisions of the Zope Public License,\n# Version 2.1 (ZPL).  A copy of the ZPL should accompany this distribution.\n# THIS SOFTWARE IS PROVIDED \"AS IS\" AND ANY AND ALL EXPRESS OR IMPLIED\n# WARRANTIES ARE DISCLAIMED, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\n# WARRANTIES OF TITLE, MERCHANTABILITY, AGAINST INFRINGEMENT, AND FITNESS\n# FOR A PARTICULAR PURPOSE.\n#\n##############################################################################\n\"\"\"HTTP Request Parser tests\n\"\"\"\nimport unittest\n\nfrom waitress.compat import text_, tobytes\n\n\nclass TestHTTPRequestParser(unittest.TestCase):\n    def setUp(self):\n        from waitress.parser import HTTPRequestParser\n        from waitress.adjustments import Adjustments\n\n        my_adj = Adjustments()\n        self.parser = HTTPRequestParser(my_adj)\n\n    def test_get_body_stream_None(self):\n        self.parser.body_recv = None\n        result = self.parser.get_body_stream()\n        self.assertEqual(result.getvalue(), b\"\")\n\n    def test_get_body_stream_nonNone(self):\n        body_rcv = DummyBodyStream()\n        self.parser.body_rcv = body_rcv\n        result = self.parser.get_body_stream()\n        self.assertEqual(result, body_rcv)\n\n    def test_received_get_no_headers(self):\n        data = b\"HTTP/1.0 GET /foobar\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 24)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(self.parser.headers, {})\n\n    def test_received_bad_host_header(self):\n        from waitress.utilities import BadRequest\n\n        data = b\"HTTP/1.0 GET /foobar\\r\\n Host: foo\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 36)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(self.parser.error.__class__, BadRequest)\n\n    def test_received_nonsense_nothing(self):\n        data = b\"\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 4)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(self.parser.headers, {})\n\n    def test_received_no_doublecr(self):\n        data = b\"GET /foobar HTTP/8.4\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 22)\n        self.assertFalse(self.parser.completed)\n        self.assertEqual(self.parser.headers, {})\n\n    def test_received_already_completed(self):\n        self.parser.completed = True\n        result = self.parser.received(b\"a\")\n        self.assertEqual(result, 0)\n\n    def test_received_cl_too_large(self):\n        from waitress.utilities import RequestEntityTooLarge\n\n        self.parser.adj.max_request_body_size = 2\n        data = b\"GET /foobar HTTP/8.4\\r\\nContent-Length: 10\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 44)\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(isinstance(self.parser.error, RequestEntityTooLarge))\n\n    def test_received_headers_too_large(self):\n        from waitress.utilities import RequestHeaderFieldsTooLarge\n\n        self.parser.adj.max_request_header_size = 2\n        data = b\"GET /foobar HTTP/8.4\\r\\nX-Foo: 1\\r\\n\\r\\n\"\n        result = self.parser.received(data)\n        self.assertEqual(result, 34)\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(isinstance(self.parser.error, RequestHeaderFieldsTooLarge))\n\n    def test_received_body_too_large(self):\n        from waitress.utilities import RequestEntityTooLarge\n\n        self.parser.adj.max_request_body_size = 2\n        data = (\n            b\"GET /foobar HTTP/1.1\\r\\n\"\n            b\"Transfer-Encoding: chunked\\r\\n\"\n            b\"X-Foo: 1\\r\\n\"\n            b\"\\r\\n\"\n            b\"1d;\\r\\n\"\n            b\"This string has 29 characters\\r\\n\"\n            b\"0\\r\\n\\r\\n\"\n        )\n\n        result = self.parser.received(data)\n        self.assertEqual(result, 62)\n        self.parser.received(data[result:])\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(isinstance(self.parser.error, RequestEntityTooLarge))\n\n    def test_received_error_from_parser(self):\n        from waitress.utilities import BadRequest\n\n        data = (\n            b\"GET /foobar HTTP/1.1\\r\\n\"\n            b\"Transfer-Encoding: chunked\\r\\n\"\n            b\"X-Foo: 1\\r\\n\"\n            b\"\\r\\n\"\n            b\"garbage\\r\\n\"\n        )\n        # header\n        result = self.parser.received(data)\n        # body\n        result = self.parser.received(data[result:])\n        self.assertEqual(result, 9)\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(isinstance(self.parser.error, BadRequest))\n\n    def test_received_chunked_completed_sets_content_length(self):\n        data = (\n            b\"GET /foobar HTTP/1.1\\r\\n\"\n            b\"Transfer-Encoding: chunked\\r\\n\"\n            b\"X-Foo: 1\\r\\n\"\n            b\"\\r\\n\"\n            b\"1d;\\r\\n\"\n            b\"This string has 29 characters\\r\\n\"\n            b\"0\\r\\n\\r\\n\"\n        )\n        result = self.parser.received(data)\n        self.assertEqual(result, 62)\n        data = data[result:]\n        result = self.parser.received(data)\n        self.assertTrue(self.parser.completed)\n        self.assertTrue(self.parser.error is None)\n        self.assertEqual(self.parser.headers[\"CONTENT_LENGTH\"], \"29\")\n\n    def test_parse_header_gardenpath(self):\n        data = b\"GET /foobar HTTP/8.4\\r\\nfoo: bar\\r\\n\"\n        self.parser.parse_header(data)\n        self.assertEqual(self.parser.first_line, b\"GET /foobar HTTP/8.4\")\n        self.assertEqual(self.parser.headers[\"FOO\"], \"bar\")\n\n    def test_parse_header_no_cr_in_headerplus(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\"\n\n        try:\n            self.parser.parse_header(data)\n        except ParsingError:\n            pass\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_bad_content_length(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\r\\ncontent-length: abc\\r\\n\"\n\n        try:\n            self.parser.parse_header(data)\n        except ParsingError as e:\n            self.assertIn(\"Content-Length is invalid\", e.args[0])\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_multiple_content_length(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\r\\ncontent-length: 10\\r\\ncontent-length: 20\\r\\n\"\n\n        try:\n            self.parser.parse_header(data)\n        except ParsingError as e:\n            self.assertIn(\"Content-Length is invalid\", e.args[0])\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_11_te_chunked(self):\n        # NB: test that capitalization of header value is unimportant\n        data = b\"GET /foobar HTTP/1.1\\r\\ntransfer-encoding: ChUnKed\\r\\n\"\n        self.parser.parse_header(data)\n        self.assertEqual(self.parser.body_rcv.__class__.__name__, \"ChunkedReceiver\")\n\n    def test_parse_header_11_expect_continue(self):\n        data = b\"GET /foobar HTTP/1.1\\r\\nexpect: 100-continue\\r\\n\"\n        self.parser.parse_header(data)\n        self.assertEqual(self.parser.expect_continue, True)\n\n    def test_parse_header_connection_close(self):\n        data = b\"GET /foobar HTTP/1.1\\r\\nConnection: close\\r\\n\"\n        self.parser.parse_header(data)\n        self.assertEqual(self.parser.connection_close, True)\n\n    def test_close_with_body_rcv(self):\n        body_rcv = DummyBodyStream()\n        self.parser.body_rcv = body_rcv\n        self.parser.close()\n        self.assertTrue(body_rcv.closed)\n\n    def test_close_with_no_body_rcv(self):\n        self.parser.body_rcv = None\n        self.parser.close()  # doesn't raise\n\n    def test_parse_header_lf_only(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\nfoo: bar\"\n\n        try:\n            self.parser.parse_header(data)\n        except ParsingError:\n            pass\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_cr_only(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\rfoo: bar\"\n        try:\n            self.parser.parse_header(data)\n        except ParsingError:\n            pass\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_extra_lf_in_header(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\r\\nfoo: \\nbar\\r\\n\"\n        try:\n            self.parser.parse_header(data)\n        except ParsingError as e:\n            self.assertIn(\"Bare CR or LF found in header line\", e.args[0])\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_extra_lf_in_first_line(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar\\n HTTP/8.4\\r\\n\"\n        try:\n            self.parser.parse_header(data)\n        except ParsingError as e:\n            self.assertIn(\"Bare CR or LF found in HTTP message\", e.args[0])\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n    def test_parse_header_invalid_whitespace(self):\n        from waitress.parser import ParsingError\n\n        data = b\"GET /foobar HTTP/8.4\\r\\nfoo : bar\\r\\n\"\n        try:\n            self.parser.parse_header(data)\n        except ParsingError as e:\n            self.assertIn(\"Invalid whitespace after field-name\", e.args[0])\n        else:  # pragma: nocover\n            self.assertTrue(False)\n\n\nclass Test_split_uri(unittest.TestCase):\n    def _callFUT(self, uri):\n        from waitress.parser import split_uri\n\n        (\n            self.proxy_scheme,\n            self.proxy_netloc,\n            self.path,\n            self.query,\n            self.fragment,\n        ) = split_uri(uri)\n\n    def test_split_uri_unquoting_unneeded(self):\n        self._callFUT(b\"http://localhost:8080/abc def\")\n        self.assertEqual(self.path, \"/abc def\")\n\n    def test_split_uri_unquoting_needed(self):\n        self._callFUT(b\"http://localhost:8080/abc%20def\")\n        self.assertEqual(self.path, \"/abc def\")\n\n    def test_split_url_with_query(self):\n        self._callFUT(b\"http://localhost:8080/abc?a=1&b=2\")\n        self.assertEqual(self.path, \"/abc\")\n        self.assertEqual(self.query, \"a=1&b=2\")\n\n    def test_split_url_with_query_empty(self):\n        self._callFUT(b\"http://localhost:8080/abc?\")\n        self.assertEqual(self.path, \"/abc\")\n        self.assertEqual(self.query, \"\")\n\n    def test_split_url_with_fragment(self):\n        self._callFUT(b\"http://localhost:8080/#foo\")\n        self.assertEqual(self.path, \"/\")\n        self.assertEqual(self.fragment, \"foo\")\n\n    def test_split_url_https(self):\n        self._callFUT(b\"https://localhost:8080/\")\n        self.assertEqual(self.path, \"/\")\n        self.assertEqual(self.proxy_scheme, \"https\")\n        self.assertEqual(self.proxy_netloc, \"localhost:8080\")\n\n    def test_split_uri_unicode_error_raises_parsing_error(self):\n        # See https://github.com/Pylons/waitress/issues/64\n        from waitress.parser import ParsingError\n\n        # Either pass or throw a ParsingError, just don't throw another type of\n        # exception as that will cause the connection to close badly:\n        try:\n            self._callFUT(b\"/\\xd0\")\n        except ParsingError:\n            pass\n\n    def test_split_uri_path(self):\n        self._callFUT(b\"//testing/whatever\")\n        self.assertEqual(self.path, \"//testing/whatever\")\n        self.assertEqual(self.proxy_scheme, \"\")\n        self.assertEqual(self.proxy_netloc, \"\")\n        self.assertEqual(self.query, \"\")\n        self.assertEqual(self.fragment, \"\")\n\n    def test_split_uri_path_query(self):\n        self._callFUT(b\"//testing/whatever?a=1&b=2\")\n        self.assertEqual(self.path, \"//testing/whatever\")\n        self.assertEqual(self.proxy_scheme, \"\")\n        self.assertEqual(self.proxy_netloc, \"\")\n        self.assertEqual(self.query, \"a=1&b=2\")\n        self.assertEqual(self.fragment, \"\")\n\n    def test_split_uri_path_query_fragment(self):\n        self._callFUT(b\"//testing/whatever?a=1&b=2#fragment\")\n        self.assertEqual(self.path, \"//testing/whatever\")\n        self.assertEqual(self.proxy_scheme, \"\")\n        self.assertEqual(self.proxy_netloc, \"\")\n        self.assertEqual(self.query, \"a=1&b=2\")\n        self.assertEqual(self.fragment, \"fragment\")\n\n\nclass Test_get_header_lines(unittest.TestCase):\n    def _callFUT(self, data):\n        from waitress.parser import get_header_lines\n\n        return get_header_lines(data)\n\n    def test_get_header_lines(self):\n        result = self._callFUT(b\"slam\\r\\nslim\")\n        self.assertEqual(result, [b\"slam\", b\"slim\"])\n\n    def test_get_header_lines_folded(self):\n        # From RFC2616:\n        # HTTP/1.1 header field values can be folded onto multiple lines if the\n        # continuation line begins with a space or horizontal tab. All linear\n        # white space, including folding, has the same semantics as SP. A\n        # recipient MAY replace any linear white space with a single SP before\n        # interpreting the field value or forwarding the message downstream.\n\n        # We are just preserving the whitespace that indicates folding.\n        result = self._callFUT(b\"slim\\r\\n slam\")\n        self.assertEqual(result, [b\"slim slam\"])\n\n    def test_get_header_lines_tabbed(self):\n        result = self._callFUT(b\"slam\\r\\n\\tslim\")\n        self.assertEqual(result, [b\"slam\\tslim\"])\n\n    def test_get_header_lines_malformed(self):\n        # https://corte.si/posts/code/pathod/pythonservers/index.html\n        from waitress.parser import ParsingError\n\n        self.assertRaises(ParsingError, self._callFUT, b\" Host: localhost\\r\\n\\r\\n\")\n\n\nclass Test_crack_first_line(unittest.TestCase):\n    def _callFUT(self, line):\n        from waitress.parser import crack_first_line\n\n        return crack_first_line(line)\n\n    def test_crack_first_line_matchok(self):\n        result = self._callFUT(b\"GET / HTTP/1.0\")\n        self.assertEqual(result, (b\"GET\", b\"/\", b\"1.0\"))\n\n    def test_crack_first_line_lowercase_method(self):\n        from waitress.parser import ParsingError\n\n        self.assertRaises(ParsingError, self._callFUT, b\"get / HTTP/1.0\")\n\n    def test_crack_first_line_nomatch(self):\n        result = self._callFUT(b\"GET / bleh\")\n        self.assertEqual(result, (b\"\", b\"\", b\"\"))\n\n        result = self._callFUT(b\"GET /info?txtAirPlay&txtRAOP RTSP/1.0\")\n        self.assertEqual(result, (b\"\", b\"\", b\"\"))\n\n    def test_crack_first_line_missing_version(self):\n        result = self._callFUT(b\"GET /\")\n        self.assertEqual(result, (b\"GET\", b\"/\", b\"\"))\n\n\nclass TestHTTPRequestParserIntegration(unittest.TestCase):\n    def setUp(self):\n        from waitress.parser import HTTPRequestParser\n        from waitress.adjustments import Adjustments\n\n        my_adj = Adjustments()\n        self.parser = HTTPRequestParser(my_adj)\n\n    def feed(self, data):\n        parser = self.parser\n\n        for n in range(100):  # make sure we never loop forever\n            consumed = parser.received(data)\n            data = data[consumed:]\n\n            if parser.completed:\n                return\n        raise ValueError(\"Looping\")  # pragma: no cover\n\n    def testSimpleGET(self):\n        data = (\n            b\"GET /foobar HTTP/8.4\\r\\n\"\n            b\"FirstName: mickey\\r\\n\"\n            b\"lastname: Mouse\\r\\n\"\n            b\"content-length: 6\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello.\"\n        )\n        parser = self.parser\n        self.feed(data)\n        self.assertTrue(parser.completed)\n        self.assertEqual(parser.version, \"8.4\")\n        self.assertFalse(parser.empty)\n        self.assertEqual(\n            parser.headers,\n            {\"FIRSTNAME\": \"mickey\", \"LASTNAME\": \"Mouse\", \"CONTENT_LENGTH\": \"6\",},\n        )\n        self.assertEqual(parser.path, \"/foobar\")\n        self.assertEqual(parser.command, \"GET\")\n        self.assertEqual(parser.query, \"\")\n        self.assertEqual(parser.proxy_scheme, \"\")\n        self.assertEqual(parser.proxy_netloc, \"\")\n        self.assertEqual(parser.get_body_stream().getvalue(), b\"Hello.\")\n\n    def testComplexGET(self):\n        data = (\n            b\"GET /foo/a+%2B%2F%C3%A4%3D%26a%3Aint?d=b+%2B%2F%3D%26b%3Aint&c+%2B%2F%3D%26c%3Aint=6 HTTP/8.4\\r\\n\"\n            b\"FirstName: mickey\\r\\n\"\n            b\"lastname: Mouse\\r\\n\"\n            b\"content-length: 10\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello mickey.\"\n        )\n        parser = self.parser\n        self.feed(data)\n        self.assertEqual(parser.command, \"GET\")\n        self.assertEqual(parser.version, \"8.4\")\n        self.assertFalse(parser.empty)\n        self.assertEqual(\n            parser.headers,\n            {\"FIRSTNAME\": \"mickey\", \"LASTNAME\": \"Mouse\", \"CONTENT_LENGTH\": \"10\"},\n        )\n        # path should be utf-8 encoded\n        self.assertEqual(\n            tobytes(parser.path).decode(\"utf-8\"),\n            text_(b\"/foo/a++/\\xc3\\xa4=&a:int\", \"utf-8\"),\n        )\n        self.assertEqual(\n            parser.query, \"d=b+%2B%2F%3D%26b%3Aint&c+%2B%2F%3D%26c%3Aint=6\"\n        )\n        self.assertEqual(parser.get_body_stream().getvalue(), b\"Hello mick\")\n\n    def testProxyGET(self):\n        data = (\n            b\"GET https://example.com:8080/foobar HTTP/8.4\\r\\n\"\n            b\"content-length: 6\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello.\"\n        )\n        parser = self.parser\n        self.feed(data)\n        self.assertTrue(parser.completed)\n        self.assertEqual(parser.version, \"8.4\")\n        self.assertFalse(parser.empty)\n        self.assertEqual(parser.headers, {\"CONTENT_LENGTH\": \"6\"})\n        self.assertEqual(parser.path, \"/foobar\")\n        self.assertEqual(parser.command, \"GET\")\n        self.assertEqual(parser.proxy_scheme, \"https\")\n        self.assertEqual(parser.proxy_netloc, \"example.com:8080\")\n        self.assertEqual(parser.command, \"GET\")\n        self.assertEqual(parser.query, \"\")\n        self.assertEqual(parser.get_body_stream().getvalue(), b\"Hello.\")\n\n    def testDuplicateHeaders(self):\n        # Ensure that headers with the same key get concatenated as per\n        # RFC2616.\n        data = (\n            b\"GET /foobar HTTP/8.4\\r\\n\"\n            b\"x-forwarded-for: 10.11.12.13\\r\\n\"\n            b\"x-forwarded-for: unknown,127.0.0.1\\r\\n\"\n            b\"X-Forwarded_for: 255.255.255.255\\r\\n\"\n            b\"content-length: 6\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello.\"\n        )\n        self.feed(data)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(\n            self.parser.headers,\n            {\n                \"CONTENT_LENGTH\": \"6\",\n                \"X_FORWARDED_FOR\": \"10.11.12.13, unknown,127.0.0.1\",\n            },\n        )\n\n    def testSpoofedHeadersDropped(self):\n        data = (\n            b\"GET /foobar HTTP/8.4\\r\\n\"\n            b\"x-auth_user: bob\\r\\n\"\n            b\"content-length: 6\\r\\n\"\n            b\"\\r\\n\"\n            b\"Hello.\"\n        )\n        self.feed(data)\n        self.assertTrue(self.parser.completed)\n        self.assertEqual(self.parser.headers, {\"CONTENT_LENGTH\": \"6\",})\n\n\nclass DummyBodyStream(object):\n    def getfile(self):\n        return self\n\n    def getbuf(self):\n        return self\n\n    def close(self):\n        self.closed = True\n"], "filenames": ["waitress/parser.py", "waitress/tests/test_parser.py"], "buggy_code_start_loc": [257, 169], "buggy_code_end_loc": [258, 173], "fixing_code_start_loc": [257, 170], "fixing_code_end_loc": [259, 192], "type": "CWE-444", "message": "Waitress through version 1.3.1 allows request smuggling by sending the Content-Length header twice. Waitress would header fold a double Content-Length header and due to being unable to cast the now comma separated value to an integer would set the Content-Length to 0 internally. If two Content-Length headers are sent in a single request, Waitress would treat the request as having no body, thereby treating the body of the request as a new request in HTTP pipelining. This issue is fixed in Waitress 1.4.0.", "other": {"cve": {"id": "CVE-2019-16792", "sourceIdentifier": "security-advisories@github.com", "published": "2020-01-22T19:15:11.140", "lastModified": "2022-09-23T18:58:53.660", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Waitress through version 1.3.1 allows request smuggling by sending the Content-Length header twice. Waitress would header fold a double Content-Length header and due to being unable to cast the now comma separated value to an integer would set the Content-Length to 0 internally. If two Content-Length headers are sent in a single request, Waitress would treat the request as having no body, thereby treating the body of the request as a new request in HTTP pipelining. This issue is fixed in Waitress 1.4.0."}, {"lang": "es", "value": "Waitress hasta la versi\u00f3n 1.3.1, permite el tr\u00e1fico no autorizado de peticiones mediante el env\u00edo del encabezado Content-Length dos veces. Waitress doblar\u00e1 un encabezado Content-Length  doble y, al no ser capaz de convertir el valor ahora separado por comas en un entero, establecer\u00e1 a Content-Length en 0 internamente. Si dos encabezados Content-Length se env\u00edan en una sola petici\u00f3n, Waitress tratar\u00eda la petici\u00f3n como si no tiene cuerpo, por lo que tratar\u00e1 el cuerpo de la petici\u00f3n como una nueva petici\u00f3n en HTTP pipelining. Este problema es corregido en Waitress versi\u00f3n 1.4.0."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:L/UI:N/S:C/C:H/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 7.1, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 4.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-444"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-444"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:agendaless:waitress:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.3.1", "matchCriteriaId": "2A7E9C06-F243-47BE-984D-8247F2F179FE"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:oracle:communications_cloud_native_core_network_function_cloud_native_environment:1.10.0:*:*:*:*:*:*:*", "matchCriteriaId": "C2A5B24D-BDF2-423C-98EA-A40778C01A05"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "https://docs.pylonsproject.org/projects/waitress/en/latest/#security-fixes", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/Pylons/waitress/commit/575994cd42e83fd772a5f7ec98b2c56751bd3f65", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/Pylons/waitress/security/advisories/GHSA-4ppp-gpcr-7qf6", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/05/msg00011.html", "source": "security-advisories@github.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://www.oracle.com/security-alerts/cpuapr2022.html", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/Pylons/waitress/commit/575994cd42e83fd772a5f7ec98b2c56751bd3f65"}}