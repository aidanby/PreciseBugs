{"buggy_code": ["<?php\n\nnamespace SilverStripe\\Forms\\GridField;\n\nuse SilverStripe\\Control\\HTTPRequest;\nuse SilverStripe\\Core\\Convert;\nuse SilverStripe\\Core\\Extensible;\nuse SilverStripe\\ORM\\ArrayList;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\FieldType\\DBDatetime;\nuse SilverStripe\\ORM\\FieldType\\DBHTMLText;\nuse SilverStripe\\Security\\Security;\nuse SilverStripe\\View\\ArrayData;\nuse SilverStripe\\View\\Requirements;\n\n/**\n * Adds an \"Print\" button to the bottom or top of a GridField.\n */\nclass GridFieldPrintButton extends AbstractGridFieldComponent implements GridField_HTMLProvider, GridField_ActionProvider, GridField_URLHandler\n{\n    use Extensible;\n\n    /**\n     * @var array Map of a property name on the printed objects, with values\n     * being the column title in the CSV file.\n     *\n     * Note that titles are only used when {@link $csvHasHeader} is set to TRUE\n     */\n    protected $printColumns;\n\n    /**\n     * @var boolean\n     */\n    protected $printHasHeader = true;\n\n    /**\n     * Fragment to write the button to.\n     *\n     * @var string\n     */\n    protected $targetFragment;\n\n    /**\n     * @param string $targetFragment The HTML fragment to write the button into\n     * @param array $printColumns The columns to include in the print view\n     */\n    public function __construct($targetFragment = \"after\", $printColumns = null)\n    {\n        $this->targetFragment = $targetFragment;\n        $this->printColumns = $printColumns;\n    }\n\n    /**\n     * Place the print button in a <p> tag below the field\n     *\n     * @param GridField $gridField\n     *\n     * @return array\n     */\n    public function getHTMLFragments($gridField)\n    {\n        $button = new GridField_FormAction(\n            $gridField,\n            'print',\n            _t('SilverStripe\\\\Forms\\\\GridField\\\\GridField.Print', 'Print'),\n            'print',\n            null\n        );\n        $button->setForm($gridField->getForm());\n\n        $button->addExtraClass('font-icon-print grid-print-button btn btn-secondary');\n\n        return [\n            $this->targetFragment =>  $button->Field(),\n        ];\n    }\n\n    /**\n     * Print is an action button.\n     *\n     * @param GridField $gridField\n     *\n     * @return array\n     */\n    public function getActions($gridField)\n    {\n        return ['print'];\n    }\n\n    /**\n     * Handle the print action.\n     *\n     * @param GridField $gridField\n     * @param string $actionName\n     * @param array $arguments\n     * @param array $data\n     * @return DBHTMLText\n     */\n    public function handleAction(GridField $gridField, $actionName, $arguments, $data)\n    {\n        if ($actionName == 'print') {\n            return $this->handlePrint($gridField);\n        }\n    }\n\n    /**\n     * Print is accessible via the url\n     *\n     * @param GridField $gridField\n     * @return array\n     */\n    public function getURLHandlers($gridField)\n    {\n        return [\n            'print' => 'handlePrint',\n        ];\n    }\n\n    /**\n     * Handle the print, for both the action button and the URL\n     *\n     * @param GridField $gridField\n     * @param HTTPRequest $request\n     * @return DBHTMLText\n     */\n    public function handlePrint($gridField, $request = null)\n    {\n        set_time_limit(60);\n        Requirements::clear();\n\n        $data = $this->generatePrintData($gridField);\n\n        $this->extend('updatePrintData', $data);\n\n        if ($data) {\n            return $data->renderWith([\n                get_class($gridField) . '_print',\n                GridField::class . '_print',\n            ]);\n        }\n\n        return null;\n    }\n\n    /**\n     * Return the columns to print\n     *\n     * @param GridField $gridField\n     *\n     * @return array\n     */\n    protected function getPrintColumnsForGridField(GridField $gridField)\n    {\n        if ($this->printColumns) {\n            return $this->printColumns;\n        }\n\n        /** @var GridFieldDataColumns $dataCols */\n        $dataCols = $gridField->getConfig()->getComponentByType(GridFieldDataColumns::class);\n        if ($dataCols) {\n            return $dataCols->getDisplayFields($gridField);\n        }\n\n        return DataObject::singleton($gridField->getModelClass())->summaryFields();\n    }\n\n    /**\n     * Return the title of the printed page\n     *\n     * @param GridField $gridField\n     *\n     * @return array\n     */\n    public function getTitle(GridField $gridField)\n    {\n        $form = $gridField->getForm();\n        $currentController = $gridField->getForm()->getController();\n        $title = '';\n\n        if (method_exists($currentController, 'Title')) {\n            $title = $currentController->Title();\n        } else {\n            if ($currentController->Title) {\n                $title = $currentController->Title;\n            } elseif ($form->getName()) {\n                $title = $form->getName();\n            }\n        }\n\n        if ($fieldTitle = $gridField->Title()) {\n            if ($title) {\n                $title .= \" - \";\n            }\n\n            $title .= $fieldTitle;\n        }\n\n        return $title;\n    }\n\n    /**\n     * Export core.\n     *\n     * @param GridField $gridField\n     * @return ArrayData\n     */\n    public function generatePrintData(GridField $gridField)\n    {\n        $printColumns = $this->getPrintColumnsForGridField($gridField);\n\n        $header = null;\n\n        if ($this->printHasHeader) {\n            $header = new ArrayList();\n\n            foreach ($printColumns as $field => $label) {\n                $header->push(new ArrayData([\n                    \"CellString\" => $label,\n                ]));\n            }\n        }\n\n        $items = $gridField->getManipulatedList();\n        $itemRows = new ArrayList();\n\n        /** @var GridFieldDataColumns $gridFieldColumnsComponent */\n        $gridFieldColumnsComponent = $gridField->getConfig()->getComponentByType(GridFieldDataColumns::class);\n\n        /** @var DataObject $item */\n        foreach ($items->limit(null) as $item) {\n            $itemRow = new ArrayList();\n\n            foreach ($printColumns as $field => $label) {\n                $value = $gridFieldColumnsComponent\n                    ? strip_tags($gridFieldColumnsComponent->getColumnContent($gridField, $item, $field))\n                    : $gridField->getDataFieldValue($item, $field);\n\n                $itemRow->push(new ArrayData([\n                    \"CellString\" => $value,\n                ]));\n            }\n\n            $itemRows->push(new ArrayData([\n                \"ItemRow\" => $itemRow\n            ]));\n            if ($item->hasMethod('destroy')) {\n                $item->destroy();\n            }\n        }\n\n        $ret = new ArrayData([\n            \"Title\" => $this->getTitle($gridField),\n            \"Header\" => $header,\n            \"ItemRows\" => $itemRows,\n            \"Datetime\" => DBDatetime::now(),\n            \"Member\" => Security::getCurrentUser(),\n        ]);\n\n        return $ret;\n    }\n\n    /**\n     * @return array\n     */\n    public function getPrintColumns()\n    {\n        return $this->printColumns;\n    }\n\n    /**\n     * @param array $cols\n     * @return $this\n     */\n    public function setPrintColumns($cols)\n    {\n        $this->printColumns = $cols;\n\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getPrintHasHeader()\n    {\n        return $this->printHasHeader;\n    }\n\n    /**\n     * @param bool $bool\n     * @return $this\n     */\n    public function setPrintHasHeader($bool)\n    {\n        $this->printHasHeader = $bool;\n\n        return $this;\n    }\n}\n", "<?php\n\nnamespace SilverStripe\\Forms\\Tests\\GridField;\n\nuse SilverStripe\\Dev\\SapphireTest;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\GridField\\GridFieldPrintButton;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig;\nuse SilverStripe\\Forms\\GridField\\GridFieldPaginator;\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\Tests\\GridField\\GridFieldPrintButtonTest\\TestObject;\n\nclass GridFieldPrintButtonTest extends SapphireTest\n{\n\n    protected static $extra_dataobjects = [\n        TestObject::class,\n    ];\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        // 42 items\n        for ($i = 1; $i <= 42; $i++) {\n            $obj = new TestObject();\n            $obj->Name = \"Object {$i}\";\n            $obj->write();\n        }\n    }\n\n    public function testLimit()\n    {\n        $list = TestObject::get();\n\n        $button = new GridFieldPrintButton();\n        $button->setPrintColumns(['Name' => 'My Name']);\n\n        // Get paginated gridfield config\n        $config = GridFieldConfig::create()\n            ->addComponent(new GridFieldPaginator(10))\n            ->addComponent($button);\n        $gridField = new GridField('testfield', 'testfield', $list, $config);\n        /** @skipUpgrade */\n        new Form(Controller::curr(), 'Form', new FieldList($gridField), new FieldList());\n\n        // Printed data should ignore pagination limit\n        $printData = $button->generatePrintData($gridField);\n        $rows = $printData->ItemRows;\n        $this->assertEquals(42, $rows->count());\n    }\n}\n", "<?php\n\nnamespace SilverStripe\\Forms\\Tests\\GridField\\GridFieldPrintButtonTest;\n\nuse SilverStripe\\Dev\\TestOnly;\nuse SilverStripe\\ORM\\DataObject;\n\nclass TestObject extends DataObject implements TestOnly\n{\n    private static $table_name = 'GridFieldPrintButtonTest_Object';\n\n    private static $db = [\n        'Name' => 'Varchar'\n    ];\n}\n"], "fixing_code": ["<?php\n\nnamespace SilverStripe\\Forms\\GridField;\n\nuse SilverStripe\\Control\\HTTPRequest;\nuse SilverStripe\\Core\\Convert;\nuse SilverStripe\\Core\\Extensible;\nuse SilverStripe\\ORM\\ArrayList;\nuse SilverStripe\\ORM\\DataObject;\nuse SilverStripe\\ORM\\FieldType\\DBDatetime;\nuse SilverStripe\\ORM\\FieldType\\DBHTMLText;\nuse SilverStripe\\Security\\Security;\nuse SilverStripe\\View\\ArrayData;\nuse SilverStripe\\View\\Requirements;\n\n/**\n * Adds an \"Print\" button to the bottom or top of a GridField.\n */\nclass GridFieldPrintButton extends AbstractGridFieldComponent implements GridField_HTMLProvider, GridField_ActionProvider, GridField_URLHandler\n{\n    use Extensible;\n\n    /**\n     * @var array Map of a property name on the printed objects, with values\n     * being the column title in the CSV file.\n     *\n     * Note that titles are only used when {@link $csvHasHeader} is set to TRUE\n     */\n    protected $printColumns;\n\n    /**\n     * @var boolean\n     */\n    protected $printHasHeader = true;\n\n    /**\n     * Fragment to write the button to.\n     *\n     * @var string\n     */\n    protected $targetFragment;\n\n    /**\n     * @param string $targetFragment The HTML fragment to write the button into\n     * @param array $printColumns The columns to include in the print view\n     */\n    public function __construct($targetFragment = \"after\", $printColumns = null)\n    {\n        $this->targetFragment = $targetFragment;\n        $this->printColumns = $printColumns;\n    }\n\n    /**\n     * Place the print button in a <p> tag below the field\n     *\n     * @param GridField $gridField\n     *\n     * @return array\n     */\n    public function getHTMLFragments($gridField)\n    {\n        $button = new GridField_FormAction(\n            $gridField,\n            'print',\n            _t('SilverStripe\\\\Forms\\\\GridField\\\\GridField.Print', 'Print'),\n            'print',\n            null\n        );\n        $button->setForm($gridField->getForm());\n\n        $button->addExtraClass('font-icon-print grid-print-button btn btn-secondary');\n\n        return [\n            $this->targetFragment =>  $button->Field(),\n        ];\n    }\n\n    /**\n     * Print is an action button.\n     *\n     * @param GridField $gridField\n     *\n     * @return array\n     */\n    public function getActions($gridField)\n    {\n        return ['print'];\n    }\n\n    /**\n     * Handle the print action.\n     *\n     * @param GridField $gridField\n     * @param string $actionName\n     * @param array $arguments\n     * @param array $data\n     * @return DBHTMLText\n     */\n    public function handleAction(GridField $gridField, $actionName, $arguments, $data)\n    {\n        if ($actionName == 'print') {\n            return $this->handlePrint($gridField);\n        }\n    }\n\n    /**\n     * Print is accessible via the url\n     *\n     * @param GridField $gridField\n     * @return array\n     */\n    public function getURLHandlers($gridField)\n    {\n        return [\n            'print' => 'handlePrint',\n        ];\n    }\n\n    /**\n     * Handle the print, for both the action button and the URL\n     *\n     * @param GridField $gridField\n     * @param HTTPRequest $request\n     * @return DBHTMLText\n     */\n    public function handlePrint($gridField, $request = null)\n    {\n        set_time_limit(60);\n        Requirements::clear();\n\n        $data = $this->generatePrintData($gridField);\n\n        $this->extend('updatePrintData', $data);\n\n        if ($data) {\n            return $data->renderWith([\n                get_class($gridField) . '_print',\n                GridField::class . '_print',\n            ]);\n        }\n\n        return null;\n    }\n\n    /**\n     * Return the columns to print\n     *\n     * @param GridField $gridField\n     *\n     * @return array\n     */\n    protected function getPrintColumnsForGridField(GridField $gridField)\n    {\n        if ($this->printColumns) {\n            return $this->printColumns;\n        }\n\n        /** @var GridFieldDataColumns $dataCols */\n        $dataCols = $gridField->getConfig()->getComponentByType(GridFieldDataColumns::class);\n        if ($dataCols) {\n            return $dataCols->getDisplayFields($gridField);\n        }\n\n        return DataObject::singleton($gridField->getModelClass())->summaryFields();\n    }\n\n    /**\n     * Return the title of the printed page\n     *\n     * @param GridField $gridField\n     *\n     * @return array\n     */\n    public function getTitle(GridField $gridField)\n    {\n        $form = $gridField->getForm();\n        $currentController = $gridField->getForm()->getController();\n        $title = '';\n\n        if (method_exists($currentController, 'Title')) {\n            $title = $currentController->Title();\n        } else {\n            if ($currentController->Title) {\n                $title = $currentController->Title;\n            } elseif ($form->getName()) {\n                $title = $form->getName();\n            }\n        }\n\n        if ($fieldTitle = $gridField->Title()) {\n            if ($title) {\n                $title .= \" - \";\n            }\n\n            $title .= $fieldTitle;\n        }\n\n        return $title;\n    }\n\n    /**\n     * Export core.\n     *\n     * @param GridField $gridField\n     * @return ArrayData\n     */\n    public function generatePrintData(GridField $gridField)\n    {\n        $printColumns = $this->getPrintColumnsForGridField($gridField);\n\n        $header = null;\n\n        if ($this->printHasHeader) {\n            $header = new ArrayList();\n\n            foreach ($printColumns as $field => $label) {\n                $header->push(new ArrayData([\n                    \"CellString\" => $label,\n                ]));\n            }\n        }\n\n        $items = $gridField->getManipulatedList();\n        $itemRows = new ArrayList();\n\n        /** @var GridFieldDataColumns $gridFieldColumnsComponent */\n        $gridFieldColumnsComponent = $gridField->getConfig()->getComponentByType(GridFieldDataColumns::class);\n\n        /** @var DataObject $item */\n        foreach ($items->limit(null) as $item) {\n            if (!$item->hasMethod('canView') || $item->canView()) {\n                $itemRow = new ArrayList();\n\n                foreach ($printColumns as $field => $label) {\n                    $value = $gridFieldColumnsComponent\n                        ? strip_tags($gridFieldColumnsComponent->getColumnContent($gridField, $item, $field))\n                        : $gridField->getDataFieldValue($item, $field);\n\n                    $itemRow->push(new ArrayData([\n                        \"CellString\" => $value,\n                    ]));\n                }\n\n                $itemRows->push(new ArrayData([\n                    \"ItemRow\" => $itemRow\n                ]));\n            }\n            if ($item->hasMethod('destroy')) {\n                $item->destroy();\n            }\n        }\n\n        $ret = new ArrayData([\n            \"Title\" => $this->getTitle($gridField),\n            \"Header\" => $header,\n            \"ItemRows\" => $itemRows,\n            \"Datetime\" => DBDatetime::now(),\n            \"Member\" => Security::getCurrentUser(),\n        ]);\n\n        return $ret;\n    }\n\n    /**\n     * @return array\n     */\n    public function getPrintColumns()\n    {\n        return $this->printColumns;\n    }\n\n    /**\n     * @param array $cols\n     * @return $this\n     */\n    public function setPrintColumns($cols)\n    {\n        $this->printColumns = $cols;\n\n        return $this;\n    }\n\n    /**\n     * @return boolean\n     */\n    public function getPrintHasHeader()\n    {\n        return $this->printHasHeader;\n    }\n\n    /**\n     * @param bool $bool\n     * @return $this\n     */\n    public function setPrintHasHeader($bool)\n    {\n        $this->printHasHeader = $bool;\n\n        return $this;\n    }\n}\n", "<?php\n\nnamespace SilverStripe\\Forms\\Tests\\GridField;\n\nuse SilverStripe\\Dev\\SapphireTest;\nuse SilverStripe\\Control\\Controller;\nuse SilverStripe\\Forms\\FieldList;\nuse SilverStripe\\Forms\\Form;\nuse SilverStripe\\Forms\\GridField\\GridFieldPrintButton;\nuse SilverStripe\\Forms\\GridField\\GridFieldConfig;\nuse SilverStripe\\Forms\\GridField\\GridFieldPaginator;\nuse SilverStripe\\Forms\\GridField\\GridField;\nuse SilverStripe\\Forms\\Tests\\GridField\\GridFieldPrintButtonTest\\TestObject;\n\nclass GridFieldPrintButtonTest extends SapphireTest\n{\n\n    protected static $extra_dataobjects = [\n        TestObject::class,\n    ];\n\n    protected function setUp(): void\n    {\n        parent::setUp();\n\n        // 42 items\n        for ($i = 1; $i <= 42; $i++) {\n            $obj = new TestObject();\n            $obj->Name = \"Object {$i}\";\n            $obj->write();\n        }\n    }\n\n    public function testLimit()\n    {\n        $this->assertEquals(42, $this->getTestableRows()->count());\n    }\n\n    public function testCanViewIsRespected()\n    {\n        $orig = TestObject::$canView;\n        TestObject::$canView = false;\n        $this->assertEquals(0, $this->getTestableRows()->count());\n        TestObject::$canView = $orig;\n    }\n\n    private function getTestableRows()\n    {\n        $list = TestObject::get();\n\n        $button = new GridFieldPrintButton();\n        $button->setPrintColumns(['Name' => 'My Name']);\n\n        // Get paginated gridfield config\n        $config = GridFieldConfig::create()\n            ->addComponent(new GridFieldPaginator(10))\n            ->addComponent($button);\n        $gridField = new GridField('testfield', 'testfield', $list, $config);\n        /** @skipUpgrade */\n        new Form(Controller::curr(), 'Form', new FieldList($gridField), new FieldList());\n\n        // Printed data should ignore pagination limit\n        $printData = $button->generatePrintData($gridField);\n        return $printData->ItemRows;\n    }\n}\n", "<?php\n\nnamespace SilverStripe\\Forms\\Tests\\GridField\\GridFieldPrintButtonTest;\n\nuse SilverStripe\\Dev\\TestOnly;\nuse SilverStripe\\ORM\\DataObject;\n\nclass TestObject extends DataObject implements TestOnly\n{\n    private static $table_name = 'GridFieldPrintButtonTest_Object';\n\n    private static $db = [\n        'Name' => 'Varchar'\n    ];\n\n    public static bool $canView = true;\n\n    public function canView($member = null)\n    {\n        return static::$canView;\n    }\n}\n"], "filenames": ["src/Forms/GridField/GridFieldPrintButton.php", "tests/php/Forms/GridField/GridFieldPrintButtonTest.php", "tests/php/Forms/GridField/GridFieldPrintButtonTest/TestObject.php"], "buggy_code_start_loc": [231, 35, 14], "buggy_code_end_loc": [246, 53, 14], "fixing_code_start_loc": [231, 36, 15], "fixing_code_end_loc": [247, 65, 22], "type": "CWE-862", "message": "Silverstripe Framework is the Model-View-Controller framework that powers the Silverstripe content management system. Prior to version 4.12.15, the GridField print view incorrectly validates the permission of DataObjects potentially allowing a content author to view records they are not authorised to access. Users should upgrade to Silverstripe Framework 4.12.15 or above to address the issue.", "other": {"cve": {"id": "CVE-2023-22728", "sourceIdentifier": "security-advisories@github.com", "published": "2023-04-26T14:15:09.490", "lastModified": "2023-05-04T19:52:51.293", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Silverstripe Framework is the Model-View-Controller framework that powers the Silverstripe content management system. Prior to version 4.12.15, the GridField print view incorrectly validates the permission of DataObjects potentially allowing a content author to view records they are not authorised to access. Users should upgrade to Silverstripe Framework 4.12.15 or above to address the issue."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-862"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:silverstripe:framework:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.12.5", "matchCriteriaId": "12AC8517-3E73-4583-BD9E-E9D129DEDAF8"}]}]}], "references": [{"url": "https://github.com/silverstripe/silverstripe-framework/commit/fd5d8217e83768d7bf841e94b2d4d82642d5bc58", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/silverstripe/silverstripe-framework/security/advisories/GHSA-jh3w-6jp2-vqqm", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/silverstripe/silverstripe-framework/commit/fd5d8217e83768d7bf841e94b2d4d82642d5bc58"}}