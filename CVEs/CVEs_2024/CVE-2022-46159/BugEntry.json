{"buggy_code": ["en:\n  dates:\n    # Use Moment.js format string: https://momentjs.com/docs/#/displaying/format/\n    short_date_no_year: \"D MMM\"\n    # Use Moment.js format string: https://momentjs.com/docs/#/displaying/format/\n    short_date: \"D MMM, YYYY\"\n    # Use Moment.js format string: https://momentjs.com/docs/#/displaying/format/\n    long_date: \"MMMM D, YYYY h:mma\"\n\n  datetime_formats: &datetime_formats\n    formats:\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      short: \"%m-%d-%Y\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      short_no_year: \"%B %-d\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      date_only: \"%B %-d, %Y\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      long: \"%B %-d, %Y, %l:%M%P\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      no_day: \"%B %Y\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      calendar_ics: \"%Y%m%dT%H%M%SZ\"\n  date:\n    # Do not remove the brackets and commas and do not translate the first month name. It should be \"null\".\n    month_names:\n      [\n        ~,\n        January,\n        February,\n        March,\n        April,\n        May,\n        June,\n        July,\n        August,\n        September,\n        October,\n        November,\n        December,\n      ]\n    <<: *datetime_formats\n  time:\n    <<: *datetime_formats\n    am: \"am\"\n    pm: \"pm\"\n\n  title: \"Discourse\"\n  topics: \"Topics\"\n  posts: \"posts\"\n  views: \"views\"\n  loading: \"Loading\"\n  powered_by_html: 'Powered by <a href=\"https://www.discourse.org\">Discourse</a>, best viewed with JavaScript enabled'\n  sign_up: \"Sign Up\"\n  log_in: \"Log In\"\n  submit: \"Submit\"\n  purge_reason: \"Automatically deleted as abandoned, deactivated account\"\n  disable_remote_images_download_reason: \"Remote images download was disabled because there wasn't enough disk space available.\"\n  anonymous: \"Anonymous\"\n  remove_posts_deleted_by_author: \"Deleted by author\"\n  redirect_warning: \"We were unable to verify that the link you selected was actually posted to the forum. If you wish to proceed anyway, select the link below.\"\n  on_another_topic: \"On another topic\"\n\n  inline_oneboxer:\n    topic_page_title_post_number: \"#%{post_number}\"\n    topic_page_title_post_number_by_user: \"#%{post_number} by %{username}\"\n  themes:\n    bad_color_scheme: \"Can not update theme, invalid color palette\"\n    other_error: \"Something went wrong updating theme\"\n    ember_selector_error: \"Sorry \u2013 using #ember or .ember-view CSS selectors is not permitted, because these names are dynamically generated at runtime and will change over time, eventually resulting in broken CSS. Try a different selector.\"\n    import_error:\n      generic: An error occurred while importing that theme\n      upload: \"Error creating upload asset: %{name}. %{errors}\"\n      about_json: \"Import Error: about.json does not exist, or is invalid. Are you sure this is a Discourse Theme?\"\n      about_json_values: \"about.json contains invalid values: %{errors}\"\n      modifier_values: \"about.json modifiers contain invalid values: %{errors}\"\n      git: \"Error cloning git repository, access is denied or repository is not found\"\n      git_ref_not_found: \"Unable to checkout git reference: %{ref}\"\n      git_unsupported_scheme: \"Unable to clone git repo: scheme unsupported\"\n      unpack_failed: \"Failed to unpack file\"\n      file_too_big: \"The uncompressed file is too big.\"\n      unknown_file_type: \"The file you uploaded does not appear to be a valid Discourse theme.\"\n      not_allowed_theme: \"`%{repo}` is not in the list of allowed themes (check `allowed_theme_repos` global setting).\"\n      ssh_key_gone: \"You waited too long to install the theme and SSH key expired. Please try again.\"\n    errors:\n      component_no_user_selectable: \"Theme components can't be user-selectable\"\n      component_no_default: \"Theme components can't be default theme\"\n      component_no_color_scheme: \"Theme components can't have color palettes\"\n      no_multilevels_components: \"Themes with child themes can't be child themes themselves\"\n      optimized_link: Optimized image links are ephemeral and should not be included in theme source code.\n    settings_errors:\n      invalid_yaml: \"Provided YAML is invalid.\"\n      data_type_not_a_number: \"Setting `%{name}` type is unsupported. Supported types are `integer`, `bool`, `list`, `enum` and `upload`\"\n      name_too_long: \"There is a setting with a too long name. Maximum length is 255\"\n      default_value_missing: \"Setting `%{name}` has no default value\"\n      default_not_match_type: \"Setting `%{name}` default value's type doesn't match with the setting type.\"\n      default_out_range: \"Setting `%{name}` default value isn't in the specified range.\"\n      enum_value_not_valid: \"Selected value isn't one of the enum choices.\"\n      number_value_not_valid: \"New value isn't within the allowed range.\"\n      number_value_not_valid_min_max: \"It must be between %{min} and %{max}.\"\n      number_value_not_valid_min: \"It must be larger than or equal to %{min}.\"\n      number_value_not_valid_max: \"It must be smaller than or equal to %{max}.\"\n      string_value_not_valid: \"New value length isn't within the allowed range.\"\n      string_value_not_valid_min_max: \"It must be between %{min} and %{max} characters long.\"\n      string_value_not_valid_min: \"It must be at least %{min} characters long.\"\n      string_value_not_valid_max: \"It must be at most %{max} characters long.\"\n    locale_errors:\n      top_level_locale: \"The top level key in a locale file must match the locale name\"\n      invalid_yaml: \"Translation YAML invalid\"\n  emails:\n    incoming:\n      default_subject: \"This topic needs a title\"\n      show_trimmed_content: \"Show trimmed content\"\n      maximum_staged_user_per_email_reached: \"Reached maximum number of staged users created per email.\"\n      no_subject: \"(no subject)\"\n      no_body: \"(no body)\"\n      missing_attachment: \"(Attachment %{filename} is missing)\"\n      continuing_old_discussion:\n        one: \"Continuing the discussion from [%{title}](%{url}), because it was created more than %{count} day ago.\"\n        other: \"Continuing the discussion from [%{title}](%{url}), because it was created more than %{count} days ago.\"\n      errors:\n        empty_email_error: \"Happens when the raw mail we received was blank.\"\n        no_message_id_error: \"Happens when the mail has no 'Message-Id' header.\"\n        auto_generated_email_error: \"Happens when the 'precedence' header is set to: list, junk, bulk or auto_reply, or when any other header contains: auto-submitted, auto-replied or auto-generated.\"\n        no_body_detected_error: \"Happens when we couldn't extract a body and there were no attachments.\"\n        no_sender_detected_error: \"Happens when we couldn't find a valid email address in the From header.\"\n        from_reply_by_address_error: \"Happens when the From header matches the reply by email address.\"\n        inactive_user_error: \"Happens when the sender is not active.\"\n        silenced_user_error: \"Happens when the sender has been silenced.\"\n        bad_destination_address: \"Happens when none of the email addresses in To/Cc fields matched a configured incoming email address.\"\n        strangers_not_allowed_error: \"Happens when a user tried to create a new topic in a category they're not a member of.\"\n        insufficient_trust_level_error: \"Happens when a user tried to create a new topic in a category they don't have the required trust level for.\"\n        reply_user_not_matching_error: \"Happens when a reply came in from a different email address the notification was sent to.\"\n        topic_not_found_error: \"Happens when a reply came in but the related topic has been deleted.\"\n        topic_closed_error: \"Happens when a reply came in but the related topic has been closed.\"\n        bounced_email_error: \"Email is a bounced email report.\"\n        screened_email_error: \"Happens when the sender's email address was already screened.\"\n        unsubscribe_not_allowed: \"Happens when unsubscribing via email is not allowed for this user.\"\n        email_not_allowed: \"Happens when the email address is not on the allowlist or is on the blocklist.\"\n      unrecognized_error: \"Unrecognized Error\"\n    secure_uploads_placeholder: \"Redacted: This site has secure uploads enabled, visit the topic or click View Media to see the attached uploads.\"\n    view_redacted_media: \"View Media\"\n\n  errors: &errors\n    format: ! \"%{attribute} %{message}\"\n    format_with_full_message: \"<b>%{attribute}</b>: %{message}\"\n    messages:\n      too_long_validation: \"is limited to %{max} characters; you entered %{length}.\"\n      invalid_boolean: \"Invalid boolean.\"\n      taken: \"has already been taken\"\n      accepted: must be accepted\n      blank: can't be blank\n      present: must be blank\n      confirmation: ! \"doesn't match %{attribute}\"\n      empty: can't be empty\n      equal_to: must be equal to %{count}\n      even: must be even\n      exclusion: is reserved\n      greater_than: must be greater than %{count}\n      greater_than_or_equal_to: must be greater than or equal to %{count}\n      has_already_been_used: \"has already been used\"\n      inclusion: is not included in the list\n      invalid: is invalid\n      is_invalid: \"seems unclear, is it a complete sentence?\"\n      is_invalid_meaningful: \"seems unclear, most of the words contain the same letters over and over?\"\n      is_invalid_unpretentious: \"seems unclear, one or more words is very long?\"\n      is_invalid_quiet: \"seems unclear, did you mean to enter it in ALL CAPS?\"\n      invalid_timezone: \"'%{tz}' is not a valid timezone\"\n      contains_censored_words: \"contains the following censored words: %{censored_words}\"\n      less_than: must be less than %{count}\n      less_than_or_equal_to: must be less than or equal to %{count}\n      not_a_number: is not a number\n      not_an_integer: must be an integer\n      odd: must be odd\n      record_invalid: ! \"Validation failed: %{errors}\"\n      max_emojis: \"can't have more than %{max_emojis_count} emoji\"\n      emojis_disabled: \"can't have emoji\"\n      ip_address_already_screened: \"is already included in an existing rule\"\n      restrict_dependent_destroy:\n        one: \"Cannot delete record because a dependent %{record} exists\"\n        other: \"Cannot delete record because dependent %{record} exist\"\n      too_long:\n        one: is too long (maximum is %{count} character)\n        other: is too long (maximum is %{count} characters)\n      too_short:\n        one: is too short (minimum is %{count} character)\n        other: is too short (minimum is %{count} characters)\n      wrong_length:\n        one: is the wrong length (should be %{count} character)\n        other: is the wrong length (should be %{count} characters)\n      other_than: \"must be other than %{count}\"\n      auth_overrides_username: \"Username needs to be updated on authentication provider side, since `auth_overrides_username` setting is enabled.\"\n    template:\n      body: ! \"There were problems with the following fields:\"\n      header:\n        one: \"%{count} error prohibited this %{model} from being saved\"\n        other: ! \"%{count} errors prohibited this %{model} from being saved\"\n    embed:\n      load_from_remote: \"There was an error loading that post.\"\n    site_settings:\n      invalid_category_id: \"You specified a category that does not exist\"\n      invalid_choice:\n        one: \"You specified the invalid choice %{name}\"\n        other: \"You specified the invalid choices %{name}\"\n      default_categories_already_selected: \"You cannot select a category used in another list.\"\n      default_tags_already_selected: \"You cannot select a tag used in another list.\"\n      s3_upload_bucket_is_required: \"You cannot enable uploads to S3 unless you've provided the 's3_upload_bucket'.\"\n      enable_s3_uploads_is_required: \"You cannot enable usage of the S3 inventory unless you've enabled S3 uploads.\"\n      page_publishing_requirements: \"Page publishing cannot be enabled if secure media is enabled.\"\n      s3_backup_requires_s3_settings: \"You cannot use S3 as backup location unless you've provided the '%{setting_name}'.\"\n      s3_bucket_reused: \"You cannot use the same bucket for 's3_upload_bucket' and 's3_backup_bucket'. Choose a different bucket or use a different path for each bucket.\"\n      secure_uploads_requirements: \"S3 uploads must be enabled before enabling secure uploads.\"\n      share_quote_facebook_requirements: \"You must set a Facebook app id to enable quote sharing for Facebook.\"\n      second_factor_cannot_enforce_with_socials: \"You cannot enforce 2FA with social logins enabled. You must first disable login via: %{auth_provider_names}\"\n      second_factor_cannot_be_enforced_with_disabled_local_login: \"You cannot enforce 2FA if local logins are disabled.\"\n      second_factor_cannot_be_enforced_with_discourse_connect_enabled: \"You cannot enforce 2FA if DiscourseConnect is enabled.\"\n      local_login_cannot_be_disabled_if_second_factor_enforced: \"You cannot disable local login if 2FA is enforced. Disable enforced 2FA before disabling local logins.\"\n      cannot_enable_s3_uploads_when_s3_enabled_globally: \"You cannot enable S3 uploads because S3 uploads are already globally enabled, and enabling this site-level could cause critical issues with uploads\"\n      cors_origins_should_not_have_trailing_slash: \"You should not add the trailing slash (/) to CORS origins.\"\n      slow_down_crawler_user_agent_must_be_at_least_3_characters: \"User agents must be at least 3 characters long to avoid incorrectly rate limiting human users.\"\n      slow_down_crawler_user_agent_cannot_be_popular_browsers: \"You cannot add any of the following values to the setting: %{values}.\"\n      strip_image_metadata_cannot_be_disabled_if_composer_media_optimization_image_enabled: \"You cannot disable strip image metadata if 'composer media optimization image enabled' is enabled. Disable 'composer media optimization image enabled' before disabling strip image metadata.\"\n      twitter_summary_large_image_no_svg: \"Twitter summary images used for twitter:image metadata cannot be an .svg image.\"\n    conflicting_google_user_id: 'The Google Account ID for this account has changed; staff intervention is required for security reasons. Please contact staff and point them to <br><a href=\"https://meta.discourse.org/t/76575\">https://meta.discourse.org/t/76575</a>'\n    onebox:\n      invalid_address: \"Sorry, we were unable to generate a preview for this web page, because the server '%{hostname}' could not be found. Instead of a preview, only a link will appear in your post. :cry:\"\n      error_response: \"Sorry, we were unable to generate a preview for this web page, because the web server returned an error code of %{status_code}. Instead of a preview, only a link will appear in your post. :cry:\"\n      missing_data:\n        one: \"Sorry, we were unable to generate a preview for this web page, because the following oEmbed / OpenGraph tag could not be found: %{missing_attributes}\"\n        other: \"Sorry, we were unable to generate a preview for this web page, because the following oEmbed / OpenGraph tags could not be found: %{missing_attributes}\"\n\n  word_connector:\n    # Connects words with a comma. Example: \"foo, bar\"\n    comma: \", \"\n\n  activemodel:\n    errors:\n      <<: *errors\n\n  invite:\n    expired: \"Your invite token has expired. Please <a href='%{base_url}/about'>contact staff</a>.\"\n    not_found: \"Your invite token is invalid. Please <a href='%{base_url}/about'>contact staff</a>.\"\n    not_found_json: \"Your invite token is invalid. Please contact staff.\"\n    not_matching_email: \"Your email address and the email address associated with the invite token do not match. Please contact staff.\"\n    not_found_template: |\n      <p>Your invite to <a href=\"%{base_url}\">%{site_name}</a> has already been redeemed.</p>\n\n      <p>If you remember your password you can <a href=\"%{base_url}/login\">Log In</a>.</p>\n\n      <p>Otherwise please <a href=\"%{base_url}/password-reset\">Reset Password</a>.</p>\n    not_found_template_link: |\n      <p>This invitation to <a href=\"%{base_url}\">%{site_name}</a> can no longer be redeemed. Please ask the person who invited you to send you a new invitation.</p>\n    existing_user_cannot_redeem: \"This invitation cannot be redeemed. Please ask the person who invited you to send you a new invitation.\"\n    existing_user_already_redemeed: \"You have already redeemed this invite link.\"\n    user_exists: \"There's no need to invite <b>%{email}</b>, they already have an account!\"\n    invite_exists: \"You already invited <b>%{email}</b>.\"\n    invalid_email: \"%{email} isn't a valid email address.\"\n    rate_limit:\n      one: \"You have already sent %{count} invite in the last 24 hours, please wait %{time_left} before trying again.\"\n      other: \"You have already sent %{count} invites in the last 24 hours, please wait %{time_left} before trying again.\"\n    confirm_email: \"<p>You\u2019re almost done! We sent an activation mail to your email address. Please follow the instructions in the mail to activate your account.</p><p>If it doesn\u2019t arrive, check your spam folder.</p>\"\n    cant_invite_to_group: \"You are not allowed to invite users to specified group(s). Make sure you are owner of the group(s) you are trying to invite to.\"\n    disabled_errors:\n      discourse_connect_enabled: \"Invites are disabled because DiscourseConnect is enabled.\"\n      invalid_access: \"You are not permitted to view the requested resource.\"\n    requires_groups: \"Invite was not saved because the specified topic is inaccessible. Add one of the following groups: %{groups}.\"\n    domain_not_allowed: \"Your email cannot be used to redeem this invite.\"\n    max_redemptions_allowed_one: \"for email invites should be 1.\"\n    redemption_count_less_than_max: \"should be less than %{max_redemptions_allowed}.\"\n    email_xor_domain: \"Email and domain fields are not allowed at the same time\"\n    existing_user_success: \"Invite redeemed successfully\"\n\n  bulk_invite:\n    file_should_be_csv: \"The uploaded file should be of csv format.\"\n    max_rows: \"First %{max_bulk_invites} invites has been sent. Try splitting the file in smaller parts.\"\n    error: \"There was an error uploading that file. Please try again later.\"\n\n  invite_link:\n    email_taken: \"This email is already in use. If you already have an account please log in or reset password.\"\n    max_redemptions_limit: \"should be between 2 and %{max_limit}.\"\n\n  topic_invite:\n    failed_to_invite: \"The user cannot be invited into this topic without a group membership in either one of the following groups: %{group_names}.\"\n    not_pm: \"You can only invite to private messages.\"\n    user_exists: \"Sorry, that user has already been invited. You may only invite a user to a topic once.\"\n    muted_topic: \"Sorry, that user muted this topic.\"\n    receiver_does_not_allow_pm: \"Sorry, that user does not allow you to send them private messages.\"\n    sender_does_not_allow_pm: \"Sorry, you do not allow that user to send you private messages.\"\n    user_cannot_see_topic: \"%{username} cannot see the topic.\"\n\n  backup:\n    operation_already_running: \"An operation is currently running. Can't start a new job right now.\"\n    backup_file_should_be_tar_gz: \"The backup file should be a .tar.gz archive.\"\n    not_enough_space_on_disk: \"There is not enough space on disk to upload this backup.\"\n    invalid_filename: \"The backup filename contains invalid characters. Valid characters are a-z 0-9 . - _.\"\n    file_exists: \"The file you are trying to upload already exists.\"\n\n  invalid_params: \"You supplied invalid parameters to the request: %{message}\"\n  not_logged_in: \"You need to be logged in to do that.\"\n  not_found: \"The requested URL or resource could not be found.\"\n  invalid_access: \"You are not permitted to view the requested resource.\"\n  authenticator_not_found: \"Authentication method does not exist, or has been disabled.\"\n  authenticator_no_connect: \"This authentication provider does not allow connection to an existing forum account.\"\n  invalid_api_credentials: \"You are not permitted to view the requested resource. The API username or key is invalid.\"\n  provider_not_enabled: \"You are not permitted to view the requested resource. The authentication provider is not enabled.\"\n  provider_not_found: \"You are not permitted to view the requested resource. The authentication provider does not exist.\"\n  read_only_mode_enabled: \"The site is in read only mode. Interactions are disabled.\"\n  invalid_grant_badge_reason_link: \"External or invalid discourse link is not allowed in badge reason\"\n  email_template_cant_be_modified: \"This email template can't be modified\"\n  invalid_whisper_access: \"Either whispers are not enabled or you do not have access to create whisper posts\"\n  not_in_group:\n    title_topic: \"You need to request membership to the '%{group}' group to see this topic.\"\n    title_category: \"You need to request membership to the '%{group}' group to see this category.\"\n    request_membership: \"Request Membership\"\n    join_group: \"Join Group\"\n  deleted_topic: \"Oops! This topic has been deleted and is no longer available.\"\n  delete_topic_failed: \"There was an error deleting that topic. Please contact the site's administrator.\"\n\n  reading_time: \"Reading time\"\n  likes: \"Likes\"\n\n  too_many_replies:\n    one: \"We're sorry, but new users are temporarily limited to %{count} reply in the same topic.\"\n    other: \"We're sorry, but new users are temporarily limited to %{count} replies in the same topic.\"\n\n  max_consecutive_replies:\n    one: \"No consecutive replies are allowed. Please edit your previous reply, or wait for someone to reply to you.\"\n    other: \"No more than %{count} consecutive replies are allowed. Please edit your previous reply, or wait for someone to reply to you.\"\n\n  embed:\n    start_discussion: \"Start Discussion\"\n    continue: \"Continue Discussion\"\n    error: \"Error Embedding\"\n    referer: \"Referer:\"\n    error_topics: \"The `embed topics list` site setting was not enabled\"\n    mismatch: \"The referer was either not sent, or did not match any of the following hosts:\"\n    no_hosts: \"No hosts were set up for embedding.\"\n    configure: \"Configure Embedding\"\n    more_replies:\n      one: \"%{count} more reply\"\n      other: \"%{count} more replies\"\n\n    loading: \"Loading Discussion...\"\n    permalink: \"Permalink\"\n    imported_from: \"This is a companion discussion topic for the original entry at %{link}\"\n    in_reply_to: \"\u25b6 %{username}\"\n    replies:\n      one: \"%{count} reply\"\n      other: \"%{count} replies\"\n    likes:\n      one: \"%{count} like\"\n      other: \"%{count} likes\"\n    last_reply: \"Last reply\"\n    created: \"Created\"\n    new_topic: \"Create new topic\"\n\n  no_mentions_allowed: \"Sorry, you can't mention other users.\"\n  too_many_mentions:\n    one: \"Sorry, you can only mention one other user in a post.\"\n    other: \"Sorry, you can only mention %{count} users in a post.\"\n  no_mentions_allowed_newuser: \"Sorry, new users can't mention other users.\"\n  too_many_mentions_newuser:\n    one: \"Sorry, new users can only mention one other user in a post.\"\n    other: \"Sorry, new users can only mention %{count} users in a post.\"\n  no_embedded_media_allowed_trust: \"Sorry, you can't embed media items in a post.\"\n  no_embedded_media_allowed: \"Sorry, new users can't embed media items in posts.\"\n  too_many_embedded_media:\n    one: \"Sorry, new users can only put one embedded media item in a post.\"\n    other: \"Sorry, new users can only put %{count} embedded media items in a post.\"\n  no_attachments_allowed: \"Sorry, new users can't put attachments in posts.\"\n  too_many_attachments:\n    one: \"Sorry, new users can only put one attachment in a post.\"\n    other: \"Sorry, new users can only put %{count} attachments in a post.\"\n  no_links_allowed: \"Sorry, new users can't put links in posts.\"\n  links_require_trust: \"Sorry, you can't include links in your posts.\"\n  too_many_links:\n    one: \"Sorry, new users can only put one link in a post.\"\n    other: \"Sorry, new users can only put %{count} links in a post.\"\n  contains_blocked_word: \"Sorry, you can't post the word '%{word}'; it's not allowed.\"\n  contains_blocked_words: \"Sorry, you can't post that. Not allowed: %{words}.\"\n\n  spamming_host: \"Sorry you cannot post a link to that host.\"\n  user_is_suspended: \"Suspended users are not allowed to post.\"\n  topic_not_found: \"Something has gone wrong. Perhaps this topic was closed or deleted while you were looking at it?\"\n  not_accepting_pms: \"Sorry, %{username} is not accepting messages at the moment.\"\n  max_pm_recipients: \"Sorry, you can send a message to maximum %{recipients_limit} recipients.\"\n  pm_reached_recipients_limit: \"Sorry, you can't have more than %{recipients_limit} recipients in a message.\"\n  removed_direct_reply_full_quotes: \"Automatically removed quote of whole previous post.\"\n  watched_words_auto_tag: \"Automatically tagged topic\"\n  secure_upload_not_allowed_in_public_topic: \"Sorry, the following secure upload(s) cannot be used in a public topic: %{upload_filenames}.\"\n  create_pm_on_existing_topic: \"Sorry, you can't create a PM on an existing topic.\"\n  slow_mode_enabled: \"This topic is in slow mode.\"\n\n  just_posted_that: \"is too similar to what you recently posted\"\n  invalid_characters: \"contains invalid characters\"\n  is_invalid: \"seems unclear, is it a complete sentence?\"\n  next_page: \"next page \u2192\"\n  prev_page: \"\u2190 previous page\"\n  page_num: \"Page %{num}\"\n  home_title: \"Home\"\n  topics_in_category: \"Topics in the '%{category}' category\"\n  rss_posts_in_topic: \"RSS feed of '%{topic}'\"\n  rss_topics_in_category: \"RSS feed of topics in the '%{category}' category\"\n  rss_num_posts:\n    one: \"%{count} post\"\n    other: \"%{count} posts\"\n  rss_num_participants:\n    one: \"%{count} participant\"\n    other: \"%{count} participants\"\n\n  read_full_topic: \"Read full topic\"\n  private_message_abbrev: \"Msg\"\n\n  rss_description:\n    latest: \"Latest topics\"\n    top: \"Top topics\"\n    top_all: \"All time top topics\"\n    top_yearly: \"Yearly top topics\"\n    top_quarterly: \"Quarterly top topics\"\n    top_monthly: \"Monthly top topics\"\n    top_weekly: \"Weekly top topics\"\n    top_daily: \"Daily top topics\"\n    posts: \"Latest posts\"\n    private_posts: \"Latest personal messages\"\n    group_posts: \"Latest posts from %{group_name}\"\n    group_mentions: \"Latest mentions from %{group_name}\"\n    user_posts: \"Latest posts by @%{username}\"\n    user_topics: \"Latest topics by @%{username}\"\n    tag: \"Tagged topics\"\n    badge: \"%{display_name} badge on %{site_title}\"\n\n  too_late_to_edit: \"That post was created too long ago. It can no longer be edited or deleted.\"\n  edit_conflict: \"That post was edited by another user and your changes can no longer be saved.\"\n  revert_version_same: \"The current version is same as the version you are trying to revert to.\"\n  cannot_edit_on_slow_mode: \"This topic is in slow mode. To encourage thoughtful, considered discussion, editing old posts in this topic is not currently allowed during slow mode.\"\n\n  excerpt_image: \"image\"\n\n  bookmarks:\n    errors:\n      already_bookmarked_post: \"You cannot bookmark the same post twice.\"\n      already_bookmarked: \"You cannot bookmark the same %{type} twice.\"\n      too_many: \"Sorry, you cannot add more than %{limit} bookmarks, visit <a href='%{user_bookmarks_url}'>%{user_bookmarks_url}</a> to remove some.\"\n      cannot_set_past_reminder: \"You cannot set a bookmark reminder in the past.\"\n      cannot_set_reminder_in_distant_future: \"You cannot set a bookmark reminder more than 10 years in the future.\"\n      time_must_be_provided: \"Time must be provided for all reminders\"\n      for_topic_must_use_first_post: \"You can only use the first post to bookmark the topic.\"\n      bookmarkable_id_type_required: \"The name and type of the record to bookmark is required.\"\n      invalid_bookmarkable: \"A %{type} cannot be bookmarked.\"\n\n    reminders:\n      at_desktop: \"Next time I'm at my desktop\"\n      later_today: \"Later today\"\n      next_business_day: \"Next business day\"\n      tomorrow: \"Tomorrow\"\n      next_week: \"Next week\"\n      next_month: \"Next month\"\n      custom: \"Custom date and time\"\n\n  groups:\n    success:\n      bulk_add:\n        one: \"%{count} user has been added to the group.\"\n        other: \"%{count} users have been added to the group.\"\n    errors:\n      grant_trust_level_not_valid: \"'%{trust_level}' is not a valid trust level.\"\n      can_not_modify_automatic: \"You cannot modify an automatic group\"\n      member_already_exist:\n        one: \"'%{username}' is already a member of this group.\"\n        other: \"The following users are already members of this group: %{username}\"\n      invalid_domain: \"'%{domain}' is not a valid domain.\"\n      invalid_incoming_email: \"'%{email}' is not a valid email address.\"\n      email_already_used_in_group: \"'%{email}' is already used by the group '%{group_name}'.\"\n      email_already_used_in_category: \"'%{email}' is already used by the category '%{category_name}'.\"\n      cant_allow_membership_requests: \"You cannot allow membership requests for a group without any owners.\"\n      already_requested_membership: \"You have already requested membership for this group.\"\n      adding_too_many_users:\n        one: \"Maximum %{count} user can be added at once\"\n        other: \"Maximum %{count} users can be added at once\"\n      usernames_or_emails_required: \"Usernames or emails must be present\"\n      no_invites_with_discourse_connect: \"You can invite only registered users when DiscourseConnect is enabled\"\n      no_invites_without_local_logins: \"You can invite only registered users when local logins are disabled\"\n    default_names:\n      everyone: \"everyone\"\n      admins: \"admins\"\n      moderators: \"moderators\"\n      staff: \"staff\"\n      trust_level_0: \"trust_level_0\"\n      trust_level_1: \"trust_level_1\"\n      trust_level_2: \"trust_level_2\"\n      trust_level_3: \"trust_level_3\"\n      trust_level_4: \"trust_level_4\"\n    request_membership_pm:\n      title: \"Membership Request for @%{group_name}\"\n    request_accepted_pm:\n      title: \"You've been accepted into @%{group_name}\"\n      body: |\n        Your request to enter @%{group_name} has been accepted and you are now a member.\n\n  education:\n    until_posts:\n      one: \"%{count} post\"\n      other: \"%{count} posts\"\n\n    \"new-topic\": |\n      Welcome to %{site_name} &mdash; **thanks for starting a new conversation!**\n\n      - Does the title sound interesting if you read it out loud? Is it a good summary?\n\n      - Who would be interested in this? Why does it matter? What kind of responses do you want?\n\n      - Include commonly used words in your topic so others can *find* it. To group your topic with related topics, select a category (or tag).\n\n      For more, [see our community guidelines](%{base_path}/guidelines). This panel will only appear for your first %{education_posts_text}.\n\n    \"new-reply\": |\n      Welcome to %{site_name} &mdash; **thanks for contributing!**\n\n      - Be kind to your fellow community members.\n\n      - Does your reply improve the conversation?\n\n      - Constructive criticism is welcome, but criticize *ideas*, not people.\n\n      For more, [see our community guidelines](%{base_path}/guidelines). This panel will only appear for your first %{education_posts_text}.\n\n    avatar: |\n      ### How about a picture for your account?\n\n      You\u2019ve posted a few topics and replies, but your profile picture isn\u2019t as unique as you are \u2013 it\u2019s just a letter.\n\n      Have you considered **[visiting your user profile](%{profile_path})** and uploading a picture that represents you?\n\n      It\u2019s easier to follow discussions and find interesting people in conversations when everyone has a unique profile picture!\n\n    sequential_replies: |\n      ### Consider replying to several posts at once\n\n      Rather than several replies to a topic in a row, please consider a single reply that includes quotes from previous posts or @name references.\n\n      You can edit your previous reply to add a quote by highlighting text and selecting the <b>quote reply</b> button that appears.\n\n      It\u2019s easier for everyone to read topics that have fewer in-depth replies versus lots of small, individual replies.\n\n    dominating_topic: You\u2019ve posted a lot in this topic! Consider giving others an opportunity to reply here and discuss things with each other as well.\n\n    get_a_room: You\u2019ve replied to @%{reply_username} %{count} times, did you know you could send them a personal message instead?\n\n    too_many_replies: |\n      ### You have reached the reply limit for this topic\n\n      We\u2019re sorry, but new users are temporarily limited to %{newuser_max_replies_per_topic} replies in the same topic.\n\n      Instead of adding another reply, please consider editing your previous replies, or visiting other topics.\n\n    reviving_old_topic: |\n      ### Revive this topic?\n\n      The last reply to this topic was **%{time_ago}**. Your reply will bump the topic to the top of its list and notify anyone previously involved in the conversation.\n\n      Are you sure you want to continue this old conversation?\n\n  activerecord:\n    attributes:\n      category:\n        name: \"Category Name\"\n      topic:\n        title: \"Title\"\n        featured_link: \"Featured Link\"\n        category_id: \"Category\"\n      post:\n        raw: \"Body\"\n      user_profile:\n        bio_raw: \"About Me\"\n      user:\n        ip_address: \"\"\n    errors:\n      <<: *errors\n      models:\n        topic:\n          attributes:\n            base:\n              warning_requires_pm: \"You can only attach warnings to personal messages.\"\n              too_many_users: \"You can only send warnings to one user at a time.\"\n              cant_send_pm: \"Sorry, you cannot send a personal message to that user.\"\n              no_user_selected: \"You must select a valid user.\"\n              reply_by_email_disabled: \"Reply by email has been disabled.\"\n              send_to_email_disabled: \"Sorry, you cannot send personal messages to email.\"\n              target_user_not_found: \"One of the users you are sending this message to could not be found.\"\n              unable_to_update: \"There was an error updating that topic.\"\n              unable_to_tag: \"There was an error tagging the topic.\"\n            featured_link:\n              invalid: \"is invalid. URL should include http:// or https://.\"\n        user:\n          attributes:\n            password:\n              common: \"is one of the 10000 most common passwords. Please use a more secure password.\"\n              same_as_username: \"is the same as your username. Please use a more secure password.\"\n              same_as_email: \"is the same as your email. Please use a more secure password.\"\n              same_as_current: \"is the same as your current password.\"\n              same_as_name: \"is the same as your name.\"\n              unique_characters: \"has too many repeated characters. Please use a more secure password.\"\n            username:\n              same_as_password: \"is the same as your password.\"\n            name:\n              same_as_password: \"is the same as your password.\"\n            ip_address:\n              signup_not_allowed: \"Signup is not allowed from this account.\"\n        user_profile:\n          attributes:\n            featured_topic_id:\n              invalid: \"This topic cannot be featured on your profile.\"\n        user_email:\n          attributes:\n            user_id:\n              reassigning_primary_email: \"Reassigning a primary email to another user is not allowed.\"\n        color_scheme_color:\n          attributes:\n            hex:\n              invalid: \"is not a valid color\"\n        post_reply:\n          base:\n            different_topic: \"Post and reply must belong to the same topic.\"\n        web_hook:\n          attributes:\n            payload_url:\n              invalid: \"URL is invalid. URL should includes http:// or https://. And no blank is allowed.\"\n        custom_emoji:\n          attributes:\n            name:\n              taken: is already in use by another emoji\n        topic_timer:\n          attributes:\n            execute_at:\n              in_the_past: \"must be in the future.\"\n            duration_minutes:\n              cannot_be_zero: \"must be greater than 0.\"\n              exceeds_maximum: \"cannot be more than 20 years.\"\n        translation_overrides:\n          attributes:\n            value:\n              invalid_interpolation_keys: 'The following interpolation key(s) are invalid: \"%{keys}\"'\n        watched_word:\n          attributes:\n            word:\n              too_many: \"Too many words for that action\"\n            base:\n              invalid_url: \"Replacement URL is invalid\"\n              invalid_tag_list: \"Replacement tag list is invalid\"\n        sidebar_section_link:\n          attributes:\n            linkable_type:\n              invalid: \"is not valid\"\n\n  uncategorized_category_name: \"Uncategorized\"\n\n  general_category_name: \"General\"\n  general_category_description: \"Create topics here that don\u2019t fit into any other existing category.\"\n\n  meta_category_name: \"Site Feedback\"\n  meta_category_description: \"Discussion about this site, its organization, how it works, and how we can improve it.\"\n\n  staff_category_name: \"Staff\"\n  staff_category_description: \"Private category for staff discussions. Topics are only visible to admins and moderators.\"\n\n  discourse_welcome_topic:\n    title: \"Welcome to our community!\"\n    body: |\n\n      The first paragraph of this pinned topic will be visible as a welcome message to all new visitors on your homepage. It's important!\n\n      **Edit this** into a brief description of your community:\n\n      - Who is it for?\n      - What can they find here?\n      - Why should they come here?\n      - Where can they read more (links, resources, etc)?\n\n      <img src=\"%{base_path}/images/welcome/discourse-edit-post-animated.gif\" width=\"508\" height=\"106\">\n\n      You may want to close this topic via the admin :wrench: (at the upper right and bottom), so that replies don't pile up on an announcement.\n\n  admin_quick_start_title: \"READ ME FIRST: Admin Quick Start Guide\"\n\n  category:\n    topic_prefix: \"About the %{category} category\"\n    replace_paragraph: \"(Replace this first paragraph with a brief description of your new category. This guidance will appear in the category selection area, so try to keep it below 200 characters.)\"\n    post_template: \"%{replace_paragraph}\\n\\nUse the following paragraphs for a longer description, or to establish category guidelines or rules:\\n\\n- Why should people use this category? What is it for?\\n\\n- How exactly is this different than the other categories we already have?\\n\\n- What should topics in this category generally contain?\\n\\n- Do we need this category? Can we merge with another category, or subcategory?\\n\"\n    errors:\n      not_found: \"Category not found!\"\n      uncategorized_parent: \"Uncategorized can't have a parent category\"\n      self_parent: \"A subcategory's parent cannot be itself\"\n      depth: \"You can't nest a subcategory under another\"\n      invalid_email_in: \"'%{email}' is not a valid email address.\"\n      email_already_used_in_group: \"'%{email}' is already used by the group '%{group_name}'.\"\n      email_already_used_in_category: \"'%{email}' is already used by the category '%{category_name}'.\"\n      description_incomplete: \"The category description post must have at least one paragraph.\"\n      permission_conflict: \"Any group that is allowed to access a subcategory must also be allowed to access the parent category. The following groups have access to one of the subcategories, but no access to parent category: %{group_names}.\"\n      disallowed_topic_tags: \"This topic has tags not allowed by this category: '%{tags}'\"\n      disallowed_tags_generic: \"This topic has disallowed tags.\"\n      slug_contains_non_ascii_chars: \"contains non-ascii characters\"\n      is_already_in_use: \"is already in use\"\n    cannot_delete:\n      uncategorized: \"This category is special. It is intended as a holding area for topics that have no category; it cannot be deleted.\"\n      has_subcategories: \"Can't delete this category because it has sub-categories.\"\n      topic_exists:\n        one: \"Can't delete this category because it has %{count} topic. Oldest topic is %{topic_link}.\"\n        other: \"Can't delete this category because it has %{count} topics. Oldest topic is %{topic_link}.\"\n      topic_exists_no_oldest: \"Can't delete this category because topic count is %{count}.\"\n    uncategorized_description: \"Topics that don't need a category, or don't fit into any other existing category.\"\n  trust_levels:\n    admin: \"Admin\"\n    staff: \"Staff\"\n    change_failed_explanation: \"You attempted to demote %{user_name} to '%{new_trust_level}'. However their trust level is already '%{current_trust_level}'. %{user_name} will remain at '%{current_trust_level}' - if you wish to demote user lock trust level first\"\n\n  post:\n    image_placeholder:\n      broken: \"This image is broken\"\n      blocked_hotlinked_title: \"Image hosted on another site. Click to open in a new tab.\"\n      blocked_hotlinked: \"External Image\"\n    media_placeholder:\n      blocked_hotlinked_title: \"Media hosted on another site. Click to open in a new tab.\"\n      blocked_hotlinked: \"External Media\"\n    hidden_bidi_character: \"Bidirectional characters can change the order that text is rendered. This could be used to obscure malicious code.\"\n    has_likes:\n      one: \"%{count} Like\"\n      other: \"%{count} Likes\"\n    cannot_permanently_delete:\n      many_posts: \"You can not permanently delete this topic because there are other posts.\"\n      wait_or_different_admin: \"You must wait %{time_left} before permanently deleting this post or a different administrator must do it.\"\n\n  rate_limiter:\n    slow_down: \"You\u2019ve performed this action too many times, please try again later.\"\n    too_many_requests: \"You\u2019ve performed this action too many times. Please wait %{time_left} before trying again.\"\n    by_type:\n      first_day_replies_per_day: \"We appreciate your enthusiasm, keep it up! That said, for the safety of our community, you\u2019ve reached the maximum number of replies a new user can create on their first day. Please wait %{time_left} and you\u2019ll be able to create more replies.\"\n      first_day_topics_per_day: \"We appreciate your enthusiasm! That said, for the safety of our community, you\u2019ve reached the maximum number of topics a new user can create on their first day. Please wait %{time_left} and you\u2019ll be able to create more new topics.\"\n      create_topic: \"You\u2019re creating topics a bit too quickly. Please wait %{time_left} before trying again.\"\n      create_post: \"You\u2019re replying a bit too quickly. Please wait %{time_left} before trying again.\"\n      delete_post: \"You\u2019re deleting posts a bit too quickly. Please wait %{time_left} before trying again.\"\n      public_group_membership: \"You\u2019re joining/leaving groups a bit too frequently. Please wait %{time_left} before trying again.\"\n      topics_per_day: \"You\u2019ve reached the maximum new topics allowed per day. You can create more new topics in %{time_left}.\"\n      pms_per_day: \"You\u2019ve reached the maximum messages allowed per day. You can create more new messages in %{time_left}.\"\n      create_like: \"Wow! You\u2019ve been sharing a lot of love! You\u2019ve reached the maximum number of likes within a 24 hour period, but as you gain trust levels, you\u2019ll earn more daily likes. You\u2019ll be able to like posts again in %{time_left}.\"\n      create_bookmark: \"You\u2019ve reached the maximum number of daily bookmarks. You can create more bookmarks in %{time_left}.\"\n      edit_post: \"You\u2019ve reached the maximum number of daily edits. You can submit more edits in %{time_left}.\"\n      live_post_counts: \"You\u2019re asking for live post counts too quickly. Please wait %{time_left} before trying again.\"\n      unsubscribe_via_email: \"You\u2019ve reached the maximum number of unsubscribes via email. Please wait %{time_left} before trying again.\"\n      topic_invitations_per_day: \"You\u2019ve reached the maximum number of topic invitations. You can send more invitations in %{time_left}.\"\n\n    hours:\n      one: \"%{count} hour\"\n      other: \"%{count} hours\"\n    minutes:\n      one: \"%{count} minute\"\n      other: \"%{count} minutes\"\n    seconds:\n      one: \"%{count} second\"\n      other: \"%{count} seconds\"\n    short_time: \"a few seconds\"\n\n  datetime:\n    distance_in_words:\n      half_a_minute: \"< 1m\"\n      less_than_x_seconds:\n        one: \"< %{count}s\"\n        other: \"< %{count}s\"\n      x_seconds:\n        one: \"%{count}s\"\n        other: \"%{count}s\"\n      less_than_x_minutes:\n        one: \"< %{count}m\"\n        other: \"< %{count}m\"\n      x_minutes:\n        one: \"%{count}m\"\n        other: \"%{count}m\"\n      about_x_hours:\n        one: \"%{count}h\"\n        other: \"%{count}h\"\n      x_days:\n        one: \"%{count}d\"\n        other: \"%{count}d\"\n      about_x_months:\n        one: \"%{count}mon\"\n        other: \"%{count}mon\"\n      x_months:\n        one: \"%{count}mon\"\n        other: \"%{count}mon\"\n      about_x_years:\n        one: \"%{count}y\"\n        other: \"%{count}y\"\n      over_x_years:\n        one: \"> %{count}y\"\n        other: \"> %{count}y\"\n      almost_x_years:\n        one: \"%{count}y\"\n        other: \"%{count}y\"\n\n    distance_in_words_verbose:\n      half_a_minute: \"just now\"\n      less_than_x_seconds: \"just now\"\n      x_seconds:\n        one: \"%{count} second ago\"\n        other: \"%{count} seconds ago\"\n      less_than_x_minutes:\n        one: \"less than %{count} minute ago\"\n        other: \"less than %{count} minutes ago\"\n      x_minutes:\n        one: \"%{count} minute ago\"\n        other: \"%{count} minutes ago\"\n      about_x_hours:\n        one: \"%{count} hour ago\"\n        other: \"%{count} hours ago\"\n      x_days:\n        one: \"%{count} day ago\"\n        other: \"%{count} days ago\"\n      about_x_months:\n        one: \"about %{count} month ago\"\n        other: \"about %{count} months ago\"\n      x_months:\n        one: \"%{count} month ago\"\n        other: \"%{count} months ago\"\n      about_x_years:\n        one: \"about %{count} year ago\"\n        other: \"about %{count} years ago\"\n      over_x_years:\n        one: \"over %{count} year ago\"\n        other: \"over %{count} years ago\"\n      almost_x_years:\n        one: \"almost %{count} year ago\"\n        other: \"almost %{count} years ago\"\n\n  password_reset:\n    no_token: 'Oops! The link you used no longer works. You can <a href=\"%{base_url}/login\">Log In</a> now. If you forgot your password, you can <a href=\"%{base_url}/password-reset\">request a link</a> to reset it.'\n    choose_new: \"Choose a new password\"\n    choose: \"Choose a password\"\n    update: \"Update Password\"\n    save: \"Set Password\"\n    title: \"Reset Password\"\n    success: \"You successfully changed your password and are now logged in.\"\n    success_unapproved: \"You successfully changed your password.\"\n\n  email_login:\n    invalid_token: 'Oops! The link you used no longer works. You can <a href=\"%{base_url}/login\">Log In</a> now. If you forgot your password, you can <a href=\"%{base_url}/password-reset\">request a link</a> to reset it.'\n    title: \"Email login\"\n\n  user_auth_tokens:\n    browser:\n      chrome: \"Google Chrome\"\n      discoursehub: \"DiscourseHub app\"\n      edge: \"Microsoft Edge\"\n      firefox: \"Firefox\"\n      ie: \"Internet Explorer\"\n      opera: \"Opera\"\n      safari: \"Safari\"\n      unknown: \"unknown browser\"\n    device:\n      android: \"Android Device\"\n      chromebook: \"Chrome OS\"\n      ipad: \"iPad\"\n      iphone: \"iPhone\"\n      ipod: \"iPod\"\n      linux: \"GNU/Linux Computer\"\n      mac: \"Mac\"\n      mobile: \"Mobile Device\"\n      windows: \"Windows Computer\"\n      unknown: \"unknown device\"\n    os:\n      android: \"Android\"\n      chromeos: \"Chrome OS\"\n      ios: \"iOS\"\n      linux: \"Linux\"\n      macos: \"macOS\"\n      windows: \"Microsoft Windows\"\n      unknown: \"unknown operating system\"\n\n  change_email:\n    wrong_account_error: \"You are logged in the wrong account, please log out and try again.\"\n    confirmed: \"Your email has been updated.\"\n    please_continue: \"Continue to %{site_name}\"\n    error: \"There was an error changing your email address. Perhaps the address is already in use?\"\n    doesnt_exist: \"That email address is not associated with your account.\"\n    error_staged: \"There was an error changing your email address. The address is already in use by a staged user.\"\n    already_done: \"Sorry, this confirmation link is no longer valid. Perhaps your email was already changed?\"\n    confirm: \"Confirm\"\n    max_secondary_emails_error: \"You have reached the maximum allowed secondary emails limit.\"\n\n    authorizing_new:\n      title: \"Confirm your new email\"\n      description: \"Please confirm you would like your email address changed to:\"\n      description_add: \"Please confirm you would like to add an alternate email address:\"\n\n    authorizing_old:\n      title: \"Change your email address\"\n      description: \"Please confirm your email address change\"\n      description_add: \"Please confirm you would like to add an alternate email address:\"\n      old_email: \"Old email: %{email}\"\n      new_email: \"New email: %{email}\"\n      almost_done_title: \"Confirming new email address\"\n      almost_done_description: \"We have sent an email to your new email address to confirm the change!\"\n\n  associated_accounts:\n    revoke_failed: \"Failed to revoke your account with %{provider_name}.\"\n    connected: \"(connected)\"\n\n  activation:\n    action: \"Click here to activate your account\"\n    already_done: \"Sorry, this account confirmation link is no longer valid. Perhaps your account is already active?\"\n    please_continue: \"Your new account is confirmed; you will be redirected to the home page.\"\n    continue_button: \"Continue to %{site_name}\"\n    welcome_to: \"Welcome to %{site_name}!\"\n    approval_required: \"A moderator must manually approve your new account before you can access this forum. You'll get an email when your account is approved!\"\n    missing_session: \"We cannot detect if your account was created, please ensure you have cookies enabled.\"\n    activated: \"Sorry, this account has already been activated.\"\n    admin_confirm:\n      title: \"Confirm Admin Account\"\n      description: \"Are you sure you want <b>%{target_username} (%{target_email})</b> to be an administrator?\"\n      grant: \"Grant Admin Access\"\n      complete: \"<b>%{target_username}</b> is now an administrator.\"\n      back_to: \"Return to %{title}\"\n  reviewable_score_types:\n    needs_approval:\n      title: \"Needs Approval\"\n\n  post_action_types:\n    off_topic:\n      title: \"Off-Topic\"\n      description: \"This post is not relevant to the current discussion as defined by the title and first post, and should probably be moved elsewhere.\"\n      short_description: \"Not relevant to the discussion\"\n    spam:\n      title: \"Spam\"\n      description: \"This post is an advertisement, or vandalism. It is not useful or relevant to the current topic.\"\n      short_description: \"This is an advertisement or vandalism\"\n      email_title: '\"%{title}\" was flagged as spam'\n      email_body: \"%{link}\\n\\n%{message}\"\n    inappropriate:\n      title: \"Inappropriate\"\n      description: 'This post contains content that a reasonable person would consider offensive, abusive, or a violation of <a href=\"%{base_path}/guidelines\">our community guidelines</a>.'\n      short_description: 'A violation of <a href=\"%{base_path}/guidelines\">our community guidelines</a>'\n    notify_user:\n      title: \"Send @%{username} a message\"\n      description: \"I want to talk to this person directly and personally about their post.\"\n      short_description: \"I want to talk to this person directly and personally about their post.\"\n      email_title: 'Your post in \"%{title}\"'\n      email_body: \"%{link}\\n\\n%{message}\"\n    notify_moderators:\n      title: \"Something Else\"\n      description: \"This post requires staff attention for another reason not listed above.\"\n      short_description: \"Requires staff attention for another reason\"\n      email_title: 'A post in \"%{title}\" requires staff attention'\n      email_body: \"%{link}\\n\\n%{message}\"\n    bookmark:\n      title: \"Bookmark\"\n      description: \"Bookmark this post\"\n      short_description: \"Bookmark this post\"\n    like:\n      title: \"Like\"\n      description: \"Like this post\"\n      short_description: \"Like this post\"\n\n  draft:\n    sequence_conflict_error:\n      title: \"draft error\"\n      description: \"Draft is being edited in another window. Please reload this page.\"\n  draft_backup:\n    pm_title: \"Backup Drafts from ongoing topics\"\n    pm_body: \"Topic containing backup drafts\"\n  user_activity:\n    no_log_search_queries: \"Search log queries are currently disabled (an administrator can enable them in site settings).\"\n\n  email_settings:\n    pop3_authentication_error: \"There was an issue with the POP3 credentials provided, check the username and password and try again.\"\n    imap_authentication_error: \"There was an issue with the IMAP credentials provided, check the username and password and try again.\"\n    imap_no_response_error: \"An error occurred when communicating with the IMAP server. %{message}\"\n    smtp_authentication_error: \"There was an issue with the SMTP credentials provided, check the username and password and try again.\"\n    authentication_error_gmail_app_password: 'Application-specific password required. Learn more at <a target=\"_blank\" href=\"https://support.google.com/accounts/answer/185833\">this Google Help article</a>'\n    smtp_server_busy_error: \"The SMTP server is currently busy, try again later.\"\n    smtp_unhandled_error: \"There was an unhandled error when communicating with the SMTP server. %{message}\"\n    imap_unhandled_error: \"There was an unhandled error when communicating with the IMAP server. %{message}\"\n    connection_error: \"There was an issue connecting with the server, check the server name and port and try again.\"\n    timeout_error: \"Connection to the server timed out, check the server name and port and try again.\"\n    unhandled_error: \"Unhandled error when testing email settings. %{message}\"\n  webauthn:\n    validation:\n      invalid_type_error: \"The webauthn type provided was invalid. Valid types are webauthn.get and webauthn.create.\"\n      challenge_mismatch_error: \"The provided challenge does not match the challenge generated by the authentication server.\"\n      invalid_origin_error: \"The origin of the authentication request does not match the server origin.\"\n      malformed_attestation_error: \"There was an error decoding the attestation data.\"\n      invalid_relying_party_id_error: \"The Relying Party ID of the authentication request does not match the server Relying Party ID.\"\n      user_verification_error: \"User verification is required.\"\n      unsupported_public_key_algorithm_error: \"The provided public key algorithm is not supported by the server.\"\n      unsupported_attestation_format_error: \"The attestation format is not supported by the server.\"\n      credential_id_in_use_error: \"The credential ID provided is already in use.\"\n      public_key_error: \"The public key verification for the credential failed.\"\n      ownership_error: \"The security key is not owned by the user.\"\n      not_found_error: \"A security key with the provided credential ID could not be found.\"\n      unknown_cose_algorithm_error: \"The algorithm used for the security key is not recognized.\"\n\n  topic_flag_types:\n    spam:\n      title: \"Spam\"\n      description: \"This topic is an advertisement. It is not useful or relevant to this site, but promotional in nature.\"\n      long_form: \"flagged this as spam\"\n      short_description: \"This is an advertisement\"\n    inappropriate:\n      title: \"Inappropriate\"\n      description: 'This topic contains content that a reasonable person would consider offensive, abusive, or a violation of <a href=\"%{base_path}/guidelines\">our community guidelines</a>.'\n      long_form: \"flagged this as inappropriate\"\n      short_description: 'A violation of <a href=\"%{base_path}/guidelines\">our community guidelines</a>'\n    notify_moderators:\n      title: \"Something Else\"\n      description: 'This topic requires general staff attention based on the <a href=\"%{base_path}/guidelines\">guidelines</a>, <a href=\"%{tos_url}\">TOS</a>, or for another reason not listed above.'\n      long_form: \"flagged this for moderator attention\"\n      short_description: \"Requires staff attention for another reason\"\n      email_title: 'The topic \"%{title}\" requires moderator attention'\n      email_body: \"%{link}\\n\\n%{message}\"\n\n  flagging:\n    you_must_edit: '<p>Your post was flagged by the community. Please <a href=\"%{path}\">see your messages</a>.</p>'\n    user_must_edit: \"<p>This post was flagged by the community and is temporarily hidden.</p>\"\n\n  ignored:\n    hidden_content: \"<p>Ignored content</p>\"\n\n  archetypes:\n    regular:\n      title: \"Regular Topic\"\n    banner:\n      title: \"Banner Topic\"\n      message:\n        make: \"This topic is now a banner. It will appear at the top of every page until it is dismissed by the user.\"\n        remove: \"This topic is no longer a banner. It will no longer appear at the top of every page.\"\n\n  unsubscribed:\n    title: \"Email preferences updated!\"\n    description: \"Email preferences for <b>%{email}</b> were updated. To change your email settings <a href='%{url}'>visit your user preferences</a>.\"\n    topic_description: \"To re-subscribe to %{link}, use the notification control at the bottom or right of the topic.\"\n    private_topic_description: \"To re-subscribe, use the notification control at the bottom or right of the topic.\"\n\n  uploads:\n    marked_insecure_from_theme_component_reason: \"upload used in theme component\"\n\n  unsubscribe:\n    title: \"Unsubscribe\"\n    stop_watching_topic: \"Stop watching this topic, %{link}\"\n    mute_topic: \"Mute all notifications for this topic, %{link}\"\n    unwatch_category: \"Stop watching all topics in %{category}\"\n    mailing_list_mode: \"Turn off mailing list mode\"\n    all: \"Don\u2019t send me any mail from %{sitename}\"\n    different_user_description: \"You are currently logged in as a different user than the one we emailed. Please log out, or enter anonymous mode, and try again.\"\n    not_found_description: Sorry, we couldn't find that subscription. It's possible the link in your email is too old and has expired?\"\n    user_not_found_description: \"Sorry, we couldn't find a user for this subscription. You are probably attempting to unsubscribe an account that no longer exists.\"\n    log_out: \"Log Out\"\n    submit: \"Save preferences\"\n    digest_frequency:\n      title: \"You are receiving summary emails %{frequency}\"\n      never_title: \"You are not receiving summary emails\"\n      select_title: \"Set summary emails frequency to:\"\n\n      never: \"never\"\n      every_30_minutes: \"every 30 minutes\"\n      every_hour: \"hourly\"\n      daily: \"daily\"\n      weekly: \"weekly\"\n      every_month: \"every month\"\n      every_six_months: \"every six months\"\n\n  user_api_key:\n    title: \"Authorize application access\"\n    authorize: \"Authorize\"\n    read: \"read\"\n    read_write: \"read/write\"\n    description: '\"%{application_name}\" is requesting the following access to your account:'\n    instructions: 'We just generated a new user API key for you to use with \"%{application_name}\", please paste the following key into your application:'\n    otp_description: 'Would you like to allow \"%{application_name}\" to access this site?'\n    otp_confirmation:\n      confirm_title: Continue to %{site_name}\n      logging_in_as: Logging in as %{username}\n      confirm_button: Finish Login\n    no_trust_level: \"Sorry, you do not have the required trust level to access the user API\"\n    generic_error: \"Sorry, we are unable to issue user API keys, this feature may be disabled by the site admin\"\n    scopes:\n      message_bus: \"Live updates\"\n      notifications: \"Read and clear notifications\"\n      push: \"Push notifications to external services\"\n      session_info: \"Read user session info\"\n      read: \"Read all\"\n      write: \"Write all\"\n      one_time_password: \"Create a one-time login token\"\n      bookmarks_calendar: \"Read bookmark reminders\"\n    invalid_public_key: \"Sorry, the public key is invalid.\"\n    invalid_auth_redirect: \"Sorry, this auth_redirect host is not allowed.\"\n    invalid_token: \"Missing, invalid or expired token.\"\n  flags:\n    errors:\n      already_handled: \"Flag was already handled\"\n  reports:\n    default:\n      labels:\n        count: Count\n        percent: Percent\n        day: Day\n    post_edits:\n      title: \"Post Edits\"\n      labels:\n        edited_at: Date\n        post: Post\n        editor: Editor\n        author: Author\n        edit_reason: Reason\n      description: \"Number of new post edits.\"\n    user_flagging_ratio:\n      title: \"User Flagging Ratio\"\n      labels:\n        user: User\n        agreed_flags: Agreed flags\n        disagreed_flags: Disagreed flags\n        ignored_flags: Ignored flags\n        score: Score\n      description: \"List of users ordered by ratio of staff response to their flags (disagreed to agreed).\"\n    moderators_activity:\n      title: \"Moderator Activity\"\n      labels:\n        moderator: Moderator\n        flag_count: Flags reviewed\n        time_read: Time reading\n        topic_count: Topics created\n        post_count: Posts created\n        pm_count: PMs created\n        revision_count: Revisions\n      description: List of moderator activity including flags reviewed, reading time, topics created, posts created, personal messages created, and revisions.\n    flags_status:\n      title: \"Flags Status\"\n      values:\n        agreed: Agreed\n        disagreed: Disagreed\n        deferred: Deferred\n        no_action: No action\n      labels:\n        flag: Type\n        assigned: Assigned\n        poster: Poster\n        flagger: Flagger\n        time_to_resolution: Resolution time\n      description: \"List of flags' statuses including type of flag, poster, flagger, and time to resolution.\"\n    visits:\n      title: \"User Visits\"\n      xaxis: \"Day\"\n      yaxis: \"Number of visits\"\n      description: \"Number of all user visits.\"\n    signups:\n      title: \"Signups\"\n      xaxis: \"Day\"\n      yaxis: \"Number of signups\"\n      description: \"New account registrations for this period.\"\n    new_contributors:\n      title: \"New Contributors\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new contributors\"\n      description: \"Number of users who made their first post during this period.\"\n    trust_level_growth:\n      title: \"Trust Level growth\"\n      xaxis:\n        tl1_reached: \"Reached TL1\"\n        tl2_reached: \"Reached TL2\"\n        tl3_reached: \"Reached TL3\"\n        tl4_reached: \"Reached TL4\"\n      yaxis: \"Day\"\n      description: \"Number of users who increased their Trust Level during this period.\"\n    consolidated_page_views:\n      title: \"Consolidated Pageviews\"\n      xaxis:\n        page_view_crawler: \"Crawlers\"\n        page_view_anon: \"Anonymous users\"\n        page_view_logged_in: \"Logged in users\"\n      yaxis: \"Day\"\n      description: \"Pageviews for logged in users, anonymous users and crawlers.\"\n      labels:\n        post: Post\n        editor: Editor\n        author: Author\n        edit_reason: Reason\n    consolidated_api_requests:\n      title: \"Consolidated API Requests\"\n      xaxis:\n        api: \"API\"\n        user_api: \"User API\"\n      yaxis: \"Day\"\n      description: \"API requests for regular API keys and user API keys.\"\n    dau_by_mau:\n      title: \"DAU/MAU\"\n      xaxis: \"Day\"\n      yaxis: \"DAU/MAU\"\n      description: \"Number of members that logged in in the last day divided by number of members that logged in in the last month \u2013 returns a % which indicates community 'stickiness'. Aim for >30%.\"\n    daily_engaged_users:\n      title: \"Daily Engaged Users\"\n      xaxis: \"Day\"\n      yaxis: \"Engaged Users\"\n      description: \"Number of users that have liked or posted in the last day.\"\n    profile_views:\n      title: \"User Profile Views\"\n      xaxis: \"Day\"\n      yaxis: \"Number of user profiles viewed\"\n      description: \"Total new views of user profiles.\"\n    topics:\n      title: \"Topics\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new topics\"\n      description: \"New topics created during this period.\"\n    posts:\n      title: \"Posts\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new posts\"\n      description: \"New posts created during this period\"\n    likes:\n      title: \"Likes\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new likes\"\n      description: \"Number of new likes.\"\n    flags:\n      title: \"Flags\"\n      xaxis: \"Day\"\n      yaxis: \"Number of flags\"\n      description: \"Number of new flags.\"\n    bookmarks:\n      title: \"Bookmarks\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new bookmarks\"\n      description: \"Number of new topics and posts bookmarked.\"\n    users_by_trust_level:\n      title: \"Users per Trust Level\"\n      xaxis: \"Trust Level\"\n      yaxis: \"Number of Users\"\n      labels:\n        level: Level\n      description: \"Number of users grouped by trust level.\"\n      description_link: \"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\"\n    users_by_type:\n      title: \"Users per Type\"\n      xaxis: \"Type\"\n      yaxis: \"Number of Users\"\n      labels:\n        type: Type\n      xaxis_labels:\n        admin: Admin\n        moderator: Moderator\n        suspended: Suspended\n        silenced: Silenced\n      description: \"Number of users grouped by admin, moderator, suspended, and silenced.\"\n    trending_search:\n      title: Trending Search Terms\n      labels:\n        term: Term\n        searches: Searches\n        click_through: CTR\n      description: \"Most popular search terms with their click-through rates.\"\n    emails:\n      title: \"Emails Sent\"\n      xaxis: \"Day\"\n      yaxis: \"Number of Emails\"\n      description: \"Number of new emails sent.\"\n    user_to_user_private_messages:\n      title: \"User-to-User (excluding replies)\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of newly initiated personal messages.\"\n    user_to_user_private_messages_with_replies:\n      title: \"User-to-User (with replies)\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of all new personal messages and responses.\"\n    system_private_messages:\n      title: \"System\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of personal messages sent automatically by the System.\"\n    moderator_warning_private_messages:\n      title: \"Moderator Warning\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of warnings sent by personal messages from moderators.\"\n    notify_moderators_private_messages:\n      title: \"Notify Moderators\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of times moderators have been privately notified by a flag.\"\n    notify_user_private_messages:\n      title: \"Notify User\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of times users have been privately notified by a flag.\"\n    top_referrers:\n      title: \"Top Referrers\"\n      xaxis: \"User\"\n      num_clicks: \"Clicks\"\n      num_topics: \"Topics\"\n      labels:\n        user: \"User\"\n        num_clicks: \"Clicks\"\n        num_topics: \"Topics\"\n      description: \"Users listed by number of clicks on links they have shared.\"\n    top_traffic_sources:\n      title: \"Top Traffic Sources\"\n      xaxis: \"Domain\"\n      num_clicks: \"Clicks\"\n      num_topics: \"Topics\"\n      num_users: \"Users\"\n      labels:\n        domain: Domain\n        num_clicks: Clicks\n        num_topics: Topics\n      description: \"External sources that have linked to this site the most.\"\n    top_referred_topics:\n      title: \"Top Referred Topics\"\n      labels:\n        num_clicks: \"Clicks\"\n        topic: \"Topic\"\n      description: \"Topics that have received the most clicks from external sources.\"\n    page_view_anon_reqs:\n      title: \"Anonymous\"\n      xaxis: \"Day\"\n      yaxis: \"Anonymous Pageviews\"\n      description: \"Number of new pageviews by visitors not logged in to an account.\"\n    page_view_logged_in_reqs:\n      title: \"Logged In\"\n      xaxis: \"Day\"\n      yaxis: \"Logged In Pageviews\"\n      description: \"Number of new pageviews from logged in users.\"\n    page_view_crawler_reqs:\n      title: \"Web Crawler Pageviews\"\n      xaxis: \"Day\"\n      yaxis: \"Web Crawler Pageviews\"\n      description: \"Total pageviews from web crawlers over time.\"\n    page_view_total_reqs:\n      title: \"Pageviews\"\n      xaxis: \"Day\"\n      yaxis: \"Total Pageviews\"\n      description: \"Number of new pageviews from all visitors.\"\n    page_view_logged_in_mobile_reqs:\n      title: \"Logged In Pageviews\"\n      xaxis: \"Day\"\n      yaxis: \"Mobile Logged In Pageviews\"\n      description: \"Number of new pageviews from users on mobile devices and logged in to an account.\"\n    page_view_anon_mobile_reqs:\n      title: \"Anon Pageviews\"\n      xaxis: \"Day\"\n      yaxis: \"Mobile Anon Pageviews\"\n      description: \"Number of new pageviews from visitors on a mobile device who are not logged in.\"\n    http_background_reqs:\n      title: \"Background\"\n      xaxis: \"Day\"\n      yaxis: \"Requests used for live update and tracking\"\n    http_2xx_reqs:\n      title: \"Status 2xx (OK)\"\n      xaxis: \"Day\"\n      yaxis: \"Successful requests (Status 2xx)\"\n    http_3xx_reqs:\n      title: \"HTTP 3xx (Redirect)\"\n      xaxis: \"Day\"\n      yaxis: \"Redirect requests (Status 3xx)\"\n    http_4xx_reqs:\n      title: \"HTTP 4xx (Client Error)\"\n      xaxis: \"Day\"\n      yaxis: \"Client Errors (Status 4xx)\"\n    http_5xx_reqs:\n      title: \"HTTP 5xx (Server Error)\"\n      xaxis: \"Day\"\n      yaxis: \"Server Errors (Status 5xx)\"\n    http_total_reqs:\n      title: \"Total\"\n      xaxis: \"Day\"\n      yaxis: \"Total requests\"\n    time_to_first_response:\n      title: \"Time to first response\"\n      xaxis: \"Day\"\n      yaxis: \"Average time (hours)\"\n      description: \"Average time (in hours) of the first response to new topics.\"\n    topics_with_no_response:\n      title: \"Topics with no response\"\n      xaxis: \"Day\"\n      yaxis: \"Total\"\n      description: \"Number of new topics created that did not receive a response.\"\n    mobile_visits:\n      title: \"User Visits (mobile)\"\n      xaxis: \"Day\"\n      yaxis: \"Number of visits\"\n      description: \"Number of unique users who visited using a mobile device.\"\n    web_crawlers:\n      title: \"Web Crawler User Agents\"\n      labels:\n        user_agent: \"User Agent\"\n        page_views: \"Pageviews\"\n      description: \"List of web crawler user agents, sorted by pageviews.\"\n    suspicious_logins:\n      title: \"Suspicious Logins\"\n      labels:\n        user: User\n        client_ip: Client IP\n        location: Location\n        browser: Browser\n        device: Device\n        os: Operating System\n        login_time: Login Time\n      description: \"Details of new logins that differ suspiciously from previous logins.\"\n    staff_logins:\n      title: \"Admin Logins\"\n      labels:\n        user: User\n        location: Location\n        login_at: Login at\n      description: \"List of admin login times with locations.\"\n    top_uploads:\n      title: \"Top Uploads\"\n      labels:\n        filename: Filename\n        extension: Extension\n        author: Author\n        filesize: File size\n      description: \"List all uploads by extension, filesize and author.\"\n    top_ignored_users:\n      title: \"Top Ignored / Muted Users\"\n      labels:\n        ignored_user: Ignored User\n        ignores_count: Ignores count\n        mutes_count: Mutes count\n      description: \"Users who have been muted and/or ignored by many other users.\"\n    top_users_by_likes_received:\n      title: \"Top Users by likes received\"\n      labels:\n        user: User\n        qtt_like: Likes Received\n      description: \"Top 10 users who have received likes.\"\n    top_users_by_likes_received_from_inferior_trust_level:\n      title: \"Top Users by likes received from a user with a lower trust level\"\n      labels:\n        user: User\n        trust_level: Trust level\n        qtt_like: Likes Received\n      description: \"Top 10 users in a higher trust level being liked by people in a lower trust level.\"\n    top_users_by_likes_received_from_a_variety_of_people:\n      title: \"Top Users by likes received from a variety of people\"\n      labels:\n        user: User\n        qtt_like: Likes Received\n      description: \"Top 10 users who have had likes from a wide range of people.\"\n\n  dashboard:\n    group_email_credentials_warning: 'There was an issue with the email credentials for the group <a href=\"%{base_path}/g/%{group_name}/manage/email\">%{group_full_name}</a>. No emails will send from the group inbox until this problem is addressed. %{error}'\n    rails_env_warning: \"Your server is running in %{env} mode.\"\n    host_names_warning: \"Your config/database.yml file is using the default localhost hostname. Update it to use your site's hostname.\"\n    sidekiq_warning: 'Sidekiq is not running. Many tasks, like sending emails, are executed asynchronously by Sidekiq. Please ensure at least one Sidekiq process is running. <a href=\"https://github.com/mperham/sidekiq\" target=\"_blank\">Learn about Sidekiq here</a>.'\n    queue_size_warning: \"The number of queued jobs is %{queue_size}, which is high. This could indicate a problem with the Sidekiq process(es), or you may need to add more Sidekiq workers.\"\n    memory_warning: \"Your server is running with less than 1 GB of total memory. At least 1 GB of memory is recommended.\"\n    google_oauth2_config_warning: 'The server is configured to allow signup and login with Google OAuth2 (enable_google_oauth2_logins), but the client id and client secret values are not set. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/configuring-google-login-for-discourse/15858\" target=\"_blank\">See this guide to learn more</a>.'\n    facebook_config_warning: 'The server is configured to allow signup and login with Facebook (enable_facebook_logins), but the app id and app secret values are not set. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/configuring-facebook-login-for-discourse/13394\" target=\"_blank\">See this guide to learn more</a>.'\n    twitter_config_warning: 'The server is configured to allow signup and login with Twitter (enable_twitter_logins), but the key and secret values are not set. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/configuring-twitter-login-for-discourse/13395\" target=\"_blank\">See this guide to learn more</a>.'\n    github_config_warning: 'The server is configured to allow signup and login with GitHub (enable_github_logins), but the client id and secret values are not set. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/configuring-github-login-for-discourse/13745\" target=\"_blank\">See this guide to learn more</a>.'\n    s3_config_warning: 'The server is configured to upload files to S3, but at least one the following setting is not set: s3_access_key_id, s3_secret_access_key, s3_use_iam_profile, or s3_upload_bucket. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/how-to-set-up-image-uploads-to-s3/7229\" target=\"_blank\">See \"How to set up image uploads to S3?\" to learn more</a>.'\n    s3_backup_config_warning: 'The server is configured to upload backups to S3, but at least one the following setting is not set: s3_access_key_id, s3_secret_access_key, s3_use_iam_profile, or s3_backup_bucket. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/how-to-set-up-image-uploads-to-s3/7229\" target=\"_blank\">See \"How to set up image uploads to S3?\" to learn more</a>.'\n    s3_cdn_warning: 'The server is configured to upload files to S3, but there is no S3 CDN configured. This can lead to expensive S3 costs and slower site performance. <a href=\"https://meta.discourse.org/t/-/148916\" target=\"_blank\">See \"Using Object Storage for Uploads\" to learn more</a>.'\n    image_magick_warning: 'The server is configured to create thumbnails of large images, but ImageMagick is not installed. Install ImageMagick using your favorite package manager or <a href=\"https://www.imagemagick.org/script/download.php\" target=\"_blank\">download the latest release</a>.'\n    failing_emails_warning: 'There are %{num_failed_jobs} email jobs that failed. Check your app.yml and ensure that the mail server settings are correct. <a href=\"%{base_path}/sidekiq/retries\" target=\"_blank\">See the failed jobs in Sidekiq</a>.'\n    subfolder_ends_in_slash: \"Your subfolder setup is incorrect; the DISCOURSE_RELATIVE_URL_ROOT ends in a slash.\"\n    email_polling_errored_recently:\n      one: \"Email polling has generated an error in the past 24 hours. Look at <a href='%{base_path}/logs' target='_blank'>the logs</a> for more details.\"\n      other: \"Email polling has generated %{count} errors in the past 24 hours. Look at <a href='%{base_path}/logs' target='_blank'>the logs</a> for more details.\"\n    missing_mailgun_api_key: \"The server is configured to send emails via Mailgun but you haven't provided an API key used to verify the webhook messages.\"\n    bad_favicon_url: \"The favicon is failing to load. Check your favicon setting in <a href='%{base_path}/admin/site_settings'>Site Settings</a>.\"\n    poll_pop3_timeout: \"Connection to the POP3 server is timing out. Incoming email could not be retrieved. Please check your <a href='%{base_path}/admin/site_settings/category/email'>POP3 settings</a> and service provider.\"\n    poll_pop3_auth_error: \"Connection to the POP3 server is failing with an authentication error. Please check your <a href='%{base_path}/admin/site_settings/category/email'>POP3 settings</a>.\"\n    force_https_warning: \"Your website is using SSL. But `<a href='%{base_path}/admin/site_settings/category/all_results?filter=force_https'>force_https</a>` is not yet enabled in your site settings.\"\n    out_of_date_themes: \"Updates are available for the following themes:\"\n    unreachable_themes: \"We were unable to check for updates on the following themes:\"\n    watched_word_regexp_error: \"The regular expression for '%{action}' watched words is invalid. Please check your <a href='%{base_path}/admin/customize/watched_words'>Watched Word settings</a>, or disable the 'watched words regular expressions' site setting.\"\n\n  site_settings:\n    allow_bulk_invite: \"Allow bulk invites by uploading a CSV file\"\n    disabled: \"disabled\"\n    display_local_time_in_user_card: \"Display the local time based on a user's timezone when their user card is opened.\"\n    censored_words: \"Words that will be automatically replaced with &#9632;&#9632;&#9632;&#9632;\"\n    delete_old_hidden_posts: \"Auto-delete any hidden posts that stay hidden for more than 30 days.\"\n    default_locale: \"The default language of this Discourse instance. You can replace the text of system generated categories and topics at <a href='%{base_path}/admin/customize/site_texts' target='_blank'>Customize / Text</a>.\"\n    allow_user_locale: \"Allow users to choose their own language interface preference\"\n    set_locale_from_accept_language_header: \"set interface language for anonymous users from their web browser's language headers\"\n    support_mixed_text_direction: \"Support mixed left-to-right and right-to-left text directions.\"\n    min_post_length: \"Minimum allowed post length in characters\"\n    min_first_post_length: \"Minimum allowed first post (topic body) length in characters\"\n    min_personal_message_post_length: \"Minimum allowed post length in characters for messages\"\n    max_post_length: \"Maximum allowed post length in characters\"\n    topic_featured_link_enabled: \"Enable posting a link with topics.\"\n    show_topic_featured_link_in_digest: \"Show the topic featured link in the digest email.\"\n    min_topic_views_for_delete_confirm: \"Minimum amount of views a topic must have for a confirmation popup to appear when it gets deleted\"\n    min_topic_title_length: \"Minimum allowed topic title length in characters\"\n    max_topic_title_length: \"Maximum allowed topic title length in characters\"\n    min_personal_message_title_length: \"Minimum allowed title length for a message in characters\"\n    max_emojis_in_title: \"Maximum allowed emojis in topic title\"\n    min_search_term_length: \"Minimum valid search term length in characters\"\n    search_tokenize_chinese: \"Force search to tokenize Chinese even on non Chinese sites\"\n    search_tokenize_japanese: \"Force search to tokenize Japanese even on non Japanese sites\"\n    search_prefer_recent_posts: \"If searching your large forum is slow, this option tries an index of more recent posts first\"\n    search_recent_posts_size: \"How many recent posts to keep in the index\"\n    log_search_queries: \"Log search queries performed by users\"\n    search_query_log_max_size: \"Maximum amount of search queries to keep\"\n    search_query_log_max_retention_days: \"Maximum amount of time to keep search queries, in days.\"\n    search_ignore_accents: \"Ignore accents when searching for text.\"\n    category_search_priority_low_weight: \"Weight applied to ranking for low category search priority.\"\n    category_search_priority_high_weight: \"Weight applied to ranking for high category search priority.\"\n    default_composer_category: \"The category used to pre-populate the category dropdown when creating a new topic.\"\n    allow_uncategorized_topics: \"Allow topics to be created without a category. WARNING: If there are any uncategorized topics, you must recategorize them before turning this off.\"\n    allow_duplicate_topic_titles: \"Allow topics with identical, duplicate titles.\"\n    allow_duplicate_topic_titles_category: \"Allow topics with identical, duplicate titles if the category is different. allow_duplicate_topic_titles must be disabled.\"\n    unique_posts_mins: \"How many minutes before a user can make a post with the same content again\"\n    educate_until_posts: \"When the user starts typing their first (n) new posts, show the pop-up new user education panel in the composer.\"\n    title: \"The name of this site, as used in the title tag.\"\n    site_description: \"Describe this site in one sentence, as used in the meta description tag.\"\n    short_site_description: \"Short description, as used in the title tag on homepage.\"\n    contact_email: \"Email address of key contact responsible for this site. Used for critical notifications, and also displayed on <a href='%{base_path}/about' target='_blank'>/about</a> for urgent matters.\"\n    contact_url: \"Contact URL for this site. Displayed on the <a href='%{base_path}/about' target='_blank'>/about</a> page for urgent matters.\"\n    crawl_images: \"Retrieve images from remote URLs to insert the correct width and height dimensions.\"\n    download_remote_images_to_local: \"Convert remote (hotlinked) images to local images by downloading them; This preserves content even if the images are removed from the remote site in future.\"\n    download_remote_images_threshold: \"Minimum disk space necessary to download remote images locally (in percent)\"\n    disabled_image_download_domains: \"Remote images will never be downloaded from these domains. Pipe-delimited list.\"\n    block_hotlinked_media: \"Prevent users from introducing remote (hotlinked) media in their posts. Remote media which is not downloaded via 'download_remote_images_to_local' will be replaced with a placeholder link.\"\n    block_hotlinked_media_exceptions: \"A list of base URLs which are exempt from the block_hotlinked_media setting. Include the protocol (e.g. https://example.com).\"\n    editing_grace_period: \"For (n) seconds after posting, editing will not create a new version in the post history.\"\n    editing_grace_period_max_diff: \"Maximum number of character changes allowed in editing grace period, if more changed store another post revision (trust level 0 and 1)\"\n    editing_grace_period_max_diff_high_trust: \"Maximum number of character changes allowed in editing grace period, if more changed store another post revision (trust level 2 and up)\"\n    staff_edit_locks_post: \"Posts will be locked from editing if they are edited by staff members\"\n    post_edit_time_limit: \"A tl0 or tl1 author can edit their post for (n) minutes after posting. Set to 0 for forever.\"\n    tl2_post_edit_time_limit: \"A tl2+ author can edit their post for (n) minutes after posting. Set to 0 for forever.\"\n    edit_history_visible_to_public: \"Allow everyone to see previous versions of an edited post. When disabled, only staff members can view.\"\n    delete_removed_posts_after: \"Posts removed by the author will be automatically deleted after (n) hours. If set to 0, posts will be deleted immediately.\"\n    notify_users_after_responses_deleted_on_flagged_post: \"When a post is flagged and then removed, all users that responded to the post and had their responses removed will be notified.\"\n    max_image_width: \"Maximum thumbnail width of images in a post\"\n    max_image_height: \"Maximum thumbnail height of images in a post\"\n    responsive_post_image_sizes: \"Resize lightbox preview images to allow for high DPI screens of the following pixel ratios. Remove all values to disable responsive images.\"\n    fixed_category_positions: \"If checked, you will be able to arrange categories into a fixed order. If unchecked, categories are listed in order of activity.\"\n    fixed_category_positions_on_create: \"If checked, category ordering will be maintained on topic creation dialog (requires fixed_category_positions).\"\n    add_rel_nofollow_to_user_content: 'Add rel nofollow to all submitted user content, except for internal links (including parent domains). If you change this, you must rebake all posts with: \"rake posts:rebake\"'\n    exclude_rel_nofollow_domains: \"A list of domains where nofollow should not be added to links. example.com will automatically allow sub.example.com as well. As a minimum, you should add the domain of this site to help web crawlers find all content. If other parts of your website are at other domains, add those too.\"\n\n    post_excerpt_maxlength: \"Maximum length of a post excerpt / summary.\"\n    topic_excerpt_maxlength: \"Maximum length of a topic excerpt / summary, generated from the first post in a topic.\"\n    show_pinned_excerpt_mobile: \"Show excerpt on pinned topics in mobile view.\"\n    show_pinned_excerpt_desktop: \"Show excerpt on pinned topics in desktop view.\"\n    post_onebox_maxlength: \"Maximum length of a oneboxed Discourse post in characters.\"\n    blocked_onebox_domains: \"A list of domains that will never be oneboxed e.g. wikipedia.org\\n(Wildcard symbols * ? not supported)\"\n    block_onebox_on_redirect: \"Block onebox for URLs that redirect.\"\n    allowed_inline_onebox_domains: \"A list of domains that will be oneboxed in miniature form if linked without a title\"\n    enable_inline_onebox_on_all_domains: \"Ignore inline_onebox_domain_allowlist site setting and allow inline onebox on all domains.\"\n    force_custom_user_agent_hosts: \"Hosts for which to use the custom onebox user agent on all requests. (Especially useful for hosts that limit access by user agent).\"\n    max_oneboxes_per_post: \"Maximum number of oneboxes in a post.\"\n    facebook_app_access_token: \"A token generated from your Facebook app ID and secret. Used to generate Instagram oneboxes.\"\n\n    logo: \"The logo image at the top left of your site. Use a wide rectangular image with a height of 120 and an aspect ratio greater than 3:1. If left blank, the site title text will be shown.\"\n    logo_small: \"The small logo image at the top left of your site, seen when scrolling down. Use a square 120 \u00d7 120 image. If left blank, a home glyph will be shown.\"\n    digest_logo: \"The alternate logo image used at the top of your site's email summary. Use a wide rectangle image. Don't use an SVG image. If left blank, the image from the `logo` setting will be used.\"\n    mobile_logo: \"The logo used on mobile version of your site. Use a wide rectangular image with a height of 120 and an aspect ratio greater than 3:1. If left blank, the image from the `logo` setting will be used.\"\n    logo_dark: \"Dark scheme alternative for the 'logo' site setting.\"\n    logo_small_dark: \"Dark scheme alternative for the 'logo small' site setting.\"\n    mobile_logo_dark: \"Dark scheme alternative for the 'mobile logo' site setting.\"\n    large_icon: \"Image used as the base for other metadata icons. Should ideally be larger than 512 x 512. If left blank, logo_small will be used.\"\n    manifest_icon: \"Image used as logo/splash image on Android. Will be automatically resized to 512 \u00d7 512. If left blank, large_icon will be used.\"\n    manifest_screenshots: \"Screenshots that showcase your instance features and functionality on its install prompt page. All images should be local uploads and of the same dimensions.\"\n    favicon: \"A favicon for your site, see <a href='https://en.wikipedia.org/wiki/Favicon' target='_blank'>https://en.wikipedia.org/wiki/Favicon</a>. To work correctly over a CDN it must be a png. Will be resized to 32x32. If left blank, large_icon will be used.\"\n    apple_touch_icon: \"Icon used for Apple touch devices. Will be automatically resized to 180x180. If left blank, large_icon will be used.\"\n    opengraph_image: \"Default opengraph image, used when the page has no other suitable image. If left blank, large_icon will be used\"\n    twitter_summary_large_image: \"Twitter card 'summary large image' (should be at least 280 in width, and at least 150 in height, cannot be .svg). If left blank, regular card metadata is generated using the opengraph_image, as long as that is not also a .svg\"\n\n    notification_email: \"The from: email address used when sending all essential system emails. The domain specified here must have SPF, DKIM and reverse PTR records set correctly for email to arrive.\"\n    email_custom_headers: \"A pipe-delimited list of custom email headers\"\n    email_subject: \"Customizable subject format for standard emails. See <a href='https://meta.discourse.org/t/customize-subject-format-for-standard-emails/20801' target='_blank'>https://meta.discourse.org/t/customize-subject-format-for-standard-emails/20801</a>\"\n    detailed_404: \"Provides more details to users about why they can\u2019t access a particular topic. Note: This is less secure because users will know if a URL links to a valid topic.\"\n    enforce_second_factor: \"Forces users to enable two-factor authentication. Select 'all' to enforce it to all users. Select 'staff' to enforce it to staff users only.\"\n    force_https: \"Force your site to use HTTPS only. WARNING: do NOT enable this until you verify HTTPS is fully set up and working absolutely everywhere! Did you check your CDN, all social logins, and any external logos / dependencies to make sure they are all HTTPS compatible, too?\"\n    same_site_cookies: \"Use same site cookies, they eliminate all Cross Site Request Forgery vectors on supported browsers (Lax or Strict). Warning: Strict will only work on sites that force login and use an external auth method.\"\n\n    summary_score_threshold: \"The minimum score required for a post to be included in 'Summarize This Topic'\"\n    summary_posts_required: \"Minimum posts in a topic before 'Summarize This Topic' is enabled. Changes to this setting will be applied retroactively within a week.\"\n    summary_likes_required: \"Minimum likes in a topic before 'Summarize This Topic' is enabled. Changes to this setting will be applied retroactively within a week.\"\n    summary_percent_filter: \"When a user clicks 'Summarize This Topic', show the top % of posts\"\n    summary_max_results: \"Maximum posts returned by 'Summarize This Topic'\"\n    summary_timeline_button: \"Show a 'Summarize' button in the timeline\"\n\n    enable_personal_messages: \"DEPRECATED, use the 'personal message enabled groups' setting instead. Allow trust level 1 (configurable via min trust to send messages) users to create messages and reply to messages. Note that staff can always send messages no matter what.\"\n    personal_message_enabled_groups: \"Allow users within these groups to create messages and reply to messages. Trust level groups include all trust levels above that number, for example choosing trust_level_1 also allows trust_level_2, 3, 4 users to send PMs. Note that staff can always send messages no matter what.\"\n    enable_system_message_replies: \"Allows users to reply to system messages, even if personal messages are disabled\"\n    enable_chunked_encoding: \"Enable chunked encoding responses by the server. This feature works on most setups however some proxies may buffer, causing responses to be delayed\"\n    long_polling_base_url: \"Base URL used for long polling (when a CDN is serving dynamic content, be sure to set this to origin pull) eg: http://origin.site.com\"\n    polling_interval: \"When not long polling, how often should logged on clients poll in milliseconds\"\n    anon_polling_interval: \"How often should anonymous clients poll in milliseconds\"\n    background_polling_interval: \"How often should the clients poll in milliseconds (when the window is in the background)\"\n\n    hide_post_sensitivity: \"The likelihood that a flagged post will be hidden\"\n    silence_new_user_sensitivity: \"The likelihood that a new user will be silenced based on spam flags\"\n    auto_close_topic_sensitivity: \"The likelihood that a flagged topic will be automatically closed\"\n\n    cooldown_minutes_after_hiding_posts: \"Number of minutes a user must wait before they can edit a post hidden via community flagging\"\n\n    max_topics_in_first_day: \"The maximum number of topics a user is allowed to create in the 24 hour period after creating their first post\"\n    max_replies_in_first_day: \"The maximum number of replies a user is allowed to create in the 24 hour period after creating their first post\"\n\n    tl2_additional_likes_per_day_multiplier: \"Increase limit of likes per day for tl2 (member) by multiplying with this number\"\n    tl3_additional_likes_per_day_multiplier: \"Increase limit of likes per day for tl3 (regular) by multiplying with this number\"\n    tl4_additional_likes_per_day_multiplier: \"Increase limit of likes per day for tl4 (leader) by multiplying with this number\"\n    tl2_additional_edits_per_day_multiplier: \"Increase limit of edits per day for tl2 (member) by multiplying with this number\"\n    tl3_additional_edits_per_day_multiplier: \"Increase limit of edits per day for tl3 (regular) by multiplying with this number\"\n    tl4_additional_edits_per_day_multiplier: \"Increase limit of edits per day for tl4 (leader) by multiplying with this number\"\n    tl2_additional_flags_per_day_multiplier: \"Increase limit of flags per day for tl2 (member) by multiplying with this number\"\n    tl3_additional_flags_per_day_multiplier: \"Increase limit of flags per day for tl3 (regular) by multiplying with this number\"\n    tl4_additional_flags_per_day_multiplier: \"Increase limit of flags per day for tl4 (leader) by multiplying with this number\"\n\n    num_users_to_silence_new_user: \"If a new user's posts get num_spam_flags_to_silence_new_user spam flags from this many different users, hide all their posts and prevent future posting. 0 to disable.\"\n    num_tl3_flags_to_silence_new_user: \"If a new user's posts get this many flags from num_tl3_users_to_silence_new_user different trust level 3 users, hide all their posts and prevent future posting. 0 to disable.\"\n    num_tl3_users_to_silence_new_user: \"If a new user's posts get num_tl3_flags_to_silence_new_user flags from this many different trust level 3 users, hide all their posts and prevent future posting. 0 to disable.\"\n    notify_mods_when_user_silenced: \"If a user is automatically silenced, send a message to all moderators.\"\n    flag_sockpuppets: \"If a new user replies to a topic from the same IP address as the user who started the topic, flag both of their posts as potential spam.\"\n\n    traditional_markdown_linebreaks: \"Use traditional linebreaks in Markdown, which require two trailing spaces for a linebreak.\"\n    enable_markdown_typographer: \"Use typography rules to improve readability of text: replace straight quotes ' with curly quotes \u2019, (c) (tm) with symbols, -- with emdash \u2013, etc\"\n    enable_markdown_linkify: \"Automatically treat text that looks like a link as a link: www.example.com and https://example.com will be automatically linked\"\n    markdown_linkify_tlds: \"List of top level domains that get automatically treated as links\"\n    markdown_typographer_quotation_marks: \"List of double and single quotes replacement pairs\"\n    post_undo_action_window_mins: \"Number of minutes users are allowed to undo recent actions on a post (like, flag, etc).\"\n    must_approve_users: \"Staff must approve all new user accounts before they are allowed to access the site.\"\n    invite_code: \"User must type this code to be allowed account registration, ignored when empty (case-insensitive)\"\n    approve_suspect_users: \"Add suspicious users to the review queue. Suspicious users have entered a bio/website but have no reading activity.\"\n    review_every_post: \"All posts must be reviewed. WARNING! NOT RECOMMENDED FOR BUSY SITES.\"\n    pending_users_reminder_delay_minutes: \"Notify moderators if new users have been waiting for approval for longer than this many minutes. Set to -1 to disable notifications.\"\n    persistent_sessions: \"Users will remain logged in when the web browser is closed\"\n    maximum_session_age: \"User will remain logged in for n hours since last visit\"\n    ga_version: \"Version of Google Universal Analytics to use: v3 (analytics.js), v4 (gtag)\"\n    ga_universal_tracking_code: \"Google Universal Analytics tracking code ID, eg: UA-12345678-9; see <a href='https://google.com/analytics' target='_blank'>https://google.com/analytics</a>\"\n    ga_universal_domain_name: \"Google Universal Analytics domain name, eg: mysite.com; see <a href='https://google.com/analytics' target='_blank'>https://google.com/analytics</a>\"\n    ga_universal_auto_link_domains: \"Enable Google Universal Analytics cross-domain tracking. Outgoing links to these domains will have the client id added to them. See <a href='https://support.google.com/analytics/answer/1034342?hl=en' target='_blank'>Google's Cross-Domain Tracking guide.</a>\"\n    gtm_container_id: \"Google Tag Manager container id. eg: GTM-ABCDEF. <br/>Note: Third-party scripts loaded by GTM may need to be allowlisted in 'content security policy script src'.\"\n    enable_escaped_fragments: \"Fall back to Google's Ajax-Crawling API if no webcrawler is detected. See <a href='https://developers.google.com/webmasters/ajax-crawling/docs/learn-more' target='_blank'>https://developers.google.com/webmasters/ajax-crawling/docs/learn-more</a>\"\n    moderators_manage_categories_and_groups: \"Allow moderators to create and manage categories and groups\"\n    moderators_change_post_ownership: \"Allow moderators to change post ownership\"\n    cors_origins: \"Allowed origins for cross-origin requests (CORS). Each origin must include http:// or https://. The DISCOURSE_ENABLE_CORS env variable must be set to true to enable CORS.\"\n    use_admin_ip_allowlist: \"Admins can only log in if they are at an IP address defined in the Screened IPs list (Admin > Logs > Screened Ips).\"\n    blocked_ip_blocks: \"A list of private IP blocks that should never be crawled by Discourse\"\n    allowed_internal_hosts: \"A list of internal hosts that discourse can safely crawl for oneboxing and other purposes\"\n    allowed_onebox_iframes: \"A list of iframe src domains which are allowed via Onebox embeds. `*` will allow all default Onebox engines.\"\n    allowed_iframes: \"A list of iframe src domain prefixes that discourse can safely allow in posts\"\n    allowed_crawler_user_agents: \"User agents of web crawlers that should be allowed to access the site. WARNING! SETTING THIS WILL DISALLOW ALL CRAWLERS NOT LISTED HERE!\"\n    blocked_crawler_user_agents: \"Unique case insensitive word in the user agent string identifying web crawlers that should not be allowed to access the site. Does not apply if allowlist is defined.\"\n    slow_down_crawler_user_agents: 'User agents of web crawlers that should be rate limited as configured in the \"slow down crawler rate\" setting. Each value must be at least 3 characters long.'\n    slow_down_crawler_rate: \"If slow_down_crawler_user_agents is specified this rate will apply to all the crawlers (number of seconds delay between requests)\"\n    content_security_policy: \"Enable Content-Security-Policy\"\n    content_security_policy_report_only: \"Enable Content-Security-Policy-Report-Only\"\n    content_security_policy_collect_reports: \"Enable CSP violation report collection at /csp_reports\"\n    content_security_policy_frame_ancestors: \"Restrict who can embed this site in iframes via CSP. Control allowed hosts on <a href='%{base_path}/admin/customize/embedding'>Embedding</a>\"\n    content_security_policy_script_src: \"Additional allowlisted script sources. The current host and CDN are included by default. See <a href='https://meta.discourse.org/t/mitigate-xss-attacks-with-content-security-policy/104243' target='_blank'>Mitigate XSS Attacks with Content Security Policy.</a>\"\n    invalidate_inactive_admin_email_after_days: \"Admin accounts that have not visited the site in this number of days will need to re-validate their email address before logging in. Set to 0 to disable.\"\n    top_menu: \"Determine which items appear in the homepage navigation, and in what order. Example latest|new|unread|categories|top|read|posted|bookmarks\"\n    post_menu: \"Determine which items appear on the post menu, and in what order. Example like|edit|flag|delete|share|bookmark|reply\"\n    post_menu_hidden_items: \"The menu items to hide by default in the post menu unless an expansion ellipsis is clicked on.\"\n    share_links: \"Determine which items appear on the share dialog, and in what order.\"\n    allow_username_in_share_links: \"Allow usernames to be included in share links. This is useful to reward badges based on unique visitors.\"\n    site_contact_username: \"A valid staff username to send all automated messages from. If left blank the default System account will be used.\"\n    site_contact_group_name: \"A valid name of a group that gets invited to all automatically sent private messages.\"\n    send_welcome_message: \"Send all new users a welcome message with a quick start guide.\"\n    send_tl1_welcome_message: \"Send new trust level 1 users a welcome message.\"\n    send_tl2_promotion_message: \"Send new trust level 2 users a message about promotion.\"\n    suppress_reply_directly_below: \"Don't show the expandable reply count on a post when there is only a single reply directly below this post.\"\n    suppress_reply_directly_above: \"Don't show the expandable in-reply-to on a post when there is only a single reply directly above this post.\"\n    remove_full_quote: \"Automatically remove quotation if (a) it appears at the start of a post, (b) it is of an entire post, and (c) it is from the immediately preceding post. For details, see <a href='https://meta.discourse.org/t/removal-of-full-quotes-from-direct-replies/106857' target='_blank'>Removal of full quotes from direct replies</a>\"\n    suppress_reply_when_quoting: \"Don't show the expandable in-reply-to on a post when post quotes reply.\"\n    max_reply_history: \"Maximum number of replies to expand when expanding in-reply-to\"\n    topics_per_period_in_top_summary: \"Number of top topics shown in the default top topics summary.\"\n    topics_per_period_in_top_page: \"Number of top topics shown on the expanded 'Show More' top topics.\"\n    redirect_users_to_top_page: \"Automatically redirect new and long absent users to the top page.\"\n    top_page_default_timeframe: \"Default timeframe for the top page.\"\n    moderators_view_emails: \"Allow moderators to view user emails\"\n    prioritize_username_in_ux: \"Show username first on user page, user card and posts (when disabled name is shown first)\"\n    enable_rich_text_paste: \"Enable automatic HTML to Markdown conversion when pasting text into the composer. (Experimental)\"\n    send_old_credential_reminder_days: \"Remind about old credentials after days\"\n\n    email_token_valid_hours: \"Forgot password / activate account tokens are valid for (n) hours.\"\n\n    enable_badges: \"Enable the badge system\"\n    max_favorite_badges: \"Maximum number of badges that user can select\"\n    enable_whispers: \"Allow staff private communication within topics.\"\n    whispers_allowed_groups: \"Allow private communication within topics for members of specified groups.\"\n\n    allow_index_in_robots_txt: \"Specify in robots.txt that this site is allowed to be indexed by web search engines. In exceptional cases you can permanently <a href='%{base_path}/admin/customize/robots'>override robots.txt</a>.\"\n    blocked_email_domains: \"A pipe-delimited list of email domains that users are not allowed to register accounts with. Example: mailinator.com|trashmail.net\"\n    allowed_email_domains: \"A pipe-delimited list of email domains that users MUST register accounts with. WARNING: Users with email domains other than those listed will not be allowed!\"\n    normalize_emails: \"Check if normalized email is unique. Normalized email removes all dots from the username and everything between + and @ symbols.\"\n    auto_approve_email_domains: \"Users with email addresses from this list of domains will be automatically approved.\"\n    hide_email_address_taken: \"Don't inform users that an account exists with a given email address during signup or during forgot password flow. Require full email for 'forgotten password' requests.\"\n    log_out_strict: \"When logging out, log out ALL sessions for the user on all devices\"\n    version_checks: \"Ping the Discourse Hub for version updates and show new version messages on the <a href='%{base_path}/admin' target='_blank'>/admin</a> dashboard\"\n    new_version_emails: \"Send an email to the contact_email address when a new version of Discourse is available.\"\n\n    invite_expiry_days: \"How long user invitation keys are valid, in days\"\n\n    invite_only: \"All new users must be explicitly invited by trusted users or staff. Public registration is disabled.\"\n\n    login_required: \"Require authentication to read content on this site, disallow anonymous access.\"\n\n    min_username_length: \"Minimum username length in characters. WARNING: if any existing users or groups have names shorter than this, your site will break!\"\n    max_username_length: \"Maximum username length in characters. WARNING: if any existing users or groups have names longer than this, your site will break!\"\n    unicode_usernames: \"Allow usernames and group names to contain Unicode letters and numbers.\"\n    allowed_unicode_username_characters: \"Regular expression to allow only some Unicode characters within usernames. ASCII letters and numbers will always be allowed and don't need to be included in the allowlist.\"\n\n    reserved_usernames: \"Usernames for which signup is not allowed. Wildcard symbol * can be used to match any character zero or more times.\"\n\n    min_password_length: \"Minimum password length.\"\n    min_admin_password_length: \"Minimum password length for Admin.\"\n    password_unique_characters: \"Minimum number of unique characters that a password must have.\"\n    block_common_passwords: \"Don't allow passwords that are in the 10,000 most common passwords.\"\n\n    auth_skip_create_confirm: When signing up via external auth, skip the create account popup. Best used alongside auth_overrides_email, auth_overrides_username and auth_overrides_name.\n    auth_immediately: \"Automatically redirect to the external login system without user interaction. This only takes effect when login_required is true, and there is only one external authentication method\"\n\n    enable_discourse_connect: \"Enable sign on via DiscourseConnect (formerly 'Discourse SSO') (WARNING: USERS' EMAIL ADDRESSES *MUST* BE VALIDATED BY THE EXTERNAL SITE!)\"\n    verbose_discourse_connect_logging: \"Log verbose DiscourseConnect related diagnostics to <a href='%{base_path}/logs' target='_blank'>/logs</a>\"\n    enable_discourse_connect_provider: \"Implement DiscourseConnect (formerly 'Discourse SSO') provider protocol at the /session/sso_provider endpoint, requires discourse_connect_provider_secrets to be set\"\n    discourse_connect_url: \"URL of DiscourseConnect endpoint (must include http:// or https://)\"\n    discourse_connect_secret: \"Secret string used to cryptographically authenticate DiscourseConnect information, be sure it is 10 characters or longer\"\n    discourse_connect_provider_secrets: \"A list of domain-secret pairs that are using DiscourseConnect. Make sure DiscourseConnect secret is 10 characters or longer. Wildcard symbol * can be used to match any domain or only a part of it (e.g. *.example.com).\"\n    discourse_connect_overrides_bio: \"Overrides user bio in user profile and prevents user from changing it\"\n    discourse_connect_overrides_groups: \"Synchronize all manual group membership with groups specified in the groups attribute (WARNING: if you do not specify groups all manual group membership will be cleared for user)\"\n    auth_overrides_email: \"Overrides local email with external site email on every login, and prevent local changes. Applies to all authentication providers. (WARNING: discrepancies can occur due to normalization of local emails)\"\n    auth_overrides_username: \"Overrides local username with external site username on every login, and prevent local changes.  Applies to all authentication providers. (WARNING: discrepancies can occur due to differences in username length/requirements)\"\n    auth_overrides_name: \"Overrides local full name with external site full name on every login, and prevent local changes.  Applies to all authentication providers.\"\n    discourse_connect_overrides_avatar: \"Overrides user avatar with value from DiscourseConnect payload. If enabled, users will not be allowed to upload avatars on Discourse.\"\n    discourse_connect_overrides_location: \"Overrides user location with value from DiscourseConnect payload and prevent local changes.\"\n    discourse_connect_overrides_website: \"Overrides user website with value from DiscourseConnect payload and prevent local changes.\"\n    discourse_connect_overrides_profile_background: \"Overrides user profile background with value from DiscourseConnect payload.\"\n    discourse_connect_overrides_card_background: \"Overrides user card background with value from DiscourseConnect payload.\"\n    discourse_connect_not_approved_url: \"Redirect unapproved DiscourseConnect accounts to this URL\"\n    discourse_connect_allows_all_return_paths: \"Do not restrict the domain for return_paths provided by DiscourseConnect (by default return path must be on current site)\"\n\n    enable_local_logins: \"Enable local username and password login based accounts. WARNING: if disabled, you may be unable to log in if you have not previously configured at least one alternate login method.\"\n    enable_local_logins_via_email: \"Allow users to request a one-click login link to be sent to them via email.\"\n    allow_new_registrations: \"Allow new user registrations. Uncheck this to prevent anyone from creating a new account.\"\n    enable_signup_cta: \"Show a notice to returning anonymous users prompting them to sign up for an account.\"\n\n    enable_google_oauth2_logins: \"Enable Google Oauth2 authentication. This is the method of authentication that Google currently supports. Requires key and secret. See <a href='https://meta.discourse.org/t/15858' target='_blank'>Configuring Google login for Discourse</a>.\"\n    google_oauth2_client_id: \"Client ID of your Google application.\"\n    google_oauth2_client_secret: \"Client secret of your Google application.\"\n    google_oauth2_prompt: \"An optional space-delimited list of string values that specifies whether the authorization server prompts the user for reauthentication and consent. See <a href='https://developers.google.com/identity/protocols/OpenIDConnect#prompt' target='_blank'>https://developers.google.com/identity/protocols/OpenIDConnect#prompt</a> for the possible values.\"\n    google_oauth2_hd: \"An optional Google Apps Hosted domain that the sign-in will be limited to. See <a href='https://developers.google.com/identity/protocols/OpenIDConnect#hd-param' target='_blank'>https://developers.google.com/identity/protocols/OpenIDConnect#hd-param</a> for more details.\"\n    google_oauth2_hd_groups: \"(experimental) Retrieve users' Google groups on the hosted domain on authentication. Retrieved Google groups can be used to grant automatic Discourse group membership (see group settings). For more information see https://meta.discourse.org/t/226850\"\n    google_oauth2_hd_groups_service_account_admin_email: \"An email address belonging to a Google Workspace administrator account. Will be used with the service account credentials to fetch group information.\"\n    google_oauth2_hd_groups_service_account_json: \"JSON formatted key information for the Service Account. Will be used to fetch group information.\"\n\n    enable_twitter_logins: \"Enable Twitter authentication, requires twitter_consumer_key and twitter_consumer_secret. See <a href='https://meta.discourse.org/t/13395' target='_blank'>Configuring Twitter login (and rich embeds) for Discourse</a>.\"\n    twitter_consumer_key: \"Consumer key for Twitter authentication, registered at <a href='https://developer.twitter.com/apps' target='_blank'>https://developer.twitter.com/apps</a>\"\n    twitter_consumer_secret: \"Consumer secret for Twitter authentication, registered at <a href='https://developer.twitter.com/apps' target='_blank'>https://developer.twitter.com/apps</a>\"\n\n    enable_facebook_logins: \"Enable Facebook authentication, requires facebook_app_id and facebook_app_secret. See <a href='https://meta.discourse.org/t/13394' target='_blank'>Configuring Facebook login for Discourse</a>.\"\n    facebook_app_id: \"App id for Facebook authentication and sharing, registered at <a href='https://developers.facebook.com/apps/' target='_blank'>https://developers.facebook.com/apps</a>\"\n    facebook_app_secret: \"App secret for Facebook authentication, registered at <a href='https://developers.facebook.com/apps/' target='_blank'>https://developers.facebook.com/apps</a>\"\n\n    enable_github_logins: \"Enable GitHub authentication, requires github_client_id and github_client_secret. See <a href='https://meta.discourse.org/t/13745' target='_blank'>Configuring GitHub login for Discourse</a>.\"\n    github_client_id: \"Client id for GitHub authentication, registered at <a href='https://github.com/settings/developers/' target='_blank'>https://github.com/settings/developers</a>\"\n    github_client_secret: \"Client secret for GitHub authentication, registered at <a href='https://github.com/settings/developers/' target='_blank'>https://github.com/settings/developers</a>\"\n\n    enable_discord_logins: \"Allow users to authenticate using Discord?\"\n    discord_client_id: 'Discord Client ID (need one? visit <a href=\"https://discordapp.com/developers/applications/me\">the Discord developer portal</a>)'\n    discord_secret: \"Discord Secret Key\"\n    discord_trusted_guilds: 'Only allow members of these Discord guilds to log in via Discord. Use the numeric ID for the guild. For more information, check the instructions <a href=\"https://meta.discourse.org/t/configuring-discord-login-for-discourse/127129\">here</a>. Leave blank to allow any guild.'\n\n    enable_backups: \"Allow administrators to create backups of the forum\"\n    allow_restore: \"Allow restore, which can replace ALL site data! Leave disabled unless you plan to restore a backup\"\n    maximum_backups: \"The maximum amount of backups to keep on disk. Older backups are automatically deleted\"\n    automatic_backups_enabled: \"Run automatic backups as defined in backup frequency\"\n    backup_frequency: \"The number of days between backups.\"\n    s3_backup_bucket: \"The remote bucket to hold backups. WARNING: Make sure it is a private bucket.\"\n    s3_endpoint: \"The endpoint can be modified to backup to an S3 compatible service like DigitalOcean Spaces or Minio. WARNING: Leave blank if using AWS S3.\"\n    s3_configure_tombstone_policy: \"Enable automatic deletion policy for tombstone uploads. IMPORTANT: If disabled, no space will be reclaimed after uploads are deleted.\"\n    s3_disable_cleanup: \"Prevent removal of old backups from S3 when there are more backups than the maximum allowed.\"\n    enable_s3_inventory: \"Generate reports and verify uploads using Amazon S3 inventory. IMPORTANT: requires valid S3 credentials (both access key id & secret access key).\"\n    backup_time_of_day: \"Time of day UTC when the backup should occur.\"\n    backup_with_uploads: \"Include uploads in scheduled backups. Disabling this will only backup the database.\"\n    backup_location: \"Location where backups are stored. IMPORTANT: S3 requires valid S3 credentials entered in Files settings.\"\n    backup_gzip_compression_level_for_uploads: \"Gzip compression level used for compressing uploads.\"\n    include_thumbnails_in_backups: \"Include generated thumbnails in backups. Disabling this will make backups smaller, but requires a rebake of all posts after a restore.\"\n\n    active_user_rate_limit_secs: \"How frequently we update the 'last_seen_at' field, in seconds\"\n    verbose_localization: \"Show extended localization tips in the UI\"\n    previous_visit_timeout_hours: \"How long a visit lasts before we consider it the 'previous' visit, in hours\"\n\n    top_topics_formula_log_views_multiplier: \"value of log views multiplier (n) in top topics formula: `log(views_count) * (n) + op_likes_count * 0.5 + LEAST(likes_count / posts_count, 3) + 10 + log(posts_count)`\"\n    top_topics_formula_first_post_likes_multiplier: \"value of first post likes multiplier (n) in top topics formula: `log(views_count) * 2 + op_likes_count * (n) + LEAST(likes_count / posts_count, 3) + 10 + log(posts_count)`\"\n    top_topics_formula_least_likes_per_post_multiplier: \"value of least likes per post multiplier (n) in top topics formula: `log(views_count) * 2 + op_likes_count * 0.5 + LEAST(likes_count / posts_count, (n)) + 10 + log(posts_count)`\"\n\n    enable_safe_mode: \"Allow users to enter safe mode to debug plugins.\"\n    enable_experimental_sidebar_hamburger: \"Allows experimental sidebar and user hamburger dropdown menu to be enabled.\"\n    enable_sidebar: \"Enables experimental sidebar.\"\n\n    rate_limit_create_topic: \"After creating a topic, users must wait (n) seconds before creating another topic.\"\n    rate_limit_create_post: \"After posting, users must wait (n) seconds before creating another post.\"\n    rate_limit_new_user_create_topic: \"After creating a topic, new users must wait (n) seconds before creating another topic.\"\n    rate_limit_new_user_create_post: \"After posting, new users must wait (n) seconds before creating another post.\"\n\n    max_likes_per_day: \"Maximum number of likes per user per day.\"\n    max_flags_per_day: \"Maximum number of flags per user per day.\"\n    max_bookmarks_per_day: \"Maximum number of bookmarks per user per day.\"\n    max_edits_per_day: \"Maximum number of edits per user per day.\"\n    max_topics_per_day: \"Maximum number of topics a user can create per day.\"\n    max_personal_messages_per_day: \"Maximum number of new personal message topics a user can create per day.\"\n    max_invites_per_day: \"Maximum number of invites a user can send per day.\"\n    max_topic_invitations_per_day: \"Maximum number of topic invitations a user can send per day.\"\n    max_topic_invitations_per_minute: \"Maximum number of topic invitations a user can send per minute.\"\n\n    max_logins_per_ip_per_hour: \"Maximum number of logins allowed per IP address per hour\"\n    max_logins_per_ip_per_minute: \"Maximum number of logins allowed per IP address per minute\"\n\n    max_post_deletions_per_minute: \"Maximum number of posts a user can delete per minute. Set to 0 to disable post deletions.\"\n    max_post_deletions_per_day: \"Maximum number of posts a user can delete per day. Set to 0 to disable post deletions.\"\n\n    invite_link_max_redemptions_limit: \"Maximum redemptions allowed for invite links can't be more than this value.\"\n    invite_link_max_redemptions_limit_users: \"Maximum redemptions allowed for invite links generated by regular users can't be more than this value.\"\n\n    alert_admins_if_errors_per_minute: \"Number of errors per minute in order to trigger an admin alert. A value of 0 disables this feature. NOTE: requires restart.\"\n    alert_admins_if_errors_per_hour: \"Number of errors per hour in order to trigger an admin alert. A value of 0 disables this feature. NOTE: requires restart.\"\n\n    categories_topics: \"Number of topics to show in /categories page. If set to 0, it will automatically try to find a value to keep the two columns symmetrical (categories and topics).\"\n    suggested_topics: \"Number of suggested topics shown at the bottom of a topic.\"\n    limit_suggested_to_category: \"Only show topics from the current category in suggested topics.\"\n    suggested_topics_max_days_old: \"Suggested topics should not be more than n days old.\"\n    suggested_topics_unread_max_days_old: \"Suggested unread topics should not be more than n days old.\"\n\n    clean_up_uploads: \"Remove orphan unreferenced uploads to prevent illegal hosting. WARNING: you may want to back up of your /uploads directory before enabling this setting.\"\n    clean_orphan_uploads_grace_period_hours: \"Grace period (in hours) before an orphan upload is removed.\"\n    purge_deleted_uploads_grace_period_days: \"Grace period (in days) before a deleted upload is erased.\"\n    purge_unactivated_users_grace_period_days: \"Grace period (in days) before a user who has not activated their account is deleted. Set to 0 to never purge unactivated users.\"\n    enable_s3_uploads: \"Place uploads on Amazon S3 storage. IMPORTANT: requires valid S3 credentials (both access key id & secret access key).\"\n    s3_use_iam_profile: 'Use an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html\">AWS EC2 instance profile</a> to grant access to the S3 bucket. NOTE: enabling this requires Discourse to be running in an appropriately-configured EC2 instance, and overrides the \"s3 access key id\" and \"s3 secret access key\" settings.'\n    s3_upload_bucket: \"The Amazon S3 bucket name that files will be uploaded into. WARNING: must be lowercase, no periods, no underscores.\"\n    s3_access_key_id: \"The Amazon S3 access key id that will be used to upload images, attachments, and backups.\"\n    s3_secret_access_key: \"The Amazon S3 secret access key that will be used to upload images, attachments, and backups.\"\n    s3_region: \"The Amazon S3 region name that will be used to upload images and backups.\"\n    s3_cdn_url: \"The CDN URL to use for all s3 assets (for example: https://cdn.somewhere.com). WARNING: after changing this setting you must rebake all old posts.\"\n\n    avatar_sizes: \"List of automatically generated avatar sizes.\"\n\n    external_system_avatars_enabled: \"Use external system avatars service.\"\n    external_system_avatars_url: \"URL of the external system avatars service. Allowed substitutions are {username} {first_letter} {color} {size}\"\n    external_emoji_url: \"URL of the external service for emoji images. Leave blank to disable.\"\n    use_site_small_logo_as_system_avatar: \"Use the site's small logo instead of the system user's avatar. Requires the logo to be present.\"\n    restrict_letter_avatar_colors: \"A list of 6-digit hexadecimal color values to be used for letter avatar background.\"\n    enable_listing_suspended_users_on_search: \"Enable regular users to find suspended users.\"\n    selectable_avatars_mode: \"Allow users to select an avatar from the selectable_avatars list and limit custom avatar uploads to the selected trust level.\"\n    selectable_avatars: \"List of avatars users can choose from.\"\n\n    allow_all_attachments_for_group_messages: \"Allow all email attachments for group messages.\"\n\n    png_to_jpg_quality: \"Quality of the converted JPG file (1 is lowest quality, 99 is best quality, 100 to disable).\"\n    recompress_original_jpg_quality: \"Quality of uploaded image files (1 is lowest quality, 99 is best quality, 100 to disable).\"\n    image_preview_jpg_quality: \"Quality of resized image files (1 is lowest quality, 99 is best quality, 100 to disable).\"\n\n    allow_staff_to_upload_any_file_in_pm: \"Allow staff members to upload any files in PM.\"\n\n    strip_image_metadata: \"Strip image metadata.\"\n\n    composer_media_optimization_image_enabled: \"Enables client-side media optimization of uploaded image files.\"\n    composer_media_optimization_image_bytes_optimization_threshold: \"Minimum image file size to trigger client-side optimization\"\n    composer_media_optimization_image_resize_dimensions_threshold: \"Minimum image width to trigger client-side resize\"\n    composer_media_optimization_image_resize_width_target: \"Images with widths larger than `composer_media_optimization_image_dimensions_resize_threshold` will be resized to this width. Must be >= than `composer_media_optimization_image_dimensions_resize_threshold`.\"\n    composer_media_optimization_image_encode_quality: \"JPEG encode quality used in the re-encode process.\"\n\n    min_ratio_to_crop: \"Ratio used to crop tall images. Enter the result of width / height.\"\n\n    simultaneous_uploads: \"Maximum number of files that can be dragged & dropped in the composer\"\n\n    default_invitee_trust_level: \"Default trust level (0-4) for invited users.\"\n    default_trust_level: \"Default trust level (0-4) for all new users. WARNING! Changing this will put you at serious risk for spam.\"\n\n    tl1_requires_topics_entered: \"How many topics a new user must enter before promotion to trust level 1.\"\n    tl1_requires_read_posts: \"How many posts a new user must read before promotion to trust level 1.\"\n    tl1_requires_time_spent_mins: \"How many minutes a new user must read posts before promotion to trust level 1.\"\n\n    tl2_requires_topics_entered: \"How many topics a user must enter before promotion to trust level 2.\"\n    tl2_requires_read_posts: \"How many posts a user must read before promotion to trust level 2.\"\n    tl2_requires_time_spent_mins: \"How many minutes a user must read posts before promotion to trust level 2.\"\n    tl2_requires_days_visited: \"How many days a user must visit the site before promotion to trust level 2.\"\n    tl2_requires_likes_received: \"How many likes a user must receive before promotion to trust level 2.\"\n    tl2_requires_likes_given: \"How many likes a user must cast before promotion to trust level 2.\"\n    tl2_requires_topic_reply_count: \"How many topics user must reply to before promotion to trust level 2.\"\n\n    tl3_time_period: \"Trust Level 3 requirements time period (in days)\"\n    tl3_requires_days_visited: \"Minimum number of days that a user needs to have visited the site in the last (tl3 time period) days to qualify for promotion to trust level 3. Set higher than tl3 time period to disable promotions to tl3. (0 or higher)\"\n    tl3_requires_topics_replied_to: \"Minimum number of topics a user needs to have replied to in the last (tl3 time period) days to qualify for promotion to trust level 3. (0 or higher)\"\n    tl3_requires_topics_viewed: \"The percentage of topics created in the last (tl3 time period) days that a user needs to have viewed to qualify for promotion to trust level 3. (0 to 100)\"\n    tl3_requires_topics_viewed_cap: \"The maximum required number of topics viewed in the last (tl3 time period) days.\"\n    tl3_requires_posts_read: \"The percentage of posts created in the last (tl3 time period) days that a user needs to have viewed to qualify for promotion to trust level 3. (0 to 100)\"\n    tl3_requires_posts_read_cap: \"The maximum required number of posts read in the last (tl3 time period) days.\"\n    tl3_requires_topics_viewed_all_time: \"The minimum total number of topics a user must have viewed to qualify for trust level 3.\"\n    tl3_requires_posts_read_all_time: \"The minimum total number of posts a user must have read to qualify for trust level 3.\"\n    tl3_requires_max_flagged: \"User must not have had more than x posts flagged by x different users in the last (tl3 time period) days to qualify for promotion to trust level 3, where x is this setting's value. (0 or higher)\"\n    tl3_promotion_min_duration: \"The minimum number of days that a promotion to trust level 3 lasts before a user can be demoted back to trust level 2.\"\n    tl3_requires_likes_given: \"The minimum number of likes that must be given in the last (tl3 time period) days to qualify for promotion to trust level 3.\"\n    tl3_requires_likes_received: \"The minimum number of likes that must be received in the last (tl3 time period) days to qualify for promotion to trust level 3.\"\n    tl3_links_no_follow: \"Do not remove rel=nofollow from links posted by trust level 3 users.\"\n    trusted_users_can_edit_others: \"Allow users with high trust levels to edit content from other users\"\n\n    min_trust_to_create_topic: \"The minimum trust level required to create a new topic.\"\n    allow_flagging_staff: \"If enabled, users can flag posts from staff accounts.\"\n\n    min_trust_to_edit_wiki_post: \"The minimum trust level required to edit post marked as wiki.\"\n\n    min_trust_to_edit_post: \"The minimum trust level required to edit posts.\"\n\n    min_trust_to_allow_self_wiki: \"The minimum trust level required to make user's own post wiki.\"\n\n    min_trust_to_send_messages: \"DEPRECATED, use the 'personal message enabled groups' setting instead. The minimum trust level required to create new personal messages.\"\n    min_trust_to_send_email_messages: \"The minimum trust level required to send personal messages via email.\"\n    min_trust_to_flag_posts: \"The minimum trust level required to flag posts\"\n    min_trust_to_post_links: \"The minimum trust level required to include links in posts\"\n    min_trust_to_post_embedded_media: \"The minimum trust level required to embed media items in a post\"\n    min_trust_level_to_allow_profile_background: \"The minimum trust level required to upload a profile background\"\n    min_trust_level_to_allow_user_card_background: \"The minimum trust level required to upload a user card background\"\n    min_trust_level_to_allow_invite: \"The minimum trust level required to invite users\"\n    min_trust_level_to_allow_ignore: \"The minimum trust level required to ignore users\"\n    allowed_link_domains: \"Domains that users may link to even if they don't have the appropriate trust level to post links\"\n\n    newuser_max_links: \"How many links a new user can add to a post.\"\n    newuser_max_embedded_media: \"How many embedded media items a new user can add to a post.\"\n    newuser_max_attachments: \"How many attachments a new user can add to a post.\"\n    newuser_max_mentions_per_post: \"Maximum number of @name notifications a new user can use in a post.\"\n    newuser_max_replies_per_topic: \"Maximum number of replies a new user can make in a single topic until someone replies to them.\"\n    max_mentions_per_post: \"Maximum number of @name notifications anyone can use in a post.\"\n    max_users_notified_per_group_mention: \"Maximum number of users that may receive a notification if a group is mentioned (if threshold is met no notifications will be raised)\"\n    enable_mentions: \"Allow users to mention other users.\"\n    here_mention: \"Name used for a @mention to allow privileged users to notify up to 'max_here_mentioned' people participating in the topic. Must not be an existing username.\"\n    max_here_mentioned: \"Maximum number of mentioned people by @here.\"\n    min_trust_level_for_here_mention: \"The minimum trust level allowed to mention @here.\"\n\n    create_thumbnails: \"Create thumbnails and lightbox images that are too large to fit in a post.\"\n\n    email_time_window_mins: \"Wait (n) minutes before sending any notification emails, to give users a chance to edit and finalize their posts.\"\n    personal_email_time_window_seconds: \"Wait (n) seconds before sending any personal message notification emails, to give users a chance to edit and finalize their messages.\"\n    email_posts_context: \"How many prior replies to include as context in notification emails.\"\n    flush_timings_secs: \"How frequently we flush timing data to the server, in seconds.\"\n    title_max_word_length: \"The maximum allowed word length, in characters, in a topic title.\"\n    title_min_entropy: \"The minimum entropy (unique characters, non-english count for more) required for a topic title.\"\n    body_min_entropy: \"The minimum entropy (unique characters, non-english count for more) required for a post body.\"\n    allow_uppercase_posts: \"Allow all caps in a topic title or a post body.\"\n    max_consecutive_replies: \"Number of posts a user has to make in a row in a topic before being prevented from adding another reply.\"\n    enable_filtered_replies_view: '\"(n) replies\" button collapses all other posts and only shows the current post and its replies.'\n\n    title_fancy_entities: \"Convert common ASCII characters to fancy HTML entities in topic titles, ala SmartyPants <a href='https://daringfireball.net/projects/smartypants/' target='_blank'>https://daringfireball.net/projects/smartypants/</a>\"\n\n    min_title_similar_length: \"The minimum length of a title before it will be checked for similar topics.\"\n\n    desktop_category_page_style: \"Visual style for the /categories page.\"\n    category_colors: \"A list of hexadecimal color values allowed for categories.\"\n    category_style: \"Visual style for category badges.\"\n    default_dark_mode_color_scheme_id: \"The color scheme used when in dark mode.\"\n    dark_mode_none: \"None\"\n\n    max_image_size_kb: \"The maximum image upload size in kB. This must be configured in nginx (client_max_body_size) / apache or proxy as well. Images larger than this and smaller than client_max_body_size will be resized to fit on upload.\"\n    max_attachment_size_kb: \"The maximum attachment files upload size in kB. This must be configured in nginx (client_max_body_size) / apache or proxy as well.\"\n    authorized_extensions: \"A list of file extensions allowed for upload (use '*' to enable all file types)\"\n    authorized_extensions_for_staff: \"A list of file extensions allowed for upload for staff users in addition to the list defined in the `authorized_extensions` site setting. (use '*' to enable all file types)\"\n    theme_authorized_extensions: \"A list of file extensions allowed for theme uploads (use '*' to enable all file types)\"\n    max_similar_results: \"How many similar topics to show above the editor when composing a new topic. Comparison is based on title and body.\"\n\n    max_image_megapixels: \"Maximum number of megapixels allowed for an image. Images with a higher number of megapixels will be rejected.\"\n\n    title_prettify: \"Prevent common title typos and errors, including all caps, lowercase first character, multiple ! and ?, extra . at end, etc.\"\n    title_remove_extraneous_space: \"Remove leading whitespaces in front of the end punctuation.\"\n\n    automatic_topic_heat_values: 'Automatically update the \"topic views heat\" and \"topic post like heat\" settings based on site activity.'\n\n    topic_views_heat_low: \"After this many views, the views field is slightly highlighted.\"\n    topic_views_heat_medium: \"After this many views, the views field is moderately highlighted.\"\n    topic_views_heat_high: \"After this many views, the views field is strongly highlighted.\"\n\n    cold_age_days_low: \"After this many days of conversation, the last activity date is slightly dimmed.\"\n    cold_age_days_medium: \"After this many days of conversation, the last activity date is moderately dimmed.\"\n    cold_age_days_high: \"After this many days of conversation, the last activity date is strongly dimmed.\"\n\n    history_hours_low: \"A post edited within this many hours has the edit indicator slightly highlighted\"\n    history_hours_medium: \"A post edited within this many hours has the edit indicator moderately highlighted.\"\n    history_hours_high: \"A post edited within this many hours has the edit indicator strongly highlighted.\"\n\n    topic_post_like_heat_low: \"After the likes:post ratio exceeds this ratio, the post count field is slightly highlighted.\"\n    topic_post_like_heat_medium: \"After the likes:post ratio exceeds this ratio, the post count field is moderately highlighted.\"\n    topic_post_like_heat_high: \"After the likes:post ratio exceeds this ratio, the post count field is strongly highlighted.\"\n\n    faq_url: \"If you have a FAQ hosted elsewhere that you want to use, provide the full URL here.\"\n    tos_url: \"If you have a Terms of Service document hosted elsewhere that you want to use, provide the full URL here.\"\n    privacy_policy_url: \"If you have a Privacy Policy document hosted elsewhere that you want to use, provide the full URL here.\"\n    log_anonymizer_details: \"Whether to keep a user's details in the log after being anonymized. When complying to GDPR you'll need to turn this off.\"\n\n    newuser_spam_host_threshold: \"How many times a new user can post a link to the same host within their `newuser_spam_host_threshold` posts before being considered spam.\"\n\n    allowed_spam_host_domains: \"A list of domains excluded from spam host testing. New users will never be restricted from creating posts with links to these domains.\"\n    staff_like_weight: \"How much weight to give staff likes (non-staff likes have a weight of 1.)\"\n    topic_view_duration_hours: \"Count a new topic view once per IP/User every N hours\"\n    user_profile_view_duration_hours: \"Count a new user profile view once per IP/User every N hours\"\n\n    levenshtein_distance_spammer_emails: \"When matching spammer emails, number of characters difference that will still allow a fuzzy match.\"\n    max_new_accounts_per_registration_ip: \"If there are already (n) trust level 0 accounts from this IP (and none is a staff member or at TL2 or higher), stop accepting new signups from that IP. Set to 0 to disable the limit.\"\n    min_ban_entries_for_roll_up: \"When clicking the Roll up button, will create a new subnet ban entry if there are at least (N) entries.\"\n\n    max_age_unmatched_emails: \"Delete unmatched screened email entries after (N) days.\"\n    max_age_unmatched_ips: \"Delete unmatched screened IP entries after (N) days.\"\n\n    num_flaggers_to_close_topic: \"Minimum number of unique flaggers that is required to automatically pause a topic for intervention\"\n    num_hours_to_close_topic: \"Number of hours to pause a topic for intervention.\"\n\n    auto_respond_to_flag_actions: \"Enable automatic reply when disposing a flag.\"\n    min_first_post_typing_time: \"Minimum amount of time in milliseconds a user must type during first post, if threshold is not met post will automatically enter the needs approval queue. Set to 0 to disable (not recommended)\"\n    auto_silence_fast_typers_on_first_post: \"Automatically silence users that do not meet min_first_post_typing_time\"\n    auto_silence_fast_typers_max_trust_level: \"Maximum trust level to auto silence fast typers\"\n    auto_silence_first_post_regex: \"Case insensitive regex that if passed will cause first post by user to be silenced and sent to approval queue. Example: raging|a[bc]a , will cause all posts containing raging or aba or aca to be silenced on first. Only applies to first post. DEPRECATED: Use Silence Watched Words instead.\"\n    reviewable_claiming: \"Does reviewable content need to be claimed before it can be acted upon?\"\n    reviewable_default_topics: \"Show reviewable content grouped by topic by default\"\n    reviewable_default_visibility: \"Don't show reviewable items unless they meet this priority\"\n    reviewable_low_priority_threshold: \"The priority filter hides reviewable items that don't meet this score unless the '(any)' filter is used.\"\n    high_trust_flaggers_auto_hide_posts: \"New user posts are automatically hidden after being flagged as spam by a TL3+ user\"\n    cooldown_hours_until_reflag: \"How much time users will have to wait until they are able to reflag a post\"\n    slow_mode_prevents_editing: \"Does 'Slow Mode' prevent editing, after editing_grace_period?\"\n\n    reply_by_email_enabled: \"Enable replying to topics via email.\"\n    reply_by_email_address: \"Template for reply by email incoming email address, for example: %%{reply_key}@reply.example.com or replies+%%{reply_key}@example.com\"\n    alternative_reply_by_email_addresses: \"List of alternative templates for reply by email incoming email addresses. Example: %%{reply_key}@reply.example.com|replies+%%{reply_key}@example.com\"\n    incoming_email_prefer_html: \"Use HTML instead of text for incoming email.\"\n    strip_incoming_email_lines: \"Remove leading and trailing whitespaces from each line of incoming emails.\"\n\n    disable_emails: \"Prevent Discourse from sending any kind of emails. Select 'yes' to disable emails for all users. Select 'non-staff' to disable emails for non-staff users only.\"\n\n    strip_images_from_short_emails: \"Strip images from emails having size less than 2800 Bytes\"\n    short_email_length: \"Short email length in Bytes\"\n    display_name_on_email_from: \"Display full names on email from fields\"\n\n    unsubscribe_via_email: \"Allow users to unsubscribe from emails by sending an email with 'unsubscribe' in the subject or body\"\n    unsubscribe_via_email_footer: \"Attach an unsubscribe via email mailto: link to the footer of sent emails\"\n\n    delete_email_logs_after_days: \"Delete email logs after (N) days. 0 to keep indefinitely\"\n    disallow_reply_by_email_after_days: \"Disallow reply by email after (N) days. 0 to keep indefinitely\"\n    max_emails_per_day_per_user: \"Maximum number of emails to send users per day. 0 to disable the limit\"\n    enable_staged_users: \"Automatically create staged users when processing incoming emails.\"\n    maximum_staged_users_per_email: \"Maximum number of staged users created when processing an incoming email.\"\n    maximum_recipients_per_new_group_email: \"Block incoming emails with too many recipients.\"\n    auto_generated_allowlist: \"List of email addresses that won't be checked for auto-generated content. Example: foo@bar.com|discourse@bar.com\"\n    block_auto_generated_emails: \"Block incoming emails identified as being auto generated.\"\n    ignore_by_title: \"Ignore incoming emails based on their title.\"\n    mailgun_api_key: \"Mailgun Secret API key used to verify webhook messages.\"\n\n    soft_bounce_score: \"Bounce score added to the user when a temporary bounce happens.\"\n    hard_bounce_score: \"Bounce score added to the user when a permanent bounce happens.\"\n    bounce_score_threshold: \"Max bounce score before we will stop emailing a user.\"\n    reset_bounce_score_after_days: \"Automatically reset bounce score after X days.\"\n\n    blocked_attachment_content_types: \"List of keywords used to blocklist attachments based on the content type.\"\n    blocked_attachment_filenames: \"List of keywords used to blocklist attachments based on the filename.\"\n\n    forwarded_emails_behaviour: \"How to treat a forwarded email to Discourse\"\n    always_show_trimmed_content: \"Always show trimmed part of incoming emails. WARNING: might reveal email addresses.\"\n    trim_incoming_emails: \"Trim part of the incoming emails that isn't relevant.\"\n    private_email: \"Don't include content from posts or topics in email title or email body. NOTE: also disables digest emails.\"\n    email_total_attachment_size_limit_kb: \"Max total size of files attached to outgoing emails in kB. Set to 0 to disable sending of attachments.\"\n    post_excerpts_in_emails: \"In notification emails, always send excerpts instead of full posts\"\n    raw_email_max_length: \"How many characters should be stored for incoming email.\"\n    raw_rejected_email_max_length: \"How many characters should be stored for rejected incoming email.\"\n    delete_rejected_email_after_days: \"Delete rejected emails older than (n) days.\"\n    require_change_email_confirmation: \"Require non-staff users to confirm their old email address before changing it. Does not apply to staff users, they always need to confirm their old email address.\"\n\n    manual_polling_enabled: \"Push emails using the API for email replies.\"\n    pop3_polling_enabled: \"Poll via POP3 for email replies.\"\n    pop3_polling_ssl: \"Use SSL while connecting to the POP3 server. (Recommended)\"\n    pop3_polling_openssl_verify: \"Verify TLS server certificate (Default: enabled)\"\n    pop3_polling_period_mins: \"The period in minutes between checking the POP3 account for email. NOTE: requires restart.\"\n    pop3_polling_port: \"The port to poll a POP3 account on.\"\n    pop3_polling_host: \"The host to poll for email via POP3.\"\n    pop3_polling_username: \"The username for the POP3 account to poll for email.\"\n    pop3_polling_password: \"The password for the POP3 account to poll for email.\"\n    pop3_polling_delete_from_server: \"Delete emails from server. NOTE: If you disable this you should manually clean your mail inbox\"\n    log_mail_processing_failures: \"Log all email processing failures to <a href='%{base_path}/logs' target='_blank'>/logs</a>\"\n    email_in: 'Allow users to post new topics via email (requires manual or pop3 polling). Configure the addresses in the \"Settings\" tab of each category.'\n    email_in_min_trust: \"The minimum trust level a user needs to have to be allowed to post new topics via email.\"\n    email_in_authserv_id: \"The identifier of the service doing authentication checks on incoming emails. See <a href='https://meta.discourse.org/t/134358'>https://meta.discourse.org/t/134358</a> for instructions on how to configure this.\"\n    email_in_spam_header: \"The email header to detect spam.\"\n\n    enable_imap: \"Enable IMAP for synchronizing group messages.\"\n    enable_imap_write: \"Enable two-way IMAP synchronization. If disabled, all write-operations on IMAP accounts are disabled.\"\n    enable_imap_idle: \"Use IMAP IDLE mechanism to wait for new emails.\"\n    enable_smtp: \"Enable SMTP for sending notifications for group messages.\"\n\n    imap_polling_period_mins: \"The period in minutes between checking the IMAP accounts for emails.\"\n    imap_polling_old_emails: \"The maximum number of old emails (processed) to be updated every time an IMAP box is polled (0 for all).\"\n    imap_polling_new_emails: \"The maximum number of new emails (unprocessed) to be updated every time an IMAP box is polled .\"\n    imap_batch_import_email: \"The minimum number of new emails that trigger import mode (disables notifications for imported posts).\"\n\n    email_prefix: \"The [label] used in the subject of emails. It will default to 'title' if not set.\"\n    email_site_title: \"The title of the site used as the sender of emails from the site. Default to 'title' if not set. If your 'title' contains characters that are not allowed in email sender strings, use this setting.\"\n\n    find_related_post_with_key: \"Only use the 'reply key' to find the replied-to post. WARNING: disabling this allows user impersonation based on email address.\"\n\n    minimum_topics_similar: \"How many topics need to exist before similar topics are presented when composing new topics.\"\n\n    relative_date_duration: \"Number of days after posting where post dates will be shown as relative (7d) instead of absolute (20 Feb).\"\n    delete_user_max_post_age: \"Don't allow deleting users whose first post is older than (x) days.\"\n    delete_all_posts_max: \"The maximum number of posts that can be deleted at once with the Delete All Posts button. If a user has more than this many posts, the posts cannot all be deleted at once and the user can't be deleted.\"\n    delete_user_self_max_post_count: \"The maximum number of posts a user can have while allowing self-service account deletion. Set to -1 to disable self-service account deletion.\"\n    username_change_period: \"The maximum number of days after registration that accounts can change their username (0 to disallow username change).\"\n    email_editable: \"Allow users to change their e-mail address after registration.\"\n    logout_redirect: \"Location to redirect browser to after logout (eg: https://example.com/logout)\"\n\n    allow_uploaded_avatars: \"Allow users to upload custom profile pictures.\"\n    default_avatars: \"URLs to avatars that will be used by default for new users until they change them.\"\n    automatically_download_gravatars: \"Download Gravatars for users upon account creation or email change.\"\n    digest_topics: \"The maximum number of popular topics to display in the email summary.\"\n    digest_posts: \"The maximum number of popular posts to display in the email summary.\"\n    digest_other_topics: \"The maximum number of topics to show in the 'New in topics and categories you follow' section of the email summary.\"\n    digest_min_excerpt_length: \"Minimum post excerpt in the email summary, in characters.\"\n    suppress_digest_email_after_days: \"Suppress summary emails for users not seen on the site for more than (n) days.\"\n    digest_suppress_categories: \"Suppress these categories from summary emails.\"\n    disable_digest_emails: \"Disable summary emails for all users.\"\n    apply_custom_styles_to_digest: \"Custom email template and css are applied to summary emails.\"\n    email_accent_bg_color: \"The accent color to be used as the background of some elements in HTML emails. Enter a color name ('red') or hex value ('#FF0000').\"\n    email_accent_fg_color: \"The color of text rendered on the email bg color in HTML emails. Enter a color name ('white') or hex value ('#FFFFFF').\"\n    email_link_color: \"The color of links in HTML emails. Enter a color name ('blue') or hex value ('#0000FF').\"\n\n    detect_custom_avatars: \"Whether or not to check that users have uploaded custom profile pictures.\"\n    max_daily_gravatar_crawls: \"Maximum number of times Discourse will check Gravatar for custom avatars in a day\"\n    public_user_custom_fields: \"A list of user custom fields that can be retrieved with the API.\"\n    staff_user_custom_fields: \"A list of user custom fields that can be retrieved for staff members with the API.\"\n    enable_user_directory: \"Provide a directory of users for browsing\"\n    enable_group_directory: \"Provide a directory of groups for browsing\"\n    enable_category_group_moderation: \"Allow groups to moderate content in specific categories\"\n    group_in_subject: \"Set %%{optional_pm} in email subject to name of first group in PM, see: <a href='https://meta.discourse.org/t/customize-specific-email-templates/88323' target='_blank'>Customize subject format for standard emails</a>\"\n    allow_anonymous_posting: \"Allow users to switch to anonymous mode\"\n    anonymous_posting_min_trust_level: \"Minimum trust level required to enable anonymous posting\"\n    anonymous_account_duration_minutes: \"To protect anonymity create a new anonymous account every N minutes for each user. Example: if set to 600, as soon as 600 minutes elapse from last post AND user switches to anon, a new anonymous account is created.\"\n\n    hide_user_profiles_from_public: \"Disable user cards, user profiles and user directory for anonymous users.\"\n    allow_users_to_hide_profile: \"Allow users to hide their profile and presence\"\n\n    allow_featured_topic_on_user_profiles: \"Allow users to feature a link to a topic on their user card and profile.\"\n\n    show_inactive_accounts: \"Allow logged in users to browse profiles of inactive accounts.\"\n\n    hide_suspension_reasons: \"Don't display suspension reasons publically on user profiles.\"\n\n    log_personal_messages_views: \"Log personal message views by Admin for other users/groups.\"\n\n    ignored_users_count_message_threshold: \"Notify moderators if a particular user is ignored by this many other users.\"\n\n    ignored_users_message_gap_days: \"How long to wait before notifying moderators again about a user who has been ignored by many others.\"\n\n    clean_up_inactive_users_after_days: \"Number of days before an inactive user (trust level 0 without any posts) is removed. To disable clean up set to 0.\"\n    clean_up_unused_staged_users_after_days: \"Number of days before an unused staged user (without any posts) is removed. To disable clean up set to 0.\"\n\n    user_selected_primary_groups: \"Allow users to set their own primary group\"\n\n    max_notifications_per_user: \"Maximum amount of notifications per user, if this number is exceeded old notifications will be deleted. Enforced weekly. Set to 0 to disable\"\n\n    allowed_user_website_domains: \"User website will be verified against these domains. Pipe-delimited list.\"\n\n    allow_profile_backgrounds: \"Allow users to upload profile backgrounds.\"\n\n    sequential_replies_threshold: \"Number of posts a user has to make in a row in a topic before being reminded about too many sequential replies.\"\n\n    get_a_room_threshold: \"Number of posts a user has to make to the same person in the same topic before being warned.\"\n\n    enable_mobile_theme: \"Mobile devices use a mobile-friendly theme, with the ability to switch to the full site. Disable this if you want to use a custom stylesheet that is fully responsive.\"\n\n    dominating_topic_minimum_percent: \"What percentage of posts a user has to make in a topic before being reminded about overly dominating a topic.\"\n\n    disable_avatar_education_message: \"Disable education message for changing avatar.\"\n\n    pm_warn_user_last_seen_months_ago: \"When creating a new PM warn users when target recepient has not been seen more than n months ago.\"\n\n    suppress_uncategorized_badge: \"Don't show the badge for uncategorized topics in topic lists.\"\n\n    header_dropdown_category_count: \"How many categories can be displayed in the header dropdown menu.\"\n\n    permalink_normalizations: \"Apply the following regex before matching permalinks, for example: /(topic.*)\\\\?.*/\\\\1 will strip query strings from topic routes. Format is regex+string use \\\\1 etc. to access captures\"\n\n    global_notice: \"Display an URGENT, EMERGENCY, non-dismissible global banner notice to all visitors, change to blank to hide it (HTML allowed).\"\n\n    disable_system_edit_notifications: \"Disables edit notifications by the system user when 'download_remote_images_to_local' is active.\"\n\n    disable_category_edit_notifications: \"Disable category edit notifications on topics.\"\n\n    disable_tags_edit_notifications: \"Disable tags edit notifications on topics.\"\n\n    notification_consolidation_threshold: \"Number of liked or membership request notifications received before the notifications are consolidated into a single one. Set to 0 to disable.\"\n\n    likes_notification_consolidation_window_mins: \"Duration in minutes where liked notifications are consolidated into a single notification once the threshold has been reached. The threshold can be configured via `SiteSetting.notification_consolidation_threshold`.\"\n\n    automatically_unpin_topics: \"Automatically unpin topics when the user reaches the bottom.\"\n\n    read_time_word_count: \"Word count per minute for calculating estimated reading time.\"\n\n    topic_page_title_includes_category: \"Topic page <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title' target='_blank'>title tag</a> includes the category name.\"\n\n    native_app_install_banner_ios: \"Displays DiscourseHub app banner on iOS devices to regular users (trust level 1 and up).\"\n\n    native_app_install_banner_android: \"Displays DiscourseHub app banner on Android devices to regular users (trust level 1 and up).\"\n\n    app_association_android: \"Contents of <a href='%{base_path}/.well-known/assetlinks.json'>.well-known/assetlinks.json</a> endpoint, used for Google's Digital Asset Links API.\"\n    app_association_ios: \"Contents of <a href='%{base_path}/apple-app-site-association'>apple-app-site-association</a> endpoint, used to create Universal Links between this site and iOS apps.\"\n\n    share_anonymized_statistics: \"Share anonymized usage statistics.\"\n\n    auto_handle_queued_age: \"Automatically handle records that are waiting to be reviewed after this many days. Flags will be ignored. Queued posts and users will be rejected. Set to 0 to disable this feature.\"\n    penalty_step_hours: \"Default penalties for silencing or suspending users in hours. First offense defaults to the first value, second offense defaults to the second value, etc.\"\n    svg_icon_subset: \"Add additional FontAwesome 5 icons that you would like to include in your assets. Use prefix 'fa-' for solid icons, 'far-' for regular icons and 'fab-' for brand icons.\"\n    max_prints_per_hour_per_user: \"Maximum number of /print page impressions (set to 0 to disable)\"\n\n    full_name_required: \"Full name is a required field of a user's profile.\"\n    enable_names: \"Show the user's full name on their profile, user card, and emails. Disable to hide full name everywhere.\"\n    display_name_on_posts: \"Show a user's full name on their posts in addition to their @username.\"\n    show_time_gap_days: \"If two posts are made this many days apart, display the time gap in the topic.\"\n    short_progress_text_threshold: \"After the number of posts in a topic goes above this number, the progress bar will only show the current post number. If you change the progress bar's width, you may need to change this value.\"\n    default_code_lang: \"Default programming language syntax highlighting applied to code blocks (auto, nohighlight, ruby, python etc.). This value must also be present in the `highlighted languages` site setting.\"\n    warn_reviving_old_topic_age: \"When someone starts replying to a topic where the last reply is older than this many days, a warning will be displayed. Disable by setting to 0.\"\n    autohighlight_all_code: \"Force apply code highlighting to all preformatted code blocks even when they didn't explicitly specify the language.\"\n    highlighted_languages: \"Included syntax highlighting rules. (Warning: including too many languages may impact performance) see: <a href='https://highlightjs.org/static/demo/' target='_blank'>https://highlightjs.org/static/demo</a> for a demo\"\n    show_copy_button_on_codeblocks: \"Add a button to codeblocks to copy the block contents to the user's clipboard.\"\n\n    embed_any_origin: \"Allow embeddable content regardless of origin. This is required for mobile apps with static HTML.\"\n    embed_topics_list: \"Support HTML embedding of topics lists\"\n    embed_set_canonical_url: \"Set the canonical URL for embedded topics to the embedded content's URL.\"\n    embed_truncate: \"Truncate the embedded posts.\"\n    embed_unlisted: \"Imported topics will be unlisted until a user replies.\"\n    embed_support_markdown: \"Support Markdown formatting for embedded posts.\"\n    allowed_embed_selectors: \"A comma separated list of CSS elements that are allowed in embeds.\"\n    allowed_href_schemes: \"Schemes allowed in links in addition to http and https.\"\n    embed_post_limit: \"Maximum number of posts to embed.\"\n    embed_username_required: \"The username for topic creation is required.\"\n    notify_about_flags_after: \"If there are flags that haven't been handled after this many hours, send a personal message to moderators. Set to 0 to disable.\"\n    show_create_topics_notice: \"If the site has fewer than 5 public topics, show a notice asking admins to create some topics.\"\n\n    delete_drafts_older_than_n_days: \"Delete drafts older than (n) days.\"\n    delete_merged_stub_topics_after_days: \"Number of days to wait before automatically deleting fully merged stub topics. Set to 0 to never delete stub topics.\"\n\n    bootstrap_mode_min_users: \"Minimum number of users required to disable bootstrap mode (set to 0 to disable)\"\n\n    prevent_anons_from_downloading_files: \"Prevent anonymous users from downloading attachments.\"\n    secure_media: \"DEPRECATED: Use the secure_uploads setting instead, will be removed in Discourse 3.0.\"\n    secure_uploads: 'Limits access to ALL uploads (images, video, audio, text, pdfs, zips, and others). If \"login required\u201d is enabled, only logged-in users can access uploads. Otherwise, access will be limited only for media uploads in private messages and private categories. WARNING: This setting is complex and requires deep administrative understanding. See <a target=\"_blank\" href=\"https://meta.discourse.org/t/-/140017\">the secure uploads topic on Meta</a> for details.'\n    secure_media_allow_embed_images_in_emails: \"DEPRECATED: Use secure_uploads_allow_embed_images_in_emails, will remove in Discourse 3.0.\"\n    secure_uploads_allow_embed_images_in_emails: \"Allows embedding secure images that would normally be redacted in emails, if their size is smaller than the 'secure uploads max email embed image size kb' setting.\"\n    secure_media_max_email_embed_image_size_kb: \"DEPRECATED: Use secure_uploads_max_email_embed_image_size_kb, will be removed in Discourse 3.0.\"\n    secure_uploads_max_email_embed_image_size_kb: \"The size cutoff for secure images that will be embedded in emails if the 'secure uploads allow embed in emails' setting is enabled. Without that setting enabled, this setting has no effect.\"\n    slug_generation_method: \"Choose a slug generation method. 'encoded' will generate percent encoding string. 'none' will disable slug at all.\"\n\n    enable_emoji: \"Enable emoji\"\n    enable_emoji_shortcuts: \"Common smiley text such as :) :p :( will be converted to emojis\"\n    emoji_set: \"How would you like your emoji?\"\n    emoji_autocomplete_min_chars: \"Minimum number of characters required to trigger autocomplete emoji popup\"\n    enable_inline_emoji_translation: \"Enables translation for inline emojis (without any space or punctuation before)\"\n\n    approve_post_count: \"The amount of posts from a new or basic user that must be approved\"\n    approve_unless_trust_level: \"Posts for users below this trust level must be approved\"\n    approve_new_topics_unless_trust_level: \"New topics for users below this trust level must be approved\"\n    approve_unless_staged: \"New topics and posts for staged users must be approved\"\n    notify_about_queued_posts_after: \"If there are posts that have been waiting to be reviewed for more than this many hours, send a notification to all moderators. Set to 0 to disable these notifications.\"\n    auto_close_messages_post_count: \"Maximum number of posts allowed in a message before it is automatically closed (0 to disable)\"\n    auto_close_topics_post_count: \"Maximum number of posts allowed in a topic before it is automatically closed (0 to disable)\"\n    auto_close_topics_create_linked_topic: \"Create a new linked topic when a topic is auto-closed based on 'auto close topics post count' setting\"\n\n    code_formatting_style: \"Code button in composer will default to this code formatting style\"\n\n    max_allowed_message_recipients: \"Maximum recipients allowed in a message.\"\n    watched_words_regular_expressions: \"Watched words are regular expressions.\"\n\n    enable_diffhtml_preview: \"Experimental feature which uses diffHTML to sync preview instead of full re-render\"\n    enable_fast_edit: \"Enables small selection of a post text to be edited inline.\"\n\n    old_post_notice_days: \"Days before post notice becomes old\"\n    new_user_notice_tl: \"Minimum trust level required to see new user post notices.\"\n    returning_user_notice_tl: \"Minimum trust level required to see returning user post notices.\"\n    returning_users_days: \"How many days should pass before a user is considered to be returning.\"\n    review_media_unless_trust_level: \"Staff will review posts of users with lower trust levels if they contain embedded media.\"\n    blur_tl0_flagged_posts_media: \"Blur flagged posts images to hide potentially NSFW content.\"\n    enable_page_publishing: \"Allow staff members to publish topics to new URLs with their own styling.\"\n    show_published_pages_login_required: \"Anonymous users can see published pages, even when login is required.\"\n    skip_auto_delete_reply_likes: \"When automatically deleting old replies, skip deleting posts with this number of likes or more.\"\n\n    default_email_digest_frequency: \"How often users receive summary emails by default.\"\n    default_include_tl0_in_digests: \"Include posts from new users in summary emails by default. Users can change this in their preferences.\"\n    default_email_level: \"Set default email notification level for regular topics.\"\n    default_email_messages_level: \"Set default email notification level when someone messages user.\"\n    default_email_mailing_list_mode: \"Send an email for every new post by default.\"\n    default_email_mailing_list_mode_frequency: \"Users who enable mailing list mode will receive emails this often by default.\"\n    disable_mailing_list_mode: \"Disallow users from enabling mailing list mode (prevents any mailing list emails from being sent.)\"\n    default_email_previous_replies: \"Include previous replies in emails by default.\"\n\n    default_email_in_reply_to: \"Include excerpt of replied to post in emails by default.\"\n\n    default_hide_profile_and_presence: \"Hide user public profile and presence features by default.\"\n\n    default_other_new_topic_duration_minutes: \"Global default condition for which a topic is considered new.\"\n    default_other_auto_track_topics_after_msecs: \"Global default time before a topic is automatically tracked.\"\n    default_other_notification_level_when_replying: \"Global default notification level when the user replies to a topic.\"\n    default_other_external_links_in_new_tab: \"Open external links in a new tab by default.\"\n    default_other_enable_quoting: \"Enable quote reply for highlighted text by default.\"\n    default_other_enable_defer: \"Enable defer topic functionality by default.\"\n    default_other_dynamic_favicon: \"Show new/updated topic count on browser icon by default.\"\n    default_other_skip_new_user_tips: \"Skip new user onboarding tips and badges.\"\n\n    default_other_like_notification_frequency: \"Notify users on likes by default\"\n\n    default_topics_automatic_unpin: \"Automatically unpin topics when the user reaches the bottom by default.\"\n\n    default_categories_watching: \"List of categories that are watched by default.\"\n    default_categories_tracking: \"List of categories that are tracked by default.\"\n    default_categories_muted: \"List of categories that are muted by default.\"\n    default_categories_watching_first_post: \"List of categories in which first post in each new topic will be watched by default.\"\n    default_categories_normal: \"List of categories that are not muted by default. Useful when `mute_all_categories_by_default` site setting is enabled.\"\n    mute_all_categories_by_default: \"Set the default notification level of all the categories to muted. Require users opt-in to categories for them to appear in 'latest' and 'categories' pages. If you wish to amend the defaults for anonymous users set 'default_categories_' settings.\"\n\n    default_tags_watching: \"List of tags that are watched by default.\"\n    default_tags_tracking: \"List of tags that are tracked by default.\"\n    default_tags_muted: \"List of tags that are muted by default.\"\n    default_tags_watching_first_post: \"List of tags in which first post in each new topic will be watched by default.\"\n\n    default_text_size: \"Text size which is selected by default\"\n\n    default_title_count_mode: \"Default mode for the page title counter\"\n\n    retain_web_hook_events_period_days: \"Number of days to retain web hook event records.\"\n    retry_web_hook_events: \"Automatically retry failed web hook events for 4 times. Time gaps between the retries are 1, 5, 25 and 125 minutes.\"\n    revoke_api_keys_days: \"Number of days before an unused API key is automatically revoked (0 for never)\"\n\n    allow_user_api_keys: \"Allow generation of user API keys\"\n    allow_user_api_key_scopes: \"List of scopes allowed for user API keys\"\n    min_trust_level_for_user_api_key: \"Trust level required for generation of user API keys\"\n    allowed_user_api_auth_redirects: \"Allowed URL for authentication redirect for user API keys. Wildcard symbol * can be used to match any part of it (e.g. www.example.com/*).\"\n    allowed_user_api_push_urls: \"Allowed URLs for server push to user API\"\n    expire_user_api_keys_days: \"Number of days before a user API key automatically expires (0 for never)\"\n\n    tagging_enabled: \"Enable tags on topics?\"\n    min_trust_to_create_tag: \"The minimum trust level required to create a tag.\"\n    max_tags_per_topic: \"The maximum tags that can be applied to a topic.\"\n    max_tag_length: \"The maximum amount of characters that can be used in a tag.\"\n    max_tag_search_results: \"When searching for tags, the maximum number of results to show.\"\n    max_tags_in_filter_list: \"Maximum number of tags to show in the filter dropdown. The most used tags will be shown.\"\n    tags_sort_alphabetically: \"Show tags in alphabetical order. Default is to show in order of popularity.\"\n    tags_listed_by_group: \"List tags by tag group on the <a href='%{base_path}/tags' target='_blank'>Tags page</a>.\"\n    tag_style: \"Visual style for tag badges.\"\n    pm_tags_allowed_for_groups: \"Allow members of included group(s) to tag any personal message\"\n    min_trust_level_to_tag_topics: \"Minimum trust level required to tag topics\"\n    suppress_overlapping_tags_in_list: \"If tags match exact words in topic titles, don't show the tag\"\n    remove_muted_tags_from_latest: \"Don't show topics tagged only with muted tags in the latest topic list.\"\n    force_lowercase_tags: \"Force all new tags to be entirely lowercase.\"\n\n    company_name: \"Company Name\"\n    governing_law: \"Governing Law\"\n    city_for_disputes: \"City for Disputes\"\n\n    shared_drafts_category: \"Enable the Shared Drafts feature by designating a category for topic drafts. Topics in this category will be suppressed from topic lists for staff users.\"\n    shared_drafts_min_trust_level: \"Allow users to see and edit Shared Drafts.\"\n\n    push_notifications_prompt: \"Display user consent prompt.\"\n    push_notifications_icon: \"The badge icon that appears in the notification corner. A 96\u00d796 monochromatic PNG with transparency is recommended.\"\n\n    base_font: \"Base font to use for most text on the site. Themes can override via the `--font-family` CSS custom property.\"\n    heading_font: \"Font to use for headings on the site. Themes can override via the `--heading-font-family` CSS custom property.\"\n\n    enable_sitemap: \"Generate a sitemap for your site and include it in the robots.txt file.\"\n    sitemap_page_size: \"Number of URLs to include in each sitemap page. Max 50.000\"\n\n    enable_user_status: \"(experimental) Allow users to set custom status message (emoji + description).\"\n    enable_user_tips: \"(experimental) Enable new user tips that describe key features to users\"\n\n    short_title: \"The short title will be used on the user's home screen, launcher, or other places where space may be limited. It should be limited to 12 characters.\"\n\n    dashboard_hidden_reports: \"Allow to hide the specified reports from the dashboard.\"\n    dashboard_visible_tabs: \"Choose which dashboard tabs are visible.\"\n    dashboard_general_tab_activity_metrics: \"Choose reports to be displayed as activity metrics on the general tab.\"\n\n    gravatar_name: \"Name of the Gravatar provider\"\n    gravatar_base_url: \"Url of the Gravatar provider's API base\"\n    gravatar_login_url: \"Url relative to gravatar_base_url, which provides the user with the login to the Gravatar service\"\n\n    share_quote_buttons: \"Determine which items appear in the quote sharing widget, and in what order.\"\n    share_quote_visibility: \"Determine when to show quote sharing buttons: never, to anonymous users only or all users. \"\n\n    create_revision_on_bulk_topic_moves: \"Create revision for first posts when topics are moved into a new category in bulk.\"\n\n    allow_changing_staged_user_tracking: \"Allow a staged user's category and tag notification preferences to be changed by an admin user.\"\n    use_email_for_username_and_name_suggestions: \"Use the first part of email addresses for username and name suggestions. Note that this makes it easier for the public to guess full user email addresses (because a large proportion of people share common services like `gmail.com`).\"\n    use_name_for_username_suggestions: \"Use a user's full name when suggesting usernames.\"\n    suggest_weekends_in_date_pickers: \"Include weekends (Saturday and Sunday) in date picker suggestions (disable this if you use Discourse only on weekdays, Monday through Friday).\"\n\n    splash_screen: \"Displays a temporary loading screen while site assets load\"\n    default_sidebar_categories: \"Selected categories will be displayed under Sidebar's Categories section by default.\"\n    default_sidebar_tags: \"Selected tags will be displayed under Sidebar's Tags section by default.\"\n    enable_new_user_profile_nav_groups: \"EXPERIMENTAL: Users of the selected groups will be shown the new user profile navigation menu\"\n\n    errors:\n      invalid_css_color: \"Invalid color. Enter a color name or hex value.\"\n      invalid_email: \"Invalid email address.\"\n      invalid_username: \"There's no user with that username.\"\n      valid_username: \"There's a user with that username.\"\n      invalid_group: \"There's no group with that name.\"\n      invalid_integer_min_max: \"Value must be between %{min} and %{max}.\"\n      invalid_integer_min: \"Value must be %{min} or greater.\"\n      invalid_integer_max: \"Value cannot be higher than %{max}.\"\n      invalid_integer: \"Value must be an integer.\"\n      regex_mismatch: \"Value doesn't match the required format.\"\n      must_include_latest: \"Top menu must include the 'latest' tab.\"\n      invalid_string: \"Invalid value.\"\n      invalid_string_min_max: \"Must be between %{min} and %{max} characters.\"\n      invalid_string_min: \"Must be at least %{min} characters.\"\n      invalid_string_max: \"Must be no more than %{max} characters.\"\n      invalid_json: \"Invalid JSON.\"\n      invalid_reply_by_email_address: \"Value must contain '%{reply_key}' and be different from the notification email.\"\n      invalid_alternative_reply_by_email_addresses: \"All values must contain '%{reply_key}' and be different from the notification email.\"\n      invalid_domain_hostname: \"Must not include * or ? characters.\"\n      pop3_polling_host_is_empty: \"You must set a 'pop3 polling host' before enabling POP3 polling.\"\n      pop3_polling_username_is_empty: \"You must set a 'pop3 polling username' before enabling POP3 polling.\"\n      pop3_polling_password_is_empty: \"You must set a 'pop3 polling password' before enabling POP3 polling.\"\n      pop3_polling_authentication_failed: \"POP3 authentication failed. Please verify your pop3 credentials.\"\n      reply_by_email_address_is_empty: \"You must set a 'reply by email address' before enabling reply by email.\"\n      email_polling_disabled: \"You must enable either manual or POP3 polling before enabling reply by email.\"\n      user_locale_not_enabled: \"You must first enable 'allow user locale' before enabling this setting.\"\n      personal_message_enabled_groups_invalid: \"You must specify at least one group for this setting. If you do not want anyone except staff to send PMs, choose the staff group.\"\n      invalid_regex: \"Regex is invalid or not allowed.\"\n      invalid_regex_with_message: \"The regex '%{regex}' has an error: %{message}\"\n      email_editable_enabled: \"You must disable 'email editable' before enabling this setting.\"\n      staged_users_disabled: \"You must first enable 'staged users' before enabling this setting.\"\n      reply_by_email_disabled: \"You must first enable 'reply by email' before enabling this setting.\"\n      discourse_connect_url_is_empty: \"You must set a 'discourse connect url' before enabling this setting.\"\n      discourse_connect_invite_only: \"You cannot enable DiscourseConnect and invite only at the same time.\"\n      enable_local_logins_disabled: \"You must first enable 'enable local logins' before enabling this setting.\"\n      min_username_length_exists: \"You cannot set the minimum username length above the shortest username (%{username}).\"\n      min_username_length_range: \"You cannot set the minimum above the maximum.\"\n      max_username_length_exists: \"You cannot set the maximum username length below the longest username (%{username}).\"\n      max_username_length_range: \"You cannot set the maximum below the minimum.\"\n      invalid_hex_value: \"Color values have to be 6-digit hexadecimal codes.\"\n      empty_selectable_avatars: \"You must first upload at least two selectable avatars before enabling this setting.\"\n      category_search_priority:\n        low_weight_invalid: \"You cannot set the weight to be greater or equal to 1.\"\n        high_weight_invalid: \"You cannot set the weight to be smaller or equal to 1.\"\n      allowed_unicode_usernames:\n        regex_invalid: \"The regular expression is invalid: %{error}\"\n        leading_trailing_slash: \"The regular expression must not start and end with a slash.\"\n      unicode_usernames_avatars: \"The internal system avatars do not support Unicode usernames.\"\n      list_value_count: \"The list must contain exactly %{count} values.\"\n      markdown_linkify_tlds: \"You cannot include a value of '*'.\"\n      google_oauth2_hd_groups: \"You must configure all 'google oauth2 hd' settings before enabling this setting.\"\n      search_tokenize_chinese_enabled: \"You must disable 'search_tokenize_chinese' before enabling this setting.\"\n      search_tokenize_japanese_enabled: \"You must disable 'search_tokenize_japanese' before enabling this setting.\"\n      discourse_connect_cannot_be_enabled_if_second_factor_enforced: \"You cannot enable DiscourseConnect if 2FA is enforced.\"\n      delete_rejected_email_after_days: \"This setting cannot be set lower than the delete_email_logs_after_days setting or greater than %{max}\"\n      invalid_uncategorized_category_setting: \"The Uncategorized category cannot be selected if allow uncategorized topics is not allowed\"\n\n    placeholder:\n      discourse_connect_provider_secrets:\n        key: \"www.example.com\"\n        value: \"DiscourseConnect secret\"\n\n  search:\n    extreme_load_error: \"Site is under extreme load, search is disabled, try again later\"\n    within_post: \"#%{post_number} by %{username}\"\n    types:\n      category: \"Categories\"\n      topic: \"Results\"\n      user: \"Users\"\n    results_page: \"Search results for '%{term}'\"\n    audio: \"[audio]\"\n    video: \"[video]\"\n\n  discourse_connect:\n    login_error: \"Login Error\"\n    not_found: \"Your account couldn't be found. Please contact the site's administrator.\"\n    account_not_approved: \"Your account is pending approval. You will receive an email notification when you are approved.\"\n    unknown_error: \"There is a problem with your account. Please contact the site's administrator.\"\n    timeout_expired: \"Account login timed out, please try logging in again.\"\n    no_email: \"No email address was provided. Please contact the site's administrator.\"\n    blank_id_error: \"The `external_id` is required but was blank\"\n    email_error: \"An account could not be registered with the email address <b>%{email}</b>. Please contact the site's administrator.\"\n    missing_secret: \"Authentication failed due to missing secret. Contact the site administrators to fix this problem.\"\n    invite_redeem_failed: \"Invite redemption failed. Please contact the site's administrator.\"\n\n  original_poster: \"Original Poster\"\n  most_recent_poster: \"Most Recent Poster\"\n  frequent_poster: \"Frequent Poster\"\n  # Example: \"Original Poster, Most Recent Poster\"\n  poster_description_joiner: \", \"\n\n  redirected_to_top_reasons:\n    new_user: \"Welcome to our community! These are the most popular recent topics.\"\n    not_seen_in_a_month: \"Welcome back! We haven't seen you in a while. These are the most popular topics since you've been away.\"\n\n  merge_posts:\n    edit_reason:\n      one: \"A post was merged in by %{username}\"\n      other: \"%{count} posts were merged in by %{username}\"\n    errors:\n      different_topics: \"Posts belonging to different topics cannot be merged.\"\n      different_users: \"Posts belonging to different users cannot be merged.\"\n      max_post_length: \"Posts cannot be merged because the combined post length is more than allowed.\"\n\n  move_posts:\n    new_topic_moderator_post:\n      one: \"A post was split to a new topic: %{topic_link}\"\n      other: \"%{count} posts were split to a new topic: %{topic_link}\"\n    new_message_moderator_post:\n      one: \"A post was split to a new message: %{topic_link}\"\n      other: \"%{count} posts were split to a new message: %{topic_link}\"\n    existing_topic_moderator_post:\n      one: \"A post was merged into an existing topic: %{topic_link}\"\n      other: \"%{count} posts were merged into an existing topic: %{topic_link}\"\n    existing_message_moderator_post:\n      one: \"A post was merged into an existing message: %{topic_link}\"\n      other: \"%{count} posts were merged into an existing message: %{topic_link}\"\n\n  change_owner:\n    post_revision_text: \"Ownership transferred\"\n\n  publish_page:\n    slug_errors:\n      blank: \"can't be blank\"\n      unavailable: \"is unavailable\"\n      invalid: \"contains invalid characters\"\n\n  topic_statuses:\n    autoclosed_message_max_posts:\n      one: \"This message was automatically closed after reaching the maximum limit of %{count} reply.\"\n      other: \"This message was automatically closed after reaching the maximum limit of %{count} replies.\"\n    autoclosed_topic_max_posts:\n      one: \"This topic was automatically closed after reaching the maximum limit of %{count} reply.\"\n      other: \"This topic was automatically closed after reaching the maximum limit of %{count} replies.\"\n    autoclosed_enabled_days:\n      one: \"This topic was automatically closed after %{count} day. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed after %{count} days. New replies are no longer allowed.\"\n    autoclosed_enabled_hours:\n      one: \"This topic was automatically closed after %{count} hour. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed after %{count} hours. New replies are no longer allowed.\"\n    autoclosed_enabled_minutes:\n      one: \"This topic was automatically closed after %{count} minute. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed after %{count} minutes. New replies are no longer allowed.\"\n    autoclosed_enabled_lastpost_days:\n      one: \"This topic was automatically closed %{count} day after the last reply. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed %{count} days after the last reply. New replies are no longer allowed.\"\n    autoclosed_enabled_lastpost_hours:\n      one: \"This topic was automatically closed %{count} hour after the last reply. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed %{count} hours after the last reply. New replies are no longer allowed.\"\n    autoclosed_enabled_lastpost_minutes:\n      one: \"This topic was automatically closed %{count} minute after the last reply. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed %{count} minutes after the last reply. New replies are no longer allowed.\"\n\n    autoclosed_disabled_days:\n      one: \"This topic was automatically opened after %{count} day.\"\n      other: \"This topic was automatically opened after %{count} days.\"\n    autoclosed_disabled_hours:\n      one: \"This topic was automatically opened after %{count} hour.\"\n      other: \"This topic was automatically opened after %{count} hours.\"\n    autoclosed_disabled_minutes:\n      one: \"This topic was automatically opened after %{count} minute.\"\n      other: \"This topic was automatically opened after %{count} minutes.\"\n    autoclosed_disabled_lastpost_days:\n      one: \"This topic was automatically opened %{count} day after the last reply.\"\n      other: \"This topic was automatically opened %{count} days after the last reply.\"\n    autoclosed_disabled_lastpost_hours:\n      one: \"This topic was automatically opened %{count} hour after the last reply.\"\n      other: \"This topic was automatically opened %{count} hours after the last reply.\"\n    autoclosed_disabled_lastpost_minutes:\n      one: \"This topic was automatically opened %{count} minute after the last reply.\"\n      other: \"This topic was automatically opened %{count} minutes after the last reply.\"\n\n    autoclosed_disabled: \"This topic is now opened. New replies are allowed.\"\n    autoclosed_disabled_lastpost: \"This topic is now opened. New replies are allowed.\"\n    auto_deleted_by_timer: \"Automatically deleted by timer.\"\n\n  login:\n    invalid_second_factor_method: \"The selected two-factor method is invalid.\"\n    not_enabled_second_factor_method: \"The selected two-factor method is not enabled for your account.\"\n    security_key_description: \"When you have your physical security key prepared press the Authenticate with Security Key button below.\"\n    security_key_alternative: \"Try another way\"\n    security_key_authenticate: \"Authenticate with Security Key\"\n    security_key_not_allowed_error: \"The security key authentication process either timed out or was cancelled.\"\n    security_key_no_matching_credential_error: \"No matching credentials could be found in the provided security key.\"\n    security_key_support_missing_error: \"Your current device or browser does not support the use of security keys. Please use a different method.\"\n    security_key_invalid: \"There was an error validating the security key.\"\n    not_approved: \"Your account hasn't been approved yet. You will be notified by email when you are ready to log in.\"\n    incorrect_username_email_or_password: \"Incorrect username, email or password\"\n    incorrect_password: \"Incorrect password\"\n    wait_approval: \"Thanks for signing up. We will notify you when your account has been approved.\"\n    active: \"Your account is activated and ready to use.\"\n    activate_email: \"<p>You\u2019re almost done! We sent an activation mail to <b>%{email}</b>. Please follow the instructions in the mail to activate your account.</p><p>If it doesn\u2019t arrive, check your spam folder.</p>\"\n    not_activated: \"You can't log in yet. We sent an activation email to you. Please follow the instructions in the email to activate your account.\"\n    not_allowed_from_ip_address: \"You can't log in as %{username} from that IP address.\"\n    admin_not_allowed_from_ip_address: \"You can't log in as admin from that IP address.\"\n    reset_not_allowed_from_ip_address: \"You can't request a password reset from that IP address.\"\n    suspended: \"You can't log in until %{date}.\"\n    suspended_with_reason: \"Account suspended until %{date}: %{reason}\"\n    suspended_with_reason_forever: \"Account suspended: %{reason}\"\n    errors: \"%{errors}\"\n    not_available: \"Not available. Try %{suggestion}?\"\n    something_already_taken: \"Something went wrong, perhaps the username or email is already registered. Try the forgot password link.\"\n    omniauth_error:\n      generic: \"Sorry, there was an error authorizing your account. Please try again.\"\n      csrf_detected: \"Authorization timed out, or you have switched browsers. Please try again.\"\n      request_error: \"An error occurred when starting authorization. Please try again.\"\n      invalid_iat: \"Unable to verify authorization token due to server clock differences. Please try again.\"\n    omniauth_error_unknown: \"Something went wrong processing your login, please try again.\"\n    omniauth_confirm_title: \"Log in using %{provider}\"\n    omniauth_confirm_button: \"Continue\"\n    authenticator_error_no_valid_email: \"No email addresses associated with %{account} are allowed. You may need to configure your account with a different email address.\"\n    new_registrations_disabled: \"New account registrations are not allowed at this time.\"\n    password_too_long: \"Passwords are limited to 200 characters.\"\n    email_too_long: \"The email you provided is too long. Mailbox names must be no more than 254 characters, and domain names must be no more than 253 characters.\"\n    wrong_invite_code: \"The invite code you entered was incorrect.\"\n    reserved_username: \"That username is not allowed.\"\n    missing_user_field: \"You have not completed all the user fields\"\n    auth_complete: \"Authentication is complete.\"\n    click_to_continue: \"Click here to continue.\"\n    already_logged_in: \"Sorry! This invitation is intended for new users, who do not already have an existing account.\"\n    second_factor_title: \"Two-Factor Authentication\"\n    second_factor_description: \"Please enter the required authentication code from your app:\"\n    second_factor_backup_description: \"Please enter one of your backup codes:\"\n    second_factor_backup_title: \"Two-Factor Backup Code\"\n    invalid_second_factor_code: \"Invalid authentication code. Each code can only be used once.\"\n    invalid_security_key: \"Invalid security key.\"\n    missing_second_factor_name: \"Please provide a name.\"\n    missing_second_factor_code: \"Please provide a code.\"\n    second_factor_toggle:\n      totp: \"Use an authenticator app or security key instead\"\n      backup_code: \"Use a backup code instead\"\n\n  second_factor_auth:\n    challenge_not_found: \"Couldn't find a 2FA challenge in your current session.\"\n    challenge_expired: \"Too much time has passed since the 2FA challenge was staged and it's no longer valid. Please try again.\"\n    challenge_not_completed: \"You've not completed the 2FA challenge to perform this action. Please complete the 2FA challenge and try again.\"\n    actions:\n      grant_admin:\n        description: \"For additional security measures, you need to confirm your 2FA before %{username} is granted admin access.\"\n      discourse_connect_provider:\n        description: \"%{hostname} has requested that you confirm your 2FA. You'll be redirected back to the site once you confirm your 2FA.\"\n  admin:\n    email:\n      sent_test: \"sent!\"\n    user:\n      merge_user:\n        updating_username: \"Updating username...\"\n        changing_post_ownership: \"Changing post ownership...\"\n        merging_given_daily_likes: \"Merging given daily likes...\"\n        merging_post_timings: \"Merging post timings...\"\n        merging_user_visits: \"Merging user visits...\"\n        updating_site_settings: \"Updating site settings...\"\n        updating_user_stats: \"Updating user stats...\"\n        merging_user_attributes: \"Merging user attributes...\"\n        updating_user_ids: \"Updating user ids...\"\n        deleting_source_user: \"Deleting source user...\"\n  user:\n    deactivated: \"Was deactivated due to too many bounced emails to '%{email}'.\"\n    deactivated_by_staff: \"Deactivated by staff\"\n    deactivated_by_inactivity:\n      one: \"Automatically deactivated after %{count} day of inactivity\"\n      other: \"Automatically deactivated after %{count} days of inactivity\"\n    activated_by_staff: \"Activated by staff\"\n    new_user_typed_too_fast: \"New user typed too fast\"\n    content_matches_auto_silence_regex: \"Content matches auto silence regex\"\n    content_matches_auto_block_regex: \"Content matches auto block regex\"\n    username:\n      short: \"must be at least %{min} characters\"\n      long: \"must be no more than %{max} characters\"\n      too_long: \"is too long\"\n      characters: \"must only include numbers, letters, dashes, dots, and underscores\"\n      unique: \"must be unique\"\n      blank: \"must be present\"\n      must_begin_with_alphanumeric_or_underscore: \"must begin with a letter, a number or an underscore\"\n      must_end_with_alphanumeric: \"must end with a letter or a number\"\n      must_not_contain_two_special_chars_in_seq: \"must not contain a sequence of 2 or more special chars (.-_)\"\n      must_not_end_with_confusing_suffix: \"must not end with a confusing suffix like .json or .png etc.\"\n    email:\n      invalid: \"is invalid.\"\n      not_allowed: \"is not allowed from that email provider. Please use another email address.\"\n      blocked: \"is not allowed.\"\n      revoked: \"Won't be sending emails to '%{email}' until %{date}.\"\n      does_not_exist: \"N/A\"\n    ip_address:\n      blocked: \"New registrations are not allowed from your IP address.\"\n      max_new_accounts_per_registration_ip: \"New registrations are not allowed from your IP address (maximum limit reached). Contact a staff member.\"\n    website:\n      domain_not_allowed: \"Website is invalid. Allowed domains are: %{domains}\"\n    auto_rejected: \"Rejected automatically due to age. See auto_handle_queued_age site setting.\"\n    destroy_reasons:\n      unused_staged_user: \"Unused staged user\"\n      fixed_primary_email: \"Fixed primary email for staged user\"\n      same_ip_address: \"Same IP address (%{ip_address}) as other users\"\n      inactive_user: \"Inactive user\"\n      reviewable_reject_auto: \"Auto handle queued reviewables\"\n      reviewable_reject: \"Reviewable user rejected\"\n    email_in_spam_header: \"User's first email was flagged as spam\"\n    already_silenced: \"User was already silenced by %{staff} %{time_ago}.\"\n    already_suspended: \"User was already suspended by %{staff} %{time_ago}.\"\n    cannot_delete_has_posts:\n      one: \"User %{username} has %{count} post in a public topic or personal message, so they can't be deleted.\"\n      other: \"User %{username} has %{count} posts in public topics or personal messages, so they can't be deleted.\"\n\n  unsubscribe_mailer:\n    title: \"Unsubscribe Mailer\"\n    subject_template: \"Confirm you no longer want to receive email updates from %{site_title}\"\n    text_body_template: |\n      Someone (possibly you?) requested to no longer send email updates from %{site_domain_name} to this address.\n      If you wish to confirm this, please click this link:\n\n      %{confirm_unsubscribe_link}\n\n\n      If you want to continue receiving email updates, you may ignore this email.\n\n  invite_mailer:\n    title: \"Invite Mailer\"\n    subject_template: \"%{inviter_name} invited you to '%{topic_title}' on %{site_domain_name}\"\n    text_body_template: |\n      %{inviter_name} invited you to a discussion\n\n      > **%{topic_title}**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      If you're interested, click the link below:\n\n      %{invite_link}\n\n  custom_invite_mailer:\n    title: \"Custom Invite Mailer\"\n    subject_template: \"%{inviter_name} invited you to '%{topic_title}' on %{site_domain_name}\"\n    text_body_template: |\n      %{inviter_name} invited you to a discussion\n\n      > **%{topic_title}**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      With this note\n\n      > %{user_custom_message}\n\n      If you're interested, click the link below:\n\n      %{invite_link}\n\n  invite_forum_mailer:\n    title: \"Invite Forum Mailer\"\n    subject_template: \"%{inviter_name} invited you to join %{site_domain_name}\"\n    text_body_template: |\n      %{inviter_name} invited you to join\n\n      > **%{site_title}**\n      >\n      > %{site_description}\n\n      If you're interested, click the link below:\n\n      %{invite_link}\n\n  custom_invite_forum_mailer:\n    title: \"Custom Invite Forum Mailer\"\n    subject_template: \"%{inviter_name} invited you to join %{site_domain_name}\"\n    text_body_template: |\n      %{inviter_name} invited you to join\n\n      > **%{site_title}**\n      >\n      > %{site_description}\n\n      With this note\n\n      > %{user_custom_message}\n\n      If you're interested, click the link below:\n\n      %{invite_link}\n\n  invite_password_instructions:\n    title: \"Invite Password Instructions\"\n    subject_template: \"Set password for your %{site_name} account\"\n    text_body_template: |\n      Thanks for accepting your invitation to %{site_name} -- welcome!\n\n      Click this link to choose a password now:\n      %{base_url}/u/password-reset/%{email_token}\n\n      (If the link above has expired, choose \"I forgot my password\" when logging in with your email address.)\n\n  download_backup_mailer:\n    title: \"Download Backup Mailer\"\n    subject_template: \"[%{email_prefix}] Site Backup Download\"\n    text_body_template: |\n      Here's the [site backup download](%{backup_file_path}) you requested.\n\n      We sent this download link to your validated email address for security reasons.\n\n      (If you *didn't* request this download, you should be seriously concerned -- someone has admin access to your site.)\n    no_token: |\n      Sorry, this backup download link has already been used or has expired.\n\n  admin_confirmation_mailer:\n    title: \"Admin Confirmation\"\n    subject_template: \"[%{email_prefix}] Confirm new Admin Account\"\n    text_body_template: |\n      Please confirm that you'd like to add **%{target_username} (%{target_email})** as an administrator for your forum.\n\n      [Confirm Administrator Account](%{admin_confirm_url})\n\n  test_mailer:\n    title: \"Test Mailer\"\n    subject_template: \"[%{email_prefix}] Email Deliverability Test\"\n    text_body_template: |\n      This is a test email from\n\n      [**%{base_url}**][0]\n\n      We hope you received this email deliverability test OK!\n\n      Here is a [handy checklist for verifying email delivery configuration][1].\n\n      Good luck,\n\n      Your friends at [Discourse](https://www.discourse.org)\n\n      [0]: %{base_url}\n      [1]: https://meta.discourse.org/t/email-delivery-configuration-checklist/209839\n\n  new_version_mailer:\n    title: \"New Version Mailer\"\n    subject_template: \"[%{email_prefix}] New Discourse version, update available\"\n    text_body_template: |\n      Hooray, a new version of [Discourse](https://www.discourse.org) is available!\n\n      Your version: %{installed_version}\n      New version: **%{new_version}**\n\n      - Upgrade using our easy **[one-click browser upgrade](%{base_url}/admin/upgrade)**\n\n      - See what's new in the [release notes](https://meta.discourse.org/tag/release-notes) or view the [raw GitHub changelog](https://github.com/discourse/discourse/commits/main)\n\n      - Visit [meta.discourse.org](https://meta.discourse.org) for news, discussion, and support for Discourse\n\n  new_version_mailer_with_notes:\n    title: \"New Version Mailer with Notes\"\n    subject_template: \"[%{email_prefix}] update available\"\n    text_body_template: |\n      Hooray, a new version of [Discourse](https://www.discourse.org) is available!\n\n      Your version: %{installed_version}\n      New version: **%{new_version}**\n\n      - Upgrade using our easy **[one-click browser upgrade](%{base_url}/admin/upgrade)**\n\n      - See what's new in the [release notes](https://meta.discourse.org/tag/release-notes) or view the [raw GitHub changelog](https://github.com/discourse/discourse/commits/main)\n\n      - Visit [meta.discourse.org](https://meta.discourse.org) for news, discussion, and support for Discourse\n\n      ### Release notes\n\n      %{notes}\n\n  flag_reasons:\n    off_topic: \"Your post was flagged as **off-topic**: the community feels it is not a good fit for the topic, as currently defined by the title and the first post.\"\n    inappropriate: \"Your post was flagged as **inappropriate**: the community feels it is offensive, abusive, or a violation of [our community guidelines](%{base_path}/guidelines).\"\n    spam: \"Your post was flagged as **spam**: the community feels it is an advertisement, something that is overly promotional in nature instead of being useful or relevant to the topic as expected.\"\n    notify_moderators: \"Your post was flagged **for moderator attention**: the community feels something about the post requires manual intervention by a staff member.\"\n    responder:\n      off_topic: \"The post was flagged as **off-topic**: the community feels it is not a good fit for the topic, as currently defined by the title and the first post.\"\n      inappropriate: \"The post was flagged as **inappropriate**: the community feels it is offensive, abusive, or a violation of [our community guidelines](%{base_path}/guidelines).\"\n      spam: \"The post was flagged as **spam**: the community feels it is an advertisement, something that is overly promotional in nature instead of being useful or relevant to the topic as expected.\"\n      notify_moderators: \"The post was flagged **for moderator attention**: the community feels something about the post requires manual intervention by a staff member.\"\n\n  flags_dispositions:\n    agreed: \"Thanks for letting us know. We agree there is an issue and we're looking into it.\"\n    agreed_and_deleted: \"Thanks for letting us know. We agree there is an issue and we've removed the post.\"\n    disagreed: \"Thanks for letting us know. We're looking into it.\"\n    ignored: \"Thanks for letting us know. We're looking into it.\"\n    ignored_and_deleted: \"Thanks for letting us know. We've removed the post.\"\n\n  temporarily_closed_due_to_flags:\n    one: \"This topic is temporarily closed for at least %{count} hour due to a large number of community flags.\"\n    other: \"This topic is temporarily closed for at least %{count} hours due to a large number of community flags.\"\n\n  system_messages:\n    reviewables_reminder:\n      subject_template: \"There are items in the review queue that need reviewing\"\n      text_body_template:\n        one: \"%{mentions} Items were submitted over %{count} hour ago. [Please review them](%{base_url}/review).\"\n        other: \"%{mentions} Items were submitted over %{count} hours ago. [Please review them](%{base_url}/review).\"\n\n    private_topic_title: \"Topic #%{id}\"\n    contents_hidden: \"Please visit the post to see its contents.\"\n\n    post_hidden:\n      title: \"Post Hidden\"\n      subject_template: \"Post hidden by community flags\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your post was hidden.\n\n        <%{base_url}%{url}>\n\n        %{flag_reason}\n\n        This post was hidden due to flags from the community, so please consider how you might revise your post to reflect their feedback. **You can edit your post after %{edit_delay} minutes, and it will be automatically unhidden.**\n\n        However, if the post is hidden by the community a second time, it will remain hidden until handled by staff.\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n\n    post_hidden_again:\n      title: \"Post Hidden again\"\n      subject_template: \"Post hidden by community flags, staff notified\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your post was hidden again.\n\n        <%{base_url}%{url}>\n\n        %{flag_reason}\n\n        The community flagged this post and now it is hidden. **Because this post has been hidden more than once, your post will now remain hidden until it is handled by a staff member.**\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n\n    queued_by_staff:\n      title: \"Post Needs Approval\"\n      subject_template: \"Post hidden by staff, awaiting approval\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your post was hidden.\n\n        <%{base_url}%{url}>\n\n        Your post will remain hidden until a staff member reviews it.\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n\n    flags_disagreed:\n      title: \"Flagged post restored by staff\"\n      subject_template: \"Flagged post restored by staff\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that [your post](%{base_url}%{url}) was restored.\n\n        This post was flagged by the community and a staff member opted to restore it.\n\n        [details=\"Click to expand restored post\"]\n        ``` markdown\n        %{flagged_post_raw_content}\n        ```\n        [/details]\n\n    flags_agreed_and_post_deleted:\n      title: \"Flagged post removed by staff\"\n      subject_template: \"Flagged post removed by staff\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that [your post](%{base_url}%{url}) was removed.\n\n        %{flag_reason}\n\n        This post was flagged by the community and a staff member opted to remove it.\n\n        ``` markdown\n        %{flagged_post_raw_content}\n        ```\n\n        Please review our [community guidelines](%{base_url}/guidelines) for details.\n\n    flags_agreed_and_post_deleted_for_responders:\n      title: \"Reply removed from flagged post by staff\"\n      subject_template: \"Reply removed from flagged post by staff\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that a [post](%{base_url}%{url}) you replied to was removed.\n\n        %{flag_reason}\n\n        This post was flagged by the community and a staff member opted to remove it.\n\n        ``` markdown\n        %{flagged_post_raw_content}\n        ```\n\n        To which you responded\n\n        ``` markdown\n        %{flagged_post_response_raw_content}\n        ```\n\n        For more details on the reason for removal, please review our [community guidelines](%{base_url}/guidelines).\n\n    usage_tips:\n      text_body_template: |\n        For a few quick tips on getting started as a new user, [check out this blog post](https://blog.discourse.org/2016/12/discourse-new-user-tips-and-tricks/).\n\n        As you participate here, we\u2019ll get to know you, and temporary new user limitations will be lifted. Over time you\u2019ll gain [trust levels](https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/) that include special abilities to help us manage our community together.\n\n    welcome_user:\n      title: \"Welcome User\"\n      subject_template: \"Welcome to %{site_name}!\"\n      text_body_template: |\n        Thanks for joining %{site_name}, and welcome!\n\n        %{new_user_tips}\n\n        We believe in [civilized community behavior](%{base_url}/guidelines) at all times.\n\n        Enjoy your stay!\n\n    welcome_tl1_user:\n      title: \"Welcome TL1 User\"\n      subject_template: \"Thanks for spending time with us\"\n      text_body_template: |\n        Hey there. We see you\u2019ve been busy reading, which is fantastic, so we\u2019ve promoted you up a [trust level!](https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/)\n\n        We\u2019re really glad you\u2019re spending time with us and we\u2019d love to know more about you. Take a moment to [fill out your profile](%{base_url}/my/preferences/profile), or feel free to [start a new topic](%{base_url}/categories).\n\n    welcome_staff:\n      title: \"Welcome Staff\"\n      subject_template: \"Congratulations, you\u2019ve been granted %{role} status!\"\n      text_body_template: |\n        You\u2019ve been granted %{role} status by a fellow staff member.\n\n        As a %{role}, you now have access to the <a href='%{base_url}/admin' target='_blank'>admin interface</a>.\n\n        With great power comes great responsibility. If you\u2019re new to moderating, please refer to the [Moderation Guide](https://meta.discourse.org/t/discourse-moderation-guide/63116).\n    welcome_invite:\n      title: \"Welcome Invite\"\n      subject_template: \"Welcome to %{site_name}!\"\n      text_body_template: |\n        Thanks for accepting your invitation to %{site_name} -- welcome!\n\n        - We've created this new account **%{username}** for you. Change your name or password by visiting [your user profile][prefs].\n\n        - When you log in, please **use the same email address from your original invitation** \u2014 otherwise we won't be able to tell it's you!\n\n        %{new_user_tips}\n\n        We believe in [civilized community behavior](%{base_url}/guidelines) at all times.\n\n        Enjoy your stay!\n\n        [prefs]: %{user_preferences_url}\n\n    tl2_promotion_message:\n      subject_template: \"Congratulations on your trust level promotion!\"\n      text_body_template: |\n        We\u2019ve promoted you up another [trust level](https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/)!\n\n        Achieving Trust Level 2 means that you have read and actively participated enough to be considered a member of this community.\n\n        As an experienced user, you might appreciate [this list of handy tips and tricks](https://blog.discourse.org/2016/12/discourse-new-user-tips-and-tricks/).\n\n        We invite you to keep getting involved \u2013 we enjoy having you around.\n\n    backup_succeeded:\n      title: \"Backup Succeeded\"\n      subject_template: \"Backup completed successfully\"\n      text_body_template: |\n        The backup was successful.\n\n        Visit the [admin > backup section](%{base_url}/admin/backups) to download your new backup.\n\n        Here's the log:\n\n        %{logs}\n\n    backup_failed:\n      title: \"Backup Failed\"\n      subject_template: \"Backup failed\"\n      text_body_template: |\n        The backup has failed.\n\n        Here's the log:\n\n        %{logs}\n\n    restore_succeeded:\n      title: \"Restore Succeeded\"\n      subject_template: \"Restore completed successfully\"\n      text_body_template: |\n        The restore was successful.\n\n        Here's the log:\n\n        %{logs}\n\n    restore_failed:\n      title: \"Restore Failed\"\n      subject_template: \"Restore failed\"\n      text_body_template: |\n        The restore has failed.\n\n        Here's the log:\n\n        %{logs}\n\n    bulk_invite_succeeded:\n      title: \"Bulk Invite Succeeded\"\n      subject_template: \"Bulk user invite processed successfully\"\n      text_body_template: |\n        Your bulk user invite file was processed, %{sent} invites mailed, %{skipped} skipped and %{warnings} warning(s).\n\n        ``` text\n        %{logs}\n        ```\n\n    bulk_invite_failed:\n      title: \"Bulk Invite Failed\"\n      subject_template: \"Bulk user invite processed with errors\"\n      text_body_template: |\n        Your bulk user invite file was processed, %{sent} invites mailed, %{skipped} skipped, %{warnings} warning(s) and %{failed} error(s).\n\n        Here's the log:\n\n        ``` text\n        %{logs}\n        ```\n    user_added_to_group_as_owner:\n      title: \"Added to Group as Owner\"\n      subject_template: \"You have been added as an owner of the %{group_name} group\"\n      text_body_template: |\n        You have been added as an owner of the [%{group_name}](%{base_url}%{group_path}) group.\n\n    user_added_to_group_as_member:\n      title: \"Added to Group as Member\"\n      subject_template: \"You have been added as a member of the %{group_name} group\"\n      text_body_template: |\n        You have been added as a member of the [%{group_name}](%{base_url}%{group_path}) group.\n\n    csv_export_succeeded:\n      title: \"CSV Export Succeeded\"\n      subject_template: \"[%{export_title}] Data export complete\"\n      text_body_template: |\n        Your data export was successful! :dvd:\n\n        %{download_link}\n\n        The above download link will be valid for 48 hours.\n\n        The data is compressed as a zip archive. If the archive does not extract itself when you open it, use the tool recommended here: https://www.7-zip.org/\n\n    csv_export_failed:\n      title: \"CSV Export Failed\"\n      subject_template: \"Data export failed\"\n      text_body_template: \"We're sorry, but your data export failed. Please check the logs or [contact a staff member](%{base_url}/about).\"\n\n    email_reject_insufficient_trust_level:\n      title: \"Email Reject insufficient Trust Level\"\n      subject_template: \"[%{email_prefix}] Email issue -- Insufficient Trust Level\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your account does not have the required trust level to post new topics to this email address. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_user_not_found:\n      title: \"Email Reject User Not Found\"\n      subject_template: \"[%{email_prefix}] Email issue -- User Not Found\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your reply was sent from an unknown email address. Try sending from another email address, or [contact a staff member](%{base_url}/about).\n\n    email_reject_screened_email:\n      title: \"Email Reject Screened Email\"\n      subject_template: \"[%{email_prefix}] Email issue -- Blocked Email\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your reply was sent from a blocked email address. Try sending from another email address, or [contact a staff member](%{base_url}/about).\n\n    email_reject_not_allowed_email:\n      title: \"Email Reject Not Allowed Email\"\n      subject_template: \"[%{email_prefix}] Email issue -- Blocked Email\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your reply was sent from a blocked email address. Try sending from another email address, or [contact a staff member](%{base_url}/about).\n\n    email_reject_inactive_user:\n      title: \"Email Reject Inactive User\"\n      subject_template: \"[%{email_prefix}] Email issue -- Inactive User\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your account associated with this email address is not activated. Please activate your account before sending emails in.\n\n    email_reject_silenced_user:\n      title: \"Email Reject Silenced User\"\n      subject_template: \"[%{email_prefix}] Email issue -- Silenced User\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your account associated with this email address has been silenced.\n\n    email_reject_reply_user_not_matching:\n      title: \"Email Reject User Not Matching\"\n      subject_template: \"[%{email_prefix}] Email issue -- Unexpected Reply Address\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your reply was sent from a different email address than the one we expected, so we're not sure if this is the same person. Try sending from another email address, or [contact a staff member](%{base_url}/about).\n\n    email_reject_empty:\n      title: \"Email Reject Empty\"\n      subject_template: \"[%{email_prefix}] Email issue -- No Content\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        We couldn't find any reply content in your email.\n\n        If you're getting this and you _did_ include a reply, try again with simpler formatting.\n\n    email_reject_parsing:\n      title: \"Email Reject Parsing\"\n      subject_template: \"[%{email_prefix}] Email issue -- Content Unrecognized\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        We couldn't find your reply in the email. **Make sure your reply is at the top of the email** -- we can't process inline replies.\n\n    email_reject_invalid_access:\n      title: \"Email Reject Invalid Access\"\n      subject_template: \"[%{email_prefix}] Email issue -- Invalid Access\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your account does not have the privileges to post new topics in that category. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_strangers_not_allowed:\n      title: \"Email Reject Strangers Not Allowed\"\n      subject_template: \"[%{email_prefix}] Email issue -- Invalid Access\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The category you sent this email to only allows replies from users with valid accounts and known email addresses. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_invalid_post:\n      title: \"Email Reject Invalid Post\"\n      subject_template: \"[%{email_prefix}] Email issue -- Posting error\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Some possible causes are: complex formatting, message too large, message too small. Please try again, or post via the website if this continues.\n\n    email_reject_invalid_post_specified:\n      title: \"Email Reject Invalid Post Specified\"\n      subject_template: \"[%{email_prefix}] Email issue -- Posting error\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Reason:\n\n        %{post_error}\n\n        If you can correct the problem, please try again.\n      date_invalid: \"No post creation date found. Is the e-mail missing a Date: header?\"\n\n    email_reject_post_too_short:\n      title: \"Email Reject Post Too Short\"\n      subject_template: \"[%{email_prefix}] Email issue -- Post too short\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        To promote more in depth conversations, very short replies are not allowed. Can you please reply with at least %{count} characters? Alternatively, you can like a post via email by replying with \"+1\".\n\n    email_reject_invalid_post_action:\n      title: \"Email Reject Invalid Post Action\"\n      subject_template: \"[%{email_prefix}] Email issue -- Invalid Post Action\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The Post Action was not recognized. Please try again, or post via the website if this continues.\n\n    email_reject_reply_key:\n      title: \"Email Reject Reply Key\"\n      subject_template: \"[%{email_prefix}] Email issue -- Unknown Reply Key\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The reply key in the email is invalid or unknown, so we can't figure out what this email is in reply to. [Contact a staff member](%{base_url}/about).\n\n    email_reject_bad_destination_address:\n      title: \"Email Reject Bad Destination Address\"\n      subject_template: \"[%{email_prefix}] Email issue -- Unknown To: Address\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Here are some things to check:\n\n          - Do you use more than one email address? Did you reply from a different email address than the one you originally used? Email replies require that you use the same email address when replying.\n\n          - Did your email software properly use the Reply-To: email address when replying? Unfortunately, some email software incorrectly sends replies to the From: address, which won\u2019t work.\n\n          - Was the Message-ID header in the email modified? The Message-ID must be consistent and unchanged.\n\n        Need more help? Reach out to us via the Contact Us details at %{base_url}/about\n\n    email_reject_old_destination:\n      title: \"Email Reject Old Destination\"\n      subject_template: \"[%{email_prefix}] Email issue -- You are trying to reply to an old notification\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        We only accept replies to original notifications for %{number_of_days} days. Please [visit the topic](%{short_url}) to continue the conversation.\n\n    email_reject_topic_not_found:\n      title: \"Email Reject Topic Not Found\"\n      subject_template: \"[%{email_prefix}] Email issue -- Topic Not Found\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The topic you are replying to no longer exists -- perhaps it was deleted? If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_topic_closed:\n      title: \"Email Reject Topic Closed\"\n      subject_template: \"[%{email_prefix}] Email issue -- Topic Closed\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The topic you are replying to is currently closed and no longer accepting replies. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_auto_generated:\n      title: \"Email Reject Auto Generated\"\n      subject_template: \"[%{email_prefix}] Email issue -- Auto Generated Reply\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your email was marked as \"auto generated\", which means it was automatically created by a computer instead of being typed by a human; we can't accept those kinds of emails. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_unrecognized_error:\n      title: \"Email Reject Unrecognized Error\"\n      subject_template: \"[%{email_prefix}] Email issue -- Unrecognized Error\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        There was an unrecognized error while processing your email and it wasn't posted. You should try again, or [contact a staff member](%{base_url}/about).\n\n    email_reject_attachment:\n      title: \"Email Attachment Rejected\"\n      subject_template: \"[%{email_prefix}] Email issue -- Attachment Rejected\"\n      text_body_template: |\n        Unfortunately some attachments in your email message to %{destination} (titled %{former_title}) were rejected.\n\n        Details:\n        %{rejected_errors}\n\n        If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_reply_not_allowed:\n      title: \"Email Reject Reply Not Allowed\"\n      subject_template: \"[%{email_prefix}] Email issue -- Reply Not Allowed\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        You don't have permissions to reply to the topic. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_reply_to_digest:\n      title: \"Email Reject Reply To Summary\"\n      subject_template: \"[%{email_prefix}] Email issue -- Reply to Summary\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        You replied to a Summary email, which is not accepted.\n\n        If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_too_many_recipients:\n      title: \"Email Reject Too Many Recipients\"\n      subject_template: \"[%{email_prefix}] Email issue -- Too Many Recipients\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        You attempted to email more than %{max_recipients_count} people and our system automatically tagged your email as spam.\n\n        If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_error_notification:\n      title: \"Email Error Notification\"\n      subject_template: \"[%{email_prefix}] Email issue -- POP authentication error\"\n      text_body_template: |\n        Unfortunately, there was an authentication error while polling mails from the POP server.\n\n        Please make sure you have properly configured the POP credentials in [the site settings](%{base_url}/admin/site_settings/category/email).\n\n        If there is a web UI for the POP email account, you may need to log in on the web and check your settings there.\n\n    email_revoked:\n      title: \"Email Revoked\"\n      subject_template: \"Is your email address correct?\"\n      text_body_template: |\n        We\u2019re sorry, but we\u2019re having trouble reaching you via email. Our last few emails to you have all bounced back as undeliverable.\n\n        Can you make sure [your email address](%{base_url}/my/preferences/email) is valid and working? You may also wish to add our email address to your address book / contact list to improve deliverability.\n\n    email_bounced: |\n      The message to %{email} bounced.\n\n      ### Details\n\n      ``` text\n      %{raw}\n      ```\n\n    ignored_users_summary:\n      title: \"Ignored User passed threshold\"\n      subject_template: \"A user is being ignored by many other users\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to inform you that @%{username} has been ignored by %{ignores_threshold} users. This could indicate a problem is developing in your community.\n\n        You might want to [review recent posts](%{base_url}/u/%{username}/summary) from this user, and potentially other users in the [ignored and muted user report](%{base_url}/admin/reports/top_ignored_users).\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n\n    too_many_spam_flags:\n      title: \"Too Many Spam Flags\"\n      subject_template: \"New account on hold\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your posts have been temporarily hidden because they were flagged by the community.\n\n        As a precautionary measure, your new account has been silenced and will be unable to create replies or topics until a staff member can review your account. We apologize for the inconvenience.\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n    too_many_tl3_flags:\n      title: \"Too Many TL3 Flags\"\n      subject_template: \"New account on hold\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know you that your account has been placed on hold due to a large number of community flags.\n\n        As a precautionary measure, your new account has been silenced from creating new replies or topics until a staff member can review your account. We apologize for the inconvenience.\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n    silenced_by_staff:\n      title: \"Silenced by Staff\"\n      subject_template: \"Account temporarily on hold\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your account has been temporarily placed on hold as a precautionary measure.\n\n        Please do continue to browse, but you won't be able to reply or create topics until a [staff member](%{base_url}/about) reviews your most recent posts. We apologize for the inconvenience.\n\n        For additional guidance, refer to our [community guidelines](%{base_url}/guidelines).\n\n    user_automatically_silenced:\n      title: \"User Automatically Silenced\"\n      subject_template: \"New user %{username} silenced by community flags\"\n      text_body_template: |\n        This is an automated message.\n\n        The new user [%{username}](%{user_url}) was automatically silenced because multiple users flagged %{username}'s post(s).\n\n        Please [review the flags](%{base_url}/admin/flags). If %{username} was incorrectly silenced from posting, click the unsilence button on [the admin page for this user](%{user_url}).\n\n        This threshold can be changed via the `silence_new_user` site settings.\n\n    spam_post_blocked:\n      title: \"Spam Post Blocked\"\n      subject_template: \"New user %{username} posts blocked due to repeated links\"\n      text_body_template: |\n        This is an automated message.\n\n        The new user [%{username}](%{user_url}) tried to create multiple posts with links to %{domains}, but those posts were blocked to avoid spam. The user is still able to create new posts that do not link to %{domains}.\n\n        Please [review the user](%{user_url}).\n\n        This can be modified via the `newuser_spam_host_threshold` and `allowed_spam_host_domains` site settings. Consider adding %{domains} to the allowlist if they should be exempt.\n\n    unsilenced:\n      title: \"Unsilenced\"\n      subject_template: \"Account no longer on hold\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your account is no longer on hold after staff review.\n\n        You can now create new replies and topics again. Thank you for your patience.\n\n    pending_users_reminder:\n      title: \"Pending Users Reminder\"\n      subject_template:\n        one: \"%{count} user waiting for approval\"\n        other: \"%{count} users waiting for approval\"\n      text_body_template: |\n        There are new user signups waiting to be approved (or rejected) before they can access this forum.\n\n        [Please review them](%{base_url}/review).\n\n    download_remote_images_disabled:\n      title: \"Download Remote Images Disabled\"\n      subject_template: \"Downloading remote images disabled\"\n      text_body_template: \"The `download_remote_images_to_local` setting was disabled because the disk space limit at `download_remote_images_threshold` was reached.\"\n\n    dashboard_problems:\n      title: \"Dashboard Problems\"\n      subject_template: \"New advice on your site dashboard\"\n      text_body_template: |\n        We have some new advice and recommendations for you based on your current site settings.\n\n        [Visit your site dashboard](%{base_url}/admin) to see it.\n\n        If nothing is visible on your dashboard, another staff member may have already acted on this advice. A list of staff actions can be found in your [Staff Action Logs](%{base_url}/admin/logs/staff_action_logs).\n\n    new_user_of_the_month:\n      title: \"You're a New User of the Month!\"\n      subject_template: \"You're a New User of the Month!\"\n      text_body_template: |\n        Congratulations, you've earned the **New User of the Month award for %{month_year}**. :trophy:\n\n        This award is only granted to two new users per month, and it will be permanently visible on [the badges page](%{url}).\n\n        You've quickly become a valuable member of our community. Thanks for joining, and keep up the great work!\n\n    queued_posts_reminder:\n      title: \"Queued Posts Reminder\"\n      subject_template:\n        one: \"%{count} post waiting to be reviewed\"\n        other: \"%{count} posts waiting to be reviewed\"\n      text_body_template: |\n        Hello,\n\n        Posts from new users were held for moderation and are currently waiting to be reviewed. [Approve or reject them here](%{base_url}/review?type=ReviewableQueuedPost).\n\n  unsubscribe_link: |\n    To unsubscribe from these emails, [click here](%{unsubscribe_url}).\n\n  unsubscribe_link_and_mail: |\n    To unsubscribe from these emails, [click here](%{unsubscribe_url}).\n\n  unsubscribe_mailing_list: |\n    You are receiving this because you enabled mailing list mode.\n\n    To unsubscribe from these emails, [click here](%{unsubscribe_url}).\n\n  subject_re: \"Re: \"\n  subject_pm: \"[PM] \"\n  email_from: \"%{user_name} via %{site_name}\"\n  email_from_without_site: \"%{group_name}\"\n\n  user_notifications:\n    previous_discussion: \"Previous Replies\"\n    reached_limit:\n      one: \"Heads up: We send a maximum of %{count} daily email. Check the site to see the ones that might be held back.\"\n      other: \"Heads up: We send a maximum of %{count} daily emails. Check the site to see the ones that might be held back. PS thanks for being popular!\"\n    in_reply_to: \"In Reply To\"\n    unsubscribe:\n      title: \"Unsubscribe\"\n      description: \"Not interested in getting these emails? No problem! Click below to unsubscribe instantly:\"\n\n    header_instructions: \"\"\n    reply_by_email: \"[Visit Topic](%{base_url}%{url}) or reply to this email to respond.\"\n    reply_by_email_pm: \"[Visit Message](%{base_url}%{url}) or reply to this email to respond to %{participants}.\"\n    only_reply_by_email: \"Reply to this email to respond.\"\n    only_reply_by_email_pm: \"Reply to this email to respond to %{participants}.\"\n    visit_link_to_respond: \"[Visit Topic](%{base_url}%{url}) to respond.\"\n    visit_link_to_respond_pm: \"[Visit Message](%{base_url}%{url}) to respond to %{participants}.\"\n    reply_above_line: \"## Please type your reply above this line. ##\"\n\n    posted_by: \"Posted by %{username} on %{post_date}\"\n\n    pm_participants: \"Participants: %{participants}\"\n    more_pm_participants:\n      one: \"%{participants} and %{count} other\"\n      other: \"%{participants} and %{count} others\"\n\n    invited_group_to_private_message_body: |\n      %{username} invited @%{group_name} to a message\n\n      > **[%{topic_title}](%{topic_url})**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      To join the message, click the link below:\n\n      %{topic_url}\n\n    invited_to_private_message_body: |\n      %{username} invited you to a message\n\n      > **[%{topic_title}](%{topic_url})**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      To join the message, click the link below:\n\n      %{topic_url}\n\n    invited_to_topic_body: |\n      %{username} invited you to a discussion\n\n      > **[%{topic_title}](%{topic_url})**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      To join the discussion, click the link below:\n\n      %{topic_url}\n\n    user_invited_to_private_message_pm_group:\n      title: \"User Invited Group to PM\"\n      subject_template: \"[%{email_prefix}] %{username} invited @%{group_name} to a message '%{topic_title}'\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{respond_instructions}\n\n    user_invited_to_private_message_pm:\n      title: \"User Invited to PM\"\n      subject_template: \"[%{email_prefix}] %{username} invited you to a message '%{topic_title}'\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{respond_instructions}\n\n    user_invited_to_private_message_pm_staged:\n      title: \"User Invited to PM Staged\"\n      subject_template: \"[%{email_prefix}] %{username} invited you to a message '%{topic_title}'\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{respond_instructions}\n\n    user_invited_to_topic:\n      title: \"User Invited to Topic\"\n      subject_template: \"[%{email_prefix}] %{username} invited you to '%{topic_title}'\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{respond_instructions}\n\n    user_replied:\n      title: \"User Replied\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_replied_pm:\n      title: \"User Replied PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_quoted:\n      title: \"User Quoted\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_linked:\n      title: \"User Linked\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_mentioned:\n      title: \"User Mentioned\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_mentioned_pm:\n      title: \"User Mentioned PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_group_mentioned:\n      title: \"User Group Mentioned\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_group_mentioned_pm:\n      title: \"User Group Mentioned PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_group_mentioned_pm_group:\n      title: \"User Group Mentioned PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_posted:\n      title: \"User Posted\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_watching_first_post:\n      title: \"User Watching First Post\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_posted_pm:\n      title: \"User Posted PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_posted_pm_staged:\n      title: \"User Posted PM Staged\"\n      subject_template: \"%{optional_re}%{topic_title}\"\n      text_body_template: |\n\n        %{message}\n\n    account_suspended:\n      title: \"Account Suspended\"\n      subject_template: \"[%{email_prefix}] Your account has been suspended\"\n      text_body_template: |\n        You have been suspended from the forum until %{suspended_till}.\n\n        Reason - %{reason}\n\n    account_suspended_forever:\n      title: \"Account Suspended\"\n      subject_template: \"[%{email_prefix}] Your account has been suspended\"\n      text_body_template: |\n        You have been suspended from the forum.\n\n        Reason - %{reason}\n\n    account_silenced:\n      title: \"Account Silenced\"\n      subject_template: \"[%{email_prefix}] Your account has been silenced\"\n      text_body_template: |\n        You have been silenced from the forum until %{silenced_till}.\n\n        Reason - %{reason}\n\n    account_silenced_forever:\n      title: \"Account Silenced\"\n      subject_template: \"[%{email_prefix}] Your account has been silenced\"\n      text_body_template: |\n        You have been silenced from the forum.\n\n        Reason - %{reason}\n\n    account_exists:\n      title: \"Account already exists\"\n      subject_template: \"[%{email_prefix}] Account already exists\"\n      text_body_template: |\n        You just tried to create an account at %{site_name}, or tried to change the email of an account to %{email}. However, an account already exists for %{email}.\n\n        If you forgot your password, [reset it now](%{base_url}/password-reset).\n\n        If you didn\u2019t try to create an account for %{email} or change your email address, don\u2019t worry \u2013 you can safely ignore this message.\n\n        If you have any questions, [contact our friendly staff](%{base_url}/about).\n\n    account_second_factor_disabled:\n      title: \"Two-Factor Authentication disabled\"\n      subject_template: \"[%{email_prefix}] Two-Factor Authentication disabled\"\n      text_body_template: |\n        Two-factor authentication has been disabled on your account at %{site_name}. You can now log in with only your password; an additional authentication code is no longer required.\n\n        If you did not choose to disable two-factor authentication, someone may have compromised your account.\n\n        If you have any questions, [contact our friendly staff](%{base_url}/about).\n\n    digest:\n      why: \"A brief summary of %{site_link} since your last visit on %{last_seen_at}\"\n      since_last_visit: \"Since your last visit\"\n      new_topics: \"New Topics\"\n      unread_notifications: \"Unread Notifications\"\n      unread_high_priority: \"Unread High Priority Notifications\"\n      liked_received: \"Likes Received\"\n      new_users: \"New Users\"\n      popular_topics: \"Popular Topics\"\n      follow_topic: \"Follow this topic\"\n      join_the_discussion: \"Read More\"\n      popular_posts: \"Popular Posts\"\n      more_new: \"New for you\"\n      subject_template: \"[%{email_prefix}] Summary\"\n      unsubscribe: \"This summary is sent from %{site_link} when we haven't seen you in a while. Change %{email_preferences_link}, or %{unsubscribe_link} to unsubscribe.\"\n      your_email_settings: \"your email settings\"\n      click_here: \"click here\"\n      from: \"%{site_name}\"\n      preheader: \"A brief summary since your last visit on %{last_seen_at}\"\n      custom:\n        html:\n          header: \"\"\n          below_post_1: \"\"\n          below_post_2: \"\"\n          below_post_3: \"\"\n          below_post_4: \"\"\n          below_post_5: \"\"\n          above_popular_topics: \"\"\n          below_popular_topics: \"\"\n          above_footer: \"\"\n          below_footer: \"\"\n        text:\n          below_post_1: \"\"\n          below_post_2: \"\"\n          below_post_3: \"\"\n          below_post_4: \"\"\n          below_post_5: \"\"\n          above_popular_topics: \"\"\n          below_popular_topics: \"\"\n          above_footer: \"\"\n          below_footer: \"\"\n\n    forgot_password:\n      title: \"Forgot Password\"\n      subject_template: \"[%{email_prefix}] Password reset\"\n      text_body_template: |\n        Somebody asked to reset your password on [%{site_name}](%{base_url}).\n\n        If it was not you, you can safely ignore this email.\n\n        Click the following link to choose a new password:\n        %{base_url}/u/password-reset/%{email_token}\n\n    email_login:\n      title: \"Log in via link\"\n      subject_template: \"[%{email_prefix}] Log in via link\"\n      text_body_template: |\n        Here's your link to log in at [%{site_name}](%{base_url}).\n\n        If you did not request this link, you can safely ignore this email.\n\n        Click the following link to log in:\n        %{base_url}/session/email-login/%{email_token}\n\n    set_password:\n      title: \"Set Password\"\n      subject_template: \"[%{email_prefix}] Set Password\"\n      text_body_template: |\n        Somebody asked to add a password to your account on [%{site_name}](%{base_url}). Alternatively, you can log in using any supported online service (Google, Facebook, etc) that is associated with this validated email address.\n\n        If you did not make this request, you can safely ignore this email.\n\n        Click the following link to choose a password:\n        %{base_url}/u/password-reset/%{email_token}\n\n    admin_login:\n      title: \"Admin Login\"\n      subject_template: \"[%{email_prefix}] Login\"\n      text_body_template: |\n        Somebody asked to log in to your account on [%{site_name}](%{base_url}).\n\n        If you did not make this request, you can safely ignore this email.\n\n        Click the following link to log in:\n        %{base_url}/session/email-login/%{email_token}\n\n    account_created:\n      title: \"Account Created\"\n      subject_template: \"[%{email_prefix}] Your New Account\"\n      text_body_template: |\n        A new account was created for you at %{site_name}\n\n        Click the following link to choose a password for your new account:\n        %{base_url}/u/password-reset/%{email_token}\n\n    confirm_new_email:\n      title: \"Confirm New Email\"\n      subject_template: \"[%{email_prefix}] Confirm your new email address\"\n      text_body_template: |\n        Confirm your new email address for %{site_name} by clicking on the following link:\n\n        %{base_url}/u/confirm-new-email/%{email_token}\n\n        If you did not request this change, please contact a [site admin](%{base_url}/about).\n\n    confirm_new_email_via_admin:\n      title: \"Confirm New Email\"\n      subject_template: \"[%{email_prefix}] Confirm your new email address\"\n      text_body_template: |\n        Confirm your new email address for %{site_name} by clicking on the following link:\n\n        %{base_url}/u/confirm-new-email/%{email_token}\n\n        This email change was requested by a site admin. If you did not request this change, please contact a [site admin](%{base_url}/about).\n\n    confirm_old_email:\n      title: \"Confirm Old Email\"\n      subject_template: \"[%{email_prefix}] Confirm your current email address\"\n      text_body_template: |\n        Before we can change your email address, we need you to confirm that you control\n        the current email account. After you complete this step, we will have you confirm\n        the new email address.\n\n        Confirm your current email address for %{site_name} by clicking on the following link:\n\n        %{base_url}/u/confirm-old-email/%{email_token}\n\n    confirm_old_email_add:\n      title: \"Confirm Old Email (Add)\"\n      subject_template: \"[%{email_prefix}] Confirm your current email address\"\n      text_body_template: |\n        Before we can add a new email address, we need you to confirm that you control\n        the current email account. After you complete this step, we will have you confirm\n        the new email address.\n\n        Confirm your current email address for %{site_name} by clicking on the following link:\n\n        %{base_url}/u/confirm-old-email/%{email_token}\n\n    notify_old_email:\n      title: \"Notify Old Email\"\n      subject_template: \"[%{email_prefix}] Your email address has been changed\"\n      text_body_template: |\n        This is an automated message to let you know that your email address for\n        %{site_name} has been changed. If this was done in error, please contact\n        a site administrator.\n\n        Your email address has been changed to:\n\n        %{new_email}\n\n    notify_old_email_add:\n      title: \"Notify Old Email (Add)\"\n      subject_template: \"[%{email_prefix}] A new email address has been added\"\n      text_body_template: |\n        This is an automated message to let you know that an email address for\n        %{site_name} has been added. If this was done in error, please contact\n        a site administrator.\n\n        Your added email address is:\n\n        %{new_email}\n\n    signup_after_approval:\n      title: \"Signup After Approval\"\n      subject_template: \"You've been approved on %{site_name}!\"\n      text_body_template: |\n        Welcome to %{site_name}!\n\n        A staff member approved your account on %{site_name}.\n\n        You can now access your new account by logging in at:\n        %{base_url}\n\n        If the above link is not clickable, try copying and pasting it into the address bar of your web browser.\n\n        %{new_user_tips}\n\n        We believe in [civilized community behavior](%{base_url}/guidelines) at all times.\n\n        Enjoy your stay!\n\n    signup_after_reject:\n      title: \"Signup After Reject\"\n      subject_template: \"You've been rejected on %{site_name}\"\n      text_body_template: |\n        A staff member rejected your account on %{site_name}.\n\n        %{reject_reason}\n\n    signup:\n      title: \"Signup\"\n      subject_template: \"[%{email_prefix}] Confirm your new account\"\n      text_body_template: |\n        Welcome to %{site_name}!\n\n        Click the following link to confirm and activate your new account:\n        %{base_url}/u/activate-account/%{email_token}\n\n        If the above link is not clickable, try copying and pasting it into the address bar of your web browser.\n\n    activation_reminder:\n      title: \"Activation Reminder\"\n      subject_template: \"[%{email_prefix}] Reminder to confirm your account\"\n      text_body_template: |\n        Welcome to %{site_name}!\n\n        This is a friendly reminder to activate your account.\n\n        Click the following link to confirm and activate your new account:\n        %{base_url}/u/activate-account/%{email_token}\n\n        If the above link is not clickable, try copying and pasting it into the address bar of your web browser.\n\n    suspicious_login:\n      title: \"New Login Alert\"\n      subject_template: \"[%{site_name}] New Login from %{location}\"\n      text_body_template: |\n        Hello,\n\n        We noticed a login from a device or location you don\u2019t usually use. Was this you?\n\n         - Location: %{location} (%{client_ip})\n         - Browser: %{browser}\n         - Device: %{device} \u2013 %{os}\n\n        If this was you, great! There\u2019s nothing else you need to do.\n\n        If this was not you, please [review your existing sessions](%{base_url}/my/preferences/security) and consider changing your password.\n\n    post_approved:\n      title: \"Your post was approved\"\n      subject_template: \"[%{site_name}] Your post was approved\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that [your post](%{base_url}%{post_url}) was approved.\n  page_forbidden:\n    title: \"Oops! That page is private.\"\n\n  site_setting_missing: \"`%{name}` site setting has to be set.\"\n\n  page_not_found:\n    page_title: \"Page Not Found\"\n    title: \"Oops! That page doesn\u2019t exist or is private.\"\n    popular_topics: \"Popular\"\n    recent_topics: \"Recent\"\n    see_more: \"More\"\n    search_title: \"Search this site\"\n    search_button: \"Search\"\n\n  offline:\n    title: \"Cannot load app\"\n    offline_page_message: \"It looks like you are offline! Please check your network connection and try again.\"\n\n  login_required:\n    welcome_message: |\n      ## [Welcome to %{title}](#welcome)\n      An account is required. Please create an account or log in to continue.\n    welcome_message_invite_only: |\n      ## [Welcome to %{title}](#welcome)\n      An account is required. Please ask an existing member for an invite or log in to continue.\n\n  deleted: \"deleted\"\n\n  image: \"image\"\n\n  upload:\n    edit_reason: \"downloaded local copies of images\"\n    unauthorized: \"Sorry, the file you are trying to upload is not authorized (authorized extensions: %{authorized_extensions}).\"\n    pasted_image_filename: \"Pasted image\"\n    store_failure: \"Failed to store upload #%{upload_id} for user #%{user_id}.\"\n    file_missing: \"Sorry, you must provide a file to upload.\"\n    empty: \"Sorry, but the file you provided is empty.\"\n    failed: \"Sorry, but your upload failed. Please try again.\"\n    png_to_jpg_conversion_failure_message: \"An error happened when converting from PNG to JPG.\"\n    optimize_failure_message: \"An error occurred while optimizing the uploaded image.\"\n    download_failure: \"Downloading the file from the external provider failed.\"\n    size_mismatch_failure: \"The size of the file uploaded to S3 did not match the external upload's intended size. %{additional_detail}\"\n    create_multipart_failure: \"Failed to create multipart upload in the external store.\"\n    abort_multipart_failure: \"Failed to abort multipart upload in the external store.\"\n    complete_multipart_failure: \"Failed to complete multipart upload in the external store.\"\n    external_upload_not_found: \"The upload was not found in the external store. %{additional_detail}\"\n    checksum_mismatch_failure: \"The checksum of the file you uploaded does not match. The file contents may have changed on upload. Please try again.\"\n    cannot_promote_failure: \"The upload cannot be completed, it may have already completed or previously failed.\"\n    size_zero_failure: \"Sorry, it looks like something has gone wrong, the file you are trying to upload is 0 bytes. Please try again.\"\n    attachments:\n      too_large: \"Sorry, the file you are trying to upload is too big (maximum size is %{max_size_kb}KB).\"\n      too_large_humanized: \"Sorry, the file you are trying to upload is too big (maximum size is %{max_size}).\"\n    images:\n      too_large: \"Sorry, the image you are trying to upload is too big (maximum size is %{max_size_kb}KB), please resize it and try again.\"\n      too_large_humanized: \"Sorry, the image you are trying to upload is too big (maximum size is %{max_size}), please resize it and try again.\"\n      larger_than_x_megapixels: \"Sorry, the image you are trying to upload is too large (maximum dimension is %{max_image_megapixels}-megapixels), please resize it and try again.\"\n      size_not_found: \"Sorry, but we couldn't determine the size of the image. Maybe your image is corrupted?\"\n    placeholders:\n      too_large: \"(image larger than %{max_size_kb}KB)\"\n      too_large_humanized: \"(image larger than %{max_size})\"\n\n  avatar:\n    missing: \"Sorry, we can't find any avatar associated with that email address. Can you try uploading it again?\"\n\n  flag_reason:\n    sockpuppet: \"A new user created a topic, and another new user at the same IP address (%{ip_address}) replied. See the <a href='%{base_path}/admin/site_settings/category/spam'>`flag_sockpuppets`</a> site setting.\"\n    spam_hosts: \"This new user tried to create multiple posts with links to the same domain. All posts from this user that include links should be reviewed. See the <a href='%{base_path}/admin/site_settings/category/spam'>`newuser_spam_host_threshold`</a> site setting.\"\n\n  skipped_email_log:\n    exceeded_emails_limit: \"Exceeded max_emails_per_day_per_user\"\n    exceeded_bounces_limit: \"Exceeded bounce_score_threshold\"\n    mailing_list_no_echo_mode: \"Mailing list notifications disabled for user's own posts\"\n    user_email_no_user: \"Can't find user with id %{user_id}\"\n    user_email_post_not_found: \"Can't find a post with id %{post_id}\"\n    user_email_anonymous_user: \"User is anonymous\"\n    user_email_user_suspended_not_pm: \"User is suspended, not a message\"\n    user_email_seen_recently: \"User was seen recently\"\n    user_email_notification_already_read: \"The notification this email is about has already been read\"\n    user_email_notification_topic_nil: \"post.topic is nil\"\n    user_email_post_user_deleted: \"User of the post has been deleted.\"\n    user_email_post_deleted: \"post was deleted by the author\"\n    user_email_user_suspended: \"user was suspended\"\n    user_email_already_read: \"user has already read this post\"\n    user_email_access_denied: \"user is not allowed to see this post\"\n    user_email_no_email: \"No email associated with user id %{user_id}\"\n    sender_message_blank: \"message is blank\"\n    sender_message_to_blank: \"message.to is blank\"\n    sender_text_part_body_blank: \"text_part.body is blank\"\n    sender_body_blank: \"body is blank\"\n    sender_post_deleted: \"post has been deleted\"\n    sender_message_to_invalid: \"recipient has invalid email address\"\n    sender_topic_deleted: \"topic has been deleted\"\n    group_smtp_post_deleted: \"post has been deleted\"\n    group_smtp_topic_deleted: \"topic has been deleted\"\n    group_smtp_disabled_for_group: \"smtp has been disabled for the group\"\n\n  color_schemes:\n    base_theme_name: \"Base\"\n    light: \"Light\"\n    dark: \"Dark\"\n    neutral: \"Neutral\"\n    grey_amber: \"Grey Amber\"\n    shades_of_blue: \"Shades of Blue\"\n    latte: \"Latte\"\n    summer: \"Summer\"\n    dark_rose: \"Dark Rose\"\n    wcag: \"WCAG Light\"\n    wcag_theme_name: \"WCAG Light\"\n    dracula: \"Dracula\"\n    dracula_theme_name: \"Dracula\"\n    solarized_light: \"Solarized Light\"\n    solarized_light_theme_name: \"Solarized Light\"\n    solarized_dark: \"Solarized Dark\"\n    solarized_dark_theme_name: \"Solarized Dark\"\n    wcag_dark: \"WCAG Dark\"\n    wcag_dark_theme_name: \"WCAG Dark\"\n    default_theme_name: \"Default\"\n    light_theme_name: \"Light\"\n    dark_theme_name: \"Dark\"\n    neutral_theme_name: \"Neutral\"\n    grey_amber_theme_name: \"Grey Amber\"\n    shades_of_blue_theme_name: \"Shades of Blue\"\n    latte_theme_name: \"Latte\"\n    summer_theme_name: \"Summer\"\n    dark_rose_theme_name: \"Dark Rose\"\n\n  edit_this_page: \"Edit this page\"\n\n  csv_export:\n    boolean_yes: \"Yes\"\n    boolean_no: \"No\"\n    rate_limit_error: \"Posts can be downloaded once per day, please try again tomorrow.\"\n\n  static_topic_first_reply: |\n    Edit the first post in this topic to change the contents of the %{page_name} page.\n\n  guidelines_topic:\n    title: \"FAQ/Guidelines\"\n    body: |\n      <a name=\"civilized\"></a>\n\n      ## [This is a Civilized Place for Public Discussion](#civilized)\n\n      Please treat this discussion forum with the same respect you would a public park. We, too, are a shared community resource &mdash; a place to share skills, knowledge and interests through ongoing conversation.\n\n      These are not hard and fast rules. They are guidelines to aid the human judgment of our community and keep this a kind, friendly place for civilized public discourse.\n\n      <a name=\"improve\"></a>\n\n      ## [Improve the Discussion](#improve)\n\n      Help us make this a great place for discussion by always adding something positive to the discussion, however small. If you are not sure your post adds to the conversation, think over what you want to say and try again later.\n\n      One way to improve the discussion is by discovering ones that are already happening. Spend time browsing the topics here before replying or starting your own, and you\u2019ll have a better chance of meeting others who share your interests.\n\n      The topics discussed here matter to us, and we want you to act as if they matter to you, too. Be respectful of the topics and the people discussing them, even if you disagree with some of what is being said.\n\n      <a name=\"agreeable\"></a>\n\n      ## [Be Agreeable, Even When You Disagree](#agreeable)\n\n      You may wish to respond by disagreeing. That\u2019s fine. But remember to _criticize ideas, not people_. Please avoid:\n\n      * Name-calling\n      * Ad hominem attacks\n      * Responding to a post\u2019s tone instead of its actual content\n      * Knee-jerk contradiction\n\n      Instead, provide thoughtful insights that improve the conversation.\n\n      <a name=\"participate\"></a>\n\n      ## [Your Participation Counts](#participate)\n\n      The conversations we have here set the tone for every new arrival. Help us influence the future of this community by choosing to engage in discussions that make this forum an interesting place to be &mdash; and avoiding those that do not.\n\n      Discourse provides tools that enable the community to collectively identify the best (and worst) contributions: bookmarks, likes, flags, replies, edits, watching, muting and so forth. Use these tools to improve your own experience, and everyone else\u2019s, too.\n\n      Let\u2019s leave our community better than we found it.\n\n      <a name=\"flag-problems\"></a>\n\n      ## [If You See a Problem, Flag It](#flag-problems)\n\n      Moderators have special authority; they are responsible for this forum. But so are you. With your help, moderators can be community facilitators, not just janitors or police.\n\n      When you see bad behavior, don\u2019t reply. Replying encourages bad behavior by acknowledging it, consumes your energy, and wastes everyone\u2019s time. _Just flag it_. If enough flags accrue, action will be taken, either automatically or by moderator intervention.\n\n      In order to maintain our community, moderators reserve the right to remove any content and any user account for any reason at any time. Moderators do not preview new posts; the moderators and site operators take no responsibility for any content posted by the community.\n\n      <a name=\"be-civil\"></a>\n\n      ## [Always Be Civil](#be-civil)\n\n      Nothing sabotages a healthy conversation like rudeness:\n\n      * Be civil. Don\u2019t post anything that a reasonable person would consider offensive, abusive, or hate speech.\n      * Keep it clean. Don\u2019t post anything obscene or sexually explicit.\n      * Respect each other. Don\u2019t harass or grief anyone, impersonate people, or expose their private information.\n      * Respect our forum. Don\u2019t post spam or otherwise vandalize the forum.\n\n      These are not concrete terms with precise definitions &mdash; avoid even the _appearance_ of any of these things. If you\u2019re unsure, ask yourself how you would feel if your post was featured on the front page of a major news site.\n\n      This is a public forum, and search engines index these discussions. Keep the language, links, and images safe for family and friends.\n\n      <a name=\"keep-tidy\"></a>\n\n      ## [Keep It Tidy](#keep-tidy)\n\n      Make the effort to put things in the right place, so that we can spend more time discussing and less cleaning up. So:\n\n      * Don\u2019t start a topic in the wrong category; please read the category definitions.\n      * Don\u2019t cross-post the same thing in multiple topics.\n      * Don\u2019t post no-content replies.\n      * Don\u2019t divert a topic by changing it midstream.\n      * Don\u2019t sign your posts &mdash; every post has your profile information attached to it.\n\n      Rather than posting \u201c+1\u201d or \u201cAgreed\u201d, use the Like button. Rather than taking an existing topic in a radically different direction, use Reply as a Linked Topic.\n\n      <a name=\"stealing\"></a>\n\n      ## [Post Only Your Own Stuff](#stealing)\n\n      You may not post anything digital that belongs to someone else without permission. You may not post descriptions of, links to, or methods for stealing someone\u2019s intellectual property (software, video, audio, images), or for breaking any other law.\n\n      <a name=\"power\"></a>\n\n      ## [Powered by You](#power)\n\n      This site is operated by your [friendly local staff](%{base_path}/about) and *you*, the community. If you have any further questions about how things should work here, open a new topic in the [site feedback category](%{base_path}/c/site-feedback) and let\u2019s discuss! If there\u2019s a critical or urgent issue that can\u2019t be handled by a meta topic or flag, contact us via the [staff page](%{base_path}/about).\n\n      <a name=\"tos\"></a>\n\n      ## [Terms of Service](#tos)\n\n      Yes, legalese is boring, but we must protect ourselves &ndash; and by extension, you and your data &ndash; against unfriendly folks. We have a [Terms of Service](%{base_path}/tos) describing your (and our) behavior and rights related to content, privacy, and laws. To use this service, you must agree to abide by our [TOS](%{base_path}/tos).\n\n  tos_topic:\n    title: \"Terms of Service\"\n    body: |\n      These terms govern use of the Internet forum at <%{base_url}>. To use the forum, you must agree to these terms with %{company_name}, the company that runs the forum.\n\n      The company may offer other products and services, under different terms. These terms apply only to use of the forum.\n\n      Skip to:\n\n      - [Important Terms](#heading--important-terms)\n      - [Your Permission to Use the Forum](#heading--permission)\n      - [Conditions for Use of the Forum](#heading--conditions)\n      - [Acceptable Use](#heading--acceptable-use)\n      - [Content Standards](#heading--content-standards)\n      - [Enforcement](#heading--enforcement)\n      - [Your Account](#heading--your-account)\n      - [Your Content](#heading--your-content)\n      - [Your Responsibility](#heading--responsibility)\n      - [Disclaimers](#heading--disclaimers)\n      - [Limits on Liability](#heading--liability)\n      - [Feedback](#heading--feedback)\n      - [Termination](#heading--termination)\n      - [Disputes](#heading--disputes)\n      - [General Terms](#heading--general)\n      - [Contact](#heading--contact)\n      - [Changes](#heading--changes)\n\n      <h2 id=\"heading--important-terms\"><a href=\"#heading--important-terms\">Important Terms</a></h2>\n\n      ***These terms include a number of important provisions that affect your rights and responsibilities, such as the disclaimers in [Disclaimers](#heading--disclaimers), limits on the company's liability to you in [Limits on Liability](#heading--liability), your agreement to cover the company for damages caused by your misuse of the forum in [Responsibility for Your Use](#heading--responsibility), and an agreement to arbitrate disputes in [Disputes](#heading--disputes).***\n\n      <h2 id=\"heading--permission\"><a href=\"#heading--permission\">Your Permission to Use the Forum</a></h2>\n\n      Subject to these terms, the company gives you permission to use the forum. Everyone needs to agree to these terms to use the forum.\n\n      <h2 id=\"heading--conditions\"><a href=\"#heading--conditions\">Conditions for Use of the Forum</a></h2>\n\n      Your permission to use the forum is subject to the following conditions:\n\n      1. You must be at least thirteen years old.\n\n      2. You may no longer use the forum if the company contacts you directly to say that you may not.\n\n      3. You must use the forum in accordance with [Acceptable Use](#heading--acceptable-use) and [Content Standards](#heading--content-standards).\n\n      <h2 id=\"heading--acceptable-use\"><a href=\"#heading--acceptable-use\">Acceptable Use</a></h2>\n\n      1. You may not break the law using the forum.\n\n      2. You may not use or try to use another's account on the forum without their specific permission.\n\n      3. You may not buy, sell, or otherwise trade in user names or other unique identifiers on the forum.\n\n      4. You may not send advertisements, chain letters, or other solicitations through the forum, or use the forum to gather addresses or other personal data for commercial mailing lists or databases.\n\n      5. You may not automate access to the forum, or monitor the forum, such as with a web crawler, browser plug-in or add-on, or other computer program that is not a web browser. You may crawl the forum to index it for a publicly available search engine, if you run one.\n\n      6. You may not use the forum to send e-mail to distribution lists, newsgroups, or group mail aliases.\n\n      7. You may not falsely imply that you're affiliated with or endorsed by the company.\n\n      8. You may not hyperlink to images or other non-hypertext content on the forum on other webpages.\n\n      9. You may not remove any marks showing proprietary ownership from materials you download from the forum.\n\n      10. You may not show any part of the forum on other websites with `<iframe>`.\n\n      11. You may not disable, avoid, or circumvent any security or access restrictions of the forum.\n\n      12. You may not strain infrastructure of the forum with an unreasonable volume of requests, or requests designed to impose an unreasonable load on information systems underlying the forum.\n\n      13. You may not impersonate others through the forum.\n\n      14. You may not encourage or help anyone in violation of these terms.\n\n      <h2 id=\"heading--content-standards\"><a href=\"#heading--content-standards\">Content Standards</a></h2>\n\n      1. You may not submit content to the forum that is illegal, offensive, or otherwise harmful to others. This includes content that is harassing, inappropriate, or abusive.\n\n      2. You may not submit content to the forum that violates the law, infringes anyone's intellectual property rights, violates anyone's privacy, or breaches agreements you have with others.\n\n      3. You may not submit content to the forum containing malicious computer code, such as computer viruses or spyware.\n\n      4. You may not submit content to the forum as a mere placeholder, to hold a particular address, user name, or other unique identifier.\n\n      5. You may not use the forum to disclose information that you don't have the right to disclose, like others' confidential or personal information.\n\n      <h2 id=\"heading--enforcement\"><a href=\"#heading--enforcement\">Enforcement</a></h2>\n\n      The company may investigate and prosecute violations of these terms to the fullest legal extent. The company may notify and cooperate with law enforcement authorities in prosecuting violations of the law and these terms.\n\n      The company reserves the right to change, redact, and delete content on the forum for any reason. If you believe someone has submitted content to the forum in violation of these terms, [contact us immediately](#heading--contact).\n\n      <h2 id=\"heading--your-account\"><a href=\"#heading--your-account\">Your Account</a></h2>\n\n      You must create and log into an account to use some features of the forum.\n\n      To create an account, you must provide some information about yourself. If you create an account, you agree to provide, at a minimum, a valid e-mail address, and to keep that address up-to-date. You may close your account at any time by e-mailing <%{contact_email}>.\n\n      You agree to be responsible for all action taken using your account, whether authorized by you or not, until you either close your account or notify the company that your account has been compromised. You agree to notify the company immediately if you suspect your account has been compromised. You agree to select a secure password for your account, and keep it secret.\n\n      The company may restrict, suspend, or close your account on the forum according to its policy for handling copyright-related takedown requests, or if the company reasonably believes that you've broken any rule in these terms.\n\n      <h2 id=\"heading--your-content\"><a href=\"#heading--your-content\">Your Content</a></h2>\n\n      Nothing in these terms gives the company any ownership rights in intellectual property that you share with the forum, such as your account information, posts, or other content you submit to the forum. Nothing in these terms gives you any ownership rights in the company's intellectual property, either.\n\n      Between you and the company, you remain solely responsible for content you submit to the forum. You agree not to wrongly imply that content you submit to the forum is sponsored or approved by the company. These terms do not obligate the company to store, maintain, or provide copies of content you submit, and to change it, according to these terms.\n\n      Content you submit to the forum belongs to you, and you decide what permission to give others for it. But at a minimum, you license the company to provide content that you submit to the forum to other users of the forum. That special license allows the company to copy, publish, and analyze content you submit to the forum.\n\n      When content you submit is removed from the forum, whether by you or by the company, the company's special license ends when the last copy disappears from the company's backups, caches, and other systems. Other licenses you apply to content you submit, such as [Creative Commons](https://creativecommons.org) licenses, may continue after your content is removed. Those licenses may give others, or the company itself, the right to share your content through the forum again.\n\n      Others who receive content you submit to the forum may violate the terms on which you license your content. You agree that the company will not be liable to you for those violations or their consequences.\n\n      <h2 id=\"heading--responsibility\"><a href=\"#heading--responsibility\">Your Responsibility</a></h2>\n\n      You agree to indemnify the company from legal claims by others related to your breach of these terms, or breach of these terms by others using your account on the forum. Both you and the company agree to notify the other side of any legal claims for which you might have to indemnify the company as soon as possible. If the company fails to notify you of a legal claim promptly, you won't have to indemnify the company for damages that you could have defended against or mitigated with prompt notice. You agree to allow the company to control investigation, defense, and settlement of legal claims for which you would have to indemnify the company, and to cooperate with those efforts. The company agrees not to agree to any settlement that admits fault for you or imposes obligations on you without your prior agreement.\n\n      <h2 id=\"heading--disclaimers\"><a href=\"#heading--disclaimers\">Disclaimers</a></h2>\n\n      ***You accept all risk of using the forum and content on the forum. As far as the law allows, the company and its suppliers provide the forum as is, without any warranty whatsoever.***\n\n      The forum may hyperlink to and integrate forums and services run by others. The company does not make any warranty about services run by others, or content they may provide. Use of services run by others may be governed by other terms between you and the one running service.\n\n      <h2 id=\"heading--liability\"><a href=\"#heading--liability\">Limits on Liability</a></h2>\n\n      ***Neither the company nor its suppliers will be liable to you for breach-of-contract damages their personnel could not have reasonably foreseen when you agreed to these terms.***\n\n      ***As far as the law allows, the total liability to you for claims of any kind that are related to the forum or content on the forum will be limited to $50.***\n\n      <h2 id=\"heading--feedback\"><a href=\"#heading--feedback\">Feedback</a></h2>\n\n      The company welcomes your feedback and suggestions for the forum. See the [Contact](#heading--contact) section below for ways to get in touch with us.\n\n      You agree that the company will be free to act on feedback and suggestions you provide, and that the company won't have to notify you that your feedback was used, get your permission to use it, or pay you. You agree not to submit feedback or suggestions that you believe might be confidential or proprietary, to you or others.\n\n      <h2 id=\"heading--termination\"><a href=\"#heading--termination\">Termination</a></h2>\n\n      Either you or the company may end the agreement written out in these terms at any time. When our agreement ends, your permission to use the forum also ends.\n\n      The following provisions survive the end of our agreement: [Your Content](#heading--your-content), [Feedback](#heading--feedback), [Your Responsibility](#heading--responsibility), [Disclaimers](#heading--disclaimers), [Limits on Liability](#heading--liability), and [General Terms](#heading--general).\n\n      <h2 id=\"heading--disputes\"><a href=\"#heading--disputes\">Disputes</a></h2>\n\n      %{governing_law} will govern any dispute related to these terms or your use of the forum.\n\n      You and the company agree to seek injunctions related to these terms only in state or federal court in %{city_for_disputes}. Neither you nor the company will object to jurisdiction, forum, or venue in those courts.\n\n      ***Other than to seek an injunction or for claims under the Computer Fraud and Abuse Act, you and the company will resolve any dispute by binding American Arbitration Association arbitration. Arbitration will follow the AAA's Commercial Arbitration Rules and Supplementary Procedures for Consumer Related Disputes. Arbitration will happen in %{city_for_disputes}. You will settle any dispute as an individual, and not as part of a class action or other representative proceeding, whether as the plaintiff or a class member. No arbitrator will consolidate any dispute with any other arbitration without the company's permission.***\n\n      Any arbitration award will include costs of the arbitration, reasonable attorneys' fees, and reasonable costs for witnesses. You and the company may enter arbitration awards in any court with jurisdiction.\n\n      <h2 id=\"heading--general\"><a href=\"#heading--general\">General Terms</a></h2>\n\n      If a provision of these terms is unenforceable as written, but could be changed to make it enforceable, that provision should be modified to the minimum extent necessary to make it enforceable. Otherwise, that provision should be removed.\n\n      You may not assign your agreement with the company. The company may assign your agreement to any affiliate of the company, any other company that obtains control of the company, or any other company that buys assets of the company related to the forum. Any attempted assignment against these terms has no legal effect.\n\n      Neither the exercise of any right under this Agreement, nor waiver of any breach of this Agreement, waives any other breach of this Agreement.\n\n      These terms embody all the terms of agreement between you and the company about use of the forum. These terms entirely replace any other agreements about your use of the forum, written or not.\n\n      <h2 id=\"heading--contact\"><a href=\"#heading--contact\">Contact</a></h2>\n\n      You may notify the company under these terms, and send questions to the company, at <%{contact_email}>.\n\n      The company may notify you under these terms using the e-mail address you provide for your account on the forum, or by posting a message to the homepage of the forum or your account page.\n\n      <h2 id=\"heading--changes\"><a href=\"#heading--changes\">Changes</a></h2>\n\n      The company last updated these terms on July 12, 2018, and may update these terms again. The company will post all updates to the forum. For updates that contain substantial changes, the company agrees to e-mail you, if you've created an account and provided a valid e-mail address. The company may also announce updates with special messages or alerts on the forum.\n\n      Once you get notice of an update to these terms, you must agree to the new terms in order to keep using the forum.\n\n  privacy_topic:\n    title: \"Privacy Policy\"\n    body: |\n      <a name=\"collect\"></a>\n\n      ## [What information do we collect?](#collect)\n\n      We collect information from you when you register on our site and gather data when you participate in the forum by reading, writing, and evaluating the content shared here.\n\n      When registering on our site, you may be asked to enter your name and e-mail address. You may, however, visit our site without registering. Your e-mail address will be verified by an email containing a unique link. If that link is visited, we know that you control the e-mail address.\n\n      When registered and posting, we record the IP address that the post originated from. We also may retain server logs which include the IP address of every request to our server.\n\n      <a name=\"use\"></a>\n\n      ## [What do we use your information for?](#use)\n\n      Any of the information we collect from you may be used in one of the following ways:\n\n      * To personalize your experience &mdash; your information helps us to better respond to your individual needs.\n      * To improve our site &mdash; we continually strive to improve our site offerings based on the information and feedback we receive from you.\n      * To improve customer service &mdash; your information helps us to more effectively respond to your customer service requests and support needs.\n      * To send periodic emails &mdash; The email address you provide may be used to send you information, notifications that you request about changes to topics or in response to your user name, respond to inquiries, and/or other requests or questions.\n\n      <a name=\"protect\"></a>\n\n      ## [How do we protect your information?](#protect)\n\n      We implement a variety of security measures to maintain the safety of your personal information when you enter, submit, or access your personal information.\n\n      <a name=\"data-retention\"></a>\n\n      ## [What is your data retention policy?](#data-retention)\n\n      We will make a good faith effort to:\n\n      * Retain server logs containing the IP address of all requests to this server no more than 90 days.\n      * Retain the IP addresses associated with registered users and their posts no more than 5 years.\n\n      <a name=\"cookies\"></a>\n\n      ## [Do we use cookies?](#cookies)\n\n      Yes. Cookies are small files that a site or its service provider transfers to your computer's hard drive through your Web browser (if you allow). These cookies enable the site to recognize your browser and, if you have a registered account, associate it with your registered account.\n\n      We use cookies to understand and save your preferences for future visits and compile aggregate data about site traffic and site interaction so that we can offer better site experiences and tools in the future. We may contract with third-party service providers to assist us in better understanding our site visitors. These service providers are not permitted to use the information collected on our behalf except to help us conduct and improve our business.\n\n      <a name=\"disclose\"></a>\n\n      ## [Do we disclose any information to outside parties?](#disclose)\n\n      We do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our site, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety. However, non-personally identifiable visitor information may be provided to other parties for marketing, advertising, or other uses.\n\n      <a name=\"third-party\"></a>\n\n      ## [Third party links](#third-party)\n\n      Occasionally, at our discretion, we may include or offer third party products or services on our site. These third party sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these sites.\n\n      <a name=\"coppa\"></a>\n\n      ## [Children's Online Privacy Protection Act Compliance](#coppa)\n\n      Our site, products and services are all directed to people who are at least 13 years old or older. If this server is in the USA, and you are under the age of 13, per the requirements of COPPA ([Children's Online Privacy Protection Act](https://en.wikipedia.org/wiki/Children%27s_Online_Privacy_Protection_Act)), do not use this site.\n\n      <a name=\"online\"></a>\n\n      ## [Online Privacy Policy Only](#online)\n\n      This online privacy policy applies only to information collected through our site and not to information collected offline.\n\n      <a name=\"consent\"></a>\n\n      ## [Your Consent](#consent)\n\n      By using our site, you consent to our web site privacy policy.\n\n      <a name=\"changes\"></a>\n\n      ## [Changes to our Privacy Policy](#changes)\n\n      If we decide to change our privacy policy, we will post those changes on this page.\n\n      This document is CC-BY-SA. It was last updated May 31, 2013.\n\n  badges:\n    mass_award:\n      errors:\n        invalid_csv: We encountered an error on line %{line_number}. Please confirm the CSV has one email per line.\n        too_many_csv_entries: Too many entries in the CSV file. Please provide a CSV file with no more than %{count} entries.\n        badge_disabled: Please enable the %{badge_name} badge first.\n        cant_grant_multiple_times: Can't grant the %{badge_name} badge multiple times to a single user.\n    editor:\n      name: Editor\n      description: First post edit\n      long_description: |\n        This badge is granted the first time you edit one of your posts. While you won\u2019t be able to edit your posts forever, editing is encouraged \u2014 you can improve the formatting, fix small mistakes, or add anything you missed when you originally posted. Edit to make your posts even better!\n    wiki_editor:\n      name: Wiki Editor\n      description: First wiki edit\n      long_description: |\n        This badge is granted the first time you edit one wiki post.\n    basic_user:\n      name: Basic\n      description: <a href=\"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\">Granted</a> all essential community functions\n      long_description: |\n        This badge is granted when you reach trust level 1. Thanks for sticking around and reading a few topics to learn what our community is about. New user restrictions have been lifted; you\u2019ve been granted all essential community abilities, such as personal messaging, flagging, wiki editing, and the ability to post multiple images and links.\n    member:\n      name: Member\n      description: <a href=\"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\">Granted</a> invitations, group messaging, more likes\n      long_description: |\n        This badge is granted when you reach trust level 2. Thanks for participating over a period of weeks to truly join our community. You can now send invitations from your user page or individual topics, create group personal messages, and have more likes per day.\n    regular:\n      name: Regular\n      description: <a href=\"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\">Granted</a> recategorize, rename, followed links, wiki, more likes\n      long_description: |\n        This badge is granted when you reach trust level 3. Thanks for being a regular part of our community over a period of months. You\u2019re now one of the most active readers, and a reliable contributor that makes our community great. You can now recategorize and rename topics, take advantage of more powerful spam flags, access a private lounge area, and you\u2019ll also get lots more likes per day.\n    leader:\n      name: Leader\n      description: <a href=\"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\">Granted</a> global edit, pin, close, archive, split and merge, more likes\n      long_description: |\n        This badge is granted when you reach trust level 4. You\u2019re a leader in this community as selected by staff, and you set a positive example for the rest of the community in your actions and words here. You have the ability to edit all posts, take common topic moderator actions such as pin, close, unlist, archive, split, and merge.\n    welcome:\n      name: Welcome\n      description: Received a like\n      long_description: |\n        This badge is granted when you receive your first like on a post. Congratulations, you\u2019ve posted something that your fellow community members found interesting, cool, or useful!\n    autobiographer:\n      name: Autobiographer\n      description: Filled out <a href=\"%{base_uri}/my/preferences/profile\">profile</a> information\n      long_description: |\n        This badge is granted for filling out <a href=\"%{base_uri}/my/preferences/profile\">your user profile</a> and selecting a profile picture. Letting the community know a bit more about who you are and what you\u2019re interested in makes for a better, more connected community. Join us!\n    anniversary:\n      name: Anniversary\n      description: Active member for a year, posted at least once\n      long_description: |\n        This badge is granted when you\u2019ve been a member for a year with at least one post in that year. Thank you for sticking around and contributing to our community. We couldn\u2019t do it without you.\n    nice_post:\n      name: Nice Reply\n      description: Received 10 likes on a reply\n      long_description: |\n        This badge is granted when your reply gets 10 likes. Your reply made an impression on the community and helped move the conversation forward.\n    good_post:\n      name: Good Reply\n      description: Received 25 likes on a reply\n      long_description: |\n        This badge is granted when your reply gets 25 likes. Your reply was exceptional and made the conversation much more interesting.\n    great_post:\n      name: Great Reply\n      description: Received 50 likes on a reply\n      long_description: |\n        This badge is granted when your reply gets 50 likes. Wow! Your reply was inspiring, fascinating, hilarious, or insightful and the community loved it!\n    nice_topic:\n      name: Nice Topic\n      description: Received 10 likes on a topic\n      long_description: |\n        This badge is granted when your topic gets 10 likes. You started an interesting conversation that the community enjoyed.\n    good_topic:\n      name: Good Topic\n      description: Received 25 likes on a topic\n      long_description: |\n        This badge is granted when your topic gets 25 likes. You launched a vibrant conversation that the community rallied around.\n    great_topic:\n      name: Great Topic\n      description: Received 50 likes on a topic\n      long_description: |\n        This badge is granted when your topic gets 50 likes. You kicked off a fascinating conversation and the community loved the lively discussion that resulted!\n    nice_share:\n      name: Nice Share\n      description: Shared a post with 25 unique visitors\n      long_description: |\n        This badge is granted for sharing a link that was clicked by 25 outside visitors. Thanks for spreading the word about our discussions, and this community.\n    good_share:\n      name: Good Share\n      description: Shared a post with 300 unique visitors\n      long_description: |\n        This badge is granted for sharing a link that was clicked by 300 outside visitors. Good work! You\u2019ve shown off a great discussion to a bunch of new people and helped this community grow.\n    great_share:\n      name: Great Share\n      description: Shared a post with 1000 unique visitors\n      long_description: |\n        This badge is granted for sharing a link that was clicked by 1000 outside visitors. Wow! You\u2019ve promoted an interesting discussion to a huge new audience, and helped us grow our community in a big way!\n    first_like:\n      name: First Like\n      description: Liked a post\n      long_description: |\n        This badge is granted the first time you like a post using the :heart: button. Liking posts is a great way to let your fellow community members know that what they posted was interesting, useful, cool, or fun. Share the love!\n    first_flag:\n      name: First Flag\n      description: Flagged a post\n      long_description: |\n        This badge is granted the first time you flag a post. Flagging is how we all help keep this a nice place for everyone. If you notice any posts that require moderator attention for any reason please don\u2019t hesitate to flag. If you see a problem, :flag_black: flag it!\n    promoter:\n      name: Promoter\n      description: Invited a user\n      long_description: |\n        This badge is granted when you invite someone to join the community via the invite button on your user page, or at the bottom of a topic. Inviting friends who might be interested in specific discussions is a great way to introduce new people to our community, so thanks!\n    campaigner:\n      name: Campaigner\n      description: Invited 3 basic users\n      long_description: |\n        This badge is granted when you\u2019ve invited 3 people who subsequently spent enough time on the site to become basic users. A vibrant community needs a regular infusion of newcomers who regularly participate and add new voices to the conversations.\n    champion:\n      name: Champion\n      description: Invited 5 members\n      long_description: |\n        This badge is granted when you\u2019ve invited 5 people who subsequently spent enough time on the site to become full members. Wow! Thanks for expanding the diversity of our community with new members!\n    first_share:\n      name: First Share\n      description: Shared a post\n      long_description: |\n        This badge is granted the first time you share a link to a reply or topic using the share button. Sharing links is a great way to show off interesting discussions with the rest of the world and grow your community.\n    first_link:\n      name: First Link\n      description: Added a link to another topic\n      long_description: |\n        This badge is granted the first time you add a link to another topic. Linking topics helps fellow readers find interesting related conversations, by showing the connections between topics in both directions. Link freely!\n    first_quote:\n      name: First Quote\n      description: Quoted a post\n      long_description: |\n        This badge is granted the first time you quote a post in your reply. Quoting relevant parts of earlier posts in your reply helps keep discussions connected together and on topic. The easiest way to quote is to highlight a section of a post, and then press any reply button. Quote generously!\n    read_guidelines:\n      name: Read Guidelines\n      description: Read the <a href=\"%{base_uri}/guidelines\">community guidelines</a>\n      long_description: |\n        This badge is granted for <a href=\"%{base_uri}/guidelines\">reading the community guidelines</a>. Following and sharing these simple guidelines helps build a safe, fun, and sustainable community for everyone. Always remember there\u2019s another human being, one very much like yourself, on the other side of that screen. Be nice!\n    reader:\n      name: Reader\n      description: Read every reply in a topic with more than 100 replies\n      long_description: |\n        This badge is granted the first time you read a long topic with more than 100 replies. Reading a conversation closely helps you follow the discussion, understand different viewpoints, and leads to more interesting conversations. The more you read, the better the conversation gets. As we like to say, Reading is Fundamental! :slight_smile:\n    popular_link:\n      name: Popular Link\n      description: Posted an external link with 50 clicks\n      long_description: |\n        This badge is granted when a link you shared gets 50 clicks. Thanks for posting a useful link that added interesting context to the conversation!\n    hot_link:\n      name: Hot Link\n      description: Posted an external link with 300 clicks\n      long_description: |\n        This badge is granted when a link you shared gets 300 clicks. Thanks for posting a fascinating link that drove the conversation forward and illuminated the discussion!\n    famous_link:\n      name: Famous Link\n      description: Posted an external link with 1000 clicks\n      long_description: |\n        This badge is granted when a link you shared gets 1000 clicks. Wow! You posted a link that significantly improved the conversation by adding essential detail, context, and information. Great work!\n    appreciated:\n      name: Appreciated\n      description: Received 1 like on 20 posts\n      long_description: |\n        This badge is granted when you receive at least one like on 20 different posts. The community is enjoying your contributions to the conversations here!\n    respected:\n      name: Respected\n      description: Received 2 likes on 100 posts\n      long_description: |\n        This badge is granted when you receive at least 2 likes on 100 different posts. The community is growing to respect your many contributions to the conversations here.\n    admired:\n      name: Admired\n      description: Received 5 likes on 300 posts\n      long_description: |\n        This badge is granted when you receive at least 5 likes on 300 different posts. Wow! The community admires your frequent, high quality contributions to the conversations here.\n    out_of_love:\n      name: Out of Love\n      description: Used %{max_likes_per_day} likes in a day\n      long_description: |\n        This badge is granted when you use all %{max_likes_per_day} of your daily likes. Remembering to take a moment and like the posts you enjoy and appreciate encourages your fellow community members to create even more great discussions in the future.\n    higher_love:\n      name: Higher Love\n      description: Used %{max_likes_per_day} likes in a day 5 times\n      long_description: |\n        This badge is granted when you use all %{max_likes_per_day} of your daily likes for 5 days. Thanks for taking the time actively encouraging the best conversations every day!\n    crazy_in_love:\n      name: Crazy in Love\n      description: Used %{max_likes_per_day} likes in a day 20 times\n      long_description: |\n        This badge is granted when you use all %{max_likes_per_day} of your daily likes for 20 days. Wow! You\u2019re a role model for encouraging your fellow community members!\n    thank_you:\n      name: Thank You\n      description: Has 20 liked posts and gave 10 likes\n      long_description: |\n        This badge is granted when you have 20 liked posts and give 10 or more likes in return. When someone likes your posts, you find the time to like what others are posting, too.\n    gives_back:\n      name: Gives Back\n      description: Has 100 liked posts and gave 100 likes\n      long_description: |\n        This badge is granted when you have 100 liked posts and give 100 or more likes in return. Thanks for paying it forward!\n    empathetic:\n      name: Empathetic\n      description: Has 500 liked posts and gave 1000 likes\n      long_description: |\n        This badge is granted when you have 500 liked posts and give 1000 or more likes in return. Wow! You\u2019re a model of generosity and mutual appreciation :two_hearts:.\n    first_emoji:\n      name: First Emoji\n      description: Used an Emoji in a Post\n      long_description: |\n        This badge is granted the first time you add an Emoji to your post :thumbsup:. Emoji let you convey emotion in your posts, from happiness :smiley: to sadness :anguished: to anger :angry: and everything in between :sunglasses:. Just type a : (colon) or press the Emoji toolbar button in the editor to select from hundreds of choices :ok_hand:\n    first_mention:\n      name: First Mention\n      description: Mentioned a user in a post\n      long_description: |\n        This badge is granted the first time you mention someone\u2019s @username in your post. Each mention generates a notification to that person, so they know about your post. Just begin typing @ (at symbol) to mention any user or, if allowed, group \u2013 it\u2019s a convenient way to bring something to their attention.\n    first_onebox:\n      name: First Onebox\n      description: Posted a link that was oneboxed\n      long_description: |\n        This badge is granted the first time you post a link on a line by itself, which automatically expanded into a onebox with a summary, title, and (when available) picture.\n    first_reply_by_email:\n      name: First Reply By Email\n      description: Replied to a post via email\n      long_description: |\n        This badge is granted the first time you reply to a post via email :e-mail:.\n    new_user_of_the_month:\n      name: \"New User of the Month\"\n      description: Outstanding contributions in their first month\n      long_description: |\n        This badge is granted to congratulate two new users each month for their excellent overall contributions, as measured by how often their posts were liked, and by whom.\n    enthusiast:\n      name: Enthusiast\n      description: Visited 10 consecutive days\n      long_description: |\n        This badge is granted for visiting 10 consecutive days. Thanks for sticking with us for over a week!\n    aficionado:\n      name: Aficionado\n      description: Visited 100 consecutive days\n      long_description: |\n        This badge is granted for visiting 100 consecutive days. That\u2019s more than three months!\n    devotee:\n      name: Devotee\n      description: Visited 365 consecutive days\n      long_description: |\n        This badge is granted for visiting 365 consecutive days. Wow, an entire year!\n    badge_title_metadata: \"%{display_name} badge on %{site_title}\"\n\n  admin_login:\n    success: \"Email Sent\"\n    errors:\n      unknown_email_address: \"Unknown email address.\"\n      invalid_token: \"Invalid token.\"\n    email_input: \"Admin Email\"\n    submit_button: \"Send Email\"\n    safe_mode: \"Safe Mode: disable all themes/plugins when logging in\"\n\n  performance_report:\n    initial_post_raw: This topic includes daily performance reports for your site.\n    initial_topic_title: Website performance reports\n\n  tags:\n    title: \"Tags\"\n    restricted_tag_disallowed: 'You cannot apply the tag \"%{tag}\".'\n    restricted_tag_remove_disallowed: 'You cannot remove the tag \"%{tag}\".'\n    minimum_required_tags:\n      one: \"You must select at least %{count} tag.\"\n      other: \"You must select at least %{count} tags.\"\n    upload_row_too_long: \"The CSV file should have one tag per line. Optionally the tag can be followed by a comma, then the tag group name.\"\n    forbidden:\n      invalid:\n        one: \"The tag you selected cannot be used\"\n        other: \"None of the tags you selected can be used\"\n      in_this_category: '\"%{tag_name}\" cannot be used in this category'\n      restricted_to:\n        one: '\"%{tag_name}\" is restricted to the \"%{category_names}\" category'\n        other: '\"%{tag_name}\" is restricted to the following categories: %{category_names}'\n      synonym: 'Synonyms are not allowed. Use \"%{tag_name}\" instead.'\n      has_synonyms: '\"%{tag_name}\" cannot be used because it has synonyms.'\n      restricted_tags_cannot_be_used_in_category:\n        one: 'The \"%{tags}\" tag cannot be used in the \"%{category}\" category. Please remove it.'\n        other: 'The following tags cannot be used in the \"%{category}\" category: %{tags}. Please remove them.'\n      category_does_not_allow_tags:\n        one: 'The \"%{category}\" category does not allow the \"%{tags}\" tag. Please remove it.'\n        other: 'The \"%{category}\" category does not allow the following tags: \"%{tags}\". Please remove them.'\n    required_tags_from_group:\n      one: \"You must include at least %{count} %{tag_group_name} tag. The tags in this group are: %{tags}.\"\n      other: \"You must include at least %{count} %{tag_group_name} tags. The tags in this group are: %{tags}.\"\n    invalid_target_tag: \"cannot be a synonym of a synonym\"\n    synonyms_exist: \"is not allowed while synonyms exist\"\n  rss_by_tag: \"Topics tagged %{tag}\"\n\n  finish_installation:\n    congratulations: \"Congratulations, you installed Discourse!\"\n    register:\n      button: \"Register\"\n      title: \"Register Admin Account\"\n      help: \"Register a new account to get started.\"\n      no_emails: \"Unfortunately, no administrator emails were defined during setup, so finalizing the configuration may be difficult. Please add a developer email in the configuration file or <a href='https://meta.discourse.org/t/create-admin-account-from-console/17274'>create an administrator account from console</a>.\"\n    confirm_email:\n      title: \"Confirm your Email\"\n      message: \"<p>We sent an activation mail to <b>%{email}</b>. Please follow the instructions in the email to activate your account.</p><p>If it doesn't arrive, check your spam folder, and <a href='https://meta.discourse.org/t/troubleshooting-email-on-a-new-discourse-install/16326'>ensure you set up email correctly</a>.</p>\"\n    resend_email:\n      title: \"Resend Activation Email\"\n      message: \"<p>We've re-sent the activation email to <b>%{email}</b>\"\n\n  safe_mode:\n    title: \"Enter safe mode\"\n    description: \"Safe mode allows you to test your site without loading plugins or themes.\"\n    no_themes: \"Disable themes and theme components\"\n    no_unofficial_plugins: \"Disable unofficial plugins\"\n    no_plugins: \"Disable all plugins\"\n    enter: \"Enter Safe Mode\"\n    must_select: \"You must select at least one option to enter safe mode.\"\n  wizard:\n    title: \"Discourse Setup\"\n    step:\n      introduction:\n        title: \"Tell us about your community\"\n\n        fields:\n          title:\n            label: \"Community name\"\n            placeholder: \"Jane\u2019s Hangout\"\n          site_description:\n            label: \"Describe your community in a sentence\"\n            placeholder: \"A place for Jane and her friends to discuss cool stuff\"\n          contact_email:\n            label: \"Point of contact\"\n            placeholder: \"example@user.com\"\n            description: \"Person or group responsible for this community. Used for critical updates, and listed on <a href='%{base_path}/about' target='_blank'>your about page</a> for urgent contact.\"\n          default_locale:\n            label: \"Language\"\n\n      privacy:\n        title: \"Member Experience\"\n\n        fields:\n          login_required:\n            placeholder: \"Private\"\n            extra_description: \"Only logged in users can access this community\"\n          invite_only:\n            placeholder: \"Invite Only\"\n            extra_description: \"Users must be invited by trusted users or staff, otherwise users can sign up on their own\"\n          must_approve_users:\n            placeholder: \"Require Approval\"\n            extra_description: \"Users must be approved by staff\"\n\n      ready:\n        title: \"Your Discourse is Ready!\"\n        description: \"That's it! You've done the basics to setup your community. Now you can jump in and have a look around, write a welcome topic, and send invites!<br><br>Have fun!\"\n\n      styling:\n        title: \"Look & Feel\"\n        fields:\n          color_scheme:\n            label: \"Color scheme\"\n          body_font:\n            label: \"Body font\"\n          heading_font:\n            label: \"Heading font\"\n          styling_preview:\n            label: \"Preview\"\n          homepage_style:\n            label: \"Homepage style\"\n            choices:\n              latest:\n                label: \"Latest Topics\"\n              categories_only:\n                label: \"Categories Only\"\n              categories_with_featured_topics:\n                label: \"Categories with Featured Topics\"\n              categories_and_latest_topics:\n                label: \"Categories and Latest Topics\"\n              categories_and_latest_topics_created_date:\n                label: \"Categories and Latest Topics (sort by topic created date)\"\n              categories_and_top_topics:\n                label: \"Categories and Top Topics\"\n              categories_boxes:\n                label: \"Categories Boxes\"\n              categories_boxes_with_topics:\n                label: \"Categories Boxes with Topics\"\n              subcategories_with_featured_topics:\n                label: \"Subcategories with Featured Topics\"\n\n      branding:\n        title: \"Customize Logos\"\n        fields:\n          logo:\n            label: \"Primary Logo\"\n            description: \"The logo at the top left of your site. Use a wide rectangular image with a height of 120 and an aspect ratio greater than 3:1\"\n          logo_small:\n            label: \"Square Logo\"\n            description: \"A square version of your logo. Shown at the top left when scrolling down, and when sharing on social platforms. Ideally at least 512x512.\"\n          favicon:\n            label: \"Browser Icon\"\n            description: \"Icon used to represent your site in web browsers that looks good at small sizes. PNG or JPG is recommended. Square logo is used by default.\"\n          large_icon:\n            label: \"Large Icon\"\n            description: \"Icon used to represent your site on mobile devices that looks good at larger sizes. Ideally greater than 512x512. Square logo used by default.\"\n\n      corporate:\n        title: \"Your Organization\"\n\n        fields:\n          company_name:\n            label: \"Company Name\"\n            placeholder: \"Example Organization\"\n            description: \"Entered in your Terms of Service page. Feel free to skip if no company exists.\"\n          governing_law:\n            label: \"Governing Law\"\n            placeholder: \"California law\"\n            description: \"Entered in your Terms of Service page. Feel free to skip if no company exists.\"\n          contact_url:\n            label: \"Web Page\"\n            placeholder: \"https://www.example.com/contact-us\"\n            description: \"General contact web page for you or your organization. Will be displayed on <a href='%{base_path}/about' target='_blank'>your about page</a>.\"\n          city_for_disputes:\n            label: \"City for Disputes\"\n            placeholder: \"San Francisco, California\"\n            description: \"Entered in your Terms of Service page. Feel free to skip if no company exists.\"\n          site_contact:\n            label: \"Automated Messages\"\n            description: \"All automated Discourse personal messages will be sent from this user, such as flag warnings and backup completion notices.\"\n\n      invites:\n        title: \"Invite Staff\"\n        description: \"You\u2019re almost done! Let\u2019s invite some people to help <a href='https://blog.discourse.org/2014/08/building-a-discourse-community/' target='blank'>seed your discussions</a> with interesting topics and replies to get your community started.\"\n        disabled: \"Since local logins are disabled, it\u2019s not possible to send invites to anyone. Please proceed to the next step.\"\n\n      finished:\n        title: \"Your Discourse is Ready!\"\n        description: |\n          <p>If you ever feel like changing these settings, <b>re-run this wizard any time</b>, or visit <a href='%{base_path}/admin' target='_blank'>your admin section</a>; find it next to the wrench icon in the site menu.</p>\n          <p>It is easy to customize your Discourse even further using our powerful theming system. For examples, check out the <a href=\"https://meta.discourse.org/c/theme/61/l/top\" target=\"_blank\">top themes and components</a> on <a href=\"https://meta.discourse.org/\" target=\"_blank\">meta.discourse.org</a>.</p>\n          <p>Have fun, and good luck <a href='https://blog.discourse.org/2014/08/building-a-discourse-community/' target='_blank'>building your new community!</a></p>\n\n  search_logs:\n    graph_title: \"Search Count\"\n\n  joined: \"Joined\"\n\n  discourse_push_notifications:\n    popup:\n      mentioned: '%{username} mentioned you in \"%{topic}\" - %{site_title}'\n      group_mentioned: '%{username} mentioned you in \"%{topic}\" - %{site_title}'\n      quoted: '%{username} quoted you in \"%{topic}\" - %{site_title}'\n      replied: '%{username} replied to you in \"%{topic}\" - %{site_title}'\n      posted: '%{username} posted in \"%{topic}\" - %{site_title}'\n      private_message: '%{username} sent you a private message in \"%{topic}\" - %{site_title}'\n      linked: '%{username} linked to your post from \"%{topic}\" - %{site_title}'\n      watching_first_post: '%{username} created a new topic \"%{topic}\" - %{site_title}'\n      confirm_title: \"Notifications enabled - %{site_title}\"\n      confirm_body: \"Success! Notifications have been enabled.\"\n      custom: \"Notification from %{username} on %{site_title}\"\n\n  staff_action_logs:\n    not_found: \"not found\"\n    unknown: \"unknown\"\n    user_merged: \"%{username} was merged into this account\"\n    user_delete_self: \"Deleted by self from %{url}\"\n    webhook_deactivation_reason: \"Your webhook has been automatically deactivated. We received multiple '%{status}' HTTP status failure responses.\"\n    api_key:\n      automatic_revoked:\n        one: \"Automatically revoked, last activity more than %{count} day ago\"\n        other: \"Automatically revoked, last activity more than %{count} days ago\"\n      revoked: Revoked\n      restored: Restored\n\n  reviewables:\n    already_handled: \"Thanks, but we've already reviewed that post and determined it does not need to be flagged again.\"\n    already_handled_and_user_not_exist: \"Thanks, but someone already reviewed and that user no longer exists.\"\n    priorities:\n      low: \"Low\"\n      medium: \"Medium\"\n      high: \"High\"\n    sensitivity:\n      disabled: \"Disabled\"\n      low: \"Low\"\n      medium: \"Medium\"\n      high: \"High\"\n    must_claim: \"You must claim items before acting on them.\"\n    user_claimed: \"This item has been claimed by another user.\"\n    missing_version: \"You must supply a version parameter\"\n    conflict: \"There was an update conflict preventing you from doing that.\"\n    reasons:\n      post_count: \"The first few posts from every user must be approved by staff. See %{link}.\"\n      trust_level: \"Users at low trust levels must have replies approved by staff. See %{link}.\"\n      new_topics_unless_trust_level: \"Users at low trust levels must have topics approved by staff. See %{link}.\"\n      fast_typer: \"New user typed their first post suspiciously fast, suspected bot or spammer behavior. See %{link}.\"\n      auto_silence_regex: \"New user whose first post matches the %{link} setting.\"\n      watched_word: \"This post included a Watched Word. See your %{link}.\"\n      staged: \"New topics and posts for staged users must be approved by staff. See %{link}.\"\n      category: \"Posts in this category require manual approval by staff. See the %{link}.\"\n      must_approve_users: \"All new users must be approved by staff. See %{link}.\"\n      invite_only: \"All new users should be invited. See %{link}.\"\n      email_auth_res_enqueue: \"This email failed a DMARC check, it most likely isn't from whom it seems to be from. Check the raw email headers for more information.\"\n      email_spam: \"This email was flagged as spam by the header defined in %{link}.\"\n      suspect_user: \"This new user entered profile information without reading any topics or posts, which strongly suggests they may be a spammer. See %{link}.\"\n      contains_media: \"This post includes embedded media. See %{link}.\"\n      queued_by_staff: \"A staff member thinks this post needs review. It'll remain hidden until then.\"\n      links:\n        watched_word: list of watched words\n        category: category settings\n\n    actions:\n      agree:\n        title: \"Agree...\"\n      agree_and_keep:\n        title: \"Keep Post\"\n        description: \"Agree with flag and keep the post unchanged.\"\n      agree_and_keep_hidden:\n        title: \"Keep Post Hidden\"\n        description: \"Agree with flag and leave the post hidden.\"\n      agree_and_suspend:\n        title: \"Suspend User\"\n        description: \"Agree with flag and suspend the user.\"\n      agree_and_silence:\n        title: \"Silence User\"\n        description: \"Agree with flag and silence the user.\"\n      agree_and_restore:\n        title: \"Restore Post\"\n        description: \"Restore the post so that all users can see it.\"\n      agree_and_hide:\n        title: \"Hide Post\"\n        description: \"Hide this post and automatically send the user a message urging them to edit it.\"\n      delete_single:\n        title: \"Delete\"\n      delete:\n        title: \"Delete...\"\n      delete_and_ignore:\n        title: \"Delete Post and Ignore\"\n        description: \"Delete post; if the first post, delete the topic as well\"\n      delete_and_ignore_replies:\n        title: \"Delete Post + Replies and Ignore\"\n        description: \"Delete post and all of its replies; if the first post, delete the topic as well\"\n        confirm: \"Are you sure you want to delete the replies to the post as well?\"\n      delete_and_agree:\n        title: \"Delete Post and Agree\"\n        description: \"Delete post; if the first post, delete the topic as well\"\n      delete_and_agree_replies:\n        title: \"Delete Post + Replies and Agree\"\n        description: \"Delete post and all of its replies; if the first post, delete the topic as well\"\n        confirm: \"Are you sure you want to delete the replies to the post as well?\"\n      disagree_and_restore:\n        title: \"Disagree and Restore Post\"\n        description: \"Restore the post so that all users can see it.\"\n      disagree:\n        title: \"Disagree\"\n      ignore:\n        title: \"Ignore\"\n      approve:\n        title: \"Approve\"\n      approve_post:\n        title: \"Approve Post\"\n        confirm_closed: \"This topic is closed. Would you like to create the post anyway?\"\n      reject_post:\n        title: \"Reject Post\"\n      approve_user:\n        title: \"Approve User\"\n      reject_user:\n        title: \"Delete User...\"\n        delete:\n          title: \"Delete User\"\n          description: \"The user will be deleted from the forum.\"\n        block:\n          title: \"Delete and Block User\"\n          description: \"The user will be deleted, and we'll block their IP and email address.\"\n      reject:\n        title: \"Reject\"\n        bundle_title: \"Reject...\"\n      reject_and_suspend:\n        title: \"Reject and Suspend user\"\n      reject_and_silence:\n        title: \"Reject and Silence user\"\n      reject_and_delete:\n        title: \"Reject and Delete the post\"\n      reject_and_keep_deleted:\n        title: \"Keep post deleted\"\n      approve_and_restore:\n        title: \"Approve and Restore post\"\n      delete_user:\n        reason: \"Deleted via review queue\"\n\n  email_style:\n    html_missing_placeholder: \"The html template must include %{placeholder}\"\n\n  notification_level:\n    ignore_error: \"Sorry, you can't ignore that user.\"\n    mute_error: \"Sorry, you can't mute that user.\"\n    error: \"Sorry, you cannot change the notification level for that user.\"\n    invalid_value: '\"%{value}\" is not a valid notification level.'\n\n  discord:\n    not_in_allowed_guild: \"Authentication failed. You are not a member of a permitted Discord guild.\"\n\n  old_keys_reminder:\n    title: \"Reminder about old credentials\"\n    body: |\n      Hello! This is a routine yearly security reminder from your Discourse instance.\n\n      As a courtesy, we wanted to let you know that the following credentials used on your Discourse instance have not been updated in more than two years:\n\n      %{keys}\n\n      No action is required at this time, however, it is considered good security practice to cycle all your important credentials every few years.\n\n  create_linked_topic:\n    topic_title_with_sequence:\n      one: \"%{topic_title} (Part %{count})\"\n      other: \"%{topic_title} (Part %{count})\"\n    post_raw: \"Continuing the discussion from %{parent_url}.\\n\\nPrevious discussions:\\n\\n%{previous_topics}\"\n    small_action_post_raw: \"Continue discussion at %{new_title}.\"\n\n  fallback_username: \"user\"\n\n  user_status:\n    errors:\n      ends_at_should_be_greater_than_set_at: \"ends_at should be greater than set_at\"\n  webhooks:\n    payload_url:\n      blocked_or_internal: \"Payload URL cannot be used because it resolves to a blocked or internal IP\"\n      unsafe: \"Payload URL cannot be used because it's unsafe\"\n", "# frozen_string_literal: true\n\n#mixin for all guardian methods dealing with topic permissions\nmodule TopicGuardian\n  def can_remove_allowed_users?(topic, target_user = nil)\n    is_staff? ||\n    (topic.user == @user && @user.has_trust_level?(TrustLevel[2])) ||\n    (\n      topic.allowed_users.count > 1 &&\n      topic.user != target_user &&\n      !!(target_user && user == target_user)\n    )\n  end\n\n  def can_review_topic?(topic)\n    return false if anonymous? || topic.nil?\n    return true if is_staff?\n\n    is_category_group_moderator?(topic.category)\n  end\n\n  def can_moderate_topic?(topic)\n    return false if anonymous? || topic.nil?\n    return true if is_staff?\n\n    can_perform_action_available_to_group_moderators?(topic)\n  end\n\n  def can_create_shared_draft?\n    SiteSetting.shared_drafts_enabled? && can_see_shared_draft?\n  end\n\n  def can_see_shared_draft?\n    @user.has_trust_level_or_staff?(SiteSetting.shared_drafts_min_trust_level)\n  end\n\n  def can_create_whisper?\n    @user.whisperer?\n  end\n\n  def can_see_whispers?(_topic = nil)\n    @user.whisperer?\n  end\n\n  def can_publish_topic?(topic, category)\n    can_see_shared_draft? && can_see?(topic) && can_create_topic_on_category?(category)\n  end\n\n  # Creating Methods\n  def can_create_topic?(parent)\n    is_staff? ||\n    (user &&\n      user.trust_level >= SiteSetting.min_trust_to_create_topic.to_i &&\n      can_create_post?(parent) &&\n      Category.topic_create_allowed(self).limit(1).count == 1)\n  end\n\n  def can_create_topic_on_category?(category)\n    # allow for category to be a number as well\n    category_id = Category === category ? category.id : category\n\n    can_create_topic?(nil) &&\n    (!category || Category.topic_create_allowed(self).where(id: category_id).count == 1)\n  end\n\n  def can_move_topic_to_category?(category)\n    category = Category === category ? category : Category.find(category || SiteSetting.uncategorized_category_id)\n\n    is_staff? || (can_create_topic_on_category?(category) && !category.require_topic_approval?)\n  end\n\n  def can_create_post_on_topic?(topic)\n    # No users can create posts on deleted topics\n    return false if topic.blank?\n    return false if topic.trashed?\n    return true if is_admin?\n\n    trusted = (authenticated? && user.has_trust_level?(TrustLevel[4])) || is_moderator? || can_perform_action_available_to_group_moderators?(topic)\n\n    (!(topic.closed? || topic.archived?) || trusted) && can_create_post?(topic)\n  end\n\n  # Editing Method\n  def can_edit_topic?(topic)\n    return false if Discourse.static_doc_topic_ids.include?(topic.id) && !is_admin?\n    return false unless can_see?(topic)\n\n    first_post = topic.first_post\n\n    return false if first_post&.locked? && !is_staff?\n\n    return true if is_admin?\n    return true if is_moderator? && can_create_post?(topic)\n    return true if is_category_group_moderator?(topic.category)\n\n    # can't edit topics in secured categories where you don't have permission to create topics\n    # except for a tiny edge case where the topic is uncategorized and you are trying\n    # to fix it but uncategorized is disabled\n    if (\n      SiteSetting.allow_uncategorized_topics ||\n      topic.category_id != SiteSetting.uncategorized_category_id\n    )\n      return false if !can_create_topic_on_category?(topic.category)\n    end\n\n    # Editing a shared draft.\n    return true if (\n      !topic.archived &&\n      !topic.private_message? &&\n      topic.category_id == SiteSetting.shared_drafts_category.to_i &&\n      can_see_category?(topic.category) &&\n      can_see_shared_draft? &&\n      can_create_post?(topic)\n    )\n\n    # TL4 users can edit archived topics, but can not edit private messages\n    return true if (\n      SiteSetting.trusted_users_can_edit_others? &&\n      topic.archived &&\n      !topic.private_message? &&\n      user.has_trust_level?(TrustLevel[4]) &&\n      can_create_post?(topic)\n    )\n\n    # TL3 users can not edit archived topics and private messages\n    return true if (\n      SiteSetting.trusted_users_can_edit_others? &&\n      !topic.archived &&\n      !topic.private_message? &&\n      user.has_trust_level?(TrustLevel[3]) &&\n      can_create_post?(topic)\n    )\n\n    return false if topic.archived\n\n    is_my_own?(topic) &&\n      !topic.edit_time_limit_expired?(user) &&\n      !first_post&.locked? &&\n      (!first_post&.hidden? || can_edit_hidden_post?(first_post))\n  end\n\n  def can_recover_topic?(topic)\n    if is_staff? || (topic&.category && is_category_group_moderator?(topic.category))\n      !!(topic && topic.deleted_at)\n    else\n      topic && can_recover_post?(topic.ordered_posts.first)\n    end\n  end\n\n  def can_delete_topic?(topic)\n    !topic.trashed? &&\n    (is_staff? || (is_my_own?(topic) && topic.posts_count <= 1 && topic.created_at && topic.created_at > 24.hours.ago) || is_category_group_moderator?(topic.category)) &&\n    !topic.is_category_topic? &&\n    !Discourse.static_doc_topic_ids.include?(topic.id)\n  end\n\n  def can_permanently_delete_topic?(topic)\n    return false if !SiteSetting.can_permanently_delete\n    return false if !topic\n\n    # Ensure that all posts (including small actions) are at least soft\n    # deleted.\n    return false if topic.posts_count > 0\n\n    # All other posts that were deleted still must be permanently deleted\n    # before the topic can be deleted with the exception of small action\n    # posts that will be deleted right before the topic is.\n    all_posts_count = Post.with_deleted\n      .where(topic_id: topic.id)\n      .where(post_type: [Post.types[:regular], Post.types[:moderator_action], Post.types[:whisper]])\n      .count\n    return false if all_posts_count > 1\n\n    return false if !is_admin? || !can_see_topic?(topic)\n    return false if !topic.deleted_at\n    return false if topic.deleted_by_id == @user.id && topic.deleted_at >= Post::PERMANENT_DELETE_TIMER.ago\n    true\n  end\n\n  def can_toggle_topic_visibility?(topic)\n    can_moderate?(topic) || can_perform_action_available_to_group_moderators?(topic)\n  end\n\n  def can_convert_topic?(topic)\n    return false unless @user.in_any_groups?(SiteSetting.personal_message_enabled_groups_map)\n    return false if topic.blank?\n    return false if topic.trashed?\n    return false if topic.is_category_topic?\n    return true if is_admin?\n    is_moderator? && can_create_post?(topic)\n  end\n\n  def can_reply_as_new_topic?(topic)\n    authenticated? && topic && @user.has_trust_level?(TrustLevel[1])\n  end\n\n  def can_see_deleted_topics?(category)\n    is_staff? || is_category_group_moderator?(category)\n  end\n\n  # Accepts an array of `Topic#id` and returns an array of `Topic#id` which the user can see.\n  def can_see_topic_ids(topic_ids: [], hide_deleted: true)\n    topic_ids = topic_ids.compact\n\n    return topic_ids if is_admin?\n    return [] if topic_ids.blank?\n\n    default_scope = Topic.unscoped.where(id: topic_ids)\n\n    # When `hide_deleted` is `true`, hide deleted topics if user is not staff or category moderator\n    if hide_deleted && !is_staff?\n      if category_group_moderation_allowed?\n        default_scope = default_scope.where(<<~SQL)\n          (\n            deleted_at IS NULL OR\n            (\n              deleted_at IS NOT NULL\n              AND topics.category_id IN (#{category_group_moderator_scope.select(:id).to_sql})\n            )\n          )\n        SQL\n      else\n        default_scope = default_scope.where(\"deleted_at IS NULL\")\n      end\n    end\n\n    # Filter out topics with shared drafts if user cannot see shared drafts\n    if !can_see_shared_draft?\n      default_scope = default_scope.left_outer_joins(:shared_draft).where(\"shared_drafts.id IS NULL\")\n    end\n\n    all_topics_scope =\n      if authenticated?\n        Topic.unscoped.merge(\n          secured_regular_topic_scope(default_scope, topic_ids: topic_ids).or(private_message_topic_scope(default_scope))\n        )\n      else\n        Topic.unscoped.merge(secured_regular_topic_scope(default_scope, topic_ids: topic_ids))\n      end\n\n    all_topics_scope.pluck(:id)\n  end\n\n  def can_see_topic?(topic, hide_deleted = true)\n    return false unless topic\n    return true if is_admin?\n    return false if hide_deleted && topic.deleted_at && !can_see_deleted_topics?(topic.category)\n\n    if topic.private_message?\n      return authenticated? && topic.all_allowed_users.where(id: @user.id).exists?\n    end\n\n    return false if topic.shared_draft && !can_see_shared_draft?\n\n    category = topic.category\n    can_see_category?(category) &&\n      (!category.read_restricted || !is_staged? || secure_category_ids.include?(category.id) || topic.user == user)\n  end\n\n  def can_get_access_to_topic?(topic)\n    topic&.access_topic_via_group.present? && authenticated?\n  end\n\n  def filter_allowed_categories(records)\n    return records if is_admin? && !SiteSetting.suppress_secured_categories_from_admin\n\n    records = allowed_category_ids.size == 0 ?\n      records.where('topics.category_id IS NULL') :\n      records.where('topics.category_id IS NULL or topics.category_id IN (?)', allowed_category_ids)\n\n    records.references(:categories)\n  end\n\n  def can_edit_featured_link?(category_id)\n    return false unless SiteSetting.topic_featured_link_enabled\n    return false unless @user.trust_level >= TrustLevel.levels[:basic]\n    Category.where(id: category_id || SiteSetting.uncategorized_category_id, topic_featured_link_allowed: true).exists?\n  end\n\n  def can_update_bumped_at?\n    is_staff? || @user.has_trust_level?(TrustLevel[4])\n  end\n\n  def can_banner_topic?(topic)\n    topic && authenticated? && !topic.private_message? && is_staff?\n  end\n\n  def can_edit_tags?(topic)\n    return false unless can_tag_topics?\n    return false if topic.private_message? && !can_tag_pms?\n    return true if can_edit_topic?(topic)\n\n    if topic&.first_post&.wiki && (@user.trust_level >= SiteSetting.min_trust_to_edit_wiki_post.to_i)\n      return can_create_post?(topic)\n    end\n\n    false\n  end\n\n  def can_perform_action_available_to_group_moderators?(topic)\n    return false if anonymous? || topic.nil?\n    return true if is_staff?\n    return true if @user.has_trust_level?(TrustLevel[4])\n\n    is_category_group_moderator?(topic.category)\n  end\n  alias :can_archive_topic? :can_perform_action_available_to_group_moderators?\n  alias :can_close_topic? :can_perform_action_available_to_group_moderators?\n  alias :can_open_topic? :can_perform_action_available_to_group_moderators?\n  alias :can_split_merge_topic? :can_perform_action_available_to_group_moderators?\n  alias :can_edit_staff_notes? :can_perform_action_available_to_group_moderators?\n  alias :can_pin_unpin_topic? :can_perform_action_available_to_group_moderators?\n\n  def can_move_posts?(topic)\n    return false if is_silenced?\n    can_perform_action_available_to_group_moderators?(topic)\n  end\n\n  def affected_by_slow_mode?(topic)\n    topic&.slow_mode_seconds.to_i > 0 && @user.human? && !is_staff?\n  end\n\n  private\n\n  def private_message_topic_scope(scope)\n    pm_scope = scope.private_messages_for_user(user)\n\n    if is_moderator?\n      pm_scope = pm_scope.or(scope.where(<<~SQL))\n        topics.subtype = '#{TopicSubtype.moderator_warning}'\n        OR topics.id IN (#{Topic.has_flag_scope.select(:topic_id).to_sql})\n      SQL\n    end\n\n    pm_scope\n  end\n\n  def secured_regular_topic_scope(scope, topic_ids:)\n    secured_scope = Topic.unscoped.secured(self)\n\n    # Staged users are allowed to see their own topics in read restricted categories when Category#email_in and\n    # Category#email_in_allow_strangers has been configured.\n    if is_staged?\n      sql = <<~SQL\n      topics.id IN (\n        SELECT\n          topics.id\n        FROM topics\n        INNER JOIN categories ON categories.id = topics.category_id\n        WHERE categories.read_restricted\n        AND categories.email_in IS NOT NULL\n        AND categories.email_in_allow_strangers\n        AND topics.user_id = :user_id\n        AND topics.id IN (:topic_ids)\n      )\n      SQL\n\n      secured_scope = secured_scope.or(Topic.unscoped.where(sql, user_id: user.id, topic_ids: topic_ids))\n    end\n\n    scope.listable_topics.merge(secured_scope)\n  end\nend\n", "# frozen_string_literal: true\n\nclass TopicCreator\n\n  attr_reader :user, :guardian, :opts\n\n  include HasErrors\n\n  def self.create(user, guardian, opts)\n    self.new(user, guardian, opts).create\n  end\n\n  def initialize(user, guardian, opts)\n    @user = user\n    @guardian = guardian\n    @opts = opts\n    @added_users = []\n  end\n\n  def valid?\n    topic = Topic.new(setup_topic_params)\n    # validate? will clear the error hash\n    # so we fire the validation event after\n    # this allows us to add errors\n    valid = topic.valid?\n\n    category = find_category\n    if category.present? && guardian.can_tag?(topic)\n      tags = @opts[:tags].presence || []\n      existing_tags = tags.present? ? Tag.where(name: tags) : []\n      valid_tags = guardian.can_create_tag? ? tags : existing_tags\n\n      # all add to topic.errors\n      DiscourseTagging.validate_min_required_tags_for_category(guardian, topic, category, valid_tags)\n      DiscourseTagging.validate_required_tags_from_group(guardian, topic, category, existing_tags)\n      DiscourseTagging.validate_category_restricted_tags(guardian, topic, category, valid_tags)\n    end\n\n    DiscourseEvent.trigger(:after_validate_topic, topic, self)\n    valid &&= topic.errors.empty?\n\n    add_errors_from(topic) unless valid\n\n    valid\n  end\n\n  def create\n    topic = Topic.new(setup_topic_params)\n    setup_tags(topic)\n\n    if fields = @opts[:custom_fields]\n      topic.custom_fields.merge!(fields)\n    end\n\n    DiscourseEvent.trigger(:before_create_topic, topic, self)\n\n    setup_auto_close_time(topic)\n    process_private_message(topic)\n    save_topic(topic)\n    create_warning(topic)\n    watch_topic(topic)\n    create_shared_draft(topic)\n    UserActionManager.topic_created(topic)\n\n    topic\n  end\n\n  private\n\n  def create_shared_draft(topic)\n    return if @opts[:shared_draft].blank? || @opts[:shared_draft] == 'false'\n\n    category_id = @opts[:category].blank? ? SiteSetting.shared_drafts_category.to_i : @opts[:category]\n    SharedDraft.create(topic_id: topic.id, category_id: category_id)\n  end\n\n  def create_warning(topic)\n    return unless @opts[:is_warning]\n\n    # We can only attach warnings to PMs\n    rollback_with!(topic, :warning_requires_pm) unless topic.private_message?\n\n    # Don't create it if there is more than one user\n    rollback_with!(topic, :too_many_users) if @added_users.size != 1\n\n    # Create a warning record\n    UserWarning.create(topic: topic, user: @added_users.first, created_by: @user)\n  end\n\n  def watch_topic(topic)\n    unless @opts[:auto_track] == false\n      topic.notifier.watch_topic!(topic.user_id)\n    end\n\n    topic.reload.topic_allowed_users.each do |tau|\n      next if tau.user_id == -1 || tau.user_id == topic.user_id\n      topic.notifier.watch!(tau.user_id)\n    end\n\n    topic.reload.topic_allowed_groups.each do |topic_allowed_group|\n      topic_allowed_group.group.set_message_default_notification_levels!(topic)\n    end\n  end\n\n  def setup_topic_params\n    @opts[:visible] = true if @opts[:visible].nil?\n\n    topic_params = {\n      title: @opts[:title],\n      user_id: @user.id,\n      last_post_user_id: @user.id,\n      visible: @opts[:visible]\n    }\n\n    [:subtype, :archetype, :meta_data, :import_mode, :advance_draft].each do |key|\n      topic_params[key] = @opts[key] if @opts[key].present?\n    end\n\n    if topic_params[:import_mode] && @opts[:views].to_i > 0\n      topic_params[:views] = @opts[:views].to_i\n    end\n\n    if topic_params[:import_mode] && @opts[:participant_count].to_i > 0\n      topic_params[:participant_count] = @opts[:participant_count].to_i\n    end\n\n    # Automatically give it a moderator warning subtype if specified\n    topic_params[:subtype] = TopicSubtype.moderator_warning if @opts[:is_warning]\n\n    category = find_category\n    @guardian.ensure_can_create!(Topic, category) unless (@opts[:skip_validations] || @opts[:archetype] == Archetype.private_message)\n\n    if @opts[:category].present? && category.nil?\n      raise Discourse::InvalidParameters.new(:category)\n    end\n\n    topic_params[:category_id] = category.id if category.present?\n    topic_params[:created_at] = convert_time(@opts[:created_at]) if @opts[:created_at].present?\n    topic_params[:pinned_at] = convert_time(@opts[:pinned_at]) if @opts[:pinned_at].present?\n    topic_params[:pinned_globally] = @opts[:pinned_globally] if @opts[:pinned_globally].present?\n    topic_params[:external_id] = @opts[:external_id] if @opts[:external_id].present?\n    topic_params[:featured_link] = @opts[:featured_link]\n\n    topic_params\n  end\n\n  def convert_time(timestamp)\n    if timestamp.is_a?(Time)\n      timestamp\n    else\n      Time.zone.parse(timestamp.to_s)\n    end\n  end\n\n  def find_category\n    @category ||= begin\n      # PM can't have a category\n      @opts.delete(:category) if @opts[:archetype].present? && @opts[:archetype] == Archetype.private_message\n\n      if @opts[:shared_draft]\n        return Category.find(SiteSetting.shared_drafts_category)\n      end\n\n      if (@opts[:category].is_a? Integer) || (@opts[:category] =~ /^\\d+$/)\n        Category.find_by(id: @opts[:category])\n      end\n    end\n  end\n\n  def setup_tags(topic)\n    if @opts[:tags].present?\n      valid_tags = DiscourseTagging.tag_topic_by_names(topic, @guardian, @opts[:tags])\n      unless valid_tags\n        topic.errors.add(:base, :unable_to_tag)\n        rollback_from_errors!(topic)\n      end\n    end\n\n    watched_words = WordWatcher.words_for_action(:tag)\n    if watched_words.present?\n      word_watcher = WordWatcher.new(\"#{@opts[:title]} #{@opts[:raw]}\")\n      word_watcher_tags = topic.tags.map(&:name)\n      watched_words.each do |word, opts|\n        if word_watcher.word_matches?(word, case_sensitive: opts[:case_sensitive])\n          word_watcher_tags += opts[:replacement].split(\",\")\n        end\n      end\n      DiscourseTagging.tag_topic_by_names(topic, Discourse.system_user.guardian, word_watcher_tags)\n    end\n  end\n\n  def setup_auto_close_time(topic)\n    return unless @opts[:auto_close_time].present?\n    return unless @guardian.can_moderate?(topic)\n    topic.set_auto_close(@opts[:auto_close_time], by_user: @user)\n  end\n\n  def process_private_message(topic)\n    return unless @opts[:archetype] == Archetype.private_message\n    topic.subtype = TopicSubtype.user_to_user unless topic.subtype\n\n    unless @opts[:target_usernames].present? || @opts[:target_emails].present? || @opts[:target_group_names].present?\n      rollback_with!(topic, :no_user_selected)\n    end\n\n    if @opts[:target_emails].present? && !@guardian.can_send_private_messages_to_email? then\n      rollback_with!(topic, :send_to_email_disabled)\n    end\n\n    add_users(topic, @opts[:target_usernames])\n    add_emails(topic, @opts[:target_emails])\n    add_groups(topic, @opts[:target_group_names])\n\n    if !@added_users.include?(user)\n      topic.topic_allowed_users.build(user_id: @user.id)\n    end\n\n  end\n\n  def save_topic(topic)\n    topic.disable_rate_limits! if @opts[:skip_validations]\n\n    unless topic.save(validate: !@opts[:skip_validations])\n      rollback_from_errors!(topic)\n    end\n  end\n\n  def add_users(topic, usernames)\n    return unless usernames\n\n    names = usernames.split(',').flatten.map(&:downcase)\n    len = 0\n\n    User.includes(:user_option).where('username_lower in (?)', names).find_each do |user|\n      check_can_send_permission!(topic, user)\n      @added_users << user\n      topic.topic_allowed_users.build(user_id: user.id)\n      len += 1\n    end\n\n    rollback_with!(topic, :target_user_not_found) unless len == names.length\n  end\n\n  def add_emails(topic, emails)\n    return unless emails\n\n    begin\n      emails = emails.split(',').flatten\n      len = 0\n\n      emails.each do |email|\n        display_name = email.split(\"@\").first\n\n        if user = find_or_create_user(email, display_name)\n          if !@added_users.include?(user)\n            @added_users << user\n            topic.topic_allowed_users.build(user_id: user.id)\n          end\n          len += 1\n        end\n      end\n    ensure\n      rollback_with!(topic, :target_user_not_found) unless len == emails.length\n    end\n  end\n\n  def add_groups(topic, groups)\n    return unless groups\n    names = groups.split(',').flatten.map(&:downcase)\n    len = 0\n\n    Group.where('lower(name) in (?)', names).each do |group|\n      check_can_send_permission!(topic, group)\n      topic.topic_allowed_groups.build(group_id: group.id)\n      len += 1\n      group.update_columns(has_messages: true) unless group.has_messages\n    end\n\n    rollback_with!(topic, :target_group_not_found) unless len == names.length\n  end\n\n  def check_can_send_permission!(topic, obj)\n    unless @opts[:skip_validations] ||\n      @guardian.can_send_private_message?(obj, notify_moderators: topic&.subtype == TopicSubtype.notify_moderators)\n      rollback_with!(topic, :cant_send_pm)\n    end\n  end\n\n  def find_or_create_user(email, display_name)\n    user = User.find_by_email(email)\n\n    if !user && SiteSetting.enable_staged_users\n      username = UserNameSuggester.sanitize_username(display_name) if display_name.present?\n\n      user = User.create!(\n        email: email,\n        username: UserNameSuggester.suggest(username.presence || email),\n        name: display_name.presence || User.suggest_name(email),\n        staged: true\n      )\n    end\n\n    user\n  end\n\nend\n", "# frozen_string_literal: true\n\nRSpec.describe TopicGuardian do\n  fab!(:user) { Fabricate(:user) }\n  fab!(:admin) { Fabricate(:admin) }\n  fab!(:tl3_user) { Fabricate(:leader) }\n  fab!(:moderator) { Fabricate(:moderator) }\n  fab!(:category) { Fabricate(:category) }\n  fab!(:group) { Fabricate(:group) }\n  fab!(:private_category) { Fabricate(:private_category, group: group) }\n  fab!(:topic) { Fabricate(:topic, category: category) }\n  fab!(:private_topic) { Fabricate(:topic, category: private_category) }\n  fab!(:private_message_topic) { Fabricate(:private_message_topic) }\n\n  before do\n    Guardian.enable_topic_can_see_consistency_check\n  end\n\n  after do\n    Guardian.disable_topic_can_see_consistency_check\n  end\n\n  describe '#can_create_shared_draft?' do\n    it 'when shared_drafts are disabled' do\n      SiteSetting.shared_drafts_min_trust_level = 'admin'\n\n      expect(Guardian.new(admin).can_create_shared_draft?).to eq(false)\n    end\n\n    it 'when user is a moderator and access is set to admin' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = 'admin'\n\n      expect(Guardian.new(moderator).can_create_shared_draft?).to eq(false)\n    end\n\n    it 'when user is a moderator and access is set to staff' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = 'staff'\n\n      expect(Guardian.new(moderator).can_create_shared_draft?).to eq(true)\n    end\n\n    it 'when user is TL3 and access is set to TL2' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = '2'\n\n      expect(Guardian.new(tl3_user).can_create_shared_draft?).to eq(true)\n    end\n  end\n\n  describe '#can_see_shared_draft?' do\n    it 'when shared_drafts are disabled (existing shared drafts)' do\n      SiteSetting.shared_drafts_min_trust_level = 'admin'\n\n      expect(Guardian.new(admin).can_see_shared_draft?).to eq(true)\n    end\n\n    it 'when user is a moderator and access is set to admin' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = 'admin'\n\n      expect(Guardian.new(moderator).can_see_shared_draft?).to eq(false)\n    end\n\n    it 'when user is a moderator and access is set to staff' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = 'staff'\n\n      expect(Guardian.new(moderator).can_see_shared_draft?).to eq(true)\n    end\n\n    it 'when user is TL3 and access is set to TL2' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = '2'\n\n      expect(Guardian.new(tl3_user).can_see_shared_draft?).to eq(true)\n    end\n  end\n\n  describe '#can_edit_topic?' do\n    context 'when the topic is a shared draft' do\n      let(:tl2_user) { Fabricate(:user, trust_level: TrustLevel[2])  }\n\n      before do\n        SiteSetting.shared_drafts_category = category.id\n        SiteSetting.shared_drafts_min_trust_level = '2'\n      end\n\n      it 'returns false if the topic is a PM' do\n        pm_with_draft = Fabricate(:private_message_topic, category: category)\n        Fabricate(:shared_draft, topic: pm_with_draft)\n\n        expect(Guardian.new(tl2_user).can_edit_topic?(pm_with_draft)).to eq(false)\n      end\n\n      it 'returns false if the topic is archived' do\n        archived_topic = Fabricate(:topic, archived: true, category: category)\n        Fabricate(:shared_draft, topic: archived_topic)\n\n        expect(Guardian.new(tl2_user).can_edit_topic?(archived_topic)).to eq(false)\n      end\n\n      it 'returns true if a shared draft exists' do\n        Fabricate(:shared_draft, topic: topic)\n\n        expect(Guardian.new(tl2_user).can_edit_topic?(topic)).to eq(true)\n      end\n\n      it 'returns false if the user has a lower trust level' do\n        tl1_user = Fabricate(:user, trust_level: TrustLevel[1])\n        Fabricate(:shared_draft, topic: topic)\n\n        expect(Guardian.new(tl1_user).can_edit_topic?(topic)).to eq(false)\n      end\n\n      it 'returns true if the shared_draft is from a different category' do\n        topic = Fabricate(:topic, category: Fabricate(:category))\n        Fabricate(:shared_draft, topic: topic)\n\n        expect(Guardian.new(tl2_user).can_edit_topic?(topic)).to eq(false)\n      end\n    end\n  end\n\n  describe '#can_review_topic?' do\n    it 'returns false for TL4 users' do\n      tl4_user = Fabricate(:user, trust_level: TrustLevel[4])\n      topic = Fabricate(:topic)\n\n      expect(Guardian.new(tl4_user).can_review_topic?(topic)).to eq(false)\n    end\n  end\n\n  # The test cases here are intentionally kept brief because majority of the cases are already handled by\n  # `TopicGuardianCanSeeConsistencyCheck` which we run to ensure that the implementation between `TopicGuardian#can_see_topic_ids`\n  # and `TopicGuardian#can_see_topic?` is consistent.\n  describe '#can_see_topic_ids' do\n    it 'returns the topic ids for the topics which a user is allowed to see' do\n      expect(Guardian.new.can_see_topic_ids(topic_ids: [topic.id, private_message_topic.id])).to contain_exactly(\n        topic.id\n      )\n\n      expect(Guardian.new(user).can_see_topic_ids(topic_ids: [topic.id, private_message_topic.id])).to contain_exactly(\n        topic.id\n      )\n\n      expect(Guardian.new(moderator).can_see_topic_ids(topic_ids: [topic.id, private_message_topic.id])).to contain_exactly(\n        topic.id,\n      )\n\n      expect(Guardian.new(admin).can_see_topic_ids(topic_ids: [topic.id, private_message_topic.id])).to contain_exactly(\n        topic.id,\n        private_message_topic.id\n      )\n    end\n\n    it 'returns the topic ids for topics which are deleted but user is a category moderator of' do\n      SiteSetting.enable_category_group_moderation = true\n\n      category.update!(reviewable_by_group_id: group.id)\n      group.add(user)\n      topic.update!(category: category)\n      topic.trash!(admin)\n\n      topic2 = Fabricate(:topic)\n      user2 = Fabricate(:user)\n\n      expect(Guardian.new(user).can_see_topic_ids(topic_ids: [topic.id, topic2.id])).to contain_exactly(\n        topic.id,\n        topic2.id\n      )\n\n      expect(Guardian.new(user2).can_see_topic_ids(topic_ids: [topic.id, topic2.id])).to contain_exactly(\n        topic2.id,\n      )\n    end\n  end\n\n  describe '#filter_allowed_categories' do\n\n    it 'allows admin access to categories without explicit access' do\n      guardian = Guardian.new(admin)\n      list = Topic.where(id: private_topic.id)\n      list = guardian.filter_allowed_categories(list)\n\n      expect(list.count).to eq(1)\n    end\n\n    context 'when SiteSetting.suppress_secured_categories_from_admin is true' do\n      before do\n        SiteSetting.suppress_secured_categories_from_admin = true\n      end\n\n      it 'does not allow admin access to categories without explicit access' do\n        guardian = Guardian.new(admin)\n        list = Topic.where(id: private_topic.id)\n        list = guardian.filter_allowed_categories(list)\n\n        expect(list.count).to eq(0)\n      end\n    end\n\n  end\nend\n", "# frozen_string_literal: true\n\nRSpec.describe TopicCreator do\n  fab!(:user)      { Fabricate(:user, trust_level: TrustLevel[2]) }\n  fab!(:moderator) { Fabricate(:moderator) }\n  fab!(:admin)     { Fabricate(:admin) }\n\n  let(:valid_attrs) { Fabricate.attributes_for(:topic) }\n  let(:pm_valid_attrs)  { { raw: 'this is a new post', title: 'this is a new title', archetype: Archetype.private_message, target_usernames: moderator.username } }\n\n  let(:pm_to_email_valid_attrs) do\n    {\n      raw: 'this is a new email',\n      title: 'this is a new subject',\n      archetype: Archetype.private_message,\n      target_emails: 'moderator@example.com'\n    }\n  end\n\n  describe '#create' do\n    context 'with topic success cases' do\n      before do\n        TopicCreator.any_instance.expects(:save_topic).returns(true)\n        TopicCreator.any_instance.expects(:watch_topic).returns(true)\n        SiteSetting.allow_duplicate_topic_titles = true\n      end\n\n      it \"should be possible for an admin to create a topic\" do\n        expect(TopicCreator.create(admin, Guardian.new(admin), valid_attrs)).to be_valid\n      end\n\n      it \"should be possible for a moderator to create a topic\" do\n        expect(TopicCreator.create(moderator, Guardian.new(moderator), valid_attrs)).to be_valid\n      end\n\n      it \"supports both meta_data and custom_fields\" do\n        opts = valid_attrs.merge(\n          meta_data: { import_topic_id: \"foo\" },\n          custom_fields: { import_id: \"bar\" }\n        )\n\n        topic = TopicCreator.create(admin, Guardian.new(admin), opts)\n\n        expect(topic.custom_fields[\"import_topic_id\"]).to eq(\"foo\")\n        expect(topic.custom_fields[\"import_id\"]).to eq(\"bar\")\n      end\n\n      context 'with regular user' do\n        before { SiteSetting.min_trust_to_create_topic = TrustLevel[0] }\n\n        it \"should be possible for a regular user to create a topic\" do\n          expect(TopicCreator.create(user, Guardian.new(user), valid_attrs)).to be_valid\n        end\n\n        it \"should be possible for a regular user to create a topic with blank auto_close_time\" do\n          expect(TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(auto_close_time: ''))).to be_valid\n        end\n\n        it \"ignores auto_close_time without raising an error\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(auto_close_time: '24'))\n          expect(topic).to be_valid\n          expect(topic.public_topic_timer).to eq(nil)\n        end\n\n        it \"can create a topic in a category\" do\n          category = Fabricate(:category, name: \"Neil's Blog\")\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(category: category.id))\n          expect(topic).to be_valid\n          expect(topic.category).to eq(category)\n        end\n\n        it \"ignores participant_count without raising an error\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(participant_count: 3))\n          expect(topic.participant_count).to eq(1)\n        end\n\n        it \"accepts participant_count in import mode\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(import_mode: true, participant_count: 3))\n          expect(topic.participant_count).to eq(3)\n        end\n      end\n    end\n\n    context 'with tags' do\n      fab!(:tag1) { Fabricate(:tag, name: \"fun\") }\n      fab!(:tag2) { Fabricate(:tag, name: \"fun2\") }\n      fab!(:tag3) { Fabricate(:tag, name: \"fun3\") }\n      fab!(:tag4) { Fabricate(:tag, name: \"fun4\") }\n      fab!(:tag5) { Fabricate(:tag, name: \"fun5\") }\n      fab!(:tag_group1) { Fabricate(:tag_group, tags: [tag1]) }\n      fab!(:tag_group2) { Fabricate(:tag_group, tags: [tag2]) }\n\n      before do\n        SiteSetting.tagging_enabled = true\n        SiteSetting.min_trust_to_create_tag = 0\n        SiteSetting.min_trust_level_to_tag_topics = 0\n      end\n\n      context 'with regular tags' do\n        it \"user can add tags to topic\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(tags: [tag1.name]))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(1)\n        end\n      end\n\n      context 'when assigned via matched watched words' do\n        fab!(:word1) { Fabricate(:watched_word, action: WatchedWord.actions[:tag], replacement: tag1.name) }\n        fab!(:word2) { Fabricate(:watched_word, action: WatchedWord.actions[:tag], replacement: tag2.name) }\n        fab!(:word3) { Fabricate(:watched_word, action: WatchedWord.actions[:tag], replacement: tag3.name, case_sensitive: true) }\n\n        it 'adds watched words as tags' do\n          topic = TopicCreator.create(\n            user,\n            Guardian.new(user),\n            valid_attrs.merge(\n              title: \"This is a #{word1.word} title\",\n              raw: \"#{word2.word.upcase} is not the same as #{word3.word.upcase}\")\n          )\n\n          expect(topic).to be_valid\n          expect(topic.tags).to contain_exactly(tag1, tag2)\n        end\n      end\n\n      context 'with staff-only tags' do\n        before do\n          create_staff_only_tags(['alpha'])\n        end\n\n        it \"regular users can't add staff-only tags\" do\n          expect do\n            TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(tags: ['alpha']))\n          end.to raise_error(ActiveRecord::Rollback)\n        end\n\n        it 'staff can add staff-only tags' do\n          topic = TopicCreator.create(admin, Guardian.new(admin), valid_attrs.merge(tags: ['alpha']))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(1)\n        end\n      end\n\n      context 'when minimum_required_tags is present' do\n        fab!(:category) { Fabricate(:category, name: \"beta\", minimum_required_tags: 2) }\n\n        it \"fails for regular user if minimum_required_tags is not satisfied\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(user), valid_attrs.merge(category: category.id)).valid?\n          ).to be_falsy\n        end\n\n        it \"lets admin create a topic regardless of minimum_required_tags\" do\n          topic = TopicCreator.create(admin, Guardian.new(admin), valid_attrs.merge(tags: [tag1.name], category: category.id))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(1)\n        end\n\n        it \"works for regular user if minimum_required_tags is satisfied\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(tags: [tag1.name, tag2.name], category: category.id))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(2)\n        end\n\n        it \"minimum_required_tags is satisfying for new tags if user can create\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(tags: [\"new tag\", \"another tag\"], category: category.id))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(2)\n        end\n\n        it \"lets new user create a topic if they don't have sufficient trust level to tag topics\" do\n          SiteSetting.min_trust_level_to_tag_topics = 1\n          new_user = Fabricate(:newuser)\n          topic = TopicCreator.create(new_user, Guardian.new(new_user), valid_attrs.merge(category: category.id))\n          expect(topic).to be_valid\n        end\n      end\n\n      context 'with required tag group' do\n        fab!(:tag_group) { Fabricate(:tag_group, tags: [tag1]) }\n        fab!(:category) { Fabricate(:category, name: \"beta\", category_required_tag_groups: [CategoryRequiredTagGroup.new(tag_group: tag_group, min_count: 1)]) }\n\n        it \"when no tags are not present\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(user), valid_attrs.merge(category: category.id)).valid?\n          ).to be_falsy\n        end\n\n        it \"when tags are not part of the tag group\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(user), valid_attrs.merge(category: category.id, tags: ['nope'])).valid?\n          ).to be_falsy\n        end\n\n        it \"when requirement is met\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(user), valid_attrs.merge(category: category.id, tags: [tag1.name, tag2.name])).valid?\n          ).to be_truthy\n        end\n\n        it \"lets staff ignore the restriction\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(admin), valid_attrs.merge(category: category.id)).valid?\n          ).to be_truthy\n        end\n      end\n\n      context \"when category has restricted tags or tag groups\" do\n        fab!(:category) { Fabricate(:category, tags: [tag3], tag_groups: [tag_group1]) }\n\n        it \"allows topics without any tags\" do\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic without tags\",\n            raw: \"hello this is a test topic without tags\",\n            category: category.id,\n          )\n          expect(tc.valid?).to eq(true)\n          expect(tc.errors).to be_empty\n          topic = tc.create\n          expect(topic.tags).to be_empty\n        end\n\n        it \"allows topics if they use tags only from the tags set that the category restricts\" do\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag1.name, tag3.name]\n          )\n          expect(tc.valid?).to eq(true)\n          expect(tc.errors).to be_empty\n          topic = tc.create\n          expect(topic.tags).to contain_exactly(tag1, tag3)\n        end\n\n        it \"allows topics to use tags that are restricted in multiple categories\" do\n          category2 = Fabricate(:category, tags: [tag5], tag_groups: [tag_group1])\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category2.id,\n            tags: [tag1.name, tag5.name]\n          )\n          expect(tc.valid?).to eq(true)\n          expect(tc.errors).to be_empty\n          topic = tc.create\n          expect(topic.tags).to contain_exactly(tag1, tag5)\n\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags 1\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag1.name, tag3.name]\n          )\n          expect(tc.valid?).to eq(true)\n          expect(tc.errors).to be_empty\n          topic = tc.create\n          expect(topic.tags).to contain_exactly(tag1, tag3)\n\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags 2\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag1.name, tag5.name]\n          )\n          expect(tc.valid?).to eq(false)\n          expect(tc.errors.full_messages).to contain_exactly(\n            I18n.t(\n              \"tags.forbidden.restricted_tags_cannot_be_used_in_category\",\n              count: 1,\n              tags: tag5.name,\n              category: category.name\n            )\n          )\n        end\n\n        it \"rejects topics if they use a tag outside the set of tags that the category restricts\" do\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag2.name, tag1.name]\n          )\n          expect(tc.valid?).to eq(false)\n          expect(tc.errors.full_messages).to contain_exactly(\n            I18n.t(\n              \"tags.forbidden.category_does_not_allow_tags\",\n              count: 1,\n              tags: tag2.name,\n              category: category.name\n            )\n          )\n\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag2.name, tag5.name, tag3.name]\n          )\n          expect(tc.valid?).to eq(false)\n          expect(tc.errors.full_messages).to contain_exactly(\n            I18n.t(\n              \"tags.forbidden.category_does_not_allow_tags\",\n              count: 2,\n              tags: [tag2, tag5].map(&:name).sort.join(\", \"),\n              category: category.name\n            )\n          )\n        end\n\n        it \"rejects topics in other categories if a restricted tag of a category are used\" do\n          category2 = Fabricate(:category)\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category2.id,\n            tags: [tag1.name, tag2.name]\n          )\n          expect(tc.valid?).to eq(false)\n          expect(tc.errors.full_messages).to contain_exactly(\n            I18n.t(\n              \"tags.forbidden.restricted_tags_cannot_be_used_in_category\",\n              count: 1,\n              tags: tag1.name,\n              category: category2.name\n            )\n          )\n        end\n\n        context \"when allowing other tags\" do\n          before { category.update!(allow_global_tags: true) }\n\n          it \"allows topics to use tags that aren't restricted by any category\" do\n            tc = TopicCreator.new(\n              user,\n              Guardian.new(user),\n              title: \"hello this is a test topic with tags\",\n              raw: \"hello this is a test topic with tags\",\n              category: category.id,\n              tags: [tag1.name, tag2.name, tag3.name, tag5.name]\n            )\n            expect(tc.valid?).to eq(true)\n            expect(tc.errors).to be_empty\n            topic = tc.create\n            expect(topic.tags).to contain_exactly(tag1, tag2, tag3, tag5)\n          end\n\n          it \"rejects topics if they use restricted tags of another category\" do\n            Fabricate(:category, tags: [tag5], tag_groups: [tag_group2])\n            tc = TopicCreator.new(\n              user,\n              Guardian.new(user),\n              title: \"hello this is a test topic with tags\",\n              raw: \"hello this is a test topic with tags\",\n              category: category.id,\n              tags: [tag1.name, tag5.name]\n            )\n            expect(tc.valid?).to eq(false)\n            expect(tc.errors.full_messages).to contain_exactly(\n              I18n.t(\n                \"tags.forbidden.restricted_tags_cannot_be_used_in_category\",\n                count: 1,\n                tags: tag5.name,\n                category: category.name\n              )\n            )\n\n            tc = TopicCreator.new(\n              user,\n              Guardian.new(user),\n              title: \"hello this is a test topic with tags\",\n              raw: \"hello this is a test topic with tags\",\n              category: category.id,\n              tags: [tag1.name, tag2.name, tag5.name]\n            )\n            expect(tc.valid?).to eq(false)\n            expect(tc.errors.full_messages).to contain_exactly(\n              I18n.t(\n                \"tags.forbidden.restricted_tags_cannot_be_used_in_category\",\n                count: 2,\n                tags: [tag2, tag5].map(&:name).sort.join(\", \"),\n                category: category.name\n              )\n            )\n          end\n        end\n      end\n    end\n\n    context 'with personal message' do\n      context 'with success cases' do\n        before do\n          TopicCreator.any_instance.expects(:save_topic).returns(true)\n          TopicCreator.any_instance.expects(:watch_topic).returns(true)\n          SiteSetting.allow_duplicate_topic_titles = true\n          SiteSetting.enable_staged_users = true\n          Group.refresh_automatic_groups!\n        end\n\n        it \"should be possible for a regular user to send private message\" do\n          expect(TopicCreator.create(user, Guardian.new(user), pm_valid_attrs)).to be_valid\n        end\n\n        it \"min_trust_to_create_topic setting should not be checked when sending private message\" do\n          SiteSetting.min_trust_to_create_topic = TrustLevel[4]\n          expect(TopicCreator.create(user, Guardian.new(user), pm_valid_attrs)).to be_valid\n        end\n\n        it \"personal_message_enabled_groups setting should not be checked when sending private messages to staff via flag\" do\n          SiteSetting.personal_message_enabled_groups = Group::AUTO_GROUPS[:staff]\n          expect(TopicCreator.create(user, Guardian.new(user), pm_valid_attrs.merge(subtype: TopicSubtype.notify_moderators))).to be_valid\n        end\n      end\n\n      context 'with failure cases' do\n        it \"should be rollback the changes when email is invalid\" do\n          SiteSetting.manual_polling_enabled = true\n          SiteSetting.reply_by_email_address = \"sam+%{reply_key}@sam.com\"\n          SiteSetting.reply_by_email_enabled = true\n          SiteSetting.min_trust_to_send_email_messages = TrustLevel[1]\n          attrs = pm_to_email_valid_attrs.dup\n          attrs[:target_emails] = \"t\" * 256\n\n          expect do\n            TopicCreator.create(user, Guardian.new(user), attrs)\n          end.to raise_error(ActiveRecord::Rollback)\n        end\n\n        it \"personal_message_enabled_groups setting should be checked when sending private message\" do\n          SiteSetting.personal_message_enabled_groups = Group::AUTO_GROUPS[:trust_level_4]\n\n          expect do\n            TopicCreator.create(user, Guardian.new(user), pm_valid_attrs)\n          end.to raise_error(ActiveRecord::Rollback)\n        end\n      end\n\n      context 'with to emails' do\n        before do\n          Group.refresh_automatic_groups!\n        end\n\n        it 'works for staff' do\n          SiteSetting.min_trust_to_send_email_messages = 'staff'\n          expect(TopicCreator.create(admin, Guardian.new(admin), pm_to_email_valid_attrs)).to be_valid\n        end\n\n        it 'work for trusted users' do\n          SiteSetting.min_trust_to_send_email_messages = 3\n          user.update!(trust_level: 3)\n          expect(TopicCreator.create(user, Guardian.new(user), pm_to_email_valid_attrs)).to be_valid\n        end\n\n        it 'does not work for non-staff' do\n          SiteSetting.min_trust_to_send_email_messages = 'staff'\n          expect { TopicCreator.create(user, Guardian.new(user), pm_to_email_valid_attrs) }.to raise_error(ActiveRecord::Rollback)\n        end\n\n        it 'does not work for untrusted users' do\n          SiteSetting.min_trust_to_send_email_messages = 3\n          user.update!(trust_level: 2)\n          expect { TopicCreator.create(user, Guardian.new(user), pm_to_email_valid_attrs) }.to raise_error(ActiveRecord::Rollback)\n        end\n      end\n    end\n\n    context 'when setting timestamps' do\n      it 'supports Time instances' do\n        freeze_time\n\n        topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(\n          created_at: 1.week.ago,\n          pinned_at: 3.days.ago\n        ))\n\n        expect(topic.created_at).to eq_time(1.week.ago)\n        expect(topic.pinned_at).to eq_time(3.days.ago)\n      end\n\n      it 'supports strings' do\n        freeze_time\n\n        time1 = Time.zone.parse('2019-09-02')\n        time2 = Time.zone.parse('2020-03-10 15:17')\n\n        topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(\n          created_at: '2019-09-02',\n          pinned_at: '2020-03-10 15:17'\n        ))\n\n        expect(topic.created_at).to eq_time(time1)\n        expect(topic.pinned_at).to eq_time(time2)\n      end\n    end\n\n    context 'with external_id' do\n      it 'adds external_id' do\n        topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(\n          external_id: 'external_id'\n        ))\n\n        expect(topic.external_id).to eq('external_id')\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nRSpec.shared_examples 'finding and showing post' do\n  let!(:post) { post_by_user }\n\n  it \"ensures the user can't see the post\" do\n    topic = post.topic\n    topic.convert_to_private_message(Discourse.system_user)\n    topic.remove_allowed_user(Discourse.system_user, user.username)\n    get url\n    expect(response).to be_forbidden\n  end\n\n  it 'succeeds' do\n    get url\n    expect(response.status).to eq(200)\n  end\n\n  it \"returns 404 when post's topic is deleted\" do\n    post.topic.destroy!\n    get url\n    expect(response.status).to eq(404)\n  end\n\n  context \"with deleted post\" do\n    before do\n      post.trash!(user)\n    end\n\n    it \"can't find deleted posts as an anonymous user\" do\n      get url\n      expect(response.status).to eq(404)\n    end\n\n    it \"can't find deleted posts as a regular user\" do\n      sign_in(user)\n      get url\n      expect(response.status).to eq(404)\n    end\n\n    it \"can find posts as a moderator\" do\n      sign_in(moderator)\n      get url\n      expect(response.status).to eq(200)\n    end\n\n    it \"can find posts as a admin\" do\n      sign_in(admin)\n      get url\n      expect(response.status).to eq(200)\n    end\n\n    context \"with category group moderator\" do\n      fab!(:group_user) { Fabricate(:group_user) }\n      let(:user_gm) { group_user.user }\n      let(:group) { group_user.group }\n\n      before do\n        SiteSetting.enable_category_group_moderation = true\n        sign_in(user_gm)\n      end\n\n      it \"can find posts in the allowed category\" do\n        post.topic.category.update!(reviewable_by_group_id: group.id, topic_id: topic.id)\n        get url\n        expect(response.status).to eq(200)\n      end\n\n      it \"can't find posts outside of the allowed category\" do\n        get url\n        expect(response.status).to eq(404)\n      end\n    end\n  end\nend\n\nRSpec.shared_examples 'action requires login' do |method, url, params = {}|\n  it 'raises an exception when not logged in' do\n    self.public_send(method, url, **params)\n    expect(response.status).to eq(403)\n  end\nend\n\nRSpec.describe PostsController do\n  fab!(:admin) { Fabricate(:admin) }\n  fab!(:moderator) { Fabricate(:moderator) }\n  fab!(:user) { Fabricate(:user) }\n  fab!(:user_trust_level_0) { Fabricate(:trust_level_0) }\n  fab!(:user_trust_level_1) { Fabricate(:trust_level_1) }\n  fab!(:category) { Fabricate(:category) }\n  fab!(:topic) { Fabricate(:topic) }\n  fab!(:post_by_user) { Fabricate(:post, user: user) }\n  let(:public_post) { Fabricate(:post, user: user, topic: topic) }\n  let(:topicless_post) { Fabricate(:post, user: user, raw: '<p>Car 54, where are you?</p>') }\n\n  let(:private_topic) do\n    Fabricate(:topic, archetype: Archetype.private_message, category_id: nil)\n  end\n\n  let(:private_post) { Fabricate(:post, user: user, topic: private_topic) }\n\n  describe '#show' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/#{post.id}.json\" }\n    end\n\n    it 'gets all the expected fields' do\n      # non fabricated test\n      new_post = create_post\n\n      get \"/posts/#{new_post.id}.json\"\n      parsed = response.parsed_body\n\n      expect(parsed[\"topic_slug\"]).to eq(new_post.topic.slug)\n      expect(parsed[\"moderator\"]).to eq(false)\n      expect(parsed[\"username\"]).to eq(new_post.user.username)\n      expect(parsed[\"cooked\"]).to eq(new_post.cooked)\n    end\n  end\n\n  describe '#by_number' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/by_number/#{post.topic_id}/#{post.post_number}.json\" }\n    end\n  end\n\n  describe '#by_date' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/by-date/#{post.topic_id}/#{post.created_at.strftime(\"%Y-%m-%d\")}.json\" }\n    end\n\n    it 'returns the expected post' do\n      first_post = Fabricate(:post, created_at: 10.days.ago)\n      second_post = Fabricate(:post, topic: first_post.topic, created_at: 4.days.ago)\n      _third_post = Fabricate(:post, topic: first_post.topic, created_at: 3.days.ago)\n\n      get \"/posts/by-date/#{second_post.topic_id}/#{(second_post.created_at - 2.days).strftime(\"%Y-%m-%d\")}.json\"\n      json = response.parsed_body\n\n      expect(response.status).to eq(200)\n      expect(json[\"id\"]).to eq(second_post.id)\n    end\n\n    it 'returns no post if date is > at last created post' do\n      get \"/posts/by-date/#{post.topic_id}/2245-11-11.json\"\n      _json = response.parsed_body\n      expect(response.status).to eq(404)\n    end\n  end\n\n  describe '#reply_history' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/#{post.id}/reply-history.json\" }\n    end\n\n    it \"returns the replies with allowlisted user custom fields\" do\n      parent = Fabricate(:post)\n      child = Fabricate(:post, topic: parent.topic, reply_to_post_number: parent.post_number)\n\n      parent.user.upsert_custom_fields(hello: 'world', hidden: 'dontshow')\n      SiteSetting.public_user_custom_fields = 'hello'\n\n      get \"/posts/#{child.id}/reply-history.json\"\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n      expect(json[0]['id']).to eq(parent.id)\n      expect(json[0]['user_custom_fields']['hello']).to eq('world')\n      expect(json[0]['user_custom_fields']['hidden']).to be_blank\n    end\n  end\n\n  describe '#reply_ids' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/#{post.id}/reply-ids.json\" }\n    end\n\n    it \"returns ids of post's replies\" do\n      post = Fabricate(:post)\n      reply1 = Fabricate(:post, topic: post.topic, reply_to_post_number: post.post_number)\n      reply2 = Fabricate(:post, topic: post.topic, reply_to_post_number: post.post_number)\n      PostReply.create(post_id: post.id, reply_post_id: reply1.id)\n      PostReply.create(post_id: post.id, reply_post_id: reply2.id)\n\n      get \"/posts/#{post.id}/reply-ids.json\"\n\n      expect(response.status).to eq(200)\n      expect(response.parsed_body).to eq([\n        { \"id\" => reply1.id, \"level\" => 1 },\n        { \"id\" => reply2.id, \"level\" => 1 },\n      ])\n    end\n  end\n\n  describe '#replies' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/#{post.id}/replies.json\" }\n    end\n\n    it 'asks post for replies' do\n      parent = Fabricate(:post)\n      child = Fabricate(:post, topic: parent.topic, reply_to_post_number: parent.post_number)\n      PostReply.create!(post: parent, reply: child)\n\n      child.user.upsert_custom_fields(hello: 'world', hidden: 'dontshow')\n      SiteSetting.public_user_custom_fields = 'hello'\n\n      get \"/posts/#{parent.id}/replies.json\"\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n      expect(json[0]['id']).to eq(child.id)\n      expect(json[0]['user_custom_fields']['hello']).to eq('world')\n      expect(json[0]['user_custom_fields']['hidden']).to be_blank\n    end\n  end\n\n  describe '#destroy' do\n    include_examples 'action requires login', :delete, \"/posts/123.json\"\n\n    describe 'when logged in' do\n      let(:topic) { Fabricate(:topic) }\n\n      it \"raises an error when the user doesn't have permission to see the post\" do\n        pm = Fabricate(:private_message_topic)\n        post = Fabricate(:post, topic: pm, post_number: 3)\n\n        sign_in(user)\n\n        delete \"/posts/#{post.id}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"raises an error when the self deletions are disabled\" do\n        SiteSetting.max_post_deletions_per_day = 0\n        post = Fabricate(:post, user: user, topic: topic, post_number: 3)\n        sign_in(user)\n\n        delete \"/posts/#{post.id}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"uses a PostDestroyer\" do\n        post = Fabricate(:post, topic_id: topic.id, post_number: 3)\n        sign_in(moderator)\n\n        destroyer = mock\n        PostDestroyer.expects(:new).returns(destroyer)\n        destroyer.expects(:destroy)\n\n        delete \"/posts/#{post.id}.json\"\n      end\n\n      context \"with permanently destroy\" do\n        let!(:post) { Fabricate(:post, topic_id: topic.id, post_number: 3) }\n\n        before do\n          SiteSetting.can_permanently_delete = true\n        end\n\n        it \"does not work for a post that was not deleted yet\" do\n          sign_in(admin)\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(403)\n        end\n\n        it \"needs some time to pass to permanently delete a topic\" do\n          sign_in(admin)\n\n          delete \"/posts/#{post.id}.json\"\n          expect(response.status).to eq(200)\n          expect(post.reload.deleted_by_id).to eq(admin.id)\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(403)\n\n          post.update!(deleted_at: 10.minutes.ago)\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(200)\n          expect { post.reload }.to raise_error(ActiveRecord::RecordNotFound)\n        end\n\n        it \"needs two users to permanently delete a topic\" do\n          sign_in(admin)\n\n          delete \"/posts/#{post.id}.json\"\n          expect(response.status).to eq(200)\n          expect(post.reload.deleted_by_id).to eq(admin.id)\n\n          sign_in(Fabricate(:admin))\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(200)\n          expect { post.reload }.to raise_error(ActiveRecord::RecordNotFound)\n        end\n\n        it \"moderators cannot permanently delete topics\" do\n          sign_in(admin)\n\n          delete \"/posts/#{post.id}.json\"\n          expect(response.status).to eq(200)\n          expect(post.reload.deleted_by_id).to eq(admin.id)\n\n          sign_in(moderator)\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(403)\n        end\n      end\n    end\n  end\n\n  describe '#destroy_many' do\n    include_examples 'action requires login', :delete, \"/posts/destroy_many.json\", params: { post_ids: [123, 345] }\n\n    describe 'when logged in' do\n      fab!(:poster) { Fabricate(:moderator) }\n      fab!(:post1) { Fabricate(:post, user: poster, post_number: 2) }\n      fab!(:post2) { Fabricate(:post, topic: post1.topic, user: poster, post_number: 3, reply_to_post_number: post1.post_number) }\n\n      it \"raises invalid parameters no post_ids\" do\n        sign_in(poster)\n        delete \"/posts/destroy_many.json\"\n        expect(response.status).to eq(400)\n        expect(response.message.downcase).to eq(\"bad request\")\n      end\n\n      it \"raises invalid parameters with missing ids\" do\n        sign_in(poster)\n        delete \"/posts/destroy_many.json\", params: { post_ids: [12345] }\n        expect(response.status).to eq(400)\n      end\n\n      it \"raises an error when the user doesn't have permission to delete the posts\" do\n        sign_in(user)\n        delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id] }\n        expect(response).to be_forbidden\n      end\n\n      it \"deletes the post\" do\n        sign_in(poster)\n        PostDestroyer.any_instance.expects(:destroy).twice\n        delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id] }\n        expect(response.status).to eq(200)\n      end\n\n      it \"updates the highest read data for the forum\" do\n        sign_in(poster)\n        Topic.expects(:reset_highest).twice\n        delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id] }\n      end\n\n      describe \"can delete replies\" do\n        before do\n          PostReply.create(post_id: post1.id, reply_post_id: post2.id)\n        end\n\n        it \"deletes the post and the reply to it\" do\n          sign_in(poster)\n          PostDestroyer.any_instance.expects(:destroy).twice\n          delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id], reply_post_ids: [post1.id] }\n        end\n      end\n\n      context \"when deleting flagged posts\" do\n        before do\n          sign_in(moderator)\n          PostActionCreator.off_topic(moderator, post1)\n          PostActionCreator.off_topic(moderator, post2)\n          Jobs::SendSystemMessage.clear\n        end\n\n        it \"defers the child posts by default\" do\n          expect(ReviewableFlaggedPost.pending.count).to eq(2)\n          delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id] }\n          expect(Jobs::SendSystemMessage.jobs.size).to eq(1)\n          expect(ReviewableFlaggedPost.pending.count).to eq(0)\n        end\n\n        it \"can defer all posts based on `agree_with_first_reply_flag` param\" do\n          expect(ReviewableFlaggedPost.pending.count).to eq(2)\n          delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id], agree_with_first_reply_flag: false }\n          PostActionCreator.off_topic(moderator, post1)\n          PostActionCreator.off_topic(moderator, post2)\n          Jobs::SendSystemMessage.clear\n        end\n      end\n    end\n  end\n\n  describe '#recover' do\n    include_examples 'action requires login', :put, \"/posts/123/recover.json\"\n\n    describe 'when logged in' do\n      it \"raises an error when the user doesn't have permission to see the post\" do\n        post = Fabricate(:post, topic: Fabricate(:private_message_topic), post_number: 3)\n        sign_in(user)\n\n        put \"/posts/#{post.id}/recover.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"raises an error when self deletion/recovery is disabled\" do\n        SiteSetting.max_post_deletions_per_day = 0\n        post = Fabricate(:post, user: user, topic: topic, post_number: 3)\n        sign_in(user)\n\n        put \"/posts/#{post.id}/recover.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"recovers a post correctly\" do\n        topic_id = create_post.topic_id\n        post = create_post(topic_id: topic_id)\n        sign_in(user)\n\n        PostDestroyer.new(user, post).destroy\n        put \"/posts/#{post.id}/recover.json\"\n        post.reload\n        expect(post.trashed?).to be_falsey\n      end\n    end\n  end\n\n  describe '#update' do\n    include_examples 'action requires login', :put, \"/posts/2.json\"\n\n    let!(:post) { post_by_user }\n    let(:update_params) do\n      {\n        post: { raw: 'edited body', edit_reason: 'typo' },\n        image_sizes: { 'http://image.com/image.jpg' => { 'width' => 123, 'height' => 456 } },\n      }\n    end\n\n    describe 'when logged in as a regular user' do\n      before do\n        sign_in(user)\n      end\n\n      it 'does not allow TL0 or TL1 to update when edit time limit expired' do\n        SiteSetting.post_edit_time_limit = 5\n        SiteSetting.tl2_post_edit_time_limit = 30\n\n        post = Fabricate(:post, created_at: 10.minutes.ago, user: user)\n\n        user.update_columns(trust_level: 1)\n\n        put \"/posts/#{post.id}.json\", params: update_params\n\n        expect(response.status).to eq(422)\n        expect(response.parsed_body['errors']).to include(I18n.t('too_late_to_edit'))\n      end\n\n      it 'does not allow TL2 to update when edit time limit expired' do\n        SiteSetting.post_edit_time_limit = 12\n        SiteSetting.tl2_post_edit_time_limit = 8\n\n        user.update_columns(trust_level: 2)\n\n        post = Fabricate(:post, created_at: 10.minutes.ago, user: user)\n\n        put \"/posts/#{post.id}.json\", params: update_params\n\n        expect(response.status).to eq(422)\n        expect(response.parsed_body['errors']).to include(I18n.t('too_late_to_edit'))\n      end\n\n      it 'passes the image sizes through' do\n        Post.any_instance.expects(:image_sizes=)\n        put \"/posts/#{post.id}.json\", params: update_params\n      end\n\n      it 'passes the edit reason through' do\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response.status).to eq(200)\n        post.reload\n        expect(post.edit_reason).to eq(\"typo\")\n        expect(post.raw).to eq(\"edited body\")\n      end\n\n      it 'checks for an edit conflict' do\n        update_params[:post][:raw_old] = 'old body'\n        put \"/posts/#{post.id}.json\", params: update_params\n\n        expect(response.status).to eq(409)\n      end\n\n      it \"raises an error when the post parameter is missing\" do\n        update_params.delete(:post)\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response.status).to eq(400)\n        expect(response.message.downcase).to eq(\"bad request\")\n      end\n\n      it \"raises an error when the user doesn't have permission to see the post\" do\n        post = Fabricate(:private_message_post, post_number: 3)\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response).to be_forbidden\n      end\n\n      it \"updates post's raw attribute\" do\n        put \"/posts/#{post.id}.json\", params: { post: { raw: 'edited body   ' } }\n\n        expect(response.status).to eq(200)\n        expect(response.parsed_body['post']['raw']).to eq('edited body')\n        expect(post.reload.raw).to eq('edited body')\n      end\n\n      it \"extracts links from the new body\" do\n        param = update_params\n        param[:post][:raw] = 'I just visited this https://google.com so many cool links'\n\n        put \"/posts/#{post.id}.json\", params: param\n\n        expect(response.status).to eq(200)\n        expect(TopicLink.count).to eq(1)\n      end\n\n      it \"doesn't allow updating of deleted posts\" do\n        first_post = post.topic.ordered_posts.first\n        PostDestroyer.new(moderator, first_post).destroy\n\n        put \"/posts/#{first_post.id}.json\", params: update_params\n        expect(response).not_to be_successful\n      end\n    end\n\n    describe \"when logged in as staff\" do\n      before do\n        sign_in(moderator)\n      end\n\n      it \"supports updating posts in deleted topics\" do\n        first_post = post.topic.ordered_posts.first\n        PostDestroyer.new(moderator, first_post).destroy\n\n        put \"/posts/#{first_post.id}.json\", params: update_params\n        expect(response.status).to eq(200)\n\n        post.reload\n        expect(post.raw).to eq('edited body')\n      end\n\n      it \"won't update bump date if post is a whisper\" do\n        created_at = freeze_time 1.day.ago\n        post = Fabricate(:post, post_type: Post.types[:whisper], user: user)\n\n        unfreeze_time\n        put \"/posts/#{post.id}.json\", params: update_params\n\n        expect(response.status).to eq(200)\n        expect(post.topic.reload.bumped_at).to eq_time(created_at)\n      end\n    end\n\n    describe \"when logged in as group moderator\" do\n      fab!(:topic) { Fabricate(:topic, category: category) }\n      fab!(:post) { Fabricate(:post, user: user, topic: topic) }\n      fab!(:group_user) { Fabricate(:group_user) }\n      let(:user_gm) { group_user.user }\n      let(:group) { group_user.group }\n\n      before do\n        SiteSetting.enable_category_group_moderation = true\n        post.topic.category.update!(reviewable_by_group_id: group.id, topic_id: topic.id)\n        sign_in(user_gm)\n      end\n\n      it \"allows updating the category description\" do\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response.status).to eq(200)\n\n        post.reload\n        expect(post.raw).to eq('edited body')\n        expect(UserHistory.where(action: UserHistory.actions[:post_edit]).count).to eq(1)\n      end\n\n      it \"can not update category descriptions in other categories\" do\n        second_category = Fabricate(:category)\n        topic.update!(category: second_category)\n\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response.status).to eq(403)\n      end\n\n    end\n\n    it 'can not change category to a disallowed category' do\n      post = create_post\n      sign_in(post.user)\n\n      category = Fabricate(:category)\n      category.set_permissions(staff: :full)\n      category.save!\n\n      put \"/posts/#{post.id}.json\", params: {\n        post: { category_id: category.id, raw: \"this is a test edit to post\" }\n      }\n\n      expect(response.status).not_to eq(200)\n      expect(post.topic.category_id).not_to eq(category.id)\n    end\n\n    it 'can not move to a category that requires topic approval' do\n      post = create_post\n      sign_in(post.user)\n\n      category = Fabricate(:category)\n      category.custom_fields[Category::REQUIRE_TOPIC_APPROVAL] = true\n      category.save!\n\n      put \"/posts/#{post.id}.json\", params: { post: { category_id: category.id, raw: \"this is a test edit to post\" } }\n\n      expect(response.status).to eq(403)\n      expect(post.topic.reload.category_id).not_to eq(category.id)\n    end\n\n    describe \"with Post.plugin_permitted_update_params\" do\n      before do\n        plugin = Plugin::Instance.new\n        plugin.add_permitted_post_update_param(:random_number) do |post, value|\n          post.custom_fields[:random_number] = value\n          post.save\n        end\n      end\n\n      after do\n        DiscoursePluginRegistry.reset!\n      end\n\n      it \"calls blocks passed into `add_permitted_post_update_param`\" do\n        sign_in(post.user)\n        put \"/posts/#{post.id}.json\", params: {\n          post: {\n            raw: \"this is a random post\",\n            raw_old: post.raw,\n            random_number: 244\n          }\n        }\n\n        expect(response.status).to eq(200)\n        expect(post.reload.custom_fields[:random_number]).to eq(\"244\")\n      end\n    end\n  end\n\n  describe \"#destroy_bookmark\" do\n    fab!(:post) { Fabricate(:post) }\n    fab!(:bookmark) { Fabricate(:bookmark, user: user, bookmarkable: post) }\n\n    before do\n      sign_in(user)\n    end\n\n    it \"deletes the bookmark\" do\n      bookmark_id = bookmark.id\n      delete \"/posts/#{post.id}/bookmark.json\"\n      expect(Bookmark.find_by(id: bookmark_id)).to eq(nil)\n    end\n\n    context \"when the user still has bookmarks in the topic\" do\n      before do\n        Fabricate(:bookmark, user: user, bookmarkable: Fabricate(:post, topic: post.topic))\n      end\n      it \"marks topic_bookmarked as true\" do\n        delete \"/posts/#{post.id}/bookmark.json\"\n        expect(response.parsed_body['topic_bookmarked']).to eq(true)\n      end\n    end\n  end\n\n  describe '#wiki' do\n    include_examples \"action requires login\", :put, \"/posts/2/wiki.json\"\n\n    describe \"when logged in\" do\n      before do\n        sign_in(user)\n      end\n\n      let!(:post) { post_by_user }\n\n      it \"returns 400 when wiki parameter is not present\" do\n        sign_in(admin)\n\n        put \"/posts/#{post.id}/wiki.json\", params: {}\n\n        expect(response.status).to eq(400)\n      end\n\n      it \"raises an error if the user doesn't have permission to wiki the post\" do\n        put \"/posts/#{post.id}/wiki.json\", params: { wiki: 'true' }\n        expect(response).to be_forbidden\n      end\n\n      it \"toggle wiki status should create a new version\" do\n        sign_in(admin)\n        another_user = Fabricate(:user)\n        another_post = Fabricate(:post, user: another_user)\n\n        expect do\n          put \"/posts/#{another_post.id}/wiki.json\", params: { wiki: 'true' }\n        end.to change { another_post.reload.version }.by(1)\n\n        expect do\n          put \"/posts/#{another_post.id}/wiki.json\", params: { wiki: 'false' }\n        end.to change { another_post.reload.version }.by(-1)\n\n        sign_in(Fabricate(:admin))\n\n        expect do\n          put \"/posts/#{another_post.id}/wiki.json\", params: { wiki: 'true' }\n        end.to change { another_post.reload.version }.by(1)\n      end\n\n      it \"can wiki a post\" do\n        sign_in(admin)\n        put \"/posts/#{post.id}/wiki.json\", params: { wiki: 'true' }\n\n        post.reload\n        expect(post.wiki).to eq(true)\n      end\n\n      it \"can unwiki a post\" do\n        wikied_post = Fabricate(:post, user: user, wiki: true)\n        sign_in(admin)\n\n        put \"/posts/#{wikied_post.id}/wiki.json\", params: { wiki: 'false' }\n\n        wikied_post.reload\n        expect(wikied_post.wiki).to eq(false)\n      end\n    end\n  end\n\n  describe '#post_type' do\n    include_examples \"action requires login\", :put, \"/posts/2/post_type.json\"\n\n    describe \"when logged in\" do\n      before do\n        sign_in(moderator)\n      end\n\n      let!(:post) { post_by_user }\n\n      it \"raises an error if the user doesn't have permission to change the post type\" do\n        sign_in(user)\n\n        put \"/posts/#{post.id}/post_type.json\", params: { post_type: 2 }\n        expect(response).to be_forbidden\n      end\n\n      it \"returns 400 if post_type parameter is not present\" do\n        put \"/posts/#{post.id}/post_type.json\", params: {}\n\n        expect(response.status).to eq(400)\n      end\n\n      it \"returns 400 if post_type parameters is invalid\" do\n        put \"/posts/#{post.id}/post_type.json\", params: { post_type: -1 }\n\n        expect(response.status).to eq(400)\n      end\n\n      it \"can change the post type\" do\n        put \"/posts/#{post.id}/post_type.json\", params: { post_type: 2 }\n\n        post.reload\n        expect(post.post_type).to eq(2)\n      end\n    end\n  end\n\n  describe '#rebake' do\n    include_examples \"action requires login\", :put, \"/posts/2/rebake.json\"\n\n    describe \"when logged in\" do\n      let!(:post) { post_by_user }\n\n      it \"raises an error if the user doesn't have permission to rebake the post\" do\n        sign_in(user)\n        put \"/posts/#{post.id}/rebake.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"can rebake the post\" do\n        sign_in(moderator)\n        put \"/posts/#{post.id}/rebake.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"will invalidate broken images cache\" do\n        sign_in(moderator)\n        PostHotlinkedMedia.create!(url: \"https://example.com/image.jpg\", post: post, status: 'download_failed')\n        put \"/posts/#{post.id}/rebake.json\"\n        post.reload\n        expect(post.post_hotlinked_media).to eq([])\n      end\n    end\n  end\n\n  describe '#create' do\n    include_examples 'action requires login', :post, \"/posts.json\"\n\n    before do\n      SiteSetting.min_first_post_typing_time = 0\n      SiteSetting.enable_whispers = true\n    end\n\n    context 'with api' do\n      it 'memoizes duplicate requests' do\n        raw = \"this is a test post 123 #{SecureRandom.hash}\"\n        title = \"this is a title #{SecureRandom.hash}\"\n\n        master_key = Fabricate(:api_key).key\n\n        post \"/posts.json\",\n          params: { raw: raw, title: title, wpid: 1 },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        original = response.body\n\n        post \"/posts.json\",\n          params: { raw: raw, title: title, wpid: 2 },\n          headers: { HTTP_API_USERNAME: user.username_lower, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        expect(response.body).to eq(original)\n      end\n\n      it 'allows to create posts in import_mode' do\n        Jobs.run_immediately!\n        NotificationEmailer.enable\n        post_1 = Fabricate(:post)\n        master_key = Fabricate(:api_key).key\n\n        post \"/posts.json\",\n          params: { raw: 'this is test reply 1', topic_id: post_1.topic.id, reply_to_post_number: 1 },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        expect(post_1.topic.user.notifications.count).to eq(1)\n        post_1.topic.user.notifications.destroy_all\n\n        post \"/posts.json\",\n          params: { raw: 'this is test reply 2', topic_id: post_1.topic.id, reply_to_post_number: 1, import_mode: true },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        expect(post_1.topic.user.notifications.count).to eq(0)\n\n        post \"/posts.json\",\n          params: { raw: 'this is test reply 3', topic_id: post_1.topic.id, reply_to_post_number: 1, import_mode: false },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        expect(post_1.topic.user.notifications.count).to eq(1)\n      end\n\n      it 'allows a topic to be created with an external_id' do\n        master_key = Fabricate(:api_key).key\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: \"this is some post\",\n          external_id: 'external_id'\n        }, headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n\n        new_topic = Topic.last\n\n        expect(new_topic.external_id).to eq('external_id')\n      end\n\n      it 'prevents whispers for regular users' do\n        post_1 = Fabricate(:post)\n        user_key = ApiKey.create!(user: user).key\n\n        post \"/posts.json\",\n          params: { raw: 'this is test whisper', topic_id: post_1.topic.id, reply_to_post_number: 1, whisper: true },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: user_key }\n\n        expect(response.status).to eq(403)\n      end\n\n      it 'does not advance draft' do\n        Draft.set(user, Draft::NEW_TOPIC, 0, \"test\")\n        user_key = ApiKey.create!(user: user).key\n\n        post \"/posts.json\",\n          params: { title: 'this is a test topic', raw: 'this is test whisper' },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: user_key }\n\n        expect(response.status).to eq(200)\n        expect(Draft.get(user, Draft::NEW_TOPIC, 0)).to eq(\"test\")\n      end\n\n      it 'will raise an error if specified category cannot be found' do\n        user = Fabricate(:admin)\n        master_key = Fabricate(:api_key).key\n\n        post \"/posts.json\",\n          params: { title: 'this is a test title', raw: 'this is test body', category: 'invalid' },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(400)\n\n        expect(response.parsed_body[\"errors\"]).to include(\n          I18n.t(\"invalid_params\", message: \"category\")\n        )\n      end\n\n      it 'will raise an error if specified embed_url is invalid' do\n        user = Fabricate(:admin)\n        master_key = Fabricate(:api_key).key\n\n        post \"/posts.json\",\n          params: { title: 'this is a test title', raw: 'this is test body', embed_url: '/test.txt' },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(422)\n      end\n    end\n\n    describe \"when logged in\" do\n      fab!(:user) { Fabricate(:user) }\n\n      before do\n        sign_in(user)\n      end\n\n      context \"when fast typing\" do\n        before do\n          SiteSetting.min_first_post_typing_time = 3000\n          SiteSetting.auto_silence_fast_typers_max_trust_level = 1\n        end\n\n        it 'queues the post if min_first_post_typing_time is not met' do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic',\n            composer_open_duration_msecs: 204,\n            typing_duration_msecs: 100,\n            reply_to_post_number: 123\n          }\n\n          expect(response.status).to eq(200)\n          parsed = response.parsed_body\n\n          expect(parsed[\"action\"]).to eq(\"enqueued\")\n\n          user.reload\n          expect(user).to be_silenced\n\n          rp = ReviewableQueuedPost.find_by(created_by: user)\n          expect(rp.payload['typing_duration_msecs']).to eq(100)\n          expect(rp.payload['composer_open_duration_msecs']).to eq(204)\n          expect(rp.payload['reply_to_post_number']).to eq(123)\n          expect(rp.reviewable_scores.first.reason).to eq('fast_typer')\n\n          expect(parsed['pending_post']).to be_present\n          expect(parsed['pending_post']['id']).to eq(rp.id)\n          expect(parsed['pending_post']['raw']).to eq(\"this is the test content\")\n\n          mod = moderator\n          rp.perform(mod, :approve_post)\n\n          user.reload\n          expect(user).not_to be_silenced\n        end\n\n        it \"doesn't enqueue posts when user first creates a topic\" do\n          topic = Fabricate(:post, user: user).topic\n\n          Draft.set(user, \"should_clear\", 0, \"{'a' : 'b'}\")\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic',\n            composer_open_duration_msecs: 204,\n            typing_duration_msecs: 100,\n            topic_id: topic.id,\n            draft_key: \"should_clear\"\n          }\n\n          expect(response.status).to eq(200)\n          parsed = response.parsed_body\n\n          expect(parsed[\"action\"]).not_to be_present\n\n          expect {\n            Draft.get(user, \"should_clear\", 0)\n          }.to raise_error(Draft::OutOfSequence)\n        end\n\n        it \"doesn't enqueue replies when the topic is closed\" do\n          topic = Fabricate(:closed_topic)\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic',\n            topic_id: topic.id\n          }\n\n          expect(response).not_to be_successful\n          parsed = response.parsed_body\n          expect(parsed[\"action\"]).not_to eq(\"enqueued\")\n        end\n\n        it \"doesn't enqueue replies when the post is too long\" do\n          SiteSetting.max_post_length = 10\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic'\n          }\n\n          expect(response).not_to be_successful\n          parsed = response.parsed_body\n          expect(parsed[\"action\"]).not_to eq(\"enqueued\")\n        end\n      end\n\n      it 'silences correctly based on auto_silence_first_post_regex' do\n        SiteSetting.auto_silence_first_post_regex = \"I love candy|i eat s[1-5]\"\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'when I eat s3 sometimes when not looking'\n        }\n\n        expect(response.status).to eq(200)\n        parsed = response.parsed_body\n\n        expect(parsed[\"action\"]).to eq(\"enqueued\")\n        reviewable = ReviewableQueuedPost.find_by(created_by: user)\n        score = reviewable.reviewable_scores.first\n        expect(score.reason).to eq('auto_silence_regex')\n\n        user.reload\n        expect(user).to be_silenced\n      end\n\n      it 'silences correctly based on silence watched words' do\n        SiteSetting.watched_words_regular_expressions = true\n        WatchedWord.create!(action: WatchedWord.actions[:silence], word: 'I love candy')\n        WatchedWord.create!(action: WatchedWord.actions[:silence], word: 'i eat s[1-5]')\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'when I eat s3 sometimes when not looking'\n        }\n\n        expect(response.status).to eq(200)\n        parsed = response.parsed_body\n\n        expect(parsed[\"action\"]).to eq(\"enqueued\")\n        reviewable = ReviewableQueuedPost.find_by(created_by: user)\n        score = reviewable.reviewable_scores.first\n        expect(score.reason).to eq('auto_silence_regex')\n\n        user.reload\n        expect(user).to be_silenced\n      end\n\n      it \"can send a message to a group\" do\n        Group.refresh_automatic_groups!\n        group = Group.create(name: 'test_group', messageable_level: Group::ALIAS_LEVELS[:nobody])\n        user1 = user\n        group.add(user1)\n\n        post \"/posts.json\", params: {\n          raw: 'I can haz a test',\n          title: 'I loves my test',\n          target_recipients: group.name,\n          archetype: Archetype.private_message\n        }\n\n        expect(response).not_to be_successful\n\n        # allow pm to this group\n        group.update_columns(messageable_level: Group::ALIAS_LEVELS[:everyone])\n\n        post \"/posts.json\", params: {\n          raw: 'I can haz a test',\n          title: 'I loves my test',\n          target_recipients: \"test_Group\",\n          archetype: Archetype.private_message\n        }\n\n        expect(response.status).to eq(200)\n\n        parsed = response.parsed_body\n        post = Post.find(parsed['id'])\n\n        expect(post.topic.topic_allowed_users.length).to eq(1)\n        expect(post.topic.topic_allowed_groups.length).to eq(1)\n      end\n\n      it \"can send a message to a group with caps\" do\n        Group.refresh_automatic_groups!\n        group = Group.create(name: 'Test_group', messageable_level: Group::ALIAS_LEVELS[:nobody])\n        user1 = user\n        group.add(user1)\n\n        # allow pm to this group\n        group.update_columns(messageable_level: Group::ALIAS_LEVELS[:everyone])\n\n        post \"/posts.json\", params: {\n          raw: 'I can haz a test',\n          title: 'I loves my test',\n          target_recipients: \"test_Group\",\n          archetype: Archetype.private_message\n        }\n\n        expect(response.status).to eq(200)\n\n        parsed = response.parsed_body\n        post = Post.find(parsed['id'])\n\n        expect(post.topic.topic_allowed_users.length).to eq(1)\n        expect(post.topic.topic_allowed_groups.length).to eq(1)\n      end\n\n      it \"returns the nested post with a param\" do\n        post \"/posts.json\", params: {\n          raw: 'this is the test content  ',\n          title: 'this is the test title for the topic',\n          nested_post: true\n        }\n\n        expect(response.status).to eq(200)\n        parsed = response.parsed_body\n        expect(parsed['post']).to be_present\n        expect(parsed['post']['raw']).to eq('this is the test content')\n        expect(parsed['post']['cooked']).to be_present\n      end\n\n      it 'protects against dupes' do\n        raw = \"this is a test post 123 #{SecureRandom.hash}\"\n        title = \"this is a title #{SecureRandom.hash}\"\n\n        expect do\n          post \"/posts.json\", params: { raw: raw, title: title, wpid: 1 }\n        end.to change { Post.count }\n\n        expect(response.status).to eq(200)\n\n        expect do\n          post \"/posts.json\", params: { raw: raw, title: title, wpid: 2 }\n        end.to_not change { Post.count }\n\n        expect(response.status).to eq(422)\n      end\n\n      it 'cannot create a post in a disallowed category' do\n        category.set_permissions(staff: :full)\n        category.save!\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          category: category.id,\n          meta_data: { xyz: 'abc' }\n        }\n\n        expect(response.status).to eq(403)\n      end\n\n      it 'cannot create a post with a tag that is restricted' do\n        SiteSetting.tagging_enabled = true\n        tag = Fabricate(:tag)\n        category.allowed_tags = [tag.name]\n        category.save!\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          tags: [tag.name],\n        }\n\n        expect(response.status).to eq(422)\n        json = response.parsed_body\n        expect(json['errors']).to be_present\n      end\n\n      it 'cannot create a post with a tag when tagging is disabled' do\n        SiteSetting.tagging_enabled = false\n        tag = Fabricate(:tag)\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          tags: [tag.name],\n        }\n\n        expect(response.status).to eq(422)\n        json = response.parsed_body\n        expect(json['errors']).to be_present\n      end\n\n      it 'cannot create a post with a tag without tagging permission' do\n        SiteSetting.tagging_enabled = true\n        SiteSetting.min_trust_level_to_tag_topics = 4\n        tag = Fabricate(:tag)\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          tags: [tag.name],\n        }\n\n        expect(response.status).to eq(422)\n        json = response.parsed_body\n        expect(json['errors']).to be_present\n      end\n\n      it 'can create a post with a tag when tagging is enabled' do\n        SiteSetting.tagging_enabled = true\n        tag = Fabricate(:tag)\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          tags: [tag.name],\n        }\n\n        expect(response.status).to eq(200)\n        expect(Post.last.topic.tags.count).to eq(1)\n      end\n\n      it 'creates the post' do\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          category: category.id,\n          meta_data: { xyz: 'abc' }\n        }\n\n        expect(response.status).to eq(200)\n\n        new_post = Post.last\n        topic = new_post.topic\n\n        expect(new_post.user).to eq(user)\n        expect(new_post.raw).to eq('this is the test content')\n        expect(topic.title).to eq('This is the test title for the topic')\n        expect(topic.category).to eq(category)\n        expect(topic.meta_data).to eq(\"xyz\" => 'abc')\n      end\n\n      it 'can create an uncategorized topic' do\n        title = 'this is the test title for the topic'\n\n        expect do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: title,\n            category: \"\"\n          }\n\n          expect(response.status).to eq(200)\n        end.to change { Topic.count }.by(1)\n\n        topic = Topic.last\n\n        expect(topic.title).to eq(title.capitalize)\n        expect(topic.category_id).to eq(SiteSetting.uncategorized_category_id)\n      end\n\n      it 'can create a reply to a post' do\n        topic = Fabricate(:private_message_post, user: user).topic\n        post_2 = Fabricate(:private_message_post, user: user, topic: topic)\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          topic_id: topic.id,\n          reply_to_post_number: post_2.post_number,\n          image_sizes: { width: '100', height: '200' }\n        }\n\n        expect(response.status).to eq(200)\n\n        new_post = Post.last\n        topic = new_post.topic\n\n        expect(new_post.user).to eq(user)\n        expect(new_post.raw).to eq('this is the test content')\n        expect(new_post.reply_to_post_number).to eq(post_2.post_number)\n\n        job_args = Jobs::ProcessPost.jobs.first[\"args\"].first\n\n        expect(job_args[\"image_sizes\"]).to eq(\"width\" => '100', \"height\" => '200')\n      end\n\n      it 'creates a private post' do\n        user_2 = Fabricate(:user)\n        user_3 = Fabricate(:user, username: \"foo_bar\")\n\n        # In certain edge cases, it's possible to end up with a username\n        # containing characters that would normally fail to validate\n        user_4 = Fabricate(:user, username: \"Iyi_Iyi\")\n        user_4.update_attribute(:username, \"\u0130yi_\u0130yi\")\n        user_4.update_attribute(:username_lower, \"\u0130yi_\u0130yi\".downcase)\n        Group.refresh_automatic_groups!\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          archetype: 'private_message',\n          title: \"this is some post\",\n          target_recipients: \"#{user_2.username},Foo_Bar,\u0130yi_\u0130yi\"\n        }\n\n        expect(response.status).to eq(200)\n\n        new_post = Post.last\n        new_topic = Topic.last\n\n        expect(new_post.user).to eq(user)\n        expect(new_topic.private_message?).to eq(true)\n        expect(new_topic.allowed_users).to contain_exactly(user, user_2, user_3, user_4)\n      end\n\n      context \"when target_recipients not provided\" do\n        it \"errors when creating a private post\" do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: \"\"\n          }\n\n          expect(response.status).to eq(422)\n          expect(response.parsed_body[\"errors\"]).to include(\n            I18n.t(\"activerecord.errors.models.topic.attributes.base.no_user_selected\")\n          )\n        end\n      end\n\n      context \"when topic_id is set\" do\n        fab!(:topic) { Fabricate(:topic) }\n\n        it \"errors when creating a private post\" do\n          user_2 = Fabricate(:user)\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: user_2.username,\n            topic_id: topic.id\n          }\n\n          expect(response.status).to eq(422)\n          expect(response.parsed_body[\"errors\"]).to include(\n            I18n.t(\"create_pm_on_existing_topic\")\n          )\n        end\n      end\n\n      context \"with errors\" do\n        it \"does not succeed\" do\n          post \"/posts.json\", params: { raw: 'test' }\n          expect(response).not_to be_successful\n          expect(response.status).to eq(422)\n        end\n\n        it \"it triggers flag_linked_posts_as_spam when the post creator returns spam\" do\n          SiteSetting.newuser_spam_host_threshold = 1\n          sign_in(Fabricate(:user, trust_level: 0))\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content http://fakespamwebsite.com http://fakespamwebsite.com/spam http://fakespamwebsite.com/spammy',\n            title: 'this is the test title for the topic',\n            meta_data: { xyz: 'abc' }\n          }\n\n          expect(response.parsed_body[\"errors\"]).to include(I18n.t(:spamming_host))\n        end\n\n        context \"when allow_uncategorized_topics is false\" do\n          before do\n            SiteSetting.allow_uncategorized_topics = false\n          end\n\n          it \"cant create an uncategorized post\" do\n            post \"/posts.json\", params: {\n              raw: \"a new post with no category\",\n              title: \"a new post with no category\"\n            }\n            expect(response).not_to be_successful\n          end\n\n          context \"as staff\" do\n            before do\n              sign_in(admin)\n            end\n\n            it \"cant create an uncategorized post\" do\n              post \"/posts.json\", params: {\n                raw: \"a new post with no category\",\n                title: \"a new post with no category\"\n              }\n              expect(response).not_to be_successful\n            end\n          end\n        end\n      end\n    end\n\n    describe 'shared draft' do\n      fab!(:destination_category) { Fabricate(:category) }\n\n      it \"will raise an error for regular users\" do\n        post \"/posts.json\", params: {\n          raw: 'this is the shared draft content',\n          title: \"this is the shared draft title\",\n          category: destination_category.id,\n          shared_draft: 'true'\n        }\n        expect(response).not_to be_successful\n      end\n\n      describe \"as a staff user\" do\n        before do\n          sign_in(moderator)\n        end\n\n        it \"will raise an error if there is no shared draft category\" do\n          post \"/posts.json\", params: {\n            raw: 'this is the shared draft content',\n            title: \"this is the shared draft title\",\n            category: destination_category.id,\n            shared_draft: 'true'\n          }\n          expect(response).not_to be_successful\n        end\n\n        context \"with a shared category\" do\n          fab!(:shared_category) { Fabricate(:category) }\n          before do\n            SiteSetting.shared_drafts_category = shared_category.id\n          end\n\n          it \"will work if the shared draft category is present\" do\n            post \"/posts.json\", params: {\n              raw: 'this is the shared draft content',\n              title: \"this is the shared draft title\",\n              category: destination_category.id,\n              shared_draft: 'true'\n            }\n            expect(response.status).to eq(200)\n            result = response.parsed_body\n            topic = Topic.find(result['topic_id'])\n            expect(topic.category_id).to eq(shared_category.id)\n            expect(topic.shared_draft.category_id).to eq(destination_category.id)\n          end\n        end\n      end\n    end\n\n    describe 'warnings' do\n      fab!(:user_2) { Fabricate(:user) }\n\n      before do\n        Group.refresh_automatic_groups!\n      end\n\n      context 'as a staff user' do\n        before do\n          sign_in(admin)\n        end\n\n        it 'should be able to mark a topic as warning' do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: user_2.username,\n            is_warning: true\n          }\n\n          expect(response.status).to eq(200)\n\n          new_topic = Topic.last\n\n          expect(new_topic.title).to eq('This is some post')\n          expect(new_topic.is_official_warning?).to eq(true)\n        end\n\n        it 'should be able to mark a topic as not a warning' do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: user_2.username,\n            is_warning: false\n          }\n\n          expect(response.status).to eq(200)\n\n          new_topic = Topic.last\n\n          expect(new_topic.title).to eq('This is some post')\n          expect(new_topic.is_official_warning?).to eq(false)\n        end\n      end\n\n      context 'as a normal user' do\n        it 'should not be able to mark a topic as warning' do\n          sign_in(user)\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: user_2.username,\n            is_warning: true\n          }\n\n          expect(response.status).to eq(200)\n\n          new_topic = Topic.last\n\n          expect(new_topic.title).to eq('This is some post')\n          expect(new_topic.is_official_warning?).to eq(false)\n        end\n      end\n    end\n\n    context \"with topic bump\" do\n      shared_examples \"it works\" do\n        it \"should be able to skip topic bumping\" do\n          original_bumped_at = 1.day.ago\n          topic = Fabricate(:topic, bumped_at: original_bumped_at)\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            topic_id: topic.id,\n            no_bump: true\n          }\n\n          expect(response.status).to eq(200)\n          expect(topic.reload.bumped_at).to eq_time(original_bumped_at)\n        end\n\n        it \"should be able to post with topic bumping\" do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            topic_id: topic.id\n          }\n\n          expect(response.status).to eq(200)\n          expect(topic.reload.bumped_at).to eq_time(topic.posts.last.created_at)\n        end\n      end\n\n      context \"with admins\" do\n        before do\n          sign_in(admin)\n        end\n\n        include_examples \"it works\"\n      end\n\n      context \"with moderators\" do\n        before do\n          sign_in(moderator)\n        end\n\n        include_examples \"it works\"\n      end\n\n      context \"with TL4 users\" do\n        fab!(:trust_level_4) { Fabricate(:trust_level_4) }\n\n        before do\n          sign_in(trust_level_4)\n        end\n\n        include_examples \"it works\"\n      end\n\n      context \"with users\" do\n        fab!(:topic) { Fabricate(:topic) }\n\n        [:user].each do |user|\n          it \"will raise an error for #{user}\" do\n            sign_in(Fabricate(user))\n            post \"/posts.json\", params: {\n              raw: 'this is the test content',\n              topic_id: topic.id,\n              no_bump: true\n            }\n            expect(response.status).to eq(400)\n          end\n        end\n      end\n    end\n\n    context \"with featured links\" do\n      it \"allows to create topics with featured links\" do\n        sign_in(user_trust_level_1)\n\n        post \"/posts.json\", params: {\n          title: \"this is the test title for the topic\",\n          raw: \"this is the test content\",\n          featured_link: \"https://discourse.org\"\n        }\n\n        expect(response.status).to eq(200)\n      end\n\n      it \"doesn't allow TL0 users to create topics with featured links\" do\n        sign_in(user_trust_level_0)\n\n        post \"/posts.json\", params: {\n          title: \"this is the test title for the topic\",\n          raw: \"this is the test content\",\n          featured_link: \"https://discourse.org\"\n        }\n\n        expect(response.status).to eq(422)\n      end\n\n      it \"doesn't allow to create topics with featured links if featured links are disabled in settings\" do\n        SiteSetting.topic_featured_link_enabled = false\n        sign_in(user_trust_level_1)\n\n        post \"/posts.json\", params: {\n          title: \"this is the test title for the topic\",\n          raw: \"this is the test content\",\n          featured_link: \"https://discourse.org\"\n        }\n\n        expect(response.status).to eq(422)\n      end\n\n      it \"doesn't allow to create topics with featured links in the category with forbidden feature links\" do\n        category = Fabricate(:category, topic_featured_link_allowed: false)\n        sign_in(user_trust_level_1)\n\n        post \"/posts.json\", params: {\n          title: \"this is the test title for the topic\",\n          raw: \"this is the test content\",\n          featured_link: \"https://discourse.org\",\n          category: category.id\n        }\n\n        expect(response.status).to eq(422)\n      end\n    end\n  end\n\n  describe '#revisions' do\n    fab!(:post) { Fabricate(:post, version: 2) }\n    let(:post_revision) { Fabricate(:post_revision, post: post) }\n\n    it \"throws an exception when revision is < 2\" do\n      get \"/posts/#{post.id}/revisions/1.json\"\n      expect(response.status).to eq(400)\n    end\n\n    context \"when edit history is not visible to the public\" do\n\n      before { SiteSetting.edit_history_visible_to_public = false }\n\n      it \"ensures anonymous cannot see the revisions\" do\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"ensures regular user cannot see the revisions\" do\n        sign_in(user)\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"ensures staff can see the revisions\" do\n        sign_in(admin)\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"ensures poster can see the revisions\" do\n        user = Fabricate(:active_user)\n        sign_in(user)\n\n        post = Fabricate(:post, user: user, version: 3)\n        pr = Fabricate(:post_revision, user: user, post: post)\n\n        get \"/posts/#{pr.post_id}/revisions/#{pr.number}.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"ensures trust level 4 cannot see the revisions\" do\n        sign_in(Fabricate(:user, trust_level: 4))\n        get \"/posts/#{post_revision.post_id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(403)\n      end\n    end\n\n    context \"when post is hidden\" do\n      before {\n        post.hidden = true\n        post.save\n      }\n\n      it \"throws an exception for users\" do\n        sign_in(user)\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(404)\n      end\n\n      it \"works for admins\" do\n        sign_in(admin)\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n\n    context \"when edit history is visible to everyone\" do\n\n      before { SiteSetting.edit_history_visible_to_public = true }\n\n      it \"ensures anyone can see the revisions\" do\n        get \"/posts/#{post_revision.post_id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n\n    context \"with deleted post\" do\n      fab!(:deleted_post) { Fabricate(:post, user: admin, version: 3) }\n      fab!(:deleted_post_revision) { Fabricate(:post_revision, user: admin, post: deleted_post) }\n\n      before { deleted_post.trash!(admin) }\n\n      it \"also work on deleted post\" do\n        sign_in(admin)\n        get \"/posts/#{deleted_post_revision.post_id}/revisions/#{deleted_post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n\n    context \"with deleted topic\" do\n      fab!(:deleted_topic) { Fabricate(:topic, user: admin) }\n      fab!(:post) { Fabricate(:post, user: admin, topic: deleted_topic, version: 3) }\n      fab!(:post_revision) { Fabricate(:post_revision, user: admin, post: post) }\n\n      before { deleted_topic.trash!(admin) }\n\n      it \"also work on deleted topic\" do\n        sign_in(admin)\n        get \"/posts/#{post_revision.post_id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n\n    context \"with a tagged topic\" do\n      let(:tag) { Fabricate(:tag) }\n      it \"works\" do\n        SiteSetting.tagging_enabled = true\n\n        post_revision.post.topic.update(tags: [tag])\n\n        get \"/posts/#{post_revision.post_id}/revisions/latest.json\"\n        expect(response.status).to eq(200)\n\n        SiteSetting.tagging_enabled = false\n\n        get \"/posts/#{post_revision.post_id}/revisions/latest.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n  end\n\n  describe '#revert' do\n    include_examples 'action requires login', :put, \"/posts/123/revisions/2/revert.json\"\n\n    fab!(:post) { Fabricate(:post, user: Fabricate(:user), raw: \"Lorem ipsum dolor sit amet, cu nam libris tractatos, ancillae senserit ius ex\") }\n    let(:post_revision) { Fabricate(:post_revision, post: post, modifications: { \"raw\" => [\"this is original post body.\", \"this is edited post body.\"] }) }\n    let(:blank_post_revision) { Fabricate(:post_revision, post: post, modifications: { \"edit_reason\" => [\"edit reason #1\", \"edit reason #2\"] }) }\n    let(:same_post_revision) { Fabricate(:post_revision, post: post, modifications: { \"raw\" => [\"Lorem ipsum dolor sit amet, cu nam libris tractatos, ancillae senserit ius ex\", \"this is edited post body.\"] }) }\n\n    let(:post_id) { post.id }\n    let(:revision_id) { post_revision.number }\n\n    describe 'when logged in as a regular user' do\n      it \"does not work\" do\n        sign_in(user)\n        put \"/posts/#{post_id}/revisions/#{revision_id}/revert.json\"\n        expect(response).to_not be_successful\n      end\n    end\n\n    describe \"when logged in as staff\" do\n      before do\n        sign_in(moderator)\n      end\n\n      it \"fails when revision is < 2\" do\n        put \"/posts/#{post_id}/revisions/1/revert.json\"\n        expect(response.status).to eq(400)\n      end\n\n      it \"fails when post_revision record is not found\" do\n        put \"/posts/#{post_id}/revisions/#{revision_id + 1}/revert.json\"\n        expect(response).to_not be_successful\n      end\n\n      it \"fails when post record is not found\" do\n        put \"/posts/#{post_id + 1}/revisions/#{revision_id}/revert.json\"\n        expect(response).to_not be_successful\n      end\n\n      it \"fails when revision is blank\" do\n        put \"/posts/#{post_id}/revisions/#{blank_post_revision.number}/revert.json\"\n        expect(response.status).to eq(422)\n        expect(response.parsed_body['errors']).to include(I18n.t('revert_version_same'))\n      end\n\n      it \"fails when revised version is same as current version\" do\n        put \"/posts/#{post_id}/revisions/#{same_post_revision.number}/revert.json\"\n        expect(response.status).to eq(422)\n        expect(response.parsed_body['errors']).to include(I18n.t('revert_version_same'))\n      end\n\n      it \"works!\" do\n        put \"/posts/#{post_id}/revisions/#{revision_id}/revert.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"supports reverting posts in deleted topics\" do\n        first_post = post.topic.ordered_posts.first\n        PostDestroyer.new(moderator, first_post).destroy\n\n        put \"/posts/#{post_id}/revisions/#{revision_id}/revert.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n  end\n\n  describe '#expand_embed' do\n    before do\n      sign_in(user)\n    end\n\n    fab!(:post) { Fabricate(:post) }\n\n    it \"raises an error when you can't see the post\" do\n      post = Fabricate(:private_message_post)\n      get \"/posts/#{post.id}/expand-embed.json\"\n      expect(response).not_to be_successful\n    end\n\n    it \"retrieves the body when you can see the post\" do\n      TopicEmbed.expects(:expanded_for).with(post).returns(\"full content\")\n      get \"/posts/#{post.id}/expand-embed.json\"\n      expect(response.status).to eq(200)\n      expect(response.parsed_body['cooked']).to eq(\"full content\")\n    end\n  end\n\n  describe '#flagged_posts' do\n    include_examples \"action requires login\", :get, \"/posts/system/flagged.json\"\n\n    describe \"when logged in\" do\n      it \"raises an error if the user doesn't have permission to see the flagged posts\" do\n        sign_in(user)\n        get \"/posts/system/flagged.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"can see the flagged posts when authorized\" do\n        sign_in(moderator)\n        get \"/posts/system/flagged.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"only shows agreed and deferred flags\" do\n        post_agreed = create_post(user: user)\n        post_deferred = create_post(user: user)\n        post_disagreed = create_post(user: user)\n\n        r0 = PostActionCreator.spam(moderator, post_agreed).reviewable\n        r1 = PostActionCreator.off_topic(moderator, post_deferred).reviewable\n        r2 = PostActionCreator.inappropriate(moderator, post_disagreed).reviewable\n\n        r0.perform(admin, :agree_and_keep)\n        r1.perform(admin, :ignore)\n        r2.perform(admin, :disagree)\n\n        sign_in(Fabricate(:moderator))\n        get \"/posts/#{user.username}/flagged.json\"\n        expect(response.status).to eq(200)\n\n        expect(response.parsed_body.length).to eq(2)\n      end\n    end\n  end\n\n  describe '#deleted_posts' do\n    include_examples \"action requires login\", :get, \"/posts/system/deleted.json\"\n\n    describe \"when logged in\" do\n      before do\n        Group.refresh_automatic_groups!\n      end\n\n      it \"raises an error if the user doesn't have permission to see the deleted posts\" do\n        sign_in(user)\n        get \"/posts/system/deleted.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"can see the deleted posts when authorized\" do\n        sign_in(moderator)\n        get \"/posts/system/deleted.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"does not raise if topic has been permanently deleted\" do\n        post = Fabricate(:post, user: admin)\n        PostDestroyer.new(admin, post).destroy\n        post.update!(topic_id: -1000)\n\n        sign_in(admin)\n        get \"/posts/#{admin.username}/deleted.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"doesn't return secured categories for moderators if they don't have access\" do\n        Fabricate(:moderator)\n\n        group = Fabricate(:group)\n        group.add_owner(user)\n\n        secured_category = Fabricate(:private_category, group: group)\n        secured_post = create_post(user: user, category: secured_category)\n        PostDestroyer.new(admin, secured_post).destroy\n\n        sign_in(moderator)\n        get \"/posts/#{user.username}/deleted.json\"\n        expect(response.status).to eq(200)\n\n        data = response.parsed_body\n        expect(data.length).to eq(0)\n      end\n\n      it \"doesn't return PMs for moderators\" do\n        Fabricate(:moderator)\n\n        pm_post = create_post(user: user, archetype: 'private_message', target_usernames: [admin.username])\n        PostDestroyer.new(admin, pm_post).destroy\n\n        sign_in(moderator)\n        get \"/posts/#{user.username}/deleted.json\"\n        expect(response.status).to eq(200)\n\n        data = response.parsed_body\n        expect(data.length).to eq(0)\n      end\n\n      it \"only shows posts deleted by other users\" do\n        create_post(user: user)\n        post_deleted_by_user = create_post(user: user)\n        post_deleted_by_admin = create_post(user: user)\n\n        PostDestroyer.new(user, post_deleted_by_user).destroy\n        PostDestroyer.new(admin, post_deleted_by_admin).destroy\n\n        sign_in(admin)\n        get \"/posts/#{user.username}/deleted.json\"\n        expect(response.status).to eq(200)\n\n        data = response.parsed_body\n        expect(data.length).to eq(1)\n        expect(data[0][\"id\"]).to eq(post_deleted_by_admin.id)\n        expect(data[0][\"deleted_by\"][\"id\"]).to eq(admin.id)\n      end\n    end\n  end\n\n  describe '#markdown_id' do\n    it \"can be viewed by anonymous\" do\n      post = Fabricate(:post, raw: \"123456789\")\n      get \"/posts/#{post.id}/raw.json\"\n      expect(response.status).to eq(200)\n      expect(response.body).to eq(\"123456789\")\n    end\n\n    it \"renders a 404 page\" do\n      get \"/posts/0/raw\"\n      expect(response.status).to eq(404)\n      expect(response.body).to include(I18n.t(\"page_not_found.title\"))\n    end\n  end\n\n  describe '#markdown_num' do\n    it \"can be viewed by anonymous\" do\n      topic = Fabricate(:topic)\n      post = Fabricate(:post, topic: topic, post_number: 1, raw: \"123456789\")\n      post.save\n      get \"/raw/#{topic.id}/1.json\"\n      expect(response.status).to eq(200)\n      expect(response.body).to eq(\"123456789\")\n    end\n\n    it \"can show whole topics\" do\n      topic = Fabricate(:topic)\n      post = Fabricate(:post, topic: topic, post_number: 1, raw: \"123456789\")\n      post_2 = Fabricate(:post, topic: topic, post_number: 2, raw: \"abcdefghij\")\n      post.save\n      get \"/raw/#{topic.id}\"\n      expect(response.status).to eq(200)\n      expect(response.body).to include(\"123456789\", \"abcdefghij\")\n    end\n  end\n\n  describe '#short_link' do\n    fab!(:topic) { Fabricate(:topic) }\n    fab!(:post) { Fabricate(:post, topic: topic) }\n\n    it \"redirects to the topic\" do\n      get \"/p/#{post.id}.json\"\n      expect(response).to be_redirect\n    end\n\n    it \"returns a 403 when access is denied for JSON format\" do\n      post = Fabricate(:private_message_post)\n      get \"/p/#{post.id}.json\"\n      expect(response).to be_forbidden\n    end\n\n    it \"returns a 403 when access is denied for HTML format\" do\n      post = Fabricate(:private_message_post)\n      get \"/p/#{post.id}\"\n      expect(response).to be_forbidden\n      expect(response.body).to have_tag(\"body.no-ember\")\n    end\n\n    it \"renders a 404 page\" do\n      get \"/p/0\"\n      expect(response.status).to eq(404)\n      expect(response.body).to include(I18n.t(\"page_not_found.title\"))\n    end\n  end\n\n  describe '#user_posts_feed' do\n    it 'returns public posts rss feed' do\n      public_post\n      private_post\n\n      get \"/u/#{user.username}/activity.rss\"\n\n      expect(response.status).to eq(200)\n\n      body = response.body\n\n      expect(body).to_not include(private_post.url)\n      expect(body).to include(public_post.url)\n    end\n\n    it \"doesn't include posts from hidden topics\" do\n      public_post.topic.update!(visible: false)\n\n      get \"/u/#{user.username}/activity.rss\"\n\n      expect(response.status).to eq(200)\n\n      body = response.body\n      expect(body).not_to include(public_post.url)\n    end\n\n    it \"excludes small actions\" do\n      small_action = Fabricate(:small_action, user: user)\n\n      get \"/u/#{user.username}/activity.rss\"\n\n      expect(response.status).to eq(200)\n\n      body = response.body\n\n      expect(body).not_to include(small_action.canonical_url)\n    end\n\n    it 'returns public posts as JSON' do\n      public_post\n      private_post\n\n      get \"/u/#{user.username}/activity.json\"\n\n      expect(response.status).to eq(200)\n\n      body = response.body\n\n      expect(body).to_not include(private_post.topic.slug)\n      expect(body).to include(public_post.topic.slug)\n    end\n\n    it \"returns 404 if `hide_profile_and_presence` user option is checked\" do\n      user.user_option.update_columns(hide_profile_and_presence: true)\n\n      get \"/u/#{user.username}/activity.rss\"\n      expect(response.status).to eq(404)\n\n      get \"/u/#{user.username}/activity.json\"\n      expect(response.status).to eq(404)\n    end\n\n    it \"succeeds when `allow_users_to_hide_profile` is false\" do\n      user.user_option.update_columns(hide_profile_and_presence: true)\n      SiteSetting.allow_users_to_hide_profile = false\n\n      get \"/u/#{user.username}/activity.rss\"\n      expect(response.status).to eq(200)\n\n      get \"/u/#{user.username}/activity.json\"\n      expect(response.status).to eq(200)\n    end\n  end\n\n  describe '#latest' do\n    context 'with private posts' do\n      describe 'when not logged in' do\n        it 'should return the right response' do\n          Fabricate(:post)\n\n          get \"/private-posts.rss\"\n\n          expect(response.status).to eq(404)\n\n          expect(response.body).to have_tag(\n            \"input\", with: { value: \"private_posts\" }\n          )\n        end\n      end\n\n      it 'returns private posts rss feed' do\n        sign_in(admin)\n\n        public_post\n        private_post\n        get \"/private-posts.rss\"\n\n        expect(response.status).to eq(200)\n\n        body = response.body\n\n        expect(body).to include(private_post.url)\n        expect(body).to_not include(public_post.url)\n      end\n\n      it 'returns private posts for json' do\n        sign_in(admin)\n\n        public_post\n        private_post\n        get \"/private-posts.json\"\n        expect(response.status).to eq(200)\n\n        json = response.parsed_body\n        post_ids = json['private_posts'].map { |p| p['id'] }\n\n        expect(post_ids).to include private_post.id\n        expect(post_ids).to_not include public_post.id\n      end\n    end\n\n    context 'with public posts' do\n      it 'returns public posts with topic rss feed' do\n        public_post\n        private_post\n\n        get \"/posts.rss\"\n\n        expect(response.status).to eq(200)\n\n        body = response.body\n\n        # we cache in redis, in rare cases this can cause a flaky test\n        PostsHelper.clear_canonical_cache!(public_post)\n\n        expect(body).to include(public_post.canonical_url)\n        expect(body).to_not include(private_post.url)\n      end\n\n      it \"doesn't include posts from hidden topics\" do\n        public_post.topic.update!(visible: false)\n\n        get \"/posts.rss\"\n\n        expect(response.status).to eq(200)\n\n        body = response.body\n\n        # we cache in redis, in rare cases this can cause a flaky test\n        PostsHelper.clear_canonical_cache!(public_post)\n\n        expect(body).not_to include(public_post.canonical_url)\n      end\n\n      it \"excludes small actions\" do\n        small_action = Fabricate(:small_action)\n\n        get \"/posts.rss\"\n\n        expect(response.status).to eq(200)\n\n        body = response.body\n\n        expect(body).not_to include(small_action.canonical_url)\n      end\n\n      it 'returns public posts with topic for json' do\n        topicless_post.update topic_id: -100\n\n        public_post\n        private_post\n        topicless_post\n\n        get \"/posts.json\"\n        expect(response.status).to eq(200)\n\n        json = response.parsed_body\n        post_ids = json['latest_posts'].map { |p| p['id'] }\n\n        expect(post_ids).to include public_post.id\n        expect(post_ids).to_not include private_post.id\n        expect(post_ids).to_not include topicless_post.id\n      end\n    end\n  end\n\n  describe '#cooked' do\n    it 'returns the cooked content' do\n      post = Fabricate(:post, cooked: \"WAt\")\n      get \"/posts/#{post.id}/cooked.json\"\n\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n\n      expect(json).to be_present\n      expect(json['cooked']).to eq('WAt')\n    end\n  end\n\n  describe '#raw_email' do\n    include_examples \"action requires login\", :get, \"/posts/2/raw-email.json\"\n\n    describe \"when logged in\" do\n      let(:post) { Fabricate(:post, deleted_at: 2.hours.ago, user: Fabricate(:user), raw_email: 'email_content') }\n\n      it 'returns 403 when trying to view raw as user that created the post' do\n        sign_in(post.user)\n\n        get \"/posts/#{post.id}/raw-email.json\"\n        expect(response.status).to eq(403)\n      end\n\n      it \"returns 403 when trying to view raw email as a normal user\" do\n        sign_in(user)\n\n        get \"/posts/#{post.id}/raw-email.json\"\n        expect(response.status).to eq(403)\n      end\n\n      it \"can view raw email\" do\n        sign_in(moderator)\n\n        get \"/posts/#{post.id}/raw-email.json\"\n        expect(response.status).to eq(200)\n\n        json = response.parsed_body\n        expect(json['raw_email']).to eq('email_content')\n      end\n    end\n  end\n\n  describe \"#locked\" do\n    before do\n      sign_in(moderator)\n    end\n\n    it 'can lock and unlock the post' do\n      put \"/posts/#{public_post.id}/locked.json\", params: { locked: \"true\" }\n      expect(response.status).to eq(200)\n      public_post.reload\n      expect(public_post).to be_locked\n\n      put \"/posts/#{public_post.id}/locked.json\", params: { locked: \"false\" }\n      expect(response.status).to eq(200)\n      public_post.reload\n      expect(public_post).not_to be_locked\n    end\n  end\n\n  describe \"#notice\" do\n    it 'can create and remove notices as a moderator' do\n      sign_in(moderator)\n\n      raw_notice = \"Hello *world*!\\n\\nhttps://github.com/discourse/discourse\"\n      put \"/posts/#{public_post.id}/notice.json\", params: { notice: raw_notice }\n\n      expect(response.status).to eq(200)\n      expect(public_post.reload.custom_fields[Post::NOTICE]).to eq(\"type\" => Post.notices[:custom], \"raw\" => raw_notice, \"cooked\" => PrettyText.cook(raw_notice, features: { onebox: false }))\n      expect(UserHistory.where(action: UserHistory.actions[:post_staff_note_create]).count).to eq(1)\n\n      put \"/posts/#{public_post.id}/notice.json\", params: { notice: nil }\n\n      expect(response.status).to eq(200)\n      expect(public_post.reload.custom_fields[Post::NOTICE]).to eq(nil)\n      expect(UserHistory.where(action: UserHistory.actions[:post_staff_note_destroy]).count).to eq(1)\n    end\n\n    describe 'group moderators' do\n      fab!(:group_user) { Fabricate(:group_user) }\n      let(:user) { group_user.user }\n      let(:group) { group_user.group }\n\n      before do\n        SiteSetting.enable_category_group_moderation = true\n        topic.category.update!(reviewable_by_group_id: group.id)\n\n        sign_in(user)\n      end\n\n      it 'can create and remove notices as a group moderator' do\n        raw_notice = \"Hello *world*!\\n\\nhttps://github.com/discourse/discourse\"\n        put \"/posts/#{public_post.id}/notice.json\", params: { notice: raw_notice }\n\n        expect(response.status).to eq(200)\n        expect(public_post.reload.custom_fields[Post::NOTICE]).to eq(\"type\" => Post.notices[:custom], \"raw\" => raw_notice, \"cooked\" => PrettyText.cook(raw_notice, features: { onebox: false }))\n\n        put \"/posts/#{public_post.id}/notice.json\", params: { notice: nil }\n\n        expect(response.status).to eq(200)\n        expect(public_post.reload.custom_fields[Post::NOTICE]).to eq(nil)\n      end\n\n      it 'prevents a group moderator from altering notes outside of their category' do\n        moderatable_group = Fabricate(:group)\n        topic.category.update!(reviewable_by_group_id: moderatable_group.id)\n\n        put \"/posts/#{public_post.id}/notice.json\", params: { notice: \"Hello\" }\n\n        expect(response.status).to eq(404)\n      end\n\n      it 'prevents a normal user from altering notes' do\n        group_user.destroy!\n        put \"/posts/#{public_post.id}/notice.json\", params: { notice: \"Hello\" }\n\n        expect(response.status).to eq(404)\n      end\n    end\n  end\n\n  describe \"#pending\" do\n    subject(:request) { get \"/posts/#{user.username}/pending.json\" }\n\n    context \"when user is not logged in\" do\n      it_behaves_like \"action requires login\", :get, \"/posts/system/pending.json\"\n    end\n\n    context \"when user is logged in\" do\n      let(:pending_posts) { response.parsed_body[\"pending_posts\"] }\n\n      before { sign_in(current_user) }\n\n      context \"when current user is the same as user\" do\n        let(:current_user) { user }\n\n        context \"when there are existing pending posts\" do\n          let!(:owner_pending_posts) { Fabricate.times(2, :reviewable_queued_post, created_by: user) }\n          let!(:other_pending_post) { Fabricate(:reviewable_queued_post) }\n          let(:expected_keys) do\n            %w[\n          avatar_template\n          category_id\n          created_at\n          created_by_id\n          name\n          raw_text\n          title\n          topic_id\n          topic_url\n          username\n            ]\n          end\n\n          it \"returns user's pending posts\" do\n            request\n            expect(pending_posts).to all include \"id\" => be_in(owner_pending_posts.map(&:id))\n            expect(pending_posts).to all include(*expected_keys)\n          end\n        end\n\n        context \"when there aren't any pending posts\" do\n          it \"returns an empty array\" do\n            request\n            expect(pending_posts).to be_empty\n          end\n        end\n      end\n\n      context \"when current user is a staff member\" do\n        let(:current_user) { moderator }\n\n        context \"when there are existing pending posts\" do\n          let!(:owner_pending_posts) { Fabricate.times(2, :reviewable_queued_post, created_by: user) }\n          let!(:other_pending_post) { Fabricate(:reviewable_queued_post) }\n          let(:expected_keys) do\n            %w[\n          avatar_template\n          category_id\n          created_at\n          created_by_id\n          name\n          raw_text\n          title\n          topic_id\n          topic_url\n          username\n            ]\n          end\n\n          it \"returns user's pending posts\" do\n            request\n            expect(pending_posts).to all include \"id\" => be_in(owner_pending_posts.map(&:id))\n            expect(pending_posts).to all include(*expected_keys)\n          end\n        end\n\n        context \"when there aren't any pending posts\" do\n          it \"returns an empty array\" do\n            request\n            expect(pending_posts).to be_empty\n          end\n        end\n      end\n\n      context \"when current user is another user\" do\n        let(:current_user) { Fabricate(:user) }\n\n        it \"does not allow access\" do\n          request\n          expect(response).to have_http_status :not_found\n        end\n      end\n    end\n  end\n\n  describe Plugin::Instance do\n    describe '#add_permitted_post_create_param' do\n      fab!(:user) { Fabricate(:user) }\n      let(:instance) { Plugin::Instance.new }\n      let(:request) do\n        Proc.new {\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic',\n            composer_open_duration_msecs: 204,\n            typing_duration_msecs: 100,\n            reply_to_post_number: 123,\n            string_arg: '123',\n            hash_arg: { key1: 'val' },\n            array_arg: ['1', '2', '3']\n          }\n        }\n      end\n\n      before do\n        sign_in(user)\n        SiteSetting.min_first_post_typing_time = 0\n      end\n\n      it 'allows strings to be added' do\n        request.call\n        expect(@controller.send(:create_params)).not_to include(string_arg: '123')\n\n        instance.add_permitted_post_create_param(:string_arg)\n        request.call\n        expect(@controller.send(:create_params)).to include(string_arg: '123')\n      end\n\n      it 'allows hashes to be added' do\n        instance.add_permitted_post_create_param(:hash_arg)\n        request.call\n        expect(@controller.send(:create_params)).not_to include(hash_arg: { key1: 'val' })\n\n        instance.add_permitted_post_create_param(:hash_arg, :hash)\n        request.call\n        expect(@controller.send(:create_params)).to include(hash_arg: { key1: 'val' })\n      end\n\n      it 'allows strings to be added' do\n        instance.add_permitted_post_create_param(:array_arg)\n        request.call\n        expect(@controller.send(:create_params)).not_to include(array_arg: ['1', '2', '3'])\n\n        instance.add_permitted_post_create_param(:array_arg, :array)\n        request.call\n        expect(@controller.send(:create_params)).to include(array_arg: ['1', '2', '3'])\n      end\n\n    end\n  end\nend\n"], "fixing_code": ["en:\n  dates:\n    # Use Moment.js format string: https://momentjs.com/docs/#/displaying/format/\n    short_date_no_year: \"D MMM\"\n    # Use Moment.js format string: https://momentjs.com/docs/#/displaying/format/\n    short_date: \"D MMM, YYYY\"\n    # Use Moment.js format string: https://momentjs.com/docs/#/displaying/format/\n    long_date: \"MMMM D, YYYY h:mma\"\n\n  datetime_formats: &datetime_formats\n    formats:\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      short: \"%m-%d-%Y\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      short_no_year: \"%B %-d\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      date_only: \"%B %-d, %Y\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      long: \"%B %-d, %Y, %l:%M%P\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      no_day: \"%B %Y\"\n      # Format directives: https://ruby-doc.org/core/Time.html#method-i-strftime\n      calendar_ics: \"%Y%m%dT%H%M%SZ\"\n  date:\n    # Do not remove the brackets and commas and do not translate the first month name. It should be \"null\".\n    month_names:\n      [\n        ~,\n        January,\n        February,\n        March,\n        April,\n        May,\n        June,\n        July,\n        August,\n        September,\n        October,\n        November,\n        December,\n      ]\n    <<: *datetime_formats\n  time:\n    <<: *datetime_formats\n    am: \"am\"\n    pm: \"pm\"\n\n  title: \"Discourse\"\n  topics: \"Topics\"\n  posts: \"posts\"\n  views: \"views\"\n  loading: \"Loading\"\n  powered_by_html: 'Powered by <a href=\"https://www.discourse.org\">Discourse</a>, best viewed with JavaScript enabled'\n  sign_up: \"Sign Up\"\n  log_in: \"Log In\"\n  submit: \"Submit\"\n  purge_reason: \"Automatically deleted as abandoned, deactivated account\"\n  disable_remote_images_download_reason: \"Remote images download was disabled because there wasn't enough disk space available.\"\n  anonymous: \"Anonymous\"\n  remove_posts_deleted_by_author: \"Deleted by author\"\n  redirect_warning: \"We were unable to verify that the link you selected was actually posted to the forum. If you wish to proceed anyway, select the link below.\"\n  on_another_topic: \"On another topic\"\n\n  inline_oneboxer:\n    topic_page_title_post_number: \"#%{post_number}\"\n    topic_page_title_post_number_by_user: \"#%{post_number} by %{username}\"\n  themes:\n    bad_color_scheme: \"Can not update theme, invalid color palette\"\n    other_error: \"Something went wrong updating theme\"\n    ember_selector_error: \"Sorry \u2013 using #ember or .ember-view CSS selectors is not permitted, because these names are dynamically generated at runtime and will change over time, eventually resulting in broken CSS. Try a different selector.\"\n    import_error:\n      generic: An error occurred while importing that theme\n      upload: \"Error creating upload asset: %{name}. %{errors}\"\n      about_json: \"Import Error: about.json does not exist, or is invalid. Are you sure this is a Discourse Theme?\"\n      about_json_values: \"about.json contains invalid values: %{errors}\"\n      modifier_values: \"about.json modifiers contain invalid values: %{errors}\"\n      git: \"Error cloning git repository, access is denied or repository is not found\"\n      git_ref_not_found: \"Unable to checkout git reference: %{ref}\"\n      git_unsupported_scheme: \"Unable to clone git repo: scheme unsupported\"\n      unpack_failed: \"Failed to unpack file\"\n      file_too_big: \"The uncompressed file is too big.\"\n      unknown_file_type: \"The file you uploaded does not appear to be a valid Discourse theme.\"\n      not_allowed_theme: \"`%{repo}` is not in the list of allowed themes (check `allowed_theme_repos` global setting).\"\n      ssh_key_gone: \"You waited too long to install the theme and SSH key expired. Please try again.\"\n    errors:\n      component_no_user_selectable: \"Theme components can't be user-selectable\"\n      component_no_default: \"Theme components can't be default theme\"\n      component_no_color_scheme: \"Theme components can't have color palettes\"\n      no_multilevels_components: \"Themes with child themes can't be child themes themselves\"\n      optimized_link: Optimized image links are ephemeral and should not be included in theme source code.\n    settings_errors:\n      invalid_yaml: \"Provided YAML is invalid.\"\n      data_type_not_a_number: \"Setting `%{name}` type is unsupported. Supported types are `integer`, `bool`, `list`, `enum` and `upload`\"\n      name_too_long: \"There is a setting with a too long name. Maximum length is 255\"\n      default_value_missing: \"Setting `%{name}` has no default value\"\n      default_not_match_type: \"Setting `%{name}` default value's type doesn't match with the setting type.\"\n      default_out_range: \"Setting `%{name}` default value isn't in the specified range.\"\n      enum_value_not_valid: \"Selected value isn't one of the enum choices.\"\n      number_value_not_valid: \"New value isn't within the allowed range.\"\n      number_value_not_valid_min_max: \"It must be between %{min} and %{max}.\"\n      number_value_not_valid_min: \"It must be larger than or equal to %{min}.\"\n      number_value_not_valid_max: \"It must be smaller than or equal to %{max}.\"\n      string_value_not_valid: \"New value length isn't within the allowed range.\"\n      string_value_not_valid_min_max: \"It must be between %{min} and %{max} characters long.\"\n      string_value_not_valid_min: \"It must be at least %{min} characters long.\"\n      string_value_not_valid_max: \"It must be at most %{max} characters long.\"\n    locale_errors:\n      top_level_locale: \"The top level key in a locale file must match the locale name\"\n      invalid_yaml: \"Translation YAML invalid\"\n  emails:\n    incoming:\n      default_subject: \"This topic needs a title\"\n      show_trimmed_content: \"Show trimmed content\"\n      maximum_staged_user_per_email_reached: \"Reached maximum number of staged users created per email.\"\n      no_subject: \"(no subject)\"\n      no_body: \"(no body)\"\n      missing_attachment: \"(Attachment %{filename} is missing)\"\n      continuing_old_discussion:\n        one: \"Continuing the discussion from [%{title}](%{url}), because it was created more than %{count} day ago.\"\n        other: \"Continuing the discussion from [%{title}](%{url}), because it was created more than %{count} days ago.\"\n      errors:\n        empty_email_error: \"Happens when the raw mail we received was blank.\"\n        no_message_id_error: \"Happens when the mail has no 'Message-Id' header.\"\n        auto_generated_email_error: \"Happens when the 'precedence' header is set to: list, junk, bulk or auto_reply, or when any other header contains: auto-submitted, auto-replied or auto-generated.\"\n        no_body_detected_error: \"Happens when we couldn't extract a body and there were no attachments.\"\n        no_sender_detected_error: \"Happens when we couldn't find a valid email address in the From header.\"\n        from_reply_by_address_error: \"Happens when the From header matches the reply by email address.\"\n        inactive_user_error: \"Happens when the sender is not active.\"\n        silenced_user_error: \"Happens when the sender has been silenced.\"\n        bad_destination_address: \"Happens when none of the email addresses in To/Cc fields matched a configured incoming email address.\"\n        strangers_not_allowed_error: \"Happens when a user tried to create a new topic in a category they're not a member of.\"\n        insufficient_trust_level_error: \"Happens when a user tried to create a new topic in a category they don't have the required trust level for.\"\n        reply_user_not_matching_error: \"Happens when a reply came in from a different email address the notification was sent to.\"\n        topic_not_found_error: \"Happens when a reply came in but the related topic has been deleted.\"\n        topic_closed_error: \"Happens when a reply came in but the related topic has been closed.\"\n        bounced_email_error: \"Email is a bounced email report.\"\n        screened_email_error: \"Happens when the sender's email address was already screened.\"\n        unsubscribe_not_allowed: \"Happens when unsubscribing via email is not allowed for this user.\"\n        email_not_allowed: \"Happens when the email address is not on the allowlist or is on the blocklist.\"\n      unrecognized_error: \"Unrecognized Error\"\n    secure_uploads_placeholder: \"Redacted: This site has secure uploads enabled, visit the topic or click View Media to see the attached uploads.\"\n    view_redacted_media: \"View Media\"\n\n  errors: &errors\n    format: ! \"%{attribute} %{message}\"\n    format_with_full_message: \"<b>%{attribute}</b>: %{message}\"\n    messages:\n      too_long_validation: \"is limited to %{max} characters; you entered %{length}.\"\n      invalid_boolean: \"Invalid boolean.\"\n      taken: \"has already been taken\"\n      accepted: must be accepted\n      blank: can't be blank\n      present: must be blank\n      confirmation: ! \"doesn't match %{attribute}\"\n      empty: can't be empty\n      equal_to: must be equal to %{count}\n      even: must be even\n      exclusion: is reserved\n      greater_than: must be greater than %{count}\n      greater_than_or_equal_to: must be greater than or equal to %{count}\n      has_already_been_used: \"has already been used\"\n      inclusion: is not included in the list\n      invalid: is invalid\n      is_invalid: \"seems unclear, is it a complete sentence?\"\n      is_invalid_meaningful: \"seems unclear, most of the words contain the same letters over and over?\"\n      is_invalid_unpretentious: \"seems unclear, one or more words is very long?\"\n      is_invalid_quiet: \"seems unclear, did you mean to enter it in ALL CAPS?\"\n      invalid_timezone: \"'%{tz}' is not a valid timezone\"\n      contains_censored_words: \"contains the following censored words: %{censored_words}\"\n      less_than: must be less than %{count}\n      less_than_or_equal_to: must be less than or equal to %{count}\n      not_a_number: is not a number\n      not_an_integer: must be an integer\n      odd: must be odd\n      record_invalid: ! \"Validation failed: %{errors}\"\n      max_emojis: \"can't have more than %{max_emojis_count} emoji\"\n      emojis_disabled: \"can't have emoji\"\n      ip_address_already_screened: \"is already included in an existing rule\"\n      restrict_dependent_destroy:\n        one: \"Cannot delete record because a dependent %{record} exists\"\n        other: \"Cannot delete record because dependent %{record} exist\"\n      too_long:\n        one: is too long (maximum is %{count} character)\n        other: is too long (maximum is %{count} characters)\n      too_short:\n        one: is too short (minimum is %{count} character)\n        other: is too short (minimum is %{count} characters)\n      wrong_length:\n        one: is the wrong length (should be %{count} character)\n        other: is the wrong length (should be %{count} characters)\n      other_than: \"must be other than %{count}\"\n      auth_overrides_username: \"Username needs to be updated on authentication provider side, since `auth_overrides_username` setting is enabled.\"\n    template:\n      body: ! \"There were problems with the following fields:\"\n      header:\n        one: \"%{count} error prohibited this %{model} from being saved\"\n        other: ! \"%{count} errors prohibited this %{model} from being saved\"\n    embed:\n      load_from_remote: \"There was an error loading that post.\"\n    site_settings:\n      invalid_category_id: \"You specified a category that does not exist\"\n      invalid_choice:\n        one: \"You specified the invalid choice %{name}\"\n        other: \"You specified the invalid choices %{name}\"\n      default_categories_already_selected: \"You cannot select a category used in another list.\"\n      default_tags_already_selected: \"You cannot select a tag used in another list.\"\n      s3_upload_bucket_is_required: \"You cannot enable uploads to S3 unless you've provided the 's3_upload_bucket'.\"\n      enable_s3_uploads_is_required: \"You cannot enable usage of the S3 inventory unless you've enabled S3 uploads.\"\n      page_publishing_requirements: \"Page publishing cannot be enabled if secure media is enabled.\"\n      s3_backup_requires_s3_settings: \"You cannot use S3 as backup location unless you've provided the '%{setting_name}'.\"\n      s3_bucket_reused: \"You cannot use the same bucket for 's3_upload_bucket' and 's3_backup_bucket'. Choose a different bucket or use a different path for each bucket.\"\n      secure_uploads_requirements: \"S3 uploads must be enabled before enabling secure uploads.\"\n      share_quote_facebook_requirements: \"You must set a Facebook app id to enable quote sharing for Facebook.\"\n      second_factor_cannot_enforce_with_socials: \"You cannot enforce 2FA with social logins enabled. You must first disable login via: %{auth_provider_names}\"\n      second_factor_cannot_be_enforced_with_disabled_local_login: \"You cannot enforce 2FA if local logins are disabled.\"\n      second_factor_cannot_be_enforced_with_discourse_connect_enabled: \"You cannot enforce 2FA if DiscourseConnect is enabled.\"\n      local_login_cannot_be_disabled_if_second_factor_enforced: \"You cannot disable local login if 2FA is enforced. Disable enforced 2FA before disabling local logins.\"\n      cannot_enable_s3_uploads_when_s3_enabled_globally: \"You cannot enable S3 uploads because S3 uploads are already globally enabled, and enabling this site-level could cause critical issues with uploads\"\n      cors_origins_should_not_have_trailing_slash: \"You should not add the trailing slash (/) to CORS origins.\"\n      slow_down_crawler_user_agent_must_be_at_least_3_characters: \"User agents must be at least 3 characters long to avoid incorrectly rate limiting human users.\"\n      slow_down_crawler_user_agent_cannot_be_popular_browsers: \"You cannot add any of the following values to the setting: %{values}.\"\n      strip_image_metadata_cannot_be_disabled_if_composer_media_optimization_image_enabled: \"You cannot disable strip image metadata if 'composer media optimization image enabled' is enabled. Disable 'composer media optimization image enabled' before disabling strip image metadata.\"\n      twitter_summary_large_image_no_svg: \"Twitter summary images used for twitter:image metadata cannot be an .svg image.\"\n    conflicting_google_user_id: 'The Google Account ID for this account has changed; staff intervention is required for security reasons. Please contact staff and point them to <br><a href=\"https://meta.discourse.org/t/76575\">https://meta.discourse.org/t/76575</a>'\n    onebox:\n      invalid_address: \"Sorry, we were unable to generate a preview for this web page, because the server '%{hostname}' could not be found. Instead of a preview, only a link will appear in your post. :cry:\"\n      error_response: \"Sorry, we were unable to generate a preview for this web page, because the web server returned an error code of %{status_code}. Instead of a preview, only a link will appear in your post. :cry:\"\n      missing_data:\n        one: \"Sorry, we were unable to generate a preview for this web page, because the following oEmbed / OpenGraph tag could not be found: %{missing_attributes}\"\n        other: \"Sorry, we were unable to generate a preview for this web page, because the following oEmbed / OpenGraph tags could not be found: %{missing_attributes}\"\n\n  word_connector:\n    # Connects words with a comma. Example: \"foo, bar\"\n    comma: \", \"\n\n  activemodel:\n    errors:\n      <<: *errors\n\n  invite:\n    expired: \"Your invite token has expired. Please <a href='%{base_url}/about'>contact staff</a>.\"\n    not_found: \"Your invite token is invalid. Please <a href='%{base_url}/about'>contact staff</a>.\"\n    not_found_json: \"Your invite token is invalid. Please contact staff.\"\n    not_matching_email: \"Your email address and the email address associated with the invite token do not match. Please contact staff.\"\n    not_found_template: |\n      <p>Your invite to <a href=\"%{base_url}\">%{site_name}</a> has already been redeemed.</p>\n\n      <p>If you remember your password you can <a href=\"%{base_url}/login\">Log In</a>.</p>\n\n      <p>Otherwise please <a href=\"%{base_url}/password-reset\">Reset Password</a>.</p>\n    not_found_template_link: |\n      <p>This invitation to <a href=\"%{base_url}\">%{site_name}</a> can no longer be redeemed. Please ask the person who invited you to send you a new invitation.</p>\n    existing_user_cannot_redeem: \"This invitation cannot be redeemed. Please ask the person who invited you to send you a new invitation.\"\n    existing_user_already_redemeed: \"You have already redeemed this invite link.\"\n    user_exists: \"There's no need to invite <b>%{email}</b>, they already have an account!\"\n    invite_exists: \"You already invited <b>%{email}</b>.\"\n    invalid_email: \"%{email} isn't a valid email address.\"\n    rate_limit:\n      one: \"You have already sent %{count} invite in the last 24 hours, please wait %{time_left} before trying again.\"\n      other: \"You have already sent %{count} invites in the last 24 hours, please wait %{time_left} before trying again.\"\n    confirm_email: \"<p>You\u2019re almost done! We sent an activation mail to your email address. Please follow the instructions in the mail to activate your account.</p><p>If it doesn\u2019t arrive, check your spam folder.</p>\"\n    cant_invite_to_group: \"You are not allowed to invite users to specified group(s). Make sure you are owner of the group(s) you are trying to invite to.\"\n    disabled_errors:\n      discourse_connect_enabled: \"Invites are disabled because DiscourseConnect is enabled.\"\n      invalid_access: \"You are not permitted to view the requested resource.\"\n    requires_groups: \"Invite was not saved because the specified topic is inaccessible. Add one of the following groups: %{groups}.\"\n    domain_not_allowed: \"Your email cannot be used to redeem this invite.\"\n    max_redemptions_allowed_one: \"for email invites should be 1.\"\n    redemption_count_less_than_max: \"should be less than %{max_redemptions_allowed}.\"\n    email_xor_domain: \"Email and domain fields are not allowed at the same time\"\n    existing_user_success: \"Invite redeemed successfully\"\n\n  bulk_invite:\n    file_should_be_csv: \"The uploaded file should be of csv format.\"\n    max_rows: \"First %{max_bulk_invites} invites has been sent. Try splitting the file in smaller parts.\"\n    error: \"There was an error uploading that file. Please try again later.\"\n\n  invite_link:\n    email_taken: \"This email is already in use. If you already have an account please log in or reset password.\"\n    max_redemptions_limit: \"should be between 2 and %{max_limit}.\"\n\n  topic_invite:\n    failed_to_invite: \"The user cannot be invited into this topic without a group membership in either one of the following groups: %{group_names}.\"\n    not_pm: \"You can only invite to private messages.\"\n    user_exists: \"Sorry, that user has already been invited. You may only invite a user to a topic once.\"\n    muted_topic: \"Sorry, that user muted this topic.\"\n    receiver_does_not_allow_pm: \"Sorry, that user does not allow you to send them private messages.\"\n    sender_does_not_allow_pm: \"Sorry, you do not allow that user to send you private messages.\"\n    user_cannot_see_topic: \"%{username} cannot see the topic.\"\n\n  backup:\n    operation_already_running: \"An operation is currently running. Can't start a new job right now.\"\n    backup_file_should_be_tar_gz: \"The backup file should be a .tar.gz archive.\"\n    not_enough_space_on_disk: \"There is not enough space on disk to upload this backup.\"\n    invalid_filename: \"The backup filename contains invalid characters. Valid characters are a-z 0-9 . - _.\"\n    file_exists: \"The file you are trying to upload already exists.\"\n\n  invalid_params: \"You supplied invalid parameters to the request: %{message}\"\n  not_logged_in: \"You need to be logged in to do that.\"\n  not_found: \"The requested URL or resource could not be found.\"\n  invalid_access: \"You are not permitted to view the requested resource.\"\n  authenticator_not_found: \"Authentication method does not exist, or has been disabled.\"\n  authenticator_no_connect: \"This authentication provider does not allow connection to an existing forum account.\"\n  invalid_api_credentials: \"You are not permitted to view the requested resource. The API username or key is invalid.\"\n  provider_not_enabled: \"You are not permitted to view the requested resource. The authentication provider is not enabled.\"\n  provider_not_found: \"You are not permitted to view the requested resource. The authentication provider does not exist.\"\n  read_only_mode_enabled: \"The site is in read only mode. Interactions are disabled.\"\n  invalid_grant_badge_reason_link: \"External or invalid discourse link is not allowed in badge reason\"\n  email_template_cant_be_modified: \"This email template can't be modified\"\n  invalid_whisper_access: \"Either whispers are not enabled or you do not have access to create whisper posts\"\n  not_in_group:\n    title_topic: \"You need to request membership to the '%{group}' group to see this topic.\"\n    title_category: \"You need to request membership to the '%{group}' group to see this category.\"\n    request_membership: \"Request Membership\"\n    join_group: \"Join Group\"\n  deleted_topic: \"Oops! This topic has been deleted and is no longer available.\"\n  delete_topic_failed: \"There was an error deleting that topic. Please contact the site's administrator.\"\n\n  reading_time: \"Reading time\"\n  likes: \"Likes\"\n\n  too_many_replies:\n    one: \"We're sorry, but new users are temporarily limited to %{count} reply in the same topic.\"\n    other: \"We're sorry, but new users are temporarily limited to %{count} replies in the same topic.\"\n\n  max_consecutive_replies:\n    one: \"No consecutive replies are allowed. Please edit your previous reply, or wait for someone to reply to you.\"\n    other: \"No more than %{count} consecutive replies are allowed. Please edit your previous reply, or wait for someone to reply to you.\"\n\n  embed:\n    start_discussion: \"Start Discussion\"\n    continue: \"Continue Discussion\"\n    error: \"Error Embedding\"\n    referer: \"Referer:\"\n    error_topics: \"The `embed topics list` site setting was not enabled\"\n    mismatch: \"The referer was either not sent, or did not match any of the following hosts:\"\n    no_hosts: \"No hosts were set up for embedding.\"\n    configure: \"Configure Embedding\"\n    more_replies:\n      one: \"%{count} more reply\"\n      other: \"%{count} more replies\"\n\n    loading: \"Loading Discussion...\"\n    permalink: \"Permalink\"\n    imported_from: \"This is a companion discussion topic for the original entry at %{link}\"\n    in_reply_to: \"\u25b6 %{username}\"\n    replies:\n      one: \"%{count} reply\"\n      other: \"%{count} replies\"\n    likes:\n      one: \"%{count} like\"\n      other: \"%{count} likes\"\n    last_reply: \"Last reply\"\n    created: \"Created\"\n    new_topic: \"Create new topic\"\n\n  no_mentions_allowed: \"Sorry, you can't mention other users.\"\n  too_many_mentions:\n    one: \"Sorry, you can only mention one other user in a post.\"\n    other: \"Sorry, you can only mention %{count} users in a post.\"\n  no_mentions_allowed_newuser: \"Sorry, new users can't mention other users.\"\n  too_many_mentions_newuser:\n    one: \"Sorry, new users can only mention one other user in a post.\"\n    other: \"Sorry, new users can only mention %{count} users in a post.\"\n  no_embedded_media_allowed_trust: \"Sorry, you can't embed media items in a post.\"\n  no_embedded_media_allowed: \"Sorry, new users can't embed media items in posts.\"\n  too_many_embedded_media:\n    one: \"Sorry, new users can only put one embedded media item in a post.\"\n    other: \"Sorry, new users can only put %{count} embedded media items in a post.\"\n  no_attachments_allowed: \"Sorry, new users can't put attachments in posts.\"\n  too_many_attachments:\n    one: \"Sorry, new users can only put one attachment in a post.\"\n    other: \"Sorry, new users can only put %{count} attachments in a post.\"\n  no_links_allowed: \"Sorry, new users can't put links in posts.\"\n  links_require_trust: \"Sorry, you can't include links in your posts.\"\n  too_many_links:\n    one: \"Sorry, new users can only put one link in a post.\"\n    other: \"Sorry, new users can only put %{count} links in a post.\"\n  contains_blocked_word: \"Sorry, you can't post the word '%{word}'; it's not allowed.\"\n  contains_blocked_words: \"Sorry, you can't post that. Not allowed: %{words}.\"\n\n  spamming_host: \"Sorry you cannot post a link to that host.\"\n  user_is_suspended: \"Suspended users are not allowed to post.\"\n  topic_not_found: \"Something has gone wrong. Perhaps this topic was closed or deleted while you were looking at it?\"\n  not_accepting_pms: \"Sorry, %{username} is not accepting messages at the moment.\"\n  max_pm_recipients: \"Sorry, you can send a message to maximum %{recipients_limit} recipients.\"\n  pm_reached_recipients_limit: \"Sorry, you can't have more than %{recipients_limit} recipients in a message.\"\n  removed_direct_reply_full_quotes: \"Automatically removed quote of whole previous post.\"\n  watched_words_auto_tag: \"Automatically tagged topic\"\n  secure_upload_not_allowed_in_public_topic: \"Sorry, the following secure upload(s) cannot be used in a public topic: %{upload_filenames}.\"\n  create_pm_on_existing_topic: \"Sorry, you can't create a PM on an existing topic.\"\n  slow_mode_enabled: \"This topic is in slow mode.\"\n\n  just_posted_that: \"is too similar to what you recently posted\"\n  invalid_characters: \"contains invalid characters\"\n  is_invalid: \"seems unclear, is it a complete sentence?\"\n  next_page: \"next page \u2192\"\n  prev_page: \"\u2190 previous page\"\n  page_num: \"Page %{num}\"\n  home_title: \"Home\"\n  topics_in_category: \"Topics in the '%{category}' category\"\n  rss_posts_in_topic: \"RSS feed of '%{topic}'\"\n  rss_topics_in_category: \"RSS feed of topics in the '%{category}' category\"\n  rss_num_posts:\n    one: \"%{count} post\"\n    other: \"%{count} posts\"\n  rss_num_participants:\n    one: \"%{count} participant\"\n    other: \"%{count} participants\"\n\n  read_full_topic: \"Read full topic\"\n  private_message_abbrev: \"Msg\"\n\n  rss_description:\n    latest: \"Latest topics\"\n    top: \"Top topics\"\n    top_all: \"All time top topics\"\n    top_yearly: \"Yearly top topics\"\n    top_quarterly: \"Quarterly top topics\"\n    top_monthly: \"Monthly top topics\"\n    top_weekly: \"Weekly top topics\"\n    top_daily: \"Daily top topics\"\n    posts: \"Latest posts\"\n    private_posts: \"Latest personal messages\"\n    group_posts: \"Latest posts from %{group_name}\"\n    group_mentions: \"Latest mentions from %{group_name}\"\n    user_posts: \"Latest posts by @%{username}\"\n    user_topics: \"Latest topics by @%{username}\"\n    tag: \"Tagged topics\"\n    badge: \"%{display_name} badge on %{site_title}\"\n\n  too_late_to_edit: \"That post was created too long ago. It can no longer be edited or deleted.\"\n  edit_conflict: \"That post was edited by another user and your changes can no longer be saved.\"\n  revert_version_same: \"The current version is same as the version you are trying to revert to.\"\n  cannot_edit_on_slow_mode: \"This topic is in slow mode. To encourage thoughtful, considered discussion, editing old posts in this topic is not currently allowed during slow mode.\"\n\n  excerpt_image: \"image\"\n\n  bookmarks:\n    errors:\n      already_bookmarked_post: \"You cannot bookmark the same post twice.\"\n      already_bookmarked: \"You cannot bookmark the same %{type} twice.\"\n      too_many: \"Sorry, you cannot add more than %{limit} bookmarks, visit <a href='%{user_bookmarks_url}'>%{user_bookmarks_url}</a> to remove some.\"\n      cannot_set_past_reminder: \"You cannot set a bookmark reminder in the past.\"\n      cannot_set_reminder_in_distant_future: \"You cannot set a bookmark reminder more than 10 years in the future.\"\n      time_must_be_provided: \"Time must be provided for all reminders\"\n      for_topic_must_use_first_post: \"You can only use the first post to bookmark the topic.\"\n      bookmarkable_id_type_required: \"The name and type of the record to bookmark is required.\"\n      invalid_bookmarkable: \"A %{type} cannot be bookmarked.\"\n\n    reminders:\n      at_desktop: \"Next time I'm at my desktop\"\n      later_today: \"Later today\"\n      next_business_day: \"Next business day\"\n      tomorrow: \"Tomorrow\"\n      next_week: \"Next week\"\n      next_month: \"Next month\"\n      custom: \"Custom date and time\"\n\n  groups:\n    success:\n      bulk_add:\n        one: \"%{count} user has been added to the group.\"\n        other: \"%{count} users have been added to the group.\"\n    errors:\n      grant_trust_level_not_valid: \"'%{trust_level}' is not a valid trust level.\"\n      can_not_modify_automatic: \"You cannot modify an automatic group\"\n      member_already_exist:\n        one: \"'%{username}' is already a member of this group.\"\n        other: \"The following users are already members of this group: %{username}\"\n      invalid_domain: \"'%{domain}' is not a valid domain.\"\n      invalid_incoming_email: \"'%{email}' is not a valid email address.\"\n      email_already_used_in_group: \"'%{email}' is already used by the group '%{group_name}'.\"\n      email_already_used_in_category: \"'%{email}' is already used by the category '%{category_name}'.\"\n      cant_allow_membership_requests: \"You cannot allow membership requests for a group without any owners.\"\n      already_requested_membership: \"You have already requested membership for this group.\"\n      adding_too_many_users:\n        one: \"Maximum %{count} user can be added at once\"\n        other: \"Maximum %{count} users can be added at once\"\n      usernames_or_emails_required: \"Usernames or emails must be present\"\n      no_invites_with_discourse_connect: \"You can invite only registered users when DiscourseConnect is enabled\"\n      no_invites_without_local_logins: \"You can invite only registered users when local logins are disabled\"\n    default_names:\n      everyone: \"everyone\"\n      admins: \"admins\"\n      moderators: \"moderators\"\n      staff: \"staff\"\n      trust_level_0: \"trust_level_0\"\n      trust_level_1: \"trust_level_1\"\n      trust_level_2: \"trust_level_2\"\n      trust_level_3: \"trust_level_3\"\n      trust_level_4: \"trust_level_4\"\n    request_membership_pm:\n      title: \"Membership Request for @%{group_name}\"\n    request_accepted_pm:\n      title: \"You've been accepted into @%{group_name}\"\n      body: |\n        Your request to enter @%{group_name} has been accepted and you are now a member.\n\n  education:\n    until_posts:\n      one: \"%{count} post\"\n      other: \"%{count} posts\"\n\n    \"new-topic\": |\n      Welcome to %{site_name} &mdash; **thanks for starting a new conversation!**\n\n      - Does the title sound interesting if you read it out loud? Is it a good summary?\n\n      - Who would be interested in this? Why does it matter? What kind of responses do you want?\n\n      - Include commonly used words in your topic so others can *find* it. To group your topic with related topics, select a category (or tag).\n\n      For more, [see our community guidelines](%{base_path}/guidelines). This panel will only appear for your first %{education_posts_text}.\n\n    \"new-reply\": |\n      Welcome to %{site_name} &mdash; **thanks for contributing!**\n\n      - Be kind to your fellow community members.\n\n      - Does your reply improve the conversation?\n\n      - Constructive criticism is welcome, but criticize *ideas*, not people.\n\n      For more, [see our community guidelines](%{base_path}/guidelines). This panel will only appear for your first %{education_posts_text}.\n\n    avatar: |\n      ### How about a picture for your account?\n\n      You\u2019ve posted a few topics and replies, but your profile picture isn\u2019t as unique as you are \u2013 it\u2019s just a letter.\n\n      Have you considered **[visiting your user profile](%{profile_path})** and uploading a picture that represents you?\n\n      It\u2019s easier to follow discussions and find interesting people in conversations when everyone has a unique profile picture!\n\n    sequential_replies: |\n      ### Consider replying to several posts at once\n\n      Rather than several replies to a topic in a row, please consider a single reply that includes quotes from previous posts or @name references.\n\n      You can edit your previous reply to add a quote by highlighting text and selecting the <b>quote reply</b> button that appears.\n\n      It\u2019s easier for everyone to read topics that have fewer in-depth replies versus lots of small, individual replies.\n\n    dominating_topic: You\u2019ve posted a lot in this topic! Consider giving others an opportunity to reply here and discuss things with each other as well.\n\n    get_a_room: You\u2019ve replied to @%{reply_username} %{count} times, did you know you could send them a personal message instead?\n\n    too_many_replies: |\n      ### You have reached the reply limit for this topic\n\n      We\u2019re sorry, but new users are temporarily limited to %{newuser_max_replies_per_topic} replies in the same topic.\n\n      Instead of adding another reply, please consider editing your previous replies, or visiting other topics.\n\n    reviving_old_topic: |\n      ### Revive this topic?\n\n      The last reply to this topic was **%{time_ago}**. Your reply will bump the topic to the top of its list and notify anyone previously involved in the conversation.\n\n      Are you sure you want to continue this old conversation?\n\n  activerecord:\n    attributes:\n      category:\n        name: \"Category Name\"\n      topic:\n        title: \"Title\"\n        featured_link: \"Featured Link\"\n        category_id: \"Category\"\n      post:\n        raw: \"Body\"\n      user_profile:\n        bio_raw: \"About Me\"\n      user:\n        ip_address: \"\"\n    errors:\n      <<: *errors\n      models:\n        topic:\n          attributes:\n            base:\n              warning_requires_pm: \"You can only attach warnings to personal messages.\"\n              too_many_users: \"You can only send warnings to one user at a time.\"\n              cant_send_pm: \"Sorry, you cannot send a personal message to that user.\"\n              no_user_selected: \"You must select a valid user.\"\n              reply_by_email_disabled: \"Reply by email has been disabled.\"\n              send_to_email_disabled: \"Sorry, you cannot send personal messages to email.\"\n              target_user_not_found: \"One of the users you are sending this message to could not be found.\"\n              unable_to_update: \"There was an error updating that topic.\"\n              unable_to_tag: \"There was an error tagging the topic.\"\n              unable_to_unlist: \"Sorry, you cannot create an unlisted topic.\"\n            featured_link:\n              invalid: \"is invalid. URL should include http:// or https://.\"\n        user:\n          attributes:\n            password:\n              common: \"is one of the 10000 most common passwords. Please use a more secure password.\"\n              same_as_username: \"is the same as your username. Please use a more secure password.\"\n              same_as_email: \"is the same as your email. Please use a more secure password.\"\n              same_as_current: \"is the same as your current password.\"\n              same_as_name: \"is the same as your name.\"\n              unique_characters: \"has too many repeated characters. Please use a more secure password.\"\n            username:\n              same_as_password: \"is the same as your password.\"\n            name:\n              same_as_password: \"is the same as your password.\"\n            ip_address:\n              signup_not_allowed: \"Signup is not allowed from this account.\"\n        user_profile:\n          attributes:\n            featured_topic_id:\n              invalid: \"This topic cannot be featured on your profile.\"\n        user_email:\n          attributes:\n            user_id:\n              reassigning_primary_email: \"Reassigning a primary email to another user is not allowed.\"\n        color_scheme_color:\n          attributes:\n            hex:\n              invalid: \"is not a valid color\"\n        post_reply:\n          base:\n            different_topic: \"Post and reply must belong to the same topic.\"\n        web_hook:\n          attributes:\n            payload_url:\n              invalid: \"URL is invalid. URL should includes http:// or https://. And no blank is allowed.\"\n        custom_emoji:\n          attributes:\n            name:\n              taken: is already in use by another emoji\n        topic_timer:\n          attributes:\n            execute_at:\n              in_the_past: \"must be in the future.\"\n            duration_minutes:\n              cannot_be_zero: \"must be greater than 0.\"\n              exceeds_maximum: \"cannot be more than 20 years.\"\n        translation_overrides:\n          attributes:\n            value:\n              invalid_interpolation_keys: 'The following interpolation key(s) are invalid: \"%{keys}\"'\n        watched_word:\n          attributes:\n            word:\n              too_many: \"Too many words for that action\"\n            base:\n              invalid_url: \"Replacement URL is invalid\"\n              invalid_tag_list: \"Replacement tag list is invalid\"\n        sidebar_section_link:\n          attributes:\n            linkable_type:\n              invalid: \"is not valid\"\n\n  uncategorized_category_name: \"Uncategorized\"\n\n  general_category_name: \"General\"\n  general_category_description: \"Create topics here that don\u2019t fit into any other existing category.\"\n\n  meta_category_name: \"Site Feedback\"\n  meta_category_description: \"Discussion about this site, its organization, how it works, and how we can improve it.\"\n\n  staff_category_name: \"Staff\"\n  staff_category_description: \"Private category for staff discussions. Topics are only visible to admins and moderators.\"\n\n  discourse_welcome_topic:\n    title: \"Welcome to our community!\"\n    body: |\n\n      The first paragraph of this pinned topic will be visible as a welcome message to all new visitors on your homepage. It's important!\n\n      **Edit this** into a brief description of your community:\n\n      - Who is it for?\n      - What can they find here?\n      - Why should they come here?\n      - Where can they read more (links, resources, etc)?\n\n      <img src=\"%{base_path}/images/welcome/discourse-edit-post-animated.gif\" width=\"508\" height=\"106\">\n\n      You may want to close this topic via the admin :wrench: (at the upper right and bottom), so that replies don't pile up on an announcement.\n\n  admin_quick_start_title: \"READ ME FIRST: Admin Quick Start Guide\"\n\n  category:\n    topic_prefix: \"About the %{category} category\"\n    replace_paragraph: \"(Replace this first paragraph with a brief description of your new category. This guidance will appear in the category selection area, so try to keep it below 200 characters.)\"\n    post_template: \"%{replace_paragraph}\\n\\nUse the following paragraphs for a longer description, or to establish category guidelines or rules:\\n\\n- Why should people use this category? What is it for?\\n\\n- How exactly is this different than the other categories we already have?\\n\\n- What should topics in this category generally contain?\\n\\n- Do we need this category? Can we merge with another category, or subcategory?\\n\"\n    errors:\n      not_found: \"Category not found!\"\n      uncategorized_parent: \"Uncategorized can't have a parent category\"\n      self_parent: \"A subcategory's parent cannot be itself\"\n      depth: \"You can't nest a subcategory under another\"\n      invalid_email_in: \"'%{email}' is not a valid email address.\"\n      email_already_used_in_group: \"'%{email}' is already used by the group '%{group_name}'.\"\n      email_already_used_in_category: \"'%{email}' is already used by the category '%{category_name}'.\"\n      description_incomplete: \"The category description post must have at least one paragraph.\"\n      permission_conflict: \"Any group that is allowed to access a subcategory must also be allowed to access the parent category. The following groups have access to one of the subcategories, but no access to parent category: %{group_names}.\"\n      disallowed_topic_tags: \"This topic has tags not allowed by this category: '%{tags}'\"\n      disallowed_tags_generic: \"This topic has disallowed tags.\"\n      slug_contains_non_ascii_chars: \"contains non-ascii characters\"\n      is_already_in_use: \"is already in use\"\n    cannot_delete:\n      uncategorized: \"This category is special. It is intended as a holding area for topics that have no category; it cannot be deleted.\"\n      has_subcategories: \"Can't delete this category because it has sub-categories.\"\n      topic_exists:\n        one: \"Can't delete this category because it has %{count} topic. Oldest topic is %{topic_link}.\"\n        other: \"Can't delete this category because it has %{count} topics. Oldest topic is %{topic_link}.\"\n      topic_exists_no_oldest: \"Can't delete this category because topic count is %{count}.\"\n    uncategorized_description: \"Topics that don't need a category, or don't fit into any other existing category.\"\n  trust_levels:\n    admin: \"Admin\"\n    staff: \"Staff\"\n    change_failed_explanation: \"You attempted to demote %{user_name} to '%{new_trust_level}'. However their trust level is already '%{current_trust_level}'. %{user_name} will remain at '%{current_trust_level}' - if you wish to demote user lock trust level first\"\n\n  post:\n    image_placeholder:\n      broken: \"This image is broken\"\n      blocked_hotlinked_title: \"Image hosted on another site. Click to open in a new tab.\"\n      blocked_hotlinked: \"External Image\"\n    media_placeholder:\n      blocked_hotlinked_title: \"Media hosted on another site. Click to open in a new tab.\"\n      blocked_hotlinked: \"External Media\"\n    hidden_bidi_character: \"Bidirectional characters can change the order that text is rendered. This could be used to obscure malicious code.\"\n    has_likes:\n      one: \"%{count} Like\"\n      other: \"%{count} Likes\"\n    cannot_permanently_delete:\n      many_posts: \"You can not permanently delete this topic because there are other posts.\"\n      wait_or_different_admin: \"You must wait %{time_left} before permanently deleting this post or a different administrator must do it.\"\n\n  rate_limiter:\n    slow_down: \"You\u2019ve performed this action too many times, please try again later.\"\n    too_many_requests: \"You\u2019ve performed this action too many times. Please wait %{time_left} before trying again.\"\n    by_type:\n      first_day_replies_per_day: \"We appreciate your enthusiasm, keep it up! That said, for the safety of our community, you\u2019ve reached the maximum number of replies a new user can create on their first day. Please wait %{time_left} and you\u2019ll be able to create more replies.\"\n      first_day_topics_per_day: \"We appreciate your enthusiasm! That said, for the safety of our community, you\u2019ve reached the maximum number of topics a new user can create on their first day. Please wait %{time_left} and you\u2019ll be able to create more new topics.\"\n      create_topic: \"You\u2019re creating topics a bit too quickly. Please wait %{time_left} before trying again.\"\n      create_post: \"You\u2019re replying a bit too quickly. Please wait %{time_left} before trying again.\"\n      delete_post: \"You\u2019re deleting posts a bit too quickly. Please wait %{time_left} before trying again.\"\n      public_group_membership: \"You\u2019re joining/leaving groups a bit too frequently. Please wait %{time_left} before trying again.\"\n      topics_per_day: \"You\u2019ve reached the maximum new topics allowed per day. You can create more new topics in %{time_left}.\"\n      pms_per_day: \"You\u2019ve reached the maximum messages allowed per day. You can create more new messages in %{time_left}.\"\n      create_like: \"Wow! You\u2019ve been sharing a lot of love! You\u2019ve reached the maximum number of likes within a 24 hour period, but as you gain trust levels, you\u2019ll earn more daily likes. You\u2019ll be able to like posts again in %{time_left}.\"\n      create_bookmark: \"You\u2019ve reached the maximum number of daily bookmarks. You can create more bookmarks in %{time_left}.\"\n      edit_post: \"You\u2019ve reached the maximum number of daily edits. You can submit more edits in %{time_left}.\"\n      live_post_counts: \"You\u2019re asking for live post counts too quickly. Please wait %{time_left} before trying again.\"\n      unsubscribe_via_email: \"You\u2019ve reached the maximum number of unsubscribes via email. Please wait %{time_left} before trying again.\"\n      topic_invitations_per_day: \"You\u2019ve reached the maximum number of topic invitations. You can send more invitations in %{time_left}.\"\n\n    hours:\n      one: \"%{count} hour\"\n      other: \"%{count} hours\"\n    minutes:\n      one: \"%{count} minute\"\n      other: \"%{count} minutes\"\n    seconds:\n      one: \"%{count} second\"\n      other: \"%{count} seconds\"\n    short_time: \"a few seconds\"\n\n  datetime:\n    distance_in_words:\n      half_a_minute: \"< 1m\"\n      less_than_x_seconds:\n        one: \"< %{count}s\"\n        other: \"< %{count}s\"\n      x_seconds:\n        one: \"%{count}s\"\n        other: \"%{count}s\"\n      less_than_x_minutes:\n        one: \"< %{count}m\"\n        other: \"< %{count}m\"\n      x_minutes:\n        one: \"%{count}m\"\n        other: \"%{count}m\"\n      about_x_hours:\n        one: \"%{count}h\"\n        other: \"%{count}h\"\n      x_days:\n        one: \"%{count}d\"\n        other: \"%{count}d\"\n      about_x_months:\n        one: \"%{count}mon\"\n        other: \"%{count}mon\"\n      x_months:\n        one: \"%{count}mon\"\n        other: \"%{count}mon\"\n      about_x_years:\n        one: \"%{count}y\"\n        other: \"%{count}y\"\n      over_x_years:\n        one: \"> %{count}y\"\n        other: \"> %{count}y\"\n      almost_x_years:\n        one: \"%{count}y\"\n        other: \"%{count}y\"\n\n    distance_in_words_verbose:\n      half_a_minute: \"just now\"\n      less_than_x_seconds: \"just now\"\n      x_seconds:\n        one: \"%{count} second ago\"\n        other: \"%{count} seconds ago\"\n      less_than_x_minutes:\n        one: \"less than %{count} minute ago\"\n        other: \"less than %{count} minutes ago\"\n      x_minutes:\n        one: \"%{count} minute ago\"\n        other: \"%{count} minutes ago\"\n      about_x_hours:\n        one: \"%{count} hour ago\"\n        other: \"%{count} hours ago\"\n      x_days:\n        one: \"%{count} day ago\"\n        other: \"%{count} days ago\"\n      about_x_months:\n        one: \"about %{count} month ago\"\n        other: \"about %{count} months ago\"\n      x_months:\n        one: \"%{count} month ago\"\n        other: \"%{count} months ago\"\n      about_x_years:\n        one: \"about %{count} year ago\"\n        other: \"about %{count} years ago\"\n      over_x_years:\n        one: \"over %{count} year ago\"\n        other: \"over %{count} years ago\"\n      almost_x_years:\n        one: \"almost %{count} year ago\"\n        other: \"almost %{count} years ago\"\n\n  password_reset:\n    no_token: 'Oops! The link you used no longer works. You can <a href=\"%{base_url}/login\">Log In</a> now. If you forgot your password, you can <a href=\"%{base_url}/password-reset\">request a link</a> to reset it.'\n    choose_new: \"Choose a new password\"\n    choose: \"Choose a password\"\n    update: \"Update Password\"\n    save: \"Set Password\"\n    title: \"Reset Password\"\n    success: \"You successfully changed your password and are now logged in.\"\n    success_unapproved: \"You successfully changed your password.\"\n\n  email_login:\n    invalid_token: 'Oops! The link you used no longer works. You can <a href=\"%{base_url}/login\">Log In</a> now. If you forgot your password, you can <a href=\"%{base_url}/password-reset\">request a link</a> to reset it.'\n    title: \"Email login\"\n\n  user_auth_tokens:\n    browser:\n      chrome: \"Google Chrome\"\n      discoursehub: \"DiscourseHub app\"\n      edge: \"Microsoft Edge\"\n      firefox: \"Firefox\"\n      ie: \"Internet Explorer\"\n      opera: \"Opera\"\n      safari: \"Safari\"\n      unknown: \"unknown browser\"\n    device:\n      android: \"Android Device\"\n      chromebook: \"Chrome OS\"\n      ipad: \"iPad\"\n      iphone: \"iPhone\"\n      ipod: \"iPod\"\n      linux: \"GNU/Linux Computer\"\n      mac: \"Mac\"\n      mobile: \"Mobile Device\"\n      windows: \"Windows Computer\"\n      unknown: \"unknown device\"\n    os:\n      android: \"Android\"\n      chromeos: \"Chrome OS\"\n      ios: \"iOS\"\n      linux: \"Linux\"\n      macos: \"macOS\"\n      windows: \"Microsoft Windows\"\n      unknown: \"unknown operating system\"\n\n  change_email:\n    wrong_account_error: \"You are logged in the wrong account, please log out and try again.\"\n    confirmed: \"Your email has been updated.\"\n    please_continue: \"Continue to %{site_name}\"\n    error: \"There was an error changing your email address. Perhaps the address is already in use?\"\n    doesnt_exist: \"That email address is not associated with your account.\"\n    error_staged: \"There was an error changing your email address. The address is already in use by a staged user.\"\n    already_done: \"Sorry, this confirmation link is no longer valid. Perhaps your email was already changed?\"\n    confirm: \"Confirm\"\n    max_secondary_emails_error: \"You have reached the maximum allowed secondary emails limit.\"\n\n    authorizing_new:\n      title: \"Confirm your new email\"\n      description: \"Please confirm you would like your email address changed to:\"\n      description_add: \"Please confirm you would like to add an alternate email address:\"\n\n    authorizing_old:\n      title: \"Change your email address\"\n      description: \"Please confirm your email address change\"\n      description_add: \"Please confirm you would like to add an alternate email address:\"\n      old_email: \"Old email: %{email}\"\n      new_email: \"New email: %{email}\"\n      almost_done_title: \"Confirming new email address\"\n      almost_done_description: \"We have sent an email to your new email address to confirm the change!\"\n\n  associated_accounts:\n    revoke_failed: \"Failed to revoke your account with %{provider_name}.\"\n    connected: \"(connected)\"\n\n  activation:\n    action: \"Click here to activate your account\"\n    already_done: \"Sorry, this account confirmation link is no longer valid. Perhaps your account is already active?\"\n    please_continue: \"Your new account is confirmed; you will be redirected to the home page.\"\n    continue_button: \"Continue to %{site_name}\"\n    welcome_to: \"Welcome to %{site_name}!\"\n    approval_required: \"A moderator must manually approve your new account before you can access this forum. You'll get an email when your account is approved!\"\n    missing_session: \"We cannot detect if your account was created, please ensure you have cookies enabled.\"\n    activated: \"Sorry, this account has already been activated.\"\n    admin_confirm:\n      title: \"Confirm Admin Account\"\n      description: \"Are you sure you want <b>%{target_username} (%{target_email})</b> to be an administrator?\"\n      grant: \"Grant Admin Access\"\n      complete: \"<b>%{target_username}</b> is now an administrator.\"\n      back_to: \"Return to %{title}\"\n  reviewable_score_types:\n    needs_approval:\n      title: \"Needs Approval\"\n\n  post_action_types:\n    off_topic:\n      title: \"Off-Topic\"\n      description: \"This post is not relevant to the current discussion as defined by the title and first post, and should probably be moved elsewhere.\"\n      short_description: \"Not relevant to the discussion\"\n    spam:\n      title: \"Spam\"\n      description: \"This post is an advertisement, or vandalism. It is not useful or relevant to the current topic.\"\n      short_description: \"This is an advertisement or vandalism\"\n      email_title: '\"%{title}\" was flagged as spam'\n      email_body: \"%{link}\\n\\n%{message}\"\n    inappropriate:\n      title: \"Inappropriate\"\n      description: 'This post contains content that a reasonable person would consider offensive, abusive, or a violation of <a href=\"%{base_path}/guidelines\">our community guidelines</a>.'\n      short_description: 'A violation of <a href=\"%{base_path}/guidelines\">our community guidelines</a>'\n    notify_user:\n      title: \"Send @%{username} a message\"\n      description: \"I want to talk to this person directly and personally about their post.\"\n      short_description: \"I want to talk to this person directly and personally about their post.\"\n      email_title: 'Your post in \"%{title}\"'\n      email_body: \"%{link}\\n\\n%{message}\"\n    notify_moderators:\n      title: \"Something Else\"\n      description: \"This post requires staff attention for another reason not listed above.\"\n      short_description: \"Requires staff attention for another reason\"\n      email_title: 'A post in \"%{title}\" requires staff attention'\n      email_body: \"%{link}\\n\\n%{message}\"\n    bookmark:\n      title: \"Bookmark\"\n      description: \"Bookmark this post\"\n      short_description: \"Bookmark this post\"\n    like:\n      title: \"Like\"\n      description: \"Like this post\"\n      short_description: \"Like this post\"\n\n  draft:\n    sequence_conflict_error:\n      title: \"draft error\"\n      description: \"Draft is being edited in another window. Please reload this page.\"\n  draft_backup:\n    pm_title: \"Backup Drafts from ongoing topics\"\n    pm_body: \"Topic containing backup drafts\"\n  user_activity:\n    no_log_search_queries: \"Search log queries are currently disabled (an administrator can enable them in site settings).\"\n\n  email_settings:\n    pop3_authentication_error: \"There was an issue with the POP3 credentials provided, check the username and password and try again.\"\n    imap_authentication_error: \"There was an issue with the IMAP credentials provided, check the username and password and try again.\"\n    imap_no_response_error: \"An error occurred when communicating with the IMAP server. %{message}\"\n    smtp_authentication_error: \"There was an issue with the SMTP credentials provided, check the username and password and try again.\"\n    authentication_error_gmail_app_password: 'Application-specific password required. Learn more at <a target=\"_blank\" href=\"https://support.google.com/accounts/answer/185833\">this Google Help article</a>'\n    smtp_server_busy_error: \"The SMTP server is currently busy, try again later.\"\n    smtp_unhandled_error: \"There was an unhandled error when communicating with the SMTP server. %{message}\"\n    imap_unhandled_error: \"There was an unhandled error when communicating with the IMAP server. %{message}\"\n    connection_error: \"There was an issue connecting with the server, check the server name and port and try again.\"\n    timeout_error: \"Connection to the server timed out, check the server name and port and try again.\"\n    unhandled_error: \"Unhandled error when testing email settings. %{message}\"\n  webauthn:\n    validation:\n      invalid_type_error: \"The webauthn type provided was invalid. Valid types are webauthn.get and webauthn.create.\"\n      challenge_mismatch_error: \"The provided challenge does not match the challenge generated by the authentication server.\"\n      invalid_origin_error: \"The origin of the authentication request does not match the server origin.\"\n      malformed_attestation_error: \"There was an error decoding the attestation data.\"\n      invalid_relying_party_id_error: \"The Relying Party ID of the authentication request does not match the server Relying Party ID.\"\n      user_verification_error: \"User verification is required.\"\n      unsupported_public_key_algorithm_error: \"The provided public key algorithm is not supported by the server.\"\n      unsupported_attestation_format_error: \"The attestation format is not supported by the server.\"\n      credential_id_in_use_error: \"The credential ID provided is already in use.\"\n      public_key_error: \"The public key verification for the credential failed.\"\n      ownership_error: \"The security key is not owned by the user.\"\n      not_found_error: \"A security key with the provided credential ID could not be found.\"\n      unknown_cose_algorithm_error: \"The algorithm used for the security key is not recognized.\"\n\n  topic_flag_types:\n    spam:\n      title: \"Spam\"\n      description: \"This topic is an advertisement. It is not useful or relevant to this site, but promotional in nature.\"\n      long_form: \"flagged this as spam\"\n      short_description: \"This is an advertisement\"\n    inappropriate:\n      title: \"Inappropriate\"\n      description: 'This topic contains content that a reasonable person would consider offensive, abusive, or a violation of <a href=\"%{base_path}/guidelines\">our community guidelines</a>.'\n      long_form: \"flagged this as inappropriate\"\n      short_description: 'A violation of <a href=\"%{base_path}/guidelines\">our community guidelines</a>'\n    notify_moderators:\n      title: \"Something Else\"\n      description: 'This topic requires general staff attention based on the <a href=\"%{base_path}/guidelines\">guidelines</a>, <a href=\"%{tos_url}\">TOS</a>, or for another reason not listed above.'\n      long_form: \"flagged this for moderator attention\"\n      short_description: \"Requires staff attention for another reason\"\n      email_title: 'The topic \"%{title}\" requires moderator attention'\n      email_body: \"%{link}\\n\\n%{message}\"\n\n  flagging:\n    you_must_edit: '<p>Your post was flagged by the community. Please <a href=\"%{path}\">see your messages</a>.</p>'\n    user_must_edit: \"<p>This post was flagged by the community and is temporarily hidden.</p>\"\n\n  ignored:\n    hidden_content: \"<p>Ignored content</p>\"\n\n  archetypes:\n    regular:\n      title: \"Regular Topic\"\n    banner:\n      title: \"Banner Topic\"\n      message:\n        make: \"This topic is now a banner. It will appear at the top of every page until it is dismissed by the user.\"\n        remove: \"This topic is no longer a banner. It will no longer appear at the top of every page.\"\n\n  unsubscribed:\n    title: \"Email preferences updated!\"\n    description: \"Email preferences for <b>%{email}</b> were updated. To change your email settings <a href='%{url}'>visit your user preferences</a>.\"\n    topic_description: \"To re-subscribe to %{link}, use the notification control at the bottom or right of the topic.\"\n    private_topic_description: \"To re-subscribe, use the notification control at the bottom or right of the topic.\"\n\n  uploads:\n    marked_insecure_from_theme_component_reason: \"upload used in theme component\"\n\n  unsubscribe:\n    title: \"Unsubscribe\"\n    stop_watching_topic: \"Stop watching this topic, %{link}\"\n    mute_topic: \"Mute all notifications for this topic, %{link}\"\n    unwatch_category: \"Stop watching all topics in %{category}\"\n    mailing_list_mode: \"Turn off mailing list mode\"\n    all: \"Don\u2019t send me any mail from %{sitename}\"\n    different_user_description: \"You are currently logged in as a different user than the one we emailed. Please log out, or enter anonymous mode, and try again.\"\n    not_found_description: Sorry, we couldn't find that subscription. It's possible the link in your email is too old and has expired?\"\n    user_not_found_description: \"Sorry, we couldn't find a user for this subscription. You are probably attempting to unsubscribe an account that no longer exists.\"\n    log_out: \"Log Out\"\n    submit: \"Save preferences\"\n    digest_frequency:\n      title: \"You are receiving summary emails %{frequency}\"\n      never_title: \"You are not receiving summary emails\"\n      select_title: \"Set summary emails frequency to:\"\n\n      never: \"never\"\n      every_30_minutes: \"every 30 minutes\"\n      every_hour: \"hourly\"\n      daily: \"daily\"\n      weekly: \"weekly\"\n      every_month: \"every month\"\n      every_six_months: \"every six months\"\n\n  user_api_key:\n    title: \"Authorize application access\"\n    authorize: \"Authorize\"\n    read: \"read\"\n    read_write: \"read/write\"\n    description: '\"%{application_name}\" is requesting the following access to your account:'\n    instructions: 'We just generated a new user API key for you to use with \"%{application_name}\", please paste the following key into your application:'\n    otp_description: 'Would you like to allow \"%{application_name}\" to access this site?'\n    otp_confirmation:\n      confirm_title: Continue to %{site_name}\n      logging_in_as: Logging in as %{username}\n      confirm_button: Finish Login\n    no_trust_level: \"Sorry, you do not have the required trust level to access the user API\"\n    generic_error: \"Sorry, we are unable to issue user API keys, this feature may be disabled by the site admin\"\n    scopes:\n      message_bus: \"Live updates\"\n      notifications: \"Read and clear notifications\"\n      push: \"Push notifications to external services\"\n      session_info: \"Read user session info\"\n      read: \"Read all\"\n      write: \"Write all\"\n      one_time_password: \"Create a one-time login token\"\n      bookmarks_calendar: \"Read bookmark reminders\"\n    invalid_public_key: \"Sorry, the public key is invalid.\"\n    invalid_auth_redirect: \"Sorry, this auth_redirect host is not allowed.\"\n    invalid_token: \"Missing, invalid or expired token.\"\n  flags:\n    errors:\n      already_handled: \"Flag was already handled\"\n  reports:\n    default:\n      labels:\n        count: Count\n        percent: Percent\n        day: Day\n    post_edits:\n      title: \"Post Edits\"\n      labels:\n        edited_at: Date\n        post: Post\n        editor: Editor\n        author: Author\n        edit_reason: Reason\n      description: \"Number of new post edits.\"\n    user_flagging_ratio:\n      title: \"User Flagging Ratio\"\n      labels:\n        user: User\n        agreed_flags: Agreed flags\n        disagreed_flags: Disagreed flags\n        ignored_flags: Ignored flags\n        score: Score\n      description: \"List of users ordered by ratio of staff response to their flags (disagreed to agreed).\"\n    moderators_activity:\n      title: \"Moderator Activity\"\n      labels:\n        moderator: Moderator\n        flag_count: Flags reviewed\n        time_read: Time reading\n        topic_count: Topics created\n        post_count: Posts created\n        pm_count: PMs created\n        revision_count: Revisions\n      description: List of moderator activity including flags reviewed, reading time, topics created, posts created, personal messages created, and revisions.\n    flags_status:\n      title: \"Flags Status\"\n      values:\n        agreed: Agreed\n        disagreed: Disagreed\n        deferred: Deferred\n        no_action: No action\n      labels:\n        flag: Type\n        assigned: Assigned\n        poster: Poster\n        flagger: Flagger\n        time_to_resolution: Resolution time\n      description: \"List of flags' statuses including type of flag, poster, flagger, and time to resolution.\"\n    visits:\n      title: \"User Visits\"\n      xaxis: \"Day\"\n      yaxis: \"Number of visits\"\n      description: \"Number of all user visits.\"\n    signups:\n      title: \"Signups\"\n      xaxis: \"Day\"\n      yaxis: \"Number of signups\"\n      description: \"New account registrations for this period.\"\n    new_contributors:\n      title: \"New Contributors\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new contributors\"\n      description: \"Number of users who made their first post during this period.\"\n    trust_level_growth:\n      title: \"Trust Level growth\"\n      xaxis:\n        tl1_reached: \"Reached TL1\"\n        tl2_reached: \"Reached TL2\"\n        tl3_reached: \"Reached TL3\"\n        tl4_reached: \"Reached TL4\"\n      yaxis: \"Day\"\n      description: \"Number of users who increased their Trust Level during this period.\"\n    consolidated_page_views:\n      title: \"Consolidated Pageviews\"\n      xaxis:\n        page_view_crawler: \"Crawlers\"\n        page_view_anon: \"Anonymous users\"\n        page_view_logged_in: \"Logged in users\"\n      yaxis: \"Day\"\n      description: \"Pageviews for logged in users, anonymous users and crawlers.\"\n      labels:\n        post: Post\n        editor: Editor\n        author: Author\n        edit_reason: Reason\n    consolidated_api_requests:\n      title: \"Consolidated API Requests\"\n      xaxis:\n        api: \"API\"\n        user_api: \"User API\"\n      yaxis: \"Day\"\n      description: \"API requests for regular API keys and user API keys.\"\n    dau_by_mau:\n      title: \"DAU/MAU\"\n      xaxis: \"Day\"\n      yaxis: \"DAU/MAU\"\n      description: \"Number of members that logged in in the last day divided by number of members that logged in in the last month \u2013 returns a % which indicates community 'stickiness'. Aim for >30%.\"\n    daily_engaged_users:\n      title: \"Daily Engaged Users\"\n      xaxis: \"Day\"\n      yaxis: \"Engaged Users\"\n      description: \"Number of users that have liked or posted in the last day.\"\n    profile_views:\n      title: \"User Profile Views\"\n      xaxis: \"Day\"\n      yaxis: \"Number of user profiles viewed\"\n      description: \"Total new views of user profiles.\"\n    topics:\n      title: \"Topics\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new topics\"\n      description: \"New topics created during this period.\"\n    posts:\n      title: \"Posts\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new posts\"\n      description: \"New posts created during this period\"\n    likes:\n      title: \"Likes\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new likes\"\n      description: \"Number of new likes.\"\n    flags:\n      title: \"Flags\"\n      xaxis: \"Day\"\n      yaxis: \"Number of flags\"\n      description: \"Number of new flags.\"\n    bookmarks:\n      title: \"Bookmarks\"\n      xaxis: \"Day\"\n      yaxis: \"Number of new bookmarks\"\n      description: \"Number of new topics and posts bookmarked.\"\n    users_by_trust_level:\n      title: \"Users per Trust Level\"\n      xaxis: \"Trust Level\"\n      yaxis: \"Number of Users\"\n      labels:\n        level: Level\n      description: \"Number of users grouped by trust level.\"\n      description_link: \"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\"\n    users_by_type:\n      title: \"Users per Type\"\n      xaxis: \"Type\"\n      yaxis: \"Number of Users\"\n      labels:\n        type: Type\n      xaxis_labels:\n        admin: Admin\n        moderator: Moderator\n        suspended: Suspended\n        silenced: Silenced\n      description: \"Number of users grouped by admin, moderator, suspended, and silenced.\"\n    trending_search:\n      title: Trending Search Terms\n      labels:\n        term: Term\n        searches: Searches\n        click_through: CTR\n      description: \"Most popular search terms with their click-through rates.\"\n    emails:\n      title: \"Emails Sent\"\n      xaxis: \"Day\"\n      yaxis: \"Number of Emails\"\n      description: \"Number of new emails sent.\"\n    user_to_user_private_messages:\n      title: \"User-to-User (excluding replies)\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of newly initiated personal messages.\"\n    user_to_user_private_messages_with_replies:\n      title: \"User-to-User (with replies)\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of all new personal messages and responses.\"\n    system_private_messages:\n      title: \"System\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of personal messages sent automatically by the System.\"\n    moderator_warning_private_messages:\n      title: \"Moderator Warning\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of warnings sent by personal messages from moderators.\"\n    notify_moderators_private_messages:\n      title: \"Notify Moderators\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of times moderators have been privately notified by a flag.\"\n    notify_user_private_messages:\n      title: \"Notify User\"\n      xaxis: \"Day\"\n      yaxis: \"Number of messages\"\n      description: \"Number of times users have been privately notified by a flag.\"\n    top_referrers:\n      title: \"Top Referrers\"\n      xaxis: \"User\"\n      num_clicks: \"Clicks\"\n      num_topics: \"Topics\"\n      labels:\n        user: \"User\"\n        num_clicks: \"Clicks\"\n        num_topics: \"Topics\"\n      description: \"Users listed by number of clicks on links they have shared.\"\n    top_traffic_sources:\n      title: \"Top Traffic Sources\"\n      xaxis: \"Domain\"\n      num_clicks: \"Clicks\"\n      num_topics: \"Topics\"\n      num_users: \"Users\"\n      labels:\n        domain: Domain\n        num_clicks: Clicks\n        num_topics: Topics\n      description: \"External sources that have linked to this site the most.\"\n    top_referred_topics:\n      title: \"Top Referred Topics\"\n      labels:\n        num_clicks: \"Clicks\"\n        topic: \"Topic\"\n      description: \"Topics that have received the most clicks from external sources.\"\n    page_view_anon_reqs:\n      title: \"Anonymous\"\n      xaxis: \"Day\"\n      yaxis: \"Anonymous Pageviews\"\n      description: \"Number of new pageviews by visitors not logged in to an account.\"\n    page_view_logged_in_reqs:\n      title: \"Logged In\"\n      xaxis: \"Day\"\n      yaxis: \"Logged In Pageviews\"\n      description: \"Number of new pageviews from logged in users.\"\n    page_view_crawler_reqs:\n      title: \"Web Crawler Pageviews\"\n      xaxis: \"Day\"\n      yaxis: \"Web Crawler Pageviews\"\n      description: \"Total pageviews from web crawlers over time.\"\n    page_view_total_reqs:\n      title: \"Pageviews\"\n      xaxis: \"Day\"\n      yaxis: \"Total Pageviews\"\n      description: \"Number of new pageviews from all visitors.\"\n    page_view_logged_in_mobile_reqs:\n      title: \"Logged In Pageviews\"\n      xaxis: \"Day\"\n      yaxis: \"Mobile Logged In Pageviews\"\n      description: \"Number of new pageviews from users on mobile devices and logged in to an account.\"\n    page_view_anon_mobile_reqs:\n      title: \"Anon Pageviews\"\n      xaxis: \"Day\"\n      yaxis: \"Mobile Anon Pageviews\"\n      description: \"Number of new pageviews from visitors on a mobile device who are not logged in.\"\n    http_background_reqs:\n      title: \"Background\"\n      xaxis: \"Day\"\n      yaxis: \"Requests used for live update and tracking\"\n    http_2xx_reqs:\n      title: \"Status 2xx (OK)\"\n      xaxis: \"Day\"\n      yaxis: \"Successful requests (Status 2xx)\"\n    http_3xx_reqs:\n      title: \"HTTP 3xx (Redirect)\"\n      xaxis: \"Day\"\n      yaxis: \"Redirect requests (Status 3xx)\"\n    http_4xx_reqs:\n      title: \"HTTP 4xx (Client Error)\"\n      xaxis: \"Day\"\n      yaxis: \"Client Errors (Status 4xx)\"\n    http_5xx_reqs:\n      title: \"HTTP 5xx (Server Error)\"\n      xaxis: \"Day\"\n      yaxis: \"Server Errors (Status 5xx)\"\n    http_total_reqs:\n      title: \"Total\"\n      xaxis: \"Day\"\n      yaxis: \"Total requests\"\n    time_to_first_response:\n      title: \"Time to first response\"\n      xaxis: \"Day\"\n      yaxis: \"Average time (hours)\"\n      description: \"Average time (in hours) of the first response to new topics.\"\n    topics_with_no_response:\n      title: \"Topics with no response\"\n      xaxis: \"Day\"\n      yaxis: \"Total\"\n      description: \"Number of new topics created that did not receive a response.\"\n    mobile_visits:\n      title: \"User Visits (mobile)\"\n      xaxis: \"Day\"\n      yaxis: \"Number of visits\"\n      description: \"Number of unique users who visited using a mobile device.\"\n    web_crawlers:\n      title: \"Web Crawler User Agents\"\n      labels:\n        user_agent: \"User Agent\"\n        page_views: \"Pageviews\"\n      description: \"List of web crawler user agents, sorted by pageviews.\"\n    suspicious_logins:\n      title: \"Suspicious Logins\"\n      labels:\n        user: User\n        client_ip: Client IP\n        location: Location\n        browser: Browser\n        device: Device\n        os: Operating System\n        login_time: Login Time\n      description: \"Details of new logins that differ suspiciously from previous logins.\"\n    staff_logins:\n      title: \"Admin Logins\"\n      labels:\n        user: User\n        location: Location\n        login_at: Login at\n      description: \"List of admin login times with locations.\"\n    top_uploads:\n      title: \"Top Uploads\"\n      labels:\n        filename: Filename\n        extension: Extension\n        author: Author\n        filesize: File size\n      description: \"List all uploads by extension, filesize and author.\"\n    top_ignored_users:\n      title: \"Top Ignored / Muted Users\"\n      labels:\n        ignored_user: Ignored User\n        ignores_count: Ignores count\n        mutes_count: Mutes count\n      description: \"Users who have been muted and/or ignored by many other users.\"\n    top_users_by_likes_received:\n      title: \"Top Users by likes received\"\n      labels:\n        user: User\n        qtt_like: Likes Received\n      description: \"Top 10 users who have received likes.\"\n    top_users_by_likes_received_from_inferior_trust_level:\n      title: \"Top Users by likes received from a user with a lower trust level\"\n      labels:\n        user: User\n        trust_level: Trust level\n        qtt_like: Likes Received\n      description: \"Top 10 users in a higher trust level being liked by people in a lower trust level.\"\n    top_users_by_likes_received_from_a_variety_of_people:\n      title: \"Top Users by likes received from a variety of people\"\n      labels:\n        user: User\n        qtt_like: Likes Received\n      description: \"Top 10 users who have had likes from a wide range of people.\"\n\n  dashboard:\n    group_email_credentials_warning: 'There was an issue with the email credentials for the group <a href=\"%{base_path}/g/%{group_name}/manage/email\">%{group_full_name}</a>. No emails will send from the group inbox until this problem is addressed. %{error}'\n    rails_env_warning: \"Your server is running in %{env} mode.\"\n    host_names_warning: \"Your config/database.yml file is using the default localhost hostname. Update it to use your site's hostname.\"\n    sidekiq_warning: 'Sidekiq is not running. Many tasks, like sending emails, are executed asynchronously by Sidekiq. Please ensure at least one Sidekiq process is running. <a href=\"https://github.com/mperham/sidekiq\" target=\"_blank\">Learn about Sidekiq here</a>.'\n    queue_size_warning: \"The number of queued jobs is %{queue_size}, which is high. This could indicate a problem with the Sidekiq process(es), or you may need to add more Sidekiq workers.\"\n    memory_warning: \"Your server is running with less than 1 GB of total memory. At least 1 GB of memory is recommended.\"\n    google_oauth2_config_warning: 'The server is configured to allow signup and login with Google OAuth2 (enable_google_oauth2_logins), but the client id and client secret values are not set. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/configuring-google-login-for-discourse/15858\" target=\"_blank\">See this guide to learn more</a>.'\n    facebook_config_warning: 'The server is configured to allow signup and login with Facebook (enable_facebook_logins), but the app id and app secret values are not set. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/configuring-facebook-login-for-discourse/13394\" target=\"_blank\">See this guide to learn more</a>.'\n    twitter_config_warning: 'The server is configured to allow signup and login with Twitter (enable_twitter_logins), but the key and secret values are not set. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/configuring-twitter-login-for-discourse/13395\" target=\"_blank\">See this guide to learn more</a>.'\n    github_config_warning: 'The server is configured to allow signup and login with GitHub (enable_github_logins), but the client id and secret values are not set. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/configuring-github-login-for-discourse/13745\" target=\"_blank\">See this guide to learn more</a>.'\n    s3_config_warning: 'The server is configured to upload files to S3, but at least one the following setting is not set: s3_access_key_id, s3_secret_access_key, s3_use_iam_profile, or s3_upload_bucket. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/how-to-set-up-image-uploads-to-s3/7229\" target=\"_blank\">See \"How to set up image uploads to S3?\" to learn more</a>.'\n    s3_backup_config_warning: 'The server is configured to upload backups to S3, but at least one the following setting is not set: s3_access_key_id, s3_secret_access_key, s3_use_iam_profile, or s3_backup_bucket. Go to <a href=\"%{base_path}/admin/site_settings\">the Site Settings</a> and update the settings. <a href=\"https://meta.discourse.org/t/how-to-set-up-image-uploads-to-s3/7229\" target=\"_blank\">See \"How to set up image uploads to S3?\" to learn more</a>.'\n    s3_cdn_warning: 'The server is configured to upload files to S3, but there is no S3 CDN configured. This can lead to expensive S3 costs and slower site performance. <a href=\"https://meta.discourse.org/t/-/148916\" target=\"_blank\">See \"Using Object Storage for Uploads\" to learn more</a>.'\n    image_magick_warning: 'The server is configured to create thumbnails of large images, but ImageMagick is not installed. Install ImageMagick using your favorite package manager or <a href=\"https://www.imagemagick.org/script/download.php\" target=\"_blank\">download the latest release</a>.'\n    failing_emails_warning: 'There are %{num_failed_jobs} email jobs that failed. Check your app.yml and ensure that the mail server settings are correct. <a href=\"%{base_path}/sidekiq/retries\" target=\"_blank\">See the failed jobs in Sidekiq</a>.'\n    subfolder_ends_in_slash: \"Your subfolder setup is incorrect; the DISCOURSE_RELATIVE_URL_ROOT ends in a slash.\"\n    email_polling_errored_recently:\n      one: \"Email polling has generated an error in the past 24 hours. Look at <a href='%{base_path}/logs' target='_blank'>the logs</a> for more details.\"\n      other: \"Email polling has generated %{count} errors in the past 24 hours. Look at <a href='%{base_path}/logs' target='_blank'>the logs</a> for more details.\"\n    missing_mailgun_api_key: \"The server is configured to send emails via Mailgun but you haven't provided an API key used to verify the webhook messages.\"\n    bad_favicon_url: \"The favicon is failing to load. Check your favicon setting in <a href='%{base_path}/admin/site_settings'>Site Settings</a>.\"\n    poll_pop3_timeout: \"Connection to the POP3 server is timing out. Incoming email could not be retrieved. Please check your <a href='%{base_path}/admin/site_settings/category/email'>POP3 settings</a> and service provider.\"\n    poll_pop3_auth_error: \"Connection to the POP3 server is failing with an authentication error. Please check your <a href='%{base_path}/admin/site_settings/category/email'>POP3 settings</a>.\"\n    force_https_warning: \"Your website is using SSL. But `<a href='%{base_path}/admin/site_settings/category/all_results?filter=force_https'>force_https</a>` is not yet enabled in your site settings.\"\n    out_of_date_themes: \"Updates are available for the following themes:\"\n    unreachable_themes: \"We were unable to check for updates on the following themes:\"\n    watched_word_regexp_error: \"The regular expression for '%{action}' watched words is invalid. Please check your <a href='%{base_path}/admin/customize/watched_words'>Watched Word settings</a>, or disable the 'watched words regular expressions' site setting.\"\n\n  site_settings:\n    allow_bulk_invite: \"Allow bulk invites by uploading a CSV file\"\n    disabled: \"disabled\"\n    display_local_time_in_user_card: \"Display the local time based on a user's timezone when their user card is opened.\"\n    censored_words: \"Words that will be automatically replaced with &#9632;&#9632;&#9632;&#9632;\"\n    delete_old_hidden_posts: \"Auto-delete any hidden posts that stay hidden for more than 30 days.\"\n    default_locale: \"The default language of this Discourse instance. You can replace the text of system generated categories and topics at <a href='%{base_path}/admin/customize/site_texts' target='_blank'>Customize / Text</a>.\"\n    allow_user_locale: \"Allow users to choose their own language interface preference\"\n    set_locale_from_accept_language_header: \"set interface language for anonymous users from their web browser's language headers\"\n    support_mixed_text_direction: \"Support mixed left-to-right and right-to-left text directions.\"\n    min_post_length: \"Minimum allowed post length in characters\"\n    min_first_post_length: \"Minimum allowed first post (topic body) length in characters\"\n    min_personal_message_post_length: \"Minimum allowed post length in characters for messages\"\n    max_post_length: \"Maximum allowed post length in characters\"\n    topic_featured_link_enabled: \"Enable posting a link with topics.\"\n    show_topic_featured_link_in_digest: \"Show the topic featured link in the digest email.\"\n    min_topic_views_for_delete_confirm: \"Minimum amount of views a topic must have for a confirmation popup to appear when it gets deleted\"\n    min_topic_title_length: \"Minimum allowed topic title length in characters\"\n    max_topic_title_length: \"Maximum allowed topic title length in characters\"\n    min_personal_message_title_length: \"Minimum allowed title length for a message in characters\"\n    max_emojis_in_title: \"Maximum allowed emojis in topic title\"\n    min_search_term_length: \"Minimum valid search term length in characters\"\n    search_tokenize_chinese: \"Force search to tokenize Chinese even on non Chinese sites\"\n    search_tokenize_japanese: \"Force search to tokenize Japanese even on non Japanese sites\"\n    search_prefer_recent_posts: \"If searching your large forum is slow, this option tries an index of more recent posts first\"\n    search_recent_posts_size: \"How many recent posts to keep in the index\"\n    log_search_queries: \"Log search queries performed by users\"\n    search_query_log_max_size: \"Maximum amount of search queries to keep\"\n    search_query_log_max_retention_days: \"Maximum amount of time to keep search queries, in days.\"\n    search_ignore_accents: \"Ignore accents when searching for text.\"\n    category_search_priority_low_weight: \"Weight applied to ranking for low category search priority.\"\n    category_search_priority_high_weight: \"Weight applied to ranking for high category search priority.\"\n    default_composer_category: \"The category used to pre-populate the category dropdown when creating a new topic.\"\n    allow_uncategorized_topics: \"Allow topics to be created without a category. WARNING: If there are any uncategorized topics, you must recategorize them before turning this off.\"\n    allow_duplicate_topic_titles: \"Allow topics with identical, duplicate titles.\"\n    allow_duplicate_topic_titles_category: \"Allow topics with identical, duplicate titles if the category is different. allow_duplicate_topic_titles must be disabled.\"\n    unique_posts_mins: \"How many minutes before a user can make a post with the same content again\"\n    educate_until_posts: \"When the user starts typing their first (n) new posts, show the pop-up new user education panel in the composer.\"\n    title: \"The name of this site, as used in the title tag.\"\n    site_description: \"Describe this site in one sentence, as used in the meta description tag.\"\n    short_site_description: \"Short description, as used in the title tag on homepage.\"\n    contact_email: \"Email address of key contact responsible for this site. Used for critical notifications, and also displayed on <a href='%{base_path}/about' target='_blank'>/about</a> for urgent matters.\"\n    contact_url: \"Contact URL for this site. Displayed on the <a href='%{base_path}/about' target='_blank'>/about</a> page for urgent matters.\"\n    crawl_images: \"Retrieve images from remote URLs to insert the correct width and height dimensions.\"\n    download_remote_images_to_local: \"Convert remote (hotlinked) images to local images by downloading them; This preserves content even if the images are removed from the remote site in future.\"\n    download_remote_images_threshold: \"Minimum disk space necessary to download remote images locally (in percent)\"\n    disabled_image_download_domains: \"Remote images will never be downloaded from these domains. Pipe-delimited list.\"\n    block_hotlinked_media: \"Prevent users from introducing remote (hotlinked) media in their posts. Remote media which is not downloaded via 'download_remote_images_to_local' will be replaced with a placeholder link.\"\n    block_hotlinked_media_exceptions: \"A list of base URLs which are exempt from the block_hotlinked_media setting. Include the protocol (e.g. https://example.com).\"\n    editing_grace_period: \"For (n) seconds after posting, editing will not create a new version in the post history.\"\n    editing_grace_period_max_diff: \"Maximum number of character changes allowed in editing grace period, if more changed store another post revision (trust level 0 and 1)\"\n    editing_grace_period_max_diff_high_trust: \"Maximum number of character changes allowed in editing grace period, if more changed store another post revision (trust level 2 and up)\"\n    staff_edit_locks_post: \"Posts will be locked from editing if they are edited by staff members\"\n    post_edit_time_limit: \"A tl0 or tl1 author can edit their post for (n) minutes after posting. Set to 0 for forever.\"\n    tl2_post_edit_time_limit: \"A tl2+ author can edit their post for (n) minutes after posting. Set to 0 for forever.\"\n    edit_history_visible_to_public: \"Allow everyone to see previous versions of an edited post. When disabled, only staff members can view.\"\n    delete_removed_posts_after: \"Posts removed by the author will be automatically deleted after (n) hours. If set to 0, posts will be deleted immediately.\"\n    notify_users_after_responses_deleted_on_flagged_post: \"When a post is flagged and then removed, all users that responded to the post and had their responses removed will be notified.\"\n    max_image_width: \"Maximum thumbnail width of images in a post\"\n    max_image_height: \"Maximum thumbnail height of images in a post\"\n    responsive_post_image_sizes: \"Resize lightbox preview images to allow for high DPI screens of the following pixel ratios. Remove all values to disable responsive images.\"\n    fixed_category_positions: \"If checked, you will be able to arrange categories into a fixed order. If unchecked, categories are listed in order of activity.\"\n    fixed_category_positions_on_create: \"If checked, category ordering will be maintained on topic creation dialog (requires fixed_category_positions).\"\n    add_rel_nofollow_to_user_content: 'Add rel nofollow to all submitted user content, except for internal links (including parent domains). If you change this, you must rebake all posts with: \"rake posts:rebake\"'\n    exclude_rel_nofollow_domains: \"A list of domains where nofollow should not be added to links. example.com will automatically allow sub.example.com as well. As a minimum, you should add the domain of this site to help web crawlers find all content. If other parts of your website are at other domains, add those too.\"\n\n    post_excerpt_maxlength: \"Maximum length of a post excerpt / summary.\"\n    topic_excerpt_maxlength: \"Maximum length of a topic excerpt / summary, generated from the first post in a topic.\"\n    show_pinned_excerpt_mobile: \"Show excerpt on pinned topics in mobile view.\"\n    show_pinned_excerpt_desktop: \"Show excerpt on pinned topics in desktop view.\"\n    post_onebox_maxlength: \"Maximum length of a oneboxed Discourse post in characters.\"\n    blocked_onebox_domains: \"A list of domains that will never be oneboxed e.g. wikipedia.org\\n(Wildcard symbols * ? not supported)\"\n    block_onebox_on_redirect: \"Block onebox for URLs that redirect.\"\n    allowed_inline_onebox_domains: \"A list of domains that will be oneboxed in miniature form if linked without a title\"\n    enable_inline_onebox_on_all_domains: \"Ignore inline_onebox_domain_allowlist site setting and allow inline onebox on all domains.\"\n    force_custom_user_agent_hosts: \"Hosts for which to use the custom onebox user agent on all requests. (Especially useful for hosts that limit access by user agent).\"\n    max_oneboxes_per_post: \"Maximum number of oneboxes in a post.\"\n    facebook_app_access_token: \"A token generated from your Facebook app ID and secret. Used to generate Instagram oneboxes.\"\n\n    logo: \"The logo image at the top left of your site. Use a wide rectangular image with a height of 120 and an aspect ratio greater than 3:1. If left blank, the site title text will be shown.\"\n    logo_small: \"The small logo image at the top left of your site, seen when scrolling down. Use a square 120 \u00d7 120 image. If left blank, a home glyph will be shown.\"\n    digest_logo: \"The alternate logo image used at the top of your site's email summary. Use a wide rectangle image. Don't use an SVG image. If left blank, the image from the `logo` setting will be used.\"\n    mobile_logo: \"The logo used on mobile version of your site. Use a wide rectangular image with a height of 120 and an aspect ratio greater than 3:1. If left blank, the image from the `logo` setting will be used.\"\n    logo_dark: \"Dark scheme alternative for the 'logo' site setting.\"\n    logo_small_dark: \"Dark scheme alternative for the 'logo small' site setting.\"\n    mobile_logo_dark: \"Dark scheme alternative for the 'mobile logo' site setting.\"\n    large_icon: \"Image used as the base for other metadata icons. Should ideally be larger than 512 x 512. If left blank, logo_small will be used.\"\n    manifest_icon: \"Image used as logo/splash image on Android. Will be automatically resized to 512 \u00d7 512. If left blank, large_icon will be used.\"\n    manifest_screenshots: \"Screenshots that showcase your instance features and functionality on its install prompt page. All images should be local uploads and of the same dimensions.\"\n    favicon: \"A favicon for your site, see <a href='https://en.wikipedia.org/wiki/Favicon' target='_blank'>https://en.wikipedia.org/wiki/Favicon</a>. To work correctly over a CDN it must be a png. Will be resized to 32x32. If left blank, large_icon will be used.\"\n    apple_touch_icon: \"Icon used for Apple touch devices. Will be automatically resized to 180x180. If left blank, large_icon will be used.\"\n    opengraph_image: \"Default opengraph image, used when the page has no other suitable image. If left blank, large_icon will be used\"\n    twitter_summary_large_image: \"Twitter card 'summary large image' (should be at least 280 in width, and at least 150 in height, cannot be .svg). If left blank, regular card metadata is generated using the opengraph_image, as long as that is not also a .svg\"\n\n    notification_email: \"The from: email address used when sending all essential system emails. The domain specified here must have SPF, DKIM and reverse PTR records set correctly for email to arrive.\"\n    email_custom_headers: \"A pipe-delimited list of custom email headers\"\n    email_subject: \"Customizable subject format for standard emails. See <a href='https://meta.discourse.org/t/customize-subject-format-for-standard-emails/20801' target='_blank'>https://meta.discourse.org/t/customize-subject-format-for-standard-emails/20801</a>\"\n    detailed_404: \"Provides more details to users about why they can\u2019t access a particular topic. Note: This is less secure because users will know if a URL links to a valid topic.\"\n    enforce_second_factor: \"Forces users to enable two-factor authentication. Select 'all' to enforce it to all users. Select 'staff' to enforce it to staff users only.\"\n    force_https: \"Force your site to use HTTPS only. WARNING: do NOT enable this until you verify HTTPS is fully set up and working absolutely everywhere! Did you check your CDN, all social logins, and any external logos / dependencies to make sure they are all HTTPS compatible, too?\"\n    same_site_cookies: \"Use same site cookies, they eliminate all Cross Site Request Forgery vectors on supported browsers (Lax or Strict). Warning: Strict will only work on sites that force login and use an external auth method.\"\n\n    summary_score_threshold: \"The minimum score required for a post to be included in 'Summarize This Topic'\"\n    summary_posts_required: \"Minimum posts in a topic before 'Summarize This Topic' is enabled. Changes to this setting will be applied retroactively within a week.\"\n    summary_likes_required: \"Minimum likes in a topic before 'Summarize This Topic' is enabled. Changes to this setting will be applied retroactively within a week.\"\n    summary_percent_filter: \"When a user clicks 'Summarize This Topic', show the top % of posts\"\n    summary_max_results: \"Maximum posts returned by 'Summarize This Topic'\"\n    summary_timeline_button: \"Show a 'Summarize' button in the timeline\"\n\n    enable_personal_messages: \"DEPRECATED, use the 'personal message enabled groups' setting instead. Allow trust level 1 (configurable via min trust to send messages) users to create messages and reply to messages. Note that staff can always send messages no matter what.\"\n    personal_message_enabled_groups: \"Allow users within these groups to create messages and reply to messages. Trust level groups include all trust levels above that number, for example choosing trust_level_1 also allows trust_level_2, 3, 4 users to send PMs. Note that staff can always send messages no matter what.\"\n    enable_system_message_replies: \"Allows users to reply to system messages, even if personal messages are disabled\"\n    enable_chunked_encoding: \"Enable chunked encoding responses by the server. This feature works on most setups however some proxies may buffer, causing responses to be delayed\"\n    long_polling_base_url: \"Base URL used for long polling (when a CDN is serving dynamic content, be sure to set this to origin pull) eg: http://origin.site.com\"\n    polling_interval: \"When not long polling, how often should logged on clients poll in milliseconds\"\n    anon_polling_interval: \"How often should anonymous clients poll in milliseconds\"\n    background_polling_interval: \"How often should the clients poll in milliseconds (when the window is in the background)\"\n\n    hide_post_sensitivity: \"The likelihood that a flagged post will be hidden\"\n    silence_new_user_sensitivity: \"The likelihood that a new user will be silenced based on spam flags\"\n    auto_close_topic_sensitivity: \"The likelihood that a flagged topic will be automatically closed\"\n\n    cooldown_minutes_after_hiding_posts: \"Number of minutes a user must wait before they can edit a post hidden via community flagging\"\n\n    max_topics_in_first_day: \"The maximum number of topics a user is allowed to create in the 24 hour period after creating their first post\"\n    max_replies_in_first_day: \"The maximum number of replies a user is allowed to create in the 24 hour period after creating their first post\"\n\n    tl2_additional_likes_per_day_multiplier: \"Increase limit of likes per day for tl2 (member) by multiplying with this number\"\n    tl3_additional_likes_per_day_multiplier: \"Increase limit of likes per day for tl3 (regular) by multiplying with this number\"\n    tl4_additional_likes_per_day_multiplier: \"Increase limit of likes per day for tl4 (leader) by multiplying with this number\"\n    tl2_additional_edits_per_day_multiplier: \"Increase limit of edits per day for tl2 (member) by multiplying with this number\"\n    tl3_additional_edits_per_day_multiplier: \"Increase limit of edits per day for tl3 (regular) by multiplying with this number\"\n    tl4_additional_edits_per_day_multiplier: \"Increase limit of edits per day for tl4 (leader) by multiplying with this number\"\n    tl2_additional_flags_per_day_multiplier: \"Increase limit of flags per day for tl2 (member) by multiplying with this number\"\n    tl3_additional_flags_per_day_multiplier: \"Increase limit of flags per day for tl3 (regular) by multiplying with this number\"\n    tl4_additional_flags_per_day_multiplier: \"Increase limit of flags per day for tl4 (leader) by multiplying with this number\"\n\n    num_users_to_silence_new_user: \"If a new user's posts get num_spam_flags_to_silence_new_user spam flags from this many different users, hide all their posts and prevent future posting. 0 to disable.\"\n    num_tl3_flags_to_silence_new_user: \"If a new user's posts get this many flags from num_tl3_users_to_silence_new_user different trust level 3 users, hide all their posts and prevent future posting. 0 to disable.\"\n    num_tl3_users_to_silence_new_user: \"If a new user's posts get num_tl3_flags_to_silence_new_user flags from this many different trust level 3 users, hide all their posts and prevent future posting. 0 to disable.\"\n    notify_mods_when_user_silenced: \"If a user is automatically silenced, send a message to all moderators.\"\n    flag_sockpuppets: \"If a new user replies to a topic from the same IP address as the user who started the topic, flag both of their posts as potential spam.\"\n\n    traditional_markdown_linebreaks: \"Use traditional linebreaks in Markdown, which require two trailing spaces for a linebreak.\"\n    enable_markdown_typographer: \"Use typography rules to improve readability of text: replace straight quotes ' with curly quotes \u2019, (c) (tm) with symbols, -- with emdash \u2013, etc\"\n    enable_markdown_linkify: \"Automatically treat text that looks like a link as a link: www.example.com and https://example.com will be automatically linked\"\n    markdown_linkify_tlds: \"List of top level domains that get automatically treated as links\"\n    markdown_typographer_quotation_marks: \"List of double and single quotes replacement pairs\"\n    post_undo_action_window_mins: \"Number of minutes users are allowed to undo recent actions on a post (like, flag, etc).\"\n    must_approve_users: \"Staff must approve all new user accounts before they are allowed to access the site.\"\n    invite_code: \"User must type this code to be allowed account registration, ignored when empty (case-insensitive)\"\n    approve_suspect_users: \"Add suspicious users to the review queue. Suspicious users have entered a bio/website but have no reading activity.\"\n    review_every_post: \"All posts must be reviewed. WARNING! NOT RECOMMENDED FOR BUSY SITES.\"\n    pending_users_reminder_delay_minutes: \"Notify moderators if new users have been waiting for approval for longer than this many minutes. Set to -1 to disable notifications.\"\n    persistent_sessions: \"Users will remain logged in when the web browser is closed\"\n    maximum_session_age: \"User will remain logged in for n hours since last visit\"\n    ga_version: \"Version of Google Universal Analytics to use: v3 (analytics.js), v4 (gtag)\"\n    ga_universal_tracking_code: \"Google Universal Analytics tracking code ID, eg: UA-12345678-9; see <a href='https://google.com/analytics' target='_blank'>https://google.com/analytics</a>\"\n    ga_universal_domain_name: \"Google Universal Analytics domain name, eg: mysite.com; see <a href='https://google.com/analytics' target='_blank'>https://google.com/analytics</a>\"\n    ga_universal_auto_link_domains: \"Enable Google Universal Analytics cross-domain tracking. Outgoing links to these domains will have the client id added to them. See <a href='https://support.google.com/analytics/answer/1034342?hl=en' target='_blank'>Google's Cross-Domain Tracking guide.</a>\"\n    gtm_container_id: \"Google Tag Manager container id. eg: GTM-ABCDEF. <br/>Note: Third-party scripts loaded by GTM may need to be allowlisted in 'content security policy script src'.\"\n    enable_escaped_fragments: \"Fall back to Google's Ajax-Crawling API if no webcrawler is detected. See <a href='https://developers.google.com/webmasters/ajax-crawling/docs/learn-more' target='_blank'>https://developers.google.com/webmasters/ajax-crawling/docs/learn-more</a>\"\n    moderators_manage_categories_and_groups: \"Allow moderators to create and manage categories and groups\"\n    moderators_change_post_ownership: \"Allow moderators to change post ownership\"\n    cors_origins: \"Allowed origins for cross-origin requests (CORS). Each origin must include http:// or https://. The DISCOURSE_ENABLE_CORS env variable must be set to true to enable CORS.\"\n    use_admin_ip_allowlist: \"Admins can only log in if they are at an IP address defined in the Screened IPs list (Admin > Logs > Screened Ips).\"\n    blocked_ip_blocks: \"A list of private IP blocks that should never be crawled by Discourse\"\n    allowed_internal_hosts: \"A list of internal hosts that discourse can safely crawl for oneboxing and other purposes\"\n    allowed_onebox_iframes: \"A list of iframe src domains which are allowed via Onebox embeds. `*` will allow all default Onebox engines.\"\n    allowed_iframes: \"A list of iframe src domain prefixes that discourse can safely allow in posts\"\n    allowed_crawler_user_agents: \"User agents of web crawlers that should be allowed to access the site. WARNING! SETTING THIS WILL DISALLOW ALL CRAWLERS NOT LISTED HERE!\"\n    blocked_crawler_user_agents: \"Unique case insensitive word in the user agent string identifying web crawlers that should not be allowed to access the site. Does not apply if allowlist is defined.\"\n    slow_down_crawler_user_agents: 'User agents of web crawlers that should be rate limited as configured in the \"slow down crawler rate\" setting. Each value must be at least 3 characters long.'\n    slow_down_crawler_rate: \"If slow_down_crawler_user_agents is specified this rate will apply to all the crawlers (number of seconds delay between requests)\"\n    content_security_policy: \"Enable Content-Security-Policy\"\n    content_security_policy_report_only: \"Enable Content-Security-Policy-Report-Only\"\n    content_security_policy_collect_reports: \"Enable CSP violation report collection at /csp_reports\"\n    content_security_policy_frame_ancestors: \"Restrict who can embed this site in iframes via CSP. Control allowed hosts on <a href='%{base_path}/admin/customize/embedding'>Embedding</a>\"\n    content_security_policy_script_src: \"Additional allowlisted script sources. The current host and CDN are included by default. See <a href='https://meta.discourse.org/t/mitigate-xss-attacks-with-content-security-policy/104243' target='_blank'>Mitigate XSS Attacks with Content Security Policy.</a>\"\n    invalidate_inactive_admin_email_after_days: \"Admin accounts that have not visited the site in this number of days will need to re-validate their email address before logging in. Set to 0 to disable.\"\n    top_menu: \"Determine which items appear in the homepage navigation, and in what order. Example latest|new|unread|categories|top|read|posted|bookmarks\"\n    post_menu: \"Determine which items appear on the post menu, and in what order. Example like|edit|flag|delete|share|bookmark|reply\"\n    post_menu_hidden_items: \"The menu items to hide by default in the post menu unless an expansion ellipsis is clicked on.\"\n    share_links: \"Determine which items appear on the share dialog, and in what order.\"\n    allow_username_in_share_links: \"Allow usernames to be included in share links. This is useful to reward badges based on unique visitors.\"\n    site_contact_username: \"A valid staff username to send all automated messages from. If left blank the default System account will be used.\"\n    site_contact_group_name: \"A valid name of a group that gets invited to all automatically sent private messages.\"\n    send_welcome_message: \"Send all new users a welcome message with a quick start guide.\"\n    send_tl1_welcome_message: \"Send new trust level 1 users a welcome message.\"\n    send_tl2_promotion_message: \"Send new trust level 2 users a message about promotion.\"\n    suppress_reply_directly_below: \"Don't show the expandable reply count on a post when there is only a single reply directly below this post.\"\n    suppress_reply_directly_above: \"Don't show the expandable in-reply-to on a post when there is only a single reply directly above this post.\"\n    remove_full_quote: \"Automatically remove quotation if (a) it appears at the start of a post, (b) it is of an entire post, and (c) it is from the immediately preceding post. For details, see <a href='https://meta.discourse.org/t/removal-of-full-quotes-from-direct-replies/106857' target='_blank'>Removal of full quotes from direct replies</a>\"\n    suppress_reply_when_quoting: \"Don't show the expandable in-reply-to on a post when post quotes reply.\"\n    max_reply_history: \"Maximum number of replies to expand when expanding in-reply-to\"\n    topics_per_period_in_top_summary: \"Number of top topics shown in the default top topics summary.\"\n    topics_per_period_in_top_page: \"Number of top topics shown on the expanded 'Show More' top topics.\"\n    redirect_users_to_top_page: \"Automatically redirect new and long absent users to the top page.\"\n    top_page_default_timeframe: \"Default timeframe for the top page.\"\n    moderators_view_emails: \"Allow moderators to view user emails\"\n    prioritize_username_in_ux: \"Show username first on user page, user card and posts (when disabled name is shown first)\"\n    enable_rich_text_paste: \"Enable automatic HTML to Markdown conversion when pasting text into the composer. (Experimental)\"\n    send_old_credential_reminder_days: \"Remind about old credentials after days\"\n\n    email_token_valid_hours: \"Forgot password / activate account tokens are valid for (n) hours.\"\n\n    enable_badges: \"Enable the badge system\"\n    max_favorite_badges: \"Maximum number of badges that user can select\"\n    enable_whispers: \"Allow staff private communication within topics.\"\n    whispers_allowed_groups: \"Allow private communication within topics for members of specified groups.\"\n\n    allow_index_in_robots_txt: \"Specify in robots.txt that this site is allowed to be indexed by web search engines. In exceptional cases you can permanently <a href='%{base_path}/admin/customize/robots'>override robots.txt</a>.\"\n    blocked_email_domains: \"A pipe-delimited list of email domains that users are not allowed to register accounts with. Example: mailinator.com|trashmail.net\"\n    allowed_email_domains: \"A pipe-delimited list of email domains that users MUST register accounts with. WARNING: Users with email domains other than those listed will not be allowed!\"\n    normalize_emails: \"Check if normalized email is unique. Normalized email removes all dots from the username and everything between + and @ symbols.\"\n    auto_approve_email_domains: \"Users with email addresses from this list of domains will be automatically approved.\"\n    hide_email_address_taken: \"Don't inform users that an account exists with a given email address during signup or during forgot password flow. Require full email for 'forgotten password' requests.\"\n    log_out_strict: \"When logging out, log out ALL sessions for the user on all devices\"\n    version_checks: \"Ping the Discourse Hub for version updates and show new version messages on the <a href='%{base_path}/admin' target='_blank'>/admin</a> dashboard\"\n    new_version_emails: \"Send an email to the contact_email address when a new version of Discourse is available.\"\n\n    invite_expiry_days: \"How long user invitation keys are valid, in days\"\n\n    invite_only: \"All new users must be explicitly invited by trusted users or staff. Public registration is disabled.\"\n\n    login_required: \"Require authentication to read content on this site, disallow anonymous access.\"\n\n    min_username_length: \"Minimum username length in characters. WARNING: if any existing users or groups have names shorter than this, your site will break!\"\n    max_username_length: \"Maximum username length in characters. WARNING: if any existing users or groups have names longer than this, your site will break!\"\n    unicode_usernames: \"Allow usernames and group names to contain Unicode letters and numbers.\"\n    allowed_unicode_username_characters: \"Regular expression to allow only some Unicode characters within usernames. ASCII letters and numbers will always be allowed and don't need to be included in the allowlist.\"\n\n    reserved_usernames: \"Usernames for which signup is not allowed. Wildcard symbol * can be used to match any character zero or more times.\"\n\n    min_password_length: \"Minimum password length.\"\n    min_admin_password_length: \"Minimum password length for Admin.\"\n    password_unique_characters: \"Minimum number of unique characters that a password must have.\"\n    block_common_passwords: \"Don't allow passwords that are in the 10,000 most common passwords.\"\n\n    auth_skip_create_confirm: When signing up via external auth, skip the create account popup. Best used alongside auth_overrides_email, auth_overrides_username and auth_overrides_name.\n    auth_immediately: \"Automatically redirect to the external login system without user interaction. This only takes effect when login_required is true, and there is only one external authentication method\"\n\n    enable_discourse_connect: \"Enable sign on via DiscourseConnect (formerly 'Discourse SSO') (WARNING: USERS' EMAIL ADDRESSES *MUST* BE VALIDATED BY THE EXTERNAL SITE!)\"\n    verbose_discourse_connect_logging: \"Log verbose DiscourseConnect related diagnostics to <a href='%{base_path}/logs' target='_blank'>/logs</a>\"\n    enable_discourse_connect_provider: \"Implement DiscourseConnect (formerly 'Discourse SSO') provider protocol at the /session/sso_provider endpoint, requires discourse_connect_provider_secrets to be set\"\n    discourse_connect_url: \"URL of DiscourseConnect endpoint (must include http:// or https://)\"\n    discourse_connect_secret: \"Secret string used to cryptographically authenticate DiscourseConnect information, be sure it is 10 characters or longer\"\n    discourse_connect_provider_secrets: \"A list of domain-secret pairs that are using DiscourseConnect. Make sure DiscourseConnect secret is 10 characters or longer. Wildcard symbol * can be used to match any domain or only a part of it (e.g. *.example.com).\"\n    discourse_connect_overrides_bio: \"Overrides user bio in user profile and prevents user from changing it\"\n    discourse_connect_overrides_groups: \"Synchronize all manual group membership with groups specified in the groups attribute (WARNING: if you do not specify groups all manual group membership will be cleared for user)\"\n    auth_overrides_email: \"Overrides local email with external site email on every login, and prevent local changes. Applies to all authentication providers. (WARNING: discrepancies can occur due to normalization of local emails)\"\n    auth_overrides_username: \"Overrides local username with external site username on every login, and prevent local changes.  Applies to all authentication providers. (WARNING: discrepancies can occur due to differences in username length/requirements)\"\n    auth_overrides_name: \"Overrides local full name with external site full name on every login, and prevent local changes.  Applies to all authentication providers.\"\n    discourse_connect_overrides_avatar: \"Overrides user avatar with value from DiscourseConnect payload. If enabled, users will not be allowed to upload avatars on Discourse.\"\n    discourse_connect_overrides_location: \"Overrides user location with value from DiscourseConnect payload and prevent local changes.\"\n    discourse_connect_overrides_website: \"Overrides user website with value from DiscourseConnect payload and prevent local changes.\"\n    discourse_connect_overrides_profile_background: \"Overrides user profile background with value from DiscourseConnect payload.\"\n    discourse_connect_overrides_card_background: \"Overrides user card background with value from DiscourseConnect payload.\"\n    discourse_connect_not_approved_url: \"Redirect unapproved DiscourseConnect accounts to this URL\"\n    discourse_connect_allows_all_return_paths: \"Do not restrict the domain for return_paths provided by DiscourseConnect (by default return path must be on current site)\"\n\n    enable_local_logins: \"Enable local username and password login based accounts. WARNING: if disabled, you may be unable to log in if you have not previously configured at least one alternate login method.\"\n    enable_local_logins_via_email: \"Allow users to request a one-click login link to be sent to them via email.\"\n    allow_new_registrations: \"Allow new user registrations. Uncheck this to prevent anyone from creating a new account.\"\n    enable_signup_cta: \"Show a notice to returning anonymous users prompting them to sign up for an account.\"\n\n    enable_google_oauth2_logins: \"Enable Google Oauth2 authentication. This is the method of authentication that Google currently supports. Requires key and secret. See <a href='https://meta.discourse.org/t/15858' target='_blank'>Configuring Google login for Discourse</a>.\"\n    google_oauth2_client_id: \"Client ID of your Google application.\"\n    google_oauth2_client_secret: \"Client secret of your Google application.\"\n    google_oauth2_prompt: \"An optional space-delimited list of string values that specifies whether the authorization server prompts the user for reauthentication and consent. See <a href='https://developers.google.com/identity/protocols/OpenIDConnect#prompt' target='_blank'>https://developers.google.com/identity/protocols/OpenIDConnect#prompt</a> for the possible values.\"\n    google_oauth2_hd: \"An optional Google Apps Hosted domain that the sign-in will be limited to. See <a href='https://developers.google.com/identity/protocols/OpenIDConnect#hd-param' target='_blank'>https://developers.google.com/identity/protocols/OpenIDConnect#hd-param</a> for more details.\"\n    google_oauth2_hd_groups: \"(experimental) Retrieve users' Google groups on the hosted domain on authentication. Retrieved Google groups can be used to grant automatic Discourse group membership (see group settings). For more information see https://meta.discourse.org/t/226850\"\n    google_oauth2_hd_groups_service_account_admin_email: \"An email address belonging to a Google Workspace administrator account. Will be used with the service account credentials to fetch group information.\"\n    google_oauth2_hd_groups_service_account_json: \"JSON formatted key information for the Service Account. Will be used to fetch group information.\"\n\n    enable_twitter_logins: \"Enable Twitter authentication, requires twitter_consumer_key and twitter_consumer_secret. See <a href='https://meta.discourse.org/t/13395' target='_blank'>Configuring Twitter login (and rich embeds) for Discourse</a>.\"\n    twitter_consumer_key: \"Consumer key for Twitter authentication, registered at <a href='https://developer.twitter.com/apps' target='_blank'>https://developer.twitter.com/apps</a>\"\n    twitter_consumer_secret: \"Consumer secret for Twitter authentication, registered at <a href='https://developer.twitter.com/apps' target='_blank'>https://developer.twitter.com/apps</a>\"\n\n    enable_facebook_logins: \"Enable Facebook authentication, requires facebook_app_id and facebook_app_secret. See <a href='https://meta.discourse.org/t/13394' target='_blank'>Configuring Facebook login for Discourse</a>.\"\n    facebook_app_id: \"App id for Facebook authentication and sharing, registered at <a href='https://developers.facebook.com/apps/' target='_blank'>https://developers.facebook.com/apps</a>\"\n    facebook_app_secret: \"App secret for Facebook authentication, registered at <a href='https://developers.facebook.com/apps/' target='_blank'>https://developers.facebook.com/apps</a>\"\n\n    enable_github_logins: \"Enable GitHub authentication, requires github_client_id and github_client_secret. See <a href='https://meta.discourse.org/t/13745' target='_blank'>Configuring GitHub login for Discourse</a>.\"\n    github_client_id: \"Client id for GitHub authentication, registered at <a href='https://github.com/settings/developers/' target='_blank'>https://github.com/settings/developers</a>\"\n    github_client_secret: \"Client secret for GitHub authentication, registered at <a href='https://github.com/settings/developers/' target='_blank'>https://github.com/settings/developers</a>\"\n\n    enable_discord_logins: \"Allow users to authenticate using Discord?\"\n    discord_client_id: 'Discord Client ID (need one? visit <a href=\"https://discordapp.com/developers/applications/me\">the Discord developer portal</a>)'\n    discord_secret: \"Discord Secret Key\"\n    discord_trusted_guilds: 'Only allow members of these Discord guilds to log in via Discord. Use the numeric ID for the guild. For more information, check the instructions <a href=\"https://meta.discourse.org/t/configuring-discord-login-for-discourse/127129\">here</a>. Leave blank to allow any guild.'\n\n    enable_backups: \"Allow administrators to create backups of the forum\"\n    allow_restore: \"Allow restore, which can replace ALL site data! Leave disabled unless you plan to restore a backup\"\n    maximum_backups: \"The maximum amount of backups to keep on disk. Older backups are automatically deleted\"\n    automatic_backups_enabled: \"Run automatic backups as defined in backup frequency\"\n    backup_frequency: \"The number of days between backups.\"\n    s3_backup_bucket: \"The remote bucket to hold backups. WARNING: Make sure it is a private bucket.\"\n    s3_endpoint: \"The endpoint can be modified to backup to an S3 compatible service like DigitalOcean Spaces or Minio. WARNING: Leave blank if using AWS S3.\"\n    s3_configure_tombstone_policy: \"Enable automatic deletion policy for tombstone uploads. IMPORTANT: If disabled, no space will be reclaimed after uploads are deleted.\"\n    s3_disable_cleanup: \"Prevent removal of old backups from S3 when there are more backups than the maximum allowed.\"\n    enable_s3_inventory: \"Generate reports and verify uploads using Amazon S3 inventory. IMPORTANT: requires valid S3 credentials (both access key id & secret access key).\"\n    backup_time_of_day: \"Time of day UTC when the backup should occur.\"\n    backup_with_uploads: \"Include uploads in scheduled backups. Disabling this will only backup the database.\"\n    backup_location: \"Location where backups are stored. IMPORTANT: S3 requires valid S3 credentials entered in Files settings.\"\n    backup_gzip_compression_level_for_uploads: \"Gzip compression level used for compressing uploads.\"\n    include_thumbnails_in_backups: \"Include generated thumbnails in backups. Disabling this will make backups smaller, but requires a rebake of all posts after a restore.\"\n\n    active_user_rate_limit_secs: \"How frequently we update the 'last_seen_at' field, in seconds\"\n    verbose_localization: \"Show extended localization tips in the UI\"\n    previous_visit_timeout_hours: \"How long a visit lasts before we consider it the 'previous' visit, in hours\"\n\n    top_topics_formula_log_views_multiplier: \"value of log views multiplier (n) in top topics formula: `log(views_count) * (n) + op_likes_count * 0.5 + LEAST(likes_count / posts_count, 3) + 10 + log(posts_count)`\"\n    top_topics_formula_first_post_likes_multiplier: \"value of first post likes multiplier (n) in top topics formula: `log(views_count) * 2 + op_likes_count * (n) + LEAST(likes_count / posts_count, 3) + 10 + log(posts_count)`\"\n    top_topics_formula_least_likes_per_post_multiplier: \"value of least likes per post multiplier (n) in top topics formula: `log(views_count) * 2 + op_likes_count * 0.5 + LEAST(likes_count / posts_count, (n)) + 10 + log(posts_count)`\"\n\n    enable_safe_mode: \"Allow users to enter safe mode to debug plugins.\"\n    enable_experimental_sidebar_hamburger: \"Allows experimental sidebar and user hamburger dropdown menu to be enabled.\"\n    enable_sidebar: \"Enables experimental sidebar.\"\n\n    rate_limit_create_topic: \"After creating a topic, users must wait (n) seconds before creating another topic.\"\n    rate_limit_create_post: \"After posting, users must wait (n) seconds before creating another post.\"\n    rate_limit_new_user_create_topic: \"After creating a topic, new users must wait (n) seconds before creating another topic.\"\n    rate_limit_new_user_create_post: \"After posting, new users must wait (n) seconds before creating another post.\"\n\n    max_likes_per_day: \"Maximum number of likes per user per day.\"\n    max_flags_per_day: \"Maximum number of flags per user per day.\"\n    max_bookmarks_per_day: \"Maximum number of bookmarks per user per day.\"\n    max_edits_per_day: \"Maximum number of edits per user per day.\"\n    max_topics_per_day: \"Maximum number of topics a user can create per day.\"\n    max_personal_messages_per_day: \"Maximum number of new personal message topics a user can create per day.\"\n    max_invites_per_day: \"Maximum number of invites a user can send per day.\"\n    max_topic_invitations_per_day: \"Maximum number of topic invitations a user can send per day.\"\n    max_topic_invitations_per_minute: \"Maximum number of topic invitations a user can send per minute.\"\n\n    max_logins_per_ip_per_hour: \"Maximum number of logins allowed per IP address per hour\"\n    max_logins_per_ip_per_minute: \"Maximum number of logins allowed per IP address per minute\"\n\n    max_post_deletions_per_minute: \"Maximum number of posts a user can delete per minute. Set to 0 to disable post deletions.\"\n    max_post_deletions_per_day: \"Maximum number of posts a user can delete per day. Set to 0 to disable post deletions.\"\n\n    invite_link_max_redemptions_limit: \"Maximum redemptions allowed for invite links can't be more than this value.\"\n    invite_link_max_redemptions_limit_users: \"Maximum redemptions allowed for invite links generated by regular users can't be more than this value.\"\n\n    alert_admins_if_errors_per_minute: \"Number of errors per minute in order to trigger an admin alert. A value of 0 disables this feature. NOTE: requires restart.\"\n    alert_admins_if_errors_per_hour: \"Number of errors per hour in order to trigger an admin alert. A value of 0 disables this feature. NOTE: requires restart.\"\n\n    categories_topics: \"Number of topics to show in /categories page. If set to 0, it will automatically try to find a value to keep the two columns symmetrical (categories and topics).\"\n    suggested_topics: \"Number of suggested topics shown at the bottom of a topic.\"\n    limit_suggested_to_category: \"Only show topics from the current category in suggested topics.\"\n    suggested_topics_max_days_old: \"Suggested topics should not be more than n days old.\"\n    suggested_topics_unread_max_days_old: \"Suggested unread topics should not be more than n days old.\"\n\n    clean_up_uploads: \"Remove orphan unreferenced uploads to prevent illegal hosting. WARNING: you may want to back up of your /uploads directory before enabling this setting.\"\n    clean_orphan_uploads_grace_period_hours: \"Grace period (in hours) before an orphan upload is removed.\"\n    purge_deleted_uploads_grace_period_days: \"Grace period (in days) before a deleted upload is erased.\"\n    purge_unactivated_users_grace_period_days: \"Grace period (in days) before a user who has not activated their account is deleted. Set to 0 to never purge unactivated users.\"\n    enable_s3_uploads: \"Place uploads on Amazon S3 storage. IMPORTANT: requires valid S3 credentials (both access key id & secret access key).\"\n    s3_use_iam_profile: 'Use an <a href=\"https://docs.aws.amazon.com/IAM/latest/UserGuide/id_roles_use_switch-role-ec2_instance-profiles.html\">AWS EC2 instance profile</a> to grant access to the S3 bucket. NOTE: enabling this requires Discourse to be running in an appropriately-configured EC2 instance, and overrides the \"s3 access key id\" and \"s3 secret access key\" settings.'\n    s3_upload_bucket: \"The Amazon S3 bucket name that files will be uploaded into. WARNING: must be lowercase, no periods, no underscores.\"\n    s3_access_key_id: \"The Amazon S3 access key id that will be used to upload images, attachments, and backups.\"\n    s3_secret_access_key: \"The Amazon S3 secret access key that will be used to upload images, attachments, and backups.\"\n    s3_region: \"The Amazon S3 region name that will be used to upload images and backups.\"\n    s3_cdn_url: \"The CDN URL to use for all s3 assets (for example: https://cdn.somewhere.com). WARNING: after changing this setting you must rebake all old posts.\"\n\n    avatar_sizes: \"List of automatically generated avatar sizes.\"\n\n    external_system_avatars_enabled: \"Use external system avatars service.\"\n    external_system_avatars_url: \"URL of the external system avatars service. Allowed substitutions are {username} {first_letter} {color} {size}\"\n    external_emoji_url: \"URL of the external service for emoji images. Leave blank to disable.\"\n    use_site_small_logo_as_system_avatar: \"Use the site's small logo instead of the system user's avatar. Requires the logo to be present.\"\n    restrict_letter_avatar_colors: \"A list of 6-digit hexadecimal color values to be used for letter avatar background.\"\n    enable_listing_suspended_users_on_search: \"Enable regular users to find suspended users.\"\n    selectable_avatars_mode: \"Allow users to select an avatar from the selectable_avatars list and limit custom avatar uploads to the selected trust level.\"\n    selectable_avatars: \"List of avatars users can choose from.\"\n\n    allow_all_attachments_for_group_messages: \"Allow all email attachments for group messages.\"\n\n    png_to_jpg_quality: \"Quality of the converted JPG file (1 is lowest quality, 99 is best quality, 100 to disable).\"\n    recompress_original_jpg_quality: \"Quality of uploaded image files (1 is lowest quality, 99 is best quality, 100 to disable).\"\n    image_preview_jpg_quality: \"Quality of resized image files (1 is lowest quality, 99 is best quality, 100 to disable).\"\n\n    allow_staff_to_upload_any_file_in_pm: \"Allow staff members to upload any files in PM.\"\n\n    strip_image_metadata: \"Strip image metadata.\"\n\n    composer_media_optimization_image_enabled: \"Enables client-side media optimization of uploaded image files.\"\n    composer_media_optimization_image_bytes_optimization_threshold: \"Minimum image file size to trigger client-side optimization\"\n    composer_media_optimization_image_resize_dimensions_threshold: \"Minimum image width to trigger client-side resize\"\n    composer_media_optimization_image_resize_width_target: \"Images with widths larger than `composer_media_optimization_image_dimensions_resize_threshold` will be resized to this width. Must be >= than `composer_media_optimization_image_dimensions_resize_threshold`.\"\n    composer_media_optimization_image_encode_quality: \"JPEG encode quality used in the re-encode process.\"\n\n    min_ratio_to_crop: \"Ratio used to crop tall images. Enter the result of width / height.\"\n\n    simultaneous_uploads: \"Maximum number of files that can be dragged & dropped in the composer\"\n\n    default_invitee_trust_level: \"Default trust level (0-4) for invited users.\"\n    default_trust_level: \"Default trust level (0-4) for all new users. WARNING! Changing this will put you at serious risk for spam.\"\n\n    tl1_requires_topics_entered: \"How many topics a new user must enter before promotion to trust level 1.\"\n    tl1_requires_read_posts: \"How many posts a new user must read before promotion to trust level 1.\"\n    tl1_requires_time_spent_mins: \"How many minutes a new user must read posts before promotion to trust level 1.\"\n\n    tl2_requires_topics_entered: \"How many topics a user must enter before promotion to trust level 2.\"\n    tl2_requires_read_posts: \"How many posts a user must read before promotion to trust level 2.\"\n    tl2_requires_time_spent_mins: \"How many minutes a user must read posts before promotion to trust level 2.\"\n    tl2_requires_days_visited: \"How many days a user must visit the site before promotion to trust level 2.\"\n    tl2_requires_likes_received: \"How many likes a user must receive before promotion to trust level 2.\"\n    tl2_requires_likes_given: \"How many likes a user must cast before promotion to trust level 2.\"\n    tl2_requires_topic_reply_count: \"How many topics user must reply to before promotion to trust level 2.\"\n\n    tl3_time_period: \"Trust Level 3 requirements time period (in days)\"\n    tl3_requires_days_visited: \"Minimum number of days that a user needs to have visited the site in the last (tl3 time period) days to qualify for promotion to trust level 3. Set higher than tl3 time period to disable promotions to tl3. (0 or higher)\"\n    tl3_requires_topics_replied_to: \"Minimum number of topics a user needs to have replied to in the last (tl3 time period) days to qualify for promotion to trust level 3. (0 or higher)\"\n    tl3_requires_topics_viewed: \"The percentage of topics created in the last (tl3 time period) days that a user needs to have viewed to qualify for promotion to trust level 3. (0 to 100)\"\n    tl3_requires_topics_viewed_cap: \"The maximum required number of topics viewed in the last (tl3 time period) days.\"\n    tl3_requires_posts_read: \"The percentage of posts created in the last (tl3 time period) days that a user needs to have viewed to qualify for promotion to trust level 3. (0 to 100)\"\n    tl3_requires_posts_read_cap: \"The maximum required number of posts read in the last (tl3 time period) days.\"\n    tl3_requires_topics_viewed_all_time: \"The minimum total number of topics a user must have viewed to qualify for trust level 3.\"\n    tl3_requires_posts_read_all_time: \"The minimum total number of posts a user must have read to qualify for trust level 3.\"\n    tl3_requires_max_flagged: \"User must not have had more than x posts flagged by x different users in the last (tl3 time period) days to qualify for promotion to trust level 3, where x is this setting's value. (0 or higher)\"\n    tl3_promotion_min_duration: \"The minimum number of days that a promotion to trust level 3 lasts before a user can be demoted back to trust level 2.\"\n    tl3_requires_likes_given: \"The minimum number of likes that must be given in the last (tl3 time period) days to qualify for promotion to trust level 3.\"\n    tl3_requires_likes_received: \"The minimum number of likes that must be received in the last (tl3 time period) days to qualify for promotion to trust level 3.\"\n    tl3_links_no_follow: \"Do not remove rel=nofollow from links posted by trust level 3 users.\"\n    trusted_users_can_edit_others: \"Allow users with high trust levels to edit content from other users\"\n\n    min_trust_to_create_topic: \"The minimum trust level required to create a new topic.\"\n    allow_flagging_staff: \"If enabled, users can flag posts from staff accounts.\"\n\n    min_trust_to_edit_wiki_post: \"The minimum trust level required to edit post marked as wiki.\"\n\n    min_trust_to_edit_post: \"The minimum trust level required to edit posts.\"\n\n    min_trust_to_allow_self_wiki: \"The minimum trust level required to make user's own post wiki.\"\n\n    min_trust_to_send_messages: \"DEPRECATED, use the 'personal message enabled groups' setting instead. The minimum trust level required to create new personal messages.\"\n    min_trust_to_send_email_messages: \"The minimum trust level required to send personal messages via email.\"\n    min_trust_to_flag_posts: \"The minimum trust level required to flag posts\"\n    min_trust_to_post_links: \"The minimum trust level required to include links in posts\"\n    min_trust_to_post_embedded_media: \"The minimum trust level required to embed media items in a post\"\n    min_trust_level_to_allow_profile_background: \"The minimum trust level required to upload a profile background\"\n    min_trust_level_to_allow_user_card_background: \"The minimum trust level required to upload a user card background\"\n    min_trust_level_to_allow_invite: \"The minimum trust level required to invite users\"\n    min_trust_level_to_allow_ignore: \"The minimum trust level required to ignore users\"\n    allowed_link_domains: \"Domains that users may link to even if they don't have the appropriate trust level to post links\"\n\n    newuser_max_links: \"How many links a new user can add to a post.\"\n    newuser_max_embedded_media: \"How many embedded media items a new user can add to a post.\"\n    newuser_max_attachments: \"How many attachments a new user can add to a post.\"\n    newuser_max_mentions_per_post: \"Maximum number of @name notifications a new user can use in a post.\"\n    newuser_max_replies_per_topic: \"Maximum number of replies a new user can make in a single topic until someone replies to them.\"\n    max_mentions_per_post: \"Maximum number of @name notifications anyone can use in a post.\"\n    max_users_notified_per_group_mention: \"Maximum number of users that may receive a notification if a group is mentioned (if threshold is met no notifications will be raised)\"\n    enable_mentions: \"Allow users to mention other users.\"\n    here_mention: \"Name used for a @mention to allow privileged users to notify up to 'max_here_mentioned' people participating in the topic. Must not be an existing username.\"\n    max_here_mentioned: \"Maximum number of mentioned people by @here.\"\n    min_trust_level_for_here_mention: \"The minimum trust level allowed to mention @here.\"\n\n    create_thumbnails: \"Create thumbnails and lightbox images that are too large to fit in a post.\"\n\n    email_time_window_mins: \"Wait (n) minutes before sending any notification emails, to give users a chance to edit and finalize their posts.\"\n    personal_email_time_window_seconds: \"Wait (n) seconds before sending any personal message notification emails, to give users a chance to edit and finalize their messages.\"\n    email_posts_context: \"How many prior replies to include as context in notification emails.\"\n    flush_timings_secs: \"How frequently we flush timing data to the server, in seconds.\"\n    title_max_word_length: \"The maximum allowed word length, in characters, in a topic title.\"\n    title_min_entropy: \"The minimum entropy (unique characters, non-english count for more) required for a topic title.\"\n    body_min_entropy: \"The minimum entropy (unique characters, non-english count for more) required for a post body.\"\n    allow_uppercase_posts: \"Allow all caps in a topic title or a post body.\"\n    max_consecutive_replies: \"Number of posts a user has to make in a row in a topic before being prevented from adding another reply.\"\n    enable_filtered_replies_view: '\"(n) replies\" button collapses all other posts and only shows the current post and its replies.'\n\n    title_fancy_entities: \"Convert common ASCII characters to fancy HTML entities in topic titles, ala SmartyPants <a href='https://daringfireball.net/projects/smartypants/' target='_blank'>https://daringfireball.net/projects/smartypants/</a>\"\n\n    min_title_similar_length: \"The minimum length of a title before it will be checked for similar topics.\"\n\n    desktop_category_page_style: \"Visual style for the /categories page.\"\n    category_colors: \"A list of hexadecimal color values allowed for categories.\"\n    category_style: \"Visual style for category badges.\"\n    default_dark_mode_color_scheme_id: \"The color scheme used when in dark mode.\"\n    dark_mode_none: \"None\"\n\n    max_image_size_kb: \"The maximum image upload size in kB. This must be configured in nginx (client_max_body_size) / apache or proxy as well. Images larger than this and smaller than client_max_body_size will be resized to fit on upload.\"\n    max_attachment_size_kb: \"The maximum attachment files upload size in kB. This must be configured in nginx (client_max_body_size) / apache or proxy as well.\"\n    authorized_extensions: \"A list of file extensions allowed for upload (use '*' to enable all file types)\"\n    authorized_extensions_for_staff: \"A list of file extensions allowed for upload for staff users in addition to the list defined in the `authorized_extensions` site setting. (use '*' to enable all file types)\"\n    theme_authorized_extensions: \"A list of file extensions allowed for theme uploads (use '*' to enable all file types)\"\n    max_similar_results: \"How many similar topics to show above the editor when composing a new topic. Comparison is based on title and body.\"\n\n    max_image_megapixels: \"Maximum number of megapixels allowed for an image. Images with a higher number of megapixels will be rejected.\"\n\n    title_prettify: \"Prevent common title typos and errors, including all caps, lowercase first character, multiple ! and ?, extra . at end, etc.\"\n    title_remove_extraneous_space: \"Remove leading whitespaces in front of the end punctuation.\"\n\n    automatic_topic_heat_values: 'Automatically update the \"topic views heat\" and \"topic post like heat\" settings based on site activity.'\n\n    topic_views_heat_low: \"After this many views, the views field is slightly highlighted.\"\n    topic_views_heat_medium: \"After this many views, the views field is moderately highlighted.\"\n    topic_views_heat_high: \"After this many views, the views field is strongly highlighted.\"\n\n    cold_age_days_low: \"After this many days of conversation, the last activity date is slightly dimmed.\"\n    cold_age_days_medium: \"After this many days of conversation, the last activity date is moderately dimmed.\"\n    cold_age_days_high: \"After this many days of conversation, the last activity date is strongly dimmed.\"\n\n    history_hours_low: \"A post edited within this many hours has the edit indicator slightly highlighted\"\n    history_hours_medium: \"A post edited within this many hours has the edit indicator moderately highlighted.\"\n    history_hours_high: \"A post edited within this many hours has the edit indicator strongly highlighted.\"\n\n    topic_post_like_heat_low: \"After the likes:post ratio exceeds this ratio, the post count field is slightly highlighted.\"\n    topic_post_like_heat_medium: \"After the likes:post ratio exceeds this ratio, the post count field is moderately highlighted.\"\n    topic_post_like_heat_high: \"After the likes:post ratio exceeds this ratio, the post count field is strongly highlighted.\"\n\n    faq_url: \"If you have a FAQ hosted elsewhere that you want to use, provide the full URL here.\"\n    tos_url: \"If you have a Terms of Service document hosted elsewhere that you want to use, provide the full URL here.\"\n    privacy_policy_url: \"If you have a Privacy Policy document hosted elsewhere that you want to use, provide the full URL here.\"\n    log_anonymizer_details: \"Whether to keep a user's details in the log after being anonymized. When complying to GDPR you'll need to turn this off.\"\n\n    newuser_spam_host_threshold: \"How many times a new user can post a link to the same host within their `newuser_spam_host_threshold` posts before being considered spam.\"\n\n    allowed_spam_host_domains: \"A list of domains excluded from spam host testing. New users will never be restricted from creating posts with links to these domains.\"\n    staff_like_weight: \"How much weight to give staff likes (non-staff likes have a weight of 1.)\"\n    topic_view_duration_hours: \"Count a new topic view once per IP/User every N hours\"\n    user_profile_view_duration_hours: \"Count a new user profile view once per IP/User every N hours\"\n\n    levenshtein_distance_spammer_emails: \"When matching spammer emails, number of characters difference that will still allow a fuzzy match.\"\n    max_new_accounts_per_registration_ip: \"If there are already (n) trust level 0 accounts from this IP (and none is a staff member or at TL2 or higher), stop accepting new signups from that IP. Set to 0 to disable the limit.\"\n    min_ban_entries_for_roll_up: \"When clicking the Roll up button, will create a new subnet ban entry if there are at least (N) entries.\"\n\n    max_age_unmatched_emails: \"Delete unmatched screened email entries after (N) days.\"\n    max_age_unmatched_ips: \"Delete unmatched screened IP entries after (N) days.\"\n\n    num_flaggers_to_close_topic: \"Minimum number of unique flaggers that is required to automatically pause a topic for intervention\"\n    num_hours_to_close_topic: \"Number of hours to pause a topic for intervention.\"\n\n    auto_respond_to_flag_actions: \"Enable automatic reply when disposing a flag.\"\n    min_first_post_typing_time: \"Minimum amount of time in milliseconds a user must type during first post, if threshold is not met post will automatically enter the needs approval queue. Set to 0 to disable (not recommended)\"\n    auto_silence_fast_typers_on_first_post: \"Automatically silence users that do not meet min_first_post_typing_time\"\n    auto_silence_fast_typers_max_trust_level: \"Maximum trust level to auto silence fast typers\"\n    auto_silence_first_post_regex: \"Case insensitive regex that if passed will cause first post by user to be silenced and sent to approval queue. Example: raging|a[bc]a , will cause all posts containing raging or aba or aca to be silenced on first. Only applies to first post. DEPRECATED: Use Silence Watched Words instead.\"\n    reviewable_claiming: \"Does reviewable content need to be claimed before it can be acted upon?\"\n    reviewable_default_topics: \"Show reviewable content grouped by topic by default\"\n    reviewable_default_visibility: \"Don't show reviewable items unless they meet this priority\"\n    reviewable_low_priority_threshold: \"The priority filter hides reviewable items that don't meet this score unless the '(any)' filter is used.\"\n    high_trust_flaggers_auto_hide_posts: \"New user posts are automatically hidden after being flagged as spam by a TL3+ user\"\n    cooldown_hours_until_reflag: \"How much time users will have to wait until they are able to reflag a post\"\n    slow_mode_prevents_editing: \"Does 'Slow Mode' prevent editing, after editing_grace_period?\"\n\n    reply_by_email_enabled: \"Enable replying to topics via email.\"\n    reply_by_email_address: \"Template for reply by email incoming email address, for example: %%{reply_key}@reply.example.com or replies+%%{reply_key}@example.com\"\n    alternative_reply_by_email_addresses: \"List of alternative templates for reply by email incoming email addresses. Example: %%{reply_key}@reply.example.com|replies+%%{reply_key}@example.com\"\n    incoming_email_prefer_html: \"Use HTML instead of text for incoming email.\"\n    strip_incoming_email_lines: \"Remove leading and trailing whitespaces from each line of incoming emails.\"\n\n    disable_emails: \"Prevent Discourse from sending any kind of emails. Select 'yes' to disable emails for all users. Select 'non-staff' to disable emails for non-staff users only.\"\n\n    strip_images_from_short_emails: \"Strip images from emails having size less than 2800 Bytes\"\n    short_email_length: \"Short email length in Bytes\"\n    display_name_on_email_from: \"Display full names on email from fields\"\n\n    unsubscribe_via_email: \"Allow users to unsubscribe from emails by sending an email with 'unsubscribe' in the subject or body\"\n    unsubscribe_via_email_footer: \"Attach an unsubscribe via email mailto: link to the footer of sent emails\"\n\n    delete_email_logs_after_days: \"Delete email logs after (N) days. 0 to keep indefinitely\"\n    disallow_reply_by_email_after_days: \"Disallow reply by email after (N) days. 0 to keep indefinitely\"\n    max_emails_per_day_per_user: \"Maximum number of emails to send users per day. 0 to disable the limit\"\n    enable_staged_users: \"Automatically create staged users when processing incoming emails.\"\n    maximum_staged_users_per_email: \"Maximum number of staged users created when processing an incoming email.\"\n    maximum_recipients_per_new_group_email: \"Block incoming emails with too many recipients.\"\n    auto_generated_allowlist: \"List of email addresses that won't be checked for auto-generated content. Example: foo@bar.com|discourse@bar.com\"\n    block_auto_generated_emails: \"Block incoming emails identified as being auto generated.\"\n    ignore_by_title: \"Ignore incoming emails based on their title.\"\n    mailgun_api_key: \"Mailgun Secret API key used to verify webhook messages.\"\n\n    soft_bounce_score: \"Bounce score added to the user when a temporary bounce happens.\"\n    hard_bounce_score: \"Bounce score added to the user when a permanent bounce happens.\"\n    bounce_score_threshold: \"Max bounce score before we will stop emailing a user.\"\n    reset_bounce_score_after_days: \"Automatically reset bounce score after X days.\"\n\n    blocked_attachment_content_types: \"List of keywords used to blocklist attachments based on the content type.\"\n    blocked_attachment_filenames: \"List of keywords used to blocklist attachments based on the filename.\"\n\n    forwarded_emails_behaviour: \"How to treat a forwarded email to Discourse\"\n    always_show_trimmed_content: \"Always show trimmed part of incoming emails. WARNING: might reveal email addresses.\"\n    trim_incoming_emails: \"Trim part of the incoming emails that isn't relevant.\"\n    private_email: \"Don't include content from posts or topics in email title or email body. NOTE: also disables digest emails.\"\n    email_total_attachment_size_limit_kb: \"Max total size of files attached to outgoing emails in kB. Set to 0 to disable sending of attachments.\"\n    post_excerpts_in_emails: \"In notification emails, always send excerpts instead of full posts\"\n    raw_email_max_length: \"How many characters should be stored for incoming email.\"\n    raw_rejected_email_max_length: \"How many characters should be stored for rejected incoming email.\"\n    delete_rejected_email_after_days: \"Delete rejected emails older than (n) days.\"\n    require_change_email_confirmation: \"Require non-staff users to confirm their old email address before changing it. Does not apply to staff users, they always need to confirm their old email address.\"\n\n    manual_polling_enabled: \"Push emails using the API for email replies.\"\n    pop3_polling_enabled: \"Poll via POP3 for email replies.\"\n    pop3_polling_ssl: \"Use SSL while connecting to the POP3 server. (Recommended)\"\n    pop3_polling_openssl_verify: \"Verify TLS server certificate (Default: enabled)\"\n    pop3_polling_period_mins: \"The period in minutes between checking the POP3 account for email. NOTE: requires restart.\"\n    pop3_polling_port: \"The port to poll a POP3 account on.\"\n    pop3_polling_host: \"The host to poll for email via POP3.\"\n    pop3_polling_username: \"The username for the POP3 account to poll for email.\"\n    pop3_polling_password: \"The password for the POP3 account to poll for email.\"\n    pop3_polling_delete_from_server: \"Delete emails from server. NOTE: If you disable this you should manually clean your mail inbox\"\n    log_mail_processing_failures: \"Log all email processing failures to <a href='%{base_path}/logs' target='_blank'>/logs</a>\"\n    email_in: 'Allow users to post new topics via email (requires manual or pop3 polling). Configure the addresses in the \"Settings\" tab of each category.'\n    email_in_min_trust: \"The minimum trust level a user needs to have to be allowed to post new topics via email.\"\n    email_in_authserv_id: \"The identifier of the service doing authentication checks on incoming emails. See <a href='https://meta.discourse.org/t/134358'>https://meta.discourse.org/t/134358</a> for instructions on how to configure this.\"\n    email_in_spam_header: \"The email header to detect spam.\"\n\n    enable_imap: \"Enable IMAP for synchronizing group messages.\"\n    enable_imap_write: \"Enable two-way IMAP synchronization. If disabled, all write-operations on IMAP accounts are disabled.\"\n    enable_imap_idle: \"Use IMAP IDLE mechanism to wait for new emails.\"\n    enable_smtp: \"Enable SMTP for sending notifications for group messages.\"\n\n    imap_polling_period_mins: \"The period in minutes between checking the IMAP accounts for emails.\"\n    imap_polling_old_emails: \"The maximum number of old emails (processed) to be updated every time an IMAP box is polled (0 for all).\"\n    imap_polling_new_emails: \"The maximum number of new emails (unprocessed) to be updated every time an IMAP box is polled .\"\n    imap_batch_import_email: \"The minimum number of new emails that trigger import mode (disables notifications for imported posts).\"\n\n    email_prefix: \"The [label] used in the subject of emails. It will default to 'title' if not set.\"\n    email_site_title: \"The title of the site used as the sender of emails from the site. Default to 'title' if not set. If your 'title' contains characters that are not allowed in email sender strings, use this setting.\"\n\n    find_related_post_with_key: \"Only use the 'reply key' to find the replied-to post. WARNING: disabling this allows user impersonation based on email address.\"\n\n    minimum_topics_similar: \"How many topics need to exist before similar topics are presented when composing new topics.\"\n\n    relative_date_duration: \"Number of days after posting where post dates will be shown as relative (7d) instead of absolute (20 Feb).\"\n    delete_user_max_post_age: \"Don't allow deleting users whose first post is older than (x) days.\"\n    delete_all_posts_max: \"The maximum number of posts that can be deleted at once with the Delete All Posts button. If a user has more than this many posts, the posts cannot all be deleted at once and the user can't be deleted.\"\n    delete_user_self_max_post_count: \"The maximum number of posts a user can have while allowing self-service account deletion. Set to -1 to disable self-service account deletion.\"\n    username_change_period: \"The maximum number of days after registration that accounts can change their username (0 to disallow username change).\"\n    email_editable: \"Allow users to change their e-mail address after registration.\"\n    logout_redirect: \"Location to redirect browser to after logout (eg: https://example.com/logout)\"\n\n    allow_uploaded_avatars: \"Allow users to upload custom profile pictures.\"\n    default_avatars: \"URLs to avatars that will be used by default for new users until they change them.\"\n    automatically_download_gravatars: \"Download Gravatars for users upon account creation or email change.\"\n    digest_topics: \"The maximum number of popular topics to display in the email summary.\"\n    digest_posts: \"The maximum number of popular posts to display in the email summary.\"\n    digest_other_topics: \"The maximum number of topics to show in the 'New in topics and categories you follow' section of the email summary.\"\n    digest_min_excerpt_length: \"Minimum post excerpt in the email summary, in characters.\"\n    suppress_digest_email_after_days: \"Suppress summary emails for users not seen on the site for more than (n) days.\"\n    digest_suppress_categories: \"Suppress these categories from summary emails.\"\n    disable_digest_emails: \"Disable summary emails for all users.\"\n    apply_custom_styles_to_digest: \"Custom email template and css are applied to summary emails.\"\n    email_accent_bg_color: \"The accent color to be used as the background of some elements in HTML emails. Enter a color name ('red') or hex value ('#FF0000').\"\n    email_accent_fg_color: \"The color of text rendered on the email bg color in HTML emails. Enter a color name ('white') or hex value ('#FFFFFF').\"\n    email_link_color: \"The color of links in HTML emails. Enter a color name ('blue') or hex value ('#0000FF').\"\n\n    detect_custom_avatars: \"Whether or not to check that users have uploaded custom profile pictures.\"\n    max_daily_gravatar_crawls: \"Maximum number of times Discourse will check Gravatar for custom avatars in a day\"\n    public_user_custom_fields: \"A list of user custom fields that can be retrieved with the API.\"\n    staff_user_custom_fields: \"A list of user custom fields that can be retrieved for staff members with the API.\"\n    enable_user_directory: \"Provide a directory of users for browsing\"\n    enable_group_directory: \"Provide a directory of groups for browsing\"\n    enable_category_group_moderation: \"Allow groups to moderate content in specific categories\"\n    group_in_subject: \"Set %%{optional_pm} in email subject to name of first group in PM, see: <a href='https://meta.discourse.org/t/customize-specific-email-templates/88323' target='_blank'>Customize subject format for standard emails</a>\"\n    allow_anonymous_posting: \"Allow users to switch to anonymous mode\"\n    anonymous_posting_min_trust_level: \"Minimum trust level required to enable anonymous posting\"\n    anonymous_account_duration_minutes: \"To protect anonymity create a new anonymous account every N minutes for each user. Example: if set to 600, as soon as 600 minutes elapse from last post AND user switches to anon, a new anonymous account is created.\"\n\n    hide_user_profiles_from_public: \"Disable user cards, user profiles and user directory for anonymous users.\"\n    allow_users_to_hide_profile: \"Allow users to hide their profile and presence\"\n\n    allow_featured_topic_on_user_profiles: \"Allow users to feature a link to a topic on their user card and profile.\"\n\n    show_inactive_accounts: \"Allow logged in users to browse profiles of inactive accounts.\"\n\n    hide_suspension_reasons: \"Don't display suspension reasons publically on user profiles.\"\n\n    log_personal_messages_views: \"Log personal message views by Admin for other users/groups.\"\n\n    ignored_users_count_message_threshold: \"Notify moderators if a particular user is ignored by this many other users.\"\n\n    ignored_users_message_gap_days: \"How long to wait before notifying moderators again about a user who has been ignored by many others.\"\n\n    clean_up_inactive_users_after_days: \"Number of days before an inactive user (trust level 0 without any posts) is removed. To disable clean up set to 0.\"\n    clean_up_unused_staged_users_after_days: \"Number of days before an unused staged user (without any posts) is removed. To disable clean up set to 0.\"\n\n    user_selected_primary_groups: \"Allow users to set their own primary group\"\n\n    max_notifications_per_user: \"Maximum amount of notifications per user, if this number is exceeded old notifications will be deleted. Enforced weekly. Set to 0 to disable\"\n\n    allowed_user_website_domains: \"User website will be verified against these domains. Pipe-delimited list.\"\n\n    allow_profile_backgrounds: \"Allow users to upload profile backgrounds.\"\n\n    sequential_replies_threshold: \"Number of posts a user has to make in a row in a topic before being reminded about too many sequential replies.\"\n\n    get_a_room_threshold: \"Number of posts a user has to make to the same person in the same topic before being warned.\"\n\n    enable_mobile_theme: \"Mobile devices use a mobile-friendly theme, with the ability to switch to the full site. Disable this if you want to use a custom stylesheet that is fully responsive.\"\n\n    dominating_topic_minimum_percent: \"What percentage of posts a user has to make in a topic before being reminded about overly dominating a topic.\"\n\n    disable_avatar_education_message: \"Disable education message for changing avatar.\"\n\n    pm_warn_user_last_seen_months_ago: \"When creating a new PM warn users when target recepient has not been seen more than n months ago.\"\n\n    suppress_uncategorized_badge: \"Don't show the badge for uncategorized topics in topic lists.\"\n\n    header_dropdown_category_count: \"How many categories can be displayed in the header dropdown menu.\"\n\n    permalink_normalizations: \"Apply the following regex before matching permalinks, for example: /(topic.*)\\\\?.*/\\\\1 will strip query strings from topic routes. Format is regex+string use \\\\1 etc. to access captures\"\n\n    global_notice: \"Display an URGENT, EMERGENCY, non-dismissible global banner notice to all visitors, change to blank to hide it (HTML allowed).\"\n\n    disable_system_edit_notifications: \"Disables edit notifications by the system user when 'download_remote_images_to_local' is active.\"\n\n    disable_category_edit_notifications: \"Disable category edit notifications on topics.\"\n\n    disable_tags_edit_notifications: \"Disable tags edit notifications on topics.\"\n\n    notification_consolidation_threshold: \"Number of liked or membership request notifications received before the notifications are consolidated into a single one. Set to 0 to disable.\"\n\n    likes_notification_consolidation_window_mins: \"Duration in minutes where liked notifications are consolidated into a single notification once the threshold has been reached. The threshold can be configured via `SiteSetting.notification_consolidation_threshold`.\"\n\n    automatically_unpin_topics: \"Automatically unpin topics when the user reaches the bottom.\"\n\n    read_time_word_count: \"Word count per minute for calculating estimated reading time.\"\n\n    topic_page_title_includes_category: \"Topic page <a href='https://developer.mozilla.org/en-US/docs/Web/HTML/Element/title' target='_blank'>title tag</a> includes the category name.\"\n\n    native_app_install_banner_ios: \"Displays DiscourseHub app banner on iOS devices to regular users (trust level 1 and up).\"\n\n    native_app_install_banner_android: \"Displays DiscourseHub app banner on Android devices to regular users (trust level 1 and up).\"\n\n    app_association_android: \"Contents of <a href='%{base_path}/.well-known/assetlinks.json'>.well-known/assetlinks.json</a> endpoint, used for Google's Digital Asset Links API.\"\n    app_association_ios: \"Contents of <a href='%{base_path}/apple-app-site-association'>apple-app-site-association</a> endpoint, used to create Universal Links between this site and iOS apps.\"\n\n    share_anonymized_statistics: \"Share anonymized usage statistics.\"\n\n    auto_handle_queued_age: \"Automatically handle records that are waiting to be reviewed after this many days. Flags will be ignored. Queued posts and users will be rejected. Set to 0 to disable this feature.\"\n    penalty_step_hours: \"Default penalties for silencing or suspending users in hours. First offense defaults to the first value, second offense defaults to the second value, etc.\"\n    svg_icon_subset: \"Add additional FontAwesome 5 icons that you would like to include in your assets. Use prefix 'fa-' for solid icons, 'far-' for regular icons and 'fab-' for brand icons.\"\n    max_prints_per_hour_per_user: \"Maximum number of /print page impressions (set to 0 to disable)\"\n\n    full_name_required: \"Full name is a required field of a user's profile.\"\n    enable_names: \"Show the user's full name on their profile, user card, and emails. Disable to hide full name everywhere.\"\n    display_name_on_posts: \"Show a user's full name on their posts in addition to their @username.\"\n    show_time_gap_days: \"If two posts are made this many days apart, display the time gap in the topic.\"\n    short_progress_text_threshold: \"After the number of posts in a topic goes above this number, the progress bar will only show the current post number. If you change the progress bar's width, you may need to change this value.\"\n    default_code_lang: \"Default programming language syntax highlighting applied to code blocks (auto, nohighlight, ruby, python etc.). This value must also be present in the `highlighted languages` site setting.\"\n    warn_reviving_old_topic_age: \"When someone starts replying to a topic where the last reply is older than this many days, a warning will be displayed. Disable by setting to 0.\"\n    autohighlight_all_code: \"Force apply code highlighting to all preformatted code blocks even when they didn't explicitly specify the language.\"\n    highlighted_languages: \"Included syntax highlighting rules. (Warning: including too many languages may impact performance) see: <a href='https://highlightjs.org/static/demo/' target='_blank'>https://highlightjs.org/static/demo</a> for a demo\"\n    show_copy_button_on_codeblocks: \"Add a button to codeblocks to copy the block contents to the user's clipboard.\"\n\n    embed_any_origin: \"Allow embeddable content regardless of origin. This is required for mobile apps with static HTML.\"\n    embed_topics_list: \"Support HTML embedding of topics lists\"\n    embed_set_canonical_url: \"Set the canonical URL for embedded topics to the embedded content's URL.\"\n    embed_truncate: \"Truncate the embedded posts.\"\n    embed_unlisted: \"Imported topics will be unlisted until a user replies.\"\n    embed_support_markdown: \"Support Markdown formatting for embedded posts.\"\n    allowed_embed_selectors: \"A comma separated list of CSS elements that are allowed in embeds.\"\n    allowed_href_schemes: \"Schemes allowed in links in addition to http and https.\"\n    embed_post_limit: \"Maximum number of posts to embed.\"\n    embed_username_required: \"The username for topic creation is required.\"\n    notify_about_flags_after: \"If there are flags that haven't been handled after this many hours, send a personal message to moderators. Set to 0 to disable.\"\n    show_create_topics_notice: \"If the site has fewer than 5 public topics, show a notice asking admins to create some topics.\"\n\n    delete_drafts_older_than_n_days: \"Delete drafts older than (n) days.\"\n    delete_merged_stub_topics_after_days: \"Number of days to wait before automatically deleting fully merged stub topics. Set to 0 to never delete stub topics.\"\n\n    bootstrap_mode_min_users: \"Minimum number of users required to disable bootstrap mode (set to 0 to disable)\"\n\n    prevent_anons_from_downloading_files: \"Prevent anonymous users from downloading attachments.\"\n    secure_media: \"DEPRECATED: Use the secure_uploads setting instead, will be removed in Discourse 3.0.\"\n    secure_uploads: 'Limits access to ALL uploads (images, video, audio, text, pdfs, zips, and others). If \"login required\u201d is enabled, only logged-in users can access uploads. Otherwise, access will be limited only for media uploads in private messages and private categories. WARNING: This setting is complex and requires deep administrative understanding. See <a target=\"_blank\" href=\"https://meta.discourse.org/t/-/140017\">the secure uploads topic on Meta</a> for details.'\n    secure_media_allow_embed_images_in_emails: \"DEPRECATED: Use secure_uploads_allow_embed_images_in_emails, will remove in Discourse 3.0.\"\n    secure_uploads_allow_embed_images_in_emails: \"Allows embedding secure images that would normally be redacted in emails, if their size is smaller than the 'secure uploads max email embed image size kb' setting.\"\n    secure_media_max_email_embed_image_size_kb: \"DEPRECATED: Use secure_uploads_max_email_embed_image_size_kb, will be removed in Discourse 3.0.\"\n    secure_uploads_max_email_embed_image_size_kb: \"The size cutoff for secure images that will be embedded in emails if the 'secure uploads allow embed in emails' setting is enabled. Without that setting enabled, this setting has no effect.\"\n    slug_generation_method: \"Choose a slug generation method. 'encoded' will generate percent encoding string. 'none' will disable slug at all.\"\n\n    enable_emoji: \"Enable emoji\"\n    enable_emoji_shortcuts: \"Common smiley text such as :) :p :( will be converted to emojis\"\n    emoji_set: \"How would you like your emoji?\"\n    emoji_autocomplete_min_chars: \"Minimum number of characters required to trigger autocomplete emoji popup\"\n    enable_inline_emoji_translation: \"Enables translation for inline emojis (without any space or punctuation before)\"\n\n    approve_post_count: \"The amount of posts from a new or basic user that must be approved\"\n    approve_unless_trust_level: \"Posts for users below this trust level must be approved\"\n    approve_new_topics_unless_trust_level: \"New topics for users below this trust level must be approved\"\n    approve_unless_staged: \"New topics and posts for staged users must be approved\"\n    notify_about_queued_posts_after: \"If there are posts that have been waiting to be reviewed for more than this many hours, send a notification to all moderators. Set to 0 to disable these notifications.\"\n    auto_close_messages_post_count: \"Maximum number of posts allowed in a message before it is automatically closed (0 to disable)\"\n    auto_close_topics_post_count: \"Maximum number of posts allowed in a topic before it is automatically closed (0 to disable)\"\n    auto_close_topics_create_linked_topic: \"Create a new linked topic when a topic is auto-closed based on 'auto close topics post count' setting\"\n\n    code_formatting_style: \"Code button in composer will default to this code formatting style\"\n\n    max_allowed_message_recipients: \"Maximum recipients allowed in a message.\"\n    watched_words_regular_expressions: \"Watched words are regular expressions.\"\n\n    enable_diffhtml_preview: \"Experimental feature which uses diffHTML to sync preview instead of full re-render\"\n    enable_fast_edit: \"Enables small selection of a post text to be edited inline.\"\n\n    old_post_notice_days: \"Days before post notice becomes old\"\n    new_user_notice_tl: \"Minimum trust level required to see new user post notices.\"\n    returning_user_notice_tl: \"Minimum trust level required to see returning user post notices.\"\n    returning_users_days: \"How many days should pass before a user is considered to be returning.\"\n    review_media_unless_trust_level: \"Staff will review posts of users with lower trust levels if they contain embedded media.\"\n    blur_tl0_flagged_posts_media: \"Blur flagged posts images to hide potentially NSFW content.\"\n    enable_page_publishing: \"Allow staff members to publish topics to new URLs with their own styling.\"\n    show_published_pages_login_required: \"Anonymous users can see published pages, even when login is required.\"\n    skip_auto_delete_reply_likes: \"When automatically deleting old replies, skip deleting posts with this number of likes or more.\"\n\n    default_email_digest_frequency: \"How often users receive summary emails by default.\"\n    default_include_tl0_in_digests: \"Include posts from new users in summary emails by default. Users can change this in their preferences.\"\n    default_email_level: \"Set default email notification level for regular topics.\"\n    default_email_messages_level: \"Set default email notification level when someone messages user.\"\n    default_email_mailing_list_mode: \"Send an email for every new post by default.\"\n    default_email_mailing_list_mode_frequency: \"Users who enable mailing list mode will receive emails this often by default.\"\n    disable_mailing_list_mode: \"Disallow users from enabling mailing list mode (prevents any mailing list emails from being sent.)\"\n    default_email_previous_replies: \"Include previous replies in emails by default.\"\n\n    default_email_in_reply_to: \"Include excerpt of replied to post in emails by default.\"\n\n    default_hide_profile_and_presence: \"Hide user public profile and presence features by default.\"\n\n    default_other_new_topic_duration_minutes: \"Global default condition for which a topic is considered new.\"\n    default_other_auto_track_topics_after_msecs: \"Global default time before a topic is automatically tracked.\"\n    default_other_notification_level_when_replying: \"Global default notification level when the user replies to a topic.\"\n    default_other_external_links_in_new_tab: \"Open external links in a new tab by default.\"\n    default_other_enable_quoting: \"Enable quote reply for highlighted text by default.\"\n    default_other_enable_defer: \"Enable defer topic functionality by default.\"\n    default_other_dynamic_favicon: \"Show new/updated topic count on browser icon by default.\"\n    default_other_skip_new_user_tips: \"Skip new user onboarding tips and badges.\"\n\n    default_other_like_notification_frequency: \"Notify users on likes by default\"\n\n    default_topics_automatic_unpin: \"Automatically unpin topics when the user reaches the bottom by default.\"\n\n    default_categories_watching: \"List of categories that are watched by default.\"\n    default_categories_tracking: \"List of categories that are tracked by default.\"\n    default_categories_muted: \"List of categories that are muted by default.\"\n    default_categories_watching_first_post: \"List of categories in which first post in each new topic will be watched by default.\"\n    default_categories_normal: \"List of categories that are not muted by default. Useful when `mute_all_categories_by_default` site setting is enabled.\"\n    mute_all_categories_by_default: \"Set the default notification level of all the categories to muted. Require users opt-in to categories for them to appear in 'latest' and 'categories' pages. If you wish to amend the defaults for anonymous users set 'default_categories_' settings.\"\n\n    default_tags_watching: \"List of tags that are watched by default.\"\n    default_tags_tracking: \"List of tags that are tracked by default.\"\n    default_tags_muted: \"List of tags that are muted by default.\"\n    default_tags_watching_first_post: \"List of tags in which first post in each new topic will be watched by default.\"\n\n    default_text_size: \"Text size which is selected by default\"\n\n    default_title_count_mode: \"Default mode for the page title counter\"\n\n    retain_web_hook_events_period_days: \"Number of days to retain web hook event records.\"\n    retry_web_hook_events: \"Automatically retry failed web hook events for 4 times. Time gaps between the retries are 1, 5, 25 and 125 minutes.\"\n    revoke_api_keys_days: \"Number of days before an unused API key is automatically revoked (0 for never)\"\n\n    allow_user_api_keys: \"Allow generation of user API keys\"\n    allow_user_api_key_scopes: \"List of scopes allowed for user API keys\"\n    min_trust_level_for_user_api_key: \"Trust level required for generation of user API keys\"\n    allowed_user_api_auth_redirects: \"Allowed URL for authentication redirect for user API keys. Wildcard symbol * can be used to match any part of it (e.g. www.example.com/*).\"\n    allowed_user_api_push_urls: \"Allowed URLs for server push to user API\"\n    expire_user_api_keys_days: \"Number of days before a user API key automatically expires (0 for never)\"\n\n    tagging_enabled: \"Enable tags on topics?\"\n    min_trust_to_create_tag: \"The minimum trust level required to create a tag.\"\n    max_tags_per_topic: \"The maximum tags that can be applied to a topic.\"\n    max_tag_length: \"The maximum amount of characters that can be used in a tag.\"\n    max_tag_search_results: \"When searching for tags, the maximum number of results to show.\"\n    max_tags_in_filter_list: \"Maximum number of tags to show in the filter dropdown. The most used tags will be shown.\"\n    tags_sort_alphabetically: \"Show tags in alphabetical order. Default is to show in order of popularity.\"\n    tags_listed_by_group: \"List tags by tag group on the <a href='%{base_path}/tags' target='_blank'>Tags page</a>.\"\n    tag_style: \"Visual style for tag badges.\"\n    pm_tags_allowed_for_groups: \"Allow members of included group(s) to tag any personal message\"\n    min_trust_level_to_tag_topics: \"Minimum trust level required to tag topics\"\n    suppress_overlapping_tags_in_list: \"If tags match exact words in topic titles, don't show the tag\"\n    remove_muted_tags_from_latest: \"Don't show topics tagged only with muted tags in the latest topic list.\"\n    force_lowercase_tags: \"Force all new tags to be entirely lowercase.\"\n\n    company_name: \"Company Name\"\n    governing_law: \"Governing Law\"\n    city_for_disputes: \"City for Disputes\"\n\n    shared_drafts_category: \"Enable the Shared Drafts feature by designating a category for topic drafts. Topics in this category will be suppressed from topic lists for staff users.\"\n    shared_drafts_min_trust_level: \"Allow users to see and edit Shared Drafts.\"\n\n    push_notifications_prompt: \"Display user consent prompt.\"\n    push_notifications_icon: \"The badge icon that appears in the notification corner. A 96\u00d796 monochromatic PNG with transparency is recommended.\"\n\n    base_font: \"Base font to use for most text on the site. Themes can override via the `--font-family` CSS custom property.\"\n    heading_font: \"Font to use for headings on the site. Themes can override via the `--heading-font-family` CSS custom property.\"\n\n    enable_sitemap: \"Generate a sitemap for your site and include it in the robots.txt file.\"\n    sitemap_page_size: \"Number of URLs to include in each sitemap page. Max 50.000\"\n\n    enable_user_status: \"(experimental) Allow users to set custom status message (emoji + description).\"\n    enable_user_tips: \"(experimental) Enable new user tips that describe key features to users\"\n\n    short_title: \"The short title will be used on the user's home screen, launcher, or other places where space may be limited. It should be limited to 12 characters.\"\n\n    dashboard_hidden_reports: \"Allow to hide the specified reports from the dashboard.\"\n    dashboard_visible_tabs: \"Choose which dashboard tabs are visible.\"\n    dashboard_general_tab_activity_metrics: \"Choose reports to be displayed as activity metrics on the general tab.\"\n\n    gravatar_name: \"Name of the Gravatar provider\"\n    gravatar_base_url: \"Url of the Gravatar provider's API base\"\n    gravatar_login_url: \"Url relative to gravatar_base_url, which provides the user with the login to the Gravatar service\"\n\n    share_quote_buttons: \"Determine which items appear in the quote sharing widget, and in what order.\"\n    share_quote_visibility: \"Determine when to show quote sharing buttons: never, to anonymous users only or all users. \"\n\n    create_revision_on_bulk_topic_moves: \"Create revision for first posts when topics are moved into a new category in bulk.\"\n\n    allow_changing_staged_user_tracking: \"Allow a staged user's category and tag notification preferences to be changed by an admin user.\"\n    use_email_for_username_and_name_suggestions: \"Use the first part of email addresses for username and name suggestions. Note that this makes it easier for the public to guess full user email addresses (because a large proportion of people share common services like `gmail.com`).\"\n    use_name_for_username_suggestions: \"Use a user's full name when suggesting usernames.\"\n    suggest_weekends_in_date_pickers: \"Include weekends (Saturday and Sunday) in date picker suggestions (disable this if you use Discourse only on weekdays, Monday through Friday).\"\n\n    splash_screen: \"Displays a temporary loading screen while site assets load\"\n    default_sidebar_categories: \"Selected categories will be displayed under Sidebar's Categories section by default.\"\n    default_sidebar_tags: \"Selected tags will be displayed under Sidebar's Tags section by default.\"\n    enable_new_user_profile_nav_groups: \"EXPERIMENTAL: Users of the selected groups will be shown the new user profile navigation menu\"\n\n    errors:\n      invalid_css_color: \"Invalid color. Enter a color name or hex value.\"\n      invalid_email: \"Invalid email address.\"\n      invalid_username: \"There's no user with that username.\"\n      valid_username: \"There's a user with that username.\"\n      invalid_group: \"There's no group with that name.\"\n      invalid_integer_min_max: \"Value must be between %{min} and %{max}.\"\n      invalid_integer_min: \"Value must be %{min} or greater.\"\n      invalid_integer_max: \"Value cannot be higher than %{max}.\"\n      invalid_integer: \"Value must be an integer.\"\n      regex_mismatch: \"Value doesn't match the required format.\"\n      must_include_latest: \"Top menu must include the 'latest' tab.\"\n      invalid_string: \"Invalid value.\"\n      invalid_string_min_max: \"Must be between %{min} and %{max} characters.\"\n      invalid_string_min: \"Must be at least %{min} characters.\"\n      invalid_string_max: \"Must be no more than %{max} characters.\"\n      invalid_json: \"Invalid JSON.\"\n      invalid_reply_by_email_address: \"Value must contain '%{reply_key}' and be different from the notification email.\"\n      invalid_alternative_reply_by_email_addresses: \"All values must contain '%{reply_key}' and be different from the notification email.\"\n      invalid_domain_hostname: \"Must not include * or ? characters.\"\n      pop3_polling_host_is_empty: \"You must set a 'pop3 polling host' before enabling POP3 polling.\"\n      pop3_polling_username_is_empty: \"You must set a 'pop3 polling username' before enabling POP3 polling.\"\n      pop3_polling_password_is_empty: \"You must set a 'pop3 polling password' before enabling POP3 polling.\"\n      pop3_polling_authentication_failed: \"POP3 authentication failed. Please verify your pop3 credentials.\"\n      reply_by_email_address_is_empty: \"You must set a 'reply by email address' before enabling reply by email.\"\n      email_polling_disabled: \"You must enable either manual or POP3 polling before enabling reply by email.\"\n      user_locale_not_enabled: \"You must first enable 'allow user locale' before enabling this setting.\"\n      personal_message_enabled_groups_invalid: \"You must specify at least one group for this setting. If you do not want anyone except staff to send PMs, choose the staff group.\"\n      invalid_regex: \"Regex is invalid or not allowed.\"\n      invalid_regex_with_message: \"The regex '%{regex}' has an error: %{message}\"\n      email_editable_enabled: \"You must disable 'email editable' before enabling this setting.\"\n      staged_users_disabled: \"You must first enable 'staged users' before enabling this setting.\"\n      reply_by_email_disabled: \"You must first enable 'reply by email' before enabling this setting.\"\n      discourse_connect_url_is_empty: \"You must set a 'discourse connect url' before enabling this setting.\"\n      discourse_connect_invite_only: \"You cannot enable DiscourseConnect and invite only at the same time.\"\n      enable_local_logins_disabled: \"You must first enable 'enable local logins' before enabling this setting.\"\n      min_username_length_exists: \"You cannot set the minimum username length above the shortest username (%{username}).\"\n      min_username_length_range: \"You cannot set the minimum above the maximum.\"\n      max_username_length_exists: \"You cannot set the maximum username length below the longest username (%{username}).\"\n      max_username_length_range: \"You cannot set the maximum below the minimum.\"\n      invalid_hex_value: \"Color values have to be 6-digit hexadecimal codes.\"\n      empty_selectable_avatars: \"You must first upload at least two selectable avatars before enabling this setting.\"\n      category_search_priority:\n        low_weight_invalid: \"You cannot set the weight to be greater or equal to 1.\"\n        high_weight_invalid: \"You cannot set the weight to be smaller or equal to 1.\"\n      allowed_unicode_usernames:\n        regex_invalid: \"The regular expression is invalid: %{error}\"\n        leading_trailing_slash: \"The regular expression must not start and end with a slash.\"\n      unicode_usernames_avatars: \"The internal system avatars do not support Unicode usernames.\"\n      list_value_count: \"The list must contain exactly %{count} values.\"\n      markdown_linkify_tlds: \"You cannot include a value of '*'.\"\n      google_oauth2_hd_groups: \"You must configure all 'google oauth2 hd' settings before enabling this setting.\"\n      search_tokenize_chinese_enabled: \"You must disable 'search_tokenize_chinese' before enabling this setting.\"\n      search_tokenize_japanese_enabled: \"You must disable 'search_tokenize_japanese' before enabling this setting.\"\n      discourse_connect_cannot_be_enabled_if_second_factor_enforced: \"You cannot enable DiscourseConnect if 2FA is enforced.\"\n      delete_rejected_email_after_days: \"This setting cannot be set lower than the delete_email_logs_after_days setting or greater than %{max}\"\n      invalid_uncategorized_category_setting: \"The Uncategorized category cannot be selected if allow uncategorized topics is not allowed\"\n\n    placeholder:\n      discourse_connect_provider_secrets:\n        key: \"www.example.com\"\n        value: \"DiscourseConnect secret\"\n\n  search:\n    extreme_load_error: \"Site is under extreme load, search is disabled, try again later\"\n    within_post: \"#%{post_number} by %{username}\"\n    types:\n      category: \"Categories\"\n      topic: \"Results\"\n      user: \"Users\"\n    results_page: \"Search results for '%{term}'\"\n    audio: \"[audio]\"\n    video: \"[video]\"\n\n  discourse_connect:\n    login_error: \"Login Error\"\n    not_found: \"Your account couldn't be found. Please contact the site's administrator.\"\n    account_not_approved: \"Your account is pending approval. You will receive an email notification when you are approved.\"\n    unknown_error: \"There is a problem with your account. Please contact the site's administrator.\"\n    timeout_expired: \"Account login timed out, please try logging in again.\"\n    no_email: \"No email address was provided. Please contact the site's administrator.\"\n    blank_id_error: \"The `external_id` is required but was blank\"\n    email_error: \"An account could not be registered with the email address <b>%{email}</b>. Please contact the site's administrator.\"\n    missing_secret: \"Authentication failed due to missing secret. Contact the site administrators to fix this problem.\"\n    invite_redeem_failed: \"Invite redemption failed. Please contact the site's administrator.\"\n\n  original_poster: \"Original Poster\"\n  most_recent_poster: \"Most Recent Poster\"\n  frequent_poster: \"Frequent Poster\"\n  # Example: \"Original Poster, Most Recent Poster\"\n  poster_description_joiner: \", \"\n\n  redirected_to_top_reasons:\n    new_user: \"Welcome to our community! These are the most popular recent topics.\"\n    not_seen_in_a_month: \"Welcome back! We haven't seen you in a while. These are the most popular topics since you've been away.\"\n\n  merge_posts:\n    edit_reason:\n      one: \"A post was merged in by %{username}\"\n      other: \"%{count} posts were merged in by %{username}\"\n    errors:\n      different_topics: \"Posts belonging to different topics cannot be merged.\"\n      different_users: \"Posts belonging to different users cannot be merged.\"\n      max_post_length: \"Posts cannot be merged because the combined post length is more than allowed.\"\n\n  move_posts:\n    new_topic_moderator_post:\n      one: \"A post was split to a new topic: %{topic_link}\"\n      other: \"%{count} posts were split to a new topic: %{topic_link}\"\n    new_message_moderator_post:\n      one: \"A post was split to a new message: %{topic_link}\"\n      other: \"%{count} posts were split to a new message: %{topic_link}\"\n    existing_topic_moderator_post:\n      one: \"A post was merged into an existing topic: %{topic_link}\"\n      other: \"%{count} posts were merged into an existing topic: %{topic_link}\"\n    existing_message_moderator_post:\n      one: \"A post was merged into an existing message: %{topic_link}\"\n      other: \"%{count} posts were merged into an existing message: %{topic_link}\"\n\n  change_owner:\n    post_revision_text: \"Ownership transferred\"\n\n  publish_page:\n    slug_errors:\n      blank: \"can't be blank\"\n      unavailable: \"is unavailable\"\n      invalid: \"contains invalid characters\"\n\n  topic_statuses:\n    autoclosed_message_max_posts:\n      one: \"This message was automatically closed after reaching the maximum limit of %{count} reply.\"\n      other: \"This message was automatically closed after reaching the maximum limit of %{count} replies.\"\n    autoclosed_topic_max_posts:\n      one: \"This topic was automatically closed after reaching the maximum limit of %{count} reply.\"\n      other: \"This topic was automatically closed after reaching the maximum limit of %{count} replies.\"\n    autoclosed_enabled_days:\n      one: \"This topic was automatically closed after %{count} day. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed after %{count} days. New replies are no longer allowed.\"\n    autoclosed_enabled_hours:\n      one: \"This topic was automatically closed after %{count} hour. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed after %{count} hours. New replies are no longer allowed.\"\n    autoclosed_enabled_minutes:\n      one: \"This topic was automatically closed after %{count} minute. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed after %{count} minutes. New replies are no longer allowed.\"\n    autoclosed_enabled_lastpost_days:\n      one: \"This topic was automatically closed %{count} day after the last reply. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed %{count} days after the last reply. New replies are no longer allowed.\"\n    autoclosed_enabled_lastpost_hours:\n      one: \"This topic was automatically closed %{count} hour after the last reply. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed %{count} hours after the last reply. New replies are no longer allowed.\"\n    autoclosed_enabled_lastpost_minutes:\n      one: \"This topic was automatically closed %{count} minute after the last reply. New replies are no longer allowed.\"\n      other: \"This topic was automatically closed %{count} minutes after the last reply. New replies are no longer allowed.\"\n\n    autoclosed_disabled_days:\n      one: \"This topic was automatically opened after %{count} day.\"\n      other: \"This topic was automatically opened after %{count} days.\"\n    autoclosed_disabled_hours:\n      one: \"This topic was automatically opened after %{count} hour.\"\n      other: \"This topic was automatically opened after %{count} hours.\"\n    autoclosed_disabled_minutes:\n      one: \"This topic was automatically opened after %{count} minute.\"\n      other: \"This topic was automatically opened after %{count} minutes.\"\n    autoclosed_disabled_lastpost_days:\n      one: \"This topic was automatically opened %{count} day after the last reply.\"\n      other: \"This topic was automatically opened %{count} days after the last reply.\"\n    autoclosed_disabled_lastpost_hours:\n      one: \"This topic was automatically opened %{count} hour after the last reply.\"\n      other: \"This topic was automatically opened %{count} hours after the last reply.\"\n    autoclosed_disabled_lastpost_minutes:\n      one: \"This topic was automatically opened %{count} minute after the last reply.\"\n      other: \"This topic was automatically opened %{count} minutes after the last reply.\"\n\n    autoclosed_disabled: \"This topic is now opened. New replies are allowed.\"\n    autoclosed_disabled_lastpost: \"This topic is now opened. New replies are allowed.\"\n    auto_deleted_by_timer: \"Automatically deleted by timer.\"\n\n  login:\n    invalid_second_factor_method: \"The selected two-factor method is invalid.\"\n    not_enabled_second_factor_method: \"The selected two-factor method is not enabled for your account.\"\n    security_key_description: \"When you have your physical security key prepared press the Authenticate with Security Key button below.\"\n    security_key_alternative: \"Try another way\"\n    security_key_authenticate: \"Authenticate with Security Key\"\n    security_key_not_allowed_error: \"The security key authentication process either timed out or was cancelled.\"\n    security_key_no_matching_credential_error: \"No matching credentials could be found in the provided security key.\"\n    security_key_support_missing_error: \"Your current device or browser does not support the use of security keys. Please use a different method.\"\n    security_key_invalid: \"There was an error validating the security key.\"\n    not_approved: \"Your account hasn't been approved yet. You will be notified by email when you are ready to log in.\"\n    incorrect_username_email_or_password: \"Incorrect username, email or password\"\n    incorrect_password: \"Incorrect password\"\n    wait_approval: \"Thanks for signing up. We will notify you when your account has been approved.\"\n    active: \"Your account is activated and ready to use.\"\n    activate_email: \"<p>You\u2019re almost done! We sent an activation mail to <b>%{email}</b>. Please follow the instructions in the mail to activate your account.</p><p>If it doesn\u2019t arrive, check your spam folder.</p>\"\n    not_activated: \"You can't log in yet. We sent an activation email to you. Please follow the instructions in the email to activate your account.\"\n    not_allowed_from_ip_address: \"You can't log in as %{username} from that IP address.\"\n    admin_not_allowed_from_ip_address: \"You can't log in as admin from that IP address.\"\n    reset_not_allowed_from_ip_address: \"You can't request a password reset from that IP address.\"\n    suspended: \"You can't log in until %{date}.\"\n    suspended_with_reason: \"Account suspended until %{date}: %{reason}\"\n    suspended_with_reason_forever: \"Account suspended: %{reason}\"\n    errors: \"%{errors}\"\n    not_available: \"Not available. Try %{suggestion}?\"\n    something_already_taken: \"Something went wrong, perhaps the username or email is already registered. Try the forgot password link.\"\n    omniauth_error:\n      generic: \"Sorry, there was an error authorizing your account. Please try again.\"\n      csrf_detected: \"Authorization timed out, or you have switched browsers. Please try again.\"\n      request_error: \"An error occurred when starting authorization. Please try again.\"\n      invalid_iat: \"Unable to verify authorization token due to server clock differences. Please try again.\"\n    omniauth_error_unknown: \"Something went wrong processing your login, please try again.\"\n    omniauth_confirm_title: \"Log in using %{provider}\"\n    omniauth_confirm_button: \"Continue\"\n    authenticator_error_no_valid_email: \"No email addresses associated with %{account} are allowed. You may need to configure your account with a different email address.\"\n    new_registrations_disabled: \"New account registrations are not allowed at this time.\"\n    password_too_long: \"Passwords are limited to 200 characters.\"\n    email_too_long: \"The email you provided is too long. Mailbox names must be no more than 254 characters, and domain names must be no more than 253 characters.\"\n    wrong_invite_code: \"The invite code you entered was incorrect.\"\n    reserved_username: \"That username is not allowed.\"\n    missing_user_field: \"You have not completed all the user fields\"\n    auth_complete: \"Authentication is complete.\"\n    click_to_continue: \"Click here to continue.\"\n    already_logged_in: \"Sorry! This invitation is intended for new users, who do not already have an existing account.\"\n    second_factor_title: \"Two-Factor Authentication\"\n    second_factor_description: \"Please enter the required authentication code from your app:\"\n    second_factor_backup_description: \"Please enter one of your backup codes:\"\n    second_factor_backup_title: \"Two-Factor Backup Code\"\n    invalid_second_factor_code: \"Invalid authentication code. Each code can only be used once.\"\n    invalid_security_key: \"Invalid security key.\"\n    missing_second_factor_name: \"Please provide a name.\"\n    missing_second_factor_code: \"Please provide a code.\"\n    second_factor_toggle:\n      totp: \"Use an authenticator app or security key instead\"\n      backup_code: \"Use a backup code instead\"\n\n  second_factor_auth:\n    challenge_not_found: \"Couldn't find a 2FA challenge in your current session.\"\n    challenge_expired: \"Too much time has passed since the 2FA challenge was staged and it's no longer valid. Please try again.\"\n    challenge_not_completed: \"You've not completed the 2FA challenge to perform this action. Please complete the 2FA challenge and try again.\"\n    actions:\n      grant_admin:\n        description: \"For additional security measures, you need to confirm your 2FA before %{username} is granted admin access.\"\n      discourse_connect_provider:\n        description: \"%{hostname} has requested that you confirm your 2FA. You'll be redirected back to the site once you confirm your 2FA.\"\n  admin:\n    email:\n      sent_test: \"sent!\"\n    user:\n      merge_user:\n        updating_username: \"Updating username...\"\n        changing_post_ownership: \"Changing post ownership...\"\n        merging_given_daily_likes: \"Merging given daily likes...\"\n        merging_post_timings: \"Merging post timings...\"\n        merging_user_visits: \"Merging user visits...\"\n        updating_site_settings: \"Updating site settings...\"\n        updating_user_stats: \"Updating user stats...\"\n        merging_user_attributes: \"Merging user attributes...\"\n        updating_user_ids: \"Updating user ids...\"\n        deleting_source_user: \"Deleting source user...\"\n  user:\n    deactivated: \"Was deactivated due to too many bounced emails to '%{email}'.\"\n    deactivated_by_staff: \"Deactivated by staff\"\n    deactivated_by_inactivity:\n      one: \"Automatically deactivated after %{count} day of inactivity\"\n      other: \"Automatically deactivated after %{count} days of inactivity\"\n    activated_by_staff: \"Activated by staff\"\n    new_user_typed_too_fast: \"New user typed too fast\"\n    content_matches_auto_silence_regex: \"Content matches auto silence regex\"\n    content_matches_auto_block_regex: \"Content matches auto block regex\"\n    username:\n      short: \"must be at least %{min} characters\"\n      long: \"must be no more than %{max} characters\"\n      too_long: \"is too long\"\n      characters: \"must only include numbers, letters, dashes, dots, and underscores\"\n      unique: \"must be unique\"\n      blank: \"must be present\"\n      must_begin_with_alphanumeric_or_underscore: \"must begin with a letter, a number or an underscore\"\n      must_end_with_alphanumeric: \"must end with a letter or a number\"\n      must_not_contain_two_special_chars_in_seq: \"must not contain a sequence of 2 or more special chars (.-_)\"\n      must_not_end_with_confusing_suffix: \"must not end with a confusing suffix like .json or .png etc.\"\n    email:\n      invalid: \"is invalid.\"\n      not_allowed: \"is not allowed from that email provider. Please use another email address.\"\n      blocked: \"is not allowed.\"\n      revoked: \"Won't be sending emails to '%{email}' until %{date}.\"\n      does_not_exist: \"N/A\"\n    ip_address:\n      blocked: \"New registrations are not allowed from your IP address.\"\n      max_new_accounts_per_registration_ip: \"New registrations are not allowed from your IP address (maximum limit reached). Contact a staff member.\"\n    website:\n      domain_not_allowed: \"Website is invalid. Allowed domains are: %{domains}\"\n    auto_rejected: \"Rejected automatically due to age. See auto_handle_queued_age site setting.\"\n    destroy_reasons:\n      unused_staged_user: \"Unused staged user\"\n      fixed_primary_email: \"Fixed primary email for staged user\"\n      same_ip_address: \"Same IP address (%{ip_address}) as other users\"\n      inactive_user: \"Inactive user\"\n      reviewable_reject_auto: \"Auto handle queued reviewables\"\n      reviewable_reject: \"Reviewable user rejected\"\n    email_in_spam_header: \"User's first email was flagged as spam\"\n    already_silenced: \"User was already silenced by %{staff} %{time_ago}.\"\n    already_suspended: \"User was already suspended by %{staff} %{time_ago}.\"\n    cannot_delete_has_posts:\n      one: \"User %{username} has %{count} post in a public topic or personal message, so they can't be deleted.\"\n      other: \"User %{username} has %{count} posts in public topics or personal messages, so they can't be deleted.\"\n\n  unsubscribe_mailer:\n    title: \"Unsubscribe Mailer\"\n    subject_template: \"Confirm you no longer want to receive email updates from %{site_title}\"\n    text_body_template: |\n      Someone (possibly you?) requested to no longer send email updates from %{site_domain_name} to this address.\n      If you wish to confirm this, please click this link:\n\n      %{confirm_unsubscribe_link}\n\n\n      If you want to continue receiving email updates, you may ignore this email.\n\n  invite_mailer:\n    title: \"Invite Mailer\"\n    subject_template: \"%{inviter_name} invited you to '%{topic_title}' on %{site_domain_name}\"\n    text_body_template: |\n      %{inviter_name} invited you to a discussion\n\n      > **%{topic_title}**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      If you're interested, click the link below:\n\n      %{invite_link}\n\n  custom_invite_mailer:\n    title: \"Custom Invite Mailer\"\n    subject_template: \"%{inviter_name} invited you to '%{topic_title}' on %{site_domain_name}\"\n    text_body_template: |\n      %{inviter_name} invited you to a discussion\n\n      > **%{topic_title}**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      With this note\n\n      > %{user_custom_message}\n\n      If you're interested, click the link below:\n\n      %{invite_link}\n\n  invite_forum_mailer:\n    title: \"Invite Forum Mailer\"\n    subject_template: \"%{inviter_name} invited you to join %{site_domain_name}\"\n    text_body_template: |\n      %{inviter_name} invited you to join\n\n      > **%{site_title}**\n      >\n      > %{site_description}\n\n      If you're interested, click the link below:\n\n      %{invite_link}\n\n  custom_invite_forum_mailer:\n    title: \"Custom Invite Forum Mailer\"\n    subject_template: \"%{inviter_name} invited you to join %{site_domain_name}\"\n    text_body_template: |\n      %{inviter_name} invited you to join\n\n      > **%{site_title}**\n      >\n      > %{site_description}\n\n      With this note\n\n      > %{user_custom_message}\n\n      If you're interested, click the link below:\n\n      %{invite_link}\n\n  invite_password_instructions:\n    title: \"Invite Password Instructions\"\n    subject_template: \"Set password for your %{site_name} account\"\n    text_body_template: |\n      Thanks for accepting your invitation to %{site_name} -- welcome!\n\n      Click this link to choose a password now:\n      %{base_url}/u/password-reset/%{email_token}\n\n      (If the link above has expired, choose \"I forgot my password\" when logging in with your email address.)\n\n  download_backup_mailer:\n    title: \"Download Backup Mailer\"\n    subject_template: \"[%{email_prefix}] Site Backup Download\"\n    text_body_template: |\n      Here's the [site backup download](%{backup_file_path}) you requested.\n\n      We sent this download link to your validated email address for security reasons.\n\n      (If you *didn't* request this download, you should be seriously concerned -- someone has admin access to your site.)\n    no_token: |\n      Sorry, this backup download link has already been used or has expired.\n\n  admin_confirmation_mailer:\n    title: \"Admin Confirmation\"\n    subject_template: \"[%{email_prefix}] Confirm new Admin Account\"\n    text_body_template: |\n      Please confirm that you'd like to add **%{target_username} (%{target_email})** as an administrator for your forum.\n\n      [Confirm Administrator Account](%{admin_confirm_url})\n\n  test_mailer:\n    title: \"Test Mailer\"\n    subject_template: \"[%{email_prefix}] Email Deliverability Test\"\n    text_body_template: |\n      This is a test email from\n\n      [**%{base_url}**][0]\n\n      We hope you received this email deliverability test OK!\n\n      Here is a [handy checklist for verifying email delivery configuration][1].\n\n      Good luck,\n\n      Your friends at [Discourse](https://www.discourse.org)\n\n      [0]: %{base_url}\n      [1]: https://meta.discourse.org/t/email-delivery-configuration-checklist/209839\n\n  new_version_mailer:\n    title: \"New Version Mailer\"\n    subject_template: \"[%{email_prefix}] New Discourse version, update available\"\n    text_body_template: |\n      Hooray, a new version of [Discourse](https://www.discourse.org) is available!\n\n      Your version: %{installed_version}\n      New version: **%{new_version}**\n\n      - Upgrade using our easy **[one-click browser upgrade](%{base_url}/admin/upgrade)**\n\n      - See what's new in the [release notes](https://meta.discourse.org/tag/release-notes) or view the [raw GitHub changelog](https://github.com/discourse/discourse/commits/main)\n\n      - Visit [meta.discourse.org](https://meta.discourse.org) for news, discussion, and support for Discourse\n\n  new_version_mailer_with_notes:\n    title: \"New Version Mailer with Notes\"\n    subject_template: \"[%{email_prefix}] update available\"\n    text_body_template: |\n      Hooray, a new version of [Discourse](https://www.discourse.org) is available!\n\n      Your version: %{installed_version}\n      New version: **%{new_version}**\n\n      - Upgrade using our easy **[one-click browser upgrade](%{base_url}/admin/upgrade)**\n\n      - See what's new in the [release notes](https://meta.discourse.org/tag/release-notes) or view the [raw GitHub changelog](https://github.com/discourse/discourse/commits/main)\n\n      - Visit [meta.discourse.org](https://meta.discourse.org) for news, discussion, and support for Discourse\n\n      ### Release notes\n\n      %{notes}\n\n  flag_reasons:\n    off_topic: \"Your post was flagged as **off-topic**: the community feels it is not a good fit for the topic, as currently defined by the title and the first post.\"\n    inappropriate: \"Your post was flagged as **inappropriate**: the community feels it is offensive, abusive, or a violation of [our community guidelines](%{base_path}/guidelines).\"\n    spam: \"Your post was flagged as **spam**: the community feels it is an advertisement, something that is overly promotional in nature instead of being useful or relevant to the topic as expected.\"\n    notify_moderators: \"Your post was flagged **for moderator attention**: the community feels something about the post requires manual intervention by a staff member.\"\n    responder:\n      off_topic: \"The post was flagged as **off-topic**: the community feels it is not a good fit for the topic, as currently defined by the title and the first post.\"\n      inappropriate: \"The post was flagged as **inappropriate**: the community feels it is offensive, abusive, or a violation of [our community guidelines](%{base_path}/guidelines).\"\n      spam: \"The post was flagged as **spam**: the community feels it is an advertisement, something that is overly promotional in nature instead of being useful or relevant to the topic as expected.\"\n      notify_moderators: \"The post was flagged **for moderator attention**: the community feels something about the post requires manual intervention by a staff member.\"\n\n  flags_dispositions:\n    agreed: \"Thanks for letting us know. We agree there is an issue and we're looking into it.\"\n    agreed_and_deleted: \"Thanks for letting us know. We agree there is an issue and we've removed the post.\"\n    disagreed: \"Thanks for letting us know. We're looking into it.\"\n    ignored: \"Thanks for letting us know. We're looking into it.\"\n    ignored_and_deleted: \"Thanks for letting us know. We've removed the post.\"\n\n  temporarily_closed_due_to_flags:\n    one: \"This topic is temporarily closed for at least %{count} hour due to a large number of community flags.\"\n    other: \"This topic is temporarily closed for at least %{count} hours due to a large number of community flags.\"\n\n  system_messages:\n    reviewables_reminder:\n      subject_template: \"There are items in the review queue that need reviewing\"\n      text_body_template:\n        one: \"%{mentions} Items were submitted over %{count} hour ago. [Please review them](%{base_url}/review).\"\n        other: \"%{mentions} Items were submitted over %{count} hours ago. [Please review them](%{base_url}/review).\"\n\n    private_topic_title: \"Topic #%{id}\"\n    contents_hidden: \"Please visit the post to see its contents.\"\n\n    post_hidden:\n      title: \"Post Hidden\"\n      subject_template: \"Post hidden by community flags\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your post was hidden.\n\n        <%{base_url}%{url}>\n\n        %{flag_reason}\n\n        This post was hidden due to flags from the community, so please consider how you might revise your post to reflect their feedback. **You can edit your post after %{edit_delay} minutes, and it will be automatically unhidden.**\n\n        However, if the post is hidden by the community a second time, it will remain hidden until handled by staff.\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n\n    post_hidden_again:\n      title: \"Post Hidden again\"\n      subject_template: \"Post hidden by community flags, staff notified\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your post was hidden again.\n\n        <%{base_url}%{url}>\n\n        %{flag_reason}\n\n        The community flagged this post and now it is hidden. **Because this post has been hidden more than once, your post will now remain hidden until it is handled by a staff member.**\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n\n    queued_by_staff:\n      title: \"Post Needs Approval\"\n      subject_template: \"Post hidden by staff, awaiting approval\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your post was hidden.\n\n        <%{base_url}%{url}>\n\n        Your post will remain hidden until a staff member reviews it.\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n\n    flags_disagreed:\n      title: \"Flagged post restored by staff\"\n      subject_template: \"Flagged post restored by staff\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that [your post](%{base_url}%{url}) was restored.\n\n        This post was flagged by the community and a staff member opted to restore it.\n\n        [details=\"Click to expand restored post\"]\n        ``` markdown\n        %{flagged_post_raw_content}\n        ```\n        [/details]\n\n    flags_agreed_and_post_deleted:\n      title: \"Flagged post removed by staff\"\n      subject_template: \"Flagged post removed by staff\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that [your post](%{base_url}%{url}) was removed.\n\n        %{flag_reason}\n\n        This post was flagged by the community and a staff member opted to remove it.\n\n        ``` markdown\n        %{flagged_post_raw_content}\n        ```\n\n        Please review our [community guidelines](%{base_url}/guidelines) for details.\n\n    flags_agreed_and_post_deleted_for_responders:\n      title: \"Reply removed from flagged post by staff\"\n      subject_template: \"Reply removed from flagged post by staff\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that a [post](%{base_url}%{url}) you replied to was removed.\n\n        %{flag_reason}\n\n        This post was flagged by the community and a staff member opted to remove it.\n\n        ``` markdown\n        %{flagged_post_raw_content}\n        ```\n\n        To which you responded\n\n        ``` markdown\n        %{flagged_post_response_raw_content}\n        ```\n\n        For more details on the reason for removal, please review our [community guidelines](%{base_url}/guidelines).\n\n    usage_tips:\n      text_body_template: |\n        For a few quick tips on getting started as a new user, [check out this blog post](https://blog.discourse.org/2016/12/discourse-new-user-tips-and-tricks/).\n\n        As you participate here, we\u2019ll get to know you, and temporary new user limitations will be lifted. Over time you\u2019ll gain [trust levels](https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/) that include special abilities to help us manage our community together.\n\n    welcome_user:\n      title: \"Welcome User\"\n      subject_template: \"Welcome to %{site_name}!\"\n      text_body_template: |\n        Thanks for joining %{site_name}, and welcome!\n\n        %{new_user_tips}\n\n        We believe in [civilized community behavior](%{base_url}/guidelines) at all times.\n\n        Enjoy your stay!\n\n    welcome_tl1_user:\n      title: \"Welcome TL1 User\"\n      subject_template: \"Thanks for spending time with us\"\n      text_body_template: |\n        Hey there. We see you\u2019ve been busy reading, which is fantastic, so we\u2019ve promoted you up a [trust level!](https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/)\n\n        We\u2019re really glad you\u2019re spending time with us and we\u2019d love to know more about you. Take a moment to [fill out your profile](%{base_url}/my/preferences/profile), or feel free to [start a new topic](%{base_url}/categories).\n\n    welcome_staff:\n      title: \"Welcome Staff\"\n      subject_template: \"Congratulations, you\u2019ve been granted %{role} status!\"\n      text_body_template: |\n        You\u2019ve been granted %{role} status by a fellow staff member.\n\n        As a %{role}, you now have access to the <a href='%{base_url}/admin' target='_blank'>admin interface</a>.\n\n        With great power comes great responsibility. If you\u2019re new to moderating, please refer to the [Moderation Guide](https://meta.discourse.org/t/discourse-moderation-guide/63116).\n    welcome_invite:\n      title: \"Welcome Invite\"\n      subject_template: \"Welcome to %{site_name}!\"\n      text_body_template: |\n        Thanks for accepting your invitation to %{site_name} -- welcome!\n\n        - We've created this new account **%{username}** for you. Change your name or password by visiting [your user profile][prefs].\n\n        - When you log in, please **use the same email address from your original invitation** \u2014 otherwise we won't be able to tell it's you!\n\n        %{new_user_tips}\n\n        We believe in [civilized community behavior](%{base_url}/guidelines) at all times.\n\n        Enjoy your stay!\n\n        [prefs]: %{user_preferences_url}\n\n    tl2_promotion_message:\n      subject_template: \"Congratulations on your trust level promotion!\"\n      text_body_template: |\n        We\u2019ve promoted you up another [trust level](https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/)!\n\n        Achieving Trust Level 2 means that you have read and actively participated enough to be considered a member of this community.\n\n        As an experienced user, you might appreciate [this list of handy tips and tricks](https://blog.discourse.org/2016/12/discourse-new-user-tips-and-tricks/).\n\n        We invite you to keep getting involved \u2013 we enjoy having you around.\n\n    backup_succeeded:\n      title: \"Backup Succeeded\"\n      subject_template: \"Backup completed successfully\"\n      text_body_template: |\n        The backup was successful.\n\n        Visit the [admin > backup section](%{base_url}/admin/backups) to download your new backup.\n\n        Here's the log:\n\n        %{logs}\n\n    backup_failed:\n      title: \"Backup Failed\"\n      subject_template: \"Backup failed\"\n      text_body_template: |\n        The backup has failed.\n\n        Here's the log:\n\n        %{logs}\n\n    restore_succeeded:\n      title: \"Restore Succeeded\"\n      subject_template: \"Restore completed successfully\"\n      text_body_template: |\n        The restore was successful.\n\n        Here's the log:\n\n        %{logs}\n\n    restore_failed:\n      title: \"Restore Failed\"\n      subject_template: \"Restore failed\"\n      text_body_template: |\n        The restore has failed.\n\n        Here's the log:\n\n        %{logs}\n\n    bulk_invite_succeeded:\n      title: \"Bulk Invite Succeeded\"\n      subject_template: \"Bulk user invite processed successfully\"\n      text_body_template: |\n        Your bulk user invite file was processed, %{sent} invites mailed, %{skipped} skipped and %{warnings} warning(s).\n\n        ``` text\n        %{logs}\n        ```\n\n    bulk_invite_failed:\n      title: \"Bulk Invite Failed\"\n      subject_template: \"Bulk user invite processed with errors\"\n      text_body_template: |\n        Your bulk user invite file was processed, %{sent} invites mailed, %{skipped} skipped, %{warnings} warning(s) and %{failed} error(s).\n\n        Here's the log:\n\n        ``` text\n        %{logs}\n        ```\n    user_added_to_group_as_owner:\n      title: \"Added to Group as Owner\"\n      subject_template: \"You have been added as an owner of the %{group_name} group\"\n      text_body_template: |\n        You have been added as an owner of the [%{group_name}](%{base_url}%{group_path}) group.\n\n    user_added_to_group_as_member:\n      title: \"Added to Group as Member\"\n      subject_template: \"You have been added as a member of the %{group_name} group\"\n      text_body_template: |\n        You have been added as a member of the [%{group_name}](%{base_url}%{group_path}) group.\n\n    csv_export_succeeded:\n      title: \"CSV Export Succeeded\"\n      subject_template: \"[%{export_title}] Data export complete\"\n      text_body_template: |\n        Your data export was successful! :dvd:\n\n        %{download_link}\n\n        The above download link will be valid for 48 hours.\n\n        The data is compressed as a zip archive. If the archive does not extract itself when you open it, use the tool recommended here: https://www.7-zip.org/\n\n    csv_export_failed:\n      title: \"CSV Export Failed\"\n      subject_template: \"Data export failed\"\n      text_body_template: \"We're sorry, but your data export failed. Please check the logs or [contact a staff member](%{base_url}/about).\"\n\n    email_reject_insufficient_trust_level:\n      title: \"Email Reject insufficient Trust Level\"\n      subject_template: \"[%{email_prefix}] Email issue -- Insufficient Trust Level\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your account does not have the required trust level to post new topics to this email address. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_user_not_found:\n      title: \"Email Reject User Not Found\"\n      subject_template: \"[%{email_prefix}] Email issue -- User Not Found\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your reply was sent from an unknown email address. Try sending from another email address, or [contact a staff member](%{base_url}/about).\n\n    email_reject_screened_email:\n      title: \"Email Reject Screened Email\"\n      subject_template: \"[%{email_prefix}] Email issue -- Blocked Email\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your reply was sent from a blocked email address. Try sending from another email address, or [contact a staff member](%{base_url}/about).\n\n    email_reject_not_allowed_email:\n      title: \"Email Reject Not Allowed Email\"\n      subject_template: \"[%{email_prefix}] Email issue -- Blocked Email\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your reply was sent from a blocked email address. Try sending from another email address, or [contact a staff member](%{base_url}/about).\n\n    email_reject_inactive_user:\n      title: \"Email Reject Inactive User\"\n      subject_template: \"[%{email_prefix}] Email issue -- Inactive User\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your account associated with this email address is not activated. Please activate your account before sending emails in.\n\n    email_reject_silenced_user:\n      title: \"Email Reject Silenced User\"\n      subject_template: \"[%{email_prefix}] Email issue -- Silenced User\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your account associated with this email address has been silenced.\n\n    email_reject_reply_user_not_matching:\n      title: \"Email Reject User Not Matching\"\n      subject_template: \"[%{email_prefix}] Email issue -- Unexpected Reply Address\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your reply was sent from a different email address than the one we expected, so we're not sure if this is the same person. Try sending from another email address, or [contact a staff member](%{base_url}/about).\n\n    email_reject_empty:\n      title: \"Email Reject Empty\"\n      subject_template: \"[%{email_prefix}] Email issue -- No Content\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        We couldn't find any reply content in your email.\n\n        If you're getting this and you _did_ include a reply, try again with simpler formatting.\n\n    email_reject_parsing:\n      title: \"Email Reject Parsing\"\n      subject_template: \"[%{email_prefix}] Email issue -- Content Unrecognized\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        We couldn't find your reply in the email. **Make sure your reply is at the top of the email** -- we can't process inline replies.\n\n    email_reject_invalid_access:\n      title: \"Email Reject Invalid Access\"\n      subject_template: \"[%{email_prefix}] Email issue -- Invalid Access\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your account does not have the privileges to post new topics in that category. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_strangers_not_allowed:\n      title: \"Email Reject Strangers Not Allowed\"\n      subject_template: \"[%{email_prefix}] Email issue -- Invalid Access\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The category you sent this email to only allows replies from users with valid accounts and known email addresses. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_invalid_post:\n      title: \"Email Reject Invalid Post\"\n      subject_template: \"[%{email_prefix}] Email issue -- Posting error\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Some possible causes are: complex formatting, message too large, message too small. Please try again, or post via the website if this continues.\n\n    email_reject_invalid_post_specified:\n      title: \"Email Reject Invalid Post Specified\"\n      subject_template: \"[%{email_prefix}] Email issue -- Posting error\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Reason:\n\n        %{post_error}\n\n        If you can correct the problem, please try again.\n      date_invalid: \"No post creation date found. Is the e-mail missing a Date: header?\"\n\n    email_reject_post_too_short:\n      title: \"Email Reject Post Too Short\"\n      subject_template: \"[%{email_prefix}] Email issue -- Post too short\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        To promote more in depth conversations, very short replies are not allowed. Can you please reply with at least %{count} characters? Alternatively, you can like a post via email by replying with \"+1\".\n\n    email_reject_invalid_post_action:\n      title: \"Email Reject Invalid Post Action\"\n      subject_template: \"[%{email_prefix}] Email issue -- Invalid Post Action\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The Post Action was not recognized. Please try again, or post via the website if this continues.\n\n    email_reject_reply_key:\n      title: \"Email Reject Reply Key\"\n      subject_template: \"[%{email_prefix}] Email issue -- Unknown Reply Key\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The reply key in the email is invalid or unknown, so we can't figure out what this email is in reply to. [Contact a staff member](%{base_url}/about).\n\n    email_reject_bad_destination_address:\n      title: \"Email Reject Bad Destination Address\"\n      subject_template: \"[%{email_prefix}] Email issue -- Unknown To: Address\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Here are some things to check:\n\n          - Do you use more than one email address? Did you reply from a different email address than the one you originally used? Email replies require that you use the same email address when replying.\n\n          - Did your email software properly use the Reply-To: email address when replying? Unfortunately, some email software incorrectly sends replies to the From: address, which won\u2019t work.\n\n          - Was the Message-ID header in the email modified? The Message-ID must be consistent and unchanged.\n\n        Need more help? Reach out to us via the Contact Us details at %{base_url}/about\n\n    email_reject_old_destination:\n      title: \"Email Reject Old Destination\"\n      subject_template: \"[%{email_prefix}] Email issue -- You are trying to reply to an old notification\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        We only accept replies to original notifications for %{number_of_days} days. Please [visit the topic](%{short_url}) to continue the conversation.\n\n    email_reject_topic_not_found:\n      title: \"Email Reject Topic Not Found\"\n      subject_template: \"[%{email_prefix}] Email issue -- Topic Not Found\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The topic you are replying to no longer exists -- perhaps it was deleted? If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_topic_closed:\n      title: \"Email Reject Topic Closed\"\n      subject_template: \"[%{email_prefix}] Email issue -- Topic Closed\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        The topic you are replying to is currently closed and no longer accepting replies. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_auto_generated:\n      title: \"Email Reject Auto Generated\"\n      subject_template: \"[%{email_prefix}] Email issue -- Auto Generated Reply\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        Your email was marked as \"auto generated\", which means it was automatically created by a computer instead of being typed by a human; we can't accept those kinds of emails. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_unrecognized_error:\n      title: \"Email Reject Unrecognized Error\"\n      subject_template: \"[%{email_prefix}] Email issue -- Unrecognized Error\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        There was an unrecognized error while processing your email and it wasn't posted. You should try again, or [contact a staff member](%{base_url}/about).\n\n    email_reject_attachment:\n      title: \"Email Attachment Rejected\"\n      subject_template: \"[%{email_prefix}] Email issue -- Attachment Rejected\"\n      text_body_template: |\n        Unfortunately some attachments in your email message to %{destination} (titled %{former_title}) were rejected.\n\n        Details:\n        %{rejected_errors}\n\n        If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_reply_not_allowed:\n      title: \"Email Reject Reply Not Allowed\"\n      subject_template: \"[%{email_prefix}] Email issue -- Reply Not Allowed\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        You don't have permissions to reply to the topic. If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_reply_to_digest:\n      title: \"Email Reject Reply To Summary\"\n      subject_template: \"[%{email_prefix}] Email issue -- Reply to Summary\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        You replied to a Summary email, which is not accepted.\n\n        If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_reject_too_many_recipients:\n      title: \"Email Reject Too Many Recipients\"\n      subject_template: \"[%{email_prefix}] Email issue -- Too Many Recipients\"\n      text_body_template: |\n        We're sorry, but your email message to %{destination} (titled %{former_title}) didn't work.\n\n        You attempted to email more than %{max_recipients_count} people and our system automatically tagged your email as spam.\n\n        If you believe this is an error, [contact a staff member](%{base_url}/about).\n\n    email_error_notification:\n      title: \"Email Error Notification\"\n      subject_template: \"[%{email_prefix}] Email issue -- POP authentication error\"\n      text_body_template: |\n        Unfortunately, there was an authentication error while polling mails from the POP server.\n\n        Please make sure you have properly configured the POP credentials in [the site settings](%{base_url}/admin/site_settings/category/email).\n\n        If there is a web UI for the POP email account, you may need to log in on the web and check your settings there.\n\n    email_revoked:\n      title: \"Email Revoked\"\n      subject_template: \"Is your email address correct?\"\n      text_body_template: |\n        We\u2019re sorry, but we\u2019re having trouble reaching you via email. Our last few emails to you have all bounced back as undeliverable.\n\n        Can you make sure [your email address](%{base_url}/my/preferences/email) is valid and working? You may also wish to add our email address to your address book / contact list to improve deliverability.\n\n    email_bounced: |\n      The message to %{email} bounced.\n\n      ### Details\n\n      ``` text\n      %{raw}\n      ```\n\n    ignored_users_summary:\n      title: \"Ignored User passed threshold\"\n      subject_template: \"A user is being ignored by many other users\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to inform you that @%{username} has been ignored by %{ignores_threshold} users. This could indicate a problem is developing in your community.\n\n        You might want to [review recent posts](%{base_url}/u/%{username}/summary) from this user, and potentially other users in the [ignored and muted user report](%{base_url}/admin/reports/top_ignored_users).\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n\n    too_many_spam_flags:\n      title: \"Too Many Spam Flags\"\n      subject_template: \"New account on hold\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your posts have been temporarily hidden because they were flagged by the community.\n\n        As a precautionary measure, your new account has been silenced and will be unable to create replies or topics until a staff member can review your account. We apologize for the inconvenience.\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n    too_many_tl3_flags:\n      title: \"Too Many TL3 Flags\"\n      subject_template: \"New account on hold\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know you that your account has been placed on hold due to a large number of community flags.\n\n        As a precautionary measure, your new account has been silenced from creating new replies or topics until a staff member can review your account. We apologize for the inconvenience.\n\n        For additional guidance, please refer to our [community guidelines](%{base_url}/guidelines).\n    silenced_by_staff:\n      title: \"Silenced by Staff\"\n      subject_template: \"Account temporarily on hold\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your account has been temporarily placed on hold as a precautionary measure.\n\n        Please do continue to browse, but you won't be able to reply or create topics until a [staff member](%{base_url}/about) reviews your most recent posts. We apologize for the inconvenience.\n\n        For additional guidance, refer to our [community guidelines](%{base_url}/guidelines).\n\n    user_automatically_silenced:\n      title: \"User Automatically Silenced\"\n      subject_template: \"New user %{username} silenced by community flags\"\n      text_body_template: |\n        This is an automated message.\n\n        The new user [%{username}](%{user_url}) was automatically silenced because multiple users flagged %{username}'s post(s).\n\n        Please [review the flags](%{base_url}/admin/flags). If %{username} was incorrectly silenced from posting, click the unsilence button on [the admin page for this user](%{user_url}).\n\n        This threshold can be changed via the `silence_new_user` site settings.\n\n    spam_post_blocked:\n      title: \"Spam Post Blocked\"\n      subject_template: \"New user %{username} posts blocked due to repeated links\"\n      text_body_template: |\n        This is an automated message.\n\n        The new user [%{username}](%{user_url}) tried to create multiple posts with links to %{domains}, but those posts were blocked to avoid spam. The user is still able to create new posts that do not link to %{domains}.\n\n        Please [review the user](%{user_url}).\n\n        This can be modified via the `newuser_spam_host_threshold` and `allowed_spam_host_domains` site settings. Consider adding %{domains} to the allowlist if they should be exempt.\n\n    unsilenced:\n      title: \"Unsilenced\"\n      subject_template: \"Account no longer on hold\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that your account is no longer on hold after staff review.\n\n        You can now create new replies and topics again. Thank you for your patience.\n\n    pending_users_reminder:\n      title: \"Pending Users Reminder\"\n      subject_template:\n        one: \"%{count} user waiting for approval\"\n        other: \"%{count} users waiting for approval\"\n      text_body_template: |\n        There are new user signups waiting to be approved (or rejected) before they can access this forum.\n\n        [Please review them](%{base_url}/review).\n\n    download_remote_images_disabled:\n      title: \"Download Remote Images Disabled\"\n      subject_template: \"Downloading remote images disabled\"\n      text_body_template: \"The `download_remote_images_to_local` setting was disabled because the disk space limit at `download_remote_images_threshold` was reached.\"\n\n    dashboard_problems:\n      title: \"Dashboard Problems\"\n      subject_template: \"New advice on your site dashboard\"\n      text_body_template: |\n        We have some new advice and recommendations for you based on your current site settings.\n\n        [Visit your site dashboard](%{base_url}/admin) to see it.\n\n        If nothing is visible on your dashboard, another staff member may have already acted on this advice. A list of staff actions can be found in your [Staff Action Logs](%{base_url}/admin/logs/staff_action_logs).\n\n    new_user_of_the_month:\n      title: \"You're a New User of the Month!\"\n      subject_template: \"You're a New User of the Month!\"\n      text_body_template: |\n        Congratulations, you've earned the **New User of the Month award for %{month_year}**. :trophy:\n\n        This award is only granted to two new users per month, and it will be permanently visible on [the badges page](%{url}).\n\n        You've quickly become a valuable member of our community. Thanks for joining, and keep up the great work!\n\n    queued_posts_reminder:\n      title: \"Queued Posts Reminder\"\n      subject_template:\n        one: \"%{count} post waiting to be reviewed\"\n        other: \"%{count} posts waiting to be reviewed\"\n      text_body_template: |\n        Hello,\n\n        Posts from new users were held for moderation and are currently waiting to be reviewed. [Approve or reject them here](%{base_url}/review?type=ReviewableQueuedPost).\n\n  unsubscribe_link: |\n    To unsubscribe from these emails, [click here](%{unsubscribe_url}).\n\n  unsubscribe_link_and_mail: |\n    To unsubscribe from these emails, [click here](%{unsubscribe_url}).\n\n  unsubscribe_mailing_list: |\n    You are receiving this because you enabled mailing list mode.\n\n    To unsubscribe from these emails, [click here](%{unsubscribe_url}).\n\n  subject_re: \"Re: \"\n  subject_pm: \"[PM] \"\n  email_from: \"%{user_name} via %{site_name}\"\n  email_from_without_site: \"%{group_name}\"\n\n  user_notifications:\n    previous_discussion: \"Previous Replies\"\n    reached_limit:\n      one: \"Heads up: We send a maximum of %{count} daily email. Check the site to see the ones that might be held back.\"\n      other: \"Heads up: We send a maximum of %{count} daily emails. Check the site to see the ones that might be held back. PS thanks for being popular!\"\n    in_reply_to: \"In Reply To\"\n    unsubscribe:\n      title: \"Unsubscribe\"\n      description: \"Not interested in getting these emails? No problem! Click below to unsubscribe instantly:\"\n\n    header_instructions: \"\"\n    reply_by_email: \"[Visit Topic](%{base_url}%{url}) or reply to this email to respond.\"\n    reply_by_email_pm: \"[Visit Message](%{base_url}%{url}) or reply to this email to respond to %{participants}.\"\n    only_reply_by_email: \"Reply to this email to respond.\"\n    only_reply_by_email_pm: \"Reply to this email to respond to %{participants}.\"\n    visit_link_to_respond: \"[Visit Topic](%{base_url}%{url}) to respond.\"\n    visit_link_to_respond_pm: \"[Visit Message](%{base_url}%{url}) to respond to %{participants}.\"\n    reply_above_line: \"## Please type your reply above this line. ##\"\n\n    posted_by: \"Posted by %{username} on %{post_date}\"\n\n    pm_participants: \"Participants: %{participants}\"\n    more_pm_participants:\n      one: \"%{participants} and %{count} other\"\n      other: \"%{participants} and %{count} others\"\n\n    invited_group_to_private_message_body: |\n      %{username} invited @%{group_name} to a message\n\n      > **[%{topic_title}](%{topic_url})**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      To join the message, click the link below:\n\n      %{topic_url}\n\n    invited_to_private_message_body: |\n      %{username} invited you to a message\n\n      > **[%{topic_title}](%{topic_url})**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      To join the message, click the link below:\n\n      %{topic_url}\n\n    invited_to_topic_body: |\n      %{username} invited you to a discussion\n\n      > **[%{topic_title}](%{topic_url})**\n      >\n      > %{topic_excerpt}\n\n      at\n\n      > %{site_title} -- %{site_description}\n\n      To join the discussion, click the link below:\n\n      %{topic_url}\n\n    user_invited_to_private_message_pm_group:\n      title: \"User Invited Group to PM\"\n      subject_template: \"[%{email_prefix}] %{username} invited @%{group_name} to a message '%{topic_title}'\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{respond_instructions}\n\n    user_invited_to_private_message_pm:\n      title: \"User Invited to PM\"\n      subject_template: \"[%{email_prefix}] %{username} invited you to a message '%{topic_title}'\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{respond_instructions}\n\n    user_invited_to_private_message_pm_staged:\n      title: \"User Invited to PM Staged\"\n      subject_template: \"[%{email_prefix}] %{username} invited you to a message '%{topic_title}'\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{respond_instructions}\n\n    user_invited_to_topic:\n      title: \"User Invited to Topic\"\n      subject_template: \"[%{email_prefix}] %{username} invited you to '%{topic_title}'\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{respond_instructions}\n\n    user_replied:\n      title: \"User Replied\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_replied_pm:\n      title: \"User Replied PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_quoted:\n      title: \"User Quoted\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_linked:\n      title: \"User Linked\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_mentioned:\n      title: \"User Mentioned\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_mentioned_pm:\n      title: \"User Mentioned PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_group_mentioned:\n      title: \"User Group Mentioned\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_group_mentioned_pm:\n      title: \"User Group Mentioned PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_group_mentioned_pm_group:\n      title: \"User Group Mentioned PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_posted:\n      title: \"User Posted\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_watching_first_post:\n      title: \"User Watching First Post\"\n      subject_template: \"[%{email_prefix}] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_posted_pm:\n      title: \"User Posted PM\"\n      subject_template: \"[%{email_prefix}] [PM] %{topic_title}\"\n      text_body_template: |\n        %{header_instructions}\n\n        %{message}\n\n        %{context}\n\n        %{respond_instructions}\n\n    user_posted_pm_staged:\n      title: \"User Posted PM Staged\"\n      subject_template: \"%{optional_re}%{topic_title}\"\n      text_body_template: |\n\n        %{message}\n\n    account_suspended:\n      title: \"Account Suspended\"\n      subject_template: \"[%{email_prefix}] Your account has been suspended\"\n      text_body_template: |\n        You have been suspended from the forum until %{suspended_till}.\n\n        Reason - %{reason}\n\n    account_suspended_forever:\n      title: \"Account Suspended\"\n      subject_template: \"[%{email_prefix}] Your account has been suspended\"\n      text_body_template: |\n        You have been suspended from the forum.\n\n        Reason - %{reason}\n\n    account_silenced:\n      title: \"Account Silenced\"\n      subject_template: \"[%{email_prefix}] Your account has been silenced\"\n      text_body_template: |\n        You have been silenced from the forum until %{silenced_till}.\n\n        Reason - %{reason}\n\n    account_silenced_forever:\n      title: \"Account Silenced\"\n      subject_template: \"[%{email_prefix}] Your account has been silenced\"\n      text_body_template: |\n        You have been silenced from the forum.\n\n        Reason - %{reason}\n\n    account_exists:\n      title: \"Account already exists\"\n      subject_template: \"[%{email_prefix}] Account already exists\"\n      text_body_template: |\n        You just tried to create an account at %{site_name}, or tried to change the email of an account to %{email}. However, an account already exists for %{email}.\n\n        If you forgot your password, [reset it now](%{base_url}/password-reset).\n\n        If you didn\u2019t try to create an account for %{email} or change your email address, don\u2019t worry \u2013 you can safely ignore this message.\n\n        If you have any questions, [contact our friendly staff](%{base_url}/about).\n\n    account_second_factor_disabled:\n      title: \"Two-Factor Authentication disabled\"\n      subject_template: \"[%{email_prefix}] Two-Factor Authentication disabled\"\n      text_body_template: |\n        Two-factor authentication has been disabled on your account at %{site_name}. You can now log in with only your password; an additional authentication code is no longer required.\n\n        If you did not choose to disable two-factor authentication, someone may have compromised your account.\n\n        If you have any questions, [contact our friendly staff](%{base_url}/about).\n\n    digest:\n      why: \"A brief summary of %{site_link} since your last visit on %{last_seen_at}\"\n      since_last_visit: \"Since your last visit\"\n      new_topics: \"New Topics\"\n      unread_notifications: \"Unread Notifications\"\n      unread_high_priority: \"Unread High Priority Notifications\"\n      liked_received: \"Likes Received\"\n      new_users: \"New Users\"\n      popular_topics: \"Popular Topics\"\n      follow_topic: \"Follow this topic\"\n      join_the_discussion: \"Read More\"\n      popular_posts: \"Popular Posts\"\n      more_new: \"New for you\"\n      subject_template: \"[%{email_prefix}] Summary\"\n      unsubscribe: \"This summary is sent from %{site_link} when we haven't seen you in a while. Change %{email_preferences_link}, or %{unsubscribe_link} to unsubscribe.\"\n      your_email_settings: \"your email settings\"\n      click_here: \"click here\"\n      from: \"%{site_name}\"\n      preheader: \"A brief summary since your last visit on %{last_seen_at}\"\n      custom:\n        html:\n          header: \"\"\n          below_post_1: \"\"\n          below_post_2: \"\"\n          below_post_3: \"\"\n          below_post_4: \"\"\n          below_post_5: \"\"\n          above_popular_topics: \"\"\n          below_popular_topics: \"\"\n          above_footer: \"\"\n          below_footer: \"\"\n        text:\n          below_post_1: \"\"\n          below_post_2: \"\"\n          below_post_3: \"\"\n          below_post_4: \"\"\n          below_post_5: \"\"\n          above_popular_topics: \"\"\n          below_popular_topics: \"\"\n          above_footer: \"\"\n          below_footer: \"\"\n\n    forgot_password:\n      title: \"Forgot Password\"\n      subject_template: \"[%{email_prefix}] Password reset\"\n      text_body_template: |\n        Somebody asked to reset your password on [%{site_name}](%{base_url}).\n\n        If it was not you, you can safely ignore this email.\n\n        Click the following link to choose a new password:\n        %{base_url}/u/password-reset/%{email_token}\n\n    email_login:\n      title: \"Log in via link\"\n      subject_template: \"[%{email_prefix}] Log in via link\"\n      text_body_template: |\n        Here's your link to log in at [%{site_name}](%{base_url}).\n\n        If you did not request this link, you can safely ignore this email.\n\n        Click the following link to log in:\n        %{base_url}/session/email-login/%{email_token}\n\n    set_password:\n      title: \"Set Password\"\n      subject_template: \"[%{email_prefix}] Set Password\"\n      text_body_template: |\n        Somebody asked to add a password to your account on [%{site_name}](%{base_url}). Alternatively, you can log in using any supported online service (Google, Facebook, etc) that is associated with this validated email address.\n\n        If you did not make this request, you can safely ignore this email.\n\n        Click the following link to choose a password:\n        %{base_url}/u/password-reset/%{email_token}\n\n    admin_login:\n      title: \"Admin Login\"\n      subject_template: \"[%{email_prefix}] Login\"\n      text_body_template: |\n        Somebody asked to log in to your account on [%{site_name}](%{base_url}).\n\n        If you did not make this request, you can safely ignore this email.\n\n        Click the following link to log in:\n        %{base_url}/session/email-login/%{email_token}\n\n    account_created:\n      title: \"Account Created\"\n      subject_template: \"[%{email_prefix}] Your New Account\"\n      text_body_template: |\n        A new account was created for you at %{site_name}\n\n        Click the following link to choose a password for your new account:\n        %{base_url}/u/password-reset/%{email_token}\n\n    confirm_new_email:\n      title: \"Confirm New Email\"\n      subject_template: \"[%{email_prefix}] Confirm your new email address\"\n      text_body_template: |\n        Confirm your new email address for %{site_name} by clicking on the following link:\n\n        %{base_url}/u/confirm-new-email/%{email_token}\n\n        If you did not request this change, please contact a [site admin](%{base_url}/about).\n\n    confirm_new_email_via_admin:\n      title: \"Confirm New Email\"\n      subject_template: \"[%{email_prefix}] Confirm your new email address\"\n      text_body_template: |\n        Confirm your new email address for %{site_name} by clicking on the following link:\n\n        %{base_url}/u/confirm-new-email/%{email_token}\n\n        This email change was requested by a site admin. If you did not request this change, please contact a [site admin](%{base_url}/about).\n\n    confirm_old_email:\n      title: \"Confirm Old Email\"\n      subject_template: \"[%{email_prefix}] Confirm your current email address\"\n      text_body_template: |\n        Before we can change your email address, we need you to confirm that you control\n        the current email account. After you complete this step, we will have you confirm\n        the new email address.\n\n        Confirm your current email address for %{site_name} by clicking on the following link:\n\n        %{base_url}/u/confirm-old-email/%{email_token}\n\n    confirm_old_email_add:\n      title: \"Confirm Old Email (Add)\"\n      subject_template: \"[%{email_prefix}] Confirm your current email address\"\n      text_body_template: |\n        Before we can add a new email address, we need you to confirm that you control\n        the current email account. After you complete this step, we will have you confirm\n        the new email address.\n\n        Confirm your current email address for %{site_name} by clicking on the following link:\n\n        %{base_url}/u/confirm-old-email/%{email_token}\n\n    notify_old_email:\n      title: \"Notify Old Email\"\n      subject_template: \"[%{email_prefix}] Your email address has been changed\"\n      text_body_template: |\n        This is an automated message to let you know that your email address for\n        %{site_name} has been changed. If this was done in error, please contact\n        a site administrator.\n\n        Your email address has been changed to:\n\n        %{new_email}\n\n    notify_old_email_add:\n      title: \"Notify Old Email (Add)\"\n      subject_template: \"[%{email_prefix}] A new email address has been added\"\n      text_body_template: |\n        This is an automated message to let you know that an email address for\n        %{site_name} has been added. If this was done in error, please contact\n        a site administrator.\n\n        Your added email address is:\n\n        %{new_email}\n\n    signup_after_approval:\n      title: \"Signup After Approval\"\n      subject_template: \"You've been approved on %{site_name}!\"\n      text_body_template: |\n        Welcome to %{site_name}!\n\n        A staff member approved your account on %{site_name}.\n\n        You can now access your new account by logging in at:\n        %{base_url}\n\n        If the above link is not clickable, try copying and pasting it into the address bar of your web browser.\n\n        %{new_user_tips}\n\n        We believe in [civilized community behavior](%{base_url}/guidelines) at all times.\n\n        Enjoy your stay!\n\n    signup_after_reject:\n      title: \"Signup After Reject\"\n      subject_template: \"You've been rejected on %{site_name}\"\n      text_body_template: |\n        A staff member rejected your account on %{site_name}.\n\n        %{reject_reason}\n\n    signup:\n      title: \"Signup\"\n      subject_template: \"[%{email_prefix}] Confirm your new account\"\n      text_body_template: |\n        Welcome to %{site_name}!\n\n        Click the following link to confirm and activate your new account:\n        %{base_url}/u/activate-account/%{email_token}\n\n        If the above link is not clickable, try copying and pasting it into the address bar of your web browser.\n\n    activation_reminder:\n      title: \"Activation Reminder\"\n      subject_template: \"[%{email_prefix}] Reminder to confirm your account\"\n      text_body_template: |\n        Welcome to %{site_name}!\n\n        This is a friendly reminder to activate your account.\n\n        Click the following link to confirm and activate your new account:\n        %{base_url}/u/activate-account/%{email_token}\n\n        If the above link is not clickable, try copying and pasting it into the address bar of your web browser.\n\n    suspicious_login:\n      title: \"New Login Alert\"\n      subject_template: \"[%{site_name}] New Login from %{location}\"\n      text_body_template: |\n        Hello,\n\n        We noticed a login from a device or location you don\u2019t usually use. Was this you?\n\n         - Location: %{location} (%{client_ip})\n         - Browser: %{browser}\n         - Device: %{device} \u2013 %{os}\n\n        If this was you, great! There\u2019s nothing else you need to do.\n\n        If this was not you, please [review your existing sessions](%{base_url}/my/preferences/security) and consider changing your password.\n\n    post_approved:\n      title: \"Your post was approved\"\n      subject_template: \"[%{site_name}] Your post was approved\"\n      text_body_template: |\n        Hello,\n\n        This is an automated message from %{site_name} to let you know that [your post](%{base_url}%{post_url}) was approved.\n  page_forbidden:\n    title: \"Oops! That page is private.\"\n\n  site_setting_missing: \"`%{name}` site setting has to be set.\"\n\n  page_not_found:\n    page_title: \"Page Not Found\"\n    title: \"Oops! That page doesn\u2019t exist or is private.\"\n    popular_topics: \"Popular\"\n    recent_topics: \"Recent\"\n    see_more: \"More\"\n    search_title: \"Search this site\"\n    search_button: \"Search\"\n\n  offline:\n    title: \"Cannot load app\"\n    offline_page_message: \"It looks like you are offline! Please check your network connection and try again.\"\n\n  login_required:\n    welcome_message: |\n      ## [Welcome to %{title}](#welcome)\n      An account is required. Please create an account or log in to continue.\n    welcome_message_invite_only: |\n      ## [Welcome to %{title}](#welcome)\n      An account is required. Please ask an existing member for an invite or log in to continue.\n\n  deleted: \"deleted\"\n\n  image: \"image\"\n\n  upload:\n    edit_reason: \"downloaded local copies of images\"\n    unauthorized: \"Sorry, the file you are trying to upload is not authorized (authorized extensions: %{authorized_extensions}).\"\n    pasted_image_filename: \"Pasted image\"\n    store_failure: \"Failed to store upload #%{upload_id} for user #%{user_id}.\"\n    file_missing: \"Sorry, you must provide a file to upload.\"\n    empty: \"Sorry, but the file you provided is empty.\"\n    failed: \"Sorry, but your upload failed. Please try again.\"\n    png_to_jpg_conversion_failure_message: \"An error happened when converting from PNG to JPG.\"\n    optimize_failure_message: \"An error occurred while optimizing the uploaded image.\"\n    download_failure: \"Downloading the file from the external provider failed.\"\n    size_mismatch_failure: \"The size of the file uploaded to S3 did not match the external upload's intended size. %{additional_detail}\"\n    create_multipart_failure: \"Failed to create multipart upload in the external store.\"\n    abort_multipart_failure: \"Failed to abort multipart upload in the external store.\"\n    complete_multipart_failure: \"Failed to complete multipart upload in the external store.\"\n    external_upload_not_found: \"The upload was not found in the external store. %{additional_detail}\"\n    checksum_mismatch_failure: \"The checksum of the file you uploaded does not match. The file contents may have changed on upload. Please try again.\"\n    cannot_promote_failure: \"The upload cannot be completed, it may have already completed or previously failed.\"\n    size_zero_failure: \"Sorry, it looks like something has gone wrong, the file you are trying to upload is 0 bytes. Please try again.\"\n    attachments:\n      too_large: \"Sorry, the file you are trying to upload is too big (maximum size is %{max_size_kb}KB).\"\n      too_large_humanized: \"Sorry, the file you are trying to upload is too big (maximum size is %{max_size}).\"\n    images:\n      too_large: \"Sorry, the image you are trying to upload is too big (maximum size is %{max_size_kb}KB), please resize it and try again.\"\n      too_large_humanized: \"Sorry, the image you are trying to upload is too big (maximum size is %{max_size}), please resize it and try again.\"\n      larger_than_x_megapixels: \"Sorry, the image you are trying to upload is too large (maximum dimension is %{max_image_megapixels}-megapixels), please resize it and try again.\"\n      size_not_found: \"Sorry, but we couldn't determine the size of the image. Maybe your image is corrupted?\"\n    placeholders:\n      too_large: \"(image larger than %{max_size_kb}KB)\"\n      too_large_humanized: \"(image larger than %{max_size})\"\n\n  avatar:\n    missing: \"Sorry, we can't find any avatar associated with that email address. Can you try uploading it again?\"\n\n  flag_reason:\n    sockpuppet: \"A new user created a topic, and another new user at the same IP address (%{ip_address}) replied. See the <a href='%{base_path}/admin/site_settings/category/spam'>`flag_sockpuppets`</a> site setting.\"\n    spam_hosts: \"This new user tried to create multiple posts with links to the same domain. All posts from this user that include links should be reviewed. See the <a href='%{base_path}/admin/site_settings/category/spam'>`newuser_spam_host_threshold`</a> site setting.\"\n\n  skipped_email_log:\n    exceeded_emails_limit: \"Exceeded max_emails_per_day_per_user\"\n    exceeded_bounces_limit: \"Exceeded bounce_score_threshold\"\n    mailing_list_no_echo_mode: \"Mailing list notifications disabled for user's own posts\"\n    user_email_no_user: \"Can't find user with id %{user_id}\"\n    user_email_post_not_found: \"Can't find a post with id %{post_id}\"\n    user_email_anonymous_user: \"User is anonymous\"\n    user_email_user_suspended_not_pm: \"User is suspended, not a message\"\n    user_email_seen_recently: \"User was seen recently\"\n    user_email_notification_already_read: \"The notification this email is about has already been read\"\n    user_email_notification_topic_nil: \"post.topic is nil\"\n    user_email_post_user_deleted: \"User of the post has been deleted.\"\n    user_email_post_deleted: \"post was deleted by the author\"\n    user_email_user_suspended: \"user was suspended\"\n    user_email_already_read: \"user has already read this post\"\n    user_email_access_denied: \"user is not allowed to see this post\"\n    user_email_no_email: \"No email associated with user id %{user_id}\"\n    sender_message_blank: \"message is blank\"\n    sender_message_to_blank: \"message.to is blank\"\n    sender_text_part_body_blank: \"text_part.body is blank\"\n    sender_body_blank: \"body is blank\"\n    sender_post_deleted: \"post has been deleted\"\n    sender_message_to_invalid: \"recipient has invalid email address\"\n    sender_topic_deleted: \"topic has been deleted\"\n    group_smtp_post_deleted: \"post has been deleted\"\n    group_smtp_topic_deleted: \"topic has been deleted\"\n    group_smtp_disabled_for_group: \"smtp has been disabled for the group\"\n\n  color_schemes:\n    base_theme_name: \"Base\"\n    light: \"Light\"\n    dark: \"Dark\"\n    neutral: \"Neutral\"\n    grey_amber: \"Grey Amber\"\n    shades_of_blue: \"Shades of Blue\"\n    latte: \"Latte\"\n    summer: \"Summer\"\n    dark_rose: \"Dark Rose\"\n    wcag: \"WCAG Light\"\n    wcag_theme_name: \"WCAG Light\"\n    dracula: \"Dracula\"\n    dracula_theme_name: \"Dracula\"\n    solarized_light: \"Solarized Light\"\n    solarized_light_theme_name: \"Solarized Light\"\n    solarized_dark: \"Solarized Dark\"\n    solarized_dark_theme_name: \"Solarized Dark\"\n    wcag_dark: \"WCAG Dark\"\n    wcag_dark_theme_name: \"WCAG Dark\"\n    default_theme_name: \"Default\"\n    light_theme_name: \"Light\"\n    dark_theme_name: \"Dark\"\n    neutral_theme_name: \"Neutral\"\n    grey_amber_theme_name: \"Grey Amber\"\n    shades_of_blue_theme_name: \"Shades of Blue\"\n    latte_theme_name: \"Latte\"\n    summer_theme_name: \"Summer\"\n    dark_rose_theme_name: \"Dark Rose\"\n\n  edit_this_page: \"Edit this page\"\n\n  csv_export:\n    boolean_yes: \"Yes\"\n    boolean_no: \"No\"\n    rate_limit_error: \"Posts can be downloaded once per day, please try again tomorrow.\"\n\n  static_topic_first_reply: |\n    Edit the first post in this topic to change the contents of the %{page_name} page.\n\n  guidelines_topic:\n    title: \"FAQ/Guidelines\"\n    body: |\n      <a name=\"civilized\"></a>\n\n      ## [This is a Civilized Place for Public Discussion](#civilized)\n\n      Please treat this discussion forum with the same respect you would a public park. We, too, are a shared community resource &mdash; a place to share skills, knowledge and interests through ongoing conversation.\n\n      These are not hard and fast rules. They are guidelines to aid the human judgment of our community and keep this a kind, friendly place for civilized public discourse.\n\n      <a name=\"improve\"></a>\n\n      ## [Improve the Discussion](#improve)\n\n      Help us make this a great place for discussion by always adding something positive to the discussion, however small. If you are not sure your post adds to the conversation, think over what you want to say and try again later.\n\n      One way to improve the discussion is by discovering ones that are already happening. Spend time browsing the topics here before replying or starting your own, and you\u2019ll have a better chance of meeting others who share your interests.\n\n      The topics discussed here matter to us, and we want you to act as if they matter to you, too. Be respectful of the topics and the people discussing them, even if you disagree with some of what is being said.\n\n      <a name=\"agreeable\"></a>\n\n      ## [Be Agreeable, Even When You Disagree](#agreeable)\n\n      You may wish to respond by disagreeing. That\u2019s fine. But remember to _criticize ideas, not people_. Please avoid:\n\n      * Name-calling\n      * Ad hominem attacks\n      * Responding to a post\u2019s tone instead of its actual content\n      * Knee-jerk contradiction\n\n      Instead, provide thoughtful insights that improve the conversation.\n\n      <a name=\"participate\"></a>\n\n      ## [Your Participation Counts](#participate)\n\n      The conversations we have here set the tone for every new arrival. Help us influence the future of this community by choosing to engage in discussions that make this forum an interesting place to be &mdash; and avoiding those that do not.\n\n      Discourse provides tools that enable the community to collectively identify the best (and worst) contributions: bookmarks, likes, flags, replies, edits, watching, muting and so forth. Use these tools to improve your own experience, and everyone else\u2019s, too.\n\n      Let\u2019s leave our community better than we found it.\n\n      <a name=\"flag-problems\"></a>\n\n      ## [If You See a Problem, Flag It](#flag-problems)\n\n      Moderators have special authority; they are responsible for this forum. But so are you. With your help, moderators can be community facilitators, not just janitors or police.\n\n      When you see bad behavior, don\u2019t reply. Replying encourages bad behavior by acknowledging it, consumes your energy, and wastes everyone\u2019s time. _Just flag it_. If enough flags accrue, action will be taken, either automatically or by moderator intervention.\n\n      In order to maintain our community, moderators reserve the right to remove any content and any user account for any reason at any time. Moderators do not preview new posts; the moderators and site operators take no responsibility for any content posted by the community.\n\n      <a name=\"be-civil\"></a>\n\n      ## [Always Be Civil](#be-civil)\n\n      Nothing sabotages a healthy conversation like rudeness:\n\n      * Be civil. Don\u2019t post anything that a reasonable person would consider offensive, abusive, or hate speech.\n      * Keep it clean. Don\u2019t post anything obscene or sexually explicit.\n      * Respect each other. Don\u2019t harass or grief anyone, impersonate people, or expose their private information.\n      * Respect our forum. Don\u2019t post spam or otherwise vandalize the forum.\n\n      These are not concrete terms with precise definitions &mdash; avoid even the _appearance_ of any of these things. If you\u2019re unsure, ask yourself how you would feel if your post was featured on the front page of a major news site.\n\n      This is a public forum, and search engines index these discussions. Keep the language, links, and images safe for family and friends.\n\n      <a name=\"keep-tidy\"></a>\n\n      ## [Keep It Tidy](#keep-tidy)\n\n      Make the effort to put things in the right place, so that we can spend more time discussing and less cleaning up. So:\n\n      * Don\u2019t start a topic in the wrong category; please read the category definitions.\n      * Don\u2019t cross-post the same thing in multiple topics.\n      * Don\u2019t post no-content replies.\n      * Don\u2019t divert a topic by changing it midstream.\n      * Don\u2019t sign your posts &mdash; every post has your profile information attached to it.\n\n      Rather than posting \u201c+1\u201d or \u201cAgreed\u201d, use the Like button. Rather than taking an existing topic in a radically different direction, use Reply as a Linked Topic.\n\n      <a name=\"stealing\"></a>\n\n      ## [Post Only Your Own Stuff](#stealing)\n\n      You may not post anything digital that belongs to someone else without permission. You may not post descriptions of, links to, or methods for stealing someone\u2019s intellectual property (software, video, audio, images), or for breaking any other law.\n\n      <a name=\"power\"></a>\n\n      ## [Powered by You](#power)\n\n      This site is operated by your [friendly local staff](%{base_path}/about) and *you*, the community. If you have any further questions about how things should work here, open a new topic in the [site feedback category](%{base_path}/c/site-feedback) and let\u2019s discuss! If there\u2019s a critical or urgent issue that can\u2019t be handled by a meta topic or flag, contact us via the [staff page](%{base_path}/about).\n\n      <a name=\"tos\"></a>\n\n      ## [Terms of Service](#tos)\n\n      Yes, legalese is boring, but we must protect ourselves &ndash; and by extension, you and your data &ndash; against unfriendly folks. We have a [Terms of Service](%{base_path}/tos) describing your (and our) behavior and rights related to content, privacy, and laws. To use this service, you must agree to abide by our [TOS](%{base_path}/tos).\n\n  tos_topic:\n    title: \"Terms of Service\"\n    body: |\n      These terms govern use of the Internet forum at <%{base_url}>. To use the forum, you must agree to these terms with %{company_name}, the company that runs the forum.\n\n      The company may offer other products and services, under different terms. These terms apply only to use of the forum.\n\n      Skip to:\n\n      - [Important Terms](#heading--important-terms)\n      - [Your Permission to Use the Forum](#heading--permission)\n      - [Conditions for Use of the Forum](#heading--conditions)\n      - [Acceptable Use](#heading--acceptable-use)\n      - [Content Standards](#heading--content-standards)\n      - [Enforcement](#heading--enforcement)\n      - [Your Account](#heading--your-account)\n      - [Your Content](#heading--your-content)\n      - [Your Responsibility](#heading--responsibility)\n      - [Disclaimers](#heading--disclaimers)\n      - [Limits on Liability](#heading--liability)\n      - [Feedback](#heading--feedback)\n      - [Termination](#heading--termination)\n      - [Disputes](#heading--disputes)\n      - [General Terms](#heading--general)\n      - [Contact](#heading--contact)\n      - [Changes](#heading--changes)\n\n      <h2 id=\"heading--important-terms\"><a href=\"#heading--important-terms\">Important Terms</a></h2>\n\n      ***These terms include a number of important provisions that affect your rights and responsibilities, such as the disclaimers in [Disclaimers](#heading--disclaimers), limits on the company's liability to you in [Limits on Liability](#heading--liability), your agreement to cover the company for damages caused by your misuse of the forum in [Responsibility for Your Use](#heading--responsibility), and an agreement to arbitrate disputes in [Disputes](#heading--disputes).***\n\n      <h2 id=\"heading--permission\"><a href=\"#heading--permission\">Your Permission to Use the Forum</a></h2>\n\n      Subject to these terms, the company gives you permission to use the forum. Everyone needs to agree to these terms to use the forum.\n\n      <h2 id=\"heading--conditions\"><a href=\"#heading--conditions\">Conditions for Use of the Forum</a></h2>\n\n      Your permission to use the forum is subject to the following conditions:\n\n      1. You must be at least thirteen years old.\n\n      2. You may no longer use the forum if the company contacts you directly to say that you may not.\n\n      3. You must use the forum in accordance with [Acceptable Use](#heading--acceptable-use) and [Content Standards](#heading--content-standards).\n\n      <h2 id=\"heading--acceptable-use\"><a href=\"#heading--acceptable-use\">Acceptable Use</a></h2>\n\n      1. You may not break the law using the forum.\n\n      2. You may not use or try to use another's account on the forum without their specific permission.\n\n      3. You may not buy, sell, or otherwise trade in user names or other unique identifiers on the forum.\n\n      4. You may not send advertisements, chain letters, or other solicitations through the forum, or use the forum to gather addresses or other personal data for commercial mailing lists or databases.\n\n      5. You may not automate access to the forum, or monitor the forum, such as with a web crawler, browser plug-in or add-on, or other computer program that is not a web browser. You may crawl the forum to index it for a publicly available search engine, if you run one.\n\n      6. You may not use the forum to send e-mail to distribution lists, newsgroups, or group mail aliases.\n\n      7. You may not falsely imply that you're affiliated with or endorsed by the company.\n\n      8. You may not hyperlink to images or other non-hypertext content on the forum on other webpages.\n\n      9. You may not remove any marks showing proprietary ownership from materials you download from the forum.\n\n      10. You may not show any part of the forum on other websites with `<iframe>`.\n\n      11. You may not disable, avoid, or circumvent any security or access restrictions of the forum.\n\n      12. You may not strain infrastructure of the forum with an unreasonable volume of requests, or requests designed to impose an unreasonable load on information systems underlying the forum.\n\n      13. You may not impersonate others through the forum.\n\n      14. You may not encourage or help anyone in violation of these terms.\n\n      <h2 id=\"heading--content-standards\"><a href=\"#heading--content-standards\">Content Standards</a></h2>\n\n      1. You may not submit content to the forum that is illegal, offensive, or otherwise harmful to others. This includes content that is harassing, inappropriate, or abusive.\n\n      2. You may not submit content to the forum that violates the law, infringes anyone's intellectual property rights, violates anyone's privacy, or breaches agreements you have with others.\n\n      3. You may not submit content to the forum containing malicious computer code, such as computer viruses or spyware.\n\n      4. You may not submit content to the forum as a mere placeholder, to hold a particular address, user name, or other unique identifier.\n\n      5. You may not use the forum to disclose information that you don't have the right to disclose, like others' confidential or personal information.\n\n      <h2 id=\"heading--enforcement\"><a href=\"#heading--enforcement\">Enforcement</a></h2>\n\n      The company may investigate and prosecute violations of these terms to the fullest legal extent. The company may notify and cooperate with law enforcement authorities in prosecuting violations of the law and these terms.\n\n      The company reserves the right to change, redact, and delete content on the forum for any reason. If you believe someone has submitted content to the forum in violation of these terms, [contact us immediately](#heading--contact).\n\n      <h2 id=\"heading--your-account\"><a href=\"#heading--your-account\">Your Account</a></h2>\n\n      You must create and log into an account to use some features of the forum.\n\n      To create an account, you must provide some information about yourself. If you create an account, you agree to provide, at a minimum, a valid e-mail address, and to keep that address up-to-date. You may close your account at any time by e-mailing <%{contact_email}>.\n\n      You agree to be responsible for all action taken using your account, whether authorized by you or not, until you either close your account or notify the company that your account has been compromised. You agree to notify the company immediately if you suspect your account has been compromised. You agree to select a secure password for your account, and keep it secret.\n\n      The company may restrict, suspend, or close your account on the forum according to its policy for handling copyright-related takedown requests, or if the company reasonably believes that you've broken any rule in these terms.\n\n      <h2 id=\"heading--your-content\"><a href=\"#heading--your-content\">Your Content</a></h2>\n\n      Nothing in these terms gives the company any ownership rights in intellectual property that you share with the forum, such as your account information, posts, or other content you submit to the forum. Nothing in these terms gives you any ownership rights in the company's intellectual property, either.\n\n      Between you and the company, you remain solely responsible for content you submit to the forum. You agree not to wrongly imply that content you submit to the forum is sponsored or approved by the company. These terms do not obligate the company to store, maintain, or provide copies of content you submit, and to change it, according to these terms.\n\n      Content you submit to the forum belongs to you, and you decide what permission to give others for it. But at a minimum, you license the company to provide content that you submit to the forum to other users of the forum. That special license allows the company to copy, publish, and analyze content you submit to the forum.\n\n      When content you submit is removed from the forum, whether by you or by the company, the company's special license ends when the last copy disappears from the company's backups, caches, and other systems. Other licenses you apply to content you submit, such as [Creative Commons](https://creativecommons.org) licenses, may continue after your content is removed. Those licenses may give others, or the company itself, the right to share your content through the forum again.\n\n      Others who receive content you submit to the forum may violate the terms on which you license your content. You agree that the company will not be liable to you for those violations or their consequences.\n\n      <h2 id=\"heading--responsibility\"><a href=\"#heading--responsibility\">Your Responsibility</a></h2>\n\n      You agree to indemnify the company from legal claims by others related to your breach of these terms, or breach of these terms by others using your account on the forum. Both you and the company agree to notify the other side of any legal claims for which you might have to indemnify the company as soon as possible. If the company fails to notify you of a legal claim promptly, you won't have to indemnify the company for damages that you could have defended against or mitigated with prompt notice. You agree to allow the company to control investigation, defense, and settlement of legal claims for which you would have to indemnify the company, and to cooperate with those efforts. The company agrees not to agree to any settlement that admits fault for you or imposes obligations on you without your prior agreement.\n\n      <h2 id=\"heading--disclaimers\"><a href=\"#heading--disclaimers\">Disclaimers</a></h2>\n\n      ***You accept all risk of using the forum and content on the forum. As far as the law allows, the company and its suppliers provide the forum as is, without any warranty whatsoever.***\n\n      The forum may hyperlink to and integrate forums and services run by others. The company does not make any warranty about services run by others, or content they may provide. Use of services run by others may be governed by other terms between you and the one running service.\n\n      <h2 id=\"heading--liability\"><a href=\"#heading--liability\">Limits on Liability</a></h2>\n\n      ***Neither the company nor its suppliers will be liable to you for breach-of-contract damages their personnel could not have reasonably foreseen when you agreed to these terms.***\n\n      ***As far as the law allows, the total liability to you for claims of any kind that are related to the forum or content on the forum will be limited to $50.***\n\n      <h2 id=\"heading--feedback\"><a href=\"#heading--feedback\">Feedback</a></h2>\n\n      The company welcomes your feedback and suggestions for the forum. See the [Contact](#heading--contact) section below for ways to get in touch with us.\n\n      You agree that the company will be free to act on feedback and suggestions you provide, and that the company won't have to notify you that your feedback was used, get your permission to use it, or pay you. You agree not to submit feedback or suggestions that you believe might be confidential or proprietary, to you or others.\n\n      <h2 id=\"heading--termination\"><a href=\"#heading--termination\">Termination</a></h2>\n\n      Either you or the company may end the agreement written out in these terms at any time. When our agreement ends, your permission to use the forum also ends.\n\n      The following provisions survive the end of our agreement: [Your Content](#heading--your-content), [Feedback](#heading--feedback), [Your Responsibility](#heading--responsibility), [Disclaimers](#heading--disclaimers), [Limits on Liability](#heading--liability), and [General Terms](#heading--general).\n\n      <h2 id=\"heading--disputes\"><a href=\"#heading--disputes\">Disputes</a></h2>\n\n      %{governing_law} will govern any dispute related to these terms or your use of the forum.\n\n      You and the company agree to seek injunctions related to these terms only in state or federal court in %{city_for_disputes}. Neither you nor the company will object to jurisdiction, forum, or venue in those courts.\n\n      ***Other than to seek an injunction or for claims under the Computer Fraud and Abuse Act, you and the company will resolve any dispute by binding American Arbitration Association arbitration. Arbitration will follow the AAA's Commercial Arbitration Rules and Supplementary Procedures for Consumer Related Disputes. Arbitration will happen in %{city_for_disputes}. You will settle any dispute as an individual, and not as part of a class action or other representative proceeding, whether as the plaintiff or a class member. No arbitrator will consolidate any dispute with any other arbitration without the company's permission.***\n\n      Any arbitration award will include costs of the arbitration, reasonable attorneys' fees, and reasonable costs for witnesses. You and the company may enter arbitration awards in any court with jurisdiction.\n\n      <h2 id=\"heading--general\"><a href=\"#heading--general\">General Terms</a></h2>\n\n      If a provision of these terms is unenforceable as written, but could be changed to make it enforceable, that provision should be modified to the minimum extent necessary to make it enforceable. Otherwise, that provision should be removed.\n\n      You may not assign your agreement with the company. The company may assign your agreement to any affiliate of the company, any other company that obtains control of the company, or any other company that buys assets of the company related to the forum. Any attempted assignment against these terms has no legal effect.\n\n      Neither the exercise of any right under this Agreement, nor waiver of any breach of this Agreement, waives any other breach of this Agreement.\n\n      These terms embody all the terms of agreement between you and the company about use of the forum. These terms entirely replace any other agreements about your use of the forum, written or not.\n\n      <h2 id=\"heading--contact\"><a href=\"#heading--contact\">Contact</a></h2>\n\n      You may notify the company under these terms, and send questions to the company, at <%{contact_email}>.\n\n      The company may notify you under these terms using the e-mail address you provide for your account on the forum, or by posting a message to the homepage of the forum or your account page.\n\n      <h2 id=\"heading--changes\"><a href=\"#heading--changes\">Changes</a></h2>\n\n      The company last updated these terms on July 12, 2018, and may update these terms again. The company will post all updates to the forum. For updates that contain substantial changes, the company agrees to e-mail you, if you've created an account and provided a valid e-mail address. The company may also announce updates with special messages or alerts on the forum.\n\n      Once you get notice of an update to these terms, you must agree to the new terms in order to keep using the forum.\n\n  privacy_topic:\n    title: \"Privacy Policy\"\n    body: |\n      <a name=\"collect\"></a>\n\n      ## [What information do we collect?](#collect)\n\n      We collect information from you when you register on our site and gather data when you participate in the forum by reading, writing, and evaluating the content shared here.\n\n      When registering on our site, you may be asked to enter your name and e-mail address. You may, however, visit our site without registering. Your e-mail address will be verified by an email containing a unique link. If that link is visited, we know that you control the e-mail address.\n\n      When registered and posting, we record the IP address that the post originated from. We also may retain server logs which include the IP address of every request to our server.\n\n      <a name=\"use\"></a>\n\n      ## [What do we use your information for?](#use)\n\n      Any of the information we collect from you may be used in one of the following ways:\n\n      * To personalize your experience &mdash; your information helps us to better respond to your individual needs.\n      * To improve our site &mdash; we continually strive to improve our site offerings based on the information and feedback we receive from you.\n      * To improve customer service &mdash; your information helps us to more effectively respond to your customer service requests and support needs.\n      * To send periodic emails &mdash; The email address you provide may be used to send you information, notifications that you request about changes to topics or in response to your user name, respond to inquiries, and/or other requests or questions.\n\n      <a name=\"protect\"></a>\n\n      ## [How do we protect your information?](#protect)\n\n      We implement a variety of security measures to maintain the safety of your personal information when you enter, submit, or access your personal information.\n\n      <a name=\"data-retention\"></a>\n\n      ## [What is your data retention policy?](#data-retention)\n\n      We will make a good faith effort to:\n\n      * Retain server logs containing the IP address of all requests to this server no more than 90 days.\n      * Retain the IP addresses associated with registered users and their posts no more than 5 years.\n\n      <a name=\"cookies\"></a>\n\n      ## [Do we use cookies?](#cookies)\n\n      Yes. Cookies are small files that a site or its service provider transfers to your computer's hard drive through your Web browser (if you allow). These cookies enable the site to recognize your browser and, if you have a registered account, associate it with your registered account.\n\n      We use cookies to understand and save your preferences for future visits and compile aggregate data about site traffic and site interaction so that we can offer better site experiences and tools in the future. We may contract with third-party service providers to assist us in better understanding our site visitors. These service providers are not permitted to use the information collected on our behalf except to help us conduct and improve our business.\n\n      <a name=\"disclose\"></a>\n\n      ## [Do we disclose any information to outside parties?](#disclose)\n\n      We do not sell, trade, or otherwise transfer to outside parties your personally identifiable information. This does not include trusted third parties who assist us in operating our site, conducting our business, or servicing you, so long as those parties agree to keep this information confidential. We may also release your information when we believe release is appropriate to comply with the law, enforce our site policies, or protect ours or others rights, property, or safety. However, non-personally identifiable visitor information may be provided to other parties for marketing, advertising, or other uses.\n\n      <a name=\"third-party\"></a>\n\n      ## [Third party links](#third-party)\n\n      Occasionally, at our discretion, we may include or offer third party products or services on our site. These third party sites have separate and independent privacy policies. We therefore have no responsibility or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the integrity of our site and welcome any feedback about these sites.\n\n      <a name=\"coppa\"></a>\n\n      ## [Children's Online Privacy Protection Act Compliance](#coppa)\n\n      Our site, products and services are all directed to people who are at least 13 years old or older. If this server is in the USA, and you are under the age of 13, per the requirements of COPPA ([Children's Online Privacy Protection Act](https://en.wikipedia.org/wiki/Children%27s_Online_Privacy_Protection_Act)), do not use this site.\n\n      <a name=\"online\"></a>\n\n      ## [Online Privacy Policy Only](#online)\n\n      This online privacy policy applies only to information collected through our site and not to information collected offline.\n\n      <a name=\"consent\"></a>\n\n      ## [Your Consent](#consent)\n\n      By using our site, you consent to our web site privacy policy.\n\n      <a name=\"changes\"></a>\n\n      ## [Changes to our Privacy Policy](#changes)\n\n      If we decide to change our privacy policy, we will post those changes on this page.\n\n      This document is CC-BY-SA. It was last updated May 31, 2013.\n\n  badges:\n    mass_award:\n      errors:\n        invalid_csv: We encountered an error on line %{line_number}. Please confirm the CSV has one email per line.\n        too_many_csv_entries: Too many entries in the CSV file. Please provide a CSV file with no more than %{count} entries.\n        badge_disabled: Please enable the %{badge_name} badge first.\n        cant_grant_multiple_times: Can't grant the %{badge_name} badge multiple times to a single user.\n    editor:\n      name: Editor\n      description: First post edit\n      long_description: |\n        This badge is granted the first time you edit one of your posts. While you won\u2019t be able to edit your posts forever, editing is encouraged \u2014 you can improve the formatting, fix small mistakes, or add anything you missed when you originally posted. Edit to make your posts even better!\n    wiki_editor:\n      name: Wiki Editor\n      description: First wiki edit\n      long_description: |\n        This badge is granted the first time you edit one wiki post.\n    basic_user:\n      name: Basic\n      description: <a href=\"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\">Granted</a> all essential community functions\n      long_description: |\n        This badge is granted when you reach trust level 1. Thanks for sticking around and reading a few topics to learn what our community is about. New user restrictions have been lifted; you\u2019ve been granted all essential community abilities, such as personal messaging, flagging, wiki editing, and the ability to post multiple images and links.\n    member:\n      name: Member\n      description: <a href=\"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\">Granted</a> invitations, group messaging, more likes\n      long_description: |\n        This badge is granted when you reach trust level 2. Thanks for participating over a period of weeks to truly join our community. You can now send invitations from your user page or individual topics, create group personal messages, and have more likes per day.\n    regular:\n      name: Regular\n      description: <a href=\"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\">Granted</a> recategorize, rename, followed links, wiki, more likes\n      long_description: |\n        This badge is granted when you reach trust level 3. Thanks for being a regular part of our community over a period of months. You\u2019re now one of the most active readers, and a reliable contributor that makes our community great. You can now recategorize and rename topics, take advantage of more powerful spam flags, access a private lounge area, and you\u2019ll also get lots more likes per day.\n    leader:\n      name: Leader\n      description: <a href=\"https://blog.discourse.org/2018/06/understanding-discourse-trust-levels/\">Granted</a> global edit, pin, close, archive, split and merge, more likes\n      long_description: |\n        This badge is granted when you reach trust level 4. You\u2019re a leader in this community as selected by staff, and you set a positive example for the rest of the community in your actions and words here. You have the ability to edit all posts, take common topic moderator actions such as pin, close, unlist, archive, split, and merge.\n    welcome:\n      name: Welcome\n      description: Received a like\n      long_description: |\n        This badge is granted when you receive your first like on a post. Congratulations, you\u2019ve posted something that your fellow community members found interesting, cool, or useful!\n    autobiographer:\n      name: Autobiographer\n      description: Filled out <a href=\"%{base_uri}/my/preferences/profile\">profile</a> information\n      long_description: |\n        This badge is granted for filling out <a href=\"%{base_uri}/my/preferences/profile\">your user profile</a> and selecting a profile picture. Letting the community know a bit more about who you are and what you\u2019re interested in makes for a better, more connected community. Join us!\n    anniversary:\n      name: Anniversary\n      description: Active member for a year, posted at least once\n      long_description: |\n        This badge is granted when you\u2019ve been a member for a year with at least one post in that year. Thank you for sticking around and contributing to our community. We couldn\u2019t do it without you.\n    nice_post:\n      name: Nice Reply\n      description: Received 10 likes on a reply\n      long_description: |\n        This badge is granted when your reply gets 10 likes. Your reply made an impression on the community and helped move the conversation forward.\n    good_post:\n      name: Good Reply\n      description: Received 25 likes on a reply\n      long_description: |\n        This badge is granted when your reply gets 25 likes. Your reply was exceptional and made the conversation much more interesting.\n    great_post:\n      name: Great Reply\n      description: Received 50 likes on a reply\n      long_description: |\n        This badge is granted when your reply gets 50 likes. Wow! Your reply was inspiring, fascinating, hilarious, or insightful and the community loved it!\n    nice_topic:\n      name: Nice Topic\n      description: Received 10 likes on a topic\n      long_description: |\n        This badge is granted when your topic gets 10 likes. You started an interesting conversation that the community enjoyed.\n    good_topic:\n      name: Good Topic\n      description: Received 25 likes on a topic\n      long_description: |\n        This badge is granted when your topic gets 25 likes. You launched a vibrant conversation that the community rallied around.\n    great_topic:\n      name: Great Topic\n      description: Received 50 likes on a topic\n      long_description: |\n        This badge is granted when your topic gets 50 likes. You kicked off a fascinating conversation and the community loved the lively discussion that resulted!\n    nice_share:\n      name: Nice Share\n      description: Shared a post with 25 unique visitors\n      long_description: |\n        This badge is granted for sharing a link that was clicked by 25 outside visitors. Thanks for spreading the word about our discussions, and this community.\n    good_share:\n      name: Good Share\n      description: Shared a post with 300 unique visitors\n      long_description: |\n        This badge is granted for sharing a link that was clicked by 300 outside visitors. Good work! You\u2019ve shown off a great discussion to a bunch of new people and helped this community grow.\n    great_share:\n      name: Great Share\n      description: Shared a post with 1000 unique visitors\n      long_description: |\n        This badge is granted for sharing a link that was clicked by 1000 outside visitors. Wow! You\u2019ve promoted an interesting discussion to a huge new audience, and helped us grow our community in a big way!\n    first_like:\n      name: First Like\n      description: Liked a post\n      long_description: |\n        This badge is granted the first time you like a post using the :heart: button. Liking posts is a great way to let your fellow community members know that what they posted was interesting, useful, cool, or fun. Share the love!\n    first_flag:\n      name: First Flag\n      description: Flagged a post\n      long_description: |\n        This badge is granted the first time you flag a post. Flagging is how we all help keep this a nice place for everyone. If you notice any posts that require moderator attention for any reason please don\u2019t hesitate to flag. If you see a problem, :flag_black: flag it!\n    promoter:\n      name: Promoter\n      description: Invited a user\n      long_description: |\n        This badge is granted when you invite someone to join the community via the invite button on your user page, or at the bottom of a topic. Inviting friends who might be interested in specific discussions is a great way to introduce new people to our community, so thanks!\n    campaigner:\n      name: Campaigner\n      description: Invited 3 basic users\n      long_description: |\n        This badge is granted when you\u2019ve invited 3 people who subsequently spent enough time on the site to become basic users. A vibrant community needs a regular infusion of newcomers who regularly participate and add new voices to the conversations.\n    champion:\n      name: Champion\n      description: Invited 5 members\n      long_description: |\n        This badge is granted when you\u2019ve invited 5 people who subsequently spent enough time on the site to become full members. Wow! Thanks for expanding the diversity of our community with new members!\n    first_share:\n      name: First Share\n      description: Shared a post\n      long_description: |\n        This badge is granted the first time you share a link to a reply or topic using the share button. Sharing links is a great way to show off interesting discussions with the rest of the world and grow your community.\n    first_link:\n      name: First Link\n      description: Added a link to another topic\n      long_description: |\n        This badge is granted the first time you add a link to another topic. Linking topics helps fellow readers find interesting related conversations, by showing the connections between topics in both directions. Link freely!\n    first_quote:\n      name: First Quote\n      description: Quoted a post\n      long_description: |\n        This badge is granted the first time you quote a post in your reply. Quoting relevant parts of earlier posts in your reply helps keep discussions connected together and on topic. The easiest way to quote is to highlight a section of a post, and then press any reply button. Quote generously!\n    read_guidelines:\n      name: Read Guidelines\n      description: Read the <a href=\"%{base_uri}/guidelines\">community guidelines</a>\n      long_description: |\n        This badge is granted for <a href=\"%{base_uri}/guidelines\">reading the community guidelines</a>. Following and sharing these simple guidelines helps build a safe, fun, and sustainable community for everyone. Always remember there\u2019s another human being, one very much like yourself, on the other side of that screen. Be nice!\n    reader:\n      name: Reader\n      description: Read every reply in a topic with more than 100 replies\n      long_description: |\n        This badge is granted the first time you read a long topic with more than 100 replies. Reading a conversation closely helps you follow the discussion, understand different viewpoints, and leads to more interesting conversations. The more you read, the better the conversation gets. As we like to say, Reading is Fundamental! :slight_smile:\n    popular_link:\n      name: Popular Link\n      description: Posted an external link with 50 clicks\n      long_description: |\n        This badge is granted when a link you shared gets 50 clicks. Thanks for posting a useful link that added interesting context to the conversation!\n    hot_link:\n      name: Hot Link\n      description: Posted an external link with 300 clicks\n      long_description: |\n        This badge is granted when a link you shared gets 300 clicks. Thanks for posting a fascinating link that drove the conversation forward and illuminated the discussion!\n    famous_link:\n      name: Famous Link\n      description: Posted an external link with 1000 clicks\n      long_description: |\n        This badge is granted when a link you shared gets 1000 clicks. Wow! You posted a link that significantly improved the conversation by adding essential detail, context, and information. Great work!\n    appreciated:\n      name: Appreciated\n      description: Received 1 like on 20 posts\n      long_description: |\n        This badge is granted when you receive at least one like on 20 different posts. The community is enjoying your contributions to the conversations here!\n    respected:\n      name: Respected\n      description: Received 2 likes on 100 posts\n      long_description: |\n        This badge is granted when you receive at least 2 likes on 100 different posts. The community is growing to respect your many contributions to the conversations here.\n    admired:\n      name: Admired\n      description: Received 5 likes on 300 posts\n      long_description: |\n        This badge is granted when you receive at least 5 likes on 300 different posts. Wow! The community admires your frequent, high quality contributions to the conversations here.\n    out_of_love:\n      name: Out of Love\n      description: Used %{max_likes_per_day} likes in a day\n      long_description: |\n        This badge is granted when you use all %{max_likes_per_day} of your daily likes. Remembering to take a moment and like the posts you enjoy and appreciate encourages your fellow community members to create even more great discussions in the future.\n    higher_love:\n      name: Higher Love\n      description: Used %{max_likes_per_day} likes in a day 5 times\n      long_description: |\n        This badge is granted when you use all %{max_likes_per_day} of your daily likes for 5 days. Thanks for taking the time actively encouraging the best conversations every day!\n    crazy_in_love:\n      name: Crazy in Love\n      description: Used %{max_likes_per_day} likes in a day 20 times\n      long_description: |\n        This badge is granted when you use all %{max_likes_per_day} of your daily likes for 20 days. Wow! You\u2019re a role model for encouraging your fellow community members!\n    thank_you:\n      name: Thank You\n      description: Has 20 liked posts and gave 10 likes\n      long_description: |\n        This badge is granted when you have 20 liked posts and give 10 or more likes in return. When someone likes your posts, you find the time to like what others are posting, too.\n    gives_back:\n      name: Gives Back\n      description: Has 100 liked posts and gave 100 likes\n      long_description: |\n        This badge is granted when you have 100 liked posts and give 100 or more likes in return. Thanks for paying it forward!\n    empathetic:\n      name: Empathetic\n      description: Has 500 liked posts and gave 1000 likes\n      long_description: |\n        This badge is granted when you have 500 liked posts and give 1000 or more likes in return. Wow! You\u2019re a model of generosity and mutual appreciation :two_hearts:.\n    first_emoji:\n      name: First Emoji\n      description: Used an Emoji in a Post\n      long_description: |\n        This badge is granted the first time you add an Emoji to your post :thumbsup:. Emoji let you convey emotion in your posts, from happiness :smiley: to sadness :anguished: to anger :angry: and everything in between :sunglasses:. Just type a : (colon) or press the Emoji toolbar button in the editor to select from hundreds of choices :ok_hand:\n    first_mention:\n      name: First Mention\n      description: Mentioned a user in a post\n      long_description: |\n        This badge is granted the first time you mention someone\u2019s @username in your post. Each mention generates a notification to that person, so they know about your post. Just begin typing @ (at symbol) to mention any user or, if allowed, group \u2013 it\u2019s a convenient way to bring something to their attention.\n    first_onebox:\n      name: First Onebox\n      description: Posted a link that was oneboxed\n      long_description: |\n        This badge is granted the first time you post a link on a line by itself, which automatically expanded into a onebox with a summary, title, and (when available) picture.\n    first_reply_by_email:\n      name: First Reply By Email\n      description: Replied to a post via email\n      long_description: |\n        This badge is granted the first time you reply to a post via email :e-mail:.\n    new_user_of_the_month:\n      name: \"New User of the Month\"\n      description: Outstanding contributions in their first month\n      long_description: |\n        This badge is granted to congratulate two new users each month for their excellent overall contributions, as measured by how often their posts were liked, and by whom.\n    enthusiast:\n      name: Enthusiast\n      description: Visited 10 consecutive days\n      long_description: |\n        This badge is granted for visiting 10 consecutive days. Thanks for sticking with us for over a week!\n    aficionado:\n      name: Aficionado\n      description: Visited 100 consecutive days\n      long_description: |\n        This badge is granted for visiting 100 consecutive days. That\u2019s more than three months!\n    devotee:\n      name: Devotee\n      description: Visited 365 consecutive days\n      long_description: |\n        This badge is granted for visiting 365 consecutive days. Wow, an entire year!\n    badge_title_metadata: \"%{display_name} badge on %{site_title}\"\n\n  admin_login:\n    success: \"Email Sent\"\n    errors:\n      unknown_email_address: \"Unknown email address.\"\n      invalid_token: \"Invalid token.\"\n    email_input: \"Admin Email\"\n    submit_button: \"Send Email\"\n    safe_mode: \"Safe Mode: disable all themes/plugins when logging in\"\n\n  performance_report:\n    initial_post_raw: This topic includes daily performance reports for your site.\n    initial_topic_title: Website performance reports\n\n  tags:\n    title: \"Tags\"\n    restricted_tag_disallowed: 'You cannot apply the tag \"%{tag}\".'\n    restricted_tag_remove_disallowed: 'You cannot remove the tag \"%{tag}\".'\n    minimum_required_tags:\n      one: \"You must select at least %{count} tag.\"\n      other: \"You must select at least %{count} tags.\"\n    upload_row_too_long: \"The CSV file should have one tag per line. Optionally the tag can be followed by a comma, then the tag group name.\"\n    forbidden:\n      invalid:\n        one: \"The tag you selected cannot be used\"\n        other: \"None of the tags you selected can be used\"\n      in_this_category: '\"%{tag_name}\" cannot be used in this category'\n      restricted_to:\n        one: '\"%{tag_name}\" is restricted to the \"%{category_names}\" category'\n        other: '\"%{tag_name}\" is restricted to the following categories: %{category_names}'\n      synonym: 'Synonyms are not allowed. Use \"%{tag_name}\" instead.'\n      has_synonyms: '\"%{tag_name}\" cannot be used because it has synonyms.'\n      restricted_tags_cannot_be_used_in_category:\n        one: 'The \"%{tags}\" tag cannot be used in the \"%{category}\" category. Please remove it.'\n        other: 'The following tags cannot be used in the \"%{category}\" category: %{tags}. Please remove them.'\n      category_does_not_allow_tags:\n        one: 'The \"%{category}\" category does not allow the \"%{tags}\" tag. Please remove it.'\n        other: 'The \"%{category}\" category does not allow the following tags: \"%{tags}\". Please remove them.'\n    required_tags_from_group:\n      one: \"You must include at least %{count} %{tag_group_name} tag. The tags in this group are: %{tags}.\"\n      other: \"You must include at least %{count} %{tag_group_name} tags. The tags in this group are: %{tags}.\"\n    invalid_target_tag: \"cannot be a synonym of a synonym\"\n    synonyms_exist: \"is not allowed while synonyms exist\"\n  rss_by_tag: \"Topics tagged %{tag}\"\n\n  finish_installation:\n    congratulations: \"Congratulations, you installed Discourse!\"\n    register:\n      button: \"Register\"\n      title: \"Register Admin Account\"\n      help: \"Register a new account to get started.\"\n      no_emails: \"Unfortunately, no administrator emails were defined during setup, so finalizing the configuration may be difficult. Please add a developer email in the configuration file or <a href='https://meta.discourse.org/t/create-admin-account-from-console/17274'>create an administrator account from console</a>.\"\n    confirm_email:\n      title: \"Confirm your Email\"\n      message: \"<p>We sent an activation mail to <b>%{email}</b>. Please follow the instructions in the email to activate your account.</p><p>If it doesn't arrive, check your spam folder, and <a href='https://meta.discourse.org/t/troubleshooting-email-on-a-new-discourse-install/16326'>ensure you set up email correctly</a>.</p>\"\n    resend_email:\n      title: \"Resend Activation Email\"\n      message: \"<p>We've re-sent the activation email to <b>%{email}</b>\"\n\n  safe_mode:\n    title: \"Enter safe mode\"\n    description: \"Safe mode allows you to test your site without loading plugins or themes.\"\n    no_themes: \"Disable themes and theme components\"\n    no_unofficial_plugins: \"Disable unofficial plugins\"\n    no_plugins: \"Disable all plugins\"\n    enter: \"Enter Safe Mode\"\n    must_select: \"You must select at least one option to enter safe mode.\"\n  wizard:\n    title: \"Discourse Setup\"\n    step:\n      introduction:\n        title: \"Tell us about your community\"\n\n        fields:\n          title:\n            label: \"Community name\"\n            placeholder: \"Jane\u2019s Hangout\"\n          site_description:\n            label: \"Describe your community in a sentence\"\n            placeholder: \"A place for Jane and her friends to discuss cool stuff\"\n          contact_email:\n            label: \"Point of contact\"\n            placeholder: \"example@user.com\"\n            description: \"Person or group responsible for this community. Used for critical updates, and listed on <a href='%{base_path}/about' target='_blank'>your about page</a> for urgent contact.\"\n          default_locale:\n            label: \"Language\"\n\n      privacy:\n        title: \"Member Experience\"\n\n        fields:\n          login_required:\n            placeholder: \"Private\"\n            extra_description: \"Only logged in users can access this community\"\n          invite_only:\n            placeholder: \"Invite Only\"\n            extra_description: \"Users must be invited by trusted users or staff, otherwise users can sign up on their own\"\n          must_approve_users:\n            placeholder: \"Require Approval\"\n            extra_description: \"Users must be approved by staff\"\n\n      ready:\n        title: \"Your Discourse is Ready!\"\n        description: \"That's it! You've done the basics to setup your community. Now you can jump in and have a look around, write a welcome topic, and send invites!<br><br>Have fun!\"\n\n      styling:\n        title: \"Look & Feel\"\n        fields:\n          color_scheme:\n            label: \"Color scheme\"\n          body_font:\n            label: \"Body font\"\n          heading_font:\n            label: \"Heading font\"\n          styling_preview:\n            label: \"Preview\"\n          homepage_style:\n            label: \"Homepage style\"\n            choices:\n              latest:\n                label: \"Latest Topics\"\n              categories_only:\n                label: \"Categories Only\"\n              categories_with_featured_topics:\n                label: \"Categories with Featured Topics\"\n              categories_and_latest_topics:\n                label: \"Categories and Latest Topics\"\n              categories_and_latest_topics_created_date:\n                label: \"Categories and Latest Topics (sort by topic created date)\"\n              categories_and_top_topics:\n                label: \"Categories and Top Topics\"\n              categories_boxes:\n                label: \"Categories Boxes\"\n              categories_boxes_with_topics:\n                label: \"Categories Boxes with Topics\"\n              subcategories_with_featured_topics:\n                label: \"Subcategories with Featured Topics\"\n\n      branding:\n        title: \"Customize Logos\"\n        fields:\n          logo:\n            label: \"Primary Logo\"\n            description: \"The logo at the top left of your site. Use a wide rectangular image with a height of 120 and an aspect ratio greater than 3:1\"\n          logo_small:\n            label: \"Square Logo\"\n            description: \"A square version of your logo. Shown at the top left when scrolling down, and when sharing on social platforms. Ideally at least 512x512.\"\n          favicon:\n            label: \"Browser Icon\"\n            description: \"Icon used to represent your site in web browsers that looks good at small sizes. PNG or JPG is recommended. Square logo is used by default.\"\n          large_icon:\n            label: \"Large Icon\"\n            description: \"Icon used to represent your site on mobile devices that looks good at larger sizes. Ideally greater than 512x512. Square logo used by default.\"\n\n      corporate:\n        title: \"Your Organization\"\n\n        fields:\n          company_name:\n            label: \"Company Name\"\n            placeholder: \"Example Organization\"\n            description: \"Entered in your Terms of Service page. Feel free to skip if no company exists.\"\n          governing_law:\n            label: \"Governing Law\"\n            placeholder: \"California law\"\n            description: \"Entered in your Terms of Service page. Feel free to skip if no company exists.\"\n          contact_url:\n            label: \"Web Page\"\n            placeholder: \"https://www.example.com/contact-us\"\n            description: \"General contact web page for you or your organization. Will be displayed on <a href='%{base_path}/about' target='_blank'>your about page</a>.\"\n          city_for_disputes:\n            label: \"City for Disputes\"\n            placeholder: \"San Francisco, California\"\n            description: \"Entered in your Terms of Service page. Feel free to skip if no company exists.\"\n          site_contact:\n            label: \"Automated Messages\"\n            description: \"All automated Discourse personal messages will be sent from this user, such as flag warnings and backup completion notices.\"\n\n      invites:\n        title: \"Invite Staff\"\n        description: \"You\u2019re almost done! Let\u2019s invite some people to help <a href='https://blog.discourse.org/2014/08/building-a-discourse-community/' target='blank'>seed your discussions</a> with interesting topics and replies to get your community started.\"\n        disabled: \"Since local logins are disabled, it\u2019s not possible to send invites to anyone. Please proceed to the next step.\"\n\n      finished:\n        title: \"Your Discourse is Ready!\"\n        description: |\n          <p>If you ever feel like changing these settings, <b>re-run this wizard any time</b>, or visit <a href='%{base_path}/admin' target='_blank'>your admin section</a>; find it next to the wrench icon in the site menu.</p>\n          <p>It is easy to customize your Discourse even further using our powerful theming system. For examples, check out the <a href=\"https://meta.discourse.org/c/theme/61/l/top\" target=\"_blank\">top themes and components</a> on <a href=\"https://meta.discourse.org/\" target=\"_blank\">meta.discourse.org</a>.</p>\n          <p>Have fun, and good luck <a href='https://blog.discourse.org/2014/08/building-a-discourse-community/' target='_blank'>building your new community!</a></p>\n\n  search_logs:\n    graph_title: \"Search Count\"\n\n  joined: \"Joined\"\n\n  discourse_push_notifications:\n    popup:\n      mentioned: '%{username} mentioned you in \"%{topic}\" - %{site_title}'\n      group_mentioned: '%{username} mentioned you in \"%{topic}\" - %{site_title}'\n      quoted: '%{username} quoted you in \"%{topic}\" - %{site_title}'\n      replied: '%{username} replied to you in \"%{topic}\" - %{site_title}'\n      posted: '%{username} posted in \"%{topic}\" - %{site_title}'\n      private_message: '%{username} sent you a private message in \"%{topic}\" - %{site_title}'\n      linked: '%{username} linked to your post from \"%{topic}\" - %{site_title}'\n      watching_first_post: '%{username} created a new topic \"%{topic}\" - %{site_title}'\n      confirm_title: \"Notifications enabled - %{site_title}\"\n      confirm_body: \"Success! Notifications have been enabled.\"\n      custom: \"Notification from %{username} on %{site_title}\"\n\n  staff_action_logs:\n    not_found: \"not found\"\n    unknown: \"unknown\"\n    user_merged: \"%{username} was merged into this account\"\n    user_delete_self: \"Deleted by self from %{url}\"\n    webhook_deactivation_reason: \"Your webhook has been automatically deactivated. We received multiple '%{status}' HTTP status failure responses.\"\n    api_key:\n      automatic_revoked:\n        one: \"Automatically revoked, last activity more than %{count} day ago\"\n        other: \"Automatically revoked, last activity more than %{count} days ago\"\n      revoked: Revoked\n      restored: Restored\n\n  reviewables:\n    already_handled: \"Thanks, but we've already reviewed that post and determined it does not need to be flagged again.\"\n    already_handled_and_user_not_exist: \"Thanks, but someone already reviewed and that user no longer exists.\"\n    priorities:\n      low: \"Low\"\n      medium: \"Medium\"\n      high: \"High\"\n    sensitivity:\n      disabled: \"Disabled\"\n      low: \"Low\"\n      medium: \"Medium\"\n      high: \"High\"\n    must_claim: \"You must claim items before acting on them.\"\n    user_claimed: \"This item has been claimed by another user.\"\n    missing_version: \"You must supply a version parameter\"\n    conflict: \"There was an update conflict preventing you from doing that.\"\n    reasons:\n      post_count: \"The first few posts from every user must be approved by staff. See %{link}.\"\n      trust_level: \"Users at low trust levels must have replies approved by staff. See %{link}.\"\n      new_topics_unless_trust_level: \"Users at low trust levels must have topics approved by staff. See %{link}.\"\n      fast_typer: \"New user typed their first post suspiciously fast, suspected bot or spammer behavior. See %{link}.\"\n      auto_silence_regex: \"New user whose first post matches the %{link} setting.\"\n      watched_word: \"This post included a Watched Word. See your %{link}.\"\n      staged: \"New topics and posts for staged users must be approved by staff. See %{link}.\"\n      category: \"Posts in this category require manual approval by staff. See the %{link}.\"\n      must_approve_users: \"All new users must be approved by staff. See %{link}.\"\n      invite_only: \"All new users should be invited. See %{link}.\"\n      email_auth_res_enqueue: \"This email failed a DMARC check, it most likely isn't from whom it seems to be from. Check the raw email headers for more information.\"\n      email_spam: \"This email was flagged as spam by the header defined in %{link}.\"\n      suspect_user: \"This new user entered profile information without reading any topics or posts, which strongly suggests they may be a spammer. See %{link}.\"\n      contains_media: \"This post includes embedded media. See %{link}.\"\n      queued_by_staff: \"A staff member thinks this post needs review. It'll remain hidden until then.\"\n      links:\n        watched_word: list of watched words\n        category: category settings\n\n    actions:\n      agree:\n        title: \"Agree...\"\n      agree_and_keep:\n        title: \"Keep Post\"\n        description: \"Agree with flag and keep the post unchanged.\"\n      agree_and_keep_hidden:\n        title: \"Keep Post Hidden\"\n        description: \"Agree with flag and leave the post hidden.\"\n      agree_and_suspend:\n        title: \"Suspend User\"\n        description: \"Agree with flag and suspend the user.\"\n      agree_and_silence:\n        title: \"Silence User\"\n        description: \"Agree with flag and silence the user.\"\n      agree_and_restore:\n        title: \"Restore Post\"\n        description: \"Restore the post so that all users can see it.\"\n      agree_and_hide:\n        title: \"Hide Post\"\n        description: \"Hide this post and automatically send the user a message urging them to edit it.\"\n      delete_single:\n        title: \"Delete\"\n      delete:\n        title: \"Delete...\"\n      delete_and_ignore:\n        title: \"Delete Post and Ignore\"\n        description: \"Delete post; if the first post, delete the topic as well\"\n      delete_and_ignore_replies:\n        title: \"Delete Post + Replies and Ignore\"\n        description: \"Delete post and all of its replies; if the first post, delete the topic as well\"\n        confirm: \"Are you sure you want to delete the replies to the post as well?\"\n      delete_and_agree:\n        title: \"Delete Post and Agree\"\n        description: \"Delete post; if the first post, delete the topic as well\"\n      delete_and_agree_replies:\n        title: \"Delete Post + Replies and Agree\"\n        description: \"Delete post and all of its replies; if the first post, delete the topic as well\"\n        confirm: \"Are you sure you want to delete the replies to the post as well?\"\n      disagree_and_restore:\n        title: \"Disagree and Restore Post\"\n        description: \"Restore the post so that all users can see it.\"\n      disagree:\n        title: \"Disagree\"\n      ignore:\n        title: \"Ignore\"\n      approve:\n        title: \"Approve\"\n      approve_post:\n        title: \"Approve Post\"\n        confirm_closed: \"This topic is closed. Would you like to create the post anyway?\"\n      reject_post:\n        title: \"Reject Post\"\n      approve_user:\n        title: \"Approve User\"\n      reject_user:\n        title: \"Delete User...\"\n        delete:\n          title: \"Delete User\"\n          description: \"The user will be deleted from the forum.\"\n        block:\n          title: \"Delete and Block User\"\n          description: \"The user will be deleted, and we'll block their IP and email address.\"\n      reject:\n        title: \"Reject\"\n        bundle_title: \"Reject...\"\n      reject_and_suspend:\n        title: \"Reject and Suspend user\"\n      reject_and_silence:\n        title: \"Reject and Silence user\"\n      reject_and_delete:\n        title: \"Reject and Delete the post\"\n      reject_and_keep_deleted:\n        title: \"Keep post deleted\"\n      approve_and_restore:\n        title: \"Approve and Restore post\"\n      delete_user:\n        reason: \"Deleted via review queue\"\n\n  email_style:\n    html_missing_placeholder: \"The html template must include %{placeholder}\"\n\n  notification_level:\n    ignore_error: \"Sorry, you can't ignore that user.\"\n    mute_error: \"Sorry, you can't mute that user.\"\n    error: \"Sorry, you cannot change the notification level for that user.\"\n    invalid_value: '\"%{value}\" is not a valid notification level.'\n\n  discord:\n    not_in_allowed_guild: \"Authentication failed. You are not a member of a permitted Discord guild.\"\n\n  old_keys_reminder:\n    title: \"Reminder about old credentials\"\n    body: |\n      Hello! This is a routine yearly security reminder from your Discourse instance.\n\n      As a courtesy, we wanted to let you know that the following credentials used on your Discourse instance have not been updated in more than two years:\n\n      %{keys}\n\n      No action is required at this time, however, it is considered good security practice to cycle all your important credentials every few years.\n\n  create_linked_topic:\n    topic_title_with_sequence:\n      one: \"%{topic_title} (Part %{count})\"\n      other: \"%{topic_title} (Part %{count})\"\n    post_raw: \"Continuing the discussion from %{parent_url}.\\n\\nPrevious discussions:\\n\\n%{previous_topics}\"\n    small_action_post_raw: \"Continue discussion at %{new_title}.\"\n\n  fallback_username: \"user\"\n\n  user_status:\n    errors:\n      ends_at_should_be_greater_than_set_at: \"ends_at should be greater than set_at\"\n  webhooks:\n    payload_url:\n      blocked_or_internal: \"Payload URL cannot be used because it resolves to a blocked or internal IP\"\n      unsafe: \"Payload URL cannot be used because it's unsafe\"\n", "# frozen_string_literal: true\n\n#mixin for all guardian methods dealing with topic permissions\nmodule TopicGuardian\n  def can_remove_allowed_users?(topic, target_user = nil)\n    is_staff? ||\n    (topic.user == @user && @user.has_trust_level?(TrustLevel[2])) ||\n    (\n      topic.allowed_users.count > 1 &&\n      topic.user != target_user &&\n      !!(target_user && user == target_user)\n    )\n  end\n\n  def can_review_topic?(topic)\n    return false if anonymous? || topic.nil?\n    return true if is_staff?\n\n    is_category_group_moderator?(topic.category)\n  end\n\n  def can_moderate_topic?(topic)\n    return false if anonymous? || topic.nil?\n    return true if is_staff?\n\n    can_perform_action_available_to_group_moderators?(topic)\n  end\n\n  def can_create_shared_draft?\n    SiteSetting.shared_drafts_enabled? && can_see_shared_draft?\n  end\n\n  def can_see_shared_draft?\n    @user.has_trust_level_or_staff?(SiteSetting.shared_drafts_min_trust_level)\n  end\n\n  def can_create_whisper?\n    @user.whisperer?\n  end\n\n  def can_see_whispers?(_topic = nil)\n    @user.whisperer?\n  end\n\n  def can_publish_topic?(topic, category)\n    can_see_shared_draft? && can_see?(topic) && can_create_topic_on_category?(category)\n  end\n\n  # Creating Methods\n  def can_create_topic?(parent)\n    is_staff? ||\n    (user &&\n      user.trust_level >= SiteSetting.min_trust_to_create_topic.to_i &&\n      can_create_post?(parent) &&\n      Category.topic_create_allowed(self).limit(1).count == 1)\n  end\n\n  def can_create_topic_on_category?(category)\n    # allow for category to be a number as well\n    category_id = Category === category ? category.id : category\n\n    can_create_topic?(nil) &&\n    (!category || Category.topic_create_allowed(self).where(id: category_id).count == 1)\n  end\n\n  def can_move_topic_to_category?(category)\n    category = Category === category ? category : Category.find(category || SiteSetting.uncategorized_category_id)\n\n    is_staff? || (can_create_topic_on_category?(category) && !category.require_topic_approval?)\n  end\n\n  def can_create_post_on_topic?(topic)\n    # No users can create posts on deleted topics\n    return false if topic.blank?\n    return false if topic.trashed?\n    return true if is_admin?\n\n    trusted = (authenticated? && user.has_trust_level?(TrustLevel[4])) || is_moderator? || can_perform_action_available_to_group_moderators?(topic)\n\n    (!(topic.closed? || topic.archived?) || trusted) && can_create_post?(topic)\n  end\n\n  # Editing Method\n  def can_edit_topic?(topic)\n    return false if Discourse.static_doc_topic_ids.include?(topic.id) && !is_admin?\n    return false unless can_see?(topic)\n\n    first_post = topic.first_post\n\n    return false if first_post&.locked? && !is_staff?\n\n    return true if is_admin?\n    return true if is_moderator? && can_create_post?(topic)\n    return true if is_category_group_moderator?(topic.category)\n\n    # can't edit topics in secured categories where you don't have permission to create topics\n    # except for a tiny edge case where the topic is uncategorized and you are trying\n    # to fix it but uncategorized is disabled\n    if (\n      SiteSetting.allow_uncategorized_topics ||\n      topic.category_id != SiteSetting.uncategorized_category_id\n    )\n      return false if !can_create_topic_on_category?(topic.category)\n    end\n\n    # Editing a shared draft.\n    return true if (\n      !topic.archived &&\n      !topic.private_message? &&\n      topic.category_id == SiteSetting.shared_drafts_category.to_i &&\n      can_see_category?(topic.category) &&\n      can_see_shared_draft? &&\n      can_create_post?(topic)\n    )\n\n    # TL4 users can edit archived topics, but can not edit private messages\n    return true if (\n      SiteSetting.trusted_users_can_edit_others? &&\n      topic.archived &&\n      !topic.private_message? &&\n      user.has_trust_level?(TrustLevel[4]) &&\n      can_create_post?(topic)\n    )\n\n    # TL3 users can not edit archived topics and private messages\n    return true if (\n      SiteSetting.trusted_users_can_edit_others? &&\n      !topic.archived &&\n      !topic.private_message? &&\n      user.has_trust_level?(TrustLevel[3]) &&\n      can_create_post?(topic)\n    )\n\n    return false if topic.archived\n\n    is_my_own?(topic) &&\n      !topic.edit_time_limit_expired?(user) &&\n      !first_post&.locked? &&\n      (!first_post&.hidden? || can_edit_hidden_post?(first_post))\n  end\n\n  def can_recover_topic?(topic)\n    if is_staff? || (topic&.category && is_category_group_moderator?(topic.category))\n      !!(topic && topic.deleted_at)\n    else\n      topic && can_recover_post?(topic.ordered_posts.first)\n    end\n  end\n\n  def can_delete_topic?(topic)\n    !topic.trashed? &&\n    (is_staff? || (is_my_own?(topic) && topic.posts_count <= 1 && topic.created_at && topic.created_at > 24.hours.ago) || is_category_group_moderator?(topic.category)) &&\n    !topic.is_category_topic? &&\n    !Discourse.static_doc_topic_ids.include?(topic.id)\n  end\n\n  def can_permanently_delete_topic?(topic)\n    return false if !SiteSetting.can_permanently_delete\n    return false if !topic\n\n    # Ensure that all posts (including small actions) are at least soft\n    # deleted.\n    return false if topic.posts_count > 0\n\n    # All other posts that were deleted still must be permanently deleted\n    # before the topic can be deleted with the exception of small action\n    # posts that will be deleted right before the topic is.\n    all_posts_count = Post.with_deleted\n      .where(topic_id: topic.id)\n      .where(post_type: [Post.types[:regular], Post.types[:moderator_action], Post.types[:whisper]])\n      .count\n    return false if all_posts_count > 1\n\n    return false if !is_admin? || !can_see_topic?(topic)\n    return false if !topic.deleted_at\n    return false if topic.deleted_by_id == @user.id && topic.deleted_at >= Post::PERMANENT_DELETE_TIMER.ago\n    true\n  end\n\n  def can_toggle_topic_visibility?(topic)\n    can_moderate?(topic) || can_perform_action_available_to_group_moderators?(topic)\n  end\n\n  alias :can_create_unlisted_topic? :can_toggle_topic_visibility?\n\n  def can_convert_topic?(topic)\n    return false unless @user.in_any_groups?(SiteSetting.personal_message_enabled_groups_map)\n    return false if topic.blank?\n    return false if topic.trashed?\n    return false if topic.is_category_topic?\n    return true if is_admin?\n    is_moderator? && can_create_post?(topic)\n  end\n\n  def can_reply_as_new_topic?(topic)\n    authenticated? && topic && @user.has_trust_level?(TrustLevel[1])\n  end\n\n  def can_see_deleted_topics?(category)\n    is_staff? || is_category_group_moderator?(category)\n  end\n\n  # Accepts an array of `Topic#id` and returns an array of `Topic#id` which the user can see.\n  def can_see_topic_ids(topic_ids: [], hide_deleted: true)\n    topic_ids = topic_ids.compact\n\n    return topic_ids if is_admin?\n    return [] if topic_ids.blank?\n\n    default_scope = Topic.unscoped.where(id: topic_ids)\n\n    # When `hide_deleted` is `true`, hide deleted topics if user is not staff or category moderator\n    if hide_deleted && !is_staff?\n      if category_group_moderation_allowed?\n        default_scope = default_scope.where(<<~SQL)\n          (\n            deleted_at IS NULL OR\n            (\n              deleted_at IS NOT NULL\n              AND topics.category_id IN (#{category_group_moderator_scope.select(:id).to_sql})\n            )\n          )\n        SQL\n      else\n        default_scope = default_scope.where(\"deleted_at IS NULL\")\n      end\n    end\n\n    # Filter out topics with shared drafts if user cannot see shared drafts\n    if !can_see_shared_draft?\n      default_scope = default_scope.left_outer_joins(:shared_draft).where(\"shared_drafts.id IS NULL\")\n    end\n\n    all_topics_scope =\n      if authenticated?\n        Topic.unscoped.merge(\n          secured_regular_topic_scope(default_scope, topic_ids: topic_ids).or(private_message_topic_scope(default_scope))\n        )\n      else\n        Topic.unscoped.merge(secured_regular_topic_scope(default_scope, topic_ids: topic_ids))\n      end\n\n    all_topics_scope.pluck(:id)\n  end\n\n  def can_see_topic?(topic, hide_deleted = true)\n    return false unless topic\n    return true if is_admin?\n    return false if hide_deleted && topic.deleted_at && !can_see_deleted_topics?(topic.category)\n\n    if topic.private_message?\n      return authenticated? && topic.all_allowed_users.where(id: @user.id).exists?\n    end\n\n    return false if topic.shared_draft && !can_see_shared_draft?\n\n    category = topic.category\n    can_see_category?(category) &&\n      (!category.read_restricted || !is_staged? || secure_category_ids.include?(category.id) || topic.user == user)\n  end\n\n  def can_get_access_to_topic?(topic)\n    topic&.access_topic_via_group.present? && authenticated?\n  end\n\n  def filter_allowed_categories(records)\n    return records if is_admin? && !SiteSetting.suppress_secured_categories_from_admin\n\n    records = allowed_category_ids.size == 0 ?\n      records.where('topics.category_id IS NULL') :\n      records.where('topics.category_id IS NULL or topics.category_id IN (?)', allowed_category_ids)\n\n    records.references(:categories)\n  end\n\n  def can_edit_featured_link?(category_id)\n    return false unless SiteSetting.topic_featured_link_enabled\n    return false unless @user.trust_level >= TrustLevel.levels[:basic]\n    Category.where(id: category_id || SiteSetting.uncategorized_category_id, topic_featured_link_allowed: true).exists?\n  end\n\n  def can_update_bumped_at?\n    is_staff? || @user.has_trust_level?(TrustLevel[4])\n  end\n\n  def can_banner_topic?(topic)\n    topic && authenticated? && !topic.private_message? && is_staff?\n  end\n\n  def can_edit_tags?(topic)\n    return false unless can_tag_topics?\n    return false if topic.private_message? && !can_tag_pms?\n    return true if can_edit_topic?(topic)\n\n    if topic&.first_post&.wiki && (@user.trust_level >= SiteSetting.min_trust_to_edit_wiki_post.to_i)\n      return can_create_post?(topic)\n    end\n\n    false\n  end\n\n  def can_perform_action_available_to_group_moderators?(topic)\n    return false if anonymous? || topic.nil?\n    return true if is_staff?\n    return true if @user.has_trust_level?(TrustLevel[4])\n\n    is_category_group_moderator?(topic.category)\n  end\n  alias :can_archive_topic? :can_perform_action_available_to_group_moderators?\n  alias :can_close_topic? :can_perform_action_available_to_group_moderators?\n  alias :can_open_topic? :can_perform_action_available_to_group_moderators?\n  alias :can_split_merge_topic? :can_perform_action_available_to_group_moderators?\n  alias :can_edit_staff_notes? :can_perform_action_available_to_group_moderators?\n  alias :can_pin_unpin_topic? :can_perform_action_available_to_group_moderators?\n\n  def can_move_posts?(topic)\n    return false if is_silenced?\n    can_perform_action_available_to_group_moderators?(topic)\n  end\n\n  def affected_by_slow_mode?(topic)\n    topic&.slow_mode_seconds.to_i > 0 && @user.human? && !is_staff?\n  end\n\n  private\n\n  def private_message_topic_scope(scope)\n    pm_scope = scope.private_messages_for_user(user)\n\n    if is_moderator?\n      pm_scope = pm_scope.or(scope.where(<<~SQL))\n        topics.subtype = '#{TopicSubtype.moderator_warning}'\n        OR topics.id IN (#{Topic.has_flag_scope.select(:topic_id).to_sql})\n      SQL\n    end\n\n    pm_scope\n  end\n\n  def secured_regular_topic_scope(scope, topic_ids:)\n    secured_scope = Topic.unscoped.secured(self)\n\n    # Staged users are allowed to see their own topics in read restricted categories when Category#email_in and\n    # Category#email_in_allow_strangers has been configured.\n    if is_staged?\n      sql = <<~SQL\n      topics.id IN (\n        SELECT\n          topics.id\n        FROM topics\n        INNER JOIN categories ON categories.id = topics.category_id\n        WHERE categories.read_restricted\n        AND categories.email_in IS NOT NULL\n        AND categories.email_in_allow_strangers\n        AND topics.user_id = :user_id\n        AND topics.id IN (:topic_ids)\n      )\n      SQL\n\n      secured_scope = secured_scope.or(Topic.unscoped.where(sql, user_id: user.id, topic_ids: topic_ids))\n    end\n\n    scope.listable_topics.merge(secured_scope)\n  end\nend\n", "# frozen_string_literal: true\n\nclass TopicCreator\n\n  attr_reader :user, :guardian, :opts\n\n  include HasErrors\n\n  def self.create(user, guardian, opts)\n    self.new(user, guardian, opts).create\n  end\n\n  def initialize(user, guardian, opts)\n    @user = user\n    @guardian = guardian\n    @opts = opts\n    @added_users = []\n  end\n\n  def valid?\n    topic = Topic.new(setup_topic_params)\n    # validate? will clear the error hash\n    # so we fire the validation event after\n    # this allows us to add errors\n    valid = topic.valid?\n\n    validate_visibility(topic)\n\n    category = find_category\n    if category.present? && guardian.can_tag?(topic)\n      tags = @opts[:tags].presence || []\n      existing_tags = tags.present? ? Tag.where(name: tags) : []\n      valid_tags = guardian.can_create_tag? ? tags : existing_tags\n\n      # all add to topic.errors\n      DiscourseTagging.validate_min_required_tags_for_category(guardian, topic, category, valid_tags)\n      DiscourseTagging.validate_required_tags_from_group(guardian, topic, category, existing_tags)\n      DiscourseTagging.validate_category_restricted_tags(guardian, topic, category, valid_tags)\n    end\n\n    DiscourseEvent.trigger(:after_validate_topic, topic, self)\n    valid &&= topic.errors.empty?\n\n    add_errors_from(topic) unless valid\n\n    valid\n  end\n\n  def create\n    topic = Topic.new(setup_topic_params)\n\n    validate_visibility!(topic)\n    setup_tags(topic)\n\n    if fields = @opts[:custom_fields]\n      topic.custom_fields.merge!(fields)\n    end\n\n    DiscourseEvent.trigger(:before_create_topic, topic, self)\n\n    setup_auto_close_time(topic)\n    process_private_message(topic)\n    save_topic(topic)\n    create_warning(topic)\n    watch_topic(topic)\n    create_shared_draft(topic)\n    UserActionManager.topic_created(topic)\n\n    topic\n  end\n\n  private\n\n  def validate_visibility(topic)\n    if !@opts[:skip_validations] && !topic.visible && !guardian.can_create_unlisted_topic?(topic)\n      topic.errors.add(:base, :unable_to_unlist)\n    end\n  end\n\n  def validate_visibility!(topic)\n    validate_visibility(topic)\n\n    rollback_from_errors!(topic) if topic.errors.full_messages.present?\n  end\n\n  def create_shared_draft(topic)\n    return if @opts[:shared_draft].blank? || @opts[:shared_draft] == 'false'\n\n    category_id = @opts[:category].blank? ? SiteSetting.shared_drafts_category.to_i : @opts[:category]\n    SharedDraft.create(topic_id: topic.id, category_id: category_id)\n  end\n\n  def create_warning(topic)\n    return unless @opts[:is_warning]\n\n    # We can only attach warnings to PMs\n    rollback_with!(topic, :warning_requires_pm) unless topic.private_message?\n\n    # Don't create it if there is more than one user\n    rollback_with!(topic, :too_many_users) if @added_users.size != 1\n\n    # Create a warning record\n    UserWarning.create(topic: topic, user: @added_users.first, created_by: @user)\n  end\n\n  def watch_topic(topic)\n    unless @opts[:auto_track] == false\n      topic.notifier.watch_topic!(topic.user_id)\n    end\n\n    topic.reload.topic_allowed_users.each do |tau|\n      next if tau.user_id == -1 || tau.user_id == topic.user_id\n      topic.notifier.watch!(tau.user_id)\n    end\n\n    topic.reload.topic_allowed_groups.each do |topic_allowed_group|\n      topic_allowed_group.group.set_message_default_notification_levels!(topic)\n    end\n  end\n\n  def setup_topic_params\n    @opts[:visible] = true if @opts[:visible].nil?\n\n    topic_params = {\n      title: @opts[:title],\n      user_id: @user.id,\n      last_post_user_id: @user.id,\n      visible: @opts[:visible]\n    }\n\n    [:subtype, :archetype, :meta_data, :import_mode, :advance_draft].each do |key|\n      topic_params[key] = @opts[key] if @opts[key].present?\n    end\n\n    if topic_params[:import_mode] && @opts[:views].to_i > 0\n      topic_params[:views] = @opts[:views].to_i\n    end\n\n    if topic_params[:import_mode] && @opts[:participant_count].to_i > 0\n      topic_params[:participant_count] = @opts[:participant_count].to_i\n    end\n\n    # Automatically give it a moderator warning subtype if specified\n    topic_params[:subtype] = TopicSubtype.moderator_warning if @opts[:is_warning]\n\n    category = find_category\n    @guardian.ensure_can_create!(Topic, category) unless (@opts[:skip_validations] || @opts[:archetype] == Archetype.private_message)\n\n    if @opts[:category].present? && category.nil?\n      raise Discourse::InvalidParameters.new(:category)\n    end\n\n    topic_params[:category_id] = category.id if category.present?\n    topic_params[:created_at] = convert_time(@opts[:created_at]) if @opts[:created_at].present?\n    topic_params[:pinned_at] = convert_time(@opts[:pinned_at]) if @opts[:pinned_at].present?\n    topic_params[:pinned_globally] = @opts[:pinned_globally] if @opts[:pinned_globally].present?\n    topic_params[:external_id] = @opts[:external_id] if @opts[:external_id].present?\n    topic_params[:featured_link] = @opts[:featured_link]\n\n    topic_params\n  end\n\n  def convert_time(timestamp)\n    if timestamp.is_a?(Time)\n      timestamp\n    else\n      Time.zone.parse(timestamp.to_s)\n    end\n  end\n\n  def find_category\n    @category ||= begin\n      # PM can't have a category\n      @opts.delete(:category) if @opts[:archetype].present? && @opts[:archetype] == Archetype.private_message\n\n      if @opts[:shared_draft]\n        return Category.find(SiteSetting.shared_drafts_category)\n      end\n\n      if (@opts[:category].is_a? Integer) || (@opts[:category] =~ /^\\d+$/)\n        Category.find_by(id: @opts[:category])\n      end\n    end\n  end\n\n  def setup_tags(topic)\n    if @opts[:tags].present?\n      valid_tags = DiscourseTagging.tag_topic_by_names(topic, @guardian, @opts[:tags])\n      unless valid_tags\n        topic.errors.add(:base, :unable_to_tag)\n        rollback_from_errors!(topic)\n      end\n    end\n\n    watched_words = WordWatcher.words_for_action(:tag)\n    if watched_words.present?\n      word_watcher = WordWatcher.new(\"#{@opts[:title]} #{@opts[:raw]}\")\n      word_watcher_tags = topic.tags.map(&:name)\n      watched_words.each do |word, opts|\n        if word_watcher.word_matches?(word, case_sensitive: opts[:case_sensitive])\n          word_watcher_tags += opts[:replacement].split(\",\")\n        end\n      end\n      DiscourseTagging.tag_topic_by_names(topic, Discourse.system_user.guardian, word_watcher_tags)\n    end\n  end\n\n  def setup_auto_close_time(topic)\n    return unless @opts[:auto_close_time].present?\n    return unless @guardian.can_moderate?(topic)\n    topic.set_auto_close(@opts[:auto_close_time], by_user: @user)\n  end\n\n  def process_private_message(topic)\n    return unless @opts[:archetype] == Archetype.private_message\n    topic.subtype = TopicSubtype.user_to_user unless topic.subtype\n\n    unless @opts[:target_usernames].present? || @opts[:target_emails].present? || @opts[:target_group_names].present?\n      rollback_with!(topic, :no_user_selected)\n    end\n\n    if @opts[:target_emails].present? && !@guardian.can_send_private_messages_to_email? then\n      rollback_with!(topic, :send_to_email_disabled)\n    end\n\n    add_users(topic, @opts[:target_usernames])\n    add_emails(topic, @opts[:target_emails])\n    add_groups(topic, @opts[:target_group_names])\n\n    if !@added_users.include?(user)\n      topic.topic_allowed_users.build(user_id: @user.id)\n    end\n\n  end\n\n  def save_topic(topic)\n    topic.disable_rate_limits! if @opts[:skip_validations]\n\n    unless topic.save(validate: !@opts[:skip_validations])\n      rollback_from_errors!(topic)\n    end\n  end\n\n  def add_users(topic, usernames)\n    return unless usernames\n\n    names = usernames.split(',').flatten.map(&:downcase)\n    len = 0\n\n    User.includes(:user_option).where('username_lower in (?)', names).find_each do |user|\n      check_can_send_permission!(topic, user)\n      @added_users << user\n      topic.topic_allowed_users.build(user_id: user.id)\n      len += 1\n    end\n\n    rollback_with!(topic, :target_user_not_found) unless len == names.length\n  end\n\n  def add_emails(topic, emails)\n    return unless emails\n\n    begin\n      emails = emails.split(',').flatten\n      len = 0\n\n      emails.each do |email|\n        display_name = email.split(\"@\").first\n\n        if user = find_or_create_user(email, display_name)\n          if !@added_users.include?(user)\n            @added_users << user\n            topic.topic_allowed_users.build(user_id: user.id)\n          end\n          len += 1\n        end\n      end\n    ensure\n      rollback_with!(topic, :target_user_not_found) unless len == emails.length\n    end\n  end\n\n  def add_groups(topic, groups)\n    return unless groups\n    names = groups.split(',').flatten.map(&:downcase)\n    len = 0\n\n    Group.where('lower(name) in (?)', names).each do |group|\n      check_can_send_permission!(topic, group)\n      topic.topic_allowed_groups.build(group_id: group.id)\n      len += 1\n      group.update_columns(has_messages: true) unless group.has_messages\n    end\n\n    rollback_with!(topic, :target_group_not_found) unless len == names.length\n  end\n\n  def check_can_send_permission!(topic, obj)\n    unless @opts[:skip_validations] ||\n      @guardian.can_send_private_message?(obj, notify_moderators: topic&.subtype == TopicSubtype.notify_moderators)\n      rollback_with!(topic, :cant_send_pm)\n    end\n  end\n\n  def find_or_create_user(email, display_name)\n    user = User.find_by_email(email)\n\n    if !user && SiteSetting.enable_staged_users\n      username = UserNameSuggester.sanitize_username(display_name) if display_name.present?\n\n      user = User.create!(\n        email: email,\n        username: UserNameSuggester.suggest(username.presence || email),\n        name: display_name.presence || User.suggest_name(email),\n        staged: true\n      )\n    end\n\n    user\n  end\nend\n", "# frozen_string_literal: true\n\nRSpec.describe TopicGuardian do\n  fab!(:user) { Fabricate(:user) }\n  fab!(:admin) { Fabricate(:admin) }\n  fab!(:tl3_user) { Fabricate(:leader) }\n  fab!(:moderator) { Fabricate(:moderator) }\n  fab!(:category) { Fabricate(:category) }\n  fab!(:group) { Fabricate(:group) }\n  fab!(:private_category) { Fabricate(:private_category, group: group) }\n  fab!(:topic) { Fabricate(:topic, category: category) }\n  fab!(:private_topic) { Fabricate(:topic, category: private_category) }\n  fab!(:private_message_topic) { Fabricate(:private_message_topic) }\n\n  before do\n    Guardian.enable_topic_can_see_consistency_check\n  end\n\n  after do\n    Guardian.disable_topic_can_see_consistency_check\n  end\n\n  describe '#can_create_shared_draft?' do\n    it 'when shared_drafts are disabled' do\n      SiteSetting.shared_drafts_min_trust_level = 'admin'\n\n      expect(Guardian.new(admin).can_create_shared_draft?).to eq(false)\n    end\n\n    it 'when user is a moderator and access is set to admin' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = 'admin'\n\n      expect(Guardian.new(moderator).can_create_shared_draft?).to eq(false)\n    end\n\n    it 'when user is a moderator and access is set to staff' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = 'staff'\n\n      expect(Guardian.new(moderator).can_create_shared_draft?).to eq(true)\n    end\n\n    it 'when user is TL3 and access is set to TL2' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = '2'\n\n      expect(Guardian.new(tl3_user).can_create_shared_draft?).to eq(true)\n    end\n  end\n\n  describe '#can_see_shared_draft?' do\n    it 'when shared_drafts are disabled (existing shared drafts)' do\n      SiteSetting.shared_drafts_min_trust_level = 'admin'\n\n      expect(Guardian.new(admin).can_see_shared_draft?).to eq(true)\n    end\n\n    it 'when user is a moderator and access is set to admin' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = 'admin'\n\n      expect(Guardian.new(moderator).can_see_shared_draft?).to eq(false)\n    end\n\n    it 'when user is a moderator and access is set to staff' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = 'staff'\n\n      expect(Guardian.new(moderator).can_see_shared_draft?).to eq(true)\n    end\n\n    it 'when user is TL3 and access is set to TL2' do\n      SiteSetting.shared_drafts_category = category.id\n      SiteSetting.shared_drafts_min_trust_level = '2'\n\n      expect(Guardian.new(tl3_user).can_see_shared_draft?).to eq(true)\n    end\n  end\n\n  describe '#can_edit_topic?' do\n    context 'when the topic is a shared draft' do\n      let(:tl2_user) { Fabricate(:user, trust_level: TrustLevel[2])  }\n\n      before do\n        SiteSetting.shared_drafts_category = category.id\n        SiteSetting.shared_drafts_min_trust_level = '2'\n      end\n\n      it 'returns false if the topic is a PM' do\n        pm_with_draft = Fabricate(:private_message_topic, category: category)\n        Fabricate(:shared_draft, topic: pm_with_draft)\n\n        expect(Guardian.new(tl2_user).can_edit_topic?(pm_with_draft)).to eq(false)\n      end\n\n      it 'returns false if the topic is archived' do\n        archived_topic = Fabricate(:topic, archived: true, category: category)\n        Fabricate(:shared_draft, topic: archived_topic)\n\n        expect(Guardian.new(tl2_user).can_edit_topic?(archived_topic)).to eq(false)\n      end\n\n      it 'returns true if a shared draft exists' do\n        Fabricate(:shared_draft, topic: topic)\n\n        expect(Guardian.new(tl2_user).can_edit_topic?(topic)).to eq(true)\n      end\n\n      it 'returns false if the user has a lower trust level' do\n        tl1_user = Fabricate(:user, trust_level: TrustLevel[1])\n        Fabricate(:shared_draft, topic: topic)\n\n        expect(Guardian.new(tl1_user).can_edit_topic?(topic)).to eq(false)\n      end\n\n      it 'returns true if the shared_draft is from a different category' do\n        topic = Fabricate(:topic, category: Fabricate(:category))\n        Fabricate(:shared_draft, topic: topic)\n\n        expect(Guardian.new(tl2_user).can_edit_topic?(topic)).to eq(false)\n      end\n    end\n  end\n\n  describe '#can_review_topic?' do\n    it 'returns false for TL4 users' do\n      tl4_user = Fabricate(:user, trust_level: TrustLevel[4])\n      topic = Fabricate(:topic)\n\n      expect(Guardian.new(tl4_user).can_review_topic?(topic)).to eq(false)\n    end\n  end\n\n  describe \"#can_create_unlisted_topic?\" do\n    it \"returns true for moderators\" do\n      expect(Guardian.new(moderator).can_create_unlisted_topic?(topic)).to eq(true)\n    end\n\n    it \"returns true for TL4 users\" do\n      tl4_user = Fabricate(:user, trust_level: TrustLevel[4])\n\n      expect(Guardian.new(tl4_user).can_create_unlisted_topic?(topic)).to eq(true)\n    end\n\n    it \"returns false for regular users\" do\n      expect(Guardian.new(user).can_create_unlisted_topic?(topic)).to eq(false)\n    end\n  end\n\n  # The test cases here are intentionally kept brief because majority of the cases are already handled by\n  # `TopicGuardianCanSeeConsistencyCheck` which we run to ensure that the implementation between `TopicGuardian#can_see_topic_ids`\n  # and `TopicGuardian#can_see_topic?` is consistent.\n  describe '#can_see_topic_ids' do\n    it 'returns the topic ids for the topics which a user is allowed to see' do\n      expect(Guardian.new.can_see_topic_ids(topic_ids: [topic.id, private_message_topic.id])).to contain_exactly(\n        topic.id\n      )\n\n      expect(Guardian.new(user).can_see_topic_ids(topic_ids: [topic.id, private_message_topic.id])).to contain_exactly(\n        topic.id\n      )\n\n      expect(Guardian.new(moderator).can_see_topic_ids(topic_ids: [topic.id, private_message_topic.id])).to contain_exactly(\n        topic.id,\n      )\n\n      expect(Guardian.new(admin).can_see_topic_ids(topic_ids: [topic.id, private_message_topic.id])).to contain_exactly(\n        topic.id,\n        private_message_topic.id\n      )\n    end\n\n    it 'returns the topic ids for topics which are deleted but user is a category moderator of' do\n      SiteSetting.enable_category_group_moderation = true\n\n      category.update!(reviewable_by_group_id: group.id)\n      group.add(user)\n      topic.update!(category: category)\n      topic.trash!(admin)\n\n      topic2 = Fabricate(:topic)\n      user2 = Fabricate(:user)\n\n      expect(Guardian.new(user).can_see_topic_ids(topic_ids: [topic.id, topic2.id])).to contain_exactly(\n        topic.id,\n        topic2.id\n      )\n\n      expect(Guardian.new(user2).can_see_topic_ids(topic_ids: [topic.id, topic2.id])).to contain_exactly(\n        topic2.id,\n      )\n    end\n  end\n\n  describe '#filter_allowed_categories' do\n\n    it 'allows admin access to categories without explicit access' do\n      guardian = Guardian.new(admin)\n      list = Topic.where(id: private_topic.id)\n      list = guardian.filter_allowed_categories(list)\n\n      expect(list.count).to eq(1)\n    end\n\n    context 'when SiteSetting.suppress_secured_categories_from_admin is true' do\n      before do\n        SiteSetting.suppress_secured_categories_from_admin = true\n      end\n\n      it 'does not allow admin access to categories without explicit access' do\n        guardian = Guardian.new(admin)\n        list = Topic.where(id: private_topic.id)\n        list = guardian.filter_allowed_categories(list)\n\n        expect(list.count).to eq(0)\n      end\n    end\n\n  end\nend\n", "# frozen_string_literal: true\n\nRSpec.describe TopicCreator do\n  fab!(:user)      { Fabricate(:user, trust_level: TrustLevel[2]) }\n  fab!(:moderator) { Fabricate(:moderator) }\n  fab!(:admin)     { Fabricate(:admin) }\n\n  let(:valid_attrs) { Fabricate.attributes_for(:topic) }\n  let(:pm_valid_attrs)  { { raw: 'this is a new post', title: 'this is a new title', archetype: Archetype.private_message, target_usernames: moderator.username } }\n\n  let(:pm_to_email_valid_attrs) do\n    {\n      raw: 'this is a new email',\n      title: 'this is a new subject',\n      archetype: Archetype.private_message,\n      target_emails: 'moderator@example.com'\n    }\n  end\n\n  describe '#create' do\n    context 'with topic success cases' do\n      before do\n        TopicCreator.any_instance.expects(:save_topic).returns(true)\n        TopicCreator.any_instance.expects(:watch_topic).returns(true)\n        SiteSetting.allow_duplicate_topic_titles = true\n      end\n\n      it \"should be possible for an admin to create a topic\" do\n        expect(TopicCreator.create(admin, Guardian.new(admin), valid_attrs)).to be_valid\n      end\n\n      it \"should be possible for a moderator to create a topic\" do\n        expect(TopicCreator.create(moderator, Guardian.new(moderator), valid_attrs)).to be_valid\n      end\n\n      it \"supports both meta_data and custom_fields\" do\n        opts = valid_attrs.merge(\n          meta_data: { import_topic_id: \"foo\" },\n          custom_fields: { import_id: \"bar\" }\n        )\n\n        topic = TopicCreator.create(admin, Guardian.new(admin), opts)\n\n        expect(topic.custom_fields[\"import_topic_id\"]).to eq(\"foo\")\n        expect(topic.custom_fields[\"import_id\"]).to eq(\"bar\")\n      end\n\n      context 'with regular user' do\n        before { SiteSetting.min_trust_to_create_topic = TrustLevel[0] }\n\n        it \"should be possible for a regular user to create a topic\" do\n          expect(TopicCreator.create(user, Guardian.new(user), valid_attrs)).to be_valid\n        end\n\n        it \"should be possible for a regular user to create a topic with blank auto_close_time\" do\n          expect(TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(auto_close_time: ''))).to be_valid\n        end\n\n        it \"ignores auto_close_time without raising an error\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(auto_close_time: '24'))\n          expect(topic).to be_valid\n          expect(topic.public_topic_timer).to eq(nil)\n        end\n\n        it \"can create a topic in a category\" do\n          category = Fabricate(:category, name: \"Neil's Blog\")\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(category: category.id))\n          expect(topic).to be_valid\n          expect(topic.category).to eq(category)\n        end\n\n        it \"ignores participant_count without raising an error\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(participant_count: 3))\n          expect(topic.participant_count).to eq(1)\n        end\n\n        it \"accepts participant_count in import mode\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(import_mode: true, participant_count: 3))\n          expect(topic.participant_count).to eq(3)\n        end\n      end\n    end\n\n    context 'with tags' do\n      fab!(:tag1) { Fabricate(:tag, name: \"fun\") }\n      fab!(:tag2) { Fabricate(:tag, name: \"fun2\") }\n      fab!(:tag3) { Fabricate(:tag, name: \"fun3\") }\n      fab!(:tag4) { Fabricate(:tag, name: \"fun4\") }\n      fab!(:tag5) { Fabricate(:tag, name: \"fun5\") }\n      fab!(:tag_group1) { Fabricate(:tag_group, tags: [tag1]) }\n      fab!(:tag_group2) { Fabricate(:tag_group, tags: [tag2]) }\n\n      before do\n        SiteSetting.tagging_enabled = true\n        SiteSetting.min_trust_to_create_tag = 0\n        SiteSetting.min_trust_level_to_tag_topics = 0\n      end\n\n      context 'with regular tags' do\n        it \"user can add tags to topic\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(tags: [tag1.name]))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(1)\n        end\n      end\n\n      context 'when assigned via matched watched words' do\n        fab!(:word1) { Fabricate(:watched_word, action: WatchedWord.actions[:tag], replacement: tag1.name) }\n        fab!(:word2) { Fabricate(:watched_word, action: WatchedWord.actions[:tag], replacement: tag2.name) }\n        fab!(:word3) { Fabricate(:watched_word, action: WatchedWord.actions[:tag], replacement: tag3.name, case_sensitive: true) }\n\n        it 'adds watched words as tags' do\n          topic = TopicCreator.create(\n            user,\n            Guardian.new(user),\n            valid_attrs.merge(\n              title: \"This is a #{word1.word} title\",\n              raw: \"#{word2.word.upcase} is not the same as #{word3.word.upcase}\")\n          )\n\n          expect(topic).to be_valid\n          expect(topic.tags).to contain_exactly(tag1, tag2)\n        end\n      end\n\n      context 'with staff-only tags' do\n        before do\n          create_staff_only_tags(['alpha'])\n        end\n\n        it \"regular users can't add staff-only tags\" do\n          expect do\n            TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(tags: ['alpha']))\n          end.to raise_error(ActiveRecord::Rollback)\n        end\n\n        it 'staff can add staff-only tags' do\n          topic = TopicCreator.create(admin, Guardian.new(admin), valid_attrs.merge(tags: ['alpha']))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(1)\n        end\n      end\n\n      context 'when minimum_required_tags is present' do\n        fab!(:category) { Fabricate(:category, name: \"beta\", minimum_required_tags: 2) }\n\n        it \"fails for regular user if minimum_required_tags is not satisfied\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(user), valid_attrs.merge(category: category.id)).valid?\n          ).to be_falsy\n        end\n\n        it \"lets admin create a topic regardless of minimum_required_tags\" do\n          topic = TopicCreator.create(admin, Guardian.new(admin), valid_attrs.merge(tags: [tag1.name], category: category.id))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(1)\n        end\n\n        it \"works for regular user if minimum_required_tags is satisfied\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(tags: [tag1.name, tag2.name], category: category.id))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(2)\n        end\n\n        it \"minimum_required_tags is satisfying for new tags if user can create\" do\n          topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(tags: [\"new tag\", \"another tag\"], category: category.id))\n          expect(topic).to be_valid\n          expect(topic.tags.length).to eq(2)\n        end\n\n        it \"lets new user create a topic if they don't have sufficient trust level to tag topics\" do\n          SiteSetting.min_trust_level_to_tag_topics = 1\n          new_user = Fabricate(:newuser)\n          topic = TopicCreator.create(new_user, Guardian.new(new_user), valid_attrs.merge(category: category.id))\n          expect(topic).to be_valid\n        end\n      end\n\n      context 'with required tag group' do\n        fab!(:tag_group) { Fabricate(:tag_group, tags: [tag1]) }\n        fab!(:category) { Fabricate(:category, name: \"beta\", category_required_tag_groups: [CategoryRequiredTagGroup.new(tag_group: tag_group, min_count: 1)]) }\n\n        it \"when no tags are not present\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(user), valid_attrs.merge(category: category.id)).valid?\n          ).to be_falsy\n        end\n\n        it \"when tags are not part of the tag group\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(user), valid_attrs.merge(category: category.id, tags: ['nope'])).valid?\n          ).to be_falsy\n        end\n\n        it \"when requirement is met\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(user), valid_attrs.merge(category: category.id, tags: [tag1.name, tag2.name])).valid?\n          ).to be_truthy\n        end\n\n        it \"lets staff ignore the restriction\" do\n          expect(\n            TopicCreator.new(user, Guardian.new(admin), valid_attrs.merge(category: category.id)).valid?\n          ).to be_truthy\n        end\n      end\n\n      context \"when category has restricted tags or tag groups\" do\n        fab!(:category) { Fabricate(:category, tags: [tag3], tag_groups: [tag_group1]) }\n\n        it \"allows topics without any tags\" do\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic without tags\",\n            raw: \"hello this is a test topic without tags\",\n            category: category.id,\n          )\n          expect(tc.valid?).to eq(true)\n          expect(tc.errors).to be_empty\n          topic = tc.create\n          expect(topic.tags).to be_empty\n        end\n\n        it \"allows topics if they use tags only from the tags set that the category restricts\" do\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag1.name, tag3.name]\n          )\n          expect(tc.valid?).to eq(true)\n          expect(tc.errors).to be_empty\n          topic = tc.create\n          expect(topic.tags).to contain_exactly(tag1, tag3)\n        end\n\n        it \"allows topics to use tags that are restricted in multiple categories\" do\n          category2 = Fabricate(:category, tags: [tag5], tag_groups: [tag_group1])\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category2.id,\n            tags: [tag1.name, tag5.name]\n          )\n          expect(tc.valid?).to eq(true)\n          expect(tc.errors).to be_empty\n          topic = tc.create\n          expect(topic.tags).to contain_exactly(tag1, tag5)\n\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags 1\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag1.name, tag3.name]\n          )\n          expect(tc.valid?).to eq(true)\n          expect(tc.errors).to be_empty\n          topic = tc.create\n          expect(topic.tags).to contain_exactly(tag1, tag3)\n\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags 2\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag1.name, tag5.name]\n          )\n          expect(tc.valid?).to eq(false)\n          expect(tc.errors.full_messages).to contain_exactly(\n            I18n.t(\n              \"tags.forbidden.restricted_tags_cannot_be_used_in_category\",\n              count: 1,\n              tags: tag5.name,\n              category: category.name\n            )\n          )\n        end\n\n        it \"rejects topics if they use a tag outside the set of tags that the category restricts\" do\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag2.name, tag1.name]\n          )\n          expect(tc.valid?).to eq(false)\n          expect(tc.errors.full_messages).to contain_exactly(\n            I18n.t(\n              \"tags.forbidden.category_does_not_allow_tags\",\n              count: 1,\n              tags: tag2.name,\n              category: category.name\n            )\n          )\n\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category.id,\n            tags: [tag2.name, tag5.name, tag3.name]\n          )\n          expect(tc.valid?).to eq(false)\n          expect(tc.errors.full_messages).to contain_exactly(\n            I18n.t(\n              \"tags.forbidden.category_does_not_allow_tags\",\n              count: 2,\n              tags: [tag2, tag5].map(&:name).sort.join(\", \"),\n              category: category.name\n            )\n          )\n        end\n\n        it \"rejects topics in other categories if a restricted tag of a category are used\" do\n          category2 = Fabricate(:category)\n          tc = TopicCreator.new(\n            user,\n            Guardian.new(user),\n            title: \"hello this is a test topic with tags\",\n            raw: \"hello this is a test topic with tags\",\n            category: category2.id,\n            tags: [tag1.name, tag2.name]\n          )\n          expect(tc.valid?).to eq(false)\n          expect(tc.errors.full_messages).to contain_exactly(\n            I18n.t(\n              \"tags.forbidden.restricted_tags_cannot_be_used_in_category\",\n              count: 1,\n              tags: tag1.name,\n              category: category2.name\n            )\n          )\n        end\n\n        context \"when allowing other tags\" do\n          before { category.update!(allow_global_tags: true) }\n\n          it \"allows topics to use tags that aren't restricted by any category\" do\n            tc = TopicCreator.new(\n              user,\n              Guardian.new(user),\n              title: \"hello this is a test topic with tags\",\n              raw: \"hello this is a test topic with tags\",\n              category: category.id,\n              tags: [tag1.name, tag2.name, tag3.name, tag5.name]\n            )\n            expect(tc.valid?).to eq(true)\n            expect(tc.errors).to be_empty\n            topic = tc.create\n            expect(topic.tags).to contain_exactly(tag1, tag2, tag3, tag5)\n          end\n\n          it \"rejects topics if they use restricted tags of another category\" do\n            Fabricate(:category, tags: [tag5], tag_groups: [tag_group2])\n            tc = TopicCreator.new(\n              user,\n              Guardian.new(user),\n              title: \"hello this is a test topic with tags\",\n              raw: \"hello this is a test topic with tags\",\n              category: category.id,\n              tags: [tag1.name, tag5.name]\n            )\n            expect(tc.valid?).to eq(false)\n            expect(tc.errors.full_messages).to contain_exactly(\n              I18n.t(\n                \"tags.forbidden.restricted_tags_cannot_be_used_in_category\",\n                count: 1,\n                tags: tag5.name,\n                category: category.name\n              )\n            )\n\n            tc = TopicCreator.new(\n              user,\n              Guardian.new(user),\n              title: \"hello this is a test topic with tags\",\n              raw: \"hello this is a test topic with tags\",\n              category: category.id,\n              tags: [tag1.name, tag2.name, tag5.name]\n            )\n            expect(tc.valid?).to eq(false)\n            expect(tc.errors.full_messages).to contain_exactly(\n              I18n.t(\n                \"tags.forbidden.restricted_tags_cannot_be_used_in_category\",\n                count: 2,\n                tags: [tag2, tag5].map(&:name).sort.join(\", \"),\n                category: category.name\n              )\n            )\n          end\n        end\n      end\n    end\n\n    context 'with personal message' do\n      context 'with success cases' do\n        before do\n          TopicCreator.any_instance.expects(:save_topic).returns(true)\n          TopicCreator.any_instance.expects(:watch_topic).returns(true)\n          SiteSetting.allow_duplicate_topic_titles = true\n          SiteSetting.enable_staged_users = true\n          Group.refresh_automatic_groups!\n        end\n\n        it \"should be possible for a regular user to send private message\" do\n          expect(TopicCreator.create(user, Guardian.new(user), pm_valid_attrs)).to be_valid\n        end\n\n        it \"min_trust_to_create_topic setting should not be checked when sending private message\" do\n          SiteSetting.min_trust_to_create_topic = TrustLevel[4]\n          expect(TopicCreator.create(user, Guardian.new(user), pm_valid_attrs)).to be_valid\n        end\n\n        it \"personal_message_enabled_groups setting should not be checked when sending private messages to staff via flag\" do\n          SiteSetting.personal_message_enabled_groups = Group::AUTO_GROUPS[:staff]\n          expect(TopicCreator.create(user, Guardian.new(user), pm_valid_attrs.merge(subtype: TopicSubtype.notify_moderators))).to be_valid\n        end\n      end\n\n      context 'with failure cases' do\n        it \"should be rollback the changes when email is invalid\" do\n          SiteSetting.manual_polling_enabled = true\n          SiteSetting.reply_by_email_address = \"sam+%{reply_key}@sam.com\"\n          SiteSetting.reply_by_email_enabled = true\n          SiteSetting.min_trust_to_send_email_messages = TrustLevel[1]\n          attrs = pm_to_email_valid_attrs.dup\n          attrs[:target_emails] = \"t\" * 256\n\n          expect do\n            TopicCreator.create(user, Guardian.new(user), attrs)\n          end.to raise_error(ActiveRecord::Rollback)\n        end\n\n        it \"personal_message_enabled_groups setting should be checked when sending private message\" do\n          SiteSetting.personal_message_enabled_groups = Group::AUTO_GROUPS[:trust_level_4]\n\n          expect do\n            TopicCreator.create(user, Guardian.new(user), pm_valid_attrs)\n          end.to raise_error(ActiveRecord::Rollback)\n        end\n      end\n\n      context 'with to emails' do\n        before do\n          Group.refresh_automatic_groups!\n        end\n\n        it 'works for staff' do\n          SiteSetting.min_trust_to_send_email_messages = 'staff'\n          expect(TopicCreator.create(admin, Guardian.new(admin), pm_to_email_valid_attrs)).to be_valid\n        end\n\n        it 'work for trusted users' do\n          SiteSetting.min_trust_to_send_email_messages = 3\n          user.update!(trust_level: 3)\n          expect(TopicCreator.create(user, Guardian.new(user), pm_to_email_valid_attrs)).to be_valid\n        end\n\n        it 'does not work for non-staff' do\n          SiteSetting.min_trust_to_send_email_messages = 'staff'\n          expect { TopicCreator.create(user, Guardian.new(user), pm_to_email_valid_attrs) }.to raise_error(ActiveRecord::Rollback)\n        end\n\n        it 'does not work for untrusted users' do\n          SiteSetting.min_trust_to_send_email_messages = 3\n          user.update!(trust_level: 2)\n          expect { TopicCreator.create(user, Guardian.new(user), pm_to_email_valid_attrs) }.to raise_error(ActiveRecord::Rollback)\n        end\n      end\n    end\n\n    context 'when setting timestamps' do\n      it 'supports Time instances' do\n        freeze_time\n\n        topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(\n          created_at: 1.week.ago,\n          pinned_at: 3.days.ago\n        ))\n\n        expect(topic.created_at).to eq_time(1.week.ago)\n        expect(topic.pinned_at).to eq_time(3.days.ago)\n      end\n\n      it 'supports strings' do\n        freeze_time\n\n        time1 = Time.zone.parse('2019-09-02')\n        time2 = Time.zone.parse('2020-03-10 15:17')\n\n        topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(\n          created_at: '2019-09-02',\n          pinned_at: '2020-03-10 15:17'\n        ))\n\n        expect(topic.created_at).to eq_time(time1)\n        expect(topic.pinned_at).to eq_time(time2)\n      end\n    end\n\n    context 'with external_id' do\n      it 'adds external_id' do\n        topic = TopicCreator.create(user, Guardian.new(user), valid_attrs.merge(\n          external_id: 'external_id'\n        ))\n\n        expect(topic.external_id).to eq('external_id')\n      end\n    end\n\n    context \"when invisible/unlisted\" do\n      let(:unlisted_attrs) { valid_attrs.merge(visible: false) }\n\n      it \"throws an exception for a non-staff user\" do\n        expect do\n          TopicCreator.create(user, Guardian.new(user), unlisted_attrs)\n        end.to raise_error(ActiveRecord::Rollback)\n      end\n\n      it \"is invalid for a non-staff user\" do\n        expect(TopicCreator.new(user, Guardian.new(user), unlisted_attrs).valid?).to eq(false)\n      end\n\n      it \"creates unlisted topic for an admin\" do\n        expect(TopicCreator.create(admin, Guardian.new(admin), unlisted_attrs)).to be_valid\n      end\n\n      it \"is valid for an admin\" do\n        expect(TopicCreator.new(admin, Guardian.new(admin), unlisted_attrs).valid?).to eq(true)\n      end\n    end\n  end\nend\n", "# frozen_string_literal: true\n\nRSpec.shared_examples 'finding and showing post' do\n  let!(:post) { post_by_user }\n\n  it \"ensures the user can't see the post\" do\n    topic = post.topic\n    topic.convert_to_private_message(Discourse.system_user)\n    topic.remove_allowed_user(Discourse.system_user, user.username)\n    get url\n    expect(response).to be_forbidden\n  end\n\n  it 'succeeds' do\n    get url\n    expect(response.status).to eq(200)\n  end\n\n  it \"returns 404 when post's topic is deleted\" do\n    post.topic.destroy!\n    get url\n    expect(response.status).to eq(404)\n  end\n\n  context \"with deleted post\" do\n    before do\n      post.trash!(user)\n    end\n\n    it \"can't find deleted posts as an anonymous user\" do\n      get url\n      expect(response.status).to eq(404)\n    end\n\n    it \"can't find deleted posts as a regular user\" do\n      sign_in(user)\n      get url\n      expect(response.status).to eq(404)\n    end\n\n    it \"can find posts as a moderator\" do\n      sign_in(moderator)\n      get url\n      expect(response.status).to eq(200)\n    end\n\n    it \"can find posts as a admin\" do\n      sign_in(admin)\n      get url\n      expect(response.status).to eq(200)\n    end\n\n    context \"with category group moderator\" do\n      fab!(:group_user) { Fabricate(:group_user) }\n      let(:user_gm) { group_user.user }\n      let(:group) { group_user.group }\n\n      before do\n        SiteSetting.enable_category_group_moderation = true\n        sign_in(user_gm)\n      end\n\n      it \"can find posts in the allowed category\" do\n        post.topic.category.update!(reviewable_by_group_id: group.id, topic_id: topic.id)\n        get url\n        expect(response.status).to eq(200)\n      end\n\n      it \"can't find posts outside of the allowed category\" do\n        get url\n        expect(response.status).to eq(404)\n      end\n    end\n  end\nend\n\nRSpec.shared_examples 'action requires login' do |method, url, params = {}|\n  it 'raises an exception when not logged in' do\n    self.public_send(method, url, **params)\n    expect(response.status).to eq(403)\n  end\nend\n\nRSpec.describe PostsController do\n  fab!(:admin) { Fabricate(:admin) }\n  fab!(:moderator) { Fabricate(:moderator) }\n  fab!(:user) { Fabricate(:user) }\n  fab!(:user_trust_level_0) { Fabricate(:trust_level_0) }\n  fab!(:user_trust_level_1) { Fabricate(:trust_level_1) }\n  fab!(:category) { Fabricate(:category) }\n  fab!(:topic) { Fabricate(:topic) }\n  fab!(:post_by_user) { Fabricate(:post, user: user) }\n  let(:public_post) { Fabricate(:post, user: user, topic: topic) }\n  let(:topicless_post) { Fabricate(:post, user: user, raw: '<p>Car 54, where are you?</p>') }\n\n  let(:private_topic) do\n    Fabricate(:topic, archetype: Archetype.private_message, category_id: nil)\n  end\n\n  let(:private_post) { Fabricate(:post, user: user, topic: private_topic) }\n\n  describe '#show' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/#{post.id}.json\" }\n    end\n\n    it 'gets all the expected fields' do\n      # non fabricated test\n      new_post = create_post\n\n      get \"/posts/#{new_post.id}.json\"\n      parsed = response.parsed_body\n\n      expect(parsed[\"topic_slug\"]).to eq(new_post.topic.slug)\n      expect(parsed[\"moderator\"]).to eq(false)\n      expect(parsed[\"username\"]).to eq(new_post.user.username)\n      expect(parsed[\"cooked\"]).to eq(new_post.cooked)\n    end\n  end\n\n  describe '#by_number' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/by_number/#{post.topic_id}/#{post.post_number}.json\" }\n    end\n  end\n\n  describe '#by_date' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/by-date/#{post.topic_id}/#{post.created_at.strftime(\"%Y-%m-%d\")}.json\" }\n    end\n\n    it 'returns the expected post' do\n      first_post = Fabricate(:post, created_at: 10.days.ago)\n      second_post = Fabricate(:post, topic: first_post.topic, created_at: 4.days.ago)\n      _third_post = Fabricate(:post, topic: first_post.topic, created_at: 3.days.ago)\n\n      get \"/posts/by-date/#{second_post.topic_id}/#{(second_post.created_at - 2.days).strftime(\"%Y-%m-%d\")}.json\"\n      json = response.parsed_body\n\n      expect(response.status).to eq(200)\n      expect(json[\"id\"]).to eq(second_post.id)\n    end\n\n    it 'returns no post if date is > at last created post' do\n      get \"/posts/by-date/#{post.topic_id}/2245-11-11.json\"\n      _json = response.parsed_body\n      expect(response.status).to eq(404)\n    end\n  end\n\n  describe '#reply_history' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/#{post.id}/reply-history.json\" }\n    end\n\n    it \"returns the replies with allowlisted user custom fields\" do\n      parent = Fabricate(:post)\n      child = Fabricate(:post, topic: parent.topic, reply_to_post_number: parent.post_number)\n\n      parent.user.upsert_custom_fields(hello: 'world', hidden: 'dontshow')\n      SiteSetting.public_user_custom_fields = 'hello'\n\n      get \"/posts/#{child.id}/reply-history.json\"\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n      expect(json[0]['id']).to eq(parent.id)\n      expect(json[0]['user_custom_fields']['hello']).to eq('world')\n      expect(json[0]['user_custom_fields']['hidden']).to be_blank\n    end\n  end\n\n  describe '#reply_ids' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/#{post.id}/reply-ids.json\" }\n    end\n\n    it \"returns ids of post's replies\" do\n      post = Fabricate(:post)\n      reply1 = Fabricate(:post, topic: post.topic, reply_to_post_number: post.post_number)\n      reply2 = Fabricate(:post, topic: post.topic, reply_to_post_number: post.post_number)\n      PostReply.create(post_id: post.id, reply_post_id: reply1.id)\n      PostReply.create(post_id: post.id, reply_post_id: reply2.id)\n\n      get \"/posts/#{post.id}/reply-ids.json\"\n\n      expect(response.status).to eq(200)\n      expect(response.parsed_body).to eq([\n        { \"id\" => reply1.id, \"level\" => 1 },\n        { \"id\" => reply2.id, \"level\" => 1 },\n      ])\n    end\n  end\n\n  describe '#replies' do\n    include_examples 'finding and showing post' do\n      let(:url) { \"/posts/#{post.id}/replies.json\" }\n    end\n\n    it 'asks post for replies' do\n      parent = Fabricate(:post)\n      child = Fabricate(:post, topic: parent.topic, reply_to_post_number: parent.post_number)\n      PostReply.create!(post: parent, reply: child)\n\n      child.user.upsert_custom_fields(hello: 'world', hidden: 'dontshow')\n      SiteSetting.public_user_custom_fields = 'hello'\n\n      get \"/posts/#{parent.id}/replies.json\"\n      expect(response.status).to eq(200)\n\n      json = response.parsed_body\n      expect(json[0]['id']).to eq(child.id)\n      expect(json[0]['user_custom_fields']['hello']).to eq('world')\n      expect(json[0]['user_custom_fields']['hidden']).to be_blank\n    end\n  end\n\n  describe '#destroy' do\n    include_examples 'action requires login', :delete, \"/posts/123.json\"\n\n    describe 'when logged in' do\n      let(:topic) { Fabricate(:topic) }\n\n      it \"raises an error when the user doesn't have permission to see the post\" do\n        pm = Fabricate(:private_message_topic)\n        post = Fabricate(:post, topic: pm, post_number: 3)\n\n        sign_in(user)\n\n        delete \"/posts/#{post.id}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"raises an error when the self deletions are disabled\" do\n        SiteSetting.max_post_deletions_per_day = 0\n        post = Fabricate(:post, user: user, topic: topic, post_number: 3)\n        sign_in(user)\n\n        delete \"/posts/#{post.id}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"uses a PostDestroyer\" do\n        post = Fabricate(:post, topic_id: topic.id, post_number: 3)\n        sign_in(moderator)\n\n        destroyer = mock\n        PostDestroyer.expects(:new).returns(destroyer)\n        destroyer.expects(:destroy)\n\n        delete \"/posts/#{post.id}.json\"\n      end\n\n      context \"with permanently destroy\" do\n        let!(:post) { Fabricate(:post, topic_id: topic.id, post_number: 3) }\n\n        before do\n          SiteSetting.can_permanently_delete = true\n        end\n\n        it \"does not work for a post that was not deleted yet\" do\n          sign_in(admin)\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(403)\n        end\n\n        it \"needs some time to pass to permanently delete a topic\" do\n          sign_in(admin)\n\n          delete \"/posts/#{post.id}.json\"\n          expect(response.status).to eq(200)\n          expect(post.reload.deleted_by_id).to eq(admin.id)\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(403)\n\n          post.update!(deleted_at: 10.minutes.ago)\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(200)\n          expect { post.reload }.to raise_error(ActiveRecord::RecordNotFound)\n        end\n\n        it \"needs two users to permanently delete a topic\" do\n          sign_in(admin)\n\n          delete \"/posts/#{post.id}.json\"\n          expect(response.status).to eq(200)\n          expect(post.reload.deleted_by_id).to eq(admin.id)\n\n          sign_in(Fabricate(:admin))\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(200)\n          expect { post.reload }.to raise_error(ActiveRecord::RecordNotFound)\n        end\n\n        it \"moderators cannot permanently delete topics\" do\n          sign_in(admin)\n\n          delete \"/posts/#{post.id}.json\"\n          expect(response.status).to eq(200)\n          expect(post.reload.deleted_by_id).to eq(admin.id)\n\n          sign_in(moderator)\n\n          delete \"/posts/#{post.id}.json\", params: { force_destroy: true }\n          expect(response.status).to eq(403)\n        end\n      end\n    end\n  end\n\n  describe '#destroy_many' do\n    include_examples 'action requires login', :delete, \"/posts/destroy_many.json\", params: { post_ids: [123, 345] }\n\n    describe 'when logged in' do\n      fab!(:poster) { Fabricate(:moderator) }\n      fab!(:post1) { Fabricate(:post, user: poster, post_number: 2) }\n      fab!(:post2) { Fabricate(:post, topic: post1.topic, user: poster, post_number: 3, reply_to_post_number: post1.post_number) }\n\n      it \"raises invalid parameters no post_ids\" do\n        sign_in(poster)\n        delete \"/posts/destroy_many.json\"\n        expect(response.status).to eq(400)\n        expect(response.message.downcase).to eq(\"bad request\")\n      end\n\n      it \"raises invalid parameters with missing ids\" do\n        sign_in(poster)\n        delete \"/posts/destroy_many.json\", params: { post_ids: [12345] }\n        expect(response.status).to eq(400)\n      end\n\n      it \"raises an error when the user doesn't have permission to delete the posts\" do\n        sign_in(user)\n        delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id] }\n        expect(response).to be_forbidden\n      end\n\n      it \"deletes the post\" do\n        sign_in(poster)\n        PostDestroyer.any_instance.expects(:destroy).twice\n        delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id] }\n        expect(response.status).to eq(200)\n      end\n\n      it \"updates the highest read data for the forum\" do\n        sign_in(poster)\n        Topic.expects(:reset_highest).twice\n        delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id] }\n      end\n\n      describe \"can delete replies\" do\n        before do\n          PostReply.create(post_id: post1.id, reply_post_id: post2.id)\n        end\n\n        it \"deletes the post and the reply to it\" do\n          sign_in(poster)\n          PostDestroyer.any_instance.expects(:destroy).twice\n          delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id], reply_post_ids: [post1.id] }\n        end\n      end\n\n      context \"when deleting flagged posts\" do\n        before do\n          sign_in(moderator)\n          PostActionCreator.off_topic(moderator, post1)\n          PostActionCreator.off_topic(moderator, post2)\n          Jobs::SendSystemMessage.clear\n        end\n\n        it \"defers the child posts by default\" do\n          expect(ReviewableFlaggedPost.pending.count).to eq(2)\n          delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id] }\n          expect(Jobs::SendSystemMessage.jobs.size).to eq(1)\n          expect(ReviewableFlaggedPost.pending.count).to eq(0)\n        end\n\n        it \"can defer all posts based on `agree_with_first_reply_flag` param\" do\n          expect(ReviewableFlaggedPost.pending.count).to eq(2)\n          delete \"/posts/destroy_many.json\", params: { post_ids: [post1.id, post2.id], agree_with_first_reply_flag: false }\n          PostActionCreator.off_topic(moderator, post1)\n          PostActionCreator.off_topic(moderator, post2)\n          Jobs::SendSystemMessage.clear\n        end\n      end\n    end\n  end\n\n  describe '#recover' do\n    include_examples 'action requires login', :put, \"/posts/123/recover.json\"\n\n    describe 'when logged in' do\n      it \"raises an error when the user doesn't have permission to see the post\" do\n        post = Fabricate(:post, topic: Fabricate(:private_message_topic), post_number: 3)\n        sign_in(user)\n\n        put \"/posts/#{post.id}/recover.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"raises an error when self deletion/recovery is disabled\" do\n        SiteSetting.max_post_deletions_per_day = 0\n        post = Fabricate(:post, user: user, topic: topic, post_number: 3)\n        sign_in(user)\n\n        put \"/posts/#{post.id}/recover.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"recovers a post correctly\" do\n        topic_id = create_post.topic_id\n        post = create_post(topic_id: topic_id)\n        sign_in(user)\n\n        PostDestroyer.new(user, post).destroy\n        put \"/posts/#{post.id}/recover.json\"\n        post.reload\n        expect(post.trashed?).to be_falsey\n      end\n    end\n  end\n\n  describe '#update' do\n    include_examples 'action requires login', :put, \"/posts/2.json\"\n\n    let!(:post) { post_by_user }\n    let(:update_params) do\n      {\n        post: { raw: 'edited body', edit_reason: 'typo' },\n        image_sizes: { 'http://image.com/image.jpg' => { 'width' => 123, 'height' => 456 } },\n      }\n    end\n\n    describe 'when logged in as a regular user' do\n      before do\n        sign_in(user)\n      end\n\n      it 'does not allow TL0 or TL1 to update when edit time limit expired' do\n        SiteSetting.post_edit_time_limit = 5\n        SiteSetting.tl2_post_edit_time_limit = 30\n\n        post = Fabricate(:post, created_at: 10.minutes.ago, user: user)\n\n        user.update_columns(trust_level: 1)\n\n        put \"/posts/#{post.id}.json\", params: update_params\n\n        expect(response.status).to eq(422)\n        expect(response.parsed_body['errors']).to include(I18n.t('too_late_to_edit'))\n      end\n\n      it 'does not allow TL2 to update when edit time limit expired' do\n        SiteSetting.post_edit_time_limit = 12\n        SiteSetting.tl2_post_edit_time_limit = 8\n\n        user.update_columns(trust_level: 2)\n\n        post = Fabricate(:post, created_at: 10.minutes.ago, user: user)\n\n        put \"/posts/#{post.id}.json\", params: update_params\n\n        expect(response.status).to eq(422)\n        expect(response.parsed_body['errors']).to include(I18n.t('too_late_to_edit'))\n      end\n\n      it 'passes the image sizes through' do\n        Post.any_instance.expects(:image_sizes=)\n        put \"/posts/#{post.id}.json\", params: update_params\n      end\n\n      it 'passes the edit reason through' do\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response.status).to eq(200)\n        post.reload\n        expect(post.edit_reason).to eq(\"typo\")\n        expect(post.raw).to eq(\"edited body\")\n      end\n\n      it 'checks for an edit conflict' do\n        update_params[:post][:raw_old] = 'old body'\n        put \"/posts/#{post.id}.json\", params: update_params\n\n        expect(response.status).to eq(409)\n      end\n\n      it \"raises an error when the post parameter is missing\" do\n        update_params.delete(:post)\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response.status).to eq(400)\n        expect(response.message.downcase).to eq(\"bad request\")\n      end\n\n      it \"raises an error when the user doesn't have permission to see the post\" do\n        post = Fabricate(:private_message_post, post_number: 3)\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response).to be_forbidden\n      end\n\n      it \"updates post's raw attribute\" do\n        put \"/posts/#{post.id}.json\", params: { post: { raw: 'edited body   ' } }\n\n        expect(response.status).to eq(200)\n        expect(response.parsed_body['post']['raw']).to eq('edited body')\n        expect(post.reload.raw).to eq('edited body')\n      end\n\n      it \"extracts links from the new body\" do\n        param = update_params\n        param[:post][:raw] = 'I just visited this https://google.com so many cool links'\n\n        put \"/posts/#{post.id}.json\", params: param\n\n        expect(response.status).to eq(200)\n        expect(TopicLink.count).to eq(1)\n      end\n\n      it \"doesn't allow updating of deleted posts\" do\n        first_post = post.topic.ordered_posts.first\n        PostDestroyer.new(moderator, first_post).destroy\n\n        put \"/posts/#{first_post.id}.json\", params: update_params\n        expect(response).not_to be_successful\n      end\n    end\n\n    describe \"when logged in as staff\" do\n      before do\n        sign_in(moderator)\n      end\n\n      it \"supports updating posts in deleted topics\" do\n        first_post = post.topic.ordered_posts.first\n        PostDestroyer.new(moderator, first_post).destroy\n\n        put \"/posts/#{first_post.id}.json\", params: update_params\n        expect(response.status).to eq(200)\n\n        post.reload\n        expect(post.raw).to eq('edited body')\n      end\n\n      it \"won't update bump date if post is a whisper\" do\n        created_at = freeze_time 1.day.ago\n        post = Fabricate(:post, post_type: Post.types[:whisper], user: user)\n\n        unfreeze_time\n        put \"/posts/#{post.id}.json\", params: update_params\n\n        expect(response.status).to eq(200)\n        expect(post.topic.reload.bumped_at).to eq_time(created_at)\n      end\n    end\n\n    describe \"when logged in as group moderator\" do\n      fab!(:topic) { Fabricate(:topic, category: category) }\n      fab!(:post) { Fabricate(:post, user: user, topic: topic) }\n      fab!(:group_user) { Fabricate(:group_user) }\n      let(:user_gm) { group_user.user }\n      let(:group) { group_user.group }\n\n      before do\n        SiteSetting.enable_category_group_moderation = true\n        post.topic.category.update!(reviewable_by_group_id: group.id, topic_id: topic.id)\n        sign_in(user_gm)\n      end\n\n      it \"allows updating the category description\" do\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response.status).to eq(200)\n\n        post.reload\n        expect(post.raw).to eq('edited body')\n        expect(UserHistory.where(action: UserHistory.actions[:post_edit]).count).to eq(1)\n      end\n\n      it \"can not update category descriptions in other categories\" do\n        second_category = Fabricate(:category)\n        topic.update!(category: second_category)\n\n        put \"/posts/#{post.id}.json\", params: update_params\n        expect(response.status).to eq(403)\n      end\n\n    end\n\n    it 'can not change category to a disallowed category' do\n      post = create_post\n      sign_in(post.user)\n\n      category = Fabricate(:category)\n      category.set_permissions(staff: :full)\n      category.save!\n\n      put \"/posts/#{post.id}.json\", params: {\n        post: { category_id: category.id, raw: \"this is a test edit to post\" }\n      }\n\n      expect(response.status).not_to eq(200)\n      expect(post.topic.category_id).not_to eq(category.id)\n    end\n\n    it 'can not move to a category that requires topic approval' do\n      post = create_post\n      sign_in(post.user)\n\n      category = Fabricate(:category)\n      category.custom_fields[Category::REQUIRE_TOPIC_APPROVAL] = true\n      category.save!\n\n      put \"/posts/#{post.id}.json\", params: { post: { category_id: category.id, raw: \"this is a test edit to post\" } }\n\n      expect(response.status).to eq(403)\n      expect(post.topic.reload.category_id).not_to eq(category.id)\n    end\n\n    describe \"with Post.plugin_permitted_update_params\" do\n      before do\n        plugin = Plugin::Instance.new\n        plugin.add_permitted_post_update_param(:random_number) do |post, value|\n          post.custom_fields[:random_number] = value\n          post.save\n        end\n      end\n\n      after do\n        DiscoursePluginRegistry.reset!\n      end\n\n      it \"calls blocks passed into `add_permitted_post_update_param`\" do\n        sign_in(post.user)\n        put \"/posts/#{post.id}.json\", params: {\n          post: {\n            raw: \"this is a random post\",\n            raw_old: post.raw,\n            random_number: 244\n          }\n        }\n\n        expect(response.status).to eq(200)\n        expect(post.reload.custom_fields[:random_number]).to eq(\"244\")\n      end\n    end\n  end\n\n  describe \"#destroy_bookmark\" do\n    fab!(:post) { Fabricate(:post) }\n    fab!(:bookmark) { Fabricate(:bookmark, user: user, bookmarkable: post) }\n\n    before do\n      sign_in(user)\n    end\n\n    it \"deletes the bookmark\" do\n      bookmark_id = bookmark.id\n      delete \"/posts/#{post.id}/bookmark.json\"\n      expect(Bookmark.find_by(id: bookmark_id)).to eq(nil)\n    end\n\n    context \"when the user still has bookmarks in the topic\" do\n      before do\n        Fabricate(:bookmark, user: user, bookmarkable: Fabricate(:post, topic: post.topic))\n      end\n      it \"marks topic_bookmarked as true\" do\n        delete \"/posts/#{post.id}/bookmark.json\"\n        expect(response.parsed_body['topic_bookmarked']).to eq(true)\n      end\n    end\n  end\n\n  describe '#wiki' do\n    include_examples \"action requires login\", :put, \"/posts/2/wiki.json\"\n\n    describe \"when logged in\" do\n      before do\n        sign_in(user)\n      end\n\n      let!(:post) { post_by_user }\n\n      it \"returns 400 when wiki parameter is not present\" do\n        sign_in(admin)\n\n        put \"/posts/#{post.id}/wiki.json\", params: {}\n\n        expect(response.status).to eq(400)\n      end\n\n      it \"raises an error if the user doesn't have permission to wiki the post\" do\n        put \"/posts/#{post.id}/wiki.json\", params: { wiki: 'true' }\n        expect(response).to be_forbidden\n      end\n\n      it \"toggle wiki status should create a new version\" do\n        sign_in(admin)\n        another_user = Fabricate(:user)\n        another_post = Fabricate(:post, user: another_user)\n\n        expect do\n          put \"/posts/#{another_post.id}/wiki.json\", params: { wiki: 'true' }\n        end.to change { another_post.reload.version }.by(1)\n\n        expect do\n          put \"/posts/#{another_post.id}/wiki.json\", params: { wiki: 'false' }\n        end.to change { another_post.reload.version }.by(-1)\n\n        sign_in(Fabricate(:admin))\n\n        expect do\n          put \"/posts/#{another_post.id}/wiki.json\", params: { wiki: 'true' }\n        end.to change { another_post.reload.version }.by(1)\n      end\n\n      it \"can wiki a post\" do\n        sign_in(admin)\n        put \"/posts/#{post.id}/wiki.json\", params: { wiki: 'true' }\n\n        post.reload\n        expect(post.wiki).to eq(true)\n      end\n\n      it \"can unwiki a post\" do\n        wikied_post = Fabricate(:post, user: user, wiki: true)\n        sign_in(admin)\n\n        put \"/posts/#{wikied_post.id}/wiki.json\", params: { wiki: 'false' }\n\n        wikied_post.reload\n        expect(wikied_post.wiki).to eq(false)\n      end\n    end\n  end\n\n  describe '#post_type' do\n    include_examples \"action requires login\", :put, \"/posts/2/post_type.json\"\n\n    describe \"when logged in\" do\n      before do\n        sign_in(moderator)\n      end\n\n      let!(:post) { post_by_user }\n\n      it \"raises an error if the user doesn't have permission to change the post type\" do\n        sign_in(user)\n\n        put \"/posts/#{post.id}/post_type.json\", params: { post_type: 2 }\n        expect(response).to be_forbidden\n      end\n\n      it \"returns 400 if post_type parameter is not present\" do\n        put \"/posts/#{post.id}/post_type.json\", params: {}\n\n        expect(response.status).to eq(400)\n      end\n\n      it \"returns 400 if post_type parameters is invalid\" do\n        put \"/posts/#{post.id}/post_type.json\", params: { post_type: -1 }\n\n        expect(response.status).to eq(400)\n      end\n\n      it \"can change the post type\" do\n        put \"/posts/#{post.id}/post_type.json\", params: { post_type: 2 }\n\n        post.reload\n        expect(post.post_type).to eq(2)\n      end\n    end\n  end\n\n  describe '#rebake' do\n    include_examples \"action requires login\", :put, \"/posts/2/rebake.json\"\n\n    describe \"when logged in\" do\n      let!(:post) { post_by_user }\n\n      it \"raises an error if the user doesn't have permission to rebake the post\" do\n        sign_in(user)\n        put \"/posts/#{post.id}/rebake.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"can rebake the post\" do\n        sign_in(moderator)\n        put \"/posts/#{post.id}/rebake.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"will invalidate broken images cache\" do\n        sign_in(moderator)\n        PostHotlinkedMedia.create!(url: \"https://example.com/image.jpg\", post: post, status: 'download_failed')\n        put \"/posts/#{post.id}/rebake.json\"\n        post.reload\n        expect(post.post_hotlinked_media).to eq([])\n      end\n    end\n  end\n\n  describe '#create' do\n    include_examples 'action requires login', :post, \"/posts.json\"\n\n    before do\n      SiteSetting.min_first_post_typing_time = 0\n      SiteSetting.enable_whispers = true\n    end\n\n    context 'with api' do\n      it 'memoizes duplicate requests' do\n        raw = \"this is a test post 123 #{SecureRandom.hash}\"\n        title = \"this is a title #{SecureRandom.hash}\"\n\n        master_key = Fabricate(:api_key).key\n\n        post \"/posts.json\",\n          params: { raw: raw, title: title, wpid: 1 },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        original = response.body\n\n        post \"/posts.json\",\n          params: { raw: raw, title: title, wpid: 2 },\n          headers: { HTTP_API_USERNAME: user.username_lower, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        expect(response.body).to eq(original)\n      end\n\n      it 'allows to create posts in import_mode' do\n        Jobs.run_immediately!\n        NotificationEmailer.enable\n        post_1 = Fabricate(:post)\n        master_key = Fabricate(:api_key).key\n\n        post \"/posts.json\",\n          params: { raw: 'this is test reply 1', topic_id: post_1.topic.id, reply_to_post_number: 1 },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        expect(post_1.topic.user.notifications.count).to eq(1)\n        post_1.topic.user.notifications.destroy_all\n\n        post \"/posts.json\",\n          params: { raw: 'this is test reply 2', topic_id: post_1.topic.id, reply_to_post_number: 1, import_mode: true },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        expect(post_1.topic.user.notifications.count).to eq(0)\n\n        post \"/posts.json\",\n          params: { raw: 'this is test reply 3', topic_id: post_1.topic.id, reply_to_post_number: 1, import_mode: false },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n        expect(post_1.topic.user.notifications.count).to eq(1)\n      end\n\n      it 'allows a topic to be created with an external_id' do\n        master_key = Fabricate(:api_key).key\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: \"this is some post\",\n          external_id: 'external_id'\n        }, headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(200)\n\n        new_topic = Topic.last\n\n        expect(new_topic.external_id).to eq('external_id')\n      end\n\n      it 'prevents whispers for regular users' do\n        post_1 = Fabricate(:post)\n        user_key = ApiKey.create!(user: user).key\n\n        post \"/posts.json\",\n          params: { raw: 'this is test whisper', topic_id: post_1.topic.id, reply_to_post_number: 1, whisper: true },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: user_key }\n\n        expect(response.status).to eq(403)\n      end\n\n      it 'does not advance draft' do\n        Draft.set(user, Draft::NEW_TOPIC, 0, \"test\")\n        user_key = ApiKey.create!(user: user).key\n\n        post \"/posts.json\",\n          params: { title: 'this is a test topic', raw: 'this is test whisper' },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: user_key }\n\n        expect(response.status).to eq(200)\n        expect(Draft.get(user, Draft::NEW_TOPIC, 0)).to eq(\"test\")\n      end\n\n      it 'will raise an error if specified category cannot be found' do\n        user = Fabricate(:admin)\n        master_key = Fabricate(:api_key).key\n\n        post \"/posts.json\",\n          params: { title: 'this is a test title', raw: 'this is test body', category: 'invalid' },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(400)\n\n        expect(response.parsed_body[\"errors\"]).to include(\n          I18n.t(\"invalid_params\", message: \"category\")\n        )\n      end\n\n      it 'will raise an error if specified embed_url is invalid' do\n        user = Fabricate(:admin)\n        master_key = Fabricate(:api_key).key\n\n        post \"/posts.json\",\n          params: { title: 'this is a test title', raw: 'this is test body', embed_url: '/test.txt' },\n          headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: master_key }\n\n        expect(response.status).to eq(422)\n      end\n\n      it \"creates unlisted topic with admin master key\" do\n        master_key = Fabricate(:api_key).key\n\n        expect do\n          post \"/posts.json\",\n            params: { raw: \"this is a test title\", title: \"this is test body\", unlist_topic: true },\n            headers: { HTTP_API_USERNAME: admin.username, HTTP_API_KEY: master_key }\n        end.to change { Topic.count }.by(1)\n\n        expect(response.status).to eq(200)\n        expect(Topic.find(response.parsed_body[\"topic_id\"]).visible).to eq(false)\n      end\n\n      it \"prevents creation of unlisted topic with non-admin key\" do\n        user_key = ApiKey.create!(user: user).key\n\n        expect do\n          post \"/posts.json\",\n            params: { raw: \"this is a test title\", title: \"this is test body\", unlist_topic: true },\n            headers: { HTTP_API_USERNAME: user.username, HTTP_API_KEY: user_key }\n        end.not_to change { Topic.count }\n\n        expect(response.status).to eq(422)\n        expect(response.parsed_body[\"errors\"]).to include(\n          I18n.t(\"activerecord.errors.models.topic.attributes.base.unable_to_unlist\")\n        )\n      end\n    end\n\n    describe \"when logged in\" do\n      fab!(:user) { Fabricate(:user) }\n\n      before do\n        sign_in(user)\n      end\n\n      context \"when fast typing\" do\n        before do\n          SiteSetting.min_first_post_typing_time = 3000\n          SiteSetting.auto_silence_fast_typers_max_trust_level = 1\n        end\n\n        it 'queues the post if min_first_post_typing_time is not met' do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic',\n            composer_open_duration_msecs: 204,\n            typing_duration_msecs: 100,\n            reply_to_post_number: 123\n          }\n\n          expect(response.status).to eq(200)\n          parsed = response.parsed_body\n\n          expect(parsed[\"action\"]).to eq(\"enqueued\")\n\n          user.reload\n          expect(user).to be_silenced\n\n          rp = ReviewableQueuedPost.find_by(created_by: user)\n          expect(rp.payload['typing_duration_msecs']).to eq(100)\n          expect(rp.payload['composer_open_duration_msecs']).to eq(204)\n          expect(rp.payload['reply_to_post_number']).to eq(123)\n          expect(rp.reviewable_scores.first.reason).to eq('fast_typer')\n\n          expect(parsed['pending_post']).to be_present\n          expect(parsed['pending_post']['id']).to eq(rp.id)\n          expect(parsed['pending_post']['raw']).to eq(\"this is the test content\")\n\n          mod = moderator\n          rp.perform(mod, :approve_post)\n\n          user.reload\n          expect(user).not_to be_silenced\n        end\n\n        it \"doesn't enqueue posts when user first creates a topic\" do\n          topic = Fabricate(:post, user: user).topic\n\n          Draft.set(user, \"should_clear\", 0, \"{'a' : 'b'}\")\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic',\n            composer_open_duration_msecs: 204,\n            typing_duration_msecs: 100,\n            topic_id: topic.id,\n            draft_key: \"should_clear\"\n          }\n\n          expect(response.status).to eq(200)\n          parsed = response.parsed_body\n\n          expect(parsed[\"action\"]).not_to be_present\n\n          expect {\n            Draft.get(user, \"should_clear\", 0)\n          }.to raise_error(Draft::OutOfSequence)\n        end\n\n        it \"doesn't enqueue replies when the topic is closed\" do\n          topic = Fabricate(:closed_topic)\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic',\n            topic_id: topic.id\n          }\n\n          expect(response).not_to be_successful\n          parsed = response.parsed_body\n          expect(parsed[\"action\"]).not_to eq(\"enqueued\")\n        end\n\n        it \"doesn't enqueue replies when the post is too long\" do\n          SiteSetting.max_post_length = 10\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic'\n          }\n\n          expect(response).not_to be_successful\n          parsed = response.parsed_body\n          expect(parsed[\"action\"]).not_to eq(\"enqueued\")\n        end\n      end\n\n      it 'silences correctly based on auto_silence_first_post_regex' do\n        SiteSetting.auto_silence_first_post_regex = \"I love candy|i eat s[1-5]\"\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'when I eat s3 sometimes when not looking'\n        }\n\n        expect(response.status).to eq(200)\n        parsed = response.parsed_body\n\n        expect(parsed[\"action\"]).to eq(\"enqueued\")\n        reviewable = ReviewableQueuedPost.find_by(created_by: user)\n        score = reviewable.reviewable_scores.first\n        expect(score.reason).to eq('auto_silence_regex')\n\n        user.reload\n        expect(user).to be_silenced\n      end\n\n      it 'silences correctly based on silence watched words' do\n        SiteSetting.watched_words_regular_expressions = true\n        WatchedWord.create!(action: WatchedWord.actions[:silence], word: 'I love candy')\n        WatchedWord.create!(action: WatchedWord.actions[:silence], word: 'i eat s[1-5]')\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'when I eat s3 sometimes when not looking'\n        }\n\n        expect(response.status).to eq(200)\n        parsed = response.parsed_body\n\n        expect(parsed[\"action\"]).to eq(\"enqueued\")\n        reviewable = ReviewableQueuedPost.find_by(created_by: user)\n        score = reviewable.reviewable_scores.first\n        expect(score.reason).to eq('auto_silence_regex')\n\n        user.reload\n        expect(user).to be_silenced\n      end\n\n      it \"can send a message to a group\" do\n        Group.refresh_automatic_groups!\n        group = Group.create(name: 'test_group', messageable_level: Group::ALIAS_LEVELS[:nobody])\n        user1 = user\n        group.add(user1)\n\n        post \"/posts.json\", params: {\n          raw: 'I can haz a test',\n          title: 'I loves my test',\n          target_recipients: group.name,\n          archetype: Archetype.private_message\n        }\n\n        expect(response).not_to be_successful\n\n        # allow pm to this group\n        group.update_columns(messageable_level: Group::ALIAS_LEVELS[:everyone])\n\n        post \"/posts.json\", params: {\n          raw: 'I can haz a test',\n          title: 'I loves my test',\n          target_recipients: \"test_Group\",\n          archetype: Archetype.private_message\n        }\n\n        expect(response.status).to eq(200)\n\n        parsed = response.parsed_body\n        post = Post.find(parsed['id'])\n\n        expect(post.topic.topic_allowed_users.length).to eq(1)\n        expect(post.topic.topic_allowed_groups.length).to eq(1)\n      end\n\n      it \"can send a message to a group with caps\" do\n        Group.refresh_automatic_groups!\n        group = Group.create(name: 'Test_group', messageable_level: Group::ALIAS_LEVELS[:nobody])\n        user1 = user\n        group.add(user1)\n\n        # allow pm to this group\n        group.update_columns(messageable_level: Group::ALIAS_LEVELS[:everyone])\n\n        post \"/posts.json\", params: {\n          raw: 'I can haz a test',\n          title: 'I loves my test',\n          target_recipients: \"test_Group\",\n          archetype: Archetype.private_message\n        }\n\n        expect(response.status).to eq(200)\n\n        parsed = response.parsed_body\n        post = Post.find(parsed['id'])\n\n        expect(post.topic.topic_allowed_users.length).to eq(1)\n        expect(post.topic.topic_allowed_groups.length).to eq(1)\n      end\n\n      it \"returns the nested post with a param\" do\n        post \"/posts.json\", params: {\n          raw: 'this is the test content  ',\n          title: 'this is the test title for the topic',\n          nested_post: true\n        }\n\n        expect(response.status).to eq(200)\n        parsed = response.parsed_body\n        expect(parsed['post']).to be_present\n        expect(parsed['post']['raw']).to eq('this is the test content')\n        expect(parsed['post']['cooked']).to be_present\n      end\n\n      it 'protects against dupes' do\n        raw = \"this is a test post 123 #{SecureRandom.hash}\"\n        title = \"this is a title #{SecureRandom.hash}\"\n\n        expect do\n          post \"/posts.json\", params: { raw: raw, title: title, wpid: 1 }\n        end.to change { Post.count }\n\n        expect(response.status).to eq(200)\n\n        expect do\n          post \"/posts.json\", params: { raw: raw, title: title, wpid: 2 }\n        end.to_not change { Post.count }\n\n        expect(response.status).to eq(422)\n      end\n\n      it 'cannot create a post in a disallowed category' do\n        category.set_permissions(staff: :full)\n        category.save!\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          category: category.id,\n          meta_data: { xyz: 'abc' }\n        }\n\n        expect(response.status).to eq(403)\n      end\n\n      it 'cannot create a post with a tag that is restricted' do\n        SiteSetting.tagging_enabled = true\n        tag = Fabricate(:tag)\n        category.allowed_tags = [tag.name]\n        category.save!\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          tags: [tag.name],\n        }\n\n        expect(response.status).to eq(422)\n        json = response.parsed_body\n        expect(json['errors']).to be_present\n      end\n\n      it 'cannot create a post with a tag when tagging is disabled' do\n        SiteSetting.tagging_enabled = false\n        tag = Fabricate(:tag)\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          tags: [tag.name],\n        }\n\n        expect(response.status).to eq(422)\n        json = response.parsed_body\n        expect(json['errors']).to be_present\n      end\n\n      it 'cannot create a post with a tag without tagging permission' do\n        SiteSetting.tagging_enabled = true\n        SiteSetting.min_trust_level_to_tag_topics = 4\n        tag = Fabricate(:tag)\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          tags: [tag.name],\n        }\n\n        expect(response.status).to eq(422)\n        json = response.parsed_body\n        expect(json['errors']).to be_present\n      end\n\n      it 'can create a post with a tag when tagging is enabled' do\n        SiteSetting.tagging_enabled = true\n        tag = Fabricate(:tag)\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          tags: [tag.name],\n        }\n\n        expect(response.status).to eq(200)\n        expect(Post.last.topic.tags.count).to eq(1)\n      end\n\n      it 'creates the post' do\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          title: 'this is the test title for the topic',\n          category: category.id,\n          meta_data: { xyz: 'abc' }\n        }\n\n        expect(response.status).to eq(200)\n\n        new_post = Post.last\n        topic = new_post.topic\n\n        expect(new_post.user).to eq(user)\n        expect(new_post.raw).to eq('this is the test content')\n        expect(topic.title).to eq('This is the test title for the topic')\n        expect(topic.category).to eq(category)\n        expect(topic.meta_data).to eq(\"xyz\" => 'abc')\n        expect(topic.visible).to eq(true)\n      end\n\n      it 'can create an uncategorized topic' do\n        title = 'this is the test title for the topic'\n\n        expect do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: title,\n            category: \"\"\n          }\n\n          expect(response.status).to eq(200)\n        end.to change { Topic.count }.by(1)\n\n        topic = Topic.last\n\n        expect(topic.title).to eq(title.capitalize)\n        expect(topic.category_id).to eq(SiteSetting.uncategorized_category_id)\n      end\n\n      it 'can create a reply to a post' do\n        topic = Fabricate(:private_message_post, user: user).topic\n        post_2 = Fabricate(:private_message_post, user: user, topic: topic)\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          topic_id: topic.id,\n          reply_to_post_number: post_2.post_number,\n          image_sizes: { width: '100', height: '200' }\n        }\n\n        expect(response.status).to eq(200)\n\n        new_post = Post.last\n        topic = new_post.topic\n\n        expect(new_post.user).to eq(user)\n        expect(new_post.raw).to eq('this is the test content')\n        expect(new_post.reply_to_post_number).to eq(post_2.post_number)\n\n        job_args = Jobs::ProcessPost.jobs.first[\"args\"].first\n\n        expect(job_args[\"image_sizes\"]).to eq(\"width\" => '100', \"height\" => '200')\n      end\n\n      it 'creates a private post' do\n        user_2 = Fabricate(:user)\n        user_3 = Fabricate(:user, username: \"foo_bar\")\n\n        # In certain edge cases, it's possible to end up with a username\n        # containing characters that would normally fail to validate\n        user_4 = Fabricate(:user, username: \"Iyi_Iyi\")\n        user_4.update_attribute(:username, \"\u0130yi_\u0130yi\")\n        user_4.update_attribute(:username_lower, \"\u0130yi_\u0130yi\".downcase)\n        Group.refresh_automatic_groups!\n\n        post \"/posts.json\", params: {\n          raw: 'this is the test content',\n          archetype: 'private_message',\n          title: \"this is some post\",\n          target_recipients: \"#{user_2.username},Foo_Bar,\u0130yi_\u0130yi\"\n        }\n\n        expect(response.status).to eq(200)\n\n        new_post = Post.last\n        new_topic = Topic.last\n\n        expect(new_post.user).to eq(user)\n        expect(new_topic.private_message?).to eq(true)\n        expect(new_topic.allowed_users).to contain_exactly(user, user_2, user_3, user_4)\n      end\n\n      context \"when target_recipients not provided\" do\n        it \"errors when creating a private post\" do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: \"\"\n          }\n\n          expect(response.status).to eq(422)\n          expect(response.parsed_body[\"errors\"]).to include(\n            I18n.t(\"activerecord.errors.models.topic.attributes.base.no_user_selected\")\n          )\n        end\n      end\n\n      context \"when topic_id is set\" do\n        fab!(:topic) { Fabricate(:topic) }\n\n        it \"errors when creating a private post\" do\n          user_2 = Fabricate(:user)\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: user_2.username,\n            topic_id: topic.id\n          }\n\n          expect(response.status).to eq(422)\n          expect(response.parsed_body[\"errors\"]).to include(\n            I18n.t(\"create_pm_on_existing_topic\")\n          )\n        end\n      end\n\n      context \"with errors\" do\n        it \"does not succeed\" do\n          post \"/posts.json\", params: { raw: 'test' }\n          expect(response).not_to be_successful\n          expect(response.status).to eq(422)\n        end\n\n        it \"it triggers flag_linked_posts_as_spam when the post creator returns spam\" do\n          SiteSetting.newuser_spam_host_threshold = 1\n          sign_in(Fabricate(:user, trust_level: 0))\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content http://fakespamwebsite.com http://fakespamwebsite.com/spam http://fakespamwebsite.com/spammy',\n            title: 'this is the test title for the topic',\n            meta_data: { xyz: 'abc' }\n          }\n\n          expect(response.parsed_body[\"errors\"]).to include(I18n.t(:spamming_host))\n        end\n\n        context \"when allow_uncategorized_topics is false\" do\n          before do\n            SiteSetting.allow_uncategorized_topics = false\n          end\n\n          it \"cant create an uncategorized post\" do\n            post \"/posts.json\", params: {\n              raw: \"a new post with no category\",\n              title: \"a new post with no category\"\n            }\n            expect(response).not_to be_successful\n          end\n\n          context \"as staff\" do\n            before do\n              sign_in(admin)\n            end\n\n            it \"cant create an uncategorized post\" do\n              post \"/posts.json\", params: {\n                raw: \"a new post with no category\",\n                title: \"a new post with no category\"\n              }\n              expect(response).not_to be_successful\n            end\n          end\n        end\n      end\n    end\n\n    context \"with topic unlisting\" do\n      context \"when logged in as staff\" do\n        before do\n          sign_in(admin)\n        end\n\n        it \"creates an unlisted topic\" do\n          expect do\n            post \"/posts.json\", params: {\n              raw: \"this is the test content\",\n              title: \"this is the test title for the topic\",\n              unlist_topic: true\n            }\n          end.to change { Topic.count }.by(1)\n\n          expect(response.status).to eq(200)\n          expect(Topic.find(response.parsed_body[\"topic_id\"]).visible).to eq(false)\n        end\n      end\n\n      context \"when logged in as a non-staff user\" do\n        before do\n          sign_in(user)\n        end\n\n        it \"prevents creation of an unlisted topic\" do\n          expect do\n            post \"/posts.json\", params: {\n              raw: \"this is the test content\",\n              title: \"this is the test title for the topic\",\n              unlist_topic: true\n            }\n          end.not_to change { Topic.count }\n\n          expect(response.status).to eq(422)\n          expect(response.parsed_body[\"errors\"]).to include(\n            I18n.t(\"activerecord.errors.models.topic.attributes.base.unable_to_unlist\")\n          )\n        end\n      end\n    end\n\n    describe 'shared draft' do\n      fab!(:destination_category) { Fabricate(:category) }\n\n      it \"will raise an error for regular users\" do\n        post \"/posts.json\", params: {\n          raw: 'this is the shared draft content',\n          title: \"this is the shared draft title\",\n          category: destination_category.id,\n          shared_draft: 'true'\n        }\n        expect(response).not_to be_successful\n      end\n\n      describe \"as a staff user\" do\n        before do\n          sign_in(moderator)\n        end\n\n        it \"will raise an error if there is no shared draft category\" do\n          post \"/posts.json\", params: {\n            raw: 'this is the shared draft content',\n            title: \"this is the shared draft title\",\n            category: destination_category.id,\n            shared_draft: 'true'\n          }\n          expect(response).not_to be_successful\n        end\n\n        context \"with a shared category\" do\n          fab!(:shared_category) { Fabricate(:category) }\n          before do\n            SiteSetting.shared_drafts_category = shared_category.id\n          end\n\n          it \"will work if the shared draft category is present\" do\n            post \"/posts.json\", params: {\n              raw: 'this is the shared draft content',\n              title: \"this is the shared draft title\",\n              category: destination_category.id,\n              shared_draft: 'true'\n            }\n            expect(response.status).to eq(200)\n            result = response.parsed_body\n            topic = Topic.find(result['topic_id'])\n            expect(topic.category_id).to eq(shared_category.id)\n            expect(topic.shared_draft.category_id).to eq(destination_category.id)\n          end\n        end\n      end\n    end\n\n    describe 'warnings' do\n      fab!(:user_2) { Fabricate(:user) }\n\n      before do\n        Group.refresh_automatic_groups!\n      end\n\n      context 'as a staff user' do\n        before do\n          sign_in(admin)\n        end\n\n        it 'should be able to mark a topic as warning' do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: user_2.username,\n            is_warning: true\n          }\n\n          expect(response.status).to eq(200)\n\n          new_topic = Topic.last\n\n          expect(new_topic.title).to eq('This is some post')\n          expect(new_topic.is_official_warning?).to eq(true)\n        end\n\n        it 'should be able to mark a topic as not a warning' do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: user_2.username,\n            is_warning: false\n          }\n\n          expect(response.status).to eq(200)\n\n          new_topic = Topic.last\n\n          expect(new_topic.title).to eq('This is some post')\n          expect(new_topic.is_official_warning?).to eq(false)\n        end\n      end\n\n      context 'as a normal user' do\n        it 'should not be able to mark a topic as warning' do\n          sign_in(user)\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            archetype: 'private_message',\n            title: \"this is some post\",\n            target_recipients: user_2.username,\n            is_warning: true\n          }\n\n          expect(response.status).to eq(200)\n\n          new_topic = Topic.last\n\n          expect(new_topic.title).to eq('This is some post')\n          expect(new_topic.is_official_warning?).to eq(false)\n        end\n      end\n    end\n\n    context \"with topic bump\" do\n      shared_examples \"it works\" do\n        it \"should be able to skip topic bumping\" do\n          original_bumped_at = 1.day.ago\n          topic = Fabricate(:topic, bumped_at: original_bumped_at)\n\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            topic_id: topic.id,\n            no_bump: true\n          }\n\n          expect(response.status).to eq(200)\n          expect(topic.reload.bumped_at).to eq_time(original_bumped_at)\n        end\n\n        it \"should be able to post with topic bumping\" do\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            topic_id: topic.id\n          }\n\n          expect(response.status).to eq(200)\n          expect(topic.reload.bumped_at).to eq_time(topic.posts.last.created_at)\n        end\n      end\n\n      context \"with admins\" do\n        before do\n          sign_in(admin)\n        end\n\n        include_examples \"it works\"\n      end\n\n      context \"with moderators\" do\n        before do\n          sign_in(moderator)\n        end\n\n        include_examples \"it works\"\n      end\n\n      context \"with TL4 users\" do\n        fab!(:trust_level_4) { Fabricate(:trust_level_4) }\n\n        before do\n          sign_in(trust_level_4)\n        end\n\n        include_examples \"it works\"\n      end\n\n      context \"with users\" do\n        fab!(:topic) { Fabricate(:topic) }\n\n        [:user].each do |user|\n          it \"will raise an error for #{user}\" do\n            sign_in(Fabricate(user))\n            post \"/posts.json\", params: {\n              raw: 'this is the test content',\n              topic_id: topic.id,\n              no_bump: true\n            }\n            expect(response.status).to eq(400)\n          end\n        end\n      end\n    end\n\n    context \"with featured links\" do\n      it \"allows to create topics with featured links\" do\n        sign_in(user_trust_level_1)\n\n        post \"/posts.json\", params: {\n          title: \"this is the test title for the topic\",\n          raw: \"this is the test content\",\n          featured_link: \"https://discourse.org\"\n        }\n\n        expect(response.status).to eq(200)\n      end\n\n      it \"doesn't allow TL0 users to create topics with featured links\" do\n        sign_in(user_trust_level_0)\n\n        post \"/posts.json\", params: {\n          title: \"this is the test title for the topic\",\n          raw: \"this is the test content\",\n          featured_link: \"https://discourse.org\"\n        }\n\n        expect(response.status).to eq(422)\n      end\n\n      it \"doesn't allow to create topics with featured links if featured links are disabled in settings\" do\n        SiteSetting.topic_featured_link_enabled = false\n        sign_in(user_trust_level_1)\n\n        post \"/posts.json\", params: {\n          title: \"this is the test title for the topic\",\n          raw: \"this is the test content\",\n          featured_link: \"https://discourse.org\"\n        }\n\n        expect(response.status).to eq(422)\n      end\n\n      it \"doesn't allow to create topics with featured links in the category with forbidden feature links\" do\n        category = Fabricate(:category, topic_featured_link_allowed: false)\n        sign_in(user_trust_level_1)\n\n        post \"/posts.json\", params: {\n          title: \"this is the test title for the topic\",\n          raw: \"this is the test content\",\n          featured_link: \"https://discourse.org\",\n          category: category.id\n        }\n\n        expect(response.status).to eq(422)\n      end\n    end\n  end\n\n  describe '#revisions' do\n    fab!(:post) { Fabricate(:post, version: 2) }\n    let(:post_revision) { Fabricate(:post_revision, post: post) }\n\n    it \"throws an exception when revision is < 2\" do\n      get \"/posts/#{post.id}/revisions/1.json\"\n      expect(response.status).to eq(400)\n    end\n\n    context \"when edit history is not visible to the public\" do\n\n      before { SiteSetting.edit_history_visible_to_public = false }\n\n      it \"ensures anonymous cannot see the revisions\" do\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"ensures regular user cannot see the revisions\" do\n        sign_in(user)\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"ensures staff can see the revisions\" do\n        sign_in(admin)\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"ensures poster can see the revisions\" do\n        user = Fabricate(:active_user)\n        sign_in(user)\n\n        post = Fabricate(:post, user: user, version: 3)\n        pr = Fabricate(:post_revision, user: user, post: post)\n\n        get \"/posts/#{pr.post_id}/revisions/#{pr.number}.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"ensures trust level 4 cannot see the revisions\" do\n        sign_in(Fabricate(:user, trust_level: 4))\n        get \"/posts/#{post_revision.post_id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(403)\n      end\n    end\n\n    context \"when post is hidden\" do\n      before {\n        post.hidden = true\n        post.save\n      }\n\n      it \"throws an exception for users\" do\n        sign_in(user)\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(404)\n      end\n\n      it \"works for admins\" do\n        sign_in(admin)\n        get \"/posts/#{post.id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n\n    context \"when edit history is visible to everyone\" do\n\n      before { SiteSetting.edit_history_visible_to_public = true }\n\n      it \"ensures anyone can see the revisions\" do\n        get \"/posts/#{post_revision.post_id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n\n    context \"with deleted post\" do\n      fab!(:deleted_post) { Fabricate(:post, user: admin, version: 3) }\n      fab!(:deleted_post_revision) { Fabricate(:post_revision, user: admin, post: deleted_post) }\n\n      before { deleted_post.trash!(admin) }\n\n      it \"also work on deleted post\" do\n        sign_in(admin)\n        get \"/posts/#{deleted_post_revision.post_id}/revisions/#{deleted_post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n\n    context \"with deleted topic\" do\n      fab!(:deleted_topic) { Fabricate(:topic, user: admin) }\n      fab!(:post) { Fabricate(:post, user: admin, topic: deleted_topic, version: 3) }\n      fab!(:post_revision) { Fabricate(:post_revision, user: admin, post: post) }\n\n      before { deleted_topic.trash!(admin) }\n\n      it \"also work on deleted topic\" do\n        sign_in(admin)\n        get \"/posts/#{post_revision.post_id}/revisions/#{post_revision.number}.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n\n    context \"with a tagged topic\" do\n      let(:tag) { Fabricate(:tag) }\n      it \"works\" do\n        SiteSetting.tagging_enabled = true\n\n        post_revision.post.topic.update(tags: [tag])\n\n        get \"/posts/#{post_revision.post_id}/revisions/latest.json\"\n        expect(response.status).to eq(200)\n\n        SiteSetting.tagging_enabled = false\n\n        get \"/posts/#{post_revision.post_id}/revisions/latest.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n  end\n\n  describe '#revert' do\n    include_examples 'action requires login', :put, \"/posts/123/revisions/2/revert.json\"\n\n    fab!(:post) { Fabricate(:post, user: Fabricate(:user), raw: \"Lorem ipsum dolor sit amet, cu nam libris tractatos, ancillae senserit ius ex\") }\n    let(:post_revision) { Fabricate(:post_revision, post: post, modifications: { \"raw\" => [\"this is original post body.\", \"this is edited post body.\"] }) }\n    let(:blank_post_revision) { Fabricate(:post_revision, post: post, modifications: { \"edit_reason\" => [\"edit reason #1\", \"edit reason #2\"] }) }\n    let(:same_post_revision) { Fabricate(:post_revision, post: post, modifications: { \"raw\" => [\"Lorem ipsum dolor sit amet, cu nam libris tractatos, ancillae senserit ius ex\", \"this is edited post body.\"] }) }\n\n    let(:post_id) { post.id }\n    let(:revision_id) { post_revision.number }\n\n    describe 'when logged in as a regular user' do\n      it \"does not work\" do\n        sign_in(user)\n        put \"/posts/#{post_id}/revisions/#{revision_id}/revert.json\"\n        expect(response).to_not be_successful\n      end\n    end\n\n    describe \"when logged in as staff\" do\n      before do\n        sign_in(moderator)\n      end\n\n      it \"fails when revision is < 2\" do\n        put \"/posts/#{post_id}/revisions/1/revert.json\"\n        expect(response.status).to eq(400)\n      end\n\n      it \"fails when post_revision record is not found\" do\n        put \"/posts/#{post_id}/revisions/#{revision_id + 1}/revert.json\"\n        expect(response).to_not be_successful\n      end\n\n      it \"fails when post record is not found\" do\n        put \"/posts/#{post_id + 1}/revisions/#{revision_id}/revert.json\"\n        expect(response).to_not be_successful\n      end\n\n      it \"fails when revision is blank\" do\n        put \"/posts/#{post_id}/revisions/#{blank_post_revision.number}/revert.json\"\n        expect(response.status).to eq(422)\n        expect(response.parsed_body['errors']).to include(I18n.t('revert_version_same'))\n      end\n\n      it \"fails when revised version is same as current version\" do\n        put \"/posts/#{post_id}/revisions/#{same_post_revision.number}/revert.json\"\n        expect(response.status).to eq(422)\n        expect(response.parsed_body['errors']).to include(I18n.t('revert_version_same'))\n      end\n\n      it \"works!\" do\n        put \"/posts/#{post_id}/revisions/#{revision_id}/revert.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"supports reverting posts in deleted topics\" do\n        first_post = post.topic.ordered_posts.first\n        PostDestroyer.new(moderator, first_post).destroy\n\n        put \"/posts/#{post_id}/revisions/#{revision_id}/revert.json\"\n        expect(response.status).to eq(200)\n      end\n    end\n  end\n\n  describe '#expand_embed' do\n    before do\n      sign_in(user)\n    end\n\n    fab!(:post) { Fabricate(:post) }\n\n    it \"raises an error when you can't see the post\" do\n      post = Fabricate(:private_message_post)\n      get \"/posts/#{post.id}/expand-embed.json\"\n      expect(response).not_to be_successful\n    end\n\n    it \"retrieves the body when you can see the post\" do\n      TopicEmbed.expects(:expanded_for).with(post).returns(\"full content\")\n      get \"/posts/#{post.id}/expand-embed.json\"\n      expect(response.status).to eq(200)\n      expect(response.parsed_body['cooked']).to eq(\"full content\")\n    end\n  end\n\n  describe '#flagged_posts' do\n    include_examples \"action requires login\", :get, \"/posts/system/flagged.json\"\n\n    describe \"when logged in\" do\n      it \"raises an error if the user doesn't have permission to see the flagged posts\" do\n        sign_in(user)\n        get \"/posts/system/flagged.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"can see the flagged posts when authorized\" do\n        sign_in(moderator)\n        get \"/posts/system/flagged.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"only shows agreed and deferred flags\" do\n        post_agreed = create_post(user: user)\n        post_deferred = create_post(user: user)\n        post_disagreed = create_post(user: user)\n\n        r0 = PostActionCreator.spam(moderator, post_agreed).reviewable\n        r1 = PostActionCreator.off_topic(moderator, post_deferred).reviewable\n        r2 = PostActionCreator.inappropriate(moderator, post_disagreed).reviewable\n\n        r0.perform(admin, :agree_and_keep)\n        r1.perform(admin, :ignore)\n        r2.perform(admin, :disagree)\n\n        sign_in(Fabricate(:moderator))\n        get \"/posts/#{user.username}/flagged.json\"\n        expect(response.status).to eq(200)\n\n        expect(response.parsed_body.length).to eq(2)\n      end\n    end\n  end\n\n  describe '#deleted_posts' do\n    include_examples \"action requires login\", :get, \"/posts/system/deleted.json\"\n\n    describe \"when logged in\" do\n      before do\n        Group.refresh_automatic_groups!\n      end\n\n      it \"raises an error if the user doesn't have permission to see the deleted posts\" do\n        sign_in(user)\n        get \"/posts/system/deleted.json\"\n        expect(response).to be_forbidden\n      end\n\n      it \"can see the deleted posts when authorized\" do\n        sign_in(moderator)\n        get \"/posts/system/deleted.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"does not raise if topic has been permanently deleted\" do\n        post = Fabricate(:post, user: admin)\n        PostDestroyer.new(admin, post).destroy\n        post.update!(topic_id: -1000)\n\n        sign_in(admin)\n        get \"/posts/#{admin.username}/deleted.json\"\n        expect(response.status).to eq(200)\n      end\n\n      it \"doesn't return secured categories for moderators if they don't have access\" do\n        Fabricate(:moderator)\n\n        group = Fabricate(:group)\n        group.add_owner(user)\n\n        secured_category = Fabricate(:private_category, group: group)\n        secured_post = create_post(user: user, category: secured_category)\n        PostDestroyer.new(admin, secured_post).destroy\n\n        sign_in(moderator)\n        get \"/posts/#{user.username}/deleted.json\"\n        expect(response.status).to eq(200)\n\n        data = response.parsed_body\n        expect(data.length).to eq(0)\n      end\n\n      it \"doesn't return PMs for moderators\" do\n        Fabricate(:moderator)\n\n        pm_post = create_post(user: user, archetype: 'private_message', target_usernames: [admin.username])\n        PostDestroyer.new(admin, pm_post).destroy\n\n        sign_in(moderator)\n        get \"/posts/#{user.username}/deleted.json\"\n        expect(response.status).to eq(200)\n\n        data = response.parsed_body\n        expect(data.length).to eq(0)\n      end\n\n      it \"only shows posts deleted by other users\" do\n        create_post(user: user)\n        post_deleted_by_user = create_post(user: user)\n        post_deleted_by_admin = create_post(user: user)\n\n        PostDestroyer.new(user, post_deleted_by_user).destroy\n        PostDestroyer.new(admin, post_deleted_by_admin).destroy\n\n        sign_in(admin)\n        get \"/posts/#{user.username}/deleted.json\"\n        expect(response.status).to eq(200)\n\n        data = response.parsed_body\n        expect(data.length).to eq(1)\n        expect(data[0][\"id\"]).to eq(post_deleted_by_admin.id)\n        expect(data[0][\"deleted_by\"][\"id\"]).to eq(admin.id)\n      end\n    end\n  end\n\n  describe '#markdown_id' do\n    it \"can be viewed by anonymous\" do\n      post = Fabricate(:post, raw: \"123456789\")\n      get \"/posts/#{post.id}/raw.json\"\n      expect(response.status).to eq(200)\n      expect(response.body).to eq(\"123456789\")\n    end\n\n    it \"renders a 404 page\" do\n      get \"/posts/0/raw\"\n      expect(response.status).to eq(404)\n      expect(response.body).to include(I18n.t(\"page_not_found.title\"))\n    end\n  end\n\n  describe '#markdown_num' do\n    it \"can be viewed by anonymous\" do\n      topic = Fabricate(:topic)\n      post = Fabricate(:post, topic: topic, post_number: 1, raw: \"123456789\")\n      post.save\n      get \"/raw/#{topic.id}/1.json\"\n      expect(response.status).to eq(200)\n      expect(response.body).to eq(\"123456789\")\n    end\n\n    it \"can show whole topics\" do\n      topic = Fabricate(:topic)\n      post = Fabricate(:post, topic: topic, post_number: 1, raw: \"123456789\")\n      post_2 = Fabricate(:post, topic: topic, post_number: 2, raw: \"abcdefghij\")\n      post.save\n      get \"/raw/#{topic.id}\"\n      expect(response.status).to eq(200)\n      expect(response.body).to include(\"123456789\", \"abcdefghij\")\n    end\n  end\n\n  describe '#short_link' do\n    fab!(:topic) { Fabricate(:topic) }\n    fab!(:post) { Fabricate(:post, topic: topic) }\n\n    it \"redirects to the topic\" do\n      get \"/p/#{post.id}.json\"\n      expect(response).to be_redirect\n    end\n\n    it \"returns a 403 when access is denied for JSON format\" do\n      post = Fabricate(:private_message_post)\n      get \"/p/#{post.id}.json\"\n      expect(response).to be_forbidden\n    end\n\n    it \"returns a 403 when access is denied for HTML format\" do\n      post = Fabricate(:private_message_post)\n      get \"/p/#{post.id}\"\n      expect(response).to be_forbidden\n      expect(response.body).to have_tag(\"body.no-ember\")\n    end\n\n    it \"renders a 404 page\" do\n      get \"/p/0\"\n      expect(response.status).to eq(404)\n      expect(response.body).to include(I18n.t(\"page_not_found.title\"))\n    end\n  end\n\n  describe '#user_posts_feed' do\n    it 'returns public posts rss feed' do\n      public_post\n      private_post\n\n      get \"/u/#{user.username}/activity.rss\"\n\n      expect(response.status).to eq(200)\n\n      body = response.body\n\n      expect(body).to_not include(private_post.url)\n      expect(body).to include(public_post.url)\n    end\n\n    it \"doesn't include posts from hidden topics\" do\n      public_post.topic.update!(visible: false)\n\n      get \"/u/#{user.username}/activity.rss\"\n\n      expect(response.status).to eq(200)\n\n      body = response.body\n      expect(body).not_to include(public_post.url)\n    end\n\n    it \"excludes small actions\" do\n      small_action = Fabricate(:small_action, user: user)\n\n      get \"/u/#{user.username}/activity.rss\"\n\n      expect(response.status).to eq(200)\n\n      body = response.body\n\n      expect(body).not_to include(small_action.canonical_url)\n    end\n\n    it 'returns public posts as JSON' do\n      public_post\n      private_post\n\n      get \"/u/#{user.username}/activity.json\"\n\n      expect(response.status).to eq(200)\n\n      body = response.body\n\n      expect(body).to_not include(private_post.topic.slug)\n      expect(body).to include(public_post.topic.slug)\n    end\n\n    it \"returns 404 if `hide_profile_and_presence` user option is checked\" do\n      user.user_option.update_columns(hide_profile_and_presence: true)\n\n      get \"/u/#{user.username}/activity.rss\"\n      expect(response.status).to eq(404)\n\n      get \"/u/#{user.username}/activity.json\"\n      expect(response.status).to eq(404)\n    end\n\n    it \"succeeds when `allow_users_to_hide_profile` is false\" do\n      user.user_option.update_columns(hide_profile_and_presence: true)\n      SiteSetting.allow_users_to_hide_profile = false\n\n      get \"/u/#{user.username}/activity.rss\"\n      expect(response.status).to eq(200)\n\n      get \"/u/#{user.username}/activity.json\"\n      expect(response.status).to eq(200)\n    end\n  end\n\n  describe '#latest' do\n    context 'with private posts' do\n      describe 'when not logged in' do\n        it 'should return the right response' do\n          Fabricate(:post)\n\n          get \"/private-posts.rss\"\n\n          expect(response.status).to eq(404)\n\n          expect(response.body).to have_tag(\n            \"input\", with: { value: \"private_posts\" }\n          )\n        end\n      end\n\n      it 'returns private posts rss feed' do\n        sign_in(admin)\n\n        public_post\n        private_post\n        get \"/private-posts.rss\"\n\n        expect(response.status).to eq(200)\n\n        body = response.body\n\n        expect(body).to include(private_post.url)\n        expect(body).to_not include(public_post.url)\n      end\n\n      it 'returns private posts for json' do\n        sign_in(admin)\n\n        public_post\n        private_post\n        get \"/private-posts.json\"\n        expect(response.status).to eq(200)\n\n        json = response.parsed_body\n        post_ids = json['private_posts'].map { |p| p['id'] }\n\n        expect(post_ids).to include private_post.id\n        expect(post_ids).to_not include public_post.id\n      end\n    end\n\n    context 'with public posts' do\n      it 'returns public posts with topic rss feed' do\n        public_post\n        private_post\n\n        get \"/posts.rss\"\n\n        expect(response.status).to eq(200)\n\n        body = response.body\n\n        # we cache in redis, in rare cases this can cause a flaky test\n        PostsHelper.clear_canonical_cache!(public_post)\n\n        expect(body).to include(public_post.canonical_url)\n        expect(body).to_not include(private_post.url)\n      end\n\n      it \"doesn't include posts from hidden topics\" do\n        public_post.topic.update!(visible: false)\n\n        get \"/posts.rss\"\n\n        expect(response.status).to eq(200)\n\n        body = response.body\n\n        # we cache in redis, in rare cases this can cause a flaky test\n        PostsHelper.clear_canonical_cache!(public_post)\n\n        expect(body).not_to include(public_post.canonical_url)\n      end\n\n      it \"excludes small actions\" do\n        small_action = Fabricate(:small_action)\n\n        get \"/posts.rss\"\n\n        expect(response.status).to eq(200)\n\n        body = response.body\n\n        expect(body).not_to include(small_action.canonical_url)\n      end\n\n      it 'returns public posts with topic for json' do\n        topicless_post.update topic_id: -100\n\n        public_post\n        private_post\n        topicless_post\n\n        get \"/posts.json\"\n        expect(response.status).to eq(200)\n\n        json = response.parsed_body\n        post_ids = json['latest_posts'].map { |p| p['id'] }\n\n        expect(post_ids).to include public_post.id\n        expect(post_ids).to_not include private_post.id\n        expect(post_ids).to_not include topicless_post.id\n      end\n    end\n  end\n\n  describe '#cooked' do\n    it 'returns the cooked content' do\n      post = Fabricate(:post, cooked: \"WAt\")\n      get \"/posts/#{post.id}/cooked.json\"\n\n      expect(response.status).to eq(200)\n      json = response.parsed_body\n\n      expect(json).to be_present\n      expect(json['cooked']).to eq('WAt')\n    end\n  end\n\n  describe '#raw_email' do\n    include_examples \"action requires login\", :get, \"/posts/2/raw-email.json\"\n\n    describe \"when logged in\" do\n      let(:post) { Fabricate(:post, deleted_at: 2.hours.ago, user: Fabricate(:user), raw_email: 'email_content') }\n\n      it 'returns 403 when trying to view raw as user that created the post' do\n        sign_in(post.user)\n\n        get \"/posts/#{post.id}/raw-email.json\"\n        expect(response.status).to eq(403)\n      end\n\n      it \"returns 403 when trying to view raw email as a normal user\" do\n        sign_in(user)\n\n        get \"/posts/#{post.id}/raw-email.json\"\n        expect(response.status).to eq(403)\n      end\n\n      it \"can view raw email\" do\n        sign_in(moderator)\n\n        get \"/posts/#{post.id}/raw-email.json\"\n        expect(response.status).to eq(200)\n\n        json = response.parsed_body\n        expect(json['raw_email']).to eq('email_content')\n      end\n    end\n  end\n\n  describe \"#locked\" do\n    before do\n      sign_in(moderator)\n    end\n\n    it 'can lock and unlock the post' do\n      put \"/posts/#{public_post.id}/locked.json\", params: { locked: \"true\" }\n      expect(response.status).to eq(200)\n      public_post.reload\n      expect(public_post).to be_locked\n\n      put \"/posts/#{public_post.id}/locked.json\", params: { locked: \"false\" }\n      expect(response.status).to eq(200)\n      public_post.reload\n      expect(public_post).not_to be_locked\n    end\n  end\n\n  describe \"#notice\" do\n    it 'can create and remove notices as a moderator' do\n      sign_in(moderator)\n\n      raw_notice = \"Hello *world*!\\n\\nhttps://github.com/discourse/discourse\"\n      put \"/posts/#{public_post.id}/notice.json\", params: { notice: raw_notice }\n\n      expect(response.status).to eq(200)\n      expect(public_post.reload.custom_fields[Post::NOTICE]).to eq(\"type\" => Post.notices[:custom], \"raw\" => raw_notice, \"cooked\" => PrettyText.cook(raw_notice, features: { onebox: false }))\n      expect(UserHistory.where(action: UserHistory.actions[:post_staff_note_create]).count).to eq(1)\n\n      put \"/posts/#{public_post.id}/notice.json\", params: { notice: nil }\n\n      expect(response.status).to eq(200)\n      expect(public_post.reload.custom_fields[Post::NOTICE]).to eq(nil)\n      expect(UserHistory.where(action: UserHistory.actions[:post_staff_note_destroy]).count).to eq(1)\n    end\n\n    describe 'group moderators' do\n      fab!(:group_user) { Fabricate(:group_user) }\n      let(:user) { group_user.user }\n      let(:group) { group_user.group }\n\n      before do\n        SiteSetting.enable_category_group_moderation = true\n        topic.category.update!(reviewable_by_group_id: group.id)\n\n        sign_in(user)\n      end\n\n      it 'can create and remove notices as a group moderator' do\n        raw_notice = \"Hello *world*!\\n\\nhttps://github.com/discourse/discourse\"\n        put \"/posts/#{public_post.id}/notice.json\", params: { notice: raw_notice }\n\n        expect(response.status).to eq(200)\n        expect(public_post.reload.custom_fields[Post::NOTICE]).to eq(\"type\" => Post.notices[:custom], \"raw\" => raw_notice, \"cooked\" => PrettyText.cook(raw_notice, features: { onebox: false }))\n\n        put \"/posts/#{public_post.id}/notice.json\", params: { notice: nil }\n\n        expect(response.status).to eq(200)\n        expect(public_post.reload.custom_fields[Post::NOTICE]).to eq(nil)\n      end\n\n      it 'prevents a group moderator from altering notes outside of their category' do\n        moderatable_group = Fabricate(:group)\n        topic.category.update!(reviewable_by_group_id: moderatable_group.id)\n\n        put \"/posts/#{public_post.id}/notice.json\", params: { notice: \"Hello\" }\n\n        expect(response.status).to eq(404)\n      end\n\n      it 'prevents a normal user from altering notes' do\n        group_user.destroy!\n        put \"/posts/#{public_post.id}/notice.json\", params: { notice: \"Hello\" }\n\n        expect(response.status).to eq(404)\n      end\n    end\n  end\n\n  describe \"#pending\" do\n    subject(:request) { get \"/posts/#{user.username}/pending.json\" }\n\n    context \"when user is not logged in\" do\n      it_behaves_like \"action requires login\", :get, \"/posts/system/pending.json\"\n    end\n\n    context \"when user is logged in\" do\n      let(:pending_posts) { response.parsed_body[\"pending_posts\"] }\n\n      before { sign_in(current_user) }\n\n      context \"when current user is the same as user\" do\n        let(:current_user) { user }\n\n        context \"when there are existing pending posts\" do\n          let!(:owner_pending_posts) { Fabricate.times(2, :reviewable_queued_post, created_by: user) }\n          let!(:other_pending_post) { Fabricate(:reviewable_queued_post) }\n          let(:expected_keys) do\n            %w[\n          avatar_template\n          category_id\n          created_at\n          created_by_id\n          name\n          raw_text\n          title\n          topic_id\n          topic_url\n          username\n            ]\n          end\n\n          it \"returns user's pending posts\" do\n            request\n            expect(pending_posts).to all include \"id\" => be_in(owner_pending_posts.map(&:id))\n            expect(pending_posts).to all include(*expected_keys)\n          end\n        end\n\n        context \"when there aren't any pending posts\" do\n          it \"returns an empty array\" do\n            request\n            expect(pending_posts).to be_empty\n          end\n        end\n      end\n\n      context \"when current user is a staff member\" do\n        let(:current_user) { moderator }\n\n        context \"when there are existing pending posts\" do\n          let!(:owner_pending_posts) { Fabricate.times(2, :reviewable_queued_post, created_by: user) }\n          let!(:other_pending_post) { Fabricate(:reviewable_queued_post) }\n          let(:expected_keys) do\n            %w[\n          avatar_template\n          category_id\n          created_at\n          created_by_id\n          name\n          raw_text\n          title\n          topic_id\n          topic_url\n          username\n            ]\n          end\n\n          it \"returns user's pending posts\" do\n            request\n            expect(pending_posts).to all include \"id\" => be_in(owner_pending_posts.map(&:id))\n            expect(pending_posts).to all include(*expected_keys)\n          end\n        end\n\n        context \"when there aren't any pending posts\" do\n          it \"returns an empty array\" do\n            request\n            expect(pending_posts).to be_empty\n          end\n        end\n      end\n\n      context \"when current user is another user\" do\n        let(:current_user) { Fabricate(:user) }\n\n        it \"does not allow access\" do\n          request\n          expect(response).to have_http_status :not_found\n        end\n      end\n    end\n  end\n\n  describe Plugin::Instance do\n    describe '#add_permitted_post_create_param' do\n      fab!(:user) { Fabricate(:user) }\n      let(:instance) { Plugin::Instance.new }\n      let(:request) do\n        Proc.new {\n          post \"/posts.json\", params: {\n            raw: 'this is the test content',\n            title: 'this is the test title for the topic',\n            composer_open_duration_msecs: 204,\n            typing_duration_msecs: 100,\n            reply_to_post_number: 123,\n            string_arg: '123',\n            hash_arg: { key1: 'val' },\n            array_arg: ['1', '2', '3']\n          }\n        }\n      end\n\n      before do\n        sign_in(user)\n        SiteSetting.min_first_post_typing_time = 0\n      end\n\n      it 'allows strings to be added' do\n        request.call\n        expect(@controller.send(:create_params)).not_to include(string_arg: '123')\n\n        instance.add_permitted_post_create_param(:string_arg)\n        request.call\n        expect(@controller.send(:create_params)).to include(string_arg: '123')\n      end\n\n      it 'allows hashes to be added' do\n        instance.add_permitted_post_create_param(:hash_arg)\n        request.call\n        expect(@controller.send(:create_params)).not_to include(hash_arg: { key1: 'val' })\n\n        instance.add_permitted_post_create_param(:hash_arg, :hash)\n        request.call\n        expect(@controller.send(:create_params)).to include(hash_arg: { key1: 'val' })\n      end\n\n      it 'allows strings to be added' do\n        instance.add_permitted_post_create_param(:array_arg)\n        request.call\n        expect(@controller.send(:create_params)).not_to include(array_arg: ['1', '2', '3'])\n\n        instance.add_permitted_post_create_param(:array_arg, :array)\n        request.call\n        expect(@controller.send(:create_params)).to include(array_arg: ['1', '2', '3'])\n      end\n\n    end\n  end\nend\n"], "filenames": ["config/locales/server.en.yml", "lib/guardian/topic_guardian.rb", "lib/topic_creator.rb", "spec/lib/guardian/topic_guardian_spec.rb", "spec/lib/topic_creator_spec.rb", "spec/requests/posts_controller_spec.rb"], "buggy_code_start_loc": [591, 182, 26, 134, 520, 925], "buggy_code_end_loc": [591, 182, 306, 134, 520, 1409], "fixing_code_start_loc": [592, 183, 27, 135, 521, 926], "fixing_code_end_loc": [593, 185, 320, 151, 543, 1481], "type": "CWE-770", "message": "Discourse is an open-source discussion platform. In version 2.8.13 and prior on the `stable` branch and version 2.9.0.beta14 and prior on the `beta` and `tests-passed` branches, any authenticated user can create an unlisted topic. These topics, which are not readily available to other users, can take up unnecessary site resources. A patch for this issue is available in the `main` branch of Discourse. There are no known workarounds available.", "other": {"cve": {"id": "CVE-2022-46159", "sourceIdentifier": "security-advisories@github.com", "published": "2022-12-02T15:15:10.090", "lastModified": "2022-12-05T18:57:49.543", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Discourse is an open-source discussion platform. In version 2.8.13 and prior on the `stable` branch and version 2.9.0.beta14 and prior on the `beta` and `tests-passed` branches, any authenticated user can create an unlisted topic. These topics, which are not readily available to other users, can take up unnecessary site resources. A patch for this issue is available in the `main` branch of Discourse. There are no known workarounds available."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-770"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:*:*:*:*:*:*:*:*", "versionEndIncluding": "2.8.13", "matchCriteriaId": "F0A7BB8C-9904-42B5-8D91-0275CCA5D74F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta1:*:*:*:*:*:*", "matchCriteriaId": "B3803EF9-A296-42B7-887F-93C5E68E94C4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta10:*:*:*:*:*:*", "matchCriteriaId": "35BAC488-3622-4B0B-B8EA-879E8C68E8CF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta11:*:*:*:*:*:*", "matchCriteriaId": "406A23B4-B971-4DC8-A132-EE9854FE8546"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta12:*:*:*:*:*:*", "matchCriteriaId": "1DD3C47F-E49F-4E19-9EA7-A322C4CFD541"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta13:*:*:*:*:*:*", "matchCriteriaId": "E924AC08-6978-4DFF-B616-9E3E9D6FBE1B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta14:*:*:*:*:*:*", "matchCriteriaId": "B5A3C7FB-B3B6-45F0-AD7D-062A50490AD7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta2:*:*:*:*:*:*", "matchCriteriaId": "8BA3D313-3C11-43E2-A47D-CBB532D1B6F8"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "6F42673E-65F3-4807-9484-20CB747420FB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta4:*:*:*:*:*:*", "matchCriteriaId": "0B91D023-FCE5-4866-AD8B-BBB675763104"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta5:*:*:*:*:*:*", "matchCriteriaId": "0086484D-0164-449C-8AAE-BE7479CB9706"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta6:*:*:*:*:*:*", "matchCriteriaId": "F9D1B031-96C7-44C0-A0A0-F67ABE55C93C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta7:*:*:*:*:*:*", "matchCriteriaId": "750D2AD9-35E7-4AC7-9C22-AA90DAA34F3F"}, {"vulnerable": true, "criteria": "cpe:2.3:a:discourse:discourse:2.9.0:beta8:*:*:*:*:*:*", "matchCriteriaId": "B68E308A-BDAB-4614-A563-4460F7996CBE"}]}]}], "references": [{"url": "https://github.com/discourse/discourse/commit/0ce38bd7bce862db251b882613ab7053ca777382", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/discourse/discourse/security/advisories/GHSA-qf99-xpx6-hgxp", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/discourse/discourse/commit/0ce38bd7bce862db251b882613ab7053ca777382"}}