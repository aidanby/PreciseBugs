{"buggy_code": ["<?php\n/*\n* LimeSurvey\n* Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*\n* Template Options controller\n*/\n\nif (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n\nclass themeoptions  extends Survey_Common_Action\n{\n\n    /**\n     * @param string $controller\n     */\n    public function __construct($controller = null, $id = null)\n    {\n        parent::__construct($controller, $id);\n    }\n\n    /**\n     * Displays a particular model.\n     * @param integer $id the ID of the model to be displayed\n     */\n    public function view($id)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'read')) {\n            $this->_renderWrappedTemplate('themeoptions', 'read', array(\n                'model'=>$this->loadModel($id),\n            ));\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(App()->createUrl(\"/admin\"));\n        }\n\n    }\n\n    /**\n     * Creates a new model.\n     * If creation is successful, the browser will be redirected to the 'view' page.\n     */\n    public function create()\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            $model = new TemplateOptions;\n\n            if (isset($_POST['TemplateOptions'])) {\n                $model->attributes = $_POST['TemplateOptions'];\n                if ($model->save()) {\n                    $this->getController()->redirect(array('admin/themeoptions/sa/update/id/'.$model->id));\n                }\n            }\n\n            $this->render('create', array(\n                'model'=>$model,\n            ));\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(array(\"admin/themeoptions\"));\n        }\n    }\n\n\n    /**\n     * Updates a particular model.\n     * If update is successful, the browser will be redirected to the 'view' page.\n     * @param integer $id the ID of the model to be updated\n     */\n    public function update($id)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            $model = $this->loadModel($id);\n\n            if (isset($_POST['TemplateConfiguration'])) {\n                $model->attributes = $_POST['TemplateConfiguration'];\n                if ($model->save()) {\n                    Yii::app()->user->setFlash('success', gT('Theme options saved.'));\n                    $this->getController()->redirect(array('admin/themeoptions/sa/update/id/'.$model->id));\n                }\n            }\n\n            $this->_updateCommon($model);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/themeoptions\"));\n        }\n    }\n\n    /**\n     * Updates a particular model.\n     * If update is successful, the browser will be redirected to the 'view' page.\n     * @param integer $sid the ID of the model to be updated\n     */\n    public function updatesurvey($sid)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            $model = TemplateConfiguration::getInstance(null, null, $sid);\n\n            if (isset($_POST['TemplateConfiguration'])) {\n                $model->attributes = $_POST['TemplateConfiguration'];\n                if ($model->save()) {\n                    Yii::app()->user->setFlash('success', gT('Theme options saved.'));\n                    $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/themeoptions/sa/updatesurvey\", ['surveyid'=>$sid, 'sid'=>$sid]));\n                }\n            }\n\n            $this->_updateCommon($model, $sid);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/themeoptions/sa/updatesurvey\", ['surveyid'=>$sid, 'sid'=>$sid]));\n        }\n    }\n\n    /**\n     * Updates a particular model.\n     * If update is successful, the browser will be redirected to the 'view' page.\n     * @param integer $id the ID of the model to be updated\n     */\n    public function updatesurveygroup($id = null, $gsid, $l = null)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n\n            $sTemplateName = $id !== null ? TemplateConfiguration::model()->findByPk($id)->template_name : null;\n            $model = TemplateConfiguration::getInstance($sTemplateName, $gsid);\n\n            if ($model->bJustCreated === true && $l === null) {\n                $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/themeoptions/sa/updatesurveygroup/\", ['id'=>$id, 'gsid'=>$gsid, 'l'=>1]));\n            }\n\n            if (isset($_POST['TemplateConfiguration'])) {\n                $model = TemplateConfiguration::getInstance($_POST['TemplateConfiguration']['template_name'], $gsid);\n                $model->attributes = $_POST['TemplateConfiguration'];\n                if ($model->save()) {\n                    Yii::app()->user->setFlash('success', gT('Theme options saved.'));\n                    $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/surveysgroups/sa/update/\", ['id'=>$gsid]));\n                }\n            }\n\n            $this->_updateCommon($model);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/surveysgroups/sa/update/\", ['id'=>$gsid]));\n        }\n    }\n\n    public function setAdminTheme($sAdminThemeName)\n    {\n        if (!Permission::model()->hasGlobalPermission('settings', 'update')) {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(array('/admin'));\n        }\n\n        $sAdmintheme = sanitize_paranoid_string($sAdminThemeName);\n        setGlobalSetting('admintheme', $sAdmintheme);\n        $this->getController()->redirect(Yii::app()->getController()->createUrl(\"admin/themeoptions#adminthemes\"));\n    }\n\n    /**\n     * Lists all models.\n     */\n    public function index()\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'read')) {\n            $aData = array();\n            $aData['oSurveyTheme'] = new TemplateConfiguration();\n            $aData['oAdminTheme']  = new AdminTheme();\n\n            $this->_renderWrappedTemplate('themeoptions', 'index', $aData);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(App()->createUrl(\"/admin\"));\n        }\n    }\n\n    /**\n     * Manages all models.\n     */\n    public function admin()\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'read')) {\n            $model = new TemplateOptions('search');\n            $model->unsetAttributes(); // clear any default values\n            if (isset($_GET['TemplateOptions'])) {\n                $model->attributes = $_GET['TemplateOptions'];\n            }\n\n            $this->render('admin', array(\n                'model'=>$model,\n            ));\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(App()->createUrl(\"/admin\"));\n        }\n    }\n\n    /**\n     * Returns the data model based on the primary key given in the GET variable.\n     * If the data model is not found, an HTTP exception will be raised.\n     * @param integer $id the ID of the model to be loaded\n     * @return TemplateConfiguration the loaded model\n     * @throws CHttpException\n     */\n    public function loadModel($id)\n    {\n        $model = TemplateConfiguration::model()->findByPk($id);\n        if ($model === null) {\n            throw new CHttpException(404, 'The requested page does not exist.');\n        }\n\n        return $model;\n    }\n\n\n    public function importManifest($templatename)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            TemplateManifest::importManifest($templatename);\n            $this->getController()->redirect(array(\"admin/themeoptions\"));\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(array(\"admin/themeoptions\"));\n        }\n\n    }\n\n    public function uninstall($templatename)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            if (!Template::hasInheritance($templatename)) {\n                TemplateConfiguration::uninstall($templatename);\n            } else {\n                Yii::app()->setFlashMessage(sprintf(gT(\"You can't uninstall template '%s' because some templates inherit from it.\"), $templatename), 'error');\n            }\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n        }\n\n        $this->getController()->redirect(array(\"admin/themeoptions\"));\n    }\n\n    /**\n     * Performs the AJAX validation.\n     * @param TemplateOptions $model the model to be validated\n     */\n    protected function performAjaxValidation($model)\n    {\n        if (isset($_POST['ajax']) && $_POST['ajax'] === 'template-options-form') {\n            echo CActiveForm::validate($model);\n            Yii::app()->end();\n        }\n    }\n\n    public function getPreviewTag()\n    {\n        $templatename = Yii::app()->request->getPost('templatename');        \n        $oTemplate = TemplateConfiguration::getInstanceFromTemplateName($templatename);\n        $previewTag = $oTemplate->getPreview();\n        return Yii::app()->getController()->renderPartial(\n            '/admin/super/_renderJson',\n            ['data' => ['image' =>  $previewTag]], \n            false,\n            false\n        );\n    }\n\n    /**\n     * Renders the template options form.\n     *\n     * @param TemplateConfiguration $model\n     * @param int $sid\n     * @return void\n     */\n    private function _updateCommon(TemplateConfiguration $model, $sid = null)\n    {\n        $oModelWithInheritReplacement = TemplateConfiguration::model()->findByPk($model->id);\n        $templateOptionPage           = $oModelWithInheritReplacement->optionPage;\n\n        Yii::app()->clientScript->registerPackage('bootstrap-switch', LSYii_ClientScript::POS_BEGIN);\n        $aData = array(\n            'model'=>$model,\n            'templateOptionPage' => $templateOptionPage\n        );\n\n        if ($sid !== null) {\n            $aData['surveybar']['savebutton']['form'] = true;\n            $aData['surveyid'] = $sid;\n            $aData['title_bar']['title'] = gT(\"Survey template options\");\n            $aData['subaction'] = gT(\"Survey template options\");\n        }\n\n        $this->_renderWrappedTemplate('themeoptions', 'update', $aData);\n    }\n}\n", "<?php\nif (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n/*\n* LimeSurvey\n* Copyright (C) 2007-2015 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*/\n\n/*\n * This is the model class for table \"{{template_configuration}}\".\n *\n * NOTE: if you only need to access to the table, you don't need to call prepareTemplateRendering\n *\n * The followings are the available columns in table '{{template_configuration}}':\n * @property integer $id Primary key\n * @property string $template_name\n * @property integer $sid Survey ID\n * @property integer $gsid\n * @property integer $uid user ID\n * @property string $files_css\n * @property string $files_js\n * @property string $files_print_css\n * @property string $options\n * @property string $cssframework_name\n * @property string $cssframework_css\n * @property string $cssframework_js\n * @property string $packages_to_load\n * @property string $packages_ltr\n * @property string $packages_rtl\n * @property string $packages_rtl\n *\n * @package       LimeSurvey\n * @subpackage    Backend\n */\nclass TemplateConfiguration extends TemplateConfig\n{\n\n    /**\n     * @var TemplateConfiguration $oParentTemplate The parent template name\n     * A template configuration, in the database, can inherit from another one.\n     * This used to manage the different configuration levels for a very same template: global, survey group, survey\n     * This is not related to motherTemplate (inheritance between two different templates)\n     */\n    public $oParentTemplate;\n\n    /**@var boolean Should the magic getters automatically retreives the parent value when field is set to inherit. Only turn to on for template rendering  */\n    public $bUseMagicInherit = false;\n\n    /**@var boolean Indicate if this entry in DB get created on the fly. If yes, because of Cache, it can need a page redirect  */\n    public $bJustCreated = false;\n\n    // Caches\n\n    /** @var string $sPreviewImgTag the template preview image tag for the template list*/\n    public $sPreviewImgTag;\n\n    /** @var array $aInstancesFromTemplateName cache for method getInstanceFromTemplateName*/\n    public static $aInstancesFromTemplateName;\n\n    /** @var array $aInstancesFromTemplateName cache for method prepareTemplateRendering*/\n    public static $aPreparedToRender;\n\n    /** @var boolean $bTemplateCheckResult is the template valid?*/\n    private $bTemplateCheckResult;\n\n    /** @var string $sTypeIcon the type of template for icon (core vs user)*/\n    private $sTypeIcon;\n\n    /** @var array $aFilesToLoad cache for the method getFilesToLoad()*/\n    private $aFilesToLoad;\n\n    /** @var array $aFrameworkAssetsToReplace cache for the method getFrameworkAssetsToReplace()*/\n    private $aFrameworkAssetsToReplace;\n\n    /** @var array $aReplacements cache for the method getFrameworkAssetsReplacement */\n    private $aReplacements;\n\n\n    /**\n     * @return string the associated database table name\n     */\n    public function tableName()\n    {\n        return '{{template_configuration}}';\n    }\n\n    /**\n     * @return array validation rules for model attributes.\n     */\n    public function rules()\n    {\n        // NOTE: you should only define rules for those attributes that\n        // will receive user inputs.\n        return array(\n            array('template_name', 'required'),\n            array('id, sid, gsid', 'numerical', 'integerOnly'=>true),\n            array('template_name', 'length', 'max'=>150),\n            array('cssframework_name', 'length', 'max'=>45),\n            array('files_css, files_js, files_print_css, options, cssframework_css, cssframework_js, packages_to_load', 'safe'),\n            // The following rule is used by search().\n            array('id, template_name, sid, gsid, files_css, files_js, files_print_css, options, cssframework_name, cssframework_css, cssframework_js, packages_to_load', 'safe', 'on'=>'search'),\n        );\n    }\n\n    /**\n     * @return array relational rules.\n     */\n    public function relations()\n    {\n        return array(\n            'template' => array(self::HAS_ONE, 'Template', array('name' => 'template_name'), 'together' => true),\n        );\n    }\n\n    /**\n     * @return array customized attribute labels (name=>label)\n     */\n    public function attributeLabels()\n    {\n        return array(\n            'id' => 'ID',\n            'template_name' => 'Templates Name',\n            'sid' => 'Sid',\n            'gsid' => 'Gsid',\n            'files_css' => 'Files Css',\n            'files_js' => 'Files Js',\n            'files_print_css' => 'Files Print Css',\n            'options' => 'Options',\n            'cssframework_name' => 'Cssframework Name',\n            'cssframework_css' => 'Cssframework Css',\n            'cssframework_js' => 'Cssframework Js',\n            'packages_to_load' => 'Packages To Load',\n        );\n    }\n\n    /**\n     * Gets an instance of a templateconfiguration by name\n     *\n     * @param string $sTemplateName\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromTemplateName($sTemplateName)\n    {\n        if (!empty(self::$aInstancesFromTemplateName[$sTemplateName])) {\n            return self::$aInstancesFromTemplateName[$sTemplateName];\n        }\n\n        $oInstance = self::model()->find(\n            'template_name=:template_name AND sid IS NULL AND gsid IS NULL',\n            array(':template_name'=>$sTemplateName)\n        );\n\n        // If the survey configuration table of the wanted template doesn't exist (eg: manually deleted), then we provide the default one.\n        if (!is_a($oInstance, 'TemplateConfiguration')) {\n            $oInstance = self::getInstanceFromTemplateName(getGlobalSetting('defaulttheme'));\n        }\n\n        self::$aInstancesFromTemplateName[$sTemplateName] = $oInstance;\n\n        return $oInstance;\n    }\n\n    /**\n     * Returns a TemplateConfiguration Object based on a surveygroup ID\n     * If no instance is existing, it will create one.\n     *\n     * @param integer $iSurveyGroupId\n     * @param string $sTemplateName\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromSurveyGroup($iSurveyGroupId, $sTemplateName = null)\n    {\n        //if a template name is given also check against that\n        $sTemplateName = $sTemplateName != null ? $sTemplateName : SurveysGroups::model()->findByPk($iSurveyGroupId)->template;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('gsid=:gsid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('gsid' => $iSurveyGroupId, 'template_name' => $sTemplateName);\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        // No specific template configuration for this surveygroup => create one\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->sid = null;\n            $oTemplateConfigurationModel->gsid = $iSurveyGroupId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n\n            $oTemplateConfigurationModel->bJustCreated = true;\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Returns a TemplateConfiguration Object based on a surveyID\n     * If no instance is existing, it will create one.\n     *\n     * @param integer $iSurveyId\n     * @param string $sTemplateName\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromSurveyId($iSurveyId, $sTemplateName = null)\n    {\n\n        //if a template name is given also check against that\n        $sTemplateName = $sTemplateName != null ? $sTemplateName : Survey::model()->findByPk($iSurveyId)->template;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('sid' => $iSurveyId, 'template_name' => $sTemplateName);\n\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n\n        // No specific template configuration for this surveygroup => create one\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->gsid = null;\n            $oTemplateConfigurationModel->sid = $iSurveyId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * For a given survey, it checks if its theme have a all the needed configuration entries (survey + survey group). Else, it will create it.\n     * @TODO: recursivity for survey group\n     * @param int $iSurveyId\n     * @return TemplateConfiguration the template configuration for the survey group\n     */\n    public static function checkAndcreateSurveyConfig($iSurveyId)\n    {\n        //if a template name is given also check against that\n        $oSurvey = Survey::model()->findByPk($iSurveyId);\n        $sTemplateName  = $oSurvey->template;\n        $iSurveyGroupId = $oSurvey->gsid;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('sid' => $iSurveyId, 'template_name' => $sTemplateName);\n\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->gsid = null;\n            $oTemplateConfigurationModel->sid = $iSurveyId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('gsid=:gsid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('gsid' => $iSurveyGroupId, 'template_name' => $sTemplateName);\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->sid = null;\n            $oTemplateConfigurationModel->gsid = $iSurveyGroupId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Get an instance of a fitting TemplateConfiguration\n     *\n     * @param string $sTemplateName\n     * @param integer $iSurveyGroupId\n     * @param integer $iSurveyId\n     * @return TemplateConfiguration\n     */\n    public static function getInstance($sTemplateName = null, $iSurveyGroupId = null, $iSurveyId = null)\n    {\n\n        $oTemplateConfigurationModel = new TemplateConfiguration();\n\n        if ($sTemplateName != null && $iSurveyGroupId == null && $iSurveyId == null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n        }\n\n        if ($iSurveyGroupId != null && $iSurveyId == null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromSurveyGroup($iSurveyGroupId, $sTemplateName);\n        }\n\n        if ($iSurveyId != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromSurveyId($iSurveyId, $sTemplateName);\n        }\n\n        return $oTemplateConfigurationModel;\n\n    }\n\n\n    /**\n     * Retrieves a list of models based on the current search/filter conditions.\n     *\n     * Typical usecase:\n     * - Initialize the model fields with values from filter form.\n     * - Execute this method to get CActiveDataProvider instance which will filter\n     * models according to data in model fields.\n     * - Pass data provider to CGridView, CListView or any similar widget.\n     *\n     * @return CActiveDataProvider the data provider that can return the models\n     * based on the search/filter conditions.\n     */\n    public function search()\n    {\n        // @todo Please modify the following code to remove attributes that should not be searched.\n\n        $criteria = new CDbCriteria;\n\n        $criteria->join = 'INNER JOIN {{templates}} AS template ON t.template_name = template.name';\n        //Don't show surveyspecifi settings on the overview\n        $criteria->addCondition('t.sid IS NULL');\n        $criteria->addCondition('t.gsid IS NULL');\n        $criteria->addCondition('template.name IS NOT NULL');\n\n        $criteria->compare('id', $this->id);\n        $criteria->compare('template_name', $this->template_name, true);\n        $criteria->compare('files_css', $this->files_css, true);\n        $criteria->compare('files_js', $this->files_js, true);\n        $criteria->compare('files_print_css', $this->files_print_css, true);\n        $criteria->compare('options', $this->options, true);\n        $criteria->compare('cssframework_name', $this->cssframework_name, true);\n        $criteria->compare('cssframework_css', $this->cssframework_css, true);\n        $criteria->compare('cssframework_js', $this->cssframework_js, true);\n        $criteria->compare('packages_to_load', $this->packages_to_load, true);\n\n        return new CActiveDataProvider($this, array(\n            'criteria'=>$criteria,\n        ));\n    }\n\n    /**\n     * Returns the static model of the specified AR class.\n     * Please note that you should have this exact method in all your CActiveRecord descendants!\n     * @param string $className active record class name.\n     * @return TemplateConfiguration the static model class\n     */\n    public static function model($className = __CLASS__)\n    {\n        /** @var self $model */\n        $model = parent::model($className);\n        return $model;\n    }\n\n\n    /**\n     * Create a new entry in {{templates}} and {{template_configuration}} table using the template manifest\n     * @param string $sTemplateName the name of the template to import\n     * @return boolean true on success | exception\n     * @throws Exception\n     */\n    public static function importManifest($sTemplateName, $aDatas = array())\n    {\n        if (!empty($aDatas['extends'])) {\n\n            $oMotherTemplate = self::getInstanceFromTemplateName($aDatas['extends']);\n            if (is_a($oMotherTemplate, 'TemplateConfiguration')) {\n                $aDatas['api_version']     = $oMotherTemplate->template->api_version;\n                $aDatas['view_folder']     = $oMotherTemplate->template->view_folder;\n                $aDatas['author_email']    = $oMotherTemplate->template->author_email;\n                $aDatas['author_url']      = $oMotherTemplate->template->author_url;\n                $aDatas['copyright']       = $oMotherTemplate->template->copyright;\n                $aDatas['version']         = $oMotherTemplate->template->version;\n                $aDatas['license']         = $oMotherTemplate->template->license;\n                $aDatas['files_folder']    = $oMotherTemplate->template->files_folder;\n                $aDatas['aOptions']        = (empty($aDatas['aOptions'])) ? json_decode($oMotherTemplate->options) : $aDatas['aOptions'];\n            }\n        }\n\n        return parent::importManifest($sTemplateName, $aDatas);\n    }\n\n    public function setToInherit()\n    {\n        $this->files_css         = 'inherit';\n        $this->files_js          = 'inherit';\n        $this->files_print_css   = 'inherit';\n        $this->options           = 'inherit';\n        $this->cssframework_name = 'inherit';\n        $this->cssframework_css  = 'inherit';\n        $this->cssframework_js   = 'inherit';\n        $this->packages_to_load  = 'inherit';\n    }\n\n    public function checkTemplate()\n    {\n        if (empty($this->bTemplateCheckResult)) {\n            $this->bTemplateCheckResult = true;\n            if (!is_object($this->template) || (is_object($this->template) && !Template::checkTemplateXML($this->template->folder))) {\n                $this->bTemplateCheckResult = false;\n            }\n        }\n        return $this->bTemplateCheckResult;\n    }\n\n    /**\n     * Prepare all the needed datas to render the temple\n     * If any problem (like template doesn't exist), it will load the default theme configuration\n     * NOTE 1: This function will create/update all the packages needed to render the template, which imply to do the same for all mother templates\n     * NOTE 2: So if you just want to access the TemplateConfiguration AR Object, you don't need to call it. Call it only before rendering anything related to the template.\n     *\n     * @param  string $sTemplateName the name of the template to load. The string comes from the template selector in survey settings\n     * @param  string $iSurveyId the id of the survey. If\n     * @param bool $bUseMagicInherit\n     * @return $this\n     */\n    public function prepareTemplateRendering($sTemplateName = '', $iSurveyId = '', $bUseMagicInherit = true)\n    {\n        //echo '<br><br><br> $aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] ; <br> $sTemplateName: '.$sTemplateName.' <br>$iSurveyId: '.$iSurveyId.'<br> $bUseMagicInherit: '.$bUseMagicInherit;\n        if (!empty(self::$aPreparedToRender[$this->template->name][$iSurveyId][$bUseMagicInherit])) {\n            return self::$aPreparedToRender[$this->template->name][$iSurveyId][$bUseMagicInherit];\n        }\n\n        $this->bUseMagicInherit = $bUseMagicInherit;\n        $this->setBasics($sTemplateName, $iSurveyId);\n        $this->setMotherTemplates(); // Recursive mother templates configuration\n        $this->setThisTemplate(); // Set the main config values of this template\n        $this->createTemplatePackage($this); // Create an asset package ready to be loaded\n        self::$aPreparedToRender[$this->template->name][$iSurveyId][$bUseMagicInherit] = $this;\n        return $this;\n    }\n\n    public function setBasics($sTemplateName = '', $iSurveyId = '')\n    {\n        $this->sTemplateName = $this->template->name;\n        $this->setIsStandard(); // Check if  it is a CORE template\n        $this->path = ($this->isStandard)\n            ? Yii::app()->getConfig(\"standardthemerootdir\").DIRECTORY_SEPARATOR.$this->template->folder.DIRECTORY_SEPARATOR\n            : Yii::app()->getConfig(\"userthemerootdir\").DIRECTORY_SEPARATOR.$this->template->folder.DIRECTORY_SEPARATOR;\n    }\n\n    /**\n     * Add a file replacement in the field `file_{css|js|print_css}` in table {{template_configuration}},\n     * eg: {\"replace\": [ {original files to replace here...}, \"css/template.css\",]}\n     * In general, should be called from TemplateManifest, after adding a file replacement inside the manifest.\n     *\n     * @param string $sFile the file to replace\n     * @param string $sType css|js\n     * @return bool|void\n     * @throws Exception\n     */\n    public function addFileReplacement($sFile, $sType)\n    {\n        $sField = 'files_'.$sType;\n        $oFiles = (array) json_decode($this->$sField);\n\n        $oFiles['replace'][] = $sFile;\n\n        $this->$sField = json_encode($oFiles);\n\n        if ($this->save()) {\n            return true;\n        } else {\n            throw new Exception(\"could not add $sFile to  $sField replacements! \".$this->getErrors());\n        }\n    }\n\n    public function getTypeIcon()\n    {\n        if (empty($this->sTypeIcon)) {\n            $this->sTypeIcon = (Template::isStandardTemplate($this->template->name)) ?gT(\"Core theme\") : gT(\"User theme\");\n        }\n        return $this->sTypeIcon;\n    }\n\n\n    public function getButtons()\n    {\n        $sEditorUrl = Yii::app()->getController()->createUrl('admin/themes/sa/view', array(\"templatename\"=>$this->template_name));\n        if (App()->getController()->action->id == \"surveysgroups\") {\n            $gisd = Yii::app()->request->getQuery('id', null);\n            $sOptionUrl    = Yii::app()->getController()->createUrl('admin/themeoptions/sa/updatesurveygroup', array(\"id\"=>$this->id, \"gsid\"=>$gisd));\n        } else {\n            $sOptionUrl    = Yii::app()->getController()->createUrl('admin/themeoptions/sa/update', array(\"id\"=>$this->id));\n        }\n\n        $sUninstallUrl = Yii::app()->getController()->createUrl('admin/themeoptions/sa/uninstall/', array(\"templatename\"=>$this->template_name));\n\n        $sEditorLink = \"<a\n            id='template_editor_link_\".$this->template_name.\"'\n            href='\".$sEditorUrl.\"'\n            class='btn btn-default btn-block'>\n                <span class='icon-templates'></span>\n                \".gT('Theme editor').\"\n            </a>\";\n\n            //\n\n\n        $OptionLink = '';\n\n        if ($this->hasOptionPage) {\n            $OptionLink .= \"<a\n                id='template_options_link_\".$this->template_name.\"'\n                href='\".$sOptionUrl.\"'\n                class='btn btn-default btn-block'>\n                    <span class='fa fa-tachometer'></span>\n                    \".gT('Theme options').\"\n                </a>\";\n        }\n\n        $sUninstallLink = '<a\n            id=\"remove_fromdb_link_'.$this->template_name.'\"\n            data-href=\"'.$sUninstallUrl.'\"\n            data-target=\"#confirmation-modal\"\n            data-toggle=\"modal\"\n            data-message=\"'.gT('This will delete all the specific configurations of this theme.').'<br>'.gT('Do you want to continue?').'\"\n            data-tooltip=\"true\"\n            data-title=\"'.gT('Uninstall this theme').'\"\n            class=\"btn btn-danger btn-block\">\n                <span class=\"icon-trash\"></span>\n                '.gT('Uninstall').'\n            </a>';\n\n\n        if (App()->getController()->action->id == \"surveysgroups\") {\n            $sButtons = $OptionLink;\n        } else {\n            $sButtons = $sEditorLink.$OptionLink;\n\n            if ($this->template_name != getGlobalSetting('defaulttheme')) {\n                $sButtons .= $sUninstallLink;\n            } else {\n                $sButtons .= '\n                    <a\n                        class=\"btn btn-danger btn-block\"\n                        disabled\n                        data-toggle=\"tooltip\"\n                        title=\"' . gT('You cannot uninstall the default template.').'\"\n                    >\n                        <span class=\"icon-trash\"></span>\n                        '.gT('Uninstall').'\n                    </a>\n                ';\n            }\n        }\n\n\n\n\n\n        return $sButtons;\n    }\n\n    public function getHasOptionPage()\n    {\n        $filteredName = Template::templateNameFilter($this->template->name);\n        $oRTemplate = $this->prepareTemplateRendering($filteredName);\n\n        $sOptionFile = 'options'.DIRECTORY_SEPARATOR.'options.twig';\n        while (!file_exists($oRTemplate->path.$sOptionFile)) {\n\n            $oMotherTemplate = $oRTemplate->oMotherTemplate;\n            if (!($oMotherTemplate instanceof TemplateConfiguration)) {\n                return false;\n                break;\n            }\n            $oRTemplate = $oMotherTemplate->prepareTemplateRendering($this->template->name);\n        }\n        return true;\n    }\n\n    private function _filterImages($file)\n    {\n        $checkImage = getimagesize($this->filesPath.$file['name']);\n        if (!($checkImage === false || !in_array($checkImage[2], [IMAGETYPE_JPEG, IMAGETYPE_PNG, IMAGETYPE_GIF]))) {\n                    return ['filepath' => './files/'.$file['name'], 'filename'=>$file['name']];\n        }\n    }\n\n    protected function getOptionPageAttributes()\n    {\n        $aData = $this->attributes;\n        $fileList = Template::getOtherFiles($this->filesPath);\n        $aData['maxFileSize'] = getMaximumFileUploadSize();\n        $aData['imageFileList'] = [];\n        foreach ($fileList as $file) {\n            $isImage = $this->_filterImages($file);\n\n            if ($isImage) {\n                            $aData['imageFileList'][] = $isImage;\n            }\n        };\n\n        return $aData;\n    }\n\n    public function getOptionPage()\n    {\n        $oTemplate = $this->prepareTemplateRendering($this->template->name);\n        $renderArray = array('templateConfiguration' => $oTemplate->getOptionPageAttributes());\n\n        $oTemplate->setOptions();\n        $oTemplate->setOptionInheritance();\n\n        $renderArray['oParentOptions'] = (array) $oTemplate->oOptions;\n\n        return Yii::app()->twigRenderer->renderOptionPage($oTemplate, $renderArray);\n    }\n\n    /**\n     * From a list of json files in db it will generate a PHP array ready to use by removeFileFromPackage()\n     *\n     * @param TemplateConfiguration $oTemplate\n     * @param string $sType\n     * @return array\n     * @internal param string $jFiles json\n     */\n    protected function getFilesToLoad($oTemplate, $sType)\n    {\n        if (empty($this->aFilesToLoad)) {\n            $this->aFilesToLoad = array();\n        }\n\n        $sField = 'files_'.$sType;\n        $jFiles = $oTemplate->$sField;\n        $this->aFilesToLoad[$sType] = array();\n\n\n        if (!empty($jFiles)) {\n            $oFiles = json_decode($jFiles, true);\n            if ($oFiles === null) {\n                Yii::app()->setFlashMessage(\n                    sprintf(\n                        gT('Error: Malformed JSON: Field %s must be either a JSON array or the string \"inherit\". Found \"%s\".'),\n                        $sField,\n                        $jFiles\n                    ),\n                    'error'\n                );\n            } else {\n                foreach ($oFiles as $action => $aFileList) {\n\n                    if (is_array($aFileList)) {\n                        if ($action == \"add\" || $action == \"replace\") {\n\n                            // Specific inheritance of one of the value of the json array\n                            if ($aFileList[0] == 'inherit') {\n                                $aParentjFiles = (array) json_decode($oTemplate->getParentConfiguration->$sField);\n                                $aFileList = $aParentjFiles[$action];\n                            }\n\n                            $this->aFilesToLoad[$sType] = array_merge($this->aFilesToLoad[$sType], $aFileList);\n                        }\n                    }\n                }\n            }\n\n        }\n\n\n        return $this->aFilesToLoad[$sType];\n    }\n\n    /**\n     * Change the mother template configuration depending on template settings\n     * @var $sType     string   the type of settings to change (css or js)\n     * @var $aSettings array    array of local setting\n     * @return array\n     */\n    protected function changeMotherConfiguration($sType, $aSettings)\n    {\n        if (is_a($this->oMotherTemplate, 'TemplateConfiguration')) {\n\n\n            // Check if each file exist in this template path\n            // If the file exists in local template, we can remove it from mother template package.\n            // Else, we must remove it from current package, and if it doesn't exist in mother template definition, we must add it.\n            // (and leave it in moter template definition if it already exists.)\n            foreach ($aSettings as $key => $sFileName) {\n                if (file_exists($this->path.$sFileName)) {\n                    Yii::app()->clientScript->removeFileFromPackage($this->oMotherTemplate->sPackageName, $sType, $sFileName);\n\n                } else {\n                    // File doesn't exist locally, so it should be removed\n                    $key = array_search($sFileName, $aSettings);\n                    //Yii::app()->clientScript->removeFileFromPackage($this->sPackageName, $sType, $sFileName);\n                    unset($aSettings[$key]);\n                    Yii::app()->clientScript->addFileToPackage($this->oMotherTemplate->sPackageName, $sType, $sFileName);\n                    /* Old way todo\n                        $oTemplate = $this->getTemplateForFile($sFileName, $this);\n                        if (!Yii::app()->clientScript->IsFileInPackage($oTemplate->sPackageName, $sType, $sFileName)) {\n                            Yii::app()->clientScript->addFileToPackage($oTemplate->sPackageName, $sType, $sFileName);\n                            unset($aSettings[$key]);\n                        }\n                    */\n                }\n            }\n        }\n\n        return $aSettings;\n    }\n\n    /**\n     * Proxy for Yii::app()->clientScript->removeFileFromPackage()\n     *\n     * @param string $sPackageName     string   name of the package to edit\n     * @param string $sType            string   the type of settings to change (css or js)\n     * @param $aSettings        array    array of local setting\n     * @return array\n     */\n    protected function removeFileFromPackage($sPackageName, $sType, $aSettings)\n    {\n        foreach ($aSettings as $sFile) {\n            Yii::app()->clientScript->removeFileFromPackage($sPackageName, $sType, $sFile);\n        }\n    }\n\n    /**\n     * Configure the mother template (and its mother templates)\n     * This is an object recursive call to TemplateConfiguration::prepareTemplateRendering()\n     */\n    protected function setMotherTemplates()\n    {\n        if (!empty($this->template->extends)) {\n            $sMotherTemplateName   = $this->template->extends;\n            $instance = TemplateConfiguration::getInstanceFromTemplateName($sMotherTemplateName);\n            $instance->template->checkTemplate();\n            $this->oMotherTemplate = $instance->prepareTemplateRendering($sMotherTemplateName, null);\n        }\n    }\n\n    /**\n     * @param TemplateConfiguration $oRTemplate\n     * @param string $sPath\n     */\n    protected function getTemplateForPath($oRTemplate, $sPath)\n    {\n        while (empty($oRTemplate->template->$sPath)) {\n            $oMotherTemplate = $oRTemplate->oMotherTemplate;\n            if (!($oMotherTemplate instanceof TemplateConfiguration)) {\n                //throw new Exception(\"can't find a template for template '{$oRTemplate->template_name}' for path '$sPath'.\");\n                TemplateConfiguration::uninstall($this->template_name);\n                Yii::app()->setFlashMessage(sprintf(gT(\"Theme '%s' has been uninstalled because it's not compatible with this LimeSurvey version.\"), $this->template_name), 'error');\n                Yii::app()->getController()->redirect(array(\"admin/themeoptions\"));\n                break;\n            }\n            $oRTemplate = $oMotherTemplate;\n        }\n        return $oRTemplate;\n    }\n\n    /**\n     * Set the default configuration values for the template, and use the motherTemplate value if needed\n     */\n    protected function setThisTemplate()\n    {\n\n        $this->apiVersion  = (!empty($this->template->api_version)) ? $this->template->api_version : null; // Mandtory setting in config XML\n        $this->viewPath    = $this->path.$this->getTemplateForPath($this, 'view_folder')->template->view_folder.DIRECTORY_SEPARATOR;\n        $this->filesPath   = $this->path.$this->getTemplateForPath($this, 'files_folder')->template->files_folder.DIRECTORY_SEPARATOR;\n\n        // Options are optional\n        $this->setOptions();\n\n        // Not mandatory (use package dependances)\n        $this->setCssFramework();\n        $this->packages = $this->getDependsPackages($this);\n        if (!empty($this->packages_to_load)) {\n            $templateToLoadPackages = json_decode($this->packages_to_load);\n            if (!empty($templateToLoadPackages->add)) {\n                $this->packages = array_merge($templateToLoadPackages->add, $this->getDependsPackages($this));\n            }\n\n            // TODO: the remove methode\n        }\n\n        // Add depend package according to packages\n        $this->depends = array_merge($this->depends, $this->packages);\n    }\n\n    private function setCssFramework()\n    {\n        if (!empty($this->cssframework_name)) {\n            $this->cssFramework = new \\stdClass();\n            $this->cssFramework->name = $this->cssframework_name;\n            $this->cssFramework->css  = json_decode($this->cssframework_css);\n            $this->cssFramework->js   = json_decode($this->cssframework_js);\n\n        } else {\n            $this->cssFramework = '';\n        }\n    }\n\n    protected function setOptions()\n    {\n        $this->oOptions = array();\n        if (!empty($this->options)) {\n            $this->oOptions = json_decode($this->options);\n        }\n\n        $this->setOptionInheritance();\n    }\n\n    protected function setOptionInheritance()\n    {\n        $oOptions = $this->oOptions;\n\n        if (!empty($oOptions)) {\n            foreach ($oOptions as $sKey => $sOption) {\n                    $oOptions->$sKey = $this->getOptionKey($sKey);\n            }\n        }\n    }\n\n    /**\n     * @param string $key\n     * @return mixed\n     */\n    protected function getOptionKey($key)\n    {\n        $aOptions = (array) json_decode($this->options);\n        if (isset($aOptions[$key])) {\n            $value = $aOptions[$key];\n            if ($value === 'inherit') {\n                return $this->getParentConfiguration()->getOptionKey($key);\n            }\n            return  $value;\n        } else {\n            return null;\n        }\n    }\n\n    protected function addMotherTemplatePackage($packages)\n    {\n        if (!empty($this->template->extends)) {\n            $sMotherTemplateName = (string) $this->template->extends;\n            $packages[]          = 'survey-template-'.$sMotherTemplateName;\n        }\n        return $packages;\n    }\n\n    /**\n     * Get the list of file replacement from Engine Framework\n     * @param string  $sType            css|js the type of file\n     * @param boolean $bInlcudeRemove   also get the files to remove\n     * @return array\n     */\n    protected function getFrameworkAssetsToReplace($sType, $bInlcudeRemove = false)\n    {\n        if (empty($this->aFrameworkAssetsToReplace)) {\n            $this->aFrameworkAssetsToReplace = array();\n        }\n\n        $this->aFrameworkAssetsToReplace[$sType] = array();\n\n        $sFieldName  = 'cssframework_'.$sType;\n        $aFieldValue = (array) json_decode($this->$sFieldName);\n\n        if (!empty($aFieldValue) && !empty($aFieldValue['replace'])) {\n            $this->aFrameworkAssetsToReplace[$sType] = (array) $aFieldValue['replace'];\n\n            // Inner field inheritance\n            foreach ($this->aFrameworkAssetsToReplace[$sType] as $key => $aFiles) {\n                foreach ($aFiles as $sReplacement) {\n                    if ($sReplacement == \"inherit\") {\n                        $aParentReplacement = $this->getParentConfiguration()->getFrameworkAssetsToReplace($sType);\n                        $this->aFrameworkAssetsToReplace[$sType][$key][1] = $aParentReplacement[$key][1];\n                    }\n                }\n            }\n\n            if ($bInlcudeRemove && isset($aFieldValue['remove'])) {\n                $this->aFrameworkAssetsToReplace[$sType] = array_merge($this->aFrameworkAssetsToReplace, (array) $aFieldValue['remove']);\n            }\n        }\n\n\n        return $this->aFrameworkAssetsToReplace[$sType];\n    }\n\n    /**\n     * Get the list of file replacement from Engine Framework\n     * @param string  $sType            css|js the type of file\n     * @return array\n     */\n    protected function getFrameworkAssetsReplacement($sType)\n    {\n        if (empty($this->aReplacements)) {\n            $this->aReplacements = array();\n        }\n        $this->aReplacements[$sType] = array();\n\n        $aFrameworkAssetsToReplace = $this->getFrameworkAssetsToReplace($sType);\n\n        foreach ($aFrameworkAssetsToReplace as $key => $aAsset) {\n            $aReplace = $aAsset[1];\n            $this->aReplacements[$sType][] = $aReplace;\n        }\n\n\n        return $this->aReplacements[$sType];\n    }\n\n\n    public function getParentConfiguration()\n    {\n        if (empty($this->oParentTemplate)) {\n\n            //check for surveygroup id if a survey is given\n            if ($this->sid != null) {\n                $oSurvey = Survey::model()->findByPk($this->sid);\n                $oParentTemplate = Template::getTemplateConfiguration($this->sTemplateName, null, $oSurvey->gsid);\n                if (is_a($oParentTemplate, 'TemplateConfiguration')) {\n                    $this->oParentTemplate = $oParentTemplate;\n                    $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n                    return $this->oParentTemplate;\n                }\n            }\n\n            //check for surveygroup id if a surveygroup is given\n            if ($this->sid == null && $this->gsid != null) {\n                $oSurveyGroup = SurveysGroups::model()->findByPk($this->gsid);\n                //Switch if the surveygroup inherits from a parent surveygroup\n                if ($oSurveyGroup != null && $oSurveyGroup->parent_id != 0) {\n                    $oParentTemplate = Template::getTemplateConfiguration($this->sTemplateName, null, $oSurveyGroup->parent_id);\n                    if (is_a($oParentTemplate, 'TemplateConfiguration')) {\n                        $this->oParentTemplate = $oParentTemplate;\n                        $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n                        return $this->oParentTemplate;\n                    }\n\n                }\n            }\n\n            //in the endcheck for general global template\n            $this->oParentTemplate = Template::getTemplateConfiguration($this->template_name, null, null);\n            $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n            return $this->oParentTemplate;\n        }\n        return $this->oParentTemplate;\n    }\n\n\n    /**\n     * Change the template name inside the configuration entries (called from template editor)\n     * NOTE: all tests (like template exist, etc) are done from template controller.\n     *\n     * @param string $sOldName The old name of the template\n     * @param string $sNewName The newname of the template\n     */\n    public static function rename($sOldName, $sNewName)\n    {\n        self::model()->updateAll(array('template_name' => $sNewName), \"template_name = :oldname\", array(':oldname'=>$sOldName));\n    }\n\n\n    /**\n     * Proxy for the AR method to manage the inheritance\n     * If one of the field that can be inherited is set to \"inherit\", then it will return the value of its parent\n     * NOTE: this is recursive, if the parent field itself is set to inherit, then it will the value of the parent of the parent, etc\n     *\n     * @param string $name the name of the attribute\n     * @return mixed\n     */\n    public function __get($name)\n    {\n        $aAttributesThatCanBeInherited = array('files_css', 'files_js', 'options', 'cssframework_name', 'cssframework_css', 'cssframework_js', 'packages_to_load');\n\n        if (in_array($name, $aAttributesThatCanBeInherited) && $this->bUseMagicInherit) {\n            // Full inheritance of the whole field\n            $sAttribute = parent::__get($name);\n            if ($sAttribute === 'inherit') {\n                // NOTE: this is object recursive (if parent configuration field is set to inherit, then it will lead to this method again.)\n                $sAttribute = $this->getParentConfiguration()->$name;\n            }\n        } else {\n            $sAttribute = parent::__get($name);\n        }\n\n        return $sAttribute;\n    }\n\n}\n"], "fixing_code": ["<?php\n/*\n* LimeSurvey\n* Copyright (C) 2007-2011 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*\n* Template Options controller\n*/\n\nif (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n\nclass themeoptions  extends Survey_Common_Action\n{\n\n    /**\n     * @param string $controller\n     */\n    public function __construct($controller = null, $id = null)\n    {\n        parent::__construct($controller, $id);\n    }\n\n    /**\n     * Displays a particular model.\n     * @param integer $id the ID of the model to be displayed\n     */\n    public function view($id)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'read')) {\n            $this->_renderWrappedTemplate('themeoptions', 'read', array(\n                'model'=>$this->loadModel($id),\n            ));\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(App()->createUrl(\"/admin\"));\n        }\n\n    }\n\n    /**\n     * Creates a new model.\n     * If creation is successful, the browser will be redirected to the 'view' page.\n     */\n    public function create()\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            $model = new TemplateOptions;\n\n            if (isset($_POST['TemplateOptions'])) {\n                $model->attributes = $_POST['TemplateOptions'];\n                if ($model->save()) {\n                    $this->getController()->redirect(array('admin/themeoptions/sa/update/id/'.$model->id));\n                }\n            }\n\n            $this->render('create', array(\n                'model'=>$model,\n            ));\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(array(\"admin/themeoptions\"));\n        }\n    }\n\n\n    /**\n     * Updates a particular model.\n     * If update is successful, the browser will be redirected to the 'view' page.\n     * @param integer $id the ID of the model to be updated\n     */\n    public function update($id)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            $model = $this->loadModel($id);\n\n            if (isset($_POST['TemplateConfiguration'])) {\n                $model->attributes = $_POST['TemplateConfiguration'];\n                if ($model->save()) {\n                    Yii::app()->user->setFlash('success', gT('Theme options saved.'));\n                    $this->getController()->redirect(array('admin/themeoptions/sa/update/id/'.$model->id));\n                }\n            }\n\n            $this->_updateCommon($model);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/themeoptions\"));\n        }\n    }\n\n    /**\n     * Updates a particular model.\n     * If update is successful, the browser will be redirected to the 'view' page.\n     * @param integer $sid the ID of the model to be updated\n     */\n    public function updatesurvey($sid)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            $model = TemplateConfiguration::getInstance(null, null, $sid);\n\n            if (isset($_POST['TemplateConfiguration'])) {\n                $model->attributes = $_POST['TemplateConfiguration'];\n                if ($model->save()) {\n                    Yii::app()->user->setFlash('success', gT('Theme options saved.'));\n                    $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/themeoptions/sa/updatesurvey\", ['surveyid'=>$sid, 'sid'=>$sid]));\n                }\n            }\n\n            $this->_updateCommon($model, $sid);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/themeoptions/sa/updatesurvey\", ['surveyid'=>$sid, 'sid'=>$sid]));\n        }\n    }\n\n    /**\n     * Updates a particular model.\n     * If update is successful, the browser will be redirected to the 'view' page.\n     * @param integer $id the ID of the model to be updated\n     */\n    public function updatesurveygroup($id = null, $gsid, $l = null)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n\n            $sTemplateName = $id !== null ? TemplateConfiguration::model()->findByPk($id)->template_name : null;\n            $model = TemplateConfiguration::getInstance($sTemplateName, $gsid);\n\n            if ($model->bJustCreated === true && $l === null) {\n                $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/themeoptions/sa/updatesurveygroup/\", ['id'=>$id, 'gsid'=>$gsid, 'l'=>1]));\n            }\n\n            if (isset($_POST['TemplateConfiguration'])) {\n                $model = TemplateConfiguration::getInstance($_POST['TemplateConfiguration']['template_name'], $gsid);\n                $model->attributes = $_POST['TemplateConfiguration'];\n                if ($model->save()) {\n                    Yii::app()->user->setFlash('success', gT('Theme options saved.'));\n                    $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/surveysgroups/sa/update/\", ['id'=>$gsid]));\n                }\n            }\n\n            $this->_updateCommon($model);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(Yii::app()->getController()->createUrl(\"/admin/surveysgroups/sa/update/\", ['id'=>$gsid]));\n        }\n    }\n\n    public function setAdminTheme($sAdminThemeName)\n    {\n        if (!Permission::model()->hasGlobalPermission('settings', 'update')) {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(array('/admin'));\n        }\n\n        $sAdmintheme = sanitize_paranoid_string($sAdminThemeName);\n        setGlobalSetting('admintheme', $sAdmintheme);\n        $this->getController()->redirect(Yii::app()->getController()->createUrl(\"admin/themeoptions#adminthemes\"));\n    }\n\n    /**\n     * Lists all models.\n     */\n    public function index()\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'read')) {\n            $aData = array();\n            $aData['oSurveyTheme'] = new TemplateConfiguration();\n            $aData['oAdminTheme']  = new AdminTheme();\n\n            $this->_renderWrappedTemplate('themeoptions', 'index', $aData);\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(App()->createUrl(\"/admin\"));\n        }\n    }\n\n    /**\n     * Manages all models.\n     */\n    public function admin()\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'read')) {\n            $model = new TemplateOptions('search');\n            $model->unsetAttributes(); // clear any default values\n            if (isset($_GET['TemplateOptions'])) {\n                $model->attributes = $_GET['TemplateOptions'];\n            }\n\n            $this->render('admin', array(\n                'model'=>$model,\n            ));\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(App()->createUrl(\"/admin\"));\n        }\n    }\n\n    /**\n     * Returns the data model based on the primary key given in the GET variable.\n     * If the data model is not found, an HTTP exception will be raised.\n     * @param integer $id the ID of the model to be loaded\n     * @return TemplateConfiguration the loaded model\n     * @throws CHttpException\n     */\n    public function loadModel($id)\n    {\n        $model = TemplateConfiguration::model()->findByPk($id);\n        if ($model === null) {\n            throw new CHttpException(404, 'The requested page does not exist.');\n        }\n\n        return $model;\n    }\n\n\n    public function importManifest($templatename)\n    {\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            TemplateManifest::importManifest($templatename);\n            $this->getController()->redirect(array(\"admin/themeoptions\"));\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n            $this->getController()->redirect(array(\"admin/themeoptions\"));\n        }\n\n    }\n\n    public function uninstall()\n    {\n        $templatename = Yii::app()->request->getPost('templatename');\n        if (Permission::model()->hasGlobalPermission('templates', 'update')) {\n            if (!Template::hasInheritance($templatename)) {\n                TemplateConfiguration::uninstall($templatename);\n            } else {\n                Yii::app()->setFlashMessage(sprintf(gT(\"You can't uninstall template '%s' because some templates inherit from it.\"), $templatename), 'error');\n            }\n        } else {\n            Yii::app()->setFlashMessage(gT(\"We are sorry but you don't have permissions to do this.\"), 'error');\n        }\n\n        $this->getController()->redirect(array(\"admin/themeoptions\"));\n    }\n\n    /**\n     * Performs the AJAX validation.\n     * @param TemplateOptions $model the model to be validated\n     */\n    protected function performAjaxValidation($model)\n    {\n        if (isset($_POST['ajax']) && $_POST['ajax'] === 'template-options-form') {\n            echo CActiveForm::validate($model);\n            Yii::app()->end();\n        }\n    }\n\n    public function getPreviewTag()\n    {\n        $templatename = Yii::app()->request->getPost('templatename');\n        $oTemplate = TemplateConfiguration::getInstanceFromTemplateName($templatename);\n        $previewTag = $oTemplate->getPreview();\n        return Yii::app()->getController()->renderPartial(\n            '/admin/super/_renderJson',\n            ['data' => ['image' =>  $previewTag]],\n            false,\n            false\n        );\n    }\n\n    /**\n     * Renders the template options form.\n     *\n     * @param TemplateConfiguration $model\n     * @param int $sid\n     * @return void\n     */\n    private function _updateCommon(TemplateConfiguration $model, $sid = null)\n    {\n        $oModelWithInheritReplacement = TemplateConfiguration::model()->findByPk($model->id);\n        $templateOptionPage           = $oModelWithInheritReplacement->optionPage;\n\n        Yii::app()->clientScript->registerPackage('bootstrap-switch', LSYii_ClientScript::POS_BEGIN);\n        $aData = array(\n            'model'=>$model,\n            'templateOptionPage' => $templateOptionPage\n        );\n\n        if ($sid !== null) {\n            $aData['surveybar']['savebutton']['form'] = true;\n            $aData['surveyid'] = $sid;\n            $aData['title_bar']['title'] = gT(\"Survey template options\");\n            $aData['subaction'] = gT(\"Survey template options\");\n        }\n\n        $this->_renderWrappedTemplate('themeoptions', 'update', $aData);\n    }\n}\n", "<?php\nif (!defined('BASEPATH')) {\n    exit('No direct script access allowed');\n}\n/*\n* LimeSurvey\n* Copyright (C) 2007-2015 The LimeSurvey Project Team / Carsten Schmitz\n* All rights reserved.\n* License: GNU/GPL License v2 or later, see LICENSE.php\n* LimeSurvey is free software. This version may have been modified pursuant\n* to the GNU General Public License, and as distributed it includes or\n* is derivative of works licensed under the GNU General Public License or\n* other free or open source software licenses.\n* See COPYRIGHT.php for copyright notices and details.\n*/\n\n/*\n * This is the model class for table \"{{template_configuration}}\".\n *\n * NOTE: if you only need to access to the table, you don't need to call prepareTemplateRendering\n *\n * The followings are the available columns in table '{{template_configuration}}':\n * @property integer $id Primary key\n * @property string $template_name\n * @property integer $sid Survey ID\n * @property integer $gsid\n * @property integer $uid user ID\n * @property string $files_css\n * @property string $files_js\n * @property string $files_print_css\n * @property string $options\n * @property string $cssframework_name\n * @property string $cssframework_css\n * @property string $cssframework_js\n * @property string $packages_to_load\n * @property string $packages_ltr\n * @property string $packages_rtl\n * @property string $packages_rtl\n *\n * @package       LimeSurvey\n * @subpackage    Backend\n */\nclass TemplateConfiguration extends TemplateConfig\n{\n\n    /**\n     * @var TemplateConfiguration $oParentTemplate The parent template name\n     * A template configuration, in the database, can inherit from another one.\n     * This used to manage the different configuration levels for a very same template: global, survey group, survey\n     * This is not related to motherTemplate (inheritance between two different templates)\n     */\n    public $oParentTemplate;\n\n    /**@var boolean Should the magic getters automatically retreives the parent value when field is set to inherit. Only turn to on for template rendering  */\n    public $bUseMagicInherit = false;\n\n    /**@var boolean Indicate if this entry in DB get created on the fly. If yes, because of Cache, it can need a page redirect  */\n    public $bJustCreated = false;\n\n    // Caches\n\n    /** @var string $sPreviewImgTag the template preview image tag for the template list*/\n    public $sPreviewImgTag;\n\n    /** @var array $aInstancesFromTemplateName cache for method getInstanceFromTemplateName*/\n    public static $aInstancesFromTemplateName;\n\n    /** @var array $aInstancesFromTemplateName cache for method prepareTemplateRendering*/\n    public static $aPreparedToRender;\n\n    /** @var boolean $bTemplateCheckResult is the template valid?*/\n    private $bTemplateCheckResult;\n\n    /** @var string $sTypeIcon the type of template for icon (core vs user)*/\n    private $sTypeIcon;\n\n    /** @var array $aFilesToLoad cache for the method getFilesToLoad()*/\n    private $aFilesToLoad;\n\n    /** @var array $aFrameworkAssetsToReplace cache for the method getFrameworkAssetsToReplace()*/\n    private $aFrameworkAssetsToReplace;\n\n    /** @var array $aReplacements cache for the method getFrameworkAssetsReplacement */\n    private $aReplacements;\n\n\n    /**\n     * @return string the associated database table name\n     */\n    public function tableName()\n    {\n        return '{{template_configuration}}';\n    }\n\n    /**\n     * @return array validation rules for model attributes.\n     */\n    public function rules()\n    {\n        // NOTE: you should only define rules for those attributes that\n        // will receive user inputs.\n        return array(\n            array('template_name', 'required'),\n            array('id, sid, gsid', 'numerical', 'integerOnly'=>true),\n            array('template_name', 'length', 'max'=>150),\n            array('cssframework_name', 'length', 'max'=>45),\n            array('files_css, files_js, files_print_css, options, cssframework_css, cssframework_js, packages_to_load', 'safe'),\n            // The following rule is used by search().\n            array('id, template_name, sid, gsid, files_css, files_js, files_print_css, options, cssframework_name, cssframework_css, cssframework_js, packages_to_load', 'safe', 'on'=>'search'),\n        );\n    }\n\n    /**\n     * @return array relational rules.\n     */\n    public function relations()\n    {\n        return array(\n            'template' => array(self::HAS_ONE, 'Template', array('name' => 'template_name'), 'together' => true),\n        );\n    }\n\n    /**\n     * @return array customized attribute labels (name=>label)\n     */\n    public function attributeLabels()\n    {\n        return array(\n            'id' => 'ID',\n            'template_name' => 'Templates Name',\n            'sid' => 'Sid',\n            'gsid' => 'Gsid',\n            'files_css' => 'Files Css',\n            'files_js' => 'Files Js',\n            'files_print_css' => 'Files Print Css',\n            'options' => 'Options',\n            'cssframework_name' => 'Cssframework Name',\n            'cssframework_css' => 'Cssframework Css',\n            'cssframework_js' => 'Cssframework Js',\n            'packages_to_load' => 'Packages To Load',\n        );\n    }\n\n    /**\n     * Gets an instance of a templateconfiguration by name\n     *\n     * @param string $sTemplateName\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromTemplateName($sTemplateName)\n    {\n        if (!empty(self::$aInstancesFromTemplateName[$sTemplateName])) {\n            return self::$aInstancesFromTemplateName[$sTemplateName];\n        }\n\n        $oInstance = self::model()->find(\n            'template_name=:template_name AND sid IS NULL AND gsid IS NULL',\n            array(':template_name'=>$sTemplateName)\n        );\n\n        // If the survey configuration table of the wanted template doesn't exist (eg: manually deleted), then we provide the default one.\n        if (!is_a($oInstance, 'TemplateConfiguration')) {\n            $oInstance = self::getInstanceFromTemplateName(getGlobalSetting('defaulttheme'));\n        }\n\n        self::$aInstancesFromTemplateName[$sTemplateName] = $oInstance;\n\n        return $oInstance;\n    }\n\n    /**\n     * Returns a TemplateConfiguration Object based on a surveygroup ID\n     * If no instance is existing, it will create one.\n     *\n     * @param integer $iSurveyGroupId\n     * @param string $sTemplateName\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromSurveyGroup($iSurveyGroupId, $sTemplateName = null)\n    {\n        //if a template name is given also check against that\n        $sTemplateName = $sTemplateName != null ? $sTemplateName : SurveysGroups::model()->findByPk($iSurveyGroupId)->template;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('gsid=:gsid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('gsid' => $iSurveyGroupId, 'template_name' => $sTemplateName);\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        // No specific template configuration for this surveygroup => create one\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->sid = null;\n            $oTemplateConfigurationModel->gsid = $iSurveyGroupId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n\n            $oTemplateConfigurationModel->bJustCreated = true;\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Returns a TemplateConfiguration Object based on a surveyID\n     * If no instance is existing, it will create one.\n     *\n     * @param integer $iSurveyId\n     * @param string $sTemplateName\n     * @return TemplateConfiguration\n     */\n    public static function getInstanceFromSurveyId($iSurveyId, $sTemplateName = null)\n    {\n\n        //if a template name is given also check against that\n        $sTemplateName = $sTemplateName != null ? $sTemplateName : Survey::model()->findByPk($iSurveyId)->template;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('sid' => $iSurveyId, 'template_name' => $sTemplateName);\n\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n\n        // No specific template configuration for this surveygroup => create one\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->gsid = null;\n            $oTemplateConfigurationModel->sid = $iSurveyId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * For a given survey, it checks if its theme have a all the needed configuration entries (survey + survey group). Else, it will create it.\n     * @TODO: recursivity for survey group\n     * @param int $iSurveyId\n     * @return TemplateConfiguration the template configuration for the survey group\n     */\n    public static function checkAndcreateSurveyConfig($iSurveyId)\n    {\n        //if a template name is given also check against that\n        $oSurvey = Survey::model()->findByPk($iSurveyId);\n        $sTemplateName  = $oSurvey->template;\n        $iSurveyGroupId = $oSurvey->gsid;\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('sid=:sid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('sid' => $iSurveyId, 'template_name' => $sTemplateName);\n\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n\n        // TODO: Move to SurveyGroup creation, right now the 'lazy loading' approach is ok.\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->gsid = null;\n            $oTemplateConfigurationModel->sid = $iSurveyId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        $criteria = new CDbCriteria();\n        $criteria->addCondition('gsid=:gsid');\n        $criteria->addCondition('template_name=:template_name');\n        $criteria->params = array('gsid' => $iSurveyGroupId, 'template_name' => $sTemplateName);\n        $oTemplateConfigurationModel = TemplateConfiguration::model()->find($criteria);\n\n        if (!is_a($oTemplateConfigurationModel, 'TemplateConfiguration') && $sTemplateName != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n            $oTemplateConfigurationModel->bUseMagicInherit = false;\n            $oTemplateConfigurationModel->id = null;\n            $oTemplateConfigurationModel->isNewRecord = true;\n            $oTemplateConfigurationModel->sid = null;\n            $oTemplateConfigurationModel->gsid = $iSurveyGroupId;\n            $oTemplateConfigurationModel->setToInherit();\n            $oTemplateConfigurationModel->save();\n        }\n\n        return $oTemplateConfigurationModel;\n    }\n\n    /**\n     * Get an instance of a fitting TemplateConfiguration\n     *\n     * @param string $sTemplateName\n     * @param integer $iSurveyGroupId\n     * @param integer $iSurveyId\n     * @return TemplateConfiguration\n     */\n    public static function getInstance($sTemplateName = null, $iSurveyGroupId = null, $iSurveyId = null)\n    {\n\n        $oTemplateConfigurationModel = new TemplateConfiguration();\n\n        if ($sTemplateName != null && $iSurveyGroupId == null && $iSurveyId == null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromTemplateName($sTemplateName);\n        }\n\n        if ($iSurveyGroupId != null && $iSurveyId == null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromSurveyGroup($iSurveyGroupId, $sTemplateName);\n        }\n\n        if ($iSurveyId != null) {\n            $oTemplateConfigurationModel = TemplateConfiguration::getInstanceFromSurveyId($iSurveyId, $sTemplateName);\n        }\n\n        return $oTemplateConfigurationModel;\n\n    }\n\n\n    /**\n     * Retrieves a list of models based on the current search/filter conditions.\n     *\n     * Typical usecase:\n     * - Initialize the model fields with values from filter form.\n     * - Execute this method to get CActiveDataProvider instance which will filter\n     * models according to data in model fields.\n     * - Pass data provider to CGridView, CListView or any similar widget.\n     *\n     * @return CActiveDataProvider the data provider that can return the models\n     * based on the search/filter conditions.\n     */\n    public function search()\n    {\n        // @todo Please modify the following code to remove attributes that should not be searched.\n\n        $criteria = new CDbCriteria;\n\n        $criteria->join = 'INNER JOIN {{templates}} AS template ON t.template_name = template.name';\n        //Don't show surveyspecifi settings on the overview\n        $criteria->addCondition('t.sid IS NULL');\n        $criteria->addCondition('t.gsid IS NULL');\n        $criteria->addCondition('template.name IS NOT NULL');\n\n        $criteria->compare('id', $this->id);\n        $criteria->compare('template_name', $this->template_name, true);\n        $criteria->compare('files_css', $this->files_css, true);\n        $criteria->compare('files_js', $this->files_js, true);\n        $criteria->compare('files_print_css', $this->files_print_css, true);\n        $criteria->compare('options', $this->options, true);\n        $criteria->compare('cssframework_name', $this->cssframework_name, true);\n        $criteria->compare('cssframework_css', $this->cssframework_css, true);\n        $criteria->compare('cssframework_js', $this->cssframework_js, true);\n        $criteria->compare('packages_to_load', $this->packages_to_load, true);\n\n        return new CActiveDataProvider($this, array(\n            'criteria'=>$criteria,\n        ));\n    }\n\n    /**\n     * Returns the static model of the specified AR class.\n     * Please note that you should have this exact method in all your CActiveRecord descendants!\n     * @param string $className active record class name.\n     * @return TemplateConfiguration the static model class\n     */\n    public static function model($className = __CLASS__)\n    {\n        /** @var self $model */\n        $model = parent::model($className);\n        return $model;\n    }\n\n\n    /**\n     * Create a new entry in {{templates}} and {{template_configuration}} table using the template manifest\n     * @param string $sTemplateName the name of the template to import\n     * @return boolean true on success | exception\n     * @throws Exception\n     */\n    public static function importManifest($sTemplateName, $aDatas = array())\n    {\n        if (!empty($aDatas['extends'])) {\n\n            $oMotherTemplate = self::getInstanceFromTemplateName($aDatas['extends']);\n            if (is_a($oMotherTemplate, 'TemplateConfiguration')) {\n                $aDatas['api_version']     = $oMotherTemplate->template->api_version;\n                $aDatas['view_folder']     = $oMotherTemplate->template->view_folder;\n                $aDatas['author_email']    = $oMotherTemplate->template->author_email;\n                $aDatas['author_url']      = $oMotherTemplate->template->author_url;\n                $aDatas['copyright']       = $oMotherTemplate->template->copyright;\n                $aDatas['version']         = $oMotherTemplate->template->version;\n                $aDatas['license']         = $oMotherTemplate->template->license;\n                $aDatas['files_folder']    = $oMotherTemplate->template->files_folder;\n                $aDatas['aOptions']        = (empty($aDatas['aOptions'])) ? json_decode($oMotherTemplate->options) : $aDatas['aOptions'];\n            }\n        }\n\n        return parent::importManifest($sTemplateName, $aDatas);\n    }\n\n    public function setToInherit()\n    {\n        $this->files_css         = 'inherit';\n        $this->files_js          = 'inherit';\n        $this->files_print_css   = 'inherit';\n        $this->options           = 'inherit';\n        $this->cssframework_name = 'inherit';\n        $this->cssframework_css  = 'inherit';\n        $this->cssframework_js   = 'inherit';\n        $this->packages_to_load  = 'inherit';\n    }\n\n    public function checkTemplate()\n    {\n        if (empty($this->bTemplateCheckResult)) {\n            $this->bTemplateCheckResult = true;\n            if (!is_object($this->template) || (is_object($this->template) && !Template::checkTemplateXML($this->template->folder))) {\n                $this->bTemplateCheckResult = false;\n            }\n        }\n        return $this->bTemplateCheckResult;\n    }\n\n    /**\n     * Prepare all the needed datas to render the temple\n     * If any problem (like template doesn't exist), it will load the default theme configuration\n     * NOTE 1: This function will create/update all the packages needed to render the template, which imply to do the same for all mother templates\n     * NOTE 2: So if you just want to access the TemplateConfiguration AR Object, you don't need to call it. Call it only before rendering anything related to the template.\n     *\n     * @param  string $sTemplateName the name of the template to load. The string comes from the template selector in survey settings\n     * @param  string $iSurveyId the id of the survey. If\n     * @param bool $bUseMagicInherit\n     * @return $this\n     */\n    public function prepareTemplateRendering($sTemplateName = '', $iSurveyId = '', $bUseMagicInherit = true)\n    {\n        //echo '<br><br><br> $aPreparedToRender[$sTemplateName][$iSurveyId][$bUseMagicInherit] ; <br> $sTemplateName: '.$sTemplateName.' <br>$iSurveyId: '.$iSurveyId.'<br> $bUseMagicInherit: '.$bUseMagicInherit;\n        if (!empty(self::$aPreparedToRender[$this->template->name][$iSurveyId][$bUseMagicInherit])) {\n            return self::$aPreparedToRender[$this->template->name][$iSurveyId][$bUseMagicInherit];\n        }\n\n        $this->bUseMagicInherit = $bUseMagicInherit;\n        $this->setBasics($sTemplateName, $iSurveyId);\n        $this->setMotherTemplates(); // Recursive mother templates configuration\n        $this->setThisTemplate(); // Set the main config values of this template\n        $this->createTemplatePackage($this); // Create an asset package ready to be loaded\n        self::$aPreparedToRender[$this->template->name][$iSurveyId][$bUseMagicInherit] = $this;\n        return $this;\n    }\n\n    public function setBasics($sTemplateName = '', $iSurveyId = '')\n    {\n        $this->sTemplateName = $this->template->name;\n        $this->setIsStandard(); // Check if  it is a CORE template\n        $this->path = ($this->isStandard)\n            ? Yii::app()->getConfig(\"standardthemerootdir\").DIRECTORY_SEPARATOR.$this->template->folder.DIRECTORY_SEPARATOR\n            : Yii::app()->getConfig(\"userthemerootdir\").DIRECTORY_SEPARATOR.$this->template->folder.DIRECTORY_SEPARATOR;\n    }\n\n    /**\n     * Add a file replacement in the field `file_{css|js|print_css}` in table {{template_configuration}},\n     * eg: {\"replace\": [ {original files to replace here...}, \"css/template.css\",]}\n     * In general, should be called from TemplateManifest, after adding a file replacement inside the manifest.\n     *\n     * @param string $sFile the file to replace\n     * @param string $sType css|js\n     * @return bool|void\n     * @throws Exception\n     */\n    public function addFileReplacement($sFile, $sType)\n    {\n        $sField = 'files_'.$sType;\n        $oFiles = (array) json_decode($this->$sField);\n\n        $oFiles['replace'][] = $sFile;\n\n        $this->$sField = json_encode($oFiles);\n\n        if ($this->save()) {\n            return true;\n        } else {\n            throw new Exception(\"could not add $sFile to  $sField replacements! \".$this->getErrors());\n        }\n    }\n\n    public function getTypeIcon()\n    {\n        if (empty($this->sTypeIcon)) {\n            $this->sTypeIcon = (Template::isStandardTemplate($this->template->name)) ?gT(\"Core theme\") : gT(\"User theme\");\n        }\n        return $this->sTypeIcon;\n    }\n\n\n    public function getButtons()\n    {\n        $sEditorUrl = Yii::app()->getController()->createUrl('admin/themes/sa/view', array(\"templatename\"=>$this->template_name));\n        if (App()->getController()->action->id == \"surveysgroups\") {\n            $gisd = Yii::app()->request->getQuery('id', null);\n            $sOptionUrl    = Yii::app()->getController()->createUrl('admin/themeoptions/sa/updatesurveygroup', array(\"id\"=>$this->id, \"gsid\"=>$gisd));\n        } else {\n            $sOptionUrl    = Yii::app()->getController()->createUrl('admin/themeoptions/sa/update', array(\"id\"=>$this->id));\n        }\n\n        $sUninstallUrl = Yii::app()->getController()->createUrl('admin/themeoptions/sa/uninstall/');\n\n        $sEditorLink = \"<a\n            id='template_editor_link_\".$this->template_name.\"'\n            href='\".$sEditorUrl.\"'\n            class='btn btn-default btn-block'>\n                <span class='icon-templates'></span>\n                \".gT('Theme editor').\"\n            </a>\";\n\n            //\n\n\n        $OptionLink = '';\n\n        if ($this->hasOptionPage) {\n            $OptionLink .= \"<a\n                id='template_options_link_\".$this->template_name.\"'\n                href='\".$sOptionUrl.\"'\n                class='btn btn-default btn-block'>\n                    <span class='fa fa-tachometer'></span>\n                    \".gT('Theme options').\"\n                </a>\";\n        }\n\n        $sUninstallLink = '<a\n            id=\"remove_fromdb_link_'.$this->template_name.'\"\n            data-ajax-url=\"'.$sUninstallUrl.'\"\n            data-post=\\'{ \"templatename\": \"'.$this->template_name.'\" }\\'\n            data-gridid = \"yw0\"\n            data-target=\"#confirmation-modal\"\n            data-toggle=\"modal\"\n            data-message=\"'.gT('This will delete all the specific configurations of this theme.').'<br>'.gT('Do you want to continue?').'\"\n            data-tooltip=\"true\"\n            data-title=\"'.gT('Uninstall this theme').'\"\n            class=\"btn btn-danger btn-block\">\n                <span class=\"icon-trash\"></span>\n                '.gT('Uninstall').'\n            </a>';\n\n\n        if (App()->getController()->action->id == \"surveysgroups\") {\n            $sButtons = $OptionLink;\n        } else {\n            $sButtons = $sEditorLink.$OptionLink;\n\n            if ($this->template_name != getGlobalSetting('defaulttheme')) {\n                $sButtons .= $sUninstallLink;\n            } else {\n                $sButtons .= '\n                    <a\n                        class=\"btn btn-danger btn-block\"\n                        disabled\n                        data-toggle=\"tooltip\"\n                        title=\"' . gT('You cannot uninstall the default template.').'\"\n                    >\n                        <span class=\"icon-trash\"></span>\n                        '.gT('Uninstall').'\n                    </a>\n                ';\n            }\n        }\n\n\n\n\n\n        return $sButtons;\n    }\n\n    public function getHasOptionPage()\n    {\n        $filteredName = Template::templateNameFilter($this->template->name);\n        $oRTemplate = $this->prepareTemplateRendering($filteredName);\n\n        $sOptionFile = 'options'.DIRECTORY_SEPARATOR.'options.twig';\n        while (!file_exists($oRTemplate->path.$sOptionFile)) {\n\n            $oMotherTemplate = $oRTemplate->oMotherTemplate;\n            if (!($oMotherTemplate instanceof TemplateConfiguration)) {\n                return false;\n                break;\n            }\n            $oRTemplate = $oMotherTemplate->prepareTemplateRendering($this->template->name);\n        }\n        return true;\n    }\n\n    private function _filterImages($file)\n    {\n        $checkImage = getimagesize($this->filesPath.$file['name']);\n        if (!($checkImage === false || !in_array($checkImage[2], [IMAGETYPE_JPEG, IMAGETYPE_PNG, IMAGETYPE_GIF]))) {\n                    return ['filepath' => './files/'.$file['name'], 'filename'=>$file['name']];\n        }\n    }\n\n    protected function getOptionPageAttributes()\n    {\n        $aData = $this->attributes;\n        $fileList = Template::getOtherFiles($this->filesPath);\n        $aData['maxFileSize'] = getMaximumFileUploadSize();\n        $aData['imageFileList'] = [];\n        foreach ($fileList as $file) {\n            $isImage = $this->_filterImages($file);\n\n            if ($isImage) {\n                            $aData['imageFileList'][] = $isImage;\n            }\n        };\n\n        return $aData;\n    }\n\n    public function getOptionPage()\n    {\n        $oTemplate = $this->prepareTemplateRendering($this->template->name);\n        $renderArray = array('templateConfiguration' => $oTemplate->getOptionPageAttributes());\n\n        $oTemplate->setOptions();\n        $oTemplate->setOptionInheritance();\n\n        $renderArray['oParentOptions'] = (array) $oTemplate->oOptions;\n\n        return Yii::app()->twigRenderer->renderOptionPage($oTemplate, $renderArray);\n    }\n\n    /**\n     * From a list of json files in db it will generate a PHP array ready to use by removeFileFromPackage()\n     *\n     * @param TemplateConfiguration $oTemplate\n     * @param string $sType\n     * @return array\n     * @internal param string $jFiles json\n     */\n    protected function getFilesToLoad($oTemplate, $sType)\n    {\n        if (empty($this->aFilesToLoad)) {\n            $this->aFilesToLoad = array();\n        }\n\n        $sField = 'files_'.$sType;\n        $jFiles = $oTemplate->$sField;\n        $this->aFilesToLoad[$sType] = array();\n\n\n        if (!empty($jFiles)) {\n            $oFiles = json_decode($jFiles, true);\n            if ($oFiles === null) {\n                Yii::app()->setFlashMessage(\n                    sprintf(\n                        gT('Error: Malformed JSON: Field %s must be either a JSON array or the string \"inherit\". Found \"%s\".'),\n                        $sField,\n                        $jFiles\n                    ),\n                    'error'\n                );\n            } else {\n                foreach ($oFiles as $action => $aFileList) {\n\n                    if (is_array($aFileList)) {\n                        if ($action == \"add\" || $action == \"replace\") {\n\n                            // Specific inheritance of one of the value of the json array\n                            if ($aFileList[0] == 'inherit') {\n                                $aParentjFiles = (array) json_decode($oTemplate->getParentConfiguration->$sField);\n                                $aFileList = $aParentjFiles[$action];\n                            }\n\n                            $this->aFilesToLoad[$sType] = array_merge($this->aFilesToLoad[$sType], $aFileList);\n                        }\n                    }\n                }\n            }\n\n        }\n\n\n        return $this->aFilesToLoad[$sType];\n    }\n\n    /**\n     * Change the mother template configuration depending on template settings\n     * @var $sType     string   the type of settings to change (css or js)\n     * @var $aSettings array    array of local setting\n     * @return array\n     */\n    protected function changeMotherConfiguration($sType, $aSettings)\n    {\n        if (is_a($this->oMotherTemplate, 'TemplateConfiguration')) {\n\n\n            // Check if each file exist in this template path\n            // If the file exists in local template, we can remove it from mother template package.\n            // Else, we must remove it from current package, and if it doesn't exist in mother template definition, we must add it.\n            // (and leave it in moter template definition if it already exists.)\n            foreach ($aSettings as $key => $sFileName) {\n                if (file_exists($this->path.$sFileName)) {\n                    Yii::app()->clientScript->removeFileFromPackage($this->oMotherTemplate->sPackageName, $sType, $sFileName);\n\n                } else {\n                    // File doesn't exist locally, so it should be removed\n                    $key = array_search($sFileName, $aSettings);\n                    //Yii::app()->clientScript->removeFileFromPackage($this->sPackageName, $sType, $sFileName);\n                    unset($aSettings[$key]);\n                    Yii::app()->clientScript->addFileToPackage($this->oMotherTemplate->sPackageName, $sType, $sFileName);\n                    /* Old way todo\n                        $oTemplate = $this->getTemplateForFile($sFileName, $this);\n                        if (!Yii::app()->clientScript->IsFileInPackage($oTemplate->sPackageName, $sType, $sFileName)) {\n                            Yii::app()->clientScript->addFileToPackage($oTemplate->sPackageName, $sType, $sFileName);\n                            unset($aSettings[$key]);\n                        }\n                    */\n                }\n            }\n        }\n\n        return $aSettings;\n    }\n\n    /**\n     * Proxy for Yii::app()->clientScript->removeFileFromPackage()\n     *\n     * @param string $sPackageName     string   name of the package to edit\n     * @param string $sType            string   the type of settings to change (css or js)\n     * @param $aSettings        array    array of local setting\n     * @return array\n     */\n    protected function removeFileFromPackage($sPackageName, $sType, $aSettings)\n    {\n        foreach ($aSettings as $sFile) {\n            Yii::app()->clientScript->removeFileFromPackage($sPackageName, $sType, $sFile);\n        }\n    }\n\n    /**\n     * Configure the mother template (and its mother templates)\n     * This is an object recursive call to TemplateConfiguration::prepareTemplateRendering()\n     */\n    protected function setMotherTemplates()\n    {\n        if (!empty($this->template->extends)) {\n            $sMotherTemplateName   = $this->template->extends;\n            $instance = TemplateConfiguration::getInstanceFromTemplateName($sMotherTemplateName);\n            $instance->template->checkTemplate();\n            $this->oMotherTemplate = $instance->prepareTemplateRendering($sMotherTemplateName, null);\n        }\n    }\n\n    /**\n     * @param TemplateConfiguration $oRTemplate\n     * @param string $sPath\n     */\n    protected function getTemplateForPath($oRTemplate, $sPath)\n    {\n        while (empty($oRTemplate->template->$sPath)) {\n            $oMotherTemplate = $oRTemplate->oMotherTemplate;\n            if (!($oMotherTemplate instanceof TemplateConfiguration)) {\n                //throw new Exception(\"can't find a template for template '{$oRTemplate->template_name}' for path '$sPath'.\");\n                TemplateConfiguration::uninstall($this->template_name);\n                Yii::app()->setFlashMessage(sprintf(gT(\"Theme '%s' has been uninstalled because it's not compatible with this LimeSurvey version.\"), $this->template_name), 'error');\n                Yii::app()->getController()->redirect(array(\"admin/themeoptions\"));\n                break;\n            }\n            $oRTemplate = $oMotherTemplate;\n        }\n        return $oRTemplate;\n    }\n\n    /**\n     * Set the default configuration values for the template, and use the motherTemplate value if needed\n     */\n    protected function setThisTemplate()\n    {\n\n        $this->apiVersion  = (!empty($this->template->api_version)) ? $this->template->api_version : null; // Mandtory setting in config XML\n        $this->viewPath    = $this->path.$this->getTemplateForPath($this, 'view_folder')->template->view_folder.DIRECTORY_SEPARATOR;\n        $this->filesPath   = $this->path.$this->getTemplateForPath($this, 'files_folder')->template->files_folder.DIRECTORY_SEPARATOR;\n\n        // Options are optional\n        $this->setOptions();\n\n        // Not mandatory (use package dependances)\n        $this->setCssFramework();\n        $this->packages = $this->getDependsPackages($this);\n        if (!empty($this->packages_to_load)) {\n            $templateToLoadPackages = json_decode($this->packages_to_load);\n            if (!empty($templateToLoadPackages->add)) {\n                $this->packages = array_merge($templateToLoadPackages->add, $this->getDependsPackages($this));\n            }\n\n            // TODO: the remove methode\n        }\n\n        // Add depend package according to packages\n        $this->depends = array_merge($this->depends, $this->packages);\n    }\n\n    private function setCssFramework()\n    {\n        if (!empty($this->cssframework_name)) {\n            $this->cssFramework = new \\stdClass();\n            $this->cssFramework->name = $this->cssframework_name;\n            $this->cssFramework->css  = json_decode($this->cssframework_css);\n            $this->cssFramework->js   = json_decode($this->cssframework_js);\n\n        } else {\n            $this->cssFramework = '';\n        }\n    }\n\n    protected function setOptions()\n    {\n        $this->oOptions = array();\n        if (!empty($this->options)) {\n            $this->oOptions = json_decode($this->options);\n        }\n\n        $this->setOptionInheritance();\n    }\n\n    protected function setOptionInheritance()\n    {\n        $oOptions = $this->oOptions;\n\n        if (!empty($oOptions)) {\n            foreach ($oOptions as $sKey => $sOption) {\n                    $oOptions->$sKey = $this->getOptionKey($sKey);\n            }\n        }\n    }\n\n    /**\n     * @param string $key\n     * @return mixed\n     */\n    protected function getOptionKey($key)\n    {\n        $aOptions = (array) json_decode($this->options);\n        if (isset($aOptions[$key])) {\n            $value = $aOptions[$key];\n            if ($value === 'inherit') {\n                return $this->getParentConfiguration()->getOptionKey($key);\n            }\n            return  $value;\n        } else {\n            return null;\n        }\n    }\n\n    protected function addMotherTemplatePackage($packages)\n    {\n        if (!empty($this->template->extends)) {\n            $sMotherTemplateName = (string) $this->template->extends;\n            $packages[]          = 'survey-template-'.$sMotherTemplateName;\n        }\n        return $packages;\n    }\n\n    /**\n     * Get the list of file replacement from Engine Framework\n     * @param string  $sType            css|js the type of file\n     * @param boolean $bInlcudeRemove   also get the files to remove\n     * @return array\n     */\n    protected function getFrameworkAssetsToReplace($sType, $bInlcudeRemove = false)\n    {\n        if (empty($this->aFrameworkAssetsToReplace)) {\n            $this->aFrameworkAssetsToReplace = array();\n        }\n\n        $this->aFrameworkAssetsToReplace[$sType] = array();\n\n        $sFieldName  = 'cssframework_'.$sType;\n        $aFieldValue = (array) json_decode($this->$sFieldName);\n\n        if (!empty($aFieldValue) && !empty($aFieldValue['replace'])) {\n            $this->aFrameworkAssetsToReplace[$sType] = (array) $aFieldValue['replace'];\n\n            // Inner field inheritance\n            foreach ($this->aFrameworkAssetsToReplace[$sType] as $key => $aFiles) {\n                foreach ($aFiles as $sReplacement) {\n                    if ($sReplacement == \"inherit\") {\n                        $aParentReplacement = $this->getParentConfiguration()->getFrameworkAssetsToReplace($sType);\n                        $this->aFrameworkAssetsToReplace[$sType][$key][1] = $aParentReplacement[$key][1];\n                    }\n                }\n            }\n\n            if ($bInlcudeRemove && isset($aFieldValue['remove'])) {\n                $this->aFrameworkAssetsToReplace[$sType] = array_merge($this->aFrameworkAssetsToReplace, (array) $aFieldValue['remove']);\n            }\n        }\n\n\n        return $this->aFrameworkAssetsToReplace[$sType];\n    }\n\n    /**\n     * Get the list of file replacement from Engine Framework\n     * @param string  $sType            css|js the type of file\n     * @return array\n     */\n    protected function getFrameworkAssetsReplacement($sType)\n    {\n        if (empty($this->aReplacements)) {\n            $this->aReplacements = array();\n        }\n        $this->aReplacements[$sType] = array();\n\n        $aFrameworkAssetsToReplace = $this->getFrameworkAssetsToReplace($sType);\n\n        foreach ($aFrameworkAssetsToReplace as $key => $aAsset) {\n            $aReplace = $aAsset[1];\n            $this->aReplacements[$sType][] = $aReplace;\n        }\n\n\n        return $this->aReplacements[$sType];\n    }\n\n\n    public function getParentConfiguration()\n    {\n        if (empty($this->oParentTemplate)) {\n\n            //check for surveygroup id if a survey is given\n            if ($this->sid != null) {\n                $oSurvey = Survey::model()->findByPk($this->sid);\n                $oParentTemplate = Template::getTemplateConfiguration($this->sTemplateName, null, $oSurvey->gsid);\n                if (is_a($oParentTemplate, 'TemplateConfiguration')) {\n                    $this->oParentTemplate = $oParentTemplate;\n                    $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n                    return $this->oParentTemplate;\n                }\n            }\n\n            //check for surveygroup id if a surveygroup is given\n            if ($this->sid == null && $this->gsid != null) {\n                $oSurveyGroup = SurveysGroups::model()->findByPk($this->gsid);\n                //Switch if the surveygroup inherits from a parent surveygroup\n                if ($oSurveyGroup != null && $oSurveyGroup->parent_id != 0) {\n                    $oParentTemplate = Template::getTemplateConfiguration($this->sTemplateName, null, $oSurveyGroup->parent_id);\n                    if (is_a($oParentTemplate, 'TemplateConfiguration')) {\n                        $this->oParentTemplate = $oParentTemplate;\n                        $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n                        return $this->oParentTemplate;\n                    }\n\n                }\n            }\n\n            //in the endcheck for general global template\n            $this->oParentTemplate = Template::getTemplateConfiguration($this->template_name, null, null);\n            $this->oParentTemplate->bUseMagicInherit = $this->bUseMagicInherit;\n            return $this->oParentTemplate;\n        }\n        return $this->oParentTemplate;\n    }\n\n\n    /**\n     * Change the template name inside the configuration entries (called from template editor)\n     * NOTE: all tests (like template exist, etc) are done from template controller.\n     *\n     * @param string $sOldName The old name of the template\n     * @param string $sNewName The newname of the template\n     */\n    public static function rename($sOldName, $sNewName)\n    {\n        self::model()->updateAll(array('template_name' => $sNewName), \"template_name = :oldname\", array(':oldname'=>$sOldName));\n    }\n\n\n    /**\n     * Proxy for the AR method to manage the inheritance\n     * If one of the field that can be inherited is set to \"inherit\", then it will return the value of its parent\n     * NOTE: this is recursive, if the parent field itself is set to inherit, then it will the value of the parent of the parent, etc\n     *\n     * @param string $name the name of the attribute\n     * @return mixed\n     */\n    public function __get($name)\n    {\n        $aAttributesThatCanBeInherited = array('files_css', 'files_js', 'options', 'cssframework_name', 'cssframework_css', 'cssframework_js', 'packages_to_load');\n\n        if (in_array($name, $aAttributesThatCanBeInherited) && $this->bUseMagicInherit) {\n            // Full inheritance of the whole field\n            $sAttribute = parent::__get($name);\n            if ($sAttribute === 'inherit') {\n                // NOTE: this is object recursive (if parent configuration field is set to inherit, then it will lead to this method again.)\n                $sAttribute = $this->getParentConfiguration()->$name;\n            }\n        } else {\n            $sAttribute = parent::__get($name);\n        }\n\n        return $sAttribute;\n    }\n\n}\n"], "filenames": ["application/controllers/admin/themeoptions.php", "application/models/TemplateConfiguration.php"], "buggy_code_start_loc": [236, 514], "buggy_code_end_loc": [271, 542], "fixing_code_start_loc": [236, 514], "fixing_code_end_loc": [272, 544], "type": "CWE-352", "message": "LimeSurvey version 3.0.0-beta.3+17110 contains a Cross ite Request Forgery (CSRF) vulnerability in Theme Uninstallation that can result in CSRF causing LimeSurvey admins to delete all their themes, rendering the website unusable. This attack appear to be exploitable via Simple HTML markup can be used to send a GET request to the affected endpoint.", "other": {"cve": {"id": "CVE-2018-1000053", "sourceIdentifier": "cve@mitre.org", "published": "2018-02-09T23:29:01.887", "lastModified": "2018-03-08T15:23:04.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "LimeSurvey version 3.0.0-beta.3+17110 contains a Cross ite Request Forgery (CSRF) vulnerability in Theme Uninstallation that can result in CSRF causing LimeSurvey admins to delete all their themes, rendering the website unusable. This attack appear to be exploitable via Simple HTML markup can be used to send a GET request to the affected endpoint."}, {"lang": "es", "value": "LimeSurvey 3.0.0-beta.3+17110 contiene una vulnerabilidad de Cross-Site Request Forgery (CSRF) en Theme Uninstallation que puede resultar en un CSRF que provoque que los administradores de LimeSurvey eliminen todos sus temas, lo que hace que el sitio web quede inutilizable. El ataque parece ser explotable mediante marcas HTML simples que pueden emplearse para enviar una petici\u00f3n GET al endpoint afectado."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:limesurvey:limesurvey:3.0.0:beta3:*:*:*:*:*:*", "matchCriteriaId": "830FC026-6A54-45E0-87D0-21AB8C693182"}]}]}], "references": [{"url": "https://github.com/LimeSurvey/LimeSurvey/commit/1e440208a8d8bfd71ad7802e6369a136e8bba3dd", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/LimeSurvey/LimeSurvey/commit/1e440208a8d8bfd71ad7802e6369a136e8bba3dd"}}