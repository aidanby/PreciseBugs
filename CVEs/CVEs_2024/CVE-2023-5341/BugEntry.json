{"buggy_code": ["/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%                            BBBB   M   M  PPPP                               %\n%                            B   B  MM MM  P   P                              %\n%                            BBBB   M M M  PPPP                               %\n%                            B   B  M   M  P                                  %\n%                            BBBB   M   M  P                                  %\n%                                                                             %\n%                                                                             %\n%             Read/Write Microsoft Windows Bitmap Image Format                %\n%                                                                             %\n%                              Software Design                                %\n%                                   Cristy                                    %\n%                            Glenn Randers-Pehrson                            %\n%                               December 2001                                 %\n%                                                                             %\n%                                                                             %\n%  Copyright @ 1999 ImageMagick Studio LLC, a non-profit organization         %\n%  dedicated to making software imaging solutions freely available.           %\n%                                                                             %\n%  You may not use this file except in compliance with the License.  You may  %\n%  obtain a copy of the License at                                            %\n%                                                                             %\n%    https://imagemagick.org/script/license.php                               %\n%                                                                             %\n%  Unless required by applicable law or agreed to in writing, software        %\n%  distributed under the License is distributed on an \"AS IS\" BASIS,          %\n%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %\n%  See the License for the specific language governing permissions and        %\n%  limitations under the License.                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%\n*/\n\f\n/*\n  Include declarations.\n*/\n#include \"MagickCore/studio.h\"\n#include \"MagickCore/blob.h\"\n#include \"MagickCore/blob-private.h\"\n#include \"MagickCore/cache.h\"\n#include \"MagickCore/colormap-private.h\"\n#include \"MagickCore/color-private.h\"\n#include \"MagickCore/colormap.h\"\n#include \"MagickCore/colorspace.h\"\n#include \"MagickCore/colorspace-private.h\"\n#include \"MagickCore/exception.h\"\n#include \"MagickCore/exception-private.h\"\n#include \"MagickCore/image.h\"\n#include \"MagickCore/image-private.h\"\n#include \"MagickCore/list.h\"\n#include \"MagickCore/log.h\"\n#include \"MagickCore/magick.h\"\n#include \"MagickCore/memory_.h\"\n#include \"MagickCore/monitor.h\"\n#include \"MagickCore/monitor-private.h\"\n#include \"MagickCore/option.h\"\n#include \"MagickCore/pixel-accessor.h\"\n#include \"MagickCore/profile.h\"\n#include \"MagickCore/quantum-private.h\"\n#include \"MagickCore/static.h\"\n#include \"MagickCore/string_.h\"\n#include \"MagickCore/module.h\"\n#include \"MagickCore/transform.h\"\n\f\n/*\n  Macro definitions (from Windows wingdi.h).\n*/\n#undef BI_JPEG\n#define BI_JPEG  4\n#undef BI_PNG\n#define BI_PNG  5\n#ifndef BI_ALPHABITFIELDS\n #define BI_ALPHABITFIELDS 6\n#endif\n#if !defined(MAGICKCORE_WINDOWS_SUPPORT) || defined(__MINGW32__)\n#undef BI_RGB\n#define BI_RGB  0\n#undef BI_RLE8\n#define BI_RLE8  1\n#undef BI_RLE4\n#define BI_RLE4  2\n#undef BI_BITFIELDS\n#define BI_BITFIELDS  3\n\n#undef LCS_CALIBRATED_RBG\n#define LCS_CALIBRATED_RBG  0\n#undef LCS_sRGB\n#define LCS_sRGB  1\n#undef LCS_WINDOWS_COLOR_SPACE\n#define LCS_WINDOWS_COLOR_SPACE  2\n#undef PROFILE_LINKED\n#define PROFILE_LINKED  3\n#undef PROFILE_EMBEDDED\n#define PROFILE_EMBEDDED  4\n\n#undef LCS_GM_BUSINESS\n#define LCS_GM_BUSINESS  1  /* Saturation */\n#undef LCS_GM_GRAPHICS\n#define LCS_GM_GRAPHICS  2  /* Relative */\n#undef LCS_GM_IMAGES\n#define LCS_GM_IMAGES  4  /* Perceptual */\n#undef LCS_GM_ABS_COLORIMETRIC\n#define LCS_GM_ABS_COLORIMETRIC  8  /* Absolute */\n#endif\n\f\n/*\n  Enumerated declarations.\n*/\ntypedef enum\n{\n  UndefinedSubtype,\n  RGB555,\n  RGB565,\n  ARGB4444,\n  ARGB1555\n} BMPSubtype;\n\n/*\n  Typedef declarations.\n*/\ntypedef struct _BMPInfo\n{\n  unsigned int\n    file_size,\n    ba_offset,\n    offset_bits,\n    size;\n\n  ssize_t\n    width,\n    height;\n\n  unsigned short\n    planes,\n    bits_per_pixel;\n\n  unsigned int\n    compression,\n    image_size,\n    x_pixels,\n    y_pixels,\n    number_colors,\n    red_mask,\n    green_mask,\n    blue_mask,\n    alpha_mask,\n    colors_important;\n\n  long\n    colorspace;\n\n  PrimaryInfo\n    red_primary,\n    green_primary,\n    blue_primary,\n    gamma_scale;\n} BMPInfo;\n\f\n/*\n  Forward declarations.\n*/\nstatic MagickBooleanType\n  WriteBMPImage(const ImageInfo *,Image *,ExceptionInfo *);\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   D e c o d e I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  DecodeImage unpacks the packed image pixels into runlength-encoded pixel\n%  packets.\n%\n%  The format of the DecodeImage method is:\n%\n%      MagickBooleanType DecodeImage(Image *image,const size_t compression,\n%        unsigned char *pixels,const size_t number_pixels)\n%\n%  A description of each parameter follows:\n%\n%    o image: the address of a structure of type Image.\n%\n%    o compression:  Zero means uncompressed.  A value of 1 means the\n%      compressed pixels are runlength encoded for a 256-color bitmap.\n%      A value of 2 means a 16-color bitmap.  A value of 3 means bitfields\n%      encoding.\n%\n%    o pixels:  The address of a byte (8 bits) array of pixel data created by\n%      the decoding process.\n%\n%    o number_pixels:  The number of pixels.\n%\n*/\nstatic MagickBooleanType DecodeImage(Image *image,const size_t compression,\n  unsigned char *pixels,const size_t number_pixels)\n{\n  int\n    byte,\n    count;\n\n  ssize_t\n    i,\n    x;\n\n  unsigned char\n    *p,\n    *q;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  assert(pixels != (unsigned char *) NULL);\n  if (IsEventLogging() != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  (void) memset(pixels,0,number_pixels*sizeof(*pixels));\n  byte=0;\n  x=0;\n  p=pixels;\n  q=pixels+number_pixels;\n  for (y=0; y < (ssize_t) image->rows; )\n  {\n    MagickBooleanType\n      status;\n\n    if ((p < pixels) || (p >= q))\n      break;\n    count=ReadBlobByte(image);\n    if (count == EOF)\n      break;\n    if (count > 0)\n      {\n        /*\n          Encoded mode.\n        */\n        count=(int) MagickMin((ssize_t) count,(ssize_t) (q-p));\n        byte=ReadBlobByte(image);\n        if (byte == EOF)\n          break;\n        if (compression == BI_RLE8)\n          {\n            for (i=0; i < (ssize_t) count; i++)\n              *p++=(unsigned char) byte;\n          }\n        else\n          {\n            for (i=0; i < (ssize_t) count; i++)\n              *p++=(unsigned char)\n                ((i & 0x01) != 0 ? (byte & 0x0f) : ((byte >> 4) & 0x0f));\n          }\n        x+=count;\n      }\n    else\n      {\n        /*\n          Escape mode.\n        */\n        count=ReadBlobByte(image);\n        if (count == EOF)\n          break;\n        if (count == 0x01)\n          break;\n        switch (count)\n        {\n          case 0x00:\n          {\n            /*\n              End of line.\n            */\n            x=0;\n            y++;\n            p=pixels+y*(ssize_t) image->columns;\n            break;\n          }\n          case 0x02:\n          {\n            /*\n              Delta mode.\n            */\n            byte=ReadBlobByte(image);\n            if (byte == EOF)\n              return(MagickFalse);\n            x+=byte;\n            byte=ReadBlobByte(image);\n            if (byte == EOF)\n              return(MagickFalse);\n            y+=byte;\n            p=pixels+y*(ssize_t) image->columns+x;\n            break;\n          }\n          default:\n          {\n            /*\n              Absolute mode.\n            */\n            count=(int) MagickMin((ssize_t) count,(ssize_t) (q-p));\n            if (count < 0)\n              break;\n            if (compression == BI_RLE8)\n              for (i=0; i < (ssize_t) count; i++)\n              {\n                byte=ReadBlobByte(image);\n                if (byte == EOF)\n                  break;\n                *p++=(unsigned char) byte;\n              }\n            else\n              for (i=0; i < (ssize_t) count; i++)\n              {\n                if ((i & 0x01) == 0)\n                  {\n                    byte=ReadBlobByte(image);\n                    if (byte == EOF)\n                      break;\n                  }\n                *p++=(unsigned char)\n                  ((i & 0x01) != 0 ? (byte & 0x0f) : ((byte >> 4) & 0x0f));\n              }\n            x+=count;\n            /*\n              Read pad byte.\n            */\n            if (compression == BI_RLE8)\n              {\n                if ((count & 0x01) != 0)\n                  if (ReadBlobByte(image) == EOF)\n                    break;\n              }\n            else\n              if (((count & 0x03) == 1) || ((count & 0x03) == 2))\n                if (ReadBlobByte(image) == EOF)\n                  break;\n            break;\n          }\n        }\n      }\n    status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,\n      image->rows);\n    if (status == MagickFalse)\n      break;\n  }\n  (void) ReadBlobByte(image);  /* end of line */\n  (void) ReadBlobByte(image);\n  return((q-pixels) < (ssize_t) number_pixels ? MagickFalse : MagickTrue);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   E n c o d e I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  EncodeImage compresses pixels using a runlength encoded format.\n%\n%  The format of the EncodeImage method is:\n%\n%    static MagickBooleanType EncodeImage(Image *image,\n%      const size_t bytes_per_line,const unsigned char *pixels,\n%      unsigned char *compressed_pixels)\n%\n%  A description of each parameter follows:\n%\n%    o image:  The image.\n%\n%    o bytes_per_line: the number of bytes in a scanline of compressed pixels\n%\n%    o pixels:  The address of a byte (8 bits) array of pixel data created by\n%      the compression process.\n%\n%    o compressed_pixels:  The address of a byte (8 bits) array of compressed\n%      pixel data.\n%\n*/\nstatic size_t EncodeImage(Image *image,const size_t bytes_per_line,\n  const unsigned char *pixels,unsigned char *compressed_pixels)\n{\n  MagickBooleanType\n    status;\n\n  const unsigned char\n    *p;\n\n  ssize_t\n    i,\n    x;\n\n  unsigned char\n    *q;\n\n  ssize_t\n    y;\n\n  /*\n    Runlength encode pixels.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  assert(pixels != (const unsigned char *) NULL);\n  assert(compressed_pixels != (unsigned char *) NULL);\n  if (IsEventLogging() != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  p=pixels;\n  q=compressed_pixels;\n  i=0;\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    for (x=0; x < (ssize_t) bytes_per_line; x+=i)\n    {\n      /*\n        Determine runlength.\n      */\n      for (i=1; ((x+i) < (ssize_t) bytes_per_line); i++)\n        if ((i == 255) || (*(p+i) != *p))\n          break;\n      *q++=(unsigned char) i;\n      *q++=(*p);\n      p+=i;\n    }\n    /*\n      End of line.\n    */\n    *q++=(unsigned char) 0x00;\n    *q++=(unsigned char) 0x00;\n    status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n      image->rows);\n    if (status == MagickFalse)\n      break;\n  }\n  /*\n    End of bitmap.\n  */\n  *q++=(unsigned char) 0x00;\n  *q++=(unsigned char) 0x01;\n  return((size_t) (q-compressed_pixels));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   I s B M P                                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  IsBMP() returns MagickTrue if the image format type, identified by the\n%  magick string, is BMP.\n%\n%  The format of the IsBMP method is:\n%\n%      MagickBooleanType IsBMP(const unsigned char *magick,const size_t length)\n%\n%  A description of each parameter follows:\n%\n%    o magick: compare image format pattern against these bytes.\n%\n%    o length: Specifies the length of the magick string.\n%\n*/\nstatic MagickBooleanType IsBMP(const unsigned char *magick,const size_t length)\n{\n  if (length < 2)\n    return(MagickFalse);\n  if ((LocaleNCompare((char *) magick,\"BA\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"BM\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"IC\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"PI\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"CI\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"CP\",2) == 0))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e a d B M P I m a g e                                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ReadBMPImage() reads a Microsoft Windows bitmap image file, Version\n%  2, 3 (for Windows or NT), or 4, and  returns it.  It allocates the memory\n%  necessary for the new Image structure and returns a pointer to the new\n%  image.\n%\n%  The format of the ReadBMPImage method is:\n%\n%      image=ReadBMPImage(image_info)\n%\n%  A description of each parameter follows:\n%\n%    o image_info: the image info.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic Image *ReadEmbedImage(const ImageInfo *image_info,Image *image,\n  const char *magick,ExceptionInfo *exception)\n{\n  const void\n    *stream;\n\n  Image\n    *embed_image;\n\n  ImageInfo\n    *embed_info;\n\n  MemoryInfo\n    *pixel_info;\n\n  size_t\n    length;\n\n  ssize_t\n    count;\n\n  unsigned char\n    *pixels;\n\n  /*\n    Read embedded image.\n  */\n  length=(size_t) ((MagickOffsetType) GetBlobSize(image)-TellBlob(image));\n  pixel_info=AcquireVirtualMemory(length,sizeof(*pixels));\n  if (pixel_info == (MemoryInfo *) NULL)\n    ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n  pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n  stream=ReadBlobStream(image,length,pixels,&count);\n  if (count != (ssize_t) length)\n    {\n      pixel_info=RelinquishVirtualMemory(pixel_info);\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    }\n  embed_info=AcquireImageInfo();\n  (void) FormatLocaleString(embed_info->filename,MagickPathExtent,\n    \"%s:%s\",magick,image_info->filename);\n  embed_image=BlobToImage(embed_info,stream,(size_t) count,exception);\n  embed_info=DestroyImageInfo(embed_info);\n  pixel_info=RelinquishVirtualMemory(pixel_info);\n  (void) CloseBlob(image);\n  if (embed_image != (Image *) NULL)\n    {\n      (void) CopyMagickString(embed_image->filename,image->filename,\n        MagickPathExtent);\n      (void) CopyMagickString(embed_image->magick_filename,\n        image->magick_filename,MagickPathExtent);\n      (void) CopyMagickString(embed_image->magick,image->magick,\n        MagickPathExtent);\n    }\n  return(embed_image);\n}\n\nstatic Image *ReadBMPImage(const ImageInfo *image_info,ExceptionInfo *exception)\n{\n  BMPInfo\n    bmp_info;\n\n  Image\n    *image;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    offset,\n    profile_data,\n    profile_size,\n    start_position;\n\n  MagickSizeType\n    blob_size;\n\n  MemoryInfo\n    *pixel_info;\n\n  Quantum\n    index,\n    *q;\n\n  size_t\n    bit,\n    bytes_per_line,\n    length;\n\n  ssize_t\n    count,\n    i,\n    x,\n    y;\n\n  unsigned char\n    magick[12],\n    *p,\n    *pixels;\n\n  unsigned int\n    blue,\n    green,\n    offset_bits,\n    red;\n\n  /*\n    Open image file.\n  */\n  assert(image_info != (const ImageInfo *) NULL);\n  assert(image_info->signature == MagickCoreSignature);\n  if (IsEventLogging() != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      image_info->filename);\n  assert(exception != (ExceptionInfo *) NULL);\n  assert(exception->signature == MagickCoreSignature);\n  image=AcquireImage(image_info,exception);\n  status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);\n  if (status == MagickFalse)\n    {\n      image=DestroyImageList(image);\n      return((Image *) NULL);\n    }\n  /*\n    Determine if this a BMP file.\n  */\n  (void) memset(&bmp_info,0,sizeof(bmp_info));\n  bmp_info.ba_offset=0;\n  start_position=0;\n  offset_bits=0;\n  count=ReadBlob(image,2,magick);\n  if (count != 2)\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n  blob_size=GetBlobSize(image);\n  do\n  {\n    PixelInfo\n      quantum_bits;\n\n    PixelPacket\n      shift;\n\n    /*\n      Verify BMP identifier.\n    */\n    start_position=TellBlob(image)-2;\n    bmp_info.ba_offset=0;\n    while (LocaleNCompare((char *) magick,\"BA\",2) == 0)\n    {\n      bmp_info.file_size=ReadBlobLSBLong(image);\n      bmp_info.ba_offset=ReadBlobLSBLong(image);\n      bmp_info.offset_bits=ReadBlobLSBLong(image);\n      count=ReadBlob(image,2,magick);\n      if (count != 2)\n        break;\n    }\n    if (image->debug != MagickFalse)\n      (void) LogMagickEvent(CoderEvent,GetMagickModule(),\"  Magick: %c%c\",\n        magick[0],magick[1]);\n    if ((count != 2) || ((LocaleNCompare((char *) magick,\"BM\",2) != 0) &&\n        (LocaleNCompare((char *) magick,\"CI\",2) != 0)))\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    bmp_info.file_size=ReadBlobLSBLong(image);\n    (void) ReadBlobLSBLong(image);\n    bmp_info.offset_bits=ReadBlobLSBLong(image);\n    bmp_info.size=ReadBlobLSBLong(image);\n    if (image->debug != MagickFalse)\n      (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n        \"  BMP header size: %u\",bmp_info.size);\n    if (LocaleNCompare((char *) magick,\"CI\",2) == 0)\n      {\n        if ((bmp_info.size != 12) && (bmp_info.size != 40) &&\n            (bmp_info.size != 64))\n          ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n      }\n    if (bmp_info.size > 124)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    if (bmp_info.offset_bits < bmp_info.size)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    bmp_info.offset_bits=MagickMax(14+bmp_info.size,bmp_info.offset_bits);\n    profile_data=0;\n    profile_size=0;\n    if (bmp_info.size == 12)\n      {\n        /*\n          OS/2 BMP image file.\n        */\n        (void) CopyMagickString(image->magick,\"BMP2\",MagickPathExtent);\n        bmp_info.width=(ssize_t) ((short) ReadBlobLSBShort(image));\n        bmp_info.height=(ssize_t) ((short) ReadBlobLSBShort(image));\n        bmp_info.planes=ReadBlobLSBShort(image);\n        bmp_info.bits_per_pixel=ReadBlobLSBShort(image);\n        bmp_info.x_pixels=0;\n        bmp_info.y_pixels=0;\n        bmp_info.number_colors=0;\n        bmp_info.compression=BI_RGB;\n        bmp_info.image_size=0;\n        bmp_info.alpha_mask=0;\n        if (image->debug != MagickFalse)\n          {\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Format: OS/2 Bitmap\");\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Geometry: %.20gx%.20g\",(double) bmp_info.width,(double)\n              bmp_info.height);\n          }\n      }\n    else\n      {\n        /*\n          Microsoft Windows BMP image file.\n        */\n        if (bmp_info.size < 40)\n          ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n        bmp_info.width=(ssize_t) ReadBlobLSBSignedLong(image);\n        bmp_info.height=(ssize_t) ReadBlobLSBSignedLong(image);\n        bmp_info.planes=ReadBlobLSBShort(image);\n        bmp_info.bits_per_pixel=ReadBlobLSBShort(image);\n        bmp_info.compression=ReadBlobLSBLong(image);\n        if (bmp_info.size > 16)\n          {\n            bmp_info.image_size=ReadBlobLSBLong(image);\n            bmp_info.x_pixels=ReadBlobLSBLong(image);\n            bmp_info.y_pixels=ReadBlobLSBLong(image);\n            bmp_info.number_colors=ReadBlobLSBLong(image);\n            if ((MagickSizeType) bmp_info.number_colors > blob_size)\n              ThrowReaderException(CorruptImageError,\n                \"InsufficientImageDataInFile\");\n            bmp_info.colors_important=ReadBlobLSBLong(image);\n          }\n        if (image->debug != MagickFalse)\n          {\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Format: MS Windows bitmap\");\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Geometry: %.20gx%.20g\",(double) bmp_info.width,(double)\n              bmp_info.height);\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Bits per pixel: %.20g\",(double) bmp_info.bits_per_pixel);\n            switch (bmp_info.compression)\n            {\n              case BI_RGB:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_RGB\");\n                break;\n              }\n              case BI_RLE4:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_RLE4\");\n                break;\n              }\n              case BI_RLE8:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_RLE8\");\n                break;\n              }\n              case BI_BITFIELDS:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_BITFIELDS\");\n                break;\n              }\n              case BI_ALPHABITFIELDS:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_ALPHABITFIELDS\");\n                break;\n              }\n              case BI_PNG:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_PNG\");\n                break;\n              }\n              case BI_JPEG:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_JPEG\");\n                break;\n              }\n              default:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: UNKNOWN (%u)\",bmp_info.compression);\n              }\n            }\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Number of colors: %u\",bmp_info.number_colors);\n          }\n        if ((bmp_info.size > 40) || (bmp_info.compression == BI_BITFIELDS) ||\n            (bmp_info.compression == BI_ALPHABITFIELDS))\n\n          {\n            bmp_info.red_mask=ReadBlobLSBLong(image);\n            bmp_info.green_mask=ReadBlobLSBLong(image);\n            bmp_info.blue_mask=ReadBlobLSBLong(image);\n            if (bmp_info.compression == BI_ALPHABITFIELDS)\n              bmp_info.alpha_mask=ReadBlobLSBLong(image);\n          }\n        if (bmp_info.size > 40)\n          {\n            double\n              gamma;\n\n            /*\n              Read color management information.\n            */\n            bmp_info.alpha_mask=ReadBlobLSBLong(image);\n            bmp_info.colorspace=ReadBlobLSBSignedLong(image);\n            /*\n              Decode 2^30 fixed point formatted CIE primaries.\n            */\n#           define BMP_DENOM ((double) 0x40000000)\n            bmp_info.red_primary.x=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.red_primary.y=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.red_primary.z=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.green_primary.x=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.green_primary.y=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.green_primary.z=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.blue_primary.x=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.blue_primary.y=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.blue_primary.z=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n\n            gamma=bmp_info.red_primary.x+bmp_info.red_primary.y+\n              bmp_info.red_primary.z;\n            gamma=PerceptibleReciprocal(gamma);\n            bmp_info.red_primary.x*=gamma;\n            bmp_info.red_primary.y*=gamma;\n\n            gamma=bmp_info.green_primary.x+bmp_info.green_primary.y+\n              bmp_info.green_primary.z;\n            gamma=PerceptibleReciprocal(gamma);\n            bmp_info.green_primary.x*=gamma;\n            bmp_info.green_primary.y*=gamma;\n\n            gamma=bmp_info.blue_primary.x+bmp_info.blue_primary.y+\n              bmp_info.blue_primary.z;\n            gamma=PerceptibleReciprocal(gamma);\n            bmp_info.blue_primary.x*=gamma;\n            bmp_info.blue_primary.y*=gamma;\n\n            /*\n              Decode 16^16 fixed point formatted gamma_scales.\n            */\n            bmp_info.gamma_scale.x=(double) ReadBlobLSBLong(image)/0x10000;\n            bmp_info.gamma_scale.y=(double) ReadBlobLSBLong(image)/0x10000;\n            bmp_info.gamma_scale.z=(double) ReadBlobLSBLong(image)/0x10000;\n\n            if (bmp_info.colorspace == 0)\n              {\n                image->chromaticity.red_primary.x=bmp_info.red_primary.x;\n                image->chromaticity.red_primary.y=bmp_info.red_primary.y;\n                image->chromaticity.green_primary.x=bmp_info.green_primary.x;\n                image->chromaticity.green_primary.y=bmp_info.green_primary.y;\n                image->chromaticity.blue_primary.x=bmp_info.blue_primary.x;\n                image->chromaticity.blue_primary.y=bmp_info.blue_primary.y;\n                /*\n                  Compute a single gamma from the BMP 3-channel gamma.\n                */\n                image->gamma=(bmp_info.gamma_scale.x+bmp_info.gamma_scale.y+\n                  bmp_info.gamma_scale.z)/3.0;\n              }\n          }\n        else\n          (void) CopyMagickString(image->magick,\"BMP3\",MagickPathExtent);\n\n        if (bmp_info.size > 108)\n          {\n            size_t\n              intent;\n\n            /*\n              Read BMP Version 5 color management information.\n            */\n            intent=ReadBlobLSBLong(image);\n            switch ((int) intent)\n            {\n              case LCS_GM_BUSINESS:\n              {\n                image->rendering_intent=SaturationIntent;\n                break;\n              }\n              case LCS_GM_GRAPHICS:\n              {\n                image->rendering_intent=RelativeIntent;\n                break;\n              }\n              case LCS_GM_IMAGES:\n              {\n                image->rendering_intent=PerceptualIntent;\n                break;\n              }\n              case LCS_GM_ABS_COLORIMETRIC:\n              {\n                image->rendering_intent=AbsoluteIntent;\n                break;\n              }\n            }\n            profile_data=(MagickOffsetType) ReadBlobLSBLong(image);\n            profile_size=(MagickOffsetType) ReadBlobLSBLong(image);\n            (void) ReadBlobLSBLong(image);  /* Reserved byte */\n          }\n      }\n    if ((MagickSizeType) bmp_info.file_size != blob_size)\n      {\n        const char\n          *option;\n\n        option=GetImageOption(image_info,\"bmp:ignore-filesize\");\n        if (IsStringTrue(option) == MagickFalse)\n          (void) ThrowMagickException(exception,GetMagickModule(),\n            CorruptImageError,\"LengthAndFilesizeDoNotMatch\",\"`%s'\",\n            image->filename);\n      }\n    if (bmp_info.width <= 0)\n      ThrowReaderException(CorruptImageError,\"NegativeOrZeroImageSize\");\n    if (bmp_info.height == 0)\n      ThrowReaderException(CorruptImageError,\"NegativeOrZeroImageSize\");\n    if (bmp_info.compression == BI_JPEG)\n      {\n        /*\n          Read embedded JPEG image.\n        */\n        Image *embed_image = ReadEmbedImage(image_info,image,\"jpeg\",exception);\n        (void) CloseBlob(image);\n        image=DestroyImageList(image);\n        return(embed_image);\n      }\n    if (bmp_info.compression == BI_PNG)\n      {\n        /*\n          Read embedded PNG image.\n        */\n        Image *embed_image = ReadEmbedImage(image_info,image,\"png\",exception);\n        (void) CloseBlob(image);\n        image=DestroyImageList(image);\n        return(embed_image);\n      }\n    if (bmp_info.planes != 1)\n      ThrowReaderException(CorruptImageError,\"StaticPlanesValueNotEqualToOne\");\n    if ((bmp_info.bits_per_pixel != 1) && (bmp_info.bits_per_pixel != 4) &&\n        (bmp_info.bits_per_pixel != 8) && (bmp_info.bits_per_pixel != 16) &&\n        (bmp_info.bits_per_pixel != 24) && (bmp_info.bits_per_pixel != 32))\n      ThrowReaderException(CorruptImageError,\"UnsupportedBitsPerPixel\");\n    if (bmp_info.bits_per_pixel < 16 &&\n        bmp_info.number_colors > (1U << bmp_info.bits_per_pixel))\n      ThrowReaderException(CorruptImageError,\"UnrecognizedNumberOfColors\");\n    if ((bmp_info.compression == BI_RLE8) && (bmp_info.bits_per_pixel != 8))\n      ThrowReaderException(CorruptImageError,\"UnsupportedBitsPerPixel\");\n    if ((bmp_info.compression == BI_RLE4) && (bmp_info.bits_per_pixel != 4))\n      ThrowReaderException(CorruptImageError,\"UnsupportedBitsPerPixel\");\n    if ((bmp_info.compression == BI_BITFIELDS) && (bmp_info.bits_per_pixel < 16))\n      ThrowReaderException(CorruptImageError,\"UnsupportedBitsPerPixel\");\n    switch (bmp_info.compression)\n    {\n      case BI_RGB:\n        image->compression=NoCompression;\n        break;\n      case BI_RLE8:\n      case BI_RLE4:\n        image->compression=RLECompression;\n        break;\n      case BI_BITFIELDS:\n        break;\n      case BI_ALPHABITFIELDS:\n        break;\n      case BI_JPEG:\n        ThrowReaderException(CoderError,\"JPEGCompressNotSupported\");\n      case BI_PNG:\n        ThrowReaderException(CoderError,\"PNGCompressNotSupported\");\n      default:\n        ThrowReaderException(CorruptImageError,\"UnrecognizedImageCompression\");\n    }\n    image->columns=(size_t) MagickAbsoluteValue(bmp_info.width);\n    image->rows=(size_t) MagickAbsoluteValue(bmp_info.height);\n    image->depth=bmp_info.bits_per_pixel <= 8 ? bmp_info.bits_per_pixel : 8;\n    image->alpha_trait=((bmp_info.alpha_mask != 0) &&\n      (bmp_info.compression == BI_BITFIELDS)) ? BlendPixelTrait :\n      UndefinedPixelTrait;\n    if (bmp_info.bits_per_pixel < 16)\n      {\n        size_t\n          one;\n\n        image->storage_class=PseudoClass;\n        image->colors=bmp_info.number_colors;\n        one=1;\n        if (image->colors == 0)\n          image->colors=one << bmp_info.bits_per_pixel;\n      }\n    image->resolution.x=(double) bmp_info.x_pixels/100.0;\n    image->resolution.y=(double) bmp_info.y_pixels/100.0;\n    image->units=PixelsPerCentimeterResolution;\n    if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))\n      if (image->scene >= (image_info->scene+image_info->number_scenes-1))\n        break;\n    status=SetImageExtent(image,image->columns,image->rows,exception);\n    if (status == MagickFalse)\n      return(DestroyImageList(image));\n    if (image->storage_class == PseudoClass)\n      {\n        unsigned char\n          *bmp_colormap;\n\n        size_t\n          packet_size;\n\n        /*\n          Read BMP raster colormap.\n        */\n        if (image->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"  Reading colormap of %.20g colors\",(double) image->colors);\n        if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        bmp_colormap=(unsigned char *) AcquireQuantumMemory((size_t)\n          image->colors,4*sizeof(*bmp_colormap));\n        if (bmp_colormap == (unsigned char *) NULL)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        if ((bmp_info.size == 12) || (bmp_info.size == 64))\n          packet_size=3;\n        else\n          packet_size=4;\n        offset=SeekBlob(image,start_position+14+bmp_info.size,SEEK_SET);\n        if (offset < 0)\n          {\n            bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);\n            ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n          }\n        count=ReadBlob(image,packet_size*image->colors,bmp_colormap);\n        if (count != (ssize_t) (packet_size*image->colors))\n          {\n            bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);\n            ThrowReaderException(CorruptImageError,\n              \"InsufficientImageDataInFile\");\n          }\n        p=bmp_colormap;\n        for (i=0; i < (ssize_t) image->colors; i++)\n        {\n          image->colormap[i].blue=(MagickRealType) ScaleCharToQuantum(*p++);\n          image->colormap[i].green=(MagickRealType) ScaleCharToQuantum(*p++);\n          image->colormap[i].red=(MagickRealType) ScaleCharToQuantum(*p++);\n          if (packet_size == 4)\n            p++;\n        }\n        bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);\n      }\n    /*\n      Read image data.\n    */\n    if (bmp_info.offset_bits == offset_bits)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    offset_bits=bmp_info.offset_bits;\n    offset=SeekBlob(image,start_position+bmp_info.offset_bits,SEEK_SET);\n    if (offset < 0)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    if (bmp_info.compression == BI_RLE4)\n      bmp_info.bits_per_pixel<<=1;\n    bytes_per_line=4*((image->columns*bmp_info.bits_per_pixel+31)/32);\n    length=(size_t) bytes_per_line*image->rows;\n    if ((MagickSizeType) (length/256) > blob_size)\n      ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");\n    if ((bmp_info.compression == BI_RGB) ||\n        (bmp_info.compression == BI_BITFIELDS) ||\n        (bmp_info.compression == BI_ALPHABITFIELDS))\n      {\n        pixel_info=AcquireVirtualMemory(image->rows,\n          MagickMax(bytes_per_line,image->columns+256UL)*sizeof(*pixels));\n        if (pixel_info == (MemoryInfo *) NULL)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n        if (image->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"  Reading pixels (%.20g bytes)\",(double) length);\n        count=ReadBlob(image,length,pixels);\n        if (count != (ssize_t) length)\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\n              \"InsufficientImageDataInFile\");\n          }\n      }\n    else\n      {\n        /*\n          Convert run-length encoded raster pixels.\n        */\n        pixel_info=AcquireVirtualMemory(image->rows,\n          MagickMax(bytes_per_line,image->columns+256UL)*sizeof(*pixels));\n        if (pixel_info == (MemoryInfo *) NULL)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n        status=DecodeImage(image,bmp_info.compression,pixels,\n          image->columns*image->rows);\n        if (status == MagickFalse)\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\n              \"UnableToRunlengthDecodeImage\");\n          }\n      }\n    /*\n      Convert BMP raster image to pixel packets.\n    */\n    if (bmp_info.compression == BI_RGB)\n      {\n        /*\n          We should ignore the alpha value in BMP3 files but there have been\n          reports about 32 bit files with alpha. We do a quick check to see if\n          the alpha channel contains a value that is not zero (default value).\n          If we find a non zero value we assume the program that wrote the file\n          wants to use the alpha channel.\n        */\n        if (((image->alpha_trait & BlendPixelTrait) == 0) &&\n            (bmp_info.size == 40) && (bmp_info.bits_per_pixel == 32))\n          {\n            bytes_per_line=4*(image->columns);\n            for (y=(ssize_t) image->rows-1; y >= 0; y--)\n            {\n              p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n              for (x=0; x < (ssize_t) image->columns; x++)\n              {\n                if (*(p+3) != 0)\n                  {\n                    image->alpha_trait=BlendPixelTrait;\n                    y=-1;\n                    break;\n                  }\n                p+=4;\n              }\n            }\n          }\n        bmp_info.alpha_mask=image->alpha_trait != UndefinedPixelTrait ?\n          0xff000000U : 0U;\n        bmp_info.red_mask=0x00ff0000U;\n        bmp_info.green_mask=0x0000ff00U;\n        bmp_info.blue_mask=0x000000ffU;\n        if (bmp_info.bits_per_pixel == 16)\n          {\n            /*\n              RGB555.\n            */\n            bmp_info.red_mask=0x00007c00U;\n            bmp_info.green_mask=0x000003e0U;\n            bmp_info.blue_mask=0x0000001fU;\n          }\n      }\n    (void) memset(&shift,0,sizeof(shift));\n    (void) memset(&quantum_bits,0,sizeof(quantum_bits));\n    if ((bmp_info.bits_per_pixel == 16) || (bmp_info.bits_per_pixel == 32))\n      {\n        unsigned int\n          sample;\n\n        /*\n          Get shift and quantum bits info from bitfield masks.\n        */\n        if (bmp_info.red_mask != 0)\n          while (((bmp_info.red_mask << shift.red) & 0x80000000UL) == 0)\n          {\n            shift.red++;\n            if (shift.red >= 32U)\n              break;\n          }\n        if (bmp_info.green_mask != 0)\n          while (((bmp_info.green_mask << shift.green) & 0x80000000UL) == 0)\n          {\n            shift.green++;\n            if (shift.green >= 32U)\n              break;\n          }\n        if (bmp_info.blue_mask != 0)\n          while (((bmp_info.blue_mask << shift.blue) & 0x80000000UL) == 0)\n          {\n            shift.blue++;\n            if (shift.blue >= 32U)\n              break;\n          }\n        if (bmp_info.alpha_mask != 0)\n          while (((bmp_info.alpha_mask << shift.alpha) & 0x80000000UL) == 0)\n          {\n            shift.alpha++;\n            if (shift.alpha >= 32U)\n              break;\n          }\n        sample=shift.red;\n        while (((bmp_info.red_mask << sample) & 0x80000000UL) != 0)\n        {\n          sample++;\n          if (sample >= 32U)\n            break;\n        }\n        quantum_bits.red=(MagickRealType) (sample-shift.red);\n        sample=shift.green;\n        while (((bmp_info.green_mask << sample) & 0x80000000UL) != 0)\n        {\n          sample++;\n          if (sample >= 32U)\n            break;\n        }\n        quantum_bits.green=(MagickRealType) (sample-shift.green);\n        sample=shift.blue;\n        while (((bmp_info.blue_mask << sample) & 0x80000000UL) != 0)\n        {\n          sample++;\n          if (sample >= 32U)\n            break;\n        }\n        quantum_bits.blue=(MagickRealType) (sample-shift.blue);\n        sample=shift.alpha;\n        while (((bmp_info.alpha_mask << sample) & 0x80000000UL) != 0)\n        {\n          sample++;\n          if (sample >= 32U)\n            break;\n        }\n        quantum_bits.alpha=(MagickRealType) (sample-shift.alpha);\n      }\n    switch (bmp_info.bits_per_pixel)\n    {\n      case 1:\n      {\n        /*\n          Convert bitmap scanline.\n        */\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < ((ssize_t) image->columns-7); x+=8)\n          {\n            for (bit=0; bit < 8; bit++)\n            {\n              index=(Quantum) (((*p) & (0x80 >> bit)) != 0 ? 0x01 : 0x00);\n              SetPixelIndex(image,index,q);\n              q+=GetPixelChannels(image);\n            }\n            p++;\n          }\n          if ((image->columns % 8) != 0)\n            {\n              for (bit=0; bit < (image->columns % 8); bit++)\n              {\n                index=(Quantum) (((*p) & (0x80 >> bit)) != 0 ? 0x01 : 0x00);\n                SetPixelIndex(image,index,q);\n                q+=GetPixelChannels(image);\n              }\n              p++;\n            }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        (void) SyncImage(image,exception);\n        break;\n      }\n      case 4:\n      {\n        /*\n          Convert PseudoColor scanline.\n        */\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < ((ssize_t) image->columns-1); x+=2)\n          {\n            ValidateColormapValue(image,(ssize_t) ((*p >> 4) & 0x0f),&index,\n              exception);\n            SetPixelIndex(image,index,q);\n            q+=GetPixelChannels(image);\n            ValidateColormapValue(image,(ssize_t) (*p & 0x0f),&index,exception);\n            SetPixelIndex(image,index,q);\n            q+=GetPixelChannels(image);\n            p++;\n          }\n          if ((image->columns % 2) != 0)\n            {\n              ValidateColormapValue(image,(ssize_t) ((*p >> 4) & 0xf),&index,\n                exception);\n              SetPixelIndex(image,index,q);\n              q+=GetPixelChannels(image);\n              p++;\n              x++;\n            }\n          if (x < (ssize_t) image->columns)\n            break;\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        (void) SyncImage(image,exception);\n        break;\n      }\n      case 8:\n      {\n        /*\n          Convert PseudoColor scanline.\n        */\n        if ((bmp_info.compression == BI_RLE8) ||\n            (bmp_info.compression == BI_RLE4))\n          bytes_per_line=image->columns;\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=(ssize_t) image->columns; x != 0; --x)\n          {\n            ValidateColormapValue(image,(ssize_t) *p++,&index,exception);\n            SetPixelIndex(image,index,q);\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          offset=((MagickOffsetType) image->rows-y-1);\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        (void) SyncImage(image,exception);\n        break;\n      }\n      case 16:\n      {\n        unsigned int\n          alpha,\n          pixel;\n\n        /*\n          Convert bitfield encoded 16-bit PseudoColor scanline.\n        */\n        if ((bmp_info.compression != BI_RGB) &&\n            (bmp_info.compression != BI_BITFIELDS))\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\n              \"UnrecognizedImageCompression\");\n          }\n        bytes_per_line=2*(image->columns+image->columns % 2);\n        image->storage_class=DirectClass;\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            pixel=(unsigned int) (*p++);\n            pixel|=(unsigned int) (*p++) << 8;\n            red=((pixel & bmp_info.red_mask) << shift.red) >> 16;\n            if (quantum_bits.red == 5)\n              red|=((red & 0xe000) >> 5);\n            if (quantum_bits.red <= 8)\n              red|=((red & 0xff00) >> 8);\n            green=((pixel & bmp_info.green_mask) << shift.green) >> 16;\n            if (quantum_bits.green == 5)\n              green|=((green & 0xe000) >> 5);\n            if (quantum_bits.green == 6)\n              green|=((green & 0xc000) >> 6);\n            if (quantum_bits.green <= 8)\n              green|=((green & 0xff00) >> 8);\n            blue=((pixel & bmp_info.blue_mask) << shift.blue) >> 16;\n            if (quantum_bits.blue == 5)\n              blue|=((blue & 0xe000) >> 5);\n            if (quantum_bits.blue <= 8)\n              blue|=((blue & 0xff00) >> 8);\n            SetPixelRed(image,ScaleShortToQuantum((unsigned short) red),q);\n            SetPixelGreen(image,ScaleShortToQuantum((unsigned short) green),q);\n            SetPixelBlue(image,ScaleShortToQuantum((unsigned short) blue),q);\n            SetPixelAlpha(image,OpaqueAlpha,q);\n            if (image->alpha_trait != UndefinedPixelTrait)\n              {\n                alpha=((pixel & bmp_info.alpha_mask) << shift.alpha) >> 16;\n                if (quantum_bits.alpha <= 8)\n                  alpha|=((alpha & 0xff00) >> 8);\n                SetPixelAlpha(image,ScaleShortToQuantum(\n                  (unsigned short) alpha),q);\n              }\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          offset=((MagickOffsetType) image->rows-y-1);\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 24:\n      {\n        /*\n          Convert DirectColor scanline.\n        */\n        bytes_per_line=4*((image->columns*24+31)/32);\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            SetPixelBlue(image,ScaleCharToQuantum(*p++),q);\n            SetPixelGreen(image,ScaleCharToQuantum(*p++),q);\n            SetPixelRed(image,ScaleCharToQuantum(*p++),q);\n            SetPixelAlpha(image,OpaqueAlpha,q);\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          offset=((MagickOffsetType) image->rows-y-1);\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 32:\n      {\n        /*\n          Convert bitfield encoded DirectColor scanline.\n        */\n        if ((bmp_info.compression != BI_RGB) &&\n            (bmp_info.compression != BI_BITFIELDS))\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\n              \"UnrecognizedImageCompression\");\n          }\n        bytes_per_line=4*(image->columns);\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          unsigned int\n            alpha,\n            pixel;\n\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            pixel=(unsigned int) (*p++);\n            pixel|=((unsigned int) *p++ << 8);\n            pixel|=((unsigned int) *p++ << 16);\n            pixel|=((unsigned int) *p++ << 24);\n            red=((pixel & bmp_info.red_mask) << shift.red) >> 16;\n            if (quantum_bits.red == 8)\n              red|=(red >> 8);\n            green=((pixel & bmp_info.green_mask) << shift.green) >> 16;\n            if (quantum_bits.green == 8)\n              green|=(green >> 8);\n            blue=((pixel & bmp_info.blue_mask) << shift.blue) >> 16;\n            if (quantum_bits.blue == 8)\n              blue|=(blue >> 8);\n            SetPixelRed(image,ScaleShortToQuantum((unsigned short) red),q);\n            SetPixelGreen(image,ScaleShortToQuantum((unsigned short) green),q);\n            SetPixelBlue(image,ScaleShortToQuantum((unsigned short) blue),q);\n            SetPixelAlpha(image,OpaqueAlpha,q);\n            if (image->alpha_trait != UndefinedPixelTrait)\n              {\n                alpha=((pixel & bmp_info.alpha_mask) << shift.alpha) >> 16;\n                if (quantum_bits.alpha == 8)\n                  alpha|=(alpha >> 8);\n                SetPixelAlpha(image,ScaleShortToQuantum(\n                  (unsigned short) alpha),q);\n              }\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          offset=((MagickOffsetType) image->rows-y-1);\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      default:\n      {\n        pixel_info=RelinquishVirtualMemory(pixel_info);\n        ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n      }\n    }\n    pixel_info=RelinquishVirtualMemory(pixel_info);\n    if (y > 0)\n      break;\n    if (EOFBlob(image) != MagickFalse)\n      {\n        ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",\n          image->filename);\n        break;\n      }\n    if (bmp_info.height < 0)\n      {\n        Image\n          *flipped_image;\n\n        /*\n          Correct image orientation.\n        */\n        flipped_image=FlipImage(image,exception);\n        if (flipped_image != (Image *) NULL)\n          {\n            DuplicateBlob(flipped_image,image);\n            ReplaceImageInList(&image, flipped_image);\n            image=flipped_image;\n          }\n      }\n    /*\n      Read embedded ICC profile\n    */\n    if ((bmp_info.colorspace == 0x4D424544L) && (profile_data > 0) &&\n        (profile_size > 0))\n      {\n        StringInfo\n          *profile;\n\n        unsigned char\n          *datum;\n\n        offset=start_position+14+profile_data;\n        if ((offset < TellBlob(image)) ||\n            (SeekBlob(image,offset,SEEK_SET) != offset) ||\n            (blob_size < (MagickSizeType) (offset+profile_size)))\n          ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n        profile=AcquireStringInfo((size_t) profile_size);\n        if (profile == (StringInfo *) NULL)\n          ThrowReaderException(CorruptImageError,\"MemoryAllocationFailed\");\n        datum=GetStringInfoDatum(profile);\n        if (ReadBlob(image,(size_t) profile_size,datum) == (ssize_t) profile_size)\n          {\n            MagickOffsetType\n              profile_size_orig;\n\n            /*\n             Trimming padded bytes.\n            */\n            profile_size_orig=(MagickOffsetType) datum[0] << 24;\n            profile_size_orig|=(MagickOffsetType) datum[1] << 16;\n            profile_size_orig|=(MagickOffsetType) datum[2] << 8;\n            profile_size_orig|=(MagickOffsetType) datum[3];\n            if (profile_size_orig < profile_size)\n              SetStringInfoLength(profile,(size_t) profile_size_orig);\n            if (image->debug != MagickFalse)\n              (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                \"Profile: ICC, %u bytes\",(unsigned int) profile_size_orig);\n            (void) SetImageProfile(image,\"icc\",profile,exception);\n          }\n        profile=DestroyStringInfo(profile);\n      }\n    /*\n      Proceed to next image.\n    */\n    if (image_info->number_scenes != 0)\n      if (image->scene >= (image_info->scene+image_info->number_scenes-1))\n        break;\n    offset=(MagickOffsetType) bmp_info.ba_offset;\n    if (offset != 0)\n      if ((offset < TellBlob(image)) ||\n          (SeekBlob(image,offset,SEEK_SET) != offset))\n        ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    *magick='\\0';\n    count=ReadBlob(image,2,magick);\n    if ((count == 2) && (IsBMP(magick,2) != MagickFalse))\n      {\n        /*\n          Acquire next image structure.\n        */\n        AcquireNextImage(image_info,image,exception);\n        if (GetNextImageInList(image) == (Image *) NULL)\n          {\n            status=MagickFalse;\n            break;\n          }\n        image=SyncNextImageInList(image);\n        status=SetImageProgress(image,LoadImagesTag,TellBlob(image),blob_size);\n        if (status == MagickFalse)\n          break;\n      }\n  } while (IsBMP(magick,2) != MagickFalse);\n  (void) CloseBlob(image);\n  if (status == MagickFalse)\n    return(DestroyImageList(image));\n  return(GetFirstImageInList(image));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e g i s t e r B M P I m a g e                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RegisterBMPImage() adds attributes for the BMP image format to\n%  the list of supported formats.  The attributes include the image format\n%  tag, a method to read and/or write the format, whether the format\n%  supports the saving of more than one frame to the same file or blob,\n%  whether the format supports native in-memory I/O, and a brief\n%  description of the format.\n%\n%  The format of the RegisterBMPImage method is:\n%\n%      size_t RegisterBMPImage(void)\n%\n*/\nModuleExport size_t RegisterBMPImage(void)\n{\n  MagickInfo\n    *entry;\n\n  entry=AcquireMagickInfo(\"BMP\",\"BMP\",\"Microsoft Windows bitmap image\");\n  entry->decoder=(DecodeImageHandler *) ReadBMPImage;\n  entry->encoder=(EncodeImageHandler *) WriteBMPImage;\n  entry->magick=(IsImageFormatHandler *) IsBMP;\n  entry->flags^=CoderAdjoinFlag;\n  entry->flags|=CoderDecoderSeekableStreamFlag;\n  entry->mime_type=ConstantString(\"image/bmp\");\n  (void) RegisterMagickInfo(entry);\n  entry=AcquireMagickInfo(\"BMP\",\"BMP2\",\"Microsoft Windows bitmap image (V2)\");\n  entry->decoder=(DecodeImageHandler *) ReadBMPImage;\n  entry->encoder=(EncodeImageHandler *) WriteBMPImage;\n  entry->magick=(IsImageFormatHandler *) IsBMP;\n  entry->flags^=CoderAdjoinFlag;\n  entry->flags|=CoderDecoderSeekableStreamFlag;\n  entry->mime_type=ConstantString(\"image/bmp\");\n  (void) RegisterMagickInfo(entry);\n  entry=AcquireMagickInfo(\"BMP\",\"BMP3\",\"Microsoft Windows bitmap image (V3)\");\n  entry->decoder=(DecodeImageHandler *) ReadBMPImage;\n  entry->encoder=(EncodeImageHandler *) WriteBMPImage;\n  entry->magick=(IsImageFormatHandler *) IsBMP;\n  entry->flags^=CoderAdjoinFlag;\n  entry->flags|=CoderDecoderSeekableStreamFlag;\n  entry->mime_type=ConstantString(\"image/bmp\");\n  (void) RegisterMagickInfo(entry);\n  return(MagickImageCoderSignature);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   U n r e g i s t e r B M P I m a g e                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  UnregisterBMPImage() removes format registrations made by the\n%  BMP module from the list of supported formats.\n%\n%  The format of the UnregisterBMPImage method is:\n%\n%      UnregisterBMPImage(void)\n%\n*/\nModuleExport void UnregisterBMPImage(void)\n{\n  (void) UnregisterMagickInfo(\"BMP\");\n  (void) UnregisterMagickInfo(\"BMP2\");\n  (void) UnregisterMagickInfo(\"BMP3\");\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   W r i t e B M P I m a g e                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  WriteBMPImage() writes an image in Microsoft Windows bitmap encoded\n%  image format, version 3 for Windows or (if the image has a matte channel)\n%  version 4.\n%\n%  The format of the WriteBMPImage method is:\n%\n%      MagickBooleanType WriteBMPImage(const ImageInfo *image_info,\n%        Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows.\n%\n%    o image_info: the image info.\n%\n%    o image:  The image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nstatic MagickBooleanType WriteBMPImage(const ImageInfo *image_info,Image *image,\n  ExceptionInfo *exception)\n{\n  BMPInfo\n    bmp_info;\n\n  BMPSubtype\n    bmp_subtype;\n\n  const char\n    *option;\n\n  const Quantum\n    *p;\n\n  const StringInfo\n    *profile;\n\n  MagickBooleanType\n    have_color_info,\n    status;\n\n  MagickOffsetType\n    profile_data,\n    profile_size,\n    profile_size_pad,\n    scene;\n\n  MemoryInfo\n    *pixel_info;\n\n  size_t\n    bytes_per_line,\n    number_scenes,\n    type;\n\n  ssize_t\n    i,\n    x,\n    y;\n\n  unsigned char\n    *bmp_data,\n    *pixels,\n    *q;\n\n  /*\n    Open output image file.\n  */\n  assert(image_info != (const ImageInfo *) NULL);\n  assert(image_info->signature == MagickCoreSignature);\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  assert(exception != (ExceptionInfo *) NULL);\n  assert(exception->signature == MagickCoreSignature);\n  if (IsEventLogging() != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);\n  if (status == MagickFalse)\n    return(status);\n  if (((image->columns << 3) != (size_t) ((int) (image->columns << 3))) ||\n      ((image->rows << 3) != (size_t) ((int) (image->rows << 3))))\n    ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");\n  type=4;\n  if (LocaleCompare(image_info->magick,\"BMP2\") == 0)\n    type=2;\n  else\n    if (LocaleCompare(image_info->magick,\"BMP3\") == 0)\n      type=3;\n  option=GetImageOption(image_info,\"bmp:format\");\n  if (option != (char *) NULL)\n    {\n      (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n          \"  Format=%s\",option);\n      if (LocaleCompare(option,\"bmp2\") == 0)\n        type=2;\n      if (LocaleCompare(option,\"bmp3\") == 0)\n        type=3;\n      if (LocaleCompare(option,\"bmp4\") == 0)\n        type=4;\n    }\n  scene=0;\n  number_scenes=GetImageListLength(image);\n  do\n  {\n    /*\n      Initialize BMP raster file header.\n    */\n    if (IssRGBCompatibleColorspace(image->colorspace) == MagickFalse)\n      (void) TransformImageColorspace(image,sRGBColorspace,exception);\n    (void) memset(&bmp_info,0,sizeof(bmp_info));\n    bmp_info.file_size=14+12;\n    if (type > 2)\n      bmp_info.file_size+=28;\n    bmp_info.offset_bits=bmp_info.file_size;\n    bmp_info.compression=BI_RGB;\n    bmp_info.red_mask=0x00ff0000U;\n    bmp_info.green_mask=0x0000ff00U;\n    bmp_info.blue_mask=0x000000ffU;\n    bmp_info.alpha_mask=0xff000000U;\n    bmp_subtype=UndefinedSubtype;\n    if ((image->storage_class == PseudoClass) && (image->colors > 256))\n      (void) SetImageStorageClass(image,DirectClass,exception);\n    if (image->storage_class != DirectClass)\n      {\n        /*\n          Colormapped BMP raster.\n        */\n        bmp_info.bits_per_pixel=8;\n        if (image->colors <= 2)\n          bmp_info.bits_per_pixel=1;\n        else\n          if (image->colors <= 16)\n            bmp_info.bits_per_pixel=4;\n          else\n            if (image->colors <= 256)\n              bmp_info.bits_per_pixel=8;\n        if (image_info->compression == RLECompression)\n          bmp_info.bits_per_pixel=8;\n        bmp_info.number_colors=1U << bmp_info.bits_per_pixel;\n        if (image->alpha_trait != UndefinedPixelTrait)\n          (void) SetImageStorageClass(image,DirectClass,exception);\n        else\n          if ((size_t) bmp_info.number_colors < image->colors)\n            (void) SetImageStorageClass(image,DirectClass,exception);\n          else\n            {\n              bmp_info.file_size+=3*(1UL << bmp_info.bits_per_pixel);\n              bmp_info.offset_bits+=3*(1UL << bmp_info.bits_per_pixel);\n              if (type > 2)\n                {\n                  bmp_info.file_size+=(1UL << bmp_info.bits_per_pixel);\n                  bmp_info.offset_bits+=(1UL << bmp_info.bits_per_pixel);\n                }\n            }\n      }\n    if (image->storage_class == DirectClass)\n      {\n        /*\n          Full color BMP raster.\n        */\n        bmp_info.number_colors=0;\n        option=GetImageOption(image_info,\"bmp:subtype\");\n        if (option != (const char *) NULL)\n        {\n          if (image->alpha_trait != UndefinedPixelTrait)\n            {\n              if (LocaleNCompare(option,\"ARGB4444\",8) == 0)\n                {\n                  bmp_subtype=ARGB4444;\n                  bmp_info.red_mask=0x00000f00U;\n                  bmp_info.green_mask=0x000000f0U;\n                  bmp_info.blue_mask=0x0000000fU;\n                  bmp_info.alpha_mask=0x0000f000U;\n                }\n              else if (LocaleNCompare(option,\"ARGB1555\",8) == 0)\n                {\n                  bmp_subtype=ARGB1555;\n                  bmp_info.red_mask=0x00007c00U;\n                  bmp_info.green_mask=0x000003e0U;\n                  bmp_info.blue_mask=0x0000001fU;\n                  bmp_info.alpha_mask=0x00008000U;\n                }\n            }\n          else\n          {\n            if (LocaleNCompare(option,\"RGB555\",6) == 0)\n              {\n                bmp_subtype=RGB555;\n                bmp_info.red_mask=0x00007c00U;\n                bmp_info.green_mask=0x000003e0U;\n                bmp_info.blue_mask=0x0000001fU;\n                bmp_info.alpha_mask=0U;\n              }\n            else if (LocaleNCompare(option,\"RGB565\",6) == 0)\n              {\n                bmp_subtype=RGB565;\n                bmp_info.red_mask=0x0000f800U;\n                bmp_info.green_mask=0x000007e0U;\n                bmp_info.blue_mask=0x0000001fU;\n                bmp_info.alpha_mask=0U;\n              }\n          }\n        }\n        if (bmp_subtype != UndefinedSubtype)\n          {\n            bmp_info.bits_per_pixel=16;\n            bmp_info.compression=BI_BITFIELDS;\n          }\n        else\n          {\n            bmp_info.bits_per_pixel=(unsigned short) ((type > 3) &&\n               (image->alpha_trait != UndefinedPixelTrait) ? 32 : 24);\n            bmp_info.compression=(unsigned int) ((type > 3) &&\n              (image->alpha_trait != UndefinedPixelTrait) ? BI_BITFIELDS : BI_RGB);\n            if ((type == 3) && (image->alpha_trait != UndefinedPixelTrait))\n              {\n                option=GetImageOption(image_info,\"bmp3:alpha\");\n                if (IsStringTrue(option))\n                  bmp_info.bits_per_pixel=32;\n              }\n          }\n      }\n    bytes_per_line=4*((image->columns*bmp_info.bits_per_pixel+31)/32);\n    bmp_info.ba_offset=0;\n    profile=GetImageProfile(image,\"icc\");\n    have_color_info=(image->rendering_intent != UndefinedIntent) ||\n      (profile != (StringInfo *) NULL) || (image->gamma != 0.0) ?  MagickTrue :\n      MagickFalse;\n    if (type == 2)\n      bmp_info.size=12;\n    else\n      if ((type == 3) || (((image->alpha_trait & BlendPixelTrait) == 0) &&\n          (have_color_info == MagickFalse)))\n        {\n          type=3;\n          bmp_info.size=40;\n        }\n      else\n        {\n          int\n            extra_size;\n\n          bmp_info.size=108;\n          extra_size=68;\n          if ((image->rendering_intent != UndefinedIntent) ||\n              (profile != (StringInfo *) NULL))\n            {\n              bmp_info.size=124;\n              extra_size+=16;\n            }\n          bmp_info.file_size+=(unsigned int) extra_size;\n          bmp_info.offset_bits+=(unsigned int) extra_size;\n        }\n    if (((ssize_t) image->columns != (ssize_t) ((signed int) image->columns)) ||\n        ((ssize_t) image->rows != (ssize_t) ((signed int) image->rows)))\n      ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");\n    bmp_info.width=(ssize_t) image->columns;\n    bmp_info.height=(ssize_t) image->rows;\n    bmp_info.planes=1;\n    bmp_info.image_size=(unsigned int) (bytes_per_line*image->rows);\n    bmp_info.file_size+=bmp_info.image_size;\n    bmp_info.x_pixels=75*39;\n    bmp_info.y_pixels=75*39;\n    switch (image->units)\n    {\n      case UndefinedResolution:\n      case PixelsPerInchResolution:\n      {\n        bmp_info.x_pixels=(unsigned int) (100.0*image->resolution.x/2.54);\n        bmp_info.y_pixels=(unsigned int) (100.0*image->resolution.y/2.54);\n        break;\n      }\n      case PixelsPerCentimeterResolution:\n      {\n        bmp_info.x_pixels=(unsigned int) (100.0*image->resolution.x);\n        bmp_info.y_pixels=(unsigned int) (100.0*image->resolution.y);\n        break;\n      }\n    }\n    bmp_info.colors_important=bmp_info.number_colors;\n    /*\n      Convert MIFF to BMP raster pixels.\n    */\n    pixel_info=AcquireVirtualMemory(image->rows,MagickMax(bytes_per_line,\n      image->columns+256UL)*sizeof(*pixels));\n    if (pixel_info == (MemoryInfo *) NULL)\n      ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\n    pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n    (void) memset(pixels,0,(size_t) bmp_info.image_size);\n    switch (bmp_info.bits_per_pixel)\n    {\n      case 1:\n      {\n        size_t\n          bit,\n          byte;\n\n        /*\n          Convert PseudoClass image to a BMP monochrome image.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          ssize_t\n            offset;\n\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          bit=0;\n          byte=0;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            byte<<=1;\n            byte|=(size_t) (GetPixelIndex(image,p) != 0 ? 0x01 : 0x00);\n            bit++;\n            if (bit == 8)\n              {\n                *q++=(unsigned char) byte;\n                bit=0;\n                byte=0;\n              }\n             p+=GetPixelChannels(image);\n           }\n           if (bit != 0)\n             {\n               *q++=(unsigned char) (byte << (8-bit));\n               x++;\n             }\n          offset=(ssize_t) (image->columns+7)/8;\n          for (x=offset; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 4:\n      {\n        unsigned int\n          byte,\n          nibble;\n\n        ssize_t\n          offset;\n\n        /*\n          Convert PseudoClass image to a BMP monochrome image.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          nibble=0;\n          byte=0;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            byte<<=4;\n            byte|=((unsigned int) GetPixelIndex(image,p) & 0x0f);\n            nibble++;\n            if (nibble == 2)\n              {\n                *q++=(unsigned char) byte;\n                nibble=0;\n                byte=0;\n              }\n            p+=GetPixelChannels(image);\n          }\n          if (nibble != 0)\n            {\n              *q++=(unsigned char) (byte << 4);\n              x++;\n            }\n          offset=(ssize_t) (image->columns+1)/2;\n          for (x=offset; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 8:\n      {\n        /*\n          Convert PseudoClass packet to BMP pixel.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            *q++=(unsigned char) ((ssize_t) GetPixelIndex(image,p));\n            p+=GetPixelChannels(image);\n          }\n          for ( ; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 16:\n      {\n        /*\n          Convert DirectClass packet to BMP BGR888.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            unsigned short\n              pixel;\n\n            pixel=0;\n            if (bmp_subtype == ARGB4444)\n              {\n                pixel=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelAlpha(image,p),15) << 12);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelRed(image,p),15) << 8);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelGreen(image,p),15) << 4);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelBlue(image,p),15));\n              }\n            else if (bmp_subtype == RGB565)\n              {\n                pixel=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelRed(image,p),31) << 11);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelGreen(image,p),63) << 5);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelBlue(image,p),31));\n              }\n            else\n              {\n                if (bmp_subtype == ARGB1555)\n                  pixel=(unsigned short) (ScaleQuantumToAny(\n                    GetPixelAlpha(image,p),1) << 15);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelRed(image,p),31) << 10);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelGreen(image,p),31) << 5);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelBlue(image,p),31));\n              }\n            *((unsigned short *) q)=pixel;\n            q+=2;\n            p+=GetPixelChannels(image);\n          }\n          for (x=2L*(ssize_t) image->columns; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 24:\n      {\n        /*\n          Convert DirectClass packet to BMP BGR888.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            *q++=ScaleQuantumToChar(GetPixelBlue(image,p));\n            *q++=ScaleQuantumToChar(GetPixelGreen(image,p));\n            *q++=ScaleQuantumToChar(GetPixelRed(image,p));\n            p+=GetPixelChannels(image);\n          }\n          for (x=3L*(ssize_t) image->columns; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 32:\n      {\n        /*\n          Convert DirectClass packet to ARGB8888 pixel.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            Quantum alpha=GetPixelAlpha(image,p);\n            if (type == 3 && alpha == TransparentAlpha)\n              {\n                *q++=255;\n                *q++=255;\n                *q++=255;\n              }\n            else\n              {\n                *q++=ScaleQuantumToChar(GetPixelBlue(image,p));\n                *q++=ScaleQuantumToChar(GetPixelGreen(image,p));\n                *q++=ScaleQuantumToChar(GetPixelRed(image,p));\n              }\n            *q++=ScaleQuantumToChar(alpha);\n            p+=GetPixelChannels(image);\n          }\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n    }\n    if ((type > 2) && (bmp_info.bits_per_pixel == 8))\n      if (image_info->compression != NoCompression)\n        {\n          MemoryInfo\n            *rle_info;\n\n          /*\n            Convert run-length encoded raster pixels.\n          */\n          rle_info=AcquireVirtualMemory((size_t) (2*(bytes_per_line+2)+2),\n            (image->rows+2)*sizeof(*pixels));\n          if (rle_info == (MemoryInfo *) NULL)\n            {\n              pixel_info=RelinquishVirtualMemory(pixel_info);\n              ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\n            }\n          bmp_data=(unsigned char *) GetVirtualMemoryBlob(rle_info);\n          bmp_info.file_size-=bmp_info.image_size;\n          bmp_info.image_size=(unsigned int) EncodeImage(image,bytes_per_line,\n            pixels,bmp_data);\n          bmp_info.file_size+=bmp_info.image_size;\n          pixel_info=RelinquishVirtualMemory(pixel_info);\n          pixel_info=rle_info;\n          pixels=bmp_data;\n          bmp_info.compression=BI_RLE8;\n        }\n    /*\n      Write BMP for Windows, all versions, 14-byte header.\n    */\n    if (image->debug != MagickFalse)\n      {\n        (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n          \"   Writing BMP version %.20g datastream\",(double) type);\n        if (image->storage_class == DirectClass)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Storage class=DirectClass\");\n        else\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Storage class=PseudoClass\");\n        (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n          \"   Image depth=%.20g\",(double) image->depth);\n        if (image->alpha_trait != UndefinedPixelTrait)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Matte=True\");\n        else\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Matte=MagickFalse\");\n        (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n          \"   BMP bits_per_pixel=%.20g\",(double) bmp_info.bits_per_pixel);\n        switch ((int) bmp_info.compression)\n        {\n           case BI_RGB:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=BI_RGB\");\n             break;\n           }\n           case BI_RLE8:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=BI_RLE8\");\n             break;\n           }\n           case BI_BITFIELDS:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=BI_BITFIELDS\");\n             break;\n           }\n           case BI_ALPHABITFIELDS:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=BI_BITFIELDS\");\n             break;\n           }\n           default:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=UNKNOWN (%u)\",bmp_info.compression);\n             break;\n           }\n        }\n        if (bmp_info.number_colors == 0)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Number_colors=unspecified\");\n        else\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Number_colors=%u\",bmp_info.number_colors);\n      }\n    profile_data=0;\n    profile_size=0;\n    profile_size_pad=0;\n    if (profile != (StringInfo *) NULL)\n      {\n        profile_data=(MagickOffsetType) bmp_info.file_size-14;  /* from head of BMP info header */\n        profile_size=(MagickOffsetType) GetStringInfoLength(profile);\n        if ((profile_size % 4) > 0)\n          profile_size_pad=4-(profile_size%4);\n        bmp_info.file_size+=profile_size+profile_size_pad;\n      }\n    (void) WriteBlob(image,2,(unsigned char *) \"BM\");\n    (void) WriteBlobLSBLong(image,bmp_info.file_size);\n    (void) WriteBlobLSBLong(image,bmp_info.ba_offset);  /* always 0 */\n    (void) WriteBlobLSBLong(image,bmp_info.offset_bits);\n    if (type == 2)\n      {\n        /*\n          Write 12-byte version 2 bitmap header.\n        */\n        (void) WriteBlobLSBLong(image,bmp_info.size);\n        (void) WriteBlobLSBSignedShort(image,(signed short) bmp_info.width);\n        (void) WriteBlobLSBSignedShort(image,(signed short) bmp_info.height);\n        (void) WriteBlobLSBShort(image,bmp_info.planes);\n        (void) WriteBlobLSBShort(image,bmp_info.bits_per_pixel);\n      }\n    else\n      {\n        /*\n          Write 40-byte version 3+ bitmap header.\n        */\n        (void) WriteBlobLSBLong(image,bmp_info.size);\n        (void) WriteBlobLSBSignedLong(image,(signed int) bmp_info.width);\n        (void) WriteBlobLSBSignedLong(image,(signed int) bmp_info.height);\n        (void) WriteBlobLSBShort(image,bmp_info.planes);\n        (void) WriteBlobLSBShort(image,bmp_info.bits_per_pixel);\n        (void) WriteBlobLSBLong(image,bmp_info.compression);\n        (void) WriteBlobLSBLong(image,bmp_info.image_size);\n        (void) WriteBlobLSBLong(image,bmp_info.x_pixels);\n        (void) WriteBlobLSBLong(image,bmp_info.y_pixels);\n        (void) WriteBlobLSBLong(image,bmp_info.number_colors);\n        (void) WriteBlobLSBLong(image,bmp_info.colors_important);\n      }\n    if ((type > 3) && ((image->alpha_trait != UndefinedPixelTrait) ||\n        (have_color_info != MagickFalse)))\n      {\n        /*\n          Write the rest of the 108-byte BMP Version 4 header.\n        */\n        (void) WriteBlobLSBLong(image,bmp_info.red_mask);\n        (void) WriteBlobLSBLong(image,bmp_info.green_mask);\n        (void) WriteBlobLSBLong(image,bmp_info.blue_mask);\n        (void) WriteBlobLSBLong(image,bmp_info.alpha_mask);\n        if (profile != (StringInfo *) NULL)\n          (void) WriteBlobLSBLong(image,0x4D424544U);  /* PROFILE_EMBEDDED */\n        else\n          (void) WriteBlobLSBLong(image,0x73524742U);  /* sRGB */\n\n        /* bounds check, assign .0 if invalid value */\n        if (isgreater(image->chromaticity.red_primary.x, 1.0) ||\n            !isgreater(image->chromaticity.red_primary.x, 0.0))\n          image->chromaticity.red_primary.x = 0.0;\n        if (isgreater(image->chromaticity.red_primary.y, 1.0) ||\n            !isgreater(image->chromaticity.red_primary.y, 0.0))\n          image->chromaticity.red_primary.y = 0.0;\n        if (isgreater(image->chromaticity.green_primary.x, 1.0) ||\n            !isgreater(image->chromaticity.green_primary.x, 0.0))\n          image->chromaticity.green_primary.x = 0.0;\n        if (isgreater(image->chromaticity.green_primary.y, 1.0) ||\n            !isgreater(image->chromaticity.green_primary.y, 0.0))\n          image->chromaticity.green_primary.y = 0.0;\n        if (isgreater(image->chromaticity.blue_primary.x, 1.0) ||\n            !isgreater(image->chromaticity.blue_primary.x, 0.0))\n          image->chromaticity.blue_primary.x = 0.0;\n        if (isgreater(image->chromaticity.blue_primary.y, 1.0) ||\n            !isgreater(image->chromaticity.blue_primary.y, 0.0))\n          image->chromaticity.blue_primary.y = 0.0;\n        if (isgreater(bmp_info.gamma_scale.x, 1.0) ||\n            !isgreater(bmp_info.gamma_scale.x, 0.0))\n          bmp_info.gamma_scale.x = 0.0;\n        if (isgreater(bmp_info.gamma_scale.y, 1.0) ||\n            !isgreater(bmp_info.gamma_scale.y, 0.0))\n          bmp_info.gamma_scale.y = 0.0;\n        if (isgreater(bmp_info.gamma_scale.z, 1.0) ||\n            !isgreater(bmp_info.gamma_scale.z, 0.0))\n          bmp_info.gamma_scale.z = 0.0;\n\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.red_primary.x*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.red_primary.y*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          ((1.000-(image->chromaticity.red_primary.x+\n          image->chromaticity.red_primary.y))*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.green_primary.x*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.green_primary.y*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          ((1.000-(image->chromaticity.green_primary.x+\n          image->chromaticity.green_primary.y))*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.blue_primary.x*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.blue_primary.y*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          ((1.000-(image->chromaticity.blue_primary.x+\n          image->chromaticity.blue_primary.y))*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (bmp_info.gamma_scale.x*0x10000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (bmp_info.gamma_scale.y*0x10000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (bmp_info.gamma_scale.z*0x10000));\n        if ((image->rendering_intent != UndefinedIntent) ||\n            (profile != (StringInfo *) NULL))\n          {\n            ssize_t\n              intent;\n\n            switch ((int) image->rendering_intent)\n            {\n              case SaturationIntent:\n              {\n                intent=LCS_GM_BUSINESS;\n                break;\n              }\n              case RelativeIntent:\n              {\n                intent=LCS_GM_GRAPHICS;\n                break;\n              }\n              case PerceptualIntent:\n              {\n                intent=LCS_GM_IMAGES;\n                break;\n              }\n              case AbsoluteIntent:\n              {\n                intent=LCS_GM_ABS_COLORIMETRIC;\n                break;\n              }\n              default:\n              {\n                intent=0;\n                break;\n              }\n            }\n            (void) WriteBlobLSBLong(image,(unsigned int) intent);\n            (void) WriteBlobLSBLong(image,(unsigned int) profile_data);\n            (void) WriteBlobLSBLong(image,(unsigned int)\n              (profile_size+profile_size_pad));\n            (void) WriteBlobLSBLong(image,0x00);  /* reserved */\n          }\n      }\n    if (image->storage_class == PseudoClass)\n      {\n        unsigned char\n          *bmp_colormap;\n\n        /*\n          Dump colormap to file.\n        */\n        if (image->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"  Colormap: %.20g entries\",(double) image->colors);\n        bmp_colormap=(unsigned char *) AcquireQuantumMemory((size_t) 1UL <<\n          bmp_info.bits_per_pixel,4*sizeof(*bmp_colormap));\n        if (bmp_colormap == (unsigned char *) NULL)\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\n          }\n        q=bmp_colormap;\n        for (i=0; i < MagickMin((ssize_t) image->colors,(ssize_t) bmp_info.number_colors); i++)\n        {\n          *q++=ScaleQuantumToChar(ClampToQuantum(image->colormap[i].blue));\n          *q++=ScaleQuantumToChar(ClampToQuantum(image->colormap[i].green));\n          *q++=ScaleQuantumToChar(ClampToQuantum(image->colormap[i].red));\n          if (type > 2)\n            *q++=(unsigned char) 0x0;\n        }\n        for ( ; i < (ssize_t) 1UL << bmp_info.bits_per_pixel; i++)\n        {\n          *q++=(unsigned char) 0x00;\n          *q++=(unsigned char) 0x00;\n          *q++=(unsigned char) 0x00;\n          if (type > 2)\n            *q++=(unsigned char) 0x00;\n        }\n        if (type <= 2)\n          (void) WriteBlob(image,(size_t) (3*(1L << bmp_info.bits_per_pixel)),\n            bmp_colormap);\n        else\n          (void) WriteBlob(image,(size_t) (4*(1L << bmp_info.bits_per_pixel)),\n            bmp_colormap);\n        bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);\n      }\n    if (image->debug != MagickFalse)\n      (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n        \"  Pixels:  %u bytes\",bmp_info.image_size);\n    (void) WriteBlob(image,(size_t) bmp_info.image_size,pixels);\n    if (profile != (StringInfo *) NULL)\n      {\n        if (image->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"  Profile:  %g bytes\",(double) profile_size+profile_size_pad);\n        (void) WriteBlob(image,(size_t) profile_size,\n          GetStringInfoDatum(profile));\n        if (profile_size_pad > 0)  /* padding for 4 bytes multiple */\n          (void) WriteBlob(image,(size_t) profile_size_pad,\"\\0\\0\\0\");\n      }\n    pixel_info=RelinquishVirtualMemory(pixel_info);\n    if (GetNextImageInList(image) == (Image *) NULL)\n      break;\n    image=SyncNextImageInList(image);\n    status=SetImageProgress(image,SaveImagesTag,scene++,number_scenes);\n    if (status == MagickFalse)\n      break;\n  } while (image_info->adjoin != MagickFalse);\n  (void) CloseBlob(image);\n  return(MagickTrue);\n}\n"], "fixing_code": ["/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%                            BBBB   M   M  PPPP                               %\n%                            B   B  MM MM  P   P                              %\n%                            BBBB   M M M  PPPP                               %\n%                            B   B  M   M  P                                  %\n%                            BBBB   M   M  P                                  %\n%                                                                             %\n%                                                                             %\n%             Read/Write Microsoft Windows Bitmap Image Format                %\n%                                                                             %\n%                              Software Design                                %\n%                                   Cristy                                    %\n%                            Glenn Randers-Pehrson                            %\n%                               December 2001                                 %\n%                                                                             %\n%                                                                             %\n%  Copyright @ 1999 ImageMagick Studio LLC, a non-profit organization         %\n%  dedicated to making software imaging solutions freely available.           %\n%                                                                             %\n%  You may not use this file except in compliance with the License.  You may  %\n%  obtain a copy of the License at                                            %\n%                                                                             %\n%    https://imagemagick.org/script/license.php                               %\n%                                                                             %\n%  Unless required by applicable law or agreed to in writing, software        %\n%  distributed under the License is distributed on an \"AS IS\" BASIS,          %\n%  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.   %\n%  See the License for the specific language governing permissions and        %\n%  limitations under the License.                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%\n*/\n\f\n/*\n  Include declarations.\n*/\n#include \"MagickCore/studio.h\"\n#include \"MagickCore/blob.h\"\n#include \"MagickCore/blob-private.h\"\n#include \"MagickCore/cache.h\"\n#include \"MagickCore/colormap-private.h\"\n#include \"MagickCore/color-private.h\"\n#include \"MagickCore/colormap.h\"\n#include \"MagickCore/colorspace.h\"\n#include \"MagickCore/colorspace-private.h\"\n#include \"MagickCore/exception.h\"\n#include \"MagickCore/exception-private.h\"\n#include \"MagickCore/image.h\"\n#include \"MagickCore/image-private.h\"\n#include \"MagickCore/list.h\"\n#include \"MagickCore/log.h\"\n#include \"MagickCore/magick.h\"\n#include \"MagickCore/memory_.h\"\n#include \"MagickCore/monitor.h\"\n#include \"MagickCore/monitor-private.h\"\n#include \"MagickCore/option.h\"\n#include \"MagickCore/pixel-accessor.h\"\n#include \"MagickCore/profile.h\"\n#include \"MagickCore/quantum-private.h\"\n#include \"MagickCore/static.h\"\n#include \"MagickCore/string_.h\"\n#include \"MagickCore/module.h\"\n#include \"MagickCore/transform.h\"\n\f\n/*\n  Macro definitions (from Windows wingdi.h).\n*/\n#undef BI_JPEG\n#define BI_JPEG  4\n#undef BI_PNG\n#define BI_PNG  5\n#ifndef BI_ALPHABITFIELDS\n #define BI_ALPHABITFIELDS 6\n#endif\n#if !defined(MAGICKCORE_WINDOWS_SUPPORT) || defined(__MINGW32__)\n#undef BI_RGB\n#define BI_RGB  0\n#undef BI_RLE8\n#define BI_RLE8  1\n#undef BI_RLE4\n#define BI_RLE4  2\n#undef BI_BITFIELDS\n#define BI_BITFIELDS  3\n\n#undef LCS_CALIBRATED_RBG\n#define LCS_CALIBRATED_RBG  0\n#undef LCS_sRGB\n#define LCS_sRGB  1\n#undef LCS_WINDOWS_COLOR_SPACE\n#define LCS_WINDOWS_COLOR_SPACE  2\n#undef PROFILE_LINKED\n#define PROFILE_LINKED  3\n#undef PROFILE_EMBEDDED\n#define PROFILE_EMBEDDED  4\n\n#undef LCS_GM_BUSINESS\n#define LCS_GM_BUSINESS  1  /* Saturation */\n#undef LCS_GM_GRAPHICS\n#define LCS_GM_GRAPHICS  2  /* Relative */\n#undef LCS_GM_IMAGES\n#define LCS_GM_IMAGES  4  /* Perceptual */\n#undef LCS_GM_ABS_COLORIMETRIC\n#define LCS_GM_ABS_COLORIMETRIC  8  /* Absolute */\n#endif\n\f\n/*\n  Enumerated declarations.\n*/\ntypedef enum\n{\n  UndefinedSubtype,\n  RGB555,\n  RGB565,\n  ARGB4444,\n  ARGB1555\n} BMPSubtype;\n\n/*\n  Typedef declarations.\n*/\ntypedef struct _BMPInfo\n{\n  unsigned int\n    file_size,\n    ba_offset,\n    offset_bits,\n    size;\n\n  ssize_t\n    width,\n    height;\n\n  unsigned short\n    planes,\n    bits_per_pixel;\n\n  unsigned int\n    compression,\n    image_size,\n    x_pixels,\n    y_pixels,\n    number_colors,\n    red_mask,\n    green_mask,\n    blue_mask,\n    alpha_mask,\n    colors_important;\n\n  long\n    colorspace;\n\n  PrimaryInfo\n    red_primary,\n    green_primary,\n    blue_primary,\n    gamma_scale;\n} BMPInfo;\n\f\n/*\n  Forward declarations.\n*/\nstatic MagickBooleanType\n  WriteBMPImage(const ImageInfo *,Image *,ExceptionInfo *);\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   D e c o d e I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  DecodeImage unpacks the packed image pixels into runlength-encoded pixel\n%  packets.\n%\n%  The format of the DecodeImage method is:\n%\n%      MagickBooleanType DecodeImage(Image *image,const size_t compression,\n%        unsigned char *pixels,const size_t number_pixels)\n%\n%  A description of each parameter follows:\n%\n%    o image: the address of a structure of type Image.\n%\n%    o compression:  Zero means uncompressed.  A value of 1 means the\n%      compressed pixels are runlength encoded for a 256-color bitmap.\n%      A value of 2 means a 16-color bitmap.  A value of 3 means bitfields\n%      encoding.\n%\n%    o pixels:  The address of a byte (8 bits) array of pixel data created by\n%      the decoding process.\n%\n%    o number_pixels:  The number of pixels.\n%\n*/\nstatic MagickBooleanType DecodeImage(Image *image,const size_t compression,\n  unsigned char *pixels,const size_t number_pixels)\n{\n  int\n    byte,\n    count;\n\n  ssize_t\n    i,\n    x;\n\n  unsigned char\n    *p,\n    *q;\n\n  ssize_t\n    y;\n\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  assert(pixels != (unsigned char *) NULL);\n  if (IsEventLogging() != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  (void) memset(pixels,0,number_pixels*sizeof(*pixels));\n  byte=0;\n  x=0;\n  p=pixels;\n  q=pixels+number_pixels;\n  for (y=0; y < (ssize_t) image->rows; )\n  {\n    MagickBooleanType\n      status;\n\n    if ((p < pixels) || (p >= q))\n      break;\n    count=ReadBlobByte(image);\n    if (count == EOF)\n      break;\n    if (count > 0)\n      {\n        /*\n          Encoded mode.\n        */\n        count=(int) MagickMin((ssize_t) count,(ssize_t) (q-p));\n        byte=ReadBlobByte(image);\n        if (byte == EOF)\n          break;\n        if (compression == BI_RLE8)\n          {\n            for (i=0; i < (ssize_t) count; i++)\n              *p++=(unsigned char) byte;\n          }\n        else\n          {\n            for (i=0; i < (ssize_t) count; i++)\n              *p++=(unsigned char)\n                ((i & 0x01) != 0 ? (byte & 0x0f) : ((byte >> 4) & 0x0f));\n          }\n        x+=count;\n      }\n    else\n      {\n        /*\n          Escape mode.\n        */\n        count=ReadBlobByte(image);\n        if (count == EOF)\n          break;\n        if (count == 0x01)\n          break;\n        switch (count)\n        {\n          case 0x00:\n          {\n            /*\n              End of line.\n            */\n            x=0;\n            y++;\n            p=pixels+y*(ssize_t) image->columns;\n            break;\n          }\n          case 0x02:\n          {\n            /*\n              Delta mode.\n            */\n            byte=ReadBlobByte(image);\n            if (byte == EOF)\n              return(MagickFalse);\n            x+=byte;\n            byte=ReadBlobByte(image);\n            if (byte == EOF)\n              return(MagickFalse);\n            y+=byte;\n            p=pixels+y*(ssize_t) image->columns+x;\n            break;\n          }\n          default:\n          {\n            /*\n              Absolute mode.\n            */\n            count=(int) MagickMin((ssize_t) count,(ssize_t) (q-p));\n            if (count < 0)\n              break;\n            if (compression == BI_RLE8)\n              for (i=0; i < (ssize_t) count; i++)\n              {\n                byte=ReadBlobByte(image);\n                if (byte == EOF)\n                  break;\n                *p++=(unsigned char) byte;\n              }\n            else\n              for (i=0; i < (ssize_t) count; i++)\n              {\n                if ((i & 0x01) == 0)\n                  {\n                    byte=ReadBlobByte(image);\n                    if (byte == EOF)\n                      break;\n                  }\n                *p++=(unsigned char)\n                  ((i & 0x01) != 0 ? (byte & 0x0f) : ((byte >> 4) & 0x0f));\n              }\n            x+=count;\n            /*\n              Read pad byte.\n            */\n            if (compression == BI_RLE8)\n              {\n                if ((count & 0x01) != 0)\n                  if (ReadBlobByte(image) == EOF)\n                    break;\n              }\n            else\n              if (((count & 0x03) == 1) || ((count & 0x03) == 2))\n                if (ReadBlobByte(image) == EOF)\n                  break;\n            break;\n          }\n        }\n      }\n    status=SetImageProgress(image,LoadImageTag,(MagickOffsetType) y,\n      image->rows);\n    if (status == MagickFalse)\n      break;\n  }\n  (void) ReadBlobByte(image);  /* end of line */\n  (void) ReadBlobByte(image);\n  return((q-pixels) < (ssize_t) number_pixels ? MagickFalse : MagickTrue);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   E n c o d e I m a g e                                                     %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  EncodeImage compresses pixels using a runlength encoded format.\n%\n%  The format of the EncodeImage method is:\n%\n%    static MagickBooleanType EncodeImage(Image *image,\n%      const size_t bytes_per_line,const unsigned char *pixels,\n%      unsigned char *compressed_pixels)\n%\n%  A description of each parameter follows:\n%\n%    o image:  The image.\n%\n%    o bytes_per_line: the number of bytes in a scanline of compressed pixels\n%\n%    o pixels:  The address of a byte (8 bits) array of pixel data created by\n%      the compression process.\n%\n%    o compressed_pixels:  The address of a byte (8 bits) array of compressed\n%      pixel data.\n%\n*/\nstatic size_t EncodeImage(Image *image,const size_t bytes_per_line,\n  const unsigned char *pixels,unsigned char *compressed_pixels)\n{\n  MagickBooleanType\n    status;\n\n  const unsigned char\n    *p;\n\n  ssize_t\n    i,\n    x;\n\n  unsigned char\n    *q;\n\n  ssize_t\n    y;\n\n  /*\n    Runlength encode pixels.\n  */\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  assert(pixels != (const unsigned char *) NULL);\n  assert(compressed_pixels != (unsigned char *) NULL);\n  if (IsEventLogging() != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  p=pixels;\n  q=compressed_pixels;\n  i=0;\n  for (y=0; y < (ssize_t) image->rows; y++)\n  {\n    for (x=0; x < (ssize_t) bytes_per_line; x+=i)\n    {\n      /*\n        Determine runlength.\n      */\n      for (i=1; ((x+i) < (ssize_t) bytes_per_line); i++)\n        if ((i == 255) || (*(p+i) != *p))\n          break;\n      *q++=(unsigned char) i;\n      *q++=(*p);\n      p+=i;\n    }\n    /*\n      End of line.\n    */\n    *q++=(unsigned char) 0x00;\n    *q++=(unsigned char) 0x00;\n    status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n      image->rows);\n    if (status == MagickFalse)\n      break;\n  }\n  /*\n    End of bitmap.\n  */\n  *q++=(unsigned char) 0x00;\n  *q++=(unsigned char) 0x01;\n  return((size_t) (q-compressed_pixels));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   I s B M P                                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  IsBMP() returns MagickTrue if the image format type, identified by the\n%  magick string, is BMP.\n%\n%  The format of the IsBMP method is:\n%\n%      MagickBooleanType IsBMP(const unsigned char *magick,const size_t length)\n%\n%  A description of each parameter follows:\n%\n%    o magick: compare image format pattern against these bytes.\n%\n%    o length: Specifies the length of the magick string.\n%\n*/\nstatic MagickBooleanType IsBMP(const unsigned char *magick,const size_t length)\n{\n  if (length < 2)\n    return(MagickFalse);\n  if ((LocaleNCompare((char *) magick,\"BA\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"BM\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"IC\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"PI\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"CI\",2) == 0) ||\n      (LocaleNCompare((char *) magick,\"CP\",2) == 0))\n    return(MagickTrue);\n  return(MagickFalse);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e a d B M P I m a g e                                                   %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  ReadBMPImage() reads a Microsoft Windows bitmap image file, Version\n%  2, 3 (for Windows or NT), or 4, and  returns it.  It allocates the memory\n%  necessary for the new Image structure and returns a pointer to the new\n%  image.\n%\n%  The format of the ReadBMPImage method is:\n%\n%      image=ReadBMPImage(image_info)\n%\n%  A description of each parameter follows:\n%\n%    o image_info: the image info.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\n\nstatic Image *ReadEmbedImage(const ImageInfo *image_info,Image *image,\n  const char *magick,ExceptionInfo *exception)\n{\n  const void\n    *stream;\n\n  Image\n    *embed_image;\n\n  ImageInfo\n    *embed_info;\n\n  MemoryInfo\n    *pixel_info;\n\n  size_t\n    length;\n\n  ssize_t\n    count;\n\n  unsigned char\n    *pixels;\n\n  /*\n    Read embedded image.\n  */\n  length=(size_t) ((MagickOffsetType) GetBlobSize(image)-TellBlob(image));\n  pixel_info=AcquireVirtualMemory(length,sizeof(*pixels));\n  if (pixel_info == (MemoryInfo *) NULL)\n    ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n  pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n  stream=ReadBlobStream(image,length,pixels,&count);\n  if (count != (ssize_t) length)\n    {\n      pixel_info=RelinquishVirtualMemory(pixel_info);\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    }\n  embed_info=AcquireImageInfo();\n  (void) FormatLocaleString(embed_info->filename,MagickPathExtent,\n    \"%s:%s\",magick,image_info->filename);\n  embed_image=BlobToImage(embed_info,stream,(size_t) count,exception);\n  embed_info=DestroyImageInfo(embed_info);\n  pixel_info=RelinquishVirtualMemory(pixel_info);\n  (void) CloseBlob(image);\n  if (embed_image != (Image *) NULL)\n    {\n      (void) CopyMagickString(embed_image->filename,image->filename,\n        MagickPathExtent);\n      (void) CopyMagickString(embed_image->magick_filename,\n        image->magick_filename,MagickPathExtent);\n      (void) CopyMagickString(embed_image->magick,image->magick,\n        MagickPathExtent);\n    }\n  return(embed_image);\n}\n\nstatic Image *ReadBMPImage(const ImageInfo *image_info,ExceptionInfo *exception)\n{\n  BMPInfo\n    bmp_info;\n\n  Image\n    *image;\n\n  MagickBooleanType\n    status;\n\n  MagickOffsetType\n    offset,\n    profile_data,\n    profile_size,\n    start_position;\n\n  MagickSizeType\n    blob_size;\n\n  MemoryInfo\n    *pixel_info;\n\n  Quantum\n    index,\n    *q;\n\n  size_t\n    bit,\n    bytes_per_line,\n    length;\n\n  ssize_t\n    count,\n    i,\n    x,\n    y;\n\n  unsigned char\n    magick[12],\n    *p,\n    *pixels;\n\n  unsigned int\n    blue,\n    green,\n    offset_bits,\n    red;\n\n  /*\n    Open image file.\n  */\n  assert(image_info != (const ImageInfo *) NULL);\n  assert(image_info->signature == MagickCoreSignature);\n  if (IsEventLogging() != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",\n      image_info->filename);\n  assert(exception != (ExceptionInfo *) NULL);\n  assert(exception->signature == MagickCoreSignature);\n  image=AcquireImage(image_info,exception);\n  status=OpenBlob(image_info,image,ReadBinaryBlobMode,exception);\n  if (status == MagickFalse)\n    {\n      image=DestroyImageList(image);\n      return((Image *) NULL);\n    }\n  /*\n    Determine if this a BMP file.\n  */\n  (void) memset(&bmp_info,0,sizeof(bmp_info));\n  bmp_info.ba_offset=0;\n  start_position=0;\n  offset_bits=0;\n  count=ReadBlob(image,2,magick);\n  if (count != 2)\n    ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n  blob_size=GetBlobSize(image);\n  do\n  {\n    PixelInfo\n      quantum_bits;\n\n    PixelPacket\n      shift;\n\n    /*\n      Verify BMP identifier.\n    */\n    start_position=TellBlob(image)-2;\n    bmp_info.ba_offset=0;\n    while (LocaleNCompare((char *) magick,\"BA\",2) == 0)\n    {\n      bmp_info.file_size=ReadBlobLSBLong(image);\n      bmp_info.ba_offset=ReadBlobLSBLong(image);\n      bmp_info.offset_bits=ReadBlobLSBLong(image);\n      count=ReadBlob(image,2,magick);\n      if (count != 2)\n        break;\n    }\n    if (image->debug != MagickFalse)\n      (void) LogMagickEvent(CoderEvent,GetMagickModule(),\"  Magick: %c%c\",\n        magick[0],magick[1]);\n    if ((count != 2) || ((LocaleNCompare((char *) magick,\"BM\",2) != 0) &&\n        (LocaleNCompare((char *) magick,\"CI\",2) != 0)))\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    bmp_info.file_size=ReadBlobLSBLong(image);\n    (void) ReadBlobLSBLong(image);\n    bmp_info.offset_bits=ReadBlobLSBLong(image);\n    bmp_info.size=ReadBlobLSBLong(image);\n    if (image->debug != MagickFalse)\n      (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n        \"  BMP header size: %u\",bmp_info.size);\n    if (LocaleNCompare((char *) magick,\"CI\",2) == 0)\n      {\n        if ((bmp_info.size != 12) && (bmp_info.size != 40) &&\n            (bmp_info.size != 64))\n          ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n      }\n    if (bmp_info.size > 124)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    if ((bmp_info.file_size != 0) &&\n        ((MagickSizeType) bmp_info.file_size > GetBlobSize(image)))\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    if (bmp_info.offset_bits < bmp_info.size)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    bmp_info.offset_bits=MagickMax(14+bmp_info.size,bmp_info.offset_bits);\n    profile_data=0;\n    profile_size=0;\n    if (bmp_info.size == 12)\n      {\n        /*\n          OS/2 BMP image file.\n        */\n        (void) CopyMagickString(image->magick,\"BMP2\",MagickPathExtent);\n        bmp_info.width=(ssize_t) ((short) ReadBlobLSBShort(image));\n        bmp_info.height=(ssize_t) ((short) ReadBlobLSBShort(image));\n        bmp_info.planes=ReadBlobLSBShort(image);\n        bmp_info.bits_per_pixel=ReadBlobLSBShort(image);\n        bmp_info.x_pixels=0;\n        bmp_info.y_pixels=0;\n        bmp_info.number_colors=0;\n        bmp_info.compression=BI_RGB;\n        bmp_info.image_size=0;\n        bmp_info.alpha_mask=0;\n        if (image->debug != MagickFalse)\n          {\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Format: OS/2 Bitmap\");\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Geometry: %.20gx%.20g\",(double) bmp_info.width,(double)\n              bmp_info.height);\n          }\n      }\n    else\n      {\n        /*\n          Microsoft Windows BMP image file.\n        */\n        if (bmp_info.size < 40)\n          ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n        bmp_info.width=(ssize_t) ReadBlobLSBSignedLong(image);\n        bmp_info.height=(ssize_t) ReadBlobLSBSignedLong(image);\n        bmp_info.planes=ReadBlobLSBShort(image);\n        bmp_info.bits_per_pixel=ReadBlobLSBShort(image);\n        bmp_info.compression=ReadBlobLSBLong(image);\n        if (bmp_info.size > 16)\n          {\n            bmp_info.image_size=ReadBlobLSBLong(image);\n            bmp_info.x_pixels=ReadBlobLSBLong(image);\n            bmp_info.y_pixels=ReadBlobLSBLong(image);\n            bmp_info.number_colors=ReadBlobLSBLong(image);\n            if ((MagickSizeType) bmp_info.number_colors > blob_size)\n              ThrowReaderException(CorruptImageError,\n                \"InsufficientImageDataInFile\");\n            bmp_info.colors_important=ReadBlobLSBLong(image);\n          }\n        if (image->debug != MagickFalse)\n          {\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Format: MS Windows bitmap\");\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Geometry: %.20gx%.20g\",(double) bmp_info.width,(double)\n              bmp_info.height);\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Bits per pixel: %.20g\",(double) bmp_info.bits_per_pixel);\n            switch (bmp_info.compression)\n            {\n              case BI_RGB:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_RGB\");\n                break;\n              }\n              case BI_RLE4:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_RLE4\");\n                break;\n              }\n              case BI_RLE8:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_RLE8\");\n                break;\n              }\n              case BI_BITFIELDS:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_BITFIELDS\");\n                break;\n              }\n              case BI_ALPHABITFIELDS:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_ALPHABITFIELDS\");\n                break;\n              }\n              case BI_PNG:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_PNG\");\n                break;\n              }\n              case BI_JPEG:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: BI_JPEG\");\n                break;\n              }\n              default:\n              {\n                (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                  \"  Compression: UNKNOWN (%u)\",bmp_info.compression);\n              }\n            }\n            (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n              \"  Number of colors: %u\",bmp_info.number_colors);\n          }\n        if ((bmp_info.size > 40) || (bmp_info.compression == BI_BITFIELDS) ||\n            (bmp_info.compression == BI_ALPHABITFIELDS))\n\n          {\n            bmp_info.red_mask=ReadBlobLSBLong(image);\n            bmp_info.green_mask=ReadBlobLSBLong(image);\n            bmp_info.blue_mask=ReadBlobLSBLong(image);\n            if (bmp_info.compression == BI_ALPHABITFIELDS)\n              bmp_info.alpha_mask=ReadBlobLSBLong(image);\n          }\n        if (bmp_info.size > 40)\n          {\n            double\n              gamma;\n\n            /*\n              Read color management information.\n            */\n            bmp_info.alpha_mask=ReadBlobLSBLong(image);\n            bmp_info.colorspace=ReadBlobLSBSignedLong(image);\n            /*\n              Decode 2^30 fixed point formatted CIE primaries.\n            */\n#           define BMP_DENOM ((double) 0x40000000)\n            bmp_info.red_primary.x=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.red_primary.y=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.red_primary.z=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.green_primary.x=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.green_primary.y=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.green_primary.z=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.blue_primary.x=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.blue_primary.y=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n            bmp_info.blue_primary.z=(double) ReadBlobLSBLong(image)/BMP_DENOM;\n\n            gamma=bmp_info.red_primary.x+bmp_info.red_primary.y+\n              bmp_info.red_primary.z;\n            gamma=PerceptibleReciprocal(gamma);\n            bmp_info.red_primary.x*=gamma;\n            bmp_info.red_primary.y*=gamma;\n\n            gamma=bmp_info.green_primary.x+bmp_info.green_primary.y+\n              bmp_info.green_primary.z;\n            gamma=PerceptibleReciprocal(gamma);\n            bmp_info.green_primary.x*=gamma;\n            bmp_info.green_primary.y*=gamma;\n\n            gamma=bmp_info.blue_primary.x+bmp_info.blue_primary.y+\n              bmp_info.blue_primary.z;\n            gamma=PerceptibleReciprocal(gamma);\n            bmp_info.blue_primary.x*=gamma;\n            bmp_info.blue_primary.y*=gamma;\n\n            /*\n              Decode 16^16 fixed point formatted gamma_scales.\n            */\n            bmp_info.gamma_scale.x=(double) ReadBlobLSBLong(image)/0x10000;\n            bmp_info.gamma_scale.y=(double) ReadBlobLSBLong(image)/0x10000;\n            bmp_info.gamma_scale.z=(double) ReadBlobLSBLong(image)/0x10000;\n\n            if (bmp_info.colorspace == 0)\n              {\n                image->chromaticity.red_primary.x=bmp_info.red_primary.x;\n                image->chromaticity.red_primary.y=bmp_info.red_primary.y;\n                image->chromaticity.green_primary.x=bmp_info.green_primary.x;\n                image->chromaticity.green_primary.y=bmp_info.green_primary.y;\n                image->chromaticity.blue_primary.x=bmp_info.blue_primary.x;\n                image->chromaticity.blue_primary.y=bmp_info.blue_primary.y;\n                /*\n                  Compute a single gamma from the BMP 3-channel gamma.\n                */\n                image->gamma=(bmp_info.gamma_scale.x+bmp_info.gamma_scale.y+\n                  bmp_info.gamma_scale.z)/3.0;\n              }\n          }\n        else\n          (void) CopyMagickString(image->magick,\"BMP3\",MagickPathExtent);\n\n        if (bmp_info.size > 108)\n          {\n            size_t\n              intent;\n\n            /*\n              Read BMP Version 5 color management information.\n            */\n            intent=ReadBlobLSBLong(image);\n            switch ((int) intent)\n            {\n              case LCS_GM_BUSINESS:\n              {\n                image->rendering_intent=SaturationIntent;\n                break;\n              }\n              case LCS_GM_GRAPHICS:\n              {\n                image->rendering_intent=RelativeIntent;\n                break;\n              }\n              case LCS_GM_IMAGES:\n              {\n                image->rendering_intent=PerceptualIntent;\n                break;\n              }\n              case LCS_GM_ABS_COLORIMETRIC:\n              {\n                image->rendering_intent=AbsoluteIntent;\n                break;\n              }\n            }\n            profile_data=(MagickOffsetType) ReadBlobLSBLong(image);\n            profile_size=(MagickOffsetType) ReadBlobLSBLong(image);\n            (void) ReadBlobLSBLong(image);  /* Reserved byte */\n          }\n      }\n    if ((MagickSizeType) bmp_info.file_size != blob_size)\n      {\n        const char\n          *option;\n\n        option=GetImageOption(image_info,\"bmp:ignore-filesize\");\n        if (IsStringTrue(option) == MagickFalse)\n          (void) ThrowMagickException(exception,GetMagickModule(),\n            CorruptImageError,\"LengthAndFilesizeDoNotMatch\",\"`%s'\",\n            image->filename);\n      }\n    if (bmp_info.width <= 0)\n      ThrowReaderException(CorruptImageError,\"NegativeOrZeroImageSize\");\n    if (bmp_info.height == 0)\n      ThrowReaderException(CorruptImageError,\"NegativeOrZeroImageSize\");\n    if (bmp_info.compression == BI_JPEG)\n      {\n        /*\n          Read embedded JPEG image.\n        */\n        Image *embed_image = ReadEmbedImage(image_info,image,\"jpeg\",exception);\n        (void) CloseBlob(image);\n        image=DestroyImageList(image);\n        return(embed_image);\n      }\n    if (bmp_info.compression == BI_PNG)\n      {\n        /*\n          Read embedded PNG image.\n        */\n        Image *embed_image = ReadEmbedImage(image_info,image,\"png\",exception);\n        (void) CloseBlob(image);\n        image=DestroyImageList(image);\n        return(embed_image);\n      }\n    if (bmp_info.planes != 1)\n      ThrowReaderException(CorruptImageError,\"StaticPlanesValueNotEqualToOne\");\n    if ((bmp_info.bits_per_pixel != 1) && (bmp_info.bits_per_pixel != 4) &&\n        (bmp_info.bits_per_pixel != 8) && (bmp_info.bits_per_pixel != 16) &&\n        (bmp_info.bits_per_pixel != 24) && (bmp_info.bits_per_pixel != 32))\n      ThrowReaderException(CorruptImageError,\"UnsupportedBitsPerPixel\");\n    if (bmp_info.bits_per_pixel < 16 &&\n        bmp_info.number_colors > (1U << bmp_info.bits_per_pixel))\n      ThrowReaderException(CorruptImageError,\"UnrecognizedNumberOfColors\");\n    if ((bmp_info.compression == BI_RLE8) && (bmp_info.bits_per_pixel != 8))\n      ThrowReaderException(CorruptImageError,\"UnsupportedBitsPerPixel\");\n    if ((bmp_info.compression == BI_RLE4) && (bmp_info.bits_per_pixel != 4))\n      ThrowReaderException(CorruptImageError,\"UnsupportedBitsPerPixel\");\n    if ((bmp_info.compression == BI_BITFIELDS) && (bmp_info.bits_per_pixel < 16))\n      ThrowReaderException(CorruptImageError,\"UnsupportedBitsPerPixel\");\n    switch (bmp_info.compression)\n    {\n      case BI_RGB:\n        image->compression=NoCompression;\n        break;\n      case BI_RLE8:\n      case BI_RLE4:\n        image->compression=RLECompression;\n        break;\n      case BI_BITFIELDS:\n        break;\n      case BI_ALPHABITFIELDS:\n        break;\n      case BI_JPEG:\n        ThrowReaderException(CoderError,\"JPEGCompressNotSupported\");\n      case BI_PNG:\n        ThrowReaderException(CoderError,\"PNGCompressNotSupported\");\n      default:\n        ThrowReaderException(CorruptImageError,\"UnrecognizedImageCompression\");\n    }\n    image->columns=(size_t) MagickAbsoluteValue(bmp_info.width);\n    image->rows=(size_t) MagickAbsoluteValue(bmp_info.height);\n    image->depth=bmp_info.bits_per_pixel <= 8 ? bmp_info.bits_per_pixel : 8;\n    image->alpha_trait=((bmp_info.alpha_mask != 0) &&\n      (bmp_info.compression == BI_BITFIELDS)) ? BlendPixelTrait :\n      UndefinedPixelTrait;\n    if (bmp_info.bits_per_pixel < 16)\n      {\n        size_t\n          one;\n\n        image->storage_class=PseudoClass;\n        image->colors=bmp_info.number_colors;\n        one=1;\n        if (image->colors == 0)\n          image->colors=one << bmp_info.bits_per_pixel;\n      }\n    image->resolution.x=(double) bmp_info.x_pixels/100.0;\n    image->resolution.y=(double) bmp_info.y_pixels/100.0;\n    image->units=PixelsPerCentimeterResolution;\n    if ((image_info->ping != MagickFalse) && (image_info->number_scenes != 0))\n      if (image->scene >= (image_info->scene+image_info->number_scenes-1))\n        break;\n    status=SetImageExtent(image,image->columns,image->rows,exception);\n    if (status == MagickFalse)\n      return(DestroyImageList(image));\n    if (image->storage_class == PseudoClass)\n      {\n        unsigned char\n          *bmp_colormap;\n\n        size_t\n          packet_size;\n\n        /*\n          Read BMP raster colormap.\n        */\n        if (image->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"  Reading colormap of %.20g colors\",(double) image->colors);\n        if (AcquireImageColormap(image,image->colors,exception) == MagickFalse)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        bmp_colormap=(unsigned char *) AcquireQuantumMemory((size_t)\n          image->colors,4*sizeof(*bmp_colormap));\n        if (bmp_colormap == (unsigned char *) NULL)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        if ((bmp_info.size == 12) || (bmp_info.size == 64))\n          packet_size=3;\n        else\n          packet_size=4;\n        offset=SeekBlob(image,start_position+14+bmp_info.size,SEEK_SET);\n        if (offset < 0)\n          {\n            bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);\n            ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n          }\n        count=ReadBlob(image,packet_size*image->colors,bmp_colormap);\n        if (count != (ssize_t) (packet_size*image->colors))\n          {\n            bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);\n            ThrowReaderException(CorruptImageError,\n              \"InsufficientImageDataInFile\");\n          }\n        p=bmp_colormap;\n        for (i=0; i < (ssize_t) image->colors; i++)\n        {\n          image->colormap[i].blue=(MagickRealType) ScaleCharToQuantum(*p++);\n          image->colormap[i].green=(MagickRealType) ScaleCharToQuantum(*p++);\n          image->colormap[i].red=(MagickRealType) ScaleCharToQuantum(*p++);\n          if (packet_size == 4)\n            p++;\n        }\n        bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);\n      }\n    /*\n      Read image data.\n    */\n    if (bmp_info.offset_bits == offset_bits)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    offset_bits=bmp_info.offset_bits;\n    offset=SeekBlob(image,start_position+bmp_info.offset_bits,SEEK_SET);\n    if (offset < 0)\n      ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    if (bmp_info.compression == BI_RLE4)\n      bmp_info.bits_per_pixel<<=1;\n    bytes_per_line=4*((image->columns*bmp_info.bits_per_pixel+31)/32);\n    length=(size_t) bytes_per_line*image->rows;\n    if ((MagickSizeType) (length/256) > blob_size)\n      ThrowReaderException(CorruptImageError,\"InsufficientImageDataInFile\");\n    if ((bmp_info.compression == BI_RGB) ||\n        (bmp_info.compression == BI_BITFIELDS) ||\n        (bmp_info.compression == BI_ALPHABITFIELDS))\n      {\n        pixel_info=AcquireVirtualMemory(image->rows,\n          MagickMax(bytes_per_line,image->columns+256UL)*sizeof(*pixels));\n        if (pixel_info == (MemoryInfo *) NULL)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n        if (image->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"  Reading pixels (%.20g bytes)\",(double) length);\n        count=ReadBlob(image,length,pixels);\n        if (count != (ssize_t) length)\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\n              \"InsufficientImageDataInFile\");\n          }\n      }\n    else\n      {\n        /*\n          Convert run-length encoded raster pixels.\n        */\n        pixel_info=AcquireVirtualMemory(image->rows,\n          MagickMax(bytes_per_line,image->columns+256UL)*sizeof(*pixels));\n        if (pixel_info == (MemoryInfo *) NULL)\n          ThrowReaderException(ResourceLimitError,\"MemoryAllocationFailed\");\n        pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n        status=DecodeImage(image,bmp_info.compression,pixels,\n          image->columns*image->rows);\n        if (status == MagickFalse)\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\n              \"UnableToRunlengthDecodeImage\");\n          }\n      }\n    /*\n      Convert BMP raster image to pixel packets.\n    */\n    if (bmp_info.compression == BI_RGB)\n      {\n        /*\n          We should ignore the alpha value in BMP3 files but there have been\n          reports about 32 bit files with alpha. We do a quick check to see if\n          the alpha channel contains a value that is not zero (default value).\n          If we find a non zero value we assume the program that wrote the file\n          wants to use the alpha channel.\n        */\n        if (((image->alpha_trait & BlendPixelTrait) == 0) &&\n            (bmp_info.size == 40) && (bmp_info.bits_per_pixel == 32))\n          {\n            bytes_per_line=4*(image->columns);\n            for (y=(ssize_t) image->rows-1; y >= 0; y--)\n            {\n              p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n              for (x=0; x < (ssize_t) image->columns; x++)\n              {\n                if (*(p+3) != 0)\n                  {\n                    image->alpha_trait=BlendPixelTrait;\n                    y=-1;\n                    break;\n                  }\n                p+=4;\n              }\n            }\n          }\n        bmp_info.alpha_mask=image->alpha_trait != UndefinedPixelTrait ?\n          0xff000000U : 0U;\n        bmp_info.red_mask=0x00ff0000U;\n        bmp_info.green_mask=0x0000ff00U;\n        bmp_info.blue_mask=0x000000ffU;\n        if (bmp_info.bits_per_pixel == 16)\n          {\n            /*\n              RGB555.\n            */\n            bmp_info.red_mask=0x00007c00U;\n            bmp_info.green_mask=0x000003e0U;\n            bmp_info.blue_mask=0x0000001fU;\n          }\n      }\n    (void) memset(&shift,0,sizeof(shift));\n    (void) memset(&quantum_bits,0,sizeof(quantum_bits));\n    if ((bmp_info.bits_per_pixel == 16) || (bmp_info.bits_per_pixel == 32))\n      {\n        unsigned int\n          sample;\n\n        /*\n          Get shift and quantum bits info from bitfield masks.\n        */\n        if (bmp_info.red_mask != 0)\n          while (((bmp_info.red_mask << shift.red) & 0x80000000UL) == 0)\n          {\n            shift.red++;\n            if (shift.red >= 32U)\n              break;\n          }\n        if (bmp_info.green_mask != 0)\n          while (((bmp_info.green_mask << shift.green) & 0x80000000UL) == 0)\n          {\n            shift.green++;\n            if (shift.green >= 32U)\n              break;\n          }\n        if (bmp_info.blue_mask != 0)\n          while (((bmp_info.blue_mask << shift.blue) & 0x80000000UL) == 0)\n          {\n            shift.blue++;\n            if (shift.blue >= 32U)\n              break;\n          }\n        if (bmp_info.alpha_mask != 0)\n          while (((bmp_info.alpha_mask << shift.alpha) & 0x80000000UL) == 0)\n          {\n            shift.alpha++;\n            if (shift.alpha >= 32U)\n              break;\n          }\n        sample=shift.red;\n        while (((bmp_info.red_mask << sample) & 0x80000000UL) != 0)\n        {\n          sample++;\n          if (sample >= 32U)\n            break;\n        }\n        quantum_bits.red=(MagickRealType) (sample-shift.red);\n        sample=shift.green;\n        while (((bmp_info.green_mask << sample) & 0x80000000UL) != 0)\n        {\n          sample++;\n          if (sample >= 32U)\n            break;\n        }\n        quantum_bits.green=(MagickRealType) (sample-shift.green);\n        sample=shift.blue;\n        while (((bmp_info.blue_mask << sample) & 0x80000000UL) != 0)\n        {\n          sample++;\n          if (sample >= 32U)\n            break;\n        }\n        quantum_bits.blue=(MagickRealType) (sample-shift.blue);\n        sample=shift.alpha;\n        while (((bmp_info.alpha_mask << sample) & 0x80000000UL) != 0)\n        {\n          sample++;\n          if (sample >= 32U)\n            break;\n        }\n        quantum_bits.alpha=(MagickRealType) (sample-shift.alpha);\n      }\n    switch (bmp_info.bits_per_pixel)\n    {\n      case 1:\n      {\n        /*\n          Convert bitmap scanline.\n        */\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < ((ssize_t) image->columns-7); x+=8)\n          {\n            for (bit=0; bit < 8; bit++)\n            {\n              index=(Quantum) (((*p) & (0x80 >> bit)) != 0 ? 0x01 : 0x00);\n              SetPixelIndex(image,index,q);\n              q+=GetPixelChannels(image);\n            }\n            p++;\n          }\n          if ((image->columns % 8) != 0)\n            {\n              for (bit=0; bit < (image->columns % 8); bit++)\n              {\n                index=(Quantum) (((*p) & (0x80 >> bit)) != 0 ? 0x01 : 0x00);\n                SetPixelIndex(image,index,q);\n                q+=GetPixelChannels(image);\n              }\n              p++;\n            }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        (void) SyncImage(image,exception);\n        break;\n      }\n      case 4:\n      {\n        /*\n          Convert PseudoColor scanline.\n        */\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < ((ssize_t) image->columns-1); x+=2)\n          {\n            ValidateColormapValue(image,(ssize_t) ((*p >> 4) & 0x0f),&index,\n              exception);\n            SetPixelIndex(image,index,q);\n            q+=GetPixelChannels(image);\n            ValidateColormapValue(image,(ssize_t) (*p & 0x0f),&index,exception);\n            SetPixelIndex(image,index,q);\n            q+=GetPixelChannels(image);\n            p++;\n          }\n          if ((image->columns % 2) != 0)\n            {\n              ValidateColormapValue(image,(ssize_t) ((*p >> 4) & 0xf),&index,\n                exception);\n              SetPixelIndex(image,index,q);\n              q+=GetPixelChannels(image);\n              p++;\n              x++;\n            }\n          if (x < (ssize_t) image->columns)\n            break;\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        (void) SyncImage(image,exception);\n        break;\n      }\n      case 8:\n      {\n        /*\n          Convert PseudoColor scanline.\n        */\n        if ((bmp_info.compression == BI_RLE8) ||\n            (bmp_info.compression == BI_RLE4))\n          bytes_per_line=image->columns;\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=(ssize_t) image->columns; x != 0; --x)\n          {\n            ValidateColormapValue(image,(ssize_t) *p++,&index,exception);\n            SetPixelIndex(image,index,q);\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          offset=((MagickOffsetType) image->rows-y-1);\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        (void) SyncImage(image,exception);\n        break;\n      }\n      case 16:\n      {\n        unsigned int\n          alpha,\n          pixel;\n\n        /*\n          Convert bitfield encoded 16-bit PseudoColor scanline.\n        */\n        if ((bmp_info.compression != BI_RGB) &&\n            (bmp_info.compression != BI_BITFIELDS))\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\n              \"UnrecognizedImageCompression\");\n          }\n        bytes_per_line=2*(image->columns+image->columns % 2);\n        image->storage_class=DirectClass;\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            pixel=(unsigned int) (*p++);\n            pixel|=(unsigned int) (*p++) << 8;\n            red=((pixel & bmp_info.red_mask) << shift.red) >> 16;\n            if (quantum_bits.red == 5)\n              red|=((red & 0xe000) >> 5);\n            if (quantum_bits.red <= 8)\n              red|=((red & 0xff00) >> 8);\n            green=((pixel & bmp_info.green_mask) << shift.green) >> 16;\n            if (quantum_bits.green == 5)\n              green|=((green & 0xe000) >> 5);\n            if (quantum_bits.green == 6)\n              green|=((green & 0xc000) >> 6);\n            if (quantum_bits.green <= 8)\n              green|=((green & 0xff00) >> 8);\n            blue=((pixel & bmp_info.blue_mask) << shift.blue) >> 16;\n            if (quantum_bits.blue == 5)\n              blue|=((blue & 0xe000) >> 5);\n            if (quantum_bits.blue <= 8)\n              blue|=((blue & 0xff00) >> 8);\n            SetPixelRed(image,ScaleShortToQuantum((unsigned short) red),q);\n            SetPixelGreen(image,ScaleShortToQuantum((unsigned short) green),q);\n            SetPixelBlue(image,ScaleShortToQuantum((unsigned short) blue),q);\n            SetPixelAlpha(image,OpaqueAlpha,q);\n            if (image->alpha_trait != UndefinedPixelTrait)\n              {\n                alpha=((pixel & bmp_info.alpha_mask) << shift.alpha) >> 16;\n                if (quantum_bits.alpha <= 8)\n                  alpha|=((alpha & 0xff00) >> 8);\n                SetPixelAlpha(image,ScaleShortToQuantum(\n                  (unsigned short) alpha),q);\n              }\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          offset=((MagickOffsetType) image->rows-y-1);\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 24:\n      {\n        /*\n          Convert DirectColor scanline.\n        */\n        bytes_per_line=4*((image->columns*24+31)/32);\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            SetPixelBlue(image,ScaleCharToQuantum(*p++),q);\n            SetPixelGreen(image,ScaleCharToQuantum(*p++),q);\n            SetPixelRed(image,ScaleCharToQuantum(*p++),q);\n            SetPixelAlpha(image,OpaqueAlpha,q);\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          offset=((MagickOffsetType) image->rows-y-1);\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 32:\n      {\n        /*\n          Convert bitfield encoded DirectColor scanline.\n        */\n        if ((bmp_info.compression != BI_RGB) &&\n            (bmp_info.compression != BI_BITFIELDS))\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowReaderException(CorruptImageError,\n              \"UnrecognizedImageCompression\");\n          }\n        bytes_per_line=4*(image->columns);\n        for (y=(ssize_t) image->rows-1; y >= 0; y--)\n        {\n          unsigned int\n            alpha,\n            pixel;\n\n          p=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          q=QueueAuthenticPixels(image,0,y,image->columns,1,exception);\n          if (q == (Quantum *) NULL)\n            break;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            pixel=(unsigned int) (*p++);\n            pixel|=((unsigned int) *p++ << 8);\n            pixel|=((unsigned int) *p++ << 16);\n            pixel|=((unsigned int) *p++ << 24);\n            red=((pixel & bmp_info.red_mask) << shift.red) >> 16;\n            if (quantum_bits.red == 8)\n              red|=(red >> 8);\n            green=((pixel & bmp_info.green_mask) << shift.green) >> 16;\n            if (quantum_bits.green == 8)\n              green|=(green >> 8);\n            blue=((pixel & bmp_info.blue_mask) << shift.blue) >> 16;\n            if (quantum_bits.blue == 8)\n              blue|=(blue >> 8);\n            SetPixelRed(image,ScaleShortToQuantum((unsigned short) red),q);\n            SetPixelGreen(image,ScaleShortToQuantum((unsigned short) green),q);\n            SetPixelBlue(image,ScaleShortToQuantum((unsigned short) blue),q);\n            SetPixelAlpha(image,OpaqueAlpha,q);\n            if (image->alpha_trait != UndefinedPixelTrait)\n              {\n                alpha=((pixel & bmp_info.alpha_mask) << shift.alpha) >> 16;\n                if (quantum_bits.alpha == 8)\n                  alpha|=(alpha >> 8);\n                SetPixelAlpha(image,ScaleShortToQuantum(\n                  (unsigned short) alpha),q);\n              }\n            q+=GetPixelChannels(image);\n          }\n          if (SyncAuthenticPixels(image,exception) == MagickFalse)\n            break;\n          offset=((MagickOffsetType) image->rows-y-1);\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,LoadImageTag,((MagickOffsetType)\n                image->rows-y),image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      default:\n      {\n        pixel_info=RelinquishVirtualMemory(pixel_info);\n        ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n      }\n    }\n    pixel_info=RelinquishVirtualMemory(pixel_info);\n    if (y > 0)\n      break;\n    if (EOFBlob(image) != MagickFalse)\n      {\n        ThrowFileException(exception,CorruptImageError,\"UnexpectedEndOfFile\",\n          image->filename);\n        break;\n      }\n    if (bmp_info.height < 0)\n      {\n        Image\n          *flipped_image;\n\n        /*\n          Correct image orientation.\n        */\n        flipped_image=FlipImage(image,exception);\n        if (flipped_image != (Image *) NULL)\n          {\n            DuplicateBlob(flipped_image,image);\n            ReplaceImageInList(&image, flipped_image);\n            image=flipped_image;\n          }\n      }\n    /*\n      Read embedded ICC profile\n    */\n    if ((bmp_info.colorspace == 0x4D424544L) && (profile_data > 0) &&\n        (profile_size > 0))\n      {\n        StringInfo\n          *profile;\n\n        unsigned char\n          *datum;\n\n        offset=start_position+14+profile_data;\n        if ((offset < TellBlob(image)) ||\n            (SeekBlob(image,offset,SEEK_SET) != offset) ||\n            (blob_size < (MagickSizeType) (offset+profile_size)))\n          ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n        profile=AcquireStringInfo((size_t) profile_size);\n        if (profile == (StringInfo *) NULL)\n          ThrowReaderException(CorruptImageError,\"MemoryAllocationFailed\");\n        datum=GetStringInfoDatum(profile);\n        if (ReadBlob(image,(size_t) profile_size,datum) == (ssize_t) profile_size)\n          {\n            MagickOffsetType\n              profile_size_orig;\n\n            /*\n             Trimming padded bytes.\n            */\n            profile_size_orig=(MagickOffsetType) datum[0] << 24;\n            profile_size_orig|=(MagickOffsetType) datum[1] << 16;\n            profile_size_orig|=(MagickOffsetType) datum[2] << 8;\n            profile_size_orig|=(MagickOffsetType) datum[3];\n            if (profile_size_orig < profile_size)\n              SetStringInfoLength(profile,(size_t) profile_size_orig);\n            if (image->debug != MagickFalse)\n              (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n                \"Profile: ICC, %u bytes\",(unsigned int) profile_size_orig);\n            (void) SetImageProfile(image,\"icc\",profile,exception);\n          }\n        profile=DestroyStringInfo(profile);\n      }\n    /*\n      Proceed to next image.\n    */\n    if (image_info->number_scenes != 0)\n      if (image->scene >= (image_info->scene+image_info->number_scenes-1))\n        break;\n    offset=(MagickOffsetType) bmp_info.ba_offset;\n    if (offset != 0)\n      if ((offset < TellBlob(image)) ||\n          (SeekBlob(image,offset,SEEK_SET) != offset))\n        ThrowReaderException(CorruptImageError,\"ImproperImageHeader\");\n    *magick='\\0';\n    count=ReadBlob(image,2,magick);\n    if ((count == 2) && (IsBMP(magick,2) != MagickFalse))\n      {\n        /*\n          Acquire next image structure.\n        */\n        AcquireNextImage(image_info,image,exception);\n        if (GetNextImageInList(image) == (Image *) NULL)\n          {\n            status=MagickFalse;\n            break;\n          }\n        image=SyncNextImageInList(image);\n        status=SetImageProgress(image,LoadImagesTag,TellBlob(image),blob_size);\n        if (status == MagickFalse)\n          break;\n      }\n  } while (IsBMP(magick,2) != MagickFalse);\n  (void) CloseBlob(image);\n  if (status == MagickFalse)\n    return(DestroyImageList(image));\n  return(GetFirstImageInList(image));\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   R e g i s t e r B M P I m a g e                                           %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  RegisterBMPImage() adds attributes for the BMP image format to\n%  the list of supported formats.  The attributes include the image format\n%  tag, a method to read and/or write the format, whether the format\n%  supports the saving of more than one frame to the same file or blob,\n%  whether the format supports native in-memory I/O, and a brief\n%  description of the format.\n%\n%  The format of the RegisterBMPImage method is:\n%\n%      size_t RegisterBMPImage(void)\n%\n*/\nModuleExport size_t RegisterBMPImage(void)\n{\n  MagickInfo\n    *entry;\n\n  entry=AcquireMagickInfo(\"BMP\",\"BMP\",\"Microsoft Windows bitmap image\");\n  entry->decoder=(DecodeImageHandler *) ReadBMPImage;\n  entry->encoder=(EncodeImageHandler *) WriteBMPImage;\n  entry->magick=(IsImageFormatHandler *) IsBMP;\n  entry->flags^=CoderAdjoinFlag;\n  entry->flags|=CoderDecoderSeekableStreamFlag;\n  entry->mime_type=ConstantString(\"image/bmp\");\n  (void) RegisterMagickInfo(entry);\n  entry=AcquireMagickInfo(\"BMP\",\"BMP2\",\"Microsoft Windows bitmap image (V2)\");\n  entry->decoder=(DecodeImageHandler *) ReadBMPImage;\n  entry->encoder=(EncodeImageHandler *) WriteBMPImage;\n  entry->magick=(IsImageFormatHandler *) IsBMP;\n  entry->flags^=CoderAdjoinFlag;\n  entry->flags|=CoderDecoderSeekableStreamFlag;\n  entry->mime_type=ConstantString(\"image/bmp\");\n  (void) RegisterMagickInfo(entry);\n  entry=AcquireMagickInfo(\"BMP\",\"BMP3\",\"Microsoft Windows bitmap image (V3)\");\n  entry->decoder=(DecodeImageHandler *) ReadBMPImage;\n  entry->encoder=(EncodeImageHandler *) WriteBMPImage;\n  entry->magick=(IsImageFormatHandler *) IsBMP;\n  entry->flags^=CoderAdjoinFlag;\n  entry->flags|=CoderDecoderSeekableStreamFlag;\n  entry->mime_type=ConstantString(\"image/bmp\");\n  (void) RegisterMagickInfo(entry);\n  return(MagickImageCoderSignature);\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   U n r e g i s t e r B M P I m a g e                                       %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  UnregisterBMPImage() removes format registrations made by the\n%  BMP module from the list of supported formats.\n%\n%  The format of the UnregisterBMPImage method is:\n%\n%      UnregisterBMPImage(void)\n%\n*/\nModuleExport void UnregisterBMPImage(void)\n{\n  (void) UnregisterMagickInfo(\"BMP\");\n  (void) UnregisterMagickInfo(\"BMP2\");\n  (void) UnregisterMagickInfo(\"BMP3\");\n}\n\f\n/*\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%   W r i t e B M P I m a g e                                                 %\n%                                                                             %\n%                                                                             %\n%                                                                             %\n%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%\n%\n%  WriteBMPImage() writes an image in Microsoft Windows bitmap encoded\n%  image format, version 3 for Windows or (if the image has a matte channel)\n%  version 4.\n%\n%  The format of the WriteBMPImage method is:\n%\n%      MagickBooleanType WriteBMPImage(const ImageInfo *image_info,\n%        Image *image,ExceptionInfo *exception)\n%\n%  A description of each parameter follows.\n%\n%    o image_info: the image info.\n%\n%    o image:  The image.\n%\n%    o exception: return any errors or warnings in this structure.\n%\n*/\nstatic MagickBooleanType WriteBMPImage(const ImageInfo *image_info,Image *image,\n  ExceptionInfo *exception)\n{\n  BMPInfo\n    bmp_info;\n\n  BMPSubtype\n    bmp_subtype;\n\n  const char\n    *option;\n\n  const Quantum\n    *p;\n\n  const StringInfo\n    *profile;\n\n  MagickBooleanType\n    have_color_info,\n    status;\n\n  MagickOffsetType\n    profile_data,\n    profile_size,\n    profile_size_pad,\n    scene;\n\n  MemoryInfo\n    *pixel_info;\n\n  size_t\n    bytes_per_line,\n    number_scenes,\n    type;\n\n  ssize_t\n    i,\n    x,\n    y;\n\n  unsigned char\n    *bmp_data,\n    *pixels,\n    *q;\n\n  /*\n    Open output image file.\n  */\n  assert(image_info != (const ImageInfo *) NULL);\n  assert(image_info->signature == MagickCoreSignature);\n  assert(image != (Image *) NULL);\n  assert(image->signature == MagickCoreSignature);\n  assert(exception != (ExceptionInfo *) NULL);\n  assert(exception->signature == MagickCoreSignature);\n  if (IsEventLogging() != MagickFalse)\n    (void) LogMagickEvent(TraceEvent,GetMagickModule(),\"%s\",image->filename);\n  status=OpenBlob(image_info,image,WriteBinaryBlobMode,exception);\n  if (status == MagickFalse)\n    return(status);\n  if (((image->columns << 3) != (size_t) ((int) (image->columns << 3))) ||\n      ((image->rows << 3) != (size_t) ((int) (image->rows << 3))))\n    ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");\n  type=4;\n  if (LocaleCompare(image_info->magick,\"BMP2\") == 0)\n    type=2;\n  else\n    if (LocaleCompare(image_info->magick,\"BMP3\") == 0)\n      type=3;\n  option=GetImageOption(image_info,\"bmp:format\");\n  if (option != (char *) NULL)\n    {\n      (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n          \"  Format=%s\",option);\n      if (LocaleCompare(option,\"bmp2\") == 0)\n        type=2;\n      if (LocaleCompare(option,\"bmp3\") == 0)\n        type=3;\n      if (LocaleCompare(option,\"bmp4\") == 0)\n        type=4;\n    }\n  scene=0;\n  number_scenes=GetImageListLength(image);\n  do\n  {\n    /*\n      Initialize BMP raster file header.\n    */\n    if (IssRGBCompatibleColorspace(image->colorspace) == MagickFalse)\n      (void) TransformImageColorspace(image,sRGBColorspace,exception);\n    (void) memset(&bmp_info,0,sizeof(bmp_info));\n    bmp_info.file_size=14+12;\n    if (type > 2)\n      bmp_info.file_size+=28;\n    bmp_info.offset_bits=bmp_info.file_size;\n    bmp_info.compression=BI_RGB;\n    bmp_info.red_mask=0x00ff0000U;\n    bmp_info.green_mask=0x0000ff00U;\n    bmp_info.blue_mask=0x000000ffU;\n    bmp_info.alpha_mask=0xff000000U;\n    bmp_subtype=UndefinedSubtype;\n    if ((image->storage_class == PseudoClass) && (image->colors > 256))\n      (void) SetImageStorageClass(image,DirectClass,exception);\n    if (image->storage_class != DirectClass)\n      {\n        /*\n          Colormapped BMP raster.\n        */\n        bmp_info.bits_per_pixel=8;\n        if (image->colors <= 2)\n          bmp_info.bits_per_pixel=1;\n        else\n          if (image->colors <= 16)\n            bmp_info.bits_per_pixel=4;\n          else\n            if (image->colors <= 256)\n              bmp_info.bits_per_pixel=8;\n        if (image_info->compression == RLECompression)\n          bmp_info.bits_per_pixel=8;\n        bmp_info.number_colors=1U << bmp_info.bits_per_pixel;\n        if (image->alpha_trait != UndefinedPixelTrait)\n          (void) SetImageStorageClass(image,DirectClass,exception);\n        else\n          if ((size_t) bmp_info.number_colors < image->colors)\n            (void) SetImageStorageClass(image,DirectClass,exception);\n          else\n            {\n              bmp_info.file_size+=3*(1UL << bmp_info.bits_per_pixel);\n              bmp_info.offset_bits+=3*(1UL << bmp_info.bits_per_pixel);\n              if (type > 2)\n                {\n                  bmp_info.file_size+=(1UL << bmp_info.bits_per_pixel);\n                  bmp_info.offset_bits+=(1UL << bmp_info.bits_per_pixel);\n                }\n            }\n      }\n    if (image->storage_class == DirectClass)\n      {\n        /*\n          Full color BMP raster.\n        */\n        bmp_info.number_colors=0;\n        option=GetImageOption(image_info,\"bmp:subtype\");\n        if (option != (const char *) NULL)\n        {\n          if (image->alpha_trait != UndefinedPixelTrait)\n            {\n              if (LocaleNCompare(option,\"ARGB4444\",8) == 0)\n                {\n                  bmp_subtype=ARGB4444;\n                  bmp_info.red_mask=0x00000f00U;\n                  bmp_info.green_mask=0x000000f0U;\n                  bmp_info.blue_mask=0x0000000fU;\n                  bmp_info.alpha_mask=0x0000f000U;\n                }\n              else if (LocaleNCompare(option,\"ARGB1555\",8) == 0)\n                {\n                  bmp_subtype=ARGB1555;\n                  bmp_info.red_mask=0x00007c00U;\n                  bmp_info.green_mask=0x000003e0U;\n                  bmp_info.blue_mask=0x0000001fU;\n                  bmp_info.alpha_mask=0x00008000U;\n                }\n            }\n          else\n          {\n            if (LocaleNCompare(option,\"RGB555\",6) == 0)\n              {\n                bmp_subtype=RGB555;\n                bmp_info.red_mask=0x00007c00U;\n                bmp_info.green_mask=0x000003e0U;\n                bmp_info.blue_mask=0x0000001fU;\n                bmp_info.alpha_mask=0U;\n              }\n            else if (LocaleNCompare(option,\"RGB565\",6) == 0)\n              {\n                bmp_subtype=RGB565;\n                bmp_info.red_mask=0x0000f800U;\n                bmp_info.green_mask=0x000007e0U;\n                bmp_info.blue_mask=0x0000001fU;\n                bmp_info.alpha_mask=0U;\n              }\n          }\n        }\n        if (bmp_subtype != UndefinedSubtype)\n          {\n            bmp_info.bits_per_pixel=16;\n            bmp_info.compression=BI_BITFIELDS;\n          }\n        else\n          {\n            bmp_info.bits_per_pixel=(unsigned short) ((type > 3) &&\n               (image->alpha_trait != UndefinedPixelTrait) ? 32 : 24);\n            bmp_info.compression=(unsigned int) ((type > 3) &&\n              (image->alpha_trait != UndefinedPixelTrait) ? BI_BITFIELDS : BI_RGB);\n            if ((type == 3) && (image->alpha_trait != UndefinedPixelTrait))\n              {\n                option=GetImageOption(image_info,\"bmp3:alpha\");\n                if (IsStringTrue(option))\n                  bmp_info.bits_per_pixel=32;\n              }\n          }\n      }\n    bytes_per_line=4*((image->columns*bmp_info.bits_per_pixel+31)/32);\n    bmp_info.ba_offset=0;\n    profile=GetImageProfile(image,\"icc\");\n    have_color_info=(image->rendering_intent != UndefinedIntent) ||\n      (profile != (StringInfo *) NULL) || (image->gamma != 0.0) ?  MagickTrue :\n      MagickFalse;\n    if (type == 2)\n      bmp_info.size=12;\n    else\n      if ((type == 3) || (((image->alpha_trait & BlendPixelTrait) == 0) &&\n          (have_color_info == MagickFalse)))\n        {\n          type=3;\n          bmp_info.size=40;\n        }\n      else\n        {\n          int\n            extra_size;\n\n          bmp_info.size=108;\n          extra_size=68;\n          if ((image->rendering_intent != UndefinedIntent) ||\n              (profile != (StringInfo *) NULL))\n            {\n              bmp_info.size=124;\n              extra_size+=16;\n            }\n          bmp_info.file_size+=(unsigned int) extra_size;\n          bmp_info.offset_bits+=(unsigned int) extra_size;\n        }\n    if (((ssize_t) image->columns != (ssize_t) ((signed int) image->columns)) ||\n        ((ssize_t) image->rows != (ssize_t) ((signed int) image->rows)))\n      ThrowWriterException(ImageError,\"WidthOrHeightExceedsLimit\");\n    bmp_info.width=(ssize_t) image->columns;\n    bmp_info.height=(ssize_t) image->rows;\n    bmp_info.planes=1;\n    bmp_info.image_size=(unsigned int) (bytes_per_line*image->rows);\n    bmp_info.file_size+=bmp_info.image_size;\n    bmp_info.x_pixels=75*39;\n    bmp_info.y_pixels=75*39;\n    switch (image->units)\n    {\n      case UndefinedResolution:\n      case PixelsPerInchResolution:\n      {\n        bmp_info.x_pixels=(unsigned int) (100.0*image->resolution.x/2.54);\n        bmp_info.y_pixels=(unsigned int) (100.0*image->resolution.y/2.54);\n        break;\n      }\n      case PixelsPerCentimeterResolution:\n      {\n        bmp_info.x_pixels=(unsigned int) (100.0*image->resolution.x);\n        bmp_info.y_pixels=(unsigned int) (100.0*image->resolution.y);\n        break;\n      }\n    }\n    bmp_info.colors_important=bmp_info.number_colors;\n    /*\n      Convert MIFF to BMP raster pixels.\n    */\n    pixel_info=AcquireVirtualMemory(image->rows,MagickMax(bytes_per_line,\n      image->columns+256UL)*sizeof(*pixels));\n    if (pixel_info == (MemoryInfo *) NULL)\n      ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\n    pixels=(unsigned char *) GetVirtualMemoryBlob(pixel_info);\n    (void) memset(pixels,0,(size_t) bmp_info.image_size);\n    switch (bmp_info.bits_per_pixel)\n    {\n      case 1:\n      {\n        size_t\n          bit,\n          byte;\n\n        /*\n          Convert PseudoClass image to a BMP monochrome image.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          ssize_t\n            offset;\n\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          bit=0;\n          byte=0;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            byte<<=1;\n            byte|=(size_t) (GetPixelIndex(image,p) != 0 ? 0x01 : 0x00);\n            bit++;\n            if (bit == 8)\n              {\n                *q++=(unsigned char) byte;\n                bit=0;\n                byte=0;\n              }\n             p+=GetPixelChannels(image);\n           }\n           if (bit != 0)\n             {\n               *q++=(unsigned char) (byte << (8-bit));\n               x++;\n             }\n          offset=(ssize_t) (image->columns+7)/8;\n          for (x=offset; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 4:\n      {\n        unsigned int\n          byte,\n          nibble;\n\n        ssize_t\n          offset;\n\n        /*\n          Convert PseudoClass image to a BMP monochrome image.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          nibble=0;\n          byte=0;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            byte<<=4;\n            byte|=((unsigned int) GetPixelIndex(image,p) & 0x0f);\n            nibble++;\n            if (nibble == 2)\n              {\n                *q++=(unsigned char) byte;\n                nibble=0;\n                byte=0;\n              }\n            p+=GetPixelChannels(image);\n          }\n          if (nibble != 0)\n            {\n              *q++=(unsigned char) (byte << 4);\n              x++;\n            }\n          offset=(ssize_t) (image->columns+1)/2;\n          for (x=offset; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 8:\n      {\n        /*\n          Convert PseudoClass packet to BMP pixel.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            *q++=(unsigned char) ((ssize_t) GetPixelIndex(image,p));\n            p+=GetPixelChannels(image);\n          }\n          for ( ; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 16:\n      {\n        /*\n          Convert DirectClass packet to BMP BGR888.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            unsigned short\n              pixel;\n\n            pixel=0;\n            if (bmp_subtype == ARGB4444)\n              {\n                pixel=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelAlpha(image,p),15) << 12);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelRed(image,p),15) << 8);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelGreen(image,p),15) << 4);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelBlue(image,p),15));\n              }\n            else if (bmp_subtype == RGB565)\n              {\n                pixel=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelRed(image,p),31) << 11);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelGreen(image,p),63) << 5);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelBlue(image,p),31));\n              }\n            else\n              {\n                if (bmp_subtype == ARGB1555)\n                  pixel=(unsigned short) (ScaleQuantumToAny(\n                    GetPixelAlpha(image,p),1) << 15);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelRed(image,p),31) << 10);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelGreen(image,p),31) << 5);\n                pixel|=(unsigned short) (ScaleQuantumToAny(\n                  GetPixelBlue(image,p),31));\n              }\n            *((unsigned short *) q)=pixel;\n            q+=2;\n            p+=GetPixelChannels(image);\n          }\n          for (x=2L*(ssize_t) image->columns; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 24:\n      {\n        /*\n          Convert DirectClass packet to BMP BGR888.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            *q++=ScaleQuantumToChar(GetPixelBlue(image,p));\n            *q++=ScaleQuantumToChar(GetPixelGreen(image,p));\n            *q++=ScaleQuantumToChar(GetPixelRed(image,p));\n            p+=GetPixelChannels(image);\n          }\n          for (x=3L*(ssize_t) image->columns; x < (ssize_t) bytes_per_line; x++)\n            *q++=0x00;\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n      case 32:\n      {\n        /*\n          Convert DirectClass packet to ARGB8888 pixel.\n        */\n        for (y=0; y < (ssize_t) image->rows; y++)\n        {\n          p=GetVirtualPixels(image,0,y,image->columns,1,exception);\n          if (p == (const Quantum *) NULL)\n            break;\n          q=pixels+((ssize_t) image->rows-y-1)*(ssize_t) bytes_per_line;\n          for (x=0; x < (ssize_t) image->columns; x++)\n          {\n            Quantum alpha=GetPixelAlpha(image,p);\n            if (type == 3 && alpha == TransparentAlpha)\n              {\n                *q++=255;\n                *q++=255;\n                *q++=255;\n              }\n            else\n              {\n                *q++=ScaleQuantumToChar(GetPixelBlue(image,p));\n                *q++=ScaleQuantumToChar(GetPixelGreen(image,p));\n                *q++=ScaleQuantumToChar(GetPixelRed(image,p));\n              }\n            *q++=ScaleQuantumToChar(alpha);\n            p+=GetPixelChannels(image);\n          }\n          if (image->previous == (Image *) NULL)\n            {\n              status=SetImageProgress(image,SaveImageTag,(MagickOffsetType) y,\n                image->rows);\n              if (status == MagickFalse)\n                break;\n            }\n        }\n        break;\n      }\n    }\n    if ((type > 2) && (bmp_info.bits_per_pixel == 8))\n      if (image_info->compression != NoCompression)\n        {\n          MemoryInfo\n            *rle_info;\n\n          /*\n            Convert run-length encoded raster pixels.\n          */\n          rle_info=AcquireVirtualMemory((size_t) (2*(bytes_per_line+2)+2),\n            (image->rows+2)*sizeof(*pixels));\n          if (rle_info == (MemoryInfo *) NULL)\n            {\n              pixel_info=RelinquishVirtualMemory(pixel_info);\n              ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\n            }\n          bmp_data=(unsigned char *) GetVirtualMemoryBlob(rle_info);\n          bmp_info.file_size-=bmp_info.image_size;\n          bmp_info.image_size=(unsigned int) EncodeImage(image,bytes_per_line,\n            pixels,bmp_data);\n          bmp_info.file_size+=bmp_info.image_size;\n          pixel_info=RelinquishVirtualMemory(pixel_info);\n          pixel_info=rle_info;\n          pixels=bmp_data;\n          bmp_info.compression=BI_RLE8;\n        }\n    /*\n      Write BMP for Windows, all versions, 14-byte header.\n    */\n    if (image->debug != MagickFalse)\n      {\n        (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n          \"   Writing BMP version %.20g datastream\",(double) type);\n        if (image->storage_class == DirectClass)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Storage class=DirectClass\");\n        else\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Storage class=PseudoClass\");\n        (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n          \"   Image depth=%.20g\",(double) image->depth);\n        if (image->alpha_trait != UndefinedPixelTrait)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Matte=True\");\n        else\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Matte=MagickFalse\");\n        (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n          \"   BMP bits_per_pixel=%.20g\",(double) bmp_info.bits_per_pixel);\n        switch ((int) bmp_info.compression)\n        {\n           case BI_RGB:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=BI_RGB\");\n             break;\n           }\n           case BI_RLE8:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=BI_RLE8\");\n             break;\n           }\n           case BI_BITFIELDS:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=BI_BITFIELDS\");\n             break;\n           }\n           case BI_ALPHABITFIELDS:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=BI_BITFIELDS\");\n             break;\n           }\n           default:\n           {\n             (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n               \"   Compression=UNKNOWN (%u)\",bmp_info.compression);\n             break;\n           }\n        }\n        if (bmp_info.number_colors == 0)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Number_colors=unspecified\");\n        else\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"   Number_colors=%u\",bmp_info.number_colors);\n      }\n    profile_data=0;\n    profile_size=0;\n    profile_size_pad=0;\n    if (profile != (StringInfo *) NULL)\n      {\n        profile_data=(MagickOffsetType) bmp_info.file_size-14;  /* from head of BMP info header */\n        profile_size=(MagickOffsetType) GetStringInfoLength(profile);\n        if ((profile_size % 4) > 0)\n          profile_size_pad=4-(profile_size%4);\n        bmp_info.file_size+=profile_size+profile_size_pad;\n      }\n    (void) WriteBlob(image,2,(unsigned char *) \"BM\");\n    (void) WriteBlobLSBLong(image,bmp_info.file_size);\n    (void) WriteBlobLSBLong(image,bmp_info.ba_offset);  /* always 0 */\n    (void) WriteBlobLSBLong(image,bmp_info.offset_bits);\n    if (type == 2)\n      {\n        /*\n          Write 12-byte version 2 bitmap header.\n        */\n        (void) WriteBlobLSBLong(image,bmp_info.size);\n        (void) WriteBlobLSBSignedShort(image,(signed short) bmp_info.width);\n        (void) WriteBlobLSBSignedShort(image,(signed short) bmp_info.height);\n        (void) WriteBlobLSBShort(image,bmp_info.planes);\n        (void) WriteBlobLSBShort(image,bmp_info.bits_per_pixel);\n      }\n    else\n      {\n        /*\n          Write 40-byte version 3+ bitmap header.\n        */\n        (void) WriteBlobLSBLong(image,bmp_info.size);\n        (void) WriteBlobLSBSignedLong(image,(signed int) bmp_info.width);\n        (void) WriteBlobLSBSignedLong(image,(signed int) bmp_info.height);\n        (void) WriteBlobLSBShort(image,bmp_info.planes);\n        (void) WriteBlobLSBShort(image,bmp_info.bits_per_pixel);\n        (void) WriteBlobLSBLong(image,bmp_info.compression);\n        (void) WriteBlobLSBLong(image,bmp_info.image_size);\n        (void) WriteBlobLSBLong(image,bmp_info.x_pixels);\n        (void) WriteBlobLSBLong(image,bmp_info.y_pixels);\n        (void) WriteBlobLSBLong(image,bmp_info.number_colors);\n        (void) WriteBlobLSBLong(image,bmp_info.colors_important);\n      }\n    if ((type > 3) && ((image->alpha_trait != UndefinedPixelTrait) ||\n        (have_color_info != MagickFalse)))\n      {\n        /*\n          Write the rest of the 108-byte BMP Version 4 header.\n        */\n        (void) WriteBlobLSBLong(image,bmp_info.red_mask);\n        (void) WriteBlobLSBLong(image,bmp_info.green_mask);\n        (void) WriteBlobLSBLong(image,bmp_info.blue_mask);\n        (void) WriteBlobLSBLong(image,bmp_info.alpha_mask);\n        if (profile != (StringInfo *) NULL)\n          (void) WriteBlobLSBLong(image,0x4D424544U);  /* PROFILE_EMBEDDED */\n        else\n          (void) WriteBlobLSBLong(image,0x73524742U);  /* sRGB */\n\n        /* bounds check, assign .0 if invalid value */\n        if (isgreater(image->chromaticity.red_primary.x, 1.0) ||\n            !isgreater(image->chromaticity.red_primary.x, 0.0))\n          image->chromaticity.red_primary.x = 0.0;\n        if (isgreater(image->chromaticity.red_primary.y, 1.0) ||\n            !isgreater(image->chromaticity.red_primary.y, 0.0))\n          image->chromaticity.red_primary.y = 0.0;\n        if (isgreater(image->chromaticity.green_primary.x, 1.0) ||\n            !isgreater(image->chromaticity.green_primary.x, 0.0))\n          image->chromaticity.green_primary.x = 0.0;\n        if (isgreater(image->chromaticity.green_primary.y, 1.0) ||\n            !isgreater(image->chromaticity.green_primary.y, 0.0))\n          image->chromaticity.green_primary.y = 0.0;\n        if (isgreater(image->chromaticity.blue_primary.x, 1.0) ||\n            !isgreater(image->chromaticity.blue_primary.x, 0.0))\n          image->chromaticity.blue_primary.x = 0.0;\n        if (isgreater(image->chromaticity.blue_primary.y, 1.0) ||\n            !isgreater(image->chromaticity.blue_primary.y, 0.0))\n          image->chromaticity.blue_primary.y = 0.0;\n        if (isgreater(bmp_info.gamma_scale.x, 1.0) ||\n            !isgreater(bmp_info.gamma_scale.x, 0.0))\n          bmp_info.gamma_scale.x = 0.0;\n        if (isgreater(bmp_info.gamma_scale.y, 1.0) ||\n            !isgreater(bmp_info.gamma_scale.y, 0.0))\n          bmp_info.gamma_scale.y = 0.0;\n        if (isgreater(bmp_info.gamma_scale.z, 1.0) ||\n            !isgreater(bmp_info.gamma_scale.z, 0.0))\n          bmp_info.gamma_scale.z = 0.0;\n\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.red_primary.x*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.red_primary.y*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          ((1.000-(image->chromaticity.red_primary.x+\n          image->chromaticity.red_primary.y))*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.green_primary.x*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.green_primary.y*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          ((1.000-(image->chromaticity.green_primary.x+\n          image->chromaticity.green_primary.y))*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.blue_primary.x*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (image->chromaticity.blue_primary.y*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          ((1.000-(image->chromaticity.blue_primary.x+\n          image->chromaticity.blue_primary.y))*0x40000000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (bmp_info.gamma_scale.x*0x10000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (bmp_info.gamma_scale.y*0x10000));\n        (void) WriteBlobLSBLong(image,(unsigned int)\n          (bmp_info.gamma_scale.z*0x10000));\n        if ((image->rendering_intent != UndefinedIntent) ||\n            (profile != (StringInfo *) NULL))\n          {\n            ssize_t\n              intent;\n\n            switch ((int) image->rendering_intent)\n            {\n              case SaturationIntent:\n              {\n                intent=LCS_GM_BUSINESS;\n                break;\n              }\n              case RelativeIntent:\n              {\n                intent=LCS_GM_GRAPHICS;\n                break;\n              }\n              case PerceptualIntent:\n              {\n                intent=LCS_GM_IMAGES;\n                break;\n              }\n              case AbsoluteIntent:\n              {\n                intent=LCS_GM_ABS_COLORIMETRIC;\n                break;\n              }\n              default:\n              {\n                intent=0;\n                break;\n              }\n            }\n            (void) WriteBlobLSBLong(image,(unsigned int) intent);\n            (void) WriteBlobLSBLong(image,(unsigned int) profile_data);\n            (void) WriteBlobLSBLong(image,(unsigned int)\n              (profile_size+profile_size_pad));\n            (void) WriteBlobLSBLong(image,0x00);  /* reserved */\n          }\n      }\n    if (image->storage_class == PseudoClass)\n      {\n        unsigned char\n          *bmp_colormap;\n\n        /*\n          Dump colormap to file.\n        */\n        if (image->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"  Colormap: %.20g entries\",(double) image->colors);\n        bmp_colormap=(unsigned char *) AcquireQuantumMemory((size_t) 1UL <<\n          bmp_info.bits_per_pixel,4*sizeof(*bmp_colormap));\n        if (bmp_colormap == (unsigned char *) NULL)\n          {\n            pixel_info=RelinquishVirtualMemory(pixel_info);\n            ThrowWriterException(ResourceLimitError,\"MemoryAllocationFailed\");\n          }\n        q=bmp_colormap;\n        for (i=0; i < MagickMin((ssize_t) image->colors,(ssize_t) bmp_info.number_colors); i++)\n        {\n          *q++=ScaleQuantumToChar(ClampToQuantum(image->colormap[i].blue));\n          *q++=ScaleQuantumToChar(ClampToQuantum(image->colormap[i].green));\n          *q++=ScaleQuantumToChar(ClampToQuantum(image->colormap[i].red));\n          if (type > 2)\n            *q++=(unsigned char) 0x0;\n        }\n        for ( ; i < (ssize_t) 1UL << bmp_info.bits_per_pixel; i++)\n        {\n          *q++=(unsigned char) 0x00;\n          *q++=(unsigned char) 0x00;\n          *q++=(unsigned char) 0x00;\n          if (type > 2)\n            *q++=(unsigned char) 0x00;\n        }\n        if (type <= 2)\n          (void) WriteBlob(image,(size_t) (3*(1L << bmp_info.bits_per_pixel)),\n            bmp_colormap);\n        else\n          (void) WriteBlob(image,(size_t) (4*(1L << bmp_info.bits_per_pixel)),\n            bmp_colormap);\n        bmp_colormap=(unsigned char *) RelinquishMagickMemory(bmp_colormap);\n      }\n    if (image->debug != MagickFalse)\n      (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n        \"  Pixels:  %u bytes\",bmp_info.image_size);\n    (void) WriteBlob(image,(size_t) bmp_info.image_size,pixels);\n    if (profile != (StringInfo *) NULL)\n      {\n        if (image->debug != MagickFalse)\n          (void) LogMagickEvent(CoderEvent,GetMagickModule(),\n            \"  Profile:  %g bytes\",(double) profile_size+profile_size_pad);\n        (void) WriteBlob(image,(size_t) profile_size,\n          GetStringInfoDatum(profile));\n        if (profile_size_pad > 0)  /* padding for 4 bytes multiple */\n          (void) WriteBlob(image,(size_t) profile_size_pad,\"\\0\\0\\0\");\n      }\n    pixel_info=RelinquishVirtualMemory(pixel_info);\n    if (GetNextImageInList(image) == (Image *) NULL)\n      break;\n    image=SyncNextImageInList(image);\n    status=SetImageProgress(image,SaveImagesTag,scene++,number_scenes);\n    if (status == MagickFalse)\n      break;\n  } while (image_info->adjoin != MagickFalse);\n  (void) CloseBlob(image);\n  return(MagickTrue);\n}\n"], "filenames": ["coders/bmp.c"], "buggy_code_start_loc": [704], "buggy_code_end_loc": [704], "fixing_code_start_loc": [705], "fixing_code_end_loc": [708], "type": "CWE-416", "message": "A heap use-after-free flaw was found in coders/bmp.c in ImageMagick.", "other": {"cve": {"id": "CVE-2023-5341", "sourceIdentifier": "secalert@redhat.com", "published": "2023-11-19T10:15:49.433", "lastModified": "2024-02-22T11:15:08.650", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "A heap use-after-free flaw was found in coders/bmp.c in ImageMagick."}, {"lang": "es", "value": "Se encontr\u00f3 una falla de heap-use-after-free en coders/bmp.c en ImageMagick."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.8, "impactScore": 3.6}, {"source": "secalert@redhat.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.5, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-416"}]}, {"source": "secalert@redhat.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-416"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:imagemagick:imagemagick:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.1.2", "matchCriteriaId": "82459EA2-46DA-466E-8095-120474DAD7B9"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:redhat:enterprise_linux:6.0:*:*:*:*:*:*:*", "matchCriteriaId": "2F6AB192-9D7D-4A9A-8995-E53A9DE9EAFC"}, {"vulnerable": false, "criteria": "cpe:2.3:o:redhat:enterprise_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "142AD0DD-4CF3-4D74-9442-459CE3347E3A"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fedoraproject:extra_packages_for_enterprise_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "BB176AC3-3CDA-4DDA-9089-C67B2F73AA62"}, {"vulnerable": true, "criteria": "cpe:2.3:o:fedoraproject:fedora:38:*:*:*:*:*:*:*", "matchCriteriaId": "CC559B26-5DFC-4B7A-A27C-B77DE755DFF9"}]}]}], "references": [{"url": "https://access.redhat.com/security/cve/CVE-2023-5341", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=2241774", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://github.com/ImageMagick/ImageMagick/commit/aa673b2e4defc7cad5bec16c4fc8324f71e531f1", "source": "secalert@redhat.com", "tags": ["Patch"]}, {"url": "https://lists.debian.org/debian-lts-announce/2024/02/msg00007.html", "source": "secalert@redhat.com"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/LICYTADFJAFPZW3Y2MKNCJIUYODPAG4L/", "source": "secalert@redhat.com"}, {"url": "https://lists.fedoraproject.org/archives/list/package-announce@lists.fedoraproject.org/message/YAULDP3GG5KI3XITQ5XSMRSILCBZS2VK/", "source": "secalert@redhat.com"}]}, "github_commit_url": "https://github.com/ImageMagick/ImageMagick/commit/aa673b2e4defc7cad5bec16c4fc8324f71e531f1"}}