{"buggy_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of Cecil.\n *\n * Copyright (c) Arnaud Ligny <arnaud@ligny.fr>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// Router for the PHP built-in server\n// phpcs:disable PSR1.Files.SideEffects\n\nif (!date_default_timezone_get()) {\n    date_default_timezone_set('UTC');\n}\nmb_internal_encoding('UTF-8');\n\ndefine('SERVER_TMP_DIR', '.cecil');\ndefine('DIRECTORY_INDEX', '/index.html');\ndefine('ERROR_404', '/404.html');\n$isIndex = null;\n$mediaSubtypeText = ['javascript', 'xml', 'json', 'ld+json', 'csv'];\n\n$path = urldecode(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH));\n\n// watcher (called by 'livereload.js')\nif ($path == '/watcher') {\n    header(\"Content-Type: text/event-stream\\n\\n\");\n    header('Cache-Control: no-cache');\n    header('Access-Control-Allow-Origin: *');\n    $flagFile = $_SERVER['DOCUMENT_ROOT'] . '/../'.SERVER_TMP_DIR.'/changes.flag';\n    if (file_exists($flagFile)) {\n        echo \"event: reload\\n\";\n        printf(\"data: %s\\n\\n\", file_get_contents($flagFile));\n        unlink($flagFile);\n    }\n    exit();\n}\n\n// 'path' or 'path/' = 'path/index.html'?\nif ((empty(pathinfo($path, PATHINFO_EXTENSION)) || $path[-1] == '/') && file_exists($_SERVER['DOCUMENT_ROOT'] . rtrim($path, '/').DIRECTORY_INDEX)) {\n    $path = rtrim($path, '/') . DIRECTORY_INDEX;\n}\n\n// file absolute path\n$filename = $_SERVER['DOCUMENT_ROOT'] . $path;\n\n// HTTP response: 404\nif (!file_exists($filename) || is_dir($filename)) {\n    http_response_code(404);\n    // favicon.ico\n    if ($path == '/favicon.ico') {\n        header('Content-Type: image/vnd.microsoft.icon');\n\n        return logger(false);\n    }\n\n    // 404.html exists?\n    if (!file_exists($_SERVER['DOCUMENT_ROOT'] . ERROR_404)) {\n        echo <<<END\n        <!doctype html>\n        <html>\n            <head>\n                <title>404 Not Found</title>\n                <style>\n                    html { font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; }\n                    body { background-color: #fcfcfc; color: #333333; margin: 0; padding:0; }\n                    h1 { font-size: 1.5em; font-weight: normal; background-color: #eeeeee; min-height:2em; line-height:2em; border-bottom: 1px inset #d6d6d6; margin: 0; }\n                    h1, p { padding-left: 10px; }\n                    code.url { background-color: #eeeeee; font-family:monospace; padding:0 2px; }\n                </style>\n                <meta http-equiv=\"refresh\" content=\"2;URL=$path\">\n            </head>\n            <body>\n                <h1>Not Found</h1>\n                <p>The requested resource <code class=\"url\">$path</code> was not found on this server.</p>\n            </body>\n        </html>\n        END;\n\n        return logger(true);\n    }\n    $path = ERROR_404;\n    $filename = $_SERVER['DOCUMENT_ROOT'] . ERROR_404;\n}\n\n// HTTP response: 200\n$content = file_get_contents($filename);\n$pathInfo = getPathInfo($path);\n// text content\nif ($pathInfo['media_maintype'] == 'text' || in_array($pathInfo['media_subtype'], $mediaSubtypeText)) {\n    // replaces the \"live\" baseurl by the \"local\" baseurl\n    $baseurl = explode(';', trim(file_get_contents($_SERVER['DOCUMENT_ROOT'] . '/../'.SERVER_TMP_DIR . '/baseurl')));\n    if (strstr($baseurl[0], 'http') !== false || $baseurl[0] != '/') {\n        $content = str_replace($baseurl[0], $baseurl[1], $content);\n    }\n    // HTML content: injects live reload script\n    if ($pathInfo['media_subtype'] == 'html') {\n        if (file_exists(__DIR__.'/livereload.js')) {\n            $script = file_get_contents(__DIR__ . '/livereload.js');\n            $content = str_ireplace('</body>', \"  <script>$script    </script>\\n  </body>\", $content);\n            if (stristr($content, '</body>') === false) {\n                $content .= \"\\n<script>$script    </script>\";\n            }\n        }\n    }\n}\n\n// returns result\nheader('Etag: '.md5_file($filename));\nheader('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');\nheader('Cache-Control: post-check=0, pre-check=0', false);\nheader('Pragma: no-cache');\nheader('X-Powered-By: Cecil,PHP/'.phpversion());\nforeach ($pathInfo['headers'] as $header) {\n    header($header);\n}\necho $content;\n\nreturn logger(true);\n\n/*\n * Functions\n */\n\n// logger + return\nfunction logger(bool $return): bool\n{\n    \\error_log(\n        \\sprintf(\"%s:%d [%d]: %s\\n\", $_SERVER['REMOTE_ADDR'], $_SERVER['REMOTE_PORT'], \\http_response_code(), $_SERVER['REQUEST_URI']),\n        3,\n        $_SERVER['DOCUMENT_ROOT'] . '/../'.SERVER_TMP_DIR . '/server.log'\n    );\n\n    return $return;\n}\n\n// get path info (media type + headers)\nfunction getPathInfo(string $path): array\n{\n    $filename = $_SERVER['DOCUMENT_ROOT'] . $path;\n    $mediaType = \\mime_content_type($filename); // e.g.: \"text/html\"\n    $info = [\n        'media_maintype' => explode('/', $mediaType)[0], // e.g.: \"text\"\n        'media_subtype'  => explode('/', $mediaType)[1], // e.g.: \"html\"\n    ];\n    $info['headers'] = [\n        \"Content-Type: {$info['media_maintype']}/{$info['media_subtype']}\",\n    ];\n    // forces info according to the extension\n    switch (pathinfo($path, PATHINFO_EXTENSION)) {\n        case 'htm':\n        case 'html':\n            $info = [\n                'media_maintype' => 'text',\n                'media_subtype'  => 'html',\n                'headers'        => [\n                    'Content-Type: text/html; charset=utf-8',\n                ],\n            ];\n            break;\n        case 'css':\n            $info['headers'] = [\n                'Content-Type: text/css',\n            ];\n            break;\n        case 'js':\n            $info = [\n                'media_maintype' => 'application',\n                'media_subtype'  => 'javascript',\n                'headers'        => [\n                    'Content-Type: application/javascript',\n                ],\n            ];\n            break;\n        case 'svg':\n            $info['headers'] = [\n                'Content-Type: image/svg+xml',\n            ];\n            break;\n        case 'xml':\n            $info['headers'] = [\n                'Content-Type: application/xml; charset=utf-8',\n                'X-Content-Type-Options: nosniff',\n            ];\n            break;\n        case 'xsl':\n            $info['headers'] = [\n                'Content-Type: application/xslt+xml',\n            ];\n            break;\n        case 'yml':\n        case 'yaml':\n            $info['headers'] = [\n                'Content-Type: application/yaml',\n            ];\n            break;\n    }\n    // forces info according to the media main type\n    switch ($info['media_maintype']) {\n        case 'video':\n        case 'audio':\n            $info['headers'] += [\n                'Content-Transfer-Encoding: binary',\n                'Content-Length: '.filesize($filename),\n                'Accept-Ranges: bytes',\n            ];\n            break;\n    }\n\n    return $info;\n}\n"], "fixing_code": ["<?php\n\ndeclare(strict_types=1);\n\n/*\n * This file is part of Cecil.\n *\n * Copyright (c) Arnaud Ligny <arnaud@ligny.fr>\n *\n * For the full copyright and license information, please view the LICENSE\n * file that was distributed with this source code.\n */\n\n// Router for the PHP built-in server\n// phpcs:disable PSR1.Files.SideEffects\n\nif (!date_default_timezone_get()) {\n    date_default_timezone_set('UTC');\n}\nmb_internal_encoding('UTF-8');\n\ndefine('SERVER_TMP_DIR', '.cecil');\ndefine('DIRECTORY_INDEX', '/index.html');\ndefine('ERROR_404', '/404.html');\n$isIndex = null;\n$mediaSubtypeText = ['javascript', 'xml', 'json', 'ld+json', 'csv'];\n\n$path = htmlspecialchars(urldecode(parse_url($_SERVER['REQUEST_URI'], PHP_URL_PATH)));\n\n// watcher (called by 'livereload.js')\nif ($path == '/watcher') {\n    header(\"Content-Type: text/event-stream\\n\\n\");\n    header('Cache-Control: no-cache');\n    header('Access-Control-Allow-Origin: *');\n    $flagFile = $_SERVER['DOCUMENT_ROOT'] . '/../'.SERVER_TMP_DIR.'/changes.flag';\n    if (file_exists($flagFile)) {\n        echo \"event: reload\\n\";\n        printf(\"data: %s\\n\\n\", file_get_contents($flagFile));\n        unlink($flagFile);\n    }\n    exit();\n}\n\n// 'path' or 'path/' = 'path/index.html'?\nif ((empty(pathinfo($path, PATHINFO_EXTENSION)) || $path[-1] == '/') && file_exists($_SERVER['DOCUMENT_ROOT'] . rtrim($path, '/').DIRECTORY_INDEX)) {\n    $path = rtrim($path, '/') . DIRECTORY_INDEX;\n}\n\n// file absolute path\n$filename = $_SERVER['DOCUMENT_ROOT'] . $path;\n\n// HTTP response: 404\nif ((realpath($filename) === false || strpos(realpath($filename), realpath($_SERVER['DOCUMENT_ROOT'])) !== 0) || !file_exists($filename) || is_dir($filename)) {\n    http_response_code(404);\n    // favicon.ico\n    if ($path == '/favicon.ico') {\n        header('Content-Type: image/vnd.microsoft.icon');\n\n        return logger(false);\n    }\n\n    // 404.html exists?\n    if (!file_exists($_SERVER['DOCUMENT_ROOT'] . ERROR_404)) {\n        echo <<<END\n        <!doctype html>\n        <html>\n            <head>\n                <title>404 Not Found</title>\n                <style>\n                    html { font-family: ui-sans-serif, system-ui, -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, \"Helvetica Neue\", Arial, \"Noto Sans\", sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\", \"Noto Color Emoji\"; }\n                    body { background-color: #fcfcfc; color: #333333; margin: 0; padding:0; }\n                    h1 { font-size: 1.5em; font-weight: normal; background-color: #eeeeee; min-height:2em; line-height:2em; border-bottom: 1px inset #d6d6d6; margin: 0; }\n                    h1, p { padding-left: 10px; }\n                    code.url { background-color: #eeeeee; font-family:monospace; padding:0 2px; }\n                </style>\n                <meta http-equiv=\"refresh\" content=\"2;URL=$path\">\n            </head>\n            <body>\n                <h1>Not Found</h1>\n                <p>The requested resource <code class=\"url\">$path</code> was not found on this server.</p>\n            </body>\n        </html>\n        END;\n\n        return logger(true);\n    }\n    $path = ERROR_404;\n    $filename = $_SERVER['DOCUMENT_ROOT'] . ERROR_404;\n}\n\n// HTTP response: 200\n$content = file_get_contents($filename);\n$pathInfo = getPathInfo($path);\n// text content\nif ($pathInfo['media_maintype'] == 'text' || in_array($pathInfo['media_subtype'], $mediaSubtypeText)) {\n    // replaces the \"live\" baseurl by the \"local\" baseurl\n    $baseurl = explode(';', trim(file_get_contents($_SERVER['DOCUMENT_ROOT'] . '/../'.SERVER_TMP_DIR . '/baseurl')));\n    if (strstr($baseurl[0], 'http') !== false || $baseurl[0] != '/') {\n        $content = str_replace($baseurl[0], $baseurl[1], $content);\n    }\n    // HTML content: injects live reload script\n    if ($pathInfo['media_subtype'] == 'html') {\n        if (file_exists(__DIR__.'/livereload.js')) {\n            $script = file_get_contents(__DIR__ . '/livereload.js');\n            $content = str_ireplace('</body>', \"  <script>$script    </script>\\n  </body>\", $content);\n            if (stristr($content, '</body>') === false) {\n                $content .= \"\\n<script>$script    </script>\";\n            }\n        }\n    }\n}\n\n// returns result\nheader('Etag: '.md5_file($filename));\nheader('Cache-Control: no-store, no-cache, must-revalidate, max-age=0');\nheader('Cache-Control: post-check=0, pre-check=0', false);\nheader('Pragma: no-cache');\nheader('X-Powered-By: Cecil,PHP/'.phpversion());\nforeach ($pathInfo['headers'] as $header) {\n    header($header);\n}\necho $content;\n\nreturn logger(true);\n\n/*\n * Functions\n */\n\n// logger + return\nfunction logger(bool $return): bool\n{\n    \\error_log(\n        \\sprintf(\"%s:%d [%d]: %s\\n\", $_SERVER['REMOTE_ADDR'], $_SERVER['REMOTE_PORT'], \\http_response_code(), $_SERVER['REQUEST_URI']),\n        3,\n        $_SERVER['DOCUMENT_ROOT'] . '/../'.SERVER_TMP_DIR . '/server.log'\n    );\n\n    return $return;\n}\n\n// get path info (media type + headers)\nfunction getPathInfo(string $path): array\n{\n    $filename = $_SERVER['DOCUMENT_ROOT'] . $path;\n    $mediaType = \\mime_content_type($filename); // e.g.: \"text/html\"\n    $info = [\n        'media_maintype' => explode('/', $mediaType)[0], // e.g.: \"text\"\n        'media_subtype'  => explode('/', $mediaType)[1], // e.g.: \"html\"\n    ];\n    $info['headers'] = [\n        \"Content-Type: {$info['media_maintype']}/{$info['media_subtype']}\",\n    ];\n    // forces info according to the extension\n    switch (pathinfo($path, PATHINFO_EXTENSION)) {\n        case 'htm':\n        case 'html':\n            $info = [\n                'media_maintype' => 'text',\n                'media_subtype'  => 'html',\n                'headers'        => [\n                    'Content-Type: text/html; charset=utf-8',\n                ],\n            ];\n            break;\n        case 'css':\n            $info['headers'] = [\n                'Content-Type: text/css',\n            ];\n            break;\n        case 'js':\n            $info = [\n                'media_maintype' => 'application',\n                'media_subtype'  => 'javascript',\n                'headers'        => [\n                    'Content-Type: application/javascript',\n                ],\n            ];\n            break;\n        case 'svg':\n            $info['headers'] = [\n                'Content-Type: image/svg+xml',\n            ];\n            break;\n        case 'xml':\n            $info['headers'] = [\n                'Content-Type: application/xml; charset=utf-8',\n                'X-Content-Type-Options: nosniff',\n            ];\n            break;\n        case 'xsl':\n            $info['headers'] = [\n                'Content-Type: application/xslt+xml',\n            ];\n            break;\n        case 'yml':\n        case 'yaml':\n            $info['headers'] = [\n                'Content-Type: application/yaml',\n            ];\n            break;\n    }\n    // forces info according to the media main type\n    switch ($info['media_maintype']) {\n        case 'video':\n        case 'audio':\n            $info['headers'] += [\n                'Content-Transfer-Encoding: binary',\n                'Content-Length: '.filesize($filename),\n                'Accept-Ranges: bytes',\n            ];\n            break;\n    }\n\n    return $info;\n}\n"], "filenames": ["resources/server/router.php"], "buggy_code_start_loc": [28], "buggy_code_end_loc": [54], "fixing_code_start_loc": [28], "fixing_code_end_loc": [54], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Reflected in GitHub repository cecilapp/cecil prior to 7.47.1.", "other": {"cve": {"id": "CVE-2023-4913", "sourceIdentifier": "security@huntr.dev", "published": "2023-09-12T15:15:24.447", "lastModified": "2023-09-14T00:44:04.400", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Reflected in GitHub repository cecilapp/cecil prior to 7.47.1."}, {"lang": "es", "value": "Cross-site Scripting (XSS) Reflejado en el repositorio de GitHub cecilapp/cecil antes de 7.47.1."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:cecil:cecil:*:*:*:*:*:*:*:*", "versionStartIncluding": "7.27.3", "versionEndExcluding": "7.47.1", "matchCriteriaId": "D81CDA31-9624-412B-9269-EE19CCDB1FB8"}]}]}], "references": [{"url": "https://github.com/cecilapp/cecil/commit/00dc79f10ce723034b7140d79f4ac731d1d902eb", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/d2a9ec4d-1b4b-470b-87da-ec069f5925ae", "source": "security@huntr.dev", "tags": ["Exploit"]}]}, "github_commit_url": "https://github.com/cecilapp/cecil/commit/00dc79f10ce723034b7140d79f4ac731d1d902eb"}}