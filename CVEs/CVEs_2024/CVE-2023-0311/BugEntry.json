{"buggy_code": ["<?php\n\n/**\n * The phpMyFAQ Captcha class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thomas Zeithaml <seo@annatom.de>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-02-04\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\n\n/**\n * Class Captcha\n *\n * @package phpMyFAQ\n */\nclass Captcha\n{\n    /**\n     * Length of the captcha code.\n     *\n     * @var int\n     */\n    public $captchaLength = 6;\n\n    /**\n     * @var Configuration\n     */\n    private $config;\n\n    /**\n     * The phpMyFAQ session id.\n     *\n     * @var string\n     */\n    private $sids;\n\n    /** @var bool */\n    private $userIsLoggedIn = false;\n\n    /**\n     * Array of fonts.\n     * @var array\n     */\n    private $fonts;\n\n    /**\n     * The captcha code.\n     * @var string\n     */\n    private $code = '';\n\n    /**\n     * Array of characters.\n     * @var array\n     */\n    private $letters = [\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        'A',\n        'B',\n        'C',\n        'D',\n        'E',\n        'F',\n        'G',\n        'H',\n        'I',\n        'J',\n        'K',\n        'L',\n        'M',\n        'N',\n        'O',\n        'P',\n        'Q',\n        'R',\n        'S',\n        'T',\n        'U',\n        'V',\n        'W',\n        'X',\n        'Y',\n        'Z',\n    ];\n\n    /**\n     * Width of the image.\n     * @var int\n     */\n    private $width = 165;\n\n    /**\n     * Height of the image.\n     * @var int\n     */\n    private $height = 40;\n\n    /**\n     * JPEG quality in percents.\n     * @var int\n     */\n    private $quality = 60;\n\n    /** @var array */\n    private $backgroundColor;\n\n    /** @var resource */\n    private $img;\n\n    /** @var string */\n    private $userAgent;\n\n    /** @var int */\n    private $timestamp;\n\n    /** @var string */\n    private $ip;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n        $this->userAgent = $_SERVER['HTTP_USER_AGENT'];\n        $this->ip = $_SERVER['REMOTE_ADDR'];\n        $this->fonts = $this->getFonts();\n        $this->timestamp = $_SERVER['REQUEST_TIME'];\n    }\n\n    /**\n     * Get Fonts.\n     *\n     * @return array\n     */\n    private function getFonts(): array\n    {\n        return glob(PMF_ROOT_DIR . '/assets/fonts/*.ttf');\n    }\n\n    /**\n     * Setter for session id.\n     *\n     * @param string $sid session id\n     * @return Captcha\n     */\n    public function setSessionId(string $sid): Captcha\n    {\n        $this->sids = $sid;\n        return $this;\n    }\n\n    /**\n     * @return bool\n     */\n    public function isUserIsLoggedIn(): bool\n    {\n        return $this->userIsLoggedIn;\n    }\n\n    /**\n     * @param bool $userIsLoggedIn\n     * @return Captcha\n     */\n    public function setUserIsLoggedIn(bool $userIsLoggedIn): Captcha\n    {\n        $this->userIsLoggedIn = $userIsLoggedIn;\n        return $this;\n    }\n\n    /**\n     * Gives the HTML output code for the Captcha.\n     *\n     * @param string $action The action parameter\n     *\n     * @return string\n     */\n    public function renderCaptchaImage(string $action): string\n    {\n        return sprintf(\n            '<img id=\"captchaImage\" src=\"%s?%saction=%s&amp;gen=img&amp;ck=%s\" height=\"%d\" width=\"%d\" alt=\"%s\">',\n            $_SERVER['SCRIPT_NAME'],\n            $this->sids,\n            $action,\n            $_SERVER['REQUEST_TIME'],\n            $this->height,\n            $this->width,\n            'Chuck Norris has counted to infinity. Twice.'\n        );\n    }\n\n    /**\n     * Draw the Captcha.\n     *\n     * @throws Exception\n     */\n    public function drawCaptchaImage()\n    {\n        $this->createBackground();\n        $this->drawLines();\n        $this->generateCaptchaCode($this->captchaLength);\n        $this->drawText();\n        if (function_exists('imagejpeg')) {\n            header('Content-Type: image/jpeg');\n            imagejpeg($this->img, null, (int)$this->quality);\n        } elseif (function_exists('imagegif')) {\n            header('Content-Type: image/gif');\n            imagegif($this->img);\n        }\n        imagedestroy($this->img);\n    }\n\n    /**\n     * Create the background.\n     *\n     * @return resource\n     * @throws Exception\n     */\n    private function createBackground()\n    {\n        $this->img = imagecreate($this->width, $this->height);\n        $this->backgroundColor['r'] = random_int(222, 255);\n        $this->backgroundColor['g'] = random_int(222, 255);\n        $this->backgroundColor['b'] = random_int(222, 255);\n\n        $colorAllocate = imagecolorallocate(\n            $this->img,\n            $this->backgroundColor['r'],\n            $this->backgroundColor['g'],\n            $this->backgroundColor['b']\n        );\n\n        imagefilledrectangle($this->img, 0, 0, $this->width, $this->height, $colorAllocate);\n\n        return $this->img;\n    }\n\n    /**\n     * Draw random lines.\n     *\n     * @return resource\n     * @throws Exception\n     */\n    private function drawLines()\n    {\n        $color1 = random_int(150, 185);\n        $color2 = random_int(185, 225);\n        $nextLine = 4;\n        $w1 = 0;\n        $w2 = 0;\n\n        for ($x = 0; $x < $this->width; $x += $nextLine) {\n            if ($x < $this->width) {\n                imageline($this->img, $x + $w1, 0, $x + $w2, $this->height - 1, random_int($color1, $color2));\n            }\n            if ($x < $this->height) {\n                imageline($this->img, 0, $x - $w2, $this->width - 1, $x - $w1, random_int($color1, $color2));\n            }\n            if (function_exists('imagettftext') && (count($this->fonts) > 0)) {\n                $nextLine += random_int(-5, 7);\n                if ($nextLine < 1) {\n                    $nextLine = 2;\n                }\n            } else {\n                $nextLine += random_int(1, 7);\n            }\n            $w1 += random_int(-4, 4);\n            $w2 += random_int(-4, 4);\n        }\n\n        return $this->img;\n    }\n\n    /**\n     * Generate a Captcha Code.\n     * Start garbage collector for removing old (==unresolved) captcha codes\n     * Note that we would like to avoid performing any garbaging of old records\n     * because these data could be used as a database for collecting ip addresses,\n     * eventually organizing them in subnetwork addresses, in order to use\n     * them as an input for PMF IP banning.\n     * This because we always perform these 3 checks on the public forms\n     * in which captcha code feature is attached:\n     *   1. Check against IP/Network address\n     *   2. Check against banned words\n     *   3. Check against the captcha code\n     * so you could ban those \"users\" at the address level (1.).\n     * If you want to look over your current data you could use this SQL query below:\n     *   SELECT DISTINCT ip, useragent, COUNT(ip) AS times\n     *   FROM faqcaptcha\n     *   GROUP BY ip\n     *   ORDER BY times DESC\n     * to find out *bots and human attempts\n     *\n     * @param int $capLength Length of captcha code\n     * @return string\n     * @throws Exception\n     */\n    private function generateCaptchaCode(int $capLength): string\n    {\n        $this->garbageCollector();\n\n        // Create the captcha code\n        for ($i = 1; $i <= $capLength; ++$i) {\n            $this->code .= $this->letters[random_int(0, 34)];\n        }\n        if (!$this->saveCaptcha()) {\n            return $this->generateCaptchaCode($capLength);\n        }\n\n        return $this->code;\n    }\n\n    /**\n     * Delete old captcha records.\n     *\n     * During normal use the <b>faqcaptcha</b> table would be empty, on average:\n     * each record is created when a captcha image is showed to the user\n     * and deleted upon a successful matching, so, on average, a record\n     * in this table is probably related to a spam attack.\n     *\n     * @param int $time The time (sec) to define a captcha code old and ready\n     *                  to be deleted (default: 1 week)\n     */\n    private function garbageCollector(int $time = 604800)\n    {\n        $delete = sprintf(\n            '\n            DELETE FROM \n                %sfaqcaptcha \n            WHERE \n                captcha_time < %d',\n            Database::getTablePrefix(),\n            $_SERVER['REQUEST_TIME'] - $time\n        );\n\n        $this->config->getDb()->query($delete);\n\n        $delete = sprintf(\n            \"\n            DELETE FROM\n                %sfaqcaptcha\n            WHERE\n                useragent = '%s' AND language = '%s' AND ip = '%s'\",\n            Database::getTablePrefix(),\n            $this->userAgent,\n            $this->config->getLanguage()->getLanguage(),\n            $this->ip\n        );\n\n        $this->config->getDb()->query($delete);\n    }\n\n    /**\n     * Save the Captcha.\n     *\n     * @return bool\n     */\n    private function saveCaptcha(): bool\n    {\n        $select = sprintf(\n            \"\n           SELECT \n               id \n           FROM \n               %sfaqcaptcha \n           WHERE \n               id = '%s'\",\n            Database::getTablePrefix(),\n            $this->code\n        );\n\n        $result = $this->config->getDb()->query($select);\n\n        if ($result) {\n            $num = $this->config->getDb()->numRows($result);\n            if ($num > 0) {\n                return false;\n            } else {\n                $insert = sprintf(\n                    \"\n                    INSERT INTO \n                        %sfaqcaptcha \n                    (id, useragent, language, ip, captcha_time) \n                        VALUES \n                    ('%s', '%s', '%s', '%s', %d)\",\n                    Database::getTablePrefix(),\n                    $this->code,\n                    $this->userAgent,\n                    $this->config->getLanguage()->getLanguage(),\n                    $this->ip,\n                    $this->timestamp\n                );\n\n                $this->config->getDb()->query($insert);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Draw the Text.\n     *\n     * @return resource\n     * @throws Exception\n     */\n    private function drawText()\n    {\n        $codeLength = Strings::strlen($this->code);\n        $numFonts = count($this->fonts);\n        $w1 = 15;\n        $w2 = $this->width / ($codeLength + 1);\n\n        for ($p = 0; $p < $codeLength; ++$p) {\n            $letter = $this->code[$p];\n            $size = random_int(18, $this->height - 5);\n            $rotation = random_int(-23, 23);\n            $y = random_int($size, $this->height + 5);\n            $x = $w1 + $w2 * $p;\n            $foreColor = [];\n            $backColor = [];\n\n            do {\n                $foreColor['r'] = random_int(30, 199);\n            } while ($foreColor['r'] === $this->backgroundColor['r']);\n            do {\n                $foreColor['g'] = random_int(30, 199);\n            } while ($foreColor['g'] === $this->backgroundColor['g']);\n            do {\n                $foreColor['b'] = random_int(30, 199);\n            } while ($foreColor['b'] === $this->backgroundColor['b']);\n            $colorOne = imagecolorallocate($this->img, $foreColor['r'], $foreColor['g'], $foreColor['b']);\n\n            do {\n                $backColor['r'] = ((int)$foreColor['r'] < 100 ? (int)$foreColor['r'] * 2 : random_int(30, 99));\n            } while (($backColor['r'] === $this->backgroundColor['r']) && ($backColor['r'] === $foreColor['r']));\n            do {\n                $backColor['g'] = ((int)$foreColor['g'] < 100 ? (int)$foreColor['g'] * 2 : random_int(30, 199));\n            } while (($backColor['g'] === $this->backgroundColor['g']) && ($backColor['g'] === $foreColor['g']));\n            do {\n                $backColor['b'] = ((int)$foreColor['b'] < 100 ? (int)$foreColor['b'] * 2 : random_int(90, 199));\n            } while (($backColor['b'] === $this->backgroundColor['b']) && ($backColor['b'] === $foreColor['b']));\n            $colorTwo = imagecolorallocate($this->img, $backColor['r'], $backColor['g'], $backColor['b']);\n\n            // Add the letter\n            if (function_exists('imagettftext') && ($numFonts > 0)) {\n                $font = $this->fonts[random_int(0, $numFonts - 1)];\n                imagettftext($this->img, $size, $rotation, $x + 2, $y, $colorOne, $font, $letter);\n                imagettftext($this->img, $size, $rotation, $x + 1, $y + 1, $colorOne, $font, $letter);\n                imagettftext($this->img, $size, $rotation, $x, $y - 2, $colorTwo, $font, $letter);\n            } else {\n                $size = 5;\n                $c3 = imagecolorallocate($this->img, 0, 0, 255);\n                $x = 20;\n                $y = 12;\n                $s = 30;\n                imagestring($this->img, $size, $x + 1 + ($s * $p), $y + 1, $letter, $c3);\n                imagestring($this->img, $size, $x + ($s * $p), $y, $letter, $colorOne);\n            }\n        }\n\n        return $this->img;\n    }\n\n    /**\n     * This function checks the provided captcha code\n     * if the captcha code spam protection has been activated from the general PMF configuration.\n     *\n     * @param string $code Captcha Code\n     * @return bool\n     */\n    public function checkCaptchaCode(string $code): bool\n    {\n        if ($this->isUserIsLoggedIn()) {\n            return true;\n        }\n        if ($this->config->get('spam.enableCaptchaCode')) {\n            return $this->validateCaptchaCode($code);\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Validate the Captcha.\n     *\n     * @param string $captchaCode Captcha code\n     * @return bool\n     */\n    public function validateCaptchaCode(string $captchaCode): bool\n    {\n        // Sanity check\n        if (0 === Strings::strlen($captchaCode)) {\n            return false;\n        }\n\n        $captchaCode = Strings::strtoupper($captchaCode);\n        // Help the user: treat \"0\" (ASCII 48) like \"O\" (ASCII 79)\n        //                if \"0\" is not in the realm of captcha code letters\n        if (!in_array('0', $this->letters)) {\n            $captchaCode = str_replace('0', 'O', $captchaCode);\n        }\n        // Sanity check\n        for ($i = 0; $i < Strings::strlen($captchaCode); ++$i) {\n            if (!in_array($captchaCode[$i], $this->letters)) {\n                return false;\n            }\n        }\n        // Search for this Captcha in the db\n        $query = sprintf(\n            \"\n            SELECT\n                id\n            FROM\n                %sfaqcaptcha\n            WHERE\n                id = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($captchaCode)\n        );\n\n        if ($result = $this->config->getDb()->query($query)) {\n            $num = $this->config->getDb()->numRows($result);\n            if ($num > 0) {\n                $this->code = $captchaCode;\n                $this->removeCaptcha($captchaCode);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Remove the Captcha.\n     *\n     * @param string $captchaCode Captcha code\n     */\n    private function removeCaptcha($captchaCode = null)\n    {\n        if ($captchaCode == null) {\n            $captchaCode = $this->code;\n        }\n        $query = sprintf(\"DELETE FROM %sfaqcaptcha WHERE id = '%s'\", Database::getTablePrefix(), $captchaCode);\n        $this->config->getDb()->query($query);\n    }\n}\n"], "fixing_code": ["<?php\n\n/**\n * The phpMyFAQ Captcha class.\n *\n * This Source Code Form is subject to the terms of the Mozilla Public License,\n * v. 2.0. If a copy of the MPL was not distributed with this file, You can\n * obtain one at http://mozilla.org/MPL/2.0/.\n *\n * @package   phpMyFAQ\n * @author    Thomas Zeithaml <seo@annatom.de>\n * @author    Thorsten Rinne <thorsten@phpmyfaq.de>\n * @author    Matteo Scaramuccia <matteo@scaramuccia.com>\n * @copyright 2006-2022 phpMyFAQ Team\n * @license   http://www.mozilla.org/MPL/2.0/ Mozilla Public License Version 2.0\n * @link      https://www.phpmyfaq.de\n * @since     2006-02-04\n */\n\nnamespace phpMyFAQ;\n\nuse Exception;\n\n/**\n * Class Captcha\n *\n * @package phpMyFAQ\n */\nclass Captcha\n{\n    /**\n     * Length of the captcha code.\n     *\n     * @var int\n     */\n    public $captchaLength = 6;\n\n    /**\n     * @var Configuration\n     */\n    private $config;\n\n    /**\n     * The phpMyFAQ session id.\n     *\n     * @var string\n     */\n    private $sids;\n\n    /** @var bool */\n    private $userIsLoggedIn = false;\n\n    /**\n     * Array of fonts.\n     * @var array\n     */\n    private $fonts;\n\n    /**\n     * The captcha code.\n     * @var string\n     */\n    private $code = '';\n\n    /**\n     * Array of characters.\n     * @var array\n     */\n    private $letters = [\n        '1',\n        '2',\n        '3',\n        '4',\n        '5',\n        '6',\n        '7',\n        '8',\n        '9',\n        'A',\n        'B',\n        'C',\n        'D',\n        'E',\n        'F',\n        'G',\n        'H',\n        'I',\n        'J',\n        'K',\n        'L',\n        'M',\n        'N',\n        'O',\n        'P',\n        'Q',\n        'R',\n        'S',\n        'T',\n        'U',\n        'V',\n        'W',\n        'X',\n        'Y',\n        'Z',\n    ];\n\n    /**\n     * Width of the image.\n     * @var int\n     */\n    private $width = 165;\n\n    /**\n     * Height of the image.\n     * @var int\n     */\n    private $height = 40;\n\n    /**\n     * JPEG quality in percents.\n     * @var int\n     */\n    private $quality = 60;\n\n    /** @var array */\n    private $backgroundColor;\n\n    /** @var resource */\n    private $img;\n\n    /** @var string */\n    private $userAgent;\n\n    /** @var int */\n    private $timestamp;\n\n    /** @var string */\n    private $ip;\n\n    /**\n     * Constructor.\n     *\n     * @param Configuration $config\n     */\n    public function __construct(Configuration $config)\n    {\n        $this->config = $config;\n        $this->userAgent = $_SERVER['HTTP_USER_AGENT'];\n        $this->ip = $_SERVER['REMOTE_ADDR'];\n        $this->fonts = $this->getFonts();\n        $this->timestamp = $_SERVER['REQUEST_TIME'];\n    }\n\n    /**\n     * Get Fonts.\n     *\n     * @return array\n     */\n    private function getFonts(): array\n    {\n        return glob(PMF_ROOT_DIR . '/assets/fonts/*.ttf');\n    }\n\n    /**\n     * Setter for session id.\n     *\n     * @param string $sid session id\n     * @return Captcha\n     */\n    public function setSessionId(string $sid): Captcha\n    {\n        $this->sids = $sid;\n        return $this;\n    }\n\n    /**\n     * @return bool\n     */\n    public function isUserIsLoggedIn(): bool\n    {\n        return $this->userIsLoggedIn;\n    }\n\n    /**\n     * @param bool $userIsLoggedIn\n     * @return Captcha\n     */\n    public function setUserIsLoggedIn(bool $userIsLoggedIn): Captcha\n    {\n        $this->userIsLoggedIn = $userIsLoggedIn;\n        return $this;\n    }\n\n    /**\n     * Gives the HTML output code for the Captcha.\n     *\n     * @param string $action The action parameter\n     *\n     * @return string\n     */\n    public function renderCaptchaImage(string $action): string\n    {\n        return sprintf(\n            '<img id=\"captchaImage\" src=\"%s?%saction=%s&amp;gen=img&amp;ck=%s\" height=\"%d\" width=\"%d\" alt=\"%s\">',\n            $_SERVER['SCRIPT_NAME'],\n            $this->sids,\n            $action,\n            $_SERVER['REQUEST_TIME'],\n            $this->height,\n            $this->width,\n            'Chuck Norris has counted to infinity. Twice.'\n        );\n    }\n\n    /**\n     * Draw the Captcha.\n     *\n     * @throws Exception\n     */\n    public function drawCaptchaImage()\n    {\n        $this->createBackground();\n        $this->drawLines();\n        $this->generateCaptchaCode($this->captchaLength);\n        $this->drawText();\n        if (function_exists('imagejpeg')) {\n            header('Content-Type: image/jpeg');\n            imagejpeg($this->img, null, (int)$this->quality);\n        } elseif (function_exists('imagegif')) {\n            header('Content-Type: image/gif');\n            imagegif($this->img);\n        }\n        imagedestroy($this->img);\n    }\n\n    /**\n     * Create the background.\n     *\n     * @return resource\n     * @throws Exception\n     */\n    private function createBackground()\n    {\n        $this->img = imagecreate($this->width, $this->height);\n        $this->backgroundColor['r'] = random_int(222, 255);\n        $this->backgroundColor['g'] = random_int(222, 255);\n        $this->backgroundColor['b'] = random_int(222, 255);\n\n        $colorAllocate = imagecolorallocate(\n            $this->img,\n            $this->backgroundColor['r'],\n            $this->backgroundColor['g'],\n            $this->backgroundColor['b']\n        );\n\n        imagefilledrectangle($this->img, 0, 0, $this->width, $this->height, $colorAllocate);\n\n        return $this->img;\n    }\n\n    /**\n     * Draw random lines.\n     *\n     * @return resource\n     * @throws Exception\n     */\n    private function drawLines()\n    {\n        $color1 = random_int(150, 185);\n        $color2 = random_int(185, 225);\n        $nextLine = 4;\n        $w1 = 0;\n        $w2 = 0;\n\n        for ($x = 0; $x < $this->width; $x += $nextLine) {\n            if ($x < $this->width) {\n                imageline($this->img, $x + $w1, 0, $x + $w2, $this->height - 1, random_int($color1, $color2));\n            }\n            if ($x < $this->height) {\n                imageline($this->img, 0, $x - $w2, $this->width - 1, $x - $w1, random_int($color1, $color2));\n            }\n            if (function_exists('imagettftext') && (count($this->fonts) > 0)) {\n                $nextLine += random_int(-5, 7);\n                if ($nextLine < 1) {\n                    $nextLine = 2;\n                }\n            } else {\n                $nextLine += random_int(1, 7);\n            }\n            $w1 += random_int(-4, 4);\n            $w2 += random_int(-4, 4);\n        }\n\n        return $this->img;\n    }\n\n    /**\n     * Generate a Captcha Code.\n     * Start garbage collector for removing old (==unresolved) captcha codes\n     * Note that we would like to avoid performing any garbaging of old records\n     * because these data could be used as a database for collecting ip addresses,\n     * eventually organizing them in subnetwork addresses, in order to use\n     * them as an input for PMF IP banning.\n     * This because we always perform these 3 checks on the public forms\n     * in which captcha code feature is attached:\n     *   1. Check against IP/Network address\n     *   2. Check against banned words\n     *   3. Check against the captcha code\n     * so you could ban those \"users\" at the address level (1.).\n     * If you want to look over your current data you could use this SQL query below:\n     *   SELECT DISTINCT ip, useragent, COUNT(ip) AS times\n     *   FROM faqcaptcha\n     *   GROUP BY ip\n     *   ORDER BY times DESC\n     * to find out *bots and human attempts\n     *\n     * @param int $capLength Length of captcha code\n     * @return string\n     * @throws Exception\n     */\n    private function generateCaptchaCode(int $capLength): string\n    {\n        $this->garbageCollector();\n\n        // Create the captcha code\n        for ($i = 1; $i <= $capLength; ++$i) {\n            $this->code .= $this->letters[random_int(0, 34)];\n        }\n        if (!$this->saveCaptcha()) {\n            return $this->generateCaptchaCode($capLength);\n        }\n\n        return $this->code;\n    }\n\n    /**\n     * Delete old captcha records.\n     *\n     * During normal use the <b>faqcaptcha</b> table would be empty, on average:\n     * each record is created when a captcha image is showed to the user\n     * and deleted upon a successful matching, so, on average, a record\n     * in this table is probably related to a spam attack.\n     *\n     * @param int $time The time (sec) to define a captcha code old and ready\n     *                  to be deleted (default: 1 week)\n     */\n    private function garbageCollector(int $time = 604800)\n    {\n        $delete = sprintf(\n            '\n            DELETE FROM \n                %sfaqcaptcha \n            WHERE \n                captcha_time < %d',\n            Database::getTablePrefix(),\n            $_SERVER['REQUEST_TIME'] - $time\n        );\n\n        $this->config->getDb()->query($delete);\n\n        $delete = sprintf(\n            \"\n            DELETE FROM\n                %sfaqcaptcha\n            WHERE\n                useragent = '%s' AND language = '%s' AND ip = '%s'\",\n            Database::getTablePrefix(),\n            $this->userAgent,\n            $this->config->getLanguage()->getLanguage(),\n            $this->ip\n        );\n\n        $this->config->getDb()->query($delete);\n    }\n\n    /**\n     * Save the Captcha.\n     *\n     * @return bool\n     */\n    private function saveCaptcha(): bool\n    {\n        $select = sprintf(\n            \"\n           SELECT \n               id \n           FROM \n               %sfaqcaptcha \n           WHERE \n               id = '%s'\",\n            Database::getTablePrefix(),\n            $this->code\n        );\n\n        $result = $this->config->getDb()->query($select);\n\n        if ($result) {\n            $num = $this->config->getDb()->numRows($result);\n            if ($num > 0) {\n                return false;\n            } else {\n                $insert = sprintf(\n                    \"\n                    INSERT INTO \n                        %sfaqcaptcha \n                    (id, useragent, language, ip, captcha_time) \n                        VALUES \n                    ('%s', '%s', '%s', '%s', %d)\",\n                    Database::getTablePrefix(),\n                    $this->code,\n                    $this->userAgent,\n                    $this->config->getLanguage()->getLanguage(),\n                    $this->ip,\n                    $this->timestamp\n                );\n\n                $this->config->getDb()->query($insert);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Draw the Text.\n     *\n     * @return resource\n     * @throws Exception\n     */\n    private function drawText()\n    {\n        $codeLength = Strings::strlen($this->code);\n        $numFonts = count($this->fonts);\n        $w1 = 15;\n        $w2 = floor($this->width / ($codeLength + 1));\n\n        for ($p = 0; $p < $codeLength; ++$p) {\n            $letter = $this->code[$p];\n            $size = random_int(18, $this->height - 5);\n            $rotation = random_int(-23, 23);\n            $y = random_int($size, $this->height + 5);\n            $x = $w1 + $w2 * $p;\n            $foreColor = [];\n            $backColor = [];\n\n            do {\n                $foreColor['r'] = random_int(30, 199);\n            } while ($foreColor['r'] === $this->backgroundColor['r']);\n            do {\n                $foreColor['g'] = random_int(30, 199);\n            } while ($foreColor['g'] === $this->backgroundColor['g']);\n            do {\n                $foreColor['b'] = random_int(30, 199);\n            } while ($foreColor['b'] === $this->backgroundColor['b']);\n            $colorOne = imagecolorallocate($this->img, $foreColor['r'], $foreColor['g'], $foreColor['b']);\n\n            do {\n                $backColor['r'] = ((int)$foreColor['r'] < 100 ? (int)$foreColor['r'] * 2 : random_int(30, 99));\n            } while (($backColor['r'] === $this->backgroundColor['r']) && ($backColor['r'] === $foreColor['r']));\n            do {\n                $backColor['g'] = ((int)$foreColor['g'] < 100 ? (int)$foreColor['g'] * 2 : random_int(30, 199));\n            } while (($backColor['g'] === $this->backgroundColor['g']) && ($backColor['g'] === $foreColor['g']));\n            do {\n                $backColor['b'] = ((int)$foreColor['b'] < 100 ? (int)$foreColor['b'] * 2 : random_int(90, 199));\n            } while (($backColor['b'] === $this->backgroundColor['b']) && ($backColor['b'] === $foreColor['b']));\n            $colorTwo = imagecolorallocate($this->img, $backColor['r'], $backColor['g'], $backColor['b']);\n\n            // Add the letter\n            if (function_exists('imagettftext') && ($numFonts > 0)) {\n                $font = $this->fonts[random_int(0, $numFonts - 1)];\n                imagettftext($this->img, $size, $rotation, $x + 2, $y, $colorOne, $font, $letter);\n                imagettftext($this->img, $size, $rotation, $x + 1, $y + 1, $colorOne, $font, $letter);\n                imagettftext($this->img, $size, $rotation, $x, $y - 2, $colorTwo, $font, $letter);\n            } else {\n                $size = 5;\n                $c3 = imagecolorallocate($this->img, 0, 0, 255);\n                $x = 20;\n                $y = 12;\n                $s = 30;\n                imagestring($this->img, $size, $x + 1 + ($s * $p), $y + 1, $letter, $c3);\n                imagestring($this->img, $size, $x + ($s * $p), $y, $letter, $colorOne);\n            }\n        }\n\n        return $this->img;\n    }\n\n    /**\n     * This function checks the provided captcha code\n     * if the captcha code spam protection has been activated from the general PMF configuration.\n     *\n     * @param string $code Captcha Code\n     * @return bool\n     */\n    public function checkCaptchaCode(string $code): bool\n    {\n        if ($this->isUserIsLoggedIn()) {\n            return true;\n        }\n        if ($this->config->get('spam.enableCaptchaCode')) {\n            return $this->validateCaptchaCode($code);\n        } else {\n            return true;\n        }\n    }\n\n    /**\n     * Validate the Captcha.\n     *\n     * @param string $captchaCode Captcha code\n     * @return bool\n     */\n    public function validateCaptchaCode(string $captchaCode): bool\n    {\n        // Sanity check\n        if (Strings::strlen($captchaCode) !== $this->captchaLength) {\n            return false;\n        }\n\n        $captchaCode = Strings::strtoupper($captchaCode);\n        // Help the user: treat \"0\" (ASCII 48) like \"O\" (ASCII 79)\n        //                if \"0\" is not in the realm of captcha code letters\n        if (!in_array('0', $this->letters)) {\n            $captchaCode = str_replace('0', 'O', $captchaCode);\n        }\n        // Sanity check\n        for ($i = 0; $i < Strings::strlen($captchaCode); ++$i) {\n            if (!in_array($captchaCode[$i], $this->letters)) {\n                return false;\n            }\n        }\n        // Search for this Captcha in the db\n        $query = sprintf(\n            \"\n            SELECT\n                id\n            FROM\n                %sfaqcaptcha\n            WHERE\n                id = '%s'\",\n            Database::getTablePrefix(),\n            $this->config->getDb()->escape($captchaCode)\n        );\n\n        if ($result = $this->config->getDb()->query($query)) {\n            $num = $this->config->getDb()->numRows($result);\n            if ($num > 0) {\n                $this->code = $captchaCode;\n                $this->removeCaptcha($captchaCode);\n\n                return true;\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Remove the Captcha.\n     *\n     * @param string $captchaCode Captcha code\n     */\n    private function removeCaptcha($captchaCode = null)\n    {\n        if ($captchaCode == null) {\n            $captchaCode = $this->code;\n        }\n        $query = sprintf(\"DELETE FROM %sfaqcaptcha WHERE id = '%s'\", Database::getTablePrefix(), $captchaCode);\n        $this->config->getDb()->query($query);\n    }\n}\n"], "filenames": ["phpmyfaq/src/phpMyFAQ/Captcha.php"], "buggy_code_start_loc": [437], "buggy_code_end_loc": [519], "fixing_code_start_loc": [437], "fixing_code_end_loc": [519], "type": "CWE-287", "message": "Improper Authentication in GitHub repository thorsten/phpmyfaq prior to 3.1.10.", "other": {"cve": {"id": "CVE-2023-0311", "sourceIdentifier": "security@huntr.dev", "published": "2023-01-15T22:15:10.810", "lastModified": "2023-01-23T14:49:29.140", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Authentication in GitHub repository thorsten/phpmyfaq prior to 3.1.10."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "LOW", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 3.9, "impactScore": 1.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpmyfaq:phpmyfaq:*:*:*:*:*:*:*:*", "versionEndExcluding": "3.1.10", "matchCriteriaId": "184FE56D-4BA2-499C-9F30-C0B5A2EE2C36"}]}]}], "references": [{"url": "https://github.com/thorsten/phpmyfaq/commit/fe6e9f02ef1b26a03134b9becda12687ee5f3214", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/82b0b629-c56b-4651-af3f-17f749751857", "source": "security@huntr.dev", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/thorsten/phpmyfaq/commit/fe6e9f02ef1b26a03134b9becda12687ee5f3214"}}