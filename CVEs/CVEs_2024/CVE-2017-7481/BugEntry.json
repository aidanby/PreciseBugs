{"buggy_code": ["Configuration file\n++++++++++++++++++\n\n.. contents:: Topics\n\n.. highlight:: bash\n\nCertain settings in Ansible are adjustable via a configuration file.  The stock configuration should be sufficient\nfor most users, but there may be reasons you would want to change them.\n\nChanges can be made and used in a configuration file which will be processed in the following order::\n\n    * ANSIBLE_CONFIG (an environment variable)\n    * ansible.cfg (in the current directory)\n    * .ansible.cfg (in the home directory)\n    * /etc/ansible/ansible.cfg\n\nPrior to 1.5 the order was::\n\n    * ansible.cfg (in the current directory)\n    * ANSIBLE_CONFIG (an environment variable)\n    * .ansible.cfg (in the home directory)\n    * /etc/ansible/ansible.cfg\n\nAnsible will process the above list and use the first file found. Settings in files are not merged.\n\n.. note:: Comments\n    The configuration file is one variant of an INI format.  Both the hash\n    sign (\"#\") and semicolon (\";\") are allowed as comment markers when the\n    comment starts the line.  However, if the comment is inline with regular\n    values, only the semicolon is allowed to introduce the comment.  For\n    instance::\n\n        # some basic default values...\n        inventory = /etc/ansible/hosts  ; This points to the file that lists your hosts\n\n.. _getting_the_latest_configuration:\n\nGetting the latest configuration\n````````````````````````````````\n\nIf installing ansible from a package manager, the latest ansible.cfg should be present in /etc/ansible, possibly\nas a \".rpmnew\" file (or other) as appropriate in the case of updates.\n\nIf you have installed from pip or from source, however, you may want to create this file in order to override\ndefault settings in Ansible.\n\nYou may wish to consult the `ansible.cfg in source control <https://raw.github.com/ansible/ansible/devel/examples/ansible.cfg>`_ for all of the possible latest values.\n\n.. _environmental_configuration:\n\nEnvironmental configuration\n```````````````````````````\n\nAnsible also allows configuration of settings via environment variables.  If\nthese environment variables are set, they will override any setting loaded\nfrom the configuration file.  These variables are defined in `constants.py <https://github.com/ansible/ansible/blob/devel/lib/ansible/constants.py>`_.\n\n.. _config_values_by_section:\n\nExplanation of values by section\n````````````````````````````````\n\nThe configuration file is broken up into sections.  Most options are in the \"general\" section but some sections of the file\nare specific to certain connection types.\n\n.. _general_defaults:\n\nGeneral defaults\n----------------\n\nIn the [defaults] section of ansible.cfg, the following settings are tunable:\n\n.. _cfg_action_plugins:\n\naction_plugins\n==============\n\nActions are pieces of code in ansible that enable things like module execution, templating, and so forth.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n   action_plugins = ~/.ansible/plugins/action_plugins/:/usr/share/ansible_plugins/action_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details.\n\n\n.. _allow_world_readable_tmpfiles:\n\nallow_world_readable_tmpfiles\n=============================\n\n.. versionadded:: 2.1\n\nThis makes the temporary files created on the machine to be world readable and will issue a warning instead of failing the task.\n\nIt is useful when becoming an unprivileged user::\n\n  allow_world_readable_tmpfiles=True\n\n\n\n\n.. _ansible_managed:\n\nansible_managed\n===============\n\nThe ``ansible_managed`` string can be inserted into files written by\nAnsible's config templating system::\n\n   {{ ansible_managed }}\n\nThe default value indicates that Ansible is managing a file::\n\n    ansible_managed = Ansible managed\n\nThis string can be helpful to indicate that a file should not\nbe directly edited because Ansible may overwrite the contents of the file.\n\nThere are several special placeholder values that can be placed in the ``ansible_managed`` string.  These are not in the default ``ansible_managed`` string because they can cause Ansible to behave as though the\nentire template has changed when only the ansible_managed string has\nchanged.  \n\nThese placeholder values, along with the situations which can lead Ansible to\nreport a template as changed when they are used, are listed below:\n\n* Standard directives that can be used with :func:~time.strftime:.\n  The time referred to is the modification time of the template file.  Many\n  revision control systems timestamp files according to when they are checked\n  out, not the last time the file was modified.  That means Ansible will think\n  the file has been modified anytime there is a fresh checkout.\n\n.. If intersphinx isn't turned on, manually make strftime link to\n   https://docs.python.org/2/library/time.html#time.strftime\n\n* ``{file}``: expands to the name of the full path to the template file.  If\n  Ansible is run with multiple checkouts of the same configuration repository\n  (for instance, in each sysadmin's home directory), then the path will differ\n  in each checkout causing Ansible to behave as though the file has been modified.  \n* ``{host}``: expands to the hostname of the machine :program:`ansible` is run\n  on.  If :program:`ansible` is invoked on multiple machines (for instance,\n  each sysadmin can checkout the configuration repository on their workstation\n  and run :program:`ansible` there), then the host will vary on each of these\n  machines.  This will cause Ansible to behave as though the file has been modified.\n* ``{uid}``: expands to the owner of the template file.  If Ansible is run\n  on checkouts of the configuration repository made by separate users (for\n  instance, if multiple system administrators are making checkouts of the\n  repository with their own accounts) then this will cause Ansible to behave as if\n  the file has been modified.\n\n.. _ask_pass:\n\nask_pass\n========\n\nThis controls whether an Ansible playbook should prompt for a password by default.  The default behavior is no::\n\n    ask_pass = True\n\nIf using SSH keys for authentication, it's probably not needed to change this setting.\n\n.. _ask_sudo_pass:\n\nask_sudo_pass\n=============\n\nSimilar to ask_pass, this controls whether an Ansible playbook should prompt for a sudo password by default when\nsudoing.  The default behavior is also no::\n\n    ask_sudo_pass = True\n\nUsers on platforms where sudo passwords are enabled should consider changing this setting.\n\n.. _ask_vault_pass:\n\nask_vault_pass\n==============\n\nThis controls whether an Ansible playbook should prompt for the vault password by default.  The default behavior is no::\n\n    ask_vault_pass = True\n\n.. _bin_ansible_callbacks:\n\nbin_ansible_callbacks\n=====================\n\n.. versionadded:: 1.8\n\nControls whether callback plugins are loaded when running /usr/bin/ansible.  This may be used to log activity from\nthe command line, send notifications, and so on.  Callback plugins are always loaded for /usr/bin/ansible-playbook\nif present and cannot be disabled::\n\n    bin_ansible_callbacks = False\n\nPrior to 1.8, callbacks were never loaded for /usr/bin/ansible.\n\n.. _callback_plugins:\n\ncallback_plugins\n================\n\nCallbacks are pieces of code in ansible that get called on specific events, permitting to trigger notifications.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n   callback_plugins = ~/.ansible/plugins/callback:/usr/share/ansible/plugins/callback\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _callback_whitelist:\n\ncallback_whitelist\n==================\n\n.. versionadded:: 2.0\n\nNow ansible ships with all included callback plugins ready to use but they are disabled by default.\nThis setting lets you enable a list of additional callbacks. This cannot change or override the\ndefault stdout callback, use :ref:`stdout_callback` for that::\n\n    callback_whitelist = timer,mail\n\n.. _command_warnings:\n\ncommand_warnings\n================\n\n.. versionadded:: 1.8\n\nBy default since Ansible 1.8, Ansible will issue a warning when the shell or \ncommand module is used and the command appears to be similar to an existing \nAnsible module. For example, this can include reminders to use the 'git' module\ninstead of shell commands to execute 'git'.  Using modules when possible over \narbitrary shell commands can lead to more reliable and consistent playbook runs, \nand also easier to maintain playbooks::\n\n    command_warnings = False\n\nThese warnings can be silenced by adjusting the following\nsetting or adding warn=yes or warn=no to the end of the command line\nparameter string, like so::\n\n\n    - name: usage of git that could be replaced with the git module\n      shell: git update foo warn=yes\n\n.. _connection_plugins:\n\nconnection_plugins\n==================\n\nConnections plugin permit to extend the channel used by ansible to transport commands and files.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    connection_plugins = ~/.ansible/plugins/connection_plugins/:/usr/share/ansible_plugins/connection_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _deprecation_warnings:\n\ndeprecation_warnings\n====================\n\n.. versionadded:: 1.3\n\nAllows disabling of deprecating warnings in ansible-playbook output::\n\n    deprecation_warnings = True\n\nDeprecation warnings indicate usage of legacy features that are slated for removal in a future release of Ansible.\n\n.. _display_args_to_stdout:\n\ndisplay_args_to_stdout\n======================\n\n.. versionadded:: 2.1.0\n\nBy default, ansible-playbook will print a header for each task that is run to\nstdout.  These headers will contain the ``name:`` field from the task if you\nspecified one.  If you didn't then ansible-playbook uses the task's action to\nhelp you tell which task is presently running.  Sometimes you run many of the\nsame action and so you want more information about the task to differentiate\nit from others of the same action.  If you set this variable to ``True`` in\nthe config then ansible-playbook will also include the task's arguments in the\nheader.\n\nThis setting defaults to ``False`` because there is a chance that you have\nsensitive values in your parameters and do not want those to be printed to\nstdout::\n\n    display_args_to_stdout = False\n\nIf you set this to ``True`` you should be sure that you have secured your\nenvironment's stdout (no one can shoulder surf your screen and you aren't\nsaving stdout to an insecure file) or made sure that all of your playbooks\nexplicitly added the ``no_log: True`` parameter to tasks which have sensistive\nvalues   See :ref:`keep_secret_data` for more information.\n\n.. _display_skipped_hosts:\n\ndisplay_skipped_hosts\n=====================\n\nIf set to `False`, ansible will not display any status for a task that is skipped. The default behavior is to display skipped tasks::\n\n    display_skipped_hosts = True\n\nNote that Ansible will always show the task header for any task, regardless of whether or not the task is skipped.\n\n.. _error_on_undefined_vars:\n\nerror_on_undefined_vars\n=======================\n\nOn by default since Ansible 1.3, this causes ansible to fail steps that reference variable names that are likely\ntypoed::\n\n    error_on_undefined_vars = True\n\nIf set to False, any '{{ template_expression }}' that contains undefined variables will be rendered in a template\nor ansible action line exactly as written.\n\n.. _executable:\n\nexecutable\n==========\n\nThis indicates the command to use to spawn a shell under a sudo environment.  Users may need to change this to /bin/bash in rare instances when sudo is constrained, but in most cases it may be left as is::\n\n    executable = /bin/bash\n\nStarting in version 2.1 this can be overridden by the inventory var ``ansible_shell_executable``.\n\n.. _filter_plugins:\n\nfilter_plugins\n==============\n\nFilters are specific functions that can be used to extend the template system.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    filter_plugins = ~/.ansible/plugins/filter_plugins/:/usr/share/ansible_plugins/filter_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _force_color:\n\nforce_color\n===========\n\nThis options forces color mode even when running without a TTY::\n\n    force_color = 1\n\n.. _force_handlers:\n\nforce_handlers\n==============\n\n.. versionadded:: 1.9.1\n\nThis option causes notified handlers to run on a host even if a failure occurs on that host::\n\n    force_handlers = True\n\nThe default is False, meaning that handlers will not run if a failure has occurred on a host.\nThis can also be set per play or on the command line. See :ref:`handlers_and_failure` for more details.\n\n.. _forks:\n\nforks\n=====\n\nThis is the default number of parallel processes to spawn when communicating with remote hosts.  Since Ansible 1.3,\nthe fork number is automatically limited to the number of possible hosts at runtime, so this is really a limit of how much\nnetwork and CPU load you think you can handle.  Many users may set this to 50, some set it to 500 or more.  If you\nhave a large number of hosts, higher values will make actions across all of those hosts complete faster.  The default\nis very very conservative::\n\n    forks = 5\n\n.. _fact_path:\n\nfact_path\n=========\n\nThis option allows you to globally configure a custom path for :ref:`_local_facts`:: for the implied `setup` task when using implied fact gathering.\n\n  fact_path = /home/centos/ansible_facts.d\n\nThe default is to use the default from the `setup module  <https://docs.ansible.com/ansible/setup_module.html>`_: ``/etc/ansible/facts.d``\nThis ONLY affects fact gathering triggered by a play when `gather_facts: True`.\n\n.. _gathering:\n\ngathering\n=========\n\nNew in 1.6, the 'gathering' setting controls the default policy of facts gathering (variables discovered about remote systems).\n\nThe value 'implicit' is the default, which means that the fact cache will be ignored and facts will be gathered per play unless 'gather_facts: False' is set.\nThe value 'explicit' is the inverse, facts will not be gathered unless directly requested in the play.\nThe value 'smart' means each new host that has no facts discovered will be scanned, but if the same host is addressed in multiple plays it will not be contacted again in the playbook run.\nThis option can be useful for those wishing to save fact gathering time. Both 'smart' and 'explicit' will use the fact cache::\n\n    gathering = smart\n\n.. versionadded:: 2.1\n\nYou can specify a subset of gathered facts, via the play's gather_facts directive, using the following option::\n\n    gather_subset = all\n\n:all: gather all subsets (the default)\n:network: gather network facts\n:hardware: gather hardware facts (longest facts to retrieve)\n:virtual: gather facts about virtual machines hosted on the machine\n:ohai: gather facts from ohai\n:facter: gather facts from facter\n\nYou can combine them using a comma separated list (ex: network,virtual,facter)\n\nYou can also disable specific subsets by prepending with a `!` like this::\n\n    # Don't gather hardware facts, facts from chef's ohai or puppet's facter\n    gather_subset = !hardware,!ohai,!facter\n\nA set of basic facts are always collected no matter which additional subsets\nare selected.  If you want to collect the minimal amount of facts, use\n`!all`::\n\n    gather_subset = !all\n\nhash_behaviour\n==============\n\nAnsible by default will override variables in specific precedence orders, as described in :doc:`playbooks_variables`.  When a variable\nof higher precedence wins, it will replace the other value.\n\nSome users prefer that variables that are hashes (aka 'dictionaries' in Python terms) are merged.  This setting is called 'merge'. This is not the default behavior and it does not affect variables whose values are scalars (integers, strings) or\narrays.  We generally recommend not using this setting unless you think you have an absolute need for it, and playbooks in the\nofficial examples repos do not use this setting::\n\n    hash_behaviour = replace\n\nThe valid values are either 'replace' (the default) or 'merge'.\n\n.. versionadded:: 2.0\n\nIf you want to merge hashes without changing the global settings, use\nthe `combine` filter described in :doc:`playbooks_filters`.\n\n.. _hostfile:\n\nhostfile\n========\n\nThis is a deprecated setting since 1.9, please look at :ref:`inventory_file` for the new setting.\n\n.. _host_key_checking:\n\nhost_key_checking\n=================\n\nAs described in :doc:`intro_getting_started`, host key checking is on by default in Ansible 1.3 and later.  If you understand the\nimplications and wish to disable it, you may do so here by setting the value to False::\n\n    host_key_checking = True\n\n.. _internal_poll_interval:\n\ninternal_poll_interval\n======================\n\n.. versionadded:: 2.2\n\nThis sets the interval (in seconds) of Ansible internal processes polling each other.\nLower values improve performance with large playbooks at the expense of extra CPU load.\nHigher values are more suitable for Ansible usage in automation scenarios, when UI responsiveness is not required but CPU usage might be a concern.\nDefault corresponds to the value hardcoded in Ansible \u2264 2.1::\n\n    internal_poll_interval=0.001\n\n.. _inventory_file:\n\ninventory\n=========\n\nThis is the default location of the inventory file, script, or directory that Ansible will use to determine what hosts it has available\nto talk to::\n\n    inventory = /etc/ansible/hosts\n\nIt used to be called hostfile in Ansible before 1.9\n\n.. _inventory_ignore_extensions:\n\ninventory_ignore_extensions\n===========================\n\nComma-separated list of file extension patterns to ignore when Ansible inventory\nis a directory with multiple sources (static and dynamic)::\n\n    inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo\n\nThis option can be overridden by setting ``ANSIBLE_INVENTORY_IGNORE``\nenvironment variable.\n\n.. _jinja2_extensions:\n\njinja2_extensions\n=================\n\nThis is a developer-specific feature that allows enabling additional Jinja2 extensions::\n\n    jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n\n\nIf you do not know what these do, you probably don't need to change this setting :)\n\n.. _library:\n\nlibrary\n=======\n\nThis is the default location Ansible looks to find modules::\n\n     library = /usr/share/ansible\n\nAnsible can look in multiple locations if you feed it a colon\nseparated path, and it also will look for modules in the :file:`./library`\ndirectory alongside a playbook.\n\nThis can be used to manage modules pulled from several different locations.\nFor instance, a site wishing to checkout modules from several different git\nrepositories might handle it like this:\n\n.. code-block:: shell-session\n\n    $ mkdir -p /srv/modules\n    $ cd /srv/modules\n    $ git checkout https://vendor_modules .\n    $ git checkout ssh://custom_modules .\n    $ export ANSIBLE_LIBRARY=/srv/modules/custom_modules:/srv/modules/vendor_modules\n    $ ansible [...]\n\nIn case of modules with the same name, the library paths are searched in order\nand the first module found with that name is used.\n\n.. _local_tmp:\n\nlocal_tmp\n=========\n\n.. versionadded:: 2.1\n\nWhen Ansible gets ready to send a module to a remote machine it usually has to\nadd a few things to the module: Some boilerplate code, the module's\nparameters, and a few constants from the config file.  This combination of\nthings gets stored in a temporary file until ansible exits and cleans up after\nitself.  The default location is a subdirectory of the user's home directory.\nIf you'd like to change that, you can do so by altering this setting::\n\n    local_tmp = ~/.ansible/tmp\n\nAnsible will then choose a random directory name inside this location.\n\n.. _log_path:\n\nlog_path\n========\n\nIf present and configured in ansible.cfg, Ansible will log information about executions at the designated location.  Be sure\nthe user running Ansible has permissions on the logfile::\n\n    log_path=/var/log/ansible.log\n\nThis behavior is not on by default.  Note that ansible will, without this setting, record module arguments called to the\nsyslog of managed machines.  Password arguments are excluded.\n\nFor Enterprise users seeking more detailed logging history, you may be interested in :doc:`tower`.\n\n.. _lookup_plugins:\n\nlookup_plugins\n==============\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    lookup_plugins = ~/.ansible/plugins/lookup_plugins/:/usr/share/ansible_plugins/lookup_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _merge_multiple_cli_tags:\n\nmerge_multiple_cli_tags\n=======================\n\n.. versionadded:: 2.3\n\nThis allows changing how multiple :option:`--tags` and :option:`--skip-tags`\narguments are handled on the command line.  Specifying :option:`--tags` more\nthan once merges all of the :option:`--tags` options together.  If you want\nthe pre-2.4.x behaviour where only the last value of :option:`--tags` is used,\nthen set this to False.  The same holds true for :option:`--skip-tags`.\n\n.. note:: The default value for this in 2.3 is False.  In 2.4, the\n    default value is True.  After 2.8, the option will be removed.\n    Multiple :option:`--tags` and multiple :option:`--skip-tags` will always\n    be merged together.\n\n.. _module_lang:\n\nmodule_lang\n===========\n\nThis is to set the default language to communicate between the module and the system.\nBy default, the value is value `LANG` on the controller or, if unset, `en_US.UTF-8` (it used to be `C` in previous versions)::\n\n    module_lang = en_US.UTF-8\n\n.. note::\n\n    This is only used if :ref:`module_set_locale` is set to True.\n\n.. _module_name:\n\nmodule_name\n===========\n\nThis is the default module name (-m) value for /usr/bin/ansible.  The default is the 'command' module.\nRemember the command module doesn't support shell variables, pipes, or quotes, so you might wish to change\nit to 'shell'::\n\n    module_name = command\n\n.. _module_set_locale:\n\nmodule_set_locale\n=================\n\nThis boolean value controls whether or not Ansible will prepend locale-specific environment variables (as specified\nvia the :ref:`module_lang` configuration option). If enabled, it results in the LANG, LC_MESSAGES, and LC_ALL\nbeing set when the module is executed on the given remote system.  By default this is disabled.\n\n.. note::\n\n    The module_set_locale option was added in Ansible-2.1 and defaulted to\n    True.  The default was changed to False in Ansible-2.2\n\n.. _module_utils:\n\nmodule_utils\n============\n\nThis is the default location Ansible looks to find module_utils::\n\n    module_utils = /usr/share/ansible/my_module_utils\n\nmodule_utils are python modules that Ansible is able to combine with Ansible\nmodules when sending them to the remote machine.  Having custom module_utils\nis useful for extracting common code when developing a set of site-specific\nmodules.\n\nAnsible can look in multiple locations if you feed it a colon\nseparated path, and it also will look for modules in the\n:file:`./module_utils` directory alongside a playbook.\n\n.. _nocolor:\n\nnocolor\n=======\n\nBy default ansible will try to colorize output to give a better indication of failure and status information.\nIf you dislike this behavior you can turn it off by setting 'nocolor' to 1::\n\n    nocolor = 0\n\n.. _nocows:\n\nnocows\n======\n\nBy default ansible will take advantage of cowsay if installed to make /usr/bin/ansible-playbook runs more exciting.\nWhy?  We believe systems management should be a happy experience.  If you do not like the cows, you can disable them\nby setting 'nocows' to 1::\n\n    nocows = 0\n\n.. _pattern:\n\npattern\n=======\n\nThis is the default group of hosts to talk to in a playbook if no \"hosts:\" stanza is supplied.  The default is to talk\nto all hosts.  You may wish to change this to protect yourself from surprises::\n\n    hosts = *\n\nNote that /usr/bin/ansible always requires a host pattern and does not use this setting, only /usr/bin/ansible-playbook.\n\n.. _poll_interval:\n\npoll_interval\n=============\n\nFor asynchronous tasks in Ansible (covered in :doc:`playbooks_async`), this is how often to check back on the status of those\ntasks when an explicit poll interval is not supplied.  The default is a reasonably moderate 15 seconds which is a tradeoff\nbetween checking in frequently and providing a quick turnaround when something may have completed::\n\n    poll_interval = 15\n\n.. _private_key_file:\n\nprivate_key_file\n================\n\nIf you are using a pem file to authenticate with machines rather than SSH agent or passwords, you can set the default\nvalue here to avoid re-specifying ``--private-key`` with every invocation::\n\n    private_key_file=/path/to/file.pem\n\n.. _remote_port:\n\nremote_port\n===========\n\nThis sets the default SSH port on all of your systems, for systems that didn't specify an alternative value in inventory.\nThe default is the standard 22::\n\n    remote_port = 22\n\n.. _remote_tmp:\n\nremote_tmp\n==========\n\nAnsible works by transferring modules to your remote machines, running them, and then cleaning up after itself.  In some\ncases, you may not wish to use the default location and would like to change the path.  You can do so by altering this\nsetting::\n\n    remote_tmp = ~/.ansible/tmp\n\nThe default is to use a subdirectory of the user's home directory.  Ansible will then choose a random directory name\ninside this location.\n\n.. _remote_user:\n\nremote_user\n===========\n\nThis is the default username ansible will connect as for /usr/bin/ansible-playbook.  Note that /usr/bin/ansible will\nalways default to the current user if this is not defined::\n\n    remote_user = root\n\n\n.. _restrict_facts_namespace:\n\nrestrict_facts_namespace\n========================\n\n.. versionadded:: 2.4\n\nThis allows restricting facts in their own namespace (under ansible_facts) instead of pushing them into the main.\nFalse by default. Can also be set via the environment variable `ANSIBLE_RESTRICT_FACTS`. Using `ansible_system` as an example:\n\nWhen False::\n\n    - debug: var=ansible_system\n\n\nWhen True::\n\n    - debug: var=ansible_facts.ansible_system\n\n\n.. _retry_files_enabled:\n\nretry_files_enabled\n===================\n\nThis controls whether a failed Ansible playbook should create a .retry file. The default setting is True::\n\n    retry_files_enabled = False\n\n.. _retry_files_save_path:\n\nretry_files_save_path\n=====================\n\nThe retry files save path is where Ansible will save .retry files when a playbook fails and retry_files_enabled is True (the default).\nThe default location is adjacent to the play (~/ in versions older than 2.0) and can be changed to any writeable path::\n\n    retry_files_save_path = ~/.ansible/retry-files\n\nThe directory will be created if it does not already exist.\n\n.. _cfg_roles_path:\n\nroles_path\n==========\n\n.. versionadded:: 1.4\n\nThe roles path indicate additional directories beyond the 'roles/' subdirectory of a playbook project to search to find Ansible\nroles.  For instance, if there was a source control repository of common roles and a different repository of playbooks, you might\nchoose to establish a convention to checkout roles in /opt/mysite/roles like so::\n\n    roles_path = /opt/mysite/roles\n\nAdditional paths can be provided separated by colon characters, in the same way as other pathstrings::\n\n    roles_path = /opt/mysite/roles:/opt/othersite/roles\n\nRoles will be first searched for in the playbook directory.  Should a role not be found, it will indicate all the possible paths\nthat were searched.\n\n.. _cfg_squash_actions:\n\nsquash_actions\n==============\n\n.. versionadded:: 2.0\n\nAnsible can optimise actions that call modules that support list parameters when using with\\_ looping.\nInstead of calling the module once for each item, the module is called once with the full list.\n\nThe default value for this setting is only for certain package managers, but it can be used for any module::\n\n    squash_actions = apk,apt,dnf,homebrew,package,pacman,pkgng,yum,zypper\n\nCurrently, this is only supported for modules that have a name parameter, and only when the item is the\nonly thing being passed to the parameter.\n\n.. _stdout_callback:\n\nstdout_callback\n===============\n\n.. versionadded:: 2.0\n\nThis setting allows you to override the default stdout callback for ansible-playbook::\n\n    stdout_callback = skippy\n\n.. _cfg_strategy_plugins:\n\nstrategy_plugins\n==================\n\nStrategy plugin allow users to change the way in which Ansible runs tasks on targeted hosts.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    strategy_plugins = ~/.ansible/plugins/strategy_plugins/:/usr/share/ansible_plugins/strategy_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _cfg_strategy:\n\nstrategy\n========\n\nStrategy allow to change the default strategy used by Ansible::\n\n    strategy = free\n\n.. _sudo_exe:\n\nsudo_exe\n========\n\nIf using an alternative sudo implementation on remote machines, the path to sudo can be replaced here provided\nthe sudo implementation is matching CLI flags with the standard sudo::\n\n   sudo_exe = sudo\n\n.. _sudo_flags:\n\nsudo_flags\n==========\n\nAdditional flags to pass to sudo when engaging sudo support. The default is '-H -S -n' which sets the HOME environment\nvariable, prompts for passwords via STDIN, and avoids prompting the user for input of any kind. Note that '-n' will conflict\nwith using password-less sudo auth, such as pam_ssh_agent_auth. In some situations you may wish to add or remove flags, but\nin general most users will not need to change this setting:::\n\n   sudo_flags=-H -S -n\n\n.. _sudo_user:\n\nsudo_user\n=========\n\nThis is the default user to sudo to if ``--sudo-user`` is not specified or 'sudo_user' is not specified in an Ansible\nplaybook.  The default is the most logical: 'root'::\n\n   sudo_user = root\n\n.. _system_warnings:\n\nsystem_warnings\n===============\n\n.. versionadded:: 1.6\n\nAllows disabling of warnings related to potential issues on the system running ansible itself (not on the managed hosts)::\n\n   system_warnings = True\n\nThese may include warnings about 3rd party packages or other conditions that should be resolved if possible.\n\n.. _timeout:\n\ntimeout\n=======\n\nThis is the default SSH timeout to use on connection attempts::\n\n    timeout = 10\n\n.. _transport:\n\ntransport\n=========\n\nThis is the default transport to use if \"-c <transport_name>\" is not specified to /usr/bin/ansible or /usr/bin/ansible-playbook.\nThe default is 'smart', which will use 'ssh' (OpenSSH based) if the local operating system is new enough to support ControlPersist\ntechnology, and then will otherwise use 'paramiko'.  Other transport options include 'local', 'chroot', 'jail', and so on.\n\nUsers should usually leave this setting as 'smart' and let their playbooks choose an alternate setting when needed with the\n'connection:' play parameter::\n\n    transport = paramiko\n\n.. _vars_plugins:\n\nvars_plugins\n============\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    vars_plugins = ~/.ansible/plugins/vars_plugins/:/usr/share/ansible_plugins/vars_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n\n.. _vault_password_file:\n\nvault_password_file\n===================\n\n.. versionadded:: 1.7\n\nConfigures the path to the Vault password file as an alternative to specifying ``--vault-password-file`` on the command line::\n\n   vault_password_file = /path/to/vault_password_file\n\nAs of 1.7 this file can also be a script. If you are using a script instead of a flat file, ensure that it is marked as executable, and that the password is printed to standard output. If your script needs to prompt for data, prompts can be sent to standard error.\n\n.. _privilege_escalation:\n\nPrivilege Escalation Settings\n-----------------------------\n\nAnsible can use existing privilege escalation systems to allow a user to execute tasks as another. As of 1.9 \u2018become\u2019 supersedes the old sudo/su, while still being backwards compatible.  Settings live under the [privilege_escalation] header.\n\n.. _become:\n\nbecome\n======\n\nThe equivalent of adding sudo: or su: to a play or task, set to true/yes to activate privilege escalation. The default behavior is no::\n\n    become = True\n\n.. _become_method:\n\nbecome_method\n=============\n\nSet the privilege escalation method. The default is ``sudo``, other options are ``su``, ``pbrun``, ``pfexec``, ``doas``, ``ksu``::\n\n    become_method = su\n\n.. _become_user:\n\nbecome_user\n=============\n\nThe equivalent to ansible_sudo_user or ansible_su_user, allows to set the user you become through privilege escalation. The default is 'root'::\n\n    become_user = root\n\n.. _become_ask_pass:\n\nbecome_ask_pass\n===============\n\nAsk for privilege escalation password, the default is False::\n\n    become_ask_pass = True\n\n.. _become_allow_same_user:\n\nbecome_allow_same_user\n======================\n\nMost of the time, using *sudo* to run a command as the same user who is running\n*sudo* itself is unnecessary overhead, so Ansible does not allow it. However,\ndepending on the *sudo* configuration, it may be necessary to run a command as\nthe same user through *sudo*, such as to switch SELinux contexts. For this\nreason, you can set ``become_allow_same_user`` to ``True`` and disable this\noptimization.\n\n.. _paramiko_settings:\n\nParamiko Specific Settings\n--------------------------\n\nParamiko is the default SSH connection implementation on Enterprise Linux 6 or earlier, and is not used by default on other\nplatforms.  Settings live under the [paramiko_connection] header.\n\n.. _record_host_keys:\n\nrecord_host_keys\n================\n\nThe default setting of yes will record newly discovered and approved (if host key checking is enabled) hosts in the user's hostfile.\nThis setting may be inefficient for large numbers of hosts, and in those situations, using the ssh transport is definitely recommended\ninstead.  Setting it to False will improve performance and is recommended when host key checking is disabled::\n\n    record_host_keys = True\n\n.. _paramiko_proxy_command:\n\nproxy_command\n=============\n\n.. versionadded:: 2.1\n\nUse an OpenSSH like ProxyCommand for proxying all Paramiko SSH connections through a bastion or jump host. Requires a minimum of Paramiko version 1.9.0. On Enterprise Linux 6 this is provided by ``python-paramiko1.10`` in the EPEL repository::\n\n    proxy_command = ssh -W \"%h:%p\" bastion\n\n.. _openssh_settings:\n\nOpenSSH Specific Settings\n-------------------------\n\nUnder the [ssh_connection] header, the following settings are tunable for SSH connections.  OpenSSH is the default connection type for Ansible\non OSes that are new enough to support ControlPersist.  (This means basically all operating systems except Enterprise Linux 6 or earlier).\n\n.. _ssh_args:\n\nssh_args\n========\n\nIf set, this will pass a specific set of options to Ansible rather than Ansible's usual defaults::\n\n    ssh_args = -o ControlMaster=auto -o ControlPersist=60s\n\nIn particular, users may wish to raise the ControlPersist time to encourage performance.  A value of 30 minutes may\nbe appropriate. If ``-o ControlPath`` is set in ``ssh_args``, the ``control_path`` setting is not used.\n\n.. _control_path:\n\ncontrol_path\n============\n\nThis is the location to save ControlPath sockets. This defaults to::\n\n    control_path=%(directory)s/ansible-ssh-%%h-%%p-%%r\n\nOn some systems with very long hostnames or very long path names (caused by long user names or\ndeeply nested home directories) this can exceed the character limit on\nfile socket names (108 characters for most platforms). In that case, you\nmay wish to shorten the string to something like the below::\n\n    control_path = %(directory)s/%%h-%%r\n\nAnsible 1.4 and later will instruct users to run with \"-vvvv\" in situations where it hits this problem\nand if so it is easy to tell there is too long of a Control Path filename.  This may be frequently\nencountered on EC2. This setting is ignored if ``-o ControlPath`` is set in ``ssh_args``.\n\n.. _control_path_dir:\n\ncontrol_path_dir\n================\n\n.. versionadded:: 2.3\n\nThis is the base directory of the ControlPath sockets.\nIt is the ``%(directory)s`` part of the ``control_path`` option.\nThis defaults to::\n\n    control_path_dir=~/.ansible/cp\n\n.. _retries:\n\nretries\n=======\n\nAdds the option to retry failed ssh executions if the failure is encountered in ssh itself, not the remote command. This can be helpful if there are transient network issues. Enabled by setting retries to an integer greater than 1. Defaults to::\n\n    retries = 0\n\n.. _scp_if_ssh:\n\nscp_if_ssh\n==========\n\nOccasionally users may be managing a remote system that doesn't have SFTP enabled.  If set to True, we can\ncause scp to be used to transfer remote files instead::\n\n    scp_if_ssh = False\n\nThere's really no reason to change this unless problems are encountered, and then there's also no real drawback\nto managing the switch.  Most environments support SFTP by default and this doesn't usually need to be changed.\n\n\n.. _pipelining:\n\npipelining\n==========\n\nEnabling pipelining reduces the number of SSH operations required to\nexecute a module on the remote server, by executing many ansible modules without actual file transfer.\nThis can result in a very significant performance improvement when enabled, however when using \"sudo:\" operations you must\nfirst disable 'requiretty' in /etc/sudoers on all managed hosts.\n\nBy default, this option is disabled to preserve compatibility with\nsudoers configurations that have requiretty (the default on many distros), but is highly\nrecommended if you can enable it, eliminating the need for :doc:`playbooks_acceleration`::\n\n    pipelining = False\n\n.. _ssh_executable:\n\nssh_executable\n==============\n\n.. versionadded:: 2.2\n\nThis is the location of the ssh binary. It defaults to ``ssh`` which will use the first ssh binary available in ``$PATH``. This config can also be overridden with ``ansible_ssh_executable`` inventory variable::\n\n  ssh_executable=\"/usr/local/bin/ssh\"\n\nThis option is usually not required, it might be useful when access to system ssh is restricted, or when using ssh wrappers to connect to remote hosts. \n\n.. _accelerate_settings:\n\nAccelerated Mode Settings\n-------------------------\n\nUnder the [accelerate] header, the following settings are tunable for :doc:`playbooks_acceleration`.  Acceleration is\na useful performance feature to use if you cannot enable :ref:`pipelining` in your environment, but is probably\nnot needed if you can.\n\n.. _accelerate_port:\n\naccelerate_port\n===============\n\n.. versionadded:: 1.3\n\nThis is the port to use for accelerated mode::\n\n    accelerate_port = 5099\n\n.. _accelerate_timeout:\n\naccelerate_timeout\n==================\n\n.. versionadded:: 1.4\n\nThis setting controls the timeout for receiving data from a client. If no data is received during this time, the socket connection will be closed. A keepalive packet is sent back to the controller every 15 seconds, so this timeout should not be set lower than 15 (by default, the timeout is 30 seconds)::\n\n    accelerate_timeout = 30\n\n.. _accelerate_connect_timeout:\n\naccelerate_connect_timeout\n==========================\n\n.. versionadded:: 1.4\n\nThis setting controls the timeout for the socket connect call, and should be kept relatively low. The connection to the `accelerate_port` will be attempted 3 times before Ansible will fall back to ssh or paramiko (depending on your default connection setting) to try and start the accelerate daemon remotely. The default setting is 1.0 seconds::\n\n    accelerate_connect_timeout = 1.0\n\nNote, this value can be set to less than one second, however it is probably not a good idea to do so unless you're on a very fast and reliable LAN. If you're connecting to systems over the internet, it may be necessary to increase this timeout.\n\n.. _accelerate_daemon_timeout:\n\naccelerate_daemon_timeout\n=========================\n\n.. versionadded:: 1.6\n\nThis setting controls the timeout for the accelerated daemon, as measured in minutes. The default daemon timeout is 30 minutes::\n\n    accelerate_daemon_timeout = 30\n\nNote, prior to 1.6, the timeout was hard-coded from the time of the daemon's launch. For version 1.6+, the timeout is now based on the last activity to the daemon and is configurable via this option.\n\n.. _accelerate_multi_key:\n\naccelerate_multi_key\n====================\n\n.. versionadded:: 1.6\n\nIf enabled, this setting allows multiple private keys to be uploaded to the daemon. Any clients connecting to the daemon must also enable this option::\n\n    accelerate_multi_key = yes\n\nNew clients first connect to the target node over SSH to upload the key, which is done via a local socket file, so they must have the same access as the user that launched the daemon originally.\n\n.. _selinux_settings:\n\nSelinux Specific Settings\n-------------------------\n\nThese are settings that control SELinux interactions.\n\n\nspecial_context_filesystems\n===========================\n\n.. versionadded:: 1.9\n\nThis is a list of file systems that require special treatment when dealing with security context.\nThe normal behaviour is for operations to copy the existing context or use the user default, this changes it to use a file system dependent context.\nThe default list is: nfs,vboxsf,fuse,ramfs::\n\n    special_context_filesystems = nfs,vboxsf,fuse,ramfs,myspecialfs\n\nlibvirt_lxc_noseclabel\n======================\n\n.. versionadded:: 2.1\n\nThis setting causes libvirt to connect to lxc containers by passing --noseclabel to virsh.\nThis is necessary when running on systems which do not have SELinux.\nThe default behavior is no::\n\n    libvirt_lxc_noseclabel = True\n\n.. _show_custom_stats:\n\nshow_custom_stats\n=================\n\n.. versionadded:: 2.3\n\nIf enabled, this setting will display custom stats (set via set_stats plugin) when using the default callback.\n\n\nGalaxy Settings\n---------------\n\nThe following options can be set in the [galaxy] section of ansible.cfg:\n\nserver\n======\n\nOverride the default Galaxy server value of https://galaxy.ansible.com. Useful if you have a hosted version of the Galaxy web app or want to point to the testing site https://galaxy-qa.ansible.com. It does not work against private, hosted repos, which Galaxy can use for fetching and installing roles.\n\nignore_certs\n============\n\nIf set to *yes*, ansible-galaxy will not validate TLS certificates. This can be useful for testing against a server with a self-signed certificate.\n\n", "# config file for ansible -- https://ansible.com/\n# ===============================================\n\n# nearly all parameters can be overridden in ansible-playbook\n# or with command line flags. ansible will read ANSIBLE_CONFIG,\n# ansible.cfg in the current working directory, .ansible.cfg in\n# the home directory or /etc/ansible/ansible.cfg, whichever it\n# finds first\n\n[defaults]\n\n# some basic default values...\n\n#inventory      = /etc/ansible/hosts\n#library        = /usr/share/my_modules/\n#module_utils   = /usr/share/my_module_utils/\n#remote_tmp     = ~/.ansible/tmp\n#local_tmp      = ~/.ansible/tmp\n#forks          = 5\n#poll_interval  = 15\n#sudo_user      = root\n#ask_sudo_pass = True\n#ask_pass      = True\n#transport      = smart\n#remote_port    = 22\n#module_lang    = C\n#module_set_locale = False\n\n# plays will gather facts by default, which contain information about\n# the remote system.\n#\n# smart - gather by default, but don't regather if already gathered\n# implicit - gather by default, turn off with gather_facts: False\n# explicit - do not gather by default, must say gather_facts: True\n#gathering = implicit\n\n# This only affects the gathering done by a play's gather_facts directive,\n# by default gathering retrieves all facts subsets\n# all - gather all subsets\n# network - gather min and network facts\n# hardware - gather hardware facts (longest facts to retrieve)\n# virtual - gather min and virtual facts\n# facter - import facts from facter\n# ohai - import facts from ohai\n# You can combine them using comma (ex: network,virtual)\n# You can negate them using ! (ex: !hardware,!facter,!ohai)\n# A minimal set of facts is always gathered.\n#gather_subset = all\n\n# some hardware related facts are collected\n# with a maximum timeout of 10 seconds. This\n# option lets you increase or decrease that\n# timeout to something more suitable for the\n# environment. \n# gather_timeout = 10\n\n# additional paths to search for roles in, colon separated\n#roles_path    = /etc/ansible/roles\n\n# uncomment this to disable SSH key host checking\n#host_key_checking = False\n\n# change the default callback\n#stdout_callback = skippy\n# enable additional callbacks\n#callback_whitelist = timer, mail\n\n# Determine whether includes in tasks and handlers are \"static\" by\n# default. As of 2.0, includes are dynamic by default. Setting these\n# values to True will make includes behave more like they did in the\n# 1.x versions.\n#task_includes_static = True\n#handler_includes_static = True\n\n# Controls if a missing handler for a notification event is an error or a warning\n#error_on_missing_handler = True\n\n# change this for alternative sudo implementations\n#sudo_exe = sudo\n\n# What flags to pass to sudo\n# WARNING: leaving out the defaults might create unexpected behaviours\n#sudo_flags = -H -S -n\n\n# SSH timeout\n#timeout = 10\n\n# default user to use for playbooks if user is not specified\n# (/usr/bin/ansible will use current user as default)\n#remote_user = root\n\n# logging is off by default unless this path is defined\n# if so defined, consider logrotate\n#log_path = /var/log/ansible.log\n\n# default module name for /usr/bin/ansible\n#module_name = command\n\n# use this shell for commands executed under sudo\n# you may need to change this to bin/bash in rare instances\n# if sudo is constrained\n#executable = /bin/sh\n\n# if inventory variables overlap, does the higher precedence one win\n# or are hash values merged together?  The default is 'replace' but\n# this can also be set to 'merge'.\n#hash_behaviour = replace\n\n# by default, variables from roles will be visible in the global variable\n# scope. To prevent this, the following option can be enabled, and only\n# tasks and handlers within the role will see the variables there\n#private_role_vars = yes\n\n# list any Jinja2 extensions to enable here:\n#jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n\n\n# if set, always use this private key file for authentication, same as\n# if passing --private-key to ansible or ansible-playbook\n#private_key_file = /path/to/file\n\n# If set, configures the path to the Vault password file as an alternative to\n# specifying --vault-password-file on the command line.\n#vault_password_file = /path/to/vault_password_file\n\n# format of string {{ ansible_managed }} available within Jinja2\n# templates indicates to users editing templates files will be replaced.\n# replacing {file}, {host} and {uid} and strftime codes with proper values.\n#ansible_managed = Ansible managed: {file} modified on %Y-%m-%d %H:%M:%S by {uid} on {host}\n# {file}, {host}, {uid}, and the timestamp can all interfere with idempotence\n# in some situations so the default is a static string:\n#ansible_managed = Ansible managed\n\n# by default, ansible-playbook will display \"Skipping [host]\" if it determines a task\n# should not be run on a host.  Set this to \"False\" if you don't want to see these \"Skipping\"\n# messages. NOTE: the task header will still be shown regardless of whether or not the\n# task is skipped.\n#display_skipped_hosts = True\n\n# by default, if a task in a playbook does not include a name: field then\n# ansible-playbook will construct a header that includes the task's action but\n# not the task's args.  This is a security feature because ansible cannot know\n# if the *module* considers an argument to be no_log at the time that the\n# header is printed.  If your environment doesn't have a problem securing\n# stdout from ansible-playbook (or you have manually specified no_log in your\n# playbook on all of the tasks where you have secret information) then you can\n# safely set this to True to get more informative messages.\n#display_args_to_stdout = False\n\n# by default (as of 1.3), Ansible will raise errors when attempting to dereference\n# Jinja2 variables that are not set in templates or action lines. Uncomment this line\n# to revert the behavior to pre-1.3.\n#error_on_undefined_vars = False\n\n# by default (as of 1.6), Ansible may display warnings based on the configuration of the\n# system running ansible itself. This may include warnings about 3rd party packages or\n# other conditions that should be resolved if possible.\n# to disable these warnings, set the following value to False:\n#system_warnings = True\n\n# by default (as of 1.4), Ansible may display deprecation warnings for language\n# features that should no longer be used and will be removed in future versions.\n# to disable these warnings, set the following value to False:\n#deprecation_warnings = True\n\n# (as of 1.8), Ansible can optionally warn when usage of the shell and\n# command module appear to be simplified by using a default Ansible module\n# instead.  These warnings can be silenced by adjusting the following\n# setting or adding warn=yes or warn=no to the end of the command line\n# parameter string.  This will for example suggest using the git module\n# instead of shelling out to the git command.\n# command_warnings = False\n\n\n# set plugin path directories here, separate with colons\n#action_plugins     = /usr/share/ansible/plugins/action\n#cache_plugins      = /usr/share/ansible/plugins/cache\n#callback_plugins   = /usr/share/ansible/plugins/callback\n#connection_plugins = /usr/share/ansible/plugins/connection\n#lookup_plugins     = /usr/share/ansible/plugins/lookup\n#inventory_plugins  = /usr/share/ansible/plugins/inventory\n#vars_plugins       = /usr/share/ansible/plugins/vars\n#filter_plugins     = /usr/share/ansible/plugins/filter\n#test_plugins       = /usr/share/ansible/plugins/test\n#terminal_plugins   = /usr/share/ansible/plugins/terminal\n#strategy_plugins   = /usr/share/ansible/plugins/strategy\n\n\n# by default, ansible will use the 'linear' strategy but you may want to try\n# another one\n#strategy = free\n\n# by default callbacks are not loaded for /bin/ansible, enable this if you\n# want, for example, a notification or logging callback to also apply to\n# /bin/ansible runs\n#bin_ansible_callbacks = False\n\n\n# don't like cows?  that's unfortunate.\n# set to 1 if you don't want cowsay support or export ANSIBLE_NOCOWS=1\n#nocows = 1\n\n# set which cowsay stencil you'd like to use by default. When set to 'random',\n# a random stencil will be selected for each task. The selection will be filtered\n# against the `cow_whitelist` option below.\n#cow_selection = default\n#cow_selection = random\n\n# when using the 'random' option for cowsay, stencils will be restricted to this list.\n# it should be formatted as a comma-separated list with no spaces between names.\n# NOTE: line continuations here are for formatting purposes only, as the INI parser\n#       in python does not support them.\n#cow_whitelist=bud-frogs,bunny,cheese,daemon,default,dragon,elephant-in-snake,elephant,eyes,\\\n#              hellokitty,kitty,luke-koala,meow,milk,moofasa,moose,ren,sheep,small,stegosaurus,\\\n#              stimpy,supermilker,three-eyes,turkey,turtle,tux,udder,vader-koala,vader,www\n\n# don't like colors either?\n# set to 1 if you don't want colors, or export ANSIBLE_NOCOLOR=1\n#nocolor = 1\n\n# if set to a persistent type (not 'memory', for example 'redis') fact values\n# from previous runs in Ansible will be stored.  This may be useful when\n# wanting to use, for example, IP information from one group of servers\n# without having to talk to them in the same playbook run to get their\n# current IP information.\n#fact_caching = memory\n\n\n# retry files\n# When a playbook fails by default a .retry file will be created in ~/\n# You can disable this feature by setting retry_files_enabled to False\n# and you can change the location of the files by setting retry_files_save_path\n\n#retry_files_enabled = False\n#retry_files_save_path = ~/.ansible-retry\n\n# squash actions\n# Ansible can optimise actions that call modules with list parameters\n# when looping. Instead of calling the module once per with_ item, the\n# module is called once with all items at once. Currently this only works\n# under limited circumstances, and only with parameters named 'name'.\n#squash_actions = apk,apt,dnf,homebrew,pacman,pkgng,yum,zypper\n\n# prevents logging of task data, off by default\n#no_log = False\n\n# prevents logging of tasks, but only on the targets, data is still logged on the master/controller\n#no_target_syslog = False\n\n# controls whether Ansible will raise an error or warning if a task has no\n# choice but to create world readable temporary files to execute a module on\n# the remote machine.  This option is False by default for security.  Users may\n# turn this on to have behaviour more like Ansible prior to 2.1.x.  See\n# https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user\n# for more secure ways to fix this than enabling this option.\n#allow_world_readable_tmpfiles = False\n\n# controls the compression level of variables sent to\n# worker processes. At the default of 0, no compression\n# is used. This value must be an integer from 0 to 9.\n#var_compression_level = 9\n\n# controls what compression method is used for new-style ansible modules when\n# they are sent to the remote system.  The compression types depend on having\n# support compiled into both the controller's python and the client's python.\n# The names should match with the python Zipfile compression types:\n# * ZIP_STORED (no compression. available everywhere)\n# * ZIP_DEFLATED (uses zlib, the default)\n# These values may be set per host via the ansible_module_compression inventory\n# variable\n#module_compression = 'ZIP_DEFLATED'\n\n# This controls the cutoff point (in bytes) on --diff for files\n# set to 0 for unlimited (RAM may suffer!).\n#max_diff_size = 1048576\n\n# This controls how ansible handles multiple --tags and --skip-tags arguments\n# on the CLI.  If this is True then multiple arguments are merged together.  If\n# it is False, then the last specified argument is used and the others are ignored.\n# This option will be removed in 2.8.\n#merge_multiple_cli_flags = True\n\n# Controls showing custom stats at the end, off by default\n#show_custom_stats = True\n\n# Controlls which files to ignore when using a directory as inventory with\n# possibly multiple sources (both static and dynamic)\n#inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo\n\n# This family of modules use an alternative execution path optimized for network appliances\n# only update this setting if you know how this works, otherwise it can break module execution\n#network_group_modules=['eos', 'nxos', 'ios', 'iosxr', 'junos', 'vyos']\n\n# This keeps facts from polluting the main namespace as variables.\n# Setting to True keeps them under the ansible_facts namespace, the default is False\n#restrict_facts_namespace: True\n\n[privilege_escalation]\n#become=True\n#become_method=sudo\n#become_user=root\n#become_ask_pass=False\n\n[paramiko_connection]\n\n# uncomment this line to cause the paramiko connection plugin to not record new host\n# keys encountered.  Increases performance on new host additions.  Setting works independently of the\n# host key checking setting above.\n#record_host_keys=False\n\n# by default, Ansible requests a pseudo-terminal for commands executed under sudo. Uncomment this\n# line to disable this behaviour.\n#pty=False\n\n# paramiko will default to looking for SSH keys initially when trying to\n# authenticate to remote devices.  This is a problem for some network devices\n# that close the connection after a key failure.  Uncomment this line to\n# disable the Paramiko look for keys function\n#look_for_keys = False\n\n# When using persistent connections with Paramiko, the connection runs in a\n# background process.  If the host doesn't already have a valid SSH key, by\n# default Ansible will prompt to add the host key.  This will cause connections\n# running in background processes to fail.  Uncomment this line to have\n# Paramiko automatically add host keys.\n#host_key_auto_add = True\n\n[ssh_connection]\n\n# ssh arguments to use\n# Leaving off ControlPersist will result in poor performance, so use\n# paramiko on older platforms rather than removing it, -C controls compression use\n#ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s\n\n# The base directory for the ControlPath sockets. \n# This is the \"%(directory)s\" in the control_path option\n# \n# Example: \n# control_path_dir = /tmp/.ansible/cp\n#control_path_dir = ~/.ansible/cp\n\n# The path to use for the ControlPath sockets. This defaults to a hashed string of the hostname, \n# port and username (empty string in the config). The hash mitigates a common problem users \n# found with long hostames and the conventional %(directory)s/ansible-ssh-%%h-%%p-%%r format. \n# In those cases, a \"too long for Unix domain socket\" ssh error would occur.\n#\n# Example:\n# control_path = %(directory)s/%%h-%%r\n#control_path =\n\n# Enabling pipelining reduces the number of SSH operations required to\n# execute a module on the remote server. This can result in a significant\n# performance improvement when enabled, however when using \"sudo:\" you must\n# first disable 'requiretty' in /etc/sudoers\n#\n# By default, this option is disabled to preserve compatibility with\n# sudoers configurations that have requiretty (the default on many distros).\n#\n#pipelining = False\n\n# Control the mechanism for transferring files (old)\n#   * smart = try sftp and then try scp [default]\n#   * True = use scp only\n#   * False = use sftp only\n#scp_if_ssh = smart\n\n# Control the mechanism for transferring files (new)\n# If set, this will override the scp_if_ssh option\n#   * sftp  = use sftp to transfer files\n#   * scp   = use scp to transfer files\n#   * piped = use 'dd' over SSH to transfer files\n#   * smart = try sftp, scp, and piped, in that order [default]\n#transfer_method = smart\n\n# if False, sftp will not use batch mode to transfer files. This may cause some\n# types of file transfer failures impossible to catch however, and should\n# only be disabled if your sftp version has problems with batch mode\n#sftp_batch_mode = False\n\n[persistent_connection]\n\n# Configures the persistent connection timeout value in seconds.  This value is\n# how long the persistent connection will remain idle before it is destroyed.  \n# If the connection doesn't receive a request before the timeout value \n# expires, the connection is shutdown.  The default value is 30 seconds.\n#connect_timeout = 30\n\n# Configures the persistent connection retries.  This value configures the\n# number of attempts the ansible-connection will make when trying to connect\n# to the local domain socket.  The default value is 30.\n#connect_retries = 30\n\n# Configures the amount of time in seconds to wait between connection attempts \n# to the local unix domain socket.  This value works in conjunction with the\n# connect_retries value to define how long to try to connect to the local\n# domain socket when setting up a persistent connection.  The default value is\n# 1 second.\n#connect_interval = 1\n\n[accelerate]\n#accelerate_port = 5099\n#accelerate_timeout = 30\n#accelerate_connect_timeout = 5.0\n\n# The daemon timeout is measured in minutes. This time is measured\n# from the last activity to the accelerate daemon.\n#accelerate_daemon_timeout = 30\n\n# If set to yes, accelerate_multi_key will allow multiple\n# private keys to be uploaded to it, though each user must\n# have access to the system via SSH to add a new key. The default\n# is \"no\".\n#accelerate_multi_key = yes\n\n[selinux]\n# file systems that require special treatment when dealing with security context\n# the default behaviour that copies the existing context or uses the user default\n# needs to be changed to use the file system dependent context.\n#special_context_filesystems=nfs,vboxsf,fuse,ramfs,9p\n\n# Set this to yes to allow libvirt_lxc connections to work without SELinux.\n#libvirt_lxc_noseclabel = yes\n\n[colors]\n#highlight = white\n#verbose = blue\n#warn = bright purple\n#error = red\n#debug = dark gray\n#deprecate = purple\n#skip = cyan\n#unreachable = red\n#ok = green\n#changed = yellow\n#diff_add = green\n#diff_remove = red\n#diff_lines = cyan\n\n\n[diff]\n# Always print diff when running ( same as always running with -D/--diff )\n# always = no\n\n# Set how many context lines to show in diff\n# context = 3\n", "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport tempfile\nfrom string import ascii_letters, digits\n\nfrom ansible.errors import AnsibleOptionsError\nfrom ansible.module_utils.six import string_types\nfrom ansible.module_utils.six.moves import configparser\nfrom ansible.module_utils._text import to_text\nfrom ansible.parsing.quoting import unquote\nfrom ansible.utils.path import makedirs_safe\n\nBOOL_TRUE = frozenset([ \"true\", \"t\", \"y\", \"1\", \"yes\", \"on\" ])\n\ndef mk_boolean(value):\n    ret = value\n    if not isinstance(value, bool):\n        if value is None:\n            ret = False\n        ret = (str(value).lower() in BOOL_TRUE)\n    return ret\n\ndef shell_expand(path, expand_relative_paths=False):\n    '''\n    shell_expand is needed as os.path.expanduser does not work\n    when path is None, which is the default for ANSIBLE_PRIVATE_KEY_FILE\n    '''\n    if path:\n        path = os.path.expanduser(os.path.expandvars(path))\n        if expand_relative_paths and not path.startswith('/'):\n            # paths are always 'relative' to the config?\n            if 'CONFIG_FILE' in globals():\n                CFGDIR = os.path.dirname(CONFIG_FILE)\n                path = os.path.join(CFGDIR, path)\n            path = os.path.abspath(path)\n    return path\n\ndef get_config(p, section, key, env_var, default, value_type=None, expand_relative_paths=False):\n    ''' return a configuration variable with casting\n\n    :arg p: A ConfigParser object to look for the configuration in\n    :arg section: A section of the ini config that should be examined for this section.\n    :arg key: The config key to get this config from\n    :arg env_var: An Environment variable to check for the config var.  If\n        this is set to None then no environment variable will be used.\n    :arg default: A default value to assign to the config var if nothing else sets it.\n    :kwarg value_type: The type of the value.  This can be any of the following strings:\n        :boolean: sets the value to a True or False value\n        :integer: Sets the value to an integer or raises a ValueType error\n        :float: Sets the value to a float or raises a ValueType error\n        :list: Treats the value as a comma separated list.  Split the value\n            and return it as a python list.\n        :none: Sets the value to None\n        :path: Expands any environment variables and tilde's in the value.\n        :tmp_path: Create a unique temporary directory inside of the directory\n            specified by value and return its path.\n        :pathlist: Treat the value as a typical PATH string.  (On POSIX, this\n            means colon separated strings.)  Split the value and then expand\n            each part for environment variables and tildes.\n    :kwarg expand_relative_paths: for pathlist and path types, if this is set\n        to True then also change any relative paths into absolute paths.  The\n        default is False.\n    '''\n    value = _get_config(p, section, key, env_var, default)\n    if value_type == 'boolean':\n        value = mk_boolean(value)\n\n    elif value:\n        if value_type == 'integer':\n            value = int(value)\n\n        elif value_type == 'float':\n            value = float(value)\n\n        elif value_type == 'list':\n            if isinstance(value, string_types):\n                value = [x.strip() for x in value.split(',')]\n\n        elif value_type == 'none':\n            if value == \"None\":\n                value = None\n\n        elif value_type == 'path':\n            value = shell_expand(value, expand_relative_paths=expand_relative_paths)\n\n        elif value_type == 'tmppath':\n            value = shell_expand(value)\n            if not os.path.exists(value):\n                makedirs_safe(value, 0o700)\n            prefix = 'ansible-local-%s' % os.getpid()\n            value = tempfile.mkdtemp(prefix=prefix, dir=value)\n\n        elif value_type == 'pathlist':\n            if isinstance(value, string_types):\n                value = [shell_expand(x, expand_relative_paths=expand_relative_paths) \\\n                         for x in value.split(os.pathsep)]\n\n        elif isinstance(value, string_types):\n            value = unquote(value)\n\n    return to_text(value, errors='surrogate_or_strict', nonstring='passthru')\n\n\ndef _get_config(p, section, key, env_var, default):\n    ''' helper function for get_config '''\n    value = default\n\n    if p is not None:\n        try:\n            value = p.get(section, key, raw=True)\n        except:\n            pass\n\n    if env_var is not None:\n        env_value = os.environ.get(env_var, None)\n        if env_value is not None:\n            value = env_value\n\n    return to_text(value, errors='surrogate_or_strict', nonstring='passthru')\n\n\ndef load_config_file():\n    ''' Load Config File order(first found is used): ENV, CWD, HOME, /etc/ansible '''\n\n    p = configparser.ConfigParser()\n\n    path0 = os.getenv(\"ANSIBLE_CONFIG\", None)\n    if path0 is not None:\n        path0 = os.path.expanduser(path0)\n        if os.path.isdir(path0):\n            path0 += \"/ansible.cfg\"\n    try:\n        path1 = os.getcwd() + \"/ansible.cfg\"\n    except OSError:\n        path1 = None\n    path2 = os.path.expanduser(\"~/.ansible.cfg\")\n    path3 = \"/etc/ansible/ansible.cfg\"\n\n    for path in [path0, path1, path2, path3]:\n        if path is not None and os.path.exists(path):\n            try:\n                p.read(path)\n            except configparser.Error as e:\n                raise AnsibleOptionsError(\"Error reading config file: \\n{0}\".format(e))\n            return p, path\n    return None, ''\n\n\np, CONFIG_FILE = load_config_file()\n\n# check all of these extensions when looking for yaml files for things like\n# group variables -- really anything we can load\nYAML_FILENAME_EXTENSIONS = [ \"\", \".yml\", \".yaml\", \".json\" ]\n\n# the default whitelist for cow stencils\nDEFAULT_COW_WHITELIST = ['bud-frogs', 'bunny', 'cheese', 'daemon', 'default', 'dragon', 'elephant-in-snake', 'elephant',\n                         'eyes', 'hellokitty', 'kitty', 'luke-koala', 'meow', 'milk', 'moofasa', 'moose', 'ren', 'sheep',\n                         'small', 'stegosaurus', 'stimpy', 'supermilker', 'three-eyes', 'turkey', 'turtle', 'tux', 'udder',\n                         'vader-koala', 'vader', 'www',]\n\n# sections in config file\nDEFAULTS='defaults'\n\n\n# FIXME: add deprecation warning when these get set\n#### DEPRECATED VARS ####\n#\n\n#### If --tags or --skip-tags is given multiple times on the CLI and this is\n# True, merge the lists of tags together.  If False, let the last argument\n# overwrite any previous ones.  Behaviour is overwrite through 2.2.  2.3\n# overwrites but prints deprecation.  2.4 the default is to merge.\nMERGE_MULTIPLE_CLI_TAGS = get_config(p, DEFAULTS, 'merge_multiple_cli_tags', 'ANSIBLE_MERGE_MULTIPLE_CLI_TAGS', True, value_type='boolean')\n\n#### GENERALLY CONFIGURABLE THINGS ####\nDEFAULT_DEBUG             = get_config(p, DEFAULTS, 'debug',            'ANSIBLE_DEBUG',            False, value_type='boolean')\nDEFAULT_VERBOSITY         = get_config(p, DEFAULTS, 'verbosity',        'ANSIBLE_VERBOSITY',        0, value_type='integer')\nDEFAULT_HOST_LIST         = get_config(p, DEFAULTS,'inventory', 'ANSIBLE_INVENTORY', '/etc/ansible/hosts', value_type='path')\nDEFAULT_ROLES_PATH        = get_config(p, DEFAULTS, 'roles_path',       'ANSIBLE_ROLES_PATH',\n                                       '~/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles',\n                                       value_type='pathlist', expand_relative_paths=True)\nDEFAULT_REMOTE_TMP        = get_config(p, DEFAULTS, 'remote_tmp',       'ANSIBLE_REMOTE_TEMP',      '~/.ansible/tmp')\nDEFAULT_LOCAL_TMP         = get_config(p, DEFAULTS, 'local_tmp',        'ANSIBLE_LOCAL_TEMP',      '~/.ansible/tmp', value_type='tmppath')\nDEFAULT_MODULE_NAME       = get_config(p, DEFAULTS, 'module_name',      None,                       'command')\nDEFAULT_FACT_PATH         = get_config(p, DEFAULTS, 'fact_path',        'ANSIBLE_FACT_PATH', None, value_type='path')\nDEFAULT_FORKS             = get_config(p, DEFAULTS, 'forks',            'ANSIBLE_FORKS',            5, value_type='integer')\nDEFAULT_MODULE_ARGS       = get_config(p, DEFAULTS, 'module_args',      'ANSIBLE_MODULE_ARGS',      '')\nDEFAULT_MODULE_LANG       = get_config(p, DEFAULTS, 'module_lang',      'ANSIBLE_MODULE_LANG',      os.getenv('LANG', 'en_US.UTF-8'))\nDEFAULT_MODULE_SET_LOCALE = get_config(p, DEFAULTS, 'module_set_locale','ANSIBLE_MODULE_SET_LOCALE',False, value_type='boolean')\nDEFAULT_MODULE_COMPRESSION= get_config(p, DEFAULTS, 'module_compression', None, 'ZIP_DEFLATED')\nDEFAULT_TIMEOUT           = get_config(p, DEFAULTS, 'timeout',          'ANSIBLE_TIMEOUT',          10, value_type='integer')\nDEFAULT_POLL_INTERVAL     = get_config(p, DEFAULTS, 'poll_interval',    'ANSIBLE_POLL_INTERVAL',    15, value_type='integer')\nDEFAULT_REMOTE_USER       = get_config(p, DEFAULTS, 'remote_user',      'ANSIBLE_REMOTE_USER',      None)\nDEFAULT_ASK_PASS          = get_config(p, DEFAULTS, 'ask_pass',  'ANSIBLE_ASK_PASS',    False, value_type='boolean')\nDEFAULT_PRIVATE_KEY_FILE  = get_config(p, DEFAULTS, 'private_key_file', 'ANSIBLE_PRIVATE_KEY_FILE', None, value_type='path')\nDEFAULT_REMOTE_PORT       = get_config(p, DEFAULTS, 'remote_port',      'ANSIBLE_REMOTE_PORT',      None, value_type='integer')\nDEFAULT_ASK_VAULT_PASS    = get_config(p, DEFAULTS, 'ask_vault_pass',    'ANSIBLE_ASK_VAULT_PASS',    False, value_type='boolean')\nDEFAULT_VAULT_PASSWORD_FILE = get_config(p, DEFAULTS, 'vault_password_file', 'ANSIBLE_VAULT_PASSWORD_FILE', None, value_type='path')\nDEFAULT_TRANSPORT         = get_config(p, DEFAULTS, 'transport',        'ANSIBLE_TRANSPORT',        'smart')\nDEFAULT_SCP_IF_SSH        = get_config(p, 'ssh_connection', 'scp_if_ssh',       'ANSIBLE_SCP_IF_SSH',       'smart')\nDEFAULT_SFTP_BATCH_MODE   = get_config(p, 'ssh_connection', 'sftp_batch_mode', 'ANSIBLE_SFTP_BATCH_MODE', True, value_type='boolean')\nDEFAULT_SSH_TRANSFER_METHOD = get_config(p, 'ssh_connection', 'transfer_method', 'ANSIBLE_SSH_TRANSFER_METHOD', None)\nDEFAULT_MANAGED_STR       = get_config(p, DEFAULTS, 'ansible_managed',  None,           'Ansible managed')\nDEFAULT_SYSLOG_FACILITY   = get_config(p, DEFAULTS, 'syslog_facility',  'ANSIBLE_SYSLOG_FACILITY', 'LOG_USER')\nDEFAULT_KEEP_REMOTE_FILES = get_config(p, DEFAULTS, 'keep_remote_files', 'ANSIBLE_KEEP_REMOTE_FILES', False, value_type='boolean')\nDEFAULT_HASH_BEHAVIOUR    = get_config(p, DEFAULTS, 'hash_behaviour', 'ANSIBLE_HASH_BEHAVIOUR', 'replace')\nDEFAULT_PRIVATE_ROLE_VARS = get_config(p, DEFAULTS, 'private_role_vars', 'ANSIBLE_PRIVATE_ROLE_VARS', False, value_type='boolean')\nDEFAULT_JINJA2_EXTENSIONS = get_config(p, DEFAULTS, 'jinja2_extensions', 'ANSIBLE_JINJA2_EXTENSIONS', None)\nDEFAULT_EXECUTABLE        = get_config(p, DEFAULTS, 'executable', 'ANSIBLE_EXECUTABLE', '/bin/sh')\nDEFAULT_GATHERING         = get_config(p, DEFAULTS, 'gathering', 'ANSIBLE_GATHERING', 'implicit').lower()\nDEFAULT_GATHER_SUBSET     = get_config(p, DEFAULTS, 'gather_subset', 'ANSIBLE_GATHER_SUBSET', 'all').lower()\nDEFAULT_GATHER_TIMEOUT    = get_config(p, DEFAULTS, 'gather_timeout', 'ANSIBLE_GATHER_TIMEOUT', 10, value_type='integer')\nDEFAULT_LOG_PATH          = get_config(p, DEFAULTS, 'log_path',           'ANSIBLE_LOG_PATH', '', value_type='path')\nDEFAULT_FORCE_HANDLERS    = get_config(p, DEFAULTS, 'force_handlers', 'ANSIBLE_FORCE_HANDLERS', False, value_type='boolean')\nDEFAULT_INVENTORY_IGNORE  = get_config(p, DEFAULTS, 'inventory_ignore_extensions', 'ANSIBLE_INVENTORY_IGNORE',\n                                       [\"~\", \".orig\", \".bak\", \".ini\", \".cfg\", \".retry\", \".pyc\", \".pyo\"], value_type='list')\nDEFAULT_VAR_COMPRESSION_LEVEL = get_config(p, DEFAULTS, 'var_compression_level', 'ANSIBLE_VAR_COMPRESSION_LEVEL', 0, value_type='integer')\nDEFAULT_INTERNAL_POLL_INTERVAL = get_config(p, DEFAULTS, 'internal_poll_interval', None, 0.001, value_type='float')\nERROR_ON_MISSING_HANDLER  = get_config(p, DEFAULTS, 'error_on_missing_handler', 'ANSIBLE_ERROR_ON_MISSING_HANDLER', True, value_type='boolean')\nSHOW_CUSTOM_STATS = get_config(p, DEFAULTS, 'show_custom_stats', 'ANSIBLE_SHOW_CUSTOM_STATS', False, value_type='boolean')\nNAMESPACE_FACTS = get_config(p, DEFAULTS, 'restrict_facts_namespace', 'ANSIBLE_RESTRICT_FACTS', False, value_type='boolean')\n\n# static includes\nDEFAULT_TASK_INCLUDES_STATIC    = get_config(p, DEFAULTS, 'task_includes_static', 'ANSIBLE_TASK_INCLUDES_STATIC', False, value_type='boolean')\nDEFAULT_HANDLER_INCLUDES_STATIC = get_config(p, DEFAULTS, 'handler_includes_static', 'ANSIBLE_HANDLER_INCLUDES_STATIC', False, value_type='boolean')\n\n# disclosure\nDEFAULT_NO_LOG           = get_config(p, DEFAULTS, 'no_log', 'ANSIBLE_NO_LOG', False, value_type='boolean')\nDEFAULT_NO_TARGET_SYSLOG   = get_config(p, DEFAULTS, 'no_target_syslog', 'ANSIBLE_NO_TARGET_SYSLOG', False, value_type='boolean')\nALLOW_WORLD_READABLE_TMPFILES = get_config(p, DEFAULTS, 'allow_world_readable_tmpfiles', None, False, value_type='boolean')\n\n# selinux\nDEFAULT_SELINUX_SPECIAL_FS = get_config(p, 'selinux', 'special_context_filesystems', None, 'fuse, nfs, vboxsf, ramfs, 9p', value_type='list')\nDEFAULT_LIBVIRT_LXC_NOSECLABEL = get_config(p, 'selinux', 'libvirt_lxc_noseclabel', 'LIBVIRT_LXC_NOSECLABEL', False, value_type='boolean')\n\n### PRIVILEGE ESCALATION ###\n# Backwards Compat\nDEFAULT_SU                = get_config(p, DEFAULTS, 'su', 'ANSIBLE_SU', False, value_type='boolean')\nDEFAULT_SU_USER           = get_config(p, DEFAULTS, 'su_user', 'ANSIBLE_SU_USER', 'root')\nDEFAULT_SU_EXE            = get_config(p, DEFAULTS, 'su_exe', 'ANSIBLE_SU_EXE', None)\nDEFAULT_SU_FLAGS          = get_config(p, DEFAULTS, 'su_flags', 'ANSIBLE_SU_FLAGS', None)\nDEFAULT_ASK_SU_PASS       = get_config(p, DEFAULTS, 'ask_su_pass', 'ANSIBLE_ASK_SU_PASS', False, value_type='boolean')\nDEFAULT_SUDO              = get_config(p, DEFAULTS, 'sudo', 'ANSIBLE_SUDO', False, value_type='boolean')\nDEFAULT_SUDO_USER         = get_config(p, DEFAULTS, 'sudo_user',        'ANSIBLE_SUDO_USER',        'root')\nDEFAULT_SUDO_EXE          = get_config(p, DEFAULTS, 'sudo_exe', 'ANSIBLE_SUDO_EXE', None)\nDEFAULT_SUDO_FLAGS        = get_config(p, DEFAULTS, 'sudo_flags', 'ANSIBLE_SUDO_FLAGS', '-H -S -n')\nDEFAULT_ASK_SUDO_PASS     = get_config(p, DEFAULTS, 'ask_sudo_pass',    'ANSIBLE_ASK_SUDO_PASS',    False, value_type='boolean')\n\n# Become\nBECOME_ERROR_STRINGS      = {\n    'sudo': 'Sorry, try again.',\n    'su': 'Authentication failure',\n    'pbrun': '',\n    'pfexec': '',\n    'doas': 'Permission denied',\n    'dzdo': '',\n    'ksu': 'Password incorrect'\n}  # FIXME: deal with i18n\nBECOME_MISSING_STRINGS    = {\n    'sudo': 'sorry, a password is required to run sudo',\n    'su': '',\n    'pbrun': '',\n    'pfexec': '',\n    'doas': 'Authorization required',\n    'dzdo': '',\n    'ksu': 'No password given'\n}  # FIXME: deal with i18n\nBECOME_METHODS            = ['sudo','su','pbrun','pfexec','doas','dzdo','ksu','runas']\nBECOME_ALLOW_SAME_USER    = get_config(p, 'privilege_escalation', 'become_allow_same_user', 'ANSIBLE_BECOME_ALLOW_SAME_USER', False, value_type='boolean')\nDEFAULT_BECOME_METHOD     = get_config(p, 'privilege_escalation', 'become_method', 'ANSIBLE_BECOME_METHOD',\n                                       'sudo' if DEFAULT_SUDO else 'su' if DEFAULT_SU else 'sudo').lower()\nDEFAULT_BECOME            = get_config(p, 'privilege_escalation', 'become', 'ANSIBLE_BECOME',False, value_type='boolean')\nDEFAULT_BECOME_USER       = get_config(p, 'privilege_escalation', 'become_user', 'ANSIBLE_BECOME_USER', 'root')\nDEFAULT_BECOME_EXE        = get_config(p, 'privilege_escalation', 'become_exe', 'ANSIBLE_BECOME_EXE', None)\nDEFAULT_BECOME_FLAGS      = get_config(p, 'privilege_escalation', 'become_flags', 'ANSIBLE_BECOME_FLAGS', None)\nDEFAULT_BECOME_ASK_PASS   = get_config(p, 'privilege_escalation', 'become_ask_pass', 'ANSIBLE_BECOME_ASK_PASS', False, value_type='boolean')\n\n\n# PLUGINS\n\n# Modules that can optimize with_items loops into a single call.  Currently\n# these modules must (1) take a \"name\" or \"pkg\" parameter that is a list.  If\n# the module takes both, bad things could happen.\n# In the future we should probably generalize this even further\n# (mapping of param: squash field)\nDEFAULT_SQUASH_ACTIONS         = get_config(p, DEFAULTS, 'squash_actions', 'ANSIBLE_SQUASH_ACTIONS',\n                                            \"apk, apt, dnf, homebrew, openbsd_pkg, pacman, pkgng, yum, zypper\", value_type='list')\n# paths\n\nDEFAULT_ACTION_PLUGIN_PATH     = get_config(p, DEFAULTS, 'action_plugins', 'ANSIBLE_ACTION_PLUGINS',\n                                            '~/.ansible/plugins/action:/usr/share/ansible/plugins/action', value_type='pathlist')\nDEFAULT_CACHE_PLUGIN_PATH      = get_config(p, DEFAULTS, 'cache_plugins', 'ANSIBLE_CACHE_PLUGINS',\n                                            '~/.ansible/plugins/cache:/usr/share/ansible/plugins/cache', value_type='pathlist')\nDEFAULT_CALLBACK_PLUGIN_PATH   = get_config(p, DEFAULTS, 'callback_plugins', 'ANSIBLE_CALLBACK_PLUGINS',\n                                            '~/.ansible/plugins/callback:/usr/share/ansible/plugins/callback', value_type='pathlist')\nDEFAULT_CONNECTION_PLUGIN_PATH = get_config(p, DEFAULTS, 'connection_plugins', 'ANSIBLE_CONNECTION_PLUGINS',\n                                            '~/.ansible/plugins/connection:/usr/share/ansible/plugins/connection', value_type='pathlist')\nDEFAULT_LOOKUP_PLUGIN_PATH     = get_config(p, DEFAULTS, 'lookup_plugins', 'ANSIBLE_LOOKUP_PLUGINS',\n                                            '~/.ansible/plugins/lookup:/usr/share/ansible/plugins/lookup', value_type='pathlist')\nDEFAULT_MODULE_PATH            = get_config(p, DEFAULTS, 'library',            'ANSIBLE_LIBRARY',\n                                            '~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules', value_type='pathlist')\nDEFAULT_MODULE_UTILS_PATH      = get_config(p, DEFAULTS, 'module_utils',       'ANSIBLE_MODULE_UTILS',\n                                            '~/.ansible/plugins/module_utils:/usr/share/ansible/plugins/module_utils', value_type='pathlist')\nDEFAULT_INVENTORY_PLUGIN_PATH  = get_config(p, DEFAULTS, 'inventory_plugins', 'ANSIBLE_INVENTORY_PLUGINS',\n                                            '~/.ansible/plugins/inventory:/usr/share/ansible/plugins/inventory', value_type='pathlist')\nDEFAULT_VARS_PLUGIN_PATH       = get_config(p, DEFAULTS, 'vars_plugins', 'ANSIBLE_VARS_PLUGINS',\n                                            '~/.ansible/plugins/vars:/usr/share/ansible/plugins/vars', value_type='pathlist')\nDEFAULT_FILTER_PLUGIN_PATH     = get_config(p, DEFAULTS, 'filter_plugins', 'ANSIBLE_FILTER_PLUGINS',\n                                            '~/.ansible/plugins/filter:/usr/share/ansible/plugins/filter', value_type='pathlist')\nDEFAULT_TEST_PLUGIN_PATH       = get_config(p, DEFAULTS, 'test_plugins', 'ANSIBLE_TEST_PLUGINS',\n                                            '~/.ansible/plugins/test:/usr/share/ansible/plugins/test', value_type='pathlist')\nDEFAULT_STRATEGY_PLUGIN_PATH   = get_config(p, DEFAULTS, 'strategy_plugins', 'ANSIBLE_STRATEGY_PLUGINS',\n                                            '~/.ansible/plugins/strategy:/usr/share/ansible/plugins/strategy', value_type='pathlist')\n\nNETWORK_GROUP_MODULES          = get_config(p, DEFAULTS, 'network_group_modules','NETWORK_GROUP_MODULES', ['eos', 'nxos', 'ios', 'iosxr', 'junos',\n                                                                                                           'vyos', 'sros', 'dellos9', 'dellos10', 'dellos6'],\n                                            value_type='list')\nDEFAULT_STRATEGY               = get_config(p, DEFAULTS, 'strategy',           'ANSIBLE_STRATEGY', 'linear')\nDEFAULT_STDOUT_CALLBACK        = get_config(p, DEFAULTS, 'stdout_callback',    'ANSIBLE_STDOUT_CALLBACK', 'default')\n# cache\nCACHE_PLUGIN                   = get_config(p, DEFAULTS, 'fact_caching', 'ANSIBLE_CACHE_PLUGIN', 'memory')\nCACHE_PLUGIN_CONNECTION        = get_config(p, DEFAULTS, 'fact_caching_connection', 'ANSIBLE_CACHE_PLUGIN_CONNECTION', None)\nCACHE_PLUGIN_PREFIX            = get_config(p, DEFAULTS, 'fact_caching_prefix', 'ANSIBLE_CACHE_PLUGIN_PREFIX', 'ansible_facts')\nCACHE_PLUGIN_TIMEOUT           = get_config(p, DEFAULTS, 'fact_caching_timeout', 'ANSIBLE_CACHE_PLUGIN_TIMEOUT', 24 * 60 * 60, value_type='integer')\n\n# Display\nANSIBLE_FORCE_COLOR            = get_config(p, DEFAULTS, 'force_color', 'ANSIBLE_FORCE_COLOR', None, value_type='boolean')\nANSIBLE_NOCOLOR                = get_config(p, DEFAULTS, 'nocolor', 'ANSIBLE_NOCOLOR', None, value_type='boolean')\nANSIBLE_NOCOWS                 = get_config(p, DEFAULTS, 'nocows', 'ANSIBLE_NOCOWS', None, value_type='boolean')\nANSIBLE_COW_SELECTION          = get_config(p, DEFAULTS, 'cow_selection', 'ANSIBLE_COW_SELECTION', 'default')\nANSIBLE_COW_WHITELIST          = get_config(p, DEFAULTS, 'cow_whitelist', 'ANSIBLE_COW_WHITELIST', DEFAULT_COW_WHITELIST, value_type='list')\nDISPLAY_SKIPPED_HOSTS          = get_config(p, DEFAULTS, 'display_skipped_hosts', 'DISPLAY_SKIPPED_HOSTS', True, value_type='boolean')\nDEFAULT_UNDEFINED_VAR_BEHAVIOR = get_config(p, DEFAULTS, 'error_on_undefined_vars', 'ANSIBLE_ERROR_ON_UNDEFINED_VARS', True, value_type='boolean')\nHOST_KEY_CHECKING              = get_config(p, DEFAULTS, 'host_key_checking',  'ANSIBLE_HOST_KEY_CHECKING',    True, value_type='boolean')\nSYSTEM_WARNINGS                = get_config(p, DEFAULTS, 'system_warnings', 'ANSIBLE_SYSTEM_WARNINGS', True, value_type='boolean')\nDEPRECATION_WARNINGS           = get_config(p, DEFAULTS, 'deprecation_warnings', 'ANSIBLE_DEPRECATION_WARNINGS', True, value_type='boolean')\nDEFAULT_CALLABLE_WHITELIST     = get_config(p, DEFAULTS, 'callable_whitelist', 'ANSIBLE_CALLABLE_WHITELIST', [], value_type='list')\nCOMMAND_WARNINGS               = get_config(p, DEFAULTS, 'command_warnings', 'ANSIBLE_COMMAND_WARNINGS', True, value_type='boolean')\nDEFAULT_LOAD_CALLBACK_PLUGINS  = get_config(p, DEFAULTS, 'bin_ansible_callbacks', 'ANSIBLE_LOAD_CALLBACK_PLUGINS', False, value_type='boolean')\nDEFAULT_CALLBACK_WHITELIST     = get_config(p, DEFAULTS, 'callback_whitelist', 'ANSIBLE_CALLBACK_WHITELIST', [], value_type='list')\nRETRY_FILES_ENABLED            = get_config(p, DEFAULTS, 'retry_files_enabled', 'ANSIBLE_RETRY_FILES_ENABLED', True, value_type='boolean')\nRETRY_FILES_SAVE_PATH          = get_config(p, DEFAULTS, 'retry_files_save_path', 'ANSIBLE_RETRY_FILES_SAVE_PATH', None, value_type='path')\nDEFAULT_NULL_REPRESENTATION    = get_config(p, DEFAULTS, 'null_representation', 'ANSIBLE_NULL_REPRESENTATION', None, value_type='none')\nDISPLAY_ARGS_TO_STDOUT         = get_config(p, DEFAULTS, 'display_args_to_stdout', 'ANSIBLE_DISPLAY_ARGS_TO_STDOUT', False, value_type='boolean')\nMAX_FILE_SIZE_FOR_DIFF         = get_config(p, DEFAULTS, 'max_diff_size', 'ANSIBLE_MAX_DIFF_SIZE', 1024*1024, value_type='integer')\n\n# CONNECTION RELATED\nUSE_PERSISTENT_CONNECTIONS     = get_config(p, DEFAULTS, 'use_persistent_connections', 'ANSIBLE_USE_PERSISTENT_CONNECTIONS', False, value_type='boolean')\nANSIBLE_SSH_ARGS               = get_config(p, 'ssh_connection', 'ssh_args', 'ANSIBLE_SSH_ARGS', '-C -o ControlMaster=auto -o ControlPersist=60s')\n### WARNING: Someone might be tempted to switch this from percent-formatting\n# to .format() in the future.  be sure to read this:\n# http://lucumr.pocoo.org/2016/12/29/careful-with-str-format/ and understand\n# that it may be a security risk to do so.\nANSIBLE_SSH_CONTROL_PATH       = get_config(p, 'ssh_connection', 'control_path', 'ANSIBLE_SSH_CONTROL_PATH', None)\nANSIBLE_SSH_CONTROL_PATH_DIR   = get_config(p, 'ssh_connection', 'control_path_dir', 'ANSIBLE_SSH_CONTROL_PATH_DIR', u'~/.ansible/cp')\nANSIBLE_SSH_PIPELINING         = get_config(p, 'ssh_connection', 'pipelining', 'ANSIBLE_SSH_PIPELINING', False, value_type='boolean')\nANSIBLE_SSH_RETRIES            = get_config(p, 'ssh_connection', 'retries', 'ANSIBLE_SSH_RETRIES', 0, value_type='integer')\nANSIBLE_SSH_EXECUTABLE         = get_config(p, 'ssh_connection', 'ssh_executable', 'ANSIBLE_SSH_EXECUTABLE', 'ssh')\nPARAMIKO_RECORD_HOST_KEYS      = get_config(p, 'paramiko_connection', 'record_host_keys', 'ANSIBLE_PARAMIKO_RECORD_HOST_KEYS', True, value_type='boolean')\nPARAMIKO_HOST_KEY_AUTO_ADD     = get_config(p, 'paramiko_connection', 'host_key_auto_add', 'ANSIBLE_PARAMIKO_HOST_KEY_AUTO_ADD', False, value_type='boolean')\nPARAMIKO_PROXY_COMMAND         = get_config(p, 'paramiko_connection', 'proxy_command', 'ANSIBLE_PARAMIKO_PROXY_COMMAND', None)\nPARAMIKO_LOOK_FOR_KEYS         = get_config(p, 'paramiko_connection', 'look_for_keys', 'ANSIBLE_PARAMIKO_LOOK_FOR_KEYS', True, value_type='boolean')\nPERSISTENT_CONNECT_TIMEOUT     = get_config(p, 'persistent_connection', 'connect_timeout', 'ANSIBLE_PERSISTENT_CONNECT_TIMEOUT', 30, value_type='integer')\nPERSISTENT_CONNECT_RETRIES     = get_config(p, 'persistent_connection', 'connect_retries', 'ANSIBLE_PERSISTENT_CONNECT_RETRIES', 30, value_type='integer')\nPERSISTENT_CONNECT_INTERVAL    = get_config(p, 'persistent_connection', 'connect_interval', 'ANSIBLE_PERSISTENT_CONNECT_INTERVAL', 1, value_type='integer')\n\n# obsolete -- will be formally removed\nACCELERATE_PORT                = get_config(p, 'accelerate', 'accelerate_port', 'ACCELERATE_PORT', 5099, value_type='integer')\nACCELERATE_TIMEOUT             = get_config(p, 'accelerate', 'accelerate_timeout', 'ACCELERATE_TIMEOUT', 30, value_type='integer')\nACCELERATE_CONNECT_TIMEOUT     = get_config(p, 'accelerate', 'accelerate_connect_timeout', 'ACCELERATE_CONNECT_TIMEOUT', 1.0, value_type='float')\nACCELERATE_DAEMON_TIMEOUT      = get_config(p, 'accelerate', 'accelerate_daemon_timeout', 'ACCELERATE_DAEMON_TIMEOUT', 30, value_type='integer')\nACCELERATE_KEYS_DIR            = get_config(p, 'accelerate', 'accelerate_keys_dir', 'ACCELERATE_KEYS_DIR', '~/.fireball.keys')\nACCELERATE_KEYS_DIR_PERMS      = get_config(p, 'accelerate', 'accelerate_keys_dir_perms', 'ACCELERATE_KEYS_DIR_PERMS', '700')\nACCELERATE_KEYS_FILE_PERMS     = get_config(p, 'accelerate', 'accelerate_keys_file_perms', 'ACCELERATE_KEYS_FILE_PERMS', '600')\nACCELERATE_MULTI_KEY           = get_config(p, 'accelerate', 'accelerate_multi_key', 'ACCELERATE_MULTI_KEY', False, value_type='boolean')\nPARAMIKO_PTY                   = get_config(p, 'paramiko_connection', 'pty', 'ANSIBLE_PARAMIKO_PTY', True, value_type='boolean')\n\n# galaxy related\nGALAXY_SERVER                  = get_config(p, 'galaxy', 'server', 'ANSIBLE_GALAXY_SERVER', 'https://galaxy.ansible.com')\nGALAXY_IGNORE_CERTS            = get_config(p, 'galaxy', 'ignore_certs', 'ANSIBLE_GALAXY_IGNORE', False, value_type='boolean')\n# this can be configured to blacklist SCMS but cannot add new ones unless the code is also updated\nGALAXY_SCMS                    = get_config(p, 'galaxy', 'scms', 'ANSIBLE_GALAXY_SCMS', 'git, hg', value_type='list')\nGALAXY_ROLE_SKELETON = get_config(p, 'galaxy', 'role_skeleton', 'ANSIBLE_GALAXY_ROLE_SKELETON', None, value_type='path')\nGALAXY_ROLE_SKELETON_IGNORE = get_config(p, 'galaxy', 'role_skeleton_ignore', 'ANSIBLE_GALAXY_ROLE_SKELETON_IGNORE', ['^.git$', '^.*/.git_keep$'],\n                                         value_type='list')\n\nSTRING_TYPE_FILTERS = get_config(p, 'jinja2', 'dont_type_filters', 'ANSIBLE_STRING_TYPE_FILTERS',\n                                 ['string', 'to_json', 'to_nice_json', 'to_yaml', 'ppretty', 'json'], value_type='list' )\n\n# colors\nCOLOR_HIGHLIGHT   = get_config(p, 'colors', 'highlight', 'ANSIBLE_COLOR_HIGHLIGHT', 'white')\nCOLOR_VERBOSE     = get_config(p, 'colors', 'verbose', 'ANSIBLE_COLOR_VERBOSE', 'blue')\nCOLOR_WARN        = get_config(p, 'colors', 'warn', 'ANSIBLE_COLOR_WARN', 'bright purple')\nCOLOR_ERROR       = get_config(p, 'colors', 'error', 'ANSIBLE_COLOR_ERROR', 'red')\nCOLOR_DEBUG       = get_config(p, 'colors', 'debug', 'ANSIBLE_COLOR_DEBUG', 'dark gray')\nCOLOR_DEPRECATE   = get_config(p, 'colors', 'deprecate', 'ANSIBLE_COLOR_DEPRECATE', 'purple')\nCOLOR_SKIP        = get_config(p, 'colors', 'skip', 'ANSIBLE_COLOR_SKIP', 'cyan')\nCOLOR_UNREACHABLE = get_config(p, 'colors', 'unreachable', 'ANSIBLE_COLOR_UNREACHABLE', 'bright red')\nCOLOR_OK          = get_config(p, 'colors', 'ok', 'ANSIBLE_COLOR_OK', 'green')\nCOLOR_CHANGED     = get_config(p, 'colors', 'changed', 'ANSIBLE_COLOR_CHANGED', 'yellow')\nCOLOR_DIFF_ADD    = get_config(p, 'colors', 'diff_add', 'ANSIBLE_COLOR_DIFF_ADD', 'green')\nCOLOR_DIFF_REMOVE = get_config(p, 'colors', 'diff_remove', 'ANSIBLE_COLOR_DIFF_REMOVE', 'red')\nCOLOR_DIFF_LINES  = get_config(p, 'colors', 'diff_lines', 'ANSIBLE_COLOR_DIFF_LINES', 'cyan')\n\n# diff\nDIFF_CONTEXT = get_config(p, 'diff', 'context', 'ANSIBLE_DIFF_CONTEXT', 3, value_type='integer')\nDIFF_ALWAYS = get_config(p, 'diff', 'always', 'ANSIBLE_DIFF_ALWAYS', False, value_type='bool')\n\n# non-configurable things\nMODULE_REQUIRE_ARGS       = ['command', 'win_command', 'shell', 'win_shell', 'raw', 'script']\nMODULE_NO_JSON            = ['command', 'win_command', 'shell', 'win_shell', 'raw']\nDEFAULT_BECOME_PASS       = None\nDEFAULT_PASSWORD_CHARS = to_text(ascii_letters + digits + \".,:-_\", errors='strict')  # characters included in auto-generated passwords\nDEFAULT_SUDO_PASS         = None\nDEFAULT_REMOTE_PASS       = None\nDEFAULT_SUBSET            = None\nDEFAULT_SU_PASS           = None\nVAULT_VERSION_MIN         = 1.0\nVAULT_VERSION_MAX         = 1.0\nTREE_DIR                  = None\nLOCALHOST                 = frozenset(['127.0.0.1', 'localhost', '::1'])\n# module search\nBLACKLIST_EXTS = ('.pyc', '.swp', '.bak', '~', '.rpm', '.md', '.txt')\nIGNORE_FILES = [\"COPYING\", \"CONTRIBUTING\", \"LICENSE\", \"README\", \"VERSION\", \"GUIDELINES\"]\nINTERNAL_RESULT_KEYS      = ['add_host', 'add_group']\nRESTRICTED_RESULT_KEYS    = ['ansible_rsync_path', 'ansible_playbook_python']\n\n", "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport ast\nimport contextlib\nimport datetime\nimport os\nimport pwd\nimport re\nimport time\n\nfrom io import StringIO\nfrom numbers import Number\n\ntry:\n    from hashlib import sha1\nexcept ImportError:\n    from sha import sha as sha1\n\nfrom jinja2 import Environment\nfrom jinja2.loaders import FileSystemLoader\nfrom jinja2.exceptions import TemplateSyntaxError, UndefinedError\nfrom jinja2.utils import concat as j2_concat\nfrom jinja2.runtime import Context, StrictUndefined\n\nfrom ansible import constants as C\nfrom ansible.errors import AnsibleError, AnsibleFilterError, AnsibleUndefinedVariable\nfrom ansible.module_utils.six import string_types, text_type\nfrom ansible.module_utils._text import to_native, to_text, to_bytes\nfrom ansible.plugins import filter_loader, lookup_loader, test_loader\nfrom ansible.template.safe_eval import safe_eval\nfrom ansible.template.template import AnsibleJ2Template\nfrom ansible.template.vars import AnsibleJ2Vars\nfrom ansible.utils.unsafe_proxy import UnsafeProxy, wrap_var\n\ntry:\n    from __main__ import display\nexcept ImportError:\n    from ansible.utils.display import Display\n    display = Display()\n\n\n__all__ = ['Templar', 'generate_ansible_template_vars']\n\n# A regex for checking to see if a variable we're trying to\n# expand is just a single variable name.\n\n# Primitive Types which we don't want Jinja to convert to strings.\nNON_TEMPLATED_TYPES = ( bool, Number )\n\nJINJA2_OVERRIDE = '#jinja2:'\n\n\ndef generate_ansible_template_vars(path):\n\n    b_path = to_bytes(path)\n    try:\n        template_uid = pwd.getpwuid(os.stat(b_path).st_uid).pw_name\n    except:\n        template_uid = os.stat(b_path).st_uid\n\n    temp_vars = {}\n    temp_vars['template_host']     = os.uname()[1]\n    temp_vars['template_path']     = b_path\n    temp_vars['template_mtime']    = datetime.datetime.fromtimestamp(os.path.getmtime(b_path))\n    temp_vars['template_uid']      = template_uid\n    temp_vars['template_fullpath'] = os.path.abspath(path)\n    temp_vars['template_run_date'] = datetime.datetime.now()\n\n    managed_default = C.DEFAULT_MANAGED_STR\n    managed_str = managed_default.format(\n        host = temp_vars['template_host'],\n        uid  = temp_vars['template_uid'],\n        file = temp_vars['template_path'],\n    )\n    temp_vars['ansible_managed'] = time.strftime( managed_str, time.localtime(os.path.getmtime(b_path)))\n\n    return temp_vars\n\n\ndef _escape_backslashes(data, jinja_env):\n    \"\"\"Double backslashes within jinja2 expressions\n\n    A user may enter something like this in a playbook::\n\n      debug:\n        msg: \"Test Case 1\\\\3; {{ test1_name | regex_replace('^(.*)_name$', '\\\\1')}}\"\n\n    The string inside of the {{ gets interpreted multiple times First by yaml.\n    Then by python.  And finally by jinja2 as part of it's variable.  Because\n    it is processed by both python and jinja2, the backslash escaped\n    characters get unescaped twice.  This means that we'd normally have to use\n    four backslashes to escape that.  This is painful for playbook authors as\n    they have to remember different rules for inside vs outside of a jinja2\n    expression (The backslashes outside of the \"{{ }}\" only get processed by\n    yaml and python.  So they only need to be escaped once).  The following\n    code fixes this by automatically performing the extra quoting of\n    backslashes inside of a jinja2 expression.\n\n    \"\"\"\n    if '\\\\' in data and '{{' in data:\n        new_data = []\n        d2 = jinja_env.preprocess(data)\n        in_var = False\n\n        for token in jinja_env.lex(d2):\n            if token[1] == 'variable_begin':\n                in_var = True\n                new_data.append(token[2])\n            elif token[1] == 'variable_end':\n                in_var = False\n                new_data.append(token[2])\n            elif in_var and token[1] == 'string':\n                # Double backslashes only if we're inside of a jinja2 variable\n                new_data.append(token[2].replace('\\\\','\\\\\\\\'))\n            else:\n                new_data.append(token[2])\n\n        data = ''.join(new_data)\n\n    return data\n\n\ndef _count_newlines_from_end(in_str):\n    '''\n    Counts the number of newlines at the end of a string. This is used during\n    the jinja2 templating to ensure the count matches the input, since some newlines\n    may be thrown away during the templating.\n    '''\n\n    try:\n        i = len(in_str)\n        j = i -1\n        while in_str[j] == '\\n':\n            j -= 1\n        return i - 1 - j\n    except IndexError:\n        # Uncommon cases: zero length string and string containing only newlines\n        return i\n\nclass AnsibleContext(Context):\n    '''\n    A custom context, which intercepts resolve() calls and sets a flag\n    internally if any variable lookup returns an AnsibleUnsafe value. This\n    flag is checked post-templating, and (when set) will result in the\n    final templated result being wrapped via UnsafeProxy.\n    '''\n    def __init__(self, *args, **kwargs):\n        super(AnsibleContext, self).__init__(*args, **kwargs)\n        self.unsafe = False\n\n    def _is_unsafe(self, val):\n        '''\n        Our helper function, which will also recursively check dict and\n        list entries due to the fact that they may be repr'd and contain\n        a key or value which contains jinja2 syntax and would otherwise\n        lose the AnsibleUnsafe value.\n        '''\n        if isinstance(val, dict):\n            for key in val.keys():\n                if self._is_unsafe(val[key]):\n                    return True\n        elif isinstance(val, list):\n            for item in val:\n                if self._is_unsafe(item):\n                    return True\n        elif isinstance(val, string_types) and hasattr(val, '__UNSAFE__'):\n            return True\n        return False\n\n    def _update_unsafe(self, val):\n        if val is not None and not self.unsafe and self._is_unsafe(val):\n            self.unsafe = True\n\n    def resolve(self, key):\n        '''\n        The intercepted resolve(), which uses the helper above to set the\n        internal flag whenever an unsafe variable value is returned.\n        '''\n        val = super(AnsibleContext, self).resolve(key)\n        self._update_unsafe(val)\n        return val\n\n    def resolve_or_missing(self, key):\n        val = super(AnsibleContext, self).resolve_or_missing(key)\n        self._update_unsafe(val)\n        return val\n\nclass AnsibleEnvironment(Environment):\n    '''\n    Our custom environment, which simply allows us to override the class-level\n    values for the Template and Context classes used by jinja2 internally.\n    '''\n    context_class = AnsibleContext\n    template_class = AnsibleJ2Template\n\nclass Templar:\n    '''\n    The main class for templating, with the main entry-point of template().\n    '''\n\n    def __init__(self, loader, shared_loader_obj=None, variables=dict()):\n        self._loader              = loader\n        self._filters             = None\n        self._tests               = None\n        self._available_variables = variables\n        self._cached_result       = {}\n\n        if loader:\n            self._basedir = loader.get_basedir()\n        else:\n            self._basedir = './'\n\n        if shared_loader_obj:\n            self._filter_loader = getattr(shared_loader_obj, 'filter_loader')\n            self._test_loader   = getattr(shared_loader_obj, 'test_loader')\n            self._lookup_loader = getattr(shared_loader_obj, 'lookup_loader')\n        else:\n            self._filter_loader = filter_loader\n            self._test_loader   = test_loader\n            self._lookup_loader = lookup_loader\n\n        # flags to determine whether certain failures during templating\n        # should result in fatal errors being raised\n        self._fail_on_lookup_errors    = True\n        self._fail_on_filter_errors    = True\n        self._fail_on_undefined_errors = C.DEFAULT_UNDEFINED_VAR_BEHAVIOR\n\n        self.environment = AnsibleEnvironment(\n            trim_blocks=True,\n            undefined=StrictUndefined,\n            extensions=self._get_extensions(),\n            finalize=self._finalize,\n            loader=FileSystemLoader(self._basedir),\n        )\n\n        self.SINGLE_VAR = re.compile(r\"^%s\\s*(\\w*)\\s*%s$\" % (self.environment.variable_start_string, self.environment.variable_end_string))\n\n        self._clean_regex   = re.compile(r'(?:%s|%s|%s|%s)' % (\n            self.environment.variable_start_string,\n            self.environment.block_start_string,\n            self.environment.block_end_string,\n            self.environment.variable_end_string\n        ))\n        self._no_type_regex = re.compile(r'.*\\|\\s*(?:%s)\\s*(?:%s)?$' % ('|'.join(C.STRING_TYPE_FILTERS), self.environment.variable_end_string))\n\n    def _get_filters(self):\n        '''\n        Returns filter plugins, after loading and caching them if need be\n        '''\n\n        if self._filters is not None:\n            return self._filters.copy()\n\n        plugins = [x for x in self._filter_loader.all()]\n\n        self._filters = dict()\n        for fp in plugins:\n            self._filters.update(fp.filters())\n        self._filters.update(self._get_tests())\n\n        return self._filters.copy()\n\n    def _get_tests(self):\n        '''\n        Returns tests plugins, after loading and caching them if need be\n        '''\n\n        if self._tests is not None:\n            return self._tests.copy()\n\n        plugins = [x for x in self._test_loader.all()]\n\n        self._tests = dict()\n        for fp in plugins:\n            self._tests.update(fp.tests())\n\n        return self._tests.copy()\n\n    def _get_extensions(self):\n        '''\n        Return jinja2 extensions to load.\n\n        If some extensions are set via jinja_extensions in ansible.cfg, we try\n        to load them with the jinja environment.\n        '''\n\n        jinja_exts = []\n        if C.DEFAULT_JINJA2_EXTENSIONS:\n            # make sure the configuration directive doesn't contain spaces\n            # and split extensions in an array\n            jinja_exts = C.DEFAULT_JINJA2_EXTENSIONS.replace(\" \", \"\").split(',')\n\n        return jinja_exts\n\n    def _clean_data(self, orig_data):\n        ''' remove jinja2 template tags from data '''\n\n        if hasattr(orig_data, '__ENCRYPTED__'):\n            ret = orig_data\n\n        elif isinstance(orig_data, list):\n            clean_list = []\n            for list_item in orig_data:\n                clean_list.append(self._clean_data(list_item))\n            ret = clean_list\n\n        elif isinstance(orig_data, dict):\n            clean_dict = {}\n            for k in orig_data:\n                clean_dict[self._clean_data(k)] =  self._clean_data(orig_data[k])\n            ret = clean_dict\n\n        elif isinstance(orig_data, string_types):\n            # This will error with str data (needs unicode), but all strings should already be converted already.\n            # If you get exception, the problem is at the data origin, do not add to_text here.\n            with contextlib.closing(StringIO(orig_data)) as data:\n                # these variables keep track of opening block locations, as we only\n                # want to replace matched pairs of print/block tags\n                print_openings = []\n                block_openings = []\n                for mo in self._clean_regex.finditer(orig_data):\n                    token = mo.group(0)\n                    token_start = mo.start(0)\n\n                    if token[0] == self.environment.variable_start_string[0]:\n                        if token == self.environment.block_start_string:\n                            block_openings.append(token_start)\n                        elif token == self.environment.variable_start_string:\n                            print_openings.append(token_start)\n\n                    elif token[1] == self.environment.variable_end_string[1]:\n                        prev_idx = None\n                        if token == self.environment.block_end_string and block_openings:\n                            prev_idx = block_openings.pop()\n                        elif token == self.environment.variable_end_string and print_openings:\n                            prev_idx = print_openings.pop()\n\n                        if prev_idx is not None:\n                            # replace the opening\n                            data.seek(prev_idx, os.SEEK_SET)\n                            data.write(to_text(self.environment.comment_start_string))\n                            # replace the closing\n                            data.seek(token_start, os.SEEK_SET)\n                            data.write(to_text(self.environment.comment_end_string))\n\n                    else:\n                        raise AnsibleError(\"Error while cleaning data for safety: unhandled regex match\")\n\n                ret = data.getvalue()\n        else:\n            ret = orig_data\n\n        return ret\n\n    def set_available_variables(self, variables):\n        '''\n        Sets the list of template variables this Templar instance will use\n        to template things, so we don't have to pass them around between\n        internal methods. We also clear the template cache here, as the variables\n        are being changed.\n        '''\n\n        assert isinstance(variables, dict)\n        self._available_variables = variables\n        self._cached_result       = {}\n\n    def template(self, variable, convert_bare=False, preserve_trailing_newlines=True, escape_backslashes=True, fail_on_undefined=None, overrides=None,\n                 convert_data=True, static_vars=[''], cache=True, bare_deprecated=True, disable_lookups=False):\n        '''\n        Templates (possibly recursively) any given data as input. If convert_bare is\n        set to True, the given data will be wrapped as a jinja2 variable ('{{foo}}')\n        before being sent through the template engine.\n        '''\n\n        # Don't template unsafe variables, just return them.\n        if hasattr(variable, '__UNSAFE__'):\n            return variable\n\n        if fail_on_undefined is None:\n            fail_on_undefined = self._fail_on_undefined_errors\n\n        try:\n            if convert_bare:\n                variable = self._convert_bare_variable(variable, bare_deprecated=bare_deprecated)\n\n            if isinstance(variable, string_types):\n                result = variable\n\n                if self._contains_vars(variable):\n                    # Check to see if the string we are trying to render is just referencing a single\n                    # var.  In this case we don't want to accidentally change the type of the variable\n                    # to a string by using the jinja template renderer. We just want to pass it.\n                    only_one = self.SINGLE_VAR.match(variable)\n                    if only_one:\n                        var_name = only_one.group(1)\n                        if var_name in self._available_variables:\n                            resolved_val = self._available_variables[var_name]\n                            if isinstance(resolved_val, NON_TEMPLATED_TYPES):\n                                return resolved_val\n                            elif resolved_val is None:\n                                return C.DEFAULT_NULL_REPRESENTATION\n\n                    # Using a cache in order to prevent template calls with already templated variables\n                    sha1_hash = None\n                    if cache:\n                        variable_hash = sha1(text_type(variable).encode('utf-8'))\n                        options_hash = sha1(\n                            (\n                                text_type(preserve_trailing_newlines) +\n                                text_type(escape_backslashes) +\n                                text_type(fail_on_undefined) +\n                                text_type(overrides)\n                            ).encode('utf-8')\n                        )\n                        sha1_hash = variable_hash.hexdigest() + options_hash.hexdigest()\n                    if cache and sha1_hash in self._cached_result:\n                        result = self._cached_result[sha1_hash]\n                    else:\n                        result = self.do_template(\n                            variable,\n                            preserve_trailing_newlines=preserve_trailing_newlines,\n                            escape_backslashes=escape_backslashes,\n                            fail_on_undefined=fail_on_undefined,\n                            overrides=overrides,\n                            disable_lookups=disable_lookups,\n                        )\n\n                        unsafe = hasattr(result, '__UNSAFE__')\n                        if convert_data and not self._no_type_regex.match(variable):\n                            # if this looks like a dictionary or list, convert it to such using the safe_eval method\n                            if (result.startswith(\"{\") and not result.startswith(self.environment.variable_start_string)) or \\\n                                    result.startswith(\"[\") or result in (\"True\", \"False\"):\n                                eval_results = safe_eval(result, locals=self._available_variables, include_exceptions=True)\n                                if eval_results[1] is None:\n                                    result = eval_results[0]\n                                    if unsafe:\n                                        result = wrap_var(result)\n                                else:\n                                    # FIXME: if the safe_eval raised an error, should we do something with it?\n                                    pass\n\n                        # we only cache in the case where we have a single variable\n                        # name, to make sure we're not putting things which may otherwise\n                        # be dynamic in the cache (filters, lookups, etc.)\n                        if cache:\n                            self._cached_result[sha1_hash] = result\n\n                return result\n\n            elif isinstance(variable, (list, tuple)):\n                return [self.template(\n                    v,\n                    preserve_trailing_newlines=preserve_trailing_newlines,\n                    fail_on_undefined=fail_on_undefined,\n                    overrides=overrides,\n                    disable_lookups=disable_lookups,\n                    ) for v in variable]\n            elif isinstance(variable, dict):\n                d = {}\n                # we don't use iteritems() here to avoid problems if the underlying dict\n                # changes sizes due to the templating, which can happen with hostvars\n                for k in variable.keys():\n                    if k not in static_vars:\n                        d[k] = self.template(\n                            variable[k],\n                            preserve_trailing_newlines=preserve_trailing_newlines,\n                            fail_on_undefined=fail_on_undefined,\n                            overrides=overrides,\n                            disable_lookups=disable_lookups,\n                            )\n                    else:\n                        d[k] = variable[k]\n                return d\n            else:\n                return variable\n\n        except AnsibleFilterError:\n            if self._fail_on_filter_errors:\n                raise\n            else:\n                return variable\n\n    def is_template(self, data):\n        ''' lets us know if data has a template'''\n        if isinstance(data, string_types):\n            try:\n                new = self.do_template(data, fail_on_undefined=True)\n            except (AnsibleUndefinedVariable, UndefinedError):\n                return True\n            except:\n                return False\n            return (new != data)\n        elif isinstance(data, (list, tuple)):\n            for v in data:\n                if self.is_template(v):\n                    return True\n        elif isinstance(data, dict):\n            for k in data:\n                if self.is_template(k) or self.is_template(data[k]):\n                    return True\n        return False\n\n    def templatable(self, data):\n        '''\n        returns True if the data can be templated w/o errors\n        '''\n        templatable = True\n        try:\n            self.template(data)\n        except:\n            templatable = False\n        return templatable\n\n    def _contains_vars(self, data):\n        '''\n        returns True if the data contains a variable pattern\n        '''\n        if isinstance(data, string_types):\n            for marker in (self.environment.block_start_string, self.environment.variable_start_string, self.environment.comment_start_string):\n                if marker in data:\n                    return True\n        return False\n\n    def _convert_bare_variable(self, variable, bare_deprecated):\n        '''\n        Wraps a bare string, which may have an attribute portion (ie. foo.bar)\n        in jinja2 variable braces so that it is evaluated properly.\n        '''\n\n        if isinstance(variable, string_types):\n            contains_filters = \"|\" in variable\n            first_part = variable.split(\"|\")[0].split(\".\")[0].split(\"[\")[0]\n            if (contains_filters or first_part in self._available_variables) and self.environment.variable_start_string not in variable:\n                if bare_deprecated:\n                    display.deprecated(\"Using bare variables is deprecated.\"\n                            \" Update your playbooks so that the environment value uses the full variable syntax ('%s%s%s')\" %\n                            (self.environment.variable_start_string, variable, self.environment.variable_end_string), version='2.7')\n                return \"%s%s%s\" % (self.environment.variable_start_string, variable, self.environment.variable_end_string)\n\n        # the variable didn't meet the conditions to be converted,\n        # so just return it as-is\n        return variable\n\n    def _finalize(self, thing):\n        '''\n        A custom finalize method for jinja2, which prevents None from being returned\n        '''\n        return thing if thing is not None else ''\n\n    def _fail_lookup(self, name, *args, **kwargs):\n        raise AnsibleError(\"The lookup `%s` was found, however lookups were disabled from templating\" % name)\n\n    def _lookup(self, name, *args, **kwargs):\n        instance = self._lookup_loader.get(name.lower(), loader=self._loader, templar=self)\n\n        if instance is not None:\n            wantlist = kwargs.pop('wantlist', False)\n\n            from ansible.utils.listify import listify_lookup_plugin_terms\n            loop_terms = listify_lookup_plugin_terms(terms=args, templar=self, loader=self._loader, fail_on_undefined=True, convert_bare=False)\n            # safely catch run failures per #5059\n            try:\n                ran = instance.run(loop_terms, variables=self._available_variables, **kwargs)\n            except (AnsibleUndefinedVariable, UndefinedError) as e:\n                raise AnsibleUndefinedVariable(e)\n            except Exception as e:\n                if self._fail_on_lookup_errors:\n                    raise AnsibleError(\"An unhandled exception occurred while running the lookup plugin '%s'. Error was a %s, \"\n                                       \"original message: %s\" % (name, type(e), e))\n                ran = None\n\n            if ran:\n                if wantlist:\n                    ran = wrap_var(ran)\n                else:\n                    try:\n                        ran = UnsafeProxy(\",\".join(ran))\n                    except TypeError:\n                        if isinstance(ran, list) and len(ran) == 1:\n                            ran = wrap_var(ran[0])\n                        else:\n                            ran = wrap_var(ran)\n\n            return ran\n        else:\n            raise AnsibleError(\"lookup plugin (%s) not found\" % name)\n\n    def do_template(self, data, preserve_trailing_newlines=True, escape_backslashes=True, fail_on_undefined=None, overrides=None, disable_lookups=False):\n        # For preserving the number of input newlines in the output (used\n        # later in this method)\n        data_newlines = _count_newlines_from_end(data)\n\n        if fail_on_undefined is None:\n            fail_on_undefined = self._fail_on_undefined_errors\n\n        try:\n            # allows template header overrides to change jinja2 options.\n            if overrides is None:\n                myenv = self.environment.overlay()\n            else:\n                myenv = self.environment.overlay(overrides)\n\n            # Get jinja env overrides from template\n            if data.startswith(JINJA2_OVERRIDE):\n                eol = data.find('\\n')\n                line = data[len(JINJA2_OVERRIDE):eol]\n                data = data[eol+1:]\n                for pair in line.split(','):\n                    (key,val) = pair.split(':')\n                    key = key.strip()\n                    setattr(myenv, key, ast.literal_eval(val.strip()))\n\n            # Adds Ansible custom filters and tests\n            myenv.filters.update(self._get_filters())\n            myenv.tests.update(self._get_tests())\n\n            if escape_backslashes:\n                # Allow users to specify backslashes in playbooks as \"\\\\\" instead of as \"\\\\\\\\\".\n                data = _escape_backslashes(data, myenv)\n\n            try:\n                t = myenv.from_string(data)\n            except TemplateSyntaxError as e:\n                raise AnsibleError(\"template error while templating string: %s. String: %s\" % (to_native(e), to_native(data)))\n            except Exception as e:\n                if 'recursion' in to_native(e):\n                    raise AnsibleError(\"recursive loop detected in template string: %s\" % to_native(data))\n                else:\n                    return data\n\n            if disable_lookups:\n                t.globals['lookup'] = self._fail_lookup\n            else:\n                t.globals['lookup'] = self._lookup\n\n            t.globals['finalize'] = self._finalize\n\n            jvars = AnsibleJ2Vars(self, t.globals)\n\n            new_context = t.new_context(jvars, shared=True)\n            rf = t.root_render_func(new_context)\n\n            try:\n                res = j2_concat(rf)\n                if new_context.unsafe:\n                    res = wrap_var(res)\n            except TypeError as te:\n                if 'StrictUndefined' in to_native(te):\n                    errmsg  = \"Unable to look up a name or access an attribute in template string (%s).\\n\" % to_native(data)\n                    errmsg += \"Make sure your variable name does not contain invalid characters like '-': %s\" % to_native(te)\n                    raise AnsibleUndefinedVariable(errmsg)\n                else:\n                    display.debug(\"failing because of a type error, template data is: %s\" % to_native(data))\n                    raise AnsibleError(\"Unexpected templating type error occurred on (%s): %s\" % (to_native(data),to_native(te)))\n\n            if preserve_trailing_newlines:\n                # The low level calls above do not preserve the newline\n                # characters at the end of the input data, so we use the\n                # calculate the difference in newlines and append them\n                # to the resulting output for parity\n                #\n                # jinja2 added a keep_trailing_newline option in 2.7 when\n                # creating an Environment.  That would let us make this code\n                # better (remove a single newline if\n                # preserve_trailing_newlines is False).  Once we can depend on\n                # that version being present, modify our code to set that when\n                # initializing self.environment and remove a single trailing\n                # newline here if preserve_newlines is False.\n                res_newlines = _count_newlines_from_end(res)\n                if data_newlines > res_newlines:\n                    res += self.environment.newline_sequence * (data_newlines - res_newlines)\n            return res\n        except (UndefinedError, AnsibleUndefinedVariable) as e:\n            if fail_on_undefined:\n                raise AnsibleUndefinedVariable(e)\n            else:\n                #TODO: return warning about undefined var\n                return data\n\n    # for backwards compatibility in case anyone is using old private method directly\n    _do_template = do_template\n"], "fixing_code": ["Configuration file\n++++++++++++++++++\n\n.. contents:: Topics\n\n.. highlight:: bash\n\nCertain settings in Ansible are adjustable via a configuration file.  The stock configuration should be sufficient\nfor most users, but there may be reasons you would want to change them.\n\nChanges can be made and used in a configuration file which will be processed in the following order::\n\n    * ANSIBLE_CONFIG (an environment variable)\n    * ansible.cfg (in the current directory)\n    * .ansible.cfg (in the home directory)\n    * /etc/ansible/ansible.cfg\n\nPrior to 1.5 the order was::\n\n    * ansible.cfg (in the current directory)\n    * ANSIBLE_CONFIG (an environment variable)\n    * .ansible.cfg (in the home directory)\n    * /etc/ansible/ansible.cfg\n\nAnsible will process the above list and use the first file found. Settings in files are not merged.\n\n.. note:: Comments\n    The configuration file is one variant of an INI format.  Both the hash\n    sign (\"#\") and semicolon (\";\") are allowed as comment markers when the\n    comment starts the line.  However, if the comment is inline with regular\n    values, only the semicolon is allowed to introduce the comment.  For\n    instance::\n\n        # some basic default values...\n        inventory = /etc/ansible/hosts  ; This points to the file that lists your hosts\n\n.. _getting_the_latest_configuration:\n\nGetting the latest configuration\n````````````````````````````````\n\nIf installing ansible from a package manager, the latest ansible.cfg should be present in /etc/ansible, possibly\nas a \".rpmnew\" file (or other) as appropriate in the case of updates.\n\nIf you have installed from pip or from source, however, you may want to create this file in order to override\ndefault settings in Ansible.\n\nYou may wish to consult the `ansible.cfg in source control <https://raw.github.com/ansible/ansible/devel/examples/ansible.cfg>`_ for all of the possible latest values.\n\n.. _environmental_configuration:\n\nEnvironmental configuration\n```````````````````````````\n\nAnsible also allows configuration of settings via environment variables.  If\nthese environment variables are set, they will override any setting loaded\nfrom the configuration file.  These variables are defined in `constants.py <https://github.com/ansible/ansible/blob/devel/lib/ansible/constants.py>`_.\n\n.. _config_values_by_section:\n\nExplanation of values by section\n````````````````````````````````\n\nThe configuration file is broken up into sections.  Most options are in the \"general\" section but some sections of the file\nare specific to certain connection types.\n\n.. _general_defaults:\n\nGeneral defaults\n----------------\n\nIn the [defaults] section of ansible.cfg, the following settings are tunable:\n\n.. _cfg_action_plugins:\n\naction_plugins\n==============\n\nActions are pieces of code in ansible that enable things like module execution, templating, and so forth.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n   action_plugins = ~/.ansible/plugins/action_plugins/:/usr/share/ansible_plugins/action_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details.\n\n\n.. _allow_unsafe_lookups:\n\nallow_unsafe_lookups\n====================\n\n.. versionadded:: 2.2.3, 2.3.1\n\nWhen enabled, this option allows lookup plugins (whether used in variables as `{{lookup('foo')}}` or as a loop as `with_foo`) to return data that is **not** marked \"unsafe\". By default, such data is marked as unsafe to prevent the templating engine from evaluating any jinja2 templating language, as this could represent a security risk.\n\nThis option is provided to allow for backwards-compatibility, however users should first consider adding `allow_unsafe=True` to any lookups which may be expected to contain data which may be run through the templating engine later. For example::\n\n    {{lookup('pipe', '/path/to/some/command', allow_unsafe=True)}}\n\n\n.. _allow_world_readable_tmpfiles:\n\nallow_world_readable_tmpfiles\n=============================\n\n.. versionadded:: 2.1\n\nThis makes the temporary files created on the machine to be world readable and will issue a warning instead of failing the task.\n\nIt is useful when becoming an unprivileged user::\n\n  allow_world_readable_tmpfiles=True\n\n\n\n\n.. _ansible_managed:\n\nansible_managed\n===============\n\nThe ``ansible_managed`` string can be inserted into files written by\nAnsible's config templating system::\n\n   {{ ansible_managed }}\n\nThe default value indicates that Ansible is managing a file::\n\n    ansible_managed = Ansible managed\n\nThis string can be helpful to indicate that a file should not\nbe directly edited because Ansible may overwrite the contents of the file.\n\nThere are several special placeholder values that can be placed in the ``ansible_managed`` string.  These are not in the default ``ansible_managed`` string because they can cause Ansible to behave as though the\nentire template has changed when only the ansible_managed string has\nchanged.  \n\nThese placeholder values, along with the situations which can lead Ansible to\nreport a template as changed when they are used, are listed below:\n\n* Standard directives that can be used with :func:~time.strftime:.\n  The time referred to is the modification time of the template file.  Many\n  revision control systems timestamp files according to when they are checked\n  out, not the last time the file was modified.  That means Ansible will think\n  the file has been modified anytime there is a fresh checkout.\n\n.. If intersphinx isn't turned on, manually make strftime link to\n   https://docs.python.org/2/library/time.html#time.strftime\n\n* ``{file}``: expands to the name of the full path to the template file.  If\n  Ansible is run with multiple checkouts of the same configuration repository\n  (for instance, in each sysadmin's home directory), then the path will differ\n  in each checkout causing Ansible to behave as though the file has been modified.  \n* ``{host}``: expands to the hostname of the machine :program:`ansible` is run\n  on.  If :program:`ansible` is invoked on multiple machines (for instance,\n  each sysadmin can checkout the configuration repository on their workstation\n  and run :program:`ansible` there), then the host will vary on each of these\n  machines.  This will cause Ansible to behave as though the file has been modified.\n* ``{uid}``: expands to the owner of the template file.  If Ansible is run\n  on checkouts of the configuration repository made by separate users (for\n  instance, if multiple system administrators are making checkouts of the\n  repository with their own accounts) then this will cause Ansible to behave as if\n  the file has been modified.\n\n.. _ask_pass:\n\nask_pass\n========\n\nThis controls whether an Ansible playbook should prompt for a password by default.  The default behavior is no::\n\n    ask_pass = True\n\nIf using SSH keys for authentication, it's probably not needed to change this setting.\n\n.. _ask_sudo_pass:\n\nask_sudo_pass\n=============\n\nSimilar to ask_pass, this controls whether an Ansible playbook should prompt for a sudo password by default when\nsudoing.  The default behavior is also no::\n\n    ask_sudo_pass = True\n\nUsers on platforms where sudo passwords are enabled should consider changing this setting.\n\n.. _ask_vault_pass:\n\nask_vault_pass\n==============\n\nThis controls whether an Ansible playbook should prompt for the vault password by default.  The default behavior is no::\n\n    ask_vault_pass = True\n\n.. _bin_ansible_callbacks:\n\nbin_ansible_callbacks\n=====================\n\n.. versionadded:: 1.8\n\nControls whether callback plugins are loaded when running /usr/bin/ansible.  This may be used to log activity from\nthe command line, send notifications, and so on.  Callback plugins are always loaded for /usr/bin/ansible-playbook\nif present and cannot be disabled::\n\n    bin_ansible_callbacks = False\n\nPrior to 1.8, callbacks were never loaded for /usr/bin/ansible.\n\n.. _callback_plugins:\n\ncallback_plugins\n================\n\nCallbacks are pieces of code in ansible that get called on specific events, permitting to trigger notifications.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n   callback_plugins = ~/.ansible/plugins/callback:/usr/share/ansible/plugins/callback\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _callback_whitelist:\n\ncallback_whitelist\n==================\n\n.. versionadded:: 2.0\n\nNow ansible ships with all included callback plugins ready to use but they are disabled by default.\nThis setting lets you enable a list of additional callbacks. This cannot change or override the\ndefault stdout callback, use :ref:`stdout_callback` for that::\n\n    callback_whitelist = timer,mail\n\n.. _command_warnings:\n\ncommand_warnings\n================\n\n.. versionadded:: 1.8\n\nBy default since Ansible 1.8, Ansible will issue a warning when the shell or \ncommand module is used and the command appears to be similar to an existing \nAnsible module. For example, this can include reminders to use the 'git' module\ninstead of shell commands to execute 'git'.  Using modules when possible over \narbitrary shell commands can lead to more reliable and consistent playbook runs, \nand also easier to maintain playbooks::\n\n    command_warnings = False\n\nThese warnings can be silenced by adjusting the following\nsetting or adding warn=yes or warn=no to the end of the command line\nparameter string, like so::\n\n\n    - name: usage of git that could be replaced with the git module\n      shell: git update foo warn=yes\n\n.. _connection_plugins:\n\nconnection_plugins\n==================\n\nConnections plugin permit to extend the channel used by ansible to transport commands and files.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    connection_plugins = ~/.ansible/plugins/connection_plugins/:/usr/share/ansible_plugins/connection_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _deprecation_warnings:\n\ndeprecation_warnings\n====================\n\n.. versionadded:: 1.3\n\nAllows disabling of deprecating warnings in ansible-playbook output::\n\n    deprecation_warnings = True\n\nDeprecation warnings indicate usage of legacy features that are slated for removal in a future release of Ansible.\n\n.. _display_args_to_stdout:\n\ndisplay_args_to_stdout\n======================\n\n.. versionadded:: 2.1.0\n\nBy default, ansible-playbook will print a header for each task that is run to\nstdout.  These headers will contain the ``name:`` field from the task if you\nspecified one.  If you didn't then ansible-playbook uses the task's action to\nhelp you tell which task is presently running.  Sometimes you run many of the\nsame action and so you want more information about the task to differentiate\nit from others of the same action.  If you set this variable to ``True`` in\nthe config then ansible-playbook will also include the task's arguments in the\nheader.\n\nThis setting defaults to ``False`` because there is a chance that you have\nsensitive values in your parameters and do not want those to be printed to\nstdout::\n\n    display_args_to_stdout = False\n\nIf you set this to ``True`` you should be sure that you have secured your\nenvironment's stdout (no one can shoulder surf your screen and you aren't\nsaving stdout to an insecure file) or made sure that all of your playbooks\nexplicitly added the ``no_log: True`` parameter to tasks which have sensistive\nvalues   See :ref:`keep_secret_data` for more information.\n\n.. _display_skipped_hosts:\n\ndisplay_skipped_hosts\n=====================\n\nIf set to `False`, ansible will not display any status for a task that is skipped. The default behavior is to display skipped tasks::\n\n    display_skipped_hosts = True\n\nNote that Ansible will always show the task header for any task, regardless of whether or not the task is skipped.\n\n.. _error_on_undefined_vars:\n\nerror_on_undefined_vars\n=======================\n\nOn by default since Ansible 1.3, this causes ansible to fail steps that reference variable names that are likely\ntypoed::\n\n    error_on_undefined_vars = True\n\nIf set to False, any '{{ template_expression }}' that contains undefined variables will be rendered in a template\nor ansible action line exactly as written.\n\n.. _executable:\n\nexecutable\n==========\n\nThis indicates the command to use to spawn a shell under a sudo environment.  Users may need to change this to /bin/bash in rare instances when sudo is constrained, but in most cases it may be left as is::\n\n    executable = /bin/bash\n\nStarting in version 2.1 this can be overridden by the inventory var ``ansible_shell_executable``.\n\n.. _filter_plugins:\n\nfilter_plugins\n==============\n\nFilters are specific functions that can be used to extend the template system.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    filter_plugins = ~/.ansible/plugins/filter_plugins/:/usr/share/ansible_plugins/filter_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _force_color:\n\nforce_color\n===========\n\nThis options forces color mode even when running without a TTY::\n\n    force_color = 1\n\n.. _force_handlers:\n\nforce_handlers\n==============\n\n.. versionadded:: 1.9.1\n\nThis option causes notified handlers to run on a host even if a failure occurs on that host::\n\n    force_handlers = True\n\nThe default is False, meaning that handlers will not run if a failure has occurred on a host.\nThis can also be set per play or on the command line. See :ref:`handlers_and_failure` for more details.\n\n.. _forks:\n\nforks\n=====\n\nThis is the default number of parallel processes to spawn when communicating with remote hosts.  Since Ansible 1.3,\nthe fork number is automatically limited to the number of possible hosts at runtime, so this is really a limit of how much\nnetwork and CPU load you think you can handle.  Many users may set this to 50, some set it to 500 or more.  If you\nhave a large number of hosts, higher values will make actions across all of those hosts complete faster.  The default\nis very very conservative::\n\n    forks = 5\n\n.. _fact_path:\n\nfact_path\n=========\n\nThis option allows you to globally configure a custom path for :ref:`_local_facts`:: for the implied `setup` task when using implied fact gathering.\n\n  fact_path = /home/centos/ansible_facts.d\n\nThe default is to use the default from the `setup module  <https://docs.ansible.com/ansible/setup_module.html>`_: ``/etc/ansible/facts.d``\nThis ONLY affects fact gathering triggered by a play when `gather_facts: True`.\n\n.. _gathering:\n\ngathering\n=========\n\nNew in 1.6, the 'gathering' setting controls the default policy of facts gathering (variables discovered about remote systems).\n\nThe value 'implicit' is the default, which means that the fact cache will be ignored and facts will be gathered per play unless 'gather_facts: False' is set.\nThe value 'explicit' is the inverse, facts will not be gathered unless directly requested in the play.\nThe value 'smart' means each new host that has no facts discovered will be scanned, but if the same host is addressed in multiple plays it will not be contacted again in the playbook run.\nThis option can be useful for those wishing to save fact gathering time. Both 'smart' and 'explicit' will use the fact cache::\n\n    gathering = smart\n\n.. versionadded:: 2.1\n\nYou can specify a subset of gathered facts, via the play's gather_facts directive, using the following option::\n\n    gather_subset = all\n\n:all: gather all subsets (the default)\n:network: gather network facts\n:hardware: gather hardware facts (longest facts to retrieve)\n:virtual: gather facts about virtual machines hosted on the machine\n:ohai: gather facts from ohai\n:facter: gather facts from facter\n\nYou can combine them using a comma separated list (ex: network,virtual,facter)\n\nYou can also disable specific subsets by prepending with a `!` like this::\n\n    # Don't gather hardware facts, facts from chef's ohai or puppet's facter\n    gather_subset = !hardware,!ohai,!facter\n\nA set of basic facts are always collected no matter which additional subsets\nare selected.  If you want to collect the minimal amount of facts, use\n`!all`::\n\n    gather_subset = !all\n\nhash_behaviour\n==============\n\nAnsible by default will override variables in specific precedence orders, as described in :doc:`playbooks_variables`.  When a variable\nof higher precedence wins, it will replace the other value.\n\nSome users prefer that variables that are hashes (aka 'dictionaries' in Python terms) are merged.  This setting is called 'merge'. This is not the default behavior and it does not affect variables whose values are scalars (integers, strings) or\narrays.  We generally recommend not using this setting unless you think you have an absolute need for it, and playbooks in the\nofficial examples repos do not use this setting::\n\n    hash_behaviour = replace\n\nThe valid values are either 'replace' (the default) or 'merge'.\n\n.. versionadded:: 2.0\n\nIf you want to merge hashes without changing the global settings, use\nthe `combine` filter described in :doc:`playbooks_filters`.\n\n.. _hostfile:\n\nhostfile\n========\n\nThis is a deprecated setting since 1.9, please look at :ref:`inventory_file` for the new setting.\n\n.. _host_key_checking:\n\nhost_key_checking\n=================\n\nAs described in :doc:`intro_getting_started`, host key checking is on by default in Ansible 1.3 and later.  If you understand the\nimplications and wish to disable it, you may do so here by setting the value to False::\n\n    host_key_checking = True\n\n.. _internal_poll_interval:\n\ninternal_poll_interval\n======================\n\n.. versionadded:: 2.2\n\nThis sets the interval (in seconds) of Ansible internal processes polling each other.\nLower values improve performance with large playbooks at the expense of extra CPU load.\nHigher values are more suitable for Ansible usage in automation scenarios, when UI responsiveness is not required but CPU usage might be a concern.\nDefault corresponds to the value hardcoded in Ansible \u2264 2.1::\n\n    internal_poll_interval=0.001\n\n.. _inventory_file:\n\ninventory\n=========\n\nThis is the default location of the inventory file, script, or directory that Ansible will use to determine what hosts it has available\nto talk to::\n\n    inventory = /etc/ansible/hosts\n\nIt used to be called hostfile in Ansible before 1.9\n\n.. _inventory_ignore_extensions:\n\ninventory_ignore_extensions\n===========================\n\nComma-separated list of file extension patterns to ignore when Ansible inventory\nis a directory with multiple sources (static and dynamic)::\n\n    inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo\n\nThis option can be overridden by setting ``ANSIBLE_INVENTORY_IGNORE``\nenvironment variable.\n\n.. _jinja2_extensions:\n\njinja2_extensions\n=================\n\nThis is a developer-specific feature that allows enabling additional Jinja2 extensions::\n\n    jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n\n\nIf you do not know what these do, you probably don't need to change this setting :)\n\n.. _library:\n\nlibrary\n=======\n\nThis is the default location Ansible looks to find modules::\n\n     library = /usr/share/ansible\n\nAnsible can look in multiple locations if you feed it a colon\nseparated path, and it also will look for modules in the :file:`./library`\ndirectory alongside a playbook.\n\nThis can be used to manage modules pulled from several different locations.\nFor instance, a site wishing to checkout modules from several different git\nrepositories might handle it like this:\n\n.. code-block:: shell-session\n\n    $ mkdir -p /srv/modules\n    $ cd /srv/modules\n    $ git checkout https://vendor_modules .\n    $ git checkout ssh://custom_modules .\n    $ export ANSIBLE_LIBRARY=/srv/modules/custom_modules:/srv/modules/vendor_modules\n    $ ansible [...]\n\nIn case of modules with the same name, the library paths are searched in order\nand the first module found with that name is used.\n\n.. _local_tmp:\n\nlocal_tmp\n=========\n\n.. versionadded:: 2.1\n\nWhen Ansible gets ready to send a module to a remote machine it usually has to\nadd a few things to the module: Some boilerplate code, the module's\nparameters, and a few constants from the config file.  This combination of\nthings gets stored in a temporary file until ansible exits and cleans up after\nitself.  The default location is a subdirectory of the user's home directory.\nIf you'd like to change that, you can do so by altering this setting::\n\n    local_tmp = ~/.ansible/tmp\n\nAnsible will then choose a random directory name inside this location.\n\n.. _log_path:\n\nlog_path\n========\n\nIf present and configured in ansible.cfg, Ansible will log information about executions at the designated location.  Be sure\nthe user running Ansible has permissions on the logfile::\n\n    log_path=/var/log/ansible.log\n\nThis behavior is not on by default.  Note that ansible will, without this setting, record module arguments called to the\nsyslog of managed machines.  Password arguments are excluded.\n\nFor Enterprise users seeking more detailed logging history, you may be interested in :doc:`tower`.\n\n.. _lookup_plugins:\n\nlookup_plugins\n==============\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    lookup_plugins = ~/.ansible/plugins/lookup_plugins/:/usr/share/ansible_plugins/lookup_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _merge_multiple_cli_tags:\n\nmerge_multiple_cli_tags\n=======================\n\n.. versionadded:: 2.3\n\nThis allows changing how multiple :option:`--tags` and :option:`--skip-tags`\narguments are handled on the command line.  Specifying :option:`--tags` more\nthan once merges all of the :option:`--tags` options together.  If you want\nthe pre-2.4.x behaviour where only the last value of :option:`--tags` is used,\nthen set this to False.  The same holds true for :option:`--skip-tags`.\n\n.. note:: The default value for this in 2.3 is False.  In 2.4, the\n    default value is True.  After 2.8, the option will be removed.\n    Multiple :option:`--tags` and multiple :option:`--skip-tags` will always\n    be merged together.\n\n.. _module_lang:\n\nmodule_lang\n===========\n\nThis is to set the default language to communicate between the module and the system.\nBy default, the value is value `LANG` on the controller or, if unset, `en_US.UTF-8` (it used to be `C` in previous versions)::\n\n    module_lang = en_US.UTF-8\n\n.. note::\n\n    This is only used if :ref:`module_set_locale` is set to True.\n\n.. _module_name:\n\nmodule_name\n===========\n\nThis is the default module name (-m) value for /usr/bin/ansible.  The default is the 'command' module.\nRemember the command module doesn't support shell variables, pipes, or quotes, so you might wish to change\nit to 'shell'::\n\n    module_name = command\n\n.. _module_set_locale:\n\nmodule_set_locale\n=================\n\nThis boolean value controls whether or not Ansible will prepend locale-specific environment variables (as specified\nvia the :ref:`module_lang` configuration option). If enabled, it results in the LANG, LC_MESSAGES, and LC_ALL\nbeing set when the module is executed on the given remote system.  By default this is disabled.\n\n.. note::\n\n    The module_set_locale option was added in Ansible-2.1 and defaulted to\n    True.  The default was changed to False in Ansible-2.2\n\n.. _module_utils:\n\nmodule_utils\n============\n\nThis is the default location Ansible looks to find module_utils::\n\n    module_utils = /usr/share/ansible/my_module_utils\n\nmodule_utils are python modules that Ansible is able to combine with Ansible\nmodules when sending them to the remote machine.  Having custom module_utils\nis useful for extracting common code when developing a set of site-specific\nmodules.\n\nAnsible can look in multiple locations if you feed it a colon\nseparated path, and it also will look for modules in the\n:file:`./module_utils` directory alongside a playbook.\n\n.. _nocolor:\n\nnocolor\n=======\n\nBy default ansible will try to colorize output to give a better indication of failure and status information.\nIf you dislike this behavior you can turn it off by setting 'nocolor' to 1::\n\n    nocolor = 0\n\n.. _nocows:\n\nnocows\n======\n\nBy default ansible will take advantage of cowsay if installed to make /usr/bin/ansible-playbook runs more exciting.\nWhy?  We believe systems management should be a happy experience.  If you do not like the cows, you can disable them\nby setting 'nocows' to 1::\n\n    nocows = 0\n\n.. _pattern:\n\npattern\n=======\n\nThis is the default group of hosts to talk to in a playbook if no \"hosts:\" stanza is supplied.  The default is to talk\nto all hosts.  You may wish to change this to protect yourself from surprises::\n\n    hosts = *\n\nNote that /usr/bin/ansible always requires a host pattern and does not use this setting, only /usr/bin/ansible-playbook.\n\n.. _poll_interval:\n\npoll_interval\n=============\n\nFor asynchronous tasks in Ansible (covered in :doc:`playbooks_async`), this is how often to check back on the status of those\ntasks when an explicit poll interval is not supplied.  The default is a reasonably moderate 15 seconds which is a tradeoff\nbetween checking in frequently and providing a quick turnaround when something may have completed::\n\n    poll_interval = 15\n\n.. _private_key_file:\n\nprivate_key_file\n================\n\nIf you are using a pem file to authenticate with machines rather than SSH agent or passwords, you can set the default\nvalue here to avoid re-specifying ``--private-key`` with every invocation::\n\n    private_key_file=/path/to/file.pem\n\n.. _remote_port:\n\nremote_port\n===========\n\nThis sets the default SSH port on all of your systems, for systems that didn't specify an alternative value in inventory.\nThe default is the standard 22::\n\n    remote_port = 22\n\n.. _remote_tmp:\n\nremote_tmp\n==========\n\nAnsible works by transferring modules to your remote machines, running them, and then cleaning up after itself.  In some\ncases, you may not wish to use the default location and would like to change the path.  You can do so by altering this\nsetting::\n\n    remote_tmp = ~/.ansible/tmp\n\nThe default is to use a subdirectory of the user's home directory.  Ansible will then choose a random directory name\ninside this location.\n\n.. _remote_user:\n\nremote_user\n===========\n\nThis is the default username ansible will connect as for /usr/bin/ansible-playbook.  Note that /usr/bin/ansible will\nalways default to the current user if this is not defined::\n\n    remote_user = root\n\n\n.. _restrict_facts_namespace:\n\nrestrict_facts_namespace\n========================\n\n.. versionadded:: 2.4\n\nThis allows restricting facts in their own namespace (under ansible_facts) instead of pushing them into the main.\nFalse by default. Can also be set via the environment variable `ANSIBLE_RESTRICT_FACTS`. Using `ansible_system` as an example:\n\nWhen False::\n\n    - debug: var=ansible_system\n\n\nWhen True::\n\n    - debug: var=ansible_facts.ansible_system\n\n\n.. _retry_files_enabled:\n\nretry_files_enabled\n===================\n\nThis controls whether a failed Ansible playbook should create a .retry file. The default setting is True::\n\n    retry_files_enabled = False\n\n.. _retry_files_save_path:\n\nretry_files_save_path\n=====================\n\nThe retry files save path is where Ansible will save .retry files when a playbook fails and retry_files_enabled is True (the default).\nThe default location is adjacent to the play (~/ in versions older than 2.0) and can be changed to any writeable path::\n\n    retry_files_save_path = ~/.ansible/retry-files\n\nThe directory will be created if it does not already exist.\n\n.. _cfg_roles_path:\n\nroles_path\n==========\n\n.. versionadded:: 1.4\n\nThe roles path indicate additional directories beyond the 'roles/' subdirectory of a playbook project to search to find Ansible\nroles.  For instance, if there was a source control repository of common roles and a different repository of playbooks, you might\nchoose to establish a convention to checkout roles in /opt/mysite/roles like so::\n\n    roles_path = /opt/mysite/roles\n\nAdditional paths can be provided separated by colon characters, in the same way as other pathstrings::\n\n    roles_path = /opt/mysite/roles:/opt/othersite/roles\n\nRoles will be first searched for in the playbook directory.  Should a role not be found, it will indicate all the possible paths\nthat were searched.\n\n.. _cfg_squash_actions:\n\nsquash_actions\n==============\n\n.. versionadded:: 2.0\n\nAnsible can optimise actions that call modules that support list parameters when using with\\_ looping.\nInstead of calling the module once for each item, the module is called once with the full list.\n\nThe default value for this setting is only for certain package managers, but it can be used for any module::\n\n    squash_actions = apk,apt,dnf,homebrew,package,pacman,pkgng,yum,zypper\n\nCurrently, this is only supported for modules that have a name parameter, and only when the item is the\nonly thing being passed to the parameter.\n\n.. _stdout_callback:\n\nstdout_callback\n===============\n\n.. versionadded:: 2.0\n\nThis setting allows you to override the default stdout callback for ansible-playbook::\n\n    stdout_callback = skippy\n\n.. _cfg_strategy_plugins:\n\nstrategy_plugins\n==================\n\nStrategy plugin allow users to change the way in which Ansible runs tasks on targeted hosts.\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    strategy_plugins = ~/.ansible/plugins/strategy_plugins/:/usr/share/ansible_plugins/strategy_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n.. _cfg_strategy:\n\nstrategy\n========\n\nStrategy allow to change the default strategy used by Ansible::\n\n    strategy = free\n\n.. _sudo_exe:\n\nsudo_exe\n========\n\nIf using an alternative sudo implementation on remote machines, the path to sudo can be replaced here provided\nthe sudo implementation is matching CLI flags with the standard sudo::\n\n   sudo_exe = sudo\n\n.. _sudo_flags:\n\nsudo_flags\n==========\n\nAdditional flags to pass to sudo when engaging sudo support. The default is '-H -S -n' which sets the HOME environment\nvariable, prompts for passwords via STDIN, and avoids prompting the user for input of any kind. Note that '-n' will conflict\nwith using password-less sudo auth, such as pam_ssh_agent_auth. In some situations you may wish to add or remove flags, but\nin general most users will not need to change this setting:::\n\n   sudo_flags=-H -S -n\n\n.. _sudo_user:\n\nsudo_user\n=========\n\nThis is the default user to sudo to if ``--sudo-user`` is not specified or 'sudo_user' is not specified in an Ansible\nplaybook.  The default is the most logical: 'root'::\n\n   sudo_user = root\n\n.. _system_warnings:\n\nsystem_warnings\n===============\n\n.. versionadded:: 1.6\n\nAllows disabling of warnings related to potential issues on the system running ansible itself (not on the managed hosts)::\n\n   system_warnings = True\n\nThese may include warnings about 3rd party packages or other conditions that should be resolved if possible.\n\n.. _timeout:\n\ntimeout\n=======\n\nThis is the default SSH timeout to use on connection attempts::\n\n    timeout = 10\n\n.. _transport:\n\ntransport\n=========\n\nThis is the default transport to use if \"-c <transport_name>\" is not specified to /usr/bin/ansible or /usr/bin/ansible-playbook.\nThe default is 'smart', which will use 'ssh' (OpenSSH based) if the local operating system is new enough to support ControlPersist\ntechnology, and then will otherwise use 'paramiko'.  Other transport options include 'local', 'chroot', 'jail', and so on.\n\nUsers should usually leave this setting as 'smart' and let their playbooks choose an alternate setting when needed with the\n'connection:' play parameter::\n\n    transport = paramiko\n\n.. _vars_plugins:\n\nvars_plugins\n============\n\nThis is a developer-centric feature that allows low-level extensions around Ansible to be loaded from\ndifferent locations::\n\n    vars_plugins = ~/.ansible/plugins/vars_plugins/:/usr/share/ansible_plugins/vars_plugins\n\nMost users will not need to use this feature.  See :doc:`dev_guide/developing_plugins` for more details\n\n\n.. _vault_password_file:\n\nvault_password_file\n===================\n\n.. versionadded:: 1.7\n\nConfigures the path to the Vault password file as an alternative to specifying ``--vault-password-file`` on the command line::\n\n   vault_password_file = /path/to/vault_password_file\n\nAs of 1.7 this file can also be a script. If you are using a script instead of a flat file, ensure that it is marked as executable, and that the password is printed to standard output. If your script needs to prompt for data, prompts can be sent to standard error.\n\n.. _privilege_escalation:\n\nPrivilege Escalation Settings\n-----------------------------\n\nAnsible can use existing privilege escalation systems to allow a user to execute tasks as another. As of 1.9 \u2018become\u2019 supersedes the old sudo/su, while still being backwards compatible.  Settings live under the [privilege_escalation] header.\n\n.. _become:\n\nbecome\n======\n\nThe equivalent of adding sudo: or su: to a play or task, set to true/yes to activate privilege escalation. The default behavior is no::\n\n    become = True\n\n.. _become_method:\n\nbecome_method\n=============\n\nSet the privilege escalation method. The default is ``sudo``, other options are ``su``, ``pbrun``, ``pfexec``, ``doas``, ``ksu``::\n\n    become_method = su\n\n.. _become_user:\n\nbecome_user\n=============\n\nThe equivalent to ansible_sudo_user or ansible_su_user, allows to set the user you become through privilege escalation. The default is 'root'::\n\n    become_user = root\n\n.. _become_ask_pass:\n\nbecome_ask_pass\n===============\n\nAsk for privilege escalation password, the default is False::\n\n    become_ask_pass = True\n\n.. _become_allow_same_user:\n\nbecome_allow_same_user\n======================\n\nMost of the time, using *sudo* to run a command as the same user who is running\n*sudo* itself is unnecessary overhead, so Ansible does not allow it. However,\ndepending on the *sudo* configuration, it may be necessary to run a command as\nthe same user through *sudo*, such as to switch SELinux contexts. For this\nreason, you can set ``become_allow_same_user`` to ``True`` and disable this\noptimization.\n\n.. _paramiko_settings:\n\nParamiko Specific Settings\n--------------------------\n\nParamiko is the default SSH connection implementation on Enterprise Linux 6 or earlier, and is not used by default on other\nplatforms.  Settings live under the [paramiko_connection] header.\n\n.. _record_host_keys:\n\nrecord_host_keys\n================\n\nThe default setting of yes will record newly discovered and approved (if host key checking is enabled) hosts in the user's hostfile.\nThis setting may be inefficient for large numbers of hosts, and in those situations, using the ssh transport is definitely recommended\ninstead.  Setting it to False will improve performance and is recommended when host key checking is disabled::\n\n    record_host_keys = True\n\n.. _paramiko_proxy_command:\n\nproxy_command\n=============\n\n.. versionadded:: 2.1\n\nUse an OpenSSH like ProxyCommand for proxying all Paramiko SSH connections through a bastion or jump host. Requires a minimum of Paramiko version 1.9.0. On Enterprise Linux 6 this is provided by ``python-paramiko1.10`` in the EPEL repository::\n\n    proxy_command = ssh -W \"%h:%p\" bastion\n\n.. _openssh_settings:\n\nOpenSSH Specific Settings\n-------------------------\n\nUnder the [ssh_connection] header, the following settings are tunable for SSH connections.  OpenSSH is the default connection type for Ansible\non OSes that are new enough to support ControlPersist.  (This means basically all operating systems except Enterprise Linux 6 or earlier).\n\n.. _ssh_args:\n\nssh_args\n========\n\nIf set, this will pass a specific set of options to Ansible rather than Ansible's usual defaults::\n\n    ssh_args = -o ControlMaster=auto -o ControlPersist=60s\n\nIn particular, users may wish to raise the ControlPersist time to encourage performance.  A value of 30 minutes may\nbe appropriate. If ``-o ControlPath`` is set in ``ssh_args``, the ``control_path`` setting is not used.\n\n.. _control_path:\n\ncontrol_path\n============\n\nThis is the location to save ControlPath sockets. This defaults to::\n\n    control_path=%(directory)s/ansible-ssh-%%h-%%p-%%r\n\nOn some systems with very long hostnames or very long path names (caused by long user names or\ndeeply nested home directories) this can exceed the character limit on\nfile socket names (108 characters for most platforms). In that case, you\nmay wish to shorten the string to something like the below::\n\n    control_path = %(directory)s/%%h-%%r\n\nAnsible 1.4 and later will instruct users to run with \"-vvvv\" in situations where it hits this problem\nand if so it is easy to tell there is too long of a Control Path filename.  This may be frequently\nencountered on EC2. This setting is ignored if ``-o ControlPath`` is set in ``ssh_args``.\n\n.. _control_path_dir:\n\ncontrol_path_dir\n================\n\n.. versionadded:: 2.3\n\nThis is the base directory of the ControlPath sockets.\nIt is the ``%(directory)s`` part of the ``control_path`` option.\nThis defaults to::\n\n    control_path_dir=~/.ansible/cp\n\n.. _retries:\n\nretries\n=======\n\nAdds the option to retry failed ssh executions if the failure is encountered in ssh itself, not the remote command. This can be helpful if there are transient network issues. Enabled by setting retries to an integer greater than 1. Defaults to::\n\n    retries = 0\n\n.. _scp_if_ssh:\n\nscp_if_ssh\n==========\n\nOccasionally users may be managing a remote system that doesn't have SFTP enabled.  If set to True, we can\ncause scp to be used to transfer remote files instead::\n\n    scp_if_ssh = False\n\nThere's really no reason to change this unless problems are encountered, and then there's also no real drawback\nto managing the switch.  Most environments support SFTP by default and this doesn't usually need to be changed.\n\n\n.. _pipelining:\n\npipelining\n==========\n\nEnabling pipelining reduces the number of SSH operations required to\nexecute a module on the remote server, by executing many ansible modules without actual file transfer.\nThis can result in a very significant performance improvement when enabled, however when using \"sudo:\" operations you must\nfirst disable 'requiretty' in /etc/sudoers on all managed hosts.\n\nBy default, this option is disabled to preserve compatibility with\nsudoers configurations that have requiretty (the default on many distros), but is highly\nrecommended if you can enable it, eliminating the need for :doc:`playbooks_acceleration`::\n\n    pipelining = False\n\n.. _ssh_executable:\n\nssh_executable\n==============\n\n.. versionadded:: 2.2\n\nThis is the location of the ssh binary. It defaults to ``ssh`` which will use the first ssh binary available in ``$PATH``. This config can also be overridden with ``ansible_ssh_executable`` inventory variable::\n\n  ssh_executable=\"/usr/local/bin/ssh\"\n\nThis option is usually not required, it might be useful when access to system ssh is restricted, or when using ssh wrappers to connect to remote hosts. \n\n.. _accelerate_settings:\n\nAccelerated Mode Settings\n-------------------------\n\nUnder the [accelerate] header, the following settings are tunable for :doc:`playbooks_acceleration`.  Acceleration is\na useful performance feature to use if you cannot enable :ref:`pipelining` in your environment, but is probably\nnot needed if you can.\n\n.. _accelerate_port:\n\naccelerate_port\n===============\n\n.. versionadded:: 1.3\n\nThis is the port to use for accelerated mode::\n\n    accelerate_port = 5099\n\n.. _accelerate_timeout:\n\naccelerate_timeout\n==================\n\n.. versionadded:: 1.4\n\nThis setting controls the timeout for receiving data from a client. If no data is received during this time, the socket connection will be closed. A keepalive packet is sent back to the controller every 15 seconds, so this timeout should not be set lower than 15 (by default, the timeout is 30 seconds)::\n\n    accelerate_timeout = 30\n\n.. _accelerate_connect_timeout:\n\naccelerate_connect_timeout\n==========================\n\n.. versionadded:: 1.4\n\nThis setting controls the timeout for the socket connect call, and should be kept relatively low. The connection to the `accelerate_port` will be attempted 3 times before Ansible will fall back to ssh or paramiko (depending on your default connection setting) to try and start the accelerate daemon remotely. The default setting is 1.0 seconds::\n\n    accelerate_connect_timeout = 1.0\n\nNote, this value can be set to less than one second, however it is probably not a good idea to do so unless you're on a very fast and reliable LAN. If you're connecting to systems over the internet, it may be necessary to increase this timeout.\n\n.. _accelerate_daemon_timeout:\n\naccelerate_daemon_timeout\n=========================\n\n.. versionadded:: 1.6\n\nThis setting controls the timeout for the accelerated daemon, as measured in minutes. The default daemon timeout is 30 minutes::\n\n    accelerate_daemon_timeout = 30\n\nNote, prior to 1.6, the timeout was hard-coded from the time of the daemon's launch. For version 1.6+, the timeout is now based on the last activity to the daemon and is configurable via this option.\n\n.. _accelerate_multi_key:\n\naccelerate_multi_key\n====================\n\n.. versionadded:: 1.6\n\nIf enabled, this setting allows multiple private keys to be uploaded to the daemon. Any clients connecting to the daemon must also enable this option::\n\n    accelerate_multi_key = yes\n\nNew clients first connect to the target node over SSH to upload the key, which is done via a local socket file, so they must have the same access as the user that launched the daemon originally.\n\n.. _selinux_settings:\n\nSelinux Specific Settings\n-------------------------\n\nThese are settings that control SELinux interactions.\n\n\nspecial_context_filesystems\n===========================\n\n.. versionadded:: 1.9\n\nThis is a list of file systems that require special treatment when dealing with security context.\nThe normal behaviour is for operations to copy the existing context or use the user default, this changes it to use a file system dependent context.\nThe default list is: nfs,vboxsf,fuse,ramfs::\n\n    special_context_filesystems = nfs,vboxsf,fuse,ramfs,myspecialfs\n\nlibvirt_lxc_noseclabel\n======================\n\n.. versionadded:: 2.1\n\nThis setting causes libvirt to connect to lxc containers by passing --noseclabel to virsh.\nThis is necessary when running on systems which do not have SELinux.\nThe default behavior is no::\n\n    libvirt_lxc_noseclabel = True\n\n.. _show_custom_stats:\n\nshow_custom_stats\n=================\n\n.. versionadded:: 2.3\n\nIf enabled, this setting will display custom stats (set via set_stats plugin) when using the default callback.\n\n\nGalaxy Settings\n---------------\n\nThe following options can be set in the [galaxy] section of ansible.cfg:\n\nserver\n======\n\nOverride the default Galaxy server value of https://galaxy.ansible.com. Useful if you have a hosted version of the Galaxy web app or want to point to the testing site https://galaxy-qa.ansible.com. It does not work against private, hosted repos, which Galaxy can use for fetching and installing roles.\n\nignore_certs\n============\n\nIf set to *yes*, ansible-galaxy will not validate TLS certificates. This can be useful for testing against a server with a self-signed certificate.\n\n", "# config file for ansible -- https://ansible.com/\n# ===============================================\n\n# nearly all parameters can be overridden in ansible-playbook\n# or with command line flags. ansible will read ANSIBLE_CONFIG,\n# ansible.cfg in the current working directory, .ansible.cfg in\n# the home directory or /etc/ansible/ansible.cfg, whichever it\n# finds first\n\n[defaults]\n\n# some basic default values...\n\n#inventory      = /etc/ansible/hosts\n#library        = /usr/share/my_modules/\n#module_utils   = /usr/share/my_module_utils/\n#remote_tmp     = ~/.ansible/tmp\n#local_tmp      = ~/.ansible/tmp\n#forks          = 5\n#poll_interval  = 15\n#sudo_user      = root\n#ask_sudo_pass = True\n#ask_pass      = True\n#transport      = smart\n#remote_port    = 22\n#module_lang    = C\n#module_set_locale = False\n\n# plays will gather facts by default, which contain information about\n# the remote system.\n#\n# smart - gather by default, but don't regather if already gathered\n# implicit - gather by default, turn off with gather_facts: False\n# explicit - do not gather by default, must say gather_facts: True\n#gathering = implicit\n\n# This only affects the gathering done by a play's gather_facts directive,\n# by default gathering retrieves all facts subsets\n# all - gather all subsets\n# network - gather min and network facts\n# hardware - gather hardware facts (longest facts to retrieve)\n# virtual - gather min and virtual facts\n# facter - import facts from facter\n# ohai - import facts from ohai\n# You can combine them using comma (ex: network,virtual)\n# You can negate them using ! (ex: !hardware,!facter,!ohai)\n# A minimal set of facts is always gathered.\n#gather_subset = all\n\n# some hardware related facts are collected\n# with a maximum timeout of 10 seconds. This\n# option lets you increase or decrease that\n# timeout to something more suitable for the\n# environment. \n# gather_timeout = 10\n\n# additional paths to search for roles in, colon separated\n#roles_path    = /etc/ansible/roles\n\n# uncomment this to disable SSH key host checking\n#host_key_checking = False\n\n# change the default callback\n#stdout_callback = skippy\n# enable additional callbacks\n#callback_whitelist = timer, mail\n\n# Determine whether includes in tasks and handlers are \"static\" by\n# default. As of 2.0, includes are dynamic by default. Setting these\n# values to True will make includes behave more like they did in the\n# 1.x versions.\n#task_includes_static = True\n#handler_includes_static = True\n\n# Controls if a missing handler for a notification event is an error or a warning\n#error_on_missing_handler = True\n\n# change this for alternative sudo implementations\n#sudo_exe = sudo\n\n# What flags to pass to sudo\n# WARNING: leaving out the defaults might create unexpected behaviours\n#sudo_flags = -H -S -n\n\n# SSH timeout\n#timeout = 10\n\n# default user to use for playbooks if user is not specified\n# (/usr/bin/ansible will use current user as default)\n#remote_user = root\n\n# logging is off by default unless this path is defined\n# if so defined, consider logrotate\n#log_path = /var/log/ansible.log\n\n# default module name for /usr/bin/ansible\n#module_name = command\n\n# use this shell for commands executed under sudo\n# you may need to change this to bin/bash in rare instances\n# if sudo is constrained\n#executable = /bin/sh\n\n# if inventory variables overlap, does the higher precedence one win\n# or are hash values merged together?  The default is 'replace' but\n# this can also be set to 'merge'.\n#hash_behaviour = replace\n\n# by default, variables from roles will be visible in the global variable\n# scope. To prevent this, the following option can be enabled, and only\n# tasks and handlers within the role will see the variables there\n#private_role_vars = yes\n\n# list any Jinja2 extensions to enable here:\n#jinja2_extensions = jinja2.ext.do,jinja2.ext.i18n\n\n# if set, always use this private key file for authentication, same as\n# if passing --private-key to ansible or ansible-playbook\n#private_key_file = /path/to/file\n\n# If set, configures the path to the Vault password file as an alternative to\n# specifying --vault-password-file on the command line.\n#vault_password_file = /path/to/vault_password_file\n\n# format of string {{ ansible_managed }} available within Jinja2\n# templates indicates to users editing templates files will be replaced.\n# replacing {file}, {host} and {uid} and strftime codes with proper values.\n#ansible_managed = Ansible managed: {file} modified on %Y-%m-%d %H:%M:%S by {uid} on {host}\n# {file}, {host}, {uid}, and the timestamp can all interfere with idempotence\n# in some situations so the default is a static string:\n#ansible_managed = Ansible managed\n\n# by default, ansible-playbook will display \"Skipping [host]\" if it determines a task\n# should not be run on a host.  Set this to \"False\" if you don't want to see these \"Skipping\"\n# messages. NOTE: the task header will still be shown regardless of whether or not the\n# task is skipped.\n#display_skipped_hosts = True\n\n# by default, if a task in a playbook does not include a name: field then\n# ansible-playbook will construct a header that includes the task's action but\n# not the task's args.  This is a security feature because ansible cannot know\n# if the *module* considers an argument to be no_log at the time that the\n# header is printed.  If your environment doesn't have a problem securing\n# stdout from ansible-playbook (or you have manually specified no_log in your\n# playbook on all of the tasks where you have secret information) then you can\n# safely set this to True to get more informative messages.\n#display_args_to_stdout = False\n\n# by default (as of 1.3), Ansible will raise errors when attempting to dereference\n# Jinja2 variables that are not set in templates or action lines. Uncomment this line\n# to revert the behavior to pre-1.3.\n#error_on_undefined_vars = False\n\n# by default (as of 1.6), Ansible may display warnings based on the configuration of the\n# system running ansible itself. This may include warnings about 3rd party packages or\n# other conditions that should be resolved if possible.\n# to disable these warnings, set the following value to False:\n#system_warnings = True\n\n# by default (as of 1.4), Ansible may display deprecation warnings for language\n# features that should no longer be used and will be removed in future versions.\n# to disable these warnings, set the following value to False:\n#deprecation_warnings = True\n\n# (as of 1.8), Ansible can optionally warn when usage of the shell and\n# command module appear to be simplified by using a default Ansible module\n# instead.  These warnings can be silenced by adjusting the following\n# setting or adding warn=yes or warn=no to the end of the command line\n# parameter string.  This will for example suggest using the git module\n# instead of shelling out to the git command.\n# command_warnings = False\n\n\n# set plugin path directories here, separate with colons\n#action_plugins     = /usr/share/ansible/plugins/action\n#cache_plugins      = /usr/share/ansible/plugins/cache\n#callback_plugins   = /usr/share/ansible/plugins/callback\n#connection_plugins = /usr/share/ansible/plugins/connection\n#lookup_plugins     = /usr/share/ansible/plugins/lookup\n#inventory_plugins  = /usr/share/ansible/plugins/inventory\n#vars_plugins       = /usr/share/ansible/plugins/vars\n#filter_plugins     = /usr/share/ansible/plugins/filter\n#test_plugins       = /usr/share/ansible/plugins/test\n#terminal_plugins   = /usr/share/ansible/plugins/terminal\n#strategy_plugins   = /usr/share/ansible/plugins/strategy\n\n\n# by default, ansible will use the 'linear' strategy but you may want to try\n# another one\n#strategy = free\n\n# by default callbacks are not loaded for /bin/ansible, enable this if you\n# want, for example, a notification or logging callback to also apply to\n# /bin/ansible runs\n#bin_ansible_callbacks = False\n\n\n# don't like cows?  that's unfortunate.\n# set to 1 if you don't want cowsay support or export ANSIBLE_NOCOWS=1\n#nocows = 1\n\n# set which cowsay stencil you'd like to use by default. When set to 'random',\n# a random stencil will be selected for each task. The selection will be filtered\n# against the `cow_whitelist` option below.\n#cow_selection = default\n#cow_selection = random\n\n# when using the 'random' option for cowsay, stencils will be restricted to this list.\n# it should be formatted as a comma-separated list with no spaces between names.\n# NOTE: line continuations here are for formatting purposes only, as the INI parser\n#       in python does not support them.\n#cow_whitelist=bud-frogs,bunny,cheese,daemon,default,dragon,elephant-in-snake,elephant,eyes,\\\n#              hellokitty,kitty,luke-koala,meow,milk,moofasa,moose,ren,sheep,small,stegosaurus,\\\n#              stimpy,supermilker,three-eyes,turkey,turtle,tux,udder,vader-koala,vader,www\n\n# don't like colors either?\n# set to 1 if you don't want colors, or export ANSIBLE_NOCOLOR=1\n#nocolor = 1\n\n# if set to a persistent type (not 'memory', for example 'redis') fact values\n# from previous runs in Ansible will be stored.  This may be useful when\n# wanting to use, for example, IP information from one group of servers\n# without having to talk to them in the same playbook run to get their\n# current IP information.\n#fact_caching = memory\n\n\n# retry files\n# When a playbook fails by default a .retry file will be created in ~/\n# You can disable this feature by setting retry_files_enabled to False\n# and you can change the location of the files by setting retry_files_save_path\n\n#retry_files_enabled = False\n#retry_files_save_path = ~/.ansible-retry\n\n# squash actions\n# Ansible can optimise actions that call modules with list parameters\n# when looping. Instead of calling the module once per with_ item, the\n# module is called once with all items at once. Currently this only works\n# under limited circumstances, and only with parameters named 'name'.\n#squash_actions = apk,apt,dnf,homebrew,pacman,pkgng,yum,zypper\n\n# prevents logging of task data, off by default\n#no_log = False\n\n# prevents logging of tasks, but only on the targets, data is still logged on the master/controller\n#no_target_syslog = False\n\n# controls whether Ansible will raise an error or warning if a task has no\n# choice but to create world readable temporary files to execute a module on\n# the remote machine.  This option is False by default for security.  Users may\n# turn this on to have behaviour more like Ansible prior to 2.1.x.  See\n# https://docs.ansible.com/ansible/become.html#becoming-an-unprivileged-user\n# for more secure ways to fix this than enabling this option.\n#allow_world_readable_tmpfiles = False\n\n# controls the compression level of variables sent to\n# worker processes. At the default of 0, no compression\n# is used. This value must be an integer from 0 to 9.\n#var_compression_level = 9\n\n# controls what compression method is used for new-style ansible modules when\n# they are sent to the remote system.  The compression types depend on having\n# support compiled into both the controller's python and the client's python.\n# The names should match with the python Zipfile compression types:\n# * ZIP_STORED (no compression. available everywhere)\n# * ZIP_DEFLATED (uses zlib, the default)\n# These values may be set per host via the ansible_module_compression inventory\n# variable\n#module_compression = 'ZIP_DEFLATED'\n\n# This controls the cutoff point (in bytes) on --diff for files\n# set to 0 for unlimited (RAM may suffer!).\n#max_diff_size = 1048576\n\n# This controls how ansible handles multiple --tags and --skip-tags arguments\n# on the CLI.  If this is True then multiple arguments are merged together.  If\n# it is False, then the last specified argument is used and the others are ignored.\n# This option will be removed in 2.8.\n#merge_multiple_cli_flags = True\n\n# Controls showing custom stats at the end, off by default\n#show_custom_stats = True\n\n# Controls which files to ignore when using a directory as inventory with\n# possibly multiple sources (both static and dynamic)\n#inventory_ignore_extensions = ~, .orig, .bak, .ini, .cfg, .retry, .pyc, .pyo\n\n# This family of modules use an alternative execution path optimized for network appliances\n# only update this setting if you know how this works, otherwise it can break module execution\n#network_group_modules=['eos', 'nxos', 'ios', 'iosxr', 'junos', 'vyos']\n\n# This keeps facts from polluting the main namespace as variables.\n# Setting to True keeps them under the ansible_facts namespace, the default is False\n#restrict_facts_namespace: True\n\n# When enabled, this option allows lookups (via variables like {{lookup('foo')}} or when used as\n# a loop with `with_foo`) to return data that is not marked \"unsafe\". This means the data may contain\n# jinja2 templating language which will be run through the templating engine.\n# ENABLING THIS COULD BE A SECURITY RISK\n#allow_unsafe_lookups = False\n\n[privilege_escalation]\n#become=True\n#become_method=sudo\n#become_user=root\n#become_ask_pass=False\n\n[paramiko_connection]\n\n# uncomment this line to cause the paramiko connection plugin to not record new host\n# keys encountered.  Increases performance on new host additions.  Setting works independently of the\n# host key checking setting above.\n#record_host_keys=False\n\n# by default, Ansible requests a pseudo-terminal for commands executed under sudo. Uncomment this\n# line to disable this behaviour.\n#pty=False\n\n# paramiko will default to looking for SSH keys initially when trying to\n# authenticate to remote devices.  This is a problem for some network devices\n# that close the connection after a key failure.  Uncomment this line to\n# disable the Paramiko look for keys function\n#look_for_keys = False\n\n# When using persistent connections with Paramiko, the connection runs in a\n# background process.  If the host doesn't already have a valid SSH key, by\n# default Ansible will prompt to add the host key.  This will cause connections\n# running in background processes to fail.  Uncomment this line to have\n# Paramiko automatically add host keys.\n#host_key_auto_add = True\n\n[ssh_connection]\n\n# ssh arguments to use\n# Leaving off ControlPersist will result in poor performance, so use\n# paramiko on older platforms rather than removing it, -C controls compression use\n#ssh_args = -C -o ControlMaster=auto -o ControlPersist=60s\n\n# The base directory for the ControlPath sockets. \n# This is the \"%(directory)s\" in the control_path option\n# \n# Example: \n# control_path_dir = /tmp/.ansible/cp\n#control_path_dir = ~/.ansible/cp\n\n# The path to use for the ControlPath sockets. This defaults to a hashed string of the hostname, \n# port and username (empty string in the config). The hash mitigates a common problem users \n# found with long hostames and the conventional %(directory)s/ansible-ssh-%%h-%%p-%%r format. \n# In those cases, a \"too long for Unix domain socket\" ssh error would occur.\n#\n# Example:\n# control_path = %(directory)s/%%h-%%r\n#control_path =\n\n# Enabling pipelining reduces the number of SSH operations required to\n# execute a module on the remote server. This can result in a significant\n# performance improvement when enabled, however when using \"sudo:\" you must\n# first disable 'requiretty' in /etc/sudoers\n#\n# By default, this option is disabled to preserve compatibility with\n# sudoers configurations that have requiretty (the default on many distros).\n#\n#pipelining = False\n\n# Control the mechanism for transferring files (old)\n#   * smart = try sftp and then try scp [default]\n#   * True = use scp only\n#   * False = use sftp only\n#scp_if_ssh = smart\n\n# Control the mechanism for transferring files (new)\n# If set, this will override the scp_if_ssh option\n#   * sftp  = use sftp to transfer files\n#   * scp   = use scp to transfer files\n#   * piped = use 'dd' over SSH to transfer files\n#   * smart = try sftp, scp, and piped, in that order [default]\n#transfer_method = smart\n\n# if False, sftp will not use batch mode to transfer files. This may cause some\n# types of file transfer failures impossible to catch however, and should\n# only be disabled if your sftp version has problems with batch mode\n#sftp_batch_mode = False\n\n[persistent_connection]\n\n# Configures the persistent connection timeout value in seconds.  This value is\n# how long the persistent connection will remain idle before it is destroyed.  \n# If the connection doesn't receive a request before the timeout value \n# expires, the connection is shutdown.  The default value is 30 seconds.\n#connect_timeout = 30\n\n# Configures the persistent connection retries.  This value configures the\n# number of attempts the ansible-connection will make when trying to connect\n# to the local domain socket.  The default value is 30.\n#connect_retries = 30\n\n# Configures the amount of time in seconds to wait between connection attempts \n# to the local unix domain socket.  This value works in conjunction with the\n# connect_retries value to define how long to try to connect to the local\n# domain socket when setting up a persistent connection.  The default value is\n# 1 second.\n#connect_interval = 1\n\n[accelerate]\n#accelerate_port = 5099\n#accelerate_timeout = 30\n#accelerate_connect_timeout = 5.0\n\n# The daemon timeout is measured in minutes. This time is measured\n# from the last activity to the accelerate daemon.\n#accelerate_daemon_timeout = 30\n\n# If set to yes, accelerate_multi_key will allow multiple\n# private keys to be uploaded to it, though each user must\n# have access to the system via SSH to add a new key. The default\n# is \"no\".\n#accelerate_multi_key = yes\n\n[selinux]\n# file systems that require special treatment when dealing with security context\n# the default behaviour that copies the existing context or uses the user default\n# needs to be changed to use the file system dependent context.\n#special_context_filesystems=nfs,vboxsf,fuse,ramfs,9p\n\n# Set this to yes to allow libvirt_lxc connections to work without SELinux.\n#libvirt_lxc_noseclabel = yes\n\n[colors]\n#highlight = white\n#verbose = blue\n#warn = bright purple\n#error = red\n#debug = dark gray\n#deprecate = purple\n#skip = cyan\n#unreachable = red\n#ok = green\n#changed = yellow\n#diff_add = green\n#diff_remove = red\n#diff_lines = cyan\n\n\n[diff]\n# Always print diff when running ( same as always running with -D/--diff )\n# always = no\n\n# Set how many context lines to show in diff\n# context = 3\n", "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport os\nimport tempfile\nfrom string import ascii_letters, digits\n\nfrom ansible.errors import AnsibleOptionsError\nfrom ansible.module_utils.six import string_types\nfrom ansible.module_utils.six.moves import configparser\nfrom ansible.module_utils._text import to_text\nfrom ansible.parsing.quoting import unquote\nfrom ansible.utils.path import makedirs_safe\n\nBOOL_TRUE = frozenset([ \"true\", \"t\", \"y\", \"1\", \"yes\", \"on\" ])\n\ndef mk_boolean(value):\n    ret = value\n    if not isinstance(value, bool):\n        if value is None:\n            ret = False\n        ret = (str(value).lower() in BOOL_TRUE)\n    return ret\n\ndef shell_expand(path, expand_relative_paths=False):\n    '''\n    shell_expand is needed as os.path.expanduser does not work\n    when path is None, which is the default for ANSIBLE_PRIVATE_KEY_FILE\n    '''\n    if path:\n        path = os.path.expanduser(os.path.expandvars(path))\n        if expand_relative_paths and not path.startswith('/'):\n            # paths are always 'relative' to the config?\n            if 'CONFIG_FILE' in globals():\n                CFGDIR = os.path.dirname(CONFIG_FILE)\n                path = os.path.join(CFGDIR, path)\n            path = os.path.abspath(path)\n    return path\n\ndef get_config(p, section, key, env_var, default, value_type=None, expand_relative_paths=False):\n    ''' return a configuration variable with casting\n\n    :arg p: A ConfigParser object to look for the configuration in\n    :arg section: A section of the ini config that should be examined for this section.\n    :arg key: The config key to get this config from\n    :arg env_var: An Environment variable to check for the config var.  If\n        this is set to None then no environment variable will be used.\n    :arg default: A default value to assign to the config var if nothing else sets it.\n    :kwarg value_type: The type of the value.  This can be any of the following strings:\n        :boolean: sets the value to a True or False value\n        :integer: Sets the value to an integer or raises a ValueType error\n        :float: Sets the value to a float or raises a ValueType error\n        :list: Treats the value as a comma separated list.  Split the value\n            and return it as a python list.\n        :none: Sets the value to None\n        :path: Expands any environment variables and tilde's in the value.\n        :tmp_path: Create a unique temporary directory inside of the directory\n            specified by value and return its path.\n        :pathlist: Treat the value as a typical PATH string.  (On POSIX, this\n            means colon separated strings.)  Split the value and then expand\n            each part for environment variables and tildes.\n    :kwarg expand_relative_paths: for pathlist and path types, if this is set\n        to True then also change any relative paths into absolute paths.  The\n        default is False.\n    '''\n    value = _get_config(p, section, key, env_var, default)\n    if value_type == 'boolean':\n        value = mk_boolean(value)\n\n    elif value:\n        if value_type == 'integer':\n            value = int(value)\n\n        elif value_type == 'float':\n            value = float(value)\n\n        elif value_type == 'list':\n            if isinstance(value, string_types):\n                value = [x.strip() for x in value.split(',')]\n\n        elif value_type == 'none':\n            if value == \"None\":\n                value = None\n\n        elif value_type == 'path':\n            value = shell_expand(value, expand_relative_paths=expand_relative_paths)\n\n        elif value_type == 'tmppath':\n            value = shell_expand(value)\n            if not os.path.exists(value):\n                makedirs_safe(value, 0o700)\n            prefix = 'ansible-local-%s' % os.getpid()\n            value = tempfile.mkdtemp(prefix=prefix, dir=value)\n\n        elif value_type == 'pathlist':\n            if isinstance(value, string_types):\n                value = [shell_expand(x, expand_relative_paths=expand_relative_paths) \\\n                         for x in value.split(os.pathsep)]\n\n        elif isinstance(value, string_types):\n            value = unquote(value)\n\n    return to_text(value, errors='surrogate_or_strict', nonstring='passthru')\n\n\ndef _get_config(p, section, key, env_var, default):\n    ''' helper function for get_config '''\n    value = default\n\n    if p is not None:\n        try:\n            value = p.get(section, key, raw=True)\n        except:\n            pass\n\n    if env_var is not None:\n        env_value = os.environ.get(env_var, None)\n        if env_value is not None:\n            value = env_value\n\n    return to_text(value, errors='surrogate_or_strict', nonstring='passthru')\n\n\ndef load_config_file():\n    ''' Load Config File order(first found is used): ENV, CWD, HOME, /etc/ansible '''\n\n    p = configparser.ConfigParser()\n\n    path0 = os.getenv(\"ANSIBLE_CONFIG\", None)\n    if path0 is not None:\n        path0 = os.path.expanduser(path0)\n        if os.path.isdir(path0):\n            path0 += \"/ansible.cfg\"\n    try:\n        path1 = os.getcwd() + \"/ansible.cfg\"\n    except OSError:\n        path1 = None\n    path2 = os.path.expanduser(\"~/.ansible.cfg\")\n    path3 = \"/etc/ansible/ansible.cfg\"\n\n    for path in [path0, path1, path2, path3]:\n        if path is not None and os.path.exists(path):\n            try:\n                p.read(path)\n            except configparser.Error as e:\n                raise AnsibleOptionsError(\"Error reading config file: \\n{0}\".format(e))\n            return p, path\n    return None, ''\n\n\np, CONFIG_FILE = load_config_file()\n\n# check all of these extensions when looking for yaml files for things like\n# group variables -- really anything we can load\nYAML_FILENAME_EXTENSIONS = [ \"\", \".yml\", \".yaml\", \".json\" ]\n\n# the default whitelist for cow stencils\nDEFAULT_COW_WHITELIST = ['bud-frogs', 'bunny', 'cheese', 'daemon', 'default', 'dragon', 'elephant-in-snake', 'elephant',\n                         'eyes', 'hellokitty', 'kitty', 'luke-koala', 'meow', 'milk', 'moofasa', 'moose', 'ren', 'sheep',\n                         'small', 'stegosaurus', 'stimpy', 'supermilker', 'three-eyes', 'turkey', 'turtle', 'tux', 'udder',\n                         'vader-koala', 'vader', 'www',]\n\n# sections in config file\nDEFAULTS='defaults'\n\n\n# FIXME: add deprecation warning when these get set\n#### DEPRECATED VARS ####\n#\n\n#### If --tags or --skip-tags is given multiple times on the CLI and this is\n# True, merge the lists of tags together.  If False, let the last argument\n# overwrite any previous ones.  Behaviour is overwrite through 2.2.  2.3\n# overwrites but prints deprecation.  2.4 the default is to merge.\nMERGE_MULTIPLE_CLI_TAGS = get_config(p, DEFAULTS, 'merge_multiple_cli_tags', 'ANSIBLE_MERGE_MULTIPLE_CLI_TAGS', True, value_type='boolean')\n\n#### GENERALLY CONFIGURABLE THINGS ####\nDEFAULT_DEBUG             = get_config(p, DEFAULTS, 'debug',            'ANSIBLE_DEBUG',            False, value_type='boolean')\nDEFAULT_VERBOSITY         = get_config(p, DEFAULTS, 'verbosity',        'ANSIBLE_VERBOSITY',        0, value_type='integer')\nDEFAULT_HOST_LIST         = get_config(p, DEFAULTS,'inventory', 'ANSIBLE_INVENTORY', '/etc/ansible/hosts', value_type='path')\nDEFAULT_ROLES_PATH        = get_config(p, DEFAULTS, 'roles_path',       'ANSIBLE_ROLES_PATH',\n                                       '~/.ansible/roles:/usr/share/ansible/roles:/etc/ansible/roles',\n                                       value_type='pathlist', expand_relative_paths=True)\nDEFAULT_REMOTE_TMP        = get_config(p, DEFAULTS, 'remote_tmp',       'ANSIBLE_REMOTE_TEMP',      '~/.ansible/tmp')\nDEFAULT_LOCAL_TMP         = get_config(p, DEFAULTS, 'local_tmp',        'ANSIBLE_LOCAL_TEMP',      '~/.ansible/tmp', value_type='tmppath')\nDEFAULT_MODULE_NAME       = get_config(p, DEFAULTS, 'module_name',      None,                       'command')\nDEFAULT_FACT_PATH         = get_config(p, DEFAULTS, 'fact_path',        'ANSIBLE_FACT_PATH', None, value_type='path')\nDEFAULT_FORKS             = get_config(p, DEFAULTS, 'forks',            'ANSIBLE_FORKS',            5, value_type='integer')\nDEFAULT_MODULE_ARGS       = get_config(p, DEFAULTS, 'module_args',      'ANSIBLE_MODULE_ARGS',      '')\nDEFAULT_MODULE_LANG       = get_config(p, DEFAULTS, 'module_lang',      'ANSIBLE_MODULE_LANG',      os.getenv('LANG', 'en_US.UTF-8'))\nDEFAULT_MODULE_SET_LOCALE = get_config(p, DEFAULTS, 'module_set_locale','ANSIBLE_MODULE_SET_LOCALE',False, value_type='boolean')\nDEFAULT_MODULE_COMPRESSION= get_config(p, DEFAULTS, 'module_compression', None, 'ZIP_DEFLATED')\nDEFAULT_TIMEOUT           = get_config(p, DEFAULTS, 'timeout',          'ANSIBLE_TIMEOUT',          10, value_type='integer')\nDEFAULT_POLL_INTERVAL     = get_config(p, DEFAULTS, 'poll_interval',    'ANSIBLE_POLL_INTERVAL',    15, value_type='integer')\nDEFAULT_REMOTE_USER       = get_config(p, DEFAULTS, 'remote_user',      'ANSIBLE_REMOTE_USER',      None)\nDEFAULT_ASK_PASS          = get_config(p, DEFAULTS, 'ask_pass',  'ANSIBLE_ASK_PASS',    False, value_type='boolean')\nDEFAULT_PRIVATE_KEY_FILE  = get_config(p, DEFAULTS, 'private_key_file', 'ANSIBLE_PRIVATE_KEY_FILE', None, value_type='path')\nDEFAULT_REMOTE_PORT       = get_config(p, DEFAULTS, 'remote_port',      'ANSIBLE_REMOTE_PORT',      None, value_type='integer')\nDEFAULT_ASK_VAULT_PASS    = get_config(p, DEFAULTS, 'ask_vault_pass',    'ANSIBLE_ASK_VAULT_PASS',    False, value_type='boolean')\nDEFAULT_VAULT_PASSWORD_FILE = get_config(p, DEFAULTS, 'vault_password_file', 'ANSIBLE_VAULT_PASSWORD_FILE', None, value_type='path')\nDEFAULT_TRANSPORT         = get_config(p, DEFAULTS, 'transport',        'ANSIBLE_TRANSPORT',        'smart')\nDEFAULT_SCP_IF_SSH        = get_config(p, 'ssh_connection', 'scp_if_ssh',       'ANSIBLE_SCP_IF_SSH',       'smart')\nDEFAULT_SFTP_BATCH_MODE   = get_config(p, 'ssh_connection', 'sftp_batch_mode', 'ANSIBLE_SFTP_BATCH_MODE', True, value_type='boolean')\nDEFAULT_SSH_TRANSFER_METHOD = get_config(p, 'ssh_connection', 'transfer_method', 'ANSIBLE_SSH_TRANSFER_METHOD', None)\nDEFAULT_MANAGED_STR       = get_config(p, DEFAULTS, 'ansible_managed',  None,           'Ansible managed')\nDEFAULT_SYSLOG_FACILITY   = get_config(p, DEFAULTS, 'syslog_facility',  'ANSIBLE_SYSLOG_FACILITY', 'LOG_USER')\nDEFAULT_KEEP_REMOTE_FILES = get_config(p, DEFAULTS, 'keep_remote_files', 'ANSIBLE_KEEP_REMOTE_FILES', False, value_type='boolean')\nDEFAULT_HASH_BEHAVIOUR    = get_config(p, DEFAULTS, 'hash_behaviour', 'ANSIBLE_HASH_BEHAVIOUR', 'replace')\nDEFAULT_PRIVATE_ROLE_VARS = get_config(p, DEFAULTS, 'private_role_vars', 'ANSIBLE_PRIVATE_ROLE_VARS', False, value_type='boolean')\nDEFAULT_JINJA2_EXTENSIONS = get_config(p, DEFAULTS, 'jinja2_extensions', 'ANSIBLE_JINJA2_EXTENSIONS', None)\nDEFAULT_EXECUTABLE        = get_config(p, DEFAULTS, 'executable', 'ANSIBLE_EXECUTABLE', '/bin/sh')\nDEFAULT_GATHERING         = get_config(p, DEFAULTS, 'gathering', 'ANSIBLE_GATHERING', 'implicit').lower()\nDEFAULT_GATHER_SUBSET     = get_config(p, DEFAULTS, 'gather_subset', 'ANSIBLE_GATHER_SUBSET', 'all').lower()\nDEFAULT_GATHER_TIMEOUT    = get_config(p, DEFAULTS, 'gather_timeout', 'ANSIBLE_GATHER_TIMEOUT', 10, value_type='integer')\nDEFAULT_LOG_PATH          = get_config(p, DEFAULTS, 'log_path',           'ANSIBLE_LOG_PATH', '', value_type='path')\nDEFAULT_FORCE_HANDLERS    = get_config(p, DEFAULTS, 'force_handlers', 'ANSIBLE_FORCE_HANDLERS', False, value_type='boolean')\nDEFAULT_INVENTORY_IGNORE  = get_config(p, DEFAULTS, 'inventory_ignore_extensions', 'ANSIBLE_INVENTORY_IGNORE',\n                                       [\"~\", \".orig\", \".bak\", \".ini\", \".cfg\", \".retry\", \".pyc\", \".pyo\"], value_type='list')\nDEFAULT_VAR_COMPRESSION_LEVEL = get_config(p, DEFAULTS, 'var_compression_level', 'ANSIBLE_VAR_COMPRESSION_LEVEL', 0, value_type='integer')\nDEFAULT_INTERNAL_POLL_INTERVAL = get_config(p, DEFAULTS, 'internal_poll_interval', None, 0.001, value_type='float')\nDEFAULT_ALLOW_UNSAFE_LOOKUPS = get_config(p, DEFAULTS, 'allow_unsafe_lookups', None, False, value_type='boolean')\nERROR_ON_MISSING_HANDLER  = get_config(p, DEFAULTS, 'error_on_missing_handler', 'ANSIBLE_ERROR_ON_MISSING_HANDLER', True, value_type='boolean')\nSHOW_CUSTOM_STATS = get_config(p, DEFAULTS, 'show_custom_stats', 'ANSIBLE_SHOW_CUSTOM_STATS', False, value_type='boolean')\nNAMESPACE_FACTS = get_config(p, DEFAULTS, 'restrict_facts_namespace', 'ANSIBLE_RESTRICT_FACTS', False, value_type='boolean')\n\n# static includes\nDEFAULT_TASK_INCLUDES_STATIC    = get_config(p, DEFAULTS, 'task_includes_static', 'ANSIBLE_TASK_INCLUDES_STATIC', False, value_type='boolean')\nDEFAULT_HANDLER_INCLUDES_STATIC = get_config(p, DEFAULTS, 'handler_includes_static', 'ANSIBLE_HANDLER_INCLUDES_STATIC', False, value_type='boolean')\n\n# disclosure\nDEFAULT_NO_LOG           = get_config(p, DEFAULTS, 'no_log', 'ANSIBLE_NO_LOG', False, value_type='boolean')\nDEFAULT_NO_TARGET_SYSLOG   = get_config(p, DEFAULTS, 'no_target_syslog', 'ANSIBLE_NO_TARGET_SYSLOG', False, value_type='boolean')\nALLOW_WORLD_READABLE_TMPFILES = get_config(p, DEFAULTS, 'allow_world_readable_tmpfiles', None, False, value_type='boolean')\n\n# selinux\nDEFAULT_SELINUX_SPECIAL_FS = get_config(p, 'selinux', 'special_context_filesystems', None, 'fuse, nfs, vboxsf, ramfs, 9p', value_type='list')\nDEFAULT_LIBVIRT_LXC_NOSECLABEL = get_config(p, 'selinux', 'libvirt_lxc_noseclabel', 'LIBVIRT_LXC_NOSECLABEL', False, value_type='boolean')\n\n### PRIVILEGE ESCALATION ###\n# Backwards Compat\nDEFAULT_SU                = get_config(p, DEFAULTS, 'su', 'ANSIBLE_SU', False, value_type='boolean')\nDEFAULT_SU_USER           = get_config(p, DEFAULTS, 'su_user', 'ANSIBLE_SU_USER', 'root')\nDEFAULT_SU_EXE            = get_config(p, DEFAULTS, 'su_exe', 'ANSIBLE_SU_EXE', None)\nDEFAULT_SU_FLAGS          = get_config(p, DEFAULTS, 'su_flags', 'ANSIBLE_SU_FLAGS', None)\nDEFAULT_ASK_SU_PASS       = get_config(p, DEFAULTS, 'ask_su_pass', 'ANSIBLE_ASK_SU_PASS', False, value_type='boolean')\nDEFAULT_SUDO              = get_config(p, DEFAULTS, 'sudo', 'ANSIBLE_SUDO', False, value_type='boolean')\nDEFAULT_SUDO_USER         = get_config(p, DEFAULTS, 'sudo_user',        'ANSIBLE_SUDO_USER',        'root')\nDEFAULT_SUDO_EXE          = get_config(p, DEFAULTS, 'sudo_exe', 'ANSIBLE_SUDO_EXE', None)\nDEFAULT_SUDO_FLAGS        = get_config(p, DEFAULTS, 'sudo_flags', 'ANSIBLE_SUDO_FLAGS', '-H -S -n')\nDEFAULT_ASK_SUDO_PASS     = get_config(p, DEFAULTS, 'ask_sudo_pass',    'ANSIBLE_ASK_SUDO_PASS',    False, value_type='boolean')\n\n# Become\nBECOME_ERROR_STRINGS      = {\n    'sudo': 'Sorry, try again.',\n    'su': 'Authentication failure',\n    'pbrun': '',\n    'pfexec': '',\n    'doas': 'Permission denied',\n    'dzdo': '',\n    'ksu': 'Password incorrect'\n}  # FIXME: deal with i18n\nBECOME_MISSING_STRINGS    = {\n    'sudo': 'sorry, a password is required to run sudo',\n    'su': '',\n    'pbrun': '',\n    'pfexec': '',\n    'doas': 'Authorization required',\n    'dzdo': '',\n    'ksu': 'No password given'\n}  # FIXME: deal with i18n\nBECOME_METHODS            = ['sudo','su','pbrun','pfexec','doas','dzdo','ksu','runas']\nBECOME_ALLOW_SAME_USER    = get_config(p, 'privilege_escalation', 'become_allow_same_user', 'ANSIBLE_BECOME_ALLOW_SAME_USER', False, value_type='boolean')\nDEFAULT_BECOME_METHOD     = get_config(p, 'privilege_escalation', 'become_method', 'ANSIBLE_BECOME_METHOD',\n                                       'sudo' if DEFAULT_SUDO else 'su' if DEFAULT_SU else 'sudo').lower()\nDEFAULT_BECOME            = get_config(p, 'privilege_escalation', 'become', 'ANSIBLE_BECOME',False, value_type='boolean')\nDEFAULT_BECOME_USER       = get_config(p, 'privilege_escalation', 'become_user', 'ANSIBLE_BECOME_USER', 'root')\nDEFAULT_BECOME_EXE        = get_config(p, 'privilege_escalation', 'become_exe', 'ANSIBLE_BECOME_EXE', None)\nDEFAULT_BECOME_FLAGS      = get_config(p, 'privilege_escalation', 'become_flags', 'ANSIBLE_BECOME_FLAGS', None)\nDEFAULT_BECOME_ASK_PASS   = get_config(p, 'privilege_escalation', 'become_ask_pass', 'ANSIBLE_BECOME_ASK_PASS', False, value_type='boolean')\n\n\n# PLUGINS\n\n# Modules that can optimize with_items loops into a single call.  Currently\n# these modules must (1) take a \"name\" or \"pkg\" parameter that is a list.  If\n# the module takes both, bad things could happen.\n# In the future we should probably generalize this even further\n# (mapping of param: squash field)\nDEFAULT_SQUASH_ACTIONS         = get_config(p, DEFAULTS, 'squash_actions', 'ANSIBLE_SQUASH_ACTIONS',\n                                            \"apk, apt, dnf, homebrew, openbsd_pkg, pacman, pkgng, yum, zypper\", value_type='list')\n# paths\n\nDEFAULT_ACTION_PLUGIN_PATH     = get_config(p, DEFAULTS, 'action_plugins', 'ANSIBLE_ACTION_PLUGINS',\n                                            '~/.ansible/plugins/action:/usr/share/ansible/plugins/action', value_type='pathlist')\nDEFAULT_CACHE_PLUGIN_PATH      = get_config(p, DEFAULTS, 'cache_plugins', 'ANSIBLE_CACHE_PLUGINS',\n                                            '~/.ansible/plugins/cache:/usr/share/ansible/plugins/cache', value_type='pathlist')\nDEFAULT_CALLBACK_PLUGIN_PATH   = get_config(p, DEFAULTS, 'callback_plugins', 'ANSIBLE_CALLBACK_PLUGINS',\n                                            '~/.ansible/plugins/callback:/usr/share/ansible/plugins/callback', value_type='pathlist')\nDEFAULT_CONNECTION_PLUGIN_PATH = get_config(p, DEFAULTS, 'connection_plugins', 'ANSIBLE_CONNECTION_PLUGINS',\n                                            '~/.ansible/plugins/connection:/usr/share/ansible/plugins/connection', value_type='pathlist')\nDEFAULT_LOOKUP_PLUGIN_PATH     = get_config(p, DEFAULTS, 'lookup_plugins', 'ANSIBLE_LOOKUP_PLUGINS',\n                                            '~/.ansible/plugins/lookup:/usr/share/ansible/plugins/lookup', value_type='pathlist')\nDEFAULT_MODULE_PATH            = get_config(p, DEFAULTS, 'library',            'ANSIBLE_LIBRARY',\n                                            '~/.ansible/plugins/modules:/usr/share/ansible/plugins/modules', value_type='pathlist')\nDEFAULT_MODULE_UTILS_PATH      = get_config(p, DEFAULTS, 'module_utils',       'ANSIBLE_MODULE_UTILS',\n                                            '~/.ansible/plugins/module_utils:/usr/share/ansible/plugins/module_utils', value_type='pathlist')\nDEFAULT_INVENTORY_PLUGIN_PATH  = get_config(p, DEFAULTS, 'inventory_plugins', 'ANSIBLE_INVENTORY_PLUGINS',\n                                            '~/.ansible/plugins/inventory:/usr/share/ansible/plugins/inventory', value_type='pathlist')\nDEFAULT_VARS_PLUGIN_PATH       = get_config(p, DEFAULTS, 'vars_plugins', 'ANSIBLE_VARS_PLUGINS',\n                                            '~/.ansible/plugins/vars:/usr/share/ansible/plugins/vars', value_type='pathlist')\nDEFAULT_FILTER_PLUGIN_PATH     = get_config(p, DEFAULTS, 'filter_plugins', 'ANSIBLE_FILTER_PLUGINS',\n                                            '~/.ansible/plugins/filter:/usr/share/ansible/plugins/filter', value_type='pathlist')\nDEFAULT_TEST_PLUGIN_PATH       = get_config(p, DEFAULTS, 'test_plugins', 'ANSIBLE_TEST_PLUGINS',\n                                            '~/.ansible/plugins/test:/usr/share/ansible/plugins/test', value_type='pathlist')\nDEFAULT_STRATEGY_PLUGIN_PATH   = get_config(p, DEFAULTS, 'strategy_plugins', 'ANSIBLE_STRATEGY_PLUGINS',\n                                            '~/.ansible/plugins/strategy:/usr/share/ansible/plugins/strategy', value_type='pathlist')\n\nNETWORK_GROUP_MODULES          = get_config(p, DEFAULTS, 'network_group_modules','NETWORK_GROUP_MODULES', ['eos', 'nxos', 'ios', 'iosxr', 'junos',\n                                                                                                           'vyos', 'sros', 'dellos9', 'dellos10', 'dellos6'],\n                                            value_type='list')\nDEFAULT_STRATEGY               = get_config(p, DEFAULTS, 'strategy',           'ANSIBLE_STRATEGY', 'linear')\nDEFAULT_STDOUT_CALLBACK        = get_config(p, DEFAULTS, 'stdout_callback',    'ANSIBLE_STDOUT_CALLBACK', 'default')\n# cache\nCACHE_PLUGIN                   = get_config(p, DEFAULTS, 'fact_caching', 'ANSIBLE_CACHE_PLUGIN', 'memory')\nCACHE_PLUGIN_CONNECTION        = get_config(p, DEFAULTS, 'fact_caching_connection', 'ANSIBLE_CACHE_PLUGIN_CONNECTION', None)\nCACHE_PLUGIN_PREFIX            = get_config(p, DEFAULTS, 'fact_caching_prefix', 'ANSIBLE_CACHE_PLUGIN_PREFIX', 'ansible_facts')\nCACHE_PLUGIN_TIMEOUT           = get_config(p, DEFAULTS, 'fact_caching_timeout', 'ANSIBLE_CACHE_PLUGIN_TIMEOUT', 24 * 60 * 60, value_type='integer')\n\n# Display\nANSIBLE_FORCE_COLOR            = get_config(p, DEFAULTS, 'force_color', 'ANSIBLE_FORCE_COLOR', None, value_type='boolean')\nANSIBLE_NOCOLOR                = get_config(p, DEFAULTS, 'nocolor', 'ANSIBLE_NOCOLOR', None, value_type='boolean')\nANSIBLE_NOCOWS                 = get_config(p, DEFAULTS, 'nocows', 'ANSIBLE_NOCOWS', None, value_type='boolean')\nANSIBLE_COW_SELECTION          = get_config(p, DEFAULTS, 'cow_selection', 'ANSIBLE_COW_SELECTION', 'default')\nANSIBLE_COW_WHITELIST          = get_config(p, DEFAULTS, 'cow_whitelist', 'ANSIBLE_COW_WHITELIST', DEFAULT_COW_WHITELIST, value_type='list')\nDISPLAY_SKIPPED_HOSTS          = get_config(p, DEFAULTS, 'display_skipped_hosts', 'DISPLAY_SKIPPED_HOSTS', True, value_type='boolean')\nDEFAULT_UNDEFINED_VAR_BEHAVIOR = get_config(p, DEFAULTS, 'error_on_undefined_vars', 'ANSIBLE_ERROR_ON_UNDEFINED_VARS', True, value_type='boolean')\nHOST_KEY_CHECKING              = get_config(p, DEFAULTS, 'host_key_checking',  'ANSIBLE_HOST_KEY_CHECKING',    True, value_type='boolean')\nSYSTEM_WARNINGS                = get_config(p, DEFAULTS, 'system_warnings', 'ANSIBLE_SYSTEM_WARNINGS', True, value_type='boolean')\nDEPRECATION_WARNINGS           = get_config(p, DEFAULTS, 'deprecation_warnings', 'ANSIBLE_DEPRECATION_WARNINGS', True, value_type='boolean')\nDEFAULT_CALLABLE_WHITELIST     = get_config(p, DEFAULTS, 'callable_whitelist', 'ANSIBLE_CALLABLE_WHITELIST', [], value_type='list')\nCOMMAND_WARNINGS               = get_config(p, DEFAULTS, 'command_warnings', 'ANSIBLE_COMMAND_WARNINGS', True, value_type='boolean')\nDEFAULT_LOAD_CALLBACK_PLUGINS  = get_config(p, DEFAULTS, 'bin_ansible_callbacks', 'ANSIBLE_LOAD_CALLBACK_PLUGINS', False, value_type='boolean')\nDEFAULT_CALLBACK_WHITELIST     = get_config(p, DEFAULTS, 'callback_whitelist', 'ANSIBLE_CALLBACK_WHITELIST', [], value_type='list')\nRETRY_FILES_ENABLED            = get_config(p, DEFAULTS, 'retry_files_enabled', 'ANSIBLE_RETRY_FILES_ENABLED', True, value_type='boolean')\nRETRY_FILES_SAVE_PATH          = get_config(p, DEFAULTS, 'retry_files_save_path', 'ANSIBLE_RETRY_FILES_SAVE_PATH', None, value_type='path')\nDEFAULT_NULL_REPRESENTATION    = get_config(p, DEFAULTS, 'null_representation', 'ANSIBLE_NULL_REPRESENTATION', None, value_type='none')\nDISPLAY_ARGS_TO_STDOUT         = get_config(p, DEFAULTS, 'display_args_to_stdout', 'ANSIBLE_DISPLAY_ARGS_TO_STDOUT', False, value_type='boolean')\nMAX_FILE_SIZE_FOR_DIFF         = get_config(p, DEFAULTS, 'max_diff_size', 'ANSIBLE_MAX_DIFF_SIZE', 1024*1024, value_type='integer')\n\n# CONNECTION RELATED\nUSE_PERSISTENT_CONNECTIONS     = get_config(p, DEFAULTS, 'use_persistent_connections', 'ANSIBLE_USE_PERSISTENT_CONNECTIONS', False, value_type='boolean')\nANSIBLE_SSH_ARGS               = get_config(p, 'ssh_connection', 'ssh_args', 'ANSIBLE_SSH_ARGS', '-C -o ControlMaster=auto -o ControlPersist=60s')\n### WARNING: Someone might be tempted to switch this from percent-formatting\n# to .format() in the future.  be sure to read this:\n# http://lucumr.pocoo.org/2016/12/29/careful-with-str-format/ and understand\n# that it may be a security risk to do so.\nANSIBLE_SSH_CONTROL_PATH       = get_config(p, 'ssh_connection', 'control_path', 'ANSIBLE_SSH_CONTROL_PATH', None)\nANSIBLE_SSH_CONTROL_PATH_DIR   = get_config(p, 'ssh_connection', 'control_path_dir', 'ANSIBLE_SSH_CONTROL_PATH_DIR', u'~/.ansible/cp')\nANSIBLE_SSH_PIPELINING         = get_config(p, 'ssh_connection', 'pipelining', 'ANSIBLE_SSH_PIPELINING', False, value_type='boolean')\nANSIBLE_SSH_RETRIES            = get_config(p, 'ssh_connection', 'retries', 'ANSIBLE_SSH_RETRIES', 0, value_type='integer')\nANSIBLE_SSH_EXECUTABLE         = get_config(p, 'ssh_connection', 'ssh_executable', 'ANSIBLE_SSH_EXECUTABLE', 'ssh')\nPARAMIKO_RECORD_HOST_KEYS      = get_config(p, 'paramiko_connection', 'record_host_keys', 'ANSIBLE_PARAMIKO_RECORD_HOST_KEYS', True, value_type='boolean')\nPARAMIKO_HOST_KEY_AUTO_ADD     = get_config(p, 'paramiko_connection', 'host_key_auto_add', 'ANSIBLE_PARAMIKO_HOST_KEY_AUTO_ADD', False, value_type='boolean')\nPARAMIKO_PROXY_COMMAND         = get_config(p, 'paramiko_connection', 'proxy_command', 'ANSIBLE_PARAMIKO_PROXY_COMMAND', None)\nPARAMIKO_LOOK_FOR_KEYS         = get_config(p, 'paramiko_connection', 'look_for_keys', 'ANSIBLE_PARAMIKO_LOOK_FOR_KEYS', True, value_type='boolean')\nPERSISTENT_CONNECT_TIMEOUT     = get_config(p, 'persistent_connection', 'connect_timeout', 'ANSIBLE_PERSISTENT_CONNECT_TIMEOUT', 30, value_type='integer')\nPERSISTENT_CONNECT_RETRIES     = get_config(p, 'persistent_connection', 'connect_retries', 'ANSIBLE_PERSISTENT_CONNECT_RETRIES', 30, value_type='integer')\nPERSISTENT_CONNECT_INTERVAL    = get_config(p, 'persistent_connection', 'connect_interval', 'ANSIBLE_PERSISTENT_CONNECT_INTERVAL', 1, value_type='integer')\n\n# obsolete -- will be formally removed\nACCELERATE_PORT                = get_config(p, 'accelerate', 'accelerate_port', 'ACCELERATE_PORT', 5099, value_type='integer')\nACCELERATE_TIMEOUT             = get_config(p, 'accelerate', 'accelerate_timeout', 'ACCELERATE_TIMEOUT', 30, value_type='integer')\nACCELERATE_CONNECT_TIMEOUT     = get_config(p, 'accelerate', 'accelerate_connect_timeout', 'ACCELERATE_CONNECT_TIMEOUT', 1.0, value_type='float')\nACCELERATE_DAEMON_TIMEOUT      = get_config(p, 'accelerate', 'accelerate_daemon_timeout', 'ACCELERATE_DAEMON_TIMEOUT', 30, value_type='integer')\nACCELERATE_KEYS_DIR            = get_config(p, 'accelerate', 'accelerate_keys_dir', 'ACCELERATE_KEYS_DIR', '~/.fireball.keys')\nACCELERATE_KEYS_DIR_PERMS      = get_config(p, 'accelerate', 'accelerate_keys_dir_perms', 'ACCELERATE_KEYS_DIR_PERMS', '700')\nACCELERATE_KEYS_FILE_PERMS     = get_config(p, 'accelerate', 'accelerate_keys_file_perms', 'ACCELERATE_KEYS_FILE_PERMS', '600')\nACCELERATE_MULTI_KEY           = get_config(p, 'accelerate', 'accelerate_multi_key', 'ACCELERATE_MULTI_KEY', False, value_type='boolean')\nPARAMIKO_PTY                   = get_config(p, 'paramiko_connection', 'pty', 'ANSIBLE_PARAMIKO_PTY', True, value_type='boolean')\n\n# galaxy related\nGALAXY_SERVER                  = get_config(p, 'galaxy', 'server', 'ANSIBLE_GALAXY_SERVER', 'https://galaxy.ansible.com')\nGALAXY_IGNORE_CERTS            = get_config(p, 'galaxy', 'ignore_certs', 'ANSIBLE_GALAXY_IGNORE', False, value_type='boolean')\n# this can be configured to blacklist SCMS but cannot add new ones unless the code is also updated\nGALAXY_SCMS                    = get_config(p, 'galaxy', 'scms', 'ANSIBLE_GALAXY_SCMS', 'git, hg', value_type='list')\nGALAXY_ROLE_SKELETON = get_config(p, 'galaxy', 'role_skeleton', 'ANSIBLE_GALAXY_ROLE_SKELETON', None, value_type='path')\nGALAXY_ROLE_SKELETON_IGNORE = get_config(p, 'galaxy', 'role_skeleton_ignore', 'ANSIBLE_GALAXY_ROLE_SKELETON_IGNORE', ['^.git$', '^.*/.git_keep$'],\n                                         value_type='list')\n\nSTRING_TYPE_FILTERS = get_config(p, 'jinja2', 'dont_type_filters', 'ANSIBLE_STRING_TYPE_FILTERS',\n                                 ['string', 'to_json', 'to_nice_json', 'to_yaml', 'ppretty', 'json'], value_type='list' )\n\n# colors\nCOLOR_HIGHLIGHT   = get_config(p, 'colors', 'highlight', 'ANSIBLE_COLOR_HIGHLIGHT', 'white')\nCOLOR_VERBOSE     = get_config(p, 'colors', 'verbose', 'ANSIBLE_COLOR_VERBOSE', 'blue')\nCOLOR_WARN        = get_config(p, 'colors', 'warn', 'ANSIBLE_COLOR_WARN', 'bright purple')\nCOLOR_ERROR       = get_config(p, 'colors', 'error', 'ANSIBLE_COLOR_ERROR', 'red')\nCOLOR_DEBUG       = get_config(p, 'colors', 'debug', 'ANSIBLE_COLOR_DEBUG', 'dark gray')\nCOLOR_DEPRECATE   = get_config(p, 'colors', 'deprecate', 'ANSIBLE_COLOR_DEPRECATE', 'purple')\nCOLOR_SKIP        = get_config(p, 'colors', 'skip', 'ANSIBLE_COLOR_SKIP', 'cyan')\nCOLOR_UNREACHABLE = get_config(p, 'colors', 'unreachable', 'ANSIBLE_COLOR_UNREACHABLE', 'bright red')\nCOLOR_OK          = get_config(p, 'colors', 'ok', 'ANSIBLE_COLOR_OK', 'green')\nCOLOR_CHANGED     = get_config(p, 'colors', 'changed', 'ANSIBLE_COLOR_CHANGED', 'yellow')\nCOLOR_DIFF_ADD    = get_config(p, 'colors', 'diff_add', 'ANSIBLE_COLOR_DIFF_ADD', 'green')\nCOLOR_DIFF_REMOVE = get_config(p, 'colors', 'diff_remove', 'ANSIBLE_COLOR_DIFF_REMOVE', 'red')\nCOLOR_DIFF_LINES  = get_config(p, 'colors', 'diff_lines', 'ANSIBLE_COLOR_DIFF_LINES', 'cyan')\n\n# diff\nDIFF_CONTEXT = get_config(p, 'diff', 'context', 'ANSIBLE_DIFF_CONTEXT', 3, value_type='integer')\nDIFF_ALWAYS = get_config(p, 'diff', 'always', 'ANSIBLE_DIFF_ALWAYS', False, value_type='bool')\n\n# non-configurable things\nMODULE_REQUIRE_ARGS       = ['command', 'win_command', 'shell', 'win_shell', 'raw', 'script']\nMODULE_NO_JSON            = ['command', 'win_command', 'shell', 'win_shell', 'raw']\nDEFAULT_BECOME_PASS       = None\nDEFAULT_PASSWORD_CHARS = to_text(ascii_letters + digits + \".,:-_\", errors='strict')  # characters included in auto-generated passwords\nDEFAULT_SUDO_PASS         = None\nDEFAULT_REMOTE_PASS       = None\nDEFAULT_SUBSET            = None\nDEFAULT_SU_PASS           = None\nVAULT_VERSION_MIN         = 1.0\nVAULT_VERSION_MAX         = 1.0\nTREE_DIR                  = None\nLOCALHOST                 = frozenset(['127.0.0.1', 'localhost', '::1'])\n# module search\nBLACKLIST_EXTS = ('.pyc', '.swp', '.bak', '~', '.rpm', '.md', '.txt')\nIGNORE_FILES = [\"COPYING\", \"CONTRIBUTING\", \"LICENSE\", \"README\", \"VERSION\", \"GUIDELINES\"]\nINTERNAL_RESULT_KEYS      = ['add_host', 'add_group']\nRESTRICTED_RESULT_KEYS    = ['ansible_rsync_path', 'ansible_playbook_python']\n\n", "# (c) 2012-2014, Michael DeHaan <michael.dehaan@gmail.com>\n#\n# This file is part of Ansible\n#\n# Ansible is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# Ansible is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.\n\n# Make coding more python3-ish\nfrom __future__ import (absolute_import, division, print_function)\n__metaclass__ = type\n\nimport ast\nimport contextlib\nimport datetime\nimport os\nimport pwd\nimport re\nimport time\n\nfrom io import StringIO\nfrom numbers import Number\n\ntry:\n    from hashlib import sha1\nexcept ImportError:\n    from sha import sha as sha1\n\nfrom jinja2 import Environment\nfrom jinja2.loaders import FileSystemLoader\nfrom jinja2.exceptions import TemplateSyntaxError, UndefinedError\nfrom jinja2.utils import concat as j2_concat\nfrom jinja2.runtime import Context, StrictUndefined\n\nfrom ansible import constants as C\nfrom ansible.errors import AnsibleError, AnsibleFilterError, AnsibleUndefinedVariable\nfrom ansible.module_utils.six import string_types, text_type\nfrom ansible.module_utils._text import to_native, to_text, to_bytes\nfrom ansible.plugins import filter_loader, lookup_loader, test_loader\nfrom ansible.template.safe_eval import safe_eval\nfrom ansible.template.template import AnsibleJ2Template\nfrom ansible.template.vars import AnsibleJ2Vars\nfrom ansible.utils.unsafe_proxy import UnsafeProxy, wrap_var\n\ntry:\n    from __main__ import display\nexcept ImportError:\n    from ansible.utils.display import Display\n    display = Display()\n\n\n__all__ = ['Templar', 'generate_ansible_template_vars']\n\n# A regex for checking to see if a variable we're trying to\n# expand is just a single variable name.\n\n# Primitive Types which we don't want Jinja to convert to strings.\nNON_TEMPLATED_TYPES = ( bool, Number )\n\nJINJA2_OVERRIDE = '#jinja2:'\n\n\ndef generate_ansible_template_vars(path):\n\n    b_path = to_bytes(path)\n    try:\n        template_uid = pwd.getpwuid(os.stat(b_path).st_uid).pw_name\n    except:\n        template_uid = os.stat(b_path).st_uid\n\n    temp_vars = {}\n    temp_vars['template_host']     = os.uname()[1]\n    temp_vars['template_path']     = b_path\n    temp_vars['template_mtime']    = datetime.datetime.fromtimestamp(os.path.getmtime(b_path))\n    temp_vars['template_uid']      = template_uid\n    temp_vars['template_fullpath'] = os.path.abspath(path)\n    temp_vars['template_run_date'] = datetime.datetime.now()\n\n    managed_default = C.DEFAULT_MANAGED_STR\n    managed_str = managed_default.format(\n        host = temp_vars['template_host'],\n        uid  = temp_vars['template_uid'],\n        file = temp_vars['template_path'],\n    )\n    temp_vars['ansible_managed'] = time.strftime( managed_str, time.localtime(os.path.getmtime(b_path)))\n\n    return temp_vars\n\n\ndef _escape_backslashes(data, jinja_env):\n    \"\"\"Double backslashes within jinja2 expressions\n\n    A user may enter something like this in a playbook::\n\n      debug:\n        msg: \"Test Case 1\\\\3; {{ test1_name | regex_replace('^(.*)_name$', '\\\\1')}}\"\n\n    The string inside of the {{ gets interpreted multiple times First by yaml.\n    Then by python.  And finally by jinja2 as part of it's variable.  Because\n    it is processed by both python and jinja2, the backslash escaped\n    characters get unescaped twice.  This means that we'd normally have to use\n    four backslashes to escape that.  This is painful for playbook authors as\n    they have to remember different rules for inside vs outside of a jinja2\n    expression (The backslashes outside of the \"{{ }}\" only get processed by\n    yaml and python.  So they only need to be escaped once).  The following\n    code fixes this by automatically performing the extra quoting of\n    backslashes inside of a jinja2 expression.\n\n    \"\"\"\n    if '\\\\' in data and '{{' in data:\n        new_data = []\n        d2 = jinja_env.preprocess(data)\n        in_var = False\n\n        for token in jinja_env.lex(d2):\n            if token[1] == 'variable_begin':\n                in_var = True\n                new_data.append(token[2])\n            elif token[1] == 'variable_end':\n                in_var = False\n                new_data.append(token[2])\n            elif in_var and token[1] == 'string':\n                # Double backslashes only if we're inside of a jinja2 variable\n                new_data.append(token[2].replace('\\\\','\\\\\\\\'))\n            else:\n                new_data.append(token[2])\n\n        data = ''.join(new_data)\n\n    return data\n\n\ndef _count_newlines_from_end(in_str):\n    '''\n    Counts the number of newlines at the end of a string. This is used during\n    the jinja2 templating to ensure the count matches the input, since some newlines\n    may be thrown away during the templating.\n    '''\n\n    try:\n        i = len(in_str)\n        j = i -1\n        while in_str[j] == '\\n':\n            j -= 1\n        return i - 1 - j\n    except IndexError:\n        # Uncommon cases: zero length string and string containing only newlines\n        return i\n\nclass AnsibleContext(Context):\n    '''\n    A custom context, which intercepts resolve() calls and sets a flag\n    internally if any variable lookup returns an AnsibleUnsafe value. This\n    flag is checked post-templating, and (when set) will result in the\n    final templated result being wrapped via UnsafeProxy.\n    '''\n    def __init__(self, *args, **kwargs):\n        super(AnsibleContext, self).__init__(*args, **kwargs)\n        self.unsafe = False\n\n    def _is_unsafe(self, val):\n        '''\n        Our helper function, which will also recursively check dict and\n        list entries due to the fact that they may be repr'd and contain\n        a key or value which contains jinja2 syntax and would otherwise\n        lose the AnsibleUnsafe value.\n        '''\n        if isinstance(val, dict):\n            for key in val.keys():\n                if self._is_unsafe(val[key]):\n                    return True\n        elif isinstance(val, list):\n            for item in val:\n                if self._is_unsafe(item):\n                    return True\n        elif isinstance(val, string_types) and hasattr(val, '__UNSAFE__'):\n            return True\n        return False\n\n    def _update_unsafe(self, val):\n        if val is not None and not self.unsafe and self._is_unsafe(val):\n            self.unsafe = True\n\n    def resolve(self, key):\n        '''\n        The intercepted resolve(), which uses the helper above to set the\n        internal flag whenever an unsafe variable value is returned.\n        '''\n        val = super(AnsibleContext, self).resolve(key)\n        self._update_unsafe(val)\n        return val\n\n    def resolve_or_missing(self, key):\n        val = super(AnsibleContext, self).resolve_or_missing(key)\n        self._update_unsafe(val)\n        return val\n\nclass AnsibleEnvironment(Environment):\n    '''\n    Our custom environment, which simply allows us to override the class-level\n    values for the Template and Context classes used by jinja2 internally.\n    '''\n    context_class = AnsibleContext\n    template_class = AnsibleJ2Template\n\nclass Templar:\n    '''\n    The main class for templating, with the main entry-point of template().\n    '''\n\n    def __init__(self, loader, shared_loader_obj=None, variables=dict()):\n        self._loader              = loader\n        self._filters             = None\n        self._tests               = None\n        self._available_variables = variables\n        self._cached_result       = {}\n\n        if loader:\n            self._basedir = loader.get_basedir()\n        else:\n            self._basedir = './'\n\n        if shared_loader_obj:\n            self._filter_loader = getattr(shared_loader_obj, 'filter_loader')\n            self._test_loader   = getattr(shared_loader_obj, 'test_loader')\n            self._lookup_loader = getattr(shared_loader_obj, 'lookup_loader')\n        else:\n            self._filter_loader = filter_loader\n            self._test_loader   = test_loader\n            self._lookup_loader = lookup_loader\n\n        # flags to determine whether certain failures during templating\n        # should result in fatal errors being raised\n        self._fail_on_lookup_errors    = True\n        self._fail_on_filter_errors    = True\n        self._fail_on_undefined_errors = C.DEFAULT_UNDEFINED_VAR_BEHAVIOR\n\n        self.environment = AnsibleEnvironment(\n            trim_blocks=True,\n            undefined=StrictUndefined,\n            extensions=self._get_extensions(),\n            finalize=self._finalize,\n            loader=FileSystemLoader(self._basedir),\n        )\n\n        # the current rendering context under which the templar class is working\n        self.cur_context = None\n\n        self.SINGLE_VAR = re.compile(r\"^%s\\s*(\\w*)\\s*%s$\" % (self.environment.variable_start_string, self.environment.variable_end_string))\n\n        self._clean_regex   = re.compile(r'(?:%s|%s|%s|%s)' % (\n            self.environment.variable_start_string,\n            self.environment.block_start_string,\n            self.environment.block_end_string,\n            self.environment.variable_end_string\n        ))\n        self._no_type_regex = re.compile(r'.*\\|\\s*(?:%s)\\s*(?:%s)?$' % ('|'.join(C.STRING_TYPE_FILTERS), self.environment.variable_end_string))\n\n    def _get_filters(self):\n        '''\n        Returns filter plugins, after loading and caching them if need be\n        '''\n\n        if self._filters is not None:\n            return self._filters.copy()\n\n        plugins = [x for x in self._filter_loader.all()]\n\n        self._filters = dict()\n        for fp in plugins:\n            self._filters.update(fp.filters())\n        self._filters.update(self._get_tests())\n\n        return self._filters.copy()\n\n    def _get_tests(self):\n        '''\n        Returns tests plugins, after loading and caching them if need be\n        '''\n\n        if self._tests is not None:\n            return self._tests.copy()\n\n        plugins = [x for x in self._test_loader.all()]\n\n        self._tests = dict()\n        for fp in plugins:\n            self._tests.update(fp.tests())\n\n        return self._tests.copy()\n\n    def _get_extensions(self):\n        '''\n        Return jinja2 extensions to load.\n\n        If some extensions are set via jinja_extensions in ansible.cfg, we try\n        to load them with the jinja environment.\n        '''\n\n        jinja_exts = []\n        if C.DEFAULT_JINJA2_EXTENSIONS:\n            # make sure the configuration directive doesn't contain spaces\n            # and split extensions in an array\n            jinja_exts = C.DEFAULT_JINJA2_EXTENSIONS.replace(\" \", \"\").split(',')\n\n        return jinja_exts\n\n    def _clean_data(self, orig_data):\n        ''' remove jinja2 template tags from data '''\n\n        if hasattr(orig_data, '__ENCRYPTED__'):\n            ret = orig_data\n\n        elif isinstance(orig_data, list):\n            clean_list = []\n            for list_item in orig_data:\n                clean_list.append(self._clean_data(list_item))\n            ret = clean_list\n\n        elif isinstance(orig_data, dict):\n            clean_dict = {}\n            for k in orig_data:\n                clean_dict[self._clean_data(k)] =  self._clean_data(orig_data[k])\n            ret = clean_dict\n\n        elif isinstance(orig_data, string_types):\n            # This will error with str data (needs unicode), but all strings should already be converted already.\n            # If you get exception, the problem is at the data origin, do not add to_text here.\n            with contextlib.closing(StringIO(orig_data)) as data:\n                # these variables keep track of opening block locations, as we only\n                # want to replace matched pairs of print/block tags\n                print_openings = []\n                block_openings = []\n                for mo in self._clean_regex.finditer(orig_data):\n                    token = mo.group(0)\n                    token_start = mo.start(0)\n\n                    if token[0] == self.environment.variable_start_string[0]:\n                        if token == self.environment.block_start_string:\n                            block_openings.append(token_start)\n                        elif token == self.environment.variable_start_string:\n                            print_openings.append(token_start)\n\n                    elif token[1] == self.environment.variable_end_string[1]:\n                        prev_idx = None\n                        if token == self.environment.block_end_string and block_openings:\n                            prev_idx = block_openings.pop()\n                        elif token == self.environment.variable_end_string and print_openings:\n                            prev_idx = print_openings.pop()\n\n                        if prev_idx is not None:\n                            # replace the opening\n                            data.seek(prev_idx, os.SEEK_SET)\n                            data.write(to_text(self.environment.comment_start_string))\n                            # replace the closing\n                            data.seek(token_start, os.SEEK_SET)\n                            data.write(to_text(self.environment.comment_end_string))\n\n                    else:\n                        raise AnsibleError(\"Error while cleaning data for safety: unhandled regex match\")\n\n                ret = data.getvalue()\n        else:\n            ret = orig_data\n\n        return ret\n\n    def set_available_variables(self, variables):\n        '''\n        Sets the list of template variables this Templar instance will use\n        to template things, so we don't have to pass them around between\n        internal methods. We also clear the template cache here, as the variables\n        are being changed.\n        '''\n\n        assert isinstance(variables, dict)\n        self._available_variables = variables\n        self._cached_result       = {}\n\n    def template(self, variable, convert_bare=False, preserve_trailing_newlines=True, escape_backslashes=True, fail_on_undefined=None, overrides=None,\n                 convert_data=True, static_vars=[''], cache=True, bare_deprecated=True, disable_lookups=False):\n        '''\n        Templates (possibly recursively) any given data as input. If convert_bare is\n        set to True, the given data will be wrapped as a jinja2 variable ('{{foo}}')\n        before being sent through the template engine.\n        '''\n\n        # Don't template unsafe variables, just return them.\n        if hasattr(variable, '__UNSAFE__'):\n            return variable\n\n        if fail_on_undefined is None:\n            fail_on_undefined = self._fail_on_undefined_errors\n\n        try:\n            if convert_bare:\n                variable = self._convert_bare_variable(variable, bare_deprecated=bare_deprecated)\n\n            if isinstance(variable, string_types):\n                result = variable\n\n                if self._contains_vars(variable):\n                    # Check to see if the string we are trying to render is just referencing a single\n                    # var.  In this case we don't want to accidentally change the type of the variable\n                    # to a string by using the jinja template renderer. We just want to pass it.\n                    only_one = self.SINGLE_VAR.match(variable)\n                    if only_one:\n                        var_name = only_one.group(1)\n                        if var_name in self._available_variables:\n                            resolved_val = self._available_variables[var_name]\n                            if isinstance(resolved_val, NON_TEMPLATED_TYPES):\n                                return resolved_val\n                            elif resolved_val is None:\n                                return C.DEFAULT_NULL_REPRESENTATION\n\n                    # Using a cache in order to prevent template calls with already templated variables\n                    sha1_hash = None\n                    if cache:\n                        variable_hash = sha1(text_type(variable).encode('utf-8'))\n                        options_hash = sha1(\n                            (\n                                text_type(preserve_trailing_newlines) +\n                                text_type(escape_backslashes) +\n                                text_type(fail_on_undefined) +\n                                text_type(overrides)\n                            ).encode('utf-8')\n                        )\n                        sha1_hash = variable_hash.hexdigest() + options_hash.hexdigest()\n                    if cache and sha1_hash in self._cached_result:\n                        result = self._cached_result[sha1_hash]\n                    else:\n                        result = self.do_template(\n                            variable,\n                            preserve_trailing_newlines=preserve_trailing_newlines,\n                            escape_backslashes=escape_backslashes,\n                            fail_on_undefined=fail_on_undefined,\n                            overrides=overrides,\n                            disable_lookups=disable_lookups,\n                        )\n\n                        unsafe = hasattr(result, '__UNSAFE__')\n                        if convert_data and not self._no_type_regex.match(variable):\n                            # if this looks like a dictionary or list, convert it to such using the safe_eval method\n                            if (result.startswith(\"{\") and not result.startswith(self.environment.variable_start_string)) or \\\n                                    result.startswith(\"[\") or result in (\"True\", \"False\"):\n                                eval_results = safe_eval(result, locals=self._available_variables, include_exceptions=True)\n                                if eval_results[1] is None:\n                                    result = eval_results[0]\n                                    if unsafe:\n                                        result = wrap_var(result)\n                                else:\n                                    # FIXME: if the safe_eval raised an error, should we do something with it?\n                                    pass\n\n                        # we only cache in the case where we have a single variable\n                        # name, to make sure we're not putting things which may otherwise\n                        # be dynamic in the cache (filters, lookups, etc.)\n                        if cache:\n                            self._cached_result[sha1_hash] = result\n\n                return result\n\n            elif isinstance(variable, (list, tuple)):\n                return [self.template(\n                    v,\n                    preserve_trailing_newlines=preserve_trailing_newlines,\n                    fail_on_undefined=fail_on_undefined,\n                    overrides=overrides,\n                    disable_lookups=disable_lookups,\n                    ) for v in variable]\n            elif isinstance(variable, dict):\n                d = {}\n                # we don't use iteritems() here to avoid problems if the underlying dict\n                # changes sizes due to the templating, which can happen with hostvars\n                for k in variable.keys():\n                    if k not in static_vars:\n                        d[k] = self.template(\n                            variable[k],\n                            preserve_trailing_newlines=preserve_trailing_newlines,\n                            fail_on_undefined=fail_on_undefined,\n                            overrides=overrides,\n                            disable_lookups=disable_lookups,\n                            )\n                    else:\n                        d[k] = variable[k]\n                return d\n            else:\n                return variable\n\n        except AnsibleFilterError:\n            if self._fail_on_filter_errors:\n                raise\n            else:\n                return variable\n\n    def is_template(self, data):\n        ''' lets us know if data has a template'''\n        if isinstance(data, string_types):\n            try:\n                new = self.do_template(data, fail_on_undefined=True)\n            except (AnsibleUndefinedVariable, UndefinedError):\n                return True\n            except:\n                return False\n            return (new != data)\n        elif isinstance(data, (list, tuple)):\n            for v in data:\n                if self.is_template(v):\n                    return True\n        elif isinstance(data, dict):\n            for k in data:\n                if self.is_template(k) or self.is_template(data[k]):\n                    return True\n        return False\n\n    def templatable(self, data):\n        '''\n        returns True if the data can be templated w/o errors\n        '''\n        templatable = True\n        try:\n            self.template(data)\n        except:\n            templatable = False\n        return templatable\n\n    def _contains_vars(self, data):\n        '''\n        returns True if the data contains a variable pattern\n        '''\n        if isinstance(data, string_types):\n            for marker in (self.environment.block_start_string, self.environment.variable_start_string, self.environment.comment_start_string):\n                if marker in data:\n                    return True\n        return False\n\n    def _convert_bare_variable(self, variable, bare_deprecated):\n        '''\n        Wraps a bare string, which may have an attribute portion (ie. foo.bar)\n        in jinja2 variable braces so that it is evaluated properly.\n        '''\n\n        if isinstance(variable, string_types):\n            contains_filters = \"|\" in variable\n            first_part = variable.split(\"|\")[0].split(\".\")[0].split(\"[\")[0]\n            if (contains_filters or first_part in self._available_variables) and self.environment.variable_start_string not in variable:\n                if bare_deprecated:\n                    display.deprecated(\"Using bare variables is deprecated.\"\n                            \" Update your playbooks so that the environment value uses the full variable syntax ('%s%s%s')\" %\n                            (self.environment.variable_start_string, variable, self.environment.variable_end_string), version='2.7')\n                return \"%s%s%s\" % (self.environment.variable_start_string, variable, self.environment.variable_end_string)\n\n        # the variable didn't meet the conditions to be converted,\n        # so just return it as-is\n        return variable\n\n    def _finalize(self, thing):\n        '''\n        A custom finalize method for jinja2, which prevents None from being returned\n        '''\n        return thing if thing is not None else ''\n\n    def _fail_lookup(self, name, *args, **kwargs):\n        raise AnsibleError(\"The lookup `%s` was found, however lookups were disabled from templating\" % name)\n\n    def _lookup(self, name, *args, **kwargs):\n        instance = self._lookup_loader.get(name.lower(), loader=self._loader, templar=self)\n\n        if instance is not None:\n            wantlist = kwargs.pop('wantlist', False)\n            allow_unsafe = kwargs.pop('allow_unsafe', C.DEFAULT_ALLOW_UNSAFE_LOOKUPS)\n\n            from ansible.utils.listify import listify_lookup_plugin_terms\n            loop_terms = listify_lookup_plugin_terms(terms=args, templar=self, loader=self._loader, fail_on_undefined=True, convert_bare=False)\n            # safely catch run failures per #5059\n            try:\n                ran = instance.run(loop_terms, variables=self._available_variables, **kwargs)\n            except (AnsibleUndefinedVariable, UndefinedError) as e:\n                raise AnsibleUndefinedVariable(e)\n            except Exception as e:\n                if self._fail_on_lookup_errors:\n                    raise AnsibleError(\"An unhandled exception occurred while running the lookup plugin '%s'. Error was a %s, \"\n                                       \"original message: %s\" % (name, type(e), e))\n                ran = None\n\n            if ran and not allow_unsafe:\n                from ansible.vars.unsafe_proxy import UnsafeProxy, wrap_var\n                if wantlist:\n                    ran = wrap_var(ran)\n                else:\n                    try:\n                        ran = UnsafeProxy(\",\".join(ran))\n                    except TypeError:\n                        if isinstance(ran, list) and len(ran) == 1:\n                            ran = wrap_var(ran[0])\n                        else:\n                            ran = wrap_var(ran)\n\n                if self.cur_context:\n                    self.cur_context.unsafe = True\n            return ran\n        else:\n            raise AnsibleError(\"lookup plugin (%s) not found\" % name)\n\n    def do_template(self, data, preserve_trailing_newlines=True, escape_backslashes=True, fail_on_undefined=None, overrides=None, disable_lookups=False):\n        # For preserving the number of input newlines in the output (used\n        # later in this method)\n        data_newlines = _count_newlines_from_end(data)\n\n        if fail_on_undefined is None:\n            fail_on_undefined = self._fail_on_undefined_errors\n\n        try:\n            # allows template header overrides to change jinja2 options.\n            if overrides is None:\n                myenv = self.environment.overlay()\n            else:\n                myenv = self.environment.overlay(overrides)\n\n            # Get jinja env overrides from template\n            if data.startswith(JINJA2_OVERRIDE):\n                eol = data.find('\\n')\n                line = data[len(JINJA2_OVERRIDE):eol]\n                data = data[eol+1:]\n                for pair in line.split(','):\n                    (key,val) = pair.split(':')\n                    key = key.strip()\n                    setattr(myenv, key, ast.literal_eval(val.strip()))\n\n            # Adds Ansible custom filters and tests\n            myenv.filters.update(self._get_filters())\n            myenv.tests.update(self._get_tests())\n\n            if escape_backslashes:\n                # Allow users to specify backslashes in playbooks as \"\\\\\" instead of as \"\\\\\\\\\".\n                data = _escape_backslashes(data, myenv)\n\n            try:\n                t = myenv.from_string(data)\n            except TemplateSyntaxError as e:\n                raise AnsibleError(\"template error while templating string: %s. String: %s\" % (to_native(e), to_native(data)))\n            except Exception as e:\n                if 'recursion' in to_native(e):\n                    raise AnsibleError(\"recursive loop detected in template string: %s\" % to_native(data))\n                else:\n                    return data\n\n            if disable_lookups:\n                t.globals['lookup'] = self._fail_lookup\n            else:\n                t.globals['lookup'] = self._lookup\n\n            t.globals['finalize'] = self._finalize\n\n            jvars = AnsibleJ2Vars(self, t.globals)\n\n            self.cur_context = new_context = t.new_context(jvars, shared=True)\n            rf = t.root_render_func(new_context)\n\n            try:\n                res = j2_concat(rf)\n                if new_context.unsafe:\n                    res = wrap_var(res)\n            except TypeError as te:\n                if 'StrictUndefined' in to_native(te):\n                    errmsg  = \"Unable to look up a name or access an attribute in template string (%s).\\n\" % to_native(data)\n                    errmsg += \"Make sure your variable name does not contain invalid characters like '-': %s\" % to_native(te)\n                    raise AnsibleUndefinedVariable(errmsg)\n                else:\n                    display.debug(\"failing because of a type error, template data is: %s\" % to_native(data))\n                    raise AnsibleError(\"Unexpected templating type error occurred on (%s): %s\" % (to_native(data),to_native(te)))\n\n            if preserve_trailing_newlines:\n                # The low level calls above do not preserve the newline\n                # characters at the end of the input data, so we use the\n                # calculate the difference in newlines and append them\n                # to the resulting output for parity\n                #\n                # jinja2 added a keep_trailing_newline option in 2.7 when\n                # creating an Environment.  That would let us make this code\n                # better (remove a single newline if\n                # preserve_trailing_newlines is False).  Once we can depend on\n                # that version being present, modify our code to set that when\n                # initializing self.environment and remove a single trailing\n                # newline here if preserve_newlines is False.\n                res_newlines = _count_newlines_from_end(res)\n                if data_newlines > res_newlines:\n                    res += self.environment.newline_sequence * (data_newlines - res_newlines)\n            return res\n        except (UndefinedError, AnsibleUndefinedVariable) as e:\n            if fail_on_undefined:\n                raise AnsibleUndefinedVariable(e)\n            else:\n                #TODO: return warning about undefined var\n                return data\n\n    # for backwards compatibility in case anyone is using old private method directly\n    _do_template = do_template\n"], "filenames": ["docs/docsite/rst/intro_configuration.rst", "examples/ansible.cfg", "lib/ansible/constants.py", "lib/ansible/template/__init__.py"], "buggy_code_start_loc": [86, 285, 238, 253], "buggy_code_end_loc": [86, 295, 238, 660], "fixing_code_start_loc": [87, 285, 239, 254], "fixing_code_end_loc": [101, 302, 240, 667], "type": "CWE-20", "message": "Ansible before versions 2.3.1.0 and 2.4.0.0 fails to properly mark lookup-plugin results as unsafe. If an attacker could control the results of lookup() calls, they could inject Unicode strings to be parsed by the jinja2 templating system, resulting in code execution. By default, the jinja2 templating language is now marked as 'unsafe' and is not evaluated.", "other": {"cve": {"id": "CVE-2017-7481", "sourceIdentifier": "secalert@redhat.com", "published": "2018-07-19T13:29:00.340", "lastModified": "2021-08-04T17:15:29.523", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Ansible before versions 2.3.1.0 and 2.4.0.0 fails to properly mark lookup-plugin results as unsafe. If an attacker could control the results of lookup() calls, they could inject Unicode strings to be parsed by the jinja2 templating system, resulting in code execution. By default, the jinja2 templating language is now marked as 'unsafe' and is not evaluated."}, {"lang": "es", "value": "Ansible en versiones anteriores a la 2.3.1.0 y 2.4.0.0 no marca correctamente los resultados del plugin lookup como no seguros. Si un atacante pudiese controlar los resultados de las llamadas lookup(), podr\u00edan inyectar cadenas Unicode para que sean analizadas por el sistema de plantillas jinja2, resultando en una ejecuci\u00f3n de c\u00f3digo. Por defecto, el lenguaje de plantillas jinja2 se marca ahora como \"no seguro\" y no se eval\u00faa."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "secalert@redhat.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:N/UI:R/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 5.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.6, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "secalert@redhat.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:openshift_container_platform:3.3:*:*:*:*:*:*:*", "matchCriteriaId": "EA3ADA26-2B9E-4ABA-A224-910BD75CCE00"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:openshift_container_platform:3.4:*:*:*:*:*:*:*", "matchCriteriaId": "67E80045-56E4-4A83-8168-CFED5E55CE45"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:openshift_container_platform:3.5:*:*:*:*:*:*:*", "matchCriteriaId": "E792B5DC-CCD2-4A50-B72F-860A3BFAF165"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:openstack:10:*:*:*:*:*:*:*", "matchCriteriaId": "E722FEF7-58A6-47AD-B1D0-DB0B71B0C7AA"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:openstack:11:*:*:*:*:*:*:*", "matchCriteriaId": "4E9AF77C-5D49-4842-9817-AD710A919073"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:storage_console:2.0:*:*:*:*:*:*:*", "matchCriteriaId": "E916298F-E4F3-49FB-92DA-C92013188C44"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:virtualization:4.1:*:*:*:*:*:*:*", "matchCriteriaId": "03EB0F63-DB24-4240-BC44-C92BAE7EAF42"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:virtualization_manager:4.1:*:*:*:*:*:*:*", "matchCriteriaId": "AF786B57-02C3-48B7-B902-318356B3A3B6"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:gluster_storage:3.2:*:*:*:*:*:*:*", "matchCriteriaId": "518056FB-E049-45AF-876A-C1682118E29D"}]}, {"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": false, "criteria": "cpe:2.3:o:redhat:enterprise_linux:7.0:*:*:*:*:*:*:*", "matchCriteriaId": "142AD0DD-4CF3-4D74-9442-459CE3347E3A"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redhat:ansible_engine:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.3.1.0", "matchCriteriaId": "5F675D17-E806-4C38-8A36-49032C25ECAF"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redhat:ansible_engine:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3.2.0", "versionEndExcluding": "2.4.0.0", "matchCriteriaId": "3885EAB7-4ED7-493B-8124-A4434312C75B"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:16.04:*:*:*:lts:*:*:*", "matchCriteriaId": "F7016A2A-8365-4F1A-89A2-7A19F2BCAE5B"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:18.04:*:*:*:lts:*:*:*", "matchCriteriaId": "23A7C53F-B80F-4E6A-AFA9-58EEA84BE11D"}, {"vulnerable": true, "criteria": "cpe:2.3:o:canonical:ubuntu_linux:19.04:*:*:*:*:*:*:*", "matchCriteriaId": "CD783B0C-9246-47D9-A937-6144FE8BFF0F"}]}]}, {"operator": "AND", "nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/98492", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:1244", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:1334", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:1476", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:1499", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:1599", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:2524", "source": "secalert@redhat.com", "tags": ["Vendor Advisory"]}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=CVE-2017-7481", "source": "secalert@redhat.com", "tags": ["Issue Tracking", "Patch", "Vendor Advisory"]}, {"url": "https://github.com/ansible/ansible/commit/ed56f51f185a1ffd7ea57130d260098686fcc7c2", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2021/01/msg00023.html", "source": "secalert@redhat.com", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://usn.ubuntu.com/4072-1/", "source": "secalert@redhat.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ansible/ansible/commit/ed56f51f185a1ffd7ea57130d260098686fcc7c2"}}