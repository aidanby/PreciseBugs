{"buggy_code": ["package account\n\nimport \"github.com/kongchuanhujiao/server/internal/app/datahub/internal/memory\"\n\nfunc GetCode(id string) string {\n\treturn memory.Code[id]\n}\n\nfunc WriteCode(id string, code string) {\n\tmemory.Code[id] = code\n}\n\nfunc DeleteCode(id string) {\n\tdelete(memory.Code, id)\n}\n", "package account\n\nimport (\n\t\"github.com/kongchuanhujiao/server/internal/app/datahub/pkg/account\"\n\t\"time\"\n\n\t\"github.com/kongchuanhujiao/server/internal/app/kongchuanhujiao\"\n\t\"github.com/kongchuanhujiao/server/internal/pkg/config\"\n\t\"github.com/kongchuanhujiao/server/internal/pkg/logger\"\n\n\t\"github.com/iris-contrib/middleware/jwt\"\n\t\"go.uber.org/zap\"\n)\n\n// APIs \u8d26\u53f7 APIs\ntype APIs struct{}\n\n// PostCodeReq \u53d1\u9001\u9a8c\u8bc1\u7801 \u8bf7\u6c42\u7ed3\u6784\ntype PostCodeReq struct {\n\tID string // \u6807\u8bc6\u53f7\n}\n\n// PostCode \u53d1\u9001\u9a8c\u8bc1\u7801 APIs\u3002\n// \u8c03\u7528\u65b9\u6cd5\uff1aPOST apis/accounts/code\nfunc (a *APIs) PostCode(v *PostCodeReq) *kongchuanhujiao.Response {\n\tif err := sendCode(v.ID); err != nil {\n\t\treturn kongchuanhujiao.GenerateErrResp(1, err.Error())\n\t}\n\treturn kongchuanhujiao.DefaultSuccResp\n}\n\n// ====================================================================================================================\n\n// PostLoginReq \u767b\u5f55\u9a8c\u8bc1 \u8bf7\u6c42\u7ed3\u6784\ntype PostLoginReq struct {\n\tID   string // \u6807\u8bc6\u53f7\n\tCode string // \u9a8c\u8bc1\u7801\n}\n\n// PostLogin \u767b\u5f55\u9a8c\u8bc1 APIs\u3002\n// \u8c03\u7528\u65b9\u6cd5\uff1aPOST apis/accounts/login\nfunc (a *APIs) PostLogin(v *PostLoginReq) *kongchuanhujiao.Response {\n\n\tif v.Code != account.GetCode(v.ID) || v.Code == \"\" { // FIXME datahub \u9274\u6743\n\t\treturn kongchuanhujiao.GenerateErrResp(1, \"\u9a8c\u8bc1\u7801\u6709\u8bef\")\n\t}\n\n\tnow := time.Now()\n\tt, err := jwt.NewTokenWithClaims(jwt.SigningMethodES256, jwt.MapClaims{\n\t\t\"iss\": config.GetJWTConf().Iss,\n\t\t\"sub\": v.ID,\n\t\t\"exp\": now.AddDate(0, 1, 0).Unix(),\n\t\t\"nbf\": now.Unix(),\n\t\t\"iat\": now.Unix(),\n\t}).SignedString(config.GetJWTConf().Key)\n\tif err != nil {\n\t\tlogger.Error(\"\u751f\u6210 JWT Token \u5931\u8d25\", zap.Error(err))\n\t\treturn kongchuanhujiao.DefaultErrResp\n\t}\n\n\treturn &kongchuanhujiao.Response{Message: t}\n}\n", "package account\n\nimport (\n\t\"errors\"\n\t\"math/rand\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/kongchuanhujiao/server/internal/app/client\"\n\t\"github.com/kongchuanhujiao/server/internal/app/client/message\"\n\t\"github.com/kongchuanhujiao/server/internal/app/datahub/pkg/account\"\n\t\"github.com/kongchuanhujiao/server/internal/pkg/logger\"\n\n\t\"go.uber.org/zap\"\n)\n\n// sendCode \u53d1\u9001\u9a8c\u8bc1\u7801\nfunc sendCode(id string) (err error) {\n\n\ta, err := account.SelectAccount(id, 0)\n\tif err != nil {\n\t\tlogger.Error(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u5931\u8d25\", zap.Error(err))\n\t\treturn\n\t}\n\n\tif len(a) == 0 {\n\t\treturn errors.New(\"\u8d26\u53f7\u4e0d\u5b58\u5728\")\n\t}\n\n\trand.Seed(time.Now().UnixNano())\n\tc := strconv.FormatFloat(rand.Float64(), 'f', -1, 64)[2:6]\n\n\tclient.GetClient().SendMessage(\n\t\tmessage.NewTextMessage(\"\u60a8\u7684\u9a8c\u8bc1\u7801\u662f\uff1a\" + c + \"\uff0c\u8bf7\u52ff\u6cc4\u9732\u7ed9\u4ed6\u4eba\u3002\u6709\u6548\u671f5\u5206\u949f\").\n\t\t\tSetTarget(&message.Target{ID: a[0].QQ}),\n\t)\n\n\taccount.WriteCode(id, c)\n\n\tgo func() {\n\t\ttimer := time.NewTimer(5 * time.Minute)\n\t\tdefer timer.Stop()\n\t\t<-timer.C\n\t\taccount.DeleteCode(id)\n\t}()\n\n\treturn\n}\n"], "fixing_code": ["package account\n\nimport (\n\t\"math/rand\"\n\t\"strconv\"\n\t\"time\"\n\n\t\"github.com/kongchuanhujiao/server/internal/app/datahub/internal/memory\"\n)\n\n// GenerateCode \u5199\u5165\u9a8c\u8bc1\u7801\u8fd4\u56de\u4e00\u4e2a\u9a8c\u8bc1\u7801\nfunc GenerateCode(id string) (c string) {\n\n\trand.Seed(time.Now().UnixNano())\n\tc = strconv.FormatFloat(rand.Float64(), 'f', -1, 64)[2:6]\n\n\tmemory.Code[id] = c\n\n\tgo func() {\n\t\ttimer := time.NewTimer(5 * time.Minute)\n\t\tdefer timer.Stop()\n\t\t<-timer.C\n\t\tdeleteCode(id)\n\t}()\n\n\treturn\n}\n\n// VerifyCode \u9a8c\u8bc1\u9a8c\u8bc1\u7801\nfunc VerifyCode(id string, code string) (ok bool) {\n\tif code == memory.Code[id] {\n\t\tok = true\n\t\tdeleteCode(id)\n\t}\n\treturn\n}\n\n// deleteCode \u5220\u9664\u9a8c\u8bc1\u7801\nfunc deleteCode(id string) { delete(memory.Code, id) }\n", "package account\n\nimport (\n\t\"github.com/kongchuanhujiao/server/internal/app/datahub/pkg/account\"\n\t\"time\"\n\n\t\"github.com/kongchuanhujiao/server/internal/app/kongchuanhujiao\"\n\t\"github.com/kongchuanhujiao/server/internal/pkg/config\"\n\t\"github.com/kongchuanhujiao/server/internal/pkg/logger\"\n\n\t\"github.com/iris-contrib/middleware/jwt\"\n\t\"go.uber.org/zap\"\n)\n\n// APIs \u8d26\u53f7 APIs\ntype APIs struct{}\n\n// PostCodeReq \u53d1\u9001\u9a8c\u8bc1\u7801 \u8bf7\u6c42\u7ed3\u6784\ntype PostCodeReq struct {\n\tID string // \u6807\u8bc6\u53f7\n}\n\n// PostCode \u53d1\u9001\u9a8c\u8bc1\u7801 APIs\u3002\n// \u8c03\u7528\u65b9\u6cd5\uff1aPOST apis/accounts/code\nfunc (a *APIs) PostCode(v *PostCodeReq) *kongchuanhujiao.Response {\n\tif err := sendCode(v.ID); err != nil {\n\t\treturn kongchuanhujiao.GenerateErrResp(1, err.Error())\n\t}\n\treturn kongchuanhujiao.DefaultSuccResp\n}\n\n// ====================================================================================================================\n\n// PostLoginReq \u767b\u5f55\u9a8c\u8bc1 \u8bf7\u6c42\u7ed3\u6784\ntype PostLoginReq struct {\n\tID   string // \u6807\u8bc6\u53f7\n\tCode string // \u9a8c\u8bc1\u7801\n}\n\n// PostLogin \u767b\u5f55\u9a8c\u8bc1 APIs\u3002\n// \u8c03\u7528\u65b9\u6cd5\uff1aPOST apis/accounts/login\nfunc (a *APIs) PostLogin(v *PostLoginReq) *kongchuanhujiao.Response {\n\n\tif account.VerifyCode(v.ID, v.Code) || v.Code == \"\" {\n\t\treturn kongchuanhujiao.GenerateErrResp(1, \"\u9a8c\u8bc1\u7801\u6709\u8bef\")\n\t}\n\n\tnow := time.Now()\n\tt, err := jwt.NewTokenWithClaims(jwt.SigningMethodES256, jwt.MapClaims{\n\t\t\"iss\": config.GetJWTConf().Iss,\n\t\t\"sub\": v.ID,\n\t\t\"exp\": now.AddDate(0, 1, 0).Unix(),\n\t\t\"nbf\": now.Unix(),\n\t\t\"iat\": now.Unix(),\n\t}).SignedString(config.GetJWTConf().Key)\n\tif err != nil {\n\t\tlogger.Error(\"\u751f\u6210 JWT Token \u5931\u8d25\", zap.Error(err))\n\t\treturn kongchuanhujiao.DefaultErrResp\n\t}\n\n\treturn &kongchuanhujiao.Response{Message: t}\n}\n", "package account\n\nimport (\n\t\"errors\"\n\t\"github.com/kongchuanhujiao/server/internal/app/client\"\n\t\"github.com/kongchuanhujiao/server/internal/app/client/message\"\n\t\"github.com/kongchuanhujiao/server/internal/app/datahub/pkg/account\"\n\t\"github.com/kongchuanhujiao/server/internal/pkg/logger\"\n\n\t\"go.uber.org/zap\"\n)\n\n// sendCode \u53d1\u9001\u9a8c\u8bc1\u7801\nfunc sendCode(id string) (err error) {\n\n\ta, err := account.SelectAccount(id, 0)\n\tif err != nil {\n\t\tlogger.Error(\"\u53d1\u9001\u9a8c\u8bc1\u7801\u5931\u8d25\", zap.Error(err))\n\t\treturn\n\t}\n\tif len(a) == 0 {\n\t\treturn errors.New(\"\u8d26\u53f7\u4e0d\u5b58\u5728\")\n\t}\n\n\tclient.GetClient().SendMessage(\n\t\tmessage.NewTextMessage(\"\u60a8\u7684\u9a8c\u8bc1\u7801\u662f\uff1a\" + account.GenerateCode(id) + \"\uff0c\u8bf7\u52ff\u6cc4\u9732\u7ed9\u4ed6\u4eba\u3002\u6709\u6548\u671f5\u5206\u949f\").\n\t\t\tSetTarget(&message.Target{ID: a[0].QQ}),\n\t)\n\n\treturn\n}\n"], "filenames": ["internal/app/datahub/pkg/account/memory.go", "internal/app/kongchuanhujiao/account/apis.go", "internal/app/kongchuanhujiao/account/utils.go"], "buggy_code_start_loc": [3, 44, 5], "buggy_code_end_loc": [16, 45, 47], "fixing_code_start_loc": [3, 44, 4], "fixing_code_end_loc": [40, 45, 29], "type": "CWE-287", "message": "In github.com/kongchuanhujiao/server before version 1.3.21 there is an authentication Bypass by Primary Weakness vulnerability. All users are impacted. This is fixed in version 1.3.21.", "other": {"cve": {"id": "CVE-2021-21403", "sourceIdentifier": "security-advisories@github.com", "published": "2021-03-26T18:15:12.360", "lastModified": "2022-10-24T17:13:44.350", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In github.com/kongchuanhujiao/server before version 1.3.21 there is an authentication Bypass by Primary Weakness vulnerability. All users are impacted. This is fixed in version 1.3.21."}, {"lang": "es", "value": "En github.com/kongchuanhujiao/server versiones anteriores a 1.3.21, se presenta una Omisi\u00f3n de autenticaci\u00f3n por una vulnerabilidad de Debilidad Primaria.&#xa0;Todos los usuarios est\u00e1n afectados.&#xa0;Esto es corregido en la versi\u00f3n 1.3.21."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-305"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kongchuanhujiao_project:kongchuanhujiao:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.21", "matchCriteriaId": "11A4F437-0527-4C8C-A4B3-DBAE999BAADA"}]}]}], "references": [{"url": "https://github.com/kongchuanhujiao/server/commit/9a125624f219e496bdf4b07b404816d5a309bdc1", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/kongchuanhujiao/server/security/advisories/GHSA-8wrg-m8vm-5fvj", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kongchuanhujiao/server/commit/9a125624f219e496bdf4b07b404816d5a309bdc1"}}