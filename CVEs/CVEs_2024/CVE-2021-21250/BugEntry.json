{"buggy_code": ["package io.onedev.server.migration;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.DumperOptions.FlowStyle;\nimport org.yaml.snakeyaml.emitter.Emitter;\nimport org.yaml.snakeyaml.nodes.MappingNode;\nimport org.yaml.snakeyaml.nodes.Node;\nimport org.yaml.snakeyaml.nodes.NodeTuple;\nimport org.yaml.snakeyaml.nodes.ScalarNode;\nimport org.yaml.snakeyaml.nodes.SequenceNode;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.resolver.Resolver;\nimport org.yaml.snakeyaml.serializer.Serializer;\n\nimport com.google.common.collect.Lists;\n\nimport io.onedev.commons.utils.StringUtils;\n\npublic class XmlBuildSpecMigrator {\n\n\tprivate static Node migrateParamSpec(Element paramSpecElement) {\n\t\tString classTag = getClassTag(paramSpecElement.getName());\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\tnew ScalarNode(Tag.STR, paramSpecElement.elementText(\"name\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"allowEmpty\"), \n\t\t\t\tnew ScalarNode(Tag.STR, paramSpecElement.elementText(\"allowEmpty\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"allowMultiple\"), \n\t\t\t\tnew ScalarNode(Tag.STR, paramSpecElement.elementText(\"allowMultiple\").trim())));\n\t\tElement patternElement = paramSpecElement.element(\"pattern\");\n\t\tif (patternElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"pattern\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, patternElement.getText().trim())));\n\t\t}\n\t\tElement descriptionElement = paramSpecElement.element(\"description\");\n\t\tif (descriptionElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"description\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, descriptionElement.getText().trim())));\n\t\t}\n\t\tElement minValueElement = paramSpecElement.element(\"minValue\");\n\t\tif (minValueElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"minValue\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, minValueElement.getText().trim())));\n\t\t}\n\t\tElement maxValueElement = paramSpecElement.element(\"maxValue\");\n\t\tif (maxValueElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"maxValue\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, maxValueElement.getText().trim())));\n\t\t}\n\t\tElement showConditionElement = paramSpecElement.element(\"showCondition\");\n\t\tif (showConditionElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"showCondition\"), \n\t\t\t\t\tmigrateShowCondition(showConditionElement)));\n\t\t}\n\t\tElement defaultValueProviderElement = paramSpecElement.element(\"defaultValueProvider\");\n\t\tif (defaultValueProviderElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"defaultValueProvider\"), \n\t\t\t\t\tmigrateDefaultValueProvider(defaultValueProviderElement)));\n\t\t}\n\t\tElement defaultMultiValueProviderElement = paramSpecElement.element(\"defaultMultiValueProvider\");\n\t\tif (defaultMultiValueProviderElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"defaultMultiValueProvider\"), \n\t\t\t\t\tmigrateDefaultMultiValueProvider(defaultMultiValueProviderElement)));\n\t\t}\n\t\tElement choiceProviderElement = paramSpecElement.element(\"choiceProvider\");\n\t\tif (choiceProviderElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"choiceProvider\"), \n\t\t\t\t\tmigrateChoiceProvider(choiceProviderElement)));\n\t\t}\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static String getClassTag(String className) {\n\t\treturn \"!\" + StringUtils.substringAfterLast(className, \".\");\n\t}\n\t\n\tprivate static Node migrateChoiceProvider(Element choiceProviderElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(choiceProviderElement.attributeValue(\"class\"));\n\n\t\tElement scriptNameElement = choiceProviderElement.element(\"scriptName\");\n\t\tif (scriptNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t}\n\t\tElement choicesElement = choiceProviderElement.element(\"choices\");\n\t\tif (choicesElement != null) {\n\t\t\tList<Node> choiceNodes = new ArrayList<>();\n\t\t\tfor (Element choiceElement: choicesElement.elements()) {\n\t\t\t\tList<NodeTuple> choiceTuples = new ArrayList<>();\n\t\t\t\tchoiceTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"), \n\t\t\t\t\t\tnew ScalarNode(Tag.STR, choiceElement.elementText(\"value\").trim())));\n\t\t\t\tchoiceTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"color\"), \n\t\t\t\t\t\tnew ScalarNode(Tag.STR, choiceElement.elementText(\"color\").trim())));\n\t\t\t\tchoiceNodes.add(new MappingNode(Tag.MAP, choiceTuples, FlowStyle.BLOCK));\n\t\t\t}\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"choices\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, choiceNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateDefaultMultiValueProvider(Element defaultMultiValueProviderElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(defaultMultiValueProviderElement.attributeValue(\"class\"));\n\t\tElement scriptNameElement = defaultMultiValueProviderElement.element(\"scriptName\");\n\t\tif (scriptNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t}\n\t\tElement valueElement = defaultMultiValueProviderElement.element(\"value\");\n\t\tif (valueElement != null) {\n\t\t\tList<Node> valueItemNodes = new ArrayList<>();\n\t\t\tfor (Element valueItemElement: valueElement.elements())\n\t\t\t\tvalueItemNodes.add(new ScalarNode(Tag.STR, valueItemElement.getText().trim()));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, valueItemNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateDefaultValueProvider(Element defaultValueProviderElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(defaultValueProviderElement.attributeValue(\"class\"));\n\t\tElement scriptNameElement = defaultValueProviderElement.element(\"scriptName\");\n\t\tif (scriptNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t}\n\t\tElement valueElement = defaultValueProviderElement.element(\"value\");\n\t\tif (valueElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, valueElement.getText().trim())));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateShowCondition(Element showConditionElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"inputName\"), \n\t\t\t\tnew ScalarNode(Tag.STR, showConditionElement.elementText(\"inputName\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"valueMatcher\"), \n\t\t\t\tmigrateValueMatcher(showConditionElement.element(\"valueMatcher\"))));\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateValueMatcher(Element valueMatcherElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(valueMatcherElement.attributeValue(\"class\"));\n\t\tElement valuesElement = valueMatcherElement.element(\"values\");\n\t\tif (valuesElement != null) {\n\t\t\tList<Node> valueNodes = new ArrayList<>();\n\t\t\tfor (Element valueElement: valuesElement.elements()) \n\t\t\t\tvalueNodes.add(new ScalarNode(Tag.STR, valueElement.getText().trim()));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"values\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, valueNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateJob(Element jobElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"name\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"image\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"image\").trim())));\n\t\tList<Node> commandNodes = new ArrayList<>();\n\t\tfor (Element commandElement: jobElement.element(\"commands\").elements()) \n\t\t\tcommandNodes.add(new ScalarNode(Tag.STR, commandElement.getText().trim()));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"commands\"), \n\t\t\t\tnew SequenceNode(Tag.SEQ, commandNodes, FlowStyle.BLOCK)));\n\t\t\n\t\tList<Node> paramSpecNodes = new ArrayList<>();\n\t\tfor (Element paramSpecElement: jobElement.element(\"paramSpecs\").elements()) \n\t\t\tparamSpecNodes.add(migrateParamSpec(paramSpecElement));\n\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"paramSpecs\"), \n\t\t\t\tnew SequenceNode(Tag.SEQ, paramSpecNodes, FlowStyle.BLOCK)));\n\t\t\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"retrieveSource\"),\n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"retrieveSource\").trim())));\n\t\tElement cloneDepthElement = jobElement.element(\"cloneDepth\");\n\t\tif (cloneDepthElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"cloneDepth\"),\n\t\t\t\t\tnew ScalarNode(Tag.STR, cloneDepthElement.getText().trim())));\n\t\t}\n\t\t\n\t\tList<Node> submoduleCredentialNodes = new ArrayList<>();\n\t\tfor (Element submoduleCredentialElement: jobElement.element(\"submoduleCredentials\").elements()) {\n\t\t\tList<NodeTuple> submoduleCredentialTuples = new ArrayList<>();\n\t\t\tsubmoduleCredentialTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"url\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, submoduleCredentialElement.elementText(\"url\").trim())));\n\t\t\tsubmoduleCredentialTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"userName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, submoduleCredentialElement.elementText(\"userName\").trim())));\n\t\t\tsubmoduleCredentialTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"passwordSecret\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, submoduleCredentialElement.elementText(\"passwordSecret\").trim())));\n\t\t\tsubmoduleCredentialNodes.add(new MappingNode(Tag.MAP, submoduleCredentialTuples, FlowStyle.BLOCK));\n\t\t}\n\t\tif (!submoduleCredentialNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"submoduleCredentials\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, submoduleCredentialNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> jobDependencyNodes = new ArrayList<>();\n\t\tfor (Element jobDependencyElement: jobElement.element(\"jobDependencies\").elements()) \n\t\t\tjobDependencyNodes.add(migrateJobDependency(jobDependencyElement));\n\t\tif (!jobDependencyNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"jobDependencies\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, jobDependencyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> projectDependencyNodes = new ArrayList<>();\n\t\tfor (Element projectDependencyElement: jobElement.element(\"projectDependencies\").elements()) \n\t\t\tprojectDependencyNodes.add(migrateProjectDependency(projectDependencyElement));\n\t\tif (!projectDependencyNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"projectDependencies\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, projectDependencyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> serviceNodes = new ArrayList<>();\n\t\tfor (Element serviceElement: jobElement.element(\"services\").elements()) \n\t\t\tserviceNodes.add(migrateService(serviceElement));\n\t\tif (!serviceNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"services\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, serviceNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tElement artifactsElement = jobElement.element(\"artifacts\");\n\t\tif (artifactsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"artifacts\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, artifactsElement.getText().trim())));\n\t\t}\n\t\t\n\t\tList<Node> reportNodes = new ArrayList<>();\n\t\tfor (Element reportElement: jobElement.element(\"reports\").elements()) \n\t\t\treportNodes.add(migrateReport(reportElement));\n\t\tif (!reportNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"reports\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, reportNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> triggerNodes = new ArrayList<>();\n\t\tfor (Element triggerElement: jobElement.element(\"triggers\").elements()) \n\t\t\ttriggerNodes.add(migrateTrigger(triggerElement));\n\t\tif (!triggerNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"triggers\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, triggerNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> cacheNodes = new ArrayList<>();\n\t\tfor (Element cacheElement: jobElement.element(\"caches\").elements()) \n\t\t\tcacheNodes.add(migrateCache(cacheElement));\n\t\tif (!cacheNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"caches\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, cacheNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"cpuRequirement\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"cpuRequirement\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"memoryRequirement\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"memoryRequirement\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"timeout\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"timeout\").trim())));\n\t\t\n\t\tList<Node> postBuildActionNodes = new ArrayList<>();\n\t\tfor (Element postBuildActionElement: jobElement.element(\"postBuildActions\").elements())\n\t\t\tpostBuildActionNodes.add(migratePostBuildAction(postBuildActionElement));\n\t\tif (!postBuildActionNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"postBuildActions\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, postBuildActionNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"retryCondition\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"retryCondition\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"maxRetries\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"maxRetries\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"retryDelay\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"retryDelay\").trim())));\n\t\t\n\t\tElement defaultFixedIssuesFilterElement = jobElement.element(\"defaultFixedIssuesFilter\");\n\t\tif (defaultFixedIssuesFilterElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"defaultFixedIssuesFilter\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, defaultFixedIssuesFilterElement.getText().trim())));\n\t\t}\n\t\t\n\t\tMappingNode jobNode = new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t\treturn jobNode;\n\t}\n\t\n\tprivate static Node migratePostBuildAction(Element postBuildActionElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(postBuildActionElement.getName());\n\t\t\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"condition\"), \n\t\t\t\tnew ScalarNode(Tag.STR, postBuildActionElement.elementText(\"condition\").trim())));\n\t\t\n\t\tElement milestoneNameElement = postBuildActionElement.element(\"milestoneName\");\n\t\tif (milestoneNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"milestoneName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, milestoneNameElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement issueTitleElement = postBuildActionElement.element(\"issueTitle\");\n\t\tif (issueTitleElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"issueTitle\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, issueTitleElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement issueDescriptionElement = postBuildActionElement.element(\"issueDescription\");\n\t\tif (issueDescriptionElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"issueDescription\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, issueDescriptionElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement issueFieldsElement = postBuildActionElement.element(\"issueFields\");\n\t\tif (issueFieldsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"issueFields\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, migrateFieldSupplies(issueFieldsElement.elements()), FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tElement tagNameElement = postBuildActionElement.element(\"tagName\");\n\t\tif (tagNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"tagName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, tagNameElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement tagMessageElement = postBuildActionElement.element(\"tagMessage\");\n\t\tif (tagMessageElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"tagMessage\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, tagMessageElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement jobNameElement = postBuildActionElement.element(\"jobName\");\n\t\tif (jobNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"jobName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, jobNameElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement jobParamsElement = postBuildActionElement.element(\"jobParams\");\n\t\tif (jobParamsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"jobParams\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, migrateParamSupplies(jobParamsElement.elements()), FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tElement receiversElement = postBuildActionElement.element(\"receivers\");\n\t\tif (receiversElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"receivers\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, receiversElement.getText().trim())));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateCache(Element cacheElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"key\"), \n\t\t\t\tnew ScalarNode(Tag.STR, cacheElement.elementText(\"key\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"path\"), \n\t\t\t\tnew ScalarNode(Tag.STR, cacheElement.elementText(\"path\").trim())));\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateTrigger(Element triggerElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(triggerElement.getName());\n\n\t\tList<Node> paramSupplyNodes = migrateParamSupplies(triggerElement.element(\"params\").elements());\n\t\tif (!paramSupplyNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"params\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, paramSupplyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tElement branchesElement = triggerElement.element(\"branches\");\n\t\tif (branchesElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"branches\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, branchesElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement pathsElement = triggerElement.element(\"paths\");\n\t\tif (pathsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"paths\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, pathsElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement tagsElement = triggerElement.element(\"tags\");\n\t\tif (tagsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"tags\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, tagsElement.getText().trim())));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateReport(Element reportElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(reportElement.getName());\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"filePatterns\"), \n\t\t\t\tnew ScalarNode(Tag.STR, reportElement.elementText(\"filePatterns\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"reportName\"), \n\t\t\t\tnew ScalarNode(Tag.STR, reportElement.elementText(\"reportName\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"startPage\"), \n\t\t\t\tnew ScalarNode(Tag.STR, reportElement.elementText(\"startPage\").trim())));\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateService(Element serviceElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"name\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"image\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"image\").trim())));\n\t\tElement argumentsElement = serviceElement.element(\"arguments\");\n\t\tif (argumentsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"arguments\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, argumentsElement.getText().trim())));\n\t\t}\n\t\tList<Node> envVarNodes = new ArrayList<>();\n\t\tfor (Element envVarElement: serviceElement.element(\"envVars\").elements()) {\n\t\t\tList<NodeTuple> envVarTuples = new ArrayList<>();\n\t\t\tenvVarTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"name\"),\n\t\t\t\t\tnew ScalarNode(Tag.STR, envVarElement.elementText(\"name\").trim())));\n\t\t\tenvVarTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"),\n\t\t\t\t\tnew ScalarNode(Tag.STR, envVarElement.elementText(\"value\").trim())));\n\t\t\tenvVarNodes.add(new MappingNode(Tag.MAP, envVarTuples, FlowStyle.BLOCK));\n\t\t}\n\t\tif (!envVarNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"envVars\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, envVarNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"readinessCheckCommand\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"readinessCheckCommand\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"cpuRequirement\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"cpuRequirement\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"memoryRequirement\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"memoryRequirement\").trim())));\n\t\t\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateProjectDependency(Element projectDependencyElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"projectName\"), \n\t\t\t\tnew ScalarNode(Tag.STR, projectDependencyElement.elementText(\"projectName\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"buildNumber\"), \n\t\t\t\tnew ScalarNode(Tag.STR, projectDependencyElement.elementText(\"buildNumber\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"artifacts\"), \n\t\t\t\tnew ScalarNode(Tag.STR, projectDependencyElement.elementText(\"artifacts\").trim())));\n\n\t\tElement authenticationElement = projectDependencyElement.element(\"authentication\");\n\t\tif (authenticationElement != null) {\n\t\t\tList<NodeTuple> authenticationTuples = new ArrayList<>();\n\t\t\tauthenticationTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"userName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, authenticationElement.elementText(\"userName\").trim())));\n\t\t\tauthenticationTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"passwordSecret\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, authenticationElement.elementText(\"passwordSecret\").trim())));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"authentication\"), \n\t\t\t\t\tnew MappingNode(Tag.MAP, authenticationTuples, FlowStyle.BLOCK)));\n\t\t}\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\t\n\t\n\tprivate static Node migrateJobDependency(Element jobDependencyElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"jobName\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobDependencyElement.elementText(\"jobName\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"requireSuccessful\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobDependencyElement.elementText(\"requireSuccessful\").trim())));\n\t\tElement artifactsElement = jobDependencyElement.element(\"artifacts\");\n\t\tif (artifactsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"artifacts\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, artifactsElement.getText().trim())));\n\t\t}\n\t\t\n\t\tList<Node> paramSupplyNodes = migrateParamSupplies(jobDependencyElement.element(\"jobParams\").elements());\n\t\tif (!paramSupplyNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"jobParams\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, paramSupplyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static List<Node> migrateParamSupplies(List<Element> paramSupplyElements) {\n\t\tList<Node> paramSupplyNodes = new ArrayList<>();\n\t\tfor (Element paramSupplyElement: paramSupplyElements) {\n\t\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, paramSupplyElement.elementText(\"name\").trim())));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"secret\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, paramSupplyElement.elementText(\"secret\").trim())));\n\t\t\t\n\t\t\tElement valuesProviderElement = paramSupplyElement.element(\"valuesProvider\");\n\t\t\tString classTag = getClassTag(valuesProviderElement.attributeValue(\"class\"));\n\t\t\tList<NodeTuple> valuesProviderTuples = new ArrayList<>();\n\t\t\tElement scriptNameElement = valuesProviderElement.element(\"scriptName\");\n\t\t\tif (scriptNameElement != null) {\n\t\t\t\tvaluesProviderTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t\t}\n\t\t\tElement valuesElement = valuesProviderElement.element(\"values\");\n\t\t\tif (valuesElement != null) {\n\t\t\t\tList<Node> listNodes = new ArrayList<>();\n\t\t\t\tfor (Element listElement: valuesElement.elements()) {\n\t\t\t\t\tList<Node> listItemNodes = new ArrayList<>();\n\t\t\t\t\tfor (Element listItemElement: listElement.elements()) \n\t\t\t\t\t\tlistItemNodes.add(new ScalarNode(Tag.STR, listItemElement.getText().trim()));\n\t\t\t\t\tlistNodes.add(new SequenceNode(Tag.SEQ, listItemNodes, FlowStyle.BLOCK));\n\t\t\t\t}\n\t\t\t\tvaluesProviderTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"values\"), \n\t\t\t\t\t\tnew SequenceNode(Tag.SEQ, listNodes, FlowStyle.BLOCK)));\n\t\t\t}\n\t\t\t\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"valuesProvider\"), \n\t\t\t\t\tnew MappingNode(new Tag(classTag), valuesProviderTuples, FlowStyle.BLOCK)));\n\t\t\tparamSupplyNodes.add(new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK));\n\t\t}\n\t\treturn paramSupplyNodes;\n\t}\n\t\n\tprivate static List<Node> migrateFieldSupplies(List<Element> fieldSupplyElements) {\n\t\tList<Node> fieldSupplyNodes = new ArrayList<>();\n\t\tfor (Element fieldSupplyElement: fieldSupplyElements) {\n\t\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, fieldSupplyElement.elementText(\"name\").trim())));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"secret\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, fieldSupplyElement.elementText(\"secret\").trim())));\n\t\t\t\n\t\t\tElement valueProviderElement = fieldSupplyElement.element(\"valueProvider\");\n\t\t\tString classTag = getClassTag(valueProviderElement.attributeValue(\"class\"));\n\t\t\tList<NodeTuple> valueProviderTuples = new ArrayList<>();\n\t\t\tElement scriptNameElement = valueProviderElement.element(\"scriptName\");\n\t\t\tif (scriptNameElement != null) {\n\t\t\t\tvalueProviderTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t\t}\n\t\t\tElement valueElement = valueProviderElement.element(\"value\");\n\t\t\tif (valueElement != null) {\n\t\t\t\tList<Node> valueItemNodes = new ArrayList<>();\n\t\t\t\tfor (Element valueItemElement: valueElement.elements()) \n\t\t\t\t\tvalueItemNodes.add(new ScalarNode(Tag.STR, valueItemElement.getText().trim()));\n\t\t\t\tvalueProviderTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"), \n\t\t\t\t\t\tnew SequenceNode(Tag.SEQ, valueItemNodes, FlowStyle.BLOCK)));\n\t\t\t}\n\t\t\t\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"valueProvider\"), \n\t\t\t\t\tnew MappingNode(new Tag(classTag), valueProviderTuples, FlowStyle.BLOCK)));\n\t\t\tfieldSupplyNodes.add(new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK));\n\t\t}\n\t\treturn fieldSupplyNodes;\n\t}\n\t\n\tpublic static String migrate(String xml) {\n\t\tDocument xmlDoc;\n\t\ttry {\n\t\t\txmlDoc = new SAXReader().read(new StringReader(xml));\n\t\t} catch (DocumentException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tNode keyNode = new ScalarNode(Tag.STR, \"version\");\n\t\tNode valueNode = new ScalarNode(Tag.INT, \"0\");\n\t\ttuples.add(new NodeTuple(keyNode, valueNode));\n\t\t\n\t\tList<Node> jobNodes = new ArrayList<>();\n\t\tfor (Element jobElement: xmlDoc.getRootElement().element(\"jobs\").elements()) \n\t\t\tjobNodes.add(migrateJob(jobElement));\n\t\t\n\t\tif (!jobNodes.isEmpty()) {\n\t\t\tkeyNode = new ScalarNode(Tag.STR, \"jobs\");\n\t\t\ttuples.add(new NodeTuple(keyNode, new SequenceNode(Tag.SEQ, jobNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> propertyNodes = new ArrayList<>();\n\t\tElement propertiesElement = xmlDoc.getRootElement().element(\"properties\");\n\t\tif (propertiesElement != null) {\n\t\t\tfor (Element propertyElement: propertiesElement.elements()) {\n\t\t\t\tNode nameNode = new ScalarNode(Tag.STR, propertyElement.elementText(\"name\").trim());\n\t\t\t\tvalueNode = new ScalarNode(Tag.STR, propertyElement.elementText(\"value\").trim());\n\t\t\t\tList<NodeTuple> propertyTuples = Lists.newArrayList(\n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(Tag.STR, \"name\"), nameNode), \n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(Tag.STR, \"value\"), valueNode));\n\t\t\t\tpropertyNodes.add(new MappingNode(Tag.MAP, propertyTuples, FlowStyle.BLOCK));\n\t\t\t}\n\t\t}\n\t\tif(!propertyNodes.isEmpty()) {\n\t\t\tkeyNode = new ScalarNode(Tag.STR, \"properties\");\n\t\t\ttuples.add(new NodeTuple(keyNode, new SequenceNode(Tag.SEQ, propertyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tMappingNode rootNode = new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t\tStringWriter writer = new StringWriter();\n\t\tDumperOptions dumperOptions = new DumperOptions();\n\t\tSerializer serializer = new Serializer(new Emitter(writer, dumperOptions), \n\t\t\t\tnew Resolver(), dumperOptions, Tag.MAP);\n\t\ttry {\n\t\t\tserializer.open();\n\t\t\tserializer.serialize(rootNode);\n\t\t\tserializer.close();\n\t\t\treturn writer.toString();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t}\n}\n"], "fixing_code": ["package io.onedev.server.migration;\n\nimport java.io.IOException;\nimport java.io.StringReader;\nimport java.io.StringWriter;\nimport java.util.ArrayList;\nimport java.util.List;\n\nimport org.dom4j.Document;\nimport org.dom4j.DocumentException;\nimport org.dom4j.Element;\nimport org.dom4j.io.SAXReader;\nimport org.xml.sax.SAXException;\nimport org.yaml.snakeyaml.DumperOptions;\nimport org.yaml.snakeyaml.DumperOptions.FlowStyle;\nimport org.yaml.snakeyaml.emitter.Emitter;\nimport org.yaml.snakeyaml.nodes.MappingNode;\nimport org.yaml.snakeyaml.nodes.Node;\nimport org.yaml.snakeyaml.nodes.NodeTuple;\nimport org.yaml.snakeyaml.nodes.ScalarNode;\nimport org.yaml.snakeyaml.nodes.SequenceNode;\nimport org.yaml.snakeyaml.nodes.Tag;\nimport org.yaml.snakeyaml.resolver.Resolver;\nimport org.yaml.snakeyaml.serializer.Serializer;\n\nimport com.google.common.collect.Lists;\n\nimport io.onedev.commons.utils.StringUtils;\n\npublic class XmlBuildSpecMigrator {\n\n\tprivate static Node migrateParamSpec(Element paramSpecElement) {\n\t\tString classTag = getClassTag(paramSpecElement.getName());\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\tnew ScalarNode(Tag.STR, paramSpecElement.elementText(\"name\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"allowEmpty\"), \n\t\t\t\tnew ScalarNode(Tag.STR, paramSpecElement.elementText(\"allowEmpty\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"allowMultiple\"), \n\t\t\t\tnew ScalarNode(Tag.STR, paramSpecElement.elementText(\"allowMultiple\").trim())));\n\t\tElement patternElement = paramSpecElement.element(\"pattern\");\n\t\tif (patternElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"pattern\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, patternElement.getText().trim())));\n\t\t}\n\t\tElement descriptionElement = paramSpecElement.element(\"description\");\n\t\tif (descriptionElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"description\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, descriptionElement.getText().trim())));\n\t\t}\n\t\tElement minValueElement = paramSpecElement.element(\"minValue\");\n\t\tif (minValueElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"minValue\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, minValueElement.getText().trim())));\n\t\t}\n\t\tElement maxValueElement = paramSpecElement.element(\"maxValue\");\n\t\tif (maxValueElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"maxValue\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, maxValueElement.getText().trim())));\n\t\t}\n\t\tElement showConditionElement = paramSpecElement.element(\"showCondition\");\n\t\tif (showConditionElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"showCondition\"), \n\t\t\t\t\tmigrateShowCondition(showConditionElement)));\n\t\t}\n\t\tElement defaultValueProviderElement = paramSpecElement.element(\"defaultValueProvider\");\n\t\tif (defaultValueProviderElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"defaultValueProvider\"), \n\t\t\t\t\tmigrateDefaultValueProvider(defaultValueProviderElement)));\n\t\t}\n\t\tElement defaultMultiValueProviderElement = paramSpecElement.element(\"defaultMultiValueProvider\");\n\t\tif (defaultMultiValueProviderElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"defaultMultiValueProvider\"), \n\t\t\t\t\tmigrateDefaultMultiValueProvider(defaultMultiValueProviderElement)));\n\t\t}\n\t\tElement choiceProviderElement = paramSpecElement.element(\"choiceProvider\");\n\t\tif (choiceProviderElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"choiceProvider\"), \n\t\t\t\t\tmigrateChoiceProvider(choiceProviderElement)));\n\t\t}\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static String getClassTag(String className) {\n\t\treturn \"!\" + StringUtils.substringAfterLast(className, \".\");\n\t}\n\t\n\tprivate static Node migrateChoiceProvider(Element choiceProviderElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(choiceProviderElement.attributeValue(\"class\"));\n\n\t\tElement scriptNameElement = choiceProviderElement.element(\"scriptName\");\n\t\tif (scriptNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t}\n\t\tElement choicesElement = choiceProviderElement.element(\"choices\");\n\t\tif (choicesElement != null) {\n\t\t\tList<Node> choiceNodes = new ArrayList<>();\n\t\t\tfor (Element choiceElement: choicesElement.elements()) {\n\t\t\t\tList<NodeTuple> choiceTuples = new ArrayList<>();\n\t\t\t\tchoiceTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"), \n\t\t\t\t\t\tnew ScalarNode(Tag.STR, choiceElement.elementText(\"value\").trim())));\n\t\t\t\tchoiceTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"color\"), \n\t\t\t\t\t\tnew ScalarNode(Tag.STR, choiceElement.elementText(\"color\").trim())));\n\t\t\t\tchoiceNodes.add(new MappingNode(Tag.MAP, choiceTuples, FlowStyle.BLOCK));\n\t\t\t}\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"choices\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, choiceNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateDefaultMultiValueProvider(Element defaultMultiValueProviderElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(defaultMultiValueProviderElement.attributeValue(\"class\"));\n\t\tElement scriptNameElement = defaultMultiValueProviderElement.element(\"scriptName\");\n\t\tif (scriptNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t}\n\t\tElement valueElement = defaultMultiValueProviderElement.element(\"value\");\n\t\tif (valueElement != null) {\n\t\t\tList<Node> valueItemNodes = new ArrayList<>();\n\t\t\tfor (Element valueItemElement: valueElement.elements())\n\t\t\t\tvalueItemNodes.add(new ScalarNode(Tag.STR, valueItemElement.getText().trim()));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, valueItemNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateDefaultValueProvider(Element defaultValueProviderElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(defaultValueProviderElement.attributeValue(\"class\"));\n\t\tElement scriptNameElement = defaultValueProviderElement.element(\"scriptName\");\n\t\tif (scriptNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t}\n\t\tElement valueElement = defaultValueProviderElement.element(\"value\");\n\t\tif (valueElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, valueElement.getText().trim())));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateShowCondition(Element showConditionElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"inputName\"), \n\t\t\t\tnew ScalarNode(Tag.STR, showConditionElement.elementText(\"inputName\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"valueMatcher\"), \n\t\t\t\tmigrateValueMatcher(showConditionElement.element(\"valueMatcher\"))));\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateValueMatcher(Element valueMatcherElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(valueMatcherElement.attributeValue(\"class\"));\n\t\tElement valuesElement = valueMatcherElement.element(\"values\");\n\t\tif (valuesElement != null) {\n\t\t\tList<Node> valueNodes = new ArrayList<>();\n\t\t\tfor (Element valueElement: valuesElement.elements()) \n\t\t\t\tvalueNodes.add(new ScalarNode(Tag.STR, valueElement.getText().trim()));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"values\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, valueNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateJob(Element jobElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"name\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"image\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"image\").trim())));\n\t\tList<Node> commandNodes = new ArrayList<>();\n\t\tfor (Element commandElement: jobElement.element(\"commands\").elements()) \n\t\t\tcommandNodes.add(new ScalarNode(Tag.STR, commandElement.getText().trim()));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"commands\"), \n\t\t\t\tnew SequenceNode(Tag.SEQ, commandNodes, FlowStyle.BLOCK)));\n\t\t\n\t\tList<Node> paramSpecNodes = new ArrayList<>();\n\t\tfor (Element paramSpecElement: jobElement.element(\"paramSpecs\").elements()) \n\t\t\tparamSpecNodes.add(migrateParamSpec(paramSpecElement));\n\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"paramSpecs\"), \n\t\t\t\tnew SequenceNode(Tag.SEQ, paramSpecNodes, FlowStyle.BLOCK)));\n\t\t\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"retrieveSource\"),\n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"retrieveSource\").trim())));\n\t\tElement cloneDepthElement = jobElement.element(\"cloneDepth\");\n\t\tif (cloneDepthElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"cloneDepth\"),\n\t\t\t\t\tnew ScalarNode(Tag.STR, cloneDepthElement.getText().trim())));\n\t\t}\n\t\t\n\t\tList<Node> submoduleCredentialNodes = new ArrayList<>();\n\t\tfor (Element submoduleCredentialElement: jobElement.element(\"submoduleCredentials\").elements()) {\n\t\t\tList<NodeTuple> submoduleCredentialTuples = new ArrayList<>();\n\t\t\tsubmoduleCredentialTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"url\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, submoduleCredentialElement.elementText(\"url\").trim())));\n\t\t\tsubmoduleCredentialTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"userName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, submoduleCredentialElement.elementText(\"userName\").trim())));\n\t\t\tsubmoduleCredentialTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"passwordSecret\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, submoduleCredentialElement.elementText(\"passwordSecret\").trim())));\n\t\t\tsubmoduleCredentialNodes.add(new MappingNode(Tag.MAP, submoduleCredentialTuples, FlowStyle.BLOCK));\n\t\t}\n\t\tif (!submoduleCredentialNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"submoduleCredentials\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, submoduleCredentialNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> jobDependencyNodes = new ArrayList<>();\n\t\tfor (Element jobDependencyElement: jobElement.element(\"jobDependencies\").elements()) \n\t\t\tjobDependencyNodes.add(migrateJobDependency(jobDependencyElement));\n\t\tif (!jobDependencyNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"jobDependencies\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, jobDependencyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> projectDependencyNodes = new ArrayList<>();\n\t\tfor (Element projectDependencyElement: jobElement.element(\"projectDependencies\").elements()) \n\t\t\tprojectDependencyNodes.add(migrateProjectDependency(projectDependencyElement));\n\t\tif (!projectDependencyNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"projectDependencies\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, projectDependencyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> serviceNodes = new ArrayList<>();\n\t\tfor (Element serviceElement: jobElement.element(\"services\").elements()) \n\t\t\tserviceNodes.add(migrateService(serviceElement));\n\t\tif (!serviceNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"services\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, serviceNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tElement artifactsElement = jobElement.element(\"artifacts\");\n\t\tif (artifactsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"artifacts\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, artifactsElement.getText().trim())));\n\t\t}\n\t\t\n\t\tList<Node> reportNodes = new ArrayList<>();\n\t\tfor (Element reportElement: jobElement.element(\"reports\").elements()) \n\t\t\treportNodes.add(migrateReport(reportElement));\n\t\tif (!reportNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"reports\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, reportNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> triggerNodes = new ArrayList<>();\n\t\tfor (Element triggerElement: jobElement.element(\"triggers\").elements()) \n\t\t\ttriggerNodes.add(migrateTrigger(triggerElement));\n\t\tif (!triggerNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"triggers\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, triggerNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> cacheNodes = new ArrayList<>();\n\t\tfor (Element cacheElement: jobElement.element(\"caches\").elements()) \n\t\t\tcacheNodes.add(migrateCache(cacheElement));\n\t\tif (!cacheNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"caches\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, cacheNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"cpuRequirement\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"cpuRequirement\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"memoryRequirement\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"memoryRequirement\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"timeout\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"timeout\").trim())));\n\t\t\n\t\tList<Node> postBuildActionNodes = new ArrayList<>();\n\t\tfor (Element postBuildActionElement: jobElement.element(\"postBuildActions\").elements())\n\t\t\tpostBuildActionNodes.add(migratePostBuildAction(postBuildActionElement));\n\t\tif (!postBuildActionNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"postBuildActions\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, postBuildActionNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"retryCondition\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"retryCondition\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"maxRetries\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"maxRetries\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"retryDelay\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobElement.elementText(\"retryDelay\").trim())));\n\t\t\n\t\tElement defaultFixedIssuesFilterElement = jobElement.element(\"defaultFixedIssuesFilter\");\n\t\tif (defaultFixedIssuesFilterElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"defaultFixedIssuesFilter\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, defaultFixedIssuesFilterElement.getText().trim())));\n\t\t}\n\t\t\n\t\tMappingNode jobNode = new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t\treturn jobNode;\n\t}\n\t\n\tprivate static Node migratePostBuildAction(Element postBuildActionElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(postBuildActionElement.getName());\n\t\t\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"condition\"), \n\t\t\t\tnew ScalarNode(Tag.STR, postBuildActionElement.elementText(\"condition\").trim())));\n\t\t\n\t\tElement milestoneNameElement = postBuildActionElement.element(\"milestoneName\");\n\t\tif (milestoneNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"milestoneName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, milestoneNameElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement issueTitleElement = postBuildActionElement.element(\"issueTitle\");\n\t\tif (issueTitleElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"issueTitle\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, issueTitleElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement issueDescriptionElement = postBuildActionElement.element(\"issueDescription\");\n\t\tif (issueDescriptionElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"issueDescription\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, issueDescriptionElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement issueFieldsElement = postBuildActionElement.element(\"issueFields\");\n\t\tif (issueFieldsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"issueFields\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, migrateFieldSupplies(issueFieldsElement.elements()), FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tElement tagNameElement = postBuildActionElement.element(\"tagName\");\n\t\tif (tagNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"tagName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, tagNameElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement tagMessageElement = postBuildActionElement.element(\"tagMessage\");\n\t\tif (tagMessageElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"tagMessage\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, tagMessageElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement jobNameElement = postBuildActionElement.element(\"jobName\");\n\t\tif (jobNameElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"jobName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, jobNameElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement jobParamsElement = postBuildActionElement.element(\"jobParams\");\n\t\tif (jobParamsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"jobParams\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, migrateParamSupplies(jobParamsElement.elements()), FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tElement receiversElement = postBuildActionElement.element(\"receivers\");\n\t\tif (receiversElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"receivers\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, receiversElement.getText().trim())));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateCache(Element cacheElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"key\"), \n\t\t\t\tnew ScalarNode(Tag.STR, cacheElement.elementText(\"key\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"path\"), \n\t\t\t\tnew ScalarNode(Tag.STR, cacheElement.elementText(\"path\").trim())));\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateTrigger(Element triggerElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(triggerElement.getName());\n\n\t\tList<Node> paramSupplyNodes = migrateParamSupplies(triggerElement.element(\"params\").elements());\n\t\tif (!paramSupplyNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"params\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, paramSupplyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tElement branchesElement = triggerElement.element(\"branches\");\n\t\tif (branchesElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"branches\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, branchesElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement pathsElement = triggerElement.element(\"paths\");\n\t\tif (pathsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"paths\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, pathsElement.getText().trim())));\n\t\t}\n\t\t\n\t\tElement tagsElement = triggerElement.element(\"tags\");\n\t\tif (tagsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"tags\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, tagsElement.getText().trim())));\n\t\t}\n\t\t\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateReport(Element reportElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tString classTag = getClassTag(reportElement.getName());\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"filePatterns\"), \n\t\t\t\tnew ScalarNode(Tag.STR, reportElement.elementText(\"filePatterns\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"reportName\"), \n\t\t\t\tnew ScalarNode(Tag.STR, reportElement.elementText(\"reportName\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"startPage\"), \n\t\t\t\tnew ScalarNode(Tag.STR, reportElement.elementText(\"startPage\").trim())));\n\t\treturn new MappingNode(new Tag(classTag), tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateService(Element serviceElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"name\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"image\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"image\").trim())));\n\t\tElement argumentsElement = serviceElement.element(\"arguments\");\n\t\tif (argumentsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"arguments\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, argumentsElement.getText().trim())));\n\t\t}\n\t\tList<Node> envVarNodes = new ArrayList<>();\n\t\tfor (Element envVarElement: serviceElement.element(\"envVars\").elements()) {\n\t\t\tList<NodeTuple> envVarTuples = new ArrayList<>();\n\t\t\tenvVarTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"name\"),\n\t\t\t\t\tnew ScalarNode(Tag.STR, envVarElement.elementText(\"name\").trim())));\n\t\t\tenvVarTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"),\n\t\t\t\t\tnew ScalarNode(Tag.STR, envVarElement.elementText(\"value\").trim())));\n\t\t\tenvVarNodes.add(new MappingNode(Tag.MAP, envVarTuples, FlowStyle.BLOCK));\n\t\t}\n\t\tif (!envVarNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"envVars\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, envVarNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"readinessCheckCommand\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"readinessCheckCommand\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"cpuRequirement\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"cpuRequirement\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"memoryRequirement\"), \n\t\t\t\tnew ScalarNode(Tag.STR, serviceElement.elementText(\"memoryRequirement\").trim())));\n\t\t\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static Node migrateProjectDependency(Element projectDependencyElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"projectName\"), \n\t\t\t\tnew ScalarNode(Tag.STR, projectDependencyElement.elementText(\"projectName\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"buildNumber\"), \n\t\t\t\tnew ScalarNode(Tag.STR, projectDependencyElement.elementText(\"buildNumber\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"artifacts\"), \n\t\t\t\tnew ScalarNode(Tag.STR, projectDependencyElement.elementText(\"artifacts\").trim())));\n\n\t\tElement authenticationElement = projectDependencyElement.element(\"authentication\");\n\t\tif (authenticationElement != null) {\n\t\t\tList<NodeTuple> authenticationTuples = new ArrayList<>();\n\t\t\tauthenticationTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"userName\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, authenticationElement.elementText(\"userName\").trim())));\n\t\t\tauthenticationTuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"passwordSecret\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, authenticationElement.elementText(\"passwordSecret\").trim())));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"authentication\"), \n\t\t\t\t\tnew MappingNode(Tag.MAP, authenticationTuples, FlowStyle.BLOCK)));\n\t\t}\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\t\n\t\n\tprivate static Node migrateJobDependency(Element jobDependencyElement) {\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"jobName\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobDependencyElement.elementText(\"jobName\").trim())));\n\t\ttuples.add(new NodeTuple(\n\t\t\t\tnew ScalarNode(Tag.STR, \"requireSuccessful\"), \n\t\t\t\tnew ScalarNode(Tag.STR, jobDependencyElement.elementText(\"requireSuccessful\").trim())));\n\t\tElement artifactsElement = jobDependencyElement.element(\"artifacts\");\n\t\tif (artifactsElement != null) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"artifacts\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, artifactsElement.getText().trim())));\n\t\t}\n\t\t\n\t\tList<Node> paramSupplyNodes = migrateParamSupplies(jobDependencyElement.element(\"jobParams\").elements());\n\t\tif (!paramSupplyNodes.isEmpty()) {\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"jobParams\"), \n\t\t\t\t\tnew SequenceNode(Tag.SEQ, paramSupplyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\treturn new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t}\n\t\n\tprivate static List<Node> migrateParamSupplies(List<Element> paramSupplyElements) {\n\t\tList<Node> paramSupplyNodes = new ArrayList<>();\n\t\tfor (Element paramSupplyElement: paramSupplyElements) {\n\t\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, paramSupplyElement.elementText(\"name\").trim())));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"secret\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, paramSupplyElement.elementText(\"secret\").trim())));\n\t\t\t\n\t\t\tElement valuesProviderElement = paramSupplyElement.element(\"valuesProvider\");\n\t\t\tString classTag = getClassTag(valuesProviderElement.attributeValue(\"class\"));\n\t\t\tList<NodeTuple> valuesProviderTuples = new ArrayList<>();\n\t\t\tElement scriptNameElement = valuesProviderElement.element(\"scriptName\");\n\t\t\tif (scriptNameElement != null) {\n\t\t\t\tvaluesProviderTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t\t}\n\t\t\tElement valuesElement = valuesProviderElement.element(\"values\");\n\t\t\tif (valuesElement != null) {\n\t\t\t\tList<Node> listNodes = new ArrayList<>();\n\t\t\t\tfor (Element listElement: valuesElement.elements()) {\n\t\t\t\t\tList<Node> listItemNodes = new ArrayList<>();\n\t\t\t\t\tfor (Element listItemElement: listElement.elements()) \n\t\t\t\t\t\tlistItemNodes.add(new ScalarNode(Tag.STR, listItemElement.getText().trim()));\n\t\t\t\t\tlistNodes.add(new SequenceNode(Tag.SEQ, listItemNodes, FlowStyle.BLOCK));\n\t\t\t\t}\n\t\t\t\tvaluesProviderTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"values\"), \n\t\t\t\t\t\tnew SequenceNode(Tag.SEQ, listNodes, FlowStyle.BLOCK)));\n\t\t\t}\n\t\t\t\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"valuesProvider\"), \n\t\t\t\t\tnew MappingNode(new Tag(classTag), valuesProviderTuples, FlowStyle.BLOCK)));\n\t\t\tparamSupplyNodes.add(new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK));\n\t\t}\n\t\treturn paramSupplyNodes;\n\t}\n\t\n\tprivate static List<Node> migrateFieldSupplies(List<Element> fieldSupplyElements) {\n\t\tList<Node> fieldSupplyNodes = new ArrayList<>();\n\t\tfor (Element fieldSupplyElement: fieldSupplyElements) {\n\t\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"name\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, fieldSupplyElement.elementText(\"name\").trim())));\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"secret\"), \n\t\t\t\t\tnew ScalarNode(Tag.STR, fieldSupplyElement.elementText(\"secret\").trim())));\n\t\t\t\n\t\t\tElement valueProviderElement = fieldSupplyElement.element(\"valueProvider\");\n\t\t\tString classTag = getClassTag(valueProviderElement.attributeValue(\"class\"));\n\t\t\tList<NodeTuple> valueProviderTuples = new ArrayList<>();\n\t\t\tElement scriptNameElement = valueProviderElement.element(\"scriptName\");\n\t\t\tif (scriptNameElement != null) {\n\t\t\t\tvalueProviderTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"scriptName\"), \n\t\t\t\t\t\tnew ScalarNode(Tag.STR, scriptNameElement.getText().trim())));\n\t\t\t}\n\t\t\tElement valueElement = valueProviderElement.element(\"value\");\n\t\t\tif (valueElement != null) {\n\t\t\t\tList<Node> valueItemNodes = new ArrayList<>();\n\t\t\t\tfor (Element valueItemElement: valueElement.elements()) \n\t\t\t\t\tvalueItemNodes.add(new ScalarNode(Tag.STR, valueItemElement.getText().trim()));\n\t\t\t\tvalueProviderTuples.add(new NodeTuple(\n\t\t\t\t\t\tnew ScalarNode(Tag.STR, \"value\"), \n\t\t\t\t\t\tnew SequenceNode(Tag.SEQ, valueItemNodes, FlowStyle.BLOCK)));\n\t\t\t}\n\t\t\t\n\t\t\ttuples.add(new NodeTuple(\n\t\t\t\t\tnew ScalarNode(Tag.STR, \"valueProvider\"), \n\t\t\t\t\tnew MappingNode(new Tag(classTag), valueProviderTuples, FlowStyle.BLOCK)));\n\t\t\tfieldSupplyNodes.add(new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK));\n\t\t}\n\t\treturn fieldSupplyNodes;\n\t}\n\t\n\tpublic static String migrate(String xml) {\n\t\tDocument xmlDoc;\n\t\ttry {\n\t\t\tSAXReader reader = new SAXReader();\n\t\t\t// Prevent XXE attack as the xml might be provided by malicious users\n\t\t\treader.setFeature(\"http://apache.org/xml/features/disallow-doctype-decl\", true);\n\t\t\txmlDoc = reader.read(new StringReader(xml));\n\t\t} catch (DocumentException | SAXException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t\tList<NodeTuple> tuples = new ArrayList<>();\n\t\tNode keyNode = new ScalarNode(Tag.STR, \"version\");\n\t\tNode valueNode = new ScalarNode(Tag.INT, \"0\");\n\t\ttuples.add(new NodeTuple(keyNode, valueNode));\n\t\t\n\t\tList<Node> jobNodes = new ArrayList<>();\n\t\tfor (Element jobElement: xmlDoc.getRootElement().element(\"jobs\").elements()) \n\t\t\tjobNodes.add(migrateJob(jobElement));\n\t\t\n\t\tif (!jobNodes.isEmpty()) {\n\t\t\tkeyNode = new ScalarNode(Tag.STR, \"jobs\");\n\t\t\ttuples.add(new NodeTuple(keyNode, new SequenceNode(Tag.SEQ, jobNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tList<Node> propertyNodes = new ArrayList<>();\n\t\tElement propertiesElement = xmlDoc.getRootElement().element(\"properties\");\n\t\tif (propertiesElement != null) {\n\t\t\tfor (Element propertyElement: propertiesElement.elements()) {\n\t\t\t\tNode nameNode = new ScalarNode(Tag.STR, propertyElement.elementText(\"name\").trim());\n\t\t\t\tvalueNode = new ScalarNode(Tag.STR, propertyElement.elementText(\"value\").trim());\n\t\t\t\tList<NodeTuple> propertyTuples = Lists.newArrayList(\n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(Tag.STR, \"name\"), nameNode), \n\t\t\t\t\t\tnew NodeTuple(new ScalarNode(Tag.STR, \"value\"), valueNode));\n\t\t\t\tpropertyNodes.add(new MappingNode(Tag.MAP, propertyTuples, FlowStyle.BLOCK));\n\t\t\t}\n\t\t}\n\t\tif(!propertyNodes.isEmpty()) {\n\t\t\tkeyNode = new ScalarNode(Tag.STR, \"properties\");\n\t\t\ttuples.add(new NodeTuple(keyNode, new SequenceNode(Tag.SEQ, propertyNodes, FlowStyle.BLOCK)));\n\t\t}\n\t\t\n\t\tMappingNode rootNode = new MappingNode(Tag.MAP, tuples, FlowStyle.BLOCK);\n\t\tStringWriter writer = new StringWriter();\n\t\tDumperOptions dumperOptions = new DumperOptions();\n\t\tSerializer serializer = new Serializer(new Emitter(writer, dumperOptions), \n\t\t\t\tnew Resolver(), dumperOptions, Tag.MAP);\n\t\ttry {\n\t\t\tserializer.open();\n\t\t\tserializer.serialize(rootNode);\n\t\t\tserializer.close();\n\t\t\treturn writer.toString();\n\t\t} catch (IOException e) {\n\t\t\tthrow new RuntimeException(e);\n\t\t}\n\t\t\n\t}\n}\n"], "filenames": ["server-core/src/main/java/io/onedev/server/migration/XmlBuildSpecMigrator.java"], "buggy_code_start_loc": [12], "buggy_code_end_loc": [667], "fixing_code_start_loc": [13], "fixing_code_end_loc": [671], "type": "CWE-538", "message": "OneDev is an all-in-one devops platform. In OneDev before version 4.0.3, there is a critical vulnerability which may lead to arbitrary file read. When BuildSpec is provided in XML format, the spec is processed by XmlBuildSpecMigrator.migrate(buildSpecString); which processes the XML document without preventing the expansion of external entities. These entities can be configured to read arbitrary files from the file system and dump their contents in the final XML document to be migrated. If the files are dumped in properties included in the YAML file, it will be possible for an attacker to read them. If not, it is possible for an attacker to exfiltrate the contents of these files Out Of Band. This issue was addressed in 4.0.3 by ignoring ENTITY instructions in xml file.", "other": {"cve": {"id": "CVE-2021-21250", "sourceIdentifier": "security-advisories@github.com", "published": "2021-01-15T21:15:13.803", "lastModified": "2021-01-21T14:28:39.967", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OneDev is an all-in-one devops platform. In OneDev before version 4.0.3, there is a critical vulnerability which may lead to arbitrary file read. When BuildSpec is provided in XML format, the spec is processed by XmlBuildSpecMigrator.migrate(buildSpecString); which processes the XML document without preventing the expansion of external entities. These entities can be configured to read arbitrary files from the file system and dump their contents in the final XML document to be migrated. If the files are dumped in properties included in the YAML file, it will be possible for an attacker to read them. If not, it is possible for an attacker to exfiltrate the contents of these files Out Of Band. This issue was addressed in 4.0.3 by ignoring ENTITY instructions in xml file."}, {"lang": "es", "value": "OneDev es una plataforma devops todo en uno.&#xa0;En OneDev versiones anteriores a 4.0.3, Se presenta una vulnerabilidad cr\u00edtica que puede conllevar a una lectura arbitraria de archivos.&#xa0;Cuando BuildSpec se proporciona en formato XML, XmlBuildSpecMigrator.migrate (buildSpecString) procesa la especificaci\u00f3n;&#xa0;que procesa el documento XML sin evitar la expansi\u00f3n de entidades externas.&#xa0;Estas entidades se pueden configurar para leer archivos arbitrarios del sistema de archivos y volcar su contenido en el documento XML final que se migrar\u00e1.&#xa0;Si los archivos se vuelcan en propiedades incluidas en el archivo YAML, un atacante podr\u00e1 leerlos.&#xa0;Si no es as\u00ed, es posible a un atacante exfiltre el contenido de estos archivos Fuera de la Banda.&#xa0;Este problema es corregido en versi\u00f3n 4.0.3 ignorando las instrucciones de ENTITY en el archivo xml"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:C/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.1, "impactScore": 4.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-538"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:onedev_project:onedev:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.0.3", "matchCriteriaId": "5287F01C-3A77-4491-AB49-401A50FAA6E9"}]}]}], "references": [{"url": "https://github.com/theonedev/onedev/commit/9196fd795e87dab069b4260a3590a0ea886e770f", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/theonedev/onedev/security/advisories/GHSA-9pph-8gfc-6w2r", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/theonedev/onedev/commit/9196fd795e87dab069b4260a3590a0ea886e770f"}}