{"buggy_code": ["const commentReactionSchema = new SimpleSchema({\n  reactionCodepoint: { type: String, optional: false },\n  userIds: { type: [String], defaultValue: [] }\n});\n\nCardCommentReactions = new Mongo.Collection('card_comment_reactions');\n\n/**\n * All reactions of a card comment\n */\nCardCommentReactions.attachSchema(\n  new SimpleSchema({\n    boardId: {\n      /**\n       * the board ID\n       */\n      type: String,\n      optional: false\n    },\n    cardId: {\n      /**\n       * the card ID\n       */\n      type: String,\n      optional: false\n    },\n    cardCommentId: {\n      /**\n       * the card comment ID\n       */\n      type: String,\n      optional: false\n    },\n    reactions: {\n      type: [commentReactionSchema],\n      defaultValue: []\n    }\n  }),\n);\n\nCardCommentReactions.allow({\n  insert(userId, doc) {\n    return allowIsBoardMember(userId, Boards.findOne(doc.boardId));\n  },\n  update(userId, doc) {\n    return allowIsBoardMember(userId, Boards.findOne(doc.boardId));\n  },\n  remove(userId, doc) {\n    return allowIsBoardMember(userId, Boards.findOne(doc.boardId));\n  },\n  fetch: ['boardId'],\n});\n\n\nif (Meteor.isServer) {\n  Meteor.startup(() => {\n    CardCommentReactions._collection.createIndex({ cardCommentId: 1 }, { unique: true });\n  });\n}\n"], "fixing_code": ["const commentReactionSchema = new SimpleSchema({\n  reactionCodepoint: {\n    type: String,\n    optional: false,\n    max: 9, // max length of reaction code\n    custom() {\n      if (!this.value.match(/^&#\\d{4,6};$/)) { // regex for only valid reactions\n        return \"incorrectReactionCode\";\n      }\n    },\n  },\n  userIds: { type: [String], defaultValue: [] }\n});\n\nCardCommentReactions = new Mongo.Collection('card_comment_reactions');\n\n/**\n * All reactions of a card comment\n */\nCardCommentReactions.attachSchema(\n  new SimpleSchema({\n    boardId: {\n      /**\n       * the board ID\n       */\n      type: String,\n      optional: false\n    },\n    cardId: {\n      /**\n       * the card ID\n       */\n      type: String,\n      optional: false\n    },\n    cardCommentId: {\n      /**\n       * the card comment ID\n       */\n      type: String,\n      optional: false\n    },\n    reactions: {\n      type: [commentReactionSchema],\n      defaultValue: []\n    }\n  }),\n);\n\nCardCommentReactions.allow({\n  insert(userId, doc) {\n    return allowIsBoardMember(userId, Boards.findOne(doc.boardId));\n  },\n  update(userId, doc) {\n    return allowIsBoardMember(userId, Boards.findOne(doc.boardId));\n  },\n  remove(userId, doc) {\n    return allowIsBoardMember(userId, Boards.findOne(doc.boardId));\n  },\n  fetch: ['boardId'],\n});\n\n\nif (Meteor.isServer) {\n  Meteor.startup(() => {\n    CardCommentReactions._collection.createIndex({ cardCommentId: 1 }, { unique: true });\n  });\n}\n"], "filenames": ["models/cardCommentReactions.js"], "buggy_code_start_loc": [2], "buggy_code_end_loc": [3], "fixing_code_start_loc": [2], "fixing_code_end_loc": [12], "type": "CWE-79", "message": "Wekan v6.84 and earlier is vulnerable to Cross Site Scripting (XSS). An attacker with user privilege on kanban board can insert JavaScript code in in \"Reaction to comment\" feature.", "other": {"cve": {"id": "CVE-2023-31779", "sourceIdentifier": "cve@mitre.org", "published": "2023-05-22T13:15:09.913", "lastModified": "2023-05-31T13:38:31.893", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Wekan v6.84 and earlier is vulnerable to Cross Site Scripting (XSS). An attacker with user privilege on kanban board can insert JavaScript code in in \"Reaction to comment\" feature."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wekan_project:wekan:*:*:*:*:*:*:*:*", "versionEndIncluding": "6.84", "matchCriteriaId": "F6B847F3-637F-4F2D-A8D0-A02D2447C642"}]}]}], "references": [{"url": "https://github.com/wekan/wekan/blob/master/CHANGELOG.md", "source": "cve@mitre.org", "tags": ["Release Notes"]}, {"url": "https://github.com/wekan/wekan/commit/47ac33d6c234359c31d9b5eae49ed3e793907279", "source": "cve@mitre.org", "tags": ["Patch"]}]}, "github_commit_url": "https://github.com/wekan/wekan/commit/47ac33d6c234359c31d9b5eae49ed3e793907279"}}