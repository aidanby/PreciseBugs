{"buggy_code": ["/*\nBased on https://github.com/trevex/golem\nLicensed under the Apache License, Version 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0.html\n*/\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t_ \"expvar\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"runtime\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t//_ \"github.com/mkevac/debugcharts\"\n\tconf \"github.com/msbranco/goconfig\"\n)\n\ntype State struct {\n\tmutes   map[Userid]time.Time\n\tsubmode bool\n\tsync.RWMutex\n}\n\nvar (\n\tstate = &State{\n\t\tmutes: make(map[Userid]time.Time),\n\t}\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n\tCheckOrigin:     func(r *http.Request) bool { return true },\n}\n\nconst (\n\tWRITETIMEOUT         = 10 * time.Second\n\tREADTIMEOUT          = time.Minute\n\tPINGINTERVAL         = 10 * time.Second\n\tPINGTIMEOUT          = 30 * time.Second\n\tMAXMESSAGESIZE       = 6144 // 512 max chars in a message, 8bytes per chars possible, plus factor in some protocol overhead\n\tSENDCHANNELSIZE      = 16\n\tBROADCASTCHANNELSIZE = 256\n\tDEFAULTBANDURATION   = time.Hour\n\tDEFAULTMUTEDURATION  = 10 * time.Minute\n)\n\nvar (\n\tdebuggingenabled = false\n\tDELAY            = 300 * time.Millisecond\n\tMAXTHROTTLETIME  = 5 * time.Minute\n)\n\nfunc main() {\n\n\tc, err := conf.ReadConfigFile(\"settings.cfg\")\n\tif err != nil {\n\t\tnc := conf.NewConfigFile()\n\t\tnc.AddOption(\"default\", \"debug\", \"false\")\n\t\tnc.AddOption(\"default\", \"listenaddress\", \":9998\")\n\t\tnc.AddOption(\"default\", \"maxprocesses\", \"0\")\n\t\tnc.AddOption(\"default\", \"chatdelay\", fmt.Sprintf(\"%d\", 300*time.Millisecond))\n\t\tnc.AddOption(\"default\", \"maxthrottletime\", fmt.Sprintf(\"%d\", 5*time.Minute))\n\n\t\tnc.AddSection(\"redis\")\n\t\tnc.AddOption(\"redis\", \"address\", \"localhost:6379\")\n\t\tnc.AddOption(\"redis\", \"database\", \"0\")\n\t\tnc.AddOption(\"redis\", \"password\", \"\")\n\n\t\tnc.AddSection(\"database\")\n\t\tnc.AddOption(\"database\", \"type\", \"mysql\")\n\t\tnc.AddOption(\"database\", \"dsn\", \"username:password@tcp(localhost:3306)/destinygg?loc=UTC&parseTime=true&strict=true&timeout=1s&time_zone=\\\"+00:00\\\"\")\n\n\t\tnc.AddSection(\"api\")\n\t\tnc.AddOption(\"api\", \"url\", \"http://www.destiny.gg/api\")\n\t\tnc.AddOption(\"api\", \"key\", \"changeme\")\n\n\t\tif err := nc.WriteConfigFile(\"settings.cfg\", 0644, \"DestinyChatBackend\"); err != nil {\n\t\t\tlog.Fatal(\"Unable to create settings.cfg: \", err)\n\t\t}\n\t\tif c, err = conf.ReadConfigFile(\"settings.cfg\"); err != nil {\n\t\t\tlog.Fatal(\"Unable to read settings.cfg: \", err)\n\t\t}\n\t}\n\n\tdebuggingenabled, _ = c.GetBool(\"default\", \"debug\")\n\taddr, _ := c.GetString(\"default\", \"listenaddress\")\n\tprocesses, _ := c.GetInt64(\"default\", \"maxprocesses\")\n\tdelay, _ := c.GetInt64(\"default\", \"chatdelay\")\n\tmaxthrottletime, _ := c.GetInt64(\"default\", \"maxthrottletime\")\n\tapiurl, _ := c.GetString(\"api\", \"url\")\n\tapikey, _ := c.GetString(\"api\", \"key\")\n\tDELAY = time.Duration(delay)\n\tMAXTHROTTLETIME = time.Duration(maxthrottletime)\n\n\tredisaddr, _ := c.GetString(\"redis\", \"address\")\n\tredisdb, _ := c.GetInt64(\"redis\", \"database\")\n\tredispw, _ := c.GetString(\"redis\", \"password\")\n\n\tdbtype, _ := c.GetString(\"database\", \"type\")\n\tdbdsn, _ := c.GetString(\"database\", \"dsn\")\n\n\tif processes <= 0 {\n\t\tprocesses = int64(runtime.NumCPU())\n\t}\n\truntime.GOMAXPROCS(int(processes))\n\n\tstate.load()\n\n\tinitApi(apiurl, apikey)\n\tinitRedis(redisaddr, redisdb, redispw)\n\n\tinitNamesCache()\n\tinitHub()\n\tinitDatabase(dbtype, dbdsn)\n\n\tinitBroadcast(redisdb)\n\tinitBans(redisdb)\n\tinitUsers(redisdb)\n\n\thttp.HandleFunc(\"/ws\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != \"GET\" {\n\t\t\thttp.Error(w, \"Method not allowed\", 405)\n\t\t\treturn\n\t\t}\n\n\t\tws, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tuser, banned, ip := getUserFromWebRequest(r)\n\n\t\tif banned {\n\t\t\tws.SetWriteDeadline(time.Now().Add(WRITETIMEOUT))\n\t\t\tws.WriteMessage(websocket.TextMessage, []byte(`ERR \"banned\"`))\n\t\t\treturn\n\t\t}\n\n\t\tnewConnection(ws, user, ip)\n\t})\n\n\tfmt.Printf(\"Using %v threads, and listening on: %v\\n\", processes, addr)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Fatal(\"ListenAndServe: \", err)\n\t}\n}\n\nfunc unixMilliTime() int64 {\n\treturn time.Now().UTC().Truncate(time.Millisecond).UnixNano() / int64(time.Millisecond)\n}\n\n// expecting the argument to be in UTC\nfunc isExpiredUTC(t time.Time) bool {\n\treturn t.Before(time.Now().UTC())\n}\n\nfunc addDurationUTC(d time.Duration) time.Time {\n\treturn time.Now().UTC().Add(d)\n}\n\nfunc getFuturetimeUTC() time.Time {\n\treturn time.Date(2030, time.January, 1, 0, 0, 0, 0, time.UTC)\n}\n\nfunc (s *State) load() {\n\ts.Lock()\n\tdefer s.Unlock()\n\n\tb, err := ioutil.ReadFile(\".state.dc\")\n\tif err != nil {\n\t\tD(\"Error while reading from states file\", err)\n\t\treturn\n\t}\n\tmb := bytes.NewBuffer(b)\n\tdec := gob.NewDecoder(mb)\n\terr = dec.Decode(&s.mutes)\n\tif err != nil {\n\t\tD(\"Error decoding mutes from states file\", err)\n\t}\n\terr = dec.Decode(&s.submode)\n\tif err != nil {\n\t\tD(\"Error decoding submode from states file\", err)\n\t}\n}\n\n// expects to be called with locks held\nfunc (s *State) save() {\n\tmb := new(bytes.Buffer)\n\tenc := gob.NewEncoder(mb)\n\terr := enc.Encode(&s.mutes)\n\tif err != nil {\n\t\tD(\"Error encoding mutes:\", err)\n\t}\n\terr = enc.Encode(&s.submode)\n\tif err != nil {\n\t\tD(\"Error encoding submode:\", err)\n\t}\n\n\terr = ioutil.WriteFile(\".state.dc\", mb.Bytes(), 0600)\n\tif err != nil {\n\t\tD(\"Error with writing out state file:\", err)\n\t}\n}\n"], "fixing_code": ["/*\nBased on https://github.com/trevex/golem\nLicensed under the Apache License, Version 2.0\nhttp://www.apache.org/licenses/LICENSE-2.0.html\n*/\npackage main\n\nimport (\n\t\"bytes\"\n\t\"encoding/gob\"\n\t_ \"expvar\"\n\t\"fmt\"\n\t\"io/ioutil\"\n\t\"log\"\n\t\"net/http\"\n\t\"runtime\"\n\t\"sync\"\n\t\"time\"\n\n\t\"github.com/gorilla/websocket\"\n\t//_ \"github.com/mkevac/debugcharts\"\n\tconf \"github.com/msbranco/goconfig\"\n)\n\ntype State struct {\n\tmutes   map[Userid]time.Time\n\tsubmode bool\n\tsync.RWMutex\n}\n\nvar (\n\tstate = &State{\n\t\tmutes: make(map[Userid]time.Time),\n\t}\n)\n\nvar upgrader = websocket.Upgrader{\n\tReadBufferSize:  1024,\n\tWriteBufferSize: 1024,\n}\n\nconst (\n\tWRITETIMEOUT         = 10 * time.Second\n\tREADTIMEOUT          = time.Minute\n\tPINGINTERVAL         = 10 * time.Second\n\tPINGTIMEOUT          = 30 * time.Second\n\tMAXMESSAGESIZE       = 6144 // 512 max chars in a message, 8bytes per chars possible, plus factor in some protocol overhead\n\tSENDCHANNELSIZE      = 16\n\tBROADCASTCHANNELSIZE = 256\n\tDEFAULTBANDURATION   = time.Hour\n\tDEFAULTMUTEDURATION  = 10 * time.Minute\n)\n\nvar (\n\tdebuggingenabled = false\n\tDELAY            = 300 * time.Millisecond\n\tMAXTHROTTLETIME  = 5 * time.Minute\n)\n\nfunc main() {\n\n\tc, err := conf.ReadConfigFile(\"settings.cfg\")\n\tif err != nil {\n\t\tnc := conf.NewConfigFile()\n\t\tnc.AddOption(\"default\", \"debug\", \"false\")\n\t\tnc.AddOption(\"default\", \"listenaddress\", \":9998\")\n\t\tnc.AddOption(\"default\", \"maxprocesses\", \"0\")\n\t\tnc.AddOption(\"default\", \"chatdelay\", fmt.Sprintf(\"%d\", 300*time.Millisecond))\n\t\tnc.AddOption(\"default\", \"maxthrottletime\", fmt.Sprintf(\"%d\", 5*time.Minute))\n\n\t\tnc.AddSection(\"redis\")\n\t\tnc.AddOption(\"redis\", \"address\", \"localhost:6379\")\n\t\tnc.AddOption(\"redis\", \"database\", \"0\")\n\t\tnc.AddOption(\"redis\", \"password\", \"\")\n\n\t\tnc.AddSection(\"database\")\n\t\tnc.AddOption(\"database\", \"type\", \"mysql\")\n\t\tnc.AddOption(\"database\", \"dsn\", \"username:password@tcp(localhost:3306)/destinygg?loc=UTC&parseTime=true&strict=true&timeout=1s&time_zone=\\\"+00:00\\\"\")\n\n\t\tnc.AddSection(\"api\")\n\t\tnc.AddOption(\"api\", \"url\", \"http://www.destiny.gg/api\")\n\t\tnc.AddOption(\"api\", \"key\", \"changeme\")\n\n\t\tif err := nc.WriteConfigFile(\"settings.cfg\", 0644, \"DestinyChatBackend\"); err != nil {\n\t\t\tlog.Fatal(\"Unable to create settings.cfg: \", err)\n\t\t}\n\t\tif c, err = conf.ReadConfigFile(\"settings.cfg\"); err != nil {\n\t\t\tlog.Fatal(\"Unable to read settings.cfg: \", err)\n\t\t}\n\t}\n\n\tdebuggingenabled, _ = c.GetBool(\"default\", \"debug\")\n\taddr, _ := c.GetString(\"default\", \"listenaddress\")\n\tprocesses, _ := c.GetInt64(\"default\", \"maxprocesses\")\n\tdelay, _ := c.GetInt64(\"default\", \"chatdelay\")\n\tmaxthrottletime, _ := c.GetInt64(\"default\", \"maxthrottletime\")\n\tapiurl, _ := c.GetString(\"api\", \"url\")\n\tapikey, _ := c.GetString(\"api\", \"key\")\n\tDELAY = time.Duration(delay)\n\tMAXTHROTTLETIME = time.Duration(maxthrottletime)\n\n\tredisaddr, _ := c.GetString(\"redis\", \"address\")\n\tredisdb, _ := c.GetInt64(\"redis\", \"database\")\n\tredispw, _ := c.GetString(\"redis\", \"password\")\n\n\tdbtype, _ := c.GetString(\"database\", \"type\")\n\tdbdsn, _ := c.GetString(\"database\", \"dsn\")\n\n\tif processes <= 0 {\n\t\tprocesses = int64(runtime.NumCPU())\n\t}\n\truntime.GOMAXPROCS(int(processes))\n\n\tstate.load()\n\n\tinitApi(apiurl, apikey)\n\tinitRedis(redisaddr, redisdb, redispw)\n\n\tinitNamesCache()\n\tinitHub()\n\tinitDatabase(dbtype, dbdsn)\n\n\tinitBroadcast(redisdb)\n\tinitBans(redisdb)\n\tinitUsers(redisdb)\n\n\thttp.HandleFunc(\"/ws\", func(w http.ResponseWriter, r *http.Request) {\n\t\tif r.Method != \"GET\" {\n\t\t\thttp.Error(w, \"Method not allowed\", 405)\n\t\t\treturn\n\t\t}\n\n\t\tws, err := upgrader.Upgrade(w, r, nil)\n\t\tif err != nil {\n\t\t\treturn\n\t\t}\n\n\t\tuser, banned, ip := getUserFromWebRequest(r)\n\n\t\tif banned {\n\t\t\tws.SetWriteDeadline(time.Now().Add(WRITETIMEOUT))\n\t\t\tws.WriteMessage(websocket.TextMessage, []byte(`ERR \"banned\"`))\n\t\t\treturn\n\t\t}\n\n\t\tnewConnection(ws, user, ip)\n\t})\n\n\tfmt.Printf(\"Using %v threads, and listening on: %v\\n\", processes, addr)\n\tif err := http.ListenAndServe(addr, nil); err != nil {\n\t\tlog.Fatal(\"ListenAndServe: \", err)\n\t}\n}\n\nfunc unixMilliTime() int64 {\n\treturn time.Now().UTC().Truncate(time.Millisecond).UnixNano() / int64(time.Millisecond)\n}\n\n// expecting the argument to be in UTC\nfunc isExpiredUTC(t time.Time) bool {\n\treturn t.Before(time.Now().UTC())\n}\n\nfunc addDurationUTC(d time.Duration) time.Time {\n\treturn time.Now().UTC().Add(d)\n}\n\nfunc getFuturetimeUTC() time.Time {\n\treturn time.Date(2030, time.January, 1, 0, 0, 0, 0, time.UTC)\n}\n\nfunc (s *State) load() {\n\ts.Lock()\n\tdefer s.Unlock()\n\n\tb, err := ioutil.ReadFile(\".state.dc\")\n\tif err != nil {\n\t\tD(\"Error while reading from states file\", err)\n\t\treturn\n\t}\n\tmb := bytes.NewBuffer(b)\n\tdec := gob.NewDecoder(mb)\n\terr = dec.Decode(&s.mutes)\n\tif err != nil {\n\t\tD(\"Error decoding mutes from states file\", err)\n\t}\n\terr = dec.Decode(&s.submode)\n\tif err != nil {\n\t\tD(\"Error decoding submode from states file\", err)\n\t}\n}\n\n// expects to be called with locks held\nfunc (s *State) save() {\n\tmb := new(bytes.Buffer)\n\tenc := gob.NewEncoder(mb)\n\terr := enc.Encode(&s.mutes)\n\tif err != nil {\n\t\tD(\"Error encoding mutes:\", err)\n\t}\n\terr = enc.Encode(&s.submode)\n\tif err != nil {\n\t\tD(\"Error encoding submode:\", err)\n\t}\n\n\terr = ioutil.WriteFile(\".state.dc\", mb.Bytes(), 0600)\n\tif err != nil {\n\t\tD(\"Error with writing out state file:\", err)\n\t}\n}\n"], "filenames": ["main.go"], "buggy_code_start_loc": [40], "buggy_code_end_loc": [41], "fixing_code_start_loc": [39], "fixing_code_end_loc": [39], "type": "CWE-352", "message": "** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in destiny.gg chat. It has been rated as problematic. This issue affects the function websocket.Upgrader of the file main.go. The manipulation leads to cross-site request forgery. The attack may be initiated remotely. The name of the patch is bebd256fc3063111fb4503ca25e005ebf6e73780. It is recommended to apply a patch to fix this issue. The identifier VDB-216521 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer.", "other": {"cve": {"id": "CVE-2020-36625", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-22T10:15:09.730", "lastModified": "2022-12-28T22:09:13.673", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "** UNSUPPORTED WHEN ASSIGNED ** A vulnerability was found in destiny.gg chat. It has been rated as problematic. This issue affects the function websocket.Upgrader of the file main.go. The manipulation leads to cross-site request forgery. The attack may be initiated remotely. The name of the patch is bebd256fc3063111fb4503ca25e005ebf6e73780. It is recommended to apply a patch to fix this issue. The identifier VDB-216521 was assigned to this vulnerability. NOTE: This vulnerability only affects products that are no longer supported by the maintainer."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}, {"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}, {"source": "cna@vuldb.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-352"}, {"lang": "en", "value": "CWE-862"}, {"lang": "en", "value": "CWE-863"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:destiny:chat:-:*:*:*:*:*:*:*", "matchCriteriaId": "64343946-C5A2-4697-AFBE-EBA3AC1129AD"}]}]}], "references": [{"url": "https://github.com/destinygg/chat/commit/bebd256fc3063111fb4503ca25e005ebf6e73780", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/destinygg/chat/pull/35", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.216521", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/destinygg/chat/commit/bebd256fc3063111fb4503ca25e005ebf6e73780"}}