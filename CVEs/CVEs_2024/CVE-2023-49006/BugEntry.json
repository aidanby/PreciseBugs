{"buggy_code": ["; PSI Config File\n;\n; @category  PHP\n; @package   PSI\n; @author    Michael Cramer <BigMichi1@users.sourceforge.net>\n; @copyright 2009 phpSysInfo\n; @license   http://opensource.org/licenses/gpl-2.0.php GNU General Public License version 2, or (at your option) any later version\n; @version   SVN: $Id: phpsysinfo.ini.new 705 2012-11-11 00:33:29Z namiltd $\n; @link      http://phpsysinfo.sourceforge.net\n\n[main]\n; ********************************\n;        MAIN PARAMETERS\n; ********************************\n\n; Turn on debugging of some functions and include errors and warnings in xml and provide a popup for displaying errors\n; - false : no debug information are stored in xml or displayed\n; - true : debug information stored in xml and displayed *be careful if set this to true, may include sensitive information from your pc*\n;\nDEBUG=false\n\n; Turn on logging/unlogging of functions executeProgram() and rfts()\n; example : executeProgram () and rfts () record the results to the \"/tmp/phpsysinfo.log\" file\n; LOG=\"/tmp/phpsysinfo.log\"\n; example : executeProgram () and rfts () read the results from the \"/tmp/phpsysinfo.log\" file\n; LOG=\"-/tmp/phpsysinfo.log\"\n; example : executeProgram () and rfts () read the results from the \"/tmp/phpsysinfo.log\" file\n; LOG=\"+/tmp/phpsysinfo.log\", if lack in the log file it runs normally\n;\nLOG=false\n\n; Turn on/off compression for JavaScript file\n; - JS_COMPRESSION=false  //no compression (recommended with slow processor)\n; - JS_COMPRESSION=\"None\"  //code minimizing\n; - JS_COMPRESSION=\"Normal\"  //code packing\n;\nJS_COMPRESSION=\"Normal\"\n\n; Additional paths where to look for installed programs\n; Example : ADD_PATHS=\"/opt/bin,/opt/sbin\"\n;\nADD_PATHS=false\n\n; List of IP addresses (IPv4) of clients authorized to run\n; Example : ALLOWED=\"127.0.0.1,192.168.1.48,192.168.0.0/24\" //allowed IP 127.0.0.1, 192.168.1.48 and 192.168.0.0/24\n;           ALLOWED=false //no IP checking\n;\nALLOWED=false\n\n; List of sudo commands\n; Example : SUDO_COMMANDS=\"iptables-save\" //execute \"sudo iptables-save\" instead \"iptables-save\"\n;           SUDO_COMMANDS=false //no sudo commands\n;\nSUDO_COMMANDS=false\n\n; Order of data blocks\n; Example : BLOCKS=\"vitals,hardware,memory,filesystem,network,voltage,current,temperature,fans,power,other,ups\" or BLOCKS=true //default order\n;           BLOCKS=false //hide all blocks\n;\nBLOCKS=true\n\n; Maximum time in seconds a script is allowed to run before it is terminated by the parser\n;\n;MAX_TIMEOUT=30\n\n; executeProgram() timeout value in seconds\n;\n;EXEC_TIMEOUT=30\n\n; snmprealwalk() and executeProgram(\"snmpwalk\") number of seconds until the first timeout\n;\n;SNMP_TIMEOUT=3\n\n; snmprealwalk() and executeProgram(\"snmpwalk\") number of times to retry if timeouts occur\n;\n;SNMP_RETRY=0\n\n; Root path of the system\n; Example : ROOTFS=\"/rootfs\"\n;\n;ROOTFS=\"/\"\n\n\n; External Linux, GNU Hurd, DrayOS and FortiOS connection parameters via SSH\n; For safety reasons make sure that phpsysinfo.ini cannot be read by the network or other users!\n; These settings can also be entered for a specific plug-in so that only it connects to an external server\n; For safety reasons make sure that phpsysinfo.ini cannot be read by the network or other users!\n;\n;SSH_HOSTNAME=\"hostname:22\"\n;SSH_USER=\"username\"\n;SSH_PASSWORD=\"password\"\n;\n; Additional paths where to look for installed programs\n; Example : SSH_ADD_PATHS=\"/sbin,/usr/sbin\"\n;\n;SSH_ADD_PATHS=false\n;\n; Additional SSH options\n; Example : SSH_ADD_OPTIONS=\"KexAlgorithms=+diffie-hellman-group1-sha1,HostKeyAlgorithms=+ssh-dss,Ciphers=+3des-cbc\"\n;\n;SSH_ADD_OPTIONS=\"\"\n\n\n; External WinNT server connection parameters\n; Possibility available for WinNT and partly for LINUX (if wmic tool from wmic-linux or openvas-smb package is installed)\n; These settings can also be entered for a specific plug-in so that only it connects to an external server\n; For safety reasons make sure that phpsysinfo.ini cannot be read by the network or other users!\n;\n;WMI_HOSTNAME=\"hostname\"\n;WMI_USER=\"username\"\n;WMI_PASSWORD=\"password\"\n\n\n; Plugins that should be included in xml and output\n; List of plugins should look like \"plugin,plugin,plugin\". See /plugins directory\n; - PLUGINS=\"Raid,PS\"  //list of plugins\n; - PLUGINS=false  //no plugins\n; included plugins:\n; - Raid           - show the software, fake, zpool or megaraid RAID status\n; - PS             - show a process tree of all running processes\n; - PSStatus       - show a graphical representation if a process is running or not\n; - Quotas         - show a table with all quotas that are active and there current state\n; - SMART          - show S.M.A.R.T. information from drives that support it\n; - BAT            - show battery state on a laptop, tablet or phone\n; - UpdateNotifier - show update notifications (only for Ubuntu server)\n; - SNMPPInfo      - show printers info via SNMP\n; - Uprecords      - show uprecords info\n; - PingTest       - show Ping Test info\n; - StableBit      - show StableBit Scanner info (WinNT)\n; - DiskLoad       - show Disk Load info (WinNT)\n; - HyperV         - show Hyper-V info (WinNT)\n; - Docker         - show docker stats\n; - Viewer         - show output of any command or file viewer.tmp contents\n;\nPLUGINS=false\n\n\n; ********************************\n;       DISPLAY PARAMETERS\n; ********************************\n\n\n; Define the default display mode\n; auto: let user browser choose the mode\n; dynamic: use javascript to refresh data\n; static: static page (use metatag to reload page)\n; bootstrap: use twitter bootstrap template\n;\nDEFAULT_DISPLAY_MODE=\"auto\"\n\n\n; Define the default language\n;\nDEFAULT_LANG=\"en\"\n\n\n; Define the default template\n;\nDEFAULT_TEMPLATE=\"phpsysinfo\"\n\n\n; Define the default template for frontend \"bootstrap\"\n;\nDEFAULT_BOOTSTRAP_TEMPLATE=\"phpsysinfo\"\n\n\n; Show or hide language picklist\n;\nSHOW_PICKLIST_LANG=true\n\n\n; Show or hide template picklist\n;\nSHOW_PICKLIST_TEMPLATE=true\n\n\n; Show CPU list expanded\n;\nSHOW_CPULIST_EXPANDED=true\n\n\n; Show CPU info expanded\n;\nSHOW_CPUINFO_EXPANDED=false\n\n\n; Show memory infos expanded\n;\nSHOW_MEMORY_INFOS_EXPANDED=false\n\n\n; Show virtualizer info for Linux, Android and WinNT\n;\nSHOW_VIRTUALIZER_INFO=true\n\n\n; Hide loader for frontend \"bootstrap\"\n;\nHIDE_BOOTSTRAP_LOADER=false\n\n\n; Increase the body width for the \"dynamic\" frontend by pixels. The value should be even\n; - 0 : disabled\n; - 200 : wider by 200px\n; Default is 0 pixels\n;\nINCREASE_WIDTH=0\n\n\n; Define the interval for refreshing data in ms\n; - 0 : disabled\n; - 1000 : 1 second\n; Default is 60 seconds\n;\nREFRESH=60000\n\n\n; Show a graph for current cpuload\n; - true : displayed, but it's a performance hit (because we have to wait to get a value, 1 second)\n; - \"compact\" : displayed like above but in compact mode\n; - false : will not be displayed (also in Load Averages field)\n;\nLOAD_BAR=\"compact\"\n\n\n; Display the virtual host name and address\n; - Default is canonical host name and address\n; - Use USE_VHOST=true to display virtual host name.\n;\nUSE_VHOST=false\n\n\n; Controls the units & format for network, memory and filesystem\n; - 1 KiB = 2^10 bytes = 1,024 bytes\n; - 1 KB = 10^3 bytes = 1,000 bytes\n; - \"B\"     everything is in Byte\n; - \"PiB\"   everything is in PeBiByte\n; - \"TiB\"   everything is in TeBiByte\n; - \"GiB\"   everything is in GiBiByte\n; - \"MiB\"   everything is in MeBiByte\n; - \"KiB\"   everything is in KiBiByte\n; - \"auto_binary\" everything is automatic done if value is to big for, e.g MiB then it will be in GiB\n; - \"PB\"    everything is in PetaByte\n; - \"TB\"    everything is in TeraByte\n; - \"GB\"    everything is in GigaByte\n; - \"MB\"    everything is in MegaByte\n; - \"KB\"    everything is in KiloByte\n; - \"auto_decimal\" everything is automatic done if value is to big for, e.g MB then it will be in GB\n;\nBYTE_FORMAT=\"auto_binary\"\n\n\n; Format in which temperature is displayed\n; - \"c\"    shown in celsius\n; - \"f\"    shown in fahrenheit\n; - \"c-f\"  both shown first celsius and fahrenheit in braces\n; - \"f-c\"  both shown first fahrenheit and celsius in braces\n;\nTEMP_FORMAT=\"c\"\n\n\n; Show devices infos\n; Example : SHOW_DEVICES_INFOS=true\n;\nSHOW_DEVICES_INFOS=true\n\n\n; Show devices serial number\n; Example : SHOW_DEVICES_SERIAL=true\n;\nSHOW_DEVICES_SERIAL=false\n\n\n; Format in which datetime is displayed\n; - \"UTC\"    shown as UTC string\n; - \"locale\" shown as Locale string\n;\nDATETIME_FORMAT=\"UTC\"\n\n\n; ********************************\n;       SENSORS PARAMETERS\n; ********************************\n\n\n; Define the motherboard monitoring program\n; We support the following programs so far\n; - HDDtemp        http://www.guzu.net/linux/hddtemp.php (Linux)\n; - LMSensors      http://www.lm-sensors.org/ (Linux)\n; - Healthd        http://healthd.thehousleys.net/ (FreeBSD)\n; - HWSensors      http://www.openbsd.org/ (OpenBSD)\n; - MBMon          http://www.nt.phys.kyushu-u.ac.jp/shimizu/download/download.html (FreeBSD/Linux/NetBSD/OpenBSD)\n; - MBM5           http://mbm.livewiredev.com/ (data from file data/MBM5.csv - WinNT)\n; - CpuMem         No addon tool neded (FreeBSD/Linux/WinNT or others but with the dmidecode utility installed)\n; - IPMItool       http://ipmitool.sourceforge.net/ (Linux)\n; - FreeIPMI       http://www.gnu.org/software/freeipmi/ (FreeBSD/Linux/OpenBSD/SunOS)\n; - IPMIutil       http://ipmiutil.sourceforge.net/ (Darwin/FreeBSD/Linux/SunOS/WinNT)\n; - IPMIcfg        http://www.supermicro.com/en/solutions/management-software/ipmi-utilities (Linux/WinNT)\n; - K8Temp         http://hur.st/k8temp/ (DragonFly/FreeBSD/NetBSD/OpenBSD)\n; - PiTemp         No addon tool neded (Raspberry Pi and Banana Pi - Linux)\n; - OHM            http://openhardwaremonitor.org/ (WinNT)\n; - ThermalZone    No addon tool neded (WinNT/Linux/Android)\n; - QTSsnmp        SNMP service enabled and snmp-utils package installed: opkg install snmp-utils (QNAP - QTS Linux)\n; - Hwmon          No addon tool neded (Linux)\n; - SpeedFan       http://www.almico.com/speedfan.php (required tool packaged in: tools/speedfan/SpeedFanGet_bin.zip) (WinNT)\n; - Thinkpad       No addon tool neded (Lenovo Thinkpad - Linux)\n; - NvidiaSMI      Nvidia GPU drivers (FreeBSD/Linux/SunOS/WinNT)\n; - FortiSensor    No addon tool neded (Fortinet devices - FortiOS)\n;\n; Example: If you want to use lmsensors : SENSOR_PROGRAM=\"LMSensors\"\n;          If you want to use lmsensors and IPMItool: SENSOR_PROGRAM=\"LMSensors,IPMItool\"\n;\nSENSOR_PROGRAM=false\n\n\n; Show events of sensors\n; - true : show events\n; - false : do not show events\n;\nSENSOR_EVENTS=true\n\n\n; Sort sensors list\n;\nSORT_SENSORS_LIST=false\n\n\n; Some sensors programs contain an additional configuration in the relevant sections [sensor_...]\n\n\n; ********************************\n;      FILESYSTEM PARAMETERS\n; ********************************\n\n\n; Show mount point\n; - true : show mount point\n; - false : do not show mount point\n;\nSHOW_MOUNT_POINT=true\n\n\n; Show mount option\n; - true : show mount option\n; - false : do not show mount option\n;\nSHOW_MOUNT_OPTION=true\n\n\n; Show mount credentials\n; - true : show mount credentials\n; - false : do not show mount credentials\n;\nSHOW_MOUNT_CREDENTIALS=false\n\n\n; Show inode usage\n; - true : display used inodes in percent\n; - false : hide them\n;\nSHOW_INODES=true\n\n\n; Hide mounts\n; Example : HIDE_MOUNTS=\"/home,/usr\"\n;\nHIDE_MOUNTS=\"\"\n\n\n; Filesystem usage warning threshold in percent\n; - 0 : disabled\n; - 90 : 90%\n; Default is 90%\n;\nFS_USAGE_THRESHOLD=90\n\n\n; Ignore usage and usage threshold for filesystem types\n; Example : IGNORE_THRESHOLD_FS_TYPES=\"packagefs, iso9660, squashfs, devfs, devtmpfs, tmpfs, lxfs, udf, UDF, CDFS\"\n;\nIGNORE_THRESHOLD_FS_TYPES=\"packagefs, iso9660, squashfs, devfs, devtmpfs, tmpfs, lxfs, udf, UDF, CDFS\"\n\n\n; Ignore usage of mounts\n; Example : IGNORE_USAGE=\"/root,/mnt/c\"\n;\nIGNORE_USAGE=\"\"\n\n\n; Ignore total size of mounts\n; Example : IGNORE_TOTAL=\"/System/Volumes/VM,/System/Volumes/Prebot\"\n;\nIGNORE_TOTAL=\"\"\n\n\n; Ignore free space size of mounts\n; Example : IGNORE_FREE=\"/zfs/space,/zfs/data\"\n;\nIGNORE_FREE=\"\"\n\n\n; Hide filesystem types\n; Example : HIDE_FS_TYPES=\"tmpfs,devtmpfs,usbfs,bstfolder\"\n;\nHIDE_FS_TYPES=\"\"\n\n\n; Hide partitions\n; Example : HIDE_DISKS=\"rootfs,/dev/sda1\"\n;           HIDE_DISKS=true  //hide all partitions\n;\nHIDE_DISKS=\"\"\n\n\n; Hide totals information\n;\nHIDE_TOTALS=false\n\n\n; ********************************\n;      NETWORK PARAMETERS\n; ********************************\n\n\n; Hide network interfaces\n; Example : HIDE_NETWORK_INTERFACE=\"eth0,sit0\"\n;           HIDE_NETWORK_INTERFACE=true  //hide all network interfaces\n;\nHIDE_NETWORK_INTERFACE=\"\"\n\n\n; Use a regular expression in the name of a hidden network interface (e.g. HIDE_NETWORK_INTERFACE=\"docker.*\")\n; - true : use a regular expression\n; - false : do not use a regular expression\n;\nHIDE_NETWORK_INTERFACE_REGEX=false\n\n\n; Show network interfaces infos for Linux, Android, FreeBSD, NetBSD, OpenBSD, Haiku, Darwin, SunOS, Minix, QNX and WinNT\n; Example : SHOW_NETWORK_INFOS=true\n;\nSHOW_NETWORK_INFOS=true\n\n\n; Hide MAC address in the infos\n;\nHIDE_NETWORK_MACADDR=false\n\n\n; Show bridge info in the network interface name\n;\nSHOW_NETWORK_BRIDGE=true\n\n\n; Sort network interfaces list\n;\nSORT_NETWORK_INTERFACES_LIST=false\n\n\n; Show network infos expanded\n;\nSHOW_NETWORK_INFOS_EXPANDED=false\n\n\n; Show network active speed\n; - true : display network active speed\n; - \"bps\" : display network active speed in bits per second (b/s, Kb/s, etc...)\n; - false : hide them\n;\nSHOW_NETWORK_ACTIVE_SPEED=false\n\n\n; ********************************\n;        UPS PARAMETERS\n; ********************************\n\n\n; Define the ups monitoring program\n; We support the following programs so far\n; - Apcupsd        http://www.apcupsd.com/\n; - Nut            http://www.networkupstools.org/\n; - SNMPups        monitoring via Simple Network Management Protocol (SNMP)\n; - PowerSoftPlus  http://ever.eu/\n; - pmset          based on the result of the command \"pmset -g batt\" on Darwin system\n;\n; Example: If you want to use Apcupsd : UPS_PROGRAM=\"Apcupsd\"\n;          If you want to use Apcupsd and Nut : UPS_PROGRAM=\"Apcupsd,Nut\"\n;\nUPS_PROGRAM=false\n\n\n; Apcupsd supports multiple UPSes\n; You can specify comma delimited list in the form <hostname>:<port> or <ip>:<port>. The defaults are: \"127.0.0.1:3551\"\n; See the following parameters in apcupsd.conf: NETSERVER, NISIP, NISPORT\n; It uses the defaults if not specified.\n;\nUPS_APCUPSD_LIST=false\n\n\n; define how to access the Apcupsd data\n; - \"command\" execute apcaccess command\n; - \"data\" for reading data from file data/upsapcupsd{ups_number}.tmp\n;    content is the output from \"apcaccess status\"\n;\nUPS_APCUPSD_ACCESS=\"command\"\n\n\n; Apcupsd has a CGI monitoring utility called apcupsd-cgi\n; You can set the parameter below to true if you have it installed - this will add apcupsd-cgi links to the UPS tree\n;\nUPS_APCUPSD_CGI_ENABLE=false\n\n\n; Nut supports multiple UPSes\n; You can specify comma delimited list in the form <hostname>:<port> or <ip>:<port>. The defaults are: \"127.0.0.1:3493\"\n; See the following parameters in upsd.conf: LISTEN\n; It uses the defaults if not specified.\n;\nUPS_NUT_LIST=false\n\n\n; define how to access the Nut data\n; - \"command\" execute upsc command\n; - \"data\" for reading data from file data/upsnut{ups_number}.tmp\n;    content is the output from \"upsc {upsname}\"\n;\nUPS_NUT_ACCESS=\"command\"\n\n\n; SNMPups supports multiple UPSes\n; You can specify comma delimited list in the form <hostname>:<port> or <ip>:<port>. The default port is 161\n; List must be specified.\n;\nUPS_SNMPUPS_LIST=false\n\n\n; define how to access the SNMP data\n; - \"php-snmp\" execute php snmprealwalk function (php-snmp module must be installed)\n; - \"command\" execute snmpwalk command\n; - \"data\" for reading data from file data/upssnmpups{ups_number}.tmp\n;    content is the output from:\n;     \"snmpwalk -Ona -c public -v 1 -r 0 -t 3 {upsaddress} .1.3.6.1.4.1.318.1.1.1.1>upssnmpups{ups_number}.tmp\n;      snmpwalk -Ona -c public -v 1 -r 0 -t 3 {upsaddress} .1.3.6.1.4.1.318.1.1.1.2>>upssnmpups{ups_number}.tmp\n;      snmpwalk -Ona -c public -v 1 -r 0 -t 3 {upsaddress} .1.3.6.1.4.1.318.1.1.1.3>>upssnmpups{ups_number}.tmp\n;      snmpwalk -Ona -c public -v 1 -r 0 -t 3 {upsaddress} .1.3.6.1.4.1.318.1.1.1.4>>upssnmpups{ups_number}.tmp\"\n;\nUPS_SNMPUPS_ACCESS=\"php-snmp\"\n\n\n; define how to access the PowerSoftPlus data\n; - \"command\" execute powersoftplus command\n; - \"data\" for reading data from file data/upspowersoftplus.tmp\n;    content is the output from \"powersoftplus -p\"\n;\nUPS_POWERSOFTPLUS_ACCESS=\"command\"\n\n\n; define how to access the pmset data\n; - \"command\" execute pmset command\n; - \"data\" for reading data from file data/upspmset.tmp\n;    content is the output from \"pmset -g batt\"\n;\nUPS_PMSET_ACCESS=\"command\"\n\n\n; ********************************\n;       MISC PARAMETERS\n; ********************************\n\n\n; define how to access the dmidecode data\n; - \"data\" read data from file data/dmidecode.tmp; content is the output from \"dmidecode -t 17\")\n; - \"command\" execute command: dmidecode -t 17\n;   If access error try execute first: chmod 4755 /usr/sbin/dmidecode\n;   This method is not recommended for safety reasons!\n;\nDMIDECODE_ACCESS=\"command\"\n\n\n; ********************************\n;    SENSORS PROGRAMS PARAMETERS\n; ********************************\n\n\n[sensor_hddtemp]\n; Hddtemp motherboard monitoring program configuration\n;\n; If the hddtemp program is available we can read the temperature, if hdd is smart capable\n; !!ATTENTION!! hddtemp might be a security issue\n; - ACCESS=\"command\"  //read data from 'hddtemp' command (must be set suid)\n; - ACCESS=\"tcp\"  //read data from hddtemp deamon (localhost:7634)\n;\nACCESS=\"command\"\n\n[sensor_lmsensors]\n; LMSensors motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'sensors' command\n; - ACCESS=\"data\"  //read data from file data/lmsensors.tmp\n;\nACCESS=\"command\"\n\n[sensor_healthd]\n; Healthd motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'healthdc' command\n; - ACCESS=\"data\"  //read data from file data/healthd.tmp\n;\nACCESS=\"command\"\n\n[sensor_mbmon]\n; MBMon motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'mbmon -c 1 -r' command\n; - ACCESS=\"data\"  //read data from file data/mbmon.tmp\n; - ACCESS=\"tcp\"  //read data from mbmon deamon (localhost:411)\n;\nACCESS=\"command\"\n\n[sensor_ipmitool]\n; IPMItool motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'ipmitool sensor -v' command\n;                     //if access error execute first: chmod 666 /dev/ipmi0\n; - ACCESS=\"data\"  //read data from file data/ipmitool.tmp\n;\nACCESS=\"command\"\n\n[sensor_freeipmi]\n; FreeIPMI motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'ipmi-sensors --output-sensor-thresholds' program\n; - ACCESS=\"data\"  //read data from file data/freeipmi.tmp\n;\nACCESS=\"command\"\n\n[sensor_ipmiutil]\n; IPMIutil motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'ipmiutil sensor -stw' command\n;                     //if access error execute first: chmod 666 /dev/ipmi0\n; - ACCESS=\"data\"  //read data from file data/ipmiutil.tmp\n;\nACCESS=\"command\"\n\n[sensor_ipmicfg]\n; IPMIcfg motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'ipmicfg -sdr' and/or 'ipmicfg -psfruinfo' command\n; - ACCESS=\"data\"  //read data from file data/ipmicfg.tmp (output from: \"ipmicfg -sdr>ipmicfg.tmp; ipmicfg -psfruinfo>>ipmicfg.tmp\")\n;\nACCESS=\"command\"\n\n; Execute power supply FRU health info\n; - true   : execute 'ipmicfg --psfruinfo'\n; - false  : don't execute 'ipmicfg --psfruinfo'\n; - \"only\" : execute 'ipmicfg --psfruinfo' and don't execute 'ipmicfg -sdr'\n;\nPSFRUINFO=true\n\n[sensor_k8temp]\n; K8Temp motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'k8temp' command\n; - ACCESS=\"data\"  //read data from file data/k8temp.tmp\n;\nACCESS=\"command\"\n\n[sensor_thermalzone]\n; ThermalZone motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //on Linux information is retrieved everytime through system files / on WinNT information is retrieved everytime through WMI\n; - ACCESS=\"data\"  //read data from file data/thermalzone.tmp (output of WinNT command \"wmic /namespace:\\\\root\\wmi PATH MSAcpi_ThermalZoneTemperature get CriticalTripPoint,CurrentTemperature,InstanceName\")\n;\nACCESS=\"command\"\n\n[sensor_speedfan]\n; SpeedFan motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'speedfanget' command\n; - ACCESS=\"data\"  //read data from file data/speedfan.tmp\n;\nACCESS=\"command\"\n\n[sensor_nvidiasmi]\n; NvidiaSMI motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'nvidia-smi -q' command\n; - ACCESS=\"data\"  //read data from file data/nvidiasmi.tmp\n;\nACCESS=\"command\"\n\n;The path to nvidia-smi.exe for the WinNT system\n;\nEXE_PATH=\"c:\\Program Files\\NVIDIA Corporation\\NVSMI\\nvidia-smi.exe\"\n\n\n; ********************************\n;        PLUGINS PARAMETERS\n; ********************************\n\n\n[bat]\n; BAT Plugin configuration\n\n; define how to access the battery statistic data\n; - \"command\" on Linux and Android read data from /proc/acpi/battery/BAT0/info and /proc/acpi/battery/BAT0/state\n;                or on newer kernel from /sys/class/power_supply/\n;                or from 'upower -d' command (if UPOWER is true)\n;             on Android read data from /sys/class/power_supply/ \n;             on Darwin read data from 'ioreg -w0 -l -n AppleSmartBattery -r' command\n;             on FreeBSD read data from 'acpiconf -i batt' command\n;             on OpenBSD read data from 'sysctl hw.sensors.acpibat0' command\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"bat_info.tmp\" and \"bat_state.tmp\"; content is the output\n;          from \"cat /proc/acpi/battery/BAT0/info\" and \"cat /proc/acpi/battery/BAT0/state\")\n;\nACCESS=\"command\"\n\n; on Lunux try executing 'upower -d' command\n; \nUPOWER=false\n\n; Show battery serial number\n;\nSHOW_SERIAL=false\n\n\n[raid]\n; Raid Plugin configuration\n\n; define how to access the raid statistic data\n; - \"command\" - mdstat:            file \"/proc/mdstat\" is read (on Linux only)\n;             - dmraid:            command \"dmraid -s -vv 2>&1\" is run (on Linux only)\n;                                  If access error try execute first: chmod 4755 /sbin/dmraid\n;                                  This method is not recommended for safety reasons!\n;             - megactl:           command \"megactl -vv\" is run (on Linux only)\n;                                  downloaded from http://sourceforge.net/projects/megactl/ or http://github.com/hmage/megactl or http://github.com/namiltd/megactl\n;                                  If permission error try execute first: chmod 4755 /usr/sbin/megactl\n;             - megasasctl:        command \"megasasctl -vv\" is run (on Linux only)\n;                                  downloaded from http://sourceforge.net/projects/megactl/ or http://github.com/hmage/megactl or http://github.com/namiltd/megactl\n;                                  If permission error try execute first: chmod 4755 /usr/sbin/megasasctl\n;             - megaclisas-status: command \"megaclisas-status\" is run (or \"megaclisas-status.py\" on WinNT)\n;                                  downloaded from http://hwraid.le-vert.net or https://github.com/eLvErDe/hwraid or https://github.com/ElCoyote27/hwraid \n;             - 3ware-status:      command \"3ware-status\" is run (or 3ware-status.py\" on WinNT)\n;                                  downloaded from http://hwraid.le-vert.net or https://github.com/eLvErDe/hwraid or https://github.com/ElCoyote27/hwraid\n;             - graid:             command \"graid list\" is run (on FreeBSD only)\n;             - zpool:             command \"zpool status\" is run\n;             - storcli:           command \"storcli64 /call show all; storcli64 /call /vall show all\" or \"storcli /call show all; storcli /call /vall show all\" is run\n;             - perccli:           command \"perccli64 /call show all; perccli64 /call /vall show all\" or \"perccli /call show all; perccli /call /vall show all\" is run\n;             - idrac:             command \"snmpwalk -Ona -c public -v 1 -r 0 -t 3 {device} .1.3.6.1.4.1.674.10892.5.5.1.20\" is run\n; - \"php-snmp\"- idrac:             execute php snmprealwalk function (php-snmp module must be installed)\n;             - for others the option is inactive (uses \"command\" instead)\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;         with the filename \"raidmdstat.tmp\" or \"raiddmraid.tmp\" or \"raidmegactl.tmp\" or \"raidmegasasctl.tmp\" \n;         or \"raidmegaclisas-status.tmp\" or \"raidgraid.tmp\" or \"raidzpool.tmp\" or \"raidstorcli.tmp\" or \"raidperccli.tmp\"\n;         or \"raididrac{device_number}.tmp\")\n;\nACCESS=\"command\"\n\n; define possible programs\nPROGRAM=\"mdstat,dmraid,megactl,megasasctl,megaclisas-status,3ware-status,graid,zpool,storcli,perccli,idrac\"\n\n; Hide RAID devices\n; Example : HIDE_DEVICES=\"md127\"\n;\nHIDE_DEVICES=\"\"\n\n;\n; string contains a list of IDRAC devices that are checked\n; Example : IDRAC_DEVICES=\"192.168.0.120\"\n;\nIDRAC_DEVICES=\"\"\n\n[ps]\n; PS Plugin configuration\n\n; define how to access the ps statistic data\n; - \"command\" ps command is run everytime the block gets refreshed or build / on WinNT\n;             information is retrieved everytime through WMI\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"ps.tmp\"; content is the output from \"ps -axo pid,ppid,pmem,pcpu,args\")\n;\nACCESS=\"command\"\n\n; Memory Usage info\n;\nMEMORY_USAGE=true\n\n; CPU Usage info\n;\nCPU_USAGE=true\n\n; Show kthreadd child list expanded\n;\nSHOW_KTHREADD_EXPANDED=false\n\n; Show PID 1 child list expanded\n;\nSHOW_PID1CHILD_EXPANDED=false\n\n\n[psstatus]\n; PSStatus Plugin configuration\n\n; define how to access the psstatus statistic data\n; - \"command\" pidof command is run everytime the block gets refreshed or build \n;             / on WinNT information is retrieved everytime through WMI\n; - \"data\" a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"psstatus.tmp\"; content is the output from\n;   <code>for ps in \"apache2\" \"mysqld\" \"sshd\"; do echo $ps \"|\" `pidof -s -x \"$ps\"`; done</code>\n;\nACCESS=\"command\"\n\n; Regular expression search in the process name (e.g. \"ddclient.*\") for non-WinNT systems \n; - true : Regular expression search (used pgrep command)\n; - false : Normal search (used pidof command)\n;\nUSE_REGEX=false\n\n; controls which processes are checked if they are running\n;\n; string contains a list of process names that are checked, names are seperated by a comma (on WinNT names must end with '.exe')\n;\nPROCESSES=\"mysqld, sshd, explorer.exe\"\n\n\n[quotas]\n; Quotas Plugin configuration\n\n; define how to access the repquota statistic data\n; - \"command\" repquota command is run everytime the block gets refreshed or build\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation with the filename \"quotas.tmp\"; content is the output from \"repquota -au\")\n;\nACCESS=\"command\"\n\n\n[smart]\n; SMART Plugin configuration\n\n; Smartctl program\n; If the smartctl program is available we can read S.M.A.R.T informations\n; - \"command\" smartctl command is run everytime the block gets refreshed or build\n; if error: Smartctl open device: /dev/sda failed: Permission denied\n;      Not recommended method:\n;               execute: chmod 4755 /usr/sbin/smartctl\n;      Second method:\n;            try to set: SUDO_COMMANDS=\"smartctl\" and add to file /etc/sudoers line: apache ALL = (ALL) NOPASSWD: /usr/sbin/smartctl\n; - \"data\" (a file must be available in the data directory of the\n;          phpsysinfo installation with the filename \"smart{disk_number}.tmp\";\n;          content is the output from \"smartctl --all device\"\n;          or on WinNT only from \"wmic /namespace:\\\\root\\wmi path MSStorageDriver_ATAPISmartData get VendorSpecific | more +{disk_number}\")\n; - \"wmi\" information is retrieved everytime through WMI (WinNT only)\n;\nACCESS=\"command\"\n\n; Smartctl devices to monitor\n; If the smartctl support is enabled, those disks information will be displayed\n; - DEVICES=\"/dev/hda,/dev/hdb\"  //Will display those two disks informations\n; You also can specify --device option value  for smartctl command surrounded by parentheses eg:\n; - DEVICES=\"(marvell)/dev/sda\"\n; or\n; - DEVICES=\"(megaraid.0)/dev/sda\" //comma in --device option value is replaced by a dot\n;\nDEVICES=\"/dev/sda, /dev/sdb\"\n\n; Smartctl ID# and column name from \"Vendor Specific SMART Attributes with Thresholds\" table\n; If the smartctl support is enabled, enter the ID#-COLUMN_NAME from \"Vendor Specific SMART Attributes with Thresholds\" table from smartctl output.\n; or for no SCSI devices: ID#-COLUMN_NAME-REPLACEMENT_ID# where REPLACEMENT_ID# is an alternative ID number.\n; COLUMN_NAME of this ID# will be displayed in the phpsysinfo S.M.A.R.T table. If you want RAW_VALUE to be displayed for the temperature (ID# 194) enter 194-RAW_VALUE\n; - IDS=\"194-VALUE,4-VALUE,009-RAW_VALUE\"  //ID#-COLUMN_NAME, ID#-COLUMN_NAME, etc...\n; The additional attributes:\n; ATA Error Count is marked as 0-RAW_VALUE\n; Non-medium Error Count is marked as 255-RAW_VALUE\n;\nIDS=\"005-RAW_VALUE,194-RAW_VALUE,009-RAW_VALUE,012-RAW_VALUE,193-RAW_VALUE-225,001-RAW_VALUE,007-RAW_VALUE,200-RAW_VALUE,197-RAW_VALUE,198-RAW_VALUE,0-RAW_VALUE\"\n\n\n[snmppinfo]\n; SNMPPInfo Plugin configuration\n\n; define how to access the SNMP Printer Info statistic data\n; - \"php-snmp\" execute php snmprealwalk function (php-snmp module must be installed)\n; - \"command\" execute snmpwalk command\n; - \"data\" a file must be available in the data directory of the\n;          phpsysinfo installation with the filename \"snmppinfo{printer_number}.tmp\";\n; content is the output from:\n;    LANG=C LC_ALL=C snmpwalk -On -c public -v 1 -r 0 -t 3 {printer_address} .1.3.6.1.2.1.1.5 > snmppinfo{printer_number}.tmp\n;    LANG=C LC_ALL=C snmpwalk -On -c public -v 1 -r 0 -t 3 {printer_address} .1.3.6.1.4.1.367.3.2.1.2.24.1.1 >> snmppinfo{printer_number}.tmp\n;    LANG=C LC_ALL=C snmpwalk -On -c public -v 1 -r 0 -t 3 {printer_address} .1.3.6.1.2.1.43.11.1.1 >> snmppinfo{printer_number}.tmp\n;    LANG=C LC_ALL=C snmpwalk -On -c public -v 1 -r 0 -t 3 {printer_address} .1.3.6.1.2.1.43.18.1.1 >> snmppinfo{printer_number}.tmp\n;\nACCESS=\"php-snmp\"\n\n;define the Printer devices\n;\n; string contains a list of printer addresses that are checked\n;\nDEVICES=\"192.168.0.5, 192.168.0.9\"\n\n\n[updatenotifier]\n; Update Notifier Plugin configuration\n\n; define how to access the updatenotifier statistic data\n; - \"command\" execute command /usr/lib/update-notifier/apt-check\n; - \"data\" reads data from file defined in FILE parameter\n;\nACCESS=\"data\"\n\n; define the update info file format\n; - true: Ubuntu Landscape format (file: /var/lib/update-notifier/updates-available)\n; - false: universal format   (format: A;B)\n;          A: total packages to update\n;          B: security packages to update\n;\nUBUNTU_LANDSCAPE_FORMAT=true\n\n; define the update info file. The default is: /var/lib/update-notifier/updates-available\n;\nFILE=\"/var/lib/update-notifier/updates-available\"\n\n\n[uprecords]\n; Uprecords Plugin configuration\n\n; define how to access the uprecords statistic data\n; - \"command\" uprecords command is run everytime the block gets refreshed or build\n;             if access error try execute first: chmod 4755 /usr/bin/uprecords\n;             This method is not recommended for safety reasons!\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"uprecords.tmp\"; content is the output from \"TZ=GMT uprecords -a -w\")\n;\nACCESS=\"command\"\n\n; define the maximum number of entries to show (for command access)\n; default is 10\n;\nMAX_ENTRIES = 10\n\n; define the short mode (do not print extra statistics)\n; default is false\n;\nSHORT_MODE = false\n\n; denote current system session by asterisk (* at the end) instead  by the arrow (-> at the beginning)\n; default is false\n;\nDENOTE_BY_ASTERISK = false\n\n\n[viewer]\n; Viewer Plugin configuration\n\n; define how to access the data\n; - \"command\" COMMAND command is run everytime the block gets refreshed or build\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation with the filename \"viewer.tmp\")\n;\nACCESS=\"command\"\n\n; define COMMAND name (for command access)\n; eg:\n; - \"iptables-save\" iptables-save command is run everytime the block gets refreshed or build (Linux)\n;                   if access error try to set: SUDO_COMMANDS=\"iptables-save\" and add to file /etc/sudoers line: apache ALL = (ALL) NOPASSWD: /sbin/iptables-save\n; - \"systeminfo\"    systeminfo command is run everytime the block gets refreshed or build (WinNT)\n;\n\nCOMMAND=\"\"\n\n; define COMMAND parameters (for command access)\n;\nPARAMS=\"\"\n\n[pingtest]\n; PingTest Plugin configuration\n\n; define how to access the psstatus statistic data\n; - \"command\" ping command is run everytime the block gets refreshed or build \n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"pingtest.tmp\")\n;\nACCESS=\"command\"\n\n;define the Addresses\n;\n; string contains a list of addresses that are checked\n; Example : ADDRESSES=\"127.0.0.1,8.8.8.8\"\n;\nADDRESSES=\"\"\n\n; Define ping timeout in seconds\n; - 0 : default ping command timeout\n; - 3 : 3 seconds\n; Default is 2 seconds\n;\nTIMEOUT=2\n\n[stablebit]\n; StableBit Plugin configuration\n\n; Show or hide disks serial number\n;\nSHOW_SERIAL=false\n\n[hyperv]\n; HyperV Plugin configuration\n\n; define how to access the ps statistic data\n; - \"command\" information is retrieved through WMI\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"hyperv.tmp\")\n;\nACCESS=\"command\"\n\n[docker]\n; Docker Plugin configuration\n\n; define how to access the docker statistic data\n; - \"command\" docker command is run everytime the block gets refreshed or build\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"docker.tmp\"; content is the output from \"docker stats --no-stream --format 'table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.MemPerc}}\\t{{.NetIO}}\\t{{.BlockIO}}\\t{{.PIDs}}'\")\n;\nACCESS=\"command\"\n", "<?php\nif (!defined('PSI_CONFIG_FILE')) {\n    /**\n     * phpSysInfo version\n     */\n    define('PSI_VERSION', '3.4.x');\n    /**\n     * phpSysInfo configuration\n     */\n    define('PSI_CONFIG_FILE', PSI_APP_ROOT.'/phpsysinfo.ini');\n\n    define('ARRAY_EXP', '/^return array \\([^;]*\\);$/'); //array expression search\n\n    if (!is_readable(PSI_CONFIG_FILE)) {\n        echo \"ERROR: phpsysinfo.ini does not exist or is not readable by the webserver in the phpsysinfo directory\";\n        die();\n    } elseif (!($config = @parse_ini_file(PSI_CONFIG_FILE, true))) {\n        echo \"ERROR: phpsysinfo.ini file is not parsable\";\n        die();\n    } else {\n        foreach ($config as $name=>$group) {\n            if (strtoupper($name)==\"MAIN\") {\n                $name_prefix='PSI_';\n            } elseif (strtoupper(substr($name, 0, 7))==\"SENSOR_\") {\n                $name_prefix='PSI_'.strtoupper($name).'_';\n            } else {\n                $name_prefix='PSI_PLUGIN_'.strtoupper($name).'_';\n            }\n            foreach ($group as $param=>$value) {\n                if ((trim($value)===\"\") || (trim($value)===\"0\")) {\n                    define($name_prefix.strtoupper($param), false);\n                } elseif (trim($value)===\"1\") {\n                    define($name_prefix.strtoupper($param), true);\n                } else {\n                    if ((($paramup = strtoupper($param)) !== 'WMI_PASSWORD') && ($paramup !== 'SSH_PASSWORD') && strstr($value, ',')) {\n                        define($name_prefix.$paramup, 'return '.var_export(preg_split('/\\s*,\\s*/', trim($value), -1, PREG_SPLIT_NO_EMPTY), 1).';');\n                    } else {\n                        define($name_prefix.$paramup, trim($value));\n                    }\n                }\n            }\n        }\n    }\n\n    if (defined('PSI_ALLOWED') && is_string(PSI_ALLOWED)) {\n        if (preg_match(ARRAY_EXP, PSI_ALLOWED)) {\n            $allowed = eval(strtolower(PSI_ALLOWED));\n        } else {\n            $allowed = array(strtolower(PSI_ALLOWED));\n        }\n\n        if (isset($_SERVER[\"HTTP_X_FORWARDED_FOR\"])) {\n            $ip = $_SERVER[\"HTTP_X_FORWARDED_FOR\"];\n        } else {\n            if (isset($_SERVER[\"HTTP_CLIENT_IP\"])) {\n                $ip = $_SERVER[\"HTTP_CLIENT_IP\"];\n            } else {\n                $ip = $_SERVER[\"REMOTE_ADDR\"];\n            }\n        }\n        $ip = preg_replace(\"/^::ffff:/\", \"\", strtolower($ip));\n\n        $ip_decimal = ip2long($ip);\n        if ($ip_decimal === false) {\n            echo \"Client IP wrong address (\".$ip.\"). Client not allowed.\";\n            die();\n        }\n\n        // code based on https://gist.github.com/tott/7684443\n        $was = false;\n        foreach ($allowed as $allow) {\n            if (strpos($allow, '/') === false) {\n                    $was = ($allow === $ip);\n            } else {\n                  list($allow, $netmask) = explode('/', $allow, 2);\n                  $allow_decimal = ip2long($allow);\n                  $wildcard_decimal = pow(2, (32 - $netmask)) - 1;\n                  $netmask_decimal = ~$wildcard_decimal;\n                $was = (($ip_decimal & $netmask_decimal) === ($allow_decimal & $netmask_decimal));\n            }\n            if ($was) {\n               break;\n            }\n        }\n\n        if (!$was) {\n            echo \"Client IP address (\".$ip.\") not allowed.\";\n            die();\n        }\n    }\n\n    /* default error handler */\n    if (function_exists('errorHandlerPsi')) {\n        restore_error_handler();\n    }\n\n    /* fatal errors only */\n    $old_err_rep = error_reporting();\n    error_reporting(E_ERROR);\n\n    /* get git revision */\n    if (file_exists(PSI_APP_ROOT.'/.git/HEAD')) {\n        $contents = @file_get_contents(PSI_APP_ROOT.'/.git/HEAD');\n        if ($contents && preg_match(\"/^ref:\\s+(.*)\\/([^\\/\\s]*)/m\", $contents, $matches)) {\n            $contents = @file_get_contents(PSI_APP_ROOT.'/.git/'.$matches[1].\"/\".$matches[2]);\n            if ($contents && preg_match(\"/^([^\\s]*)/m\", $contents, $revision)) {\n                define('PSI_VERSION_STRING', PSI_VERSION .\"-\".$matches[2].\"-\".substr($revision[1], 0, 7));\n            } else {\n                define('PSI_VERSION_STRING', PSI_VERSION .\"-\".$matches[2]);\n            }\n        }\n    }\n    /* get svn revision */\n    if (!defined('PSI_VERSION_STRING') && file_exists(PSI_APP_ROOT.'/.svn/entries')) {\n        $contents = @file_get_contents(PSI_APP_ROOT.'/.svn/entries');\n        if ($contents && preg_match(\"/dir\\n(.+)/\", $contents, $matches)) {\n            define('PSI_VERSION_STRING', PSI_VERSION.\"-r\".$matches[1]);\n        } else {\n            define('PSI_VERSION_STRING', PSI_VERSION);\n        }\n    }\n    if (!defined('PSI_VERSION_STRING')) {\n        define('PSI_VERSION_STRING', PSI_VERSION);\n    }\n\n    if (defined('PSI_ROOTFS') && is_string(PSI_ROOTFS) && (PSI_ROOTFS !== '') && (PSI_ROOTFS !== '/')) {\n        $rootfs = PSI_ROOTFS;\n        if ($rootfs[0] === '/') {\n            define('PSI_ROOT_FILESYSTEM', $rootfs);\n        } else {\n            define('PSI_ROOT_FILESYSTEM', '');\n        }\n    } else {\n        define('PSI_ROOT_FILESYSTEM', '');\n    }\n\n    if (!defined('PSI_OS')) { //if not overloaded in phpsysinfo.ini\n        /* get Linux code page */\n        if ((PHP_OS == 'Linux') || (PHP_OS == 'GNU')) {\n            if (file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/sysconfig/i18n')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/default/locale')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/locale.conf')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/sysconfig/language')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/profile.d/lang.sh')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/profile.d/i18n.sh')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/profile')) {\n                $contents = @file_get_contents($fname);\n            } else {\n                $contents = false;\n                if (PHP_OS == 'Linux') {\n                    if (file_exists(PSI_ROOT_FILESYSTEM.'/system/build.prop')) { //Android\n                        define('PSI_OS', 'Android');\n                        if ((PSI_ROOT_FILESYSTEM === '') && function_exists('exec') && @exec('uname -o 2>/dev/null', $unameo) && (sizeof($unameo)>0) && (($unameo0 = trim($unameo[0])) != \"\")) {\n                            define('PSI_UNAMEO', $unameo0); // is Android on Termux\n                        }\n                        if ((PSI_ROOT_FILESYSTEM === '') && !defined('PSI_MODE_POPEN')) { //if not overloaded in phpsysinfo.ini\n                            if (!function_exists(\"proc_open\")) { //proc_open function test by executing 'pwd' bbbmand\n                                define('PSI_MODE_POPEN', true); //use popen() function - no stderr error handling (but with problems with timeout)\n                            } else {\n                                $out = '';\n                                $err = '';\n                                $pipes = array();\n                                $descriptorspec = array(0=>array(\"pipe\", \"r\"), 1=>array(\"pipe\", \"w\"), 2=>array(\"pipe\", \"w\"));\n                                $process = proc_open(\"pwd 2>/dev/null \", $descriptorspec, $pipes);\n                                if (!is_resource($process)) {\n                                    define('PSI_MODE_POPEN', true);\n                                } else {\n                                    $w = null;\n                                    $e = null;\n\n                                    while (!(feof($pipes[1]) && feof($pipes[2]))) {\n                                        $read = array($pipes[1], $pipes[2]);\n\n                                        $n = stream_select($read, $w, $e, 5);\n\n                                        if (($n === false) || ($n === 0)) {\n                                            break;\n                                        }\n\n                                        foreach ($read as $r) {\n                                            if ($r == $pipes[1]) {\n                                                $out .= fread($r, 4096);\n                                            } elseif (feof($pipes[1]) && ($r == $pipes[2])) {//read STDERR after STDOUT\n                                                $err .= fread($r, 4096);\n                                            }\n                                        }\n                                    }\n\n                                    if (($out === null) || (trim($out) == \"\") || (substr(trim($out), 0, 1) != \"/\")) {\n                                        define('PSI_MODE_POPEN', true);\n                                    }\n                                    fclose($pipes[0]);\n                                    fclose($pipes[1]);\n                                    fclose($pipes[2]);\n                                    // It is important that you close any pipes before calling\n                                    // proc_close in order to avoid a deadlock\n                                    proc_close($process);\n                                }\n                            }\n                        }\n                    } elseif (file_exists(PSI_ROOT_FILESYSTEM.'/var/mobile/Library/Cydia/metadata.cb0')) { //jailbroken iOS with Cydia\n                        define('PSI_OS', 'Darwin');\n                    }\n                }\n            }\n            if (!(defined('PSI_SYSTEM_CODEPAGE') && defined('PSI_SYSTEM_LANG')) //also if both not overloaded in phpsysinfo.ini\n               && $contents && (preg_match('/^(LANG=\"?[^\"\\n]*\"?)/m', $contents, $matches)\n               || preg_match('/^RC_(LANG=\"?[^\"\\n]*\"?)/m', $contents, $matches)\n               || preg_match('/^\\s*export (LANG=\"?[^\"\\n]*\"?)/m', $contents, $matches))) {\n                if (!defined('PSI_SYSTEM_CODEPAGE')) {\n                    if (file_exists($vtfname = PSI_ROOT_FILESYSTEM.'/sys/module/vt/parameters/default_utf8')\n                       && (trim(@file_get_contents($vtfname)) === \"1\")) {\n                        define('PSI_SYSTEM_CODEPAGE', 'UTF-8');\n                    } elseif ((PSI_ROOT_FILESYSTEM === '') && function_exists('exec') && @exec($matches[1].' locale -k LC_CTYPE 2>/dev/null', $lines)) { //if not overloaded in phpsysinfo.ini\n                        foreach ($lines as $line) {\n                            if (preg_match('/^charmap=\"?([^\"]*)/', $line, $matches2)) {\n                                define('PSI_SYSTEM_CODEPAGE', $matches2[1]);\n                                break;\n                            }\n                        }\n                    }\n                }\n                if ((PSI_ROOT_FILESYSTEM === '') && !defined('PSI_SYSTEM_LANG') && function_exists('exec') && @exec($matches[1].' locale 2>/dev/null', $lines2)) { //also if not overloaded in phpsysinfo.ini\n                    foreach ($lines2 as $line) {\n                        if (preg_match('/^LC_MESSAGES=\"?([^\\.\"@]*)/', $line, $matches2)) {\n                            $lang = \"\";\n                            if (is_readable(PSI_APP_ROOT.'/data/languages.ini') && ($langdata = @parse_ini_file(PSI_APP_ROOT.'/data/languages.ini', true))) {\n                                if (isset($langdata['Linux']['_'.$matches2[1]])) {\n                                    $lang = $langdata['Linux']['_'.$matches2[1]];\n                                }\n                            }\n                            if ($lang == \"\") {\n                                $lang = 'Unknown';\n                            }\n                            define('PSI_SYSTEM_LANG', $lang.' ('.$matches2[1].')');\n                            break;\n                        }\n                    }\n                }\n            }\n        } elseif (PHP_OS == 'Haiku') {\n            if (!(defined('PSI_SYSTEM_CODEPAGE') && defined('PSI_SYSTEM_LANG')) //also if both not overloaded in phpsysinfo.ini\n                && (PSI_ROOT_FILESYSTEM === '') && function_exists('exec') && @exec('locale --message 2>/dev/null', $lines)) {\n                foreach ($lines as $line) {\n                    if (preg_match('/^\"?([^\\.\"]*)\\.?([^\"]*)/', $line, $matches2)) {\n\n                        if (!defined('PSI_SYSTEM_CODEPAGE') && isset($matches2[2]) && ($matches2[2] !== null) && (trim($matches2[2]) != \"\")) { //also if not overloaded in phpsysinfo.ini\n                            define('PSI_SYSTEM_CODEPAGE', $matches2[2]);\n                        }\n\n                        if (!defined('PSI_SYSTEM_LANG')) { //if not overloaded in phpsysinfo.ini\n                            $lang = \"\";\n                            if (is_readable(PSI_APP_ROOT.'/data/languages.ini') && ($langdata = @parse_ini_file(PSI_APP_ROOT.'/data/languages.ini', true))) {\n                                if (isset($langdata['Linux']['_'.$matches2[1]])) {\n                                    $lang = $langdata['Linux']['_'.$matches2[1]];\n                                }\n                            }\n                            if ($lang == \"\") {\n                                $lang = 'Unknown';\n                            }\n                            define('PSI_SYSTEM_LANG', $lang.' ('.$matches2[1].')');\n                        }\n                        break;\n                    }\n                }\n            }\n        } elseif ((PHP_OS == 'Darwin') || (defined('PSI_OS') && (PSI_OS == 'Darwin'))){\n            if (!defined('PSI_SYSTEM_LANG') //if not overloaded in phpsysinfo.ini\n                && (PSI_ROOT_FILESYSTEM === '') && function_exists('exec') && @exec('defaults read /Library/Preferences/.GlobalPreferences AppleLocale 2>/dev/null', $lines)) {\n                $lang = \"\";\n                if (is_readable(PSI_APP_ROOT.'/data/languages.ini') && ($langdata = @parse_ini_file(PSI_APP_ROOT.'/data/languages.ini', true))) {\n                    if (isset($langdata['Linux']['_'.$lines[0]])) {\n                        $lang = $langdata['Linux']['_'.$lines[0]];\n                    }\n                }\n                if ($lang == \"\") {\n                    $lang = 'Unknown';\n                }\n                define('PSI_SYSTEM_LANG', $lang.' ('.$lines[0].')');\n            }\n        }\n    }\n\n    /* maximum time in seconds a script is allowed to run before it is terminated by the parser */\n    if (defined('PSI_MAX_TIMEOUT')) {\n        ini_set('max_execution_time', max(intval(PSI_MAX_TIMEOUT), 0));\n    } else {\n        ini_set('max_execution_time', 30);\n    }\n\n    /* executeProgram() timeout value in seconds */\n    if (defined('PSI_EXEC_TIMEOUT')) {\n        define('PSI_EXEC_TIMEOUT_INT', max(intval(PSI_EXEC_TIMEOUT), 1));\n    } else {\n        define('PSI_EXEC_TIMEOUT_INT', 30);\n    }\n\n    /* snmprealwalk() and executeProgram(\"snmpwalk\") number of seconds until the first timeout */\n    if (defined('PSI_SNMP_TIMEOUT')) {\n        define('PSI_SNMP_TIMEOUT_INT', max(intval(PSI_SNMP_TIMEOUT), 1));\n    } else {\n        define('PSI_SNMP_TIMEOUT_INT', 3);\n    }\n\n    /* snmprealwalk() and executeProgram(\"snmpwalk\") number of times to retry if timeouts occur */\n    if (defined('PSI_SNMP_RETRY')) {\n        define('PSI_SNMP_RETRY_INT', max(intval(PSI_SNMP_RETRY), 0));\n    } else {\n        define('PSI_SNMP_RETRY_INT', 0);\n    }\n\n    if (!defined('PSI_OS')) {\n        define('PSI_OS', PHP_OS);\n    }\n\n    if (!defined('PSI_SYSTEM_LANG')) {\n        define('PSI_SYSTEM_LANG', null);\n    }\n    if (!defined('PSI_SYSTEM_CODEPAGE')) { //if not overloaded in phpsysinfo.ini\n        if ((PSI_OS=='Android') || (PSI_OS=='Darwin')) {\n            define('PSI_SYSTEM_CODEPAGE', 'UTF-8');\n        } elseif (PSI_OS=='Minix') {\n            define('PSI_SYSTEM_CODEPAGE', 'CP437');\n        } elseif (PSI_OS!='WINNT') {\n            define('PSI_SYSTEM_CODEPAGE', null);\n        }\n    }\n\n    if (!defined('PSI_JSON_ISSUE')) { //if not overloaded in phpsysinfo.ini\n        if (!extension_loaded(\"simplexml\")) {\n            die(\"phpSysInfo requires the simplexml extension to php in order to work properly.\");\n        }\n        if (simplexml_load_string(\"<A><B><C/></B>\\n</A>\") !== simplexml_load_string(\"<A><B><C/></B></A>\")) { // json_encode issue test\n            define('PSI_JSON_ISSUE', true); // Problem must be solved\n        }\n    }\n\n    /* restore error level */\n    error_reporting($old_err_rep);\n\n    /* restore error handler */\n    if (function_exists('errorHandlerPsi')) {\n        set_error_handler('errorHandlerPsi');\n    }\n}\n"], "fixing_code": ["; PSI Config File\n;\n; @category  PHP\n; @package   PSI\n; @author    Michael Cramer <BigMichi1@users.sourceforge.net>\n; @copyright 2009 phpSysInfo\n; @license   http://opensource.org/licenses/gpl-2.0.php GNU General Public License version 2, or (at your option) any later version\n; @version   SVN: $Id: phpsysinfo.ini.new 705 2012-11-11 00:33:29Z namiltd $\n; @link      http://phpsysinfo.sourceforge.net\n\n[main]\n; ********************************\n;        MAIN PARAMETERS\n; ********************************\n\n; Turn on debugging of some functions and include errors and warnings in xml and provide a popup for displaying errors\n; - false : no debug information are stored in xml or displayed\n; - true : debug information stored in xml and displayed *be careful if set this to true, may include sensitive information from your pc*\n;\nDEBUG=false\n\n; Turn on logging/unlogging of functions executeProgram() and rfts()\n; example : executeProgram () and rfts () record the results to the \"/tmp/phpsysinfo.log\" file\n; LOG=\"/tmp/phpsysinfo.log\"\n; example : executeProgram () and rfts () read the results from the \"/tmp/phpsysinfo.log\" file\n; LOG=\"-/tmp/phpsysinfo.log\"\n; example : executeProgram () and rfts () read the results from the \"/tmp/phpsysinfo.log\" file\n; LOG=\"+/tmp/phpsysinfo.log\", if lack in the log file it runs normally\n;\nLOG=false\n\n; Turn on/off compression for JavaScript file\n; - JS_COMPRESSION=false  //no compression (recommended with slow processor)\n; - JS_COMPRESSION=\"None\"  //code minimizing\n; - JS_COMPRESSION=\"Normal\"  //code packing\n;\nJS_COMPRESSION=\"Normal\"\n\n; Additional paths where to look for installed programs\n; Example : ADD_PATHS=\"/opt/bin,/opt/sbin\"\n;\nADD_PATHS=false\n\n; List of IP addresses (IPv4) of clients authorized to run\n; Example : ALLOWED=\"127.0.0.1,192.168.1.48,192.168.0.0/24\" //allowed IP 127.0.0.1, 192.168.1.48 and 192.168.0.0/24\n;           ALLOWED=false //no IP checking\n;\nALLOWED=false\n\n; Enable JSONP data mode (e.g. /phpsysinfo/xml.php?plugin=complete&jsonp&callback=getData)\n; Disabled by default for security reasons.\n; - false : JSONP data mode disabled\n; - true : JSONP data mode enabled\n;\n;JSONP=false\n\n; List of sudo commands\n; Example : SUDO_COMMANDS=\"iptables-save\" //execute \"sudo iptables-save\" instead \"iptables-save\"\n;           SUDO_COMMANDS=false //no sudo commands\n;\nSUDO_COMMANDS=false\n\n; Order of data blocks\n; Example : BLOCKS=\"vitals,hardware,memory,filesystem,network,voltage,current,temperature,fans,power,other,ups\" or BLOCKS=true //default order\n;           BLOCKS=false //hide all blocks\n;\nBLOCKS=true\n\n; Maximum time in seconds a script is allowed to run before it is terminated by the parser\n;\n;MAX_TIMEOUT=30\n\n; executeProgram() timeout value in seconds\n;\n;EXEC_TIMEOUT=30\n\n; snmprealwalk() and executeProgram(\"snmpwalk\") number of seconds until the first timeout\n;\n;SNMP_TIMEOUT=3\n\n; snmprealwalk() and executeProgram(\"snmpwalk\") number of times to retry if timeouts occur\n;\n;SNMP_RETRY=0\n\n; Root path of the system\n; Example : ROOTFS=\"/rootfs\"\n;\n;ROOTFS=\"/\"\n\n\n; External Linux, GNU Hurd, DrayOS and FortiOS connection parameters via SSH\n; For safety reasons make sure that phpsysinfo.ini cannot be read by the network or other users!\n; These settings can also be entered for a specific plug-in so that only it connects to an external server\n; For safety reasons make sure that phpsysinfo.ini cannot be read by the network or other users!\n;\n;SSH_HOSTNAME=\"hostname:22\"\n;SSH_USER=\"username\"\n;SSH_PASSWORD=\"password\"\n;\n; Additional paths where to look for installed programs\n; Example : SSH_ADD_PATHS=\"/sbin,/usr/sbin\"\n;\n;SSH_ADD_PATHS=false\n;\n; Additional SSH options\n; Example : SSH_ADD_OPTIONS=\"KexAlgorithms=+diffie-hellman-group1-sha1,HostKeyAlgorithms=+ssh-dss,Ciphers=+3des-cbc\"\n;\n;SSH_ADD_OPTIONS=\"\"\n\n\n; External WinNT server connection parameters\n; Possibility available for WinNT and partly for LINUX (if wmic tool from wmic-linux or openvas-smb package is installed)\n; These settings can also be entered for a specific plug-in so that only it connects to an external server\n; For safety reasons make sure that phpsysinfo.ini cannot be read by the network or other users!\n;\n;WMI_HOSTNAME=\"hostname\"\n;WMI_USER=\"username\"\n;WMI_PASSWORD=\"password\"\n\n\n; Plugins that should be included in xml and output\n; List of plugins should look like \"plugin,plugin,plugin\". See /plugins directory\n; - PLUGINS=\"Raid,PS\"  //list of plugins\n; - PLUGINS=false  //no plugins\n; included plugins:\n; - Raid           - show the software, fake, zpool or megaraid RAID status\n; - PS             - show a process tree of all running processes\n; - PSStatus       - show a graphical representation if a process is running or not\n; - Quotas         - show a table with all quotas that are active and there current state\n; - SMART          - show S.M.A.R.T. information from drives that support it\n; - BAT            - show battery state on a laptop, tablet or phone\n; - UpdateNotifier - show update notifications (only for Ubuntu server)\n; - SNMPPInfo      - show printers info via SNMP\n; - Uprecords      - show uprecords info\n; - PingTest       - show Ping Test info\n; - StableBit      - show StableBit Scanner info (WinNT)\n; - DiskLoad       - show Disk Load info (WinNT)\n; - HyperV         - show Hyper-V info (WinNT)\n; - Docker         - show docker stats\n; - Viewer         - show output of any command or file viewer.tmp contents\n;\nPLUGINS=false\n\n\n; ********************************\n;       DISPLAY PARAMETERS\n; ********************************\n\n\n; Define the default display mode\n; auto: let user browser choose the mode\n; dynamic: use javascript to refresh data\n; static: static page (use metatag to reload page)\n; bootstrap: use twitter bootstrap template\n;\nDEFAULT_DISPLAY_MODE=\"auto\"\n\n\n; Define the default language\n;\nDEFAULT_LANG=\"en\"\n\n\n; Define the default template\n;\nDEFAULT_TEMPLATE=\"phpsysinfo\"\n\n\n; Define the default template for frontend \"bootstrap\"\n;\nDEFAULT_BOOTSTRAP_TEMPLATE=\"phpsysinfo\"\n\n\n; Show or hide language picklist\n;\nSHOW_PICKLIST_LANG=true\n\n\n; Show or hide template picklist\n;\nSHOW_PICKLIST_TEMPLATE=true\n\n\n; Show CPU list expanded\n;\nSHOW_CPULIST_EXPANDED=true\n\n\n; Show CPU info expanded\n;\nSHOW_CPUINFO_EXPANDED=false\n\n\n; Show memory infos expanded\n;\nSHOW_MEMORY_INFOS_EXPANDED=false\n\n\n; Show virtualizer info for Linux, Android and WinNT\n;\nSHOW_VIRTUALIZER_INFO=true\n\n\n; Hide loader for frontend \"bootstrap\"\n;\nHIDE_BOOTSTRAP_LOADER=false\n\n\n; Increase the body width for the \"dynamic\" frontend by pixels. The value should be even\n; - 0 : disabled\n; - 200 : wider by 200px\n; Default is 0 pixels\n;\nINCREASE_WIDTH=0\n\n\n; Define the interval for refreshing data in ms\n; - 0 : disabled\n; - 1000 : 1 second\n; Default is 60 seconds\n;\nREFRESH=60000\n\n\n; Show a graph for current cpuload\n; - true : displayed, but it's a performance hit (because we have to wait to get a value, 1 second)\n; - \"compact\" : displayed like above but in compact mode\n; - false : will not be displayed (also in Load Averages field)\n;\nLOAD_BAR=\"compact\"\n\n\n; Display the virtual host name and address\n; - Default is canonical host name and address\n; - Use USE_VHOST=true to display virtual host name.\n;\nUSE_VHOST=false\n\n\n; Controls the units & format for network, memory and filesystem\n; - 1 KiB = 2^10 bytes = 1,024 bytes\n; - 1 KB = 10^3 bytes = 1,000 bytes\n; - \"B\"     everything is in Byte\n; - \"PiB\"   everything is in PeBiByte\n; - \"TiB\"   everything is in TeBiByte\n; - \"GiB\"   everything is in GiBiByte\n; - \"MiB\"   everything is in MeBiByte\n; - \"KiB\"   everything is in KiBiByte\n; - \"auto_binary\" everything is automatic done if value is to big for, e.g MiB then it will be in GiB\n; - \"PB\"    everything is in PetaByte\n; - \"TB\"    everything is in TeraByte\n; - \"GB\"    everything is in GigaByte\n; - \"MB\"    everything is in MegaByte\n; - \"KB\"    everything is in KiloByte\n; - \"auto_decimal\" everything is automatic done if value is to big for, e.g MB then it will be in GB\n;\nBYTE_FORMAT=\"auto_binary\"\n\n\n; Format in which temperature is displayed\n; - \"c\"    shown in celsius\n; - \"f\"    shown in fahrenheit\n; - \"c-f\"  both shown first celsius and fahrenheit in braces\n; - \"f-c\"  both shown first fahrenheit and celsius in braces\n;\nTEMP_FORMAT=\"c\"\n\n\n; Show devices infos\n; Example : SHOW_DEVICES_INFOS=true\n;\nSHOW_DEVICES_INFOS=true\n\n\n; Show devices serial number\n; Example : SHOW_DEVICES_SERIAL=true\n;\nSHOW_DEVICES_SERIAL=false\n\n\n; Format in which datetime is displayed\n; - \"UTC\"    shown as UTC string\n; - \"locale\" shown as Locale string\n;\nDATETIME_FORMAT=\"UTC\"\n\n\n; ********************************\n;       SENSORS PARAMETERS\n; ********************************\n\n\n; Define the motherboard monitoring program\n; We support the following programs so far\n; - HDDtemp        http://www.guzu.net/linux/hddtemp.php (Linux)\n; - LMSensors      http://www.lm-sensors.org/ (Linux)\n; - Healthd        http://healthd.thehousleys.net/ (FreeBSD)\n; - HWSensors      http://www.openbsd.org/ (OpenBSD)\n; - MBMon          http://www.nt.phys.kyushu-u.ac.jp/shimizu/download/download.html (FreeBSD/Linux/NetBSD/OpenBSD)\n; - MBM5           http://mbm.livewiredev.com/ (data from file data/MBM5.csv - WinNT)\n; - CpuMem         No addon tool neded (FreeBSD/Linux/WinNT or others but with the dmidecode utility installed)\n; - IPMItool       http://ipmitool.sourceforge.net/ (Linux)\n; - FreeIPMI       http://www.gnu.org/software/freeipmi/ (FreeBSD/Linux/OpenBSD/SunOS)\n; - IPMIutil       http://ipmiutil.sourceforge.net/ (Darwin/FreeBSD/Linux/SunOS/WinNT)\n; - IPMIcfg        http://www.supermicro.com/en/solutions/management-software/ipmi-utilities (Linux/WinNT)\n; - K8Temp         http://hur.st/k8temp/ (DragonFly/FreeBSD/NetBSD/OpenBSD)\n; - PiTemp         No addon tool neded (Raspberry Pi and Banana Pi - Linux)\n; - OHM            http://openhardwaremonitor.org/ (WinNT)\n; - ThermalZone    No addon tool neded (WinNT/Linux/Android)\n; - QTSsnmp        SNMP service enabled and snmp-utils package installed: opkg install snmp-utils (QNAP - QTS Linux)\n; - Hwmon          No addon tool neded (Linux)\n; - SpeedFan       http://www.almico.com/speedfan.php (required tool packaged in: tools/speedfan/SpeedFanGet_bin.zip) (WinNT)\n; - Thinkpad       No addon tool neded (Lenovo Thinkpad - Linux)\n; - NvidiaSMI      Nvidia GPU drivers (FreeBSD/Linux/SunOS/WinNT)\n; - FortiSensor    No addon tool neded (Fortinet devices - FortiOS)\n;\n; Example: If you want to use lmsensors : SENSOR_PROGRAM=\"LMSensors\"\n;          If you want to use lmsensors and IPMItool: SENSOR_PROGRAM=\"LMSensors,IPMItool\"\n;\nSENSOR_PROGRAM=false\n\n\n; Show events of sensors\n; - true : show events\n; - false : do not show events\n;\nSENSOR_EVENTS=true\n\n\n; Sort sensors list\n;\nSORT_SENSORS_LIST=false\n\n\n; Some sensors programs contain an additional configuration in the relevant sections [sensor_...]\n\n\n; ********************************\n;      FILESYSTEM PARAMETERS\n; ********************************\n\n\n; Show mount point\n; - true : show mount point\n; - false : do not show mount point\n;\nSHOW_MOUNT_POINT=true\n\n\n; Show mount option\n; - true : show mount option\n; - false : do not show mount option\n;\nSHOW_MOUNT_OPTION=true\n\n\n; Show mount credentials\n; - true : show mount credentials\n; - false : do not show mount credentials\n;\nSHOW_MOUNT_CREDENTIALS=false\n\n\n; Show inode usage\n; - true : display used inodes in percent\n; - false : hide them\n;\nSHOW_INODES=true\n\n\n; Hide mounts\n; Example : HIDE_MOUNTS=\"/home,/usr\"\n;\nHIDE_MOUNTS=\"\"\n\n\n; Filesystem usage warning threshold in percent\n; - 0 : disabled\n; - 90 : 90%\n; Default is 90%\n;\nFS_USAGE_THRESHOLD=90\n\n\n; Ignore usage and usage threshold for filesystem types\n; Example : IGNORE_THRESHOLD_FS_TYPES=\"packagefs, iso9660, squashfs, devfs, devtmpfs, tmpfs, lxfs, udf, UDF, CDFS\"\n;\nIGNORE_THRESHOLD_FS_TYPES=\"packagefs, iso9660, squashfs, devfs, devtmpfs, tmpfs, lxfs, udf, UDF, CDFS\"\n\n\n; Ignore usage of mounts\n; Example : IGNORE_USAGE=\"/root,/mnt/c\"\n;\nIGNORE_USAGE=\"\"\n\n\n; Ignore total size of mounts\n; Example : IGNORE_TOTAL=\"/System/Volumes/VM,/System/Volumes/Prebot\"\n;\nIGNORE_TOTAL=\"\"\n\n\n; Ignore free space size of mounts\n; Example : IGNORE_FREE=\"/zfs/space,/zfs/data\"\n;\nIGNORE_FREE=\"\"\n\n\n; Hide filesystem types\n; Example : HIDE_FS_TYPES=\"tmpfs,devtmpfs,usbfs,bstfolder\"\n;\nHIDE_FS_TYPES=\"\"\n\n\n; Hide partitions\n; Example : HIDE_DISKS=\"rootfs,/dev/sda1\"\n;           HIDE_DISKS=true  //hide all partitions\n;\nHIDE_DISKS=\"\"\n\n\n; Hide totals information\n;\nHIDE_TOTALS=false\n\n\n; ********************************\n;      NETWORK PARAMETERS\n; ********************************\n\n\n; Hide network interfaces\n; Example : HIDE_NETWORK_INTERFACE=\"eth0,sit0\"\n;           HIDE_NETWORK_INTERFACE=true  //hide all network interfaces\n;\nHIDE_NETWORK_INTERFACE=\"\"\n\n\n; Use a regular expression in the name of a hidden network interface (e.g. HIDE_NETWORK_INTERFACE=\"docker.*\")\n; - true : use a regular expression\n; - false : do not use a regular expression\n;\nHIDE_NETWORK_INTERFACE_REGEX=false\n\n\n; Show network interfaces infos for Linux, Android, FreeBSD, NetBSD, OpenBSD, Haiku, Darwin, SunOS, Minix, QNX and WinNT\n; Example : SHOW_NETWORK_INFOS=true\n;\nSHOW_NETWORK_INFOS=true\n\n\n; Hide MAC address in the infos\n;\nHIDE_NETWORK_MACADDR=false\n\n\n; Show bridge info in the network interface name\n;\nSHOW_NETWORK_BRIDGE=true\n\n\n; Sort network interfaces list\n;\nSORT_NETWORK_INTERFACES_LIST=false\n\n\n; Show network infos expanded\n;\nSHOW_NETWORK_INFOS_EXPANDED=false\n\n\n; Show network active speed\n; - true : display network active speed\n; - \"bps\" : display network active speed in bits per second (b/s, Kb/s, etc...)\n; - false : hide them\n;\nSHOW_NETWORK_ACTIVE_SPEED=false\n\n\n; ********************************\n;        UPS PARAMETERS\n; ********************************\n\n\n; Define the ups monitoring program\n; We support the following programs so far\n; - Apcupsd        http://www.apcupsd.com/\n; - Nut            http://www.networkupstools.org/\n; - SNMPups        monitoring via Simple Network Management Protocol (SNMP)\n; - PowerSoftPlus  http://ever.eu/\n; - pmset          based on the result of the command \"pmset -g batt\" on Darwin system\n;\n; Example: If you want to use Apcupsd : UPS_PROGRAM=\"Apcupsd\"\n;          If you want to use Apcupsd and Nut : UPS_PROGRAM=\"Apcupsd,Nut\"\n;\nUPS_PROGRAM=false\n\n\n; Apcupsd supports multiple UPSes\n; You can specify comma delimited list in the form <hostname>:<port> or <ip>:<port>. The defaults are: \"127.0.0.1:3551\"\n; See the following parameters in apcupsd.conf: NETSERVER, NISIP, NISPORT\n; It uses the defaults if not specified.\n;\nUPS_APCUPSD_LIST=false\n\n\n; define how to access the Apcupsd data\n; - \"command\" execute apcaccess command\n; - \"data\" for reading data from file data/upsapcupsd{ups_number}.tmp\n;    content is the output from \"apcaccess status\"\n;\nUPS_APCUPSD_ACCESS=\"command\"\n\n\n; Apcupsd has a CGI monitoring utility called apcupsd-cgi\n; You can set the parameter below to true if you have it installed - this will add apcupsd-cgi links to the UPS tree\n;\nUPS_APCUPSD_CGI_ENABLE=false\n\n\n; Nut supports multiple UPSes\n; You can specify comma delimited list in the form <hostname>:<port> or <ip>:<port>. The defaults are: \"127.0.0.1:3493\"\n; See the following parameters in upsd.conf: LISTEN\n; It uses the defaults if not specified.\n;\nUPS_NUT_LIST=false\n\n\n; define how to access the Nut data\n; - \"command\" execute upsc command\n; - \"data\" for reading data from file data/upsnut{ups_number}.tmp\n;    content is the output from \"upsc {upsname}\"\n;\nUPS_NUT_ACCESS=\"command\"\n\n\n; SNMPups supports multiple UPSes\n; You can specify comma delimited list in the form <hostname>:<port> or <ip>:<port>. The default port is 161\n; List must be specified.\n;\nUPS_SNMPUPS_LIST=false\n\n\n; define how to access the SNMP data\n; - \"php-snmp\" execute php snmprealwalk function (php-snmp module must be installed)\n; - \"command\" execute snmpwalk command\n; - \"data\" for reading data from file data/upssnmpups{ups_number}.tmp\n;    content is the output from:\n;     \"snmpwalk -Ona -c public -v 1 -r 0 -t 3 {upsaddress} .1.3.6.1.4.1.318.1.1.1.1>upssnmpups{ups_number}.tmp\n;      snmpwalk -Ona -c public -v 1 -r 0 -t 3 {upsaddress} .1.3.6.1.4.1.318.1.1.1.2>>upssnmpups{ups_number}.tmp\n;      snmpwalk -Ona -c public -v 1 -r 0 -t 3 {upsaddress} .1.3.6.1.4.1.318.1.1.1.3>>upssnmpups{ups_number}.tmp\n;      snmpwalk -Ona -c public -v 1 -r 0 -t 3 {upsaddress} .1.3.6.1.4.1.318.1.1.1.4>>upssnmpups{ups_number}.tmp\"\n;\nUPS_SNMPUPS_ACCESS=\"php-snmp\"\n\n\n; define how to access the PowerSoftPlus data\n; - \"command\" execute powersoftplus command\n; - \"data\" for reading data from file data/upspowersoftplus.tmp\n;    content is the output from \"powersoftplus -p\"\n;\nUPS_POWERSOFTPLUS_ACCESS=\"command\"\n\n\n; define how to access the pmset data\n; - \"command\" execute pmset command\n; - \"data\" for reading data from file data/upspmset.tmp\n;    content is the output from \"pmset -g batt\"\n;\nUPS_PMSET_ACCESS=\"command\"\n\n\n; ********************************\n;       MISC PARAMETERS\n; ********************************\n\n\n; define how to access the dmidecode data\n; - \"data\" read data from file data/dmidecode.tmp; content is the output from \"dmidecode -t 17\")\n; - \"command\" execute command: dmidecode -t 17\n;   If access error try execute first: chmod 4755 /usr/sbin/dmidecode\n;   This method is not recommended for safety reasons!\n;\nDMIDECODE_ACCESS=\"command\"\n\n\n; ********************************\n;    SENSORS PROGRAMS PARAMETERS\n; ********************************\n\n\n[sensor_hddtemp]\n; Hddtemp motherboard monitoring program configuration\n;\n; If the hddtemp program is available we can read the temperature, if hdd is smart capable\n; !!ATTENTION!! hddtemp might be a security issue\n; - ACCESS=\"command\"  //read data from 'hddtemp' command (must be set suid)\n; - ACCESS=\"tcp\"  //read data from hddtemp deamon (localhost:7634)\n;\nACCESS=\"command\"\n\n[sensor_lmsensors]\n; LMSensors motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'sensors' command\n; - ACCESS=\"data\"  //read data from file data/lmsensors.tmp\n;\nACCESS=\"command\"\n\n[sensor_healthd]\n; Healthd motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'healthdc' command\n; - ACCESS=\"data\"  //read data from file data/healthd.tmp\n;\nACCESS=\"command\"\n\n[sensor_mbmon]\n; MBMon motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'mbmon -c 1 -r' command\n; - ACCESS=\"data\"  //read data from file data/mbmon.tmp\n; - ACCESS=\"tcp\"  //read data from mbmon deamon (localhost:411)\n;\nACCESS=\"command\"\n\n[sensor_ipmitool]\n; IPMItool motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'ipmitool sensor -v' command\n;                     //if access error execute first: chmod 666 /dev/ipmi0\n; - ACCESS=\"data\"  //read data from file data/ipmitool.tmp\n;\nACCESS=\"command\"\n\n[sensor_freeipmi]\n; FreeIPMI motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'ipmi-sensors --output-sensor-thresholds' program\n; - ACCESS=\"data\"  //read data from file data/freeipmi.tmp\n;\nACCESS=\"command\"\n\n[sensor_ipmiutil]\n; IPMIutil motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'ipmiutil sensor -stw' command\n;                     //if access error execute first: chmod 666 /dev/ipmi0\n; - ACCESS=\"data\"  //read data from file data/ipmiutil.tmp\n;\nACCESS=\"command\"\n\n[sensor_ipmicfg]\n; IPMIcfg motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'ipmicfg -sdr' and/or 'ipmicfg -psfruinfo' command\n; - ACCESS=\"data\"  //read data from file data/ipmicfg.tmp (output from: \"ipmicfg -sdr>ipmicfg.tmp; ipmicfg -psfruinfo>>ipmicfg.tmp\")\n;\nACCESS=\"command\"\n\n; Execute power supply FRU health info\n; - true   : execute 'ipmicfg --psfruinfo'\n; - false  : don't execute 'ipmicfg --psfruinfo'\n; - \"only\" : execute 'ipmicfg --psfruinfo' and don't execute 'ipmicfg -sdr'\n;\nPSFRUINFO=true\n\n[sensor_k8temp]\n; K8Temp motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'k8temp' command\n; - ACCESS=\"data\"  //read data from file data/k8temp.tmp\n;\nACCESS=\"command\"\n\n[sensor_thermalzone]\n; ThermalZone motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //on Linux information is retrieved everytime through system files / on WinNT information is retrieved everytime through WMI\n; - ACCESS=\"data\"  //read data from file data/thermalzone.tmp (output of WinNT command \"wmic /namespace:\\\\root\\wmi PATH MSAcpi_ThermalZoneTemperature get CriticalTripPoint,CurrentTemperature,InstanceName\")\n;\nACCESS=\"command\"\n\n[sensor_speedfan]\n; SpeedFan motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'speedfanget' command\n; - ACCESS=\"data\"  //read data from file data/speedfan.tmp\n;\nACCESS=\"command\"\n\n[sensor_nvidiasmi]\n; NvidiaSMI motherboard monitoring program configuration\n;\n; - ACCESS=\"command\"  //read data from 'nvidia-smi -q' command\n; - ACCESS=\"data\"  //read data from file data/nvidiasmi.tmp\n;\nACCESS=\"command\"\n\n;The path to nvidia-smi.exe for the WinNT system\n;\nEXE_PATH=\"c:\\Program Files\\NVIDIA Corporation\\NVSMI\\nvidia-smi.exe\"\n\n\n; ********************************\n;        PLUGINS PARAMETERS\n; ********************************\n\n\n[bat]\n; BAT Plugin configuration\n\n; define how to access the battery statistic data\n; - \"command\" on Linux and Android read data from /proc/acpi/battery/BAT0/info and /proc/acpi/battery/BAT0/state\n;                or on newer kernel from /sys/class/power_supply/\n;                or from 'upower -d' command (if UPOWER is true)\n;             on Android read data from /sys/class/power_supply/ \n;             on Darwin read data from 'ioreg -w0 -l -n AppleSmartBattery -r' command\n;             on FreeBSD read data from 'acpiconf -i batt' command\n;             on OpenBSD read data from 'sysctl hw.sensors.acpibat0' command\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"bat_info.tmp\" and \"bat_state.tmp\"; content is the output\n;          from \"cat /proc/acpi/battery/BAT0/info\" and \"cat /proc/acpi/battery/BAT0/state\")\n;\nACCESS=\"command\"\n\n; on Lunux try executing 'upower -d' command\n; \nUPOWER=false\n\n; Show battery serial number\n;\nSHOW_SERIAL=false\n\n\n[raid]\n; Raid Plugin configuration\n\n; define how to access the raid statistic data\n; - \"command\" - mdstat:            file \"/proc/mdstat\" is read (on Linux only)\n;             - dmraid:            command \"dmraid -s -vv 2>&1\" is run (on Linux only)\n;                                  If access error try execute first: chmod 4755 /sbin/dmraid\n;                                  This method is not recommended for safety reasons!\n;             - megactl:           command \"megactl -vv\" is run (on Linux only)\n;                                  downloaded from http://sourceforge.net/projects/megactl/ or http://github.com/hmage/megactl or http://github.com/namiltd/megactl\n;                                  If permission error try execute first: chmod 4755 /usr/sbin/megactl\n;             - megasasctl:        command \"megasasctl -vv\" is run (on Linux only)\n;                                  downloaded from http://sourceforge.net/projects/megactl/ or http://github.com/hmage/megactl or http://github.com/namiltd/megactl\n;                                  If permission error try execute first: chmod 4755 /usr/sbin/megasasctl\n;             - megaclisas-status: command \"megaclisas-status\" is run (or \"megaclisas-status.py\" on WinNT)\n;                                  downloaded from http://hwraid.le-vert.net or https://github.com/eLvErDe/hwraid or https://github.com/ElCoyote27/hwraid \n;             - 3ware-status:      command \"3ware-status\" is run (or 3ware-status.py\" on WinNT)\n;                                  downloaded from http://hwraid.le-vert.net or https://github.com/eLvErDe/hwraid or https://github.com/ElCoyote27/hwraid\n;             - graid:             command \"graid list\" is run (on FreeBSD only)\n;             - zpool:             command \"zpool status\" is run\n;             - storcli:           command \"storcli64 /call show all; storcli64 /call /vall show all\" or \"storcli /call show all; storcli /call /vall show all\" is run\n;             - perccli:           command \"perccli64 /call show all; perccli64 /call /vall show all\" or \"perccli /call show all; perccli /call /vall show all\" is run\n;             - idrac:             command \"snmpwalk -Ona -c public -v 1 -r 0 -t 3 {device} .1.3.6.1.4.1.674.10892.5.5.1.20\" is run\n; - \"php-snmp\"- idrac:             execute php snmprealwalk function (php-snmp module must be installed)\n;             - for others the option is inactive (uses \"command\" instead)\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;         with the filename \"raidmdstat.tmp\" or \"raiddmraid.tmp\" or \"raidmegactl.tmp\" or \"raidmegasasctl.tmp\" \n;         or \"raidmegaclisas-status.tmp\" or \"raidgraid.tmp\" or \"raidzpool.tmp\" or \"raidstorcli.tmp\" or \"raidperccli.tmp\"\n;         or \"raididrac{device_number}.tmp\")\n;\nACCESS=\"command\"\n\n; define possible programs\nPROGRAM=\"mdstat,dmraid,megactl,megasasctl,megaclisas-status,3ware-status,graid,zpool,storcli,perccli,idrac\"\n\n; Hide RAID devices\n; Example : HIDE_DEVICES=\"md127\"\n;\nHIDE_DEVICES=\"\"\n\n;\n; string contains a list of IDRAC devices that are checked\n; Example : IDRAC_DEVICES=\"192.168.0.120\"\n;\nIDRAC_DEVICES=\"\"\n\n[ps]\n; PS Plugin configuration\n\n; define how to access the ps statistic data\n; - \"command\" ps command is run everytime the block gets refreshed or build / on WinNT\n;             information is retrieved everytime through WMI\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"ps.tmp\"; content is the output from \"ps -axo pid,ppid,pmem,pcpu,args\")\n;\nACCESS=\"command\"\n\n; Memory Usage info\n;\nMEMORY_USAGE=true\n\n; CPU Usage info\n;\nCPU_USAGE=true\n\n; Show kthreadd child list expanded\n;\nSHOW_KTHREADD_EXPANDED=false\n\n; Show PID 1 child list expanded\n;\nSHOW_PID1CHILD_EXPANDED=false\n\n\n[psstatus]\n; PSStatus Plugin configuration\n\n; define how to access the psstatus statistic data\n; - \"command\" pidof command is run everytime the block gets refreshed or build \n;             / on WinNT information is retrieved everytime through WMI\n; - \"data\" a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"psstatus.tmp\"; content is the output from\n;   <code>for ps in \"apache2\" \"mysqld\" \"sshd\"; do echo $ps \"|\" `pidof -s -x \"$ps\"`; done</code>\n;\nACCESS=\"command\"\n\n; Regular expression search in the process name (e.g. \"ddclient.*\") for non-WinNT systems \n; - true : Regular expression search (used pgrep command)\n; - false : Normal search (used pidof command)\n;\nUSE_REGEX=false\n\n; controls which processes are checked if they are running\n;\n; string contains a list of process names that are checked, names are seperated by a comma (on WinNT names must end with '.exe')\n;\nPROCESSES=\"mysqld, sshd, explorer.exe\"\n\n\n[quotas]\n; Quotas Plugin configuration\n\n; define how to access the repquota statistic data\n; - \"command\" repquota command is run everytime the block gets refreshed or build\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation with the filename \"quotas.tmp\"; content is the output from \"repquota -au\")\n;\nACCESS=\"command\"\n\n\n[smart]\n; SMART Plugin configuration\n\n; Smartctl program\n; If the smartctl program is available we can read S.M.A.R.T informations\n; - \"command\" smartctl command is run everytime the block gets refreshed or build\n; if error: Smartctl open device: /dev/sda failed: Permission denied\n;      Not recommended method:\n;               execute: chmod 4755 /usr/sbin/smartctl\n;      Second method:\n;            try to set: SUDO_COMMANDS=\"smartctl\" and add to file /etc/sudoers line: apache ALL = (ALL) NOPASSWD: /usr/sbin/smartctl\n; - \"data\" (a file must be available in the data directory of the\n;          phpsysinfo installation with the filename \"smart{disk_number}.tmp\";\n;          content is the output from \"smartctl --all device\"\n;          or on WinNT only from \"wmic /namespace:\\\\root\\wmi path MSStorageDriver_ATAPISmartData get VendorSpecific | more +{disk_number}\")\n; - \"wmi\" information is retrieved everytime through WMI (WinNT only)\n;\nACCESS=\"command\"\n\n; Smartctl devices to monitor\n; If the smartctl support is enabled, those disks information will be displayed\n; - DEVICES=\"/dev/hda,/dev/hdb\"  //Will display those two disks informations\n; You also can specify --device option value  for smartctl command surrounded by parentheses eg:\n; - DEVICES=\"(marvell)/dev/sda\"\n; or\n; - DEVICES=\"(megaraid.0)/dev/sda\" //comma in --device option value is replaced by a dot\n;\nDEVICES=\"/dev/sda, /dev/sdb\"\n\n; Smartctl ID# and column name from \"Vendor Specific SMART Attributes with Thresholds\" table\n; If the smartctl support is enabled, enter the ID#-COLUMN_NAME from \"Vendor Specific SMART Attributes with Thresholds\" table from smartctl output.\n; or for no SCSI devices: ID#-COLUMN_NAME-REPLACEMENT_ID# where REPLACEMENT_ID# is an alternative ID number.\n; COLUMN_NAME of this ID# will be displayed in the phpsysinfo S.M.A.R.T table. If you want RAW_VALUE to be displayed for the temperature (ID# 194) enter 194-RAW_VALUE\n; - IDS=\"194-VALUE,4-VALUE,009-RAW_VALUE\"  //ID#-COLUMN_NAME, ID#-COLUMN_NAME, etc...\n; The additional attributes:\n; ATA Error Count is marked as 0-RAW_VALUE\n; Non-medium Error Count is marked as 255-RAW_VALUE\n;\nIDS=\"005-RAW_VALUE,194-RAW_VALUE,009-RAW_VALUE,012-RAW_VALUE,193-RAW_VALUE-225,001-RAW_VALUE,007-RAW_VALUE,200-RAW_VALUE,197-RAW_VALUE,198-RAW_VALUE,0-RAW_VALUE\"\n\n\n[snmppinfo]\n; SNMPPInfo Plugin configuration\n\n; define how to access the SNMP Printer Info statistic data\n; - \"php-snmp\" execute php snmprealwalk function (php-snmp module must be installed)\n; - \"command\" execute snmpwalk command\n; - \"data\" a file must be available in the data directory of the\n;          phpsysinfo installation with the filename \"snmppinfo{printer_number}.tmp\";\n; content is the output from:\n;    LANG=C LC_ALL=C snmpwalk -On -c public -v 1 -r 0 -t 3 {printer_address} .1.3.6.1.2.1.1.5 > snmppinfo{printer_number}.tmp\n;    LANG=C LC_ALL=C snmpwalk -On -c public -v 1 -r 0 -t 3 {printer_address} .1.3.6.1.4.1.367.3.2.1.2.24.1.1 >> snmppinfo{printer_number}.tmp\n;    LANG=C LC_ALL=C snmpwalk -On -c public -v 1 -r 0 -t 3 {printer_address} .1.3.6.1.2.1.43.11.1.1 >> snmppinfo{printer_number}.tmp\n;    LANG=C LC_ALL=C snmpwalk -On -c public -v 1 -r 0 -t 3 {printer_address} .1.3.6.1.2.1.43.18.1.1 >> snmppinfo{printer_number}.tmp\n;\nACCESS=\"php-snmp\"\n\n;define the Printer devices\n;\n; string contains a list of printer addresses that are checked\n;\nDEVICES=\"192.168.0.5, 192.168.0.9\"\n\n\n[updatenotifier]\n; Update Notifier Plugin configuration\n\n; define how to access the updatenotifier statistic data\n; - \"command\" execute command /usr/lib/update-notifier/apt-check\n; - \"data\" reads data from file defined in FILE parameter\n;\nACCESS=\"data\"\n\n; define the update info file format\n; - true: Ubuntu Landscape format (file: /var/lib/update-notifier/updates-available)\n; - false: universal format   (format: A;B)\n;          A: total packages to update\n;          B: security packages to update\n;\nUBUNTU_LANDSCAPE_FORMAT=true\n\n; define the update info file. The default is: /var/lib/update-notifier/updates-available\n;\nFILE=\"/var/lib/update-notifier/updates-available\"\n\n\n[uprecords]\n; Uprecords Plugin configuration\n\n; define how to access the uprecords statistic data\n; - \"command\" uprecords command is run everytime the block gets refreshed or build\n;             if access error try execute first: chmod 4755 /usr/bin/uprecords\n;             This method is not recommended for safety reasons!\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"uprecords.tmp\"; content is the output from \"TZ=GMT uprecords -a -w\")\n;\nACCESS=\"command\"\n\n; define the maximum number of entries to show (for command access)\n; default is 10\n;\nMAX_ENTRIES = 10\n\n; define the short mode (do not print extra statistics)\n; default is false\n;\nSHORT_MODE = false\n\n; denote current system session by asterisk (* at the end) instead  by the arrow (-> at the beginning)\n; default is false\n;\nDENOTE_BY_ASTERISK = false\n\n\n[viewer]\n; Viewer Plugin configuration\n\n; define how to access the data\n; - \"command\" COMMAND command is run everytime the block gets refreshed or build\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation with the filename \"viewer.tmp\")\n;\nACCESS=\"command\"\n\n; define COMMAND name (for command access)\n; eg:\n; - \"iptables-save\" iptables-save command is run everytime the block gets refreshed or build (Linux)\n;                   if access error try to set: SUDO_COMMANDS=\"iptables-save\" and add to file /etc/sudoers line: apache ALL = (ALL) NOPASSWD: /sbin/iptables-save\n; - \"systeminfo\"    systeminfo command is run everytime the block gets refreshed or build (WinNT)\n;\n\nCOMMAND=\"\"\n\n; define COMMAND parameters (for command access)\n;\nPARAMS=\"\"\n\n[pingtest]\n; PingTest Plugin configuration\n\n; define how to access the psstatus statistic data\n; - \"command\" ping command is run everytime the block gets refreshed or build \n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"pingtest.tmp\")\n;\nACCESS=\"command\"\n\n;define the Addresses\n;\n; string contains a list of addresses that are checked\n; Example : ADDRESSES=\"127.0.0.1,8.8.8.8\"\n;\nADDRESSES=\"\"\n\n; Define ping timeout in seconds\n; - 0 : default ping command timeout\n; - 3 : 3 seconds\n; Default is 2 seconds\n;\nTIMEOUT=2\n\n[stablebit]\n; StableBit Plugin configuration\n\n; Show or hide disks serial number\n;\nSHOW_SERIAL=false\n\n[hyperv]\n; HyperV Plugin configuration\n\n; define how to access the ps statistic data\n; - \"command\" information is retrieved through WMI\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"hyperv.tmp\")\n;\nACCESS=\"command\"\n\n[docker]\n; Docker Plugin configuration\n\n; define how to access the docker statistic data\n; - \"command\" docker command is run everytime the block gets refreshed or build\n; - \"data\" (a file must be available in the data directory of the phpsysinfo installation\n;          with the filename \"docker.tmp\"; content is the output from \"docker stats --no-stream --format 'table {{.Name}}\\t{{.CPUPerc}}\\t{{.MemUsage}}\\t{{.MemPerc}}\\t{{.NetIO}}\\t{{.BlockIO}}\\t{{.PIDs}}'\")\n;\nACCESS=\"command\"\n", "<?php\nif (!defined('PSI_CONFIG_FILE')) {\n    /**\n     * phpSysInfo version\n     */\n    define('PSI_VERSION', '3.4.x');\n    /**\n     * phpSysInfo configuration\n     */\n    define('PSI_CONFIG_FILE', PSI_APP_ROOT.'/phpsysinfo.ini');\n\n    define('ARRAY_EXP', '/^return array \\([^;]*\\);$/'); //array expression search\n\n    if (!is_readable(PSI_CONFIG_FILE)) {\n        echo \"ERROR: phpsysinfo.ini does not exist or is not readable by the webserver in the phpsysinfo directory\";\n        die();\n    } elseif (!($config = @parse_ini_file(PSI_CONFIG_FILE, true))) {\n        echo \"ERROR: phpsysinfo.ini file is not parsable\";\n        die();\n    } else {\n        foreach ($config as $name=>$group) {\n            if (strtoupper($name)==\"MAIN\") {\n                $name_prefix='PSI_';\n            } elseif (strtoupper(substr($name, 0, 7))==\"SENSOR_\") {\n                $name_prefix='PSI_'.strtoupper($name).'_';\n            } else {\n                $name_prefix='PSI_PLUGIN_'.strtoupper($name).'_';\n            }\n            foreach ($group as $param=>$value) {\n                if ((trim($value)===\"\") || (trim($value)===\"0\")) {\n                    define($name_prefix.strtoupper($param), false);\n                } elseif (trim($value)===\"1\") {\n                    define($name_prefix.strtoupper($param), true);\n                } else {\n                    if ((($paramup = strtoupper($param)) !== 'WMI_PASSWORD') && ($paramup !== 'SSH_PASSWORD') && strstr($value, ',')) {\n                        define($name_prefix.$paramup, 'return '.var_export(preg_split('/\\s*,\\s*/', trim($value), -1, PREG_SPLIT_NO_EMPTY), 1).';');\n                    } else {\n                        define($name_prefix.$paramup, trim($value));\n                    }\n                }\n            }\n        }\n    }\n\n    if (defined('PSI_ALLOWED') && is_string(PSI_ALLOWED)) {\n        if (preg_match(ARRAY_EXP, PSI_ALLOWED)) {\n            $allowed = eval(strtolower(PSI_ALLOWED));\n        } else {\n            $allowed = array(strtolower(PSI_ALLOWED));\n        }\n\n        if (isset($_SERVER[\"HTTP_X_FORWARDED_FOR\"])) {\n            $ip = $_SERVER[\"HTTP_X_FORWARDED_FOR\"];\n        } else {\n            if (isset($_SERVER[\"HTTP_CLIENT_IP\"])) {\n                $ip = $_SERVER[\"HTTP_CLIENT_IP\"];\n            } else {\n                $ip = $_SERVER[\"REMOTE_ADDR\"];\n            }\n        }\n        $ip = preg_replace(\"/^::ffff:/\", \"\", strtolower($ip));\n\n        $ip_decimal = ip2long($ip);\n        if ($ip_decimal === false) {\n            echo \"Client IP wrong address (\".$ip.\"). Client not allowed.\";\n            die();\n        }\n\n        // code based on https://gist.github.com/tott/7684443\n        $was = false;\n        foreach ($allowed as $allow) {\n            if (strpos($allow, '/') === false) {\n                    $was = ($allow === $ip);\n            } else {\n                  list($allow, $netmask) = explode('/', $allow, 2);\n                  $allow_decimal = ip2long($allow);\n                  $wildcard_decimal = pow(2, (32 - $netmask)) - 1;\n                  $netmask_decimal = ~$wildcard_decimal;\n                $was = (($ip_decimal & $netmask_decimal) === ($allow_decimal & $netmask_decimal));\n            }\n            if ($was) {\n               break;\n            }\n        }\n\n        if (!$was) {\n            echo \"Client IP address (\".$ip.\") not allowed.\";\n            die();\n        }\n    }\n\n    if (isset($_GET['jsonp']) && (!defined('PSI_JSONP') || !PSI_JSONP)) {\n        echo \"JSONP data mode not enabled in phpsysinfo.ini.\";\n        die();\n    }\n\n    /* default error handler */\n    if (function_exists('errorHandlerPsi')) {\n        restore_error_handler();\n    }\n\n    /* fatal errors only */\n    $old_err_rep = error_reporting();\n    error_reporting(E_ERROR);\n\n    /* get git revision */\n    if (file_exists(PSI_APP_ROOT.'/.git/HEAD')) {\n        $contents = @file_get_contents(PSI_APP_ROOT.'/.git/HEAD');\n        if ($contents && preg_match(\"/^ref:\\s+(.*)\\/([^\\/\\s]*)/m\", $contents, $matches)) {\n            $contents = @file_get_contents(PSI_APP_ROOT.'/.git/'.$matches[1].\"/\".$matches[2]);\n            if ($contents && preg_match(\"/^([^\\s]*)/m\", $contents, $revision)) {\n                define('PSI_VERSION_STRING', PSI_VERSION .\"-\".$matches[2].\"-\".substr($revision[1], 0, 7));\n            } else {\n                define('PSI_VERSION_STRING', PSI_VERSION .\"-\".$matches[2]);\n            }\n        }\n    }\n    /* get svn revision */\n    if (!defined('PSI_VERSION_STRING') && file_exists(PSI_APP_ROOT.'/.svn/entries')) {\n        $contents = @file_get_contents(PSI_APP_ROOT.'/.svn/entries');\n        if ($contents && preg_match(\"/dir\\n(.+)/\", $contents, $matches)) {\n            define('PSI_VERSION_STRING', PSI_VERSION.\"-r\".$matches[1]);\n        } else {\n            define('PSI_VERSION_STRING', PSI_VERSION);\n        }\n    }\n    if (!defined('PSI_VERSION_STRING')) {\n        define('PSI_VERSION_STRING', PSI_VERSION);\n    }\n\n    if (defined('PSI_ROOTFS') && is_string(PSI_ROOTFS) && (PSI_ROOTFS !== '') && (PSI_ROOTFS !== '/')) {\n        $rootfs = PSI_ROOTFS;\n        if ($rootfs[0] === '/') {\n            define('PSI_ROOT_FILESYSTEM', $rootfs);\n        } else {\n            define('PSI_ROOT_FILESYSTEM', '');\n        }\n    } else {\n        define('PSI_ROOT_FILESYSTEM', '');\n    }\n\n    if (!defined('PSI_OS')) { //if not overloaded in phpsysinfo.ini\n        /* get Linux code page */\n        if ((PHP_OS == 'Linux') || (PHP_OS == 'GNU')) {\n            if (file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/sysconfig/i18n')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/default/locale')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/locale.conf')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/sysconfig/language')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/profile.d/lang.sh')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/profile.d/i18n.sh')\n               || file_exists($fname = PSI_ROOT_FILESYSTEM.'/etc/profile')) {\n                $contents = @file_get_contents($fname);\n            } else {\n                $contents = false;\n                if (PHP_OS == 'Linux') {\n                    if (file_exists(PSI_ROOT_FILESYSTEM.'/system/build.prop')) { //Android\n                        define('PSI_OS', 'Android');\n                        if ((PSI_ROOT_FILESYSTEM === '') && function_exists('exec') && @exec('uname -o 2>/dev/null', $unameo) && (sizeof($unameo)>0) && (($unameo0 = trim($unameo[0])) != \"\")) {\n                            define('PSI_UNAMEO', $unameo0); // is Android on Termux\n                        }\n                        if ((PSI_ROOT_FILESYSTEM === '') && !defined('PSI_MODE_POPEN')) { //if not overloaded in phpsysinfo.ini\n                            if (!function_exists(\"proc_open\")) { //proc_open function test by executing 'pwd' bbbmand\n                                define('PSI_MODE_POPEN', true); //use popen() function - no stderr error handling (but with problems with timeout)\n                            } else {\n                                $out = '';\n                                $err = '';\n                                $pipes = array();\n                                $descriptorspec = array(0=>array(\"pipe\", \"r\"), 1=>array(\"pipe\", \"w\"), 2=>array(\"pipe\", \"w\"));\n                                $process = proc_open(\"pwd 2>/dev/null \", $descriptorspec, $pipes);\n                                if (!is_resource($process)) {\n                                    define('PSI_MODE_POPEN', true);\n                                } else {\n                                    $w = null;\n                                    $e = null;\n\n                                    while (!(feof($pipes[1]) && feof($pipes[2]))) {\n                                        $read = array($pipes[1], $pipes[2]);\n\n                                        $n = stream_select($read, $w, $e, 5);\n\n                                        if (($n === false) || ($n === 0)) {\n                                            break;\n                                        }\n\n                                        foreach ($read as $r) {\n                                            if ($r == $pipes[1]) {\n                                                $out .= fread($r, 4096);\n                                            } elseif (feof($pipes[1]) && ($r == $pipes[2])) {//read STDERR after STDOUT\n                                                $err .= fread($r, 4096);\n                                            }\n                                        }\n                                    }\n\n                                    if (($out === null) || (trim($out) == \"\") || (substr(trim($out), 0, 1) != \"/\")) {\n                                        define('PSI_MODE_POPEN', true);\n                                    }\n                                    fclose($pipes[0]);\n                                    fclose($pipes[1]);\n                                    fclose($pipes[2]);\n                                    // It is important that you close any pipes before calling\n                                    // proc_close in order to avoid a deadlock\n                                    proc_close($process);\n                                }\n                            }\n                        }\n                    } elseif (file_exists(PSI_ROOT_FILESYSTEM.'/var/mobile/Library/Cydia/metadata.cb0')) { //jailbroken iOS with Cydia\n                        define('PSI_OS', 'Darwin');\n                    }\n                }\n            }\n            if (!(defined('PSI_SYSTEM_CODEPAGE') && defined('PSI_SYSTEM_LANG')) //also if both not overloaded in phpsysinfo.ini\n               && $contents && (preg_match('/^(LANG=\"?[^\"\\n]*\"?)/m', $contents, $matches)\n               || preg_match('/^RC_(LANG=\"?[^\"\\n]*\"?)/m', $contents, $matches)\n               || preg_match('/^\\s*export (LANG=\"?[^\"\\n]*\"?)/m', $contents, $matches))) {\n                if (!defined('PSI_SYSTEM_CODEPAGE')) {\n                    if (file_exists($vtfname = PSI_ROOT_FILESYSTEM.'/sys/module/vt/parameters/default_utf8')\n                       && (trim(@file_get_contents($vtfname)) === \"1\")) {\n                        define('PSI_SYSTEM_CODEPAGE', 'UTF-8');\n                    } elseif ((PSI_ROOT_FILESYSTEM === '') && function_exists('exec') && @exec($matches[1].' locale -k LC_CTYPE 2>/dev/null', $lines)) { //if not overloaded in phpsysinfo.ini\n                        foreach ($lines as $line) {\n                            if (preg_match('/^charmap=\"?([^\"]*)/', $line, $matches2)) {\n                                define('PSI_SYSTEM_CODEPAGE', $matches2[1]);\n                                break;\n                            }\n                        }\n                    }\n                }\n                if ((PSI_ROOT_FILESYSTEM === '') && !defined('PSI_SYSTEM_LANG') && function_exists('exec') && @exec($matches[1].' locale 2>/dev/null', $lines2)) { //also if not overloaded in phpsysinfo.ini\n                    foreach ($lines2 as $line) {\n                        if (preg_match('/^LC_MESSAGES=\"?([^\\.\"@]*)/', $line, $matches2)) {\n                            $lang = \"\";\n                            if (is_readable(PSI_APP_ROOT.'/data/languages.ini') && ($langdata = @parse_ini_file(PSI_APP_ROOT.'/data/languages.ini', true))) {\n                                if (isset($langdata['Linux']['_'.$matches2[1]])) {\n                                    $lang = $langdata['Linux']['_'.$matches2[1]];\n                                }\n                            }\n                            if ($lang == \"\") {\n                                $lang = 'Unknown';\n                            }\n                            define('PSI_SYSTEM_LANG', $lang.' ('.$matches2[1].')');\n                            break;\n                        }\n                    }\n                }\n            }\n        } elseif (PHP_OS == 'Haiku') {\n            if (!(defined('PSI_SYSTEM_CODEPAGE') && defined('PSI_SYSTEM_LANG')) //also if both not overloaded in phpsysinfo.ini\n                && (PSI_ROOT_FILESYSTEM === '') && function_exists('exec') && @exec('locale --message 2>/dev/null', $lines)) {\n                foreach ($lines as $line) {\n                    if (preg_match('/^\"?([^\\.\"]*)\\.?([^\"]*)/', $line, $matches2)) {\n\n                        if (!defined('PSI_SYSTEM_CODEPAGE') && isset($matches2[2]) && ($matches2[2] !== null) && (trim($matches2[2]) != \"\")) { //also if not overloaded in phpsysinfo.ini\n                            define('PSI_SYSTEM_CODEPAGE', $matches2[2]);\n                        }\n\n                        if (!defined('PSI_SYSTEM_LANG')) { //if not overloaded in phpsysinfo.ini\n                            $lang = \"\";\n                            if (is_readable(PSI_APP_ROOT.'/data/languages.ini') && ($langdata = @parse_ini_file(PSI_APP_ROOT.'/data/languages.ini', true))) {\n                                if (isset($langdata['Linux']['_'.$matches2[1]])) {\n                                    $lang = $langdata['Linux']['_'.$matches2[1]];\n                                }\n                            }\n                            if ($lang == \"\") {\n                                $lang = 'Unknown';\n                            }\n                            define('PSI_SYSTEM_LANG', $lang.' ('.$matches2[1].')');\n                        }\n                        break;\n                    }\n                }\n            }\n        } elseif ((PHP_OS == 'Darwin') || (defined('PSI_OS') && (PSI_OS == 'Darwin'))){\n            if (!defined('PSI_SYSTEM_LANG') //if not overloaded in phpsysinfo.ini\n                && (PSI_ROOT_FILESYSTEM === '') && function_exists('exec') && @exec('defaults read /Library/Preferences/.GlobalPreferences AppleLocale 2>/dev/null', $lines)) {\n                $lang = \"\";\n                if (is_readable(PSI_APP_ROOT.'/data/languages.ini') && ($langdata = @parse_ini_file(PSI_APP_ROOT.'/data/languages.ini', true))) {\n                    if (isset($langdata['Linux']['_'.$lines[0]])) {\n                        $lang = $langdata['Linux']['_'.$lines[0]];\n                    }\n                }\n                if ($lang == \"\") {\n                    $lang = 'Unknown';\n                }\n                define('PSI_SYSTEM_LANG', $lang.' ('.$lines[0].')');\n            }\n        }\n    }\n\n    /* maximum time in seconds a script is allowed to run before it is terminated by the parser */\n    if (defined('PSI_MAX_TIMEOUT')) {\n        ini_set('max_execution_time', max(intval(PSI_MAX_TIMEOUT), 0));\n    } else {\n        ini_set('max_execution_time', 30);\n    }\n\n    /* executeProgram() timeout value in seconds */\n    if (defined('PSI_EXEC_TIMEOUT')) {\n        define('PSI_EXEC_TIMEOUT_INT', max(intval(PSI_EXEC_TIMEOUT), 1));\n    } else {\n        define('PSI_EXEC_TIMEOUT_INT', 30);\n    }\n\n    /* snmprealwalk() and executeProgram(\"snmpwalk\") number of seconds until the first timeout */\n    if (defined('PSI_SNMP_TIMEOUT')) {\n        define('PSI_SNMP_TIMEOUT_INT', max(intval(PSI_SNMP_TIMEOUT), 1));\n    } else {\n        define('PSI_SNMP_TIMEOUT_INT', 3);\n    }\n\n    /* snmprealwalk() and executeProgram(\"snmpwalk\") number of times to retry if timeouts occur */\n    if (defined('PSI_SNMP_RETRY')) {\n        define('PSI_SNMP_RETRY_INT', max(intval(PSI_SNMP_RETRY), 0));\n    } else {\n        define('PSI_SNMP_RETRY_INT', 0);\n    }\n\n    if (!defined('PSI_OS')) {\n        define('PSI_OS', PHP_OS);\n    }\n\n    if (!defined('PSI_SYSTEM_LANG')) {\n        define('PSI_SYSTEM_LANG', null);\n    }\n    if (!defined('PSI_SYSTEM_CODEPAGE')) { //if not overloaded in phpsysinfo.ini\n        if ((PSI_OS=='Android') || (PSI_OS=='Darwin')) {\n            define('PSI_SYSTEM_CODEPAGE', 'UTF-8');\n        } elseif (PSI_OS=='Minix') {\n            define('PSI_SYSTEM_CODEPAGE', 'CP437');\n        } elseif (PSI_OS!='WINNT') {\n            define('PSI_SYSTEM_CODEPAGE', null);\n        }\n    }\n\n    if (!defined('PSI_JSON_ISSUE')) { //if not overloaded in phpsysinfo.ini\n        if (!extension_loaded(\"simplexml\")) {\n            die(\"phpSysInfo requires the simplexml extension to php in order to work properly.\");\n        }\n        if (simplexml_load_string(\"<A><B><C/></B>\\n</A>\") !== simplexml_load_string(\"<A><B><C/></B></A>\")) { // json_encode issue test\n            define('PSI_JSON_ISSUE', true); // Problem must be solved\n        }\n    }\n\n    /* restore error level */\n    error_reporting($old_err_rep);\n\n    /* restore error handler */\n    if (function_exists('errorHandlerPsi')) {\n        set_error_handler('errorHandlerPsi');\n    }\n}\n"], "filenames": ["phpsysinfo.ini.new", "read_config.php"], "buggy_code_start_loc": [48, 89], "buggy_code_end_loc": [48, 89], "fixing_code_start_loc": [49, 90], "fixing_code_end_loc": [56, 95], "type": "CWE-352", "message": "Cross Site Request Forgery (CSRF) vulnerability in Phpsysinfo version 3.4.3 allows a remote attacker to obtain sensitive information via a crafted page in the XML.php file.", "other": {"cve": {"id": "CVE-2023-49006", "sourceIdentifier": "cve@mitre.org", "published": "2023-12-19T10:15:07.883", "lastModified": "2024-01-02T13:54:04.177", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross Site Request Forgery (CSRF) vulnerability in Phpsysinfo version 3.4.3 allows a remote attacker to obtain sensitive information via a crafted page in the XML.php file."}, {"lang": "es", "value": "Vulnerabilidad de Cross Site Request Forgery (CSRF) en Phpsysinfo versi\u00f3n 3.4.3 permite a un atacante remoto obtener informaci\u00f3n confidencial a trav\u00e9s de una p\u00e1gina manipulada en el archivo XML.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:phpsysinfo:phpsysinfo:3.4.3:*:*:*:*:*:*:*", "matchCriteriaId": "E23F0F66-F333-46A3-97D0-044CB005C884"}]}]}], "references": [{"url": "https://github.com/Hebing123/cve/issues/5", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking"]}, {"url": "https://github.com/phpsysinfo/phpsysinfo/commit/4f2cee505e4f2e9b369a321063ff2c5e0c34ba45", "source": "cve@mitre.org", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/ca6d669f-fd82-4188-aae2-69e08740d982/", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/phpsysinfo/phpsysinfo/commit/4f2cee505e4f2e9b369a321063ff2c5e0c34ba45"}}