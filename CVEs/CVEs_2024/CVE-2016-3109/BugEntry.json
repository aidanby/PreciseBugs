{"buggy_code": ["<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\n/**\n * Controller of the enlight script renderer plugin\n *\n * The Enlight_Controller_Plugins_ScriptRenderer_Bootstrap is a default plugin to render javascript files over the\n * controller. Used by the extjs application module.\n *\n * @category   Enlight\n * @package    Enlight_Extensions\n * @copyright  Copyright (c) 2011, shopware AG (http://www.shopware.de)\n * @license    http://enlight.de/license     New BSD License\n */\nclass Enlight_Controller_Plugins_ScriptRenderer_Bootstrap extends Enlight_Plugin_Bootstrap_Default\n{\n    /**\n     * @var string Used for the Zend_Filter_Inflector\n     */\n    protected $target = ':module/:controller/:file:suffix';\n\n    /**\n     * @var string Used when no file parameter is given.\n     */\n    protected $defaultFile = null;\n\n    /**\n     * @var array Filter rules for the Zend_Filter_Inflector\n     */\n    protected $filterRules = array(\n        ':module'     => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n        ':controller' => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n        ':file'       => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n        'suffix'      => '.js'\n    );\n\n    /**\n     * @var array Will be set in the response instance on pre dispatch.\n     */\n    protected $headers = array(\n        'Content-Type'  => null,\n        'Cache-Control' => 'private, proxy-revalidate, max-age=2592000, s-maxage=0',\n        'Pragma'        => 'private',\n        'Expires'       => null,\n        'Last-Modified' => null\n    );\n\n    /**\n     * @var bool Flag if the view is already rendered\n     */\n    protected $render = false;\n\n    /**\n     * @var Enlight_Controller_Plugins_ViewRenderer_Bootstrap Instance of the enlight view renderer.\n     */\n    protected $viewRenderer;\n\n    /**\n     * Plugin install method.\n     * Subscribes the Enlight_Controller_Action_PreDispatch event to\n     * render the script template and set the headers in the response instance.\n     */\n    public function init()\n    {\n        $event = new Enlight_Event_Handler_Default(\n            'Enlight_Controller_Action_PreDispatch',\n            array($this, 'onPreDispatch'),\n            300\n        );\n        $this->Application()->Events()->registerListener($event);\n    }\n\n    /**\n     * Loads the script template, if not set.\n     *\n     * @param   Enlight_Event_EventArgs $args\n     */\n    public function onPreDispatch(Enlight_Event_EventArgs $args)\n    {\n        if (!$this->render) {\n            return;\n        }\n\n        $this->render = false;\n\n        if ($this->viewRenderer->Action()->View()->hasTemplate()\n            || !$this->viewRenderer->shouldRender()\n        ) {\n            return;\n        }\n\n        $template = $this->getTemplateName();\n        if ($template === null) {\n            return;\n        }\n\n        $this->viewRenderer->Action()->View()->loadTemplate($template);\n\n        foreach ($this->headers as $name => $value) {\n            if ($name === 'Expires' && $value === null) {\n                $value = Zend_Date::now()->addMonth(1)->get(Zend_Date::RFC_1123);\n            } elseif ($name === 'Last-Modified' && $value === null) {\n                $value = Zend_Date::now();\n                $value = $value->get(Zend_Date::RFC_1123);\n            } elseif ($name === 'Content-Type' && $value === null) {\n                $front = $args->getSubject()->Front();\n                $value = 'application/javascript; charset=' . $front->getParam('charset');\n            }\n\n            $this->viewRenderer->Action()->Response()->setHeader($name, $value, true);\n        }\n    }\n\n    /**\n     * Sets the render flag. Loads the view renderer.\n     *\n     * @param   bool $flag\n     * @return  Enlight_Controller_Plugins_ScriptRenderer_Bootstrap\n     */\n    public function setRender($flag = true)\n    {\n        $this->setViewRenderer();\n        $this->render = $flag ? true : false;\n        return $this;\n    }\n\n    /**\n     * Returns the template name.\n     *\n     * @return  string\n     */\n    public function getTemplateName()\n    {\n        $request = $this->viewRenderer->Action()->Request();\n        $dispatcher = $this->viewRenderer->Front()->Dispatcher();\n\n        $moduleName = $dispatcher->formatModuleName($request->getModuleName());\n        $controllerName = $dispatcher->formatControllerName($request->getControllerName());\n\n        $inflector = new Zend_Filter_Inflector($this->target);\n        $inflector->setRules($this->filterRules);\n        $inflector->setThrowTargetExceptionsOn(false);\n\n        $fileNames = (array) $request->getParam('file', $this->defaultFile);\n\n        if (empty($fileNames)) {\n            $fileNames = $request->getParam('f');\n            $fileNames = explode('|', $fileNames);\n        }\n\n        $templateNames = array();\n\n        foreach ($fileNames as $fileName) {\n            // if string starts with \"m/\" replace with \"model/\"\n            $fileName = preg_replace('/^m\\//', 'model/', $fileName);\n            $fileName = preg_replace('/^c\\//', 'controller/', $fileName);\n            $fileName = preg_replace('/^v\\//', 'view/', $fileName);\n\n            $fileName = ltrim(dirname($fileName) . '/' . basename($fileName, '.js'), '/.');\n\n            if (empty($fileName)) {\n                continue;\n            }\n\n            $templateNames[] = $inflector->filter(array(\n                'module'     => $moduleName,\n                'controller' => $controllerName,\n                'file'       => $fileName)\n            );\n        }\n\n        $count = count($templateNames);\n\n        if ($count === 0) {\n            return null;\n        } elseif ($count === 1) {\n            return $templateNames[0];\n        } else {\n            return 'snippet:string:{include file=\"' . implode(\"\\\"}\\n{include file=\\\"\", $templateNames) . '\"}';\n        }\n    }\n\n    /**\n     * Sets the view renderer instance\n     *\n     * @param Enlight_Controller_Plugins_ViewRenderer_Bootstrap|null $viewRenderer\n     * @return Enlight_Controller_Plugins_ScriptRenderer_Bootstrap\n     */\n    public function setViewRenderer(Enlight_Controller_Plugins_ViewRenderer_Bootstrap $viewRenderer = null)\n    {\n        if ($viewRenderer === null) {\n            $viewRenderer = $this->Collection()->get('ViewRenderer');\n        }\n\n        $this->viewRenderer = $viewRenderer;\n\n        return $this;\n    }\n}\n", "<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\n/**\n * Shopware ExtJs Controller\n *\n * @category  Shopware\n * @package   Shopware\\Controllers\\Backend\n * @copyright Copyright (c) shopware AG (http://www.shopware.de)\n */\nclass Shopware_Controllers_Backend_ExtJs extends Enlight_Controller_Action\n{\n    /**\n     * @var Shopware_Plugins_Backend_Auth_Bootstrap\n     */\n    protected $auth;\n\n    /**\n     * Array with all permissions to check in this controller\n     *\n     * @var array\n     */\n    protected $aclPermissions = array();\n\n    /**\n     * Holds optionally acl error message\n     *\n     * @var string\n     */\n    protected $errorMessage;\n\n    /**\n     * Enable script renderer and json request plugin\n     * Do acl checks\n     *\n     * @return void\n     */\n    public function init()\n    {\n        $this->Front()->Plugins()->ScriptRenderer()->setRender();\n        $this->Front()->Plugins()->JsonRequest()\n            ->setParseInput()\n            ->setParseParams(array('group', 'sort', 'filter'))\n            ->setPadding($this->Request()->targetField);\n\n        // Call controller acl rules (user - defined)\n        $this->initAcl();\n    }\n\n    /**\n     * Enable json renderer for index / load action\n     * Check acl rules\n     *\n     * @return void\n     */\n    public function preDispatch()\n    {\n        if (!in_array($this->Request()->getActionName(), array('index', 'load', 'skeleton', 'extends'))) {\n            $this->Front()->Plugins()->Json()->setRenderer();\n        }\n    }\n\n    /**\n     * This method must be overwritten by any module which wants to use ACL.\n     *\n     * Method to define acl dependencies in backend controllers\n     * <code>\n     * $this->setAclResourceName('name_of_your_resource'); // Default to controller base name\n     * $this->addAclPermission('name_of_action_with_action_prefix','name_of_assigned_privilege','optionaly error message');\n     * // $this->addAclPermission('indexAction','read','Ops. You have no permission to view that...');\n     * </code>\n     */\n    protected function initAcl()\n    {\n    }\n\n    /**\n     * Returns all acl permissions\n     * @return array\n     */\n    public function getAclRules()\n    {\n        return $this->aclPermissions;\n    }\n\n    /**\n     * Add an acl permission rule to $this->aclPermissions array\n     * Permissions will be checked automatically.\n     *\n     * @param $action string Name of action with action prefix\n     * @param $privilege string Name of privilege as you have set in s_core_acl_privileges\n     * @param $errorMessage string Optionally error message to show if permission denied\n     */\n    protected function addAclPermission($action, $privilege, $errorMessage = '')\n    {\n        if (strpos($action, 'Action') !== false) {\n            $action = str_replace('Action', '', $action);\n        }\n\n        $this->aclPermissions[$action] = array(\n            'privilege' => $privilege,\n            'errorMessage' => $errorMessage\n        );\n    }\n\n    /**\n     * Helper method to do particular in code acl checks\n     *\n     * @param null|string $privilege Name of privilege\n     * @param null|string|Zend_Acl_Role_Interface $resource\n     * @param null|string|Zend_Acl_Resource_Interface $role\n     * @return boolean\n     */\n    protected function _isAllowed($privilege, $resource = null, $role = null)\n    {\n        return Shopware()->Plugins()->Backend()->Auth()->isAllowed(array(\n            'privilege' => $privilege,\n            'resource' => $resource,\n            'role' => $role\n        ));\n    }\n\n    /**\n     * Needs to be present for the script renderer\n     */\n    public function indexAction()\n    {\n        $identity = Shopware()->Auth()->getIdentity();\n        $this->View()->assign('user', $identity, true);\n\n        if ($this->Request()->get('file') == 'bootstrap') {\n            $this->View()->assign('tinymceLang', $this->getTinyMceLang($identity), true);\n        }\n    }\n\n    protected function getTinyMceLang($identity)\n    {\n        if (!$identity || !$identity->locale) {\n            return 'en';\n        }\n\n        $attemptedLanguage = substr($identity->locale->getLocale(), 0, 2);\n\n        if (file_exists(Shopware()->OldPath() . \"engine/Library/TinyMce/langs/\".$attemptedLanguage.\".js\")) {\n            return $attemptedLanguage;\n        }\n\n        return 'en';\n    }\n\n    /**\n     * Needs to be present for the script renderer\n     */\n    public function loadAction()\n    {\n    }\n\n    public function extendsAction()\n    {\n        $request = $this->Request();\n        $moduleName = 'backend';\n        $controllerName = $this->Request()->getParam('baseController');\n\n        $inflector = new Zend_Filter_Inflector(':module/:controller/:file:suffix');\n        $inflector->setRules(array(\n            ':module' => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n            ':controller' => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n            ':file' => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n            'suffix' => '.js'\n        ));\n        $inflector->setThrowTargetExceptionsOn(false);\n\n        $fileNames = (array) $request->getParam('file');\n\n        if (empty($fileNames)) {\n            $fileNames = $request->getParam('f', array());\n            $fileNames = explode('|', $fileNames);\n        }\n\n        if (empty($fileNames)) {\n            return;\n        }\n\n        $this->Response()->setHeader('Content-Type', 'application/javascript; charset=utf-8', true);\n        $template = 'snippet:string:';\n\n        $this->View()->Engine()->setCompileId($this->View()->Engine()->getCompileId() . '_' . $this->Request()->getControllerName());\n\n        foreach ($fileNames as $fileName) {\n            // if string starts with \"m/\" replace with \"model/\"\n            $fileName = preg_replace('/^m\\//', 'model/', $fileName);\n            $fileName = preg_replace('/^c\\//', 'controller/', $fileName);\n            $fileName = preg_replace('/^v\\//', 'view/', $fileName);\n\n            $fileName = ltrim(dirname($fileName) . '/' . basename($fileName, '.js'), '/.');\n            if (empty($fileName)) {\n                continue;\n            }\n            $templateBase = $inflector->filter(array(\n                'module' => $moduleName,\n                'controller' => $controllerName,\n                'file' => $fileName)\n            );\n\n            $templateExtend = $inflector->filter(array(\n                'module' => $moduleName,\n                'controller' => $this->Request()->getControllerName(),\n                'file' => $fileName)\n            );\n            if ($this->View()->templateExists($templateBase)) {\n                $template .= '{include file=\"' . $templateBase. '\"}' . \"\\n\";\n            }\n            if ($this->View()->templateExists($templateExtend)) {\n                $template .= '{include file=\"' . $templateExtend. '\"}' . \"\\n\";\n            }\n        }\n\n        $toFind = $this->Request()->getParam('find');\n        $toReplace = $this->Request()->getParam('replace');\n        $toFind = rtrim($toFind, '.') . '.';\n        $toReplace = rtrim($toReplace, '.') . '.';\n\n        $this->View()->setTemplate();\n        $template = $this->View()->fetch($template);\n        $template = str_replace($toFind, $toReplace, $template);\n        echo $template;\n    }\n}\n"], "fixing_code": ["<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\n/**\n * Controller of the enlight script renderer plugin\n *\n * The Enlight_Controller_Plugins_ScriptRenderer_Bootstrap is a default plugin to render javascript files over the\n * controller. Used by the extjs application module.\n *\n * @category   Enlight\n * @package    Enlight_Extensions\n * @copyright  Copyright (c) 2011, shopware AG (http://www.shopware.de)\n * @license    http://enlight.de/license     New BSD License\n */\nclass Enlight_Controller_Plugins_ScriptRenderer_Bootstrap extends Enlight_Plugin_Bootstrap_Default\n{\n    /**\n     * @var string Used for the Zend_Filter_Inflector\n     */\n    protected $target = ':module/:controller/:file:suffix';\n\n    /**\n     * @var string Used when no file parameter is given.\n     */\n    protected $defaultFile = null;\n\n    /**\n     * @var array Filter rules for the Zend_Filter_Inflector\n     */\n    protected $filterRules = array(\n        ':module'     => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n        ':controller' => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n        ':file'       => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n        'suffix'      => '.js'\n    );\n\n    /**\n     * @var array Will be set in the response instance on pre dispatch.\n     */\n    protected $headers = array(\n        'Content-Type'  => null,\n        'Cache-Control' => 'private, proxy-revalidate, max-age=2592000, s-maxage=0',\n        'Pragma'        => 'private',\n        'Expires'       => null,\n        'Last-Modified' => null\n    );\n\n    /**\n     * @var bool Flag if the view is already rendered\n     */\n    protected $render = false;\n\n    /**\n     * @var Enlight_Controller_Plugins_ViewRenderer_Bootstrap Instance of the enlight view renderer.\n     */\n    protected $viewRenderer;\n\n    /**\n     * Plugin install method.\n     * Subscribes the Enlight_Controller_Action_PreDispatch event to\n     * render the script template and set the headers in the response instance.\n     */\n    public function init()\n    {\n        $event = new Enlight_Event_Handler_Default(\n            'Enlight_Controller_Action_PreDispatch',\n            array($this, 'onPreDispatch'),\n            300\n        );\n        $this->Application()->Events()->registerListener($event);\n    }\n\n    /**\n     * Loads the script template, if not set.\n     *\n     * @param   Enlight_Event_EventArgs $args\n     */\n    public function onPreDispatch(Enlight_Event_EventArgs $args)\n    {\n        if (!$this->render) {\n            return;\n        }\n\n        $this->render = false;\n\n        if ($this->viewRenderer->Action()->View()->hasTemplate()\n            || !$this->viewRenderer->shouldRender()\n        ) {\n            return;\n        }\n\n        $template = $this->getTemplateName();\n        if ($template === null) {\n            return;\n        }\n\n        $this->viewRenderer->Action()->View()->loadTemplate($template);\n\n        foreach ($this->headers as $name => $value) {\n            if ($name === 'Expires' && $value === null) {\n                $value = Zend_Date::now()->addMonth(1)->get(Zend_Date::RFC_1123);\n            } elseif ($name === 'Last-Modified' && $value === null) {\n                $value = Zend_Date::now();\n                $value = $value->get(Zend_Date::RFC_1123);\n            } elseif ($name === 'Content-Type' && $value === null) {\n                $front = $args->getSubject()->Front();\n                $value = 'application/javascript; charset=' . $front->getParam('charset');\n            }\n\n            $this->viewRenderer->Action()->Response()->setHeader($name, $value, true);\n        }\n    }\n\n    /**\n     * Sets the render flag. Loads the view renderer.\n     *\n     * @param   bool $flag\n     * @return  Enlight_Controller_Plugins_ScriptRenderer_Bootstrap\n     */\n    public function setRender($flag = true)\n    {\n        $this->setViewRenderer();\n        $this->render = $flag ? true : false;\n        return $this;\n    }\n\n    /**\n     * Returns the template name.\n     *\n     * @return  string\n     */\n    public function getTemplateName()\n    {\n        $request = $this->viewRenderer->Action()->Request();\n        $dispatcher = $this->viewRenderer->Front()->Dispatcher();\n\n        $moduleName = $dispatcher->formatModuleName($request->getModuleName());\n        $controllerName = $dispatcher->formatControllerName($request->getControllerName());\n\n        $inflector = new Zend_Filter_Inflector($this->target);\n        $inflector->setRules($this->filterRules);\n        $inflector->setThrowTargetExceptionsOn(false);\n\n        $fileNames = (array) $request->getParam('file', $this->defaultFile);\n\n        if (empty($fileNames)) {\n            $fileNames = $request->getParam('f');\n            $fileNames = explode('|', $fileNames);\n        }\n\n        $templateNames = array();\n        foreach ($fileNames as $fileName) {\n            // Remove unwanted characters\n            $fileName = preg_replace('/[^a-z0-9\\/_-]/i', '', $fileName);\n\n            // Replace multiple forward slashes\n            $fileName = preg_replace('#/+#', '/', $fileName);\n\n            // Remove leading and trailing forward slash\n            $fileName = trim($fileName, '/');\n\n            // if string starts with \"m/\" replace with \"model/\"\n            $fileName = preg_replace('/^m\\//', 'model/', $fileName);\n            $fileName = preg_replace('/^c\\//', 'controller/', $fileName);\n            $fileName = preg_replace('/^v\\//', 'view/', $fileName);\n\n            if (empty($fileName)) {\n                continue;\n            }\n\n            $fileName = $inflector->filter(array(\n                'module'     => $moduleName,\n                'controller' => $controllerName,\n                'file'       => $fileName\n            ));\n\n            $templateNames[]  = $fileName;\n        }\n\n        $count = count($templateNames);\n        if ($count === 0) {\n            return null;\n        } elseif ($count === 1) {\n            return $templateNames[0];\n        } else {\n            return 'snippet:string:{include file=\"' . implode(\"\\\"}\\n{include file=\\\"\", $templateNames) . '\"}';\n        }\n    }\n\n    /**\n     * Sets the view renderer instance\n     *\n     * @param Enlight_Controller_Plugins_ViewRenderer_Bootstrap|null $viewRenderer\n     * @return Enlight_Controller_Plugins_ScriptRenderer_Bootstrap\n     */\n    public function setViewRenderer(Enlight_Controller_Plugins_ViewRenderer_Bootstrap $viewRenderer = null)\n    {\n        if ($viewRenderer === null) {\n            $viewRenderer = $this->Collection()->get('ViewRenderer');\n        }\n\n        $this->viewRenderer = $viewRenderer;\n\n        return $this;\n    }\n}\n", "<?php\n/**\n * Shopware 5\n * Copyright (c) shopware AG\n *\n * According to our dual licensing model, this program can be used either\n * under the terms of the GNU Affero General Public License, version 3,\n * or under a proprietary license.\n *\n * The texts of the GNU Affero General Public License with an additional\n * permission and of our proprietary license can be found at and\n * in the LICENSE file you have received along with this program.\n *\n * This program is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the\n * GNU Affero General Public License for more details.\n *\n * \"Shopware\" is a registered trademark of shopware AG.\n * The licensing of the program under the AGPLv3 does not imply a\n * trademark license. Therefore any rights, title and interest in\n * our trademarks remain entirely with us.\n */\n\n/**\n * Shopware ExtJs Controller\n *\n * @category  Shopware\n * @package   Shopware\\Controllers\\Backend\n * @copyright Copyright (c) shopware AG (http://www.shopware.de)\n */\nclass Shopware_Controllers_Backend_ExtJs extends Enlight_Controller_Action\n{\n    /**\n     * @var Shopware_Plugins_Backend_Auth_Bootstrap\n     */\n    protected $auth;\n\n    /**\n     * Array with all permissions to check in this controller\n     *\n     * @var array\n     */\n    protected $aclPermissions = array();\n\n    /**\n     * Holds optionally acl error message\n     *\n     * @var string\n     */\n    protected $errorMessage;\n\n    /**\n     * Enable script renderer and json request plugin\n     * Do acl checks\n     *\n     * @return void\n     */\n    public function init()\n    {\n        $this->Front()->Plugins()->ScriptRenderer()->setRender();\n        $this->Front()->Plugins()->JsonRequest()\n            ->setParseInput()\n            ->setParseParams(array('group', 'sort', 'filter'))\n            ->setPadding($this->Request()->targetField);\n\n        // Call controller acl rules (user - defined)\n        $this->initAcl();\n    }\n\n    /**\n     * Enable json renderer for index / load action\n     * Check acl rules\n     *\n     * @return void\n     */\n    public function preDispatch()\n    {\n        if (!in_array($this->Request()->getActionName(), array('index', 'load', 'skeleton', 'extends'))) {\n            $this->Front()->Plugins()->Json()->setRenderer();\n        }\n    }\n\n    /**\n     * This method must be overwritten by any module which wants to use ACL.\n     *\n     * Method to define acl dependencies in backend controllers\n     * <code>\n     * $this->setAclResourceName('name_of_your_resource'); // Default to controller base name\n     * $this->addAclPermission('name_of_action_with_action_prefix','name_of_assigned_privilege','optionaly error message');\n     * // $this->addAclPermission('indexAction','read','Ops. You have no permission to view that...');\n     * </code>\n     */\n    protected function initAcl()\n    {\n    }\n\n    /**\n     * Returns all acl permissions\n     * @return array\n     */\n    public function getAclRules()\n    {\n        return $this->aclPermissions;\n    }\n\n    /**\n     * Add an acl permission rule to $this->aclPermissions array\n     * Permissions will be checked automatically.\n     *\n     * @param $action string Name of action with action prefix\n     * @param $privilege string Name of privilege as you have set in s_core_acl_privileges\n     * @param $errorMessage string Optionally error message to show if permission denied\n     */\n    protected function addAclPermission($action, $privilege, $errorMessage = '')\n    {\n        if (strpos($action, 'Action') !== false) {\n            $action = str_replace('Action', '', $action);\n        }\n\n        $this->aclPermissions[$action] = array(\n            'privilege' => $privilege,\n            'errorMessage' => $errorMessage\n        );\n    }\n\n    /**\n     * Helper method to do particular in code acl checks\n     *\n     * @param null|string $privilege Name of privilege\n     * @param null|string|Zend_Acl_Role_Interface $resource\n     * @param null|string|Zend_Acl_Resource_Interface $role\n     * @return boolean\n     */\n    protected function _isAllowed($privilege, $resource = null, $role = null)\n    {\n        return Shopware()->Plugins()->Backend()->Auth()->isAllowed(array(\n            'privilege' => $privilege,\n            'resource' => $resource,\n            'role' => $role\n        ));\n    }\n\n    /**\n     * Needs to be present for the script renderer\n     */\n    public function indexAction()\n    {\n        $identity = Shopware()->Auth()->getIdentity();\n        $this->View()->assign('user', $identity, true);\n\n        if ($this->Request()->get('file') == 'bootstrap') {\n            $this->View()->assign('tinymceLang', $this->getTinyMceLang($identity), true);\n        }\n    }\n\n    protected function getTinyMceLang($identity)\n    {\n        if (!$identity || !$identity->locale) {\n            return 'en';\n        }\n\n        $attemptedLanguage = substr($identity->locale->getLocale(), 0, 2);\n\n        if (file_exists(Shopware()->OldPath() . \"engine/Library/TinyMce/langs/\".$attemptedLanguage.\".js\")) {\n            return $attemptedLanguage;\n        }\n\n        return 'en';\n    }\n\n    /**\n     * Needs to be present for the script renderer\n     */\n    public function loadAction()\n    {\n    }\n\n    public function extendsAction()\n    {\n        $request = $this->Request();\n        $moduleName = 'backend';\n        $controllerName = $this->Request()->getParam('baseController');\n\n        $inflector = new Zend_Filter_Inflector(':module/:controller/:file:suffix');\n        $inflector->setRules(array(\n            ':module' => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n            ':controller' => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n            ':file' => array('Word_CamelCaseToUnderscore', 'StringToLower'),\n            'suffix' => '.js'\n        ));\n        $inflector->setThrowTargetExceptionsOn(false);\n\n        $fileNames = (array) $request->getParam('file');\n\n        if (empty($fileNames)) {\n            $fileNames = $request->getParam('f', array());\n            $fileNames = explode('|', $fileNames);\n        }\n\n        if (empty($fileNames)) {\n            return;\n        }\n\n        $this->Response()->setHeader('Content-Type', 'application/javascript; charset=utf-8', true);\n        $template = 'snippet:string:';\n\n        $this->View()->Engine()->setCompileId($this->View()->Engine()->getCompileId() . '_' . $this->Request()->getControllerName());\n\n        foreach ($fileNames as $fileName) {\n            // Remove unwanted characters\n            $fileName = preg_replace('/[^a-z0-9\\/_-]/i', '', $fileName);\n\n            // Replace multiple forward slashes\n            $fileName = preg_replace('#/+#', '/', $fileName);\n\n            // Remove leading and trailing forward slash\n            $fileName = trim($fileName, '/');\n\n            // if string starts with \"m/\" replace with \"model/\"\n            $fileName = preg_replace('/^m\\//', 'model/', $fileName);\n            $fileName = preg_replace('/^c\\//', 'controller/', $fileName);\n            $fileName = preg_replace('/^v\\//', 'view/', $fileName);\n\n            if (empty($fileName)) {\n                continue;\n            }\n\n            $templateBase = $inflector->filter(array(\n                'module'     => $moduleName,\n                'controller' => $controllerName,\n                'file'       => $fileName\n            ));\n\n            $templateExtend = $inflector->filter(array(\n                'module'     => $moduleName,\n                'controller' => $this->Request()->getControllerName(),\n                'file'       => $fileName\n            ));\n\n            if ($this->View()->templateExists($templateBase)) {\n                $template .= '{include file=\"' . $templateBase. '\"}' . \"\\n\";\n            }\n            if ($this->View()->templateExists($templateExtend)) {\n                $template .= '{include file=\"' . $templateExtend. '\"}' . \"\\n\";\n            }\n        }\n\n        $toFind = $this->Request()->getParam('find');\n        $toReplace = $this->Request()->getParam('replace');\n        $toFind = rtrim($toFind, '.') . '.';\n        $toReplace = rtrim($toReplace, '.') . '.';\n\n        $this->View()->setTemplate();\n        $template = $this->View()->fetch($template);\n        $template = str_replace($toFind, $toReplace, $template);\n        echo $template;\n    }\n}\n"], "filenames": ["engine/Library/Enlight/Controller/Plugins/ScriptRenderer/Bootstrap.php", "engine/Shopware/Controllers/Backend/ExtJs.php"], "buggy_code_start_loc": [173, 210], "buggy_code_end_loc": [195, 231], "fixing_code_start_loc": [172, 211], "fixing_code_end_loc": [201, 241], "type": "CWE-20", "message": "The backend/Login/load/ script in Shopware before 5.1.5 allows remote attackers to execute arbitrary code.", "other": {"cve": {"id": "CVE-2016-3109", "sourceIdentifier": "secalert@redhat.com", "published": "2017-04-21T20:59:00.713", "lastModified": "2018-10-09T19:59:46.457", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "The backend/Login/load/ script in Shopware before 5.1.5 allows remote attackers to execute arbitrary code."}, {"lang": "es", "value": "La secuencia de comandos backend/Login/load/ en Shopware en versiones anteriores a 5.1.5 permite a atacantes remotos ejecutar el c\u00f3digo arbitrario."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 10.0}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 10.0, "acInsufInfo": true, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:shopware:shopware:*:*:*:*:*:*:*:*", "versionEndIncluding": "5.1.4", "matchCriteriaId": "DB4BF90C-F5E1-4DE0-8918-32EE92EB24D0"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/136781/Shopware-Remote-Code-Execution.html", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch", "Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securityfocus.com/archive/1/538173/100/0/threaded", "source": "secalert@redhat.com"}, {"url": "http://www.securityfocus.com/bid/97979", "source": "secalert@redhat.com", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/shopware/shopware/commit/d73e9031a5b2ab6e918eb86d1e2b2e873cd3558d", "source": "secalert@redhat.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/shopware/shopware/commit/d73e9031a5b2ab6e918eb86d1e2b2e873cd3558d"}}