{"buggy_code": ["<?php\n\t/*\n\t *\tCopyright 2007 John Oren\n\t *\n\t *\tLicensed under the Apache License, Version 2.0 (the \"License\");\n\t *\tyou may not use this file except in compliance with the License.\n\t *\tYou may obtain a copy of the License at\n\t *\t\thttp://www.apache.org/licenses/LICENSE-2.0\n\t *\tUnless required by applicable law or agreed to in writing, software\n\t *\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\t *\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t *\tSee the License for the specific language governing permissions and\n\t *\tlimitations under the License.\n\t */\n\n    require_once($path.\"OpenSiteAdmin/scripts/classes/Ajax.php\");\n\t//include all of the standard fields\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Checkbox.php\");\n    require_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Date.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/ForeignKey.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Group.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Hidden.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Image.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Label.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Password.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/RadioButtons.php\");\n    require_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Select.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Text.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/TextArea.php\");\n\n\t/**\n\t * Handles form field display and pre-processing.\n\t *\n\t * Sets up a form field for display, handling field and error display.\n\t * Performs pre-processing on a form field, preparing it for use in a database.\n\t *\n\t * @author John Oren\n\t * @version 1.5 December 24, 2009\n\t */\n\tabstract class Field {\n\t\t/**\n\t\t * @static\n\t\t * @var Next form field name generator.\n\t\t */\n\t\tprotected static $nextFieldName = 0;\n\n        /** @var An optional object to display Ajax for the field. */\n        protected $ajax;\n        /** @var The name of the CSS ID for this field. */\n        protected $cssID;\n        /** @var The default value to use for this field if none is provided. */\n        protected $default;\n        /** @var Text of any error messages generated during field processing. */\n\t\tprotected $errorText;\n        /** @var The name of this fields form field. */\n        protected $fieldName;\n        /** @var The integer type of the form this field is part of. */\n        protected $formType;\n        /** @var True if this field should be used in a list. */\n        protected $inList;\n        /** @var True if no value was supplied for this field. */\n        protected $isEmpty;\n        /** @var True if this field is associated with a database key. */\n        private $keyField;\n        /** @var The name of the database field this form field corresponds to. */\n        protected $name;\n        /** @var The options and flags associated with this form field. */\n        protected $options;\n        /** @var True if this field must be filled in. */\n        protected $required;\n        /** @var If true, no error messages will be displayed. */\n        protected $silent;\n\t\t/** @var The title to display for this form field. */\n\t\tprotected $title;\n        /** @var The current value of this field. */\n        protected $value;\n\n\t\t/**\n\t\t * Constructs a form field with information on how to display it.\n\t\t *\n\t\t * @param STRING $name The name of the database field this form field corresponds to.\n\t\t * @param STRING $title The title to display for this form field.\n\t\t * @param MIXED $options The options associated with this form field.\n\t\t * @param BOOLEAN $inList True if this field should be used in a list view.\n\t\t * @param BOOLEAN $required True if this form field is required.\n\t\t */\n\t\tfunction __construct($name, $title, $options, $inList, $required=false) {\n\t\t\t$this->name = $name;\n\t\t\t$this->title = $title;\n\t\t\t$this->options = $options;\n\t\t\t$this->inList = $inList;\n\t\t\t$this->required = $required;\n            $this->fieldName = \"field\".Field::$nextFieldName++;\n            $this->isEmpty = false;\n            $this->silent = false;\n            $this->keyField = false;\n            $this->value = null;\n            $this->cssID =$this->fieldName;\n            $this->ajax = null;\n        }\n\n        /**\n         * Sets the Ajax object associated with this field.\n         *\n         * @param OBJECT Ajax object\n         * @return VOID\n         */\n        function addAjax(Ajax $ajax) {\n            $ajax->setFieldName($this->getFieldName());\n            $this->ajax = $ajax;\n        }\n\n        /**\n         * Hack to allow foreign keys to process correctly if they are called\n         * before their associated key gets processed.\n         *\n         * @return BOOLEAN False if unsuccessful\n         */\n\t\tfunction databasePrep() {}\n\n        /**\n\t\t * Prepares a form field for display.\n\t\t *\n\t\t * @return STRING HTML to display for the form field\n\t\t */\n\t\tabstract function display();\n\n        /**\n         * Returns the name of the CSS ID for this field.\n         *\n         * @return STRING\n         */\n        protected function getCSSID() {\n            return $this->cssID;\n        }\n\n        /**\n         * Returns any error text associated with this field.\n         *\n         * @return STRING Error messages.\n         */\n\t\tprotected function getErrorText() {\n\t\t\tif(empty($this->errorText) || $this->isSilent()) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\treturn '<br><font color=\"red\">'.$this->errorText.'</font>';\n\t\t}\n\n        /**\n\t\t * Returns the name of this field for use in an html form.\n\t\t *\n\t\t * @return STRING form field name.\n\t\t */\n\t\tfunction getFieldName() {\n\t\t\treturn $this->fieldName;\n\t\t}\n\n        /**\n\t\t * Returns the contents of this field for display in a list.\n\t\t *\n\t\t * @param STRING The default value to use for this field in a list.\n\t\t * @return STRING The default value.\n\t\t */\n\t\tfunction getListView($default) {\n\t\t\treturn $default;\n\t\t}\n\n\t\t/**\n\t\t * Returns the name of the SQL field this form field is associated with.\n\t\t *\n\t\t * @return STRING The name of this form field's corresponding SQL field.\n\t\t */\n\t\tfunction getName() {\n\t\t\treturn $this->name;\n        }\n\n        /**\n\t\t * Returns the options and flags for this form field.\n\t\t *\n\t\t * @return MIXED Options for this form field.\n\t\t */\n\t\tprotected function getOptions() {\n\t\t\treturn $this->options;\n\t\t}\n\n        /**\n\t\t * Returns the display name (title) of this form field.\n         *\n         * @param BOOLEAN $isList Excludes the visual queue for required fields in list view\n\t\t * @return STRING The name to display with this form field.\n\t\t */\n\t\tfunction getTitle($isList=false) {\n\t\t\tif(!$this->isRequired() || $isList) {\n\t\t\t\treturn $this->title;\n\t\t\t} else {\n\t\t\t\treturn \"*\".$this->title;\n\t\t\t}\n        }\n\n        /**\n\t\t * Gets the current value of this form field.\n         *\n\t\t * @return MIXED Current field value.\n\t\t */\n\t\tfunction getValue() {\n\t\t\t$ret = $this->value;\n            if(empty($ret)) {\n\t\t\t\treturn $this->default;\n\t\t\t}\n\t\t\treturn $ret;\n        }\n\n        /**\n\t\t * Returns true if the type of the form this field is in is a delete form.\n\t\t *\n\t\t * @return BOOLEAN True if this field is in a delete form.\n\t\t */\n\t\tfunction isDelete() {\n\t\t\treturn $this->formType == Form::DELETE;\n\t\t}\n\n        /**\n         * Returns true if this field does not have a value.\n         *\n         * @return BOOLEAN False if a value was provided.\n         */\n        function isEmpty() {\n            return $this->isEmpty;\n        }\n\n        /**\n\t\t * Returns whether or not this form field should be used in a list context.\n\t\t *\n\t\t * @return BOOLEAN True if this field should be displayed in a list view.\n\t\t */\n\t\tfunction isInList() {\n\t\t\treturn $this->inList;\n        }\n\n        /**\n         * Returns whether or not this field is associated with a database key.\n         *\n         * @return BOOLEAN True if this field is associated with a database key.\n         */\n        function isKey() {\n            return $this->keyField;\n        }\n\n\t\t/**\n\t\t * Returns whether or not this form field must be filled in.\n\t\t *\n\t\t * @return BOOLEAN True if this field cannot be empty.\n\t\t */\n\t\tfunction isRequired() {\n\t\t\treturn $this->required;\n        }\n\n        /**\n         * Returns true if this field is currently suppressing error messages.\n         *\n         * @return BOOLEAN False if error messages are currently being displayed for this field.\n         */\n        function isSilent() {\n            return $this->silent;\n        }\n\n        /**\n         * Post-processes the field (sets the fields value internally and in the database).\n         *\n         * @param MIXED $value Value to store.\n         * @return BOOLEAN False if any error were encountered.\n         */\n        protected function postProcess($value) {\n            $this->setValue($value);\n            return true;\n        }\n\n        /**\n\t\t * Processes the field.\n\t\t *\n\t\t * @return BOOLEAN False if errors were encountered processing the field\n\t\t */\n\t\tfunction process() {\n\t\t\t$this->value = $_POST[$this->getFieldName()];\n            $this->setEmpty($this->value);\n\t\t\tif($this->isRequired() && $this->isEmpty()) {\n\t\t\t\t$this->errorText = \"Please enter a value\";\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn $this->postProcess($this->value);\n\t\t}\n\n        /**\n         * Sets the name of the CSS ID of this field.\n         *\n         * @param STRING The new CSS ID.\n         * @return VOID\n         */\n        function setCSSID($cssID) {\n            $this->cssID = $cssID;\n        }\n\n        /**\n         * Sets the default value for this field.\n         *\n         * @param MIXED $value Default value\n         * @return VOID\n         */\n\t\tfunction setDefaultValue($value) {\n\t\t\t$this->default = $value;\n        }\n\n        /**\n         * Internal function to evaluate if this field is empty and set the empty flag accordingly.\n         *\n         * @param MIXED $value Value (or values to check)\n         * @return VOID\n         */\n        protected function setEmpty($value) {\n            $this->isEmpty = empty($value);\n        }\n\n\t\t/**\n\t\t * Sets the form this field is in.\n\t\t *\n\t\t * @param INTEGER $formType A reference to the form this field is part of.\n\t\t * @return VOID\n\t\t */\n\t\tfunction setFormType($formType) {\n\t\t\t$this->formType = $formType;\n        }\n\n        /**\n         * Makes this field a database key.\n         *\n         * @return VOID\n         */\n        function setKey() {\n            $this->keyField = true;\n        }\n\n        /**\n         * Toggles error message suppression for this field.\n         *\n         * @param BOOLEAN $silent True if errors should be suppressed.\n         * @return VOID\n         */\n        function setSilent($silent) {\n            $this->silent = $silent;\n        }\n\n        /**\n\t\t * Sets the value of this field in the database.\n         *\n         * @param MIXED $value Value to set.\n         * @return VOID\n\t\t */\n\t\tfunction setValue($value) {\n            $this->value = $value;\n\t\t}\n\n        /**\n         * Copies this field and gives it a new unique fieldname.\n         *\n         * @return VOID\n         */\n\t\tfunction __clone() {\n\t\t\t$this->fieldName = \"field\".Field::$nextFieldName++;\n\t\t}\n\t}\n?>\n", "<?php\n\t/*\n\t *\tCopyright 2007 John Oren\n\t *\n\t *\tLicensed under the Apache License, Version 2.0 (the \"License\");\n\t *\tyou may not use this file except in compliance with the License.\n\t *\tYou may obtain a copy of the License at\n\t *\t\thttp://www.apache.org/licenses/LICENSE-2.0\n\t *\tUnless required by applicable law or agreed to in writing, software\n\t *\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\t *\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t *\tSee the License for the specific language governing permissions and\n\t *\tlimitations under the License.\n\t */\n\n\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/SecurityManager.php\");\n\n\t/**\n\t * Handles processing and security for the site's login process.\n\t *\n\t * @author John Oren\n\t * @version 1.2 July 31, 2008\n\t */\n\tclass LoginManager {\n\t\t/**\n\t\t * @static\n\t\t * @final\n\t\t * @var The maximum number of login attempts that can be made before a user's account is suspended.\n\t\t */\n\t\tconst MAX_LOGIN_ATTEMPTS = 5;\n\n\n        /**\n\t\t * @static\n\t\t * @final\n\t\t * @var Error code constant - the provided username and\\or password was invalid.\n\t\t */\n\t\tconst INVALID = 1;\n\t\t/**\n\t\t * @static\n\t\t * @final\n\t\t * @var Error code constant - no errors where encountered.\n\t\t */\n        const NONE = 2;\n        /**\n\t\t * @static\n\t\t * @final\n\t\t * @var Error code constant - The specified account has been suspended.\n\t\t */\n\t\tconst SUSPENDED = 3;\n\t\t/**\n\t\t * @static\n\t\t * @final\n\t\t * @var Error code constant - an unknown error was encountered.\n\t\t */\n\t\tconst UNKNOWN = 4;\n\n        protected $userID;\n\n\t\t/**\n\t\t * Attempts to log a user into the site's administrative system.\n\t\t *\n\t\t * @param STRING $user Username to use to login.\n\t\t * @param STRING $pass Password to attempt to use with the given user.\n\t\t * @param STRING $remember If set to \"yes\", the user's login information will be saved in cookies if it validates sucessfully.\n\t\t * @param BOOLEAN $isCookie True if the provided data is coming from cookie data (cookie passwords are already encrypted).\n\t\t * @return INTEGER One of the error code constants defined in this class.\n\t\t */\n\t\tfunction login($user, $pass, $remember=\"no\", $isCookie=false) {\n\t\t\t$sql = \"select `users`.*, `libraries`.`interTOME` from `users` JOIN `libraries` ON `users`.`libraryID` = `libraries`.`ID` where `username` LIKE '$user'\";\n\t\t\t$result = DatabaseManager::checkError($sql);\n\t\t\tif(DatabaseManager::getNumResults($result) === 0) {\n\t\t\t\treturn LoginManager::INVALID;\n\t\t\t}\n\t\t\t$row = DatabaseManager::fetchAssoc($result);\n\t\t\tif($row[\"active\"] == \"1\") {\n\t\t\t\tif($isCookie) {\n\t\t\t\t\t$pass2 = SecurityManager::encrypt($row[\"password\"], $row[\"salt\"]);\n\t\t\t\t} else {\n\t\t\t\t\t$pass2 = $row[\"password\"];\n\t\t\t\t}\n\t\t\t\tif(SecurityManager::encrypt($pass, $row[\"password_salt\"]) == $pass2 || crypt($pass, $pass2) == $pass2) {\n                    if(crypt($pass, $pass2) == $pass2) {\n                        //temporary conversion script\n                        $salt = SecurityManager::generateSalt();\n                        $password = SecurityManager::encrypt($pass, $salt);\n                        DatabaseManager::checkError(\"update `users` set `password` = '\".$password.\"', `password_salt` = '\".$salt.\"' where `ID` = \".$row[\"ID\"]);\n                    }\n\t\t\t\t\t$_SESSION[\"ID\"] = $row[\"ID\"];\n                    $this->userID = $row[\"ID\"];\n                    $_SESSION[\"libraryID\"] = $row[\"libraryID\"];\n                    $_SESSION[\"interTOME\"] = $row[\"interTOME\"];\n\t\t\t\t\t$_SESSION[\"username\"] = $row[\"username\"];\n\t\t\t\t\t$_SESSION[\"permissions\"] = $row[\"permissions\"];\n                    $_SESSION[\"semester\"] = $row[\"semester\"];\n\t\t\t\t\tif($remember == \"yes\") {\n\t\t\t\t\t\t//60*60*24*365 = 1 year\n\t\t\t\t\t\tsetcookie( \"username\", $row[\"username\"], time()+(60*60*24*365), \"/\", SITE_NAME);\n\t\t\t\t\t\tsetcookie( \"password\", $pass2, time()+(60*60*24*365), \"/\", SITE_NAME);\n\t\t\t\t\t}\n\t\t\t\t\treturn LoginManager::NONE;\n\t\t\t\t} else {\n\t\t\t\t\treturn LoginManager::INVALID;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn LoginManager::SUSPENDED;\n\t\t\t}\n\t\t\treturn LoginManager::UNKNOWN;\n\t\t}\n\n        function getUserID() {\n            return $this->userID;\n        }\n\n\t\t/**\n\t\t * Attempts to suspend the account associated with the given username.\n\t\t *\n\t\t * @param STRING $user Username for the account to suspend.\n\t\t * @return VOID\n\t\t */\n\t\tfunction suspend($user) {\n\t\t\t$sql = \"select * from `users` where `username` = '$user'\";\n\t\t\t$result = DatabaseManager::checkError($sql);\n\t\t\tif(DatabaseManager::getNumResults($result) === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$row = DatabaseManager::fetchAssoc($result);\n\t\t\t$sql = \"update `users` set `active` = '0' where `ID` = '\".$row['ID'].\"'\";\n\t\t\tDatabaseManager::checkError($sql);\n\t\t}\n\t}\n?>\n"], "fixing_code": ["<?php\n\t/*\n\t *\tCopyright 2007 John Oren\n\t *\n\t *\tLicensed under the Apache License, Version 2.0 (the \"License\");\n\t *\tyou may not use this file except in compliance with the License.\n\t *\tYou may obtain a copy of the License at\n\t *\t\thttp://www.apache.org/licenses/LICENSE-2.0\n\t *\tUnless required by applicable law or agreed to in writing, software\n\t *\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\t *\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t *\tSee the License for the specific language governing permissions and\n\t *\tlimitations under the License.\n\t */\n\n    require_once($path.\"OpenSiteAdmin/scripts/classes/Ajax.php\");\n\t//include all of the standard fields\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Checkbox.php\");\n    require_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Date.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/ForeignKey.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Group.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Hidden.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Image.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Label.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Password.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/RadioButtons.php\");\n    require_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Select.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/Text.php\");\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/Fields/TextArea.php\");\n\n\t/**\n\t * Handles form field display and pre-processing.\n\t *\n\t * Sets up a form field for display, handling field and error display.\n\t * Performs pre-processing on a form field, preparing it for use in a database.\n\t *\n\t * @author John Oren\n\t * @version 1.5 December 24, 2009\n\t */\n\tabstract class Field {\n\t\t/**\n\t\t * @static\n\t\t * @var Next form field name generator.\n\t\t */\n\t\tprotected static $nextFieldName = 0;\n\n        /** @var An optional object to display Ajax for the field. */\n        protected $ajax;\n        /** @var The name of the CSS ID for this field. */\n        protected $cssID;\n        /** @var The default value to use for this field if none is provided. */\n        protected $default;\n        /** @var Text of any error messages generated during field processing. */\n\t\tprotected $errorText;\n        /** @var The name of this fields form field. */\n        protected $fieldName;\n        /** @var The integer type of the form this field is part of. */\n        protected $formType;\n        /** @var True if this field should be used in a list. */\n        protected $inList;\n        /** @var True if no value was supplied for this field. */\n        protected $isEmpty;\n        /** @var True if this field is associated with a database key. */\n        private $keyField;\n        /** @var The name of the database field this form field corresponds to. */\n        protected $name;\n        /** @var The options and flags associated with this form field. */\n        protected $options;\n        /** @var True if this field must be filled in. */\n        protected $required;\n        /** @var If true, no error messages will be displayed. */\n        protected $silent;\n\t\t/** @var The title to display for this form field. */\n\t\tprotected $title;\n        /** @var The current value of this field. */\n        protected $value;\n\n\t\t/**\n\t\t * Constructs a form field with information on how to display it.\n\t\t *\n\t\t * @param STRING $name The name of the database field this form field corresponds to.\n\t\t * @param STRING $title The title to display for this form field.\n\t\t * @param MIXED $options The options associated with this form field.\n\t\t * @param BOOLEAN $inList True if this field should be used in a list view.\n\t\t * @param BOOLEAN $required True if this form field is required.\n\t\t */\n\t\tfunction __construct($name, $title, $options, $inList, $required=false) {\n\t\t\t$this->name = $name;\n\t\t\t$this->title = $title;\n\t\t\t$this->options = $options;\n\t\t\t$this->inList = $inList;\n\t\t\t$this->required = $required;\n            $this->fieldName = \"field\".Field::$nextFieldName++;\n            $this->isEmpty = false;\n            $this->silent = false;\n            $this->keyField = false;\n            $this->value = null;\n            $this->cssID =$this->fieldName;\n            $this->ajax = null;\n        }\n\n        /**\n         * Sets the Ajax object associated with this field.\n         *\n         * @param OBJECT Ajax object\n         * @return VOID\n         */\n        function addAjax(Ajax $ajax) {\n            $ajax->setFieldName($this->getFieldName());\n            $this->ajax = $ajax;\n        }\n\n        /**\n         * Hack to allow foreign keys to process correctly if they are called\n         * before their associated key gets processed.\n         *\n         * @return BOOLEAN False if unsuccessful\n         */\n\t\tfunction databasePrep() {}\n\n        /**\n\t\t * Prepares a form field for display.\n\t\t *\n\t\t * @return STRING HTML to display for the form field\n\t\t */\n\t\tabstract function display();\n\n        /**\n         * Returns the name of the CSS ID for this field.\n         *\n         * @return STRING\n         */\n        protected function getCSSID() {\n            return $this->cssID;\n        }\n\n        /**\n         * Returns any error text associated with this field.\n         *\n         * @return STRING Error messages.\n         */\n\t\tprotected function getErrorText() {\n\t\t\tif(empty($this->errorText) || $this->isSilent()) {\n\t\t\t\treturn \"\";\n\t\t\t}\n\t\t\treturn '<br><font color=\"red\">'.$this->errorText.'</font>';\n\t\t}\n\n        /**\n\t\t * Returns the name of this field for use in an html form.\n\t\t *\n\t\t * @return STRING form field name.\n\t\t */\n\t\tfunction getFieldName() {\n\t\t\treturn $this->fieldName;\n\t\t}\n\n        /**\n\t\t * Returns the contents of this field for display in a list.\n\t\t *\n\t\t * @param STRING The default value to use for this field in a list.\n\t\t * @return STRING The default value.\n\t\t */\n\t\tfunction getListView($default) {\n\t\t\treturn $default;\n\t\t}\n\n\t\t/**\n\t\t * Returns the name of the SQL field this form field is associated with.\n\t\t *\n\t\t * @return STRING The name of this form field's corresponding SQL field.\n\t\t */\n\t\tfunction getName() {\n\t\t\treturn $this->name;\n        }\n\n        /**\n\t\t * Returns the options and flags for this form field.\n\t\t *\n\t\t * @return MIXED Options for this form field.\n\t\t */\n\t\tprotected function getOptions() {\n\t\t\treturn $this->options;\n\t\t}\n\n        /**\n\t\t * Returns the display name (title) of this form field.\n         *\n         * @param BOOLEAN $isList Excludes the visual queue for required fields in list view\n\t\t * @return STRING The name to display with this form field.\n\t\t */\n\t\tfunction getTitle($isList=false) {\n\t\t\tif(!$this->isRequired() || $isList) {\n\t\t\t\treturn $this->title;\n\t\t\t} else {\n\t\t\t\treturn \"*\".$this->title;\n\t\t\t}\n        }\n\n        /**\n\t\t * Gets the current value of this form field.\n         *\n\t\t * @return MIXED Current field value.\n\t\t */\n\t\tfunction getValue() {\n            $ret = SecurityManager::formPrep($this->value);\n            if(empty($ret)) {\n\t\t\t\treturn $this->default;\n\t\t\t}\n\t\t\treturn $ret;\n        }\n\n        /**\n\t\t * Returns true if the type of the form this field is in is a delete form.\n\t\t *\n\t\t * @return BOOLEAN True if this field is in a delete form.\n\t\t */\n\t\tfunction isDelete() {\n\t\t\treturn $this->formType == Form::DELETE;\n\t\t}\n\n        /**\n         * Returns true if this field does not have a value.\n         *\n         * @return BOOLEAN False if a value was provided.\n         */\n        function isEmpty() {\n            return $this->isEmpty;\n        }\n\n        /**\n\t\t * Returns whether or not this form field should be used in a list context.\n\t\t *\n\t\t * @return BOOLEAN True if this field should be displayed in a list view.\n\t\t */\n\t\tfunction isInList() {\n\t\t\treturn $this->inList;\n        }\n\n        /**\n         * Returns whether or not this field is associated with a database key.\n         *\n         * @return BOOLEAN True if this field is associated with a database key.\n         */\n        function isKey() {\n            return $this->keyField;\n        }\n\n\t\t/**\n\t\t * Returns whether or not this form field must be filled in.\n\t\t *\n\t\t * @return BOOLEAN True if this field cannot be empty.\n\t\t */\n\t\tfunction isRequired() {\n\t\t\treturn $this->required;\n        }\n\n        /**\n         * Returns true if this field is currently suppressing error messages.\n         *\n         * @return BOOLEAN False if error messages are currently being displayed for this field.\n         */\n        function isSilent() {\n            return $this->silent;\n        }\n\n        /**\n         * Post-processes the field (sets the fields value internally and in the database).\n         *\n         * @param MIXED $value Value to store.\n         * @return BOOLEAN False if any error were encountered.\n         */\n        protected function postProcess($value) {\n            $value = SecurityManager::SQLPrep($value);\n            $this->setValue($value);\n            return true;\n        }\n\n        /**\n\t\t * Processes the field.\n\t\t *\n\t\t * @return BOOLEAN False if errors were encountered processing the field\n\t\t */\n\t\tfunction process() {\n\t\t\t$this->value = $_POST[$this->getFieldName()];\n            $this->setEmpty($this->value);\n\t\t\tif($this->isRequired() && $this->isEmpty()) {\n\t\t\t\t$this->errorText = \"Please enter a value\";\n\t\t\t\treturn false;\n\t\t\t}\n\n\t\t\treturn $this->postProcess($this->value);\n\t\t}\n\n        /**\n         * Sets the name of the CSS ID of this field.\n         *\n         * @param STRING The new CSS ID.\n         * @return VOID\n         */\n        function setCSSID($cssID) {\n            $this->cssID = $cssID;\n        }\n\n        /**\n         * Sets the default value for this field.\n         *\n         * @param MIXED $value Default value\n         * @return VOID\n         */\n\t\tfunction setDefaultValue($value) {\n\t\t\t$this->default = $value;\n        }\n\n        /**\n         * Internal function to evaluate if this field is empty and set the empty flag accordingly.\n         *\n         * @param MIXED $value Value (or values to check)\n         * @return VOID\n         */\n        protected function setEmpty($value) {\n            $this->isEmpty = empty($value);\n        }\n\n\t\t/**\n\t\t * Sets the form this field is in.\n\t\t *\n\t\t * @param INTEGER $formType A reference to the form this field is part of.\n\t\t * @return VOID\n\t\t */\n\t\tfunction setFormType($formType) {\n\t\t\t$this->formType = $formType;\n        }\n\n        /**\n         * Makes this field a database key.\n         *\n         * @return VOID\n         */\n        function setKey() {\n            $this->keyField = true;\n        }\n\n        /**\n         * Toggles error message suppression for this field.\n         *\n         * @param BOOLEAN $silent True if errors should be suppressed.\n         * @return VOID\n         */\n        function setSilent($silent) {\n            $this->silent = $silent;\n        }\n\n        /**\n\t\t * Sets the value of this field in the database.\n         *\n         * @param MIXED $value Value to set.\n         * @return VOID\n\t\t */\n\t\tfunction setValue($value) {\n            $this->value = $value;\n\t\t}\n\n        /**\n         * Copies this field and gives it a new unique fieldname.\n         *\n         * @return VOID\n         */\n\t\tfunction __clone() {\n\t\t\t$this->fieldName = \"field\".Field::$nextFieldName++;\n\t\t}\n\t}\n?>\n", "<?php\n\t/*\n\t *\tCopyright 2007 John Oren\n\t *\n\t *\tLicensed under the Apache License, Version 2.0 (the \"License\");\n\t *\tyou may not use this file except in compliance with the License.\n\t *\tYou may obtain a copy of the License at\n\t *\t\thttp://www.apache.org/licenses/LICENSE-2.0\n\t *\tUnless required by applicable law or agreed to in writing, software\n\t *\tdistributed under the License is distributed on an \"AS IS\" BASIS,\n\t *\tWITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n\t *\tSee the License for the specific language governing permissions and\n\t *\tlimitations under the License.\n\t */\n\n\n\trequire_once($path.\"OpenSiteAdmin/scripts/classes/SecurityManager.php\");\n\n\t/**\n\t * Handles processing and security for the site's login process.\n\t *\n\t * @author John Oren\n\t * @version 1.2 July 31, 2008\n\t */\n\tclass LoginManager {\n\t\t/**\n\t\t * @static\n\t\t * @final\n\t\t * @var The maximum number of login attempts that can be made before a user's account is suspended.\n\t\t */\n\t\tconst MAX_LOGIN_ATTEMPTS = 5;\n\n\n        /**\n\t\t * @static\n\t\t * @final\n\t\t * @var Error code constant - the provided username and\\or password was invalid.\n\t\t */\n\t\tconst INVALID = 1;\n\t\t/**\n\t\t * @static\n\t\t * @final\n\t\t * @var Error code constant - no errors where encountered.\n\t\t */\n        const NONE = 2;\n        /**\n\t\t * @static\n\t\t * @final\n\t\t * @var Error code constant - The specified account has been suspended.\n\t\t */\n\t\tconst SUSPENDED = 3;\n\t\t/**\n\t\t * @static\n\t\t * @final\n\t\t * @var Error code constant - an unknown error was encountered.\n\t\t */\n\t\tconst UNKNOWN = 4;\n\n        protected $userID;\n\n\t\t/**\n\t\t * Attempts to log a user into the site's administrative system.\n\t\t *\n\t\t * @param STRING $user Username to use to login.\n\t\t * @param STRING $pass Password to attempt to use with the given user.\n\t\t * @param STRING $remember If set to \"yes\", the user's login information will be saved in cookies if it validates sucessfully.\n\t\t * @param BOOLEAN $isCookie True if the provided data is coming from cookie data (cookie passwords are already encrypted).\n\t\t * @return INTEGER One of the error code constants defined in this class.\n\t\t */\n\t\tfunction login($user, $pass, $remember=\"no\", $isCookie=false) {\n            $user = htmlspecialchars(addslashes($user));\n            $pass = htmlspecialchars(addslashes($pass));\n\t\t\t$sql = \"select `users`.*, `libraries`.`interTOME` from `users` JOIN `libraries` ON `users`.`libraryID` = `libraries`.`ID` where `username` LIKE '$user'\";\n\t\t\t$result = DatabaseManager::checkError($sql);\n\t\t\tif(DatabaseManager::getNumResults($result) === 0) {\n\t\t\t\treturn LoginManager::INVALID;\n\t\t\t}\n\t\t\t$row = DatabaseManager::fetchAssoc($result);\n\t\t\tif($row[\"active\"] == \"1\") {\n\t\t\t\tif($isCookie) {\n\t\t\t\t\t$pass2 = SecurityManager::encrypt($row[\"password\"], $row[\"salt\"]);\n\t\t\t\t} else {\n\t\t\t\t\t$pass2 = $row[\"password\"];\n\t\t\t\t}\n\t\t\t\tif(SecurityManager::encrypt($pass, $row[\"password_salt\"]) == $pass2 || crypt($pass, $pass2) == $pass2) {\n                    if(crypt($pass, $pass2) == $pass2) {\n                        //temporary conversion script\n                        $salt = SecurityManager::generateSalt();\n                        $password = SecurityManager::encrypt($pass, $salt);\n                        DatabaseManager::checkError(\"update `users` set `password` = '\".$password.\"', `password_salt` = '\".$salt.\"' where `ID` = \".$row[\"ID\"]);\n                    }\n\t\t\t\t\t$_SESSION[\"ID\"] = $row[\"ID\"];\n                    $this->userID = $row[\"ID\"];\n                    $_SESSION[\"libraryID\"] = $row[\"libraryID\"];\n                    $_SESSION[\"interTOME\"] = $row[\"interTOME\"];\n\t\t\t\t\t$_SESSION[\"username\"] = $row[\"username\"];\n\t\t\t\t\t$_SESSION[\"permissions\"] = $row[\"permissions\"];\n                    $_SESSION[\"semester\"] = $row[\"semester\"];\n\t\t\t\t\tif($remember == \"yes\") {\n\t\t\t\t\t\t//60*60*24*365 = 1 year\n\t\t\t\t\t\tsetcookie( \"username\", $row[\"username\"], time()+(60*60*24*365), \"/\", SITE_NAME);\n\t\t\t\t\t\tsetcookie( \"password\", $pass2, time()+(60*60*24*365), \"/\", SITE_NAME);\n\t\t\t\t\t}\n\t\t\t\t\treturn LoginManager::NONE;\n\t\t\t\t} else {\n\t\t\t\t\treturn LoginManager::INVALID;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\treturn LoginManager::SUSPENDED;\n\t\t\t}\n\t\t\treturn LoginManager::UNKNOWN;\n\t\t}\n\n        function getUserID() {\n            return $this->userID;\n        }\n\n\t\t/**\n\t\t * Attempts to suspend the account associated with the given username.\n\t\t *\n\t\t * @param STRING $user Username for the account to suspend.\n\t\t * @return VOID\n\t\t */\n\t\tfunction suspend($user) {\n\t\t\t$sql = \"select * from `users` where `username` = '$user'\";\n\t\t\t$result = DatabaseManager::checkError($sql);\n\t\t\tif(DatabaseManager::getNumResults($result) === 0) {\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$row = DatabaseManager::fetchAssoc($result);\n\t\t\t$sql = \"update `users` set `active` = '0' where `ID` = '\".$row['ID'].\"'\";\n\t\t\tDatabaseManager::checkError($sql);\n\t\t}\n\t}\n?>\n"], "filenames": ["OpenSiteAdmin/scripts/classes/Field.php", "OpenSiteAdmin/scripts/classes/LoginManager.php"], "buggy_code_start_loc": [206, 70], "buggy_code_end_loc": [273, 70], "fixing_code_start_loc": [206, 71], "fixing_code_end_loc": [275, 73], "type": "CWE-89", "message": "A vulnerability was found in frioux ptome. It has been rated as critical. This issue affects some unknown processing. The manipulation leads to sql injection. The name of the patch is 26829bba67858ca0bd4ce49ad50e7ce653914276. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218519.", "other": {"cve": {"id": "CVE-2010-10009", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-18T21:15:10.160", "lastModified": "2023-01-25T20:53:21.057", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in frioux ptome. It has been rated as critical. This issue affects some unknown processing. The manipulation leads to sql injection. The name of the patch is 26829bba67858ca0bd4ce49ad50e7ce653914276. It is recommended to apply a patch to fix this issue. The associated identifier of this vulnerability is VDB-218519."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:A/AC:L/PR:L/UI:N/S:U/C:L/I:L/A:L", "attackVector": "ADJACENT_NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.1, "impactScore": 3.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:A/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "ADJACENT_NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.2}, "baseSeverity": "MEDIUM", "exploitabilityScore": 5.1, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:ptome_project:ptome:*:*:*:*:*:*:*:*", "versionEndExcluding": "2010-01-11", "matchCriteriaId": "284A8F6C-8C66-45DF-B1E7-D5ACB641DE14"}]}]}], "references": [{"url": "https://github.com/frioux/ptome/commit/26829bba67858ca0bd4ce49ad50e7ce653914276", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.218519", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.218519", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/frioux/ptome/commit/26829bba67858ca0bd4ce49ad50e7ce653914276"}}