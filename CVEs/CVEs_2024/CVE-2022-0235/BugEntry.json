{"buggy_code": ["# Changelog\nAll notable changes will be recorded here.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## Unreleased\n* fix(request): fix crash when an invalid redirection URL is encountered https://github.com/node-fetch/node-fetch/pull/1387\n* fix: handle errors from the request body stream by @mdmitry01 in https://github.com/node-fetch/node-fetch/pull/1392\n\n## 3.1.0\n\n## What's Changed\n* fix(Body): Discourage form-data and buffer() by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1212\n* fix: Pass url string to http.request by @serverwentdown in https://github.com/node-fetch/node-fetch/pull/1268\n* Fix octocat image link by @lakuapik in https://github.com/node-fetch/node-fetch/pull/1281\n* fix(Body.body): Normalize `Body.body` into a `node:stream` by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/924\n* docs(Headers): Add default Host request header to README.md file by @robertoaceves in https://github.com/node-fetch/node-fetch/pull/1316\n* Update CHANGELOG.md by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1292\n* Add highWaterMark to cloned properties by @davesidious in https://github.com/node-fetch/node-fetch/pull/1162\n* Update README.md to fix HTTPResponseError by @thedanfernandez in https://github.com/node-fetch/node-fetch/pull/1135\n* docs: switch `url` to `URL` by @dhritzkiv in https://github.com/node-fetch/node-fetch/pull/1318\n* fix(types): declare buffer() deprecated by @dnalborczyk in https://github.com/node-fetch/node-fetch/pull/1345\n* chore: fix lint by @dnalborczyk in https://github.com/node-fetch/node-fetch/pull/1348\n* refactor: use node: prefix for imports by @dnalborczyk in https://github.com/node-fetch/node-fetch/pull/1346\n* Bump data-uri-to-buffer from 3.0.1 to 4.0.0 by @dependabot in https://github.com/node-fetch/node-fetch/pull/1319\n* Bump mocha from 8.4.0 to 9.1.3 by @dependabot in https://github.com/node-fetch/node-fetch/pull/1339\n* Referrer and Referrer Policy by @tekwiz in https://github.com/node-fetch/node-fetch/pull/1057\n* Add typing for Response.redirect(url, status) by @c-w in https://github.com/node-fetch/node-fetch/pull/1169\n* chore: Correct stuff in README.md by @Jiralite in https://github.com/node-fetch/node-fetch/pull/1361\n* docs: Improve clarity of \"Loading and configuring\" by @serverwentdown in https://github.com/node-fetch/node-fetch/pull/1323\n* feat(Body): Added support for `BodyMixin.formData()` and constructing bodies with FormData by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1314\n\n## New Contributors\n* @serverwentdown made their first contribution in https://github.com/node-fetch/node-fetch/pull/1268\n* @lakuapik made their first contribution in https://github.com/node-fetch/node-fetch/pull/1281\n* @robertoaceves made their first contribution in https://github.com/node-fetch/node-fetch/pull/1316\n* @davesidious made their first contribution in https://github.com/node-fetch/node-fetch/pull/1162\n* @thedanfernandez made their first contribution in https://github.com/node-fetch/node-fetch/pull/1135\n* @dhritzkiv made their first contribution in https://github.com/node-fetch/node-fetch/pull/1318\n* @dnalborczyk made their first contribution in https://github.com/node-fetch/node-fetch/pull/1345\n* @dependabot made their first contribution in https://github.com/node-fetch/node-fetch/pull/1319\n* @c-w made their first contribution in https://github.com/node-fetch/node-fetch/pull/1169\n\n**Full Changelog**: https://github.com/node-fetch/node-fetch/compare/v3.0.0...v3.1.0\n\n## v3.0.0\n\n- other: Marking v3 as stable\n- docs: Add example for loading ESM from CommonJS (#1236)\n\n## v3.0.0-beta.10\n\n- **Breaking:** minimum supported Node.js version is now 12.20.\n- **Breaking:** node-fetch is now a pure ESM module.\n- Other: update readme to inform users about ESM.\n- Other: update dependencies.\n\n## v3.0.0-beta.9\n\n**This is an important security release. It is strongly recommended to update as soon as possible.**\n\n- Fix: honor the `size` option after following a redirect.\n\n## v3.0.0-beta.8\n\n- Enhance: remove string-to-arraybuffer (#882).\n- Enhance: remove parted dependency (#883).\n- Fix: export package.json (#908).\n- Fix: minimum Node.js version (#874).\n- Other: fix typo.\n\n## v3.0.0-beta.7\n\n- **Breaking:** minimum supported Node.js version is now 10.17.\n- Enhance: update `fetch-blob`.\n- Enhance: add insecureHTTPParser Parameter (#856).\n- Enhance: drop custom Promises and refactor to `async` functions (#845).\n- Enhance: polyfill `http.validateHeaderName` and `http.validateHeaderValue` (#843).\n- Enhance: should check body _source_ on redirect (#866).\n- Enhance: remove code duplication in custom errors (#842).\n- Enhance: implement form-data encoding (#603).\n- Fix: improve TypeScript types (#841).\n- Fix: data URI handling and drop all URL analysis RegExps (#853).\n- Fix: headers import statement (#859).\n- Fix: correct Node versions were not installed on test matrix (#846).\n- Other: test CommonJS build artifact (#838).\n- Other: create Code of Conduct (#849).\n- Other: readme update.\n\n## v3.0.0-beta.6-exportfix\n\n- Fix: `fetch` function export & declaration, which broke the previous release.\n\n## v3.0.0-beta.6\n\n- **Breaking:** minimum supported Node.js version is now 10.16.\n- **Breaking:** removed `timeout` option.\n- **Breaking:** revamp TypeScript declarations.\n- Enhance: improve coverage.\n- Enhance: drop Babel (while keeping ESM) (#805).\n- Enhance: normalize export (#827).\n- Enhance: remove guard for Stream.Readable.destroy (#824).\n- Enhance: remove custom isArrayBuffer (#822).\n- Enhance: use normal class inheritance instead of Body.mixIn (#828).\n- Enhance: follow xo linter rules more strictly (#829).\n- Enhance: revamp Headers module (#834).\n- Fix: export the `AbortError` class.\n- Fix: example using `file-type` (#804).\n- Fix: settle `consumeBody` promise when the response closes prematurely (#768).\n- Fix: disambiguate timeout behavior for response headers and body (#770).\n- Fix: make sure the default `highWaterMark` equals 16384.\n- Fix: default user agent (#818).\n- Other: readme update.\n- Other: update copyright information.\n\n## v3.0.0-beta.5\n\n> NOTE: Since the previous beta version included serious issues, such as [#749](https://github.com/node-fetch/node-fetch/issues/749), they will now be deprecated.\n\n- Enhance: use built-in AbortSignal for typings.\n- Enhance: compile CJS modules as a seperate set of files.\n- Enhance: add more complete stream download example.\n- Fix: question mark stripped from url when no params are given.\n- Fix: path to tests file in error handling doc.\n- Fix: import URL and URLSearchParams in typings.\n- Fix: Ensure search parameters are included in URL path (#759).\n\n## v3.0.0-beta.2\n\n- Fix: exporting `main` and `types` at the correct path, oops.\n\n## v3.0.0-beta.1\n\n- **Breaking:** minimum supported Node.js version is now 10.\n- Enhance: added new node-fetch-only option: `highWaterMark`.\n- Enhance: `AbortError` now uses a w3c defined message.\n- Enhance: data URI support.\n- Enhance: drop existing blob implementation code and use fetch-blob as dependency instead.\n- Enhance: modernise the code behind `FetchError` and `AbortError`.\n- Enhance: replace deprecated `url.parse()` and `url.replace()` with the new WHATWG's `new URL()`\n- Enhance: allow excluding a `user-agent` in a fetch request by setting it's header to null.\n- Fix: `Response.statusText` no longer sets a default message derived from the HTTP status code.\n- Fix: missing response stream error events.\n- Fix: do not use constructor.name to check object.\n- Fix: convert `Content-Encoding` to lowercase.\n- Fix: propagate size and timeout to cloned response.\n- Other: bundle TypeScript types.\n- Other: replace Rollup with @pika/pack.\n- Other: introduce linting to the project.\n- Other: simplify Travis CI build matrix.\n- Other: dev dependency update.\n- Other: readme update.\n\n\n# 2.x release\n\n## v2.6.1\n\n**This is an important security release. It is strongly recommended to update as soon as possible.**\n\n- Fix: honor the `size` option after following a redirect.\n\n## v2.6.0\n\n- Enhance: `options.agent`, it now accepts a function that returns custom http(s).Agent instance based on current URL, see readme for more information.\n- Fix: incorrect `Content-Length` was returned for stream body in 2.5.0 release; note that `node-fetch` doesn't calculate content length for stream body.\n- Fix: `Response.url` should return empty string instead of `null` by default.\n\n## v2.5.0\n\n- Enhance: `Response` object now includes `redirected` property.\n- Enhance: `fetch()` now accepts third-party `Blob` implementation as body.\n- Other: disable `package-lock.json` generation as we never commit them.\n- Other: dev dependency update.\n- Other: readme update.\n\n## v2.4.1\n\n- Fix: `Blob` import rule for node < 10, as `Readable` isn't a named export.\n\n## v2.4.0\n\n- Enhance: added `Brotli` compression support (using node's zlib).\n- Enhance: updated `Blob` implementation per spec.\n- Fix: set content type automatically for `URLSearchParams`.\n- Fix: `Headers` now reject empty header names.\n- Fix: test cases, as node 12+ no longer accepts invalid header response.\n\n## v2.3.0\n\n- Enhance: added `AbortSignal` support, with README example.\n- Enhance: handle invalid `Location` header during redirect by rejecting them explicitly with `FetchError`.\n- Fix: update `browser.js` to support react-native environment, where `self` isn't available globally.\n\n## v2.2.1\n\n- Fix: `compress` flag shouldn't overwrite existing `Accept-Encoding` header.\n- Fix: multiple `import` rules, where `PassThrough` etc. doesn't have a named export when using node <10 and `--experimental-modules` flag.\n- Other: Better README.\n\n## v2.2.0\n\n- Enhance: Support all `ArrayBuffer` view types\n- Enhance: Support Web Workers\n- Enhance: Support Node.js' `--experimental-modules` mode; deprecate `.es.js` file\n- Fix: Add `__esModule` property to the exports object\n- Other: Better example in README for writing response to a file\n- Other: More tests for Agent\n\n## v2.1.2\n\n- Fix: allow `Body` methods to work on `ArrayBuffer`-backed `Body` objects\n- Fix: reject promise returned by `Body` methods when the accumulated `Buffer` exceeds the maximum size\n- Fix: support custom `Host` headers with any casing\n- Fix: support importing `fetch()` from TypeScript in `browser.js`\n- Fix: handle the redirect response body properly\n\n## v2.1.1\n\nFix packaging errors in v2.1.0.\n\n## v2.1.0\n\n- Enhance: allow using ArrayBuffer as the `body` of a `fetch()` or `Request`\n- Fix: store HTTP headers of a `Headers` object internally with the given case, for compatibility with older servers that incorrectly treated header names in a case-sensitive manner\n- Fix: silently ignore invalid HTTP headers\n- Fix: handle HTTP redirect responses without a `Location` header just like non-redirect responses\n- Fix: include bodies when following a redirection when appropriate\n\n## v2.0.0\n\nThis is a major release. Check [our upgrade guide](https://github.com/node-fetch/node-fetch/blob/master/docs/v2-UPGRADE-GUIDE.md) for an overview on some key differences between v1 and v2.\n\n### General changes\n\n- Major: Node.js 0.10.x and 0.12.x support is dropped\n- Major: `require('node-fetch/lib/response')` etc. is now unsupported; use `require('node-fetch').Response` or ES6 module imports\n- Enhance: start testing on Node.js v4.x, v6.x, v8.x LTS, as well as v9.x stable\n- Enhance: use Rollup to produce a distributed bundle (less memory overhead and faster startup)\n- Enhance: make `Object.prototype.toString()` on Headers, Requests, and Responses return correct class strings\n- Other: rewrite in ES2015 using Babel\n- Other: use Codecov for code coverage tracking\n- Other: update package.json script for npm 5\n- Other: `encoding` module is now optional (alpha.7)\n- Other: expose browser.js through package.json, avoid bundling mishaps (alpha.9)\n- Other: allow TypeScript to `import` node-fetch by exposing default (alpha.9)\n\n### HTTP requests\n\n- Major: overwrite user's `Content-Length` if we can be sure our information is correct (per spec)\n- Fix: errors in a response are caught before the body is accessed\n- Fix: support WHATWG URL objects, created by `whatwg-url` package or `require('url').URL` in Node.js 7+\n\n### Response and Request classes\n\n- Major: `response.text()` no longer attempts to detect encoding, instead always opting for UTF-8 (per spec); use `response.textConverted()` for the v1 behavior\n- Major: make `response.json()` throw error instead of returning an empty object on 204 no-content response (per spec; reverts behavior changed in v1.6.2)\n- Major: internal methods are no longer exposed\n- Major: throw error when a `GET` or `HEAD` Request is constructed with a non-null body (per spec)\n- Enhance: add `response.arrayBuffer()` (also applies to Requests)\n- Enhance: add experimental `response.blob()` (also applies to Requests)\n- Enhance: `URLSearchParams` is now accepted as a body\n- Enhance: wrap `response.json()` json parsing error as `FetchError`\n- Fix: fix Request and Response with `null` body\n\n### Headers class\n\n- Major: remove `headers.getAll()`; make `get()` return all headers delimited by commas (per spec)\n- Enhance: make Headers iterable\n- Enhance: make Headers constructor accept an array of tuples\n- Enhance: make sure header names and values are valid in HTTP\n- Fix: coerce Headers prototype function parameters to strings, where applicable\n\n### Documentation\n\n- Enhance: more comprehensive API docs\n- Enhance: add a list of default headers in README\n\n\n# 1.x release\n\n## Backport releases (v1.7.0 and beyond)\n\nSee [changelog on 1.x branch](https://github.com/node-fetch/node-fetch/blob/1.x/CHANGELOG.md) for details.\n\n## v1.6.3\n\n- Enhance: error handling document to explain `FetchError` design\n- Fix: support `form-data` 2.x releases (requires `form-data` >= 2.1.0)\n\n## v1.6.2\n\n- Enhance: minor document update\n- Fix: response.json() returns empty object on 204 no-content response instead of throwing a syntax error\n\n## v1.6.1\n\n- Fix: if `res.body` is a non-stream non-formdata object, we will call `body.toString` and send it as a string\n- Fix: `counter` value is incorrectly set to `follow` value when wrapping Request instance\n- Fix: documentation update\n\n## v1.6.0\n\n- Enhance: added `res.buffer()` api for convenience, it returns body as a Node.js buffer\n- Enhance: better old server support by handling raw deflate response\n- Enhance: skip encoding detection for non-HTML/XML response\n- Enhance: minor document update\n- Fix: HEAD request doesn't need decompression, as body is empty\n- Fix: `req.body` now accepts a Node.js buffer\n\n## v1.5.3\n\n- Fix: handle 204 and 304 responses when body is empty but content-encoding is gzip/deflate\n- Fix: allow resolving response and cloned response in any order\n- Fix: avoid setting `content-length` when `form-data` body use streams\n- Fix: send DELETE request with content-length when body is present\n- Fix: allow any url when calling new Request, but still reject non-http(s) url in fetch\n\n## v1.5.2\n\n- Fix: allow node.js core to handle keep-alive connection pool when passing a custom agent\n\n## v1.5.1\n\n- Fix: redirect mode `manual` should work even when there is no redirection or broken redirection\n\n## v1.5.0\n\n- Enhance: rejected promise now use custom `Error` (thx to @pekeler)\n- Enhance: `FetchError` contains `err.type` and `err.code`, allows for better error handling (thx to @pekeler)\n- Enhance: basic support for redirect mode `manual` and `error`, allows for location header extraction (thx to @jimmywarting for the initial PR)\n\n## v1.4.1\n\n- Fix: wrapping Request instance with FormData body again should preserve the body as-is\n\n## v1.4.0\n\n- Enhance: Request and Response now have `clone` method (thx to @kirill-konshin for the initial PR)\n- Enhance: Request and Response now have proper string and buffer body support (thx to @kirill-konshin)\n- Enhance: Body constructor has been refactored out (thx to @kirill-konshin)\n- Enhance: Headers now has `forEach` method (thx to @tricoder42)\n- Enhance: back to 100% code coverage\n- Fix: better form-data support (thx to @item4)\n- Fix: better character encoding detection under chunked encoding (thx to @dsuket for the initial PR)\n\n## v1.3.3\n\n- Fix: make sure `Content-Length` header is set when body is string for POST/PUT/PATCH requests\n- Fix: handle body stream error, for cases such as incorrect `Content-Encoding` header\n- Fix: when following certain redirects, use `GET` on subsequent request per Fetch Spec\n- Fix: `Request` and `Response` constructors now parse headers input using `Headers`\n\n## v1.3.2\n\n- Enhance: allow auto detect of form-data input (no `FormData` spec on node.js, this is form-data specific feature)\n\n## v1.3.1\n\n- Enhance: allow custom host header to be set (server-side only feature, as it's a forbidden header on client-side)\n\n## v1.3.0\n\n- Enhance: now `fetch.Request` is exposed as well\n\n## v1.2.1\n\n- Enhance: `Headers` now normalized `Number` value to `String`, prevent common mistakes\n\n## v1.2.0\n\n- Enhance: now fetch.Headers and fetch.Response are exposed, making testing easier\n\n## v1.1.2\n\n- Fix: `Headers` should only support `String` and `Array` properties, and ignore others\n\n## v1.1.1\n\n- Enhance: now req.headers accept both plain object and `Headers` instance\n\n## v1.1.0\n\n- Enhance: timeout now also applies to response body (in case of slow response)\n- Fix: timeout is now cleared properly when fetch is done/has failed\n\n## v1.0.6\n\n- Fix: less greedy content-type charset matching\n\n## v1.0.5\n\n- Fix: when `follow = 0`, fetch should not follow redirect\n- Enhance: update tests for better coverage\n- Enhance: code formatting\n- Enhance: clean up doc\n\n## v1.0.4\n\n- Enhance: test iojs support\n- Enhance: timeout attached to socket event only fire once per redirect\n\n## v1.0.3\n\n- Fix: response size limit should reject large chunk\n- Enhance: added character encoding detection for xml, such as rss/atom feed (encoding in DTD)\n\n## v1.0.2\n\n- Fix: added res.ok per spec change\n\n## v1.0.0\n\n- Enhance: better test coverage and doc\n\n\n# 0.x release\n\n## v0.1\n\n- Major: initial public release\n\n[Unreleased]: https://github.com/node-fetch/node-fetch/compare/v3.0.0-beta.10...HEAD\n", "{\n  \"name\": \"node-fetch\",\n  \"version\": \"3.1.0\",\n  \"description\": \"A light-weight module that brings Fetch API to node.js\",\n  \"main\": \"./src/index.js\",\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"files\": [\n    \"src\",\n    \"@types/index.d.ts\"\n  ],\n  \"types\": \"./@types/index.d.ts\",\n  \"engines\": {\n    \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"coverage\": \"c8 report --reporter=text-lcov | coveralls\",\n    \"test-types\": \"tsd\",\n    \"lint\": \"xo\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/node-fetch/node-fetch.git\"\n  },\n  \"keywords\": [\n    \"fetch\",\n    \"http\",\n    \"promise\",\n    \"request\",\n    \"curl\",\n    \"wget\",\n    \"xhr\",\n    \"whatwg\"\n  ],\n  \"author\": \"David Frank\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/node-fetch/node-fetch/issues\"\n  },\n  \"homepage\": \"https://github.com/node-fetch/node-fetch\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/node-fetch\"\n  },\n  \"devDependencies\": {\n    \"abort-controller\": \"^3.0.0\",\n    \"abortcontroller-polyfill\": \"^1.7.1\",\n    \"busboy\": \"^0.3.1\",\n    \"c8\": \"^7.7.2\",\n    \"chai\": \"^4.3.4\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"chai-iterator\": \"^3.0.2\",\n    \"chai-string\": \"^1.5.0\",\n    \"coveralls\": \"^3.1.0\",\n    \"delay\": \"^5.0.0\",\n    \"form-data\": \"^4.0.0\",\n    \"formdata-node\": \"^4.2.4\",\n    \"mocha\": \"^9.1.3\",\n    \"p-timeout\": \"^5.0.0\",\n    \"stream-consumers\": \"^1.0.1\",\n    \"tsd\": \"^0.14.0\",\n    \"xo\": \"^0.39.1\"\n  },\n  \"dependencies\": {\n    \"data-uri-to-buffer\": \"^4.0.0\",\n    \"fetch-blob\": \"^3.1.3\",\n    \"formdata-polyfill\": \"^4.0.10\"\n  },\n  \"tsd\": {\n    \"cwd\": \"@types\",\n    \"compilerOptions\": {\n      \"esModuleInterop\": true\n    }\n  },\n  \"xo\": {\n    \"envs\": [\n      \"node\",\n      \"browser\"\n    ],\n    \"ignores\": [\n      \"example.js\"\n    ],\n    \"rules\": {\n      \"complexity\": 0,\n      \"import/extensions\": 0,\n      \"import/no-useless-path-segments\": 0,\n      \"import/no-anonymous-default-export\": 0,\n      \"import/no-named-as-default\": 0,\n      \"unicorn/import-index\": 0,\n      \"unicorn/no-array-reduce\": 0,\n      \"unicorn/prefer-node-protocol\": 0,\n      \"unicorn/numeric-separators-style\": 0,\n      \"unicorn/explicit-length-check\": 0,\n      \"capitalized-comments\": 0,\n      \"node/no-unsupported-features/es-syntax\": 0,\n      \"@typescript-eslint/member-ordering\": 0\n    },\n    \"overrides\": [\n      {\n        \"files\": \"test/**/*.js\",\n        \"envs\": [\n          \"node\",\n          \"mocha\"\n        ],\n        \"rules\": {\n          \"max-nested-callbacks\": 0,\n          \"no-unused-expressions\": 0,\n          \"no-warning-comments\": 0,\n          \"new-cap\": 0,\n          \"guard-for-in\": 0,\n          \"unicorn/no-array-for-each\": 0,\n          \"unicorn/prevent-abbreviations\": 0,\n          \"promise/prefer-await-to-then\": 0,\n          \"ava/no-import-test-files\": 0\n        }\n      }\n    ]\n  },\n  \"runkitExampleFilename\": \"example.js\"\n}\n"], "fixing_code": ["# Changelog\nAll notable changes will be recorded here.\n\nThe format is based on [Keep a Changelog](https://keepachangelog.com/en/1.0.0/),\nand this project adheres to [Semantic Versioning](https://semver.org/spec/v2.0.0.html).\n\n## What's Changed\n* core: update fetch-blob by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1371\n* docs: Fix typo around sending a file by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1381\n* core: (http.request): Cast URL to string before sending it to NodeJS core by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1378\n* core: handle errors from the request body stream by @mdmitry01 in https://github.com/node-fetch/node-fetch/pull/1392\n* core: Better handle wrong redirect header in a response by @tasinet in https://github.com/node-fetch/node-fetch/pull/1387\n* core: Don't use buffer to make a blob by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1402\n* docs: update readme for TS @types/node-fetch by @adamellsworth in https://github.com/node-fetch/node-fetch/pull/1405\n* core: Fix logical operator priority to disallow GET/HEAD with non-empty body by @maxshirshin in https://github.com/node-fetch/node-fetch/pull/1369\n* core: Don't use global buffer by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1422\n* ci: fix main branch by @dnalborczyk in https://github.com/node-fetch/node-fetch/pull/1429\n* core: use more node: protocol imports by @dnalborczyk in https://github.com/node-fetch/node-fetch/pull/1428\n* core: Warn when using data by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1421\n* docs: Create SECURITY.md by @JamieSlome in https://github.com/node-fetch/node-fetch/pull/1445\n* core: don't forward secure headers to 3th party by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1449\n\n## New Contributors\n* @mdmitry01 made their first contribution in https://github.com/node-fetch/node-fetch/pull/1392\n* @tasinet made their first contribution in https://github.com/node-fetch/node-fetch/pull/1387\n* @adamellsworth made their first contribution in https://github.com/node-fetch/node-fetch/pull/1405\n* @maxshirshin made their first contribution in https://github.com/node-fetch/node-fetch/pull/1369\n* @JamieSlome made their first contribution in https://github.com/node-fetch/node-fetch/pull/1445\n\n**Full Changelog**: https://github.com/node-fetch/node-fetch/compare/v3.1.0...v3.1.2\n\n## 3.1.0\n\n## What's Changed\n* fix(Body): Discourage form-data and buffer() by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1212\n* fix: Pass url string to http.request by @serverwentdown in https://github.com/node-fetch/node-fetch/pull/1268\n* Fix octocat image link by @lakuapik in https://github.com/node-fetch/node-fetch/pull/1281\n* fix(Body.body): Normalize `Body.body` into a `node:stream` by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/924\n* docs(Headers): Add default Host request header to README.md file by @robertoaceves in https://github.com/node-fetch/node-fetch/pull/1316\n* Update CHANGELOG.md by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1292\n* Add highWaterMark to cloned properties by @davesidious in https://github.com/node-fetch/node-fetch/pull/1162\n* Update README.md to fix HTTPResponseError by @thedanfernandez in https://github.com/node-fetch/node-fetch/pull/1135\n* docs: switch `url` to `URL` by @dhritzkiv in https://github.com/node-fetch/node-fetch/pull/1318\n* fix(types): declare buffer() deprecated by @dnalborczyk in https://github.com/node-fetch/node-fetch/pull/1345\n* chore: fix lint by @dnalborczyk in https://github.com/node-fetch/node-fetch/pull/1348\n* refactor: use node: prefix for imports by @dnalborczyk in https://github.com/node-fetch/node-fetch/pull/1346\n* Bump data-uri-to-buffer from 3.0.1 to 4.0.0 by @dependabot in https://github.com/node-fetch/node-fetch/pull/1319\n* Bump mocha from 8.4.0 to 9.1.3 by @dependabot in https://github.com/node-fetch/node-fetch/pull/1339\n* Referrer and Referrer Policy by @tekwiz in https://github.com/node-fetch/node-fetch/pull/1057\n* Add typing for Response.redirect(url, status) by @c-w in https://github.com/node-fetch/node-fetch/pull/1169\n* chore: Correct stuff in README.md by @Jiralite in https://github.com/node-fetch/node-fetch/pull/1361\n* docs: Improve clarity of \"Loading and configuring\" by @serverwentdown in https://github.com/node-fetch/node-fetch/pull/1323\n* feat(Body): Added support for `BodyMixin.formData()` and constructing bodies with FormData by @jimmywarting in https://github.com/node-fetch/node-fetch/pull/1314\n\n## New Contributors\n* @serverwentdown made their first contribution in https://github.com/node-fetch/node-fetch/pull/1268\n* @lakuapik made their first contribution in https://github.com/node-fetch/node-fetch/pull/1281\n* @robertoaceves made their first contribution in https://github.com/node-fetch/node-fetch/pull/1316\n* @davesidious made their first contribution in https://github.com/node-fetch/node-fetch/pull/1162\n* @thedanfernandez made their first contribution in https://github.com/node-fetch/node-fetch/pull/1135\n* @dhritzkiv made their first contribution in https://github.com/node-fetch/node-fetch/pull/1318\n* @dnalborczyk made their first contribution in https://github.com/node-fetch/node-fetch/pull/1345\n* @dependabot made their first contribution in https://github.com/node-fetch/node-fetch/pull/1319\n* @c-w made their first contribution in https://github.com/node-fetch/node-fetch/pull/1169\n\n**Full Changelog**: https://github.com/node-fetch/node-fetch/compare/v3.0.0...v3.1.0\n\n## v3.0.0\n\n- other: Marking v3 as stable\n- docs: Add example for loading ESM from CommonJS (#1236)\n\n## v3.0.0-beta.10\n\n- **Breaking:** minimum supported Node.js version is now 12.20.\n- **Breaking:** node-fetch is now a pure ESM module.\n- Other: update readme to inform users about ESM.\n- Other: update dependencies.\n\n## v3.0.0-beta.9\n\n**This is an important security release. It is strongly recommended to update as soon as possible.**\n\n- Fix: honor the `size` option after following a redirect.\n\n## v3.0.0-beta.8\n\n- Enhance: remove string-to-arraybuffer (#882).\n- Enhance: remove parted dependency (#883).\n- Fix: export package.json (#908).\n- Fix: minimum Node.js version (#874).\n- Other: fix typo.\n\n## v3.0.0-beta.7\n\n- **Breaking:** minimum supported Node.js version is now 10.17.\n- Enhance: update `fetch-blob`.\n- Enhance: add insecureHTTPParser Parameter (#856).\n- Enhance: drop custom Promises and refactor to `async` functions (#845).\n- Enhance: polyfill `http.validateHeaderName` and `http.validateHeaderValue` (#843).\n- Enhance: should check body _source_ on redirect (#866).\n- Enhance: remove code duplication in custom errors (#842).\n- Enhance: implement form-data encoding (#603).\n- Fix: improve TypeScript types (#841).\n- Fix: data URI handling and drop all URL analysis RegExps (#853).\n- Fix: headers import statement (#859).\n- Fix: correct Node versions were not installed on test matrix (#846).\n- Other: test CommonJS build artifact (#838).\n- Other: create Code of Conduct (#849).\n- Other: readme update.\n\n## v3.0.0-beta.6-exportfix\n\n- Fix: `fetch` function export & declaration, which broke the previous release.\n\n## v3.0.0-beta.6\n\n- **Breaking:** minimum supported Node.js version is now 10.16.\n- **Breaking:** removed `timeout` option.\n- **Breaking:** revamp TypeScript declarations.\n- Enhance: improve coverage.\n- Enhance: drop Babel (while keeping ESM) (#805).\n- Enhance: normalize export (#827).\n- Enhance: remove guard for Stream.Readable.destroy (#824).\n- Enhance: remove custom isArrayBuffer (#822).\n- Enhance: use normal class inheritance instead of Body.mixIn (#828).\n- Enhance: follow xo linter rules more strictly (#829).\n- Enhance: revamp Headers module (#834).\n- Fix: export the `AbortError` class.\n- Fix: example using `file-type` (#804).\n- Fix: settle `consumeBody` promise when the response closes prematurely (#768).\n- Fix: disambiguate timeout behavior for response headers and body (#770).\n- Fix: make sure the default `highWaterMark` equals 16384.\n- Fix: default user agent (#818).\n- Other: readme update.\n- Other: update copyright information.\n\n## v3.0.0-beta.5\n\n> NOTE: Since the previous beta version included serious issues, such as [#749](https://github.com/node-fetch/node-fetch/issues/749), they will now be deprecated.\n\n- Enhance: use built-in AbortSignal for typings.\n- Enhance: compile CJS modules as a seperate set of files.\n- Enhance: add more complete stream download example.\n- Fix: question mark stripped from url when no params are given.\n- Fix: path to tests file in error handling doc.\n- Fix: import URL and URLSearchParams in typings.\n- Fix: Ensure search parameters are included in URL path (#759).\n\n## v3.0.0-beta.2\n\n- Fix: exporting `main` and `types` at the correct path, oops.\n\n## v3.0.0-beta.1\n\n- **Breaking:** minimum supported Node.js version is now 10.\n- Enhance: added new node-fetch-only option: `highWaterMark`.\n- Enhance: `AbortError` now uses a w3c defined message.\n- Enhance: data URI support.\n- Enhance: drop existing blob implementation code and use fetch-blob as dependency instead.\n- Enhance: modernise the code behind `FetchError` and `AbortError`.\n- Enhance: replace deprecated `url.parse()` and `url.replace()` with the new WHATWG's `new URL()`\n- Enhance: allow excluding a `user-agent` in a fetch request by setting it's header to null.\n- Fix: `Response.statusText` no longer sets a default message derived from the HTTP status code.\n- Fix: missing response stream error events.\n- Fix: do not use constructor.name to check object.\n- Fix: convert `Content-Encoding` to lowercase.\n- Fix: propagate size and timeout to cloned response.\n- Other: bundle TypeScript types.\n- Other: replace Rollup with @pika/pack.\n- Other: introduce linting to the project.\n- Other: simplify Travis CI build matrix.\n- Other: dev dependency update.\n- Other: readme update.\n\n\n# 2.x release\n\n## v2.6.1\n\n**This is an important security release. It is strongly recommended to update as soon as possible.**\n\n- Fix: honor the `size` option after following a redirect.\n\n## v2.6.0\n\n- Enhance: `options.agent`, it now accepts a function that returns custom http(s).Agent instance based on current URL, see readme for more information.\n- Fix: incorrect `Content-Length` was returned for stream body in 2.5.0 release; note that `node-fetch` doesn't calculate content length for stream body.\n- Fix: `Response.url` should return empty string instead of `null` by default.\n\n## v2.5.0\n\n- Enhance: `Response` object now includes `redirected` property.\n- Enhance: `fetch()` now accepts third-party `Blob` implementation as body.\n- Other: disable `package-lock.json` generation as we never commit them.\n- Other: dev dependency update.\n- Other: readme update.\n\n## v2.4.1\n\n- Fix: `Blob` import rule for node < 10, as `Readable` isn't a named export.\n\n## v2.4.0\n\n- Enhance: added `Brotli` compression support (using node's zlib).\n- Enhance: updated `Blob` implementation per spec.\n- Fix: set content type automatically for `URLSearchParams`.\n- Fix: `Headers` now reject empty header names.\n- Fix: test cases, as node 12+ no longer accepts invalid header response.\n\n## v2.3.0\n\n- Enhance: added `AbortSignal` support, with README example.\n- Enhance: handle invalid `Location` header during redirect by rejecting them explicitly with `FetchError`.\n- Fix: update `browser.js` to support react-native environment, where `self` isn't available globally.\n\n## v2.2.1\n\n- Fix: `compress` flag shouldn't overwrite existing `Accept-Encoding` header.\n- Fix: multiple `import` rules, where `PassThrough` etc. doesn't have a named export when using node <10 and `--experimental-modules` flag.\n- Other: Better README.\n\n## v2.2.0\n\n- Enhance: Support all `ArrayBuffer` view types\n- Enhance: Support Web Workers\n- Enhance: Support Node.js' `--experimental-modules` mode; deprecate `.es.js` file\n- Fix: Add `__esModule` property to the exports object\n- Other: Better example in README for writing response to a file\n- Other: More tests for Agent\n\n## v2.1.2\n\n- Fix: allow `Body` methods to work on `ArrayBuffer`-backed `Body` objects\n- Fix: reject promise returned by `Body` methods when the accumulated `Buffer` exceeds the maximum size\n- Fix: support custom `Host` headers with any casing\n- Fix: support importing `fetch()` from TypeScript in `browser.js`\n- Fix: handle the redirect response body properly\n\n## v2.1.1\n\nFix packaging errors in v2.1.0.\n\n## v2.1.0\n\n- Enhance: allow using ArrayBuffer as the `body` of a `fetch()` or `Request`\n- Fix: store HTTP headers of a `Headers` object internally with the given case, for compatibility with older servers that incorrectly treated header names in a case-sensitive manner\n- Fix: silently ignore invalid HTTP headers\n- Fix: handle HTTP redirect responses without a `Location` header just like non-redirect responses\n- Fix: include bodies when following a redirection when appropriate\n\n## v2.0.0\n\nThis is a major release. Check [our upgrade guide](https://github.com/node-fetch/node-fetch/blob/master/docs/v2-UPGRADE-GUIDE.md) for an overview on some key differences between v1 and v2.\n\n### General changes\n\n- Major: Node.js 0.10.x and 0.12.x support is dropped\n- Major: `require('node-fetch/lib/response')` etc. is now unsupported; use `require('node-fetch').Response` or ES6 module imports\n- Enhance: start testing on Node.js v4.x, v6.x, v8.x LTS, as well as v9.x stable\n- Enhance: use Rollup to produce a distributed bundle (less memory overhead and faster startup)\n- Enhance: make `Object.prototype.toString()` on Headers, Requests, and Responses return correct class strings\n- Other: rewrite in ES2015 using Babel\n- Other: use Codecov for code coverage tracking\n- Other: update package.json script for npm 5\n- Other: `encoding` module is now optional (alpha.7)\n- Other: expose browser.js through package.json, avoid bundling mishaps (alpha.9)\n- Other: allow TypeScript to `import` node-fetch by exposing default (alpha.9)\n\n### HTTP requests\n\n- Major: overwrite user's `Content-Length` if we can be sure our information is correct (per spec)\n- Fix: errors in a response are caught before the body is accessed\n- Fix: support WHATWG URL objects, created by `whatwg-url` package or `require('url').URL` in Node.js 7+\n\n### Response and Request classes\n\n- Major: `response.text()` no longer attempts to detect encoding, instead always opting for UTF-8 (per spec); use `response.textConverted()` for the v1 behavior\n- Major: make `response.json()` throw error instead of returning an empty object on 204 no-content response (per spec; reverts behavior changed in v1.6.2)\n- Major: internal methods are no longer exposed\n- Major: throw error when a `GET` or `HEAD` Request is constructed with a non-null body (per spec)\n- Enhance: add `response.arrayBuffer()` (also applies to Requests)\n- Enhance: add experimental `response.blob()` (also applies to Requests)\n- Enhance: `URLSearchParams` is now accepted as a body\n- Enhance: wrap `response.json()` json parsing error as `FetchError`\n- Fix: fix Request and Response with `null` body\n\n### Headers class\n\n- Major: remove `headers.getAll()`; make `get()` return all headers delimited by commas (per spec)\n- Enhance: make Headers iterable\n- Enhance: make Headers constructor accept an array of tuples\n- Enhance: make sure header names and values are valid in HTTP\n- Fix: coerce Headers prototype function parameters to strings, where applicable\n\n### Documentation\n\n- Enhance: more comprehensive API docs\n- Enhance: add a list of default headers in README\n\n\n# 1.x release\n\n## Backport releases (v1.7.0 and beyond)\n\nSee [changelog on 1.x branch](https://github.com/node-fetch/node-fetch/blob/1.x/CHANGELOG.md) for details.\n\n## v1.6.3\n\n- Enhance: error handling document to explain `FetchError` design\n- Fix: support `form-data` 2.x releases (requires `form-data` >= 2.1.0)\n\n## v1.6.2\n\n- Enhance: minor document update\n- Fix: response.json() returns empty object on 204 no-content response instead of throwing a syntax error\n\n## v1.6.1\n\n- Fix: if `res.body` is a non-stream non-formdata object, we will call `body.toString` and send it as a string\n- Fix: `counter` value is incorrectly set to `follow` value when wrapping Request instance\n- Fix: documentation update\n\n## v1.6.0\n\n- Enhance: added `res.buffer()` api for convenience, it returns body as a Node.js buffer\n- Enhance: better old server support by handling raw deflate response\n- Enhance: skip encoding detection for non-HTML/XML response\n- Enhance: minor document update\n- Fix: HEAD request doesn't need decompression, as body is empty\n- Fix: `req.body` now accepts a Node.js buffer\n\n## v1.5.3\n\n- Fix: handle 204 and 304 responses when body is empty but content-encoding is gzip/deflate\n- Fix: allow resolving response and cloned response in any order\n- Fix: avoid setting `content-length` when `form-data` body use streams\n- Fix: send DELETE request with content-length when body is present\n- Fix: allow any url when calling new Request, but still reject non-http(s) url in fetch\n\n## v1.5.2\n\n- Fix: allow node.js core to handle keep-alive connection pool when passing a custom agent\n\n## v1.5.1\n\n- Fix: redirect mode `manual` should work even when there is no redirection or broken redirection\n\n## v1.5.0\n\n- Enhance: rejected promise now use custom `Error` (thx to @pekeler)\n- Enhance: `FetchError` contains `err.type` and `err.code`, allows for better error handling (thx to @pekeler)\n- Enhance: basic support for redirect mode `manual` and `error`, allows for location header extraction (thx to @jimmywarting for the initial PR)\n\n## v1.4.1\n\n- Fix: wrapping Request instance with FormData body again should preserve the body as-is\n\n## v1.4.0\n\n- Enhance: Request and Response now have `clone` method (thx to @kirill-konshin for the initial PR)\n- Enhance: Request and Response now have proper string and buffer body support (thx to @kirill-konshin)\n- Enhance: Body constructor has been refactored out (thx to @kirill-konshin)\n- Enhance: Headers now has `forEach` method (thx to @tricoder42)\n- Enhance: back to 100% code coverage\n- Fix: better form-data support (thx to @item4)\n- Fix: better character encoding detection under chunked encoding (thx to @dsuket for the initial PR)\n\n## v1.3.3\n\n- Fix: make sure `Content-Length` header is set when body is string for POST/PUT/PATCH requests\n- Fix: handle body stream error, for cases such as incorrect `Content-Encoding` header\n- Fix: when following certain redirects, use `GET` on subsequent request per Fetch Spec\n- Fix: `Request` and `Response` constructors now parse headers input using `Headers`\n\n## v1.3.2\n\n- Enhance: allow auto detect of form-data input (no `FormData` spec on node.js, this is form-data specific feature)\n\n## v1.3.1\n\n- Enhance: allow custom host header to be set (server-side only feature, as it's a forbidden header on client-side)\n\n## v1.3.0\n\n- Enhance: now `fetch.Request` is exposed as well\n\n## v1.2.1\n\n- Enhance: `Headers` now normalized `Number` value to `String`, prevent common mistakes\n\n## v1.2.0\n\n- Enhance: now fetch.Headers and fetch.Response are exposed, making testing easier\n\n## v1.1.2\n\n- Fix: `Headers` should only support `String` and `Array` properties, and ignore others\n\n## v1.1.1\n\n- Enhance: now req.headers accept both plain object and `Headers` instance\n\n## v1.1.0\n\n- Enhance: timeout now also applies to response body (in case of slow response)\n- Fix: timeout is now cleared properly when fetch is done/has failed\n\n## v1.0.6\n\n- Fix: less greedy content-type charset matching\n\n## v1.0.5\n\n- Fix: when `follow = 0`, fetch should not follow redirect\n- Enhance: update tests for better coverage\n- Enhance: code formatting\n- Enhance: clean up doc\n\n## v1.0.4\n\n- Enhance: test iojs support\n- Enhance: timeout attached to socket event only fire once per redirect\n\n## v1.0.3\n\n- Fix: response size limit should reject large chunk\n- Enhance: added character encoding detection for xml, such as rss/atom feed (encoding in DTD)\n\n## v1.0.2\n\n- Fix: added res.ok per spec change\n\n## v1.0.0\n\n- Enhance: better test coverage and doc\n\n\n# 0.x release\n\n## v0.1\n\n- Major: initial public release\n\n[Unreleased]: https://github.com/node-fetch/node-fetch/compare/v3.0.0-beta.10...HEAD\n", "{\n  \"name\": \"node-fetch\",\n  \"version\": \"3.1.1\",\n  \"description\": \"A light-weight module that brings Fetch API to node.js\",\n  \"main\": \"./src/index.js\",\n  \"sideEffects\": false,\n  \"type\": \"module\",\n  \"files\": [\n    \"src\",\n    \"@types/index.d.ts\"\n  ],\n  \"types\": \"./@types/index.d.ts\",\n  \"engines\": {\n    \"node\": \"^12.20.0 || ^14.13.1 || >=16.0.0\"\n  },\n  \"scripts\": {\n    \"test\": \"mocha\",\n    \"coverage\": \"c8 report --reporter=text-lcov | coveralls\",\n    \"test-types\": \"tsd\",\n    \"lint\": \"xo\"\n  },\n  \"repository\": {\n    \"type\": \"git\",\n    \"url\": \"https://github.com/node-fetch/node-fetch.git\"\n  },\n  \"keywords\": [\n    \"fetch\",\n    \"http\",\n    \"promise\",\n    \"request\",\n    \"curl\",\n    \"wget\",\n    \"xhr\",\n    \"whatwg\"\n  ],\n  \"author\": \"David Frank\",\n  \"license\": \"MIT\",\n  \"bugs\": {\n    \"url\": \"https://github.com/node-fetch/node-fetch/issues\"\n  },\n  \"homepage\": \"https://github.com/node-fetch/node-fetch\",\n  \"funding\": {\n    \"type\": \"opencollective\",\n    \"url\": \"https://opencollective.com/node-fetch\"\n  },\n  \"devDependencies\": {\n    \"abort-controller\": \"^3.0.0\",\n    \"abortcontroller-polyfill\": \"^1.7.1\",\n    \"busboy\": \"^0.3.1\",\n    \"c8\": \"^7.7.2\",\n    \"chai\": \"^4.3.4\",\n    \"chai-as-promised\": \"^7.1.1\",\n    \"chai-iterator\": \"^3.0.2\",\n    \"chai-string\": \"^1.5.0\",\n    \"coveralls\": \"^3.1.0\",\n    \"delay\": \"^5.0.0\",\n    \"form-data\": \"^4.0.0\",\n    \"formdata-node\": \"^4.2.4\",\n    \"mocha\": \"^9.1.3\",\n    \"p-timeout\": \"^5.0.0\",\n    \"stream-consumers\": \"^1.0.1\",\n    \"tsd\": \"^0.14.0\",\n    \"xo\": \"^0.39.1\"\n  },\n  \"dependencies\": {\n    \"data-uri-to-buffer\": \"^4.0.0\",\n    \"fetch-blob\": \"^3.1.3\",\n    \"formdata-polyfill\": \"^4.0.10\"\n  },\n  \"tsd\": {\n    \"cwd\": \"@types\",\n    \"compilerOptions\": {\n      \"esModuleInterop\": true\n    }\n  },\n  \"xo\": {\n    \"envs\": [\n      \"node\",\n      \"browser\"\n    ],\n    \"ignores\": [\n      \"example.js\"\n    ],\n    \"rules\": {\n      \"complexity\": 0,\n      \"import/extensions\": 0,\n      \"import/no-useless-path-segments\": 0,\n      \"import/no-anonymous-default-export\": 0,\n      \"import/no-named-as-default\": 0,\n      \"unicorn/import-index\": 0,\n      \"unicorn/no-array-reduce\": 0,\n      \"unicorn/prefer-node-protocol\": 0,\n      \"unicorn/numeric-separators-style\": 0,\n      \"unicorn/explicit-length-check\": 0,\n      \"capitalized-comments\": 0,\n      \"node/no-unsupported-features/es-syntax\": 0,\n      \"@typescript-eslint/member-ordering\": 0\n    },\n    \"overrides\": [\n      {\n        \"files\": \"test/**/*.js\",\n        \"envs\": [\n          \"node\",\n          \"mocha\"\n        ],\n        \"rules\": {\n          \"max-nested-callbacks\": 0,\n          \"no-unused-expressions\": 0,\n          \"no-warning-comments\": 0,\n          \"new-cap\": 0,\n          \"guard-for-in\": 0,\n          \"unicorn/no-array-for-each\": 0,\n          \"unicorn/prevent-abbreviations\": 0,\n          \"promise/prefer-await-to-then\": 0,\n          \"ava/no-import-test-files\": 0\n        }\n      }\n    ]\n  },\n  \"runkitExampleFilename\": \"example.js\"\n}\n"], "filenames": ["docs/CHANGELOG.md", "package.json"], "buggy_code_start_loc": [7, 3], "buggy_code_end_loc": [10, 4], "fixing_code_start_loc": [7, 3], "fixing_code_end_loc": [31, 4], "type": "CWE-200", "message": "node-fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor", "other": {"cve": {"id": "CVE-2022-0235", "sourceIdentifier": "security@huntr.dev", "published": "2022-01-16T17:15:07.870", "lastModified": "2023-02-03T19:16:07.090", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "node-fetch is vulnerable to Exposure of Sensitive Information to an Unauthorized Actor"}, {"lang": "es", "value": "node-fetch es vulnerable a una Exposici\u00f3n de Informaci\u00f3n Confidencial a un Actor no Autorizado"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 5.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 4.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-200"}]}, {"source": "nvd@nist.gov", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-601"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:node-fetch_project:node-fetch:*:*:*:*:*:node.js:*:*", "versionEndExcluding": "2.6.7", "matchCriteriaId": "8BBBB24C-E889-41A5-8758-73FC1EEC04D1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:node-fetch_project:node-fetch:*:*:*:*:*:node.js:*:*", "versionStartIncluding": "3.0.0", "versionEndExcluding": "3.1.1", "matchCriteriaId": "CBA8854F-A214-4FC8-BC82-C9E4CB3D653E"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:siemens:sinec_ins:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.0", "matchCriteriaId": "C89891C1-DFD7-4E1F-80A9-7485D86A15B5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:siemens:sinec_ins:1.0:-:*:*:*:*:*:*", "matchCriteriaId": "4664B195-AF14-4834-82B3-0B2C98020EB6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:siemens:sinec_ins:1.0:sp1:*:*:*:*:*:*", "matchCriteriaId": "75BC588E-CDF0-404E-AD61-02093A1DF343"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:10.0:*:*:*:*:*:*:*", "matchCriteriaId": "07B237A9-69A3-4A9C-9DA0-4E06BD37AE73"}]}]}], "references": [{"url": "https://cert-portal.siemens.com/productcert/pdf/ssa-637483.pdf", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/d26ab655-38d6-48b3-be15-f9ad6b6ae6f7", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2022/12/msg00007.html", "source": "security@huntr.dev", "tags": ["Mailing List", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/node-fetch/node-fetch/commit/36e47e8a6406185921e4985dcbeff140d73eaa10"}}