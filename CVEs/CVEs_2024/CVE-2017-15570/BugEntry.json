{"buggy_code": ["<%= form_tag({}, :data => {:cm_url => time_entries_context_menu_path}) do -%>\n<%= hidden_field_tag 'back_url', url_for(:params => request.query_parameters), :id => nil %>\n<div class=\"autoscroll\">\n<table class=\"list odd-even time-entries\">\n<thead>\n  <tr>\n    <th class=\"checkbox hide-when-print\">\n      <%= check_box_tag 'check_all', '', false, :class => 'toggle-selection',\n        :title => \"#{l(:button_check_all)}/#{l(:button_uncheck_all)}\" %>\n    </th>\n    <% @query.inline_columns.each do |column| %>\n      <%= column_header(@query, column) %>\n    <% end %>\n    <th></th>\n  </tr>\n</thead>\n<tbody>\n<% grouped_query_results(entries, @query) do |entry, group_name, group_count, group_totals| -%>\n  <% if group_name %>\n    <% reset_cycle %>\n    <tr class=\"group open\">\n      <td colspan=\"<%= @query.inline_columns.size + 2 %>\">\n        <span class=\"expander\" onclick=\"toggleRowGroup(this);\">&nbsp;</span>\n        <span class=\"name\"><%= group_name %></span>\n        <% if group_count %>\n        <span class=\"count\"><%= group_count %></span>\n        <% end %>\n        <span class=\"totals\"><%= group_totals %></span>\n        <%= link_to_function(\"#{l(:button_collapse_all)}/#{l(:button_expand_all)}\",\n                             \"toggleAllRowGroups(this)\", :class => 'toggle-all') %>\n      </td>\n    </tr>\n  <% end %>\n  <tr id=\"time-entry-<%= entry.id %>\" class=\"time-entry <%= cycle(\"odd\", \"even\") %> hascontextmenu\">\n    <td class=\"checkbox hide-when-print\"><%= check_box_tag(\"ids[]\", entry.id, false, :id => nil) %></td>\n    <%= raw @query.inline_columns.map {|column| \"<td class=\\\"#{column.css_classes}\\\">#{column_content(column, entry)}</td>\"}.join %>\n    <td class=\"buttons\">\n    <% if entry.editable_by?(User.current) -%>\n        <%= link_to l(:button_edit), edit_time_entry_path(entry),\n                    :title => l(:button_edit),\n                    :class => 'icon-only icon-edit' %>\n        <%= link_to l(:button_delete), time_entry_path(entry),\n                    :data => {:confirm => l(:text_are_you_sure)},\n                    :method => :delete,\n                    :title => l(:button_delete),\n                    :class => 'icon-only icon-del' %>\n    <% end -%>\n    </td>\n  </tr>\n  <% @query.block_columns.each do |column|\n       if (text = column_content(column, issue)) && text.present? -%>\n  <tr class=\"<%= current_cycle %>\">\n    <td colspan=\"<%= @query.inline_columns.size + 1 %>\" class=\"<%= column.css_classes %>\">\n    <% if query.block_columns.count > 1 %>\n      <span><%= column.caption %></span>\n    <% end %>\n    <%= text %>\n    </td>\n  </tr>\n  <% end -%>\n  <% end -%>\n<% end -%>\n</tbody>\n</table>\n</div>\n<% end -%>\n\n<%= context_menu %>\n"], "fixing_code": ["<%= form_tag({}, :data => {:cm_url => time_entries_context_menu_path}) do -%>\n<%= hidden_field_tag 'back_url', url_for(:params => request.query_parameters), :id => nil %>\n<div class=\"autoscroll\">\n<table class=\"list odd-even time-entries\">\n<thead>\n  <tr>\n    <th class=\"checkbox hide-when-print\">\n      <%= check_box_tag 'check_all', '', false, :class => 'toggle-selection',\n        :title => \"#{l(:button_check_all)}/#{l(:button_uncheck_all)}\" %>\n    </th>\n    <% @query.inline_columns.each do |column| %>\n      <%= column_header(@query, column) %>\n    <% end %>\n    <th></th>\n  </tr>\n</thead>\n<tbody>\n<% grouped_query_results(entries, @query) do |entry, group_name, group_count, group_totals| -%>\n  <% if group_name %>\n    <% reset_cycle %>\n    <tr class=\"group open\">\n      <td colspan=\"<%= @query.inline_columns.size + 2 %>\">\n        <span class=\"expander\" onclick=\"toggleRowGroup(this);\">&nbsp;</span>\n        <span class=\"name\"><%= group_name %></span>\n        <% if group_count %>\n        <span class=\"count\"><%= group_count %></span>\n        <% end %>\n        <span class=\"totals\"><%= group_totals %></span>\n        <%= link_to_function(\"#{l(:button_collapse_all)}/#{l(:button_expand_all)}\",\n                             \"toggleAllRowGroups(this)\", :class => 'toggle-all') %>\n      </td>\n    </tr>\n  <% end %>\n  <tr id=\"time-entry-<%= entry.id %>\" class=\"time-entry <%= cycle(\"odd\", \"even\") %> hascontextmenu\">\n    <td class=\"checkbox hide-when-print\"><%= check_box_tag(\"ids[]\", entry.id, false, :id => nil) %></td>\n    <% @query.inline_columns.each do |column| %>\n    <%= content_tag('td', column_content(column, entry), :class => column.css_classes) %>\n    <% end %>\n    <td class=\"buttons\">\n    <% if entry.editable_by?(User.current) -%>\n        <%= link_to l(:button_edit), edit_time_entry_path(entry),\n                    :title => l(:button_edit),\n                    :class => 'icon-only icon-edit' %>\n        <%= link_to l(:button_delete), time_entry_path(entry),\n                    :data => {:confirm => l(:text_are_you_sure)},\n                    :method => :delete,\n                    :title => l(:button_delete),\n                    :class => 'icon-only icon-del' %>\n    <% end -%>\n    </td>\n  </tr>\n  <% @query.block_columns.each do |column|\n       if (text = column_content(column, issue)) && text.present? -%>\n  <tr class=\"<%= current_cycle %>\">\n    <td colspan=\"<%= @query.inline_columns.size + 1 %>\" class=\"<%= column.css_classes %>\">\n    <% if query.block_columns.count > 1 %>\n      <span><%= column.caption %></span>\n    <% end %>\n    <%= text %>\n    </td>\n  </tr>\n  <% end -%>\n  <% end -%>\n<% end -%>\n</tbody>\n</table>\n</div>\n<% end -%>\n\n<%= context_menu %>\n"], "filenames": ["app/views/timelog/_list.html.erb"], "buggy_code_start_loc": [36], "buggy_code_end_loc": [37], "fixing_code_start_loc": [36], "fixing_code_end_loc": [39], "type": "CWE-79", "message": "In Redmine before 3.2.8, 3.3.x before 3.3.5, and 3.4.x before 3.4.3, XSS exists in app/views/timelog/_list.html.erb via crafted column data.", "other": {"cve": {"id": "CVE-2017-15570", "sourceIdentifier": "cve@mitre.org", "published": "2017-10-18T02:29:00.373", "lastModified": "2019-03-14T14:54:35.037", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Redmine before 3.2.8, 3.3.x before 3.3.5, and 3.4.x before 3.4.3, XSS exists in app/views/timelog/_list.html.erb via crafted column data."}, {"lang": "es", "value": "En Redmine en versiones anteriores a la 3.2.8, 3.3.x en versiones anteriores a la 3.3.5 y 3.4.x en versiones anteriores a la 3.4.3, existe XSS en app/views/timelog/_list.html.erb mediante datos de columna manipulados."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:redmine:redmine:*:*:*:*:*:*:*:*", "versionEndIncluding": "3.2.7", "matchCriteriaId": "506353CE-8310-44AC-B47C-4F3752DB7D0E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redmine:redmine:3.3.0:*:*:*:*:*:*:*", "matchCriteriaId": "196CF994-54D8-4E36-B37E-EAF1CC108F61"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redmine:redmine:3.3.1:*:*:*:*:*:*:*", "matchCriteriaId": "5AE4FC9C-3291-4344-81D5-83BA91D52FA7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redmine:redmine:3.3.2:*:*:*:*:*:*:*", "matchCriteriaId": "67E1F17B-7B25-48B3-8953-18C47D99B443"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redmine:redmine:3.3.3:*:*:*:*:*:*:*", "matchCriteriaId": "9ADF69D6-449E-4845-811D-D588B4D05665"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redmine:redmine:3.3.4:*:*:*:*:*:*:*", "matchCriteriaId": "DEAD6AFD-E3DE-4E0F-A2C8-78A1CD316A6D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redmine:redmine:3.4.0:*:*:*:*:*:*:*", "matchCriteriaId": "22FD314E-A7E6-4073-BC98-452B9C5826E1"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redmine:redmine:3.4.1:*:*:*:*:*:*:*", "matchCriteriaId": "6982CC59-BE97-400C-A653-47AD6802C3F4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:redmine:redmine:3.4.2:*:*:*:*:*:*:*", "matchCriteriaId": "4D6A2E76-528B-48FA-89A4-B6BEE20E901A"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "https://github.com/redmine/redmine/commit/1a0976417975a128b0a932ba1552c37e9414953b", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.debian.org/security/2018/dsa-4191", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.redmine.org/issues/27186", "source": "cve@mitre.org", "tags": ["Permissions Required", "Vendor Advisory"]}, {"url": "https://www.redmine.org/projects/redmine/wiki/Security_Advisories", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}]}, "github_commit_url": "https://github.com/redmine/redmine/commit/1a0976417975a128b0a932ba1552c37e9414953b"}}