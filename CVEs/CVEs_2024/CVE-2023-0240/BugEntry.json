{"buggy_code": ["// SPDX-License-Identifier: GPL-2.0\n/*\n * Shared application/kernel submission and completion ring pairs, for\n * supporting fast/efficient IO.\n *\n * A note on the read/write ordering memory barriers that are matched between\n * the application and kernel side.\n *\n * After the application reads the CQ ring tail, it must use an\n * appropriate smp_rmb() to pair with the smp_wmb() the kernel uses\n * before writing the tail (using smp_load_acquire to read the tail will\n * do). It also needs a smp_mb() before updating CQ head (ordering the\n * entry load(s) with the head store), pairing with an implicit barrier\n * through a control-dependency in io_get_cqring (smp_store_release to\n * store head will do). Failure to do so could lead to reading invalid\n * CQ entries.\n *\n * Likewise, the application must use an appropriate smp_wmb() before\n * writing the SQ tail (ordering SQ entry stores with the tail store),\n * which pairs with smp_load_acquire in io_get_sqring (smp_store_release\n * to store the tail will do). And it needs a barrier ordering the SQ\n * head load before writing new SQ entries (smp_load_acquire to read\n * head will do).\n *\n * When using the SQ poll thread (IORING_SETUP_SQPOLL), the application\n * needs to check the SQ flags for IORING_SQ_NEED_WAKEUP *after*\n * updating the SQ tail; a full memory barrier smp_mb() is needed\n * between.\n *\n * Also see the examples in the liburing library:\n *\n *\tgit://git.kernel.dk/liburing\n *\n * io_uring also uses READ/WRITE_ONCE() for _any_ store or load that happens\n * from data shared between the kernel and application. This is done both\n * for ordering purposes, but also to ensure that once a value is loaded from\n * data that the application could potentially modify, it remains stable.\n *\n * Copyright (C) 2018-2019 Jens Axboe\n * Copyright (c) 2018-2019 Christoph Hellwig\n */\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/errno.h>\n#include <linux/syscalls.h>\n#include <linux/compat.h>\n#include <net/compat.h>\n#include <linux/refcount.h>\n#include <linux/uio.h>\n#include <linux/bits.h>\n\n#include <linux/sched/signal.h>\n#include <linux/fs.h>\n#include <linux/file.h>\n#include <linux/fdtable.h>\n#include <linux/mm.h>\n#include <linux/mman.h>\n#include <linux/percpu.h>\n#include <linux/slab.h>\n#include <linux/kthread.h>\n#include <linux/blkdev.h>\n#include <linux/bvec.h>\n#include <linux/net.h>\n#include <net/sock.h>\n#include <net/af_unix.h>\n#include <net/scm.h>\n#include <linux/anon_inodes.h>\n#include <linux/sched/mm.h>\n#include <linux/uaccess.h>\n#include <linux/nospec.h>\n#include <linux/sizes.h>\n#include <linux/hugetlb.h>\n#include <linux/highmem.h>\n#include <linux/namei.h>\n#include <linux/fsnotify.h>\n#include <linux/fadvise.h>\n#include <linux/eventpoll.h>\n#include <linux/fs_struct.h>\n#include <linux/splice.h>\n#include <linux/task_work.h>\n#include <linux/pagemap.h>\n#include <linux/io_uring.h>\n#include <linux/blk-cgroup.h>\n\n#define CREATE_TRACE_POINTS\n#include <trace/events/io_uring.h>\n\n#include <uapi/linux/io_uring.h>\n\n#include \"internal.h\"\n#include \"io-wq.h\"\n\n#define IORING_MAX_ENTRIES\t32768\n#define IORING_MAX_CQ_ENTRIES\t(2 * IORING_MAX_ENTRIES)\n\n/*\n * Shift of 9 is 512 entries, or exactly one page on 64-bit archs\n */\n#define IORING_FILE_TABLE_SHIFT\t9\n#define IORING_MAX_FILES_TABLE\t(1U << IORING_FILE_TABLE_SHIFT)\n#define IORING_FILE_TABLE_MASK\t(IORING_MAX_FILES_TABLE - 1)\n#define IORING_MAX_FIXED_FILES\t(64 * IORING_MAX_FILES_TABLE)\n#define IORING_MAX_RESTRICTIONS\t(IORING_RESTRICTION_LAST + \\\n\t\t\t\t IORING_REGISTER_LAST + IORING_OP_LAST)\n\nstruct io_uring {\n\tu32 head ____cacheline_aligned_in_smp;\n\tu32 tail ____cacheline_aligned_in_smp;\n};\n\n/*\n * This data is shared with the application through the mmap at offsets\n * IORING_OFF_SQ_RING and IORING_OFF_CQ_RING.\n *\n * The offsets to the member fields are published through struct\n * io_sqring_offsets when calling io_uring_setup.\n */\nstruct io_rings {\n\t/*\n\t * Head and tail offsets into the ring; the offsets need to be\n\t * masked to get valid indices.\n\t *\n\t * The kernel controls head of the sq ring and the tail of the cq ring,\n\t * and the application controls tail of the sq ring and the head of the\n\t * cq ring.\n\t */\n\tstruct io_uring\t\tsq, cq;\n\t/*\n\t * Bitmasks to apply to head and tail offsets (constant, equals\n\t * ring_entries - 1)\n\t */\n\tu32\t\t\tsq_ring_mask, cq_ring_mask;\n\t/* Ring sizes (constant, power of 2) */\n\tu32\t\t\tsq_ring_entries, cq_ring_entries;\n\t/*\n\t * Number of invalid entries dropped by the kernel due to\n\t * invalid index stored in array\n\t *\n\t * Written by the kernel, shouldn't be modified by the\n\t * application (i.e. get number of \"new events\" by comparing to\n\t * cached value).\n\t *\n\t * After a new SQ head value was read by the application this\n\t * counter includes all submissions that were dropped reaching\n\t * the new SQ head (and possibly more).\n\t */\n\tu32\t\t\tsq_dropped;\n\t/*\n\t * Runtime SQ flags\n\t *\n\t * Written by the kernel, shouldn't be modified by the\n\t * application.\n\t *\n\t * The application needs a full memory barrier before checking\n\t * for IORING_SQ_NEED_WAKEUP after updating the sq tail.\n\t */\n\tu32\t\t\tsq_flags;\n\t/*\n\t * Runtime CQ flags\n\t *\n\t * Written by the application, shouldn't be modified by the\n\t * kernel.\n\t */\n\tu32                     cq_flags;\n\t/*\n\t * Number of completion events lost because the queue was full;\n\t * this should be avoided by the application by making sure\n\t * there are not more requests pending than there is space in\n\t * the completion queue.\n\t *\n\t * Written by the kernel, shouldn't be modified by the\n\t * application (i.e. get number of \"new events\" by comparing to\n\t * cached value).\n\t *\n\t * As completion events come in out of order this counter is not\n\t * ordered with any other data.\n\t */\n\tu32\t\t\tcq_overflow;\n\t/*\n\t * Ring buffer of completion events.\n\t *\n\t * The kernel writes completion events fresh every time they are\n\t * produced, so the application is allowed to modify pending\n\t * entries.\n\t */\n\tstruct io_uring_cqe\tcqes[] ____cacheline_aligned_in_smp;\n};\n\nstruct io_mapped_ubuf {\n\tu64\t\tubuf;\n\tsize_t\t\tlen;\n\tstruct\t\tbio_vec *bvec;\n\tunsigned int\tnr_bvecs;\n\tunsigned long\tacct_pages;\n};\n\nstruct fixed_file_table {\n\tstruct file\t\t**files;\n};\n\nstruct fixed_file_ref_node {\n\tstruct percpu_ref\t\trefs;\n\tstruct list_head\t\tnode;\n\tstruct list_head\t\tfile_list;\n\tstruct fixed_file_data\t\t*file_data;\n\tstruct llist_node\t\tllist;\n};\n\nstruct fixed_file_data {\n\tstruct fixed_file_table\t\t*table;\n\tstruct io_ring_ctx\t\t*ctx;\n\n\tstruct fixed_file_ref_node\t*node;\n\tstruct percpu_ref\t\trefs;\n\tstruct completion\t\tdone;\n\tstruct list_head\t\tref_list;\n\tspinlock_t\t\t\tlock;\n};\n\nstruct io_buffer {\n\tstruct list_head list;\n\t__u64 addr;\n\t__s32 len;\n\t__u16 bid;\n};\n\nstruct io_restriction {\n\tDECLARE_BITMAP(register_op, IORING_REGISTER_LAST);\n\tDECLARE_BITMAP(sqe_op, IORING_OP_LAST);\n\tu8 sqe_flags_allowed;\n\tu8 sqe_flags_required;\n\tbool registered;\n};\n\nstruct io_sq_data {\n\trefcount_t\t\trefs;\n\tstruct mutex\t\tlock;\n\n\t/* ctx's that are using this sqd */\n\tstruct list_head\tctx_list;\n\tstruct list_head\tctx_new_list;\n\tstruct mutex\t\tctx_lock;\n\n\tstruct task_struct\t*thread;\n\tstruct wait_queue_head\twait;\n};\n\nstruct io_ring_ctx {\n\tstruct {\n\t\tstruct percpu_ref\trefs;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct {\n\t\tunsigned int\t\tflags;\n\t\tunsigned int\t\tcompat: 1;\n\t\tunsigned int\t\tlimit_mem: 1;\n\t\tunsigned int\t\tcq_overflow_flushed: 1;\n\t\tunsigned int\t\tdrain_next: 1;\n\t\tunsigned int\t\teventfd_async: 1;\n\t\tunsigned int\t\trestricted: 1;\n\n\t\t/*\n\t\t * Ring buffer of indices into array of io_uring_sqe, which is\n\t\t * mmapped by the application using the IORING_OFF_SQES offset.\n\t\t *\n\t\t * This indirection could e.g. be used to assign fixed\n\t\t * io_uring_sqe entries to operations and only submit them to\n\t\t * the queue when needed.\n\t\t *\n\t\t * The kernel modifies neither the indices array nor the entries\n\t\t * array.\n\t\t */\n\t\tu32\t\t\t*sq_array;\n\t\tunsigned\t\tcached_sq_head;\n\t\tunsigned\t\tsq_entries;\n\t\tunsigned\t\tsq_mask;\n\t\tunsigned\t\tsq_thread_idle;\n\t\tunsigned\t\tcached_sq_dropped;\n\t\tatomic_t\t\tcached_cq_overflow;\n\t\tunsigned long\t\tsq_check_overflow;\n\n\t\tstruct list_head\tdefer_list;\n\t\tstruct list_head\ttimeout_list;\n\t\tstruct list_head\tcq_overflow_list;\n\n\t\twait_queue_head_t\tinflight_wait;\n\t\tstruct io_uring_sqe\t*sq_sqes;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct io_rings\t*rings;\n\n\t/* IO offload */\n\tstruct io_wq\t\t*io_wq;\n\n\t/*\n\t * For SQPOLL usage - we hold a reference to the parent task, so we\n\t * have access to the ->files\n\t */\n\tstruct task_struct\t*sqo_task;\n\n\t/* Only used for accounting purposes */\n\tstruct mm_struct\t*mm_account;\n\n#ifdef CONFIG_BLK_CGROUP\n\tstruct cgroup_subsys_state\t*sqo_blkcg_css;\n#endif\n\n\tstruct io_sq_data\t*sq_data;\t/* if using sq thread polling */\n\n\tstruct wait_queue_head\tsqo_sq_wait;\n\tstruct wait_queue_entry\tsqo_wait_entry;\n\tstruct list_head\tsqd_list;\n\n\t/*\n\t * If used, fixed file set. Writers must ensure that ->refs is dead,\n\t * readers must ensure that ->refs is alive as long as the file* is\n\t * used. Only updated through io_uring_register(2).\n\t */\n\tstruct fixed_file_data\t*file_data;\n\tunsigned\t\tnr_user_files;\n\n\t/* if used, fixed mapped user buffers */\n\tunsigned\t\tnr_user_bufs;\n\tstruct io_mapped_ubuf\t*user_bufs;\n\n\tstruct user_struct\t*user;\n\n\tconst struct cred\t*creds;\n\n\tstruct completion\tref_comp;\n\tstruct completion\tsq_thread_comp;\n\n\t/* if all else fails... */\n\tstruct io_kiocb\t\t*fallback_req;\n\n#if defined(CONFIG_UNIX)\n\tstruct socket\t\t*ring_sock;\n#endif\n\n\tstruct idr\t\tio_buffer_idr;\n\n\tstruct idr\t\tpersonality_idr;\n\n\tstruct {\n\t\tunsigned\t\tcached_cq_tail;\n\t\tunsigned\t\tcq_entries;\n\t\tunsigned\t\tcq_mask;\n\t\tatomic_t\t\tcq_timeouts;\n\t\tunsigned long\t\tcq_check_overflow;\n\t\tstruct wait_queue_head\tcq_wait;\n\t\tstruct fasync_struct\t*cq_fasync;\n\t\tstruct eventfd_ctx\t*cq_ev_fd;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct {\n\t\tstruct mutex\t\turing_lock;\n\t\twait_queue_head_t\twait;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct {\n\t\tspinlock_t\t\tcompletion_lock;\n\n\t\t/*\n\t\t * ->iopoll_list is protected by the ctx->uring_lock for\n\t\t * io_uring instances that don't use IORING_SETUP_SQPOLL.\n\t\t * For SQPOLL, only the single threaded io_sq_thread() will\n\t\t * manipulate the list, hence no extra locking is needed there.\n\t\t */\n\t\tstruct list_head\tiopoll_list;\n\t\tstruct hlist_head\t*cancel_hash;\n\t\tunsigned\t\tcancel_hash_bits;\n\t\tbool\t\t\tpoll_multi_file;\n\n\t\tspinlock_t\t\tinflight_lock;\n\t\tstruct list_head\tinflight_list;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct delayed_work\t\tfile_put_work;\n\tstruct llist_head\t\tfile_put_llist;\n\n\tstruct work_struct\t\texit_work;\n\tstruct io_restriction\t\trestrictions;\n};\n\n/*\n * First field must be the file pointer in all the\n * iocb unions! See also 'struct kiocb' in <linux/fs.h>\n */\nstruct io_poll_iocb {\n\tstruct file\t\t\t*file;\n\tunion {\n\t\tstruct wait_queue_head\t*head;\n\t\tu64\t\t\taddr;\n\t};\n\t__poll_t\t\t\tevents;\n\tbool\t\t\t\tdone;\n\tbool\t\t\t\tcanceled;\n\tstruct wait_queue_entry\t\twait;\n};\n\nstruct io_close {\n\tstruct file\t\t\t*file;\n\tstruct file\t\t\t*put_file;\n\tint\t\t\t\tfd;\n};\n\nstruct io_timeout_data {\n\tstruct io_kiocb\t\t\t*req;\n\tstruct hrtimer\t\t\ttimer;\n\tstruct timespec64\t\tts;\n\tenum hrtimer_mode\t\tmode;\n};\n\nstruct io_accept {\n\tstruct file\t\t\t*file;\n\tstruct sockaddr __user\t\t*addr;\n\tint __user\t\t\t*addr_len;\n\tint\t\t\t\tflags;\n\tunsigned long\t\t\tnofile;\n};\n\nstruct io_sync {\n\tstruct file\t\t\t*file;\n\tloff_t\t\t\t\tlen;\n\tloff_t\t\t\t\toff;\n\tint\t\t\t\tflags;\n\tint\t\t\t\tmode;\n};\n\nstruct io_cancel {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\taddr;\n};\n\nstruct io_timeout {\n\tstruct file\t\t\t*file;\n\tu32\t\t\t\toff;\n\tu32\t\t\t\ttarget_seq;\n\tstruct list_head\t\tlist;\n};\n\nstruct io_timeout_rem {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\taddr;\n};\n\nstruct io_rw {\n\t/* NOTE: kiocb has the file as the first member, so don't do it here */\n\tstruct kiocb\t\t\tkiocb;\n\tu64\t\t\t\taddr;\n\tu64\t\t\t\tlen;\n};\n\nstruct io_connect {\n\tstruct file\t\t\t*file;\n\tstruct sockaddr __user\t\t*addr;\n\tint\t\t\t\taddr_len;\n};\n\nstruct io_sr_msg {\n\tstruct file\t\t\t*file;\n\tunion {\n\t\tstruct user_msghdr __user *umsg;\n\t\tvoid __user\t\t*buf;\n\t};\n\tint\t\t\t\tmsg_flags;\n\tint\t\t\t\tbgid;\n\tsize_t\t\t\t\tlen;\n\tstruct io_buffer\t\t*kbuf;\n};\n\nstruct io_open {\n\tstruct file\t\t\t*file;\n\tint\t\t\t\tdfd;\n\tstruct filename\t\t\t*filename;\n\tstruct open_how\t\t\thow;\n\tunsigned long\t\t\tnofile;\n};\n\nstruct io_files_update {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\targ;\n\tu32\t\t\t\tnr_args;\n\tu32\t\t\t\toffset;\n};\n\nstruct io_fadvise {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\toffset;\n\tu32\t\t\t\tlen;\n\tu32\t\t\t\tadvice;\n};\n\nstruct io_madvise {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\taddr;\n\tu32\t\t\t\tlen;\n\tu32\t\t\t\tadvice;\n};\n\nstruct io_epoll {\n\tstruct file\t\t\t*file;\n\tint\t\t\t\tepfd;\n\tint\t\t\t\top;\n\tint\t\t\t\tfd;\n\tstruct epoll_event\t\tevent;\n};\n\nstruct io_splice {\n\tstruct file\t\t\t*file_out;\n\tstruct file\t\t\t*file_in;\n\tloff_t\t\t\t\toff_out;\n\tloff_t\t\t\t\toff_in;\n\tu64\t\t\t\tlen;\n\tunsigned int\t\t\tflags;\n};\n\nstruct io_provide_buf {\n\tstruct file\t\t\t*file;\n\t__u64\t\t\t\taddr;\n\t__s32\t\t\t\tlen;\n\t__u32\t\t\t\tbgid;\n\t__u16\t\t\t\tnbufs;\n\t__u16\t\t\t\tbid;\n};\n\nstruct io_statx {\n\tstruct file\t\t\t*file;\n\tint\t\t\t\tdfd;\n\tunsigned int\t\t\tmask;\n\tunsigned int\t\t\tflags;\n\tconst char __user\t\t*filename;\n\tstruct statx __user\t\t*buffer;\n};\n\nstruct io_completion {\n\tstruct file\t\t\t*file;\n\tstruct list_head\t\tlist;\n\tint\t\t\t\tcflags;\n};\n\nstruct io_async_connect {\n\tstruct sockaddr_storage\t\taddress;\n};\n\nstruct io_async_msghdr {\n\tstruct iovec\t\t\tfast_iov[UIO_FASTIOV];\n\tstruct iovec\t\t\t*iov;\n\tstruct sockaddr __user\t\t*uaddr;\n\tstruct msghdr\t\t\tmsg;\n\tstruct sockaddr_storage\t\taddr;\n};\n\nstruct io_async_rw {\n\tstruct iovec\t\t\tfast_iov[UIO_FASTIOV];\n\tconst struct iovec\t\t*free_iovec;\n\tstruct iov_iter\t\t\titer;\n\tsize_t\t\t\t\tbytes_done;\n\tstruct wait_page_queue\t\twpq;\n};\n\nenum {\n\tREQ_F_FIXED_FILE_BIT\t= IOSQE_FIXED_FILE_BIT,\n\tREQ_F_IO_DRAIN_BIT\t= IOSQE_IO_DRAIN_BIT,\n\tREQ_F_LINK_BIT\t\t= IOSQE_IO_LINK_BIT,\n\tREQ_F_HARDLINK_BIT\t= IOSQE_IO_HARDLINK_BIT,\n\tREQ_F_FORCE_ASYNC_BIT\t= IOSQE_ASYNC_BIT,\n\tREQ_F_BUFFER_SELECT_BIT\t= IOSQE_BUFFER_SELECT_BIT,\n\n\tREQ_F_LINK_HEAD_BIT,\n\tREQ_F_FAIL_LINK_BIT,\n\tREQ_F_INFLIGHT_BIT,\n\tREQ_F_CUR_POS_BIT,\n\tREQ_F_NOWAIT_BIT,\n\tREQ_F_LINK_TIMEOUT_BIT,\n\tREQ_F_ISREG_BIT,\n\tREQ_F_NEED_CLEANUP_BIT,\n\tREQ_F_POLLED_BIT,\n\tREQ_F_BUFFER_SELECTED_BIT,\n\tREQ_F_NO_FILE_TABLE_BIT,\n\tREQ_F_WORK_INITIALIZED_BIT,\n\n\t/* not a real bit, just to check we're not overflowing the space */\n\t__REQ_F_LAST_BIT,\n};\n\nenum {\n\t/* ctx owns file */\n\tREQ_F_FIXED_FILE\t= BIT(REQ_F_FIXED_FILE_BIT),\n\t/* drain existing IO first */\n\tREQ_F_IO_DRAIN\t\t= BIT(REQ_F_IO_DRAIN_BIT),\n\t/* linked sqes */\n\tREQ_F_LINK\t\t= BIT(REQ_F_LINK_BIT),\n\t/* doesn't sever on completion < 0 */\n\tREQ_F_HARDLINK\t\t= BIT(REQ_F_HARDLINK_BIT),\n\t/* IOSQE_ASYNC */\n\tREQ_F_FORCE_ASYNC\t= BIT(REQ_F_FORCE_ASYNC_BIT),\n\t/* IOSQE_BUFFER_SELECT */\n\tREQ_F_BUFFER_SELECT\t= BIT(REQ_F_BUFFER_SELECT_BIT),\n\n\t/* head of a link */\n\tREQ_F_LINK_HEAD\t\t= BIT(REQ_F_LINK_HEAD_BIT),\n\t/* fail rest of links */\n\tREQ_F_FAIL_LINK\t\t= BIT(REQ_F_FAIL_LINK_BIT),\n\t/* on inflight list */\n\tREQ_F_INFLIGHT\t\t= BIT(REQ_F_INFLIGHT_BIT),\n\t/* read/write uses file position */\n\tREQ_F_CUR_POS\t\t= BIT(REQ_F_CUR_POS_BIT),\n\t/* must not punt to workers */\n\tREQ_F_NOWAIT\t\t= BIT(REQ_F_NOWAIT_BIT),\n\t/* has linked timeout */\n\tREQ_F_LINK_TIMEOUT\t= BIT(REQ_F_LINK_TIMEOUT_BIT),\n\t/* regular file */\n\tREQ_F_ISREG\t\t= BIT(REQ_F_ISREG_BIT),\n\t/* needs cleanup */\n\tREQ_F_NEED_CLEANUP\t= BIT(REQ_F_NEED_CLEANUP_BIT),\n\t/* already went through poll handler */\n\tREQ_F_POLLED\t\t= BIT(REQ_F_POLLED_BIT),\n\t/* buffer already selected */\n\tREQ_F_BUFFER_SELECTED\t= BIT(REQ_F_BUFFER_SELECTED_BIT),\n\t/* doesn't need file table for this request */\n\tREQ_F_NO_FILE_TABLE\t= BIT(REQ_F_NO_FILE_TABLE_BIT),\n\t/* io_wq_work is initialized */\n\tREQ_F_WORK_INITIALIZED\t= BIT(REQ_F_WORK_INITIALIZED_BIT),\n};\n\nstruct async_poll {\n\tstruct io_poll_iocb\tpoll;\n\tstruct io_poll_iocb\t*double_poll;\n};\n\n/*\n * NOTE! Each of the iocb union members has the file pointer\n * as the first entry in their struct definition. So you can\n * access the file pointer through any of the sub-structs,\n * or directly as just 'ki_filp' in this struct.\n */\nstruct io_kiocb {\n\tunion {\n\t\tstruct file\t\t*file;\n\t\tstruct io_rw\t\trw;\n\t\tstruct io_poll_iocb\tpoll;\n\t\tstruct io_accept\taccept;\n\t\tstruct io_sync\t\tsync;\n\t\tstruct io_cancel\tcancel;\n\t\tstruct io_timeout\ttimeout;\n\t\tstruct io_timeout_rem\ttimeout_rem;\n\t\tstruct io_connect\tconnect;\n\t\tstruct io_sr_msg\tsr_msg;\n\t\tstruct io_open\t\topen;\n\t\tstruct io_close\t\tclose;\n\t\tstruct io_files_update\tfiles_update;\n\t\tstruct io_fadvise\tfadvise;\n\t\tstruct io_madvise\tmadvise;\n\t\tstruct io_epoll\t\tepoll;\n\t\tstruct io_splice\tsplice;\n\t\tstruct io_provide_buf\tpbuf;\n\t\tstruct io_statx\t\tstatx;\n\t\t/* use only after cleaning per-op data, see io_clean_op() */\n\t\tstruct io_completion\tcompl;\n\t};\n\n\t/* opcode allocated if it needs to store data for async defer */\n\tvoid\t\t\t\t*async_data;\n\tu8\t\t\t\topcode;\n\t/* polled IO has completed */\n\tu8\t\t\t\tiopoll_completed;\n\n\tu16\t\t\t\tbuf_index;\n\tu32\t\t\t\tresult;\n\n\tstruct io_ring_ctx\t\t*ctx;\n\tunsigned int\t\t\tflags;\n\trefcount_t\t\t\trefs;\n\tstruct task_struct\t\t*task;\n\tu64\t\t\t\tuser_data;\n\n\tstruct list_head\t\tlink_list;\n\n\t/*\n\t * 1. used with ctx->iopoll_list with reads/writes\n\t * 2. to track reqs with ->files (see io_op_def::file_table)\n\t */\n\tstruct list_head\t\tinflight_entry;\n\n\tstruct percpu_ref\t\t*fixed_file_refs;\n\tstruct callback_head\t\ttask_work;\n\t/* for polled requests, i.e. IORING_OP_POLL_ADD and async armed poll */\n\tstruct hlist_node\t\thash_node;\n\tstruct async_poll\t\t*apoll;\n\tstruct io_wq_work\t\twork;\n\tstruct io_identity\t\tidentity;\n};\n\nstruct io_defer_entry {\n\tstruct list_head\tlist;\n\tstruct io_kiocb\t\t*req;\n\tu32\t\t\tseq;\n};\n\n#define IO_IOPOLL_BATCH\t\t\t8\n\nstruct io_comp_state {\n\tunsigned int\t\tnr;\n\tstruct list_head\tlist;\n\tstruct io_ring_ctx\t*ctx;\n};\n\nstruct io_submit_state {\n\tstruct blk_plug\t\tplug;\n\n\t/*\n\t * io_kiocb alloc cache\n\t */\n\tvoid\t\t\t*reqs[IO_IOPOLL_BATCH];\n\tunsigned int\t\tfree_reqs;\n\n\t/*\n\t * Batch completion logic\n\t */\n\tstruct io_comp_state\tcomp;\n\n\t/*\n\t * File reference cache\n\t */\n\tstruct file\t\t*file;\n\tunsigned int\t\tfd;\n\tunsigned int\t\thas_refs;\n\tunsigned int\t\tios_left;\n};\n\nstruct io_op_def {\n\t/* needs req->file assigned */\n\tunsigned\t\tneeds_file : 1;\n\t/* don't fail if file grab fails */\n\tunsigned\t\tneeds_file_no_error : 1;\n\t/* hash wq insertion if file is a regular file */\n\tunsigned\t\thash_reg_file : 1;\n\t/* unbound wq insertion if file is a non-regular file */\n\tunsigned\t\tunbound_nonreg_file : 1;\n\t/* opcode is not supported by this kernel */\n\tunsigned\t\tnot_supported : 1;\n\t/* set if opcode supports polled \"wait\" */\n\tunsigned\t\tpollin : 1;\n\tunsigned\t\tpollout : 1;\n\t/* op supports buffer selection */\n\tunsigned\t\tbuffer_select : 1;\n\t/* needs rlimit(RLIMIT_FSIZE) assigned */\n\tunsigned\t\tneeds_fsize : 1;\n\t/* must always have async data allocated */\n\tunsigned\t\tneeds_async_data : 1;\n\t/* size of async data needed, if any */\n\tunsigned short\t\tasync_size;\n\tunsigned\t\twork_flags;\n};\n\nstatic const struct io_op_def io_op_defs[] = {\n\t[IORING_OP_NOP] = {},\n\t[IORING_OP_READV] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.buffer_select\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_WRITEV] = {\n\t\t.needs_file\t\t= 1,\n\t\t.hash_reg_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_fsize\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_FSYNC] = {\n\t\t.needs_file\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_READ_FIXED] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_WRITE_FIXED] = {\n\t\t.needs_file\t\t= 1,\n\t\t.hash_reg_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_fsize\t\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_POLL_ADD] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t},\n\t[IORING_OP_POLL_REMOVE] = {},\n\t[IORING_OP_SYNC_FILE_RANGE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_SENDMSG] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_msghdr),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG |\n\t\t\t\t\t\tIO_WQ_WORK_FS,\n\t},\n\t[IORING_OP_RECVMSG] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.buffer_select\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_msghdr),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG |\n\t\t\t\t\t\tIO_WQ_WORK_FS,\n\t},\n\t[IORING_OP_TIMEOUT] = {\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_timeout_data),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM,\n\t},\n\t[IORING_OP_TIMEOUT_REMOVE] = {},\n\t[IORING_OP_ACCEPT] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_FILES,\n\t},\n\t[IORING_OP_ASYNC_CANCEL] = {},\n\t[IORING_OP_LINK_TIMEOUT] = {\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_timeout_data),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM,\n\t},\n\t[IORING_OP_CONNECT] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_connect),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM,\n\t},\n\t[IORING_OP_FALLOCATE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.needs_fsize\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_OPENAT] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_BLKCG |\n\t\t\t\t\t\tIO_WQ_WORK_FS,\n\t},\n\t[IORING_OP_CLOSE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.needs_file_no_error\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_FILES_UPDATE] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_MM,\n\t},\n\t[IORING_OP_STATX] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_MM |\n\t\t\t\t\t\tIO_WQ_WORK_FS | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_READ] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.buffer_select\t\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_WRITE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_fsize\t\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_FADVISE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_MADVISE] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_SEND] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_RECV] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.buffer_select\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_OPENAT2] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_FS |\n\t\t\t\t\t\tIO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_EPOLL_CTL] = {\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES,\n\t},\n\t[IORING_OP_SPLICE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.hash_reg_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_PROVIDE_BUFFERS] = {},\n\t[IORING_OP_REMOVE_BUFFERS] = {},\n\t[IORING_OP_TEE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.hash_reg_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t},\n};\n\nenum io_mem_account {\n\tACCT_LOCKED,\n\tACCT_PINNED,\n};\n\nstatic void __io_complete_rw(struct io_kiocb *req, long res, long res2,\n\t\t\t     struct io_comp_state *cs);\nstatic void io_cqring_fill_event(struct io_kiocb *req, long res);\nstatic void io_put_req(struct io_kiocb *req);\nstatic void io_put_req_deferred(struct io_kiocb *req, int nr);\nstatic void io_double_put_req(struct io_kiocb *req);\nstatic struct io_kiocb *io_prep_linked_timeout(struct io_kiocb *req);\nstatic void __io_queue_linked_timeout(struct io_kiocb *req);\nstatic void io_queue_linked_timeout(struct io_kiocb *req);\nstatic int __io_sqe_files_update(struct io_ring_ctx *ctx,\n\t\t\t\t struct io_uring_files_update *ip,\n\t\t\t\t unsigned nr_args);\nstatic void __io_clean_op(struct io_kiocb *req);\nstatic struct file *io_file_get(struct io_submit_state *state,\n\t\t\t\tstruct io_kiocb *req, int fd, bool fixed);\nstatic void __io_queue_sqe(struct io_kiocb *req, struct io_comp_state *cs);\nstatic void io_file_put_work(struct work_struct *work);\n\nstatic ssize_t io_import_iovec(int rw, struct io_kiocb *req,\n\t\t\t       struct iovec **iovec, struct iov_iter *iter,\n\t\t\t       bool needs_lock);\nstatic int io_setup_async_rw(struct io_kiocb *req, const struct iovec *iovec,\n\t\t\t     const struct iovec *fast_iov,\n\t\t\t     struct iov_iter *iter, bool force);\n\nstatic struct kmem_cache *req_cachep;\n\nstatic const struct file_operations io_uring_fops;\n\nstruct sock *io_uring_get_socket(struct file *file)\n{\n#if defined(CONFIG_UNIX)\n\tif (file->f_op == &io_uring_fops) {\n\t\tstruct io_ring_ctx *ctx = file->private_data;\n\n\t\treturn ctx->ring_sock->sk;\n\t}\n#endif\n\treturn NULL;\n}\nEXPORT_SYMBOL(io_uring_get_socket);\n\nstatic inline void io_clean_op(struct io_kiocb *req)\n{\n\tif (req->flags & (REQ_F_NEED_CLEANUP | REQ_F_BUFFER_SELECTED |\n\t\t\t  REQ_F_INFLIGHT))\n\t\t__io_clean_op(req);\n}\n\nstatic void io_sq_thread_drop_mm(void)\n{\n\tstruct mm_struct *mm = current->mm;\n\n\tif (mm) {\n\t\tkthread_unuse_mm(mm);\n\t\tmmput(mm);\n\t}\n}\n\nstatic int __io_sq_thread_acquire_mm(struct io_ring_ctx *ctx)\n{\n\tif (!current->mm) {\n\t\tif (unlikely(!(ctx->flags & IORING_SETUP_SQPOLL) ||\n\t\t\t     !ctx->sqo_task->mm ||\n\t\t\t     !mmget_not_zero(ctx->sqo_task->mm)))\n\t\t\treturn -EFAULT;\n\t\tkthread_use_mm(ctx->sqo_task->mm);\n\t}\n\n\treturn 0;\n}\n\nstatic int io_sq_thread_acquire_mm(struct io_ring_ctx *ctx,\n\t\t\t\t   struct io_kiocb *req)\n{\n\tif (!(io_op_defs[req->opcode].work_flags & IO_WQ_WORK_MM))\n\t\treturn 0;\n\treturn __io_sq_thread_acquire_mm(ctx);\n}\n\nstatic void io_sq_thread_associate_blkcg(struct io_ring_ctx *ctx,\n\t\t\t\t\t struct cgroup_subsys_state **cur_css)\n\n{\n#ifdef CONFIG_BLK_CGROUP\n\t/* puts the old one when swapping */\n\tif (*cur_css != ctx->sqo_blkcg_css) {\n\t\tkthread_associate_blkcg(ctx->sqo_blkcg_css);\n\t\t*cur_css = ctx->sqo_blkcg_css;\n\t}\n#endif\n}\n\nstatic void io_sq_thread_unassociate_blkcg(void)\n{\n#ifdef CONFIG_BLK_CGROUP\n\tkthread_associate_blkcg(NULL);\n#endif\n}\n\nstatic inline void req_set_fail_links(struct io_kiocb *req)\n{\n\tif ((req->flags & (REQ_F_LINK | REQ_F_HARDLINK)) == REQ_F_LINK)\n\t\treq->flags |= REQ_F_FAIL_LINK;\n}\n\n/*\n * Note: must call io_req_init_async() for the first time you\n * touch any members of io_wq_work.\n */\nstatic inline void io_req_init_async(struct io_kiocb *req)\n{\n\tif (req->flags & REQ_F_WORK_INITIALIZED)\n\t\treturn;\n\n\tmemset(&req->work, 0, sizeof(req->work));\n\treq->flags |= REQ_F_WORK_INITIALIZED;\n\treq->work.identity = &req->identity;\n}\n\nstatic inline bool io_async_submit(struct io_ring_ctx *ctx)\n{\n\treturn ctx->flags & IORING_SETUP_SQPOLL;\n}\n\nstatic void io_ring_ctx_ref_free(struct percpu_ref *ref)\n{\n\tstruct io_ring_ctx *ctx = container_of(ref, struct io_ring_ctx, refs);\n\n\tcomplete(&ctx->ref_comp);\n}\n\nstatic inline bool io_is_timeout_noseq(struct io_kiocb *req)\n{\n\treturn !req->timeout.off;\n}\n\nstatic struct io_ring_ctx *io_ring_ctx_alloc(struct io_uring_params *p)\n{\n\tstruct io_ring_ctx *ctx;\n\tint hash_bits;\n\n\tctx = kzalloc(sizeof(*ctx), GFP_KERNEL);\n\tif (!ctx)\n\t\treturn NULL;\n\n\tctx->fallback_req = kmem_cache_alloc(req_cachep, GFP_KERNEL);\n\tif (!ctx->fallback_req)\n\t\tgoto err;\n\n\t/*\n\t * Use 5 bits less than the max cq entries, that should give us around\n\t * 32 entries per hash list if totally full and uniformly spread.\n\t */\n\thash_bits = ilog2(p->cq_entries);\n\thash_bits -= 5;\n\tif (hash_bits <= 0)\n\t\thash_bits = 1;\n\tctx->cancel_hash_bits = hash_bits;\n\tctx->cancel_hash = kmalloc((1U << hash_bits) * sizeof(struct hlist_head),\n\t\t\t\t\tGFP_KERNEL);\n\tif (!ctx->cancel_hash)\n\t\tgoto err;\n\t__hash_init(ctx->cancel_hash, 1U << hash_bits);\n\n\tif (percpu_ref_init(&ctx->refs, io_ring_ctx_ref_free,\n\t\t\t    PERCPU_REF_ALLOW_REINIT, GFP_KERNEL))\n\t\tgoto err;\n\n\tctx->flags = p->flags;\n\tinit_waitqueue_head(&ctx->sqo_sq_wait);\n\tINIT_LIST_HEAD(&ctx->sqd_list);\n\tinit_waitqueue_head(&ctx->cq_wait);\n\tINIT_LIST_HEAD(&ctx->cq_overflow_list);\n\tinit_completion(&ctx->ref_comp);\n\tinit_completion(&ctx->sq_thread_comp);\n\tidr_init(&ctx->io_buffer_idr);\n\tidr_init(&ctx->personality_idr);\n\tmutex_init(&ctx->uring_lock);\n\tinit_waitqueue_head(&ctx->wait);\n\tspin_lock_init(&ctx->completion_lock);\n\tINIT_LIST_HEAD(&ctx->iopoll_list);\n\tINIT_LIST_HEAD(&ctx->defer_list);\n\tINIT_LIST_HEAD(&ctx->timeout_list);\n\tinit_waitqueue_head(&ctx->inflight_wait);\n\tspin_lock_init(&ctx->inflight_lock);\n\tINIT_LIST_HEAD(&ctx->inflight_list);\n\tINIT_DELAYED_WORK(&ctx->file_put_work, io_file_put_work);\n\tinit_llist_head(&ctx->file_put_llist);\n\treturn ctx;\nerr:\n\tif (ctx->fallback_req)\n\t\tkmem_cache_free(req_cachep, ctx->fallback_req);\n\tkfree(ctx->cancel_hash);\n\tkfree(ctx);\n\treturn NULL;\n}\n\nstatic bool req_need_defer(struct io_kiocb *req, u32 seq)\n{\n\tif (unlikely(req->flags & REQ_F_IO_DRAIN)) {\n\t\tstruct io_ring_ctx *ctx = req->ctx;\n\n\t\treturn seq != ctx->cached_cq_tail\n\t\t\t\t+ atomic_read(&ctx->cached_cq_overflow);\n\t}\n\n\treturn false;\n}\n\nstatic void __io_commit_cqring(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *rings = ctx->rings;\n\n\t/* order cqe stores with ring update */\n\tsmp_store_release(&rings->cq.tail, ctx->cached_cq_tail);\n\n\tif (wq_has_sleeper(&ctx->cq_wait)) {\n\t\twake_up_interruptible(&ctx->cq_wait);\n\t\tkill_fasync(&ctx->cq_fasync, SIGIO, POLL_IN);\n\t}\n}\n\nstatic void io_req_clean_work(struct io_kiocb *req)\n{\n\tif (!(req->flags & REQ_F_WORK_INITIALIZED))\n\t\treturn;\n\n\treq->flags &= ~REQ_F_WORK_INITIALIZED;\n\n\tif (req->work.flags & IO_WQ_WORK_MM) {\n\t\tmmdrop(req->work.identity->mm);\n\t\treq->work.flags &= ~IO_WQ_WORK_MM;\n\t}\n#ifdef CONFIG_BLK_CGROUP\n\tif (req->work.flags & IO_WQ_WORK_BLKCG) {\n\t\tcss_put(req->work.identity->blkcg_css);\n\t\treq->work.flags &= ~IO_WQ_WORK_BLKCG;\n\t}\n#endif\n\tif (req->work.flags & IO_WQ_WORK_CREDS) {\n\t\tput_cred(req->work.identity->creds);\n\t\treq->work.flags &= ~IO_WQ_WORK_CREDS;\n\t}\n\tif (req->work.flags & IO_WQ_WORK_FS) {\n\t\tstruct fs_struct *fs = req->work.identity->fs;\n\n\t\tspin_lock(&req->work.identity->fs->lock);\n\t\tif (--fs->users)\n\t\t\tfs = NULL;\n\t\tspin_unlock(&req->work.identity->fs->lock);\n\t\tif (fs)\n\t\t\tfree_fs_struct(fs);\n\t\treq->work.flags &= ~IO_WQ_WORK_FS;\n\t}\n}\n\nstatic void io_prep_async_work(struct io_kiocb *req)\n{\n\tconst struct io_op_def *def = &io_op_defs[req->opcode];\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tio_req_init_async(req);\n\n\tif (req->flags & REQ_F_ISREG) {\n\t\tif (def->hash_reg_file || (ctx->flags & IORING_SETUP_IOPOLL))\n\t\t\tio_wq_hash_work(&req->work, file_inode(req->file));\n\t} else {\n\t\tif (def->unbound_nonreg_file)\n\t\t\treq->work.flags |= IO_WQ_WORK_UNBOUND;\n\t}\n\tif (!(req->work.flags & IO_WQ_WORK_FILES) &&\n\t    (io_op_defs[req->opcode].work_flags & IO_WQ_WORK_FILES) &&\n\t    !(req->flags & REQ_F_NO_FILE_TABLE)) {\n\t\treq->work.identity->files = get_files_struct(current);\n\t\tget_nsproxy(current->nsproxy);\n\t\treq->work.identity->nsproxy = current->nsproxy;\n\t\treq->flags |= REQ_F_INFLIGHT;\n\n\t\tspin_lock_irq(&ctx->inflight_lock);\n\t\tlist_add(&req->inflight_entry, &ctx->inflight_list);\n\t\tspin_unlock_irq(&ctx->inflight_lock);\n\t\treq->work.flags |= IO_WQ_WORK_FILES;\n\t}\n\tif (!(req->work.flags & IO_WQ_WORK_MM) &&\n\t    (def->work_flags & IO_WQ_WORK_MM)) {\n\t\tmmgrab(current->mm);\n\t\treq->work.identity->mm = current->mm;\n\t\treq->work.flags |= IO_WQ_WORK_MM;\n\t}\n#ifdef CONFIG_BLK_CGROUP\n\tif (!(req->work.flags & IO_WQ_WORK_BLKCG) &&\n\t    (def->work_flags & IO_WQ_WORK_BLKCG)) {\n\t\trcu_read_lock();\n\t\treq->work.identity->blkcg_css = blkcg_css();\n\t\t/*\n\t\t * This should be rare, either the cgroup is dying or the task\n\t\t * is moving cgroups. Just punt to root for the handful of ios.\n\t\t */\n\t\tif (css_tryget_online(req->work.identity->blkcg_css))\n\t\t\treq->work.flags |= IO_WQ_WORK_BLKCG;\n\t\trcu_read_unlock();\n\t}\n#endif\n\tif (!(req->work.flags & IO_WQ_WORK_CREDS)) {\n\t\treq->work.identity->creds = get_current_cred();\n\t\treq->work.flags |= IO_WQ_WORK_CREDS;\n\t}\n\tif (!(req->work.flags & IO_WQ_WORK_FS) &&\n\t    (def->work_flags & IO_WQ_WORK_FS)) {\n\t\tspin_lock(&current->fs->lock);\n\t\tif (!current->fs->in_exec) {\n\t\t\treq->work.identity->fs = current->fs;\n\t\t\treq->work.identity->fs->users++;\n\t\t\treq->work.flags |= IO_WQ_WORK_FS;\n\t\t} else {\n\t\t\treq->work.flags |= IO_WQ_WORK_CANCEL;\n\t\t}\n\t\tspin_unlock(&current->fs->lock);\n\t}\n\tif (def->needs_fsize)\n\t\treq->work.identity->fsize = rlimit(RLIMIT_FSIZE);\n\telse\n\t\treq->work.identity->fsize = RLIM_INFINITY;\n}\n\nstatic void io_prep_async_link(struct io_kiocb *req)\n{\n\tstruct io_kiocb *cur;\n\n\tio_prep_async_work(req);\n\tif (req->flags & REQ_F_LINK_HEAD)\n\t\tlist_for_each_entry(cur, &req->link_list, link_list)\n\t\t\tio_prep_async_work(cur);\n}\n\nstatic struct io_kiocb *__io_queue_async_work(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_kiocb *link = io_prep_linked_timeout(req);\n\n\ttrace_io_uring_queue_async_work(ctx, io_wq_is_hashed(&req->work), req,\n\t\t\t\t\t&req->work, req->flags);\n\tio_wq_enqueue(ctx->io_wq, &req->work);\n\treturn link;\n}\n\nstatic void io_queue_async_work(struct io_kiocb *req)\n{\n\tstruct io_kiocb *link;\n\n\t/* init ->work of the whole link before punting */\n\tio_prep_async_link(req);\n\tlink = __io_queue_async_work(req);\n\n\tif (link)\n\t\tio_queue_linked_timeout(link);\n}\n\nstatic void io_kill_timeout(struct io_kiocb *req)\n{\n\tstruct io_timeout_data *io = req->async_data;\n\tint ret;\n\n\tret = hrtimer_try_to_cancel(&io->timer);\n\tif (ret != -1) {\n\t\tatomic_set(&req->ctx->cq_timeouts,\n\t\t\tatomic_read(&req->ctx->cq_timeouts) + 1);\n\t\tlist_del_init(&req->timeout.list);\n\t\tio_cqring_fill_event(req, 0);\n\t\tio_put_req_deferred(req, 1);\n\t}\n}\n\nstatic bool io_task_match(struct io_kiocb *req, struct task_struct *tsk)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!tsk || req->task == tsk)\n\t\treturn true;\n\tif (ctx->flags & IORING_SETUP_SQPOLL) {\n\t\tif (ctx->sq_data && req->task == ctx->sq_data->thread)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n/*\n * Returns true if we found and killed one or more timeouts\n */\nstatic bool io_kill_timeouts(struct io_ring_ctx *ctx, struct task_struct *tsk)\n{\n\tstruct io_kiocb *req, *tmp;\n\tint canceled = 0;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tlist_for_each_entry_safe(req, tmp, &ctx->timeout_list, timeout.list) {\n\t\tif (io_task_match(req, tsk)) {\n\t\t\tio_kill_timeout(req);\n\t\t\tcanceled++;\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn canceled != 0;\n}\n\nstatic void __io_queue_deferred(struct io_ring_ctx *ctx)\n{\n\tdo {\n\t\tstruct io_defer_entry *de = list_first_entry(&ctx->defer_list,\n\t\t\t\t\t\tstruct io_defer_entry, list);\n\t\tstruct io_kiocb *link;\n\n\t\tif (req_need_defer(de->req, de->seq))\n\t\t\tbreak;\n\t\tlist_del_init(&de->list);\n\t\t/* punt-init is done before queueing for defer */\n\t\tlink = __io_queue_async_work(de->req);\n\t\tif (link) {\n\t\t\t__io_queue_linked_timeout(link);\n\t\t\t/* drop submission reference */\n\t\t\tio_put_req_deferred(link, 1);\n\t\t}\n\t\tkfree(de);\n\t} while (!list_empty(&ctx->defer_list));\n}\n\nstatic void io_flush_timeouts(struct io_ring_ctx *ctx)\n{\n\twhile (!list_empty(&ctx->timeout_list)) {\n\t\tstruct io_kiocb *req = list_first_entry(&ctx->timeout_list,\n\t\t\t\t\t\tstruct io_kiocb, timeout.list);\n\n\t\tif (io_is_timeout_noseq(req))\n\t\t\tbreak;\n\t\tif (req->timeout.target_seq != ctx->cached_cq_tail\n\t\t\t\t\t- atomic_read(&ctx->cq_timeouts))\n\t\t\tbreak;\n\n\t\tlist_del_init(&req->timeout.list);\n\t\tio_kill_timeout(req);\n\t}\n}\n\nstatic void io_commit_cqring(struct io_ring_ctx *ctx)\n{\n\tio_flush_timeouts(ctx);\n\t__io_commit_cqring(ctx);\n\n\tif (unlikely(!list_empty(&ctx->defer_list)))\n\t\t__io_queue_deferred(ctx);\n}\n\nstatic inline bool io_sqring_full(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *r = ctx->rings;\n\n\treturn READ_ONCE(r->sq.tail) - ctx->cached_sq_head == r->sq_ring_entries;\n}\n\nstatic struct io_uring_cqe *io_get_cqring(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *rings = ctx->rings;\n\tunsigned tail;\n\n\ttail = ctx->cached_cq_tail;\n\t/*\n\t * writes to the cq entry need to come after reading head; the\n\t * control dependency is enough as we're using WRITE_ONCE to\n\t * fill the cq entry\n\t */\n\tif (tail - READ_ONCE(rings->cq.head) == rings->cq_ring_entries)\n\t\treturn NULL;\n\n\tctx->cached_cq_tail++;\n\treturn &rings->cqes[tail & ctx->cq_mask];\n}\n\nstatic inline bool io_should_trigger_evfd(struct io_ring_ctx *ctx)\n{\n\tif (!ctx->cq_ev_fd)\n\t\treturn false;\n\tif (READ_ONCE(ctx->rings->cq_flags) & IORING_CQ_EVENTFD_DISABLED)\n\t\treturn false;\n\tif (!ctx->eventfd_async)\n\t\treturn true;\n\treturn io_wq_current_is_worker();\n}\n\nstatic void io_cqring_ev_posted(struct io_ring_ctx *ctx)\n{\n\tif (waitqueue_active(&ctx->wait))\n\t\twake_up(&ctx->wait);\n\tif (ctx->sq_data && waitqueue_active(&ctx->sq_data->wait))\n\t\twake_up(&ctx->sq_data->wait);\n\tif (io_should_trigger_evfd(ctx))\n\t\teventfd_signal(ctx->cq_ev_fd, 1);\n}\n\nstatic void io_cqring_mark_overflow(struct io_ring_ctx *ctx)\n{\n\tif (list_empty(&ctx->cq_overflow_list)) {\n\t\tclear_bit(0, &ctx->sq_check_overflow);\n\t\tclear_bit(0, &ctx->cq_check_overflow);\n\t\tctx->rings->sq_flags &= ~IORING_SQ_CQ_OVERFLOW;\n\t}\n}\n\nstatic inline bool io_match_files(struct io_kiocb *req,\n\t\t\t\t       struct files_struct *files)\n{\n\tif (!files)\n\t\treturn true;\n\tif ((req->flags & REQ_F_WORK_INITIALIZED) &&\n\t    (req->work.flags & IO_WQ_WORK_FILES))\n\t\treturn req->work.identity->files == files;\n\treturn false;\n}\n\n/* Returns true if there are no backlogged entries after the flush */\nstatic bool io_cqring_overflow_flush(struct io_ring_ctx *ctx, bool force,\n\t\t\t\t     struct task_struct *tsk,\n\t\t\t\t     struct files_struct *files)\n{\n\tstruct io_rings *rings = ctx->rings;\n\tstruct io_kiocb *req, *tmp;\n\tstruct io_uring_cqe *cqe;\n\tunsigned long flags;\n\tLIST_HEAD(list);\n\n\tif (!force) {\n\t\tif (list_empty_careful(&ctx->cq_overflow_list))\n\t\t\treturn true;\n\t\tif ((ctx->cached_cq_tail - READ_ONCE(rings->cq.head) ==\n\t\t    rings->cq_ring_entries))\n\t\t\treturn false;\n\t}\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\n\t/* if force is set, the ring is going away. always drop after that */\n\tif (force)\n\t\tctx->cq_overflow_flushed = 1;\n\n\tcqe = NULL;\n\tlist_for_each_entry_safe(req, tmp, &ctx->cq_overflow_list, compl.list) {\n\t\tif (tsk && req->task != tsk)\n\t\t\tcontinue;\n\t\tif (!io_match_files(req, files))\n\t\t\tcontinue;\n\n\t\tcqe = io_get_cqring(ctx);\n\t\tif (!cqe && !force)\n\t\t\tbreak;\n\n\t\tlist_move(&req->compl.list, &list);\n\t\tif (cqe) {\n\t\t\tWRITE_ONCE(cqe->user_data, req->user_data);\n\t\t\tWRITE_ONCE(cqe->res, req->result);\n\t\t\tWRITE_ONCE(cqe->flags, req->compl.cflags);\n\t\t} else {\n\t\t\tWRITE_ONCE(ctx->rings->cq_overflow,\n\t\t\t\tatomic_inc_return(&ctx->cached_cq_overflow));\n\t\t}\n\t}\n\n\tio_commit_cqring(ctx);\n\tio_cqring_mark_overflow(ctx);\n\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\tio_cqring_ev_posted(ctx);\n\n\twhile (!list_empty(&list)) {\n\t\treq = list_first_entry(&list, struct io_kiocb, compl.list);\n\t\tlist_del(&req->compl.list);\n\t\tio_put_req(req);\n\t}\n\n\treturn cqe != NULL;\n}\n\nstatic void __io_cqring_fill_event(struct io_kiocb *req, long res, long cflags)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_uring_cqe *cqe;\n\n\ttrace_io_uring_complete(ctx, req->user_data, res);\n\n\t/*\n\t * If we can't get a cq entry, userspace overflowed the\n\t * submission (by quite a lot). Increment the overflow count in\n\t * the ring.\n\t */\n\tcqe = io_get_cqring(ctx);\n\tif (likely(cqe)) {\n\t\tWRITE_ONCE(cqe->user_data, req->user_data);\n\t\tWRITE_ONCE(cqe->res, res);\n\t\tWRITE_ONCE(cqe->flags, cflags);\n\t} else if (ctx->cq_overflow_flushed || req->task->io_uring->in_idle) {\n\t\t/*\n\t\t * If we're in ring overflow flush mode, or in task cancel mode,\n\t\t * then we cannot store the request for later flushing, we need\n\t\t * to drop it on the floor.\n\t\t */\n\t\tWRITE_ONCE(ctx->rings->cq_overflow,\n\t\t\t\tatomic_inc_return(&ctx->cached_cq_overflow));\n\t} else {\n\t\tif (list_empty(&ctx->cq_overflow_list)) {\n\t\t\tset_bit(0, &ctx->sq_check_overflow);\n\t\t\tset_bit(0, &ctx->cq_check_overflow);\n\t\t\tctx->rings->sq_flags |= IORING_SQ_CQ_OVERFLOW;\n\t\t}\n\t\tio_clean_op(req);\n\t\treq->result = res;\n\t\treq->compl.cflags = cflags;\n\t\trefcount_inc(&req->refs);\n\t\tlist_add_tail(&req->compl.list, &ctx->cq_overflow_list);\n\t}\n}\n\nstatic void io_cqring_fill_event(struct io_kiocb *req, long res)\n{\n\t__io_cqring_fill_event(req, res, 0);\n}\n\nstatic void io_cqring_add_event(struct io_kiocb *req, long res, long cflags)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\t__io_cqring_fill_event(req, res, cflags);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tio_cqring_ev_posted(ctx);\n}\n\nstatic void io_submit_flush_completions(struct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = cs->ctx;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\twhile (!list_empty(&cs->list)) {\n\t\tstruct io_kiocb *req;\n\n\t\treq = list_first_entry(&cs->list, struct io_kiocb, compl.list);\n\t\tlist_del(&req->compl.list);\n\t\t__io_cqring_fill_event(req, req->result, req->compl.cflags);\n\n\t\t/*\n\t\t * io_free_req() doesn't care about completion_lock unless one\n\t\t * of these flags is set. REQ_F_WORK_INITIALIZED is in the list\n\t\t * because of a potential deadlock with req->work.fs->lock\n\t\t */\n\t\tif (req->flags & (REQ_F_FAIL_LINK|REQ_F_LINK_TIMEOUT\n\t\t\t\t |REQ_F_WORK_INITIALIZED)) {\n\t\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\t\tio_put_req(req);\n\t\t\tspin_lock_irq(&ctx->completion_lock);\n\t\t} else {\n\t\t\tio_put_req(req);\n\t\t}\n\t}\n\tio_commit_cqring(ctx);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tio_cqring_ev_posted(ctx);\n\tcs->nr = 0;\n}\n\nstatic void __io_req_complete(struct io_kiocb *req, long res, unsigned cflags,\n\t\t\t      struct io_comp_state *cs)\n{\n\tif (!cs) {\n\t\tio_cqring_add_event(req, res, cflags);\n\t\tio_put_req(req);\n\t} else {\n\t\tio_clean_op(req);\n\t\treq->result = res;\n\t\treq->compl.cflags = cflags;\n\t\tlist_add_tail(&req->compl.list, &cs->list);\n\t\tif (++cs->nr >= 32)\n\t\t\tio_submit_flush_completions(cs);\n\t}\n}\n\nstatic void io_req_complete(struct io_kiocb *req, long res)\n{\n\t__io_req_complete(req, res, 0, NULL);\n}\n\nstatic inline bool io_is_fallback_req(struct io_kiocb *req)\n{\n\treturn req == (struct io_kiocb *)\n\t\t\t((unsigned long) req->ctx->fallback_req & ~1UL);\n}\n\nstatic struct io_kiocb *io_get_fallback_req(struct io_ring_ctx *ctx)\n{\n\tstruct io_kiocb *req;\n\n\treq = ctx->fallback_req;\n\tif (!test_and_set_bit_lock(0, (unsigned long *) &ctx->fallback_req))\n\t\treturn req;\n\n\treturn NULL;\n}\n\nstatic struct io_kiocb *io_alloc_req(struct io_ring_ctx *ctx,\n\t\t\t\t     struct io_submit_state *state)\n{\n\tif (!state->free_reqs) {\n\t\tgfp_t gfp = GFP_KERNEL | __GFP_NOWARN;\n\t\tsize_t sz;\n\t\tint ret;\n\n\t\tsz = min_t(size_t, state->ios_left, ARRAY_SIZE(state->reqs));\n\t\tret = kmem_cache_alloc_bulk(req_cachep, gfp, sz, state->reqs);\n\n\t\t/*\n\t\t * Bulk alloc is all-or-nothing. If we fail to get a batch,\n\t\t * retry single alloc to be on the safe side.\n\t\t */\n\t\tif (unlikely(ret <= 0)) {\n\t\t\tstate->reqs[0] = kmem_cache_alloc(req_cachep, gfp);\n\t\t\tif (!state->reqs[0])\n\t\t\t\tgoto fallback;\n\t\t\tret = 1;\n\t\t}\n\t\tstate->free_reqs = ret;\n\t}\n\n\tstate->free_reqs--;\n\treturn state->reqs[state->free_reqs];\nfallback:\n\treturn io_get_fallback_req(ctx);\n}\n\nstatic inline void io_put_file(struct io_kiocb *req, struct file *file,\n\t\t\t  bool fixed)\n{\n\tif (fixed)\n\t\tpercpu_ref_put(req->fixed_file_refs);\n\telse\n\t\tfput(file);\n}\n\nstatic void io_dismantle_req(struct io_kiocb *req)\n{\n\tio_clean_op(req);\n\n\tif (req->async_data)\n\t\tkfree(req->async_data);\n\tif (req->file)\n\t\tio_put_file(req, req->file, (req->flags & REQ_F_FIXED_FILE));\n\n\tio_req_clean_work(req);\n}\n\nstatic void __io_free_req(struct io_kiocb *req)\n{\n\tstruct io_uring_task *tctx;\n\tstruct io_ring_ctx *ctx;\n\n\tio_dismantle_req(req);\n\ttctx = req->task->io_uring;\n\tctx = req->ctx;\n\n\tatomic_long_inc(&tctx->req_complete);\n\tif (tctx->in_idle)\n\t\twake_up(&tctx->wait);\n\tput_task_struct(req->task);\n\n\tif (likely(!io_is_fallback_req(req)))\n\t\tkmem_cache_free(req_cachep, req);\n\telse\n\t\tclear_bit_unlock(0, (unsigned long *) &ctx->fallback_req);\n\tpercpu_ref_put(&ctx->refs);\n}\n\nstatic bool io_link_cancel_timeout(struct io_kiocb *req)\n{\n\tstruct io_timeout_data *io = req->async_data;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret;\n\n\tret = hrtimer_try_to_cancel(&io->timer);\n\tif (ret != -1) {\n\t\tio_cqring_fill_event(req, -ECANCELED);\n\t\tio_commit_cqring(ctx);\n\t\treq->flags &= ~REQ_F_LINK_HEAD;\n\t\tio_put_req_deferred(req, 1);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nstatic bool __io_kill_linked_timeout(struct io_kiocb *req)\n{\n\tstruct io_kiocb *link;\n\tbool wake_ev;\n\n\tif (list_empty(&req->link_list))\n\t\treturn false;\n\tlink = list_first_entry(&req->link_list, struct io_kiocb, link_list);\n\tif (link->opcode != IORING_OP_LINK_TIMEOUT)\n\t\treturn false;\n\n\tlist_del_init(&link->link_list);\n\twake_ev = io_link_cancel_timeout(link);\n\treq->flags &= ~REQ_F_LINK_TIMEOUT;\n\treturn wake_ev;\n}\n\nstatic void io_kill_linked_timeout(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\tbool wake_ev;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\twake_ev = __io_kill_linked_timeout(req);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tif (wake_ev)\n\t\tio_cqring_ev_posted(ctx);\n}\n\nstatic struct io_kiocb *io_req_link_next(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt;\n\n\t/*\n\t * The list should never be empty when we are called here. But could\n\t * potentially happen if the chain is messed up, check to be on the\n\t * safe side.\n\t */\n\tif (unlikely(list_empty(&req->link_list)))\n\t\treturn NULL;\n\n\tnxt = list_first_entry(&req->link_list, struct io_kiocb, link_list);\n\tlist_del_init(&req->link_list);\n\tif (!list_empty(&nxt->link_list))\n\t\tnxt->flags |= REQ_F_LINK_HEAD;\n\treturn nxt;\n}\n\n/*\n * Called if REQ_F_LINK_HEAD is set, and we fail the head request\n */\nstatic void __io_fail_links(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\twhile (!list_empty(&req->link_list)) {\n\t\tstruct io_kiocb *link = list_first_entry(&req->link_list,\n\t\t\t\t\t\tstruct io_kiocb, link_list);\n\n\t\tlist_del_init(&link->link_list);\n\t\ttrace_io_uring_fail_link(req, link);\n\n\t\tio_cqring_fill_event(link, -ECANCELED);\n\n\t\t/*\n\t\t * It's ok to free under spinlock as they're not linked anymore,\n\t\t * but avoid REQ_F_WORK_INITIALIZED because it may deadlock on\n\t\t * work.fs->lock.\n\t\t */\n\t\tif (link->flags & REQ_F_WORK_INITIALIZED)\n\t\t\tio_put_req_deferred(link, 2);\n\t\telse\n\t\t\tio_double_put_req(link);\n\t}\n\n\tio_commit_cqring(ctx);\n}\n\nstatic void io_fail_links(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\t__io_fail_links(req);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tio_cqring_ev_posted(ctx);\n}\n\nstatic struct io_kiocb *__io_req_find_next(struct io_kiocb *req)\n{\n\treq->flags &= ~REQ_F_LINK_HEAD;\n\tif (req->flags & REQ_F_LINK_TIMEOUT)\n\t\tio_kill_linked_timeout(req);\n\n\t/*\n\t * If LINK is set, we have dependent requests in this chain. If we\n\t * didn't fail this request, queue the first one up, moving any other\n\t * dependencies to the next request. In case of failure, fail the rest\n\t * of the chain.\n\t */\n\tif (likely(!(req->flags & REQ_F_FAIL_LINK)))\n\t\treturn io_req_link_next(req);\n\tio_fail_links(req);\n\treturn NULL;\n}\n\nstatic struct io_kiocb *io_req_find_next(struct io_kiocb *req)\n{\n\tif (likely(!(req->flags & REQ_F_LINK_HEAD)))\n\t\treturn NULL;\n\treturn __io_req_find_next(req);\n}\n\nstatic int io_req_task_work_add(struct io_kiocb *req, bool twa_signal_ok)\n{\n\tstruct task_struct *tsk = req->task;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret, notify;\n\n\tif (tsk->flags & PF_EXITING)\n\t\treturn -ESRCH;\n\n\t/*\n\t * SQPOLL kernel thread doesn't need notification, just a wakeup. For\n\t * all other cases, use TWA_SIGNAL unconditionally to ensure we're\n\t * processing task_work. There's no reliable way to tell if TWA_RESUME\n\t * will do the job.\n\t */\n\tnotify = 0;\n\tif (!(ctx->flags & IORING_SETUP_SQPOLL) && twa_signal_ok)\n\t\tnotify = TWA_SIGNAL;\n\n\tret = task_work_add(tsk, &req->task_work, notify);\n\tif (!ret)\n\t\twake_up_process(tsk);\n\n\treturn ret;\n}\n\nstatic void __io_req_task_cancel(struct io_kiocb *req, int error)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tio_cqring_fill_event(req, error);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tio_cqring_ev_posted(ctx);\n\treq_set_fail_links(req);\n\tio_double_put_req(req);\n}\n\nstatic void io_req_task_cancel(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\t__io_req_task_cancel(req, -ECANCELED);\n\tpercpu_ref_put(&ctx->refs);\n}\n\nstatic void __io_req_task_submit(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!__io_sq_thread_acquire_mm(ctx)) {\n\t\tmutex_lock(&ctx->uring_lock);\n\t\t__io_queue_sqe(req, NULL);\n\t\tmutex_unlock(&ctx->uring_lock);\n\t} else {\n\t\t__io_req_task_cancel(req, -EFAULT);\n\t}\n}\n\nstatic void io_req_task_submit(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\t__io_req_task_submit(req);\n\tpercpu_ref_put(&ctx->refs);\n}\n\nstatic void io_req_task_queue(struct io_kiocb *req)\n{\n\tint ret;\n\n\tinit_task_work(&req->task_work, io_req_task_submit);\n\tpercpu_ref_get(&req->ctx->refs);\n\n\tret = io_req_task_work_add(req, true);\n\tif (unlikely(ret)) {\n\t\tstruct task_struct *tsk;\n\n\t\tinit_task_work(&req->task_work, io_req_task_cancel);\n\t\ttsk = io_wq_get_task(req->ctx->io_wq);\n\t\ttask_work_add(tsk, &req->task_work, 0);\n\t\twake_up_process(tsk);\n\t}\n}\n\nstatic void io_queue_next(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt = io_req_find_next(req);\n\n\tif (nxt)\n\t\tio_req_task_queue(nxt);\n}\n\nstatic void io_free_req(struct io_kiocb *req)\n{\n\tio_queue_next(req);\n\t__io_free_req(req);\n}\n\nstruct req_batch {\n\tvoid *reqs[IO_IOPOLL_BATCH];\n\tint to_free;\n\n\tstruct task_struct\t*task;\n\tint\t\t\ttask_refs;\n};\n\nstatic inline void io_init_req_batch(struct req_batch *rb)\n{\n\trb->to_free = 0;\n\trb->task_refs = 0;\n\trb->task = NULL;\n}\n\nstatic void __io_req_free_batch_flush(struct io_ring_ctx *ctx,\n\t\t\t\t      struct req_batch *rb)\n{\n\tkmem_cache_free_bulk(req_cachep, rb->to_free, rb->reqs);\n\tpercpu_ref_put_many(&ctx->refs, rb->to_free);\n\trb->to_free = 0;\n}\n\nstatic void io_req_free_batch_finish(struct io_ring_ctx *ctx,\n\t\t\t\t     struct req_batch *rb)\n{\n\tif (rb->to_free)\n\t\t__io_req_free_batch_flush(ctx, rb);\n\tif (rb->task) {\n\t\tatomic_long_add(rb->task_refs, &rb->task->io_uring->req_complete);\n\t\tput_task_struct_many(rb->task, rb->task_refs);\n\t\trb->task = NULL;\n\t}\n}\n\nstatic void io_req_free_batch(struct req_batch *rb, struct io_kiocb *req)\n{\n\tif (unlikely(io_is_fallback_req(req))) {\n\t\tio_free_req(req);\n\t\treturn;\n\t}\n\tif (req->flags & REQ_F_LINK_HEAD)\n\t\tio_queue_next(req);\n\n\tif (req->task != rb->task) {\n\t\tif (rb->task) {\n\t\t\tatomic_long_add(rb->task_refs, &rb->task->io_uring->req_complete);\n\t\t\tput_task_struct_many(rb->task, rb->task_refs);\n\t\t}\n\t\trb->task = req->task;\n\t\trb->task_refs = 0;\n\t}\n\trb->task_refs++;\n\n\tio_dismantle_req(req);\n\trb->reqs[rb->to_free++] = req;\n\tif (unlikely(rb->to_free == ARRAY_SIZE(rb->reqs)))\n\t\t__io_req_free_batch_flush(req->ctx, rb);\n}\n\n/*\n * Drop reference to request, return next in chain (if there is one) if this\n * was the last reference to this request.\n */\nstatic struct io_kiocb *io_put_req_find_next(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt = NULL;\n\n\tif (refcount_dec_and_test(&req->refs)) {\n\t\tnxt = io_req_find_next(req);\n\t\t__io_free_req(req);\n\t}\n\treturn nxt;\n}\n\nstatic void io_put_req(struct io_kiocb *req)\n{\n\tif (refcount_dec_and_test(&req->refs))\n\t\tio_free_req(req);\n}\n\nstatic void io_put_req_deferred_cb(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\n\tio_free_req(req);\n}\n\nstatic void io_free_req_deferred(struct io_kiocb *req)\n{\n\tint ret;\n\n\tinit_task_work(&req->task_work, io_put_req_deferred_cb);\n\tret = io_req_task_work_add(req, true);\n\tif (unlikely(ret)) {\n\t\tstruct task_struct *tsk;\n\n\t\ttsk = io_wq_get_task(req->ctx->io_wq);\n\t\ttask_work_add(tsk, &req->task_work, 0);\n\t\twake_up_process(tsk);\n\t}\n}\n\nstatic inline void io_put_req_deferred(struct io_kiocb *req, int refs)\n{\n\tif (refcount_sub_and_test(refs, &req->refs))\n\t\tio_free_req_deferred(req);\n}\n\nstatic struct io_wq_work *io_steal_work(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt;\n\n\t/*\n\t * A ref is owned by io-wq in which context we're. So, if that's the\n\t * last one, it's safe to steal next work. False negatives are Ok,\n\t * it just will be re-punted async in io_put_work()\n\t */\n\tif (refcount_read(&req->refs) != 1)\n\t\treturn NULL;\n\n\tnxt = io_req_find_next(req);\n\treturn nxt ? &nxt->work : NULL;\n}\n\nstatic void io_double_put_req(struct io_kiocb *req)\n{\n\t/* drop both submit and complete references */\n\tif (refcount_sub_and_test(2, &req->refs))\n\t\tio_free_req(req);\n}\n\nstatic unsigned io_cqring_events(struct io_ring_ctx *ctx, bool noflush)\n{\n\tstruct io_rings *rings = ctx->rings;\n\n\tif (test_bit(0, &ctx->cq_check_overflow)) {\n\t\t/*\n\t\t * noflush == true is from the waitqueue handler, just ensure\n\t\t * we wake up the task, and the next invocation will flush the\n\t\t * entries. We cannot safely to it from here.\n\t\t */\n\t\tif (noflush && !list_empty(&ctx->cq_overflow_list))\n\t\t\treturn -1U;\n\n\t\tio_cqring_overflow_flush(ctx, false, NULL, NULL);\n\t}\n\n\t/* See comment at the top of this file */\n\tsmp_rmb();\n\treturn ctx->cached_cq_tail - READ_ONCE(rings->cq.head);\n}\n\nstatic inline unsigned int io_sqring_entries(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *rings = ctx->rings;\n\n\t/* make sure SQ entry isn't read before tail */\n\treturn smp_load_acquire(&rings->sq.tail) - ctx->cached_sq_head;\n}\n\nstatic unsigned int io_put_kbuf(struct io_kiocb *req, struct io_buffer *kbuf)\n{\n\tunsigned int cflags;\n\n\tcflags = kbuf->bid << IORING_CQE_BUFFER_SHIFT;\n\tcflags |= IORING_CQE_F_BUFFER;\n\treq->flags &= ~REQ_F_BUFFER_SELECTED;\n\tkfree(kbuf);\n\treturn cflags;\n}\n\nstatic inline unsigned int io_put_rw_kbuf(struct io_kiocb *req)\n{\n\tstruct io_buffer *kbuf;\n\n\tkbuf = (struct io_buffer *) (unsigned long) req->rw.addr;\n\treturn io_put_kbuf(req, kbuf);\n}\n\nstatic inline bool io_run_task_work(void)\n{\n\t/*\n\t * Not safe to run on exiting task, and the task_work handling will\n\t * not add work to such a task.\n\t */\n\tif (unlikely(current->flags & PF_EXITING))\n\t\treturn false;\n\tif (current->task_works) {\n\t\t__set_current_state(TASK_RUNNING);\n\t\ttask_work_run();\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nstatic void io_iopoll_queue(struct list_head *again)\n{\n\tstruct io_kiocb *req;\n\n\tdo {\n\t\treq = list_first_entry(again, struct io_kiocb, inflight_entry);\n\t\tlist_del(&req->inflight_entry);\n\t\t__io_complete_rw(req, -EAGAIN, 0, NULL);\n\t} while (!list_empty(again));\n}\n\n/*\n * Find and free completed poll iocbs\n */\nstatic void io_iopoll_complete(struct io_ring_ctx *ctx, unsigned int *nr_events,\n\t\t\t       struct list_head *done)\n{\n\tstruct req_batch rb;\n\tstruct io_kiocb *req;\n\tLIST_HEAD(again);\n\n\t/* order with ->result store in io_complete_rw_iopoll() */\n\tsmp_rmb();\n\n\tio_init_req_batch(&rb);\n\twhile (!list_empty(done)) {\n\t\tint cflags = 0;\n\n\t\treq = list_first_entry(done, struct io_kiocb, inflight_entry);\n\t\tif (READ_ONCE(req->result) == -EAGAIN) {\n\t\t\treq->result = 0;\n\t\t\treq->iopoll_completed = 0;\n\t\t\tlist_move_tail(&req->inflight_entry, &again);\n\t\t\tcontinue;\n\t\t}\n\t\tlist_del(&req->inflight_entry);\n\n\t\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\t\tcflags = io_put_rw_kbuf(req);\n\n\t\t__io_cqring_fill_event(req, req->result, cflags);\n\t\t(*nr_events)++;\n\n\t\tif (refcount_dec_and_test(&req->refs))\n\t\t\tio_req_free_batch(&rb, req);\n\t}\n\n\tio_commit_cqring(ctx);\n\tif (ctx->flags & IORING_SETUP_SQPOLL)\n\t\tio_cqring_ev_posted(ctx);\n\tio_req_free_batch_finish(ctx, &rb);\n\n\tif (!list_empty(&again))\n\t\tio_iopoll_queue(&again);\n}\n\nstatic int io_do_iopoll(struct io_ring_ctx *ctx, unsigned int *nr_events,\n\t\t\tlong min)\n{\n\tstruct io_kiocb *req, *tmp;\n\tLIST_HEAD(done);\n\tbool spin;\n\tint ret;\n\n\t/*\n\t * Only spin for completions if we don't have multiple devices hanging\n\t * off our complete list, and we're under the requested amount.\n\t */\n\tspin = !ctx->poll_multi_file && *nr_events < min;\n\n\tret = 0;\n\tlist_for_each_entry_safe(req, tmp, &ctx->iopoll_list, inflight_entry) {\n\t\tstruct kiocb *kiocb = &req->rw.kiocb;\n\n\t\t/*\n\t\t * Move completed and retryable entries to our local lists.\n\t\t * If we find a request that requires polling, break out\n\t\t * and complete those lists first, if we have entries there.\n\t\t */\n\t\tif (READ_ONCE(req->iopoll_completed)) {\n\t\t\tlist_move_tail(&req->inflight_entry, &done);\n\t\t\tcontinue;\n\t\t}\n\t\tif (!list_empty(&done))\n\t\t\tbreak;\n\n\t\tret = kiocb->ki_filp->f_op->iopoll(kiocb, spin);\n\t\tif (ret < 0)\n\t\t\tbreak;\n\n\t\t/* iopoll may have completed current req */\n\t\tif (READ_ONCE(req->iopoll_completed))\n\t\t\tlist_move_tail(&req->inflight_entry, &done);\n\n\t\tif (ret && spin)\n\t\t\tspin = false;\n\t\tret = 0;\n\t}\n\n\tif (!list_empty(&done))\n\t\tio_iopoll_complete(ctx, nr_events, &done);\n\n\treturn ret;\n}\n\n/*\n * Poll for a minimum of 'min' events. Note that if min == 0 we consider that a\n * non-spinning poll check - we'll still enter the driver poll loop, but only\n * as a non-spinning completion check.\n */\nstatic int io_iopoll_getevents(struct io_ring_ctx *ctx, unsigned int *nr_events,\n\t\t\t\tlong min)\n{\n\twhile (!list_empty(&ctx->iopoll_list) && !need_resched()) {\n\t\tint ret;\n\n\t\tret = io_do_iopoll(ctx, nr_events, min);\n\t\tif (ret < 0)\n\t\t\treturn ret;\n\t\tif (*nr_events >= min)\n\t\t\treturn 0;\n\t}\n\n\treturn 1;\n}\n\n/*\n * We can't just wait for polled events to come to us, we have to actively\n * find and complete them.\n */\nstatic void io_iopoll_try_reap_events(struct io_ring_ctx *ctx)\n{\n\tif (!(ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn;\n\n\tmutex_lock(&ctx->uring_lock);\n\twhile (!list_empty(&ctx->iopoll_list)) {\n\t\tunsigned int nr_events = 0;\n\n\t\tio_do_iopoll(ctx, &nr_events, 0);\n\n\t\t/* let it sleep and repeat later if can't complete a request */\n\t\tif (nr_events == 0)\n\t\t\tbreak;\n\t\t/*\n\t\t * Ensure we allow local-to-the-cpu processing to take place,\n\t\t * in this case we need to ensure that we reap all events.\n\t\t * Also let task_work, etc. to progress by releasing the mutex\n\t\t */\n\t\tif (need_resched()) {\n\t\t\tmutex_unlock(&ctx->uring_lock);\n\t\t\tcond_resched();\n\t\t\tmutex_lock(&ctx->uring_lock);\n\t\t}\n\t}\n\tmutex_unlock(&ctx->uring_lock);\n}\n\nstatic int io_iopoll_check(struct io_ring_ctx *ctx, long min)\n{\n\tunsigned int nr_events = 0;\n\tint iters = 0, ret = 0;\n\n\t/*\n\t * We disallow the app entering submit/complete with polling, but we\n\t * still need to lock the ring to prevent racing with polled issue\n\t * that got punted to a workqueue.\n\t */\n\tmutex_lock(&ctx->uring_lock);\n\tdo {\n\t\t/*\n\t\t * Don't enter poll loop if we already have events pending.\n\t\t * If we do, we can potentially be spinning for commands that\n\t\t * already triggered a CQE (eg in error).\n\t\t */\n\t\tif (io_cqring_events(ctx, false))\n\t\t\tbreak;\n\n\t\t/*\n\t\t * If a submit got punted to a workqueue, we can have the\n\t\t * application entering polling for a command before it gets\n\t\t * issued. That app will hold the uring_lock for the duration\n\t\t * of the poll right here, so we need to take a breather every\n\t\t * now and then to ensure that the issue has a chance to add\n\t\t * the poll to the issued list. Otherwise we can spin here\n\t\t * forever, while the workqueue is stuck trying to acquire the\n\t\t * very same mutex.\n\t\t */\n\t\tif (!(++iters & 7)) {\n\t\t\tmutex_unlock(&ctx->uring_lock);\n\t\t\tio_run_task_work();\n\t\t\tmutex_lock(&ctx->uring_lock);\n\t\t}\n\n\t\tret = io_iopoll_getevents(ctx, &nr_events, min);\n\t\tif (ret <= 0)\n\t\t\tbreak;\n\t\tret = 0;\n\t} while (min && !nr_events && !need_resched());\n\n\tmutex_unlock(&ctx->uring_lock);\n\treturn ret;\n}\n\nstatic void kiocb_end_write(struct io_kiocb *req)\n{\n\t/*\n\t * Tell lockdep we inherited freeze protection from submission\n\t * thread.\n\t */\n\tif (req->flags & REQ_F_ISREG) {\n\t\tstruct inode *inode = file_inode(req->file);\n\n\t\t__sb_writers_acquired(inode->i_sb, SB_FREEZE_WRITE);\n\t}\n\tfile_end_write(req->file);\n}\n\nstatic void io_complete_rw_common(struct kiocb *kiocb, long res,\n\t\t\t\t  struct io_comp_state *cs)\n{\n\tstruct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);\n\tint cflags = 0;\n\n\tif (kiocb->ki_flags & IOCB_WRITE)\n\t\tkiocb_end_write(req);\n\n\tif (res != req->result)\n\t\treq_set_fail_links(req);\n\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\tcflags = io_put_rw_kbuf(req);\n\t__io_req_complete(req, res, cflags, cs);\n}\n\n#ifdef CONFIG_BLOCK\nstatic bool io_resubmit_prep(struct io_kiocb *req, int error)\n{\n\tstruct iovec inline_vecs[UIO_FASTIOV], *iovec = inline_vecs;\n\tssize_t ret = -ECANCELED;\n\tstruct iov_iter iter;\n\tint rw;\n\n\tif (error) {\n\t\tret = error;\n\t\tgoto end_req;\n\t}\n\n\tswitch (req->opcode) {\n\tcase IORING_OP_READV:\n\tcase IORING_OP_READ_FIXED:\n\tcase IORING_OP_READ:\n\t\trw = READ;\n\t\tbreak;\n\tcase IORING_OP_WRITEV:\n\tcase IORING_OP_WRITE_FIXED:\n\tcase IORING_OP_WRITE:\n\t\trw = WRITE;\n\t\tbreak;\n\tdefault:\n\t\tprintk_once(KERN_WARNING \"io_uring: bad opcode in resubmit %d\\n\",\n\t\t\t\treq->opcode);\n\t\tgoto end_req;\n\t}\n\n\tif (!req->async_data) {\n\t\tret = io_import_iovec(rw, req, &iovec, &iter, false);\n\t\tif (ret < 0)\n\t\t\tgoto end_req;\n\t\tret = io_setup_async_rw(req, iovec, inline_vecs, &iter, false);\n\t\tif (!ret)\n\t\t\treturn true;\n\t\tkfree(iovec);\n\t} else {\n\t\treturn true;\n\t}\nend_req:\n\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn false;\n}\n#endif\n\nstatic bool io_rw_reissue(struct io_kiocb *req, long res)\n{\n#ifdef CONFIG_BLOCK\n\tumode_t mode = file_inode(req->file)->i_mode;\n\tint ret;\n\n\tif (!S_ISBLK(mode) && !S_ISREG(mode))\n\t\treturn false;\n\tif ((res != -EAGAIN && res != -EOPNOTSUPP) || io_wq_current_is_worker())\n\t\treturn false;\n\n\tret = io_sq_thread_acquire_mm(req->ctx, req);\n\n\tif (io_resubmit_prep(req, ret)) {\n\t\trefcount_inc(&req->refs);\n\t\tio_queue_async_work(req);\n\t\treturn true;\n\t}\n\n#endif\n\treturn false;\n}\n\nstatic void __io_complete_rw(struct io_kiocb *req, long res, long res2,\n\t\t\t     struct io_comp_state *cs)\n{\n\tif (!io_rw_reissue(req, res))\n\t\tio_complete_rw_common(&req->rw.kiocb, res, cs);\n}\n\nstatic void io_complete_rw(struct kiocb *kiocb, long res, long res2)\n{\n\tstruct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);\n\n\t__io_complete_rw(req, res, res2, NULL);\n}\n\nstatic void io_complete_rw_iopoll(struct kiocb *kiocb, long res, long res2)\n{\n\tstruct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);\n\n\tif (kiocb->ki_flags & IOCB_WRITE)\n\t\tkiocb_end_write(req);\n\n\tif (res != -EAGAIN && res != req->result)\n\t\treq_set_fail_links(req);\n\n\tWRITE_ONCE(req->result, res);\n\t/* order with io_poll_complete() checking ->result */\n\tsmp_wmb();\n\tWRITE_ONCE(req->iopoll_completed, 1);\n}\n\n/*\n * After the iocb has been issued, it's safe to be found on the poll list.\n * Adding the kiocb to the list AFTER submission ensures that we don't\n * find it from a io_iopoll_getevents() thread before the issuer is done\n * accessing the kiocb cookie.\n */\nstatic void io_iopoll_req_issued(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\t/*\n\t * Track whether we have multiple files in our lists. This will impact\n\t * how we do polling eventually, not spinning if we're on potentially\n\t * different devices.\n\t */\n\tif (list_empty(&ctx->iopoll_list)) {\n\t\tctx->poll_multi_file = false;\n\t} else if (!ctx->poll_multi_file) {\n\t\tstruct io_kiocb *list_req;\n\n\t\tlist_req = list_first_entry(&ctx->iopoll_list, struct io_kiocb,\n\t\t\t\t\t\tinflight_entry);\n\t\tif (list_req->file != req->file)\n\t\t\tctx->poll_multi_file = true;\n\t}\n\n\t/*\n\t * For fast devices, IO may have already completed. If it has, add\n\t * it to the front so we find it first.\n\t */\n\tif (READ_ONCE(req->iopoll_completed))\n\t\tlist_add(&req->inflight_entry, &ctx->iopoll_list);\n\telse\n\t\tlist_add_tail(&req->inflight_entry, &ctx->iopoll_list);\n\n\tif ((ctx->flags & IORING_SETUP_SQPOLL) &&\n\t    wq_has_sleeper(&ctx->sq_data->wait))\n\t\twake_up(&ctx->sq_data->wait);\n}\n\nstatic void __io_state_file_put(struct io_submit_state *state)\n{\n\tif (state->has_refs)\n\t\tfput_many(state->file, state->has_refs);\n\tstate->file = NULL;\n}\n\nstatic inline void io_state_file_put(struct io_submit_state *state)\n{\n\tif (state->file)\n\t\t__io_state_file_put(state);\n}\n\n/*\n * Get as many references to a file as we have IOs left in this submission,\n * assuming most submissions are for one file, or at least that each file\n * has more than one submission.\n */\nstatic struct file *__io_file_get(struct io_submit_state *state, int fd)\n{\n\tif (!state)\n\t\treturn fget(fd);\n\n\tif (state->file) {\n\t\tif (state->fd == fd) {\n\t\t\tstate->has_refs--;\n\t\t\treturn state->file;\n\t\t}\n\t\t__io_state_file_put(state);\n\t}\n\tstate->file = fget_many(fd, state->ios_left);\n\tif (!state->file)\n\t\treturn NULL;\n\n\tstate->fd = fd;\n\tstate->has_refs = state->ios_left - 1;\n\treturn state->file;\n}\n\nstatic bool io_bdev_nowait(struct block_device *bdev)\n{\n#ifdef CONFIG_BLOCK\n\treturn !bdev || queue_is_mq(bdev_get_queue(bdev));\n#else\n\treturn true;\n#endif\n}\n\n/*\n * If we tracked the file through the SCM inflight mechanism, we could support\n * any file. For now, just ensure that anything potentially problematic is done\n * inline.\n */\nstatic bool io_file_supports_async(struct file *file, int rw)\n{\n\tumode_t mode = file_inode(file)->i_mode;\n\n\tif (S_ISBLK(mode)) {\n\t\tif (io_bdev_nowait(file->f_inode->i_bdev))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tif (S_ISCHR(mode) || S_ISSOCK(mode))\n\t\treturn true;\n\tif (S_ISREG(mode)) {\n\t\tif (io_bdev_nowait(file->f_inode->i_sb->s_bdev) &&\n\t\t    file->f_op != &io_uring_fops)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/* any ->read/write should understand O_NONBLOCK */\n\tif (file->f_flags & O_NONBLOCK)\n\t\treturn true;\n\n\tif (!(file->f_mode & FMODE_NOWAIT))\n\t\treturn false;\n\n\tif (rw == READ)\n\t\treturn file->f_op->read_iter != NULL;\n\n\treturn file->f_op->write_iter != NULL;\n}\n\nstatic int io_prep_rw(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct kiocb *kiocb = &req->rw.kiocb;\n\tunsigned ioprio;\n\tint ret;\n\n\tif (S_ISREG(file_inode(req->file)->i_mode))\n\t\treq->flags |= REQ_F_ISREG;\n\n\tkiocb->ki_pos = READ_ONCE(sqe->off);\n\tif (kiocb->ki_pos == -1 && !(req->file->f_mode & FMODE_STREAM)) {\n\t\treq->flags |= REQ_F_CUR_POS;\n\t\tkiocb->ki_pos = req->file->f_pos;\n\t}\n\tkiocb->ki_hint = ki_hint_validate(file_write_hint(kiocb->ki_filp));\n\tkiocb->ki_flags = iocb_flags(kiocb->ki_filp);\n\tret = kiocb_set_rw_flags(kiocb, READ_ONCE(sqe->rw_flags));\n\tif (unlikely(ret))\n\t\treturn ret;\n\n\tioprio = READ_ONCE(sqe->ioprio);\n\tif (ioprio) {\n\t\tret = ioprio_check_cap(ioprio);\n\t\tif (ret)\n\t\t\treturn ret;\n\n\t\tkiocb->ki_ioprio = ioprio;\n\t} else\n\t\tkiocb->ki_ioprio = get_current_ioprio();\n\n\t/* don't allow async punt if RWF_NOWAIT was requested */\n\tif (kiocb->ki_flags & IOCB_NOWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\n\tif (ctx->flags & IORING_SETUP_IOPOLL) {\n\t\tif (!(kiocb->ki_flags & IOCB_DIRECT) ||\n\t\t    !kiocb->ki_filp->f_op->iopoll)\n\t\t\treturn -EOPNOTSUPP;\n\n\t\tkiocb->ki_flags |= IOCB_HIPRI;\n\t\tkiocb->ki_complete = io_complete_rw_iopoll;\n\t\treq->iopoll_completed = 0;\n\t} else {\n\t\tif (kiocb->ki_flags & IOCB_HIPRI)\n\t\t\treturn -EINVAL;\n\t\tkiocb->ki_complete = io_complete_rw;\n\t}\n\n\treq->rw.addr = READ_ONCE(sqe->addr);\n\treq->rw.len = READ_ONCE(sqe->len);\n\treq->buf_index = READ_ONCE(sqe->buf_index);\n\treturn 0;\n}\n\nstatic inline void io_rw_done(struct kiocb *kiocb, ssize_t ret)\n{\n\tswitch (ret) {\n\tcase -EIOCBQUEUED:\n\t\tbreak;\n\tcase -ERESTARTSYS:\n\tcase -ERESTARTNOINTR:\n\tcase -ERESTARTNOHAND:\n\tcase -ERESTART_RESTARTBLOCK:\n\t\t/*\n\t\t * We can't just restart the syscall, since previously\n\t\t * submitted sqes may already be in progress. Just fail this\n\t\t * IO with EINTR.\n\t\t */\n\t\tret = -EINTR;\n\t\tfallthrough;\n\tdefault:\n\t\tkiocb->ki_complete(kiocb, ret, 0);\n\t}\n}\n\nstatic void kiocb_done(struct kiocb *kiocb, ssize_t ret,\n\t\t       struct io_comp_state *cs)\n{\n\tstruct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);\n\tstruct io_async_rw *io = req->async_data;\n\n\t/* add previously done IO, if any */\n\tif (io && io->bytes_done > 0) {\n\t\tif (ret < 0)\n\t\t\tret = io->bytes_done;\n\t\telse\n\t\t\tret += io->bytes_done;\n\t}\n\n\tif (req->flags & REQ_F_CUR_POS)\n\t\treq->file->f_pos = kiocb->ki_pos;\n\tif (ret >= 0 && kiocb->ki_complete == io_complete_rw)\n\t\t__io_complete_rw(req, ret, 0, cs);\n\telse\n\t\tio_rw_done(kiocb, ret);\n}\n\nstatic ssize_t io_import_fixed(struct io_kiocb *req, int rw,\n\t\t\t       struct iov_iter *iter)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tsize_t len = req->rw.len;\n\tstruct io_mapped_ubuf *imu;\n\tu16 index, buf_index = req->buf_index;\n\tsize_t offset;\n\tu64 buf_addr;\n\n\tif (unlikely(buf_index >= ctx->nr_user_bufs))\n\t\treturn -EFAULT;\n\tindex = array_index_nospec(buf_index, ctx->nr_user_bufs);\n\timu = &ctx->user_bufs[index];\n\tbuf_addr = req->rw.addr;\n\n\t/* overflow */\n\tif (buf_addr + len < buf_addr)\n\t\treturn -EFAULT;\n\t/* not inside the mapped region */\n\tif (buf_addr < imu->ubuf || buf_addr + len > imu->ubuf + imu->len)\n\t\treturn -EFAULT;\n\n\t/*\n\t * May not be a start of buffer, set size appropriately\n\t * and advance us to the beginning.\n\t */\n\toffset = buf_addr - imu->ubuf;\n\tiov_iter_bvec(iter, rw, imu->bvec, imu->nr_bvecs, offset + len);\n\n\tif (offset) {\n\t\t/*\n\t\t * Don't use iov_iter_advance() here, as it's really slow for\n\t\t * using the latter parts of a big fixed buffer - it iterates\n\t\t * over each segment manually. We can cheat a bit here, because\n\t\t * we know that:\n\t\t *\n\t\t * 1) it's a BVEC iter, we set it up\n\t\t * 2) all bvecs are PAGE_SIZE in size, except potentially the\n\t\t *    first and last bvec\n\t\t *\n\t\t * So just find our index, and adjust the iterator afterwards.\n\t\t * If the offset is within the first bvec (or the whole first\n\t\t * bvec, just use iov_iter_advance(). This makes it easier\n\t\t * since we can just skip the first segment, which may not\n\t\t * be PAGE_SIZE aligned.\n\t\t */\n\t\tconst struct bio_vec *bvec = imu->bvec;\n\n\t\tif (offset <= bvec->bv_len) {\n\t\t\tiov_iter_advance(iter, offset);\n\t\t} else {\n\t\t\tunsigned long seg_skip;\n\n\t\t\t/* skip first vec */\n\t\t\toffset -= bvec->bv_len;\n\t\t\tseg_skip = 1 + (offset >> PAGE_SHIFT);\n\n\t\t\titer->bvec = bvec + seg_skip;\n\t\t\titer->nr_segs -= seg_skip;\n\t\t\titer->count -= bvec->bv_len + offset;\n\t\t\titer->iov_offset = offset & ~PAGE_MASK;\n\t\t}\n\t}\n\n\treturn len;\n}\n\nstatic void io_ring_submit_unlock(struct io_ring_ctx *ctx, bool needs_lock)\n{\n\tif (needs_lock)\n\t\tmutex_unlock(&ctx->uring_lock);\n}\n\nstatic void io_ring_submit_lock(struct io_ring_ctx *ctx, bool needs_lock)\n{\n\t/*\n\t * \"Normal\" inline submissions always hold the uring_lock, since we\n\t * grab it from the system call. Same is true for the SQPOLL offload.\n\t * The only exception is when we've detached the request and issue it\n\t * from an async worker thread, grab the lock for that case.\n\t */\n\tif (needs_lock)\n\t\tmutex_lock(&ctx->uring_lock);\n}\n\nstatic struct io_buffer *io_buffer_select(struct io_kiocb *req, size_t *len,\n\t\t\t\t\t  int bgid, struct io_buffer *kbuf,\n\t\t\t\t\t  bool needs_lock)\n{\n\tstruct io_buffer *head;\n\n\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\treturn kbuf;\n\n\tio_ring_submit_lock(req->ctx, needs_lock);\n\n\tlockdep_assert_held(&req->ctx->uring_lock);\n\n\thead = idr_find(&req->ctx->io_buffer_idr, bgid);\n\tif (head) {\n\t\tif (!list_empty(&head->list)) {\n\t\t\tkbuf = list_last_entry(&head->list, struct io_buffer,\n\t\t\t\t\t\t\tlist);\n\t\t\tlist_del(&kbuf->list);\n\t\t} else {\n\t\t\tkbuf = head;\n\t\t\tidr_remove(&req->ctx->io_buffer_idr, bgid);\n\t\t}\n\t\tif (*len > kbuf->len)\n\t\t\t*len = kbuf->len;\n\t} else {\n\t\tkbuf = ERR_PTR(-ENOBUFS);\n\t}\n\n\tio_ring_submit_unlock(req->ctx, needs_lock);\n\n\treturn kbuf;\n}\n\nstatic void __user *io_rw_buffer_select(struct io_kiocb *req, size_t *len,\n\t\t\t\t\tbool needs_lock)\n{\n\tstruct io_buffer *kbuf;\n\tu16 bgid;\n\n\tkbuf = (struct io_buffer *) (unsigned long) req->rw.addr;\n\tbgid = req->buf_index;\n\tkbuf = io_buffer_select(req, len, bgid, kbuf, needs_lock);\n\tif (IS_ERR(kbuf))\n\t\treturn kbuf;\n\treq->rw.addr = (u64) (unsigned long) kbuf;\n\treq->flags |= REQ_F_BUFFER_SELECTED;\n\treturn u64_to_user_ptr(kbuf->addr);\n}\n\n#ifdef CONFIG_COMPAT\nstatic ssize_t io_compat_import(struct io_kiocb *req, struct iovec *iov,\n\t\t\t\tbool needs_lock)\n{\n\tstruct compat_iovec __user *uiov;\n\tcompat_ssize_t clen;\n\tvoid __user *buf;\n\tssize_t len;\n\n\tuiov = u64_to_user_ptr(req->rw.addr);\n\tif (!access_ok(uiov, sizeof(*uiov)))\n\t\treturn -EFAULT;\n\tif (__get_user(clen, &uiov->iov_len))\n\t\treturn -EFAULT;\n\tif (clen < 0)\n\t\treturn -EINVAL;\n\n\tlen = clen;\n\tbuf = io_rw_buffer_select(req, &len, needs_lock);\n\tif (IS_ERR(buf))\n\t\treturn PTR_ERR(buf);\n\tiov[0].iov_base = buf;\n\tiov[0].iov_len = (compat_size_t) len;\n\treturn 0;\n}\n#endif\n\nstatic ssize_t __io_iov_buffer_select(struct io_kiocb *req, struct iovec *iov,\n\t\t\t\t      bool needs_lock)\n{\n\tstruct iovec __user *uiov = u64_to_user_ptr(req->rw.addr);\n\tvoid __user *buf;\n\tssize_t len;\n\n\tif (copy_from_user(iov, uiov, sizeof(*uiov)))\n\t\treturn -EFAULT;\n\n\tlen = iov[0].iov_len;\n\tif (len < 0)\n\t\treturn -EINVAL;\n\tbuf = io_rw_buffer_select(req, &len, needs_lock);\n\tif (IS_ERR(buf))\n\t\treturn PTR_ERR(buf);\n\tiov[0].iov_base = buf;\n\tiov[0].iov_len = len;\n\treturn 0;\n}\n\nstatic ssize_t io_iov_buffer_select(struct io_kiocb *req, struct iovec *iov,\n\t\t\t\t    bool needs_lock)\n{\n\tif (req->flags & REQ_F_BUFFER_SELECTED) {\n\t\tstruct io_buffer *kbuf;\n\n\t\tkbuf = (struct io_buffer *) (unsigned long) req->rw.addr;\n\t\tiov[0].iov_base = u64_to_user_ptr(kbuf->addr);\n\t\tiov[0].iov_len = kbuf->len;\n\t\treturn 0;\n\t}\n\tif (!req->rw.len)\n\t\treturn 0;\n\telse if (req->rw.len > 1)\n\t\treturn -EINVAL;\n\n#ifdef CONFIG_COMPAT\n\tif (req->ctx->compat)\n\t\treturn io_compat_import(req, iov, needs_lock);\n#endif\n\n\treturn __io_iov_buffer_select(req, iov, needs_lock);\n}\n\nstatic ssize_t __io_import_iovec(int rw, struct io_kiocb *req,\n\t\t\t\t struct iovec **iovec, struct iov_iter *iter,\n\t\t\t\t bool needs_lock)\n{\n\tvoid __user *buf = u64_to_user_ptr(req->rw.addr);\n\tsize_t sqe_len = req->rw.len;\n\tssize_t ret;\n\tu8 opcode;\n\n\topcode = req->opcode;\n\tif (opcode == IORING_OP_READ_FIXED || opcode == IORING_OP_WRITE_FIXED) {\n\t\t*iovec = NULL;\n\t\treturn io_import_fixed(req, rw, iter);\n\t}\n\n\t/* buffer index only valid with fixed read/write, or buffer select  */\n\tif (req->buf_index && !(req->flags & REQ_F_BUFFER_SELECT))\n\t\treturn -EINVAL;\n\n\tif (opcode == IORING_OP_READ || opcode == IORING_OP_WRITE) {\n\t\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\t\tbuf = io_rw_buffer_select(req, &sqe_len, needs_lock);\n\t\t\tif (IS_ERR(buf))\n\t\t\t\treturn PTR_ERR(buf);\n\t\t\treq->rw.len = sqe_len;\n\t\t}\n\n\t\tret = import_single_range(rw, buf, sqe_len, *iovec, iter);\n\t\t*iovec = NULL;\n\t\treturn ret < 0 ? ret : sqe_len;\n\t}\n\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tret = io_iov_buffer_select(req, *iovec, needs_lock);\n\t\tif (!ret) {\n\t\t\tret = (*iovec)->iov_len;\n\t\t\tiov_iter_init(iter, rw, *iovec, 1, ret);\n\t\t}\n\t\t*iovec = NULL;\n\t\treturn ret;\n\t}\n\n\treturn __import_iovec(rw, buf, sqe_len, UIO_FASTIOV, iovec, iter,\n\t\t\t      req->ctx->compat);\n}\n\nstatic ssize_t io_import_iovec(int rw, struct io_kiocb *req,\n\t\t\t       struct iovec **iovec, struct iov_iter *iter,\n\t\t\t       bool needs_lock)\n{\n\tstruct io_async_rw *iorw = req->async_data;\n\n\tif (!iorw)\n\t\treturn __io_import_iovec(rw, req, iovec, iter, needs_lock);\n\t*iovec = NULL;\n\treturn iov_iter_count(&iorw->iter);\n}\n\nstatic inline loff_t *io_kiocb_ppos(struct kiocb *kiocb)\n{\n\treturn (kiocb->ki_filp->f_mode & FMODE_STREAM) ? NULL : &kiocb->ki_pos;\n}\n\n/*\n * For files that don't have ->read_iter() and ->write_iter(), handle them\n * by looping over ->read() or ->write() manually.\n */\nstatic ssize_t loop_rw_iter(int rw, struct file *file, struct kiocb *kiocb,\n\t\t\t   struct iov_iter *iter)\n{\n\tssize_t ret = 0;\n\n\t/*\n\t * Don't support polled IO through this interface, and we can't\n\t * support non-blocking either. For the latter, this just causes\n\t * the kiocb to be handled from an async context.\n\t */\n\tif (kiocb->ki_flags & IOCB_HIPRI)\n\t\treturn -EOPNOTSUPP;\n\tif (kiocb->ki_flags & IOCB_NOWAIT)\n\t\treturn -EAGAIN;\n\n\twhile (iov_iter_count(iter)) {\n\t\tstruct iovec iovec;\n\t\tssize_t nr;\n\n\t\tif (!iov_iter_is_bvec(iter)) {\n\t\t\tiovec = iov_iter_iovec(iter);\n\t\t} else {\n\t\t\t/* fixed buffers import bvec */\n\t\t\tiovec.iov_base = kmap(iter->bvec->bv_page)\n\t\t\t\t\t\t+ iter->iov_offset;\n\t\t\tiovec.iov_len = min(iter->count,\n\t\t\t\t\titer->bvec->bv_len - iter->iov_offset);\n\t\t}\n\n\t\tif (rw == READ) {\n\t\t\tnr = file->f_op->read(file, iovec.iov_base,\n\t\t\t\t\t      iovec.iov_len, io_kiocb_ppos(kiocb));\n\t\t} else {\n\t\t\tnr = file->f_op->write(file, iovec.iov_base,\n\t\t\t\t\t       iovec.iov_len, io_kiocb_ppos(kiocb));\n\t\t}\n\n\t\tif (iov_iter_is_bvec(iter))\n\t\t\tkunmap(iter->bvec->bv_page);\n\n\t\tif (nr < 0) {\n\t\t\tif (!ret)\n\t\t\t\tret = nr;\n\t\t\tbreak;\n\t\t}\n\t\tret += nr;\n\t\tif (nr != iovec.iov_len)\n\t\t\tbreak;\n\t\tiov_iter_advance(iter, nr);\n\t}\n\n\treturn ret;\n}\n\nstatic void io_req_map_rw(struct io_kiocb *req, const struct iovec *iovec,\n\t\t\t  const struct iovec *fast_iov, struct iov_iter *iter)\n{\n\tstruct io_async_rw *rw = req->async_data;\n\n\tmemcpy(&rw->iter, iter, sizeof(*iter));\n\trw->free_iovec = iovec;\n\trw->bytes_done = 0;\n\t/* can only be fixed buffers, no need to do anything */\n\tif (iter->type == ITER_BVEC)\n\t\treturn;\n\tif (!iovec) {\n\t\tunsigned iov_off = 0;\n\n\t\trw->iter.iov = rw->fast_iov;\n\t\tif (iter->iov != fast_iov) {\n\t\t\tiov_off = iter->iov - fast_iov;\n\t\t\trw->iter.iov += iov_off;\n\t\t}\n\t\tif (rw->fast_iov != fast_iov)\n\t\t\tmemcpy(rw->fast_iov + iov_off, fast_iov + iov_off,\n\t\t\t       sizeof(struct iovec) * iter->nr_segs);\n\t} else {\n\t\treq->flags |= REQ_F_NEED_CLEANUP;\n\t}\n}\n\nstatic inline int __io_alloc_async_data(struct io_kiocb *req)\n{\n\tWARN_ON_ONCE(!io_op_defs[req->opcode].async_size);\n\treq->async_data = kmalloc(io_op_defs[req->opcode].async_size, GFP_KERNEL);\n\treturn req->async_data == NULL;\n}\n\nstatic int io_alloc_async_data(struct io_kiocb *req)\n{\n\tif (!io_op_defs[req->opcode].needs_async_data)\n\t\treturn 0;\n\n\treturn  __io_alloc_async_data(req);\n}\n\nstatic int io_setup_async_rw(struct io_kiocb *req, const struct iovec *iovec,\n\t\t\t     const struct iovec *fast_iov,\n\t\t\t     struct iov_iter *iter, bool force)\n{\n\tif (!force && !io_op_defs[req->opcode].needs_async_data)\n\t\treturn 0;\n\tif (!req->async_data) {\n\t\tif (__io_alloc_async_data(req))\n\t\t\treturn -ENOMEM;\n\n\t\tio_req_map_rw(req, iovec, fast_iov, iter);\n\t}\n\treturn 0;\n}\n\nstatic inline int io_rw_prep_async(struct io_kiocb *req, int rw)\n{\n\tstruct io_async_rw *iorw = req->async_data;\n\tstruct iovec *iov = iorw->fast_iov;\n\tssize_t ret;\n\n\tret = __io_import_iovec(rw, req, &iov, &iorw->iter, false);\n\tif (unlikely(ret < 0))\n\t\treturn ret;\n\n\tiorw->bytes_done = 0;\n\tiorw->free_iovec = iov;\n\tif (iov)\n\t\treq->flags |= REQ_F_NEED_CLEANUP;\n\treturn 0;\n}\n\nstatic int io_read_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tssize_t ret;\n\n\tret = io_prep_rw(req, sqe);\n\tif (ret)\n\t\treturn ret;\n\n\tif (unlikely(!(req->file->f_mode & FMODE_READ)))\n\t\treturn -EBADF;\n\n\t/* either don't need iovec imported or already have it */\n\tif (!req->async_data)\n\t\treturn 0;\n\treturn io_rw_prep_async(req, READ);\n}\n\n/*\n * This is our waitqueue callback handler, registered through lock_page_async()\n * when we initially tried to do the IO with the iocb armed our waitqueue.\n * This gets called when the page is unlocked, and we generally expect that to\n * happen when the page IO is completed and the page is now uptodate. This will\n * queue a task_work based retry of the operation, attempting to copy the data\n * again. If the latter fails because the page was NOT uptodate, then we will\n * do a thread based blocking retry of the operation. That's the unexpected\n * slow path.\n */\nstatic int io_async_buf_func(struct wait_queue_entry *wait, unsigned mode,\n\t\t\t     int sync, void *arg)\n{\n\tstruct wait_page_queue *wpq;\n\tstruct io_kiocb *req = wait->private;\n\tstruct wait_page_key *key = arg;\n\tint ret;\n\n\twpq = container_of(wait, struct wait_page_queue, wait);\n\n\tif (!wake_page_match(wpq, key))\n\t\treturn 0;\n\n\treq->rw.kiocb.ki_flags &= ~IOCB_WAITQ;\n\tlist_del_init(&wait->entry);\n\n\tinit_task_work(&req->task_work, io_req_task_submit);\n\tpercpu_ref_get(&req->ctx->refs);\n\n\t/* submit ref gets dropped, acquire a new one */\n\trefcount_inc(&req->refs);\n\tret = io_req_task_work_add(req, true);\n\tif (unlikely(ret)) {\n\t\tstruct task_struct *tsk;\n\n\t\t/* queue just for cancelation */\n\t\tinit_task_work(&req->task_work, io_req_task_cancel);\n\t\ttsk = io_wq_get_task(req->ctx->io_wq);\n\t\ttask_work_add(tsk, &req->task_work, 0);\n\t\twake_up_process(tsk);\n\t}\n\treturn 1;\n}\n\n/*\n * This controls whether a given IO request should be armed for async page\n * based retry. If we return false here, the request is handed to the async\n * worker threads for retry. If we're doing buffered reads on a regular file,\n * we prepare a private wait_page_queue entry and retry the operation. This\n * will either succeed because the page is now uptodate and unlocked, or it\n * will register a callback when the page is unlocked at IO completion. Through\n * that callback, io_uring uses task_work to setup a retry of the operation.\n * That retry will attempt the buffered read again. The retry will generally\n * succeed, or in rare cases where it fails, we then fall back to using the\n * async worker threads for a blocking retry.\n */\nstatic bool io_rw_should_retry(struct io_kiocb *req)\n{\n\tstruct io_async_rw *rw = req->async_data;\n\tstruct wait_page_queue *wait = &rw->wpq;\n\tstruct kiocb *kiocb = &req->rw.kiocb;\n\n\t/* never retry for NOWAIT, we just complete with -EAGAIN */\n\tif (req->flags & REQ_F_NOWAIT)\n\t\treturn false;\n\n\t/* Only for buffered IO */\n\tif (kiocb->ki_flags & (IOCB_DIRECT | IOCB_HIPRI))\n\t\treturn false;\n\n\t/*\n\t * just use poll if we can, and don't attempt if the fs doesn't\n\t * support callback based unlocks\n\t */\n\tif (file_can_poll(req->file) || !(req->file->f_mode & FMODE_BUF_RASYNC))\n\t\treturn false;\n\n\twait->wait.func = io_async_buf_func;\n\twait->wait.private = req;\n\twait->wait.flags = 0;\n\tINIT_LIST_HEAD(&wait->wait.entry);\n\tkiocb->ki_flags |= IOCB_WAITQ;\n\tkiocb->ki_flags &= ~IOCB_NOWAIT;\n\tkiocb->ki_waitq = wait;\n\treturn true;\n}\n\nstatic int io_iter_do_read(struct io_kiocb *req, struct iov_iter *iter)\n{\n\tif (req->file->f_op->read_iter)\n\t\treturn call_read_iter(req->file, &req->rw.kiocb, iter);\n\telse if (req->file->f_op->read)\n\t\treturn loop_rw_iter(READ, req->file, &req->rw.kiocb, iter);\n\telse\n\t\treturn -EINVAL;\n}\n\nstatic int io_read(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\tstruct iovec inline_vecs[UIO_FASTIOV], *iovec = inline_vecs;\n\tstruct kiocb *kiocb = &req->rw.kiocb;\n\tstruct iov_iter __iter, *iter = &__iter;\n\tstruct io_async_rw *rw = req->async_data;\n\tssize_t io_size, ret, ret2;\n\tsize_t iov_count;\n\tbool no_async;\n\n\tif (rw)\n\t\titer = &rw->iter;\n\n\tret = io_import_iovec(READ, req, &iovec, iter, !force_nonblock);\n\tif (ret < 0)\n\t\treturn ret;\n\tiov_count = iov_iter_count(iter);\n\tio_size = ret;\n\treq->result = io_size;\n\tret = 0;\n\n\t/* Ensure we clear previously set non-block flag */\n\tif (!force_nonblock)\n\t\tkiocb->ki_flags &= ~IOCB_NOWAIT;\n\telse\n\t\tkiocb->ki_flags |= IOCB_NOWAIT;\n\n\n\t/* If the file doesn't support async, just async punt */\n\tno_async = force_nonblock && !io_file_supports_async(req->file, READ);\n\tif (no_async)\n\t\tgoto copy_iov;\n\n\tret = rw_verify_area(READ, req->file, io_kiocb_ppos(kiocb), iov_count);\n\tif (unlikely(ret))\n\t\tgoto out_free;\n\n\tret = io_iter_do_read(req, iter);\n\n\tif (!ret) {\n\t\tgoto done;\n\t} else if (ret == -EIOCBQUEUED) {\n\t\tret = 0;\n\t\tgoto out_free;\n\t} else if (ret == -EAGAIN) {\n\t\t/* IOPOLL retry should happen for io-wq threads */\n\t\tif (!force_nonblock && !(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\t\tgoto done;\n\t\t/* no retry on NONBLOCK marked file */\n\t\tif (req->file->f_flags & O_NONBLOCK)\n\t\t\tgoto done;\n\t\t/* some cases will consume bytes even on error returns */\n\t\tiov_iter_revert(iter, iov_count - iov_iter_count(iter));\n\t\tret = 0;\n\t\tgoto copy_iov;\n\t} else if (ret < 0) {\n\t\t/* make sure -ERESTARTSYS -> -EINTR is done */\n\t\tgoto done;\n\t}\n\n\t/* read it all, or we did blocking attempt. no retry. */\n\tif (!iov_iter_count(iter) || !force_nonblock ||\n\t    (req->file->f_flags & O_NONBLOCK))\n\t\tgoto done;\n\n\tio_size -= ret;\ncopy_iov:\n\tret2 = io_setup_async_rw(req, iovec, inline_vecs, iter, true);\n\tif (ret2) {\n\t\tret = ret2;\n\t\tgoto out_free;\n\t}\n\tif (no_async)\n\t\treturn -EAGAIN;\n\trw = req->async_data;\n\t/* it's copied and will be cleaned with ->io */\n\tiovec = NULL;\n\t/* now use our persistent iterator, if we aren't already */\n\titer = &rw->iter;\nretry:\n\trw->bytes_done += ret;\n\t/* if we can retry, do so with the callbacks armed */\n\tif (!io_rw_should_retry(req)) {\n\t\tkiocb->ki_flags &= ~IOCB_WAITQ;\n\t\treturn -EAGAIN;\n\t}\n\n\t/*\n\t * Now retry read with the IOCB_WAITQ parts set in the iocb. If we\n\t * get -EIOCBQUEUED, then we'll get a notification when the desired\n\t * page gets unlocked. We can also get a partial read here, and if we\n\t * do, then just retry at the new offset.\n\t */\n\tret = io_iter_do_read(req, iter);\n\tif (ret == -EIOCBQUEUED) {\n\t\tret = 0;\n\t\tgoto out_free;\n\t} else if (ret > 0 && ret < io_size) {\n\t\t/* we got some bytes, but not all. retry. */\n\t\tgoto retry;\n\t}\ndone:\n\tkiocb_done(kiocb, ret, cs);\n\tret = 0;\nout_free:\n\t/* it's reportedly faster than delegating the null check to kfree() */\n\tif (iovec)\n\t\tkfree(iovec);\n\treturn ret;\n}\n\nstatic int io_write_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tssize_t ret;\n\n\tret = io_prep_rw(req, sqe);\n\tif (ret)\n\t\treturn ret;\n\n\tif (unlikely(!(req->file->f_mode & FMODE_WRITE)))\n\t\treturn -EBADF;\n\n\t/* either don't need iovec imported or already have it */\n\tif (!req->async_data)\n\t\treturn 0;\n\treturn io_rw_prep_async(req, WRITE);\n}\n\nstatic int io_write(struct io_kiocb *req, bool force_nonblock,\n\t\t    struct io_comp_state *cs)\n{\n\tstruct iovec inline_vecs[UIO_FASTIOV], *iovec = inline_vecs;\n\tstruct kiocb *kiocb = &req->rw.kiocb;\n\tstruct iov_iter __iter, *iter = &__iter;\n\tstruct io_async_rw *rw = req->async_data;\n\tsize_t iov_count;\n\tssize_t ret, ret2, io_size;\n\n\tif (rw)\n\t\titer = &rw->iter;\n\n\tret = io_import_iovec(WRITE, req, &iovec, iter, !force_nonblock);\n\tif (ret < 0)\n\t\treturn ret;\n\tiov_count = iov_iter_count(iter);\n\tio_size = ret;\n\treq->result = io_size;\n\n\t/* Ensure we clear previously set non-block flag */\n\tif (!force_nonblock)\n\t\tkiocb->ki_flags &= ~IOCB_NOWAIT;\n\telse\n\t\tkiocb->ki_flags |= IOCB_NOWAIT;\n\n\t/* If the file doesn't support async, just async punt */\n\tif (force_nonblock && !io_file_supports_async(req->file, WRITE))\n\t\tgoto copy_iov;\n\n\t/* file path doesn't support NOWAIT for non-direct_IO */\n\tif (force_nonblock && !(kiocb->ki_flags & IOCB_DIRECT) &&\n\t    (req->flags & REQ_F_ISREG))\n\t\tgoto copy_iov;\n\n\tret = rw_verify_area(WRITE, req->file, io_kiocb_ppos(kiocb), iov_count);\n\tif (unlikely(ret))\n\t\tgoto out_free;\n\n\t/*\n\t * Open-code file_start_write here to grab freeze protection,\n\t * which will be released by another thread in\n\t * io_complete_rw().  Fool lockdep by telling it the lock got\n\t * released so that it doesn't complain about the held lock when\n\t * we return to userspace.\n\t */\n\tif (req->flags & REQ_F_ISREG) {\n\t\t__sb_start_write(file_inode(req->file)->i_sb,\n\t\t\t\t\tSB_FREEZE_WRITE, true);\n\t\t__sb_writers_release(file_inode(req->file)->i_sb,\n\t\t\t\t\tSB_FREEZE_WRITE);\n\t}\n\tkiocb->ki_flags |= IOCB_WRITE;\n\n\tif (req->file->f_op->write_iter)\n\t\tret2 = call_write_iter(req->file, kiocb, iter);\n\telse if (req->file->f_op->write)\n\t\tret2 = loop_rw_iter(WRITE, req->file, kiocb, iter);\n\telse\n\t\tret2 = -EINVAL;\n\n\t/*\n\t * Raw bdev writes will return -EOPNOTSUPP for IOCB_NOWAIT. Just\n\t * retry them without IOCB_NOWAIT.\n\t */\n\tif (ret2 == -EOPNOTSUPP && (kiocb->ki_flags & IOCB_NOWAIT))\n\t\tret2 = -EAGAIN;\n\t/* no retry on NONBLOCK marked file */\n\tif (ret2 == -EAGAIN && (req->file->f_flags & O_NONBLOCK))\n\t\tgoto done;\n\tif (!force_nonblock || ret2 != -EAGAIN) {\n\t\t/* IOPOLL retry should happen for io-wq threads */\n\t\tif ((req->ctx->flags & IORING_SETUP_IOPOLL) && ret2 == -EAGAIN)\n\t\t\tgoto copy_iov;\ndone:\n\t\tkiocb_done(kiocb, ret2, cs);\n\t} else {\ncopy_iov:\n\t\t/* some cases will consume bytes even on error returns */\n\t\tiov_iter_revert(iter, iov_count - iov_iter_count(iter));\n\t\tret = io_setup_async_rw(req, iovec, inline_vecs, iter, false);\n\t\tif (!ret)\n\t\t\treturn -EAGAIN;\n\t}\nout_free:\n\t/* it's reportedly faster than delegating the null check to kfree() */\n\tif (iovec)\n\t\tkfree(iovec);\n\treturn ret;\n}\n\nstatic int __io_splice_prep(struct io_kiocb *req,\n\t\t\t    const struct io_uring_sqe *sqe)\n{\n\tstruct io_splice* sp = &req->splice;\n\tunsigned int valid_flags = SPLICE_F_FD_IN_FIXED | SPLICE_F_ALL;\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\tsp->file_in = NULL;\n\tsp->len = READ_ONCE(sqe->len);\n\tsp->flags = READ_ONCE(sqe->splice_flags);\n\n\tif (unlikely(sp->flags & ~valid_flags))\n\t\treturn -EINVAL;\n\n\tsp->file_in = io_file_get(NULL, req, READ_ONCE(sqe->splice_fd_in),\n\t\t\t\t  (sp->flags & SPLICE_F_FD_IN_FIXED));\n\tif (!sp->file_in)\n\t\treturn -EBADF;\n\treq->flags |= REQ_F_NEED_CLEANUP;\n\n\tif (!S_ISREG(file_inode(sp->file_in)->i_mode)) {\n\t\t/*\n\t\t * Splice operation will be punted aync, and here need to\n\t\t * modify io_wq_work.flags, so initialize io_wq_work firstly.\n\t\t */\n\t\tio_req_init_async(req);\n\t\treq->work.flags |= IO_WQ_WORK_UNBOUND;\n\t}\n\n\treturn 0;\n}\n\nstatic int io_tee_prep(struct io_kiocb *req,\n\t\t       const struct io_uring_sqe *sqe)\n{\n\tif (READ_ONCE(sqe->splice_off_in) || READ_ONCE(sqe->off))\n\t\treturn -EINVAL;\n\treturn __io_splice_prep(req, sqe);\n}\n\nstatic int io_tee(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct io_splice *sp = &req->splice;\n\tstruct file *in = sp->file_in;\n\tstruct file *out = sp->file_out;\n\tunsigned int flags = sp->flags & ~SPLICE_F_FD_IN_FIXED;\n\tlong ret = 0;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\tif (sp->len)\n\t\tret = do_tee(in, out, sp->len, flags);\n\n\tio_put_file(req, in, (sp->flags & SPLICE_F_FD_IN_FIXED));\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\n\tif (ret != sp->len)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_splice_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_splice* sp = &req->splice;\n\n\tsp->off_in = READ_ONCE(sqe->splice_off_in);\n\tsp->off_out = READ_ONCE(sqe->off);\n\treturn __io_splice_prep(req, sqe);\n}\n\nstatic int io_splice(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct io_splice *sp = &req->splice;\n\tstruct file *in = sp->file_in;\n\tstruct file *out = sp->file_out;\n\tunsigned int flags = sp->flags & ~SPLICE_F_FD_IN_FIXED;\n\tloff_t *poff_in, *poff_out;\n\tlong ret = 0;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tpoff_in = (sp->off_in == -1) ? NULL : &sp->off_in;\n\tpoff_out = (sp->off_out == -1) ? NULL : &sp->off_out;\n\n\tif (sp->len)\n\t\tret = do_splice(in, poff_in, out, poff_out, sp->len, flags);\n\n\tio_put_file(req, in, (sp->flags & SPLICE_F_FD_IN_FIXED));\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\n\tif (ret != sp->len)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\n/*\n * IORING_OP_NOP just posts a completion event, nothing else.\n */\nstatic int io_nop(struct io_kiocb *req, struct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (unlikely(ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\t__io_req_complete(req, 0, 0, cs);\n\treturn 0;\n}\n\nstatic int io_prep_fsync(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!req->file)\n\t\treturn -EBADF;\n\n\tif (unlikely(ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(sqe->addr || sqe->ioprio || sqe->buf_index))\n\t\treturn -EINVAL;\n\n\treq->sync.flags = READ_ONCE(sqe->fsync_flags);\n\tif (unlikely(req->sync.flags & ~IORING_FSYNC_DATASYNC))\n\t\treturn -EINVAL;\n\n\treq->sync.off = READ_ONCE(sqe->off);\n\treq->sync.len = READ_ONCE(sqe->len);\n\treturn 0;\n}\n\nstatic int io_fsync(struct io_kiocb *req, bool force_nonblock)\n{\n\tloff_t end = req->sync.off + req->sync.len;\n\tint ret;\n\n\t/* fsync always requires a blocking context */\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tret = vfs_fsync_range(req->file, req->sync.off,\n\t\t\t\tend > 0 ? end : LLONG_MAX,\n\t\t\t\treq->sync.flags & IORING_FSYNC_DATASYNC);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_fallocate_prep(struct io_kiocb *req,\n\t\t\t     const struct io_uring_sqe *sqe)\n{\n\tif (sqe->ioprio || sqe->buf_index || sqe->rw_flags)\n\t\treturn -EINVAL;\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\treq->sync.off = READ_ONCE(sqe->off);\n\treq->sync.len = READ_ONCE(sqe->addr);\n\treq->sync.mode = READ_ONCE(sqe->len);\n\treturn 0;\n}\n\nstatic int io_fallocate(struct io_kiocb *req, bool force_nonblock)\n{\n\tint ret;\n\n\t/* fallocate always requiring blocking context */\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\tret = vfs_fallocate(req->file, req->sync.mode, req->sync.off,\n\t\t\t\treq->sync.len);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int __io_openat_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tconst char __user *fname;\n\tint ret;\n\n\tif (unlikely(sqe->ioprio || sqe->buf_index))\n\t\treturn -EINVAL;\n\tif (unlikely(req->flags & REQ_F_FIXED_FILE))\n\t\treturn -EBADF;\n\n\t/* open.how should be already initialised */\n\tif (!(req->open.how.flags & O_PATH) && force_o_largefile())\n\t\treq->open.how.flags |= O_LARGEFILE;\n\n\treq->open.dfd = READ_ONCE(sqe->fd);\n\tfname = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\treq->open.filename = getname(fname);\n\tif (IS_ERR(req->open.filename)) {\n\t\tret = PTR_ERR(req->open.filename);\n\t\treq->open.filename = NULL;\n\t\treturn ret;\n\t}\n\treq->open.nofile = rlimit(RLIMIT_NOFILE);\n\treq->flags |= REQ_F_NEED_CLEANUP;\n\treturn 0;\n}\n\nstatic int io_openat_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tu64 flags, mode;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tmode = READ_ONCE(sqe->len);\n\tflags = READ_ONCE(sqe->open_flags);\n\treq->open.how = build_open_how(flags, mode);\n\treturn __io_openat_prep(req, sqe);\n}\n\nstatic int io_openat2_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct open_how __user *how;\n\tsize_t len;\n\tint ret;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\thow = u64_to_user_ptr(READ_ONCE(sqe->addr2));\n\tlen = READ_ONCE(sqe->len);\n\tif (len < OPEN_HOW_SIZE_VER0)\n\t\treturn -EINVAL;\n\n\tret = copy_struct_from_user(&req->open.how, sizeof(req->open.how), how,\n\t\t\t\t\tlen);\n\tif (ret)\n\t\treturn ret;\n\n\treturn __io_openat_prep(req, sqe);\n}\n\nstatic int io_openat2(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct open_flags op;\n\tstruct file *file;\n\tint ret;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tret = build_open_flags(&req->open.how, &op);\n\tif (ret)\n\t\tgoto err;\n\n\tret = __get_unused_fd_flags(req->open.how.flags, req->open.nofile);\n\tif (ret < 0)\n\t\tgoto err;\n\n\tfile = do_filp_open(req->open.dfd, req->open.filename, &op);\n\tif (IS_ERR(file)) {\n\t\tput_unused_fd(ret);\n\t\tret = PTR_ERR(file);\n\t} else {\n\t\tfsnotify_open(file);\n\t\tfd_install(ret, file);\n\t}\nerr:\n\tputname(req->open.filename);\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_openat(struct io_kiocb *req, bool force_nonblock)\n{\n\treturn io_openat2(req, force_nonblock);\n}\n\nstatic int io_remove_buffers_prep(struct io_kiocb *req,\n\t\t\t\t  const struct io_uring_sqe *sqe)\n{\n\tstruct io_provide_buf *p = &req->pbuf;\n\tu64 tmp;\n\n\tif (sqe->ioprio || sqe->rw_flags || sqe->addr || sqe->len || sqe->off)\n\t\treturn -EINVAL;\n\n\ttmp = READ_ONCE(sqe->fd);\n\tif (!tmp || tmp > USHRT_MAX)\n\t\treturn -EINVAL;\n\n\tmemset(p, 0, sizeof(*p));\n\tp->nbufs = tmp;\n\tp->bgid = READ_ONCE(sqe->buf_group);\n\treturn 0;\n}\n\nstatic int __io_remove_buffers(struct io_ring_ctx *ctx, struct io_buffer *buf,\n\t\t\t       int bgid, unsigned nbufs)\n{\n\tunsigned i = 0;\n\n\t/* shouldn't happen */\n\tif (!nbufs)\n\t\treturn 0;\n\n\t/* the head kbuf is the list itself */\n\twhile (!list_empty(&buf->list)) {\n\t\tstruct io_buffer *nxt;\n\n\t\tnxt = list_first_entry(&buf->list, struct io_buffer, list);\n\t\tlist_del(&nxt->list);\n\t\tkfree(nxt);\n\t\tif (++i == nbufs)\n\t\t\treturn i;\n\t}\n\ti++;\n\tkfree(buf);\n\tidr_remove(&ctx->io_buffer_idr, bgid);\n\n\treturn i;\n}\n\nstatic int io_remove_buffers(struct io_kiocb *req, bool force_nonblock,\n\t\t\t     struct io_comp_state *cs)\n{\n\tstruct io_provide_buf *p = &req->pbuf;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_buffer *head;\n\tint ret = 0;\n\n\tio_ring_submit_lock(ctx, !force_nonblock);\n\n\tlockdep_assert_held(&ctx->uring_lock);\n\n\tret = -ENOENT;\n\thead = idr_find(&ctx->io_buffer_idr, p->bgid);\n\tif (head)\n\t\tret = __io_remove_buffers(ctx, head, p->bgid, p->nbufs);\n\n\tio_ring_submit_lock(ctx, !force_nonblock);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_provide_buffers_prep(struct io_kiocb *req,\n\t\t\t\t   const struct io_uring_sqe *sqe)\n{\n\tstruct io_provide_buf *p = &req->pbuf;\n\tu64 tmp;\n\n\tif (sqe->ioprio || sqe->rw_flags)\n\t\treturn -EINVAL;\n\n\ttmp = READ_ONCE(sqe->fd);\n\tif (!tmp || tmp > USHRT_MAX)\n\t\treturn -E2BIG;\n\tp->nbufs = tmp;\n\tp->addr = READ_ONCE(sqe->addr);\n\tp->len = READ_ONCE(sqe->len);\n\n\tif (!access_ok(u64_to_user_ptr(p->addr), (p->len * p->nbufs)))\n\t\treturn -EFAULT;\n\n\tp->bgid = READ_ONCE(sqe->buf_group);\n\ttmp = READ_ONCE(sqe->off);\n\tif (tmp > USHRT_MAX)\n\t\treturn -E2BIG;\n\tp->bid = tmp;\n\treturn 0;\n}\n\nstatic int io_add_buffers(struct io_provide_buf *pbuf, struct io_buffer **head)\n{\n\tstruct io_buffer *buf;\n\tu64 addr = pbuf->addr;\n\tint i, bid = pbuf->bid;\n\n\tfor (i = 0; i < pbuf->nbufs; i++) {\n\t\tbuf = kmalloc(sizeof(*buf), GFP_KERNEL);\n\t\tif (!buf)\n\t\t\tbreak;\n\n\t\tbuf->addr = addr;\n\t\tbuf->len = pbuf->len;\n\t\tbuf->bid = bid;\n\t\taddr += pbuf->len;\n\t\tbid++;\n\t\tif (!*head) {\n\t\t\tINIT_LIST_HEAD(&buf->list);\n\t\t\t*head = buf;\n\t\t} else {\n\t\t\tlist_add_tail(&buf->list, &(*head)->list);\n\t\t}\n\t}\n\n\treturn i ? i : -ENOMEM;\n}\n\nstatic int io_provide_buffers(struct io_kiocb *req, bool force_nonblock,\n\t\t\t      struct io_comp_state *cs)\n{\n\tstruct io_provide_buf *p = &req->pbuf;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_buffer *head, *list;\n\tint ret = 0;\n\n\tio_ring_submit_lock(ctx, !force_nonblock);\n\n\tlockdep_assert_held(&ctx->uring_lock);\n\n\tlist = head = idr_find(&ctx->io_buffer_idr, p->bgid);\n\n\tret = io_add_buffers(p, &head);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (!list) {\n\t\tret = idr_alloc(&ctx->io_buffer_idr, head, p->bgid, p->bgid + 1,\n\t\t\t\t\tGFP_KERNEL);\n\t\tif (ret < 0) {\n\t\t\t__io_remove_buffers(ctx, head, p->bgid, -1U);\n\t\t\tgoto out;\n\t\t}\n\t}\nout:\n\tio_ring_submit_unlock(ctx, !force_nonblock);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_epoll_ctl_prep(struct io_kiocb *req,\n\t\t\t     const struct io_uring_sqe *sqe)\n{\n#if defined(CONFIG_EPOLL)\n\tif (sqe->ioprio || sqe->buf_index)\n\t\treturn -EINVAL;\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\n\treq->epoll.epfd = READ_ONCE(sqe->fd);\n\treq->epoll.op = READ_ONCE(sqe->len);\n\treq->epoll.fd = READ_ONCE(sqe->off);\n\n\tif (ep_op_has_event(req->epoll.op)) {\n\t\tstruct epoll_event __user *ev;\n\n\t\tev = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\t\tif (copy_from_user(&req->epoll.event, ev, sizeof(*ev)))\n\t\t\treturn -EFAULT;\n\t}\n\n\treturn 0;\n#else\n\treturn -EOPNOTSUPP;\n#endif\n}\n\nstatic int io_epoll_ctl(struct io_kiocb *req, bool force_nonblock,\n\t\t\tstruct io_comp_state *cs)\n{\n#if defined(CONFIG_EPOLL)\n\tstruct io_epoll *ie = &req->epoll;\n\tint ret;\n\n\tret = do_epoll_ctl(ie->epfd, ie->op, ie->fd, &ie->event, force_nonblock);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn -EAGAIN;\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n#else\n\treturn -EOPNOTSUPP;\n#endif\n}\n\nstatic int io_madvise_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n#if defined(CONFIG_ADVISE_SYSCALLS) && defined(CONFIG_MMU)\n\tif (sqe->ioprio || sqe->buf_index || sqe->off)\n\t\treturn -EINVAL;\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\treq->madvise.addr = READ_ONCE(sqe->addr);\n\treq->madvise.len = READ_ONCE(sqe->len);\n\treq->madvise.advice = READ_ONCE(sqe->fadvise_advice);\n\treturn 0;\n#else\n\treturn -EOPNOTSUPP;\n#endif\n}\n\nstatic int io_madvise(struct io_kiocb *req, bool force_nonblock)\n{\n#if defined(CONFIG_ADVISE_SYSCALLS) && defined(CONFIG_MMU)\n\tstruct io_madvise *ma = &req->madvise;\n\tint ret;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tret = do_madvise(ma->addr, ma->len, ma->advice);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n#else\n\treturn -EOPNOTSUPP;\n#endif\n}\n\nstatic int io_fadvise_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tif (sqe->ioprio || sqe->buf_index || sqe->addr)\n\t\treturn -EINVAL;\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\treq->fadvise.offset = READ_ONCE(sqe->off);\n\treq->fadvise.len = READ_ONCE(sqe->len);\n\treq->fadvise.advice = READ_ONCE(sqe->fadvise_advice);\n\treturn 0;\n}\n\nstatic int io_fadvise(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct io_fadvise *fa = &req->fadvise;\n\tint ret;\n\n\tif (force_nonblock) {\n\t\tswitch (fa->advice) {\n\t\tcase POSIX_FADV_NORMAL:\n\t\tcase POSIX_FADV_RANDOM:\n\t\tcase POSIX_FADV_SEQUENTIAL:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn -EAGAIN;\n\t\t}\n\t}\n\n\tret = vfs_fadvise(req->file, fa->offset, fa->len, fa->advice);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_statx_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->buf_index)\n\t\treturn -EINVAL;\n\tif (req->flags & REQ_F_FIXED_FILE)\n\t\treturn -EBADF;\n\n\treq->statx.dfd = READ_ONCE(sqe->fd);\n\treq->statx.mask = READ_ONCE(sqe->len);\n\treq->statx.filename = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\treq->statx.buffer = u64_to_user_ptr(READ_ONCE(sqe->addr2));\n\treq->statx.flags = READ_ONCE(sqe->statx_flags);\n\n\treturn 0;\n}\n\nstatic int io_statx(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct io_statx *ctx = &req->statx;\n\tint ret;\n\n\tif (force_nonblock) {\n\t\t/* only need file table for an actual valid fd */\n\t\tif (ctx->dfd == -1 || ctx->dfd == AT_FDCWD)\n\t\t\treq->flags |= REQ_F_NO_FILE_TABLE;\n\t\treturn -EAGAIN;\n\t}\n\n\tret = do_statx(ctx->dfd, ctx->filename, ctx->flags, ctx->mask,\n\t\t       ctx->buffer);\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_close_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\t/*\n\t * If we queue this for async, it must not be cancellable. That would\n\t * leave the 'file' in an undeterminate state, and here need to modify\n\t * io_wq_work.flags, so initialize io_wq_work firstly.\n\t */\n\tio_req_init_async(req);\n\treq->work.flags |= IO_WQ_WORK_NO_CANCEL;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->off || sqe->addr || sqe->len ||\n\t    sqe->rw_flags || sqe->buf_index)\n\t\treturn -EINVAL;\n\tif (req->flags & REQ_F_FIXED_FILE)\n\t\treturn -EBADF;\n\n\treq->close.fd = READ_ONCE(sqe->fd);\n\tif ((req->file && req->file->f_op == &io_uring_fops))\n\t\treturn -EBADF;\n\n\treq->close.put_file = NULL;\n\treturn 0;\n}\n\nstatic int io_close(struct io_kiocb *req, bool force_nonblock,\n\t\t    struct io_comp_state *cs)\n{\n\tstruct io_close *close = &req->close;\n\tint ret;\n\n\t/* might be already done during nonblock submission */\n\tif (!close->put_file) {\n\t\tret = __close_fd_get_file(close->fd, &close->put_file);\n\t\tif (ret < 0)\n\t\t\treturn (ret == -ENOENT) ? -EBADF : ret;\n\t}\n\n\t/* if the file has a flush method, be safe and punt to async */\n\tif (close->put_file->f_op->flush && force_nonblock) {\n\t\t/* was never set, but play safe */\n\t\treq->flags &= ~REQ_F_NOWAIT;\n\t\t/* avoid grabbing files - we don't need the files */\n\t\treq->flags |= REQ_F_NO_FILE_TABLE;\n\t\treturn -EAGAIN;\n\t}\n\n\t/* No ->flush() or already async, safely close from here */\n\tret = filp_close(close->put_file, req->work.identity->files);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tfput(close->put_file);\n\tclose->put_file = NULL;\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_prep_sfr(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!req->file)\n\t\treturn -EBADF;\n\n\tif (unlikely(ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(sqe->addr || sqe->ioprio || sqe->buf_index))\n\t\treturn -EINVAL;\n\n\treq->sync.off = READ_ONCE(sqe->off);\n\treq->sync.len = READ_ONCE(sqe->len);\n\treq->sync.flags = READ_ONCE(sqe->sync_range_flags);\n\treturn 0;\n}\n\nstatic int io_sync_file_range(struct io_kiocb *req, bool force_nonblock)\n{\n\tint ret;\n\n\t/* sync_file_range always requires a blocking context */\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tret = sync_file_range(req->file, req->sync.off, req->sync.len,\n\t\t\t\treq->sync.flags);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\n#if defined(CONFIG_NET)\nstatic int io_setup_async_msg(struct io_kiocb *req,\n\t\t\t      struct io_async_msghdr *kmsg)\n{\n\tstruct io_async_msghdr *async_msg = req->async_data;\n\n\tif (async_msg)\n\t\treturn -EAGAIN;\n\tif (io_alloc_async_data(req)) {\n\t\tif (kmsg->iov != kmsg->fast_iov)\n\t\t\tkfree(kmsg->iov);\n\t\treturn -ENOMEM;\n\t}\n\tasync_msg = req->async_data;\n\treq->flags |= REQ_F_NEED_CLEANUP;\n\tmemcpy(async_msg, kmsg, sizeof(*kmsg));\n\treturn -EAGAIN;\n}\n\nstatic int io_sendmsg_copy_hdr(struct io_kiocb *req,\n\t\t\t       struct io_async_msghdr *iomsg)\n{\n\tiomsg->iov = iomsg->fast_iov;\n\tiomsg->msg.msg_name = &iomsg->addr;\n\treturn sendmsg_copy_msghdr(&iomsg->msg, req->sr_msg.umsg,\n\t\t\t\t   req->sr_msg.msg_flags, &iomsg->iov);\n}\n\nstatic int io_sendmsg_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_async_msghdr *async_msg = req->async_data;\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tint ret;\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\tsr->msg_flags = READ_ONCE(sqe->msg_flags);\n\tsr->umsg = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\tsr->len = READ_ONCE(sqe->len);\n\n#ifdef CONFIG_COMPAT\n\tif (req->ctx->compat)\n\t\tsr->msg_flags |= MSG_CMSG_COMPAT;\n#endif\n\n\tif (!async_msg || !io_op_defs[req->opcode].needs_async_data)\n\t\treturn 0;\n\tret = io_sendmsg_copy_hdr(req, async_msg);\n\tif (!ret)\n\t\treq->flags |= REQ_F_NEED_CLEANUP;\n\treturn ret;\n}\n\nstatic int io_sendmsg(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\tstruct io_async_msghdr iomsg, *kmsg;\n\tstruct socket *sock;\n\tunsigned flags;\n\tint ret;\n\n\tsock = sock_from_file(req->file, &ret);\n\tif (unlikely(!sock))\n\t\treturn ret;\n\n\tif (req->async_data) {\n\t\tkmsg = req->async_data;\n\t\tkmsg->msg.msg_name = &kmsg->addr;\n\t\t/* if iov is set, it's allocated already */\n\t\tif (!kmsg->iov)\n\t\t\tkmsg->iov = kmsg->fast_iov;\n\t\tkmsg->msg.msg_iter.iov = kmsg->iov;\n\t} else {\n\t\tret = io_sendmsg_copy_hdr(req, &iomsg);\n\t\tif (ret)\n\t\t\treturn ret;\n\t\tkmsg = &iomsg;\n\t}\n\n\tflags = req->sr_msg.msg_flags;\n\tif (flags & MSG_DONTWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\telse if (force_nonblock)\n\t\tflags |= MSG_DONTWAIT;\n\n\tret = __sys_sendmsg_sock(sock, &kmsg->msg, flags);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn io_setup_async_msg(req, kmsg);\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\n\n\tif (kmsg->iov != kmsg->fast_iov)\n\t\tkfree(kmsg->iov);\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_send(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct msghdr msg;\n\tstruct iovec iov;\n\tstruct socket *sock;\n\tunsigned flags;\n\tint ret;\n\n\tsock = sock_from_file(req->file, &ret);\n\tif (unlikely(!sock))\n\t\treturn ret;\n\n\tret = import_single_range(WRITE, sr->buf, sr->len, &iov, &msg.msg_iter);\n\tif (unlikely(ret))\n\t\treturn ret;\n\n\tmsg.msg_name = NULL;\n\tmsg.msg_control = NULL;\n\tmsg.msg_controllen = 0;\n\tmsg.msg_namelen = 0;\n\n\tflags = req->sr_msg.msg_flags;\n\tif (flags & MSG_DONTWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\telse if (force_nonblock)\n\t\tflags |= MSG_DONTWAIT;\n\n\tmsg.msg_flags = flags;\n\tret = sock_sendmsg(sock, &msg);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn -EAGAIN;\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int __io_recvmsg_copy_hdr(struct io_kiocb *req,\n\t\t\t\t struct io_async_msghdr *iomsg)\n{\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct iovec __user *uiov;\n\tsize_t iov_len;\n\tint ret;\n\n\tret = __copy_msghdr_from_user(&iomsg->msg, sr->umsg,\n\t\t\t\t\t&iomsg->uaddr, &uiov, &iov_len);\n\tif (ret)\n\t\treturn ret;\n\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tif (iov_len > 1)\n\t\t\treturn -EINVAL;\n\t\tif (copy_from_user(iomsg->iov, uiov, sizeof(*uiov)))\n\t\t\treturn -EFAULT;\n\t\tsr->len = iomsg->iov[0].iov_len;\n\t\tiov_iter_init(&iomsg->msg.msg_iter, READ, iomsg->iov, 1,\n\t\t\t\tsr->len);\n\t\tiomsg->iov = NULL;\n\t} else {\n\t\tret = __import_iovec(READ, uiov, iov_len, UIO_FASTIOV,\n\t\t\t\t     &iomsg->iov, &iomsg->msg.msg_iter,\n\t\t\t\t     false);\n\t\tif (ret > 0)\n\t\t\tret = 0;\n\t}\n\n\treturn ret;\n}\n\n#ifdef CONFIG_COMPAT\nstatic int __io_compat_recvmsg_copy_hdr(struct io_kiocb *req,\n\t\t\t\t\tstruct io_async_msghdr *iomsg)\n{\n\tstruct compat_msghdr __user *msg_compat;\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct compat_iovec __user *uiov;\n\tcompat_uptr_t ptr;\n\tcompat_size_t len;\n\tint ret;\n\n\tmsg_compat = (struct compat_msghdr __user *) sr->umsg;\n\tret = __get_compat_msghdr(&iomsg->msg, msg_compat, &iomsg->uaddr,\n\t\t\t\t\t&ptr, &len);\n\tif (ret)\n\t\treturn ret;\n\n\tuiov = compat_ptr(ptr);\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tcompat_ssize_t clen;\n\n\t\tif (len > 1)\n\t\t\treturn -EINVAL;\n\t\tif (!access_ok(uiov, sizeof(*uiov)))\n\t\t\treturn -EFAULT;\n\t\tif (__get_user(clen, &uiov->iov_len))\n\t\t\treturn -EFAULT;\n\t\tif (clen < 0)\n\t\t\treturn -EINVAL;\n\t\tsr->len = iomsg->iov[0].iov_len;\n\t\tiomsg->iov = NULL;\n\t} else {\n\t\tret = __import_iovec(READ, (struct iovec __user *)uiov, len,\n\t\t\t\t   UIO_FASTIOV, &iomsg->iov,\n\t\t\t\t   &iomsg->msg.msg_iter, true);\n\t\tif (ret < 0)\n\t\t\treturn ret;\n\t}\n\n\treturn 0;\n}\n#endif\n\nstatic int io_recvmsg_copy_hdr(struct io_kiocb *req,\n\t\t\t       struct io_async_msghdr *iomsg)\n{\n\tiomsg->msg.msg_name = &iomsg->addr;\n\tiomsg->iov = iomsg->fast_iov;\n\n#ifdef CONFIG_COMPAT\n\tif (req->ctx->compat)\n\t\treturn __io_compat_recvmsg_copy_hdr(req, iomsg);\n#endif\n\n\treturn __io_recvmsg_copy_hdr(req, iomsg);\n}\n\nstatic struct io_buffer *io_recv_buffer_select(struct io_kiocb *req,\n\t\t\t\t\t       bool needs_lock)\n{\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct io_buffer *kbuf;\n\n\tkbuf = io_buffer_select(req, &sr->len, sr->bgid, sr->kbuf, needs_lock);\n\tif (IS_ERR(kbuf))\n\t\treturn kbuf;\n\n\tsr->kbuf = kbuf;\n\treq->flags |= REQ_F_BUFFER_SELECTED;\n\treturn kbuf;\n}\n\nstatic inline unsigned int io_put_recv_kbuf(struct io_kiocb *req)\n{\n\treturn io_put_kbuf(req, req->sr_msg.kbuf);\n}\n\nstatic int io_recvmsg_prep(struct io_kiocb *req,\n\t\t\t   const struct io_uring_sqe *sqe)\n{\n\tstruct io_async_msghdr *async_msg = req->async_data;\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tint ret;\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\tsr->msg_flags = READ_ONCE(sqe->msg_flags);\n\tsr->umsg = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\tsr->len = READ_ONCE(sqe->len);\n\tsr->bgid = READ_ONCE(sqe->buf_group);\n\n#ifdef CONFIG_COMPAT\n\tif (req->ctx->compat)\n\t\tsr->msg_flags |= MSG_CMSG_COMPAT;\n#endif\n\n\tif (!async_msg || !io_op_defs[req->opcode].needs_async_data)\n\t\treturn 0;\n\tret = io_recvmsg_copy_hdr(req, async_msg);\n\tif (!ret)\n\t\treq->flags |= REQ_F_NEED_CLEANUP;\n\treturn ret;\n}\n\nstatic int io_recvmsg(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\tstruct io_async_msghdr iomsg, *kmsg;\n\tstruct socket *sock;\n\tstruct io_buffer *kbuf;\n\tunsigned flags;\n\tint ret, cflags = 0;\n\n\tsock = sock_from_file(req->file, &ret);\n\tif (unlikely(!sock))\n\t\treturn ret;\n\n\tif (req->async_data) {\n\t\tkmsg = req->async_data;\n\t\tkmsg->msg.msg_name = &kmsg->addr;\n\t\t/* if iov is set, it's allocated already */\n\t\tif (!kmsg->iov)\n\t\t\tkmsg->iov = kmsg->fast_iov;\n\t\tkmsg->msg.msg_iter.iov = kmsg->iov;\n\t} else {\n\t\tret = io_recvmsg_copy_hdr(req, &iomsg);\n\t\tif (ret)\n\t\t\treturn ret;\n\t\tkmsg = &iomsg;\n\t}\n\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tkbuf = io_recv_buffer_select(req, !force_nonblock);\n\t\tif (IS_ERR(kbuf))\n\t\t\treturn PTR_ERR(kbuf);\n\t\tkmsg->fast_iov[0].iov_base = u64_to_user_ptr(kbuf->addr);\n\t\tiov_iter_init(&kmsg->msg.msg_iter, READ, kmsg->iov,\n\t\t\t\t1, req->sr_msg.len);\n\t}\n\n\tflags = req->sr_msg.msg_flags;\n\tif (flags & MSG_DONTWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\telse if (force_nonblock)\n\t\tflags |= MSG_DONTWAIT;\n\n\tret = __sys_recvmsg_sock(sock, &kmsg->msg, req->sr_msg.umsg,\n\t\t\t\t\tkmsg->uaddr, flags);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn io_setup_async_msg(req, kmsg);\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\n\n\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\tcflags = io_put_recv_kbuf(req);\n\tif (kmsg->iov != kmsg->fast_iov)\n\t\tkfree(kmsg->iov);\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, cflags, cs);\n\treturn 0;\n}\n\nstatic int io_recv(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\tstruct io_buffer *kbuf;\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct msghdr msg;\n\tvoid __user *buf = sr->buf;\n\tstruct socket *sock;\n\tstruct iovec iov;\n\tunsigned flags;\n\tint ret, cflags = 0;\n\n\tsock = sock_from_file(req->file, &ret);\n\tif (unlikely(!sock))\n\t\treturn ret;\n\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tkbuf = io_recv_buffer_select(req, !force_nonblock);\n\t\tif (IS_ERR(kbuf))\n\t\t\treturn PTR_ERR(kbuf);\n\t\tbuf = u64_to_user_ptr(kbuf->addr);\n\t}\n\n\tret = import_single_range(READ, buf, sr->len, &iov, &msg.msg_iter);\n\tif (unlikely(ret))\n\t\tgoto out_free;\n\n\tmsg.msg_name = NULL;\n\tmsg.msg_control = NULL;\n\tmsg.msg_controllen = 0;\n\tmsg.msg_namelen = 0;\n\tmsg.msg_iocb = NULL;\n\tmsg.msg_flags = 0;\n\n\tflags = req->sr_msg.msg_flags;\n\tif (flags & MSG_DONTWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\telse if (force_nonblock)\n\t\tflags |= MSG_DONTWAIT;\n\n\tret = sock_recvmsg(sock, &msg, flags);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn -EAGAIN;\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\nout_free:\n\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\tcflags = io_put_recv_kbuf(req);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, cflags, cs);\n\treturn 0;\n}\n\nstatic int io_accept_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_accept *accept = &req->accept;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->len || sqe->buf_index)\n\t\treturn -EINVAL;\n\n\taccept->addr = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\taccept->addr_len = u64_to_user_ptr(READ_ONCE(sqe->addr2));\n\taccept->flags = READ_ONCE(sqe->accept_flags);\n\taccept->nofile = rlimit(RLIMIT_NOFILE);\n\treturn 0;\n}\n\nstatic int io_accept(struct io_kiocb *req, bool force_nonblock,\n\t\t     struct io_comp_state *cs)\n{\n\tstruct io_accept *accept = &req->accept;\n\tunsigned int file_flags = force_nonblock ? O_NONBLOCK : 0;\n\tint ret;\n\n\tif (req->file->f_flags & O_NONBLOCK)\n\t\treq->flags |= REQ_F_NOWAIT;\n\n\tret = __sys_accept4_file(req->file, file_flags, accept->addr,\n\t\t\t\t\taccept->addr_len, accept->flags,\n\t\t\t\t\taccept->nofile);\n\tif (ret == -EAGAIN && force_nonblock)\n\t\treturn -EAGAIN;\n\tif (ret < 0) {\n\t\tif (ret == -ERESTARTSYS)\n\t\t\tret = -EINTR;\n\t\treq_set_fail_links(req);\n\t}\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_connect_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_connect *conn = &req->connect;\n\tstruct io_async_connect *io = req->async_data;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->len || sqe->buf_index || sqe->rw_flags)\n\t\treturn -EINVAL;\n\n\tconn->addr = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\tconn->addr_len =  READ_ONCE(sqe->addr2);\n\n\tif (!io)\n\t\treturn 0;\n\n\treturn move_addr_to_kernel(conn->addr, conn->addr_len,\n\t\t\t\t\t&io->address);\n}\n\nstatic int io_connect(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\tstruct io_async_connect __io, *io;\n\tunsigned file_flags;\n\tint ret;\n\n\tif (req->async_data) {\n\t\tio = req->async_data;\n\t} else {\n\t\tret = move_addr_to_kernel(req->connect.addr,\n\t\t\t\t\t\treq->connect.addr_len,\n\t\t\t\t\t\t&__io.address);\n\t\tif (ret)\n\t\t\tgoto out;\n\t\tio = &__io;\n\t}\n\n\tfile_flags = force_nonblock ? O_NONBLOCK : 0;\n\n\tret = __sys_connect_file(req->file, &io->address,\n\t\t\t\t\treq->connect.addr_len, file_flags);\n\tif ((ret == -EAGAIN || ret == -EINPROGRESS) && force_nonblock) {\n\t\tif (req->async_data)\n\t\t\treturn -EAGAIN;\n\t\tif (io_alloc_async_data(req)) {\n\t\t\tret = -ENOMEM;\n\t\t\tgoto out;\n\t\t}\n\t\tio = req->async_data;\n\t\tmemcpy(req->async_data, &__io, sizeof(__io));\n\t\treturn -EAGAIN;\n\t}\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\nout:\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n#else /* !CONFIG_NET */\nstatic int io_sendmsg_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_sendmsg(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_send(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_recvmsg_prep(struct io_kiocb *req,\n\t\t\t   const struct io_uring_sqe *sqe)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_recvmsg(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_recv(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_accept_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_accept(struct io_kiocb *req, bool force_nonblock,\n\t\t     struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_connect_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_connect(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n#endif /* CONFIG_NET */\n\nstruct io_poll_table {\n\tstruct poll_table_struct pt;\n\tstruct io_kiocb *req;\n\tint error;\n};\n\nstatic int __io_async_wake(struct io_kiocb *req, struct io_poll_iocb *poll,\n\t\t\t   __poll_t mask, task_work_func_t func)\n{\n\tbool twa_signal_ok;\n\tint ret;\n\n\t/* for instances that support it check for an event match first: */\n\tif (mask && !(mask & poll->events))\n\t\treturn 0;\n\n\ttrace_io_uring_task_add(req->ctx, req->opcode, req->user_data, mask);\n\n\tlist_del_init(&poll->wait.entry);\n\n\treq->result = mask;\n\tinit_task_work(&req->task_work, func);\n\tpercpu_ref_get(&req->ctx->refs);\n\n\t/*\n\t * If we using the signalfd wait_queue_head for this wakeup, then\n\t * it's not safe to use TWA_SIGNAL as we could be recursing on the\n\t * tsk->sighand->siglock on doing the wakeup. Should not be needed\n\t * either, as the normal wakeup will suffice.\n\t */\n\ttwa_signal_ok = (poll->head != &req->task->sighand->signalfd_wqh);\n\n\t/*\n\t * If this fails, then the task is exiting. When a task exits, the\n\t * work gets canceled, so just cancel this request as well instead\n\t * of executing it. We can't safely execute it anyway, as we may not\n\t * have the needed state needed for it anyway.\n\t */\n\tret = io_req_task_work_add(req, twa_signal_ok);\n\tif (unlikely(ret)) {\n\t\tstruct task_struct *tsk;\n\n\t\tWRITE_ONCE(poll->canceled, true);\n\t\ttsk = io_wq_get_task(req->ctx->io_wq);\n\t\ttask_work_add(tsk, &req->task_work, 0);\n\t\twake_up_process(tsk);\n\t}\n\treturn 1;\n}\n\nstatic bool io_poll_rewait(struct io_kiocb *req, struct io_poll_iocb *poll)\n\t__acquires(&req->ctx->completion_lock)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!req->result && !READ_ONCE(poll->canceled)) {\n\t\tstruct poll_table_struct pt = { ._key = poll->events };\n\n\t\treq->result = vfs_poll(req->file, &pt) & poll->events;\n\t}\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tif (!req->result && !READ_ONCE(poll->canceled)) {\n\t\tadd_wait_queue(poll->head, &poll->wait);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nstatic struct io_poll_iocb *io_poll_get_double(struct io_kiocb *req)\n{\n\t/* pure poll stashes this in ->async_data, poll driven retry elsewhere */\n\tif (req->opcode == IORING_OP_POLL_ADD)\n\t\treturn req->async_data;\n\treturn req->apoll->double_poll;\n}\n\nstatic struct io_poll_iocb *io_poll_get_single(struct io_kiocb *req)\n{\n\tif (req->opcode == IORING_OP_POLL_ADD)\n\t\treturn &req->poll;\n\treturn &req->apoll->poll;\n}\n\nstatic void io_poll_remove_double(struct io_kiocb *req)\n{\n\tstruct io_poll_iocb *poll = io_poll_get_double(req);\n\n\tlockdep_assert_held(&req->ctx->completion_lock);\n\n\tif (poll && poll->head) {\n\t\tstruct wait_queue_head *head = poll->head;\n\n\t\tspin_lock(&head->lock);\n\t\tlist_del_init(&poll->wait.entry);\n\t\tif (poll->wait.private)\n\t\t\trefcount_dec(&req->refs);\n\t\tpoll->head = NULL;\n\t\tspin_unlock(&head->lock);\n\t}\n}\n\nstatic void io_poll_complete(struct io_kiocb *req, __poll_t mask, int error)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tio_poll_remove_double(req);\n\treq->poll.done = true;\n\tio_cqring_fill_event(req, error ? error : mangle_poll(mask));\n\tio_commit_cqring(ctx);\n}\n\nstatic void io_poll_task_handler(struct io_kiocb *req, struct io_kiocb **nxt)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (io_poll_rewait(req, &req->poll)) {\n\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\treturn;\n\t}\n\n\thash_del(&req->hash_node);\n\tio_poll_complete(req, req->result, 0);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\t*nxt = io_put_req_find_next(req);\n\tio_cqring_ev_posted(ctx);\n}\n\nstatic void io_poll_task_func(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_kiocb *nxt = NULL;\n\n\tio_poll_task_handler(req, &nxt);\n\tif (nxt)\n\t\t__io_req_task_submit(nxt);\n\tpercpu_ref_put(&ctx->refs);\n}\n\nstatic int io_poll_double_wake(struct wait_queue_entry *wait, unsigned mode,\n\t\t\t       int sync, void *key)\n{\n\tstruct io_kiocb *req = wait->private;\n\tstruct io_poll_iocb *poll = io_poll_get_single(req);\n\t__poll_t mask = key_to_poll(key);\n\n\t/* for instances that support it check for an event match first: */\n\tif (mask && !(mask & poll->events))\n\t\treturn 0;\n\n\tlist_del_init(&wait->entry);\n\n\tif (poll && poll->head) {\n\t\tbool done;\n\n\t\tspin_lock(&poll->head->lock);\n\t\tdone = list_empty(&poll->wait.entry);\n\t\tif (!done)\n\t\t\tlist_del_init(&poll->wait.entry);\n\t\t/* make sure double remove sees this as being gone */\n\t\twait->private = NULL;\n\t\tspin_unlock(&poll->head->lock);\n\t\tif (!done)\n\t\t\t__io_async_wake(req, poll, mask, io_poll_task_func);\n\t}\n\trefcount_dec(&req->refs);\n\treturn 1;\n}\n\nstatic void io_init_poll_iocb(struct io_poll_iocb *poll, __poll_t events,\n\t\t\t      wait_queue_func_t wake_func)\n{\n\tpoll->head = NULL;\n\tpoll->done = false;\n\tpoll->canceled = false;\n\tpoll->events = events;\n\tINIT_LIST_HEAD(&poll->wait.entry);\n\tinit_waitqueue_func_entry(&poll->wait, wake_func);\n}\n\nstatic void __io_queue_proc(struct io_poll_iocb *poll, struct io_poll_table *pt,\n\t\t\t    struct wait_queue_head *head,\n\t\t\t    struct io_poll_iocb **poll_ptr)\n{\n\tstruct io_kiocb *req = pt->req;\n\n\t/*\n\t * If poll->head is already set, it's because the file being polled\n\t * uses multiple waitqueues for poll handling (eg one for read, one\n\t * for write). Setup a separate io_poll_iocb if this happens.\n\t */\n\tif (unlikely(poll->head)) {\n\t\t/* already have a 2nd entry, fail a third attempt */\n\t\tif (*poll_ptr) {\n\t\t\tpt->error = -EINVAL;\n\t\t\treturn;\n\t\t}\n\t\tpoll = kmalloc(sizeof(*poll), GFP_ATOMIC);\n\t\tif (!poll) {\n\t\t\tpt->error = -ENOMEM;\n\t\t\treturn;\n\t\t}\n\t\tio_init_poll_iocb(poll, req->poll.events, io_poll_double_wake);\n\t\trefcount_inc(&req->refs);\n\t\tpoll->wait.private = req;\n\t\t*poll_ptr = poll;\n\t}\n\n\tpt->error = 0;\n\tpoll->head = head;\n\n\tif (poll->events & EPOLLEXCLUSIVE)\n\t\tadd_wait_queue_exclusive(head, &poll->wait);\n\telse\n\t\tadd_wait_queue(head, &poll->wait);\n}\n\nstatic void io_async_queue_proc(struct file *file, struct wait_queue_head *head,\n\t\t\t       struct poll_table_struct *p)\n{\n\tstruct io_poll_table *pt = container_of(p, struct io_poll_table, pt);\n\tstruct async_poll *apoll = pt->req->apoll;\n\n\t__io_queue_proc(&apoll->poll, pt, head, &apoll->double_poll);\n}\n\nstatic void io_async_task_func(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\tstruct async_poll *apoll = req->apoll;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\ttrace_io_uring_task_run(req->ctx, req->opcode, req->user_data);\n\n\tif (io_poll_rewait(req, &apoll->poll)) {\n\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\tpercpu_ref_put(&ctx->refs);\n\t\treturn;\n\t}\n\n\t/* If req is still hashed, it cannot have been canceled. Don't check. */\n\tif (hash_hashed(&req->hash_node))\n\t\thash_del(&req->hash_node);\n\n\tio_poll_remove_double(req);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tif (!READ_ONCE(apoll->poll.canceled))\n\t\t__io_req_task_submit(req);\n\telse\n\t\t__io_req_task_cancel(req, -ECANCELED);\n\n\tpercpu_ref_put(&ctx->refs);\n\tkfree(apoll->double_poll);\n\tkfree(apoll);\n}\n\nstatic int io_async_wake(struct wait_queue_entry *wait, unsigned mode, int sync,\n\t\t\tvoid *key)\n{\n\tstruct io_kiocb *req = wait->private;\n\tstruct io_poll_iocb *poll = &req->apoll->poll;\n\n\ttrace_io_uring_poll_wake(req->ctx, req->opcode, req->user_data,\n\t\t\t\t\tkey_to_poll(key));\n\n\treturn __io_async_wake(req, poll, key_to_poll(key), io_async_task_func);\n}\n\nstatic void io_poll_req_insert(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct hlist_head *list;\n\n\tlist = &ctx->cancel_hash[hash_long(req->user_data, ctx->cancel_hash_bits)];\n\thlist_add_head(&req->hash_node, list);\n}\n\nstatic __poll_t __io_arm_poll_handler(struct io_kiocb *req,\n\t\t\t\t      struct io_poll_iocb *poll,\n\t\t\t\t      struct io_poll_table *ipt, __poll_t mask,\n\t\t\t\t      wait_queue_func_t wake_func)\n\t__acquires(&ctx->completion_lock)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tbool cancel = false;\n\n\tio_init_poll_iocb(poll, mask, wake_func);\n\tpoll->file = req->file;\n\tpoll->wait.private = req;\n\n\tipt->pt._key = mask;\n\tipt->req = req;\n\tipt->error = -EINVAL;\n\n\tmask = vfs_poll(req->file, &ipt->pt) & poll->events;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tif (likely(poll->head)) {\n\t\tspin_lock(&poll->head->lock);\n\t\tif (unlikely(list_empty(&poll->wait.entry))) {\n\t\t\tif (ipt->error)\n\t\t\t\tcancel = true;\n\t\t\tipt->error = 0;\n\t\t\tmask = 0;\n\t\t}\n\t\tif (mask || ipt->error)\n\t\t\tlist_del_init(&poll->wait.entry);\n\t\telse if (cancel)\n\t\t\tWRITE_ONCE(poll->canceled, true);\n\t\telse if (!poll->done) /* actually waiting for an event */\n\t\t\tio_poll_req_insert(req);\n\t\tspin_unlock(&poll->head->lock);\n\t}\n\n\treturn mask;\n}\n\nstatic bool io_arm_poll_handler(struct io_kiocb *req)\n{\n\tconst struct io_op_def *def = &io_op_defs[req->opcode];\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct async_poll *apoll;\n\tstruct io_poll_table ipt;\n\t__poll_t mask, ret;\n\tint rw;\n\n\tif (!req->file || !file_can_poll(req->file))\n\t\treturn false;\n\tif (req->flags & REQ_F_POLLED)\n\t\treturn false;\n\tif (def->pollin)\n\t\trw = READ;\n\telse if (def->pollout)\n\t\trw = WRITE;\n\telse\n\t\treturn false;\n\t/* if we can't nonblock try, then no point in arming a poll handler */\n\tif (!io_file_supports_async(req->file, rw))\n\t\treturn false;\n\n\tapoll = kmalloc(sizeof(*apoll), GFP_ATOMIC);\n\tif (unlikely(!apoll))\n\t\treturn false;\n\tapoll->double_poll = NULL;\n\n\treq->flags |= REQ_F_POLLED;\n\treq->apoll = apoll;\n\tINIT_HLIST_NODE(&req->hash_node);\n\n\tmask = 0;\n\tif (def->pollin)\n\t\tmask |= POLLIN | POLLRDNORM;\n\tif (def->pollout)\n\t\tmask |= POLLOUT | POLLWRNORM;\n\n\t/* If reading from MSG_ERRQUEUE using recvmsg, ignore POLLIN */\n\tif ((req->opcode == IORING_OP_RECVMSG) &&\n\t    (req->sr_msg.msg_flags & MSG_ERRQUEUE))\n\t\tmask &= ~POLLIN;\n\n\tmask |= POLLERR | POLLPRI;\n\n\tipt.pt._qproc = io_async_queue_proc;\n\n\tret = __io_arm_poll_handler(req, &apoll->poll, &ipt, mask,\n\t\t\t\t\tio_async_wake);\n\tif (ret || ipt.error) {\n\t\tio_poll_remove_double(req);\n\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\tkfree(apoll->double_poll);\n\t\tkfree(apoll);\n\t\treturn false;\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\ttrace_io_uring_poll_arm(ctx, req->opcode, req->user_data, mask,\n\t\t\t\t\tapoll->poll.events);\n\treturn true;\n}\n\nstatic bool __io_poll_remove_one(struct io_kiocb *req,\n\t\t\t\t struct io_poll_iocb *poll)\n{\n\tbool do_complete = false;\n\n\tspin_lock(&poll->head->lock);\n\tWRITE_ONCE(poll->canceled, true);\n\tif (!list_empty(&poll->wait.entry)) {\n\t\tlist_del_init(&poll->wait.entry);\n\t\tdo_complete = true;\n\t}\n\tspin_unlock(&poll->head->lock);\n\thash_del(&req->hash_node);\n\treturn do_complete;\n}\n\nstatic bool io_poll_remove_one(struct io_kiocb *req)\n{\n\tbool do_complete;\n\n\tio_poll_remove_double(req);\n\n\tif (req->opcode == IORING_OP_POLL_ADD) {\n\t\tdo_complete = __io_poll_remove_one(req, &req->poll);\n\t} else {\n\t\tstruct async_poll *apoll = req->apoll;\n\n\t\t/* non-poll requests have submit ref still */\n\t\tdo_complete = __io_poll_remove_one(req, &apoll->poll);\n\t\tif (do_complete) {\n\t\t\tio_put_req(req);\n\t\t\tkfree(apoll->double_poll);\n\t\t\tkfree(apoll);\n\t\t}\n\t}\n\n\tif (do_complete) {\n\t\tio_cqring_fill_event(req, -ECANCELED);\n\t\tio_commit_cqring(req->ctx);\n\t\treq_set_fail_links(req);\n\t\tio_put_req_deferred(req, 1);\n\t}\n\n\treturn do_complete;\n}\n\n/*\n * Returns true if we found and killed one or more poll requests\n */\nstatic bool io_poll_remove_all(struct io_ring_ctx *ctx, struct task_struct *tsk)\n{\n\tstruct hlist_node *tmp;\n\tstruct io_kiocb *req;\n\tint posted = 0, i;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tfor (i = 0; i < (1U << ctx->cancel_hash_bits); i++) {\n\t\tstruct hlist_head *list;\n\n\t\tlist = &ctx->cancel_hash[i];\n\t\thlist_for_each_entry_safe(req, tmp, list, hash_node) {\n\t\t\tif (io_task_match(req, tsk))\n\t\t\t\tposted += io_poll_remove_one(req);\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tif (posted)\n\t\tio_cqring_ev_posted(ctx);\n\n\treturn posted != 0;\n}\n\nstatic int io_poll_cancel(struct io_ring_ctx *ctx, __u64 sqe_addr)\n{\n\tstruct hlist_head *list;\n\tstruct io_kiocb *req;\n\n\tlist = &ctx->cancel_hash[hash_long(sqe_addr, ctx->cancel_hash_bits)];\n\thlist_for_each_entry(req, list, hash_node) {\n\t\tif (sqe_addr != req->user_data)\n\t\t\tcontinue;\n\t\tif (io_poll_remove_one(req))\n\t\t\treturn 0;\n\t\treturn -EALREADY;\n\t}\n\n\treturn -ENOENT;\n}\n\nstatic int io_poll_remove_prep(struct io_kiocb *req,\n\t\t\t       const struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->off || sqe->len || sqe->buf_index ||\n\t    sqe->poll_events)\n\t\treturn -EINVAL;\n\n\treq->poll.addr = READ_ONCE(sqe->addr);\n\treturn 0;\n}\n\n/*\n * Find a running poll command that matches one specified in sqe->addr,\n * and remove it if found.\n */\nstatic int io_poll_remove(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tu64 addr;\n\tint ret;\n\n\taddr = req->poll.addr;\n\tspin_lock_irq(&ctx->completion_lock);\n\tret = io_poll_cancel(ctx, addr);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_poll_wake(struct wait_queue_entry *wait, unsigned mode, int sync,\n\t\t\tvoid *key)\n{\n\tstruct io_kiocb *req = wait->private;\n\tstruct io_poll_iocb *poll = &req->poll;\n\n\treturn __io_async_wake(req, poll, key_to_poll(key), io_poll_task_func);\n}\n\nstatic void io_poll_queue_proc(struct file *file, struct wait_queue_head *head,\n\t\t\t       struct poll_table_struct *p)\n{\n\tstruct io_poll_table *pt = container_of(p, struct io_poll_table, pt);\n\n\t__io_queue_proc(&pt->req->poll, pt, head, (struct io_poll_iocb **) &pt->req->async_data);\n}\n\nstatic int io_poll_add_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_poll_iocb *poll = &req->poll;\n\tu32 events;\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (sqe->addr || sqe->ioprio || sqe->off || sqe->len || sqe->buf_index)\n\t\treturn -EINVAL;\n\tif (!poll->file)\n\t\treturn -EBADF;\n\n\tevents = READ_ONCE(sqe->poll32_events);\n#ifdef __BIG_ENDIAN\n\tevents = swahw32(events);\n#endif\n\tpoll->events = demangle_poll(events) | EPOLLERR | EPOLLHUP |\n\t\t       (events & EPOLLEXCLUSIVE);\n\treturn 0;\n}\n\nstatic int io_poll_add(struct io_kiocb *req)\n{\n\tstruct io_poll_iocb *poll = &req->poll;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_poll_table ipt;\n\t__poll_t mask;\n\n\tINIT_HLIST_NODE(&req->hash_node);\n\tipt.pt._qproc = io_poll_queue_proc;\n\n\tmask = __io_arm_poll_handler(req, &req->poll, &ipt, poll->events,\n\t\t\t\t\tio_poll_wake);\n\n\tif (mask) { /* no async, we'd stolen it */\n\t\tipt.error = 0;\n\t\tio_poll_complete(req, mask, 0);\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tif (mask) {\n\t\tio_cqring_ev_posted(ctx);\n\t\tio_put_req(req);\n\t}\n\treturn ipt.error;\n}\n\nstatic enum hrtimer_restart io_timeout_fn(struct hrtimer *timer)\n{\n\tstruct io_timeout_data *data = container_of(timer,\n\t\t\t\t\t\tstruct io_timeout_data, timer);\n\tstruct io_kiocb *req = data->req;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\tlist_del_init(&req->timeout.list);\n\tatomic_set(&req->ctx->cq_timeouts,\n\t\tatomic_read(&req->ctx->cq_timeouts) + 1);\n\n\tio_cqring_fill_event(req, -ETIME);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tio_cqring_ev_posted(ctx);\n\treq_set_fail_links(req);\n\tio_put_req(req);\n\treturn HRTIMER_NORESTART;\n}\n\nstatic int __io_timeout_cancel(struct io_kiocb *req)\n{\n\tstruct io_timeout_data *io = req->async_data;\n\tint ret;\n\n\tret = hrtimer_try_to_cancel(&io->timer);\n\tif (ret == -1)\n\t\treturn -EALREADY;\n\tlist_del_init(&req->timeout.list);\n\n\treq_set_fail_links(req);\n\tio_cqring_fill_event(req, -ECANCELED);\n\tio_put_req_deferred(req, 1);\n\treturn 0;\n}\n\nstatic int io_timeout_cancel(struct io_ring_ctx *ctx, __u64 user_data)\n{\n\tstruct io_kiocb *req;\n\tint ret = -ENOENT;\n\n\tlist_for_each_entry(req, &ctx->timeout_list, timeout.list) {\n\t\tif (user_data == req->user_data) {\n\t\t\tret = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (ret == -ENOENT)\n\t\treturn ret;\n\n\treturn __io_timeout_cancel(req);\n}\n\nstatic int io_timeout_remove_prep(struct io_kiocb *req,\n\t\t\t\t  const struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(req->flags & (REQ_F_FIXED_FILE | REQ_F_BUFFER_SELECT)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->buf_index || sqe->len || sqe->timeout_flags)\n\t\treturn -EINVAL;\n\n\treq->timeout_rem.addr = READ_ONCE(sqe->addr);\n\treturn 0;\n}\n\n/*\n * Remove or update an existing timeout command\n */\nstatic int io_timeout_remove(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tret = io_timeout_cancel(ctx, req->timeout_rem.addr);\n\n\tio_cqring_fill_event(req, ret);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irq(&ctx->completion_lock);\n\tio_cqring_ev_posted(ctx);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_put_req(req);\n\treturn 0;\n}\n\nstatic int io_timeout_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe,\n\t\t\t   bool is_timeout_link)\n{\n\tstruct io_timeout_data *data;\n\tunsigned flags;\n\tu32 off = READ_ONCE(sqe->off);\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->buf_index || sqe->len != 1)\n\t\treturn -EINVAL;\n\tif (off && is_timeout_link)\n\t\treturn -EINVAL;\n\tflags = READ_ONCE(sqe->timeout_flags);\n\tif (flags & ~IORING_TIMEOUT_ABS)\n\t\treturn -EINVAL;\n\n\treq->timeout.off = off;\n\n\tif (!req->async_data && io_alloc_async_data(req))\n\t\treturn -ENOMEM;\n\n\tdata = req->async_data;\n\tdata->req = req;\n\n\tif (get_timespec64(&data->ts, u64_to_user_ptr(sqe->addr)))\n\t\treturn -EFAULT;\n\n\tif (flags & IORING_TIMEOUT_ABS)\n\t\tdata->mode = HRTIMER_MODE_ABS;\n\telse\n\t\tdata->mode = HRTIMER_MODE_REL;\n\n\thrtimer_init(&data->timer, CLOCK_MONOTONIC, data->mode);\n\treturn 0;\n}\n\nstatic int io_timeout(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_timeout_data *data = req->async_data;\n\tstruct list_head *entry;\n\tu32 tail, off = req->timeout.off;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\n\t/*\n\t * sqe->off holds how many events that need to occur for this\n\t * timeout event to be satisfied. If it isn't set, then this is\n\t * a pure timeout request, sequence isn't used.\n\t */\n\tif (io_is_timeout_noseq(req)) {\n\t\tentry = ctx->timeout_list.prev;\n\t\tgoto add;\n\t}\n\n\ttail = ctx->cached_cq_tail - atomic_read(&ctx->cq_timeouts);\n\treq->timeout.target_seq = tail + off;\n\n\t/*\n\t * Insertion sort, ensuring the first entry in the list is always\n\t * the one we need first.\n\t */\n\tlist_for_each_prev(entry, &ctx->timeout_list) {\n\t\tstruct io_kiocb *nxt = list_entry(entry, struct io_kiocb,\n\t\t\t\t\t\t  timeout.list);\n\n\t\tif (io_is_timeout_noseq(nxt))\n\t\t\tcontinue;\n\t\t/* nxt.seq is behind @tail, otherwise would've been completed */\n\t\tif (off >= nxt->timeout.target_seq - tail)\n\t\t\tbreak;\n\t}\nadd:\n\tlist_add(&req->timeout.list, entry);\n\tdata->timer.function = io_timeout_fn;\n\thrtimer_start(&data->timer, timespec64_to_ktime(data->ts), data->mode);\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn 0;\n}\n\nstatic bool io_cancel_cb(struct io_wq_work *work, void *data)\n{\n\tstruct io_kiocb *req = container_of(work, struct io_kiocb, work);\n\n\treturn req->user_data == (unsigned long) data;\n}\n\nstatic int io_async_cancel_one(struct io_ring_ctx *ctx, void *sqe_addr)\n{\n\tenum io_wq_cancel cancel_ret;\n\tint ret = 0;\n\n\tcancel_ret = io_wq_cancel_cb(ctx->io_wq, io_cancel_cb, sqe_addr, false);\n\tswitch (cancel_ret) {\n\tcase IO_WQ_CANCEL_OK:\n\t\tret = 0;\n\t\tbreak;\n\tcase IO_WQ_CANCEL_RUNNING:\n\t\tret = -EALREADY;\n\t\tbreak;\n\tcase IO_WQ_CANCEL_NOTFOUND:\n\t\tret = -ENOENT;\n\t\tbreak;\n\t}\n\n\treturn ret;\n}\n\nstatic void io_async_find_and_cancel(struct io_ring_ctx *ctx,\n\t\t\t\t     struct io_kiocb *req, __u64 sqe_addr,\n\t\t\t\t     int success_ret)\n{\n\tunsigned long flags;\n\tint ret;\n\n\tret = io_async_cancel_one(ctx, (void *) (unsigned long) sqe_addr);\n\tif (ret != -ENOENT) {\n\t\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\t\tgoto done;\n\t}\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\tret = io_timeout_cancel(ctx, sqe_addr);\n\tif (ret != -ENOENT)\n\t\tgoto done;\n\tret = io_poll_cancel(ctx, sqe_addr);\ndone:\n\tif (!ret)\n\t\tret = success_ret;\n\tio_cqring_fill_event(req, ret);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\tio_cqring_ev_posted(ctx);\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_put_req(req);\n}\n\nstatic int io_async_cancel_prep(struct io_kiocb *req,\n\t\t\t\tconst struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(req->flags & (REQ_F_FIXED_FILE | REQ_F_BUFFER_SELECT)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->off || sqe->len || sqe->cancel_flags)\n\t\treturn -EINVAL;\n\n\treq->cancel.addr = READ_ONCE(sqe->addr);\n\treturn 0;\n}\n\nstatic int io_async_cancel(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tio_async_find_and_cancel(ctx, req, req->cancel.addr, 0);\n\treturn 0;\n}\n\nstatic int io_files_update_prep(struct io_kiocb *req,\n\t\t\t\tconst struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & IORING_SETUP_SQPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(req->flags & (REQ_F_FIXED_FILE | REQ_F_BUFFER_SELECT)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->rw_flags)\n\t\treturn -EINVAL;\n\n\treq->files_update.offset = READ_ONCE(sqe->off);\n\treq->files_update.nr_args = READ_ONCE(sqe->len);\n\tif (!req->files_update.nr_args)\n\t\treturn -EINVAL;\n\treq->files_update.arg = READ_ONCE(sqe->addr);\n\treturn 0;\n}\n\nstatic int io_files_update(struct io_kiocb *req, bool force_nonblock,\n\t\t\t   struct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_uring_files_update up;\n\tint ret;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tup.offset = req->files_update.offset;\n\tup.fds = req->files_update.arg;\n\n\tmutex_lock(&ctx->uring_lock);\n\tret = __io_sqe_files_update(ctx, &up, req->files_update.nr_args);\n\tmutex_unlock(&ctx->uring_lock);\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_req_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tswitch (req->opcode) {\n\tcase IORING_OP_NOP:\n\t\treturn 0;\n\tcase IORING_OP_READV:\n\tcase IORING_OP_READ_FIXED:\n\tcase IORING_OP_READ:\n\t\treturn io_read_prep(req, sqe);\n\tcase IORING_OP_WRITEV:\n\tcase IORING_OP_WRITE_FIXED:\n\tcase IORING_OP_WRITE:\n\t\treturn io_write_prep(req, sqe);\n\tcase IORING_OP_POLL_ADD:\n\t\treturn io_poll_add_prep(req, sqe);\n\tcase IORING_OP_POLL_REMOVE:\n\t\treturn io_poll_remove_prep(req, sqe);\n\tcase IORING_OP_FSYNC:\n\t\treturn io_prep_fsync(req, sqe);\n\tcase IORING_OP_SYNC_FILE_RANGE:\n\t\treturn io_prep_sfr(req, sqe);\n\tcase IORING_OP_SENDMSG:\n\tcase IORING_OP_SEND:\n\t\treturn io_sendmsg_prep(req, sqe);\n\tcase IORING_OP_RECVMSG:\n\tcase IORING_OP_RECV:\n\t\treturn io_recvmsg_prep(req, sqe);\n\tcase IORING_OP_CONNECT:\n\t\treturn io_connect_prep(req, sqe);\n\tcase IORING_OP_TIMEOUT:\n\t\treturn io_timeout_prep(req, sqe, false);\n\tcase IORING_OP_TIMEOUT_REMOVE:\n\t\treturn io_timeout_remove_prep(req, sqe);\n\tcase IORING_OP_ASYNC_CANCEL:\n\t\treturn io_async_cancel_prep(req, sqe);\n\tcase IORING_OP_LINK_TIMEOUT:\n\t\treturn io_timeout_prep(req, sqe, true);\n\tcase IORING_OP_ACCEPT:\n\t\treturn io_accept_prep(req, sqe);\n\tcase IORING_OP_FALLOCATE:\n\t\treturn io_fallocate_prep(req, sqe);\n\tcase IORING_OP_OPENAT:\n\t\treturn io_openat_prep(req, sqe);\n\tcase IORING_OP_CLOSE:\n\t\treturn io_close_prep(req, sqe);\n\tcase IORING_OP_FILES_UPDATE:\n\t\treturn io_files_update_prep(req, sqe);\n\tcase IORING_OP_STATX:\n\t\treturn io_statx_prep(req, sqe);\n\tcase IORING_OP_FADVISE:\n\t\treturn io_fadvise_prep(req, sqe);\n\tcase IORING_OP_MADVISE:\n\t\treturn io_madvise_prep(req, sqe);\n\tcase IORING_OP_OPENAT2:\n\t\treturn io_openat2_prep(req, sqe);\n\tcase IORING_OP_EPOLL_CTL:\n\t\treturn io_epoll_ctl_prep(req, sqe);\n\tcase IORING_OP_SPLICE:\n\t\treturn io_splice_prep(req, sqe);\n\tcase IORING_OP_PROVIDE_BUFFERS:\n\t\treturn io_provide_buffers_prep(req, sqe);\n\tcase IORING_OP_REMOVE_BUFFERS:\n\t\treturn io_remove_buffers_prep(req, sqe);\n\tcase IORING_OP_TEE:\n\t\treturn io_tee_prep(req, sqe);\n\t}\n\n\tprintk_once(KERN_WARNING \"io_uring: unhandled opcode %d\\n\",\n\t\t\treq->opcode);\n\treturn-EINVAL;\n}\n\nstatic int io_req_defer_prep(struct io_kiocb *req,\n\t\t\t     const struct io_uring_sqe *sqe)\n{\n\tif (!sqe)\n\t\treturn 0;\n\tif (io_alloc_async_data(req))\n\t\treturn -EAGAIN;\n\treturn io_req_prep(req, sqe);\n}\n\nstatic u32 io_get_sequence(struct io_kiocb *req)\n{\n\tstruct io_kiocb *pos;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tu32 total_submitted, nr_reqs = 1;\n\n\tif (req->flags & REQ_F_LINK_HEAD)\n\t\tlist_for_each_entry(pos, &req->link_list, link_list)\n\t\t\tnr_reqs++;\n\n\ttotal_submitted = ctx->cached_sq_head - ctx->cached_sq_dropped;\n\treturn total_submitted - nr_reqs;\n}\n\nstatic int io_req_defer(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_defer_entry *de;\n\tint ret;\n\tu32 seq;\n\n\t/* Still need defer if there is pending req in defer list. */\n\tif (likely(list_empty_careful(&ctx->defer_list) &&\n\t\t!(req->flags & REQ_F_IO_DRAIN)))\n\t\treturn 0;\n\n\tseq = io_get_sequence(req);\n\t/* Still a chance to pass the sequence check */\n\tif (!req_need_defer(req, seq) && list_empty_careful(&ctx->defer_list))\n\t\treturn 0;\n\n\tif (!req->async_data) {\n\t\tret = io_req_defer_prep(req, sqe);\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\tio_prep_async_link(req);\n\tde = kmalloc(sizeof(*de), GFP_KERNEL);\n\tif (!de)\n\t\treturn -ENOMEM;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tif (!req_need_defer(req, seq) && list_empty(&ctx->defer_list)) {\n\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\tkfree(de);\n\t\tio_queue_async_work(req);\n\t\treturn -EIOCBQUEUED;\n\t}\n\n\ttrace_io_uring_defer(ctx, req, req->user_data);\n\tde->req = req;\n\tde->seq = seq;\n\tlist_add_tail(&de->list, &ctx->defer_list);\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn -EIOCBQUEUED;\n}\n\nstatic void io_req_drop_files(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->inflight_lock, flags);\n\tlist_del(&req->inflight_entry);\n\tif (waitqueue_active(&ctx->inflight_wait))\n\t\twake_up(&ctx->inflight_wait);\n\tspin_unlock_irqrestore(&ctx->inflight_lock, flags);\n\treq->flags &= ~REQ_F_INFLIGHT;\n\tput_files_struct(req->work.identity->files);\n\tput_nsproxy(req->work.identity->nsproxy);\n\treq->work.flags &= ~IO_WQ_WORK_FILES;\n}\n\nstatic void __io_clean_op(struct io_kiocb *req)\n{\n\tif (req->flags & REQ_F_BUFFER_SELECTED) {\n\t\tswitch (req->opcode) {\n\t\tcase IORING_OP_READV:\n\t\tcase IORING_OP_READ_FIXED:\n\t\tcase IORING_OP_READ:\n\t\t\tkfree((void *)(unsigned long)req->rw.addr);\n\t\t\tbreak;\n\t\tcase IORING_OP_RECVMSG:\n\t\tcase IORING_OP_RECV:\n\t\t\tkfree(req->sr_msg.kbuf);\n\t\t\tbreak;\n\t\t}\n\t\treq->flags &= ~REQ_F_BUFFER_SELECTED;\n\t}\n\n\tif (req->flags & REQ_F_NEED_CLEANUP) {\n\t\tswitch (req->opcode) {\n\t\tcase IORING_OP_READV:\n\t\tcase IORING_OP_READ_FIXED:\n\t\tcase IORING_OP_READ:\n\t\tcase IORING_OP_WRITEV:\n\t\tcase IORING_OP_WRITE_FIXED:\n\t\tcase IORING_OP_WRITE: {\n\t\t\tstruct io_async_rw *io = req->async_data;\n\t\t\tif (io->free_iovec)\n\t\t\t\tkfree(io->free_iovec);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase IORING_OP_RECVMSG:\n\t\tcase IORING_OP_SENDMSG: {\n\t\t\tstruct io_async_msghdr *io = req->async_data;\n\t\t\tif (io->iov != io->fast_iov)\n\t\t\t\tkfree(io->iov);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase IORING_OP_SPLICE:\n\t\tcase IORING_OP_TEE:\n\t\t\tio_put_file(req, req->splice.file_in,\n\t\t\t\t    (req->splice.flags & SPLICE_F_FD_IN_FIXED));\n\t\t\tbreak;\n\t\tcase IORING_OP_OPENAT:\n\t\tcase IORING_OP_OPENAT2:\n\t\t\tif (req->open.filename)\n\t\t\t\tputname(req->open.filename);\n\t\t\tbreak;\n\t\t}\n\t\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\t}\n\n\tif (req->flags & REQ_F_INFLIGHT)\n\t\tio_req_drop_files(req);\n}\n\nstatic int io_issue_sqe(struct io_kiocb *req, bool force_nonblock,\n\t\t\tstruct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret;\n\n\tswitch (req->opcode) {\n\tcase IORING_OP_NOP:\n\t\tret = io_nop(req, cs);\n\t\tbreak;\n\tcase IORING_OP_READV:\n\tcase IORING_OP_READ_FIXED:\n\tcase IORING_OP_READ:\n\t\tret = io_read(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_WRITEV:\n\tcase IORING_OP_WRITE_FIXED:\n\tcase IORING_OP_WRITE:\n\t\tret = io_write(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_FSYNC:\n\t\tret = io_fsync(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_POLL_ADD:\n\t\tret = io_poll_add(req);\n\t\tbreak;\n\tcase IORING_OP_POLL_REMOVE:\n\t\tret = io_poll_remove(req);\n\t\tbreak;\n\tcase IORING_OP_SYNC_FILE_RANGE:\n\t\tret = io_sync_file_range(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_SENDMSG:\n\t\tret = io_sendmsg(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_SEND:\n\t\tret = io_send(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_RECVMSG:\n\t\tret = io_recvmsg(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_RECV:\n\t\tret = io_recv(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_TIMEOUT:\n\t\tret = io_timeout(req);\n\t\tbreak;\n\tcase IORING_OP_TIMEOUT_REMOVE:\n\t\tret = io_timeout_remove(req);\n\t\tbreak;\n\tcase IORING_OP_ACCEPT:\n\t\tret = io_accept(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_CONNECT:\n\t\tret = io_connect(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_ASYNC_CANCEL:\n\t\tret = io_async_cancel(req);\n\t\tbreak;\n\tcase IORING_OP_FALLOCATE:\n\t\tret = io_fallocate(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_OPENAT:\n\t\tret = io_openat(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_CLOSE:\n\t\tret = io_close(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_FILES_UPDATE:\n\t\tret = io_files_update(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_STATX:\n\t\tret = io_statx(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_FADVISE:\n\t\tret = io_fadvise(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_MADVISE:\n\t\tret = io_madvise(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_OPENAT2:\n\t\tret = io_openat2(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_EPOLL_CTL:\n\t\tret = io_epoll_ctl(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_SPLICE:\n\t\tret = io_splice(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_PROVIDE_BUFFERS:\n\t\tret = io_provide_buffers(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_REMOVE_BUFFERS:\n\t\tret = io_remove_buffers(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_TEE:\n\t\tret = io_tee(req, force_nonblock);\n\t\tbreak;\n\tdefault:\n\t\tret = -EINVAL;\n\t\tbreak;\n\t}\n\n\tif (ret)\n\t\treturn ret;\n\n\t/* If the op doesn't have a file, we're not polling for it */\n\tif ((ctx->flags & IORING_SETUP_IOPOLL) && req->file) {\n\t\tconst bool in_async = io_wq_current_is_worker();\n\n\t\t/* workqueue context doesn't hold uring_lock, grab it now */\n\t\tif (in_async)\n\t\t\tmutex_lock(&ctx->uring_lock);\n\n\t\tio_iopoll_req_issued(req);\n\n\t\tif (in_async)\n\t\t\tmutex_unlock(&ctx->uring_lock);\n\t}\n\n\treturn 0;\n}\n\nstatic struct io_wq_work *io_wq_submit_work(struct io_wq_work *work)\n{\n\tstruct io_kiocb *req = container_of(work, struct io_kiocb, work);\n\tstruct io_kiocb *timeout;\n\tint ret = 0;\n\n\ttimeout = io_prep_linked_timeout(req);\n\tif (timeout)\n\t\tio_queue_linked_timeout(timeout);\n\n\t/* if NO_CANCEL is set, we must still run the work */\n\tif ((work->flags & (IO_WQ_WORK_CANCEL|IO_WQ_WORK_NO_CANCEL)) ==\n\t\t\t\tIO_WQ_WORK_CANCEL) {\n\t\tret = -ECANCELED;\n\t}\n\n\tif (!ret) {\n\t\tdo {\n\t\t\tret = io_issue_sqe(req, false, NULL);\n\t\t\t/*\n\t\t\t * We can get EAGAIN for polled IO even though we're\n\t\t\t * forcing a sync submission from here, since we can't\n\t\t\t * wait for request slots on the block side.\n\t\t\t */\n\t\t\tif (ret != -EAGAIN)\n\t\t\t\tbreak;\n\t\t\tcond_resched();\n\t\t} while (1);\n\t}\n\n\tif (ret) {\n\t\treq_set_fail_links(req);\n\t\tio_req_complete(req, ret);\n\t}\n\n\treturn io_steal_work(req);\n}\n\nstatic inline struct file *io_file_from_index(struct io_ring_ctx *ctx,\n\t\t\t\t\t      int index)\n{\n\tstruct fixed_file_table *table;\n\n\ttable = &ctx->file_data->table[index >> IORING_FILE_TABLE_SHIFT];\n\treturn table->files[index & IORING_FILE_TABLE_MASK];\n}\n\nstatic struct file *io_file_get(struct io_submit_state *state,\n\t\t\t\tstruct io_kiocb *req, int fd, bool fixed)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct file *file;\n\n\tif (fixed) {\n\t\tif (unlikely((unsigned int)fd >= ctx->nr_user_files))\n\t\t\treturn NULL;\n\t\tfd = array_index_nospec(fd, ctx->nr_user_files);\n\t\tfile = io_file_from_index(ctx, fd);\n\t\tif (file) {\n\t\t\treq->fixed_file_refs = &ctx->file_data->node->refs;\n\t\t\tpercpu_ref_get(req->fixed_file_refs);\n\t\t}\n\t} else {\n\t\ttrace_io_uring_file_get(ctx, fd);\n\t\tfile = __io_file_get(state, fd);\n\t}\n\n\treturn file;\n}\n\nstatic int io_req_set_file(struct io_submit_state *state, struct io_kiocb *req,\n\t\t\t   int fd)\n{\n\tbool fixed;\n\n\tfixed = (req->flags & REQ_F_FIXED_FILE) != 0;\n\tif (unlikely(!fixed && io_async_submit(req->ctx)))\n\t\treturn -EBADF;\n\n\treq->file = io_file_get(state, req, fd, fixed);\n\tif (req->file || io_op_defs[req->opcode].needs_file_no_error)\n\t\treturn 0;\n\treturn -EBADF;\n}\n\nstatic enum hrtimer_restart io_link_timeout_fn(struct hrtimer *timer)\n{\n\tstruct io_timeout_data *data = container_of(timer,\n\t\t\t\t\t\tstruct io_timeout_data, timer);\n\tstruct io_kiocb *req = data->req;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_kiocb *prev = NULL;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\n\t/*\n\t * We don't expect the list to be empty, that will only happen if we\n\t * race with the completion of the linked work.\n\t */\n\tif (!list_empty(&req->link_list)) {\n\t\tprev = list_entry(req->link_list.prev, struct io_kiocb,\n\t\t\t\t  link_list);\n\t\tif (refcount_inc_not_zero(&prev->refs)) {\n\t\t\tlist_del_init(&req->link_list);\n\t\t\tprev->flags &= ~REQ_F_LINK_TIMEOUT;\n\t\t} else\n\t\t\tprev = NULL;\n\t}\n\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tif (prev) {\n\t\treq_set_fail_links(prev);\n\t\tio_async_find_and_cancel(ctx, req, prev->user_data, -ETIME);\n\t\tio_put_req(prev);\n\t} else {\n\t\tio_req_complete(req, -ETIME);\n\t}\n\treturn HRTIMER_NORESTART;\n}\n\nstatic void __io_queue_linked_timeout(struct io_kiocb *req)\n{\n\t/*\n\t * If the list is now empty, then our linked request finished before\n\t * we got a chance to setup the timer\n\t */\n\tif (!list_empty(&req->link_list)) {\n\t\tstruct io_timeout_data *data = req->async_data;\n\n\t\tdata->timer.function = io_link_timeout_fn;\n\t\thrtimer_start(&data->timer, timespec64_to_ktime(data->ts),\n\t\t\t\tdata->mode);\n\t}\n}\n\nstatic void io_queue_linked_timeout(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\t__io_queue_linked_timeout(req);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\t/* drop submission reference */\n\tio_put_req(req);\n}\n\nstatic struct io_kiocb *io_prep_linked_timeout(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt;\n\n\tif (!(req->flags & REQ_F_LINK_HEAD))\n\t\treturn NULL;\n\tif (req->flags & REQ_F_LINK_TIMEOUT)\n\t\treturn NULL;\n\n\tnxt = list_first_entry_or_null(&req->link_list, struct io_kiocb,\n\t\t\t\t\tlink_list);\n\tif (!nxt || nxt->opcode != IORING_OP_LINK_TIMEOUT)\n\t\treturn NULL;\n\n\treq->flags |= REQ_F_LINK_TIMEOUT;\n\treturn nxt;\n}\n\nstatic void __io_queue_sqe(struct io_kiocb *req, struct io_comp_state *cs)\n{\n\tstruct io_kiocb *linked_timeout;\n\tstruct io_kiocb *nxt;\n\tconst struct cred *old_creds = NULL;\n\tint ret;\n\nagain:\n\tlinked_timeout = io_prep_linked_timeout(req);\n\n\tif ((req->flags & REQ_F_WORK_INITIALIZED) && req->work.identity->creds &&\n\t    req->work.identity->creds != current_cred()) {\n\t\tif (old_creds)\n\t\t\trevert_creds(old_creds);\n\t\tif (old_creds == req->work.identity->creds)\n\t\t\told_creds = NULL; /* restored original creds */\n\t\telse\n\t\t\told_creds = override_creds(req->work.identity->creds);\n\t\treq->work.flags |= IO_WQ_WORK_CREDS;\n\t}\n\n\tret = io_issue_sqe(req, true, cs);\n\n\t/*\n\t * We async punt it if the file wasn't marked NOWAIT, or if the file\n\t * doesn't support non-blocking read/write attempts\n\t */\n\tif (ret == -EAGAIN && !(req->flags & REQ_F_NOWAIT)) {\n\t\tif (!io_arm_poll_handler(req)) {\npunt:\n\t\t\t/*\n\t\t\t * Queued up for async execution, worker will release\n\t\t\t * submit reference when the iocb is actually submitted.\n\t\t\t */\n\t\t\tio_queue_async_work(req);\n\t\t}\n\n\t\tif (linked_timeout)\n\t\t\tio_queue_linked_timeout(linked_timeout);\n\t\tgoto exit;\n\t}\n\n\tif (unlikely(ret)) {\n\t\t/* un-prep timeout, so it'll be killed as any other linked */\n\t\treq->flags &= ~REQ_F_LINK_TIMEOUT;\n\t\treq_set_fail_links(req);\n\t\tio_put_req(req);\n\t\tio_req_complete(req, ret);\n\t\tgoto exit;\n\t}\n\n\t/* drop submission reference */\n\tnxt = io_put_req_find_next(req);\n\tif (linked_timeout)\n\t\tio_queue_linked_timeout(linked_timeout);\n\n\tif (nxt) {\n\t\treq = nxt;\n\n\t\tif (req->flags & REQ_F_FORCE_ASYNC)\n\t\t\tgoto punt;\n\t\tgoto again;\n\t}\nexit:\n\tif (old_creds)\n\t\trevert_creds(old_creds);\n}\n\nstatic void io_queue_sqe(struct io_kiocb *req, const struct io_uring_sqe *sqe,\n\t\t\t struct io_comp_state *cs)\n{\n\tint ret;\n\n\tret = io_req_defer(req, sqe);\n\tif (ret) {\n\t\tif (ret != -EIOCBQUEUED) {\nfail_req:\n\t\t\treq_set_fail_links(req);\n\t\t\tio_put_req(req);\n\t\t\tio_req_complete(req, ret);\n\t\t}\n\t} else if (req->flags & REQ_F_FORCE_ASYNC) {\n\t\tif (!req->async_data) {\n\t\t\tret = io_req_defer_prep(req, sqe);\n\t\t\tif (unlikely(ret))\n\t\t\t\tgoto fail_req;\n\t\t}\n\n\t\t/*\n\t\t * Never try inline submit of IOSQE_ASYNC is set, go straight\n\t\t * to async execution.\n\t\t */\n\t\tio_req_init_async(req);\n\t\treq->work.flags |= IO_WQ_WORK_CONCURRENT;\n\t\tio_queue_async_work(req);\n\t} else {\n\t\tif (sqe) {\n\t\t\tret = io_req_prep(req, sqe);\n\t\t\tif (unlikely(ret))\n\t\t\t\tgoto fail_req;\n\t\t}\n\t\t__io_queue_sqe(req, cs);\n\t}\n}\n\nstatic inline void io_queue_link_head(struct io_kiocb *req,\n\t\t\t\t      struct io_comp_state *cs)\n{\n\tif (unlikely(req->flags & REQ_F_FAIL_LINK)) {\n\t\tio_put_req(req);\n\t\tio_req_complete(req, -ECANCELED);\n\t} else\n\t\tio_queue_sqe(req, NULL, cs);\n}\n\nstatic int io_submit_sqe(struct io_kiocb *req, const struct io_uring_sqe *sqe,\n\t\t\t struct io_kiocb **link, struct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret;\n\n\t/*\n\t * If we already have a head request, queue this one for async\n\t * submittal once the head completes. If we don't have a head but\n\t * IOSQE_IO_LINK is set in the sqe, start a new head. This one will be\n\t * submitted sync once the chain is complete. If none of those\n\t * conditions are true (normal request), then just queue it.\n\t */\n\tif (*link) {\n\t\tstruct io_kiocb *head = *link;\n\n\t\t/*\n\t\t * Taking sequential execution of a link, draining both sides\n\t\t * of the link also fullfils IOSQE_IO_DRAIN semantics for all\n\t\t * requests in the link. So, it drains the head and the\n\t\t * next after the link request. The last one is done via\n\t\t * drain_next flag to persist the effect across calls.\n\t\t */\n\t\tif (req->flags & REQ_F_IO_DRAIN) {\n\t\t\thead->flags |= REQ_F_IO_DRAIN;\n\t\t\tctx->drain_next = 1;\n\t\t}\n\t\tret = io_req_defer_prep(req, sqe);\n\t\tif (unlikely(ret)) {\n\t\t\t/* fail even hard links since we don't submit */\n\t\t\thead->flags |= REQ_F_FAIL_LINK;\n\t\t\treturn ret;\n\t\t}\n\t\ttrace_io_uring_link(ctx, req, head);\n\t\tlist_add_tail(&req->link_list, &head->link_list);\n\n\t\t/* last request of a link, enqueue the link */\n\t\tif (!(req->flags & (REQ_F_LINK | REQ_F_HARDLINK))) {\n\t\t\tio_queue_link_head(head, cs);\n\t\t\t*link = NULL;\n\t\t}\n\t} else {\n\t\tif (unlikely(ctx->drain_next)) {\n\t\t\treq->flags |= REQ_F_IO_DRAIN;\n\t\t\tctx->drain_next = 0;\n\t\t}\n\t\tif (req->flags & (REQ_F_LINK | REQ_F_HARDLINK)) {\n\t\t\treq->flags |= REQ_F_LINK_HEAD;\n\t\t\tINIT_LIST_HEAD(&req->link_list);\n\n\t\t\tret = io_req_defer_prep(req, sqe);\n\t\t\tif (unlikely(ret))\n\t\t\t\treq->flags |= REQ_F_FAIL_LINK;\n\t\t\t*link = req;\n\t\t} else {\n\t\t\tio_queue_sqe(req, sqe, cs);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n/*\n * Batched submission is done, ensure local IO is flushed out.\n */\nstatic void io_submit_state_end(struct io_submit_state *state)\n{\n\tif (!list_empty(&state->comp.list))\n\t\tio_submit_flush_completions(&state->comp);\n\tblk_finish_plug(&state->plug);\n\tio_state_file_put(state);\n\tif (state->free_reqs)\n\t\tkmem_cache_free_bulk(req_cachep, state->free_reqs, state->reqs);\n}\n\n/*\n * Start submission side cache.\n */\nstatic void io_submit_state_start(struct io_submit_state *state,\n\t\t\t\t  struct io_ring_ctx *ctx, unsigned int max_ios)\n{\n\tblk_start_plug(&state->plug);\n\tstate->comp.nr = 0;\n\tINIT_LIST_HEAD(&state->comp.list);\n\tstate->comp.ctx = ctx;\n\tstate->free_reqs = 0;\n\tstate->file = NULL;\n\tstate->ios_left = max_ios;\n}\n\nstatic void io_commit_sqring(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *rings = ctx->rings;\n\n\t/*\n\t * Ensure any loads from the SQEs are done at this point,\n\t * since once we write the new head, the application could\n\t * write new data to them.\n\t */\n\tsmp_store_release(&rings->sq.head, ctx->cached_sq_head);\n}\n\n/*\n * Fetch an sqe, if one is available. Note that sqe_ptr will point to memory\n * that is mapped by userspace. This means that care needs to be taken to\n * ensure that reads are stable, as we cannot rely on userspace always\n * being a good citizen. If members of the sqe are validated and then later\n * used, it's important that those reads are done through READ_ONCE() to\n * prevent a re-load down the line.\n */\nstatic const struct io_uring_sqe *io_get_sqe(struct io_ring_ctx *ctx)\n{\n\tu32 *sq_array = ctx->sq_array;\n\tunsigned head;\n\n\t/*\n\t * The cached sq head (or cq tail) serves two purposes:\n\t *\n\t * 1) allows us to batch the cost of updating the user visible\n\t *    head updates.\n\t * 2) allows the kernel side to track the head on its own, even\n\t *    though the application is the one updating it.\n\t */\n\thead = READ_ONCE(sq_array[ctx->cached_sq_head & ctx->sq_mask]);\n\tif (likely(head < ctx->sq_entries))\n\t\treturn &ctx->sq_sqes[head];\n\n\t/* drop invalid entries */\n\tctx->cached_sq_dropped++;\n\tWRITE_ONCE(ctx->rings->sq_dropped, ctx->cached_sq_dropped);\n\treturn NULL;\n}\n\nstatic inline void io_consume_sqe(struct io_ring_ctx *ctx)\n{\n\tctx->cached_sq_head++;\n}\n\n/*\n * Check SQE restrictions (opcode and flags).\n *\n * Returns 'true' if SQE is allowed, 'false' otherwise.\n */\nstatic inline bool io_check_restriction(struct io_ring_ctx *ctx,\n\t\t\t\t\tstruct io_kiocb *req,\n\t\t\t\t\tunsigned int sqe_flags)\n{\n\tif (!ctx->restricted)\n\t\treturn true;\n\n\tif (!test_bit(req->opcode, ctx->restrictions.sqe_op))\n\t\treturn false;\n\n\tif ((sqe_flags & ctx->restrictions.sqe_flags_required) !=\n\t    ctx->restrictions.sqe_flags_required)\n\t\treturn false;\n\n\tif (sqe_flags & ~(ctx->restrictions.sqe_flags_allowed |\n\t\t\t  ctx->restrictions.sqe_flags_required))\n\t\treturn false;\n\n\treturn true;\n}\n\n#define SQE_VALID_FLAGS\t(IOSQE_FIXED_FILE|IOSQE_IO_DRAIN|IOSQE_IO_LINK|\t\\\n\t\t\t\tIOSQE_IO_HARDLINK | IOSQE_ASYNC | \\\n\t\t\t\tIOSQE_BUFFER_SELECT)\n\nstatic int io_init_req(struct io_ring_ctx *ctx, struct io_kiocb *req,\n\t\t       const struct io_uring_sqe *sqe,\n\t\t       struct io_submit_state *state)\n{\n\tunsigned int sqe_flags;\n\tint id, ret;\n\n\treq->opcode = READ_ONCE(sqe->opcode);\n\treq->user_data = READ_ONCE(sqe->user_data);\n\treq->async_data = NULL;\n\treq->file = NULL;\n\treq->ctx = ctx;\n\treq->flags = 0;\n\t/* one is dropped after submission, the other at completion */\n\trefcount_set(&req->refs, 2);\n\treq->task = current;\n\treq->result = 0;\n\n\tif (unlikely(req->opcode >= IORING_OP_LAST))\n\t\treturn -EINVAL;\n\n\tif (unlikely(io_sq_thread_acquire_mm(ctx, req)))\n\t\treturn -EFAULT;\n\n\tsqe_flags = READ_ONCE(sqe->flags);\n\t/* enforce forwards compatibility on users */\n\tif (unlikely(sqe_flags & ~SQE_VALID_FLAGS))\n\t\treturn -EINVAL;\n\n\tif (unlikely(!io_check_restriction(ctx, req, sqe_flags)))\n\t\treturn -EACCES;\n\n\tif ((sqe_flags & IOSQE_BUFFER_SELECT) &&\n\t    !io_op_defs[req->opcode].buffer_select)\n\t\treturn -EOPNOTSUPP;\n\n\tid = READ_ONCE(sqe->personality);\n\tif (id) {\n\t\tio_req_init_async(req);\n\t\treq->work.identity->creds = idr_find(&ctx->personality_idr, id);\n\t\tif (unlikely(!req->work.identity->creds))\n\t\t\treturn -EINVAL;\n\t\tget_cred(req->work.identity->creds);\n\t\treq->work.flags |= IO_WQ_WORK_CREDS;\n\t}\n\n\t/* same numerical values with corresponding REQ_F_*, safe to copy */\n\treq->flags |= sqe_flags;\n\n\tif (!io_op_defs[req->opcode].needs_file)\n\t\treturn 0;\n\n\tret = io_req_set_file(state, req, READ_ONCE(sqe->fd));\n\tstate->ios_left--;\n\treturn ret;\n}\n\nstatic int io_submit_sqes(struct io_ring_ctx *ctx, unsigned int nr)\n{\n\tstruct io_submit_state state;\n\tstruct io_kiocb *link = NULL;\n\tint i, submitted = 0;\n\n\t/* if we have a backlog and couldn't flush it all, return BUSY */\n\tif (test_bit(0, &ctx->sq_check_overflow)) {\n\t\tif (!list_empty(&ctx->cq_overflow_list) &&\n\t\t    !io_cqring_overflow_flush(ctx, false, NULL, NULL))\n\t\t\treturn -EBUSY;\n\t}\n\n\t/* make sure SQ entry isn't read before tail */\n\tnr = min3(nr, ctx->sq_entries, io_sqring_entries(ctx));\n\n\tif (!percpu_ref_tryget_many(&ctx->refs, nr))\n\t\treturn -EAGAIN;\n\n\tatomic_long_add(nr, &current->io_uring->req_issue);\n\trefcount_add(nr, &current->usage);\n\n\tio_submit_state_start(&state, ctx, nr);\n\n\tfor (i = 0; i < nr; i++) {\n\t\tconst struct io_uring_sqe *sqe;\n\t\tstruct io_kiocb *req;\n\t\tint err;\n\n\t\tsqe = io_get_sqe(ctx);\n\t\tif (unlikely(!sqe)) {\n\t\t\tio_consume_sqe(ctx);\n\t\t\tbreak;\n\t\t}\n\t\treq = io_alloc_req(ctx, &state);\n\t\tif (unlikely(!req)) {\n\t\t\tif (!submitted)\n\t\t\t\tsubmitted = -EAGAIN;\n\t\t\tbreak;\n\t\t}\n\t\tio_consume_sqe(ctx);\n\t\t/* will complete beyond this point, count as submitted */\n\t\tsubmitted++;\n\n\t\terr = io_init_req(ctx, req, sqe, &state);\n\t\tif (unlikely(err)) {\nfail_req:\n\t\t\tio_put_req(req);\n\t\t\tio_req_complete(req, err);\n\t\t\tbreak;\n\t\t}\n\n\t\ttrace_io_uring_submit_sqe(ctx, req->opcode, req->user_data,\n\t\t\t\t\t\ttrue, io_async_submit(ctx));\n\t\terr = io_submit_sqe(req, sqe, &link, &state.comp);\n\t\tif (err)\n\t\t\tgoto fail_req;\n\t}\n\n\tif (unlikely(submitted != nr)) {\n\t\tint ref_used = (submitted == -EAGAIN) ? 0 : submitted;\n\n\t\tpercpu_ref_put_many(&ctx->refs, nr - ref_used);\n\t\tatomic_long_sub(nr - ref_used, &current->io_uring->req_issue);\n\t\tput_task_struct_many(current, nr - ref_used);\n\t}\n\tif (link)\n\t\tio_queue_link_head(link, &state.comp);\n\tio_submit_state_end(&state);\n\n\t /* Commit SQ ring head once we've consumed and submitted all SQEs */\n\tio_commit_sqring(ctx);\n\n\treturn submitted;\n}\n\nstatic inline void io_ring_set_wakeup_flag(struct io_ring_ctx *ctx)\n{\n\t/* Tell userspace we may need a wakeup call */\n\tspin_lock_irq(&ctx->completion_lock);\n\tctx->rings->sq_flags |= IORING_SQ_NEED_WAKEUP;\n\tspin_unlock_irq(&ctx->completion_lock);\n}\n\nstatic inline void io_ring_clear_wakeup_flag(struct io_ring_ctx *ctx)\n{\n\tspin_lock_irq(&ctx->completion_lock);\n\tctx->rings->sq_flags &= ~IORING_SQ_NEED_WAKEUP;\n\tspin_unlock_irq(&ctx->completion_lock);\n}\n\nstatic int io_sq_wake_function(struct wait_queue_entry *wqe, unsigned mode,\n\t\t\t       int sync, void *key)\n{\n\tstruct io_ring_ctx *ctx = container_of(wqe, struct io_ring_ctx, sqo_wait_entry);\n\tint ret;\n\n\tret = autoremove_wake_function(wqe, mode, sync, key);\n\tif (ret) {\n\t\tunsigned long flags;\n\n\t\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\t\tctx->rings->sq_flags &= ~IORING_SQ_NEED_WAKEUP;\n\t\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\t}\n\treturn ret;\n}\n\nenum sq_ret {\n\tSQT_IDLE\t= 1,\n\tSQT_SPIN\t= 2,\n\tSQT_DID_WORK\t= 4,\n};\n\nstatic enum sq_ret __io_sq_thread(struct io_ring_ctx *ctx,\n\t\t\t\t  unsigned long start_jiffies, bool cap_entries)\n{\n\tunsigned long timeout = start_jiffies + ctx->sq_thread_idle;\n\tstruct io_sq_data *sqd = ctx->sq_data;\n\tunsigned int to_submit;\n\tint ret = 0;\n\nagain:\n\tif (!list_empty(&ctx->iopoll_list)) {\n\t\tunsigned nr_events = 0;\n\n\t\tmutex_lock(&ctx->uring_lock);\n\t\tif (!list_empty(&ctx->iopoll_list) && !need_resched())\n\t\t\tio_do_iopoll(ctx, &nr_events, 0);\n\t\tmutex_unlock(&ctx->uring_lock);\n\t}\n\n\tto_submit = io_sqring_entries(ctx);\n\n\t/*\n\t * If submit got -EBUSY, flag us as needing the application\n\t * to enter the kernel to reap and flush events.\n\t */\n\tif (!to_submit || ret == -EBUSY || need_resched()) {\n\t\t/*\n\t\t * Drop cur_mm before scheduling, we can't hold it for\n\t\t * long periods (or over schedule()). Do this before\n\t\t * adding ourselves to the waitqueue, as the unuse/drop\n\t\t * may sleep.\n\t\t */\n\t\tio_sq_thread_drop_mm();\n\n\t\t/*\n\t\t * We're polling. If we're within the defined idle\n\t\t * period, then let us spin without work before going\n\t\t * to sleep. The exception is if we got EBUSY doing\n\t\t * more IO, we should wait for the application to\n\t\t * reap events and wake us up.\n\t\t */\n\t\tif (!list_empty(&ctx->iopoll_list) || need_resched() ||\n\t\t    (!time_after(jiffies, timeout) && ret != -EBUSY &&\n\t\t    !percpu_ref_is_dying(&ctx->refs)))\n\t\t\treturn SQT_SPIN;\n\n\t\tprepare_to_wait(&sqd->wait, &ctx->sqo_wait_entry,\n\t\t\t\t\tTASK_INTERRUPTIBLE);\n\n\t\t/*\n\t\t * While doing polled IO, before going to sleep, we need\n\t\t * to check if there are new reqs added to iopoll_list,\n\t\t * it is because reqs may have been punted to io worker\n\t\t * and will be added to iopoll_list later, hence check\n\t\t * the iopoll_list again.\n\t\t */\n\t\tif ((ctx->flags & IORING_SETUP_IOPOLL) &&\n\t\t    !list_empty_careful(&ctx->iopoll_list)) {\n\t\t\tfinish_wait(&sqd->wait, &ctx->sqo_wait_entry);\n\t\t\tgoto again;\n\t\t}\n\n\t\tto_submit = io_sqring_entries(ctx);\n\t\tif (!to_submit || ret == -EBUSY)\n\t\t\treturn SQT_IDLE;\n\t}\n\n\tfinish_wait(&sqd->wait, &ctx->sqo_wait_entry);\n\tio_ring_clear_wakeup_flag(ctx);\n\n\t/* if we're handling multiple rings, cap submit size for fairness */\n\tif (cap_entries && to_submit > 8)\n\t\tto_submit = 8;\n\n\tmutex_lock(&ctx->uring_lock);\n\tif (likely(!percpu_ref_is_dying(&ctx->refs)))\n\t\tret = io_submit_sqes(ctx, to_submit);\n\tmutex_unlock(&ctx->uring_lock);\n\n\tif (!io_sqring_full(ctx) && wq_has_sleeper(&ctx->sqo_sq_wait))\n\t\twake_up(&ctx->sqo_sq_wait);\n\n\treturn SQT_DID_WORK;\n}\n\nstatic void io_sqd_init_new(struct io_sq_data *sqd)\n{\n\tstruct io_ring_ctx *ctx;\n\n\twhile (!list_empty(&sqd->ctx_new_list)) {\n\t\tctx = list_first_entry(&sqd->ctx_new_list, struct io_ring_ctx, sqd_list);\n\t\tinit_wait(&ctx->sqo_wait_entry);\n\t\tctx->sqo_wait_entry.func = io_sq_wake_function;\n\t\tlist_move_tail(&ctx->sqd_list, &sqd->ctx_list);\n\t\tcomplete(&ctx->sq_thread_comp);\n\t}\n}\n\nstatic int io_sq_thread(void *data)\n{\n\tstruct cgroup_subsys_state *cur_css = NULL;\n\tconst struct cred *old_cred = NULL;\n\tstruct io_sq_data *sqd = data;\n\tstruct io_ring_ctx *ctx;\n\tunsigned long start_jiffies;\n\n\tstart_jiffies = jiffies;\n\twhile (!kthread_should_stop()) {\n\t\tenum sq_ret ret = 0;\n\t\tbool cap_entries;\n\n\t\t/*\n\t\t * Any changes to the sqd lists are synchronized through the\n\t\t * kthread parking. This synchronizes the thread vs users,\n\t\t * the users are synchronized on the sqd->ctx_lock.\n\t\t */\n\t\tif (kthread_should_park())\n\t\t\tkthread_parkme();\n\n\t\tif (unlikely(!list_empty(&sqd->ctx_new_list)))\n\t\t\tio_sqd_init_new(sqd);\n\n\t\tcap_entries = !list_is_singular(&sqd->ctx_list);\n\n\t\tlist_for_each_entry(ctx, &sqd->ctx_list, sqd_list) {\n\t\t\tif (current->cred != ctx->creds) {\n\t\t\t\tif (old_cred)\n\t\t\t\t\trevert_creds(old_cred);\n\t\t\t\told_cred = override_creds(ctx->creds);\n\t\t\t}\n\t\t\tio_sq_thread_associate_blkcg(ctx, &cur_css);\n\n\t\t\tret |= __io_sq_thread(ctx, start_jiffies, cap_entries);\n\n\t\t\tio_sq_thread_drop_mm();\n\t\t}\n\n\t\tif (ret & SQT_SPIN) {\n\t\t\tio_run_task_work();\n\t\t\tcond_resched();\n\t\t} else if (ret == SQT_IDLE) {\n\t\t\tif (kthread_should_park())\n\t\t\t\tcontinue;\n\t\t\tlist_for_each_entry(ctx, &sqd->ctx_list, sqd_list)\n\t\t\t\tio_ring_set_wakeup_flag(ctx);\n\t\t\tschedule();\n\t\t\tstart_jiffies = jiffies;\n\t\t\tlist_for_each_entry(ctx, &sqd->ctx_list, sqd_list)\n\t\t\t\tio_ring_clear_wakeup_flag(ctx);\n\t\t}\n\t}\n\n\tio_run_task_work();\n\n\tif (cur_css)\n\t\tio_sq_thread_unassociate_blkcg();\n\tif (old_cred)\n\t\trevert_creds(old_cred);\n\n\tkthread_parkme();\n\n\treturn 0;\n}\n\nstruct io_wait_queue {\n\tstruct wait_queue_entry wq;\n\tstruct io_ring_ctx *ctx;\n\tunsigned to_wait;\n\tunsigned nr_timeouts;\n};\n\nstatic inline bool io_should_wake(struct io_wait_queue *iowq, bool noflush)\n{\n\tstruct io_ring_ctx *ctx = iowq->ctx;\n\n\t/*\n\t * Wake up if we have enough events, or if a timeout occurred since we\n\t * started waiting. For timeouts, we always want to return to userspace,\n\t * regardless of event count.\n\t */\n\treturn io_cqring_events(ctx, noflush) >= iowq->to_wait ||\n\t\t\tatomic_read(&ctx->cq_timeouts) != iowq->nr_timeouts;\n}\n\nstatic int io_wake_function(struct wait_queue_entry *curr, unsigned int mode,\n\t\t\t    int wake_flags, void *key)\n{\n\tstruct io_wait_queue *iowq = container_of(curr, struct io_wait_queue,\n\t\t\t\t\t\t\twq);\n\n\t/* use noflush == true, as we can't safely rely on locking context */\n\tif (!io_should_wake(iowq, true))\n\t\treturn -1;\n\n\treturn autoremove_wake_function(curr, mode, wake_flags, key);\n}\n\nstatic int io_run_task_work_sig(void)\n{\n\tif (io_run_task_work())\n\t\treturn 1;\n\tif (!signal_pending(current))\n\t\treturn 0;\n\tif (current->jobctl & JOBCTL_TASK_WORK) {\n\t\tspin_lock_irq(&current->sighand->siglock);\n\t\tcurrent->jobctl &= ~JOBCTL_TASK_WORK;\n\t\trecalc_sigpending();\n\t\tspin_unlock_irq(&current->sighand->siglock);\n\t\treturn 1;\n\t}\n\treturn -EINTR;\n}\n\n/*\n * Wait until events become available, if we don't already have some. The\n * application must reap them itself, as they reside on the shared cq ring.\n */\nstatic int io_cqring_wait(struct io_ring_ctx *ctx, int min_events,\n\t\t\t  const sigset_t __user *sig, size_t sigsz)\n{\n\tstruct io_wait_queue iowq = {\n\t\t.wq = {\n\t\t\t.private\t= current,\n\t\t\t.func\t\t= io_wake_function,\n\t\t\t.entry\t\t= LIST_HEAD_INIT(iowq.wq.entry),\n\t\t},\n\t\t.ctx\t\t= ctx,\n\t\t.to_wait\t= min_events,\n\t};\n\tstruct io_rings *rings = ctx->rings;\n\tint ret = 0;\n\n\tdo {\n\t\tif (io_cqring_events(ctx, false) >= min_events)\n\t\t\treturn 0;\n\t\tif (!io_run_task_work())\n\t\t\tbreak;\n\t} while (1);\n\n\tif (sig) {\n#ifdef CONFIG_COMPAT\n\t\tif (in_compat_syscall())\n\t\t\tret = set_compat_user_sigmask((const compat_sigset_t __user *)sig,\n\t\t\t\t\t\t      sigsz);\n\t\telse\n#endif\n\t\t\tret = set_user_sigmask(sig, sigsz);\n\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\tiowq.nr_timeouts = atomic_read(&ctx->cq_timeouts);\n\ttrace_io_uring_cqring_wait(ctx, min_events);\n\tdo {\n\t\tprepare_to_wait_exclusive(&ctx->wait, &iowq.wq,\n\t\t\t\t\t\tTASK_INTERRUPTIBLE);\n\t\t/* make sure we run task_work before checking for signals */\n\t\tret = io_run_task_work_sig();\n\t\tif (ret > 0)\n\t\t\tcontinue;\n\t\telse if (ret < 0)\n\t\t\tbreak;\n\t\tif (io_should_wake(&iowq, false))\n\t\t\tbreak;\n\t\tschedule();\n\t} while (1);\n\tfinish_wait(&ctx->wait, &iowq.wq);\n\n\trestore_saved_sigmask_unless(ret == -EINTR);\n\n\treturn READ_ONCE(rings->cq.head) == READ_ONCE(rings->cq.tail) ? ret : 0;\n}\n\nstatic void __io_sqe_files_unregister(struct io_ring_ctx *ctx)\n{\n#if defined(CONFIG_UNIX)\n\tif (ctx->ring_sock) {\n\t\tstruct sock *sock = ctx->ring_sock->sk;\n\t\tstruct sk_buff *skb;\n\n\t\twhile ((skb = skb_dequeue(&sock->sk_receive_queue)) != NULL)\n\t\t\tkfree_skb(skb);\n\t}\n#else\n\tint i;\n\n\tfor (i = 0; i < ctx->nr_user_files; i++) {\n\t\tstruct file *file;\n\n\t\tfile = io_file_from_index(ctx, i);\n\t\tif (file)\n\t\t\tfput(file);\n\t}\n#endif\n}\n\nstatic void io_file_ref_kill(struct percpu_ref *ref)\n{\n\tstruct fixed_file_data *data;\n\n\tdata = container_of(ref, struct fixed_file_data, refs);\n\tcomplete(&data->done);\n}\n\nstatic int io_sqe_files_unregister(struct io_ring_ctx *ctx)\n{\n\tstruct fixed_file_data *data = ctx->file_data;\n\tstruct fixed_file_ref_node *ref_node = NULL;\n\tunsigned nr_tables, i;\n\n\tif (!data)\n\t\treturn -ENXIO;\n\n\tspin_lock(&data->lock);\n\tif (!list_empty(&data->ref_list))\n\t\tref_node = list_first_entry(&data->ref_list,\n\t\t\t\tstruct fixed_file_ref_node, node);\n\tspin_unlock(&data->lock);\n\tif (ref_node)\n\t\tpercpu_ref_kill(&ref_node->refs);\n\n\tpercpu_ref_kill(&data->refs);\n\n\t/* wait for all refs nodes to complete */\n\tflush_delayed_work(&ctx->file_put_work);\n\twait_for_completion(&data->done);\n\n\t__io_sqe_files_unregister(ctx);\n\tnr_tables = DIV_ROUND_UP(ctx->nr_user_files, IORING_MAX_FILES_TABLE);\n\tfor (i = 0; i < nr_tables; i++)\n\t\tkfree(data->table[i].files);\n\tkfree(data->table);\n\tpercpu_ref_exit(&data->refs);\n\tkfree(data);\n\tctx->file_data = NULL;\n\tctx->nr_user_files = 0;\n\treturn 0;\n}\n\nstatic void io_put_sq_data(struct io_sq_data *sqd)\n{\n\tif (refcount_dec_and_test(&sqd->refs)) {\n\t\t/*\n\t\t * The park is a bit of a work-around, without it we get\n\t\t * warning spews on shutdown with SQPOLL set and affinity\n\t\t * set to a single CPU.\n\t\t */\n\t\tif (sqd->thread) {\n\t\t\tkthread_park(sqd->thread);\n\t\t\tkthread_stop(sqd->thread);\n\t\t}\n\n\t\tkfree(sqd);\n\t}\n}\n\nstatic struct io_sq_data *io_attach_sq_data(struct io_uring_params *p)\n{\n\tstruct io_ring_ctx *ctx_attach;\n\tstruct io_sq_data *sqd;\n\tstruct fd f;\n\n\tf = fdget(p->wq_fd);\n\tif (!f.file)\n\t\treturn ERR_PTR(-ENXIO);\n\tif (f.file->f_op != &io_uring_fops) {\n\t\tfdput(f);\n\t\treturn ERR_PTR(-EINVAL);\n\t}\n\n\tctx_attach = f.file->private_data;\n\tsqd = ctx_attach->sq_data;\n\tif (!sqd) {\n\t\tfdput(f);\n\t\treturn ERR_PTR(-EINVAL);\n\t}\n\n\trefcount_inc(&sqd->refs);\n\tfdput(f);\n\treturn sqd;\n}\n\nstatic struct io_sq_data *io_get_sq_data(struct io_uring_params *p)\n{\n\tstruct io_sq_data *sqd;\n\n\tif (p->flags & IORING_SETUP_ATTACH_WQ)\n\t\treturn io_attach_sq_data(p);\n\n\tsqd = kzalloc(sizeof(*sqd), GFP_KERNEL);\n\tif (!sqd)\n\t\treturn ERR_PTR(-ENOMEM);\n\n\trefcount_set(&sqd->refs, 1);\n\tINIT_LIST_HEAD(&sqd->ctx_list);\n\tINIT_LIST_HEAD(&sqd->ctx_new_list);\n\tmutex_init(&sqd->ctx_lock);\n\tmutex_init(&sqd->lock);\n\tinit_waitqueue_head(&sqd->wait);\n\treturn sqd;\n}\n\nstatic void io_sq_thread_unpark(struct io_sq_data *sqd)\n\t__releases(&sqd->lock)\n{\n\tif (!sqd->thread)\n\t\treturn;\n\tkthread_unpark(sqd->thread);\n\tmutex_unlock(&sqd->lock);\n}\n\nstatic void io_sq_thread_park(struct io_sq_data *sqd)\n\t__acquires(&sqd->lock)\n{\n\tif (!sqd->thread)\n\t\treturn;\n\tmutex_lock(&sqd->lock);\n\tkthread_park(sqd->thread);\n}\n\nstatic void io_sq_thread_stop(struct io_ring_ctx *ctx)\n{\n\tstruct io_sq_data *sqd = ctx->sq_data;\n\n\tif (sqd) {\n\t\tif (sqd->thread) {\n\t\t\t/*\n\t\t\t * We may arrive here from the error branch in\n\t\t\t * io_sq_offload_create() where the kthread is created\n\t\t\t * without being waked up, thus wake it up now to make\n\t\t\t * sure the wait will complete.\n\t\t\t */\n\t\t\twake_up_process(sqd->thread);\n\t\t\twait_for_completion(&ctx->sq_thread_comp);\n\n\t\t\tio_sq_thread_park(sqd);\n\t\t}\n\n\t\tmutex_lock(&sqd->ctx_lock);\n\t\tlist_del(&ctx->sqd_list);\n\t\tmutex_unlock(&sqd->ctx_lock);\n\n\t\tif (sqd->thread) {\n\t\t\tfinish_wait(&sqd->wait, &ctx->sqo_wait_entry);\n\t\t\tio_sq_thread_unpark(sqd);\n\t\t}\n\n\t\tio_put_sq_data(sqd);\n\t\tctx->sq_data = NULL;\n\t}\n}\n\nstatic void io_finish_async(struct io_ring_ctx *ctx)\n{\n\tio_sq_thread_stop(ctx);\n\n\tif (ctx->io_wq) {\n\t\tio_wq_destroy(ctx->io_wq);\n\t\tctx->io_wq = NULL;\n\t}\n}\n\n#if defined(CONFIG_UNIX)\n/*\n * Ensure the UNIX gc is aware of our file set, so we are certain that\n * the io_uring can be safely unregistered on process exit, even if we have\n * loops in the file referencing.\n */\nstatic int __io_sqe_files_scm(struct io_ring_ctx *ctx, int nr, int offset)\n{\n\tstruct sock *sk = ctx->ring_sock->sk;\n\tstruct scm_fp_list *fpl;\n\tstruct sk_buff *skb;\n\tint i, nr_files;\n\n\tfpl = kzalloc(sizeof(*fpl), GFP_KERNEL);\n\tif (!fpl)\n\t\treturn -ENOMEM;\n\n\tskb = alloc_skb(0, GFP_KERNEL);\n\tif (!skb) {\n\t\tkfree(fpl);\n\t\treturn -ENOMEM;\n\t}\n\n\tskb->sk = sk;\n\n\tnr_files = 0;\n\tfpl->user = get_uid(ctx->user);\n\tfor (i = 0; i < nr; i++) {\n\t\tstruct file *file = io_file_from_index(ctx, i + offset);\n\n\t\tif (!file)\n\t\t\tcontinue;\n\t\tfpl->fp[nr_files] = get_file(file);\n\t\tunix_inflight(fpl->user, fpl->fp[nr_files]);\n\t\tnr_files++;\n\t}\n\n\tif (nr_files) {\n\t\tfpl->max = SCM_MAX_FD;\n\t\tfpl->count = nr_files;\n\t\tUNIXCB(skb).fp = fpl;\n\t\tskb->destructor = unix_destruct_scm;\n\t\trefcount_add(skb->truesize, &sk->sk_wmem_alloc);\n\t\tskb_queue_head(&sk->sk_receive_queue, skb);\n\n\t\tfor (i = 0; i < nr_files; i++)\n\t\t\tfput(fpl->fp[i]);\n\t} else {\n\t\tkfree_skb(skb);\n\t\tkfree(fpl);\n\t}\n\n\treturn 0;\n}\n\n/*\n * If UNIX sockets are enabled, fd passing can cause a reference cycle which\n * causes regular reference counting to break down. We rely on the UNIX\n * garbage collection to take care of this problem for us.\n */\nstatic int io_sqe_files_scm(struct io_ring_ctx *ctx)\n{\n\tunsigned left, total;\n\tint ret = 0;\n\n\ttotal = 0;\n\tleft = ctx->nr_user_files;\n\twhile (left) {\n\t\tunsigned this_files = min_t(unsigned, left, SCM_MAX_FD);\n\n\t\tret = __io_sqe_files_scm(ctx, this_files, total);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tleft -= this_files;\n\t\ttotal += this_files;\n\t}\n\n\tif (!ret)\n\t\treturn 0;\n\n\twhile (total < ctx->nr_user_files) {\n\t\tstruct file *file = io_file_from_index(ctx, total);\n\n\t\tif (file)\n\t\t\tfput(file);\n\t\ttotal++;\n\t}\n\n\treturn ret;\n}\n#else\nstatic int io_sqe_files_scm(struct io_ring_ctx *ctx)\n{\n\treturn 0;\n}\n#endif\n\nstatic int io_sqe_alloc_file_tables(struct fixed_file_data *file_data,\n\t\t\t\t    unsigned nr_tables, unsigned nr_files)\n{\n\tint i;\n\n\tfor (i = 0; i < nr_tables; i++) {\n\t\tstruct fixed_file_table *table = &file_data->table[i];\n\t\tunsigned this_files;\n\n\t\tthis_files = min(nr_files, IORING_MAX_FILES_TABLE);\n\t\ttable->files = kcalloc(this_files, sizeof(struct file *),\n\t\t\t\t\tGFP_KERNEL);\n\t\tif (!table->files)\n\t\t\tbreak;\n\t\tnr_files -= this_files;\n\t}\n\n\tif (i == nr_tables)\n\t\treturn 0;\n\n\tfor (i = 0; i < nr_tables; i++) {\n\t\tstruct fixed_file_table *table = &file_data->table[i];\n\t\tkfree(table->files);\n\t}\n\treturn 1;\n}\n\nstatic void io_ring_file_put(struct io_ring_ctx *ctx, struct file *file)\n{\n#if defined(CONFIG_UNIX)\n\tstruct sock *sock = ctx->ring_sock->sk;\n\tstruct sk_buff_head list, *head = &sock->sk_receive_queue;\n\tstruct sk_buff *skb;\n\tint i;\n\n\t__skb_queue_head_init(&list);\n\n\t/*\n\t * Find the skb that holds this file in its SCM_RIGHTS. When found,\n\t * remove this entry and rearrange the file array.\n\t */\n\tskb = skb_dequeue(head);\n\twhile (skb) {\n\t\tstruct scm_fp_list *fp;\n\n\t\tfp = UNIXCB(skb).fp;\n\t\tfor (i = 0; i < fp->count; i++) {\n\t\t\tint left;\n\n\t\t\tif (fp->fp[i] != file)\n\t\t\t\tcontinue;\n\n\t\t\tunix_notinflight(fp->user, fp->fp[i]);\n\t\t\tleft = fp->count - 1 - i;\n\t\t\tif (left) {\n\t\t\t\tmemmove(&fp->fp[i], &fp->fp[i + 1],\n\t\t\t\t\t\tleft * sizeof(struct file *));\n\t\t\t}\n\t\t\tfp->count--;\n\t\t\tif (!fp->count) {\n\t\t\t\tkfree_skb(skb);\n\t\t\t\tskb = NULL;\n\t\t\t} else {\n\t\t\t\t__skb_queue_tail(&list, skb);\n\t\t\t}\n\t\t\tfput(file);\n\t\t\tfile = NULL;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!file)\n\t\t\tbreak;\n\n\t\t__skb_queue_tail(&list, skb);\n\n\t\tskb = skb_dequeue(head);\n\t}\n\n\tif (skb_peek(&list)) {\n\t\tspin_lock_irq(&head->lock);\n\t\twhile ((skb = __skb_dequeue(&list)) != NULL)\n\t\t\t__skb_queue_tail(head, skb);\n\t\tspin_unlock_irq(&head->lock);\n\t}\n#else\n\tfput(file);\n#endif\n}\n\nstruct io_file_put {\n\tstruct list_head list;\n\tstruct file *file;\n};\n\nstatic void __io_file_put_work(struct fixed_file_ref_node *ref_node)\n{\n\tstruct fixed_file_data *file_data = ref_node->file_data;\n\tstruct io_ring_ctx *ctx = file_data->ctx;\n\tstruct io_file_put *pfile, *tmp;\n\n\tlist_for_each_entry_safe(pfile, tmp, &ref_node->file_list, list) {\n\t\tlist_del(&pfile->list);\n\t\tio_ring_file_put(ctx, pfile->file);\n\t\tkfree(pfile);\n\t}\n\n\tspin_lock(&file_data->lock);\n\tlist_del(&ref_node->node);\n\tspin_unlock(&file_data->lock);\n\n\tpercpu_ref_exit(&ref_node->refs);\n\tkfree(ref_node);\n\tpercpu_ref_put(&file_data->refs);\n}\n\nstatic void io_file_put_work(struct work_struct *work)\n{\n\tstruct io_ring_ctx *ctx;\n\tstruct llist_node *node;\n\n\tctx = container_of(work, struct io_ring_ctx, file_put_work.work);\n\tnode = llist_del_all(&ctx->file_put_llist);\n\n\twhile (node) {\n\t\tstruct fixed_file_ref_node *ref_node;\n\t\tstruct llist_node *next = node->next;\n\n\t\tref_node = llist_entry(node, struct fixed_file_ref_node, llist);\n\t\t__io_file_put_work(ref_node);\n\t\tnode = next;\n\t}\n}\n\nstatic void io_file_data_ref_zero(struct percpu_ref *ref)\n{\n\tstruct fixed_file_ref_node *ref_node;\n\tstruct io_ring_ctx *ctx;\n\tbool first_add;\n\tint delay = HZ;\n\n\tref_node = container_of(ref, struct fixed_file_ref_node, refs);\n\tctx = ref_node->file_data->ctx;\n\n\tif (percpu_ref_is_dying(&ctx->file_data->refs))\n\t\tdelay = 0;\n\n\tfirst_add = llist_add(&ref_node->llist, &ctx->file_put_llist);\n\tif (!delay)\n\t\tmod_delayed_work(system_wq, &ctx->file_put_work, 0);\n\telse if (first_add)\n\t\tqueue_delayed_work(system_wq, &ctx->file_put_work, delay);\n}\n\nstatic struct fixed_file_ref_node *alloc_fixed_file_ref_node(\n\t\t\tstruct io_ring_ctx *ctx)\n{\n\tstruct fixed_file_ref_node *ref_node;\n\n\tref_node = kzalloc(sizeof(*ref_node), GFP_KERNEL);\n\tif (!ref_node)\n\t\treturn ERR_PTR(-ENOMEM);\n\n\tif (percpu_ref_init(&ref_node->refs, io_file_data_ref_zero,\n\t\t\t    0, GFP_KERNEL)) {\n\t\tkfree(ref_node);\n\t\treturn ERR_PTR(-ENOMEM);\n\t}\n\tINIT_LIST_HEAD(&ref_node->node);\n\tINIT_LIST_HEAD(&ref_node->file_list);\n\tref_node->file_data = ctx->file_data;\n\treturn ref_node;\n}\n\nstatic void destroy_fixed_file_ref_node(struct fixed_file_ref_node *ref_node)\n{\n\tpercpu_ref_exit(&ref_node->refs);\n\tkfree(ref_node);\n}\n\nstatic int io_sqe_files_register(struct io_ring_ctx *ctx, void __user *arg,\n\t\t\t\t unsigned nr_args)\n{\n\t__s32 __user *fds = (__s32 __user *) arg;\n\tunsigned nr_tables, i;\n\tstruct file *file;\n\tint fd, ret = -ENOMEM;\n\tstruct fixed_file_ref_node *ref_node;\n\tstruct fixed_file_data *file_data;\n\n\tif (ctx->file_data)\n\t\treturn -EBUSY;\n\tif (!nr_args)\n\t\treturn -EINVAL;\n\tif (nr_args > IORING_MAX_FIXED_FILES)\n\t\treturn -EMFILE;\n\n\tfile_data = kzalloc(sizeof(*ctx->file_data), GFP_KERNEL);\n\tif (!file_data)\n\t\treturn -ENOMEM;\n\tfile_data->ctx = ctx;\n\tinit_completion(&file_data->done);\n\tINIT_LIST_HEAD(&file_data->ref_list);\n\tspin_lock_init(&file_data->lock);\n\n\tnr_tables = DIV_ROUND_UP(nr_args, IORING_MAX_FILES_TABLE);\n\tfile_data->table = kcalloc(nr_tables, sizeof(*file_data->table),\n\t\t\t\t   GFP_KERNEL);\n\tif (!file_data->table)\n\t\tgoto out_free;\n\n\tif (percpu_ref_init(&file_data->refs, io_file_ref_kill,\n\t\t\t\tPERCPU_REF_ALLOW_REINIT, GFP_KERNEL))\n\t\tgoto out_free;\n\n\tif (io_sqe_alloc_file_tables(file_data, nr_tables, nr_args))\n\t\tgoto out_ref;\n\tctx->file_data = file_data;\n\n\tfor (i = 0; i < nr_args; i++, ctx->nr_user_files++) {\n\t\tstruct fixed_file_table *table;\n\t\tunsigned index;\n\n\t\tif (copy_from_user(&fd, &fds[i], sizeof(fd))) {\n\t\t\tret = -EFAULT;\n\t\t\tgoto out_fput;\n\t\t}\n\t\t/* allow sparse sets */\n\t\tif (fd == -1)\n\t\t\tcontinue;\n\n\t\tfile = fget(fd);\n\t\tret = -EBADF;\n\t\tif (!file)\n\t\t\tgoto out_fput;\n\n\t\t/*\n\t\t * Don't allow io_uring instances to be registered. If UNIX\n\t\t * isn't enabled, then this causes a reference cycle and this\n\t\t * instance can never get freed. If UNIX is enabled we'll\n\t\t * handle it just fine, but there's still no point in allowing\n\t\t * a ring fd as it doesn't support regular read/write anyway.\n\t\t */\n\t\tif (file->f_op == &io_uring_fops) {\n\t\t\tfput(file);\n\t\t\tgoto out_fput;\n\t\t}\n\t\ttable = &file_data->table[i >> IORING_FILE_TABLE_SHIFT];\n\t\tindex = i & IORING_FILE_TABLE_MASK;\n\t\ttable->files[index] = file;\n\t}\n\n\tret = io_sqe_files_scm(ctx);\n\tif (ret) {\n\t\tio_sqe_files_unregister(ctx);\n\t\treturn ret;\n\t}\n\n\tref_node = alloc_fixed_file_ref_node(ctx);\n\tif (IS_ERR(ref_node)) {\n\t\tio_sqe_files_unregister(ctx);\n\t\treturn PTR_ERR(ref_node);\n\t}\n\n\tfile_data->node = ref_node;\n\tspin_lock(&file_data->lock);\n\tlist_add(&ref_node->node, &file_data->ref_list);\n\tspin_unlock(&file_data->lock);\n\tpercpu_ref_get(&file_data->refs);\n\treturn ret;\nout_fput:\n\tfor (i = 0; i < ctx->nr_user_files; i++) {\n\t\tfile = io_file_from_index(ctx, i);\n\t\tif (file)\n\t\t\tfput(file);\n\t}\n\tfor (i = 0; i < nr_tables; i++)\n\t\tkfree(file_data->table[i].files);\n\tctx->nr_user_files = 0;\nout_ref:\n\tpercpu_ref_exit(&file_data->refs);\nout_free:\n\tkfree(file_data->table);\n\tkfree(file_data);\n\tctx->file_data = NULL;\n\treturn ret;\n}\n\nstatic int io_sqe_file_register(struct io_ring_ctx *ctx, struct file *file,\n\t\t\t\tint index)\n{\n#if defined(CONFIG_UNIX)\n\tstruct sock *sock = ctx->ring_sock->sk;\n\tstruct sk_buff_head *head = &sock->sk_receive_queue;\n\tstruct sk_buff *skb;\n\n\t/*\n\t * See if we can merge this file into an existing skb SCM_RIGHTS\n\t * file set. If there's no room, fall back to allocating a new skb\n\t * and filling it in.\n\t */\n\tspin_lock_irq(&head->lock);\n\tskb = skb_peek(head);\n\tif (skb) {\n\t\tstruct scm_fp_list *fpl = UNIXCB(skb).fp;\n\n\t\tif (fpl->count < SCM_MAX_FD) {\n\t\t\t__skb_unlink(skb, head);\n\t\t\tspin_unlock_irq(&head->lock);\n\t\t\tfpl->fp[fpl->count] = get_file(file);\n\t\t\tunix_inflight(fpl->user, fpl->fp[fpl->count]);\n\t\t\tfpl->count++;\n\t\t\tspin_lock_irq(&head->lock);\n\t\t\t__skb_queue_head(head, skb);\n\t\t} else {\n\t\t\tskb = NULL;\n\t\t}\n\t}\n\tspin_unlock_irq(&head->lock);\n\n\tif (skb) {\n\t\tfput(file);\n\t\treturn 0;\n\t}\n\n\treturn __io_sqe_files_scm(ctx, 1, index);\n#else\n\treturn 0;\n#endif\n}\n\nstatic int io_queue_file_removal(struct fixed_file_data *data,\n\t\t\t\t struct file *file)\n{\n\tstruct io_file_put *pfile;\n\tstruct fixed_file_ref_node *ref_node = data->node;\n\n\tpfile = kzalloc(sizeof(*pfile), GFP_KERNEL);\n\tif (!pfile)\n\t\treturn -ENOMEM;\n\n\tpfile->file = file;\n\tlist_add(&pfile->list, &ref_node->file_list);\n\n\treturn 0;\n}\n\nstatic int __io_sqe_files_update(struct io_ring_ctx *ctx,\n\t\t\t\t struct io_uring_files_update *up,\n\t\t\t\t unsigned nr_args)\n{\n\tstruct fixed_file_data *data = ctx->file_data;\n\tstruct fixed_file_ref_node *ref_node;\n\tstruct file *file;\n\t__s32 __user *fds;\n\tint fd, i, err;\n\t__u32 done;\n\tbool needs_switch = false;\n\n\tif (check_add_overflow(up->offset, nr_args, &done))\n\t\treturn -EOVERFLOW;\n\tif (done > ctx->nr_user_files)\n\t\treturn -EINVAL;\n\n\tref_node = alloc_fixed_file_ref_node(ctx);\n\tif (IS_ERR(ref_node))\n\t\treturn PTR_ERR(ref_node);\n\n\tdone = 0;\n\tfds = u64_to_user_ptr(up->fds);\n\twhile (nr_args) {\n\t\tstruct fixed_file_table *table;\n\t\tunsigned index;\n\n\t\terr = 0;\n\t\tif (copy_from_user(&fd, &fds[done], sizeof(fd))) {\n\t\t\terr = -EFAULT;\n\t\t\tbreak;\n\t\t}\n\t\ti = array_index_nospec(up->offset, ctx->nr_user_files);\n\t\ttable = &ctx->file_data->table[i >> IORING_FILE_TABLE_SHIFT];\n\t\tindex = i & IORING_FILE_TABLE_MASK;\n\t\tif (table->files[index]) {\n\t\t\tfile = table->files[index];\n\t\t\terr = io_queue_file_removal(data, file);\n\t\t\tif (err)\n\t\t\t\tbreak;\n\t\t\ttable->files[index] = NULL;\n\t\t\tneeds_switch = true;\n\t\t}\n\t\tif (fd != -1) {\n\t\t\tfile = fget(fd);\n\t\t\tif (!file) {\n\t\t\t\terr = -EBADF;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*\n\t\t\t * Don't allow io_uring instances to be registered. If\n\t\t\t * UNIX isn't enabled, then this causes a reference\n\t\t\t * cycle and this instance can never get freed. If UNIX\n\t\t\t * is enabled we'll handle it just fine, but there's\n\t\t\t * still no point in allowing a ring fd as it doesn't\n\t\t\t * support regular read/write anyway.\n\t\t\t */\n\t\t\tif (file->f_op == &io_uring_fops) {\n\t\t\t\tfput(file);\n\t\t\t\terr = -EBADF;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttable->files[index] = file;\n\t\t\terr = io_sqe_file_register(ctx, file, i);\n\t\t\tif (err) {\n\t\t\t\ttable->files[index] = NULL;\n\t\t\t\tfput(file);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnr_args--;\n\t\tdone++;\n\t\tup->offset++;\n\t}\n\n\tif (needs_switch) {\n\t\tpercpu_ref_kill(&data->node->refs);\n\t\tspin_lock(&data->lock);\n\t\tlist_add(&ref_node->node, &data->ref_list);\n\t\tdata->node = ref_node;\n\t\tspin_unlock(&data->lock);\n\t\tpercpu_ref_get(&ctx->file_data->refs);\n\t} else\n\t\tdestroy_fixed_file_ref_node(ref_node);\n\n\treturn done ? done : err;\n}\n\nstatic int io_sqe_files_update(struct io_ring_ctx *ctx, void __user *arg,\n\t\t\t       unsigned nr_args)\n{\n\tstruct io_uring_files_update up;\n\n\tif (!ctx->file_data)\n\t\treturn -ENXIO;\n\tif (!nr_args)\n\t\treturn -EINVAL;\n\tif (copy_from_user(&up, arg, sizeof(up)))\n\t\treturn -EFAULT;\n\tif (up.resv)\n\t\treturn -EINVAL;\n\n\treturn __io_sqe_files_update(ctx, &up, nr_args);\n}\n\nstatic void io_free_work(struct io_wq_work *work)\n{\n\tstruct io_kiocb *req = container_of(work, struct io_kiocb, work);\n\n\t/* Consider that io_steal_work() relies on this ref */\n\tio_put_req(req);\n}\n\nstatic int io_init_wq_offload(struct io_ring_ctx *ctx,\n\t\t\t      struct io_uring_params *p)\n{\n\tstruct io_wq_data data;\n\tstruct fd f;\n\tstruct io_ring_ctx *ctx_attach;\n\tunsigned int concurrency;\n\tint ret = 0;\n\n\tdata.user = ctx->user;\n\tdata.free_work = io_free_work;\n\tdata.do_work = io_wq_submit_work;\n\n\tif (!(p->flags & IORING_SETUP_ATTACH_WQ)) {\n\t\t/* Do QD, or 4 * CPUS, whatever is smallest */\n\t\tconcurrency = min(ctx->sq_entries, 4 * num_online_cpus());\n\n\t\tctx->io_wq = io_wq_create(concurrency, &data);\n\t\tif (IS_ERR(ctx->io_wq)) {\n\t\t\tret = PTR_ERR(ctx->io_wq);\n\t\t\tctx->io_wq = NULL;\n\t\t}\n\t\treturn ret;\n\t}\n\n\tf = fdget(p->wq_fd);\n\tif (!f.file)\n\t\treturn -EBADF;\n\n\tif (f.file->f_op != &io_uring_fops) {\n\t\tret = -EINVAL;\n\t\tgoto out_fput;\n\t}\n\n\tctx_attach = f.file->private_data;\n\t/* @io_wq is protected by holding the fd */\n\tif (!io_wq_get(ctx_attach->io_wq, &data)) {\n\t\tret = -EINVAL;\n\t\tgoto out_fput;\n\t}\n\n\tctx->io_wq = ctx_attach->io_wq;\nout_fput:\n\tfdput(f);\n\treturn ret;\n}\n\nstatic int io_uring_alloc_task_context(struct task_struct *task)\n{\n\tstruct io_uring_task *tctx;\n\n\ttctx = kmalloc(sizeof(*tctx), GFP_KERNEL);\n\tif (unlikely(!tctx))\n\t\treturn -ENOMEM;\n\n\txa_init(&tctx->xa);\n\tinit_waitqueue_head(&tctx->wait);\n\ttctx->last = NULL;\n\ttctx->in_idle = 0;\n\tatomic_long_set(&tctx->req_issue, 0);\n\tatomic_long_set(&tctx->req_complete, 0);\n\ttask->io_uring = tctx;\n\treturn 0;\n}\n\nvoid __io_uring_free(struct task_struct *tsk)\n{\n\tstruct io_uring_task *tctx = tsk->io_uring;\n\n\tWARN_ON_ONCE(!xa_empty(&tctx->xa));\n\tkfree(tctx);\n\ttsk->io_uring = NULL;\n}\n\nstatic int io_sq_offload_create(struct io_ring_ctx *ctx,\n\t\t\t\tstruct io_uring_params *p)\n{\n\tint ret;\n\n\tif (ctx->flags & IORING_SETUP_SQPOLL) {\n\t\tstruct io_sq_data *sqd;\n\n\t\tret = -EPERM;\n\t\tif (!capable(CAP_SYS_ADMIN))\n\t\t\tgoto err;\n\n\t\tsqd = io_get_sq_data(p);\n\t\tif (IS_ERR(sqd)) {\n\t\t\tret = PTR_ERR(sqd);\n\t\t\tgoto err;\n\t\t}\n\n\t\tctx->sq_data = sqd;\n\t\tio_sq_thread_park(sqd);\n\t\tmutex_lock(&sqd->ctx_lock);\n\t\tlist_add(&ctx->sqd_list, &sqd->ctx_new_list);\n\t\tmutex_unlock(&sqd->ctx_lock);\n\t\tio_sq_thread_unpark(sqd);\n\n\t\tctx->sq_thread_idle = msecs_to_jiffies(p->sq_thread_idle);\n\t\tif (!ctx->sq_thread_idle)\n\t\t\tctx->sq_thread_idle = HZ;\n\n\t\tif (sqd->thread)\n\t\t\tgoto done;\n\n\t\tif (p->flags & IORING_SETUP_SQ_AFF) {\n\t\t\tint cpu = p->sq_thread_cpu;\n\n\t\t\tret = -EINVAL;\n\t\t\tif (cpu >= nr_cpu_ids)\n\t\t\t\tgoto err;\n\t\t\tif (!cpu_online(cpu))\n\t\t\t\tgoto err;\n\n\t\t\tsqd->thread = kthread_create_on_cpu(io_sq_thread, sqd,\n\t\t\t\t\t\t\tcpu, \"io_uring-sq\");\n\t\t} else {\n\t\t\tsqd->thread = kthread_create(io_sq_thread, sqd,\n\t\t\t\t\t\t\t\"io_uring-sq\");\n\t\t}\n\t\tif (IS_ERR(sqd->thread)) {\n\t\t\tret = PTR_ERR(sqd->thread);\n\t\t\tsqd->thread = NULL;\n\t\t\tgoto err;\n\t\t}\n\t\tret = io_uring_alloc_task_context(sqd->thread);\n\t\tif (ret)\n\t\t\tgoto err;\n\t} else if (p->flags & IORING_SETUP_SQ_AFF) {\n\t\t/* Can't have SQ_AFF without SQPOLL */\n\t\tret = -EINVAL;\n\t\tgoto err;\n\t}\n\ndone:\n\tret = io_init_wq_offload(ctx, p);\n\tif (ret)\n\t\tgoto err;\n\n\treturn 0;\nerr:\n\tio_finish_async(ctx);\n\treturn ret;\n}\n\nstatic void io_sq_offload_start(struct io_ring_ctx *ctx)\n{\n\tstruct io_sq_data *sqd = ctx->sq_data;\n\n\tif ((ctx->flags & IORING_SETUP_SQPOLL) && sqd->thread)\n\t\twake_up_process(sqd->thread);\n}\n\nstatic inline void __io_unaccount_mem(struct user_struct *user,\n\t\t\t\t      unsigned long nr_pages)\n{\n\tatomic_long_sub(nr_pages, &user->locked_vm);\n}\n\nstatic inline int __io_account_mem(struct user_struct *user,\n\t\t\t\t   unsigned long nr_pages)\n{\n\tunsigned long page_limit, cur_pages, new_pages;\n\n\t/* Don't allow more pages than we can safely lock */\n\tpage_limit = rlimit(RLIMIT_MEMLOCK) >> PAGE_SHIFT;\n\n\tdo {\n\t\tcur_pages = atomic_long_read(&user->locked_vm);\n\t\tnew_pages = cur_pages + nr_pages;\n\t\tif (new_pages > page_limit)\n\t\t\treturn -ENOMEM;\n\t} while (atomic_long_cmpxchg(&user->locked_vm, cur_pages,\n\t\t\t\t\tnew_pages) != cur_pages);\n\n\treturn 0;\n}\n\nstatic void io_unaccount_mem(struct io_ring_ctx *ctx, unsigned long nr_pages,\n\t\t\t     enum io_mem_account acct)\n{\n\tif (ctx->limit_mem)\n\t\t__io_unaccount_mem(ctx->user, nr_pages);\n\n\tif (ctx->mm_account) {\n\t\tif (acct == ACCT_LOCKED)\n\t\t\tctx->mm_account->locked_vm -= nr_pages;\n\t\telse if (acct == ACCT_PINNED)\n\t\t\tatomic64_sub(nr_pages, &ctx->mm_account->pinned_vm);\n\t}\n}\n\nstatic int io_account_mem(struct io_ring_ctx *ctx, unsigned long nr_pages,\n\t\t\t  enum io_mem_account acct)\n{\n\tint ret;\n\n\tif (ctx->limit_mem) {\n\t\tret = __io_account_mem(ctx->user, nr_pages);\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\tif (ctx->mm_account) {\n\t\tif (acct == ACCT_LOCKED)\n\t\t\tctx->mm_account->locked_vm += nr_pages;\n\t\telse if (acct == ACCT_PINNED)\n\t\t\tatomic64_add(nr_pages, &ctx->mm_account->pinned_vm);\n\t}\n\n\treturn 0;\n}\n\nstatic void io_mem_free(void *ptr)\n{\n\tstruct page *page;\n\n\tif (!ptr)\n\t\treturn;\n\n\tpage = virt_to_head_page(ptr);\n\tif (put_page_testzero(page))\n\t\tfree_compound_page(page);\n}\n\nstatic void *io_mem_alloc(size_t size)\n{\n\tgfp_t gfp_flags = GFP_KERNEL | __GFP_ZERO | __GFP_NOWARN | __GFP_COMP |\n\t\t\t\t__GFP_NORETRY;\n\n\treturn (void *) __get_free_pages(gfp_flags, get_order(size));\n}\n\nstatic unsigned long rings_size(unsigned sq_entries, unsigned cq_entries,\n\t\t\t\tsize_t *sq_offset)\n{\n\tstruct io_rings *rings;\n\tsize_t off, sq_array_size;\n\n\toff = struct_size(rings, cqes, cq_entries);\n\tif (off == SIZE_MAX)\n\t\treturn SIZE_MAX;\n\n#ifdef CONFIG_SMP\n\toff = ALIGN(off, SMP_CACHE_BYTES);\n\tif (off == 0)\n\t\treturn SIZE_MAX;\n#endif\n\n\tif (sq_offset)\n\t\t*sq_offset = off;\n\n\tsq_array_size = array_size(sizeof(u32), sq_entries);\n\tif (sq_array_size == SIZE_MAX)\n\t\treturn SIZE_MAX;\n\n\tif (check_add_overflow(off, sq_array_size, &off))\n\t\treturn SIZE_MAX;\n\n\treturn off;\n}\n\nstatic unsigned long ring_pages(unsigned sq_entries, unsigned cq_entries)\n{\n\tsize_t pages;\n\n\tpages = (size_t)1 << get_order(\n\t\trings_size(sq_entries, cq_entries, NULL));\n\tpages += (size_t)1 << get_order(\n\t\tarray_size(sizeof(struct io_uring_sqe), sq_entries));\n\n\treturn pages;\n}\n\nstatic int io_sqe_buffer_unregister(struct io_ring_ctx *ctx)\n{\n\tint i, j;\n\n\tif (!ctx->user_bufs)\n\t\treturn -ENXIO;\n\n\tfor (i = 0; i < ctx->nr_user_bufs; i++) {\n\t\tstruct io_mapped_ubuf *imu = &ctx->user_bufs[i];\n\n\t\tfor (j = 0; j < imu->nr_bvecs; j++)\n\t\t\tunpin_user_page(imu->bvec[j].bv_page);\n\n\t\tif (imu->acct_pages)\n\t\t\tio_unaccount_mem(ctx, imu->acct_pages, ACCT_PINNED);\n\t\tkvfree(imu->bvec);\n\t\timu->nr_bvecs = 0;\n\t}\n\n\tkfree(ctx->user_bufs);\n\tctx->user_bufs = NULL;\n\tctx->nr_user_bufs = 0;\n\treturn 0;\n}\n\nstatic int io_copy_iov(struct io_ring_ctx *ctx, struct iovec *dst,\n\t\t       void __user *arg, unsigned index)\n{\n\tstruct iovec __user *src;\n\n#ifdef CONFIG_COMPAT\n\tif (ctx->compat) {\n\t\tstruct compat_iovec __user *ciovs;\n\t\tstruct compat_iovec ciov;\n\n\t\tciovs = (struct compat_iovec __user *) arg;\n\t\tif (copy_from_user(&ciov, &ciovs[index], sizeof(ciov)))\n\t\t\treturn -EFAULT;\n\n\t\tdst->iov_base = u64_to_user_ptr((u64)ciov.iov_base);\n\t\tdst->iov_len = ciov.iov_len;\n\t\treturn 0;\n\t}\n#endif\n\tsrc = (struct iovec __user *) arg;\n\tif (copy_from_user(dst, &src[index], sizeof(*dst)))\n\t\treturn -EFAULT;\n\treturn 0;\n}\n\n/*\n * Not super efficient, but this is just a registration time. And we do cache\n * the last compound head, so generally we'll only do a full search if we don't\n * match that one.\n *\n * We check if the given compound head page has already been accounted, to\n * avoid double accounting it. This allows us to account the full size of the\n * page, not just the constituent pages of a huge page.\n */\nstatic bool headpage_already_acct(struct io_ring_ctx *ctx, struct page **pages,\n\t\t\t\t  int nr_pages, struct page *hpage)\n{\n\tint i, j;\n\n\t/* check current page array */\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tif (!PageCompound(pages[i]))\n\t\t\tcontinue;\n\t\tif (compound_head(pages[i]) == hpage)\n\t\t\treturn true;\n\t}\n\n\t/* check previously registered pages */\n\tfor (i = 0; i < ctx->nr_user_bufs; i++) {\n\t\tstruct io_mapped_ubuf *imu = &ctx->user_bufs[i];\n\n\t\tfor (j = 0; j < imu->nr_bvecs; j++) {\n\t\t\tif (!PageCompound(imu->bvec[j].bv_page))\n\t\t\t\tcontinue;\n\t\t\tif (compound_head(imu->bvec[j].bv_page) == hpage)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nstatic int io_buffer_account_pin(struct io_ring_ctx *ctx, struct page **pages,\n\t\t\t\t int nr_pages, struct io_mapped_ubuf *imu,\n\t\t\t\t struct page **last_hpage)\n{\n\tint i, ret;\n\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tif (!PageCompound(pages[i])) {\n\t\t\timu->acct_pages++;\n\t\t} else {\n\t\t\tstruct page *hpage;\n\n\t\t\thpage = compound_head(pages[i]);\n\t\t\tif (hpage == *last_hpage)\n\t\t\t\tcontinue;\n\t\t\t*last_hpage = hpage;\n\t\t\tif (headpage_already_acct(ctx, pages, i, hpage))\n\t\t\t\tcontinue;\n\t\t\timu->acct_pages += page_size(hpage) >> PAGE_SHIFT;\n\t\t}\n\t}\n\n\tif (!imu->acct_pages)\n\t\treturn 0;\n\n\tret = io_account_mem(ctx, imu->acct_pages, ACCT_PINNED);\n\tif (ret)\n\t\timu->acct_pages = 0;\n\treturn ret;\n}\n\nstatic int io_sqe_buffer_register(struct io_ring_ctx *ctx, void __user *arg,\n\t\t\t\t  unsigned nr_args)\n{\n\tstruct vm_area_struct **vmas = NULL;\n\tstruct page **pages = NULL;\n\tstruct page *last_hpage = NULL;\n\tint i, j, got_pages = 0;\n\tint ret = -EINVAL;\n\n\tif (ctx->user_bufs)\n\t\treturn -EBUSY;\n\tif (!nr_args || nr_args > UIO_MAXIOV)\n\t\treturn -EINVAL;\n\n\tctx->user_bufs = kcalloc(nr_args, sizeof(struct io_mapped_ubuf),\n\t\t\t\t\tGFP_KERNEL);\n\tif (!ctx->user_bufs)\n\t\treturn -ENOMEM;\n\n\tfor (i = 0; i < nr_args; i++) {\n\t\tstruct io_mapped_ubuf *imu = &ctx->user_bufs[i];\n\t\tunsigned long off, start, end, ubuf;\n\t\tint pret, nr_pages;\n\t\tstruct iovec iov;\n\t\tsize_t size;\n\n\t\tret = io_copy_iov(ctx, &iov, arg, i);\n\t\tif (ret)\n\t\t\tgoto err;\n\n\t\t/*\n\t\t * Don't impose further limits on the size and buffer\n\t\t * constraints here, we'll -EINVAL later when IO is\n\t\t * submitted if they are wrong.\n\t\t */\n\t\tret = -EFAULT;\n\t\tif (!iov.iov_base || !iov.iov_len)\n\t\t\tgoto err;\n\n\t\t/* arbitrary limit, but we need something */\n\t\tif (iov.iov_len > SZ_1G)\n\t\t\tgoto err;\n\n\t\tubuf = (unsigned long) iov.iov_base;\n\t\tend = (ubuf + iov.iov_len + PAGE_SIZE - 1) >> PAGE_SHIFT;\n\t\tstart = ubuf >> PAGE_SHIFT;\n\t\tnr_pages = end - start;\n\n\t\tret = 0;\n\t\tif (!pages || nr_pages > got_pages) {\n\t\t\tkvfree(vmas);\n\t\t\tkvfree(pages);\n\t\t\tpages = kvmalloc_array(nr_pages, sizeof(struct page *),\n\t\t\t\t\t\tGFP_KERNEL);\n\t\t\tvmas = kvmalloc_array(nr_pages,\n\t\t\t\t\tsizeof(struct vm_area_struct *),\n\t\t\t\t\tGFP_KERNEL);\n\t\t\tif (!pages || !vmas) {\n\t\t\t\tret = -ENOMEM;\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tgot_pages = nr_pages;\n\t\t}\n\n\t\timu->bvec = kvmalloc_array(nr_pages, sizeof(struct bio_vec),\n\t\t\t\t\t\tGFP_KERNEL);\n\t\tret = -ENOMEM;\n\t\tif (!imu->bvec)\n\t\t\tgoto err;\n\n\t\tret = 0;\n\t\tmmap_read_lock(current->mm);\n\t\tpret = pin_user_pages(ubuf, nr_pages,\n\t\t\t\t      FOLL_WRITE | FOLL_LONGTERM,\n\t\t\t\t      pages, vmas);\n\t\tif (pret == nr_pages) {\n\t\t\t/* don't support file backed memory */\n\t\t\tfor (j = 0; j < nr_pages; j++) {\n\t\t\t\tstruct vm_area_struct *vma = vmas[j];\n\n\t\t\t\tif (vma->vm_file &&\n\t\t\t\t    !is_file_hugepages(vma->vm_file)) {\n\t\t\t\t\tret = -EOPNOTSUPP;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tret = pret < 0 ? pret : -EFAULT;\n\t\t}\n\t\tmmap_read_unlock(current->mm);\n\t\tif (ret) {\n\t\t\t/*\n\t\t\t * if we did partial map, or found file backed vmas,\n\t\t\t * release any pages we did get\n\t\t\t */\n\t\t\tif (pret > 0)\n\t\t\t\tunpin_user_pages(pages, pret);\n\t\t\tkvfree(imu->bvec);\n\t\t\tgoto err;\n\t\t}\n\n\t\tret = io_buffer_account_pin(ctx, pages, pret, imu, &last_hpage);\n\t\tif (ret) {\n\t\t\tunpin_user_pages(pages, pret);\n\t\t\tkvfree(imu->bvec);\n\t\t\tgoto err;\n\t\t}\n\n\t\toff = ubuf & ~PAGE_MASK;\n\t\tsize = iov.iov_len;\n\t\tfor (j = 0; j < nr_pages; j++) {\n\t\t\tsize_t vec_len;\n\n\t\t\tvec_len = min_t(size_t, size, PAGE_SIZE - off);\n\t\t\timu->bvec[j].bv_page = pages[j];\n\t\t\timu->bvec[j].bv_len = vec_len;\n\t\t\timu->bvec[j].bv_offset = off;\n\t\t\toff = 0;\n\t\t\tsize -= vec_len;\n\t\t}\n\t\t/* store original address for later verification */\n\t\timu->ubuf = ubuf;\n\t\timu->len = iov.iov_len;\n\t\timu->nr_bvecs = nr_pages;\n\n\t\tctx->nr_user_bufs++;\n\t}\n\tkvfree(pages);\n\tkvfree(vmas);\n\treturn 0;\nerr:\n\tkvfree(pages);\n\tkvfree(vmas);\n\tio_sqe_buffer_unregister(ctx);\n\treturn ret;\n}\n\nstatic int io_eventfd_register(struct io_ring_ctx *ctx, void __user *arg)\n{\n\t__s32 __user *fds = arg;\n\tint fd;\n\n\tif (ctx->cq_ev_fd)\n\t\treturn -EBUSY;\n\n\tif (copy_from_user(&fd, fds, sizeof(*fds)))\n\t\treturn -EFAULT;\n\n\tctx->cq_ev_fd = eventfd_ctx_fdget(fd);\n\tif (IS_ERR(ctx->cq_ev_fd)) {\n\t\tint ret = PTR_ERR(ctx->cq_ev_fd);\n\t\tctx->cq_ev_fd = NULL;\n\t\treturn ret;\n\t}\n\n\treturn 0;\n}\n\nstatic int io_eventfd_unregister(struct io_ring_ctx *ctx)\n{\n\tif (ctx->cq_ev_fd) {\n\t\teventfd_ctx_put(ctx->cq_ev_fd);\n\t\tctx->cq_ev_fd = NULL;\n\t\treturn 0;\n\t}\n\n\treturn -ENXIO;\n}\n\nstatic int __io_destroy_buffers(int id, void *p, void *data)\n{\n\tstruct io_ring_ctx *ctx = data;\n\tstruct io_buffer *buf = p;\n\n\t__io_remove_buffers(ctx, buf, id, -1U);\n\treturn 0;\n}\n\nstatic void io_destroy_buffers(struct io_ring_ctx *ctx)\n{\n\tidr_for_each(&ctx->io_buffer_idr, __io_destroy_buffers, ctx);\n\tidr_destroy(&ctx->io_buffer_idr);\n}\n\nstatic void io_ring_ctx_free(struct io_ring_ctx *ctx)\n{\n\tio_finish_async(ctx);\n\tio_sqe_buffer_unregister(ctx);\n\n\tif (ctx->sqo_task) {\n\t\tput_task_struct(ctx->sqo_task);\n\t\tctx->sqo_task = NULL;\n\t\tmmdrop(ctx->mm_account);\n\t\tctx->mm_account = NULL;\n\t}\n\n#ifdef CONFIG_BLK_CGROUP\n\tif (ctx->sqo_blkcg_css)\n\t\tcss_put(ctx->sqo_blkcg_css);\n#endif\n\n\tio_sqe_files_unregister(ctx);\n\tio_eventfd_unregister(ctx);\n\tio_destroy_buffers(ctx);\n\tidr_destroy(&ctx->personality_idr);\n\n#if defined(CONFIG_UNIX)\n\tif (ctx->ring_sock) {\n\t\tctx->ring_sock->file = NULL; /* so that iput() is called */\n\t\tsock_release(ctx->ring_sock);\n\t}\n#endif\n\n\tio_mem_free(ctx->rings);\n\tio_mem_free(ctx->sq_sqes);\n\n\tpercpu_ref_exit(&ctx->refs);\n\tfree_uid(ctx->user);\n\tput_cred(ctx->creds);\n\tkfree(ctx->cancel_hash);\n\tkmem_cache_free(req_cachep, ctx->fallback_req);\n\tkfree(ctx);\n}\n\nstatic __poll_t io_uring_poll(struct file *file, poll_table *wait)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\t__poll_t mask = 0;\n\n\tpoll_wait(file, &ctx->cq_wait, wait);\n\t/*\n\t * synchronizes with barrier from wq_has_sleeper call in\n\t * io_commit_cqring\n\t */\n\tsmp_rmb();\n\tif (!io_sqring_full(ctx))\n\t\tmask |= EPOLLOUT | EPOLLWRNORM;\n\tif (io_cqring_events(ctx, false))\n\t\tmask |= EPOLLIN | EPOLLRDNORM;\n\n\treturn mask;\n}\n\nstatic int io_uring_fasync(int fd, struct file *file, int on)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\n\treturn fasync_helper(fd, file, on, &ctx->cq_fasync);\n}\n\nstatic int io_remove_personalities(int id, void *p, void *data)\n{\n\tstruct io_ring_ctx *ctx = data;\n\tconst struct cred *cred;\n\n\tcred = idr_remove(&ctx->personality_idr, id);\n\tif (cred)\n\t\tput_cred(cred);\n\treturn 0;\n}\n\nstatic void io_ring_exit_work(struct work_struct *work)\n{\n\tstruct io_ring_ctx *ctx = container_of(work, struct io_ring_ctx,\n\t\t\t\t\t       exit_work);\n\n\t/*\n\t * If we're doing polled IO and end up having requests being\n\t * submitted async (out-of-line), then completions can come in while\n\t * we're waiting for refs to drop. We need to reap these manually,\n\t * as nobody else will be looking for them.\n\t */\n\tdo {\n\t\tif (ctx->rings)\n\t\t\tio_cqring_overflow_flush(ctx, true, NULL, NULL);\n\t\tio_iopoll_try_reap_events(ctx);\n\t} while (!wait_for_completion_timeout(&ctx->ref_comp, HZ/20));\n\tio_ring_ctx_free(ctx);\n}\n\nstatic void io_ring_ctx_wait_and_kill(struct io_ring_ctx *ctx)\n{\n\tmutex_lock(&ctx->uring_lock);\n\tpercpu_ref_kill(&ctx->refs);\n\tmutex_unlock(&ctx->uring_lock);\n\n\tio_kill_timeouts(ctx, NULL);\n\tio_poll_remove_all(ctx, NULL);\n\n\tif (ctx->io_wq)\n\t\tio_wq_cancel_all(ctx->io_wq);\n\n\t/* if we failed setting up the ctx, we might not have any rings */\n\tif (ctx->rings)\n\t\tio_cqring_overflow_flush(ctx, true, NULL, NULL);\n\tio_iopoll_try_reap_events(ctx);\n\tidr_for_each(&ctx->personality_idr, io_remove_personalities, ctx);\n\n\t/*\n\t * Do this upfront, so we won't have a grace period where the ring\n\t * is closed but resources aren't reaped yet. This can cause\n\t * spurious failure in setting up a new ring.\n\t */\n\tio_unaccount_mem(ctx, ring_pages(ctx->sq_entries, ctx->cq_entries),\n\t\t\t ACCT_LOCKED);\n\n\tINIT_WORK(&ctx->exit_work, io_ring_exit_work);\n\t/*\n\t * Use system_unbound_wq to avoid spawning tons of event kworkers\n\t * if we're exiting a ton of rings at the same time. It just adds\n\t * noise and overhead, there's no discernable change in runtime\n\t * over using system_wq.\n\t */\n\tqueue_work(system_unbound_wq, &ctx->exit_work);\n}\n\nstatic int io_uring_release(struct inode *inode, struct file *file)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\n\tfile->private_data = NULL;\n\tio_ring_ctx_wait_and_kill(ctx);\n\treturn 0;\n}\n\nstatic bool io_wq_files_match(struct io_wq_work *work, void *data)\n{\n\tstruct files_struct *files = data;\n\n\treturn !files || ((work->flags & IO_WQ_WORK_FILES) &&\n\t\t\t\twork->identity->files == files);\n}\n\n/*\n * Returns true if 'preq' is the link parent of 'req'\n */\nstatic bool io_match_link(struct io_kiocb *preq, struct io_kiocb *req)\n{\n\tstruct io_kiocb *link;\n\n\tif (!(preq->flags & REQ_F_LINK_HEAD))\n\t\treturn false;\n\n\tlist_for_each_entry(link, &preq->link_list, link_list) {\n\t\tif (link == req)\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nstatic bool io_match_link_files(struct io_kiocb *req,\n\t\t\t\tstruct files_struct *files)\n{\n\tstruct io_kiocb *link;\n\n\tif (io_match_files(req, files))\n\t\treturn true;\n\tif (req->flags & REQ_F_LINK_HEAD) {\n\t\tlist_for_each_entry(link, &req->link_list, link_list) {\n\t\t\tif (io_match_files(link, files))\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*\n * We're looking to cancel 'req' because it's holding on to our files, but\n * 'req' could be a link to another request. See if it is, and cancel that\n * parent request if so.\n */\nstatic bool io_poll_remove_link(struct io_ring_ctx *ctx, struct io_kiocb *req)\n{\n\tstruct hlist_node *tmp;\n\tstruct io_kiocb *preq;\n\tbool found = false;\n\tint i;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tfor (i = 0; i < (1U << ctx->cancel_hash_bits); i++) {\n\t\tstruct hlist_head *list;\n\n\t\tlist = &ctx->cancel_hash[i];\n\t\thlist_for_each_entry_safe(preq, tmp, list, hash_node) {\n\t\t\tfound = io_match_link(preq, req);\n\t\t\tif (found) {\n\t\t\t\tio_poll_remove_one(preq);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn found;\n}\n\nstatic bool io_timeout_remove_link(struct io_ring_ctx *ctx,\n\t\t\t\t   struct io_kiocb *req)\n{\n\tstruct io_kiocb *preq;\n\tbool found = false;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tlist_for_each_entry(preq, &ctx->timeout_list, timeout.list) {\n\t\tfound = io_match_link(preq, req);\n\t\tif (found) {\n\t\t\t__io_timeout_cancel(preq);\n\t\t\tbreak;\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn found;\n}\n\nstatic bool io_cancel_link_cb(struct io_wq_work *work, void *data)\n{\n\treturn io_match_link(container_of(work, struct io_kiocb, work), data);\n}\n\nstatic void io_attempt_cancel(struct io_ring_ctx *ctx, struct io_kiocb *req)\n{\n\tenum io_wq_cancel cret;\n\n\t/* cancel this particular work, if it's running */\n\tcret = io_wq_cancel_work(ctx->io_wq, &req->work);\n\tif (cret != IO_WQ_CANCEL_NOTFOUND)\n\t\treturn;\n\n\t/* find links that hold this pending, cancel those */\n\tcret = io_wq_cancel_cb(ctx->io_wq, io_cancel_link_cb, req, true);\n\tif (cret != IO_WQ_CANCEL_NOTFOUND)\n\t\treturn;\n\n\t/* if we have a poll link holding this pending, cancel that */\n\tif (io_poll_remove_link(ctx, req))\n\t\treturn;\n\n\t/* final option, timeout link is holding this req pending */\n\tio_timeout_remove_link(ctx, req);\n}\n\nstatic void io_cancel_defer_files(struct io_ring_ctx *ctx,\n\t\t\t\t  struct files_struct *files)\n{\n\tstruct io_defer_entry *de = NULL;\n\tLIST_HEAD(list);\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tlist_for_each_entry_reverse(de, &ctx->defer_list, list) {\n\t\tif (io_match_link_files(de->req, files)) {\n\t\t\tlist_cut_position(&list, &ctx->defer_list, &de->list);\n\t\t\tbreak;\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\twhile (!list_empty(&list)) {\n\t\tde = list_first_entry(&list, struct io_defer_entry, list);\n\t\tlist_del_init(&de->list);\n\t\treq_set_fail_links(de->req);\n\t\tio_put_req(de->req);\n\t\tio_req_complete(de->req, -ECANCELED);\n\t\tkfree(de);\n\t}\n}\n\n/*\n * Returns true if we found and killed one or more files pinning requests\n */\nstatic bool io_uring_cancel_files(struct io_ring_ctx *ctx,\n\t\t\t\t  struct files_struct *files)\n{\n\tif (list_empty_careful(&ctx->inflight_list))\n\t\treturn false;\n\n\tio_cancel_defer_files(ctx, files);\n\t/* cancel all at once, should be faster than doing it one by one*/\n\tio_wq_cancel_cb(ctx->io_wq, io_wq_files_match, files, true);\n\n\twhile (!list_empty_careful(&ctx->inflight_list)) {\n\t\tstruct io_kiocb *cancel_req = NULL, *req;\n\t\tDEFINE_WAIT(wait);\n\n\t\tspin_lock_irq(&ctx->inflight_lock);\n\t\tlist_for_each_entry(req, &ctx->inflight_list, inflight_entry) {\n\t\t\tif (files && (req->work.flags & IO_WQ_WORK_FILES) &&\n\t\t\t    req->work.identity->files != files)\n\t\t\t\tcontinue;\n\t\t\t/* req is being completed, ignore */\n\t\t\tif (!refcount_inc_not_zero(&req->refs))\n\t\t\t\tcontinue;\n\t\t\tcancel_req = req;\n\t\t\tbreak;\n\t\t}\n\t\tif (cancel_req)\n\t\t\tprepare_to_wait(&ctx->inflight_wait, &wait,\n\t\t\t\t\t\tTASK_UNINTERRUPTIBLE);\n\t\tspin_unlock_irq(&ctx->inflight_lock);\n\n\t\t/* We need to keep going until we don't find a matching req */\n\t\tif (!cancel_req)\n\t\t\tbreak;\n\t\t/* cancel this request, or head link requests */\n\t\tio_attempt_cancel(ctx, cancel_req);\n\t\tio_put_req(cancel_req);\n\t\t/* cancellations _may_ trigger task work */\n\t\tio_run_task_work();\n\t\tschedule();\n\t\tfinish_wait(&ctx->inflight_wait, &wait);\n\t}\n\n\treturn true;\n}\n\nstatic bool io_cancel_task_cb(struct io_wq_work *work, void *data)\n{\n\tstruct io_kiocb *req = container_of(work, struct io_kiocb, work);\n\tstruct task_struct *task = data;\n\n\treturn io_task_match(req, task);\n}\n\nstatic bool __io_uring_cancel_task_requests(struct io_ring_ctx *ctx,\n\t\t\t\t\t    struct task_struct *task,\n\t\t\t\t\t    struct files_struct *files)\n{\n\tbool ret;\n\n\tret = io_uring_cancel_files(ctx, files);\n\tif (!files) {\n\t\tenum io_wq_cancel cret;\n\n\t\tcret = io_wq_cancel_cb(ctx->io_wq, io_cancel_task_cb, task, true);\n\t\tif (cret != IO_WQ_CANCEL_NOTFOUND)\n\t\t\tret = true;\n\n\t\t/* SQPOLL thread does its own polling */\n\t\tif (!(ctx->flags & IORING_SETUP_SQPOLL)) {\n\t\t\twhile (!list_empty_careful(&ctx->iopoll_list)) {\n\t\t\t\tio_iopoll_try_reap_events(ctx);\n\t\t\t\tret = true;\n\t\t\t}\n\t\t}\n\n\t\tret |= io_poll_remove_all(ctx, task);\n\t\tret |= io_kill_timeouts(ctx, task);\n\t}\n\n\treturn ret;\n}\n\n/*\n * We need to iteratively cancel requests, in case a request has dependent\n * hard links. These persist even for failure of cancelations, hence keep\n * looping until none are found.\n */\nstatic void io_uring_cancel_task_requests(struct io_ring_ctx *ctx,\n\t\t\t\t\t  struct files_struct *files)\n{\n\tstruct task_struct *task = current;\n\n\tif ((ctx->flags & IORING_SETUP_SQPOLL) && ctx->sq_data)\n\t\ttask = ctx->sq_data->thread;\n\n\tio_cqring_overflow_flush(ctx, true, task, files);\n\n\twhile (__io_uring_cancel_task_requests(ctx, task, files)) {\n\t\tio_run_task_work();\n\t\tcond_resched();\n\t}\n}\n\n/*\n * Note that this task has used io_uring. We use it for cancelation purposes.\n */\nstatic int io_uring_add_task_file(struct file *file)\n{\n\tstruct io_uring_task *tctx = current->io_uring;\n\n\tif (unlikely(!tctx)) {\n\t\tint ret;\n\n\t\tret = io_uring_alloc_task_context(current);\n\t\tif (unlikely(ret))\n\t\t\treturn ret;\n\t\ttctx = current->io_uring;\n\t}\n\tif (tctx->last != file) {\n\t\tvoid *old = xa_load(&tctx->xa, (unsigned long)file);\n\n\t\tif (!old) {\n\t\t\tget_file(file);\n\t\t\txa_store(&tctx->xa, (unsigned long)file, file, GFP_KERNEL);\n\t\t}\n\t\ttctx->last = file;\n\t}\n\n\treturn 0;\n}\n\n/*\n * Remove this io_uring_file -> task mapping.\n */\nstatic void io_uring_del_task_file(struct file *file)\n{\n\tstruct io_uring_task *tctx = current->io_uring;\n\n\tif (tctx->last == file)\n\t\ttctx->last = NULL;\n\tfile = xa_erase(&tctx->xa, (unsigned long)file);\n\tif (file)\n\t\tfput(file);\n}\n\nstatic void __io_uring_attempt_task_drop(struct file *file)\n{\n\tstruct file *old = xa_load(&current->io_uring->xa, (unsigned long)file);\n\n\tif (old == file)\n\t\tio_uring_del_task_file(file);\n}\n\n/*\n * Drop task note for this file if we're the only ones that hold it after\n * pending fput()\n */\nstatic void io_uring_attempt_task_drop(struct file *file, bool exiting)\n{\n\tif (!current->io_uring)\n\t\treturn;\n\t/*\n\t * fput() is pending, will be 2 if the only other ref is our potential\n\t * task file note. If the task is exiting, drop regardless of count.\n\t */\n\tif (!exiting && atomic_long_read(&file->f_count) != 2)\n\t\treturn;\n\n\t__io_uring_attempt_task_drop(file);\n}\n\nvoid __io_uring_files_cancel(struct files_struct *files)\n{\n\tstruct io_uring_task *tctx = current->io_uring;\n\tstruct file *file;\n\tunsigned long index;\n\n\t/* make sure overflow events are dropped */\n\ttctx->in_idle = true;\n\n\txa_for_each(&tctx->xa, index, file) {\n\t\tstruct io_ring_ctx *ctx = file->private_data;\n\n\t\tio_uring_cancel_task_requests(ctx, files);\n\t\tif (files)\n\t\t\tio_uring_del_task_file(file);\n\t}\n}\n\nstatic inline bool io_uring_task_idle(struct io_uring_task *tctx)\n{\n\treturn atomic_long_read(&tctx->req_issue) ==\n\t\tatomic_long_read(&tctx->req_complete);\n}\n\n/*\n * Find any io_uring fd that this task has registered or done IO on, and cancel\n * requests.\n */\nvoid __io_uring_task_cancel(void)\n{\n\tstruct io_uring_task *tctx = current->io_uring;\n\tDEFINE_WAIT(wait);\n\tlong completions;\n\n\t/* make sure overflow events are dropped */\n\ttctx->in_idle = true;\n\n\twhile (!io_uring_task_idle(tctx)) {\n\t\t/* read completions before cancelations */\n\t\tcompletions = atomic_long_read(&tctx->req_complete);\n\t\t__io_uring_files_cancel(NULL);\n\n\t\tprepare_to_wait(&tctx->wait, &wait, TASK_UNINTERRUPTIBLE);\n\n\t\t/*\n\t\t * If we've seen completions, retry. This avoids a race where\n\t\t * a completion comes in before we did prepare_to_wait().\n\t\t */\n\t\tif (completions != atomic_long_read(&tctx->req_complete))\n\t\t\tcontinue;\n\t\tif (io_uring_task_idle(tctx))\n\t\t\tbreak;\n\t\tschedule();\n\t}\n\n\tfinish_wait(&tctx->wait, &wait);\n\ttctx->in_idle = false;\n}\n\nstatic int io_uring_flush(struct file *file, void *data)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\n\t/*\n\t * If the task is going away, cancel work it may have pending\n\t */\n\tif (fatal_signal_pending(current) || (current->flags & PF_EXITING))\n\t\tdata = NULL;\n\n\tio_uring_cancel_task_requests(ctx, data);\n\tio_uring_attempt_task_drop(file, !data);\n\treturn 0;\n}\n\nstatic void *io_uring_validate_mmap_request(struct file *file,\n\t\t\t\t\t    loff_t pgoff, size_t sz)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\tloff_t offset = pgoff << PAGE_SHIFT;\n\tstruct page *page;\n\tvoid *ptr;\n\n\tswitch (offset) {\n\tcase IORING_OFF_SQ_RING:\n\tcase IORING_OFF_CQ_RING:\n\t\tptr = ctx->rings;\n\t\tbreak;\n\tcase IORING_OFF_SQES:\n\t\tptr = ctx->sq_sqes;\n\t\tbreak;\n\tdefault:\n\t\treturn ERR_PTR(-EINVAL);\n\t}\n\n\tpage = virt_to_head_page(ptr);\n\tif (sz > page_size(page))\n\t\treturn ERR_PTR(-EINVAL);\n\n\treturn ptr;\n}\n\n#ifdef CONFIG_MMU\n\nstatic int io_uring_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\tsize_t sz = vma->vm_end - vma->vm_start;\n\tunsigned long pfn;\n\tvoid *ptr;\n\n\tptr = io_uring_validate_mmap_request(file, vma->vm_pgoff, sz);\n\tif (IS_ERR(ptr))\n\t\treturn PTR_ERR(ptr);\n\n\tpfn = virt_to_phys(ptr) >> PAGE_SHIFT;\n\treturn remap_pfn_range(vma, vma->vm_start, pfn, sz, vma->vm_page_prot);\n}\n\n#else /* !CONFIG_MMU */\n\nstatic int io_uring_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\treturn vma->vm_flags & (VM_SHARED | VM_MAYSHARE) ? 0 : -EINVAL;\n}\n\nstatic unsigned int io_uring_nommu_mmap_capabilities(struct file *file)\n{\n\treturn NOMMU_MAP_DIRECT | NOMMU_MAP_READ | NOMMU_MAP_WRITE;\n}\n\nstatic unsigned long io_uring_nommu_get_unmapped_area(struct file *file,\n\tunsigned long addr, unsigned long len,\n\tunsigned long pgoff, unsigned long flags)\n{\n\tvoid *ptr;\n\n\tptr = io_uring_validate_mmap_request(file, pgoff, len);\n\tif (IS_ERR(ptr))\n\t\treturn PTR_ERR(ptr);\n\n\treturn (unsigned long) ptr;\n}\n\n#endif /* !CONFIG_MMU */\n\nstatic void io_sqpoll_wait_sq(struct io_ring_ctx *ctx)\n{\n\tDEFINE_WAIT(wait);\n\n\tdo {\n\t\tif (!io_sqring_full(ctx))\n\t\t\tbreak;\n\n\t\tprepare_to_wait(&ctx->sqo_sq_wait, &wait, TASK_INTERRUPTIBLE);\n\n\t\tif (!io_sqring_full(ctx))\n\t\t\tbreak;\n\n\t\tschedule();\n\t} while (!signal_pending(current));\n\n\tfinish_wait(&ctx->sqo_sq_wait, &wait);\n}\n\nSYSCALL_DEFINE6(io_uring_enter, unsigned int, fd, u32, to_submit,\n\t\tu32, min_complete, u32, flags, const sigset_t __user *, sig,\n\t\tsize_t, sigsz)\n{\n\tstruct io_ring_ctx *ctx;\n\tlong ret = -EBADF;\n\tint submitted = 0;\n\tstruct fd f;\n\n\tio_run_task_work();\n\n\tif (flags & ~(IORING_ENTER_GETEVENTS | IORING_ENTER_SQ_WAKEUP |\n\t\t\tIORING_ENTER_SQ_WAIT))\n\t\treturn -EINVAL;\n\n\tf = fdget(fd);\n\tif (!f.file)\n\t\treturn -EBADF;\n\n\tret = -EOPNOTSUPP;\n\tif (f.file->f_op != &io_uring_fops)\n\t\tgoto out_fput;\n\n\tret = -ENXIO;\n\tctx = f.file->private_data;\n\tif (!percpu_ref_tryget(&ctx->refs))\n\t\tgoto out_fput;\n\n\tret = -EBADFD;\n\tif (ctx->flags & IORING_SETUP_R_DISABLED)\n\t\tgoto out;\n\n\t/*\n\t * For SQ polling, the thread will do all submissions and completions.\n\t * Just return the requested submit count, and wake the thread if\n\t * we were asked to.\n\t */\n\tret = 0;\n\tif (ctx->flags & IORING_SETUP_SQPOLL) {\n\t\tif (!list_empty_careful(&ctx->cq_overflow_list))\n\t\t\tio_cqring_overflow_flush(ctx, false, NULL, NULL);\n\t\tif (flags & IORING_ENTER_SQ_WAKEUP)\n\t\t\twake_up(&ctx->sq_data->wait);\n\t\tif (flags & IORING_ENTER_SQ_WAIT)\n\t\t\tio_sqpoll_wait_sq(ctx);\n\t\tsubmitted = to_submit;\n\t} else if (to_submit) {\n\t\tret = io_uring_add_task_file(f.file);\n\t\tif (unlikely(ret))\n\t\t\tgoto out;\n\t\tmutex_lock(&ctx->uring_lock);\n\t\tsubmitted = io_submit_sqes(ctx, to_submit);\n\t\tmutex_unlock(&ctx->uring_lock);\n\n\t\tif (submitted != to_submit)\n\t\t\tgoto out;\n\t}\n\tif (flags & IORING_ENTER_GETEVENTS) {\n\t\tmin_complete = min(min_complete, ctx->cq_entries);\n\n\t\t/*\n\t\t * When SETUP_IOPOLL and SETUP_SQPOLL are both enabled, user\n\t\t * space applications don't need to do io completion events\n\t\t * polling again, they can rely on io_sq_thread to do polling\n\t\t * work, which can reduce cpu usage and uring_lock contention.\n\t\t */\n\t\tif (ctx->flags & IORING_SETUP_IOPOLL &&\n\t\t    !(ctx->flags & IORING_SETUP_SQPOLL)) {\n\t\t\tret = io_iopoll_check(ctx, min_complete);\n\t\t} else {\n\t\t\tret = io_cqring_wait(ctx, min_complete, sig, sigsz);\n\t\t}\n\t}\n\nout:\n\tpercpu_ref_put(&ctx->refs);\nout_fput:\n\tfdput(f);\n\treturn submitted ? submitted : ret;\n}\n\n#ifdef CONFIG_PROC_FS\nstatic int io_uring_show_cred(int id, void *p, void *data)\n{\n\tconst struct cred *cred = p;\n\tstruct seq_file *m = data;\n\tstruct user_namespace *uns = seq_user_ns(m);\n\tstruct group_info *gi;\n\tkernel_cap_t cap;\n\tunsigned __capi;\n\tint g;\n\n\tseq_printf(m, \"%5d\\n\", id);\n\tseq_put_decimal_ull(m, \"\\tUid:\\t\", from_kuid_munged(uns, cred->uid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kuid_munged(uns, cred->euid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kuid_munged(uns, cred->suid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kuid_munged(uns, cred->fsuid));\n\tseq_put_decimal_ull(m, \"\\n\\tGid:\\t\", from_kgid_munged(uns, cred->gid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kgid_munged(uns, cred->egid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kgid_munged(uns, cred->sgid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kgid_munged(uns, cred->fsgid));\n\tseq_puts(m, \"\\n\\tGroups:\\t\");\n\tgi = cred->group_info;\n\tfor (g = 0; g < gi->ngroups; g++) {\n\t\tseq_put_decimal_ull(m, g ? \" \" : \"\",\n\t\t\t\t\tfrom_kgid_munged(uns, gi->gid[g]));\n\t}\n\tseq_puts(m, \"\\n\\tCapEff:\\t\");\n\tcap = cred->cap_effective;\n\tCAP_FOR_EACH_U32(__capi)\n\t\tseq_put_hex_ll(m, NULL, cap.cap[CAP_LAST_U32 - __capi], 8);\n\tseq_putc(m, '\\n');\n\treturn 0;\n}\n\nstatic void __io_uring_show_fdinfo(struct io_ring_ctx *ctx, struct seq_file *m)\n{\n\tstruct io_sq_data *sq = NULL;\n\tbool has_lock;\n\tint i;\n\n\t/*\n\t * Avoid ABBA deadlock between the seq lock and the io_uring mutex,\n\t * since fdinfo case grabs it in the opposite direction of normal use\n\t * cases. If we fail to get the lock, we just don't iterate any\n\t * structures that could be going away outside the io_uring mutex.\n\t */\n\thas_lock = mutex_trylock(&ctx->uring_lock);\n\n\tif (has_lock && (ctx->flags & IORING_SETUP_SQPOLL))\n\t\tsq = ctx->sq_data;\n\n\tseq_printf(m, \"SqThread:\\t%d\\n\", sq ? task_pid_nr(sq->thread) : -1);\n\tseq_printf(m, \"SqThreadCpu:\\t%d\\n\", sq ? task_cpu(sq->thread) : -1);\n\tseq_printf(m, \"UserFiles:\\t%u\\n\", ctx->nr_user_files);\n\tfor (i = 0; has_lock && i < ctx->nr_user_files; i++) {\n\t\tstruct fixed_file_table *table;\n\t\tstruct file *f;\n\n\t\ttable = &ctx->file_data->table[i >> IORING_FILE_TABLE_SHIFT];\n\t\tf = table->files[i & IORING_FILE_TABLE_MASK];\n\t\tif (f)\n\t\t\tseq_printf(m, \"%5u: %s\\n\", i, file_dentry(f)->d_iname);\n\t\telse\n\t\t\tseq_printf(m, \"%5u: <none>\\n\", i);\n\t}\n\tseq_printf(m, \"UserBufs:\\t%u\\n\", ctx->nr_user_bufs);\n\tfor (i = 0; has_lock && i < ctx->nr_user_bufs; i++) {\n\t\tstruct io_mapped_ubuf *buf = &ctx->user_bufs[i];\n\n\t\tseq_printf(m, \"%5u: 0x%llx/%u\\n\", i, buf->ubuf,\n\t\t\t\t\t\t(unsigned int) buf->len);\n\t}\n\tif (has_lock && !idr_is_empty(&ctx->personality_idr)) {\n\t\tseq_printf(m, \"Personalities:\\n\");\n\t\tidr_for_each(&ctx->personality_idr, io_uring_show_cred, m);\n\t}\n\tseq_printf(m, \"PollList:\\n\");\n\tspin_lock_irq(&ctx->completion_lock);\n\tfor (i = 0; i < (1U << ctx->cancel_hash_bits); i++) {\n\t\tstruct hlist_head *list = &ctx->cancel_hash[i];\n\t\tstruct io_kiocb *req;\n\n\t\thlist_for_each_entry(req, list, hash_node)\n\t\t\tseq_printf(m, \"  op=%d, task_works=%d\\n\", req->opcode,\n\t\t\t\t\treq->task->task_works != NULL);\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\tif (has_lock)\n\t\tmutex_unlock(&ctx->uring_lock);\n}\n\nstatic void io_uring_show_fdinfo(struct seq_file *m, struct file *f)\n{\n\tstruct io_ring_ctx *ctx = f->private_data;\n\n\tif (percpu_ref_tryget(&ctx->refs)) {\n\t\t__io_uring_show_fdinfo(ctx, m);\n\t\tpercpu_ref_put(&ctx->refs);\n\t}\n}\n#endif\n\nstatic const struct file_operations io_uring_fops = {\n\t.release\t= io_uring_release,\n\t.flush\t\t= io_uring_flush,\n\t.mmap\t\t= io_uring_mmap,\n#ifndef CONFIG_MMU\n\t.get_unmapped_area = io_uring_nommu_get_unmapped_area,\n\t.mmap_capabilities = io_uring_nommu_mmap_capabilities,\n#endif\n\t.poll\t\t= io_uring_poll,\n\t.fasync\t\t= io_uring_fasync,\n#ifdef CONFIG_PROC_FS\n\t.show_fdinfo\t= io_uring_show_fdinfo,\n#endif\n};\n\nstatic int io_allocate_scq_urings(struct io_ring_ctx *ctx,\n\t\t\t\t  struct io_uring_params *p)\n{\n\tstruct io_rings *rings;\n\tsize_t size, sq_array_offset;\n\n\t/* make sure these are sane, as we already accounted them */\n\tctx->sq_entries = p->sq_entries;\n\tctx->cq_entries = p->cq_entries;\n\n\tsize = rings_size(p->sq_entries, p->cq_entries, &sq_array_offset);\n\tif (size == SIZE_MAX)\n\t\treturn -EOVERFLOW;\n\n\trings = io_mem_alloc(size);\n\tif (!rings)\n\t\treturn -ENOMEM;\n\n\tctx->rings = rings;\n\tctx->sq_array = (u32 *)((char *)rings + sq_array_offset);\n\trings->sq_ring_mask = p->sq_entries - 1;\n\trings->cq_ring_mask = p->cq_entries - 1;\n\trings->sq_ring_entries = p->sq_entries;\n\trings->cq_ring_entries = p->cq_entries;\n\tctx->sq_mask = rings->sq_ring_mask;\n\tctx->cq_mask = rings->cq_ring_mask;\n\n\tsize = array_size(sizeof(struct io_uring_sqe), p->sq_entries);\n\tif (size == SIZE_MAX) {\n\t\tio_mem_free(ctx->rings);\n\t\tctx->rings = NULL;\n\t\treturn -EOVERFLOW;\n\t}\n\n\tctx->sq_sqes = io_mem_alloc(size);\n\tif (!ctx->sq_sqes) {\n\t\tio_mem_free(ctx->rings);\n\t\tctx->rings = NULL;\n\t\treturn -ENOMEM;\n\t}\n\n\treturn 0;\n}\n\n/*\n * Allocate an anonymous fd, this is what constitutes the application\n * visible backing of an io_uring instance. The application mmaps this\n * fd to gain access to the SQ/CQ ring details. If UNIX sockets are enabled,\n * we have to tie this fd to a socket for file garbage collection purposes.\n */\nstatic int io_uring_get_fd(struct io_ring_ctx *ctx)\n{\n\tstruct file *file;\n\tint ret;\n\n#if defined(CONFIG_UNIX)\n\tret = sock_create_kern(&init_net, PF_UNIX, SOCK_RAW, IPPROTO_IP,\n\t\t\t\t&ctx->ring_sock);\n\tif (ret)\n\t\treturn ret;\n#endif\n\n\tret = get_unused_fd_flags(O_RDWR | O_CLOEXEC);\n\tif (ret < 0)\n\t\tgoto err;\n\n\tfile = anon_inode_getfile(\"[io_uring]\", &io_uring_fops, ctx,\n\t\t\t\t\tO_RDWR | O_CLOEXEC);\n\tif (IS_ERR(file)) {\nerr_fd:\n\t\tput_unused_fd(ret);\n\t\tret = PTR_ERR(file);\n\t\tgoto err;\n\t}\n\n#if defined(CONFIG_UNIX)\n\tctx->ring_sock->file = file;\n#endif\n\tif (unlikely(io_uring_add_task_file(file))) {\n\t\tfile = ERR_PTR(-ENOMEM);\n\t\tgoto err_fd;\n\t}\n\tfd_install(ret, file);\n\treturn ret;\nerr:\n#if defined(CONFIG_UNIX)\n\tsock_release(ctx->ring_sock);\n\tctx->ring_sock = NULL;\n#endif\n\treturn ret;\n}\n\nstatic int io_uring_create(unsigned entries, struct io_uring_params *p,\n\t\t\t   struct io_uring_params __user *params)\n{\n\tstruct user_struct *user = NULL;\n\tstruct io_ring_ctx *ctx;\n\tbool limit_mem;\n\tint ret;\n\n\tif (!entries)\n\t\treturn -EINVAL;\n\tif (entries > IORING_MAX_ENTRIES) {\n\t\tif (!(p->flags & IORING_SETUP_CLAMP))\n\t\t\treturn -EINVAL;\n\t\tentries = IORING_MAX_ENTRIES;\n\t}\n\n\t/*\n\t * Use twice as many entries for the CQ ring. It's possible for the\n\t * application to drive a higher depth than the size of the SQ ring,\n\t * since the sqes are only used at submission time. This allows for\n\t * some flexibility in overcommitting a bit. If the application has\n\t * set IORING_SETUP_CQSIZE, it will have passed in the desired number\n\t * of CQ ring entries manually.\n\t */\n\tp->sq_entries = roundup_pow_of_two(entries);\n\tif (p->flags & IORING_SETUP_CQSIZE) {\n\t\t/*\n\t\t * If IORING_SETUP_CQSIZE is set, we do the same roundup\n\t\t * to a power-of-two, if it isn't already. We do NOT impose\n\t\t * any cq vs sq ring sizing.\n\t\t */\n\t\tif (p->cq_entries < p->sq_entries)\n\t\t\treturn -EINVAL;\n\t\tif (p->cq_entries > IORING_MAX_CQ_ENTRIES) {\n\t\t\tif (!(p->flags & IORING_SETUP_CLAMP))\n\t\t\t\treturn -EINVAL;\n\t\t\tp->cq_entries = IORING_MAX_CQ_ENTRIES;\n\t\t}\n\t\tp->cq_entries = roundup_pow_of_two(p->cq_entries);\n\t} else {\n\t\tp->cq_entries = 2 * p->sq_entries;\n\t}\n\n\tuser = get_uid(current_user());\n\tlimit_mem = !capable(CAP_IPC_LOCK);\n\n\tif (limit_mem) {\n\t\tret = __io_account_mem(user,\n\t\t\t\tring_pages(p->sq_entries, p->cq_entries));\n\t\tif (ret) {\n\t\t\tfree_uid(user);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\tctx = io_ring_ctx_alloc(p);\n\tif (!ctx) {\n\t\tif (limit_mem)\n\t\t\t__io_unaccount_mem(user, ring_pages(p->sq_entries,\n\t\t\t\t\t\t\t\tp->cq_entries));\n\t\tfree_uid(user);\n\t\treturn -ENOMEM;\n\t}\n\tctx->compat = in_compat_syscall();\n\tctx->user = user;\n\tctx->creds = get_current_cred();\n\n\tctx->sqo_task = get_task_struct(current);\n\n\t/*\n\t * This is just grabbed for accounting purposes. When a process exits,\n\t * the mm is exited and dropped before the files, hence we need to hang\n\t * on to this mm purely for the purposes of being able to unaccount\n\t * memory (locked/pinned vm). It's not used for anything else.\n\t */\n\tmmgrab(current->mm);\n\tctx->mm_account = current->mm;\n\n#ifdef CONFIG_BLK_CGROUP\n\t/*\n\t * The sq thread will belong to the original cgroup it was inited in.\n\t * If the cgroup goes offline (e.g. disabling the io controller), then\n\t * issued bios will be associated with the closest cgroup later in the\n\t * block layer.\n\t */\n\trcu_read_lock();\n\tctx->sqo_blkcg_css = blkcg_css();\n\tret = css_tryget_online(ctx->sqo_blkcg_css);\n\trcu_read_unlock();\n\tif (!ret) {\n\t\t/* don't init against a dying cgroup, have the user try again */\n\t\tctx->sqo_blkcg_css = NULL;\n\t\tret = -ENODEV;\n\t\tgoto err;\n\t}\n#endif\n\n\t/*\n\t * Account memory _before_ installing the file descriptor. Once\n\t * the descriptor is installed, it can get closed at any time. Also\n\t * do this before hitting the general error path, as ring freeing\n\t * will un-account as well.\n\t */\n\tio_account_mem(ctx, ring_pages(p->sq_entries, p->cq_entries),\n\t\t       ACCT_LOCKED);\n\tctx->limit_mem = limit_mem;\n\n\tret = io_allocate_scq_urings(ctx, p);\n\tif (ret)\n\t\tgoto err;\n\n\tret = io_sq_offload_create(ctx, p);\n\tif (ret)\n\t\tgoto err;\n\n\tif (!(p->flags & IORING_SETUP_R_DISABLED))\n\t\tio_sq_offload_start(ctx);\n\n\tmemset(&p->sq_off, 0, sizeof(p->sq_off));\n\tp->sq_off.head = offsetof(struct io_rings, sq.head);\n\tp->sq_off.tail = offsetof(struct io_rings, sq.tail);\n\tp->sq_off.ring_mask = offsetof(struct io_rings, sq_ring_mask);\n\tp->sq_off.ring_entries = offsetof(struct io_rings, sq_ring_entries);\n\tp->sq_off.flags = offsetof(struct io_rings, sq_flags);\n\tp->sq_off.dropped = offsetof(struct io_rings, sq_dropped);\n\tp->sq_off.array = (char *)ctx->sq_array - (char *)ctx->rings;\n\n\tmemset(&p->cq_off, 0, sizeof(p->cq_off));\n\tp->cq_off.head = offsetof(struct io_rings, cq.head);\n\tp->cq_off.tail = offsetof(struct io_rings, cq.tail);\n\tp->cq_off.ring_mask = offsetof(struct io_rings, cq_ring_mask);\n\tp->cq_off.ring_entries = offsetof(struct io_rings, cq_ring_entries);\n\tp->cq_off.overflow = offsetof(struct io_rings, cq_overflow);\n\tp->cq_off.cqes = offsetof(struct io_rings, cqes);\n\tp->cq_off.flags = offsetof(struct io_rings, cq_flags);\n\n\tp->features = IORING_FEAT_SINGLE_MMAP | IORING_FEAT_NODROP |\n\t\t\tIORING_FEAT_SUBMIT_STABLE | IORING_FEAT_RW_CUR_POS |\n\t\t\tIORING_FEAT_CUR_PERSONALITY | IORING_FEAT_FAST_POLL |\n\t\t\tIORING_FEAT_POLL_32BITS;\n\n\tif (copy_to_user(params, p, sizeof(*p))) {\n\t\tret = -EFAULT;\n\t\tgoto err;\n\t}\n\n\t/*\n\t * Install ring fd as the very last thing, so we don't risk someone\n\t * having closed it before we finish setup\n\t */\n\tret = io_uring_get_fd(ctx);\n\tif (ret < 0)\n\t\tgoto err;\n\n\ttrace_io_uring_create(ret, ctx, p->sq_entries, p->cq_entries, p->flags);\n\treturn ret;\nerr:\n\tio_ring_ctx_wait_and_kill(ctx);\n\treturn ret;\n}\n\n/*\n * Sets up an aio uring context, and returns the fd. Applications asks for a\n * ring size, we return the actual sq/cq ring sizes (among other things) in the\n * params structure passed in.\n */\nstatic long io_uring_setup(u32 entries, struct io_uring_params __user *params)\n{\n\tstruct io_uring_params p;\n\tint i;\n\n\tif (copy_from_user(&p, params, sizeof(p)))\n\t\treturn -EFAULT;\n\tfor (i = 0; i < ARRAY_SIZE(p.resv); i++) {\n\t\tif (p.resv[i])\n\t\t\treturn -EINVAL;\n\t}\n\n\tif (p.flags & ~(IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL |\n\t\t\tIORING_SETUP_SQ_AFF | IORING_SETUP_CQSIZE |\n\t\t\tIORING_SETUP_CLAMP | IORING_SETUP_ATTACH_WQ |\n\t\t\tIORING_SETUP_R_DISABLED))\n\t\treturn -EINVAL;\n\n\treturn  io_uring_create(entries, &p, params);\n}\n\nSYSCALL_DEFINE2(io_uring_setup, u32, entries,\n\t\tstruct io_uring_params __user *, params)\n{\n\treturn io_uring_setup(entries, params);\n}\n\nstatic int io_probe(struct io_ring_ctx *ctx, void __user *arg, unsigned nr_args)\n{\n\tstruct io_uring_probe *p;\n\tsize_t size;\n\tint i, ret;\n\n\tsize = struct_size(p, ops, nr_args);\n\tif (size == SIZE_MAX)\n\t\treturn -EOVERFLOW;\n\tp = kzalloc(size, GFP_KERNEL);\n\tif (!p)\n\t\treturn -ENOMEM;\n\n\tret = -EFAULT;\n\tif (copy_from_user(p, arg, size))\n\t\tgoto out;\n\tret = -EINVAL;\n\tif (memchr_inv(p, 0, size))\n\t\tgoto out;\n\n\tp->last_op = IORING_OP_LAST - 1;\n\tif (nr_args > IORING_OP_LAST)\n\t\tnr_args = IORING_OP_LAST;\n\n\tfor (i = 0; i < nr_args; i++) {\n\t\tp->ops[i].op = i;\n\t\tif (!io_op_defs[i].not_supported)\n\t\t\tp->ops[i].flags = IO_URING_OP_SUPPORTED;\n\t}\n\tp->ops_len = i;\n\n\tret = 0;\n\tif (copy_to_user(arg, p, size))\n\t\tret = -EFAULT;\nout:\n\tkfree(p);\n\treturn ret;\n}\n\nstatic int io_register_personality(struct io_ring_ctx *ctx)\n{\n\tconst struct cred *creds = get_current_cred();\n\tint id;\n\n\tid = idr_alloc_cyclic(&ctx->personality_idr, (void *) creds, 1,\n\t\t\t\tUSHRT_MAX, GFP_KERNEL);\n\tif (id < 0)\n\t\tput_cred(creds);\n\treturn id;\n}\n\nstatic int io_unregister_personality(struct io_ring_ctx *ctx, unsigned id)\n{\n\tconst struct cred *old_creds;\n\n\told_creds = idr_remove(&ctx->personality_idr, id);\n\tif (old_creds) {\n\t\tput_cred(old_creds);\n\t\treturn 0;\n\t}\n\n\treturn -EINVAL;\n}\n\nstatic int io_register_restrictions(struct io_ring_ctx *ctx, void __user *arg,\n\t\t\t\t    unsigned int nr_args)\n{\n\tstruct io_uring_restriction *res;\n\tsize_t size;\n\tint i, ret;\n\n\t/* Restrictions allowed only if rings started disabled */\n\tif (!(ctx->flags & IORING_SETUP_R_DISABLED))\n\t\treturn -EBADFD;\n\n\t/* We allow only a single restrictions registration */\n\tif (ctx->restrictions.registered)\n\t\treturn -EBUSY;\n\n\tif (!arg || nr_args > IORING_MAX_RESTRICTIONS)\n\t\treturn -EINVAL;\n\n\tsize = array_size(nr_args, sizeof(*res));\n\tif (size == SIZE_MAX)\n\t\treturn -EOVERFLOW;\n\n\tres = memdup_user(arg, size);\n\tif (IS_ERR(res))\n\t\treturn PTR_ERR(res);\n\n\tret = 0;\n\n\tfor (i = 0; i < nr_args; i++) {\n\t\tswitch (res[i].opcode) {\n\t\tcase IORING_RESTRICTION_REGISTER_OP:\n\t\t\tif (res[i].register_op >= IORING_REGISTER_LAST) {\n\t\t\t\tret = -EINVAL;\n\t\t\t\tgoto out;\n\t\t\t}\n\n\t\t\t__set_bit(res[i].register_op,\n\t\t\t\t  ctx->restrictions.register_op);\n\t\t\tbreak;\n\t\tcase IORING_RESTRICTION_SQE_OP:\n\t\t\tif (res[i].sqe_op >= IORING_OP_LAST) {\n\t\t\t\tret = -EINVAL;\n\t\t\t\tgoto out;\n\t\t\t}\n\n\t\t\t__set_bit(res[i].sqe_op, ctx->restrictions.sqe_op);\n\t\t\tbreak;\n\t\tcase IORING_RESTRICTION_SQE_FLAGS_ALLOWED:\n\t\t\tctx->restrictions.sqe_flags_allowed = res[i].sqe_flags;\n\t\t\tbreak;\n\t\tcase IORING_RESTRICTION_SQE_FLAGS_REQUIRED:\n\t\t\tctx->restrictions.sqe_flags_required = res[i].sqe_flags;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tret = -EINVAL;\n\t\t\tgoto out;\n\t\t}\n\t}\n\nout:\n\t/* Reset all restrictions if an error happened */\n\tif (ret != 0)\n\t\tmemset(&ctx->restrictions, 0, sizeof(ctx->restrictions));\n\telse\n\t\tctx->restrictions.registered = true;\n\n\tkfree(res);\n\treturn ret;\n}\n\nstatic int io_register_enable_rings(struct io_ring_ctx *ctx)\n{\n\tif (!(ctx->flags & IORING_SETUP_R_DISABLED))\n\t\treturn -EBADFD;\n\n\tif (ctx->restrictions.registered)\n\t\tctx->restricted = 1;\n\n\tctx->flags &= ~IORING_SETUP_R_DISABLED;\n\n\tio_sq_offload_start(ctx);\n\n\treturn 0;\n}\n\nstatic bool io_register_op_must_quiesce(int op)\n{\n\tswitch (op) {\n\tcase IORING_UNREGISTER_FILES:\n\tcase IORING_REGISTER_FILES_UPDATE:\n\tcase IORING_REGISTER_PROBE:\n\tcase IORING_REGISTER_PERSONALITY:\n\tcase IORING_UNREGISTER_PERSONALITY:\n\t\treturn false;\n\tdefault:\n\t\treturn true;\n\t}\n}\n\nstatic int __io_uring_register(struct io_ring_ctx *ctx, unsigned opcode,\n\t\t\t       void __user *arg, unsigned nr_args)\n\t__releases(ctx->uring_lock)\n\t__acquires(ctx->uring_lock)\n{\n\tint ret;\n\n\t/*\n\t * We're inside the ring mutex, if the ref is already dying, then\n\t * someone else killed the ctx or is already going through\n\t * io_uring_register().\n\t */\n\tif (percpu_ref_is_dying(&ctx->refs))\n\t\treturn -ENXIO;\n\n\tif (io_register_op_must_quiesce(opcode)) {\n\t\tpercpu_ref_kill(&ctx->refs);\n\n\t\t/*\n\t\t * Drop uring mutex before waiting for references to exit. If\n\t\t * another thread is currently inside io_uring_enter() it might\n\t\t * need to grab the uring_lock to make progress. If we hold it\n\t\t * here across the drain wait, then we can deadlock. It's safe\n\t\t * to drop the mutex here, since no new references will come in\n\t\t * after we've killed the percpu ref.\n\t\t */\n\t\tmutex_unlock(&ctx->uring_lock);\n\t\tdo {\n\t\t\tret = wait_for_completion_interruptible(&ctx->ref_comp);\n\t\t\tif (!ret)\n\t\t\t\tbreak;\n\t\t\tret = io_run_task_work_sig();\n\t\t\tif (ret < 0)\n\t\t\t\tbreak;\n\t\t} while (1);\n\n\t\tmutex_lock(&ctx->uring_lock);\n\n\t\tif (ret) {\n\t\t\tpercpu_ref_resurrect(&ctx->refs);\n\t\t\tgoto out_quiesce;\n\t\t}\n\t}\n\n\tif (ctx->restricted) {\n\t\tif (opcode >= IORING_REGISTER_LAST) {\n\t\t\tret = -EINVAL;\n\t\t\tgoto out;\n\t\t}\n\n\t\tif (!test_bit(opcode, ctx->restrictions.register_op)) {\n\t\t\tret = -EACCES;\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tswitch (opcode) {\n\tcase IORING_REGISTER_BUFFERS:\n\t\tret = io_sqe_buffer_register(ctx, arg, nr_args);\n\t\tbreak;\n\tcase IORING_UNREGISTER_BUFFERS:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_sqe_buffer_unregister(ctx);\n\t\tbreak;\n\tcase IORING_REGISTER_FILES:\n\t\tret = io_sqe_files_register(ctx, arg, nr_args);\n\t\tbreak;\n\tcase IORING_UNREGISTER_FILES:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_sqe_files_unregister(ctx);\n\t\tbreak;\n\tcase IORING_REGISTER_FILES_UPDATE:\n\t\tret = io_sqe_files_update(ctx, arg, nr_args);\n\t\tbreak;\n\tcase IORING_REGISTER_EVENTFD:\n\tcase IORING_REGISTER_EVENTFD_ASYNC:\n\t\tret = -EINVAL;\n\t\tif (nr_args != 1)\n\t\t\tbreak;\n\t\tret = io_eventfd_register(ctx, arg);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tif (opcode == IORING_REGISTER_EVENTFD_ASYNC)\n\t\t\tctx->eventfd_async = 1;\n\t\telse\n\t\t\tctx->eventfd_async = 0;\n\t\tbreak;\n\tcase IORING_UNREGISTER_EVENTFD:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_eventfd_unregister(ctx);\n\t\tbreak;\n\tcase IORING_REGISTER_PROBE:\n\t\tret = -EINVAL;\n\t\tif (!arg || nr_args > 256)\n\t\t\tbreak;\n\t\tret = io_probe(ctx, arg, nr_args);\n\t\tbreak;\n\tcase IORING_REGISTER_PERSONALITY:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_register_personality(ctx);\n\t\tbreak;\n\tcase IORING_UNREGISTER_PERSONALITY:\n\t\tret = -EINVAL;\n\t\tif (arg)\n\t\t\tbreak;\n\t\tret = io_unregister_personality(ctx, nr_args);\n\t\tbreak;\n\tcase IORING_REGISTER_ENABLE_RINGS:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_register_enable_rings(ctx);\n\t\tbreak;\n\tcase IORING_REGISTER_RESTRICTIONS:\n\t\tret = io_register_restrictions(ctx, arg, nr_args);\n\t\tbreak;\n\tdefault:\n\t\tret = -EINVAL;\n\t\tbreak;\n\t}\n\nout:\n\tif (io_register_op_must_quiesce(opcode)) {\n\t\t/* bring the ctx back to life */\n\t\tpercpu_ref_reinit(&ctx->refs);\nout_quiesce:\n\t\treinit_completion(&ctx->ref_comp);\n\t}\n\treturn ret;\n}\n\nSYSCALL_DEFINE4(io_uring_register, unsigned int, fd, unsigned int, opcode,\n\t\tvoid __user *, arg, unsigned int, nr_args)\n{\n\tstruct io_ring_ctx *ctx;\n\tlong ret = -EBADF;\n\tstruct fd f;\n\n\tf = fdget(fd);\n\tif (!f.file)\n\t\treturn -EBADF;\n\n\tret = -EOPNOTSUPP;\n\tif (f.file->f_op != &io_uring_fops)\n\t\tgoto out_fput;\n\n\tctx = f.file->private_data;\n\n\tmutex_lock(&ctx->uring_lock);\n\tret = __io_uring_register(ctx, opcode, arg, nr_args);\n\tmutex_unlock(&ctx->uring_lock);\n\ttrace_io_uring_register(ctx, opcode, ctx->nr_user_files, ctx->nr_user_bufs,\n\t\t\t\t\t\t\tctx->cq_ev_fd != NULL, ret);\nout_fput:\n\tfdput(f);\n\treturn ret;\n}\n\nstatic int __init io_uring_init(void)\n{\n#define __BUILD_BUG_VERIFY_ELEMENT(stype, eoffset, etype, ename) do { \\\n\tBUILD_BUG_ON(offsetof(stype, ename) != eoffset); \\\n\tBUILD_BUG_ON(sizeof(etype) != sizeof_field(stype, ename)); \\\n} while (0)\n\n#define BUILD_BUG_SQE_ELEM(eoffset, etype, ename) \\\n\t__BUILD_BUG_VERIFY_ELEMENT(struct io_uring_sqe, eoffset, etype, ename)\n\tBUILD_BUG_ON(sizeof(struct io_uring_sqe) != 64);\n\tBUILD_BUG_SQE_ELEM(0,  __u8,   opcode);\n\tBUILD_BUG_SQE_ELEM(1,  __u8,   flags);\n\tBUILD_BUG_SQE_ELEM(2,  __u16,  ioprio);\n\tBUILD_BUG_SQE_ELEM(4,  __s32,  fd);\n\tBUILD_BUG_SQE_ELEM(8,  __u64,  off);\n\tBUILD_BUG_SQE_ELEM(8,  __u64,  addr2);\n\tBUILD_BUG_SQE_ELEM(16, __u64,  addr);\n\tBUILD_BUG_SQE_ELEM(16, __u64,  splice_off_in);\n\tBUILD_BUG_SQE_ELEM(24, __u32,  len);\n\tBUILD_BUG_SQE_ELEM(28,     __kernel_rwf_t, rw_flags);\n\tBUILD_BUG_SQE_ELEM(28, /* compat */   int, rw_flags);\n\tBUILD_BUG_SQE_ELEM(28, /* compat */ __u32, rw_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  fsync_flags);\n\tBUILD_BUG_SQE_ELEM(28, /* compat */ __u16,  poll_events);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  poll32_events);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  sync_range_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  msg_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  timeout_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  accept_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  cancel_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  open_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  statx_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  fadvise_advice);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  splice_flags);\n\tBUILD_BUG_SQE_ELEM(32, __u64,  user_data);\n\tBUILD_BUG_SQE_ELEM(40, __u16,  buf_index);\n\tBUILD_BUG_SQE_ELEM(42, __u16,  personality);\n\tBUILD_BUG_SQE_ELEM(44, __s32,  splice_fd_in);\n\n\tBUILD_BUG_ON(ARRAY_SIZE(io_op_defs) != IORING_OP_LAST);\n\tBUILD_BUG_ON(__REQ_F_LAST_BIT >= 8 * sizeof(int));\n\treq_cachep = KMEM_CACHE(io_kiocb, SLAB_HWCACHE_ALIGN | SLAB_PANIC);\n\treturn 0;\n};\n__initcall(io_uring_init);\n", "/* SPDX-License-Identifier: GPL-2.0-or-later */\n#ifndef _LINUX_IO_URING_H\n#define _LINUX_IO_URING_H\n\n#include <linux/sched.h>\n#include <linux/xarray.h>\n\nstruct io_identity {\n\tstruct files_struct\t\t*files;\n\tstruct mm_struct\t\t*mm;\n#ifdef CONFIG_BLK_CGROUP\n\tstruct cgroup_subsys_state\t*blkcg_css;\n#endif\n\tconst struct cred\t\t*creds;\n\tstruct nsproxy\t\t\t*nsproxy;\n\tstruct fs_struct\t\t*fs;\n\tunsigned long\t\t\tfsize;\n};\n\nstruct io_uring_task {\n\t/* submission side */\n\tstruct xarray\t\txa;\n\tstruct wait_queue_head\twait;\n\tstruct file\t\t*last;\n\tatomic_long_t\t\treq_issue;\n\n\t/* completion side */\n\tbool\t\t\tin_idle ____cacheline_aligned_in_smp;\n\tatomic_long_t\t\treq_complete;\n};\n\n#if defined(CONFIG_IO_URING)\nstruct sock *io_uring_get_socket(struct file *file);\nvoid __io_uring_task_cancel(void);\nvoid __io_uring_files_cancel(struct files_struct *files);\nvoid __io_uring_free(struct task_struct *tsk);\n\nstatic inline void io_uring_task_cancel(void)\n{\n\tif (current->io_uring && !xa_empty(&current->io_uring->xa))\n\t\t__io_uring_task_cancel();\n}\nstatic inline void io_uring_files_cancel(struct files_struct *files)\n{\n\tif (current->io_uring && !xa_empty(&current->io_uring->xa))\n\t\t__io_uring_files_cancel(files);\n}\nstatic inline void io_uring_free(struct task_struct *tsk)\n{\n\tif (tsk->io_uring)\n\t\t__io_uring_free(tsk);\n}\n#else\nstatic inline struct sock *io_uring_get_socket(struct file *file)\n{\n\treturn NULL;\n}\nstatic inline void io_uring_task_cancel(void)\n{\n}\nstatic inline void io_uring_files_cancel(struct files_struct *files)\n{\n}\nstatic inline void io_uring_free(struct task_struct *tsk)\n{\n}\n#endif\n\n#endif\n"], "fixing_code": ["// SPDX-License-Identifier: GPL-2.0\n/*\n * Shared application/kernel submission and completion ring pairs, for\n * supporting fast/efficient IO.\n *\n * A note on the read/write ordering memory barriers that are matched between\n * the application and kernel side.\n *\n * After the application reads the CQ ring tail, it must use an\n * appropriate smp_rmb() to pair with the smp_wmb() the kernel uses\n * before writing the tail (using smp_load_acquire to read the tail will\n * do). It also needs a smp_mb() before updating CQ head (ordering the\n * entry load(s) with the head store), pairing with an implicit barrier\n * through a control-dependency in io_get_cqring (smp_store_release to\n * store head will do). Failure to do so could lead to reading invalid\n * CQ entries.\n *\n * Likewise, the application must use an appropriate smp_wmb() before\n * writing the SQ tail (ordering SQ entry stores with the tail store),\n * which pairs with smp_load_acquire in io_get_sqring (smp_store_release\n * to store the tail will do). And it needs a barrier ordering the SQ\n * head load before writing new SQ entries (smp_load_acquire to read\n * head will do).\n *\n * When using the SQ poll thread (IORING_SETUP_SQPOLL), the application\n * needs to check the SQ flags for IORING_SQ_NEED_WAKEUP *after*\n * updating the SQ tail; a full memory barrier smp_mb() is needed\n * between.\n *\n * Also see the examples in the liburing library:\n *\n *\tgit://git.kernel.dk/liburing\n *\n * io_uring also uses READ/WRITE_ONCE() for _any_ store or load that happens\n * from data shared between the kernel and application. This is done both\n * for ordering purposes, but also to ensure that once a value is loaded from\n * data that the application could potentially modify, it remains stable.\n *\n * Copyright (C) 2018-2019 Jens Axboe\n * Copyright (c) 2018-2019 Christoph Hellwig\n */\n#include <linux/kernel.h>\n#include <linux/init.h>\n#include <linux/errno.h>\n#include <linux/syscalls.h>\n#include <linux/compat.h>\n#include <net/compat.h>\n#include <linux/refcount.h>\n#include <linux/uio.h>\n#include <linux/bits.h>\n\n#include <linux/sched/signal.h>\n#include <linux/fs.h>\n#include <linux/file.h>\n#include <linux/fdtable.h>\n#include <linux/mm.h>\n#include <linux/mman.h>\n#include <linux/percpu.h>\n#include <linux/slab.h>\n#include <linux/kthread.h>\n#include <linux/blkdev.h>\n#include <linux/bvec.h>\n#include <linux/net.h>\n#include <net/sock.h>\n#include <net/af_unix.h>\n#include <net/scm.h>\n#include <linux/anon_inodes.h>\n#include <linux/sched/mm.h>\n#include <linux/uaccess.h>\n#include <linux/nospec.h>\n#include <linux/sizes.h>\n#include <linux/hugetlb.h>\n#include <linux/highmem.h>\n#include <linux/namei.h>\n#include <linux/fsnotify.h>\n#include <linux/fadvise.h>\n#include <linux/eventpoll.h>\n#include <linux/fs_struct.h>\n#include <linux/splice.h>\n#include <linux/task_work.h>\n#include <linux/pagemap.h>\n#include <linux/io_uring.h>\n#include <linux/blk-cgroup.h>\n\n#define CREATE_TRACE_POINTS\n#include <trace/events/io_uring.h>\n\n#include <uapi/linux/io_uring.h>\n\n#include \"internal.h\"\n#include \"io-wq.h\"\n\n#define IORING_MAX_ENTRIES\t32768\n#define IORING_MAX_CQ_ENTRIES\t(2 * IORING_MAX_ENTRIES)\n\n/*\n * Shift of 9 is 512 entries, or exactly one page on 64-bit archs\n */\n#define IORING_FILE_TABLE_SHIFT\t9\n#define IORING_MAX_FILES_TABLE\t(1U << IORING_FILE_TABLE_SHIFT)\n#define IORING_FILE_TABLE_MASK\t(IORING_MAX_FILES_TABLE - 1)\n#define IORING_MAX_FIXED_FILES\t(64 * IORING_MAX_FILES_TABLE)\n#define IORING_MAX_RESTRICTIONS\t(IORING_RESTRICTION_LAST + \\\n\t\t\t\t IORING_REGISTER_LAST + IORING_OP_LAST)\n\nstruct io_uring {\n\tu32 head ____cacheline_aligned_in_smp;\n\tu32 tail ____cacheline_aligned_in_smp;\n};\n\n/*\n * This data is shared with the application through the mmap at offsets\n * IORING_OFF_SQ_RING and IORING_OFF_CQ_RING.\n *\n * The offsets to the member fields are published through struct\n * io_sqring_offsets when calling io_uring_setup.\n */\nstruct io_rings {\n\t/*\n\t * Head and tail offsets into the ring; the offsets need to be\n\t * masked to get valid indices.\n\t *\n\t * The kernel controls head of the sq ring and the tail of the cq ring,\n\t * and the application controls tail of the sq ring and the head of the\n\t * cq ring.\n\t */\n\tstruct io_uring\t\tsq, cq;\n\t/*\n\t * Bitmasks to apply to head and tail offsets (constant, equals\n\t * ring_entries - 1)\n\t */\n\tu32\t\t\tsq_ring_mask, cq_ring_mask;\n\t/* Ring sizes (constant, power of 2) */\n\tu32\t\t\tsq_ring_entries, cq_ring_entries;\n\t/*\n\t * Number of invalid entries dropped by the kernel due to\n\t * invalid index stored in array\n\t *\n\t * Written by the kernel, shouldn't be modified by the\n\t * application (i.e. get number of \"new events\" by comparing to\n\t * cached value).\n\t *\n\t * After a new SQ head value was read by the application this\n\t * counter includes all submissions that were dropped reaching\n\t * the new SQ head (and possibly more).\n\t */\n\tu32\t\t\tsq_dropped;\n\t/*\n\t * Runtime SQ flags\n\t *\n\t * Written by the kernel, shouldn't be modified by the\n\t * application.\n\t *\n\t * The application needs a full memory barrier before checking\n\t * for IORING_SQ_NEED_WAKEUP after updating the sq tail.\n\t */\n\tu32\t\t\tsq_flags;\n\t/*\n\t * Runtime CQ flags\n\t *\n\t * Written by the application, shouldn't be modified by the\n\t * kernel.\n\t */\n\tu32                     cq_flags;\n\t/*\n\t * Number of completion events lost because the queue was full;\n\t * this should be avoided by the application by making sure\n\t * there are not more requests pending than there is space in\n\t * the completion queue.\n\t *\n\t * Written by the kernel, shouldn't be modified by the\n\t * application (i.e. get number of \"new events\" by comparing to\n\t * cached value).\n\t *\n\t * As completion events come in out of order this counter is not\n\t * ordered with any other data.\n\t */\n\tu32\t\t\tcq_overflow;\n\t/*\n\t * Ring buffer of completion events.\n\t *\n\t * The kernel writes completion events fresh every time they are\n\t * produced, so the application is allowed to modify pending\n\t * entries.\n\t */\n\tstruct io_uring_cqe\tcqes[] ____cacheline_aligned_in_smp;\n};\n\nstruct io_mapped_ubuf {\n\tu64\t\tubuf;\n\tsize_t\t\tlen;\n\tstruct\t\tbio_vec *bvec;\n\tunsigned int\tnr_bvecs;\n\tunsigned long\tacct_pages;\n};\n\nstruct fixed_file_table {\n\tstruct file\t\t**files;\n};\n\nstruct fixed_file_ref_node {\n\tstruct percpu_ref\t\trefs;\n\tstruct list_head\t\tnode;\n\tstruct list_head\t\tfile_list;\n\tstruct fixed_file_data\t\t*file_data;\n\tstruct llist_node\t\tllist;\n};\n\nstruct fixed_file_data {\n\tstruct fixed_file_table\t\t*table;\n\tstruct io_ring_ctx\t\t*ctx;\n\n\tstruct fixed_file_ref_node\t*node;\n\tstruct percpu_ref\t\trefs;\n\tstruct completion\t\tdone;\n\tstruct list_head\t\tref_list;\n\tspinlock_t\t\t\tlock;\n};\n\nstruct io_buffer {\n\tstruct list_head list;\n\t__u64 addr;\n\t__s32 len;\n\t__u16 bid;\n};\n\nstruct io_restriction {\n\tDECLARE_BITMAP(register_op, IORING_REGISTER_LAST);\n\tDECLARE_BITMAP(sqe_op, IORING_OP_LAST);\n\tu8 sqe_flags_allowed;\n\tu8 sqe_flags_required;\n\tbool registered;\n};\n\nstruct io_sq_data {\n\trefcount_t\t\trefs;\n\tstruct mutex\t\tlock;\n\n\t/* ctx's that are using this sqd */\n\tstruct list_head\tctx_list;\n\tstruct list_head\tctx_new_list;\n\tstruct mutex\t\tctx_lock;\n\n\tstruct task_struct\t*thread;\n\tstruct wait_queue_head\twait;\n};\n\nstruct io_ring_ctx {\n\tstruct {\n\t\tstruct percpu_ref\trefs;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct {\n\t\tunsigned int\t\tflags;\n\t\tunsigned int\t\tcompat: 1;\n\t\tunsigned int\t\tlimit_mem: 1;\n\t\tunsigned int\t\tcq_overflow_flushed: 1;\n\t\tunsigned int\t\tdrain_next: 1;\n\t\tunsigned int\t\teventfd_async: 1;\n\t\tunsigned int\t\trestricted: 1;\n\n\t\t/*\n\t\t * Ring buffer of indices into array of io_uring_sqe, which is\n\t\t * mmapped by the application using the IORING_OFF_SQES offset.\n\t\t *\n\t\t * This indirection could e.g. be used to assign fixed\n\t\t * io_uring_sqe entries to operations and only submit them to\n\t\t * the queue when needed.\n\t\t *\n\t\t * The kernel modifies neither the indices array nor the entries\n\t\t * array.\n\t\t */\n\t\tu32\t\t\t*sq_array;\n\t\tunsigned\t\tcached_sq_head;\n\t\tunsigned\t\tsq_entries;\n\t\tunsigned\t\tsq_mask;\n\t\tunsigned\t\tsq_thread_idle;\n\t\tunsigned\t\tcached_sq_dropped;\n\t\tatomic_t\t\tcached_cq_overflow;\n\t\tunsigned long\t\tsq_check_overflow;\n\n\t\tstruct list_head\tdefer_list;\n\t\tstruct list_head\ttimeout_list;\n\t\tstruct list_head\tcq_overflow_list;\n\n\t\twait_queue_head_t\tinflight_wait;\n\t\tstruct io_uring_sqe\t*sq_sqes;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct io_rings\t*rings;\n\n\t/* IO offload */\n\tstruct io_wq\t\t*io_wq;\n\n\t/*\n\t * For SQPOLL usage - we hold a reference to the parent task, so we\n\t * have access to the ->files\n\t */\n\tstruct task_struct\t*sqo_task;\n\n\t/* Only used for accounting purposes */\n\tstruct mm_struct\t*mm_account;\n\n#ifdef CONFIG_BLK_CGROUP\n\tstruct cgroup_subsys_state\t*sqo_blkcg_css;\n#endif\n\n\tstruct io_sq_data\t*sq_data;\t/* if using sq thread polling */\n\n\tstruct wait_queue_head\tsqo_sq_wait;\n\tstruct wait_queue_entry\tsqo_wait_entry;\n\tstruct list_head\tsqd_list;\n\n\t/*\n\t * If used, fixed file set. Writers must ensure that ->refs is dead,\n\t * readers must ensure that ->refs is alive as long as the file* is\n\t * used. Only updated through io_uring_register(2).\n\t */\n\tstruct fixed_file_data\t*file_data;\n\tunsigned\t\tnr_user_files;\n\n\t/* if used, fixed mapped user buffers */\n\tunsigned\t\tnr_user_bufs;\n\tstruct io_mapped_ubuf\t*user_bufs;\n\n\tstruct user_struct\t*user;\n\n\tconst struct cred\t*creds;\n\n\tstruct completion\tref_comp;\n\tstruct completion\tsq_thread_comp;\n\n\t/* if all else fails... */\n\tstruct io_kiocb\t\t*fallback_req;\n\n#if defined(CONFIG_UNIX)\n\tstruct socket\t\t*ring_sock;\n#endif\n\n\tstruct idr\t\tio_buffer_idr;\n\n\tstruct idr\t\tpersonality_idr;\n\n\tstruct {\n\t\tunsigned\t\tcached_cq_tail;\n\t\tunsigned\t\tcq_entries;\n\t\tunsigned\t\tcq_mask;\n\t\tatomic_t\t\tcq_timeouts;\n\t\tunsigned long\t\tcq_check_overflow;\n\t\tstruct wait_queue_head\tcq_wait;\n\t\tstruct fasync_struct\t*cq_fasync;\n\t\tstruct eventfd_ctx\t*cq_ev_fd;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct {\n\t\tstruct mutex\t\turing_lock;\n\t\twait_queue_head_t\twait;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct {\n\t\tspinlock_t\t\tcompletion_lock;\n\n\t\t/*\n\t\t * ->iopoll_list is protected by the ctx->uring_lock for\n\t\t * io_uring instances that don't use IORING_SETUP_SQPOLL.\n\t\t * For SQPOLL, only the single threaded io_sq_thread() will\n\t\t * manipulate the list, hence no extra locking is needed there.\n\t\t */\n\t\tstruct list_head\tiopoll_list;\n\t\tstruct hlist_head\t*cancel_hash;\n\t\tunsigned\t\tcancel_hash_bits;\n\t\tbool\t\t\tpoll_multi_file;\n\n\t\tspinlock_t\t\tinflight_lock;\n\t\tstruct list_head\tinflight_list;\n\t} ____cacheline_aligned_in_smp;\n\n\tstruct delayed_work\t\tfile_put_work;\n\tstruct llist_head\t\tfile_put_llist;\n\n\tstruct work_struct\t\texit_work;\n\tstruct io_restriction\t\trestrictions;\n};\n\n/*\n * First field must be the file pointer in all the\n * iocb unions! See also 'struct kiocb' in <linux/fs.h>\n */\nstruct io_poll_iocb {\n\tstruct file\t\t\t*file;\n\tunion {\n\t\tstruct wait_queue_head\t*head;\n\t\tu64\t\t\taddr;\n\t};\n\t__poll_t\t\t\tevents;\n\tbool\t\t\t\tdone;\n\tbool\t\t\t\tcanceled;\n\tstruct wait_queue_entry\t\twait;\n};\n\nstruct io_close {\n\tstruct file\t\t\t*file;\n\tstruct file\t\t\t*put_file;\n\tint\t\t\t\tfd;\n};\n\nstruct io_timeout_data {\n\tstruct io_kiocb\t\t\t*req;\n\tstruct hrtimer\t\t\ttimer;\n\tstruct timespec64\t\tts;\n\tenum hrtimer_mode\t\tmode;\n};\n\nstruct io_accept {\n\tstruct file\t\t\t*file;\n\tstruct sockaddr __user\t\t*addr;\n\tint __user\t\t\t*addr_len;\n\tint\t\t\t\tflags;\n\tunsigned long\t\t\tnofile;\n};\n\nstruct io_sync {\n\tstruct file\t\t\t*file;\n\tloff_t\t\t\t\tlen;\n\tloff_t\t\t\t\toff;\n\tint\t\t\t\tflags;\n\tint\t\t\t\tmode;\n};\n\nstruct io_cancel {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\taddr;\n};\n\nstruct io_timeout {\n\tstruct file\t\t\t*file;\n\tu32\t\t\t\toff;\n\tu32\t\t\t\ttarget_seq;\n\tstruct list_head\t\tlist;\n};\n\nstruct io_timeout_rem {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\taddr;\n};\n\nstruct io_rw {\n\t/* NOTE: kiocb has the file as the first member, so don't do it here */\n\tstruct kiocb\t\t\tkiocb;\n\tu64\t\t\t\taddr;\n\tu64\t\t\t\tlen;\n};\n\nstruct io_connect {\n\tstruct file\t\t\t*file;\n\tstruct sockaddr __user\t\t*addr;\n\tint\t\t\t\taddr_len;\n};\n\nstruct io_sr_msg {\n\tstruct file\t\t\t*file;\n\tunion {\n\t\tstruct user_msghdr __user *umsg;\n\t\tvoid __user\t\t*buf;\n\t};\n\tint\t\t\t\tmsg_flags;\n\tint\t\t\t\tbgid;\n\tsize_t\t\t\t\tlen;\n\tstruct io_buffer\t\t*kbuf;\n};\n\nstruct io_open {\n\tstruct file\t\t\t*file;\n\tint\t\t\t\tdfd;\n\tstruct filename\t\t\t*filename;\n\tstruct open_how\t\t\thow;\n\tunsigned long\t\t\tnofile;\n};\n\nstruct io_files_update {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\targ;\n\tu32\t\t\t\tnr_args;\n\tu32\t\t\t\toffset;\n};\n\nstruct io_fadvise {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\toffset;\n\tu32\t\t\t\tlen;\n\tu32\t\t\t\tadvice;\n};\n\nstruct io_madvise {\n\tstruct file\t\t\t*file;\n\tu64\t\t\t\taddr;\n\tu32\t\t\t\tlen;\n\tu32\t\t\t\tadvice;\n};\n\nstruct io_epoll {\n\tstruct file\t\t\t*file;\n\tint\t\t\t\tepfd;\n\tint\t\t\t\top;\n\tint\t\t\t\tfd;\n\tstruct epoll_event\t\tevent;\n};\n\nstruct io_splice {\n\tstruct file\t\t\t*file_out;\n\tstruct file\t\t\t*file_in;\n\tloff_t\t\t\t\toff_out;\n\tloff_t\t\t\t\toff_in;\n\tu64\t\t\t\tlen;\n\tunsigned int\t\t\tflags;\n};\n\nstruct io_provide_buf {\n\tstruct file\t\t\t*file;\n\t__u64\t\t\t\taddr;\n\t__s32\t\t\t\tlen;\n\t__u32\t\t\t\tbgid;\n\t__u16\t\t\t\tnbufs;\n\t__u16\t\t\t\tbid;\n};\n\nstruct io_statx {\n\tstruct file\t\t\t*file;\n\tint\t\t\t\tdfd;\n\tunsigned int\t\t\tmask;\n\tunsigned int\t\t\tflags;\n\tconst char __user\t\t*filename;\n\tstruct statx __user\t\t*buffer;\n};\n\nstruct io_completion {\n\tstruct file\t\t\t*file;\n\tstruct list_head\t\tlist;\n\tint\t\t\t\tcflags;\n};\n\nstruct io_async_connect {\n\tstruct sockaddr_storage\t\taddress;\n};\n\nstruct io_async_msghdr {\n\tstruct iovec\t\t\tfast_iov[UIO_FASTIOV];\n\tstruct iovec\t\t\t*iov;\n\tstruct sockaddr __user\t\t*uaddr;\n\tstruct msghdr\t\t\tmsg;\n\tstruct sockaddr_storage\t\taddr;\n};\n\nstruct io_async_rw {\n\tstruct iovec\t\t\tfast_iov[UIO_FASTIOV];\n\tconst struct iovec\t\t*free_iovec;\n\tstruct iov_iter\t\t\titer;\n\tsize_t\t\t\t\tbytes_done;\n\tstruct wait_page_queue\t\twpq;\n};\n\nenum {\n\tREQ_F_FIXED_FILE_BIT\t= IOSQE_FIXED_FILE_BIT,\n\tREQ_F_IO_DRAIN_BIT\t= IOSQE_IO_DRAIN_BIT,\n\tREQ_F_LINK_BIT\t\t= IOSQE_IO_LINK_BIT,\n\tREQ_F_HARDLINK_BIT\t= IOSQE_IO_HARDLINK_BIT,\n\tREQ_F_FORCE_ASYNC_BIT\t= IOSQE_ASYNC_BIT,\n\tREQ_F_BUFFER_SELECT_BIT\t= IOSQE_BUFFER_SELECT_BIT,\n\n\tREQ_F_LINK_HEAD_BIT,\n\tREQ_F_FAIL_LINK_BIT,\n\tREQ_F_INFLIGHT_BIT,\n\tREQ_F_CUR_POS_BIT,\n\tREQ_F_NOWAIT_BIT,\n\tREQ_F_LINK_TIMEOUT_BIT,\n\tREQ_F_ISREG_BIT,\n\tREQ_F_NEED_CLEANUP_BIT,\n\tREQ_F_POLLED_BIT,\n\tREQ_F_BUFFER_SELECTED_BIT,\n\tREQ_F_NO_FILE_TABLE_BIT,\n\tREQ_F_WORK_INITIALIZED_BIT,\n\n\t/* not a real bit, just to check we're not overflowing the space */\n\t__REQ_F_LAST_BIT,\n};\n\nenum {\n\t/* ctx owns file */\n\tREQ_F_FIXED_FILE\t= BIT(REQ_F_FIXED_FILE_BIT),\n\t/* drain existing IO first */\n\tREQ_F_IO_DRAIN\t\t= BIT(REQ_F_IO_DRAIN_BIT),\n\t/* linked sqes */\n\tREQ_F_LINK\t\t= BIT(REQ_F_LINK_BIT),\n\t/* doesn't sever on completion < 0 */\n\tREQ_F_HARDLINK\t\t= BIT(REQ_F_HARDLINK_BIT),\n\t/* IOSQE_ASYNC */\n\tREQ_F_FORCE_ASYNC\t= BIT(REQ_F_FORCE_ASYNC_BIT),\n\t/* IOSQE_BUFFER_SELECT */\n\tREQ_F_BUFFER_SELECT\t= BIT(REQ_F_BUFFER_SELECT_BIT),\n\n\t/* head of a link */\n\tREQ_F_LINK_HEAD\t\t= BIT(REQ_F_LINK_HEAD_BIT),\n\t/* fail rest of links */\n\tREQ_F_FAIL_LINK\t\t= BIT(REQ_F_FAIL_LINK_BIT),\n\t/* on inflight list */\n\tREQ_F_INFLIGHT\t\t= BIT(REQ_F_INFLIGHT_BIT),\n\t/* read/write uses file position */\n\tREQ_F_CUR_POS\t\t= BIT(REQ_F_CUR_POS_BIT),\n\t/* must not punt to workers */\n\tREQ_F_NOWAIT\t\t= BIT(REQ_F_NOWAIT_BIT),\n\t/* has linked timeout */\n\tREQ_F_LINK_TIMEOUT\t= BIT(REQ_F_LINK_TIMEOUT_BIT),\n\t/* regular file */\n\tREQ_F_ISREG\t\t= BIT(REQ_F_ISREG_BIT),\n\t/* needs cleanup */\n\tREQ_F_NEED_CLEANUP\t= BIT(REQ_F_NEED_CLEANUP_BIT),\n\t/* already went through poll handler */\n\tREQ_F_POLLED\t\t= BIT(REQ_F_POLLED_BIT),\n\t/* buffer already selected */\n\tREQ_F_BUFFER_SELECTED\t= BIT(REQ_F_BUFFER_SELECTED_BIT),\n\t/* doesn't need file table for this request */\n\tREQ_F_NO_FILE_TABLE\t= BIT(REQ_F_NO_FILE_TABLE_BIT),\n\t/* io_wq_work is initialized */\n\tREQ_F_WORK_INITIALIZED\t= BIT(REQ_F_WORK_INITIALIZED_BIT),\n};\n\nstruct async_poll {\n\tstruct io_poll_iocb\tpoll;\n\tstruct io_poll_iocb\t*double_poll;\n};\n\n/*\n * NOTE! Each of the iocb union members has the file pointer\n * as the first entry in their struct definition. So you can\n * access the file pointer through any of the sub-structs,\n * or directly as just 'ki_filp' in this struct.\n */\nstruct io_kiocb {\n\tunion {\n\t\tstruct file\t\t*file;\n\t\tstruct io_rw\t\trw;\n\t\tstruct io_poll_iocb\tpoll;\n\t\tstruct io_accept\taccept;\n\t\tstruct io_sync\t\tsync;\n\t\tstruct io_cancel\tcancel;\n\t\tstruct io_timeout\ttimeout;\n\t\tstruct io_timeout_rem\ttimeout_rem;\n\t\tstruct io_connect\tconnect;\n\t\tstruct io_sr_msg\tsr_msg;\n\t\tstruct io_open\t\topen;\n\t\tstruct io_close\t\tclose;\n\t\tstruct io_files_update\tfiles_update;\n\t\tstruct io_fadvise\tfadvise;\n\t\tstruct io_madvise\tmadvise;\n\t\tstruct io_epoll\t\tepoll;\n\t\tstruct io_splice\tsplice;\n\t\tstruct io_provide_buf\tpbuf;\n\t\tstruct io_statx\t\tstatx;\n\t\t/* use only after cleaning per-op data, see io_clean_op() */\n\t\tstruct io_completion\tcompl;\n\t};\n\n\t/* opcode allocated if it needs to store data for async defer */\n\tvoid\t\t\t\t*async_data;\n\tu8\t\t\t\topcode;\n\t/* polled IO has completed */\n\tu8\t\t\t\tiopoll_completed;\n\n\tu16\t\t\t\tbuf_index;\n\tu32\t\t\t\tresult;\n\n\tstruct io_ring_ctx\t\t*ctx;\n\tunsigned int\t\t\tflags;\n\trefcount_t\t\t\trefs;\n\tstruct task_struct\t\t*task;\n\tu64\t\t\t\tuser_data;\n\n\tstruct list_head\t\tlink_list;\n\n\t/*\n\t * 1. used with ctx->iopoll_list with reads/writes\n\t * 2. to track reqs with ->files (see io_op_def::file_table)\n\t */\n\tstruct list_head\t\tinflight_entry;\n\n\tstruct percpu_ref\t\t*fixed_file_refs;\n\tstruct callback_head\t\ttask_work;\n\t/* for polled requests, i.e. IORING_OP_POLL_ADD and async armed poll */\n\tstruct hlist_node\t\thash_node;\n\tstruct async_poll\t\t*apoll;\n\tstruct io_wq_work\t\twork;\n\tstruct io_identity\t\tidentity;\n};\n\nstruct io_defer_entry {\n\tstruct list_head\tlist;\n\tstruct io_kiocb\t\t*req;\n\tu32\t\t\tseq;\n};\n\n#define IO_IOPOLL_BATCH\t\t\t8\n\nstruct io_comp_state {\n\tunsigned int\t\tnr;\n\tstruct list_head\tlist;\n\tstruct io_ring_ctx\t*ctx;\n};\n\nstruct io_submit_state {\n\tstruct blk_plug\t\tplug;\n\n\t/*\n\t * io_kiocb alloc cache\n\t */\n\tvoid\t\t\t*reqs[IO_IOPOLL_BATCH];\n\tunsigned int\t\tfree_reqs;\n\n\t/*\n\t * Batch completion logic\n\t */\n\tstruct io_comp_state\tcomp;\n\n\t/*\n\t * File reference cache\n\t */\n\tstruct file\t\t*file;\n\tunsigned int\t\tfd;\n\tunsigned int\t\thas_refs;\n\tunsigned int\t\tios_left;\n};\n\nstruct io_op_def {\n\t/* needs req->file assigned */\n\tunsigned\t\tneeds_file : 1;\n\t/* don't fail if file grab fails */\n\tunsigned\t\tneeds_file_no_error : 1;\n\t/* hash wq insertion if file is a regular file */\n\tunsigned\t\thash_reg_file : 1;\n\t/* unbound wq insertion if file is a non-regular file */\n\tunsigned\t\tunbound_nonreg_file : 1;\n\t/* opcode is not supported by this kernel */\n\tunsigned\t\tnot_supported : 1;\n\t/* set if opcode supports polled \"wait\" */\n\tunsigned\t\tpollin : 1;\n\tunsigned\t\tpollout : 1;\n\t/* op supports buffer selection */\n\tunsigned\t\tbuffer_select : 1;\n\t/* needs rlimit(RLIMIT_FSIZE) assigned */\n\tunsigned\t\tneeds_fsize : 1;\n\t/* must always have async data allocated */\n\tunsigned\t\tneeds_async_data : 1;\n\t/* size of async data needed, if any */\n\tunsigned short\t\tasync_size;\n\tunsigned\t\twork_flags;\n};\n\nstatic const struct io_op_def io_op_defs[] = {\n\t[IORING_OP_NOP] = {},\n\t[IORING_OP_READV] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.buffer_select\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_WRITEV] = {\n\t\t.needs_file\t\t= 1,\n\t\t.hash_reg_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_fsize\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_FSYNC] = {\n\t\t.needs_file\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_READ_FIXED] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_WRITE_FIXED] = {\n\t\t.needs_file\t\t= 1,\n\t\t.hash_reg_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_fsize\t\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_POLL_ADD] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t},\n\t[IORING_OP_POLL_REMOVE] = {},\n\t[IORING_OP_SYNC_FILE_RANGE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_SENDMSG] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_msghdr),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG |\n\t\t\t\t\t\tIO_WQ_WORK_FS,\n\t},\n\t[IORING_OP_RECVMSG] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.buffer_select\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_msghdr),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG |\n\t\t\t\t\t\tIO_WQ_WORK_FS,\n\t},\n\t[IORING_OP_TIMEOUT] = {\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_timeout_data),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM,\n\t},\n\t[IORING_OP_TIMEOUT_REMOVE] = {},\n\t[IORING_OP_ACCEPT] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_FILES,\n\t},\n\t[IORING_OP_ASYNC_CANCEL] = {},\n\t[IORING_OP_LINK_TIMEOUT] = {\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_timeout_data),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM,\n\t},\n\t[IORING_OP_CONNECT] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_async_data\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_connect),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM,\n\t},\n\t[IORING_OP_FALLOCATE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.needs_fsize\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_OPENAT] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_BLKCG |\n\t\t\t\t\t\tIO_WQ_WORK_FS,\n\t},\n\t[IORING_OP_CLOSE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.needs_file_no_error\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_FILES_UPDATE] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_MM,\n\t},\n\t[IORING_OP_STATX] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_MM |\n\t\t\t\t\t\tIO_WQ_WORK_FS | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_READ] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.buffer_select\t\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_WRITE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.needs_fsize\t\t= 1,\n\t\t.async_size\t\t= sizeof(struct io_async_rw),\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_FADVISE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_MADVISE] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_SEND] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollout\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_RECV] = {\n\t\t.needs_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.pollin\t\t\t= 1,\n\t\t.buffer_select\t\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_MM | IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_OPENAT2] = {\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES | IO_WQ_WORK_FS |\n\t\t\t\t\t\tIO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_EPOLL_CTL] = {\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_FILES,\n\t},\n\t[IORING_OP_SPLICE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.hash_reg_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t\t.work_flags\t\t= IO_WQ_WORK_BLKCG,\n\t},\n\t[IORING_OP_PROVIDE_BUFFERS] = {},\n\t[IORING_OP_REMOVE_BUFFERS] = {},\n\t[IORING_OP_TEE] = {\n\t\t.needs_file\t\t= 1,\n\t\t.hash_reg_file\t\t= 1,\n\t\t.unbound_nonreg_file\t= 1,\n\t},\n};\n\nenum io_mem_account {\n\tACCT_LOCKED,\n\tACCT_PINNED,\n};\n\nstatic void __io_complete_rw(struct io_kiocb *req, long res, long res2,\n\t\t\t     struct io_comp_state *cs);\nstatic void io_cqring_fill_event(struct io_kiocb *req, long res);\nstatic void io_put_req(struct io_kiocb *req);\nstatic void io_put_req_deferred(struct io_kiocb *req, int nr);\nstatic void io_double_put_req(struct io_kiocb *req);\nstatic struct io_kiocb *io_prep_linked_timeout(struct io_kiocb *req);\nstatic void __io_queue_linked_timeout(struct io_kiocb *req);\nstatic void io_queue_linked_timeout(struct io_kiocb *req);\nstatic int __io_sqe_files_update(struct io_ring_ctx *ctx,\n\t\t\t\t struct io_uring_files_update *ip,\n\t\t\t\t unsigned nr_args);\nstatic void __io_clean_op(struct io_kiocb *req);\nstatic struct file *io_file_get(struct io_submit_state *state,\n\t\t\t\tstruct io_kiocb *req, int fd, bool fixed);\nstatic void __io_queue_sqe(struct io_kiocb *req, struct io_comp_state *cs);\nstatic void io_file_put_work(struct work_struct *work);\n\nstatic ssize_t io_import_iovec(int rw, struct io_kiocb *req,\n\t\t\t       struct iovec **iovec, struct iov_iter *iter,\n\t\t\t       bool needs_lock);\nstatic int io_setup_async_rw(struct io_kiocb *req, const struct iovec *iovec,\n\t\t\t     const struct iovec *fast_iov,\n\t\t\t     struct iov_iter *iter, bool force);\n\nstatic struct kmem_cache *req_cachep;\n\nstatic const struct file_operations io_uring_fops;\n\nstruct sock *io_uring_get_socket(struct file *file)\n{\n#if defined(CONFIG_UNIX)\n\tif (file->f_op == &io_uring_fops) {\n\t\tstruct io_ring_ctx *ctx = file->private_data;\n\n\t\treturn ctx->ring_sock->sk;\n\t}\n#endif\n\treturn NULL;\n}\nEXPORT_SYMBOL(io_uring_get_socket);\n\nstatic inline void io_clean_op(struct io_kiocb *req)\n{\n\tif (req->flags & (REQ_F_NEED_CLEANUP | REQ_F_BUFFER_SELECTED |\n\t\t\t  REQ_F_INFLIGHT))\n\t\t__io_clean_op(req);\n}\n\nstatic void io_sq_thread_drop_mm(void)\n{\n\tstruct mm_struct *mm = current->mm;\n\n\tif (mm) {\n\t\tkthread_unuse_mm(mm);\n\t\tmmput(mm);\n\t}\n}\n\nstatic int __io_sq_thread_acquire_mm(struct io_ring_ctx *ctx)\n{\n\tif (!current->mm) {\n\t\tif (unlikely(!(ctx->flags & IORING_SETUP_SQPOLL) ||\n\t\t\t     !ctx->sqo_task->mm ||\n\t\t\t     !mmget_not_zero(ctx->sqo_task->mm)))\n\t\t\treturn -EFAULT;\n\t\tkthread_use_mm(ctx->sqo_task->mm);\n\t}\n\n\treturn 0;\n}\n\nstatic int io_sq_thread_acquire_mm(struct io_ring_ctx *ctx,\n\t\t\t\t   struct io_kiocb *req)\n{\n\tif (!(io_op_defs[req->opcode].work_flags & IO_WQ_WORK_MM))\n\t\treturn 0;\n\treturn __io_sq_thread_acquire_mm(ctx);\n}\n\nstatic void io_sq_thread_associate_blkcg(struct io_ring_ctx *ctx,\n\t\t\t\t\t struct cgroup_subsys_state **cur_css)\n\n{\n#ifdef CONFIG_BLK_CGROUP\n\t/* puts the old one when swapping */\n\tif (*cur_css != ctx->sqo_blkcg_css) {\n\t\tkthread_associate_blkcg(ctx->sqo_blkcg_css);\n\t\t*cur_css = ctx->sqo_blkcg_css;\n\t}\n#endif\n}\n\nstatic void io_sq_thread_unassociate_blkcg(void)\n{\n#ifdef CONFIG_BLK_CGROUP\n\tkthread_associate_blkcg(NULL);\n#endif\n}\n\nstatic inline void req_set_fail_links(struct io_kiocb *req)\n{\n\tif ((req->flags & (REQ_F_LINK | REQ_F_HARDLINK)) == REQ_F_LINK)\n\t\treq->flags |= REQ_F_FAIL_LINK;\n}\n\n/*\n * None of these are dereferenced, they are simply used to check if any of\n * them have changed. If we're under current and check they are still the\n * same, we're fine to grab references to them for actual out-of-line use.\n */\nstatic void io_init_identity(struct io_identity *id)\n{\n\tid->files = current->files;\n\tid->mm = current->mm;\n#ifdef CONFIG_BLK_CGROUP\n\trcu_read_lock();\n\tid->blkcg_css = blkcg_css();\n\trcu_read_unlock();\n#endif\n\tid->creds = current_cred();\n\tid->nsproxy = current->nsproxy;\n\tid->fs = current->fs;\n\tid->fsize = rlimit(RLIMIT_FSIZE);\n\trefcount_set(&id->count, 1);\n}\n\n/*\n * Note: must call io_req_init_async() for the first time you\n * touch any members of io_wq_work.\n */\nstatic inline void io_req_init_async(struct io_kiocb *req)\n{\n\tif (req->flags & REQ_F_WORK_INITIALIZED)\n\t\treturn;\n\n\tmemset(&req->work, 0, sizeof(req->work));\n\treq->flags |= REQ_F_WORK_INITIALIZED;\n\tio_init_identity(&req->identity);\n\treq->work.identity = &req->identity;\n}\n\nstatic inline bool io_async_submit(struct io_ring_ctx *ctx)\n{\n\treturn ctx->flags & IORING_SETUP_SQPOLL;\n}\n\nstatic void io_ring_ctx_ref_free(struct percpu_ref *ref)\n{\n\tstruct io_ring_ctx *ctx = container_of(ref, struct io_ring_ctx, refs);\n\n\tcomplete(&ctx->ref_comp);\n}\n\nstatic inline bool io_is_timeout_noseq(struct io_kiocb *req)\n{\n\treturn !req->timeout.off;\n}\n\nstatic struct io_ring_ctx *io_ring_ctx_alloc(struct io_uring_params *p)\n{\n\tstruct io_ring_ctx *ctx;\n\tint hash_bits;\n\n\tctx = kzalloc(sizeof(*ctx), GFP_KERNEL);\n\tif (!ctx)\n\t\treturn NULL;\n\n\tctx->fallback_req = kmem_cache_alloc(req_cachep, GFP_KERNEL);\n\tif (!ctx->fallback_req)\n\t\tgoto err;\n\n\t/*\n\t * Use 5 bits less than the max cq entries, that should give us around\n\t * 32 entries per hash list if totally full and uniformly spread.\n\t */\n\thash_bits = ilog2(p->cq_entries);\n\thash_bits -= 5;\n\tif (hash_bits <= 0)\n\t\thash_bits = 1;\n\tctx->cancel_hash_bits = hash_bits;\n\tctx->cancel_hash = kmalloc((1U << hash_bits) * sizeof(struct hlist_head),\n\t\t\t\t\tGFP_KERNEL);\n\tif (!ctx->cancel_hash)\n\t\tgoto err;\n\t__hash_init(ctx->cancel_hash, 1U << hash_bits);\n\n\tif (percpu_ref_init(&ctx->refs, io_ring_ctx_ref_free,\n\t\t\t    PERCPU_REF_ALLOW_REINIT, GFP_KERNEL))\n\t\tgoto err;\n\n\tctx->flags = p->flags;\n\tinit_waitqueue_head(&ctx->sqo_sq_wait);\n\tINIT_LIST_HEAD(&ctx->sqd_list);\n\tinit_waitqueue_head(&ctx->cq_wait);\n\tINIT_LIST_HEAD(&ctx->cq_overflow_list);\n\tinit_completion(&ctx->ref_comp);\n\tinit_completion(&ctx->sq_thread_comp);\n\tidr_init(&ctx->io_buffer_idr);\n\tidr_init(&ctx->personality_idr);\n\tmutex_init(&ctx->uring_lock);\n\tinit_waitqueue_head(&ctx->wait);\n\tspin_lock_init(&ctx->completion_lock);\n\tINIT_LIST_HEAD(&ctx->iopoll_list);\n\tINIT_LIST_HEAD(&ctx->defer_list);\n\tINIT_LIST_HEAD(&ctx->timeout_list);\n\tinit_waitqueue_head(&ctx->inflight_wait);\n\tspin_lock_init(&ctx->inflight_lock);\n\tINIT_LIST_HEAD(&ctx->inflight_list);\n\tINIT_DELAYED_WORK(&ctx->file_put_work, io_file_put_work);\n\tinit_llist_head(&ctx->file_put_llist);\n\treturn ctx;\nerr:\n\tif (ctx->fallback_req)\n\t\tkmem_cache_free(req_cachep, ctx->fallback_req);\n\tkfree(ctx->cancel_hash);\n\tkfree(ctx);\n\treturn NULL;\n}\n\nstatic bool req_need_defer(struct io_kiocb *req, u32 seq)\n{\n\tif (unlikely(req->flags & REQ_F_IO_DRAIN)) {\n\t\tstruct io_ring_ctx *ctx = req->ctx;\n\n\t\treturn seq != ctx->cached_cq_tail\n\t\t\t\t+ atomic_read(&ctx->cached_cq_overflow);\n\t}\n\n\treturn false;\n}\n\nstatic void __io_commit_cqring(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *rings = ctx->rings;\n\n\t/* order cqe stores with ring update */\n\tsmp_store_release(&rings->cq.tail, ctx->cached_cq_tail);\n\n\tif (wq_has_sleeper(&ctx->cq_wait)) {\n\t\twake_up_interruptible(&ctx->cq_wait);\n\t\tkill_fasync(&ctx->cq_fasync, SIGIO, POLL_IN);\n\t}\n}\n\nstatic void io_put_identity(struct io_kiocb *req)\n{\n\tif (req->work.identity == &req->identity)\n\t\treturn;\n\tif (refcount_dec_and_test(&req->work.identity->count))\n\t\tkfree(req->work.identity);\n}\n\nstatic void io_req_clean_work(struct io_kiocb *req)\n{\n\tif (!(req->flags & REQ_F_WORK_INITIALIZED))\n\t\treturn;\n\n\treq->flags &= ~REQ_F_WORK_INITIALIZED;\n\n\tif (req->work.flags & IO_WQ_WORK_MM) {\n\t\tmmdrop(req->work.identity->mm);\n\t\treq->work.flags &= ~IO_WQ_WORK_MM;\n\t}\n#ifdef CONFIG_BLK_CGROUP\n\tif (req->work.flags & IO_WQ_WORK_BLKCG) {\n\t\tcss_put(req->work.identity->blkcg_css);\n\t\treq->work.flags &= ~IO_WQ_WORK_BLKCG;\n\t}\n#endif\n\tif (req->work.flags & IO_WQ_WORK_CREDS) {\n\t\tput_cred(req->work.identity->creds);\n\t\treq->work.flags &= ~IO_WQ_WORK_CREDS;\n\t}\n\tif (req->work.flags & IO_WQ_WORK_FS) {\n\t\tstruct fs_struct *fs = req->work.identity->fs;\n\n\t\tspin_lock(&req->work.identity->fs->lock);\n\t\tif (--fs->users)\n\t\t\tfs = NULL;\n\t\tspin_unlock(&req->work.identity->fs->lock);\n\t\tif (fs)\n\t\t\tfree_fs_struct(fs);\n\t\treq->work.flags &= ~IO_WQ_WORK_FS;\n\t}\n\n\tio_put_identity(req);\n}\n\n/*\n * Create a private copy of io_identity, since some fields don't match\n * the current context.\n */\nstatic bool io_identity_cow(struct io_kiocb *req)\n{\n\tconst struct cred *creds = NULL;\n\tstruct io_identity *id;\n\n\tif (req->work.flags & IO_WQ_WORK_CREDS)\n\t\tcreds = req->work.identity->creds;\n\n\tid = kmemdup(req->work.identity, sizeof(*id), GFP_KERNEL);\n\tif (unlikely(!id)) {\n\t\treq->work.flags |= IO_WQ_WORK_CANCEL;\n\t\treturn false;\n\t}\n\n\t/*\n\t * We can safely just re-init the creds we copied  Either the field\n\t * matches the current one, or we haven't grabbed it yet. The only\n\t * exception is ->creds, through registered personalities, so handle\n\t * that one separately.\n\t */\n\tio_init_identity(id);\n\tif (creds)\n\t\treq->work.identity->creds = creds;\n\n\t/* add one for this request */\n\trefcount_inc(&id->count);\n\n\t/* drop old identity, assign new one. one ref for req, one for tctx */\n\tif (req->work.identity != &req->identity &&\n\t    refcount_sub_and_test(2, &req->work.identity->count))\n\t\tkfree(req->work.identity);\n\n\treq->work.identity = id;\n\treturn true;\n}\n\nstatic bool io_grab_identity(struct io_kiocb *req)\n{\n\tconst struct io_op_def *def = &io_op_defs[req->opcode];\n\tstruct io_identity *id = &req->identity;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (def->needs_fsize && id->fsize != rlimit(RLIMIT_FSIZE))\n\t\treturn false;\n\n\tif (!(req->work.flags & IO_WQ_WORK_FILES) &&\n\t    (def->work_flags & IO_WQ_WORK_FILES) &&\n\t    !(req->flags & REQ_F_NO_FILE_TABLE)) {\n\t\tif (id->files != current->files ||\n\t\t    id->nsproxy != current->nsproxy)\n\t\t\treturn false;\n\t\tatomic_inc(&id->files->count);\n\t\tget_nsproxy(id->nsproxy);\n\t\treq->flags |= REQ_F_INFLIGHT;\n\n\t\tspin_lock_irq(&ctx->inflight_lock);\n\t\tlist_add(&req->inflight_entry, &ctx->inflight_list);\n\t\tspin_unlock_irq(&ctx->inflight_lock);\n\t\treq->work.flags |= IO_WQ_WORK_FILES;\n\t}\n#ifdef CONFIG_BLK_CGROUP\n\tif (!(req->work.flags & IO_WQ_WORK_BLKCG) &&\n\t    (def->work_flags & IO_WQ_WORK_BLKCG)) {\n\t\trcu_read_lock();\n\t\tif (id->blkcg_css != blkcg_css()) {\n\t\t\trcu_read_unlock();\n\t\t\treturn false;\n\t\t}\n\t\t/*\n\t\t * This should be rare, either the cgroup is dying or the task\n\t\t * is moving cgroups. Just punt to root for the handful of ios.\n\t\t */\n\t\tif (css_tryget_online(id->blkcg_css))\n\t\t\treq->work.flags |= IO_WQ_WORK_BLKCG;\n\t\trcu_read_unlock();\n\t}\n#endif\n\tif (!(req->work.flags & IO_WQ_WORK_CREDS)) {\n\t\tif (id->creds != current_cred())\n\t\t\treturn false;\n\t\tget_cred(id->creds);\n\t\treq->work.flags |= IO_WQ_WORK_CREDS;\n\t}\n\tif (!(req->work.flags & IO_WQ_WORK_FS) &&\n\t    (def->work_flags & IO_WQ_WORK_FS)) {\n\t\tif (current->fs != id->fs)\n\t\t\treturn false;\n\t\tspin_lock(&id->fs->lock);\n\t\tif (!id->fs->in_exec) {\n\t\t\tid->fs->users++;\n\t\t\treq->work.flags |= IO_WQ_WORK_FS;\n\t\t} else {\n\t\t\treq->work.flags |= IO_WQ_WORK_CANCEL;\n\t\t}\n\t\tspin_unlock(&current->fs->lock);\n\t}\n\n\treturn true;\n}\n\nstatic void io_prep_async_work(struct io_kiocb *req)\n{\n\tconst struct io_op_def *def = &io_op_defs[req->opcode];\n\tstruct io_identity *id = &req->identity;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tio_req_init_async(req);\n\n\tif (req->flags & REQ_F_ISREG) {\n\t\tif (def->hash_reg_file || (ctx->flags & IORING_SETUP_IOPOLL))\n\t\t\tio_wq_hash_work(&req->work, file_inode(req->file));\n\t} else {\n\t\tif (def->unbound_nonreg_file)\n\t\t\treq->work.flags |= IO_WQ_WORK_UNBOUND;\n\t}\n\n\t/* ->mm can never change on us */\n\tif (!(req->work.flags & IO_WQ_WORK_MM) &&\n\t    (def->work_flags & IO_WQ_WORK_MM)) {\n\t\tmmgrab(id->mm);\n\t\treq->work.flags |= IO_WQ_WORK_MM;\n\t}\n\n\t/* if we fail grabbing identity, we must COW, regrab, and retry */\n\tif (io_grab_identity(req))\n\t\treturn;\n\n\tif (!io_identity_cow(req))\n\t\treturn;\n\n\t/* can't fail at this point */\n\tif (!io_grab_identity(req))\n\t\tWARN_ON(1);\n}\n\nstatic void io_prep_async_link(struct io_kiocb *req)\n{\n\tstruct io_kiocb *cur;\n\n\tio_prep_async_work(req);\n\tif (req->flags & REQ_F_LINK_HEAD)\n\t\tlist_for_each_entry(cur, &req->link_list, link_list)\n\t\t\tio_prep_async_work(cur);\n}\n\nstatic struct io_kiocb *__io_queue_async_work(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_kiocb *link = io_prep_linked_timeout(req);\n\n\ttrace_io_uring_queue_async_work(ctx, io_wq_is_hashed(&req->work), req,\n\t\t\t\t\t&req->work, req->flags);\n\tio_wq_enqueue(ctx->io_wq, &req->work);\n\treturn link;\n}\n\nstatic void io_queue_async_work(struct io_kiocb *req)\n{\n\tstruct io_kiocb *link;\n\n\t/* init ->work of the whole link before punting */\n\tio_prep_async_link(req);\n\tlink = __io_queue_async_work(req);\n\n\tif (link)\n\t\tio_queue_linked_timeout(link);\n}\n\nstatic void io_kill_timeout(struct io_kiocb *req)\n{\n\tstruct io_timeout_data *io = req->async_data;\n\tint ret;\n\n\tret = hrtimer_try_to_cancel(&io->timer);\n\tif (ret != -1) {\n\t\tatomic_set(&req->ctx->cq_timeouts,\n\t\t\tatomic_read(&req->ctx->cq_timeouts) + 1);\n\t\tlist_del_init(&req->timeout.list);\n\t\tio_cqring_fill_event(req, 0);\n\t\tio_put_req_deferred(req, 1);\n\t}\n}\n\nstatic bool io_task_match(struct io_kiocb *req, struct task_struct *tsk)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!tsk || req->task == tsk)\n\t\treturn true;\n\tif (ctx->flags & IORING_SETUP_SQPOLL) {\n\t\tif (ctx->sq_data && req->task == ctx->sq_data->thread)\n\t\t\treturn true;\n\t}\n\treturn false;\n}\n\n/*\n * Returns true if we found and killed one or more timeouts\n */\nstatic bool io_kill_timeouts(struct io_ring_ctx *ctx, struct task_struct *tsk)\n{\n\tstruct io_kiocb *req, *tmp;\n\tint canceled = 0;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tlist_for_each_entry_safe(req, tmp, &ctx->timeout_list, timeout.list) {\n\t\tif (io_task_match(req, tsk)) {\n\t\t\tio_kill_timeout(req);\n\t\t\tcanceled++;\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn canceled != 0;\n}\n\nstatic void __io_queue_deferred(struct io_ring_ctx *ctx)\n{\n\tdo {\n\t\tstruct io_defer_entry *de = list_first_entry(&ctx->defer_list,\n\t\t\t\t\t\tstruct io_defer_entry, list);\n\t\tstruct io_kiocb *link;\n\n\t\tif (req_need_defer(de->req, de->seq))\n\t\t\tbreak;\n\t\tlist_del_init(&de->list);\n\t\t/* punt-init is done before queueing for defer */\n\t\tlink = __io_queue_async_work(de->req);\n\t\tif (link) {\n\t\t\t__io_queue_linked_timeout(link);\n\t\t\t/* drop submission reference */\n\t\t\tio_put_req_deferred(link, 1);\n\t\t}\n\t\tkfree(de);\n\t} while (!list_empty(&ctx->defer_list));\n}\n\nstatic void io_flush_timeouts(struct io_ring_ctx *ctx)\n{\n\twhile (!list_empty(&ctx->timeout_list)) {\n\t\tstruct io_kiocb *req = list_first_entry(&ctx->timeout_list,\n\t\t\t\t\t\tstruct io_kiocb, timeout.list);\n\n\t\tif (io_is_timeout_noseq(req))\n\t\t\tbreak;\n\t\tif (req->timeout.target_seq != ctx->cached_cq_tail\n\t\t\t\t\t- atomic_read(&ctx->cq_timeouts))\n\t\t\tbreak;\n\n\t\tlist_del_init(&req->timeout.list);\n\t\tio_kill_timeout(req);\n\t}\n}\n\nstatic void io_commit_cqring(struct io_ring_ctx *ctx)\n{\n\tio_flush_timeouts(ctx);\n\t__io_commit_cqring(ctx);\n\n\tif (unlikely(!list_empty(&ctx->defer_list)))\n\t\t__io_queue_deferred(ctx);\n}\n\nstatic inline bool io_sqring_full(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *r = ctx->rings;\n\n\treturn READ_ONCE(r->sq.tail) - ctx->cached_sq_head == r->sq_ring_entries;\n}\n\nstatic struct io_uring_cqe *io_get_cqring(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *rings = ctx->rings;\n\tunsigned tail;\n\n\ttail = ctx->cached_cq_tail;\n\t/*\n\t * writes to the cq entry need to come after reading head; the\n\t * control dependency is enough as we're using WRITE_ONCE to\n\t * fill the cq entry\n\t */\n\tif (tail - READ_ONCE(rings->cq.head) == rings->cq_ring_entries)\n\t\treturn NULL;\n\n\tctx->cached_cq_tail++;\n\treturn &rings->cqes[tail & ctx->cq_mask];\n}\n\nstatic inline bool io_should_trigger_evfd(struct io_ring_ctx *ctx)\n{\n\tif (!ctx->cq_ev_fd)\n\t\treturn false;\n\tif (READ_ONCE(ctx->rings->cq_flags) & IORING_CQ_EVENTFD_DISABLED)\n\t\treturn false;\n\tif (!ctx->eventfd_async)\n\t\treturn true;\n\treturn io_wq_current_is_worker();\n}\n\nstatic void io_cqring_ev_posted(struct io_ring_ctx *ctx)\n{\n\tif (waitqueue_active(&ctx->wait))\n\t\twake_up(&ctx->wait);\n\tif (ctx->sq_data && waitqueue_active(&ctx->sq_data->wait))\n\t\twake_up(&ctx->sq_data->wait);\n\tif (io_should_trigger_evfd(ctx))\n\t\teventfd_signal(ctx->cq_ev_fd, 1);\n}\n\nstatic void io_cqring_mark_overflow(struct io_ring_ctx *ctx)\n{\n\tif (list_empty(&ctx->cq_overflow_list)) {\n\t\tclear_bit(0, &ctx->sq_check_overflow);\n\t\tclear_bit(0, &ctx->cq_check_overflow);\n\t\tctx->rings->sq_flags &= ~IORING_SQ_CQ_OVERFLOW;\n\t}\n}\n\nstatic inline bool io_match_files(struct io_kiocb *req,\n\t\t\t\t       struct files_struct *files)\n{\n\tif (!files)\n\t\treturn true;\n\tif ((req->flags & REQ_F_WORK_INITIALIZED) &&\n\t    (req->work.flags & IO_WQ_WORK_FILES))\n\t\treturn req->work.identity->files == files;\n\treturn false;\n}\n\n/* Returns true if there are no backlogged entries after the flush */\nstatic bool io_cqring_overflow_flush(struct io_ring_ctx *ctx, bool force,\n\t\t\t\t     struct task_struct *tsk,\n\t\t\t\t     struct files_struct *files)\n{\n\tstruct io_rings *rings = ctx->rings;\n\tstruct io_kiocb *req, *tmp;\n\tstruct io_uring_cqe *cqe;\n\tunsigned long flags;\n\tLIST_HEAD(list);\n\n\tif (!force) {\n\t\tif (list_empty_careful(&ctx->cq_overflow_list))\n\t\t\treturn true;\n\t\tif ((ctx->cached_cq_tail - READ_ONCE(rings->cq.head) ==\n\t\t    rings->cq_ring_entries))\n\t\t\treturn false;\n\t}\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\n\t/* if force is set, the ring is going away. always drop after that */\n\tif (force)\n\t\tctx->cq_overflow_flushed = 1;\n\n\tcqe = NULL;\n\tlist_for_each_entry_safe(req, tmp, &ctx->cq_overflow_list, compl.list) {\n\t\tif (tsk && req->task != tsk)\n\t\t\tcontinue;\n\t\tif (!io_match_files(req, files))\n\t\t\tcontinue;\n\n\t\tcqe = io_get_cqring(ctx);\n\t\tif (!cqe && !force)\n\t\t\tbreak;\n\n\t\tlist_move(&req->compl.list, &list);\n\t\tif (cqe) {\n\t\t\tWRITE_ONCE(cqe->user_data, req->user_data);\n\t\t\tWRITE_ONCE(cqe->res, req->result);\n\t\t\tWRITE_ONCE(cqe->flags, req->compl.cflags);\n\t\t} else {\n\t\t\tWRITE_ONCE(ctx->rings->cq_overflow,\n\t\t\t\tatomic_inc_return(&ctx->cached_cq_overflow));\n\t\t}\n\t}\n\n\tio_commit_cqring(ctx);\n\tio_cqring_mark_overflow(ctx);\n\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\tio_cqring_ev_posted(ctx);\n\n\twhile (!list_empty(&list)) {\n\t\treq = list_first_entry(&list, struct io_kiocb, compl.list);\n\t\tlist_del(&req->compl.list);\n\t\tio_put_req(req);\n\t}\n\n\treturn cqe != NULL;\n}\n\nstatic void __io_cqring_fill_event(struct io_kiocb *req, long res, long cflags)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_uring_cqe *cqe;\n\n\ttrace_io_uring_complete(ctx, req->user_data, res);\n\n\t/*\n\t * If we can't get a cq entry, userspace overflowed the\n\t * submission (by quite a lot). Increment the overflow count in\n\t * the ring.\n\t */\n\tcqe = io_get_cqring(ctx);\n\tif (likely(cqe)) {\n\t\tWRITE_ONCE(cqe->user_data, req->user_data);\n\t\tWRITE_ONCE(cqe->res, res);\n\t\tWRITE_ONCE(cqe->flags, cflags);\n\t} else if (ctx->cq_overflow_flushed || req->task->io_uring->in_idle) {\n\t\t/*\n\t\t * If we're in ring overflow flush mode, or in task cancel mode,\n\t\t * then we cannot store the request for later flushing, we need\n\t\t * to drop it on the floor.\n\t\t */\n\t\tWRITE_ONCE(ctx->rings->cq_overflow,\n\t\t\t\tatomic_inc_return(&ctx->cached_cq_overflow));\n\t} else {\n\t\tif (list_empty(&ctx->cq_overflow_list)) {\n\t\t\tset_bit(0, &ctx->sq_check_overflow);\n\t\t\tset_bit(0, &ctx->cq_check_overflow);\n\t\t\tctx->rings->sq_flags |= IORING_SQ_CQ_OVERFLOW;\n\t\t}\n\t\tio_clean_op(req);\n\t\treq->result = res;\n\t\treq->compl.cflags = cflags;\n\t\trefcount_inc(&req->refs);\n\t\tlist_add_tail(&req->compl.list, &ctx->cq_overflow_list);\n\t}\n}\n\nstatic void io_cqring_fill_event(struct io_kiocb *req, long res)\n{\n\t__io_cqring_fill_event(req, res, 0);\n}\n\nstatic void io_cqring_add_event(struct io_kiocb *req, long res, long cflags)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\t__io_cqring_fill_event(req, res, cflags);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tio_cqring_ev_posted(ctx);\n}\n\nstatic void io_submit_flush_completions(struct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = cs->ctx;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\twhile (!list_empty(&cs->list)) {\n\t\tstruct io_kiocb *req;\n\n\t\treq = list_first_entry(&cs->list, struct io_kiocb, compl.list);\n\t\tlist_del(&req->compl.list);\n\t\t__io_cqring_fill_event(req, req->result, req->compl.cflags);\n\n\t\t/*\n\t\t * io_free_req() doesn't care about completion_lock unless one\n\t\t * of these flags is set. REQ_F_WORK_INITIALIZED is in the list\n\t\t * because of a potential deadlock with req->work.fs->lock\n\t\t */\n\t\tif (req->flags & (REQ_F_FAIL_LINK|REQ_F_LINK_TIMEOUT\n\t\t\t\t |REQ_F_WORK_INITIALIZED)) {\n\t\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\t\tio_put_req(req);\n\t\t\tspin_lock_irq(&ctx->completion_lock);\n\t\t} else {\n\t\t\tio_put_req(req);\n\t\t}\n\t}\n\tio_commit_cqring(ctx);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tio_cqring_ev_posted(ctx);\n\tcs->nr = 0;\n}\n\nstatic void __io_req_complete(struct io_kiocb *req, long res, unsigned cflags,\n\t\t\t      struct io_comp_state *cs)\n{\n\tif (!cs) {\n\t\tio_cqring_add_event(req, res, cflags);\n\t\tio_put_req(req);\n\t} else {\n\t\tio_clean_op(req);\n\t\treq->result = res;\n\t\treq->compl.cflags = cflags;\n\t\tlist_add_tail(&req->compl.list, &cs->list);\n\t\tif (++cs->nr >= 32)\n\t\t\tio_submit_flush_completions(cs);\n\t}\n}\n\nstatic void io_req_complete(struct io_kiocb *req, long res)\n{\n\t__io_req_complete(req, res, 0, NULL);\n}\n\nstatic inline bool io_is_fallback_req(struct io_kiocb *req)\n{\n\treturn req == (struct io_kiocb *)\n\t\t\t((unsigned long) req->ctx->fallback_req & ~1UL);\n}\n\nstatic struct io_kiocb *io_get_fallback_req(struct io_ring_ctx *ctx)\n{\n\tstruct io_kiocb *req;\n\n\treq = ctx->fallback_req;\n\tif (!test_and_set_bit_lock(0, (unsigned long *) &ctx->fallback_req))\n\t\treturn req;\n\n\treturn NULL;\n}\n\nstatic struct io_kiocb *io_alloc_req(struct io_ring_ctx *ctx,\n\t\t\t\t     struct io_submit_state *state)\n{\n\tif (!state->free_reqs) {\n\t\tgfp_t gfp = GFP_KERNEL | __GFP_NOWARN;\n\t\tsize_t sz;\n\t\tint ret;\n\n\t\tsz = min_t(size_t, state->ios_left, ARRAY_SIZE(state->reqs));\n\t\tret = kmem_cache_alloc_bulk(req_cachep, gfp, sz, state->reqs);\n\n\t\t/*\n\t\t * Bulk alloc is all-or-nothing. If we fail to get a batch,\n\t\t * retry single alloc to be on the safe side.\n\t\t */\n\t\tif (unlikely(ret <= 0)) {\n\t\t\tstate->reqs[0] = kmem_cache_alloc(req_cachep, gfp);\n\t\t\tif (!state->reqs[0])\n\t\t\t\tgoto fallback;\n\t\t\tret = 1;\n\t\t}\n\t\tstate->free_reqs = ret;\n\t}\n\n\tstate->free_reqs--;\n\treturn state->reqs[state->free_reqs];\nfallback:\n\treturn io_get_fallback_req(ctx);\n}\n\nstatic inline void io_put_file(struct io_kiocb *req, struct file *file,\n\t\t\t  bool fixed)\n{\n\tif (fixed)\n\t\tpercpu_ref_put(req->fixed_file_refs);\n\telse\n\t\tfput(file);\n}\n\nstatic void io_dismantle_req(struct io_kiocb *req)\n{\n\tio_clean_op(req);\n\n\tif (req->async_data)\n\t\tkfree(req->async_data);\n\tif (req->file)\n\t\tio_put_file(req, req->file, (req->flags & REQ_F_FIXED_FILE));\n\n\tio_req_clean_work(req);\n}\n\nstatic void __io_free_req(struct io_kiocb *req)\n{\n\tstruct io_uring_task *tctx = req->task->io_uring;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tio_dismantle_req(req);\n\n\tatomic_long_inc(&tctx->req_complete);\n\tif (tctx->in_idle)\n\t\twake_up(&tctx->wait);\n\tput_task_struct(req->task);\n\n\tif (likely(!io_is_fallback_req(req)))\n\t\tkmem_cache_free(req_cachep, req);\n\telse\n\t\tclear_bit_unlock(0, (unsigned long *) &ctx->fallback_req);\n\tpercpu_ref_put(&ctx->refs);\n}\n\nstatic bool io_link_cancel_timeout(struct io_kiocb *req)\n{\n\tstruct io_timeout_data *io = req->async_data;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret;\n\n\tret = hrtimer_try_to_cancel(&io->timer);\n\tif (ret != -1) {\n\t\tio_cqring_fill_event(req, -ECANCELED);\n\t\tio_commit_cqring(ctx);\n\t\treq->flags &= ~REQ_F_LINK_HEAD;\n\t\tio_put_req_deferred(req, 1);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nstatic bool __io_kill_linked_timeout(struct io_kiocb *req)\n{\n\tstruct io_kiocb *link;\n\tbool wake_ev;\n\n\tif (list_empty(&req->link_list))\n\t\treturn false;\n\tlink = list_first_entry(&req->link_list, struct io_kiocb, link_list);\n\tif (link->opcode != IORING_OP_LINK_TIMEOUT)\n\t\treturn false;\n\n\tlist_del_init(&link->link_list);\n\twake_ev = io_link_cancel_timeout(link);\n\treq->flags &= ~REQ_F_LINK_TIMEOUT;\n\treturn wake_ev;\n}\n\nstatic void io_kill_linked_timeout(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\tbool wake_ev;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\twake_ev = __io_kill_linked_timeout(req);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tif (wake_ev)\n\t\tio_cqring_ev_posted(ctx);\n}\n\nstatic struct io_kiocb *io_req_link_next(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt;\n\n\t/*\n\t * The list should never be empty when we are called here. But could\n\t * potentially happen if the chain is messed up, check to be on the\n\t * safe side.\n\t */\n\tif (unlikely(list_empty(&req->link_list)))\n\t\treturn NULL;\n\n\tnxt = list_first_entry(&req->link_list, struct io_kiocb, link_list);\n\tlist_del_init(&req->link_list);\n\tif (!list_empty(&nxt->link_list))\n\t\tnxt->flags |= REQ_F_LINK_HEAD;\n\treturn nxt;\n}\n\n/*\n * Called if REQ_F_LINK_HEAD is set, and we fail the head request\n */\nstatic void __io_fail_links(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\twhile (!list_empty(&req->link_list)) {\n\t\tstruct io_kiocb *link = list_first_entry(&req->link_list,\n\t\t\t\t\t\tstruct io_kiocb, link_list);\n\n\t\tlist_del_init(&link->link_list);\n\t\ttrace_io_uring_fail_link(req, link);\n\n\t\tio_cqring_fill_event(link, -ECANCELED);\n\n\t\t/*\n\t\t * It's ok to free under spinlock as they're not linked anymore,\n\t\t * but avoid REQ_F_WORK_INITIALIZED because it may deadlock on\n\t\t * work.fs->lock.\n\t\t */\n\t\tif (link->flags & REQ_F_WORK_INITIALIZED)\n\t\t\tio_put_req_deferred(link, 2);\n\t\telse\n\t\t\tio_double_put_req(link);\n\t}\n\n\tio_commit_cqring(ctx);\n}\n\nstatic void io_fail_links(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\t__io_fail_links(req);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tio_cqring_ev_posted(ctx);\n}\n\nstatic struct io_kiocb *__io_req_find_next(struct io_kiocb *req)\n{\n\treq->flags &= ~REQ_F_LINK_HEAD;\n\tif (req->flags & REQ_F_LINK_TIMEOUT)\n\t\tio_kill_linked_timeout(req);\n\n\t/*\n\t * If LINK is set, we have dependent requests in this chain. If we\n\t * didn't fail this request, queue the first one up, moving any other\n\t * dependencies to the next request. In case of failure, fail the rest\n\t * of the chain.\n\t */\n\tif (likely(!(req->flags & REQ_F_FAIL_LINK)))\n\t\treturn io_req_link_next(req);\n\tio_fail_links(req);\n\treturn NULL;\n}\n\nstatic struct io_kiocb *io_req_find_next(struct io_kiocb *req)\n{\n\tif (likely(!(req->flags & REQ_F_LINK_HEAD)))\n\t\treturn NULL;\n\treturn __io_req_find_next(req);\n}\n\nstatic int io_req_task_work_add(struct io_kiocb *req, bool twa_signal_ok)\n{\n\tstruct task_struct *tsk = req->task;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret, notify;\n\n\tif (tsk->flags & PF_EXITING)\n\t\treturn -ESRCH;\n\n\t/*\n\t * SQPOLL kernel thread doesn't need notification, just a wakeup. For\n\t * all other cases, use TWA_SIGNAL unconditionally to ensure we're\n\t * processing task_work. There's no reliable way to tell if TWA_RESUME\n\t * will do the job.\n\t */\n\tnotify = 0;\n\tif (!(ctx->flags & IORING_SETUP_SQPOLL) && twa_signal_ok)\n\t\tnotify = TWA_SIGNAL;\n\n\tret = task_work_add(tsk, &req->task_work, notify);\n\tif (!ret)\n\t\twake_up_process(tsk);\n\n\treturn ret;\n}\n\nstatic void __io_req_task_cancel(struct io_kiocb *req, int error)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tio_cqring_fill_event(req, error);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tio_cqring_ev_posted(ctx);\n\treq_set_fail_links(req);\n\tio_double_put_req(req);\n}\n\nstatic void io_req_task_cancel(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\t__io_req_task_cancel(req, -ECANCELED);\n\tpercpu_ref_put(&ctx->refs);\n}\n\nstatic void __io_req_task_submit(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!__io_sq_thread_acquire_mm(ctx)) {\n\t\tmutex_lock(&ctx->uring_lock);\n\t\t__io_queue_sqe(req, NULL);\n\t\tmutex_unlock(&ctx->uring_lock);\n\t} else {\n\t\t__io_req_task_cancel(req, -EFAULT);\n\t}\n}\n\nstatic void io_req_task_submit(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\t__io_req_task_submit(req);\n\tpercpu_ref_put(&ctx->refs);\n}\n\nstatic void io_req_task_queue(struct io_kiocb *req)\n{\n\tint ret;\n\n\tinit_task_work(&req->task_work, io_req_task_submit);\n\tpercpu_ref_get(&req->ctx->refs);\n\n\tret = io_req_task_work_add(req, true);\n\tif (unlikely(ret)) {\n\t\tstruct task_struct *tsk;\n\n\t\tinit_task_work(&req->task_work, io_req_task_cancel);\n\t\ttsk = io_wq_get_task(req->ctx->io_wq);\n\t\ttask_work_add(tsk, &req->task_work, 0);\n\t\twake_up_process(tsk);\n\t}\n}\n\nstatic void io_queue_next(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt = io_req_find_next(req);\n\n\tif (nxt)\n\t\tio_req_task_queue(nxt);\n}\n\nstatic void io_free_req(struct io_kiocb *req)\n{\n\tio_queue_next(req);\n\t__io_free_req(req);\n}\n\nstruct req_batch {\n\tvoid *reqs[IO_IOPOLL_BATCH];\n\tint to_free;\n\n\tstruct task_struct\t*task;\n\tint\t\t\ttask_refs;\n};\n\nstatic inline void io_init_req_batch(struct req_batch *rb)\n{\n\trb->to_free = 0;\n\trb->task_refs = 0;\n\trb->task = NULL;\n}\n\nstatic void __io_req_free_batch_flush(struct io_ring_ctx *ctx,\n\t\t\t\t      struct req_batch *rb)\n{\n\tkmem_cache_free_bulk(req_cachep, rb->to_free, rb->reqs);\n\tpercpu_ref_put_many(&ctx->refs, rb->to_free);\n\trb->to_free = 0;\n}\n\nstatic void io_req_free_batch_finish(struct io_ring_ctx *ctx,\n\t\t\t\t     struct req_batch *rb)\n{\n\tif (rb->to_free)\n\t\t__io_req_free_batch_flush(ctx, rb);\n\tif (rb->task) {\n\t\tatomic_long_add(rb->task_refs, &rb->task->io_uring->req_complete);\n\t\tput_task_struct_many(rb->task, rb->task_refs);\n\t\trb->task = NULL;\n\t}\n}\n\nstatic void io_req_free_batch(struct req_batch *rb, struct io_kiocb *req)\n{\n\tif (unlikely(io_is_fallback_req(req))) {\n\t\tio_free_req(req);\n\t\treturn;\n\t}\n\tif (req->flags & REQ_F_LINK_HEAD)\n\t\tio_queue_next(req);\n\n\tif (req->task != rb->task) {\n\t\tif (rb->task) {\n\t\t\tatomic_long_add(rb->task_refs, &rb->task->io_uring->req_complete);\n\t\t\tput_task_struct_many(rb->task, rb->task_refs);\n\t\t}\n\t\trb->task = req->task;\n\t\trb->task_refs = 0;\n\t}\n\trb->task_refs++;\n\n\tio_dismantle_req(req);\n\trb->reqs[rb->to_free++] = req;\n\tif (unlikely(rb->to_free == ARRAY_SIZE(rb->reqs)))\n\t\t__io_req_free_batch_flush(req->ctx, rb);\n}\n\n/*\n * Drop reference to request, return next in chain (if there is one) if this\n * was the last reference to this request.\n */\nstatic struct io_kiocb *io_put_req_find_next(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt = NULL;\n\n\tif (refcount_dec_and_test(&req->refs)) {\n\t\tnxt = io_req_find_next(req);\n\t\t__io_free_req(req);\n\t}\n\treturn nxt;\n}\n\nstatic void io_put_req(struct io_kiocb *req)\n{\n\tif (refcount_dec_and_test(&req->refs))\n\t\tio_free_req(req);\n}\n\nstatic void io_put_req_deferred_cb(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\n\tio_free_req(req);\n}\n\nstatic void io_free_req_deferred(struct io_kiocb *req)\n{\n\tint ret;\n\n\tinit_task_work(&req->task_work, io_put_req_deferred_cb);\n\tret = io_req_task_work_add(req, true);\n\tif (unlikely(ret)) {\n\t\tstruct task_struct *tsk;\n\n\t\ttsk = io_wq_get_task(req->ctx->io_wq);\n\t\ttask_work_add(tsk, &req->task_work, 0);\n\t\twake_up_process(tsk);\n\t}\n}\n\nstatic inline void io_put_req_deferred(struct io_kiocb *req, int refs)\n{\n\tif (refcount_sub_and_test(refs, &req->refs))\n\t\tio_free_req_deferred(req);\n}\n\nstatic struct io_wq_work *io_steal_work(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt;\n\n\t/*\n\t * A ref is owned by io-wq in which context we're. So, if that's the\n\t * last one, it's safe to steal next work. False negatives are Ok,\n\t * it just will be re-punted async in io_put_work()\n\t */\n\tif (refcount_read(&req->refs) != 1)\n\t\treturn NULL;\n\n\tnxt = io_req_find_next(req);\n\treturn nxt ? &nxt->work : NULL;\n}\n\nstatic void io_double_put_req(struct io_kiocb *req)\n{\n\t/* drop both submit and complete references */\n\tif (refcount_sub_and_test(2, &req->refs))\n\t\tio_free_req(req);\n}\n\nstatic unsigned io_cqring_events(struct io_ring_ctx *ctx, bool noflush)\n{\n\tstruct io_rings *rings = ctx->rings;\n\n\tif (test_bit(0, &ctx->cq_check_overflow)) {\n\t\t/*\n\t\t * noflush == true is from the waitqueue handler, just ensure\n\t\t * we wake up the task, and the next invocation will flush the\n\t\t * entries. We cannot safely to it from here.\n\t\t */\n\t\tif (noflush && !list_empty(&ctx->cq_overflow_list))\n\t\t\treturn -1U;\n\n\t\tio_cqring_overflow_flush(ctx, false, NULL, NULL);\n\t}\n\n\t/* See comment at the top of this file */\n\tsmp_rmb();\n\treturn ctx->cached_cq_tail - READ_ONCE(rings->cq.head);\n}\n\nstatic inline unsigned int io_sqring_entries(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *rings = ctx->rings;\n\n\t/* make sure SQ entry isn't read before tail */\n\treturn smp_load_acquire(&rings->sq.tail) - ctx->cached_sq_head;\n}\n\nstatic unsigned int io_put_kbuf(struct io_kiocb *req, struct io_buffer *kbuf)\n{\n\tunsigned int cflags;\n\n\tcflags = kbuf->bid << IORING_CQE_BUFFER_SHIFT;\n\tcflags |= IORING_CQE_F_BUFFER;\n\treq->flags &= ~REQ_F_BUFFER_SELECTED;\n\tkfree(kbuf);\n\treturn cflags;\n}\n\nstatic inline unsigned int io_put_rw_kbuf(struct io_kiocb *req)\n{\n\tstruct io_buffer *kbuf;\n\n\tkbuf = (struct io_buffer *) (unsigned long) req->rw.addr;\n\treturn io_put_kbuf(req, kbuf);\n}\n\nstatic inline bool io_run_task_work(void)\n{\n\t/*\n\t * Not safe to run on exiting task, and the task_work handling will\n\t * not add work to such a task.\n\t */\n\tif (unlikely(current->flags & PF_EXITING))\n\t\treturn false;\n\tif (current->task_works) {\n\t\t__set_current_state(TASK_RUNNING);\n\t\ttask_work_run();\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nstatic void io_iopoll_queue(struct list_head *again)\n{\n\tstruct io_kiocb *req;\n\n\tdo {\n\t\treq = list_first_entry(again, struct io_kiocb, inflight_entry);\n\t\tlist_del(&req->inflight_entry);\n\t\t__io_complete_rw(req, -EAGAIN, 0, NULL);\n\t} while (!list_empty(again));\n}\n\n/*\n * Find and free completed poll iocbs\n */\nstatic void io_iopoll_complete(struct io_ring_ctx *ctx, unsigned int *nr_events,\n\t\t\t       struct list_head *done)\n{\n\tstruct req_batch rb;\n\tstruct io_kiocb *req;\n\tLIST_HEAD(again);\n\n\t/* order with ->result store in io_complete_rw_iopoll() */\n\tsmp_rmb();\n\n\tio_init_req_batch(&rb);\n\twhile (!list_empty(done)) {\n\t\tint cflags = 0;\n\n\t\treq = list_first_entry(done, struct io_kiocb, inflight_entry);\n\t\tif (READ_ONCE(req->result) == -EAGAIN) {\n\t\t\treq->result = 0;\n\t\t\treq->iopoll_completed = 0;\n\t\t\tlist_move_tail(&req->inflight_entry, &again);\n\t\t\tcontinue;\n\t\t}\n\t\tlist_del(&req->inflight_entry);\n\n\t\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\t\tcflags = io_put_rw_kbuf(req);\n\n\t\t__io_cqring_fill_event(req, req->result, cflags);\n\t\t(*nr_events)++;\n\n\t\tif (refcount_dec_and_test(&req->refs))\n\t\t\tio_req_free_batch(&rb, req);\n\t}\n\n\tio_commit_cqring(ctx);\n\tif (ctx->flags & IORING_SETUP_SQPOLL)\n\t\tio_cqring_ev_posted(ctx);\n\tio_req_free_batch_finish(ctx, &rb);\n\n\tif (!list_empty(&again))\n\t\tio_iopoll_queue(&again);\n}\n\nstatic int io_do_iopoll(struct io_ring_ctx *ctx, unsigned int *nr_events,\n\t\t\tlong min)\n{\n\tstruct io_kiocb *req, *tmp;\n\tLIST_HEAD(done);\n\tbool spin;\n\tint ret;\n\n\t/*\n\t * Only spin for completions if we don't have multiple devices hanging\n\t * off our complete list, and we're under the requested amount.\n\t */\n\tspin = !ctx->poll_multi_file && *nr_events < min;\n\n\tret = 0;\n\tlist_for_each_entry_safe(req, tmp, &ctx->iopoll_list, inflight_entry) {\n\t\tstruct kiocb *kiocb = &req->rw.kiocb;\n\n\t\t/*\n\t\t * Move completed and retryable entries to our local lists.\n\t\t * If we find a request that requires polling, break out\n\t\t * and complete those lists first, if we have entries there.\n\t\t */\n\t\tif (READ_ONCE(req->iopoll_completed)) {\n\t\t\tlist_move_tail(&req->inflight_entry, &done);\n\t\t\tcontinue;\n\t\t}\n\t\tif (!list_empty(&done))\n\t\t\tbreak;\n\n\t\tret = kiocb->ki_filp->f_op->iopoll(kiocb, spin);\n\t\tif (ret < 0)\n\t\t\tbreak;\n\n\t\t/* iopoll may have completed current req */\n\t\tif (READ_ONCE(req->iopoll_completed))\n\t\t\tlist_move_tail(&req->inflight_entry, &done);\n\n\t\tif (ret && spin)\n\t\t\tspin = false;\n\t\tret = 0;\n\t}\n\n\tif (!list_empty(&done))\n\t\tio_iopoll_complete(ctx, nr_events, &done);\n\n\treturn ret;\n}\n\n/*\n * Poll for a minimum of 'min' events. Note that if min == 0 we consider that a\n * non-spinning poll check - we'll still enter the driver poll loop, but only\n * as a non-spinning completion check.\n */\nstatic int io_iopoll_getevents(struct io_ring_ctx *ctx, unsigned int *nr_events,\n\t\t\t\tlong min)\n{\n\twhile (!list_empty(&ctx->iopoll_list) && !need_resched()) {\n\t\tint ret;\n\n\t\tret = io_do_iopoll(ctx, nr_events, min);\n\t\tif (ret < 0)\n\t\t\treturn ret;\n\t\tif (*nr_events >= min)\n\t\t\treturn 0;\n\t}\n\n\treturn 1;\n}\n\n/*\n * We can't just wait for polled events to come to us, we have to actively\n * find and complete them.\n */\nstatic void io_iopoll_try_reap_events(struct io_ring_ctx *ctx)\n{\n\tif (!(ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn;\n\n\tmutex_lock(&ctx->uring_lock);\n\twhile (!list_empty(&ctx->iopoll_list)) {\n\t\tunsigned int nr_events = 0;\n\n\t\tio_do_iopoll(ctx, &nr_events, 0);\n\n\t\t/* let it sleep and repeat later if can't complete a request */\n\t\tif (nr_events == 0)\n\t\t\tbreak;\n\t\t/*\n\t\t * Ensure we allow local-to-the-cpu processing to take place,\n\t\t * in this case we need to ensure that we reap all events.\n\t\t * Also let task_work, etc. to progress by releasing the mutex\n\t\t */\n\t\tif (need_resched()) {\n\t\t\tmutex_unlock(&ctx->uring_lock);\n\t\t\tcond_resched();\n\t\t\tmutex_lock(&ctx->uring_lock);\n\t\t}\n\t}\n\tmutex_unlock(&ctx->uring_lock);\n}\n\nstatic int io_iopoll_check(struct io_ring_ctx *ctx, long min)\n{\n\tunsigned int nr_events = 0;\n\tint iters = 0, ret = 0;\n\n\t/*\n\t * We disallow the app entering submit/complete with polling, but we\n\t * still need to lock the ring to prevent racing with polled issue\n\t * that got punted to a workqueue.\n\t */\n\tmutex_lock(&ctx->uring_lock);\n\tdo {\n\t\t/*\n\t\t * Don't enter poll loop if we already have events pending.\n\t\t * If we do, we can potentially be spinning for commands that\n\t\t * already triggered a CQE (eg in error).\n\t\t */\n\t\tif (io_cqring_events(ctx, false))\n\t\t\tbreak;\n\n\t\t/*\n\t\t * If a submit got punted to a workqueue, we can have the\n\t\t * application entering polling for a command before it gets\n\t\t * issued. That app will hold the uring_lock for the duration\n\t\t * of the poll right here, so we need to take a breather every\n\t\t * now and then to ensure that the issue has a chance to add\n\t\t * the poll to the issued list. Otherwise we can spin here\n\t\t * forever, while the workqueue is stuck trying to acquire the\n\t\t * very same mutex.\n\t\t */\n\t\tif (!(++iters & 7)) {\n\t\t\tmutex_unlock(&ctx->uring_lock);\n\t\t\tio_run_task_work();\n\t\t\tmutex_lock(&ctx->uring_lock);\n\t\t}\n\n\t\tret = io_iopoll_getevents(ctx, &nr_events, min);\n\t\tif (ret <= 0)\n\t\t\tbreak;\n\t\tret = 0;\n\t} while (min && !nr_events && !need_resched());\n\n\tmutex_unlock(&ctx->uring_lock);\n\treturn ret;\n}\n\nstatic void kiocb_end_write(struct io_kiocb *req)\n{\n\t/*\n\t * Tell lockdep we inherited freeze protection from submission\n\t * thread.\n\t */\n\tif (req->flags & REQ_F_ISREG) {\n\t\tstruct inode *inode = file_inode(req->file);\n\n\t\t__sb_writers_acquired(inode->i_sb, SB_FREEZE_WRITE);\n\t}\n\tfile_end_write(req->file);\n}\n\nstatic void io_complete_rw_common(struct kiocb *kiocb, long res,\n\t\t\t\t  struct io_comp_state *cs)\n{\n\tstruct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);\n\tint cflags = 0;\n\n\tif (kiocb->ki_flags & IOCB_WRITE)\n\t\tkiocb_end_write(req);\n\n\tif (res != req->result)\n\t\treq_set_fail_links(req);\n\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\tcflags = io_put_rw_kbuf(req);\n\t__io_req_complete(req, res, cflags, cs);\n}\n\n#ifdef CONFIG_BLOCK\nstatic bool io_resubmit_prep(struct io_kiocb *req, int error)\n{\n\tstruct iovec inline_vecs[UIO_FASTIOV], *iovec = inline_vecs;\n\tssize_t ret = -ECANCELED;\n\tstruct iov_iter iter;\n\tint rw;\n\n\tif (error) {\n\t\tret = error;\n\t\tgoto end_req;\n\t}\n\n\tswitch (req->opcode) {\n\tcase IORING_OP_READV:\n\tcase IORING_OP_READ_FIXED:\n\tcase IORING_OP_READ:\n\t\trw = READ;\n\t\tbreak;\n\tcase IORING_OP_WRITEV:\n\tcase IORING_OP_WRITE_FIXED:\n\tcase IORING_OP_WRITE:\n\t\trw = WRITE;\n\t\tbreak;\n\tdefault:\n\t\tprintk_once(KERN_WARNING \"io_uring: bad opcode in resubmit %d\\n\",\n\t\t\t\treq->opcode);\n\t\tgoto end_req;\n\t}\n\n\tif (!req->async_data) {\n\t\tret = io_import_iovec(rw, req, &iovec, &iter, false);\n\t\tif (ret < 0)\n\t\t\tgoto end_req;\n\t\tret = io_setup_async_rw(req, iovec, inline_vecs, &iter, false);\n\t\tif (!ret)\n\t\t\treturn true;\n\t\tkfree(iovec);\n\t} else {\n\t\treturn true;\n\t}\nend_req:\n\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn false;\n}\n#endif\n\nstatic bool io_rw_reissue(struct io_kiocb *req, long res)\n{\n#ifdef CONFIG_BLOCK\n\tumode_t mode = file_inode(req->file)->i_mode;\n\tint ret;\n\n\tif (!S_ISBLK(mode) && !S_ISREG(mode))\n\t\treturn false;\n\tif ((res != -EAGAIN && res != -EOPNOTSUPP) || io_wq_current_is_worker())\n\t\treturn false;\n\n\tret = io_sq_thread_acquire_mm(req->ctx, req);\n\n\tif (io_resubmit_prep(req, ret)) {\n\t\trefcount_inc(&req->refs);\n\t\tio_queue_async_work(req);\n\t\treturn true;\n\t}\n\n#endif\n\treturn false;\n}\n\nstatic void __io_complete_rw(struct io_kiocb *req, long res, long res2,\n\t\t\t     struct io_comp_state *cs)\n{\n\tif (!io_rw_reissue(req, res))\n\t\tio_complete_rw_common(&req->rw.kiocb, res, cs);\n}\n\nstatic void io_complete_rw(struct kiocb *kiocb, long res, long res2)\n{\n\tstruct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);\n\n\t__io_complete_rw(req, res, res2, NULL);\n}\n\nstatic void io_complete_rw_iopoll(struct kiocb *kiocb, long res, long res2)\n{\n\tstruct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);\n\n\tif (kiocb->ki_flags & IOCB_WRITE)\n\t\tkiocb_end_write(req);\n\n\tif (res != -EAGAIN && res != req->result)\n\t\treq_set_fail_links(req);\n\n\tWRITE_ONCE(req->result, res);\n\t/* order with io_poll_complete() checking ->result */\n\tsmp_wmb();\n\tWRITE_ONCE(req->iopoll_completed, 1);\n}\n\n/*\n * After the iocb has been issued, it's safe to be found on the poll list.\n * Adding the kiocb to the list AFTER submission ensures that we don't\n * find it from a io_iopoll_getevents() thread before the issuer is done\n * accessing the kiocb cookie.\n */\nstatic void io_iopoll_req_issued(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\t/*\n\t * Track whether we have multiple files in our lists. This will impact\n\t * how we do polling eventually, not spinning if we're on potentially\n\t * different devices.\n\t */\n\tif (list_empty(&ctx->iopoll_list)) {\n\t\tctx->poll_multi_file = false;\n\t} else if (!ctx->poll_multi_file) {\n\t\tstruct io_kiocb *list_req;\n\n\t\tlist_req = list_first_entry(&ctx->iopoll_list, struct io_kiocb,\n\t\t\t\t\t\tinflight_entry);\n\t\tif (list_req->file != req->file)\n\t\t\tctx->poll_multi_file = true;\n\t}\n\n\t/*\n\t * For fast devices, IO may have already completed. If it has, add\n\t * it to the front so we find it first.\n\t */\n\tif (READ_ONCE(req->iopoll_completed))\n\t\tlist_add(&req->inflight_entry, &ctx->iopoll_list);\n\telse\n\t\tlist_add_tail(&req->inflight_entry, &ctx->iopoll_list);\n\n\tif ((ctx->flags & IORING_SETUP_SQPOLL) &&\n\t    wq_has_sleeper(&ctx->sq_data->wait))\n\t\twake_up(&ctx->sq_data->wait);\n}\n\nstatic void __io_state_file_put(struct io_submit_state *state)\n{\n\tif (state->has_refs)\n\t\tfput_many(state->file, state->has_refs);\n\tstate->file = NULL;\n}\n\nstatic inline void io_state_file_put(struct io_submit_state *state)\n{\n\tif (state->file)\n\t\t__io_state_file_put(state);\n}\n\n/*\n * Get as many references to a file as we have IOs left in this submission,\n * assuming most submissions are for one file, or at least that each file\n * has more than one submission.\n */\nstatic struct file *__io_file_get(struct io_submit_state *state, int fd)\n{\n\tif (!state)\n\t\treturn fget(fd);\n\n\tif (state->file) {\n\t\tif (state->fd == fd) {\n\t\t\tstate->has_refs--;\n\t\t\treturn state->file;\n\t\t}\n\t\t__io_state_file_put(state);\n\t}\n\tstate->file = fget_many(fd, state->ios_left);\n\tif (!state->file)\n\t\treturn NULL;\n\n\tstate->fd = fd;\n\tstate->has_refs = state->ios_left - 1;\n\treturn state->file;\n}\n\nstatic bool io_bdev_nowait(struct block_device *bdev)\n{\n#ifdef CONFIG_BLOCK\n\treturn !bdev || queue_is_mq(bdev_get_queue(bdev));\n#else\n\treturn true;\n#endif\n}\n\n/*\n * If we tracked the file through the SCM inflight mechanism, we could support\n * any file. For now, just ensure that anything potentially problematic is done\n * inline.\n */\nstatic bool io_file_supports_async(struct file *file, int rw)\n{\n\tumode_t mode = file_inode(file)->i_mode;\n\n\tif (S_ISBLK(mode)) {\n\t\tif (io_bdev_nowait(file->f_inode->i_bdev))\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\tif (S_ISCHR(mode) || S_ISSOCK(mode))\n\t\treturn true;\n\tif (S_ISREG(mode)) {\n\t\tif (io_bdev_nowait(file->f_inode->i_sb->s_bdev) &&\n\t\t    file->f_op != &io_uring_fops)\n\t\t\treturn true;\n\t\treturn false;\n\t}\n\n\t/* any ->read/write should understand O_NONBLOCK */\n\tif (file->f_flags & O_NONBLOCK)\n\t\treturn true;\n\n\tif (!(file->f_mode & FMODE_NOWAIT))\n\t\treturn false;\n\n\tif (rw == READ)\n\t\treturn file->f_op->read_iter != NULL;\n\n\treturn file->f_op->write_iter != NULL;\n}\n\nstatic int io_prep_rw(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct kiocb *kiocb = &req->rw.kiocb;\n\tunsigned ioprio;\n\tint ret;\n\n\tif (S_ISREG(file_inode(req->file)->i_mode))\n\t\treq->flags |= REQ_F_ISREG;\n\n\tkiocb->ki_pos = READ_ONCE(sqe->off);\n\tif (kiocb->ki_pos == -1 && !(req->file->f_mode & FMODE_STREAM)) {\n\t\treq->flags |= REQ_F_CUR_POS;\n\t\tkiocb->ki_pos = req->file->f_pos;\n\t}\n\tkiocb->ki_hint = ki_hint_validate(file_write_hint(kiocb->ki_filp));\n\tkiocb->ki_flags = iocb_flags(kiocb->ki_filp);\n\tret = kiocb_set_rw_flags(kiocb, READ_ONCE(sqe->rw_flags));\n\tif (unlikely(ret))\n\t\treturn ret;\n\n\tioprio = READ_ONCE(sqe->ioprio);\n\tif (ioprio) {\n\t\tret = ioprio_check_cap(ioprio);\n\t\tif (ret)\n\t\t\treturn ret;\n\n\t\tkiocb->ki_ioprio = ioprio;\n\t} else\n\t\tkiocb->ki_ioprio = get_current_ioprio();\n\n\t/* don't allow async punt if RWF_NOWAIT was requested */\n\tif (kiocb->ki_flags & IOCB_NOWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\n\tif (ctx->flags & IORING_SETUP_IOPOLL) {\n\t\tif (!(kiocb->ki_flags & IOCB_DIRECT) ||\n\t\t    !kiocb->ki_filp->f_op->iopoll)\n\t\t\treturn -EOPNOTSUPP;\n\n\t\tkiocb->ki_flags |= IOCB_HIPRI;\n\t\tkiocb->ki_complete = io_complete_rw_iopoll;\n\t\treq->iopoll_completed = 0;\n\t} else {\n\t\tif (kiocb->ki_flags & IOCB_HIPRI)\n\t\t\treturn -EINVAL;\n\t\tkiocb->ki_complete = io_complete_rw;\n\t}\n\n\treq->rw.addr = READ_ONCE(sqe->addr);\n\treq->rw.len = READ_ONCE(sqe->len);\n\treq->buf_index = READ_ONCE(sqe->buf_index);\n\treturn 0;\n}\n\nstatic inline void io_rw_done(struct kiocb *kiocb, ssize_t ret)\n{\n\tswitch (ret) {\n\tcase -EIOCBQUEUED:\n\t\tbreak;\n\tcase -ERESTARTSYS:\n\tcase -ERESTARTNOINTR:\n\tcase -ERESTARTNOHAND:\n\tcase -ERESTART_RESTARTBLOCK:\n\t\t/*\n\t\t * We can't just restart the syscall, since previously\n\t\t * submitted sqes may already be in progress. Just fail this\n\t\t * IO with EINTR.\n\t\t */\n\t\tret = -EINTR;\n\t\tfallthrough;\n\tdefault:\n\t\tkiocb->ki_complete(kiocb, ret, 0);\n\t}\n}\n\nstatic void kiocb_done(struct kiocb *kiocb, ssize_t ret,\n\t\t       struct io_comp_state *cs)\n{\n\tstruct io_kiocb *req = container_of(kiocb, struct io_kiocb, rw.kiocb);\n\tstruct io_async_rw *io = req->async_data;\n\n\t/* add previously done IO, if any */\n\tif (io && io->bytes_done > 0) {\n\t\tif (ret < 0)\n\t\t\tret = io->bytes_done;\n\t\telse\n\t\t\tret += io->bytes_done;\n\t}\n\n\tif (req->flags & REQ_F_CUR_POS)\n\t\treq->file->f_pos = kiocb->ki_pos;\n\tif (ret >= 0 && kiocb->ki_complete == io_complete_rw)\n\t\t__io_complete_rw(req, ret, 0, cs);\n\telse\n\t\tio_rw_done(kiocb, ret);\n}\n\nstatic ssize_t io_import_fixed(struct io_kiocb *req, int rw,\n\t\t\t       struct iov_iter *iter)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tsize_t len = req->rw.len;\n\tstruct io_mapped_ubuf *imu;\n\tu16 index, buf_index = req->buf_index;\n\tsize_t offset;\n\tu64 buf_addr;\n\n\tif (unlikely(buf_index >= ctx->nr_user_bufs))\n\t\treturn -EFAULT;\n\tindex = array_index_nospec(buf_index, ctx->nr_user_bufs);\n\timu = &ctx->user_bufs[index];\n\tbuf_addr = req->rw.addr;\n\n\t/* overflow */\n\tif (buf_addr + len < buf_addr)\n\t\treturn -EFAULT;\n\t/* not inside the mapped region */\n\tif (buf_addr < imu->ubuf || buf_addr + len > imu->ubuf + imu->len)\n\t\treturn -EFAULT;\n\n\t/*\n\t * May not be a start of buffer, set size appropriately\n\t * and advance us to the beginning.\n\t */\n\toffset = buf_addr - imu->ubuf;\n\tiov_iter_bvec(iter, rw, imu->bvec, imu->nr_bvecs, offset + len);\n\n\tif (offset) {\n\t\t/*\n\t\t * Don't use iov_iter_advance() here, as it's really slow for\n\t\t * using the latter parts of a big fixed buffer - it iterates\n\t\t * over each segment manually. We can cheat a bit here, because\n\t\t * we know that:\n\t\t *\n\t\t * 1) it's a BVEC iter, we set it up\n\t\t * 2) all bvecs are PAGE_SIZE in size, except potentially the\n\t\t *    first and last bvec\n\t\t *\n\t\t * So just find our index, and adjust the iterator afterwards.\n\t\t * If the offset is within the first bvec (or the whole first\n\t\t * bvec, just use iov_iter_advance(). This makes it easier\n\t\t * since we can just skip the first segment, which may not\n\t\t * be PAGE_SIZE aligned.\n\t\t */\n\t\tconst struct bio_vec *bvec = imu->bvec;\n\n\t\tif (offset <= bvec->bv_len) {\n\t\t\tiov_iter_advance(iter, offset);\n\t\t} else {\n\t\t\tunsigned long seg_skip;\n\n\t\t\t/* skip first vec */\n\t\t\toffset -= bvec->bv_len;\n\t\t\tseg_skip = 1 + (offset >> PAGE_SHIFT);\n\n\t\t\titer->bvec = bvec + seg_skip;\n\t\t\titer->nr_segs -= seg_skip;\n\t\t\titer->count -= bvec->bv_len + offset;\n\t\t\titer->iov_offset = offset & ~PAGE_MASK;\n\t\t}\n\t}\n\n\treturn len;\n}\n\nstatic void io_ring_submit_unlock(struct io_ring_ctx *ctx, bool needs_lock)\n{\n\tif (needs_lock)\n\t\tmutex_unlock(&ctx->uring_lock);\n}\n\nstatic void io_ring_submit_lock(struct io_ring_ctx *ctx, bool needs_lock)\n{\n\t/*\n\t * \"Normal\" inline submissions always hold the uring_lock, since we\n\t * grab it from the system call. Same is true for the SQPOLL offload.\n\t * The only exception is when we've detached the request and issue it\n\t * from an async worker thread, grab the lock for that case.\n\t */\n\tif (needs_lock)\n\t\tmutex_lock(&ctx->uring_lock);\n}\n\nstatic struct io_buffer *io_buffer_select(struct io_kiocb *req, size_t *len,\n\t\t\t\t\t  int bgid, struct io_buffer *kbuf,\n\t\t\t\t\t  bool needs_lock)\n{\n\tstruct io_buffer *head;\n\n\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\treturn kbuf;\n\n\tio_ring_submit_lock(req->ctx, needs_lock);\n\n\tlockdep_assert_held(&req->ctx->uring_lock);\n\n\thead = idr_find(&req->ctx->io_buffer_idr, bgid);\n\tif (head) {\n\t\tif (!list_empty(&head->list)) {\n\t\t\tkbuf = list_last_entry(&head->list, struct io_buffer,\n\t\t\t\t\t\t\tlist);\n\t\t\tlist_del(&kbuf->list);\n\t\t} else {\n\t\t\tkbuf = head;\n\t\t\tidr_remove(&req->ctx->io_buffer_idr, bgid);\n\t\t}\n\t\tif (*len > kbuf->len)\n\t\t\t*len = kbuf->len;\n\t} else {\n\t\tkbuf = ERR_PTR(-ENOBUFS);\n\t}\n\n\tio_ring_submit_unlock(req->ctx, needs_lock);\n\n\treturn kbuf;\n}\n\nstatic void __user *io_rw_buffer_select(struct io_kiocb *req, size_t *len,\n\t\t\t\t\tbool needs_lock)\n{\n\tstruct io_buffer *kbuf;\n\tu16 bgid;\n\n\tkbuf = (struct io_buffer *) (unsigned long) req->rw.addr;\n\tbgid = req->buf_index;\n\tkbuf = io_buffer_select(req, len, bgid, kbuf, needs_lock);\n\tif (IS_ERR(kbuf))\n\t\treturn kbuf;\n\treq->rw.addr = (u64) (unsigned long) kbuf;\n\treq->flags |= REQ_F_BUFFER_SELECTED;\n\treturn u64_to_user_ptr(kbuf->addr);\n}\n\n#ifdef CONFIG_COMPAT\nstatic ssize_t io_compat_import(struct io_kiocb *req, struct iovec *iov,\n\t\t\t\tbool needs_lock)\n{\n\tstruct compat_iovec __user *uiov;\n\tcompat_ssize_t clen;\n\tvoid __user *buf;\n\tssize_t len;\n\n\tuiov = u64_to_user_ptr(req->rw.addr);\n\tif (!access_ok(uiov, sizeof(*uiov)))\n\t\treturn -EFAULT;\n\tif (__get_user(clen, &uiov->iov_len))\n\t\treturn -EFAULT;\n\tif (clen < 0)\n\t\treturn -EINVAL;\n\n\tlen = clen;\n\tbuf = io_rw_buffer_select(req, &len, needs_lock);\n\tif (IS_ERR(buf))\n\t\treturn PTR_ERR(buf);\n\tiov[0].iov_base = buf;\n\tiov[0].iov_len = (compat_size_t) len;\n\treturn 0;\n}\n#endif\n\nstatic ssize_t __io_iov_buffer_select(struct io_kiocb *req, struct iovec *iov,\n\t\t\t\t      bool needs_lock)\n{\n\tstruct iovec __user *uiov = u64_to_user_ptr(req->rw.addr);\n\tvoid __user *buf;\n\tssize_t len;\n\n\tif (copy_from_user(iov, uiov, sizeof(*uiov)))\n\t\treturn -EFAULT;\n\n\tlen = iov[0].iov_len;\n\tif (len < 0)\n\t\treturn -EINVAL;\n\tbuf = io_rw_buffer_select(req, &len, needs_lock);\n\tif (IS_ERR(buf))\n\t\treturn PTR_ERR(buf);\n\tiov[0].iov_base = buf;\n\tiov[0].iov_len = len;\n\treturn 0;\n}\n\nstatic ssize_t io_iov_buffer_select(struct io_kiocb *req, struct iovec *iov,\n\t\t\t\t    bool needs_lock)\n{\n\tif (req->flags & REQ_F_BUFFER_SELECTED) {\n\t\tstruct io_buffer *kbuf;\n\n\t\tkbuf = (struct io_buffer *) (unsigned long) req->rw.addr;\n\t\tiov[0].iov_base = u64_to_user_ptr(kbuf->addr);\n\t\tiov[0].iov_len = kbuf->len;\n\t\treturn 0;\n\t}\n\tif (!req->rw.len)\n\t\treturn 0;\n\telse if (req->rw.len > 1)\n\t\treturn -EINVAL;\n\n#ifdef CONFIG_COMPAT\n\tif (req->ctx->compat)\n\t\treturn io_compat_import(req, iov, needs_lock);\n#endif\n\n\treturn __io_iov_buffer_select(req, iov, needs_lock);\n}\n\nstatic ssize_t __io_import_iovec(int rw, struct io_kiocb *req,\n\t\t\t\t struct iovec **iovec, struct iov_iter *iter,\n\t\t\t\t bool needs_lock)\n{\n\tvoid __user *buf = u64_to_user_ptr(req->rw.addr);\n\tsize_t sqe_len = req->rw.len;\n\tssize_t ret;\n\tu8 opcode;\n\n\topcode = req->opcode;\n\tif (opcode == IORING_OP_READ_FIXED || opcode == IORING_OP_WRITE_FIXED) {\n\t\t*iovec = NULL;\n\t\treturn io_import_fixed(req, rw, iter);\n\t}\n\n\t/* buffer index only valid with fixed read/write, or buffer select  */\n\tif (req->buf_index && !(req->flags & REQ_F_BUFFER_SELECT))\n\t\treturn -EINVAL;\n\n\tif (opcode == IORING_OP_READ || opcode == IORING_OP_WRITE) {\n\t\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\t\tbuf = io_rw_buffer_select(req, &sqe_len, needs_lock);\n\t\t\tif (IS_ERR(buf))\n\t\t\t\treturn PTR_ERR(buf);\n\t\t\treq->rw.len = sqe_len;\n\t\t}\n\n\t\tret = import_single_range(rw, buf, sqe_len, *iovec, iter);\n\t\t*iovec = NULL;\n\t\treturn ret < 0 ? ret : sqe_len;\n\t}\n\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tret = io_iov_buffer_select(req, *iovec, needs_lock);\n\t\tif (!ret) {\n\t\t\tret = (*iovec)->iov_len;\n\t\t\tiov_iter_init(iter, rw, *iovec, 1, ret);\n\t\t}\n\t\t*iovec = NULL;\n\t\treturn ret;\n\t}\n\n\treturn __import_iovec(rw, buf, sqe_len, UIO_FASTIOV, iovec, iter,\n\t\t\t      req->ctx->compat);\n}\n\nstatic ssize_t io_import_iovec(int rw, struct io_kiocb *req,\n\t\t\t       struct iovec **iovec, struct iov_iter *iter,\n\t\t\t       bool needs_lock)\n{\n\tstruct io_async_rw *iorw = req->async_data;\n\n\tif (!iorw)\n\t\treturn __io_import_iovec(rw, req, iovec, iter, needs_lock);\n\t*iovec = NULL;\n\treturn iov_iter_count(&iorw->iter);\n}\n\nstatic inline loff_t *io_kiocb_ppos(struct kiocb *kiocb)\n{\n\treturn (kiocb->ki_filp->f_mode & FMODE_STREAM) ? NULL : &kiocb->ki_pos;\n}\n\n/*\n * For files that don't have ->read_iter() and ->write_iter(), handle them\n * by looping over ->read() or ->write() manually.\n */\nstatic ssize_t loop_rw_iter(int rw, struct file *file, struct kiocb *kiocb,\n\t\t\t   struct iov_iter *iter)\n{\n\tssize_t ret = 0;\n\n\t/*\n\t * Don't support polled IO through this interface, and we can't\n\t * support non-blocking either. For the latter, this just causes\n\t * the kiocb to be handled from an async context.\n\t */\n\tif (kiocb->ki_flags & IOCB_HIPRI)\n\t\treturn -EOPNOTSUPP;\n\tif (kiocb->ki_flags & IOCB_NOWAIT)\n\t\treturn -EAGAIN;\n\n\twhile (iov_iter_count(iter)) {\n\t\tstruct iovec iovec;\n\t\tssize_t nr;\n\n\t\tif (!iov_iter_is_bvec(iter)) {\n\t\t\tiovec = iov_iter_iovec(iter);\n\t\t} else {\n\t\t\t/* fixed buffers import bvec */\n\t\t\tiovec.iov_base = kmap(iter->bvec->bv_page)\n\t\t\t\t\t\t+ iter->iov_offset;\n\t\t\tiovec.iov_len = min(iter->count,\n\t\t\t\t\titer->bvec->bv_len - iter->iov_offset);\n\t\t}\n\n\t\tif (rw == READ) {\n\t\t\tnr = file->f_op->read(file, iovec.iov_base,\n\t\t\t\t\t      iovec.iov_len, io_kiocb_ppos(kiocb));\n\t\t} else {\n\t\t\tnr = file->f_op->write(file, iovec.iov_base,\n\t\t\t\t\t       iovec.iov_len, io_kiocb_ppos(kiocb));\n\t\t}\n\n\t\tif (iov_iter_is_bvec(iter))\n\t\t\tkunmap(iter->bvec->bv_page);\n\n\t\tif (nr < 0) {\n\t\t\tif (!ret)\n\t\t\t\tret = nr;\n\t\t\tbreak;\n\t\t}\n\t\tret += nr;\n\t\tif (nr != iovec.iov_len)\n\t\t\tbreak;\n\t\tiov_iter_advance(iter, nr);\n\t}\n\n\treturn ret;\n}\n\nstatic void io_req_map_rw(struct io_kiocb *req, const struct iovec *iovec,\n\t\t\t  const struct iovec *fast_iov, struct iov_iter *iter)\n{\n\tstruct io_async_rw *rw = req->async_data;\n\n\tmemcpy(&rw->iter, iter, sizeof(*iter));\n\trw->free_iovec = iovec;\n\trw->bytes_done = 0;\n\t/* can only be fixed buffers, no need to do anything */\n\tif (iter->type == ITER_BVEC)\n\t\treturn;\n\tif (!iovec) {\n\t\tunsigned iov_off = 0;\n\n\t\trw->iter.iov = rw->fast_iov;\n\t\tif (iter->iov != fast_iov) {\n\t\t\tiov_off = iter->iov - fast_iov;\n\t\t\trw->iter.iov += iov_off;\n\t\t}\n\t\tif (rw->fast_iov != fast_iov)\n\t\t\tmemcpy(rw->fast_iov + iov_off, fast_iov + iov_off,\n\t\t\t       sizeof(struct iovec) * iter->nr_segs);\n\t} else {\n\t\treq->flags |= REQ_F_NEED_CLEANUP;\n\t}\n}\n\nstatic inline int __io_alloc_async_data(struct io_kiocb *req)\n{\n\tWARN_ON_ONCE(!io_op_defs[req->opcode].async_size);\n\treq->async_data = kmalloc(io_op_defs[req->opcode].async_size, GFP_KERNEL);\n\treturn req->async_data == NULL;\n}\n\nstatic int io_alloc_async_data(struct io_kiocb *req)\n{\n\tif (!io_op_defs[req->opcode].needs_async_data)\n\t\treturn 0;\n\n\treturn  __io_alloc_async_data(req);\n}\n\nstatic int io_setup_async_rw(struct io_kiocb *req, const struct iovec *iovec,\n\t\t\t     const struct iovec *fast_iov,\n\t\t\t     struct iov_iter *iter, bool force)\n{\n\tif (!force && !io_op_defs[req->opcode].needs_async_data)\n\t\treturn 0;\n\tif (!req->async_data) {\n\t\tif (__io_alloc_async_data(req))\n\t\t\treturn -ENOMEM;\n\n\t\tio_req_map_rw(req, iovec, fast_iov, iter);\n\t}\n\treturn 0;\n}\n\nstatic inline int io_rw_prep_async(struct io_kiocb *req, int rw)\n{\n\tstruct io_async_rw *iorw = req->async_data;\n\tstruct iovec *iov = iorw->fast_iov;\n\tssize_t ret;\n\n\tret = __io_import_iovec(rw, req, &iov, &iorw->iter, false);\n\tif (unlikely(ret < 0))\n\t\treturn ret;\n\n\tiorw->bytes_done = 0;\n\tiorw->free_iovec = iov;\n\tif (iov)\n\t\treq->flags |= REQ_F_NEED_CLEANUP;\n\treturn 0;\n}\n\nstatic int io_read_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tssize_t ret;\n\n\tret = io_prep_rw(req, sqe);\n\tif (ret)\n\t\treturn ret;\n\n\tif (unlikely(!(req->file->f_mode & FMODE_READ)))\n\t\treturn -EBADF;\n\n\t/* either don't need iovec imported or already have it */\n\tif (!req->async_data)\n\t\treturn 0;\n\treturn io_rw_prep_async(req, READ);\n}\n\n/*\n * This is our waitqueue callback handler, registered through lock_page_async()\n * when we initially tried to do the IO with the iocb armed our waitqueue.\n * This gets called when the page is unlocked, and we generally expect that to\n * happen when the page IO is completed and the page is now uptodate. This will\n * queue a task_work based retry of the operation, attempting to copy the data\n * again. If the latter fails because the page was NOT uptodate, then we will\n * do a thread based blocking retry of the operation. That's the unexpected\n * slow path.\n */\nstatic int io_async_buf_func(struct wait_queue_entry *wait, unsigned mode,\n\t\t\t     int sync, void *arg)\n{\n\tstruct wait_page_queue *wpq;\n\tstruct io_kiocb *req = wait->private;\n\tstruct wait_page_key *key = arg;\n\tint ret;\n\n\twpq = container_of(wait, struct wait_page_queue, wait);\n\n\tif (!wake_page_match(wpq, key))\n\t\treturn 0;\n\n\treq->rw.kiocb.ki_flags &= ~IOCB_WAITQ;\n\tlist_del_init(&wait->entry);\n\n\tinit_task_work(&req->task_work, io_req_task_submit);\n\tpercpu_ref_get(&req->ctx->refs);\n\n\t/* submit ref gets dropped, acquire a new one */\n\trefcount_inc(&req->refs);\n\tret = io_req_task_work_add(req, true);\n\tif (unlikely(ret)) {\n\t\tstruct task_struct *tsk;\n\n\t\t/* queue just for cancelation */\n\t\tinit_task_work(&req->task_work, io_req_task_cancel);\n\t\ttsk = io_wq_get_task(req->ctx->io_wq);\n\t\ttask_work_add(tsk, &req->task_work, 0);\n\t\twake_up_process(tsk);\n\t}\n\treturn 1;\n}\n\n/*\n * This controls whether a given IO request should be armed for async page\n * based retry. If we return false here, the request is handed to the async\n * worker threads for retry. If we're doing buffered reads on a regular file,\n * we prepare a private wait_page_queue entry and retry the operation. This\n * will either succeed because the page is now uptodate and unlocked, or it\n * will register a callback when the page is unlocked at IO completion. Through\n * that callback, io_uring uses task_work to setup a retry of the operation.\n * That retry will attempt the buffered read again. The retry will generally\n * succeed, or in rare cases where it fails, we then fall back to using the\n * async worker threads for a blocking retry.\n */\nstatic bool io_rw_should_retry(struct io_kiocb *req)\n{\n\tstruct io_async_rw *rw = req->async_data;\n\tstruct wait_page_queue *wait = &rw->wpq;\n\tstruct kiocb *kiocb = &req->rw.kiocb;\n\n\t/* never retry for NOWAIT, we just complete with -EAGAIN */\n\tif (req->flags & REQ_F_NOWAIT)\n\t\treturn false;\n\n\t/* Only for buffered IO */\n\tif (kiocb->ki_flags & (IOCB_DIRECT | IOCB_HIPRI))\n\t\treturn false;\n\n\t/*\n\t * just use poll if we can, and don't attempt if the fs doesn't\n\t * support callback based unlocks\n\t */\n\tif (file_can_poll(req->file) || !(req->file->f_mode & FMODE_BUF_RASYNC))\n\t\treturn false;\n\n\twait->wait.func = io_async_buf_func;\n\twait->wait.private = req;\n\twait->wait.flags = 0;\n\tINIT_LIST_HEAD(&wait->wait.entry);\n\tkiocb->ki_flags |= IOCB_WAITQ;\n\tkiocb->ki_flags &= ~IOCB_NOWAIT;\n\tkiocb->ki_waitq = wait;\n\treturn true;\n}\n\nstatic int io_iter_do_read(struct io_kiocb *req, struct iov_iter *iter)\n{\n\tif (req->file->f_op->read_iter)\n\t\treturn call_read_iter(req->file, &req->rw.kiocb, iter);\n\telse if (req->file->f_op->read)\n\t\treturn loop_rw_iter(READ, req->file, &req->rw.kiocb, iter);\n\telse\n\t\treturn -EINVAL;\n}\n\nstatic int io_read(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\tstruct iovec inline_vecs[UIO_FASTIOV], *iovec = inline_vecs;\n\tstruct kiocb *kiocb = &req->rw.kiocb;\n\tstruct iov_iter __iter, *iter = &__iter;\n\tstruct io_async_rw *rw = req->async_data;\n\tssize_t io_size, ret, ret2;\n\tsize_t iov_count;\n\tbool no_async;\n\n\tif (rw)\n\t\titer = &rw->iter;\n\n\tret = io_import_iovec(READ, req, &iovec, iter, !force_nonblock);\n\tif (ret < 0)\n\t\treturn ret;\n\tiov_count = iov_iter_count(iter);\n\tio_size = ret;\n\treq->result = io_size;\n\tret = 0;\n\n\t/* Ensure we clear previously set non-block flag */\n\tif (!force_nonblock)\n\t\tkiocb->ki_flags &= ~IOCB_NOWAIT;\n\telse\n\t\tkiocb->ki_flags |= IOCB_NOWAIT;\n\n\n\t/* If the file doesn't support async, just async punt */\n\tno_async = force_nonblock && !io_file_supports_async(req->file, READ);\n\tif (no_async)\n\t\tgoto copy_iov;\n\n\tret = rw_verify_area(READ, req->file, io_kiocb_ppos(kiocb), iov_count);\n\tif (unlikely(ret))\n\t\tgoto out_free;\n\n\tret = io_iter_do_read(req, iter);\n\n\tif (!ret) {\n\t\tgoto done;\n\t} else if (ret == -EIOCBQUEUED) {\n\t\tret = 0;\n\t\tgoto out_free;\n\t} else if (ret == -EAGAIN) {\n\t\t/* IOPOLL retry should happen for io-wq threads */\n\t\tif (!force_nonblock && !(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\t\tgoto done;\n\t\t/* no retry on NONBLOCK marked file */\n\t\tif (req->file->f_flags & O_NONBLOCK)\n\t\t\tgoto done;\n\t\t/* some cases will consume bytes even on error returns */\n\t\tiov_iter_revert(iter, iov_count - iov_iter_count(iter));\n\t\tret = 0;\n\t\tgoto copy_iov;\n\t} else if (ret < 0) {\n\t\t/* make sure -ERESTARTSYS -> -EINTR is done */\n\t\tgoto done;\n\t}\n\n\t/* read it all, or we did blocking attempt. no retry. */\n\tif (!iov_iter_count(iter) || !force_nonblock ||\n\t    (req->file->f_flags & O_NONBLOCK))\n\t\tgoto done;\n\n\tio_size -= ret;\ncopy_iov:\n\tret2 = io_setup_async_rw(req, iovec, inline_vecs, iter, true);\n\tif (ret2) {\n\t\tret = ret2;\n\t\tgoto out_free;\n\t}\n\tif (no_async)\n\t\treturn -EAGAIN;\n\trw = req->async_data;\n\t/* it's copied and will be cleaned with ->io */\n\tiovec = NULL;\n\t/* now use our persistent iterator, if we aren't already */\n\titer = &rw->iter;\nretry:\n\trw->bytes_done += ret;\n\t/* if we can retry, do so with the callbacks armed */\n\tif (!io_rw_should_retry(req)) {\n\t\tkiocb->ki_flags &= ~IOCB_WAITQ;\n\t\treturn -EAGAIN;\n\t}\n\n\t/*\n\t * Now retry read with the IOCB_WAITQ parts set in the iocb. If we\n\t * get -EIOCBQUEUED, then we'll get a notification when the desired\n\t * page gets unlocked. We can also get a partial read here, and if we\n\t * do, then just retry at the new offset.\n\t */\n\tret = io_iter_do_read(req, iter);\n\tif (ret == -EIOCBQUEUED) {\n\t\tret = 0;\n\t\tgoto out_free;\n\t} else if (ret > 0 && ret < io_size) {\n\t\t/* we got some bytes, but not all. retry. */\n\t\tgoto retry;\n\t}\ndone:\n\tkiocb_done(kiocb, ret, cs);\n\tret = 0;\nout_free:\n\t/* it's reportedly faster than delegating the null check to kfree() */\n\tif (iovec)\n\t\tkfree(iovec);\n\treturn ret;\n}\n\nstatic int io_write_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tssize_t ret;\n\n\tret = io_prep_rw(req, sqe);\n\tif (ret)\n\t\treturn ret;\n\n\tif (unlikely(!(req->file->f_mode & FMODE_WRITE)))\n\t\treturn -EBADF;\n\n\t/* either don't need iovec imported or already have it */\n\tif (!req->async_data)\n\t\treturn 0;\n\treturn io_rw_prep_async(req, WRITE);\n}\n\nstatic int io_write(struct io_kiocb *req, bool force_nonblock,\n\t\t    struct io_comp_state *cs)\n{\n\tstruct iovec inline_vecs[UIO_FASTIOV], *iovec = inline_vecs;\n\tstruct kiocb *kiocb = &req->rw.kiocb;\n\tstruct iov_iter __iter, *iter = &__iter;\n\tstruct io_async_rw *rw = req->async_data;\n\tsize_t iov_count;\n\tssize_t ret, ret2, io_size;\n\n\tif (rw)\n\t\titer = &rw->iter;\n\n\tret = io_import_iovec(WRITE, req, &iovec, iter, !force_nonblock);\n\tif (ret < 0)\n\t\treturn ret;\n\tiov_count = iov_iter_count(iter);\n\tio_size = ret;\n\treq->result = io_size;\n\n\t/* Ensure we clear previously set non-block flag */\n\tif (!force_nonblock)\n\t\tkiocb->ki_flags &= ~IOCB_NOWAIT;\n\telse\n\t\tkiocb->ki_flags |= IOCB_NOWAIT;\n\n\t/* If the file doesn't support async, just async punt */\n\tif (force_nonblock && !io_file_supports_async(req->file, WRITE))\n\t\tgoto copy_iov;\n\n\t/* file path doesn't support NOWAIT for non-direct_IO */\n\tif (force_nonblock && !(kiocb->ki_flags & IOCB_DIRECT) &&\n\t    (req->flags & REQ_F_ISREG))\n\t\tgoto copy_iov;\n\n\tret = rw_verify_area(WRITE, req->file, io_kiocb_ppos(kiocb), iov_count);\n\tif (unlikely(ret))\n\t\tgoto out_free;\n\n\t/*\n\t * Open-code file_start_write here to grab freeze protection,\n\t * which will be released by another thread in\n\t * io_complete_rw().  Fool lockdep by telling it the lock got\n\t * released so that it doesn't complain about the held lock when\n\t * we return to userspace.\n\t */\n\tif (req->flags & REQ_F_ISREG) {\n\t\t__sb_start_write(file_inode(req->file)->i_sb,\n\t\t\t\t\tSB_FREEZE_WRITE, true);\n\t\t__sb_writers_release(file_inode(req->file)->i_sb,\n\t\t\t\t\tSB_FREEZE_WRITE);\n\t}\n\tkiocb->ki_flags |= IOCB_WRITE;\n\n\tif (req->file->f_op->write_iter)\n\t\tret2 = call_write_iter(req->file, kiocb, iter);\n\telse if (req->file->f_op->write)\n\t\tret2 = loop_rw_iter(WRITE, req->file, kiocb, iter);\n\telse\n\t\tret2 = -EINVAL;\n\n\t/*\n\t * Raw bdev writes will return -EOPNOTSUPP for IOCB_NOWAIT. Just\n\t * retry them without IOCB_NOWAIT.\n\t */\n\tif (ret2 == -EOPNOTSUPP && (kiocb->ki_flags & IOCB_NOWAIT))\n\t\tret2 = -EAGAIN;\n\t/* no retry on NONBLOCK marked file */\n\tif (ret2 == -EAGAIN && (req->file->f_flags & O_NONBLOCK))\n\t\tgoto done;\n\tif (!force_nonblock || ret2 != -EAGAIN) {\n\t\t/* IOPOLL retry should happen for io-wq threads */\n\t\tif ((req->ctx->flags & IORING_SETUP_IOPOLL) && ret2 == -EAGAIN)\n\t\t\tgoto copy_iov;\ndone:\n\t\tkiocb_done(kiocb, ret2, cs);\n\t} else {\ncopy_iov:\n\t\t/* some cases will consume bytes even on error returns */\n\t\tiov_iter_revert(iter, iov_count - iov_iter_count(iter));\n\t\tret = io_setup_async_rw(req, iovec, inline_vecs, iter, false);\n\t\tif (!ret)\n\t\t\treturn -EAGAIN;\n\t}\nout_free:\n\t/* it's reportedly faster than delegating the null check to kfree() */\n\tif (iovec)\n\t\tkfree(iovec);\n\treturn ret;\n}\n\nstatic int __io_splice_prep(struct io_kiocb *req,\n\t\t\t    const struct io_uring_sqe *sqe)\n{\n\tstruct io_splice* sp = &req->splice;\n\tunsigned int valid_flags = SPLICE_F_FD_IN_FIXED | SPLICE_F_ALL;\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\tsp->file_in = NULL;\n\tsp->len = READ_ONCE(sqe->len);\n\tsp->flags = READ_ONCE(sqe->splice_flags);\n\n\tif (unlikely(sp->flags & ~valid_flags))\n\t\treturn -EINVAL;\n\n\tsp->file_in = io_file_get(NULL, req, READ_ONCE(sqe->splice_fd_in),\n\t\t\t\t  (sp->flags & SPLICE_F_FD_IN_FIXED));\n\tif (!sp->file_in)\n\t\treturn -EBADF;\n\treq->flags |= REQ_F_NEED_CLEANUP;\n\n\tif (!S_ISREG(file_inode(sp->file_in)->i_mode)) {\n\t\t/*\n\t\t * Splice operation will be punted aync, and here need to\n\t\t * modify io_wq_work.flags, so initialize io_wq_work firstly.\n\t\t */\n\t\tio_req_init_async(req);\n\t\treq->work.flags |= IO_WQ_WORK_UNBOUND;\n\t}\n\n\treturn 0;\n}\n\nstatic int io_tee_prep(struct io_kiocb *req,\n\t\t       const struct io_uring_sqe *sqe)\n{\n\tif (READ_ONCE(sqe->splice_off_in) || READ_ONCE(sqe->off))\n\t\treturn -EINVAL;\n\treturn __io_splice_prep(req, sqe);\n}\n\nstatic int io_tee(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct io_splice *sp = &req->splice;\n\tstruct file *in = sp->file_in;\n\tstruct file *out = sp->file_out;\n\tunsigned int flags = sp->flags & ~SPLICE_F_FD_IN_FIXED;\n\tlong ret = 0;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\tif (sp->len)\n\t\tret = do_tee(in, out, sp->len, flags);\n\n\tio_put_file(req, in, (sp->flags & SPLICE_F_FD_IN_FIXED));\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\n\tif (ret != sp->len)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_splice_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_splice* sp = &req->splice;\n\n\tsp->off_in = READ_ONCE(sqe->splice_off_in);\n\tsp->off_out = READ_ONCE(sqe->off);\n\treturn __io_splice_prep(req, sqe);\n}\n\nstatic int io_splice(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct io_splice *sp = &req->splice;\n\tstruct file *in = sp->file_in;\n\tstruct file *out = sp->file_out;\n\tunsigned int flags = sp->flags & ~SPLICE_F_FD_IN_FIXED;\n\tloff_t *poff_in, *poff_out;\n\tlong ret = 0;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tpoff_in = (sp->off_in == -1) ? NULL : &sp->off_in;\n\tpoff_out = (sp->off_out == -1) ? NULL : &sp->off_out;\n\n\tif (sp->len)\n\t\tret = do_splice(in, poff_in, out, poff_out, sp->len, flags);\n\n\tio_put_file(req, in, (sp->flags & SPLICE_F_FD_IN_FIXED));\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\n\tif (ret != sp->len)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\n/*\n * IORING_OP_NOP just posts a completion event, nothing else.\n */\nstatic int io_nop(struct io_kiocb *req, struct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (unlikely(ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\t__io_req_complete(req, 0, 0, cs);\n\treturn 0;\n}\n\nstatic int io_prep_fsync(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!req->file)\n\t\treturn -EBADF;\n\n\tif (unlikely(ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(sqe->addr || sqe->ioprio || sqe->buf_index))\n\t\treturn -EINVAL;\n\n\treq->sync.flags = READ_ONCE(sqe->fsync_flags);\n\tif (unlikely(req->sync.flags & ~IORING_FSYNC_DATASYNC))\n\t\treturn -EINVAL;\n\n\treq->sync.off = READ_ONCE(sqe->off);\n\treq->sync.len = READ_ONCE(sqe->len);\n\treturn 0;\n}\n\nstatic int io_fsync(struct io_kiocb *req, bool force_nonblock)\n{\n\tloff_t end = req->sync.off + req->sync.len;\n\tint ret;\n\n\t/* fsync always requires a blocking context */\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tret = vfs_fsync_range(req->file, req->sync.off,\n\t\t\t\tend > 0 ? end : LLONG_MAX,\n\t\t\t\treq->sync.flags & IORING_FSYNC_DATASYNC);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_fallocate_prep(struct io_kiocb *req,\n\t\t\t     const struct io_uring_sqe *sqe)\n{\n\tif (sqe->ioprio || sqe->buf_index || sqe->rw_flags)\n\t\treturn -EINVAL;\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\treq->sync.off = READ_ONCE(sqe->off);\n\treq->sync.len = READ_ONCE(sqe->addr);\n\treq->sync.mode = READ_ONCE(sqe->len);\n\treturn 0;\n}\n\nstatic int io_fallocate(struct io_kiocb *req, bool force_nonblock)\n{\n\tint ret;\n\n\t/* fallocate always requiring blocking context */\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\tret = vfs_fallocate(req->file, req->sync.mode, req->sync.off,\n\t\t\t\treq->sync.len);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int __io_openat_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tconst char __user *fname;\n\tint ret;\n\n\tif (unlikely(sqe->ioprio || sqe->buf_index))\n\t\treturn -EINVAL;\n\tif (unlikely(req->flags & REQ_F_FIXED_FILE))\n\t\treturn -EBADF;\n\n\t/* open.how should be already initialised */\n\tif (!(req->open.how.flags & O_PATH) && force_o_largefile())\n\t\treq->open.how.flags |= O_LARGEFILE;\n\n\treq->open.dfd = READ_ONCE(sqe->fd);\n\tfname = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\treq->open.filename = getname(fname);\n\tif (IS_ERR(req->open.filename)) {\n\t\tret = PTR_ERR(req->open.filename);\n\t\treq->open.filename = NULL;\n\t\treturn ret;\n\t}\n\treq->open.nofile = rlimit(RLIMIT_NOFILE);\n\treq->flags |= REQ_F_NEED_CLEANUP;\n\treturn 0;\n}\n\nstatic int io_openat_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tu64 flags, mode;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tmode = READ_ONCE(sqe->len);\n\tflags = READ_ONCE(sqe->open_flags);\n\treq->open.how = build_open_how(flags, mode);\n\treturn __io_openat_prep(req, sqe);\n}\n\nstatic int io_openat2_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct open_how __user *how;\n\tsize_t len;\n\tint ret;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\thow = u64_to_user_ptr(READ_ONCE(sqe->addr2));\n\tlen = READ_ONCE(sqe->len);\n\tif (len < OPEN_HOW_SIZE_VER0)\n\t\treturn -EINVAL;\n\n\tret = copy_struct_from_user(&req->open.how, sizeof(req->open.how), how,\n\t\t\t\t\tlen);\n\tif (ret)\n\t\treturn ret;\n\n\treturn __io_openat_prep(req, sqe);\n}\n\nstatic int io_openat2(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct open_flags op;\n\tstruct file *file;\n\tint ret;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tret = build_open_flags(&req->open.how, &op);\n\tif (ret)\n\t\tgoto err;\n\n\tret = __get_unused_fd_flags(req->open.how.flags, req->open.nofile);\n\tif (ret < 0)\n\t\tgoto err;\n\n\tfile = do_filp_open(req->open.dfd, req->open.filename, &op);\n\tif (IS_ERR(file)) {\n\t\tput_unused_fd(ret);\n\t\tret = PTR_ERR(file);\n\t} else {\n\t\tfsnotify_open(file);\n\t\tfd_install(ret, file);\n\t}\nerr:\n\tputname(req->open.filename);\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_openat(struct io_kiocb *req, bool force_nonblock)\n{\n\treturn io_openat2(req, force_nonblock);\n}\n\nstatic int io_remove_buffers_prep(struct io_kiocb *req,\n\t\t\t\t  const struct io_uring_sqe *sqe)\n{\n\tstruct io_provide_buf *p = &req->pbuf;\n\tu64 tmp;\n\n\tif (sqe->ioprio || sqe->rw_flags || sqe->addr || sqe->len || sqe->off)\n\t\treturn -EINVAL;\n\n\ttmp = READ_ONCE(sqe->fd);\n\tif (!tmp || tmp > USHRT_MAX)\n\t\treturn -EINVAL;\n\n\tmemset(p, 0, sizeof(*p));\n\tp->nbufs = tmp;\n\tp->bgid = READ_ONCE(sqe->buf_group);\n\treturn 0;\n}\n\nstatic int __io_remove_buffers(struct io_ring_ctx *ctx, struct io_buffer *buf,\n\t\t\t       int bgid, unsigned nbufs)\n{\n\tunsigned i = 0;\n\n\t/* shouldn't happen */\n\tif (!nbufs)\n\t\treturn 0;\n\n\t/* the head kbuf is the list itself */\n\twhile (!list_empty(&buf->list)) {\n\t\tstruct io_buffer *nxt;\n\n\t\tnxt = list_first_entry(&buf->list, struct io_buffer, list);\n\t\tlist_del(&nxt->list);\n\t\tkfree(nxt);\n\t\tif (++i == nbufs)\n\t\t\treturn i;\n\t}\n\ti++;\n\tkfree(buf);\n\tidr_remove(&ctx->io_buffer_idr, bgid);\n\n\treturn i;\n}\n\nstatic int io_remove_buffers(struct io_kiocb *req, bool force_nonblock,\n\t\t\t     struct io_comp_state *cs)\n{\n\tstruct io_provide_buf *p = &req->pbuf;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_buffer *head;\n\tint ret = 0;\n\n\tio_ring_submit_lock(ctx, !force_nonblock);\n\n\tlockdep_assert_held(&ctx->uring_lock);\n\n\tret = -ENOENT;\n\thead = idr_find(&ctx->io_buffer_idr, p->bgid);\n\tif (head)\n\t\tret = __io_remove_buffers(ctx, head, p->bgid, p->nbufs);\n\n\tio_ring_submit_lock(ctx, !force_nonblock);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_provide_buffers_prep(struct io_kiocb *req,\n\t\t\t\t   const struct io_uring_sqe *sqe)\n{\n\tstruct io_provide_buf *p = &req->pbuf;\n\tu64 tmp;\n\n\tif (sqe->ioprio || sqe->rw_flags)\n\t\treturn -EINVAL;\n\n\ttmp = READ_ONCE(sqe->fd);\n\tif (!tmp || tmp > USHRT_MAX)\n\t\treturn -E2BIG;\n\tp->nbufs = tmp;\n\tp->addr = READ_ONCE(sqe->addr);\n\tp->len = READ_ONCE(sqe->len);\n\n\tif (!access_ok(u64_to_user_ptr(p->addr), (p->len * p->nbufs)))\n\t\treturn -EFAULT;\n\n\tp->bgid = READ_ONCE(sqe->buf_group);\n\ttmp = READ_ONCE(sqe->off);\n\tif (tmp > USHRT_MAX)\n\t\treturn -E2BIG;\n\tp->bid = tmp;\n\treturn 0;\n}\n\nstatic int io_add_buffers(struct io_provide_buf *pbuf, struct io_buffer **head)\n{\n\tstruct io_buffer *buf;\n\tu64 addr = pbuf->addr;\n\tint i, bid = pbuf->bid;\n\n\tfor (i = 0; i < pbuf->nbufs; i++) {\n\t\tbuf = kmalloc(sizeof(*buf), GFP_KERNEL);\n\t\tif (!buf)\n\t\t\tbreak;\n\n\t\tbuf->addr = addr;\n\t\tbuf->len = pbuf->len;\n\t\tbuf->bid = bid;\n\t\taddr += pbuf->len;\n\t\tbid++;\n\t\tif (!*head) {\n\t\t\tINIT_LIST_HEAD(&buf->list);\n\t\t\t*head = buf;\n\t\t} else {\n\t\t\tlist_add_tail(&buf->list, &(*head)->list);\n\t\t}\n\t}\n\n\treturn i ? i : -ENOMEM;\n}\n\nstatic int io_provide_buffers(struct io_kiocb *req, bool force_nonblock,\n\t\t\t      struct io_comp_state *cs)\n{\n\tstruct io_provide_buf *p = &req->pbuf;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_buffer *head, *list;\n\tint ret = 0;\n\n\tio_ring_submit_lock(ctx, !force_nonblock);\n\n\tlockdep_assert_held(&ctx->uring_lock);\n\n\tlist = head = idr_find(&ctx->io_buffer_idr, p->bgid);\n\n\tret = io_add_buffers(p, &head);\n\tif (ret < 0)\n\t\tgoto out;\n\n\tif (!list) {\n\t\tret = idr_alloc(&ctx->io_buffer_idr, head, p->bgid, p->bgid + 1,\n\t\t\t\t\tGFP_KERNEL);\n\t\tif (ret < 0) {\n\t\t\t__io_remove_buffers(ctx, head, p->bgid, -1U);\n\t\t\tgoto out;\n\t\t}\n\t}\nout:\n\tio_ring_submit_unlock(ctx, !force_nonblock);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_epoll_ctl_prep(struct io_kiocb *req,\n\t\t\t     const struct io_uring_sqe *sqe)\n{\n#if defined(CONFIG_EPOLL)\n\tif (sqe->ioprio || sqe->buf_index)\n\t\treturn -EINVAL;\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\n\treq->epoll.epfd = READ_ONCE(sqe->fd);\n\treq->epoll.op = READ_ONCE(sqe->len);\n\treq->epoll.fd = READ_ONCE(sqe->off);\n\n\tif (ep_op_has_event(req->epoll.op)) {\n\t\tstruct epoll_event __user *ev;\n\n\t\tev = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\t\tif (copy_from_user(&req->epoll.event, ev, sizeof(*ev)))\n\t\t\treturn -EFAULT;\n\t}\n\n\treturn 0;\n#else\n\treturn -EOPNOTSUPP;\n#endif\n}\n\nstatic int io_epoll_ctl(struct io_kiocb *req, bool force_nonblock,\n\t\t\tstruct io_comp_state *cs)\n{\n#if defined(CONFIG_EPOLL)\n\tstruct io_epoll *ie = &req->epoll;\n\tint ret;\n\n\tret = do_epoll_ctl(ie->epfd, ie->op, ie->fd, &ie->event, force_nonblock);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn -EAGAIN;\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n#else\n\treturn -EOPNOTSUPP;\n#endif\n}\n\nstatic int io_madvise_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n#if defined(CONFIG_ADVISE_SYSCALLS) && defined(CONFIG_MMU)\n\tif (sqe->ioprio || sqe->buf_index || sqe->off)\n\t\treturn -EINVAL;\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\treq->madvise.addr = READ_ONCE(sqe->addr);\n\treq->madvise.len = READ_ONCE(sqe->len);\n\treq->madvise.advice = READ_ONCE(sqe->fadvise_advice);\n\treturn 0;\n#else\n\treturn -EOPNOTSUPP;\n#endif\n}\n\nstatic int io_madvise(struct io_kiocb *req, bool force_nonblock)\n{\n#if defined(CONFIG_ADVISE_SYSCALLS) && defined(CONFIG_MMU)\n\tstruct io_madvise *ma = &req->madvise;\n\tint ret;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tret = do_madvise(ma->addr, ma->len, ma->advice);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n#else\n\treturn -EOPNOTSUPP;\n#endif\n}\n\nstatic int io_fadvise_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tif (sqe->ioprio || sqe->buf_index || sqe->addr)\n\t\treturn -EINVAL;\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\treq->fadvise.offset = READ_ONCE(sqe->off);\n\treq->fadvise.len = READ_ONCE(sqe->len);\n\treq->fadvise.advice = READ_ONCE(sqe->fadvise_advice);\n\treturn 0;\n}\n\nstatic int io_fadvise(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct io_fadvise *fa = &req->fadvise;\n\tint ret;\n\n\tif (force_nonblock) {\n\t\tswitch (fa->advice) {\n\t\tcase POSIX_FADV_NORMAL:\n\t\tcase POSIX_FADV_RANDOM:\n\t\tcase POSIX_FADV_SEQUENTIAL:\n\t\t\tbreak;\n\t\tdefault:\n\t\t\treturn -EAGAIN;\n\t\t}\n\t}\n\n\tret = vfs_fadvise(req->file, fa->offset, fa->len, fa->advice);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_statx_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->buf_index)\n\t\treturn -EINVAL;\n\tif (req->flags & REQ_F_FIXED_FILE)\n\t\treturn -EBADF;\n\n\treq->statx.dfd = READ_ONCE(sqe->fd);\n\treq->statx.mask = READ_ONCE(sqe->len);\n\treq->statx.filename = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\treq->statx.buffer = u64_to_user_ptr(READ_ONCE(sqe->addr2));\n\treq->statx.flags = READ_ONCE(sqe->statx_flags);\n\n\treturn 0;\n}\n\nstatic int io_statx(struct io_kiocb *req, bool force_nonblock)\n{\n\tstruct io_statx *ctx = &req->statx;\n\tint ret;\n\n\tif (force_nonblock) {\n\t\t/* only need file table for an actual valid fd */\n\t\tif (ctx->dfd == -1 || ctx->dfd == AT_FDCWD)\n\t\t\treq->flags |= REQ_F_NO_FILE_TABLE;\n\t\treturn -EAGAIN;\n\t}\n\n\tret = do_statx(ctx->dfd, ctx->filename, ctx->flags, ctx->mask,\n\t\t       ctx->buffer);\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_close_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\t/*\n\t * If we queue this for async, it must not be cancellable. That would\n\t * leave the 'file' in an undeterminate state, and here need to modify\n\t * io_wq_work.flags, so initialize io_wq_work firstly.\n\t */\n\tio_req_init_async(req);\n\treq->work.flags |= IO_WQ_WORK_NO_CANCEL;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->off || sqe->addr || sqe->len ||\n\t    sqe->rw_flags || sqe->buf_index)\n\t\treturn -EINVAL;\n\tif (req->flags & REQ_F_FIXED_FILE)\n\t\treturn -EBADF;\n\n\treq->close.fd = READ_ONCE(sqe->fd);\n\tif ((req->file && req->file->f_op == &io_uring_fops))\n\t\treturn -EBADF;\n\n\treq->close.put_file = NULL;\n\treturn 0;\n}\n\nstatic int io_close(struct io_kiocb *req, bool force_nonblock,\n\t\t    struct io_comp_state *cs)\n{\n\tstruct io_close *close = &req->close;\n\tint ret;\n\n\t/* might be already done during nonblock submission */\n\tif (!close->put_file) {\n\t\tret = __close_fd_get_file(close->fd, &close->put_file);\n\t\tif (ret < 0)\n\t\t\treturn (ret == -ENOENT) ? -EBADF : ret;\n\t}\n\n\t/* if the file has a flush method, be safe and punt to async */\n\tif (close->put_file->f_op->flush && force_nonblock) {\n\t\t/* was never set, but play safe */\n\t\treq->flags &= ~REQ_F_NOWAIT;\n\t\t/* avoid grabbing files - we don't need the files */\n\t\treq->flags |= REQ_F_NO_FILE_TABLE;\n\t\treturn -EAGAIN;\n\t}\n\n\t/* No ->flush() or already async, safely close from here */\n\tret = filp_close(close->put_file, req->work.identity->files);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tfput(close->put_file);\n\tclose->put_file = NULL;\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_prep_sfr(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!req->file)\n\t\treturn -EBADF;\n\n\tif (unlikely(ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(sqe->addr || sqe->ioprio || sqe->buf_index))\n\t\treturn -EINVAL;\n\n\treq->sync.off = READ_ONCE(sqe->off);\n\treq->sync.len = READ_ONCE(sqe->len);\n\treq->sync.flags = READ_ONCE(sqe->sync_range_flags);\n\treturn 0;\n}\n\nstatic int io_sync_file_range(struct io_kiocb *req, bool force_nonblock)\n{\n\tint ret;\n\n\t/* sync_file_range always requires a blocking context */\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tret = sync_file_range(req->file, req->sync.off, req->sync.len,\n\t\t\t\treq->sync.flags);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\n#if defined(CONFIG_NET)\nstatic int io_setup_async_msg(struct io_kiocb *req,\n\t\t\t      struct io_async_msghdr *kmsg)\n{\n\tstruct io_async_msghdr *async_msg = req->async_data;\n\n\tif (async_msg)\n\t\treturn -EAGAIN;\n\tif (io_alloc_async_data(req)) {\n\t\tif (kmsg->iov != kmsg->fast_iov)\n\t\t\tkfree(kmsg->iov);\n\t\treturn -ENOMEM;\n\t}\n\tasync_msg = req->async_data;\n\treq->flags |= REQ_F_NEED_CLEANUP;\n\tmemcpy(async_msg, kmsg, sizeof(*kmsg));\n\treturn -EAGAIN;\n}\n\nstatic int io_sendmsg_copy_hdr(struct io_kiocb *req,\n\t\t\t       struct io_async_msghdr *iomsg)\n{\n\tiomsg->iov = iomsg->fast_iov;\n\tiomsg->msg.msg_name = &iomsg->addr;\n\treturn sendmsg_copy_msghdr(&iomsg->msg, req->sr_msg.umsg,\n\t\t\t\t   req->sr_msg.msg_flags, &iomsg->iov);\n}\n\nstatic int io_sendmsg_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_async_msghdr *async_msg = req->async_data;\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tint ret;\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\tsr->msg_flags = READ_ONCE(sqe->msg_flags);\n\tsr->umsg = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\tsr->len = READ_ONCE(sqe->len);\n\n#ifdef CONFIG_COMPAT\n\tif (req->ctx->compat)\n\t\tsr->msg_flags |= MSG_CMSG_COMPAT;\n#endif\n\n\tif (!async_msg || !io_op_defs[req->opcode].needs_async_data)\n\t\treturn 0;\n\tret = io_sendmsg_copy_hdr(req, async_msg);\n\tif (!ret)\n\t\treq->flags |= REQ_F_NEED_CLEANUP;\n\treturn ret;\n}\n\nstatic int io_sendmsg(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\tstruct io_async_msghdr iomsg, *kmsg;\n\tstruct socket *sock;\n\tunsigned flags;\n\tint ret;\n\n\tsock = sock_from_file(req->file, &ret);\n\tif (unlikely(!sock))\n\t\treturn ret;\n\n\tif (req->async_data) {\n\t\tkmsg = req->async_data;\n\t\tkmsg->msg.msg_name = &kmsg->addr;\n\t\t/* if iov is set, it's allocated already */\n\t\tif (!kmsg->iov)\n\t\t\tkmsg->iov = kmsg->fast_iov;\n\t\tkmsg->msg.msg_iter.iov = kmsg->iov;\n\t} else {\n\t\tret = io_sendmsg_copy_hdr(req, &iomsg);\n\t\tif (ret)\n\t\t\treturn ret;\n\t\tkmsg = &iomsg;\n\t}\n\n\tflags = req->sr_msg.msg_flags;\n\tif (flags & MSG_DONTWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\telse if (force_nonblock)\n\t\tflags |= MSG_DONTWAIT;\n\n\tret = __sys_sendmsg_sock(sock, &kmsg->msg, flags);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn io_setup_async_msg(req, kmsg);\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\n\n\tif (kmsg->iov != kmsg->fast_iov)\n\t\tkfree(kmsg->iov);\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_send(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct msghdr msg;\n\tstruct iovec iov;\n\tstruct socket *sock;\n\tunsigned flags;\n\tint ret;\n\n\tsock = sock_from_file(req->file, &ret);\n\tif (unlikely(!sock))\n\t\treturn ret;\n\n\tret = import_single_range(WRITE, sr->buf, sr->len, &iov, &msg.msg_iter);\n\tif (unlikely(ret))\n\t\treturn ret;\n\n\tmsg.msg_name = NULL;\n\tmsg.msg_control = NULL;\n\tmsg.msg_controllen = 0;\n\tmsg.msg_namelen = 0;\n\n\tflags = req->sr_msg.msg_flags;\n\tif (flags & MSG_DONTWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\telse if (force_nonblock)\n\t\tflags |= MSG_DONTWAIT;\n\n\tmsg.msg_flags = flags;\n\tret = sock_sendmsg(sock, &msg);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn -EAGAIN;\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int __io_recvmsg_copy_hdr(struct io_kiocb *req,\n\t\t\t\t struct io_async_msghdr *iomsg)\n{\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct iovec __user *uiov;\n\tsize_t iov_len;\n\tint ret;\n\n\tret = __copy_msghdr_from_user(&iomsg->msg, sr->umsg,\n\t\t\t\t\t&iomsg->uaddr, &uiov, &iov_len);\n\tif (ret)\n\t\treturn ret;\n\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tif (iov_len > 1)\n\t\t\treturn -EINVAL;\n\t\tif (copy_from_user(iomsg->iov, uiov, sizeof(*uiov)))\n\t\t\treturn -EFAULT;\n\t\tsr->len = iomsg->iov[0].iov_len;\n\t\tiov_iter_init(&iomsg->msg.msg_iter, READ, iomsg->iov, 1,\n\t\t\t\tsr->len);\n\t\tiomsg->iov = NULL;\n\t} else {\n\t\tret = __import_iovec(READ, uiov, iov_len, UIO_FASTIOV,\n\t\t\t\t     &iomsg->iov, &iomsg->msg.msg_iter,\n\t\t\t\t     false);\n\t\tif (ret > 0)\n\t\t\tret = 0;\n\t}\n\n\treturn ret;\n}\n\n#ifdef CONFIG_COMPAT\nstatic int __io_compat_recvmsg_copy_hdr(struct io_kiocb *req,\n\t\t\t\t\tstruct io_async_msghdr *iomsg)\n{\n\tstruct compat_msghdr __user *msg_compat;\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct compat_iovec __user *uiov;\n\tcompat_uptr_t ptr;\n\tcompat_size_t len;\n\tint ret;\n\n\tmsg_compat = (struct compat_msghdr __user *) sr->umsg;\n\tret = __get_compat_msghdr(&iomsg->msg, msg_compat, &iomsg->uaddr,\n\t\t\t\t\t&ptr, &len);\n\tif (ret)\n\t\treturn ret;\n\n\tuiov = compat_ptr(ptr);\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tcompat_ssize_t clen;\n\n\t\tif (len > 1)\n\t\t\treturn -EINVAL;\n\t\tif (!access_ok(uiov, sizeof(*uiov)))\n\t\t\treturn -EFAULT;\n\t\tif (__get_user(clen, &uiov->iov_len))\n\t\t\treturn -EFAULT;\n\t\tif (clen < 0)\n\t\t\treturn -EINVAL;\n\t\tsr->len = iomsg->iov[0].iov_len;\n\t\tiomsg->iov = NULL;\n\t} else {\n\t\tret = __import_iovec(READ, (struct iovec __user *)uiov, len,\n\t\t\t\t   UIO_FASTIOV, &iomsg->iov,\n\t\t\t\t   &iomsg->msg.msg_iter, true);\n\t\tif (ret < 0)\n\t\t\treturn ret;\n\t}\n\n\treturn 0;\n}\n#endif\n\nstatic int io_recvmsg_copy_hdr(struct io_kiocb *req,\n\t\t\t       struct io_async_msghdr *iomsg)\n{\n\tiomsg->msg.msg_name = &iomsg->addr;\n\tiomsg->iov = iomsg->fast_iov;\n\n#ifdef CONFIG_COMPAT\n\tif (req->ctx->compat)\n\t\treturn __io_compat_recvmsg_copy_hdr(req, iomsg);\n#endif\n\n\treturn __io_recvmsg_copy_hdr(req, iomsg);\n}\n\nstatic struct io_buffer *io_recv_buffer_select(struct io_kiocb *req,\n\t\t\t\t\t       bool needs_lock)\n{\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct io_buffer *kbuf;\n\n\tkbuf = io_buffer_select(req, &sr->len, sr->bgid, sr->kbuf, needs_lock);\n\tif (IS_ERR(kbuf))\n\t\treturn kbuf;\n\n\tsr->kbuf = kbuf;\n\treq->flags |= REQ_F_BUFFER_SELECTED;\n\treturn kbuf;\n}\n\nstatic inline unsigned int io_put_recv_kbuf(struct io_kiocb *req)\n{\n\treturn io_put_kbuf(req, req->sr_msg.kbuf);\n}\n\nstatic int io_recvmsg_prep(struct io_kiocb *req,\n\t\t\t   const struct io_uring_sqe *sqe)\n{\n\tstruct io_async_msghdr *async_msg = req->async_data;\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tint ret;\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\n\tsr->msg_flags = READ_ONCE(sqe->msg_flags);\n\tsr->umsg = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\tsr->len = READ_ONCE(sqe->len);\n\tsr->bgid = READ_ONCE(sqe->buf_group);\n\n#ifdef CONFIG_COMPAT\n\tif (req->ctx->compat)\n\t\tsr->msg_flags |= MSG_CMSG_COMPAT;\n#endif\n\n\tif (!async_msg || !io_op_defs[req->opcode].needs_async_data)\n\t\treturn 0;\n\tret = io_recvmsg_copy_hdr(req, async_msg);\n\tif (!ret)\n\t\treq->flags |= REQ_F_NEED_CLEANUP;\n\treturn ret;\n}\n\nstatic int io_recvmsg(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\tstruct io_async_msghdr iomsg, *kmsg;\n\tstruct socket *sock;\n\tstruct io_buffer *kbuf;\n\tunsigned flags;\n\tint ret, cflags = 0;\n\n\tsock = sock_from_file(req->file, &ret);\n\tif (unlikely(!sock))\n\t\treturn ret;\n\n\tif (req->async_data) {\n\t\tkmsg = req->async_data;\n\t\tkmsg->msg.msg_name = &kmsg->addr;\n\t\t/* if iov is set, it's allocated already */\n\t\tif (!kmsg->iov)\n\t\t\tkmsg->iov = kmsg->fast_iov;\n\t\tkmsg->msg.msg_iter.iov = kmsg->iov;\n\t} else {\n\t\tret = io_recvmsg_copy_hdr(req, &iomsg);\n\t\tif (ret)\n\t\t\treturn ret;\n\t\tkmsg = &iomsg;\n\t}\n\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tkbuf = io_recv_buffer_select(req, !force_nonblock);\n\t\tif (IS_ERR(kbuf))\n\t\t\treturn PTR_ERR(kbuf);\n\t\tkmsg->fast_iov[0].iov_base = u64_to_user_ptr(kbuf->addr);\n\t\tiov_iter_init(&kmsg->msg.msg_iter, READ, kmsg->iov,\n\t\t\t\t1, req->sr_msg.len);\n\t}\n\n\tflags = req->sr_msg.msg_flags;\n\tif (flags & MSG_DONTWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\telse if (force_nonblock)\n\t\tflags |= MSG_DONTWAIT;\n\n\tret = __sys_recvmsg_sock(sock, &kmsg->msg, req->sr_msg.umsg,\n\t\t\t\t\tkmsg->uaddr, flags);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn io_setup_async_msg(req, kmsg);\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\n\n\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\tcflags = io_put_recv_kbuf(req);\n\tif (kmsg->iov != kmsg->fast_iov)\n\t\tkfree(kmsg->iov);\n\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, cflags, cs);\n\treturn 0;\n}\n\nstatic int io_recv(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\tstruct io_buffer *kbuf;\n\tstruct io_sr_msg *sr = &req->sr_msg;\n\tstruct msghdr msg;\n\tvoid __user *buf = sr->buf;\n\tstruct socket *sock;\n\tstruct iovec iov;\n\tunsigned flags;\n\tint ret, cflags = 0;\n\n\tsock = sock_from_file(req->file, &ret);\n\tif (unlikely(!sock))\n\t\treturn ret;\n\n\tif (req->flags & REQ_F_BUFFER_SELECT) {\n\t\tkbuf = io_recv_buffer_select(req, !force_nonblock);\n\t\tif (IS_ERR(kbuf))\n\t\t\treturn PTR_ERR(kbuf);\n\t\tbuf = u64_to_user_ptr(kbuf->addr);\n\t}\n\n\tret = import_single_range(READ, buf, sr->len, &iov, &msg.msg_iter);\n\tif (unlikely(ret))\n\t\tgoto out_free;\n\n\tmsg.msg_name = NULL;\n\tmsg.msg_control = NULL;\n\tmsg.msg_controllen = 0;\n\tmsg.msg_namelen = 0;\n\tmsg.msg_iocb = NULL;\n\tmsg.msg_flags = 0;\n\n\tflags = req->sr_msg.msg_flags;\n\tif (flags & MSG_DONTWAIT)\n\t\treq->flags |= REQ_F_NOWAIT;\n\telse if (force_nonblock)\n\t\tflags |= MSG_DONTWAIT;\n\n\tret = sock_recvmsg(sock, &msg, flags);\n\tif (force_nonblock && ret == -EAGAIN)\n\t\treturn -EAGAIN;\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\nout_free:\n\tif (req->flags & REQ_F_BUFFER_SELECTED)\n\t\tcflags = io_put_recv_kbuf(req);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, cflags, cs);\n\treturn 0;\n}\n\nstatic int io_accept_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_accept *accept = &req->accept;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->len || sqe->buf_index)\n\t\treturn -EINVAL;\n\n\taccept->addr = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\taccept->addr_len = u64_to_user_ptr(READ_ONCE(sqe->addr2));\n\taccept->flags = READ_ONCE(sqe->accept_flags);\n\taccept->nofile = rlimit(RLIMIT_NOFILE);\n\treturn 0;\n}\n\nstatic int io_accept(struct io_kiocb *req, bool force_nonblock,\n\t\t     struct io_comp_state *cs)\n{\n\tstruct io_accept *accept = &req->accept;\n\tunsigned int file_flags = force_nonblock ? O_NONBLOCK : 0;\n\tint ret;\n\n\tif (req->file->f_flags & O_NONBLOCK)\n\t\treq->flags |= REQ_F_NOWAIT;\n\n\tret = __sys_accept4_file(req->file, file_flags, accept->addr,\n\t\t\t\t\taccept->addr_len, accept->flags,\n\t\t\t\t\taccept->nofile);\n\tif (ret == -EAGAIN && force_nonblock)\n\t\treturn -EAGAIN;\n\tif (ret < 0) {\n\t\tif (ret == -ERESTARTSYS)\n\t\t\tret = -EINTR;\n\t\treq_set_fail_links(req);\n\t}\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_connect_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_connect *conn = &req->connect;\n\tstruct io_async_connect *io = req->async_data;\n\n\tif (unlikely(req->ctx->flags & (IORING_SETUP_IOPOLL|IORING_SETUP_SQPOLL)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->len || sqe->buf_index || sqe->rw_flags)\n\t\treturn -EINVAL;\n\n\tconn->addr = u64_to_user_ptr(READ_ONCE(sqe->addr));\n\tconn->addr_len =  READ_ONCE(sqe->addr2);\n\n\tif (!io)\n\t\treturn 0;\n\n\treturn move_addr_to_kernel(conn->addr, conn->addr_len,\n\t\t\t\t\t&io->address);\n}\n\nstatic int io_connect(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\tstruct io_async_connect __io, *io;\n\tunsigned file_flags;\n\tint ret;\n\n\tif (req->async_data) {\n\t\tio = req->async_data;\n\t} else {\n\t\tret = move_addr_to_kernel(req->connect.addr,\n\t\t\t\t\t\treq->connect.addr_len,\n\t\t\t\t\t\t&__io.address);\n\t\tif (ret)\n\t\t\tgoto out;\n\t\tio = &__io;\n\t}\n\n\tfile_flags = force_nonblock ? O_NONBLOCK : 0;\n\n\tret = __sys_connect_file(req->file, &io->address,\n\t\t\t\t\treq->connect.addr_len, file_flags);\n\tif ((ret == -EAGAIN || ret == -EINPROGRESS) && force_nonblock) {\n\t\tif (req->async_data)\n\t\t\treturn -EAGAIN;\n\t\tif (io_alloc_async_data(req)) {\n\t\t\tret = -ENOMEM;\n\t\t\tgoto out;\n\t\t}\n\t\tio = req->async_data;\n\t\tmemcpy(req->async_data, &__io, sizeof(__io));\n\t\treturn -EAGAIN;\n\t}\n\tif (ret == -ERESTARTSYS)\n\t\tret = -EINTR;\nout:\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n#else /* !CONFIG_NET */\nstatic int io_sendmsg_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_sendmsg(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_send(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_recvmsg_prep(struct io_kiocb *req,\n\t\t\t   const struct io_uring_sqe *sqe)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_recvmsg(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_recv(struct io_kiocb *req, bool force_nonblock,\n\t\t   struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_accept_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_accept(struct io_kiocb *req, bool force_nonblock,\n\t\t     struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_connect_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\treturn -EOPNOTSUPP;\n}\n\nstatic int io_connect(struct io_kiocb *req, bool force_nonblock,\n\t\t      struct io_comp_state *cs)\n{\n\treturn -EOPNOTSUPP;\n}\n#endif /* CONFIG_NET */\n\nstruct io_poll_table {\n\tstruct poll_table_struct pt;\n\tstruct io_kiocb *req;\n\tint error;\n};\n\nstatic int __io_async_wake(struct io_kiocb *req, struct io_poll_iocb *poll,\n\t\t\t   __poll_t mask, task_work_func_t func)\n{\n\tbool twa_signal_ok;\n\tint ret;\n\n\t/* for instances that support it check for an event match first: */\n\tif (mask && !(mask & poll->events))\n\t\treturn 0;\n\n\ttrace_io_uring_task_add(req->ctx, req->opcode, req->user_data, mask);\n\n\tlist_del_init(&poll->wait.entry);\n\n\treq->result = mask;\n\tinit_task_work(&req->task_work, func);\n\tpercpu_ref_get(&req->ctx->refs);\n\n\t/*\n\t * If we using the signalfd wait_queue_head for this wakeup, then\n\t * it's not safe to use TWA_SIGNAL as we could be recursing on the\n\t * tsk->sighand->siglock on doing the wakeup. Should not be needed\n\t * either, as the normal wakeup will suffice.\n\t */\n\ttwa_signal_ok = (poll->head != &req->task->sighand->signalfd_wqh);\n\n\t/*\n\t * If this fails, then the task is exiting. When a task exits, the\n\t * work gets canceled, so just cancel this request as well instead\n\t * of executing it. We can't safely execute it anyway, as we may not\n\t * have the needed state needed for it anyway.\n\t */\n\tret = io_req_task_work_add(req, twa_signal_ok);\n\tif (unlikely(ret)) {\n\t\tstruct task_struct *tsk;\n\n\t\tWRITE_ONCE(poll->canceled, true);\n\t\ttsk = io_wq_get_task(req->ctx->io_wq);\n\t\ttask_work_add(tsk, &req->task_work, 0);\n\t\twake_up_process(tsk);\n\t}\n\treturn 1;\n}\n\nstatic bool io_poll_rewait(struct io_kiocb *req, struct io_poll_iocb *poll)\n\t__acquires(&req->ctx->completion_lock)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (!req->result && !READ_ONCE(poll->canceled)) {\n\t\tstruct poll_table_struct pt = { ._key = poll->events };\n\n\t\treq->result = vfs_poll(req->file, &pt) & poll->events;\n\t}\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tif (!req->result && !READ_ONCE(poll->canceled)) {\n\t\tadd_wait_queue(poll->head, &poll->wait);\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nstatic struct io_poll_iocb *io_poll_get_double(struct io_kiocb *req)\n{\n\t/* pure poll stashes this in ->async_data, poll driven retry elsewhere */\n\tif (req->opcode == IORING_OP_POLL_ADD)\n\t\treturn req->async_data;\n\treturn req->apoll->double_poll;\n}\n\nstatic struct io_poll_iocb *io_poll_get_single(struct io_kiocb *req)\n{\n\tif (req->opcode == IORING_OP_POLL_ADD)\n\t\treturn &req->poll;\n\treturn &req->apoll->poll;\n}\n\nstatic void io_poll_remove_double(struct io_kiocb *req)\n{\n\tstruct io_poll_iocb *poll = io_poll_get_double(req);\n\n\tlockdep_assert_held(&req->ctx->completion_lock);\n\n\tif (poll && poll->head) {\n\t\tstruct wait_queue_head *head = poll->head;\n\n\t\tspin_lock(&head->lock);\n\t\tlist_del_init(&poll->wait.entry);\n\t\tif (poll->wait.private)\n\t\t\trefcount_dec(&req->refs);\n\t\tpoll->head = NULL;\n\t\tspin_unlock(&head->lock);\n\t}\n}\n\nstatic void io_poll_complete(struct io_kiocb *req, __poll_t mask, int error)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tio_poll_remove_double(req);\n\treq->poll.done = true;\n\tio_cqring_fill_event(req, error ? error : mangle_poll(mask));\n\tio_commit_cqring(ctx);\n}\n\nstatic void io_poll_task_handler(struct io_kiocb *req, struct io_kiocb **nxt)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tif (io_poll_rewait(req, &req->poll)) {\n\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\treturn;\n\t}\n\n\thash_del(&req->hash_node);\n\tio_poll_complete(req, req->result, 0);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\t*nxt = io_put_req_find_next(req);\n\tio_cqring_ev_posted(ctx);\n}\n\nstatic void io_poll_task_func(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_kiocb *nxt = NULL;\n\n\tio_poll_task_handler(req, &nxt);\n\tif (nxt)\n\t\t__io_req_task_submit(nxt);\n\tpercpu_ref_put(&ctx->refs);\n}\n\nstatic int io_poll_double_wake(struct wait_queue_entry *wait, unsigned mode,\n\t\t\t       int sync, void *key)\n{\n\tstruct io_kiocb *req = wait->private;\n\tstruct io_poll_iocb *poll = io_poll_get_single(req);\n\t__poll_t mask = key_to_poll(key);\n\n\t/* for instances that support it check for an event match first: */\n\tif (mask && !(mask & poll->events))\n\t\treturn 0;\n\n\tlist_del_init(&wait->entry);\n\n\tif (poll && poll->head) {\n\t\tbool done;\n\n\t\tspin_lock(&poll->head->lock);\n\t\tdone = list_empty(&poll->wait.entry);\n\t\tif (!done)\n\t\t\tlist_del_init(&poll->wait.entry);\n\t\t/* make sure double remove sees this as being gone */\n\t\twait->private = NULL;\n\t\tspin_unlock(&poll->head->lock);\n\t\tif (!done)\n\t\t\t__io_async_wake(req, poll, mask, io_poll_task_func);\n\t}\n\trefcount_dec(&req->refs);\n\treturn 1;\n}\n\nstatic void io_init_poll_iocb(struct io_poll_iocb *poll, __poll_t events,\n\t\t\t      wait_queue_func_t wake_func)\n{\n\tpoll->head = NULL;\n\tpoll->done = false;\n\tpoll->canceled = false;\n\tpoll->events = events;\n\tINIT_LIST_HEAD(&poll->wait.entry);\n\tinit_waitqueue_func_entry(&poll->wait, wake_func);\n}\n\nstatic void __io_queue_proc(struct io_poll_iocb *poll, struct io_poll_table *pt,\n\t\t\t    struct wait_queue_head *head,\n\t\t\t    struct io_poll_iocb **poll_ptr)\n{\n\tstruct io_kiocb *req = pt->req;\n\n\t/*\n\t * If poll->head is already set, it's because the file being polled\n\t * uses multiple waitqueues for poll handling (eg one for read, one\n\t * for write). Setup a separate io_poll_iocb if this happens.\n\t */\n\tif (unlikely(poll->head)) {\n\t\t/* already have a 2nd entry, fail a third attempt */\n\t\tif (*poll_ptr) {\n\t\t\tpt->error = -EINVAL;\n\t\t\treturn;\n\t\t}\n\t\tpoll = kmalloc(sizeof(*poll), GFP_ATOMIC);\n\t\tif (!poll) {\n\t\t\tpt->error = -ENOMEM;\n\t\t\treturn;\n\t\t}\n\t\tio_init_poll_iocb(poll, req->poll.events, io_poll_double_wake);\n\t\trefcount_inc(&req->refs);\n\t\tpoll->wait.private = req;\n\t\t*poll_ptr = poll;\n\t}\n\n\tpt->error = 0;\n\tpoll->head = head;\n\n\tif (poll->events & EPOLLEXCLUSIVE)\n\t\tadd_wait_queue_exclusive(head, &poll->wait);\n\telse\n\t\tadd_wait_queue(head, &poll->wait);\n}\n\nstatic void io_async_queue_proc(struct file *file, struct wait_queue_head *head,\n\t\t\t       struct poll_table_struct *p)\n{\n\tstruct io_poll_table *pt = container_of(p, struct io_poll_table, pt);\n\tstruct async_poll *apoll = pt->req->apoll;\n\n\t__io_queue_proc(&apoll->poll, pt, head, &apoll->double_poll);\n}\n\nstatic void io_async_task_func(struct callback_head *cb)\n{\n\tstruct io_kiocb *req = container_of(cb, struct io_kiocb, task_work);\n\tstruct async_poll *apoll = req->apoll;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\ttrace_io_uring_task_run(req->ctx, req->opcode, req->user_data);\n\n\tif (io_poll_rewait(req, &apoll->poll)) {\n\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\tpercpu_ref_put(&ctx->refs);\n\t\treturn;\n\t}\n\n\t/* If req is still hashed, it cannot have been canceled. Don't check. */\n\tif (hash_hashed(&req->hash_node))\n\t\thash_del(&req->hash_node);\n\n\tio_poll_remove_double(req);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tif (!READ_ONCE(apoll->poll.canceled))\n\t\t__io_req_task_submit(req);\n\telse\n\t\t__io_req_task_cancel(req, -ECANCELED);\n\n\tpercpu_ref_put(&ctx->refs);\n\tkfree(apoll->double_poll);\n\tkfree(apoll);\n}\n\nstatic int io_async_wake(struct wait_queue_entry *wait, unsigned mode, int sync,\n\t\t\tvoid *key)\n{\n\tstruct io_kiocb *req = wait->private;\n\tstruct io_poll_iocb *poll = &req->apoll->poll;\n\n\ttrace_io_uring_poll_wake(req->ctx, req->opcode, req->user_data,\n\t\t\t\t\tkey_to_poll(key));\n\n\treturn __io_async_wake(req, poll, key_to_poll(key), io_async_task_func);\n}\n\nstatic void io_poll_req_insert(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct hlist_head *list;\n\n\tlist = &ctx->cancel_hash[hash_long(req->user_data, ctx->cancel_hash_bits)];\n\thlist_add_head(&req->hash_node, list);\n}\n\nstatic __poll_t __io_arm_poll_handler(struct io_kiocb *req,\n\t\t\t\t      struct io_poll_iocb *poll,\n\t\t\t\t      struct io_poll_table *ipt, __poll_t mask,\n\t\t\t\t      wait_queue_func_t wake_func)\n\t__acquires(&ctx->completion_lock)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tbool cancel = false;\n\n\tio_init_poll_iocb(poll, mask, wake_func);\n\tpoll->file = req->file;\n\tpoll->wait.private = req;\n\n\tipt->pt._key = mask;\n\tipt->req = req;\n\tipt->error = -EINVAL;\n\n\tmask = vfs_poll(req->file, &ipt->pt) & poll->events;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tif (likely(poll->head)) {\n\t\tspin_lock(&poll->head->lock);\n\t\tif (unlikely(list_empty(&poll->wait.entry))) {\n\t\t\tif (ipt->error)\n\t\t\t\tcancel = true;\n\t\t\tipt->error = 0;\n\t\t\tmask = 0;\n\t\t}\n\t\tif (mask || ipt->error)\n\t\t\tlist_del_init(&poll->wait.entry);\n\t\telse if (cancel)\n\t\t\tWRITE_ONCE(poll->canceled, true);\n\t\telse if (!poll->done) /* actually waiting for an event */\n\t\t\tio_poll_req_insert(req);\n\t\tspin_unlock(&poll->head->lock);\n\t}\n\n\treturn mask;\n}\n\nstatic bool io_arm_poll_handler(struct io_kiocb *req)\n{\n\tconst struct io_op_def *def = &io_op_defs[req->opcode];\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct async_poll *apoll;\n\tstruct io_poll_table ipt;\n\t__poll_t mask, ret;\n\tint rw;\n\n\tif (!req->file || !file_can_poll(req->file))\n\t\treturn false;\n\tif (req->flags & REQ_F_POLLED)\n\t\treturn false;\n\tif (def->pollin)\n\t\trw = READ;\n\telse if (def->pollout)\n\t\trw = WRITE;\n\telse\n\t\treturn false;\n\t/* if we can't nonblock try, then no point in arming a poll handler */\n\tif (!io_file_supports_async(req->file, rw))\n\t\treturn false;\n\n\tapoll = kmalloc(sizeof(*apoll), GFP_ATOMIC);\n\tif (unlikely(!apoll))\n\t\treturn false;\n\tapoll->double_poll = NULL;\n\n\treq->flags |= REQ_F_POLLED;\n\treq->apoll = apoll;\n\tINIT_HLIST_NODE(&req->hash_node);\n\n\tmask = 0;\n\tif (def->pollin)\n\t\tmask |= POLLIN | POLLRDNORM;\n\tif (def->pollout)\n\t\tmask |= POLLOUT | POLLWRNORM;\n\n\t/* If reading from MSG_ERRQUEUE using recvmsg, ignore POLLIN */\n\tif ((req->opcode == IORING_OP_RECVMSG) &&\n\t    (req->sr_msg.msg_flags & MSG_ERRQUEUE))\n\t\tmask &= ~POLLIN;\n\n\tmask |= POLLERR | POLLPRI;\n\n\tipt.pt._qproc = io_async_queue_proc;\n\n\tret = __io_arm_poll_handler(req, &apoll->poll, &ipt, mask,\n\t\t\t\t\tio_async_wake);\n\tif (ret || ipt.error) {\n\t\tio_poll_remove_double(req);\n\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\tkfree(apoll->double_poll);\n\t\tkfree(apoll);\n\t\treturn false;\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\ttrace_io_uring_poll_arm(ctx, req->opcode, req->user_data, mask,\n\t\t\t\t\tapoll->poll.events);\n\treturn true;\n}\n\nstatic bool __io_poll_remove_one(struct io_kiocb *req,\n\t\t\t\t struct io_poll_iocb *poll)\n{\n\tbool do_complete = false;\n\n\tspin_lock(&poll->head->lock);\n\tWRITE_ONCE(poll->canceled, true);\n\tif (!list_empty(&poll->wait.entry)) {\n\t\tlist_del_init(&poll->wait.entry);\n\t\tdo_complete = true;\n\t}\n\tspin_unlock(&poll->head->lock);\n\thash_del(&req->hash_node);\n\treturn do_complete;\n}\n\nstatic bool io_poll_remove_one(struct io_kiocb *req)\n{\n\tbool do_complete;\n\n\tio_poll_remove_double(req);\n\n\tif (req->opcode == IORING_OP_POLL_ADD) {\n\t\tdo_complete = __io_poll_remove_one(req, &req->poll);\n\t} else {\n\t\tstruct async_poll *apoll = req->apoll;\n\n\t\t/* non-poll requests have submit ref still */\n\t\tdo_complete = __io_poll_remove_one(req, &apoll->poll);\n\t\tif (do_complete) {\n\t\t\tio_put_req(req);\n\t\t\tkfree(apoll->double_poll);\n\t\t\tkfree(apoll);\n\t\t}\n\t}\n\n\tif (do_complete) {\n\t\tio_cqring_fill_event(req, -ECANCELED);\n\t\tio_commit_cqring(req->ctx);\n\t\treq_set_fail_links(req);\n\t\tio_put_req_deferred(req, 1);\n\t}\n\n\treturn do_complete;\n}\n\n/*\n * Returns true if we found and killed one or more poll requests\n */\nstatic bool io_poll_remove_all(struct io_ring_ctx *ctx, struct task_struct *tsk)\n{\n\tstruct hlist_node *tmp;\n\tstruct io_kiocb *req;\n\tint posted = 0, i;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tfor (i = 0; i < (1U << ctx->cancel_hash_bits); i++) {\n\t\tstruct hlist_head *list;\n\n\t\tlist = &ctx->cancel_hash[i];\n\t\thlist_for_each_entry_safe(req, tmp, list, hash_node) {\n\t\t\tif (io_task_match(req, tsk))\n\t\t\t\tposted += io_poll_remove_one(req);\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tif (posted)\n\t\tio_cqring_ev_posted(ctx);\n\n\treturn posted != 0;\n}\n\nstatic int io_poll_cancel(struct io_ring_ctx *ctx, __u64 sqe_addr)\n{\n\tstruct hlist_head *list;\n\tstruct io_kiocb *req;\n\n\tlist = &ctx->cancel_hash[hash_long(sqe_addr, ctx->cancel_hash_bits)];\n\thlist_for_each_entry(req, list, hash_node) {\n\t\tif (sqe_addr != req->user_data)\n\t\t\tcontinue;\n\t\tif (io_poll_remove_one(req))\n\t\t\treturn 0;\n\t\treturn -EALREADY;\n\t}\n\n\treturn -ENOENT;\n}\n\nstatic int io_poll_remove_prep(struct io_kiocb *req,\n\t\t\t       const struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->off || sqe->len || sqe->buf_index ||\n\t    sqe->poll_events)\n\t\treturn -EINVAL;\n\n\treq->poll.addr = READ_ONCE(sqe->addr);\n\treturn 0;\n}\n\n/*\n * Find a running poll command that matches one specified in sqe->addr,\n * and remove it if found.\n */\nstatic int io_poll_remove(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tu64 addr;\n\tint ret;\n\n\taddr = req->poll.addr;\n\tspin_lock_irq(&ctx->completion_lock);\n\tret = io_poll_cancel(ctx, addr);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_req_complete(req, ret);\n\treturn 0;\n}\n\nstatic int io_poll_wake(struct wait_queue_entry *wait, unsigned mode, int sync,\n\t\t\tvoid *key)\n{\n\tstruct io_kiocb *req = wait->private;\n\tstruct io_poll_iocb *poll = &req->poll;\n\n\treturn __io_async_wake(req, poll, key_to_poll(key), io_poll_task_func);\n}\n\nstatic void io_poll_queue_proc(struct file *file, struct wait_queue_head *head,\n\t\t\t       struct poll_table_struct *p)\n{\n\tstruct io_poll_table *pt = container_of(p, struct io_poll_table, pt);\n\n\t__io_queue_proc(&pt->req->poll, pt, head, (struct io_poll_iocb **) &pt->req->async_data);\n}\n\nstatic int io_poll_add_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_poll_iocb *poll = &req->poll;\n\tu32 events;\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (sqe->addr || sqe->ioprio || sqe->off || sqe->len || sqe->buf_index)\n\t\treturn -EINVAL;\n\tif (!poll->file)\n\t\treturn -EBADF;\n\n\tevents = READ_ONCE(sqe->poll32_events);\n#ifdef __BIG_ENDIAN\n\tevents = swahw32(events);\n#endif\n\tpoll->events = demangle_poll(events) | EPOLLERR | EPOLLHUP |\n\t\t       (events & EPOLLEXCLUSIVE);\n\treturn 0;\n}\n\nstatic int io_poll_add(struct io_kiocb *req)\n{\n\tstruct io_poll_iocb *poll = &req->poll;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_poll_table ipt;\n\t__poll_t mask;\n\n\tINIT_HLIST_NODE(&req->hash_node);\n\tipt.pt._qproc = io_poll_queue_proc;\n\n\tmask = __io_arm_poll_handler(req, &req->poll, &ipt, poll->events,\n\t\t\t\t\tio_poll_wake);\n\n\tif (mask) { /* no async, we'd stolen it */\n\t\tipt.error = 0;\n\t\tio_poll_complete(req, mask, 0);\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\tif (mask) {\n\t\tio_cqring_ev_posted(ctx);\n\t\tio_put_req(req);\n\t}\n\treturn ipt.error;\n}\n\nstatic enum hrtimer_restart io_timeout_fn(struct hrtimer *timer)\n{\n\tstruct io_timeout_data *data = container_of(timer,\n\t\t\t\t\t\tstruct io_timeout_data, timer);\n\tstruct io_kiocb *req = data->req;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\tlist_del_init(&req->timeout.list);\n\tatomic_set(&req->ctx->cq_timeouts,\n\t\tatomic_read(&req->ctx->cq_timeouts) + 1);\n\n\tio_cqring_fill_event(req, -ETIME);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tio_cqring_ev_posted(ctx);\n\treq_set_fail_links(req);\n\tio_put_req(req);\n\treturn HRTIMER_NORESTART;\n}\n\nstatic int __io_timeout_cancel(struct io_kiocb *req)\n{\n\tstruct io_timeout_data *io = req->async_data;\n\tint ret;\n\n\tret = hrtimer_try_to_cancel(&io->timer);\n\tif (ret == -1)\n\t\treturn -EALREADY;\n\tlist_del_init(&req->timeout.list);\n\n\treq_set_fail_links(req);\n\tio_cqring_fill_event(req, -ECANCELED);\n\tio_put_req_deferred(req, 1);\n\treturn 0;\n}\n\nstatic int io_timeout_cancel(struct io_ring_ctx *ctx, __u64 user_data)\n{\n\tstruct io_kiocb *req;\n\tint ret = -ENOENT;\n\n\tlist_for_each_entry(req, &ctx->timeout_list, timeout.list) {\n\t\tif (user_data == req->user_data) {\n\t\t\tret = 0;\n\t\t\tbreak;\n\t\t}\n\t}\n\n\tif (ret == -ENOENT)\n\t\treturn ret;\n\n\treturn __io_timeout_cancel(req);\n}\n\nstatic int io_timeout_remove_prep(struct io_kiocb *req,\n\t\t\t\t  const struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(req->flags & (REQ_F_FIXED_FILE | REQ_F_BUFFER_SELECT)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->buf_index || sqe->len || sqe->timeout_flags)\n\t\treturn -EINVAL;\n\n\treq->timeout_rem.addr = READ_ONCE(sqe->addr);\n\treturn 0;\n}\n\n/*\n * Remove or update an existing timeout command\n */\nstatic int io_timeout_remove(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tret = io_timeout_cancel(ctx, req->timeout_rem.addr);\n\n\tio_cqring_fill_event(req, ret);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irq(&ctx->completion_lock);\n\tio_cqring_ev_posted(ctx);\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_put_req(req);\n\treturn 0;\n}\n\nstatic int io_timeout_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe,\n\t\t\t   bool is_timeout_link)\n{\n\tstruct io_timeout_data *data;\n\tunsigned flags;\n\tu32 off = READ_ONCE(sqe->off);\n\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->buf_index || sqe->len != 1)\n\t\treturn -EINVAL;\n\tif (off && is_timeout_link)\n\t\treturn -EINVAL;\n\tflags = READ_ONCE(sqe->timeout_flags);\n\tif (flags & ~IORING_TIMEOUT_ABS)\n\t\treturn -EINVAL;\n\n\treq->timeout.off = off;\n\n\tif (!req->async_data && io_alloc_async_data(req))\n\t\treturn -ENOMEM;\n\n\tdata = req->async_data;\n\tdata->req = req;\n\n\tif (get_timespec64(&data->ts, u64_to_user_ptr(sqe->addr)))\n\t\treturn -EFAULT;\n\n\tif (flags & IORING_TIMEOUT_ABS)\n\t\tdata->mode = HRTIMER_MODE_ABS;\n\telse\n\t\tdata->mode = HRTIMER_MODE_REL;\n\n\thrtimer_init(&data->timer, CLOCK_MONOTONIC, data->mode);\n\treturn 0;\n}\n\nstatic int io_timeout(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_timeout_data *data = req->async_data;\n\tstruct list_head *entry;\n\tu32 tail, off = req->timeout.off;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\n\t/*\n\t * sqe->off holds how many events that need to occur for this\n\t * timeout event to be satisfied. If it isn't set, then this is\n\t * a pure timeout request, sequence isn't used.\n\t */\n\tif (io_is_timeout_noseq(req)) {\n\t\tentry = ctx->timeout_list.prev;\n\t\tgoto add;\n\t}\n\n\ttail = ctx->cached_cq_tail - atomic_read(&ctx->cq_timeouts);\n\treq->timeout.target_seq = tail + off;\n\n\t/*\n\t * Insertion sort, ensuring the first entry in the list is always\n\t * the one we need first.\n\t */\n\tlist_for_each_prev(entry, &ctx->timeout_list) {\n\t\tstruct io_kiocb *nxt = list_entry(entry, struct io_kiocb,\n\t\t\t\t\t\t  timeout.list);\n\n\t\tif (io_is_timeout_noseq(nxt))\n\t\t\tcontinue;\n\t\t/* nxt.seq is behind @tail, otherwise would've been completed */\n\t\tif (off >= nxt->timeout.target_seq - tail)\n\t\t\tbreak;\n\t}\nadd:\n\tlist_add(&req->timeout.list, entry);\n\tdata->timer.function = io_timeout_fn;\n\thrtimer_start(&data->timer, timespec64_to_ktime(data->ts), data->mode);\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn 0;\n}\n\nstatic bool io_cancel_cb(struct io_wq_work *work, void *data)\n{\n\tstruct io_kiocb *req = container_of(work, struct io_kiocb, work);\n\n\treturn req->user_data == (unsigned long) data;\n}\n\nstatic int io_async_cancel_one(struct io_ring_ctx *ctx, void *sqe_addr)\n{\n\tenum io_wq_cancel cancel_ret;\n\tint ret = 0;\n\n\tcancel_ret = io_wq_cancel_cb(ctx->io_wq, io_cancel_cb, sqe_addr, false);\n\tswitch (cancel_ret) {\n\tcase IO_WQ_CANCEL_OK:\n\t\tret = 0;\n\t\tbreak;\n\tcase IO_WQ_CANCEL_RUNNING:\n\t\tret = -EALREADY;\n\t\tbreak;\n\tcase IO_WQ_CANCEL_NOTFOUND:\n\t\tret = -ENOENT;\n\t\tbreak;\n\t}\n\n\treturn ret;\n}\n\nstatic void io_async_find_and_cancel(struct io_ring_ctx *ctx,\n\t\t\t\t     struct io_kiocb *req, __u64 sqe_addr,\n\t\t\t\t     int success_ret)\n{\n\tunsigned long flags;\n\tint ret;\n\n\tret = io_async_cancel_one(ctx, (void *) (unsigned long) sqe_addr);\n\tif (ret != -ENOENT) {\n\t\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\t\tgoto done;\n\t}\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\tret = io_timeout_cancel(ctx, sqe_addr);\n\tif (ret != -ENOENT)\n\t\tgoto done;\n\tret = io_poll_cancel(ctx, sqe_addr);\ndone:\n\tif (!ret)\n\t\tret = success_ret;\n\tio_cqring_fill_event(req, ret);\n\tio_commit_cqring(ctx);\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\tio_cqring_ev_posted(ctx);\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\tio_put_req(req);\n}\n\nstatic int io_async_cancel_prep(struct io_kiocb *req,\n\t\t\t\tconst struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & IORING_SETUP_IOPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(req->flags & (REQ_F_FIXED_FILE | REQ_F_BUFFER_SELECT)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->off || sqe->len || sqe->cancel_flags)\n\t\treturn -EINVAL;\n\n\treq->cancel.addr = READ_ONCE(sqe->addr);\n\treturn 0;\n}\n\nstatic int io_async_cancel(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tio_async_find_and_cancel(ctx, req, req->cancel.addr, 0);\n\treturn 0;\n}\n\nstatic int io_files_update_prep(struct io_kiocb *req,\n\t\t\t\tconst struct io_uring_sqe *sqe)\n{\n\tif (unlikely(req->ctx->flags & IORING_SETUP_SQPOLL))\n\t\treturn -EINVAL;\n\tif (unlikely(req->flags & (REQ_F_FIXED_FILE | REQ_F_BUFFER_SELECT)))\n\t\treturn -EINVAL;\n\tif (sqe->ioprio || sqe->rw_flags)\n\t\treturn -EINVAL;\n\n\treq->files_update.offset = READ_ONCE(sqe->off);\n\treq->files_update.nr_args = READ_ONCE(sqe->len);\n\tif (!req->files_update.nr_args)\n\t\treturn -EINVAL;\n\treq->files_update.arg = READ_ONCE(sqe->addr);\n\treturn 0;\n}\n\nstatic int io_files_update(struct io_kiocb *req, bool force_nonblock,\n\t\t\t   struct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_uring_files_update up;\n\tint ret;\n\n\tif (force_nonblock)\n\t\treturn -EAGAIN;\n\n\tup.offset = req->files_update.offset;\n\tup.fds = req->files_update.arg;\n\n\tmutex_lock(&ctx->uring_lock);\n\tret = __io_sqe_files_update(ctx, &up, req->files_update.nr_args);\n\tmutex_unlock(&ctx->uring_lock);\n\n\tif (ret < 0)\n\t\treq_set_fail_links(req);\n\t__io_req_complete(req, ret, 0, cs);\n\treturn 0;\n}\n\nstatic int io_req_prep(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tswitch (req->opcode) {\n\tcase IORING_OP_NOP:\n\t\treturn 0;\n\tcase IORING_OP_READV:\n\tcase IORING_OP_READ_FIXED:\n\tcase IORING_OP_READ:\n\t\treturn io_read_prep(req, sqe);\n\tcase IORING_OP_WRITEV:\n\tcase IORING_OP_WRITE_FIXED:\n\tcase IORING_OP_WRITE:\n\t\treturn io_write_prep(req, sqe);\n\tcase IORING_OP_POLL_ADD:\n\t\treturn io_poll_add_prep(req, sqe);\n\tcase IORING_OP_POLL_REMOVE:\n\t\treturn io_poll_remove_prep(req, sqe);\n\tcase IORING_OP_FSYNC:\n\t\treturn io_prep_fsync(req, sqe);\n\tcase IORING_OP_SYNC_FILE_RANGE:\n\t\treturn io_prep_sfr(req, sqe);\n\tcase IORING_OP_SENDMSG:\n\tcase IORING_OP_SEND:\n\t\treturn io_sendmsg_prep(req, sqe);\n\tcase IORING_OP_RECVMSG:\n\tcase IORING_OP_RECV:\n\t\treturn io_recvmsg_prep(req, sqe);\n\tcase IORING_OP_CONNECT:\n\t\treturn io_connect_prep(req, sqe);\n\tcase IORING_OP_TIMEOUT:\n\t\treturn io_timeout_prep(req, sqe, false);\n\tcase IORING_OP_TIMEOUT_REMOVE:\n\t\treturn io_timeout_remove_prep(req, sqe);\n\tcase IORING_OP_ASYNC_CANCEL:\n\t\treturn io_async_cancel_prep(req, sqe);\n\tcase IORING_OP_LINK_TIMEOUT:\n\t\treturn io_timeout_prep(req, sqe, true);\n\tcase IORING_OP_ACCEPT:\n\t\treturn io_accept_prep(req, sqe);\n\tcase IORING_OP_FALLOCATE:\n\t\treturn io_fallocate_prep(req, sqe);\n\tcase IORING_OP_OPENAT:\n\t\treturn io_openat_prep(req, sqe);\n\tcase IORING_OP_CLOSE:\n\t\treturn io_close_prep(req, sqe);\n\tcase IORING_OP_FILES_UPDATE:\n\t\treturn io_files_update_prep(req, sqe);\n\tcase IORING_OP_STATX:\n\t\treturn io_statx_prep(req, sqe);\n\tcase IORING_OP_FADVISE:\n\t\treturn io_fadvise_prep(req, sqe);\n\tcase IORING_OP_MADVISE:\n\t\treturn io_madvise_prep(req, sqe);\n\tcase IORING_OP_OPENAT2:\n\t\treturn io_openat2_prep(req, sqe);\n\tcase IORING_OP_EPOLL_CTL:\n\t\treturn io_epoll_ctl_prep(req, sqe);\n\tcase IORING_OP_SPLICE:\n\t\treturn io_splice_prep(req, sqe);\n\tcase IORING_OP_PROVIDE_BUFFERS:\n\t\treturn io_provide_buffers_prep(req, sqe);\n\tcase IORING_OP_REMOVE_BUFFERS:\n\t\treturn io_remove_buffers_prep(req, sqe);\n\tcase IORING_OP_TEE:\n\t\treturn io_tee_prep(req, sqe);\n\t}\n\n\tprintk_once(KERN_WARNING \"io_uring: unhandled opcode %d\\n\",\n\t\t\treq->opcode);\n\treturn-EINVAL;\n}\n\nstatic int io_req_defer_prep(struct io_kiocb *req,\n\t\t\t     const struct io_uring_sqe *sqe)\n{\n\tif (!sqe)\n\t\treturn 0;\n\tif (io_alloc_async_data(req))\n\t\treturn -EAGAIN;\n\treturn io_req_prep(req, sqe);\n}\n\nstatic u32 io_get_sequence(struct io_kiocb *req)\n{\n\tstruct io_kiocb *pos;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tu32 total_submitted, nr_reqs = 1;\n\n\tif (req->flags & REQ_F_LINK_HEAD)\n\t\tlist_for_each_entry(pos, &req->link_list, link_list)\n\t\t\tnr_reqs++;\n\n\ttotal_submitted = ctx->cached_sq_head - ctx->cached_sq_dropped;\n\treturn total_submitted - nr_reqs;\n}\n\nstatic int io_req_defer(struct io_kiocb *req, const struct io_uring_sqe *sqe)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_defer_entry *de;\n\tint ret;\n\tu32 seq;\n\n\t/* Still need defer if there is pending req in defer list. */\n\tif (likely(list_empty_careful(&ctx->defer_list) &&\n\t\t!(req->flags & REQ_F_IO_DRAIN)))\n\t\treturn 0;\n\n\tseq = io_get_sequence(req);\n\t/* Still a chance to pass the sequence check */\n\tif (!req_need_defer(req, seq) && list_empty_careful(&ctx->defer_list))\n\t\treturn 0;\n\n\tif (!req->async_data) {\n\t\tret = io_req_defer_prep(req, sqe);\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\tio_prep_async_link(req);\n\tde = kmalloc(sizeof(*de), GFP_KERNEL);\n\tif (!de)\n\t\treturn -ENOMEM;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tif (!req_need_defer(req, seq) && list_empty(&ctx->defer_list)) {\n\t\tspin_unlock_irq(&ctx->completion_lock);\n\t\tkfree(de);\n\t\tio_queue_async_work(req);\n\t\treturn -EIOCBQUEUED;\n\t}\n\n\ttrace_io_uring_defer(ctx, req, req->user_data);\n\tde->req = req;\n\tde->seq = seq;\n\tlist_add_tail(&de->list, &ctx->defer_list);\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn -EIOCBQUEUED;\n}\n\nstatic void io_req_drop_files(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->inflight_lock, flags);\n\tlist_del(&req->inflight_entry);\n\tif (waitqueue_active(&ctx->inflight_wait))\n\t\twake_up(&ctx->inflight_wait);\n\tspin_unlock_irqrestore(&ctx->inflight_lock, flags);\n\treq->flags &= ~REQ_F_INFLIGHT;\n\tput_files_struct(req->work.identity->files);\n\tput_nsproxy(req->work.identity->nsproxy);\n\treq->work.flags &= ~IO_WQ_WORK_FILES;\n}\n\nstatic void __io_clean_op(struct io_kiocb *req)\n{\n\tif (req->flags & REQ_F_BUFFER_SELECTED) {\n\t\tswitch (req->opcode) {\n\t\tcase IORING_OP_READV:\n\t\tcase IORING_OP_READ_FIXED:\n\t\tcase IORING_OP_READ:\n\t\t\tkfree((void *)(unsigned long)req->rw.addr);\n\t\t\tbreak;\n\t\tcase IORING_OP_RECVMSG:\n\t\tcase IORING_OP_RECV:\n\t\t\tkfree(req->sr_msg.kbuf);\n\t\t\tbreak;\n\t\t}\n\t\treq->flags &= ~REQ_F_BUFFER_SELECTED;\n\t}\n\n\tif (req->flags & REQ_F_NEED_CLEANUP) {\n\t\tswitch (req->opcode) {\n\t\tcase IORING_OP_READV:\n\t\tcase IORING_OP_READ_FIXED:\n\t\tcase IORING_OP_READ:\n\t\tcase IORING_OP_WRITEV:\n\t\tcase IORING_OP_WRITE_FIXED:\n\t\tcase IORING_OP_WRITE: {\n\t\t\tstruct io_async_rw *io = req->async_data;\n\t\t\tif (io->free_iovec)\n\t\t\t\tkfree(io->free_iovec);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase IORING_OP_RECVMSG:\n\t\tcase IORING_OP_SENDMSG: {\n\t\t\tstruct io_async_msghdr *io = req->async_data;\n\t\t\tif (io->iov != io->fast_iov)\n\t\t\t\tkfree(io->iov);\n\t\t\tbreak;\n\t\t\t}\n\t\tcase IORING_OP_SPLICE:\n\t\tcase IORING_OP_TEE:\n\t\t\tio_put_file(req, req->splice.file_in,\n\t\t\t\t    (req->splice.flags & SPLICE_F_FD_IN_FIXED));\n\t\t\tbreak;\n\t\tcase IORING_OP_OPENAT:\n\t\tcase IORING_OP_OPENAT2:\n\t\t\tif (req->open.filename)\n\t\t\t\tputname(req->open.filename);\n\t\t\tbreak;\n\t\t}\n\t\treq->flags &= ~REQ_F_NEED_CLEANUP;\n\t}\n\n\tif (req->flags & REQ_F_INFLIGHT)\n\t\tio_req_drop_files(req);\n}\n\nstatic int io_issue_sqe(struct io_kiocb *req, bool force_nonblock,\n\t\t\tstruct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret;\n\n\tswitch (req->opcode) {\n\tcase IORING_OP_NOP:\n\t\tret = io_nop(req, cs);\n\t\tbreak;\n\tcase IORING_OP_READV:\n\tcase IORING_OP_READ_FIXED:\n\tcase IORING_OP_READ:\n\t\tret = io_read(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_WRITEV:\n\tcase IORING_OP_WRITE_FIXED:\n\tcase IORING_OP_WRITE:\n\t\tret = io_write(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_FSYNC:\n\t\tret = io_fsync(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_POLL_ADD:\n\t\tret = io_poll_add(req);\n\t\tbreak;\n\tcase IORING_OP_POLL_REMOVE:\n\t\tret = io_poll_remove(req);\n\t\tbreak;\n\tcase IORING_OP_SYNC_FILE_RANGE:\n\t\tret = io_sync_file_range(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_SENDMSG:\n\t\tret = io_sendmsg(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_SEND:\n\t\tret = io_send(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_RECVMSG:\n\t\tret = io_recvmsg(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_RECV:\n\t\tret = io_recv(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_TIMEOUT:\n\t\tret = io_timeout(req);\n\t\tbreak;\n\tcase IORING_OP_TIMEOUT_REMOVE:\n\t\tret = io_timeout_remove(req);\n\t\tbreak;\n\tcase IORING_OP_ACCEPT:\n\t\tret = io_accept(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_CONNECT:\n\t\tret = io_connect(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_ASYNC_CANCEL:\n\t\tret = io_async_cancel(req);\n\t\tbreak;\n\tcase IORING_OP_FALLOCATE:\n\t\tret = io_fallocate(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_OPENAT:\n\t\tret = io_openat(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_CLOSE:\n\t\tret = io_close(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_FILES_UPDATE:\n\t\tret = io_files_update(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_STATX:\n\t\tret = io_statx(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_FADVISE:\n\t\tret = io_fadvise(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_MADVISE:\n\t\tret = io_madvise(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_OPENAT2:\n\t\tret = io_openat2(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_EPOLL_CTL:\n\t\tret = io_epoll_ctl(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_SPLICE:\n\t\tret = io_splice(req, force_nonblock);\n\t\tbreak;\n\tcase IORING_OP_PROVIDE_BUFFERS:\n\t\tret = io_provide_buffers(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_REMOVE_BUFFERS:\n\t\tret = io_remove_buffers(req, force_nonblock, cs);\n\t\tbreak;\n\tcase IORING_OP_TEE:\n\t\tret = io_tee(req, force_nonblock);\n\t\tbreak;\n\tdefault:\n\t\tret = -EINVAL;\n\t\tbreak;\n\t}\n\n\tif (ret)\n\t\treturn ret;\n\n\t/* If the op doesn't have a file, we're not polling for it */\n\tif ((ctx->flags & IORING_SETUP_IOPOLL) && req->file) {\n\t\tconst bool in_async = io_wq_current_is_worker();\n\n\t\t/* workqueue context doesn't hold uring_lock, grab it now */\n\t\tif (in_async)\n\t\t\tmutex_lock(&ctx->uring_lock);\n\n\t\tio_iopoll_req_issued(req);\n\n\t\tif (in_async)\n\t\t\tmutex_unlock(&ctx->uring_lock);\n\t}\n\n\treturn 0;\n}\n\nstatic struct io_wq_work *io_wq_submit_work(struct io_wq_work *work)\n{\n\tstruct io_kiocb *req = container_of(work, struct io_kiocb, work);\n\tstruct io_kiocb *timeout;\n\tint ret = 0;\n\n\ttimeout = io_prep_linked_timeout(req);\n\tif (timeout)\n\t\tio_queue_linked_timeout(timeout);\n\n\t/* if NO_CANCEL is set, we must still run the work */\n\tif ((work->flags & (IO_WQ_WORK_CANCEL|IO_WQ_WORK_NO_CANCEL)) ==\n\t\t\t\tIO_WQ_WORK_CANCEL) {\n\t\tret = -ECANCELED;\n\t}\n\n\tif (!ret) {\n\t\tdo {\n\t\t\tret = io_issue_sqe(req, false, NULL);\n\t\t\t/*\n\t\t\t * We can get EAGAIN for polled IO even though we're\n\t\t\t * forcing a sync submission from here, since we can't\n\t\t\t * wait for request slots on the block side.\n\t\t\t */\n\t\t\tif (ret != -EAGAIN)\n\t\t\t\tbreak;\n\t\t\tcond_resched();\n\t\t} while (1);\n\t}\n\n\tif (ret) {\n\t\treq_set_fail_links(req);\n\t\tio_req_complete(req, ret);\n\t}\n\n\treturn io_steal_work(req);\n}\n\nstatic inline struct file *io_file_from_index(struct io_ring_ctx *ctx,\n\t\t\t\t\t      int index)\n{\n\tstruct fixed_file_table *table;\n\n\ttable = &ctx->file_data->table[index >> IORING_FILE_TABLE_SHIFT];\n\treturn table->files[index & IORING_FILE_TABLE_MASK];\n}\n\nstatic struct file *io_file_get(struct io_submit_state *state,\n\t\t\t\tstruct io_kiocb *req, int fd, bool fixed)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct file *file;\n\n\tif (fixed) {\n\t\tif (unlikely((unsigned int)fd >= ctx->nr_user_files))\n\t\t\treturn NULL;\n\t\tfd = array_index_nospec(fd, ctx->nr_user_files);\n\t\tfile = io_file_from_index(ctx, fd);\n\t\tif (file) {\n\t\t\treq->fixed_file_refs = &ctx->file_data->node->refs;\n\t\t\tpercpu_ref_get(req->fixed_file_refs);\n\t\t}\n\t} else {\n\t\ttrace_io_uring_file_get(ctx, fd);\n\t\tfile = __io_file_get(state, fd);\n\t}\n\n\treturn file;\n}\n\nstatic int io_req_set_file(struct io_submit_state *state, struct io_kiocb *req,\n\t\t\t   int fd)\n{\n\tbool fixed;\n\n\tfixed = (req->flags & REQ_F_FIXED_FILE) != 0;\n\tif (unlikely(!fixed && io_async_submit(req->ctx)))\n\t\treturn -EBADF;\n\n\treq->file = io_file_get(state, req, fd, fixed);\n\tif (req->file || io_op_defs[req->opcode].needs_file_no_error)\n\t\treturn 0;\n\treturn -EBADF;\n}\n\nstatic enum hrtimer_restart io_link_timeout_fn(struct hrtimer *timer)\n{\n\tstruct io_timeout_data *data = container_of(timer,\n\t\t\t\t\t\tstruct io_timeout_data, timer);\n\tstruct io_kiocb *req = data->req;\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tstruct io_kiocb *prev = NULL;\n\tunsigned long flags;\n\n\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\n\t/*\n\t * We don't expect the list to be empty, that will only happen if we\n\t * race with the completion of the linked work.\n\t */\n\tif (!list_empty(&req->link_list)) {\n\t\tprev = list_entry(req->link_list.prev, struct io_kiocb,\n\t\t\t\t  link_list);\n\t\tif (refcount_inc_not_zero(&prev->refs)) {\n\t\t\tlist_del_init(&req->link_list);\n\t\t\tprev->flags &= ~REQ_F_LINK_TIMEOUT;\n\t\t} else\n\t\t\tprev = NULL;\n\t}\n\n\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\n\tif (prev) {\n\t\treq_set_fail_links(prev);\n\t\tio_async_find_and_cancel(ctx, req, prev->user_data, -ETIME);\n\t\tio_put_req(prev);\n\t} else {\n\t\tio_req_complete(req, -ETIME);\n\t}\n\treturn HRTIMER_NORESTART;\n}\n\nstatic void __io_queue_linked_timeout(struct io_kiocb *req)\n{\n\t/*\n\t * If the list is now empty, then our linked request finished before\n\t * we got a chance to setup the timer\n\t */\n\tif (!list_empty(&req->link_list)) {\n\t\tstruct io_timeout_data *data = req->async_data;\n\n\t\tdata->timer.function = io_link_timeout_fn;\n\t\thrtimer_start(&data->timer, timespec64_to_ktime(data->ts),\n\t\t\t\tdata->mode);\n\t}\n}\n\nstatic void io_queue_linked_timeout(struct io_kiocb *req)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\t__io_queue_linked_timeout(req);\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\t/* drop submission reference */\n\tio_put_req(req);\n}\n\nstatic struct io_kiocb *io_prep_linked_timeout(struct io_kiocb *req)\n{\n\tstruct io_kiocb *nxt;\n\n\tif (!(req->flags & REQ_F_LINK_HEAD))\n\t\treturn NULL;\n\tif (req->flags & REQ_F_LINK_TIMEOUT)\n\t\treturn NULL;\n\n\tnxt = list_first_entry_or_null(&req->link_list, struct io_kiocb,\n\t\t\t\t\tlink_list);\n\tif (!nxt || nxt->opcode != IORING_OP_LINK_TIMEOUT)\n\t\treturn NULL;\n\n\treq->flags |= REQ_F_LINK_TIMEOUT;\n\treturn nxt;\n}\n\nstatic void __io_queue_sqe(struct io_kiocb *req, struct io_comp_state *cs)\n{\n\tstruct io_kiocb *linked_timeout;\n\tstruct io_kiocb *nxt;\n\tconst struct cred *old_creds = NULL;\n\tint ret;\n\nagain:\n\tlinked_timeout = io_prep_linked_timeout(req);\n\n\tif ((req->flags & REQ_F_WORK_INITIALIZED) && req->work.identity->creds &&\n\t    req->work.identity->creds != current_cred()) {\n\t\tif (old_creds)\n\t\t\trevert_creds(old_creds);\n\t\tif (old_creds == req->work.identity->creds)\n\t\t\told_creds = NULL; /* restored original creds */\n\t\telse\n\t\t\told_creds = override_creds(req->work.identity->creds);\n\t\treq->work.flags |= IO_WQ_WORK_CREDS;\n\t}\n\n\tret = io_issue_sqe(req, true, cs);\n\n\t/*\n\t * We async punt it if the file wasn't marked NOWAIT, or if the file\n\t * doesn't support non-blocking read/write attempts\n\t */\n\tif (ret == -EAGAIN && !(req->flags & REQ_F_NOWAIT)) {\n\t\tif (!io_arm_poll_handler(req)) {\npunt:\n\t\t\t/*\n\t\t\t * Queued up for async execution, worker will release\n\t\t\t * submit reference when the iocb is actually submitted.\n\t\t\t */\n\t\t\tio_queue_async_work(req);\n\t\t}\n\n\t\tif (linked_timeout)\n\t\t\tio_queue_linked_timeout(linked_timeout);\n\t\tgoto exit;\n\t}\n\n\tif (unlikely(ret)) {\n\t\t/* un-prep timeout, so it'll be killed as any other linked */\n\t\treq->flags &= ~REQ_F_LINK_TIMEOUT;\n\t\treq_set_fail_links(req);\n\t\tio_put_req(req);\n\t\tio_req_complete(req, ret);\n\t\tgoto exit;\n\t}\n\n\t/* drop submission reference */\n\tnxt = io_put_req_find_next(req);\n\tif (linked_timeout)\n\t\tio_queue_linked_timeout(linked_timeout);\n\n\tif (nxt) {\n\t\treq = nxt;\n\n\t\tif (req->flags & REQ_F_FORCE_ASYNC)\n\t\t\tgoto punt;\n\t\tgoto again;\n\t}\nexit:\n\tif (old_creds)\n\t\trevert_creds(old_creds);\n}\n\nstatic void io_queue_sqe(struct io_kiocb *req, const struct io_uring_sqe *sqe,\n\t\t\t struct io_comp_state *cs)\n{\n\tint ret;\n\n\tret = io_req_defer(req, sqe);\n\tif (ret) {\n\t\tif (ret != -EIOCBQUEUED) {\nfail_req:\n\t\t\treq_set_fail_links(req);\n\t\t\tio_put_req(req);\n\t\t\tio_req_complete(req, ret);\n\t\t}\n\t} else if (req->flags & REQ_F_FORCE_ASYNC) {\n\t\tif (!req->async_data) {\n\t\t\tret = io_req_defer_prep(req, sqe);\n\t\t\tif (unlikely(ret))\n\t\t\t\tgoto fail_req;\n\t\t}\n\n\t\t/*\n\t\t * Never try inline submit of IOSQE_ASYNC is set, go straight\n\t\t * to async execution.\n\t\t */\n\t\tio_req_init_async(req);\n\t\treq->work.flags |= IO_WQ_WORK_CONCURRENT;\n\t\tio_queue_async_work(req);\n\t} else {\n\t\tif (sqe) {\n\t\t\tret = io_req_prep(req, sqe);\n\t\t\tif (unlikely(ret))\n\t\t\t\tgoto fail_req;\n\t\t}\n\t\t__io_queue_sqe(req, cs);\n\t}\n}\n\nstatic inline void io_queue_link_head(struct io_kiocb *req,\n\t\t\t\t      struct io_comp_state *cs)\n{\n\tif (unlikely(req->flags & REQ_F_FAIL_LINK)) {\n\t\tio_put_req(req);\n\t\tio_req_complete(req, -ECANCELED);\n\t} else\n\t\tio_queue_sqe(req, NULL, cs);\n}\n\nstatic int io_submit_sqe(struct io_kiocb *req, const struct io_uring_sqe *sqe,\n\t\t\t struct io_kiocb **link, struct io_comp_state *cs)\n{\n\tstruct io_ring_ctx *ctx = req->ctx;\n\tint ret;\n\n\t/*\n\t * If we already have a head request, queue this one for async\n\t * submittal once the head completes. If we don't have a head but\n\t * IOSQE_IO_LINK is set in the sqe, start a new head. This one will be\n\t * submitted sync once the chain is complete. If none of those\n\t * conditions are true (normal request), then just queue it.\n\t */\n\tif (*link) {\n\t\tstruct io_kiocb *head = *link;\n\n\t\t/*\n\t\t * Taking sequential execution of a link, draining both sides\n\t\t * of the link also fullfils IOSQE_IO_DRAIN semantics for all\n\t\t * requests in the link. So, it drains the head and the\n\t\t * next after the link request. The last one is done via\n\t\t * drain_next flag to persist the effect across calls.\n\t\t */\n\t\tif (req->flags & REQ_F_IO_DRAIN) {\n\t\t\thead->flags |= REQ_F_IO_DRAIN;\n\t\t\tctx->drain_next = 1;\n\t\t}\n\t\tret = io_req_defer_prep(req, sqe);\n\t\tif (unlikely(ret)) {\n\t\t\t/* fail even hard links since we don't submit */\n\t\t\thead->flags |= REQ_F_FAIL_LINK;\n\t\t\treturn ret;\n\t\t}\n\t\ttrace_io_uring_link(ctx, req, head);\n\t\tlist_add_tail(&req->link_list, &head->link_list);\n\n\t\t/* last request of a link, enqueue the link */\n\t\tif (!(req->flags & (REQ_F_LINK | REQ_F_HARDLINK))) {\n\t\t\tio_queue_link_head(head, cs);\n\t\t\t*link = NULL;\n\t\t}\n\t} else {\n\t\tif (unlikely(ctx->drain_next)) {\n\t\t\treq->flags |= REQ_F_IO_DRAIN;\n\t\t\tctx->drain_next = 0;\n\t\t}\n\t\tif (req->flags & (REQ_F_LINK | REQ_F_HARDLINK)) {\n\t\t\treq->flags |= REQ_F_LINK_HEAD;\n\t\t\tINIT_LIST_HEAD(&req->link_list);\n\n\t\t\tret = io_req_defer_prep(req, sqe);\n\t\t\tif (unlikely(ret))\n\t\t\t\treq->flags |= REQ_F_FAIL_LINK;\n\t\t\t*link = req;\n\t\t} else {\n\t\t\tio_queue_sqe(req, sqe, cs);\n\t\t}\n\t}\n\n\treturn 0;\n}\n\n/*\n * Batched submission is done, ensure local IO is flushed out.\n */\nstatic void io_submit_state_end(struct io_submit_state *state)\n{\n\tif (!list_empty(&state->comp.list))\n\t\tio_submit_flush_completions(&state->comp);\n\tblk_finish_plug(&state->plug);\n\tio_state_file_put(state);\n\tif (state->free_reqs)\n\t\tkmem_cache_free_bulk(req_cachep, state->free_reqs, state->reqs);\n}\n\n/*\n * Start submission side cache.\n */\nstatic void io_submit_state_start(struct io_submit_state *state,\n\t\t\t\t  struct io_ring_ctx *ctx, unsigned int max_ios)\n{\n\tblk_start_plug(&state->plug);\n\tstate->comp.nr = 0;\n\tINIT_LIST_HEAD(&state->comp.list);\n\tstate->comp.ctx = ctx;\n\tstate->free_reqs = 0;\n\tstate->file = NULL;\n\tstate->ios_left = max_ios;\n}\n\nstatic void io_commit_sqring(struct io_ring_ctx *ctx)\n{\n\tstruct io_rings *rings = ctx->rings;\n\n\t/*\n\t * Ensure any loads from the SQEs are done at this point,\n\t * since once we write the new head, the application could\n\t * write new data to them.\n\t */\n\tsmp_store_release(&rings->sq.head, ctx->cached_sq_head);\n}\n\n/*\n * Fetch an sqe, if one is available. Note that sqe_ptr will point to memory\n * that is mapped by userspace. This means that care needs to be taken to\n * ensure that reads are stable, as we cannot rely on userspace always\n * being a good citizen. If members of the sqe are validated and then later\n * used, it's important that those reads are done through READ_ONCE() to\n * prevent a re-load down the line.\n */\nstatic const struct io_uring_sqe *io_get_sqe(struct io_ring_ctx *ctx)\n{\n\tu32 *sq_array = ctx->sq_array;\n\tunsigned head;\n\n\t/*\n\t * The cached sq head (or cq tail) serves two purposes:\n\t *\n\t * 1) allows us to batch the cost of updating the user visible\n\t *    head updates.\n\t * 2) allows the kernel side to track the head on its own, even\n\t *    though the application is the one updating it.\n\t */\n\thead = READ_ONCE(sq_array[ctx->cached_sq_head & ctx->sq_mask]);\n\tif (likely(head < ctx->sq_entries))\n\t\treturn &ctx->sq_sqes[head];\n\n\t/* drop invalid entries */\n\tctx->cached_sq_dropped++;\n\tWRITE_ONCE(ctx->rings->sq_dropped, ctx->cached_sq_dropped);\n\treturn NULL;\n}\n\nstatic inline void io_consume_sqe(struct io_ring_ctx *ctx)\n{\n\tctx->cached_sq_head++;\n}\n\n/*\n * Check SQE restrictions (opcode and flags).\n *\n * Returns 'true' if SQE is allowed, 'false' otherwise.\n */\nstatic inline bool io_check_restriction(struct io_ring_ctx *ctx,\n\t\t\t\t\tstruct io_kiocb *req,\n\t\t\t\t\tunsigned int sqe_flags)\n{\n\tif (!ctx->restricted)\n\t\treturn true;\n\n\tif (!test_bit(req->opcode, ctx->restrictions.sqe_op))\n\t\treturn false;\n\n\tif ((sqe_flags & ctx->restrictions.sqe_flags_required) !=\n\t    ctx->restrictions.sqe_flags_required)\n\t\treturn false;\n\n\tif (sqe_flags & ~(ctx->restrictions.sqe_flags_allowed |\n\t\t\t  ctx->restrictions.sqe_flags_required))\n\t\treturn false;\n\n\treturn true;\n}\n\n#define SQE_VALID_FLAGS\t(IOSQE_FIXED_FILE|IOSQE_IO_DRAIN|IOSQE_IO_LINK|\t\\\n\t\t\t\tIOSQE_IO_HARDLINK | IOSQE_ASYNC | \\\n\t\t\t\tIOSQE_BUFFER_SELECT)\n\nstatic int io_init_req(struct io_ring_ctx *ctx, struct io_kiocb *req,\n\t\t       const struct io_uring_sqe *sqe,\n\t\t       struct io_submit_state *state)\n{\n\tunsigned int sqe_flags;\n\tint id, ret;\n\n\treq->opcode = READ_ONCE(sqe->opcode);\n\treq->user_data = READ_ONCE(sqe->user_data);\n\treq->async_data = NULL;\n\treq->file = NULL;\n\treq->ctx = ctx;\n\treq->flags = 0;\n\t/* one is dropped after submission, the other at completion */\n\trefcount_set(&req->refs, 2);\n\treq->task = current;\n\treq->result = 0;\n\n\tif (unlikely(req->opcode >= IORING_OP_LAST))\n\t\treturn -EINVAL;\n\n\tif (unlikely(io_sq_thread_acquire_mm(ctx, req)))\n\t\treturn -EFAULT;\n\n\tsqe_flags = READ_ONCE(sqe->flags);\n\t/* enforce forwards compatibility on users */\n\tif (unlikely(sqe_flags & ~SQE_VALID_FLAGS))\n\t\treturn -EINVAL;\n\n\tif (unlikely(!io_check_restriction(ctx, req, sqe_flags)))\n\t\treturn -EACCES;\n\n\tif ((sqe_flags & IOSQE_BUFFER_SELECT) &&\n\t    !io_op_defs[req->opcode].buffer_select)\n\t\treturn -EOPNOTSUPP;\n\n\tid = READ_ONCE(sqe->personality);\n\tif (id) {\n\t\tstruct io_identity *iod;\n\n\t\tio_req_init_async(req);\n\t\tiod = idr_find(&ctx->personality_idr, id);\n\t\tif (unlikely(!iod))\n\t\t\treturn -EINVAL;\n\t\trefcount_inc(&iod->count);\n\t\tio_put_identity(req);\n\t\tget_cred(iod->creds);\n\t\treq->work.identity = iod;\n\t\treq->work.flags |= IO_WQ_WORK_CREDS;\n\t}\n\n\t/* same numerical values with corresponding REQ_F_*, safe to copy */\n\treq->flags |= sqe_flags;\n\n\tif (!io_op_defs[req->opcode].needs_file)\n\t\treturn 0;\n\n\tret = io_req_set_file(state, req, READ_ONCE(sqe->fd));\n\tstate->ios_left--;\n\treturn ret;\n}\n\nstatic int io_submit_sqes(struct io_ring_ctx *ctx, unsigned int nr)\n{\n\tstruct io_submit_state state;\n\tstruct io_kiocb *link = NULL;\n\tint i, submitted = 0;\n\n\t/* if we have a backlog and couldn't flush it all, return BUSY */\n\tif (test_bit(0, &ctx->sq_check_overflow)) {\n\t\tif (!list_empty(&ctx->cq_overflow_list) &&\n\t\t    !io_cqring_overflow_flush(ctx, false, NULL, NULL))\n\t\t\treturn -EBUSY;\n\t}\n\n\t/* make sure SQ entry isn't read before tail */\n\tnr = min3(nr, ctx->sq_entries, io_sqring_entries(ctx));\n\n\tif (!percpu_ref_tryget_many(&ctx->refs, nr))\n\t\treturn -EAGAIN;\n\n\tatomic_long_add(nr, &current->io_uring->req_issue);\n\trefcount_add(nr, &current->usage);\n\n\tio_submit_state_start(&state, ctx, nr);\n\n\tfor (i = 0; i < nr; i++) {\n\t\tconst struct io_uring_sqe *sqe;\n\t\tstruct io_kiocb *req;\n\t\tint err;\n\n\t\tsqe = io_get_sqe(ctx);\n\t\tif (unlikely(!sqe)) {\n\t\t\tio_consume_sqe(ctx);\n\t\t\tbreak;\n\t\t}\n\t\treq = io_alloc_req(ctx, &state);\n\t\tif (unlikely(!req)) {\n\t\t\tif (!submitted)\n\t\t\t\tsubmitted = -EAGAIN;\n\t\t\tbreak;\n\t\t}\n\t\tio_consume_sqe(ctx);\n\t\t/* will complete beyond this point, count as submitted */\n\t\tsubmitted++;\n\n\t\terr = io_init_req(ctx, req, sqe, &state);\n\t\tif (unlikely(err)) {\nfail_req:\n\t\t\tio_put_req(req);\n\t\t\tio_req_complete(req, err);\n\t\t\tbreak;\n\t\t}\n\n\t\ttrace_io_uring_submit_sqe(ctx, req->opcode, req->user_data,\n\t\t\t\t\t\ttrue, io_async_submit(ctx));\n\t\terr = io_submit_sqe(req, sqe, &link, &state.comp);\n\t\tif (err)\n\t\t\tgoto fail_req;\n\t}\n\n\tif (unlikely(submitted != nr)) {\n\t\tint ref_used = (submitted == -EAGAIN) ? 0 : submitted;\n\n\t\tpercpu_ref_put_many(&ctx->refs, nr - ref_used);\n\t\tatomic_long_sub(nr - ref_used, &current->io_uring->req_issue);\n\t\tput_task_struct_many(current, nr - ref_used);\n\t}\n\tif (link)\n\t\tio_queue_link_head(link, &state.comp);\n\tio_submit_state_end(&state);\n\n\t /* Commit SQ ring head once we've consumed and submitted all SQEs */\n\tio_commit_sqring(ctx);\n\n\treturn submitted;\n}\n\nstatic inline void io_ring_set_wakeup_flag(struct io_ring_ctx *ctx)\n{\n\t/* Tell userspace we may need a wakeup call */\n\tspin_lock_irq(&ctx->completion_lock);\n\tctx->rings->sq_flags |= IORING_SQ_NEED_WAKEUP;\n\tspin_unlock_irq(&ctx->completion_lock);\n}\n\nstatic inline void io_ring_clear_wakeup_flag(struct io_ring_ctx *ctx)\n{\n\tspin_lock_irq(&ctx->completion_lock);\n\tctx->rings->sq_flags &= ~IORING_SQ_NEED_WAKEUP;\n\tspin_unlock_irq(&ctx->completion_lock);\n}\n\nstatic int io_sq_wake_function(struct wait_queue_entry *wqe, unsigned mode,\n\t\t\t       int sync, void *key)\n{\n\tstruct io_ring_ctx *ctx = container_of(wqe, struct io_ring_ctx, sqo_wait_entry);\n\tint ret;\n\n\tret = autoremove_wake_function(wqe, mode, sync, key);\n\tif (ret) {\n\t\tunsigned long flags;\n\n\t\tspin_lock_irqsave(&ctx->completion_lock, flags);\n\t\tctx->rings->sq_flags &= ~IORING_SQ_NEED_WAKEUP;\n\t\tspin_unlock_irqrestore(&ctx->completion_lock, flags);\n\t}\n\treturn ret;\n}\n\nenum sq_ret {\n\tSQT_IDLE\t= 1,\n\tSQT_SPIN\t= 2,\n\tSQT_DID_WORK\t= 4,\n};\n\nstatic enum sq_ret __io_sq_thread(struct io_ring_ctx *ctx,\n\t\t\t\t  unsigned long start_jiffies, bool cap_entries)\n{\n\tunsigned long timeout = start_jiffies + ctx->sq_thread_idle;\n\tstruct io_sq_data *sqd = ctx->sq_data;\n\tunsigned int to_submit;\n\tint ret = 0;\n\nagain:\n\tif (!list_empty(&ctx->iopoll_list)) {\n\t\tunsigned nr_events = 0;\n\n\t\tmutex_lock(&ctx->uring_lock);\n\t\tif (!list_empty(&ctx->iopoll_list) && !need_resched())\n\t\t\tio_do_iopoll(ctx, &nr_events, 0);\n\t\tmutex_unlock(&ctx->uring_lock);\n\t}\n\n\tto_submit = io_sqring_entries(ctx);\n\n\t/*\n\t * If submit got -EBUSY, flag us as needing the application\n\t * to enter the kernel to reap and flush events.\n\t */\n\tif (!to_submit || ret == -EBUSY || need_resched()) {\n\t\t/*\n\t\t * Drop cur_mm before scheduling, we can't hold it for\n\t\t * long periods (or over schedule()). Do this before\n\t\t * adding ourselves to the waitqueue, as the unuse/drop\n\t\t * may sleep.\n\t\t */\n\t\tio_sq_thread_drop_mm();\n\n\t\t/*\n\t\t * We're polling. If we're within the defined idle\n\t\t * period, then let us spin without work before going\n\t\t * to sleep. The exception is if we got EBUSY doing\n\t\t * more IO, we should wait for the application to\n\t\t * reap events and wake us up.\n\t\t */\n\t\tif (!list_empty(&ctx->iopoll_list) || need_resched() ||\n\t\t    (!time_after(jiffies, timeout) && ret != -EBUSY &&\n\t\t    !percpu_ref_is_dying(&ctx->refs)))\n\t\t\treturn SQT_SPIN;\n\n\t\tprepare_to_wait(&sqd->wait, &ctx->sqo_wait_entry,\n\t\t\t\t\tTASK_INTERRUPTIBLE);\n\n\t\t/*\n\t\t * While doing polled IO, before going to sleep, we need\n\t\t * to check if there are new reqs added to iopoll_list,\n\t\t * it is because reqs may have been punted to io worker\n\t\t * and will be added to iopoll_list later, hence check\n\t\t * the iopoll_list again.\n\t\t */\n\t\tif ((ctx->flags & IORING_SETUP_IOPOLL) &&\n\t\t    !list_empty_careful(&ctx->iopoll_list)) {\n\t\t\tfinish_wait(&sqd->wait, &ctx->sqo_wait_entry);\n\t\t\tgoto again;\n\t\t}\n\n\t\tto_submit = io_sqring_entries(ctx);\n\t\tif (!to_submit || ret == -EBUSY)\n\t\t\treturn SQT_IDLE;\n\t}\n\n\tfinish_wait(&sqd->wait, &ctx->sqo_wait_entry);\n\tio_ring_clear_wakeup_flag(ctx);\n\n\t/* if we're handling multiple rings, cap submit size for fairness */\n\tif (cap_entries && to_submit > 8)\n\t\tto_submit = 8;\n\n\tmutex_lock(&ctx->uring_lock);\n\tif (likely(!percpu_ref_is_dying(&ctx->refs)))\n\t\tret = io_submit_sqes(ctx, to_submit);\n\tmutex_unlock(&ctx->uring_lock);\n\n\tif (!io_sqring_full(ctx) && wq_has_sleeper(&ctx->sqo_sq_wait))\n\t\twake_up(&ctx->sqo_sq_wait);\n\n\treturn SQT_DID_WORK;\n}\n\nstatic void io_sqd_init_new(struct io_sq_data *sqd)\n{\n\tstruct io_ring_ctx *ctx;\n\n\twhile (!list_empty(&sqd->ctx_new_list)) {\n\t\tctx = list_first_entry(&sqd->ctx_new_list, struct io_ring_ctx, sqd_list);\n\t\tinit_wait(&ctx->sqo_wait_entry);\n\t\tctx->sqo_wait_entry.func = io_sq_wake_function;\n\t\tlist_move_tail(&ctx->sqd_list, &sqd->ctx_list);\n\t\tcomplete(&ctx->sq_thread_comp);\n\t}\n}\n\nstatic int io_sq_thread(void *data)\n{\n\tstruct cgroup_subsys_state *cur_css = NULL;\n\tconst struct cred *old_cred = NULL;\n\tstruct io_sq_data *sqd = data;\n\tstruct io_ring_ctx *ctx;\n\tunsigned long start_jiffies;\n\n\tstart_jiffies = jiffies;\n\twhile (!kthread_should_stop()) {\n\t\tenum sq_ret ret = 0;\n\t\tbool cap_entries;\n\n\t\t/*\n\t\t * Any changes to the sqd lists are synchronized through the\n\t\t * kthread parking. This synchronizes the thread vs users,\n\t\t * the users are synchronized on the sqd->ctx_lock.\n\t\t */\n\t\tif (kthread_should_park())\n\t\t\tkthread_parkme();\n\n\t\tif (unlikely(!list_empty(&sqd->ctx_new_list)))\n\t\t\tio_sqd_init_new(sqd);\n\n\t\tcap_entries = !list_is_singular(&sqd->ctx_list);\n\n\t\tlist_for_each_entry(ctx, &sqd->ctx_list, sqd_list) {\n\t\t\tif (current->cred != ctx->creds) {\n\t\t\t\tif (old_cred)\n\t\t\t\t\trevert_creds(old_cred);\n\t\t\t\told_cred = override_creds(ctx->creds);\n\t\t\t}\n\t\t\tio_sq_thread_associate_blkcg(ctx, &cur_css);\n\n\t\t\tret |= __io_sq_thread(ctx, start_jiffies, cap_entries);\n\n\t\t\tio_sq_thread_drop_mm();\n\t\t}\n\n\t\tif (ret & SQT_SPIN) {\n\t\t\tio_run_task_work();\n\t\t\tcond_resched();\n\t\t} else if (ret == SQT_IDLE) {\n\t\t\tif (kthread_should_park())\n\t\t\t\tcontinue;\n\t\t\tlist_for_each_entry(ctx, &sqd->ctx_list, sqd_list)\n\t\t\t\tio_ring_set_wakeup_flag(ctx);\n\t\t\tschedule();\n\t\t\tstart_jiffies = jiffies;\n\t\t\tlist_for_each_entry(ctx, &sqd->ctx_list, sqd_list)\n\t\t\t\tio_ring_clear_wakeup_flag(ctx);\n\t\t}\n\t}\n\n\tio_run_task_work();\n\n\tif (cur_css)\n\t\tio_sq_thread_unassociate_blkcg();\n\tif (old_cred)\n\t\trevert_creds(old_cred);\n\n\tkthread_parkme();\n\n\treturn 0;\n}\n\nstruct io_wait_queue {\n\tstruct wait_queue_entry wq;\n\tstruct io_ring_ctx *ctx;\n\tunsigned to_wait;\n\tunsigned nr_timeouts;\n};\n\nstatic inline bool io_should_wake(struct io_wait_queue *iowq, bool noflush)\n{\n\tstruct io_ring_ctx *ctx = iowq->ctx;\n\n\t/*\n\t * Wake up if we have enough events, or if a timeout occurred since we\n\t * started waiting. For timeouts, we always want to return to userspace,\n\t * regardless of event count.\n\t */\n\treturn io_cqring_events(ctx, noflush) >= iowq->to_wait ||\n\t\t\tatomic_read(&ctx->cq_timeouts) != iowq->nr_timeouts;\n}\n\nstatic int io_wake_function(struct wait_queue_entry *curr, unsigned int mode,\n\t\t\t    int wake_flags, void *key)\n{\n\tstruct io_wait_queue *iowq = container_of(curr, struct io_wait_queue,\n\t\t\t\t\t\t\twq);\n\n\t/* use noflush == true, as we can't safely rely on locking context */\n\tif (!io_should_wake(iowq, true))\n\t\treturn -1;\n\n\treturn autoremove_wake_function(curr, mode, wake_flags, key);\n}\n\nstatic int io_run_task_work_sig(void)\n{\n\tif (io_run_task_work())\n\t\treturn 1;\n\tif (!signal_pending(current))\n\t\treturn 0;\n\tif (current->jobctl & JOBCTL_TASK_WORK) {\n\t\tspin_lock_irq(&current->sighand->siglock);\n\t\tcurrent->jobctl &= ~JOBCTL_TASK_WORK;\n\t\trecalc_sigpending();\n\t\tspin_unlock_irq(&current->sighand->siglock);\n\t\treturn 1;\n\t}\n\treturn -EINTR;\n}\n\n/*\n * Wait until events become available, if we don't already have some. The\n * application must reap them itself, as they reside on the shared cq ring.\n */\nstatic int io_cqring_wait(struct io_ring_ctx *ctx, int min_events,\n\t\t\t  const sigset_t __user *sig, size_t sigsz)\n{\n\tstruct io_wait_queue iowq = {\n\t\t.wq = {\n\t\t\t.private\t= current,\n\t\t\t.func\t\t= io_wake_function,\n\t\t\t.entry\t\t= LIST_HEAD_INIT(iowq.wq.entry),\n\t\t},\n\t\t.ctx\t\t= ctx,\n\t\t.to_wait\t= min_events,\n\t};\n\tstruct io_rings *rings = ctx->rings;\n\tint ret = 0;\n\n\tdo {\n\t\tif (io_cqring_events(ctx, false) >= min_events)\n\t\t\treturn 0;\n\t\tif (!io_run_task_work())\n\t\t\tbreak;\n\t} while (1);\n\n\tif (sig) {\n#ifdef CONFIG_COMPAT\n\t\tif (in_compat_syscall())\n\t\t\tret = set_compat_user_sigmask((const compat_sigset_t __user *)sig,\n\t\t\t\t\t\t      sigsz);\n\t\telse\n#endif\n\t\t\tret = set_user_sigmask(sig, sigsz);\n\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\tiowq.nr_timeouts = atomic_read(&ctx->cq_timeouts);\n\ttrace_io_uring_cqring_wait(ctx, min_events);\n\tdo {\n\t\tprepare_to_wait_exclusive(&ctx->wait, &iowq.wq,\n\t\t\t\t\t\tTASK_INTERRUPTIBLE);\n\t\t/* make sure we run task_work before checking for signals */\n\t\tret = io_run_task_work_sig();\n\t\tif (ret > 0)\n\t\t\tcontinue;\n\t\telse if (ret < 0)\n\t\t\tbreak;\n\t\tif (io_should_wake(&iowq, false))\n\t\t\tbreak;\n\t\tschedule();\n\t} while (1);\n\tfinish_wait(&ctx->wait, &iowq.wq);\n\n\trestore_saved_sigmask_unless(ret == -EINTR);\n\n\treturn READ_ONCE(rings->cq.head) == READ_ONCE(rings->cq.tail) ? ret : 0;\n}\n\nstatic void __io_sqe_files_unregister(struct io_ring_ctx *ctx)\n{\n#if defined(CONFIG_UNIX)\n\tif (ctx->ring_sock) {\n\t\tstruct sock *sock = ctx->ring_sock->sk;\n\t\tstruct sk_buff *skb;\n\n\t\twhile ((skb = skb_dequeue(&sock->sk_receive_queue)) != NULL)\n\t\t\tkfree_skb(skb);\n\t}\n#else\n\tint i;\n\n\tfor (i = 0; i < ctx->nr_user_files; i++) {\n\t\tstruct file *file;\n\n\t\tfile = io_file_from_index(ctx, i);\n\t\tif (file)\n\t\t\tfput(file);\n\t}\n#endif\n}\n\nstatic void io_file_ref_kill(struct percpu_ref *ref)\n{\n\tstruct fixed_file_data *data;\n\n\tdata = container_of(ref, struct fixed_file_data, refs);\n\tcomplete(&data->done);\n}\n\nstatic int io_sqe_files_unregister(struct io_ring_ctx *ctx)\n{\n\tstruct fixed_file_data *data = ctx->file_data;\n\tstruct fixed_file_ref_node *ref_node = NULL;\n\tunsigned nr_tables, i;\n\n\tif (!data)\n\t\treturn -ENXIO;\n\n\tspin_lock(&data->lock);\n\tif (!list_empty(&data->ref_list))\n\t\tref_node = list_first_entry(&data->ref_list,\n\t\t\t\tstruct fixed_file_ref_node, node);\n\tspin_unlock(&data->lock);\n\tif (ref_node)\n\t\tpercpu_ref_kill(&ref_node->refs);\n\n\tpercpu_ref_kill(&data->refs);\n\n\t/* wait for all refs nodes to complete */\n\tflush_delayed_work(&ctx->file_put_work);\n\twait_for_completion(&data->done);\n\n\t__io_sqe_files_unregister(ctx);\n\tnr_tables = DIV_ROUND_UP(ctx->nr_user_files, IORING_MAX_FILES_TABLE);\n\tfor (i = 0; i < nr_tables; i++)\n\t\tkfree(data->table[i].files);\n\tkfree(data->table);\n\tpercpu_ref_exit(&data->refs);\n\tkfree(data);\n\tctx->file_data = NULL;\n\tctx->nr_user_files = 0;\n\treturn 0;\n}\n\nstatic void io_put_sq_data(struct io_sq_data *sqd)\n{\n\tif (refcount_dec_and_test(&sqd->refs)) {\n\t\t/*\n\t\t * The park is a bit of a work-around, without it we get\n\t\t * warning spews on shutdown with SQPOLL set and affinity\n\t\t * set to a single CPU.\n\t\t */\n\t\tif (sqd->thread) {\n\t\t\tkthread_park(sqd->thread);\n\t\t\tkthread_stop(sqd->thread);\n\t\t}\n\n\t\tkfree(sqd);\n\t}\n}\n\nstatic struct io_sq_data *io_attach_sq_data(struct io_uring_params *p)\n{\n\tstruct io_ring_ctx *ctx_attach;\n\tstruct io_sq_data *sqd;\n\tstruct fd f;\n\n\tf = fdget(p->wq_fd);\n\tif (!f.file)\n\t\treturn ERR_PTR(-ENXIO);\n\tif (f.file->f_op != &io_uring_fops) {\n\t\tfdput(f);\n\t\treturn ERR_PTR(-EINVAL);\n\t}\n\n\tctx_attach = f.file->private_data;\n\tsqd = ctx_attach->sq_data;\n\tif (!sqd) {\n\t\tfdput(f);\n\t\treturn ERR_PTR(-EINVAL);\n\t}\n\n\trefcount_inc(&sqd->refs);\n\tfdput(f);\n\treturn sqd;\n}\n\nstatic struct io_sq_data *io_get_sq_data(struct io_uring_params *p)\n{\n\tstruct io_sq_data *sqd;\n\n\tif (p->flags & IORING_SETUP_ATTACH_WQ)\n\t\treturn io_attach_sq_data(p);\n\n\tsqd = kzalloc(sizeof(*sqd), GFP_KERNEL);\n\tif (!sqd)\n\t\treturn ERR_PTR(-ENOMEM);\n\n\trefcount_set(&sqd->refs, 1);\n\tINIT_LIST_HEAD(&sqd->ctx_list);\n\tINIT_LIST_HEAD(&sqd->ctx_new_list);\n\tmutex_init(&sqd->ctx_lock);\n\tmutex_init(&sqd->lock);\n\tinit_waitqueue_head(&sqd->wait);\n\treturn sqd;\n}\n\nstatic void io_sq_thread_unpark(struct io_sq_data *sqd)\n\t__releases(&sqd->lock)\n{\n\tif (!sqd->thread)\n\t\treturn;\n\tkthread_unpark(sqd->thread);\n\tmutex_unlock(&sqd->lock);\n}\n\nstatic void io_sq_thread_park(struct io_sq_data *sqd)\n\t__acquires(&sqd->lock)\n{\n\tif (!sqd->thread)\n\t\treturn;\n\tmutex_lock(&sqd->lock);\n\tkthread_park(sqd->thread);\n}\n\nstatic void io_sq_thread_stop(struct io_ring_ctx *ctx)\n{\n\tstruct io_sq_data *sqd = ctx->sq_data;\n\n\tif (sqd) {\n\t\tif (sqd->thread) {\n\t\t\t/*\n\t\t\t * We may arrive here from the error branch in\n\t\t\t * io_sq_offload_create() where the kthread is created\n\t\t\t * without being waked up, thus wake it up now to make\n\t\t\t * sure the wait will complete.\n\t\t\t */\n\t\t\twake_up_process(sqd->thread);\n\t\t\twait_for_completion(&ctx->sq_thread_comp);\n\n\t\t\tio_sq_thread_park(sqd);\n\t\t}\n\n\t\tmutex_lock(&sqd->ctx_lock);\n\t\tlist_del(&ctx->sqd_list);\n\t\tmutex_unlock(&sqd->ctx_lock);\n\n\t\tif (sqd->thread) {\n\t\t\tfinish_wait(&sqd->wait, &ctx->sqo_wait_entry);\n\t\t\tio_sq_thread_unpark(sqd);\n\t\t}\n\n\t\tio_put_sq_data(sqd);\n\t\tctx->sq_data = NULL;\n\t}\n}\n\nstatic void io_finish_async(struct io_ring_ctx *ctx)\n{\n\tio_sq_thread_stop(ctx);\n\n\tif (ctx->io_wq) {\n\t\tio_wq_destroy(ctx->io_wq);\n\t\tctx->io_wq = NULL;\n\t}\n}\n\n#if defined(CONFIG_UNIX)\n/*\n * Ensure the UNIX gc is aware of our file set, so we are certain that\n * the io_uring can be safely unregistered on process exit, even if we have\n * loops in the file referencing.\n */\nstatic int __io_sqe_files_scm(struct io_ring_ctx *ctx, int nr, int offset)\n{\n\tstruct sock *sk = ctx->ring_sock->sk;\n\tstruct scm_fp_list *fpl;\n\tstruct sk_buff *skb;\n\tint i, nr_files;\n\n\tfpl = kzalloc(sizeof(*fpl), GFP_KERNEL);\n\tif (!fpl)\n\t\treturn -ENOMEM;\n\n\tskb = alloc_skb(0, GFP_KERNEL);\n\tif (!skb) {\n\t\tkfree(fpl);\n\t\treturn -ENOMEM;\n\t}\n\n\tskb->sk = sk;\n\n\tnr_files = 0;\n\tfpl->user = get_uid(ctx->user);\n\tfor (i = 0; i < nr; i++) {\n\t\tstruct file *file = io_file_from_index(ctx, i + offset);\n\n\t\tif (!file)\n\t\t\tcontinue;\n\t\tfpl->fp[nr_files] = get_file(file);\n\t\tunix_inflight(fpl->user, fpl->fp[nr_files]);\n\t\tnr_files++;\n\t}\n\n\tif (nr_files) {\n\t\tfpl->max = SCM_MAX_FD;\n\t\tfpl->count = nr_files;\n\t\tUNIXCB(skb).fp = fpl;\n\t\tskb->destructor = unix_destruct_scm;\n\t\trefcount_add(skb->truesize, &sk->sk_wmem_alloc);\n\t\tskb_queue_head(&sk->sk_receive_queue, skb);\n\n\t\tfor (i = 0; i < nr_files; i++)\n\t\t\tfput(fpl->fp[i]);\n\t} else {\n\t\tkfree_skb(skb);\n\t\tkfree(fpl);\n\t}\n\n\treturn 0;\n}\n\n/*\n * If UNIX sockets are enabled, fd passing can cause a reference cycle which\n * causes regular reference counting to break down. We rely on the UNIX\n * garbage collection to take care of this problem for us.\n */\nstatic int io_sqe_files_scm(struct io_ring_ctx *ctx)\n{\n\tunsigned left, total;\n\tint ret = 0;\n\n\ttotal = 0;\n\tleft = ctx->nr_user_files;\n\twhile (left) {\n\t\tunsigned this_files = min_t(unsigned, left, SCM_MAX_FD);\n\n\t\tret = __io_sqe_files_scm(ctx, this_files, total);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tleft -= this_files;\n\t\ttotal += this_files;\n\t}\n\n\tif (!ret)\n\t\treturn 0;\n\n\twhile (total < ctx->nr_user_files) {\n\t\tstruct file *file = io_file_from_index(ctx, total);\n\n\t\tif (file)\n\t\t\tfput(file);\n\t\ttotal++;\n\t}\n\n\treturn ret;\n}\n#else\nstatic int io_sqe_files_scm(struct io_ring_ctx *ctx)\n{\n\treturn 0;\n}\n#endif\n\nstatic int io_sqe_alloc_file_tables(struct fixed_file_data *file_data,\n\t\t\t\t    unsigned nr_tables, unsigned nr_files)\n{\n\tint i;\n\n\tfor (i = 0; i < nr_tables; i++) {\n\t\tstruct fixed_file_table *table = &file_data->table[i];\n\t\tunsigned this_files;\n\n\t\tthis_files = min(nr_files, IORING_MAX_FILES_TABLE);\n\t\ttable->files = kcalloc(this_files, sizeof(struct file *),\n\t\t\t\t\tGFP_KERNEL);\n\t\tif (!table->files)\n\t\t\tbreak;\n\t\tnr_files -= this_files;\n\t}\n\n\tif (i == nr_tables)\n\t\treturn 0;\n\n\tfor (i = 0; i < nr_tables; i++) {\n\t\tstruct fixed_file_table *table = &file_data->table[i];\n\t\tkfree(table->files);\n\t}\n\treturn 1;\n}\n\nstatic void io_ring_file_put(struct io_ring_ctx *ctx, struct file *file)\n{\n#if defined(CONFIG_UNIX)\n\tstruct sock *sock = ctx->ring_sock->sk;\n\tstruct sk_buff_head list, *head = &sock->sk_receive_queue;\n\tstruct sk_buff *skb;\n\tint i;\n\n\t__skb_queue_head_init(&list);\n\n\t/*\n\t * Find the skb that holds this file in its SCM_RIGHTS. When found,\n\t * remove this entry and rearrange the file array.\n\t */\n\tskb = skb_dequeue(head);\n\twhile (skb) {\n\t\tstruct scm_fp_list *fp;\n\n\t\tfp = UNIXCB(skb).fp;\n\t\tfor (i = 0; i < fp->count; i++) {\n\t\t\tint left;\n\n\t\t\tif (fp->fp[i] != file)\n\t\t\t\tcontinue;\n\n\t\t\tunix_notinflight(fp->user, fp->fp[i]);\n\t\t\tleft = fp->count - 1 - i;\n\t\t\tif (left) {\n\t\t\t\tmemmove(&fp->fp[i], &fp->fp[i + 1],\n\t\t\t\t\t\tleft * sizeof(struct file *));\n\t\t\t}\n\t\t\tfp->count--;\n\t\t\tif (!fp->count) {\n\t\t\t\tkfree_skb(skb);\n\t\t\t\tskb = NULL;\n\t\t\t} else {\n\t\t\t\t__skb_queue_tail(&list, skb);\n\t\t\t}\n\t\t\tfput(file);\n\t\t\tfile = NULL;\n\t\t\tbreak;\n\t\t}\n\n\t\tif (!file)\n\t\t\tbreak;\n\n\t\t__skb_queue_tail(&list, skb);\n\n\t\tskb = skb_dequeue(head);\n\t}\n\n\tif (skb_peek(&list)) {\n\t\tspin_lock_irq(&head->lock);\n\t\twhile ((skb = __skb_dequeue(&list)) != NULL)\n\t\t\t__skb_queue_tail(head, skb);\n\t\tspin_unlock_irq(&head->lock);\n\t}\n#else\n\tfput(file);\n#endif\n}\n\nstruct io_file_put {\n\tstruct list_head list;\n\tstruct file *file;\n};\n\nstatic void __io_file_put_work(struct fixed_file_ref_node *ref_node)\n{\n\tstruct fixed_file_data *file_data = ref_node->file_data;\n\tstruct io_ring_ctx *ctx = file_data->ctx;\n\tstruct io_file_put *pfile, *tmp;\n\n\tlist_for_each_entry_safe(pfile, tmp, &ref_node->file_list, list) {\n\t\tlist_del(&pfile->list);\n\t\tio_ring_file_put(ctx, pfile->file);\n\t\tkfree(pfile);\n\t}\n\n\tspin_lock(&file_data->lock);\n\tlist_del(&ref_node->node);\n\tspin_unlock(&file_data->lock);\n\n\tpercpu_ref_exit(&ref_node->refs);\n\tkfree(ref_node);\n\tpercpu_ref_put(&file_data->refs);\n}\n\nstatic void io_file_put_work(struct work_struct *work)\n{\n\tstruct io_ring_ctx *ctx;\n\tstruct llist_node *node;\n\n\tctx = container_of(work, struct io_ring_ctx, file_put_work.work);\n\tnode = llist_del_all(&ctx->file_put_llist);\n\n\twhile (node) {\n\t\tstruct fixed_file_ref_node *ref_node;\n\t\tstruct llist_node *next = node->next;\n\n\t\tref_node = llist_entry(node, struct fixed_file_ref_node, llist);\n\t\t__io_file_put_work(ref_node);\n\t\tnode = next;\n\t}\n}\n\nstatic void io_file_data_ref_zero(struct percpu_ref *ref)\n{\n\tstruct fixed_file_ref_node *ref_node;\n\tstruct io_ring_ctx *ctx;\n\tbool first_add;\n\tint delay = HZ;\n\n\tref_node = container_of(ref, struct fixed_file_ref_node, refs);\n\tctx = ref_node->file_data->ctx;\n\n\tif (percpu_ref_is_dying(&ctx->file_data->refs))\n\t\tdelay = 0;\n\n\tfirst_add = llist_add(&ref_node->llist, &ctx->file_put_llist);\n\tif (!delay)\n\t\tmod_delayed_work(system_wq, &ctx->file_put_work, 0);\n\telse if (first_add)\n\t\tqueue_delayed_work(system_wq, &ctx->file_put_work, delay);\n}\n\nstatic struct fixed_file_ref_node *alloc_fixed_file_ref_node(\n\t\t\tstruct io_ring_ctx *ctx)\n{\n\tstruct fixed_file_ref_node *ref_node;\n\n\tref_node = kzalloc(sizeof(*ref_node), GFP_KERNEL);\n\tif (!ref_node)\n\t\treturn ERR_PTR(-ENOMEM);\n\n\tif (percpu_ref_init(&ref_node->refs, io_file_data_ref_zero,\n\t\t\t    0, GFP_KERNEL)) {\n\t\tkfree(ref_node);\n\t\treturn ERR_PTR(-ENOMEM);\n\t}\n\tINIT_LIST_HEAD(&ref_node->node);\n\tINIT_LIST_HEAD(&ref_node->file_list);\n\tref_node->file_data = ctx->file_data;\n\treturn ref_node;\n}\n\nstatic void destroy_fixed_file_ref_node(struct fixed_file_ref_node *ref_node)\n{\n\tpercpu_ref_exit(&ref_node->refs);\n\tkfree(ref_node);\n}\n\nstatic int io_sqe_files_register(struct io_ring_ctx *ctx, void __user *arg,\n\t\t\t\t unsigned nr_args)\n{\n\t__s32 __user *fds = (__s32 __user *) arg;\n\tunsigned nr_tables, i;\n\tstruct file *file;\n\tint fd, ret = -ENOMEM;\n\tstruct fixed_file_ref_node *ref_node;\n\tstruct fixed_file_data *file_data;\n\n\tif (ctx->file_data)\n\t\treturn -EBUSY;\n\tif (!nr_args)\n\t\treturn -EINVAL;\n\tif (nr_args > IORING_MAX_FIXED_FILES)\n\t\treturn -EMFILE;\n\n\tfile_data = kzalloc(sizeof(*ctx->file_data), GFP_KERNEL);\n\tif (!file_data)\n\t\treturn -ENOMEM;\n\tfile_data->ctx = ctx;\n\tinit_completion(&file_data->done);\n\tINIT_LIST_HEAD(&file_data->ref_list);\n\tspin_lock_init(&file_data->lock);\n\n\tnr_tables = DIV_ROUND_UP(nr_args, IORING_MAX_FILES_TABLE);\n\tfile_data->table = kcalloc(nr_tables, sizeof(*file_data->table),\n\t\t\t\t   GFP_KERNEL);\n\tif (!file_data->table)\n\t\tgoto out_free;\n\n\tif (percpu_ref_init(&file_data->refs, io_file_ref_kill,\n\t\t\t\tPERCPU_REF_ALLOW_REINIT, GFP_KERNEL))\n\t\tgoto out_free;\n\n\tif (io_sqe_alloc_file_tables(file_data, nr_tables, nr_args))\n\t\tgoto out_ref;\n\tctx->file_data = file_data;\n\n\tfor (i = 0; i < nr_args; i++, ctx->nr_user_files++) {\n\t\tstruct fixed_file_table *table;\n\t\tunsigned index;\n\n\t\tif (copy_from_user(&fd, &fds[i], sizeof(fd))) {\n\t\t\tret = -EFAULT;\n\t\t\tgoto out_fput;\n\t\t}\n\t\t/* allow sparse sets */\n\t\tif (fd == -1)\n\t\t\tcontinue;\n\n\t\tfile = fget(fd);\n\t\tret = -EBADF;\n\t\tif (!file)\n\t\t\tgoto out_fput;\n\n\t\t/*\n\t\t * Don't allow io_uring instances to be registered. If UNIX\n\t\t * isn't enabled, then this causes a reference cycle and this\n\t\t * instance can never get freed. If UNIX is enabled we'll\n\t\t * handle it just fine, but there's still no point in allowing\n\t\t * a ring fd as it doesn't support regular read/write anyway.\n\t\t */\n\t\tif (file->f_op == &io_uring_fops) {\n\t\t\tfput(file);\n\t\t\tgoto out_fput;\n\t\t}\n\t\ttable = &file_data->table[i >> IORING_FILE_TABLE_SHIFT];\n\t\tindex = i & IORING_FILE_TABLE_MASK;\n\t\ttable->files[index] = file;\n\t}\n\n\tret = io_sqe_files_scm(ctx);\n\tif (ret) {\n\t\tio_sqe_files_unregister(ctx);\n\t\treturn ret;\n\t}\n\n\tref_node = alloc_fixed_file_ref_node(ctx);\n\tif (IS_ERR(ref_node)) {\n\t\tio_sqe_files_unregister(ctx);\n\t\treturn PTR_ERR(ref_node);\n\t}\n\n\tfile_data->node = ref_node;\n\tspin_lock(&file_data->lock);\n\tlist_add(&ref_node->node, &file_data->ref_list);\n\tspin_unlock(&file_data->lock);\n\tpercpu_ref_get(&file_data->refs);\n\treturn ret;\nout_fput:\n\tfor (i = 0; i < ctx->nr_user_files; i++) {\n\t\tfile = io_file_from_index(ctx, i);\n\t\tif (file)\n\t\t\tfput(file);\n\t}\n\tfor (i = 0; i < nr_tables; i++)\n\t\tkfree(file_data->table[i].files);\n\tctx->nr_user_files = 0;\nout_ref:\n\tpercpu_ref_exit(&file_data->refs);\nout_free:\n\tkfree(file_data->table);\n\tkfree(file_data);\n\tctx->file_data = NULL;\n\treturn ret;\n}\n\nstatic int io_sqe_file_register(struct io_ring_ctx *ctx, struct file *file,\n\t\t\t\tint index)\n{\n#if defined(CONFIG_UNIX)\n\tstruct sock *sock = ctx->ring_sock->sk;\n\tstruct sk_buff_head *head = &sock->sk_receive_queue;\n\tstruct sk_buff *skb;\n\n\t/*\n\t * See if we can merge this file into an existing skb SCM_RIGHTS\n\t * file set. If there's no room, fall back to allocating a new skb\n\t * and filling it in.\n\t */\n\tspin_lock_irq(&head->lock);\n\tskb = skb_peek(head);\n\tif (skb) {\n\t\tstruct scm_fp_list *fpl = UNIXCB(skb).fp;\n\n\t\tif (fpl->count < SCM_MAX_FD) {\n\t\t\t__skb_unlink(skb, head);\n\t\t\tspin_unlock_irq(&head->lock);\n\t\t\tfpl->fp[fpl->count] = get_file(file);\n\t\t\tunix_inflight(fpl->user, fpl->fp[fpl->count]);\n\t\t\tfpl->count++;\n\t\t\tspin_lock_irq(&head->lock);\n\t\t\t__skb_queue_head(head, skb);\n\t\t} else {\n\t\t\tskb = NULL;\n\t\t}\n\t}\n\tspin_unlock_irq(&head->lock);\n\n\tif (skb) {\n\t\tfput(file);\n\t\treturn 0;\n\t}\n\n\treturn __io_sqe_files_scm(ctx, 1, index);\n#else\n\treturn 0;\n#endif\n}\n\nstatic int io_queue_file_removal(struct fixed_file_data *data,\n\t\t\t\t struct file *file)\n{\n\tstruct io_file_put *pfile;\n\tstruct fixed_file_ref_node *ref_node = data->node;\n\n\tpfile = kzalloc(sizeof(*pfile), GFP_KERNEL);\n\tif (!pfile)\n\t\treturn -ENOMEM;\n\n\tpfile->file = file;\n\tlist_add(&pfile->list, &ref_node->file_list);\n\n\treturn 0;\n}\n\nstatic int __io_sqe_files_update(struct io_ring_ctx *ctx,\n\t\t\t\t struct io_uring_files_update *up,\n\t\t\t\t unsigned nr_args)\n{\n\tstruct fixed_file_data *data = ctx->file_data;\n\tstruct fixed_file_ref_node *ref_node;\n\tstruct file *file;\n\t__s32 __user *fds;\n\tint fd, i, err;\n\t__u32 done;\n\tbool needs_switch = false;\n\n\tif (check_add_overflow(up->offset, nr_args, &done))\n\t\treturn -EOVERFLOW;\n\tif (done > ctx->nr_user_files)\n\t\treturn -EINVAL;\n\n\tref_node = alloc_fixed_file_ref_node(ctx);\n\tif (IS_ERR(ref_node))\n\t\treturn PTR_ERR(ref_node);\n\n\tdone = 0;\n\tfds = u64_to_user_ptr(up->fds);\n\twhile (nr_args) {\n\t\tstruct fixed_file_table *table;\n\t\tunsigned index;\n\n\t\terr = 0;\n\t\tif (copy_from_user(&fd, &fds[done], sizeof(fd))) {\n\t\t\terr = -EFAULT;\n\t\t\tbreak;\n\t\t}\n\t\ti = array_index_nospec(up->offset, ctx->nr_user_files);\n\t\ttable = &ctx->file_data->table[i >> IORING_FILE_TABLE_SHIFT];\n\t\tindex = i & IORING_FILE_TABLE_MASK;\n\t\tif (table->files[index]) {\n\t\t\tfile = table->files[index];\n\t\t\terr = io_queue_file_removal(data, file);\n\t\t\tif (err)\n\t\t\t\tbreak;\n\t\t\ttable->files[index] = NULL;\n\t\t\tneeds_switch = true;\n\t\t}\n\t\tif (fd != -1) {\n\t\t\tfile = fget(fd);\n\t\t\tif (!file) {\n\t\t\t\terr = -EBADF;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\t/*\n\t\t\t * Don't allow io_uring instances to be registered. If\n\t\t\t * UNIX isn't enabled, then this causes a reference\n\t\t\t * cycle and this instance can never get freed. If UNIX\n\t\t\t * is enabled we'll handle it just fine, but there's\n\t\t\t * still no point in allowing a ring fd as it doesn't\n\t\t\t * support regular read/write anyway.\n\t\t\t */\n\t\t\tif (file->f_op == &io_uring_fops) {\n\t\t\t\tfput(file);\n\t\t\t\terr = -EBADF;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\ttable->files[index] = file;\n\t\t\terr = io_sqe_file_register(ctx, file, i);\n\t\t\tif (err) {\n\t\t\t\ttable->files[index] = NULL;\n\t\t\t\tfput(file);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tnr_args--;\n\t\tdone++;\n\t\tup->offset++;\n\t}\n\n\tif (needs_switch) {\n\t\tpercpu_ref_kill(&data->node->refs);\n\t\tspin_lock(&data->lock);\n\t\tlist_add(&ref_node->node, &data->ref_list);\n\t\tdata->node = ref_node;\n\t\tspin_unlock(&data->lock);\n\t\tpercpu_ref_get(&ctx->file_data->refs);\n\t} else\n\t\tdestroy_fixed_file_ref_node(ref_node);\n\n\treturn done ? done : err;\n}\n\nstatic int io_sqe_files_update(struct io_ring_ctx *ctx, void __user *arg,\n\t\t\t       unsigned nr_args)\n{\n\tstruct io_uring_files_update up;\n\n\tif (!ctx->file_data)\n\t\treturn -ENXIO;\n\tif (!nr_args)\n\t\treturn -EINVAL;\n\tif (copy_from_user(&up, arg, sizeof(up)))\n\t\treturn -EFAULT;\n\tif (up.resv)\n\t\treturn -EINVAL;\n\n\treturn __io_sqe_files_update(ctx, &up, nr_args);\n}\n\nstatic void io_free_work(struct io_wq_work *work)\n{\n\tstruct io_kiocb *req = container_of(work, struct io_kiocb, work);\n\n\t/* Consider that io_steal_work() relies on this ref */\n\tio_put_req(req);\n}\n\nstatic int io_init_wq_offload(struct io_ring_ctx *ctx,\n\t\t\t      struct io_uring_params *p)\n{\n\tstruct io_wq_data data;\n\tstruct fd f;\n\tstruct io_ring_ctx *ctx_attach;\n\tunsigned int concurrency;\n\tint ret = 0;\n\n\tdata.user = ctx->user;\n\tdata.free_work = io_free_work;\n\tdata.do_work = io_wq_submit_work;\n\n\tif (!(p->flags & IORING_SETUP_ATTACH_WQ)) {\n\t\t/* Do QD, or 4 * CPUS, whatever is smallest */\n\t\tconcurrency = min(ctx->sq_entries, 4 * num_online_cpus());\n\n\t\tctx->io_wq = io_wq_create(concurrency, &data);\n\t\tif (IS_ERR(ctx->io_wq)) {\n\t\t\tret = PTR_ERR(ctx->io_wq);\n\t\t\tctx->io_wq = NULL;\n\t\t}\n\t\treturn ret;\n\t}\n\n\tf = fdget(p->wq_fd);\n\tif (!f.file)\n\t\treturn -EBADF;\n\n\tif (f.file->f_op != &io_uring_fops) {\n\t\tret = -EINVAL;\n\t\tgoto out_fput;\n\t}\n\n\tctx_attach = f.file->private_data;\n\t/* @io_wq is protected by holding the fd */\n\tif (!io_wq_get(ctx_attach->io_wq, &data)) {\n\t\tret = -EINVAL;\n\t\tgoto out_fput;\n\t}\n\n\tctx->io_wq = ctx_attach->io_wq;\nout_fput:\n\tfdput(f);\n\treturn ret;\n}\n\nstatic int io_uring_alloc_task_context(struct task_struct *task)\n{\n\tstruct io_uring_task *tctx;\n\n\ttctx = kmalloc(sizeof(*tctx), GFP_KERNEL);\n\tif (unlikely(!tctx))\n\t\treturn -ENOMEM;\n\n\txa_init(&tctx->xa);\n\tinit_waitqueue_head(&tctx->wait);\n\ttctx->last = NULL;\n\ttctx->in_idle = 0;\n\tatomic_long_set(&tctx->req_issue, 0);\n\tatomic_long_set(&tctx->req_complete, 0);\n\ttask->io_uring = tctx;\n\treturn 0;\n}\n\nvoid __io_uring_free(struct task_struct *tsk)\n{\n\tstruct io_uring_task *tctx = tsk->io_uring;\n\n\tWARN_ON_ONCE(!xa_empty(&tctx->xa));\n\tkfree(tctx);\n\ttsk->io_uring = NULL;\n}\n\nstatic int io_sq_offload_create(struct io_ring_ctx *ctx,\n\t\t\t\tstruct io_uring_params *p)\n{\n\tint ret;\n\n\tif (ctx->flags & IORING_SETUP_SQPOLL) {\n\t\tstruct io_sq_data *sqd;\n\n\t\tret = -EPERM;\n\t\tif (!capable(CAP_SYS_ADMIN))\n\t\t\tgoto err;\n\n\t\tsqd = io_get_sq_data(p);\n\t\tif (IS_ERR(sqd)) {\n\t\t\tret = PTR_ERR(sqd);\n\t\t\tgoto err;\n\t\t}\n\n\t\tctx->sq_data = sqd;\n\t\tio_sq_thread_park(sqd);\n\t\tmutex_lock(&sqd->ctx_lock);\n\t\tlist_add(&ctx->sqd_list, &sqd->ctx_new_list);\n\t\tmutex_unlock(&sqd->ctx_lock);\n\t\tio_sq_thread_unpark(sqd);\n\n\t\tctx->sq_thread_idle = msecs_to_jiffies(p->sq_thread_idle);\n\t\tif (!ctx->sq_thread_idle)\n\t\t\tctx->sq_thread_idle = HZ;\n\n\t\tif (sqd->thread)\n\t\t\tgoto done;\n\n\t\tif (p->flags & IORING_SETUP_SQ_AFF) {\n\t\t\tint cpu = p->sq_thread_cpu;\n\n\t\t\tret = -EINVAL;\n\t\t\tif (cpu >= nr_cpu_ids)\n\t\t\t\tgoto err;\n\t\t\tif (!cpu_online(cpu))\n\t\t\t\tgoto err;\n\n\t\t\tsqd->thread = kthread_create_on_cpu(io_sq_thread, sqd,\n\t\t\t\t\t\t\tcpu, \"io_uring-sq\");\n\t\t} else {\n\t\t\tsqd->thread = kthread_create(io_sq_thread, sqd,\n\t\t\t\t\t\t\t\"io_uring-sq\");\n\t\t}\n\t\tif (IS_ERR(sqd->thread)) {\n\t\t\tret = PTR_ERR(sqd->thread);\n\t\t\tsqd->thread = NULL;\n\t\t\tgoto err;\n\t\t}\n\t\tret = io_uring_alloc_task_context(sqd->thread);\n\t\tif (ret)\n\t\t\tgoto err;\n\t} else if (p->flags & IORING_SETUP_SQ_AFF) {\n\t\t/* Can't have SQ_AFF without SQPOLL */\n\t\tret = -EINVAL;\n\t\tgoto err;\n\t}\n\ndone:\n\tret = io_init_wq_offload(ctx, p);\n\tif (ret)\n\t\tgoto err;\n\n\treturn 0;\nerr:\n\tio_finish_async(ctx);\n\treturn ret;\n}\n\nstatic void io_sq_offload_start(struct io_ring_ctx *ctx)\n{\n\tstruct io_sq_data *sqd = ctx->sq_data;\n\n\tif ((ctx->flags & IORING_SETUP_SQPOLL) && sqd->thread)\n\t\twake_up_process(sqd->thread);\n}\n\nstatic inline void __io_unaccount_mem(struct user_struct *user,\n\t\t\t\t      unsigned long nr_pages)\n{\n\tatomic_long_sub(nr_pages, &user->locked_vm);\n}\n\nstatic inline int __io_account_mem(struct user_struct *user,\n\t\t\t\t   unsigned long nr_pages)\n{\n\tunsigned long page_limit, cur_pages, new_pages;\n\n\t/* Don't allow more pages than we can safely lock */\n\tpage_limit = rlimit(RLIMIT_MEMLOCK) >> PAGE_SHIFT;\n\n\tdo {\n\t\tcur_pages = atomic_long_read(&user->locked_vm);\n\t\tnew_pages = cur_pages + nr_pages;\n\t\tif (new_pages > page_limit)\n\t\t\treturn -ENOMEM;\n\t} while (atomic_long_cmpxchg(&user->locked_vm, cur_pages,\n\t\t\t\t\tnew_pages) != cur_pages);\n\n\treturn 0;\n}\n\nstatic void io_unaccount_mem(struct io_ring_ctx *ctx, unsigned long nr_pages,\n\t\t\t     enum io_mem_account acct)\n{\n\tif (ctx->limit_mem)\n\t\t__io_unaccount_mem(ctx->user, nr_pages);\n\n\tif (ctx->mm_account) {\n\t\tif (acct == ACCT_LOCKED)\n\t\t\tctx->mm_account->locked_vm -= nr_pages;\n\t\telse if (acct == ACCT_PINNED)\n\t\t\tatomic64_sub(nr_pages, &ctx->mm_account->pinned_vm);\n\t}\n}\n\nstatic int io_account_mem(struct io_ring_ctx *ctx, unsigned long nr_pages,\n\t\t\t  enum io_mem_account acct)\n{\n\tint ret;\n\n\tif (ctx->limit_mem) {\n\t\tret = __io_account_mem(ctx->user, nr_pages);\n\t\tif (ret)\n\t\t\treturn ret;\n\t}\n\n\tif (ctx->mm_account) {\n\t\tif (acct == ACCT_LOCKED)\n\t\t\tctx->mm_account->locked_vm += nr_pages;\n\t\telse if (acct == ACCT_PINNED)\n\t\t\tatomic64_add(nr_pages, &ctx->mm_account->pinned_vm);\n\t}\n\n\treturn 0;\n}\n\nstatic void io_mem_free(void *ptr)\n{\n\tstruct page *page;\n\n\tif (!ptr)\n\t\treturn;\n\n\tpage = virt_to_head_page(ptr);\n\tif (put_page_testzero(page))\n\t\tfree_compound_page(page);\n}\n\nstatic void *io_mem_alloc(size_t size)\n{\n\tgfp_t gfp_flags = GFP_KERNEL | __GFP_ZERO | __GFP_NOWARN | __GFP_COMP |\n\t\t\t\t__GFP_NORETRY;\n\n\treturn (void *) __get_free_pages(gfp_flags, get_order(size));\n}\n\nstatic unsigned long rings_size(unsigned sq_entries, unsigned cq_entries,\n\t\t\t\tsize_t *sq_offset)\n{\n\tstruct io_rings *rings;\n\tsize_t off, sq_array_size;\n\n\toff = struct_size(rings, cqes, cq_entries);\n\tif (off == SIZE_MAX)\n\t\treturn SIZE_MAX;\n\n#ifdef CONFIG_SMP\n\toff = ALIGN(off, SMP_CACHE_BYTES);\n\tif (off == 0)\n\t\treturn SIZE_MAX;\n#endif\n\n\tif (sq_offset)\n\t\t*sq_offset = off;\n\n\tsq_array_size = array_size(sizeof(u32), sq_entries);\n\tif (sq_array_size == SIZE_MAX)\n\t\treturn SIZE_MAX;\n\n\tif (check_add_overflow(off, sq_array_size, &off))\n\t\treturn SIZE_MAX;\n\n\treturn off;\n}\n\nstatic unsigned long ring_pages(unsigned sq_entries, unsigned cq_entries)\n{\n\tsize_t pages;\n\n\tpages = (size_t)1 << get_order(\n\t\trings_size(sq_entries, cq_entries, NULL));\n\tpages += (size_t)1 << get_order(\n\t\tarray_size(sizeof(struct io_uring_sqe), sq_entries));\n\n\treturn pages;\n}\n\nstatic int io_sqe_buffer_unregister(struct io_ring_ctx *ctx)\n{\n\tint i, j;\n\n\tif (!ctx->user_bufs)\n\t\treturn -ENXIO;\n\n\tfor (i = 0; i < ctx->nr_user_bufs; i++) {\n\t\tstruct io_mapped_ubuf *imu = &ctx->user_bufs[i];\n\n\t\tfor (j = 0; j < imu->nr_bvecs; j++)\n\t\t\tunpin_user_page(imu->bvec[j].bv_page);\n\n\t\tif (imu->acct_pages)\n\t\t\tio_unaccount_mem(ctx, imu->acct_pages, ACCT_PINNED);\n\t\tkvfree(imu->bvec);\n\t\timu->nr_bvecs = 0;\n\t}\n\n\tkfree(ctx->user_bufs);\n\tctx->user_bufs = NULL;\n\tctx->nr_user_bufs = 0;\n\treturn 0;\n}\n\nstatic int io_copy_iov(struct io_ring_ctx *ctx, struct iovec *dst,\n\t\t       void __user *arg, unsigned index)\n{\n\tstruct iovec __user *src;\n\n#ifdef CONFIG_COMPAT\n\tif (ctx->compat) {\n\t\tstruct compat_iovec __user *ciovs;\n\t\tstruct compat_iovec ciov;\n\n\t\tciovs = (struct compat_iovec __user *) arg;\n\t\tif (copy_from_user(&ciov, &ciovs[index], sizeof(ciov)))\n\t\t\treturn -EFAULT;\n\n\t\tdst->iov_base = u64_to_user_ptr((u64)ciov.iov_base);\n\t\tdst->iov_len = ciov.iov_len;\n\t\treturn 0;\n\t}\n#endif\n\tsrc = (struct iovec __user *) arg;\n\tif (copy_from_user(dst, &src[index], sizeof(*dst)))\n\t\treturn -EFAULT;\n\treturn 0;\n}\n\n/*\n * Not super efficient, but this is just a registration time. And we do cache\n * the last compound head, so generally we'll only do a full search if we don't\n * match that one.\n *\n * We check if the given compound head page has already been accounted, to\n * avoid double accounting it. This allows us to account the full size of the\n * page, not just the constituent pages of a huge page.\n */\nstatic bool headpage_already_acct(struct io_ring_ctx *ctx, struct page **pages,\n\t\t\t\t  int nr_pages, struct page *hpage)\n{\n\tint i, j;\n\n\t/* check current page array */\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tif (!PageCompound(pages[i]))\n\t\t\tcontinue;\n\t\tif (compound_head(pages[i]) == hpage)\n\t\t\treturn true;\n\t}\n\n\t/* check previously registered pages */\n\tfor (i = 0; i < ctx->nr_user_bufs; i++) {\n\t\tstruct io_mapped_ubuf *imu = &ctx->user_bufs[i];\n\n\t\tfor (j = 0; j < imu->nr_bvecs; j++) {\n\t\t\tif (!PageCompound(imu->bvec[j].bv_page))\n\t\t\t\tcontinue;\n\t\t\tif (compound_head(imu->bvec[j].bv_page) == hpage)\n\t\t\t\treturn true;\n\t\t}\n\t}\n\n\treturn false;\n}\n\nstatic int io_buffer_account_pin(struct io_ring_ctx *ctx, struct page **pages,\n\t\t\t\t int nr_pages, struct io_mapped_ubuf *imu,\n\t\t\t\t struct page **last_hpage)\n{\n\tint i, ret;\n\n\tfor (i = 0; i < nr_pages; i++) {\n\t\tif (!PageCompound(pages[i])) {\n\t\t\timu->acct_pages++;\n\t\t} else {\n\t\t\tstruct page *hpage;\n\n\t\t\thpage = compound_head(pages[i]);\n\t\t\tif (hpage == *last_hpage)\n\t\t\t\tcontinue;\n\t\t\t*last_hpage = hpage;\n\t\t\tif (headpage_already_acct(ctx, pages, i, hpage))\n\t\t\t\tcontinue;\n\t\t\timu->acct_pages += page_size(hpage) >> PAGE_SHIFT;\n\t\t}\n\t}\n\n\tif (!imu->acct_pages)\n\t\treturn 0;\n\n\tret = io_account_mem(ctx, imu->acct_pages, ACCT_PINNED);\n\tif (ret)\n\t\timu->acct_pages = 0;\n\treturn ret;\n}\n\nstatic int io_sqe_buffer_register(struct io_ring_ctx *ctx, void __user *arg,\n\t\t\t\t  unsigned nr_args)\n{\n\tstruct vm_area_struct **vmas = NULL;\n\tstruct page **pages = NULL;\n\tstruct page *last_hpage = NULL;\n\tint i, j, got_pages = 0;\n\tint ret = -EINVAL;\n\n\tif (ctx->user_bufs)\n\t\treturn -EBUSY;\n\tif (!nr_args || nr_args > UIO_MAXIOV)\n\t\treturn -EINVAL;\n\n\tctx->user_bufs = kcalloc(nr_args, sizeof(struct io_mapped_ubuf),\n\t\t\t\t\tGFP_KERNEL);\n\tif (!ctx->user_bufs)\n\t\treturn -ENOMEM;\n\n\tfor (i = 0; i < nr_args; i++) {\n\t\tstruct io_mapped_ubuf *imu = &ctx->user_bufs[i];\n\t\tunsigned long off, start, end, ubuf;\n\t\tint pret, nr_pages;\n\t\tstruct iovec iov;\n\t\tsize_t size;\n\n\t\tret = io_copy_iov(ctx, &iov, arg, i);\n\t\tif (ret)\n\t\t\tgoto err;\n\n\t\t/*\n\t\t * Don't impose further limits on the size and buffer\n\t\t * constraints here, we'll -EINVAL later when IO is\n\t\t * submitted if they are wrong.\n\t\t */\n\t\tret = -EFAULT;\n\t\tif (!iov.iov_base || !iov.iov_len)\n\t\t\tgoto err;\n\n\t\t/* arbitrary limit, but we need something */\n\t\tif (iov.iov_len > SZ_1G)\n\t\t\tgoto err;\n\n\t\tubuf = (unsigned long) iov.iov_base;\n\t\tend = (ubuf + iov.iov_len + PAGE_SIZE - 1) >> PAGE_SHIFT;\n\t\tstart = ubuf >> PAGE_SHIFT;\n\t\tnr_pages = end - start;\n\n\t\tret = 0;\n\t\tif (!pages || nr_pages > got_pages) {\n\t\t\tkvfree(vmas);\n\t\t\tkvfree(pages);\n\t\t\tpages = kvmalloc_array(nr_pages, sizeof(struct page *),\n\t\t\t\t\t\tGFP_KERNEL);\n\t\t\tvmas = kvmalloc_array(nr_pages,\n\t\t\t\t\tsizeof(struct vm_area_struct *),\n\t\t\t\t\tGFP_KERNEL);\n\t\t\tif (!pages || !vmas) {\n\t\t\t\tret = -ENOMEM;\n\t\t\t\tgoto err;\n\t\t\t}\n\t\t\tgot_pages = nr_pages;\n\t\t}\n\n\t\timu->bvec = kvmalloc_array(nr_pages, sizeof(struct bio_vec),\n\t\t\t\t\t\tGFP_KERNEL);\n\t\tret = -ENOMEM;\n\t\tif (!imu->bvec)\n\t\t\tgoto err;\n\n\t\tret = 0;\n\t\tmmap_read_lock(current->mm);\n\t\tpret = pin_user_pages(ubuf, nr_pages,\n\t\t\t\t      FOLL_WRITE | FOLL_LONGTERM,\n\t\t\t\t      pages, vmas);\n\t\tif (pret == nr_pages) {\n\t\t\t/* don't support file backed memory */\n\t\t\tfor (j = 0; j < nr_pages; j++) {\n\t\t\t\tstruct vm_area_struct *vma = vmas[j];\n\n\t\t\t\tif (vma->vm_file &&\n\t\t\t\t    !is_file_hugepages(vma->vm_file)) {\n\t\t\t\t\tret = -EOPNOTSUPP;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t}\n\t\t} else {\n\t\t\tret = pret < 0 ? pret : -EFAULT;\n\t\t}\n\t\tmmap_read_unlock(current->mm);\n\t\tif (ret) {\n\t\t\t/*\n\t\t\t * if we did partial map, or found file backed vmas,\n\t\t\t * release any pages we did get\n\t\t\t */\n\t\t\tif (pret > 0)\n\t\t\t\tunpin_user_pages(pages, pret);\n\t\t\tkvfree(imu->bvec);\n\t\t\tgoto err;\n\t\t}\n\n\t\tret = io_buffer_account_pin(ctx, pages, pret, imu, &last_hpage);\n\t\tif (ret) {\n\t\t\tunpin_user_pages(pages, pret);\n\t\t\tkvfree(imu->bvec);\n\t\t\tgoto err;\n\t\t}\n\n\t\toff = ubuf & ~PAGE_MASK;\n\t\tsize = iov.iov_len;\n\t\tfor (j = 0; j < nr_pages; j++) {\n\t\t\tsize_t vec_len;\n\n\t\t\tvec_len = min_t(size_t, size, PAGE_SIZE - off);\n\t\t\timu->bvec[j].bv_page = pages[j];\n\t\t\timu->bvec[j].bv_len = vec_len;\n\t\t\timu->bvec[j].bv_offset = off;\n\t\t\toff = 0;\n\t\t\tsize -= vec_len;\n\t\t}\n\t\t/* store original address for later verification */\n\t\timu->ubuf = ubuf;\n\t\timu->len = iov.iov_len;\n\t\timu->nr_bvecs = nr_pages;\n\n\t\tctx->nr_user_bufs++;\n\t}\n\tkvfree(pages);\n\tkvfree(vmas);\n\treturn 0;\nerr:\n\tkvfree(pages);\n\tkvfree(vmas);\n\tio_sqe_buffer_unregister(ctx);\n\treturn ret;\n}\n\nstatic int io_eventfd_register(struct io_ring_ctx *ctx, void __user *arg)\n{\n\t__s32 __user *fds = arg;\n\tint fd;\n\n\tif (ctx->cq_ev_fd)\n\t\treturn -EBUSY;\n\n\tif (copy_from_user(&fd, fds, sizeof(*fds)))\n\t\treturn -EFAULT;\n\n\tctx->cq_ev_fd = eventfd_ctx_fdget(fd);\n\tif (IS_ERR(ctx->cq_ev_fd)) {\n\t\tint ret = PTR_ERR(ctx->cq_ev_fd);\n\t\tctx->cq_ev_fd = NULL;\n\t\treturn ret;\n\t}\n\n\treturn 0;\n}\n\nstatic int io_eventfd_unregister(struct io_ring_ctx *ctx)\n{\n\tif (ctx->cq_ev_fd) {\n\t\teventfd_ctx_put(ctx->cq_ev_fd);\n\t\tctx->cq_ev_fd = NULL;\n\t\treturn 0;\n\t}\n\n\treturn -ENXIO;\n}\n\nstatic int __io_destroy_buffers(int id, void *p, void *data)\n{\n\tstruct io_ring_ctx *ctx = data;\n\tstruct io_buffer *buf = p;\n\n\t__io_remove_buffers(ctx, buf, id, -1U);\n\treturn 0;\n}\n\nstatic void io_destroy_buffers(struct io_ring_ctx *ctx)\n{\n\tidr_for_each(&ctx->io_buffer_idr, __io_destroy_buffers, ctx);\n\tidr_destroy(&ctx->io_buffer_idr);\n}\n\nstatic void io_ring_ctx_free(struct io_ring_ctx *ctx)\n{\n\tio_finish_async(ctx);\n\tio_sqe_buffer_unregister(ctx);\n\n\tif (ctx->sqo_task) {\n\t\tput_task_struct(ctx->sqo_task);\n\t\tctx->sqo_task = NULL;\n\t\tmmdrop(ctx->mm_account);\n\t\tctx->mm_account = NULL;\n\t}\n\n#ifdef CONFIG_BLK_CGROUP\n\tif (ctx->sqo_blkcg_css)\n\t\tcss_put(ctx->sqo_blkcg_css);\n#endif\n\n\tio_sqe_files_unregister(ctx);\n\tio_eventfd_unregister(ctx);\n\tio_destroy_buffers(ctx);\n\tidr_destroy(&ctx->personality_idr);\n\n#if defined(CONFIG_UNIX)\n\tif (ctx->ring_sock) {\n\t\tctx->ring_sock->file = NULL; /* so that iput() is called */\n\t\tsock_release(ctx->ring_sock);\n\t}\n#endif\n\n\tio_mem_free(ctx->rings);\n\tio_mem_free(ctx->sq_sqes);\n\n\tpercpu_ref_exit(&ctx->refs);\n\tfree_uid(ctx->user);\n\tput_cred(ctx->creds);\n\tkfree(ctx->cancel_hash);\n\tkmem_cache_free(req_cachep, ctx->fallback_req);\n\tkfree(ctx);\n}\n\nstatic __poll_t io_uring_poll(struct file *file, poll_table *wait)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\t__poll_t mask = 0;\n\n\tpoll_wait(file, &ctx->cq_wait, wait);\n\t/*\n\t * synchronizes with barrier from wq_has_sleeper call in\n\t * io_commit_cqring\n\t */\n\tsmp_rmb();\n\tif (!io_sqring_full(ctx))\n\t\tmask |= EPOLLOUT | EPOLLWRNORM;\n\tif (io_cqring_events(ctx, false))\n\t\tmask |= EPOLLIN | EPOLLRDNORM;\n\n\treturn mask;\n}\n\nstatic int io_uring_fasync(int fd, struct file *file, int on)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\n\treturn fasync_helper(fd, file, on, &ctx->cq_fasync);\n}\n\nstatic int io_remove_personalities(int id, void *p, void *data)\n{\n\tstruct io_ring_ctx *ctx = data;\n\tstruct io_identity *iod;\n\n\tiod = idr_remove(&ctx->personality_idr, id);\n\tif (iod) {\n\t\tput_cred(iod->creds);\n\t\tif (refcount_dec_and_test(&iod->count))\n\t\t\tkfree(iod);\n\t}\n\treturn 0;\n}\n\nstatic void io_ring_exit_work(struct work_struct *work)\n{\n\tstruct io_ring_ctx *ctx = container_of(work, struct io_ring_ctx,\n\t\t\t\t\t       exit_work);\n\n\t/*\n\t * If we're doing polled IO and end up having requests being\n\t * submitted async (out-of-line), then completions can come in while\n\t * we're waiting for refs to drop. We need to reap these manually,\n\t * as nobody else will be looking for them.\n\t */\n\tdo {\n\t\tif (ctx->rings)\n\t\t\tio_cqring_overflow_flush(ctx, true, NULL, NULL);\n\t\tio_iopoll_try_reap_events(ctx);\n\t} while (!wait_for_completion_timeout(&ctx->ref_comp, HZ/20));\n\tio_ring_ctx_free(ctx);\n}\n\nstatic void io_ring_ctx_wait_and_kill(struct io_ring_ctx *ctx)\n{\n\tmutex_lock(&ctx->uring_lock);\n\tpercpu_ref_kill(&ctx->refs);\n\tmutex_unlock(&ctx->uring_lock);\n\n\tio_kill_timeouts(ctx, NULL);\n\tio_poll_remove_all(ctx, NULL);\n\n\tif (ctx->io_wq)\n\t\tio_wq_cancel_all(ctx->io_wq);\n\n\t/* if we failed setting up the ctx, we might not have any rings */\n\tif (ctx->rings)\n\t\tio_cqring_overflow_flush(ctx, true, NULL, NULL);\n\tio_iopoll_try_reap_events(ctx);\n\tidr_for_each(&ctx->personality_idr, io_remove_personalities, ctx);\n\n\t/*\n\t * Do this upfront, so we won't have a grace period where the ring\n\t * is closed but resources aren't reaped yet. This can cause\n\t * spurious failure in setting up a new ring.\n\t */\n\tio_unaccount_mem(ctx, ring_pages(ctx->sq_entries, ctx->cq_entries),\n\t\t\t ACCT_LOCKED);\n\n\tINIT_WORK(&ctx->exit_work, io_ring_exit_work);\n\t/*\n\t * Use system_unbound_wq to avoid spawning tons of event kworkers\n\t * if we're exiting a ton of rings at the same time. It just adds\n\t * noise and overhead, there's no discernable change in runtime\n\t * over using system_wq.\n\t */\n\tqueue_work(system_unbound_wq, &ctx->exit_work);\n}\n\nstatic int io_uring_release(struct inode *inode, struct file *file)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\n\tfile->private_data = NULL;\n\tio_ring_ctx_wait_and_kill(ctx);\n\treturn 0;\n}\n\nstatic bool io_wq_files_match(struct io_wq_work *work, void *data)\n{\n\tstruct files_struct *files = data;\n\n\treturn !files || ((work->flags & IO_WQ_WORK_FILES) &&\n\t\t\t\twork->identity->files == files);\n}\n\n/*\n * Returns true if 'preq' is the link parent of 'req'\n */\nstatic bool io_match_link(struct io_kiocb *preq, struct io_kiocb *req)\n{\n\tstruct io_kiocb *link;\n\n\tif (!(preq->flags & REQ_F_LINK_HEAD))\n\t\treturn false;\n\n\tlist_for_each_entry(link, &preq->link_list, link_list) {\n\t\tif (link == req)\n\t\t\treturn true;\n\t}\n\n\treturn false;\n}\n\nstatic bool io_match_link_files(struct io_kiocb *req,\n\t\t\t\tstruct files_struct *files)\n{\n\tstruct io_kiocb *link;\n\n\tif (io_match_files(req, files))\n\t\treturn true;\n\tif (req->flags & REQ_F_LINK_HEAD) {\n\t\tlist_for_each_entry(link, &req->link_list, link_list) {\n\t\t\tif (io_match_files(link, files))\n\t\t\t\treturn true;\n\t\t}\n\t}\n\treturn false;\n}\n\n/*\n * We're looking to cancel 'req' because it's holding on to our files, but\n * 'req' could be a link to another request. See if it is, and cancel that\n * parent request if so.\n */\nstatic bool io_poll_remove_link(struct io_ring_ctx *ctx, struct io_kiocb *req)\n{\n\tstruct hlist_node *tmp;\n\tstruct io_kiocb *preq;\n\tbool found = false;\n\tint i;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tfor (i = 0; i < (1U << ctx->cancel_hash_bits); i++) {\n\t\tstruct hlist_head *list;\n\n\t\tlist = &ctx->cancel_hash[i];\n\t\thlist_for_each_entry_safe(preq, tmp, list, hash_node) {\n\t\t\tfound = io_match_link(preq, req);\n\t\t\tif (found) {\n\t\t\t\tio_poll_remove_one(preq);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn found;\n}\n\nstatic bool io_timeout_remove_link(struct io_ring_ctx *ctx,\n\t\t\t\t   struct io_kiocb *req)\n{\n\tstruct io_kiocb *preq;\n\tbool found = false;\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tlist_for_each_entry(preq, &ctx->timeout_list, timeout.list) {\n\t\tfound = io_match_link(preq, req);\n\t\tif (found) {\n\t\t\t__io_timeout_cancel(preq);\n\t\t\tbreak;\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\treturn found;\n}\n\nstatic bool io_cancel_link_cb(struct io_wq_work *work, void *data)\n{\n\treturn io_match_link(container_of(work, struct io_kiocb, work), data);\n}\n\nstatic void io_attempt_cancel(struct io_ring_ctx *ctx, struct io_kiocb *req)\n{\n\tenum io_wq_cancel cret;\n\n\t/* cancel this particular work, if it's running */\n\tcret = io_wq_cancel_work(ctx->io_wq, &req->work);\n\tif (cret != IO_WQ_CANCEL_NOTFOUND)\n\t\treturn;\n\n\t/* find links that hold this pending, cancel those */\n\tcret = io_wq_cancel_cb(ctx->io_wq, io_cancel_link_cb, req, true);\n\tif (cret != IO_WQ_CANCEL_NOTFOUND)\n\t\treturn;\n\n\t/* if we have a poll link holding this pending, cancel that */\n\tif (io_poll_remove_link(ctx, req))\n\t\treturn;\n\n\t/* final option, timeout link is holding this req pending */\n\tio_timeout_remove_link(ctx, req);\n}\n\nstatic void io_cancel_defer_files(struct io_ring_ctx *ctx,\n\t\t\t\t  struct files_struct *files)\n{\n\tstruct io_defer_entry *de = NULL;\n\tLIST_HEAD(list);\n\n\tspin_lock_irq(&ctx->completion_lock);\n\tlist_for_each_entry_reverse(de, &ctx->defer_list, list) {\n\t\tif (io_match_link_files(de->req, files)) {\n\t\t\tlist_cut_position(&list, &ctx->defer_list, &de->list);\n\t\t\tbreak;\n\t\t}\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\n\twhile (!list_empty(&list)) {\n\t\tde = list_first_entry(&list, struct io_defer_entry, list);\n\t\tlist_del_init(&de->list);\n\t\treq_set_fail_links(de->req);\n\t\tio_put_req(de->req);\n\t\tio_req_complete(de->req, -ECANCELED);\n\t\tkfree(de);\n\t}\n}\n\n/*\n * Returns true if we found and killed one or more files pinning requests\n */\nstatic bool io_uring_cancel_files(struct io_ring_ctx *ctx,\n\t\t\t\t  struct files_struct *files)\n{\n\tif (list_empty_careful(&ctx->inflight_list))\n\t\treturn false;\n\n\tio_cancel_defer_files(ctx, files);\n\t/* cancel all at once, should be faster than doing it one by one*/\n\tio_wq_cancel_cb(ctx->io_wq, io_wq_files_match, files, true);\n\n\twhile (!list_empty_careful(&ctx->inflight_list)) {\n\t\tstruct io_kiocb *cancel_req = NULL, *req;\n\t\tDEFINE_WAIT(wait);\n\n\t\tspin_lock_irq(&ctx->inflight_lock);\n\t\tlist_for_each_entry(req, &ctx->inflight_list, inflight_entry) {\n\t\t\tif (files && (req->work.flags & IO_WQ_WORK_FILES) &&\n\t\t\t    req->work.identity->files != files)\n\t\t\t\tcontinue;\n\t\t\t/* req is being completed, ignore */\n\t\t\tif (!refcount_inc_not_zero(&req->refs))\n\t\t\t\tcontinue;\n\t\t\tcancel_req = req;\n\t\t\tbreak;\n\t\t}\n\t\tif (cancel_req)\n\t\t\tprepare_to_wait(&ctx->inflight_wait, &wait,\n\t\t\t\t\t\tTASK_UNINTERRUPTIBLE);\n\t\tspin_unlock_irq(&ctx->inflight_lock);\n\n\t\t/* We need to keep going until we don't find a matching req */\n\t\tif (!cancel_req)\n\t\t\tbreak;\n\t\t/* cancel this request, or head link requests */\n\t\tio_attempt_cancel(ctx, cancel_req);\n\t\tio_put_req(cancel_req);\n\t\t/* cancellations _may_ trigger task work */\n\t\tio_run_task_work();\n\t\tschedule();\n\t\tfinish_wait(&ctx->inflight_wait, &wait);\n\t}\n\n\treturn true;\n}\n\nstatic bool io_cancel_task_cb(struct io_wq_work *work, void *data)\n{\n\tstruct io_kiocb *req = container_of(work, struct io_kiocb, work);\n\tstruct task_struct *task = data;\n\n\treturn io_task_match(req, task);\n}\n\nstatic bool __io_uring_cancel_task_requests(struct io_ring_ctx *ctx,\n\t\t\t\t\t    struct task_struct *task,\n\t\t\t\t\t    struct files_struct *files)\n{\n\tbool ret;\n\n\tret = io_uring_cancel_files(ctx, files);\n\tif (!files) {\n\t\tenum io_wq_cancel cret;\n\n\t\tcret = io_wq_cancel_cb(ctx->io_wq, io_cancel_task_cb, task, true);\n\t\tif (cret != IO_WQ_CANCEL_NOTFOUND)\n\t\t\tret = true;\n\n\t\t/* SQPOLL thread does its own polling */\n\t\tif (!(ctx->flags & IORING_SETUP_SQPOLL)) {\n\t\t\twhile (!list_empty_careful(&ctx->iopoll_list)) {\n\t\t\t\tio_iopoll_try_reap_events(ctx);\n\t\t\t\tret = true;\n\t\t\t}\n\t\t}\n\n\t\tret |= io_poll_remove_all(ctx, task);\n\t\tret |= io_kill_timeouts(ctx, task);\n\t}\n\n\treturn ret;\n}\n\n/*\n * We need to iteratively cancel requests, in case a request has dependent\n * hard links. These persist even for failure of cancelations, hence keep\n * looping until none are found.\n */\nstatic void io_uring_cancel_task_requests(struct io_ring_ctx *ctx,\n\t\t\t\t\t  struct files_struct *files)\n{\n\tstruct task_struct *task = current;\n\n\tif ((ctx->flags & IORING_SETUP_SQPOLL) && ctx->sq_data)\n\t\ttask = ctx->sq_data->thread;\n\n\tio_cqring_overflow_flush(ctx, true, task, files);\n\n\twhile (__io_uring_cancel_task_requests(ctx, task, files)) {\n\t\tio_run_task_work();\n\t\tcond_resched();\n\t}\n}\n\n/*\n * Note that this task has used io_uring. We use it for cancelation purposes.\n */\nstatic int io_uring_add_task_file(struct file *file)\n{\n\tstruct io_uring_task *tctx = current->io_uring;\n\n\tif (unlikely(!tctx)) {\n\t\tint ret;\n\n\t\tret = io_uring_alloc_task_context(current);\n\t\tif (unlikely(ret))\n\t\t\treturn ret;\n\t\ttctx = current->io_uring;\n\t}\n\tif (tctx->last != file) {\n\t\tvoid *old = xa_load(&tctx->xa, (unsigned long)file);\n\n\t\tif (!old) {\n\t\t\tget_file(file);\n\t\t\txa_store(&tctx->xa, (unsigned long)file, file, GFP_KERNEL);\n\t\t}\n\t\ttctx->last = file;\n\t}\n\n\treturn 0;\n}\n\n/*\n * Remove this io_uring_file -> task mapping.\n */\nstatic void io_uring_del_task_file(struct file *file)\n{\n\tstruct io_uring_task *tctx = current->io_uring;\n\n\tif (tctx->last == file)\n\t\ttctx->last = NULL;\n\tfile = xa_erase(&tctx->xa, (unsigned long)file);\n\tif (file)\n\t\tfput(file);\n}\n\nstatic void __io_uring_attempt_task_drop(struct file *file)\n{\n\tstruct file *old = xa_load(&current->io_uring->xa, (unsigned long)file);\n\n\tif (old == file)\n\t\tio_uring_del_task_file(file);\n}\n\n/*\n * Drop task note for this file if we're the only ones that hold it after\n * pending fput()\n */\nstatic void io_uring_attempt_task_drop(struct file *file, bool exiting)\n{\n\tif (!current->io_uring)\n\t\treturn;\n\t/*\n\t * fput() is pending, will be 2 if the only other ref is our potential\n\t * task file note. If the task is exiting, drop regardless of count.\n\t */\n\tif (!exiting && atomic_long_read(&file->f_count) != 2)\n\t\treturn;\n\n\t__io_uring_attempt_task_drop(file);\n}\n\nvoid __io_uring_files_cancel(struct files_struct *files)\n{\n\tstruct io_uring_task *tctx = current->io_uring;\n\tstruct file *file;\n\tunsigned long index;\n\n\t/* make sure overflow events are dropped */\n\ttctx->in_idle = true;\n\n\txa_for_each(&tctx->xa, index, file) {\n\t\tstruct io_ring_ctx *ctx = file->private_data;\n\n\t\tio_uring_cancel_task_requests(ctx, files);\n\t\tif (files)\n\t\t\tio_uring_del_task_file(file);\n\t}\n}\n\nstatic inline bool io_uring_task_idle(struct io_uring_task *tctx)\n{\n\treturn atomic_long_read(&tctx->req_issue) ==\n\t\tatomic_long_read(&tctx->req_complete);\n}\n\n/*\n * Find any io_uring fd that this task has registered or done IO on, and cancel\n * requests.\n */\nvoid __io_uring_task_cancel(void)\n{\n\tstruct io_uring_task *tctx = current->io_uring;\n\tDEFINE_WAIT(wait);\n\tlong completions;\n\n\t/* make sure overflow events are dropped */\n\ttctx->in_idle = true;\n\n\twhile (!io_uring_task_idle(tctx)) {\n\t\t/* read completions before cancelations */\n\t\tcompletions = atomic_long_read(&tctx->req_complete);\n\t\t__io_uring_files_cancel(NULL);\n\n\t\tprepare_to_wait(&tctx->wait, &wait, TASK_UNINTERRUPTIBLE);\n\n\t\t/*\n\t\t * If we've seen completions, retry. This avoids a race where\n\t\t * a completion comes in before we did prepare_to_wait().\n\t\t */\n\t\tif (completions != atomic_long_read(&tctx->req_complete))\n\t\t\tcontinue;\n\t\tif (io_uring_task_idle(tctx))\n\t\t\tbreak;\n\t\tschedule();\n\t}\n\n\tfinish_wait(&tctx->wait, &wait);\n\ttctx->in_idle = false;\n}\n\nstatic int io_uring_flush(struct file *file, void *data)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\n\t/*\n\t * If the task is going away, cancel work it may have pending\n\t */\n\tif (fatal_signal_pending(current) || (current->flags & PF_EXITING))\n\t\tdata = NULL;\n\n\tio_uring_cancel_task_requests(ctx, data);\n\tio_uring_attempt_task_drop(file, !data);\n\treturn 0;\n}\n\nstatic void *io_uring_validate_mmap_request(struct file *file,\n\t\t\t\t\t    loff_t pgoff, size_t sz)\n{\n\tstruct io_ring_ctx *ctx = file->private_data;\n\tloff_t offset = pgoff << PAGE_SHIFT;\n\tstruct page *page;\n\tvoid *ptr;\n\n\tswitch (offset) {\n\tcase IORING_OFF_SQ_RING:\n\tcase IORING_OFF_CQ_RING:\n\t\tptr = ctx->rings;\n\t\tbreak;\n\tcase IORING_OFF_SQES:\n\t\tptr = ctx->sq_sqes;\n\t\tbreak;\n\tdefault:\n\t\treturn ERR_PTR(-EINVAL);\n\t}\n\n\tpage = virt_to_head_page(ptr);\n\tif (sz > page_size(page))\n\t\treturn ERR_PTR(-EINVAL);\n\n\treturn ptr;\n}\n\n#ifdef CONFIG_MMU\n\nstatic int io_uring_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\tsize_t sz = vma->vm_end - vma->vm_start;\n\tunsigned long pfn;\n\tvoid *ptr;\n\n\tptr = io_uring_validate_mmap_request(file, vma->vm_pgoff, sz);\n\tif (IS_ERR(ptr))\n\t\treturn PTR_ERR(ptr);\n\n\tpfn = virt_to_phys(ptr) >> PAGE_SHIFT;\n\treturn remap_pfn_range(vma, vma->vm_start, pfn, sz, vma->vm_page_prot);\n}\n\n#else /* !CONFIG_MMU */\n\nstatic int io_uring_mmap(struct file *file, struct vm_area_struct *vma)\n{\n\treturn vma->vm_flags & (VM_SHARED | VM_MAYSHARE) ? 0 : -EINVAL;\n}\n\nstatic unsigned int io_uring_nommu_mmap_capabilities(struct file *file)\n{\n\treturn NOMMU_MAP_DIRECT | NOMMU_MAP_READ | NOMMU_MAP_WRITE;\n}\n\nstatic unsigned long io_uring_nommu_get_unmapped_area(struct file *file,\n\tunsigned long addr, unsigned long len,\n\tunsigned long pgoff, unsigned long flags)\n{\n\tvoid *ptr;\n\n\tptr = io_uring_validate_mmap_request(file, pgoff, len);\n\tif (IS_ERR(ptr))\n\t\treturn PTR_ERR(ptr);\n\n\treturn (unsigned long) ptr;\n}\n\n#endif /* !CONFIG_MMU */\n\nstatic void io_sqpoll_wait_sq(struct io_ring_ctx *ctx)\n{\n\tDEFINE_WAIT(wait);\n\n\tdo {\n\t\tif (!io_sqring_full(ctx))\n\t\t\tbreak;\n\n\t\tprepare_to_wait(&ctx->sqo_sq_wait, &wait, TASK_INTERRUPTIBLE);\n\n\t\tif (!io_sqring_full(ctx))\n\t\t\tbreak;\n\n\t\tschedule();\n\t} while (!signal_pending(current));\n\n\tfinish_wait(&ctx->sqo_sq_wait, &wait);\n}\n\nSYSCALL_DEFINE6(io_uring_enter, unsigned int, fd, u32, to_submit,\n\t\tu32, min_complete, u32, flags, const sigset_t __user *, sig,\n\t\tsize_t, sigsz)\n{\n\tstruct io_ring_ctx *ctx;\n\tlong ret = -EBADF;\n\tint submitted = 0;\n\tstruct fd f;\n\n\tio_run_task_work();\n\n\tif (flags & ~(IORING_ENTER_GETEVENTS | IORING_ENTER_SQ_WAKEUP |\n\t\t\tIORING_ENTER_SQ_WAIT))\n\t\treturn -EINVAL;\n\n\tf = fdget(fd);\n\tif (!f.file)\n\t\treturn -EBADF;\n\n\tret = -EOPNOTSUPP;\n\tif (f.file->f_op != &io_uring_fops)\n\t\tgoto out_fput;\n\n\tret = -ENXIO;\n\tctx = f.file->private_data;\n\tif (!percpu_ref_tryget(&ctx->refs))\n\t\tgoto out_fput;\n\n\tret = -EBADFD;\n\tif (ctx->flags & IORING_SETUP_R_DISABLED)\n\t\tgoto out;\n\n\t/*\n\t * For SQ polling, the thread will do all submissions and completions.\n\t * Just return the requested submit count, and wake the thread if\n\t * we were asked to.\n\t */\n\tret = 0;\n\tif (ctx->flags & IORING_SETUP_SQPOLL) {\n\t\tif (!list_empty_careful(&ctx->cq_overflow_list))\n\t\t\tio_cqring_overflow_flush(ctx, false, NULL, NULL);\n\t\tif (flags & IORING_ENTER_SQ_WAKEUP)\n\t\t\twake_up(&ctx->sq_data->wait);\n\t\tif (flags & IORING_ENTER_SQ_WAIT)\n\t\t\tio_sqpoll_wait_sq(ctx);\n\t\tsubmitted = to_submit;\n\t} else if (to_submit) {\n\t\tret = io_uring_add_task_file(f.file);\n\t\tif (unlikely(ret))\n\t\t\tgoto out;\n\t\tmutex_lock(&ctx->uring_lock);\n\t\tsubmitted = io_submit_sqes(ctx, to_submit);\n\t\tmutex_unlock(&ctx->uring_lock);\n\n\t\tif (submitted != to_submit)\n\t\t\tgoto out;\n\t}\n\tif (flags & IORING_ENTER_GETEVENTS) {\n\t\tmin_complete = min(min_complete, ctx->cq_entries);\n\n\t\t/*\n\t\t * When SETUP_IOPOLL and SETUP_SQPOLL are both enabled, user\n\t\t * space applications don't need to do io completion events\n\t\t * polling again, they can rely on io_sq_thread to do polling\n\t\t * work, which can reduce cpu usage and uring_lock contention.\n\t\t */\n\t\tif (ctx->flags & IORING_SETUP_IOPOLL &&\n\t\t    !(ctx->flags & IORING_SETUP_SQPOLL)) {\n\t\t\tret = io_iopoll_check(ctx, min_complete);\n\t\t} else {\n\t\t\tret = io_cqring_wait(ctx, min_complete, sig, sigsz);\n\t\t}\n\t}\n\nout:\n\tpercpu_ref_put(&ctx->refs);\nout_fput:\n\tfdput(f);\n\treturn submitted ? submitted : ret;\n}\n\n#ifdef CONFIG_PROC_FS\nstatic int io_uring_show_cred(int id, void *p, void *data)\n{\n\tconst struct cred *cred = p;\n\tstruct seq_file *m = data;\n\tstruct user_namespace *uns = seq_user_ns(m);\n\tstruct group_info *gi;\n\tkernel_cap_t cap;\n\tunsigned __capi;\n\tint g;\n\n\tseq_printf(m, \"%5d\\n\", id);\n\tseq_put_decimal_ull(m, \"\\tUid:\\t\", from_kuid_munged(uns, cred->uid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kuid_munged(uns, cred->euid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kuid_munged(uns, cred->suid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kuid_munged(uns, cred->fsuid));\n\tseq_put_decimal_ull(m, \"\\n\\tGid:\\t\", from_kgid_munged(uns, cred->gid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kgid_munged(uns, cred->egid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kgid_munged(uns, cred->sgid));\n\tseq_put_decimal_ull(m, \"\\t\\t\", from_kgid_munged(uns, cred->fsgid));\n\tseq_puts(m, \"\\n\\tGroups:\\t\");\n\tgi = cred->group_info;\n\tfor (g = 0; g < gi->ngroups; g++) {\n\t\tseq_put_decimal_ull(m, g ? \" \" : \"\",\n\t\t\t\t\tfrom_kgid_munged(uns, gi->gid[g]));\n\t}\n\tseq_puts(m, \"\\n\\tCapEff:\\t\");\n\tcap = cred->cap_effective;\n\tCAP_FOR_EACH_U32(__capi)\n\t\tseq_put_hex_ll(m, NULL, cap.cap[CAP_LAST_U32 - __capi], 8);\n\tseq_putc(m, '\\n');\n\treturn 0;\n}\n\nstatic void __io_uring_show_fdinfo(struct io_ring_ctx *ctx, struct seq_file *m)\n{\n\tstruct io_sq_data *sq = NULL;\n\tbool has_lock;\n\tint i;\n\n\t/*\n\t * Avoid ABBA deadlock between the seq lock and the io_uring mutex,\n\t * since fdinfo case grabs it in the opposite direction of normal use\n\t * cases. If we fail to get the lock, we just don't iterate any\n\t * structures that could be going away outside the io_uring mutex.\n\t */\n\thas_lock = mutex_trylock(&ctx->uring_lock);\n\n\tif (has_lock && (ctx->flags & IORING_SETUP_SQPOLL))\n\t\tsq = ctx->sq_data;\n\n\tseq_printf(m, \"SqThread:\\t%d\\n\", sq ? task_pid_nr(sq->thread) : -1);\n\tseq_printf(m, \"SqThreadCpu:\\t%d\\n\", sq ? task_cpu(sq->thread) : -1);\n\tseq_printf(m, \"UserFiles:\\t%u\\n\", ctx->nr_user_files);\n\tfor (i = 0; has_lock && i < ctx->nr_user_files; i++) {\n\t\tstruct fixed_file_table *table;\n\t\tstruct file *f;\n\n\t\ttable = &ctx->file_data->table[i >> IORING_FILE_TABLE_SHIFT];\n\t\tf = table->files[i & IORING_FILE_TABLE_MASK];\n\t\tif (f)\n\t\t\tseq_printf(m, \"%5u: %s\\n\", i, file_dentry(f)->d_iname);\n\t\telse\n\t\t\tseq_printf(m, \"%5u: <none>\\n\", i);\n\t}\n\tseq_printf(m, \"UserBufs:\\t%u\\n\", ctx->nr_user_bufs);\n\tfor (i = 0; has_lock && i < ctx->nr_user_bufs; i++) {\n\t\tstruct io_mapped_ubuf *buf = &ctx->user_bufs[i];\n\n\t\tseq_printf(m, \"%5u: 0x%llx/%u\\n\", i, buf->ubuf,\n\t\t\t\t\t\t(unsigned int) buf->len);\n\t}\n\tif (has_lock && !idr_is_empty(&ctx->personality_idr)) {\n\t\tseq_printf(m, \"Personalities:\\n\");\n\t\tidr_for_each(&ctx->personality_idr, io_uring_show_cred, m);\n\t}\n\tseq_printf(m, \"PollList:\\n\");\n\tspin_lock_irq(&ctx->completion_lock);\n\tfor (i = 0; i < (1U << ctx->cancel_hash_bits); i++) {\n\t\tstruct hlist_head *list = &ctx->cancel_hash[i];\n\t\tstruct io_kiocb *req;\n\n\t\thlist_for_each_entry(req, list, hash_node)\n\t\t\tseq_printf(m, \"  op=%d, task_works=%d\\n\", req->opcode,\n\t\t\t\t\treq->task->task_works != NULL);\n\t}\n\tspin_unlock_irq(&ctx->completion_lock);\n\tif (has_lock)\n\t\tmutex_unlock(&ctx->uring_lock);\n}\n\nstatic void io_uring_show_fdinfo(struct seq_file *m, struct file *f)\n{\n\tstruct io_ring_ctx *ctx = f->private_data;\n\n\tif (percpu_ref_tryget(&ctx->refs)) {\n\t\t__io_uring_show_fdinfo(ctx, m);\n\t\tpercpu_ref_put(&ctx->refs);\n\t}\n}\n#endif\n\nstatic const struct file_operations io_uring_fops = {\n\t.release\t= io_uring_release,\n\t.flush\t\t= io_uring_flush,\n\t.mmap\t\t= io_uring_mmap,\n#ifndef CONFIG_MMU\n\t.get_unmapped_area = io_uring_nommu_get_unmapped_area,\n\t.mmap_capabilities = io_uring_nommu_mmap_capabilities,\n#endif\n\t.poll\t\t= io_uring_poll,\n\t.fasync\t\t= io_uring_fasync,\n#ifdef CONFIG_PROC_FS\n\t.show_fdinfo\t= io_uring_show_fdinfo,\n#endif\n};\n\nstatic int io_allocate_scq_urings(struct io_ring_ctx *ctx,\n\t\t\t\t  struct io_uring_params *p)\n{\n\tstruct io_rings *rings;\n\tsize_t size, sq_array_offset;\n\n\t/* make sure these are sane, as we already accounted them */\n\tctx->sq_entries = p->sq_entries;\n\tctx->cq_entries = p->cq_entries;\n\n\tsize = rings_size(p->sq_entries, p->cq_entries, &sq_array_offset);\n\tif (size == SIZE_MAX)\n\t\treturn -EOVERFLOW;\n\n\trings = io_mem_alloc(size);\n\tif (!rings)\n\t\treturn -ENOMEM;\n\n\tctx->rings = rings;\n\tctx->sq_array = (u32 *)((char *)rings + sq_array_offset);\n\trings->sq_ring_mask = p->sq_entries - 1;\n\trings->cq_ring_mask = p->cq_entries - 1;\n\trings->sq_ring_entries = p->sq_entries;\n\trings->cq_ring_entries = p->cq_entries;\n\tctx->sq_mask = rings->sq_ring_mask;\n\tctx->cq_mask = rings->cq_ring_mask;\n\n\tsize = array_size(sizeof(struct io_uring_sqe), p->sq_entries);\n\tif (size == SIZE_MAX) {\n\t\tio_mem_free(ctx->rings);\n\t\tctx->rings = NULL;\n\t\treturn -EOVERFLOW;\n\t}\n\n\tctx->sq_sqes = io_mem_alloc(size);\n\tif (!ctx->sq_sqes) {\n\t\tio_mem_free(ctx->rings);\n\t\tctx->rings = NULL;\n\t\treturn -ENOMEM;\n\t}\n\n\treturn 0;\n}\n\n/*\n * Allocate an anonymous fd, this is what constitutes the application\n * visible backing of an io_uring instance. The application mmaps this\n * fd to gain access to the SQ/CQ ring details. If UNIX sockets are enabled,\n * we have to tie this fd to a socket for file garbage collection purposes.\n */\nstatic int io_uring_get_fd(struct io_ring_ctx *ctx)\n{\n\tstruct file *file;\n\tint ret;\n\n#if defined(CONFIG_UNIX)\n\tret = sock_create_kern(&init_net, PF_UNIX, SOCK_RAW, IPPROTO_IP,\n\t\t\t\t&ctx->ring_sock);\n\tif (ret)\n\t\treturn ret;\n#endif\n\n\tret = get_unused_fd_flags(O_RDWR | O_CLOEXEC);\n\tif (ret < 0)\n\t\tgoto err;\n\n\tfile = anon_inode_getfile(\"[io_uring]\", &io_uring_fops, ctx,\n\t\t\t\t\tO_RDWR | O_CLOEXEC);\n\tif (IS_ERR(file)) {\nerr_fd:\n\t\tput_unused_fd(ret);\n\t\tret = PTR_ERR(file);\n\t\tgoto err;\n\t}\n\n#if defined(CONFIG_UNIX)\n\tctx->ring_sock->file = file;\n#endif\n\tif (unlikely(io_uring_add_task_file(file))) {\n\t\tfile = ERR_PTR(-ENOMEM);\n\t\tgoto err_fd;\n\t}\n\tfd_install(ret, file);\n\treturn ret;\nerr:\n#if defined(CONFIG_UNIX)\n\tsock_release(ctx->ring_sock);\n\tctx->ring_sock = NULL;\n#endif\n\treturn ret;\n}\n\nstatic int io_uring_create(unsigned entries, struct io_uring_params *p,\n\t\t\t   struct io_uring_params __user *params)\n{\n\tstruct user_struct *user = NULL;\n\tstruct io_ring_ctx *ctx;\n\tbool limit_mem;\n\tint ret;\n\n\tif (!entries)\n\t\treturn -EINVAL;\n\tif (entries > IORING_MAX_ENTRIES) {\n\t\tif (!(p->flags & IORING_SETUP_CLAMP))\n\t\t\treturn -EINVAL;\n\t\tentries = IORING_MAX_ENTRIES;\n\t}\n\n\t/*\n\t * Use twice as many entries for the CQ ring. It's possible for the\n\t * application to drive a higher depth than the size of the SQ ring,\n\t * since the sqes are only used at submission time. This allows for\n\t * some flexibility in overcommitting a bit. If the application has\n\t * set IORING_SETUP_CQSIZE, it will have passed in the desired number\n\t * of CQ ring entries manually.\n\t */\n\tp->sq_entries = roundup_pow_of_two(entries);\n\tif (p->flags & IORING_SETUP_CQSIZE) {\n\t\t/*\n\t\t * If IORING_SETUP_CQSIZE is set, we do the same roundup\n\t\t * to a power-of-two, if it isn't already. We do NOT impose\n\t\t * any cq vs sq ring sizing.\n\t\t */\n\t\tif (p->cq_entries < p->sq_entries)\n\t\t\treturn -EINVAL;\n\t\tif (p->cq_entries > IORING_MAX_CQ_ENTRIES) {\n\t\t\tif (!(p->flags & IORING_SETUP_CLAMP))\n\t\t\t\treturn -EINVAL;\n\t\t\tp->cq_entries = IORING_MAX_CQ_ENTRIES;\n\t\t}\n\t\tp->cq_entries = roundup_pow_of_two(p->cq_entries);\n\t} else {\n\t\tp->cq_entries = 2 * p->sq_entries;\n\t}\n\n\tuser = get_uid(current_user());\n\tlimit_mem = !capable(CAP_IPC_LOCK);\n\n\tif (limit_mem) {\n\t\tret = __io_account_mem(user,\n\t\t\t\tring_pages(p->sq_entries, p->cq_entries));\n\t\tif (ret) {\n\t\t\tfree_uid(user);\n\t\t\treturn ret;\n\t\t}\n\t}\n\n\tctx = io_ring_ctx_alloc(p);\n\tif (!ctx) {\n\t\tif (limit_mem)\n\t\t\t__io_unaccount_mem(user, ring_pages(p->sq_entries,\n\t\t\t\t\t\t\t\tp->cq_entries));\n\t\tfree_uid(user);\n\t\treturn -ENOMEM;\n\t}\n\tctx->compat = in_compat_syscall();\n\tctx->user = user;\n\tctx->creds = get_current_cred();\n\n\tctx->sqo_task = get_task_struct(current);\n\n\t/*\n\t * This is just grabbed for accounting purposes. When a process exits,\n\t * the mm is exited and dropped before the files, hence we need to hang\n\t * on to this mm purely for the purposes of being able to unaccount\n\t * memory (locked/pinned vm). It's not used for anything else.\n\t */\n\tmmgrab(current->mm);\n\tctx->mm_account = current->mm;\n\n#ifdef CONFIG_BLK_CGROUP\n\t/*\n\t * The sq thread will belong to the original cgroup it was inited in.\n\t * If the cgroup goes offline (e.g. disabling the io controller), then\n\t * issued bios will be associated with the closest cgroup later in the\n\t * block layer.\n\t */\n\trcu_read_lock();\n\tctx->sqo_blkcg_css = blkcg_css();\n\tret = css_tryget_online(ctx->sqo_blkcg_css);\n\trcu_read_unlock();\n\tif (!ret) {\n\t\t/* don't init against a dying cgroup, have the user try again */\n\t\tctx->sqo_blkcg_css = NULL;\n\t\tret = -ENODEV;\n\t\tgoto err;\n\t}\n#endif\n\n\t/*\n\t * Account memory _before_ installing the file descriptor. Once\n\t * the descriptor is installed, it can get closed at any time. Also\n\t * do this before hitting the general error path, as ring freeing\n\t * will un-account as well.\n\t */\n\tio_account_mem(ctx, ring_pages(p->sq_entries, p->cq_entries),\n\t\t       ACCT_LOCKED);\n\tctx->limit_mem = limit_mem;\n\n\tret = io_allocate_scq_urings(ctx, p);\n\tif (ret)\n\t\tgoto err;\n\n\tret = io_sq_offload_create(ctx, p);\n\tif (ret)\n\t\tgoto err;\n\n\tif (!(p->flags & IORING_SETUP_R_DISABLED))\n\t\tio_sq_offload_start(ctx);\n\n\tmemset(&p->sq_off, 0, sizeof(p->sq_off));\n\tp->sq_off.head = offsetof(struct io_rings, sq.head);\n\tp->sq_off.tail = offsetof(struct io_rings, sq.tail);\n\tp->sq_off.ring_mask = offsetof(struct io_rings, sq_ring_mask);\n\tp->sq_off.ring_entries = offsetof(struct io_rings, sq_ring_entries);\n\tp->sq_off.flags = offsetof(struct io_rings, sq_flags);\n\tp->sq_off.dropped = offsetof(struct io_rings, sq_dropped);\n\tp->sq_off.array = (char *)ctx->sq_array - (char *)ctx->rings;\n\n\tmemset(&p->cq_off, 0, sizeof(p->cq_off));\n\tp->cq_off.head = offsetof(struct io_rings, cq.head);\n\tp->cq_off.tail = offsetof(struct io_rings, cq.tail);\n\tp->cq_off.ring_mask = offsetof(struct io_rings, cq_ring_mask);\n\tp->cq_off.ring_entries = offsetof(struct io_rings, cq_ring_entries);\n\tp->cq_off.overflow = offsetof(struct io_rings, cq_overflow);\n\tp->cq_off.cqes = offsetof(struct io_rings, cqes);\n\tp->cq_off.flags = offsetof(struct io_rings, cq_flags);\n\n\tp->features = IORING_FEAT_SINGLE_MMAP | IORING_FEAT_NODROP |\n\t\t\tIORING_FEAT_SUBMIT_STABLE | IORING_FEAT_RW_CUR_POS |\n\t\t\tIORING_FEAT_CUR_PERSONALITY | IORING_FEAT_FAST_POLL |\n\t\t\tIORING_FEAT_POLL_32BITS;\n\n\tif (copy_to_user(params, p, sizeof(*p))) {\n\t\tret = -EFAULT;\n\t\tgoto err;\n\t}\n\n\t/*\n\t * Install ring fd as the very last thing, so we don't risk someone\n\t * having closed it before we finish setup\n\t */\n\tret = io_uring_get_fd(ctx);\n\tif (ret < 0)\n\t\tgoto err;\n\n\ttrace_io_uring_create(ret, ctx, p->sq_entries, p->cq_entries, p->flags);\n\treturn ret;\nerr:\n\tio_ring_ctx_wait_and_kill(ctx);\n\treturn ret;\n}\n\n/*\n * Sets up an aio uring context, and returns the fd. Applications asks for a\n * ring size, we return the actual sq/cq ring sizes (among other things) in the\n * params structure passed in.\n */\nstatic long io_uring_setup(u32 entries, struct io_uring_params __user *params)\n{\n\tstruct io_uring_params p;\n\tint i;\n\n\tif (copy_from_user(&p, params, sizeof(p)))\n\t\treturn -EFAULT;\n\tfor (i = 0; i < ARRAY_SIZE(p.resv); i++) {\n\t\tif (p.resv[i])\n\t\t\treturn -EINVAL;\n\t}\n\n\tif (p.flags & ~(IORING_SETUP_IOPOLL | IORING_SETUP_SQPOLL |\n\t\t\tIORING_SETUP_SQ_AFF | IORING_SETUP_CQSIZE |\n\t\t\tIORING_SETUP_CLAMP | IORING_SETUP_ATTACH_WQ |\n\t\t\tIORING_SETUP_R_DISABLED))\n\t\treturn -EINVAL;\n\n\treturn  io_uring_create(entries, &p, params);\n}\n\nSYSCALL_DEFINE2(io_uring_setup, u32, entries,\n\t\tstruct io_uring_params __user *, params)\n{\n\treturn io_uring_setup(entries, params);\n}\n\nstatic int io_probe(struct io_ring_ctx *ctx, void __user *arg, unsigned nr_args)\n{\n\tstruct io_uring_probe *p;\n\tsize_t size;\n\tint i, ret;\n\n\tsize = struct_size(p, ops, nr_args);\n\tif (size == SIZE_MAX)\n\t\treturn -EOVERFLOW;\n\tp = kzalloc(size, GFP_KERNEL);\n\tif (!p)\n\t\treturn -ENOMEM;\n\n\tret = -EFAULT;\n\tif (copy_from_user(p, arg, size))\n\t\tgoto out;\n\tret = -EINVAL;\n\tif (memchr_inv(p, 0, size))\n\t\tgoto out;\n\n\tp->last_op = IORING_OP_LAST - 1;\n\tif (nr_args > IORING_OP_LAST)\n\t\tnr_args = IORING_OP_LAST;\n\n\tfor (i = 0; i < nr_args; i++) {\n\t\tp->ops[i].op = i;\n\t\tif (!io_op_defs[i].not_supported)\n\t\t\tp->ops[i].flags = IO_URING_OP_SUPPORTED;\n\t}\n\tp->ops_len = i;\n\n\tret = 0;\n\tif (copy_to_user(arg, p, size))\n\t\tret = -EFAULT;\nout:\n\tkfree(p);\n\treturn ret;\n}\n\nstatic int io_register_personality(struct io_ring_ctx *ctx)\n{\n\tstruct io_identity *id;\n\tint ret;\n\n\tid = kmalloc(sizeof(*id), GFP_KERNEL);\n\tif (unlikely(!id))\n\t\treturn -ENOMEM;\n\n\tio_init_identity(id);\n\tid->creds = get_current_cred();\n\n\tret = idr_alloc_cyclic(&ctx->personality_idr, id, 1, USHRT_MAX, GFP_KERNEL);\n\tif (ret < 0) {\n\t\tput_cred(id->creds);\n\t\tkfree(id);\n\t}\n\treturn ret;\n}\n\nstatic int io_unregister_personality(struct io_ring_ctx *ctx, unsigned id)\n{\n\tstruct io_identity *iod;\n\n\tiod = idr_remove(&ctx->personality_idr, id);\n\tif (iod) {\n\t\tput_cred(iod->creds);\n\t\tif (refcount_dec_and_test(&iod->count))\n\t\t\tkfree(iod);\n\t\treturn 0;\n\t}\n\n\treturn -EINVAL;\n}\n\nstatic int io_register_restrictions(struct io_ring_ctx *ctx, void __user *arg,\n\t\t\t\t    unsigned int nr_args)\n{\n\tstruct io_uring_restriction *res;\n\tsize_t size;\n\tint i, ret;\n\n\t/* Restrictions allowed only if rings started disabled */\n\tif (!(ctx->flags & IORING_SETUP_R_DISABLED))\n\t\treturn -EBADFD;\n\n\t/* We allow only a single restrictions registration */\n\tif (ctx->restrictions.registered)\n\t\treturn -EBUSY;\n\n\tif (!arg || nr_args > IORING_MAX_RESTRICTIONS)\n\t\treturn -EINVAL;\n\n\tsize = array_size(nr_args, sizeof(*res));\n\tif (size == SIZE_MAX)\n\t\treturn -EOVERFLOW;\n\n\tres = memdup_user(arg, size);\n\tif (IS_ERR(res))\n\t\treturn PTR_ERR(res);\n\n\tret = 0;\n\n\tfor (i = 0; i < nr_args; i++) {\n\t\tswitch (res[i].opcode) {\n\t\tcase IORING_RESTRICTION_REGISTER_OP:\n\t\t\tif (res[i].register_op >= IORING_REGISTER_LAST) {\n\t\t\t\tret = -EINVAL;\n\t\t\t\tgoto out;\n\t\t\t}\n\n\t\t\t__set_bit(res[i].register_op,\n\t\t\t\t  ctx->restrictions.register_op);\n\t\t\tbreak;\n\t\tcase IORING_RESTRICTION_SQE_OP:\n\t\t\tif (res[i].sqe_op >= IORING_OP_LAST) {\n\t\t\t\tret = -EINVAL;\n\t\t\t\tgoto out;\n\t\t\t}\n\n\t\t\t__set_bit(res[i].sqe_op, ctx->restrictions.sqe_op);\n\t\t\tbreak;\n\t\tcase IORING_RESTRICTION_SQE_FLAGS_ALLOWED:\n\t\t\tctx->restrictions.sqe_flags_allowed = res[i].sqe_flags;\n\t\t\tbreak;\n\t\tcase IORING_RESTRICTION_SQE_FLAGS_REQUIRED:\n\t\t\tctx->restrictions.sqe_flags_required = res[i].sqe_flags;\n\t\t\tbreak;\n\t\tdefault:\n\t\t\tret = -EINVAL;\n\t\t\tgoto out;\n\t\t}\n\t}\n\nout:\n\t/* Reset all restrictions if an error happened */\n\tif (ret != 0)\n\t\tmemset(&ctx->restrictions, 0, sizeof(ctx->restrictions));\n\telse\n\t\tctx->restrictions.registered = true;\n\n\tkfree(res);\n\treturn ret;\n}\n\nstatic int io_register_enable_rings(struct io_ring_ctx *ctx)\n{\n\tif (!(ctx->flags & IORING_SETUP_R_DISABLED))\n\t\treturn -EBADFD;\n\n\tif (ctx->restrictions.registered)\n\t\tctx->restricted = 1;\n\n\tctx->flags &= ~IORING_SETUP_R_DISABLED;\n\n\tio_sq_offload_start(ctx);\n\n\treturn 0;\n}\n\nstatic bool io_register_op_must_quiesce(int op)\n{\n\tswitch (op) {\n\tcase IORING_UNREGISTER_FILES:\n\tcase IORING_REGISTER_FILES_UPDATE:\n\tcase IORING_REGISTER_PROBE:\n\tcase IORING_REGISTER_PERSONALITY:\n\tcase IORING_UNREGISTER_PERSONALITY:\n\t\treturn false;\n\tdefault:\n\t\treturn true;\n\t}\n}\n\nstatic int __io_uring_register(struct io_ring_ctx *ctx, unsigned opcode,\n\t\t\t       void __user *arg, unsigned nr_args)\n\t__releases(ctx->uring_lock)\n\t__acquires(ctx->uring_lock)\n{\n\tint ret;\n\n\t/*\n\t * We're inside the ring mutex, if the ref is already dying, then\n\t * someone else killed the ctx or is already going through\n\t * io_uring_register().\n\t */\n\tif (percpu_ref_is_dying(&ctx->refs))\n\t\treturn -ENXIO;\n\n\tif (io_register_op_must_quiesce(opcode)) {\n\t\tpercpu_ref_kill(&ctx->refs);\n\n\t\t/*\n\t\t * Drop uring mutex before waiting for references to exit. If\n\t\t * another thread is currently inside io_uring_enter() it might\n\t\t * need to grab the uring_lock to make progress. If we hold it\n\t\t * here across the drain wait, then we can deadlock. It's safe\n\t\t * to drop the mutex here, since no new references will come in\n\t\t * after we've killed the percpu ref.\n\t\t */\n\t\tmutex_unlock(&ctx->uring_lock);\n\t\tdo {\n\t\t\tret = wait_for_completion_interruptible(&ctx->ref_comp);\n\t\t\tif (!ret)\n\t\t\t\tbreak;\n\t\t\tret = io_run_task_work_sig();\n\t\t\tif (ret < 0)\n\t\t\t\tbreak;\n\t\t} while (1);\n\n\t\tmutex_lock(&ctx->uring_lock);\n\n\t\tif (ret) {\n\t\t\tpercpu_ref_resurrect(&ctx->refs);\n\t\t\tgoto out_quiesce;\n\t\t}\n\t}\n\n\tif (ctx->restricted) {\n\t\tif (opcode >= IORING_REGISTER_LAST) {\n\t\t\tret = -EINVAL;\n\t\t\tgoto out;\n\t\t}\n\n\t\tif (!test_bit(opcode, ctx->restrictions.register_op)) {\n\t\t\tret = -EACCES;\n\t\t\tgoto out;\n\t\t}\n\t}\n\n\tswitch (opcode) {\n\tcase IORING_REGISTER_BUFFERS:\n\t\tret = io_sqe_buffer_register(ctx, arg, nr_args);\n\t\tbreak;\n\tcase IORING_UNREGISTER_BUFFERS:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_sqe_buffer_unregister(ctx);\n\t\tbreak;\n\tcase IORING_REGISTER_FILES:\n\t\tret = io_sqe_files_register(ctx, arg, nr_args);\n\t\tbreak;\n\tcase IORING_UNREGISTER_FILES:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_sqe_files_unregister(ctx);\n\t\tbreak;\n\tcase IORING_REGISTER_FILES_UPDATE:\n\t\tret = io_sqe_files_update(ctx, arg, nr_args);\n\t\tbreak;\n\tcase IORING_REGISTER_EVENTFD:\n\tcase IORING_REGISTER_EVENTFD_ASYNC:\n\t\tret = -EINVAL;\n\t\tif (nr_args != 1)\n\t\t\tbreak;\n\t\tret = io_eventfd_register(ctx, arg);\n\t\tif (ret)\n\t\t\tbreak;\n\t\tif (opcode == IORING_REGISTER_EVENTFD_ASYNC)\n\t\t\tctx->eventfd_async = 1;\n\t\telse\n\t\t\tctx->eventfd_async = 0;\n\t\tbreak;\n\tcase IORING_UNREGISTER_EVENTFD:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_eventfd_unregister(ctx);\n\t\tbreak;\n\tcase IORING_REGISTER_PROBE:\n\t\tret = -EINVAL;\n\t\tif (!arg || nr_args > 256)\n\t\t\tbreak;\n\t\tret = io_probe(ctx, arg, nr_args);\n\t\tbreak;\n\tcase IORING_REGISTER_PERSONALITY:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_register_personality(ctx);\n\t\tbreak;\n\tcase IORING_UNREGISTER_PERSONALITY:\n\t\tret = -EINVAL;\n\t\tif (arg)\n\t\t\tbreak;\n\t\tret = io_unregister_personality(ctx, nr_args);\n\t\tbreak;\n\tcase IORING_REGISTER_ENABLE_RINGS:\n\t\tret = -EINVAL;\n\t\tif (arg || nr_args)\n\t\t\tbreak;\n\t\tret = io_register_enable_rings(ctx);\n\t\tbreak;\n\tcase IORING_REGISTER_RESTRICTIONS:\n\t\tret = io_register_restrictions(ctx, arg, nr_args);\n\t\tbreak;\n\tdefault:\n\t\tret = -EINVAL;\n\t\tbreak;\n\t}\n\nout:\n\tif (io_register_op_must_quiesce(opcode)) {\n\t\t/* bring the ctx back to life */\n\t\tpercpu_ref_reinit(&ctx->refs);\nout_quiesce:\n\t\treinit_completion(&ctx->ref_comp);\n\t}\n\treturn ret;\n}\n\nSYSCALL_DEFINE4(io_uring_register, unsigned int, fd, unsigned int, opcode,\n\t\tvoid __user *, arg, unsigned int, nr_args)\n{\n\tstruct io_ring_ctx *ctx;\n\tlong ret = -EBADF;\n\tstruct fd f;\n\n\tf = fdget(fd);\n\tif (!f.file)\n\t\treturn -EBADF;\n\n\tret = -EOPNOTSUPP;\n\tif (f.file->f_op != &io_uring_fops)\n\t\tgoto out_fput;\n\n\tctx = f.file->private_data;\n\n\tmutex_lock(&ctx->uring_lock);\n\tret = __io_uring_register(ctx, opcode, arg, nr_args);\n\tmutex_unlock(&ctx->uring_lock);\n\ttrace_io_uring_register(ctx, opcode, ctx->nr_user_files, ctx->nr_user_bufs,\n\t\t\t\t\t\t\tctx->cq_ev_fd != NULL, ret);\nout_fput:\n\tfdput(f);\n\treturn ret;\n}\n\nstatic int __init io_uring_init(void)\n{\n#define __BUILD_BUG_VERIFY_ELEMENT(stype, eoffset, etype, ename) do { \\\n\tBUILD_BUG_ON(offsetof(stype, ename) != eoffset); \\\n\tBUILD_BUG_ON(sizeof(etype) != sizeof_field(stype, ename)); \\\n} while (0)\n\n#define BUILD_BUG_SQE_ELEM(eoffset, etype, ename) \\\n\t__BUILD_BUG_VERIFY_ELEMENT(struct io_uring_sqe, eoffset, etype, ename)\n\tBUILD_BUG_ON(sizeof(struct io_uring_sqe) != 64);\n\tBUILD_BUG_SQE_ELEM(0,  __u8,   opcode);\n\tBUILD_BUG_SQE_ELEM(1,  __u8,   flags);\n\tBUILD_BUG_SQE_ELEM(2,  __u16,  ioprio);\n\tBUILD_BUG_SQE_ELEM(4,  __s32,  fd);\n\tBUILD_BUG_SQE_ELEM(8,  __u64,  off);\n\tBUILD_BUG_SQE_ELEM(8,  __u64,  addr2);\n\tBUILD_BUG_SQE_ELEM(16, __u64,  addr);\n\tBUILD_BUG_SQE_ELEM(16, __u64,  splice_off_in);\n\tBUILD_BUG_SQE_ELEM(24, __u32,  len);\n\tBUILD_BUG_SQE_ELEM(28,     __kernel_rwf_t, rw_flags);\n\tBUILD_BUG_SQE_ELEM(28, /* compat */   int, rw_flags);\n\tBUILD_BUG_SQE_ELEM(28, /* compat */ __u32, rw_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  fsync_flags);\n\tBUILD_BUG_SQE_ELEM(28, /* compat */ __u16,  poll_events);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  poll32_events);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  sync_range_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  msg_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  timeout_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  accept_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  cancel_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  open_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  statx_flags);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  fadvise_advice);\n\tBUILD_BUG_SQE_ELEM(28, __u32,  splice_flags);\n\tBUILD_BUG_SQE_ELEM(32, __u64,  user_data);\n\tBUILD_BUG_SQE_ELEM(40, __u16,  buf_index);\n\tBUILD_BUG_SQE_ELEM(42, __u16,  personality);\n\tBUILD_BUG_SQE_ELEM(44, __s32,  splice_fd_in);\n\n\tBUILD_BUG_ON(ARRAY_SIZE(io_op_defs) != IORING_OP_LAST);\n\tBUILD_BUG_ON(__REQ_F_LAST_BIT >= 8 * sizeof(int));\n\treq_cachep = KMEM_CACHE(io_kiocb, SLAB_HWCACHE_ALIGN | SLAB_PANIC);\n\treturn 0;\n};\n__initcall(io_uring_init);\n", "/* SPDX-License-Identifier: GPL-2.0-or-later */\n#ifndef _LINUX_IO_URING_H\n#define _LINUX_IO_URING_H\n\n#include <linux/sched.h>\n#include <linux/xarray.h>\n\nstruct io_identity {\n\tstruct files_struct\t\t*files;\n\tstruct mm_struct\t\t*mm;\n#ifdef CONFIG_BLK_CGROUP\n\tstruct cgroup_subsys_state\t*blkcg_css;\n#endif\n\tconst struct cred\t\t*creds;\n\tstruct nsproxy\t\t\t*nsproxy;\n\tstruct fs_struct\t\t*fs;\n\tunsigned long\t\t\tfsize;\n\trefcount_t\t\t\tcount;\n};\n\nstruct io_uring_task {\n\t/* submission side */\n\tstruct xarray\t\txa;\n\tstruct wait_queue_head\twait;\n\tstruct file\t\t*last;\n\tatomic_long_t\t\treq_issue;\n\n\t/* completion side */\n\tbool\t\t\tin_idle ____cacheline_aligned_in_smp;\n\tatomic_long_t\t\treq_complete;\n};\n\n#if defined(CONFIG_IO_URING)\nstruct sock *io_uring_get_socket(struct file *file);\nvoid __io_uring_task_cancel(void);\nvoid __io_uring_files_cancel(struct files_struct *files);\nvoid __io_uring_free(struct task_struct *tsk);\n\nstatic inline void io_uring_task_cancel(void)\n{\n\tif (current->io_uring && !xa_empty(&current->io_uring->xa))\n\t\t__io_uring_task_cancel();\n}\nstatic inline void io_uring_files_cancel(struct files_struct *files)\n{\n\tif (current->io_uring && !xa_empty(&current->io_uring->xa))\n\t\t__io_uring_files_cancel(files);\n}\nstatic inline void io_uring_free(struct task_struct *tsk)\n{\n\tif (tsk->io_uring)\n\t\t__io_uring_free(tsk);\n}\n#else\nstatic inline struct sock *io_uring_get_socket(struct file *file)\n{\n\treturn NULL;\n}\nstatic inline void io_uring_task_cancel(void)\n{\n}\nstatic inline void io_uring_files_cancel(struct files_struct *files)\n{\n}\nstatic inline void io_uring_free(struct task_struct *tsk)\n{\n}\n#endif\n\n#endif\n"], "filenames": ["fs/io_uring.c", "include/linux/io_uring.h"], "buggy_code_start_loc": [1043, 17], "buggy_code_end_loc": [9265, 17], "fixing_code_start_loc": [1044, 18], "fixing_code_end_loc": [9383, 19], "type": "CWE-416", "message": "There is a logic error in io_uring's implementation which can be used to trigger a use-after-free vulnerability leading to privilege escalation. In the io_prep_async_work function the assumption that the last io_grab_identity call cannot return false is not true, and in this case the function will use the init_cred or the previous linked requests identity to do operations instead of using the current identity. This can lead to reference counting issues causing use-after-free. We recommend upgrading past version 5.10.161.", "other": {"cve": {"id": "CVE-2023-0240", "sourceIdentifier": "cve-coordination@google.com", "published": "2023-01-30T14:15:10.403", "lastModified": "2023-02-06T21:48:48.243", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "There is a logic error in io_uring's implementation which can be used to trigger a use-after-free vulnerability leading to privilege escalation. In the io_prep_async_work function the assumption that the last io_grab_identity call cannot return false is not true, and in this case the function will use the init_cred or the previous linked requests identity to do operations instead of using the current identity. This can lead to reference counting issues causing use-after-free. We recommend upgrading past version 5.10.161."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}, {"source": "cve-coordination@google.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:L/AC:L/PR:L/UI:N/S:U/C:H/I:H/A:H", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.8, "impactScore": 5.9}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-416"}]}, {"source": "cve-coordination@google.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-416"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:linux:linux_kernel:*:*:*:*:*:*:*:*", "versionEndExcluding": "5.10", "matchCriteriaId": "D61CA62B-157A-4415-B8FD-7C3C1208315D"}]}]}], "references": [{"url": "https://git.kernel.org/pub/scm/linux/kernel/git/stable/linux.git/commit/io_uring?h=linux-5.10.y&id=788d0824269bef539fe31a785b1517882eafed93", "source": "cve-coordination@google.com", "tags": ["Mailing List", "Patch", "Vendor Advisory"]}, {"url": "https://github.com/gregkh/linux/commit/1e6fa5216a0e59ef02e8b6b40d553238a3b81d49", "source": "cve-coordination@google.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://kernel.dance/#788d0824269bef539fe31a785b1517882eafed93", "source": "cve-coordination@google.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/gregkh/linux/commit/1e6fa5216a0e59ef02e8b6b40d553238a3b81d49"}}