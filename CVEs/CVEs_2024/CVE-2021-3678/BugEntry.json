{"buggy_code": ["<?php\nnamespace Api\\Controller;\nuse Think\\Controller;\nclass AdminSettingController extends BaseController {\n\n    //\u4fdd\u5b58\u914d\u7f6e\n    public function saveConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $register_open = intval(I(\"register_open\")) ;\n        $history_version_count = intval(I(\"history_version_count\")) ;\n        $oss_open = intval(I(\"oss_open\")) ;\n        $home_page = intval(I(\"home_page\")) ;\n        $home_item = intval(I(\"home_item\")) ;\n        $oss_setting = I(\"oss_setting\") ;\n        D(\"Options\")->set(\"history_version_count\" ,$history_version_count) ;\n        D(\"Options\")->set(\"register_open\" ,$register_open) ;\n        D(\"Options\")->set(\"home_page\" ,$home_page) ;\n        D(\"Options\")->set(\"home_item\" ,$home_item) ;\n        \n        if ($oss_open) {\n            $this->checkComposerPHPVersion();\n            D(\"Options\")->set(\"oss_setting\" , json_encode( $oss_setting)) ;\n        }\n        D(\"Options\")->set(\"oss_open\" ,$oss_open) ;\n\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7d\u914d\u7f6e\n    public function loadConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $oss_open = D(\"Options\")->get(\"oss_open\" ) ;\n        $register_open = D(\"Options\")->get(\"register_open\" ) ;\n        $history_version_count = D(\"Options\")->get(\"history_version_count\" ) ;\n        $oss_setting = D(\"Options\")->get(\"oss_setting\" ) ;\n        $home_page = D(\"Options\")->get(\"home_page\" ) ;\n        $home_item = D(\"Options\")->get(\"home_item\" ) ;\n        $ldap_form = json_decode($ldap_form,1);\n        $oss_setting = json_decode($oss_setting,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"oss_open\"=>$oss_open ,\n                \"register_open\"=>$register_open ,\n                \"history_version_count\"=>$history_version_count ,\n                \"home_page\"=>$home_page ,\n                \"home_item\"=>$home_item ,\n                \"oss_setting\"=>$oss_setting ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    //\u4fdd\u5b58Ldap\u914d\u7f6e\n    public function saveLdapConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $ldap_open = intval(I(\"ldap_open\")) ;\n        $ldap_form = I(\"ldap_form\") ;\n        \n        if ($ldap_open) {\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            if( !extension_loaded( 'ldap' ) ) {\n               $this->sendError(10011,\"\u4f60\u5c1a\u672a\u5b89\u88c5php-ldap\u6269\u5c55\u3002\u5982\u679c\u662f\u666e\u901aPHP\u73af\u5883\uff0c\u8bf7\u624b\u52a8\u5b89\u88c5\u4e4b\u3002\u5982\u679c\u662f\u4f7f\u7528\u4e4b\u524d\u5b98\u65b9docker\u955c\u50cf\uff0c\u5219\u9700\u8981\u91cd\u65b0\u5b89\u88c5\u955c\u50cf\u3002\u65b9\u6cd5\u662f\uff1a\u5907\u4efd /showdoc_data \u6574\u4e2a\u76ee\u5f55\uff0c\u7136\u540e\u5168\u65b0\u5b89\u88c5showdoc\uff0c\u63a5\u7740\u7528\u5907\u4efd\u8986\u76d6/showdoc_data \u3002\u7136\u540e\u9012\u5f52\u8d4b\u4e88777\u53ef\u5199\u6743\u9650\u3002\");\n               return ;\n            }\n\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               $this->sendError(10011,\"Can't connect to LDAP server\");\n               return ;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               $this->sendError(10011,\"Can't bind to LDAP server\");\n               return ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            \n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                if (!$ldap_user) {\n                    continue ;\n                }\n                //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                if(!D(\"User\")->isExist($ldap_user)){\n                    D(\"User\")->register($ldap_user,$ldap_user.time());\n                }\n            }\n            D(\"Options\")->set(\"ldap_form\" , json_encode( $ldap_form)) ;\n        }\n        D(\"Options\")->set(\"ldap_open\" ,$ldap_open) ;\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7dLdap\u914d\u7f6e\n    public function loadLdapConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n        $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n        $ldap_form = json_decode($ldap_form,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"ldap_open\"=>$ldap_open ,\n                \"ldap_form\"=>$ldap_form ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    //\u4fdd\u5b58Oauth2\u914d\u7f6e\n    public function saveOauth2Config(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $this->checkComposerPHPVersion();\n        $oauth2_open = intval(I(\"oauth2_open\")) ;\n        $oauth2_form = I(\"oauth2_form\") ;\n        D(\"Options\")->set(\"oauth2_form\" , json_encode( $oauth2_form)) ;\n        D(\"Options\")->set(\"oauth2_open\" ,$oauth2_open) ;\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7dOauth2\u914d\u7f6e\n    public function loadOauth2Config(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $oauth2_open = D(\"Options\")->get(\"oauth2_open\" ) ;\n        $oauth2_form = D(\"Options\")->get(\"oauth2_form\" ) ;\n        $oauth2_form = json_decode($oauth2_form,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"oauth2_open\"=>$oauth2_open ,\n                \"oauth2_form\"=>$oauth2_form ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    public function getLoginSecretKey(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $login_secret_key = D(\"Options\")->get(\"login_secret_key\") ;\n        if(!$login_secret_key){\n            $login_secret_key = md5(\"rgrsfsrfsrf\".time().rand(1,9000000000000000).uniqid());\n            D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\n        }\n        $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\n\n    }\n\n    public function resetLoginSecretKey(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $login_secret_key = md5(\"rgrsfsrfsrf\".time().rand(1,9000000000000000).uniqid());\n        D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\n        $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\n\n    }\n\n\n    public function checkLdapLogin(){\n            $username = 'admin';\n            $password = '123456';\n\n            $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n            $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n            $ldap_form = json_decode($ldap_form,1);\n            if (!$ldap_open) {\n                return ;\n            }\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               $this->sendError(10011,\"Can't connect to LDAP server\");\n               return ;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               $this->sendError(10011,\"Can't bind to LDAP server\");\n               return ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                $dn = $data[$i][\"dn\"] ;\n                if ($ldap_user == $username) {\n                    //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                    $userInfo = D(\"User\")->isExist($username) ;\n                    if(!$userInfo){\n                        D(\"User\")->register($ldap_user,$ldap_user.time());\n                    }\n                    $rs2=ldap_bind($ldap_conn, $dn , $password);\n                    if ($rs2) {\n                       D(\"User\")->updatePwd($userInfo['uid'], $password);\n                       $this->sendResult(array());\n                       return ;\n                    }\n                }\n            }\n           $this->sendError(10011,\"\u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u9519\u8bef\");\n    }\n\n}"], "fixing_code": ["<?php\nnamespace Api\\Controller;\nuse Think\\Controller;\nclass AdminSettingController extends BaseController {\n\n    //\u4fdd\u5b58\u914d\u7f6e\n    public function saveConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $register_open = intval(I(\"register_open\")) ;\n        $history_version_count = intval(I(\"history_version_count\")) ;\n        $oss_open = intval(I(\"oss_open\")) ;\n        $home_page = intval(I(\"home_page\")) ;\n        $home_item = intval(I(\"home_item\")) ;\n        $oss_setting = I(\"oss_setting\") ;\n        D(\"Options\")->set(\"history_version_count\" ,$history_version_count) ;\n        D(\"Options\")->set(\"register_open\" ,$register_open) ;\n        D(\"Options\")->set(\"home_page\" ,$home_page) ;\n        D(\"Options\")->set(\"home_item\" ,$home_item) ;\n        \n        if ($oss_open) {\n            $this->checkComposerPHPVersion();\n            D(\"Options\")->set(\"oss_setting\" , json_encode( $oss_setting)) ;\n        }\n        D(\"Options\")->set(\"oss_open\" ,$oss_open) ;\n\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7d\u914d\u7f6e\n    public function loadConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $oss_open = D(\"Options\")->get(\"oss_open\" ) ;\n        $register_open = D(\"Options\")->get(\"register_open\" ) ;\n        $history_version_count = D(\"Options\")->get(\"history_version_count\" ) ;\n        $oss_setting = D(\"Options\")->get(\"oss_setting\" ) ;\n        $home_page = D(\"Options\")->get(\"home_page\" ) ;\n        $home_item = D(\"Options\")->get(\"home_item\" ) ;\n        $ldap_form = json_decode($ldap_form,1);\n        $oss_setting = json_decode($oss_setting,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"oss_open\"=>$oss_open ,\n                \"register_open\"=>$register_open ,\n                \"history_version_count\"=>$history_version_count ,\n                \"home_page\"=>$home_page ,\n                \"home_item\"=>$home_item ,\n                \"oss_setting\"=>$oss_setting ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    //\u4fdd\u5b58Ldap\u914d\u7f6e\n    public function saveLdapConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $ldap_open = intval(I(\"ldap_open\")) ;\n        $ldap_form = I(\"ldap_form\") ;\n        \n        if ($ldap_open) {\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            if( !extension_loaded( 'ldap' ) ) {\n               $this->sendError(10011,\"\u4f60\u5c1a\u672a\u5b89\u88c5php-ldap\u6269\u5c55\u3002\u5982\u679c\u662f\u666e\u901aPHP\u73af\u5883\uff0c\u8bf7\u624b\u52a8\u5b89\u88c5\u4e4b\u3002\u5982\u679c\u662f\u4f7f\u7528\u4e4b\u524d\u5b98\u65b9docker\u955c\u50cf\uff0c\u5219\u9700\u8981\u91cd\u65b0\u5b89\u88c5\u955c\u50cf\u3002\u65b9\u6cd5\u662f\uff1a\u5907\u4efd /showdoc_data \u6574\u4e2a\u76ee\u5f55\uff0c\u7136\u540e\u5168\u65b0\u5b89\u88c5showdoc\uff0c\u63a5\u7740\u7528\u5907\u4efd\u8986\u76d6/showdoc_data \u3002\u7136\u540e\u9012\u5f52\u8d4b\u4e88777\u53ef\u5199\u6743\u9650\u3002\");\n               return ;\n            }\n\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               $this->sendError(10011,\"Can't connect to LDAP server\");\n               return ;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               $this->sendError(10011,\"Can't bind to LDAP server\");\n               return ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            \n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                if (!$ldap_user) {\n                    continue ;\n                }\n                //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                if(!D(\"User\")->isExist($ldap_user)){\n                    D(\"User\")->register($ldap_user,$ldap_user.time());\n                }\n            }\n            D(\"Options\")->set(\"ldap_form\" , json_encode( $ldap_form)) ;\n        }\n        D(\"Options\")->set(\"ldap_open\" ,$ldap_open) ;\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7dLdap\u914d\u7f6e\n    public function loadLdapConfig(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n        $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n        $ldap_form = json_decode($ldap_form,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"ldap_open\"=>$ldap_open ,\n                \"ldap_form\"=>$ldap_form ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    //\u4fdd\u5b58Oauth2\u914d\u7f6e\n    public function saveOauth2Config(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $this->checkComposerPHPVersion();\n        $oauth2_open = intval(I(\"oauth2_open\")) ;\n        $oauth2_form = I(\"oauth2_form\") ;\n        D(\"Options\")->set(\"oauth2_form\" , json_encode( $oauth2_form)) ;\n        D(\"Options\")->set(\"oauth2_open\" ,$oauth2_open) ;\n        $this->sendResult(array());\n\n    }\n\n    //\u52a0\u8f7dOauth2\u914d\u7f6e\n    public function loadOauth2Config(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $oauth2_open = D(\"Options\")->get(\"oauth2_open\" ) ;\n        $oauth2_form = D(\"Options\")->get(\"oauth2_form\" ) ;\n        $oauth2_form = json_decode($oauth2_form,1);\n        \n        //\u5982\u679c\u5f3a\u7b49\u4e8efalse\uff0c\u90a3\u5c31\u662f\u5c1a\u672a\u6709\u6570\u636e\u3002\u5173\u95ed\u6ce8\u518c\u5e94\u8be5\u662f\u6709\u6570\u636e\u4e14\u6570\u636e\u4e3a\u5b57\u7b26\u4e320\n        if ($register_open === false) {\n            $this->sendResult(array());\n        }else{\n            $array = array(\n                \"oauth2_open\"=>$oauth2_open ,\n                \"oauth2_form\"=>$oauth2_form ,\n                );\n            $this->sendResult($array);\n        }\n\n    }\n\n    public function getLoginSecretKey(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $login_secret_key = D(\"Options\")->get(\"login_secret_key\") ;\n        if(!$login_secret_key){\n            $login_secret_key = bin2hex( random_bytes( 16 ) );\n            D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\n        }\n        $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\n\n    }\n\n    public function resetLoginSecretKey(){\n        $login_user = $this->checkLogin();\n        $this->checkAdmin();\n        $login_secret_key = bin2hex( random_bytes( 16 ) );\n        D(\"Options\")->set(\"login_secret_key\",$login_secret_key) ;\n        $this->sendResult(array(\"login_secret_key\"=>$login_secret_key));\n\n    }\n\n\n    public function checkLdapLogin(){\n            $username = 'admin';\n            $password = '123456';\n\n            $ldap_open = D(\"Options\")->get(\"ldap_open\" ) ;\n            $ldap_form = D(\"Options\")->get(\"ldap_form\" ) ;\n            $ldap_form = json_decode($ldap_form,1);\n            if (!$ldap_open) {\n                return ;\n            }\n            if (!$ldap_form['user_field']) {\n                $ldap_form['user_field'] = 'cn';\n            }\n            $ldap_conn = ldap_connect($ldap_form['host'], $ldap_form['port']);//\u5efa\u7acb\u4e0e LDAP \u670d\u52a1\u5668\u7684\u8fde\u63a5\n            if (!$ldap_conn) {\n               $this->sendError(10011,\"Can't connect to LDAP server\");\n               return ;\n            }\n            ldap_set_option($ldap_conn, LDAP_OPT_PROTOCOL_VERSION, $ldap_form['version']);\n            $rs=ldap_bind($ldap_conn, $ldap_form['bind_dn'], $ldap_form['bind_password']);//\u4e0e\u670d\u52a1\u5668\u7ed1\u5b9a \u7528\u6237\u767b\u5f55\u9a8c\u8bc1 \u6210\u529f\u8fd4\u56de1 \n            if (!$rs) {\n               $this->sendError(10011,\"Can't bind to LDAP server\");\n               return ;\n            }\n\n            $result = ldap_search($ldap_conn,$ldap_form['base_dn'],\"(cn=*)\");\n            $data = ldap_get_entries($ldap_conn, $result);\n            for ($i=0; $i<$data[\"count\"]; $i++) {\n                $ldap_user = $data[$i][$ldap_form['user_field']][0] ;\n                $dn = $data[$i][\"dn\"] ;\n                if ($ldap_user == $username) {\n                    //\u5982\u679c\u8be5\u7528\u6237\u4e0d\u5728\u6570\u636e\u5e93\u91cc\uff0c\u5219\u5e2e\u52a9\u5176\u6ce8\u518c\n                    $userInfo = D(\"User\")->isExist($username) ;\n                    if(!$userInfo){\n                        D(\"User\")->register($ldap_user,$ldap_user.time());\n                    }\n                    $rs2=ldap_bind($ldap_conn, $dn , $password);\n                    if ($rs2) {\n                       D(\"User\")->updatePwd($userInfo['uid'], $password);\n                       $this->sendResult(array());\n                       return ;\n                    }\n                }\n            }\n           $this->sendError(10011,\"\u7528\u6237\u540d\u6216\u8005\u5bc6\u7801\u9519\u8bef\");\n    }\n\n}"], "filenames": ["server/Application/Api/Controller/AdminSettingController.class.php"], "buggy_code_start_loc": [169], "buggy_code_end_loc": [180], "fixing_code_start_loc": [169], "fixing_code_end_loc": [180], "type": "CWE-338", "message": "showdoc is vulnerable to Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)", "other": {"cve": {"id": "CVE-2021-3678", "sourceIdentifier": "security@huntr.dev", "published": "2021-08-04T14:15:08.577", "lastModified": "2021-08-11T00:00:28.657", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "showdoc is vulnerable to Use of Cryptographically Weak Pseudo-Random Number Generator (PRNG)"}, {"lang": "es", "value": "showdoc es vulnerable al Uso de un Generador de N\u00fameros Pseudoaleatorios (PRNG) Criptogr\u00e1ficamente D\u00e9bil"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 5.9, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.2, "impactScore": 3.6}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:N/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-338"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-338"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:showdoc:showdoc:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.9.8", "matchCriteriaId": "9D88C5D7-CE79-4A65-BF0D-956E2D8EC2FD"}]}]}], "references": [{"url": "https://github.com/star7th/showdoc/commit/4b962c1740311e0d46775023b6acba39ad60e370", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/f9a9defd-29ea-4442-b692-ff1512813de4", "source": "security@huntr.dev", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/star7th/showdoc/commit/4b962c1740311e0d46775023b6acba39ad60e370"}}