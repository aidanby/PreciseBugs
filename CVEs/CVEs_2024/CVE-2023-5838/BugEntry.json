{"buggy_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Cohensive\\OEmbed\\Facades\\OEmbed;\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\Facades\\Response;\nuse JeroenDesloovere\\VCard\\VCard;\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Validator;\n\nuse Auth;\nuse DB;\nuse ZipArchive;\nuse File;\n\nuse App\\Models\\User;\nuse App\\Models\\Button;\nuse App\\Models\\Link;\nuse App\\Models\\LinkType;\nuse App\\Models\\UserData;\n\n\n//Function tests if string starts with certain string (used to test for illegal strings)\nfunction stringStartsWith($haystack, $needle, $case = true)\n{\n    if ($case) {\n        return strpos($haystack, $needle, 0) === 0;\n    }\n    return stripos($haystack, $needle, 0) === 0;\n}\n\n//Function tests if string ends with certain string (used to test for illegal strings)\nfunction stringEndsWith($haystack, $needle, $case = true)\n{\n    $expectedPosition = strlen($haystack) - strlen($needle);\n    if ($case) {\n        return strrpos($haystack, $needle, 0) === $expectedPosition;\n    }\n    return strripos($haystack, $needle, 0) === $expectedPosition;\n}\n\nclass UserController extends Controller\n{\n\n    //Statistics of the number of clicks and links\n    public function index()\n    {\n        $userId = Auth::user()->id;\n\n        $littlelink_name = Auth::user()->littlelink_name;\n        $userinfo = User::find($userId);\n\n        $links = Link::where('user_id', $userId)->select('link')->count();\n        $clicks = Link::where('user_id', $userId)->sum('click_number');\n        $topLinks = Link::where('user_id', $userId)->orderby('click_number', 'desc')\n            ->whereNotNull('link')->where('link', '<>', '')\n            ->take(5)->get();\n\n        $pageStats = [\n            'visitors' => [\n                'all' => visits('App\\Models\\User', $littlelink_name)->count(),\n                'day' => visits('App\\Models\\User', $littlelink_name)->period('day')->count(),\n                'week' => visits('App\\Models\\User', $littlelink_name)->period('week')->count(),\n                'month' => visits('App\\Models\\User', $littlelink_name)->period('month')->count(),\n                'year' => visits('App\\Models\\User', $littlelink_name)->period('year')->count(),\n            ],\n            'os' => visits('App\\Models\\User', $littlelink_name)->operatingSystems(),\n            'referers' => visits('App\\Models\\User', $littlelink_name)->refs(),\n            'countries' => visits('App\\Models\\User', $littlelink_name)->countries(),\n        ];\n\n\n\n        return view('studio/index', ['greeting' => $userinfo->name, 'toplinks' => $topLinks, 'links' => $links, 'clicks' => $clicks, 'pageStats' => $pageStats]);\n    }\n\n    //Show littlelink page. example => http://127.0.0.1:8000/+admin\n    public function littlelink(request $request)\n    {\n        $littlelink_name = $request->littlelink;\n        $id = User::select('id')->where('littlelink_name', $littlelink_name)->value('id');\n\n        if (empty($id)) {\n            return abort(404);\n        }\n     \n        $userinfo = User::select('id', 'name', 'littlelink_name', 'littlelink_description', 'theme', 'role')->where('id', $id)->first();\n        $information = User::select('name', 'littlelink_name', 'littlelink_description', 'theme')->where('id', $id)->get();\n        \n        $links = DB::table('links')->join('buttons', 'buttons.id', '=', 'links.button_id')->select('links.link', 'links.id', 'links.button_id', 'links.title', 'links.custom_css', 'links.custom_icon', 'buttons.name')->where('user_id', $id)->orderBy('up_link', 'asc')->orderBy('order', 'asc')->get();\n\n        return view('littlelink', ['userinfo' => $userinfo, 'information' => $information, 'links' => $links, 'littlelink_name' => $littlelink_name]);\n    }\n\n    //Show littlelink page as home page if set in config\n    public function littlelinkhome(request $request)\n    {\n        $littlelink_name = env('HOME_URL');\n        $id = User::select('id')->where('littlelink_name', $littlelink_name)->value('id');\n\n        if (empty($id)) {\n            return abort(404);\n        }\n     \n        $userinfo = User::select('id', 'name', 'littlelink_name', 'littlelink_description', 'theme', 'role')->where('id', $id)->first();\n        $information = User::select('name', 'littlelink_name', 'littlelink_description', 'theme')->where('id', $id)->get();\n        \n        $links = DB::table('links')->join('buttons', 'buttons.id', '=', 'links.button_id')->select('links.link', 'links.id', 'links.button_id', 'links.title', 'links.custom_css', 'links.custom_icon', 'buttons.name')->where('user_id', $id)->orderBy('up_link', 'asc')->orderBy('order', 'asc')->get();\n\n        return view('littlelink', ['userinfo' => $userinfo, 'information' => $information, 'links' => $links, 'littlelink_name' => $littlelink_name]);\n    }\n\n    //Show add/update form\n    public function AddUpdateLink($id = 0)\n    {\n\n        if ($id !== 0) {\n            $linkData = Link::find($id);\n        } elseif ($id == 0) {\n            $linkData = new Link(['typename' => 'link', 'id'=>'0']);\n        } else {\n            $linkData = new Link(['typename' => 'link', 'id'=>'0']);\n        }\n        $data['LinkTypes'] = LinkType::get();\n        $data['LinkData'] = $linkData;\n        $data['LinkID'] = $id;\n        $data['linkTypeID'] = \"1\";\n        $data['title'] = \"Predefined Site\";\n\n        if (Route::currentRouteName() != 'showButtons') {\n            $links = DB::table('links')->where('id', $id)->first();\n\n            $bid = $links->button_id;\n\n            if($bid == 1 or $bid == 2){\n                $data['linkTypeID'] = \"2\";\n            } elseif ($bid == 42) {\n                $data['linkTypeID'] = \"3\";\n            } elseif ($bid == 43) {\n                $data['linkTypeID'] = \"4\";\n            } elseif ($bid == 93) {\n                $data['linkTypeID'] = \"5\";\n            } elseif ($bid == 6 or $bid == 7) {\n                $data['linkTypeID'] = \"6\";\n            } elseif ($bid == 44) {\n                $data['linkTypeID'] = \"7\";\n            } elseif ($bid == 96) {\n                $data['linkTypeID'] = \"8\";\n            } else {\n                $data['linkTypeID'] = \"1\";\n            }\n\n            $data['title'] = LinkType::where('id', $data['linkTypeID'])->value('title');\n        }\n\n        foreach ($data['LinkTypes']->toArray() as $key => $val) {\n            if ($val['typename'] === $linkData['typename']) {\n                $data['SelectedLinkType'] = $val;\n                break;\n            }\n        }\n        \n        return view('studio/edit-link', $data);\n    }\n\n    //Save add link\n    public function saveLink(request $request)\n    {\n\n        $linkType = LinkType::find($request->linktype_id);\n        $LinkTitle = ($request->link_text ?? $request->link_title) ?? $request->title;\n        $LinkURL = $request->link_url ?? $request->link;\n\n        $OrigLink = Link::find($request->linkid);\n\n        $customParams = [];\n        foreach ($request->all() as $key => $param) {\n            //echo $key . \" = \" . $param . \"<br />\";\n            if (str_starts_with($key, \"_\") ||  in_array($key, ['linktype_id', 'linktype_title', 'link_text', 'link_url']))\n                continue;\n\n            $customParams[$key] = $param;\n        }\n\n        $userId = Auth::user()->id;\n        $button = Button::where('name', $request->button)->first();\n\n        if ($button && empty($LinkTitle))\n            $LinkTitle = ucwords($button->name);\n\n        if ($linkType->typename == 'video' && empty($LinkTitle)) {\n            $embed = OEmbed::get($LinkURL);\n            if ($embed) {\n                $LinkTitle = $embed->data()['title'];\n            }\n        }\n\n        $message = (ucwords($button?->name) ?? ucwords($linkType->typename)). \" has been \";\n\n        if ($OrigLink) {\n            //EDITING EXISTING\n\n            $isCustomWebsite = $customParams['GetSiteIcon'] ?? null;\n            $SpacerHeight = $customParams['height'] ?? null;\n\n                if($linkType->typename == \"link\" and $isCustomWebsite == \"1\"){\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $LinkTitle,\n                        'button_id' => \"2\",\n                    ]);\n                }elseif($linkType->typename == \"link\"){\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $LinkTitle,\n                        'button_id' => \"1\",\n                    ]);\n                }elseif($linkType->typename == \"spacer\"){\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $customParams['height'] ?? null,\n                        'button_id' => \"43\",\n                    ]);\n                }elseif($linkType->typename == \"heading\"){\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $LinkTitle,\n                        'button_id' => \"42\",\n                    ]);\n                }elseif($linkType->typename == \"text\"){\n                    $OrigLink->update([\n                        'button_id' => \"93\",\n                        'title' => $request->text,\n                    ]);\n                }elseif($linkType->typename == \"email\"){\n                    $LinkURL = \"mailto:\".$LinkURL;\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'button_id' => $button?->id,\n                        'title' => $LinkTitle,\n                    ]);\n                }elseif($linkType->typename == \"telephone\"){\n                    $LinkURL = \"tel:\".$LinkURL;\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'button_id' => $button?->id,\n                        'title' => $LinkTitle,\n                    ]);\n                }elseif($linkType->typename == \"vcard\"){\n\n                    $prefix = $request->input('prefix');\n                    $firstName = $request->input('first_name');\n                    $middleName = $request->input('middle_name');\n                    $lastName = $request->input('last_name');\n                    $suffix = $request->input('suffix');\n                    $nickname = $request->input('nickname');\n                    $organization = $request->input('organization');\n                    $vtitle = $request->input('vtitle');\n                    $role = $request->input('role');\n                    $workUrl = $request->input('work_url');\n                    $email = $request->input('email');\n                    $workEmail = $request->input('work_email');\n                    $homePhone = $request->input('home_phone');\n                    $workPhone = $request->input('work_phone');\n                    $cellPhone = $request->input('cell_phone');\n                    $homeAddressLabel = $request->input('home_address_label');\n                    $homeAddressStreet = $request->input('home_address_street');\n                    $homeAddressCity = $request->input('home_address_city');\n                    $homeAddressState = $request->input('home_address_state');\n                    $homeAddressZip = $request->input('home_address_zip');\n                    $homeAddressCountry = $request->input('home_address_country');\n                    $workAddressLabel = $request->input('work_address_label');\n                    $workAddressStreet = $request->input('work_address_street');\n                    $workAddressCity = $request->input('work_address_city');\n                    $workAddressState = $request->input('work_address_state');\n                    $workAddressZip = $request->input('work_address_zip');\n                    $workAddressCountry = $request->input('work_address_country');\n    \n                    // Create an array with all the input fields\n                    $data = [\n                        'prefix' => $request->input('prefix'),\n                        'first_name' => $request->input('first_name'),\n                        'middle_name' => $request->input('middle_name'),\n                        'last_name' => $request->input('last_name'),\n                        'suffix' => $request->input('suffix'),\n                        'nickname' => $request->input('nickname'),\n                        'organization' => $request->input('organization'),\n                        'vtitle' => $request->input('vtitle'),\n                        'role' => $request->input('role'),\n                        'work_url' => $request->input('work_url'),\n                        'email' => $request->input('email'),\n                        'work_email' => $request->input('work_email'),\n                        'home_phone' => $request->input('home_phone'),\n                        'work_phone' => $request->input('work_phone'),\n                        'cell_phone' => $request->input('cell_phone'),\n                        'home_address_label' => $request->input('home_address_label'),\n                        'home_address_street' => $request->input('home_address_street'),\n                        'home_address_city' => $request->input('home_address_city'),\n                        'home_address_state' => $request->input('home_address_state'),\n                        'home_address_zip' => $request->input('home_address_zip'),\n                        'home_address_country' => $request->input('home_address_country'),\n                        'work_address_label' => $request->input('work_address_label'),\n                        'work_address_street' => $request->input('work_address_street'),\n                        'work_address_city' => $request->input('work_address_city'),\n                        'work_address_state' => $request->input('work_address_state'),\n                        'work_address_zip' => $request->input('work_address_zip'),\n                        'work_address_country' => $request->input('work_address_country'),\n                    ];\n                    \n                    // Convert the array to JSON format\n                    $json = json_encode($data);\n                    \n                    // Set the JSON as the variable $links->link, or null if the JSON is empty\n                    $LinkURL = $json ? $json : null;        \n\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'button_id' => 96,\n                        'title' => $LinkTitle,\n                    ]);\n                }else{\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $LinkTitle,\n                        'button_id' => $button?->id,\n                    ]);\n                }\n                \n            $message .=\"updated\";\n\n        } else {\n            // ADDING NEW\n\n            $isCustomWebsite = $customParams['GetSiteIcon'] ?? null;\n            $SpacerHeight = $customParams['height'] ?? null;\n            \n            $links = new Link;\n            $links->link = $LinkURL;\n            $links->user_id = $userId;\n            if($linkType->typename == \"spacer\"){\n            $links->title = $SpacerHeight;\n            }else{\n            $links->title = $LinkTitle;\n            }\n            if($linkType->typename == \"link\" and $isCustomWebsite == \"1\"){\n                $links->button_id = \"2\";\n            }elseif($linkType->typename == \"link\"){\n                $links->button_id = \"1\";\n            }elseif($linkType->typename == \"spacer\"){\n                $links->button_id = \"43\";\n            }elseif($linkType->typename == \"heading\"){\n                $links->button_id = \"42\";\n            }elseif($linkType->typename == \"text\"){\n                $links->button_id = \"93\";\n                $links->title = $request->text;\n            }elseif($linkType->typename == \"email\"){\n                $links->link = \"mailto:\".$links->link;\n                $links->button_id = $button?->id;\n            }elseif($linkType->typename == \"telephone\"){\n                $links->link = \"tel:\".$links->link;\n                $links->button_id = $button?->id;\n            }elseif($linkType->typename == \"vcard\"){\n\n                $prefix = $request->input('prefix');\n                $firstName = $request->input('first_name');\n                $middleName = $request->input('middle_name');\n                $lastName = $request->input('last_name');\n                $suffix = $request->input('suffix');\n                $nickname = $request->input('nickname');\n                $organization = $request->input('organization');\n                $vtitle = $request->input('vtitle');\n                $role = $request->input('role');\n                $workUrl = $request->input('work_url');\n                $email = $request->input('email');\n                $workEmail = $request->input('work_email');\n                $homePhone = $request->input('home_phone');\n                $workPhone = $request->input('work_phone');\n                $cellPhone = $request->input('cell_phone');\n                $homeAddressLabel = $request->input('home_address_label');\n                $homeAddressStreet = $request->input('home_address_street');\n                $homeAddressCity = $request->input('home_address_city');\n                $homeAddressState = $request->input('home_address_state');\n                $homeAddressZip = $request->input('home_address_zip');\n                $homeAddressCountry = $request->input('home_address_country');\n                $workAddressLabel = $request->input('work_address_label');\n                $workAddressStreet = $request->input('work_address_street');\n                $workAddressCity = $request->input('work_address_city');\n                $workAddressState = $request->input('work_address_state');\n                $workAddressZip = $request->input('work_address_zip');\n                $workAddressCountry = $request->input('work_address_country');\n\n                // Create an array with all the input fields\n                $data = [\n                    'prefix' => $request->input('prefix'),\n                    'first_name' => $request->input('first_name'),\n                    'middle_name' => $request->input('middle_name'),\n                    'last_name' => $request->input('last_name'),\n                    'suffix' => $request->input('suffix'),\n                    'nickname' => $request->input('nickname'),\n                    'organization' => $request->input('organization'),\n                    'vtitle' => $request->input('vtitle'),\n                    'role' => $request->input('role'),\n                    'work_url' => $request->input('work_url'),\n                    'email' => $request->input('email'),\n                    'work_email' => $request->input('work_email'),\n                    'home_phone' => $request->input('home_phone'),\n                    'work_phone' => $request->input('work_phone'),\n                    'cell_phone' => $request->input('cell_phone'),\n                    'home_address_label' => $request->input('home_address_label'),\n                    'home_address_street' => $request->input('home_address_street'),\n                    'home_address_city' => $request->input('home_address_city'),\n                    'home_address_state' => $request->input('home_address_state'),\n                    'home_address_zip' => $request->input('home_address_zip'),\n                    'home_address_country' => $request->input('home_address_country'),\n                    'work_address_label' => $request->input('work_address_label'),\n                    'work_address_street' => $request->input('work_address_street'),\n                    'work_address_city' => $request->input('work_address_city'),\n                    'work_address_state' => $request->input('work_address_state'),\n                    'work_address_zip' => $request->input('work_address_zip'),\n                    'work_address_country' => $request->input('work_address_country'),\n                ];\n                \n                // Convert the array to JSON format\n                $json = json_encode($data);\n                \n                // Set the JSON as the variable $links->link, or null if the JSON is empty\n                $links->link = $json ? $json : null;               \n\n                $links->button_id = 96;\n            }else{\n                $links->button_id = $button?->id;\n            }\n\n            if(empty($links->button_id)) {\n                return redirect(route('showButtons')); die;\n            }\n            \n            $links->save();\n\n            $links->order = ($links->id - 1);\n            $links->save();\n            $message .= \"added\";\n        }\n\n            if ($request->input('param') == 'add_more') {\n                return Redirect('studio/add-link')\n                ->with('success', $message);\n            } else {\n                return Redirect('studio/links')\n                ->with('success', $message);\n            }\n\n    }\n\n    public function sortLinks(Request $request)\n    {\n        $linkOrders  = $request->input(\"linkOrders\", []);\n        $currentPage = $request->input(\"currentPage\", 1);\n        $perPage     = $request->input(\"perPage\", 0);\n\n        if ($perPage == 0) {\n            $currentPage = 1;\n        }\n\n        $linkOrders = array_unique(array_filter($linkOrders));\n        if (!$linkOrders || $currentPage < 1) {\n            return response()->json([\n                'status' => 'ERROR',\n            ]);\n        }\n\n        $newOrder = $perPage * ($currentPage - 1);\n        $linkNewOrders = [];\n        foreach ($linkOrders as $linkId) {\n            if ($linkId < 0) {\n                continue;\n            }\n\n            $linkNewOrders[$linkId] = $newOrder;\n            Link::where(\"id\", $linkId)\n                ->update([\n                    'order' => $newOrder\n                ]);\n            $newOrder++;\n        }\n\n        return response()->json([\n            'status' => 'OK',\n            'linkOrders' => $linkNewOrders,\n        ]);\n    }\n\n\n    //Count the number of clicks and redirect to link\n    public function clickNumber(request $request)\n    {\n        $linkId = $request->id;\n        $link = Link::find($linkId);\n        $link = $link->link;\n\n        Link::where('id', $linkId)->increment('click_number', 1);\n\n        $response = redirect()->away($link);\n        $response->header('X-Robots-Tag', 'noindex, nofollow');\n\n        return $response;\n    }\n\n    //Download Vcard\n    public function vcard(request $request)\n    {\n        $linkId = $request->id;\n\n        // Find the link with the specified ID\n        $link = Link::findOrFail($linkId);\n\n        $json = $link->link;\n\n        // Decode the JSON to a PHP array\n        $data = json_decode($json, true);\n        \n        // Create a new vCard object\n        $vcard = new VCard();\n        \n        // Set the vCard properties from the $data array\n        $vcard->addName($data['last_name'], $data['first_name'], $data['middle_name'], $data['prefix'], $data['suffix']);\n        $vcard->addCompany($data['organization']);\n        $vcard->addJobtitle($data['vtitle']);\n        $vcard->addRole($data['role']);\n        $vcard->addEmail($data['email']);\n        $vcard->addEmail($data['work_email'], 'WORK');\n        $vcard->addURL($data['work_url'], 'WORK');\n        $vcard->addPhoneNumber($data['home_phone'], 'HOME');\n        $vcard->addPhoneNumber($data['work_phone'], 'WORK');\n        $vcard->addPhoneNumber($data['cell_phone'], 'CELL');\n        $vcard->addAddress($data['home_address_street'], '', $data['home_address_city'], $data['home_address_state'], $data['home_address_zip'], $data['home_address_country'], 'HOME');\n        $vcard->addAddress($data['work_address_street'], '', $data['work_address_city'], $data['work_address_state'], $data['work_address_zip'], $data['work_address_country'], 'WORK');\n        \n\n        // $vcard->addPhoto(base_path('img/1.png'));\n        \n        // Generate the vCard file contents\n        $file_contents = $vcard->getOutput();\n        \n        // Set the file headers for download\n        $headers = [\n            'Content-Type' => 'text/x-vcard',\n            'Content-Disposition' => 'attachment; filename=\"contact.vcf\"'\n        ];\n        \n        Link::where('id', $linkId)->increment('click_number', 1);\n\n        // Return the file download response\n        return response()->make($file_contents, 200, $headers);\n\n    }\n\n    //Show link, click number, up link in links page\n    public function showLinks()\n    {\n        $userId = Auth::user()->id;\n        $data['pagePage'] = 10;\n        \n        $data['links'] = Link::select('id', 'link', 'title', 'order', 'click_number', 'up_link', 'links.button_id')->where('user_id', $userId)->orderBy('up_link', 'asc')->orderBy('order', 'asc')->paginate(99999);\n        return view('studio/links', $data);\n    }\n\n    //Delete link\n    public function deleteLink(request $request)\n    {\n        $linkId = $request->id;\n\n        Link::where('id', $linkId)->delete();\n\n        $directory = base_path(\"assets/favicon/icons\");\n        $files = scandir($directory);\n        foreach($files as $file) {\n        if (strpos($file, $linkId.\".\") !== false) {\n        $pathinfo = pathinfo($file, PATHINFO_EXTENSION);}}\n        if (isset($pathinfo)) {\n        try{File::delete(base_path(\"assets/favicon/icons\").\"/\".$linkId.\".\".$pathinfo);} catch (exception $e) {}\n        }\n\n        return redirect('/studio/links');\n    }\n\n    //Delete icon\n    public function clearIcon(request $request)\n    {\n        $linkId = $request->id;\n\n        $directory = base_path(\"assets/favicon/icons\");\n        $files = scandir($directory);\n        foreach($files as $file) {\n        if (strpos($file, $linkId.\".\") !== false) {\n        $pathinfo = pathinfo($file, PATHINFO_EXTENSION);}}\n        if (isset($pathinfo)) {\n        try{File::delete(base_path(\"assets/favicon/icons\").\"/\".$linkId.\".\".$pathinfo);} catch (exception $e) {}\n        }\n\n        return redirect('/studio/links');\n    }\n\n    //Raise link on the littlelink page\n    public function upLink(request $request)\n    {\n        $linkId = $request->id;\n        $upLink = $request->up;\n\n        if ($upLink == 'yes') {\n            $up = 'no';\n        } elseif ($upLink == 'no') {\n            $up = 'yes';\n        }\n\n        Link::where('id', $linkId)->update(['up_link' => $up]);\n\n        return back();\n    }\n\n    //Show link to edit\n    public function showLink(request $request)\n    {\n        $linkId = $request->id;\n\n        $link = Link::where('id', $linkId)->value('link');\n        $title = Link::where('id', $linkId)->value('title');\n        $order = Link::where('id', $linkId)->value('order');\n        $custom_css = Link::where('id', $linkId)->value('custom_css');\n        $buttonId = Link::where('id', $linkId)->value('button_id');\n        $buttonName = Button::where('id', $buttonId)->value('name');\n\n        $buttons = Button::select('id', 'name')->orderBy('name', 'asc')->get();\n\n        return view('studio/edit-link', ['custom_css' => $custom_css, 'buttonId' => $buttonId, 'buttons' => $buttons, 'link' => $link, 'title' => $title, 'order' => $order, 'id' => $linkId, 'buttonName' => $buttonName]);\n    }\n\n    //Show custom CSS + custom icon\n    public function showCSS(request $request)\n    {\n        $linkId = $request->id;\n\n        $link = Link::where('id', $linkId)->value('link');\n        $title = Link::where('id', $linkId)->value('title');\n        $order = Link::where('id', $linkId)->value('order');\n        $custom_css = Link::where('id', $linkId)->value('custom_css');\n        $custom_icon = Link::where('id', $linkId)->value('custom_icon');\n        $buttonId = Link::where('id', $linkId)->value('button_id');\n\n        $buttons = Button::select('id', 'name')->get();\n\n        return view('studio/button-editor', ['custom_icon' => $custom_icon, 'custom_css' => $custom_css, 'buttonId' => $buttonId, 'buttons' => $buttons, 'link' => $link, 'title' => $title, 'order' => $order, 'id' => $linkId]);\n    }\n\n    //Save edit link\n    public function editLink(request $request)\n    {\n        $request->validate([\n            'link' => 'required',\n            'title' => 'required',\n            'button' => 'required',\n        ]);\n\n        if (stringStartsWith($request->link, 'http://') == 'true' or stringStartsWith($request->link, 'https://') == 'true' or stringStartsWith($request->link, 'mailto:') == 'true')\n            $link1 = $request->link;\n        else\n            $link1 = 'https://' . $request->link;\n        if (stringEndsWith($request->link, '/') == 'true')\n            $link = rtrim($link1, \"/ \");\n        else\n        $link = $link1;\n        $title = $request->title;\n        $order = $request->order;\n        $button = $request->button;\n        $linkId = $request->id;\n\n        $buttonId = Button::select('id')->where('name', $button)->value('id');\n\n        Link::where('id', $linkId)->update(['link' => $link, 'title' => $title, 'order' => $order, 'button_id' => $buttonId]);\n\n        return redirect('/studio/links');\n    }\n\n    //Save edit custom CSS + custom icon\n    public function editCSS(request $request)\n    {\n        $linkId = $request->id;\n        $custom_icon = $request->custom_icon;\n        $custom_css = $request->custom_css;\n\n        if ($request->custom_css == \"\" and $request->custom_icon = !\"\") {\n            Link::where('id', $linkId)->update(['custom_icon' => $custom_icon]);\n        } elseif ($request->custom_icon == \"\" and $request->custom_css = !\"\") {\n            Link::where('id', $linkId)->update(['custom_css' => $custom_css]);\n        } else {\n            Link::where('id', $linkId)->update([]);\n        }\n        return Redirect('#result');\n    }\n\n    //Show littlelinke page for edit\n    public function showPage(request $request)\n    {\n        $userId = Auth::user()->id;\n\n        $data['pages'] = User::where('id', $userId)->select('littlelink_name', 'littlelink_description', 'image', 'name')->get();\n\n        return view('/studio/page', $data);\n    }\n\n    //Save littlelink page (name, description, logo)\n    public function editPage(Request $request)\n    {\n        $userId = Auth::user()->id;\n        $littlelink_name = Auth::user()->littlelink_name;\n    \n        $validator = Validator::make($request->all(), [\n            'littlelink_name' => [\n                'sometimes',\n                'max:255',\n                'string',\n                'isunique:users,id,'.$userId,\n            ],\n            'name' => 'sometimes|max:255|string',\n            'image' => 'sometimes|image|mimes:jpeg,jpg,png,webp|max:2048', // Max file size: 2MB\n        ], [\n            'littlelink_name.unique' => __('messages.That handle has already been taken'),\n            'image.image' => __('messages.The selected file must be an image'),\n            'image.mimes' => __('messages.The image must be') . ' JPEG, JPG, PNG, webP.',\n            'image.max' => __('messages.The image size should not exceed 2MB'),\n        ]);\n    \n        if ($validator->fails()) {\n            return redirect('/studio/page')->withErrors($validator)->withInput();\n        }\n    \n        $profilePhoto = $request->file('image');\n        $pageName = $request->littlelink_name;\n        $pageDescription = strip_tags($request->pageDescription, '<a><p><strong><i><ul><ol><li><blockquote><h2><h3><h4>');\n        $pageDescription = preg_replace(\"/<a([^>]*)>/i\", \"<a $1 rel=\\\"noopener noreferrer nofollow\\\">\", $pageDescription);\n        $name = $request->name;\n        $checkmark = $request->checkmark;\n        $sharebtn = $request->sharebtn;\n    \n        User::where('id', $userId)->update([\n            'littlelink_name' => $pageName,\n            'littlelink_description' => $pageDescription,\n            'name' => $name\n        ]);\n    \n        if ($request->hasFile('image')) {\n            $fileName = $userId . '_' . time() . \".\" . $profilePhoto->extension();\n            $profilePhoto->move(base_path('assets/img'), $fileName);\n        }\n    \n        if ($checkmark == \"on\") {\n            UserData::saveData($userId, 'checkmark', true);\n        } else {\n            UserData::saveData($userId, 'checkmark', false);\n        }\n    \n        if ($sharebtn == \"on\") {\n            UserData::saveData($userId, 'disable-sharebtn', false);\n        } else {\n            UserData::saveData($userId, 'disable-sharebtn', true);\n        }\n    \n        return Redirect('/studio/page');\n    }\n\n    //Upload custom theme background image\n    public function themeBackground(Request $request)\n    {\n        $userId = Auth::user()->id;\n        $littlelink_name = Auth::user()->littlelink_name;\n    \n        $request->validate([\n            'image' => 'required|image|mimes:jpeg,jpg,png,webp,gif|max:2048', // Max file size: 2MB\n        ], [\n            'image.required' => __('messages.Please select an image'),\n            'image.image' => __('messages.The selected file must be an image'),\n            'image.mimes' => __('messages.The image must be') . ' JPEG, JPG, PNG, webP, GIF.',\n            'image.max' => __('messages.The image size should not exceed 2MB'),\n        ]);\n    \n        $customBackground = $request->file('image');\n    \n        if ($customBackground) {\n            $directory = base_path('assets/img/background-img/');\n            $files = scandir($directory);\n            $pathinfo = \"error.error\";\n            foreach ($files as $file) {\n                if (strpos($file, $userId . '.') !== false) {\n                    $pathinfo = $userId . \".\" . pathinfo($file, PATHINFO_EXTENSION);\n                }\n            }\n    \n            if (file_exists(base_path('assets/img/background-img/') . $pathinfo)) {\n                File::delete(base_path('assets/img/background-img/') . $pathinfo);\n            }\n    \n            $fileName = $userId . '_' . time() . \".\" . $customBackground->extension();\n            $customBackground->move(base_path('assets/img/background-img/'), $fileName);\n    \n            if (extension_loaded('imagick')) {\n                $imagePath = base_path('assets/img/background-img/') . $fileName;\n                $image = new \\Imagick($imagePath);\n                $image->stripImage();\n                $image->writeImage($imagePath);\n            }\n    \n            return redirect('/studio/theme');\n        }\n    \n        return redirect('/studio/theme')->with('error', 'Please select a valid image file.');\n    }\n\n    //Delete custom background image\n    public function removeBackground()\n    {\n\n        $user_id = Auth::user()->id;\n        $path = findBackground($user_id);\n        $path = base_path('assets/img/background-img/'.$path);\n        \n        if (File::exists($path)) {\n            File::delete($path);\n        }\n\n        return back();\n    }\n\n\n    //Show custom theme\n    public function showTheme(request $request)\n    {\n        $userId = Auth::user()->id;\n\n        $data['pages'] = User::where('id', $userId)->select('littlelink_name', 'theme')->get();\n\n        return view('/studio/theme', $data);\n    }\n\n    //Save custom theme\n    public function editTheme(request $request)\n    {\n        $request->validate([\n            'zip' => 'sometimes|mimes:zip',\n        ]);\n\n        $userId = Auth::user()->id;\n\n        $zipfile = $request->file('zip');\n\n        $theme = $request->theme;\n        $message = \"\";\n\n        User::where('id', $userId)->update(['theme' => $theme]);\n\n\n\n        if (!empty($zipfile)) {\n\n            $zipfile->move(base_path('/themes'), \"temp.zip\");\n\n            $zip = new ZipArchive;\n            $zip->open(base_path() . '/themes/temp.zip');\n            $zip->extractTo(base_path() . '/themes');\n            $zip->close();\n            unlink(base_path() . '/themes/temp.zip');\n\n            // Removes version numbers from folder.\n\n            $folder = base_path('themes');\n            $regex = '/[0-9.-]/';\n            $files = scandir($folder);\n\n            foreach ($files as $file) {\n                if ($file !== '.' && $file !== '..') {\n                    if (preg_match($regex, $file)) {\n                        $new_file = preg_replace($regex, '', $file);\n                        File::copyDirectory($folder . '/' . $file, $folder . '/' . $new_file);\n                        $dirname = $folder . '/' . $file;\n                        if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n                            system('rmdir ' . escapeshellarg($dirname) . ' /s /q');\n                        } else {\n                            system(\"rm -rf \" . escapeshellarg($dirname));\n                        }\n                    }\n                }\n            }\n        }\n\n\n        return Redirect('/studio/theme')->with(\"success\", $message);\n    }\n\n    //Show user (name, email, password)\n    public function showProfile(request $request)\n    {\n        $userId = Auth::user()->id;\n\n        $data['profile'] = User::where('id', $userId)->select('name', 'email', 'role')->get();\n\n        return view('/studio/profile', $data);\n    }\n\n    //Save user (name, email, password)\n    public function editProfile(request $request)\n    {\n        $request->validate([\n            'name' => 'sometimes|required|unique:users',\n            'email' => 'sometimes|required|email|unique:users',\n            'password' => 'sometimes|min:8',\n        ]);\n\n        $userId = Auth::user()->id;\n\n        $name = $request->name;\n        $email = $request->email;\n        $password = Hash::make($request->password);\n\n        if ($request->name != '') {\n            User::where('id', $userId)->update(['name' => $name]);\n        } elseif ($request->email != '') {\n            User::where('id', $userId)->update(['email' => $email]);\n        } elseif ($request->password != '') {\n            User::where('id', $userId)->update(['password' => $password]);\n        }\n        return back();\n    }\n\n    //Show user theme credit page\n    public function theme(request $request)\n    {\n        $littlelink_name = $request->littlelink;\n        $id = User::select('id')->where('littlelink_name', $littlelink_name)->value('id');\n\n        if (empty($id)) {\n            return abort(404);\n        }\n\n        $userinfo = User::select('name', 'littlelink_name', 'littlelink_description', 'theme')->where('id', $id)->first();\n        $information = User::select('name', 'littlelink_name', 'littlelink_description', 'theme')->where('id', $id)->get();\n\n        $links = DB::table('links')->join('buttons', 'buttons.id', '=', 'links.button_id')->select('links.link', 'links.id', 'links.button_id', 'links.title', 'links.custom_css', 'links.custom_icon', 'buttons.name')->where('user_id', $id)->orderBy('up_link', 'asc')->orderBy('order', 'asc')->get();\n\n        return view('components/theme', ['userinfo' => $userinfo, 'information' => $information, 'links' => $links, 'littlelink_name' => $littlelink_name]);\n    }\n\n    //Delete existing user\n    public function deleteUser(request $request)\n    {\n\n        // echo $request->id;\n        // echo \"<br>\";\n        // echo Auth::id();\n        $id = $request->id;\n\n    if($id == Auth::id() and $id != \"1\") {\n\n        Link::where('user_id', $id)->delete();\n\n        $user = User::find($id);\n\n        Schema::disableForeignKeyConstraints();\n        $user->forceDelete();\n        Schema::enableForeignKeyConstraints();\n    }\n\n        return redirect('/');\n    }\n\n    //Delete profile picture\n    public function delProfilePicture()\n    {\n        $user_id = Auth::user()->id;\n        $path = base_path(findAvatar($user_id));\n        \n        if (File::exists($path)) {\n            File::delete($path);\n        }\n\n        return back();\n    }\n\n    //Export user links\n    public function exportLinks(request $request)\n    {\n        $userId = Auth::id();\n        $user = User::find($userId);\n        $links = Link::where('user_id', $userId)->get();\n        \n        if (!$user) {\n            // handle the case where the user is null\n            return response()->json(['message' => 'User not found'], 404);\n        }\n\n        $userData['links'] = $links->toArray();\n\n        $domain = $_SERVER['HTTP_HOST'];\n        $date = date('Y-m-d_H-i-s');\n        $fileName = \"links-$domain-$date.json\";\n        $headers = [\n            'Content-Type' => 'application/json',\n            'Content-Disposition' => 'attachment; filename=\"'.$fileName.'\"',\n        ];\n        return response()->json($userData, 200, $headers);\n\n        return back();\n    }\n\n    //Export all user data\n    public function exportAll(Request $request)\n    {\n        $userId = Auth::id();\n        $user = User::find($userId);\n        $links = Link::where('user_id', $userId)->get();\n    \n        if (!$user) {\n            // handle the case where the user is null\n            return response()->json(['message' => 'User not found'], 404);\n        }\n    \n        $userData = $user->toArray();\n        $userData['links'] = $links->toArray();\n    \n        function findAvatar($name){\n            $directory = base_path('assets/img');\n            $files = scandir($directory);\n            $pathinfo = \"error.error\";\n            foreach($files as $file) {\n            if (strpos($file, $name.'.') !== false) {\n            $pathinfo = \"/img/\" . $name. \".\" . pathinfo($file, PATHINFO_EXTENSION);\n            }}\n            return $pathinfo;\n          }\n\n        if (file_exists(base_path(findAvatar($userId)))){\n            $imagePath = base_path(findAvatar($userId));\n            $imageData = base64_encode(file_get_contents($imagePath));\n            $userData['image_data'] = $imageData;\n    \n            $imageExtension = pathinfo($imagePath, PATHINFO_EXTENSION);\n            $userData['image_extension'] = $imageExtension;\n        }\n    \n        $domain = $_SERVER['HTTP_HOST'];\n        $date = date('Y-m-d_H-i-s');\n        $fileName = \"user_data-$domain-$date.json\";\n        $headers = [\n            'Content-Type' => 'application/json',\n            'Content-Disposition' => 'attachment; filename=\"'.$fileName.'\"',\n        ];\n        return response()->json($userData, 200, $headers);\n    \n        return back();\n    }    \n\n    public function importData(Request $request)\n    {\n        try {\n            // Get the JSON data from the uploaded file\n            if (!$request->hasFile('import') || !$request->file('import')->isValid()) {\n                throw new \\Exception('File not uploaded or is faulty');\n            }\n            $file = $request->file('import');\n            $jsonString = $file->get();\n            $userData = json_decode($jsonString, true);\n    \n            // Update the authenticated user's profile data if defined in the JSON file\n            $user = auth()->user();\n            if (isset($userData['name'])) {\n                $user->name = $userData['name'];\n            }\n            if (isset($userData['littlelink_name'])) {\n                $user->littlelink_name = $userData['littlelink_name'];\n            }\n            if (isset($userData['littlelink_description'])) {\n                $user->littlelink_description = $userData['littlelink_description'];\n            }\n            if (isset($userData['image_data'])) {\n                // Decode the image data from Base64\n                $imageData = base64_decode($userData['image_data']);\n                \n                // Save the image to the correct path with the correct file name and extension\n                $filename = $user->id . '.' . $userData['image_extension'];\n                file_put_contents(base_path('img/' . $filename), $imageData);\n                \n                // Update the user's image field with the correct file name\n                $user->image = $filename;\n            }\n            $user->save();\n    \n            // Delete all links for the authenticated user\n            Link::where('user_id', $user->id)->delete();\n    \n            // Loop through each link in $userData and create a new link for the user\n            foreach ($userData['links'] as $linkData) {\n                $newLink = new Link();\n    \n                // Copy over the link data from $linkData to $newLink\n                $newLink->button_id = $linkData['button_id'];\n                $newLink->link = $linkData['link'];\n                $newLink->title = $linkData['title'];\n                $newLink->order = $linkData['order'];\n                $newLink->click_number = $linkData['click_number'];\n                $newLink->up_link = $linkData['up_link'];\n                $newLink->custom_css = $linkData['custom_css'];\n                $newLink->custom_icon = $linkData['custom_icon'];\n    \n                // Set the user ID to the current user's ID\n                $newLink->user_id = $user->id;\n    \n                // Save the new link to the database\n                $newLink->save();\n            }\n    \n            return redirect('studio/profile')->with('success', __('messages.Profile updated successfully!'));\n        } catch (\\Exception $e) {\n            return redirect('studio/profile')->with('error', __('messages.An error occurred while updating your profile.'));\n        }\n    }\n    \n\n    //Edit/save page icons\n    public function editIcons(request $request)\n    {\n\n        function searchIcon($icon)\n        {\n            $iconId = DB::table('links')\n            ->where('user_id', Auth::id())\n            ->where('title', $icon)\n            ->where('button_id', 94)\n            ->value('id');\n        \n        if (is_null($iconId)){\n            return false;\n        } else {\n            return $iconId;\n        }\n        }\n\n        function addIcon($icon, $link){\n        $userId = Auth::user()->id;\n        $links = new Link;\n        $links->link = $link;\n        $links->user_id = $userId;\n        $links->title = $icon;\n        $links->button_id = '94';\n        $links->save();\n        $links->order = ($links->id - 1);\n        $links->save();\n    }\n\n        function updateIcon($icon, $link){\n        Link::where('id', searchIcon($icon))->update([\n            'button_id' => 94,\n            'link' => $link,\n            'title' => $icon\n        ]);\n    }\n\n    function saveIcon($icon, $link){\n    if(isset($link)){\n        if(searchIcon($icon) != NULL){\n            updateIcon($icon, $link);\n        }else{\n            addIcon($icon, $link);}\n    }   \n}\n\n\n\n\n    saveIcon('mastodon', $request->mastodon);\n\n    saveIcon('instagram', $request->instagram);\n\n    saveIcon('twitter', $request->twitter);\n\n    saveIcon('facebook', $request->facebook);\n\n    saveIcon('github', $request->github);\n\n    saveIcon('linkedin', $request->linkedin);\n\n    saveIcon('tiktok', $request->tiktok);\n\n    saveIcon('discord', $request->discord);\n\n    saveIcon('youtube', $request->youtube);\n\n    saveIcon('snapchat', $request->snapchat);\n\n    saveIcon('reddit', $request->reddit);\n\n    saveIcon('pinterest', $request->pinterest);\n\n    saveIcon('telegram', $request->telegram);\n\n    saveIcon('whatsapp', $request->whatsapp);\n\n    saveIcon('twitch', $request->twitch);\n\n\n\n\n        return Redirect('studio/links#icons');\n\n    }\n\n}"], "fixing_code": ["<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse Cohensive\\OEmbed\\Facades\\OEmbed;\nuse Illuminate\\Support\\Facades\\Schema;\nuse Illuminate\\Support\\Facades\\Route;\nuse Illuminate\\Support\\Facades\\Response;\nuse JeroenDesloovere\\VCard\\VCard;\nuse Illuminate\\Validation\\Rule;\nuse Illuminate\\Support\\Facades\\Validator;\n\nuse Auth;\nuse DB;\nuse ZipArchive;\nuse File;\n\nuse App\\Models\\User;\nuse App\\Models\\Button;\nuse App\\Models\\Link;\nuse App\\Models\\LinkType;\nuse App\\Models\\UserData;\n\n\n//Function tests if string starts with certain string (used to test for illegal strings)\nfunction stringStartsWith($haystack, $needle, $case = true)\n{\n    if ($case) {\n        return strpos($haystack, $needle, 0) === 0;\n    }\n    return stripos($haystack, $needle, 0) === 0;\n}\n\n//Function tests if string ends with certain string (used to test for illegal strings)\nfunction stringEndsWith($haystack, $needle, $case = true)\n{\n    $expectedPosition = strlen($haystack) - strlen($needle);\n    if ($case) {\n        return strrpos($haystack, $needle, 0) === $expectedPosition;\n    }\n    return strripos($haystack, $needle, 0) === $expectedPosition;\n}\n\nclass UserController extends Controller\n{\n\n    //Statistics of the number of clicks and links\n    public function index()\n    {\n        $userId = Auth::user()->id;\n\n        $littlelink_name = Auth::user()->littlelink_name;\n        $userinfo = User::find($userId);\n\n        $links = Link::where('user_id', $userId)->select('link')->count();\n        $clicks = Link::where('user_id', $userId)->sum('click_number');\n        $topLinks = Link::where('user_id', $userId)->orderby('click_number', 'desc')\n            ->whereNotNull('link')->where('link', '<>', '')\n            ->take(5)->get();\n\n        $pageStats = [\n            'visitors' => [\n                'all' => visits('App\\Models\\User', $littlelink_name)->count(),\n                'day' => visits('App\\Models\\User', $littlelink_name)->period('day')->count(),\n                'week' => visits('App\\Models\\User', $littlelink_name)->period('week')->count(),\n                'month' => visits('App\\Models\\User', $littlelink_name)->period('month')->count(),\n                'year' => visits('App\\Models\\User', $littlelink_name)->period('year')->count(),\n            ],\n            'os' => visits('App\\Models\\User', $littlelink_name)->operatingSystems(),\n            'referers' => visits('App\\Models\\User', $littlelink_name)->refs(),\n            'countries' => visits('App\\Models\\User', $littlelink_name)->countries(),\n        ];\n\n\n\n        return view('studio/index', ['greeting' => $userinfo->name, 'toplinks' => $topLinks, 'links' => $links, 'clicks' => $clicks, 'pageStats' => $pageStats]);\n    }\n\n    //Show littlelink page. example => http://127.0.0.1:8000/+admin\n    public function littlelink(request $request)\n    {\n        $littlelink_name = $request->littlelink;\n        $id = User::select('id')->where('littlelink_name', $littlelink_name)->value('id');\n\n        if (empty($id)) {\n            return abort(404);\n        }\n     \n        $userinfo = User::select('id', 'name', 'littlelink_name', 'littlelink_description', 'theme', 'role')->where('id', $id)->first();\n        $information = User::select('name', 'littlelink_name', 'littlelink_description', 'theme')->where('id', $id)->get();\n        \n        $links = DB::table('links')->join('buttons', 'buttons.id', '=', 'links.button_id')->select('links.link', 'links.id', 'links.button_id', 'links.title', 'links.custom_css', 'links.custom_icon', 'buttons.name')->where('user_id', $id)->orderBy('up_link', 'asc')->orderBy('order', 'asc')->get();\n\n        return view('littlelink', ['userinfo' => $userinfo, 'information' => $information, 'links' => $links, 'littlelink_name' => $littlelink_name]);\n    }\n\n    //Show littlelink page as home page if set in config\n    public function littlelinkhome(request $request)\n    {\n        $littlelink_name = env('HOME_URL');\n        $id = User::select('id')->where('littlelink_name', $littlelink_name)->value('id');\n\n        if (empty($id)) {\n            return abort(404);\n        }\n     \n        $userinfo = User::select('id', 'name', 'littlelink_name', 'littlelink_description', 'theme', 'role')->where('id', $id)->first();\n        $information = User::select('name', 'littlelink_name', 'littlelink_description', 'theme')->where('id', $id)->get();\n        \n        $links = DB::table('links')->join('buttons', 'buttons.id', '=', 'links.button_id')->select('links.link', 'links.id', 'links.button_id', 'links.title', 'links.custom_css', 'links.custom_icon', 'buttons.name')->where('user_id', $id)->orderBy('up_link', 'asc')->orderBy('order', 'asc')->get();\n\n        return view('littlelink', ['userinfo' => $userinfo, 'information' => $information, 'links' => $links, 'littlelink_name' => $littlelink_name]);\n    }\n\n    //Show add/update form\n    public function AddUpdateLink($id = 0)\n    {\n\n        if ($id !== 0) {\n            $linkData = Link::find($id);\n        } elseif ($id == 0) {\n            $linkData = new Link(['typename' => 'link', 'id'=>'0']);\n        } else {\n            $linkData = new Link(['typename' => 'link', 'id'=>'0']);\n        }\n        $data['LinkTypes'] = LinkType::get();\n        $data['LinkData'] = $linkData;\n        $data['LinkID'] = $id;\n        $data['linkTypeID'] = \"1\";\n        $data['title'] = \"Predefined Site\";\n\n        if (Route::currentRouteName() != 'showButtons') {\n            $links = DB::table('links')->where('id', $id)->first();\n\n            $bid = $links->button_id;\n\n            if($bid == 1 or $bid == 2){\n                $data['linkTypeID'] = \"2\";\n            } elseif ($bid == 42) {\n                $data['linkTypeID'] = \"3\";\n            } elseif ($bid == 43) {\n                $data['linkTypeID'] = \"4\";\n            } elseif ($bid == 93) {\n                $data['linkTypeID'] = \"5\";\n            } elseif ($bid == 6 or $bid == 7) {\n                $data['linkTypeID'] = \"6\";\n            } elseif ($bid == 44) {\n                $data['linkTypeID'] = \"7\";\n            } elseif ($bid == 96) {\n                $data['linkTypeID'] = \"8\";\n            } else {\n                $data['linkTypeID'] = \"1\";\n            }\n\n            $data['title'] = LinkType::where('id', $data['linkTypeID'])->value('title');\n        }\n\n        foreach ($data['LinkTypes']->toArray() as $key => $val) {\n            if ($val['typename'] === $linkData['typename']) {\n                $data['SelectedLinkType'] = $val;\n                break;\n            }\n        }\n        \n        return view('studio/edit-link', $data);\n    }\n\n    //Save add link\n    public function saveLink(request $request)\n    {\n\n        $linkType = LinkType::find($request->linktype_id);\n        $LinkTitle = ($request->link_text ?? $request->link_title) ?? $request->title;\n        $LinkURL = $request->link_url ?? $request->link;\n\n        $OrigLink = Link::find($request->linkid);\n\n        $customParams = [];\n        foreach ($request->all() as $key => $param) {\n            //echo $key . \" = \" . $param . \"<br />\";\n            if (str_starts_with($key, \"_\") ||  in_array($key, ['linktype_id', 'linktype_title', 'link_text', 'link_url']))\n                continue;\n\n            $customParams[$key] = $param;\n        }\n\n        $userId = Auth::user()->id;\n        $button = Button::where('name', $request->button)->first();\n\n        if ($button && empty($LinkTitle))\n            $LinkTitle = ucwords($button->name);\n\n        if ($linkType->typename == 'video' && empty($LinkTitle)) {\n            $embed = OEmbed::get($LinkURL);\n            if ($embed) {\n                $LinkTitle = $embed->data()['title'];\n            }\n        }\n\n        $message = (ucwords($button?->name) ?? ucwords($linkType->typename)). \" has been \";\n\n        if ($OrigLink) {\n            //EDITING EXISTING\n\n            $isCustomWebsite = $customParams['GetSiteIcon'] ?? null;\n            $SpacerHeight = $customParams['height'] ?? null;\n\n                if($linkType->typename == \"link\" and $isCustomWebsite == \"1\"){\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $LinkTitle,\n                        'button_id' => \"2\",\n                    ]);\n                }elseif($linkType->typename == \"link\"){\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $LinkTitle,\n                        'button_id' => \"1\",\n                    ]);\n                }elseif($linkType->typename == \"spacer\"){\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $customParams['height'] ?? null,\n                        'button_id' => \"43\",\n                    ]);\n                }elseif($linkType->typename == \"heading\"){\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $LinkTitle,\n                        'button_id' => \"42\",\n                    ]);\n                }elseif($linkType->typename == \"text\"){\n                    $OrigLink->update([\n                        'button_id' => \"93\",\n                        'title' => $request->text,\n                    ]);\n                }elseif($linkType->typename == \"email\"){\n                    $LinkURL = \"mailto:\".$LinkURL;\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'button_id' => $button?->id,\n                        'title' => $LinkTitle,\n                    ]);\n                }elseif($linkType->typename == \"telephone\"){\n                    $LinkURL = \"tel:\".$LinkURL;\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'button_id' => $button?->id,\n                        'title' => $LinkTitle,\n                    ]);\n                }elseif($linkType->typename == \"vcard\"){\n\n                    $prefix = $request->input('prefix');\n                    $firstName = $request->input('first_name');\n                    $middleName = $request->input('middle_name');\n                    $lastName = $request->input('last_name');\n                    $suffix = $request->input('suffix');\n                    $nickname = $request->input('nickname');\n                    $organization = $request->input('organization');\n                    $vtitle = $request->input('vtitle');\n                    $role = $request->input('role');\n                    $workUrl = $request->input('work_url');\n                    $email = $request->input('email');\n                    $workEmail = $request->input('work_email');\n                    $homePhone = $request->input('home_phone');\n                    $workPhone = $request->input('work_phone');\n                    $cellPhone = $request->input('cell_phone');\n                    $homeAddressLabel = $request->input('home_address_label');\n                    $homeAddressStreet = $request->input('home_address_street');\n                    $homeAddressCity = $request->input('home_address_city');\n                    $homeAddressState = $request->input('home_address_state');\n                    $homeAddressZip = $request->input('home_address_zip');\n                    $homeAddressCountry = $request->input('home_address_country');\n                    $workAddressLabel = $request->input('work_address_label');\n                    $workAddressStreet = $request->input('work_address_street');\n                    $workAddressCity = $request->input('work_address_city');\n                    $workAddressState = $request->input('work_address_state');\n                    $workAddressZip = $request->input('work_address_zip');\n                    $workAddressCountry = $request->input('work_address_country');\n    \n                    // Create an array with all the input fields\n                    $data = [\n                        'prefix' => $request->input('prefix'),\n                        'first_name' => $request->input('first_name'),\n                        'middle_name' => $request->input('middle_name'),\n                        'last_name' => $request->input('last_name'),\n                        'suffix' => $request->input('suffix'),\n                        'nickname' => $request->input('nickname'),\n                        'organization' => $request->input('organization'),\n                        'vtitle' => $request->input('vtitle'),\n                        'role' => $request->input('role'),\n                        'work_url' => $request->input('work_url'),\n                        'email' => $request->input('email'),\n                        'work_email' => $request->input('work_email'),\n                        'home_phone' => $request->input('home_phone'),\n                        'work_phone' => $request->input('work_phone'),\n                        'cell_phone' => $request->input('cell_phone'),\n                        'home_address_label' => $request->input('home_address_label'),\n                        'home_address_street' => $request->input('home_address_street'),\n                        'home_address_city' => $request->input('home_address_city'),\n                        'home_address_state' => $request->input('home_address_state'),\n                        'home_address_zip' => $request->input('home_address_zip'),\n                        'home_address_country' => $request->input('home_address_country'),\n                        'work_address_label' => $request->input('work_address_label'),\n                        'work_address_street' => $request->input('work_address_street'),\n                        'work_address_city' => $request->input('work_address_city'),\n                        'work_address_state' => $request->input('work_address_state'),\n                        'work_address_zip' => $request->input('work_address_zip'),\n                        'work_address_country' => $request->input('work_address_country'),\n                    ];\n                    \n                    // Convert the array to JSON format\n                    $json = json_encode($data);\n                    \n                    // Set the JSON as the variable $links->link, or null if the JSON is empty\n                    $LinkURL = $json ? $json : null;        \n\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'button_id' => 96,\n                        'title' => $LinkTitle,\n                    ]);\n                }else{\n                    $OrigLink->update([\n                        'link' => $LinkURL,\n                        'title' => $LinkTitle,\n                        'button_id' => $button?->id,\n                    ]);\n                }\n                \n            $message .=\"updated\";\n\n        } else {\n            // ADDING NEW\n\n            $isCustomWebsite = $customParams['GetSiteIcon'] ?? null;\n            $SpacerHeight = $customParams['height'] ?? null;\n            \n            $links = new Link;\n            $links->link = $LinkURL;\n            $links->user_id = $userId;\n            if($linkType->typename == \"spacer\"){\n            $links->title = $SpacerHeight;\n            }else{\n            $links->title = $LinkTitle;\n            }\n            if($linkType->typename == \"link\" and $isCustomWebsite == \"1\"){\n                $links->button_id = \"2\";\n            }elseif($linkType->typename == \"link\"){\n                $links->button_id = \"1\";\n            }elseif($linkType->typename == \"spacer\"){\n                $links->button_id = \"43\";\n            }elseif($linkType->typename == \"heading\"){\n                $links->button_id = \"42\";\n            }elseif($linkType->typename == \"text\"){\n                $links->button_id = \"93\";\n                $links->title = $request->text;\n            }elseif($linkType->typename == \"email\"){\n                $links->link = \"mailto:\".$links->link;\n                $links->button_id = $button?->id;\n            }elseif($linkType->typename == \"telephone\"){\n                $links->link = \"tel:\".$links->link;\n                $links->button_id = $button?->id;\n            }elseif($linkType->typename == \"vcard\"){\n\n                $prefix = $request->input('prefix');\n                $firstName = $request->input('first_name');\n                $middleName = $request->input('middle_name');\n                $lastName = $request->input('last_name');\n                $suffix = $request->input('suffix');\n                $nickname = $request->input('nickname');\n                $organization = $request->input('organization');\n                $vtitle = $request->input('vtitle');\n                $role = $request->input('role');\n                $workUrl = $request->input('work_url');\n                $email = $request->input('email');\n                $workEmail = $request->input('work_email');\n                $homePhone = $request->input('home_phone');\n                $workPhone = $request->input('work_phone');\n                $cellPhone = $request->input('cell_phone');\n                $homeAddressLabel = $request->input('home_address_label');\n                $homeAddressStreet = $request->input('home_address_street');\n                $homeAddressCity = $request->input('home_address_city');\n                $homeAddressState = $request->input('home_address_state');\n                $homeAddressZip = $request->input('home_address_zip');\n                $homeAddressCountry = $request->input('home_address_country');\n                $workAddressLabel = $request->input('work_address_label');\n                $workAddressStreet = $request->input('work_address_street');\n                $workAddressCity = $request->input('work_address_city');\n                $workAddressState = $request->input('work_address_state');\n                $workAddressZip = $request->input('work_address_zip');\n                $workAddressCountry = $request->input('work_address_country');\n\n                // Create an array with all the input fields\n                $data = [\n                    'prefix' => $request->input('prefix'),\n                    'first_name' => $request->input('first_name'),\n                    'middle_name' => $request->input('middle_name'),\n                    'last_name' => $request->input('last_name'),\n                    'suffix' => $request->input('suffix'),\n                    'nickname' => $request->input('nickname'),\n                    'organization' => $request->input('organization'),\n                    'vtitle' => $request->input('vtitle'),\n                    'role' => $request->input('role'),\n                    'work_url' => $request->input('work_url'),\n                    'email' => $request->input('email'),\n                    'work_email' => $request->input('work_email'),\n                    'home_phone' => $request->input('home_phone'),\n                    'work_phone' => $request->input('work_phone'),\n                    'cell_phone' => $request->input('cell_phone'),\n                    'home_address_label' => $request->input('home_address_label'),\n                    'home_address_street' => $request->input('home_address_street'),\n                    'home_address_city' => $request->input('home_address_city'),\n                    'home_address_state' => $request->input('home_address_state'),\n                    'home_address_zip' => $request->input('home_address_zip'),\n                    'home_address_country' => $request->input('home_address_country'),\n                    'work_address_label' => $request->input('work_address_label'),\n                    'work_address_street' => $request->input('work_address_street'),\n                    'work_address_city' => $request->input('work_address_city'),\n                    'work_address_state' => $request->input('work_address_state'),\n                    'work_address_zip' => $request->input('work_address_zip'),\n                    'work_address_country' => $request->input('work_address_country'),\n                ];\n                \n                // Convert the array to JSON format\n                $json = json_encode($data);\n                \n                // Set the JSON as the variable $links->link, or null if the JSON is empty\n                $links->link = $json ? $json : null;               \n\n                $links->button_id = 96;\n            }else{\n                $links->button_id = $button?->id;\n            }\n\n            if(empty($links->button_id)) {\n                return redirect(route('showButtons')); die;\n            }\n            \n            $links->save();\n\n            $links->order = ($links->id - 1);\n            $links->save();\n            $message .= \"added\";\n        }\n\n            if ($request->input('param') == 'add_more') {\n                return Redirect('studio/add-link')\n                ->with('success', $message);\n            } else {\n                return Redirect('studio/links')\n                ->with('success', $message);\n            }\n\n    }\n\n    public function sortLinks(Request $request)\n    {\n        $linkOrders  = $request->input(\"linkOrders\", []);\n        $currentPage = $request->input(\"currentPage\", 1);\n        $perPage     = $request->input(\"perPage\", 0);\n\n        if ($perPage == 0) {\n            $currentPage = 1;\n        }\n\n        $linkOrders = array_unique(array_filter($linkOrders));\n        if (!$linkOrders || $currentPage < 1) {\n            return response()->json([\n                'status' => 'ERROR',\n            ]);\n        }\n\n        $newOrder = $perPage * ($currentPage - 1);\n        $linkNewOrders = [];\n        foreach ($linkOrders as $linkId) {\n            if ($linkId < 0) {\n                continue;\n            }\n\n            $linkNewOrders[$linkId] = $newOrder;\n            Link::where(\"id\", $linkId)\n                ->update([\n                    'order' => $newOrder\n                ]);\n            $newOrder++;\n        }\n\n        return response()->json([\n            'status' => 'OK',\n            'linkOrders' => $linkNewOrders,\n        ]);\n    }\n\n\n    //Count the number of clicks and redirect to link\n    public function clickNumber(request $request)\n    {\n        $linkId = $request->id;\n        $link = Link::find($linkId);\n        $link = $link->link;\n\n        Link::where('id', $linkId)->increment('click_number', 1);\n\n        $response = redirect()->away($link);\n        $response->header('X-Robots-Tag', 'noindex, nofollow');\n\n        return $response;\n    }\n\n    //Download Vcard\n    public function vcard(request $request)\n    {\n        $linkId = $request->id;\n\n        // Find the link with the specified ID\n        $link = Link::findOrFail($linkId);\n\n        $json = $link->link;\n\n        // Decode the JSON to a PHP array\n        $data = json_decode($json, true);\n        \n        // Create a new vCard object\n        $vcard = new VCard();\n        \n        // Set the vCard properties from the $data array\n        $vcard->addName($data['last_name'], $data['first_name'], $data['middle_name'], $data['prefix'], $data['suffix']);\n        $vcard->addCompany($data['organization']);\n        $vcard->addJobtitle($data['vtitle']);\n        $vcard->addRole($data['role']);\n        $vcard->addEmail($data['email']);\n        $vcard->addEmail($data['work_email'], 'WORK');\n        $vcard->addURL($data['work_url'], 'WORK');\n        $vcard->addPhoneNumber($data['home_phone'], 'HOME');\n        $vcard->addPhoneNumber($data['work_phone'], 'WORK');\n        $vcard->addPhoneNumber($data['cell_phone'], 'CELL');\n        $vcard->addAddress($data['home_address_street'], '', $data['home_address_city'], $data['home_address_state'], $data['home_address_zip'], $data['home_address_country'], 'HOME');\n        $vcard->addAddress($data['work_address_street'], '', $data['work_address_city'], $data['work_address_state'], $data['work_address_zip'], $data['work_address_country'], 'WORK');\n        \n\n        // $vcard->addPhoto(base_path('img/1.png'));\n        \n        // Generate the vCard file contents\n        $file_contents = $vcard->getOutput();\n        \n        // Set the file headers for download\n        $headers = [\n            'Content-Type' => 'text/x-vcard',\n            'Content-Disposition' => 'attachment; filename=\"contact.vcf\"'\n        ];\n        \n        Link::where('id', $linkId)->increment('click_number', 1);\n\n        // Return the file download response\n        return response()->make($file_contents, 200, $headers);\n\n    }\n\n    //Show link, click number, up link in links page\n    public function showLinks()\n    {\n        $userId = Auth::user()->id;\n        $data['pagePage'] = 10;\n        \n        $data['links'] = Link::select('id', 'link', 'title', 'order', 'click_number', 'up_link', 'links.button_id')->where('user_id', $userId)->orderBy('up_link', 'asc')->orderBy('order', 'asc')->paginate(99999);\n        return view('studio/links', $data);\n    }\n\n    //Delete link\n    public function deleteLink(request $request)\n    {\n        $linkId = $request->id;\n\n        Link::where('id', $linkId)->delete();\n\n        $directory = base_path(\"assets/favicon/icons\");\n        $files = scandir($directory);\n        foreach($files as $file) {\n        if (strpos($file, $linkId.\".\") !== false) {\n        $pathinfo = pathinfo($file, PATHINFO_EXTENSION);}}\n        if (isset($pathinfo)) {\n        try{File::delete(base_path(\"assets/favicon/icons\").\"/\".$linkId.\".\".$pathinfo);} catch (exception $e) {}\n        }\n\n        return redirect('/studio/links');\n    }\n\n    //Delete icon\n    public function clearIcon(request $request)\n    {\n        $linkId = $request->id;\n\n        $directory = base_path(\"assets/favicon/icons\");\n        $files = scandir($directory);\n        foreach($files as $file) {\n        if (strpos($file, $linkId.\".\") !== false) {\n        $pathinfo = pathinfo($file, PATHINFO_EXTENSION);}}\n        if (isset($pathinfo)) {\n        try{File::delete(base_path(\"assets/favicon/icons\").\"/\".$linkId.\".\".$pathinfo);} catch (exception $e) {}\n        }\n\n        return redirect('/studio/links');\n    }\n\n    //Raise link on the littlelink page\n    public function upLink(request $request)\n    {\n        $linkId = $request->id;\n        $upLink = $request->up;\n\n        if ($upLink == 'yes') {\n            $up = 'no';\n        } elseif ($upLink == 'no') {\n            $up = 'yes';\n        }\n\n        Link::where('id', $linkId)->update(['up_link' => $up]);\n\n        return back();\n    }\n\n    //Show link to edit\n    public function showLink(request $request)\n    {\n        $linkId = $request->id;\n\n        $link = Link::where('id', $linkId)->value('link');\n        $title = Link::where('id', $linkId)->value('title');\n        $order = Link::where('id', $linkId)->value('order');\n        $custom_css = Link::where('id', $linkId)->value('custom_css');\n        $buttonId = Link::where('id', $linkId)->value('button_id');\n        $buttonName = Button::where('id', $buttonId)->value('name');\n\n        $buttons = Button::select('id', 'name')->orderBy('name', 'asc')->get();\n\n        return view('studio/edit-link', ['custom_css' => $custom_css, 'buttonId' => $buttonId, 'buttons' => $buttons, 'link' => $link, 'title' => $title, 'order' => $order, 'id' => $linkId, 'buttonName' => $buttonName]);\n    }\n\n    //Show custom CSS + custom icon\n    public function showCSS(request $request)\n    {\n        $linkId = $request->id;\n\n        $link = Link::where('id', $linkId)->value('link');\n        $title = Link::where('id', $linkId)->value('title');\n        $order = Link::where('id', $linkId)->value('order');\n        $custom_css = Link::where('id', $linkId)->value('custom_css');\n        $custom_icon = Link::where('id', $linkId)->value('custom_icon');\n        $buttonId = Link::where('id', $linkId)->value('button_id');\n\n        $buttons = Button::select('id', 'name')->get();\n\n        return view('studio/button-editor', ['custom_icon' => $custom_icon, 'custom_css' => $custom_css, 'buttonId' => $buttonId, 'buttons' => $buttons, 'link' => $link, 'title' => $title, 'order' => $order, 'id' => $linkId]);\n    }\n\n    //Save edit link\n    public function editLink(request $request)\n    {\n        $request->validate([\n            'link' => 'required',\n            'title' => 'required',\n            'button' => 'required',\n        ]);\n\n        if (stringStartsWith($request->link, 'http://') == 'true' or stringStartsWith($request->link, 'https://') == 'true' or stringStartsWith($request->link, 'mailto:') == 'true')\n            $link1 = $request->link;\n        else\n            $link1 = 'https://' . $request->link;\n        if (stringEndsWith($request->link, '/') == 'true')\n            $link = rtrim($link1, \"/ \");\n        else\n        $link = $link1;\n        $title = $request->title;\n        $order = $request->order;\n        $button = $request->button;\n        $linkId = $request->id;\n\n        $buttonId = Button::select('id')->where('name', $button)->value('id');\n\n        Link::where('id', $linkId)->update(['link' => $link, 'title' => $title, 'order' => $order, 'button_id' => $buttonId]);\n\n        return redirect('/studio/links');\n    }\n\n    //Save edit custom CSS + custom icon\n    public function editCSS(request $request)\n    {\n        $linkId = $request->id;\n        $custom_icon = $request->custom_icon;\n        $custom_css = $request->custom_css;\n\n        if ($request->custom_css == \"\" and $request->custom_icon = !\"\") {\n            Link::where('id', $linkId)->update(['custom_icon' => $custom_icon]);\n        } elseif ($request->custom_icon == \"\" and $request->custom_css = !\"\") {\n            Link::where('id', $linkId)->update(['custom_css' => $custom_css]);\n        } else {\n            Link::where('id', $linkId)->update([]);\n        }\n        return Redirect('#result');\n    }\n\n    //Show littlelinke page for edit\n    public function showPage(request $request)\n    {\n        $userId = Auth::user()->id;\n\n        $data['pages'] = User::where('id', $userId)->select('littlelink_name', 'littlelink_description', 'image', 'name')->get();\n\n        return view('/studio/page', $data);\n    }\n\n    //Save littlelink page (name, description, logo)\n    public function editPage(Request $request)\n    {\n        $userId = Auth::user()->id;\n        $littlelink_name = Auth::user()->littlelink_name;\n    \n        $validator = Validator::make($request->all(), [\n            'littlelink_name' => [\n                'sometimes',\n                'max:255',\n                'string',\n                'isunique:users,id,'.$userId,\n            ],\n            'name' => 'sometimes|max:255|string',\n            'image' => 'sometimes|image|mimes:jpeg,jpg,png,webp|max:2048', // Max file size: 2MB\n        ], [\n            'littlelink_name.unique' => __('messages.That handle has already been taken'),\n            'image.image' => __('messages.The selected file must be an image'),\n            'image.mimes' => __('messages.The image must be') . ' JPEG, JPG, PNG, webP.',\n            'image.max' => __('messages.The image size should not exceed 2MB'),\n        ]);\n    \n        if ($validator->fails()) {\n            return redirect('/studio/page')->withErrors($validator)->withInput();\n        }\n    \n        $profilePhoto = $request->file('image');\n        $pageName = $request->littlelink_name;\n        $pageDescription = strip_tags($request->pageDescription, '<a><p><strong><i><ul><ol><li><blockquote><h2><h3><h4>');\n        $pageDescription = preg_replace(\"/<a([^>]*)>/i\", \"<a $1 rel=\\\"noopener noreferrer nofollow\\\">\", $pageDescription);\n        $name = $request->name;\n        $checkmark = $request->checkmark;\n        $sharebtn = $request->sharebtn;\n    \n        User::where('id', $userId)->update([\n            'littlelink_name' => $pageName,\n            'littlelink_description' => $pageDescription,\n            'name' => $name\n        ]);\n    \n        if ($request->hasFile('image')) {\n            $fileName = $userId . '_' . time() . \".\" . $profilePhoto->extension();\n            $profilePhoto->move(base_path('assets/img'), $fileName);\n        }\n    \n        if ($checkmark == \"on\") {\n            UserData::saveData($userId, 'checkmark', true);\n        } else {\n            UserData::saveData($userId, 'checkmark', false);\n        }\n    \n        if ($sharebtn == \"on\") {\n            UserData::saveData($userId, 'disable-sharebtn', false);\n        } else {\n            UserData::saveData($userId, 'disable-sharebtn', true);\n        }\n    \n        return Redirect('/studio/page');\n    }\n\n    //Upload custom theme background image\n    public function themeBackground(Request $request)\n    {\n        $userId = Auth::user()->id;\n        $littlelink_name = Auth::user()->littlelink_name;\n    \n        $request->validate([\n            'image' => 'required|image|mimes:jpeg,jpg,png,webp,gif|max:2048', // Max file size: 2MB\n        ], [\n            'image.required' => __('messages.Please select an image'),\n            'image.image' => __('messages.The selected file must be an image'),\n            'image.mimes' => __('messages.The image must be') . ' JPEG, JPG, PNG, webP, GIF.',\n            'image.max' => __('messages.The image size should not exceed 2MB'),\n        ]);\n    \n        $customBackground = $request->file('image');\n    \n        if ($customBackground) {\n            $directory = base_path('assets/img/background-img/');\n            $files = scandir($directory);\n            $pathinfo = \"error.error\";\n            foreach ($files as $file) {\n                if (strpos($file, $userId . '.') !== false) {\n                    $pathinfo = $userId . \".\" . pathinfo($file, PATHINFO_EXTENSION);\n                }\n            }\n    \n            if (file_exists(base_path('assets/img/background-img/') . $pathinfo)) {\n                File::delete(base_path('assets/img/background-img/') . $pathinfo);\n            }\n    \n            $fileName = $userId . '_' . time() . \".\" . $customBackground->extension();\n            $customBackground->move(base_path('assets/img/background-img/'), $fileName);\n    \n            if (extension_loaded('imagick')) {\n                $imagePath = base_path('assets/img/background-img/') . $fileName;\n                $image = new \\Imagick($imagePath);\n                $image->stripImage();\n                $image->writeImage($imagePath);\n            }\n    \n            return redirect('/studio/theme');\n        }\n    \n        return redirect('/studio/theme')->with('error', 'Please select a valid image file.');\n    }\n\n    //Delete custom background image\n    public function removeBackground()\n    {\n\n        $user_id = Auth::user()->id;\n        $path = findBackground($user_id);\n        $path = base_path('assets/img/background-img/'.$path);\n        \n        if (File::exists($path)) {\n            File::delete($path);\n        }\n\n        return back();\n    }\n\n\n    //Show custom theme\n    public function showTheme(request $request)\n    {\n        $userId = Auth::user()->id;\n\n        $data['pages'] = User::where('id', $userId)->select('littlelink_name', 'theme')->get();\n\n        return view('/studio/theme', $data);\n    }\n\n    //Save custom theme\n    public function editTheme(request $request)\n    {\n        $request->validate([\n            'zip' => 'sometimes|mimes:zip',\n        ]);\n\n        $userId = Auth::user()->id;\n\n        $zipfile = $request->file('zip');\n\n        $theme = $request->theme;\n        $message = \"\";\n\n        User::where('id', $userId)->update(['theme' => $theme]);\n\n\n\n        if (!empty($zipfile)) {\n\n            $zipfile->move(base_path('/themes'), \"temp.zip\");\n\n            $zip = new ZipArchive;\n            $zip->open(base_path() . '/themes/temp.zip');\n            $zip->extractTo(base_path() . '/themes');\n            $zip->close();\n            unlink(base_path() . '/themes/temp.zip');\n\n            // Removes version numbers from folder.\n\n            $folder = base_path('themes');\n            $regex = '/[0-9.-]/';\n            $files = scandir($folder);\n\n            foreach ($files as $file) {\n                if ($file !== '.' && $file !== '..') {\n                    if (preg_match($regex, $file)) {\n                        $new_file = preg_replace($regex, '', $file);\n                        File::copyDirectory($folder . '/' . $file, $folder . '/' . $new_file);\n                        $dirname = $folder . '/' . $file;\n                        if (strtoupper(substr(PHP_OS, 0, 3)) === 'WIN') {\n                            system('rmdir ' . escapeshellarg($dirname) . ' /s /q');\n                        } else {\n                            system(\"rm -rf \" . escapeshellarg($dirname));\n                        }\n                    }\n                }\n            }\n        }\n\n\n        return Redirect('/studio/theme')->with(\"success\", $message);\n    }\n\n    //Show user (name, email, password)\n    public function showProfile(request $request)\n    {\n        $userId = Auth::user()->id;\n\n        $data['profile'] = User::where('id', $userId)->select('name', 'email', 'role')->get();\n\n        return view('/studio/profile', $data);\n    }\n\n    //Save user (name, email, password)\n    public function editProfile(request $request)\n    {\n        $request->validate([\n            'name' => 'sometimes|required|unique:users',\n            'email' => 'sometimes|required|email|unique:users',\n            'password' => 'sometimes|min:8',\n        ]);\n\n        $userId = Auth::user()->id;\n\n        $name = $request->name;\n        $email = $request->email;\n        $password = Hash::make($request->password);\n\n        if ($request->name != '') {\n            User::where('id', $userId)->update(['name' => $name]);\n        } elseif ($request->email != '') {\n            User::where('id', $userId)->update(['email' => $email]);\n        } elseif ($request->password != '') {\n            User::where('id', $userId)->update(['password' => $password]);\n            Auth::logout();\n        }\n        return back();\n    }\n\n    //Show user theme credit page\n    public function theme(request $request)\n    {\n        $littlelink_name = $request->littlelink;\n        $id = User::select('id')->where('littlelink_name', $littlelink_name)->value('id');\n\n        if (empty($id)) {\n            return abort(404);\n        }\n\n        $userinfo = User::select('name', 'littlelink_name', 'littlelink_description', 'theme')->where('id', $id)->first();\n        $information = User::select('name', 'littlelink_name', 'littlelink_description', 'theme')->where('id', $id)->get();\n\n        $links = DB::table('links')->join('buttons', 'buttons.id', '=', 'links.button_id')->select('links.link', 'links.id', 'links.button_id', 'links.title', 'links.custom_css', 'links.custom_icon', 'buttons.name')->where('user_id', $id)->orderBy('up_link', 'asc')->orderBy('order', 'asc')->get();\n\n        return view('components/theme', ['userinfo' => $userinfo, 'information' => $information, 'links' => $links, 'littlelink_name' => $littlelink_name]);\n    }\n\n    //Delete existing user\n    public function deleteUser(request $request)\n    {\n\n        // echo $request->id;\n        // echo \"<br>\";\n        // echo Auth::id();\n        $id = $request->id;\n\n    if($id == Auth::id() and $id != \"1\") {\n\n        Link::where('user_id', $id)->delete();\n\n        $user = User::find($id);\n\n        Schema::disableForeignKeyConstraints();\n        $user->forceDelete();\n        Schema::enableForeignKeyConstraints();\n    }\n\n        return redirect('/');\n    }\n\n    //Delete profile picture\n    public function delProfilePicture()\n    {\n        $user_id = Auth::user()->id;\n        $path = base_path(findAvatar($user_id));\n        \n        if (File::exists($path)) {\n            File::delete($path);\n        }\n\n        return back();\n    }\n\n    //Export user links\n    public function exportLinks(request $request)\n    {\n        $userId = Auth::id();\n        $user = User::find($userId);\n        $links = Link::where('user_id', $userId)->get();\n        \n        if (!$user) {\n            // handle the case where the user is null\n            return response()->json(['message' => 'User not found'], 404);\n        }\n\n        $userData['links'] = $links->toArray();\n\n        $domain = $_SERVER['HTTP_HOST'];\n        $date = date('Y-m-d_H-i-s');\n        $fileName = \"links-$domain-$date.json\";\n        $headers = [\n            'Content-Type' => 'application/json',\n            'Content-Disposition' => 'attachment; filename=\"'.$fileName.'\"',\n        ];\n        return response()->json($userData, 200, $headers);\n\n        return back();\n    }\n\n    //Export all user data\n    public function exportAll(Request $request)\n    {\n        $userId = Auth::id();\n        $user = User::find($userId);\n        $links = Link::where('user_id', $userId)->get();\n    \n        if (!$user) {\n            // handle the case where the user is null\n            return response()->json(['message' => 'User not found'], 404);\n        }\n    \n        $userData = $user->toArray();\n        $userData['links'] = $links->toArray();\n    \n        function findAvatar($name){\n            $directory = base_path('assets/img');\n            $files = scandir($directory);\n            $pathinfo = \"error.error\";\n            foreach($files as $file) {\n            if (strpos($file, $name.'.') !== false) {\n            $pathinfo = \"/img/\" . $name. \".\" . pathinfo($file, PATHINFO_EXTENSION);\n            }}\n            return $pathinfo;\n          }\n\n        if (file_exists(base_path(findAvatar($userId)))){\n            $imagePath = base_path(findAvatar($userId));\n            $imageData = base64_encode(file_get_contents($imagePath));\n            $userData['image_data'] = $imageData;\n    \n            $imageExtension = pathinfo($imagePath, PATHINFO_EXTENSION);\n            $userData['image_extension'] = $imageExtension;\n        }\n    \n        $domain = $_SERVER['HTTP_HOST'];\n        $date = date('Y-m-d_H-i-s');\n        $fileName = \"user_data-$domain-$date.json\";\n        $headers = [\n            'Content-Type' => 'application/json',\n            'Content-Disposition' => 'attachment; filename=\"'.$fileName.'\"',\n        ];\n        return response()->json($userData, 200, $headers);\n    \n        return back();\n    }    \n\n    public function importData(Request $request)\n    {\n        try {\n            // Get the JSON data from the uploaded file\n            if (!$request->hasFile('import') || !$request->file('import')->isValid()) {\n                throw new \\Exception('File not uploaded or is faulty');\n            }\n            $file = $request->file('import');\n            $jsonString = $file->get();\n            $userData = json_decode($jsonString, true);\n    \n            // Update the authenticated user's profile data if defined in the JSON file\n            $user = auth()->user();\n            if (isset($userData['name'])) {\n                $user->name = $userData['name'];\n            }\n            if (isset($userData['littlelink_name'])) {\n                $user->littlelink_name = $userData['littlelink_name'];\n            }\n            if (isset($userData['littlelink_description'])) {\n                $user->littlelink_description = $userData['littlelink_description'];\n            }\n            if (isset($userData['image_data'])) {\n                // Decode the image data from Base64\n                $imageData = base64_decode($userData['image_data']);\n                \n                // Save the image to the correct path with the correct file name and extension\n                $filename = $user->id . '.' . $userData['image_extension'];\n                file_put_contents(base_path('img/' . $filename), $imageData);\n                \n                // Update the user's image field with the correct file name\n                $user->image = $filename;\n            }\n            $user->save();\n    \n            // Delete all links for the authenticated user\n            Link::where('user_id', $user->id)->delete();\n    \n            // Loop through each link in $userData and create a new link for the user\n            foreach ($userData['links'] as $linkData) {\n                $newLink = new Link();\n    \n                // Copy over the link data from $linkData to $newLink\n                $newLink->button_id = $linkData['button_id'];\n                $newLink->link = $linkData['link'];\n                $newLink->title = $linkData['title'];\n                $newLink->order = $linkData['order'];\n                $newLink->click_number = $linkData['click_number'];\n                $newLink->up_link = $linkData['up_link'];\n                $newLink->custom_css = $linkData['custom_css'];\n                $newLink->custom_icon = $linkData['custom_icon'];\n    \n                // Set the user ID to the current user's ID\n                $newLink->user_id = $user->id;\n    \n                // Save the new link to the database\n                $newLink->save();\n            }\n    \n            return redirect('studio/profile')->with('success', __('messages.Profile updated successfully!'));\n        } catch (\\Exception $e) {\n            return redirect('studio/profile')->with('error', __('messages.An error occurred while updating your profile.'));\n        }\n    }\n    \n\n    //Edit/save page icons\n    public function editIcons(request $request)\n    {\n\n        function searchIcon($icon)\n        {\n            $iconId = DB::table('links')\n            ->where('user_id', Auth::id())\n            ->where('title', $icon)\n            ->where('button_id', 94)\n            ->value('id');\n        \n        if (is_null($iconId)){\n            return false;\n        } else {\n            return $iconId;\n        }\n        }\n\n        function addIcon($icon, $link){\n        $userId = Auth::user()->id;\n        $links = new Link;\n        $links->link = $link;\n        $links->user_id = $userId;\n        $links->title = $icon;\n        $links->button_id = '94';\n        $links->save();\n        $links->order = ($links->id - 1);\n        $links->save();\n    }\n\n        function updateIcon($icon, $link){\n        Link::where('id', searchIcon($icon))->update([\n            'button_id' => 94,\n            'link' => $link,\n            'title' => $icon\n        ]);\n    }\n\n    function saveIcon($icon, $link){\n    if(isset($link)){\n        if(searchIcon($icon) != NULL){\n            updateIcon($icon, $link);\n        }else{\n            addIcon($icon, $link);}\n    }   \n}\n\n\n\n\n    saveIcon('mastodon', $request->mastodon);\n\n    saveIcon('instagram', $request->instagram);\n\n    saveIcon('twitter', $request->twitter);\n\n    saveIcon('facebook', $request->facebook);\n\n    saveIcon('github', $request->github);\n\n    saveIcon('linkedin', $request->linkedin);\n\n    saveIcon('tiktok', $request->tiktok);\n\n    saveIcon('discord', $request->discord);\n\n    saveIcon('youtube', $request->youtube);\n\n    saveIcon('snapchat', $request->snapchat);\n\n    saveIcon('reddit', $request->reddit);\n\n    saveIcon('pinterest', $request->pinterest);\n\n    saveIcon('telegram', $request->telegram);\n\n    saveIcon('whatsapp', $request->whatsapp);\n\n    saveIcon('twitch', $request->twitch);\n\n\n\n\n        return Redirect('studio/links#icons');\n\n    }\n\n}"], "filenames": ["app/Http/Controllers/UserController.php"], "buggy_code_start_loc": [932], "buggy_code_end_loc": [932], "fixing_code_start_loc": [933], "fixing_code_end_loc": [934], "type": "CWE-613", "message": "Insufficient Session Expiration in GitHub repository linkstackorg/linkstack prior to v4.2.9.", "other": {"cve": {"id": "CVE-2023-5838", "sourceIdentifier": "security@huntr.dev", "published": "2023-10-29T01:15:41.137", "lastModified": "2023-11-08T13:37:39.370", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Insufficient Session Expiration in GitHub repository linkstackorg/linkstack prior to v4.2.9."}, {"lang": "es", "value": "Caducidad de sesi\u00f3n insuficiente en el repositorio de GitHub linkstackorg/linkstack anterior a v4.2.9."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:H/UI:N/S:U/C:L/I:L/A:L", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 4.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 0.7, "impactScore": 3.4}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-613"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:linkstack:linkstack:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.2.9", "matchCriteriaId": "709F3049-BCBF-490A-9067-8874199BD9F9"}]}]}], "references": [{"url": "https://github.com/linkstackorg/linkstack/commit/02f620092255f07e1d0252a0190fd42ef773ba05", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.com/bounties/8f6feca3-386d-4897-801c-39b9e3e5eb03", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/linkstackorg/linkstack/commit/02f620092255f07e1d0252a0190fd42ef773ba05"}}