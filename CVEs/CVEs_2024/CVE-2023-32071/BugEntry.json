{"buggy_code": ["## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n## ---------------------------------------------------------------------------\n## If the Document to which XARs will be attached to doesn't exist, then\n## create it.\n## Note that the upload action could automatically create it but we want to\n## control the creation so that we can set the parent and thus not make it\n## orphaned + we set a save comment and make it a minor edit.\n## ---------------------------------------------------------------------------\n#set($importDoc = $xwiki.getDocument('XWiki.XWikiPreferences'))\n#if($importDoc.isNew())\n  $importDoc.setParent('XWiki.WebHome')\n  $importDoc.save(\"Creating document to which to attach XAR files to import\", true)\n#end\n## ---------------------------------------------------------------------------\n#if($request.xredirect)\n  #set($redirect = $request.xredirect)\n#else\n  #set($redirect = $xwiki.relativeRequestURL)\n#end\n#if(!$redirect)\n  #set($redirect = $importDoc.getURL('import', 'section=Import'))\n#end\n## ---------------------------------------------------------------------------\n## Import the documents from the selected XAR.\n## ---------------------------------------------------------------------------\n#if(\"$!{request.action}\" == 'import')\n<p class=\"legend\">$escapetool.xml($services.localization.render('import')) #if(\"$!{request.withversions}\" == '1')\n  $escapetool.xml($services.localization.render('export_addhistory'))#end</p>\n#template(\"imported.vm\")\n## ---------------------------------------------------------------------------\n## Browse the XARs and let the user select a XAR and the list of documents\n## to import from that XAR.\n## ---------------------------------------------------------------------------\n#else\n  #set($baseQueryString = \"editor=$!{request.editor}&amp;section=$!{request.section}\")\n  $xwiki.jsfx.use('js/xwiki/importer/import.js', true)##\n  $xwiki.ssfx.use('js/xwiki/importer/import.css', true)##\n  $xwiki.jsfx.use('uicomponents/widgets/upload.js', {'forceSkinAction': true, 'language': ${xcontext.locale}})##\n  $xwiki.ssfx.use('uicomponents/widgets/upload.css', true)##\n  <div id=\"import\" class=\"row\">\n    <div id=\"packagelist\" class=\"col-xs-12 col-sm-6 col-md-6\">\n      <div class=\"legend\">\n        $escapetool.xml($services.localization.render('core.importer.uploadPackage'))\n      </div>\n      ## Let the user upload XAR files.\n      <form action=\"$doc.getURL('upload')\" enctype=\"multipart/form-data\" method=\"post\" id=\"AddAttachment\">\n        <div>\n          ## CSRF prevention\n          <input type=\"hidden\" name=\"form_token\" value=\"$!escapetool.xml($services.csrf.getToken())\" />\n          <input type=\"hidden\" name=\"xredirect\" value=\"$!{escapetool.xml($redirect)}\" />\n          <fieldset id=\"attachform\">\n            ## Temporarily disabled, until we fix attachment name handling\n            ## <div><label id=\"xwikiuploadnamelabel\" for=\"xwikiuploadname\">$services.localization.render('core.viewers.attachments.upload.filename')</label></div>\n            <div><input id=\"xwikiuploadname\" type=\"hidden\" name=\"filename\" value=\"\" /></div>\n            <div class=\"package-upload\">\n              <label for=\"xwikiuploadfile\" class=\"hidden\">\n                $escapetool.xml($services.localization.render('core.viewers.attachments.upload.file'))\n              </label>\n              <input id=\"xwikiuploadfile\" type=\"file\" name=\"filepath\" class=\"uploadFileInput noitems\"\n                     data-max-file-size=\"$!escapetool.xml($xwiki.getSpacePreference('upload_maxsize'))\"/>\n              <span class=\"buttonwrapper\">\n                <input type=\"submit\" value=\"Upload\" class=\"button\"/>\n              </span>\n            </div>\n          </fieldset>\n        </div>\n      </form>\n    <div class=\"legend\">\n      $escapetool.xml($services.localization.render('core.importer.availablePackages'))\n    </div>\n    <div id=\"packagelistcontainer\">\n      #template('packagelist.vm')\n    </div> ## packagelistcontainer\n    </div> ##\u00a0packagelist\n    <div id=\"packagecontainer\" class=\"col-xs-12 col-sm-6 col-md-6\">\n      #if(\"$!request.file\" != '')\n        ##\n        ## If we get here, it means javascript is not activated on the user's browser (otherwise the attachment link\n        ## click would have been intercepted). We display a basic UI (list of checkboxes) to chose which documents in the archive to import.\n        ##\n        #set($attach = $doc.getAttachment($request.file))\n        #if($attach)\n          #set($package = $services.xar.getXarPackage($attach.contentInputStream, true))\n          #if(!$package)\n            #error(\"There was an error reading the file ${escapetool.xml(${request.file})}. $!xcontext.import_error\")\n          #else\n          <div class=\"legend\">\n            $escapetool.xml($services.localization.render('core.importer.availableDocuments'))\n          </div>\n          <div id=\"packageDescription\">\n            <div class=\"packageinfos\">\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package'))\n                </span>\n                <span class=\"filename\">$escapetool.xml($attach.filename)</span>\n              </div>\n              #if(\"$!package.packageName\" != '')\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package.description'))\n                </span>\n                <span class=\"name\">$escapetool.xml($package.packageName)</span>\n              </div>\n              #end\n              #if(\"$!package.packageVersion\" != '')\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package.version'))\n                </span>\n                <span class=\"version\">$escapetool.xml($package.packageVersion)</span>\n              </div>\n              #end\n              #if(\"$!package.packageAuthor\" != '')\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package.author'))\n                </span>\n                <span class=\"author\">$escapetool.xml($package.packageAuthor)</span>\n              </div>\n              #end\n              #if(\"$!package.packageLicense\" != '')\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package.licence'))\n                </span>\n                <span class=\"licence\">$escapetool.xml($package.packageLicense)</span>\n              </div>\n              #end\n            </div>\n            <form action=\"$!escapetool.xml($importaction)\" method=\"post\" class=\"static-importer\">\n              <div>\n                ## CSRF prevention\n                <input type=\"hidden\" name=\"form_token\" value=\"$!escapetool.xml($services.csrf.token)\" />\n                <input type=\"hidden\" name=\"action\" value=\"import\" />\n                <input type=\"hidden\" name=\"name\" value=\"$!{escapetool.xml($request.file)}\" />\n                <div id=\"package\">\n                  <ul class=\"xlist package\">\n                    <li>\n                      ## This hidden input ensures that if no page is selected, the 'pages' parameter is still passed, thus skipping all the documents in the xar\n                      <input type='hidden' name='pages' value=''/>\n                    </li>\n                    ## List each page in the package\n                    #macro(displayPageNode $pageNode)\n                      #set($document = $pageNode.reference.name)\n                      ## List each locale of the current document\n                      #foreach($locale in $pageNode.locales)\n                      <li class=\"xitem xhighlight pages\">\n                        <div class=\"xitemcontainer xpagecontainer\">\n                          <span class=\"checkbox\">\n                            <input type=\"checkbox\" name=\"pages\"\n                                  value=\"${escapetool.xml($services.model.serialize($locale, 'local'))}#if(\"$!locale.locale\" != ''):${locale.locale}#end\" checked />\n                          </span>\n                          <span class=\"documentName\">\n                            <input type=\"hidden\" name=\"$!{escapetool.xml($services.model.serialize($locale, 'local'))}:$!{escapetool.xml($locale.locale)}\" value=\"$!{escapetool.xml($locale.locale)}\" />\n                            $escapetool.xml($document) #if(\"$!locale.locale\" != '') - $locale.locale #end\n                          </span>\n                          <div class=\"clearfloats\"></div>\n                        </div>\n                      </li>\n                      #end\n                    #end\n                    #macro(displaySpaceNode $spaceNode)\n                      #set($spaceReference = $spaceNode.reference)\n                      #set($space = $spaceNode.reference.name)\n                      <li class=\"xitem xunderline\">\n                        <div class=\"xitemcontainer\">\n                        <div class=\"spacename\">$escapetool.xml($space)</div>\n                        <div class=\"clearfloats\"></div>\n                        <div class=\"pages\">\n                        <ul class=\"xlist pages\">\n                        #foreach($node in $spaceNode.children)\n                          #displayNode($node)\n                        #end\n                        </ul>\n                        </div>\n                        </div>\n                      </li>\n                    #end\n                    #macro(displayNode $node)\n                      #if ($node.children.isEmpty())\n                        #displayPageNode($node)\n                      #else\n                        #displaySpaceNode($node)\n                      #end                      \n                    #end\n                    #set ($tree = $services.model.toTree($package.entries))\n                    #foreach($node in $tree.children)\n                      #displayNode($node)\n                    #end\n                  </ul>\n                <div class=\"importOption\">\n                  <em>\n                    $escapetool.xml($services.localization.render('core.importer.whenDocumentAlreadyExists'))\n                  </em>\n                  <div class=\"historyStrategyOption\">\n                    <input type=\"radio\" name=\"historyStrategy\" value=\"add\" checked=\"checked\" />\n                    $escapetool.xml($services.localization.render('core.importer.addNewVersion'))\n                  </div>\n                  <div class=\"historyStrategyOption\">\n                    <input type=\"radio\" name=\"historyStrategy\" value=\"replace\" />\n                    $escapetool.xml($services.localization.render('core.importer.replaceDocumentHistory'))\n                  </div>\n                  <div class=\"historyStrategyOption\">\n                    <input type=\"radio\" name=\"historyStrategy\" value=\"reset\" />\n                    $escapetool.xml($services.localization.render('core.importer.resetHistory'))\n                  </div>\n                </div>\n                ## TODO: replace with a new API to introduce (impossible to safely test right on a different wiki from velocity without PR)\n                #if($xwiki.package.hasBackupPackImportRights())\n                <div class=\"importOption\">\n                  <input type=\"checkbox\" name=\"importAsBackup\" value=\"true\" #if($packager.isBackupPack())checked=\"checked\"#end/>\n                  $escapetool.xml($services.localization.render('core.importer.importAsBackup'))\n                </div>\n                #end\n                <span class=\"buttonwrapper\">\n                  <input class=\"button\" type=\"submit\" \n                         value=\"$escapetool.xml($services.localization.render('core.importer.import'))\" />\n                </span>\n              </div>\n              </div>\n            </form>\n          </div>\n          #end ## package is valid\n        #end ## attachment exists\n      #end\n    </div> ## package\n    <div class=\"clearfloats\"></div>\n  </div>\n#end\n"], "fixing_code": ["## ---------------------------------------------------------------------------\n## See the NOTICE file distributed with this work for additional\n## information regarding copyright ownership.\n##\n## This is free software; you can redistribute it and/or modify it\n## under the terms of the GNU Lesser General Public License as\n## published by the Free Software Foundation; either version 2.1 of\n## the License, or (at your option) any later version.\n##\n## This software is distributed in the hope that it will be useful,\n## but WITHOUT ANY WARRANTY; without even the implied warranty of\n## MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU\n## Lesser General Public License for more details.\n##\n## You should have received a copy of the GNU Lesser General Public\n## License along with this software; if not, write to the Free\n## Software Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA\n## 02110-1301 USA, or see the FSF site: http://www.fsf.org.\n## ---------------------------------------------------------------------------\n## ---------------------------------------------------------------------------\n## If the Document to which XARs will be attached to doesn't exist, then\n## create it.\n## Note that the upload action could automatically create it but we want to\n## control the creation so that we can set the parent and thus not make it\n## orphaned + we set a save comment and make it a minor edit.\n## ---------------------------------------------------------------------------\n#set($importDoc = $xwiki.getDocument('XWiki.XWikiPreferences'))\n#if($importDoc.isNew())\n  $importDoc.setParent('XWiki.WebHome')\n  $importDoc.save(\"Creating document to which to attach XAR files to import\", true)\n#end\n## ---------------------------------------------------------------------------\n#if($request.xredirect)\n  #set($redirect = $request.xredirect)\n#else\n  #set($redirect = $xwiki.relativeRequestURL)\n#end\n#if(!$redirect)\n  #set($redirect = $importDoc.getURL('import', 'section=Import'))\n#end\n## ---------------------------------------------------------------------------\n## Import the documents from the selected XAR.\n## ---------------------------------------------------------------------------\n#if(\"$!{request.action}\" == 'import')\n<p class=\"legend\">$escapetool.xml($services.localization.render('import')) #if(\"$!{request.withversions}\" == '1')\n  $escapetool.xml($services.localization.render('export_addhistory'))#end</p>\n#template(\"imported.vm\")\n## ---------------------------------------------------------------------------\n## Browse the XARs and let the user select a XAR and the list of documents\n## to import from that XAR.\n## ---------------------------------------------------------------------------\n#else\n  #set($baseQueryString = \"editor=$!{escapetool.url($request.editor)}&amp;section=$!{escapetool.url($request.section)}\")\n  $xwiki.jsfx.use('js/xwiki/importer/import.js', true)##\n  $xwiki.ssfx.use('js/xwiki/importer/import.css', true)##\n  $xwiki.jsfx.use('uicomponents/widgets/upload.js', {'forceSkinAction': true, 'language': ${xcontext.locale}})##\n  $xwiki.ssfx.use('uicomponents/widgets/upload.css', true)##\n  <div id=\"import\" class=\"row\">\n    <div id=\"packagelist\" class=\"col-xs-12 col-sm-6 col-md-6\">\n      <div class=\"legend\">\n        $escapetool.xml($services.localization.render('core.importer.uploadPackage'))\n      </div>\n      ## Let the user upload XAR files.\n      <form action=\"$doc.getURL('upload')\" enctype=\"multipart/form-data\" method=\"post\" id=\"AddAttachment\">\n        <div>\n          ## CSRF prevention\n          <input type=\"hidden\" name=\"form_token\" value=\"$!escapetool.xml($services.csrf.getToken())\" />\n          <input type=\"hidden\" name=\"xredirect\" value=\"$!{escapetool.xml($redirect)}\" />\n          <fieldset id=\"attachform\">\n            ## Temporarily disabled, until we fix attachment name handling\n            ## <div><label id=\"xwikiuploadnamelabel\" for=\"xwikiuploadname\">$services.localization.render('core.viewers.attachments.upload.filename')</label></div>\n            <div><input id=\"xwikiuploadname\" type=\"hidden\" name=\"filename\" value=\"\" /></div>\n            <div class=\"package-upload\">\n              <label for=\"xwikiuploadfile\" class=\"hidden\">\n                $escapetool.xml($services.localization.render('core.viewers.attachments.upload.file'))\n              </label>\n              <input id=\"xwikiuploadfile\" type=\"file\" name=\"filepath\" class=\"uploadFileInput noitems\"\n                     data-max-file-size=\"$!escapetool.xml($xwiki.getSpacePreference('upload_maxsize'))\"/>\n              <span class=\"buttonwrapper\">\n                <input type=\"submit\" value=\"Upload\" class=\"button\"/>\n              </span>\n            </div>\n          </fieldset>\n        </div>\n      </form>\n    <div class=\"legend\">\n      $escapetool.xml($services.localization.render('core.importer.availablePackages'))\n    </div>\n    <div id=\"packagelistcontainer\">\n      #template('packagelist.vm')\n    </div> ## packagelistcontainer\n    </div> ##\u00a0packagelist\n    <div id=\"packagecontainer\" class=\"col-xs-12 col-sm-6 col-md-6\">\n      #if(\"$!request.file\" != '')\n        ##\n        ## If we get here, it means javascript is not activated on the user's browser (otherwise the attachment link\n        ## click would have been intercepted). We display a basic UI (list of checkboxes) to chose which documents in the archive to import.\n        ##\n        #set($attach = $doc.getAttachment($request.file))\n        #if($attach)\n          #set($package = $services.xar.getXarPackage($attach.contentInputStream, true))\n          #if(!$package)\n            #error(\"There was an error reading the file ${escapetool.xml(${request.file})}. $!xcontext.import_error\")\n          #else\n          <div class=\"legend\">\n            $escapetool.xml($services.localization.render('core.importer.availableDocuments'))\n          </div>\n          <div id=\"packageDescription\">\n            <div class=\"packageinfos\">\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package'))\n                </span>\n                <span class=\"filename\">$escapetool.xml($attach.filename)</span>\n              </div>\n              #if(\"$!package.packageName\" != '')\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package.description'))\n                </span>\n                <span class=\"name\">$escapetool.xml($package.packageName)</span>\n              </div>\n              #end\n              #if(\"$!package.packageVersion\" != '')\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package.version'))\n                </span>\n                <span class=\"version\">$escapetool.xml($package.packageVersion)</span>\n              </div>\n              #end\n              #if(\"$!package.packageAuthor\" != '')\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package.author'))\n                </span>\n                <span class=\"author\">$escapetool.xml($package.packageAuthor)</span>\n              </div>\n              #end\n              #if(\"$!package.packageLicense\" != '')\n              <div>\n                <span class=\"label\">\n                  $escapetool.xml($services.localization.render('core.importer.package.licence'))\n                </span>\n                <span class=\"licence\">$escapetool.xml($package.packageLicense)</span>\n              </div>\n              #end\n            </div>\n            <form action=\"$!escapetool.xml($importaction)\" method=\"post\" class=\"static-importer\">\n              <div>\n                ## CSRF prevention\n                <input type=\"hidden\" name=\"form_token\" value=\"$!escapetool.xml($services.csrf.token)\" />\n                <input type=\"hidden\" name=\"action\" value=\"import\" />\n                <input type=\"hidden\" name=\"name\" value=\"$!{escapetool.xml($request.file)}\" />\n                <div id=\"package\">\n                  <ul class=\"xlist package\">\n                    <li>\n                      ## This hidden input ensures that if no page is selected, the 'pages' parameter is still passed, thus skipping all the documents in the xar\n                      <input type='hidden' name='pages' value=''/>\n                    </li>\n                    ## List each page in the package\n                    #macro(displayPageNode $pageNode)\n                      #set($document = $pageNode.reference.name)\n                      ## List each locale of the current document\n                      #foreach($locale in $pageNode.locales)\n                      <li class=\"xitem xhighlight pages\">\n                        <div class=\"xitemcontainer xpagecontainer\">\n                          <span class=\"checkbox\">\n                            <input type=\"checkbox\" name=\"pages\"\n                                  value=\"${escapetool.xml($services.model.serialize($locale, 'local'))}#if(\"$!locale.locale\" != ''):${locale.locale}#end\" checked />\n                          </span>\n                          <span class=\"documentName\">\n                            <input type=\"hidden\" name=\"$!{escapetool.xml($services.model.serialize($locale, 'local'))}:$!{escapetool.xml($locale.locale)}\" value=\"$!{escapetool.xml($locale.locale)}\" />\n                            $escapetool.xml($document) #if(\"$!locale.locale\" != '') - $locale.locale #end\n                          </span>\n                          <div class=\"clearfloats\"></div>\n                        </div>\n                      </li>\n                      #end\n                    #end\n                    #macro(displaySpaceNode $spaceNode)\n                      #set($spaceReference = $spaceNode.reference)\n                      #set($space = $spaceNode.reference.name)\n                      <li class=\"xitem xunderline\">\n                        <div class=\"xitemcontainer\">\n                        <div class=\"spacename\">$escapetool.xml($space)</div>\n                        <div class=\"clearfloats\"></div>\n                        <div class=\"pages\">\n                        <ul class=\"xlist pages\">\n                        #foreach($node in $spaceNode.children)\n                          #displayNode($node)\n                        #end\n                        </ul>\n                        </div>\n                        </div>\n                      </li>\n                    #end\n                    #macro(displayNode $node)\n                      #if ($node.children.isEmpty())\n                        #displayPageNode($node)\n                      #else\n                        #displaySpaceNode($node)\n                      #end                      \n                    #end\n                    #set ($tree = $services.model.toTree($package.entries))\n                    #foreach($node in $tree.children)\n                      #displayNode($node)\n                    #end\n                  </ul>\n                <div class=\"importOption\">\n                  <em>\n                    $escapetool.xml($services.localization.render('core.importer.whenDocumentAlreadyExists'))\n                  </em>\n                  <div class=\"historyStrategyOption\">\n                    <input type=\"radio\" name=\"historyStrategy\" value=\"add\" checked=\"checked\" />\n                    $escapetool.xml($services.localization.render('core.importer.addNewVersion'))\n                  </div>\n                  <div class=\"historyStrategyOption\">\n                    <input type=\"radio\" name=\"historyStrategy\" value=\"replace\" />\n                    $escapetool.xml($services.localization.render('core.importer.replaceDocumentHistory'))\n                  </div>\n                  <div class=\"historyStrategyOption\">\n                    <input type=\"radio\" name=\"historyStrategy\" value=\"reset\" />\n                    $escapetool.xml($services.localization.render('core.importer.resetHistory'))\n                  </div>\n                </div>\n                ## TODO: replace with a new API to introduce (impossible to safely test right on a different wiki from velocity without PR)\n                #if($xwiki.package.hasBackupPackImportRights())\n                <div class=\"importOption\">\n                  <input type=\"checkbox\" name=\"importAsBackup\" value=\"true\" #if($packager.isBackupPack())checked=\"checked\"#end/>\n                  $escapetool.xml($services.localization.render('core.importer.importAsBackup'))\n                </div>\n                #end\n                <span class=\"buttonwrapper\">\n                  <input class=\"button\" type=\"submit\" \n                         value=\"$escapetool.xml($services.localization.render('core.importer.import'))\" />\n                </span>\n              </div>\n              </div>\n            </form>\n          </div>\n          #end ## package is valid\n        #end ## attachment exists\n      #end\n    </div> ## package\n    <div class=\"clearfloats\"></div>\n  </div>\n#end\n"], "filenames": ["xwiki-platform-core/xwiki-platform-web/xwiki-platform-web-templates/src/main/resources/templates/importinline.vm"], "buggy_code_start_loc": [53], "buggy_code_end_loc": [54], "fixing_code_start_loc": [53], "fixing_code_end_loc": [54], "type": "CWE-79", "message": "XWiki Platform is a generic wiki platform. Starting in versions 2.2-milestone-1 and prior to versions 14.4.8, 14.10.4, and 15.0-rc-1, it's possible to execute javascript with the right of any user by leading him to a special URL on the wiki targeting a page which contains an attachment. This has been patched in XWiki 15.0-rc-1, 14.10.4, and 14.4.8. The easiest possible workaround is to edit file `<xwiki app>/templates/importinline.vm` and apply the modification described in commit 28905f7f518cc6f21ea61fe37e9e1ed97ef36f01.", "other": {"cve": {"id": "CVE-2023-32071", "sourceIdentifier": "security-advisories@github.com", "published": "2023-05-09T16:15:15.297", "lastModified": "2023-05-16T17:41:40.890", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "XWiki Platform is a generic wiki platform. Starting in versions 2.2-milestone-1 and prior to versions 14.4.8, 14.10.4, and 15.0-rc-1, it's possible to execute javascript with the right of any user by leading him to a special URL on the wiki targeting a page which contains an attachment. This has been patched in XWiki 15.0-rc-1, 14.10.4, and 14.4.8. The easiest possible workaround is to edit file `<xwiki app>/templates/importinline.vm` and apply the modification described in commit 28905f7f518cc6f21ea61fe37e9e1ed97ef36f01."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 2.3, "impactScore": 6.0}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-116"}, {"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "2.3", "versionEndExcluding": "14.4.8", "matchCriteriaId": "E0A4507D-89A9-4E23-960D-B04AFEC2D9C9"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:*:*:*:*:*:*:*:*", "versionStartIncluding": "14.5.0", "versionEndExcluding": "14.10.4", "matchCriteriaId": "AB27526E-A5F9-4592-9F16-A55A2253A22D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:xwiki:xwiki:2.2:milestone1:*:*:*:*:*:*", "matchCriteriaId": "C5DB4CA3-913F-48F6-95A9-25F350DDB537"}]}]}], "references": [{"url": "https://app.intigriti.com/company/submissions/e95a7ad5-7029-4627-abf0-3e3e3ea0b4ce/XWIKI-E93DFEYK", "source": "security-advisories@github.com", "tags": ["Permissions Required"]}, {"url": "https://github.com/xwiki/xwiki-platform/commit/28905f7f518cc6f21ea61fe37e9e1ed97ef36f01", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/xwiki/xwiki-platform/security/advisories/GHSA-j9h5-vcgv-2jfm", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}, {"url": "https://jira.xwiki.org/browse/XWIKI-20340", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/xwiki/xwiki-platform/commit/28905f7f518cc6f21ea61fe37e9e1ed97ef36f01"}}