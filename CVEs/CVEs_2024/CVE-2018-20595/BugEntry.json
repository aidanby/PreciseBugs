{"buggy_code": ["/*\n *  Copyright 2016 http://www.hswebframework.org\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\n\npackage org.hswebframework.web.oauth2.core;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport java.util.stream.Collectors;\n\npublic enum ErrorType {\n    ILLEGAL_CODE(1001), //\u9519\u8bef\u7684\u6388\u6743\u7801\n    ILLEGAL_ACCESS_TOKEN(1002), //\u9519\u8bef\u7684access_token\n    ILLEGAL_CLIENT_ID(1003),//\u5ba2\u6237\u7aef\u4fe1\u606f\u9519\u8bef\n    ILLEGAL_CLIENT_SECRET(1004),//\u5ba2\u6237\u7aef\u5bc6\u94a5\u9519\u8bef\n    ILLEGAL_GRANT_TYPE(1005), //\u9519\u8bef\u7684\u6388\u6743\u65b9\u5f0f\n    ILLEGAL_RESPONSE_TYPE(1006),//response_type \u9519\u8bef\n    ILLEGAL_AUTHORIZATION(1007),//Authorization \u9519\u8bef\n    ILLEGAL_REFRESH_TOKEN(1008),//refresh_token \u9519\u8bef\n    ILLEGAL_REDIRECT_URI(1009), //redirect_url \u9519\u8bef\n    ILLEGAL_SCOPE(1010), //scope \u9519\u8bef\n    ILLEGAL_USERNAME(1011), //username \u9519\u8bef\n    ILLEGAL_PASSWORD(1012), //password \u9519\u8bef\n\n    SCOPE_OUT_OF_RANGE(2010), //scope\u8d85\u51fa\u8303\u56f4\n\n    UNAUTHORIZED_CLIENT(4010), //\u65e0\u6743\u9650\n    EXPIRED_TOKEN(4011), //TOKEN\u8fc7\u671f\n    INVALID_TOKEN(4012), //TOKEN\u5df2\u5931\u6548\n    UNSUPPORTED_GRANT_TYPE(4013), //\u4e0d\u652f\u6301\u7684\u8ba4\u8bc1\u7c7b\u578b\n    UNSUPPORTED_RESPONSE_TYPE(4014), //\u4e0d\u652f\u6301\u7684\u54cd\u5e94\u7c7b\u578b\n\n    EXPIRED_CODE(4015), //AUTHORIZATION_CODE\u8fc7\u671f\n    EXPIRED_REFRESH_TOKEN(4020), //REFRESH_TOKEN\u8fc7\u671f\n\n    CLIENT_DISABLED(4016),//\u5ba2\u6237\u7aef\u5df2\u88ab\u7981\u7528\n\n    CLIENT_NOT_EXIST(4040),//\u5ba2\u6237\u7aef\u4e0d\u5b58\u5728\n\n    USER_NOT_EXIST(4041),//\u5ba2\u6237\u7aef\u4e0d\u5b58\u5728\n\n    ACCESS_DENIED(503), //\u8bbf\u95ee\u88ab\u62d2\u7edd\n\n    OTHER(5001), //\u5176\u4ed6\u9519\u8bef ;\n\n    PARSE_RESPONSE_ERROR(5002),//\u89e3\u6790\u8fd4\u56de\u7ed3\u679c\u9519\u8bef\n\n    SERVICE_ERROR(5003); //\u670d\u52a1\u5668\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\n\n\n    private final String message;\n    private final int    code;\n    static final Map<Integer, ErrorType> codeMapping = Arrays.stream(ErrorType.values())\n            .collect(Collectors.toMap(ErrorType::code, type -> type));\n\n    ErrorType(int code) {\n        this.code = code;\n        message = this.name().toLowerCase();\n    }\n\n    ErrorType(int code, String message) {\n        this.message = message;\n        this.code = code;\n    }\n\n    public String message() {\n        if (message == null) {\n            return this.name();\n        }\n        return message;\n    }\n\n    public int code() {\n        return code;\n    }\n\n    public <T> T throwThis(Function<ErrorType, ? extends RuntimeException> errorTypeFunction) {\n        throw errorTypeFunction.apply(this);\n    }\n\n    public <T> T throwThis(BiFunction<ErrorType, String, ? extends RuntimeException> errorTypeFunction, String message) {\n        throw errorTypeFunction.apply(this, message);\n    }\n\n    public static Optional<ErrorType> fromCode(int code) {\n        return Optional.ofNullable(codeMapping.get(code));\n    }\n\n}\n", "/*\n *  Copyright 2016 http://www.hswebframework.org\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\n\npackage org.hswebframework.web.authorization.oauth2.controller;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport org.hswebframework.web.WebUtil;\nimport org.hswebframework.web.authorization.oauth2.client.OAuth2RequestService;\nimport org.hswebframework.web.authorization.oauth2.client.listener.OAuth2CodeAuthBeforeEvent;\nimport org.hswebframework.web.controller.message.ResponseMessage;\nimport org.hswebframework.web.entity.oauth2.client.OAuth2ServerConfigEntity;\nimport org.hswebframework.web.id.IDGenerator;\nimport org.hswebframework.web.oauth2.core.OAuth2Constants;\nimport org.hswebframework.web.service.oauth2.client.OAuth2ServerConfigService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.servlet.view.RedirectView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\n\n/**\n * @author zhouhao\n */\n@Controller\n@RequestMapping(\"${hsweb.web.mappings.oauth2-client-callback:oauth2}\")\n@Api(tags = \"OAuth2.0-\u5ba2\u6237\u7aef-\u8bf7\u6c42\u670d\u52a1\", value = \"OAuth2.0\u5ba2\u6237\u7aef\u8bf7\u6c42\u670d\u52a1\")\npublic class OAuth2ClientController {\n\n    private OAuth2RequestService oAuth2RequestService;\n\n    private OAuth2ServerConfigService oAuth2ServerConfigService;\n\n    @Autowired\n    public void setoAuth2ServerConfigService(OAuth2ServerConfigService oAuth2ServerConfigService) {\n        this.oAuth2ServerConfigService = oAuth2ServerConfigService;\n    }\n\n    @Autowired\n    public void setoAuth2RequestService(OAuth2RequestService oAuth2RequestService) {\n        this.oAuth2RequestService = oAuth2RequestService;\n    }\n\n    private static final String STATE_SESSION_KEY = \"OAUTH2_STATE\";\n\n    @GetMapping(\"/state\")\n    @ResponseBody\n    @ApiOperation(\"\u7533\u8bf7\u4e00\u4e2astate\")\n    public ResponseMessage<String> requestState(HttpSession session) {\n        String state = IDGenerator.RANDOM.generate();\n        session.setAttribute(STATE_SESSION_KEY, state);\n        return ResponseMessage.ok(state);\n    }\n\n    @GetMapping(\"/boot/{serverId}\")\n    @ApiOperation(\"\u8df3\u8f6c\u81f3OAuth2.0\u670d\u52a1\u6388\u6743\u9875\u9762\")\n    public RedirectView boot(@PathVariable String serverId,\n                             @RequestParam(defaultValue = \"/\") String redirect,\n                             HttpServletRequest request,\n                             HttpSession session) throws UnsupportedEncodingException {\n        OAuth2ServerConfigEntity entity = oAuth2ServerConfigService.selectByPk(serverId);\n        if (entity == null) {\n            return new RedirectView(\"/401.html\");\n        }\n        String callback = WebUtil.getBasePath(request)\n                .concat(\"oauth2/callback/\")\n                .concat(serverId).concat(\"/?redirect=\")\n                .concat(URLEncoder.encode(redirect, \"UTF-8\"));\n        RedirectView view = new RedirectView(entity.getRealUrl(entity.getAuthUrl()));\n        view.addStaticAttribute(OAuth2Constants.response_type, \"code\");\n        view.addStaticAttribute(OAuth2Constants.state, requestState(session).getResult());\n        view.addStaticAttribute(OAuth2Constants.client_id, entity.getClientId());\n        view.addStaticAttribute(OAuth2Constants.redirect_uri, callback);\n        return view;\n    }\n\n    @GetMapping(\"/callback/{serverId}\")\n    @ApiOperation(value = \"OAuth2.0\u6388\u6743\u5b8c\u6210\u540e\u56de\u8c03\", hidden = true)\n    public RedirectView callback(@RequestParam(defaultValue = \"/\") String redirect,\n                                 @PathVariable String serverId,\n                                 @RequestParam String code,\n                                 @RequestParam String state,\n                                 HttpServletRequest request,\n                                 HttpSession session) throws UnsupportedEncodingException {\n        try {\n            String cachedState = (String) session.getAttribute(STATE_SESSION_KEY);\n            //  if (!state.equals(cachedState)) throw new BusinessException(\"state error\");\n            oAuth2RequestService.doEvent(serverId, new OAuth2CodeAuthBeforeEvent(code, state, request::getParameter));\n            return new RedirectView(URLDecoder.decode(redirect, \"UTF-8\"));\n        } finally {\n            session.removeAttribute(STATE_SESSION_KEY);\n        }\n    }\n}\n"], "fixing_code": ["/*\n *  Copyright 2016 http://www.hswebframework.org\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\n\npackage org.hswebframework.web.oauth2.core;\n\nimport java.util.Arrays;\nimport java.util.Map;\nimport java.util.Optional;\nimport java.util.function.BiFunction;\nimport java.util.function.Function;\nimport java.util.function.Supplier;\nimport java.util.stream.Collectors;\n\npublic enum ErrorType {\n    ILLEGAL_CODE(1001), //\u9519\u8bef\u7684\u6388\u6743\u7801\n    ILLEGAL_ACCESS_TOKEN(1002), //\u9519\u8bef\u7684access_token\n    ILLEGAL_CLIENT_ID(1003),//\u5ba2\u6237\u7aef\u4fe1\u606f\u9519\u8bef\n    ILLEGAL_CLIENT_SECRET(1004),//\u5ba2\u6237\u7aef\u5bc6\u94a5\u9519\u8bef\n    ILLEGAL_GRANT_TYPE(1005), //\u9519\u8bef\u7684\u6388\u6743\u65b9\u5f0f\n    ILLEGAL_RESPONSE_TYPE(1006),//response_type \u9519\u8bef\n    ILLEGAL_AUTHORIZATION(1007),//Authorization \u9519\u8bef\n    ILLEGAL_REFRESH_TOKEN(1008),//refresh_token \u9519\u8bef\n    ILLEGAL_REDIRECT_URI(1009), //redirect_url \u9519\u8bef\n    ILLEGAL_SCOPE(1010), //scope \u9519\u8bef\n    ILLEGAL_USERNAME(1011), //username \u9519\u8bef\n    ILLEGAL_PASSWORD(1012), //password \u9519\u8bef\n\n    SCOPE_OUT_OF_RANGE(2010), //scope\u8d85\u51fa\u8303\u56f4\n\n    UNAUTHORIZED_CLIENT(4010), //\u65e0\u6743\u9650\n    EXPIRED_TOKEN(4011), //TOKEN\u8fc7\u671f\n    INVALID_TOKEN(4012), //TOKEN\u5df2\u5931\u6548\n    UNSUPPORTED_GRANT_TYPE(4013), //\u4e0d\u652f\u6301\u7684\u8ba4\u8bc1\u7c7b\u578b\n    UNSUPPORTED_RESPONSE_TYPE(4014), //\u4e0d\u652f\u6301\u7684\u54cd\u5e94\u7c7b\u578b\n\n    EXPIRED_CODE(4015), //AUTHORIZATION_CODE\u8fc7\u671f\n    EXPIRED_REFRESH_TOKEN(4020), //REFRESH_TOKEN\u8fc7\u671f\n\n    CLIENT_DISABLED(4016),//\u5ba2\u6237\u7aef\u5df2\u88ab\u7981\u7528\n\n    CLIENT_NOT_EXIST(4040),//\u5ba2\u6237\u7aef\u4e0d\u5b58\u5728\n\n    USER_NOT_EXIST(4041),//\u5ba2\u6237\u7aef\u4e0d\u5b58\u5728\n\n    STATE_ERROR(4042), //stat\u9519\u8bef\n\n    ACCESS_DENIED(503), //\u8bbf\u95ee\u88ab\u62d2\u7edd\n\n    OTHER(5001), //\u5176\u4ed6\u9519\u8bef ;\n\n    PARSE_RESPONSE_ERROR(5002),//\u89e3\u6790\u8fd4\u56de\u7ed3\u679c\u9519\u8bef\n\n    SERVICE_ERROR(5003); //\u670d\u52a1\u5668\u8fd4\u56de\u9519\u8bef\u4fe1\u606f\n\n\n    private final String message;\n    private final int    code;\n    static final Map<Integer, ErrorType> codeMapping = Arrays.stream(ErrorType.values())\n            .collect(Collectors.toMap(ErrorType::code, type -> type));\n\n    ErrorType(int code) {\n        this.code = code;\n        message = this.name().toLowerCase();\n    }\n\n    ErrorType(int code, String message) {\n        this.message = message;\n        this.code = code;\n    }\n\n    public String message() {\n        if (message == null) {\n            return this.name();\n        }\n        return message;\n    }\n\n    public int code() {\n        return code;\n    }\n\n    public <T> T throwThis(Function<ErrorType, ? extends RuntimeException> errorTypeFunction) {\n        throw errorTypeFunction.apply(this);\n    }\n\n    public <T> T throwThis(BiFunction<ErrorType, String, ? extends RuntimeException> errorTypeFunction, String message) {\n        throw errorTypeFunction.apply(this, message);\n    }\n\n    public static Optional<ErrorType> fromCode(int code) {\n        return Optional.ofNullable(codeMapping.get(code));\n    }\n\n}\n", "/*\n *  Copyright 2016 http://www.hswebframework.org\n *\n *  Licensed under the Apache License, Version 2.0 (the \"License\");\n *  you may not use this file except in compliance with the License.\n *  You may obtain a copy of the License at\n *\n *        http://www.apache.org/licenses/LICENSE-2.0\n *\n *  Unless required by applicable law or agreed to in writing, software\n *  distributed under the License is distributed on an \"AS IS\" BASIS,\n *  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n *  See the License for the specific language governing permissions and\n *  limitations under the License.\n *\n *\n */\n\npackage org.hswebframework.web.authorization.oauth2.controller;\n\nimport io.swagger.annotations.Api;\nimport io.swagger.annotations.ApiOperation;\nimport org.hswebframework.web.BusinessException;\nimport org.hswebframework.web.WebUtil;\nimport org.hswebframework.web.authorization.oauth2.client.OAuth2RequestService;\nimport org.hswebframework.web.authorization.oauth2.client.listener.OAuth2CodeAuthBeforeEvent;\nimport org.hswebframework.web.controller.message.ResponseMessage;\nimport org.hswebframework.web.entity.oauth2.client.OAuth2ServerConfigEntity;\nimport org.hswebframework.web.id.IDGenerator;\nimport org.hswebframework.web.oauth2.core.ErrorType;\nimport org.hswebframework.web.oauth2.core.OAuth2Constants;\nimport org.hswebframework.web.service.oauth2.client.OAuth2ServerConfigService;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.stereotype.Controller;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.servlet.view.RedirectView;\n\nimport javax.servlet.http.HttpServletRequest;\nimport javax.servlet.http.HttpSession;\nimport java.io.UnsupportedEncodingException;\nimport java.net.URLDecoder;\nimport java.net.URLEncoder;\n\n/**\n * @author zhouhao\n */\n@Controller\n@RequestMapping(\"${hsweb.web.mappings.oauth2-client-callback:oauth2}\")\n@Api(tags = \"OAuth2.0-\u5ba2\u6237\u7aef-\u8bf7\u6c42\u670d\u52a1\", value = \"OAuth2.0\u5ba2\u6237\u7aef\u8bf7\u6c42\u670d\u52a1\")\npublic class OAuth2ClientController {\n\n    private OAuth2RequestService oAuth2RequestService;\n\n    private OAuth2ServerConfigService oAuth2ServerConfigService;\n\n    @Autowired\n    public void setoAuth2ServerConfigService(OAuth2ServerConfigService oAuth2ServerConfigService) {\n        this.oAuth2ServerConfigService = oAuth2ServerConfigService;\n    }\n\n    @Autowired\n    public void setoAuth2RequestService(OAuth2RequestService oAuth2RequestService) {\n        this.oAuth2RequestService = oAuth2RequestService;\n    }\n\n    private static final String STATE_SESSION_KEY = \"OAUTH2_STATE\";\n\n    @GetMapping(\"/state\")\n    @ResponseBody\n    @ApiOperation(\"\u7533\u8bf7\u4e00\u4e2astate\")\n    public ResponseMessage<String> requestState(HttpSession session) {\n        String state = IDGenerator.RANDOM.generate();\n        session.setAttribute(STATE_SESSION_KEY, state);\n        return ResponseMessage.ok(state);\n    }\n\n    @GetMapping(\"/boot/{serverId}\")\n    @ApiOperation(\"\u8df3\u8f6c\u81f3OAuth2.0\u670d\u52a1\u6388\u6743\u9875\u9762\")\n    public RedirectView boot(@PathVariable String serverId,\n                             @RequestParam(defaultValue = \"/\") String redirect,\n                             HttpServletRequest request,\n                             HttpSession session) throws UnsupportedEncodingException {\n        OAuth2ServerConfigEntity entity = oAuth2ServerConfigService.selectByPk(serverId);\n        if (entity == null) {\n            return new RedirectView(\"/401.html\");\n        }\n        String callback = WebUtil.getBasePath(request)\n                .concat(\"oauth2/callback/\")\n                .concat(serverId).concat(\"/?redirect=\")\n                .concat(URLEncoder.encode(redirect, \"UTF-8\"));\n        RedirectView view = new RedirectView(entity.getRealUrl(entity.getAuthUrl()));\n        view.addStaticAttribute(OAuth2Constants.response_type, \"code\");\n        view.addStaticAttribute(OAuth2Constants.state, requestState(session).getResult());\n        view.addStaticAttribute(OAuth2Constants.client_id, entity.getClientId());\n        view.addStaticAttribute(OAuth2Constants.redirect_uri, callback);\n        return view;\n    }\n\n    @GetMapping(\"/callback/{serverId}\")\n    @ApiOperation(value = \"OAuth2.0\u6388\u6743\u5b8c\u6210\u540e\u56de\u8c03\", hidden = true)\n    public RedirectView callback(@RequestParam(defaultValue = \"/\") String redirect,\n                                 @PathVariable String serverId,\n                                 @RequestParam String code,\n                                 @RequestParam String state,\n                                 HttpServletRequest request,\n                                 HttpSession session) throws UnsupportedEncodingException {\n        try {\n            String cachedState = (String) session.getAttribute(STATE_SESSION_KEY);\n            if (!state.equals(cachedState)) {\n                throw new BusinessException(ErrorType.STATE_ERROR.name());\n            }\n            oAuth2RequestService.doEvent(serverId, new OAuth2CodeAuthBeforeEvent(code, state, request::getParameter));\n            return new RedirectView(URLDecoder.decode(redirect, \"UTF-8\"));\n        } finally {\n            session.removeAttribute(STATE_SESSION_KEY);\n        }\n    }\n}\n"], "filenames": ["hsweb-authorization/hsweb-authorization-oauth2/hsweb-authorization-oauth2-core/src/main/java/org/hswebframework/web/oauth2/core/ErrorType.java", "hsweb-system/hsweb-system-oauth2-client/hsweb-system-oauth2-client-web/src/main/java/org/hswebframework/web/authorization/oauth2/controller/OAuth2ClientController.java"], "buggy_code_start_loc": [59, 22], "buggy_code_end_loc": [59, 108], "fixing_code_start_loc": [60, 23], "fixing_code_end_loc": [62, 112], "type": "CWE-352", "message": "A CSRF issue was discovered in web/authorization/oauth2/controller/OAuth2ClientController.java in hsweb 3.0.4 because the state parameter in the request is not compared with the state parameter in the session after user authentication is successful.", "other": {"cve": {"id": "CVE-2018-20595", "sourceIdentifier": "cve@mitre.org", "published": "2018-12-30T18:29:00.693", "lastModified": "2019-01-14T14:52:43.953", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A CSRF issue was discovered in web/authorization/oauth2/controller/OAuth2ClientController.java in hsweb 3.0.4 because the state parameter in the request is not compared with the state parameter in the session after user authentication is successful."}, {"lang": "es", "value": "Se ha descubierto un problema de Cross-Site Request Forgery (CSRF) en web/authorization/oauth2/controller/OAuth2ClientController.java en hsweb 3.0.4 debido a que el par\u00e1metro state en la petici\u00f3n no se compara con el par\u00e1metro state en la sesi\u00f3n una vez la autenticaci\u00f3n del usuario es exitosa."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.8, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.8, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hsweb:hsweb:3.0.4:*:*:*:*:*:*:*", "matchCriteriaId": "6754EA40-B97B-43D5-B36C-2F58A79AA95C"}]}]}], "references": [{"url": "https://github.com/hs-web/hsweb-framework/commit/40929e9b0d336a26281a5ed2e0e721d54dd8d2f2", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/hs-web/hsweb-framework/issues/107", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/hs-web/hsweb-framework/commit/40929e9b0d336a26281a5ed2e0e721d54dd8d2f2"}}