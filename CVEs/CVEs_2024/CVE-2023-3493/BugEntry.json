{"buggy_code": ["<?php declare(strict_types=1);\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nuse Lcharette\\WebpackEncoreTwig\\EntrypointsTwigExtension;\nuse Lcharette\\WebpackEncoreTwig\\JsonManifest;\nuse Lcharette\\WebpackEncoreTwig\\TagRenderer;\nuse Lcharette\\WebpackEncoreTwig\\VersionedAssetsTwigExtension;\nuse RedBeanPHP\\Facade;\nuse Symfony\\Bridge\\Twig\\Extension\\TranslationExtension;\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse Symfony\\WebpackEncoreBundle\\Asset\\EntrypointLookup;\nuse Twig\\Extension\\CoreExtension;\nuse Twig\\Extension\\DebugExtension;\nuse Twig\\Extension\\StringLoaderExtension;\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$di = new \\Pimple\\Container();\n\n/*\n * Returns the current FOSSBilling config from config.php\n *\n * @param void\n *\n * @return array\n */\n$di['config'] = function () {\n    $array = include PATH_ROOT . '/config.php';\n    return $array;\n};\n\n/*\n * Create a new logger instance and configures it based on the settings in the configuration file.\n *\n * @param void\n *\n * @return Box_Log A new logger instance\n */\n$di['logger'] = function () use ($di) {\n    $log = new Box_Log();\n    $log->setDi($di);\n\n    $log_to_db = isset($di['config']['log_to_db']) && $di['config']['log_to_db'];\n\n    if ($log_to_db) {\n        $activity_service = $di['mod_service']('activity');\n        $writer2 = new Box_LogDb($activity_service);\n\n        if ($di['auth']->isAdminLoggedIn()) {\n            $admin = $di['loggedin_admin'];\n            $log->setEventItem('admin_id', $admin->id);\n        } elseif ($di['auth']->isClientLoggedIn()) {\n            $client = $di['loggedin_client'];\n            $log->setEventItem('client_id', $client->id);\n        }\n\n        $log->addWriter($writer2);\n    } else {\n        $monolog = new \\FOSSBilling\\Monolog($di);\n        $log->addWriter($monolog);\n    }\n\n    return $log;\n};\n\n/*\n *\n * @param void\n *\n * @return \\Box_Crypt\n */\n$di['crypt'] = function () use ($di) {\n    $crypt = new Box_Crypt();\n    $crypt->setDi($di);\n\n    return $crypt;\n};\n\n/*\n * Creates a new PDO object for database connections\n *\n * @param void\n *\n * @return PDO The PDO object used for database connections\n */\n$di['pdo'] = function () use ($di) {\n    $c = $di['config']['db'];\n\n    $pdo = new PDO(\n        $c['type'] . ':host=' . $c['host'] . ';port=' . $c['port'] . ';dbname=' . $c['name'],\n        $c['user'],\n        $c['password'],\n        [\n            PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true,\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n        ]\n    );\n\n    if (isset($c['debug']) && $c['debug']) {\n        $pdo->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['Box_DbLoggedPDOStatement']);\n    }\n\n    if ('mysql' === $c['type']) {\n        $pdo->exec('SET NAMES \"utf8\"');\n        $pdo->exec('SET CHARACTER SET utf8');\n        $pdo->exec('SET CHARACTER_SET_CONNECTION = utf8');\n        $pdo->exec('SET character_set_results = utf8');\n        $pdo->exec('SET character_set_server = utf8');\n        $pdo->exec('SET SESSION interactive_timeout = 28800');\n        $pdo->exec('SET SESSION wait_timeout = 28800');\n    }\n\n    return $pdo;\n};\n\n/*\n *\n * @param void\n *\n * @return \\Box_Database The new Box_Database object that was just created.\n */\n$di['db'] = function () use ($di) {\n    \\RedBeanPHP\\R::setup($di['pdo']);\n    \\RedBeanPHP\\Util\\DispenseHelper::setEnforceNamingPolicy(false);\n\n    $helper = new \\Box_BeanHelper();\n    $helper->setDi($di);\n\n    $mapper = new Facade();\n    $mapper->getRedBean()->setBeanHelper($helper);\n    $freeze = isset($di['config']['db']['freeze']) ? (bool) $di['config']['db']['freeze'] : true;\n    $mapper->freeze($freeze);\n\n    $db = new Box_Database();\n    $db->setDi($di);\n    $db->setDataMapper($mapper);\n\n    return $db;\n};\n\n/*\n *\n * @param void\n *\n * @return Box_Pagination\n */\n$di['pager'] = function () use ($di) {\n    $service = new Box_Pagination();\n    $service->setDi($di);\n\n    return $service;\n};\n\n/*\n *\n * @param void\n *\n * @return Box_Url\n */\n$di['url'] = function () use ($di) {\n    $url = new Box_Url();\n    $url->setDi($di);\n    $url->setBaseUri(BB_URL);\n\n    return $url;\n};\n\n/*\n * Returns a new Box_Mod object, created with the provided module name.\n *\n * @param string $name The name of the module to create the object with.\n *\n * @return \\Box_Mod The new Box_Mod object that was just created.\n */\n$di['mod'] = $di->protect(function ($name) use ($di) {\n    $mod = new Box_Mod($name);\n    $mod->setDi($di);\n\n    return $mod;\n});\n\n/*\n *\n * @param string $mod the name of the module to get\n *\n * @return mixed the service of the associated module\n */\n$di['mod_service'] = $di->protect(function ($mod, $sub = '') use ($di) {\n    return $di['mod']($mod)->getService($sub);\n});\n\n/*\n *\n * @param string $name the name of the module to get the configuration of\n *\n * @return mixed the configuration of the associated module\n */\n$di['mod_config'] = $di->protect(function ($name) use ($di) {\n    return $di['mod']($name)->getConfig();\n});\n\n/*\n *\n * @param void\n *\n * @return \\Box_EventManager\n */\n$di['events_manager'] = function () use ($di) {\n    $service = new Box_EventManager();\n    $service->setDi($di);\n\n    return $service;\n};\n\n/*\n * Creates a new session, applying specified security rules depending on the config.php settings.\n *\n * @param void\n *\n * @return \\FOSSBilling\\Session\n */\n$di['session'] = function () use ($di) {\n    $handler = new PdoSessionHandler($di['pdo']);\n\n    $mode = $di['config']['security']['mode'] ?? 'strict';\n    $lifespan = $di['config']['security']['cookie_lifespan'] ?? 7200;\n    $secure = $di['config']['security']['force_https'] ?? true;\n\n    $session = new \\FOSSBilling\\Session($handler, $mode, $lifespan, $secure);\n    $session->setDi($di);\n    $session->setupSession();\n\n    return $session;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\Request\n */\n$di['request'] = function () use ($di) {\n    $service = new \\FOSSBilling\\Request();\n    $service->setDi($di);\n\n    return $service;\n};\n\n/*\n * @param void\n *\n * @return \\Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter\n */\n$di['cache'] = function () {\n    // Reference: https://symfony.com/doc/current/components/cache/adapters/filesystem_adapter.html\n    return new FilesystemAdapter('sf_cache', 24 * 60 * 60, PATH_CACHE);\n};\n\n/*\n *\n * @param void\n *\n * @return \\Box_Authorization\n */\n$di['auth'] = function () use ($di) {\n    return new Box_Authorization($di);\n};\n\n/*\n * Creates a new Twig environment that's configured for FOSSBilling.\n *\n * @param void\n *\n * @return \\Twig\\Environment The new Twig environment that was just created.\n *\n * @throws \\Twig\\Error\\LoaderError If the Twig environment could not be created.\n * @throws \\Twig\\Error\\RuntimeError If an error occurs while rendering a template.\n * @throws \\Twig\\Error\\SyntaxError If a template is malformed.\n */\n$di['twig'] = $di->factory(function () use ($di) {\n    $config = $di['config'];\n    $options = $config['twig'];\n\n    // Get internationalisation settings from config, or use sensible defaults for\n    // missing required settings.\n    $locale = \\FOSSBilling\\i18n::getActiveLocale();\n    $timezone = $config['i18n']['timezone'] ?? 'UTC';\n    $date_format = !empty($config['i18n']['date_format']) ? strtoupper($config['i18n']['date_format']) : 'MEDIUM';\n    $time_format = !empty($config['i18n']['time_format']) ? strtoupper($config['i18n']['time_format']) : 'SHORT';\n    $datetime_pattern = $config['i18n']['datetime_pattern'] ?? null;\n\n    $loader = new Twig\\Loader\\ArrayLoader();\n    $twig = new Twig\\Environment($loader, $options);\n\n    $box_extensions = new Box_TwigExtensions();\n    $box_extensions->setDi($di);\n\n    if ($di['encore_info']['is_encore_theme']) {\n        $entryPoints = new EntrypointLookup($di['encore_info']['entrypoints']);\n        $tagRenderer = new TagRenderer($entryPoints);\n        $encoreExtensions = new EntrypointsTwigExtension($entryPoints, $tagRenderer);\n        $twig->addExtension($encoreExtensions);\n        $twig->addExtension(new VersionedAssetsTwigExtension(new JsonManifest($di['encore_info']['manifest'])));\n    }\n\n    // $twig->addExtension(new OptimizerExtension());\n    $twig->addExtension(new StringLoaderExtension());\n    $twig->addExtension(new DebugExtension());\n    $twig->addExtension(new TranslationExtension());\n    $twig->addExtension($box_extensions);\n    $twig->getExtension(CoreExtension::class)->setTimezone($timezone);\n\n    try {\n        $dateFormatter = new \\IntlDateFormatter($locale, constant(\"\\IntlDateFormatter::$date_format\"), constant(\"\\IntlDateFormatter::$time_format\"), $timezone, null, $datetime_pattern);\n    } catch (\\Symfony\\Polyfill\\Intl\\Icu\\Exception\\MethodArgumentValueNotImplementedException) {\n        if (($config['i18n']['locale'] ?? 'en_US') == 'en_US') {\n            $dateFormatter = new \\IntlDateFormatter('en', constant(\"\\IntlDateFormatter::$date_format\"), constant(\"\\IntlDateFormatter::$time_format\"), $timezone, null, $datetime_pattern);\n        } else {\n            throw new \\Box_Exception(\"It appears you are trying to use FOSSBilling without the php intl extension enabled. FOSSBilling includes a polyfill for the intl extension, however it does not support :locale. Please enable the intl extension.\", [':locale' => $config['i18n']['locale']]);\n        }\n    }\n\n    $twig->addExtension(new IntlExtension($dateFormatter));\n\n    // add globals\n    if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && 'XMLHttpRequest' === $_SERVER['HTTP_X_REQUESTED_WITH']) {\n        $_GET['ajax'] = true;\n    }\n\n    // CSRF token\n    if (PHP_SESSION_ACTIVE !== session_status()) {\n        $token = hash('md5', $_COOKIE['PHPSESSID'] ?? '');\n    } else {\n        $token = hash('md5', session_id());\n    }\n\n    $twig->addGlobal('CSRFToken', $token);\n    $twig->addGlobal('request', $_GET);\n    $twig->addGlobal('guest', $di['api_guest']);\n    return $twig;\n});\n\n/*\n * Checks whether a client is logged in and throws an exception or redirects to the login page if not.\n *\n * @param void\n *\n * @return bool True if a client is logged in.\n *\n * @throws \\Exception If a client is not logged in and the request is an API request.\n *\n * @throws \\HttpException If a client is not logged in and the request is a browser request.\n */\n$di['is_client_logged'] = function () use ($di) {\n    if (!$di['auth']->isClientLoggedIn()) {\n        $api_str = '/api/';\n        $url = $_GET['_url'] ?? ($_SERVER['PATH_INFO'] ?? '');\n\n        if (0 === strncasecmp($url, $api_str, strlen($api_str))) {\n            // Throw Exception if api request\n            throw new Exception('Client is not logged in');\n        } else {\n            // Redirect to login page if browser request\n            $login_url = $di['url']->link('login');\n            header(\"Location: $login_url\");\n        }\n    }\n\n    return true;\n};\n\n/*\n * Checks whether an admin is logged in and throws an exception or redirects to the login page if not.\n *\n * @param void\n *\n * @return bool True if an admin is logged in.\n *\n * @throws \\Exception If an admin is not logged in and the request is an API request.\n *\n */\n$di['is_admin_logged'] = function () use ($di) {\n    if (!$di['auth']->isAdminLoggedIn()) {\n        $api_str = '/api/';\n        $url = $_GET['_url'] ?? ($_SERVER['PATH_INFO'] ?? '');\n\n        if (0 === strncasecmp($url, $api_str, strlen($api_str))) {\n            // Throw Exception if api request\n            throw new Exception('Admin is not logged in');\n        } else {\n            // Redirect to login page if browser request\n            $login_url = $di['url']->adminLink('staff/login');\n            header(\"Location: $login_url\");\n        }\n    }\n\n    return true;\n};\n\n/*\n * Returns an existing logged-in client model object.\n *\n * @param void\n *\n * @return \\Model_Client The existing logged-in client model object.\n */\n$di['loggedin_client'] = function () use ($di) {\n    $di['is_client_logged'];\n    $client_id = $di['session']->get('client_id');\n\n    return $di['db']->getExistingModelById('Client', $client_id);\n};\n\n/*\n * Returns an existing logged-in admin model object.\n *\n * @param void\n *\n * @return \\Model_Admin|null The existing logged-in admin model object, or null if no admin is logged in.\n *\n * @throws \\Box_Exception If the script is running in CLI or CGI mode and there is no cron admin available.\n */\n$di['loggedin_admin'] = function () use ($di) {\n    if ('cli' === php_sapi_name() || !http_response_code()) {\n        return $di['mod_service']('staff')->getCronAdmin();\n    }\n\n    $di['is_admin_logged'];\n    $admin = $di['session']->get('admin');\n\n    return $di['db']->getExistingModelById('Admin', $admin['id']);\n};\n\n/*\n * Creates a new API object based on the specified role and returns it.\n *\n * @param string $role The role to create the API object for. Can be 'guest', 'client', 'admin', or 'system'.\n *\n * @return \\Api_Handler The new API object that was just created.\n *\n * @throws \\Exception If the specified role is not recognized.\n */\n$di['api'] = $di->protect(function ($role) use ($di) {\n    $identity = match ($role) {\n        'guest' => new \\Model_Guest(),\n        'client' => $di['loggedin_client'],\n        'admin' => $di['loggedin_admin'],\n        'system' => $di['mod_service']('staff')->getCronAdmin(),\n        default => throw new Exception('Unrecognized Handler type: ' . $role),\n    };\n\n    $api = new Api_Handler($identity);\n    $api->setDi($di);\n\n    return $api;\n});\n\n/*\n *\n * @param void\n *\n * @return \\Api_Handler\n */\n$di['api_guest'] = function () use ($di) {\n    return $di['api']('guest');\n};\n\n/*\n *\n * @param void\n *\n * @return \\Api_Handler\n */\n$di['api_client'] = function () use ($di) {\n    return $di['api']('client');\n};\n\n/*\n *\n * @param void\n *\n * @return \\Api_Handler\n */\n$di['api_admin'] = function () use ($di) {\n    return $di['api']('admin');\n};\n\n/*\n *\n * @param void\n *\n * @return \\Api_Handler\n */\n$di['api_system'] = function () use ($di) {\n    return $di['api']('system');\n};\n\n$di['tools'] = function () use ($di) {\n    $service = new \\FOSSBilling\\Tools();\n    $service->setDi($di);\n\n    return $service;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\Validate\n */\n$di['validator'] = function () use ($di) {\n    $validator = new \\FOSSBilling\\Validate();\n    $validator->setDi($di);\n\n    return $validator;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\CentralAlerts\n */\n$di['central_alerts'] = function () use ($di) {\n    $centralalerts = new \\FOSSBilling\\CentralAlerts();\n    $centralalerts->setDi($di);\n\n    return $centralalerts;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\CentralAlerts\n */\n$di['central_alerts'] = function () use ($di) {\n    $centralalerts = new \\FOSSBilling\\CentralAlerts();\n    $centralalerts->setDi($di);\n\n    return $centralalerts;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\ExtensionManager\n */\n$di['extension_manager'] = function () use ($di) {\n    $extension = new \\FOSSBilling\\ExtensionManager();\n    $extension->setDi($di);\n\n    return $extension;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\Update\n */\n$di['updater'] = function () use ($di) {\n    $updater = new \\FOSSBilling\\Update();\n    $updater->setDi($di);\n\n    return $updater;\n};\n\n/*\n * @param void\n *\n * @return Server_Package\n */\n$di['server_package'] = function () {\n    return new Server_Package();\n};\n\n/*\n * @param void\n *\n * @return Server_Client\n */\n$di['server_client'] = function () {\n    return new Server_Client();\n};\n\n/*\n * @param void\n *\n * @return Server_Account\n */\n$di['server_account'] = function () {\n    return new Server_Account();\n};\n\n/*\n * Creates a new server manager object and returns it.\n *\n * @param string $manager The name of the server manager to create.\n * @param array $config The configuration options for the server manager.\n *\n * @return \\Server_Manager The new server manager object that was just created.\n */\n$di['server_manager'] = $di->protect(function($manager, $config) use ($di) {\n    $class = sprintf('Server_Manager_%s', ucfirst($manager));\n\n    $s = new $class($config);\n    $s->setLog($di['logger']);\n\n    return $s;\n});\n\n/*\n * @param void\n *\n * @return \\FOSSBilling\\Requirements\n */\n$di['requirements'] = function () use ($di) {\n    $r = new \\FOSSBilling\\Requirements();\n    $r->setDi($di);\n\n    return $r;\n};\n\n/*\n * Creates a new Box_Period object using the provided period code and returns it.\n *\n * @param string $code The two character period code to create the period object with.\n *\n * @return \\Box_Period The new period object that was just created.\n */\n$di['period'] = $di->protect(function ($code) {\n    return new \\Box_Period($code);\n});\n\n/*\n * Gets the current client area theme.\n *\n * @param void\n *\n * @return \\Box_Theme The current client area theme.\n */\n$di['theme'] = function () use ($di) {\n    $service = $di['mod_service']('theme');\n\n    return $service->getCurrentClientAreaTheme();\n};\n\n/*\n * Gets the information of Webpack Encore for the current route theme.\n * @return string\n */\n$di['encore_info'] = function () use ($di) {\n    $service = $di['mod_service']('theme');\n\n    return $service->getEncoreInfo();\n};\n\n/*\n * Loads an existing cart session or creates a new one if there is no session.\n *\n * @param void\n *\n * @return mixed The either existing or new cart.\n */\n$di['cart'] = function () use ($di) {\n    $service = $di['mod_service']('cart');\n\n    return $service->getSessionCart();\n};\n\n/*\n * Creates a new table object and returns it.\n *\n * @param string $name The name of the table to create.\n *\n * @return \\Box_Table The new table object that was just created.\n */\n$di['table'] = $di->protect(function ($name) use ($di) {\n    $tools = new \\FOSSBilling\\Tools();\n    $tools->setDi($di);\n    $table = $tools->getTable($name);\n    $table->setDi($di);\n\n    return $table;\n});\n\n/*\n * @param void\n *\n * @return \\Box\\Mod\\Servicelicense\\Server\n */\n$di['license_server'] = function () use ($di) {\n    $server = new \\Box\\Mod\\Servicelicense\\Server($di['logger']);\n    $server->setDi($di);\n\n    return $server;\n};\n\n/*\n * @param void\n *\n * @return \\GeoIp2\\Database\\Reader\n */\n$di['geoip'] = function () {\n    return new \\GeoIp2\\Database\\Reader(PATH_LIBRARY . '/GeoLite2-Country.mmdb');\n};\n\n/*\n * @param void\n *\n * @return \\Box_Password\n */\n$di['password'] = function () {\n    return new Box_Password();\n};\n\n/*\n * Creates a new Box_Translate object and sets the specified text domain, locale, and other options.\n *\n * @param string $textDomain The text domain to create the translation object with.\n *\n * @return \\Box_Translate The new translation object that was just created.\n */\n$di['translate'] = $di->protect(function ($textDomain = '') use ($di) {\n    $tr = new Box_Translate();\n\n    if (!empty($textDomain)) {\n        $tr->setDomain($textDomain);\n    }\n\n    $locale = \\FOSSBilling\\i18n::getActiveLocale();\n\n    $tr->setDi($di);\n    $tr->setLocale($locale);\n    $tr->setup();\n\n    return $tr;\n});\n\n/*\n * Creates a CSV export of data from a specified table and sends it to the browser.\n *\n * @param string $table Name of the table to export data from\n * @param string $outputName Name of the exported CSV file\n * @param array $headers Optional array of column headers for the CSV file\n * @param int $limit Optional limit of the number of rows to export from the table\n * @return void\n */\n$di['table_export_csv'] = $di->protect(function (string $table, string $outputName = 'export.csv', array $headers = [], int $limit = 0) use ($di) {\n    if ($limit > 0) {\n        $beans = $di['db']->findAll($table, \"LIMIT :limit\", array(':limit' => $limit));\n    } else {\n        $beans = $di['db']->findAll($table);\n    }\n\n    $rows = array_map(function ($bean) {\n        return $bean->export();\n    }, $beans);\n\n    // If we've been provided a list of headers, use that. Otherwise, pull the keys from the rows and use that for the CSV header\n    if ($headers) {\n        $rows = array_map(function ($row) use ($headers) {\n            return array_intersect_key($row, array_flip($headers));\n        }, $rows);\n    } else {\n        $headers = array_keys(reset($rows));\n    }\n\n    $csv = League\\Csv\\Writer::createFromFileObject(new SplTempFileObject());\n\n    $csv->insertOne($headers);\n    $csv->insertAll($rows);\n\n    $csv->output($outputName);\n\n    // Prevent further output from being added to the end of the CSV\n    die();\n});\n\nreturn $di;\n"], "fixing_code": ["<?php declare(strict_types=1);\n/**\n * Copyright 2022-2023 FOSSBilling\n * Copyright 2011-2021 BoxBilling, Inc.\n * SPDX-License-Identifier: Apache-2.0\n *\n * @copyright FOSSBilling (https://www.fossbilling.org)\n * @license http://www.apache.org/licenses/LICENSE-2.0 Apache-2.0\n */\n\nuse Lcharette\\WebpackEncoreTwig\\EntrypointsTwigExtension;\nuse Lcharette\\WebpackEncoreTwig\\JsonManifest;\nuse Lcharette\\WebpackEncoreTwig\\TagRenderer;\nuse Lcharette\\WebpackEncoreTwig\\VersionedAssetsTwigExtension;\nuse RedBeanPHP\\Facade;\nuse Symfony\\Bridge\\Twig\\Extension\\TranslationExtension;\nuse Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter;\nuse Symfony\\WebpackEncoreBundle\\Asset\\EntrypointLookup;\nuse Twig\\Extension\\CoreExtension;\nuse Twig\\Extension\\DebugExtension;\nuse Twig\\Extension\\StringLoaderExtension;\nuse Twig\\Extra\\Intl\\IntlExtension;\n\n$di = new \\Pimple\\Container();\n\n/*\n * Returns the current FOSSBilling config from config.php\n *\n * @param void\n *\n * @return array\n */\n$di['config'] = function () {\n    $array = include PATH_ROOT . '/config.php';\n    return $array;\n};\n\n/*\n * Create a new logger instance and configures it based on the settings in the configuration file.\n *\n * @param void\n *\n * @return Box_Log A new logger instance\n */\n$di['logger'] = function () use ($di) {\n    $log = new Box_Log();\n    $log->setDi($di);\n\n    $log_to_db = isset($di['config']['log_to_db']) && $di['config']['log_to_db'];\n\n    if ($log_to_db) {\n        $activity_service = $di['mod_service']('activity');\n        $writer2 = new Box_LogDb($activity_service);\n\n        if ($di['auth']->isAdminLoggedIn()) {\n            $admin = $di['loggedin_admin'];\n            $log->setEventItem('admin_id', $admin->id);\n        } elseif ($di['auth']->isClientLoggedIn()) {\n            $client = $di['loggedin_client'];\n            $log->setEventItem('client_id', $client->id);\n        }\n\n        $log->addWriter($writer2);\n    } else {\n        $monolog = new \\FOSSBilling\\Monolog($di);\n        $log->addWriter($monolog);\n    }\n\n    return $log;\n};\n\n/*\n *\n * @param void\n *\n * @return \\Box_Crypt\n */\n$di['crypt'] = function () use ($di) {\n    $crypt = new Box_Crypt();\n    $crypt->setDi($di);\n\n    return $crypt;\n};\n\n/*\n * Creates a new PDO object for database connections\n *\n * @param void\n *\n * @return PDO The PDO object used for database connections\n */\n$di['pdo'] = function () use ($di) {\n    $c = $di['config']['db'];\n\n    $pdo = new PDO(\n        $c['type'] . ':host=' . $c['host'] . ';port=' . $c['port'] . ';dbname=' . $c['name'],\n        $c['user'],\n        $c['password'],\n        [\n            PDO::MYSQL_ATTR_USE_BUFFERED_QUERY => true,\n            PDO::ATTR_ERRMODE => PDO::ERRMODE_EXCEPTION,\n            PDO::ATTR_DEFAULT_FETCH_MODE => PDO::FETCH_ASSOC,\n        ]\n    );\n\n    if (isset($c['debug']) && $c['debug']) {\n        $pdo->setAttribute(PDO::ATTR_STATEMENT_CLASS, ['Box_DbLoggedPDOStatement']);\n    }\n\n    if ('mysql' === $c['type']) {\n        $pdo->exec('SET NAMES \"utf8\"');\n        $pdo->exec('SET CHARACTER SET utf8');\n        $pdo->exec('SET CHARACTER_SET_CONNECTION = utf8');\n        $pdo->exec('SET character_set_results = utf8');\n        $pdo->exec('SET character_set_server = utf8');\n        $pdo->exec('SET SESSION interactive_timeout = 28800');\n        $pdo->exec('SET SESSION wait_timeout = 28800');\n    }\n\n    return $pdo;\n};\n\n/*\n *\n * @param void\n *\n * @return \\Box_Database The new Box_Database object that was just created.\n */\n$di['db'] = function () use ($di) {\n    \\RedBeanPHP\\R::setup($di['pdo']);\n    \\RedBeanPHP\\Util\\DispenseHelper::setEnforceNamingPolicy(false);\n\n    $helper = new \\Box_BeanHelper();\n    $helper->setDi($di);\n\n    $mapper = new Facade();\n    $mapper->getRedBean()->setBeanHelper($helper);\n    $freeze = isset($di['config']['db']['freeze']) ? (bool) $di['config']['db']['freeze'] : true;\n    $mapper->freeze($freeze);\n\n    $db = new Box_Database();\n    $db->setDi($di);\n    $db->setDataMapper($mapper);\n\n    return $db;\n};\n\n/*\n *\n * @param void\n *\n * @return Box_Pagination\n */\n$di['pager'] = function () use ($di) {\n    $service = new Box_Pagination();\n    $service->setDi($di);\n\n    return $service;\n};\n\n/*\n *\n * @param void\n *\n * @return Box_Url\n */\n$di['url'] = function () use ($di) {\n    $url = new Box_Url();\n    $url->setDi($di);\n    $url->setBaseUri(BB_URL);\n\n    return $url;\n};\n\n/*\n * Returns a new Box_Mod object, created with the provided module name.\n *\n * @param string $name The name of the module to create the object with.\n *\n * @return \\Box_Mod The new Box_Mod object that was just created.\n */\n$di['mod'] = $di->protect(function ($name) use ($di) {\n    $mod = new Box_Mod($name);\n    $mod->setDi($di);\n\n    return $mod;\n});\n\n/*\n *\n * @param string $mod the name of the module to get\n *\n * @return mixed the service of the associated module\n */\n$di['mod_service'] = $di->protect(function ($mod, $sub = '') use ($di) {\n    return $di['mod']($mod)->getService($sub);\n});\n\n/*\n *\n * @param string $name the name of the module to get the configuration of\n *\n * @return mixed the configuration of the associated module\n */\n$di['mod_config'] = $di->protect(function ($name) use ($di) {\n    return $di['mod']($name)->getConfig();\n});\n\n/*\n *\n * @param void\n *\n * @return \\Box_EventManager\n */\n$di['events_manager'] = function () use ($di) {\n    $service = new Box_EventManager();\n    $service->setDi($di);\n\n    return $service;\n};\n\n/*\n * Creates a new session, applying specified security rules depending on the config.php settings.\n *\n * @param void\n *\n * @return \\FOSSBilling\\Session\n */\n$di['session'] = function () use ($di) {\n    $handler = new PdoSessionHandler($di['pdo']);\n\n    $mode = $di['config']['security']['mode'] ?? 'strict';\n    $lifespan = $di['config']['security']['cookie_lifespan'] ?? 7200;\n    $secure = $di['config']['security']['force_https'] ?? true;\n\n    $session = new \\FOSSBilling\\Session($handler, $mode, $lifespan, $secure);\n    $session->setDi($di);\n    $session->setupSession();\n\n    return $session;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\Request\n */\n$di['request'] = function () use ($di) {\n    $service = new \\FOSSBilling\\Request();\n    $service->setDi($di);\n\n    return $service;\n};\n\n/*\n * @param void\n *\n * @return \\Symfony\\Component\\Cache\\Adapter\\FilesystemAdapter\n */\n$di['cache'] = function () {\n    // Reference: https://symfony.com/doc/current/components/cache/adapters/filesystem_adapter.html\n    return new FilesystemAdapter('sf_cache', 24 * 60 * 60, PATH_CACHE);\n};\n\n/*\n *\n * @param void\n *\n * @return \\Box_Authorization\n */\n$di['auth'] = function () use ($di) {\n    return new Box_Authorization($di);\n};\n\n/*\n * Creates a new Twig environment that's configured for FOSSBilling.\n *\n * @param void\n *\n * @return \\Twig\\Environment The new Twig environment that was just created.\n *\n * @throws \\Twig\\Error\\LoaderError If the Twig environment could not be created.\n * @throws \\Twig\\Error\\RuntimeError If an error occurs while rendering a template.\n * @throws \\Twig\\Error\\SyntaxError If a template is malformed.\n */\n$di['twig'] = $di->factory(function () use ($di) {\n    $config = $di['config'];\n    $options = $config['twig'];\n\n    // Get internationalisation settings from config, or use sensible defaults for\n    // missing required settings.\n    $locale = \\FOSSBilling\\i18n::getActiveLocale();\n    $timezone = $config['i18n']['timezone'] ?? 'UTC';\n    $date_format = !empty($config['i18n']['date_format']) ? strtoupper($config['i18n']['date_format']) : 'MEDIUM';\n    $time_format = !empty($config['i18n']['time_format']) ? strtoupper($config['i18n']['time_format']) : 'SHORT';\n    $datetime_pattern = $config['i18n']['datetime_pattern'] ?? null;\n\n    $loader = new Twig\\Loader\\ArrayLoader();\n    $twig = new Twig\\Environment($loader, $options);\n\n    $box_extensions = new Box_TwigExtensions();\n    $box_extensions->setDi($di);\n\n    if ($di['encore_info']['is_encore_theme']) {\n        $entryPoints = new EntrypointLookup($di['encore_info']['entrypoints']);\n        $tagRenderer = new TagRenderer($entryPoints);\n        $encoreExtensions = new EntrypointsTwigExtension($entryPoints, $tagRenderer);\n        $twig->addExtension($encoreExtensions);\n        $twig->addExtension(new VersionedAssetsTwigExtension(new JsonManifest($di['encore_info']['manifest'])));\n    }\n\n    // $twig->addExtension(new OptimizerExtension());\n    $twig->addExtension(new StringLoaderExtension());\n    $twig->addExtension(new DebugExtension());\n    $twig->addExtension(new TranslationExtension());\n    $twig->addExtension($box_extensions);\n    $twig->getExtension(CoreExtension::class)->setTimezone($timezone);\n\n    try {\n        $dateFormatter = new \\IntlDateFormatter($locale, constant(\"\\IntlDateFormatter::$date_format\"), constant(\"\\IntlDateFormatter::$time_format\"), $timezone, null, $datetime_pattern);\n    } catch (\\Symfony\\Polyfill\\Intl\\Icu\\Exception\\MethodArgumentValueNotImplementedException) {\n        if (($config['i18n']['locale'] ?? 'en_US') == 'en_US') {\n            $dateFormatter = new \\IntlDateFormatter('en', constant(\"\\IntlDateFormatter::$date_format\"), constant(\"\\IntlDateFormatter::$time_format\"), $timezone, null, $datetime_pattern);\n        } else {\n            throw new \\Box_Exception(\"It appears you are trying to use FOSSBilling without the php intl extension enabled. FOSSBilling includes a polyfill for the intl extension, however it does not support :locale. Please enable the intl extension.\", [':locale' => $config['i18n']['locale']]);\n        }\n    }\n\n    $twig->addExtension(new IntlExtension($dateFormatter));\n\n    // add globals\n    if (isset($_SERVER['HTTP_X_REQUESTED_WITH']) && 'XMLHttpRequest' === $_SERVER['HTTP_X_REQUESTED_WITH']) {\n        $_GET['ajax'] = true;\n    }\n\n    // CSRF token\n    if (PHP_SESSION_ACTIVE !== session_status()) {\n        $token = hash('md5', $_COOKIE['PHPSESSID'] ?? '');\n    } else {\n        $token = hash('md5', session_id());\n    }\n\n    $twig->addGlobal('CSRFToken', $token);\n    $twig->addGlobal('request', $_GET);\n    $twig->addGlobal('guest', $di['api_guest']);\n    return $twig;\n});\n\n/*\n * Checks whether a client is logged in and throws an exception or redirects to the login page if not.\n *\n * @param void\n *\n * @return bool True if a client is logged in.\n *\n * @throws \\Exception If a client is not logged in and the request is an API request.\n *\n * @throws \\HttpException If a client is not logged in and the request is a browser request.\n */\n$di['is_client_logged'] = function () use ($di) {\n    if (!$di['auth']->isClientLoggedIn()) {\n        $api_str = '/api/';\n        $url = $_GET['_url'] ?? ($_SERVER['PATH_INFO'] ?? '');\n\n        if (0 === strncasecmp($url, $api_str, strlen($api_str))) {\n            // Throw Exception if api request\n            throw new Exception('Client is not logged in');\n        } else {\n            // Redirect to login page if browser request\n            $login_url = $di['url']->link('login');\n            header(\"Location: $login_url\");\n        }\n    }\n\n    return true;\n};\n\n/*\n * Checks whether an admin is logged in and throws an exception or redirects to the login page if not.\n *\n * @param void\n *\n * @return bool True if an admin is logged in.\n *\n * @throws \\Exception If an admin is not logged in and the request is an API request.\n *\n */\n$di['is_admin_logged'] = function () use ($di) {\n    if (!$di['auth']->isAdminLoggedIn()) {\n        $api_str = '/api/';\n        $url = $_GET['_url'] ?? ($_SERVER['PATH_INFO'] ?? '');\n\n        if (0 === strncasecmp($url, $api_str, strlen($api_str))) {\n            // Throw Exception if api request\n            throw new Exception('Admin is not logged in');\n        } else {\n            // Redirect to login page if browser request\n            $login_url = $di['url']->adminLink('staff/login');\n            header(\"Location: $login_url\");\n        }\n    }\n\n    return true;\n};\n\n/*\n * Returns an existing logged-in client model object.\n *\n * @param void\n *\n * @return \\Model_Client The existing logged-in client model object.\n */\n$di['loggedin_client'] = function () use ($di) {\n    $di['is_client_logged'];\n    $client_id = $di['session']->get('client_id');\n\n    return $di['db']->getExistingModelById('Client', $client_id);\n};\n\n/*\n * Returns an existing logged-in admin model object.\n *\n * @param void\n *\n * @return \\Model_Admin|null The existing logged-in admin model object, or null if no admin is logged in.\n *\n * @throws \\Box_Exception If the script is running in CLI or CGI mode and there is no cron admin available.\n */\n$di['loggedin_admin'] = function () use ($di) {\n    if ('cli' === php_sapi_name() || !http_response_code()) {\n        return $di['mod_service']('staff')->getCronAdmin();\n    }\n\n    $di['is_admin_logged'];\n    $admin = $di['session']->get('admin');\n\n    return $di['db']->getExistingModelById('Admin', $admin['id']);\n};\n\n/*\n * Creates a new API object based on the specified role and returns it.\n *\n * @param string $role The role to create the API object for. Can be 'guest', 'client', 'admin', or 'system'.\n *\n * @return \\Api_Handler The new API object that was just created.\n *\n * @throws \\Exception If the specified role is not recognized.\n */\n$di['api'] = $di->protect(function ($role) use ($di) {\n    $identity = match ($role) {\n        'guest' => new \\Model_Guest(),\n        'client' => $di['loggedin_client'],\n        'admin' => $di['loggedin_admin'],\n        'system' => $di['mod_service']('staff')->getCronAdmin(),\n        default => throw new Exception('Unrecognized Handler type: ' . $role),\n    };\n\n    $api = new Api_Handler($identity);\n    $api->setDi($di);\n\n    return $api;\n});\n\n/*\n *\n * @param void\n *\n * @return \\Api_Handler\n */\n$di['api_guest'] = function () use ($di) {\n    return $di['api']('guest');\n};\n\n/*\n *\n * @param void\n *\n * @return \\Api_Handler\n */\n$di['api_client'] = function () use ($di) {\n    return $di['api']('client');\n};\n\n/*\n *\n * @param void\n *\n * @return \\Api_Handler\n */\n$di['api_admin'] = function () use ($di) {\n    return $di['api']('admin');\n};\n\n/*\n *\n * @param void\n *\n * @return \\Api_Handler\n */\n$di['api_system'] = function () use ($di) {\n    return $di['api']('system');\n};\n\n$di['tools'] = function () use ($di) {\n    $service = new \\FOSSBilling\\Tools();\n    $service->setDi($di);\n\n    return $service;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\Validate\n */\n$di['validator'] = function () use ($di) {\n    $validator = new \\FOSSBilling\\Validate();\n    $validator->setDi($di);\n\n    return $validator;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\CentralAlerts\n */\n$di['central_alerts'] = function () use ($di) {\n    $centralalerts = new \\FOSSBilling\\CentralAlerts();\n    $centralalerts->setDi($di);\n\n    return $centralalerts;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\CentralAlerts\n */\n$di['central_alerts'] = function () use ($di) {\n    $centralalerts = new \\FOSSBilling\\CentralAlerts();\n    $centralalerts->setDi($di);\n\n    return $centralalerts;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\ExtensionManager\n */\n$di['extension_manager'] = function () use ($di) {\n    $extension = new \\FOSSBilling\\ExtensionManager();\n    $extension->setDi($di);\n\n    return $extension;\n};\n\n/*\n *\n * @param void\n *\n * @return \\FOSSBilling\\Update\n */\n$di['updater'] = function () use ($di) {\n    $updater = new \\FOSSBilling\\Update();\n    $updater->setDi($di);\n\n    return $updater;\n};\n\n/*\n * @param void\n *\n * @return Server_Package\n */\n$di['server_package'] = function () {\n    return new Server_Package();\n};\n\n/*\n * @param void\n *\n * @return Server_Client\n */\n$di['server_client'] = function () {\n    return new Server_Client();\n};\n\n/*\n * @param void\n *\n * @return Server_Account\n */\n$di['server_account'] = function () {\n    return new Server_Account();\n};\n\n/*\n * Creates a new server manager object and returns it.\n *\n * @param string $manager The name of the server manager to create.\n * @param array $config The configuration options for the server manager.\n *\n * @return \\Server_Manager The new server manager object that was just created.\n */\n$di['server_manager'] = $di->protect(function($manager, $config) use ($di) {\n    $class = sprintf('Server_Manager_%s', ucfirst($manager));\n\n    $s = new $class($config);\n    $s->setLog($di['logger']);\n\n    return $s;\n});\n\n/*\n * @param void\n *\n * @return \\FOSSBilling\\Requirements\n */\n$di['requirements'] = function () use ($di) {\n    $r = new \\FOSSBilling\\Requirements();\n    $r->setDi($di);\n\n    return $r;\n};\n\n/*\n * Creates a new Box_Period object using the provided period code and returns it.\n *\n * @param string $code The two character period code to create the period object with.\n *\n * @return \\Box_Period The new period object that was just created.\n */\n$di['period'] = $di->protect(function ($code) {\n    return new \\Box_Period($code);\n});\n\n/*\n * Gets the current client area theme.\n *\n * @param void\n *\n * @return \\Box_Theme The current client area theme.\n */\n$di['theme'] = function () use ($di) {\n    $service = $di['mod_service']('theme');\n\n    return $service->getCurrentClientAreaTheme();\n};\n\n/*\n * Gets the information of Webpack Encore for the current route theme.\n * @return string\n */\n$di['encore_info'] = function () use ($di) {\n    $service = $di['mod_service']('theme');\n\n    return $service->getEncoreInfo();\n};\n\n/*\n * Loads an existing cart session or creates a new one if there is no session.\n *\n * @param void\n *\n * @return mixed The either existing or new cart.\n */\n$di['cart'] = function () use ($di) {\n    $service = $di['mod_service']('cart');\n\n    return $service->getSessionCart();\n};\n\n/*\n * Creates a new table object and returns it.\n *\n * @param string $name The name of the table to create.\n *\n * @return \\Box_Table The new table object that was just created.\n */\n$di['table'] = $di->protect(function ($name) use ($di) {\n    $tools = new \\FOSSBilling\\Tools();\n    $tools->setDi($di);\n    $table = $tools->getTable($name);\n    $table->setDi($di);\n\n    return $table;\n});\n\n/*\n * @param void\n *\n * @return \\Box\\Mod\\Servicelicense\\Server\n */\n$di['license_server'] = function () use ($di) {\n    $server = new \\Box\\Mod\\Servicelicense\\Server($di['logger']);\n    $server->setDi($di);\n\n    return $server;\n};\n\n/*\n * @param void\n *\n * @return \\GeoIp2\\Database\\Reader\n */\n$di['geoip'] = function () {\n    return new \\GeoIp2\\Database\\Reader(PATH_LIBRARY . '/GeoLite2-Country.mmdb');\n};\n\n/*\n * @param void\n *\n * @return \\Box_Password\n */\n$di['password'] = function () {\n    return new Box_Password();\n};\n\n/*\n * Creates a new Box_Translate object and sets the specified text domain, locale, and other options.\n *\n * @param string $textDomain The text domain to create the translation object with.\n *\n * @return \\Box_Translate The new translation object that was just created.\n */\n$di['translate'] = $di->protect(function ($textDomain = '') use ($di) {\n    $tr = new Box_Translate();\n\n    if (!empty($textDomain)) {\n        $tr->setDomain($textDomain);\n    }\n\n    $locale = \\FOSSBilling\\i18n::getActiveLocale();\n\n    $tr->setDi($di);\n    $tr->setLocale($locale);\n    $tr->setup();\n\n    return $tr;\n});\n\n/*\n * Creates a CSV export of data from a specified table and sends it to the browser.\n *\n * @param string $table Name of the table to export data from\n * @param string $outputName Name of the exported CSV file\n * @param array $headers Optional array of column headers for the CSV file\n * @param int $limit Optional limit of the number of rows to export from the table\n * @return void\n */\n$di['table_export_csv'] = $di->protect(function (string $table, string $outputName = 'export.csv', array $headers = [], int $limit = 0) use ($di) {\n    if ($limit > 0) {\n        $beans = $di['db']->findAll($table, \"LIMIT :limit\", array(':limit' => $limit));\n    } else {\n        $beans = $di['db']->findAll($table);\n    }\n\n    $rows = array_map(function ($bean) {\n        return $bean->export();\n    }, $beans);\n\n    // If we've been provided a list of headers, use that. Otherwise, pull the keys from the rows and use that for the CSV header\n    if ($headers) {\n        $rows = array_map(function ($row) use ($headers) {\n            return array_intersect_key($row, array_flip($headers));\n        }, $rows);\n    } else {\n        $headers = array_keys(reset($rows));\n    }\n\n    $csv = League\\Csv\\Writer::createFromFileObject(new SplTempFileObject);\n    $csv->addFormatter(new League\\Csv\\EscapeFormula);\n    $csv->insertOne($headers);\n    $csv->insertAll($rows);\n\n    $csv->output($outputName);\n\n    // Prevent further output from being added to the end of the CSV\n    die();\n});\n\nreturn $di;\n"], "filenames": ["src/di.php"], "buggy_code_start_loc": [778], "buggy_code_end_loc": [780], "fixing_code_start_loc": [778], "fixing_code_end_loc": [780], "type": "CWE-1236", "message": "Improper Neutralization of Formula Elements in a CSV File in GitHub repository fossbilling/fossbilling prior to 0.5.3.", "other": {"cve": {"id": "CVE-2023-3493", "sourceIdentifier": "security@huntr.dev", "published": "2023-06-30T22:15:10.460", "lastModified": "2023-07-06T23:42:13.627", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Improper Neutralization of Formula Elements in a CSV File in GitHub repository fossbilling/fossbilling prior to 0.5.3."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 8.0, "baseSeverity": "HIGH"}, "exploitabilityScore": 2.1, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:H/PR:L/UI:R/S:C/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "HIGH", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.7, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.3, "impactScore": 5.8}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-1236"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fossbilling:fossbilling:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.3", "matchCriteriaId": "FBB9E4E5-B7F6-4CD5-BC9B-BEB53D588084"}]}]}], "references": [{"url": "https://github.com/fossbilling/fossbilling/commit/9402d6c4d44b77ccd68d98d1e6cedf782bd913dc", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/e9a272ca-b050-441d-a8cb-4fdecb76ccce", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/fossbilling/fossbilling/commit/9402d6c4d44b77ccd68d98d1e6cedf782bd913dc"}}