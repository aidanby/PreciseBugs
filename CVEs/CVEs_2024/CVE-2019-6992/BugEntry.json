{"buggy_code": ["<?php\n//\n// ZoneMinder web function library, $Date$, $Revision$\n// Copyright (C) 2001-2008 Philip Coombes\n// \n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n// \n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n// \n\n// Compatibility functions\nif ( version_compare( phpversion(), '4.3.0', '<') ) {\n  function ob_get_clean() {\n    $buffer = ob_get_contents();\n    ob_end_clean();\n    return( $buffer );\n  }\n}\n\nfunction noCacheHeaders() {\n  header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');    // Date in the past\n  header('Last-Modified: '.gmdate( 'D, d M Y H:i:s' ).' GMT'); // always modified\n  header('Cache-Control: no-store, no-cache, must-revalidate');  // HTTP/1.1\n  header('Cache-Control: post-check=0, pre-check=0', false);\n  header('Pragma: no-cache');         // HTTP/1.0\n}\n\nfunction CSPHeaders($view, $nonce) {\n  $additionalScriptSrc = \"\";\n  switch ($view) {\n    case 'login': {\n      if (defined('ZM_OPT_USE_GOOG_RECAPTCHA')\n          && defined('ZM_OPT_GOOG_RECAPTCHA_SITEKEY')\n          && defined('ZM_OPT_GOOG_RECAPTCHA_SECRETKEY')\n          && ZM_OPT_USE_GOOG_RECAPTCHA && ZM_OPT_GOOG_RECAPTCHA_SITEKEY && ZM_OPT_GOOG_RECAPTCHA_SECRETKEY) {\n        $additionalScriptSrc = \"https://www.google.com\";\n      }\n      // fall through\n    }\n    case 'bandwidth':\n    case 'blank':\n    case 'console':\n    case 'controlcap':\n    case 'cycle':\n    case 'donate':\n    case 'error':\n    case 'function':\n    case 'log':\n    case 'logout':\n    case 'optionhelp':\n    case 'options':\n    case 'plugin':\n    case 'postlogin':\n    case 'privacy':\n    case 'server':\n    case 'state':\n    case 'status':\n    case 'storage':\n    case 'version': {\n      // Enforce script-src on pages where inline scripts and event handlers have been fixed.\n      // 'unsafe-inline' is only for backwards compatibility with browsers which\n      // only support CSP 1 (with no nonce-* support).\n      header(\"Content-Security-Policy: script-src 'unsafe-inline' 'self' 'nonce-$nonce' $additionalScriptSrc\");\n      break;\n    }\n    default: {\n      // Use Report-Only mode on all other pages.\n      header(\"Content-Security-Policy-Report-Only: script-src 'unsafe-inline' 'self' 'nonce-$nonce' $additionalScriptSrc\");\n      break;\n    }\n  }\n}\n\nfunction CORSHeaders() {\n  if ( isset($_SERVER['HTTP_ORIGIN']) ) {\n\n# The following is left for future reference/use.\n    $valid = false;\n    $Servers = Server::find();\n    if ( sizeof($Servers) < 1 ) {\n# Only need CORSHeaders in the event that there are multiple servers in use.\n      # ICON: Might not be true. multi-port?\n      if ( ZM_MIN_STREAMING_PORT ) {\n        Logger::Debug(\"Setting default Access-Control-Allow-Origin from \" . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Headers: x-requested-with,x-request');\n      }\n      return;\n    }\n    foreach( $Servers as $Server ) {\n      if (\n        preg_match('/^(https?:\\/\\/)?'.preg_quote($Server->Hostname(),'/').'/i', $_SERVER['HTTP_ORIGIN'])\n        or\n        preg_match('/^(https?:\\/\\/)?'.preg_quote($Server->Name(),'/').'/i', $_SERVER['HTTP_ORIGIN'])\n      ) {\n        $valid = true;\n        Logger::Debug(\"Setting Access-Control-Allow-Origin from \" . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Headers: x-requested-with,x-request');\n        break;\n      }\n    }\n    if ( !$valid ) {\n      Warning($_SERVER['HTTP_ORIGIN'] . ' is not found in servers list.');\n    }\n  }\n}\n\nfunction getStreamSrc( $args, $querySep='&amp;' ) {\n  $streamSrc = ZM_BASE_URL.ZM_PATH_ZMS;\n\n  if ( ZM_OPT_USE_AUTH ) {\n    if ( ZM_AUTH_RELAY == 'hashed' ) {\n      $args[] = 'auth='.generateAuthHash( ZM_AUTH_HASH_IPS );\n    } elseif ( ZM_AUTH_RELAY == 'plain' ) {\n      $args[] = 'user='.$_SESSION['username'];\n      $args[] = 'pass='.$_SESSION['password'];\n    } elseif ( ZM_AUTH_RELAY == 'none' ) {\n      $args[] = 'user='.$_SESSION['username'];\n    }\n  }\n  if ( !in_array( 'mode=single', $args ) && !empty($GLOBALS['connkey']) ) {   \n    $args[] = 'connkey='.$GLOBALS['connkey'];\n  }       \n  if ( ZM_RAND_STREAM ) {\n    $args[] = 'rand='.time();\n  }\n\n  if ( count($args) ) {\n    $streamSrc .= '?'.join( $querySep, $args );\n  }\n\n  return( $streamSrc );\n}\n\nfunction getMimeType( $file ) {\n  if ( function_exists('mime_content_type') ) {\n    return( mime_content_type( $file ) );\n  } elseif ( function_exists('finfo_file') ) {\n    $finfo = finfo_open( FILEINFO_MIME );\n    $mimeType = finfo_file( $finfo, $file );\n    finfo_close($finfo);\n    return( $mimeType );\n  }\n  return( trim( exec( 'file -bi '.escapeshellarg( $file ).' 2>/dev/null' ) ) );\n}\n\nfunction outputVideoStream( $id, $src, $width, $height, $format, $title='' ) {\n  echo getVideoStreamHTML( $id, $src, $width, $height, $format, $title );\n}\n\nfunction getVideoStreamHTML( $id, $src, $width, $height, $format, $title='' ) {\n  $html = '';\n  $width = validInt($width);\n  $height = validInt($height);\n  $title = validHtmlStr($title);\n\n  if ( file_exists( $src ) ) {\n    $mimeType = getMimeType( $src );\n  } else {\n    switch( $format ) {\n      case 'asf' :\n        $mimeType = 'video/x-ms-asf';\n        break;\n      case 'avi' :\n      case 'wmv' :\n        $mimeType = 'video/x-msvideo';\n        break;\n      case 'mov' :\n        $mimeType = 'video/quicktime';\n        break;\n      case 'mpg' :\n      case 'mpeg' :\n        $mimeType = 'video/mpeg';\n        break;\n      case 'swf' :\n        $mimeType = 'application/x-shockwave-flash';\n        break;\n      case '3gp' :\n        $mimeType = 'video/3gpp';\n        break;\n      default :\n        $mimeType = \"video/$format\";\n        break;\n    }\n  }\n  if ( !$mimeType || ($mimeType == 'application/octet-stream') )\n    $mimeType = 'video/'.$format;\n  if ( ZM_WEB_USE_OBJECT_TAGS ) {\n    switch( $mimeType ) {\n      case 'video/x-ms-asf' :\n      case 'video/x-msvideo' :\n      case 'video/mp4' :\n        {\n          if ( isWindows() ) {\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\n              classid=\"CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95\"\n              codebase=\"'.ZM_BASE_PROTOCOL.'://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,0,02,902\"\n              standby=\"Loading Microsoft Windows Media Player components...\"\n              type=\"'.$mimeType.'\">\n              <param name=\"FileName\" value=\"'.$src.'\"/>\n              <param name=\"autoStart\" value=\"1\"/>\n              <param name=\"showControls\" value=\"0\"/>\n              <embed type=\"'.$mimeType.'\"\n              pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.microsoft.com/Windows/MediaPlayer/\"\n              src=\"'.$src.'\"\n              name=\"'.$title.'\"\n              width=\"'.$width.'\"\n              height=\"'.$height.'\"\n              autostart=\"1\"\n              showcontrols=\"0\">\n              </embed>\n              </object>';\n          }\n        }\n      case 'video/quicktime' :\n        {\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\n            codebase=\"'.ZM_BASE_PROTOCOL.'://www.apple.com/qtactivex/qtplugin.cab\"\n            type=\"'.$mimeType.'\">\n            <param name=\"src\" value=\"'.$src.'\"/>\n            <param name=\"autoplay\" VALUE=\"true\"/>\n            <param name=\"controller\" VALUE=\"false\"/>\n            <embed type=\"'.$mimeType.'\"\n            src=\"'.$src.'\"\n            pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.apple.com/quicktime/download/\"\n            name=\"'.$title.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            autoplay=\"true\"\n            controller=\"true\">\n            </embed>\n            </object>';\n        }\n      case 'application/x-shockwave-flash' :\n        {\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n            codebase=\"'.ZM_BASE_PROTOCOL.'://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"\n            type=\"'.$mimeType.'\">\n            <param name=\"movie\" value=\"'.$src.'\"/>\n            <param name=\"quality\" value=\"high\"/>\n            <param name=\"bgcolor\" value=\"#ffffff\"/>\n            <embed type=\"'.$mimeType.'\"\n            pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.macromedia.com/go/getflashplayer\"\n            src=\"'.$src.'\"\n            name=\"'.$title.'\"\n            width=\"'.$width.'\"\n            height=\"'.$height.'\"\n            quality=\"high\"\n            bgcolor=\"#ffffff\">\n            </embed>\n            </object>';\n        }\n    } # end switch\n  } # end if use object tags\n  return '<embed'. ( isset($mimeType)?(' type=\"'.$mimeType.'\"'):'' ). '\n      src=\"'.$src.'\"\n      name=\"'.$title.'\"\n      width=\"'.$width.'\"\n      height=\"'.$height.'\"\n      autostart=\"1\"\n      autoplay=\"1\"\n      showcontrols=\"0\"\n      controller=\"0\">\n      </embed>';\n}\n\nfunction outputImageStream( $id, $src, $width, $height, $title='' ) {\n  echo getImageStreamHTML( $id, $src, $width, $height, $title );\n}\n\n\nfunction getImageStreamHTML( $id, $src, $width, $height, $title='' ) {\n  if ( canStreamIframe() ) {\n      return '<iframe id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" '.($width? ' width=\"'. validInt($width).'\"' : '').($height?' height=\"'.validInt($height).'\"' : '' ).'/>';\n  } else {\n      return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" style=\"'.($width? ' width:'.$width.';' : '' ).($height ? ' height:'. $height.';' : '' ).'\"/>';\n  }\n}\n\nfunction outputControlStream( $src, $width, $height, $monitor, $scale, $target ) {\n?>\n  <form name=\"ctrlForm\" method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'] ?>\" target=\"<?php echo $target ?>\">\n    <input type=\"hidden\" name=\"view\" value=\"blank\">\n    <input type=\"hidden\" name=\"mid\" value=\"<?php echo $monitor['Id'] ?>\">\n    <input type=\"hidden\" name=\"action\" value=\"control\">\n    <?php\n    if ( $monitor['CanMoveMap'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"moveMap\">\n    <?php\n    } elseif ( $monitor['CanMoveRel'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"movePseudoMap\">\n    <?php\n    } elseif ( $monitor['CanMoveCon'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"moveConMap\">\n    <?php\n    }\n    ?>\n    <input type=\"hidden\" name=\"scale\" value=\"<?php echo $scale ?>\">\n    <input type=\"image\" src=\"<?php echo $src ?>\" width=\"<?php echo $width ?>\" height=\"<?php echo $height ?>\">\n  </form>\n<?php\n}\n\nfunction outputHelperStream( $id, $src, $width, $height, $title='' ) {\n  echo getHelperStream( $id, $src, $width, $height, $title );\n}\nfunction getHelperStream( $id, $src, $width, $height, $title='' ) {\n    return '<object type=\"application/x-java-applet\" id=\"'.$id.'\" code=\"com.charliemouse.cambozola.Viewer\"\n    archive=\"'. ZM_PATH_CAMBOZOLA .'\" \n    align=\"middle\"\n    width=\"'. $width .'\"\n    height=\"'. $height .'\"\n    title=\"'. $title .'\">\n    <param name=\"accessories\" value=\"none\"/>\n    <param name=\"url\" value=\"'. $src .'\"/>\n    </object>';\n}\n\nfunction outputImageStill( $id, $src, $width, $height, $title='' ) {\n  echo getImageStill( $id, $src, $width, $height, $title='' );\n}\nfunction getImageStill( $id, $src, $width, $height, $title='' ) {\n  return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'.$title.'\"'.(validInt($width)?' width=\"'.$width.'\"':'').(validInt($height)?' height=\"'.$height.'\"':'').'/>';\n}\n\nfunction getWebSiteUrl( $id, $src, $width, $height, $title='' ) {\n    # Prevent unsightly warnings when php cannot verify the ssl certificate\n    stream_context_set_default( [\n        'ssl' => [\n            'verify_peer' => false,\n            'verify_peer_name' => false,\n        ],\n    ]);\n    # The End User can turn off the following warning under Options -> Web\n    if ( ZM_WEB_XFRAME_WARN ) {\n        $header = get_headers($src, 1);\n        # If the target website has set X-Frame-Options, check it for \"sameorigin\" and warn the end user\n        if (array_key_exists('X-Frame-Options', $header)) {\n            $header = $header['X-Frame-Options'];\n            if ( stripos($header, 'sameorigin') === 0 )\n                Warning(\"Web site $src has X-Frame-Options set to sameorigin. An X-Frame-Options browser plugin is required to display this site.\");\n        }\n    }\n    return '<object id=\"'.$id.'\" data=\"'.$src.'\" alt=\"'.$title.'\" width=\"'.$width.'\" height=\"'.$height.'\"></object>';\n}\n\nfunction outputControlStill( $src, $width, $height, $monitor, $scale, $target ) {\n  ?>\n  <form name=\"ctrlForm\" method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'] ?>\" target=\"<?php echo $target ?>\">\n    <input type=\"hidden\" name=\"view\" value=\"blank\">\n    <input type=\"hidden\" name=\"mid\" value=\"<?php echo $monitor['Id'] ?>\">\n    <input type=\"hidden\" name=\"action\" value=\"control\">\n    <?php\n    if ( $monitor['CanMoveMap'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"moveMap\">\n    <?php\n    } elseif ( $monitor['CanMoveRel'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"movePseudoMap\">\n    <?php\n    } elseif ( $monitor['CanMoveCon'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"moveConMap\">\n    <?php\n    }\n    ?>\n    <input type=\"hidden\" name=\"scale\" value=\"<?php echo $scale ?>\">\n    <input type=\"image\" src=\"<?php echo $src ?>\" width=\"<?php echo $width ?>\" height=\"<?php echo $height ?>\">\n  </form>\n  <?php\n}\n\n// Incoming args are shell-escaped. This function must escape any further arguments it cannot guarantee.\nfunction getZmuCommand( $args ) {\n  $zmuCommand = ZMU_PATH;\n\n  if ( ZM_OPT_USE_AUTH ) {\n    if ( ZM_AUTH_RELAY == 'hashed' ) {\n      $zmuCommand .= ' -A '.generateAuthHash(false, true);\n    } elseif ( ZM_AUTH_RELAY == 'plain' ) {\n      $zmuCommand .= ' -U ' .escapeshellarg($_SESSION['username']).' -P '.escapeshellarg($_SESSION['password']);\n    } elseif ( ZM_AUTH_RELAY == 'none' ) {\n      $zmuCommand .= ' -U '.escapeshellarg($_SESSION['username']);\n    }\n  }\n\n  $zmuCommand .= $args;\n\n  return( $zmuCommand );\n}\n\nfunction getEventDefaultVideoPath( $event ) {\n  $Event = new Event( $event );\n  return $Event->getStreamSrc( array( 'mode'=>'mpeg', 'format'=>'h264' ) );\n}\n\nfunction deletePath( $path ) {\n  if ( is_dir( $path ) ) {\n    system( escapeshellcmd( 'rm -rf '.$path ) );\n  } else if ( file_exists($path) ) {\n    unlink( $path );\n  }\n}\n\nfunction deleteEvent( $event ) {\n\n  if ( empty($event) ) {\n    Error( 'Empty event passed to deleteEvent.');\n    return;\n  }\n\n  if ( gettype($event) != 'array' ) {\n# $event could be an eid, so turn it into an event hash\n    $event = new Event( $event );\n  } else {\nLogger::Debug(\"Event type: \" . gettype($event));\n  }\n\n  global $user;\n\n  if ( $user['Events'] == 'Edit' ) {\n    $event->delete();\n  } # CAN EDIT\n}\n\nfunction makeLink( $url, $label, $condition=1, $options='' ) {\n  $string = '';\n  if ( $condition ) {\n    $string .= '<a href=\"'.$url.'\"'.($options?(' '.$options):'').'>';\n  }\n  $string .= $label;\n  if ( $condition ) {\n    $string .= '</a>';\n  }\n  return( $string );\n}\n\nfunction makePopupLink( $url, $winName, $winSize, $label, $condition=1, $options='' ) {\n  // Avoid double-encoding since some consumers incorrectly pass a pre-escaped URL.\n  $string = '<a class=\"popup-link\" href=\"' . htmlspecialchars($url, ENT_COMPAT | ENT_HTML401, ini_get(\"default_charset\"), false) . '\"';\n  $string .= ' data-window-name=\"' . htmlspecialchars($winName) . '\"';\n  if ( $condition ) {\n    if ( is_array( $winSize ) ) {\n      $string .= ' data-window-tag=\"' . htmlspecialchars($winSize[0]) . '\"';\n      $string .= ' data-window-width=\"' . htmlspecialchars($winSize[1]) . '\"';\n      $string .= ' data-window-height=\"' . htmlspecialchars($winSize[2]) . '\"';\n    } else {\n      $string .= ' data-window-tag=\"' . htmlspecialchars($winSize) . '\"';\n    }\n\n    $string .= ($options ? (' ' . $options ) : '') . '>';\n  } else {\n    $string .= '<a>';\n  }\n  $string .= $label;\n  $string .= '</a>';\n  return( $string );\n}\n\nfunction makePopupButton( $url, $winName, $winSize, $buttonValue, $condition=1, $options='' ) {\n  $string = '<input type=\"button\" class=\"popup-link\" value=\"' . htmlspecialchars($buttonValue) . '\"';\n  $string .= ' data-url=\"' . htmlspecialchars($url, ENT_COMPAT | ENT_HTML401, ini_get(\"default_charset\"), false) . '\"';\n  $string .= ' data-window-name=\"' . htmlspecialchars($winName) . '\"';\n    if ( is_array( $winSize ) ) {\n      $string .= ' data-window-tag=\"' . htmlspecialchars($winSize[0]) . '\"';\n      $string .= ' data-window-width=\"' . htmlspecialchars($winSize[1]) . '\"';\n      $string .= ' data-window-height=\"' . htmlspecialchars($winSize[2]) . '\"';\n    } else {\n      $string .= ' data-window-tag=\"' . htmlspecialchars($winSize) . '\"';\n    }\n    if (!$condition) {\n     $string .= ' disabled=\"disabled\"';\n    }\n    $string  .=  ($options ? (' ' . $options) : '') . '/>';\n  return( $string );\n}\n\nfunction htmlSelect( $name, $contents, $values, $behaviours=false ) {\n\n  $behaviourText = '';\n  if ( !empty($behaviours) ) {\n    if ( is_array($behaviours) ) {\n      foreach ( $behaviours as $event=>$action ) {\n        $behaviourText .= ' '.$event.'=\"'.$action.'\"';\n      }\n    } else {\n      $behaviourText = ' onchange=\"'.$behaviours.'\"';\n    }\n  }\n\n  return \"<select name=\\\"$name\\\" id=\\\"$name\\\"$behaviourText>\".htmlOptions($contents, $values).'</select>';\n}\n\nfunction htmlOptions($contents, $values) {\n  $options_html = '';\n\n  foreach ( $contents as $value=>$option ) {\n    $disabled = 0;\n    $text = '';\n    if ( is_array($option) ) {\n\n      if ( isset($option['Name']) )\n        $text = $option['Name'];\n      else if ( isset($option['text']) )\n        $text = $option['text'];\n\n      if ( isset($option['disabled']) ) {\n        $disabled = $option['disabled'];\n        Error(\"Setting to disabled\");\n      }\n    } else if ( is_object($option) ) {\n      $text = $option->Name();\n    } else {\n      $text = $option;\n    }\n    $selected = is_array($values) ? in_array($value, $values) : !strcmp($value, $values);\n    $options_html .= \"<option value=\\\"$value\\\"\".\n      ($selected?' selected=\"selected\"':'').\n      ($disabled?' disabled=\"disabled\"':'').\n      \">$text</option>\";\n  }\n  return $options_html;\n}\n\nfunction truncText( $text, $length, $deslash=1 ) {       \n  return( preg_replace( '/^(.{'.$length.',}?)\\b.*$/', '\\\\1&hellip;', ($deslash?stripslashes($text):$text) ) );       \n}               \n\nfunction buildSelect( $name, $contents, $behaviours=false ) {\n  $value = '';\n  if ( preg_match( '/^\\s*(\\w+)\\s*(\\[.*\\])?\\s*$/', $name, $matches ) && count($matches) > 2 ) {\n    $arr = $matches[1];\n    if ( isset($GLOBALS[$arr]) )\n      $value = $GLOBALS[$arr];\n    elseif ( isset($_REQUEST[$arr]) )\n      $value = $_REQUEST[$arr];\n    if ( !preg_match_all( '/\\[\\s*[\\'\"]?(\\w+)[\"\\']?\\s*\\]/', $matches[2], $matches ) ) {\n      Fatal( \"Can't parse selector '$name'\" );\n    }\n    for ( $i = 0; $i < count($matches[1]); $i++ ) {\n      $idx = $matches[1][$i];\n      $value = isset($value[$idx])?$value[$idx]:false;\n    }\n  } else {\n    if ( isset($GLOBALS[$name]) )\n      $value = $GLOBALS[$name];\n    elseif ( isset($_REQUEST[$name]) )\n      $value = $_REQUEST[$name];\n  }\n  ob_start();\n  $behaviourText = '';\n  if ( !empty($behaviours) ) {\n    if ( is_array($behaviours) ) {\n      foreach ( $behaviours as $event=>$action ) {\n        $behaviourText .= ' '.$event.'=\"'.$action.'\"';\n      }\n    } else {\n      $behaviourText = ' onchange=\"'.$behaviours.'\"';\n    }\n  }\n  ?>\n  <select name=\"<?php echo $name ?>\" id=\"<?php echo $name ?>\"<?php echo $behaviourText ?>>\n  <?php\n  foreach ( $contents as $contentValue => $contentText ) {\n  ?>\n    <option value=\"<?php echo $contentValue ?>\"<?php if ( $value == $contentValue ) { ?> selected=\"selected\"<?php } ?>><?php echo validHtmlStr($contentText) ?></option>\n  <?php\n  }\n  ?>\n  </select>\n  <?php\n  $html = ob_get_contents();\n  ob_end_clean();\n\n  return( $html );\n}\n\nfunction getFormChanges( $values, $newValues, $types=false, $columns=false ) {\n  $changes = array();\n  if ( !$types )\n    $types = array();\n\n  foreach( $newValues as $key=>$value ) {\n    if ( $columns && !isset($columns[$key]) )\n      continue;\n\n    if ( !isset($types[$key]) )\n      $types[$key] = false;\n\n    switch( $types[$key] ) {\n      case 'set' :\n        {\n          if ( is_array($newValues[$key]) ) {\n            if ( (!isset($values[$key])) or ( join(',',$newValues[$key]) != $values[$key] ) ) {\n              $changes[$key] = \"`$key` = \".dbEscape(join(',',$newValues[$key]));\n            }\n          } else if ( (!isset($values[$key])) or $values[$key] ) {\n            $changes[$key] = \"`$key` = ''\";\n          }\n          break;\n        }\n      case 'image' :\n        {\n          if ( is_array( $newValues[$key] ) ) {\n            $imageData = getimagesize( $newValues[$key]['tmp_name'] );\n            $changes[$key.'Width'] = $key.'Width = '.$imageData[0];\n            $changes[$key.'Height'] = $key.'Height = '.$imageData[1];\n            $changes[$key.'Type'] = $key.\"Type = '\".$newValues[$key]['type'].\"'\";\n            $changes[$key.'Size'] = $key.'Size = '.$newValues[$key]['size'];\n            ob_start();\n            readfile( $newValues[$key]['tmp_name'] );\n            $changes[$key] = $key.\" = \".dbEscape( ob_get_contents() );\n            ob_end_clean();\n          } else {\n            $changes[$key] = \"$key = \".dbEscape($value);\n          }\n          break;\n        }\n      case 'document' :\n        {\n          if ( is_array( $newValues[$key] ) ) {\n            $imageData = getimagesize( $newValues[$key]['tmp_name'] );\n            $changes[$key.'Type'] = $key.\"Type = '\".$newValues[$key]['type'].\"'\";\n            $changes[$key.'Size'] = $key.'Size = '.$newValues[$key]['size'];\n            ob_start();\n            readfile( $newValues[$key]['tmp_name'] );\n            $changes[$key] = $key.' = '.dbEscape( ob_get_contents() );\n            ob_end_clean();\n          } else {\n            $changes[$key] = $key . ' = '.dbEscape($value);\n          }\n          break;\n        }\n      case 'file' :\n        {\n          $changes[$key.'Type'] = $key.'Type = '.dbEscape($newValues[$key]['type']);\n          $changes[$key.'Size'] = $key.'Size = '.dbEscape($newValues[$key]['size']);\n          ob_start();\n          readfile( $newValues[$key]['tmp_name'] );\n          $changes[$key] = $key.\" = '\".dbEscape( ob_get_contents() ).\"'\";\n          ob_end_clean();\n          break;\n        }\n      case 'raw' :\n        {\n          if ( (!isset($values[$key])) or ($values[$key] != $value) ) {\n            $changes[$key] = $key . ' = '.dbEscape($value);\n          }\n          break;\n        }\n      case 'toggle' :\n        if ( (!isset($values[$key])) or $values[$key] != $value ) {\n          if ( empty($value) ) {\n            $changes[$key] = \"$key = 0\";\n          } else {\n            $changes[$key] = \"$key = 1\";\n            //$changes[$key] = $key . ' = '.dbEscape(trim($value));\n          }\n        }\n        break;\n      case 'integer' :\n        if ( (!isset($values[$key])) or $values[$key] != $value ) {\n          $changes[$key] = $key . ' = '.intval($value);\n        }\n        break;\n      default :\n        {\n          if ( !isset($values[$key]) || ($values[$key] != $value) ) {\n            if ( ! isset($value) || $value == '' ) {\n              $changes[$key] = \"`$key` = NULL\";\n            } else {\n              $changes[$key] = \"`$key` = \".dbEscape(trim($value));\n            }\n          }\n          break;\n        }\n    } // end switch\n  } // end foreach newvalues\n  foreach( $values as $key=>$value ) {\n    if ( !empty($columns[$key]) ) {\n      if ( !empty($types[$key]) ) {\n        if ( $types[$key] == 'toggle' ) {\n          if ( !isset($newValues[$key]) && !empty($value) ) {\n            $changes[$key] = \"$key = 0\";\n          }\n        } else if ( $types[$key] == 'set' ) {\n          $changes[$key] = \"$key = ''\";\n        }\n      }\n    }\n  }\n  return( $changes );\n}\n\nfunction getBrowser( &$browser, &$version ) {\n  if ( isset($_SESSION['browser']) ) {\n    $browser = $_SESSION['browser'];\n    $version = $_SESSION['version'];\n  } else {\n    if (( preg_match( '/MSIE (.*?);/', $_SERVER['HTTP_USER_AGENT'], $logVersion)) || (preg_match( '/.*Trident.*rv:(.*?)(;|\\))/', $_SERVER['HTTP_USER_AGENT'], $logVersion))) {\n      $version = $logVersion[1];\n      $browser = 'ie';\n    } elseif ( preg_match( '/Chrome\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      // Check for old version of Chrome with bug 5876\n      if ( $version < 7 ) {\n        $browser = 'oldchrome';\n      } else {\n        $browser = 'chrome';\n      }\n    } elseif ( preg_match( '/Safari\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'safari';\n    } elseif ( preg_match( '/Opera[ \\/]([0-9].[0-9]{1,2})/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'opera';\n    } elseif ( preg_match( '/Konqueror\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'konqueror';\n    } elseif ( preg_match( '/Mozilla\\/([0-9].[0-9]{1,2})/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'mozilla';\n    } else {\n      $version = 0;\n      $browser = 'unknown';\n    }\n    $_SESSION['browser'] = $browser;\n    $_SESSION['version'] = $version;\n  }\n}\n\nfunction isMozilla() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'mozilla' );\n}\n\nfunction isKonqueror() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'konqueror' );\n}\n\nfunction isInternetExplorer() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'ie' );\n}\n\nfunction isOldChrome() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'oldchrome' );\n}\n\nfunction isChrome() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'chrome' );\n}\n\nfunction isOpera() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'opera' );\n}\n\nfunction isSafari() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'safari' );\n}\n\nfunction isWindows() {\n  return ( preg_match( '/Win/', $_SERVER['HTTP_USER_AGENT'] ) );\n}\n\nfunction canStreamIframe() {\n  return( isKonqueror() );\n}\n\nfunction canStreamNative() {\n  // Old versions of Chrome can display the stream, but then it blocks everything else (Chrome bug 5876)\n  return( ZM_WEB_CAN_STREAM == 'yes' || ( ZM_WEB_CAN_STREAM == 'auto' && (!isInternetExplorer() && !isOldChrome()) ) );\n}\n\nfunction canStreamApplet() {\n  if ( (ZM_OPT_CAMBOZOLA && !file_exists( ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA )) ) {\n    Warning ( 'ZM_OPT_CAMBOZOLA is enabled, but the system cannot find '.ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA );\n  }\n\n  return( (ZM_OPT_CAMBOZOLA && file_exists( ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA )) );\n}\n\nfunction canStream() {\n  return( canStreamNative() | canStreamApplet() );\n}\n\nfunction packageControl( $command ) {\n  $string = ZM_PATH_BIN.'/zmpkg.pl '.escapeshellarg( $command );\n  $string .= ' 2>/dev/null >&- <&- >/dev/null';\n  exec( $string );\n}\n\nfunction daemonControl( $command, $daemon=false, $args=false ) {\n  $string = escapeshellcmd(ZM_PATH_BIN).'/zmdc.pl '.$command;\n  if ( $daemon ) {\n    $string .= ' ' . $daemon;\n    if ( $args ) {\n      $string .= ' ' . $args;\n    }\n  }\n  $string = escapeshellcmd( $string );\n  #$string .= ' 2>/dev/null >&- <&- >/dev/null';\nLogger::Debug(\"daemonControl $string\");\n  exec( $string );\n}\n\nfunction zmcControl($monitor, $mode=false) {\n  $Monitor = new Monitor( $monitor );\n  return $Monitor->zmcControl($mode);\n}\n\nfunction zmaControl($monitor, $mode=false) {\n  $Monitor = new Monitor($monitor);\n  return $Monitor->zmaControl($mode);\n}\n\nfunction initDaemonStatus() {\n  global $daemon_status;\n\n  if ( !isset($daemon_status) ) {\n    if ( daemonCheck() ) {\n      $string = ZM_PATH_BIN.\"/zmdc.pl status\";\n      $daemon_status = shell_exec( $string );\n    } else {\n      $daemon_status = '';\n    }\n  }\n}\n\nfunction daemonStatus( $daemon, $args=false ) {\n  global $daemon_status;\n\n  initDaemonStatus();\n\n  $string = $daemon;\n  if ( $args )\n    $string .= ' ' . $args;\n  return( strpos( $daemon_status, \"'$string' running\" ) !== false );\n}\n\nfunction zmcStatus( $monitor ) {\n  if ( $monitor['Type'] == 'Local' ) {\n    $zmcArgs = '-d '.$monitor['Device'];\n  } else {\n    $zmcArgs = '-m '.$monitor['Id'];\n  }\n  return( daemonStatus( 'zmc', $zmcArgs ) );\n}\n\nfunction zmaStatus( $monitor ) {\n  if ( is_array( $monitor ) ) {\n    $monitor = $monitor['Id'];\n  }\n  return( daemonStatus( 'zma', \"-m $monitor\" ) );\n}\n\nfunction daemonCheck( $daemon=false, $args=false ) {\n  $string = ZM_PATH_BIN.'/zmdc.pl check';\n  if ( $daemon ) {\n    $string .= ' ' . $daemon;\n    if ( $args )\n      $string .= ' '. $args;\n  }\n  $string = escapeshellcmd( $string );\n  $result = exec( $string );\n  return( preg_match( '/running/', $result ) );\n}\n\nfunction zmcCheck( $monitor ) {\n  if ( $monitor['Type'] == 'Local' ) {\n    $zmcArgs = '-d '.$monitor['Device'];\n  } else {\n    $zmcArgs = '-m '.$monitor['Id'];\n  }\n  return( daemonCheck( 'zmc', $zmcArgs ) );\n}\n\nfunction zmaCheck( $monitor ) {\n  if ( is_array( $monitor ) ) {\n    $monitor = $monitor['Id'];\n  }\n  return( daemonCheck( 'zma', \"-m $monitor\" ) );\n}\n\nfunction getImageSrc( $event, $frame, $scale=SCALE_BASE, $captureOnly=false, $overwrite=false ) {\n  $Event = new Event( $event );\n  return $Event->getImageSrc( $frame, $scale, $captureOnly, $overwrite );\n}\n\nfunction viewImagePath( $path, $querySep='&amp;' ) {\n  return( '?view=image'.$querySep.'path='.$path );\n}\n\nfunction createListThumbnail( $event, $overwrite=false ) {\n  # Load the frame with the highest score to use as a thumbnail\n  if ( !($frame = dbFetchOne( \"SELECT * FROM Frames WHERE EventId=? AND Score=? ORDER BY FrameId LIMIT 1\", NULL, array( $event['Id'], $event['MaxScore'] ) )) )\n    return( false );\n\n  $frameId = $frame['FrameId'];\n\n  if ( ZM_WEB_LIST_THUMB_WIDTH ) {\n    $thumbWidth = ZM_WEB_LIST_THUMB_WIDTH;\n    $scale = (SCALE_BASE*ZM_WEB_LIST_THUMB_WIDTH)/$event['Width'];\n    $thumbHeight = reScale( $event['Height'], $scale );\n  } elseif ( ZM_WEB_LIST_THUMB_HEIGHT ) {\n    $thumbHeight = ZM_WEB_LIST_THUMB_HEIGHT;\n    $scale = (SCALE_BASE*ZM_WEB_LIST_THUMB_HEIGHT)/$event['Height'];\n    $thumbWidth = reScale( $event['Width'], $scale );\n  } else {\n    Fatal( \"No thumbnail width or height specified, please check in Options->Web\" );\n  }\n\n  $imageData = getImageSrc( $event, $frame, $scale, false, $overwrite );\n  if ( ! $imageData ) {\n    return ( false );\n  }\n\n  $thumbData = $frame;\n  $thumbData['Path'] = $imageData['thumbPath'];\n  $thumbData['Width'] = (int)$thumbWidth;\n  $thumbData['Height'] = (int)$thumbHeight;\n\n  return( $thumbData );\n}\n\nfunction createVideo( $event, $format, $rate, $scale, $overwrite=false ) {\n  $command = ZM_PATH_BIN.\"/zmvideo.pl -e \".$event['Id'].\" -f \".$format.\" -r \".sprintf( \"%.2F\", ($rate/RATE_BASE) );\n  if ( preg_match( '/\\d+x\\d+/', $scale ) )\n    $command .= \" -S \".$scale;\n  else\n    if ( version_compare( phpversion(), \"4.3.10\", \">=\") )\n      $command .= \" -s \".sprintf( \"%.2F\", ($scale/SCALE_BASE) );\n    else\n      $command .= \" -s \".sprintf( \"%.2f\", ($scale/SCALE_BASE) );\n  if ( $overwrite )\n    $command .= \" -o\";\n  $command = escapeshellcmd( $command );\n  $result = exec( $command, $output, $status );\nLogger::Debug(\"generating Video $command: result($result outptu:(\".implode(\"\\n\", $output ).\" status($status\");\n  return( $status?\"\":rtrim($result) );\n}\n\nfunction executeFilter( $filter_id ) {\n  $command = ZM_PATH_BIN.'/zmfilter.pl --filter_id '.escapeshellarg($filter_id);\n  $result = exec($command, $output, $status);\n  dbQuery('DELETE FROM Filters WHERE Id=?', array($filter_id));\n  return $status;\n}\n\n# This takes more than one scale amount, so it runs through each and alters dimension.\n# I can't imagine why you would want to do that.\nfunction reScale( $dimension, $dummy ) {\n  $new_dimension = $dimension;\n  for ( $i = 1; $i < func_num_args(); $i++ ) {\n    $scale = func_get_arg( $i );\n    if ( !empty($scale) && ($scale != 'auto') && ($scale != SCALE_BASE) )\n      $new_dimension = (int)(($new_dimension*$scale)/SCALE_BASE);\n  }\n  return( $new_dimension );\n}\n\nfunction deScale( $dimension, $dummy ) {\n  $new_dimension = $dimension;\n  for ( $i = 1; $i < func_num_args(); $i++ ) {\n    $scale = func_get_arg( $i );\n    if ( !empty($scale) && $scale != SCALE_BASE )\n      $new_dimension = (int)(($new_dimension*SCALE_BASE)/$scale);\n  }\n  return( $new_dimension );\n}\n\nfunction monitorLimitSql() {\n  global $user;\n  if ( !empty($user['MonitorIds']) )\n    $midSql = \" and MonitorId in (\".join( \",\", preg_split( '/[\"\\'\\s]*,[\"\\'\\s]*/', $user['MonitorIds'] ) ).\")\";\n  else\n    $midSql = '';\n  return( $midSql );\n}\n\n\nfunction parseSort( $saveToSession=false, $querySep='&amp;' ) {\n  global $sortQuery, $sortColumn, $sortOrder, $limitQuery; // Outputs\n  if (isset($_REQUEST['filter']['Query']['sort_field'])) { //Handle both new and legacy filter passing\n    $_REQUEST['sort_field'] = $_REQUEST['filter']['Query']['sort_field'];\n  }\n  if (isset($_REQUEST['filter']['Query']['sort_asc'])) {\n    $_REQUEST['sort_asc'] = $_REQUEST['filter']['Query']['sort_asc'];\n  }\n  if (isset($_REQUEST['filter']['Query']['limit'])) {\n    $_REQUEST['limit'] = $_REQUEST['filter']['Query']['limit'];\n  }\n  if ( empty($_REQUEST['sort_field']) ) {\n    $_REQUEST['sort_field'] = ZM_WEB_EVENT_SORT_FIELD;\n    $_REQUEST['sort_asc'] = (ZM_WEB_EVENT_SORT_ORDER == 'asc');\n  }\n  switch( $_REQUEST['sort_field'] ) {\n    case 'Id' :\n      $sortColumn = 'E.Id';\n      break;\n    case 'MonitorName' :\n      $sortColumn = 'M.Name';\n      break;\n    case 'Name' :\n      $sortColumn = 'E.Name';\n      break;\n    case 'Cause' :\n      $sortColumn = 'E.Cause';\n      break;\n    case 'DateTime' :\n      $sortColumn = 'E.StartTime';\n      $_REQUEST['sort_field'] = 'StartTime';\n      break;\n    case 'DiskSpace' :\n      $sortColumn = 'E.DiskSpace';\n      break;\n    case 'StartTime' :\n      $sortColumn = 'E.StartTime';\n      break;\n    case 'EndTime' :\n      $sortColumn = 'E.EndTime';\n      break;\n    case 'Length' :\n      $sortColumn = 'E.Length';\n      break;\n    case 'Frames' :\n      $sortColumn = 'E.Frames';\n      break;\n    case 'AlarmFrames' :\n      $sortColumn = 'E.AlarmFrames';\n      break;\n    case 'TotScore' :\n      $sortColumn = 'E.TotScore';\n      break;\n    case 'AvgScore' :\n      $sortColumn = 'E.AvgScore';\n      break;\n    case 'MaxScore' :\n      $sortColumn = 'E.MaxScore';\n      break;\n    default:\n      $sortColumn = 'E.StartTime';\n      break;\n  }\n  $sortOrder = $_REQUEST['sort_asc']?'asc':'desc';\n  if ( !$_REQUEST['sort_asc'] )\n    $_REQUEST['sort_asc'] = 0;\n  $sortQuery = $querySep.'sort_field='.validHtmlStr($_REQUEST['sort_field']).$querySep.'sort_asc='.validHtmlStr($_REQUEST['sort_asc']);\n  if ( !isset($_REQUEST['limit']) )\n    $_REQUEST['limit'] = '';\n  if ( $saveToSession ) {\n    $_SESSION['sort_field'] = validHtmlStr($_REQUEST['sort_field']);\n    $_SESSION['sort_asc'] = validHtmlStr($_REQUEST['sort_asc']);\n  }\n  if ($_REQUEST['limit'] != '') {\n    $limitQuery = \"&limit=\".$_REQUEST['limit'];\n  }\n}\n\nfunction getFilterQueryConjunctionTypes() {\n  return array(\n               'and' => translate('ConjAnd'),\n               'or'  => translate('ConjOr')\n               );\n}\n\nfunction parseFilter(&$filter, $saveToSession=false, $querySep='&amp;') {\n  $filter['query'] = '';\n  $filter['sql'] = '';\n  $filter['fields'] = '';\n\n  $validQueryConjunctionTypes = getFilterQueryConjunctionTypes();\n  $StorageArea = NULL;\n\n  $terms = isset($filter['Query']) ? $filter['Query']['terms'] : NULL;\n  if ( isset($terms) && count($terms) ) {\n    for ( $i = 0; $i < count($terms); $i++ ) {\n      if ( isset($terms[$i]['cnj']) && array_key_exists($terms[$i]['cnj'], $validQueryConjunctionTypes) ) {\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][cnj]\").'='.urlencode($terms[$i]['cnj']);\n        $filter['sql'] .= ' '.$terms[$i]['cnj'].' ';\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][cnj]\\\" value=\\\"\".htmlspecialchars($terms[$i]['cnj']).\"\\\"/>\\n\";\n      }\n      if ( isset($terms[$i]['obr']) && (string)(int)$terms[$i]['obr'] == $terms[$i]['obr'] ) {\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][obr]\").'='.urlencode($terms[$i]['obr']);\n        $filter['sql'] .= ' '.str_repeat('(', $terms[$i]['obr']).' ';\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][obr]\\\" value=\\\"\".htmlspecialchars($terms[$i]['obr']).\"\\\"/>\\n\";\n      }\n      if ( isset($terms[$i]['attr']) ) {\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][attr]\").'='.urlencode($terms[$i]['attr']);\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][attr]\\\" value=\\\"\".htmlspecialchars($terms[$i]['attr']).\"\\\"/>\\n\";\n        switch ( $terms[$i]['attr'] ) {\n          case 'MonitorName':\n            $filter['sql'] .= 'M.Name';\n            break;\n          case 'ServerId':\n          case 'MonitorServerId':\n            $filter['sql'] .= 'M.ServerId';\n            break;\n          case 'StorageServerId':\n            $filter['sql'] .= 'S.ServerId';\n            break;\n          case 'FilterServerId':\n            $filter['sql'] .= ZM_SERVER_ID;\n            break;\n# Unspecified start or end, so assume start, this is to support legacy filters\n          case 'DateTime':\n            $filter['sql'] .= 'E.StartTime';\n            break;\n          case 'Date':\n            $filter['sql'] .= 'to_days( E.StartTime )';\n            break;\n          case 'Time':\n            $filter['sql'] .= 'extract( hour_second from E.StartTime )';\n            break;\n          case 'Weekday':\n            $filter['sql'] .= 'weekday( E.StartTime )';\n            break;\n# Starting Time\n          case 'StartDateTime':\n            $filter['sql'] .= 'E.StartTime';\n            break;\n          case 'StartDate':\n            $filter['sql'] .= 'to_days( E.StartTime )';\n            break;\n          case 'StartTime':\n            $filter['sql'] .= 'extract( hour_second from E.StartTime )';\n            break;\n          case 'StartWeekday':\n            $filter['sql'] .= 'weekday( E.StartTime )';\n            break;\n# Ending Time\n          case 'EndDateTime':\n            $filter['sql'] .= 'E.EndTime';\n            break;\n          case 'EndDate':\n            $filter['sql'] .= 'to_days( E.EndTime )';\n            break;\n          case 'EndTime':\n            $filter['sql'] .= 'extract( hour_second from E.EndTime )';\n            break;\n          case 'EndWeekday':\n            $filter['sql'] .= 'weekday( E.EndTime )';\n            break;\n          case 'Id':\n          case 'Name':\n          case 'DiskSpace':\n          case 'MonitorId':\n          case 'StorageId':\n          case 'Length':\n          case 'Frames':\n          case 'AlarmFrames':\n          case 'TotScore':\n          case 'AvgScore':\n          case 'MaxScore':\n          case 'Cause':\n          case 'Notes':\n          case 'StateId':\n          case 'Archived':\n            $filter['sql'] .= 'E.'.$terms[$i]['attr'];\n            break;\n          case 'DiskPercent':\n            // Need to specify a storage area, so need to look through other terms looking for a storage area, else we default to ZM_EVENTS_PATH\n            if ( ! $StorageArea ) {\n              for ( $j = 0; $j < count($terms); $j++ ) {\n                if ( isset($terms[$j]['attr']) and $terms[$j]['attr'] == 'StorageId' and isset($terms[$j]['val']) ) {\n                  $StorageArea = new Storage($terms[$j]['val']);\n                  break;\n                }\n              } // end foreach remaining term\n              if ( ! $StorageArea ) $StorageArea = new Storage();\n            } // end no StorageArea found yet\n\n            $filter['sql'] .= getDiskPercent( $StorageArea->Path() );\n            break;\n          case 'DiskBlocks':\n            // Need to specify a storage area, so need to look through other terms looking for a storage area, else we default to ZM_EVENTS_PATH\n            if ( ! $StorageArea ) {\n              for ( $j = $i; $j < count($terms); $j++ ) {\n                if ( isset($terms[$i]['attr']) and $terms[$i]['attr'] == 'StorageId' and isset($terms[$j]['val']) ) {\n                  $StorageArea = new Storage($terms[$i]['val']);\n                }\n              } // end foreach remaining term\n            } // end no StorageArea found yet\n            $filter['sql'] .= getDiskBlocks( $StorageArea );\n            break;\n          case 'SystemLoad':\n            $filter['sql'] .= getLoad();\n            break;\n        }\n        $valueList = array();\n        foreach ( preg_split( '/[\"\\'\\s]*?,[\"\\'\\s]*?/', preg_replace( '/^[\"\\']+?(.+)[\"\\']+?$/', '$1', $terms[$i]['val'] ) ) as $value ) {\n          switch ( $terms[$i]['attr'] ) {\n            case 'MonitorName':\n            case 'Name':\n            case 'Cause':\n            case 'Notes':\n              $value = dbEscape($value);\n              break;\n            case 'MonitorServerId':\n            case 'FilterServerId':\n            case 'StorageServerId':\n            case 'ServerId':\n              if ( $value == 'ZM_SERVER_ID' ) {\n                $value = ZM_SERVER_ID;\n              } else if ( $value == 'NULL' ) {\n\n              } else {\n                $value = dbEscape($value);\n              }\n              break;\n            case 'StorageId':\n              $StorageArea = new Storage( $value );\n              if ( $value != 'NULL' )\n                $value = dbEscape($value);\n              break;\n            case 'DateTime':\n            case 'StartDateTime':\n            case 'EndDateTime':\n              if ( $value != 'NULL' )\n                $value = \"'\".strftime( STRF_FMT_DATETIME_DB, strtotime( $value ) ).\"'\";\n              break;\n            case 'Date':\n            case 'StartDate':\n            case 'EndDate':\n              if ( $value != 'NULL' )\n                $value = \"to_days( '\".strftime( STRF_FMT_DATETIME_DB, strtotime( $value ) ).\"' )\";\n              break;\n            case 'Time':\n            case 'StartTime':\n            case 'EndTime':\n              if ( $value != 'NULL' )\n              $value = \"extract( hour_second from '\".strftime( STRF_FMT_DATETIME_DB, strtotime( $value ) ).\"' )\";\n              break;\n            default :\n              if ( $value != 'NULL' )\n                $value = dbEscape($value);\n              break;\n          }\n          $valueList[] = $value;\n        }\n\n        switch ( $terms[$i]['op'] ) {\n          case '=' :\n          case '!=' :\n          case '>=' :\n          case '>' :\n          case '<' :\n          case '<=' :\n            $filter['sql'] .= ' '.$terms[$i]['op'].' '. $value;\n            break;\n          case '=~' :\n            $filter['sql'] .= ' regexp '.$value;\n            break;\n          case '!~' :\n            $filter['sql'] .= ' not regexp '.$value;\n            break;\n          case '=[]' :\n          case 'IN' :\n            $filter['sql'] .= ' in ('.join( ',', $valueList ).')';\n            break;\n          case '![]' :\n            $filter['sql'] .= ' not in ('.join( ',', $valueList ).')';\n            break;\n          case 'IS' :\n            if ( $value == 'Odd' )  {\n              $filter['sql'] .= ' % 2 = 1';\n            } else if ( $value == 'Even' )  {\n              $filter['sql'] .= ' % 2 = 0';\n            } else {\n              $filter['sql'] .= \" IS $value\";\n            }\n            break;\n          case 'IS NOT' :\n            $filter['sql'] .= \" IS NOT $value\";\n            break;\n          default:\n            Warning(\"Invalid operator in filter: \" . $terms[$i]['op'] );\n        }\n\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][op]\").'='.urlencode($terms[$i]['op']);\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][op]\\\" value=\\\"\".htmlspecialchars($terms[$i]['op']).\"\\\"/>\\n\";\n\tif ( isset($terms[$i]['val']) ) {\n\t\t$filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][val]\").'='.urlencode($terms[$i]['val']);\n\t\t$filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][val]\\\" value=\\\"\".htmlspecialchars($terms[$i]['val']).\"\\\"/>\\n\";\n\t}\n      } // end foreach term\n      if ( isset($terms[$i]['cbr']) && (string)(int)$terms[$i]['cbr'] == $terms[$i]['cbr'] ) {\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][cbr]\").'='.urlencode($terms[$i]['cbr']);\n        $filter['sql'] .= ' '.str_repeat( ')', $terms[$i]['cbr'] ).' ';\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][cbr]\\\" value=\\\"\".htmlspecialchars($terms[$i]['cbr']).\"\\\"/>\\n\";\n      }\n    }\n    if ( $filter['sql'] )\n      $filter['sql'] = ' and ( '.$filter['sql'].' )';\n    if ( $saveToSession ) {\n      $_SESSION['filter'] = $filter;\n    }\n  }\n}\n\n// Please note that the filter is passed in by copy, so you need to use the return value from this function.\n//\nfunction addFilterTerm( $filter, $position, $term=false ) {\n  if ( $position < 0 )\n    $position = 0;\n  \n  if ( ! isset( $filter['Query']['terms'] ) )\n    $filter['Query']['terms'] = array();\n  elseif( $position > count($filter['Query']['terms']) )\n    $position = count($filter['Query']['terms']);\n  if ( $term && $position == 0 )\n    unset( $term['cnj'] );\n  array_splice( $filter['Query']['terms'], $position, 0, array( $term?$term:array() ) );\n\n  return( $filter );\n}\n\nfunction delFilterTerm( $filter, $position ) {\n  if ( $position < 0 )\n    $position = 0;\n  elseif( $position >= count($filter['Query']['terms']) )\n    $position = count($filter['Query']['terms']);\n  array_splice( $filter['Query']['terms'], $position, 1 );\n\n  return( $filter );\n}\n\nfunction getPagination( $pages, $page, $maxShortcuts, $query, $querySep='&amp;' ) {\n  global $view;\n\n  $pageText = '';\n  if ( $pages > 1 ) {\n    if ( $page ) {\n      if ( $page < 0 )\n        $page = 1;\n      if ( $page > $pages )\n        $page = $pages;\n\n      if ( $page > 1 ) {\n        if ( false && $page > 2 ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page=1'.$query.'\">&lt;&lt;</a>';\n        }\n        $pageText .= '<a href=\"?view='.$view.$querySep.'page='.($page-1).$query.'\">&lt;</a>';\n\n        $newPages = array();\n        $pagesUsed = array();\n        $lo_exp = max(2,log($page-1)/log($maxShortcuts));\n        for ( $i = 0; $i < $maxShortcuts; $i++ ) {\n          $newPage = round($page-pow($lo_exp,$i));\n          if ( isset($pagesUsed[$newPage]) )\n            continue;\n          if ( $newPage <= 1 )\n            break;\n          $pagesUsed[$newPage] = true;\n          array_unshift( $newPages, $newPage );\n        }\n        if ( !isset($pagesUsed[1]) )\n          array_unshift( $newPages, 1 );\n\n        foreach ( $newPages as $newPage ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page='.$newPage.$query.'\">'.$newPage.'</a>&nbsp;';\n        }\n\n      }\n      $pageText .= '-&nbsp;'.$page.'&nbsp;-';\n      if ( $page < $pages ) {\n        $newPages = array();\n        $pagesUsed = array();\n        $hi_exp = max(2,log($pages-$page)/log($maxShortcuts));\n        for ( $i = 0; $i < $maxShortcuts; $i++ ) {\n          $newPage = round($page+pow($hi_exp,$i));\n          if ( isset($pagesUsed[$newPage]) )\n            continue;\n          if ( $newPage > $pages )\n            break;\n          $pagesUsed[$newPage] = true;\n          array_push( $newPages, $newPage );\n        }\n        if ( !isset($pagesUsed[$pages]) )\n          array_push( $newPages, $pages );\n\n        foreach ( $newPages as $newPage ) {\n          $pageText .= '&nbsp;<a href=\"?view='.$view.$querySep.'page='.$newPage.$query.'\">'.$newPage.'</a>';\n        }\n        $pageText .= '<a href=\"?view='.$view.$querySep.'page='.($page+1).$query.'\">&gt;</a>';\n        if ( false && $page < ($pages-1) ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page='.$pages.$query.'\">&gt;&gt;</a>';\n        }\n      }\n    }\n  }\n  return( $pageText );\n}\n\nfunction sortHeader( $field, $querySep='&amp;' ) {\n  global $view;\n  return( '?view='.$view.$querySep.'page=1'.$_REQUEST['filter']['query'].$querySep.'sort_field='.$field.$querySep.'sort_asc='.($_REQUEST['sort_field'] == $field?!$_REQUEST['sort_asc']:0).$querySep.'limit='.$_REQUEST['limit'] );\n}\n\nfunction sortTag( $field ) {\n  if ( $_REQUEST['sort_field'] == $field )\n    if ( $_REQUEST['sort_asc'] )\n      return( '(^)' );\n    else\n      return( '(v)' );\n  return( false );\n}\n\nfunction getLoad() {\n  $load = sys_getloadavg();\n  return( $load[0] );\n}\n\nfunction getDiskPercent($path = ZM_DIR_EVENTS) {\n  $total = disk_total_space($path);\n  if ( $total === false ) {\n    Error('disk_total_space returned false. Verify the web account user has access to ' . $path );\n    return 0;\n  } elseif ( $total == 0 ) {\n    Error('disk_total_space indicates the following path has a filesystem size of zero bytes ' . $path );\n    return 100;\n  }\n  $free = disk_free_space($path);\n  if ( $free === false ) {\n    Error('disk_free_space returned false. Verify the web account user has access to ' . $path );\n  }\n  $space = round((($total - $free) / $total) * 100);\n  return( $space );\n}\n\nfunction getDiskBlocks() {\n  if ( ! $StorageArea ) $StorageArea = new Storage();\n  $df = shell_exec( 'df '.escapeshellarg($StorageArea->Path() ));\n  $space = -1;\n  if ( preg_match( '/\\s(\\d+)\\s+\\d+\\s+\\d+%/ms', $df, $matches ) )\n    $space = $matches[1];\n  return( $space );\n}\n\nfunction systemStats() {\n\n    $load = getLoad();\n    $diskPercent = getDiskPercent();\n    $pathMapPercent = getDiskPercent(ZM_PATH_MAP);\n    $cpus = getcpus();\n\n    $normalized_load = $load / $cpus;\n\n    # Colorize the system load stat\n    if ( $normalized_load <= 0.75 ) {\n        $htmlLoad=$load;\n    } elseif ( $normalized_load <= 0.9 ) {\n        $htmlLoad=\"<span class=\\\"warning\\\">$load</span>\";\n    } elseif ( $normalized_load <= 1.1 ) {\n        $htmlLoad=\"<span class=\\\"error\\\">$load</span>\";\n    } else {\n        $htmlLoad=\"<span class=\\\"critical\\\">$load</span>\";\n    }\n\n    # Colorize the disk space stat\n    if ( $diskPercent < 98 ) {\n        $htmlDiskPercent=\"$diskPercent%\";\n    } elseif ( $diskPercent <= 99 ) {\n        $htmlDiskPercent=\"<span class=\\\"warning\\\">$diskPercent%</span>\";\n    } else {\n        $htmlDiskPercent=\"<span class=\\\"error\\\">$diskPercent%</span>\";\n    }\n\n    # Colorize the PATH_MAP (usually /dev/shm) stat\n    if ( $pathMapPercent < 90 ) {\n        if ( disk_free_space(ZM_PATH_MAP) > 209715200 ) { # have to always have at least 200MiB free\n            $htmlPathMapPercent=\"$pathMapPercent%\";\n        } else {\n            $htmlPathMapPercent=\"<span class=\\\"warning\\\">$pathMapPercent%</span>\";\n        }\n    } elseif ( $pathMapPercent < 100 ) {\n        $htmlPathMapPercent=\"<span class=\\\"warning\\\">$pathMapPercent%</span>\";\n    } else {\n        $htmlPathMapPercent=\"<span class=\\\"critical\\\">$pathMapPercent%</span>\";\n    }\n\n    $htmlString = translate('Load').\": $htmlLoad - \".translate('Disk').\": $htmlDiskPercent - \".ZM_PATH_MAP.\": $htmlPathMapPercent\";\n\n    return( $htmlString );\n}\n\nfunction getcpus() {\n\n    if (is_readable(\"/proc/cpuinfo\") ) { # Works on Linux\n        preg_match_all('/^processor/m', file_get_contents('/proc/cpuinfo'), $matches); \n        $num_cpus = count($matches[0]);\n    } else { # Works on BSD\n        $matches = explode(\":\", shell_exec(\"sysctl hw.ncpu\"));\n        $num_cpus = trim($matches[1]);\n    }\n\n    return( $num_cpus );\n}\n\n// Function to fix a problem whereby the built in PHP session handling \n// features want to put the sid as a hidden field after the form or \n// fieldset tag, neither of which will work with strict XHTML Basic.\nfunction sidField() {\n  if ( SID ) {\n    list( $sessname, $sessid ) = explode( \"=\", SID );\n?>\n    <input type=\"hidden\" name=\"<?php echo $sessname ?>\" value=\"<?php echo $sessid ?>\"/>\n<?php\n  }\n}\n\nfunction verNum( $version ) {\n  $vNum = '';\n  $maxFields = 3;\n  $vFields = explode( '.', $version );\n  array_splice( $vFields, $maxFields );\n  while ( count($vFields) < $maxFields ) {\n    $vFields[] = 0;\n  }\n  foreach ( $vFields as $vField ) {\n    $vField = sprintf( '%02d', $vField );\n    while ( strlen($vField) < 2 ) {\n      $vField = '0'.$vField;\n    }\n    $vNum .= $vField;\n  }\n  return( $vNum );\n}\n\nfunction fixSequences() {\n  $sequence = 1;\n  $sql = 'select * from Monitors order by Sequence asc, Id asc';\n  foreach( dbFetchAll( $sql ) as $monitor ) {\n    if ( $monitor['Sequence'] != $sequence ) {\n      dbQuery( 'update Monitors set Sequence = ? WHERE Id=?', array( $sequence, $monitor['Id'] ) );\n    }\n    $sequence++;\n  }\n}\n\nfunction firstSet() {\n  foreach ( func_get_args() as $arg ) {\n    if ( !empty( $arg ) )\n      return( $arg );\n  }\n}\n\nfunction linesIntersect( $line1, $line2 ) {\n  global $debug;\n\n  $min_x1 = min( $line1[0]['x'], $line1[1]['x'] );\n  $max_x1 = max( $line1[0]['x'], $line1[1]['x'] );\n  $min_x2 = min( $line2[0]['x'], $line2[1]['x'] );\n  $max_x2 = max( $line2[0]['x'], $line2[1]['x'] );\n  $min_y1 = min( $line1[0]['y'], $line1[1]['y'] );\n  $max_y1 = max( $line1[0]['y'], $line1[1]['y'] );\n  $min_y2 = min( $line2[0]['y'], $line2[1]['y'] );\n  $max_y2 = max( $line2[0]['y'], $line2[1]['y'] );\n\n  // Checking if bounding boxes intersect\n  if ( $max_x1 < $min_x2 || $max_x2 < $min_x1 ||$max_y1 < $min_y2 || $max_y2 < $min_y1 ) {\n    if ( $debug ) echo 'Not intersecting, out of bounds<br>';\n    return( false );\n  }\n\n  $dx1 = $line1[1]['x'] - $line1[0]['x'];\n  $dy1 = $line1[1]['y'] - $line1[0]['y'];\n  $dx2 = $line2[1]['x'] - $line2[0]['x'];\n  $dy2 = $line2[1]['y'] - $line2[0]['y'];\n\n  if ( $dx1 ) {\n    $m1 = $dy1/$dx1;\n    $b1 = $line1[0]['y'] - ($m1 * $line1[0]['x']);\n  } else {\n    $b1 = $line1[0]['y'];\n  }\n  if ( $dx2 ) {\n    $m2 = $dy2/$dx2;\n    $b2 = $line2[0]['y'] - ($m2 * $line2[0]['x']);\n  } else {\n    $b2 = $line2[0]['y'];\n  }\n\n  if ( $dx1 && $dx2 ) { // Both not vertical\n    if ( $m1 != $m2 ) { // Not parallel or colinear\n      $x = ( $b2 - $b1 ) / ( $m1 - $m2 );\n\n      if ( $x >= $min_x1 && $x <= $max_x1 && $x >= $min_x2 && $x <= $max_x2 ) {\n        if ( $debug ) echo \"Intersecting, at x $x<br>\";\n        return( true );\n      } else {\n        if ( $debug ) echo \"Not intersecting, out of range at x $x<br>\";\n        return( false );\n      }\n    } elseif ( $b1 == $b2 ) {\n      // Colinear, must overlap due to box check, intersect? \n      if ( $debug ) echo 'Intersecting, colinear<br>';\n      return( true );\n    } else {\n      // Parallel\n      if ( $debug ) echo 'Not intersecting, parallel<br>';\n      return( false );\n    }\n  } elseif ( !$dx1 ) { // Line 1 is vertical \n    $y = ( $m2 * $line1[0]['x'] ) * $b2;\n    if ( $y >= $min_y1 && $y <= $max_y1 ) {\n      if ( $debug ) echo \"Intersecting, at y $y<br>\";\n      return( true );\n    } else {\n      if ( $debug ) echo \"Not intersecting, out of range at y $y<br>\";\n      return( false );\n    }\n  } elseif ( !$dx2 ) { // Line 2 is vertical \n    $y = ( $m1 * $line2[0]['x'] ) * $b1;\n    if ( $y >= $min_y2 && $y <= $max_y2 ) {\n      if ( $debug ) echo \"Intersecting, at y $y<br>\";\n      return( true );\n    } else {\n      if ( $debug ) echo \"Not intersecting, out of range at y $y<br>\";\n      return( false );\n    }\n  } else { // Both lines are vertical\n    if ( $line1[0]['x'] == $line2[0]['x'] ) {\n      // Colinear, must overlap due to box check, intersect? \n      if ( $debug ) echo 'Intersecting, vertical, colinear<br>';\n      return( true );\n    } else {\n      // Parallel\n      if ( $debug ) echo 'Not intersecting, vertical, parallel<br>';\n      return( false );\n    }\n  }\n  if ( $debug ) echo 'Whoops, unexpected scenario<br>';\n  return( false );\n}\n\nfunction isSelfIntersecting( $points ) {\n  global $debug;\n\n  $n_coords = count($points);\n  $edges = array();\n  for ( $j = 0, $i = $n_coords-1; $j < $n_coords; $i = $j++ ) {\n    $edges[] = array( $points[$i], $points[$j] );\n  }\n\n  for ( $i = 0; $i <= ($n_coords-2); $i++ ) {\n    for ( $j = $i+2; $j < $n_coords+min(0,$i-1); $j++ ) {\n      if ( $debug ) echo \"Checking $i and $j<br>\";\n      if ( linesIntersect( $edges[$i], $edges[$j] ) ) {\n        if ( $debug ) echo \"Lines $i and $j intersect<br>\";\n        return( true );\n      }\n    }\n  }\n  return( false );\n}\n\nfunction getPolyCentre( $points, $area=0 ) {\n  $cx = 0.0;\n  $cy = 0.0;\n  if ( !$area )\n    $area = getPolyArea( $points );\n  for ( $i = 0, $j = count($points)-1; $i < count($points); $j = $i++ ) {\n    $ct = ($points[$i]['x'] * $points[$j]['y']) - ($points[$j]['x'] * $points[$i]['y']);\n    $cx += ($points[$i]['x'] + $points[$j]['x']) * ct;\n    $cy += ($points[$i]['y'] + $points[$j]['y']) * ct;\n  }\n  $cx = intval(round(abs($cx/(6.0*$area))));\n  $cy = intval(round(abs($cy/(6.0*$area))));\n  printf( \"X:%cx, Y:$cy<br>\" );\n  return( array( 'x'=>$cx, 'y'=>$cy ) );\n}\n\nfunction _CompareXY( $a, $b ) {\n  if ( $a['min_y'] == $b['min_y'] )\n    return( intval($a['min_x'] - $b['min_x']) );\n  else\n    return( intval($a['min_y'] - $b['min_y']) );\n}\n\nfunction _CompareX( $a, $b ) {\n  return( intval($a['min_x'] - $b['min_x']) );\n}\n\nfunction getPolyArea( $points ) {\n  global $debug;\n\n  $n_coords = count($points);\n  $global_edges = array();\n  for ( $j = 0, $i = $n_coords-1; $j < $n_coords; $i = $j++ ) {\n    $x1 = $points[$i]['x'];\n    $x2 = $points[$j]['x'];\n    $y1 = $points[$i]['y'];\n    $y2 = $points[$j]['y'];\n\n    //printf( \"x1:%d,y1:%d x2:%d,y2:%d\\n\", x1, y1, x2, y2 );\n    if ( $y1 == $y2 )\n      continue;\n\n    $dx = $x2 - $x1;\n    $dy = $y2 - $y1;\n\n    $global_edges[] = array(\n        'min_y' => $y1<$y2?$y1:$y2,\n        'max_y' => ($y1<$y2?$y2:$y1)+1,\n        'min_x' => $y1<$y2?$x1:$x2,\n        '_1_m' => $dx/$dy,\n        );\n  }\n\n  usort( $global_edges, '_CompareXY' );\n\n  if ( $debug ) {\n    for ( $i = 0; $i < count($global_edges); $i++ ) {\n      printf( '%d: min_y: %d, max_y:%d, min_x:%.2f, 1/m:%.2f<br>', $i, $global_edges[$i]['min_y'], $global_edges[$i]['max_y'], $global_edges[$i]['min_x'], $global_edges[$i]['_1_m'] );\n    }\n  }\n\n  $area = 0.0;\n  $active_edges = array();\n  $y = $global_edges[0]['min_y'];\n  do {\n    for ( $i = 0; $i < count($global_edges); $i++ ) {\n      if ( $global_edges[$i]['min_y'] == $y ) {\n        if ( $debug ) printf( 'Moving global edge<br>' );\n        $active_edges[] = $global_edges[$i];\n        array_splice( $global_edges, $i, 1 );\n        $i--;\n      } else {\n        break;\n      }\n    }\n    usort( $active_edges, '_CompareX' );\n    if ( $debug ) {\n      for ( $i = 0; $i < count($active_edges); $i++ ) {\n        printf( '%d - %d: min_y: %d, max_y:%d, min_x:%.2f, 1/m:%.2f<br>', $y, $i, $active_edges[$i]['min_y'], $active_edges[$i]['max_y'], $active_edges[$i]['min_x'], $active_edges[$i]['_1_m'] );\n      }\n    }\n    $last_x = 0;\n    $row_area = 0;\n    $parity = false;\n    for ( $i = 0; $i < count($active_edges); $i++ ) {\n      $x = intval(round($active_edges[$i]['min_x']));\n      if ( $parity ) {\n        $row_area += ($x - $last_x)+1;\n        $area += $row_area;\n      }\n      if ( $active_edges[$i]['max_y'] != $y )\n        $parity = !$parity;\n      $last_x = $x;\n    }\n    if ( $debug ) printf( '%d: Area:%d<br>', $y, $row_area );\n    $y++;\n    for ( $i = 0; $i < count($active_edges); $i++ ) {\n      if ( $y >= $active_edges[$i]['max_y'] ) { // Or >= as per sheets\n        if ( $debug ) printf( 'Deleting active_edge<br>' );\n        array_splice( $active_edges, $i, 1 );\n        $i--;\n      } else {\n        $active_edges[$i]['min_x'] += $active_edges[$i]['_1_m'];\n      }\n    }\n  } while ( count($global_edges) || count($active_edges) );\n  if ( $debug ) printf( 'Area:%d<br>', $area );\n  return( $area );\n}\n\nfunction getPolyAreaOld( $points ) {\n  $area = 0.0;\n  $edge = 0.0;\n  for ( $i = 0, $j = count($points)-1; $i < count($points); $j = $i++ ) {\n    $x_diff = ($points[$i]['x'] - $points[$j]['x']);\n    $y_diff = ($points[$i]['y'] - $points[$j]['y']);\n    $y_sum = ($points[$i]['y'] + $points[$j]['y']);\n    $trap_edge = sqrt(pow(abs($x_diff)+1,2) + pow(abs($y_diff)+1,2) );\n    $edge += $trap_edge;\n    $trap_area = ($x_diff * $y_sum );\n    $area += $trap_area;\n    printf( \"%d->%d, %d-%d=%.2f, %d+%d=%.2f(%.2f), %.2f, %.2f<br>\", i, j, $points[$i]['x'], $points[$j]['x'], $x_diff, $points[$i]['y'], $points[$j]['y'], $y_sum, $y_diff, $trap_area, $trap_edge );\n  }\n  $edge = intval(round(abs($edge)));\n  $area = intval(round((abs($area)+$edge)/2));\n  echo \"E:$edge<br>\";\n  echo \"A:$area<br>\";\n  return( $area );\n}\n\nfunction mapCoords( $a ) {\n  return( $a['x'].\",\".$a['y'] );\n}\n\nfunction pointsToCoords( $points ) {\n  return( join( ' ', array_map( 'mapCoords', $points ) ) );\n}\n\nfunction coordsToPoints( $coords ) {\n  $points = array();\n  if ( preg_match_all( '/(\\d+,\\d+)+/', $coords, $matches ) ) {\n    for ( $i = 0; $i < count($matches[1]); $i++ ) {\n      if ( preg_match( '/(\\d+),(\\d+)/', $matches[1][$i], $cmatches ) ) {\n        $points[] = array( 'x'=>$cmatches[1], 'y'=>$cmatches[2] );\n      } else {\n        echo( \"Bogus coordinates '\".$matches[$i].\"'\" );\n        return( false );\n      }\n    }\n  } else {\n    echo( \"Bogus coordinate string '$coords'\" );\n    return( false );\n  }\n  return( $points );\n}\n\nfunction limitPoints( &$points, $min_x, $min_y, $max_x, $max_y ) {\n  foreach ( $points as &$point ) {\n    if ( $point['x'] < $min_x ) {\n      Logger::Debug('Limiting point x'.$point['x'].' to min_x ' . $min_x );\n      $point['x'] = $min_x;\n    } else if ( $point['x'] > $max_x ) {\n      Logger::Debug('Limiting point x'.$point['x'].' to max_x ' . $max_x );\n      $point['x'] = $max_x;\n    }\n    if ( $point['y'] < $min_y ) {\n      Logger::Debug('Limiting point y'.$point['y'].' to min_y ' . $min_y );\n      $point['y'] = $min_y;\n    } else if ( $point['y'] > $max_y ) {\n      Logger::Debug('Limiting point y'.$point['y'].' to max_y ' . $max_y );\n      $point['y'] = $max_y;\n    }\n  } // end foreach point\n} // end function limitPoints( $points, $min_x, $min_y, $max_x, $max_y )\n\nfunction scalePoints( &$points, $scale ) {\n  foreach ( $points as &$point ) {\n    $point['x'] = reScale( $point['x'], $scale );\n    $point['y'] = reScale( $point['y'], $scale );\n  }\n}\n\nfunction getLanguages() {\n  $langs = array();\n  foreach ( glob('lang/*_*.php') as $file ) {\n    preg_match( '/([^\\/]+_.+)\\.php/', $file, $matches );\n    $langs[$matches[1]] = $matches[1];\n  }\n  return( $langs );\n}\n\nfunction trimString( $string, $length ) {\n  return( preg_replace( '/^(.{'.$length.',}?)\\b.*$/', '\\\\1&hellip;', $string ) );\n}\n\nfunction monitorIdsToNames( $ids ) {\n  global $mITN_monitors;\n  if ( !$mITN_monitors ) {\n    $sql = 'select Id, Name from Monitors';\n    foreach( dbFetchAll( $sql ) as $monitor ) {\n      $mITN_monitors[$monitor['Id']] = $monitor;\n    }\n  }\n  $names = array();\n  if ( ! is_array($ids) ) {\n    $ids = preg_split( '/\\s*,\\s*/', $ids );\n  }\n  foreach ( $ids as $id ) {\n    if ( visibleMonitor( $id ) ) {\n      if ( isset($mITN_monitors[$id]) ) {\n        $names[] = $mITN_monitors[$id]['Name'];\n      }\n    }\n  }\n  $name_string = join( ', ', $names );\n  return( $name_string );\n}\n\nfunction initX10Status() {\n  global $x10_status;\n\n  if ( !isset($x10_status) ) {\n    $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );\n    if ( $socket < 0 ) {\n      Fatal( 'socket_create() failed: '.socket_strerror($socket) );\n    }\n    $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';\n    if ( @socket_connect( $socket, $sock_file ) ) {\n      $command = 'status';\n      if ( !socket_write( $socket, $command ) ) {\n        Fatal( \"Can't write to control socket: \".socket_strerror(socket_last_error($socket)) );\n      }\n      socket_shutdown( $socket, 1 );\n      $x10Output = '';\n      while ( $x10Response = socket_read( $socket, 256 ) ) {\n        $x10Output .= $x10Response;\n      }\n      socket_close( $socket );\n    } else {\n      // Can't connect so use script\n      $command = ZM_PATH_BIN.\"/zmx10.pl --command status\";\n      //$command .= \" 2>/dev/null >&- <&- >/dev/null\";\n\n      $x10Output = exec( escapeshellcmd( $command ) );\n    }\n    foreach ( explode( \"\\n\", $x10Output ) as $x10Response ) {\n      if ( preg_match( \"/^(\\d+)\\s+(.+)$/\", $x10Response, $matches ) ) {\n        $x10_status[$matches[1]] = $matches[2];\n      }\n    }\n  }\n}\n\nfunction getDeviceStatusX10( $key ) {\n  global $x10_status;\n\n  initX10Status();\n\n  if ( empty($x10_status[$key]) || !($status = $x10_status[$key]) )\n    $status = 'unknown';\n  return( $status );\n}\n\nfunction setDeviceStatusX10( $key, $status ) {\n  $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );\n  if ( $socket < 0 ) {\n    Fatal( 'socket_create() failed: '.socket_strerror($socket) );\n  }\n  $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';\n  if ( @socket_connect( $socket, $sock_file ) ) {\n    $command = \"$status;$key\";\n    if ( !socket_write( $socket, $command ) ) {\n      Fatal( \"Can't write to control socket: \".socket_strerror(socket_last_error($socket)) );\n    }\n    socket_shutdown( $socket, 1 );\n    $x10Response = socket_read( $socket, 256 );\n    socket_close( $socket );\n  } else {\n    // Can't connect so use script\n    $command = ZM_PATH_BIN.'/zmx10.pl --command '.escapeshellarg( $status );\n    $command .= ' --unit-code '.escapeshellarg( $key );\n    //$command .= \" 2>/dev/null >&- <&- >/dev/null\";\n    $x10Response = exec( $command );\n  }\n  if ( preg_match( '/^'.$key.'\\s+(.*)/', $x10Response, $matches ) )\n    $status = $matches[1];\n  else\n    $status = 'unknown';\n  return( $status );\n}\n\nfunction logState() {\n  $state = 'ok';\n\n  $levelCounts = array(\n      Logger::FATAL => array( ZM_LOG_ALERT_FAT_COUNT, ZM_LOG_ALARM_FAT_COUNT ),\n      Logger::ERROR => array( ZM_LOG_ALERT_ERR_COUNT, ZM_LOG_ALARM_ERR_COUNT ),\n      Logger::WARNING => array( ZM_LOG_ALERT_WAR_COUNT, ZM_LOG_ALARM_WAR_COUNT ),\n      );\n\n  # This is an expensive request, as it has to hit every row of the Logs Table\n  $sql = 'SELECT Level, COUNT(Level) AS LevelCount FROM Logs WHERE Level < '.Logger::INFO.' AND TimeKey > unix_timestamp(now() - interval '.ZM_LOG_CHECK_PERIOD.' second) GROUP BY Level ORDER BY Level ASC';\n  $counts = dbFetchAll($sql);\n  if ( $counts ) {\n    foreach ( $counts as $count ) {\n      if ( $count['Level'] <= Logger::PANIC )\n        $count['Level'] = Logger::FATAL;\n      if ( !($levelCount = $levelCounts[$count['Level']]) ) {\n        Error('Unexpected Log level '.$count['Level']);\n        next;\n      }\n      if ( $levelCount[1] && $count['LevelCount'] >= $levelCount[1] ) {\n        $state = 'alarm';\n        break;\n      } elseif ( $levelCount[0] && $count['LevelCount'] >= $levelCount[0] ) {\n        $state = 'alert';\n      }\n    }\n  }\n  return $state;\n}\n\nfunction isVector ( &$array ) {\n  $next_key = 0;\n  foreach ( array_keys($array) as $key ) {\n    if ( !is_int( $key ) )\n      return( false );\n    if ( $key != $next_key++ )\n      return( false );\n  }\n  return( true );\n}\n\nfunction checkJsonError($value) {\n  if ( function_exists('json_last_error') ) {\n    $value = var_export($value,true);\n    switch( json_last_error() ) {\n      case JSON_ERROR_DEPTH :\n        Fatal( \"Unable to decode JSON string '$value', maximum stack depth exceeded\" );\n      case JSON_ERROR_CTRL_CHAR :\n        Fatal( \"Unable to decode JSON string '$value', unexpected control character found\" );\n      case JSON_ERROR_STATE_MISMATCH :\n        Fatal( \"Unable to decode JSON string '$value', invalid or malformed JSON\" );\n      case JSON_ERROR_SYNTAX :\n        Fatal( \"Unable to decode JSON string '$value', syntax error\" );\n      default :\n        Fatal( \"Unable to decode JSON string '$value', unexpected error \".json_last_error() );\n      case JSON_ERROR_NONE:\n        break;\n    }\n  }\n}\n\nfunction jsonEncode( &$value ) {\n  if ( function_exists('json_encode') ) {\n    $string = json_encode( $value );\n    checkJsonError($value);\n    return( $string );\n  }\n\n  switch ( gettype($value) ) {\n    case 'double':\n    case 'integer':\n      return( $value );\n    case 'boolean':\n      return( $value?'true':'false' );\n    case 'string':\n      return( '\"'.preg_replace( \"/\\r?\\n/\", '\\\\n', addcslashes($value,'\"\\\\/') ).'\"' );\n    case 'NULL':\n      return( 'null' );\n    case 'object':\n      return( '\"Object '.addcslashes(get_class($value),'\"\\\\/').'\"' );\n    case 'array':\n      if ( isVector( $value ) )\n        return( '['.join( ',', array_map( 'jsonEncode', $value) ).']' );\n      else {\n        $result = '{';\n        foreach ($value as $subkey => $subvalue ) {\n          if ( $result != '{' )\n            $result .= ',';\n          $result .= '\"'.$subkey.'\":'.jsonEncode( $subvalue );\n        }\n        return( $result.'}' );\n      }\n    default:\n      return( '\"'.addcslashes(gettype($value),'\"\\\\/').'\"' );\n  }\n}\n\nfunction jsonDecode( $value ) {\n  if ( function_exists('json_decode') ) {\n    $object = json_decode( $value, true );\n    checkJsonError($value);\n    return( $object );\n  }\n\n  $comment = false;\n  $unescape = false;\n  $out = '$result=';\n  for ( $i = 0; $i < strlen($value); $i++ ) {\n    if ( !$comment ) {\n      if ( ($value[$i] == '{') || ($value[$i] == '[') ) {\n        $out .= ' array(';\n      } else if ( ($value[$i] == '}') || ($value[$i] == ']') ) {\n        $out .= ')';\n      } else if ( $value[$i] == ':' ) {\n        $out .= '=>';\n      } else {\n        $out .= $value[$i];         \n      }\n    } else if ( !$unescape ) {\n      if ( $value[$i] == '\\\\' )\n        $unescape = true;\n      else\n        $out .= $value[$i];\n    } else {\n      if ( $value[$i] != '/' )\n        $out .= '\\\\';\n      $out .= $value[$i];\n      $unescape = false;\n    }\n    if ( $value[$i] == '\"' ) {\n      $comment = !$comment;\n    }\n  }\n  eval( $out.';' );\n  return( $result );\n}\n\ndefine( 'HTTP_STATUS_OK', 200 );\ndefine( 'HTTP_STATUS_BAD_REQUEST', 400 );\ndefine( 'HTTP_STATUS_FORBIDDEN', 403 );\n\nfunction ajaxError( $message, $code=HTTP_STATUS_OK ) {\n  Error( $message );\n  if ( function_exists( 'ajaxCleanup' ) )\n    ajaxCleanup();\n  if ( $code == HTTP_STATUS_OK ) {\n    $response = array( 'result'=>'Error', 'message'=>$message );\n    header( 'Content-type: text/plain' );\n    exit( jsonEncode( $response ) );\n  }\n  header( \"HTTP/1.0 $code $message\" );\n  exit();\n}\n\nfunction ajaxResponse( $result=false ) {\n  if ( function_exists( 'ajaxCleanup' ) )\n    ajaxCleanup();\n  $response = array( 'result'=>'Ok' );\n  if ( is_array( $result ) ) {\n    $response = array_merge( $response, $result );\n  } elseif ( !empty($result) ) {\n    $response['message'] = $result;\n  }\n  header( 'Content-type: text/plain' );\n  exit( jsonEncode( $response ) );\n}\n\nfunction generateConnKey() {\n  return( rand( 1, 999999 ) );\n}\n\nfunction detaintPath( $path ) {\n  // Remove any absolute paths, or relative ones that want to go up\n  $path = preg_replace( '/\\.(?:\\.+[\\\\/][\\\\/]*)+/', '', $path );\n  $path = preg_replace( '/^[\\\\/]+/', '', $path );\n  return( $path );\n}\n\nfunction cache_bust( $file ) {\n  # Use the last modified timestamp to create a link that gets a different filename\n  # To defeat caching.  Should probably use md5 hash\n  $parts = pathinfo($file);\n  global $css;\n  $dirname = preg_replace( '/\\//', '_', $parts['dirname'] );\n  $cacheFile = $dirname.'_'.$parts['filename'].'-'.$css.'-'.filemtime($file).'.'.$parts['extension'];\n  if ( file_exists(ZM_DIR_CACHE.'/'.$cacheFile) or symlink(ZM_PATH_WEB.'/'.$file, ZM_DIR_CACHE.'/'.$cacheFile) ) {\n    return 'cache/'.$cacheFile;\n  } else {\n    Warning(\"Failed linking $file to $cacheFile\");\n  }\n  return $file;\n}\n\nfunction getSkinFile( $file ) {\n  global $skinBase;\n  $skinFile = false;\n  foreach ( $skinBase as $skin ) {\n    $tempSkinFile = detaintPath( 'skins'.'/'.$skin.'/'.$file );\n    if ( file_exists( $tempSkinFile ) )\n      $skinFile = $tempSkinFile;\n  }\n  return  $skinFile;\n}\n\nfunction getSkinIncludes( $file, $includeBase=false, $asOverride=false ) {\n  global $skinBase;\n  $skinFile = false;\n  foreach ( $skinBase as $skin ) {\n    $tempSkinFile = detaintPath( 'skins'.'/'.$skin.'/'.$file );\n    if ( file_exists( $tempSkinFile ) )\n      $skinFile = $tempSkinFile;\n  }\n  $includeFiles = array();\n  if ( $asOverride ) {\n    if ( $skinFile )\n      $includeFiles[] = $skinFile;\n    else if ( $includeBase )\n      $includeFiles[] = $file;\n  } else {\n    if ( $includeBase )\n      $includeFiles[] = $file;\n    if ( $skinFile )\n      $includeFiles[] = $skinFile;\n  }\n  return( $includeFiles );\n}\n\nfunction requestVar( $name, $default='' ) {\n  return( isset($_REQUEST[$name])?validHtmlStr($_REQUEST[$name]):$default );\n}\n\n// For numbers etc in javascript or tags etc\nfunction validInt( $input ) {\n  return( preg_replace( '/\\D/', '', $input ) );\n}\n\nfunction validNum( $input ) {\n  return( preg_replace( '/[^\\d.-]/', '', $input ) );\n}\n\n// For general strings\nfunction validStr( $input ) {\n  return( strip_tags( $input ) );\n}\n\n// For strings in javascript or tags etc, expected to be in quotes so further quotes escaped rather than converted\nfunction validJsStr( $input ) {\n  return( strip_tags( addslashes( $input ) ) );\n}\n\n// For general text in pages outside of tags or quotes so quotes converted to entities\nfunction validHtmlStr( $input ) {\n  return( htmlspecialchars( $input, ENT_QUOTES ) );\n}\n\nfunction getStreamHTML( $monitor, $options = array() ) {\n\n  if ( isset($options['scale']) and $options['scale'] and ( $options['scale'] != 100 ) ) {\n    //Warning(\"Scale to \" . $options['scale'] );\n    $options['width'] = reScale( $monitor->Width(), $options['scale'] ) . 'px';\n    $options['height'] = reScale( $monitor->Height(), $options['scale'] ) . 'px';\n  } else {\n    # scale is empty or 100\n    # There may be a fixed width applied though, in which case we need to leave the height empty\n    if ( ! ( isset($options['width']) and $options['width'] ) ) {\n      $options['width'] = $monitor->Width() . 'px';\n      if ( ! ( isset($options['height']) and $options['height'] ) ) {\n        $options['height'] = $monitor->Height() . 'px';\n      }\n    } else if ( ! isset($options['height']) ) {\n      $options['height'] = '';\n    }\n  }\n  if ( ! isset($options['mode'] ) ) {\n    $options['mode'] = 'stream';\n  }\n  $options['maxfps'] = ZM_WEB_VIDEO_MAXFPS;\n  if ( $monitor->StreamReplayBuffer() )\n    $options['buffer'] = $monitor->StreamReplayBuffer();\n  //Warning(\"width: \" . $options['width'] . ' height: ' . $options['height']. ' scale: ' . $options['scale'] );\n\n  if ( $monitor->Type() == 'WebSite' ) {\n    return getWebSiteUrl(\n      'liveStream'.$monitor->Id(), $monitor->Path(),\n      ( isset($options['width']) ? $options['width'] : NULL ),\n      ( isset($options['height']) ? $options['height'] : NULL ),\n      $monitor->Name()\n    );\n  //FIXME, the width and height of the image need to be scaled.\n  } else if ( ZM_WEB_STREAM_METHOD == 'mpeg' && ZM_MPEG_LIVE_FORMAT ) {\n    $streamSrc = $monitor->getStreamSrc( array(\n      'mode'=>'mpeg',\n      'scale'=>(isset($options['scale'])?$options['scale']:100),\n      'bitrate'=>ZM_WEB_VIDEO_BITRATE,\n      'maxfps'=>ZM_WEB_VIDEO_MAXFPS,\n      'format' => ZM_MPEG_LIVE_FORMAT\n    ) );\n    return getVideoStreamHTML( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], ZM_MPEG_LIVE_FORMAT, $monitor->Name() );\n  } else if ( $options['mode'] == 'stream' and canStream() ) {\n    $options['mode'] = 'jpeg';\n    $streamSrc = $monitor->getStreamSrc($options);\n\n    if ( canStreamNative() )\n      return getImageStreamHTML( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], $monitor->Name());\n    elseif ( canStreamApplet() )\n      // Helper, empty widths and heights really don't work.\n      return getHelperStream( 'liveStream'.$monitor->Id(), $streamSrc, \n          $options['width'] ? $options['width'] : $monitor->Width(), \n          $options['height'] ? $options['height'] : $monitor->Height(),\n          $monitor->Name());\n  } else {\n    if ( $options['mode'] == 'stream' ) {\n      Info( 'The system has fallen back to single jpeg mode for streaming. Consider enabling Cambozola or upgrading the client browser.' );\n    }\n    $options['mode'] = 'single';\n    $streamSrc = $monitor->getStreamSrc( $options );\n    return getImageStill( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], $monitor->Name());\n  }\n} // end function getStreamHTML\n\nfunction getStreamMode( ) {\n  $streamMode = '';\n  if ( ZM_WEB_STREAM_METHOD == 'mpeg' && ZM_MPEG_LIVE_FORMAT ) {\n    $streamMode = 'mpeg';\n  } elseif ( canStream() ) {\n    $streamMode = 'jpeg';\n  } else {\n    $streamMode = 'single';\n    Info( 'The system has fallen back to single jpeg mode for streaming. Consider enabling Cambozola or upgrading the client browser.' );\n  }\n  return $streamMode;\n} // end function getStreamMode\n\nfunction folder_size($dir) {\n    $size = 0;\n    foreach (glob(rtrim($dir, '/').'/*', GLOB_NOSORT) as $each) {\n        $size += is_file($each) ? filesize($each) : folder_size($each);\n    }\n    return $size;\n} // end function folder_size\n\nfunction human_filesize($size, $precision = 2) {\n    $units = array('B','kB','MB','GB','TB','PB','EB','ZB','YB');\n    $step = 1024;\n    $i = 0;\n    while (($size / $step) > 0.9) {\n        $size = $size / $step;\n        $i++;\n    }\n    return round($size, $precision).$units[$i];\n}\n\nfunction csrf_startup() {\n    csrf_conf('rewrite-js', 'includes/csrf/csrf-magic.js');\n}\n\nfunction check_timezone() {\n  $now = new DateTime();\n\n  $sys_tzoffset = trim(shell_exec('date \"+%z\"'));\n  $php_tzoffset = trim($now->format('O'));\n  $mysql_tzoffset = trim(dbFetchOne(\"SELECT TIME_FORMAT(TIMEDIFF(NOW(), UTC_TIMESTAMP),'%H%i');\",'TIME_FORMAT(TIMEDIFF(NOW(), UTC_TIMESTAMP),\\'%H%i\\')'));\n\n  #Logger::Debug(\"System timezone offset determine to be: $sys_tzoffset,\\x20 \n                 #PHP timezone offset determine to be: $php_tzoffset,\\x20 \n                 #Mysql timezone offset determine to be: $mysql_tzoffset\n               #\");\n\n  if ( $sys_tzoffset != $php_tzoffset )\n    Fatal(\"ZoneMinder is not installed properly: php's date.timezone does not match the system timezone!\");\n\n  if ( $sys_tzoffset != $mysql_tzoffset )\n    Error(\"ZoneMinder is not installed properly: mysql's timezone does not match the system timezone! Event lists will display incorrect times.\");\n\n  if (!ini_get('date.timezone') || !date_default_timezone_set(ini_get('date.timezone')))\n    Fatal( \"ZoneMinder is not installed properly: php's date.timezone is not set to a valid timezone\" );\n\n}\n\nfunction unparse_url($parsed_url, $substitutions = array() ) { \n  $fields = array('scheme','host','port','user','pass','path','query','fragment');\n\n  foreach ( $fields as $field ) {\n    if ( isset( $substitutions[$field] ) ) {\n      $parsed_url[$field] = $substitutions[$field];\n    }\n  }\n  $scheme   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : ''; \n  $host     = isset($parsed_url['host']) ? $parsed_url['host'] : ''; \n  $port     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : ''; \n  $user     = isset($parsed_url['user']) ? $parsed_url['user'] : ''; \n  $pass     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : ''; \n  $pass     = ($user || $pass) ? \"$pass@\" : ''; \n  $path     = isset($parsed_url['path']) ? $parsed_url['path'] : ''; \n  $query    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : ''; \n  $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : ''; \n  return \"$scheme$user$pass$host$port$path$query$fragment\"; \n}\n\n// PP - POST request handler for PHP which does not need extensions\n// credit: http://wezfurlong.org/blog/2006/nov/http-post-from-php-without-curl/\n\n\nfunction do_request($method, $url, $data=array(), $optional_headers = null) {\n  global $php_errormsg;\n\n  $params = array('http' => array(\n        'method' => $method,\n        'content' => $data\n        ));\n  if ( $optional_headers !== null ) {\n    $params['http']['header'] = $optional_headers;\n  }\n  $ctx = stream_context_create($params);\n  $fp = @fopen($url, 'rb', false, $ctx);\n  if ( !$fp ) {\n    throw new Exception(\"Problem with $url, $php_errormsg\");\n  }\n  $response = @stream_get_contents($fp);\n  if ( $response === false ) {\n    throw new Exception(\"Problem reading data from $url, $php_errormsg\");\n  }\n  return $response;\n}\n\nfunction do_post_request($url, $data, $optional_headers = null) {\n  $params = array('http' => array(\n        'method' => 'POST',\n        'content' => $data\n        ));\n  if ( $optional_headers !== null ) {\n    $params['http']['header'] = $optional_headers;\n  }\n  $ctx = stream_context_create($params);\n  $fp = @fopen($url, 'rb', false, $ctx);\n  if ( !$fp ) {\n    throw new Exception(\"Problem with $url, $php_errormsg\");\n  }\n  $response = @stream_get_contents($fp);\n  if ( $response === false ) {\n    throw new Exception(\"Problem reading data from $url, $php_errormsg\");\n  }\n  return $response;\n}\n\n// The following works around php not being built with semaphore functions.\nif (!function_exists('sem_get')) {\n  function sem_get($key) {\n    return fopen(__FILE__ . '.sem.' . $key, 'w+');\n  }\n  function sem_acquire($sem_id) {\n    return flock($sem_id, LOCK_EX);\n  }\n  function sem_release($sem_id) {\n    return flock($sem_id, LOCK_UN);\n  }\n}\n\nif( !function_exists('ftok') ) {\n  function ftok($filename = \"\", $proj = \"\") {\n    if ( empty($filename) || !file_exists($filename) ) {\n      return -1;\n    } else {\n      $filename = $filename . (string) $proj;\n      for($key = array(); sizeof($key) < strlen($filename); $key[] = ord(substr($filename, sizeof($key), 1)));\n      return dechex(array_sum($key));\n    }\n  }\n}\n\nfunction getAffectedIds( $name ) {\n  $names = $name.'s';\n  $ids = array();\n\tif ( isset($_REQUEST[$names]) ) {\n\t\tif ( is_array($_REQUEST[$names]) ) {\n\t\t\t$ids = $_REQUEST[$names];\n\t\t} else {\n\t\t\t$ids = array($_REQUEST[$names]);\n\t\t}\n\t} else if ( isset($_REQUEST[$name]) ) {\n\t\tif ( is_array($_REQUEST[$name]) ) {\n\t\t\t$ids = $_REQUEST[$name];\n\t\t} else {\n\t\t\t$ids = array($_REQUEST[$name]);\n\t\t}\n\t}\n\treturn $ids;\n}\n\nfunction format_duration($time, $separator=':') {\n  return sprintf('%02d%s%02d%s%02d', floor($time/3600), $separator, ($time/60)%60, $separator, $time%60);\n}\n\n?>\n", "<?php\n//\n// ZoneMinder web controls file, $Date$, $Revision$\n// Copyright (C) 2001-2008 Philip Coombes\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n//\n\nif ( !canView( 'Control' ) )\n{\n    $view = \"error\";\n    return;\n}\n\n$controls = dbFetchAll( 'SELECT * FROM Controls ORDER BY Id' );\n\n$focusWindow = true;\n\nxhtmlHeaders(__FILE__, translate('ControlCaps') );\n?>\n<body>\n  <div id=\"page\">\n    <div id=\"header\">\n      <div id=\"headerButtons\">\n        <a href=\"#\" data-on-click=\"closeWindow\"><?php echo translate('Close') ?></a>\n      </div>\n      <h2><?php echo translate('ControlCaps') ?></h2>\n    </div>\n    <div id=\"content\">\n      <form name=\"contentForm\" id=\"contentForm\" method=\"get\" action=\"<?php echo $_SERVER['PHP_SELF'] ?>\" onsubmit=\"return( confirmDelete( 'Warning, deleting a control will reset all monitors that use it to be uncontrollable.\\nAre you sure you wish to delete?' ) );\">\n        <input type=\"hidden\" name=\"view\" value=\"<?php echo $view ?>\"/>\n        <input type=\"hidden\" name=\"action\" value=\"delete\"/>\n        <table id=\"contentTable\" class=\"major\" cellspacing=\"0\">\n          <thead>\n            <tr>\n              <th class=\"colName\"><?php echo translate('Name') ?></th>\n              <th class=\"colType\"><?php echo translate('Type') ?></th>\n              <th class=\"colProtocol\"><?php echo translate('Protocol') ?></th>\n              <th class=\"colCanMove\"><?php echo translate('CanMove') ?></th>\n              <th class=\"colCanZoom\"><?php echo translate('CanZoom') ?></th>\n              <th class=\"colCanFocus\"><?php echo translate('CanFocus') ?></th>\n              <th class=\"colCanIris\"><?php echo translate('CanIris') ?></th>\n              <th class=\"colCanWhiteBal\"><?php echo translate('CanWhiteBal') ?></th>\n              <th class=\"colHasPresets\"><?php echo translate('HasPresets') ?></th>\n              <th class=\"colMark\"><?php echo translate('Mark') ?></th>\n            </tr>\n          </thead>\n          <tbody>\n<?php\nforeach( $controls as $control )\n{\n?>\n            <tr>\n              <td class=\"colName\"><?php echo makePopupLink( '?view=controlcap&cid='.$control['Id'], 'zmControlCap', 'controlcap', $control['Name'], canView( 'Control' ) ) ?></td>\n              <td class=\"colType\"><?php echo $control['Type'] ?></td>\n              <td class=\"colProtocol\"><?php echo $control['Protocol'] ?></td>\n              <td class=\"colCanMove\"><?php echo $control['CanMove']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colCanZoom\"><?php echo $control['CanZoom']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colCanFocus\"><?php echo $control['CanFocus']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colCanIris\"><?php echo $control['CanIris']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colCanWhiteBal\"><?php echo $control['CanWhite']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colHasPresets\"><?php echo $control['HasHomePreset']?'H':'' ?><?php echo $control['HasPresets']?$control['NumPresets']:'0' ?></td>\n              <td class=\"colMark\"><input type=\"checkbox\" name=\"markCids[]\" value=\"<?php echo $control['Id'] ?>\" data-on-click-this=\"configureDeleteButton\"<?php if ( !canEdit( 'Control' ) ) {?> disabled=\"disabled\"<?php } ?>/></td>\n            </tr>\n<?php\n}\n?>\n          </tbody>\n        </table>\n        <div id=\"contentButtons\">\n          <?php echo makePopupButton('?view=controlcap', 'zmControlCap', 'controlcap', translate('AddNewControl'), canEdit( 'Control' )); ?>\n          <input type=\"submit\" name=\"deleteBtn\" value=\"<?php echo translate('Delete') ?>\" disabled=\"disabled\"/>\n        </div>\n      </form>\n    </div>\n  </div>\n</body>\n</html>\n"], "fixing_code": ["<?php\n//\n// ZoneMinder web function library, $Date$, $Revision$\n// Copyright (C) 2001-2008 Philip Coombes\n// \n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n// \n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n// \n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n// \n\n// Compatibility functions\nif ( version_compare( phpversion(), '4.3.0', '<') ) {\n  function ob_get_clean() {\n    $buffer = ob_get_contents();\n    ob_end_clean();\n    return( $buffer );\n  }\n}\n\nfunction noCacheHeaders() {\n  header('Expires: Mon, 26 Jul 1997 05:00:00 GMT');    // Date in the past\n  header('Last-Modified: '.gmdate( 'D, d M Y H:i:s' ).' GMT'); // always modified\n  header('Cache-Control: no-store, no-cache, must-revalidate');  // HTTP/1.1\n  header('Cache-Control: post-check=0, pre-check=0', false);\n  header('Pragma: no-cache');         // HTTP/1.0\n}\n\nfunction CSPHeaders($view, $nonce) {\n  $additionalScriptSrc = \"\";\n  switch ($view) {\n    case 'login': {\n      if (defined('ZM_OPT_USE_GOOG_RECAPTCHA')\n          && defined('ZM_OPT_GOOG_RECAPTCHA_SITEKEY')\n          && defined('ZM_OPT_GOOG_RECAPTCHA_SECRETKEY')\n          && ZM_OPT_USE_GOOG_RECAPTCHA && ZM_OPT_GOOG_RECAPTCHA_SITEKEY && ZM_OPT_GOOG_RECAPTCHA_SECRETKEY) {\n        $additionalScriptSrc = \"https://www.google.com\";\n      }\n      // fall through\n    }\n    case 'bandwidth':\n    case 'blank':\n    case 'console':\n    case 'controlcap':\n    case 'cycle':\n    case 'donate':\n    case 'error':\n    case 'function':\n    case 'log':\n    case 'logout':\n    case 'optionhelp':\n    case 'options':\n    case 'plugin':\n    case 'postlogin':\n    case 'privacy':\n    case 'server':\n    case 'state':\n    case 'status':\n    case 'storage':\n    case 'version': {\n      // Enforce script-src on pages where inline scripts and event handlers have been fixed.\n      // 'unsafe-inline' is only for backwards compatibility with browsers which\n      // only support CSP 1 (with no nonce-* support).\n      header(\"Content-Security-Policy: script-src 'unsafe-inline' 'self' 'nonce-$nonce' $additionalScriptSrc\");\n      break;\n    }\n    default: {\n      // Use Report-Only mode on all other pages.\n      header(\"Content-Security-Policy-Report-Only: script-src 'unsafe-inline' 'self' 'nonce-$nonce' $additionalScriptSrc\");\n      break;\n    }\n  }\n}\n\nfunction CORSHeaders() {\n  if ( isset($_SERVER['HTTP_ORIGIN']) ) {\n\n# The following is left for future reference/use.\n    $valid = false;\n    $Servers = Server::find();\n    if ( sizeof($Servers) < 1 ) {\n# Only need CORSHeaders in the event that there are multiple servers in use.\n      # ICON: Might not be true. multi-port?\n      if ( ZM_MIN_STREAMING_PORT ) {\n        Logger::Debug(\"Setting default Access-Control-Allow-Origin from \" . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Headers: x-requested-with,x-request');\n      }\n      return;\n    }\n    foreach( $Servers as $Server ) {\n      if (\n        preg_match('/^(https?:\\/\\/)?'.preg_quote($Server->Hostname(),'/').'/i', $_SERVER['HTTP_ORIGIN'])\n        or\n        preg_match('/^(https?:\\/\\/)?'.preg_quote($Server->Name(),'/').'/i', $_SERVER['HTTP_ORIGIN'])\n      ) {\n        $valid = true;\n        Logger::Debug(\"Setting Access-Control-Allow-Origin from \" . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Origin: ' . $_SERVER['HTTP_ORIGIN']);\n        header('Access-Control-Allow-Headers: x-requested-with,x-request');\n        break;\n      }\n    }\n    if ( !$valid ) {\n      Warning($_SERVER['HTTP_ORIGIN'] . ' is not found in servers list.');\n    }\n  }\n}\n\nfunction getStreamSrc( $args, $querySep='&amp;' ) {\n  $streamSrc = ZM_BASE_URL.ZM_PATH_ZMS;\n\n  if ( ZM_OPT_USE_AUTH ) {\n    if ( ZM_AUTH_RELAY == 'hashed' ) {\n      $args[] = 'auth='.generateAuthHash( ZM_AUTH_HASH_IPS );\n    } elseif ( ZM_AUTH_RELAY == 'plain' ) {\n      $args[] = 'user='.$_SESSION['username'];\n      $args[] = 'pass='.$_SESSION['password'];\n    } elseif ( ZM_AUTH_RELAY == 'none' ) {\n      $args[] = 'user='.$_SESSION['username'];\n    }\n  }\n  if ( !in_array( 'mode=single', $args ) && !empty($GLOBALS['connkey']) ) {   \n    $args[] = 'connkey='.$GLOBALS['connkey'];\n  }       \n  if ( ZM_RAND_STREAM ) {\n    $args[] = 'rand='.time();\n  }\n\n  if ( count($args) ) {\n    $streamSrc .= '?'.join( $querySep, $args );\n  }\n\n  return( $streamSrc );\n}\n\nfunction getMimeType( $file ) {\n  if ( function_exists('mime_content_type') ) {\n    return( mime_content_type( $file ) );\n  } elseif ( function_exists('finfo_file') ) {\n    $finfo = finfo_open( FILEINFO_MIME );\n    $mimeType = finfo_file( $finfo, $file );\n    finfo_close($finfo);\n    return( $mimeType );\n  }\n  return( trim( exec( 'file -bi '.escapeshellarg( $file ).' 2>/dev/null' ) ) );\n}\n\nfunction outputVideoStream( $id, $src, $width, $height, $format, $title='' ) {\n  echo getVideoStreamHTML( $id, $src, $width, $height, $format, $title );\n}\n\nfunction getVideoStreamHTML( $id, $src, $width, $height, $format, $title='' ) {\n  $html = '';\n  $width = validInt($width);\n  $height = validInt($height);\n  $title = validHtmlStr($title);\n\n  if ( file_exists( $src ) ) {\n    $mimeType = getMimeType( $src );\n  } else {\n    switch( $format ) {\n      case 'asf' :\n        $mimeType = 'video/x-ms-asf';\n        break;\n      case 'avi' :\n      case 'wmv' :\n        $mimeType = 'video/x-msvideo';\n        break;\n      case 'mov' :\n        $mimeType = 'video/quicktime';\n        break;\n      case 'mpg' :\n      case 'mpeg' :\n        $mimeType = 'video/mpeg';\n        break;\n      case 'swf' :\n        $mimeType = 'application/x-shockwave-flash';\n        break;\n      case '3gp' :\n        $mimeType = 'video/3gpp';\n        break;\n      default :\n        $mimeType = \"video/$format\";\n        break;\n    }\n  }\n  if ( !$mimeType || ($mimeType == 'application/octet-stream') )\n    $mimeType = 'video/'.$format;\n  if ( ZM_WEB_USE_OBJECT_TAGS ) {\n    switch( $mimeType ) {\n      case 'video/x-ms-asf' :\n      case 'video/x-msvideo' :\n      case 'video/mp4' :\n        {\n          if ( isWindows() ) {\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\n              classid=\"CLSID:22D6F312-B0F6-11D0-94AB-0080C74C7E95\"\n              codebase=\"'.ZM_BASE_PROTOCOL.'://activex.microsoft.com/activex/controls/mplayer/en/nsmp2inf.cab#Version=6,0,02,902\"\n              standby=\"Loading Microsoft Windows Media Player components...\"\n              type=\"'.$mimeType.'\">\n              <param name=\"FileName\" value=\"'.$src.'\"/>\n              <param name=\"autoStart\" value=\"1\"/>\n              <param name=\"showControls\" value=\"0\"/>\n              <embed type=\"'.$mimeType.'\"\n              pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.microsoft.com/Windows/MediaPlayer/\"\n              src=\"'.$src.'\"\n              name=\"'.$title.'\"\n              width=\"'.$width.'\"\n              height=\"'.$height.'\"\n              autostart=\"1\"\n              showcontrols=\"0\">\n              </embed>\n              </object>';\n          }\n        }\n      case 'video/quicktime' :\n        {\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            classid=\"clsid:02BF25D5-8C17-4B23-BC80-D3488ABDDC6B\"\n            codebase=\"'.ZM_BASE_PROTOCOL.'://www.apple.com/qtactivex/qtplugin.cab\"\n            type=\"'.$mimeType.'\">\n            <param name=\"src\" value=\"'.$src.'\"/>\n            <param name=\"autoplay\" VALUE=\"true\"/>\n            <param name=\"controller\" VALUE=\"false\"/>\n            <embed type=\"'.$mimeType.'\"\n            src=\"'.$src.'\"\n            pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.apple.com/quicktime/download/\"\n            name=\"'.$title.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            autoplay=\"true\"\n            controller=\"true\">\n            </embed>\n            </object>';\n        }\n      case 'application/x-shockwave-flash' :\n        {\n            return '<object id=\"'.$id.'\" width=\"'.$width.'\" height=\"'.$height.'\"\n            classid=\"clsid:D27CDB6E-AE6D-11cf-96B8-444553540000\"\n            codebase=\"'.ZM_BASE_PROTOCOL.'://download.macromedia.com/pub/shockwave/cabs/flash/swflash.cab#version=6,0,40,0\"\n            type=\"'.$mimeType.'\">\n            <param name=\"movie\" value=\"'.$src.'\"/>\n            <param name=\"quality\" value=\"high\"/>\n            <param name=\"bgcolor\" value=\"#ffffff\"/>\n            <embed type=\"'.$mimeType.'\"\n            pluginspage=\"'.ZM_BASE_PROTOCOL.'://www.macromedia.com/go/getflashplayer\"\n            src=\"'.$src.'\"\n            name=\"'.$title.'\"\n            width=\"'.$width.'\"\n            height=\"'.$height.'\"\n            quality=\"high\"\n            bgcolor=\"#ffffff\">\n            </embed>\n            </object>';\n        }\n    } # end switch\n  } # end if use object tags\n  return '<embed'. ( isset($mimeType)?(' type=\"'.$mimeType.'\"'):'' ). '\n      src=\"'.$src.'\"\n      name=\"'.$title.'\"\n      width=\"'.$width.'\"\n      height=\"'.$height.'\"\n      autostart=\"1\"\n      autoplay=\"1\"\n      showcontrols=\"0\"\n      controller=\"0\">\n      </embed>';\n}\n\nfunction outputImageStream( $id, $src, $width, $height, $title='' ) {\n  echo getImageStreamHTML( $id, $src, $width, $height, $title );\n}\n\n\nfunction getImageStreamHTML( $id, $src, $width, $height, $title='' ) {\n  if ( canStreamIframe() ) {\n      return '<iframe id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" '.($width? ' width=\"'. validInt($width).'\"' : '').($height?' height=\"'.validInt($height).'\"' : '' ).'/>';\n  } else {\n      return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'. validHtmlStr($title) .'\" style=\"'.($width? ' width:'.$width.';' : '' ).($height ? ' height:'. $height.';' : '' ).'\"/>';\n  }\n}\n\nfunction outputControlStream( $src, $width, $height, $monitor, $scale, $target ) {\n?>\n  <form name=\"ctrlForm\" method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'] ?>\" target=\"<?php echo $target ?>\">\n    <input type=\"hidden\" name=\"view\" value=\"blank\">\n    <input type=\"hidden\" name=\"mid\" value=\"<?php echo $monitor['Id'] ?>\">\n    <input type=\"hidden\" name=\"action\" value=\"control\">\n    <?php\n    if ( $monitor['CanMoveMap'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"moveMap\">\n    <?php\n    } elseif ( $monitor['CanMoveRel'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"movePseudoMap\">\n    <?php\n    } elseif ( $monitor['CanMoveCon'] ) {\n    ?>\n      <input type=\"hidden\" name=\"control\" value=\"moveConMap\">\n    <?php\n    }\n    ?>\n    <input type=\"hidden\" name=\"scale\" value=\"<?php echo $scale ?>\">\n    <input type=\"image\" src=\"<?php echo $src ?>\" width=\"<?php echo $width ?>\" height=\"<?php echo $height ?>\">\n  </form>\n<?php\n}\n\nfunction outputHelperStream( $id, $src, $width, $height, $title='' ) {\n  echo getHelperStream( $id, $src, $width, $height, $title );\n}\nfunction getHelperStream( $id, $src, $width, $height, $title='' ) {\n    return '<object type=\"application/x-java-applet\" id=\"'.$id.'\" code=\"com.charliemouse.cambozola.Viewer\"\n    archive=\"'. ZM_PATH_CAMBOZOLA .'\" \n    align=\"middle\"\n    width=\"'. $width .'\"\n    height=\"'. $height .'\"\n    title=\"'. $title .'\">\n    <param name=\"accessories\" value=\"none\"/>\n    <param name=\"url\" value=\"'. $src .'\"/>\n    </object>';\n}\n\nfunction outputImageStill( $id, $src, $width, $height, $title='' ) {\n  echo getImageStill( $id, $src, $width, $height, $title='' );\n}\nfunction getImageStill( $id, $src, $width, $height, $title='' ) {\n  return '<img id=\"'.$id.'\" src=\"'.$src.'\" alt=\"'.$title.'\"'.(validInt($width)?' width=\"'.$width.'\"':'').(validInt($height)?' height=\"'.$height.'\"':'').'/>';\n}\n\nfunction getWebSiteUrl( $id, $src, $width, $height, $title='' ) {\n    # Prevent unsightly warnings when php cannot verify the ssl certificate\n    stream_context_set_default( [\n        'ssl' => [\n            'verify_peer' => false,\n            'verify_peer_name' => false,\n        ],\n    ]);\n    # The End User can turn off the following warning under Options -> Web\n    if ( ZM_WEB_XFRAME_WARN ) {\n        $header = get_headers($src, 1);\n        # If the target website has set X-Frame-Options, check it for \"sameorigin\" and warn the end user\n        if (array_key_exists('X-Frame-Options', $header)) {\n            $header = $header['X-Frame-Options'];\n            if ( stripos($header, 'sameorigin') === 0 )\n                Warning(\"Web site $src has X-Frame-Options set to sameorigin. An X-Frame-Options browser plugin is required to display this site.\");\n        }\n    }\n    return '<object id=\"'.$id.'\" data=\"'.$src.'\" alt=\"'.$title.'\" width=\"'.$width.'\" height=\"'.$height.'\"></object>';\n}\n\nfunction outputControlStill( $src, $width, $height, $monitor, $scale, $target ) {\n  ?>\n  <form name=\"ctrlForm\" method=\"post\" action=\"<?php echo $_SERVER['PHP_SELF'] ?>\" target=\"<?php echo $target ?>\">\n    <input type=\"hidden\" name=\"view\" value=\"blank\">\n    <input type=\"hidden\" name=\"mid\" value=\"<?php echo $monitor['Id'] ?>\">\n    <input type=\"hidden\" name=\"action\" value=\"control\">\n    <?php\n    if ( $monitor['CanMoveMap'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"moveMap\">\n    <?php\n    } elseif ( $monitor['CanMoveRel'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"movePseudoMap\">\n    <?php\n    } elseif ( $monitor['CanMoveCon'] ) {\n    ?>\n    <input type=\"hidden\" name=\"control\" value=\"moveConMap\">\n    <?php\n    }\n    ?>\n    <input type=\"hidden\" name=\"scale\" value=\"<?php echo $scale ?>\">\n    <input type=\"image\" src=\"<?php echo $src ?>\" width=\"<?php echo $width ?>\" height=\"<?php echo $height ?>\">\n  </form>\n  <?php\n}\n\n// Incoming args are shell-escaped. This function must escape any further arguments it cannot guarantee.\nfunction getZmuCommand( $args ) {\n  $zmuCommand = ZMU_PATH;\n\n  if ( ZM_OPT_USE_AUTH ) {\n    if ( ZM_AUTH_RELAY == 'hashed' ) {\n      $zmuCommand .= ' -A '.generateAuthHash(false, true);\n    } elseif ( ZM_AUTH_RELAY == 'plain' ) {\n      $zmuCommand .= ' -U ' .escapeshellarg($_SESSION['username']).' -P '.escapeshellarg($_SESSION['password']);\n    } elseif ( ZM_AUTH_RELAY == 'none' ) {\n      $zmuCommand .= ' -U '.escapeshellarg($_SESSION['username']);\n    }\n  }\n\n  $zmuCommand .= $args;\n\n  return( $zmuCommand );\n}\n\nfunction getEventDefaultVideoPath( $event ) {\n  $Event = new Event( $event );\n  return $Event->getStreamSrc( array( 'mode'=>'mpeg', 'format'=>'h264' ) );\n}\n\nfunction deletePath( $path ) {\n  if ( is_dir( $path ) ) {\n    system( escapeshellcmd( 'rm -rf '.$path ) );\n  } else if ( file_exists($path) ) {\n    unlink( $path );\n  }\n}\n\nfunction deleteEvent( $event ) {\n\n  if ( empty($event) ) {\n    Error( 'Empty event passed to deleteEvent.');\n    return;\n  }\n\n  if ( gettype($event) != 'array' ) {\n# $event could be an eid, so turn it into an event hash\n    $event = new Event( $event );\n  } else {\nLogger::Debug(\"Event type: \" . gettype($event));\n  }\n\n  global $user;\n\n  if ( $user['Events'] == 'Edit' ) {\n    $event->delete();\n  } # CAN EDIT\n}\n\nfunction makeLink( $url, $label, $condition=1, $options='' ) {\n  $string = '';\n  if ( $condition ) {\n    $string .= '<a href=\"'.$url.'\"'.($options?(' '.$options):'').'>';\n  }\n  $string .= $label;\n  if ( $condition ) {\n    $string .= '</a>';\n  }\n  return( $string );\n}\n\n/**\n * $label must be already escaped. It can't be done here since it sometimes contains HTML tags.\n */\nfunction makePopupLink( $url, $winName, $winSize, $label, $condition=1, $options='' ) {\n  // Avoid double-encoding since some consumers incorrectly pass a pre-escaped URL.\n  $string = '<a class=\"popup-link\" href=\"' . htmlspecialchars($url, ENT_COMPAT | ENT_HTML401, ini_get(\"default_charset\"), false) . '\"';\n  $string .= ' data-window-name=\"' . htmlspecialchars($winName) . '\"';\n  if ( $condition ) {\n    if ( is_array( $winSize ) ) {\n      $string .= ' data-window-tag=\"' . htmlspecialchars($winSize[0]) . '\"';\n      $string .= ' data-window-width=\"' . htmlspecialchars($winSize[1]) . '\"';\n      $string .= ' data-window-height=\"' . htmlspecialchars($winSize[2]) . '\"';\n    } else {\n      $string .= ' data-window-tag=\"' . htmlspecialchars($winSize) . '\"';\n    }\n\n    $string .= ($options ? (' ' . $options ) : '') . '>';\n  } else {\n    $string .= '<a>';\n  }\n  $string .= $label;\n  $string .= '</a>';\n  return( $string );\n}\n\nfunction makePopupButton( $url, $winName, $winSize, $buttonValue, $condition=1, $options='' ) {\n  $string = '<input type=\"button\" class=\"popup-link\" value=\"' . htmlspecialchars($buttonValue) . '\"';\n  $string .= ' data-url=\"' . htmlspecialchars($url, ENT_COMPAT | ENT_HTML401, ini_get(\"default_charset\"), false) . '\"';\n  $string .= ' data-window-name=\"' . htmlspecialchars($winName) . '\"';\n    if ( is_array( $winSize ) ) {\n      $string .= ' data-window-tag=\"' . htmlspecialchars($winSize[0]) . '\"';\n      $string .= ' data-window-width=\"' . htmlspecialchars($winSize[1]) . '\"';\n      $string .= ' data-window-height=\"' . htmlspecialchars($winSize[2]) . '\"';\n    } else {\n      $string .= ' data-window-tag=\"' . htmlspecialchars($winSize) . '\"';\n    }\n    if (!$condition) {\n     $string .= ' disabled=\"disabled\"';\n    }\n    $string  .=  ($options ? (' ' . $options) : '') . '/>';\n  return( $string );\n}\n\nfunction htmlSelect( $name, $contents, $values, $behaviours=false ) {\n\n  $behaviourText = '';\n  if ( !empty($behaviours) ) {\n    if ( is_array($behaviours) ) {\n      foreach ( $behaviours as $event=>$action ) {\n        $behaviourText .= ' '.$event.'=\"'.$action.'\"';\n      }\n    } else {\n      $behaviourText = ' onchange=\"'.$behaviours.'\"';\n    }\n  }\n\n  return \"<select name=\\\"$name\\\" id=\\\"$name\\\"$behaviourText>\".htmlOptions($contents, $values).'</select>';\n}\n\nfunction htmlOptions($contents, $values) {\n  $options_html = '';\n\n  foreach ( $contents as $value=>$option ) {\n    $disabled = 0;\n    $text = '';\n    if ( is_array($option) ) {\n\n      if ( isset($option['Name']) )\n        $text = $option['Name'];\n      else if ( isset($option['text']) )\n        $text = $option['text'];\n\n      if ( isset($option['disabled']) ) {\n        $disabled = $option['disabled'];\n        Error(\"Setting to disabled\");\n      }\n    } else if ( is_object($option) ) {\n      $text = $option->Name();\n    } else {\n      $text = $option;\n    }\n    $selected = is_array($values) ? in_array($value, $values) : !strcmp($value, $values);\n    $options_html .= \"<option value=\\\"$value\\\"\".\n      ($selected?' selected=\"selected\"':'').\n      ($disabled?' disabled=\"disabled\"':'').\n      \">$text</option>\";\n  }\n  return $options_html;\n}\n\nfunction truncText( $text, $length, $deslash=1 ) {       \n  return( preg_replace( '/^(.{'.$length.',}?)\\b.*$/', '\\\\1&hellip;', ($deslash?stripslashes($text):$text) ) );       \n}               \n\nfunction buildSelect( $name, $contents, $behaviours=false ) {\n  $value = '';\n  if ( preg_match( '/^\\s*(\\w+)\\s*(\\[.*\\])?\\s*$/', $name, $matches ) && count($matches) > 2 ) {\n    $arr = $matches[1];\n    if ( isset($GLOBALS[$arr]) )\n      $value = $GLOBALS[$arr];\n    elseif ( isset($_REQUEST[$arr]) )\n      $value = $_REQUEST[$arr];\n    if ( !preg_match_all( '/\\[\\s*[\\'\"]?(\\w+)[\"\\']?\\s*\\]/', $matches[2], $matches ) ) {\n      Fatal( \"Can't parse selector '$name'\" );\n    }\n    for ( $i = 0; $i < count($matches[1]); $i++ ) {\n      $idx = $matches[1][$i];\n      $value = isset($value[$idx])?$value[$idx]:false;\n    }\n  } else {\n    if ( isset($GLOBALS[$name]) )\n      $value = $GLOBALS[$name];\n    elseif ( isset($_REQUEST[$name]) )\n      $value = $_REQUEST[$name];\n  }\n  ob_start();\n  $behaviourText = '';\n  if ( !empty($behaviours) ) {\n    if ( is_array($behaviours) ) {\n      foreach ( $behaviours as $event=>$action ) {\n        $behaviourText .= ' '.$event.'=\"'.$action.'\"';\n      }\n    } else {\n      $behaviourText = ' onchange=\"'.$behaviours.'\"';\n    }\n  }\n  ?>\n  <select name=\"<?php echo $name ?>\" id=\"<?php echo $name ?>\"<?php echo $behaviourText ?>>\n  <?php\n  foreach ( $contents as $contentValue => $contentText ) {\n  ?>\n    <option value=\"<?php echo $contentValue ?>\"<?php if ( $value == $contentValue ) { ?> selected=\"selected\"<?php } ?>><?php echo validHtmlStr($contentText) ?></option>\n  <?php\n  }\n  ?>\n  </select>\n  <?php\n  $html = ob_get_contents();\n  ob_end_clean();\n\n  return( $html );\n}\n\nfunction getFormChanges( $values, $newValues, $types=false, $columns=false ) {\n  $changes = array();\n  if ( !$types )\n    $types = array();\n\n  foreach( $newValues as $key=>$value ) {\n    if ( $columns && !isset($columns[$key]) )\n      continue;\n\n    if ( !isset($types[$key]) )\n      $types[$key] = false;\n\n    switch( $types[$key] ) {\n      case 'set' :\n        {\n          if ( is_array($newValues[$key]) ) {\n            if ( (!isset($values[$key])) or ( join(',',$newValues[$key]) != $values[$key] ) ) {\n              $changes[$key] = \"`$key` = \".dbEscape(join(',',$newValues[$key]));\n            }\n          } else if ( (!isset($values[$key])) or $values[$key] ) {\n            $changes[$key] = \"`$key` = ''\";\n          }\n          break;\n        }\n      case 'image' :\n        {\n          if ( is_array( $newValues[$key] ) ) {\n            $imageData = getimagesize( $newValues[$key]['tmp_name'] );\n            $changes[$key.'Width'] = $key.'Width = '.$imageData[0];\n            $changes[$key.'Height'] = $key.'Height = '.$imageData[1];\n            $changes[$key.'Type'] = $key.\"Type = '\".$newValues[$key]['type'].\"'\";\n            $changes[$key.'Size'] = $key.'Size = '.$newValues[$key]['size'];\n            ob_start();\n            readfile( $newValues[$key]['tmp_name'] );\n            $changes[$key] = $key.\" = \".dbEscape( ob_get_contents() );\n            ob_end_clean();\n          } else {\n            $changes[$key] = \"$key = \".dbEscape($value);\n          }\n          break;\n        }\n      case 'document' :\n        {\n          if ( is_array( $newValues[$key] ) ) {\n            $imageData = getimagesize( $newValues[$key]['tmp_name'] );\n            $changes[$key.'Type'] = $key.\"Type = '\".$newValues[$key]['type'].\"'\";\n            $changes[$key.'Size'] = $key.'Size = '.$newValues[$key]['size'];\n            ob_start();\n            readfile( $newValues[$key]['tmp_name'] );\n            $changes[$key] = $key.' = '.dbEscape( ob_get_contents() );\n            ob_end_clean();\n          } else {\n            $changes[$key] = $key . ' = '.dbEscape($value);\n          }\n          break;\n        }\n      case 'file' :\n        {\n          $changes[$key.'Type'] = $key.'Type = '.dbEscape($newValues[$key]['type']);\n          $changes[$key.'Size'] = $key.'Size = '.dbEscape($newValues[$key]['size']);\n          ob_start();\n          readfile( $newValues[$key]['tmp_name'] );\n          $changes[$key] = $key.\" = '\".dbEscape( ob_get_contents() ).\"'\";\n          ob_end_clean();\n          break;\n        }\n      case 'raw' :\n        {\n          if ( (!isset($values[$key])) or ($values[$key] != $value) ) {\n            $changes[$key] = $key . ' = '.dbEscape($value);\n          }\n          break;\n        }\n      case 'toggle' :\n        if ( (!isset($values[$key])) or $values[$key] != $value ) {\n          if ( empty($value) ) {\n            $changes[$key] = \"$key = 0\";\n          } else {\n            $changes[$key] = \"$key = 1\";\n            //$changes[$key] = $key . ' = '.dbEscape(trim($value));\n          }\n        }\n        break;\n      case 'integer' :\n        if ( (!isset($values[$key])) or $values[$key] != $value ) {\n          $changes[$key] = $key . ' = '.intval($value);\n        }\n        break;\n      default :\n        {\n          if ( !isset($values[$key]) || ($values[$key] != $value) ) {\n            if ( ! isset($value) || $value == '' ) {\n              $changes[$key] = \"`$key` = NULL\";\n            } else {\n              $changes[$key] = \"`$key` = \".dbEscape(trim($value));\n            }\n          }\n          break;\n        }\n    } // end switch\n  } // end foreach newvalues\n  foreach( $values as $key=>$value ) {\n    if ( !empty($columns[$key]) ) {\n      if ( !empty($types[$key]) ) {\n        if ( $types[$key] == 'toggle' ) {\n          if ( !isset($newValues[$key]) && !empty($value) ) {\n            $changes[$key] = \"$key = 0\";\n          }\n        } else if ( $types[$key] == 'set' ) {\n          $changes[$key] = \"$key = ''\";\n        }\n      }\n    }\n  }\n  return( $changes );\n}\n\nfunction getBrowser( &$browser, &$version ) {\n  if ( isset($_SESSION['browser']) ) {\n    $browser = $_SESSION['browser'];\n    $version = $_SESSION['version'];\n  } else {\n    if (( preg_match( '/MSIE (.*?);/', $_SERVER['HTTP_USER_AGENT'], $logVersion)) || (preg_match( '/.*Trident.*rv:(.*?)(;|\\))/', $_SERVER['HTTP_USER_AGENT'], $logVersion))) {\n      $version = $logVersion[1];\n      $browser = 'ie';\n    } elseif ( preg_match( '/Chrome\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      // Check for old version of Chrome with bug 5876\n      if ( $version < 7 ) {\n        $browser = 'oldchrome';\n      } else {\n        $browser = 'chrome';\n      }\n    } elseif ( preg_match( '/Safari\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'safari';\n    } elseif ( preg_match( '/Opera[ \\/]([0-9].[0-9]{1,2})/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'opera';\n    } elseif ( preg_match( '/Konqueror\\/([0-9.]+)/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'konqueror';\n    } elseif ( preg_match( '/Mozilla\\/([0-9].[0-9]{1,2})/', $_SERVER['HTTP_USER_AGENT'], $logVersion) ) {\n      $version = $logVersion[1];\n      $browser = 'mozilla';\n    } else {\n      $version = 0;\n      $browser = 'unknown';\n    }\n    $_SESSION['browser'] = $browser;\n    $_SESSION['version'] = $version;\n  }\n}\n\nfunction isMozilla() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'mozilla' );\n}\n\nfunction isKonqueror() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'konqueror' );\n}\n\nfunction isInternetExplorer() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'ie' );\n}\n\nfunction isOldChrome() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'oldchrome' );\n}\n\nfunction isChrome() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'chrome' );\n}\n\nfunction isOpera() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'opera' );\n}\n\nfunction isSafari() {\n  getBrowser( $browser, $version );\n\n  return( $browser == 'safari' );\n}\n\nfunction isWindows() {\n  return ( preg_match( '/Win/', $_SERVER['HTTP_USER_AGENT'] ) );\n}\n\nfunction canStreamIframe() {\n  return( isKonqueror() );\n}\n\nfunction canStreamNative() {\n  // Old versions of Chrome can display the stream, but then it blocks everything else (Chrome bug 5876)\n  return( ZM_WEB_CAN_STREAM == 'yes' || ( ZM_WEB_CAN_STREAM == 'auto' && (!isInternetExplorer() && !isOldChrome()) ) );\n}\n\nfunction canStreamApplet() {\n  if ( (ZM_OPT_CAMBOZOLA && !file_exists( ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA )) ) {\n    Warning ( 'ZM_OPT_CAMBOZOLA is enabled, but the system cannot find '.ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA );\n  }\n\n  return( (ZM_OPT_CAMBOZOLA && file_exists( ZM_PATH_WEB.'/'.ZM_PATH_CAMBOZOLA )) );\n}\n\nfunction canStream() {\n  return( canStreamNative() | canStreamApplet() );\n}\n\nfunction packageControl( $command ) {\n  $string = ZM_PATH_BIN.'/zmpkg.pl '.escapeshellarg( $command );\n  $string .= ' 2>/dev/null >&- <&- >/dev/null';\n  exec( $string );\n}\n\nfunction daemonControl( $command, $daemon=false, $args=false ) {\n  $string = escapeshellcmd(ZM_PATH_BIN).'/zmdc.pl '.$command;\n  if ( $daemon ) {\n    $string .= ' ' . $daemon;\n    if ( $args ) {\n      $string .= ' ' . $args;\n    }\n  }\n  $string = escapeshellcmd( $string );\n  #$string .= ' 2>/dev/null >&- <&- >/dev/null';\nLogger::Debug(\"daemonControl $string\");\n  exec( $string );\n}\n\nfunction zmcControl($monitor, $mode=false) {\n  $Monitor = new Monitor( $monitor );\n  return $Monitor->zmcControl($mode);\n}\n\nfunction zmaControl($monitor, $mode=false) {\n  $Monitor = new Monitor($monitor);\n  return $Monitor->zmaControl($mode);\n}\n\nfunction initDaemonStatus() {\n  global $daemon_status;\n\n  if ( !isset($daemon_status) ) {\n    if ( daemonCheck() ) {\n      $string = ZM_PATH_BIN.\"/zmdc.pl status\";\n      $daemon_status = shell_exec( $string );\n    } else {\n      $daemon_status = '';\n    }\n  }\n}\n\nfunction daemonStatus( $daemon, $args=false ) {\n  global $daemon_status;\n\n  initDaemonStatus();\n\n  $string = $daemon;\n  if ( $args )\n    $string .= ' ' . $args;\n  return( strpos( $daemon_status, \"'$string' running\" ) !== false );\n}\n\nfunction zmcStatus( $monitor ) {\n  if ( $monitor['Type'] == 'Local' ) {\n    $zmcArgs = '-d '.$monitor['Device'];\n  } else {\n    $zmcArgs = '-m '.$monitor['Id'];\n  }\n  return( daemonStatus( 'zmc', $zmcArgs ) );\n}\n\nfunction zmaStatus( $monitor ) {\n  if ( is_array( $monitor ) ) {\n    $monitor = $monitor['Id'];\n  }\n  return( daemonStatus( 'zma', \"-m $monitor\" ) );\n}\n\nfunction daemonCheck( $daemon=false, $args=false ) {\n  $string = ZM_PATH_BIN.'/zmdc.pl check';\n  if ( $daemon ) {\n    $string .= ' ' . $daemon;\n    if ( $args )\n      $string .= ' '. $args;\n  }\n  $string = escapeshellcmd( $string );\n  $result = exec( $string );\n  return( preg_match( '/running/', $result ) );\n}\n\nfunction zmcCheck( $monitor ) {\n  if ( $monitor['Type'] == 'Local' ) {\n    $zmcArgs = '-d '.$monitor['Device'];\n  } else {\n    $zmcArgs = '-m '.$monitor['Id'];\n  }\n  return( daemonCheck( 'zmc', $zmcArgs ) );\n}\n\nfunction zmaCheck( $monitor ) {\n  if ( is_array( $monitor ) ) {\n    $monitor = $monitor['Id'];\n  }\n  return( daemonCheck( 'zma', \"-m $monitor\" ) );\n}\n\nfunction getImageSrc( $event, $frame, $scale=SCALE_BASE, $captureOnly=false, $overwrite=false ) {\n  $Event = new Event( $event );\n  return $Event->getImageSrc( $frame, $scale, $captureOnly, $overwrite );\n}\n\nfunction viewImagePath( $path, $querySep='&amp;' ) {\n  return( '?view=image'.$querySep.'path='.$path );\n}\n\nfunction createListThumbnail( $event, $overwrite=false ) {\n  # Load the frame with the highest score to use as a thumbnail\n  if ( !($frame = dbFetchOne( \"SELECT * FROM Frames WHERE EventId=? AND Score=? ORDER BY FrameId LIMIT 1\", NULL, array( $event['Id'], $event['MaxScore'] ) )) )\n    return( false );\n\n  $frameId = $frame['FrameId'];\n\n  if ( ZM_WEB_LIST_THUMB_WIDTH ) {\n    $thumbWidth = ZM_WEB_LIST_THUMB_WIDTH;\n    $scale = (SCALE_BASE*ZM_WEB_LIST_THUMB_WIDTH)/$event['Width'];\n    $thumbHeight = reScale( $event['Height'], $scale );\n  } elseif ( ZM_WEB_LIST_THUMB_HEIGHT ) {\n    $thumbHeight = ZM_WEB_LIST_THUMB_HEIGHT;\n    $scale = (SCALE_BASE*ZM_WEB_LIST_THUMB_HEIGHT)/$event['Height'];\n    $thumbWidth = reScale( $event['Width'], $scale );\n  } else {\n    Fatal( \"No thumbnail width or height specified, please check in Options->Web\" );\n  }\n\n  $imageData = getImageSrc( $event, $frame, $scale, false, $overwrite );\n  if ( ! $imageData ) {\n    return ( false );\n  }\n\n  $thumbData = $frame;\n  $thumbData['Path'] = $imageData['thumbPath'];\n  $thumbData['Width'] = (int)$thumbWidth;\n  $thumbData['Height'] = (int)$thumbHeight;\n\n  return( $thumbData );\n}\n\nfunction createVideo( $event, $format, $rate, $scale, $overwrite=false ) {\n  $command = ZM_PATH_BIN.\"/zmvideo.pl -e \".$event['Id'].\" -f \".$format.\" -r \".sprintf( \"%.2F\", ($rate/RATE_BASE) );\n  if ( preg_match( '/\\d+x\\d+/', $scale ) )\n    $command .= \" -S \".$scale;\n  else\n    if ( version_compare( phpversion(), \"4.3.10\", \">=\") )\n      $command .= \" -s \".sprintf( \"%.2F\", ($scale/SCALE_BASE) );\n    else\n      $command .= \" -s \".sprintf( \"%.2f\", ($scale/SCALE_BASE) );\n  if ( $overwrite )\n    $command .= \" -o\";\n  $command = escapeshellcmd( $command );\n  $result = exec( $command, $output, $status );\nLogger::Debug(\"generating Video $command: result($result outptu:(\".implode(\"\\n\", $output ).\" status($status\");\n  return( $status?\"\":rtrim($result) );\n}\n\nfunction executeFilter( $filter_id ) {\n  $command = ZM_PATH_BIN.'/zmfilter.pl --filter_id '.escapeshellarg($filter_id);\n  $result = exec($command, $output, $status);\n  dbQuery('DELETE FROM Filters WHERE Id=?', array($filter_id));\n  return $status;\n}\n\n# This takes more than one scale amount, so it runs through each and alters dimension.\n# I can't imagine why you would want to do that.\nfunction reScale( $dimension, $dummy ) {\n  $new_dimension = $dimension;\n  for ( $i = 1; $i < func_num_args(); $i++ ) {\n    $scale = func_get_arg( $i );\n    if ( !empty($scale) && ($scale != 'auto') && ($scale != SCALE_BASE) )\n      $new_dimension = (int)(($new_dimension*$scale)/SCALE_BASE);\n  }\n  return( $new_dimension );\n}\n\nfunction deScale( $dimension, $dummy ) {\n  $new_dimension = $dimension;\n  for ( $i = 1; $i < func_num_args(); $i++ ) {\n    $scale = func_get_arg( $i );\n    if ( !empty($scale) && $scale != SCALE_BASE )\n      $new_dimension = (int)(($new_dimension*SCALE_BASE)/$scale);\n  }\n  return( $new_dimension );\n}\n\nfunction monitorLimitSql() {\n  global $user;\n  if ( !empty($user['MonitorIds']) )\n    $midSql = \" and MonitorId in (\".join( \",\", preg_split( '/[\"\\'\\s]*,[\"\\'\\s]*/', $user['MonitorIds'] ) ).\")\";\n  else\n    $midSql = '';\n  return( $midSql );\n}\n\n\nfunction parseSort( $saveToSession=false, $querySep='&amp;' ) {\n  global $sortQuery, $sortColumn, $sortOrder, $limitQuery; // Outputs\n  if (isset($_REQUEST['filter']['Query']['sort_field'])) { //Handle both new and legacy filter passing\n    $_REQUEST['sort_field'] = $_REQUEST['filter']['Query']['sort_field'];\n  }\n  if (isset($_REQUEST['filter']['Query']['sort_asc'])) {\n    $_REQUEST['sort_asc'] = $_REQUEST['filter']['Query']['sort_asc'];\n  }\n  if (isset($_REQUEST['filter']['Query']['limit'])) {\n    $_REQUEST['limit'] = $_REQUEST['filter']['Query']['limit'];\n  }\n  if ( empty($_REQUEST['sort_field']) ) {\n    $_REQUEST['sort_field'] = ZM_WEB_EVENT_SORT_FIELD;\n    $_REQUEST['sort_asc'] = (ZM_WEB_EVENT_SORT_ORDER == 'asc');\n  }\n  switch( $_REQUEST['sort_field'] ) {\n    case 'Id' :\n      $sortColumn = 'E.Id';\n      break;\n    case 'MonitorName' :\n      $sortColumn = 'M.Name';\n      break;\n    case 'Name' :\n      $sortColumn = 'E.Name';\n      break;\n    case 'Cause' :\n      $sortColumn = 'E.Cause';\n      break;\n    case 'DateTime' :\n      $sortColumn = 'E.StartTime';\n      $_REQUEST['sort_field'] = 'StartTime';\n      break;\n    case 'DiskSpace' :\n      $sortColumn = 'E.DiskSpace';\n      break;\n    case 'StartTime' :\n      $sortColumn = 'E.StartTime';\n      break;\n    case 'EndTime' :\n      $sortColumn = 'E.EndTime';\n      break;\n    case 'Length' :\n      $sortColumn = 'E.Length';\n      break;\n    case 'Frames' :\n      $sortColumn = 'E.Frames';\n      break;\n    case 'AlarmFrames' :\n      $sortColumn = 'E.AlarmFrames';\n      break;\n    case 'TotScore' :\n      $sortColumn = 'E.TotScore';\n      break;\n    case 'AvgScore' :\n      $sortColumn = 'E.AvgScore';\n      break;\n    case 'MaxScore' :\n      $sortColumn = 'E.MaxScore';\n      break;\n    default:\n      $sortColumn = 'E.StartTime';\n      break;\n  }\n  $sortOrder = $_REQUEST['sort_asc']?'asc':'desc';\n  if ( !$_REQUEST['sort_asc'] )\n    $_REQUEST['sort_asc'] = 0;\n  $sortQuery = $querySep.'sort_field='.validHtmlStr($_REQUEST['sort_field']).$querySep.'sort_asc='.validHtmlStr($_REQUEST['sort_asc']);\n  if ( !isset($_REQUEST['limit']) )\n    $_REQUEST['limit'] = '';\n  if ( $saveToSession ) {\n    $_SESSION['sort_field'] = validHtmlStr($_REQUEST['sort_field']);\n    $_SESSION['sort_asc'] = validHtmlStr($_REQUEST['sort_asc']);\n  }\n  if ($_REQUEST['limit'] != '') {\n    $limitQuery = \"&limit=\".$_REQUEST['limit'];\n  }\n}\n\nfunction getFilterQueryConjunctionTypes() {\n  return array(\n               'and' => translate('ConjAnd'),\n               'or'  => translate('ConjOr')\n               );\n}\n\nfunction parseFilter(&$filter, $saveToSession=false, $querySep='&amp;') {\n  $filter['query'] = '';\n  $filter['sql'] = '';\n  $filter['fields'] = '';\n\n  $validQueryConjunctionTypes = getFilterQueryConjunctionTypes();\n  $StorageArea = NULL;\n\n  $terms = isset($filter['Query']) ? $filter['Query']['terms'] : NULL;\n  if ( isset($terms) && count($terms) ) {\n    for ( $i = 0; $i < count($terms); $i++ ) {\n      if ( isset($terms[$i]['cnj']) && array_key_exists($terms[$i]['cnj'], $validQueryConjunctionTypes) ) {\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][cnj]\").'='.urlencode($terms[$i]['cnj']);\n        $filter['sql'] .= ' '.$terms[$i]['cnj'].' ';\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][cnj]\\\" value=\\\"\".htmlspecialchars($terms[$i]['cnj']).\"\\\"/>\\n\";\n      }\n      if ( isset($terms[$i]['obr']) && (string)(int)$terms[$i]['obr'] == $terms[$i]['obr'] ) {\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][obr]\").'='.urlencode($terms[$i]['obr']);\n        $filter['sql'] .= ' '.str_repeat('(', $terms[$i]['obr']).' ';\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][obr]\\\" value=\\\"\".htmlspecialchars($terms[$i]['obr']).\"\\\"/>\\n\";\n      }\n      if ( isset($terms[$i]['attr']) ) {\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][attr]\").'='.urlencode($terms[$i]['attr']);\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][attr]\\\" value=\\\"\".htmlspecialchars($terms[$i]['attr']).\"\\\"/>\\n\";\n        switch ( $terms[$i]['attr'] ) {\n          case 'MonitorName':\n            $filter['sql'] .= 'M.Name';\n            break;\n          case 'ServerId':\n          case 'MonitorServerId':\n            $filter['sql'] .= 'M.ServerId';\n            break;\n          case 'StorageServerId':\n            $filter['sql'] .= 'S.ServerId';\n            break;\n          case 'FilterServerId':\n            $filter['sql'] .= ZM_SERVER_ID;\n            break;\n# Unspecified start or end, so assume start, this is to support legacy filters\n          case 'DateTime':\n            $filter['sql'] .= 'E.StartTime';\n            break;\n          case 'Date':\n            $filter['sql'] .= 'to_days( E.StartTime )';\n            break;\n          case 'Time':\n            $filter['sql'] .= 'extract( hour_second from E.StartTime )';\n            break;\n          case 'Weekday':\n            $filter['sql'] .= 'weekday( E.StartTime )';\n            break;\n# Starting Time\n          case 'StartDateTime':\n            $filter['sql'] .= 'E.StartTime';\n            break;\n          case 'StartDate':\n            $filter['sql'] .= 'to_days( E.StartTime )';\n            break;\n          case 'StartTime':\n            $filter['sql'] .= 'extract( hour_second from E.StartTime )';\n            break;\n          case 'StartWeekday':\n            $filter['sql'] .= 'weekday( E.StartTime )';\n            break;\n# Ending Time\n          case 'EndDateTime':\n            $filter['sql'] .= 'E.EndTime';\n            break;\n          case 'EndDate':\n            $filter['sql'] .= 'to_days( E.EndTime )';\n            break;\n          case 'EndTime':\n            $filter['sql'] .= 'extract( hour_second from E.EndTime )';\n            break;\n          case 'EndWeekday':\n            $filter['sql'] .= 'weekday( E.EndTime )';\n            break;\n          case 'Id':\n          case 'Name':\n          case 'DiskSpace':\n          case 'MonitorId':\n          case 'StorageId':\n          case 'Length':\n          case 'Frames':\n          case 'AlarmFrames':\n          case 'TotScore':\n          case 'AvgScore':\n          case 'MaxScore':\n          case 'Cause':\n          case 'Notes':\n          case 'StateId':\n          case 'Archived':\n            $filter['sql'] .= 'E.'.$terms[$i]['attr'];\n            break;\n          case 'DiskPercent':\n            // Need to specify a storage area, so need to look through other terms looking for a storage area, else we default to ZM_EVENTS_PATH\n            if ( ! $StorageArea ) {\n              for ( $j = 0; $j < count($terms); $j++ ) {\n                if ( isset($terms[$j]['attr']) and $terms[$j]['attr'] == 'StorageId' and isset($terms[$j]['val']) ) {\n                  $StorageArea = new Storage($terms[$j]['val']);\n                  break;\n                }\n              } // end foreach remaining term\n              if ( ! $StorageArea ) $StorageArea = new Storage();\n            } // end no StorageArea found yet\n\n            $filter['sql'] .= getDiskPercent( $StorageArea->Path() );\n            break;\n          case 'DiskBlocks':\n            // Need to specify a storage area, so need to look through other terms looking for a storage area, else we default to ZM_EVENTS_PATH\n            if ( ! $StorageArea ) {\n              for ( $j = $i; $j < count($terms); $j++ ) {\n                if ( isset($terms[$i]['attr']) and $terms[$i]['attr'] == 'StorageId' and isset($terms[$j]['val']) ) {\n                  $StorageArea = new Storage($terms[$i]['val']);\n                }\n              } // end foreach remaining term\n            } // end no StorageArea found yet\n            $filter['sql'] .= getDiskBlocks( $StorageArea );\n            break;\n          case 'SystemLoad':\n            $filter['sql'] .= getLoad();\n            break;\n        }\n        $valueList = array();\n        foreach ( preg_split( '/[\"\\'\\s]*?,[\"\\'\\s]*?/', preg_replace( '/^[\"\\']+?(.+)[\"\\']+?$/', '$1', $terms[$i]['val'] ) ) as $value ) {\n          switch ( $terms[$i]['attr'] ) {\n            case 'MonitorName':\n            case 'Name':\n            case 'Cause':\n            case 'Notes':\n              $value = dbEscape($value);\n              break;\n            case 'MonitorServerId':\n            case 'FilterServerId':\n            case 'StorageServerId':\n            case 'ServerId':\n              if ( $value == 'ZM_SERVER_ID' ) {\n                $value = ZM_SERVER_ID;\n              } else if ( $value == 'NULL' ) {\n\n              } else {\n                $value = dbEscape($value);\n              }\n              break;\n            case 'StorageId':\n              $StorageArea = new Storage( $value );\n              if ( $value != 'NULL' )\n                $value = dbEscape($value);\n              break;\n            case 'DateTime':\n            case 'StartDateTime':\n            case 'EndDateTime':\n              if ( $value != 'NULL' )\n                $value = \"'\".strftime( STRF_FMT_DATETIME_DB, strtotime( $value ) ).\"'\";\n              break;\n            case 'Date':\n            case 'StartDate':\n            case 'EndDate':\n              if ( $value != 'NULL' )\n                $value = \"to_days( '\".strftime( STRF_FMT_DATETIME_DB, strtotime( $value ) ).\"' )\";\n              break;\n            case 'Time':\n            case 'StartTime':\n            case 'EndTime':\n              if ( $value != 'NULL' )\n              $value = \"extract( hour_second from '\".strftime( STRF_FMT_DATETIME_DB, strtotime( $value ) ).\"' )\";\n              break;\n            default :\n              if ( $value != 'NULL' )\n                $value = dbEscape($value);\n              break;\n          }\n          $valueList[] = $value;\n        }\n\n        switch ( $terms[$i]['op'] ) {\n          case '=' :\n          case '!=' :\n          case '>=' :\n          case '>' :\n          case '<' :\n          case '<=' :\n            $filter['sql'] .= ' '.$terms[$i]['op'].' '. $value;\n            break;\n          case '=~' :\n            $filter['sql'] .= ' regexp '.$value;\n            break;\n          case '!~' :\n            $filter['sql'] .= ' not regexp '.$value;\n            break;\n          case '=[]' :\n          case 'IN' :\n            $filter['sql'] .= ' in ('.join( ',', $valueList ).')';\n            break;\n          case '![]' :\n            $filter['sql'] .= ' not in ('.join( ',', $valueList ).')';\n            break;\n          case 'IS' :\n            if ( $value == 'Odd' )  {\n              $filter['sql'] .= ' % 2 = 1';\n            } else if ( $value == 'Even' )  {\n              $filter['sql'] .= ' % 2 = 0';\n            } else {\n              $filter['sql'] .= \" IS $value\";\n            }\n            break;\n          case 'IS NOT' :\n            $filter['sql'] .= \" IS NOT $value\";\n            break;\n          default:\n            Warning(\"Invalid operator in filter: \" . $terms[$i]['op'] );\n        }\n\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][op]\").'='.urlencode($terms[$i]['op']);\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][op]\\\" value=\\\"\".htmlspecialchars($terms[$i]['op']).\"\\\"/>\\n\";\n\tif ( isset($terms[$i]['val']) ) {\n\t\t$filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][val]\").'='.urlencode($terms[$i]['val']);\n\t\t$filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][val]\\\" value=\\\"\".htmlspecialchars($terms[$i]['val']).\"\\\"/>\\n\";\n\t}\n      } // end foreach term\n      if ( isset($terms[$i]['cbr']) && (string)(int)$terms[$i]['cbr'] == $terms[$i]['cbr'] ) {\n        $filter['query'] .= $querySep.urlencode(\"filter[Query][terms][$i][cbr]\").'='.urlencode($terms[$i]['cbr']);\n        $filter['sql'] .= ' '.str_repeat( ')', $terms[$i]['cbr'] ).' ';\n        $filter['fields'] .= \"<input type=\\\"hidden\\\" name=\\\"filter[Query][terms][$i][cbr]\\\" value=\\\"\".htmlspecialchars($terms[$i]['cbr']).\"\\\"/>\\n\";\n      }\n    }\n    if ( $filter['sql'] )\n      $filter['sql'] = ' and ( '.$filter['sql'].' )';\n    if ( $saveToSession ) {\n      $_SESSION['filter'] = $filter;\n    }\n  }\n}\n\n// Please note that the filter is passed in by copy, so you need to use the return value from this function.\n//\nfunction addFilterTerm( $filter, $position, $term=false ) {\n  if ( $position < 0 )\n    $position = 0;\n  \n  if ( ! isset( $filter['Query']['terms'] ) )\n    $filter['Query']['terms'] = array();\n  elseif( $position > count($filter['Query']['terms']) )\n    $position = count($filter['Query']['terms']);\n  if ( $term && $position == 0 )\n    unset( $term['cnj'] );\n  array_splice( $filter['Query']['terms'], $position, 0, array( $term?$term:array() ) );\n\n  return( $filter );\n}\n\nfunction delFilterTerm( $filter, $position ) {\n  if ( $position < 0 )\n    $position = 0;\n  elseif( $position >= count($filter['Query']['terms']) )\n    $position = count($filter['Query']['terms']);\n  array_splice( $filter['Query']['terms'], $position, 1 );\n\n  return( $filter );\n}\n\nfunction getPagination( $pages, $page, $maxShortcuts, $query, $querySep='&amp;' ) {\n  global $view;\n\n  $pageText = '';\n  if ( $pages > 1 ) {\n    if ( $page ) {\n      if ( $page < 0 )\n        $page = 1;\n      if ( $page > $pages )\n        $page = $pages;\n\n      if ( $page > 1 ) {\n        if ( false && $page > 2 ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page=1'.$query.'\">&lt;&lt;</a>';\n        }\n        $pageText .= '<a href=\"?view='.$view.$querySep.'page='.($page-1).$query.'\">&lt;</a>';\n\n        $newPages = array();\n        $pagesUsed = array();\n        $lo_exp = max(2,log($page-1)/log($maxShortcuts));\n        for ( $i = 0; $i < $maxShortcuts; $i++ ) {\n          $newPage = round($page-pow($lo_exp,$i));\n          if ( isset($pagesUsed[$newPage]) )\n            continue;\n          if ( $newPage <= 1 )\n            break;\n          $pagesUsed[$newPage] = true;\n          array_unshift( $newPages, $newPage );\n        }\n        if ( !isset($pagesUsed[1]) )\n          array_unshift( $newPages, 1 );\n\n        foreach ( $newPages as $newPage ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page='.$newPage.$query.'\">'.$newPage.'</a>&nbsp;';\n        }\n\n      }\n      $pageText .= '-&nbsp;'.$page.'&nbsp;-';\n      if ( $page < $pages ) {\n        $newPages = array();\n        $pagesUsed = array();\n        $hi_exp = max(2,log($pages-$page)/log($maxShortcuts));\n        for ( $i = 0; $i < $maxShortcuts; $i++ ) {\n          $newPage = round($page+pow($hi_exp,$i));\n          if ( isset($pagesUsed[$newPage]) )\n            continue;\n          if ( $newPage > $pages )\n            break;\n          $pagesUsed[$newPage] = true;\n          array_push( $newPages, $newPage );\n        }\n        if ( !isset($pagesUsed[$pages]) )\n          array_push( $newPages, $pages );\n\n        foreach ( $newPages as $newPage ) {\n          $pageText .= '&nbsp;<a href=\"?view='.$view.$querySep.'page='.$newPage.$query.'\">'.$newPage.'</a>';\n        }\n        $pageText .= '<a href=\"?view='.$view.$querySep.'page='.($page+1).$query.'\">&gt;</a>';\n        if ( false && $page < ($pages-1) ) {\n          $pageText .= '<a href=\"?view='.$view.$querySep.'page='.$pages.$query.'\">&gt;&gt;</a>';\n        }\n      }\n    }\n  }\n  return( $pageText );\n}\n\nfunction sortHeader( $field, $querySep='&amp;' ) {\n  global $view;\n  return( '?view='.$view.$querySep.'page=1'.$_REQUEST['filter']['query'].$querySep.'sort_field='.$field.$querySep.'sort_asc='.($_REQUEST['sort_field'] == $field?!$_REQUEST['sort_asc']:0).$querySep.'limit='.$_REQUEST['limit'] );\n}\n\nfunction sortTag( $field ) {\n  if ( $_REQUEST['sort_field'] == $field )\n    if ( $_REQUEST['sort_asc'] )\n      return( '(^)' );\n    else\n      return( '(v)' );\n  return( false );\n}\n\nfunction getLoad() {\n  $load = sys_getloadavg();\n  return( $load[0] );\n}\n\nfunction getDiskPercent($path = ZM_DIR_EVENTS) {\n  $total = disk_total_space($path);\n  if ( $total === false ) {\n    Error('disk_total_space returned false. Verify the web account user has access to ' . $path );\n    return 0;\n  } elseif ( $total == 0 ) {\n    Error('disk_total_space indicates the following path has a filesystem size of zero bytes ' . $path );\n    return 100;\n  }\n  $free = disk_free_space($path);\n  if ( $free === false ) {\n    Error('disk_free_space returned false. Verify the web account user has access to ' . $path );\n  }\n  $space = round((($total - $free) / $total) * 100);\n  return( $space );\n}\n\nfunction getDiskBlocks() {\n  if ( ! $StorageArea ) $StorageArea = new Storage();\n  $df = shell_exec( 'df '.escapeshellarg($StorageArea->Path() ));\n  $space = -1;\n  if ( preg_match( '/\\s(\\d+)\\s+\\d+\\s+\\d+%/ms', $df, $matches ) )\n    $space = $matches[1];\n  return( $space );\n}\n\nfunction systemStats() {\n\n    $load = getLoad();\n    $diskPercent = getDiskPercent();\n    $pathMapPercent = getDiskPercent(ZM_PATH_MAP);\n    $cpus = getcpus();\n\n    $normalized_load = $load / $cpus;\n\n    # Colorize the system load stat\n    if ( $normalized_load <= 0.75 ) {\n        $htmlLoad=$load;\n    } elseif ( $normalized_load <= 0.9 ) {\n        $htmlLoad=\"<span class=\\\"warning\\\">$load</span>\";\n    } elseif ( $normalized_load <= 1.1 ) {\n        $htmlLoad=\"<span class=\\\"error\\\">$load</span>\";\n    } else {\n        $htmlLoad=\"<span class=\\\"critical\\\">$load</span>\";\n    }\n\n    # Colorize the disk space stat\n    if ( $diskPercent < 98 ) {\n        $htmlDiskPercent=\"$diskPercent%\";\n    } elseif ( $diskPercent <= 99 ) {\n        $htmlDiskPercent=\"<span class=\\\"warning\\\">$diskPercent%</span>\";\n    } else {\n        $htmlDiskPercent=\"<span class=\\\"error\\\">$diskPercent%</span>\";\n    }\n\n    # Colorize the PATH_MAP (usually /dev/shm) stat\n    if ( $pathMapPercent < 90 ) {\n        if ( disk_free_space(ZM_PATH_MAP) > 209715200 ) { # have to always have at least 200MiB free\n            $htmlPathMapPercent=\"$pathMapPercent%\";\n        } else {\n            $htmlPathMapPercent=\"<span class=\\\"warning\\\">$pathMapPercent%</span>\";\n        }\n    } elseif ( $pathMapPercent < 100 ) {\n        $htmlPathMapPercent=\"<span class=\\\"warning\\\">$pathMapPercent%</span>\";\n    } else {\n        $htmlPathMapPercent=\"<span class=\\\"critical\\\">$pathMapPercent%</span>\";\n    }\n\n    $htmlString = translate('Load').\": $htmlLoad - \".translate('Disk').\": $htmlDiskPercent - \".ZM_PATH_MAP.\": $htmlPathMapPercent\";\n\n    return( $htmlString );\n}\n\nfunction getcpus() {\n\n    if (is_readable(\"/proc/cpuinfo\") ) { # Works on Linux\n        preg_match_all('/^processor/m', file_get_contents('/proc/cpuinfo'), $matches); \n        $num_cpus = count($matches[0]);\n    } else { # Works on BSD\n        $matches = explode(\":\", shell_exec(\"sysctl hw.ncpu\"));\n        $num_cpus = trim($matches[1]);\n    }\n\n    return( $num_cpus );\n}\n\n// Function to fix a problem whereby the built in PHP session handling \n// features want to put the sid as a hidden field after the form or \n// fieldset tag, neither of which will work with strict XHTML Basic.\nfunction sidField() {\n  if ( SID ) {\n    list( $sessname, $sessid ) = explode( \"=\", SID );\n?>\n    <input type=\"hidden\" name=\"<?php echo $sessname ?>\" value=\"<?php echo $sessid ?>\"/>\n<?php\n  }\n}\n\nfunction verNum( $version ) {\n  $vNum = '';\n  $maxFields = 3;\n  $vFields = explode( '.', $version );\n  array_splice( $vFields, $maxFields );\n  while ( count($vFields) < $maxFields ) {\n    $vFields[] = 0;\n  }\n  foreach ( $vFields as $vField ) {\n    $vField = sprintf( '%02d', $vField );\n    while ( strlen($vField) < 2 ) {\n      $vField = '0'.$vField;\n    }\n    $vNum .= $vField;\n  }\n  return( $vNum );\n}\n\nfunction fixSequences() {\n  $sequence = 1;\n  $sql = 'select * from Monitors order by Sequence asc, Id asc';\n  foreach( dbFetchAll( $sql ) as $monitor ) {\n    if ( $monitor['Sequence'] != $sequence ) {\n      dbQuery( 'update Monitors set Sequence = ? WHERE Id=?', array( $sequence, $monitor['Id'] ) );\n    }\n    $sequence++;\n  }\n}\n\nfunction firstSet() {\n  foreach ( func_get_args() as $arg ) {\n    if ( !empty( $arg ) )\n      return( $arg );\n  }\n}\n\nfunction linesIntersect( $line1, $line2 ) {\n  global $debug;\n\n  $min_x1 = min( $line1[0]['x'], $line1[1]['x'] );\n  $max_x1 = max( $line1[0]['x'], $line1[1]['x'] );\n  $min_x2 = min( $line2[0]['x'], $line2[1]['x'] );\n  $max_x2 = max( $line2[0]['x'], $line2[1]['x'] );\n  $min_y1 = min( $line1[0]['y'], $line1[1]['y'] );\n  $max_y1 = max( $line1[0]['y'], $line1[1]['y'] );\n  $min_y2 = min( $line2[0]['y'], $line2[1]['y'] );\n  $max_y2 = max( $line2[0]['y'], $line2[1]['y'] );\n\n  // Checking if bounding boxes intersect\n  if ( $max_x1 < $min_x2 || $max_x2 < $min_x1 ||$max_y1 < $min_y2 || $max_y2 < $min_y1 ) {\n    if ( $debug ) echo 'Not intersecting, out of bounds<br>';\n    return( false );\n  }\n\n  $dx1 = $line1[1]['x'] - $line1[0]['x'];\n  $dy1 = $line1[1]['y'] - $line1[0]['y'];\n  $dx2 = $line2[1]['x'] - $line2[0]['x'];\n  $dy2 = $line2[1]['y'] - $line2[0]['y'];\n\n  if ( $dx1 ) {\n    $m1 = $dy1/$dx1;\n    $b1 = $line1[0]['y'] - ($m1 * $line1[0]['x']);\n  } else {\n    $b1 = $line1[0]['y'];\n  }\n  if ( $dx2 ) {\n    $m2 = $dy2/$dx2;\n    $b2 = $line2[0]['y'] - ($m2 * $line2[0]['x']);\n  } else {\n    $b2 = $line2[0]['y'];\n  }\n\n  if ( $dx1 && $dx2 ) { // Both not vertical\n    if ( $m1 != $m2 ) { // Not parallel or colinear\n      $x = ( $b2 - $b1 ) / ( $m1 - $m2 );\n\n      if ( $x >= $min_x1 && $x <= $max_x1 && $x >= $min_x2 && $x <= $max_x2 ) {\n        if ( $debug ) echo \"Intersecting, at x $x<br>\";\n        return( true );\n      } else {\n        if ( $debug ) echo \"Not intersecting, out of range at x $x<br>\";\n        return( false );\n      }\n    } elseif ( $b1 == $b2 ) {\n      // Colinear, must overlap due to box check, intersect? \n      if ( $debug ) echo 'Intersecting, colinear<br>';\n      return( true );\n    } else {\n      // Parallel\n      if ( $debug ) echo 'Not intersecting, parallel<br>';\n      return( false );\n    }\n  } elseif ( !$dx1 ) { // Line 1 is vertical \n    $y = ( $m2 * $line1[0]['x'] ) * $b2;\n    if ( $y >= $min_y1 && $y <= $max_y1 ) {\n      if ( $debug ) echo \"Intersecting, at y $y<br>\";\n      return( true );\n    } else {\n      if ( $debug ) echo \"Not intersecting, out of range at y $y<br>\";\n      return( false );\n    }\n  } elseif ( !$dx2 ) { // Line 2 is vertical \n    $y = ( $m1 * $line2[0]['x'] ) * $b1;\n    if ( $y >= $min_y2 && $y <= $max_y2 ) {\n      if ( $debug ) echo \"Intersecting, at y $y<br>\";\n      return( true );\n    } else {\n      if ( $debug ) echo \"Not intersecting, out of range at y $y<br>\";\n      return( false );\n    }\n  } else { // Both lines are vertical\n    if ( $line1[0]['x'] == $line2[0]['x'] ) {\n      // Colinear, must overlap due to box check, intersect? \n      if ( $debug ) echo 'Intersecting, vertical, colinear<br>';\n      return( true );\n    } else {\n      // Parallel\n      if ( $debug ) echo 'Not intersecting, vertical, parallel<br>';\n      return( false );\n    }\n  }\n  if ( $debug ) echo 'Whoops, unexpected scenario<br>';\n  return( false );\n}\n\nfunction isSelfIntersecting( $points ) {\n  global $debug;\n\n  $n_coords = count($points);\n  $edges = array();\n  for ( $j = 0, $i = $n_coords-1; $j < $n_coords; $i = $j++ ) {\n    $edges[] = array( $points[$i], $points[$j] );\n  }\n\n  for ( $i = 0; $i <= ($n_coords-2); $i++ ) {\n    for ( $j = $i+2; $j < $n_coords+min(0,$i-1); $j++ ) {\n      if ( $debug ) echo \"Checking $i and $j<br>\";\n      if ( linesIntersect( $edges[$i], $edges[$j] ) ) {\n        if ( $debug ) echo \"Lines $i and $j intersect<br>\";\n        return( true );\n      }\n    }\n  }\n  return( false );\n}\n\nfunction getPolyCentre( $points, $area=0 ) {\n  $cx = 0.0;\n  $cy = 0.0;\n  if ( !$area )\n    $area = getPolyArea( $points );\n  for ( $i = 0, $j = count($points)-1; $i < count($points); $j = $i++ ) {\n    $ct = ($points[$i]['x'] * $points[$j]['y']) - ($points[$j]['x'] * $points[$i]['y']);\n    $cx += ($points[$i]['x'] + $points[$j]['x']) * ct;\n    $cy += ($points[$i]['y'] + $points[$j]['y']) * ct;\n  }\n  $cx = intval(round(abs($cx/(6.0*$area))));\n  $cy = intval(round(abs($cy/(6.0*$area))));\n  printf( \"X:%cx, Y:$cy<br>\" );\n  return( array( 'x'=>$cx, 'y'=>$cy ) );\n}\n\nfunction _CompareXY( $a, $b ) {\n  if ( $a['min_y'] == $b['min_y'] )\n    return( intval($a['min_x'] - $b['min_x']) );\n  else\n    return( intval($a['min_y'] - $b['min_y']) );\n}\n\nfunction _CompareX( $a, $b ) {\n  return( intval($a['min_x'] - $b['min_x']) );\n}\n\nfunction getPolyArea( $points ) {\n  global $debug;\n\n  $n_coords = count($points);\n  $global_edges = array();\n  for ( $j = 0, $i = $n_coords-1; $j < $n_coords; $i = $j++ ) {\n    $x1 = $points[$i]['x'];\n    $x2 = $points[$j]['x'];\n    $y1 = $points[$i]['y'];\n    $y2 = $points[$j]['y'];\n\n    //printf( \"x1:%d,y1:%d x2:%d,y2:%d\\n\", x1, y1, x2, y2 );\n    if ( $y1 == $y2 )\n      continue;\n\n    $dx = $x2 - $x1;\n    $dy = $y2 - $y1;\n\n    $global_edges[] = array(\n        'min_y' => $y1<$y2?$y1:$y2,\n        'max_y' => ($y1<$y2?$y2:$y1)+1,\n        'min_x' => $y1<$y2?$x1:$x2,\n        '_1_m' => $dx/$dy,\n        );\n  }\n\n  usort( $global_edges, '_CompareXY' );\n\n  if ( $debug ) {\n    for ( $i = 0; $i < count($global_edges); $i++ ) {\n      printf( '%d: min_y: %d, max_y:%d, min_x:%.2f, 1/m:%.2f<br>', $i, $global_edges[$i]['min_y'], $global_edges[$i]['max_y'], $global_edges[$i]['min_x'], $global_edges[$i]['_1_m'] );\n    }\n  }\n\n  $area = 0.0;\n  $active_edges = array();\n  $y = $global_edges[0]['min_y'];\n  do {\n    for ( $i = 0; $i < count($global_edges); $i++ ) {\n      if ( $global_edges[$i]['min_y'] == $y ) {\n        if ( $debug ) printf( 'Moving global edge<br>' );\n        $active_edges[] = $global_edges[$i];\n        array_splice( $global_edges, $i, 1 );\n        $i--;\n      } else {\n        break;\n      }\n    }\n    usort( $active_edges, '_CompareX' );\n    if ( $debug ) {\n      for ( $i = 0; $i < count($active_edges); $i++ ) {\n        printf( '%d - %d: min_y: %d, max_y:%d, min_x:%.2f, 1/m:%.2f<br>', $y, $i, $active_edges[$i]['min_y'], $active_edges[$i]['max_y'], $active_edges[$i]['min_x'], $active_edges[$i]['_1_m'] );\n      }\n    }\n    $last_x = 0;\n    $row_area = 0;\n    $parity = false;\n    for ( $i = 0; $i < count($active_edges); $i++ ) {\n      $x = intval(round($active_edges[$i]['min_x']));\n      if ( $parity ) {\n        $row_area += ($x - $last_x)+1;\n        $area += $row_area;\n      }\n      if ( $active_edges[$i]['max_y'] != $y )\n        $parity = !$parity;\n      $last_x = $x;\n    }\n    if ( $debug ) printf( '%d: Area:%d<br>', $y, $row_area );\n    $y++;\n    for ( $i = 0; $i < count($active_edges); $i++ ) {\n      if ( $y >= $active_edges[$i]['max_y'] ) { // Or >= as per sheets\n        if ( $debug ) printf( 'Deleting active_edge<br>' );\n        array_splice( $active_edges, $i, 1 );\n        $i--;\n      } else {\n        $active_edges[$i]['min_x'] += $active_edges[$i]['_1_m'];\n      }\n    }\n  } while ( count($global_edges) || count($active_edges) );\n  if ( $debug ) printf( 'Area:%d<br>', $area );\n  return( $area );\n}\n\nfunction getPolyAreaOld( $points ) {\n  $area = 0.0;\n  $edge = 0.0;\n  for ( $i = 0, $j = count($points)-1; $i < count($points); $j = $i++ ) {\n    $x_diff = ($points[$i]['x'] - $points[$j]['x']);\n    $y_diff = ($points[$i]['y'] - $points[$j]['y']);\n    $y_sum = ($points[$i]['y'] + $points[$j]['y']);\n    $trap_edge = sqrt(pow(abs($x_diff)+1,2) + pow(abs($y_diff)+1,2) );\n    $edge += $trap_edge;\n    $trap_area = ($x_diff * $y_sum );\n    $area += $trap_area;\n    printf( \"%d->%d, %d-%d=%.2f, %d+%d=%.2f(%.2f), %.2f, %.2f<br>\", i, j, $points[$i]['x'], $points[$j]['x'], $x_diff, $points[$i]['y'], $points[$j]['y'], $y_sum, $y_diff, $trap_area, $trap_edge );\n  }\n  $edge = intval(round(abs($edge)));\n  $area = intval(round((abs($area)+$edge)/2));\n  echo \"E:$edge<br>\";\n  echo \"A:$area<br>\";\n  return( $area );\n}\n\nfunction mapCoords( $a ) {\n  return( $a['x'].\",\".$a['y'] );\n}\n\nfunction pointsToCoords( $points ) {\n  return( join( ' ', array_map( 'mapCoords', $points ) ) );\n}\n\nfunction coordsToPoints( $coords ) {\n  $points = array();\n  if ( preg_match_all( '/(\\d+,\\d+)+/', $coords, $matches ) ) {\n    for ( $i = 0; $i < count($matches[1]); $i++ ) {\n      if ( preg_match( '/(\\d+),(\\d+)/', $matches[1][$i], $cmatches ) ) {\n        $points[] = array( 'x'=>$cmatches[1], 'y'=>$cmatches[2] );\n      } else {\n        echo( \"Bogus coordinates '\".$matches[$i].\"'\" );\n        return( false );\n      }\n    }\n  } else {\n    echo( \"Bogus coordinate string '$coords'\" );\n    return( false );\n  }\n  return( $points );\n}\n\nfunction limitPoints( &$points, $min_x, $min_y, $max_x, $max_y ) {\n  foreach ( $points as &$point ) {\n    if ( $point['x'] < $min_x ) {\n      Logger::Debug('Limiting point x'.$point['x'].' to min_x ' . $min_x );\n      $point['x'] = $min_x;\n    } else if ( $point['x'] > $max_x ) {\n      Logger::Debug('Limiting point x'.$point['x'].' to max_x ' . $max_x );\n      $point['x'] = $max_x;\n    }\n    if ( $point['y'] < $min_y ) {\n      Logger::Debug('Limiting point y'.$point['y'].' to min_y ' . $min_y );\n      $point['y'] = $min_y;\n    } else if ( $point['y'] > $max_y ) {\n      Logger::Debug('Limiting point y'.$point['y'].' to max_y ' . $max_y );\n      $point['y'] = $max_y;\n    }\n  } // end foreach point\n} // end function limitPoints( $points, $min_x, $min_y, $max_x, $max_y )\n\nfunction scalePoints( &$points, $scale ) {\n  foreach ( $points as &$point ) {\n    $point['x'] = reScale( $point['x'], $scale );\n    $point['y'] = reScale( $point['y'], $scale );\n  }\n}\n\nfunction getLanguages() {\n  $langs = array();\n  foreach ( glob('lang/*_*.php') as $file ) {\n    preg_match( '/([^\\/]+_.+)\\.php/', $file, $matches );\n    $langs[$matches[1]] = $matches[1];\n  }\n  return( $langs );\n}\n\nfunction trimString( $string, $length ) {\n  return( preg_replace( '/^(.{'.$length.',}?)\\b.*$/', '\\\\1&hellip;', $string ) );\n}\n\nfunction monitorIdsToNames( $ids ) {\n  global $mITN_monitors;\n  if ( !$mITN_monitors ) {\n    $sql = 'select Id, Name from Monitors';\n    foreach( dbFetchAll( $sql ) as $monitor ) {\n      $mITN_monitors[$monitor['Id']] = $monitor;\n    }\n  }\n  $names = array();\n  if ( ! is_array($ids) ) {\n    $ids = preg_split( '/\\s*,\\s*/', $ids );\n  }\n  foreach ( $ids as $id ) {\n    if ( visibleMonitor( $id ) ) {\n      if ( isset($mITN_monitors[$id]) ) {\n        $names[] = $mITN_monitors[$id]['Name'];\n      }\n    }\n  }\n  $name_string = join( ', ', $names );\n  return( $name_string );\n}\n\nfunction initX10Status() {\n  global $x10_status;\n\n  if ( !isset($x10_status) ) {\n    $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );\n    if ( $socket < 0 ) {\n      Fatal( 'socket_create() failed: '.socket_strerror($socket) );\n    }\n    $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';\n    if ( @socket_connect( $socket, $sock_file ) ) {\n      $command = 'status';\n      if ( !socket_write( $socket, $command ) ) {\n        Fatal( \"Can't write to control socket: \".socket_strerror(socket_last_error($socket)) );\n      }\n      socket_shutdown( $socket, 1 );\n      $x10Output = '';\n      while ( $x10Response = socket_read( $socket, 256 ) ) {\n        $x10Output .= $x10Response;\n      }\n      socket_close( $socket );\n    } else {\n      // Can't connect so use script\n      $command = ZM_PATH_BIN.\"/zmx10.pl --command status\";\n      //$command .= \" 2>/dev/null >&- <&- >/dev/null\";\n\n      $x10Output = exec( escapeshellcmd( $command ) );\n    }\n    foreach ( explode( \"\\n\", $x10Output ) as $x10Response ) {\n      if ( preg_match( \"/^(\\d+)\\s+(.+)$/\", $x10Response, $matches ) ) {\n        $x10_status[$matches[1]] = $matches[2];\n      }\n    }\n  }\n}\n\nfunction getDeviceStatusX10( $key ) {\n  global $x10_status;\n\n  initX10Status();\n\n  if ( empty($x10_status[$key]) || !($status = $x10_status[$key]) )\n    $status = 'unknown';\n  return( $status );\n}\n\nfunction setDeviceStatusX10( $key, $status ) {\n  $socket = socket_create( AF_UNIX, SOCK_STREAM, 0 );\n  if ( $socket < 0 ) {\n    Fatal( 'socket_create() failed: '.socket_strerror($socket) );\n  }\n  $sock_file = ZM_PATH_SOCKS.'/zmx10.sock';\n  if ( @socket_connect( $socket, $sock_file ) ) {\n    $command = \"$status;$key\";\n    if ( !socket_write( $socket, $command ) ) {\n      Fatal( \"Can't write to control socket: \".socket_strerror(socket_last_error($socket)) );\n    }\n    socket_shutdown( $socket, 1 );\n    $x10Response = socket_read( $socket, 256 );\n    socket_close( $socket );\n  } else {\n    // Can't connect so use script\n    $command = ZM_PATH_BIN.'/zmx10.pl --command '.escapeshellarg( $status );\n    $command .= ' --unit-code '.escapeshellarg( $key );\n    //$command .= \" 2>/dev/null >&- <&- >/dev/null\";\n    $x10Response = exec( $command );\n  }\n  if ( preg_match( '/^'.$key.'\\s+(.*)/', $x10Response, $matches ) )\n    $status = $matches[1];\n  else\n    $status = 'unknown';\n  return( $status );\n}\n\nfunction logState() {\n  $state = 'ok';\n\n  $levelCounts = array(\n      Logger::FATAL => array( ZM_LOG_ALERT_FAT_COUNT, ZM_LOG_ALARM_FAT_COUNT ),\n      Logger::ERROR => array( ZM_LOG_ALERT_ERR_COUNT, ZM_LOG_ALARM_ERR_COUNT ),\n      Logger::WARNING => array( ZM_LOG_ALERT_WAR_COUNT, ZM_LOG_ALARM_WAR_COUNT ),\n      );\n\n  # This is an expensive request, as it has to hit every row of the Logs Table\n  $sql = 'SELECT Level, COUNT(Level) AS LevelCount FROM Logs WHERE Level < '.Logger::INFO.' AND TimeKey > unix_timestamp(now() - interval '.ZM_LOG_CHECK_PERIOD.' second) GROUP BY Level ORDER BY Level ASC';\n  $counts = dbFetchAll($sql);\n  if ( $counts ) {\n    foreach ( $counts as $count ) {\n      if ( $count['Level'] <= Logger::PANIC )\n        $count['Level'] = Logger::FATAL;\n      if ( !($levelCount = $levelCounts[$count['Level']]) ) {\n        Error('Unexpected Log level '.$count['Level']);\n        next;\n      }\n      if ( $levelCount[1] && $count['LevelCount'] >= $levelCount[1] ) {\n        $state = 'alarm';\n        break;\n      } elseif ( $levelCount[0] && $count['LevelCount'] >= $levelCount[0] ) {\n        $state = 'alert';\n      }\n    }\n  }\n  return $state;\n}\n\nfunction isVector ( &$array ) {\n  $next_key = 0;\n  foreach ( array_keys($array) as $key ) {\n    if ( !is_int( $key ) )\n      return( false );\n    if ( $key != $next_key++ )\n      return( false );\n  }\n  return( true );\n}\n\nfunction checkJsonError($value) {\n  if ( function_exists('json_last_error') ) {\n    $value = var_export($value,true);\n    switch( json_last_error() ) {\n      case JSON_ERROR_DEPTH :\n        Fatal( \"Unable to decode JSON string '$value', maximum stack depth exceeded\" );\n      case JSON_ERROR_CTRL_CHAR :\n        Fatal( \"Unable to decode JSON string '$value', unexpected control character found\" );\n      case JSON_ERROR_STATE_MISMATCH :\n        Fatal( \"Unable to decode JSON string '$value', invalid or malformed JSON\" );\n      case JSON_ERROR_SYNTAX :\n        Fatal( \"Unable to decode JSON string '$value', syntax error\" );\n      default :\n        Fatal( \"Unable to decode JSON string '$value', unexpected error \".json_last_error() );\n      case JSON_ERROR_NONE:\n        break;\n    }\n  }\n}\n\nfunction jsonEncode( &$value ) {\n  if ( function_exists('json_encode') ) {\n    $string = json_encode( $value );\n    checkJsonError($value);\n    return( $string );\n  }\n\n  switch ( gettype($value) ) {\n    case 'double':\n    case 'integer':\n      return( $value );\n    case 'boolean':\n      return( $value?'true':'false' );\n    case 'string':\n      return( '\"'.preg_replace( \"/\\r?\\n/\", '\\\\n', addcslashes($value,'\"\\\\/') ).'\"' );\n    case 'NULL':\n      return( 'null' );\n    case 'object':\n      return( '\"Object '.addcslashes(get_class($value),'\"\\\\/').'\"' );\n    case 'array':\n      if ( isVector( $value ) )\n        return( '['.join( ',', array_map( 'jsonEncode', $value) ).']' );\n      else {\n        $result = '{';\n        foreach ($value as $subkey => $subvalue ) {\n          if ( $result != '{' )\n            $result .= ',';\n          $result .= '\"'.$subkey.'\":'.jsonEncode( $subvalue );\n        }\n        return( $result.'}' );\n      }\n    default:\n      return( '\"'.addcslashes(gettype($value),'\"\\\\/').'\"' );\n  }\n}\n\nfunction jsonDecode( $value ) {\n  if ( function_exists('json_decode') ) {\n    $object = json_decode( $value, true );\n    checkJsonError($value);\n    return( $object );\n  }\n\n  $comment = false;\n  $unescape = false;\n  $out = '$result=';\n  for ( $i = 0; $i < strlen($value); $i++ ) {\n    if ( !$comment ) {\n      if ( ($value[$i] == '{') || ($value[$i] == '[') ) {\n        $out .= ' array(';\n      } else if ( ($value[$i] == '}') || ($value[$i] == ']') ) {\n        $out .= ')';\n      } else if ( $value[$i] == ':' ) {\n        $out .= '=>';\n      } else {\n        $out .= $value[$i];         \n      }\n    } else if ( !$unescape ) {\n      if ( $value[$i] == '\\\\' )\n        $unescape = true;\n      else\n        $out .= $value[$i];\n    } else {\n      if ( $value[$i] != '/' )\n        $out .= '\\\\';\n      $out .= $value[$i];\n      $unescape = false;\n    }\n    if ( $value[$i] == '\"' ) {\n      $comment = !$comment;\n    }\n  }\n  eval( $out.';' );\n  return( $result );\n}\n\ndefine( 'HTTP_STATUS_OK', 200 );\ndefine( 'HTTP_STATUS_BAD_REQUEST', 400 );\ndefine( 'HTTP_STATUS_FORBIDDEN', 403 );\n\nfunction ajaxError( $message, $code=HTTP_STATUS_OK ) {\n  Error( $message );\n  if ( function_exists( 'ajaxCleanup' ) )\n    ajaxCleanup();\n  if ( $code == HTTP_STATUS_OK ) {\n    $response = array( 'result'=>'Error', 'message'=>$message );\n    header( 'Content-type: text/plain' );\n    exit( jsonEncode( $response ) );\n  }\n  header( \"HTTP/1.0 $code $message\" );\n  exit();\n}\n\nfunction ajaxResponse( $result=false ) {\n  if ( function_exists( 'ajaxCleanup' ) )\n    ajaxCleanup();\n  $response = array( 'result'=>'Ok' );\n  if ( is_array( $result ) ) {\n    $response = array_merge( $response, $result );\n  } elseif ( !empty($result) ) {\n    $response['message'] = $result;\n  }\n  header( 'Content-type: text/plain' );\n  exit( jsonEncode( $response ) );\n}\n\nfunction generateConnKey() {\n  return( rand( 1, 999999 ) );\n}\n\nfunction detaintPath( $path ) {\n  // Remove any absolute paths, or relative ones that want to go up\n  $path = preg_replace( '/\\.(?:\\.+[\\\\/][\\\\/]*)+/', '', $path );\n  $path = preg_replace( '/^[\\\\/]+/', '', $path );\n  return( $path );\n}\n\nfunction cache_bust( $file ) {\n  # Use the last modified timestamp to create a link that gets a different filename\n  # To defeat caching.  Should probably use md5 hash\n  $parts = pathinfo($file);\n  global $css;\n  $dirname = preg_replace( '/\\//', '_', $parts['dirname'] );\n  $cacheFile = $dirname.'_'.$parts['filename'].'-'.$css.'-'.filemtime($file).'.'.$parts['extension'];\n  if ( file_exists(ZM_DIR_CACHE.'/'.$cacheFile) or symlink(ZM_PATH_WEB.'/'.$file, ZM_DIR_CACHE.'/'.$cacheFile) ) {\n    return 'cache/'.$cacheFile;\n  } else {\n    Warning(\"Failed linking $file to $cacheFile\");\n  }\n  return $file;\n}\n\nfunction getSkinFile( $file ) {\n  global $skinBase;\n  $skinFile = false;\n  foreach ( $skinBase as $skin ) {\n    $tempSkinFile = detaintPath( 'skins'.'/'.$skin.'/'.$file );\n    if ( file_exists( $tempSkinFile ) )\n      $skinFile = $tempSkinFile;\n  }\n  return  $skinFile;\n}\n\nfunction getSkinIncludes( $file, $includeBase=false, $asOverride=false ) {\n  global $skinBase;\n  $skinFile = false;\n  foreach ( $skinBase as $skin ) {\n    $tempSkinFile = detaintPath( 'skins'.'/'.$skin.'/'.$file );\n    if ( file_exists( $tempSkinFile ) )\n      $skinFile = $tempSkinFile;\n  }\n  $includeFiles = array();\n  if ( $asOverride ) {\n    if ( $skinFile )\n      $includeFiles[] = $skinFile;\n    else if ( $includeBase )\n      $includeFiles[] = $file;\n  } else {\n    if ( $includeBase )\n      $includeFiles[] = $file;\n    if ( $skinFile )\n      $includeFiles[] = $skinFile;\n  }\n  return( $includeFiles );\n}\n\nfunction requestVar( $name, $default='' ) {\n  return( isset($_REQUEST[$name])?validHtmlStr($_REQUEST[$name]):$default );\n}\n\n// For numbers etc in javascript or tags etc\nfunction validInt( $input ) {\n  return( preg_replace( '/\\D/', '', $input ) );\n}\n\nfunction validNum( $input ) {\n  return( preg_replace( '/[^\\d.-]/', '', $input ) );\n}\n\n// For general strings\nfunction validStr( $input ) {\n  return( strip_tags( $input ) );\n}\n\n// For strings in javascript or tags etc, expected to be in quotes so further quotes escaped rather than converted\nfunction validJsStr( $input ) {\n  return( strip_tags( addslashes( $input ) ) );\n}\n\n// For general text in pages outside of tags or quotes so quotes converted to entities\nfunction validHtmlStr( $input ) {\n  return( htmlspecialchars( $input, ENT_QUOTES ) );\n}\n\nfunction getStreamHTML( $monitor, $options = array() ) {\n\n  if ( isset($options['scale']) and $options['scale'] and ( $options['scale'] != 100 ) ) {\n    //Warning(\"Scale to \" . $options['scale'] );\n    $options['width'] = reScale( $monitor->Width(), $options['scale'] ) . 'px';\n    $options['height'] = reScale( $monitor->Height(), $options['scale'] ) . 'px';\n  } else {\n    # scale is empty or 100\n    # There may be a fixed width applied though, in which case we need to leave the height empty\n    if ( ! ( isset($options['width']) and $options['width'] ) ) {\n      $options['width'] = $monitor->Width() . 'px';\n      if ( ! ( isset($options['height']) and $options['height'] ) ) {\n        $options['height'] = $monitor->Height() . 'px';\n      }\n    } else if ( ! isset($options['height']) ) {\n      $options['height'] = '';\n    }\n  }\n  if ( ! isset($options['mode'] ) ) {\n    $options['mode'] = 'stream';\n  }\n  $options['maxfps'] = ZM_WEB_VIDEO_MAXFPS;\n  if ( $monitor->StreamReplayBuffer() )\n    $options['buffer'] = $monitor->StreamReplayBuffer();\n  //Warning(\"width: \" . $options['width'] . ' height: ' . $options['height']. ' scale: ' . $options['scale'] );\n\n  if ( $monitor->Type() == 'WebSite' ) {\n    return getWebSiteUrl(\n      'liveStream'.$monitor->Id(), $monitor->Path(),\n      ( isset($options['width']) ? $options['width'] : NULL ),\n      ( isset($options['height']) ? $options['height'] : NULL ),\n      $monitor->Name()\n    );\n  //FIXME, the width and height of the image need to be scaled.\n  } else if ( ZM_WEB_STREAM_METHOD == 'mpeg' && ZM_MPEG_LIVE_FORMAT ) {\n    $streamSrc = $monitor->getStreamSrc( array(\n      'mode'=>'mpeg',\n      'scale'=>(isset($options['scale'])?$options['scale']:100),\n      'bitrate'=>ZM_WEB_VIDEO_BITRATE,\n      'maxfps'=>ZM_WEB_VIDEO_MAXFPS,\n      'format' => ZM_MPEG_LIVE_FORMAT\n    ) );\n    return getVideoStreamHTML( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], ZM_MPEG_LIVE_FORMAT, $monitor->Name() );\n  } else if ( $options['mode'] == 'stream' and canStream() ) {\n    $options['mode'] = 'jpeg';\n    $streamSrc = $monitor->getStreamSrc($options);\n\n    if ( canStreamNative() )\n      return getImageStreamHTML( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], $monitor->Name());\n    elseif ( canStreamApplet() )\n      // Helper, empty widths and heights really don't work.\n      return getHelperStream( 'liveStream'.$monitor->Id(), $streamSrc, \n          $options['width'] ? $options['width'] : $monitor->Width(), \n          $options['height'] ? $options['height'] : $monitor->Height(),\n          $monitor->Name());\n  } else {\n    if ( $options['mode'] == 'stream' ) {\n      Info( 'The system has fallen back to single jpeg mode for streaming. Consider enabling Cambozola or upgrading the client browser.' );\n    }\n    $options['mode'] = 'single';\n    $streamSrc = $monitor->getStreamSrc( $options );\n    return getImageStill( 'liveStream'.$monitor->Id(), $streamSrc, $options['width'], $options['height'], $monitor->Name());\n  }\n} // end function getStreamHTML\n\nfunction getStreamMode( ) {\n  $streamMode = '';\n  if ( ZM_WEB_STREAM_METHOD == 'mpeg' && ZM_MPEG_LIVE_FORMAT ) {\n    $streamMode = 'mpeg';\n  } elseif ( canStream() ) {\n    $streamMode = 'jpeg';\n  } else {\n    $streamMode = 'single';\n    Info( 'The system has fallen back to single jpeg mode for streaming. Consider enabling Cambozola or upgrading the client browser.' );\n  }\n  return $streamMode;\n} // end function getStreamMode\n\nfunction folder_size($dir) {\n    $size = 0;\n    foreach (glob(rtrim($dir, '/').'/*', GLOB_NOSORT) as $each) {\n        $size += is_file($each) ? filesize($each) : folder_size($each);\n    }\n    return $size;\n} // end function folder_size\n\nfunction human_filesize($size, $precision = 2) {\n    $units = array('B','kB','MB','GB','TB','PB','EB','ZB','YB');\n    $step = 1024;\n    $i = 0;\n    while (($size / $step) > 0.9) {\n        $size = $size / $step;\n        $i++;\n    }\n    return round($size, $precision).$units[$i];\n}\n\nfunction csrf_startup() {\n    csrf_conf('rewrite-js', 'includes/csrf/csrf-magic.js');\n}\n\nfunction check_timezone() {\n  $now = new DateTime();\n\n  $sys_tzoffset = trim(shell_exec('date \"+%z\"'));\n  $php_tzoffset = trim($now->format('O'));\n  $mysql_tzoffset = trim(dbFetchOne(\"SELECT TIME_FORMAT(TIMEDIFF(NOW(), UTC_TIMESTAMP),'%H%i');\",'TIME_FORMAT(TIMEDIFF(NOW(), UTC_TIMESTAMP),\\'%H%i\\')'));\n\n  #Logger::Debug(\"System timezone offset determine to be: $sys_tzoffset,\\x20 \n                 #PHP timezone offset determine to be: $php_tzoffset,\\x20 \n                 #Mysql timezone offset determine to be: $mysql_tzoffset\n               #\");\n\n  if ( $sys_tzoffset != $php_tzoffset )\n    Fatal(\"ZoneMinder is not installed properly: php's date.timezone does not match the system timezone!\");\n\n  if ( $sys_tzoffset != $mysql_tzoffset )\n    Error(\"ZoneMinder is not installed properly: mysql's timezone does not match the system timezone! Event lists will display incorrect times.\");\n\n  if (!ini_get('date.timezone') || !date_default_timezone_set(ini_get('date.timezone')))\n    Fatal( \"ZoneMinder is not installed properly: php's date.timezone is not set to a valid timezone\" );\n\n}\n\nfunction unparse_url($parsed_url, $substitutions = array() ) { \n  $fields = array('scheme','host','port','user','pass','path','query','fragment');\n\n  foreach ( $fields as $field ) {\n    if ( isset( $substitutions[$field] ) ) {\n      $parsed_url[$field] = $substitutions[$field];\n    }\n  }\n  $scheme   = isset($parsed_url['scheme']) ? $parsed_url['scheme'] . '://' : ''; \n  $host     = isset($parsed_url['host']) ? $parsed_url['host'] : ''; \n  $port     = isset($parsed_url['port']) ? ':' . $parsed_url['port'] : ''; \n  $user     = isset($parsed_url['user']) ? $parsed_url['user'] : ''; \n  $pass     = isset($parsed_url['pass']) ? ':' . $parsed_url['pass']  : ''; \n  $pass     = ($user || $pass) ? \"$pass@\" : ''; \n  $path     = isset($parsed_url['path']) ? $parsed_url['path'] : ''; \n  $query    = isset($parsed_url['query']) ? '?' . $parsed_url['query'] : ''; \n  $fragment = isset($parsed_url['fragment']) ? '#' . $parsed_url['fragment'] : ''; \n  return \"$scheme$user$pass$host$port$path$query$fragment\"; \n}\n\n// PP - POST request handler for PHP which does not need extensions\n// credit: http://wezfurlong.org/blog/2006/nov/http-post-from-php-without-curl/\n\n\nfunction do_request($method, $url, $data=array(), $optional_headers = null) {\n  global $php_errormsg;\n\n  $params = array('http' => array(\n        'method' => $method,\n        'content' => $data\n        ));\n  if ( $optional_headers !== null ) {\n    $params['http']['header'] = $optional_headers;\n  }\n  $ctx = stream_context_create($params);\n  $fp = @fopen($url, 'rb', false, $ctx);\n  if ( !$fp ) {\n    throw new Exception(\"Problem with $url, $php_errormsg\");\n  }\n  $response = @stream_get_contents($fp);\n  if ( $response === false ) {\n    throw new Exception(\"Problem reading data from $url, $php_errormsg\");\n  }\n  return $response;\n}\n\nfunction do_post_request($url, $data, $optional_headers = null) {\n  $params = array('http' => array(\n        'method' => 'POST',\n        'content' => $data\n        ));\n  if ( $optional_headers !== null ) {\n    $params['http']['header'] = $optional_headers;\n  }\n  $ctx = stream_context_create($params);\n  $fp = @fopen($url, 'rb', false, $ctx);\n  if ( !$fp ) {\n    throw new Exception(\"Problem with $url, $php_errormsg\");\n  }\n  $response = @stream_get_contents($fp);\n  if ( $response === false ) {\n    throw new Exception(\"Problem reading data from $url, $php_errormsg\");\n  }\n  return $response;\n}\n\n// The following works around php not being built with semaphore functions.\nif (!function_exists('sem_get')) {\n  function sem_get($key) {\n    return fopen(__FILE__ . '.sem.' . $key, 'w+');\n  }\n  function sem_acquire($sem_id) {\n    return flock($sem_id, LOCK_EX);\n  }\n  function sem_release($sem_id) {\n    return flock($sem_id, LOCK_UN);\n  }\n}\n\nif( !function_exists('ftok') ) {\n  function ftok($filename = \"\", $proj = \"\") {\n    if ( empty($filename) || !file_exists($filename) ) {\n      return -1;\n    } else {\n      $filename = $filename . (string) $proj;\n      for($key = array(); sizeof($key) < strlen($filename); $key[] = ord(substr($filename, sizeof($key), 1)));\n      return dechex(array_sum($key));\n    }\n  }\n}\n\nfunction getAffectedIds( $name ) {\n  $names = $name.'s';\n  $ids = array();\n\tif ( isset($_REQUEST[$names]) ) {\n\t\tif ( is_array($_REQUEST[$names]) ) {\n\t\t\t$ids = $_REQUEST[$names];\n\t\t} else {\n\t\t\t$ids = array($_REQUEST[$names]);\n\t\t}\n\t} else if ( isset($_REQUEST[$name]) ) {\n\t\tif ( is_array($_REQUEST[$name]) ) {\n\t\t\t$ids = $_REQUEST[$name];\n\t\t} else {\n\t\t\t$ids = array($_REQUEST[$name]);\n\t\t}\n\t}\n\treturn $ids;\n}\n\nfunction format_duration($time, $separator=':') {\n  return sprintf('%02d%s%02d%s%02d', floor($time/3600), $separator, ($time/60)%60, $separator, $time%60);\n}\n\n?>\n", "<?php\n//\n// ZoneMinder web controls file, $Date$, $Revision$\n// Copyright (C) 2001-2008 Philip Coombes\n//\n// This program is free software; you can redistribute it and/or\n// modify it under the terms of the GNU General Public License\n// as published by the Free Software Foundation; either version 2\n// of the License, or (at your option) any later version.\n//\n// This program is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with this program; if not, write to the Free Software\n// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.\n//\n\nif ( !canView( 'Control' ) )\n{\n    $view = \"error\";\n    return;\n}\n\n$controls = dbFetchAll( 'SELECT * FROM Controls ORDER BY Id' );\n\n$focusWindow = true;\n\nxhtmlHeaders(__FILE__, translate('ControlCaps') );\n?>\n<body>\n  <div id=\"page\">\n    <div id=\"header\">\n      <div id=\"headerButtons\">\n        <a href=\"#\" data-on-click=\"closeWindow\"><?php echo translate('Close') ?></a>\n      </div>\n      <h2><?php echo translate('ControlCaps') ?></h2>\n    </div>\n    <div id=\"content\">\n      <form name=\"contentForm\" id=\"contentForm\" method=\"get\" action=\"<?php echo $_SERVER['PHP_SELF'] ?>\" onsubmit=\"return( confirmDelete( 'Warning, deleting a control will reset all monitors that use it to be uncontrollable.\\nAre you sure you wish to delete?' ) );\">\n        <input type=\"hidden\" name=\"view\" value=\"<?php echo $view ?>\"/>\n        <input type=\"hidden\" name=\"action\" value=\"delete\"/>\n        <table id=\"contentTable\" class=\"major\" cellspacing=\"0\">\n          <thead>\n            <tr>\n              <th class=\"colName\"><?php echo translate('Name') ?></th>\n              <th class=\"colType\"><?php echo translate('Type') ?></th>\n              <th class=\"colProtocol\"><?php echo translate('Protocol') ?></th>\n              <th class=\"colCanMove\"><?php echo translate('CanMove') ?></th>\n              <th class=\"colCanZoom\"><?php echo translate('CanZoom') ?></th>\n              <th class=\"colCanFocus\"><?php echo translate('CanFocus') ?></th>\n              <th class=\"colCanIris\"><?php echo translate('CanIris') ?></th>\n              <th class=\"colCanWhiteBal\"><?php echo translate('CanWhiteBal') ?></th>\n              <th class=\"colHasPresets\"><?php echo translate('HasPresets') ?></th>\n              <th class=\"colMark\"><?php echo translate('Mark') ?></th>\n            </tr>\n          </thead>\n          <tbody>\n<?php\nforeach( $controls as $control )\n{\n?>\n            <tr>\n              <td class=\"colName\"><?php echo makePopupLink( '?view=controlcap&cid='.$control['Id'], 'zmControlCap', 'controlcap', validHtmlStr($control['Name']), canView( 'Control' ) ) ?></td>\n              <td class=\"colType\"><?php echo $control['Type'] ?></td>\n              <td class=\"colProtocol\"><?php echo validHtmlStr($control['Protocol']) ?></td>\n              <td class=\"colCanMove\"><?php echo $control['CanMove']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colCanZoom\"><?php echo $control['CanZoom']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colCanFocus\"><?php echo $control['CanFocus']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colCanIris\"><?php echo $control['CanIris']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colCanWhiteBal\"><?php echo $control['CanWhite']?translate('Yes'):translate('No') ?></td>\n              <td class=\"colHasPresets\"><?php echo $control['HasHomePreset']?'H':'' ?><?php echo $control['HasPresets']?$control['NumPresets']:'0' ?></td>\n              <td class=\"colMark\"><input type=\"checkbox\" name=\"markCids[]\" value=\"<?php echo $control['Id'] ?>\" data-on-click-this=\"configureDeleteButton\"<?php if ( !canEdit( 'Control' ) ) {?> disabled=\"disabled\"<?php } ?>/></td>\n            </tr>\n<?php\n}\n?>\n          </tbody>\n        </table>\n        <div id=\"contentButtons\">\n          <?php echo makePopupButton('?view=controlcap', 'zmControlCap', 'controlcap', translate('AddNewControl'), canEdit( 'Control' )); ?>\n          <input type=\"submit\" name=\"deleteBtn\" value=\"<?php echo translate('Delete') ?>\" disabled=\"disabled\"/>\n        </div>\n      </form>\n    </div>\n  </div>\n</body>\n</html>\n"], "filenames": ["web/includes/functions.php", "web/skins/classic/views/controlcaps.php"], "buggy_code_start_loc": [452, 66], "buggy_code_end_loc": [452, 69], "fixing_code_start_loc": [453, 66], "fixing_code_end_loc": [456, 69], "type": "CWE-79", "message": "A stored-self XSS exists in web/skins/classic/views/controlcaps.php of ZoneMinder through 1.32.3, allowing an attacker to execute HTML or JavaScript code in a vulnerable field via a long NAME or PROTOCOL to the index.php?view=controlcaps URI.", "other": {"cve": {"id": "CVE-2019-6992", "sourceIdentifier": "cve@mitre.org", "published": "2019-01-28T20:29:00.437", "lastModified": "2019-01-29T20:22:32.743", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A stored-self XSS exists in web/skins/classic/views/controlcaps.php of ZoneMinder through 1.32.3, allowing an attacker to execute HTML or JavaScript code in a vulnerable field via a long NAME or PROTOCOL to the index.php?view=controlcaps URI."}, {"lang": "es", "value": "Existe Cross-Site Scripting (XSS) persistente en web/skins/classic/views/controlcaps.php en ZoneMinder, hasta la versi\u00f3n 1.32.3, lo que permite a los atacantes ejecutar c\u00f3digo HTML o JavaScript en un campo vulnerable mediante un NAME o PROTOCOL largo en la URI index.php?view=controlcaps."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:zoneminder:zoneminder:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.32.3", "matchCriteriaId": "8045339C-B032-47D7-BEAE-90BCC6699C06"}]}]}], "references": [{"url": "https://github.com/ZoneMinder/zoneminder/commit/8c5687ca308e441742725e0aff9075779fa1a498", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/ZoneMinder/zoneminder/issues/2445", "source": "cve@mitre.org", "tags": ["Exploit", "Issue Tracking", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ZoneMinder/zoneminder/commit/8c5687ca308e441742725e0aff9075779fa1a498"}}