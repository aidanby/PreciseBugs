{"buggy_code": ["import sys\n\nimport ldap  # pylint: disable=import-error\nfrom flask import current_app, jsonify, request\nfrom flask_cors import cross_origin\n\nfrom alerta.auth.utils import create_token, get_customers\nfrom alerta.exceptions import ApiError\nfrom alerta.models.permission import Permission\nfrom alerta.models.user import User\nfrom alerta.utils.audit import auth_audit_trail\n\nfrom . import auth\n\n\n@auth.route('/auth/login', methods=['OPTIONS', 'POST'])\n@cross_origin(supports_credentials=True)\ndef login():\n    # Allow LDAP server to use a self signed certificate\n    if current_app.config['LDAP_ALLOW_SELF_SIGNED_CERT']:\n        ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_ALLOW)\n\n    # Retrieve required fields from client request\n    try:\n        login = request.json.get('username', None) or request.json['email']\n        password = request.json['password']\n    except KeyError:\n        raise ApiError(\"must supply 'username' and 'password'\", 401)\n\n    try:\n        if '\\\\' in login:\n            domain, username = login.split('\\\\')\n            email = ''\n            email_verified = False\n        else:\n            username, domain = login.split('@')\n            email = login\n            email_verified = True\n    except ValueError:\n        raise ApiError('expected username with domain', 401)\n\n    # Validate LDAP domain\n    if domain not in current_app.config['LDAP_DOMAINS']:\n        raise ApiError('unauthorized domain', 403)\n\n    userdn = current_app.config['LDAP_DOMAINS'][domain] % username\n\n    # Attempt LDAP AUTH\n    try:\n        trace_level = 2 if current_app.debug else 0\n        ldap_connection = ldap.initialize(current_app.config['LDAP_URL'], trace_level=trace_level)\n        ldap_connection.simple_bind_s(userdn, password)\n    except ldap.INVALID_CREDENTIALS:\n        raise ApiError('invalid username or password', 401)\n    except Exception as e:\n        raise ApiError(str(e), 500)\n\n    # Get email address from LDAP\n    if not email_verified:\n        try:\n            ldap_result = ldap_connection.search_s(userdn, ldap.SCOPE_SUBTREE, '(objectClass=*)', ['mail'])\n            email = ldap_result[0][1]['mail'][0].decode(sys.stdout.encoding)\n            email_verified = True\n        except Exception:\n            email = '{}@{}'.format(username, domain)\n\n    # Create user if not yet there\n    user = User.find_by_username(username=login)\n    if not user:\n        user = User(name=username, login=login, password='', email=email,\n                    roles=[], text='LDAP user', email_verified=email_verified)\n        try:\n            user = user.create()\n        except Exception as e:\n            ApiError(str(e), 500)\n\n    # Assign customers & update last login time\n    groups = list()\n    try:\n        groups_filters = current_app.config.get('LDAP_DOMAINS_GROUP', {})\n        base_dns = current_app.config.get('LDAP_DOMAINS_BASEDN', {})\n        if domain in groups_filters and domain in base_dns:\n            resultID = ldap_connection.search(\n                base_dns[domain],\n                ldap.SCOPE_SUBTREE,\n                groups_filters[domain].format(username=username, email=email, userdn=userdn),\n                ['cn']\n            )\n            resultTypes, results = ldap_connection.result(resultID)\n            for _dn, attributes in results:\n                groups.append(attributes['cn'][0].decode('utf-8'))\n    except ldap.LDAPError as e:\n        raise ApiError(str(e), 500)\n\n    # Check user is active\n    if user.status != 'active':\n        raise ApiError('User {} not active'.format(login), 403)\n    user.update_last_login()\n\n    scopes = Permission.lookup(login=login, roles=user.roles + groups)\n    customers = get_customers(login=login, groups=[user.domain] + groups)\n\n    auth_audit_trail.send(current_app._get_current_object(), event='basic-ldap-login', message='user login via LDAP',\n                          user=login, customers=customers, scopes=scopes, roles=user.roles, groups=groups,\n                          resource_id=user.id, type='user', request=request)\n\n    # Generate token\n    token = create_token(user_id=user.id, name=user.name, login=user.email, provider='ldap',\n                         customers=customers, scopes=scopes, roles=user.roles, groups=groups,\n                         email=user.email, email_verified=user.email_verified)\n    return jsonify(token=token.tokenize)\n", "from datetime import datetime\nfrom typing import Any, Dict, List, Optional, Tuple, Union\nfrom uuid import uuid4\n\nfrom flask import g\n\nfrom alerta.app import db\nfrom alerta.database.base import Query\nfrom alerta.models.enums import ChangeType, NoteType\nfrom alerta.models.history import History\nfrom alerta.utils.format import DateTime\nfrom alerta.utils.response import absolute_url\n\nJSON = Dict[str, Any]\n\n\nclass Note:\n\n    def __init__(self, text: str, user: str, note_type: str, **kwargs) -> None:\n\n        self.id = kwargs.get('id') or str(uuid4())\n        self.text = text\n        self.user = user\n        self.note_type = note_type\n        self.attributes = kwargs.get('attributes', None) or dict()\n        self.create_time = kwargs['create_time'] if 'create_time' in kwargs else datetime.utcnow()\n        self.update_time = kwargs.get('update_time')\n        self.alert = kwargs.get('alert')\n        self.customer = kwargs.get('customer')\n\n    @classmethod\n    def parse(cls, json: JSON) -> 'Note':\n        return Note(\n            id=json.get('id', None),\n            text=json.get('status', None),\n            user=json.get('status', None),\n            attributes=json.get('attributes', dict()),\n            note_type=json.get('type', None),\n            create_time=DateTime.parse(json['createTime']) if 'createTime' in json else None,\n            update_time=DateTime.parse(json['updateTime']) if 'updateTime' in json else None,\n            alert=json.get('related', {}).get('alert'),\n            customer=json.get('customer', None)\n        )\n\n    @property\n    def serialize(self) -> Dict[str, Any]:\n        note = {\n            'id': self.id,\n            'href': absolute_url('/note/' + self.id),\n            'text': self.text,\n            'user': self.user,\n            'attributes': self.attributes,\n            'type': self.note_type,\n            'createTime': self.create_time,\n            'updateTime': self.update_time,\n            '_links': dict(),\n            'customer': self.customer\n        }\n        if self.alert:\n            note['_links'] = {\n                'alert': absolute_url('/alert/' + self.alert)\n            }\n        return note\n\n    def __repr__(self) -> str:\n        return 'Note(id={!r}, text={!r}, user={!r}, type={!r}, customer={!r})'.format(\n            self.id, self.text, self.user, self.note_type, self.customer\n        )\n\n    @classmethod\n    def from_document(cls, doc: Dict[str, Any]) -> 'Note':\n        return Note(\n            id=doc.get('id', None) or doc.get('_id'),\n            text=doc.get('text', None),\n            user=doc.get('user', None),\n            attributes=doc.get('attributes', dict()),\n            note_type=doc.get('type', None),\n            create_time=doc.get('createTime'),\n            update_time=doc.get('updateTime'),\n            alert=doc.get('alert'),\n            customer=doc.get('customer')\n        )\n\n    @classmethod\n    def from_record(cls, rec) -> 'Note':\n        return Note(\n            id=rec.id,\n            text=rec.text,\n            user=rec.user,\n            attributes=dict(rec.attributes),\n            note_type=rec.type,\n            create_time=rec.create_time,\n            update_time=rec.update_time,\n            alert=rec.alert,\n            customer=rec.customer\n        )\n\n    @classmethod\n    def from_db(cls, r: Union[Dict, Tuple]) -> 'Note':\n        if isinstance(r, dict):\n            return cls.from_document(r)\n        elif isinstance(r, tuple):\n            return cls.from_record(r)\n\n    def create(self) -> 'Note':\n        return Note.from_db(db.create_note(self))\n\n    @staticmethod\n    def from_alert(alert, text):\n        note = Note(\n            text=text,\n            user=g.login,\n            note_type=NoteType.alert,\n            attributes=dict(\n                resource=alert.resource,\n                event=alert.event,\n                environment=alert.environment,\n                severity=alert.severity,\n                status=alert.status\n            ),\n            alert=alert.id,\n            customer=alert.customer\n        )\n\n        history = History(\n            id=note.id,\n            event=alert.event,\n            severity=alert.severity,\n            status=alert.status,\n            value=alert.value,\n            text=text,\n            change_type=ChangeType.note,\n            update_time=datetime.utcnow(),\n            user=g.login\n        )\n        db.add_history(alert.id, history)\n        return note.create()\n\n    @staticmethod\n    def find_by_id(id: str) -> Optional['Note']:\n        return Note.from_db(db.get_note(id))\n\n    @staticmethod\n    def find_all(query: Query = None) -> List['Note']:\n        return [Note.from_db(note) for note in db.get_notes(query)]\n\n    def update(self, **kwargs) -> 'Note':\n        return Note.from_db(db.update_note(self.id, **kwargs))\n\n    def delete(self) -> bool:\n        return db.delete_note(self.id)\n"], "fixing_code": ["import sys\n\nimport ldap  # pylint: disable=import-error\nfrom flask import current_app, jsonify, request\nfrom flask_cors import cross_origin\n\nfrom alerta.auth.utils import create_token, get_customers\nfrom alerta.exceptions import ApiError\nfrom alerta.models.permission import Permission\nfrom alerta.models.user import User\nfrom alerta.utils.audit import auth_audit_trail\n\nfrom . import auth\n\n\n@auth.route('/auth/login', methods=['OPTIONS', 'POST'])\n@cross_origin(supports_credentials=True)\ndef login():\n    # Allow LDAP server to use a self signed certificate\n    if current_app.config['LDAP_ALLOW_SELF_SIGNED_CERT']:\n        ldap.set_option(ldap.OPT_X_TLS_REQUIRE_CERT, ldap.OPT_X_TLS_ALLOW)\n\n    # Retrieve required fields from client request\n    try:\n        login = request.json.get('username', None) or request.json['email']\n        password = request.json['password']\n    except KeyError:\n        raise ApiError(\"must supply 'username' and 'password'\", 401)\n\n    if not password:\n        raise ApiError('password not allowed to be empty', 401)\n\n    try:\n        if '\\\\' in login:\n            domain, username = login.split('\\\\')\n            email = ''\n            email_verified = False\n        else:\n            username, domain = login.split('@')\n            email = login\n            email_verified = True\n    except ValueError:\n        raise ApiError('expected username with domain', 401)\n\n    # Validate LDAP domain\n    if domain not in current_app.config['LDAP_DOMAINS']:\n        raise ApiError('unauthorized domain', 403)\n\n    userdn = current_app.config['LDAP_DOMAINS'][domain] % username\n\n    # Attempt LDAP AUTH\n    try:\n        trace_level = 2 if current_app.debug else 0\n        ldap_connection = ldap.initialize(current_app.config['LDAP_URL'], trace_level=trace_level)\n        ldap_connection.simple_bind_s(userdn, password)\n    except ldap.INVALID_CREDENTIALS:\n        raise ApiError('invalid username or password', 401)\n    except Exception as e:\n        raise ApiError(str(e), 500)\n\n    # Get email address from LDAP\n    if not email_verified:\n        try:\n            ldap_result = ldap_connection.search_s(userdn, ldap.SCOPE_SUBTREE, '(objectClass=*)', ['mail'])\n            email = ldap_result[0][1]['mail'][0].decode(sys.stdout.encoding)\n            email_verified = True\n        except Exception:\n            email = '{}@{}'.format(username, domain)\n\n    # Create user if not yet there\n    user = User.find_by_username(username=login)\n    if not user:\n        user = User(name=username, login=login, password='', email=email,\n                    roles=[], text='LDAP user', email_verified=email_verified)\n        try:\n            user = user.create()\n        except Exception as e:\n            ApiError(str(e), 500)\n\n    # Assign customers & update last login time\n    groups = list()\n    try:\n        groups_filters = current_app.config.get('LDAP_DOMAINS_GROUP', {})\n        base_dns = current_app.config.get('LDAP_DOMAINS_BASEDN', {})\n        if domain in groups_filters and domain in base_dns:\n            resultID = ldap_connection.search(\n                base_dns[domain],\n                ldap.SCOPE_SUBTREE,\n                groups_filters[domain].format(username=username, email=email, userdn=userdn),\n                ['cn']\n            )\n            resultTypes, results = ldap_connection.result(resultID)\n            for _dn, attributes in results:\n                groups.append(attributes['cn'][0].decode('utf-8'))\n    except ldap.LDAPError as e:\n        raise ApiError(str(e), 500)\n\n    # Check user is active\n    if user.status != 'active':\n        raise ApiError('User {} not active'.format(login), 403)\n    user.update_last_login()\n\n    scopes = Permission.lookup(login=login, roles=user.roles + groups)\n    customers = get_customers(login=login, groups=[user.domain] + groups)\n\n    auth_audit_trail.send(current_app._get_current_object(), event='basic-ldap-login', message='user login via LDAP',\n                          user=login, customers=customers, scopes=scopes, roles=user.roles, groups=groups,\n                          resource_id=user.id, type='user', request=request)\n\n    # Generate token\n    token = create_token(user_id=user.id, name=user.name, login=user.email, provider='ldap',\n                         customers=customers, scopes=scopes, roles=user.roles, groups=groups,\n                         email=user.email, email_verified=user.email_verified)\n    return jsonify(token=token.tokenize)\n", "from datetime import datetime\nfrom typing import Any, Dict, List, Optional, Tuple, Union\nfrom uuid import uuid4\n\nfrom flask import g\n\nfrom alerta.app import db\nfrom alerta.database.base import Query\nfrom alerta.models.enums import ChangeType, NoteType\nfrom alerta.models.history import History\nfrom alerta.utils.format import DateTime\nfrom alerta.utils.response import absolute_url\n\nJSON = Dict[str, Any]\n\n\nclass Note:\n\n    def __init__(self, text: str, user: str, note_type: str, **kwargs) -> None:\n\n        self.id = kwargs.get('id') or str(uuid4())\n        self.text = text\n        self.user = user\n        self.note_type = note_type\n        self.attributes = kwargs.get('attributes', None) or dict()\n        self.create_time = kwargs['create_time'] if 'create_time' in kwargs else datetime.utcnow()\n        self.update_time = kwargs.get('update_time')\n        self.alert = kwargs.get('alert')\n        self.customer = kwargs.get('customer')\n\n    @classmethod\n    def parse(cls, json: JSON) -> 'Note':\n        return Note(\n            id=json.get('id', None),\n            text=json.get('status', None),\n            user=json.get('status', None),\n            attributes=json.get('attributes', dict()),\n            note_type=json.get('type', None),\n            create_time=DateTime.parse(json['createTime']) if 'createTime' in json else None,\n            update_time=DateTime.parse(json['updateTime']) if 'updateTime' in json else None,\n            alert=json.get('related', {}).get('alert'),\n            customer=json.get('customer', None)\n        )\n\n    @property\n    def serialize(self) -> Dict[str, Any]:\n        note = {\n            'id': self.id,\n            'href': absolute_url('/note/' + self.id),\n            'text': self.text,\n            'user': self.user,\n            'attributes': self.attributes,\n            'type': self.note_type,\n            'createTime': self.create_time,\n            'updateTime': self.update_time,\n            '_links': dict(),\n            'customer': self.customer\n        }  # type: Dict[str, Any]\n        if self.alert:\n            note['_links'] = {\n                'alert': absolute_url('/alert/' + self.alert)\n            }\n        return note\n\n    def __repr__(self) -> str:\n        return 'Note(id={!r}, text={!r}, user={!r}, type={!r}, customer={!r})'.format(\n            self.id, self.text, self.user, self.note_type, self.customer\n        )\n\n    @classmethod\n    def from_document(cls, doc: Dict[str, Any]) -> 'Note':\n        return Note(\n            id=doc.get('id', None) or doc.get('_id'),\n            text=doc.get('text', None),\n            user=doc.get('user', None),\n            attributes=doc.get('attributes', dict()),\n            note_type=doc.get('type', None),\n            create_time=doc.get('createTime'),\n            update_time=doc.get('updateTime'),\n            alert=doc.get('alert'),\n            customer=doc.get('customer')\n        )\n\n    @classmethod\n    def from_record(cls, rec) -> 'Note':\n        return Note(\n            id=rec.id,\n            text=rec.text,\n            user=rec.user,\n            attributes=dict(rec.attributes),\n            note_type=rec.type,\n            create_time=rec.create_time,\n            update_time=rec.update_time,\n            alert=rec.alert,\n            customer=rec.customer\n        )\n\n    @classmethod\n    def from_db(cls, r: Union[Dict, Tuple]) -> 'Note':\n        if isinstance(r, dict):\n            return cls.from_document(r)\n        elif isinstance(r, tuple):\n            return cls.from_record(r)\n\n    def create(self) -> 'Note':\n        return Note.from_db(db.create_note(self))\n\n    @staticmethod\n    def from_alert(alert, text):\n        note = Note(\n            text=text,\n            user=g.login,\n            note_type=NoteType.alert,\n            attributes=dict(\n                resource=alert.resource,\n                event=alert.event,\n                environment=alert.environment,\n                severity=alert.severity,\n                status=alert.status\n            ),\n            alert=alert.id,\n            customer=alert.customer\n        )\n\n        history = History(\n            id=note.id,\n            event=alert.event,\n            severity=alert.severity,\n            status=alert.status,\n            value=alert.value,\n            text=text,\n            change_type=ChangeType.note,\n            update_time=datetime.utcnow(),\n            user=g.login\n        )\n        db.add_history(alert.id, history)\n        return note.create()\n\n    @staticmethod\n    def find_by_id(id: str) -> Optional['Note']:\n        return Note.from_db(db.get_note(id))\n\n    @staticmethod\n    def find_all(query: Query = None) -> List['Note']:\n        return [Note.from_db(note) for note in db.get_notes(query)]\n\n    def update(self, **kwargs) -> 'Note':\n        return Note.from_db(db.update_note(self.id, **kwargs))\n\n    def delete(self) -> bool:\n        return db.delete_note(self.id)\n"], "filenames": ["alerta/auth/basic_ldap.py", "alerta/models/note.py"], "buggy_code_start_loc": [28, 58], "buggy_code_end_loc": [28, 59], "fixing_code_start_loc": [29, 58], "fixing_code_end_loc": [32, 59], "type": "CWE-287", "message": "In Alerta before version 8.1.0, users may be able to bypass LDAP authentication if they provide an empty password when Alerta server is configure to use LDAP as the authorization provider. Only deployments where LDAP servers are configured to allow unauthenticated authentication mechanism for anonymous authorization are affected. A fix has been implemented in version 8.1.0 that returns HTTP 401 Unauthorized response for any authentication attempts where the password field is empty. As a workaround LDAP administrators can disallow unauthenticated bind requests by clients.", "other": {"cve": {"id": "CVE-2020-26214", "sourceIdentifier": "security-advisories@github.com", "published": "2020-11-06T18:15:12.437", "lastModified": "2020-11-17T21:08:55.013", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In Alerta before version 8.1.0, users may be able to bypass LDAP authentication if they provide an empty password when Alerta server is configure to use LDAP as the authorization provider. Only deployments where LDAP servers are configured to allow unauthenticated authentication mechanism for anonymous authorization are affected. A fix has been implemented in version 8.1.0 that returns HTTP 401 Unauthorized response for any authentication attempts where the password field is empty. As a workaround LDAP administrators can disallow unauthenticated bind requests by clients."}, {"lang": "es", "value": "En Alerta versiones anteriores a 8.1.0, los usuarios pueden ser capaces de omitir la autenticaci\u00f3n LDAP si proporcionan una contrase\u00f1a vac\u00eda cuando el servidor de Alerta est\u00e1 configurado para usar LDAP como proveedor de autorizaci\u00f3n.&#xa0;Solo est\u00e1n afectadas las implementaciones en las que los servidores LDAP est\u00e1n configurados para permitir un mecanismo de autenticaci\u00f3n no autenticado para la autorizaci\u00f3n an\u00f3nima.&#xa0;Una correcci\u00f3n ha sido implementada en la versi\u00f3n 8.1.0, que devuelve una respuesta HTTP 401 no autorizada para cualquier intento de autenticaci\u00f3n donde el campo de contrase\u00f1a est\u00e1 vac\u00edo.&#xa0;Como soluci\u00f3n alternativa, los administradores de LDAP pueden rechazar las peticiones de vinculaci\u00f3n no autenticadas de los clientes"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 9.1, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.2}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 7.5}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-287"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:alerta_project:alerta:*:*:*:*:*:*:*:*", "versionEndExcluding": "7.5.7", "matchCriteriaId": "2C53AE9D-6FD9-4608-BD7E-9AF7088726E6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:alerta_project:alerta:*:*:*:*:*:*:*:*", "versionStartIncluding": "8.0.0", "versionEndExcluding": "8.1.0", "matchCriteriaId": "C22E7117-7A0F-4B6C-A0D7-717D92653221"}]}]}], "references": [{"url": "https://github.com/alerta/alerta/commit/2bfa31779a4c9df2fa68fa4d0c5c909698c5ef65", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/alerta/alerta/issues/1277", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/alerta/alerta/pull/1345", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://github.com/alerta/alerta/security/advisories/GHSA-5hmm-x8q8-w5jh", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://pypi.org/project/alerta-server/8.1.0/", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://tools.ietf.org/html/rfc4513#section-5.1.2", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/alerta/alerta/commit/2bfa31779a4c9df2fa68fa4d0c5c909698c5ef65"}}