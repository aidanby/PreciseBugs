{"buggy_code": ["<?php\n/*\n    part-db version 0.1\n    Copyright (C) 2005 Christoph Lechner\n    http://www.cl-projects.de/\n\n    part-db version 0.2+\n    Copyright (C) 2009 K. Jacobs and others (see authors.php)\n    http://code.google.com/p/part-db/\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n*/\n\n/**\n * @file lib.php\n * @brief Miscellaneous, global Functions\n * @author kami89\n */\n\nuse PartDB\\Interfaces\\IAPIModel;\nuse PartDB\\Part;\nuse PartDB\\Permissions\\PartPermission;\nuse PartDB\\Permissions\\PermissionManager;\nuse PartDB\\Permissions\\StructuralPermission;\nuse PartDB\\Permissions\\ToolsPermission;\nuse PartDB\\Tools\\JSONStorage;\nuse PartDB\\User;\n\nuse geertw\\IpAnonymizer\\IpAnonymizer;\n\n/**\n * check if a given number is odd\n *\n * @param integer $number       A number\n *\n * @return boolean\n * * true if the number is odd\n * * false if the number is even\n */\nfunction isOdd($number)\n{\n    return ($number & 1) ? true : false; // false = even, true = odd\n}\n\n/**\n * Get the Git branch name of the installed system\n *\n * @return  string|null       The current git branch name. Null, if this is no Git installation\n *\n * @throws Exception if there was an error\n */\nfunction getGitBranchName()\n{\n    if (file_exists(BASE.'/.git/HEAD')) {\n        $git = File(BASE.'/.git/HEAD');\n        $head = explode(\"/\", $git[0], 3);\n        $branch = trim($head[2]);\n        return $branch;\n    }\n\n    return null; // this is not a Git installation\n}\n\n/**\n * Get hash of the last git commit (on remote \"origin\"!)\n *\n * @note    If this method does not work, try to make a \"git pull\" first!\n *\n * @param integer $length       if this is smaller than 40, only the first $length characters will be returned\n *\n * @return string|null       The hash of the last commit, null If this is no Git installation\n *\n * @throws Exception if there was an error\n */\nfunction getGitCommitHash($length = 40)\n{\n    $filename = BASE.'/.git/refs/remotes/origin/'.getGitBranchName();\n\n    if (file_exists($filename)) {\n        $head = File($filename);\n        $hash = $head[0];\n        return substr($hash, 0, $length);\n    }\n\n    return null; // this is not a Git installation\n}\n\n\nfunction treeviewNode($name, $href = null, $nodes = null, $icon = null)\n{\n    $ret = array('text' => $name);\n\n    if (isset($href)) {\n        $ret['href'] = $href;\n    } else {\n        $ret['selectable'] = false;\n    }\n\n    if (isset($nodes)) {\n        $ret['nodes'] = $nodes;\n    }\n\n    if (isset($icon)) {\n        $ret['icon'] = $icon;\n    }\n\n    return $ret;\n}\n\n/**\n * List all files (or all files with a specific string in the filename) in a directory\n *\n * @note This function is not case sensitive.\n *\n * @param string    $directory          Path to the directory (IMPORTANT: absolute UNIX path, with slash at the end! see to_unix_path())\n * @param boolean   $recursive          If true, the file search is recursive\n * @param string    $search_string      If this is a non-empty string, only files with\n *                                      that substring in the filename will be returned.\n *\n * @return string[]    all found filenames (incl. absolute UNIX paths, sorted alphabetically)\n *\n * @throws Exception if there was an error\n */\nfunction findAllFiles($directory, $recursive = false, $search_string = '')\n{\n    $files = array();\n\n    if ((! is_dir($directory)) || (mb_substr($directory, -1, 1) != '/') || (! isPathabsoluteAndUnix($directory, false))) {\n        throw new Exception(sprintf(_('\"%s\" ist kein g\u00fcltiges Verzeichnis!'), $directory));\n    }\n\n    $dirfiles = scandir($directory);\n    foreach ($dirfiles as $file) {\n        if (($file != \".\") && ($file != \"..\") && ($file != \".svn\") && ($file != \".git\") && ($file != \".gitignore\") && ($file != \".htaccess\")) {\n            if (is_dir($directory.$file)) {\n                if ($recursive) {\n                    $files = array_merge($files, findAllFiles($directory.$file.'/', true, $search_string));\n                }\n            } elseif (($search_string == '') || (mb_substr_count(mb_strtolower($file), mb_strtolower($search_string)) > 0)) {\n                $files[] = $directory.$file;\n            }\n        }\n    }\n\n    return $files;\n}\n\n/**\n * Find all subdirectories of a directory (not recursive)\n *\n * @param string    $directory          Path to the directory (IMPORTANT: absolute UNIX path, with slash at the end! see to_unix_path())\n * @param boolean   $recursive          if true, all subdirectories will be listed too\n *\n * @return string[] all found directories (without slashes at the end, incl. absolute UNIX paths, sorted alphabetically)\n *\n * @throws Exception if there was an error\n */\nfunction findAllDirectories($directory, $recursive = false)\n{\n    $directories = array();\n\n    if ((! is_dir($directory)) || (mb_substr($directory, -1, 1) != '/') || (! isPathabsoluteAndUnix($directory, false))) {\n        throw new Exception(sprintf(_('\"%s\" ist kein g\u00fcltiges Verzeichnis!'), $directory));\n    }\n\n    $dirfiles = scandir($directory);\n    foreach ($dirfiles as $file) {\n        if (($file != \".\") && ($file != \"..\") && ($file != \".svn\") && ($file != \".git\") && (is_dir($directory.$file))) {\n            $directories[] = $directory.$file;\n            if ($recursive) {\n                $directories = array_merge($directories, findAllDirectories($directory.$file.'/', true));\n            }\n        }\n    }\n\n    return $directories;\n}\n\n/**\n * Send a file to the client (download file)\n *\n * @warning     This function must be called before there was any HTML output!\n *\n * @param string $filename      The full path to the filename\n * @param string $mimetype      * The mime type of the file\n * * if NULL, we will try to read the mimetype from the file\n */\nfunction sendFile($filename, $mimetype = null)\n{\n    $mtime = ($mtime = filemtime($filename)) ? $mtime : time();\n\n    if (strstr($_SERVER[\"HTTP_USER_AGENT\"], \"MSIE\") != false) {\n        header(\"Content-Disposition: attachment; filename=\".urlencode(basename($filename)).\"; modification-date=\".date('r', $mtime).\";\");\n    } else {\n        header(\"Content-Disposition: attachment; filename=\\\"\".basename($filename).\"\\\"; modification-date=\\\"\".date('r', $mtime).\"\\\";\");\n    }\n\n    if ($mimetype == null) {\n        $mimetype = getMimetype($filename);\n    } // lib.functions.php\n\n    header(\"Content-Type: \".$mimetype);\n    header(\"Content-Length:\". filesize($filename));\n\n    if (in_array('mod_xsendfile', apache_get_modules())) {\n        header('X-Sendfile: '.$filename);\n    } else {\n        readfile($filename);\n    }\n\n    exit;\n}\n\n/**\n * The same as \"send_file()\", but with a string instead of a file on the disk (e.g. for XML and CSV)\n *\n * @warning     This function must be called before there was any HTML output!\n *\n * @param string $content       The content of the file which the user wants to download\n * @param string $filename      The name of the file which is displayed in the user's browser\n * @param string $mimetype      The mime type of the file\n */\nfunction sendString($content, $filename, $mimetype)\n{\n    $mtime = time();\n\n    if (strstr($_SERVER[\"HTTP_USER_AGENT\"], \"MSIE\") != false) {\n        header(\"Content-Disposition: attachment; filename=\".urlencode($filename).\"; modification-date=\".date('r', $mtime).\";\");\n    } else {\n        header(\"Content-Disposition: attachment; filename=\\\"\".$filename.\"\\\"; modification-date=\\\"\".date('r', $mtime).\"\\\";\");\n    }\n\n    header(\"Content-Type: \".$mimetype);\n    header(\"Content-Length:\". strlen($content));\n\n    echo $content;\n    exit;\n}\n\n/**\n * Upload a file (from \"<input type=\"file\">) to a directory on the server\n *\n * @param array         $file_array                 The file array, for example $_FILES['my_file']\n * @param string        $destination_directory      The directory where the file should be saved.\n *                                                  IMPORTANT: there must be a slash at the end!\n *                                                  Example: BASE.'/data/media/'\n * @param string|NULL   $destination_filename       The destination filename (without path).\n *                                                  NULL means same filename like the uploaded file.\n *\n * @return string   the (absolute) filename of the uploaded file (the destination, not the source)\n *\n * @throws Exception if the destination file exists already\n * @throws Exception if there was an error\n */\nfunction uploadFile($file_array, $destination_directory, $destination_filename = null)\n{\n    if ((! isset($file_array['name'])) || (! isset($file_array['tmp_name'])) || (! isset($file_array['error']))) {\n        throw new Exception(_('Ung\u00fcltiges Array \u00fcbergeben!'));\n    }\n\n    //Dont allow to upload a PHP file.\n    if(strpos($file_array['name'], \".php\") != false\n        || strpos($destination_filename, \".php\") != false)\n    {\n        throw new \\Exception(_(\"Es ist nicht erlaubt PHP Dateien hochzuladen!\"));\n    }\n\n    if ($destination_filename == null) {\n        $destination_filename = $file_array['name'];\n    }\n\n    $destination = $destination_directory.$destination_filename;\n\n    if ((mb_substr($destination_directory, -1, 1) != '/') || (! isPathabsoluteAndUnix($destination_directory, false))) {\n        throw new Exception(sprintf(_('\"%s\" ist kein g\u00fcltiges Verzeichnis!'), $destination_directory));\n    }\n\n    try {\n        createPath($destination_directory);\n    } catch (Exception $ex) {\n        throw new Exception(_(\"Das Verzeichniss konnte nicht angelegt werden!\"));\n    }\n\n    if (! is_writable($destination_directory)) {\n        throw new Exception(_('Sie haben keine Schreibrechte im Verzeichnis \"').$destination_directory.'\"!');\n    }\n\n    if (file_exists($destination)) {\n        // there is already a file with the same filename, check if it is exactly the same file\n        $new_file_md5 = md5_file($file_array['tmp_name']);\n        $existing_file_md5 = md5_file($destination);\n\n        if (($new_file_md5 == $existing_file_md5) && ($new_file_md5 != false)) {\n            return $destination;\n        } // it's exactly the same file, we don't need to upload it again, re-use it!\n\n        throw new Exception(_('Es existiert bereits eine Datei mit dem Dateinamen \"').$destination.'\"!');\n    }\n\n    switch ($file_array['error']) {\n        case UPLOAD_ERR_OK:\n            // all OK, upload was successfully\n            break;\n        case UPLOAD_ERR_INI_SIZE:\n            throw new Exception(_('Die maximal m\u00f6gliche Dateigr\u00f6sse f\u00fcr Uploads wurde \u00fcberschritten (\"upload_max_filesize\" in \"php.ini\")! ').\n                '<a target=\"_blank\" href=\"'._(\"https://github.com/Part-DB/Part-DB/wiki/Anforderungen\").'>'._(\"Hilfe\").'</a>');\n        case UPLOAD_ERR_FORM_SIZE:\n            throw new Exception(_('Die maximal m\u00f6gliche Dateigr\u00f6sse f\u00fcr Uploads wurde \u00fcberschritten!'));\n        case UPLOAD_ERR_PARTIAL:\n            throw new Exception(_('Die Datei wurde nur teilweise hochgeladen!'));\n        case UPLOAD_ERR_NO_FILE:\n            throw new Exception(_('Es wurde keine Datei hochgeladen!'));\n        case UPLOAD_ERR_NO_TMP_DIR:\n            throw new Exception(_('Es gibt keinen tempor\u00e4ren Ordner f\u00fcr hochgeladene Dateien!'));\n        case UPLOAD_ERR_CANT_WRITE:\n            throw new Exception(_('Das Speichern der Datei auf die Festplatte ist fehlgeschlagen!'));\n        case UPLOAD_ERR_EXTENSION:\n            throw new Exception(_('Eine PHP Erweiterung hat den Upload der Datei gestoppt!'));\n        default:\n            throw new Exception(_('Beim Hochladen der Datei trat ein unbekannter Fehler auf!'));\n    }\n\n    if (! move_uploaded_file($file_array['tmp_name'], $destination)) {\n        throw new Exception(_('Beim Hochladen der Datei trat ein unbekannter Fehler auf!'));\n    }\n\n    return $destination;\n}\n\n/**\n * Set a password for the \"admin\" password that will be written into, the database, when DB will be created.\n * This function should be only used in install.php !!\n *\n * @note    The password will be trimmed, salted, crypted with sha256 and stored in $config.\n *          Optionally, $config can be written in config.php.\n *\n * @param string    $new_password_1     The new administrator password (plain, not crypted) (first time)\n * @param string    $new_password_2     The new administrator password (plain, not crypted) (second time)\n * @param boolean   $save_config        If true, the config.php file will be overwritten.\n *                                      If false, the new password will be stored in $config,\n *                                      but you must manually save the $config with save_config()!\n *\n * @throws Exception    if the old password is not correct\n * @throws Exception    if the new password is not allowed (maybe empty)\n * @throws Exception    if the new passworts are different\n * @throws Exception    if $config could not be saved in config.php\n */\nfunction setTempAdminPassword($new_password_1, $new_password_2, $save_config = true)\n{\n    global $config;\n\n    settype($old_password, 'string');\n    settype($new_password_1, 'string');\n    settype($new_password_2, 'string');\n    $new_password_1 = trim($new_password_1);\n    $new_password_2 = trim($new_password_2);\n\n    if (mb_strlen($new_password_1) < 6) {\n        throw new Exception(_('Das neue Passwort muss mindestens 6 Zeichen lang sein!'));\n    }\n\n    if ($new_password_1 !== $new_password_2) {\n        throw new Exception(_('Die neuen Passw\u00f6rter stimmen nicht \u00fcberein!'));\n    }\n\n    // all ok, save the new password\n    $config['admin']['tmp_password'] = password_hash($new_password_1, PASSWORD_DEFAULT);\n\n    if ($save_config) {\n        saveConfig();\n    }\n}\n\n/**\n * Save the global array \"$config\" to the file \"config.php\"\n *\n * @throws Exception if there was an error (maybe not enought permissions)\n */\nfunction saveConfig()\n{\n    if ((file_exists(BASE.'/data/config.php')) && (! is_writeable(BASE.'/data/config.php'))) {\n        throw new Exception(_('Es sind nicht gen\u00fcgend Rechte vorhanden um die Datei \"config.php\" zu beschreiben!'));\n    }\n\n    global $config;\n    global $config_defaults;\n    global $manual_config;\n\n    // set config version to the latest one\n    $config['system']['current_config_version'] = $config['system']['latest_config_version'];\n\n    $content = \"<?php\\n\\n\";\n    $content .= arrayToPhpLines($config_defaults, $config, '    $config', false);\n    $content .= \"\\n    //How to declare manual configs:\\n\";\n    $content .= '    //$manual_config[\\'money_format\\'][\\'POSIX\\']                = \\'%!n \u20ac\\';'.\"\\n\";\n    $content .= '    //$manual_config[\\'DOCUMENT_ROOT\\']                        = \\'/var/www\\';'.\"\\n\";\n    $content .= arrayToPhpLines($manual_config, $manual_config, '    $manual_config', false);\n    $content .= \"\\n\";\n\n    if (! ($fp = fopen(BASE.'/data/config.php', 'wb'))) {\n        throw new Exception(_('Die Datei \"config.php\" konnte nicht beschrieben werden. \u00dcberpr\u00fcfen Sie, ob gen\u00fcgend Rechte vorhanden sind.'));\n    }\n\n    if (! fwrite($fp, $content)) {\n        throw new Exception(_('Die Datei \"config.php\" konnte nicht beschrieben werden. \u00dcberpr\u00fcfen Sie, ob gen\u00fcgend Rechte vorhanden sind.'));\n    }\n\n    if (! fclose($fp)) {\n        throw new Exception(_('Es gab ein Fehler beim Abschliessen der Schreibvorgangs bei der Datei \"config.php\".'));\n    }\n}\n\n/**\n * @brief For save_config()\n */\nfunction arrayToPhpLines(&$array_defaults, &$array, $path, $ignore_defaults)\n{\n    $lines = '';\n    foreach ($array_defaults as $key => $value) {\n        if (isset($array[$key])) {\n            $full_path = $path.'['.var_export($key, true).']';\n            if (is_array($value)) {\n                $lines .= arrayToPhpLines($array_defaults[$key], $array[$key], $full_path, $ignore_defaults);\n            } else {\n                if (($array[$key] !== $array_defaults[$key]) || (! $ignore_defaults)) {\n                    $space_count = max(60-mb_strlen($full_path), 0);\n                    $spaces = str_repeat(' ', $space_count);\n                    $lines .= $full_path.$spaces.' = '.var_export($array[$key], true).\";\\n\";\n                }\n            }\n        }\n    }\n    return $lines;\n}\n\n/**\n * Convert a float number to a formatted money string (with currency)\n *\n * @param float|NULL    $number     @li The price as a float number\n *                                  @li NULL if you mean \"there is no price\",\n *                                      then this function will return the string \"-\"\n * @param string        $language   @li language (locale) string, like \"de_DE\" or \"de_DE.utf-8\".\n *                                  @li an empty string means that we use the default language from $config\n *\n * @return string       The formatted money string\n */\nfunction floatToMoneyString($number, $language = '')\n{\n    if ($number === null) {\n        return '-';\n    }\n\n    // settype($number, 'float');\n\n    global $config;\n\n    if (strlen($language) == 0) {\n        $language = $config['language'];\n    }\n\n    if ($language != $config['language']) {\n        // change locale, because the $language is not the default language!\n        if (! ownSetlocale(LC_MONETARY, $language)) {\n            debug('error', 'Sprache \"'.$language.'\" kann nicht gesetzt werden!', __FILE__, __LINE__, __METHOD__);\n        }\n    }\n\n    // get the money format from config(_defaults).php\n    if (isset($config['money_format'][$language])) {\n        $format = $config['money_format'][$language];\n    } else {\n        // not set in config, so generate it\n        $locale = localeconv();\n        // number of digits used in current language\n        $local_digits = $locale['int_frac_digits'];\n        // digits of the number\n        $number_digits = ((int) $number != $number) ? (strlen($number) - strpos($number, $locale['decimal_point'])) - 1 : 0;\n\n        // international or local format?\n        $format_type = ($language == $config['language']) ? 'n' : 'i';\n\n        if ($number_digits > $local_digits) {\n            $n = $number_digits > 5 ? 5 : $number_digits;\n            $format = \"%.\" . $n . $format_type;\n        } else {\n            $format = '%' . $format_type;\n        }\n    }\n\n    $result = trim(money_format($format, $number));\n\n    if ($language != $config['language']) {\n        ownSetlocale(LC_MONETARY, $config['language']);\n    } // change locale back to default\n\n    return $result;\n}\n\n/**\n * Returns the Currency symbol for the configured locale.\n * @return string The currency symbol.\n */\nfunction getCurrencySymbol()\n{\n    global $config;\n    $language = $config['language'];\n\n    //User can override the currency symbol in config, we need to respect that...\n    if(isset($config['money_format'][$language])) {\n        return $config['money_format'][$language];\n    }\n\n  return localeconv()['currency_symbol'];\n}\n\n/**\n * Download a file from the internet (with \"curl\")\n *\n * @param string $url   The internet URL to the file\n *\n * @return string       The downloaded file\n *\n * @throws Exception if there was an error (maybe \"curl\" is not installed on the server)\n */\nfunction curlGetData($url)\n{\n    if (! extension_loaded('curl')) {\n        throw new Exception(_('\"curl\" scheint auf ihrem System nicht installiert zu sein! '.\n            \"\\nBitte installieren Sie das entsprechende Modul, \".\n            'oder es werden gewisse Funktionen nicht zur Verf\u00fcgung stehen.'));\n    }\n\n    $ch = curl_init();\n    $timeout = 5;\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);\n    $data = curl_exec($ch);\n    curl_close($ch);\n\n    if ($data === false) {\n        throw new Exception(_('Der Download mit \"curl\" lieferte kein Ergebnis!'));\n    }\n\n    return $data;\n}\n\n/**\n * Download a file from web to the server.\n * @param $url string The URL of the resource which should be downloaded.\n * @param $path string The path, where the file should be placed. (Must be absolute, unix style and end with a slash)\n * @param string $filename string Defaultly the filename of the new file gets determined from the url.\n *          However you can override the filename with this param.\n * @param $download_override boolean Set this to true, if you want to download a file, even when $config['allow_server_downloads'] is false.\n * @throws Exception Throws an exception if an error happened, or file could not be downloaded.\n * @return string|boolean The path of the created file, when the file was successful downloaded. False, when an error happened.\n */\nfunction downloadFile($url, $path, $filename = \"\", $download_override = false)\n{\n    global $config;\n    if ($config['allow_server_downloads'] == false && $download_override == false) {\n        throw new Exception(_(\"Das Herunterladen von Dateien \u00fcber den Server ist deaktiviert!\"));\n    }\n\n    if (!isPathabsoluteAndUnix($path)) {\n        throw new Exception(_('$path ist kein g\u00fcltiger und absoluter Pfad!'));\n    }\n    if (!isURL($url)) {\n        throw new Exception(_('$url ist keine g\u00fcltige URL'));\n    }\n    if ($filename == \"\") {\n        $parts = parse_url($url);\n        $filename = basename($parts['path']);\n    }\n\n    //Dont allow to upload a PHP file.\n    if(strpos($filename, \".php\") != false) {\n        throw new \\Exception(_(\"Es ist nicht erlaubt PHP Dateien herunterzuladen!\"));\n    }\n\n    set_time_limit(30);\n\n    createPath($path);\n\n    $ret = file_put_contents($path . $filename, fopen($url, 'r'));\n    if ($ret !== false) { //If download was successful\n        return $path . $filename;\n    }\n    return false;\n}\n\n/**\n * Get proposed filenames for an invalid filename\n *\n * If the user moves a file (e.g. in the media/ directory), the files will be found no longer.\n * To re-assign \"Attachement\"-objects (see \"Attachement.php\") with the missing file,\n * this function is needed. You can pass the old filename, and you will get\n * proposed filenames. Maybe the original file can be found again this way.\n *\n * @param string $missing_filename      The filename of the missing file (absolute UNIX path from filesystem root [only slashes]!!)\n * @param array  $available_files       An array of absolute UNIX filenames with all available files.\n *                                      This function will search for proposed filenames in this array.\n *\n * @return string[]      * All proposed filenames as an array of strings (absolute UNIX filenames)\n * * Best matches are at the beginning of the array,\n *                          worst matches are at the end of the array\n */\nfunction getProposedFilenames($missing_filename, $available_files)\n{\n    $filenames = array();\n    $filenames_tmp = array();\n\n    foreach ($available_files as $filename) {\n        if (mb_substr_count(mb_strtolower($filename), mb_strtolower(basename($missing_filename))) > 0) {\n            $filenames_tmp[] = $filename;\n        }\n    }\n\n    // remove duplicates, sort $filenames\n    $filenames_tmp = array_unique($filenames_tmp);\n    sort($filenames_tmp);\n\n    // move best matches to top\n    foreach ($filenames_tmp as $key => $filename) {\n        if (basename($filename) == basename($missing_filename)) {\n            $filenames[] = $filename;\n            unset($filenames_tmp[$key]);\n        }\n    }\n    foreach ($filenames_tmp as $key => $filename) {\n        if (pathinfo($filename, PATHINFO_FILENAME) == pathinfo($missing_filename, PATHINFO_FILENAME)) {\n            $filenames[] = $filename;\n            unset($filenames_tmp[$key]);\n        }\n    }\n    foreach ($filenames_tmp as $key => $filename) {\n        $filenames[] = $filename;\n    }\n\n    return $filenames;\n}\n\n/**\n * Build a simple template loop array with an array of values and a selected value\n *\n * @note    Have a look at system_config.php, there you can see how this function works.\n *\n * @param array $array              A simple array with keys and values\n * @param mixed $selected_value     The value of the selected item\n *\n * @return array        The template loop array\n */\nfunction arrayToTemplateLoop($array, $selected_value = null)\n{\n    $loop = array();\n    foreach ($array as $key => $value) {\n        $loop[] = array('value' => $key, 'text' => $value, 'selected' => ($key == $selected_value));\n    }\n    return $loop;\n}\n\n/**\n * Convert a Windows file path (with backslashes) to an UNIX path (with slashes)\n *\n * @note    If you pass a UNIX path, this function will return that path without any changes.\n *\n * @param string $path      a Windows or UNIX path\n *\n * @return string           the UNIX path\n */\nfunction toUnixPath($path)\n{\n    return str_replace('\\\\', '/', trim($path)); // replace all \"\\\" with \"/\"\n}\n\n/**\n * Check if a path is absolute UNIX path (begins with filesystem root and has no backslashes)\n *\n * @param string $path                  a UNIX path\n * @param boolean $accept_protocols     if true, protocols like http:// or ftp:// are interpreted as valid, absolute UNIX paths\n *\n * @return boolean          * true if the path is (maybe) absolute (we cannot say it with 100% probability) and UNIX style\n * * false if the path is definitive not absolute or definitive not an UNIX path\n * * if $path is an empty string, this function will return \"false\"\n */\nfunction isPathabsoluteAndUnix($path, $accept_protocols = true)\n{\n    if (mb_strpos($path, '\\\\') !== false) { // $path contains backslashes -> it's not a UNIX path\n        return false;\n    }\n\n    //Dont check if DOCUMENT_ROOT or BASE_RELATIVE are empty, so we dont get a warning about missing delimiter\n    if (defined(DOCUMENT_ROOT) && mb_strpos($path, DOCUMENT_ROOT) === 0) { // $path begins with DOCUMENT_ROOT\n        return true;\n    }\n\n    if (defined(BASE_RELATIVE) && mb_strpos($path, BASE_RELATIVE) === 0) { // $path begins with BASE_RELATIVE\n        return false;\n    }\n\n    if ((mb_strpos($path, '://') !== false) && ($accept_protocols)) { // there is a protocol in $path, like http://, ftp://, ...\n        return true;\n    }\n\n    if (DIRECTORY_SEPARATOR == '/') {\n        // for UNIX/Linux\n\n        if (mb_strpos($path, '/') !== 0) { // $path does not begin with a slash\n            return false;\n        } else {\n            return true;\n        } // we are not sure; maybe $path is absolute, maybe not...\n    } else {\n        // for Windows\n\n        if (mb_strpos($path, ':/') === 1) { // there is something like C:/ at the begin of $path\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n/**\n * Split a search string with search modifiers like \"incategory:Category1\" or \"inname:Name2\" into a array with\n * the modifier keywords in named elemets.\n *\n * @param $search_str string             the search containing the search modifiers.\n *\n * @return array            * an array with the elements name, description, comment, footprint, category,\n *                          storelocation, suppliername, partnr and manufacturername. Element is \"\" when no modifier for\n *                          this element was given.\n * * if $search_str does not contain any search modifier, then every element of the array\n *                          will contain the original search string.\n */\nfunction searchStringToArray($search_str)\n{\n    $arr = array();\n    $arr['name'] = getKeywordAfterModifier($search_str, \"inname:\");\n\n    $arr['description'] = getKeywordAfterModifier($search_str, \"indescription:\");\n    $arr['description'] = getKeywordAfterModifier($search_str, \"indesc:\");\n\n    $arr['comment'] = getKeywordAfterModifier($search_str, \"incomment:\");\n\n    $arr['footprint'] = getKeywordAfterModifier($search_str, \"infootprint:\");\n    $arr['footprint'] = getKeywordAfterModifier($search_str, \"infoot:\");\n\n    $arr['category'] = getKeywordAfterModifier($search_str, \"incategory:\");\n    $arr['category'] = getKeywordAfterModifier($search_str, \"incat:\");\n\n    $arr['storelocation'] = getKeywordAfterModifier($search_str, \"inlocation:\");\n    $arr['storelocation'] = getKeywordAfterModifier($search_str, \"inloc:\");\n\n    $arr['suppliername'] = getKeywordAfterModifier($search_str, \"insupplier:\");\n\n    $arr['partnr'] = getKeywordAfterModifier($search_str, \"inpartnr:\");\n\n    $arr['manufacturername'] = getKeywordAfterModifier($search_str, \"inmanufacturer:\");\n\n    //Check if all array entries are \"\", which means $search_str contains no modifier\n    $no_modifier = true;\n    foreach ($arr as $n) {\n        if ($n !== \"\") {\n            $no_modifier = false;\n        }\n    }\n\n    if ($no_modifier === true) {    //When no modifier exists, fill every element with $search_str (emulate the old behaviour)\n        foreach ($arr as &$n) {\n            $n = $search_str;\n        }\n    }\n\n    return $arr;\n}\n\n/***\n * Returns the keyword after a search modifier.(e.g. \"inname:Test\" with the modifier inname: would return \"Test\")\n * @param $search_str string The string which contains the modifiers and keywords.\n * @param $modifier  string The modifier which should be searched for\n * @return string Return the keyword after the modifier, if it was found. Else returns \"\".\n */\nfunction getKeywordAfterModifier($search_str, $modifier)\n{\n    $pos = strpos($search_str, $modifier);\n    if ($pos === false) {   //This modifier was not found in the search_str, so return \"\".\n        return \"\";\n    } else { //Modifier was found in the search string\n        $start = $pos + strlen($modifier);\n        if ($search_str[$start] == \"\\\"\" || $search_str[$start] == \"\\'\") { //When a quote mark is detected, then treat the text up to the next quote as one literal\n            $end = strpos($search_str, $search_str[$start], $start + 1);\n            return substr($search_str, $start + 1, $end - $start - 1);\n        } else { //Go only to the next space\n            $end = strpos($search_str, \" \", $start);\n            if ($end === false) { //The modifier was the last part of the query, so we dont need an end.\n                return substr($search_str, $start);\n            } else {\n                return substr($search_str, $start, $end - $start);\n            }\n        }\n    }\n}\n\n/**\n * Allow the usage of umlauts in the given pattern\n * @param $pattern string\n * @return string\n */\nfunction regexAllowUmlauts($pattern)\n{\n    return str_replace(\"\\w\", '[\\w\u00c4\u00e4\u00d6\u00f6\u00dc\u00fc\u00df]', $pattern);\n}\n\nfunction regexStripSlashes($pattern, $mb = true)\n{\n    if (mb_substr($pattern, 0, 1) === \"/\" &&  substr($pattern, -1, 1) === \"/\") {\n        return mb_substr($pattern, 1, -1);\n    } else {\n        return $pattern;\n    }\n}\n\n\n/**\n * Generates a <input type=\"hidden\"> Html string, with the given values.\n * @param $name  string The \"name\" attribute of the <input> element\n * @param $value string The \"value\" attribute of the <input> element\n * @return string The HTML string.\n */\nfunction generateInputHidden($name, $value = \"\")\n{\n    return '<input type=\"hidden\" name=\"' . $name . '\" value=\"' . $value . '\">';\n}\n\nfunction generateButton($name, $text, $theme = \"btn-secondary\", $val = \"\")\n{\n    return \"<button type='submit' class='btn $theme' name='$name' value='$val'>$text</button>\";\n}\n\nfunction generateButtonRed($name, $text, $theme = \"btn-danger\", $val = \"\")\n{\n    return generateButton($name, $text, $theme, $val);\n}\n\n/**\n * Checks if a string contains a specific substring\n * @param $haystack string The string which should be examined.\n * @param $needle string The string which should be searched.\n * @return bool True if $haystack contains $needle, else false.\n */\nfunction strcontains($haystack, $needle)\n{\n    if (strpos($haystack, $needle) !== false) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Converts an array of objects implementing the APIModel interface to an array of API objects\n * @param $array array The array of the APIModel objects.\n * @param bool $verbose Show all available informations about the IAPIModel.\n * @return IAPIModel[] An array of API objects\n * @throws Exception\n */\nfunction convertAPIModelArray($array, $verbose = false)\n{\n    if (is_null($array)) {\n        return null;\n    }\n\n    $json = array();\n    foreach ($array as $element) {\n        if (! $element instanceof IAPIModel) {\n            throw new Exception(\"The given array, contains objects that dont implement IAPIModel!\");\n        }\n        $json[] = $element->getAPIArray($verbose);\n    }\n    return $json;\n}\n\n/**\n * Try to call get_APIModel_array of $object. If $object is null, null is returned!\n * @param IAPIModel $object The object, of which the API info should be get.\n * @param bool $verbose Show all available informations about the IAPIModel, when set to true.\n *          Otherwise only most important informations are shown.\n * @return array An array describing the object.\n */\nfunction tryToGetAPIModelArray($object, $verbose = false)\n{\n    if (is_null($object)) {\n        return null;\n    } else {\n        return $object->getAPIArray($verbose);\n    }\n}\n\n/**\n * Builds a TreeView for the Tools menu\n * @param $params\n * @return array\n * @throws Exception\n */\nfunction buildToolsTree($params)\n{\n    global $config;\n\n    //Build objects\n    $current_user       = User::getLoggedInUser();\n\n    $disable_footprint = $config['footprints']['disable'];\n    $disable_manufactur = $config['manufacturers']['disable'];\n    $disable_suppliers  = $config['suppliers']['disable'];\n    $disable_devices = $config['devices']['disable'];\n    $disable_help = $config['menu']['disable_help'];\n    $disable_config = $config['menu']['disable_config'];\n    $enable_debug_link = $config['menu']['enable_debug'];\n    $disable_labels = $config['menu']['disable_labels'];\n    $disable_calculator = $config['menu']['disable_calculator'];\n    $disable_iclogos = $config['menu']['disable_iclogos'];\n    $disable_tools_footprints = $config['menu']['disable_footprints'];\n    $developer_mode = $config['developer_mode'];\n    $db_backup_name = $config['db']['backup']['name'];\n    $db_backup_url = $config['db']['backup']['url'];\n    $footprint_3d_active = $config['foot3d']['active'];\n\n\n    //Tools nodes\n    $tools_nodes = array();\n    if ($current_user->canDo(PermissionManager::TOOLS, ToolsPermission::IMPORT)) {\n        $tools_nodes[] = treeviewNode(_(\"Import\"), BASE_RELATIVE . \"/tools_import.php\");\n    }\n    if (!$disable_labels && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::LABELS)) {\n        $tools_nodes[] = treeviewNode(_(\"SMD Labels\"), BASE_RELATIVE . \"/tools_labels.php\");\n    }\n    if (!$disable_calculator && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::CALCULATOR)) {\n        $tools_nodes[] = treeviewNode(_(\"Widerstandsrechner\"), BASE_RELATIVE . \"/tools_calculator.php\");\n    }\n    if (!$disable_tools_footprints && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::FOOTPRINTS)) {\n        $tools_nodes[] = treeviewNode(_(\"Footprints\"), BASE_RELATIVE . \"/tools_footprints.php\");\n    }\n    if ($footprint_3d_active && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::FOOTPRINTS)) {\n        $tools_nodes[] = treeviewNode(_(\"3D Footprints\"), BASE_RELATIVE . \"/tools_3d_footprints.php\");\n    }\n    if (!$disable_labels && $current_user->canDo(PermissionManager::LABELS, \\PartDB\\Permissions\\LabelPermission::CREATE_LABELS)) {\n        $tools_nodes[] = treeviewNode(_(\"Labelgenerator\"), BASE_RELATIVE . \"/show_part_label.php\");\n    }\n    if (!$disable_iclogos && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::IC_LOGOS)) {\n        $tools_nodes[] = treeviewNode(_(\"IC-Logos\"), BASE_RELATIVE . \"/tools_iclogos.php\");\n    }\n\n    $system_nodes = array();\n    if ($current_user->canDo(PermissionManager::USERS, \\PartDB\\Permissions\\UserPermission::READ)) {\n        $system_nodes[] = treeviewNode(_(\"Benutzer\"), BASE_RELATIVE . \"/edit_users.php\");\n    }\n    if ($current_user->canDo(PermissionManager::GROUPS, \\PartDB\\Permissions\\GroupPermission::READ)) {\n        $system_nodes[] = treeviewNode(_(\"Gruppen\"), BASE_RELATIVE . \"/edit_groups.php\");\n    }\n    if ($current_user->canDo(PermissionManager::CONFIG, \\PartDB\\Permissions\\ConfigPermission::READ_CONFIG)\n        || $current_user->canDo(PermissionManager::CONFIG, \\PartDB\\Permissions\\ConfigPermission::SERVER_INFO)) {\n        $system_nodes[] = treeviewNode(_(\"Konfiguration\"), BASE_RELATIVE . \"/system_config.php\");\n    }\n    if ($current_user->canDo(PermissionManager::DATABASE, \\PartDB\\Permissions\\DatabasePermission::SEE_STATUS)\n        || $current_user->canDo(PermissionManager::DATABASE, \\PartDB\\Permissions\\DatabasePermission::READ_DB_SETTINGS)) {\n        $system_nodes[] = treeviewNode(_(\"Datenbank\"), BASE_RELATIVE . \"/system_database.php\");\n    }\n    if ($current_user->canDo(PermissionManager::SYSTEM, \\PartDB\\Permissions\\SystemPermission::SHOW_LOGS)\n            || $current_user->canDo(PermissionManager::SELF, \\PartDB\\Permissions\\SelfPermission::SHOW_LOGS)) {\n        $system_nodes[] = treeviewNode(_(\"Eventlog\"), BASE_RELATIVE . \"/system_log.php\");\n    }\n\n\n\n    //Show nodes\n    $show_nodes = array();\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::ORDER_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Zu bestellende Teile\"), BASE_RELATIVE . \"/show_order_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::NO_PRICE_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Teile ohne Preis\"), BASE_RELATIVE . \"/show_noprice_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::OBSOLETE_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Obsolete Bauteile\"), BASE_RELATIVE . \"/show_obsolete_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::TOOLS, ToolsPermission::STATISTICS)) {\n        $show_nodes[] = treeviewNode(_(\"Statistik\"), BASE_RELATIVE . \"/statistics.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::ALL_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Alle Teile\"), BASE_RELATIVE . \"/show_all_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::UNKNONW_INSTOCK_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Teile mit unbekanntem Lagerbestand\"), BASE_RELATIVE . \"/show_unknown_instock_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::SHOW_FAVORITE_PARTS)) {\n        $show_nodes[] = treeviewNode(_('Favorisierte Bauteile'), BASE_RELATIVE . \"/show_favorite_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::SHOW_LAST_EDIT_PARTS)) {\n        $show_nodes[] = treeviewNode(_('Zuletzt bearbeitete Bauteile'), BASE_RELATIVE . \"/show_last_modified_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::SHOW_LAST_EDIT_PARTS)) {\n        $show_nodes[] = treeviewNode(_('Zuletzt hinzugef\u00fcgte Bauteile'), BASE_RELATIVE . \"/show_last_modified_parts.php?mode=last_created\");\n    }\n\n    //Edit nodes\n    $edit_nodes = array();\n    if (!$disable_devices && $current_user->canDo(PermissionManager::DEVICES, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Baugruppen\"), BASE_RELATIVE . \"/edit_devices.php\");\n    }\n    if ($current_user->canDo(PermissionManager::STORELOCATIONS, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Lagerorte\"), BASE_RELATIVE . \"/edit_storelocations.php\");\n    }\n    if (!$disable_footprint && $current_user->canDo(PermissionManager::FOOTRPINTS, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Footprints\"), BASE_RELATIVE . \"/edit_footprints.php\");\n    }\n    if ($current_user->canDo(PermissionManager::CATEGORIES, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Kategorien\"), BASE_RELATIVE . \"/edit_categories.php\");\n    }\n    if (!$disable_suppliers && $current_user->canDo(PermissionManager::SUPPLIERS, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Lieferanten\"), BASE_RELATIVE . \"/edit_suppliers.php\");\n    }\n    if (!$disable_manufactur && $current_user->canDo(PermissionManager::MANUFACTURERS, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Hersteller\"), BASE_RELATIVE . \"/edit_manufacturers.php\");\n    }\n    if ($current_user->canDo(PermissionManager::ATTACHEMENT_TYPES, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Dateitypen\"), BASE_RELATIVE . \"/edit_attachement_types.php\");\n    }\n    if($current_user->canDo(PermissionManager::PARTS, PartPermission::CREATE)) {\n        $edit_nodes[] = treeviewNode(_(\"Bauteil anlegen\"), BASE_RELATIVE . \"/edit_part_info.php\");\n    }\n\n    //Developer nodes\n    $dev_nodes = array();\n    $dev_nodes[] = treeviewNode(_(\"Werkzeuge\"), BASE_RELATIVE . \"/development/developer_tools.php\");\n    $dev_nodes[] = treeviewNode(_(\"Debugging\"), BASE_RELATIVE . \"/system_debug.php\");\n    $dev_nodes[] = treeviewNode(_(\"Sandkasten\"), BASE_RELATIVE . \"/development/sandbox.php\");\n    $dev_nodes[] = treeviewNode(_(\"Quellcode-Doku\"), BASE_RELATIVE . \"/development/phpdoc/html/index.html\");\n\n    //Add nodes to root\n    $tree = array();\n    if (!empty($tools_nodes)) {\n        $tree[] = treeviewNode(_(\"Tools\"), null, $tools_nodes);\n    }\n    if (!empty($edit_nodes)) {\n        $tree[] = treeviewNode(_(\"Bearbeiten\"), null, $edit_nodes);\n    }\n    if (!empty($show_nodes)) {\n        $tree[] = treeviewNode(_(\"Zeige\"), null, $show_nodes);\n    }\n    if (!$disable_config && !empty($system_nodes)) {\n        $tree[] = treeviewNode(_(\"System\"), null, $system_nodes);\n    }\n    if ($developer_mode && $current_user->canDo(PermissionManager::SYSTEM, \\PartDB\\Permissions\\SystemPermission::USE_DEBUG)) {\n        $tree[] = treeviewNode(_(\"Entwickler-Werkzeuge\"), null, $dev_nodes);\n    }\n    if (!$disable_help) {\n        $tree[] = treeviewNode(_(\"Hilfe\"), \"https://github.com/jbtronics/Part-DB/wiki\", null);\n    }\n\n\n    return $tree;\n}\n\n/**\n * Short for \"set if empty\"\n * Checks if $test is null, then set it to $default_val, else return the normal\n * @param mixed $test The value which should be checked.\n * @param mixed $default_val The value, to which the value should be set defaultly\n * @return mixed The result\n */\nfunction sie($test, $default_val = \"\")\n{\n    if (isset($test)) {\n        return $test;\n    } else {\n        return $default_val;\n    }\n}\n\n/**\n * Gets the name of the class of the given Object without the namespace.\n * @param $object mixed  The object, whose clasname should be get.\n * @return string The class name of $object.\n * @throws ReflectionException\n */\nfunction getClassShort($object)\n{\n    $reflect = new \\ReflectionClass($object);\n    return $reflect->getShortName();\n}\n\n/**\n * Checks if $var is empty. This function capsules the empty function, so we can use it for expressions.\n * @param $var mixed The variable which should be checked.\n * @return boolean\n */\nfunction _empty($var)\n{\n    return empty($var);\n}\n\n/**\n * Check if the connection to the server is using HTTPS.\n * @return bool True if the connection is using HTTPS, false if not.\n */\nfunction isUsingHTTPS()\n{\n    return\n        (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off')\n        || $_SERVER['SERVER_PORT'] == 443;\n}\n\n/**\n * Generates a path, based on category structure of a part.\n * @param $base_dir string The base path for the file path structure (with trailing slash)\n * @param $element \\PartDB\\Base\\StructuralDBElement\n * @return string The generated path\n * @throws Exception\n */\nfunction generateAttachementPath($base_dir, $element)\n{\n    //Split full path into different categories\n    $categories = explode(\"@@\", $element->getFullPath(\"@@\"));\n    //Sanatize each category path\n    foreach ($categories as &$category) {\n        $category = filter_filename($category, true);\n    }\n\n    return $base_dir . \"\" . implode(\"/\", $categories). \"/\";\n}\n\n/**\n * Removes characters, that are not allowed in filenames, from the filenames.\n * @param $filename string The filename which should be parsed.\n * @param bool $beautify boolean When true, the filename gets beautified, so test---file.pdf, becomes test-file.pdf\n * @return mixed|string\n */\nfunction filter_filename($filename, $beautify = true)\n{\n    // sanitize filename\n    $filename = preg_replace(\n        '~\n        [<>:\"/\\\\|?*]|            # file system reserved https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words\n        [\\x00-\\x1F]|             # control characters http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx\n        [\\x7F\\xA0\\xAD]|          # non-printing characters DEL, NO-BREAK SPACE, SOFT HYPHEN\n        [#\\[\\]@!$&\\'()+,;=]|     # URI reserved https://tools.ietf.org/html/rfc3986#section-2.2\n        [{}^\\~`]                 # URL unsafe characters https://www.ietf.org/rfc/rfc1738.txt\n        ~x',\n        '-',\n        $filename\n    );\n    // avoids \".\", \"..\" or \".hiddenFiles\"\n    $filename = ltrim($filename, '.-');\n    // optional beautification\n    if ($beautify) {\n        $filename = beautify_filename($filename);\n    }\n    // maximise filename length to 255 bytes http://serverfault.com/a/9548/44086\n    $ext = pathinfo($filename, PATHINFO_EXTENSION);\n    $filename = mb_strcut(pathinfo($filename, PATHINFO_FILENAME), 0, 255 - ($ext ? strlen($ext) + 1 : 0), mb_detect_encoding($filename)) . ($ext ? '.' . $ext : '');\n    return $filename;\n}\n\n/**\n * Makes a filename more beatiful. For example: file___name.zip becomes file-name.zip\n * @param $filename\n * @return mixed|string\n */\nfunction beautify_filename($filename)\n{\n    //Spaces becomes _\n    $filename = preg_replace(array('/ +/'), \"_\", $filename);\n    $filename = preg_replace(array('/_+/'), \"_\", $filename);\n    // reduce consecutive characters\n    $filename = preg_replace(array(\n        // \"file---name.zip\" becomes \"file-name.zip\"\n        '/-+/'\n    ), '-', $filename);\n    $filename = preg_replace(array(\n        // \"file--.--.-.--name.zip\" becomes \"file.name.zip\"\n        '/-*\\.-*/',\n        // \"file...name..zip\" becomes \"file.name.zip\"\n        '/\\.{2,}/'\n    ), '.', $filename);\n    // lowercase for windows/unix interoperability http://support.microsoft.com/kb/100625\n    //$filename = mb_strtolower($filename, mb_detect_encoding($filename));\n    // \".file-name.-\" becomes \"file-name\"\n    $filename = trim($filename, '.-');\n    return $filename;\n}\n\n/**\n * Recursively creates a long directory path, if it not exists.\n * @param $path string The path of the deepest folder, that should be created.\n * @return boolean Returns true, if the folder hierachy was created successful.\n */\nfunction createPath($path)\n{\n    if (is_dir($path)) {\n        return true;\n    }\n    $prev_path = substr($path, 0, strrpos($path, '/', -2) + 1);\n    $return = createPath($prev_path);\n    return ($return && is_writable($prev_path)) ? mkdir($path) : false;\n}\n\n/**\n * Check if a string is a URL and is valid.\n * @param $string string The string which should be checked.\n * @param bool $path_required If true, the string must contain a path to be valid. (e.g. foo.bar would be invalid, foo.bar/test.php would be valid).\n * @param $only_http bool Set this to true, if only HTTPS or HTTP schemata should be allowed.\n *  *Caution: When this is set to false, a attacker could use the file:// schema, to get internal server files, like /etc/passwd.*\n * @return bool True if the string is a valid URL. False, if the string is not an URL or invalid.\n */\nfunction isURL($string, $path_required = true, $only_http = true)\n{\n    if ($only_http) {   //Check if scheme is HTTPS or HTTP\n        $scheme = parse_url($string, PHP_URL_SCHEME);\n        if ($scheme !== \"http\" && $scheme !== \"https\") {\n            return false;   //All other schemes are not valid.\n        }\n    }\n    if ($path_required) {\n        return filter_var($string, FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED);\n    } else {\n        return filter_var($string, FILTER_VALIDATE_URL);\n    }\n}\n\n/**\n * Returns a Fontawesome icon for the filepath based on the file extension.\n * @param $path string The path (including filename) for which the Icon should be generated.\n * @param $with_html bool When true a whole HTML tag is generated (e.g. <i class=\"fa fa-file\" aria-hidden=\"true\"></i>).\n *      When false, only the special fa-class is returned. (e.g. fa-file)\n * @param $size string The size of the icon as an FA size class (e.g. fa-lg)\n * @return string The resulted HTML code or the fa-class.\n */\nfunction extToFAIcon($path, $with_html = true, $size = \"fa-lg\")\n{\n    $ext = pathinfo($path, PATHINFO_EXTENSION);\n    $fa_class = \"\";\n    switch ($ext) {\n        case \"pdf\":\n            $fa_class = \"fa-file-pdf\";\n            break;\n        case \"txt\":\n        case \"csv\":\n        case \"md\":\n        case \"rtf\":\n            $fa_class = \"fa-file-alt\";\n            break;\n        case \"jpg\":\n        case \"jpeg\":\n        case \"gif\":\n        case \"png\":\n        case \"svg\":\n        case \"tif\":\n        case \"tiff\":\n            $fa_class = \"fa-file-image\";\n            break;\n        case \"zip\":\n        case \"rar\":\n        case \"bz2\":\n        case \"tar\":\n        case \"7z\":\n            $fa_class = \"fa-file-archive\";\n            break;\n        case \"mp3\":\n        case \"wav\":\n        case \"aac\":\n        case \"m4a\":\n        case \"wma\":\n            $fa_class = \"fa-file-audio\";\n            break;\n        case \"mp4\":\n        case \"mkv\":\n        case \"wmv\":\n            $fa_class = \"fa-file-video\";\n            break;\n        case \"ppt\":\n        case \"pptx\":\n        case \"odp\":\n            $fa_class = \"fa-file-powerpoint\";\n            break;\n        case \"doc\":\n        case \"docx\":\n        case \"odt\":\n            $fa_class = \"fa-file-word\";\n            break;\n        case \"xls\":\n        case \"xlsx\":\n        case \"ods\":\n            $fa_class = \"fa-file-excel\";\n            break;\n        case \"php\":\n        case \"xml\":\n        case \"html\":\n        case \"js\":\n        case \"ts\":\n        case \"htm\":\n            $fa_class = \"fa-file-code\";\n            break;\n\n        default: //Use generic file icon\n            $fa_class = \"fa-file\";\n            break;\n    }\n\n    if ($with_html == false) {\n        return $fa_class;\n    }\n\n    $fa_class = $fa_class . \" \" . $size;\n\n    //Build HTML\n    return '<i class=\"far ' . $fa_class . '\" aria-hidden=\"true\"></i>';\n}\n\n/**\n * Parses the value of a Tristate Checkbox input.\n * @param $tristate_data string The Request data of the Tristate input.\n * @return int 0, if checkbox was indetermined, 1 if checkbox was checked, 2 if checkbox, was not checked.\n */\nfunction parseTristateCheckbox($tristate_data)\n{\n    switch ($tristate_data) {\n        case \"true\":\n            return 1;\n        case \"false\":\n            return 2;\n        case \"indeterminate\":\n            return 0;\n    }\n\n    throw new InvalidArgumentException(_(\"Der gegebene Wert konnte keinem Tristatewert zugeordnet werden!\"));\n}\n\n/**\n * Format the current timestamp regarding to the locale settings.\n * @param $timestamp int The timestamp which should be formatted.\n * @return string The formatted string.\n */\nfunction formatTimestamp($timestamp)\n{\n    global $config;\n    $language = $config['language'];\n    $timezone = $config['timezone'];\n\n    //Try to get the settings specific to the user.\n    try {\n        $current_user = User::getLoggedInUser();\n        $language = $current_user->getLanguage();\n        $timezone = $current_user->getTimezone();\n    } catch (Exception $ex) {\n        //Dont do anything\n    }\n\n\n    //Check if user has intl extension installed.\n    if (class_exists(\"\\IntlDateFormatter\")) {\n        $formatter = $formatter = new \\IntlDateFormatter(\n            $language,\n            IntlDateFormatter::MEDIUM,\n            IntlDateFormatter::MEDIUM,\n            $timezone\n        );\n\n        return $formatter->format($timestamp);\n    } else {\n        //Failsafe, return as non localized string.\n        return date('Y-m-d H:i:s', $timestamp);\n    }\n}\n\nfunction generatePagination($page_link, $selected_page, $limit, $max_entries, $get_params = null)\n{\n    $links = array();\n\n    $get_string = \"\";\n    $prefix = \"\";\n    //We only need the &, if the page_link does not end with ? (this is e.g. on show_all_parts.php the case)\n    if(substr($page_link, -1) != \"?\") {\n        $prefix = \"&\";\n    }\n    if(!empty($get_params)) {\n        $get_string = $prefix . http_build_query($get_params);\n    }\n\n    //Back to first page\n    $links[] = array(\"label\" => '<i class=\"fa fa-angle-double-left\" aria-hidden=\"true\"></i>',\n        \"href\" => $page_link . $prefix . \"page=1&limit=$limit\" . $get_string,\n        \"disabled\" => $selected_page == 1,\n        \"hint\" => _(\"Springe zur ersten Seite\"));\n\n    $max_page = ceil($max_entries / $limit);\n    $max_page = $max_page > 0 ? $max_page : 1;\n\n    $min_number = ($selected_page - 1) < 1 ? 1 : $selected_page -1;\n    $max_number = ($selected_page + 2) > $max_page ? $max_page : $selected_page + 2;\n\n    if ($selected_page == 0) {\n        $min_number = 1;\n        $max_number = 1;\n    }\n\n    for ($n=$min_number; $n <= $max_number; $n++) {\n        $links[] = array(\"label\" => $n,\n            \"href\" => $page_link . $prefix. \"page=\" . ($n). \"&limit=$limit\" . $get_string,\n            \"active\" => $n == $selected_page);\n    }\n\n    //Jump to last page.\n    $links[] = array(\"label\" => '<i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>',\n        \"href\" => $page_link . $prefix . \"page=$max_page&limit=$limit\" . $get_string,\n        \"disabled\" => $selected_page == $max_page,\n        \"hint\" => _(\"Springe zur letzten Seite\"));\n\n    //Show all results\n    $links[] = array(\"label\" => '<i class=\"fa fa-bars\" aria-hidden=\"true\"></i>',\n        \"href\" => $page_link . $prefix . \"page=0\" . $get_string,\n        \"active\" => $selected_page == 0,\n        \"hint\" => _(\"Alle anzeigen\"));\n\n    $upper_results = ($selected_page * $limit + 1) <= $max_entries && $selected_page > 0 ? $selected_page * $limit : $max_entries;\n    if($upper_results == 0) {\n        $lower_results = 0;\n    } else {\n        $lower_results = $selected_page > 0 ? ($selected_page - 1) * $limit + 1 : 1;\n    }\n\n    return array(\"lower_result\" =>  $lower_results,\n        \"upper_result\" => $upper_results,\n        \"max_entries\" => $max_entries,\n        \"entries\" => $links);\n}\n\nfunction parsePartsSelection(&$database, &$current_user, &$log, $selection, $action, $target)\n{\n    $ids = explode(\",\", $selection);\n    foreach ($ids as $id) {\n        $part = new Part($database, $current_user, $log, $id);\n        if ($action==\"delete_confirmed\") {\n            $part->delete();\n        } elseif ($action==\"move\") {\n            if ($target == \"\") {\n                throw new Exception(_(\"Bitte w\u00e4hlen sie ein Ziel zum Verschieben aus.\"));\n            }\n            $type = substr($target, 0, 1);\n            $target_id = intval(substr($target, 1));\n            //Check if target ID is valid.\n            if ($target_id < 1) {\n                throw new Exception(_(\"Ung\u00fcltige ID\"));\n            }\n            switch ($type) {\n                case \"c\": //Category\n                    $part->setCategoryID($target_id);\n                    break;\n                case \"f\": //Footptint\n                    $part->setFootprintID($target_id);\n                    break;\n                case \"m\": //Manufacturer\n                    $part->setManufacturerID($target_id);\n                    break;\n                case \"s\": //Storelocation\n                    $part->setStorelocationID($target_id);\n                    break;\n            }\n        } elseif ($action==\"favor\") {\n            $part->setFavorite(true);\n        } elseif ($action==\"defavor\") {\n            $part->setFavorite(false);\n        } elseif ($action == \"\") {\n            throw new Exception(_(\"Bitte w\u00e4hlen sie eine Aktion aus.\"));\n        } else {\n            throw new Exception(_(\"Unbekannte Aktion\"));\n        }\n    }\n}\n\nfunction build_custom_css_loop($selected = null, $include_default_theme = false)\n{\n    global $config;\n    if ($selected == null) {\n        $selected = $config['html']['custom_css'];\n    }\n\n    $loop = array();\n    if ($include_default_theme) {\n        $loop[] = array(\"value\" => \"@@\", \"text\" => _(\"Standardm\u00e4\u00dfiges Theme\"), \"selected\" => ($selected == \"@@\"));\n    }\n    $files = findAllFiles(BASE.'/templates/custom_css/', true, '.css');\n\n    foreach ($files as $file) {\n        $name = str_ireplace(BASE.'/templates/custom_css/', '', $file);\n        $loop[] = array('value' => $name, 'text' => $name, 'selected' => ($name == $selected));\n    }\n\n    return $loop;\n}\n\n/**\n * Generates a list of available profiles for the given generator.\n * @param $generator string The generator to which the profile belongs to.\n * @param $include_default bool If this is set to true, the default profile is included in the returned array.\n * @return string[] An string array with the names of all profiles\n */\nfunction buildLabelProfilesDropdown($generator, $include_default = false)\n{\n    $json_storage = new JSONStorage(BASE_DATA . \"/label_profiles.json\");\n\n    $data =  $json_storage->getKeyList($generator . \"@\");\n\n    foreach ($data as $key => &$item) {\n        $item = str_replace($generator . \"@\", \"\", $item);\n        if (!$include_default && $item == \"default\") {\n            unset($data[$key]);\n        }\n    }\n\n    return $data;\n}\n\n/**\n * Return the IP Address the current user is accessing the DB.\n * IP Addresses gets anonymized based on the ip_anonymize_mask settings.\n * @param bool|string $mask_override_ipv4 Overrides the anonymization mask for IPv4 addresses.\n *          Use false to use values from config.php. Set to \"\" to disable anonymization completly.\n * @param bool|string $mask_override_ipv6 Overrides the anonymization mask for IPv6 addresses.\n * @return string The anonymized IP Address\n */\nfunction getConnectionIPAddress($mask_override_ipv4 = false, $mask_override_ipv6 = false)\n{\n    global $config;\n\n    $raw_ip = $_SERVER['REMOTE_ADDR'];\n\n    //Determine mask for IPv4\n    if ($mask_override_ipv4 === false) {\n       $mask_ipv4 = $config['logging_system']['ip_anonymize_mask_ipv4'];\n    } else {\n        $mask_ipv4 = $mask_override_ipv4;\n    }\n\n    //Determine mask for IPv6\n    if ($mask_override_ipv6 === false) {\n        $mask_ipv6 = $config['logging_system']['ip_anonymize_mask_ipv6'];\n    } else {\n        $mask_ipv6 = $mask_override_ipv6;\n    }\n\n    if($mask_ipv4 === \"\") {\n        //Return IP address without any anonymization\n        return $raw_ip;\n    }\n\n    $ipAnonymizer = new IpAnonymizer();\n    //Set masks\n    $ipAnonymizer->ipv4NetMask = $mask_ipv4;\n    $ipAnonymizer->ipv6NetMask = $mask_ipv6;\n\n    return $ipAnonymizer->anonymize($raw_ip);\n}"], "fixing_code": ["<?php\n/*\n    part-db version 0.1\n    Copyright (C) 2005 Christoph Lechner\n    http://www.cl-projects.de/\n\n    part-db version 0.2+\n    Copyright (C) 2009 K. Jacobs and others (see authors.php)\n    http://code.google.com/p/part-db/\n\n    This program is free software; you can redistribute it and/or\n    modify it under the terms of the GNU General Public License\n    as published by the Free Software Foundation; either version 2\n    of the License, or (at your option) any later version.\n\n    This program is distributed in the hope that it will be useful,\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n    GNU General Public License for more details.\n\n    You should have received a copy of the GNU General Public License\n    along with this program; if not, write to the Free Software\n    Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA\n*/\n\n/**\n * @file lib.php\n * @brief Miscellaneous, global Functions\n * @author kami89\n */\n\nuse PartDB\\Interfaces\\IAPIModel;\nuse PartDB\\Part;\nuse PartDB\\Permissions\\PartPermission;\nuse PartDB\\Permissions\\PermissionManager;\nuse PartDB\\Permissions\\StructuralPermission;\nuse PartDB\\Permissions\\ToolsPermission;\nuse PartDB\\Tools\\JSONStorage;\nuse PartDB\\User;\n\nuse geertw\\IpAnonymizer\\IpAnonymizer;\n\n/**\n * check if a given number is odd\n *\n * @param integer $number       A number\n *\n * @return boolean\n * * true if the number is odd\n * * false if the number is even\n */\nfunction isOdd($number)\n{\n    return ($number & 1) ? true : false; // false = even, true = odd\n}\n\n/**\n * Get the Git branch name of the installed system\n *\n * @return  string|null       The current git branch name. Null, if this is no Git installation\n *\n * @throws Exception if there was an error\n */\nfunction getGitBranchName()\n{\n    if (file_exists(BASE.'/.git/HEAD')) {\n        $git = File(BASE.'/.git/HEAD');\n        $head = explode(\"/\", $git[0], 3);\n        $branch = trim($head[2]);\n        return $branch;\n    }\n\n    return null; // this is not a Git installation\n}\n\n/**\n * Get hash of the last git commit (on remote \"origin\"!)\n *\n * @note    If this method does not work, try to make a \"git pull\" first!\n *\n * @param integer $length       if this is smaller than 40, only the first $length characters will be returned\n *\n * @return string|null       The hash of the last commit, null If this is no Git installation\n *\n * @throws Exception if there was an error\n */\nfunction getGitCommitHash($length = 40)\n{\n    $filename = BASE.'/.git/refs/remotes/origin/'.getGitBranchName();\n\n    if (file_exists($filename)) {\n        $head = File($filename);\n        $hash = $head[0];\n        return substr($hash, 0, $length);\n    }\n\n    return null; // this is not a Git installation\n}\n\n\nfunction treeviewNode($name, $href = null, $nodes = null, $icon = null)\n{\n    $ret = array('text' => $name);\n\n    if (isset($href)) {\n        $ret['href'] = $href;\n    } else {\n        $ret['selectable'] = false;\n    }\n\n    if (isset($nodes)) {\n        $ret['nodes'] = $nodes;\n    }\n\n    if (isset($icon)) {\n        $ret['icon'] = $icon;\n    }\n\n    return $ret;\n}\n\n/**\n * List all files (or all files with a specific string in the filename) in a directory\n *\n * @note This function is not case sensitive.\n *\n * @param string    $directory          Path to the directory (IMPORTANT: absolute UNIX path, with slash at the end! see to_unix_path())\n * @param boolean   $recursive          If true, the file search is recursive\n * @param string    $search_string      If this is a non-empty string, only files with\n *                                      that substring in the filename will be returned.\n *\n * @return string[]    all found filenames (incl. absolute UNIX paths, sorted alphabetically)\n *\n * @throws Exception if there was an error\n */\nfunction findAllFiles($directory, $recursive = false, $search_string = '')\n{\n    $files = array();\n\n    if ((! is_dir($directory)) || (mb_substr($directory, -1, 1) != '/') || (! isPathabsoluteAndUnix($directory, false))) {\n        throw new Exception(sprintf(_('\"%s\" ist kein g\u00fcltiges Verzeichnis!'), $directory));\n    }\n\n    $dirfiles = scandir($directory);\n    foreach ($dirfiles as $file) {\n        if (($file != \".\") && ($file != \"..\") && ($file != \".svn\") && ($file != \".git\") && ($file != \".gitignore\") && ($file != \".htaccess\")) {\n            if (is_dir($directory.$file)) {\n                if ($recursive) {\n                    $files = array_merge($files, findAllFiles($directory.$file.'/', true, $search_string));\n                }\n            } elseif (($search_string == '') || (mb_substr_count(mb_strtolower($file), mb_strtolower($search_string)) > 0)) {\n                $files[] = $directory.$file;\n            }\n        }\n    }\n\n    return $files;\n}\n\n/**\n * Find all subdirectories of a directory (not recursive)\n *\n * @param string    $directory          Path to the directory (IMPORTANT: absolute UNIX path, with slash at the end! see to_unix_path())\n * @param boolean   $recursive          if true, all subdirectories will be listed too\n *\n * @return string[] all found directories (without slashes at the end, incl. absolute UNIX paths, sorted alphabetically)\n *\n * @throws Exception if there was an error\n */\nfunction findAllDirectories($directory, $recursive = false)\n{\n    $directories = array();\n\n    if ((! is_dir($directory)) || (mb_substr($directory, -1, 1) != '/') || (! isPathabsoluteAndUnix($directory, false))) {\n        throw new Exception(sprintf(_('\"%s\" ist kein g\u00fcltiges Verzeichnis!'), $directory));\n    }\n\n    $dirfiles = scandir($directory);\n    foreach ($dirfiles as $file) {\n        if (($file != \".\") && ($file != \"..\") && ($file != \".svn\") && ($file != \".git\") && (is_dir($directory.$file))) {\n            $directories[] = $directory.$file;\n            if ($recursive) {\n                $directories = array_merge($directories, findAllDirectories($directory.$file.'/', true));\n            }\n        }\n    }\n\n    return $directories;\n}\n\n/**\n * Send a file to the client (download file)\n *\n * @warning     This function must be called before there was any HTML output!\n *\n * @param string $filename      The full path to the filename\n * @param string $mimetype      * The mime type of the file\n * * if NULL, we will try to read the mimetype from the file\n */\nfunction sendFile($filename, $mimetype = null)\n{\n    $mtime = ($mtime = filemtime($filename)) ? $mtime : time();\n\n    if (strstr($_SERVER[\"HTTP_USER_AGENT\"], \"MSIE\") != false) {\n        header(\"Content-Disposition: attachment; filename=\".urlencode(basename($filename)).\"; modification-date=\".date('r', $mtime).\";\");\n    } else {\n        header(\"Content-Disposition: attachment; filename=\\\"\".basename($filename).\"\\\"; modification-date=\\\"\".date('r', $mtime).\"\\\";\");\n    }\n\n    if ($mimetype == null) {\n        $mimetype = getMimetype($filename);\n    } // lib.functions.php\n\n    header(\"Content-Type: \".$mimetype);\n    header(\"Content-Length:\". filesize($filename));\n\n    if (in_array('mod_xsendfile', apache_get_modules())) {\n        header('X-Sendfile: '.$filename);\n    } else {\n        readfile($filename);\n    }\n\n    exit;\n}\n\n/**\n * The same as \"send_file()\", but with a string instead of a file on the disk (e.g. for XML and CSV)\n *\n * @warning     This function must be called before there was any HTML output!\n *\n * @param string $content       The content of the file which the user wants to download\n * @param string $filename      The name of the file which is displayed in the user's browser\n * @param string $mimetype      The mime type of the file\n */\nfunction sendString($content, $filename, $mimetype)\n{\n    $mtime = time();\n\n    if (strstr($_SERVER[\"HTTP_USER_AGENT\"], \"MSIE\") != false) {\n        header(\"Content-Disposition: attachment; filename=\".urlencode($filename).\"; modification-date=\".date('r', $mtime).\";\");\n    } else {\n        header(\"Content-Disposition: attachment; filename=\\\"\".$filename.\"\\\"; modification-date=\\\"\".date('r', $mtime).\"\\\";\");\n    }\n\n    header(\"Content-Type: \".$mimetype);\n    header(\"Content-Length:\". strlen($content));\n\n    echo $content;\n    exit;\n}\n\n/**\n * Gets the file extension from a filename\n *\n * @param string    $filename The filename\n * @return string The extension of the file\n */\nfunction getExtensionFromFileName($filename)\n{\n    $tmp = explode('.', $filename);\n    return end($tmp);\n}\n\n/**\n * Upload a file (from \"<input type=\"file\">) to a directory on the server\n *\n * @param array         $file_array                 The file array, for example $_FILES['my_file']\n * @param string        $destination_directory      The directory where the file should be saved.\n *                                                  IMPORTANT: there must be a slash at the end!\n *                                                  Example: BASE.'/data/media/'\n * @param string|NULL   $destination_filename       The destination filename (without path).\n *                                                  NULL means same filename like the uploaded file.\n *\n * @return string   the (absolute) filename of the uploaded file (the destination, not the source)\n *\n * @throws Exception if the destination file exists already\n * @throws Exception if there was an error\n */\nfunction uploadFile($file_array, $destination_directory, $destination_filename = null)\n{\n    $unsafe_extensions = ['php', 'phtml', 'php3', 'ph3', 'php4', 'ph4', 'php5', 'ph5', 'phtm', 'sh', 'asp', 'cgi', 'py', 'pl', 'exe', 'aspx'];\n\n    if ((! isset($file_array['name'])) || (! isset($file_array['tmp_name'])) || (! isset($file_array['error']))) {\n        throw new Exception(_('Ung\u00fcltiges Array \u00fcbergeben!'));\n    }\n\n    //Dont allow upload of files with potentially dangerous extension\n    if (in_array(getExtensionFromFileName($file_array['name']), $unsafe_extensions)\n        || in_array(getExtensionFromFileName($destination_filename), $unsafe_extensions))\n    {\n        throw new \\Exception(_(\"Es ist nicht erlaubt PHP Dateien hochzuladen!\"));\n    }\n\n    if ($destination_filename == null) {\n        $destination_filename = $file_array['name'];\n    }\n\n    $destination = $destination_directory.$destination_filename;\n\n    if ((mb_substr($destination_directory, -1, 1) != '/') || (! isPathabsoluteAndUnix($destination_directory, false))) {\n        throw new Exception(sprintf(_('\"%s\" ist kein g\u00fcltiges Verzeichnis!'), $destination_directory));\n    }\n\n    try {\n        createPath($destination_directory);\n    } catch (Exception $ex) {\n        throw new Exception(_(\"Das Verzeichniss konnte nicht angelegt werden!\"));\n    }\n\n    if (! is_writable($destination_directory)) {\n        throw new Exception(_('Sie haben keine Schreibrechte im Verzeichnis \"').$destination_directory.'\"!');\n    }\n\n    if (file_exists($destination)) {\n        // there is already a file with the same filename, check if it is exactly the same file\n        $new_file_md5 = md5_file($file_array['tmp_name']);\n        $existing_file_md5 = md5_file($destination);\n\n        if (($new_file_md5 == $existing_file_md5) && ($new_file_md5 != false)) {\n            return $destination;\n        } // it's exactly the same file, we don't need to upload it again, re-use it!\n\n        throw new Exception(_('Es existiert bereits eine Datei mit dem Dateinamen \"').$destination.'\"!');\n    }\n\n    switch ($file_array['error']) {\n        case UPLOAD_ERR_OK:\n            // all OK, upload was successfully\n            break;\n        case UPLOAD_ERR_INI_SIZE:\n            throw new Exception(_('Die maximal m\u00f6gliche Dateigr\u00f6sse f\u00fcr Uploads wurde \u00fcberschritten (\"upload_max_filesize\" in \"php.ini\")! ').\n                '<a target=\"_blank\" href=\"'._(\"https://github.com/Part-DB/Part-DB/wiki/Anforderungen\").'>'._(\"Hilfe\").'</a>');\n        case UPLOAD_ERR_FORM_SIZE:\n            throw new Exception(_('Die maximal m\u00f6gliche Dateigr\u00f6sse f\u00fcr Uploads wurde \u00fcberschritten!'));\n        case UPLOAD_ERR_PARTIAL:\n            throw new Exception(_('Die Datei wurde nur teilweise hochgeladen!'));\n        case UPLOAD_ERR_NO_FILE:\n            throw new Exception(_('Es wurde keine Datei hochgeladen!'));\n        case UPLOAD_ERR_NO_TMP_DIR:\n            throw new Exception(_('Es gibt keinen tempor\u00e4ren Ordner f\u00fcr hochgeladene Dateien!'));\n        case UPLOAD_ERR_CANT_WRITE:\n            throw new Exception(_('Das Speichern der Datei auf die Festplatte ist fehlgeschlagen!'));\n        case UPLOAD_ERR_EXTENSION:\n            throw new Exception(_('Eine PHP Erweiterung hat den Upload der Datei gestoppt!'));\n        default:\n            throw new Exception(_('Beim Hochladen der Datei trat ein unbekannter Fehler auf!'));\n    }\n\n    if (! move_uploaded_file($file_array['tmp_name'], $destination)) {\n        throw new Exception(_('Beim Hochladen der Datei trat ein unbekannter Fehler auf!'));\n    }\n\n    return $destination;\n}\n\n/**\n * Set a password for the \"admin\" password that will be written into, the database, when DB will be created.\n * This function should be only used in install.php !!\n *\n * @note    The password will be trimmed, salted, crypted with sha256 and stored in $config.\n *          Optionally, $config can be written in config.php.\n *\n * @param string    $new_password_1     The new administrator password (plain, not crypted) (first time)\n * @param string    $new_password_2     The new administrator password (plain, not crypted) (second time)\n * @param boolean   $save_config        If true, the config.php file will be overwritten.\n *                                      If false, the new password will be stored in $config,\n *                                      but you must manually save the $config with save_config()!\n *\n * @throws Exception    if the old password is not correct\n * @throws Exception    if the new password is not allowed (maybe empty)\n * @throws Exception    if the new passworts are different\n * @throws Exception    if $config could not be saved in config.php\n */\nfunction setTempAdminPassword($new_password_1, $new_password_2, $save_config = true)\n{\n    global $config;\n\n    settype($old_password, 'string');\n    settype($new_password_1, 'string');\n    settype($new_password_2, 'string');\n    $new_password_1 = trim($new_password_1);\n    $new_password_2 = trim($new_password_2);\n\n    if (mb_strlen($new_password_1) < 6) {\n        throw new Exception(_('Das neue Passwort muss mindestens 6 Zeichen lang sein!'));\n    }\n\n    if ($new_password_1 !== $new_password_2) {\n        throw new Exception(_('Die neuen Passw\u00f6rter stimmen nicht \u00fcberein!'));\n    }\n\n    // all ok, save the new password\n    $config['admin']['tmp_password'] = password_hash($new_password_1, PASSWORD_DEFAULT);\n\n    if ($save_config) {\n        saveConfig();\n    }\n}\n\n/**\n * Save the global array \"$config\" to the file \"config.php\"\n *\n * @throws Exception if there was an error (maybe not enought permissions)\n */\nfunction saveConfig()\n{\n    if ((file_exists(BASE.'/data/config.php')) && (! is_writeable(BASE.'/data/config.php'))) {\n        throw new Exception(_('Es sind nicht gen\u00fcgend Rechte vorhanden um die Datei \"config.php\" zu beschreiben!'));\n    }\n\n    global $config;\n    global $config_defaults;\n    global $manual_config;\n\n    // set config version to the latest one\n    $config['system']['current_config_version'] = $config['system']['latest_config_version'];\n\n    $content = \"<?php\\n\\n\";\n    $content .= arrayToPhpLines($config_defaults, $config, '    $config', false);\n    $content .= \"\\n    //How to declare manual configs:\\n\";\n    $content .= '    //$manual_config[\\'money_format\\'][\\'POSIX\\']                = \\'%!n \u20ac\\';'.\"\\n\";\n    $content .= '    //$manual_config[\\'DOCUMENT_ROOT\\']                        = \\'/var/www\\';'.\"\\n\";\n    $content .= arrayToPhpLines($manual_config, $manual_config, '    $manual_config', false);\n    $content .= \"\\n\";\n\n    if (! ($fp = fopen(BASE.'/data/config.php', 'wb'))) {\n        throw new Exception(_('Die Datei \"config.php\" konnte nicht beschrieben werden. \u00dcberpr\u00fcfen Sie, ob gen\u00fcgend Rechte vorhanden sind.'));\n    }\n\n    if (! fwrite($fp, $content)) {\n        throw new Exception(_('Die Datei \"config.php\" konnte nicht beschrieben werden. \u00dcberpr\u00fcfen Sie, ob gen\u00fcgend Rechte vorhanden sind.'));\n    }\n\n    if (! fclose($fp)) {\n        throw new Exception(_('Es gab ein Fehler beim Abschliessen der Schreibvorgangs bei der Datei \"config.php\".'));\n    }\n}\n\n/**\n * @brief For save_config()\n */\nfunction arrayToPhpLines(&$array_defaults, &$array, $path, $ignore_defaults)\n{\n    $lines = '';\n    foreach ($array_defaults as $key => $value) {\n        if (isset($array[$key])) {\n            $full_path = $path.'['.var_export($key, true).']';\n            if (is_array($value)) {\n                $lines .= arrayToPhpLines($array_defaults[$key], $array[$key], $full_path, $ignore_defaults);\n            } else {\n                if (($array[$key] !== $array_defaults[$key]) || (! $ignore_defaults)) {\n                    $space_count = max(60-mb_strlen($full_path), 0);\n                    $spaces = str_repeat(' ', $space_count);\n                    $lines .= $full_path.$spaces.' = '.var_export($array[$key], true).\";\\n\";\n                }\n            }\n        }\n    }\n    return $lines;\n}\n\n/**\n * Convert a float number to a formatted money string (with currency)\n *\n * @param float|NULL    $number     @li The price as a float number\n *                                  @li NULL if you mean \"there is no price\",\n *                                      then this function will return the string \"-\"\n * @param string        $language   @li language (locale) string, like \"de_DE\" or \"de_DE.utf-8\".\n *                                  @li an empty string means that we use the default language from $config\n *\n * @return string       The formatted money string\n */\nfunction floatToMoneyString($number, $language = '')\n{\n    if ($number === null) {\n        return '-';\n    }\n\n    // settype($number, 'float');\n\n    global $config;\n\n    if (strlen($language) == 0) {\n        $language = $config['language'];\n    }\n\n    if ($language != $config['language']) {\n        // change locale, because the $language is not the default language!\n        if (! ownSetlocale(LC_MONETARY, $language)) {\n            debug('error', 'Sprache \"'.$language.'\" kann nicht gesetzt werden!', __FILE__, __LINE__, __METHOD__);\n        }\n    }\n\n    // get the money format from config(_defaults).php\n    if (isset($config['money_format'][$language])) {\n        $format = $config['money_format'][$language];\n    } else {\n        // not set in config, so generate it\n        $locale = localeconv();\n        // number of digits used in current language\n        $local_digits = $locale['int_frac_digits'];\n        // digits of the number\n        $number_digits = ((int) $number != $number) ? (strlen($number) - strpos($number, $locale['decimal_point'])) - 1 : 0;\n\n        // international or local format?\n        $format_type = ($language == $config['language']) ? 'n' : 'i';\n\n        if ($number_digits > $local_digits) {\n            $n = $number_digits > 5 ? 5 : $number_digits;\n            $format = \"%.\" . $n . $format_type;\n        } else {\n            $format = '%' . $format_type;\n        }\n    }\n\n    $result = trim(money_format($format, $number));\n\n    if ($language != $config['language']) {\n        ownSetlocale(LC_MONETARY, $config['language']);\n    } // change locale back to default\n\n    return $result;\n}\n\n/**\n * Returns the Currency symbol for the configured locale.\n * @return string The currency symbol.\n */\nfunction getCurrencySymbol()\n{\n    global $config;\n    $language = $config['language'];\n\n    //User can override the currency symbol in config, we need to respect that...\n    if(isset($config['money_format'][$language])) {\n        return $config['money_format'][$language];\n    }\n\n  return localeconv()['currency_symbol'];\n}\n\n/**\n * Download a file from the internet (with \"curl\")\n *\n * @param string $url   The internet URL to the file\n *\n * @return string       The downloaded file\n *\n * @throws Exception if there was an error (maybe \"curl\" is not installed on the server)\n */\nfunction curlGetData($url)\n{\n    if (! extension_loaded('curl')) {\n        throw new Exception(_('\"curl\" scheint auf ihrem System nicht installiert zu sein! '.\n            \"\\nBitte installieren Sie das entsprechende Modul, \".\n            'oder es werden gewisse Funktionen nicht zur Verf\u00fcgung stehen.'));\n    }\n\n    $ch = curl_init();\n    $timeout = 5;\n    curl_setopt($ch, CURLOPT_URL, $url);\n    curl_setopt($ch, CURLOPT_RETURNTRANSFER, 1);\n    curl_setopt($ch, CURLOPT_CONNECTTIMEOUT, $timeout);\n    $data = curl_exec($ch);\n    curl_close($ch);\n\n    if ($data === false) {\n        throw new Exception(_('Der Download mit \"curl\" lieferte kein Ergebnis!'));\n    }\n\n    return $data;\n}\n\n/**\n * Download a file from web to the server.\n * @param $url string The URL of the resource which should be downloaded.\n * @param $path string The path, where the file should be placed. (Must be absolute, unix style and end with a slash)\n * @param string $filename string Defaultly the filename of the new file gets determined from the url.\n *          However you can override the filename with this param.\n * @param $download_override boolean Set this to true, if you want to download a file, even when $config['allow_server_downloads'] is false.\n * @throws Exception Throws an exception if an error happened, or file could not be downloaded.\n * @return string|boolean The path of the created file, when the file was successful downloaded. False, when an error happened.\n */\nfunction downloadFile($url, $path, $filename = \"\", $download_override = false)\n{\n    global $config;\n    if ($config['allow_server_downloads'] == false && $download_override == false) {\n        throw new Exception(_(\"Das Herunterladen von Dateien \u00fcber den Server ist deaktiviert!\"));\n    }\n\n    if (!isPathabsoluteAndUnix($path)) {\n        throw new Exception(_('$path ist kein g\u00fcltiger und absoluter Pfad!'));\n    }\n    if (!isURL($url)) {\n        throw new Exception(_('$url ist keine g\u00fcltige URL'));\n    }\n    if ($filename == \"\") {\n        $parts = parse_url($url);\n        $filename = basename($parts['path']);\n    }\n\n    //Dont allow to upload a PHP file.\n    if(strpos($filename, \".php\") != false) {\n        throw new \\Exception(_(\"Es ist nicht erlaubt PHP Dateien herunterzuladen!\"));\n    }\n\n    set_time_limit(30);\n\n    createPath($path);\n\n    $ret = file_put_contents($path . $filename, fopen($url, 'r'));\n    if ($ret !== false) { //If download was successful\n        return $path . $filename;\n    }\n    return false;\n}\n\n/**\n * Get proposed filenames for an invalid filename\n *\n * If the user moves a file (e.g. in the media/ directory), the files will be found no longer.\n * To re-assign \"Attachement\"-objects (see \"Attachement.php\") with the missing file,\n * this function is needed. You can pass the old filename, and you will get\n * proposed filenames. Maybe the original file can be found again this way.\n *\n * @param string $missing_filename      The filename of the missing file (absolute UNIX path from filesystem root [only slashes]!!)\n * @param array  $available_files       An array of absolute UNIX filenames with all available files.\n *                                      This function will search for proposed filenames in this array.\n *\n * @return string[]      * All proposed filenames as an array of strings (absolute UNIX filenames)\n * * Best matches are at the beginning of the array,\n *                          worst matches are at the end of the array\n */\nfunction getProposedFilenames($missing_filename, $available_files)\n{\n    $filenames = array();\n    $filenames_tmp = array();\n\n    foreach ($available_files as $filename) {\n        if (mb_substr_count(mb_strtolower($filename), mb_strtolower(basename($missing_filename))) > 0) {\n            $filenames_tmp[] = $filename;\n        }\n    }\n\n    // remove duplicates, sort $filenames\n    $filenames_tmp = array_unique($filenames_tmp);\n    sort($filenames_tmp);\n\n    // move best matches to top\n    foreach ($filenames_tmp as $key => $filename) {\n        if (basename($filename) == basename($missing_filename)) {\n            $filenames[] = $filename;\n            unset($filenames_tmp[$key]);\n        }\n    }\n    foreach ($filenames_tmp as $key => $filename) {\n        if (pathinfo($filename, PATHINFO_FILENAME) == pathinfo($missing_filename, PATHINFO_FILENAME)) {\n            $filenames[] = $filename;\n            unset($filenames_tmp[$key]);\n        }\n    }\n    foreach ($filenames_tmp as $key => $filename) {\n        $filenames[] = $filename;\n    }\n\n    return $filenames;\n}\n\n/**\n * Build a simple template loop array with an array of values and a selected value\n *\n * @note    Have a look at system_config.php, there you can see how this function works.\n *\n * @param array $array              A simple array with keys and values\n * @param mixed $selected_value     The value of the selected item\n *\n * @return array        The template loop array\n */\nfunction arrayToTemplateLoop($array, $selected_value = null)\n{\n    $loop = array();\n    foreach ($array as $key => $value) {\n        $loop[] = array('value' => $key, 'text' => $value, 'selected' => ($key == $selected_value));\n    }\n    return $loop;\n}\n\n/**\n * Convert a Windows file path (with backslashes) to an UNIX path (with slashes)\n *\n * @note    If you pass a UNIX path, this function will return that path without any changes.\n *\n * @param string $path      a Windows or UNIX path\n *\n * @return string           the UNIX path\n */\nfunction toUnixPath($path)\n{\n    return str_replace('\\\\', '/', trim($path)); // replace all \"\\\" with \"/\"\n}\n\n/**\n * Check if a path is absolute UNIX path (begins with filesystem root and has no backslashes)\n *\n * @param string $path                  a UNIX path\n * @param boolean $accept_protocols     if true, protocols like http:// or ftp:// are interpreted as valid, absolute UNIX paths\n *\n * @return boolean          * true if the path is (maybe) absolute (we cannot say it with 100% probability) and UNIX style\n * * false if the path is definitive not absolute or definitive not an UNIX path\n * * if $path is an empty string, this function will return \"false\"\n */\nfunction isPathabsoluteAndUnix($path, $accept_protocols = true)\n{\n    if (mb_strpos($path, '\\\\') !== false) { // $path contains backslashes -> it's not a UNIX path\n        return false;\n    }\n\n    //Dont check if DOCUMENT_ROOT or BASE_RELATIVE are empty, so we dont get a warning about missing delimiter\n    if (defined(DOCUMENT_ROOT) && mb_strpos($path, DOCUMENT_ROOT) === 0) { // $path begins with DOCUMENT_ROOT\n        return true;\n    }\n\n    if (defined(BASE_RELATIVE) && mb_strpos($path, BASE_RELATIVE) === 0) { // $path begins with BASE_RELATIVE\n        return false;\n    }\n\n    if ((mb_strpos($path, '://') !== false) && ($accept_protocols)) { // there is a protocol in $path, like http://, ftp://, ...\n        return true;\n    }\n\n    if (DIRECTORY_SEPARATOR == '/') {\n        // for UNIX/Linux\n\n        if (mb_strpos($path, '/') !== 0) { // $path does not begin with a slash\n            return false;\n        } else {\n            return true;\n        } // we are not sure; maybe $path is absolute, maybe not...\n    } else {\n        // for Windows\n\n        if (mb_strpos($path, ':/') === 1) { // there is something like C:/ at the begin of $path\n            return true;\n        } else {\n            return false;\n        }\n    }\n}\n\n/**\n * Split a search string with search modifiers like \"incategory:Category1\" or \"inname:Name2\" into a array with\n * the modifier keywords in named elemets.\n *\n * @param $search_str string             the search containing the search modifiers.\n *\n * @return array            * an array with the elements name, description, comment, footprint, category,\n *                          storelocation, suppliername, partnr and manufacturername. Element is \"\" when no modifier for\n *                          this element was given.\n * * if $search_str does not contain any search modifier, then every element of the array\n *                          will contain the original search string.\n */\nfunction searchStringToArray($search_str)\n{\n    $arr = array();\n    $arr['name'] = getKeywordAfterModifier($search_str, \"inname:\");\n\n    $arr['description'] = getKeywordAfterModifier($search_str, \"indescription:\");\n    $arr['description'] = getKeywordAfterModifier($search_str, \"indesc:\");\n\n    $arr['comment'] = getKeywordAfterModifier($search_str, \"incomment:\");\n\n    $arr['footprint'] = getKeywordAfterModifier($search_str, \"infootprint:\");\n    $arr['footprint'] = getKeywordAfterModifier($search_str, \"infoot:\");\n\n    $arr['category'] = getKeywordAfterModifier($search_str, \"incategory:\");\n    $arr['category'] = getKeywordAfterModifier($search_str, \"incat:\");\n\n    $arr['storelocation'] = getKeywordAfterModifier($search_str, \"inlocation:\");\n    $arr['storelocation'] = getKeywordAfterModifier($search_str, \"inloc:\");\n\n    $arr['suppliername'] = getKeywordAfterModifier($search_str, \"insupplier:\");\n\n    $arr['partnr'] = getKeywordAfterModifier($search_str, \"inpartnr:\");\n\n    $arr['manufacturername'] = getKeywordAfterModifier($search_str, \"inmanufacturer:\");\n\n    //Check if all array entries are \"\", which means $search_str contains no modifier\n    $no_modifier = true;\n    foreach ($arr as $n) {\n        if ($n !== \"\") {\n            $no_modifier = false;\n        }\n    }\n\n    if ($no_modifier === true) {    //When no modifier exists, fill every element with $search_str (emulate the old behaviour)\n        foreach ($arr as &$n) {\n            $n = $search_str;\n        }\n    }\n\n    return $arr;\n}\n\n/***\n * Returns the keyword after a search modifier.(e.g. \"inname:Test\" with the modifier inname: would return \"Test\")\n * @param $search_str string The string which contains the modifiers and keywords.\n * @param $modifier  string The modifier which should be searched for\n * @return string Return the keyword after the modifier, if it was found. Else returns \"\".\n */\nfunction getKeywordAfterModifier($search_str, $modifier)\n{\n    $pos = strpos($search_str, $modifier);\n    if ($pos === false) {   //This modifier was not found in the search_str, so return \"\".\n        return \"\";\n    } else { //Modifier was found in the search string\n        $start = $pos + strlen($modifier);\n        if ($search_str[$start] == \"\\\"\" || $search_str[$start] == \"\\'\") { //When a quote mark is detected, then treat the text up to the next quote as one literal\n            $end = strpos($search_str, $search_str[$start], $start + 1);\n            return substr($search_str, $start + 1, $end - $start - 1);\n        } else { //Go only to the next space\n            $end = strpos($search_str, \" \", $start);\n            if ($end === false) { //The modifier was the last part of the query, so we dont need an end.\n                return substr($search_str, $start);\n            } else {\n                return substr($search_str, $start, $end - $start);\n            }\n        }\n    }\n}\n\n/**\n * Allow the usage of umlauts in the given pattern\n * @param $pattern string\n * @return string\n */\nfunction regexAllowUmlauts($pattern)\n{\n    return str_replace(\"\\w\", '[\\w\u00c4\u00e4\u00d6\u00f6\u00dc\u00fc\u00df]', $pattern);\n}\n\nfunction regexStripSlashes($pattern, $mb = true)\n{\n    if (mb_substr($pattern, 0, 1) === \"/\" &&  substr($pattern, -1, 1) === \"/\") {\n        return mb_substr($pattern, 1, -1);\n    } else {\n        return $pattern;\n    }\n}\n\n\n/**\n * Generates a <input type=\"hidden\"> Html string, with the given values.\n * @param $name  string The \"name\" attribute of the <input> element\n * @param $value string The \"value\" attribute of the <input> element\n * @return string The HTML string.\n */\nfunction generateInputHidden($name, $value = \"\")\n{\n    return '<input type=\"hidden\" name=\"' . $name . '\" value=\"' . $value . '\">';\n}\n\nfunction generateButton($name, $text, $theme = \"btn-secondary\", $val = \"\")\n{\n    return \"<button type='submit' class='btn $theme' name='$name' value='$val'>$text</button>\";\n}\n\nfunction generateButtonRed($name, $text, $theme = \"btn-danger\", $val = \"\")\n{\n    return generateButton($name, $text, $theme, $val);\n}\n\n/**\n * Checks if a string contains a specific substring\n * @param $haystack string The string which should be examined.\n * @param $needle string The string which should be searched.\n * @return bool True if $haystack contains $needle, else false.\n */\nfunction strcontains($haystack, $needle)\n{\n    if (strpos($haystack, $needle) !== false) {\n        return true;\n    } else {\n        return false;\n    }\n}\n\n/**\n * Converts an array of objects implementing the APIModel interface to an array of API objects\n * @param $array array The array of the APIModel objects.\n * @param bool $verbose Show all available informations about the IAPIModel.\n * @return IAPIModel[] An array of API objects\n * @throws Exception\n */\nfunction convertAPIModelArray($array, $verbose = false)\n{\n    if (is_null($array)) {\n        return null;\n    }\n\n    $json = array();\n    foreach ($array as $element) {\n        if (! $element instanceof IAPIModel) {\n            throw new Exception(\"The given array, contains objects that dont implement IAPIModel!\");\n        }\n        $json[] = $element->getAPIArray($verbose);\n    }\n    return $json;\n}\n\n/**\n * Try to call get_APIModel_array of $object. If $object is null, null is returned!\n * @param IAPIModel $object The object, of which the API info should be get.\n * @param bool $verbose Show all available informations about the IAPIModel, when set to true.\n *          Otherwise only most important informations are shown.\n * @return array An array describing the object.\n */\nfunction tryToGetAPIModelArray($object, $verbose = false)\n{\n    if (is_null($object)) {\n        return null;\n    } else {\n        return $object->getAPIArray($verbose);\n    }\n}\n\n/**\n * Builds a TreeView for the Tools menu\n * @param $params\n * @return array\n * @throws Exception\n */\nfunction buildToolsTree($params)\n{\n    global $config;\n\n    //Build objects\n    $current_user       = User::getLoggedInUser();\n\n    $disable_footprint = $config['footprints']['disable'];\n    $disable_manufactur = $config['manufacturers']['disable'];\n    $disable_suppliers  = $config['suppliers']['disable'];\n    $disable_devices = $config['devices']['disable'];\n    $disable_help = $config['menu']['disable_help'];\n    $disable_config = $config['menu']['disable_config'];\n    $enable_debug_link = $config['menu']['enable_debug'];\n    $disable_labels = $config['menu']['disable_labels'];\n    $disable_calculator = $config['menu']['disable_calculator'];\n    $disable_iclogos = $config['menu']['disable_iclogos'];\n    $disable_tools_footprints = $config['menu']['disable_footprints'];\n    $developer_mode = $config['developer_mode'];\n    $db_backup_name = $config['db']['backup']['name'];\n    $db_backup_url = $config['db']['backup']['url'];\n    $footprint_3d_active = $config['foot3d']['active'];\n\n\n    //Tools nodes\n    $tools_nodes = array();\n    if ($current_user->canDo(PermissionManager::TOOLS, ToolsPermission::IMPORT)) {\n        $tools_nodes[] = treeviewNode(_(\"Import\"), BASE_RELATIVE . \"/tools_import.php\");\n    }\n    if (!$disable_labels && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::LABELS)) {\n        $tools_nodes[] = treeviewNode(_(\"SMD Labels\"), BASE_RELATIVE . \"/tools_labels.php\");\n    }\n    if (!$disable_calculator && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::CALCULATOR)) {\n        $tools_nodes[] = treeviewNode(_(\"Widerstandsrechner\"), BASE_RELATIVE . \"/tools_calculator.php\");\n    }\n    if (!$disable_tools_footprints && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::FOOTPRINTS)) {\n        $tools_nodes[] = treeviewNode(_(\"Footprints\"), BASE_RELATIVE . \"/tools_footprints.php\");\n    }\n    if ($footprint_3d_active && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::FOOTPRINTS)) {\n        $tools_nodes[] = treeviewNode(_(\"3D Footprints\"), BASE_RELATIVE . \"/tools_3d_footprints.php\");\n    }\n    if (!$disable_labels && $current_user->canDo(PermissionManager::LABELS, \\PartDB\\Permissions\\LabelPermission::CREATE_LABELS)) {\n        $tools_nodes[] = treeviewNode(_(\"Labelgenerator\"), BASE_RELATIVE . \"/show_part_label.php\");\n    }\n    if (!$disable_iclogos && $current_user->canDo(PermissionManager::TOOLS, ToolsPermission::IC_LOGOS)) {\n        $tools_nodes[] = treeviewNode(_(\"IC-Logos\"), BASE_RELATIVE . \"/tools_iclogos.php\");\n    }\n\n    $system_nodes = array();\n    if ($current_user->canDo(PermissionManager::USERS, \\PartDB\\Permissions\\UserPermission::READ)) {\n        $system_nodes[] = treeviewNode(_(\"Benutzer\"), BASE_RELATIVE . \"/edit_users.php\");\n    }\n    if ($current_user->canDo(PermissionManager::GROUPS, \\PartDB\\Permissions\\GroupPermission::READ)) {\n        $system_nodes[] = treeviewNode(_(\"Gruppen\"), BASE_RELATIVE . \"/edit_groups.php\");\n    }\n    if ($current_user->canDo(PermissionManager::CONFIG, \\PartDB\\Permissions\\ConfigPermission::READ_CONFIG)\n        || $current_user->canDo(PermissionManager::CONFIG, \\PartDB\\Permissions\\ConfigPermission::SERVER_INFO)) {\n        $system_nodes[] = treeviewNode(_(\"Konfiguration\"), BASE_RELATIVE . \"/system_config.php\");\n    }\n    if ($current_user->canDo(PermissionManager::DATABASE, \\PartDB\\Permissions\\DatabasePermission::SEE_STATUS)\n        || $current_user->canDo(PermissionManager::DATABASE, \\PartDB\\Permissions\\DatabasePermission::READ_DB_SETTINGS)) {\n        $system_nodes[] = treeviewNode(_(\"Datenbank\"), BASE_RELATIVE . \"/system_database.php\");\n    }\n    if ($current_user->canDo(PermissionManager::SYSTEM, \\PartDB\\Permissions\\SystemPermission::SHOW_LOGS)\n            || $current_user->canDo(PermissionManager::SELF, \\PartDB\\Permissions\\SelfPermission::SHOW_LOGS)) {\n        $system_nodes[] = treeviewNode(_(\"Eventlog\"), BASE_RELATIVE . \"/system_log.php\");\n    }\n\n\n\n    //Show nodes\n    $show_nodes = array();\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::ORDER_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Zu bestellende Teile\"), BASE_RELATIVE . \"/show_order_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::NO_PRICE_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Teile ohne Preis\"), BASE_RELATIVE . \"/show_noprice_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::OBSOLETE_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Obsolete Bauteile\"), BASE_RELATIVE . \"/show_obsolete_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::TOOLS, ToolsPermission::STATISTICS)) {\n        $show_nodes[] = treeviewNode(_(\"Statistik\"), BASE_RELATIVE . \"/statistics.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::ALL_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Alle Teile\"), BASE_RELATIVE . \"/show_all_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::UNKNONW_INSTOCK_PARTS)) {\n        $show_nodes[] = treeviewNode(_(\"Teile mit unbekanntem Lagerbestand\"), BASE_RELATIVE . \"/show_unknown_instock_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::SHOW_FAVORITE_PARTS)) {\n        $show_nodes[] = treeviewNode(_('Favorisierte Bauteile'), BASE_RELATIVE . \"/show_favorite_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::SHOW_LAST_EDIT_PARTS)) {\n        $show_nodes[] = treeviewNode(_('Zuletzt bearbeitete Bauteile'), BASE_RELATIVE . \"/show_last_modified_parts.php\");\n    }\n    if ($current_user->canDo(PermissionManager::PARTS, PartPermission::SHOW_LAST_EDIT_PARTS)) {\n        $show_nodes[] = treeviewNode(_('Zuletzt hinzugef\u00fcgte Bauteile'), BASE_RELATIVE . \"/show_last_modified_parts.php?mode=last_created\");\n    }\n\n    //Edit nodes\n    $edit_nodes = array();\n    if (!$disable_devices && $current_user->canDo(PermissionManager::DEVICES, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Baugruppen\"), BASE_RELATIVE . \"/edit_devices.php\");\n    }\n    if ($current_user->canDo(PermissionManager::STORELOCATIONS, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Lagerorte\"), BASE_RELATIVE . \"/edit_storelocations.php\");\n    }\n    if (!$disable_footprint && $current_user->canDo(PermissionManager::FOOTRPINTS, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Footprints\"), BASE_RELATIVE . \"/edit_footprints.php\");\n    }\n    if ($current_user->canDo(PermissionManager::CATEGORIES, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Kategorien\"), BASE_RELATIVE . \"/edit_categories.php\");\n    }\n    if (!$disable_suppliers && $current_user->canDo(PermissionManager::SUPPLIERS, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Lieferanten\"), BASE_RELATIVE . \"/edit_suppliers.php\");\n    }\n    if (!$disable_manufactur && $current_user->canDo(PermissionManager::MANUFACTURERS, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Hersteller\"), BASE_RELATIVE . \"/edit_manufacturers.php\");\n    }\n    if ($current_user->canDo(PermissionManager::ATTACHEMENT_TYPES, StructuralPermission::READ)) {\n        $edit_nodes[] = treeviewNode(_(\"Dateitypen\"), BASE_RELATIVE . \"/edit_attachement_types.php\");\n    }\n    if($current_user->canDo(PermissionManager::PARTS, PartPermission::CREATE)) {\n        $edit_nodes[] = treeviewNode(_(\"Bauteil anlegen\"), BASE_RELATIVE . \"/edit_part_info.php\");\n    }\n\n    //Developer nodes\n    $dev_nodes = array();\n    $dev_nodes[] = treeviewNode(_(\"Werkzeuge\"), BASE_RELATIVE . \"/development/developer_tools.php\");\n    $dev_nodes[] = treeviewNode(_(\"Debugging\"), BASE_RELATIVE . \"/system_debug.php\");\n    $dev_nodes[] = treeviewNode(_(\"Sandkasten\"), BASE_RELATIVE . \"/development/sandbox.php\");\n    $dev_nodes[] = treeviewNode(_(\"Quellcode-Doku\"), BASE_RELATIVE . \"/development/phpdoc/html/index.html\");\n\n    //Add nodes to root\n    $tree = array();\n    if (!empty($tools_nodes)) {\n        $tree[] = treeviewNode(_(\"Tools\"), null, $tools_nodes);\n    }\n    if (!empty($edit_nodes)) {\n        $tree[] = treeviewNode(_(\"Bearbeiten\"), null, $edit_nodes);\n    }\n    if (!empty($show_nodes)) {\n        $tree[] = treeviewNode(_(\"Zeige\"), null, $show_nodes);\n    }\n    if (!$disable_config && !empty($system_nodes)) {\n        $tree[] = treeviewNode(_(\"System\"), null, $system_nodes);\n    }\n    if ($developer_mode && $current_user->canDo(PermissionManager::SYSTEM, \\PartDB\\Permissions\\SystemPermission::USE_DEBUG)) {\n        $tree[] = treeviewNode(_(\"Entwickler-Werkzeuge\"), null, $dev_nodes);\n    }\n    if (!$disable_help) {\n        $tree[] = treeviewNode(_(\"Hilfe\"), \"https://github.com/jbtronics/Part-DB/wiki\", null);\n    }\n\n\n    return $tree;\n}\n\n/**\n * Short for \"set if empty\"\n * Checks if $test is null, then set it to $default_val, else return the normal\n * @param mixed $test The value which should be checked.\n * @param mixed $default_val The value, to which the value should be set defaultly\n * @return mixed The result\n */\nfunction sie($test, $default_val = \"\")\n{\n    if (isset($test)) {\n        return $test;\n    } else {\n        return $default_val;\n    }\n}\n\n/**\n * Gets the name of the class of the given Object without the namespace.\n * @param $object mixed  The object, whose clasname should be get.\n * @return string The class name of $object.\n * @throws ReflectionException\n */\nfunction getClassShort($object)\n{\n    $reflect = new \\ReflectionClass($object);\n    return $reflect->getShortName();\n}\n\n/**\n * Checks if $var is empty. This function capsules the empty function, so we can use it for expressions.\n * @param $var mixed The variable which should be checked.\n * @return boolean\n */\nfunction _empty($var)\n{\n    return empty($var);\n}\n\n/**\n * Check if the connection to the server is using HTTPS.\n * @return bool True if the connection is using HTTPS, false if not.\n */\nfunction isUsingHTTPS()\n{\n    return\n        (!empty($_SERVER['HTTPS']) && $_SERVER['HTTPS'] !== 'off')\n        || $_SERVER['SERVER_PORT'] == 443;\n}\n\n/**\n * Generates a path, based on category structure of a part.\n * @param $base_dir string The base path for the file path structure (with trailing slash)\n * @param $element \\PartDB\\Base\\StructuralDBElement\n * @return string The generated path\n * @throws Exception\n */\nfunction generateAttachementPath($base_dir, $element)\n{\n    //Split full path into different categories\n    $categories = explode(\"@@\", $element->getFullPath(\"@@\"));\n    //Sanatize each category path\n    foreach ($categories as &$category) {\n        $category = filter_filename($category, true);\n    }\n\n    return $base_dir . \"\" . implode(\"/\", $categories). \"/\";\n}\n\n/**\n * Removes characters, that are not allowed in filenames, from the filenames.\n * @param $filename string The filename which should be parsed.\n * @param bool $beautify boolean When true, the filename gets beautified, so test---file.pdf, becomes test-file.pdf\n * @return mixed|string\n */\nfunction filter_filename($filename, $beautify = true)\n{\n    // sanitize filename\n    $filename = preg_replace(\n        '~\n        [<>:\"/\\\\|?*]|            # file system reserved https://en.wikipedia.org/wiki/Filename#Reserved_characters_and_words\n        [\\x00-\\x1F]|             # control characters http://msdn.microsoft.com/en-us/library/windows/desktop/aa365247%28v=vs.85%29.aspx\n        [\\x7F\\xA0\\xAD]|          # non-printing characters DEL, NO-BREAK SPACE, SOFT HYPHEN\n        [#\\[\\]@!$&\\'()+,;=]|     # URI reserved https://tools.ietf.org/html/rfc3986#section-2.2\n        [{}^\\~`]                 # URL unsafe characters https://www.ietf.org/rfc/rfc1738.txt\n        ~x',\n        '-',\n        $filename\n    );\n    // avoids \".\", \"..\" or \".hiddenFiles\"\n    $filename = ltrim($filename, '.-');\n    // optional beautification\n    if ($beautify) {\n        $filename = beautify_filename($filename);\n    }\n    // maximise filename length to 255 bytes http://serverfault.com/a/9548/44086\n    $ext = pathinfo($filename, PATHINFO_EXTENSION);\n    $filename = mb_strcut(pathinfo($filename, PATHINFO_FILENAME), 0, 255 - ($ext ? strlen($ext) + 1 : 0), mb_detect_encoding($filename)) . ($ext ? '.' . $ext : '');\n    return $filename;\n}\n\n/**\n * Makes a filename more beatiful. For example: file___name.zip becomes file-name.zip\n * @param $filename\n * @return mixed|string\n */\nfunction beautify_filename($filename)\n{\n    //Spaces becomes _\n    $filename = preg_replace(array('/ +/'), \"_\", $filename);\n    $filename = preg_replace(array('/_+/'), \"_\", $filename);\n    // reduce consecutive characters\n    $filename = preg_replace(array(\n        // \"file---name.zip\" becomes \"file-name.zip\"\n        '/-+/'\n    ), '-', $filename);\n    $filename = preg_replace(array(\n        // \"file--.--.-.--name.zip\" becomes \"file.name.zip\"\n        '/-*\\.-*/',\n        // \"file...name..zip\" becomes \"file.name.zip\"\n        '/\\.{2,}/'\n    ), '.', $filename);\n    // lowercase for windows/unix interoperability http://support.microsoft.com/kb/100625\n    //$filename = mb_strtolower($filename, mb_detect_encoding($filename));\n    // \".file-name.-\" becomes \"file-name\"\n    $filename = trim($filename, '.-');\n    return $filename;\n}\n\n/**\n * Recursively creates a long directory path, if it not exists.\n * @param $path string The path of the deepest folder, that should be created.\n * @return boolean Returns true, if the folder hierachy was created successful.\n */\nfunction createPath($path)\n{\n    if (is_dir($path)) {\n        return true;\n    }\n    $prev_path = substr($path, 0, strrpos($path, '/', -2) + 1);\n    $return = createPath($prev_path);\n    return ($return && is_writable($prev_path)) ? mkdir($path) : false;\n}\n\n/**\n * Check if a string is a URL and is valid.\n * @param $string string The string which should be checked.\n * @param bool $path_required If true, the string must contain a path to be valid. (e.g. foo.bar would be invalid, foo.bar/test.php would be valid).\n * @param $only_http bool Set this to true, if only HTTPS or HTTP schemata should be allowed.\n *  *Caution: When this is set to false, a attacker could use the file:// schema, to get internal server files, like /etc/passwd.*\n * @return bool True if the string is a valid URL. False, if the string is not an URL or invalid.\n */\nfunction isURL($string, $path_required = true, $only_http = true)\n{\n    if ($only_http) {   //Check if scheme is HTTPS or HTTP\n        $scheme = parse_url($string, PHP_URL_SCHEME);\n        if ($scheme !== \"http\" && $scheme !== \"https\") {\n            return false;   //All other schemes are not valid.\n        }\n    }\n    if ($path_required) {\n        return filter_var($string, FILTER_VALIDATE_URL, FILTER_FLAG_PATH_REQUIRED);\n    } else {\n        return filter_var($string, FILTER_VALIDATE_URL);\n    }\n}\n\n/**\n * Returns a Fontawesome icon for the filepath based on the file extension.\n * @param $path string The path (including filename) for which the Icon should be generated.\n * @param $with_html bool When true a whole HTML tag is generated (e.g. <i class=\"fa fa-file\" aria-hidden=\"true\"></i>).\n *      When false, only the special fa-class is returned. (e.g. fa-file)\n * @param $size string The size of the icon as an FA size class (e.g. fa-lg)\n * @return string The resulted HTML code or the fa-class.\n */\nfunction extToFAIcon($path, $with_html = true, $size = \"fa-lg\")\n{\n    $ext = pathinfo($path, PATHINFO_EXTENSION);\n    $fa_class = \"\";\n    switch ($ext) {\n        case \"pdf\":\n            $fa_class = \"fa-file-pdf\";\n            break;\n        case \"txt\":\n        case \"csv\":\n        case \"md\":\n        case \"rtf\":\n            $fa_class = \"fa-file-alt\";\n            break;\n        case \"jpg\":\n        case \"jpeg\":\n        case \"gif\":\n        case \"png\":\n        case \"svg\":\n        case \"tif\":\n        case \"tiff\":\n            $fa_class = \"fa-file-image\";\n            break;\n        case \"zip\":\n        case \"rar\":\n        case \"bz2\":\n        case \"tar\":\n        case \"7z\":\n            $fa_class = \"fa-file-archive\";\n            break;\n        case \"mp3\":\n        case \"wav\":\n        case \"aac\":\n        case \"m4a\":\n        case \"wma\":\n            $fa_class = \"fa-file-audio\";\n            break;\n        case \"mp4\":\n        case \"mkv\":\n        case \"wmv\":\n            $fa_class = \"fa-file-video\";\n            break;\n        case \"ppt\":\n        case \"pptx\":\n        case \"odp\":\n            $fa_class = \"fa-file-powerpoint\";\n            break;\n        case \"doc\":\n        case \"docx\":\n        case \"odt\":\n            $fa_class = \"fa-file-word\";\n            break;\n        case \"xls\":\n        case \"xlsx\":\n        case \"ods\":\n            $fa_class = \"fa-file-excel\";\n            break;\n        case \"php\":\n        case \"xml\":\n        case \"html\":\n        case \"js\":\n        case \"ts\":\n        case \"htm\":\n            $fa_class = \"fa-file-code\";\n            break;\n\n        default: //Use generic file icon\n            $fa_class = \"fa-file\";\n            break;\n    }\n\n    if ($with_html == false) {\n        return $fa_class;\n    }\n\n    $fa_class = $fa_class . \" \" . $size;\n\n    //Build HTML\n    return '<i class=\"far ' . $fa_class . '\" aria-hidden=\"true\"></i>';\n}\n\n/**\n * Parses the value of a Tristate Checkbox input.\n * @param $tristate_data string The Request data of the Tristate input.\n * @return int 0, if checkbox was indetermined, 1 if checkbox was checked, 2 if checkbox, was not checked.\n */\nfunction parseTristateCheckbox($tristate_data)\n{\n    switch ($tristate_data) {\n        case \"true\":\n            return 1;\n        case \"false\":\n            return 2;\n        case \"indeterminate\":\n            return 0;\n    }\n\n    throw new InvalidArgumentException(_(\"Der gegebene Wert konnte keinem Tristatewert zugeordnet werden!\"));\n}\n\n/**\n * Format the current timestamp regarding to the locale settings.\n * @param $timestamp int The timestamp which should be formatted.\n * @return string The formatted string.\n */\nfunction formatTimestamp($timestamp)\n{\n    global $config;\n    $language = $config['language'];\n    $timezone = $config['timezone'];\n\n    //Try to get the settings specific to the user.\n    try {\n        $current_user = User::getLoggedInUser();\n        $language = $current_user->getLanguage();\n        $timezone = $current_user->getTimezone();\n    } catch (Exception $ex) {\n        //Dont do anything\n    }\n\n\n    //Check if user has intl extension installed.\n    if (class_exists(\"\\IntlDateFormatter\")) {\n        $formatter = $formatter = new \\IntlDateFormatter(\n            $language,\n            IntlDateFormatter::MEDIUM,\n            IntlDateFormatter::MEDIUM,\n            $timezone\n        );\n\n        return $formatter->format($timestamp);\n    } else {\n        //Failsafe, return as non localized string.\n        return date('Y-m-d H:i:s', $timestamp);\n    }\n}\n\nfunction generatePagination($page_link, $selected_page, $limit, $max_entries, $get_params = null)\n{\n    $links = array();\n\n    $get_string = \"\";\n    $prefix = \"\";\n    //We only need the &, if the page_link does not end with ? (this is e.g. on show_all_parts.php the case)\n    if(substr($page_link, -1) != \"?\") {\n        $prefix = \"&\";\n    }\n    if(!empty($get_params)) {\n        $get_string = $prefix . http_build_query($get_params);\n    }\n\n    //Back to first page\n    $links[] = array(\"label\" => '<i class=\"fa fa-angle-double-left\" aria-hidden=\"true\"></i>',\n        \"href\" => $page_link . $prefix . \"page=1&limit=$limit\" . $get_string,\n        \"disabled\" => $selected_page == 1,\n        \"hint\" => _(\"Springe zur ersten Seite\"));\n\n    $max_page = ceil($max_entries / $limit);\n    $max_page = $max_page > 0 ? $max_page : 1;\n\n    $min_number = ($selected_page - 1) < 1 ? 1 : $selected_page -1;\n    $max_number = ($selected_page + 2) > $max_page ? $max_page : $selected_page + 2;\n\n    if ($selected_page == 0) {\n        $min_number = 1;\n        $max_number = 1;\n    }\n\n    for ($n=$min_number; $n <= $max_number; $n++) {\n        $links[] = array(\"label\" => $n,\n            \"href\" => $page_link . $prefix. \"page=\" . ($n). \"&limit=$limit\" . $get_string,\n            \"active\" => $n == $selected_page);\n    }\n\n    //Jump to last page.\n    $links[] = array(\"label\" => '<i class=\"fa fa-angle-double-right\" aria-hidden=\"true\"></i>',\n        \"href\" => $page_link . $prefix . \"page=$max_page&limit=$limit\" . $get_string,\n        \"disabled\" => $selected_page == $max_page,\n        \"hint\" => _(\"Springe zur letzten Seite\"));\n\n    //Show all results\n    $links[] = array(\"label\" => '<i class=\"fa fa-bars\" aria-hidden=\"true\"></i>',\n        \"href\" => $page_link . $prefix . \"page=0\" . $get_string,\n        \"active\" => $selected_page == 0,\n        \"hint\" => _(\"Alle anzeigen\"));\n\n    $upper_results = ($selected_page * $limit + 1) <= $max_entries && $selected_page > 0 ? $selected_page * $limit : $max_entries;\n    if($upper_results == 0) {\n        $lower_results = 0;\n    } else {\n        $lower_results = $selected_page > 0 ? ($selected_page - 1) * $limit + 1 : 1;\n    }\n\n    return array(\"lower_result\" =>  $lower_results,\n        \"upper_result\" => $upper_results,\n        \"max_entries\" => $max_entries,\n        \"entries\" => $links);\n}\n\nfunction parsePartsSelection(&$database, &$current_user, &$log, $selection, $action, $target)\n{\n    $ids = explode(\",\", $selection);\n    foreach ($ids as $id) {\n        $part = new Part($database, $current_user, $log, $id);\n        if ($action==\"delete_confirmed\") {\n            $part->delete();\n        } elseif ($action==\"move\") {\n            if ($target == \"\") {\n                throw new Exception(_(\"Bitte w\u00e4hlen sie ein Ziel zum Verschieben aus.\"));\n            }\n            $type = substr($target, 0, 1);\n            $target_id = intval(substr($target, 1));\n            //Check if target ID is valid.\n            if ($target_id < 1) {\n                throw new Exception(_(\"Ung\u00fcltige ID\"));\n            }\n            switch ($type) {\n                case \"c\": //Category\n                    $part->setCategoryID($target_id);\n                    break;\n                case \"f\": //Footptint\n                    $part->setFootprintID($target_id);\n                    break;\n                case \"m\": //Manufacturer\n                    $part->setManufacturerID($target_id);\n                    break;\n                case \"s\": //Storelocation\n                    $part->setStorelocationID($target_id);\n                    break;\n            }\n        } elseif ($action==\"favor\") {\n            $part->setFavorite(true);\n        } elseif ($action==\"defavor\") {\n            $part->setFavorite(false);\n        } elseif ($action == \"\") {\n            throw new Exception(_(\"Bitte w\u00e4hlen sie eine Aktion aus.\"));\n        } else {\n            throw new Exception(_(\"Unbekannte Aktion\"));\n        }\n    }\n}\n\nfunction build_custom_css_loop($selected = null, $include_default_theme = false)\n{\n    global $config;\n    if ($selected == null) {\n        $selected = $config['html']['custom_css'];\n    }\n\n    $loop = array();\n    if ($include_default_theme) {\n        $loop[] = array(\"value\" => \"@@\", \"text\" => _(\"Standardm\u00e4\u00dfiges Theme\"), \"selected\" => ($selected == \"@@\"));\n    }\n    $files = findAllFiles(BASE.'/templates/custom_css/', true, '.css');\n\n    foreach ($files as $file) {\n        $name = str_ireplace(BASE.'/templates/custom_css/', '', $file);\n        $loop[] = array('value' => $name, 'text' => $name, 'selected' => ($name == $selected));\n    }\n\n    return $loop;\n}\n\n/**\n * Generates a list of available profiles for the given generator.\n * @param $generator string The generator to which the profile belongs to.\n * @param $include_default bool If this is set to true, the default profile is included in the returned array.\n * @return string[] An string array with the names of all profiles\n */\nfunction buildLabelProfilesDropdown($generator, $include_default = false)\n{\n    $json_storage = new JSONStorage(BASE_DATA . \"/label_profiles.json\");\n\n    $data =  $json_storage->getKeyList($generator . \"@\");\n\n    foreach ($data as $key => &$item) {\n        $item = str_replace($generator . \"@\", \"\", $item);\n        if (!$include_default && $item == \"default\") {\n            unset($data[$key]);\n        }\n    }\n\n    return $data;\n}\n\n/**\n * Return the IP Address the current user is accessing the DB.\n * IP Addresses gets anonymized based on the ip_anonymize_mask settings.\n * @param bool|string $mask_override_ipv4 Overrides the anonymization mask for IPv4 addresses.\n *          Use false to use values from config.php. Set to \"\" to disable anonymization completly.\n * @param bool|string $mask_override_ipv6 Overrides the anonymization mask for IPv6 addresses.\n * @return string The anonymized IP Address\n */\nfunction getConnectionIPAddress($mask_override_ipv4 = false, $mask_override_ipv6 = false)\n{\n    global $config;\n\n    $raw_ip = $_SERVER['REMOTE_ADDR'];\n\n    //Determine mask for IPv4\n    if ($mask_override_ipv4 === false) {\n       $mask_ipv4 = $config['logging_system']['ip_anonymize_mask_ipv4'];\n    } else {\n        $mask_ipv4 = $mask_override_ipv4;\n    }\n\n    //Determine mask for IPv6\n    if ($mask_override_ipv6 === false) {\n        $mask_ipv6 = $config['logging_system']['ip_anonymize_mask_ipv6'];\n    } else {\n        $mask_ipv6 = $mask_override_ipv6;\n    }\n\n    if($mask_ipv4 === \"\") {\n        //Return IP address without any anonymization\n        return $raw_ip;\n    }\n\n    $ipAnonymizer = new IpAnonymizer();\n    //Set masks\n    $ipAnonymizer->ipv4NetMask = $mask_ipv4;\n    $ipAnonymizer->ipv6NetMask = $mask_ipv6;\n\n    return $ipAnonymizer->anonymize($raw_ip);\n}"], "filenames": ["inc/lib.php"], "buggy_code_start_loc": [252], "buggy_code_end_loc": [276], "fixing_code_start_loc": [253], "fixing_code_end_loc": [290], "type": "CWE-78", "message": "OS Command Injection in GitHub repository part-db/part-db prior to 0.5.11.", "other": {"cve": {"id": "CVE-2022-0848", "sourceIdentifier": "security@huntr.dev", "published": "2022-03-04T09:15:07.647", "lastModified": "2022-04-08T13:59:36.750", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "OS Command Injection in GitHub repository part-db/part-db prior to 0.5.11."}, {"lang": "es", "value": "Una Inyecci\u00f3n de Comandos del Sistema Operativo en el repositorio de GitHub part-db/part-db versiones anteriores a 0.5.11"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:C/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "CHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 10.0, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 6.0}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:C/I:C/A:C", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "COMPLETE", "integrityImpact": "COMPLETE", "availabilityImpact": "COMPLETE", "baseScore": 10.0}, "baseSeverity": "HIGH", "exploitabilityScore": 10.0, "impactScore": 10.0, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-78"}]}, {"source": "security@huntr.dev", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-78"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:part-db_project:part-db:*:*:*:*:*:*:*:*", "versionEndExcluding": "0.5.11", "matchCriteriaId": "854B4766-44A7-4A98-8687-874BED31CEDC"}]}]}], "references": [{"url": "http://packetstormsecurity.com/files/166217/part-db-0.5.11-Remote-Code-Execution.html", "source": "security@huntr.dev", "tags": ["Exploit", "Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/part-db/part-db/commit/9cd4eee393028aa4cab70fcbac284b0028c0bc95", "source": "security@huntr.dev", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://huntr.dev/bounties/3e91685f-cfb9-4ee4-abaf-9b712a8fd5a6", "source": "security@huntr.dev", "tags": ["Exploit", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/part-db/part-db/commit/9cd4eee393028aa4cab70fcbac284b0028c0bc95"}}