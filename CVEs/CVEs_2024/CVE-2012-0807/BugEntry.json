{"buggy_code": ["2012-01-11 - 0.9.33-dev\n\n    - Fixed that disabling HTTP response splitting protection also disabled NUL byte protection in HTTP headers\n    - Removed crypt() support - because not used for PHP >= 5.3.0 anyway\n\n2010-07-23 - 0.9.32.1\n\n    - Fixed missing header file resulting in compile errors\n\n2010-07-23 - 0.9.32\n\n    - Added support for memory_limit > 2GB\n    - Fixed missing header file resulting in wrong php_combined_lcg() prototype being used\n    - Improved random number seed generation more by adding /dev/urandom juice\n\n2010-03-28 - 0.9.31\n\n    - Fix ZTS build of session.c\n    - Increased session identifier entropy by using /dev/urandom if available\n\n2010-03-25 - 0.9.30\n\n    - Added line ending characters %0a and %0d to the list of dangerous characters handled\n      by suhosin.server.encode and suhosin.server.strip\n    - Fixed crash bug with PHP 5.3.x and session module (due to changed session globals struct)\n    - Added ! protection to PHP session serializer\n    - Fixed simulation mode now also affects (dis)allowed functions\n    - Fixed missing return (1); in random number generator replacements\n    - Fixed random number generator replacement error case behaviour in PHP 5.3.x\n    - Fixed error case handling in function_exists() PHP 5.3.x\n    - Merged changes/fixes in import_request_variables()/extract() from upstream PHP\n    - Fixed suhosin_header_handler to be PHP 5.3.x compatible\n    - Merge fixes and new features of PHP's file upload code to suhosin\n\n2009-08-15 - 0.9.29\n\n    - Fixing crash bugs with PHP 5.3.0 caused by unexpected NULL in EG(active_symbol_table)\n    - Added more compatible way to retrieve ext/session globals\n    - Increased default length and count limit for POST variables (for people not reading docu)\n\n2009-08-14 - 0.9.28\n\n    - Fixed crash bug with PHP 5.2.10 caused by a change in extension load order of ext/session\n    - Fixed harmless parameter order error in a bogus memset()\n    - Disable suhosin.session.cryptua by default because of Internet Explorer 8 \"features\"\n    - Added suhosin.executor.include.allow_writable_files which can be disabled to disallow \n      inclusion of files writable by the webserver\n\n2008-08-23 - 0.9.27\n\n\t- Fixed typo in replacement rand() / mt_rand() that was hidden by LAZY symbol loading\n\n2008-08-22 - 0.9.26\n\n\t- Fixed problem with suhosin.perdir\n\t  Thanks to Hosteurope for tracking this down\n\t- Fixed problems with ext/uploadprogress\n\t  Reported by: Christian Stocker\n\t- Added suhosin.srand.ignore and suhosin.mt_srand.ignore (default: on)\n\t- Modified rand()/srand() to use the Mersenne Twister algorithm with separate state \n\t- Added better internal seeding of rand() and mt_rand()\n\t\n2008-08-06 - 0.9.25\n\n\t- Fixed PHP 4 compilation problem introduced in 0.9.24\n\t- Fixed PHP 5.3 compilation problem\n\t- Changed PHP default POST handler to PHP's current handler\n\n2008-05-10 - 0.9.24\n\n    - Added support for method-calls to function handling\n    - This fixes white- and blacklist affecting methods with the same name\n\n2008-01-14 - 0.9.23\n\n    - Fixed suhosin extension now compiles with snapshots of PHP 5.3\n    - Fixed crypt() behaves like normal again when there is no salt supplied\n\n2007-12-01 - 0.9.22\n\n    - Removed LFS warning message because it crashed on several systems\n\n2007-11-30 - 0.9.21\n\n    - Fixed function_exists() now checks the Suhosin permissions\n    - Fixed crypt() salt no longer uses Blowfish by default\n    - Fixed .htaccess/perdir support\n    - Fixed compilation problem on OS/X\n    - Added protection against some attacks through _SERVER variables\n    - Added suhosin.server.strip and suhosin.server.encode\n    - Added error message that warns about the LFS binary incompatibility\n    \n2007-05-19 - 0.9.20\n\n    - Added protection flags against whitespace at variable start\n    - Added mutex around crypt() to close the PHP crypt() \n      thread safety vulnerability class\n    - Improved HTTP Response Splitting Protection\n    - Changed default maximum array depth to 50 for GPCR\n    - Fixed possible endless loop in file logging\n    - Fixed file locking in file logging\n\n2007-05-01 - 0.9.19\n\n    - Fixed typo in HTTP header protection (only during simulation mode)\n      Reported by: Ilia Alshanetsky\n    - Fixed wrong \\0 termination in cookie decryptor\n    - Fixed possible crash in SERVER variables protection when SAPI=embedded\n      Fix provided by: Olivier Blin/Mandriva Linux\n    - Added possibility to en-/disable INI_PERDIR\n      Problem reported by: Ilia Alshanetsky\n    - Added PHP Warning when disabled function is called\n    - Added examples for new configuration option in suhosin.ini\n\n2007-03-06 - 0.9.18\n\n    - Fixed session double hooking in edge case\n    - Added additional crash protection for PHP's session module\n\n2007-03-04 - 0.9.17\n\n    - Added a suhosin.ini example configuration \n      Thanks to Mandriva Linux for supplying us with one\n    - Added new logging device: file\n    - Fixed that suhosin.filter.action did not affect POST limits\n    - Fixed behaviour of request variable limit to be an upper limit\n      for the other settings instead of being additive limit\n    - Fixed hard_memory_limit bypass due to casting bug in PHP \n      Problem was found by: Ilia Alshanetsky\n    - Fixed some sql prefix/postfix problems\n    - Added experimental SQL injection heuristic\n\n2006-12-02 - 0.9.16\n\n    - Added suhosin.stealth which controls if suhosin loads in\n      stealth mode when it is not the only zend_extension\n      (Required for full compatibility with certain encoders \n       that consider open source untrusted. e.g. ionCube, Zend)\n    - Activate suhosin.stealth by default\n    - Fixed that Suhosin tries handling functions disabled by\n      disable_function. In v0.9.15 it was impossible to disable\n      phpinfo() with disable_function.\n      Problem was found by: Thorsten Schifferdecker\n    \n2006-11-28 - 0.9.15\n\n    - Added a transparent protection for open phpinfo() pages by\n      adding an HTML META ROBOTS tag to the output that forbids \n      indexing and archiving\n\n2006-11-22 - 0.9.14\n\n    - Drop wrongly decrypted cookies instead of leaving them empty\n    - Fix another problem with urlencoded cookie names\n    - Fix compilation problem with PHP4\n    - Added better regression to the release process to stop \n      compilation and missing symbol problems\n\n2006-11-20 - 0.9.13\n\n    - More compatible support for ap_php_snprintf() for old PHP\n    - Changed phpinfo() output to put suhosin logo into a data: URL\n      for Opera and Gecko based browsers when expose_php=off\n    \n2006-11-14 - 0.9.12\n\n    - Adding ap_php_snprintf() when compiling against PHP 4.3.9\n    - Added suhosin.protectkey to remove cryptkeys from phpinfo() output\n    - Disabled suhosin.cookie.encrypt in default install\n    - Fixed static compilation against PHP 5.2.0\n\n2006-11-06 - 0.9.11\n    \n    - Fixed input filter for simulation mode \n\n2006-10-26 - 0.9.10\n\n    - Fixed ZTS compile problem in new code\n    - Fixed PHP4 compile problem in new code\n\n2006-10-25 - 0.9.9\n\n    - Fixed mail() protection that failed to detect some injected headers\n    - Fixed cookie decryption to not potentially trash apache memory\n    - Fixed cookie enctyption to handle url encoded names correctly\n    - Added suhosin.cookie/session.checkraddr\n    - Added suhosin.cookie.cryptlist\n    - Added suhosin.cookie.plainlist\n    - Added suhosin_encrypt_cookie function for JS\n    - Added suhosin_get_raw_cookies function\n    - Changed dropped variable error messages\n    \n2006-10-08 - 0.9.8\n     \n    - Fixed a PHP4 ZTS compile problem\n\n2006-10-08 - 0.9.7\n\n    - Moved input handler hooking to a later place to ensure better compatibility\n      with 3rd party extensions\n    - Fixed a problem with overlong mail headers in mail protection\n    - Fixed a problem with empty log/verification script names\n    - Fixed a PHP4 compile problem with old gcc/in ZTS mode\n    - Added mbregex.h from PHP4 to solve compile problems on systesm with broken\n      header installations\n\n2006-10-02 - 0.9.6\n\n    - Disallow symlink() when open_basedir (activated by default)\n    - Fix a problem with compilation in Visual Studio\n\n2006-09-29 - 0.9.5\n\n    - Added missing logo file\n    - Added suhosin.apc_bug_workaround flag to enable compatibility with buggy APC 3.0.12x\n\n2006-09-29 - 0.9.4\n\n    - Added version number and logo to phpinfo() output\n    - Fixed that all uploaded files are dropped after a single one was disallowed\n    - Added undocumented suhosin.coredump flag to tell suhosin to dump core instead\n      of logging S_MEMORY events\n    - Disable handling of rfc1867 mbstring decoding\n\n2006-09-24 - 0.9.3\n\n    - Added protection against endless recursion for suhosin.log.phpscript\n    - Added possibility to disable open_basedir and safe_mode for suhosin.log.phpscript\n    - Added suhosin.executor.include.max_traversal to stop directory traversal includes\n\n2006-09-19 - 0.9.2\n\n    - Fixes broken rfc1867 fileupload hook\n    - Changed definition of binary to: 0..31, 128..255 except whitespace\n    - Added suhosin.log.phpscript(.name) directive to log to a PHP script\n\t\n2006-09-16 - 0.9.1\n\n    - A bunch of changes to compile and work on Windows\n\n2006-09-09 - BETA\n\n    - Added decryption of HTTP_COOKIE\n    - Fixed a last problem in suhosin_strcasestr() helper function\n\n2006-09-08 - BETA\n\n    - Fixed a problem within suhosin_strcasestr() because it broke \n      URL checks\n\n2006-09-07 - BETA\n\n    - CVS version of PHP 5.2.0 was changed to support incasesensitive \n      URLs, support for this in suhosin added\n    - Fixed a problem when preg_replace() was called with more than\n      4 parameters\n    \n", "/*\n  +----------------------------------------------------------------------+\n  | Suhosin Version 1                                                    |\n  +----------------------------------------------------------------------+\n  | Copyright (c) 2006-2007 The Hardened-PHP Project                     |\n  | Copyright (c) 2007-2012 SektionEins GmbH                             |\n  +----------------------------------------------------------------------+\n  | This source file is subject to version 3.01 of the PHP license,      |\n  | that is bundled with this package in the file LICENSE, and is        |\n  | available through the world-wide-web at the following url:           |\n  | http://www.php.net/license/3_01.txt                                  |\n  | If you did not receive a copy of the PHP license and are unable to   |\n  | obtain it through the world-wide-web, please send a note to          |\n  | license@php.net so we can mail you a copy immediately.               |\n  +----------------------------------------------------------------------+\n  | Author: Stefan Esser <sesser@sektioneins.de>                         |\n  +----------------------------------------------------------------------+\n*/\n/*\n  $Id: header.c,v 1.1.1.1 2007-11-28 01:15:35 sesser Exp $ \n*/\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"php.h\"\n#include \"php_ini.h\"\n#include \"ext/standard/info.h\"\n#include \"ext/standard/url.h\"\n#include \"php_suhosin.h\"\n#include \"SAPI.h\"\n#include \"php_variables.h\"\n\n#if PHP_VERSION_ID >= 50300\nstatic int (*orig_header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC) = NULL;\n#else\nstatic int (*orig_header_handler)(sapi_header_struct *sapi_header, sapi_headers_struct *sapi_headers TSRMLS_DC) = NULL;\n#endif\n\nchar *suhosin_encrypt_single_cookie(char *name, int name_len, char *value, int value_len, char *key TSRMLS_DC)\n{\n\tchar buffer[4096];\n    char buffer2[4096];\n\tchar *buf = buffer, *buf2 = buffer2, *d, *d_url;\n    int l;\n\n\tif (name_len > sizeof(buffer)-2) {\n\t\tbuf = estrndup(name, name_len);\n\t} else {\n\t\tmemcpy(buf, name, name_len);\n\t\tbuf[name_len] = 0;\n\t}\n\t\n\tname_len = php_url_decode(buf, name_len);\n    normalize_varname(buf);\n    name_len = strlen(buf);\n\t\n\tif (SUHOSIN_G(cookie_plainlist)) {\n\t\tif (zend_hash_exists(SUHOSIN_G(cookie_plainlist), buf, name_len+1)) {\nencrypt_return_plain:\n\t\t\tif (buf != buffer) {\n\t\t\t\tefree(buf);\n\t\t\t}\n\t\t\treturn estrndup(value, value_len);\n\t\t}\n\t} else if (SUHOSIN_G(cookie_cryptlist)) {\n\t\tif (!zend_hash_exists(SUHOSIN_G(cookie_cryptlist), buf, name_len+1)) {\n\t\t\tgoto encrypt_return_plain;\n\t\t}\n\t}\n\t\n\tif (strlen(value) <= sizeof(buffer2)-2) {\n\t\tmemcpy(buf2, value, value_len);\n\t\tbuf2[value_len] = 0;\n\t} else {\n\t\tbuf2 = estrndup(value, value_len);\n\t}\n\t\n\tvalue_len = php_url_decode(buf2, value_len);\n\t\n\td = suhosin_encrypt_string(buf2, value_len, buf, name_len, key TSRMLS_CC);\n\td_url = php_url_encode(d, strlen(d), &l);\n\tefree(d);\n    if (buf != buffer) {\n\t\tefree(buf);\n\t}\n    if (buf2 != buffer2) {\n\t\tefree(buf2);\n\t}\n\treturn d_url;\n}\n\nchar *suhosin_decrypt_single_cookie(char *name, int name_len, char *value, int value_len, char *key, char **where TSRMLS_DC)\n{\n\tchar buffer[4096];\n    char buffer2[4096];\n    int o_name_len = name_len;\n\tchar *buf = buffer, *buf2 = buffer2, *d, *d_url;\n\tint l;\n\n\tif (name_len > sizeof(buffer)-2) {\n\t\tbuf = estrndup(name, name_len);\n\t} else {\n\t\tmemcpy(buf, name, name_len);\n\t\tbuf[name_len] = 0;\n\t}\n\t\n\tname_len = php_url_decode(buf, name_len);\n    normalize_varname(buf);\n    name_len = strlen(buf);\n\t\n\tif (SUHOSIN_G(cookie_plainlist)) {\n\t\tif (zend_hash_exists(SUHOSIN_G(cookie_plainlist), buf, name_len+1)) {\ndecrypt_return_plain:\n\t\t\tif (buf != buffer) {\n\t\t\t\tefree(buf);\n\t\t\t}\n            memcpy(*where, name, o_name_len);\n            *where += o_name_len;\n            **where = '='; *where +=1;\n\t        memcpy(*where, value, value_len);\n\t        *where += value_len;\n\t\t\treturn *where;\n\t\t}\n\t} else if (SUHOSIN_G(cookie_cryptlist)) {\n\t\tif (!zend_hash_exists(SUHOSIN_G(cookie_cryptlist), buf, name_len+1)) {\n\t\t\tgoto decrypt_return_plain;\n\t\t}\n\t}\n\t\n\t\n\tif (strlen(value) <= sizeof(buffer2)-2) {\n\t\tmemcpy(buf2, value, value_len);\n\t\tbuf2[value_len] = 0;\n\t} else {\n\t\tbuf2 = estrndup(value, value_len);\n\t}\n\t\n\tvalue_len = php_url_decode(buf2, value_len);\n\t\n\td = suhosin_decrypt_string(buf2, value_len, buf, name_len, key, &l, SUHOSIN_G(cookie_checkraddr) TSRMLS_CC);\n    if (d == NULL) {\n        goto skip_cookie;\n    }\n\td_url = php_url_encode(d, l, &l);\n\tefree(d);\n    memcpy(*where, name, o_name_len);\n    *where += o_name_len;\n    **where = '=';*where += 1;\n\tmemcpy(*where, d_url, l);\n\t*where += l;\n\tefree(d_url);\nskip_cookie:\n\tif (buf != buffer) {\n\t\tefree(buf);\n\t}\n\tif (buf2 != buffer2) {\n\t\tefree(buf2);\n\t}\n\treturn *where;\n}\n\n/* {{{ suhosin_cookie_decryptor\n */\nchar *suhosin_cookie_decryptor(TSRMLS_D)\n{\n\tchar *raw_cookie = SG(request_info).cookie_data;\n\tchar *decrypted, *ret, *var, *val, *tmp;\n\tint j;\n\tchar cryptkey[33];\n\n\t/*\n\tif (...deactivated...) {\n\t\treturn estrdup(raw_cookie);\n\t}\n\t*/\n\n\tsuhosin_generate_key(SUHOSIN_G(cookie_cryptkey), SUHOSIN_G(cookie_cryptua), SUHOSIN_G(cookie_cryptdocroot), SUHOSIN_G(cookie_cryptraddr), (char *)&cryptkey TSRMLS_CC);\n\n\tret = decrypted = emalloc(strlen(raw_cookie)*4+1);\n\traw_cookie = estrdup(raw_cookie);\n    SUHOSIN_G(raw_cookie) = estrdup(raw_cookie);\n\n\t\n\tj = 0; tmp = raw_cookie;\n\twhile (*tmp) {\n\t\tchar *d_url;int varlen;\n\t\twhile (*tmp == '\\t' || *tmp == ' ') tmp++;\n\t\tvar = tmp;\n\t\twhile (*tmp && *tmp != ';' && *tmp != '=') tmp++;\n\t\t\n\t\tvarlen = tmp-var;\n\t\t/*memcpy(decrypted, var, varlen);\n\t\tdecrypted += varlen;*/\n\t\tif (*tmp == 0) break;\n\t\t\n\t\tif (*tmp++ == ';') {\n\t\t\t*decrypted++ = ';';\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t/**decrypted++ = '=';*/\n\t\t\n\t\tval = tmp;\n\t\twhile (*tmp && *tmp != ';') tmp++;\n\n\t\td_url = suhosin_decrypt_single_cookie(var, varlen, val, tmp-val, (char *)&cryptkey, &decrypted TSRMLS_CC);\n\t\tif (*tmp == ';') {\n\t\t\t*decrypted++ = ';';\n\t\t}\n\t\t\n\t\tif (*tmp == 0) break;\n\t\ttmp++;\n\t}\n\t*decrypted++ = 0;\n\tret = erealloc(ret, decrypted-ret);\n\t\n\tSUHOSIN_G(decrypted_cookie) = ret;\n\tefree(raw_cookie);\n\t\t\n\treturn ret;\n}\n/* }}} */\n\n/* {{{ suhosin_header_handler\n */\n#if PHP_VERSION_ID >= 50300\nint suhosin_header_handler(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC)\n#else\nint suhosin_header_handler(sapi_header_struct *sapi_header, sapi_headers_struct *sapi_headers TSRMLS_DC)\n#endif\n{\n\tint retval = SAPI_HEADER_ADD, i;\n\tchar *tmp;\n\n#if PHP_VERSION_ID >= 50300\n\tif (op != SAPI_HEADER_ADD && op != SAPI_HEADER_REPLACE) {\n                goto suhosin_skip_header_handling;\n\t}\n#endif\n\t\n\tif (sapi_header && sapi_header->header) {\n\t\n\t\ttmp = sapi_header->header;\n\n\t\tfor (i=0; i<sapi_header->header_len; i++, tmp++) {\n\t\t\tif (tmp[0] == 0) {\n\t\t\t\tchar *fname = get_active_function_name(TSRMLS_C);\n\n\t\t\t\tif (!fname) {\n\t\t\t\t\tfname = \"unknown\";\n\t\t\t\t}\n\n\t\t\t\tsuhosin_log(S_MISC, \"%s() - wanted to send a HTTP header with an ASCII NUL in it\", fname);\n\t\t\t\tif (!SUHOSIN_G(simulation)) {\n\t\t\t\t\tsapi_header->header_len = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (SUHOSIN_G(allow_multiheader)) {\n\t\t\t\tcontinue;\n\t\t\t} else if ((tmp[0] == '\\r' && (tmp[1] != '\\n' || i == 0)) || \n\t\t\t   (tmp[0] == '\\n' && (i == sapi_header->header_len-1 || i == 0 || (tmp[1] != ' ' && tmp[1] != '\\t')))) {\n\t\t\t\tchar *fname = get_active_function_name(TSRMLS_C);\n\n\t\t\t\tif (!fname) {\n\t\t\t\t\tfname = \"unknown\";\n\t\t\t\t}\n\n\t\t\t\tsuhosin_log(S_MISC, \"%s() - wanted to send multiple HTTP headers at once\", fname);\n\t\t\t\tif (!SUHOSIN_G(simulation)) {\n\t\t\t\t\tsapi_header->header_len = i;\n\t\t\t\t\ttmp[0] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Handle a potential cookie */\n\n\tif (SUHOSIN_G(cookie_encrypt) && (strncasecmp(\"Set-Cookie:\", sapi_header->header, sizeof(\"Set-Cookie:\")-1) == 0)) {\n\n\t\tchar *start, *end, *rend, *tmp;\n    \t\tchar *name, *value;\n    \t\tint nlen, vlen, len, tlen;\n\t\tchar cryptkey[33];\n\n\t\tsuhosin_generate_key(SUHOSIN_G(cookie_cryptkey), SUHOSIN_G(cookie_cryptua), SUHOSIN_G(cookie_cryptdocroot), SUHOSIN_G(cookie_cryptraddr), (char *)&cryptkey TSRMLS_CC);\n\t\tstart = estrndup(sapi_header->header, sapi_header->header_len);\n\t\trend = end = start + sapi_header->header_len;\n\n\t\ttmp = memchr(start, ';', end-start);\n\t\tif (tmp != NULL) {\n\t\t\tend = tmp;\n\t\t}\n\n\t\ttmp = start + sizeof(\"Set-Cookie:\") - 1;\n\t\twhile (tmp < end && tmp[0]==' ') {\n\t\t\ttmp++;\n\t\t}\n\t\tname = tmp;\n\t\tnlen = end-name;\n\t\ttmp = memchr(name, '=', nlen);\n\t\tif (tmp == NULL) {\n\t\t\tvalue = end;\n\t\t} else {\n\t\t\tvalue = tmp+1;\n\t\t\tnlen = tmp-name;\n\t\t}\n\t\tvlen = end-value;\n\n\t\tvalue = suhosin_encrypt_single_cookie(name, nlen, value, vlen, (char *)&cryptkey TSRMLS_CC); \n\t\tvlen = strlen(value);\n\t\t\n\t\tlen = sizeof(\"Set-Cookie: \")-1 + nlen + 1 + vlen + rend-end;\n\t\ttmp = emalloc(len + 1);\n\t\ttlen = sprintf(tmp, \"Set-Cookie: %.*s=%s\", nlen,name, value);\n\t\tmemcpy(tmp + tlen, end, rend-end);\n\t\ttmp[len] = 0;\n\n\t\tefree(sapi_header->header);\n\t\tefree(value);\n\t\tefree(start);\n\n\t\tsapi_header->header = tmp;\n\t\tsapi_header->header_len = len;\n\t}\n\nsuhosin_skip_header_handling:\n\t/* If existing call the sapi header handler */\n\tif (orig_header_handler) {\n#if PHP_VERSION_ID >= 50300\n\t\tretval = orig_header_handler(sapi_header, op, sapi_headers TSRMLS_CC);\n#else\n\t\tretval = orig_header_handler(sapi_header, sapi_headers TSRMLS_CC);\n#endif\n\t}\n\n\treturn retval;\n}\n/* }}} */\n\n\n/* {{{ suhosin_hook_header_handler\n */\nvoid suhosin_hook_header_handler()\n{\n\tif (orig_header_handler == NULL) {\n\t\torig_header_handler = sapi_module.header_handler;\n\t\tsapi_module.header_handler = suhosin_header_handler;\n\t}\n}\n/* }}} */\n\n/* {{{ suhosin_unhook_header_handler\n */\nvoid suhosin_unhook_header_handler()\n{\n\tsapi_module.header_handler = orig_header_handler;\n\torig_header_handler = NULL;\n}\n/* }}} */\n\n\n/*\n * Local variables:\n * tab-width: 4\n * c-basic-offset: 4\n * End:\n * vim600: noet sw=4 ts=4 fdm=marker\n * vim<600: noet sw=4 ts=4\n */\n\n\n"], "fixing_code": ["2012-01-11 - 0.9.33-dev\n\n    - Fixed stack based buffer overflow in transparent cookie encryption (see separate advisory)\n    - Fixed that disabling HTTP response splitting protection also disabled NUL byte protection in HTTP headers\n    - Removed crypt() support - because not used for PHP >= 5.3.0 anyway\n\n2010-07-23 - 0.9.32.1\n\n    - Fixed missing header file resulting in compile errors\n\n2010-07-23 - 0.9.32\n\n    - Added support for memory_limit > 2GB\n    - Fixed missing header file resulting in wrong php_combined_lcg() prototype being used\n    - Improved random number seed generation more by adding /dev/urandom juice\n\n2010-03-28 - 0.9.31\n\n    - Fix ZTS build of session.c\n    - Increased session identifier entropy by using /dev/urandom if available\n\n2010-03-25 - 0.9.30\n\n    - Added line ending characters %0a and %0d to the list of dangerous characters handled\n      by suhosin.server.encode and suhosin.server.strip\n    - Fixed crash bug with PHP 5.3.x and session module (due to changed session globals struct)\n    - Added ! protection to PHP session serializer\n    - Fixed simulation mode now also affects (dis)allowed functions\n    - Fixed missing return (1); in random number generator replacements\n    - Fixed random number generator replacement error case behaviour in PHP 5.3.x\n    - Fixed error case handling in function_exists() PHP 5.3.x\n    - Merged changes/fixes in import_request_variables()/extract() from upstream PHP\n    - Fixed suhosin_header_handler to be PHP 5.3.x compatible\n    - Merge fixes and new features of PHP's file upload code to suhosin\n\n2009-08-15 - 0.9.29\n\n    - Fixing crash bugs with PHP 5.3.0 caused by unexpected NULL in EG(active_symbol_table)\n    - Added more compatible way to retrieve ext/session globals\n    - Increased default length and count limit for POST variables (for people not reading docu)\n\n2009-08-14 - 0.9.28\n\n    - Fixed crash bug with PHP 5.2.10 caused by a change in extension load order of ext/session\n    - Fixed harmless parameter order error in a bogus memset()\n    - Disable suhosin.session.cryptua by default because of Internet Explorer 8 \"features\"\n    - Added suhosin.executor.include.allow_writable_files which can be disabled to disallow \n      inclusion of files writable by the webserver\n\n2008-08-23 - 0.9.27\n\n\t- Fixed typo in replacement rand() / mt_rand() that was hidden by LAZY symbol loading\n\n2008-08-22 - 0.9.26\n\n\t- Fixed problem with suhosin.perdir\n\t  Thanks to Hosteurope for tracking this down\n\t- Fixed problems with ext/uploadprogress\n\t  Reported by: Christian Stocker\n\t- Added suhosin.srand.ignore and suhosin.mt_srand.ignore (default: on)\n\t- Modified rand()/srand() to use the Mersenne Twister algorithm with separate state \n\t- Added better internal seeding of rand() and mt_rand()\n\t\n2008-08-06 - 0.9.25\n\n\t- Fixed PHP 4 compilation problem introduced in 0.9.24\n\t- Fixed PHP 5.3 compilation problem\n\t- Changed PHP default POST handler to PHP's current handler\n\n2008-05-10 - 0.9.24\n\n    - Added support for method-calls to function handling\n    - This fixes white- and blacklist affecting methods with the same name\n\n2008-01-14 - 0.9.23\n\n    - Fixed suhosin extension now compiles with snapshots of PHP 5.3\n    - Fixed crypt() behaves like normal again when there is no salt supplied\n\n2007-12-01 - 0.9.22\n\n    - Removed LFS warning message because it crashed on several systems\n\n2007-11-30 - 0.9.21\n\n    - Fixed function_exists() now checks the Suhosin permissions\n    - Fixed crypt() salt no longer uses Blowfish by default\n    - Fixed .htaccess/perdir support\n    - Fixed compilation problem on OS/X\n    - Added protection against some attacks through _SERVER variables\n    - Added suhosin.server.strip and suhosin.server.encode\n    - Added error message that warns about the LFS binary incompatibility\n    \n2007-05-19 - 0.9.20\n\n    - Added protection flags against whitespace at variable start\n    - Added mutex around crypt() to close the PHP crypt() \n      thread safety vulnerability class\n    - Improved HTTP Response Splitting Protection\n    - Changed default maximum array depth to 50 for GPCR\n    - Fixed possible endless loop in file logging\n    - Fixed file locking in file logging\n\n2007-05-01 - 0.9.19\n\n    - Fixed typo in HTTP header protection (only during simulation mode)\n      Reported by: Ilia Alshanetsky\n    - Fixed wrong \\0 termination in cookie decryptor\n    - Fixed possible crash in SERVER variables protection when SAPI=embedded\n      Fix provided by: Olivier Blin/Mandriva Linux\n    - Added possibility to en-/disable INI_PERDIR\n      Problem reported by: Ilia Alshanetsky\n    - Added PHP Warning when disabled function is called\n    - Added examples for new configuration option in suhosin.ini\n\n2007-03-06 - 0.9.18\n\n    - Fixed session double hooking in edge case\n    - Added additional crash protection for PHP's session module\n\n2007-03-04 - 0.9.17\n\n    - Added a suhosin.ini example configuration \n      Thanks to Mandriva Linux for supplying us with one\n    - Added new logging device: file\n    - Fixed that suhosin.filter.action did not affect POST limits\n    - Fixed behaviour of request variable limit to be an upper limit\n      for the other settings instead of being additive limit\n    - Fixed hard_memory_limit bypass due to casting bug in PHP \n      Problem was found by: Ilia Alshanetsky\n    - Fixed some sql prefix/postfix problems\n    - Added experimental SQL injection heuristic\n\n2006-12-02 - 0.9.16\n\n    - Added suhosin.stealth which controls if suhosin loads in\n      stealth mode when it is not the only zend_extension\n      (Required for full compatibility with certain encoders \n       that consider open source untrusted. e.g. ionCube, Zend)\n    - Activate suhosin.stealth by default\n    - Fixed that Suhosin tries handling functions disabled by\n      disable_function. In v0.9.15 it was impossible to disable\n      phpinfo() with disable_function.\n      Problem was found by: Thorsten Schifferdecker\n    \n2006-11-28 - 0.9.15\n\n    - Added a transparent protection for open phpinfo() pages by\n      adding an HTML META ROBOTS tag to the output that forbids \n      indexing and archiving\n\n2006-11-22 - 0.9.14\n\n    - Drop wrongly decrypted cookies instead of leaving them empty\n    - Fix another problem with urlencoded cookie names\n    - Fix compilation problem with PHP4\n    - Added better regression to the release process to stop \n      compilation and missing symbol problems\n\n2006-11-20 - 0.9.13\n\n    - More compatible support for ap_php_snprintf() for old PHP\n    - Changed phpinfo() output to put suhosin logo into a data: URL\n      for Opera and Gecko based browsers when expose_php=off\n    \n2006-11-14 - 0.9.12\n\n    - Adding ap_php_snprintf() when compiling against PHP 4.3.9\n    - Added suhosin.protectkey to remove cryptkeys from phpinfo() output\n    - Disabled suhosin.cookie.encrypt in default install\n    - Fixed static compilation against PHP 5.2.0\n\n2006-11-06 - 0.9.11\n    \n    - Fixed input filter for simulation mode \n\n2006-10-26 - 0.9.10\n\n    - Fixed ZTS compile problem in new code\n    - Fixed PHP4 compile problem in new code\n\n2006-10-25 - 0.9.9\n\n    - Fixed mail() protection that failed to detect some injected headers\n    - Fixed cookie decryption to not potentially trash apache memory\n    - Fixed cookie enctyption to handle url encoded names correctly\n    - Added suhosin.cookie/session.checkraddr\n    - Added suhosin.cookie.cryptlist\n    - Added suhosin.cookie.plainlist\n    - Added suhosin_encrypt_cookie function for JS\n    - Added suhosin_get_raw_cookies function\n    - Changed dropped variable error messages\n    \n2006-10-08 - 0.9.8\n     \n    - Fixed a PHP4 ZTS compile problem\n\n2006-10-08 - 0.9.7\n\n    - Moved input handler hooking to a later place to ensure better compatibility\n      with 3rd party extensions\n    - Fixed a problem with overlong mail headers in mail protection\n    - Fixed a problem with empty log/verification script names\n    - Fixed a PHP4 compile problem with old gcc/in ZTS mode\n    - Added mbregex.h from PHP4 to solve compile problems on systesm with broken\n      header installations\n\n2006-10-02 - 0.9.6\n\n    - Disallow symlink() when open_basedir (activated by default)\n    - Fix a problem with compilation in Visual Studio\n\n2006-09-29 - 0.9.5\n\n    - Added missing logo file\n    - Added suhosin.apc_bug_workaround flag to enable compatibility with buggy APC 3.0.12x\n\n2006-09-29 - 0.9.4\n\n    - Added version number and logo to phpinfo() output\n    - Fixed that all uploaded files are dropped after a single one was disallowed\n    - Added undocumented suhosin.coredump flag to tell suhosin to dump core instead\n      of logging S_MEMORY events\n    - Disable handling of rfc1867 mbstring decoding\n\n2006-09-24 - 0.9.3\n\n    - Added protection against endless recursion for suhosin.log.phpscript\n    - Added possibility to disable open_basedir and safe_mode for suhosin.log.phpscript\n    - Added suhosin.executor.include.max_traversal to stop directory traversal includes\n\n2006-09-19 - 0.9.2\n\n    - Fixes broken rfc1867 fileupload hook\n    - Changed definition of binary to: 0..31, 128..255 except whitespace\n    - Added suhosin.log.phpscript(.name) directive to log to a PHP script\n\t\n2006-09-16 - 0.9.1\n\n    - A bunch of changes to compile and work on Windows\n\n2006-09-09 - BETA\n\n    - Added decryption of HTTP_COOKIE\n    - Fixed a last problem in suhosin_strcasestr() helper function\n\n2006-09-08 - BETA\n\n    - Fixed a problem within suhosin_strcasestr() because it broke \n      URL checks\n\n2006-09-07 - BETA\n\n    - CVS version of PHP 5.2.0 was changed to support incasesensitive \n      URLs, support for this in suhosin added\n    - Fixed a problem when preg_replace() was called with more than\n      4 parameters\n    \n", "/*\n  +----------------------------------------------------------------------+\n  | Suhosin Version 1                                                    |\n  +----------------------------------------------------------------------+\n  | Copyright (c) 2006-2007 The Hardened-PHP Project                     |\n  | Copyright (c) 2007-2012 SektionEins GmbH                             |\n  +----------------------------------------------------------------------+\n  | This source file is subject to version 3.01 of the PHP license,      |\n  | that is bundled with this package in the file LICENSE, and is        |\n  | available through the world-wide-web at the following url:           |\n  | http://www.php.net/license/3_01.txt                                  |\n  | If you did not receive a copy of the PHP license and are unable to   |\n  | obtain it through the world-wide-web, please send a note to          |\n  | license@php.net so we can mail you a copy immediately.               |\n  +----------------------------------------------------------------------+\n  | Author: Stefan Esser <sesser@sektioneins.de>                         |\n  +----------------------------------------------------------------------+\n*/\n/*\n  $Id: header.c,v 1.1.1.1 2007-11-28 01:15:35 sesser Exp $ \n*/\n\n#ifdef HAVE_CONFIG_H\n#include \"config.h\"\n#endif\n\n#include \"php.h\"\n#include \"php_ini.h\"\n#include \"ext/standard/info.h\"\n#include \"ext/standard/url.h\"\n#include \"php_suhosin.h\"\n#include \"SAPI.h\"\n#include \"php_variables.h\"\n\n#if PHP_VERSION_ID >= 50300\nstatic int (*orig_header_handler)(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC) = NULL;\n#else\nstatic int (*orig_header_handler)(sapi_header_struct *sapi_header, sapi_headers_struct *sapi_headers TSRMLS_DC) = NULL;\n#endif\n\nchar *suhosin_encrypt_single_cookie(char *name, int name_len, char *value, int value_len, char *key TSRMLS_DC)\n{\n\tchar *buf, *buf2, *d, *d_url;\n\tint l;\n\n\tbuf = estrndup(name, name_len);\n\t\n\t\n\tname_len = php_url_decode(buf, name_len);\n\tnormalize_varname(buf);\n\tname_len = strlen(buf);\n\t\n\tif (SUHOSIN_G(cookie_plainlist)) {\n\t\tif (zend_hash_exists(SUHOSIN_G(cookie_plainlist), buf, name_len+1)) {\nencrypt_return_plain:\n\t\t\tefree(buf);\n\t\t\treturn estrndup(value, value_len);\n\t\t}\n\t} else if (SUHOSIN_G(cookie_cryptlist)) {\n\t\tif (!zend_hash_exists(SUHOSIN_G(cookie_cryptlist), buf, name_len+1)) {\n\t\t\tgoto encrypt_return_plain;\n\t\t}\n\t}\n\t\n\tbuf2 = estrndup(value, value_len);\n\t\n\tvalue_len = php_url_decode(buf2, value_len);\n\t\n\td = suhosin_encrypt_string(buf2, value_len, buf, name_len, key TSRMLS_CC);\n\td_url = php_url_encode(d, strlen(d), &l);\n\tefree(d);\n\tefree(buf);\n\tefree(buf2);\n\treturn d_url;\n}\n\nchar *suhosin_decrypt_single_cookie(char *name, int name_len, char *value, int value_len, char *key, char **where TSRMLS_DC)\n{\n    int o_name_len = name_len;\n\tchar *buf, *buf2, *d, *d_url;\n\tint l;\n\n\tbuf = estrndup(name, name_len);\n\t\t\n\tname_len = php_url_decode(buf, name_len);\n\tnormalize_varname(buf);\n\tname_len = strlen(buf);\n\t\n\tif (SUHOSIN_G(cookie_plainlist)) {\n\t\tif (zend_hash_exists(SUHOSIN_G(cookie_plainlist), buf, name_len+1)) {\ndecrypt_return_plain:\n\t\t\tefree(buf);\n            memcpy(*where, name, o_name_len);\n            *where += o_name_len;\n            **where = '='; *where +=1;\n\t        memcpy(*where, value, value_len);\n\t        *where += value_len;\n\t\t\treturn *where;\n\t\t}\n\t} else if (SUHOSIN_G(cookie_cryptlist)) {\n\t\tif (!zend_hash_exists(SUHOSIN_G(cookie_cryptlist), buf, name_len+1)) {\n\t\t\tgoto decrypt_return_plain;\n\t\t}\n\t}\n\t\n\t\n\tbuf2 = estrndup(value, value_len);\n\t\n\tvalue_len = php_url_decode(buf2, value_len);\n\t\n\td = suhosin_decrypt_string(buf2, value_len, buf, name_len, key, &l, SUHOSIN_G(cookie_checkraddr) TSRMLS_CC);\n    if (d == NULL) {\n        goto skip_cookie;\n    }\n\td_url = php_url_encode(d, l, &l);\n\tefree(d);\n    memcpy(*where, name, o_name_len);\n    *where += o_name_len;\n    **where = '=';*where += 1;\n\tmemcpy(*where, d_url, l);\n\t*where += l;\n\tefree(d_url);\nskip_cookie:\n\tefree(buf);\n\tefree(buf2);\n\treturn *where;\n}\n\n/* {{{ suhosin_cookie_decryptor\n */\nchar *suhosin_cookie_decryptor(TSRMLS_D)\n{\n\tchar *raw_cookie = SG(request_info).cookie_data;\n\tchar *decrypted, *ret, *var, *val, *tmp;\n\tint j;\n\tchar cryptkey[33];\n\n\t/*\n\tif (...deactivated...) {\n\t\treturn estrdup(raw_cookie);\n\t}\n\t*/\n\n\tsuhosin_generate_key(SUHOSIN_G(cookie_cryptkey), SUHOSIN_G(cookie_cryptua), SUHOSIN_G(cookie_cryptdocroot), SUHOSIN_G(cookie_cryptraddr), (char *)&cryptkey TSRMLS_CC);\n\n\tret = decrypted = emalloc(strlen(raw_cookie)*4+1);\n\traw_cookie = estrdup(raw_cookie);\n    SUHOSIN_G(raw_cookie) = estrdup(raw_cookie);\n\n\t\n\tj = 0; tmp = raw_cookie;\n\twhile (*tmp) {\n\t\tchar *d_url;int varlen;\n\t\twhile (*tmp == '\\t' || *tmp == ' ') tmp++;\n\t\tvar = tmp;\n\t\twhile (*tmp && *tmp != ';' && *tmp != '=') tmp++;\n\t\t\n\t\tvarlen = tmp-var;\n\t\t/*memcpy(decrypted, var, varlen);\n\t\tdecrypted += varlen;*/\n\t\tif (*tmp == 0) break;\n\t\t\n\t\tif (*tmp++ == ';') {\n\t\t\t*decrypted++ = ';';\n\t\t\tcontinue;\n\t\t}\n\t\t\n\t\t/**decrypted++ = '=';*/\n\t\t\n\t\tval = tmp;\n\t\twhile (*tmp && *tmp != ';') tmp++;\n\n\t\td_url = suhosin_decrypt_single_cookie(var, varlen, val, tmp-val, (char *)&cryptkey, &decrypted TSRMLS_CC);\n\t\tif (*tmp == ';') {\n\t\t\t*decrypted++ = ';';\n\t\t}\n\t\t\n\t\tif (*tmp == 0) break;\n\t\ttmp++;\n\t}\n\t*decrypted++ = 0;\n\tret = erealloc(ret, decrypted-ret);\n\t\n\tSUHOSIN_G(decrypted_cookie) = ret;\n\tefree(raw_cookie);\n\t\t\n\treturn ret;\n}\n/* }}} */\n\n/* {{{ suhosin_header_handler\n */\n#if PHP_VERSION_ID >= 50300\nint suhosin_header_handler(sapi_header_struct *sapi_header, sapi_header_op_enum op, sapi_headers_struct *sapi_headers TSRMLS_DC)\n#else\nint suhosin_header_handler(sapi_header_struct *sapi_header, sapi_headers_struct *sapi_headers TSRMLS_DC)\n#endif\n{\n\tint retval = SAPI_HEADER_ADD, i;\n\tchar *tmp;\n\n#if PHP_VERSION_ID >= 50300\n\tif (op != SAPI_HEADER_ADD && op != SAPI_HEADER_REPLACE) {\n                goto suhosin_skip_header_handling;\n\t}\n#endif\n\t\n\tif (sapi_header && sapi_header->header) {\n\t\n\t\ttmp = sapi_header->header;\n\n\t\tfor (i=0; i<sapi_header->header_len; i++, tmp++) {\n\t\t\tif (tmp[0] == 0) {\n\t\t\t\tchar *fname = get_active_function_name(TSRMLS_C);\n\n\t\t\t\tif (!fname) {\n\t\t\t\t\tfname = \"unknown\";\n\t\t\t\t}\n\n\t\t\t\tsuhosin_log(S_MISC, \"%s() - wanted to send a HTTP header with an ASCII NUL in it\", fname);\n\t\t\t\tif (!SUHOSIN_G(simulation)) {\n\t\t\t\t\tsapi_header->header_len = i;\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (SUHOSIN_G(allow_multiheader)) {\n\t\t\t\tcontinue;\n\t\t\t} else if ((tmp[0] == '\\r' && (tmp[1] != '\\n' || i == 0)) || \n\t\t\t   (tmp[0] == '\\n' && (i == sapi_header->header_len-1 || i == 0 || (tmp[1] != ' ' && tmp[1] != '\\t')))) {\n\t\t\t\tchar *fname = get_active_function_name(TSRMLS_C);\n\n\t\t\t\tif (!fname) {\n\t\t\t\t\tfname = \"unknown\";\n\t\t\t\t}\n\n\t\t\t\tsuhosin_log(S_MISC, \"%s() - wanted to send multiple HTTP headers at once\", fname);\n\t\t\t\tif (!SUHOSIN_G(simulation)) {\n\t\t\t\t\tsapi_header->header_len = i;\n\t\t\t\t\ttmp[0] = 0;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\t/* Handle a potential cookie */\n\n\tif (SUHOSIN_G(cookie_encrypt) && (strncasecmp(\"Set-Cookie:\", sapi_header->header, sizeof(\"Set-Cookie:\")-1) == 0)) {\n\n\t\tchar *start, *end, *rend, *tmp;\n    \t\tchar *name, *value;\n    \t\tint nlen, vlen, len, tlen;\n\t\tchar cryptkey[33];\n\n\t\tsuhosin_generate_key(SUHOSIN_G(cookie_cryptkey), SUHOSIN_G(cookie_cryptua), SUHOSIN_G(cookie_cryptdocroot), SUHOSIN_G(cookie_cryptraddr), (char *)&cryptkey TSRMLS_CC);\n\t\tstart = estrndup(sapi_header->header, sapi_header->header_len);\n\t\trend = end = start + sapi_header->header_len;\n\n\t\ttmp = memchr(start, ';', end-start);\n\t\tif (tmp != NULL) {\n\t\t\tend = tmp;\n\t\t}\n\n\t\ttmp = start + sizeof(\"Set-Cookie:\") - 1;\n\t\twhile (tmp < end && tmp[0]==' ') {\n\t\t\ttmp++;\n\t\t}\n\t\tname = tmp;\n\t\tnlen = end-name;\n\t\ttmp = memchr(name, '=', nlen);\n\t\tif (tmp == NULL) {\n\t\t\tvalue = end;\n\t\t} else {\n\t\t\tvalue = tmp+1;\n\t\t\tnlen = tmp-name;\n\t\t}\n\t\tvlen = end-value;\n\n\t\tvalue = suhosin_encrypt_single_cookie(name, nlen, value, vlen, (char *)&cryptkey TSRMLS_CC); \n\t\tvlen = strlen(value);\n\t\t\n\t\tlen = sizeof(\"Set-Cookie: \")-1 + nlen + 1 + vlen + rend-end;\n\t\ttmp = emalloc(len + 1);\n\t\ttlen = sprintf(tmp, \"Set-Cookie: %.*s=%s\", nlen,name, value);\n\t\tmemcpy(tmp + tlen, end, rend-end);\n\t\ttmp[len] = 0;\n\n\t\tefree(sapi_header->header);\n\t\tefree(value);\n\t\tefree(start);\n\n\t\tsapi_header->header = tmp;\n\t\tsapi_header->header_len = len;\n\t}\n\nsuhosin_skip_header_handling:\n\t/* If existing call the sapi header handler */\n\tif (orig_header_handler) {\n#if PHP_VERSION_ID >= 50300\n\t\tretval = orig_header_handler(sapi_header, op, sapi_headers TSRMLS_CC);\n#else\n\t\tretval = orig_header_handler(sapi_header, sapi_headers TSRMLS_CC);\n#endif\n\t}\n\n\treturn retval;\n}\n/* }}} */\n\n\n/* {{{ suhosin_hook_header_handler\n */\nvoid suhosin_hook_header_handler()\n{\n\tif (orig_header_handler == NULL) {\n\t\torig_header_handler = sapi_module.header_handler;\n\t\tsapi_module.header_handler = suhosin_header_handler;\n\t}\n}\n/* }}} */\n\n/* {{{ suhosin_unhook_header_handler\n */\nvoid suhosin_unhook_header_handler()\n{\n\tsapi_module.header_handler = orig_header_handler;\n\torig_header_handler = NULL;\n}\n/* }}} */\n\n\n/*\n * Local variables:\n * tab-width: 4\n * c-basic-offset: 4\n * End:\n * vim600: noet sw=4 ts=4 fdm=marker\n * vim<600: noet sw=4 ts=4\n */\n\n\n"], "filenames": ["Changelog", "header.c"], "buggy_code_start_loc": [2, 43], "buggy_code_end_loc": [2, 161], "fixing_code_start_loc": [3, 43], "fixing_code_end_loc": [4, 126], "type": "CWE-119", "message": "Stack-based buffer overflow in the suhosin_encrypt_single_cookie function in the transparent cookie-encryption feature in the Suhosin extension before 0.9.33 for PHP, when suhosin.cookie.encrypt and suhosin.multiheader are enabled, might allow remote attackers to execute arbitrary code via a long string that is used in a Set-Cookie HTTP header.", "other": {"cve": {"id": "CVE-2012-0807", "sourceIdentifier": "secalert@redhat.com", "published": "2012-01-27T00:55:01.297", "lastModified": "2018-01-18T02:29:07.600", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Stack-based buffer overflow in the suhosin_encrypt_single_cookie function in the transparent cookie-encryption feature in the Suhosin extension before 0.9.33 for PHP, when suhosin.cookie.encrypt and suhosin.multiheader are enabled, might allow remote attackers to execute arbitrary code via a long string that is used in a Set-Cookie HTTP header."}, {"lang": "es", "value": "Desbordamiento de b\u00fafer basado en pila en la funci\u00f3n suhosin_encrypt_single_cookie en el transparente cookies cifrado de la extensi\u00f3n anterior de Suhosin v0.9.33 para PHP, cuando suhosin.cookie.encrypt y suhosin.multiheader est\u00e1n habilitados, podr\u00eda permitir a atacantes remotos ejecutar c\u00f3digo arbitrario a trav\u00e9s de un larga cadena que se utiliza en una cabecera Set-Cookie HTTP."}], "metrics": {"cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:H/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "HIGH", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 5.1}, "baseSeverity": "MEDIUM", "exploitabilityScore": 4.9, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:*:beta_2006.09.07:*:*:*:*:*:*", "matchCriteriaId": "1B1CF1F8-4A6B-4ABA-A07D-0E58B633138A"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:*:beta_2006.09.09:*:*:*:*:*:*", "matchCriteriaId": "3ED57AA4-0920-488E-A842-B44B86D230D3"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:*:*:*:*:*:*:*:*", "versionEndIncluding": "0.9.31", "matchCriteriaId": "D6A6A023-FAD1-4841-8C9E-F339B36BE1C2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.0:*:*:*:*:*:*:*", "matchCriteriaId": "0DFBFC80-CFD9-4D06-9E6D-F500059D776D"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.1:*:*:*:*:*:*:*", "matchCriteriaId": "B341570D-1782-4BB4-9833-68B477B05A39"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.2:*:*:*:*:*:*:*", "matchCriteriaId": "A8F947E4-03FD-49B1-A19B-41D8A0A9EE17"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.3:*:*:*:*:*:*:*", "matchCriteriaId": "EE8BB71D-DC96-466B-B44C-D43E5EB93923"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.4:*:*:*:*:*:*:*", "matchCriteriaId": "207C8834-AFEA-4CEA-9A57-248F9B3A423C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.5:*:*:*:*:*:*:*", "matchCriteriaId": "4AA1DEA9-AE84-4C38-9B57-FC4D8E267E14"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.6:*:*:*:*:*:*:*", "matchCriteriaId": "54294700-3713-4BB4-A0B1-167180736EA5"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.6.1:*:*:*:*:*:*:*", "matchCriteriaId": "7D7C8553-13ED-473A-A664-641AE1D1CDCB"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.6.2:*:*:*:*:*:*:*", "matchCriteriaId": "8DC790A5-234E-4196-9099-19483FC5E946"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.6.3:*:*:*:*:*:*:*", "matchCriteriaId": "1C0FF74F-B3A3-4441-8030-4547DDC0F4F7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.7:*:*:*:*:*:*:*", "matchCriteriaId": "2A65EAA2-67E7-4ADE-BEB9-37C4408F017B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.8:*:*:*:*:*:*:*", "matchCriteriaId": "341EF0C2-F73E-497D-8222-850E136A2CF2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.9:*:*:*:*:*:*:*", "matchCriteriaId": "C02B1956-4F95-4F5D-BEE3-6E7CC3FAAD7C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.9.1:*:*:*:*:*:*:*", "matchCriteriaId": "3192F3B1-81CF-43FE-AFA0-38E229F6C4D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.10:*:*:*:*:*:*:*", "matchCriteriaId": "AC3479B9-3430-47EA-990D-A9C5EE43B617"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.11:*:*:*:*:*:*:*", "matchCriteriaId": "AAEF53E2-F916-4B24-9923-FBAE0042721C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.12:*:*:*:*:*:*:*", "matchCriteriaId": "84A630C4-4CB1-4398-8B5E-1A1DC9598641"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.13:*:*:*:*:*:*:*", "matchCriteriaId": "BB05D8E0-2125-4596-BBAB-535343D149A4"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.14:*:*:*:*:*:*:*", "matchCriteriaId": "FDCFA3A0-FE1A-4F39-A3DB-24980D038AE7"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.15:*:*:*:*:*:*:*", "matchCriteriaId": "A88391C1-106B-4CC8-AB31-35191E7ABD35"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.16:*:*:*:*:*:*:*", "matchCriteriaId": "2A7E45CD-45E9-4EC7-B995-DA259E5D50DE"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.17:*:*:*:*:*:*:*", "matchCriteriaId": "572A8B49-1A01-4474-B8B4-0F72A1284924"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.18:*:*:*:*:*:*:*", "matchCriteriaId": "0755C35B-B34F-4F6C-9144-3370FD192E55"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.19:*:*:*:*:*:*:*", "matchCriteriaId": "C416FAFE-6CD9-41D1-B39F-D6BB6DC8A4A6"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.20:*:*:*:*:*:*:*", "matchCriteriaId": "A713D13B-1368-4392-9A96-352976A2C37B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.21:*:*:*:*:*:*:*", "matchCriteriaId": "BD345611-721B-4E0F-AA39-156FBC42129B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.22:*:*:*:*:*:*:*", "matchCriteriaId": "C5A19E0A-1BD8-47E4-954A-6CDD3C401342"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.23:*:*:*:*:*:*:*", "matchCriteriaId": "7E4B7854-3D57-4296-9A4F-2239E055D06C"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.24:*:*:*:*:*:*:*", "matchCriteriaId": "DF0BE10B-0654-4E5B-B766-90AD2D6929FD"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.25:*:*:*:*:*:*:*", "matchCriteriaId": "DDC9AC17-D05F-4DFD-8C77-99ABC4BDB87B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.26:*:*:*:*:*:*:*", "matchCriteriaId": "EEF75C23-7A2B-4DA3-8B80-44CBED2A8257"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.27:*:*:*:*:*:*:*", "matchCriteriaId": "07D377C4-6051-4DB1-81BF-C4F358DA636B"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.28:*:*:*:*:*:*:*", "matchCriteriaId": "A978BC6A-7432-4A27-8F31-367566B76F9E"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.29:*:*:*:*:*:*:*", "matchCriteriaId": "5521C707-4412-4090-A5C1-9F5D8654A1D2"}, {"vulnerable": true, "criteria": "cpe:2.3:a:hardened-php:suhosin:0.9.30:*:*:*:*:*:*:*", "matchCriteriaId": "C9FB2F06-B265-4C58-9705-31336AE50CE3"}]}]}], "references": [{"url": "http://archives.neohapsis.com/archives/fulldisclosure/2012-01/0296.html", "source": "secalert@redhat.com", "tags": ["Exploit"]}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2012-03/msg00013.html", "source": "secalert@redhat.com"}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2012-03/msg00016.html", "source": "secalert@redhat.com"}, {"url": "http://lists.opensuse.org/opensuse-security-announce/2012-04/msg00001.html", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/01/24/11", "source": "secalert@redhat.com"}, {"url": "http://www.openwall.com/lists/oss-security/2012/01/24/7", "source": "secalert@redhat.com"}, {"url": "https://bugzilla.redhat.com/show_bug.cgi?id=783350", "source": "secalert@redhat.com"}, {"url": "https://github.com/stefanesser/suhosin/commit/73b1968ee30f6d9d2dae497544b910e68e114bfa", "source": "secalert@redhat.com", "tags": ["Exploit", "Patch"]}]}, "github_commit_url": "https://github.com/stefanesser/suhosin/commit/73b1968ee30f6d9d2dae497544b910e68e114bfa"}}