{"buggy_code": ["#\n# Copyright \u00a9 2012\u20132022 Michal \u010ciha\u0159 <michal@cihar.com>\n#\n# This file is part of Weblate <https://weblate.org/>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\n\nfrom datetime import timedelta\n\nfrom django.urls import reverse\nfrom django.utils import timezone\n\nfrom weblate.trans.tests.test_views import ViewTestCase\nfrom weblate.trans.views.reports import generate_counts, generate_credits\n\nCOUNTS_DATA = [\n    {\n        \"count\": 1,\n        \"count_edit\": 0,\n        \"count_new\": 1,\n        \"name\": \"Weblate Test\",\n        \"words\": 2,\n        \"words_edit\": 0,\n        \"words_new\": 2,\n        \"chars\": 14,\n        \"chars_edit\": 0,\n        \"chars_new\": 14,\n        \"email\": \"weblate@example.org\",\n        \"t_chars\": 14,\n        \"t_chars_edit\": 0,\n        \"t_chars_new\": 14,\n        \"t_words\": 2,\n        \"t_words_edit\": 0,\n        \"t_words_new\": 2,\n        \"count_approve\": 0,\n        \"words_approve\": 0,\n        \"chars_approve\": 0,\n        \"t_chars_approve\": 0,\n        \"t_words_approve\": 0,\n        \"edits\": 14,\n        \"edits_approve\": 0,\n        \"edits_edit\": 0,\n        \"edits_new\": 14,\n    }\n]\n\n\nclass BaseReportsTest(ViewTestCase):\n    def setUp(self):\n        super().setUp()\n        self.user.is_superuser = True\n        self.user.save()\n\n    def add_change(self):\n        self.edit_unit(\"Hello, world!\\n\", \"Nazdar svete!\\n\")\n\n\nclass ReportsTest(BaseReportsTest):\n    def test_credits_empty(self):\n        data = generate_credits(\n            None,\n            timezone.now() - timedelta(days=1),\n            timezone.now() + timedelta(days=1),\n            translation__component=self.component,\n        )\n        self.assertEqual(data, [])\n\n    def test_credits_one(self, expected_count=1):\n        self.add_change()\n        data = generate_credits(\n            None,\n            timezone.now() - timedelta(days=1),\n            timezone.now() + timedelta(days=1),\n            translation__component=self.component,\n        )\n        self.assertEqual(\n            data, [{\"Czech\": [(\"weblate@example.org\", \"Weblate Test\", expected_count)]}]\n        )\n\n    def test_credits_more(self):\n        self.edit_unit(\"Hello, world!\\n\", \"Nazdar svete2!\\n\")\n        self.test_credits_one(expected_count=2)\n\n    def test_counts_one(self):\n        self.add_change()\n        data = generate_counts(\n            None,\n            timezone.now() - timedelta(days=1),\n            timezone.now() + timedelta(days=1),\n            component=self.component,\n        )\n        self.assertEqual(data, COUNTS_DATA)\n\n\nclass ReportsComponentTest(BaseReportsTest):\n    def get_kwargs(self):\n        return self.kw_component\n\n    def get_credits(self, style):\n        self.add_change()\n        return self.client.post(\n            reverse(\"credits\", kwargs=self.get_kwargs()),\n            {\n                \"period\": \"\",\n                \"style\": style,\n                \"start_date\": \"2000-01-01\",\n                \"end_date\": \"2100-01-01\",\n            },\n        )\n\n    def test_credits_view_json(self):\n        response = self.get_credits(\"json\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(\n            response.content.decode(),\n            [{\"Czech\": [[\"weblate@example.org\", \"Weblate Test\", 1]]}],\n        )\n\n    def test_credits_view_rst(self):\n        response = self.get_credits(\"rst\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(\n            response.content.decode(),\n            \"\\n\\n* Czech\\n\\n    * Weblate Test <weblate@example.org> (1)\\n\\n\",\n        )\n\n    def test_credits_view_html(self):\n        response = self.get_credits(\"html\")\n        self.assertEqual(response.status_code, 200)\n        self.assertHTMLEqual(\n            response.content.decode(),\n            \"<table>\\n\"\n            \"<tr>\\n<th>Czech</th>\\n\"\n            '<td><ul><li><a href=\"mailto:weblate@example.org\">'\n            \"Weblate Test</a> (1)</li></ul></td>\\n</tr>\\n\"\n            \"</table>\",\n        )\n\n    def get_counts(self, style, **kwargs):\n        self.add_change()\n        params = {\n            \"style\": style,\n            \"period\": \"\",\n            \"start_date\": \"2000-01-01\",\n            \"end_date\": \"2100-01-01\",\n        }\n        params.update(kwargs)\n        return self.client.post(reverse(\"counts\", kwargs=self.get_kwargs()), params)\n\n    def test_counts_view_json(self):\n        response = self.get_counts(\"json\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), COUNTS_DATA)\n\n    def test_counts_view_30days(self):\n        response = self.get_counts(\"json\", period=\"30days\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), COUNTS_DATA)\n\n    def test_counts_view_this_month(self):\n        response = self.get_counts(\"json\", period=\"this-month\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), COUNTS_DATA)\n\n    def test_counts_view_month(self):\n        response = self.get_counts(\"json\", period=\"month\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), [])\n\n    def test_counts_view_year(self):\n        response = self.get_counts(\"json\", period=\"year\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), [])\n\n    def test_counts_view_this_year(self):\n        response = self.get_counts(\"json\", period=\"this-year\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), COUNTS_DATA)\n\n    def test_counts_view_rst(self):\n        response = self.get_counts(\"rst\")\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"weblate@example.org\")\n\n    def test_counts_view_html(self):\n        response = self.get_counts(\"html\")\n        self.assertEqual(response.status_code, 200)\n        self.assertHTMLEqual(\n            response.content.decode(),\n            \"\"\"\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Email</th>\n        <th>Count total</th>\n        <th>Edits total</th>\n        <th>Source words total</th>\n        <th>Source chars total</th>\n        <th>Target words total</th>\n        <th>Target chars total</th>\n        <th>Count new</th>\n        <th>Edits new</th>\n        <th>Source words new</th>\n        <th>Source chars new</th>\n        <th>Target words new</th>\n        <th>Target chars new</th>\n        <th>Count approved</th>\n        <th>Edits approved</th>\n        <th>Source words approved</th>\n        <th>Source chars approved</th>\n        <th>Target words approved</th>\n        <th>Target chars approved</th>\n        <th>Count edited</th>\n        <th>Edits edited</th>\n        <th>Source words edited</th>\n        <th>Source chars edited</th>\n        <th>Target words edited</th>\n        <th>Target chars edited</th>\n    </tr>\n    <tr>\n        <td>Weblate Test</td>\n        <td>weblate@example.org</td>\n        <td>1</td>\n        <td>14</td>\n        <td>2</td>\n        <td>14</td>\n        <td>2</td>\n        <td>14</td>\n        <td>1</td>\n        <td>14</td>\n        <td>2</td>\n        <td>14</td>\n        <td>2</td>\n        <td>14</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n    </tr>\n</table>\n\"\"\",\n        )\n\n\nclass ReportsProjectTest(ReportsComponentTest):\n    def get_kwargs(self):\n        return self.kw_project\n\n\nclass ReportsGlobalTest(ReportsComponentTest):\n    def get_kwargs(self):\n        return {}\n", "#\n# Copyright \u00a9 2012\u20132022 Michal \u010ciha\u0159 <michal@cihar.com>\n#\n# This file is part of Weblate <https://weblate.org/>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpResponse, JsonResponse\nfrom django.views.decorators.http import require_POST\n\nfrom weblate.lang.models import Language\nfrom weblate.trans.forms import ReportsForm\nfrom weblate.trans.models.change import Change\nfrom weblate.trans.util import redirect_param\nfrom weblate.utils.views import get_component, get_project, show_form_errors\n\n# Header, two longer fields for name and email, shorter fields for numbers\nRST_HEADING = \" \".join([\"=\" * 40] * 2 + [\"=\" * 24] * 20)\n\nHTML_HEADING = \"<table>\\n<tr>{0}</tr>\"\n\n\ndef generate_credits(user, start_date, end_date, **kwargs):\n    \"\"\"Generate credits data for given component.\"\"\"\n    result = []\n\n    base = Change.objects.content()\n    if user:\n        base = base.filter(author=user)\n\n    for language in Language.objects.filter(**kwargs).distinct().iterator():\n        authors = base.filter(language=language, **kwargs).authors_list(\n            (start_date, end_date)\n        )\n        if not authors:\n            continue\n        result.append({language.name: sorted(authors, key=lambda item: item[2])})\n\n    return result\n\n\n@login_required\n@require_POST\ndef get_credits(request, project=None, component=None):\n    \"\"\"View for credits.\"\"\"\n    if project is None:\n        obj = None\n        kwargs = {\"translation__isnull\": False}\n    elif component is None:\n        obj = get_project(request, project)\n        kwargs = {\"translation__component__project\": obj}\n    else:\n        obj = get_component(request, project, component)\n        kwargs = {\"translation__component\": obj}\n\n    form = ReportsForm(request.POST)\n\n    if not form.is_valid():\n        show_form_errors(request, form)\n        return redirect_param(obj or \"home\", \"#reports\")\n\n    data = generate_credits(\n        None if request.user.has_perm(\"reports.view\", obj) else request.user,\n        form.cleaned_data[\"start_date\"],\n        form.cleaned_data[\"end_date\"],\n        **kwargs,\n    )\n\n    if form.cleaned_data[\"style\"] == \"json\":\n        return JsonResponse(data=data, safe=False)\n\n    if form.cleaned_data[\"style\"] == \"html\":\n        start = \"<table>\"\n        row_start = \"<tr>\"\n        language_format = \"<th>{0}</th>\"\n        translator_start = \"<td><ul>\"\n        translator_format = '<li><a href=\"mailto:{0}\">{1}</a> ({2})</li>'\n        translator_end = \"</ul></td>\"\n        row_end = \"</tr>\"\n        mime = \"text/html\"\n        end = \"</table>\"\n    else:\n        start = \"\"\n        row_start = \"\"\n        language_format = \"* {0}\\n\"\n        translator_start = \"\"\n        translator_format = \"    * {1} <{0}> ({2})\"\n        translator_end = \"\"\n        row_end = \"\"\n        mime = \"text/plain\"\n        end = \"\"\n\n    result = [start]\n\n    for language in data:\n        name, translators = language.popitem()\n        result.append(row_start)\n        result.append(language_format.format(name))\n        result.append(\n            translator_start\n            + \"\\n\".join(translator_format.format(*t) for t in translators)\n            + translator_end\n        )\n        result.append(row_end)\n\n    result.append(end)\n\n    return HttpResponse(\"\\n\".join(result), content_type=f\"{mime}; charset=utf-8\")\n\n\nCOUNT_DEFAULTS = {\n    field: 0\n    for field in (\n        \"t_chars\",\n        \"t_words\",\n        \"chars\",\n        \"words\",\n        \"edits\",\n        \"count\",\n        \"t_chars_new\",\n        \"t_words_new\",\n        \"chars_new\",\n        \"words_new\",\n        \"edits_new\",\n        \"count_new\",\n        \"t_chars_approve\",\n        \"t_words_approve\",\n        \"chars_approve\",\n        \"words_approve\",\n        \"edits_approve\",\n        \"count_approve\",\n        \"t_chars_edit\",\n        \"t_words_edit\",\n        \"chars_edit\",\n        \"words_edit\",\n        \"edits_edit\",\n        \"count_edit\",\n    )\n}\n\n\ndef generate_counts(user, start_date, end_date, **kwargs):\n    \"\"\"Generate credits data for given component.\"\"\"\n    result = {}\n    action_map = {Change.ACTION_NEW: \"new\", Change.ACTION_APPROVE: \"approve\"}\n\n    base = Change.objects.content().filter(unit__isnull=False)\n    if user:\n        base = base.filter(author=user)\n    else:\n        base = base.filter(author__isnull=False)\n\n    changes = base.filter(\n        timestamp__range=(start_date, end_date), **kwargs\n    ).prefetch_related(\"author\", \"unit\")\n    for change in changes:\n        email = change.author.email\n\n        if email not in result:\n            result[email] = current = {\"name\": change.author.full_name, \"email\": email}\n            current.update(COUNT_DEFAULTS)\n        else:\n            current = result[email]\n\n        src_chars = len(change.unit.source)\n        src_words = change.unit.num_words\n        tgt_chars = len(change.target)\n        tgt_words = len(change.target.split())\n        edits = change.get_distance()\n\n        current[\"chars\"] += src_chars\n        current[\"words\"] += src_words\n        current[\"t_chars\"] += tgt_chars\n        current[\"t_words\"] += tgt_words\n        current[\"edits\"] += edits\n        current[\"count\"] += 1\n\n        suffix = action_map.get(change.action, \"edit\")\n\n        current[\"t_chars_\" + suffix] += tgt_chars\n        current[\"t_words_\" + suffix] += tgt_words\n        current[\"chars_\" + suffix] += src_chars\n        current[\"words_\" + suffix] += src_words\n        current[\"edits_\" + suffix] += edits\n        current[\"count_\" + suffix] += 1\n\n    return list(result.values())\n\n\n@login_required\n@require_POST\ndef get_counts(request, project=None, component=None):\n    \"\"\"View for work counts.\"\"\"\n    if project is None:\n        obj = None\n        kwargs = {}\n    elif component is None:\n        obj = get_project(request, project)\n        kwargs = {\"project\": obj}\n    else:\n        obj = get_component(request, project, component)\n        kwargs = {\"component\": obj}\n\n    form = ReportsForm(request.POST)\n\n    if not form.is_valid():\n        show_form_errors(request, form)\n        return redirect_param(obj or \"home\", \"#reports\")\n\n    data = generate_counts(\n        None if request.user.has_perm(\"reports.view\", obj) else request.user,\n        form.cleaned_data[\"start_date\"],\n        form.cleaned_data[\"end_date\"],\n        **kwargs,\n    )\n\n    if form.cleaned_data[\"style\"] == \"json\":\n        return JsonResponse(data=data, safe=False)\n\n    headers = (\n        \"Name\",\n        \"Email\",\n        \"Count total\",\n        \"Edits total\",\n        \"Source words total\",\n        \"Source chars total\",\n        \"Target words total\",\n        \"Target chars total\",\n        \"Count new\",\n        \"Edits new\",\n        \"Source words new\",\n        \"Source chars new\",\n        \"Target words new\",\n        \"Target chars new\",\n        \"Count approved\",\n        \"Edits approved\",\n        \"Source words approved\",\n        \"Source chars approved\",\n        \"Target words approved\",\n        \"Target chars approved\",\n        \"Count edited\",\n        \"Edits edited\",\n        \"Source words edited\",\n        \"Source chars edited\",\n        \"Target words edited\",\n        \"Target chars edited\",\n    )\n\n    if form.cleaned_data[\"style\"] == \"html\":\n        start = HTML_HEADING.format(\"\".join(f\"<th>{h}</th>\" for h in headers))\n        row_start = \"<tr>\"\n        cell_name = cell_count = \"<td>{0}</td>\\n\"\n        row_end = \"</tr>\"\n        mime = \"text/html\"\n        end = \"</table>\"\n    else:\n        start = \"{0}\\n{1} {2}\\n{0}\".format(\n            RST_HEADING,\n            \" \".join(f\"{h:40}\" for h in headers[:2]),\n            \" \".join(f\"{h:24}\" for h in headers[2:]),\n        )\n        row_start = \"\"\n        cell_name = \"{0:40} \"\n        cell_count = \"{0:24} \"\n        row_end = \"\"\n        mime = \"text/plain\"\n        end = RST_HEADING\n\n    result = [start]\n\n    for item in data:\n        if row_start:\n            result.append(row_start)\n        result.append(\n            \"\".join(\n                (\n                    cell_name.format(item[\"name\"] or \"Anonymous\"),\n                    cell_name.format(item[\"email\"] or \"\"),\n                    cell_count.format(item[\"count\"]),\n                    cell_count.format(item[\"edits\"]),\n                    cell_count.format(item[\"words\"]),\n                    cell_count.format(item[\"chars\"]),\n                    cell_count.format(item[\"t_words\"]),\n                    cell_count.format(item[\"t_chars\"]),\n                    cell_count.format(item[\"count_new\"]),\n                    cell_count.format(item[\"edits_new\"]),\n                    cell_count.format(item[\"words_new\"]),\n                    cell_count.format(item[\"chars_new\"]),\n                    cell_count.format(item[\"t_words_new\"]),\n                    cell_count.format(item[\"t_chars_new\"]),\n                    cell_count.format(item[\"count_approve\"]),\n                    cell_count.format(item[\"edits_approve\"]),\n                    cell_count.format(item[\"words_approve\"]),\n                    cell_count.format(item[\"chars_approve\"]),\n                    cell_count.format(item[\"t_words_approve\"]),\n                    cell_count.format(item[\"t_chars_approve\"]),\n                    cell_count.format(item[\"count_edit\"]),\n                    cell_count.format(item[\"edits_edit\"]),\n                    cell_count.format(item[\"words_edit\"]),\n                    cell_count.format(item[\"chars_edit\"]),\n                    cell_count.format(item[\"t_words_edit\"]),\n                    cell_count.format(item[\"t_chars_edit\"]),\n                )\n            )\n        )\n        if row_end:\n            result.append(row_end)\n\n    result.append(end)\n\n    return HttpResponse(\"\\n\".join(result), content_type=f\"{mime}; charset=utf-8\")\n"], "fixing_code": ["#\n# Copyright \u00a9 2012\u20132022 Michal \u010ciha\u0159 <michal@cihar.com>\n#\n# This file is part of Weblate <https://weblate.org/>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\n\nfrom datetime import timedelta\n\nfrom django.urls import reverse\nfrom django.utils import timezone\n\nfrom weblate.trans.tests.test_views import ViewTestCase\nfrom weblate.trans.views.reports import generate_counts, generate_credits\n\nCOUNTS_DATA = [\n    {\n        \"count\": 1,\n        \"count_edit\": 0,\n        \"count_new\": 1,\n        \"name\": \"Weblate <b>Test</b>\",\n        \"words\": 2,\n        \"words_edit\": 0,\n        \"words_new\": 2,\n        \"chars\": 14,\n        \"chars_edit\": 0,\n        \"chars_new\": 14,\n        \"email\": \"weblate@example.org\",\n        \"t_chars\": 14,\n        \"t_chars_edit\": 0,\n        \"t_chars_new\": 14,\n        \"t_words\": 2,\n        \"t_words_edit\": 0,\n        \"t_words_new\": 2,\n        \"count_approve\": 0,\n        \"words_approve\": 0,\n        \"chars_approve\": 0,\n        \"t_chars_approve\": 0,\n        \"t_words_approve\": 0,\n        \"edits\": 14,\n        \"edits_approve\": 0,\n        \"edits_edit\": 0,\n        \"edits_new\": 14,\n    }\n]\n\n\nclass BaseReportsTest(ViewTestCase):\n    def setUp(self):\n        super().setUp()\n        self.user.is_superuser = True\n        self.user.full_name = \"Weblate <b>Test</b>\"\n        self.user.save()\n        self.maxDiff = None\n\n    def add_change(self):\n        self.edit_unit(\"Hello, world!\\n\", \"Nazdar svete!\\n\")\n\n\nclass ReportsTest(BaseReportsTest):\n    def test_credits_empty(self):\n        data = generate_credits(\n            None,\n            timezone.now() - timedelta(days=1),\n            timezone.now() + timedelta(days=1),\n            translation__component=self.component,\n        )\n        self.assertEqual(data, [])\n\n    def test_credits_one(self, expected_count=1):\n        self.add_change()\n        data = generate_credits(\n            None,\n            timezone.now() - timedelta(days=1),\n            timezone.now() + timedelta(days=1),\n            translation__component=self.component,\n        )\n        self.assertEqual(\n            data,\n            [\n                {\n                    \"Czech\": [\n                        (\"weblate@example.org\", \"Weblate <b>Test</b>\", expected_count)\n                    ]\n                }\n            ],\n        )\n\n    def test_credits_more(self):\n        self.edit_unit(\"Hello, world!\\n\", \"Nazdar svete2!\\n\")\n        self.test_credits_one(expected_count=2)\n\n    def test_counts_one(self):\n        self.add_change()\n        data = generate_counts(\n            None,\n            timezone.now() - timedelta(days=1),\n            timezone.now() + timedelta(days=1),\n            component=self.component,\n        )\n        self.assertEqual(data, COUNTS_DATA)\n\n\nclass ReportsComponentTest(BaseReportsTest):\n    def get_kwargs(self):\n        return self.kw_component\n\n    def get_credits(self, style):\n        self.add_change()\n        return self.client.post(\n            reverse(\"credits\", kwargs=self.get_kwargs()),\n            {\n                \"period\": \"\",\n                \"style\": style,\n                \"start_date\": \"2000-01-01\",\n                \"end_date\": \"2100-01-01\",\n            },\n        )\n\n    def test_credits_view_json(self):\n        response = self.get_credits(\"json\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(\n            response.content.decode(),\n            [{\"Czech\": [[\"weblate@example.org\", \"Weblate <b>Test</b>\", 1]]}],\n        )\n\n    def test_credits_view_rst(self):\n        response = self.get_credits(\"rst\")\n        self.assertEqual(response.status_code, 200)\n        self.assertEqual(\n            response.content.decode(),\n            \"\"\"\n\n* Czech\n\n    * Weblate &lt;b&gt;Test&lt;/b&gt; <weblate@example.org> (1)\n\n\"\"\",\n        )\n\n    def test_credits_view_html(self):\n        response = self.get_credits(\"html\")\n        self.assertEqual(response.status_code, 200)\n        self.assertHTMLEqual(\n            response.content.decode(),\n            \"<table>\\n\"\n            \"<tr>\\n<th>Czech</th>\\n\"\n            '<td><ul><li><a href=\"mailto:weblate@example.org\">'\n            \"Weblate &lt;b&gt;Test&lt;/b&gt;</a> (1)</li></ul></td>\\n</tr>\\n\"\n            \"</table>\",\n        )\n\n    def get_counts(self, style, **kwargs):\n        self.add_change()\n        params = {\n            \"style\": style,\n            \"period\": \"\",\n            \"start_date\": \"2000-01-01\",\n            \"end_date\": \"2100-01-01\",\n        }\n        params.update(kwargs)\n        return self.client.post(reverse(\"counts\", kwargs=self.get_kwargs()), params)\n\n    def test_counts_view_json(self):\n        response = self.get_counts(\"json\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), COUNTS_DATA)\n\n    def test_counts_view_30days(self):\n        response = self.get_counts(\"json\", period=\"30days\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), COUNTS_DATA)\n\n    def test_counts_view_this_month(self):\n        response = self.get_counts(\"json\", period=\"this-month\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), COUNTS_DATA)\n\n    def test_counts_view_month(self):\n        response = self.get_counts(\"json\", period=\"month\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), [])\n\n    def test_counts_view_year(self):\n        response = self.get_counts(\"json\", period=\"year\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), [])\n\n    def test_counts_view_this_year(self):\n        response = self.get_counts(\"json\", period=\"this-year\")\n        self.assertEqual(response.status_code, 200)\n        self.assertJSONEqual(response.content.decode(), COUNTS_DATA)\n\n    def test_counts_view_rst(self):\n        response = self.get_counts(\"rst\")\n        self.assertEqual(response.status_code, 200)\n        self.assertContains(response, \"weblate@example.org\")\n\n    def test_counts_view_html(self):\n        response = self.get_counts(\"html\")\n        self.assertEqual(response.status_code, 200)\n        self.assertHTMLEqual(\n            response.content.decode(),\n            \"\"\"\n<table>\n    <tr>\n        <th>Name</th>\n        <th>Email</th>\n        <th>Count total</th>\n        <th>Edits total</th>\n        <th>Source words total</th>\n        <th>Source chars total</th>\n        <th>Target words total</th>\n        <th>Target chars total</th>\n        <th>Count new</th>\n        <th>Edits new</th>\n        <th>Source words new</th>\n        <th>Source chars new</th>\n        <th>Target words new</th>\n        <th>Target chars new</th>\n        <th>Count approved</th>\n        <th>Edits approved</th>\n        <th>Source words approved</th>\n        <th>Source chars approved</th>\n        <th>Target words approved</th>\n        <th>Target chars approved</th>\n        <th>Count edited</th>\n        <th>Edits edited</th>\n        <th>Source words edited</th>\n        <th>Source chars edited</th>\n        <th>Target words edited</th>\n        <th>Target chars edited</th>\n    </tr>\n    <tr>\n        <td>Weblate &lt;b&gt;Test&lt;/b&gt;</td>\n        <td>weblate@example.org</td>\n        <td>1</td>\n        <td>14</td>\n        <td>2</td>\n        <td>14</td>\n        <td>2</td>\n        <td>14</td>\n        <td>1</td>\n        <td>14</td>\n        <td>2</td>\n        <td>14</td>\n        <td>2</td>\n        <td>14</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n        <td>0</td>\n    </tr>\n</table>\n\"\"\",\n        )\n\n\nclass ReportsProjectTest(ReportsComponentTest):\n    def get_kwargs(self):\n        return self.kw_project\n\n\nclass ReportsGlobalTest(ReportsComponentTest):\n    def get_kwargs(self):\n        return {}\n", "#\n# Copyright \u00a9 2012\u20132022 Michal \u010ciha\u0159 <michal@cihar.com>\n#\n# This file is part of Weblate <https://weblate.org/>\n#\n# This program is free software: you can redistribute it and/or modify\n# it under the terms of the GNU General Public License as published by\n# the Free Software Foundation, either version 3 of the License, or\n# (at your option) any later version.\n#\n# This program is distributed in the hope that it will be useful,\n# but WITHOUT ANY WARRANTY; without even the implied warranty of\n# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n# GNU General Public License for more details.\n#\n# You should have received a copy of the GNU General Public License\n# along with this program.  If not, see <https://www.gnu.org/licenses/>.\n#\n\nfrom django.contrib.auth.decorators import login_required\nfrom django.http import HttpResponse, JsonResponse\nfrom django.utils.html import escape\nfrom django.views.decorators.http import require_POST\n\nfrom weblate.lang.models import Language\nfrom weblate.trans.forms import ReportsForm\nfrom weblate.trans.models.change import Change\nfrom weblate.trans.util import redirect_param\nfrom weblate.utils.views import get_component, get_project, show_form_errors\n\n# Header, two longer fields for name and email, shorter fields for numbers\nRST_HEADING = \" \".join([\"=\" * 40] * 2 + [\"=\" * 24] * 20)\n\nHTML_HEADING = \"<table>\\n<tr>{0}</tr>\"\n\n\ndef generate_credits(user, start_date, end_date, **kwargs):\n    \"\"\"Generate credits data for given component.\"\"\"\n    result = []\n\n    base = Change.objects.content()\n    if user:\n        base = base.filter(author=user)\n\n    for language in Language.objects.filter(**kwargs).distinct().iterator():\n        authors = base.filter(language=language, **kwargs).authors_list(\n            (start_date, end_date)\n        )\n        if not authors:\n            continue\n        result.append({language.name: sorted(authors, key=lambda item: item[2])})\n\n    return result\n\n\n@login_required\n@require_POST\ndef get_credits(request, project=None, component=None):\n    \"\"\"View for credits.\"\"\"\n    if project is None:\n        obj = None\n        kwargs = {\"translation__isnull\": False}\n    elif component is None:\n        obj = get_project(request, project)\n        kwargs = {\"translation__component__project\": obj}\n    else:\n        obj = get_component(request, project, component)\n        kwargs = {\"translation__component\": obj}\n\n    form = ReportsForm(request.POST)\n\n    if not form.is_valid():\n        show_form_errors(request, form)\n        return redirect_param(obj or \"home\", \"#reports\")\n\n    data = generate_credits(\n        None if request.user.has_perm(\"reports.view\", obj) else request.user,\n        form.cleaned_data[\"start_date\"],\n        form.cleaned_data[\"end_date\"],\n        **kwargs,\n    )\n\n    if form.cleaned_data[\"style\"] == \"json\":\n        return JsonResponse(data=data, safe=False)\n\n    if form.cleaned_data[\"style\"] == \"html\":\n        start = \"<table>\"\n        row_start = \"<tr>\"\n        language_format = \"<th>{0}</th>\"\n        translator_start = \"<td><ul>\"\n        translator_format = '<li><a href=\"mailto:{0}\">{1}</a> ({2})</li>'\n        translator_end = \"</ul></td>\"\n        row_end = \"</tr>\"\n        mime = \"text/html\"\n        end = \"</table>\"\n    else:\n        start = \"\"\n        row_start = \"\"\n        language_format = \"* {0}\\n\"\n        translator_start = \"\"\n        translator_format = \"    * {1} <{0}> ({2})\"\n        translator_end = \"\"\n        row_end = \"\"\n        mime = \"text/plain\"\n        end = \"\"\n\n    result = [start]\n\n    for language in data:\n        name, translators = language.popitem()\n        result.append(row_start)\n        result.append(language_format.format(escape(name)))\n        result.append(\n            translator_start\n            + \"\\n\".join(\n                translator_format.format(escape(t[0]), escape(t[1]), t[2])\n                for t in translators\n            )\n            + translator_end\n        )\n        result.append(row_end)\n\n    result.append(end)\n\n    return HttpResponse(\"\\n\".join(result), content_type=f\"{mime}; charset=utf-8\")\n\n\nCOUNT_DEFAULTS = {\n    field: 0\n    for field in (\n        \"t_chars\",\n        \"t_words\",\n        \"chars\",\n        \"words\",\n        \"edits\",\n        \"count\",\n        \"t_chars_new\",\n        \"t_words_new\",\n        \"chars_new\",\n        \"words_new\",\n        \"edits_new\",\n        \"count_new\",\n        \"t_chars_approve\",\n        \"t_words_approve\",\n        \"chars_approve\",\n        \"words_approve\",\n        \"edits_approve\",\n        \"count_approve\",\n        \"t_chars_edit\",\n        \"t_words_edit\",\n        \"chars_edit\",\n        \"words_edit\",\n        \"edits_edit\",\n        \"count_edit\",\n    )\n}\n\n\ndef generate_counts(user, start_date, end_date, **kwargs):\n    \"\"\"Generate credits data for given component.\"\"\"\n    result = {}\n    action_map = {Change.ACTION_NEW: \"new\", Change.ACTION_APPROVE: \"approve\"}\n\n    base = Change.objects.content().filter(unit__isnull=False)\n    if user:\n        base = base.filter(author=user)\n    else:\n        base = base.filter(author__isnull=False)\n\n    changes = base.filter(\n        timestamp__range=(start_date, end_date), **kwargs\n    ).prefetch_related(\"author\", \"unit\")\n    for change in changes:\n        email = change.author.email\n\n        if email not in result:\n            result[email] = current = {\"name\": change.author.full_name, \"email\": email}\n            current.update(COUNT_DEFAULTS)\n        else:\n            current = result[email]\n\n        src_chars = len(change.unit.source)\n        src_words = change.unit.num_words\n        tgt_chars = len(change.target)\n        tgt_words = len(change.target.split())\n        edits = change.get_distance()\n\n        current[\"chars\"] += src_chars\n        current[\"words\"] += src_words\n        current[\"t_chars\"] += tgt_chars\n        current[\"t_words\"] += tgt_words\n        current[\"edits\"] += edits\n        current[\"count\"] += 1\n\n        suffix = action_map.get(change.action, \"edit\")\n\n        current[\"t_chars_\" + suffix] += tgt_chars\n        current[\"t_words_\" + suffix] += tgt_words\n        current[\"chars_\" + suffix] += src_chars\n        current[\"words_\" + suffix] += src_words\n        current[\"edits_\" + suffix] += edits\n        current[\"count_\" + suffix] += 1\n\n    return list(result.values())\n\n\n@login_required\n@require_POST\ndef get_counts(request, project=None, component=None):\n    \"\"\"View for work counts.\"\"\"\n    if project is None:\n        obj = None\n        kwargs = {}\n    elif component is None:\n        obj = get_project(request, project)\n        kwargs = {\"project\": obj}\n    else:\n        obj = get_component(request, project, component)\n        kwargs = {\"component\": obj}\n\n    form = ReportsForm(request.POST)\n\n    if not form.is_valid():\n        show_form_errors(request, form)\n        return redirect_param(obj or \"home\", \"#reports\")\n\n    data = generate_counts(\n        None if request.user.has_perm(\"reports.view\", obj) else request.user,\n        form.cleaned_data[\"start_date\"],\n        form.cleaned_data[\"end_date\"],\n        **kwargs,\n    )\n\n    if form.cleaned_data[\"style\"] == \"json\":\n        return JsonResponse(data=data, safe=False)\n\n    headers = (\n        \"Name\",\n        \"Email\",\n        \"Count total\",\n        \"Edits total\",\n        \"Source words total\",\n        \"Source chars total\",\n        \"Target words total\",\n        \"Target chars total\",\n        \"Count new\",\n        \"Edits new\",\n        \"Source words new\",\n        \"Source chars new\",\n        \"Target words new\",\n        \"Target chars new\",\n        \"Count approved\",\n        \"Edits approved\",\n        \"Source words approved\",\n        \"Source chars approved\",\n        \"Target words approved\",\n        \"Target chars approved\",\n        \"Count edited\",\n        \"Edits edited\",\n        \"Source words edited\",\n        \"Source chars edited\",\n        \"Target words edited\",\n        \"Target chars edited\",\n    )\n\n    if form.cleaned_data[\"style\"] == \"html\":\n        start = HTML_HEADING.format(\"\".join(f\"<th>{h}</th>\" for h in headers))\n        row_start = \"<tr>\"\n        cell_name = cell_count = \"<td>{0}</td>\\n\"\n        row_end = \"</tr>\"\n        mime = \"text/html\"\n        end = \"</table>\"\n    else:\n        start = \"{0}\\n{1} {2}\\n{0}\".format(\n            RST_HEADING,\n            \" \".join(f\"{h:40}\" for h in headers[:2]),\n            \" \".join(f\"{h:24}\" for h in headers[2:]),\n        )\n        row_start = \"\"\n        cell_name = \"{0:40} \"\n        cell_count = \"{0:24} \"\n        row_end = \"\"\n        mime = \"text/plain\"\n        end = RST_HEADING\n\n    result = [start]\n\n    for item in data:\n        if row_start:\n            result.append(row_start)\n        result.append(\n            \"\".join(\n                (\n                    cell_name.format(escape(item[\"name\"]) or \"Anonymous\"),\n                    cell_name.format(escape(item[\"email\"]) or \"\"),\n                    cell_count.format(item[\"count\"]),\n                    cell_count.format(item[\"edits\"]),\n                    cell_count.format(item[\"words\"]),\n                    cell_count.format(item[\"chars\"]),\n                    cell_count.format(item[\"t_words\"]),\n                    cell_count.format(item[\"t_chars\"]),\n                    cell_count.format(item[\"count_new\"]),\n                    cell_count.format(item[\"edits_new\"]),\n                    cell_count.format(item[\"words_new\"]),\n                    cell_count.format(item[\"chars_new\"]),\n                    cell_count.format(item[\"t_words_new\"]),\n                    cell_count.format(item[\"t_chars_new\"]),\n                    cell_count.format(item[\"count_approve\"]),\n                    cell_count.format(item[\"edits_approve\"]),\n                    cell_count.format(item[\"words_approve\"]),\n                    cell_count.format(item[\"chars_approve\"]),\n                    cell_count.format(item[\"t_words_approve\"]),\n                    cell_count.format(item[\"t_chars_approve\"]),\n                    cell_count.format(item[\"count_edit\"]),\n                    cell_count.format(item[\"edits_edit\"]),\n                    cell_count.format(item[\"words_edit\"]),\n                    cell_count.format(item[\"chars_edit\"]),\n                    cell_count.format(item[\"t_words_edit\"]),\n                    cell_count.format(item[\"t_chars_edit\"]),\n                )\n            )\n        )\n        if row_end:\n            result.append(row_end)\n\n    result.append(end)\n\n    return HttpResponse(\"\\n\".join(result), content_type=f\"{mime}; charset=utf-8\")\n"], "filenames": ["weblate/trans/tests/test_reports.py", "weblate/trans/views/reports.py"], "buggy_code_start_loc": [34, 20], "buggy_code_end_loc": [235, 293], "fixing_code_start_loc": [34, 19], "fixing_code_end_loc": [250, 296], "type": "CWE-79", "message": "Weblate is a copyleft software web-based continuous localization system. Versions prior to 4.11 do not properly neutralize user input used in user name and language fields. Due to this improper neutralization it is possible to perform cross-site scripting via these fields. The issues were fixed in the 4.11 release. Users unable to upgrade are advised to add their own neutralize logic.", "other": {"cve": {"id": "CVE-2022-24710", "sourceIdentifier": "security-advisories@github.com", "published": "2022-02-25T21:15:08.200", "lastModified": "2022-03-08T15:13:14.510", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Weblate is a copyleft software web-based continuous localization system. Versions prior to 4.11 do not properly neutralize user input used in user name and language fields. Due to this improper neutralization it is possible to perform cross-site scripting via these fields. The issues were fixed in the 4.11 release. Users unable to upgrade are advised to add their own neutralize logic."}, {"lang": "es", "value": "Weblate es un sistema de localizaci\u00f3n continua basado en la web. Las versiones anteriores a la 4.11, no neutralizan apropiadamente las entradas del usuario usadas en los campos de nombre de usuario e idioma. Debido a esta neutralizaci\u00f3n inapropiada es posible llevar a cabo un ataque de tipo cross-site scripting por medio de estos campos. Los problemas han sido corregidos en la versi\u00f3n 4.11. Es recomendado a usuarios que no puedan actualizarse a\u00f1adir su propia l\u00f3gica de neutralizaci\u00f3n.\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:weblate:weblate:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.11", "matchCriteriaId": "45B9E50C-3387-4830-8C98-1758DEE4B5A6"}]}]}], "references": [{"url": "https://github.com/WeblateOrg/weblate/commit/22d577b1f1e88665a88b4569380148030e0f8389", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/WeblateOrg/weblate/commit/9e19a8414337692cc90da2a91c9af5420f2952f1", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/WeblateOrg/weblate/commit/f6753a1a1c63fade6ad418fbda827c6750ab0bda", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/WeblateOrg/weblate/security/advisories/GHSA-6jp6-9rf9-gc66", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WeblateOrg/weblate/commit/22d577b1f1e88665a88b4569380148030e0f8389"}}