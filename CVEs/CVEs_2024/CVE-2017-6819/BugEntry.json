{"buggy_code": ["<?php\n/**\n * Press This class and display functionality\n *\n * @package WordPress\n * @subpackage Press_This\n * @since 4.2.0\n */\n\n/**\n * Press This class.\n *\n * @since 4.2.0\n */\nclass WP_Press_This {\n\t// Used to trigger the bookmarklet update notice.\n\tconst VERSION = 8;\n\tpublic $version = 8;\n\n\tprivate $images = array();\n\n\tprivate $embeds = array();\n\n\tprivate $domain = '';\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t */\n\tpublic function __construct() {}\n\n\t/**\n\t * App and site settings data, including i18n strings for the client-side.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @return array Site settings.\n\t */\n\tpublic function site_settings() {\n\t\treturn array(\n\t\t\t/**\n\t\t\t * Filters whether or not Press This should redirect the user in the parent window upon save.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param bool $redirect Whether to redirect in parent window or not. Default false.\n\t\t\t */\n\t\t\t'redirInParent' => apply_filters( 'press_this_redirect_in_parent', false ),\n\t\t);\n\t}\n\n\t/**\n\t * Get the source's images and save them locally, for posterity, unless we can't.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param int    $post_id Post ID.\n\t * @param string $content Optional. Current expected markup for Press This. Expects slashed. Default empty.\n\t * @return string New markup with old image URLs replaced with the local attachment ones if swapped.\n\t */\n\tpublic function side_load_images( $post_id, $content = '' ) {\n\t\t$content = wp_unslash( $content );\n\n\t\tif ( preg_match_all( '/<img [^>]+>/', $content, $matches ) && current_user_can( 'upload_files' ) ) {\n\t\t\tforeach ( (array) $matches[0] as $image ) {\n\t\t\t\t// This is inserted from our JS so HTML attributes should always be in double quotes.\n\t\t\t\tif ( ! preg_match( '/src=\"([^\"]+)\"/', $image, $url_matches ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$image_src = $url_matches[1];\n\n\t\t\t\t// Don't try to sideload a file without a file extension, leads to WP upload error.\n\t\t\t\tif ( ! preg_match( '/[^\\?]+\\.(?:jpe?g|jpe|gif|png)(?:\\?|$)/i', $image_src ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Sideload image, which gives us a new image src.\n\t\t\t\t$new_src = media_sideload_image( $image_src, $post_id, null, 'src' );\n\n\t\t\t\tif ( ! is_wp_error( $new_src ) ) {\n\t\t\t\t\t// Replace the POSTED content <img> with correct uploaded ones.\n\t\t\t\t\t// Need to do it in two steps so we don't replace links to the original image if any.\n\t\t\t\t\t$new_image = str_replace( $image_src, $new_src, $image );\n\t\t\t\t\t$content = str_replace( $image, $new_image, $content );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Expected slashed\n\t\treturn wp_slash( $content );\n\t}\n\n\t/**\n\t * Ajax handler for saving the post as draft or published.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t */\n\tpublic function save_post() {\n\t\tif ( empty( $_POST['post_ID'] ) || ! $post_id = (int) $_POST['post_ID'] ) {\n\t\t\twp_send_json_error( array( 'errorMessage' => __( 'Missing post ID.' ) ) );\n\t\t}\n\n\t\tif ( empty( $_POST['_wpnonce'] ) || ! wp_verify_nonce( $_POST['_wpnonce'], 'update-post_' . $post_id ) ||\n\t\t\t! current_user_can( 'edit_post', $post_id ) ) {\n\n\t\t\twp_send_json_error( array( 'errorMessage' => __( 'Invalid post.' ) ) );\n\t\t}\n\n\t\t$post_data = array(\n\t\t\t'ID'            => $post_id,\n\t\t\t'post_title'    => ( ! empty( $_POST['post_title'] ) ) ? sanitize_text_field( trim( $_POST['post_title'] ) ) : '',\n\t\t\t'post_content'  => ( ! empty( $_POST['post_content'] ) ) ? trim( $_POST['post_content'] ) : '',\n\t\t\t'post_type'     => 'post',\n\t\t\t'post_status'   => 'draft',\n\t\t\t'post_format'   => ( ! empty( $_POST['post_format'] ) ) ? sanitize_text_field( $_POST['post_format'] ) : '',\n\t\t);\n\n\t\t// Only accept categories if the user actually can assign\n\t\t$category_tax = get_taxonomy( 'category' );\n\t\tif ( current_user_can( $category_tax->cap->assign_terms ) ) {\n\t\t\t$post_data['post_category'] = ( ! empty( $_POST['post_category'] ) ) ? $_POST['post_category'] : array();\n\t\t}\n\n\t\t// Only accept taxonomies if the user can actually assign\n\t\tif ( ! empty( $_POST['tax_input'] ) ) {\n\t\t\t$tax_input = $_POST['tax_input'];\n\t\t\tforeach ( $tax_input as $tax => $_ti ) {\n\t\t\t\t$tax_object = get_taxonomy( $tax );\n\t\t\t\tif ( ! $tax_object || ! current_user_can( $tax_object->cap->assign_terms ) ) {\n\t\t\t\t\tunset( $tax_input[ $tax ] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$post_data['tax_input'] = $tax_input;\n\t\t}\n\n\t\t// Toggle status to pending if user cannot actually publish\n\t\tif ( ! empty( $_POST['post_status'] ) && 'publish' === $_POST['post_status'] ) {\n\t\t\tif ( current_user_can( 'publish_posts' ) ) {\n\t\t\t\t$post_data['post_status'] = 'publish';\n\t\t\t} else {\n\t\t\t\t$post_data['post_status'] = 'pending';\n\t\t\t}\n\t\t}\n\n\t\t$post_data['post_content'] = $this->side_load_images( $post_id, $post_data['post_content'] );\n\n\t\t/**\n\t\t * Filters the post data of a Press This post before saving/updating.\n\t\t *\n\t\t * The {@see 'side_load_images'} action has already run at this point.\n\t\t *\n\t\t * @since 4.5.0\n\t\t *\n\t\t * @param array $post_data The post data.\n\t\t */\n\t\t$post_data = apply_filters( 'press_this_save_post', $post_data );\n\n\t\t$updated = wp_update_post( $post_data, true );\n\n\t\tif ( is_wp_error( $updated ) ) {\n\t\t\twp_send_json_error( array( 'errorMessage' => $updated->get_error_message() ) );\n\t\t} else {\n\t\t\tif ( isset( $post_data['post_format'] ) ) {\n\t\t\t\tif ( current_theme_supports( 'post-formats', $post_data['post_format'] ) ) {\n\t\t\t\t\tset_post_format( $post_id, $post_data['post_format'] );\n\t\t\t\t} elseif ( $post_data['post_format'] ) {\n\t\t\t\t\tset_post_format( $post_id, false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$forceRedirect = false;\n\n\t\t\tif ( 'publish' === get_post_status( $post_id ) ) {\n\t\t\t\t$redirect = get_post_permalink( $post_id );\n\t\t\t} elseif ( isset( $_POST['pt-force-redirect'] ) && $_POST['pt-force-redirect'] === 'true' ) {\n\t\t\t\t$forceRedirect = true;\n\t\t\t\t$redirect = get_edit_post_link( $post_id, 'js' );\n\t\t\t} else {\n\t\t\t\t$redirect = false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters the URL to redirect to when Press This saves.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param string $url     Redirect URL. If `$status` is 'publish', this will be the post permalink.\n\t\t\t *                        Otherwise, the default is false resulting in no redirect.\n\t\t\t * @param int    $post_id Post ID.\n\t\t\t * @param string $status  Post status.\n\t\t\t */\n\t\t\t$redirect = apply_filters( 'press_this_save_redirect', $redirect, $post_id, $post_data['post_status'] );\n\n\t\t\tif ( $redirect ) {\n\t\t\t\twp_send_json_success( array( 'redirect' => $redirect, 'force' => $forceRedirect ) );\n\t\t\t} else {\n\t\t\t\twp_send_json_success( array( 'postSaved' => true ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Ajax handler for adding a new category.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t */\n\tpublic function add_category() {\n\t\tif ( false === wp_verify_nonce( $_POST['new_cat_nonce'], 'add-category' ) ) {\n\t\t\twp_send_json_error();\n\t\t}\n\n\t\t$taxonomy = get_taxonomy( 'category' );\n\n\t\tif ( ! current_user_can( $taxonomy->cap->edit_terms ) || empty( $_POST['name'] ) ) {\n\t\t\twp_send_json_error();\n\t\t}\n\n\t\t$parent = isset( $_POST['parent'] ) && (int) $_POST['parent'] > 0 ? (int) $_POST['parent'] : 0;\n\t\t$names = explode( ',', $_POST['name'] );\n\t\t$added = $data = array();\n\n\t\tforeach ( $names as $cat_name ) {\n\t\t\t$cat_name = trim( $cat_name );\n\t\t\t$cat_nicename = sanitize_title( $cat_name );\n\n\t\t\tif ( empty( $cat_nicename ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// @todo Find a more performant way to check existence, maybe get_term() with a separate parent check.\n\t\t\tif ( term_exists( $cat_name, $taxonomy->name, $parent ) ) {\n\t\t\t\tif ( count( $names ) === 1 ) {\n\t\t\t\t\twp_send_json_error( array( 'errorMessage' => __( 'This category already exists.' ) ) );\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$cat_id = wp_insert_term( $cat_name, $taxonomy->name, array( 'parent' => $parent ) );\n\n\t\t\tif ( is_wp_error( $cat_id ) ) {\n\t\t\t\tcontinue;\n\t\t\t} elseif ( is_array( $cat_id ) ) {\n\t\t\t\t$cat_id = $cat_id['term_id'];\n\t\t\t}\n\n\t\t\t$added[] = $cat_id;\n\t\t}\n\n\t\tif ( empty( $added ) ) {\n\t\t\twp_send_json_error( array( 'errorMessage' => __( 'This category cannot be added. Please change the name and try again.' ) ) );\n\t\t}\n\n\t\tforeach ( $added as $new_cat_id ) {\n\t\t\t$new_cat = get_category( $new_cat_id );\n\n\t\t\tif ( is_wp_error( $new_cat ) ) {\n\t\t\t\twp_send_json_error( array( 'errorMessage' => __( 'Error while adding the category. Please try again later.' ) ) );\n\t\t\t}\n\n\t\t\t$data[] = array(\n\t\t\t\t'term_id' => $new_cat->term_id,\n\t\t\t\t'name' => $new_cat->name,\n\t\t\t\t'parent' => $new_cat->parent,\n\t\t\t);\n\t\t}\n\t\twp_send_json_success( $data );\n\t}\n\n\t/**\n\t * Downloads the source's HTML via server-side call for the given URL.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param string $url URL to scan.\n\t * @return string Source's HTML sanitized markup\n\t */\n\tpublic function fetch_source_html( $url ) {\n\t\tif ( empty( $url ) ) {\n\t\t\treturn new WP_Error( 'invalid-url', __( 'A valid URL was not provided.' ) );\n\t\t}\n\n\t\t$remote_url = wp_safe_remote_get( $url, array(\n\t\t\t'timeout' => 30,\n\t\t\t// Use an explicit user-agent for Press This\n\t\t\t'user-agent' => 'Press This (WordPress/' . get_bloginfo( 'version' ) . '); ' . get_bloginfo( 'url' )\n\t\t) );\n\n\t\tif ( is_wp_error( $remote_url ) ) {\n\t\t\treturn $remote_url;\n\t\t}\n\n\t\t$allowed_elements = array(\n\t\t\t'img' => array(\n\t\t\t\t'src'      => true,\n\t\t\t\t'width'    => true,\n\t\t\t\t'height'   => true,\n\t\t\t),\n\t\t\t'iframe' => array(\n\t\t\t\t'src'      => true,\n\t\t\t),\n\t\t\t'link' => array(\n\t\t\t\t'rel'      => true,\n\t\t\t\t'itemprop' => true,\n\t\t\t\t'href'     => true,\n\t\t\t),\n\t\t\t'meta' => array(\n\t\t\t\t'property' => true,\n\t\t\t\t'name'     => true,\n\t\t\t\t'content'  => true,\n\t\t\t)\n\t\t);\n\n\t\t$source_content = wp_remote_retrieve_body( $remote_url );\n\t\t$source_content = wp_kses( $source_content, $allowed_elements );\n\n\t\treturn $source_content;\n\t}\n\n\t/**\n\t * Utility method to limit an array to 50 values.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param array $value Array to limit.\n\t * @return array Original array if fewer than 50 values, limited array, empty array otherwise.\n\t */\n\tprivate function _limit_array( $value ) {\n\t\tif ( is_array( $value ) ) {\n\t\t\tif ( count( $value ) > 50 ) {\n\t\t\t\treturn array_slice( $value, 0, 50 );\n\t\t\t}\n\n\t\t\treturn $value;\n\t\t}\n\n\t\treturn array();\n\t}\n\n\t/**\n\t * Utility method to limit the length of a given string to 5,000 characters.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $value String to limit.\n\t * @return bool|int|string If boolean or integer, that value. If a string, the original value\n\t *                         if fewer than 5,000 characters, a truncated version, otherwise an\n\t *                         empty string.\n\t */\n\tprivate function _limit_string( $value ) {\n\t\t$return = '';\n\n\t\tif ( is_numeric( $value ) || is_bool( $value ) ) {\n\t\t\t$return = $value;\n\t\t} else if ( is_string( $value ) ) {\n\t\t\tif ( mb_strlen( $value ) > 5000 ) {\n\t\t\t\t$return = mb_substr( $value, 0, 5000 );\n\t\t\t} else {\n\t\t\t\t$return = $value;\n\t\t\t}\n\n\t\t\t$return = html_entity_decode( $return, ENT_QUOTES, 'UTF-8' );\n\t\t\t$return = sanitize_text_field( trim( $return ) );\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Utility method to limit a given URL to 2,048 characters.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $url URL to check for length and validity.\n\t * @return string Escaped URL if of valid length (< 2048) and makeup. Empty string otherwise.\n\t */\n\tprivate function _limit_url( $url ) {\n\t\tif ( ! is_string( $url ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// HTTP 1.1 allows 8000 chars but the \"de-facto\" standard supported in all current browsers is 2048.\n\t\tif ( strlen( $url ) > 2048 ) {\n\t\t\treturn ''; // Return empty rather than a truncated/invalid URL\n\t\t}\n\n\t\t// Does not look like a URL.\n\t\tif ( ! preg_match( '/^([!#$&-;=?-\\[\\]_a-z~]|%[0-9a-fA-F]{2})+$/', $url ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// If the URL is root-relative, prepend the protocol and domain name\n\t\tif ( $url && $this->domain && preg_match( '%^/[^/]+%', $url ) ) {\n\t\t\t$url = $this->domain . $url;\n\t\t}\n\n\t\t// Not absolute or protocol-relative URL.\n\t\tif ( ! preg_match( '%^(?:https?:)?//[^/]+%', $url ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn esc_url_raw( $url, array( 'http', 'https' ) );\n\t}\n\n\t/**\n\t * Utility method to limit image source URLs.\n\t *\n\t * Excluded URLs include share-this type buttons, loaders, spinners, spacers, WordPress interface images,\n\t * tiny buttons or thumbs, mathtag.com or quantserve.com images, or the WordPress.com stats gif.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $src Image source URL.\n\t * @return string If not matched an excluded URL type, the original URL, empty string otherwise.\n\t */\n\tprivate function _limit_img( $src ) {\n\t\t$src = $this->_limit_url( $src );\n\n\t\tif ( preg_match( '!/ad[sx]?/!i', $src ) ) {\n\t\t\t// Ads\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!(/share-?this[^.]+?\\.[a-z0-9]{3,4})(\\?.*)?$!i', $src ) ) {\n\t\t\t// Share-this type button\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!/(spinner|loading|spacer|blank|rss)\\.(gif|jpg|png)!i', $src ) ) {\n\t\t\t// Loaders, spinners, spacers\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!/([^./]+[-_])?(spinner|loading|spacer|blank)s?([-_][^./]+)?\\.[a-z0-9]{3,4}!i', $src ) ) {\n\t\t\t// Fancy loaders, spinners, spacers\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!([^./]+[-_])?thumb[^.]*\\.(gif|jpg|png)$!i', $src ) ) {\n\t\t\t// Thumbnails, too small, usually irrelevant to context\n\t\t\treturn '';\n\t\t} else if ( false !== stripos( $src, '/wp-includes/' ) ) {\n\t\t\t// Classic WordPress interface images\n\t\t\treturn '';\n\t\t} else if ( preg_match( '![^\\d]\\d{1,2}x\\d+\\.(gif|jpg|png)$!i', $src ) ) {\n\t\t\t// Most often tiny buttons/thumbs (< 100px wide)\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!/pixel\\.(mathtag|quantserve)\\.com!i', $src ) ) {\n\t\t\t// See mathtag.com and https://www.quantcast.com/how-we-do-it/iab-standard-measurement/how-we-collect-data/\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!/[gb]\\.gif(\\?.+)?$!i', $src ) ) {\n\t\t\t// WordPress.com stats gif\n\t\t\treturn '';\n\t\t}\n\n\t\treturn $src;\n\t}\n\n\t/**\n\t * Limit embed source URLs to specific providers.\n\t *\n\t * Not all core oEmbed providers are supported. Supported providers include YouTube, Vimeo,\n\t * Vine, Daily Motion, SoundCloud, and Twitter.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $src Embed source URL.\n\t * @return string If not from a supported provider, an empty string. Otherwise, a reformatted embed URL.\n\t */\n\tprivate function _limit_embed( $src ) {\n\t\t$src = $this->_limit_url( $src );\n\n\t\tif ( empty( $src ) )\n\t\t\treturn '';\n\n\t\tif ( preg_match( '!//(m|www)\\.youtube\\.com/(embed|v)/([^?]+)\\?.+$!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Youtube videos (www or mobile)\n\t\t\t$src = 'https://www.youtube.com/watch?v=' . $src_matches[3];\n\t\t} else if ( preg_match( '!//player\\.vimeo\\.com/video/([\\d]+)([?/].*)?$!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Vimeo iframe videos\n\t\t\t$src = 'https://vimeo.com/' . (int) $src_matches[1];\n\t\t} else if ( preg_match( '!//vimeo\\.com/moogaloop\\.swf\\?clip_id=([\\d]+)$!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Vimeo Flash videos\n\t\t\t$src = 'https://vimeo.com/' . (int) $src_matches[1];\n\t\t} else if ( preg_match( '!//vine\\.co/v/([^/]+)/embed!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Vine videos\n\t\t\t$src = 'https://vine.co/v/' . $src_matches[1];\n\t\t} else if ( preg_match( '!//(www\\.)?dailymotion\\.com/embed/video/([^/?]+)([/?].+)?!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Daily Motion videos\n\t\t\t$src = 'https://www.dailymotion.com/video/' . $src_matches[2];\n\t\t} else {\n\t\t\t$oembed = _wp_oembed_get_object();\n\n\t\t\tif ( ! $oembed->get_provider( $src, array( 'discover' => false ) ) ) {\n\t\t\t\t$src = '';\n\t\t\t}\n\t\t}\n\n\t\treturn $src;\n\t}\n\n\t/**\n\t * Process a meta data entry from the source.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $meta_name  Meta key name.\n\t * @param mixed  $meta_value Meta value.\n\t * @param array  $data       Associative array of source data.\n\t * @return array Processed data array.\n\t */\n\tprivate function _process_meta_entry( $meta_name, $meta_value, $data ) {\n\t\tif ( preg_match( '/:?(title|description|keywords|site_name)$/', $meta_name ) ) {\n\t\t\t$data['_meta'][ $meta_name ] = $meta_value;\n\t\t} else {\n\t\t\tswitch ( $meta_name ) {\n\t\t\t\tcase 'og:url':\n\t\t\t\tcase 'og:video':\n\t\t\t\tcase 'og:video:secure_url':\n\t\t\t\t\t$meta_value = $this->_limit_embed( $meta_value );\n\n\t\t\t\t\tif ( ! isset( $data['_embeds'] ) ) {\n\t\t\t\t\t\t$data['_embeds'] = array();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $meta_value ) && ! in_array( $meta_value, $data['_embeds'] ) ) {\n\t\t\t\t\t\t$data['_embeds'][] = $meta_value;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'og:image':\n\t\t\t\tcase 'og:image:secure_url':\n\t\t\t\tcase 'twitter:image0:src':\n\t\t\t\tcase 'twitter:image0':\n\t\t\t\tcase 'twitter:image:src':\n\t\t\t\tcase 'twitter:image':\n\t\t\t\t\t$meta_value = $this->_limit_img( $meta_value );\n\n\t\t\t\t\tif ( ! isset( $data['_images'] ) ) {\n\t\t\t\t\t\t$data['_images'] = array();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $meta_value ) && ! in_array( $meta_value, $data['_images'] ) ) {\n\t\t\t\t\t\t$data['_images'][] = $meta_value;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Fetches and parses _meta, _images, and _links data from the source.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param string $url  URL to scan.\n\t * @param array  $data Optional. Existing data array if you have one. Default empty array.\n\t * @return array New data array.\n\t */\n\tpublic function source_data_fetch_fallback( $url, $data = array() ) {\n\t\tif ( empty( $url ) ) {\n\t\t\treturn array();\n\t\t}\n\n\t\t// Download source page to tmp file.\n\t\t$source_content = $this->fetch_source_html( $url );\n\t\tif ( is_wp_error( $source_content ) ) {\n\t\t\treturn array( 'errors' => $source_content->get_error_messages() );\n\t\t}\n\n\t\t// Fetch and gather <meta> data first, so discovered media is offered 1st to user.\n\t\tif ( empty( $data['_meta'] ) ) {\n\t\t\t$data['_meta'] = array();\n\t\t}\n\n\t\tif ( preg_match_all( '/<meta [^>]+>/', $source_content, $matches ) ) {\n\t\t\t$items = $this->_limit_array( $matches[0] );\n\n\t\t\tforeach ( $items as $value ) {\n\t\t\t\tif ( preg_match( '/(property|name)=\"([^\"]+)\"[^>]+content=\"([^\"]+)\"/', $value, $new_matches ) ) {\n\t\t\t\t\t$meta_name  = $this->_limit_string( $new_matches[2] );\n\t\t\t\t\t$meta_value = $this->_limit_string( $new_matches[3] );\n\n\t\t\t\t\t// Sanity check. $key is usually things like 'title', 'description', 'keywords', etc.\n\t\t\t\t\tif ( strlen( $meta_name ) > 100 ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data = $this->_process_meta_entry( $meta_name, $meta_value, $data );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fetch and gather <img> data.\n\t\tif ( empty( $data['_images'] ) ) {\n\t\t\t$data['_images'] = array();\n\t\t}\n\n\t\tif ( preg_match_all( '/<img [^>]+>/', $source_content, $matches ) ) {\n\t\t\t$items = $this->_limit_array( $matches[0] );\n\n\t\t\tforeach ( $items as $value ) {\n\t\t\t\tif ( ( preg_match( '/width=(\\'|\")(\\d+)\\\\1/i', $value, $new_matches ) && $new_matches[2] < 256 ) ||\n\t\t\t\t\t( preg_match( '/height=(\\'|\")(\\d+)\\\\1/i', $value, $new_matches ) && $new_matches[2] < 128 ) ) {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( preg_match( '/src=(\\'|\")([^\\'\"]+)\\\\1/i', $value, $new_matches ) ) {\n\t\t\t\t\t$src = $this->_limit_img( $new_matches[2] );\n\t\t\t\t\tif ( ! empty( $src ) && ! in_array( $src, $data['_images'] ) ) {\n\t\t\t\t\t\t$data['_images'][] = $src;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fetch and gather <iframe> data.\n\t\tif ( empty( $data['_embeds'] ) ) {\n\t\t\t$data['_embeds'] = array();\n\t\t}\n\n\t\tif ( preg_match_all( '/<iframe [^>]+>/', $source_content, $matches ) ) {\n\t\t\t$items = $this->_limit_array( $matches[0] );\n\n\t\t\tforeach ( $items as $value ) {\n\t\t\t\tif ( preg_match( '/src=(\\'|\")([^\\'\"]+)\\\\1/', $value, $new_matches ) ) {\n\t\t\t\t\t$src = $this->_limit_embed( $new_matches[2] );\n\n\t\t\t\t\tif ( ! empty( $src ) && ! in_array( $src, $data['_embeds'] ) ) {\n\t\t\t\t\t\t$data['_embeds'][] = $src;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fetch and gather <link> data.\n\t\tif ( empty( $data['_links'] ) ) {\n\t\t\t$data['_links'] = array();\n\t\t}\n\n\t\tif ( preg_match_all( '/<link [^>]+>/', $source_content, $matches ) ) {\n\t\t\t$items = $this->_limit_array( $matches[0] );\n\n\t\t\tforeach ( $items as $value ) {\n\t\t\t\tif ( preg_match( '/rel=[\"\\'](canonical|shortlink|icon)[\"\\']/i', $value, $matches_rel ) && preg_match( '/href=[\\'\"]([^\\'\" ]+)[\\'\"]/i', $value, $matches_url ) ) {\n\t\t\t\t\t$rel = $matches_rel[1];\n\t\t\t\t\t$url = $this->_limit_url( $matches_url[1] );\n\n\t\t\t\t\tif ( ! empty( $url ) && empty( $data['_links'][ $rel ] ) ) {\n\t\t\t\t\t\t$data['_links'][ $rel ] = $url;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Handles backward-compat with the legacy version of Press This by supporting its query string params.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @return array\n\t */\n\tpublic function merge_or_fetch_data() {\n\t\t// Get data from $_POST and $_GET, as appropriate ($_POST > $_GET), to remain backward compatible.\n\t\t$data = array();\n\n\t\t// Only instantiate the keys we want. Sanity check and sanitize each one.\n\t\tforeach ( array( 'u', 's', 't', 'v' ) as $key ) {\n\t\t\tif ( ! empty( $_POST[ $key ] ) ) {\n\t\t\t\t$value = wp_unslash( $_POST[ $key ] );\n\t\t\t} else if ( ! empty( $_GET[ $key ] ) ) {\n\t\t\t\t$value = wp_unslash( $_GET[ $key ] );\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( 'u' === $key ) {\n\t\t\t\t$value = $this->_limit_url( $value );\n\n\t\t\t\tif ( preg_match( '%^(?:https?:)?//[^/]+%i', $value, $domain_match ) ) {\n\t\t\t\t\t$this->domain = $domain_match[0];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$value = $this->_limit_string( $value );\n\t\t\t}\n\n\t\t\tif ( ! empty( $value ) ) {\n\t\t\t\t$data[ $key ] = $value;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters whether to enable in-source media discovery in Press This.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param bool $enable Whether to enable media discovery.\n\t\t */\n\t\tif ( apply_filters( 'enable_press_this_media_discovery', true ) ) {\n\t\t\t/*\n\t\t\t * If no title, _images, _embed, and _meta was passed via $_POST, fetch data from source as fallback,\n\t\t\t * making PT fully backward compatible with the older bookmarklet.\n\t\t\t */\n\t\t\tif ( empty( $_POST ) && ! empty( $data['u'] ) ) {\n\t\t\t\t$data = $this->source_data_fetch_fallback( $data['u'], $data );\n\t\t\t} else {\n\t\t\t\tforeach ( array( '_images', '_embeds' ) as $type ) {\n\t\t\t\t\tif ( empty( $_POST[ $type ] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data[ $type ] = array();\n\t\t\t\t\t$items = $this->_limit_array( $_POST[ $type ] );\n\n\t\t\t\t\tforeach ( $items as $key => $value ) {\n\t\t\t\t\t\tif ( $type === '_images' ) {\n\t\t\t\t\t\t\t$value = $this->_limit_img( wp_unslash( $value ) );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$value = $this->_limit_embed( wp_unslash( $value ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $value ) ) {\n\t\t\t\t\t\t\t$data[ $type ][] = $value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tforeach ( array( '_meta', '_links' ) as $type ) {\n\t\t\t\t\tif ( empty( $_POST[ $type ] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data[ $type ] = array();\n\t\t\t\t\t$items = $this->_limit_array( $_POST[ $type ] );\n\n\t\t\t\t\tforeach ( $items as $key => $value ) {\n\t\t\t\t\t\t// Sanity check. These are associative arrays, $key is usually things like 'title', 'description', 'keywords', etc.\n\t\t\t\t\t\tif ( empty( $key ) || strlen( $key ) > 100 ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( $type === '_meta' ) {\n\t\t\t\t\t\t\t$value = $this->_limit_string( wp_unslash( $value ) );\n\n\t\t\t\t\t\t\tif ( ! empty( $value ) ) {\n\t\t\t\t\t\t\t\t$data = $this->_process_meta_entry( $key, $value, $data );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ( in_array( $key, array( 'canonical', 'shortlink', 'icon' ), true ) ) {\n\t\t\t\t\t\t\t\t$data[ $type ][ $key ] = $this->_limit_url( wp_unslash( $value ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Support passing a single image src as `i`\n\t\t\tif ( ! empty( $_REQUEST['i'] ) && ( $img_src = $this->_limit_img( wp_unslash( $_REQUEST['i'] ) ) ) ) {\n\t\t\t\tif ( empty( $data['_images'] ) ) {\n\t\t\t\t\t$data['_images'] = array( $img_src );\n\t\t\t\t} elseif ( ! in_array( $img_src, $data['_images'], true ) ) {\n\t\t\t\t\tarray_unshift( $data['_images'], $img_src );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the Press This data array.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param array $data Press This Data array.\n\t\t */\n\t\treturn apply_filters( 'press_this_data', $data );\n\t}\n\n\t/**\n\t * Adds another stylesheet inside TinyMCE.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param string $styles URL to editor stylesheet.\n\t * @return string Possibly modified stylesheets list.\n\t */\n\tpublic function add_editor_style( $styles ) {\n\t\tif ( ! empty( $styles ) ) {\n\t\t\t$styles .= ',';\n\t\t}\n\n\t\t$press_this = admin_url( 'css/press-this-editor.css' );\n\t\tif ( is_rtl() ) {\n\t\t\t$press_this = str_replace( '.css', '-rtl.css', $press_this );\n\t\t}\n\n\t\treturn $styles . $press_this;\n\t}\n\n\t/**\n\t * Outputs the post format selection HTML.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param WP_Post $post Post object.\n\t */\n\tpublic function post_formats_html( $post ) {\n\t\tif ( current_theme_supports( 'post-formats' ) && post_type_supports( $post->post_type, 'post-formats' ) ) {\n\t\t\t$post_formats = get_theme_support( 'post-formats' );\n\n\t\t\tif ( is_array( $post_formats[0] ) ) {\n\t\t\t\t$post_format = get_post_format( $post->ID );\n\n\t\t\t\tif ( ! $post_format ) {\n\t\t\t\t\t$post_format = '0';\n\t\t\t\t}\n\n\t\t\t\t// Add in the current one if it isn't there yet, in case the current theme doesn't support it.\n\t\t\t\tif ( $post_format && ! in_array( $post_format, $post_formats[0] ) ) {\n\t\t\t\t\t$post_formats[0][] = $post_format;\n\t\t\t\t}\n\n\t\t\t\t?>\n\t\t\t\t<div id=\"post-formats-select\">\n\t\t\t\t<fieldset><legend class=\"screen-reader-text\"><?php _e( 'Post Formats' ); ?></legend>\n\t\t\t\t\t<input type=\"radio\" name=\"post_format\" class=\"post-format\" id=\"post-format-0\" value=\"0\" <?php checked( $post_format, '0' ); ?> />\n\t\t\t\t\t<label for=\"post-format-0\" class=\"post-format-icon post-format-standard\"><?php echo get_post_format_string( 'standard' ); ?></label>\n\t\t\t\t\t<?php\n\n\t\t\t\t\tforeach ( $post_formats[0] as $format ) {\n\t\t\t\t\t\t$attr_format = esc_attr( $format );\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<input type=\"radio\" name=\"post_format\" class=\"post-format\" id=\"post-format-<?php echo $attr_format; ?>\" value=\"<?php echo $attr_format; ?>\" <?php checked( $post_format, $format ); ?> />\n\t\t\t\t\t\t<label for=\"post-format-<?php echo $attr_format ?>\" class=\"post-format-icon post-format-<?php echo $attr_format; ?>\"><?php echo esc_html( get_post_format_string( $format ) ); ?></label>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t }\n\n\t\t\t\t\t ?>\n\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<?php\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Outputs the categories HTML.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param WP_Post $post Post object.\n\t */\n\tpublic function categories_html( $post ) {\n\t\t$taxonomy = get_taxonomy( 'category' );\n\n\t\t// Bail if user cannot assign terms\n\t\tif ( ! current_user_can( $taxonomy->cap->assign_terms ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only show \"add\" if user can edit terms\n\t\tif ( current_user_can( $taxonomy->cap->edit_terms ) ) {\n\t\t\t?>\n\t\t\t<button type=\"button\" class=\"add-cat-toggle button-link\" aria-expanded=\"false\">\n\t\t\t\t<span class=\"dashicons dashicons-plus\"></span><span class=\"screen-reader-text\"><?php _e( 'Toggle add category' ); ?></span>\n\t\t\t</button>\n\t\t\t<div class=\"add-category is-hidden\">\n\t\t\t\t<label class=\"screen-reader-text\" for=\"new-category\"><?php echo $taxonomy->labels->add_new_item; ?></label>\n\t\t\t\t<input type=\"text\" id=\"new-category\" class=\"add-category-name\" placeholder=\"<?php echo esc_attr( $taxonomy->labels->new_item_name ); ?>\" value=\"\" aria-required=\"true\">\n\t\t\t\t<label class=\"screen-reader-text\" for=\"new-category-parent\"><?php echo $taxonomy->labels->parent_item_colon; ?></label>\n\t\t\t\t<div class=\"postform-wrapper\">\n\t\t\t\t\t<?php\n\t\t\t\t\twp_dropdown_categories( array(\n\t\t\t\t\t\t'taxonomy'         => 'category',\n\t\t\t\t\t\t'hide_empty'       => 0,\n\t\t\t\t\t\t'name'             => 'new-category-parent',\n\t\t\t\t\t\t'orderby'          => 'name',\n\t\t\t\t\t\t'hierarchical'     => 1,\n\t\t\t\t\t\t'show_option_none' => '&mdash; ' . $taxonomy->labels->parent_item . ' &mdash;'\n\t\t\t\t\t) );\n\t\t\t\t\t?>\n\t\t\t\t</div>\n\t\t\t\t<button type=\"button\" class=\"add-cat-submit\"><?php _e( 'Add' ); ?></button>\n\t\t\t</div>\n\t\t\t<?php\n\n\t\t}\n\t\t?>\n\t\t<div class=\"categories-search-wrapper\">\n\t\t\t<input id=\"categories-search\" type=\"search\" class=\"categories-search\" placeholder=\"<?php esc_attr_e( 'Search categories by name' ) ?>\">\n\t\t\t<label for=\"categories-search\">\n\t\t\t\t<span class=\"dashicons dashicons-search\"></span><span class=\"screen-reader-text\"><?php _e( 'Search categories' ); ?></span>\n\t\t\t</label>\n\t\t</div>\n\t\t<div aria-label=\"<?php esc_attr_e( 'Categories' ); ?>\">\n\t\t\t<ul class=\"categories-select\">\n\t\t\t\t<?php wp_terms_checklist( $post->ID, array( 'taxonomy' => 'category', 'list_only' => true ) ); ?>\n\t\t\t</ul>\n\t\t</div>\n\t\t<?php\n\t}\n\n\t/**\n\t * Outputs the tags HTML.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param WP_Post $post Post object.\n\t */\n\tpublic function tags_html( $post ) {\n\t\t$taxonomy              = get_taxonomy( 'post_tag' );\n\t\t$user_can_assign_terms = current_user_can( $taxonomy->cap->assign_terms );\n\t\t$esc_tags              = get_terms_to_edit( $post->ID, 'post_tag' );\n\n\t\tif ( ! $esc_tags || is_wp_error( $esc_tags ) ) {\n\t\t\t$esc_tags = '';\n\t\t}\n\n\t\t?>\n\t\t<div class=\"tagsdiv\" id=\"post_tag\">\n\t\t\t<div class=\"jaxtag\">\n\t\t\t<input type=\"hidden\" name=\"tax_input[post_tag]\" class=\"the-tags\" value=\"<?php echo $esc_tags; // escaped in get_terms_to_edit() ?>\">\n\t\t \t<?php\n\n\t\t\tif ( $user_can_assign_terms ) {\n\t\t\t\t?>\n\t\t\t\t<div class=\"ajaxtag hide-if-no-js\">\n\t\t\t\t\t<label class=\"screen-reader-text\" for=\"new-tag-post_tag\"><?php _e( 'Tags' ); ?></label>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<input type=\"text\" id=\"new-tag-post_tag\" name=\"newtag[post_tag]\" class=\"newtag form-input-tip\" size=\"16\" autocomplete=\"off\" value=\"\" aria-describedby=\"new-tag-desc\" />\n\t\t\t\t\t\t<button type=\"button\" class=\"tagadd\"><?php _e( 'Add' ); ?></button>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<p class=\"howto\" id=\"new-tag-desc\">\n\t\t\t\t\t<?php echo $taxonomy->labels->separate_items_with_commas; ?>\n\t\t\t\t</p>\n\t\t\t\t<?php\n\t\t\t}\n\n\t\t\t?>\n\t\t\t</div>\n\t\t\t<div class=\"tagchecklist\"></div>\n\t\t</div>\n\t\t<?php\n\n\t\tif ( $user_can_assign_terms ) {\n\t\t\t?>\n\t\t\t<button type=\"button\" class=\"button-link tagcloud-link\" id=\"link-post_tag\" aria-expanded=\"false\"><?php echo $taxonomy->labels->choose_from_most_used; ?></button>\n\t\t\t<?php\n\t\t}\n\t}\n\n\t/**\n\t * Get a list of embeds with no duplicates.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return array Embeds selected to be available.\n\t */\n\tpublic function get_embeds( $data ) {\n\t\t$selected_embeds = array();\n\n\t\t// Make sure to add the Pressed page if it's a valid oembed itself\n\t\tif ( ! empty ( $data['u'] ) && $this->_limit_embed( $data['u'] ) ) {\n\t\t\t$data['_embeds'][] = $data['u'];\n\t\t}\n\n\t\tif ( ! empty( $data['_embeds'] ) ) {\n\t\t\tforeach ( $data['_embeds'] as $src ) {\n\t\t\t\t$prot_relative_src = preg_replace( '/^https?:/', '', $src );\n\n\t\t\t\tif ( in_array( $prot_relative_src, $this->embeds ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$selected_embeds[] = $src;\n\t\t\t\t$this->embeds[] = $prot_relative_src;\n\t\t\t}\n\t\t}\n\n\t\treturn $selected_embeds;\n\t}\n\n\t/**\n\t * Get a list of images with no duplicates.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return array\n\t */\n\tpublic function get_images( $data ) {\n\t\t$selected_images = array();\n\n\t\tif ( ! empty( $data['_images'] ) ) {\n\t\t\tforeach ( $data['_images'] as $src ) {\n\t\t\t\tif ( false !== strpos( $src, 'gravatar.com' ) ) {\n\t\t\t\t\t$src = preg_replace( '%http://[\\d]+\\.gravatar\\.com/%', 'https://secure.gravatar.com/', $src );\n\t\t\t\t}\n\n\t\t\t\t$prot_relative_src = preg_replace( '/^https?:/', '', $src );\n\n\t\t\t\tif ( in_array( $prot_relative_src, $this->images ) ||\n\t\t\t\t\t( false !== strpos( $src, 'avatar' ) && count( $this->images ) > 15 ) ) {\n\t\t\t\t\t// Skip: already selected or some type of avatar and we've already gathered more than 15 images.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$selected_images[] = $src;\n\t\t\t\t$this->images[] = $prot_relative_src;\n\t\t\t}\n\t\t}\n\n\t\treturn $selected_images;\n\t}\n\n\t/**\n\t * Gets the source page's canonical link, based on passed location and meta data.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n \t * @param array $data The site's data.\n\t * @return string Discovered canonical URL, or empty\n\t */\n\tpublic function get_canonical_link( $data ) {\n\t\t$link = '';\n\n\t\tif ( ! empty( $data['_links']['canonical'] ) ) {\n\t\t\t$link = $data['_links']['canonical'];\n\t\t} elseif ( ! empty( $data['u'] ) ) {\n\t\t\t$link = $data['u'];\n\t\t} elseif ( ! empty( $data['_meta'] ) ) {\n\t\t\tif ( ! empty( $data['_meta']['twitter:url'] ) ) {\n\t\t\t\t$link = $data['_meta']['twitter:url'];\n\t\t\t} else if ( ! empty( $data['_meta']['og:url'] ) ) {\n\t\t\t\t$link = $data['_meta']['og:url'];\n\t\t\t}\n\t\t}\n\n\t\tif ( empty( $link ) && ! empty( $data['_links']['shortlink'] ) ) {\n\t\t\t$link = $data['_links']['shortlink'];\n\t\t}\n\n\t\treturn $link;\n\t}\n\n\t/**\n\t * Gets the source page's site name, based on passed meta data.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return string Discovered site name, or empty\n\t */\n\tpublic function get_source_site_name( $data ) {\n\t\t$name = '';\n\n\t\tif ( ! empty( $data['_meta'] ) ) {\n\t\t\tif ( ! empty( $data['_meta']['og:site_name'] ) ) {\n\t\t\t\t$name = $data['_meta']['og:site_name'];\n\t\t\t} else if ( ! empty( $data['_meta']['application-name'] ) ) {\n\t\t\t\t$name = $data['_meta']['application-name'];\n\t\t\t}\n\t\t}\n\n\t\treturn $name;\n\t}\n\n\t/**\n\t * Gets the source page's title, based on passed title and meta data.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return string Discovered page title, or empty\n\t */\n\tpublic function get_suggested_title( $data ) {\n\t\t$title = '';\n\n\t\tif ( ! empty( $data['t'] ) ) {\n\t\t\t$title = $data['t'];\n\t\t} elseif ( ! empty( $data['_meta'] ) ) {\n\t\t\tif ( ! empty( $data['_meta']['twitter:title'] ) ) {\n\t\t\t\t$title = $data['_meta']['twitter:title'];\n\t\t\t} else if ( ! empty( $data['_meta']['og:title'] ) ) {\n\t\t\t\t$title = $data['_meta']['og:title'];\n\t\t\t} else if ( ! empty( $data['_meta']['title'] ) ) {\n\t\t\t\t$title = $data['_meta']['title'];\n\t\t\t}\n\t\t}\n\n\t\treturn $title;\n\t}\n\n\t/**\n\t * Gets the source page's suggested content, based on passed data (description, selection, etc).\n\t *\n\t * Features a blockquoted excerpt, as well as content attribution, if any.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return string Discovered content, or empty\n\t */\n\tpublic function get_suggested_content( $data ) {\n\t\t$content = $text = '';\n\n\t\tif ( ! empty( $data['s'] ) ) {\n\t\t\t$text = $data['s'];\n\t\t} else if ( ! empty( $data['_meta'] ) ) {\n\t\t\tif ( ! empty( $data['_meta']['twitter:description'] ) ) {\n\t\t\t\t$text = $data['_meta']['twitter:description'];\n\t\t\t} else if ( ! empty( $data['_meta']['og:description'] ) ) {\n\t\t\t\t$text = $data['_meta']['og:description'];\n\t\t\t} else if ( ! empty( $data['_meta']['description'] ) ) {\n\t\t\t\t$text = $data['_meta']['description'];\n\t\t\t}\n\n\t\t\t// If there is an ellipsis at the end, the description is very likely auto-generated. Better to ignore it.\n\t\t\tif ( $text && substr( $text, -3 ) === '...' ) {\n\t\t\t\t$text = '';\n\t\t\t}\n\t\t}\n\n\t\t$default_html = array( 'quote' => '', 'link' => '', 'embed' => '' );\n\n\t\tif ( ! empty( $data['u'] ) && $this->_limit_embed( $data['u'] ) ) {\n\t\t\t$default_html['embed'] = '<p>[embed]' . $data['u'] . '[/embed]</p>';\n\n\t\t\tif ( ! empty( $data['s'] ) ) {\n\t\t\t\t// If the user has selected some text, do quote it.\n\t\t\t\t$default_html['quote'] = '<blockquote>%1$s</blockquote>';\n\t\t\t}\n\t\t} else {\n\t\t\t$default_html['quote'] = '<blockquote>%1$s</blockquote>';\n\t\t\t$default_html['link'] = '<p>' . _x( 'Source:', 'Used in Press This to indicate where the content comes from.' ) .\n\t\t\t\t' <em><a href=\"%1$s\">%2$s</a></em></p>';\n\t\t}\n\n\t\t/**\n\t\t * Filters the default HTML tags used in the suggested content for the editor.\n\t\t *\n\t\t * The HTML strings use printf format. After filtering the content is added at the specified places with `sprintf()`.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param array $default_html Associative array with three possible keys:\n\t\t *                                - 'quote' where %1$s is replaced with the site description or the selected content.\n\t\t *                                - 'link' where %1$s is link href, %2$s is link text, usually the source page title.\n\t\t *                                - 'embed' which contains an [embed] shortcode when the source page offers embeddable content.\n\t\t * @param array $data         Associative array containing the data from the source page.\n\t\t */\n\t\t$default_html = apply_filters( 'press_this_suggested_html', $default_html, $data );\n\n\t\tif ( ! empty( $default_html['embed'] ) ) {\n\t\t\t$content .= $default_html['embed'];\n\t\t}\n\n\t\t// Wrap suggested content in the specified HTML.\n\t\tif ( ! empty( $default_html['quote'] ) && $text ) {\n\t\t\t$content .= sprintf( $default_html['quote'], $text );\n\t\t}\n\n\t\t// Add source attribution if there is one available.\n\t\tif ( ! empty( $default_html['link'] ) ) {\n\t\t\t$title = $this->get_suggested_title( $data );\n\t\t\t$url = $this->get_canonical_link( $data );\n\n\t\t\tif ( ! $title ) {\n\t\t\t\t$title = $this->get_source_site_name( $data );\n\t\t\t}\n\n\t\t\tif ( $url && $title ) {\n\t\t\t\t$content .= sprintf( $default_html['link'], $url, $title );\n\t\t\t}\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Serves the app's base HTML, which in turns calls the load script.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @global WP_Locale $wp_locale\n\t * @global bool      $is_IE\n\t */\n\tpublic function html() {\n\t\tglobal $wp_locale;\n\n\t\t$wp_version = get_bloginfo( 'version' );\n\n\t\t// Get data, new (POST) and old (GET).\n\t\t$data = $this->merge_or_fetch_data();\n\n\t\t$post_title = $this->get_suggested_title( $data );\n\n\t\t$post_content = $this->get_suggested_content( $data );\n\n\t\t// Get site settings array/data.\n\t\t$site_settings = $this->site_settings();\n\n\t\t// Pass the images and embeds\n\t\t$images = $this->get_images( $data );\n\t\t$embeds = $this->get_embeds( $data );\n\n\t\t$site_data = array(\n\t\t\t'v' => ! empty( $data['v'] ) ? $data['v'] : '',\n\t\t\t'u' => ! empty( $data['u'] ) ? $data['u'] : '',\n\t\t\t'hasData' => ! empty( $data ),\n\t\t);\n\n\t\tif ( ! empty( $images ) ) {\n\t\t\t$site_data['_images'] = $images;\n\t\t}\n\n\t\tif ( ! empty( $embeds ) ) {\n\t\t\t$site_data['_embeds'] = $embeds;\n\t\t}\n\n\t\t// Add press-this-editor.css and remove theme's editor-style.css, if any.\n\t\tremove_editor_styles();\n\n\t\tadd_filter( 'mce_css', array( $this, 'add_editor_style' ) );\n\n\t\tif ( ! empty( $GLOBALS['is_IE'] ) ) {\n\t\t\t@header( 'X-UA-Compatible: IE=edge' );\n\t\t}\n\n\t\t@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );\n\n?>\n<!DOCTYPE html>\n<!--[if IE 7]>         <html class=\"lt-ie9 lt-ie8\" <?php language_attributes(); ?>> <![endif]-->\n<!--[if IE 8]>         <html class=\"lt-ie9\" <?php language_attributes(); ?>> <![endif]-->\n<!--[if gt IE 8]><!--> <html <?php language_attributes(); ?>> <!--<![endif]-->\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"<?php echo esc_attr( get_bloginfo( 'html_type' ) ); ?>; charset=<?php echo esc_attr( get_option( 'blog_charset' ) ); ?>\" />\n\t<meta name=\"viewport\" content=\"width=device-width\">\n\t<title><?php esc_html_e( 'Press This!' ) ?></title>\n\n\t<script>\n\t\twindow.wpPressThisData   = <?php echo wp_json_encode( $site_data ); ?>;\n\t\twindow.wpPressThisConfig = <?php echo wp_json_encode( $site_settings ); ?>;\n\t</script>\n\n\t<script type=\"text/javascript\">\n\t\tvar ajaxurl = '<?php echo esc_js( admin_url( 'admin-ajax.php', 'relative' ) ); ?>',\n\t\t\tpagenow = 'press-this',\n\t\t\ttypenow = 'post',\n\t\t\tadminpage = 'press-this-php',\n\t\t\tthousandsSeparator = '<?php echo addslashes( $wp_locale->number_format['thousands_sep'] ); ?>',\n\t\t\tdecimalPoint = '<?php echo addslashes( $wp_locale->number_format['decimal_point'] ); ?>',\n\t\t\tisRtl = <?php echo (int) is_rtl(); ?>;\n\t</script>\n\n\t<?php\n\t\t/*\n\t\t * $post->ID is needed for the embed shortcode so we can show oEmbed previews in the editor.\n\t\t * Maybe find a way without it.\n\t\t */\n\t\t$post = get_default_post_to_edit( 'post', true );\n\t\t$post_ID = (int) $post->ID;\n\n\t\twp_enqueue_media( array( 'post' => $post_ID ) );\n\t\twp_enqueue_style( 'press-this' );\n\t\twp_enqueue_script( 'press-this' );\n\t\twp_enqueue_script( 'json2' );\n\t\twp_enqueue_script( 'editor' );\n\n\t\t$categories_tax   = get_taxonomy( 'category' );\n\t\t$show_categories  = current_user_can( $categories_tax->cap->assign_terms ) || current_user_can( $categories_tax->cap->edit_terms );\n\n\t\t$tag_tax          = get_taxonomy( 'post_tag' );\n\t\t$show_tags        = current_user_can( $tag_tax->cap->assign_terms );\n\n\t\t$supports_formats = false;\n\t\t$post_format      = 0;\n\n\t\tif ( current_theme_supports( 'post-formats' ) && post_type_supports( $post->post_type, 'post-formats' ) ) {\n\t\t\t$supports_formats = true;\n\n\t\t\tif ( ! ( $post_format = get_post_format( $post_ID ) ) ) {\n\t\t\t\t$post_format = 0;\n\t\t\t}\n\t\t}\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_enqueue_scripts', 'press-this.php' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_print_styles-press-this.php' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_print_styles' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_print_scripts-press-this.php' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_print_scripts' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_head-press-this.php' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_head' );\n\t?>\n</head>\n<?php\n\n\t$admin_body_class  = 'press-this';\n\t$admin_body_class .= ( is_rtl() ) ? ' rtl' : '';\n\t$admin_body_class .= ' branch-' . str_replace( array( '.', ',' ), '-', floatval( $wp_version ) );\n\t$admin_body_class .= ' version-' . str_replace( '.', '-', preg_replace( '/^([.0-9]+).*/', '$1', $wp_version ) );\n\t$admin_body_class .= ' admin-color-' . sanitize_html_class( get_user_option( 'admin_color' ), 'fresh' );\n\t$admin_body_class .= ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_user_locale() ) ) );\n\n\t/** This filter is documented in wp-admin/admin-header.php */\n\t$admin_body_classes = apply_filters( 'admin_body_class', '' );\n\n?>\n<body class=\"wp-admin wp-core-ui <?php echo $admin_body_classes . ' ' . $admin_body_class; ?>\">\n\t<div id=\"adminbar\" class=\"adminbar\">\n\t\t<h1 id=\"current-site\" class=\"current-site\">\n\t\t\t<a class=\"current-site-link\" href=\"<?php echo esc_url( home_url( '/' ) ); ?>\" target=\"_blank\" rel=\"home\">\n\t\t\t\t<span class=\"dashicons dashicons-wordpress\"></span>\n\t\t\t\t<span class=\"current-site-name\"><?php bloginfo( 'name' ); ?></span>\n\t\t\t</a>\n\t\t</h1>\n\t\t<button type=\"button\" class=\"options button-link closed\">\n\t\t\t<span class=\"dashicons dashicons-tag on-closed\"></span>\n\t\t\t<span class=\"screen-reader-text on-closed\"><?php _e( 'Show post options' ); ?></span>\n\t\t\t<span aria-hidden=\"true\" class=\"on-open\"><?php _e( 'Done' ); ?></span>\n\t\t\t<span class=\"screen-reader-text on-open\"><?php _e( 'Hide post options' ); ?></span>\n\t\t</button>\n\t</div>\n\n\t<div id=\"scanbar\" class=\"scan\">\n\t\t<form method=\"GET\">\n\t\t\t<label for=\"url-scan\" class=\"screen-reader-text\"><?php _e( 'Scan site for content' ); ?></label>\n\t\t\t<input type=\"url\" name=\"u\" id=\"url-scan\" class=\"scan-url\" value=\"\" placeholder=\"<?php esc_attr_e( 'Enter a URL to scan' ) ?>\" />\n\t\t\t<input type=\"submit\" name=\"url-scan-submit\" id=\"url-scan-submit\" class=\"scan-submit\" value=\"<?php esc_attr_e( 'Scan' ) ?>\" />\n\t\t</form>\n\t</div>\n\n\t<form id=\"pressthis-form\" method=\"post\" action=\"post.php\" autocomplete=\"off\">\n\t\t<input type=\"hidden\" name=\"post_ID\" id=\"post_ID\" value=\"<?php echo $post_ID; ?>\" />\n\t\t<input type=\"hidden\" name=\"action\" value=\"press-this-save-post\" />\n\t\t<input type=\"hidden\" name=\"post_status\" id=\"post_status\" value=\"draft\" />\n\t\t<input type=\"hidden\" name=\"wp-preview\" id=\"wp-preview\" value=\"\" />\n\t\t<input type=\"hidden\" name=\"post_title\" id=\"post_title\" value=\"\" />\n\t\t<input type=\"hidden\" name=\"pt-force-redirect\" id=\"pt-force-redirect\" value=\"\" />\n\t\t<?php\n\n\t\twp_nonce_field( 'update-post_' . $post_ID, '_wpnonce', false );\n\t\twp_nonce_field( 'add-category', '_ajax_nonce-add-category', false );\n\n\t\t?>\n\n\t<div class=\"wrapper\">\n\t\t<div class=\"editor-wrapper\">\n\t\t\t<div class=\"alerts\" role=\"alert\" aria-live=\"assertive\" aria-relevant=\"all\" aria-atomic=\"true\">\n\t\t\t\t<?php\n\n\t\t\t\tif ( isset( $data['v'] ) && $this->version > $data['v'] ) {\n\t\t\t\t\t?>\n\t\t\t\t\t<p class=\"alert is-notice\">\n\t\t\t\t\t\t<?php printf( __( 'You should upgrade <a href=\"%s\" target=\"_blank\">your bookmarklet</a> to the latest version!' ), admin_url( 'tools.php' ) ); ?>\n\t\t\t\t\t</p>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\n\t\t\t\t?>\n\t\t\t</div>\n\n\t\t\t<div id=\"app-container\" class=\"editor\">\n\t\t\t\t<span id=\"title-container-label\" class=\"post-title-placeholder\" aria-hidden=\"true\"><?php _e( 'Post title' ); ?></span>\n\t\t\t\t<h2 id=\"title-container\" class=\"post-title\" contenteditable=\"true\" spellcheck=\"true\" aria-label=\"<?php esc_attr_e( 'Post title' ); ?>\" tabindex=\"0\"><?php echo esc_html( $post_title ); ?></h2>\n\n\t\t\t\t<div class=\"media-list-container\">\n\t\t\t\t\t<div class=\"media-list-inner-container\">\n\t\t\t\t\t\t<h2 class=\"screen-reader-text\"><?php _e( 'Suggested media' ); ?></h2>\n\t\t\t\t\t\t<ul class=\"media-list\"></ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<?php\n\t\t\t\twp_editor( $post_content, 'pressthis', array(\n\t\t\t\t\t'drag_drop_upload' => true,\n\t\t\t\t\t'editor_height'    => 600,\n\t\t\t\t\t'media_buttons'    => false,\n\t\t\t\t\t'textarea_name'    => 'post_content',\n\t\t\t\t\t'teeny'            => true,\n\t\t\t\t\t'tinymce'          => array(\n\t\t\t\t\t\t'resize'                => false,\n\t\t\t\t\t\t'wordpress_adv_hidden'  => false,\n\t\t\t\t\t\t'add_unload_trigger'    => false,\n\t\t\t\t\t\t'statusbar'             => false,\n\t\t\t\t\t\t'autoresize_min_height' => 600,\n\t\t\t\t\t\t'wp_autoresize_on'      => true,\n\t\t\t\t\t\t'plugins'               => 'lists,media,paste,tabfocus,fullscreen,wordpress,wpautoresize,wpeditimage,wpgallery,wplink,wptextpattern,wpview',\n\t\t\t\t\t\t'toolbar1'              => 'bold,italic,bullist,numlist,blockquote,link,unlink',\n\t\t\t\t\t\t'toolbar2'              => 'undo,redo',\n\t\t\t\t\t),\n\t\t\t\t\t'quicktags' => array(\n\t\t\t\t\t\t'buttons' => 'strong,em,link,block,del,ins,img,ul,ol,li,code,more',\n\t\t\t\t\t),\n\t\t\t\t) );\n\n\t\t\t\t?>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"options-panel-back is-hidden\" tabindex=\"-1\"></div>\n\t\t<div class=\"options-panel is-off-screen is-hidden\" tabindex=\"-1\">\n\t\t\t<div class=\"post-options\">\n\n\t\t\t\t<?php if ( $supports_formats ) : ?>\n\t\t\t\t\t<button type=\"button\" class=\"post-option\">\n\t\t\t\t\t\t<span class=\"dashicons dashicons-admin-post\"></span>\n\t\t\t\t\t\t<span class=\"post-option-title\"><?php _ex( 'Format', 'post format' ); ?></span>\n\t\t\t\t\t\t<span class=\"post-option-contents\" id=\"post-option-post-format\"><?php echo esc_html( get_post_format_string( $post_format ) ); ?></span>\n\t\t\t\t\t\t<span class=\"dashicons post-option-forward\"></span>\n\t\t\t\t\t</button>\n\t\t\t\t<?php endif; ?>\n\n\t\t\t\t<?php if ( $show_categories ) : ?>\n\t\t\t\t\t<button type=\"button\" class=\"post-option\">\n\t\t\t\t\t\t<span class=\"dashicons dashicons-category\"></span>\n\t\t\t\t\t\t<span class=\"post-option-title\"><?php _e( 'Categories' ); ?></span>\n\t\t\t\t\t\t<span class=\"dashicons post-option-forward\"></span>\n\t\t\t\t\t</button>\n\t\t\t\t<?php endif; ?>\n\n\t\t\t\t<?php if ( $show_tags ) : ?>\n\t\t\t\t\t<button type=\"button\" class=\"post-option\">\n\t\t\t\t\t\t<span class=\"dashicons dashicons-tag\"></span>\n\t\t\t\t\t\t<span class=\"post-option-title\"><?php _e( 'Tags' ); ?></span>\n\t\t\t\t\t\t<span class=\"dashicons post-option-forward\"></span>\n\t\t\t\t\t</button>\n\t\t\t\t<?php endif; ?>\n\t\t\t</div>\n\n\t\t\t<?php if ( $supports_formats ) : ?>\n\t\t\t\t<div class=\"setting-modal is-off-screen is-hidden\">\n\t\t\t\t\t<button type=\"button\" class=\"modal-close\">\n\t\t\t\t\t\t<span class=\"dashicons post-option-back\"></span>\n\t\t\t\t\t\t<span class=\"setting-title\" aria-hidden=\"true\"><?php _ex( 'Format', 'post format' ); ?></span>\n\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Back to post options' ) ?></span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<?php $this->post_formats_html( $post ); ?>\n\t\t\t\t</div>\n\t\t\t<?php endif; ?>\n\n\t\t\t<?php if ( $show_categories ) : ?>\n\t\t\t\t<div class=\"setting-modal is-off-screen is-hidden\">\n\t\t\t\t\t<button type=\"button\" class=\"modal-close\">\n\t\t\t\t\t\t<span class=\"dashicons post-option-back\"></span>\n\t\t\t\t\t\t<span class=\"setting-title\" aria-hidden=\"true\"><?php _e( 'Categories' ); ?></span>\n\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Back to post options' ) ?></span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<?php $this->categories_html( $post ); ?>\n\t\t\t\t</div>\n\t\t\t<?php endif; ?>\n\n\t\t\t<?php if ( $show_tags ) : ?>\n\t\t\t\t<div class=\"setting-modal tags is-off-screen is-hidden\">\n\t\t\t\t\t<button type=\"button\" class=\"modal-close\">\n\t\t\t\t\t\t<span class=\"dashicons post-option-back\"></span>\n\t\t\t\t\t\t<span class=\"setting-title\" aria-hidden=\"true\"><?php _e( 'Tags' ); ?></span>\n\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Back to post options' ) ?></span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<?php $this->tags_html( $post ); ?>\n\t\t\t\t</div>\n\t\t\t<?php endif; ?>\n\t\t</div><!-- .options-panel -->\n\t</div><!-- .wrapper -->\n\n\t<div class=\"press-this-actions\">\n\t\t<div class=\"pressthis-media-buttons\">\n\t\t\t<button type=\"button\" class=\"insert-media\" data-editor=\"pressthis\">\n\t\t\t\t<span class=\"dashicons dashicons-admin-media\"></span>\n\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Add Media' ); ?></span>\n\t\t\t</button>\n\t\t</div>\n\t\t<div class=\"post-actions\">\n\t\t\t<span class=\"spinner\">&nbsp;</span>\n\t\t\t<div class=\"split-button\">\n\t\t\t\t<div class=\"split-button-head\">\n\t\t\t\t\t<button type=\"button\" class=\"publish-button split-button-primary\" aria-live=\"polite\">\n\t\t\t\t\t\t<span class=\"publish\"><?php echo ( current_user_can( 'publish_posts' ) ) ? __( 'Publish' ) : __( 'Submit for Review' ); ?></span>\n\t\t\t\t\t\t<span class=\"saving-draft\"><?php _e( 'Saving&hellip;' ); ?></span>\n\t\t\t\t\t</button><button type=\"button\" class=\"split-button-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t<i class=\"dashicons dashicons-arrow-down-alt2\"></i>\n\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e('More actions'); ?></span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"split-button-body\">\n\t\t\t\t\t<li><button type=\"button\" class=\"button-link draft-button split-button-option\"><?php _e( 'Save Draft' ); ?></button></li>\n\t\t\t\t\t<li><button type=\"button\" class=\"button-link standard-editor-button split-button-option\"><?php _e( 'Standard Editor' ); ?></button></li>\n\t\t\t\t\t<li><button type=\"button\" class=\"button-link preview-button split-button-option\"><?php _e( 'Preview' ); ?></button></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t</form>\n\n\t<?php\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_footer' );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts-press-this.php' );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts' );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_footer-press-this.php' );\n\t?>\n</body>\n</html>\n<?php\n\t\tdie();\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40183';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * Press This class and display functionality\n *\n * @package WordPress\n * @subpackage Press_This\n * @since 4.2.0\n */\n\n/**\n * Press This class.\n *\n * @since 4.2.0\n */\nclass WP_Press_This {\n\t// Used to trigger the bookmarklet update notice.\n\tconst VERSION = 8;\n\tpublic $version = 8;\n\n\tprivate $images = array();\n\n\tprivate $embeds = array();\n\n\tprivate $domain = '';\n\n\t/**\n\t * Constructor.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t */\n\tpublic function __construct() {}\n\n\t/**\n\t * App and site settings data, including i18n strings for the client-side.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @return array Site settings.\n\t */\n\tpublic function site_settings() {\n\t\treturn array(\n\t\t\t/**\n\t\t\t * Filters whether or not Press This should redirect the user in the parent window upon save.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param bool $redirect Whether to redirect in parent window or not. Default false.\n\t\t\t */\n\t\t\t'redirInParent' => apply_filters( 'press_this_redirect_in_parent', false ),\n\t\t);\n\t}\n\n\t/**\n\t * Get the source's images and save them locally, for posterity, unless we can't.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param int    $post_id Post ID.\n\t * @param string $content Optional. Current expected markup for Press This. Expects slashed. Default empty.\n\t * @return string New markup with old image URLs replaced with the local attachment ones if swapped.\n\t */\n\tpublic function side_load_images( $post_id, $content = '' ) {\n\t\t$content = wp_unslash( $content );\n\n\t\tif ( preg_match_all( '/<img [^>]+>/', $content, $matches ) && current_user_can( 'upload_files' ) ) {\n\t\t\tforeach ( (array) $matches[0] as $image ) {\n\t\t\t\t// This is inserted from our JS so HTML attributes should always be in double quotes.\n\t\t\t\tif ( ! preg_match( '/src=\"([^\"]+)\"/', $image, $url_matches ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$image_src = $url_matches[1];\n\n\t\t\t\t// Don't try to sideload a file without a file extension, leads to WP upload error.\n\t\t\t\tif ( ! preg_match( '/[^\\?]+\\.(?:jpe?g|jpe|gif|png)(?:\\?|$)/i', $image_src ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t// Sideload image, which gives us a new image src.\n\t\t\t\t$new_src = media_sideload_image( $image_src, $post_id, null, 'src' );\n\n\t\t\t\tif ( ! is_wp_error( $new_src ) ) {\n\t\t\t\t\t// Replace the POSTED content <img> with correct uploaded ones.\n\t\t\t\t\t// Need to do it in two steps so we don't replace links to the original image if any.\n\t\t\t\t\t$new_image = str_replace( $image_src, $new_src, $image );\n\t\t\t\t\t$content = str_replace( $image, $new_image, $content );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Expected slashed\n\t\treturn wp_slash( $content );\n\t}\n\n\t/**\n\t * Ajax handler for saving the post as draft or published.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t */\n\tpublic function save_post() {\n\t\tif ( empty( $_POST['post_ID'] ) || ! $post_id = (int) $_POST['post_ID'] ) {\n\t\t\twp_send_json_error( array( 'errorMessage' => __( 'Missing post ID.' ) ) );\n\t\t}\n\n\t\tif ( empty( $_POST['_wpnonce'] ) || ! wp_verify_nonce( $_POST['_wpnonce'], 'update-post_' . $post_id ) ||\n\t\t\t! current_user_can( 'edit_post', $post_id ) ) {\n\n\t\t\twp_send_json_error( array( 'errorMessage' => __( 'Invalid post.' ) ) );\n\t\t}\n\n\t\t$post_data = array(\n\t\t\t'ID'            => $post_id,\n\t\t\t'post_title'    => ( ! empty( $_POST['post_title'] ) ) ? sanitize_text_field( trim( $_POST['post_title'] ) ) : '',\n\t\t\t'post_content'  => ( ! empty( $_POST['post_content'] ) ) ? trim( $_POST['post_content'] ) : '',\n\t\t\t'post_type'     => 'post',\n\t\t\t'post_status'   => 'draft',\n\t\t\t'post_format'   => ( ! empty( $_POST['post_format'] ) ) ? sanitize_text_field( $_POST['post_format'] ) : '',\n\t\t);\n\n\t\t// Only accept categories if the user actually can assign\n\t\t$category_tax = get_taxonomy( 'category' );\n\t\tif ( current_user_can( $category_tax->cap->assign_terms ) ) {\n\t\t\t$post_data['post_category'] = ( ! empty( $_POST['post_category'] ) ) ? $_POST['post_category'] : array();\n\t\t}\n\n\t\t// Only accept taxonomies if the user can actually assign\n\t\tif ( ! empty( $_POST['tax_input'] ) ) {\n\t\t\t$tax_input = $_POST['tax_input'];\n\t\t\tforeach ( $tax_input as $tax => $_ti ) {\n\t\t\t\t$tax_object = get_taxonomy( $tax );\n\t\t\t\tif ( ! $tax_object || ! current_user_can( $tax_object->cap->assign_terms ) ) {\n\t\t\t\t\tunset( $tax_input[ $tax ] );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$post_data['tax_input'] = $tax_input;\n\t\t}\n\n\t\t// Toggle status to pending if user cannot actually publish\n\t\tif ( ! empty( $_POST['post_status'] ) && 'publish' === $_POST['post_status'] ) {\n\t\t\tif ( current_user_can( 'publish_posts' ) ) {\n\t\t\t\t$post_data['post_status'] = 'publish';\n\t\t\t} else {\n\t\t\t\t$post_data['post_status'] = 'pending';\n\t\t\t}\n\t\t}\n\n\t\t$post_data['post_content'] = $this->side_load_images( $post_id, $post_data['post_content'] );\n\n\t\t/**\n\t\t * Filters the post data of a Press This post before saving/updating.\n\t\t *\n\t\t * The {@see 'side_load_images'} action has already run at this point.\n\t\t *\n\t\t * @since 4.5.0\n\t\t *\n\t\t * @param array $post_data The post data.\n\t\t */\n\t\t$post_data = apply_filters( 'press_this_save_post', $post_data );\n\n\t\t$updated = wp_update_post( $post_data, true );\n\n\t\tif ( is_wp_error( $updated ) ) {\n\t\t\twp_send_json_error( array( 'errorMessage' => $updated->get_error_message() ) );\n\t\t} else {\n\t\t\tif ( isset( $post_data['post_format'] ) ) {\n\t\t\t\tif ( current_theme_supports( 'post-formats', $post_data['post_format'] ) ) {\n\t\t\t\t\tset_post_format( $post_id, $post_data['post_format'] );\n\t\t\t\t} elseif ( $post_data['post_format'] ) {\n\t\t\t\t\tset_post_format( $post_id, false );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$forceRedirect = false;\n\n\t\t\tif ( 'publish' === get_post_status( $post_id ) ) {\n\t\t\t\t$redirect = get_post_permalink( $post_id );\n\t\t\t} elseif ( isset( $_POST['pt-force-redirect'] ) && $_POST['pt-force-redirect'] === 'true' ) {\n\t\t\t\t$forceRedirect = true;\n\t\t\t\t$redirect = get_edit_post_link( $post_id, 'js' );\n\t\t\t} else {\n\t\t\t\t$redirect = false;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters the URL to redirect to when Press This saves.\n\t\t\t *\n\t\t\t * @since 4.2.0\n\t\t\t *\n\t\t\t * @param string $url     Redirect URL. If `$status` is 'publish', this will be the post permalink.\n\t\t\t *                        Otherwise, the default is false resulting in no redirect.\n\t\t\t * @param int    $post_id Post ID.\n\t\t\t * @param string $status  Post status.\n\t\t\t */\n\t\t\t$redirect = apply_filters( 'press_this_save_redirect', $redirect, $post_id, $post_data['post_status'] );\n\n\t\t\tif ( $redirect ) {\n\t\t\t\twp_send_json_success( array( 'redirect' => $redirect, 'force' => $forceRedirect ) );\n\t\t\t} else {\n\t\t\t\twp_send_json_success( array( 'postSaved' => true ) );\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Ajax handler for adding a new category.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t */\n\tpublic function add_category() {\n\t\tif ( false === wp_verify_nonce( $_POST['new_cat_nonce'], 'add-category' ) ) {\n\t\t\twp_send_json_error();\n\t\t}\n\n\t\t$taxonomy = get_taxonomy( 'category' );\n\n\t\tif ( ! current_user_can( $taxonomy->cap->edit_terms ) || empty( $_POST['name'] ) ) {\n\t\t\twp_send_json_error();\n\t\t}\n\n\t\t$parent = isset( $_POST['parent'] ) && (int) $_POST['parent'] > 0 ? (int) $_POST['parent'] : 0;\n\t\t$names = explode( ',', $_POST['name'] );\n\t\t$added = $data = array();\n\n\t\tforeach ( $names as $cat_name ) {\n\t\t\t$cat_name = trim( $cat_name );\n\t\t\t$cat_nicename = sanitize_title( $cat_name );\n\n\t\t\tif ( empty( $cat_nicename ) ) {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\t// @todo Find a more performant way to check existence, maybe get_term() with a separate parent check.\n\t\t\tif ( term_exists( $cat_name, $taxonomy->name, $parent ) ) {\n\t\t\t\tif ( count( $names ) === 1 ) {\n\t\t\t\t\twp_send_json_error( array( 'errorMessage' => __( 'This category already exists.' ) ) );\n\t\t\t\t} else {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$cat_id = wp_insert_term( $cat_name, $taxonomy->name, array( 'parent' => $parent ) );\n\n\t\t\tif ( is_wp_error( $cat_id ) ) {\n\t\t\t\tcontinue;\n\t\t\t} elseif ( is_array( $cat_id ) ) {\n\t\t\t\t$cat_id = $cat_id['term_id'];\n\t\t\t}\n\n\t\t\t$added[] = $cat_id;\n\t\t}\n\n\t\tif ( empty( $added ) ) {\n\t\t\twp_send_json_error( array( 'errorMessage' => __( 'This category cannot be added. Please change the name and try again.' ) ) );\n\t\t}\n\n\t\tforeach ( $added as $new_cat_id ) {\n\t\t\t$new_cat = get_category( $new_cat_id );\n\n\t\t\tif ( is_wp_error( $new_cat ) ) {\n\t\t\t\twp_send_json_error( array( 'errorMessage' => __( 'Error while adding the category. Please try again later.' ) ) );\n\t\t\t}\n\n\t\t\t$data[] = array(\n\t\t\t\t'term_id' => $new_cat->term_id,\n\t\t\t\t'name' => $new_cat->name,\n\t\t\t\t'parent' => $new_cat->parent,\n\t\t\t);\n\t\t}\n\t\twp_send_json_success( $data );\n\t}\n\n\t/**\n\t * Downloads the source's HTML via server-side call for the given URL.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param string $url URL to scan.\n\t * @return string Source's HTML sanitized markup\n\t */\n\tpublic function fetch_source_html( $url ) {\n\t\tif ( empty( $url ) ) {\n\t\t\treturn new WP_Error( 'invalid-url', __( 'A valid URL was not provided.' ) );\n\t\t}\n\n\t\t$remote_url = wp_safe_remote_get( $url, array(\n\t\t\t'timeout' => 30,\n\t\t\t// Use an explicit user-agent for Press This\n\t\t\t'user-agent' => 'Press This (WordPress/' . get_bloginfo( 'version' ) . '); ' . get_bloginfo( 'url' )\n\t\t) );\n\n\t\tif ( is_wp_error( $remote_url ) ) {\n\t\t\treturn $remote_url;\n\t\t}\n\n\t\t$allowed_elements = array(\n\t\t\t'img' => array(\n\t\t\t\t'src'      => true,\n\t\t\t\t'width'    => true,\n\t\t\t\t'height'   => true,\n\t\t\t),\n\t\t\t'iframe' => array(\n\t\t\t\t'src'      => true,\n\t\t\t),\n\t\t\t'link' => array(\n\t\t\t\t'rel'      => true,\n\t\t\t\t'itemprop' => true,\n\t\t\t\t'href'     => true,\n\t\t\t),\n\t\t\t'meta' => array(\n\t\t\t\t'property' => true,\n\t\t\t\t'name'     => true,\n\t\t\t\t'content'  => true,\n\t\t\t)\n\t\t);\n\n\t\t$source_content = wp_remote_retrieve_body( $remote_url );\n\t\t$source_content = wp_kses( $source_content, $allowed_elements );\n\n\t\treturn $source_content;\n\t}\n\n\t/**\n\t * Utility method to limit an array to 50 values.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param array $value Array to limit.\n\t * @return array Original array if fewer than 50 values, limited array, empty array otherwise.\n\t */\n\tprivate function _limit_array( $value ) {\n\t\tif ( is_array( $value ) ) {\n\t\t\tif ( count( $value ) > 50 ) {\n\t\t\t\treturn array_slice( $value, 0, 50 );\n\t\t\t}\n\n\t\t\treturn $value;\n\t\t}\n\n\t\treturn array();\n\t}\n\n\t/**\n\t * Utility method to limit the length of a given string to 5,000 characters.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $value String to limit.\n\t * @return bool|int|string If boolean or integer, that value. If a string, the original value\n\t *                         if fewer than 5,000 characters, a truncated version, otherwise an\n\t *                         empty string.\n\t */\n\tprivate function _limit_string( $value ) {\n\t\t$return = '';\n\n\t\tif ( is_numeric( $value ) || is_bool( $value ) ) {\n\t\t\t$return = $value;\n\t\t} else if ( is_string( $value ) ) {\n\t\t\tif ( mb_strlen( $value ) > 5000 ) {\n\t\t\t\t$return = mb_substr( $value, 0, 5000 );\n\t\t\t} else {\n\t\t\t\t$return = $value;\n\t\t\t}\n\n\t\t\t$return = html_entity_decode( $return, ENT_QUOTES, 'UTF-8' );\n\t\t\t$return = sanitize_text_field( trim( $return ) );\n\t\t}\n\n\t\treturn $return;\n\t}\n\n\t/**\n\t * Utility method to limit a given URL to 2,048 characters.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $url URL to check for length and validity.\n\t * @return string Escaped URL if of valid length (< 2048) and makeup. Empty string otherwise.\n\t */\n\tprivate function _limit_url( $url ) {\n\t\tif ( ! is_string( $url ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// HTTP 1.1 allows 8000 chars but the \"de-facto\" standard supported in all current browsers is 2048.\n\t\tif ( strlen( $url ) > 2048 ) {\n\t\t\treturn ''; // Return empty rather than a truncated/invalid URL\n\t\t}\n\n\t\t// Does not look like a URL.\n\t\tif ( ! preg_match( '/^([!#$&-;=?-\\[\\]_a-z~]|%[0-9a-fA-F]{2})+$/', $url ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\t// If the URL is root-relative, prepend the protocol and domain name\n\t\tif ( $url && $this->domain && preg_match( '%^/[^/]+%', $url ) ) {\n\t\t\t$url = $this->domain . $url;\n\t\t}\n\n\t\t// Not absolute or protocol-relative URL.\n\t\tif ( ! preg_match( '%^(?:https?:)?//[^/]+%', $url ) ) {\n\t\t\treturn '';\n\t\t}\n\n\t\treturn esc_url_raw( $url, array( 'http', 'https' ) );\n\t}\n\n\t/**\n\t * Utility method to limit image source URLs.\n\t *\n\t * Excluded URLs include share-this type buttons, loaders, spinners, spacers, WordPress interface images,\n\t * tiny buttons or thumbs, mathtag.com or quantserve.com images, or the WordPress.com stats gif.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $src Image source URL.\n\t * @return string If not matched an excluded URL type, the original URL, empty string otherwise.\n\t */\n\tprivate function _limit_img( $src ) {\n\t\t$src = $this->_limit_url( $src );\n\n\t\tif ( preg_match( '!/ad[sx]?/!i', $src ) ) {\n\t\t\t// Ads\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!(/share-?this[^.]+?\\.[a-z0-9]{3,4})(\\?.*)?$!i', $src ) ) {\n\t\t\t// Share-this type button\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!/(spinner|loading|spacer|blank|rss)\\.(gif|jpg|png)!i', $src ) ) {\n\t\t\t// Loaders, spinners, spacers\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!/([^./]+[-_])?(spinner|loading|spacer|blank)s?([-_][^./]+)?\\.[a-z0-9]{3,4}!i', $src ) ) {\n\t\t\t// Fancy loaders, spinners, spacers\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!([^./]+[-_])?thumb[^.]*\\.(gif|jpg|png)$!i', $src ) ) {\n\t\t\t// Thumbnails, too small, usually irrelevant to context\n\t\t\treturn '';\n\t\t} else if ( false !== stripos( $src, '/wp-includes/' ) ) {\n\t\t\t// Classic WordPress interface images\n\t\t\treturn '';\n\t\t} else if ( preg_match( '![^\\d]\\d{1,2}x\\d+\\.(gif|jpg|png)$!i', $src ) ) {\n\t\t\t// Most often tiny buttons/thumbs (< 100px wide)\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!/pixel\\.(mathtag|quantserve)\\.com!i', $src ) ) {\n\t\t\t// See mathtag.com and https://www.quantcast.com/how-we-do-it/iab-standard-measurement/how-we-collect-data/\n\t\t\treturn '';\n\t\t} else if ( preg_match( '!/[gb]\\.gif(\\?.+)?$!i', $src ) ) {\n\t\t\t// WordPress.com stats gif\n\t\t\treturn '';\n\t\t}\n\n\t\treturn $src;\n\t}\n\n\t/**\n\t * Limit embed source URLs to specific providers.\n\t *\n\t * Not all core oEmbed providers are supported. Supported providers include YouTube, Vimeo,\n\t * Vine, Daily Motion, SoundCloud, and Twitter.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $src Embed source URL.\n\t * @return string If not from a supported provider, an empty string. Otherwise, a reformatted embed URL.\n\t */\n\tprivate function _limit_embed( $src ) {\n\t\t$src = $this->_limit_url( $src );\n\n\t\tif ( empty( $src ) )\n\t\t\treturn '';\n\n\t\tif ( preg_match( '!//(m|www)\\.youtube\\.com/(embed|v)/([^?]+)\\?.+$!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Youtube videos (www or mobile)\n\t\t\t$src = 'https://www.youtube.com/watch?v=' . $src_matches[3];\n\t\t} else if ( preg_match( '!//player\\.vimeo\\.com/video/([\\d]+)([?/].*)?$!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Vimeo iframe videos\n\t\t\t$src = 'https://vimeo.com/' . (int) $src_matches[1];\n\t\t} else if ( preg_match( '!//vimeo\\.com/moogaloop\\.swf\\?clip_id=([\\d]+)$!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Vimeo Flash videos\n\t\t\t$src = 'https://vimeo.com/' . (int) $src_matches[1];\n\t\t} else if ( preg_match( '!//vine\\.co/v/([^/]+)/embed!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Vine videos\n\t\t\t$src = 'https://vine.co/v/' . $src_matches[1];\n\t\t} else if ( preg_match( '!//(www\\.)?dailymotion\\.com/embed/video/([^/?]+)([/?].+)?!i', $src, $src_matches ) ) {\n\t\t\t// Embedded Daily Motion videos\n\t\t\t$src = 'https://www.dailymotion.com/video/' . $src_matches[2];\n\t\t} else {\n\t\t\t$oembed = _wp_oembed_get_object();\n\n\t\t\tif ( ! $oembed->get_provider( $src, array( 'discover' => false ) ) ) {\n\t\t\t\t$src = '';\n\t\t\t}\n\t\t}\n\n\t\treturn $src;\n\t}\n\n\t/**\n\t * Process a meta data entry from the source.\n\t *\n\t * @ignore\n\t * @since 4.2.0\n\t *\n\t * @param string $meta_name  Meta key name.\n\t * @param mixed  $meta_value Meta value.\n\t * @param array  $data       Associative array of source data.\n\t * @return array Processed data array.\n\t */\n\tprivate function _process_meta_entry( $meta_name, $meta_value, $data ) {\n\t\tif ( preg_match( '/:?(title|description|keywords|site_name)$/', $meta_name ) ) {\n\t\t\t$data['_meta'][ $meta_name ] = $meta_value;\n\t\t} else {\n\t\t\tswitch ( $meta_name ) {\n\t\t\t\tcase 'og:url':\n\t\t\t\tcase 'og:video':\n\t\t\t\tcase 'og:video:secure_url':\n\t\t\t\t\t$meta_value = $this->_limit_embed( $meta_value );\n\n\t\t\t\t\tif ( ! isset( $data['_embeds'] ) ) {\n\t\t\t\t\t\t$data['_embeds'] = array();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $meta_value ) && ! in_array( $meta_value, $data['_embeds'] ) ) {\n\t\t\t\t\t\t$data['_embeds'][] = $meta_value;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t\tcase 'og:image':\n\t\t\t\tcase 'og:image:secure_url':\n\t\t\t\tcase 'twitter:image0:src':\n\t\t\t\tcase 'twitter:image0':\n\t\t\t\tcase 'twitter:image:src':\n\t\t\t\tcase 'twitter:image':\n\t\t\t\t\t$meta_value = $this->_limit_img( $meta_value );\n\n\t\t\t\t\tif ( ! isset( $data['_images'] ) ) {\n\t\t\t\t\t\t$data['_images'] = array();\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( ! empty( $meta_value ) && ! in_array( $meta_value, $data['_images'] ) ) {\n\t\t\t\t\t\t$data['_images'][] = $meta_value;\n\t\t\t\t\t}\n\n\t\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Fetches and parses _meta, _images, and _links data from the source.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param string $url  URL to scan.\n\t * @param array  $data Optional. Existing data array if you have one. Default empty array.\n\t * @return array New data array.\n\t */\n\tpublic function source_data_fetch_fallback( $url, $data = array() ) {\n\t\tif ( empty( $url ) ) {\n\t\t\treturn array();\n\t\t}\n\n\t\t// Download source page to tmp file.\n\t\t$source_content = $this->fetch_source_html( $url );\n\t\tif ( is_wp_error( $source_content ) ) {\n\t\t\treturn array( 'errors' => $source_content->get_error_messages() );\n\t\t}\n\n\t\t// Fetch and gather <meta> data first, so discovered media is offered 1st to user.\n\t\tif ( empty( $data['_meta'] ) ) {\n\t\t\t$data['_meta'] = array();\n\t\t}\n\n\t\tif ( preg_match_all( '/<meta [^>]+>/', $source_content, $matches ) ) {\n\t\t\t$items = $this->_limit_array( $matches[0] );\n\n\t\t\tforeach ( $items as $value ) {\n\t\t\t\tif ( preg_match( '/(property|name)=\"([^\"]+)\"[^>]+content=\"([^\"]+)\"/', $value, $new_matches ) ) {\n\t\t\t\t\t$meta_name  = $this->_limit_string( $new_matches[2] );\n\t\t\t\t\t$meta_value = $this->_limit_string( $new_matches[3] );\n\n\t\t\t\t\t// Sanity check. $key is usually things like 'title', 'description', 'keywords', etc.\n\t\t\t\t\tif ( strlen( $meta_name ) > 100 ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data = $this->_process_meta_entry( $meta_name, $meta_value, $data );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fetch and gather <img> data.\n\t\tif ( empty( $data['_images'] ) ) {\n\t\t\t$data['_images'] = array();\n\t\t}\n\n\t\tif ( preg_match_all( '/<img [^>]+>/', $source_content, $matches ) ) {\n\t\t\t$items = $this->_limit_array( $matches[0] );\n\n\t\t\tforeach ( $items as $value ) {\n\t\t\t\tif ( ( preg_match( '/width=(\\'|\")(\\d+)\\\\1/i', $value, $new_matches ) && $new_matches[2] < 256 ) ||\n\t\t\t\t\t( preg_match( '/height=(\\'|\")(\\d+)\\\\1/i', $value, $new_matches ) && $new_matches[2] < 128 ) ) {\n\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\tif ( preg_match( '/src=(\\'|\")([^\\'\"]+)\\\\1/i', $value, $new_matches ) ) {\n\t\t\t\t\t$src = $this->_limit_img( $new_matches[2] );\n\t\t\t\t\tif ( ! empty( $src ) && ! in_array( $src, $data['_images'] ) ) {\n\t\t\t\t\t\t$data['_images'][] = $src;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fetch and gather <iframe> data.\n\t\tif ( empty( $data['_embeds'] ) ) {\n\t\t\t$data['_embeds'] = array();\n\t\t}\n\n\t\tif ( preg_match_all( '/<iframe [^>]+>/', $source_content, $matches ) ) {\n\t\t\t$items = $this->_limit_array( $matches[0] );\n\n\t\t\tforeach ( $items as $value ) {\n\t\t\t\tif ( preg_match( '/src=(\\'|\")([^\\'\"]+)\\\\1/', $value, $new_matches ) ) {\n\t\t\t\t\t$src = $this->_limit_embed( $new_matches[2] );\n\n\t\t\t\t\tif ( ! empty( $src ) && ! in_array( $src, $data['_embeds'] ) ) {\n\t\t\t\t\t\t$data['_embeds'][] = $src;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t// Fetch and gather <link> data.\n\t\tif ( empty( $data['_links'] ) ) {\n\t\t\t$data['_links'] = array();\n\t\t}\n\n\t\tif ( preg_match_all( '/<link [^>]+>/', $source_content, $matches ) ) {\n\t\t\t$items = $this->_limit_array( $matches[0] );\n\n\t\t\tforeach ( $items as $value ) {\n\t\t\t\tif ( preg_match( '/rel=[\"\\'](canonical|shortlink|icon)[\"\\']/i', $value, $matches_rel ) && preg_match( '/href=[\\'\"]([^\\'\" ]+)[\\'\"]/i', $value, $matches_url ) ) {\n\t\t\t\t\t$rel = $matches_rel[1];\n\t\t\t\t\t$url = $this->_limit_url( $matches_url[1] );\n\n\t\t\t\t\tif ( ! empty( $url ) && empty( $data['_links'][ $rel ] ) ) {\n\t\t\t\t\t\t$data['_links'][ $rel ] = $url;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn $data;\n\t}\n\n\t/**\n\t * Handles backward-compat with the legacy version of Press This by supporting its query string params.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @return array\n\t */\n\tpublic function merge_or_fetch_data() {\n\t\t// Get data from $_POST and $_GET, as appropriate ($_POST > $_GET), to remain backward compatible.\n\t\t$data = array();\n\n\t\t// Only instantiate the keys we want. Sanity check and sanitize each one.\n\t\tforeach ( array( 'u', 's', 't', 'v' ) as $key ) {\n\t\t\tif ( ! empty( $_POST[ $key ] ) ) {\n\t\t\t\t$value = wp_unslash( $_POST[ $key ] );\n\t\t\t} else if ( ! empty( $_GET[ $key ] ) ) {\n\t\t\t\t$value = wp_unslash( $_GET[ $key ] );\n\t\t\t} else {\n\t\t\t\tcontinue;\n\t\t\t}\n\n\t\t\tif ( 'u' === $key ) {\n\t\t\t\t$value = $this->_limit_url( $value );\n\n\t\t\t\tif ( preg_match( '%^(?:https?:)?//[^/]+%i', $value, $domain_match ) ) {\n\t\t\t\t\t$this->domain = $domain_match[0];\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t$value = $this->_limit_string( $value );\n\t\t\t}\n\n\t\t\tif ( ! empty( $value ) ) {\n\t\t\t\t$data[ $key ] = $value;\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters whether to enable in-source media discovery in Press This.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param bool $enable Whether to enable media discovery.\n\t\t */\n\t\tif ( apply_filters( 'enable_press_this_media_discovery', true ) ) {\n\t\t\t/*\n\t\t\t * If no title, _images, _embed, and _meta was passed via $_POST, fetch data from source as fallback,\n\t\t\t * making PT fully backward compatible with the older bookmarklet.\n\t\t\t */\n\t\t\tif ( empty( $_POST ) && ! empty( $data['u'] ) ) {\n\t\t\t\tif ( isset( $_GET['_wpnonce'] ) && wp_verify_nonce( $_GET['_wpnonce'], 'scan-site' ) ) {\n\t\t\t\t\t$data = $this->source_data_fetch_fallback( $data['u'], $data );\n\t\t\t\t} else {\n\t\t\t\t\t$data['errors'] = 'missing nonce';\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tforeach ( array( '_images', '_embeds' ) as $type ) {\n\t\t\t\t\tif ( empty( $_POST[ $type ] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data[ $type ] = array();\n\t\t\t\t\t$items = $this->_limit_array( $_POST[ $type ] );\n\n\t\t\t\t\tforeach ( $items as $key => $value ) {\n\t\t\t\t\t\tif ( $type === '_images' ) {\n\t\t\t\t\t\t\t$value = $this->_limit_img( wp_unslash( $value ) );\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\t$value = $this->_limit_embed( wp_unslash( $value ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( ! empty( $value ) ) {\n\t\t\t\t\t\t\t$data[ $type ][] = $value;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tforeach ( array( '_meta', '_links' ) as $type ) {\n\t\t\t\t\tif ( empty( $_POST[ $type ] ) ) {\n\t\t\t\t\t\tcontinue;\n\t\t\t\t\t}\n\n\t\t\t\t\t$data[ $type ] = array();\n\t\t\t\t\t$items = $this->_limit_array( $_POST[ $type ] );\n\n\t\t\t\t\tforeach ( $items as $key => $value ) {\n\t\t\t\t\t\t// Sanity check. These are associative arrays, $key is usually things like 'title', 'description', 'keywords', etc.\n\t\t\t\t\t\tif ( empty( $key ) || strlen( $key ) > 100 ) {\n\t\t\t\t\t\t\tcontinue;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( $type === '_meta' ) {\n\t\t\t\t\t\t\t$value = $this->_limit_string( wp_unslash( $value ) );\n\n\t\t\t\t\t\t\tif ( ! empty( $value ) ) {\n\t\t\t\t\t\t\t\t$data = $this->_process_meta_entry( $key, $value, $data );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tif ( in_array( $key, array( 'canonical', 'shortlink', 'icon' ), true ) ) {\n\t\t\t\t\t\t\t\t$data[ $type ][ $key ] = $this->_limit_url( wp_unslash( $value ) );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t// Support passing a single image src as `i`\n\t\t\tif ( ! empty( $_REQUEST['i'] ) && ( $img_src = $this->_limit_img( wp_unslash( $_REQUEST['i'] ) ) ) ) {\n\t\t\t\tif ( empty( $data['_images'] ) ) {\n\t\t\t\t\t$data['_images'] = array( $img_src );\n\t\t\t\t} elseif ( ! in_array( $img_src, $data['_images'], true ) ) {\n\t\t\t\t\tarray_unshift( $data['_images'], $img_src );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\t/**\n\t\t * Filters the Press This data array.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param array $data Press This Data array.\n\t\t */\n\t\treturn apply_filters( 'press_this_data', $data );\n\t}\n\n\t/**\n\t * Adds another stylesheet inside TinyMCE.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param string $styles URL to editor stylesheet.\n\t * @return string Possibly modified stylesheets list.\n\t */\n\tpublic function add_editor_style( $styles ) {\n\t\tif ( ! empty( $styles ) ) {\n\t\t\t$styles .= ',';\n\t\t}\n\n\t\t$press_this = admin_url( 'css/press-this-editor.css' );\n\t\tif ( is_rtl() ) {\n\t\t\t$press_this = str_replace( '.css', '-rtl.css', $press_this );\n\t\t}\n\n\t\treturn $styles . $press_this;\n\t}\n\n\t/**\n\t * Outputs the post format selection HTML.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param WP_Post $post Post object.\n\t */\n\tpublic function post_formats_html( $post ) {\n\t\tif ( current_theme_supports( 'post-formats' ) && post_type_supports( $post->post_type, 'post-formats' ) ) {\n\t\t\t$post_formats = get_theme_support( 'post-formats' );\n\n\t\t\tif ( is_array( $post_formats[0] ) ) {\n\t\t\t\t$post_format = get_post_format( $post->ID );\n\n\t\t\t\tif ( ! $post_format ) {\n\t\t\t\t\t$post_format = '0';\n\t\t\t\t}\n\n\t\t\t\t// Add in the current one if it isn't there yet, in case the current theme doesn't support it.\n\t\t\t\tif ( $post_format && ! in_array( $post_format, $post_formats[0] ) ) {\n\t\t\t\t\t$post_formats[0][] = $post_format;\n\t\t\t\t}\n\n\t\t\t\t?>\n\t\t\t\t<div id=\"post-formats-select\">\n\t\t\t\t<fieldset><legend class=\"screen-reader-text\"><?php _e( 'Post Formats' ); ?></legend>\n\t\t\t\t\t<input type=\"radio\" name=\"post_format\" class=\"post-format\" id=\"post-format-0\" value=\"0\" <?php checked( $post_format, '0' ); ?> />\n\t\t\t\t\t<label for=\"post-format-0\" class=\"post-format-icon post-format-standard\"><?php echo get_post_format_string( 'standard' ); ?></label>\n\t\t\t\t\t<?php\n\n\t\t\t\t\tforeach ( $post_formats[0] as $format ) {\n\t\t\t\t\t\t$attr_format = esc_attr( $format );\n\t\t\t\t\t\t?>\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\t<input type=\"radio\" name=\"post_format\" class=\"post-format\" id=\"post-format-<?php echo $attr_format; ?>\" value=\"<?php echo $attr_format; ?>\" <?php checked( $post_format, $format ); ?> />\n\t\t\t\t\t\t<label for=\"post-format-<?php echo $attr_format ?>\" class=\"post-format-icon post-format-<?php echo $attr_format; ?>\"><?php echo esc_html( get_post_format_string( $format ) ); ?></label>\n\t\t\t\t\t\t<?php\n\t\t\t\t\t }\n\n\t\t\t\t\t ?>\n\t\t\t\t</fieldset>\n\t\t\t\t</div>\n\t\t\t\t<?php\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Outputs the categories HTML.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param WP_Post $post Post object.\n\t */\n\tpublic function categories_html( $post ) {\n\t\t$taxonomy = get_taxonomy( 'category' );\n\n\t\t// Bail if user cannot assign terms\n\t\tif ( ! current_user_can( $taxonomy->cap->assign_terms ) ) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Only show \"add\" if user can edit terms\n\t\tif ( current_user_can( $taxonomy->cap->edit_terms ) ) {\n\t\t\t?>\n\t\t\t<button type=\"button\" class=\"add-cat-toggle button-link\" aria-expanded=\"false\">\n\t\t\t\t<span class=\"dashicons dashicons-plus\"></span><span class=\"screen-reader-text\"><?php _e( 'Toggle add category' ); ?></span>\n\t\t\t</button>\n\t\t\t<div class=\"add-category is-hidden\">\n\t\t\t\t<label class=\"screen-reader-text\" for=\"new-category\"><?php echo $taxonomy->labels->add_new_item; ?></label>\n\t\t\t\t<input type=\"text\" id=\"new-category\" class=\"add-category-name\" placeholder=\"<?php echo esc_attr( $taxonomy->labels->new_item_name ); ?>\" value=\"\" aria-required=\"true\">\n\t\t\t\t<label class=\"screen-reader-text\" for=\"new-category-parent\"><?php echo $taxonomy->labels->parent_item_colon; ?></label>\n\t\t\t\t<div class=\"postform-wrapper\">\n\t\t\t\t\t<?php\n\t\t\t\t\twp_dropdown_categories( array(\n\t\t\t\t\t\t'taxonomy'         => 'category',\n\t\t\t\t\t\t'hide_empty'       => 0,\n\t\t\t\t\t\t'name'             => 'new-category-parent',\n\t\t\t\t\t\t'orderby'          => 'name',\n\t\t\t\t\t\t'hierarchical'     => 1,\n\t\t\t\t\t\t'show_option_none' => '&mdash; ' . $taxonomy->labels->parent_item . ' &mdash;'\n\t\t\t\t\t) );\n\t\t\t\t\t?>\n\t\t\t\t</div>\n\t\t\t\t<button type=\"button\" class=\"add-cat-submit\"><?php _e( 'Add' ); ?></button>\n\t\t\t</div>\n\t\t\t<?php\n\n\t\t}\n\t\t?>\n\t\t<div class=\"categories-search-wrapper\">\n\t\t\t<input id=\"categories-search\" type=\"search\" class=\"categories-search\" placeholder=\"<?php esc_attr_e( 'Search categories by name' ) ?>\">\n\t\t\t<label for=\"categories-search\">\n\t\t\t\t<span class=\"dashicons dashicons-search\"></span><span class=\"screen-reader-text\"><?php _e( 'Search categories' ); ?></span>\n\t\t\t</label>\n\t\t</div>\n\t\t<div aria-label=\"<?php esc_attr_e( 'Categories' ); ?>\">\n\t\t\t<ul class=\"categories-select\">\n\t\t\t\t<?php wp_terms_checklist( $post->ID, array( 'taxonomy' => 'category', 'list_only' => true ) ); ?>\n\t\t\t</ul>\n\t\t</div>\n\t\t<?php\n\t}\n\n\t/**\n\t * Outputs the tags HTML.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param WP_Post $post Post object.\n\t */\n\tpublic function tags_html( $post ) {\n\t\t$taxonomy              = get_taxonomy( 'post_tag' );\n\t\t$user_can_assign_terms = current_user_can( $taxonomy->cap->assign_terms );\n\t\t$esc_tags              = get_terms_to_edit( $post->ID, 'post_tag' );\n\n\t\tif ( ! $esc_tags || is_wp_error( $esc_tags ) ) {\n\t\t\t$esc_tags = '';\n\t\t}\n\n\t\t?>\n\t\t<div class=\"tagsdiv\" id=\"post_tag\">\n\t\t\t<div class=\"jaxtag\">\n\t\t\t<input type=\"hidden\" name=\"tax_input[post_tag]\" class=\"the-tags\" value=\"<?php echo $esc_tags; // escaped in get_terms_to_edit() ?>\">\n\t\t \t<?php\n\n\t\t\tif ( $user_can_assign_terms ) {\n\t\t\t\t?>\n\t\t\t\t<div class=\"ajaxtag hide-if-no-js\">\n\t\t\t\t\t<label class=\"screen-reader-text\" for=\"new-tag-post_tag\"><?php _e( 'Tags' ); ?></label>\n\t\t\t\t\t<p>\n\t\t\t\t\t\t<input type=\"text\" id=\"new-tag-post_tag\" name=\"newtag[post_tag]\" class=\"newtag form-input-tip\" size=\"16\" autocomplete=\"off\" value=\"\" aria-describedby=\"new-tag-desc\" />\n\t\t\t\t\t\t<button type=\"button\" class=\"tagadd\"><?php _e( 'Add' ); ?></button>\n\t\t\t\t\t</p>\n\t\t\t\t</div>\n\t\t\t\t<p class=\"howto\" id=\"new-tag-desc\">\n\t\t\t\t\t<?php echo $taxonomy->labels->separate_items_with_commas; ?>\n\t\t\t\t</p>\n\t\t\t\t<?php\n\t\t\t}\n\n\t\t\t?>\n\t\t\t</div>\n\t\t\t<div class=\"tagchecklist\"></div>\n\t\t</div>\n\t\t<?php\n\n\t\tif ( $user_can_assign_terms ) {\n\t\t\t?>\n\t\t\t<button type=\"button\" class=\"button-link tagcloud-link\" id=\"link-post_tag\" aria-expanded=\"false\"><?php echo $taxonomy->labels->choose_from_most_used; ?></button>\n\t\t\t<?php\n\t\t}\n\t}\n\n\t/**\n\t * Get a list of embeds with no duplicates.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return array Embeds selected to be available.\n\t */\n\tpublic function get_embeds( $data ) {\n\t\t$selected_embeds = array();\n\n\t\t// Make sure to add the Pressed page if it's a valid oembed itself\n\t\tif ( ! empty ( $data['u'] ) && $this->_limit_embed( $data['u'] ) ) {\n\t\t\t$data['_embeds'][] = $data['u'];\n\t\t}\n\n\t\tif ( ! empty( $data['_embeds'] ) ) {\n\t\t\tforeach ( $data['_embeds'] as $src ) {\n\t\t\t\t$prot_relative_src = preg_replace( '/^https?:/', '', $src );\n\n\t\t\t\tif ( in_array( $prot_relative_src, $this->embeds ) ) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$selected_embeds[] = $src;\n\t\t\t\t$this->embeds[] = $prot_relative_src;\n\t\t\t}\n\t\t}\n\n\t\treturn $selected_embeds;\n\t}\n\n\t/**\n\t * Get a list of images with no duplicates.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return array\n\t */\n\tpublic function get_images( $data ) {\n\t\t$selected_images = array();\n\n\t\tif ( ! empty( $data['_images'] ) ) {\n\t\t\tforeach ( $data['_images'] as $src ) {\n\t\t\t\tif ( false !== strpos( $src, 'gravatar.com' ) ) {\n\t\t\t\t\t$src = preg_replace( '%http://[\\d]+\\.gravatar\\.com/%', 'https://secure.gravatar.com/', $src );\n\t\t\t\t}\n\n\t\t\t\t$prot_relative_src = preg_replace( '/^https?:/', '', $src );\n\n\t\t\t\tif ( in_array( $prot_relative_src, $this->images ) ||\n\t\t\t\t\t( false !== strpos( $src, 'avatar' ) && count( $this->images ) > 15 ) ) {\n\t\t\t\t\t// Skip: already selected or some type of avatar and we've already gathered more than 15 images.\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\n\t\t\t\t$selected_images[] = $src;\n\t\t\t\t$this->images[] = $prot_relative_src;\n\t\t\t}\n\t\t}\n\n\t\treturn $selected_images;\n\t}\n\n\t/**\n\t * Gets the source page's canonical link, based on passed location and meta data.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n \t * @param array $data The site's data.\n\t * @return string Discovered canonical URL, or empty\n\t */\n\tpublic function get_canonical_link( $data ) {\n\t\t$link = '';\n\n\t\tif ( ! empty( $data['_links']['canonical'] ) ) {\n\t\t\t$link = $data['_links']['canonical'];\n\t\t} elseif ( ! empty( $data['u'] ) ) {\n\t\t\t$link = $data['u'];\n\t\t} elseif ( ! empty( $data['_meta'] ) ) {\n\t\t\tif ( ! empty( $data['_meta']['twitter:url'] ) ) {\n\t\t\t\t$link = $data['_meta']['twitter:url'];\n\t\t\t} else if ( ! empty( $data['_meta']['og:url'] ) ) {\n\t\t\t\t$link = $data['_meta']['og:url'];\n\t\t\t}\n\t\t}\n\n\t\tif ( empty( $link ) && ! empty( $data['_links']['shortlink'] ) ) {\n\t\t\t$link = $data['_links']['shortlink'];\n\t\t}\n\n\t\treturn $link;\n\t}\n\n\t/**\n\t * Gets the source page's site name, based on passed meta data.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return string Discovered site name, or empty\n\t */\n\tpublic function get_source_site_name( $data ) {\n\t\t$name = '';\n\n\t\tif ( ! empty( $data['_meta'] ) ) {\n\t\t\tif ( ! empty( $data['_meta']['og:site_name'] ) ) {\n\t\t\t\t$name = $data['_meta']['og:site_name'];\n\t\t\t} else if ( ! empty( $data['_meta']['application-name'] ) ) {\n\t\t\t\t$name = $data['_meta']['application-name'];\n\t\t\t}\n\t\t}\n\n\t\treturn $name;\n\t}\n\n\t/**\n\t * Gets the source page's title, based on passed title and meta data.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return string Discovered page title, or empty\n\t */\n\tpublic function get_suggested_title( $data ) {\n\t\t$title = '';\n\n\t\tif ( ! empty( $data['t'] ) ) {\n\t\t\t$title = $data['t'];\n\t\t} elseif ( ! empty( $data['_meta'] ) ) {\n\t\t\tif ( ! empty( $data['_meta']['twitter:title'] ) ) {\n\t\t\t\t$title = $data['_meta']['twitter:title'];\n\t\t\t} else if ( ! empty( $data['_meta']['og:title'] ) ) {\n\t\t\t\t$title = $data['_meta']['og:title'];\n\t\t\t} else if ( ! empty( $data['_meta']['title'] ) ) {\n\t\t\t\t$title = $data['_meta']['title'];\n\t\t\t}\n\t\t}\n\n\t\treturn $title;\n\t}\n\n\t/**\n\t * Gets the source page's suggested content, based on passed data (description, selection, etc).\n\t *\n\t * Features a blockquoted excerpt, as well as content attribution, if any.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @param array $data The site's data.\n\t * @return string Discovered content, or empty\n\t */\n\tpublic function get_suggested_content( $data ) {\n\t\t$content = $text = '';\n\n\t\tif ( ! empty( $data['s'] ) ) {\n\t\t\t$text = $data['s'];\n\t\t} else if ( ! empty( $data['_meta'] ) ) {\n\t\t\tif ( ! empty( $data['_meta']['twitter:description'] ) ) {\n\t\t\t\t$text = $data['_meta']['twitter:description'];\n\t\t\t} else if ( ! empty( $data['_meta']['og:description'] ) ) {\n\t\t\t\t$text = $data['_meta']['og:description'];\n\t\t\t} else if ( ! empty( $data['_meta']['description'] ) ) {\n\t\t\t\t$text = $data['_meta']['description'];\n\t\t\t}\n\n\t\t\t// If there is an ellipsis at the end, the description is very likely auto-generated. Better to ignore it.\n\t\t\tif ( $text && substr( $text, -3 ) === '...' ) {\n\t\t\t\t$text = '';\n\t\t\t}\n\t\t}\n\n\t\t$default_html = array( 'quote' => '', 'link' => '', 'embed' => '' );\n\n\t\tif ( ! empty( $data['u'] ) && $this->_limit_embed( $data['u'] ) ) {\n\t\t\t$default_html['embed'] = '<p>[embed]' . $data['u'] . '[/embed]</p>';\n\n\t\t\tif ( ! empty( $data['s'] ) ) {\n\t\t\t\t// If the user has selected some text, do quote it.\n\t\t\t\t$default_html['quote'] = '<blockquote>%1$s</blockquote>';\n\t\t\t}\n\t\t} else {\n\t\t\t$default_html['quote'] = '<blockquote>%1$s</blockquote>';\n\t\t\t$default_html['link'] = '<p>' . _x( 'Source:', 'Used in Press This to indicate where the content comes from.' ) .\n\t\t\t\t' <em><a href=\"%1$s\">%2$s</a></em></p>';\n\t\t}\n\n\t\t/**\n\t\t * Filters the default HTML tags used in the suggested content for the editor.\n\t\t *\n\t\t * The HTML strings use printf format. After filtering the content is added at the specified places with `sprintf()`.\n\t\t *\n\t\t * @since 4.2.0\n\t\t *\n\t\t * @param array $default_html Associative array with three possible keys:\n\t\t *                                - 'quote' where %1$s is replaced with the site description or the selected content.\n\t\t *                                - 'link' where %1$s is link href, %2$s is link text, usually the source page title.\n\t\t *                                - 'embed' which contains an [embed] shortcode when the source page offers embeddable content.\n\t\t * @param array $data         Associative array containing the data from the source page.\n\t\t */\n\t\t$default_html = apply_filters( 'press_this_suggested_html', $default_html, $data );\n\n\t\tif ( ! empty( $default_html['embed'] ) ) {\n\t\t\t$content .= $default_html['embed'];\n\t\t}\n\n\t\t// Wrap suggested content in the specified HTML.\n\t\tif ( ! empty( $default_html['quote'] ) && $text ) {\n\t\t\t$content .= sprintf( $default_html['quote'], $text );\n\t\t}\n\n\t\t// Add source attribution if there is one available.\n\t\tif ( ! empty( $default_html['link'] ) ) {\n\t\t\t$title = $this->get_suggested_title( $data );\n\t\t\t$url = $this->get_canonical_link( $data );\n\n\t\t\tif ( ! $title ) {\n\t\t\t\t$title = $this->get_source_site_name( $data );\n\t\t\t}\n\n\t\t\tif ( $url && $title ) {\n\t\t\t\t$content .= sprintf( $default_html['link'], $url, $title );\n\t\t\t}\n\t\t}\n\n\t\treturn $content;\n\t}\n\n\t/**\n\t * Serves the app's base HTML, which in turns calls the load script.\n\t *\n\t * @since 4.2.0\n\t * @access public\n\t *\n\t * @global WP_Locale $wp_locale\n\t * @global bool      $is_IE\n\t */\n\tpublic function html() {\n\t\tglobal $wp_locale;\n\n\t\t$wp_version = get_bloginfo( 'version' );\n\n\t\t// Get data, new (POST) and old (GET).\n\t\t$data = $this->merge_or_fetch_data();\n\n\t\t$post_title = $this->get_suggested_title( $data );\n\n\t\t$post_content = $this->get_suggested_content( $data );\n\n\t\t// Get site settings array/data.\n\t\t$site_settings = $this->site_settings();\n\n\t\t// Pass the images and embeds\n\t\t$images = $this->get_images( $data );\n\t\t$embeds = $this->get_embeds( $data );\n\n\t\t$site_data = array(\n\t\t\t'v' => ! empty( $data['v'] ) ? $data['v'] : '',\n\t\t\t'u' => ! empty( $data['u'] ) ? $data['u'] : '',\n\t\t\t'hasData' => ! empty( $data ) && ! isset( $data['errors'] ),\n\t\t);\n\n\t\tif ( ! empty( $images ) ) {\n\t\t\t$site_data['_images'] = $images;\n\t\t}\n\n\t\tif ( ! empty( $embeds ) ) {\n\t\t\t$site_data['_embeds'] = $embeds;\n\t\t}\n\n\t\t// Add press-this-editor.css and remove theme's editor-style.css, if any.\n\t\tremove_editor_styles();\n\n\t\tadd_filter( 'mce_css', array( $this, 'add_editor_style' ) );\n\n\t\tif ( ! empty( $GLOBALS['is_IE'] ) ) {\n\t\t\t@header( 'X-UA-Compatible: IE=edge' );\n\t\t}\n\n\t\t@header( 'Content-Type: ' . get_option( 'html_type' ) . '; charset=' . get_option( 'blog_charset' ) );\n\n?>\n<!DOCTYPE html>\n<!--[if IE 7]>         <html class=\"lt-ie9 lt-ie8\" <?php language_attributes(); ?>> <![endif]-->\n<!--[if IE 8]>         <html class=\"lt-ie9\" <?php language_attributes(); ?>> <![endif]-->\n<!--[if gt IE 8]><!--> <html <?php language_attributes(); ?>> <!--<![endif]-->\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"<?php echo esc_attr( get_bloginfo( 'html_type' ) ); ?>; charset=<?php echo esc_attr( get_option( 'blog_charset' ) ); ?>\" />\n\t<meta name=\"viewport\" content=\"width=device-width\">\n\t<title><?php esc_html_e( 'Press This!' ) ?></title>\n\n\t<script>\n\t\twindow.wpPressThisData   = <?php echo wp_json_encode( $site_data ); ?>;\n\t\twindow.wpPressThisConfig = <?php echo wp_json_encode( $site_settings ); ?>;\n\t</script>\n\n\t<script type=\"text/javascript\">\n\t\tvar ajaxurl = '<?php echo esc_js( admin_url( 'admin-ajax.php', 'relative' ) ); ?>',\n\t\t\tpagenow = 'press-this',\n\t\t\ttypenow = 'post',\n\t\t\tadminpage = 'press-this-php',\n\t\t\tthousandsSeparator = '<?php echo addslashes( $wp_locale->number_format['thousands_sep'] ); ?>',\n\t\t\tdecimalPoint = '<?php echo addslashes( $wp_locale->number_format['decimal_point'] ); ?>',\n\t\t\tisRtl = <?php echo (int) is_rtl(); ?>;\n\t</script>\n\n\t<?php\n\t\t/*\n\t\t * $post->ID is needed for the embed shortcode so we can show oEmbed previews in the editor.\n\t\t * Maybe find a way without it.\n\t\t */\n\t\t$post = get_default_post_to_edit( 'post', true );\n\t\t$post_ID = (int) $post->ID;\n\n\t\twp_enqueue_media( array( 'post' => $post_ID ) );\n\t\twp_enqueue_style( 'press-this' );\n\t\twp_enqueue_script( 'press-this' );\n\t\twp_enqueue_script( 'json2' );\n\t\twp_enqueue_script( 'editor' );\n\n\t\t$categories_tax   = get_taxonomy( 'category' );\n\t\t$show_categories  = current_user_can( $categories_tax->cap->assign_terms ) || current_user_can( $categories_tax->cap->edit_terms );\n\n\t\t$tag_tax          = get_taxonomy( 'post_tag' );\n\t\t$show_tags        = current_user_can( $tag_tax->cap->assign_terms );\n\n\t\t$supports_formats = false;\n\t\t$post_format      = 0;\n\n\t\tif ( current_theme_supports( 'post-formats' ) && post_type_supports( $post->post_type, 'post-formats' ) ) {\n\t\t\t$supports_formats = true;\n\n\t\t\tif ( ! ( $post_format = get_post_format( $post_ID ) ) ) {\n\t\t\t\t$post_format = 0;\n\t\t\t}\n\t\t}\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_enqueue_scripts', 'press-this.php' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_print_styles-press-this.php' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_print_styles' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_print_scripts-press-this.php' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_print_scripts' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_head-press-this.php' );\n\n\t\t/** This action is documented in wp-admin/admin-header.php */\n\t\tdo_action( 'admin_head' );\n\t?>\n</head>\n<?php\n\n\t$admin_body_class  = 'press-this';\n\t$admin_body_class .= ( is_rtl() ) ? ' rtl' : '';\n\t$admin_body_class .= ' branch-' . str_replace( array( '.', ',' ), '-', floatval( $wp_version ) );\n\t$admin_body_class .= ' version-' . str_replace( '.', '-', preg_replace( '/^([.0-9]+).*/', '$1', $wp_version ) );\n\t$admin_body_class .= ' admin-color-' . sanitize_html_class( get_user_option( 'admin_color' ), 'fresh' );\n\t$admin_body_class .= ' locale-' . sanitize_html_class( strtolower( str_replace( '_', '-', get_user_locale() ) ) );\n\n\t/** This filter is documented in wp-admin/admin-header.php */\n\t$admin_body_classes = apply_filters( 'admin_body_class', '' );\n\n?>\n<body class=\"wp-admin wp-core-ui <?php echo $admin_body_classes . ' ' . $admin_body_class; ?>\">\n\t<div id=\"adminbar\" class=\"adminbar\">\n\t\t<h1 id=\"current-site\" class=\"current-site\">\n\t\t\t<a class=\"current-site-link\" href=\"<?php echo esc_url( home_url( '/' ) ); ?>\" target=\"_blank\" rel=\"home\">\n\t\t\t\t<span class=\"dashicons dashicons-wordpress\"></span>\n\t\t\t\t<span class=\"current-site-name\"><?php bloginfo( 'name' ); ?></span>\n\t\t\t</a>\n\t\t</h1>\n\t\t<button type=\"button\" class=\"options button-link closed\">\n\t\t\t<span class=\"dashicons dashicons-tag on-closed\"></span>\n\t\t\t<span class=\"screen-reader-text on-closed\"><?php _e( 'Show post options' ); ?></span>\n\t\t\t<span aria-hidden=\"true\" class=\"on-open\"><?php _e( 'Done' ); ?></span>\n\t\t\t<span class=\"screen-reader-text on-open\"><?php _e( 'Hide post options' ); ?></span>\n\t\t</button>\n\t</div>\n\n\t<div id=\"scanbar\" class=\"scan\">\n\t\t<form method=\"GET\">\n\t\t\t<label for=\"url-scan\" class=\"screen-reader-text\"><?php _e( 'Scan site for content' ); ?></label>\n\t\t\t<input type=\"url\" name=\"u\" id=\"url-scan\" class=\"scan-url\" value=\"<?php echo esc_attr( $site_data['u'] ) ?>\" placeholder=\"<?php esc_attr_e( 'Enter a URL to scan' ) ?>\" />\n\t\t\t<input type=\"submit\" name=\"url-scan-submit\" id=\"url-scan-submit\" class=\"scan-submit\" value=\"<?php esc_attr_e( 'Scan' ) ?>\" />\n\t\t\t<?php wp_nonce_field( 'scan-site' ); ?>\n\t\t</form>\n\t</div>\n\n\t<form id=\"pressthis-form\" method=\"post\" action=\"post.php\" autocomplete=\"off\">\n\t\t<input type=\"hidden\" name=\"post_ID\" id=\"post_ID\" value=\"<?php echo $post_ID; ?>\" />\n\t\t<input type=\"hidden\" name=\"action\" value=\"press-this-save-post\" />\n\t\t<input type=\"hidden\" name=\"post_status\" id=\"post_status\" value=\"draft\" />\n\t\t<input type=\"hidden\" name=\"wp-preview\" id=\"wp-preview\" value=\"\" />\n\t\t<input type=\"hidden\" name=\"post_title\" id=\"post_title\" value=\"\" />\n\t\t<input type=\"hidden\" name=\"pt-force-redirect\" id=\"pt-force-redirect\" value=\"\" />\n\t\t<?php\n\n\t\twp_nonce_field( 'update-post_' . $post_ID, '_wpnonce', false );\n\t\twp_nonce_field( 'add-category', '_ajax_nonce-add-category', false );\n\n\t\t?>\n\n\t<div class=\"wrapper\">\n\t\t<div class=\"editor-wrapper\">\n\t\t\t<div class=\"alerts\" role=\"alert\" aria-live=\"assertive\" aria-relevant=\"all\" aria-atomic=\"true\">\n\t\t\t\t<?php\n\n\t\t\t\tif ( isset( $data['v'] ) && $this->version > $data['v'] ) {\n\t\t\t\t\t?>\n\t\t\t\t\t<p class=\"alert is-notice\">\n\t\t\t\t\t\t<?php printf( __( 'You should upgrade <a href=\"%s\" target=\"_blank\">your bookmarklet</a> to the latest version!' ), admin_url( 'tools.php' ) ); ?>\n\t\t\t\t\t</p>\n\t\t\t\t\t<?php\n\t\t\t\t}\n\n\t\t\t\t?>\n\t\t\t</div>\n\n\t\t\t<div id=\"app-container\" class=\"editor\">\n\t\t\t\t<span id=\"title-container-label\" class=\"post-title-placeholder\" aria-hidden=\"true\"><?php _e( 'Post title' ); ?></span>\n\t\t\t\t<h2 id=\"title-container\" class=\"post-title\" contenteditable=\"true\" spellcheck=\"true\" aria-label=\"<?php esc_attr_e( 'Post title' ); ?>\" tabindex=\"0\"><?php echo esc_html( $post_title ); ?></h2>\n\n\t\t\t\t<div class=\"media-list-container\">\n\t\t\t\t\t<div class=\"media-list-inner-container\">\n\t\t\t\t\t\t<h2 class=\"screen-reader-text\"><?php _e( 'Suggested media' ); ?></h2>\n\t\t\t\t\t\t<ul class=\"media-list\"></ul>\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\n\t\t\t\t<?php\n\t\t\t\twp_editor( $post_content, 'pressthis', array(\n\t\t\t\t\t'drag_drop_upload' => true,\n\t\t\t\t\t'editor_height'    => 600,\n\t\t\t\t\t'media_buttons'    => false,\n\t\t\t\t\t'textarea_name'    => 'post_content',\n\t\t\t\t\t'teeny'            => true,\n\t\t\t\t\t'tinymce'          => array(\n\t\t\t\t\t\t'resize'                => false,\n\t\t\t\t\t\t'wordpress_adv_hidden'  => false,\n\t\t\t\t\t\t'add_unload_trigger'    => false,\n\t\t\t\t\t\t'statusbar'             => false,\n\t\t\t\t\t\t'autoresize_min_height' => 600,\n\t\t\t\t\t\t'wp_autoresize_on'      => true,\n\t\t\t\t\t\t'plugins'               => 'lists,media,paste,tabfocus,fullscreen,wordpress,wpautoresize,wpeditimage,wpgallery,wplink,wptextpattern,wpview',\n\t\t\t\t\t\t'toolbar1'              => 'bold,italic,bullist,numlist,blockquote,link,unlink',\n\t\t\t\t\t\t'toolbar2'              => 'undo,redo',\n\t\t\t\t\t),\n\t\t\t\t\t'quicktags' => array(\n\t\t\t\t\t\t'buttons' => 'strong,em,link,block,del,ins,img,ul,ol,li,code,more',\n\t\t\t\t\t),\n\t\t\t\t) );\n\n\t\t\t\t?>\n\t\t\t</div>\n\t\t</div>\n\n\t\t<div class=\"options-panel-back is-hidden\" tabindex=\"-1\"></div>\n\t\t<div class=\"options-panel is-off-screen is-hidden\" tabindex=\"-1\">\n\t\t\t<div class=\"post-options\">\n\n\t\t\t\t<?php if ( $supports_formats ) : ?>\n\t\t\t\t\t<button type=\"button\" class=\"post-option\">\n\t\t\t\t\t\t<span class=\"dashicons dashicons-admin-post\"></span>\n\t\t\t\t\t\t<span class=\"post-option-title\"><?php _ex( 'Format', 'post format' ); ?></span>\n\t\t\t\t\t\t<span class=\"post-option-contents\" id=\"post-option-post-format\"><?php echo esc_html( get_post_format_string( $post_format ) ); ?></span>\n\t\t\t\t\t\t<span class=\"dashicons post-option-forward\"></span>\n\t\t\t\t\t</button>\n\t\t\t\t<?php endif; ?>\n\n\t\t\t\t<?php if ( $show_categories ) : ?>\n\t\t\t\t\t<button type=\"button\" class=\"post-option\">\n\t\t\t\t\t\t<span class=\"dashicons dashicons-category\"></span>\n\t\t\t\t\t\t<span class=\"post-option-title\"><?php _e( 'Categories' ); ?></span>\n\t\t\t\t\t\t<span class=\"dashicons post-option-forward\"></span>\n\t\t\t\t\t</button>\n\t\t\t\t<?php endif; ?>\n\n\t\t\t\t<?php if ( $show_tags ) : ?>\n\t\t\t\t\t<button type=\"button\" class=\"post-option\">\n\t\t\t\t\t\t<span class=\"dashicons dashicons-tag\"></span>\n\t\t\t\t\t\t<span class=\"post-option-title\"><?php _e( 'Tags' ); ?></span>\n\t\t\t\t\t\t<span class=\"dashicons post-option-forward\"></span>\n\t\t\t\t\t</button>\n\t\t\t\t<?php endif; ?>\n\t\t\t</div>\n\n\t\t\t<?php if ( $supports_formats ) : ?>\n\t\t\t\t<div class=\"setting-modal is-off-screen is-hidden\">\n\t\t\t\t\t<button type=\"button\" class=\"modal-close\">\n\t\t\t\t\t\t<span class=\"dashicons post-option-back\"></span>\n\t\t\t\t\t\t<span class=\"setting-title\" aria-hidden=\"true\"><?php _ex( 'Format', 'post format' ); ?></span>\n\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Back to post options' ) ?></span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<?php $this->post_formats_html( $post ); ?>\n\t\t\t\t</div>\n\t\t\t<?php endif; ?>\n\n\t\t\t<?php if ( $show_categories ) : ?>\n\t\t\t\t<div class=\"setting-modal is-off-screen is-hidden\">\n\t\t\t\t\t<button type=\"button\" class=\"modal-close\">\n\t\t\t\t\t\t<span class=\"dashicons post-option-back\"></span>\n\t\t\t\t\t\t<span class=\"setting-title\" aria-hidden=\"true\"><?php _e( 'Categories' ); ?></span>\n\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Back to post options' ) ?></span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<?php $this->categories_html( $post ); ?>\n\t\t\t\t</div>\n\t\t\t<?php endif; ?>\n\n\t\t\t<?php if ( $show_tags ) : ?>\n\t\t\t\t<div class=\"setting-modal tags is-off-screen is-hidden\">\n\t\t\t\t\t<button type=\"button\" class=\"modal-close\">\n\t\t\t\t\t\t<span class=\"dashicons post-option-back\"></span>\n\t\t\t\t\t\t<span class=\"setting-title\" aria-hidden=\"true\"><?php _e( 'Tags' ); ?></span>\n\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Back to post options' ) ?></span>\n\t\t\t\t\t</button>\n\t\t\t\t\t<?php $this->tags_html( $post ); ?>\n\t\t\t\t</div>\n\t\t\t<?php endif; ?>\n\t\t</div><!-- .options-panel -->\n\t</div><!-- .wrapper -->\n\n\t<div class=\"press-this-actions\">\n\t\t<div class=\"pressthis-media-buttons\">\n\t\t\t<button type=\"button\" class=\"insert-media\" data-editor=\"pressthis\">\n\t\t\t\t<span class=\"dashicons dashicons-admin-media\"></span>\n\t\t\t\t<span class=\"screen-reader-text\"><?php _e( 'Add Media' ); ?></span>\n\t\t\t</button>\n\t\t</div>\n\t\t<div class=\"post-actions\">\n\t\t\t<span class=\"spinner\">&nbsp;</span>\n\t\t\t<div class=\"split-button\">\n\t\t\t\t<div class=\"split-button-head\">\n\t\t\t\t\t<button type=\"button\" class=\"publish-button split-button-primary\" aria-live=\"polite\">\n\t\t\t\t\t\t<span class=\"publish\"><?php echo ( current_user_can( 'publish_posts' ) ) ? __( 'Publish' ) : __( 'Submit for Review' ); ?></span>\n\t\t\t\t\t\t<span class=\"saving-draft\"><?php _e( 'Saving&hellip;' ); ?></span>\n\t\t\t\t\t</button><button type=\"button\" class=\"split-button-toggle\" aria-haspopup=\"true\" aria-expanded=\"false\">\n\t\t\t\t\t\t<i class=\"dashicons dashicons-arrow-down-alt2\"></i>\n\t\t\t\t\t\t<span class=\"screen-reader-text\"><?php _e('More actions'); ?></span>\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t<ul class=\"split-button-body\">\n\t\t\t\t\t<li><button type=\"button\" class=\"button-link draft-button split-button-option\"><?php _e( 'Save Draft' ); ?></button></li>\n\t\t\t\t\t<li><button type=\"button\" class=\"button-link standard-editor-button split-button-option\"><?php _e( 'Standard Editor' ); ?></button></li>\n\t\t\t\t\t<li><button type=\"button\" class=\"button-link preview-button split-button-option\"><?php _e( 'Preview' ); ?></button></li>\n\t\t\t\t</ul>\n\t\t\t</div>\n\t\t</div>\n\t</div>\n\t</form>\n\n\t<?php\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_footer' );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts-press-this.php' );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_print_footer_scripts' );\n\n\t/** This action is documented in wp-admin/admin-footer.php */\n\tdo_action( 'admin_footer-press-this.php' );\n\t?>\n</body>\n</html>\n<?php\n\t\tdie();\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '4.8-alpha-40195';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 38590;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4403-20160901';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-admin/includes/class-wp-press-this.php", "wp-includes/version.php"], "buggy_code_start_loc": [721, 7], "buggy_code_end_loc": [1371, 8], "fixing_code_start_loc": [721, 7], "fixing_code_end_loc": [1377, 8], "type": "CWE-352", "message": "In WordPress before 4.7.3, there is cross-site request forgery (CSRF) in Press This (wp-admin/includes/class-wp-press-this.php), leading to excessive use of server resources. The CSRF can trigger an outbound HTTP request for a large file that is then parsed by Press This.", "other": {"cve": {"id": "CVE-2017-6819", "sourceIdentifier": "cve@mitre.org", "published": "2017-03-12T01:59:00.350", "lastModified": "2019-03-19T12:54:53.737", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In WordPress before 4.7.3, there is cross-site request forgery (CSRF) in Press This (wp-admin/includes/class-wp-press-this.php), leading to excessive use of server resources. The CSRF can trigger an outbound HTTP request for a large file that is then parsed by Press This."}, {"lang": "es", "value": "En WordPress en versiones anteriores a 4.7.3, hay CSRF en Press This (wp-admin/includes/class-wp-press-this.php), lo que conduce a un uso excesivo de recursos del servidor. El CSRF puede desencadenar una solicitud HTTP de salida para un archivo grande que luego se analiza mediante Press This."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:R/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-352"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndIncluding": "4.7.2", "matchCriteriaId": "5A557EFF-02E2-499A-AA55-15F43DB9D820"}]}]}], "references": [{"url": "http://openwall.com/lists/oss-security/2017/03/06/7", "source": "cve@mitre.org", "tags": ["Exploit", "Mailing List", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/96602", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securitytracker.com/id/1037959", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.7.3", "source": "cve@mitre.org", "tags": ["Patch", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/263831a72d08556bc2f3a328673d95301a152829", "source": "cve@mitre.org", "tags": ["Issue Tracking", "Patch", "Third Party Advisory"]}, {"url": "https://sumofpwn.nl/advisory/2016/cross_site_request_forgery_in_wordpress_press_this_function_allows_dos.html", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2017/03/wordpress-4-7-3-security-and-maintenance-release/", "source": "cve@mitre.org", "tags": ["Patch", "Release Notes", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/8770", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/263831a72d08556bc2f3a328673d95301a152829"}}