{"buggy_code": ["<?php\n\nnamespace app\\admin\\controller;\n\nuse app\\common\\controller\\Backend;\nuse fast\\Random;\nuse think\\addons\\Service;\nuse think\\Cache;\nuse think\\Config;\nuse think\\Db;\nuse think\\Lang;\n\n/**\n * Ajax\u5f02\u6b65\u8bf7\u6c42\u63a5\u53e3\n * @internal\n */\nclass Ajax extends Backend\n{\n\n    protected $noNeedLogin = ['lang'];\n    protected $noNeedRight = ['*'];\n    protected $layout = '';\n\n    public function _initialize()\n    {\n        parent::_initialize();\n\n        //\u8bbe\u7f6e\u8fc7\u6ee4\u65b9\u6cd5\n        $this->request->filter(['strip_tags', 'htmlspecialchars']);\n    }\n\n    /**\n     * \u52a0\u8f7d\u8bed\u8a00\u5305\n     */\n    public function lang()\n    {\n        header('Content-Type: application/javascript');\n        $controllername = input(\"controllername\");\n        //\u9ed8\u8ba4\u53ea\u52a0\u8f7d\u4e86\u63a7\u5236\u5668\u5bf9\u5e94\u7684\u8bed\u8a00\u540d\uff0c\u4f60\u8fd8\u6839\u636e\u63a7\u5236\u5668\u540d\u6765\u52a0\u8f7d\u989d\u5916\u7684\u8bed\u8a00\u5305\n        $this->loadlang($controllername);\n        return jsonp(Lang::get(), 200, [], ['json_encode_param' => JSON_FORCE_OBJECT | JSON_UNESCAPED_UNICODE]);\n    }\n\n    /**\n     * \u4e0a\u4f20\u6587\u4ef6\n     */\n    public function upload()\n    {\n        Config::set('default_return_type', 'json');\n        $file = $this->request->file('file');\n        if (empty($file)) {\n            $this->error(__('No file upload or server upload limit exceeded'));\n        }\n\n        //\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u9644\u4ef6\n        $sha1 = $file->hash();\n        $extparam = $this->request->post();\n\n        $upload = Config::get('upload');\n\n        preg_match('/(\\d+)(\\w+)/', $upload['maxsize'], $matches);\n        $type = strtolower($matches[2]);\n        $typeDict = ['b' => 0, 'k' => 1, 'kb' => 1, 'm' => 2, 'mb' => 2, 'gb' => 3, 'g' => 3];\n        $size = (int)$upload['maxsize'] * pow(1024, isset($typeDict[$type]) ? $typeDict[$type] : 0);\n        $fileInfo = $file->getInfo();\n        $suffix = strtolower(pathinfo($fileInfo['name'], PATHINFO_EXTENSION));\n        $suffix = $suffix && preg_match(\"/^[a-zA-Z0-9]+$/\", $suffix) ? $suffix : 'file';\n\n        $mimetypeArr = explode(',', strtolower($upload['mimetype']));\n        $typeArr = explode('/', $fileInfo['type']);\n\n        //\u7981\u6b62\u4e0a\u4f20PHP\u548cHTML\u6587\u4ef6\n        if (in_array($fileInfo['type'], ['text/x-php', 'text/html']) || in_array($suffix, ['php', 'html', 'htm'])) {\n            $this->error(__('Uploaded file format is limited'));\n        }\n        //\u9a8c\u8bc1\u6587\u4ef6\u540e\u7f00\n        if ($upload['mimetype'] !== '*' &&\n            (\n                !in_array($suffix, $mimetypeArr)\n                || (stripos($typeArr[0] . '/', $upload['mimetype']) !== false && (!in_array($fileInfo['type'], $mimetypeArr) && !in_array($typeArr[0] . '/*', $mimetypeArr)))\n            )\n        ) {\n            $this->error(__('Uploaded file format is limited'));\n        }\n        //\u9a8c\u8bc1\u662f\u5426\u4e3a\u56fe\u7247\u6587\u4ef6\n        $imagewidth = $imageheight = 0;\n        if (in_array($fileInfo['type'], ['image/gif', 'image/jpg', 'image/jpeg', 'image/bmp', 'image/png', 'image/webp']) || in_array($suffix, ['gif', 'jpg', 'jpeg', 'bmp', 'png', 'webp'])) {\n            $imgInfo = getimagesize($fileInfo['tmp_name']);\n            if (!$imgInfo || !isset($imgInfo[0]) || !isset($imgInfo[1])) {\n                $this->error(__('Uploaded file is not a valid image'));\n            }\n            $imagewidth = isset($imgInfo[0]) ? $imgInfo[0] : $imagewidth;\n            $imageheight = isset($imgInfo[1]) ? $imgInfo[1] : $imageheight;\n        }\n        $replaceArr = [\n            '{year}'     => date(\"Y\"),\n            '{mon}'      => date(\"m\"),\n            '{day}'      => date(\"d\"),\n            '{hour}'     => date(\"H\"),\n            '{min}'      => date(\"i\"),\n            '{sec}'      => date(\"s\"),\n            '{random}'   => Random::alnum(16),\n            '{random32}' => Random::alnum(32),\n            '{filename}' => $suffix ? substr($fileInfo['name'], 0, strripos($fileInfo['name'], '.')) : $fileInfo['name'],\n            '{suffix}'   => $suffix,\n            '{.suffix}'  => $suffix ? '.' . $suffix : '',\n            '{filemd5}'  => md5_file($fileInfo['tmp_name']),\n        ];\n        $savekey = $upload['savekey'];\n        $savekey = str_replace(array_keys($replaceArr), array_values($replaceArr), $savekey);\n\n        $uploadDir = substr($savekey, 0, strripos($savekey, '/') + 1);\n        $fileName = substr($savekey, strripos($savekey, '/') + 1);\n        //\n        $splInfo = $file->validate(['size' => $size])->move(ROOT_PATH . '/public' . $uploadDir, $fileName);\n        if ($splInfo) {\n            $params = array(\n                'admin_id'    => (int)$this->auth->id,\n                'user_id'     => 0,\n                'filesize'    => $fileInfo['size'],\n                'imagewidth'  => $imagewidth,\n                'imageheight' => $imageheight,\n                'imagetype'   => $suffix,\n                'imageframes' => 0,\n                'mimetype'    => $fileInfo['type'],\n                'url'         => $uploadDir . $splInfo->getSaveName(),\n                'uploadtime'  => time(),\n                'storage'     => 'local',\n                'sha1'        => $sha1,\n                'extparam'    => json_encode($extparam),\n            );\n            $attachment = model(\"attachment\");\n            $attachment->data(array_filter($params));\n            $attachment->save();\n            \\think\\Hook::listen(\"upload_after\", $attachment);\n            $this->success(__('Upload successful'), null, [\n                'url' => $uploadDir . $splInfo->getSaveName()\n            ]);\n        } else {\n            // \u4e0a\u4f20\u5931\u8d25\u83b7\u53d6\u9519\u8bef\u4fe1\u606f\n            $this->error($file->getError());\n        }\n    }\n\n    /**\n     * \u901a\u7528\u6392\u5e8f\n     */\n    public function weigh()\n    {\n        //\u6392\u5e8f\u7684\u6570\u7ec4\n        $ids = $this->request->post(\"ids\");\n        //\u62d6\u52a8\u7684\u8bb0\u5f55ID\n        $changeid = $this->request->post(\"changeid\");\n        //\u64cd\u4f5c\u5b57\u6bb5\n        $field = $this->request->post(\"field\");\n        //\u64cd\u4f5c\u7684\u6570\u636e\u8868\n        $table = $this->request->post(\"table\");\n        //\u4e3b\u952e\n        $pk = $this->request->post(\"pk\");\n        //\u6392\u5e8f\u7684\u65b9\u5f0f\n        $orderway = strtolower($this->request->post(\"orderway\", \"\"));\n        $orderway = $orderway == 'asc' ? 'ASC' : 'DESC';\n        $sour = $weighdata = [];\n        $ids = explode(',', $ids);\n        $prikey = $pk ? $pk : (Db::name($table)->getPk() ?: 'id');\n        $pid = $this->request->post(\"pid\");\n        //\u9650\u5236\u66f4\u65b0\u7684\u5b57\u6bb5\n        $field = in_array($field, ['weigh']) ? $field : 'weigh';\n\n        // \u5982\u679c\u8bbe\u5b9a\u4e86pid\u7684\u503c,\u6b64\u65f6\u53ea\u5339\u914d\u6ee1\u8db3\u6761\u4ef6\u7684ID,\u5176\u5b83\u5ffd\u7565\n        if ($pid !== '') {\n            $hasids = [];\n            $list = Db::name($table)->where($prikey, 'in', $ids)->where('pid', 'in', $pid)->field(\"{$prikey},pid\")->select();\n            foreach ($list as $k => $v) {\n                $hasids[] = $v[$prikey];\n            }\n            $ids = array_values(array_intersect($ids, $hasids));\n        }\n\n        $list = Db::name($table)->field(\"$prikey,$field\")->where($prikey, 'in', $ids)->order($field, $orderway)->select();\n        foreach ($list as $k => $v) {\n            $sour[] = $v[$prikey];\n            $weighdata[$v[$prikey]] = $v[$field];\n        }\n        $position = array_search($changeid, $ids);\n        $desc_id = $sour[$position];    //\u79fb\u52a8\u5230\u76ee\u6807\u7684ID\u503c,\u53d6\u51fa\u6240\u5904\u6539\u53d8\u524d\u4f4d\u7f6e\u7684\u503c\n        $sour_id = $changeid;\n        $weighids = array();\n        $temp = array_values(array_diff_assoc($ids, $sour));\n        foreach ($temp as $m => $n) {\n            if ($n == $sour_id) {\n                $offset = $desc_id;\n            } else {\n                if ($sour_id == $temp[0]) {\n                    $offset = isset($temp[$m + 1]) ? $temp[$m + 1] : $sour_id;\n                } else {\n                    $offset = isset($temp[$m - 1]) ? $temp[$m - 1] : $sour_id;\n                }\n            }\n            $weighids[$n] = $weighdata[$offset];\n            Db::name($table)->where($prikey, $n)->update([$field => $weighdata[$offset]]);\n        }\n        $this->success();\n    }\n\n    /**\n     * \u6e05\u7a7a\u7cfb\u7edf\u7f13\u5b58\n     */\n    public function wipecache()\n    {\n        $type = $this->request->request(\"type\");\n        switch ($type) {\n            case 'all':\n            case 'content':\n                rmdirs(CACHE_PATH, false);\n                Cache::clear();\n                if ($type == 'content')\n                    break;\n            case 'template':\n                rmdirs(TEMP_PATH, false);\n                if ($type == 'template')\n                    break;\n            case 'addons':\n                Service::refresh();\n                if ($type == 'addons')\n                    break;\n        }\n\n        \\think\\Hook::listen(\"wipecache_after\");\n        $this->success();\n    }\n\n    /**\n     * \u8bfb\u53d6\u5206\u7c7b\u6570\u636e,\u8054\u52a8\u5217\u8868\n     */\n    public function category()\n    {\n        $type = $this->request->get('type');\n        $pid = $this->request->get('pid');\n        $where = ['status' => 'normal'];\n        $categorylist = null;\n        if ($pid !== '') {\n            if ($type) {\n                $where['type'] = $type;\n            }\n            if ($pid) {\n                $where['pid'] = $pid;\n            }\n\n            $categorylist = Db::name('category')->where($where)->field('id as value,name')->order('weigh desc,id desc')->select();\n        }\n        $this->success('', null, $categorylist);\n    }\n\n    /**\n     * \u8bfb\u53d6\u7701\u5e02\u533a\u6570\u636e,\u8054\u52a8\u5217\u8868\n     */\n    public function area()\n    {\n        $params = $this->request->get(\"row/a\");\n        if (!empty($params)) {\n            $province = isset($params['province']) ? $params['province'] : '';\n            $city = isset($params['city']) ? $params['city'] : null;\n        } else {\n            $province = $this->request->get('province');\n            $city = $this->request->get('city');\n        }\n        $where = ['pid' => 0, 'level' => 1];\n        $provincelist = null;\n        if ($province !== '') {\n            if ($province) {\n                $where['pid'] = $province;\n                $where['level'] = 2;\n            }\n            if ($city !== '') {\n                if ($city) {\n                    $where['pid'] = $city;\n                    $where['level'] = 3;\n                }\n                $provincelist = Db::name('area')->where($where)->field('id as value,name')->select();\n            }\n        }\n        $this->success('', null, $provincelist);\n    }\n\n}\n", "<?php\n\nnamespace app\\common\\controller;\n\nuse app\\admin\\library\\Auth;\nuse think\\Config;\nuse think\\Controller;\nuse think\\Hook;\nuse think\\Lang;\nuse think\\Loader;\nuse think\\Session;\nuse fast\\Tree;\nuse think\\Validate;\n\n/**\n * \u540e\u53f0\u63a7\u5236\u5668\u57fa\u7c7b\n */\nclass Backend extends Controller\n{\n\n    /**\n     * \u65e0\u9700\u767b\u5f55\u7684\u65b9\u6cd5,\u540c\u65f6\u4e5f\u5c31\u4e0d\u9700\u8981\u9274\u6743\u4e86\n     * @var array\n     */\n    protected $noNeedLogin = [];\n\n    /**\n     * \u65e0\u9700\u9274\u6743\u7684\u65b9\u6cd5,\u4f46\u9700\u8981\u767b\u5f55\n     * @var array\n     */\n    protected $noNeedRight = [];\n\n    /**\n     * \u5e03\u5c40\u6a21\u677f\n     * @var string\n     */\n    protected $layout = 'default';\n\n    /**\n     * \u6743\u9650\u63a7\u5236\u7c7b\n     * @var Auth\n     */\n    protected $auth = null;\n\n    /**\n     * \u6a21\u578b\u5bf9\u8c61\n     * @var \\think\\Model\n     */\n    protected $model = null;\n\n    /**\n     * \u5feb\u901f\u641c\u7d22\u65f6\u6267\u884c\u67e5\u627e\u7684\u5b57\u6bb5\n     */\n    protected $searchFields = 'id';\n\n    /**\n     * \u662f\u5426\u662f\u5173\u8054\u67e5\u8be2\n     */\n    protected $relationSearch = false;\n\n    /**\n     * \u662f\u5426\u5f00\u542f\u6570\u636e\u9650\u5236\n     * \u652f\u6301auth/personal\n     * \u8868\u793a\u6309\u6743\u9650\u5224\u65ad/\u4ec5\u9650\u4e2a\u4eba\n     * \u9ed8\u8ba4\u4e3a\u7981\u7528,\u82e5\u542f\u7528\u8bf7\u52a1\u5fc5\u4fdd\u8bc1\u8868\u4e2d\u5b58\u5728admin_id\u5b57\u6bb5\n     */\n    protected $dataLimit = false;\n\n    /**\n     * \u6570\u636e\u9650\u5236\u5b57\u6bb5\n     */\n    protected $dataLimitField = 'admin_id';\n\n    /**\n     * \u6570\u636e\u9650\u5236\u5f00\u542f\u65f6\u81ea\u52a8\u586b\u5145\u9650\u5236\u5b57\u6bb5\u503c\n     */\n    protected $dataLimitFieldAutoFill = true;\n\n    /**\n     * \u662f\u5426\u5f00\u542fValidate\u9a8c\u8bc1\n     */\n    protected $modelValidate = false;\n\n    /**\n     * \u662f\u5426\u5f00\u542f\u6a21\u578b\u573a\u666f\u9a8c\u8bc1\n     */\n    protected $modelSceneValidate = false;\n\n    /**\n     * Multi\u65b9\u6cd5\u53ef\u6279\u91cf\u4fee\u6539\u7684\u5b57\u6bb5\n     */\n    protected $multiFields = 'status';\n\n    /**\n     * Selectpage\u53ef\u663e\u793a\u7684\u5b57\u6bb5\n     */\n    protected $selectpageFields = '*';\n\n    /**\n     * \u524d\u53f0\u63d0\u4ea4\u8fc7\u6765,\u9700\u8981\u6392\u9664\u7684\u5b57\u6bb5\u6570\u636e\n     */\n    protected $excludeFields = \"\";\n\n    /**\n     * \u5bfc\u5165\u6587\u4ef6\u9996\u884c\u7c7b\u578b\n     * \u652f\u6301comment/name\n     * \u8868\u793a\u6ce8\u91ca\u6216\u5b57\u6bb5\u540d\n     */\n    protected $importHeadType = 'comment';\n\n    /**\n     * \u5f15\u5165\u540e\u53f0\u63a7\u5236\u5668\u7684traits\n     */\n    use \\app\\admin\\library\\traits\\Backend;\n\n    public function _initialize()\n    {\n        $modulename = $this->request->module();\n        $controllername = Loader::parseName($this->request->controller());\n        $actionname = strtolower($this->request->action());\n\n        $path = str_replace('.', '/', $controllername) . '/' . $actionname;\n\n        // \u5b9a\u4e49\u662f\u5426Addtabs\u8bf7\u6c42\n        !defined('IS_ADDTABS') && define('IS_ADDTABS', input(\"addtabs\") ? true : false);\n\n        // \u5b9a\u4e49\u662f\u5426Dialog\u8bf7\u6c42\n        !defined('IS_DIALOG') && define('IS_DIALOG', input(\"dialog\") ? true : false);\n\n        // \u5b9a\u4e49\u662f\u5426AJAX\u8bf7\u6c42\n        !defined('IS_AJAX') && define('IS_AJAX', $this->request->isAjax());\n\n        $this->auth = Auth::instance();\n\n        // \u8bbe\u7f6e\u5f53\u524d\u8bf7\u6c42\u7684URI\n        $this->auth->setRequestUri($path);\n        // \u68c0\u6d4b\u662f\u5426\u9700\u8981\u9a8c\u8bc1\u767b\u5f55\n        if (!$this->auth->match($this->noNeedLogin)) {\n            //\u68c0\u6d4b\u662f\u5426\u767b\u5f55\n            if (!$this->auth->isLogin()) {\n                Hook::listen('admin_nologin', $this);\n                $url = Session::get('referer');\n                $url = $url ? $url : $this->request->url();\n                if ($url == '/') {\n                    $this->redirect('index/login', [], 302, ['referer' => $url]);\n                    exit;\n                }\n                $this->error(__('Please login first'), url('index/login', ['url' => $url]));\n            }\n            // \u5224\u65ad\u662f\u5426\u9700\u8981\u9a8c\u8bc1\u6743\u9650\n            if (!$this->auth->match($this->noNeedRight)) {\n                // \u5224\u65ad\u63a7\u5236\u5668\u548c\u65b9\u6cd5\u5224\u65ad\u662f\u5426\u6709\u5bf9\u5e94\u6743\u9650\n                if (!$this->auth->check($path)) {\n                    Hook::listen('admin_nopermission', $this);\n                    $this->error(__('You have no permission'), '');\n                }\n            }\n        }\n\n        // \u975e\u9009\u9879\u5361\u65f6\u91cd\u5b9a\u5411\n        if (!$this->request->isPost() && !IS_AJAX && !IS_ADDTABS && !IS_DIALOG && input(\"ref\") == 'addtabs') {\n            $url = preg_replace_callback(\"/([\\?|&]+)ref=addtabs(&?)/i\", function ($matches) {\n                return $matches[2] == '&' ? $matches[1] : '';\n            }, $this->request->url());\n            if (Config::get('url_domain_deploy')) {\n                if (stripos($url, $this->request->server('SCRIPT_NAME')) === 0) {\n                    $url = substr($url, strlen($this->request->server('SCRIPT_NAME')));\n                }\n                $url = url($url, '', false);\n            }\n            $this->redirect('index/index', [], 302, ['referer' => $url]);\n            exit;\n        }\n\n        // \u8bbe\u7f6e\u9762\u5305\u5c51\u5bfc\u822a\u6570\u636e\n        $breadcrumb = $this->auth->getBreadCrumb($path);\n        array_pop($breadcrumb);\n        $this->view->breadcrumb = $breadcrumb;\n\n        // \u5982\u679c\u6709\u4f7f\u7528\u6a21\u677f\u5e03\u5c40\n        if ($this->layout) {\n            $this->view->engine->layout('layout/' . $this->layout);\n        }\n\n        // \u8bed\u8a00\u68c0\u6d4b\n        $lang = strip_tags($this->request->langset());\n\n        $site = Config::get(\"site\");\n\n        $upload = \\app\\common\\model\\Config::upload();\n\n        // \u4e0a\u4f20\u4fe1\u606f\u914d\u7f6e\u540e\n        Hook::listen(\"upload_config_init\", $upload);\n\n        // \u914d\u7f6e\u4fe1\u606f\n        $config = [\n            'site'           => array_intersect_key($site, array_flip(['name', 'indexurl', 'cdnurl', 'version', 'timezone', 'languages'])),\n            'upload'         => $upload,\n            'modulename'     => $modulename,\n            'controllername' => $controllername,\n            'actionname'     => $actionname,\n            'jsname'         => 'backend/' . str_replace('.', '/', $controllername),\n            'moduleurl'      => rtrim(url(\"/{$modulename}\", '', false), '/'),\n            'language'       => $lang,\n            'fastadmin'      => Config::get('fastadmin'),\n            'referer'        => Session::get(\"referer\")\n        ];\n        $config = array_merge($config, Config::get(\"view_replace_str\"));\n\n        Config::set('upload', array_merge(Config::get('upload'), $upload));\n\n        // \u914d\u7f6e\u4fe1\u606f\u540e\n        Hook::listen(\"config_init\", $config);\n        //\u52a0\u8f7d\u5f53\u524d\u63a7\u5236\u5668\u8bed\u8a00\u5305\n        $this->loadlang($controllername);\n        //\u6e32\u67d3\u7ad9\u70b9\u914d\u7f6e\n        $this->assign('site', $site);\n        //\u6e32\u67d3\u914d\u7f6e\u4fe1\u606f\n        $this->assign('config', $config);\n        //\u6e32\u67d3\u6743\u9650\u5bf9\u8c61\n        $this->assign('auth', $this->auth);\n        //\u6e32\u67d3\u7ba1\u7406\u5458\u5bf9\u8c61\n        $this->assign('admin', Session::get('admin'));\n    }\n\n    /**\n     * \u52a0\u8f7d\u8bed\u8a00\u6587\u4ef6\n     * @param string $name\n     */\n    protected function loadlang($name)\n    {\n        Lang::load(APP_PATH . $this->request->module() . '/lang/' . $this->request->langset() . '/' . str_replace('.', '/', $name) . '.php');\n    }\n\n    /**\n     * \u6e32\u67d3\u914d\u7f6e\u4fe1\u606f\n     * @param mixed $name  \u952e\u540d\u6216\u6570\u7ec4\n     * @param mixed $value \u503c\n     */\n    protected function assignconfig($name, $value = '')\n    {\n        $this->view->config = array_merge($this->view->config ? $this->view->config : [], is_array($name) ? $name : [$name => $value]);\n    }\n\n    /**\n     * \u751f\u6210\u67e5\u8be2\u6240\u9700\u8981\u7684\u6761\u4ef6,\u6392\u5e8f\u65b9\u5f0f\n     * @param mixed   $searchfields   \u5feb\u901f\u67e5\u8be2\u7684\u5b57\u6bb5\n     * @param boolean $relationSearch \u662f\u5426\u5173\u8054\u67e5\u8be2\n     * @return array\n     */\n    protected function buildparams($searchfields = null, $relationSearch = null)\n    {\n        $searchfields = is_null($searchfields) ? $this->searchFields : $searchfields;\n        $relationSearch = is_null($relationSearch) ? $this->relationSearch : $relationSearch;\n        $search = $this->request->get(\"search\", '');\n        $filter = $this->request->get(\"filter\", '');\n        $op = $this->request->get(\"op\", '', 'trim');\n        $sort = $this->request->get(\"sort\", !empty($this->model) && $this->model->getPk() ? $this->model->getPk() : 'id');\n        $order = $this->request->get(\"order\", \"DESC\");\n        $offset = $this->request->get(\"offset\", 0);\n        $limit = $this->request->get(\"limit\", 0);\n        $filter = (array)json_decode($filter, true);\n        $op = (array)json_decode($op, true);\n        $filter = $filter ? $filter : [];\n        $where = [];\n        $tableName = '';\n        if ($relationSearch) {\n            if (!empty($this->model)) {\n                $name = \\think\\Loader::parseName(basename(str_replace('\\\\', '/', get_class($this->model))));\n                $name = $this->model->getTable();\n                $tableName = $name . '.';\n            }\n            $sortArr = explode(',', $sort);\n            foreach ($sortArr as $index => & $item) {\n                $item = stripos($item, \".\") === false ? $tableName . trim($item) : $item;\n            }\n            unset($item);\n            $sort = implode(',', $sortArr);\n        }\n        $adminIds = $this->getDataLimitAdminIds();\n        if (is_array($adminIds)) {\n            $where[] = [$tableName . $this->dataLimitField, 'in', $adminIds];\n        }\n        if ($search) {\n            $searcharr = is_array($searchfields) ? $searchfields : explode(',', $searchfields);\n            foreach ($searcharr as $k => &$v) {\n                $v = stripos($v, \".\") === false ? $tableName . $v : $v;\n            }\n            unset($v);\n            $where[] = [implode(\"|\", $searcharr), \"LIKE\", \"%{$search}%\"];\n        }\n        foreach ($filter as $k => $v) {\n            $sym = isset($op[$k]) ? $op[$k] : '=';\n            if (stripos($k, \".\") === false) {\n                $k = $tableName . $k;\n            }\n            $v = !is_array($v) ? trim($v) : $v;\n            $sym = strtoupper(isset($op[$k]) ? $op[$k] : $sym);\n            switch ($sym) {\n                case '=':\n                case '<>':\n                    $where[] = [$k, $sym, (string)$v];\n                    break;\n                case 'LIKE':\n                case 'NOT LIKE':\n                case 'LIKE %...%':\n                case 'NOT LIKE %...%':\n                    $where[] = [$k, trim(str_replace('%...%', '', $sym)), \"%{$v}%\"];\n                    break;\n                case '>':\n                case '>=':\n                case '<':\n                case '<=':\n                    $where[] = [$k, $sym, intval($v)];\n                    break;\n                case 'FINDIN':\n                case 'FINDINSET':\n                case 'FIND_IN_SET':\n                    $where[] = \"FIND_IN_SET('{$v}', \" . ($relationSearch ? $k : '`' . str_replace('.', '`.`', $k) . '`') . \")\";\n                    break;\n                case 'IN':\n                case 'IN(...)':\n                case 'NOT IN':\n                case 'NOT IN(...)':\n                    $where[] = [$k, str_replace('(...)', '', $sym), is_array($v) ? $v : explode(',', $v)];\n                    break;\n                case 'BETWEEN':\n                case 'NOT BETWEEN':\n                    $arr = array_slice(explode(',', $v), 0, 2);\n                    if (stripos($v, ',') === false || !array_filter($arr)) {\n                        continue 2;\n                    }\n                    //\u5f53\u51fa\u73b0\u4e00\u8fb9\u4e3a\u7a7a\u65f6\u6539\u53d8\u64cd\u4f5c\u7b26\n                    if ($arr[0] === '') {\n                        $sym = $sym == 'BETWEEN' ? '<=' : '>';\n                        $arr = $arr[1];\n                    } elseif ($arr[1] === '') {\n                        $sym = $sym == 'BETWEEN' ? '>=' : '<';\n                        $arr = $arr[0];\n                    }\n                    $where[] = [$k, $sym, $arr];\n                    break;\n                case 'RANGE':\n                case 'NOT RANGE':\n                    $v = str_replace(' - ', ',', $v);\n                    $arr = array_slice(explode(',', $v), 0, 2);\n                    if (stripos($v, ',') === false || !array_filter($arr)) {\n                        continue 2;\n                    }\n                    //\u5f53\u51fa\u73b0\u4e00\u8fb9\u4e3a\u7a7a\u65f6\u6539\u53d8\u64cd\u4f5c\u7b26\n                    if ($arr[0] === '') {\n                        $sym = $sym == 'RANGE' ? '<=' : '>';\n                        $arr = $arr[1];\n                    } elseif ($arr[1] === '') {\n                        $sym = $sym == 'RANGE' ? '>=' : '<';\n                        $arr = $arr[0];\n                    }\n                    $where[] = [$k, str_replace('RANGE', 'BETWEEN', $sym) . ' time', $arr];\n                    break;\n                case 'LIKE':\n                case 'LIKE %...%':\n                    $where[] = [$k, 'LIKE', \"%{$v}%\"];\n                    break;\n                case 'NULL':\n                case 'IS NULL':\n                case 'NOT NULL':\n                case 'IS NOT NULL':\n                    $where[] = [$k, strtolower(str_replace('IS ', '', $sym))];\n                    break;\n                default:\n                    break;\n            }\n        }\n        $where = function ($query) use ($where) {\n            foreach ($where as $k => $v) {\n                if (is_array($v)) {\n                    call_user_func_array([$query, 'where'], $v);\n                } else {\n                    $query->where($v);\n                }\n            }\n        };\n        return [$where, $sort, $order, $offset, $limit];\n    }\n\n    /**\n     * \u83b7\u53d6\u6570\u636e\u9650\u5236\u7684\u7ba1\u7406\u5458ID\n     * \u7981\u7528\u6570\u636e\u9650\u5236\u65f6\u8fd4\u56de\u7684\u662fnull\n     * @return mixed\n     */\n    protected function getDataLimitAdminIds()\n    {\n        if (!$this->dataLimit) {\n            return null;\n        }\n        if ($this->auth->isSuperAdmin()) {\n            return null;\n        }\n        $adminIds = [];\n        if (in_array($this->dataLimit, ['auth', 'personal'])) {\n            $adminIds = $this->dataLimit == 'auth' ? $this->auth->getChildrenAdminIds(true) : [$this->auth->id];\n        }\n        return $adminIds;\n    }\n\n    /**\n     * Selectpage\u7684\u5b9e\u73b0\u65b9\u6cd5\n     *\n     * \u5f53\u524d\u65b9\u6cd5\u53ea\u662f\u4e00\u4e2a\u6bd4\u8f83\u901a\u7528\u7684\u641c\u7d22\u5339\u914d,\u8bf7\u6309\u9700\u91cd\u8f7d\u6b64\u65b9\u6cd5\u6765\u7f16\u5199\u81ea\u5df1\u7684\u641c\u7d22\u903b\u8f91,$where\u6309\u81ea\u5df1\u7684\u9700\u6c42\u5199\u5373\u53ef\n     * \u8fd9\u91cc\u793a\u4f8b\u4e86\u6240\u6709\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u6bd4\u8f83\u590d\u6742\uff0c\u5b9e\u73b0\u4e0a\u81ea\u5df1\u5b9e\u73b0\u53ea\u9700\u7b80\u5355\u7684\u51e0\u884c\u5373\u53ef\n     *\n     */\n    protected function selectpage()\n    {\n        //\u8bbe\u7f6e\u8fc7\u6ee4\u65b9\u6cd5\n        $this->request->filter(['strip_tags', 'htmlspecialchars']);\n\n        //\u641c\u7d22\u5173\u952e\u8bcd,\u5ba2\u6237\u7aef\u8f93\u5165\u4ee5\u7a7a\u683c\u5206\u5f00,\u8fd9\u91cc\u63a5\u6536\u4e3a\u6570\u7ec4\n        $word = (array)$this->request->request(\"q_word/a\");\n        //\u5f53\u524d\u9875\n        $page = $this->request->request(\"pageNumber\");\n        //\u5206\u9875\u5927\u5c0f\n        $pagesize = $this->request->request(\"pageSize\");\n        //\u641c\u7d22\u6761\u4ef6\n        $andor = $this->request->request(\"andOr\", \"and\", \"strtoupper\");\n        //\u6392\u5e8f\u65b9\u5f0f\n        $orderby = (array)$this->request->request(\"orderBy/a\");\n        //\u663e\u793a\u7684\u5b57\u6bb5\n        $field = $this->request->request(\"showField\");\n        //\u4e3b\u952e\n        $primarykey = $this->request->request(\"keyField\");\n        //\u4e3b\u952e\u503c\n        $primaryvalue = $this->request->request(\"keyValue\");\n        //\u641c\u7d22\u5b57\u6bb5\n        $searchfield = (array)$this->request->request(\"searchField/a\");\n        //\u81ea\u5b9a\u4e49\u641c\u7d22\u6761\u4ef6\n        $custom = (array)$this->request->request(\"custom/a\");\n        //\u662f\u5426\u8fd4\u56de\u6811\u5f62\u7ed3\u6784\n        $istree = $this->request->request(\"isTree\", 0);\n        $ishtml = $this->request->request(\"isHtml\", 0);\n        if ($istree) {\n            $word = [];\n            $pagesize = 99999;\n        }\n        $order = [];\n        foreach ($orderby as $k => $v) {\n            $order[$v[0]] = $v[1];\n        }\n        $field = $field ? $field : 'name';\n\n        //\u5982\u679c\u6709primaryvalue,\u8bf4\u660e\u5f53\u524d\u662f\u521d\u59cb\u5316\u4f20\u503c\n        if ($primaryvalue !== null) {\n            $where = [$primarykey => ['in', $primaryvalue]];\n        } else {\n            $where = function ($query) use ($word, $andor, $field, $searchfield, $custom) {\n                $logic = $andor == 'AND' ? '&' : '|';\n                $searchfield = is_array($searchfield) ? implode($logic, $searchfield) : $searchfield;\n                foreach ($word as $k => $v) {\n                    $query->where(str_replace(',', $logic, $searchfield), \"like\", \"%{$v}%\");\n                }\n                if ($custom && is_array($custom)) {\n                    foreach ($custom as $k => $v) {\n                        if (is_array($v) && 2 == count($v)) {\n                            $query->where($k, trim($v[0]), $v[1]);\n                        } else {\n                            $query->where($k, '=', $v);\n                        }\n                    }\n                }\n            };\n        }\n        $adminIds = $this->getDataLimitAdminIds();\n        if (is_array($adminIds)) {\n            $this->model->where($this->dataLimitField, 'in', $adminIds);\n        }\n        $list = [];\n        $total = $this->model->where($where)->count();\n        if ($total > 0) {\n            if (is_array($adminIds)) {\n                $this->model->where($this->dataLimitField, 'in', $adminIds);\n            }\n            $datalist = $this->model->where($where)\n                ->order($order)\n                ->page($page, $pagesize)\n                ->field($this->selectpageFields)\n                ->select();\n            foreach ($datalist as $index => $item) {\n                unset($item['password'], $item['salt']);\n                $list[] = [\n                    $primarykey => isset($item[$primarykey]) ? $item[$primarykey] : '',\n                    $field      => isset($item[$field]) ? $item[$field] : '',\n                    'pid'       => isset($item['pid']) ? $item['pid'] : 0\n                ];\n            }\n            if ($istree && !$primaryvalue) {\n                $tree = Tree::instance();\n                $tree->init(collection($list)->toArray(), 'pid');\n                $list = $tree->getTreeList($tree->getTreeArray(0), $field);\n                if (!$ishtml) {\n                    foreach ($list as &$item) {\n                        $item = str_replace('&nbsp;', ' ', $item);\n                    }\n                    unset($item);\n                }\n            }\n        }\n        //\u8fd9\u91cc\u4e00\u5b9a\u8981\u8fd4\u56de\u6709list\u8fd9\u4e2a\u5b57\u6bb5,total\u662f\u53ef\u9009\u7684,\u5982\u679ctotal<=list\u7684\u6570\u91cf,\u5219\u4f1a\u9690\u85cf\u5206\u9875\u6309\u94ae\n        return json(['list' => $list, 'total' => $total]);\n    }\n\n    /**\n     * \u5237\u65b0Token\n     */\n    protected function token()\n    {\n        $token = $this->request->post('__token__');\n\n        //\u9a8c\u8bc1Token\n        if (!Validate::is($token, \"token\", ['__token__' => $token])) {\n            $this->error(__('Token verification error'), '', ['__token__' => $this->request->token()]);\n        }\n\n        //\u5237\u65b0Token\n        $this->request->token();\n    }\n}\n", "<?php\n\nnamespace app\\index\\controller;\n\nuse addons\\wechat\\model\\WechatCaptcha;\nuse app\\common\\controller\\Frontend;\nuse app\\common\\library\\Ems;\nuse app\\common\\library\\Sms;\nuse think\\Config;\nuse think\\Cookie;\nuse think\\Hook;\nuse think\\Session;\nuse think\\Validate;\n\n/**\n * \u4f1a\u5458\u4e2d\u5fc3\n */\nclass User extends Frontend\n{\n    protected $layout = 'default';\n    protected $noNeedLogin = ['login', 'register', 'third'];\n    protected $noNeedRight = ['*'];\n\n    public function _initialize()\n    {\n        parent::_initialize();\n        $auth = $this->auth;\n\n        if (!Config::get('fastadmin.usercenter')) {\n            $this->error(__('User center already closed'));\n        }\n\n        //\u76d1\u542c\u6ce8\u518c\u767b\u5f55\u6ce8\u9500\u7684\u4e8b\u4ef6\n        Hook::add('user_login_successed', function ($user) use ($auth) {\n            $expire = input('post.keeplogin') ? 30 * 86400 : 0;\n            Cookie::set('uid', $user->id, $expire);\n            Cookie::set('token', $auth->getToken(), $expire);\n        });\n        Hook::add('user_register_successed', function ($user) use ($auth) {\n            Cookie::set('uid', $user->id);\n            Cookie::set('token', $auth->getToken());\n        });\n        Hook::add('user_delete_successed', function ($user) use ($auth) {\n            Cookie::delete('uid');\n            Cookie::delete('token');\n        });\n        Hook::add('user_logout_successed', function ($user) use ($auth) {\n            Cookie::delete('uid');\n            Cookie::delete('token');\n        });\n    }\n\n    /**\n     * \u7a7a\u7684\u8bf7\u6c42\n     * @param $name\n     * @return mixed\n     */\n    public function _empty($name)\n    {\n        $data = Hook::listen(\"user_request_empty\", $name);\n        foreach ($data as $index => $datum) {\n            $this->view->assign($datum);\n        }\n        return $this->view->fetch('user/' . $name);\n    }\n\n    /**\n     * \u4f1a\u5458\u4e2d\u5fc3\n     */\n    public function index()\n    {\n        $this->view->assign('title', __('User center'));\n        return $this->view->fetch();\n    }\n\n    /**\n     * \u6ce8\u518c\u4f1a\u5458\n     */\n    public function register()\n    {\n        $url = $this->request->request('url', '');\n        if ($this->auth->id) {\n            $this->success(__('You\\'ve logged in, do not login again'), $url ? $url : url('user/index'));\n        }\n        if ($this->request->isPost()) {\n            $username = $this->request->post('username');\n            $password = $this->request->post('password');\n            $email = $this->request->post('email');\n            $mobile = $this->request->post('mobile', '');\n            $captcha = $this->request->post('captcha');\n            $token = $this->request->post('__token__');\n            $rule = [\n                'username'  => 'require|length:3,30',\n                'password'  => 'require|length:6,30',\n                'email'     => 'require|email',\n                'mobile'    => 'regex:/^1\\d{10}$/',\n                '__token__' => 'require|token',\n            ];\n\n            $msg = [\n                'username.require' => 'Username can not be empty',\n                'username.length'  => 'Username must be 3 to 30 characters',\n                'password.require' => 'Password can not be empty',\n                'password.length'  => 'Password must be 6 to 30 characters',\n                'email'            => 'Email is incorrect',\n                'mobile'           => 'Mobile is incorrect',\n            ];\n            $data = [\n                'username'  => $username,\n                'password'  => $password,\n                'email'     => $email,\n                'mobile'    => $mobile,\n                '__token__' => $token,\n            ];\n            //\u9a8c\u8bc1\u7801\n            $captchaResult = true;\n            $captchaType = config(\"fastadmin.user_register_captcha\");\n            if ($captchaType) {\n                if ($captchaType == 'mobile') {\n                    $captchaResult = Sms::check($mobile, $captcha, 'register');\n                } elseif ($captchaType == 'email') {\n                    $captchaResult = Ems::check($mobile, $captcha, 'register');\n                } elseif ($captchaType == 'wechat') {\n                    $captchaResult = WechatCaptcha::check($captcha, 'register');\n                } elseif ($captchaType == 'text') {\n                    $captchaResult = \\think\\Validate::is($captcha, 'captcha');\n                }\n            }\n            if (!$captchaResult) {\n                $this->error(__('Captcha is incorrect'));\n            }\n            $validate = new Validate($rule, $msg);\n            $result = $validate->check($data);\n            if (!$result) {\n                $this->error(__($validate->getError()), null, ['token' => $this->request->token()]);\n            }\n            if ($this->auth->register($username, $password, $email, $mobile)) {\n                $this->success(__('Sign up successful'), $url ? $url : url('user/index'));\n            } else {\n                $this->error($this->auth->getError(), null, ['token' => $this->request->token()]);\n            }\n        }\n        //\u5224\u65ad\u6765\u6e90\n        $referer = $this->request->server('HTTP_REFERER');\n        if (!$url && (strtolower(parse_url($referer, PHP_URL_HOST)) == strtolower($this->request->host()))\n            && !preg_match(\"/(user\\/login|user\\/register|user\\/logout)/i\", $referer)) {\n            $url = $referer;\n        }\n        $this->view->assign('captchaType', config('fastadmin.user_register_captcha'));\n        $this->view->assign('url', $url);\n        $this->view->assign('title', __('Register'));\n        return $this->view->fetch();\n    }\n\n    /**\n     * \u4f1a\u5458\u767b\u5f55\n     */\n    public function login()\n    {\n        $url = $this->request->request('url', '');\n        if ($this->auth->id) {\n            $this->success(__('You\\'ve logged in, do not login again'), $url ? $url : url('user/index'));\n        }\n        if ($this->request->isPost()) {\n            $account = $this->request->post('account');\n            $password = $this->request->post('password');\n            $keeplogin = (int)$this->request->post('keeplogin');\n            $token = $this->request->post('__token__');\n            $rule = [\n                'account'   => 'require|length:3,50',\n                'password'  => 'require|length:6,30',\n                '__token__' => 'require|token',\n            ];\n\n            $msg = [\n                'account.require'  => 'Account can not be empty',\n                'account.length'   => 'Account must be 3 to 50 characters',\n                'password.require' => 'Password can not be empty',\n                'password.length'  => 'Password must be 6 to 30 characters',\n            ];\n            $data = [\n                'account'   => $account,\n                'password'  => $password,\n                '__token__' => $token,\n            ];\n            $validate = new Validate($rule, $msg);\n            $result = $validate->check($data);\n            if (!$result) {\n                $this->error(__($validate->getError()), null, ['token' => $this->request->token()]);\n                return false;\n            }\n            if ($this->auth->login($account, $password)) {\n                $this->success(__('Logged in successful'), $url ? $url : url('user/index'));\n            } else {\n                $this->error($this->auth->getError(), null, ['token' => $this->request->token()]);\n            }\n        }\n        //\u5224\u65ad\u6765\u6e90\n        $referer = $this->request->server('HTTP_REFERER');\n        if (!$url && (strtolower(parse_url($referer, PHP_URL_HOST)) == strtolower($this->request->host()))\n            && !preg_match(\"/(user\\/login|user\\/register|user\\/logout)/i\", $referer)) {\n            $url = $referer;\n        }\n        $this->view->assign('url', $url);\n        $this->view->assign('title', __('Login'));\n        return $this->view->fetch();\n    }\n\n    /**\n     * \u6ce8\u9500\u767b\u5f55\n     */\n    public function logout()\n    {\n        //\u6ce8\u9500\u672c\u7ad9\n        $this->auth->logout();\n        $this->success(__('Logout successful'), url('user/index'));\n    }\n\n    /**\n     * \u4e2a\u4eba\u4fe1\u606f\n     */\n    public function profile()\n    {\n        $this->view->assign('title', __('Profile'));\n        return $this->view->fetch();\n    }\n\n    /**\n     * \u4fee\u6539\u5bc6\u7801\n     */\n    public function changepwd()\n    {\n        if ($this->request->isPost()) {\n            $oldpassword = $this->request->post(\"oldpassword\");\n            $newpassword = $this->request->post(\"newpassword\");\n            $renewpassword = $this->request->post(\"renewpassword\");\n            $token = $this->request->post('__token__');\n            $rule = [\n                'oldpassword'   => 'require|length:6,30',\n                'newpassword'   => 'require|length:6,30',\n                'renewpassword' => 'require|length:6,30|confirm:newpassword',\n                '__token__'     => 'token',\n            ];\n\n            $msg = [\n            ];\n            $data = [\n                'oldpassword'   => $oldpassword,\n                'newpassword'   => $newpassword,\n                'renewpassword' => $renewpassword,\n                '__token__'     => $token,\n            ];\n            $field = [\n                'oldpassword'   => __('Old password'),\n                'newpassword'   => __('New password'),\n                'renewpassword' => __('Renew password')\n            ];\n            $validate = new Validate($rule, $msg, $field);\n            $result = $validate->check($data);\n            if (!$result) {\n                $this->error(__($validate->getError()), null, ['token' => $this->request->token()]);\n                return false;\n            }\n\n            $ret = $this->auth->changepwd($newpassword, $oldpassword);\n            if ($ret) {\n                $this->success(__('Reset password successful'), url('user/login'));\n            } else {\n                $this->error($this->auth->getError(), null, ['token' => $this->request->token()]);\n            }\n        }\n        $this->view->assign('title', __('Change password'));\n        return $this->view->fetch();\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace app\\admin\\controller;\n\nuse app\\common\\controller\\Backend;\nuse fast\\Random;\nuse think\\addons\\Service;\nuse think\\Cache;\nuse think\\Config;\nuse think\\Db;\nuse think\\Lang;\nuse think\\Validate;\n\n/**\n * Ajax\u5f02\u6b65\u8bf7\u6c42\u63a5\u53e3\n * @internal\n */\nclass Ajax extends Backend\n{\n\n    protected $noNeedLogin = ['lang'];\n    protected $noNeedRight = ['*'];\n    protected $layout = '';\n\n    public function _initialize()\n    {\n        parent::_initialize();\n\n        //\u8bbe\u7f6e\u8fc7\u6ee4\u65b9\u6cd5\n        $this->request->filter(['strip_tags', 'htmlspecialchars']);\n    }\n\n    /**\n     * \u52a0\u8f7d\u8bed\u8a00\u5305\n     */\n    public function lang()\n    {\n        header('Content-Type: application/javascript');\n        $controllername = input(\"controllername\");\n        //\u9ed8\u8ba4\u53ea\u52a0\u8f7d\u4e86\u63a7\u5236\u5668\u5bf9\u5e94\u7684\u8bed\u8a00\u540d\uff0c\u4f60\u8fd8\u6839\u636e\u63a7\u5236\u5668\u540d\u6765\u52a0\u8f7d\u989d\u5916\u7684\u8bed\u8a00\u5305\n        $this->loadlang($controllername);\n        return jsonp(Lang::get(), 200, [], ['json_encode_param' => JSON_FORCE_OBJECT | JSON_UNESCAPED_UNICODE]);\n    }\n\n    /**\n     * \u4e0a\u4f20\u6587\u4ef6\n     */\n    public function upload()\n    {\n        Config::set('default_return_type', 'json');\n        $file = $this->request->file('file');\n        if (empty($file)) {\n            $this->error(__('No file upload or server upload limit exceeded'));\n        }\n\n        //\u5224\u65ad\u662f\u5426\u5df2\u7ecf\u5b58\u5728\u9644\u4ef6\n        $sha1 = $file->hash();\n        $extparam = $this->request->post();\n\n        $upload = Config::get('upload');\n\n        preg_match('/(\\d+)(\\w+)/', $upload['maxsize'], $matches);\n        $type = strtolower($matches[2]);\n        $typeDict = ['b' => 0, 'k' => 1, 'kb' => 1, 'm' => 2, 'mb' => 2, 'gb' => 3, 'g' => 3];\n        $size = (int)$upload['maxsize'] * pow(1024, isset($typeDict[$type]) ? $typeDict[$type] : 0);\n        $fileInfo = $file->getInfo();\n        $suffix = strtolower(pathinfo($fileInfo['name'], PATHINFO_EXTENSION));\n        $suffix = $suffix && preg_match(\"/^[a-zA-Z0-9]+$/\", $suffix) ? $suffix : 'file';\n\n        $mimetypeArr = explode(',', strtolower($upload['mimetype']));\n        $typeArr = explode('/', $fileInfo['type']);\n\n        //\u7981\u6b62\u4e0a\u4f20PHP\u548cHTML\u6587\u4ef6\n        if (in_array($fileInfo['type'], ['text/x-php', 'text/html']) || in_array($suffix, ['php', 'html', 'htm'])) {\n            $this->error(__('Uploaded file format is limited'));\n        }\n        //\u9a8c\u8bc1\u6587\u4ef6\u540e\u7f00\n        if ($upload['mimetype'] !== '*' &&\n            (\n                !in_array($suffix, $mimetypeArr)\n                || (stripos($typeArr[0] . '/', $upload['mimetype']) !== false && (!in_array($fileInfo['type'], $mimetypeArr) && !in_array($typeArr[0] . '/*', $mimetypeArr)))\n            )\n        ) {\n            $this->error(__('Uploaded file format is limited'));\n        }\n        //\u9a8c\u8bc1\u662f\u5426\u4e3a\u56fe\u7247\u6587\u4ef6\n        $imagewidth = $imageheight = 0;\n        if (in_array($fileInfo['type'], ['image/gif', 'image/jpg', 'image/jpeg', 'image/bmp', 'image/png', 'image/webp']) || in_array($suffix, ['gif', 'jpg', 'jpeg', 'bmp', 'png', 'webp'])) {\n            $imgInfo = getimagesize($fileInfo['tmp_name']);\n            if (!$imgInfo || !isset($imgInfo[0]) || !isset($imgInfo[1])) {\n                $this->error(__('Uploaded file is not a valid image'));\n            }\n            $imagewidth = isset($imgInfo[0]) ? $imgInfo[0] : $imagewidth;\n            $imageheight = isset($imgInfo[1]) ? $imgInfo[1] : $imageheight;\n        }\n        $replaceArr = [\n            '{year}'     => date(\"Y\"),\n            '{mon}'      => date(\"m\"),\n            '{day}'      => date(\"d\"),\n            '{hour}'     => date(\"H\"),\n            '{min}'      => date(\"i\"),\n            '{sec}'      => date(\"s\"),\n            '{random}'   => Random::alnum(16),\n            '{random32}' => Random::alnum(32),\n            '{filename}' => $suffix ? substr($fileInfo['name'], 0, strripos($fileInfo['name'], '.')) : $fileInfo['name'],\n            '{suffix}'   => $suffix,\n            '{.suffix}'  => $suffix ? '.' . $suffix : '',\n            '{filemd5}'  => md5_file($fileInfo['tmp_name']),\n        ];\n        $savekey = $upload['savekey'];\n        $savekey = str_replace(array_keys($replaceArr), array_values($replaceArr), $savekey);\n\n        $uploadDir = substr($savekey, 0, strripos($savekey, '/') + 1);\n        $fileName = substr($savekey, strripos($savekey, '/') + 1);\n        //\n        $splInfo = $file->validate(['size' => $size])->move(ROOT_PATH . '/public' . $uploadDir, $fileName);\n        if ($splInfo) {\n            $params = array(\n                'admin_id'    => (int)$this->auth->id,\n                'user_id'     => 0,\n                'filesize'    => $fileInfo['size'],\n                'imagewidth'  => $imagewidth,\n                'imageheight' => $imageheight,\n                'imagetype'   => $suffix,\n                'imageframes' => 0,\n                'mimetype'    => $fileInfo['type'],\n                'url'         => $uploadDir . $splInfo->getSaveName(),\n                'uploadtime'  => time(),\n                'storage'     => 'local',\n                'sha1'        => $sha1,\n                'extparam'    => json_encode($extparam),\n            );\n            $attachment = model(\"attachment\");\n            $attachment->data(array_filter($params));\n            $attachment->save();\n            \\think\\Hook::listen(\"upload_after\", $attachment);\n            $this->success(__('Upload successful'), null, [\n                'url' => $uploadDir . $splInfo->getSaveName()\n            ]);\n        } else {\n            // \u4e0a\u4f20\u5931\u8d25\u83b7\u53d6\u9519\u8bef\u4fe1\u606f\n            $this->error($file->getError());\n        }\n    }\n\n    /**\n     * \u901a\u7528\u6392\u5e8f\n     */\n    public function weigh()\n    {\n        //\u6392\u5e8f\u7684\u6570\u7ec4\n        $ids = $this->request->post(\"ids\");\n        //\u62d6\u52a8\u7684\u8bb0\u5f55ID\n        $changeid = $this->request->post(\"changeid\");\n        //\u64cd\u4f5c\u5b57\u6bb5\n        $field = $this->request->post(\"field\");\n        //\u64cd\u4f5c\u7684\u6570\u636e\u8868\n        $table = $this->request->post(\"table\");\n        if (!Validate::is($table, \"alphaDash\")) {\n            $this->error();\n        }\n        //\u4e3b\u952e\n        $pk = $this->request->post(\"pk\");\n        //\u6392\u5e8f\u7684\u65b9\u5f0f\n        $orderway = strtolower($this->request->post(\"orderway\", \"\"));\n        $orderway = $orderway == 'asc' ? 'ASC' : 'DESC';\n        $sour = $weighdata = [];\n        $ids = explode(',', $ids);\n        $prikey = $pk ? $pk : (Db::name($table)->getPk() ?: 'id');\n        $pid = $this->request->post(\"pid\");\n        //\u9650\u5236\u66f4\u65b0\u7684\u5b57\u6bb5\n        $field = in_array($field, ['weigh']) ? $field : 'weigh';\n\n        // \u5982\u679c\u8bbe\u5b9a\u4e86pid\u7684\u503c,\u6b64\u65f6\u53ea\u5339\u914d\u6ee1\u8db3\u6761\u4ef6\u7684ID,\u5176\u5b83\u5ffd\u7565\n        if ($pid !== '') {\n            $hasids = [];\n            $list = Db::name($table)->where($prikey, 'in', $ids)->where('pid', 'in', $pid)->field(\"{$prikey},pid\")->select();\n            foreach ($list as $k => $v) {\n                $hasids[] = $v[$prikey];\n            }\n            $ids = array_values(array_intersect($ids, $hasids));\n        }\n\n        $list = Db::name($table)->field(\"$prikey,$field\")->where($prikey, 'in', $ids)->order($field, $orderway)->select();\n        foreach ($list as $k => $v) {\n            $sour[] = $v[$prikey];\n            $weighdata[$v[$prikey]] = $v[$field];\n        }\n        $position = array_search($changeid, $ids);\n        $desc_id = $sour[$position];    //\u79fb\u52a8\u5230\u76ee\u6807\u7684ID\u503c,\u53d6\u51fa\u6240\u5904\u6539\u53d8\u524d\u4f4d\u7f6e\u7684\u503c\n        $sour_id = $changeid;\n        $weighids = array();\n        $temp = array_values(array_diff_assoc($ids, $sour));\n        foreach ($temp as $m => $n) {\n            if ($n == $sour_id) {\n                $offset = $desc_id;\n            } else {\n                if ($sour_id == $temp[0]) {\n                    $offset = isset($temp[$m + 1]) ? $temp[$m + 1] : $sour_id;\n                } else {\n                    $offset = isset($temp[$m - 1]) ? $temp[$m - 1] : $sour_id;\n                }\n            }\n            $weighids[$n] = $weighdata[$offset];\n            Db::name($table)->where($prikey, $n)->update([$field => $weighdata[$offset]]);\n        }\n        $this->success();\n    }\n\n    /**\n     * \u6e05\u7a7a\u7cfb\u7edf\u7f13\u5b58\n     */\n    public function wipecache()\n    {\n        $type = $this->request->request(\"type\");\n        switch ($type) {\n            case 'all':\n            case 'content':\n                rmdirs(CACHE_PATH, false);\n                Cache::clear();\n                if ($type == 'content') {\n                    break;\n                }\n            case 'template':\n                rmdirs(TEMP_PATH, false);\n                if ($type == 'template') {\n                    break;\n                }\n            case 'addons':\n                Service::refresh();\n                if ($type == 'addons') {\n                    break;\n                }\n        }\n\n        \\think\\Hook::listen(\"wipecache_after\");\n        $this->success();\n    }\n\n    /**\n     * \u8bfb\u53d6\u5206\u7c7b\u6570\u636e,\u8054\u52a8\u5217\u8868\n     */\n    public function category()\n    {\n        $type = $this->request->get('type');\n        $pid = $this->request->get('pid');\n        $where = ['status' => 'normal'];\n        $categorylist = null;\n        if ($pid !== '') {\n            if ($type) {\n                $where['type'] = $type;\n            }\n            if ($pid) {\n                $where['pid'] = $pid;\n            }\n\n            $categorylist = Db::name('category')->where($where)->field('id as value,name')->order('weigh desc,id desc')->select();\n        }\n        $this->success('', null, $categorylist);\n    }\n\n    /**\n     * \u8bfb\u53d6\u7701\u5e02\u533a\u6570\u636e,\u8054\u52a8\u5217\u8868\n     */\n    public function area()\n    {\n        $params = $this->request->get(\"row/a\");\n        if (!empty($params)) {\n            $province = isset($params['province']) ? $params['province'] : '';\n            $city = isset($params['city']) ? $params['city'] : null;\n        } else {\n            $province = $this->request->get('province');\n            $city = $this->request->get('city');\n        }\n        $where = ['pid' => 0, 'level' => 1];\n        $provincelist = null;\n        if ($province !== '') {\n            if ($province) {\n                $where['pid'] = $province;\n                $where['level'] = 2;\n            }\n            if ($city !== '') {\n                if ($city) {\n                    $where['pid'] = $city;\n                    $where['level'] = 3;\n                }\n                $provincelist = Db::name('area')->where($where)->field('id as value,name')->select();\n            }\n        }\n        $this->success('', null, $provincelist);\n    }\n\n}\n", "<?php\n\nnamespace app\\common\\controller;\n\nuse app\\admin\\library\\Auth;\nuse think\\Config;\nuse think\\Controller;\nuse think\\Hook;\nuse think\\Lang;\nuse think\\Loader;\nuse think\\Session;\nuse fast\\Tree;\nuse think\\Validate;\n\n/**\n * \u540e\u53f0\u63a7\u5236\u5668\u57fa\u7c7b\n */\nclass Backend extends Controller\n{\n\n    /**\n     * \u65e0\u9700\u767b\u5f55\u7684\u65b9\u6cd5,\u540c\u65f6\u4e5f\u5c31\u4e0d\u9700\u8981\u9274\u6743\u4e86\n     * @var array\n     */\n    protected $noNeedLogin = [];\n\n    /**\n     * \u65e0\u9700\u9274\u6743\u7684\u65b9\u6cd5,\u4f46\u9700\u8981\u767b\u5f55\n     * @var array\n     */\n    protected $noNeedRight = [];\n\n    /**\n     * \u5e03\u5c40\u6a21\u677f\n     * @var string\n     */\n    protected $layout = 'default';\n\n    /**\n     * \u6743\u9650\u63a7\u5236\u7c7b\n     * @var Auth\n     */\n    protected $auth = null;\n\n    /**\n     * \u6a21\u578b\u5bf9\u8c61\n     * @var \\think\\Model\n     */\n    protected $model = null;\n\n    /**\n     * \u5feb\u901f\u641c\u7d22\u65f6\u6267\u884c\u67e5\u627e\u7684\u5b57\u6bb5\n     */\n    protected $searchFields = 'id';\n\n    /**\n     * \u662f\u5426\u662f\u5173\u8054\u67e5\u8be2\n     */\n    protected $relationSearch = false;\n\n    /**\n     * \u662f\u5426\u5f00\u542f\u6570\u636e\u9650\u5236\n     * \u652f\u6301auth/personal\n     * \u8868\u793a\u6309\u6743\u9650\u5224\u65ad/\u4ec5\u9650\u4e2a\u4eba\n     * \u9ed8\u8ba4\u4e3a\u7981\u7528,\u82e5\u542f\u7528\u8bf7\u52a1\u5fc5\u4fdd\u8bc1\u8868\u4e2d\u5b58\u5728admin_id\u5b57\u6bb5\n     */\n    protected $dataLimit = false;\n\n    /**\n     * \u6570\u636e\u9650\u5236\u5b57\u6bb5\n     */\n    protected $dataLimitField = 'admin_id';\n\n    /**\n     * \u6570\u636e\u9650\u5236\u5f00\u542f\u65f6\u81ea\u52a8\u586b\u5145\u9650\u5236\u5b57\u6bb5\u503c\n     */\n    protected $dataLimitFieldAutoFill = true;\n\n    /**\n     * \u662f\u5426\u5f00\u542fValidate\u9a8c\u8bc1\n     */\n    protected $modelValidate = false;\n\n    /**\n     * \u662f\u5426\u5f00\u542f\u6a21\u578b\u573a\u666f\u9a8c\u8bc1\n     */\n    protected $modelSceneValidate = false;\n\n    /**\n     * Multi\u65b9\u6cd5\u53ef\u6279\u91cf\u4fee\u6539\u7684\u5b57\u6bb5\n     */\n    protected $multiFields = 'status';\n\n    /**\n     * Selectpage\u53ef\u663e\u793a\u7684\u5b57\u6bb5\n     */\n    protected $selectpageFields = '*';\n\n    /**\n     * \u524d\u53f0\u63d0\u4ea4\u8fc7\u6765,\u9700\u8981\u6392\u9664\u7684\u5b57\u6bb5\u6570\u636e\n     */\n    protected $excludeFields = \"\";\n\n    /**\n     * \u5bfc\u5165\u6587\u4ef6\u9996\u884c\u7c7b\u578b\n     * \u652f\u6301comment/name\n     * \u8868\u793a\u6ce8\u91ca\u6216\u5b57\u6bb5\u540d\n     */\n    protected $importHeadType = 'comment';\n\n    /**\n     * \u5f15\u5165\u540e\u53f0\u63a7\u5236\u5668\u7684traits\n     */\n    use \\app\\admin\\library\\traits\\Backend;\n\n    public function _initialize()\n    {\n        $modulename = $this->request->module();\n        $controllername = Loader::parseName($this->request->controller());\n        $actionname = strtolower($this->request->action());\n\n        $path = str_replace('.', '/', $controllername) . '/' . $actionname;\n\n        // \u5b9a\u4e49\u662f\u5426Addtabs\u8bf7\u6c42\n        !defined('IS_ADDTABS') && define('IS_ADDTABS', input(\"addtabs\") ? true : false);\n\n        // \u5b9a\u4e49\u662f\u5426Dialog\u8bf7\u6c42\n        !defined('IS_DIALOG') && define('IS_DIALOG', input(\"dialog\") ? true : false);\n\n        // \u5b9a\u4e49\u662f\u5426AJAX\u8bf7\u6c42\n        !defined('IS_AJAX') && define('IS_AJAX', $this->request->isAjax());\n\n        $this->auth = Auth::instance();\n\n        // \u8bbe\u7f6e\u5f53\u524d\u8bf7\u6c42\u7684URI\n        $this->auth->setRequestUri($path);\n        // \u68c0\u6d4b\u662f\u5426\u9700\u8981\u9a8c\u8bc1\u767b\u5f55\n        if (!$this->auth->match($this->noNeedLogin)) {\n            //\u68c0\u6d4b\u662f\u5426\u767b\u5f55\n            if (!$this->auth->isLogin()) {\n                Hook::listen('admin_nologin', $this);\n                $url = Session::get('referer');\n                $url = $url ? $url : $this->request->url();\n                if ($url == '/') {\n                    $this->redirect('index/login', [], 302, ['referer' => $url]);\n                    exit;\n                }\n                $this->error(__('Please login first'), url('index/login', ['url' => $url]));\n            }\n            // \u5224\u65ad\u662f\u5426\u9700\u8981\u9a8c\u8bc1\u6743\u9650\n            if (!$this->auth->match($this->noNeedRight)) {\n                // \u5224\u65ad\u63a7\u5236\u5668\u548c\u65b9\u6cd5\u5224\u65ad\u662f\u5426\u6709\u5bf9\u5e94\u6743\u9650\n                if (!$this->auth->check($path)) {\n                    Hook::listen('admin_nopermission', $this);\n                    $this->error(__('You have no permission'), '');\n                }\n            }\n        }\n\n        // \u975e\u9009\u9879\u5361\u65f6\u91cd\u5b9a\u5411\n        if (!$this->request->isPost() && !IS_AJAX && !IS_ADDTABS && !IS_DIALOG && input(\"ref\") == 'addtabs') {\n            $url = preg_replace_callback(\"/([\\?|&]+)ref=addtabs(&?)/i\", function ($matches) {\n                return $matches[2] == '&' ? $matches[1] : '';\n            }, $this->request->url());\n            if (Config::get('url_domain_deploy')) {\n                if (stripos($url, $this->request->server('SCRIPT_NAME')) === 0) {\n                    $url = substr($url, strlen($this->request->server('SCRIPT_NAME')));\n                }\n                $url = url($url, '', false);\n            }\n            $this->redirect('index/index', [], 302, ['referer' => $url]);\n            exit;\n        }\n\n        // \u8bbe\u7f6e\u9762\u5305\u5c51\u5bfc\u822a\u6570\u636e\n        $breadcrumb = $this->auth->getBreadCrumb($path);\n        array_pop($breadcrumb);\n        $this->view->breadcrumb = $breadcrumb;\n\n        // \u5982\u679c\u6709\u4f7f\u7528\u6a21\u677f\u5e03\u5c40\n        if ($this->layout) {\n            $this->view->engine->layout('layout/' . $this->layout);\n        }\n\n        // \u8bed\u8a00\u68c0\u6d4b\n        $lang = strip_tags($this->request->langset());\n\n        $site = Config::get(\"site\");\n\n        $upload = \\app\\common\\model\\Config::upload();\n\n        // \u4e0a\u4f20\u4fe1\u606f\u914d\u7f6e\u540e\n        Hook::listen(\"upload_config_init\", $upload);\n\n        // \u914d\u7f6e\u4fe1\u606f\n        $config = [\n            'site'           => array_intersect_key($site, array_flip(['name', 'indexurl', 'cdnurl', 'version', 'timezone', 'languages'])),\n            'upload'         => $upload,\n            'modulename'     => $modulename,\n            'controllername' => $controllername,\n            'actionname'     => $actionname,\n            'jsname'         => 'backend/' . str_replace('.', '/', $controllername),\n            'moduleurl'      => rtrim(url(\"/{$modulename}\", '', false), '/'),\n            'language'       => $lang,\n            'fastadmin'      => Config::get('fastadmin'),\n            'referer'        => Session::get(\"referer\")\n        ];\n        $config = array_merge($config, Config::get(\"view_replace_str\"));\n\n        Config::set('upload', array_merge(Config::get('upload'), $upload));\n\n        // \u914d\u7f6e\u4fe1\u606f\u540e\n        Hook::listen(\"config_init\", $config);\n        //\u52a0\u8f7d\u5f53\u524d\u63a7\u5236\u5668\u8bed\u8a00\u5305\n        $this->loadlang($controllername);\n        //\u6e32\u67d3\u7ad9\u70b9\u914d\u7f6e\n        $this->assign('site', $site);\n        //\u6e32\u67d3\u914d\u7f6e\u4fe1\u606f\n        $this->assign('config', $config);\n        //\u6e32\u67d3\u6743\u9650\u5bf9\u8c61\n        $this->assign('auth', $this->auth);\n        //\u6e32\u67d3\u7ba1\u7406\u5458\u5bf9\u8c61\n        $this->assign('admin', Session::get('admin'));\n    }\n\n    /**\n     * \u52a0\u8f7d\u8bed\u8a00\u6587\u4ef6\n     * @param string $name\n     */\n    protected function loadlang($name)\n    {\n        Lang::load(APP_PATH . $this->request->module() . '/lang/' . $this->request->langset() . '/' . str_replace('.', '/', $name) . '.php');\n    }\n\n    /**\n     * \u6e32\u67d3\u914d\u7f6e\u4fe1\u606f\n     * @param mixed $name  \u952e\u540d\u6216\u6570\u7ec4\n     * @param mixed $value \u503c\n     */\n    protected function assignconfig($name, $value = '')\n    {\n        $this->view->config = array_merge($this->view->config ? $this->view->config : [], is_array($name) ? $name : [$name => $value]);\n    }\n\n    /**\n     * \u751f\u6210\u67e5\u8be2\u6240\u9700\u8981\u7684\u6761\u4ef6,\u6392\u5e8f\u65b9\u5f0f\n     * @param mixed   $searchfields   \u5feb\u901f\u67e5\u8be2\u7684\u5b57\u6bb5\n     * @param boolean $relationSearch \u662f\u5426\u5173\u8054\u67e5\u8be2\n     * @return array\n     */\n    protected function buildparams($searchfields = null, $relationSearch = null)\n    {\n        $searchfields = is_null($searchfields) ? $this->searchFields : $searchfields;\n        $relationSearch = is_null($relationSearch) ? $this->relationSearch : $relationSearch;\n        $search = $this->request->get(\"search\", '');\n        $filter = $this->request->get(\"filter\", '');\n        $op = $this->request->get(\"op\", '', 'trim');\n        $sort = $this->request->get(\"sort\", !empty($this->model) && $this->model->getPk() ? $this->model->getPk() : 'id');\n        $order = $this->request->get(\"order\", \"DESC\");\n        $offset = $this->request->get(\"offset\", 0);\n        $limit = $this->request->get(\"limit\", 0);\n        $filter = (array)json_decode($filter, true);\n        $op = (array)json_decode($op, true);\n        $filter = $filter ? $filter : [];\n        $where = [];\n        $tableName = '';\n        if ($relationSearch) {\n            if (!empty($this->model)) {\n                $name = \\think\\Loader::parseName(basename(str_replace('\\\\', '/', get_class($this->model))));\n                $name = $this->model->getTable();\n                $tableName = $name . '.';\n            }\n            $sortArr = explode(',', $sort);\n            foreach ($sortArr as $index => & $item) {\n                $item = stripos($item, \".\") === false ? $tableName . trim($item) : $item;\n            }\n            unset($item);\n            $sort = implode(',', $sortArr);\n        }\n        $adminIds = $this->getDataLimitAdminIds();\n        if (is_array($adminIds)) {\n            $where[] = [$tableName . $this->dataLimitField, 'in', $adminIds];\n        }\n        if ($search) {\n            $searcharr = is_array($searchfields) ? $searchfields : explode(',', $searchfields);\n            foreach ($searcharr as $k => &$v) {\n                $v = stripos($v, \".\") === false ? $tableName . $v : $v;\n            }\n            unset($v);\n            $where[] = [implode(\"|\", $searcharr), \"LIKE\", \"%{$search}%\"];\n        }\n        foreach ($filter as $k => $v) {\n            $sym = isset($op[$k]) ? $op[$k] : '=';\n            if (stripos($k, \".\") === false) {\n                $k = $tableName . $k;\n            }\n            $v = !is_array($v) ? trim($v) : $v;\n            $sym = strtoupper(isset($op[$k]) ? $op[$k] : $sym);\n            switch ($sym) {\n                case '=':\n                case '<>':\n                    $where[] = [$k, $sym, (string)$v];\n                    break;\n                case 'LIKE':\n                case 'NOT LIKE':\n                case 'LIKE %...%':\n                case 'NOT LIKE %...%':\n                    $where[] = [$k, trim(str_replace('%...%', '', $sym)), \"%{$v}%\"];\n                    break;\n                case '>':\n                case '>=':\n                case '<':\n                case '<=':\n                    $where[] = [$k, $sym, intval($v)];\n                    break;\n                case 'FINDIN':\n                case 'FINDINSET':\n                case 'FIND_IN_SET':\n                    $where[] = \"FIND_IN_SET('{$v}', \" . ($relationSearch ? $k : '`' . str_replace('.', '`.`', $k) . '`') . \")\";\n                    break;\n                case 'IN':\n                case 'IN(...)':\n                case 'NOT IN':\n                case 'NOT IN(...)':\n                    $where[] = [$k, str_replace('(...)', '', $sym), is_array($v) ? $v : explode(',', $v)];\n                    break;\n                case 'BETWEEN':\n                case 'NOT BETWEEN':\n                    $arr = array_slice(explode(',', $v), 0, 2);\n                    if (stripos($v, ',') === false || !array_filter($arr)) {\n                        continue 2;\n                    }\n                    //\u5f53\u51fa\u73b0\u4e00\u8fb9\u4e3a\u7a7a\u65f6\u6539\u53d8\u64cd\u4f5c\u7b26\n                    if ($arr[0] === '') {\n                        $sym = $sym == 'BETWEEN' ? '<=' : '>';\n                        $arr = $arr[1];\n                    } elseif ($arr[1] === '') {\n                        $sym = $sym == 'BETWEEN' ? '>=' : '<';\n                        $arr = $arr[0];\n                    }\n                    $where[] = [$k, $sym, $arr];\n                    break;\n                case 'RANGE':\n                case 'NOT RANGE':\n                    $v = str_replace(' - ', ',', $v);\n                    $arr = array_slice(explode(',', $v), 0, 2);\n                    if (stripos($v, ',') === false || !array_filter($arr)) {\n                        continue 2;\n                    }\n                    //\u5f53\u51fa\u73b0\u4e00\u8fb9\u4e3a\u7a7a\u65f6\u6539\u53d8\u64cd\u4f5c\u7b26\n                    if ($arr[0] === '') {\n                        $sym = $sym == 'RANGE' ? '<=' : '>';\n                        $arr = $arr[1];\n                    } elseif ($arr[1] === '') {\n                        $sym = $sym == 'RANGE' ? '>=' : '<';\n                        $arr = $arr[0];\n                    }\n                    $where[] = [$k, str_replace('RANGE', 'BETWEEN', $sym) . ' time', $arr];\n                    break;\n                case 'LIKE':\n                case 'LIKE %...%':\n                    $where[] = [$k, 'LIKE', \"%{$v}%\"];\n                    break;\n                case 'NULL':\n                case 'IS NULL':\n                case 'NOT NULL':\n                case 'IS NOT NULL':\n                    $where[] = [$k, strtolower(str_replace('IS ', '', $sym))];\n                    break;\n                default:\n                    break;\n            }\n        }\n        $where = function ($query) use ($where) {\n            foreach ($where as $k => $v) {\n                if (is_array($v)) {\n                    call_user_func_array([$query, 'where'], $v);\n                } else {\n                    $query->where($v);\n                }\n            }\n        };\n        return [$where, $sort, $order, $offset, $limit];\n    }\n\n    /**\n     * \u83b7\u53d6\u6570\u636e\u9650\u5236\u7684\u7ba1\u7406\u5458ID\n     * \u7981\u7528\u6570\u636e\u9650\u5236\u65f6\u8fd4\u56de\u7684\u662fnull\n     * @return mixed\n     */\n    protected function getDataLimitAdminIds()\n    {\n        if (!$this->dataLimit) {\n            return null;\n        }\n        if ($this->auth->isSuperAdmin()) {\n            return null;\n        }\n        $adminIds = [];\n        if (in_array($this->dataLimit, ['auth', 'personal'])) {\n            $adminIds = $this->dataLimit == 'auth' ? $this->auth->getChildrenAdminIds(true) : [$this->auth->id];\n        }\n        return $adminIds;\n    }\n\n    /**\n     * Selectpage\u7684\u5b9e\u73b0\u65b9\u6cd5\n     *\n     * \u5f53\u524d\u65b9\u6cd5\u53ea\u662f\u4e00\u4e2a\u6bd4\u8f83\u901a\u7528\u7684\u641c\u7d22\u5339\u914d,\u8bf7\u6309\u9700\u91cd\u8f7d\u6b64\u65b9\u6cd5\u6765\u7f16\u5199\u81ea\u5df1\u7684\u641c\u7d22\u903b\u8f91,$where\u6309\u81ea\u5df1\u7684\u9700\u6c42\u5199\u5373\u53ef\n     * \u8fd9\u91cc\u793a\u4f8b\u4e86\u6240\u6709\u7684\u53c2\u6570\uff0c\u6240\u4ee5\u6bd4\u8f83\u590d\u6742\uff0c\u5b9e\u73b0\u4e0a\u81ea\u5df1\u5b9e\u73b0\u53ea\u9700\u7b80\u5355\u7684\u51e0\u884c\u5373\u53ef\n     *\n     */\n    protected function selectpage()\n    {\n        //\u8bbe\u7f6e\u8fc7\u6ee4\u65b9\u6cd5\n        $this->request->filter(['strip_tags', 'htmlspecialchars']);\n\n        //\u641c\u7d22\u5173\u952e\u8bcd,\u5ba2\u6237\u7aef\u8f93\u5165\u4ee5\u7a7a\u683c\u5206\u5f00,\u8fd9\u91cc\u63a5\u6536\u4e3a\u6570\u7ec4\n        $word = (array)$this->request->request(\"q_word/a\");\n        //\u5f53\u524d\u9875\n        $page = $this->request->request(\"pageNumber\");\n        //\u5206\u9875\u5927\u5c0f\n        $pagesize = $this->request->request(\"pageSize\");\n        //\u641c\u7d22\u6761\u4ef6\n        $andor = $this->request->request(\"andOr\", \"and\", \"strtoupper\");\n        //\u6392\u5e8f\u65b9\u5f0f\n        $orderby = (array)$this->request->request(\"orderBy/a\");\n        //\u663e\u793a\u7684\u5b57\u6bb5\n        $field = $this->request->request(\"showField\");\n        //\u4e3b\u952e\n        $primarykey = $this->request->request(\"keyField\");\n        //\u4e3b\u952e\u503c\n        $primaryvalue = $this->request->request(\"keyValue\");\n        //\u641c\u7d22\u5b57\u6bb5\n        $searchfield = (array)$this->request->request(\"searchField/a\");\n        //\u81ea\u5b9a\u4e49\u641c\u7d22\u6761\u4ef6\n        $custom = (array)$this->request->request(\"custom/a\");\n        //\u662f\u5426\u8fd4\u56de\u6811\u5f62\u7ed3\u6784\n        $istree = $this->request->request(\"isTree\", 0);\n        $ishtml = $this->request->request(\"isHtml\", 0);\n        if ($istree) {\n            $word = [];\n            $pagesize = 99999;\n        }\n        $order = [];\n        foreach ($orderby as $k => $v) {\n            $order[$v[0]] = $v[1];\n        }\n        $field = $field ? $field : 'name';\n\n        //\u5982\u679c\u6709primaryvalue,\u8bf4\u660e\u5f53\u524d\u662f\u521d\u59cb\u5316\u4f20\u503c\n        if ($primaryvalue !== null) {\n            $where = [$primarykey => ['in', $primaryvalue]];\n            $pagesize = null;\n        } else {\n            $where = function ($query) use ($word, $andor, $field, $searchfield, $custom) {\n                $logic = $andor == 'AND' ? '&' : '|';\n                $searchfield = is_array($searchfield) ? implode($logic, $searchfield) : $searchfield;\n                foreach ($word as $k => $v) {\n                    $query->where(str_replace(',', $logic, $searchfield), \"like\", \"%{$v}%\");\n                }\n                if ($custom && is_array($custom)) {\n                    foreach ($custom as $k => $v) {\n                        if (is_array($v) && 2 == count($v)) {\n                            $query->where($k, trim($v[0]), $v[1]);\n                        } else {\n                            $query->where($k, '=', $v);\n                        }\n                    }\n                }\n            };\n        }\n        $adminIds = $this->getDataLimitAdminIds();\n        if (is_array($adminIds)) {\n            $this->model->where($this->dataLimitField, 'in', $adminIds);\n        }\n        $list = [];\n        $total = $this->model->where($where)->count();\n        if ($total > 0) {\n            if (is_array($adminIds)) {\n                $this->model->where($this->dataLimitField, 'in', $adminIds);\n            }\n            $datalist = $this->model->where($where)\n                ->order($order)\n                ->page($page, $pagesize)\n                ->field($this->selectpageFields)\n                ->select();\n            foreach ($datalist as $index => $item) {\n                unset($item['password'], $item['salt']);\n                $list[] = [\n                    $primarykey => isset($item[$primarykey]) ? $item[$primarykey] : '',\n                    $field      => isset($item[$field]) ? $item[$field] : '',\n                    'pid'       => isset($item['pid']) ? $item['pid'] : 0\n                ];\n            }\n            if ($istree && !$primaryvalue) {\n                $tree = Tree::instance();\n                $tree->init(collection($list)->toArray(), 'pid');\n                $list = $tree->getTreeList($tree->getTreeArray(0), $field);\n                if (!$ishtml) {\n                    foreach ($list as &$item) {\n                        $item = str_replace('&nbsp;', ' ', $item);\n                    }\n                    unset($item);\n                }\n            }\n        }\n        //\u8fd9\u91cc\u4e00\u5b9a\u8981\u8fd4\u56de\u6709list\u8fd9\u4e2a\u5b57\u6bb5,total\u662f\u53ef\u9009\u7684,\u5982\u679ctotal<=list\u7684\u6570\u91cf,\u5219\u4f1a\u9690\u85cf\u5206\u9875\u6309\u94ae\n        return json(['list' => $list, 'total' => $total]);\n    }\n\n    /**\n     * \u5237\u65b0Token\n     */\n    protected function token()\n    {\n        $token = $this->request->post('__token__');\n\n        //\u9a8c\u8bc1Token\n        if (!Validate::is($token, \"token\", ['__token__' => $token])) {\n            $this->error(__('Token verification error'), '', ['__token__' => $this->request->token()]);\n        }\n\n        //\u5237\u65b0Token\n        $this->request->token();\n    }\n}\n", "<?php\n\nnamespace app\\index\\controller;\n\nuse addons\\wechat\\model\\WechatCaptcha;\nuse app\\common\\controller\\Frontend;\nuse app\\common\\library\\Ems;\nuse app\\common\\library\\Sms;\nuse think\\Config;\nuse think\\Cookie;\nuse think\\Hook;\nuse think\\Session;\nuse think\\Validate;\n\n/**\n * \u4f1a\u5458\u4e2d\u5fc3\n */\nclass User extends Frontend\n{\n    protected $layout = 'default';\n    protected $noNeedLogin = ['login', 'register', 'third'];\n    protected $noNeedRight = ['*'];\n\n    public function _initialize()\n    {\n        parent::_initialize();\n        $auth = $this->auth;\n\n        if (!Config::get('fastadmin.usercenter')) {\n            $this->error(__('User center already closed'));\n        }\n\n        //\u76d1\u542c\u6ce8\u518c\u767b\u5f55\u6ce8\u9500\u7684\u4e8b\u4ef6\n        Hook::add('user_login_successed', function ($user) use ($auth) {\n            $expire = input('post.keeplogin') ? 30 * 86400 : 0;\n            Cookie::set('uid', $user->id, $expire);\n            Cookie::set('token', $auth->getToken(), $expire);\n        });\n        Hook::add('user_register_successed', function ($user) use ($auth) {\n            Cookie::set('uid', $user->id);\n            Cookie::set('token', $auth->getToken());\n        });\n        Hook::add('user_delete_successed', function ($user) use ($auth) {\n            Cookie::delete('uid');\n            Cookie::delete('token');\n        });\n        Hook::add('user_logout_successed', function ($user) use ($auth) {\n            Cookie::delete('uid');\n            Cookie::delete('token');\n        });\n    }\n\n    /**\n     * \u7a7a\u7684\u8bf7\u6c42\n     * @param $name\n     * @return mixed\n     */\n    public function _empty($name)\n    {\n        $data = Hook::listen(\"user_request_empty\", $name);\n        foreach ($data as $index => $datum) {\n            $this->view->assign($datum);\n        }\n        return $this->view->fetch('user/' . $name);\n    }\n\n    /**\n     * \u4f1a\u5458\u4e2d\u5fc3\n     */\n    public function index()\n    {\n        $this->view->assign('title', __('User center'));\n        return $this->view->fetch();\n    }\n\n    /**\n     * \u6ce8\u518c\u4f1a\u5458\n     */\n    public function register()\n    {\n        $url = $this->request->request('url', '');\n        if ($this->auth->id) {\n            $this->success(__('You\\'ve logged in, do not login again'), $url ? $url : url('user/index'));\n        }\n        if ($this->request->isPost()) {\n            $username = $this->request->post('username');\n            $password = $this->request->post('password');\n            $email = $this->request->post('email');\n            $mobile = $this->request->post('mobile', '');\n            $captcha = $this->request->post('captcha');\n            $token = $this->request->post('__token__');\n            $rule = [\n                'username'  => 'require|length:3,30',\n                'password'  => 'require|length:6,30',\n                'email'     => 'require|email',\n                'mobile'    => 'regex:/^1\\d{10}$/',\n                '__token__' => 'require|token',\n            ];\n\n            $msg = [\n                'username.require' => 'Username can not be empty',\n                'username.length'  => 'Username must be 3 to 30 characters',\n                'password.require' => 'Password can not be empty',\n                'password.length'  => 'Password must be 6 to 30 characters',\n                'email'            => 'Email is incorrect',\n                'mobile'           => 'Mobile is incorrect',\n            ];\n            $data = [\n                'username'  => $username,\n                'password'  => $password,\n                'email'     => $email,\n                'mobile'    => $mobile,\n                '__token__' => $token,\n            ];\n            //\u9a8c\u8bc1\u7801\n            $captchaResult = true;\n            $captchaType = config(\"fastadmin.user_register_captcha\");\n            if ($captchaType) {\n                if ($captchaType == 'mobile') {\n                    $captchaResult = Sms::check($mobile, $captcha, 'register');\n                } elseif ($captchaType == 'email') {\n                    $captchaResult = Ems::check($email, $captcha, 'register');\n                } elseif ($captchaType == 'wechat') {\n                    $captchaResult = WechatCaptcha::check($captcha, 'register');\n                } elseif ($captchaType == 'text') {\n                    $captchaResult = \\think\\Validate::is($captcha, 'captcha');\n                }\n            }\n            if (!$captchaResult) {\n                $this->error(__('Captcha is incorrect'));\n            }\n            $validate = new Validate($rule, $msg);\n            $result = $validate->check($data);\n            if (!$result) {\n                $this->error(__($validate->getError()), null, ['token' => $this->request->token()]);\n            }\n            if ($this->auth->register($username, $password, $email, $mobile)) {\n                $this->success(__('Sign up successful'), $url ? $url : url('user/index'));\n            } else {\n                $this->error($this->auth->getError(), null, ['token' => $this->request->token()]);\n            }\n        }\n        //\u5224\u65ad\u6765\u6e90\n        $referer = $this->request->server('HTTP_REFERER');\n        if (!$url && (strtolower(parse_url($referer, PHP_URL_HOST)) == strtolower($this->request->host()))\n            && !preg_match(\"/(user\\/login|user\\/register|user\\/logout)/i\", $referer)) {\n            $url = $referer;\n        }\n        $this->view->assign('captchaType', config('fastadmin.user_register_captcha'));\n        $this->view->assign('url', $url);\n        $this->view->assign('title', __('Register'));\n        return $this->view->fetch();\n    }\n\n    /**\n     * \u4f1a\u5458\u767b\u5f55\n     */\n    public function login()\n    {\n        $url = $this->request->request('url', '');\n        if ($this->auth->id) {\n            $this->success(__('You\\'ve logged in, do not login again'), $url ? $url : url('user/index'));\n        }\n        if ($this->request->isPost()) {\n            $account = $this->request->post('account');\n            $password = $this->request->post('password');\n            $keeplogin = (int)$this->request->post('keeplogin');\n            $token = $this->request->post('__token__');\n            $rule = [\n                'account'   => 'require|length:3,50',\n                'password'  => 'require|length:6,30',\n                '__token__' => 'require|token',\n            ];\n\n            $msg = [\n                'account.require'  => 'Account can not be empty',\n                'account.length'   => 'Account must be 3 to 50 characters',\n                'password.require' => 'Password can not be empty',\n                'password.length'  => 'Password must be 6 to 30 characters',\n            ];\n            $data = [\n                'account'   => $account,\n                'password'  => $password,\n                '__token__' => $token,\n            ];\n            $validate = new Validate($rule, $msg);\n            $result = $validate->check($data);\n            if (!$result) {\n                $this->error(__($validate->getError()), null, ['token' => $this->request->token()]);\n                return false;\n            }\n            if ($this->auth->login($account, $password)) {\n                $this->success(__('Logged in successful'), $url ? $url : url('user/index'));\n            } else {\n                $this->error($this->auth->getError(), null, ['token' => $this->request->token()]);\n            }\n        }\n        //\u5224\u65ad\u6765\u6e90\n        $referer = $this->request->server('HTTP_REFERER');\n        if (!$url && (strtolower(parse_url($referer, PHP_URL_HOST)) == strtolower($this->request->host()))\n            && !preg_match(\"/(user\\/login|user\\/register|user\\/logout)/i\", $referer)) {\n            $url = $referer;\n        }\n        $this->view->assign('url', $url);\n        $this->view->assign('title', __('Login'));\n        return $this->view->fetch();\n    }\n\n    /**\n     * \u6ce8\u9500\u767b\u5f55\n     */\n    public function logout()\n    {\n        //\u6ce8\u9500\u672c\u7ad9\n        $this->auth->logout();\n        $this->success(__('Logout successful'), url('user/index'));\n    }\n\n    /**\n     * \u4e2a\u4eba\u4fe1\u606f\n     */\n    public function profile()\n    {\n        $this->view->assign('title', __('Profile'));\n        return $this->view->fetch();\n    }\n\n    /**\n     * \u4fee\u6539\u5bc6\u7801\n     */\n    public function changepwd()\n    {\n        if ($this->request->isPost()) {\n            $oldpassword = $this->request->post(\"oldpassword\");\n            $newpassword = $this->request->post(\"newpassword\");\n            $renewpassword = $this->request->post(\"renewpassword\");\n            $token = $this->request->post('__token__');\n            $rule = [\n                'oldpassword'   => 'require|length:6,30',\n                'newpassword'   => 'require|length:6,30',\n                'renewpassword' => 'require|length:6,30|confirm:newpassword',\n                '__token__'     => 'token',\n            ];\n\n            $msg = [\n            ];\n            $data = [\n                'oldpassword'   => $oldpassword,\n                'newpassword'   => $newpassword,\n                'renewpassword' => $renewpassword,\n                '__token__'     => $token,\n            ];\n            $field = [\n                'oldpassword'   => __('Old password'),\n                'newpassword'   => __('New password'),\n                'renewpassword' => __('Renew password')\n            ];\n            $validate = new Validate($rule, $msg, $field);\n            $result = $validate->check($data);\n            if (!$result) {\n                $this->error(__($validate->getError()), null, ['token' => $this->request->token()]);\n                return false;\n            }\n\n            $ret = $this->auth->changepwd($newpassword, $oldpassword);\n            if ($ret) {\n                $this->success(__('Reset password successful'), url('user/login'));\n            } else {\n                $this->error($this->auth->getError(), null, ['token' => $this->request->token()]);\n            }\n        }\n        $this->view->assign('title', __('Change password'));\n        return $this->view->fetch();\n    }\n}\n"], "filenames": ["application/admin/controller/Ajax.php", "application/common/controller/Backend.php", "application/index/controller/User.php"], "buggy_code_start_loc": [11, 453, 122], "buggy_code_end_loc": [226, 453, 123], "fixing_code_start_loc": [12, 454, 122], "fixing_code_end_loc": [234, 455, 123], "type": "CWE-89", "message": "In fastadmin V1.0.0.20191212_beta, when a user with administrator rights has logged in, a malicious parameter can be passed for SQL injection in URL /admin/ajax/weigh.", "other": {"cve": {"id": "CVE-2020-21665", "sourceIdentifier": "cve@mitre.org", "published": "2020-11-17T15:15:11.867", "lastModified": "2020-11-30T21:44:19.437", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In fastadmin V1.0.0.20191212_beta, when a user with administrator rights has logged in, a malicious parameter can be passed for SQL injection in URL /admin/ajax/weigh."}, {"lang": "es", "value": "En fastadmin versi\u00f3n V1.0.0.20191212_beta, cuando un usuario con derechos de administrador ha iniciado sesi\u00f3n, un par\u00e1metro malicioso puede ser pasado por una inyecci\u00f3n SQL en la URL /admin/ajax/weight"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 7.2, "baseSeverity": "HIGH"}, "exploitabilityScore": 1.2, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.5}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-89"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:fastadmin:fastadmin:1.0.0.20191212:beta:*:*:*:*:*:*", "matchCriteriaId": "783B7866-6888-44A0-9655-5AEBF4ABFDB9"}]}]}], "references": [{"url": "https://github.com/karsonzhang/fastadmin/commit/e14008ca029d644e2486873fa22629a1d62a7380", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/karsonzhang/fastadmin/commit/e14008ca029d644e2486873fa22629a1d62a7380"}}