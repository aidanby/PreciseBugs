{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.redirects\");\npimcore.settings.redirects = Class.create({\n\n    initialize: function () {\n        this.getData();\n    },\n\n    getData: function () {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_redirects_statuscodes'),\n            success: function (response) {\n                this.data = Ext.decode(response.responseText);\n                //valid status codes\n                try {\n                    this.statusCodes = new Ext.data.JsonStore({\n                        autoDestroy: true,\n                        data: this.data.config,\n                        proxy: {\n                            type: 'memory',\n                            reader: {\n                                rootProperty: 'statuscodes'\n                            }\n                        },\n                        fields: ['statusCode', 'display']\n                    });\n                } catch (e2) {\n                    this.statusCodes = new Ext.data.JsonStore({\n                        autoDestroy: true,\n                        fields: ['statusCode', 'display']\n                    });\n                }\n\n\n                this.getTabPanel();\n\n            }.bind(this)\n        });\n    },\n\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_redirects\");\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"pimcore_redirects\",\n                title: t(\"redirects\"),\n                iconCls: \"pimcore_icon_redirects\",\n                border: false,\n                layout: \"fit\",\n                closable:true,\n                items: [this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_redirects\");\n\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"redirects\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor: function () {\n        var that = this;\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n        var url = Routing.generate('pimcore_admin_redirects_redirects');\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            url,\n            [\n                {name: 'id'},\n                {name: 'type', allowBlank: false},\n                {name: 'source', allowBlank: false},\n                {name: 'sourceSite'},\n                {name: 'target', allowBlank: false},\n                {name: 'targetSite'},\n                {name: 'statusCode'},\n                {name: 'priority', type:'int'},\n                {name: 'regex'},\n                {name: 'passThroughParameters'},\n                {name: 'active'},\n                {name: 'expiry', type: \"date\", convert: function (v, r) {\n                    if(v && !(v instanceof Date)) {\n                        var d = new Date(intval(v) * 1000);\n                        return d;\n                    } else {\n                        return v;\n                    }\n                }},\n                {name: 'creationDate'},\n                {name: 'modificationDate'}\n            ],\n            itemsPerPage\n        );\n\n        this.store.getProxy().setBatchActions(false);\n        var redirectStore = this.store;\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n\n        this.filterField = new Ext.form.TextField({\n            xtype: \"textfield\",\n            width: 400,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents: true,\n            listeners: {\n                \"keydown\" : function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.filter = input.getValue();\n                        this.pagingtoolbar.moveFirst();\n                    }\n                }.bind(this)\n            }\n        });\n\n        var getRedirectTypeCombo = this.getRedirectTypeCombo();\n\n        var typesColumns = [\n            {\n                text: t(\"type\"),\n                flex: 200,\n                sortable: true,\n                dataIndex: 'type',\n                editor: getRedirectTypeCombo,\n                renderer: function (redirectType) {\n                    var store = getRedirectTypeCombo.getStore();\n                    var pos = store.findExact(\"type\", redirectType);\n                    if(pos >= 0) {\n                        return store.getAt(pos).get(\"name\");\n                    }\n                    return redirectType;\n                }\n            },\n            {text: t(\"source_site\") + ' (' + t('optional') + ')', flex: 200, sortable:true, dataIndex: \"sourceSite\",\n                editor: new Ext.form.ComboBox({\n                store: pimcore.globalmanager.get(\"sites\"),\n                valueField: \"id\",\n                displayField: \"domain\",\n                editable: false,\n                triggerAction: \"all\"\n            }), renderer: function (siteId) {\n                var store = pimcore.globalmanager.get(\"sites\");\n                var pos = store.findExact(\"id\", siteId);\n                if(pos >= 0) {\n                    return store.getAt(pos).get(\"domain\");\n                }\n            }},\n            {\n                text: t(\"source\"),\n                flex: 200,\n                sortable: true,\n                dataIndex: 'source',\n                editor: new Ext.form.TextField({}),\n                renderer: function (value) {\n                    return Ext.util.Format.htmlEncode(value);\n                }\n            },\n            {\n                text: t(\"target_site\") + ' (' + t('optional') + ')', flex: 200, sortable: true, dataIndex: \"targetSite\",\n                editor: new Ext.form.ComboBox({\n                    store: pimcore.globalmanager.get(\"sites\"),\n                    valueField: \"id\",\n                    displayField: \"domain\",\n                    editable: false,\n                    triggerAction: \"all\"\n                }), renderer: function (siteId) {\n                    var store = pimcore.globalmanager.get(\"sites\");\n                    var pos = store.findExact(\"id\", siteId);\n                    if (pos >= 0) {\n                        return store.getAt(pos).get(\"domain\");\n                    }\n                }\n            },\n            {\n                text: t(\"target\"), flex: 200, sortable: false, dataIndex: 'target',\n                editor: {\n                    xtype: 'textfield',\n                    id: 'targetEditor',\n                    fieldCls: \"input_drop_target\",\n                },\n                tdCls: \"input_drop_target\",\n                renderer: function (value) {\n                    return Ext.util.Format.htmlEncode(value);\n                }\n            },\n            {text: t(\"status\"), flex: 70, sortable: true, dataIndex: 'statusCode', editor: new Ext.form.ComboBox({\n                store: this.statusCodes,\n                displayField: 'display',\n                valueField: 'statusCode',\n                mode: \"local\",\n                typeAhead: false,\n                editable: false,\n                listConfig: {minWidth: 200},\n                forceSelection: true,\n                triggerAction: \"all\"\n            })},\n            {text: t(\"priority\"), flex: 60, sortable: true, dataIndex: 'priority',\n                editor: new Ext.form.ComboBox({\n                    store: [\n                        [1, \"1 - \" + t(\"lowest\")],\n                        [2, 2],\n                        [3, 3],\n                        [4, 4],\n                        [5, 5],\n                        [6, 6],\n                        [7, 7],\n                        [8, 8],\n                        [9, 9],\n                        [10, \"10 - \" + t(\"highest\")],\n                        [99, \"99 - \" + t(\"override_all\")]\n                    ],\n                    mode: \"local\",\n                    typeAhead: false,\n                    listConfig: {minWidth: 200},\n                    editable: false,\n                    forceSelection: true,\n                    triggerAction: \"all\"\n            })},\n            new Ext.grid.column.Check({\n                text: t(\"regex\"),\n                dataIndex: \"regex\",\n                flex: 70,\n                editor: {\n                    xtype: 'checkbox',\n                    id: 'regexEditor',\n                    listeners: {\n                        change: function (column, checked, oldChecked, eOpts) {\n                            if (checked) {\n                                Ext.MessageBox.show({\n                                    title: t(\"warning\"),\n                                    msg: t(\"redirect_performance_warning\"),\n                                    buttons: Ext.MessageBox.YESNO,\n                                    fn: function (result) {\n                                        Ext.getCmp('regexEditor').setValue(result === 'yes');\n                                    }.bind(this)\n                                });\n                            }\n                        }.bind(this)\n                    }\n                },\n            }),\n            new Ext.grid.column.Check({\n                text: t(\"pass_through_params\"),\n                dataIndex: \"passThroughParameters\",\n                flex: 100,\n                editor: {\n                    xtype: 'checkbox',\n                }\n            }),\n            new Ext.grid.column.Check({\n                text: t(\"active\"),\n                dataIndex: \"active\",\n                flex: 70,\n                editor: {\n                    xtype: 'checkbox',\n                }\n            }),\n            {\n                text: t(\"expiry\") + ' (' + t('optional') + ')',\n                flex: 150, sortable:true, dataIndex: \"expiry\",\n                editor: {\n                    xtype: 'datefield',\n                    format: 'Y-m-d'\n                },\n                renderer:\n                    function(d) {\n                        if(d instanceof Date) {\n                            return Ext.Date.format(d, \"Y-m-d\");\n                        }\n                    }\n            },\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false,\n                hidden: true,\n                flex: 150,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false,\n                hidden: true,\n                flex: 150,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                flex: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        pimcore.helpers.deleteConfirm(t('redirect'), data.data.id, function () {\n                            grid.getStore().removeAt(rowIndex);\n                            this.updateRows();\n                        }.bind(this));\n                    }.bind(this)\n                }]\n            }\n        ];\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function (el, e, eOpts, i) {\n                    var editorRow = el.editor.body;\n                    editorRow.rowIdx = e.rowIdx;\n\n                    let dd = new Ext.dd.DropZone(editorRow, {\n                        ddGroup: \"element\",\n\n                        getTargetFromEvent: function (e) {\n                            return this.getEl();\n                        },\n\n                        onNodeOver: function (target, dd, e, data) {\n                            if (data.records.length == 1) {\n                                try {\n                                    var record = data.records[0];\n                                    var data = record.data;\n\n                                    if (in_array(data.type, [\"page\", \"link\", \"hardlink\", \"image\", \"text\", \"audio\", \"video\", \"document\"])) {\n                                        return Ext.dd.DropZone.prototype.dropAllowed;\n                                    }\n                                } catch (e) {\n                                    console.log(e);\n                                }\n                            }\n                            return Ext.dd.DropZone.prototype.dropNotAllowed;\n\n                        },\n\n                        onNodeDrop: function (myRowIndex, target, dd, e1, data) {\n                            if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                                try {\n                                    var record = data.records[0];\n                                    var data = record.data;\n\n                                    if (in_array(data.type, [\"page\", \"link\", \"hardlink\", \"image\", \"text\", \"audio\", \"video\", \"document\"])) {\n                                        Ext.getCmp('targetEditor').setValue(data.path);\n\n                                        return true;\n                                    }\n                                } catch (e) {\n                                    console.log(e);\n                                }\n                            }\n                        }.bind(this, i)\n                    });\n                }.bind(this),\n                delay: 1\n            }\n        });\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    xtype: \"splitbutton\",\n                    text: t('add'),\n                    iconCls: \"pimcore_icon_add\",\n                    handler: this.openWizard.bind(this),\n                    menu: [{\n                        iconCls: \"pimcore_icon_add\",\n                        text: t(\"add_expert_mode\"),\n                        handler: this.onAdd.bind(this)\n                    },{\n                        iconCls: \"pimcore_icon_add\",\n                        text: t(\"add_beginner_mode\"),\n                        handler: this.openWizard.bind(this)\n                    }]\n                },\n                {\n                    text: t(\"export_csv\"),\n                    iconCls: \"pimcore_icon_export\",\n                    handler: function () {\n                        pimcore.helpers.download(Routing.generate('pimcore_admin_redirects_csvexport'));\n                    }\n                },\n                {\n                    text: t(\"import_csv\"),\n                    iconCls: \"pimcore_icon_import\",\n                    handler: function () {\n                        pimcore.helpers.uploadDialog(\n                            Routing.generate('pimcore_admin_redirects_csvimport'), 'redirects',\n                            function (res) {\n                                that.store.reload();\n\n                                var json;\n\n                                try {\n                                    json = Ext.decode(res.response.responseText);\n                                } catch (e) {\n                                    console.error(e);\n                                }\n\n                                if (json && json.data) {\n                                    var stats = json.data;\n\n                                    var icon = 'pimcore_icon_success';\n                                    if (stats.errored > 0) {\n                                        icon = 'pimcore_icon_warning';\n                                    }\n\n                                    var message = '';\n\n                                    message += '<table class=\"pimcore_stats_table\">';\n                                    message += '<tr><th>' + t('redirects_import_total') + '</th><td class=\"pimcore_stats_table--number\">' + stats.total + '</td></tr>';\n                                    message += '<tr><th>' + t('redirects_import_created') + '</th><td class=\"pimcore_stats_table--number\">' + stats.created + '</td></tr>';\n                                    message += '<tr><th>' + t('redirects_import_updated') + '</th><td  class=\"pimcore_stats_table--number\">' + stats.updated + '</td></tr>';\n\n                                    if (stats.errored > 0) {\n                                        message += '<tr><th>' + t('redirects_import_errored') + '</th><td class=\"pimcore_stats_table--number\">' + stats.errored + '</td></tr>';\n                                    }\n\n                                    message += '</table>';\n\n                                    if (stats.errors && Object.keys(stats.errors).length > 0) {\n                                        message += '<h4 style=\"margin-top: 15px; margin-bottom: 0; color: red\">' + t('redirects_import_errors') + '</h4>';\n                                        message += '<table class=\"pimcore_stats_table\">';\n\n                                        var errorKeys = Object.keys(stats.errors);\n                                        for (var i = 0; i < errorKeys.length; i++) {\n                                            message += '<tr><td>' + t('redirects_import_error_line') + ' ' + errorKeys[i] + ':</td><td>' + stats.errors[errorKeys[i]] + '</td></tr>';\n                                        }\n\n                                        message += '</table>';\n                                    }\n\n                                    var win = new Ext.Window({\n                                        modal: true,\n                                        iconCls: icon,\n                                        title: t('redirects_csv_import'),\n                                        width: 400,\n                                        maxHeight: 500,\n                                        html: message,\n                                        autoScroll: true,\n                                        bodyStyle: \"padding: 10px;\",\n                                        buttonAlign: \"center\",\n                                        shadow: false,\n                                        closable: false,\n                                        buttons: [{\n                                            text: t(\"OK\"),\n                                            handler: function () {\n                                                win.close();\n                                            }\n                                        }]\n                                    });\n\n                                    win.show();\n                                }\n                            },\n                            function () {\n                                Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n                            }\n                        )\n                    }\n                },\n                {\n                    text: t(\"redirects_expired_cleanup\"),\n                    iconCls: \"pimcore_icon_cleanup\",\n                    handler: function () {\n                        Ext.MessageBox.show({\n                            title: t('redirects_expired_cleanup'),\n                            msg: t('redirects_cleanup_warning'),\n                            buttons: Ext.Msg.OKCANCEL,\n                            icon: Ext.MessageBox.INFO,\n                            fn: function (button) {\n                                if (button == \"ok\") {\n                                    this.cleanupExpiredRedirects();\n                                }\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                },\n                \"->\",\n                {\n                    text: t(\"search\") + \" / \" + t(\"test_url\"),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                },\n                this.filterField\n            ]\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n\t\t\tcolumns : typesColumns,\n            trackMouseOver: true,\n            columnLines: true,\n            bodyCls: \"pimcore_editable_grid\",\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                this.rowEditing\n            ],\n            stripeRows: true,\n            bbar: this.pagingtoolbar,\n            tbar: toolbar,\n            viewConfig: {\n                forceFit: true,\n                listeners: {\n                    rowupdated: this.updateRows.bind(this),\n                    refresh: this.updateRows.bind(this)\n                }\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n        this.grid.on('validateedit', function (editor, context) {\n\n            if(context[\"field\"] == 'priority' && context['newValues']['priority'] == 99) {\n                Ext.MessageBox.show({\n                    title: t(\"warning\"),\n                    msg: t(\"redirect_performance_warning\"),\n                    buttons: Ext.MessageBox.YESNO,\n                    fn: function (result) {\n                        if (result === 'yes') {\n                            editor.cancelEdit();\n                            context['record'].set('priority', 99);\n                        }\n                    }\n                });\n\n                return false;\n            }\n\n            if(context[\"field\"] == 'type' && context['value'] == 'auto_create') {\n                return false;\n            }\n        });\n\n        return this.grid;\n    },\n\n    cleanupExpiredRedirects: function () {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_redirects_cleanup'),\n            method: 'DELETE',\n            success: function (response) {\n                try{\n                    var data = Ext.decode(response.responseText);\n                    if (data && data.success) {\n                        this.store.reload();\n                    } else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"redirects_cleanup_error\"), \"error\");\n                    }\n                } catch (e) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"redirects_cleanup_error\"), \"error\");\n                }\n            }.bind(this)\n        });\n    },\n\n    updateRows: function () {\n\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n\n            var dd = new Ext.dd.DropZone(rows[i], {\n                ddGroup: \"element\",\n\n                getTargetFromEvent: function(e) {\n                    return this.getEl();\n                },\n\n                onNodeOver : function(target, dd, e, data) {\n                    if (data.records.length == 1) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n\n                            if (in_array(data.type, [\"page\", \"link\", \"hardlink\",\"image\", \"text\", \"audio\", \"video\", \"document\"])) {\n                                return Ext.dd.DropZone.prototype.dropAllowed;\n                            }\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                    return Ext.dd.DropZone.prototype.dropNotAllowed;\n\n                },\n\n                onNodeDrop : function(myRowIndex, target, dd, e, data) {\n                    if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n                            if (in_array(data.type, [\"page\", \"link\", \"hardlink\",\"image\", \"text\", \"audio\", \"video\", \"document\"])) {\n                                var rec = this.grid.getStore().getAt(myRowIndex);\n                                rec.set(\"target\", data.path);\n                                this.updateRows();\n                                return true;\n                            }\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                    return false;\n\n                }.bind(this, i)\n            });\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            source: \"\"\n        });\n\n\t\tthis.updateRows();\n    },\n\n    openWizard: function () {\n        var typeCombo = this.getRedirectTypeCombo({\n            name: 'type',\n            fieldLabel: t(\"type\"),\n            value: 'path'\n        });\n\n        this.wizardForm = new Ext.form.FormPanel({\n            bodyStyle: \"padding:10px;\",\n            items: [typeCombo, {\n                xtype: \"textfield\",\n                name: \"pattern\",\n                width: 600,\n                emptyText: \"/some/example/path\",\n                fieldLabel: t(\"source\")\n            }, {\n                xtype: \"textfield\",\n                name: \"target\",\n                width: 600,\n                emptyText: \"/some/example/path\",\n                fieldLabel: t(\"target\")\n            }]\n        });\n\n        this.wizardWindow = new Ext.Window({\n            width: 650,\n            modal: true,\n            items: [this.wizardForm],\n            buttons: [{\n                text: t(\"save\"),\n                iconCls: \"pimcore_icon_accept\",\n                handler: this.saveWizard.bind(this)\n            }]\n        });\n\n        this.wizardWindow.show();\n    },\n\n    saveWizard: function () {\n        var values = this.wizardForm.getForm().getFieldValues();\n        var pattern = values.pattern;\n\n        var record = {\n            type: values['type'],\n            priority: 1,\n            regex: false,\n            active: true,\n            source: pattern.replace('+', ' '),\n            target: values['target']\n        };\n\n        this.grid.store.insert(0, record);\n        this.updateRows();\n\n        this.wizardWindow.close();\n    },\n\n    getRedirectTypeCombo: function (config) {\n\n        var redirectTypesStore = Ext.create('Ext.data.ArrayStore', {\n            fields: ['type', 'name'],\n            data : [\n                [\"entire_uri\", t('redirects_type_entire_uri') + ': https://host.com/foo?key=value'],\n                [\"path_query\", t('redirects_type_path_query') + ': /foo?key=value'],\n                [\"path\", t('redirects_type_path') + ': /foo'],\n                [\"auto_create\", t('auto_create')],\n            ]\n        });\n\n        if(!config) {\n            config = {};\n        }\n\n        config = Ext.merge({\n            store: redirectTypesStore,\n            mode: \"local\",\n            queryMode: \"local\",\n            typeAhead: false,\n            editable: false,\n            displayField: 'name',\n            valueField: 'type',\n            listConfig: {\n                minWidth: 350\n            },\n            forceSelection: true,\n            triggerAction: \"all\"\n        }, config);\n\n        return new Ext.form.ComboBox(config)\n    }\n});\n"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n * @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n * @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\npimcore.registerNS(\"pimcore.settings.redirects\");\npimcore.settings.redirects = Class.create({\n\n    initialize: function () {\n        this.getData();\n    },\n\n    getData: function () {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_redirects_statuscodes'),\n            success: function (response) {\n                this.data = Ext.decode(response.responseText);\n                //valid status codes\n                try {\n                    this.statusCodes = new Ext.data.JsonStore({\n                        autoDestroy: true,\n                        data: this.data.config,\n                        proxy: {\n                            type: 'memory',\n                            reader: {\n                                rootProperty: 'statuscodes'\n                            }\n                        },\n                        fields: ['statusCode', 'display']\n                    });\n                } catch (e2) {\n                    this.statusCodes = new Ext.data.JsonStore({\n                        autoDestroy: true,\n                        fields: ['statusCode', 'display']\n                    });\n                }\n\n\n                this.getTabPanel();\n\n            }.bind(this)\n        });\n    },\n\n    activate: function () {\n        var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n        tabPanel.setActiveItem(\"pimcore_redirects\");\n    },\n\n    getTabPanel: function () {\n\n        if (!this.panel) {\n            this.panel = new Ext.Panel({\n                id: \"pimcore_redirects\",\n                title: t(\"redirects\"),\n                iconCls: \"pimcore_icon_redirects\",\n                border: false,\n                layout: \"fit\",\n                closable:true,\n                items: [this.getRowEditor()]\n            });\n\n            var tabPanel = Ext.getCmp(\"pimcore_panel_tabs\");\n            tabPanel.add(this.panel);\n            tabPanel.setActiveItem(\"pimcore_redirects\");\n\n\n            this.panel.on(\"destroy\", function () {\n                pimcore.globalmanager.remove(\"redirects\");\n            }.bind(this));\n\n            pimcore.layout.refresh();\n        }\n\n        return this.panel;\n    },\n\n    getRowEditor: function () {\n        var that = this;\n\n        var itemsPerPage = pimcore.helpers.grid.getDefaultPageSize();\n        var url = Routing.generate('pimcore_admin_redirects_redirects');\n\n        this.store = pimcore.helpers.grid.buildDefaultStore(\n            url,\n            [\n                {name: 'id'},\n                {name: 'type', allowBlank: false},\n                {name: 'source', allowBlank: false},\n                {name: 'sourceSite'},\n                {name: 'target', allowBlank: false},\n                {name: 'targetSite'},\n                {name: 'statusCode'},\n                {name: 'priority', type:'int'},\n                {name: 'regex'},\n                {name: 'passThroughParameters'},\n                {name: 'active'},\n                {name: 'expiry', type: \"date\", convert: function (v, r) {\n                    if(v && !(v instanceof Date)) {\n                        var d = new Date(intval(v) * 1000);\n                        return d;\n                    } else {\n                        return v;\n                    }\n                }},\n                {name: 'creationDate'},\n                {name: 'modificationDate'}\n            ],\n            itemsPerPage\n        );\n\n        this.store.getProxy().setBatchActions(false);\n        var redirectStore = this.store;\n\n        this.pagingtoolbar = pimcore.helpers.grid.buildDefaultPagingToolbar(this.store);\n\n        this.filterField = new Ext.form.TextField({\n            xtype: \"textfield\",\n            width: 400,\n            style: \"margin: 0 10px 0 0;\",\n            enableKeyEvents: true,\n            listeners: {\n                \"keydown\" : function (field, key) {\n                    if (key.getKey() == key.ENTER) {\n                        var input = field;\n                        var proxy = this.store.getProxy();\n                        proxy.extraParams.filter = input.getValue();\n                        this.pagingtoolbar.moveFirst();\n                    }\n                }.bind(this)\n            }\n        });\n\n        var getRedirectTypeCombo = this.getRedirectTypeCombo();\n\n        var typesColumns = [\n            {\n                text: t(\"type\"),\n                flex: 200,\n                sortable: true,\n                dataIndex: 'type',\n                editor: getRedirectTypeCombo,\n                renderer: function (redirectType) {\n                    var store = getRedirectTypeCombo.getStore();\n                    var pos = store.findExact(\"type\", redirectType);\n                    if(pos >= 0) {\n                        return store.getAt(pos).get(\"name\");\n                    }\n                    return redirectType;\n                }\n            },\n            {text: t(\"source_site\") + ' (' + t('optional') + ')', flex: 200, sortable:true, dataIndex: \"sourceSite\",\n                editor: new Ext.form.ComboBox({\n                store: pimcore.globalmanager.get(\"sites\"),\n                valueField: \"id\",\n                displayField: \"domain\",\n                editable: false,\n                triggerAction: \"all\"\n            }), renderer: function (siteId) {\n                var store = pimcore.globalmanager.get(\"sites\");\n                var pos = store.findExact(\"id\", siteId);\n                if(pos >= 0) {\n                    return store.getAt(pos).get(\"domain\");\n                }\n            }},\n            {\n                text: t(\"source\"),\n                flex: 200,\n                sortable: true,\n                dataIndex: 'source',\n                editor: new Ext.form.TextField({}),\n                renderer: function (value) {\n                    return Ext.util.Format.htmlEncode(value);\n                }\n            },\n            {\n                text: t(\"target_site\") + ' (' + t('optional') + ')', flex: 200, sortable: true, dataIndex: \"targetSite\",\n                editor: new Ext.form.ComboBox({\n                    store: pimcore.globalmanager.get(\"sites\"),\n                    valueField: \"id\",\n                    displayField: \"domain\",\n                    editable: false,\n                    triggerAction: \"all\"\n                }), renderer: function (siteId) {\n                    var store = pimcore.globalmanager.get(\"sites\");\n                    var pos = store.findExact(\"id\", siteId);\n                    if (pos >= 0) {\n                        return store.getAt(pos).get(\"domain\");\n                    }\n                }\n            },\n            {\n                text: t(\"target\"), flex: 200, sortable: false, dataIndex: 'target',\n                editor: {\n                    xtype: 'textfield',\n                    id: 'targetEditor',\n                    fieldCls: \"input_drop_target\",\n                },\n                tdCls: \"input_drop_target\",\n                renderer: function (value) {\n                    return Ext.util.Format.htmlEncode(value);\n                }\n            },\n            {text: t(\"status\"), flex: 70, sortable: true, dataIndex: 'statusCode', editor: new Ext.form.ComboBox({\n                store: this.statusCodes,\n                displayField: 'display',\n                valueField: 'statusCode',\n                mode: \"local\",\n                typeAhead: false,\n                editable: false,\n                listConfig: {minWidth: 200},\n                forceSelection: true,\n                triggerAction: \"all\"\n            })},\n            {text: t(\"priority\"), flex: 60, sortable: true, dataIndex: 'priority',\n                editor: new Ext.form.ComboBox({\n                    store: [\n                        [1, \"1 - \" + t(\"lowest\")],\n                        [2, 2],\n                        [3, 3],\n                        [4, 4],\n                        [5, 5],\n                        [6, 6],\n                        [7, 7],\n                        [8, 8],\n                        [9, 9],\n                        [10, \"10 - \" + t(\"highest\")],\n                        [99, \"99 - \" + t(\"override_all\")]\n                    ],\n                    mode: \"local\",\n                    typeAhead: false,\n                    listConfig: {minWidth: 200},\n                    editable: false,\n                    forceSelection: true,\n                    triggerAction: \"all\"\n            })},\n            new Ext.grid.column.Check({\n                text: t(\"regex\"),\n                dataIndex: \"regex\",\n                flex: 70,\n                editor: {\n                    xtype: 'checkbox',\n                    id: 'regexEditor',\n                    listeners: {\n                        change: function (column, checked, oldChecked, eOpts) {\n                            if (checked) {\n                                Ext.MessageBox.show({\n                                    title: t(\"warning\"),\n                                    msg: t(\"redirect_performance_warning\"),\n                                    buttons: Ext.MessageBox.YESNO,\n                                    fn: function (result) {\n                                        Ext.getCmp('regexEditor').setValue(result === 'yes');\n                                    }.bind(this)\n                                });\n                            }\n                        }.bind(this)\n                    }\n                },\n            }),\n            new Ext.grid.column.Check({\n                text: t(\"pass_through_params\"),\n                dataIndex: \"passThroughParameters\",\n                flex: 100,\n                editor: {\n                    xtype: 'checkbox',\n                }\n            }),\n            new Ext.grid.column.Check({\n                text: t(\"active\"),\n                dataIndex: \"active\",\n                flex: 70,\n                editor: {\n                    xtype: 'checkbox',\n                }\n            }),\n            {\n                text: t(\"expiry\") + ' (' + t('optional') + ')',\n                flex: 150, sortable:true, dataIndex: \"expiry\",\n                editor: {\n                    xtype: 'datefield',\n                    format: 'Y-m-d',\n                    onChange: function(value) {\n                        if(Ext.String.hasHtmlCharacters(value)) {\n                            this.reset();\n                        }\n                    },\n                },\n                renderer:\n                    function(d) {\n                        if(d instanceof Date) {\n                            return Ext.Date.format(d, \"Y-m-d\");\n                        }\n                    }\n            },\n            {text: t(\"creationDate\"), sortable: true, dataIndex: 'creationDate', editable: false,\n                hidden: true,\n                flex: 150,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {text: t(\"modificationDate\"), sortable: true, dataIndex: 'modificationDate', editable: false,\n                hidden: true,\n                flex: 150,\n                renderer: function(d) {\n                    if (d !== undefined) {\n                        var date = new Date(d * 1000);\n                        return Ext.Date.format(date, \"Y-m-d H:i:s\");\n                    } else {\n                        return \"\";\n                    }\n                }\n            },\n            {\n                xtype: 'actioncolumn',\n                menuText: t('delete'),\n                flex: 30,\n                items: [{\n                    tooltip: t('delete'),\n                    icon: \"/bundles/pimcoreadmin/img/flat-color-icons/delete.svg\",\n                    handler: function (grid, rowIndex) {\n                        let data = grid.getStore().getAt(rowIndex);\n                        pimcore.helpers.deleteConfirm(t('redirect'), data.data.id, function () {\n                            grid.getStore().removeAt(rowIndex);\n                            this.updateRows();\n                        }.bind(this));\n                    }.bind(this)\n                }]\n            }\n        ];\n\n        this.rowEditing = Ext.create('Ext.grid.plugin.RowEditing', {\n            clicksToEdit: 1,\n            clicksToMoveEditor: 1,\n            listeners: {\n                beforeedit: function (el, e, eOpts, i) {\n                    var editorRow = el.editor.body;\n                    editorRow.rowIdx = e.rowIdx;\n\n                    let dd = new Ext.dd.DropZone(editorRow, {\n                        ddGroup: \"element\",\n\n                        getTargetFromEvent: function (e) {\n                            return this.getEl();\n                        },\n\n                        onNodeOver: function (target, dd, e, data) {\n                            if (data.records.length == 1) {\n                                try {\n                                    var record = data.records[0];\n                                    var data = record.data;\n\n                                    if (in_array(data.type, [\"page\", \"link\", \"hardlink\", \"image\", \"text\", \"audio\", \"video\", \"document\"])) {\n                                        return Ext.dd.DropZone.prototype.dropAllowed;\n                                    }\n                                } catch (e) {\n                                    console.log(e);\n                                }\n                            }\n                            return Ext.dd.DropZone.prototype.dropNotAllowed;\n\n                        },\n\n                        onNodeDrop: function (myRowIndex, target, dd, e1, data) {\n                            if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                                try {\n                                    var record = data.records[0];\n                                    var data = record.data;\n\n                                    if (in_array(data.type, [\"page\", \"link\", \"hardlink\", \"image\", \"text\", \"audio\", \"video\", \"document\"])) {\n                                        Ext.getCmp('targetEditor').setValue(data.path);\n\n                                        return true;\n                                    }\n                                } catch (e) {\n                                    console.log(e);\n                                }\n                            }\n                        }.bind(this, i)\n                    });\n                }.bind(this),\n                delay: 1\n            }\n        });\n\n        var toolbar = Ext.create('Ext.Toolbar', {\n            cls: 'pimcore_main_toolbar',\n            items: [\n                {\n                    xtype: \"splitbutton\",\n                    text: t('add'),\n                    iconCls: \"pimcore_icon_add\",\n                    handler: this.openWizard.bind(this),\n                    menu: [{\n                        iconCls: \"pimcore_icon_add\",\n                        text: t(\"add_expert_mode\"),\n                        handler: this.onAdd.bind(this)\n                    },{\n                        iconCls: \"pimcore_icon_add\",\n                        text: t(\"add_beginner_mode\"),\n                        handler: this.openWizard.bind(this)\n                    }]\n                },\n                {\n                    text: t(\"export_csv\"),\n                    iconCls: \"pimcore_icon_export\",\n                    handler: function () {\n                        pimcore.helpers.download(Routing.generate('pimcore_admin_redirects_csvexport'));\n                    }\n                },\n                {\n                    text: t(\"import_csv\"),\n                    iconCls: \"pimcore_icon_import\",\n                    handler: function () {\n                        pimcore.helpers.uploadDialog(\n                            Routing.generate('pimcore_admin_redirects_csvimport'), 'redirects',\n                            function (res) {\n                                that.store.reload();\n\n                                var json;\n\n                                try {\n                                    json = Ext.decode(res.response.responseText);\n                                } catch (e) {\n                                    console.error(e);\n                                }\n\n                                if (json && json.data) {\n                                    var stats = json.data;\n\n                                    var icon = 'pimcore_icon_success';\n                                    if (stats.errored > 0) {\n                                        icon = 'pimcore_icon_warning';\n                                    }\n\n                                    var message = '';\n\n                                    message += '<table class=\"pimcore_stats_table\">';\n                                    message += '<tr><th>' + t('redirects_import_total') + '</th><td class=\"pimcore_stats_table--number\">' + stats.total + '</td></tr>';\n                                    message += '<tr><th>' + t('redirects_import_created') + '</th><td class=\"pimcore_stats_table--number\">' + stats.created + '</td></tr>';\n                                    message += '<tr><th>' + t('redirects_import_updated') + '</th><td  class=\"pimcore_stats_table--number\">' + stats.updated + '</td></tr>';\n\n                                    if (stats.errored > 0) {\n                                        message += '<tr><th>' + t('redirects_import_errored') + '</th><td class=\"pimcore_stats_table--number\">' + stats.errored + '</td></tr>';\n                                    }\n\n                                    message += '</table>';\n\n                                    if (stats.errors && Object.keys(stats.errors).length > 0) {\n                                        message += '<h4 style=\"margin-top: 15px; margin-bottom: 0; color: red\">' + t('redirects_import_errors') + '</h4>';\n                                        message += '<table class=\"pimcore_stats_table\">';\n\n                                        var errorKeys = Object.keys(stats.errors);\n                                        for (var i = 0; i < errorKeys.length; i++) {\n                                            message += '<tr><td>' + t('redirects_import_error_line') + ' ' + errorKeys[i] + ':</td><td>' + stats.errors[errorKeys[i]] + '</td></tr>';\n                                        }\n\n                                        message += '</table>';\n                                    }\n\n                                    var win = new Ext.Window({\n                                        modal: true,\n                                        iconCls: icon,\n                                        title: t('redirects_csv_import'),\n                                        width: 400,\n                                        maxHeight: 500,\n                                        html: message,\n                                        autoScroll: true,\n                                        bodyStyle: \"padding: 10px;\",\n                                        buttonAlign: \"center\",\n                                        shadow: false,\n                                        closable: false,\n                                        buttons: [{\n                                            text: t(\"OK\"),\n                                            handler: function () {\n                                                win.close();\n                                            }\n                                        }]\n                                    });\n\n                                    win.show();\n                                }\n                            },\n                            function () {\n                                Ext.MessageBox.alert(t(\"error\"), t(\"error\"));\n                            }\n                        )\n                    }\n                },\n                {\n                    text: t(\"redirects_expired_cleanup\"),\n                    iconCls: \"pimcore_icon_cleanup\",\n                    handler: function () {\n                        Ext.MessageBox.show({\n                            title: t('redirects_expired_cleanup'),\n                            msg: t('redirects_cleanup_warning'),\n                            buttons: Ext.Msg.OKCANCEL,\n                            icon: Ext.MessageBox.INFO,\n                            fn: function (button) {\n                                if (button == \"ok\") {\n                                    this.cleanupExpiredRedirects();\n                                }\n                            }.bind(this)\n                        });\n                    }.bind(this)\n                },\n                \"->\",\n                {\n                    text: t(\"search\") + \" / \" + t(\"test_url\"),\n                    xtype: \"tbtext\",\n                    style: \"margin: 0 10px 0 0;\"\n                },\n                this.filterField\n            ]\n        });\n\n        this.grid = Ext.create('Ext.grid.Panel', {\n            frame: false,\n            autoScroll: true,\n            store: this.store,\n\t\t\tcolumns : typesColumns,\n            trackMouseOver: true,\n            columnLines: true,\n            bodyCls: \"pimcore_editable_grid\",\n            selModel: Ext.create('Ext.selection.RowModel', {}),\n            plugins: [\n                this.rowEditing\n            ],\n            stripeRows: true,\n            bbar: this.pagingtoolbar,\n            tbar: toolbar,\n            viewConfig: {\n                forceFit: true,\n                listeners: {\n                    rowupdated: this.updateRows.bind(this),\n                    refresh: this.updateRows.bind(this)\n                }\n            }\n        });\n\n        this.store.on(\"update\", this.updateRows.bind(this));\n        this.grid.on(\"viewready\", this.updateRows.bind(this));\n        this.grid.on('validateedit', function (editor, context) {\n\n            if(context[\"field\"] == 'priority' && context['newValues']['priority'] == 99) {\n                Ext.MessageBox.show({\n                    title: t(\"warning\"),\n                    msg: t(\"redirect_performance_warning\"),\n                    buttons: Ext.MessageBox.YESNO,\n                    fn: function (result) {\n                        if (result === 'yes') {\n                            editor.cancelEdit();\n                            context['record'].set('priority', 99);\n                        }\n                    }\n                });\n\n                return false;\n            }\n\n            if(context[\"field\"] == 'type' && context['value'] == 'auto_create') {\n                return false;\n            }\n        });\n\n        return this.grid;\n    },\n\n    cleanupExpiredRedirects: function () {\n        Ext.Ajax.request({\n            url: Routing.generate('pimcore_admin_redirects_cleanup'),\n            method: 'DELETE',\n            success: function (response) {\n                try{\n                    var data = Ext.decode(response.responseText);\n                    if (data && data.success) {\n                        this.store.reload();\n                    } else {\n                        pimcore.helpers.showNotification(t(\"error\"), t(\"redirects_cleanup_error\"), \"error\");\n                    }\n                } catch (e) {\n                    pimcore.helpers.showNotification(t(\"error\"), t(\"redirects_cleanup_error\"), \"error\");\n                }\n            }.bind(this)\n        });\n    },\n\n    updateRows: function () {\n\n        var rows = Ext.get(this.grid.getEl().dom).query(\".x-grid-row\");\n\n        for (var i = 0; i < rows.length; i++) {\n\n            var dd = new Ext.dd.DropZone(rows[i], {\n                ddGroup: \"element\",\n\n                getTargetFromEvent: function(e) {\n                    return this.getEl();\n                },\n\n                onNodeOver : function(target, dd, e, data) {\n                    if (data.records.length == 1) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n\n                            if (in_array(data.type, [\"page\", \"link\", \"hardlink\",\"image\", \"text\", \"audio\", \"video\", \"document\"])) {\n                                return Ext.dd.DropZone.prototype.dropAllowed;\n                            }\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                    return Ext.dd.DropZone.prototype.dropNotAllowed;\n\n                },\n\n                onNodeDrop : function(myRowIndex, target, dd, e, data) {\n                    if (pimcore.helpers.dragAndDropValidateSingleItem(data)) {\n                        try {\n                            var record = data.records[0];\n                            var data = record.data;\n                            if (in_array(data.type, [\"page\", \"link\", \"hardlink\",\"image\", \"text\", \"audio\", \"video\", \"document\"])) {\n                                var rec = this.grid.getStore().getAt(myRowIndex);\n                                rec.set(\"target\", data.path);\n                                this.updateRows();\n                                return true;\n                            }\n                        } catch (e) {\n                            console.log(e);\n                        }\n                    }\n                    return false;\n\n                }.bind(this, i)\n            });\n        }\n\n    },\n\n    onAdd: function (btn, ev) {\n        this.grid.store.insert(0, {\n            source: \"\"\n        });\n\n\t\tthis.updateRows();\n    },\n\n    openWizard: function () {\n        var typeCombo = this.getRedirectTypeCombo({\n            name: 'type',\n            fieldLabel: t(\"type\"),\n            value: 'path'\n        });\n\n        this.wizardForm = new Ext.form.FormPanel({\n            bodyStyle: \"padding:10px;\",\n            items: [typeCombo, {\n                xtype: \"textfield\",\n                name: \"pattern\",\n                width: 600,\n                emptyText: \"/some/example/path\",\n                fieldLabel: t(\"source\")\n            }, {\n                xtype: \"textfield\",\n                name: \"target\",\n                width: 600,\n                emptyText: \"/some/example/path\",\n                fieldLabel: t(\"target\")\n            }]\n        });\n\n        this.wizardWindow = new Ext.Window({\n            width: 650,\n            modal: true,\n            items: [this.wizardForm],\n            buttons: [{\n                text: t(\"save\"),\n                iconCls: \"pimcore_icon_accept\",\n                handler: this.saveWizard.bind(this)\n            }]\n        });\n\n        this.wizardWindow.show();\n    },\n\n    saveWizard: function () {\n        var values = this.wizardForm.getForm().getFieldValues();\n        var pattern = values.pattern;\n\n        var record = {\n            type: values['type'],\n            priority: 1,\n            regex: false,\n            active: true,\n            source: pattern.replace('+', ' '),\n            target: values['target']\n        };\n\n        this.grid.store.insert(0, record);\n        this.updateRows();\n\n        this.wizardWindow.close();\n    },\n\n    getRedirectTypeCombo: function (config) {\n\n        var redirectTypesStore = Ext.create('Ext.data.ArrayStore', {\n            fields: ['type', 'name'],\n            data : [\n                [\"entire_uri\", t('redirects_type_entire_uri') + ': https://host.com/foo?key=value'],\n                [\"path_query\", t('redirects_type_path_query') + ': /foo?key=value'],\n                [\"path\", t('redirects_type_path') + ': /foo'],\n                [\"auto_create\", t('auto_create')],\n            ]\n        });\n\n        if(!config) {\n            config = {};\n        }\n\n        config = Ext.merge({\n            store: redirectTypesStore,\n            mode: \"local\",\n            queryMode: \"local\",\n            typeAhead: false,\n            editable: false,\n            displayField: 'name',\n            valueField: 'type',\n            listConfig: {\n                minWidth: 350\n            },\n            forceSelection: true,\n            triggerAction: \"all\"\n        }, config);\n\n        return new Ext.form.ComboBox(config)\n    }\n});\n"], "filenames": ["bundles/AdminBundle/Resources/public/js/pimcore/settings/redirects.js"], "buggy_code_start_loc": [289], "buggy_code_end_loc": [290], "fixing_code_start_loc": [289], "fixing_code_end_loc": [295], "type": "CWE-79", "message": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.19.", "other": {"cve": {"id": "CVE-2023-1515", "sourceIdentifier": "security@huntr.dev", "published": "2023-03-20T15:15:11.503", "lastModified": "2023-03-23T14:12:50.137", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Cross-site Scripting (XSS) - Stored in GitHub repository pimcore/pimcore prior to 10.5.19."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "security@huntr.dev", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:L/AC:L/PR:H/UI:R/S:C/C:L/I:L/A:L", "attackVector": "LOCAL", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "LOW", "baseScore": 5.2, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.1, "impactScore": 3.7}]}, "weaknesses": [{"source": "security@huntr.dev", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:pimcore:*:*:*:*:*:*:*:*", "versionEndExcluding": "10.5.19", "matchCriteriaId": "9F355AEC-329F-43D1-A3D7-44C2481A1999"}]}]}], "references": [{"url": "https://github.com/pimcore/pimcore/commit/44c6b37aa649a0e3105fa41f3d74a3e511acf964", "source": "security@huntr.dev", "tags": ["Patch"]}, {"url": "https://huntr.dev/bounties/ae0f2ec4-a245-4d0b-9d4d-bd8310dd6282", "source": "security@huntr.dev", "tags": ["Exploit", "Issue Tracking", "Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/pimcore/commit/44c6b37aa649a0e3105fa41f3d74a3e511acf964"}}