{"buggy_code": ["<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Base;\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * Base Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nabstract class BaseController extends Base\n{\n    /**\n     * Check if the CSRF token from the URL is correct\n     *\n     * @access protected\n     */\n    protected function checkCSRFParam()\n    {\n        if (! $this->token->validateCSRFToken($this->request->getStringParam('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    protected function checkReusableCSRFParam()\n    {\n        if (! $this->token->validateReusableCSRFToken($this->request->getRawValue('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    protected function checkReusableGETCSRFParam()\n    {\n        if (! $this->token->validateReusableCSRFToken($this->request->getStringParam('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    protected function checkCSRFForm()\n    {\n        if (! $this->token->validateCSRFToken($this->request->getRawValue('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    /**\n     * Check webhook token\n     *\n     * @access protected\n     */\n    protected function checkWebhookToken()\n    {\n        if ($this->configModel->get('webhook_token') !== $this->request->getStringParam('token')) {\n            throw AccessForbiddenException::getInstance()->withoutLayout();\n        }\n    }\n\n    /**\n     * Common method to get a task for task views\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getTask()\n    {\n        $project_id = $this->request->getIntegerParam('project_id');\n        $task = $this->taskFinderModel->getDetails($this->request->getIntegerParam('task_id'));\n\n        if (empty($task)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($project_id !== 0 && $project_id != $task['project_id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $task;\n    }\n\n    /**\n     * Get Task or Project file\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getFile()\n    {\n        $task_id = $this->request->getIntegerParam('task_id');\n        $file_id = $this->request->getIntegerParam('file_id');\n        $model = 'projectFileModel';\n\n        if ($task_id > 0) {\n            $model = 'taskFileModel';\n        }\n\n        $file = $this->$model->getById($file_id);\n\n        if (empty($file)) {\n            throw new PageNotFoundException();\n        }\n\n        if (isset($file['task_id']) && $file['task_id'] != $task_id) {\n            throw new AccessForbiddenException();\n        }\n\n        $file['model'] = $model;\n        return $file;\n    }\n\n    /**\n     * Common method to get a project\n     *\n     * @access protected\n     * @param  integer      $project_id    Default project id\n     * @return array\n     * @throws PageNotFoundException\n     */\n    protected function getProject($project_id = 0)\n    {\n        $project_id = $this->request->getIntegerParam('project_id', $project_id);\n        $project = $this->projectModel->getByIdWithOwnerAndTaskCount($project_id);\n\n        if (empty($project)) {\n            throw new PageNotFoundException();\n        }\n\n        return $project;\n    }\n\n    /**\n     * Common method to get the user\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getUser()\n    {\n        $user = $this->userModel->getById($this->request->getIntegerParam('user_id', $this->userSession->getId()));\n\n        if (empty($user)) {\n            throw new PageNotFoundException();\n        }\n\n        if (! $this->userSession->isAdmin() && $this->userSession->getId() != $user['id']) {\n            // Always returns a 404 otherwise people might guess which user exist.\n            throw new PageNotFoundException();\n        }\n\n        return $user;\n    }\n\n    protected function getSubtask(array $task)\n    {\n        $subtask = $this->subtaskModel->getById($this->request->getIntegerParam('subtask_id'));\n\n        if (empty($subtask)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($subtask['task_id'] != $task['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $subtask;\n    }\n\n    protected function getComment(array $task)\n    {\n        $comment = $this->commentModel->getById($this->request->getIntegerParam('comment_id'));\n\n        if (empty($comment)) {\n            throw new PageNotFoundException();\n        }\n\n        if (! $this->userSession->isAdmin() && $comment['user_id'] != $this->userSession->getId()) {\n            throw new AccessForbiddenException();\n        }\n\n        if ($comment['task_id'] != $task['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $comment;\n    }\n\n    protected function getExternalTaskLink(array $task)\n    {\n        $link = $this->taskExternalLinkModel->getById($this->request->getIntegerParam('link_id'));\n\n        if (empty($link)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($link['task_id'] != $task['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $link;\n    }\n\n    protected function getInternalTaskLink(array $task)\n    {\n        $link = $this->taskLinkModel->getById($this->request->getIntegerParam('link_id'));\n\n        if (empty($link)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($link['task_id'] != $task['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $link;\n    }\n\n    protected function getColumn(array $project)\n    {\n        $column = $this->columnModel->getById($this->request->getIntegerParam('column_id'));\n\n        if (empty($column)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($column['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $column;\n    }\n\n    protected function getSwimlane(array $project)\n    {\n        $swimlane = $this->swimlaneModel->getById($this->request->getIntegerParam('swimlane_id'));\n\n        if (empty($swimlane)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($swimlane['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $swimlane;\n    }\n\n    protected function getCategory(array $project)\n    {\n        $category = $this->categoryModel->getById($this->request->getIntegerParam('category_id'));\n\n        if (empty($category)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($category['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $category;\n    }\n\n    protected function getProjectTag(array $project)\n    {\n        $tag = $this->tagModel->getById($this->request->getIntegerParam('tag_id'));\n\n        if (empty($tag)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($tag['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $tag;\n    }\n\n    protected function getAction(array $project)\n    {\n        $action = $this->actionModel->getById($this->request->getIntegerParam('action_id'));\n\n        if (empty($action)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($action['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $action;\n    }\n\n    protected function getCustomFilter(array $project)\n    {\n        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n\n        if (empty($filter)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($filter['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $filter;\n    }\n\n    /**\n     * Redirect the user after the authentication\n     *\n     * @access protected\n     */\n    protected function redirectAfterLogin()\n    {\n        if (session_exists('redirectAfterLogin') && ! filter_var(session_get('redirectAfterLogin'), FILTER_VALIDATE_URL)) {\n            $redirect = session_get('redirectAfterLogin');\n            session_remove('redirectAfterLogin');\n            $this->response->redirect($redirect);\n        } else {\n            $this->response->redirect($this->helper->url->to('DashboardController', 'show'));\n        }\n    }\n}\n"], "fixing_code": ["<?php\n\nnamespace Kanboard\\Controller;\n\nuse Kanboard\\Core\\Base;\nuse Kanboard\\Core\\Controller\\AccessForbiddenException;\nuse Kanboard\\Core\\Controller\\PageNotFoundException;\n\n/**\n * Base Controller\n *\n * @package  Kanboard\\Controller\n * @author   Frederic Guillot\n */\nabstract class BaseController extends Base\n{\n    /**\n     * Check if the CSRF token from the URL is correct\n     *\n     * @access protected\n     */\n    protected function checkCSRFParam()\n    {\n        if (! $this->token->validateCSRFToken($this->request->getStringParam('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    protected function checkReusableCSRFParam()\n    {\n        if (! $this->token->validateReusableCSRFToken($this->request->getRawValue('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    protected function checkReusableGETCSRFParam()\n    {\n        if (! $this->token->validateReusableCSRFToken($this->request->getStringParam('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    protected function checkCSRFForm()\n    {\n        if (! $this->token->validateCSRFToken($this->request->getRawValue('csrf_token'))) {\n            throw new AccessForbiddenException();\n        }\n    }\n\n    /**\n     * Check webhook token\n     *\n     * @access protected\n     */\n    protected function checkWebhookToken()\n    {\n        if ($this->configModel->get('webhook_token') !== $this->request->getStringParam('token')) {\n            throw AccessForbiddenException::getInstance()->withoutLayout();\n        }\n    }\n\n    /**\n     * Common method to get a task for task views\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getTask()\n    {\n        $project_id = $this->request->getIntegerParam('project_id');\n        $task = $this->taskFinderModel->getDetails($this->request->getIntegerParam('task_id'));\n\n        if (empty($task)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($project_id !== 0 && $project_id != $task['project_id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $task;\n    }\n\n    /**\n     * Get Task or Project file\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     */\n    protected function getFile()\n    {\n        $project_id = $this->request->getIntegerParam('project_id');\n        $task_id = $this->request->getIntegerParam('task_id');\n        $file_id = $this->request->getIntegerParam('file_id');\n        $model = 'projectFileModel';\n\n        if ($task_id > 0) {\n            $model = 'taskFileModel';\n        }\n\n        $file = $this->$model->getById($file_id);\n\n        if (empty($file)) {\n            throw new PageNotFoundException();\n        }\n\n        if (isset($file['task_id']) && $file['task_id'] != $task_id) {\n            throw new PageNotFoundException();\n        }\n\n        if (isset($file['project_id']) && $file['project_id'] != $project_id) {\n            throw new PageNotFoundException();\n        }\n\n        $file['model'] = $model;\n        return $file;\n    }\n\n    /**\n     * Common method to get a project\n     *\n     * @access protected\n     * @param  integer      $project_id    Default project id\n     * @return array\n     * @throws PageNotFoundException\n     */\n    protected function getProject($project_id = 0)\n    {\n        $project_id = $this->request->getIntegerParam('project_id', $project_id);\n        $project = $this->projectModel->getByIdWithOwnerAndTaskCount($project_id);\n\n        if (empty($project)) {\n            throw new PageNotFoundException();\n        }\n\n        return $project;\n    }\n\n    /**\n     * Common method to get the user\n     *\n     * @access protected\n     * @return array\n     * @throws PageNotFoundException\n     * @throws AccessForbiddenException\n     */\n    protected function getUser()\n    {\n        $user = $this->userModel->getById($this->request->getIntegerParam('user_id', $this->userSession->getId()));\n\n        if (empty($user)) {\n            throw new PageNotFoundException();\n        }\n\n        if (! $this->userSession->isAdmin() && $this->userSession->getId() != $user['id']) {\n            // Always returns a 404 otherwise people might guess which user exist.\n            throw new PageNotFoundException();\n        }\n\n        return $user;\n    }\n\n    protected function getSubtask(array $task)\n    {\n        $subtask = $this->subtaskModel->getById($this->request->getIntegerParam('subtask_id'));\n\n        if (empty($subtask)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($subtask['task_id'] != $task['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $subtask;\n    }\n\n    protected function getComment(array $task)\n    {\n        $comment = $this->commentModel->getById($this->request->getIntegerParam('comment_id'));\n\n        if (empty($comment)) {\n            throw new PageNotFoundException();\n        }\n\n        if (! $this->userSession->isAdmin() && $comment['user_id'] != $this->userSession->getId()) {\n            throw new AccessForbiddenException();\n        }\n\n        if ($comment['task_id'] != $task['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $comment;\n    }\n\n    protected function getExternalTaskLink(array $task)\n    {\n        $link = $this->taskExternalLinkModel->getById($this->request->getIntegerParam('link_id'));\n\n        if (empty($link)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($link['task_id'] != $task['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $link;\n    }\n\n    protected function getInternalTaskLink(array $task)\n    {\n        $link = $this->taskLinkModel->getById($this->request->getIntegerParam('link_id'));\n\n        if (empty($link)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($link['task_id'] != $task['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $link;\n    }\n\n    protected function getColumn(array $project)\n    {\n        $column = $this->columnModel->getById($this->request->getIntegerParam('column_id'));\n\n        if (empty($column)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($column['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $column;\n    }\n\n    protected function getSwimlane(array $project)\n    {\n        $swimlane = $this->swimlaneModel->getById($this->request->getIntegerParam('swimlane_id'));\n\n        if (empty($swimlane)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($swimlane['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $swimlane;\n    }\n\n    protected function getCategory(array $project)\n    {\n        $category = $this->categoryModel->getById($this->request->getIntegerParam('category_id'));\n\n        if (empty($category)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($category['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $category;\n    }\n\n    protected function getProjectTag(array $project)\n    {\n        $tag = $this->tagModel->getById($this->request->getIntegerParam('tag_id'));\n\n        if (empty($tag)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($tag['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $tag;\n    }\n\n    protected function getAction(array $project)\n    {\n        $action = $this->actionModel->getById($this->request->getIntegerParam('action_id'));\n\n        if (empty($action)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($action['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $action;\n    }\n\n    protected function getCustomFilter(array $project)\n    {\n        $filter = $this->customFilterModel->getById($this->request->getIntegerParam('filter_id'));\n\n        if (empty($filter)) {\n            throw new PageNotFoundException();\n        }\n\n        if ($filter['project_id'] != $project['id']) {\n            throw new AccessForbiddenException();\n        }\n\n        return $filter;\n    }\n\n    /**\n     * Redirect the user after the authentication\n     *\n     * @access protected\n     */\n    protected function redirectAfterLogin()\n    {\n        if (session_exists('redirectAfterLogin') && ! filter_var(session_get('redirectAfterLogin'), FILTER_VALIDATE_URL)) {\n            $redirect = session_get('redirectAfterLogin');\n            session_remove('redirectAfterLogin');\n            $this->response->redirect($redirect);\n        } else {\n            $this->response->redirect($this->helper->url->to('DashboardController', 'show'));\n        }\n    }\n}\n"], "filenames": ["app/Controller/BaseController.php"], "buggy_code_start_loc": [92], "buggy_code_end_loc": [112], "fixing_code_start_loc": [91], "fixing_code_end_loc": [116], "type": "CWE-639", "message": "Kanboard is open source project management software that focuses on the Kanban methodology. Versions prior to 1.2.30 are subject to an Insecure direct object reference (IDOR) vulnerability present in the application's URL parameter. This vulnerability enables any user to read files uploaded by any other user, regardless of their privileges or restrictions. By Changing the file_id any user can render all the files where MimeType is image uploaded under **/files** directory regard less of uploaded by any user. This vulnerability poses a significant impact and severity to the application's security. By manipulating the URL parameter, an attacker can access sensitive files that should only be available to authorized users. This includes confidential documents or any other type of file stored within the application. The ability to read these files can lead to various detrimental consequences, such as unauthorized disclosure of sensitive information, privacy breaches, intellectual property theft, or exposure of trade secrets. Additionally, it could result in legal and regulatory implications, reputation damage, financial losses, and potential compromise of user trust. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n\n", "other": {"cve": {"id": "CVE-2023-33956", "sourceIdentifier": "security-advisories@github.com", "published": "2023-06-05T20:15:09.460", "lastModified": "2023-06-12T14:14:39.023", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Kanboard is open source project management software that focuses on the Kanban methodology. Versions prior to 1.2.30 are subject to an Insecure direct object reference (IDOR) vulnerability present in the application's URL parameter. This vulnerability enables any user to read files uploaded by any other user, regardless of their privileges or restrictions. By Changing the file_id any user can render all the files where MimeType is image uploaded under **/files** directory regard less of uploaded by any user. This vulnerability poses a significant impact and severity to the application's security. By manipulating the URL parameter, an attacker can access sensitive files that should only be available to authorized users. This includes confidential documents or any other type of file stored within the application. The ability to read these files can lead to various detrimental consequences, such as unauthorized disclosure of sensitive information, privacy breaches, intellectual property theft, or exposure of trade secrets. Additionally, it could result in legal and regulatory implications, reputation damage, financial losses, and potential compromise of user trust. Users are advised to upgrade. There are no known workarounds for this vulnerability.\n\n"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:H/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 6.5, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:L/I:N/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "LOW", "integrityImpact": "NONE", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-639"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-200"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:kanboard:kanboard:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.2.30", "matchCriteriaId": "082DAE98-80F0-4423-8581-AB8D0051EAA1"}]}]}], "references": [{"url": "https://github.com/kanboard/kanboard/commit/437b141fa2267df36976814e704517f30d2424bd", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/kanboard/kanboard/security/advisories/GHSA-r36m-44gg-wxg2", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/kanboard/kanboard/commit/437b141fa2267df36976814e704517f30d2424bd"}}