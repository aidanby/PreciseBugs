{"buggy_code": ["<?php\n    define('AJAX', true);\n\n    require_once \"common.php\";\n\n    # Prepare the controller.\n    $main = MainController::current();\n\n    # Parse the route.\n    $route = Route::current($main);\n\n    if (!$visitor->group->can(\"view_site\"))\n        if ($trigger->exists(\"can_not_view_site\"))\n            $trigger->call(\"can_not_view_site\");\n        else\n            show_403(__(\"Access Denied\"), __(\"You are not allowed to view this site.\"));\n\n    switch($_POST['action']) {\n        case \"edit_post\":\n            if (!isset($_POST['id']))\n                error(__(\"No ID Specified\"), __(\"Please specify an ID of the post you would like to edit.\"));\n\n            $post = new Post($_POST['id'], array(\"filter\" => false, \"drafts\" => true));\n\n            if ($post->no_results) {\n                header(\"HTTP/1.1 404 Not Found\");\n                $trigger->call(\"not_found\");\n                exit;\n            }\n\n            if (!$post->editable())\n                show_403(__(\"Access Denied\"), __(\"You do not have sufficient privileges to edit posts.\"));\n\n            $title = $post->title();\n            $theme_file = THEME_DIR.\"/forms/feathers/\".$post->feather.\".php\";\n            $default_file = FEATHERS_DIR.\"/\".$post->feather.\"/fields.php\";\n\n            $options = array();\n            Trigger::current()->filter($options, array(\"edit_post_options\", \"post_options\"), $post);\n\n            $main->display(\"forms/post/edit\", array(\"post\" => $post,\n                                                    \"feather\" => Feathers::$instances[$post->feather],\n                                                    \"options\" => $options,\n                                                    \"groups\" => Group::find(array(\"order\" => \"id ASC\"))));\n            break;\n\n        case \"delete_post\":\n            $post = new Post($_POST['id'], array(\"drafts\" => true));\n\n            if ($post->no_results) {\n                header(\"HTTP/1.1 404 Not Found\");\n                $trigger->call(\"not_found\");\n                exit;\n            }\n\n            if (!$post->deletable())\n                show_403(__(\"Access Denied\"), __(\"You do not have sufficient privileges to delete this post.\"));\n\n            Post::delete($_POST['id']);\n            break;\n\n        case \"view_post\":\n            fallback($_POST['offset'], 0);\n            fallback($_POST['context']);\n\n            $reason = (isset($_POST['reason'])) ? $_POST['reason'] : \"\" ;\n\n            if (isset($_POST['id']))\n                $post = new Post($_POST['id'], array(\"drafts\" => true));\n\n            if ($post->no_results) {\n                header(\"HTTP/1.1 404 Not Found\");\n                $trigger->call(\"not_found\");\n                exit;\n            }\n\n            $main->display(\"feathers/\".$post->feather, array(\"post\" => $post, \"ajax_reason\" => $reason));\n            break;\n\n        case \"preview\":\n            if (empty($_POST['content']))\n                break;\n\n            $trigger->filter($_POST['content'],\n                             array(\"preview_\".$_POST['feather'], \"preview\"),\n                             $_POST['field'],\n                             $_POST['feather']);\n\n            echo \"<h2 class=\\\"preview-header\\\">\".__(\"Preview\").\"</h2>\\n\".\n                 \"<div class=\\\"preview-content\\\">\".$_POST['content'].\"</div>\";\n            break;\n\n        case \"check_confirm\":\n            if (!$visitor->group->can(\"toggle_extensions\"))\n                show_403(__(\"Access Denied\"), __(\"You do not have sufficient privileges to enable/disable extensions.\"));\n\n            $dir = ($_POST['type'] == \"module\") ? MODULES_DIR : FEATHERS_DIR ;\n            $info = YAML::load($dir.\"/\".$_POST['check'].\"/info.yaml\");\n            fallback($info[\"confirm\"], \"\");\n\n            if (!empty($info[\"confirm\"]))\n                echo __($info[\"confirm\"], $_POST['check']);\n\n            break;\n\n        case \"organize_pages\":\n            foreach ($_POST['parent'] as $id => $parent)\n                $sql->update(\"pages\", array(\"id\" => $id), array(\"parent_id\" => $parent));\n\n            foreach ($_POST['page_list'] as $index => $page)\n                $sql->update(\"pages\", array(\"id\" => $page), array(\"list_order\" => $index));\n\n            break;\n\n        case \"enable_module\": case \"enable_feather\":\n            $type = ($_POST['action'] == \"enable_module\") ? \"module\" : \"feather\" ;\n\n            if (!$visitor->group->can(\"change_settings\"))\n                if ($type == \"module\")\n                    exit(\"{ \\\"notifications\\\": [\\\"\".__(\"You do not have sufficient privileges to enable/disable modules.\").\"\\\"] }\");\n                else\n                    exit(\"{ \\\"notifications\\\": [\\\"\".__(\"You do not have sufficient privileges to enable/disable feathers.\").\"\\\"] }\");\n\n            if (($type == \"module\" and module_enabled($_POST['extension'])) or\n                ($type == \"feather\" and feather_enabled($_POST['extension'])))\n                exit(\"{ \\\"notifications\\\": [] }\");\n\n            $enabled_array = ($type == \"module\") ? \"enabled_modules\" : \"enabled_feathers\" ;\n            $folder        = ($type == \"module\") ? MODULES_DIR : FEATHERS_DIR ;\n\n            if (file_exists($folder.\"/\".$_POST[\"extension\"].\"/locale/\".$config->locale.\".mo\"))\n                load_translator($_POST[\"extension\"], $folder.\"/\".$_POST[\"extension\"].\"/locale/\".$config->locale.\".mo\");\n\n            $info = YAML::load($folder.\"/\".$_POST[\"extension\"].\"/info.yaml\");\n            fallback($info[\"uploader\"], false);\n            fallback($info[\"notifications\"], array());\n\n            foreach ($info[\"notifications\"] as &$notification)\n                $notification = addslashes(__($notification, $_POST[\"extension\"]));\n\n            require $folder.\"/\".$_POST[\"extension\"].\"/\".$_POST[\"extension\"].\".php\";\n\n            if ($info[\"uploader\"])\n                if (!file_exists(MAIN_DIR.$config->uploads_path))\n                    $info[\"notifications\"][] = _f(\"Please create the <code>%s</code> directory at your Chyrp install's root and CHMOD it to 777.\", array($config->uploads_path));\n                elseif (!is_writable(MAIN_DIR.$config->uploads_path))\n                    $info[\"notifications\"][] = _f(\"Please CHMOD <code>%s</code> to 777.\", array($config->uploads_path));\n\n            $class_name = camelize($_POST[\"extension\"]);\n\n            if ($type == \"module\" and !is_subclass_of($class_name, \"Modules\"))\n                error(\"\", __(\"Item is not a module.\"));\n\n            if ($type == \"feather\" and !is_subclass_of($class_name, \"Feathers\"))\n                error(\"\", __(\"Item is not a feather.\"));\n\n            if (method_exists($class_name, \"__install\"))\n                call_user_func(array($class_name, \"__install\"));\n\n            $new = $config->$enabled_array;\n            array_push($new, $_POST[\"extension\"]);\n            $config->set($enabled_array, $new);\n\n            exit('{ \"notifications\": ['.\n                 (!empty($info[\"notifications\"]) ? '\"'.implode('\", \"', $info[\"notifications\"]).'\"' : \"\").\n                 '] }');\n\n            break;\n\n        case \"disable_module\": case \"disable_feather\":\n            $type = ($_POST['action'] == \"disable_module\") ? \"module\" : \"feather\" ;\n\n            if (!$visitor->group->can(\"change_settings\"))\n                if ($type == \"module\")\n                    exit(\"{ \\\"notifications\\\": [\\\"\".__(\"You do not have sufficient privileges to enable/disable modules.\").\"\\\"] }\");\n                else\n                    exit(\"{ \\\"notifications\\\": [\\\"\".__(\"You do not have sufficient privileges to enable/disable feathers.\").\"\\\"] }\");\n\n            if (($type == \"module\" and !module_enabled($_POST['extension'])) or\n                ($type == \"feather\" and !feather_enabled($_POST['extension'])))\n                exit(\"{ \\\"notifications\\\": [] }\");\n\n            $class_name = camelize($_POST[\"extension\"]);\n            if (method_exists($class_name, \"__uninstall\"))\n                call_user_func(array($class_name, \"__uninstall\"), ($_POST['confirm'] == \"1\"));\n\n            $enabled_array = ($type == \"module\") ? \"enabled_modules\" : \"enabled_feathers\" ;\n            $config->set($enabled_array,\n                         array_diff($config->$enabled_array, array($_POST['extension'])));\n\n            exit('{ \"notifications\": [] }');\n\n            break;\n\n        case \"reorder_feathers\":\n            $reorder = oneof(@$_POST['list'], $config->enabled_feathers);\n            foreach ($reorder as &$value)\n                $value = preg_replace(\"/feathers\\[([^\\]]+)\\]/\", \"\\\\1\", $value);\n\n            $config->set(\"enabled_feathers\", $reorder);\n            break;\n    }\n\n    $trigger->call(\"ajax\");\n\n    if (!empty($_POST['action']))\n        $trigger->call(\"ajax_\".$_POST['action']);\n"], "fixing_code": ["<?php\n    define('AJAX', true);\n\n    require_once \"common.php\";\n\n    # Prepare the controller.\n    $main = MainController::current();\n\n    # Parse the route.\n    $route = Route::current($main);\n\n    if (!$visitor->group->can(\"view_site\"))\n        if ($trigger->exists(\"can_not_view_site\"))\n            $trigger->call(\"can_not_view_site\");\n        else\n            show_403(__(\"Access Denied\"), __(\"You are not allowed to view this site.\"));\n\n    switch($_POST['action']) {\n        case \"edit_post\":\n            if (!isset($_POST['id']))\n                error(__(\"No ID Specified\"), __(\"Please specify an ID of the post you would like to edit.\"));\n\n            $post = new Post($_POST['id'], array(\"filter\" => false, \"drafts\" => true));\n\n            if ($post->no_results) {\n                header(\"HTTP/1.1 404 Not Found\");\n                $trigger->call(\"not_found\");\n                exit;\n            }\n\n            if (!$post->editable())\n                show_403(__(\"Access Denied\"), __(\"You do not have sufficient privileges to edit posts.\"));\n\n            $title = $post->title();\n            $theme_file = THEME_DIR.\"/forms/feathers/\".$post->feather.\".php\";\n            $default_file = FEATHERS_DIR.\"/\".$post->feather.\"/fields.php\";\n\n            $options = array();\n            Trigger::current()->filter($options, array(\"edit_post_options\", \"post_options\"), $post);\n\n            $main->display(\"forms/post/edit\", array(\"post\" => $post,\n                                                    \"feather\" => Feathers::$instances[$post->feather],\n                                                    \"options\" => $options,\n                                                    \"groups\" => Group::find(array(\"order\" => \"id ASC\"))));\n            break;\n\n        case \"delete_post\":\n            $post = new Post($_POST['id'], array(\"drafts\" => true));\n\n            if ($post->no_results) {\n                header(\"HTTP/1.1 404 Not Found\");\n                $trigger->call(\"not_found\");\n                exit;\n            }\n\n            if (!$post->deletable())\n                show_403(__(\"Access Denied\"), __(\"You do not have sufficient privileges to delete this post.\"));\n\n            Post::delete($_POST['id']);\n            break;\n\n        case \"view_post\":\n            fallback($_POST['offset'], 0);\n            fallback($_POST['context']);\n\n            $reason = (isset($_POST['reason'])) ? $_POST['reason'] : \"\" ;\n\n            if (isset($_POST['id']))\n                $post = new Post($_POST['id'], array(\"drafts\" => true));\n\n            if ($post->no_results) {\n                header(\"HTTP/1.1 404 Not Found\");\n                $trigger->call(\"not_found\");\n                exit;\n            }\n\n            $main->display(\"feathers/\".$post->feather, array(\"post\" => $post, \"ajax_reason\" => $reason));\n            break;\n\n        case \"preview\":\n            if (empty($_POST['content']))\n                break;\n\n            $trigger->filter($_POST['content'],\n                             array(\"preview_\".$_POST['feather'], \"preview\"),\n                             $_POST['field'],\n                             $_POST['feather']);\n\n            echo \"<h2 class=\\\"preview-header\\\">\".__(\"Preview\").\"</h2>\\n\".\n                 \"<div class=\\\"preview-content\\\">\".fix($_POST['content']).\"</div>\";\n            break;\n\n        case \"check_confirm\":\n            if (!$visitor->group->can(\"toggle_extensions\"))\n                show_403(__(\"Access Denied\"), __(\"You do not have sufficient privileges to enable/disable extensions.\"));\n\n            $dir = ($_POST['type'] == \"module\") ? MODULES_DIR : FEATHERS_DIR ;\n            $info = YAML::load($dir.\"/\".$_POST['check'].\"/info.yaml\");\n            fallback($info[\"confirm\"], \"\");\n\n            if (!empty($info[\"confirm\"]))\n                echo __($info[\"confirm\"], $_POST['check']);\n\n            break;\n\n        case \"organize_pages\":\n            foreach ($_POST['parent'] as $id => $parent)\n                $sql->update(\"pages\", array(\"id\" => $id), array(\"parent_id\" => $parent));\n\n            foreach ($_POST['page_list'] as $index => $page)\n                $sql->update(\"pages\", array(\"id\" => $page), array(\"list_order\" => $index));\n\n            break;\n\n        case \"enable_module\": case \"enable_feather\":\n            $type = ($_POST['action'] == \"enable_module\") ? \"module\" : \"feather\" ;\n\n            if (!$visitor->group->can(\"change_settings\"))\n                if ($type == \"module\")\n                    exit(\"{ \\\"notifications\\\": [\\\"\".__(\"You do not have sufficient privileges to enable/disable modules.\").\"\\\"] }\");\n                else\n                    exit(\"{ \\\"notifications\\\": [\\\"\".__(\"You do not have sufficient privileges to enable/disable feathers.\").\"\\\"] }\");\n\n            if (($type == \"module\" and module_enabled($_POST['extension'])) or\n                ($type == \"feather\" and feather_enabled($_POST['extension'])))\n                exit(\"{ \\\"notifications\\\": [] }\");\n\n            $enabled_array = ($type == \"module\") ? \"enabled_modules\" : \"enabled_feathers\" ;\n            $folder        = ($type == \"module\") ? MODULES_DIR : FEATHERS_DIR ;\n\n            if (file_exists($folder.\"/\".$_POST[\"extension\"].\"/locale/\".$config->locale.\".mo\"))\n                load_translator($_POST[\"extension\"], $folder.\"/\".$_POST[\"extension\"].\"/locale/\".$config->locale.\".mo\");\n\n            $info = YAML::load($folder.\"/\".$_POST[\"extension\"].\"/info.yaml\");\n            fallback($info[\"uploader\"], false);\n            fallback($info[\"notifications\"], array());\n\n            foreach ($info[\"notifications\"] as &$notification)\n                $notification = addslashes(__($notification, $_POST[\"extension\"]));\n\n            require $folder.\"/\".$_POST[\"extension\"].\"/\".$_POST[\"extension\"].\".php\";\n\n            if ($info[\"uploader\"])\n                if (!file_exists(MAIN_DIR.$config->uploads_path))\n                    $info[\"notifications\"][] = _f(\"Please create the <code>%s</code> directory at your Chyrp install's root and CHMOD it to 777.\", array($config->uploads_path));\n                elseif (!is_writable(MAIN_DIR.$config->uploads_path))\n                    $info[\"notifications\"][] = _f(\"Please CHMOD <code>%s</code> to 777.\", array($config->uploads_path));\n\n            $class_name = camelize($_POST[\"extension\"]);\n\n            if ($type == \"module\" and !is_subclass_of($class_name, \"Modules\"))\n                error(\"\", __(\"Item is not a module.\"));\n\n            if ($type == \"feather\" and !is_subclass_of($class_name, \"Feathers\"))\n                error(\"\", __(\"Item is not a feather.\"));\n\n            if (method_exists($class_name, \"__install\"))\n                call_user_func(array($class_name, \"__install\"));\n\n            $new = $config->$enabled_array;\n            array_push($new, $_POST[\"extension\"]);\n            $config->set($enabled_array, $new);\n\n            exit('{ \"notifications\": ['.\n                 (!empty($info[\"notifications\"]) ? '\"'.implode('\", \"', $info[\"notifications\"]).'\"' : \"\").\n                 '] }');\n\n            break;\n\n        case \"disable_module\": case \"disable_feather\":\n            $type = ($_POST['action'] == \"disable_module\") ? \"module\" : \"feather\" ;\n\n            if (!$visitor->group->can(\"change_settings\"))\n                if ($type == \"module\")\n                    exit(\"{ \\\"notifications\\\": [\\\"\".__(\"You do not have sufficient privileges to enable/disable modules.\").\"\\\"] }\");\n                else\n                    exit(\"{ \\\"notifications\\\": [\\\"\".__(\"You do not have sufficient privileges to enable/disable feathers.\").\"\\\"] }\");\n\n            if (($type == \"module\" and !module_enabled($_POST['extension'])) or\n                ($type == \"feather\" and !feather_enabled($_POST['extension'])))\n                exit(\"{ \\\"notifications\\\": [] }\");\n\n            $class_name = camelize($_POST[\"extension\"]);\n            if (method_exists($class_name, \"__uninstall\"))\n                call_user_func(array($class_name, \"__uninstall\"), ($_POST['confirm'] == \"1\"));\n\n            $enabled_array = ($type == \"module\") ? \"enabled_modules\" : \"enabled_feathers\" ;\n            $config->set($enabled_array,\n                         array_diff($config->$enabled_array, array($_POST['extension'])));\n\n            exit('{ \"notifications\": [] }');\n\n            break;\n\n        case \"reorder_feathers\":\n            $reorder = oneof(@$_POST['list'], $config->enabled_feathers);\n            foreach ($reorder as &$value)\n                $value = preg_replace(\"/feathers\\[([^\\]]+)\\]/\", \"\\\\1\", $value);\n\n            $config->set(\"enabled_feathers\", $reorder);\n            break;\n    }\n\n    $trigger->call(\"ajax\");\n\n    if (!empty($_POST['action']))\n        $trigger->call(\"ajax_\".$_POST['action']);\n"], "filenames": ["includes/ajax.php"], "buggy_code_start_loc": [90], "buggy_code_end_loc": [91], "fixing_code_start_loc": [90], "fixing_code_end_loc": [91], "type": "CWE-79", "message": "Multiple cross-site scripting (XSS) vulnerabilities in Chyrp before 2.1.2 and before 2.5 Beta 2 allow remote attackers to inject arbitrary web script or HTML via the (1) content parameter to includes/ajax.php or (2) body parameter to includes/error.php.", "other": {"cve": {"id": "CVE-2012-1001", "sourceIdentifier": "cve@mitre.org", "published": "2019-11-21T22:15:15.207", "lastModified": "2019-12-04T15:36:07.627", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Multiple cross-site scripting (XSS) vulnerabilities in Chyrp before 2.1.2 and before 2.5 Beta 2 allow remote attackers to inject arbitrary web script or HTML via the (1) content parameter to includes/ajax.php or (2) body parameter to includes/error.php."}, {"lang": "es", "value": "M\u00faltiples vulnerabilidades de tipo cross-site scripting (XSS) en Chyrp versiones anteriores a 2.1.2 y versiones anteriores a 2.5 Beta 2, permiten a atacantes remotos inyectar script web o HTML arbitrario por medio del (1) par\u00e1metro content en el archivo includes/ajax.php o (2) par\u00e1metro body en el archivo includes/error.php."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:chyrp:chyrp:*:*:*:*:*:*:*:*", "versionEndExcluding": "2.1.2", "matchCriteriaId": "A5C993CD-2350-4F59-892B-ED509F869C04"}, {"vulnerable": true, "criteria": "cpe:2.3:a:chyrp:chyrp:2.5.2:b1:*:*:*:*:*:*", "matchCriteriaId": "CBA20B10-CB35-465E-8672-91B4DDA5FA7B"}]}]}], "references": [{"url": "http://archives.neohapsis.com/archives/bugtraq/2012-02/0121.html", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "http://chyrp.net/2012/02/02/heres-whats-been-going-on-recently/", "source": "cve@mitre.org", "tags": ["Broken Link"]}, {"url": "http://www.securityfocus.com/bid/52115", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "http://www.securityfocus.com/bid/52117", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://github.com/vito/chyrp/commit/f69bd791c37e0b154c0bda16f9759ba19cc77f6c", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://www.htbridge.ch/advisory/HTB23073", "source": "cve@mitre.org", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/vito/chyrp/commit/f69bd791c37e0b154c0bda16f9759ba19cc77f6c"}}