{"buggy_code": ["<?php\n/**\n * Main WordPress API\n *\n * @package WordPress\n */\n\nrequire( ABSPATH . WPINC . '/option.php' );\n\n/**\n * Convert given date string into a different format.\n *\n * $format should be either a PHP date format string, e.g. 'U' for a Unix\n * timestamp, or 'G' for a Unix timestamp assuming that $date is GMT.\n *\n * If $translate is true then the given date and format string will\n * be passed to date_i18n() for translation.\n *\n * @since 0.71\n *\n * @param string $format    Format of the date to return.\n * @param string $date      Date string to convert.\n * @param bool   $translate Whether the return date should be translated. Default true.\n * @return string|int|bool Formatted date string or Unix timestamp. False if $date is empty.\n */\nfunction mysql2date( $format, $date, $translate = true ) {\n\tif ( empty( $date ) )\n\t\treturn false;\n\n\tif ( 'G' == $format )\n\t\treturn strtotime( $date . ' +0000' );\n\n\t$i = strtotime( $date );\n\n\tif ( 'U' == $format )\n\t\treturn $i;\n\n\tif ( $translate )\n\t\treturn date_i18n( $format, $i );\n\telse\n\t\treturn date( $format, $i );\n}\n\n/**\n * Retrieve the current time based on specified type.\n *\n * The 'mysql' type will return the time in the format for MySQL DATETIME field.\n * The 'timestamp' type will return the current timestamp.\n * Other strings will be interpreted as PHP date formats (e.g. 'Y-m-d').\n *\n * If $gmt is set to either '1' or 'true', then both types will use GMT time.\n * if $gmt is false, the output is adjusted with the GMT offset in the WordPress option.\n *\n * @since 1.0.0\n *\n * @param string   $type Type of time to retrieve. Accepts 'mysql', 'timestamp', or PHP date\n *                       format string (e.g. 'Y-m-d').\n * @param int|bool $gmt  Optional. Whether to use GMT timezone. Default false.\n * @return int|string Integer if $type is 'timestamp', string otherwise.\n */\nfunction current_time( $type, $gmt = 0 ) {\n\tswitch ( $type ) {\n\t\tcase 'mysql':\n\t\t\treturn ( $gmt ) ? gmdate( 'Y-m-d H:i:s' ) : gmdate( 'Y-m-d H:i:s', ( time() + ( get_option( 'gmt_offset' ) * HOUR_IN_SECONDS ) ) );\n\t\tcase 'timestamp':\n\t\t\treturn ( $gmt ) ? time() : time() + ( get_option( 'gmt_offset' ) * HOUR_IN_SECONDS );\n\t\tdefault:\n\t\t\treturn ( $gmt ) ? date( $type ) : date( $type, time() + ( get_option( 'gmt_offset' ) * HOUR_IN_SECONDS ) );\n\t}\n}\n\n/**\n * Retrieve the date in localized format, based on timestamp.\n *\n * If the locale specifies the locale month and weekday, then the locale will\n * take over the format for the date. If it isn't, then the date format string\n * will be used instead.\n *\n * @since 0.71\n *\n * @global WP_Locale $wp_locale\n *\n * @param string   $dateformatstring Format to display the date.\n * @param bool|int $unixtimestamp    Optional. Unix timestamp. Default false.\n * @param bool     $gmt              Optional. Whether to use GMT timezone. Default false.\n *\n * @return string The date, translated if locale specifies it.\n */\nfunction date_i18n( $dateformatstring, $unixtimestamp = false, $gmt = false ) {\n\tglobal $wp_locale;\n\t$i = $unixtimestamp;\n\n\tif ( false === $i ) {\n\t\t$i = current_time( 'timestamp', $gmt );\n\t}\n\n\t/*\n\t * Store original value for language with untypical grammars.\n\t * See https://core.trac.wordpress.org/ticket/9396\n\t */\n\t$req_format = $dateformatstring;\n\n\tif ( ( !empty( $wp_locale->month ) ) && ( !empty( $wp_locale->weekday ) ) ) {\n\t\t$datemonth = $wp_locale->get_month( date( 'm', $i ) );\n\t\t$datemonth_abbrev = $wp_locale->get_month_abbrev( $datemonth );\n\t\t$dateweekday = $wp_locale->get_weekday( date( 'w', $i ) );\n\t\t$dateweekday_abbrev = $wp_locale->get_weekday_abbrev( $dateweekday );\n\t\t$datemeridiem = $wp_locale->get_meridiem( date( 'a', $i ) );\n\t\t$datemeridiem_capital = $wp_locale->get_meridiem( date( 'A', $i ) );\n\t\t$dateformatstring = ' '.$dateformatstring;\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])D/\", \"\\\\1\" . backslashit( $dateweekday_abbrev ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])F/\", \"\\\\1\" . backslashit( $datemonth ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])l/\", \"\\\\1\" . backslashit( $dateweekday ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])M/\", \"\\\\1\" . backslashit( $datemonth_abbrev ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])a/\", \"\\\\1\" . backslashit( $datemeridiem ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])A/\", \"\\\\1\" . backslashit( $datemeridiem_capital ), $dateformatstring );\n\n\t\t$dateformatstring = substr( $dateformatstring, 1, strlen( $dateformatstring ) -1 );\n\t}\n\t$timezone_formats = array( 'P', 'I', 'O', 'T', 'Z', 'e' );\n\t$timezone_formats_re = implode( '|', $timezone_formats );\n\tif ( preg_match( \"/$timezone_formats_re/\", $dateformatstring ) ) {\n\t\t$timezone_string = get_option( 'timezone_string' );\n\t\tif ( $timezone_string ) {\n\t\t\t$timezone_object = timezone_open( $timezone_string );\n\t\t\t$date_object = date_create( null, $timezone_object );\n\t\t\tforeach ( $timezone_formats as $timezone_format ) {\n\t\t\t\tif ( false !== strpos( $dateformatstring, $timezone_format ) ) {\n\t\t\t\t\t$formatted = date_format( $date_object, $timezone_format );\n\t\t\t\t\t$dateformatstring = ' '.$dateformatstring;\n\t\t\t\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])$timezone_format/\", \"\\\\1\" . backslashit( $formatted ), $dateformatstring );\n\t\t\t\t\t$dateformatstring = substr( $dateformatstring, 1, strlen( $dateformatstring ) -1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t$j = @date( $dateformatstring, $i );\n\n\t/**\n\t * Filters the date formatted based on the locale.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $j          Formatted date string.\n\t * @param string $req_format Format to display the date.\n\t * @param int    $i          Unix timestamp.\n\t * @param bool   $gmt        Whether to convert to GMT for time. Default false.\n\t */\n\t$j = apply_filters( 'date_i18n', $j, $req_format, $i, $gmt );\n\treturn $j;\n}\n\n/**\n * Determines if the date should be declined.\n *\n * If the locale specifies that month names require a genitive case in certain\n * formats (like 'j F Y'), the month name will be replaced with a correct form.\n *\n * @since 4.4.0\n *\n * @global WP_Locale $wp_locale\n *\n * @param string $date Formatted date string.\n * @return string The date, declined if locale specifies it.\n */\nfunction wp_maybe_decline_date( $date ) {\n\tglobal $wp_locale;\n\n\t// i18n functions are not available in SHORTINIT mode\n\tif ( ! function_exists( '_x' ) ) {\n\t\treturn $date;\n\t}\n\n\t/* translators: If months in your language require a genitive case,\n\t * translate this to 'on'. Do not translate into your own language.\n\t */\n\tif ( 'on' === _x( 'off', 'decline months names: on or off' ) ) {\n\t\t// Match a format like 'j F Y' or 'j. F'\n\t\tif ( @preg_match( '#^\\d{1,2}\\.? [^\\d ]+#u', $date ) ) {\n\t\t\t$months          = $wp_locale->month;\n\t\t\t$months_genitive = $wp_locale->month_genitive;\n\n\t\t\tforeach ( $months as $key => $month ) {\n\t\t\t\t$months[ $key ] = '# ' . $month . '( |$)#u';\n\t\t\t}\n\n\t\t\tforeach ( $months_genitive as $key => $month ) {\n\t\t\t\t$months_genitive[ $key ] = ' ' . $month . '$1';\n\t\t\t}\n\n\t\t\t$date = preg_replace( $months, $months_genitive, $date );\n\t\t}\n\t}\n\n\t// Used for locale-specific rules\n\t$locale = get_locale();\n\n\tif ( 'ca' === $locale ) {\n\t\t// \" de abril| de agost| de octubre...\" -> \" d'abril| d'agost| d'octubre...\"\n\t\t$date = preg_replace( '# de ([ao])#i', \" d'\\\\1\", $date );\n\t}\n\n\treturn $date;\n}\n\n/**\n * Convert float number to format based on the locale.\n *\n * @since 2.3.0\n *\n * @global WP_Locale $wp_locale\n *\n * @param float $number   The number to convert based on locale.\n * @param int   $decimals Optional. Precision of the number of decimal places. Default 0.\n * @return string Converted number in string format.\n */\nfunction number_format_i18n( $number, $decimals = 0 ) {\n\tglobal $wp_locale;\n\n\tif ( isset( $wp_locale ) ) {\n\t\t$formatted = number_format( $number, absint( $decimals ), $wp_locale->number_format['decimal_point'], $wp_locale->number_format['thousands_sep'] );\n\t} else {\n\t\t$formatted = number_format( $number, absint( $decimals ) );\n\t}\n\n\t/**\n\t * Filters the number formatted based on the locale.\n\t *\n\t * @since 2.8.0\n\t * @since 4.9.0 The `$number` and `$decimals` arguments were added.\n\t *\n\t * @param string $formatted Converted number in string format.\n\t * @param float  $number    The number to convert based on locale.\n\t * @param int    $decimals  Precision of the number of decimal places.\n\t */\n\treturn apply_filters( 'number_format_i18n', $formatted, $number, $decimals );\n}\n\n/**\n * Convert number of bytes largest unit bytes will fit into.\n *\n * It is easier to read 1 KB than 1024 bytes and 1 MB than 1048576 bytes. Converts\n * number of bytes to human readable number by taking the number of that unit\n * that the bytes will go into it. Supports TB value.\n *\n * Please note that integers in PHP are limited to 32 bits, unless they are on\n * 64 bit architecture, then they have 64 bit size. If you need to place the\n * larger size then what PHP integer type will hold, then use a string. It will\n * be converted to a double, which should always have 64 bit length.\n *\n * Technically the correct unit names for powers of 1024 are KiB, MiB etc.\n *\n * @since 2.3.0\n *\n * @param int|string $bytes    Number of bytes. Note max integer size for integers.\n * @param int        $decimals Optional. Precision of number of decimal places. Default 0.\n * @return string|false False on failure. Number string on success.\n */\nfunction size_format( $bytes, $decimals = 0 ) {\n\t$quant = array(\n\t\t'TB' => TB_IN_BYTES,\n\t\t'GB' => GB_IN_BYTES,\n\t\t'MB' => MB_IN_BYTES,\n\t\t'KB' => KB_IN_BYTES,\n\t\t'B'  => 1,\n\t);\n\n\tif ( 0 === $bytes ) {\n\t\treturn number_format_i18n( 0, $decimals ) . ' B';\n\t}\n\n\tforeach ( $quant as $unit => $mag ) {\n\t\tif ( doubleval( $bytes ) >= $mag ) {\n\t\t\treturn number_format_i18n( $bytes / $mag, $decimals ) . ' ' . $unit;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Get the week start and end from the datetime or date string from MySQL.\n *\n * @since 0.71\n *\n * @param string     $mysqlstring   Date or datetime field type from MySQL.\n * @param int|string $start_of_week Optional. Start of the week as an integer. Default empty string.\n * @return array Keys are 'start' and 'end'.\n */\nfunction get_weekstartend( $mysqlstring, $start_of_week = '' ) {\n\t// MySQL string year.\n\t$my = substr( $mysqlstring, 0, 4 );\n\n\t// MySQL string month.\n\t$mm = substr( $mysqlstring, 8, 2 );\n\n\t// MySQL string day.\n\t$md = substr( $mysqlstring, 5, 2 );\n\n\t// The timestamp for MySQL string day.\n\t$day = mktime( 0, 0, 0, $md, $mm, $my );\n\n\t// The day of the week from the timestamp.\n\t$weekday = date( 'w', $day );\n\n\tif ( !is_numeric($start_of_week) )\n\t\t$start_of_week = get_option( 'start_of_week' );\n\n\tif ( $weekday < $start_of_week )\n\t\t$weekday += 7;\n\n\t// The most recent week start day on or before $day.\n\t$start = $day - DAY_IN_SECONDS * ( $weekday - $start_of_week );\n\n\t// $start + 1 week - 1 second.\n\t$end = $start + WEEK_IN_SECONDS - 1;\n\treturn compact( 'start', 'end' );\n}\n\n/**\n * Unserialize value only if it was serialized.\n *\n * @since 2.0.0\n *\n * @param string $original Maybe unserialized original, if is needed.\n * @return mixed Unserialized data can be any type.\n */\nfunction maybe_unserialize( $original ) {\n\tif ( is_serialized( $original ) ) // don't attempt to unserialize data that wasn't serialized going in\n\t\treturn @unserialize( $original );\n\treturn $original;\n}\n\n/**\n * Check value to find if it was serialized.\n *\n * If $data is not an string, then returned value will always be false.\n * Serialized data is always a string.\n *\n * @since 2.0.5\n *\n * @param string $data   Value to check to see if was serialized.\n * @param bool   $strict Optional. Whether to be strict about the end of the string. Default true.\n * @return bool False if not serialized and true if it was.\n */\nfunction is_serialized( $data, $strict = true ) {\n\t// if it isn't a string, it isn't serialized.\n\tif ( ! is_string( $data ) ) {\n\t\treturn false;\n\t}\n\t$data = trim( $data );\n \tif ( 'N;' == $data ) {\n\t\treturn true;\n\t}\n\tif ( strlen( $data ) < 4 ) {\n\t\treturn false;\n\t}\n\tif ( ':' !== $data[1] ) {\n\t\treturn false;\n\t}\n\tif ( $strict ) {\n\t\t$lastc = substr( $data, -1 );\n\t\tif ( ';' !== $lastc && '}' !== $lastc ) {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\t$semicolon = strpos( $data, ';' );\n\t\t$brace     = strpos( $data, '}' );\n\t\t// Either ; or } must exist.\n\t\tif ( false === $semicolon && false === $brace )\n\t\t\treturn false;\n\t\t// But neither must be in the first X characters.\n\t\tif ( false !== $semicolon && $semicolon < 3 )\n\t\t\treturn false;\n\t\tif ( false !== $brace && $brace < 4 )\n\t\t\treturn false;\n\t}\n\t$token = $data[0];\n\tswitch ( $token ) {\n\t\tcase 's' :\n\t\t\tif ( $strict ) {\n\t\t\t\tif ( '\"' !== substr( $data, -2, 1 ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} elseif ( false === strpos( $data, '\"' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// or else fall through\n\t\tcase 'a' :\n\t\tcase 'O' :\n\t\t\treturn (bool) preg_match( \"/^{$token}:[0-9]+:/s\", $data );\n\t\tcase 'b' :\n\t\tcase 'i' :\n\t\tcase 'd' :\n\t\t\t$end = $strict ? '$' : '';\n\t\t\treturn (bool) preg_match( \"/^{$token}:[0-9.E-]+;$end/\", $data );\n\t}\n\treturn false;\n}\n\n/**\n * Check whether serialized data is of string type.\n *\n * @since 2.0.5\n *\n * @param string $data Serialized data.\n * @return bool False if not a serialized string, true if it is.\n */\nfunction is_serialized_string( $data ) {\n\t// if it isn't a string, it isn't a serialized string.\n\tif ( ! is_string( $data ) ) {\n\t\treturn false;\n\t}\n\t$data = trim( $data );\n\tif ( strlen( $data ) < 4 ) {\n\t\treturn false;\n\t} elseif ( ':' !== $data[1] ) {\n\t\treturn false;\n\t} elseif ( ';' !== substr( $data, -1 ) ) {\n\t\treturn false;\n\t} elseif ( $data[0] !== 's' ) {\n\t\treturn false;\n\t} elseif ( '\"' !== substr( $data, -2, 1 ) ) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\n/**\n * Serialize data, if needed.\n *\n * @since 2.0.5\n *\n * @param string|array|object $data Data that might be serialized.\n * @return mixed A scalar data\n */\nfunction maybe_serialize( $data ) {\n\tif ( is_array( $data ) || is_object( $data ) )\n\t\treturn serialize( $data );\n\n\t// Double serialization is required for backward compatibility.\n\t// See https://core.trac.wordpress.org/ticket/12930\n\t// Also the world will end. See WP 3.6.1.\n\tif ( is_serialized( $data, false ) )\n\t\treturn serialize( $data );\n\n\treturn $data;\n}\n\n/**\n * Retrieve post title from XMLRPC XML.\n *\n * If the title element is not part of the XML, then the default post title from\n * the $post_default_title will be used instead.\n *\n * @since 0.71\n *\n * @global string $post_default_title Default XML-RPC post title.\n *\n * @param string $content XMLRPC XML Request content\n * @return string Post title\n */\nfunction xmlrpc_getposttitle( $content ) {\n\tglobal $post_default_title;\n\tif ( preg_match( '/<title>(.+?)<\\/title>/is', $content, $matchtitle ) ) {\n\t\t$post_title = $matchtitle[1];\n\t} else {\n\t\t$post_title = $post_default_title;\n\t}\n\treturn $post_title;\n}\n\n/**\n * Retrieve the post category or categories from XMLRPC XML.\n *\n * If the category element is not found, then the default post category will be\n * used. The return type then would be what $post_default_category. If the\n * category is found, then it will always be an array.\n *\n * @since 0.71\n *\n * @global string $post_default_category Default XML-RPC post category.\n *\n * @param string $content XMLRPC XML Request content\n * @return string|array List of categories or category name.\n */\nfunction xmlrpc_getpostcategory( $content ) {\n\tglobal $post_default_category;\n\tif ( preg_match( '/<category>(.+?)<\\/category>/is', $content, $matchcat ) ) {\n\t\t$post_category = trim( $matchcat[1], ',' );\n\t\t$post_category = explode( ',', $post_category );\n\t} else {\n\t\t$post_category = $post_default_category;\n\t}\n\treturn $post_category;\n}\n\n/**\n * XMLRPC XML content without title and category elements.\n *\n * @since 0.71\n *\n * @param string $content XML-RPC XML Request content.\n * @return string XMLRPC XML Request content without title and category elements.\n */\nfunction xmlrpc_removepostdata( $content ) {\n\t$content = preg_replace( '/<title>(.+?)<\\/title>/si', '', $content );\n\t$content = preg_replace( '/<category>(.+?)<\\/category>/si', '', $content );\n\t$content = trim( $content );\n\treturn $content;\n}\n\n/**\n * Use RegEx to extract URLs from arbitrary content.\n *\n * @since 3.7.0\n *\n * @param string $content Content to extract URLs from.\n * @return array URLs found in passed string.\n */\nfunction wp_extract_urls( $content ) {\n\tpreg_match_all(\n\t\t\"#([\\\"']?)(\"\n\t\t\t. \"(?:([\\w-]+:)?//?)\"\n\t\t\t. \"[^\\s()<>]+\"\n\t\t\t. \"[.]\"\n\t\t\t. \"(?:\"\n\t\t\t\t. \"\\([\\w\\d]+\\)|\"\n\t\t\t\t. \"(?:\"\n\t\t\t\t\t. \"[^`!()\\[\\]{};:'\\\".,<>\u00ab\u00bb\u201c\u201d\u2018\u2019\\s]|\"\n\t\t\t\t\t. \"(?:[:]\\d+)?/?\"\n\t\t\t\t. \")+\"\n\t\t\t. \")\"\n\t\t. \")\\\\1#\",\n\t\t$content,\n\t\t$post_links\n\t);\n\n\t$post_links = array_unique( array_map( 'html_entity_decode', $post_links[2] ) );\n\n\treturn array_values( $post_links );\n}\n\n/**\n * Check content for video and audio links to add as enclosures.\n *\n * Will not add enclosures that have already been added and will\n * remove enclosures that are no longer in the post. This is called as\n * pingbacks and trackbacks.\n *\n * @since 1.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $content Post Content.\n * @param int    $post_ID Post ID.\n */\nfunction do_enclose( $content, $post_ID ) {\n\tglobal $wpdb;\n\n\t//TODO: Tidy this ghetto code up and make the debug code optional\n\tinclude_once( ABSPATH . WPINC . '/class-IXR.php' );\n\n\t$post_links = array();\n\n\t$pung = get_enclosed( $post_ID );\n\n\t$post_links_temp = wp_extract_urls( $content );\n\n\tforeach ( $pung as $link_test ) {\n\t\tif ( ! in_array( $link_test, $post_links_temp ) ) { // link no longer in post\n\t\t\t$mids = $wpdb->get_col( $wpdb->prepare(\"SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d AND meta_key = 'enclosure' AND meta_value LIKE %s\", $post_ID, $wpdb->esc_like( $link_test ) . '%') );\n\t\t\tforeach ( $mids as $mid )\n\t\t\t\tdelete_metadata_by_mid( 'post', $mid );\n\t\t}\n\t}\n\n\tforeach ( (array) $post_links_temp as $link_test ) {\n\t\tif ( !in_array( $link_test, $pung ) ) { // If we haven't pung it already\n\t\t\t$test = @parse_url( $link_test );\n\t\t\tif ( false === $test )\n\t\t\t\tcontinue;\n\t\t\tif ( isset( $test['query'] ) )\n\t\t\t\t$post_links[] = $link_test;\n\t\t\telseif ( isset($test['path']) && ( $test['path'] != '/' ) &&  ($test['path'] != '' ) )\n\t\t\t\t$post_links[] = $link_test;\n\t\t}\n\t}\n\n\t/**\n\t * Filters the list of enclosure links before querying the database.\n\t *\n\t * Allows for the addition and/or removal of potential enclosures to save\n\t * to postmeta before checking the database for existing enclosures.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array $post_links An array of enclosure links.\n\t * @param int   $post_ID    Post ID.\n\t */\n\t$post_links = apply_filters( 'enclosure_links', $post_links, $post_ID );\n\n\tforeach ( (array) $post_links as $url ) {\n\t\tif ( $url != '' && !$wpdb->get_var( $wpdb->prepare( \"SELECT post_id FROM $wpdb->postmeta WHERE post_id = %d AND meta_key = 'enclosure' AND meta_value LIKE %s\", $post_ID, $wpdb->esc_like( $url ) . '%' ) ) ) {\n\n\t\t\tif ( $headers = wp_get_http_headers( $url) ) {\n\t\t\t\t$len = isset( $headers['content-length'] ) ? (int) $headers['content-length'] : 0;\n\t\t\t\t$type = isset( $headers['content-type'] ) ? $headers['content-type'] : '';\n\t\t\t\t$allowed_types = array( 'video', 'audio' );\n\n\t\t\t\t// Check to see if we can figure out the mime type from\n\t\t\t\t// the extension\n\t\t\t\t$url_parts = @parse_url( $url );\n\t\t\t\tif ( false !== $url_parts ) {\n\t\t\t\t\t$extension = pathinfo( $url_parts['path'], PATHINFO_EXTENSION );\n\t\t\t\t\tif ( !empty( $extension ) ) {\n\t\t\t\t\t\tforeach ( wp_get_mime_types() as $exts => $mime ) {\n\t\t\t\t\t\t\tif ( preg_match( '!^(' . $exts . ')$!i', $extension ) ) {\n\t\t\t\t\t\t\t\t$type = $mime;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( in_array( substr( $type, 0, strpos( $type, \"/\" ) ), $allowed_types ) ) {\n\t\t\t\t\tadd_post_meta( $post_ID, 'enclosure', \"$url\\n$len\\n$mime\\n\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Retrieve HTTP Headers from URL.\n *\n * @since 1.5.1\n *\n * @param string $url        URL to retrieve HTTP headers from.\n * @param bool   $deprecated Not Used.\n * @return bool|string False on failure, headers on success.\n */\nfunction wp_get_http_headers( $url, $deprecated = false ) {\n\tif ( !empty( $deprecated ) )\n\t\t_deprecated_argument( __FUNCTION__, '2.7.0' );\n\n\t$response = wp_safe_remote_head( $url );\n\n\tif ( is_wp_error( $response ) )\n\t\treturn false;\n\n\treturn wp_remote_retrieve_headers( $response );\n}\n\n/**\n * Determines whether the publish date of the current post in the loop is different\n * from the publish date of the previous post in the loop.\n * \n * For more information on this and similar theme functions, check out\n * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/ \n * Conditional Tags} article in the Theme Developer Handbook.\n * \n * @since 0.71\n *\n * @global string $currentday  The day of the current post in the loop.\n * @global string $previousday The day of the previous post in the loop.\n *\n * @return int 1 when new day, 0 if not a new day.\n */\nfunction is_new_day() {\n\tglobal $currentday, $previousday;\n\tif ( $currentday != $previousday )\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n/**\n * Build URL query based on an associative and, or indexed array.\n *\n * This is a convenient function for easily building url queries. It sets the\n * separator to '&' and uses _http_build_query() function.\n *\n * @since 2.3.0\n *\n * @see _http_build_query() Used to build the query\n * @link https://secure.php.net/manual/en/function.http-build-query.php for more on what\n *\t\t http_build_query() does.\n *\n * @param array $data URL-encode key/value pairs.\n * @return string URL-encoded string.\n */\nfunction build_query( $data ) {\n\treturn _http_build_query( $data, null, '&', '', false );\n}\n\n/**\n * From php.net (modified by Mark Jaquith to behave like the native PHP5 function).\n *\n * @since 3.2.0\n * @access private\n *\n * @see https://secure.php.net/manual/en/function.http-build-query.php\n *\n * @param array|object  $data       An array or object of data. Converted to array.\n * @param string        $prefix     Optional. Numeric index. If set, start parameter numbering with it.\n *                                  Default null.\n * @param string        $sep        Optional. Argument separator; defaults to 'arg_separator.output'.\n *                                  Default null.\n * @param string        $key        Optional. Used to prefix key name. Default empty.\n * @param bool          $urlencode  Optional. Whether to use urlencode() in the result. Default true.\n *\n * @return string The query string.\n */\nfunction _http_build_query( $data, $prefix = null, $sep = null, $key = '', $urlencode = true ) {\n\t$ret = array();\n\n\tforeach ( (array) $data as $k => $v ) {\n\t\tif ( $urlencode)\n\t\t\t$k = urlencode($k);\n\t\tif ( is_int($k) && $prefix != null )\n\t\t\t$k = $prefix.$k;\n\t\tif ( !empty($key) )\n\t\t\t$k = $key . '%5B' . $k . '%5D';\n\t\tif ( $v === null )\n\t\t\tcontinue;\n\t\telseif ( $v === false )\n\t\t\t$v = '0';\n\n\t\tif ( is_array($v) || is_object($v) )\n\t\t\tarray_push($ret,_http_build_query($v, '', $sep, $k, $urlencode));\n\t\telseif ( $urlencode )\n\t\t\tarray_push($ret, $k.'='.urlencode($v));\n\t\telse\n\t\t\tarray_push($ret, $k.'='.$v);\n\t}\n\n\tif ( null === $sep )\n\t\t$sep = ini_get('arg_separator.output');\n\n\treturn implode($sep, $ret);\n}\n\n/**\n * Retrieves a modified URL query string.\n *\n * You can rebuild the URL and append query variables to the URL query by using this function.\n * There are two ways to use this function; either a single key and value, or an associative array.\n *\n * Using a single key and value:\n *\n *     add_query_arg( 'key', 'value', 'http://example.com' );\n *\n * Using an associative array:\n *\n *     add_query_arg( array(\n *         'key1' => 'value1',\n *         'key2' => 'value2',\n *     ), 'http://example.com' );\n *\n * Omitting the URL from either use results in the current URL being used\n * (the value of `$_SERVER['REQUEST_URI']`).\n *\n * Values are expected to be encoded appropriately with urlencode() or rawurlencode().\n *\n * Setting any query variable's value to boolean false removes the key (see remove_query_arg()).\n *\n * Important: The return value of add_query_arg() is not escaped by default. Output should be\n * late-escaped with esc_url() or similar to help prevent vulnerability to cross-site scripting\n * (XSS) attacks.\n *\n * @since 1.5.0\n *\n * @param string|array $key   Either a query variable key, or an associative array of query variables.\n * @param string       $value Optional. Either a query variable value, or a URL to act upon.\n * @param string       $url   Optional. A URL to act upon.\n * @return string New URL query string (unescaped).\n */\nfunction add_query_arg() {\n\t$args = func_get_args();\n\tif ( is_array( $args[0] ) ) {\n\t\tif ( count( $args ) < 2 || false === $args[1] )\n\t\t\t$uri = $_SERVER['REQUEST_URI'];\n\t\telse\n\t\t\t$uri = $args[1];\n\t} else {\n\t\tif ( count( $args ) < 3 || false === $args[2] )\n\t\t\t$uri = $_SERVER['REQUEST_URI'];\n\t\telse\n\t\t\t$uri = $args[2];\n\t}\n\n\tif ( $frag = strstr( $uri, '#' ) )\n\t\t$uri = substr( $uri, 0, -strlen( $frag ) );\n\telse\n\t\t$frag = '';\n\n\tif ( 0 === stripos( $uri, 'http://' ) ) {\n\t\t$protocol = 'http://';\n\t\t$uri = substr( $uri, 7 );\n\t} elseif ( 0 === stripos( $uri, 'https://' ) ) {\n\t\t$protocol = 'https://';\n\t\t$uri = substr( $uri, 8 );\n\t} else {\n\t\t$protocol = '';\n\t}\n\n\tif ( strpos( $uri, '?' ) !== false ) {\n\t\tlist( $base, $query ) = explode( '?', $uri, 2 );\n\t\t$base .= '?';\n\t} elseif ( $protocol || strpos( $uri, '=' ) === false ) {\n\t\t$base = $uri . '?';\n\t\t$query = '';\n\t} else {\n\t\t$base = '';\n\t\t$query = $uri;\n\t}\n\n\twp_parse_str( $query, $qs );\n\t$qs = urlencode_deep( $qs ); // this re-URL-encodes things that were already in the query string\n\tif ( is_array( $args[0] ) ) {\n\t\tforeach ( $args[0] as $k => $v ) {\n\t\t\t$qs[ $k ] = $v;\n\t\t}\n\t} else {\n\t\t$qs[ $args[0] ] = $args[1];\n\t}\n\n\tforeach ( $qs as $k => $v ) {\n\t\tif ( $v === false )\n\t\t\tunset( $qs[$k] );\n\t}\n\n\t$ret = build_query( $qs );\n\t$ret = trim( $ret, '?' );\n\t$ret = preg_replace( '#=(&|$)#', '$1', $ret );\n\t$ret = $protocol . $base . $ret . $frag;\n\t$ret = rtrim( $ret, '?' );\n\treturn $ret;\n}\n\n/**\n * Removes an item or items from a query string.\n *\n * @since 1.5.0\n *\n * @param string|array $key   Query key or keys to remove.\n * @param bool|string  $query Optional. When false uses the current URL. Default false.\n * @return string New URL query string.\n */\nfunction remove_query_arg( $key, $query = false ) {\n\tif ( is_array( $key ) ) { // removing multiple keys\n\t\tforeach ( $key as $k )\n\t\t\t$query = add_query_arg( $k, false, $query );\n\t\treturn $query;\n\t}\n\treturn add_query_arg( $key, false, $query );\n}\n\n/**\n * Returns an array of single-use query variable names that can be removed from a URL.\n *\n * @since 4.4.0\n *\n * @return array An array of parameters to remove from the URL.\n */\nfunction wp_removable_query_args() {\n\t$removable_query_args = array(\n\t\t'activate',\n\t\t'activated',\n\t\t'approved',\n\t\t'deactivate',\n\t\t'deleted',\n\t\t'disabled',\n\t\t'enabled',\n\t\t'error',\n\t\t'hotkeys_highlight_first',\n\t\t'hotkeys_highlight_last',\n\t\t'locked',\n\t\t'message',\n\t\t'same',\n\t\t'saved',\n\t\t'settings-updated',\n\t\t'skipped',\n\t\t'spammed',\n\t\t'trashed',\n\t\t'unspammed',\n\t\t'untrashed',\n\t\t'update',\n\t\t'updated',\n\t\t'wp-post-new-reload',\n\t);\n\n\t/**\n\t * Filters the list of query variables to remove.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param array $removable_query_args An array of query variables to remove from a URL.\n\t */\n\treturn apply_filters( 'removable_query_args', $removable_query_args );\n}\n\n/**\n * Walks the array while sanitizing the contents.\n *\n * @since 0.71\n *\n * @param array $array Array to walk while sanitizing contents.\n * @return array Sanitized $array.\n */\nfunction add_magic_quotes( $array ) {\n\tforeach ( (array) $array as $k => $v ) {\n\t\tif ( is_array( $v ) ) {\n\t\t\t$array[$k] = add_magic_quotes( $v );\n\t\t} else {\n\t\t\t$array[$k] = addslashes( $v );\n\t\t}\n\t}\n\treturn $array;\n}\n\n/**\n * HTTP request for URI to retrieve content.\n *\n * @since 1.5.1\n *\n * @see wp_safe_remote_get()\n *\n * @param string $uri URI/URL of web page to retrieve.\n * @return false|string HTTP content. False on failure.\n */\nfunction wp_remote_fopen( $uri ) {\n\t$parsed_url = @parse_url( $uri );\n\n\tif ( !$parsed_url || !is_array( $parsed_url ) )\n\t\treturn false;\n\n\t$options = array();\n\t$options['timeout'] = 10;\n\n\t$response = wp_safe_remote_get( $uri, $options );\n\n\tif ( is_wp_error( $response ) )\n\t\treturn false;\n\n\treturn wp_remote_retrieve_body( $response );\n}\n\n/**\n * Set up the WordPress query.\n *\n * @since 2.0.0\n *\n * @global WP       $wp_locale\n * @global WP_Query $wp_query\n * @global WP_Query $wp_the_query\n *\n * @param string|array $query_vars Default WP_Query arguments.\n */\nfunction wp( $query_vars = '' ) {\n\tglobal $wp, $wp_query, $wp_the_query;\n\t$wp->main( $query_vars );\n\n\tif ( !isset($wp_the_query) )\n\t\t$wp_the_query = $wp_query;\n}\n\n/**\n * Retrieve the description for the HTTP status.\n *\n * @since 2.3.0\n *\n * @global array $wp_header_to_desc\n *\n * @param int $code HTTP status code.\n * @return string Empty string if not found, or description if found.\n */\nfunction get_status_header_desc( $code ) {\n\tglobal $wp_header_to_desc;\n\n\t$code = absint( $code );\n\n\tif ( !isset( $wp_header_to_desc ) ) {\n\t\t$wp_header_to_desc = array(\n\t\t\t100 => 'Continue',\n\t\t\t101 => 'Switching Protocols',\n\t\t\t102 => 'Processing',\n\n\t\t\t200 => 'OK',\n\t\t\t201 => 'Created',\n\t\t\t202 => 'Accepted',\n\t\t\t203 => 'Non-Authoritative Information',\n\t\t\t204 => 'No Content',\n\t\t\t205 => 'Reset Content',\n\t\t\t206 => 'Partial Content',\n\t\t\t207 => 'Multi-Status',\n\t\t\t226 => 'IM Used',\n\n\t\t\t300 => 'Multiple Choices',\n\t\t\t301 => 'Moved Permanently',\n\t\t\t302 => 'Found',\n\t\t\t303 => 'See Other',\n\t\t\t304 => 'Not Modified',\n\t\t\t305 => 'Use Proxy',\n\t\t\t306 => 'Reserved',\n\t\t\t307 => 'Temporary Redirect',\n\t\t\t308 => 'Permanent Redirect',\n\n\t\t\t400 => 'Bad Request',\n\t\t\t401 => 'Unauthorized',\n\t\t\t402 => 'Payment Required',\n\t\t\t403 => 'Forbidden',\n\t\t\t404 => 'Not Found',\n\t\t\t405 => 'Method Not Allowed',\n\t\t\t406 => 'Not Acceptable',\n\t\t\t407 => 'Proxy Authentication Required',\n\t\t\t408 => 'Request Timeout',\n\t\t\t409 => 'Conflict',\n\t\t\t410 => 'Gone',\n\t\t\t411 => 'Length Required',\n\t\t\t412 => 'Precondition Failed',\n\t\t\t413 => 'Request Entity Too Large',\n\t\t\t414 => 'Request-URI Too Long',\n\t\t\t415 => 'Unsupported Media Type',\n\t\t\t416 => 'Requested Range Not Satisfiable',\n\t\t\t417 => 'Expectation Failed',\n\t\t\t418 => 'I\\'m a teapot',\n\t\t\t421 => 'Misdirected Request',\n\t\t\t422 => 'Unprocessable Entity',\n\t\t\t423 => 'Locked',\n\t\t\t424 => 'Failed Dependency',\n\t\t\t426 => 'Upgrade Required',\n\t\t\t428 => 'Precondition Required',\n\t\t\t429 => 'Too Many Requests',\n\t\t\t431 => 'Request Header Fields Too Large',\n\t\t\t451 => 'Unavailable For Legal Reasons',\n\n\t\t\t500 => 'Internal Server Error',\n\t\t\t501 => 'Not Implemented',\n\t\t\t502 => 'Bad Gateway',\n\t\t\t503 => 'Service Unavailable',\n\t\t\t504 => 'Gateway Timeout',\n\t\t\t505 => 'HTTP Version Not Supported',\n\t\t\t506 => 'Variant Also Negotiates',\n\t\t\t507 => 'Insufficient Storage',\n\t\t\t510 => 'Not Extended',\n\t\t\t511 => 'Network Authentication Required',\n\t\t);\n\t}\n\n\tif ( isset( $wp_header_to_desc[$code] ) )\n\t\treturn $wp_header_to_desc[$code];\n\telse\n\t\treturn '';\n}\n\n/**\n * Set HTTP status header.\n *\n * @since 2.0.0\n * @since 4.4.0 Added the `$description` parameter.\n *\n * @see get_status_header_desc()\n *\n * @param int    $code        HTTP status code.\n * @param string $description Optional. A custom description for the HTTP status.\n */\nfunction status_header( $code, $description = '' ) {\n\tif ( ! $description ) {\n\t\t$description = get_status_header_desc( $code );\n\t}\n\n\tif ( empty( $description ) ) {\n\t\treturn;\n\t}\n\n\t$protocol = wp_get_server_protocol();\n\t$status_header = \"$protocol $code $description\";\n\tif ( function_exists( 'apply_filters' ) )\n\n\t\t/**\n\t\t * Filters an HTTP status header.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param string $status_header HTTP status header.\n\t\t * @param int    $code          HTTP status code.\n\t\t * @param string $description   Description for the status code.\n\t\t * @param string $protocol      Server protocol.\n\t\t */\n\t\t$status_header = apply_filters( 'status_header', $status_header, $code, $description, $protocol );\n\n\t@header( $status_header, true, $code );\n}\n\n/**\n * Get the header information to prevent caching.\n *\n * The several different headers cover the different ways cache prevention\n * is handled by different browsers\n *\n * @since 2.8.0\n *\n * @return array The associative array of header names and field values.\n */\nfunction wp_get_nocache_headers() {\n\t$headers = array(\n\t\t'Expires' => 'Wed, 11 Jan 1984 05:00:00 GMT',\n\t\t'Cache-Control' => 'no-cache, must-revalidate, max-age=0',\n\t);\n\n\tif ( function_exists('apply_filters') ) {\n\t\t/**\n\t\t * Filters the cache-controlling headers.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @see wp_get_nocache_headers()\n\t\t *\n\t\t * @param array $headers {\n\t\t *     Header names and field values.\n\t\t *\n\t\t *     @type string $Expires       Expires header.\n\t\t *     @type string $Cache-Control Cache-Control header.\n\t\t * }\n\t\t */\n\t\t$headers = (array) apply_filters( 'nocache_headers', $headers );\n\t}\n\t$headers['Last-Modified'] = false;\n\treturn $headers;\n}\n\n/**\n * Set the headers to prevent caching for the different browsers.\n *\n * Different browsers support different nocache headers, so several\n * headers must be sent so that all of them get the point that no\n * caching should occur.\n *\n * @since 2.0.0\n *\n * @see wp_get_nocache_headers()\n */\nfunction nocache_headers() {\n\t$headers = wp_get_nocache_headers();\n\n\tunset( $headers['Last-Modified'] );\n\n\t// In PHP 5.3+, make sure we are not sending a Last-Modified header.\n\tif ( function_exists( 'header_remove' ) ) {\n\t\t@header_remove( 'Last-Modified' );\n\t} else {\n\t\t// In PHP 5.2, send an empty Last-Modified header, but only as a\n\t\t// last resort to override a header already sent. #WP23021\n\t\tforeach ( headers_list() as $header ) {\n\t\t\tif ( 0 === stripos( $header, 'Last-Modified' ) ) {\n\t\t\t\t$headers['Last-Modified'] = '';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tforeach ( $headers as $name => $field_value )\n\t\t@header(\"{$name}: {$field_value}\");\n}\n\n/**\n * Set the headers for caching for 10 days with JavaScript content type.\n *\n * @since 2.1.0\n */\nfunction cache_javascript_headers() {\n\t$expiresOffset = 10 * DAY_IN_SECONDS;\n\n\theader( \"Content-Type: text/javascript; charset=\" . get_bloginfo( 'charset' ) );\n\theader( \"Vary: Accept-Encoding\" ); // Handle proxies\n\theader( \"Expires: \" . gmdate( \"D, d M Y H:i:s\", time() + $expiresOffset ) . \" GMT\" );\n}\n\n/**\n * Retrieve the number of database queries during the WordPress execution.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return int Number of database queries.\n */\nfunction get_num_queries() {\n\tglobal $wpdb;\n\treturn $wpdb->num_queries;\n}\n\n/**\n * Whether input is yes or no.\n *\n * Must be 'y' to be true.\n *\n * @since 1.0.0\n *\n * @param string $yn Character string containing either 'y' (yes) or 'n' (no).\n * @return bool True if yes, false on anything else.\n */\nfunction bool_from_yn( $yn ) {\n\treturn ( strtolower( $yn ) == 'y' );\n}\n\n/**\n * Load the feed template from the use of an action hook.\n *\n * If the feed action does not have a hook, then the function will die with a\n * message telling the visitor that the feed is not valid.\n *\n * It is better to only have one hook for each feed.\n *\n * @since 2.1.0\n *\n * @global WP_Query $wp_query Used to tell if the use a comment feed.\n */\nfunction do_feed() {\n\tglobal $wp_query;\n\n\t$feed = get_query_var( 'feed' );\n\n\t// Remove the pad, if present.\n\t$feed = preg_replace( '/^_+/', '', $feed );\n\n\tif ( $feed == '' || $feed == 'feed' )\n\t\t$feed = get_default_feed();\n\n\tif ( ! has_action( \"do_feed_{$feed}\" ) ) {\n\t\twp_die( __( 'ERROR: This is not a valid feed template.' ), '', array( 'response' => 404 ) );\n\t}\n\n\t/**\n\t * Fires once the given feed is loaded.\n\t *\n\t * The dynamic portion of the hook name, `$feed`, refers to the feed template name.\n\t * Possible values include: 'rdf', 'rss', 'rss2', and 'atom'.\n\t *\n\t * @since 2.1.0\n\t * @since 4.4.0 The `$feed` parameter was added.\n\t *\n\t * @param bool   $is_comment_feed Whether the feed is a comment feed.\n\t * @param string $feed            The feed name.\n\t */\n\tdo_action( \"do_feed_{$feed}\", $wp_query->is_comment_feed, $feed );\n}\n\n/**\n * Load the RDF RSS 0.91 Feed template.\n *\n * @since 2.1.0\n *\n * @see load_template()\n */\nfunction do_feed_rdf() {\n\tload_template( ABSPATH . WPINC . '/feed-rdf.php' );\n}\n\n/**\n * Load the RSS 1.0 Feed Template.\n *\n * @since 2.1.0\n *\n * @see load_template()\n */\nfunction do_feed_rss() {\n\tload_template( ABSPATH . WPINC . '/feed-rss.php' );\n}\n\n/**\n * Load either the RSS2 comment feed or the RSS2 posts feed.\n *\n * @since 2.1.0\n *\n * @see load_template()\n *\n * @param bool $for_comments True for the comment feed, false for normal feed.\n */\nfunction do_feed_rss2( $for_comments ) {\n\tif ( $for_comments )\n\t\tload_template( ABSPATH . WPINC . '/feed-rss2-comments.php' );\n\telse\n\t\tload_template( ABSPATH . WPINC . '/feed-rss2.php' );\n}\n\n/**\n * Load either Atom comment feed or Atom posts feed.\n *\n * @since 2.1.0\n *\n * @see load_template()\n *\n * @param bool $for_comments True for the comment feed, false for normal feed.\n */\nfunction do_feed_atom( $for_comments ) {\n\tif ($for_comments)\n\t\tload_template( ABSPATH . WPINC . '/feed-atom-comments.php');\n\telse\n\t\tload_template( ABSPATH . WPINC . '/feed-atom.php' );\n}\n\n/**\n * Display the robots.txt file content.\n *\n * The echo content should be with usage of the permalinks or for creating the\n * robots.txt file.\n *\n * @since 2.1.0\n */\nfunction do_robots() {\n\theader( 'Content-Type: text/plain; charset=utf-8' );\n\n\t/**\n\t * Fires when displaying the robots.txt file.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'do_robotstxt' );\n\n\t$output = \"User-agent: *\\n\";\n\t$public = get_option( 'blog_public' );\n\tif ( '0' == $public ) {\n\t\t$output .= \"Disallow: /\\n\";\n\t} else {\n\t\t$site_url = parse_url( site_url() );\n\t\t$path = ( !empty( $site_url['path'] ) ) ? $site_url['path'] : '';\n\t\t$output .= \"Disallow: $path/wp-admin/\\n\";\n\t\t$output .= \"Allow: $path/wp-admin/admin-ajax.php\\n\";\n\t}\n\n\t/**\n\t * Filters the robots.txt output.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $output Robots.txt output.\n\t * @param bool   $public Whether the site is considered \"public\".\n\t */\n\techo apply_filters( 'robots_txt', $output, $public );\n}\n\n/**\n * Determines whether WordPress is already installed.\n *\n * The cache will be checked first. If you have a cache plugin, which saves\n * the cache values, then this will work. If you use the default WordPress\n * cache, and the database goes away, then you might have problems.\n *\n * Checks for the 'siteurl' option for whether WordPress is installed.\n * \n * For more information on this and similar theme functions, check out\n * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/ \n * Conditional Tags} article in the Theme Developer Handbook.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return bool Whether the site is already installed.\n */\nfunction is_blog_installed() {\n\tglobal $wpdb;\n\n\t/*\n\t * Check cache first. If options table goes away and we have true\n\t * cached, oh well.\n\t */\n\tif ( wp_cache_get( 'is_blog_installed' ) )\n\t\treturn true;\n\n\t$suppress = $wpdb->suppress_errors();\n\tif ( ! wp_installing() ) {\n\t\t$alloptions = wp_load_alloptions();\n\t}\n\t// If siteurl is not set to autoload, check it specifically\n\tif ( !isset( $alloptions['siteurl'] ) )\n\t\t$installed = $wpdb->get_var( \"SELECT option_value FROM $wpdb->options WHERE option_name = 'siteurl'\" );\n\telse\n\t\t$installed = $alloptions['siteurl'];\n\t$wpdb->suppress_errors( $suppress );\n\n\t$installed = !empty( $installed );\n\twp_cache_set( 'is_blog_installed', $installed );\n\n\tif ( $installed )\n\t\treturn true;\n\n\t// If visiting repair.php, return true and let it take over.\n\tif ( defined( 'WP_REPAIRING' ) )\n\t\treturn true;\n\n\t$suppress = $wpdb->suppress_errors();\n\n\t/*\n\t * Loop over the WP tables. If none exist, then scratch installation is allowed.\n\t * If one or more exist, suggest table repair since we got here because the\n\t * options table could not be accessed.\n\t */\n\t$wp_tables = $wpdb->tables();\n\tforeach ( $wp_tables as $table ) {\n\t\t// The existence of custom user tables shouldn't suggest an insane state or prevent a clean installation.\n\t\tif ( defined( 'CUSTOM_USER_TABLE' ) && CUSTOM_USER_TABLE == $table )\n\t\t\tcontinue;\n\t\tif ( defined( 'CUSTOM_USER_META_TABLE' ) && CUSTOM_USER_META_TABLE == $table )\n\t\t\tcontinue;\n\n\t\tif ( ! $wpdb->get_results( \"DESCRIBE $table;\" ) )\n\t\t\tcontinue;\n\n\t\t// One or more tables exist. We are insane.\n\n\t\twp_load_translations_early();\n\n\t\t// Die with a DB error.\n\t\t$wpdb->error = sprintf(\n\t\t\t/* translators: %s: database repair URL */\n\t\t\t__( 'One or more database tables are unavailable. The database may need to be <a href=\"%s\">repaired</a>.' ),\n\t\t\t'maint/repair.php?referrer=is_blog_installed'\n\t\t);\n\n\t\tdead_db();\n\t}\n\n\t$wpdb->suppress_errors( $suppress );\n\n\twp_cache_set( 'is_blog_installed', false );\n\n\treturn false;\n}\n\n/**\n * Retrieve URL with nonce added to URL query.\n *\n * @since 2.0.4\n *\n * @param string     $actionurl URL to add nonce action.\n * @param int|string $action    Optional. Nonce action name. Default -1.\n * @param string     $name      Optional. Nonce name. Default '_wpnonce'.\n * @return string Escaped URL with nonce action added.\n */\nfunction wp_nonce_url( $actionurl, $action = -1, $name = '_wpnonce' ) {\n\t$actionurl = str_replace( '&amp;', '&', $actionurl );\n\treturn esc_html( add_query_arg( $name, wp_create_nonce( $action ), $actionurl ) );\n}\n\n/**\n * Retrieve or display nonce hidden field for forms.\n *\n * The nonce field is used to validate that the contents of the form came from\n * the location on the current site and not somewhere else. The nonce does not\n * offer absolute protection, but should protect against most cases. It is very\n * important to use nonce field in forms.\n *\n * The $action and $name are optional, but if you want to have better security,\n * it is strongly suggested to set those two parameters. It is easier to just\n * call the function without any parameters, because validation of the nonce\n * doesn't require any parameters, but since crackers know what the default is\n * it won't be difficult for them to find a way around your nonce and cause\n * damage.\n *\n * The input name will be whatever $name value you gave. The input value will be\n * the nonce creation value.\n *\n * @since 2.0.4\n *\n * @param int|string $action  Optional. Action name. Default -1.\n * @param string     $name    Optional. Nonce name. Default '_wpnonce'.\n * @param bool       $referer Optional. Whether to set the referer field for validation. Default true.\n * @param bool       $echo    Optional. Whether to display or return hidden form field. Default true.\n * @return string Nonce field HTML markup.\n */\nfunction wp_nonce_field( $action = -1, $name = \"_wpnonce\", $referer = true , $echo = true ) {\n\t$name = esc_attr( $name );\n\t$nonce_field = '<input type=\"hidden\" id=\"' . $name . '\" name=\"' . $name . '\" value=\"' . wp_create_nonce( $action ) . '\" />';\n\n\tif ( $referer )\n\t\t$nonce_field .= wp_referer_field( false );\n\n\tif ( $echo )\n\t\techo $nonce_field;\n\n\treturn $nonce_field;\n}\n\n/**\n * Retrieve or display referer hidden field for forms.\n *\n * The referer link is the current Request URI from the server super global. The\n * input name is '_wp_http_referer', in case you wanted to check manually.\n *\n * @since 2.0.4\n *\n * @param bool $echo Optional. Whether to echo or return the referer field. Default true.\n * @return string Referer field HTML markup.\n */\nfunction wp_referer_field( $echo = true ) {\n\t$referer_field = '<input type=\"hidden\" name=\"_wp_http_referer\" value=\"'. esc_attr( wp_unslash( $_SERVER['REQUEST_URI'] ) ) . '\" />';\n\n\tif ( $echo )\n\t\techo $referer_field;\n\treturn $referer_field;\n}\n\n/**\n * Retrieve or display original referer hidden field for forms.\n *\n * The input name is '_wp_original_http_referer' and will be either the same\n * value of wp_referer_field(), if that was posted already or it will be the\n * current page, if it doesn't exist.\n *\n * @since 2.0.4\n *\n * @param bool   $echo         Optional. Whether to echo the original http referer. Default true.\n * @param string $jump_back_to Optional. Can be 'previous' or page you want to jump back to.\n *                             Default 'current'.\n * @return string Original referer field.\n */\nfunction wp_original_referer_field( $echo = true, $jump_back_to = 'current' ) {\n\tif ( ! $ref = wp_get_original_referer() ) {\n\t\t$ref = 'previous' == $jump_back_to ? wp_get_referer() : wp_unslash( $_SERVER['REQUEST_URI'] );\n\t}\n\t$orig_referer_field = '<input type=\"hidden\" name=\"_wp_original_http_referer\" value=\"' . esc_attr( $ref ) . '\" />';\n\tif ( $echo )\n\t\techo $orig_referer_field;\n\treturn $orig_referer_field;\n}\n\n/**\n * Retrieve referer from '_wp_http_referer' or HTTP referer.\n *\n * If it's the same as the current request URL, will return false.\n *\n * @since 2.0.4\n *\n * @return false|string False on failure. Referer URL on success.\n */\nfunction wp_get_referer() {\n\tif ( ! function_exists( 'wp_validate_redirect' ) ) {\n\t\treturn false;\n\t}\n\n\t$ref = wp_get_raw_referer();\n\n\tif ( $ref && $ref !== wp_unslash( $_SERVER['REQUEST_URI'] ) && $ref !== home_url() . wp_unslash( $_SERVER['REQUEST_URI'] ) ) {\n\t\treturn wp_validate_redirect( $ref, false );\n\t}\n\n\treturn false;\n}\n\n/**\n * Retrieves unvalidated referer from '_wp_http_referer' or HTTP referer.\n *\n * Do not use for redirects, use wp_get_referer() instead.\n *\n * @since 4.5.0\n *\n * @return string|false Referer URL on success, false on failure.\n */\nfunction wp_get_raw_referer() {\n\tif ( ! empty( $_REQUEST['_wp_http_referer'] ) ) {\n\t\treturn wp_unslash( $_REQUEST['_wp_http_referer'] );\n\t} else if ( ! empty( $_SERVER['HTTP_REFERER'] ) ) {\n\t\treturn wp_unslash( $_SERVER['HTTP_REFERER'] );\n\t}\n\n\treturn false;\n}\n\n/**\n * Retrieve original referer that was posted, if it exists.\n *\n * @since 2.0.4\n *\n * @return string|false False if no original referer or original referer if set.\n */\nfunction wp_get_original_referer() {\n\tif ( ! empty( $_REQUEST['_wp_original_http_referer'] ) && function_exists( 'wp_validate_redirect' ) )\n\t\treturn wp_validate_redirect( wp_unslash( $_REQUEST['_wp_original_http_referer'] ), false );\n\treturn false;\n}\n\n/**\n * Recursive directory creation based on full path.\n *\n * Will attempt to set permissions on folders.\n *\n * @since 2.0.1\n *\n * @param string $target Full path to attempt to create.\n * @return bool Whether the path was created. True if path already exists.\n */\nfunction wp_mkdir_p( $target ) {\n\t$wrapper = null;\n\n\t// Strip the protocol.\n\tif ( wp_is_stream( $target ) ) {\n\t\tlist( $wrapper, $target ) = explode( '://', $target, 2 );\n\t}\n\n\t// From php.net/mkdir user contributed notes.\n\t$target = str_replace( '//', '/', $target );\n\n\t// Put the wrapper back on the target.\n\tif ( $wrapper !== null ) {\n\t\t$target = $wrapper . '://' . $target;\n\t}\n\n\t/*\n\t * Safe mode fails with a trailing slash under certain PHP versions.\n\t * Use rtrim() instead of untrailingslashit to avoid formatting.php dependency.\n\t */\n\t$target = rtrim($target, '/');\n\tif ( empty($target) )\n\t\t$target = '/';\n\n\tif ( file_exists( $target ) )\n\t\treturn @is_dir( $target );\n\n\t// We need to find the permissions of the parent folder that exists and inherit that.\n\t$target_parent = dirname( $target );\n\twhile ( '.' != $target_parent && ! is_dir( $target_parent ) && dirname( $target_parent ) !== $target_parent ) {\n\t\t$target_parent = dirname( $target_parent );\n\t}\n\n\t// Get the permission bits.\n\tif ( $stat = @stat( $target_parent ) ) {\n\t\t$dir_perms = $stat['mode'] & 0007777;\n\t} else {\n\t\t$dir_perms = 0777;\n\t}\n\n\tif ( @mkdir( $target, $dir_perms, true ) ) {\n\n\t\t/*\n\t\t * If a umask is set that modifies $dir_perms, we'll have to re-set\n\t\t * the $dir_perms correctly with chmod()\n\t\t */\n\t\tif ( $dir_perms != ( $dir_perms & ~umask() ) ) {\n\t\t\t$folder_parts = explode( '/', substr( $target, strlen( $target_parent ) + 1 ) );\n\t\t\tfor ( $i = 1, $c = count( $folder_parts ); $i <= $c; $i++ ) {\n\t\t\t\t@chmod( $target_parent . '/' . implode( '/', array_slice( $folder_parts, 0, $i ) ), $dir_perms );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Test if a given filesystem path is absolute.\n *\n * For example, '/foo/bar', or 'c:\\windows'.\n *\n * @since 2.5.0\n *\n * @param string $path File path.\n * @return bool True if path is absolute, false is not absolute.\n */\nfunction path_is_absolute( $path ) {\n\t/*\n\t * This is definitive if true but fails if $path does not exist or contains\n\t * a symbolic link.\n\t */\n\tif ( realpath($path) == $path )\n\t\treturn true;\n\n\tif ( strlen($path) == 0 || $path[0] == '.' )\n\t\treturn false;\n\n\t// Windows allows absolute paths like this.\n\tif ( preg_match('#^[a-zA-Z]:\\\\\\\\#', $path) )\n\t\treturn true;\n\n\t// A path starting with / or \\ is absolute; anything else is relative.\n\treturn ( $path[0] == '/' || $path[0] == '\\\\' );\n}\n\n/**\n * Join two filesystem paths together.\n *\n * For example, 'give me $path relative to $base'. If the $path is absolute,\n * then it the full path is returned.\n *\n * @since 2.5.0\n *\n * @param string $base Base path.\n * @param string $path Path relative to $base.\n * @return string The path with the base or absolute path.\n */\nfunction path_join( $base, $path ) {\n\tif ( path_is_absolute($path) )\n\t\treturn $path;\n\n\treturn rtrim($base, '/') . '/' . ltrim($path, '/');\n}\n\n/**\n * Normalize a filesystem path.\n *\n * On windows systems, replaces backslashes with forward slashes\n * and forces upper-case drive letters.\n * Allows for two leading slashes for Windows network shares, but\n * ensures that all other duplicate slashes are reduced to a single.\n *\n * @since 3.9.0\n * @since 4.4.0 Ensures upper-case drive letters on Windows systems.\n * @since 4.5.0 Allows for Windows network shares.\n * @since 4.9.7 Allows for PHP file wrappers.\n *\n * @param string $path Path to normalize.\n * @return string Normalized path.\n */\nfunction wp_normalize_path( $path ) {\n\t$wrapper = '';\n\tif ( wp_is_stream( $path ) ) {\n\t\tlist( $wrapper, $path ) = explode( '://', $path, 2 );\n\t\t$wrapper .= '://';\n\t}\n\n\t// Standardise all paths to use /\n\t$path = str_replace( '\\\\', '/', $path );\n\n\t// Replace multiple slashes down to a singular, allowing for network shares having two slashes.\n\t$path = preg_replace( '|(?<=.)/+|', '/', $path );\n\n\t// Windows paths should uppercase the drive letter\n\tif ( ':' === substr( $path, 1, 1 ) ) {\n\t\t$path = ucfirst( $path );\n\t}\n\n\treturn $wrapper . $path;\n}\n\n/**\n * Determine a writable directory for temporary files.\n *\n * Function's preference is the return value of sys_get_temp_dir(),\n * followed by your PHP temporary upload directory, followed by WP_CONTENT_DIR,\n * before finally defaulting to /tmp/\n *\n * In the event that this function does not find a writable location,\n * It may be overridden by the WP_TEMP_DIR constant in your wp-config.php file.\n *\n * @since 2.5.0\n *\n * @staticvar string $temp\n *\n * @return string Writable temporary directory.\n */\nfunction get_temp_dir() {\n\tstatic $temp = '';\n\tif ( defined('WP_TEMP_DIR') )\n\t\treturn trailingslashit(WP_TEMP_DIR);\n\n\tif ( $temp )\n\t\treturn trailingslashit( $temp );\n\n\tif ( function_exists('sys_get_temp_dir') ) {\n\t\t$temp = sys_get_temp_dir();\n\t\tif ( @is_dir( $temp ) && wp_is_writable( $temp ) )\n\t\t\treturn trailingslashit( $temp );\n\t}\n\n\t$temp = ini_get('upload_tmp_dir');\n\tif ( @is_dir( $temp ) && wp_is_writable( $temp ) )\n\t\treturn trailingslashit( $temp );\n\n\t$temp = WP_CONTENT_DIR . '/';\n\tif ( is_dir( $temp ) && wp_is_writable( $temp ) )\n\t\treturn $temp;\n\n\treturn '/tmp/';\n}\n\n/**\n * Determine if a directory is writable.\n *\n * This function is used to work around certain ACL issues in PHP primarily\n * affecting Windows Servers.\n *\n * @since 3.6.0\n *\n * @see win_is_writable()\n *\n * @param string $path Path to check for write-ability.\n * @return bool Whether the path is writable.\n */\nfunction wp_is_writable( $path ) {\n\tif ( 'WIN' === strtoupper( substr( PHP_OS, 0, 3 ) ) )\n\t\treturn win_is_writable( $path );\n\telse\n\t\treturn @is_writable( $path );\n}\n\n/**\n * Workaround for Windows bug in is_writable() function\n *\n * PHP has issues with Windows ACL's for determine if a\n * directory is writable or not, this works around them by\n * checking the ability to open files rather than relying\n * upon PHP to interprate the OS ACL.\n *\n * @since 2.8.0\n *\n * @see https://bugs.php.net/bug.php?id=27609\n * @see https://bugs.php.net/bug.php?id=30931\n *\n * @param string $path Windows path to check for write-ability.\n * @return bool Whether the path is writable.\n */\nfunction win_is_writable( $path ) {\n\n\tif ( $path[strlen( $path ) - 1] == '/' ) { // if it looks like a directory, check a random file within the directory\n\t\treturn win_is_writable( $path . uniqid( mt_rand() ) . '.tmp');\n\t} elseif ( is_dir( $path ) ) { // If it's a directory (and not a file) check a random file within the directory\n\t\treturn win_is_writable( $path . '/' . uniqid( mt_rand() ) . '.tmp' );\n\t}\n\t// check tmp file for read/write capabilities\n\t$should_delete_tmp_file = !file_exists( $path );\n\t$f = @fopen( $path, 'a' );\n\tif ( $f === false )\n\t\treturn false;\n\tfclose( $f );\n\tif ( $should_delete_tmp_file )\n\t\tunlink( $path );\n\treturn true;\n}\n\n/**\n * Retrieves uploads directory information.\n *\n * Same as wp_upload_dir() but \"light weight\" as it doesn't attempt to create the uploads directory.\n * Intended for use in themes, when only 'basedir' and 'baseurl' are needed, generally in all cases\n * when not uploading files.\n *\n * @since 4.5.0\n *\n * @see wp_upload_dir()\n *\n * @return array See wp_upload_dir() for description.\n */\nfunction wp_get_upload_dir() {\n\treturn wp_upload_dir( null, false );\n}\n\n/**\n * Get an array containing the current upload directory's path and url.\n *\n * Checks the 'upload_path' option, which should be from the web root folder,\n * and if it isn't empty it will be used. If it is empty, then the path will be\n * 'WP_CONTENT_DIR/uploads'. If the 'UPLOADS' constant is defined, then it will\n * override the 'upload_path' option and 'WP_CONTENT_DIR/uploads' path.\n *\n * The upload URL path is set either by the 'upload_url_path' option or by using\n * the 'WP_CONTENT_URL' constant and appending '/uploads' to the path.\n *\n * If the 'uploads_use_yearmonth_folders' is set to true (checkbox if checked in\n * the administration settings panel), then the time will be used. The format\n * will be year first and then month.\n *\n * If the path couldn't be created, then an error will be returned with the key\n * 'error' containing the error message. The error suggests that the parent\n * directory is not writable by the server.\n *\n * On success, the returned array will have many indices:\n * 'path' - base directory and sub directory or full path to upload directory.\n * 'url' - base url and sub directory or absolute URL to upload directory.\n * 'subdir' - sub directory if uploads use year/month folders option is on.\n * 'basedir' - path without subdir.\n * 'baseurl' - URL path without subdir.\n * 'error' - false or error message.\n *\n * @since 2.0.0\n * @uses _wp_upload_dir()\n *\n * @staticvar array $cache\n * @staticvar array $tested_paths\n *\n * @param string $time Optional. Time formatted in 'yyyy/mm'. Default null.\n * @param bool   $create_dir Optional. Whether to check and create the uploads directory.\n *                           Default true for backward compatibility.\n * @param bool   $refresh_cache Optional. Whether to refresh the cache. Default false.\n * @return array See above for description.\n */\nfunction wp_upload_dir( $time = null, $create_dir = true, $refresh_cache = false ) {\n\tstatic $cache = array(), $tested_paths = array();\n\n\t$key = sprintf( '%d-%s', get_current_blog_id(), (string) $time );\n\n\tif ( $refresh_cache || empty( $cache[ $key ] ) ) {\n\t\t$cache[ $key ] = _wp_upload_dir( $time );\n\t}\n\n\t/**\n\t * Filters the uploads directory data.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array $uploads Array of upload directory data with keys of 'path',\n\t *                       'url', 'subdir, 'basedir', and 'error'.\n\t */\n\t$uploads = apply_filters( 'upload_dir', $cache[ $key ] );\n\n\tif ( $create_dir ) {\n\t\t$path = $uploads['path'];\n\n\t\tif ( array_key_exists( $path, $tested_paths ) ) {\n\t\t\t$uploads['error'] = $tested_paths[ $path ];\n\t\t} else {\n\t\t\tif ( ! wp_mkdir_p( $path ) ) {\n\t\t\t\tif ( 0 === strpos( $uploads['basedir'], ABSPATH ) ) {\n\t\t\t\t\t$error_path = str_replace( ABSPATH, '', $uploads['basedir'] ) . $uploads['subdir'];\n\t\t\t\t} else {\n\t\t\t\t\t$error_path = basename( $uploads['basedir'] ) . $uploads['subdir'];\n\t\t\t\t}\n\n\t\t\t\t$uploads['error'] = sprintf(\n\t\t\t\t\t/* translators: %s: directory path */\n\t\t\t\t\t__( 'Unable to create directory %s. Is its parent directory writable by the server?' ),\n\t\t\t\t\tesc_html( $error_path )\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$tested_paths[ $path ] = $uploads['error'];\n\t\t}\n\t}\n\n\treturn $uploads;\n}\n\n/**\n * A non-filtered, non-cached version of wp_upload_dir() that doesn't check the path.\n *\n * @since 4.5.0\n * @access private\n *\n * @param string $time Optional. Time formatted in 'yyyy/mm'. Default null.\n * @return array See wp_upload_dir()\n */\nfunction _wp_upload_dir( $time = null ) {\n\t$siteurl = get_option( 'siteurl' );\n\t$upload_path = trim( get_option( 'upload_path' ) );\n\n\tif ( empty( $upload_path ) || 'wp-content/uploads' == $upload_path ) {\n\t\t$dir = WP_CONTENT_DIR . '/uploads';\n\t} elseif ( 0 !== strpos( $upload_path, ABSPATH ) ) {\n\t\t// $dir is absolute, $upload_path is (maybe) relative to ABSPATH\n\t\t$dir = path_join( ABSPATH, $upload_path );\n\t} else {\n\t\t$dir = $upload_path;\n\t}\n\n\tif ( !$url = get_option( 'upload_url_path' ) ) {\n\t\tif ( empty($upload_path) || ( 'wp-content/uploads' == $upload_path ) || ( $upload_path == $dir ) )\n\t\t\t$url = WP_CONTENT_URL . '/uploads';\n\t\telse\n\t\t\t$url = trailingslashit( $siteurl ) . $upload_path;\n\t}\n\n\t/*\n\t * Honor the value of UPLOADS. This happens as long as ms-files rewriting is disabled.\n\t * We also sometimes obey UPLOADS when rewriting is enabled -- see the next block.\n\t */\n\tif ( defined( 'UPLOADS' ) && ! ( is_multisite() && get_site_option( 'ms_files_rewriting' ) ) ) {\n\t\t$dir = ABSPATH . UPLOADS;\n\t\t$url = trailingslashit( $siteurl ) . UPLOADS;\n\t}\n\n\t// If multisite (and if not the main site in a post-MU network)\n\tif ( is_multisite() && ! ( is_main_network() && is_main_site() && defined( 'MULTISITE' ) ) ) {\n\n\t\tif ( ! get_site_option( 'ms_files_rewriting' ) ) {\n\t\t\t/*\n\t\t\t * If ms-files rewriting is disabled (networks created post-3.5), it is fairly\n\t\t\t * straightforward: Append sites/%d if we're not on the main site (for post-MU\n\t\t\t * networks). (The extra directory prevents a four-digit ID from conflicting with\n\t\t\t * a year-based directory for the main site. But if a MU-era network has disabled\n\t\t\t * ms-files rewriting manually, they don't need the extra directory, as they never\n\t\t\t * had wp-content/uploads for the main site.)\n\t\t\t */\n\n\t\t\tif ( defined( 'MULTISITE' ) )\n\t\t\t\t$ms_dir = '/sites/' . get_current_blog_id();\n\t\t\telse\n\t\t\t\t$ms_dir = '/' . get_current_blog_id();\n\n\t\t\t$dir .= $ms_dir;\n\t\t\t$url .= $ms_dir;\n\n\t\t} elseif ( defined( 'UPLOADS' ) && ! ms_is_switched() ) {\n\t\t\t/*\n\t\t\t * Handle the old-form ms-files.php rewriting if the network still has that enabled.\n\t\t\t * When ms-files rewriting is enabled, then we only listen to UPLOADS when:\n\t\t\t * 1) We are not on the main site in a post-MU network, as wp-content/uploads is used\n\t\t\t *    there, and\n\t\t\t * 2) We are not switched, as ms_upload_constants() hardcodes these constants to reflect\n\t\t\t *    the original blog ID.\n\t\t\t *\n\t\t\t * Rather than UPLOADS, we actually use BLOGUPLOADDIR if it is set, as it is absolute.\n\t\t\t * (And it will be set, see ms_upload_constants().) Otherwise, UPLOADS can be used, as\n\t\t\t * as it is relative to ABSPATH. For the final piece: when UPLOADS is used with ms-files\n\t\t\t * rewriting in multisite, the resulting URL is /files. (#WP22702 for background.)\n\t\t\t */\n\n\t\t\tif ( defined( 'BLOGUPLOADDIR' ) )\n\t\t\t\t$dir = untrailingslashit( BLOGUPLOADDIR );\n\t\t\telse\n\t\t\t\t$dir = ABSPATH . UPLOADS;\n\t\t\t$url = trailingslashit( $siteurl ) . 'files';\n\t\t}\n\t}\n\n\t$basedir = $dir;\n\t$baseurl = $url;\n\n\t$subdir = '';\n\tif ( get_option( 'uploads_use_yearmonth_folders' ) ) {\n\t\t// Generate the yearly and monthly dirs\n\t\tif ( !$time )\n\t\t\t$time = current_time( 'mysql' );\n\t\t$y = substr( $time, 0, 4 );\n\t\t$m = substr( $time, 5, 2 );\n\t\t$subdir = \"/$y/$m\";\n\t}\n\n\t$dir .= $subdir;\n\t$url .= $subdir;\n\n\treturn array(\n\t\t'path'    => $dir,\n\t\t'url'     => $url,\n\t\t'subdir'  => $subdir,\n\t\t'basedir' => $basedir,\n\t\t'baseurl' => $baseurl,\n\t\t'error'   => false,\n\t);\n}\n\n/**\n * Get a filename that is sanitized and unique for the given directory.\n *\n * If the filename is not unique, then a number will be added to the filename\n * before the extension, and will continue adding numbers until the filename is\n * unique.\n *\n * The callback is passed three parameters, the first one is the directory, the\n * second is the filename, and the third is the extension.\n *\n * @since 2.5.0\n *\n * @param string   $dir                      Directory.\n * @param string   $filename                 File name.\n * @param callable $unique_filename_callback Callback. Default null.\n * @return string New filename, if given wasn't unique.\n */\nfunction wp_unique_filename( $dir, $filename, $unique_filename_callback = null ) {\n\t// Sanitize the file name before we begin processing.\n\t$filename = sanitize_file_name($filename);\n\n\t// Separate the filename into a name and extension.\n\t$ext = pathinfo( $filename, PATHINFO_EXTENSION );\n\t$name = pathinfo( $filename, PATHINFO_BASENAME );\n\tif ( $ext ) {\n\t\t$ext = '.' . $ext;\n\t}\n\n\t// Edge case: if file is named '.ext', treat as an empty name.\n\tif ( $name === $ext ) {\n\t\t$name = '';\n\t}\n\n\t/*\n\t * Increment the file number until we have a unique file to save in $dir.\n\t * Use callback if supplied.\n\t */\n\tif ( $unique_filename_callback && is_callable( $unique_filename_callback ) ) {\n\t\t$filename = call_user_func( $unique_filename_callback, $dir, $name, $ext );\n\t} else {\n\t\t$number = '';\n\n\t\t// Change '.ext' to lower case.\n\t\tif ( $ext && strtolower($ext) != $ext ) {\n\t\t\t$ext2 = strtolower($ext);\n\t\t\t$filename2 = preg_replace( '|' . preg_quote($ext) . '$|', $ext2, $filename );\n\n\t\t\t// Check for both lower and upper case extension or image sub-sizes may be overwritten.\n\t\t\twhile ( file_exists($dir . \"/$filename\") || file_exists($dir . \"/$filename2\") ) {\n\t\t\t\t$new_number = (int) $number + 1;\n\t\t\t\t$filename = str_replace( array( \"-$number$ext\", \"$number$ext\" ), \"-$new_number$ext\", $filename );\n\t\t\t\t$filename2 = str_replace( array( \"-$number$ext2\", \"$number$ext2\" ), \"-$new_number$ext2\", $filename2 );\n\t\t\t\t$number = $new_number;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters the result when generating a unique file name.\n\t\t\t *\n\t\t\t * @since 4.5.0\n\t\t\t *\n\t\t\t * @param string        $filename                 Unique file name.\n\t\t\t * @param string        $ext                      File extension, eg. \".png\".\n\t\t\t * @param string        $dir                      Directory path.\n\t\t\t * @param callable|null $unique_filename_callback Callback function that generates the unique file name.\n\t\t\t */\n\t\t\treturn apply_filters( 'wp_unique_filename', $filename2, $ext, $dir, $unique_filename_callback );\n\t\t}\n\n\t\twhile ( file_exists( $dir . \"/$filename\" ) ) {\n\t\t\t$new_number = (int) $number + 1;\n\t\t\tif ( '' == \"$number$ext\" ) {\n\t\t\t\t$filename = \"$filename-\" . $new_number;\n\t\t\t} else {\n\t\t\t\t$filename = str_replace( array( \"-$number$ext\", \"$number$ext\" ), \"-\" . $new_number . $ext, $filename );\n\t\t\t}\n\t\t\t$number = $new_number;\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-includes/functions.php */\n\treturn apply_filters( 'wp_unique_filename', $filename, $ext, $dir, $unique_filename_callback );\n}\n\n/**\n * Create a file in the upload folder with given content.\n *\n * If there is an error, then the key 'error' will exist with the error message.\n * If success, then the key 'file' will have the unique file path, the 'url' key\n * will have the link to the new file. and the 'error' key will be set to false.\n *\n * This function will not move an uploaded file to the upload folder. It will\n * create a new file with the content in $bits parameter. If you move the upload\n * file, read the content of the uploaded file, and then you can give the\n * filename and content to this function, which will add it to the upload\n * folder.\n *\n * The permissions will be set on the new file automatically by this function.\n *\n * @since 2.0.0\n *\n * @param string       $name       Filename.\n * @param null|string  $deprecated Never used. Set to null.\n * @param mixed        $bits       File content\n * @param string       $time       Optional. Time formatted in 'yyyy/mm'. Default null.\n * @return array\n */\nfunction wp_upload_bits( $name, $deprecated, $bits, $time = null ) {\n\tif ( !empty( $deprecated ) )\n\t\t_deprecated_argument( __FUNCTION__, '2.0.0' );\n\n\tif ( empty( $name ) )\n\t\treturn array( 'error' => __( 'Empty filename' ) );\n\n\t$wp_filetype = wp_check_filetype( $name );\n\tif ( ! $wp_filetype['ext'] && ! current_user_can( 'unfiltered_upload' ) )\n\t\treturn array( 'error' => __( 'Sorry, this file type is not permitted for security reasons.' ) );\n\n\t$upload = wp_upload_dir( $time );\n\n\tif ( $upload['error'] !== false )\n\t\treturn $upload;\n\n\t/**\n\t * Filters whether to treat the upload bits as an error.\n\t *\n\t * Passing a non-array to the filter will effectively short-circuit preparing\n\t * the upload bits, returning that value instead.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param mixed $upload_bits_error An array of upload bits data, or a non-array error to return.\n\t */\n\t$upload_bits_error = apply_filters( 'wp_upload_bits', array( 'name' => $name, 'bits' => $bits, 'time' => $time ) );\n\tif ( !is_array( $upload_bits_error ) ) {\n\t\t$upload[ 'error' ] = $upload_bits_error;\n\t\treturn $upload;\n\t}\n\n\t$filename = wp_unique_filename( $upload['path'], $name );\n\n\t$new_file = $upload['path'] . \"/$filename\";\n\tif ( ! wp_mkdir_p( dirname( $new_file ) ) ) {\n\t\tif ( 0 === strpos( $upload['basedir'], ABSPATH ) )\n\t\t\t$error_path = str_replace( ABSPATH, '', $upload['basedir'] ) . $upload['subdir'];\n\t\telse\n\t\t\t$error_path = basename( $upload['basedir'] ) . $upload['subdir'];\n\n\t\t$message = sprintf(\n\t\t\t/* translators: %s: directory path */\n\t\t\t__( 'Unable to create directory %s. Is its parent directory writable by the server?' ),\n\t\t\t$error_path\n\t\t);\n\t\treturn array( 'error' => $message );\n\t}\n\n\t$ifp = @ fopen( $new_file, 'wb' );\n\tif ( ! $ifp )\n\t\treturn array( 'error' => sprintf( __( 'Could not write file %s' ), $new_file ) );\n\n\t@fwrite( $ifp, $bits );\n\tfclose( $ifp );\n\tclearstatcache();\n\n\t// Set correct file permissions\n\t$stat = @ stat( dirname( $new_file ) );\n\t$perms = $stat['mode'] & 0007777;\n\t$perms = $perms & 0000666;\n\t@ chmod( $new_file, $perms );\n\tclearstatcache();\n\n\t// Compute the URL\n\t$url = $upload['url'] . \"/$filename\";\n\n\t/** This filter is documented in wp-admin/includes/file.php */\n\treturn apply_filters( 'wp_handle_upload', array( 'file' => $new_file, 'url' => $url, 'type' => $wp_filetype['type'], 'error' => false ), 'sideload' );\n}\n\n/**\n * Retrieve the file type based on the extension name.\n *\n * @since 2.5.0\n *\n * @param string $ext The extension to search.\n * @return string|void The file type, example: audio, video, document, spreadsheet, etc.\n */\nfunction wp_ext2type( $ext ) {\n\t$ext = strtolower( $ext );\n\n\t$ext2type = wp_get_ext_types();\n\tforeach ( $ext2type as $type => $exts )\n\t\tif ( in_array( $ext, $exts ) )\n\t\t\treturn $type;\n}\n\n/**\n * Retrieve the file type from the file name.\n *\n * You can optionally define the mime array, if needed.\n *\n * @since 2.0.4\n *\n * @param string $filename File name or path.\n * @param array  $mimes    Optional. Key is the file extension with value as the mime type.\n * @return array Values with extension first and mime type.\n */\nfunction wp_check_filetype( $filename, $mimes = null ) {\n\tif ( empty($mimes) )\n\t\t$mimes = get_allowed_mime_types();\n\t$type = false;\n\t$ext = false;\n\n\tforeach ( $mimes as $ext_preg => $mime_match ) {\n\t\t$ext_preg = '!\\.(' . $ext_preg . ')$!i';\n\t\tif ( preg_match( $ext_preg, $filename, $ext_matches ) ) {\n\t\t\t$type = $mime_match;\n\t\t\t$ext = $ext_matches[1];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn compact( 'ext', 'type' );\n}\n\n/**\n * Attempt to determine the real file type of a file.\n *\n * If unable to, the file name extension will be used to determine type.\n *\n * If it's determined that the extension does not match the file's real type,\n * then the \"proper_filename\" value will be set with a proper filename and extension.\n *\n * Currently this function only supports renaming images validated via wp_get_image_mime().\n *\n * @since 3.0.0\n *\n * @param string $file     Full path to the file.\n * @param string $filename The name of the file (may differ from $file due to $file being\n *                         in a tmp directory).\n * @param array   $mimes   Optional. Key is the file extension with value as the mime type.\n * @return array Values for the extension, MIME, and either a corrected filename or false\n *               if original $filename is valid.\n */\nfunction wp_check_filetype_and_ext( $file, $filename, $mimes = null ) {\n\t$proper_filename = false;\n\n\t// Do basic extension validation and MIME mapping\n\t$wp_filetype = wp_check_filetype( $filename, $mimes );\n\t$ext = $wp_filetype['ext'];\n\t$type = $wp_filetype['type'];\n\n\t// We can't do any further validation without a file to work with\n\tif ( ! file_exists( $file ) ) {\n\t\treturn compact( 'ext', 'type', 'proper_filename' );\n\t}\n\n\t$real_mime = false;\n\n\t// Validate image types.\n\tif ( $type && 0 === strpos( $type, 'image/' ) ) {\n\n\t\t// Attempt to figure out what type of image it actually is\n\t\t$real_mime = wp_get_image_mime( $file );\n\n\t\tif ( $real_mime && $real_mime != $type ) {\n\t\t\t/**\n\t\t\t * Filters the list mapping image mime types to their respective extensions.\n\t\t\t *\n\t\t\t * @since 3.0.0\n\t\t\t *\n\t\t\t * @param  array $mime_to_ext Array of image mime types and their matching extensions.\n\t\t\t */\n\t\t\t$mime_to_ext = apply_filters( 'getimagesize_mimes_to_exts', array(\n\t\t\t\t'image/jpeg' => 'jpg',\n\t\t\t\t'image/png'  => 'png',\n\t\t\t\t'image/gif'  => 'gif',\n\t\t\t\t'image/bmp'  => 'bmp',\n\t\t\t\t'image/tiff' => 'tif',\n\t\t\t) );\n\n\t\t\t// Replace whatever is after the last period in the filename with the correct extension\n\t\t\tif ( ! empty( $mime_to_ext[ $real_mime ] ) ) {\n\t\t\t\t$filename_parts = explode( '.', $filename );\n\t\t\t\tarray_pop( $filename_parts );\n\t\t\t\t$filename_parts[] = $mime_to_ext[ $real_mime ];\n\t\t\t\t$new_filename = implode( '.', $filename_parts );\n\n\t\t\t\tif ( $new_filename != $filename ) {\n\t\t\t\t\t$proper_filename = $new_filename; // Mark that it changed\n\t\t\t\t}\n\t\t\t\t// Redefine the extension / MIME\n\t\t\t\t$wp_filetype = wp_check_filetype( $new_filename, $mimes );\n\t\t\t\t$ext = $wp_filetype['ext'];\n\t\t\t\t$type = $wp_filetype['type'];\n\t\t\t} else {\n\t\t\t\t// Reset $real_mime and try validating again.\n\t\t\t\t$real_mime = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Validate files that didn't get validated during previous checks.\n\tif ( $type && ! $real_mime && extension_loaded( 'fileinfo' ) ) {\n\t\t$finfo = finfo_open( FILEINFO_MIME_TYPE );\n\t\t$real_mime = finfo_file( $finfo, $file );\n\t\tfinfo_close( $finfo );\n\n\t\t/*\n\t\t * If $real_mime doesn't match what we're expecting, we need to do some extra\n\t\t * vetting of application mime types to make sure this type of file is allowed.\n\t\t * Other mime types are assumed to be safe, but should be considered unverified.\n\t\t */\n\t\tif ( $real_mime && ( $real_mime !== $type ) && ( 0 === strpos( $real_mime, 'application' ) ) ) {\n\t\t\t$allowed = get_allowed_mime_types();\n\n\t\t\tif ( ! in_array( $real_mime, $allowed ) ) {\n\t\t\t\t$type = $ext = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * Filters the \"real\" file type of the given file.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param array  $wp_check_filetype_and_ext File data array containing 'ext', 'type', and\n\t *                                          'proper_filename' keys.\n\t * @param string $file                      Full path to the file.\n\t * @param string $filename                  The name of the file (may differ from $file due to\n\t *                                          $file being in a tmp directory).\n\t * @param array  $mimes                     Key is the file extension with value as the mime type.\n\t */\n\treturn apply_filters( 'wp_check_filetype_and_ext', compact( 'ext', 'type', 'proper_filename' ), $file, $filename, $mimes );\n}\n\n/**\n * Returns the real mime type of an image file.\n *\n * This depends on exif_imagetype() or getimagesize() to determine real mime types.\n *\n * @since 4.7.1\n *\n * @param string $file Full path to the file.\n * @return string|false The actual mime type or false if the type cannot be determined.\n */\nfunction wp_get_image_mime( $file ) {\n\t/*\n\t * Use exif_imagetype() to check the mimetype if available or fall back to\n\t * getimagesize() if exif isn't avaialbe. If either function throws an Exception\n\t * we assume the file could not be validated.\n\t */\n\ttry {\n\t\tif ( is_callable( 'exif_imagetype' ) ) {\n\t\t\t$imagetype = exif_imagetype( $file );\n\t\t\t$mime = ( $imagetype ) ? image_type_to_mime_type( $imagetype ) : false;\n\t\t} elseif ( function_exists( 'getimagesize' ) ) {\n\t\t\t$imagesize = getimagesize( $file );\n\t\t\t$mime = ( isset( $imagesize['mime'] ) ) ? $imagesize['mime'] : false;\n\t\t} else {\n\t\t\t$mime = false;\n\t\t}\n\t} catch ( Exception $e ) {\n\t\t$mime = false;\n\t}\n\n\treturn $mime;\n}\n\n/**\n * Retrieve list of mime types and file extensions.\n *\n * @since 3.5.0\n * @since 4.2.0 Support was added for GIMP (xcf) files.\n *\n * @return array Array of mime types keyed by the file extension regex corresponding to those types.\n */\nfunction wp_get_mime_types() {\n\t/**\n\t * Filters the list of mime types and file extensions.\n\t *\n\t * This filter should be used to add, not remove, mime types. To remove\n\t * mime types, use the {@see 'upload_mimes'} filter.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param array $wp_get_mime_types Mime types keyed by the file extension regex\n\t *                                 corresponding to those types.\n\t */\n\treturn apply_filters( 'mime_types', array(\n\t// Image formats.\n\t'jpg|jpeg|jpe' => 'image/jpeg',\n\t'gif' => 'image/gif',\n\t'png' => 'image/png',\n\t'bmp' => 'image/bmp',\n\t'tiff|tif' => 'image/tiff',\n\t'ico' => 'image/x-icon',\n\t// Video formats.\n\t'asf|asx' => 'video/x-ms-asf',\n\t'wmv' => 'video/x-ms-wmv',\n\t'wmx' => 'video/x-ms-wmx',\n\t'wm' => 'video/x-ms-wm',\n\t'avi' => 'video/avi',\n\t'divx' => 'video/divx',\n\t'flv' => 'video/x-flv',\n\t'mov|qt' => 'video/quicktime',\n\t'mpeg|mpg|mpe' => 'video/mpeg',\n\t'mp4|m4v' => 'video/mp4',\n\t'ogv' => 'video/ogg',\n\t'webm' => 'video/webm',\n\t'mkv' => 'video/x-matroska',\n\t'3gp|3gpp' => 'video/3gpp', // Can also be audio\n\t'3g2|3gp2' => 'video/3gpp2', // Can also be audio\n\t// Text formats.\n\t'txt|asc|c|cc|h|srt' => 'text/plain',\n\t'csv' => 'text/csv',\n\t'tsv' => 'text/tab-separated-values',\n\t'ics' => 'text/calendar',\n\t'rtx' => 'text/richtext',\n\t'css' => 'text/css',\n\t'htm|html' => 'text/html',\n\t'vtt' => 'text/vtt',\n\t'dfxp' => 'application/ttaf+xml',\n\t// Audio formats.\n\t'mp3|m4a|m4b' => 'audio/mpeg',\n\t'aac' => 'audio/aac',\n\t'ra|ram' => 'audio/x-realaudio',\n\t'wav' => 'audio/wav',\n\t'ogg|oga' => 'audio/ogg',\n\t'flac' => 'audio/flac',\n\t'mid|midi' => 'audio/midi',\n\t'wma' => 'audio/x-ms-wma',\n\t'wax' => 'audio/x-ms-wax',\n\t'mka' => 'audio/x-matroska',\n\t// Misc application formats.\n\t'rtf' => 'application/rtf',\n\t'js' => 'application/javascript',\n\t'pdf' => 'application/pdf',\n\t'swf' => 'application/x-shockwave-flash',\n\t'class' => 'application/java',\n\t'tar' => 'application/x-tar',\n\t'zip' => 'application/zip',\n\t'gz|gzip' => 'application/x-gzip',\n\t'rar' => 'application/rar',\n\t'7z' => 'application/x-7z-compressed',\n\t'exe' => 'application/x-msdownload',\n\t'psd' => 'application/octet-stream',\n\t'xcf' => 'application/octet-stream',\n\t// MS Office formats.\n\t'doc' => 'application/msword',\n\t'pot|pps|ppt' => 'application/vnd.ms-powerpoint',\n\t'wri' => 'application/vnd.ms-write',\n\t'xla|xls|xlt|xlw' => 'application/vnd.ms-excel',\n\t'mdb' => 'application/vnd.ms-access',\n\t'mpp' => 'application/vnd.ms-project',\n\t'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n\t'docm' => 'application/vnd.ms-word.document.macroEnabled.12',\n\t'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',\n\t'dotm' => 'application/vnd.ms-word.template.macroEnabled.12',\n\t'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t'xlsm' => 'application/vnd.ms-excel.sheet.macroEnabled.12',\n\t'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12',\n\t'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',\n\t'xltm' => 'application/vnd.ms-excel.template.macroEnabled.12',\n\t'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12',\n\t'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n\t'pptm' => 'application/vnd.ms-powerpoint.presentation.macroEnabled.12',\n\t'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',\n\t'ppsm' => 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',\n\t'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template',\n\t'potm' => 'application/vnd.ms-powerpoint.template.macroEnabled.12',\n\t'ppam' => 'application/vnd.ms-powerpoint.addin.macroEnabled.12',\n\t'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide',\n\t'sldm' => 'application/vnd.ms-powerpoint.slide.macroEnabled.12',\n\t'onetoc|onetoc2|onetmp|onepkg' => 'application/onenote',\n\t'oxps' => 'application/oxps',\n\t'xps' => 'application/vnd.ms-xpsdocument',\n\t// OpenOffice formats.\n\t'odt' => 'application/vnd.oasis.opendocument.text',\n\t'odp' => 'application/vnd.oasis.opendocument.presentation',\n\t'ods' => 'application/vnd.oasis.opendocument.spreadsheet',\n\t'odg' => 'application/vnd.oasis.opendocument.graphics',\n\t'odc' => 'application/vnd.oasis.opendocument.chart',\n\t'odb' => 'application/vnd.oasis.opendocument.database',\n\t'odf' => 'application/vnd.oasis.opendocument.formula',\n\t// WordPerfect formats.\n\t'wp|wpd' => 'application/wordperfect',\n\t// iWork formats.\n\t'key' => 'application/vnd.apple.keynote',\n\t'numbers' => 'application/vnd.apple.numbers',\n\t'pages' => 'application/vnd.apple.pages',\n\t) );\n}\n\n/**\n * Retrieves the list of common file extensions and their types.\n *\n * @since 4.6.0\n *\n * @return array Array of file extensions types keyed by the type of file.\n */\nfunction wp_get_ext_types() {\n\n\t/**\n\t * Filters file type based on the extension name.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @see wp_ext2type()\n\t *\n\t * @param array $ext2type Multi-dimensional array with extensions for a default set\n\t *                        of file types.\n\t */\n\treturn apply_filters( 'ext2type', array(\n\t\t'image'       => array( 'jpg', 'jpeg', 'jpe',  'gif',  'png',  'bmp',   'tif',  'tiff', 'ico' ),\n\t\t'audio'       => array( 'aac', 'ac3',  'aif',  'aiff', 'flac', 'm3a',  'm4a',   'm4b',  'mka',  'mp1',  'mp2',  'mp3', 'ogg', 'oga', 'ram', 'wav', 'wma' ),\n\t\t'video'       => array( '3g2',  '3gp', '3gpp', 'asf', 'avi',  'divx', 'dv',   'flv',  'm4v',   'mkv',  'mov',  'mp4',  'mpeg', 'mpg', 'mpv', 'ogm', 'ogv', 'qt',  'rm', 'vob', 'wmv' ),\n\t\t'document'    => array( 'doc', 'docx', 'docm', 'dotm', 'odt',  'pages', 'pdf',  'xps',  'oxps', 'rtf',  'wp', 'wpd', 'psd', 'xcf' ),\n\t\t'spreadsheet' => array( 'numbers',     'ods',  'xls',  'xlsx', 'xlsm',  'xlsb' ),\n\t\t'interactive' => array( 'swf', 'key',  'ppt',  'pptx', 'pptm', 'pps',   'ppsx', 'ppsm', 'sldx', 'sldm', 'odp' ),\n\t\t'text'        => array( 'asc', 'csv',  'tsv',  'txt' ),\n\t\t'archive'     => array( 'bz2', 'cab',  'dmg',  'gz',   'rar',  'sea',   'sit',  'sqx',  'tar',  'tgz',  'zip', '7z' ),\n\t\t'code'        => array( 'css', 'htm',  'html', 'php',  'js' ),\n\t) );\n}\n\n/**\n * Retrieve list of allowed mime types and file extensions.\n *\n * @since 2.8.6\n *\n * @param int|WP_User $user Optional. User to check. Defaults to current user.\n * @return array Array of mime types keyed by the file extension regex corresponding\n *               to those types.\n */\nfunction get_allowed_mime_types( $user = null ) {\n\t$t = wp_get_mime_types();\n\n\tunset( $t['swf'], $t['exe'] );\n\tif ( function_exists( 'current_user_can' ) )\n\t\t$unfiltered = $user ? user_can( $user, 'unfiltered_html' ) : current_user_can( 'unfiltered_html' );\n\n\tif ( empty( $unfiltered ) ) {\n\t\tunset( $t['htm|html'], $t['js'] );\n\t}\n\n\t/**\n\t * Filters list of allowed mime types and file extensions.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array            $t    Mime types keyed by the file extension regex corresponding to\n\t *                               those types. 'swf' and 'exe' removed from full list. 'htm|html' also\n\t *                               removed depending on '$user' capabilities.\n\t * @param int|WP_User|null $user User ID, User object or null if not provided (indicates current user).\n\t */\n\treturn apply_filters( 'upload_mimes', $t, $user );\n}\n\n/**\n * Display \"Are You Sure\" message to confirm the action being taken.\n *\n * If the action has the nonce explain message, then it will be displayed\n * along with the \"Are you sure?\" message.\n *\n * @since 2.0.4\n *\n * @param string $action The nonce action.\n */\nfunction wp_nonce_ays( $action ) {\n\tif ( 'log-out' == $action ) {\n\t\t$html = sprintf(\n\t\t\t/* translators: %s: site name */\n\t\t\t__( 'You are attempting to log out of %s' ),\n\t\t\tget_bloginfo( 'name' )\n\t\t);\n\t\t$html .= '</p><p>';\n\t\t$redirect_to = isset( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '';\n\t\t$html .= sprintf(\n\t\t\t/* translators: %s: logout URL */\n\t\t\t__( 'Do you really want to <a href=\"%s\">log out</a>?' ),\n\t\t\twp_logout_url( $redirect_to )\n\t\t);\n\t} else {\n\t\t$html = __( 'The link you followed has expired.' );\n\t\tif ( wp_get_referer() ) {\n\t\t\t$html .= '</p><p>';\n\t\t\t$html .= sprintf( '<a href=\"%s\">%s</a>',\n\t\t\t\tesc_url( remove_query_arg( 'updated', wp_get_referer() ) ),\n\t\t\t\t__( 'Please try again.' )\n\t\t\t);\n\t\t}\n\t}\n\n\twp_die( $html, __( 'Something went wrong.' ), 403 );\n}\n\n/**\n * Kill WordPress execution and display HTML message with error message.\n *\n * This function complements the `die()` PHP function. The difference is that\n * HTML will be displayed to the user. It is recommended to use this function\n * only when the execution should not continue any further. It is not recommended\n * to call this function very often, and try to handle as many errors as possible\n * silently or more gracefully.\n *\n * As a shorthand, the desired HTTP response code may be passed as an integer to\n * the `$title` parameter (the default title would apply) or the `$args` parameter.\n *\n * @since 2.0.4\n * @since 4.1.0 The `$title` and `$args` parameters were changed to optionally accept\n *              an integer to be used as the response code.\n *\n * @param string|WP_Error  $message Optional. Error message. If this is a WP_Error object,\n *                                  and not an Ajax or XML-RPC request, the error's messages are used.\n *                                  Default empty.\n * @param string|int       $title   Optional. Error title. If `$message` is a `WP_Error` object,\n *                                  error data with the key 'title' may be used to specify the title.\n *                                  If `$title` is an integer, then it is treated as the response\n *                                  code. Default empty.\n * @param string|array|int $args {\n *     Optional. Arguments to control behavior. If `$args` is an integer, then it is treated\n *     as the response code. Default empty array.\n *\n *     @type int    $response       The HTTP response code. Default 200 for Ajax requests, 500 otherwise.\n *     @type bool   $back_link      Whether to include a link to go back. Default false.\n *     @type string $text_direction The text direction. This is only useful internally, when WordPress\n *                                  is still loading and the site's locale is not set up yet. Accepts 'rtl'.\n *                                  Default is the value of is_rtl().\n * }\n */\nfunction wp_die( $message = '', $title = '', $args = array() ) {\n\n\tif ( is_int( $args ) ) {\n\t\t$args = array( 'response' => $args );\n\t} elseif ( is_int( $title ) ) {\n\t\t$args  = array( 'response' => $title );\n\t\t$title = '';\n\t}\n\n\tif ( wp_doing_ajax() ) {\n\t\t/**\n\t\t * Filters the callback for killing WordPress execution for Ajax requests.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param callable $function Callback function name.\n\t\t */\n\t\t$function = apply_filters( 'wp_die_ajax_handler', '_ajax_wp_die_handler' );\n\t} elseif ( defined( 'XMLRPC_REQUEST' ) && XMLRPC_REQUEST ) {\n\t\t/**\n\t\t * Filters the callback for killing WordPress execution for XML-RPC requests.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param callable $function Callback function name.\n\t\t */\n\t\t$function = apply_filters( 'wp_die_xmlrpc_handler', '_xmlrpc_wp_die_handler' );\n\t} else {\n\t\t/**\n\t\t * Filters the callback for killing WordPress execution for all non-Ajax, non-XML-RPC requests.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param callable $function Callback function name.\n\t\t */\n\t\t$function = apply_filters( 'wp_die_handler', '_default_wp_die_handler' );\n\t}\n\n\tcall_user_func( $function, $message, $title, $args );\n}\n\n/**\n * Kills WordPress execution and display HTML message with error message.\n *\n * This is the default handler for wp_die if you want a custom one for your\n * site then you can overload using the {@see 'wp_die_handler'} filter in wp_die().\n *\n * @since 3.0.0\n * @access private\n *\n * @param string|WP_Error $message Error message or WP_Error object.\n * @param string          $title   Optional. Error title. Default empty.\n * @param string|array    $args    Optional. Arguments to control behavior. Default empty array.\n */\nfunction _default_wp_die_handler( $message, $title = '', $args = array() ) {\n\t$defaults = array( 'response' => 500 );\n\t$r = wp_parse_args($args, $defaults);\n\n\t$have_gettext = function_exists('__');\n\n\tif ( function_exists( 'is_wp_error' ) && is_wp_error( $message ) ) {\n\t\tif ( empty( $title ) ) {\n\t\t\t$error_data = $message->get_error_data();\n\t\t\tif ( is_array( $error_data ) && isset( $error_data['title'] ) )\n\t\t\t\t$title = $error_data['title'];\n\t\t}\n\t\t$errors = $message->get_error_messages();\n\t\tswitch ( count( $errors ) ) {\n\t\tcase 0 :\n\t\t\t$message = '';\n\t\t\tbreak;\n\t\tcase 1 :\n\t\t\t$message = \"<p>{$errors[0]}</p>\";\n\t\t\tbreak;\n\t\tdefault :\n\t\t\t$message = \"<ul>\\n\\t\\t<li>\" . join( \"</li>\\n\\t\\t<li>\", $errors ) . \"</li>\\n\\t</ul>\";\n\t\t\tbreak;\n\t\t}\n\t} elseif ( is_string( $message ) ) {\n\t\t$message = \"<p>$message</p>\";\n\t}\n\n\tif ( isset( $r['back_link'] ) && $r['back_link'] ) {\n\t\t$back_text = $have_gettext? __('&laquo; Back') : '&laquo; Back';\n\t\t$message .= \"\\n<p><a href='javascript:history.back()'>$back_text</a></p>\";\n\t}\n\n\tif ( ! did_action( 'admin_head' ) ) :\n\t\tif ( !headers_sent() ) {\n\t\t\tstatus_header( $r['response'] );\n\t\t\tnocache_headers();\n\t\t\theader( 'Content-Type: text/html; charset=utf-8' );\n\t\t}\n\n\t\tif ( empty($title) )\n\t\t\t$title = $have_gettext ? __('WordPress &rsaquo; Error') : 'WordPress &rsaquo; Error';\n\n\t\t$text_direction = 'ltr';\n\t\tif ( isset($r['text_direction']) && 'rtl' == $r['text_direction'] )\n\t\t\t$text_direction = 'rtl';\n\t\telseif ( function_exists( 'is_rtl' ) && is_rtl() )\n\t\t\t$text_direction = 'rtl';\n?>\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" <?php if ( function_exists( 'language_attributes' ) && function_exists( 'is_rtl' ) ) language_attributes(); else echo \"dir='$text_direction'\"; ?>>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta name=\"viewport\" content=\"width=device-width\">\n\t<?php\n\tif ( function_exists( 'wp_no_robots' ) ) {\n\t\twp_no_robots();\n\t}\n\t?>\n\t<title><?php echo $title ?></title>\n\t<style type=\"text/css\">\n\t\thtml {\n\t\t\tbackground: #f1f1f1;\n\t\t}\n\t\tbody {\n\t\t\tbackground: #fff;\n\t\t\tcolor: #444;\n\t\t\tfont-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n\t\t\tmargin: 2em auto;\n\t\t\tpadding: 1em 2em;\n\t\t\tmax-width: 700px;\n\t\t\t-webkit-box-shadow: 0 1px 3px rgba(0,0,0,0.13);\n\t\t\tbox-shadow: 0 1px 3px rgba(0,0,0,0.13);\n\t\t}\n\t\th1 {\n\t\t\tborder-bottom: 1px solid #dadada;\n\t\t\tclear: both;\n\t\t\tcolor: #666;\n\t\t\tfont-size: 24px;\n\t\t\tmargin: 30px 0 0 0;\n\t\t\tpadding: 0;\n\t\t\tpadding-bottom: 7px;\n\t\t}\n\t\t#error-page {\n\t\t\tmargin-top: 50px;\n\t\t}\n\t\t#error-page p {\n\t\t\tfont-size: 14px;\n\t\t\tline-height: 1.5;\n\t\t\tmargin: 25px 0 20px;\n\t\t}\n\t\t#error-page code {\n\t\t\tfont-family: Consolas, Monaco, monospace;\n\t\t}\n\t\tul li {\n\t\t\tmargin-bottom: 10px;\n\t\t\tfont-size: 14px ;\n\t\t}\n\t\ta {\n\t\t\tcolor: #0073aa;\n\t\t}\n\t\ta:hover,\n\t\ta:active {\n\t\t\tcolor: #00a0d2;\n\t\t}\n\t\ta:focus {\n\t\t\tcolor: #124964;\n\t\t    -webkit-box-shadow:\n\t\t    \t0 0 0 1px #5b9dd9,\n\t\t\t\t0 0 2px 1px rgba(30, 140, 190, .8);\n\t\t    box-shadow:\n\t\t    \t0 0 0 1px #5b9dd9,\n\t\t\t\t0 0 2px 1px rgba(30, 140, 190, .8);\n\t\t\toutline: none;\n\t\t}\n\t\t.button {\n\t\t\tbackground: #f7f7f7;\n\t\t\tborder: 1px solid #ccc;\n\t\t\tcolor: #555;\n\t\t\tdisplay: inline-block;\n\t\t\ttext-decoration: none;\n\t\t\tfont-size: 13px;\n\t\t\tline-height: 26px;\n\t\t\theight: 28px;\n\t\t\tmargin: 0;\n\t\t\tpadding: 0 10px 1px;\n\t\t\tcursor: pointer;\n\t\t\t-webkit-border-radius: 3px;\n\t\t\t-webkit-appearance: none;\n\t\t\tborder-radius: 3px;\n\t\t\twhite-space: nowrap;\n\t\t\t-webkit-box-sizing: border-box;\n\t\t\t-moz-box-sizing:    border-box;\n\t\t\tbox-sizing:         border-box;\n\n\t\t\t-webkit-box-shadow: 0 1px 0 #ccc;\n\t\t\tbox-shadow: 0 1px 0 #ccc;\n\t\t \tvertical-align: top;\n\t\t}\n\n\t\t.button.button-large {\n\t\t\theight: 30px;\n\t\t\tline-height: 28px;\n\t\t\tpadding: 0 12px 2px;\n\t\t}\n\n\t\t.button:hover,\n\t\t.button:focus {\n\t\t\tbackground: #fafafa;\n\t\t\tborder-color: #999;\n\t\t\tcolor: #23282d;\n\t\t}\n\n\t\t.button:focus  {\n\t\t\tborder-color: #5b9dd9;\n\t\t\t-webkit-box-shadow: 0 0 3px rgba( 0, 115, 170, .8 );\n\t\t\tbox-shadow: 0 0 3px rgba( 0, 115, 170, .8 );\n\t\t\toutline: none;\n\t\t}\n\n\t\t.button:active {\n\t\t\tbackground: #eee;\n\t\t\tborder-color: #999;\n\t\t \t-webkit-box-shadow: inset 0 2px 5px -3px rgba( 0, 0, 0, 0.5 );\n\t\t \tbox-shadow: inset 0 2px 5px -3px rgba( 0, 0, 0, 0.5 );\n\t\t \t-webkit-transform: translateY(1px);\n\t\t \t-ms-transform: translateY(1px);\n\t\t \ttransform: translateY(1px);\n\t\t}\n\n\t\t<?php\n\t\tif ( 'rtl' == $text_direction ) {\n\t\t\techo 'body { font-family: Tahoma, Arial; }';\n\t\t}\n\t\t?>\n\t</style>\n</head>\n<body id=\"error-page\">\n<?php endif; // ! did_action( 'admin_head' ) ?>\n\t<?php echo $message; ?>\n</body>\n</html>\n<?php\n\tdie();\n}\n\n/**\n * Kill WordPress execution and display XML message with error message.\n *\n * This is the handler for wp_die when processing XMLRPC requests.\n *\n * @since 3.2.0\n * @access private\n *\n * @global wp_xmlrpc_server $wp_xmlrpc_server\n *\n * @param string       $message Error message.\n * @param string       $title   Optional. Error title. Default empty.\n * @param string|array $args    Optional. Arguments to control behavior. Default empty array.\n */\nfunction _xmlrpc_wp_die_handler( $message, $title = '', $args = array() ) {\n\tglobal $wp_xmlrpc_server;\n\t$defaults = array( 'response' => 500 );\n\n\t$r = wp_parse_args($args, $defaults);\n\n\tif ( $wp_xmlrpc_server ) {\n\t\t$error = new IXR_Error( $r['response'] , $message);\n\t\t$wp_xmlrpc_server->output( $error->getXml() );\n\t}\n\tdie();\n}\n\n/**\n * Kill WordPress ajax execution.\n *\n * This is the handler for wp_die when processing Ajax requests.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string       $message Error message.\n * @param string       $title   Optional. Error title (unused). Default empty.\n * @param string|array $args    Optional. Arguments to control behavior. Default empty array.\n */\nfunction _ajax_wp_die_handler( $message, $title = '', $args = array() ) {\n\t$defaults = array(\n\t\t'response' => 200,\n\t);\n\t$r = wp_parse_args( $args, $defaults );\n\n\tif ( ! headers_sent() && null !== $r['response'] ) {\n\t\tstatus_header( $r['response'] );\n\t}\n\n\tif ( is_scalar( $message ) )\n\t\tdie( (string) $message );\n\tdie( '0' );\n}\n\n/**\n * Kill WordPress execution.\n *\n * This is the handler for wp_die when processing APP requests.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $message Optional. Response to print. Default empty.\n */\nfunction _scalar_wp_die_handler( $message = '' ) {\n\tif ( is_scalar( $message ) )\n\t\tdie( (string) $message );\n\tdie();\n}\n\n/**\n * Encode a variable into JSON, with some sanity checks.\n *\n * @since 4.1.0\n *\n * @param mixed $data    Variable (usually an array or object) to encode as JSON.\n * @param int   $options Optional. Options to be passed to json_encode(). Default 0.\n * @param int   $depth   Optional. Maximum depth to walk through $data. Must be\n *                       greater than 0. Default 512.\n * @return string|false The JSON encoded string, or false if it cannot be encoded.\n */\nfunction wp_json_encode( $data, $options = 0, $depth = 512 ) {\n\t/*\n\t * json_encode() has had extra params added over the years.\n\t * $options was added in 5.3, and $depth in 5.5.\n\t * We need to make sure we call it with the correct arguments.\n\t */\n\tif ( version_compare( PHP_VERSION, '5.5', '>=' ) ) {\n\t\t$args = array( $data, $options, $depth );\n\t} elseif ( version_compare( PHP_VERSION, '5.3', '>=' ) ) {\n\t\t$args = array( $data, $options );\n\t} else {\n\t\t$args = array( $data );\n\t}\n\n\t// Prepare the data for JSON serialization.\n\t$args[0] = _wp_json_prepare_data( $data );\n\n\t$json = @call_user_func_array( 'json_encode', $args );\n\n\t// If json_encode() was successful, no need to do more sanity checking.\n\t// ... unless we're in an old version of PHP, and json_encode() returned\n\t// a string containing 'null'. Then we need to do more sanity checking.\n\tif ( false !== $json && ( version_compare( PHP_VERSION, '5.5', '>=' ) || false === strpos( $json, 'null' ) ) )  {\n\t\treturn $json;\n\t}\n\n\ttry {\n\t\t$args[0] = _wp_json_sanity_check( $data, $depth );\n\t} catch ( Exception $e ) {\n\t\treturn false;\n\t}\n\n\treturn call_user_func_array( 'json_encode', $args );\n}\n\n/**\n * Perform sanity checks on data that shall be encoded to JSON.\n *\n * @ignore\n * @since 4.1.0\n * @access private\n *\n * @see wp_json_encode()\n *\n * @param mixed $data  Variable (usually an array or object) to encode as JSON.\n * @param int   $depth Maximum depth to walk through $data. Must be greater than 0.\n * @return mixed The sanitized data that shall be encoded to JSON.\n */\nfunction _wp_json_sanity_check( $data, $depth ) {\n\tif ( $depth < 0 ) {\n\t\tthrow new Exception( 'Reached depth limit' );\n\t}\n\n\tif ( is_array( $data ) ) {\n\t\t$output = array();\n\t\tforeach ( $data as $id => $el ) {\n\t\t\t// Don't forget to sanitize the ID!\n\t\t\tif ( is_string( $id ) ) {\n\t\t\t\t$clean_id = _wp_json_convert_string( $id );\n\t\t\t} else {\n\t\t\t\t$clean_id = $id;\n\t\t\t}\n\n\t\t\t// Check the element type, so that we're only recursing if we really have to.\n\t\t\tif ( is_array( $el ) || is_object( $el ) ) {\n\t\t\t\t$output[ $clean_id ] = _wp_json_sanity_check( $el, $depth - 1 );\n\t\t\t} elseif ( is_string( $el ) ) {\n\t\t\t\t$output[ $clean_id ] = _wp_json_convert_string( $el );\n\t\t\t} else {\n\t\t\t\t$output[ $clean_id ] = $el;\n\t\t\t}\n\t\t}\n\t} elseif ( is_object( $data ) ) {\n\t\t$output = new stdClass;\n\t\tforeach ( $data as $id => $el ) {\n\t\t\tif ( is_string( $id ) ) {\n\t\t\t\t$clean_id = _wp_json_convert_string( $id );\n\t\t\t} else {\n\t\t\t\t$clean_id = $id;\n\t\t\t}\n\n\t\t\tif ( is_array( $el ) || is_object( $el ) ) {\n\t\t\t\t$output->$clean_id = _wp_json_sanity_check( $el, $depth - 1 );\n\t\t\t} elseif ( is_string( $el ) ) {\n\t\t\t\t$output->$clean_id = _wp_json_convert_string( $el );\n\t\t\t} else {\n\t\t\t\t$output->$clean_id = $el;\n\t\t\t}\n\t\t}\n\t} elseif ( is_string( $data ) ) {\n\t\treturn _wp_json_convert_string( $data );\n\t} else {\n\t\treturn $data;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Convert a string to UTF-8, so that it can be safely encoded to JSON.\n *\n * @ignore\n * @since 4.1.0\n * @access private\n *\n * @see _wp_json_sanity_check()\n *\n * @staticvar bool $use_mb\n *\n * @param string $string The string which is to be converted.\n * @return string The checked string.\n */\nfunction _wp_json_convert_string( $string ) {\n\tstatic $use_mb = null;\n\tif ( is_null( $use_mb ) ) {\n\t\t$use_mb = function_exists( 'mb_convert_encoding' );\n\t}\n\n\tif ( $use_mb ) {\n\t\t$encoding = mb_detect_encoding( $string, mb_detect_order(), true );\n\t\tif ( $encoding ) {\n\t\t\treturn mb_convert_encoding( $string, 'UTF-8', $encoding );\n\t\t} else {\n\t\t\treturn mb_convert_encoding( $string, 'UTF-8', 'UTF-8' );\n\t\t}\n\t} else {\n\t\treturn wp_check_invalid_utf8( $string, true );\n\t}\n}\n\n/**\n * Prepares response data to be serialized to JSON.\n *\n * This supports the JsonSerializable interface for PHP 5.2-5.3 as well.\n *\n * @ignore\n * @since 4.4.0\n * @access private\n *\n * @param mixed $data Native representation.\n * @return bool|int|float|null|string|array Data ready for `json_encode()`.\n */\nfunction _wp_json_prepare_data( $data ) {\n\tif ( ! defined( 'WP_JSON_SERIALIZE_COMPATIBLE' ) || WP_JSON_SERIALIZE_COMPATIBLE === false ) {\n\t\treturn $data;\n\t}\n\n\tswitch ( gettype( $data ) ) {\n\t\tcase 'boolean':\n\t\tcase 'integer':\n\t\tcase 'double':\n\t\tcase 'string':\n\t\tcase 'NULL':\n\t\t\t// These values can be passed through.\n\t\t\treturn $data;\n\n\t\tcase 'array':\n\t\t\t// Arrays must be mapped in case they also return objects.\n\t\t\treturn array_map( '_wp_json_prepare_data', $data );\n\n\t\tcase 'object':\n\t\t\t// If this is an incomplete object (__PHP_Incomplete_Class), bail.\n\t\t\tif ( ! is_object( $data ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( $data instanceof JsonSerializable ) {\n\t\t\t\t$data = $data->jsonSerialize();\n\t\t\t} else {\n\t\t\t\t$data = get_object_vars( $data );\n\t\t\t}\n\n\t\t\t// Now, pass the array (or whatever was returned from jsonSerialize through).\n\t\t\treturn _wp_json_prepare_data( $data );\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Send a JSON response back to an Ajax request.\n *\n * @since 3.5.0\n * @since 4.7.0 The `$status_code` parameter was added.\n *\n * @param mixed $response    Variable (usually an array or object) to encode as JSON,\n *                           then print and die.\n * @param int   $status_code The HTTP status code to output.\n */\nfunction wp_send_json( $response, $status_code = null ) {\n\t@header( 'Content-Type: application/json; charset=' . get_option( 'blog_charset' ) );\n\tif ( null !== $status_code ) {\n\t\tstatus_header( $status_code );\n\t}\n\techo wp_json_encode( $response );\n\n\tif ( wp_doing_ajax() ) {\n\t\twp_die( '', '', array(\n\t\t\t'response' => null,\n\t\t) );\n\t} else {\n\t\tdie;\n\t}\n}\n\n/**\n * Send a JSON response back to an Ajax request, indicating success.\n *\n * @since 3.5.0\n * @since 4.7.0 The `$status_code` parameter was added.\n *\n * @param mixed $data        Data to encode as JSON, then print and die.\n * @param int   $status_code The HTTP status code to output.\n */\nfunction wp_send_json_success( $data = null, $status_code = null ) {\n\t$response = array( 'success' => true );\n\n\tif ( isset( $data ) )\n\t\t$response['data'] = $data;\n\n\twp_send_json( $response, $status_code );\n}\n\n/**\n * Send a JSON response back to an Ajax request, indicating failure.\n *\n * If the `$data` parameter is a WP_Error object, the errors\n * within the object are processed and output as an array of error\n * codes and corresponding messages. All other types are output\n * without further processing.\n *\n * @since 3.5.0\n * @since 4.1.0 The `$data` parameter is now processed if a WP_Error object is passed in.\n * @since 4.7.0 The `$status_code` parameter was added.\n *\n * @param mixed $data        Data to encode as JSON, then print and die.\n * @param int   $status_code The HTTP status code to output.\n */\nfunction wp_send_json_error( $data = null, $status_code = null ) {\n\t$response = array( 'success' => false );\n\n\tif ( isset( $data ) ) {\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\t$result = array();\n\t\t\tforeach ( $data->errors as $code => $messages ) {\n\t\t\t\tforeach ( $messages as $message ) {\n\t\t\t\t\t$result[] = array( 'code' => $code, 'message' => $message );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$response['data'] = $result;\n\t\t} else {\n\t\t\t$response['data'] = $data;\n\t\t}\n\t}\n\n\twp_send_json( $response, $status_code );\n}\n\n/**\n * Checks that a JSONP callback is a valid JavaScript callback.\n *\n * Only allows alphanumeric characters and the dot character in callback\n * function names. This helps to mitigate XSS attacks caused by directly\n * outputting user input.\n *\n * @since 4.6.0\n *\n * @param string $callback Supplied JSONP callback function.\n * @return bool True if valid callback, otherwise false.\n */\nfunction wp_check_jsonp_callback( $callback ) {\n\tif ( ! is_string( $callback ) ) {\n\t\treturn false;\n\t}\n\n\tpreg_replace( '/[^\\w\\.]/', '', $callback, -1, $illegal_char_count );\n\n\treturn 0 === $illegal_char_count;\n}\n\n/**\n * Retrieve the WordPress home page URL.\n *\n * If the constant named 'WP_HOME' exists, then it will be used and returned\n * by the function. This can be used to counter the redirection on your local\n * development environment.\n *\n * @since 2.2.0\n * @access private\n *\n * @see WP_HOME\n *\n * @param string $url URL for the home location.\n * @return string Homepage location.\n */\nfunction _config_wp_home( $url = '' ) {\n\tif ( defined( 'WP_HOME' ) )\n\t\treturn untrailingslashit( WP_HOME );\n\treturn $url;\n}\n\n/**\n * Retrieve the WordPress site URL.\n *\n * If the constant named 'WP_SITEURL' is defined, then the value in that\n * constant will always be returned. This can be used for debugging a site\n * on your localhost while not having to change the database to your URL.\n *\n * @since 2.2.0\n * @access private\n *\n * @see WP_SITEURL\n *\n * @param string $url URL to set the WordPress site location.\n * @return string The WordPress Site URL.\n */\nfunction _config_wp_siteurl( $url = '' ) {\n\tif ( defined( 'WP_SITEURL' ) )\n\t\treturn untrailingslashit( WP_SITEURL );\n\treturn $url;\n}\n\n/**\n * Delete the fresh site option.\n *\n * @since 4.7.0\n * @access private\n */\nfunction _delete_option_fresh_site() {\n\tupdate_option( 'fresh_site', '0' );\n}\n\n/**\n * Set the localized direction for MCE plugin.\n *\n * Will only set the direction to 'rtl', if the WordPress locale has\n * the text direction set to 'rtl'.\n *\n * Fills in the 'directionality' setting, enables the 'directionality'\n * plugin, and adds the 'ltr' button to 'toolbar1', formerly\n * 'theme_advanced_buttons1' array keys. These keys are then returned\n * in the $mce_init (TinyMCE settings) array.\n *\n * @since 2.1.0\n * @access private\n *\n * @param array $mce_init MCE settings array.\n * @return array Direction set for 'rtl', if needed by locale.\n */\nfunction _mce_set_direction( $mce_init ) {\n\tif ( is_rtl() ) {\n\t\t$mce_init['directionality'] = 'rtl';\n\t\t$mce_init['rtl_ui'] = true;\n\n\t\tif ( ! empty( $mce_init['plugins'] ) && strpos( $mce_init['plugins'], 'directionality' ) === false ) {\n\t\t\t$mce_init['plugins'] .= ',directionality';\n\t\t}\n\n\t\tif ( ! empty( $mce_init['toolbar1'] ) && ! preg_match( '/\\bltr\\b/', $mce_init['toolbar1'] ) ) {\n\t\t\t$mce_init['toolbar1'] .= ',ltr';\n\t\t}\n\t}\n\n\treturn $mce_init;\n}\n\n\n/**\n * Convert smiley code to the icon graphic file equivalent.\n *\n * You can turn off smilies, by going to the write setting screen and unchecking\n * the box, or by setting 'use_smilies' option to false or removing the option.\n *\n * Plugins may override the default smiley list by setting the $wpsmiliestrans\n * to an array, with the key the code the blogger types in and the value the\n * image file.\n *\n * The $wp_smiliessearch global is for the regular expression and is set each\n * time the function is called.\n *\n * The full list of smilies can be found in the function and won't be listed in\n * the description. Probably should create a Codex page for it, so that it is\n * available.\n *\n * @global array $wpsmiliestrans\n * @global array $wp_smiliessearch\n *\n * @since 2.2.0\n */\nfunction smilies_init() {\n\tglobal $wpsmiliestrans, $wp_smiliessearch;\n\n\t// don't bother setting up smilies if they are disabled\n\tif ( !get_option( 'use_smilies' ) )\n\t\treturn;\n\n\tif ( !isset( $wpsmiliestrans ) ) {\n\t\t$wpsmiliestrans = array(\n\t\t':mrgreen:' => 'mrgreen.png',\n\t\t':neutral:' => \"\\xf0\\x9f\\x98\\x90\",\n\t\t':twisted:' => \"\\xf0\\x9f\\x98\\x88\",\n\t\t  ':arrow:' => \"\\xe2\\x9e\\xa1\",\n\t\t  ':shock:' => \"\\xf0\\x9f\\x98\\xaf\",\n\t\t  ':smile:' => \"\\xf0\\x9f\\x99\\x82\",\n\t\t    ':???:' => \"\\xf0\\x9f\\x98\\x95\",\n\t\t   ':cool:' => \"\\xf0\\x9f\\x98\\x8e\",\n\t\t   ':evil:' => \"\\xf0\\x9f\\x91\\xbf\",\n\t\t   ':grin:' => \"\\xf0\\x9f\\x98\\x80\",\n\t\t   ':idea:' => \"\\xf0\\x9f\\x92\\xa1\",\n\t\t   ':oops:' => \"\\xf0\\x9f\\x98\\xb3\",\n\t\t   ':razz:' => \"\\xf0\\x9f\\x98\\x9b\",\n\t\t   ':roll:' => \"\\xf0\\x9f\\x99\\x84\",\n\t\t   ':wink:' => \"\\xf0\\x9f\\x98\\x89\",\n\t\t    ':cry:' => \"\\xf0\\x9f\\x98\\xa5\",\n\t\t    ':eek:' => \"\\xf0\\x9f\\x98\\xae\",\n\t\t    ':lol:' => \"\\xf0\\x9f\\x98\\x86\",\n\t\t    ':mad:' => \"\\xf0\\x9f\\x98\\xa1\",\n\t\t    ':sad:' => \"\\xf0\\x9f\\x99\\x81\",\n\t\t      '8-)' => \"\\xf0\\x9f\\x98\\x8e\",\n\t\t      '8-O' => \"\\xf0\\x9f\\x98\\xaf\",\n\t\t      ':-(' => \"\\xf0\\x9f\\x99\\x81\",\n\t\t      ':-)' => \"\\xf0\\x9f\\x99\\x82\",\n\t\t      ':-?' => \"\\xf0\\x9f\\x98\\x95\",\n\t\t      ':-D' => \"\\xf0\\x9f\\x98\\x80\",\n\t\t      ':-P' => \"\\xf0\\x9f\\x98\\x9b\",\n\t\t      ':-o' => \"\\xf0\\x9f\\x98\\xae\",\n\t\t      ':-x' => \"\\xf0\\x9f\\x98\\xa1\",\n\t\t      ':-|' => \"\\xf0\\x9f\\x98\\x90\",\n\t\t      ';-)' => \"\\xf0\\x9f\\x98\\x89\",\n\t\t// This one transformation breaks regular text with frequency.\n\t\t//     '8)' => \"\\xf0\\x9f\\x98\\x8e\",\n\t\t       '8O' => \"\\xf0\\x9f\\x98\\xaf\",\n\t\t       ':(' => \"\\xf0\\x9f\\x99\\x81\",\n\t\t       ':)' => \"\\xf0\\x9f\\x99\\x82\",\n\t\t       ':?' => \"\\xf0\\x9f\\x98\\x95\",\n\t\t       ':D' => \"\\xf0\\x9f\\x98\\x80\",\n\t\t       ':P' => \"\\xf0\\x9f\\x98\\x9b\",\n\t\t       ':o' => \"\\xf0\\x9f\\x98\\xae\",\n\t\t       ':x' => \"\\xf0\\x9f\\x98\\xa1\",\n\t\t       ':|' => \"\\xf0\\x9f\\x98\\x90\",\n\t\t       ';)' => \"\\xf0\\x9f\\x98\\x89\",\n\t\t      ':!:' => \"\\xe2\\x9d\\x97\",\n\t\t      ':?:' => \"\\xe2\\x9d\\x93\",\n\t\t);\n\t}\n\n\t/**\n\t * Filters all the smilies.\n\t *\n\t * This filter must be added before `smilies_init` is run, as\n\t * it is normally only run once to setup the smilies regex.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param array $wpsmiliestrans List of the smilies.\n\t */\n\t$wpsmiliestrans = apply_filters('smilies', $wpsmiliestrans);\n\n\tif (count($wpsmiliestrans) == 0) {\n\t\treturn;\n\t}\n\n\t/*\n\t * NOTE: we sort the smilies in reverse key order. This is to make sure\n\t * we match the longest possible smilie (:???: vs :?) as the regular\n\t * expression used below is first-match\n\t */\n\tkrsort($wpsmiliestrans);\n\n\t$spaces = wp_spaces_regexp();\n\n\t// Begin first \"subpattern\"\n\t$wp_smiliessearch = '/(?<=' . $spaces . '|^)';\n\n\t$subchar = '';\n\tforeach ( (array) $wpsmiliestrans as $smiley => $img ) {\n\t\t$firstchar = substr($smiley, 0, 1);\n\t\t$rest = substr($smiley, 1);\n\n\t\t// new subpattern?\n\t\tif ($firstchar != $subchar) {\n\t\t\tif ($subchar != '') {\n\t\t\t\t$wp_smiliessearch .= ')(?=' . $spaces . '|$)';  // End previous \"subpattern\"\n\t\t\t\t$wp_smiliessearch .= '|(?<=' . $spaces . '|^)'; // Begin another \"subpattern\"\n\t\t\t}\n\t\t\t$subchar = $firstchar;\n\t\t\t$wp_smiliessearch .= preg_quote($firstchar, '/') . '(?:';\n\t\t} else {\n\t\t\t$wp_smiliessearch .= '|';\n\t\t}\n\t\t$wp_smiliessearch .= preg_quote($rest, '/');\n\t}\n\n\t$wp_smiliessearch .= ')(?=' . $spaces . '|$)/m';\n\n}\n\n/**\n * Merge user defined arguments into defaults array.\n *\n * This function is used throughout WordPress to allow for both string or array\n * to be merged into another array.\n *\n * @since 2.2.0\n * @since 2.3.0 `$args` can now also be an object.\n *\n * @param string|array|object $args     Value to merge with $defaults.\n * @param array               $defaults Optional. Array that serves as the defaults. Default empty.\n * @return array Merged user defined values with defaults.\n */\nfunction wp_parse_args( $args, $defaults = '' ) {\n\tif ( is_object( $args ) )\n\t\t$r = get_object_vars( $args );\n\telseif ( is_array( $args ) )\n\t\t$r =& $args;\n\telse\n\t\twp_parse_str( $args, $r );\n\n\tif ( is_array( $defaults ) )\n\t\treturn array_merge( $defaults, $r );\n\treturn $r;\n}\n\n/**\n * Clean up an array, comma- or space-separated list of IDs.\n *\n * @since 3.0.0\n *\n * @param array|string $list List of ids.\n * @return array Sanitized array of IDs.\n */\nfunction wp_parse_id_list( $list ) {\n\tif ( !is_array($list) )\n\t\t$list = preg_split('/[\\s,]+/', $list);\n\n\treturn array_unique(array_map('absint', $list));\n}\n\n/**\n * Clean up an array, comma- or space-separated list of slugs.\n *\n * @since 4.7.0\n *\n * @param  array|string $list List of slugs.\n * @return array Sanitized array of slugs.\n */\nfunction wp_parse_slug_list( $list ) {\n\tif ( ! is_array( $list ) ) {\n\t\t$list = preg_split( '/[\\s,]+/', $list );\n\t}\n\n\tforeach ( $list as $key => $value ) {\n\t\t$list[ $key ] = sanitize_title( $value );\n\t}\n\n\treturn array_unique( $list );\n}\n\n/**\n * Extract a slice of an array, given a list of keys.\n *\n * @since 3.1.0\n *\n * @param array $array The original array.\n * @param array $keys  The list of keys.\n * @return array The array slice.\n */\nfunction wp_array_slice_assoc( $array, $keys ) {\n\t$slice = array();\n\tforeach ( $keys as $key )\n\t\tif ( isset( $array[ $key ] ) )\n\t\t\t$slice[ $key ] = $array[ $key ];\n\n\treturn $slice;\n}\n\n/**\n * Determines if the variable is a numeric-indexed array.\n *\n * @since 4.4.0\n *\n * @param mixed $data Variable to check.\n * @return bool Whether the variable is a list.\n */\nfunction wp_is_numeric_array( $data ) {\n\tif ( ! is_array( $data ) ) {\n\t\treturn false;\n\t}\n\n\t$keys = array_keys( $data );\n\t$string_keys = array_filter( $keys, 'is_string' );\n\treturn count( $string_keys ) === 0;\n}\n\n/**\n * Filters a list of objects, based on a set of key => value arguments.\n *\n * @since 3.0.0\n * @since 4.7.0 Uses WP_List_Util class.\n *\n * @param array       $list     An array of objects to filter\n * @param array       $args     Optional. An array of key => value arguments to match\n *                              against each object. Default empty array.\n * @param string      $operator Optional. The logical operation to perform. 'or' means\n *                              only one element from the array needs to match; 'and'\n *                              means all elements must match; 'not' means no elements may\n *                              match. Default 'and'.\n * @param bool|string $field    A field from the object to place instead of the entire object.\n *                              Default false.\n * @return array A list of objects or object fields.\n */\nfunction wp_filter_object_list( $list, $args = array(), $operator = 'and', $field = false ) {\n\tif ( ! is_array( $list ) ) {\n\t\treturn array();\n\t}\n\n\t$util = new WP_List_Util( $list );\n\n\t$util->filter( $args, $operator );\n\n\tif ( $field ) {\n\t\t$util->pluck( $field );\n\t}\n\n\treturn $util->get_output();\n}\n\n/**\n * Filters a list of objects, based on a set of key => value arguments.\n *\n * @since 3.1.0\n * @since 4.7.0 Uses WP_List_Util class.\n *\n * @param array  $list     An array of objects to filter.\n * @param array  $args     Optional. An array of key => value arguments to match\n *                         against each object. Default empty array.\n * @param string $operator Optional. The logical operation to perform. 'AND' means\n *                         all elements from the array must match. 'OR' means only\n *                         one element needs to match. 'NOT' means no elements may\n *                         match. Default 'AND'.\n * @return array Array of found values.\n */\nfunction wp_list_filter( $list, $args = array(), $operator = 'AND' ) {\n\tif ( ! is_array( $list ) ) {\n\t\treturn array();\n\t}\n\n\t$util = new WP_List_Util( $list );\n\treturn $util->filter( $args, $operator );\n}\n\n/**\n * Pluck a certain field out of each object in a list.\n *\n * This has the same functionality and prototype of\n * array_column() (PHP 5.5) but also supports objects.\n *\n * @since 3.1.0\n * @since 4.0.0 $index_key parameter added.\n * @since 4.7.0 Uses WP_List_Util class.\n *\n * @param array      $list      List of objects or arrays\n * @param int|string $field     Field from the object to place instead of the entire object\n * @param int|string $index_key Optional. Field from the object to use as keys for the new array.\n *                              Default null.\n * @return array Array of found values. If `$index_key` is set, an array of found values with keys\n *               corresponding to `$index_key`. If `$index_key` is null, array keys from the original\n *               `$list` will be preserved in the results.\n */\nfunction wp_list_pluck( $list, $field, $index_key = null ) {\n\t$util = new WP_List_Util( $list );\n\treturn $util->pluck( $field, $index_key );\n}\n\n/**\n * Sorts a list of objects, based on one or more orderby arguments.\n *\n * @since 4.7.0\n *\n * @param array        $list          An array of objects to filter.\n * @param string|array $orderby       Optional. Either the field name to order by or an array\n *                                    of multiple orderby fields as $orderby => $order.\n * @param string       $order         Optional. Either 'ASC' or 'DESC'. Only used if $orderby\n *                                    is a string.\n * @param bool         $preserve_keys Optional. Whether to preserve keys. Default false.\n * @return array The sorted array.\n */\nfunction wp_list_sort( $list, $orderby = array(), $order = 'ASC', $preserve_keys = false ) {\n\tif ( ! is_array( $list ) ) {\n\t\treturn array();\n\t}\n\n\t$util = new WP_List_Util( $list );\n\treturn $util->sort( $orderby, $order, $preserve_keys );\n}\n\n/**\n * Determines if Widgets library should be loaded.\n *\n * Checks to make sure that the widgets library hasn't already been loaded.\n * If it hasn't, then it will load the widgets library and run an action hook.\n *\n * @since 2.2.0\n */\nfunction wp_maybe_load_widgets() {\n\t/**\n\t * Filters whether to load the Widgets library.\n\t *\n\t * Passing a falsey value to the filter will effectively short-circuit\n\t * the Widgets library from loading.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param bool $wp_maybe_load_widgets Whether to load the Widgets library.\n\t *                                    Default true.\n\t */\n\tif ( ! apply_filters( 'load_default_widgets', true ) ) {\n\t\treturn;\n\t}\n\n\trequire_once( ABSPATH . WPINC . '/default-widgets.php' );\n\n\tadd_action( '_admin_menu', 'wp_widgets_add_menu' );\n}\n\n/**\n * Append the Widgets menu to the themes main menu.\n *\n * @since 2.2.0\n *\n * @global array $submenu\n */\nfunction wp_widgets_add_menu() {\n\tglobal $submenu;\n\n\tif ( ! current_theme_supports( 'widgets' ) )\n\t\treturn;\n\n\t$submenu['themes.php'][7] = array( __( 'Widgets' ), 'edit_theme_options', 'widgets.php' );\n\tksort( $submenu['themes.php'], SORT_NUMERIC );\n}\n\n/**\n * Flush all output buffers for PHP 5.2.\n *\n * Make sure all output buffers are flushed before our singletons are destroyed.\n *\n * @since 2.2.0\n */\nfunction wp_ob_end_flush_all() {\n\t$levels = ob_get_level();\n\tfor ($i=0; $i<$levels; $i++)\n\t\tob_end_flush();\n}\n\n/**\n * Load custom DB error or display WordPress DB error.\n *\n * If a file exists in the wp-content directory named db-error.php, then it will\n * be loaded instead of displaying the WordPress DB error. If it is not found,\n * then the WordPress DB error will be displayed instead.\n *\n * The WordPress DB error sets the HTTP status header to 500 to try to prevent\n * search engines from caching the message. Custom DB messages should do the\n * same.\n *\n * This function was backported to WordPress 2.3.2, but originally was added\n * in WordPress 2.5.0.\n *\n * @since 2.3.2\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n */\nfunction dead_db() {\n\tglobal $wpdb;\n\n\twp_load_translations_early();\n\n\t// Load custom DB error template, if present.\n\tif ( file_exists( WP_CONTENT_DIR . '/db-error.php' ) ) {\n\t\trequire_once( WP_CONTENT_DIR . '/db-error.php' );\n\t\tdie();\n\t}\n\n\t// If installing or in the admin, provide the verbose message.\n\tif ( wp_installing() || defined( 'WP_ADMIN' ) )\n\t\twp_die($wpdb->error);\n\n\t// Otherwise, be terse.\n\tstatus_header( 500 );\n\tnocache_headers();\n\theader( 'Content-Type: text/html; charset=utf-8' );\n?>\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\"<?php if ( is_rtl() ) echo ' dir=\"rtl\"'; ?>>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title><?php _e( 'Database Error' ); ?></title>\n\n</head>\n<body>\n\t<h1><?php _e( 'Error establishing a database connection' ); ?></h1>\n</body>\n</html>\n<?php\n\tdie();\n}\n\n/**\n * Convert a value to non-negative integer.\n *\n * @since 2.5.0\n *\n * @param mixed $maybeint Data you wish to have converted to a non-negative integer.\n * @return int A non-negative integer.\n */\nfunction absint( $maybeint ) {\n\treturn abs( intval( $maybeint ) );\n}\n\n/**\n * Mark a function as deprecated and inform when it has been used.\n *\n * There is a {@see 'hook deprecated_function_run'} that will be called that can be used\n * to get the backtrace up to what file and function called the deprecated\n * function.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is to be used in every function that is deprecated.\n *\n * @since 2.5.0\n * @access private\n *\n * @param string $function    The function that was called.\n * @param string $version     The version of WordPress that deprecated the function.\n * @param string $replacement Optional. The function that should have been called. Default null.\n */\nfunction _deprecated_function( $function, $version, $replacement = null ) {\n\n\t/**\n\t * Fires when a deprecated function is called.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $function    The function that was called.\n\t * @param string $replacement The function that should have been called.\n\t * @param string $version     The version of WordPress that deprecated the function.\n\t */\n\tdo_action( 'deprecated_function_run', $function, $replacement, $version );\n\n\t/**\n\t * Filters whether to trigger an error for deprecated functions.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for deprecated functions. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_function_trigger_error', true ) ) {\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t\t/* translators: 1: PHP function name, 2: version number, 3: alternative function name */\n\t\t\t\ttrigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.'), $function, $version, $replacement ) );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: PHP function name, 2: version number */\n\t\t\t\ttrigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.'), $function, $version ) );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t\ttrigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.', $function, $version, $replacement ) );\n\t\t\t} else {\n\t\t\t\ttrigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.', $function, $version ) );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Marks a constructor as deprecated and informs when it has been used.\n *\n * Similar to _deprecated_function(), but with different strings. Used to\n * remove PHP4 style constructors.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is to be used in every PHP4 style constructor method that is deprecated.\n *\n * @since 4.3.0\n * @since 4.5.0 Added the `$parent_class` parameter.\n *\n * @access private\n *\n * @param string $class        The class containing the deprecated constructor.\n * @param string $version      The version of WordPress that deprecated the function.\n * @param string $parent_class Optional. The parent class calling the deprecated constructor.\n *                             Default empty string.\n */\nfunction _deprecated_constructor( $class, $version, $parent_class = '' ) {\n\n\t/**\n\t * Fires when a deprecated constructor is called.\n\t *\n\t * @since 4.3.0\n\t * @since 4.5.0 Added the `$parent_class` parameter.\n\t *\n\t * @param string $class        The class containing the deprecated constructor.\n\t * @param string $version      The version of WordPress that deprecated the function.\n\t * @param string $parent_class The parent class calling the deprecated constructor.\n\t */\n\tdo_action( 'deprecated_constructor_run', $class, $version, $parent_class );\n\n\t/**\n\t * Filters whether to trigger an error for deprecated functions.\n\t *\n\t * `WP_DEBUG` must be true in addition to the filter evaluating to true.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for deprecated functions. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_constructor_trigger_error', true ) ) {\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( ! empty( $parent_class ) ) {\n\t\t\t\t/* translators: 1: PHP class name, 2: PHP parent class name, 3: version number, 4: __construct() method */\n\t\t\t\ttrigger_error( sprintf( __( 'The called constructor method for %1$s in %2$s is <strong>deprecated</strong> since version %3$s! Use %4$s instead.' ),\n\t\t\t\t\t$class, $parent_class, $version, '<pre>__construct()</pre>' ) );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: PHP class name, 2: version number, 3: __construct() method */\n\t\t\t\ttrigger_error( sprintf( __( 'The called constructor method for %1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.' ),\n\t\t\t\t\t$class, $version, '<pre>__construct()</pre>' ) );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! empty( $parent_class ) ) {\n\t\t\t\ttrigger_error( sprintf( 'The called constructor method for %1$s in %2$s is <strong>deprecated</strong> since version %3$s! Use %4$s instead.',\n\t\t\t\t\t$class, $parent_class, $version, '<pre>__construct()</pre>' ) );\n\t\t\t} else {\n\t\t\t\ttrigger_error( sprintf( 'The called constructor method for %1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.',\n\t\t\t\t\t$class, $version, '<pre>__construct()</pre>' ) );\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n/**\n * Mark a file as deprecated and inform when it has been used.\n *\n * There is a hook {@see 'deprecated_file_included'} that will be called that can be used\n * to get the backtrace up to what file and function included the deprecated\n * file.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is to be used in every file that is deprecated.\n *\n * @since 2.5.0\n * @access private\n *\n * @param string $file        The file that was included.\n * @param string $version     The version of WordPress that deprecated the file.\n * @param string $replacement Optional. The file that should have been included based on ABSPATH.\n *                            Default null.\n * @param string $message     Optional. A message regarding the change. Default empty.\n */\nfunction _deprecated_file( $file, $version, $replacement = null, $message = '' ) {\n\n\t/**\n\t * Fires when a deprecated file is called.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $file        The file that was called.\n\t * @param string $replacement The file that should have been included based on ABSPATH.\n\t * @param string $version     The version of WordPress that deprecated the file.\n\t * @param string $message     A message regarding the change.\n\t */\n\tdo_action( 'deprecated_file_included', $file, $replacement, $version, $message );\n\n\t/**\n\t * Filters whether to trigger an error for deprecated files.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for deprecated files. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_file_trigger_error', true ) ) {\n\t\t$message = empty( $message ) ? '' : ' ' . $message;\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t\t/* translators: 1: PHP file name, 2: version number, 3: alternative file name */\n\t\t\t\ttrigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.'), $file, $version, $replacement ) . $message );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: PHP file name, 2: version number */\n\t\t\t\ttrigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.'), $file, $version ) . $message );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t\ttrigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.', $file, $version, $replacement ) . $message );\n\t\t\t} else {\n\t\t\t\ttrigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.', $file, $version ) . $message );\n\t\t\t}\n\t\t}\n\t}\n}\n/**\n * Mark a function argument as deprecated and inform when it has been used.\n *\n * This function is to be used whenever a deprecated function argument is used.\n * Before this function is called, the argument must be checked for whether it was\n * used by comparing it to its default value or evaluating whether it is empty.\n * For example:\n *\n *     if ( ! empty( $deprecated ) ) {\n *         _deprecated_argument( __FUNCTION__, '3.0.0' );\n *     }\n *\n *\n * There is a hook deprecated_argument_run that will be called that can be used\n * to get the backtrace up to what file and function used the deprecated\n * argument.\n *\n * The current behavior is to trigger a user error if WP_DEBUG is true.\n *\n * @since 3.0.0\n * @access private\n *\n * @param string $function The function that was called.\n * @param string $version  The version of WordPress that deprecated the argument used.\n * @param string $message  Optional. A message regarding the change. Default null.\n */\nfunction _deprecated_argument( $function, $version, $message = null ) {\n\n\t/**\n\t * Fires when a deprecated argument is called.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $function The function that was called.\n\t * @param string $message  A message regarding the change.\n\t * @param string $version  The version of WordPress that deprecated the argument used.\n\t */\n\tdo_action( 'deprecated_argument_run', $function, $message, $version );\n\n\t/**\n\t * Filters whether to trigger an error for deprecated arguments.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for deprecated arguments. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_argument_trigger_error', true ) ) {\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( ! is_null( $message ) ) {\n\t\t\t\t/* translators: 1: PHP function name, 2: version number, 3: optional message regarding the change */\n\t\t\t\ttrigger_error( sprintf( __('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s! %3$s'), $function, $version, $message ) );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: PHP function name, 2: version number */\n\t\t\t\ttrigger_error( sprintf( __('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s with no alternative available.'), $function, $version ) );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! is_null( $message ) ) {\n\t\t\t\ttrigger_error( sprintf( '%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s! %3$s', $function, $version, $message ) );\n\t\t\t} else {\n\t\t\t\ttrigger_error( sprintf( '%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s with no alternative available.', $function, $version ) );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Marks a deprecated action or filter hook as deprecated and throws a notice.\n *\n * Use the {@see 'deprecated_hook_run'} action to get the backtrace describing where\n * the deprecated hook was called.\n *\n * Default behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is called by the do_action_deprecated() and apply_filters_deprecated()\n * functions, and so generally does not need to be called directly.\n *\n * @since 4.6.0\n * @access private\n *\n * @param string $hook        The hook that was used.\n * @param string $version     The version of WordPress that deprecated the hook.\n * @param string $replacement Optional. The hook that should have been used.\n * @param string $message     Optional. A message regarding the change.\n */\nfunction _deprecated_hook( $hook, $version, $replacement = null, $message = null ) {\n\t/**\n\t * Fires when a deprecated hook is called.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param string $hook        The hook that was called.\n\t * @param string $replacement The hook that should be used as a replacement.\n\t * @param string $version     The version of WordPress that deprecated the argument used.\n\t * @param string $message     A message regarding the change.\n\t */\n\tdo_action( 'deprecated_hook_run', $hook, $replacement, $version, $message );\n\n\t/**\n\t * Filters whether to trigger deprecated hook errors.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param bool $trigger Whether to trigger deprecated hook errors. Requires\n\t *                      `WP_DEBUG` to be defined true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_hook_trigger_error', true ) ) {\n\t\t$message = empty( $message ) ? '' : ' ' . $message;\n\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t/* translators: 1: WordPress hook name, 2: version number, 3: alternative hook name */\n\t\t\ttrigger_error( sprintf( __( '%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.' ), $hook, $version, $replacement ) . $message );\n\t\t} else {\n\t\t\t/* translators: 1: WordPress hook name, 2: version number */\n\t\t\ttrigger_error( sprintf( __( '%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.' ), $hook, $version ) . $message );\n\t\t}\n\t}\n}\n\n/**\n * Mark something as being incorrectly called.\n *\n * There is a hook {@see 'doing_it_wrong_run'} that will be called that can be used\n * to get the backtrace up to what file and function called the deprecated\n * function.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * @since 3.1.0\n * @access private\n *\n * @param string $function The function that was called.\n * @param string $message  A message explaining what has been done incorrectly.\n * @param string $version  The version of WordPress where the message was added.\n */\nfunction _doing_it_wrong( $function, $message, $version ) {\n\n\t/**\n\t * Fires when the given function is being used incorrectly.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param string $function The function that was called.\n\t * @param string $message  A message explaining what has been done incorrectly.\n\t * @param string $version  The version of WordPress where the message was added.\n\t */\n\tdo_action( 'doing_it_wrong_run', $function, $message, $version );\n\n\t/**\n\t * Filters whether to trigger an error for _doing_it_wrong() calls.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for _doing_it_wrong() calls. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'doing_it_wrong_trigger_error', true ) ) {\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( is_null( $version ) ) {\n\t\t\t\t$version = '';\n\t\t\t} else {\n\t\t\t\t/* translators: %s: version number */\n\t\t\t\t$version = sprintf( __( '(This message was added in version %s.)' ), $version );\n\t\t\t}\n\t\t\t/* translators: %s: Codex URL */\n\t\t\t$message .= ' ' . sprintf( __( 'Please see <a href=\"%s\">Debugging in WordPress</a> for more information.' ),\n\t\t\t\t__( 'https://codex.wordpress.org/Debugging_in_WordPress' )\n\t\t\t);\n\t\t\t/* translators: Developer debugging message. 1: PHP function name, 2: Explanatory message, 3: Version information message */\n\t\t\ttrigger_error( sprintf( __( '%1$s was called <strong>incorrectly</strong>. %2$s %3$s' ), $function, $message, $version ) );\n\t\t} else {\n\t\t\tif ( is_null( $version ) ) {\n\t\t\t\t$version = '';\n\t\t\t} else {\n\t\t\t\t$version = sprintf( '(This message was added in version %s.)', $version );\n\t\t\t}\n\t\t\t$message .= sprintf( ' Please see <a href=\"%s\">Debugging in WordPress</a> for more information.',\n\t\t\t\t'https://codex.wordpress.org/Debugging_in_WordPress'\n\t\t\t);\n\t\t\ttrigger_error( sprintf( '%1$s was called <strong>incorrectly</strong>. %2$s %3$s', $function, $message, $version ) );\n\t\t}\n\t}\n}\n\n/**\n * Is the server running earlier than 1.5.0 version of lighttpd?\n *\n * @since 2.5.0\n *\n * @return bool Whether the server is running lighttpd < 1.5.0.\n */\nfunction is_lighttpd_before_150() {\n\t$server_parts = explode( '/', isset( $_SERVER['SERVER_SOFTWARE'] )? $_SERVER['SERVER_SOFTWARE'] : '' );\n\t$server_parts[1] = isset( $server_parts[1] )? $server_parts[1] : '';\n\treturn  'lighttpd' == $server_parts[0] && -1 == version_compare( $server_parts[1], '1.5.0' );\n}\n\n/**\n * Does the specified module exist in the Apache config?\n *\n * @since 2.5.0\n *\n * @global bool $is_apache\n *\n * @param string $mod     The module, e.g. mod_rewrite.\n * @param bool   $default Optional. The default return value if the module is not found. Default false.\n * @return bool Whether the specified module is loaded.\n */\nfunction apache_mod_loaded($mod, $default = false) {\n\tglobal $is_apache;\n\n\tif ( !$is_apache )\n\t\treturn false;\n\n\tif ( function_exists( 'apache_get_modules' ) ) {\n\t\t$mods = apache_get_modules();\n\t\tif ( in_array($mod, $mods) )\n\t\t\treturn true;\n\t} elseif ( function_exists( 'phpinfo' ) && false === strpos( ini_get( 'disable_functions' ), 'phpinfo' ) ) {\n\t\t\tob_start();\n\t\t\tphpinfo(8);\n\t\t\t$phpinfo = ob_get_clean();\n\t\t\tif ( false !== strpos($phpinfo, $mod) )\n\t\t\t\treturn true;\n\t}\n\treturn $default;\n}\n\n/**\n * Check if IIS 7+ supports pretty permalinks.\n *\n * @since 2.8.0\n *\n * @global bool $is_iis7\n *\n * @return bool Whether IIS7 supports permalinks.\n */\nfunction iis7_supports_permalinks() {\n\tglobal $is_iis7;\n\n\t$supports_permalinks = false;\n\tif ( $is_iis7 ) {\n\t\t/* First we check if the DOMDocument class exists. If it does not exist, then we cannot\n\t\t * easily update the xml configuration file, hence we just bail out and tell user that\n\t\t * pretty permalinks cannot be used.\n\t\t *\n\t\t * Next we check if the URL Rewrite Module 1.1 is loaded and enabled for the web site. When\n\t\t * URL Rewrite 1.1 is loaded it always sets a server variable called 'IIS_UrlRewriteModule'.\n\t\t * Lastly we make sure that PHP is running via FastCGI. This is important because if it runs\n\t\t * via ISAPI then pretty permalinks will not work.\n\t\t */\n\t\t$supports_permalinks = class_exists( 'DOMDocument', false ) && isset($_SERVER['IIS_UrlRewriteModule']) && ( PHP_SAPI == 'cgi-fcgi' );\n\t}\n\n\t/**\n\t * Filters whether IIS 7+ supports pretty permalinks.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param bool $supports_permalinks Whether IIS7 supports permalinks. Default false.\n\t */\n\treturn apply_filters( 'iis7_supports_permalinks', $supports_permalinks );\n}\n\n/**\n * Validates a file name and path against an allowed set of rules.\n *\n * A return value of `1` means the file path contains directory traversal.\n *\n * A return value of `2` means the file path contains a Windows drive path.\n *\n * A return value of `3` means the file is not in the allowed files list.\n *\n * @since 1.2.0\n *\n * @param string $file          File path.\n * @param array  $allowed_files Optional. List of allowed files.\n * @return int 0 means nothing is wrong, greater than 0 means something was wrong.\n */\nfunction validate_file( $file, $allowed_files = array() ) {\n\t// `../` on its own is not allowed:\n\tif ( '../' === $file ) {\n\t\treturn 1;\n\t}\n\n\t// More than one occurence of `../` is not allowed:\n\tif ( preg_match_all( '#\\.\\./#', $file, $matches, PREG_SET_ORDER ) && ( count( $matches ) > 1 ) ) {\n\t\treturn 1;\n\t}\n\n\t// `../` which does not occur at the end of the path is not allowed:\n\tif ( false !== strpos( $file, '../' ) && '../' !== mb_substr( $file, -3, 3 ) ) {\n\t\treturn 1;\n\t}\n\n\t// Files not in the allowed file list are not allowed:\n\tif ( ! empty( $allowed_files ) && ! in_array( $file, $allowed_files ) )\n\t\treturn 3;\n\n\t// Absolute Windows drive paths are not allowed:\n\tif (':' == substr( $file, 1, 1 ) )\n\t\treturn 2;\n\n\treturn 0;\n}\n\n/**\n * Whether to force SSL used for the Administration Screens.\n *\n * @since 2.6.0\n *\n * @staticvar bool $forced\n *\n * @param string|bool $force Optional. Whether to force SSL in admin screens. Default null.\n * @return bool True if forced, false if not forced.\n */\nfunction force_ssl_admin( $force = null ) {\n\tstatic $forced = false;\n\n\tif ( !is_null( $force ) ) {\n\t\t$old_forced = $forced;\n\t\t$forced = $force;\n\t\treturn $old_forced;\n\t}\n\n\treturn $forced;\n}\n\n/**\n * Guess the URL for the site.\n *\n * Will remove wp-admin links to retrieve only return URLs not in the wp-admin\n * directory.\n *\n * @since 2.6.0\n *\n * @return string The guessed URL.\n */\nfunction wp_guess_url() {\n\tif ( defined('WP_SITEURL') && '' != WP_SITEURL ) {\n\t\t$url = WP_SITEURL;\n\t} else {\n\t\t$abspath_fix = str_replace( '\\\\', '/', ABSPATH );\n\t\t$script_filename_dir = dirname( $_SERVER['SCRIPT_FILENAME'] );\n\n\t\t// The request is for the admin\n\t\tif ( strpos( $_SERVER['REQUEST_URI'], 'wp-admin' ) !== false || strpos( $_SERVER['REQUEST_URI'], 'wp-login.php' ) !== false ) {\n\t\t\t$path = preg_replace( '#/(wp-admin/.*|wp-login.php)#i', '', $_SERVER['REQUEST_URI'] );\n\n\t\t// The request is for a file in ABSPATH\n\t\t} elseif ( $script_filename_dir . '/' == $abspath_fix ) {\n\t\t\t// Strip off any file/query params in the path\n\t\t\t$path = preg_replace( '#/[^/]*$#i', '', $_SERVER['PHP_SELF'] );\n\n\t\t} else {\n\t\t\tif ( false !== strpos( $_SERVER['SCRIPT_FILENAME'], $abspath_fix ) ) {\n\t\t\t\t// Request is hitting a file inside ABSPATH\n\t\t\t\t$directory = str_replace( ABSPATH, '', $script_filename_dir );\n\t\t\t\t// Strip off the sub directory, and any file/query params\n\t\t\t\t$path = preg_replace( '#/' . preg_quote( $directory, '#' ) . '/[^/]*$#i', '' , $_SERVER['REQUEST_URI'] );\n\t\t\t} elseif ( false !== strpos( $abspath_fix, $script_filename_dir ) ) {\n\t\t\t\t// Request is hitting a file above ABSPATH\n\t\t\t\t$subdirectory = substr( $abspath_fix, strpos( $abspath_fix, $script_filename_dir ) + strlen( $script_filename_dir ) );\n\t\t\t\t// Strip off any file/query params from the path, appending the sub directory to the installation\n\t\t\t\t$path = preg_replace( '#/[^/]*$#i', '' , $_SERVER['REQUEST_URI'] ) . $subdirectory;\n\t\t\t} else {\n\t\t\t\t$path = $_SERVER['REQUEST_URI'];\n\t\t\t}\n\t\t}\n\n\t\t$schema = is_ssl() ? 'https://' : 'http://'; // set_url_scheme() is not defined yet\n\t\t$url = $schema . $_SERVER['HTTP_HOST'] . $path;\n\t}\n\n\treturn rtrim($url, '/');\n}\n\n/**\n * Temporarily suspend cache additions.\n *\n * Stops more data being added to the cache, but still allows cache retrieval.\n * This is useful for actions, such as imports, when a lot of data would otherwise\n * be almost uselessly added to the cache.\n *\n * Suspension lasts for a single page load at most. Remember to call this\n * function again if you wish to re-enable cache adds earlier.\n *\n * @since 3.3.0\n *\n * @staticvar bool $_suspend\n *\n * @param bool $suspend Optional. Suspends additions if true, re-enables them if false.\n * @return bool The current suspend setting\n */\nfunction wp_suspend_cache_addition( $suspend = null ) {\n\tstatic $_suspend = false;\n\n\tif ( is_bool( $suspend ) )\n\t\t$_suspend = $suspend;\n\n\treturn $_suspend;\n}\n\n/**\n * Suspend cache invalidation.\n *\n * Turns cache invalidation on and off. Useful during imports where you don't want to do\n * invalidations every time a post is inserted. Callers must be sure that what they are\n * doing won't lead to an inconsistent cache when invalidation is suspended.\n *\n * @since 2.7.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param bool $suspend Optional. Whether to suspend or enable cache invalidation. Default true.\n * @return bool The current suspend setting.\n */\nfunction wp_suspend_cache_invalidation( $suspend = true ) {\n\tglobal $_wp_suspend_cache_invalidation;\n\n\t$current_suspend = $_wp_suspend_cache_invalidation;\n\t$_wp_suspend_cache_invalidation = $suspend;\n\treturn $current_suspend;\n}\n\n/**\n * Determine whether a site is the main site of the current network.\n *\n * @since 3.0.0\n * @since 4.9.0 The $network_id parameter has been added.\n *\n * @param int $site_id    Optional. Site ID to test. Defaults to current site.\n * @param int $network_id Optional. Network ID of the network to check for.\n *                        Defaults to current network.\n * @return bool True if $site_id is the main site of the network, or if not\n *              running Multisite.\n */\nfunction is_main_site( $site_id = null, $network_id = null ) {\n\tif ( ! is_multisite() ) {\n\t\treturn true;\n\t}\n\n\tif ( ! $site_id ) {\n\t\t$site_id = get_current_blog_id();\n\t}\n\n\t$site_id = (int) $site_id;\n\n\treturn $site_id === get_main_site_id( $network_id );\n}\n\n/**\n * Gets the main site ID.\n *\n * @since 4.9.0\n *\n * @param int $network_id Optional. The ID of the network for which to get the main site.\n *                        Defaults to the current network.\n * @return int The ID of the main site.\n */\nfunction get_main_site_id( $network_id = null ) {\n\tif ( ! is_multisite() ) {\n\t\treturn get_current_blog_id();\n\t}\n\n\t$network = get_network( $network_id );\n\tif ( ! $network ) {\n\t\treturn 0;\n\t}\n\n\treturn $network->site_id;\n}\n\n/**\n * Determine whether a network is the main network of the Multisite installation.\n *\n * @since 3.7.0\n *\n * @param int $network_id Optional. Network ID to test. Defaults to current network.\n * @return bool True if $network_id is the main network, or if not running Multisite.\n */\nfunction is_main_network( $network_id = null ) {\n\tif ( ! is_multisite() ) {\n\t\treturn true;\n\t}\n\n\tif ( null === $network_id ) {\n\t\t$network_id = get_current_network_id();\n\t}\n\n\t$network_id = (int) $network_id;\n\n\treturn ( $network_id === get_main_network_id() );\n}\n\n/**\n * Get the main network ID.\n *\n * @since 4.3.0\n *\n * @return int The ID of the main network.\n */\nfunction get_main_network_id() {\n\tif ( ! is_multisite() ) {\n\t\treturn 1;\n\t}\n\n\t$current_network = get_network();\n\n\tif ( defined( 'PRIMARY_NETWORK_ID' ) ) {\n\t\t$main_network_id = PRIMARY_NETWORK_ID;\n\t} elseif ( isset( $current_network->id ) && 1 === (int) $current_network->id ) {\n\t\t// If the current network has an ID of 1, assume it is the main network.\n\t\t$main_network_id = 1;\n\t} else {\n\t\t$_networks = get_networks( array( 'fields' => 'ids', 'number' => 1 ) );\n\t\t$main_network_id = array_shift( $_networks );\n\t}\n\n\t/**\n\t * Filters the main network ID.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param int $main_network_id The ID of the main network.\n\t */\n\treturn (int) apply_filters( 'get_main_network_id', $main_network_id );\n}\n\n/**\n * Determine whether global terms are enabled.\n *\n * @since 3.0.0\n *\n * @staticvar bool $global_terms\n *\n * @return bool True if multisite and global terms enabled.\n */\nfunction global_terms_enabled() {\n\tif ( ! is_multisite() )\n\t\treturn false;\n\n\tstatic $global_terms = null;\n\tif ( is_null( $global_terms ) ) {\n\n\t\t/**\n\t\t * Filters whether global terms are enabled.\n\t\t *\n\t\t * Passing a non-null value to the filter will effectively short-circuit the function,\n\t\t * returning the value of the 'global_terms_enabled' site option instead.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param null $enabled Whether global terms are enabled.\n\t\t */\n\t\t$filter = apply_filters( 'global_terms_enabled', null );\n\t\tif ( ! is_null( $filter ) )\n\t\t\t$global_terms = (bool) $filter;\n\t\telse\n\t\t\t$global_terms = (bool) get_site_option( 'global_terms_enabled', false );\n\t}\n\treturn $global_terms;\n}\n\n/**\n * gmt_offset modification for smart timezone handling.\n *\n * Overrides the gmt_offset option if we have a timezone_string available.\n *\n * @since 2.8.0\n *\n * @return float|false Timezone GMT offset, false otherwise.\n */\nfunction wp_timezone_override_offset() {\n\tif ( !$timezone_string = get_option( 'timezone_string' ) ) {\n\t\treturn false;\n\t}\n\n\t$timezone_object = timezone_open( $timezone_string );\n\t$datetime_object = date_create();\n\tif ( false === $timezone_object || false === $datetime_object ) {\n\t\treturn false;\n\t}\n\treturn round( timezone_offset_get( $timezone_object, $datetime_object ) / HOUR_IN_SECONDS, 2 );\n}\n\n/**\n * Sort-helper for timezones.\n *\n * @since 2.9.0\n * @access private\n *\n * @param array $a\n * @param array $b\n * @return int\n */\nfunction _wp_timezone_choice_usort_callback( $a, $b ) {\n\t// Don't use translated versions of Etc\n\tif ( 'Etc' === $a['continent'] && 'Etc' === $b['continent'] ) {\n\t\t// Make the order of these more like the old dropdown\n\t\tif ( 'GMT+' === substr( $a['city'], 0, 4 ) && 'GMT+' === substr( $b['city'], 0, 4 ) ) {\n\t\t\treturn -1 * ( strnatcasecmp( $a['city'], $b['city'] ) );\n\t\t}\n\t\tif ( 'UTC' === $a['city'] ) {\n\t\t\tif ( 'GMT+' === substr( $b['city'], 0, 4 ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t\tif ( 'UTC' === $b['city'] ) {\n\t\t\tif ( 'GMT+' === substr( $a['city'], 0, 4 ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\treturn strnatcasecmp( $a['city'], $b['city'] );\n\t}\n\tif ( $a['t_continent'] == $b['t_continent'] ) {\n\t\tif ( $a['t_city'] == $b['t_city'] ) {\n\t\t\treturn strnatcasecmp( $a['t_subcity'], $b['t_subcity'] );\n\t\t}\n\t\treturn strnatcasecmp( $a['t_city'], $b['t_city'] );\n\t} else {\n\t\t// Force Etc to the bottom of the list\n\t\tif ( 'Etc' === $a['continent'] ) {\n\t\t\treturn 1;\n\t\t}\n\t\tif ( 'Etc' === $b['continent'] ) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn strnatcasecmp( $a['t_continent'], $b['t_continent'] );\n\t}\n}\n\n/**\n * Gives a nicely-formatted list of timezone strings.\n *\n * @since 2.9.0\n * @since 4.7.0 Added the `$locale` parameter.\n *\n * @staticvar bool $mo_loaded\n * @staticvar string $locale_loaded\n *\n * @param string $selected_zone Selected timezone.\n * @param string $locale        Optional. Locale to load the timezones in. Default current site locale.\n * @return string\n */\nfunction wp_timezone_choice( $selected_zone, $locale = null ) {\n\tstatic $mo_loaded = false, $locale_loaded = null;\n\n\t$continents = array( 'Africa', 'America', 'Antarctica', 'Arctic', 'Asia', 'Atlantic', 'Australia', 'Europe', 'Indian', 'Pacific');\n\n\t// Load translations for continents and cities.\n\tif ( ! $mo_loaded || $locale !== $locale_loaded ) {\n\t\t$locale_loaded = $locale ? $locale : get_locale();\n\t\t$mofile = WP_LANG_DIR . '/continents-cities-' . $locale_loaded . '.mo';\n\t\tunload_textdomain( 'continents-cities' );\n\t\tload_textdomain( 'continents-cities', $mofile );\n\t\t$mo_loaded = true;\n\t}\n\n\t$zonen = array();\n\tforeach ( timezone_identifiers_list() as $zone ) {\n\t\t$zone = explode( '/', $zone );\n\t\tif ( !in_array( $zone[0], $continents ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// This determines what gets set and translated - we don't translate Etc/* strings here, they are done later\n\t\t$exists = array(\n\t\t\t0 => ( isset( $zone[0] ) && $zone[0] ),\n\t\t\t1 => ( isset( $zone[1] ) && $zone[1] ),\n\t\t\t2 => ( isset( $zone[2] ) && $zone[2] ),\n\t\t);\n\t\t$exists[3] = ( $exists[0] && 'Etc' !== $zone[0] );\n\t\t$exists[4] = ( $exists[1] && $exists[3] );\n\t\t$exists[5] = ( $exists[2] && $exists[3] );\n\n\t\t$zonen[] = array(\n\t\t\t'continent'   => ( $exists[0] ? $zone[0] : '' ),\n\t\t\t'city'        => ( $exists[1] ? $zone[1] : '' ),\n\t\t\t'subcity'     => ( $exists[2] ? $zone[2] : '' ),\n\t\t\t't_continent' => ( $exists[3] ? translate( str_replace( '_', ' ', $zone[0] ), 'continents-cities' ) : '' ),\n\t\t\t't_city'      => ( $exists[4] ? translate( str_replace( '_', ' ', $zone[1] ), 'continents-cities' ) : '' ),\n\t\t\t't_subcity'   => ( $exists[5] ? translate( str_replace( '_', ' ', $zone[2] ), 'continents-cities' ) : '' )\n\t\t);\n\t}\n\tusort( $zonen, '_wp_timezone_choice_usort_callback' );\n\n\t$structure = array();\n\n\tif ( empty( $selected_zone ) ) {\n\t\t$structure[] = '<option selected=\"selected\" value=\"\">' . __( 'Select a city' ) . '</option>';\n\t}\n\n\tforeach ( $zonen as $key => $zone ) {\n\t\t// Build value in an array to join later\n\t\t$value = array( $zone['continent'] );\n\n\t\tif ( empty( $zone['city'] ) ) {\n\t\t\t// It's at the continent level (generally won't happen)\n\t\t\t$display = $zone['t_continent'];\n\t\t} else {\n\t\t\t// It's inside a continent group\n\n\t\t\t// Continent optgroup\n\t\t\tif ( !isset( $zonen[$key - 1] ) || $zonen[$key - 1]['continent'] !== $zone['continent'] ) {\n\t\t\t\t$label = $zone['t_continent'];\n\t\t\t\t$structure[] = '<optgroup label=\"'. esc_attr( $label ) .'\">';\n\t\t\t}\n\n\t\t\t// Add the city to the value\n\t\t\t$value[] = $zone['city'];\n\n\t\t\t$display = $zone['t_city'];\n\t\t\tif ( !empty( $zone['subcity'] ) ) {\n\t\t\t\t// Add the subcity to the value\n\t\t\t\t$value[] = $zone['subcity'];\n\t\t\t\t$display .= ' - ' . $zone['t_subcity'];\n\t\t\t}\n\t\t}\n\n\t\t// Build the value\n\t\t$value = join( '/', $value );\n\t\t$selected = '';\n\t\tif ( $value === $selected_zone ) {\n\t\t\t$selected = 'selected=\"selected\" ';\n\t\t}\n\t\t$structure[] = '<option ' . $selected . 'value=\"' . esc_attr( $value ) . '\">' . esc_html( $display ) . \"</option>\";\n\n\t\t// Close continent optgroup\n\t\tif ( !empty( $zone['city'] ) && ( !isset($zonen[$key + 1]) || (isset( $zonen[$key + 1] ) && $zonen[$key + 1]['continent'] !== $zone['continent']) ) ) {\n\t\t\t$structure[] = '</optgroup>';\n\t\t}\n\t}\n\n\t// Do UTC\n\t$structure[] = '<optgroup label=\"'. esc_attr__( 'UTC' ) .'\">';\n\t$selected = '';\n\tif ( 'UTC' === $selected_zone )\n\t\t$selected = 'selected=\"selected\" ';\n\t$structure[] = '<option ' . $selected . 'value=\"' . esc_attr( 'UTC' ) . '\">' . __('UTC') . '</option>';\n\t$structure[] = '</optgroup>';\n\n\t// Do manual UTC offsets\n\t$structure[] = '<optgroup label=\"'. esc_attr__( 'Manual Offsets' ) .'\">';\n\t$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,\n\t\t0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);\n\tforeach ( $offset_range as $offset ) {\n\t\tif ( 0 <= $offset )\n\t\t\t$offset_name = '+' . $offset;\n\t\telse\n\t\t\t$offset_name = (string) $offset;\n\n\t\t$offset_value = $offset_name;\n\t\t$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);\n\t\t$offset_name = 'UTC' . $offset_name;\n\t\t$offset_value = 'UTC' . $offset_value;\n\t\t$selected = '';\n\t\tif ( $offset_value === $selected_zone )\n\t\t\t$selected = 'selected=\"selected\" ';\n\t\t$structure[] = '<option ' . $selected . 'value=\"' . esc_attr( $offset_value ) . '\">' . esc_html( $offset_name ) . \"</option>\";\n\n\t}\n\t$structure[] = '</optgroup>';\n\n\treturn join( \"\\n\", $structure );\n}\n\n/**\n * Strip close comment and close php tags from file headers used by WP.\n *\n * @since 2.8.0\n * @access private\n *\n * @see https://core.trac.wordpress.org/ticket/8497\n *\n * @param string $str Header comment to clean up.\n * @return string\n */\nfunction _cleanup_header_comment( $str ) {\n\treturn trim(preg_replace(\"/\\s*(?:\\*\\/|\\?>).*/\", '', $str));\n}\n\n/**\n * Permanently delete comments or posts of any type that have held a status\n * of 'trash' for the number of days defined in EMPTY_TRASH_DAYS.\n *\n * The default value of `EMPTY_TRASH_DAYS` is 30 (days).\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n */\nfunction wp_scheduled_delete() {\n\tglobal $wpdb;\n\n\t$delete_timestamp = time() - ( DAY_IN_SECONDS * EMPTY_TRASH_DAYS );\n\n\t$posts_to_delete = $wpdb->get_results($wpdb->prepare(\"SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_wp_trash_meta_time' AND meta_value < %d\", $delete_timestamp), ARRAY_A);\n\n\tforeach ( (array) $posts_to_delete as $post ) {\n\t\t$post_id = (int) $post['post_id'];\n\t\tif ( !$post_id )\n\t\t\tcontinue;\n\n\t\t$del_post = get_post($post_id);\n\n\t\tif ( !$del_post || 'trash' != $del_post->post_status ) {\n\t\t\tdelete_post_meta($post_id, '_wp_trash_meta_status');\n\t\t\tdelete_post_meta($post_id, '_wp_trash_meta_time');\n\t\t} else {\n\t\t\twp_delete_post($post_id);\n\t\t}\n\t}\n\n\t$comments_to_delete = $wpdb->get_results($wpdb->prepare(\"SELECT comment_id FROM $wpdb->commentmeta WHERE meta_key = '_wp_trash_meta_time' AND meta_value < %d\", $delete_timestamp), ARRAY_A);\n\n\tforeach ( (array) $comments_to_delete as $comment ) {\n\t\t$comment_id = (int) $comment['comment_id'];\n\t\tif ( !$comment_id )\n\t\t\tcontinue;\n\n\t\t$del_comment = get_comment($comment_id);\n\n\t\tif ( !$del_comment || 'trash' != $del_comment->comment_approved ) {\n\t\t\tdelete_comment_meta($comment_id, '_wp_trash_meta_time');\n\t\t\tdelete_comment_meta($comment_id, '_wp_trash_meta_status');\n\t\t} else {\n\t\t\twp_delete_comment( $del_comment );\n\t\t}\n\t}\n}\n\n/**\n * Retrieve metadata from a file.\n *\n * Searches for metadata in the first 8kiB of a file, such as a plugin or theme.\n * Each piece of metadata must be on its own line. Fields can not span multiple\n * lines, the value will get cut at the end of the first line.\n *\n * If the file data is not within that first 8kiB, then the author should correct\n * their plugin file and move the data headers to the top.\n *\n * @link https://codex.wordpress.org/File_Header\n *\n * @since 2.9.0\n *\n * @param string $file            Path to the file.\n * @param array  $default_headers List of headers, in the format array('HeaderKey' => 'Header Name').\n * @param string $context         Optional. If specified adds filter hook {@see 'extra_$context_headers'}.\n *                                Default empty.\n * @return array Array of file headers in `HeaderKey => Header Value` format.\n */\nfunction get_file_data( $file, $default_headers, $context = '' ) {\n\t// We don't need to write to the file, so just open for reading.\n\t$fp = fopen( $file, 'r' );\n\n\t// Pull only the first 8kiB of the file in.\n\t$file_data = fread( $fp, 8192 );\n\n\t// PHP will close file handle, but we are good citizens.\n\tfclose( $fp );\n\n\t// Make sure we catch CR-only line endings.\n\t$file_data = str_replace( \"\\r\", \"\\n\", $file_data );\n\n\t/**\n\t * Filters extra file headers by context.\n\t *\n\t * The dynamic portion of the hook name, `$context`, refers to\n\t * the context where extra headers might be loaded.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param array $extra_context_headers Empty array by default.\n\t */\n\tif ( $context && $extra_headers = apply_filters( \"extra_{$context}_headers\", array() ) ) {\n\t\t$extra_headers = array_combine( $extra_headers, $extra_headers ); // keys equal values\n\t\t$all_headers = array_merge( $extra_headers, (array) $default_headers );\n\t} else {\n\t\t$all_headers = $default_headers;\n\t}\n\n\tforeach ( $all_headers as $field => $regex ) {\n\t\tif ( preg_match( '/^[ \\t\\/*#@]*' . preg_quote( $regex, '/' ) . ':(.*)$/mi', $file_data, $match ) && $match[1] )\n\t\t\t$all_headers[ $field ] = _cleanup_header_comment( $match[1] );\n\t\telse\n\t\t\t$all_headers[ $field ] = '';\n\t}\n\n\treturn $all_headers;\n}\n\n/**\n * Returns true.\n *\n * Useful for returning true to filters easily.\n *\n * @since 3.0.0\n *\n * @see __return_false()\n *\n * @return true True.\n */\nfunction __return_true() {\n\treturn true;\n}\n\n/**\n * Returns false.\n *\n * Useful for returning false to filters easily.\n *\n * @since 3.0.0\n *\n * @see __return_true()\n *\n * @return false False.\n */\nfunction __return_false() {\n\treturn false;\n}\n\n/**\n * Returns 0.\n *\n * Useful for returning 0 to filters easily.\n *\n * @since 3.0.0\n *\n * @return int 0.\n */\nfunction __return_zero() {\n\treturn 0;\n}\n\n/**\n * Returns an empty array.\n *\n * Useful for returning an empty array to filters easily.\n *\n * @since 3.0.0\n *\n * @return array Empty array.\n */\nfunction __return_empty_array() {\n\treturn array();\n}\n\n/**\n * Returns null.\n *\n * Useful for returning null to filters easily.\n *\n * @since 3.4.0\n *\n * @return null Null value.\n */\nfunction __return_null() {\n\treturn null;\n}\n\n/**\n * Returns an empty string.\n *\n * Useful for returning an empty string to filters easily.\n *\n * @since 3.7.0\n *\n * @see __return_null()\n *\n * @return string Empty string.\n */\nfunction __return_empty_string() {\n\treturn '';\n}\n\n/**\n * Send a HTTP header to disable content type sniffing in browsers which support it.\n *\n * @since 3.0.0\n *\n * @see https://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx\n * @see https://src.chromium.org/viewvc/chrome?view=rev&revision=6985\n */\nfunction send_nosniff_header() {\n\t@header( 'X-Content-Type-Options: nosniff' );\n}\n\n/**\n * Return a MySQL expression for selecting the week number based on the start_of_week option.\n *\n * @ignore\n * @since 3.0.0\n *\n * @param string $column Database column.\n * @return string SQL clause.\n */\nfunction _wp_mysql_week( $column ) {\n\tswitch ( $start_of_week = (int) get_option( 'start_of_week' ) ) {\n\tcase 1 :\n\t\treturn \"WEEK( $column, 1 )\";\n\tcase 2 :\n\tcase 3 :\n\tcase 4 :\n\tcase 5 :\n\tcase 6 :\n\t\treturn \"WEEK( DATE_SUB( $column, INTERVAL $start_of_week DAY ), 0 )\";\n\tcase 0 :\n\tdefault :\n\t\treturn \"WEEK( $column, 0 )\";\n\t}\n}\n\n/**\n * Find hierarchy loops using a callback function that maps object IDs to parent IDs.\n *\n * @since 3.1.0\n * @access private\n *\n * @param callable $callback      Function that accepts ( ID, $callback_args ) and outputs parent_ID.\n * @param int      $start         The ID to start the loop check at.\n * @param int      $start_parent  The parent_ID of $start to use instead of calling $callback( $start ).\n *                                Use null to always use $callback\n * @param array    $callback_args Optional. Additional arguments to send to $callback.\n * @return array IDs of all members of loop.\n */\nfunction wp_find_hierarchy_loop( $callback, $start, $start_parent, $callback_args = array() ) {\n\t$override = is_null( $start_parent ) ? array() : array( $start => $start_parent );\n\n\tif ( !$arbitrary_loop_member = wp_find_hierarchy_loop_tortoise_hare( $callback, $start, $override, $callback_args ) )\n\t\treturn array();\n\n\treturn wp_find_hierarchy_loop_tortoise_hare( $callback, $arbitrary_loop_member, $override, $callback_args, true );\n}\n\n/**\n * Use the \"The Tortoise and the Hare\" algorithm to detect loops.\n *\n * For every step of the algorithm, the hare takes two steps and the tortoise one.\n * If the hare ever laps the tortoise, there must be a loop.\n *\n * @since 3.1.0\n * @access private\n *\n * @param callable $callback      Function that accepts ( ID, callback_arg, ... ) and outputs parent_ID.\n * @param int      $start         The ID to start the loop check at.\n * @param array    $override      Optional. An array of ( ID => parent_ID, ... ) to use instead of $callback.\n *                                Default empty array.\n * @param array    $callback_args Optional. Additional arguments to send to $callback. Default empty array.\n * @param bool     $_return_loop  Optional. Return loop members or just detect presence of loop? Only set\n *                                to true if you already know the given $start is part of a loop (otherwise\n *                                the returned array might include branches). Default false.\n * @return mixed Scalar ID of some arbitrary member of the loop, or array of IDs of all members of loop if\n *               $_return_loop\n */\nfunction wp_find_hierarchy_loop_tortoise_hare( $callback, $start, $override = array(), $callback_args = array(), $_return_loop = false ) {\n\t$tortoise = $hare = $evanescent_hare = $start;\n\t$return = array();\n\n\t// Set evanescent_hare to one past hare\n\t// Increment hare two steps\n\twhile (\n\t\t$tortoise\n\t&&\n\t\t( $evanescent_hare = isset( $override[$hare] ) ? $override[$hare] : call_user_func_array( $callback, array_merge( array( $hare ), $callback_args ) ) )\n\t&&\n\t\t( $hare = isset( $override[$evanescent_hare] ) ? $override[$evanescent_hare] : call_user_func_array( $callback, array_merge( array( $evanescent_hare ), $callback_args ) ) )\n\t) {\n\t\tif ( $_return_loop )\n\t\t\t$return[$tortoise] = $return[$evanescent_hare] = $return[$hare] = true;\n\n\t\t// tortoise got lapped - must be a loop\n\t\tif ( $tortoise == $evanescent_hare || $tortoise == $hare )\n\t\t\treturn $_return_loop ? $return : $tortoise;\n\n\t\t// Increment tortoise by one step\n\t\t$tortoise = isset( $override[$tortoise] ) ? $override[$tortoise] : call_user_func_array( $callback, array_merge( array( $tortoise ), $callback_args ) );\n\t}\n\n\treturn false;\n}\n\n/**\n * Send a HTTP header to limit rendering of pages to same origin iframes.\n *\n * @since 3.1.3\n *\n * @see https://developer.mozilla.org/en/the_x-frame-options_response_header\n */\nfunction send_frame_options_header() {\n\t@header( 'X-Frame-Options: SAMEORIGIN' );\n}\n\n/**\n * Retrieve a list of protocols to allow in HTML attributes.\n *\n * @since 3.3.0\n * @since 4.3.0 Added 'webcal' to the protocols array.\n * @since 4.7.0 Added 'urn' to the protocols array.\n *\n * @see wp_kses()\n * @see esc_url()\n *\n * @staticvar array $protocols\n *\n * @return array Array of allowed protocols. Defaults to an array containing 'http', 'https',\n *               'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet',\n *               'mms', 'rtsp', 'svn', 'tel', 'fax', 'xmpp', 'webcal', and 'urn'.\n */\nfunction wp_allowed_protocols() {\n\tstatic $protocols = array();\n\n\tif ( empty( $protocols ) ) {\n\t\t$protocols = array( 'http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn', 'tel', 'fax', 'xmpp', 'webcal', 'urn' );\n\t}\n\n\tif ( ! did_action( 'wp_loaded' ) ) {\n\t\t/**\n\t\t * Filters the list of protocols allowed in HTML attributes.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param array $protocols Array of allowed protocols e.g. 'http', 'ftp', 'tel', and more.\n\t\t */\n\t\t$protocols = array_unique( (array) apply_filters( 'kses_allowed_protocols', $protocols ) );\n\t}\n\n\treturn $protocols;\n}\n\n/**\n * Return a comma-separated string of functions that have been called to get\n * to the current point in code.\n *\n * @since 3.4.0\n *\n * @see https://core.trac.wordpress.org/ticket/19589\n *\n * @param string $ignore_class Optional. A class to ignore all function calls within - useful\n *                             when you want to just give info about the callee. Default null.\n * @param int    $skip_frames  Optional. A number of stack frames to skip - useful for unwinding\n *                             back to the source of the issue. Default 0.\n * @param bool   $pretty       Optional. Whether or not you want a comma separated string or raw\n *                             array returned. Default true.\n * @return string|array Either a string containing a reversed comma separated trace or an array\n *                      of individual calls.\n */\nfunction wp_debug_backtrace_summary( $ignore_class = null, $skip_frames = 0, $pretty = true ) {\n\tif ( version_compare( PHP_VERSION, '5.2.5', '>=' ) )\n\t\t$trace = debug_backtrace( false );\n\telse\n\t\t$trace = debug_backtrace();\n\n\t$caller = array();\n\t$check_class = ! is_null( $ignore_class );\n\t$skip_frames++; // skip this function\n\n\tforeach ( $trace as $call ) {\n\t\tif ( $skip_frames > 0 ) {\n\t\t\t$skip_frames--;\n\t\t} elseif ( isset( $call['class'] ) ) {\n\t\t\tif ( $check_class && $ignore_class == $call['class'] )\n\t\t\t\tcontinue; // Filter out calls\n\n\t\t\t$caller[] = \"{$call['class']}{$call['type']}{$call['function']}\";\n\t\t} else {\n\t\t\tif ( in_array( $call['function'], array( 'do_action', 'apply_filters' ) ) ) {\n\t\t\t\t$caller[] = \"{$call['function']}('{$call['args'][0]}')\";\n\t\t\t} elseif ( in_array( $call['function'], array( 'include', 'include_once', 'require', 'require_once' ) ) ) {\n\t\t\t\t$caller[] = $call['function'] . \"('\" . str_replace( array( WP_CONTENT_DIR, ABSPATH ) , '', $call['args'][0] ) . \"')\";\n\t\t\t} else {\n\t\t\t\t$caller[] = $call['function'];\n\t\t\t}\n\t\t}\n\t}\n\tif ( $pretty )\n\t\treturn join( ', ', array_reverse( $caller ) );\n\telse\n\t\treturn $caller;\n}\n\n/**\n * Retrieve ids that are not already present in the cache.\n *\n * @since 3.4.0\n * @access private\n *\n * @param array  $object_ids ID list.\n * @param string $cache_key  The cache bucket to check against.\n *\n * @return array List of ids not present in the cache.\n */\nfunction _get_non_cached_ids( $object_ids, $cache_key ) {\n\t$clean = array();\n\tforeach ( $object_ids as $id ) {\n\t\t$id = (int) $id;\n\t\tif ( !wp_cache_get( $id, $cache_key ) ) {\n\t\t\t$clean[] = $id;\n\t\t}\n\t}\n\n\treturn $clean;\n}\n\n/**\n * Test if the current device has the capability to upload files.\n *\n * @since 3.4.0\n * @access private\n *\n * @return bool Whether the device is able to upload files.\n */\nfunction _device_can_upload() {\n\tif ( ! wp_is_mobile() )\n\t\treturn true;\n\n\t$ua = $_SERVER['HTTP_USER_AGENT'];\n\n\tif ( strpos($ua, 'iPhone') !== false\n\t\t|| strpos($ua, 'iPad') !== false\n\t\t|| strpos($ua, 'iPod') !== false ) {\n\t\t\treturn preg_match( '#OS ([\\d_]+) like Mac OS X#', $ua, $version ) && version_compare( $version[1], '6', '>=' );\n\t}\n\n\treturn true;\n}\n\n/**\n * Test if a given path is a stream URL\n *\n * @since 3.5.0\n *\n * @param string $path The resource path or URL.\n * @return bool True if the path is a stream URL.\n */\nfunction wp_is_stream( $path ) {\n\tif ( false === strpos( $path, '://' ) ) {\n\t\t// $path isn't a stream\n\t\treturn false;\n\t}\n\n\t$wrappers    = stream_get_wrappers();\n\t$wrappers    = array_map( 'preg_quote', $wrappers );\n\t$wrappers_re = '(' . join( '|', $wrappers ) . ')';\n\n\treturn preg_match( \"!^$wrappers_re://!\", $path ) === 1;\n}\n\n/**\n * Test if the supplied date is valid for the Gregorian calendar.\n *\n * @since 3.5.0\n *\n * @link https://secure.php.net/manual/en/function.checkdate.php\n *\n * @param  int    $month       Month number.\n * @param  int    $day         Day number.\n * @param  int    $year        Year number.\n * @param  string $source_date The date to filter.\n * @return bool True if valid date, false if not valid date.\n */\nfunction wp_checkdate( $month, $day, $year, $source_date ) {\n\t/**\n\t * Filters whether the given date is valid for the Gregorian calendar.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param bool   $checkdate   Whether the given date is valid.\n\t * @param string $source_date Date to check.\n\t */\n\treturn apply_filters( 'wp_checkdate', checkdate( $month, $day, $year ), $source_date );\n}\n\n/**\n * Load the auth check for monitoring whether the user is still logged in.\n *\n * Can be disabled with remove_action( 'admin_enqueue_scripts', 'wp_auth_check_load' );\n *\n * This is disabled for certain screens where a login screen could cause an\n * inconvenient interruption. A filter called {@see 'wp_auth_check_load'} can be used\n * for fine-grained control.\n *\n * @since 3.6.0\n */\nfunction wp_auth_check_load() {\n\tif ( ! is_admin() && ! is_user_logged_in() )\n\t\treturn;\n\n\tif ( defined( 'IFRAME_REQUEST' ) )\n\t\treturn;\n\n\t$screen = get_current_screen();\n\t$hidden = array( 'update', 'update-network', 'update-core', 'update-core-network', 'upgrade', 'upgrade-network', 'network' );\n\t$show = ! in_array( $screen->id, $hidden );\n\n\t/**\n\t * Filters whether to load the authentication check.\n\t *\n\t * Passing a falsey value to the filter will effectively short-circuit\n\t * loading the authentication check.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param bool      $show   Whether to load the authentication check.\n\t * @param WP_Screen $screen The current screen object.\n\t */\n\tif ( apply_filters( 'wp_auth_check_load', $show, $screen ) ) {\n\t\twp_enqueue_style( 'wp-auth-check' );\n\t\twp_enqueue_script( 'wp-auth-check' );\n\n\t\tadd_action( 'admin_print_footer_scripts', 'wp_auth_check_html', 5 );\n\t\tadd_action( 'wp_print_footer_scripts', 'wp_auth_check_html', 5 );\n\t}\n}\n\n/**\n * Output the HTML that shows the wp-login dialog when the user is no longer logged in.\n *\n * @since 3.6.0\n */\nfunction wp_auth_check_html() {\n\t$login_url = wp_login_url();\n\t$current_domain = ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'];\n\t$same_domain = ( strpos( $login_url, $current_domain ) === 0 );\n\n\t/**\n\t * Filters whether the authentication check originated at the same domain.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param bool $same_domain Whether the authentication check originated at the same domain.\n\t */\n\t$same_domain = apply_filters( 'wp_auth_check_same_domain', $same_domain );\n\t$wrap_class = $same_domain ? 'hidden' : 'hidden fallback';\n\n\t?>\n\t<div id=\"wp-auth-check-wrap\" class=\"<?php echo $wrap_class; ?>\">\n\t<div id=\"wp-auth-check-bg\"></div>\n\t<div id=\"wp-auth-check\">\n\t<button type=\"button\" class=\"wp-auth-check-close button-link\"><span class=\"screen-reader-text\"><?php _e( 'Close dialog' ); ?></span></button>\n\t<?php\n\n\tif ( $same_domain ) {\n\t\t$login_src = add_query_arg( array(\n\t\t\t'interim-login' => '1',\n\t\t\t'wp_lang'       => get_user_locale(),\n\t\t), $login_url );\n\t\t?>\n\t\t<div id=\"wp-auth-check-form\" class=\"loading\" data-src=\"<?php echo esc_url( $login_src ); ?>\"></div>\n\t\t<?php\n\t}\n\n\t?>\n\t<div class=\"wp-auth-fallback\">\n\t\t<p><b class=\"wp-auth-fallback-expired\" tabindex=\"0\"><?php _e('Session expired'); ?></b></p>\n\t\t<p><a href=\"<?php echo esc_url( $login_url ); ?>\" target=\"_blank\"><?php _e('Please log in again.'); ?></a>\n\t\t<?php _e('The login page will open in a new window. After logging in you can close it and return to this page.'); ?></p>\n\t</div>\n\t</div>\n\t</div>\n\t<?php\n}\n\n/**\n * Check whether a user is still logged in, for the heartbeat.\n *\n * Send a result that shows a log-in box if the user is no longer logged in,\n * or if their cookie is within the grace period.\n *\n * @since 3.6.0\n *\n * @global int $login_grace_period\n *\n * @param array $response  The Heartbeat response.\n * @return array $response The Heartbeat response with 'wp-auth-check' value set.\n */\nfunction wp_auth_check( $response ) {\n\t$response['wp-auth-check'] = is_user_logged_in() && empty( $GLOBALS['login_grace_period'] );\n\treturn $response;\n}\n\n/**\n * Return RegEx body to liberally match an opening HTML tag.\n *\n * Matches an opening HTML tag that:\n * 1. Is self-closing or\n * 2. Has no body but has a closing tag of the same name or\n * 3. Contains a body and a closing tag of the same name\n *\n * Note: this RegEx does not balance inner tags and does not attempt\n * to produce valid HTML\n *\n * @since 3.6.0\n *\n * @param string $tag An HTML tag name. Example: 'video'.\n * @return string Tag RegEx.\n */\nfunction get_tag_regex( $tag ) {\n\tif ( empty( $tag ) )\n\t\treturn;\n\treturn sprintf( '<%1$s[^<]*(?:>[\\s\\S]*<\\/%1$s>|\\s*\\/>)', tag_escape( $tag ) );\n}\n\n/**\n * Retrieve a canonical form of the provided charset appropriate for passing to PHP\n * functions such as htmlspecialchars() and charset html attributes.\n *\n * @since 3.6.0\n * @access private\n *\n * @see https://core.trac.wordpress.org/ticket/23688\n *\n * @param string $charset A charset name.\n * @return string The canonical form of the charset.\n */\nfunction _canonical_charset( $charset ) {\n\tif ( 'utf-8' === strtolower( $charset ) || 'utf8' === strtolower( $charset) ) {\n\n\t\treturn 'UTF-8';\n\t}\n\n\tif ( 'iso-8859-1' === strtolower( $charset ) || 'iso8859-1' === strtolower( $charset ) ) {\n\n\t\treturn 'ISO-8859-1';\n\t}\n\n\treturn $charset;\n}\n\n/**\n * Set the mbstring internal encoding to a binary safe encoding when func_overload\n * is enabled.\n *\n * When mbstring.func_overload is in use for multi-byte encodings, the results from\n * strlen() and similar functions respect the utf8 characters, causing binary data\n * to return incorrect lengths.\n *\n * This function overrides the mbstring encoding to a binary-safe encoding, and\n * resets it to the users expected encoding afterwards through the\n * `reset_mbstring_encoding` function.\n *\n * It is safe to recursively call this function, however each\n * `mbstring_binary_safe_encoding()` call must be followed up with an equal number\n * of `reset_mbstring_encoding()` calls.\n *\n * @since 3.7.0\n *\n * @see reset_mbstring_encoding()\n *\n * @staticvar array $encodings\n * @staticvar bool  $overloaded\n *\n * @param bool $reset Optional. Whether to reset the encoding back to a previously-set encoding.\n *                    Default false.\n */\nfunction mbstring_binary_safe_encoding( $reset = false ) {\n\tstatic $encodings = array();\n\tstatic $overloaded = null;\n\n\tif ( is_null( $overloaded ) )\n\t\t$overloaded = function_exists( 'mb_internal_encoding' ) && ( ini_get( 'mbstring.func_overload' ) & 2 );\n\n\tif ( false === $overloaded )\n\t\treturn;\n\n\tif ( ! $reset ) {\n\t\t$encoding = mb_internal_encoding();\n\t\tarray_push( $encodings, $encoding );\n\t\tmb_internal_encoding( 'ISO-8859-1' );\n\t}\n\n\tif ( $reset && $encodings ) {\n\t\t$encoding = array_pop( $encodings );\n\t\tmb_internal_encoding( $encoding );\n\t}\n}\n\n/**\n * Reset the mbstring internal encoding to a users previously set encoding.\n *\n * @see mbstring_binary_safe_encoding()\n *\n * @since 3.7.0\n */\nfunction reset_mbstring_encoding() {\n\tmbstring_binary_safe_encoding( true );\n}\n\n/**\n * Filter/validate a variable as a boolean.\n *\n * Alternative to `filter_var( $var, FILTER_VALIDATE_BOOLEAN )`.\n *\n * @since 4.0.0\n *\n * @param mixed $var Boolean value to validate.\n * @return bool Whether the value is validated.\n */\nfunction wp_validate_boolean( $var ) {\n\tif ( is_bool( $var ) ) {\n\t\treturn $var;\n\t}\n\n\tif ( is_string( $var ) && 'false' === strtolower( $var ) ) {\n\t\treturn false;\n\t}\n\n\treturn (bool) $var;\n}\n\n/**\n * Delete a file\n *\n * @since 4.2.0\n *\n * @param string $file The path to the file to delete.\n */\nfunction wp_delete_file( $file ) {\n\t/**\n\t * Filters the path of the file to delete.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $file Path to the file to delete.\n\t */\n\t$delete = apply_filters( 'wp_delete_file', $file );\n\tif ( ! empty( $delete ) ) {\n\t\t@unlink( $delete );\n\t}\n}\n\n/**\n * Deletes a file if its path is within the given directory.\n *\n * @since 4.9.7\n *\n * @param string $file      Absolute path to the file to delete.\n * @param string $directory Absolute path to a directory.\n * @return bool True on success, false on failure.\n */\nfunction wp_delete_file_from_directory( $file, $directory ) {\n\t$real_file = realpath( wp_normalize_path( $file ) );\n\t$real_directory = realpath( wp_normalize_path( $directory ) );\n\n\tif ( false === $real_file || false === $real_directory || strpos( wp_normalize_path( $real_file ), trailingslashit( wp_normalize_path( $real_directory ) ) ) !== 0 ) {\n\t\treturn false;\n\t}\n\n\twp_delete_file( $file );\n\n\treturn true;\n}\n\n/**\n * Outputs a small JS snippet on preview tabs/windows to remove `window.name` on unload.\n *\n * This prevents reusing the same tab for a preview when the user has navigated away.\n *\n * @since 4.3.0\n *\n * @global WP_Post $post\n */\nfunction wp_post_preview_js() {\n\tglobal $post;\n\n\tif ( ! is_preview() || empty( $post ) ) {\n\t\treturn;\n\t}\n\n\t// Has to match the window name used in post_submit_meta_box()\n\t$name = 'wp-preview-' . (int) $post->ID;\n\n\t?>\n\t<script>\n\t( function() {\n\t\tvar query = document.location.search;\n\n\t\tif ( query && query.indexOf( 'preview=true' ) !== -1 ) {\n\t\t\twindow.name = '<?php echo $name; ?>';\n\t\t}\n\n\t\tif ( window.addEventListener ) {\n\t\t\twindow.addEventListener( 'unload', function() { window.name = ''; }, false );\n\t\t}\n\t}());\n\t</script>\n\t<?php\n}\n\n/**\n * Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601/RFC3339.\n *\n * Explicitly strips timezones, as datetimes are not saved with any timezone\n * information. Including any information on the offset could be misleading.\n *\n * @since 4.4.0\n *\n * @param string $date_string Date string to parse and format.\n * @return string Date formatted for ISO8601/RFC3339.\n */\nfunction mysql_to_rfc3339( $date_string ) {\n\t$formatted = mysql2date( 'c', $date_string, false );\n\n\t// Strip timezone information\n\treturn preg_replace( '/(?:Z|[+-]\\d{2}(?::\\d{2})?)$/', '', $formatted );\n}\n\n/**\n * Attempts to raise the PHP memory limit for memory intensive processes.\n *\n * Only allows raising the existing limit and prevents lowering it.\n *\n * @since 4.6.0\n *\n * @param string $context Optional. Context in which the function is called. Accepts either 'admin',\n *                        'image', or an arbitrary other context. If an arbitrary context is passed,\n *                        the similarly arbitrary {@see '{$context}_memory_limit'} filter will be\n *                        invoked. Default 'admin'.\n * @return bool|int|string The limit that was set or false on failure.\n */\nfunction wp_raise_memory_limit( $context = 'admin' ) {\n\t// Exit early if the limit cannot be changed.\n\tif ( false === wp_is_ini_value_changeable( 'memory_limit' ) ) {\n\t\treturn false;\n\t}\n\n\t$current_limit     = @ini_get( 'memory_limit' );\n\t$current_limit_int = wp_convert_hr_to_bytes( $current_limit );\n\n\tif ( -1 === $current_limit_int ) {\n\t\treturn false;\n\t}\n\n\t$wp_max_limit     = WP_MAX_MEMORY_LIMIT;\n\t$wp_max_limit_int = wp_convert_hr_to_bytes( $wp_max_limit );\n\t$filtered_limit   = $wp_max_limit;\n\n\tswitch ( $context ) {\n\t\tcase 'admin':\n\t\t\t/**\n\t\t\t * Filters the maximum memory limit available for administration screens.\n\t\t\t *\n\t\t\t * This only applies to administrators, who may require more memory for tasks\n\t\t\t * like updates. Memory limits when processing images (uploaded or edited by\n\t\t\t * users of any role) are handled separately.\n\t\t\t *\n\t\t\t * The `WP_MAX_MEMORY_LIMIT` constant specifically defines the maximum memory\n\t\t\t * limit available when in the administration back end. The default is 256M\n\t\t\t * (256 megabytes of memory) or the original `memory_limit` php.ini value if\n\t\t\t * this is higher.\n\t\t\t *\n\t\t\t * @since 3.0.0\n\t\t\t * @since 4.6.0 The default now takes the original `memory_limit` into account.\n\t\t\t *\n\t\t\t * @param int|string $filtered_limit The maximum WordPress memory limit. Accepts an integer\n\t\t\t *                                   (bytes), or a shorthand string notation, such as '256M'.\n\t\t\t */\n\t\t\t$filtered_limit = apply_filters( 'admin_memory_limit', $filtered_limit );\n\t\t\tbreak;\n\n\t\tcase 'image':\n\t\t\t/**\n\t\t\t * Filters the memory limit allocated for image manipulation.\n\t\t\t *\n\t\t\t * @since 3.5.0\n\t\t\t * @since 4.6.0 The default now takes the original `memory_limit` into account.\n\t\t\t *\n\t\t\t * @param int|string $filtered_limit Maximum memory limit to allocate for images.\n\t\t\t *                                   Default `WP_MAX_MEMORY_LIMIT` or the original\n\t\t\t *                                   php.ini `memory_limit`, whichever is higher.\n\t\t\t *                                   Accepts an integer (bytes), or a shorthand string\n\t\t\t *                                   notation, such as '256M'.\n\t\t\t */\n\t\t\t$filtered_limit = apply_filters( 'image_memory_limit', $filtered_limit );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t/**\n\t\t\t * Filters the memory limit allocated for arbitrary contexts.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$context`, refers to an arbitrary\n\t\t\t * context passed on calling the function. This allows for plugins to define\n\t\t\t * their own contexts for raising the memory limit.\n\t\t\t *\n\t\t\t * @since 4.6.0\n\t\t\t *\n\t\t\t * @param int|string $filtered_limit Maximum memory limit to allocate for images.\n\t\t\t *                                   Default '256M' or the original php.ini `memory_limit`,\n\t\t\t *                                   whichever is higher. Accepts an integer (bytes), or a\n\t\t\t *                                   shorthand string notation, such as '256M'.\n\t\t\t */\n\t\t\t$filtered_limit = apply_filters( \"{$context}_memory_limit\", $filtered_limit );\n\t\t\tbreak;\n\t}\n\n\t$filtered_limit_int = wp_convert_hr_to_bytes( $filtered_limit );\n\n\tif ( -1 === $filtered_limit_int || ( $filtered_limit_int > $wp_max_limit_int && $filtered_limit_int > $current_limit_int ) ) {\n\t\tif ( false !== @ini_set( 'memory_limit', $filtered_limit ) ) {\n\t\t\treturn $filtered_limit;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} elseif ( -1 === $wp_max_limit_int || $wp_max_limit_int > $current_limit_int ) {\n\t\tif ( false !== @ini_set( 'memory_limit', $wp_max_limit ) ) {\n\t\t\treturn $wp_max_limit;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Generate a random UUID (version 4).\n *\n * @since 4.7.0\n *\n * @return string UUID.\n */\nfunction wp_generate_uuid4() {\n\treturn sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n\t\tmt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),\n\t\tmt_rand( 0, 0xffff ),\n\t\tmt_rand( 0, 0x0fff ) | 0x4000,\n\t\tmt_rand( 0, 0x3fff ) | 0x8000,\n\t\tmt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )\n\t);\n}\n\n/**\n * Validates that a UUID is valid.\n *\n * @since 4.9.0\n *\n * @param mixed $uuid    UUID to check.\n * @param int   $version Specify which version of UUID to check against. Default is none, to accept any UUID version. Otherwise, only version allowed is `4`.\n * @return bool The string is a valid UUID or false on failure.\n */\nfunction wp_is_uuid( $uuid, $version = null ) {\n\n\tif ( ! is_string( $uuid ) ) {\n\t\treturn false;\n\t}\n\n\tif ( is_numeric( $version ) ) {\n\t\tif ( 4 !== (int) $version ) {\n\t\t\t_doing_it_wrong( __FUNCTION__, __( 'Only UUID V4 is supported at this time.' ), '4.9.0' );\n\t\t\treturn false;\n\t\t}\n\t\t$regex = '/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/';\n\t} else {\n\t\t$regex = '/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/';\n\t}\n\n\treturn (bool) preg_match( $regex, $uuid );\n}\n\n/**\n * Get last changed date for the specified cache group.\n *\n * @since 4.7.0\n *\n * @param string $group Where the cache contents are grouped.\n *\n * @return string $last_changed UNIX timestamp with microseconds representing when the group was last changed.\n */\nfunction wp_cache_get_last_changed( $group ) {\n\t$last_changed = wp_cache_get( 'last_changed', $group );\n\n\tif ( ! $last_changed ) {\n\t\t$last_changed = microtime();\n\t\twp_cache_set( 'last_changed', $last_changed, $group );\n\t}\n\n\treturn $last_changed;\n}\n\n/**\n * Send an email to the old site admin email address when the site admin email address changes.\n *\n * @since 4.9.0\n *\n * @param string $old_email   The old site admin email address.\n * @param string $new_email   The new site admin email address.\n * @param string $option_name The relevant database option name.\n */\nfunction wp_site_admin_email_change_notification( $old_email, $new_email, $option_name ) {\n\t$send = true;\n\n\t// Don't send the notification to the default 'admin_email' value.\n\tif ( 'you@example.com' === $old_email ) {\n\t\t$send = false;\n\t}\n\n\t/**\n\t * Filters whether to send the site admin email change notification email.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param bool   $send      Whether to send the email notification.\n\t * @param string $old_email The old site admin email address.\n\t * @param string $new_email The new site admin email address.\n\t */\n\t$send = apply_filters( 'send_site_admin_email_change_email', $send, $old_email, $new_email );\n\n\tif ( ! $send ) {\n\t\treturn;\n\t}\n\n\t/* translators: Do not translate OLD_EMAIL, NEW_EMAIL, SITENAME, SITEURL: those are placeholders. */\n\t$email_change_text = __( 'Hi,\n\nThis notice confirms that the admin email address was changed on ###SITENAME###.\n\nThe new admin email address is ###NEW_EMAIL###.\n\nThis email has been sent to ###OLD_EMAIL###\n\nRegards,\nAll at ###SITENAME###\n###SITEURL###' );\n\n\t$email_change_email = array(\n\t\t'to'      => $old_email,\n\t\t/* translators: Site admin email change notification email subject. %s: Site title */\n\t\t'subject' => __( '[%s] Notice of Admin Email Change' ),\n\t\t'message' => $email_change_text,\n\t\t'headers' => '',\n\t);\n\t// get site name\n\t$site_name = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\n\t/**\n\t * Filters the contents of the email notification sent when the site admin email address is changed.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param array $email_change_email {\n\t *            Used to build wp_mail().\n\t *\n\t *            @type string $to      The intended recipient.\n\t *            @type string $subject The subject of the email.\n\t *            @type string $message The content of the email.\n\t *                The following strings have a special meaning and will get replaced dynamically:\n\t *                - ###OLD_EMAIL### The old site admin email address.\n\t *                - ###NEW_EMAIL### The new site admin email address.\n\t *                - ###SITENAME###  The name of the site.\n\t *                - ###SITEURL###   The URL to the site.\n\t *            @type string $headers Headers.\n\t *        }\n\t * @param string $old_email The old site admin email address.\n\t * @param string $new_email The new site admin email address.\n\t */\n\t$email_change_email = apply_filters( 'site_admin_email_change_email', $email_change_email, $old_email, $new_email );\n\n\t$email_change_email['message'] = str_replace( '###OLD_EMAIL###', $old_email, $email_change_email['message'] );\n\t$email_change_email['message'] = str_replace( '###NEW_EMAIL###', $new_email, $email_change_email['message'] );\n\t$email_change_email['message'] = str_replace( '###SITENAME###',  $site_name, $email_change_email['message'] );\n\t$email_change_email['message'] = str_replace( '###SITEURL###',   home_url(), $email_change_email['message'] );\n\n\twp_mail( $email_change_email['to'], sprintf(\n\t\t$email_change_email['subject'],\n\t\t$site_name\n\t), $email_change_email['message'], $email_change_email['headers'] );\n}\n\n/**\n * Return an anonymized IPv4 or IPv6 address.\n *\n * @since 4.9.6 Abstracted from `WP_Community_Events::get_unsafe_client_ip()`.\n *\n * @param  string $ip_addr        The IPv4 or IPv6 address to be anonymized.\n * @param  bool   $ipv6_fallback  Optional. Whether to return the original IPv6 address if the needed functions\n *                                to anonymize it are not present. Default false, return `::` (unspecified address).\n * @return string  The anonymized IP address.\n */\nfunction wp_privacy_anonymize_ip( $ip_addr, $ipv6_fallback = false ) {\n\t// Detect what kind of IP address this is.\n\t$ip_prefix = '';\n\t$is_ipv6   = substr_count( $ip_addr, ':' ) > 1;\n\t$is_ipv4   = ( 3 === substr_count( $ip_addr, '.' ) );\n\n\tif ( $is_ipv6 && $is_ipv4 ) {\n\t\t// IPv6 compatibility mode, temporarily strip the IPv6 part, and treat it like IPv4.\n\t\t$ip_prefix = '::ffff:';\n\t\t$ip_addr   = preg_replace( '/^\\[?[0-9a-f:]*:/i', '', $ip_addr );\n\t\t$ip_addr   = str_replace( ']', '', $ip_addr );\n\t\t$is_ipv6   = false;\n\t}\n\n\tif ( $is_ipv6 ) {\n\t\t// IPv6 addresses will always be enclosed in [] if there's a port.\n\t\t$left_bracket  = strpos( $ip_addr, '[' );\n\t\t$right_bracket = strpos( $ip_addr, ']' );\n\t\t$percent       = strpos( $ip_addr, '%' );\n\t\t$netmask       = 'ffff:ffff:ffff:ffff:0000:0000:0000:0000';\n\n\t\t// Strip the port (and [] from IPv6 addresses), if they exist.\n\t\tif ( false !== $left_bracket && false !== $right_bracket ) {\n\t\t\t$ip_addr = substr( $ip_addr, $left_bracket + 1, $right_bracket - $left_bracket - 1 );\n\t\t} elseif ( false !== $left_bracket || false !== $right_bracket ) {\n\t\t\t// The IP has one bracket, but not both, so it's malformed.\n\t\t\treturn '::';\n\t\t}\n\n\t\t// Strip the reachability scope.\n\t\tif ( false !== $percent ) {\n\t\t\t$ip_addr = substr( $ip_addr, 0, $percent );\n\t\t}\n\n\t\t// No invalid characters should be left.\n\t\tif ( preg_match( '/[^0-9a-f:]/i', $ip_addr ) ) {\n\t\t\treturn '::';\n\t\t}\n\n\t\t// Partially anonymize the IP by reducing it to the corresponding network ID.\n\t\tif ( function_exists( 'inet_pton' ) && function_exists( 'inet_ntop' ) ) {\n\t\t\t$ip_addr = inet_ntop( inet_pton( $ip_addr ) & inet_pton( $netmask ) );\n\t\t\tif ( false === $ip_addr) {\n\t\t\t\treturn '::';\n\t\t\t}\n\t\t} elseif ( ! $ipv6_fallback ) {\n\t\t\treturn '::';\n\t\t}\n\t} elseif ( $is_ipv4 ) {\n\t\t// Strip any port and partially anonymize the IP.\n\t\t$last_octet_position = strrpos( $ip_addr, '.' );\n\t\t$ip_addr             = substr( $ip_addr, 0, $last_octet_position ) . '.0';\n\t} else {\n\t\treturn '0.0.0.0';\n\t}\n\n\t// Restore the IPv6 prefix to compatibility mode addresses.\n\treturn $ip_prefix . $ip_addr;\n}\n\n/**\n * Return uniform \"anonymous\" data by type.\n *\n * @since 4.9.6\n *\n * @param  string $type The type of data to be anonymized.\n * @param  string $data Optional The data to be anonymized.\n * @return string The anonymous data for the requested type.\n */\nfunction wp_privacy_anonymize_data( $type, $data = '' ) {\n\n\tswitch ( $type ) {\n\t\tcase 'email':\n\t\t\t$anonymous = 'deleted@site.invalid';\n\t\t\tbreak;\n\t\tcase 'url':\n\t\t\t$anonymous = 'https://site.invalid';\n\t\t\tbreak;\n\t\tcase 'ip':\n\t\t\t$anonymous = wp_privacy_anonymize_ip( $data );\n\t\t\tbreak;\n\t\tcase 'date':\n\t\t\t$anonymous = '0000-00-00 00:00:00';\n\t\t\tbreak;\n\t\tcase 'text':\n\t\t\t/* translators: deleted text */\n\t\t\t$anonymous = __( '[deleted]' );\n\t\t\tbreak;\n\t\tcase 'longtext':\n\t\t\t/* translators: deleted long text */\n\t\t\t$anonymous = __( 'This content was deleted by the author.' );\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$anonymous = '';\n\t}\n\n\t/**\n\t * Filters the anonymous data for each type.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param string $anonymous Anonymized data.\n\t * @param string $type      Type of the data.\n\t * @param string $data      Original data.\n\t */\n\treturn apply_filters( 'wp_privacy_anonymize_data', $anonymous, $type, $data );\n}\n\n/**\n * Returns the directory used to store personal data export files.\n *\n * @since 4.9.6\n *\n * @see wp_privacy_exports_url\n *\n * @return string Exports directory.\n */\nfunction wp_privacy_exports_dir() {\n\t$upload_dir  = wp_upload_dir();\n\t$exports_dir = trailingslashit( $upload_dir['basedir'] ) . 'wp-personal-data-exports/';\n\n\t/**\n\t * Filters the directory used to store personal data export files.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param string $exports_dir Exports directory.\n\t */\n\treturn apply_filters( 'wp_privacy_exports_dir', $exports_dir );\n}\n\n/**\n * Returns the URL of the directory used to store personal data export files.\n *\n * @since 4.9.6\n *\n * @see wp_privacy_exports_dir\n *\n * @return string Exports directory URL.\n */\nfunction wp_privacy_exports_url() {\n\t$upload_dir  = wp_upload_dir();\n\t$exports_url = trailingslashit( $upload_dir['baseurl'] ) . 'wp-personal-data-exports/';\n\n\t/**\n\t * Filters the URL of the directory used to store personal data export files.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param string $exports_url Exports directory URL.\n\t */\n\treturn apply_filters( 'wp_privacy_exports_url', $exports_url );\n}\n\n/**\n * Schedule a `WP_Cron` job to delete expired export files.\n *\n * @since 4.9.6\n */\nfunction wp_schedule_delete_old_privacy_export_files() {\n\tif ( wp_installing() ) {\n\t\treturn;\n\t}\n\n\tif ( ! wp_next_scheduled( 'wp_privacy_delete_old_export_files' ) ) {\n\t\twp_schedule_event( time(), 'hourly', 'wp_privacy_delete_old_export_files' );\n\t}\n}\n\n/**\n * Cleans up export files older than three days old.\n *\n * The export files are stored in `wp-content/uploads`, and are therefore publicly\n * accessible. A CSPRN is appended to the filename to mitigate the risk of an\n * unauthorized person downloading the file, but it is still possible. Deleting\n * the file after the data subject has had a chance to delete it adds an additional\n * layer of protection.\n *\n * @since 4.9.6\n */\nfunction wp_privacy_delete_old_export_files() {\n\trequire_once( ABSPATH . 'wp-admin/includes/file.php' );\n\n\t$exports_dir  = wp_privacy_exports_dir();\n\t$export_files = list_files( $exports_dir, 100, array( 'index.html' ) );\n\n\t/**\n\t * Filters the lifetime, in seconds, of a personal data export file.\n\t *\n\t * By default, the lifetime is 3 days. Once the file reaches that age, it will automatically\n\t * be deleted by a cron job.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param int $expiration The expiration age of the export, in seconds.\n\t */\n\t$expiration = apply_filters( 'wp_privacy_export_expiration', 3 * DAY_IN_SECONDS );\n\n\tforeach ( (array) $export_files as $export_file ) {\n\t\t$file_age_in_seconds = time() - filemtime( $export_file );\n\n\t\tif ( $expiration < $file_age_in_seconds ) {\n\t\t\tunlink( $export_file );\n\t\t}\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '5.0.1-alpha-43972';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 43764;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4800-20180716';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "fixing_code": ["<?php\n/**\n * Main WordPress API\n *\n * @package WordPress\n */\n\nrequire( ABSPATH . WPINC . '/option.php' );\n\n/**\n * Convert given date string into a different format.\n *\n * $format should be either a PHP date format string, e.g. 'U' for a Unix\n * timestamp, or 'G' for a Unix timestamp assuming that $date is GMT.\n *\n * If $translate is true then the given date and format string will\n * be passed to date_i18n() for translation.\n *\n * @since 0.71\n *\n * @param string $format    Format of the date to return.\n * @param string $date      Date string to convert.\n * @param bool   $translate Whether the return date should be translated. Default true.\n * @return string|int|bool Formatted date string or Unix timestamp. False if $date is empty.\n */\nfunction mysql2date( $format, $date, $translate = true ) {\n\tif ( empty( $date ) )\n\t\treturn false;\n\n\tif ( 'G' == $format )\n\t\treturn strtotime( $date . ' +0000' );\n\n\t$i = strtotime( $date );\n\n\tif ( 'U' == $format )\n\t\treturn $i;\n\n\tif ( $translate )\n\t\treturn date_i18n( $format, $i );\n\telse\n\t\treturn date( $format, $i );\n}\n\n/**\n * Retrieve the current time based on specified type.\n *\n * The 'mysql' type will return the time in the format for MySQL DATETIME field.\n * The 'timestamp' type will return the current timestamp.\n * Other strings will be interpreted as PHP date formats (e.g. 'Y-m-d').\n *\n * If $gmt is set to either '1' or 'true', then both types will use GMT time.\n * if $gmt is false, the output is adjusted with the GMT offset in the WordPress option.\n *\n * @since 1.0.0\n *\n * @param string   $type Type of time to retrieve. Accepts 'mysql', 'timestamp', or PHP date\n *                       format string (e.g. 'Y-m-d').\n * @param int|bool $gmt  Optional. Whether to use GMT timezone. Default false.\n * @return int|string Integer if $type is 'timestamp', string otherwise.\n */\nfunction current_time( $type, $gmt = 0 ) {\n\tswitch ( $type ) {\n\t\tcase 'mysql':\n\t\t\treturn ( $gmt ) ? gmdate( 'Y-m-d H:i:s' ) : gmdate( 'Y-m-d H:i:s', ( time() + ( get_option( 'gmt_offset' ) * HOUR_IN_SECONDS ) ) );\n\t\tcase 'timestamp':\n\t\t\treturn ( $gmt ) ? time() : time() + ( get_option( 'gmt_offset' ) * HOUR_IN_SECONDS );\n\t\tdefault:\n\t\t\treturn ( $gmt ) ? date( $type ) : date( $type, time() + ( get_option( 'gmt_offset' ) * HOUR_IN_SECONDS ) );\n\t}\n}\n\n/**\n * Retrieve the date in localized format, based on timestamp.\n *\n * If the locale specifies the locale month and weekday, then the locale will\n * take over the format for the date. If it isn't, then the date format string\n * will be used instead.\n *\n * @since 0.71\n *\n * @global WP_Locale $wp_locale\n *\n * @param string   $dateformatstring Format to display the date.\n * @param bool|int $unixtimestamp    Optional. Unix timestamp. Default false.\n * @param bool     $gmt              Optional. Whether to use GMT timezone. Default false.\n *\n * @return string The date, translated if locale specifies it.\n */\nfunction date_i18n( $dateformatstring, $unixtimestamp = false, $gmt = false ) {\n\tglobal $wp_locale;\n\t$i = $unixtimestamp;\n\n\tif ( false === $i ) {\n\t\t$i = current_time( 'timestamp', $gmt );\n\t}\n\n\t/*\n\t * Store original value for language with untypical grammars.\n\t * See https://core.trac.wordpress.org/ticket/9396\n\t */\n\t$req_format = $dateformatstring;\n\n\tif ( ( !empty( $wp_locale->month ) ) && ( !empty( $wp_locale->weekday ) ) ) {\n\t\t$datemonth = $wp_locale->get_month( date( 'm', $i ) );\n\t\t$datemonth_abbrev = $wp_locale->get_month_abbrev( $datemonth );\n\t\t$dateweekday = $wp_locale->get_weekday( date( 'w', $i ) );\n\t\t$dateweekday_abbrev = $wp_locale->get_weekday_abbrev( $dateweekday );\n\t\t$datemeridiem = $wp_locale->get_meridiem( date( 'a', $i ) );\n\t\t$datemeridiem_capital = $wp_locale->get_meridiem( date( 'A', $i ) );\n\t\t$dateformatstring = ' '.$dateformatstring;\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])D/\", \"\\\\1\" . backslashit( $dateweekday_abbrev ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])F/\", \"\\\\1\" . backslashit( $datemonth ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])l/\", \"\\\\1\" . backslashit( $dateweekday ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])M/\", \"\\\\1\" . backslashit( $datemonth_abbrev ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])a/\", \"\\\\1\" . backslashit( $datemeridiem ), $dateformatstring );\n\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])A/\", \"\\\\1\" . backslashit( $datemeridiem_capital ), $dateformatstring );\n\n\t\t$dateformatstring = substr( $dateformatstring, 1, strlen( $dateformatstring ) -1 );\n\t}\n\t$timezone_formats = array( 'P', 'I', 'O', 'T', 'Z', 'e' );\n\t$timezone_formats_re = implode( '|', $timezone_formats );\n\tif ( preg_match( \"/$timezone_formats_re/\", $dateformatstring ) ) {\n\t\t$timezone_string = get_option( 'timezone_string' );\n\t\tif ( $timezone_string ) {\n\t\t\t$timezone_object = timezone_open( $timezone_string );\n\t\t\t$date_object = date_create( null, $timezone_object );\n\t\t\tforeach ( $timezone_formats as $timezone_format ) {\n\t\t\t\tif ( false !== strpos( $dateformatstring, $timezone_format ) ) {\n\t\t\t\t\t$formatted = date_format( $date_object, $timezone_format );\n\t\t\t\t\t$dateformatstring = ' '.$dateformatstring;\n\t\t\t\t\t$dateformatstring = preg_replace( \"/([^\\\\\\])$timezone_format/\", \"\\\\1\" . backslashit( $formatted ), $dateformatstring );\n\t\t\t\t\t$dateformatstring = substr( $dateformatstring, 1, strlen( $dateformatstring ) -1 );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\t$j = @date( $dateformatstring, $i );\n\n\t/**\n\t * Filters the date formatted based on the locale.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param string $j          Formatted date string.\n\t * @param string $req_format Format to display the date.\n\t * @param int    $i          Unix timestamp.\n\t * @param bool   $gmt        Whether to convert to GMT for time. Default false.\n\t */\n\t$j = apply_filters( 'date_i18n', $j, $req_format, $i, $gmt );\n\treturn $j;\n}\n\n/**\n * Determines if the date should be declined.\n *\n * If the locale specifies that month names require a genitive case in certain\n * formats (like 'j F Y'), the month name will be replaced with a correct form.\n *\n * @since 4.4.0\n *\n * @global WP_Locale $wp_locale\n *\n * @param string $date Formatted date string.\n * @return string The date, declined if locale specifies it.\n */\nfunction wp_maybe_decline_date( $date ) {\n\tglobal $wp_locale;\n\n\t// i18n functions are not available in SHORTINIT mode\n\tif ( ! function_exists( '_x' ) ) {\n\t\treturn $date;\n\t}\n\n\t/* translators: If months in your language require a genitive case,\n\t * translate this to 'on'. Do not translate into your own language.\n\t */\n\tif ( 'on' === _x( 'off', 'decline months names: on or off' ) ) {\n\t\t// Match a format like 'j F Y' or 'j. F'\n\t\tif ( @preg_match( '#^\\d{1,2}\\.? [^\\d ]+#u', $date ) ) {\n\t\t\t$months          = $wp_locale->month;\n\t\t\t$months_genitive = $wp_locale->month_genitive;\n\n\t\t\tforeach ( $months as $key => $month ) {\n\t\t\t\t$months[ $key ] = '# ' . $month . '( |$)#u';\n\t\t\t}\n\n\t\t\tforeach ( $months_genitive as $key => $month ) {\n\t\t\t\t$months_genitive[ $key ] = ' ' . $month . '$1';\n\t\t\t}\n\n\t\t\t$date = preg_replace( $months, $months_genitive, $date );\n\t\t}\n\t}\n\n\t// Used for locale-specific rules\n\t$locale = get_locale();\n\n\tif ( 'ca' === $locale ) {\n\t\t// \" de abril| de agost| de octubre...\" -> \" d'abril| d'agost| d'octubre...\"\n\t\t$date = preg_replace( '# de ([ao])#i', \" d'\\\\1\", $date );\n\t}\n\n\treturn $date;\n}\n\n/**\n * Convert float number to format based on the locale.\n *\n * @since 2.3.0\n *\n * @global WP_Locale $wp_locale\n *\n * @param float $number   The number to convert based on locale.\n * @param int   $decimals Optional. Precision of the number of decimal places. Default 0.\n * @return string Converted number in string format.\n */\nfunction number_format_i18n( $number, $decimals = 0 ) {\n\tglobal $wp_locale;\n\n\tif ( isset( $wp_locale ) ) {\n\t\t$formatted = number_format( $number, absint( $decimals ), $wp_locale->number_format['decimal_point'], $wp_locale->number_format['thousands_sep'] );\n\t} else {\n\t\t$formatted = number_format( $number, absint( $decimals ) );\n\t}\n\n\t/**\n\t * Filters the number formatted based on the locale.\n\t *\n\t * @since 2.8.0\n\t * @since 4.9.0 The `$number` and `$decimals` arguments were added.\n\t *\n\t * @param string $formatted Converted number in string format.\n\t * @param float  $number    The number to convert based on locale.\n\t * @param int    $decimals  Precision of the number of decimal places.\n\t */\n\treturn apply_filters( 'number_format_i18n', $formatted, $number, $decimals );\n}\n\n/**\n * Convert number of bytes largest unit bytes will fit into.\n *\n * It is easier to read 1 KB than 1024 bytes and 1 MB than 1048576 bytes. Converts\n * number of bytes to human readable number by taking the number of that unit\n * that the bytes will go into it. Supports TB value.\n *\n * Please note that integers in PHP are limited to 32 bits, unless they are on\n * 64 bit architecture, then they have 64 bit size. If you need to place the\n * larger size then what PHP integer type will hold, then use a string. It will\n * be converted to a double, which should always have 64 bit length.\n *\n * Technically the correct unit names for powers of 1024 are KiB, MiB etc.\n *\n * @since 2.3.0\n *\n * @param int|string $bytes    Number of bytes. Note max integer size for integers.\n * @param int        $decimals Optional. Precision of number of decimal places. Default 0.\n * @return string|false False on failure. Number string on success.\n */\nfunction size_format( $bytes, $decimals = 0 ) {\n\t$quant = array(\n\t\t'TB' => TB_IN_BYTES,\n\t\t'GB' => GB_IN_BYTES,\n\t\t'MB' => MB_IN_BYTES,\n\t\t'KB' => KB_IN_BYTES,\n\t\t'B'  => 1,\n\t);\n\n\tif ( 0 === $bytes ) {\n\t\treturn number_format_i18n( 0, $decimals ) . ' B';\n\t}\n\n\tforeach ( $quant as $unit => $mag ) {\n\t\tif ( doubleval( $bytes ) >= $mag ) {\n\t\t\treturn number_format_i18n( $bytes / $mag, $decimals ) . ' ' . $unit;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Get the week start and end from the datetime or date string from MySQL.\n *\n * @since 0.71\n *\n * @param string     $mysqlstring   Date or datetime field type from MySQL.\n * @param int|string $start_of_week Optional. Start of the week as an integer. Default empty string.\n * @return array Keys are 'start' and 'end'.\n */\nfunction get_weekstartend( $mysqlstring, $start_of_week = '' ) {\n\t// MySQL string year.\n\t$my = substr( $mysqlstring, 0, 4 );\n\n\t// MySQL string month.\n\t$mm = substr( $mysqlstring, 8, 2 );\n\n\t// MySQL string day.\n\t$md = substr( $mysqlstring, 5, 2 );\n\n\t// The timestamp for MySQL string day.\n\t$day = mktime( 0, 0, 0, $md, $mm, $my );\n\n\t// The day of the week from the timestamp.\n\t$weekday = date( 'w', $day );\n\n\tif ( !is_numeric($start_of_week) )\n\t\t$start_of_week = get_option( 'start_of_week' );\n\n\tif ( $weekday < $start_of_week )\n\t\t$weekday += 7;\n\n\t// The most recent week start day on or before $day.\n\t$start = $day - DAY_IN_SECONDS * ( $weekday - $start_of_week );\n\n\t// $start + 1 week - 1 second.\n\t$end = $start + WEEK_IN_SECONDS - 1;\n\treturn compact( 'start', 'end' );\n}\n\n/**\n * Unserialize value only if it was serialized.\n *\n * @since 2.0.0\n *\n * @param string $original Maybe unserialized original, if is needed.\n * @return mixed Unserialized data can be any type.\n */\nfunction maybe_unserialize( $original ) {\n\tif ( is_serialized( $original ) ) // don't attempt to unserialize data that wasn't serialized going in\n\t\treturn @unserialize( $original );\n\treturn $original;\n}\n\n/**\n * Check value to find if it was serialized.\n *\n * If $data is not an string, then returned value will always be false.\n * Serialized data is always a string.\n *\n * @since 2.0.5\n *\n * @param string $data   Value to check to see if was serialized.\n * @param bool   $strict Optional. Whether to be strict about the end of the string. Default true.\n * @return bool False if not serialized and true if it was.\n */\nfunction is_serialized( $data, $strict = true ) {\n\t// if it isn't a string, it isn't serialized.\n\tif ( ! is_string( $data ) ) {\n\t\treturn false;\n\t}\n\t$data = trim( $data );\n \tif ( 'N;' == $data ) {\n\t\treturn true;\n\t}\n\tif ( strlen( $data ) < 4 ) {\n\t\treturn false;\n\t}\n\tif ( ':' !== $data[1] ) {\n\t\treturn false;\n\t}\n\tif ( $strict ) {\n\t\t$lastc = substr( $data, -1 );\n\t\tif ( ';' !== $lastc && '}' !== $lastc ) {\n\t\t\treturn false;\n\t\t}\n\t} else {\n\t\t$semicolon = strpos( $data, ';' );\n\t\t$brace     = strpos( $data, '}' );\n\t\t// Either ; or } must exist.\n\t\tif ( false === $semicolon && false === $brace )\n\t\t\treturn false;\n\t\t// But neither must be in the first X characters.\n\t\tif ( false !== $semicolon && $semicolon < 3 )\n\t\t\treturn false;\n\t\tif ( false !== $brace && $brace < 4 )\n\t\t\treturn false;\n\t}\n\t$token = $data[0];\n\tswitch ( $token ) {\n\t\tcase 's' :\n\t\t\tif ( $strict ) {\n\t\t\t\tif ( '\"' !== substr( $data, -2, 1 ) ) {\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t} elseif ( false === strpos( $data, '\"' ) ) {\n\t\t\t\treturn false;\n\t\t\t}\n\t\t\t// or else fall through\n\t\tcase 'a' :\n\t\tcase 'O' :\n\t\t\treturn (bool) preg_match( \"/^{$token}:[0-9]+:/s\", $data );\n\t\tcase 'b' :\n\t\tcase 'i' :\n\t\tcase 'd' :\n\t\t\t$end = $strict ? '$' : '';\n\t\t\treturn (bool) preg_match( \"/^{$token}:[0-9.E-]+;$end/\", $data );\n\t}\n\treturn false;\n}\n\n/**\n * Check whether serialized data is of string type.\n *\n * @since 2.0.5\n *\n * @param string $data Serialized data.\n * @return bool False if not a serialized string, true if it is.\n */\nfunction is_serialized_string( $data ) {\n\t// if it isn't a string, it isn't a serialized string.\n\tif ( ! is_string( $data ) ) {\n\t\treturn false;\n\t}\n\t$data = trim( $data );\n\tif ( strlen( $data ) < 4 ) {\n\t\treturn false;\n\t} elseif ( ':' !== $data[1] ) {\n\t\treturn false;\n\t} elseif ( ';' !== substr( $data, -1 ) ) {\n\t\treturn false;\n\t} elseif ( $data[0] !== 's' ) {\n\t\treturn false;\n\t} elseif ( '\"' !== substr( $data, -2, 1 ) ) {\n\t\treturn false;\n\t} else {\n\t\treturn true;\n\t}\n}\n\n/**\n * Serialize data, if needed.\n *\n * @since 2.0.5\n *\n * @param string|array|object $data Data that might be serialized.\n * @return mixed A scalar data\n */\nfunction maybe_serialize( $data ) {\n\tif ( is_array( $data ) || is_object( $data ) )\n\t\treturn serialize( $data );\n\n\t// Double serialization is required for backward compatibility.\n\t// See https://core.trac.wordpress.org/ticket/12930\n\t// Also the world will end. See WP 3.6.1.\n\tif ( is_serialized( $data, false ) )\n\t\treturn serialize( $data );\n\n\treturn $data;\n}\n\n/**\n * Retrieve post title from XMLRPC XML.\n *\n * If the title element is not part of the XML, then the default post title from\n * the $post_default_title will be used instead.\n *\n * @since 0.71\n *\n * @global string $post_default_title Default XML-RPC post title.\n *\n * @param string $content XMLRPC XML Request content\n * @return string Post title\n */\nfunction xmlrpc_getposttitle( $content ) {\n\tglobal $post_default_title;\n\tif ( preg_match( '/<title>(.+?)<\\/title>/is', $content, $matchtitle ) ) {\n\t\t$post_title = $matchtitle[1];\n\t} else {\n\t\t$post_title = $post_default_title;\n\t}\n\treturn $post_title;\n}\n\n/**\n * Retrieve the post category or categories from XMLRPC XML.\n *\n * If the category element is not found, then the default post category will be\n * used. The return type then would be what $post_default_category. If the\n * category is found, then it will always be an array.\n *\n * @since 0.71\n *\n * @global string $post_default_category Default XML-RPC post category.\n *\n * @param string $content XMLRPC XML Request content\n * @return string|array List of categories or category name.\n */\nfunction xmlrpc_getpostcategory( $content ) {\n\tglobal $post_default_category;\n\tif ( preg_match( '/<category>(.+?)<\\/category>/is', $content, $matchcat ) ) {\n\t\t$post_category = trim( $matchcat[1], ',' );\n\t\t$post_category = explode( ',', $post_category );\n\t} else {\n\t\t$post_category = $post_default_category;\n\t}\n\treturn $post_category;\n}\n\n/**\n * XMLRPC XML content without title and category elements.\n *\n * @since 0.71\n *\n * @param string $content XML-RPC XML Request content.\n * @return string XMLRPC XML Request content without title and category elements.\n */\nfunction xmlrpc_removepostdata( $content ) {\n\t$content = preg_replace( '/<title>(.+?)<\\/title>/si', '', $content );\n\t$content = preg_replace( '/<category>(.+?)<\\/category>/si', '', $content );\n\t$content = trim( $content );\n\treturn $content;\n}\n\n/**\n * Use RegEx to extract URLs from arbitrary content.\n *\n * @since 3.7.0\n *\n * @param string $content Content to extract URLs from.\n * @return array URLs found in passed string.\n */\nfunction wp_extract_urls( $content ) {\n\tpreg_match_all(\n\t\t\"#([\\\"']?)(\"\n\t\t\t. \"(?:([\\w-]+:)?//?)\"\n\t\t\t. \"[^\\s()<>]+\"\n\t\t\t. \"[.]\"\n\t\t\t. \"(?:\"\n\t\t\t\t. \"\\([\\w\\d]+\\)|\"\n\t\t\t\t. \"(?:\"\n\t\t\t\t\t. \"[^`!()\\[\\]{};:'\\\".,<>\u00ab\u00bb\u201c\u201d\u2018\u2019\\s]|\"\n\t\t\t\t\t. \"(?:[:]\\d+)?/?\"\n\t\t\t\t. \")+\"\n\t\t\t. \")\"\n\t\t. \")\\\\1#\",\n\t\t$content,\n\t\t$post_links\n\t);\n\n\t$post_links = array_unique( array_map( 'html_entity_decode', $post_links[2] ) );\n\n\treturn array_values( $post_links );\n}\n\n/**\n * Check content for video and audio links to add as enclosures.\n *\n * Will not add enclosures that have already been added and will\n * remove enclosures that are no longer in the post. This is called as\n * pingbacks and trackbacks.\n *\n * @since 1.5.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @param string $content Post Content.\n * @param int    $post_ID Post ID.\n */\nfunction do_enclose( $content, $post_ID ) {\n\tglobal $wpdb;\n\n\t//TODO: Tidy this ghetto code up and make the debug code optional\n\tinclude_once( ABSPATH . WPINC . '/class-IXR.php' );\n\n\t$post_links = array();\n\n\t$pung = get_enclosed( $post_ID );\n\n\t$post_links_temp = wp_extract_urls( $content );\n\n\tforeach ( $pung as $link_test ) {\n\t\tif ( ! in_array( $link_test, $post_links_temp ) ) { // link no longer in post\n\t\t\t$mids = $wpdb->get_col( $wpdb->prepare(\"SELECT meta_id FROM $wpdb->postmeta WHERE post_id = %d AND meta_key = 'enclosure' AND meta_value LIKE %s\", $post_ID, $wpdb->esc_like( $link_test ) . '%') );\n\t\t\tforeach ( $mids as $mid )\n\t\t\t\tdelete_metadata_by_mid( 'post', $mid );\n\t\t}\n\t}\n\n\tforeach ( (array) $post_links_temp as $link_test ) {\n\t\tif ( !in_array( $link_test, $pung ) ) { // If we haven't pung it already\n\t\t\t$test = @parse_url( $link_test );\n\t\t\tif ( false === $test )\n\t\t\t\tcontinue;\n\t\t\tif ( isset( $test['query'] ) )\n\t\t\t\t$post_links[] = $link_test;\n\t\t\telseif ( isset($test['path']) && ( $test['path'] != '/' ) &&  ($test['path'] != '' ) )\n\t\t\t\t$post_links[] = $link_test;\n\t\t}\n\t}\n\n\t/**\n\t * Filters the list of enclosure links before querying the database.\n\t *\n\t * Allows for the addition and/or removal of potential enclosures to save\n\t * to postmeta before checking the database for existing enclosures.\n\t *\n\t * @since 4.4.0\n\t *\n\t * @param array $post_links An array of enclosure links.\n\t * @param int   $post_ID    Post ID.\n\t */\n\t$post_links = apply_filters( 'enclosure_links', $post_links, $post_ID );\n\n\tforeach ( (array) $post_links as $url ) {\n\t\tif ( $url != '' && !$wpdb->get_var( $wpdb->prepare( \"SELECT post_id FROM $wpdb->postmeta WHERE post_id = %d AND meta_key = 'enclosure' AND meta_value LIKE %s\", $post_ID, $wpdb->esc_like( $url ) . '%' ) ) ) {\n\n\t\t\tif ( $headers = wp_get_http_headers( $url) ) {\n\t\t\t\t$len = isset( $headers['content-length'] ) ? (int) $headers['content-length'] : 0;\n\t\t\t\t$type = isset( $headers['content-type'] ) ? $headers['content-type'] : '';\n\t\t\t\t$allowed_types = array( 'video', 'audio' );\n\n\t\t\t\t// Check to see if we can figure out the mime type from\n\t\t\t\t// the extension\n\t\t\t\t$url_parts = @parse_url( $url );\n\t\t\t\tif ( false !== $url_parts ) {\n\t\t\t\t\t$extension = pathinfo( $url_parts['path'], PATHINFO_EXTENSION );\n\t\t\t\t\tif ( !empty( $extension ) ) {\n\t\t\t\t\t\tforeach ( wp_get_mime_types() as $exts => $mime ) {\n\t\t\t\t\t\t\tif ( preg_match( '!^(' . $exts . ')$!i', $extension ) ) {\n\t\t\t\t\t\t\t\t$type = $mime;\n\t\t\t\t\t\t\t\tbreak;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\n\t\t\t\tif ( in_array( substr( $type, 0, strpos( $type, \"/\" ) ), $allowed_types ) ) {\n\t\t\t\t\tadd_post_meta( $post_ID, 'enclosure', \"$url\\n$len\\n$mime\\n\" );\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Retrieve HTTP Headers from URL.\n *\n * @since 1.5.1\n *\n * @param string $url        URL to retrieve HTTP headers from.\n * @param bool   $deprecated Not Used.\n * @return bool|string False on failure, headers on success.\n */\nfunction wp_get_http_headers( $url, $deprecated = false ) {\n\tif ( !empty( $deprecated ) )\n\t\t_deprecated_argument( __FUNCTION__, '2.7.0' );\n\n\t$response = wp_safe_remote_head( $url );\n\n\tif ( is_wp_error( $response ) )\n\t\treturn false;\n\n\treturn wp_remote_retrieve_headers( $response );\n}\n\n/**\n * Determines whether the publish date of the current post in the loop is different\n * from the publish date of the previous post in the loop.\n * \n * For more information on this and similar theme functions, check out\n * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/ \n * Conditional Tags} article in the Theme Developer Handbook.\n * \n * @since 0.71\n *\n * @global string $currentday  The day of the current post in the loop.\n * @global string $previousday The day of the previous post in the loop.\n *\n * @return int 1 when new day, 0 if not a new day.\n */\nfunction is_new_day() {\n\tglobal $currentday, $previousday;\n\tif ( $currentday != $previousday )\n\t\treturn 1;\n\telse\n\t\treturn 0;\n}\n\n/**\n * Build URL query based on an associative and, or indexed array.\n *\n * This is a convenient function for easily building url queries. It sets the\n * separator to '&' and uses _http_build_query() function.\n *\n * @since 2.3.0\n *\n * @see _http_build_query() Used to build the query\n * @link https://secure.php.net/manual/en/function.http-build-query.php for more on what\n *\t\t http_build_query() does.\n *\n * @param array $data URL-encode key/value pairs.\n * @return string URL-encoded string.\n */\nfunction build_query( $data ) {\n\treturn _http_build_query( $data, null, '&', '', false );\n}\n\n/**\n * From php.net (modified by Mark Jaquith to behave like the native PHP5 function).\n *\n * @since 3.2.0\n * @access private\n *\n * @see https://secure.php.net/manual/en/function.http-build-query.php\n *\n * @param array|object  $data       An array or object of data. Converted to array.\n * @param string        $prefix     Optional. Numeric index. If set, start parameter numbering with it.\n *                                  Default null.\n * @param string        $sep        Optional. Argument separator; defaults to 'arg_separator.output'.\n *                                  Default null.\n * @param string        $key        Optional. Used to prefix key name. Default empty.\n * @param bool          $urlencode  Optional. Whether to use urlencode() in the result. Default true.\n *\n * @return string The query string.\n */\nfunction _http_build_query( $data, $prefix = null, $sep = null, $key = '', $urlencode = true ) {\n\t$ret = array();\n\n\tforeach ( (array) $data as $k => $v ) {\n\t\tif ( $urlencode)\n\t\t\t$k = urlencode($k);\n\t\tif ( is_int($k) && $prefix != null )\n\t\t\t$k = $prefix.$k;\n\t\tif ( !empty($key) )\n\t\t\t$k = $key . '%5B' . $k . '%5D';\n\t\tif ( $v === null )\n\t\t\tcontinue;\n\t\telseif ( $v === false )\n\t\t\t$v = '0';\n\n\t\tif ( is_array($v) || is_object($v) )\n\t\t\tarray_push($ret,_http_build_query($v, '', $sep, $k, $urlencode));\n\t\telseif ( $urlencode )\n\t\t\tarray_push($ret, $k.'='.urlencode($v));\n\t\telse\n\t\t\tarray_push($ret, $k.'='.$v);\n\t}\n\n\tif ( null === $sep )\n\t\t$sep = ini_get('arg_separator.output');\n\n\treturn implode($sep, $ret);\n}\n\n/**\n * Retrieves a modified URL query string.\n *\n * You can rebuild the URL and append query variables to the URL query by using this function.\n * There are two ways to use this function; either a single key and value, or an associative array.\n *\n * Using a single key and value:\n *\n *     add_query_arg( 'key', 'value', 'http://example.com' );\n *\n * Using an associative array:\n *\n *     add_query_arg( array(\n *         'key1' => 'value1',\n *         'key2' => 'value2',\n *     ), 'http://example.com' );\n *\n * Omitting the URL from either use results in the current URL being used\n * (the value of `$_SERVER['REQUEST_URI']`).\n *\n * Values are expected to be encoded appropriately with urlencode() or rawurlencode().\n *\n * Setting any query variable's value to boolean false removes the key (see remove_query_arg()).\n *\n * Important: The return value of add_query_arg() is not escaped by default. Output should be\n * late-escaped with esc_url() or similar to help prevent vulnerability to cross-site scripting\n * (XSS) attacks.\n *\n * @since 1.5.0\n *\n * @param string|array $key   Either a query variable key, or an associative array of query variables.\n * @param string       $value Optional. Either a query variable value, or a URL to act upon.\n * @param string       $url   Optional. A URL to act upon.\n * @return string New URL query string (unescaped).\n */\nfunction add_query_arg() {\n\t$args = func_get_args();\n\tif ( is_array( $args[0] ) ) {\n\t\tif ( count( $args ) < 2 || false === $args[1] )\n\t\t\t$uri = $_SERVER['REQUEST_URI'];\n\t\telse\n\t\t\t$uri = $args[1];\n\t} else {\n\t\tif ( count( $args ) < 3 || false === $args[2] )\n\t\t\t$uri = $_SERVER['REQUEST_URI'];\n\t\telse\n\t\t\t$uri = $args[2];\n\t}\n\n\tif ( $frag = strstr( $uri, '#' ) )\n\t\t$uri = substr( $uri, 0, -strlen( $frag ) );\n\telse\n\t\t$frag = '';\n\n\tif ( 0 === stripos( $uri, 'http://' ) ) {\n\t\t$protocol = 'http://';\n\t\t$uri = substr( $uri, 7 );\n\t} elseif ( 0 === stripos( $uri, 'https://' ) ) {\n\t\t$protocol = 'https://';\n\t\t$uri = substr( $uri, 8 );\n\t} else {\n\t\t$protocol = '';\n\t}\n\n\tif ( strpos( $uri, '?' ) !== false ) {\n\t\tlist( $base, $query ) = explode( '?', $uri, 2 );\n\t\t$base .= '?';\n\t} elseif ( $protocol || strpos( $uri, '=' ) === false ) {\n\t\t$base = $uri . '?';\n\t\t$query = '';\n\t} else {\n\t\t$base = '';\n\t\t$query = $uri;\n\t}\n\n\twp_parse_str( $query, $qs );\n\t$qs = urlencode_deep( $qs ); // this re-URL-encodes things that were already in the query string\n\tif ( is_array( $args[0] ) ) {\n\t\tforeach ( $args[0] as $k => $v ) {\n\t\t\t$qs[ $k ] = $v;\n\t\t}\n\t} else {\n\t\t$qs[ $args[0] ] = $args[1];\n\t}\n\n\tforeach ( $qs as $k => $v ) {\n\t\tif ( $v === false )\n\t\t\tunset( $qs[$k] );\n\t}\n\n\t$ret = build_query( $qs );\n\t$ret = trim( $ret, '?' );\n\t$ret = preg_replace( '#=(&|$)#', '$1', $ret );\n\t$ret = $protocol . $base . $ret . $frag;\n\t$ret = rtrim( $ret, '?' );\n\treturn $ret;\n}\n\n/**\n * Removes an item or items from a query string.\n *\n * @since 1.5.0\n *\n * @param string|array $key   Query key or keys to remove.\n * @param bool|string  $query Optional. When false uses the current URL. Default false.\n * @return string New URL query string.\n */\nfunction remove_query_arg( $key, $query = false ) {\n\tif ( is_array( $key ) ) { // removing multiple keys\n\t\tforeach ( $key as $k )\n\t\t\t$query = add_query_arg( $k, false, $query );\n\t\treturn $query;\n\t}\n\treturn add_query_arg( $key, false, $query );\n}\n\n/**\n * Returns an array of single-use query variable names that can be removed from a URL.\n *\n * @since 4.4.0\n *\n * @return array An array of parameters to remove from the URL.\n */\nfunction wp_removable_query_args() {\n\t$removable_query_args = array(\n\t\t'activate',\n\t\t'activated',\n\t\t'approved',\n\t\t'deactivate',\n\t\t'deleted',\n\t\t'disabled',\n\t\t'enabled',\n\t\t'error',\n\t\t'hotkeys_highlight_first',\n\t\t'hotkeys_highlight_last',\n\t\t'locked',\n\t\t'message',\n\t\t'same',\n\t\t'saved',\n\t\t'settings-updated',\n\t\t'skipped',\n\t\t'spammed',\n\t\t'trashed',\n\t\t'unspammed',\n\t\t'untrashed',\n\t\t'update',\n\t\t'updated',\n\t\t'wp-post-new-reload',\n\t);\n\n\t/**\n\t * Filters the list of query variables to remove.\n\t *\n\t * @since 4.2.0\n\t *\n\t * @param array $removable_query_args An array of query variables to remove from a URL.\n\t */\n\treturn apply_filters( 'removable_query_args', $removable_query_args );\n}\n\n/**\n * Walks the array while sanitizing the contents.\n *\n * @since 0.71\n *\n * @param array $array Array to walk while sanitizing contents.\n * @return array Sanitized $array.\n */\nfunction add_magic_quotes( $array ) {\n\tforeach ( (array) $array as $k => $v ) {\n\t\tif ( is_array( $v ) ) {\n\t\t\t$array[$k] = add_magic_quotes( $v );\n\t\t} else {\n\t\t\t$array[$k] = addslashes( $v );\n\t\t}\n\t}\n\treturn $array;\n}\n\n/**\n * HTTP request for URI to retrieve content.\n *\n * @since 1.5.1\n *\n * @see wp_safe_remote_get()\n *\n * @param string $uri URI/URL of web page to retrieve.\n * @return false|string HTTP content. False on failure.\n */\nfunction wp_remote_fopen( $uri ) {\n\t$parsed_url = @parse_url( $uri );\n\n\tif ( !$parsed_url || !is_array( $parsed_url ) )\n\t\treturn false;\n\n\t$options = array();\n\t$options['timeout'] = 10;\n\n\t$response = wp_safe_remote_get( $uri, $options );\n\n\tif ( is_wp_error( $response ) )\n\t\treturn false;\n\n\treturn wp_remote_retrieve_body( $response );\n}\n\n/**\n * Set up the WordPress query.\n *\n * @since 2.0.0\n *\n * @global WP       $wp_locale\n * @global WP_Query $wp_query\n * @global WP_Query $wp_the_query\n *\n * @param string|array $query_vars Default WP_Query arguments.\n */\nfunction wp( $query_vars = '' ) {\n\tglobal $wp, $wp_query, $wp_the_query;\n\t$wp->main( $query_vars );\n\n\tif ( !isset($wp_the_query) )\n\t\t$wp_the_query = $wp_query;\n}\n\n/**\n * Retrieve the description for the HTTP status.\n *\n * @since 2.3.0\n *\n * @global array $wp_header_to_desc\n *\n * @param int $code HTTP status code.\n * @return string Empty string if not found, or description if found.\n */\nfunction get_status_header_desc( $code ) {\n\tglobal $wp_header_to_desc;\n\n\t$code = absint( $code );\n\n\tif ( !isset( $wp_header_to_desc ) ) {\n\t\t$wp_header_to_desc = array(\n\t\t\t100 => 'Continue',\n\t\t\t101 => 'Switching Protocols',\n\t\t\t102 => 'Processing',\n\n\t\t\t200 => 'OK',\n\t\t\t201 => 'Created',\n\t\t\t202 => 'Accepted',\n\t\t\t203 => 'Non-Authoritative Information',\n\t\t\t204 => 'No Content',\n\t\t\t205 => 'Reset Content',\n\t\t\t206 => 'Partial Content',\n\t\t\t207 => 'Multi-Status',\n\t\t\t226 => 'IM Used',\n\n\t\t\t300 => 'Multiple Choices',\n\t\t\t301 => 'Moved Permanently',\n\t\t\t302 => 'Found',\n\t\t\t303 => 'See Other',\n\t\t\t304 => 'Not Modified',\n\t\t\t305 => 'Use Proxy',\n\t\t\t306 => 'Reserved',\n\t\t\t307 => 'Temporary Redirect',\n\t\t\t308 => 'Permanent Redirect',\n\n\t\t\t400 => 'Bad Request',\n\t\t\t401 => 'Unauthorized',\n\t\t\t402 => 'Payment Required',\n\t\t\t403 => 'Forbidden',\n\t\t\t404 => 'Not Found',\n\t\t\t405 => 'Method Not Allowed',\n\t\t\t406 => 'Not Acceptable',\n\t\t\t407 => 'Proxy Authentication Required',\n\t\t\t408 => 'Request Timeout',\n\t\t\t409 => 'Conflict',\n\t\t\t410 => 'Gone',\n\t\t\t411 => 'Length Required',\n\t\t\t412 => 'Precondition Failed',\n\t\t\t413 => 'Request Entity Too Large',\n\t\t\t414 => 'Request-URI Too Long',\n\t\t\t415 => 'Unsupported Media Type',\n\t\t\t416 => 'Requested Range Not Satisfiable',\n\t\t\t417 => 'Expectation Failed',\n\t\t\t418 => 'I\\'m a teapot',\n\t\t\t421 => 'Misdirected Request',\n\t\t\t422 => 'Unprocessable Entity',\n\t\t\t423 => 'Locked',\n\t\t\t424 => 'Failed Dependency',\n\t\t\t426 => 'Upgrade Required',\n\t\t\t428 => 'Precondition Required',\n\t\t\t429 => 'Too Many Requests',\n\t\t\t431 => 'Request Header Fields Too Large',\n\t\t\t451 => 'Unavailable For Legal Reasons',\n\n\t\t\t500 => 'Internal Server Error',\n\t\t\t501 => 'Not Implemented',\n\t\t\t502 => 'Bad Gateway',\n\t\t\t503 => 'Service Unavailable',\n\t\t\t504 => 'Gateway Timeout',\n\t\t\t505 => 'HTTP Version Not Supported',\n\t\t\t506 => 'Variant Also Negotiates',\n\t\t\t507 => 'Insufficient Storage',\n\t\t\t510 => 'Not Extended',\n\t\t\t511 => 'Network Authentication Required',\n\t\t);\n\t}\n\n\tif ( isset( $wp_header_to_desc[$code] ) )\n\t\treturn $wp_header_to_desc[$code];\n\telse\n\t\treturn '';\n}\n\n/**\n * Set HTTP status header.\n *\n * @since 2.0.0\n * @since 4.4.0 Added the `$description` parameter.\n *\n * @see get_status_header_desc()\n *\n * @param int    $code        HTTP status code.\n * @param string $description Optional. A custom description for the HTTP status.\n */\nfunction status_header( $code, $description = '' ) {\n\tif ( ! $description ) {\n\t\t$description = get_status_header_desc( $code );\n\t}\n\n\tif ( empty( $description ) ) {\n\t\treturn;\n\t}\n\n\t$protocol = wp_get_server_protocol();\n\t$status_header = \"$protocol $code $description\";\n\tif ( function_exists( 'apply_filters' ) )\n\n\t\t/**\n\t\t * Filters an HTTP status header.\n\t\t *\n\t\t * @since 2.2.0\n\t\t *\n\t\t * @param string $status_header HTTP status header.\n\t\t * @param int    $code          HTTP status code.\n\t\t * @param string $description   Description for the status code.\n\t\t * @param string $protocol      Server protocol.\n\t\t */\n\t\t$status_header = apply_filters( 'status_header', $status_header, $code, $description, $protocol );\n\n\t@header( $status_header, true, $code );\n}\n\n/**\n * Get the header information to prevent caching.\n *\n * The several different headers cover the different ways cache prevention\n * is handled by different browsers\n *\n * @since 2.8.0\n *\n * @return array The associative array of header names and field values.\n */\nfunction wp_get_nocache_headers() {\n\t$headers = array(\n\t\t'Expires' => 'Wed, 11 Jan 1984 05:00:00 GMT',\n\t\t'Cache-Control' => 'no-cache, must-revalidate, max-age=0',\n\t);\n\n\tif ( function_exists('apply_filters') ) {\n\t\t/**\n\t\t * Filters the cache-controlling headers.\n\t\t *\n\t\t * @since 2.8.0\n\t\t *\n\t\t * @see wp_get_nocache_headers()\n\t\t *\n\t\t * @param array $headers {\n\t\t *     Header names and field values.\n\t\t *\n\t\t *     @type string $Expires       Expires header.\n\t\t *     @type string $Cache-Control Cache-Control header.\n\t\t * }\n\t\t */\n\t\t$headers = (array) apply_filters( 'nocache_headers', $headers );\n\t}\n\t$headers['Last-Modified'] = false;\n\treturn $headers;\n}\n\n/**\n * Set the headers to prevent caching for the different browsers.\n *\n * Different browsers support different nocache headers, so several\n * headers must be sent so that all of them get the point that no\n * caching should occur.\n *\n * @since 2.0.0\n *\n * @see wp_get_nocache_headers()\n */\nfunction nocache_headers() {\n\t$headers = wp_get_nocache_headers();\n\n\tunset( $headers['Last-Modified'] );\n\n\t// In PHP 5.3+, make sure we are not sending a Last-Modified header.\n\tif ( function_exists( 'header_remove' ) ) {\n\t\t@header_remove( 'Last-Modified' );\n\t} else {\n\t\t// In PHP 5.2, send an empty Last-Modified header, but only as a\n\t\t// last resort to override a header already sent. #WP23021\n\t\tforeach ( headers_list() as $header ) {\n\t\t\tif ( 0 === stripos( $header, 'Last-Modified' ) ) {\n\t\t\t\t$headers['Last-Modified'] = '';\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\tforeach ( $headers as $name => $field_value )\n\t\t@header(\"{$name}: {$field_value}\");\n}\n\n/**\n * Set the headers for caching for 10 days with JavaScript content type.\n *\n * @since 2.1.0\n */\nfunction cache_javascript_headers() {\n\t$expiresOffset = 10 * DAY_IN_SECONDS;\n\n\theader( \"Content-Type: text/javascript; charset=\" . get_bloginfo( 'charset' ) );\n\theader( \"Vary: Accept-Encoding\" ); // Handle proxies\n\theader( \"Expires: \" . gmdate( \"D, d M Y H:i:s\", time() + $expiresOffset ) . \" GMT\" );\n}\n\n/**\n * Retrieve the number of database queries during the WordPress execution.\n *\n * @since 2.0.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return int Number of database queries.\n */\nfunction get_num_queries() {\n\tglobal $wpdb;\n\treturn $wpdb->num_queries;\n}\n\n/**\n * Whether input is yes or no.\n *\n * Must be 'y' to be true.\n *\n * @since 1.0.0\n *\n * @param string $yn Character string containing either 'y' (yes) or 'n' (no).\n * @return bool True if yes, false on anything else.\n */\nfunction bool_from_yn( $yn ) {\n\treturn ( strtolower( $yn ) == 'y' );\n}\n\n/**\n * Load the feed template from the use of an action hook.\n *\n * If the feed action does not have a hook, then the function will die with a\n * message telling the visitor that the feed is not valid.\n *\n * It is better to only have one hook for each feed.\n *\n * @since 2.1.0\n *\n * @global WP_Query $wp_query Used to tell if the use a comment feed.\n */\nfunction do_feed() {\n\tglobal $wp_query;\n\n\t$feed = get_query_var( 'feed' );\n\n\t// Remove the pad, if present.\n\t$feed = preg_replace( '/^_+/', '', $feed );\n\n\tif ( $feed == '' || $feed == 'feed' )\n\t\t$feed = get_default_feed();\n\n\tif ( ! has_action( \"do_feed_{$feed}\" ) ) {\n\t\twp_die( __( 'ERROR: This is not a valid feed template.' ), '', array( 'response' => 404 ) );\n\t}\n\n\t/**\n\t * Fires once the given feed is loaded.\n\t *\n\t * The dynamic portion of the hook name, `$feed`, refers to the feed template name.\n\t * Possible values include: 'rdf', 'rss', 'rss2', and 'atom'.\n\t *\n\t * @since 2.1.0\n\t * @since 4.4.0 The `$feed` parameter was added.\n\t *\n\t * @param bool   $is_comment_feed Whether the feed is a comment feed.\n\t * @param string $feed            The feed name.\n\t */\n\tdo_action( \"do_feed_{$feed}\", $wp_query->is_comment_feed, $feed );\n}\n\n/**\n * Load the RDF RSS 0.91 Feed template.\n *\n * @since 2.1.0\n *\n * @see load_template()\n */\nfunction do_feed_rdf() {\n\tload_template( ABSPATH . WPINC . '/feed-rdf.php' );\n}\n\n/**\n * Load the RSS 1.0 Feed Template.\n *\n * @since 2.1.0\n *\n * @see load_template()\n */\nfunction do_feed_rss() {\n\tload_template( ABSPATH . WPINC . '/feed-rss.php' );\n}\n\n/**\n * Load either the RSS2 comment feed or the RSS2 posts feed.\n *\n * @since 2.1.0\n *\n * @see load_template()\n *\n * @param bool $for_comments True for the comment feed, false for normal feed.\n */\nfunction do_feed_rss2( $for_comments ) {\n\tif ( $for_comments )\n\t\tload_template( ABSPATH . WPINC . '/feed-rss2-comments.php' );\n\telse\n\t\tload_template( ABSPATH . WPINC . '/feed-rss2.php' );\n}\n\n/**\n * Load either Atom comment feed or Atom posts feed.\n *\n * @since 2.1.0\n *\n * @see load_template()\n *\n * @param bool $for_comments True for the comment feed, false for normal feed.\n */\nfunction do_feed_atom( $for_comments ) {\n\tif ($for_comments)\n\t\tload_template( ABSPATH . WPINC . '/feed-atom-comments.php');\n\telse\n\t\tload_template( ABSPATH . WPINC . '/feed-atom.php' );\n}\n\n/**\n * Display the robots.txt file content.\n *\n * The echo content should be with usage of the permalinks or for creating the\n * robots.txt file.\n *\n * @since 2.1.0\n */\nfunction do_robots() {\n\theader( 'Content-Type: text/plain; charset=utf-8' );\n\n\t/**\n\t * Fires when displaying the robots.txt file.\n\t *\n\t * @since 2.1.0\n\t */\n\tdo_action( 'do_robotstxt' );\n\n\t$output = \"User-agent: *\\n\";\n\t$public = get_option( 'blog_public' );\n\tif ( '0' == $public ) {\n\t\t$output .= \"Disallow: /\\n\";\n\t} else {\n\t\t$site_url = parse_url( site_url() );\n\t\t$path = ( !empty( $site_url['path'] ) ) ? $site_url['path'] : '';\n\t\t$output .= \"Disallow: $path/wp-admin/\\n\";\n\t\t$output .= \"Allow: $path/wp-admin/admin-ajax.php\\n\";\n\t}\n\n\t/**\n\t * Filters the robots.txt output.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $output Robots.txt output.\n\t * @param bool   $public Whether the site is considered \"public\".\n\t */\n\techo apply_filters( 'robots_txt', $output, $public );\n}\n\n/**\n * Determines whether WordPress is already installed.\n *\n * The cache will be checked first. If you have a cache plugin, which saves\n * the cache values, then this will work. If you use the default WordPress\n * cache, and the database goes away, then you might have problems.\n *\n * Checks for the 'siteurl' option for whether WordPress is installed.\n * \n * For more information on this and similar theme functions, check out\n * the {@link https://developer.wordpress.org/themes/basics/conditional-tags/ \n * Conditional Tags} article in the Theme Developer Handbook.\n *\n * @since 2.1.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n *\n * @return bool Whether the site is already installed.\n */\nfunction is_blog_installed() {\n\tglobal $wpdb;\n\n\t/*\n\t * Check cache first. If options table goes away and we have true\n\t * cached, oh well.\n\t */\n\tif ( wp_cache_get( 'is_blog_installed' ) )\n\t\treturn true;\n\n\t$suppress = $wpdb->suppress_errors();\n\tif ( ! wp_installing() ) {\n\t\t$alloptions = wp_load_alloptions();\n\t}\n\t// If siteurl is not set to autoload, check it specifically\n\tif ( !isset( $alloptions['siteurl'] ) )\n\t\t$installed = $wpdb->get_var( \"SELECT option_value FROM $wpdb->options WHERE option_name = 'siteurl'\" );\n\telse\n\t\t$installed = $alloptions['siteurl'];\n\t$wpdb->suppress_errors( $suppress );\n\n\t$installed = !empty( $installed );\n\twp_cache_set( 'is_blog_installed', $installed );\n\n\tif ( $installed )\n\t\treturn true;\n\n\t// If visiting repair.php, return true and let it take over.\n\tif ( defined( 'WP_REPAIRING' ) )\n\t\treturn true;\n\n\t$suppress = $wpdb->suppress_errors();\n\n\t/*\n\t * Loop over the WP tables. If none exist, then scratch installation is allowed.\n\t * If one or more exist, suggest table repair since we got here because the\n\t * options table could not be accessed.\n\t */\n\t$wp_tables = $wpdb->tables();\n\tforeach ( $wp_tables as $table ) {\n\t\t// The existence of custom user tables shouldn't suggest an insane state or prevent a clean installation.\n\t\tif ( defined( 'CUSTOM_USER_TABLE' ) && CUSTOM_USER_TABLE == $table )\n\t\t\tcontinue;\n\t\tif ( defined( 'CUSTOM_USER_META_TABLE' ) && CUSTOM_USER_META_TABLE == $table )\n\t\t\tcontinue;\n\n\t\tif ( ! $wpdb->get_results( \"DESCRIBE $table;\" ) )\n\t\t\tcontinue;\n\n\t\t// One or more tables exist. We are insane.\n\n\t\twp_load_translations_early();\n\n\t\t// Die with a DB error.\n\t\t$wpdb->error = sprintf(\n\t\t\t/* translators: %s: database repair URL */\n\t\t\t__( 'One or more database tables are unavailable. The database may need to be <a href=\"%s\">repaired</a>.' ),\n\t\t\t'maint/repair.php?referrer=is_blog_installed'\n\t\t);\n\n\t\tdead_db();\n\t}\n\n\t$wpdb->suppress_errors( $suppress );\n\n\twp_cache_set( 'is_blog_installed', false );\n\n\treturn false;\n}\n\n/**\n * Retrieve URL with nonce added to URL query.\n *\n * @since 2.0.4\n *\n * @param string     $actionurl URL to add nonce action.\n * @param int|string $action    Optional. Nonce action name. Default -1.\n * @param string     $name      Optional. Nonce name. Default '_wpnonce'.\n * @return string Escaped URL with nonce action added.\n */\nfunction wp_nonce_url( $actionurl, $action = -1, $name = '_wpnonce' ) {\n\t$actionurl = str_replace( '&amp;', '&', $actionurl );\n\treturn esc_html( add_query_arg( $name, wp_create_nonce( $action ), $actionurl ) );\n}\n\n/**\n * Retrieve or display nonce hidden field for forms.\n *\n * The nonce field is used to validate that the contents of the form came from\n * the location on the current site and not somewhere else. The nonce does not\n * offer absolute protection, but should protect against most cases. It is very\n * important to use nonce field in forms.\n *\n * The $action and $name are optional, but if you want to have better security,\n * it is strongly suggested to set those two parameters. It is easier to just\n * call the function without any parameters, because validation of the nonce\n * doesn't require any parameters, but since crackers know what the default is\n * it won't be difficult for them to find a way around your nonce and cause\n * damage.\n *\n * The input name will be whatever $name value you gave. The input value will be\n * the nonce creation value.\n *\n * @since 2.0.4\n *\n * @param int|string $action  Optional. Action name. Default -1.\n * @param string     $name    Optional. Nonce name. Default '_wpnonce'.\n * @param bool       $referer Optional. Whether to set the referer field for validation. Default true.\n * @param bool       $echo    Optional. Whether to display or return hidden form field. Default true.\n * @return string Nonce field HTML markup.\n */\nfunction wp_nonce_field( $action = -1, $name = \"_wpnonce\", $referer = true , $echo = true ) {\n\t$name = esc_attr( $name );\n\t$nonce_field = '<input type=\"hidden\" id=\"' . $name . '\" name=\"' . $name . '\" value=\"' . wp_create_nonce( $action ) . '\" />';\n\n\tif ( $referer )\n\t\t$nonce_field .= wp_referer_field( false );\n\n\tif ( $echo )\n\t\techo $nonce_field;\n\n\treturn $nonce_field;\n}\n\n/**\n * Retrieve or display referer hidden field for forms.\n *\n * The referer link is the current Request URI from the server super global. The\n * input name is '_wp_http_referer', in case you wanted to check manually.\n *\n * @since 2.0.4\n *\n * @param bool $echo Optional. Whether to echo or return the referer field. Default true.\n * @return string Referer field HTML markup.\n */\nfunction wp_referer_field( $echo = true ) {\n\t$referer_field = '<input type=\"hidden\" name=\"_wp_http_referer\" value=\"'. esc_attr( wp_unslash( $_SERVER['REQUEST_URI'] ) ) . '\" />';\n\n\tif ( $echo )\n\t\techo $referer_field;\n\treturn $referer_field;\n}\n\n/**\n * Retrieve or display original referer hidden field for forms.\n *\n * The input name is '_wp_original_http_referer' and will be either the same\n * value of wp_referer_field(), if that was posted already or it will be the\n * current page, if it doesn't exist.\n *\n * @since 2.0.4\n *\n * @param bool   $echo         Optional. Whether to echo the original http referer. Default true.\n * @param string $jump_back_to Optional. Can be 'previous' or page you want to jump back to.\n *                             Default 'current'.\n * @return string Original referer field.\n */\nfunction wp_original_referer_field( $echo = true, $jump_back_to = 'current' ) {\n\tif ( ! $ref = wp_get_original_referer() ) {\n\t\t$ref = 'previous' == $jump_back_to ? wp_get_referer() : wp_unslash( $_SERVER['REQUEST_URI'] );\n\t}\n\t$orig_referer_field = '<input type=\"hidden\" name=\"_wp_original_http_referer\" value=\"' . esc_attr( $ref ) . '\" />';\n\tif ( $echo )\n\t\techo $orig_referer_field;\n\treturn $orig_referer_field;\n}\n\n/**\n * Retrieve referer from '_wp_http_referer' or HTTP referer.\n *\n * If it's the same as the current request URL, will return false.\n *\n * @since 2.0.4\n *\n * @return false|string False on failure. Referer URL on success.\n */\nfunction wp_get_referer() {\n\tif ( ! function_exists( 'wp_validate_redirect' ) ) {\n\t\treturn false;\n\t}\n\n\t$ref = wp_get_raw_referer();\n\n\tif ( $ref && $ref !== wp_unslash( $_SERVER['REQUEST_URI'] ) && $ref !== home_url() . wp_unslash( $_SERVER['REQUEST_URI'] ) ) {\n\t\treturn wp_validate_redirect( $ref, false );\n\t}\n\n\treturn false;\n}\n\n/**\n * Retrieves unvalidated referer from '_wp_http_referer' or HTTP referer.\n *\n * Do not use for redirects, use wp_get_referer() instead.\n *\n * @since 4.5.0\n *\n * @return string|false Referer URL on success, false on failure.\n */\nfunction wp_get_raw_referer() {\n\tif ( ! empty( $_REQUEST['_wp_http_referer'] ) ) {\n\t\treturn wp_unslash( $_REQUEST['_wp_http_referer'] );\n\t} else if ( ! empty( $_SERVER['HTTP_REFERER'] ) ) {\n\t\treturn wp_unslash( $_SERVER['HTTP_REFERER'] );\n\t}\n\n\treturn false;\n}\n\n/**\n * Retrieve original referer that was posted, if it exists.\n *\n * @since 2.0.4\n *\n * @return string|false False if no original referer or original referer if set.\n */\nfunction wp_get_original_referer() {\n\tif ( ! empty( $_REQUEST['_wp_original_http_referer'] ) && function_exists( 'wp_validate_redirect' ) )\n\t\treturn wp_validate_redirect( wp_unslash( $_REQUEST['_wp_original_http_referer'] ), false );\n\treturn false;\n}\n\n/**\n * Recursive directory creation based on full path.\n *\n * Will attempt to set permissions on folders.\n *\n * @since 2.0.1\n *\n * @param string $target Full path to attempt to create.\n * @return bool Whether the path was created. True if path already exists.\n */\nfunction wp_mkdir_p( $target ) {\n\t$wrapper = null;\n\n\t// Strip the protocol.\n\tif ( wp_is_stream( $target ) ) {\n\t\tlist( $wrapper, $target ) = explode( '://', $target, 2 );\n\t}\n\n\t// From php.net/mkdir user contributed notes.\n\t$target = str_replace( '//', '/', $target );\n\n\t// Put the wrapper back on the target.\n\tif ( $wrapper !== null ) {\n\t\t$target = $wrapper . '://' . $target;\n\t}\n\n\t/*\n\t * Safe mode fails with a trailing slash under certain PHP versions.\n\t * Use rtrim() instead of untrailingslashit to avoid formatting.php dependency.\n\t */\n\t$target = rtrim($target, '/');\n\tif ( empty($target) )\n\t\t$target = '/';\n\n\tif ( file_exists( $target ) )\n\t\treturn @is_dir( $target );\n\n\t// We need to find the permissions of the parent folder that exists and inherit that.\n\t$target_parent = dirname( $target );\n\twhile ( '.' != $target_parent && ! is_dir( $target_parent ) && dirname( $target_parent ) !== $target_parent ) {\n\t\t$target_parent = dirname( $target_parent );\n\t}\n\n\t// Get the permission bits.\n\tif ( $stat = @stat( $target_parent ) ) {\n\t\t$dir_perms = $stat['mode'] & 0007777;\n\t} else {\n\t\t$dir_perms = 0777;\n\t}\n\n\tif ( @mkdir( $target, $dir_perms, true ) ) {\n\n\t\t/*\n\t\t * If a umask is set that modifies $dir_perms, we'll have to re-set\n\t\t * the $dir_perms correctly with chmod()\n\t\t */\n\t\tif ( $dir_perms != ( $dir_perms & ~umask() ) ) {\n\t\t\t$folder_parts = explode( '/', substr( $target, strlen( $target_parent ) + 1 ) );\n\t\t\tfor ( $i = 1, $c = count( $folder_parts ); $i <= $c; $i++ ) {\n\t\t\t\t@chmod( $target_parent . '/' . implode( '/', array_slice( $folder_parts, 0, $i ) ), $dir_perms );\n\t\t\t}\n\t\t}\n\n\t\treturn true;\n\t}\n\n\treturn false;\n}\n\n/**\n * Test if a given filesystem path is absolute.\n *\n * For example, '/foo/bar', or 'c:\\windows'.\n *\n * @since 2.5.0\n *\n * @param string $path File path.\n * @return bool True if path is absolute, false is not absolute.\n */\nfunction path_is_absolute( $path ) {\n\t/*\n\t * This is definitive if true but fails if $path does not exist or contains\n\t * a symbolic link.\n\t */\n\tif ( realpath($path) == $path )\n\t\treturn true;\n\n\tif ( strlen($path) == 0 || $path[0] == '.' )\n\t\treturn false;\n\n\t// Windows allows absolute paths like this.\n\tif ( preg_match('#^[a-zA-Z]:\\\\\\\\#', $path) )\n\t\treturn true;\n\n\t// A path starting with / or \\ is absolute; anything else is relative.\n\treturn ( $path[0] == '/' || $path[0] == '\\\\' );\n}\n\n/**\n * Join two filesystem paths together.\n *\n * For example, 'give me $path relative to $base'. If the $path is absolute,\n * then it the full path is returned.\n *\n * @since 2.5.0\n *\n * @param string $base Base path.\n * @param string $path Path relative to $base.\n * @return string The path with the base or absolute path.\n */\nfunction path_join( $base, $path ) {\n\tif ( path_is_absolute($path) )\n\t\treturn $path;\n\n\treturn rtrim($base, '/') . '/' . ltrim($path, '/');\n}\n\n/**\n * Normalize a filesystem path.\n *\n * On windows systems, replaces backslashes with forward slashes\n * and forces upper-case drive letters.\n * Allows for two leading slashes for Windows network shares, but\n * ensures that all other duplicate slashes are reduced to a single.\n *\n * @since 3.9.0\n * @since 4.4.0 Ensures upper-case drive letters on Windows systems.\n * @since 4.5.0 Allows for Windows network shares.\n * @since 4.9.7 Allows for PHP file wrappers.\n *\n * @param string $path Path to normalize.\n * @return string Normalized path.\n */\nfunction wp_normalize_path( $path ) {\n\t$wrapper = '';\n\tif ( wp_is_stream( $path ) ) {\n\t\tlist( $wrapper, $path ) = explode( '://', $path, 2 );\n\t\t$wrapper .= '://';\n\t}\n\n\t// Standardise all paths to use /\n\t$path = str_replace( '\\\\', '/', $path );\n\n\t// Replace multiple slashes down to a singular, allowing for network shares having two slashes.\n\t$path = preg_replace( '|(?<=.)/+|', '/', $path );\n\n\t// Windows paths should uppercase the drive letter\n\tif ( ':' === substr( $path, 1, 1 ) ) {\n\t\t$path = ucfirst( $path );\n\t}\n\n\treturn $wrapper . $path;\n}\n\n/**\n * Determine a writable directory for temporary files.\n *\n * Function's preference is the return value of sys_get_temp_dir(),\n * followed by your PHP temporary upload directory, followed by WP_CONTENT_DIR,\n * before finally defaulting to /tmp/\n *\n * In the event that this function does not find a writable location,\n * It may be overridden by the WP_TEMP_DIR constant in your wp-config.php file.\n *\n * @since 2.5.0\n *\n * @staticvar string $temp\n *\n * @return string Writable temporary directory.\n */\nfunction get_temp_dir() {\n\tstatic $temp = '';\n\tif ( defined('WP_TEMP_DIR') )\n\t\treturn trailingslashit(WP_TEMP_DIR);\n\n\tif ( $temp )\n\t\treturn trailingslashit( $temp );\n\n\tif ( function_exists('sys_get_temp_dir') ) {\n\t\t$temp = sys_get_temp_dir();\n\t\tif ( @is_dir( $temp ) && wp_is_writable( $temp ) )\n\t\t\treturn trailingslashit( $temp );\n\t}\n\n\t$temp = ini_get('upload_tmp_dir');\n\tif ( @is_dir( $temp ) && wp_is_writable( $temp ) )\n\t\treturn trailingslashit( $temp );\n\n\t$temp = WP_CONTENT_DIR . '/';\n\tif ( is_dir( $temp ) && wp_is_writable( $temp ) )\n\t\treturn $temp;\n\n\treturn '/tmp/';\n}\n\n/**\n * Determine if a directory is writable.\n *\n * This function is used to work around certain ACL issues in PHP primarily\n * affecting Windows Servers.\n *\n * @since 3.6.0\n *\n * @see win_is_writable()\n *\n * @param string $path Path to check for write-ability.\n * @return bool Whether the path is writable.\n */\nfunction wp_is_writable( $path ) {\n\tif ( 'WIN' === strtoupper( substr( PHP_OS, 0, 3 ) ) )\n\t\treturn win_is_writable( $path );\n\telse\n\t\treturn @is_writable( $path );\n}\n\n/**\n * Workaround for Windows bug in is_writable() function\n *\n * PHP has issues with Windows ACL's for determine if a\n * directory is writable or not, this works around them by\n * checking the ability to open files rather than relying\n * upon PHP to interprate the OS ACL.\n *\n * @since 2.8.0\n *\n * @see https://bugs.php.net/bug.php?id=27609\n * @see https://bugs.php.net/bug.php?id=30931\n *\n * @param string $path Windows path to check for write-ability.\n * @return bool Whether the path is writable.\n */\nfunction win_is_writable( $path ) {\n\n\tif ( $path[strlen( $path ) - 1] == '/' ) { // if it looks like a directory, check a random file within the directory\n\t\treturn win_is_writable( $path . uniqid( mt_rand() ) . '.tmp');\n\t} elseif ( is_dir( $path ) ) { // If it's a directory (and not a file) check a random file within the directory\n\t\treturn win_is_writable( $path . '/' . uniqid( mt_rand() ) . '.tmp' );\n\t}\n\t// check tmp file for read/write capabilities\n\t$should_delete_tmp_file = !file_exists( $path );\n\t$f = @fopen( $path, 'a' );\n\tif ( $f === false )\n\t\treturn false;\n\tfclose( $f );\n\tif ( $should_delete_tmp_file )\n\t\tunlink( $path );\n\treturn true;\n}\n\n/**\n * Retrieves uploads directory information.\n *\n * Same as wp_upload_dir() but \"light weight\" as it doesn't attempt to create the uploads directory.\n * Intended for use in themes, when only 'basedir' and 'baseurl' are needed, generally in all cases\n * when not uploading files.\n *\n * @since 4.5.0\n *\n * @see wp_upload_dir()\n *\n * @return array See wp_upload_dir() for description.\n */\nfunction wp_get_upload_dir() {\n\treturn wp_upload_dir( null, false );\n}\n\n/**\n * Get an array containing the current upload directory's path and url.\n *\n * Checks the 'upload_path' option, which should be from the web root folder,\n * and if it isn't empty it will be used. If it is empty, then the path will be\n * 'WP_CONTENT_DIR/uploads'. If the 'UPLOADS' constant is defined, then it will\n * override the 'upload_path' option and 'WP_CONTENT_DIR/uploads' path.\n *\n * The upload URL path is set either by the 'upload_url_path' option or by using\n * the 'WP_CONTENT_URL' constant and appending '/uploads' to the path.\n *\n * If the 'uploads_use_yearmonth_folders' is set to true (checkbox if checked in\n * the administration settings panel), then the time will be used. The format\n * will be year first and then month.\n *\n * If the path couldn't be created, then an error will be returned with the key\n * 'error' containing the error message. The error suggests that the parent\n * directory is not writable by the server.\n *\n * On success, the returned array will have many indices:\n * 'path' - base directory and sub directory or full path to upload directory.\n * 'url' - base url and sub directory or absolute URL to upload directory.\n * 'subdir' - sub directory if uploads use year/month folders option is on.\n * 'basedir' - path without subdir.\n * 'baseurl' - URL path without subdir.\n * 'error' - false or error message.\n *\n * @since 2.0.0\n * @uses _wp_upload_dir()\n *\n * @staticvar array $cache\n * @staticvar array $tested_paths\n *\n * @param string $time Optional. Time formatted in 'yyyy/mm'. Default null.\n * @param bool   $create_dir Optional. Whether to check and create the uploads directory.\n *                           Default true for backward compatibility.\n * @param bool   $refresh_cache Optional. Whether to refresh the cache. Default false.\n * @return array See above for description.\n */\nfunction wp_upload_dir( $time = null, $create_dir = true, $refresh_cache = false ) {\n\tstatic $cache = array(), $tested_paths = array();\n\n\t$key = sprintf( '%d-%s', get_current_blog_id(), (string) $time );\n\n\tif ( $refresh_cache || empty( $cache[ $key ] ) ) {\n\t\t$cache[ $key ] = _wp_upload_dir( $time );\n\t}\n\n\t/**\n\t * Filters the uploads directory data.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array $uploads Array of upload directory data with keys of 'path',\n\t *                       'url', 'subdir, 'basedir', and 'error'.\n\t */\n\t$uploads = apply_filters( 'upload_dir', $cache[ $key ] );\n\n\tif ( $create_dir ) {\n\t\t$path = $uploads['path'];\n\n\t\tif ( array_key_exists( $path, $tested_paths ) ) {\n\t\t\t$uploads['error'] = $tested_paths[ $path ];\n\t\t} else {\n\t\t\tif ( ! wp_mkdir_p( $path ) ) {\n\t\t\t\tif ( 0 === strpos( $uploads['basedir'], ABSPATH ) ) {\n\t\t\t\t\t$error_path = str_replace( ABSPATH, '', $uploads['basedir'] ) . $uploads['subdir'];\n\t\t\t\t} else {\n\t\t\t\t\t$error_path = basename( $uploads['basedir'] ) . $uploads['subdir'];\n\t\t\t\t}\n\n\t\t\t\t$uploads['error'] = sprintf(\n\t\t\t\t\t/* translators: %s: directory path */\n\t\t\t\t\t__( 'Unable to create directory %s. Is its parent directory writable by the server?' ),\n\t\t\t\t\tesc_html( $error_path )\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t$tested_paths[ $path ] = $uploads['error'];\n\t\t}\n\t}\n\n\treturn $uploads;\n}\n\n/**\n * A non-filtered, non-cached version of wp_upload_dir() that doesn't check the path.\n *\n * @since 4.5.0\n * @access private\n *\n * @param string $time Optional. Time formatted in 'yyyy/mm'. Default null.\n * @return array See wp_upload_dir()\n */\nfunction _wp_upload_dir( $time = null ) {\n\t$siteurl = get_option( 'siteurl' );\n\t$upload_path = trim( get_option( 'upload_path' ) );\n\n\tif ( empty( $upload_path ) || 'wp-content/uploads' == $upload_path ) {\n\t\t$dir = WP_CONTENT_DIR . '/uploads';\n\t} elseif ( 0 !== strpos( $upload_path, ABSPATH ) ) {\n\t\t// $dir is absolute, $upload_path is (maybe) relative to ABSPATH\n\t\t$dir = path_join( ABSPATH, $upload_path );\n\t} else {\n\t\t$dir = $upload_path;\n\t}\n\n\tif ( !$url = get_option( 'upload_url_path' ) ) {\n\t\tif ( empty($upload_path) || ( 'wp-content/uploads' == $upload_path ) || ( $upload_path == $dir ) )\n\t\t\t$url = WP_CONTENT_URL . '/uploads';\n\t\telse\n\t\t\t$url = trailingslashit( $siteurl ) . $upload_path;\n\t}\n\n\t/*\n\t * Honor the value of UPLOADS. This happens as long as ms-files rewriting is disabled.\n\t * We also sometimes obey UPLOADS when rewriting is enabled -- see the next block.\n\t */\n\tif ( defined( 'UPLOADS' ) && ! ( is_multisite() && get_site_option( 'ms_files_rewriting' ) ) ) {\n\t\t$dir = ABSPATH . UPLOADS;\n\t\t$url = trailingslashit( $siteurl ) . UPLOADS;\n\t}\n\n\t// If multisite (and if not the main site in a post-MU network)\n\tif ( is_multisite() && ! ( is_main_network() && is_main_site() && defined( 'MULTISITE' ) ) ) {\n\n\t\tif ( ! get_site_option( 'ms_files_rewriting' ) ) {\n\t\t\t/*\n\t\t\t * If ms-files rewriting is disabled (networks created post-3.5), it is fairly\n\t\t\t * straightforward: Append sites/%d if we're not on the main site (for post-MU\n\t\t\t * networks). (The extra directory prevents a four-digit ID from conflicting with\n\t\t\t * a year-based directory for the main site. But if a MU-era network has disabled\n\t\t\t * ms-files rewriting manually, they don't need the extra directory, as they never\n\t\t\t * had wp-content/uploads for the main site.)\n\t\t\t */\n\n\t\t\tif ( defined( 'MULTISITE' ) )\n\t\t\t\t$ms_dir = '/sites/' . get_current_blog_id();\n\t\t\telse\n\t\t\t\t$ms_dir = '/' . get_current_blog_id();\n\n\t\t\t$dir .= $ms_dir;\n\t\t\t$url .= $ms_dir;\n\n\t\t} elseif ( defined( 'UPLOADS' ) && ! ms_is_switched() ) {\n\t\t\t/*\n\t\t\t * Handle the old-form ms-files.php rewriting if the network still has that enabled.\n\t\t\t * When ms-files rewriting is enabled, then we only listen to UPLOADS when:\n\t\t\t * 1) We are not on the main site in a post-MU network, as wp-content/uploads is used\n\t\t\t *    there, and\n\t\t\t * 2) We are not switched, as ms_upload_constants() hardcodes these constants to reflect\n\t\t\t *    the original blog ID.\n\t\t\t *\n\t\t\t * Rather than UPLOADS, we actually use BLOGUPLOADDIR if it is set, as it is absolute.\n\t\t\t * (And it will be set, see ms_upload_constants().) Otherwise, UPLOADS can be used, as\n\t\t\t * as it is relative to ABSPATH. For the final piece: when UPLOADS is used with ms-files\n\t\t\t * rewriting in multisite, the resulting URL is /files. (#WP22702 for background.)\n\t\t\t */\n\n\t\t\tif ( defined( 'BLOGUPLOADDIR' ) )\n\t\t\t\t$dir = untrailingslashit( BLOGUPLOADDIR );\n\t\t\telse\n\t\t\t\t$dir = ABSPATH . UPLOADS;\n\t\t\t$url = trailingslashit( $siteurl ) . 'files';\n\t\t}\n\t}\n\n\t$basedir = $dir;\n\t$baseurl = $url;\n\n\t$subdir = '';\n\tif ( get_option( 'uploads_use_yearmonth_folders' ) ) {\n\t\t// Generate the yearly and monthly dirs\n\t\tif ( !$time )\n\t\t\t$time = current_time( 'mysql' );\n\t\t$y = substr( $time, 0, 4 );\n\t\t$m = substr( $time, 5, 2 );\n\t\t$subdir = \"/$y/$m\";\n\t}\n\n\t$dir .= $subdir;\n\t$url .= $subdir;\n\n\treturn array(\n\t\t'path'    => $dir,\n\t\t'url'     => $url,\n\t\t'subdir'  => $subdir,\n\t\t'basedir' => $basedir,\n\t\t'baseurl' => $baseurl,\n\t\t'error'   => false,\n\t);\n}\n\n/**\n * Get a filename that is sanitized and unique for the given directory.\n *\n * If the filename is not unique, then a number will be added to the filename\n * before the extension, and will continue adding numbers until the filename is\n * unique.\n *\n * The callback is passed three parameters, the first one is the directory, the\n * second is the filename, and the third is the extension.\n *\n * @since 2.5.0\n *\n * @param string   $dir                      Directory.\n * @param string   $filename                 File name.\n * @param callable $unique_filename_callback Callback. Default null.\n * @return string New filename, if given wasn't unique.\n */\nfunction wp_unique_filename( $dir, $filename, $unique_filename_callback = null ) {\n\t// Sanitize the file name before we begin processing.\n\t$filename = sanitize_file_name($filename);\n\n\t// Separate the filename into a name and extension.\n\t$ext = pathinfo( $filename, PATHINFO_EXTENSION );\n\t$name = pathinfo( $filename, PATHINFO_BASENAME );\n\tif ( $ext ) {\n\t\t$ext = '.' . $ext;\n\t}\n\n\t// Edge case: if file is named '.ext', treat as an empty name.\n\tif ( $name === $ext ) {\n\t\t$name = '';\n\t}\n\n\t/*\n\t * Increment the file number until we have a unique file to save in $dir.\n\t * Use callback if supplied.\n\t */\n\tif ( $unique_filename_callback && is_callable( $unique_filename_callback ) ) {\n\t\t$filename = call_user_func( $unique_filename_callback, $dir, $name, $ext );\n\t} else {\n\t\t$number = '';\n\n\t\t// Change '.ext' to lower case.\n\t\tif ( $ext && strtolower($ext) != $ext ) {\n\t\t\t$ext2 = strtolower($ext);\n\t\t\t$filename2 = preg_replace( '|' . preg_quote($ext) . '$|', $ext2, $filename );\n\n\t\t\t// Check for both lower and upper case extension or image sub-sizes may be overwritten.\n\t\t\twhile ( file_exists($dir . \"/$filename\") || file_exists($dir . \"/$filename2\") ) {\n\t\t\t\t$new_number = (int) $number + 1;\n\t\t\t\t$filename = str_replace( array( \"-$number$ext\", \"$number$ext\" ), \"-$new_number$ext\", $filename );\n\t\t\t\t$filename2 = str_replace( array( \"-$number$ext2\", \"$number$ext2\" ), \"-$new_number$ext2\", $filename2 );\n\t\t\t\t$number = $new_number;\n\t\t\t}\n\n\t\t\t/**\n\t\t\t * Filters the result when generating a unique file name.\n\t\t\t *\n\t\t\t * @since 4.5.0\n\t\t\t *\n\t\t\t * @param string        $filename                 Unique file name.\n\t\t\t * @param string        $ext                      File extension, eg. \".png\".\n\t\t\t * @param string        $dir                      Directory path.\n\t\t\t * @param callable|null $unique_filename_callback Callback function that generates the unique file name.\n\t\t\t */\n\t\t\treturn apply_filters( 'wp_unique_filename', $filename2, $ext, $dir, $unique_filename_callback );\n\t\t}\n\n\t\twhile ( file_exists( $dir . \"/$filename\" ) ) {\n\t\t\t$new_number = (int) $number + 1;\n\t\t\tif ( '' == \"$number$ext\" ) {\n\t\t\t\t$filename = \"$filename-\" . $new_number;\n\t\t\t} else {\n\t\t\t\t$filename = str_replace( array( \"-$number$ext\", \"$number$ext\" ), \"-\" . $new_number . $ext, $filename );\n\t\t\t}\n\t\t\t$number = $new_number;\n\t\t}\n\t}\n\n\t/** This filter is documented in wp-includes/functions.php */\n\treturn apply_filters( 'wp_unique_filename', $filename, $ext, $dir, $unique_filename_callback );\n}\n\n/**\n * Create a file in the upload folder with given content.\n *\n * If there is an error, then the key 'error' will exist with the error message.\n * If success, then the key 'file' will have the unique file path, the 'url' key\n * will have the link to the new file. and the 'error' key will be set to false.\n *\n * This function will not move an uploaded file to the upload folder. It will\n * create a new file with the content in $bits parameter. If you move the upload\n * file, read the content of the uploaded file, and then you can give the\n * filename and content to this function, which will add it to the upload\n * folder.\n *\n * The permissions will be set on the new file automatically by this function.\n *\n * @since 2.0.0\n *\n * @param string       $name       Filename.\n * @param null|string  $deprecated Never used. Set to null.\n * @param mixed        $bits       File content\n * @param string       $time       Optional. Time formatted in 'yyyy/mm'. Default null.\n * @return array\n */\nfunction wp_upload_bits( $name, $deprecated, $bits, $time = null ) {\n\tif ( !empty( $deprecated ) )\n\t\t_deprecated_argument( __FUNCTION__, '2.0.0' );\n\n\tif ( empty( $name ) )\n\t\treturn array( 'error' => __( 'Empty filename' ) );\n\n\t$wp_filetype = wp_check_filetype( $name );\n\tif ( ! $wp_filetype['ext'] && ! current_user_can( 'unfiltered_upload' ) )\n\t\treturn array( 'error' => __( 'Sorry, this file type is not permitted for security reasons.' ) );\n\n\t$upload = wp_upload_dir( $time );\n\n\tif ( $upload['error'] !== false )\n\t\treturn $upload;\n\n\t/**\n\t * Filters whether to treat the upload bits as an error.\n\t *\n\t * Passing a non-array to the filter will effectively short-circuit preparing\n\t * the upload bits, returning that value instead.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param mixed $upload_bits_error An array of upload bits data, or a non-array error to return.\n\t */\n\t$upload_bits_error = apply_filters( 'wp_upload_bits', array( 'name' => $name, 'bits' => $bits, 'time' => $time ) );\n\tif ( !is_array( $upload_bits_error ) ) {\n\t\t$upload[ 'error' ] = $upload_bits_error;\n\t\treturn $upload;\n\t}\n\n\t$filename = wp_unique_filename( $upload['path'], $name );\n\n\t$new_file = $upload['path'] . \"/$filename\";\n\tif ( ! wp_mkdir_p( dirname( $new_file ) ) ) {\n\t\tif ( 0 === strpos( $upload['basedir'], ABSPATH ) )\n\t\t\t$error_path = str_replace( ABSPATH, '', $upload['basedir'] ) . $upload['subdir'];\n\t\telse\n\t\t\t$error_path = basename( $upload['basedir'] ) . $upload['subdir'];\n\n\t\t$message = sprintf(\n\t\t\t/* translators: %s: directory path */\n\t\t\t__( 'Unable to create directory %s. Is its parent directory writable by the server?' ),\n\t\t\t$error_path\n\t\t);\n\t\treturn array( 'error' => $message );\n\t}\n\n\t$ifp = @ fopen( $new_file, 'wb' );\n\tif ( ! $ifp )\n\t\treturn array( 'error' => sprintf( __( 'Could not write file %s' ), $new_file ) );\n\n\t@fwrite( $ifp, $bits );\n\tfclose( $ifp );\n\tclearstatcache();\n\n\t// Set correct file permissions\n\t$stat = @ stat( dirname( $new_file ) );\n\t$perms = $stat['mode'] & 0007777;\n\t$perms = $perms & 0000666;\n\t@ chmod( $new_file, $perms );\n\tclearstatcache();\n\n\t// Compute the URL\n\t$url = $upload['url'] . \"/$filename\";\n\n\t/** This filter is documented in wp-admin/includes/file.php */\n\treturn apply_filters( 'wp_handle_upload', array( 'file' => $new_file, 'url' => $url, 'type' => $wp_filetype['type'], 'error' => false ), 'sideload' );\n}\n\n/**\n * Retrieve the file type based on the extension name.\n *\n * @since 2.5.0\n *\n * @param string $ext The extension to search.\n * @return string|void The file type, example: audio, video, document, spreadsheet, etc.\n */\nfunction wp_ext2type( $ext ) {\n\t$ext = strtolower( $ext );\n\n\t$ext2type = wp_get_ext_types();\n\tforeach ( $ext2type as $type => $exts )\n\t\tif ( in_array( $ext, $exts ) )\n\t\t\treturn $type;\n}\n\n/**\n * Retrieve the file type from the file name.\n *\n * You can optionally define the mime array, if needed.\n *\n * @since 2.0.4\n *\n * @param string $filename File name or path.\n * @param array  $mimes    Optional. Key is the file extension with value as the mime type.\n * @return array Values with extension first and mime type.\n */\nfunction wp_check_filetype( $filename, $mimes = null ) {\n\tif ( empty($mimes) )\n\t\t$mimes = get_allowed_mime_types();\n\t$type = false;\n\t$ext = false;\n\n\tforeach ( $mimes as $ext_preg => $mime_match ) {\n\t\t$ext_preg = '!\\.(' . $ext_preg . ')$!i';\n\t\tif ( preg_match( $ext_preg, $filename, $ext_matches ) ) {\n\t\t\t$type = $mime_match;\n\t\t\t$ext = $ext_matches[1];\n\t\t\tbreak;\n\t\t}\n\t}\n\n\treturn compact( 'ext', 'type' );\n}\n\n/**\n * Attempt to determine the real file type of a file.\n *\n * If unable to, the file name extension will be used to determine type.\n *\n * If it's determined that the extension does not match the file's real type,\n * then the \"proper_filename\" value will be set with a proper filename and extension.\n *\n * Currently this function only supports renaming images validated via wp_get_image_mime().\n *\n * @since 3.0.0\n *\n * @param string $file     Full path to the file.\n * @param string $filename The name of the file (may differ from $file due to $file being\n *                         in a tmp directory).\n * @param array   $mimes   Optional. Key is the file extension with value as the mime type.\n * @return array Values for the extension, MIME, and either a corrected filename or false\n *               if original $filename is valid.\n */\nfunction wp_check_filetype_and_ext( $file, $filename, $mimes = null ) {\n\t$proper_filename = false;\n\n\t// Do basic extension validation and MIME mapping\n\t$wp_filetype = wp_check_filetype( $filename, $mimes );\n\t$ext = $wp_filetype['ext'];\n\t$type = $wp_filetype['type'];\n\n\t// We can't do any further validation without a file to work with\n\tif ( ! file_exists( $file ) ) {\n\t\treturn compact( 'ext', 'type', 'proper_filename' );\n\t}\n\n\t$real_mime = false;\n\n\t// Validate image types.\n\tif ( $type && 0 === strpos( $type, 'image/' ) ) {\n\n\t\t// Attempt to figure out what type of image it actually is\n\t\t$real_mime = wp_get_image_mime( $file );\n\n\t\tif ( $real_mime && $real_mime != $type ) {\n\t\t\t/**\n\t\t\t * Filters the list mapping image mime types to their respective extensions.\n\t\t\t *\n\t\t\t * @since 3.0.0\n\t\t\t *\n\t\t\t * @param  array $mime_to_ext Array of image mime types and their matching extensions.\n\t\t\t */\n\t\t\t$mime_to_ext = apply_filters( 'getimagesize_mimes_to_exts', array(\n\t\t\t\t'image/jpeg' => 'jpg',\n\t\t\t\t'image/png'  => 'png',\n\t\t\t\t'image/gif'  => 'gif',\n\t\t\t\t'image/bmp'  => 'bmp',\n\t\t\t\t'image/tiff' => 'tif',\n\t\t\t) );\n\n\t\t\t// Replace whatever is after the last period in the filename with the correct extension\n\t\t\tif ( ! empty( $mime_to_ext[ $real_mime ] ) ) {\n\t\t\t\t$filename_parts = explode( '.', $filename );\n\t\t\t\tarray_pop( $filename_parts );\n\t\t\t\t$filename_parts[] = $mime_to_ext[ $real_mime ];\n\t\t\t\t$new_filename = implode( '.', $filename_parts );\n\n\t\t\t\tif ( $new_filename != $filename ) {\n\t\t\t\t\t$proper_filename = $new_filename; // Mark that it changed\n\t\t\t\t}\n\t\t\t\t// Redefine the extension / MIME\n\t\t\t\t$wp_filetype = wp_check_filetype( $new_filename, $mimes );\n\t\t\t\t$ext = $wp_filetype['ext'];\n\t\t\t\t$type = $wp_filetype['type'];\n\t\t\t} else {\n\t\t\t\t// Reset $real_mime and try validating again.\n\t\t\t\t$real_mime = false;\n\t\t\t}\n\t\t}\n\t}\n\n\t// Validate files that didn't get validated during previous checks.\n\tif ( $type && ! $real_mime && extension_loaded( 'fileinfo' ) ) {\n\t\t$finfo = finfo_open( FILEINFO_MIME_TYPE );\n\t\t$real_mime = finfo_file( $finfo, $file );\n\t\tfinfo_close( $finfo );\n\n\t\t// fileinfo often misidentifies obscure files as one of these types\n\t\t$nonspecific_types = array(\n\t\t\t'application/octet-stream',\n\t\t\t'application/encrypted',\n\t\t\t'application/CDFV2-encrypted',\n\t\t\t'application/zip',\n\t\t);\n\n\t\t/*\n\t\t * If $real_mime doesn't match the content type we're expecting from the file's extension,\n\t\t * we need to do some additional vetting. Media types and those listed in $nonspecific_types are\n\t\t * allowed some leeway, but anything else must exactly match the real content type.\n\t\t */\n\t\tif ( in_array( $real_mime, $nonspecific_types, true ) ) {\n\t\t\t// File is a non-specific binary type. That's ok if it's a type that generally tends to be binary.\n\t\t\tif ( !in_array( substr( $type, 0, strcspn( $type, '/' ) ), array( 'application', 'video', 'audio' ) ) ) {\n\t\t\t\t$type = $ext = false;\n\t\t\t}\n\t\t} elseif ( 0 === strpos( $real_mime, 'video/' ) || 0 === strpos( $real_mime, 'audio/' ) ) {\n\t\t\t/*\n\t\t\t * For these types, only the major type must match the real value.\n\t\t\t * This means that common mismatches are forgiven: application/vnd.apple.numbers is often misidentified as application/zip,\n\t\t\t * and some media files are commonly named with the wrong extension (.mov instead of .mp4)\n\t\t\t */\n\n\t\t\tif ( substr( $real_mime, 0, strcspn( $real_mime, '/' ) ) !== substr( $type, 0, strcspn( $type, '/' ) ) ) {\n\t\t\t\t$type = $ext = false;\n\t\t\t}\n\t\t} else {\n\t\t\tif ( $type !== $real_mime ) {\n\t\t\t\t/*\n\t\t\t\t * Everything else including image/* and application/*: \n\t\t\t\t * If the real content type doesn't match the file extension, assume it's dangerous.\n\t\t\t\t */\n\t\t\t\t$type = $ext = false;\n\t\t\t}\n\n\t\t}\n\t}\n\n\t// The mime type must be allowed \n\tif ( $type ) {\n\t\t$allowed = get_allowed_mime_types();\n\n\t\tif ( ! in_array( $type, $allowed ) ) {\n\t\t\t$type = $ext = false;\n\t\t}\n\t}\n\n\t/**\n\t * Filters the \"real\" file type of the given file.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param array  $wp_check_filetype_and_ext File data array containing 'ext', 'type', and\n\t *                                          'proper_filename' keys.\n\t * @param string $file                      Full path to the file.\n\t * @param string $filename                  The name of the file (may differ from $file due to\n\t *                                          $file being in a tmp directory).\n\t * @param array  $mimes                     Key is the file extension with value as the mime type.\n\t */\n\treturn apply_filters( 'wp_check_filetype_and_ext', compact( 'ext', 'type', 'proper_filename' ), $file, $filename, $mimes );\n}\n\n/**\n * Returns the real mime type of an image file.\n *\n * This depends on exif_imagetype() or getimagesize() to determine real mime types.\n *\n * @since 4.7.1\n *\n * @param string $file Full path to the file.\n * @return string|false The actual mime type or false if the type cannot be determined.\n */\nfunction wp_get_image_mime( $file ) {\n\t/*\n\t * Use exif_imagetype() to check the mimetype if available or fall back to\n\t * getimagesize() if exif isn't avaialbe. If either function throws an Exception\n\t * we assume the file could not be validated.\n\t */\n\ttry {\n\t\tif ( is_callable( 'exif_imagetype' ) ) {\n\t\t\t$imagetype = exif_imagetype( $file );\n\t\t\t$mime = ( $imagetype ) ? image_type_to_mime_type( $imagetype ) : false;\n\t\t} elseif ( function_exists( 'getimagesize' ) ) {\n\t\t\t$imagesize = getimagesize( $file );\n\t\t\t$mime = ( isset( $imagesize['mime'] ) ) ? $imagesize['mime'] : false;\n\t\t} else {\n\t\t\t$mime = false;\n\t\t}\n\t} catch ( Exception $e ) {\n\t\t$mime = false;\n\t}\n\n\treturn $mime;\n}\n\n/**\n * Retrieve list of mime types and file extensions.\n *\n * @since 3.5.0\n * @since 4.2.0 Support was added for GIMP (xcf) files.\n *\n * @return array Array of mime types keyed by the file extension regex corresponding to those types.\n */\nfunction wp_get_mime_types() {\n\t/**\n\t * Filters the list of mime types and file extensions.\n\t *\n\t * This filter should be used to add, not remove, mime types. To remove\n\t * mime types, use the {@see 'upload_mimes'} filter.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param array $wp_get_mime_types Mime types keyed by the file extension regex\n\t *                                 corresponding to those types.\n\t */\n\treturn apply_filters( 'mime_types', array(\n\t// Image formats.\n\t'jpg|jpeg|jpe' => 'image/jpeg',\n\t'gif' => 'image/gif',\n\t'png' => 'image/png',\n\t'bmp' => 'image/bmp',\n\t'tiff|tif' => 'image/tiff',\n\t'ico' => 'image/x-icon',\n\t// Video formats.\n\t'asf|asx' => 'video/x-ms-asf',\n\t'wmv' => 'video/x-ms-wmv',\n\t'wmx' => 'video/x-ms-wmx',\n\t'wm' => 'video/x-ms-wm',\n\t'avi' => 'video/avi',\n\t'divx' => 'video/divx',\n\t'flv' => 'video/x-flv',\n\t'mov|qt' => 'video/quicktime',\n\t'mpeg|mpg|mpe' => 'video/mpeg',\n\t'mp4|m4v' => 'video/mp4',\n\t'ogv' => 'video/ogg',\n\t'webm' => 'video/webm',\n\t'mkv' => 'video/x-matroska',\n\t'3gp|3gpp' => 'video/3gpp', // Can also be audio\n\t'3g2|3gp2' => 'video/3gpp2', // Can also be audio\n\t// Text formats.\n\t'txt|asc|c|cc|h|srt' => 'text/plain',\n\t'csv' => 'text/csv',\n\t'tsv' => 'text/tab-separated-values',\n\t'ics' => 'text/calendar',\n\t'rtx' => 'text/richtext',\n\t'css' => 'text/css',\n\t'htm|html' => 'text/html',\n\t'vtt' => 'text/vtt',\n\t'dfxp' => 'application/ttaf+xml',\n\t// Audio formats.\n\t'mp3|m4a|m4b' => 'audio/mpeg',\n\t'aac' => 'audio/aac',\n\t'ra|ram' => 'audio/x-realaudio',\n\t'wav' => 'audio/wav',\n\t'ogg|oga' => 'audio/ogg',\n\t'flac' => 'audio/flac',\n\t'mid|midi' => 'audio/midi',\n\t'wma' => 'audio/x-ms-wma',\n\t'wax' => 'audio/x-ms-wax',\n\t'mka' => 'audio/x-matroska',\n\t// Misc application formats.\n\t'rtf' => 'application/rtf',\n\t'js' => 'application/javascript',\n\t'pdf' => 'application/pdf',\n\t'swf' => 'application/x-shockwave-flash',\n\t'class' => 'application/java',\n\t'tar' => 'application/x-tar',\n\t'zip' => 'application/zip',\n\t'gz|gzip' => 'application/x-gzip',\n\t'rar' => 'application/rar',\n\t'7z' => 'application/x-7z-compressed',\n\t'exe' => 'application/x-msdownload',\n\t'psd' => 'application/octet-stream',\n\t'xcf' => 'application/octet-stream',\n\t// MS Office formats.\n\t'doc' => 'application/msword',\n\t'pot|pps|ppt' => 'application/vnd.ms-powerpoint',\n\t'wri' => 'application/vnd.ms-write',\n\t'xla|xls|xlt|xlw' => 'application/vnd.ms-excel',\n\t'mdb' => 'application/vnd.ms-access',\n\t'mpp' => 'application/vnd.ms-project',\n\t'docx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.document',\n\t'docm' => 'application/vnd.ms-word.document.macroEnabled.12',\n\t'dotx' => 'application/vnd.openxmlformats-officedocument.wordprocessingml.template',\n\t'dotm' => 'application/vnd.ms-word.template.macroEnabled.12',\n\t'xlsx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.sheet',\n\t'xlsm' => 'application/vnd.ms-excel.sheet.macroEnabled.12',\n\t'xlsb' => 'application/vnd.ms-excel.sheet.binary.macroEnabled.12',\n\t'xltx' => 'application/vnd.openxmlformats-officedocument.spreadsheetml.template',\n\t'xltm' => 'application/vnd.ms-excel.template.macroEnabled.12',\n\t'xlam' => 'application/vnd.ms-excel.addin.macroEnabled.12',\n\t'pptx' => 'application/vnd.openxmlformats-officedocument.presentationml.presentation',\n\t'pptm' => 'application/vnd.ms-powerpoint.presentation.macroEnabled.12',\n\t'ppsx' => 'application/vnd.openxmlformats-officedocument.presentationml.slideshow',\n\t'ppsm' => 'application/vnd.ms-powerpoint.slideshow.macroEnabled.12',\n\t'potx' => 'application/vnd.openxmlformats-officedocument.presentationml.template',\n\t'potm' => 'application/vnd.ms-powerpoint.template.macroEnabled.12',\n\t'ppam' => 'application/vnd.ms-powerpoint.addin.macroEnabled.12',\n\t'sldx' => 'application/vnd.openxmlformats-officedocument.presentationml.slide',\n\t'sldm' => 'application/vnd.ms-powerpoint.slide.macroEnabled.12',\n\t'onetoc|onetoc2|onetmp|onepkg' => 'application/onenote',\n\t'oxps' => 'application/oxps',\n\t'xps' => 'application/vnd.ms-xpsdocument',\n\t// OpenOffice formats.\n\t'odt' => 'application/vnd.oasis.opendocument.text',\n\t'odp' => 'application/vnd.oasis.opendocument.presentation',\n\t'ods' => 'application/vnd.oasis.opendocument.spreadsheet',\n\t'odg' => 'application/vnd.oasis.opendocument.graphics',\n\t'odc' => 'application/vnd.oasis.opendocument.chart',\n\t'odb' => 'application/vnd.oasis.opendocument.database',\n\t'odf' => 'application/vnd.oasis.opendocument.formula',\n\t// WordPerfect formats.\n\t'wp|wpd' => 'application/wordperfect',\n\t// iWork formats.\n\t'key' => 'application/vnd.apple.keynote',\n\t'numbers' => 'application/vnd.apple.numbers',\n\t'pages' => 'application/vnd.apple.pages',\n\t) );\n}\n\n/**\n * Retrieves the list of common file extensions and their types.\n *\n * @since 4.6.0\n *\n * @return array Array of file extensions types keyed by the type of file.\n */\nfunction wp_get_ext_types() {\n\n\t/**\n\t * Filters file type based on the extension name.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @see wp_ext2type()\n\t *\n\t * @param array $ext2type Multi-dimensional array with extensions for a default set\n\t *                        of file types.\n\t */\n\treturn apply_filters( 'ext2type', array(\n\t\t'image'       => array( 'jpg', 'jpeg', 'jpe',  'gif',  'png',  'bmp',   'tif',  'tiff', 'ico' ),\n\t\t'audio'       => array( 'aac', 'ac3',  'aif',  'aiff', 'flac', 'm3a',  'm4a',   'm4b',  'mka',  'mp1',  'mp2',  'mp3', 'ogg', 'oga', 'ram', 'wav', 'wma' ),\n\t\t'video'       => array( '3g2',  '3gp', '3gpp', 'asf', 'avi',  'divx', 'dv',   'flv',  'm4v',   'mkv',  'mov',  'mp4',  'mpeg', 'mpg', 'mpv', 'ogm', 'ogv', 'qt',  'rm', 'vob', 'wmv' ),\n\t\t'document'    => array( 'doc', 'docx', 'docm', 'dotm', 'odt',  'pages', 'pdf',  'xps',  'oxps', 'rtf',  'wp', 'wpd', 'psd', 'xcf' ),\n\t\t'spreadsheet' => array( 'numbers',     'ods',  'xls',  'xlsx', 'xlsm',  'xlsb' ),\n\t\t'interactive' => array( 'swf', 'key',  'ppt',  'pptx', 'pptm', 'pps',   'ppsx', 'ppsm', 'sldx', 'sldm', 'odp' ),\n\t\t'text'        => array( 'asc', 'csv',  'tsv',  'txt' ),\n\t\t'archive'     => array( 'bz2', 'cab',  'dmg',  'gz',   'rar',  'sea',   'sit',  'sqx',  'tar',  'tgz',  'zip', '7z' ),\n\t\t'code'        => array( 'css', 'htm',  'html', 'php',  'js' ),\n\t) );\n}\n\n/**\n * Retrieve list of allowed mime types and file extensions.\n *\n * @since 2.8.6\n *\n * @param int|WP_User $user Optional. User to check. Defaults to current user.\n * @return array Array of mime types keyed by the file extension regex corresponding\n *               to those types.\n */\nfunction get_allowed_mime_types( $user = null ) {\n\t$t = wp_get_mime_types();\n\n\tunset( $t['swf'], $t['exe'] );\n\tif ( function_exists( 'current_user_can' ) )\n\t\t$unfiltered = $user ? user_can( $user, 'unfiltered_html' ) : current_user_can( 'unfiltered_html' );\n\n\tif ( empty( $unfiltered ) ) {\n\t\tunset( $t['htm|html'], $t['js'] );\n\t}\n\n\t/**\n\t * Filters list of allowed mime types and file extensions.\n\t *\n\t * @since 2.0.0\n\t *\n\t * @param array            $t    Mime types keyed by the file extension regex corresponding to\n\t *                               those types. 'swf' and 'exe' removed from full list. 'htm|html' also\n\t *                               removed depending on '$user' capabilities.\n\t * @param int|WP_User|null $user User ID, User object or null if not provided (indicates current user).\n\t */\n\treturn apply_filters( 'upload_mimes', $t, $user );\n}\n\n/**\n * Display \"Are You Sure\" message to confirm the action being taken.\n *\n * If the action has the nonce explain message, then it will be displayed\n * along with the \"Are you sure?\" message.\n *\n * @since 2.0.4\n *\n * @param string $action The nonce action.\n */\nfunction wp_nonce_ays( $action ) {\n\tif ( 'log-out' == $action ) {\n\t\t$html = sprintf(\n\t\t\t/* translators: %s: site name */\n\t\t\t__( 'You are attempting to log out of %s' ),\n\t\t\tget_bloginfo( 'name' )\n\t\t);\n\t\t$html .= '</p><p>';\n\t\t$redirect_to = isset( $_REQUEST['redirect_to'] ) ? $_REQUEST['redirect_to'] : '';\n\t\t$html .= sprintf(\n\t\t\t/* translators: %s: logout URL */\n\t\t\t__( 'Do you really want to <a href=\"%s\">log out</a>?' ),\n\t\t\twp_logout_url( $redirect_to )\n\t\t);\n\t} else {\n\t\t$html = __( 'The link you followed has expired.' );\n\t\tif ( wp_get_referer() ) {\n\t\t\t$html .= '</p><p>';\n\t\t\t$html .= sprintf( '<a href=\"%s\">%s</a>',\n\t\t\t\tesc_url( remove_query_arg( 'updated', wp_get_referer() ) ),\n\t\t\t\t__( 'Please try again.' )\n\t\t\t);\n\t\t}\n\t}\n\n\twp_die( $html, __( 'Something went wrong.' ), 403 );\n}\n\n/**\n * Kill WordPress execution and display HTML message with error message.\n *\n * This function complements the `die()` PHP function. The difference is that\n * HTML will be displayed to the user. It is recommended to use this function\n * only when the execution should not continue any further. It is not recommended\n * to call this function very often, and try to handle as many errors as possible\n * silently or more gracefully.\n *\n * As a shorthand, the desired HTTP response code may be passed as an integer to\n * the `$title` parameter (the default title would apply) or the `$args` parameter.\n *\n * @since 2.0.4\n * @since 4.1.0 The `$title` and `$args` parameters were changed to optionally accept\n *              an integer to be used as the response code.\n *\n * @param string|WP_Error  $message Optional. Error message. If this is a WP_Error object,\n *                                  and not an Ajax or XML-RPC request, the error's messages are used.\n *                                  Default empty.\n * @param string|int       $title   Optional. Error title. If `$message` is a `WP_Error` object,\n *                                  error data with the key 'title' may be used to specify the title.\n *                                  If `$title` is an integer, then it is treated as the response\n *                                  code. Default empty.\n * @param string|array|int $args {\n *     Optional. Arguments to control behavior. If `$args` is an integer, then it is treated\n *     as the response code. Default empty array.\n *\n *     @type int    $response       The HTTP response code. Default 200 for Ajax requests, 500 otherwise.\n *     @type bool   $back_link      Whether to include a link to go back. Default false.\n *     @type string $text_direction The text direction. This is only useful internally, when WordPress\n *                                  is still loading and the site's locale is not set up yet. Accepts 'rtl'.\n *                                  Default is the value of is_rtl().\n * }\n */\nfunction wp_die( $message = '', $title = '', $args = array() ) {\n\n\tif ( is_int( $args ) ) {\n\t\t$args = array( 'response' => $args );\n\t} elseif ( is_int( $title ) ) {\n\t\t$args  = array( 'response' => $title );\n\t\t$title = '';\n\t}\n\n\tif ( wp_doing_ajax() ) {\n\t\t/**\n\t\t * Filters the callback for killing WordPress execution for Ajax requests.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param callable $function Callback function name.\n\t\t */\n\t\t$function = apply_filters( 'wp_die_ajax_handler', '_ajax_wp_die_handler' );\n\t} elseif ( defined( 'XMLRPC_REQUEST' ) && XMLRPC_REQUEST ) {\n\t\t/**\n\t\t * Filters the callback for killing WordPress execution for XML-RPC requests.\n\t\t *\n\t\t * @since 3.4.0\n\t\t *\n\t\t * @param callable $function Callback function name.\n\t\t */\n\t\t$function = apply_filters( 'wp_die_xmlrpc_handler', '_xmlrpc_wp_die_handler' );\n\t} else {\n\t\t/**\n\t\t * Filters the callback for killing WordPress execution for all non-Ajax, non-XML-RPC requests.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param callable $function Callback function name.\n\t\t */\n\t\t$function = apply_filters( 'wp_die_handler', '_default_wp_die_handler' );\n\t}\n\n\tcall_user_func( $function, $message, $title, $args );\n}\n\n/**\n * Kills WordPress execution and display HTML message with error message.\n *\n * This is the default handler for wp_die if you want a custom one for your\n * site then you can overload using the {@see 'wp_die_handler'} filter in wp_die().\n *\n * @since 3.0.0\n * @access private\n *\n * @param string|WP_Error $message Error message or WP_Error object.\n * @param string          $title   Optional. Error title. Default empty.\n * @param string|array    $args    Optional. Arguments to control behavior. Default empty array.\n */\nfunction _default_wp_die_handler( $message, $title = '', $args = array() ) {\n\t$defaults = array( 'response' => 500 );\n\t$r = wp_parse_args($args, $defaults);\n\n\t$have_gettext = function_exists('__');\n\n\tif ( function_exists( 'is_wp_error' ) && is_wp_error( $message ) ) {\n\t\tif ( empty( $title ) ) {\n\t\t\t$error_data = $message->get_error_data();\n\t\t\tif ( is_array( $error_data ) && isset( $error_data['title'] ) )\n\t\t\t\t$title = $error_data['title'];\n\t\t}\n\t\t$errors = $message->get_error_messages();\n\t\tswitch ( count( $errors ) ) {\n\t\tcase 0 :\n\t\t\t$message = '';\n\t\t\tbreak;\n\t\tcase 1 :\n\t\t\t$message = \"<p>{$errors[0]}</p>\";\n\t\t\tbreak;\n\t\tdefault :\n\t\t\t$message = \"<ul>\\n\\t\\t<li>\" . join( \"</li>\\n\\t\\t<li>\", $errors ) . \"</li>\\n\\t</ul>\";\n\t\t\tbreak;\n\t\t}\n\t} elseif ( is_string( $message ) ) {\n\t\t$message = \"<p>$message</p>\";\n\t}\n\n\tif ( isset( $r['back_link'] ) && $r['back_link'] ) {\n\t\t$back_text = $have_gettext? __('&laquo; Back') : '&laquo; Back';\n\t\t$message .= \"\\n<p><a href='javascript:history.back()'>$back_text</a></p>\";\n\t}\n\n\tif ( ! did_action( 'admin_head' ) ) :\n\t\tif ( !headers_sent() ) {\n\t\t\tstatus_header( $r['response'] );\n\t\t\tnocache_headers();\n\t\t\theader( 'Content-Type: text/html; charset=utf-8' );\n\t\t}\n\n\t\tif ( empty($title) )\n\t\t\t$title = $have_gettext ? __('WordPress &rsaquo; Error') : 'WordPress &rsaquo; Error';\n\n\t\t$text_direction = 'ltr';\n\t\tif ( isset($r['text_direction']) && 'rtl' == $r['text_direction'] )\n\t\t\t$text_direction = 'rtl';\n\t\telseif ( function_exists( 'is_rtl' ) && is_rtl() )\n\t\t\t$text_direction = 'rtl';\n?>\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\" <?php if ( function_exists( 'language_attributes' ) && function_exists( 'is_rtl' ) ) language_attributes(); else echo \"dir='$text_direction'\"; ?>>\n<head>\n\t<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<meta name=\"viewport\" content=\"width=device-width\">\n\t<?php\n\tif ( function_exists( 'wp_no_robots' ) ) {\n\t\twp_no_robots();\n\t}\n\t?>\n\t<title><?php echo $title ?></title>\n\t<style type=\"text/css\">\n\t\thtml {\n\t\t\tbackground: #f1f1f1;\n\t\t}\n\t\tbody {\n\t\t\tbackground: #fff;\n\t\t\tcolor: #444;\n\t\t\tfont-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Oxygen-Sans, Ubuntu, Cantarell, \"Helvetica Neue\", sans-serif;\n\t\t\tmargin: 2em auto;\n\t\t\tpadding: 1em 2em;\n\t\t\tmax-width: 700px;\n\t\t\t-webkit-box-shadow: 0 1px 3px rgba(0,0,0,0.13);\n\t\t\tbox-shadow: 0 1px 3px rgba(0,0,0,0.13);\n\t\t}\n\t\th1 {\n\t\t\tborder-bottom: 1px solid #dadada;\n\t\t\tclear: both;\n\t\t\tcolor: #666;\n\t\t\tfont-size: 24px;\n\t\t\tmargin: 30px 0 0 0;\n\t\t\tpadding: 0;\n\t\t\tpadding-bottom: 7px;\n\t\t}\n\t\t#error-page {\n\t\t\tmargin-top: 50px;\n\t\t}\n\t\t#error-page p {\n\t\t\tfont-size: 14px;\n\t\t\tline-height: 1.5;\n\t\t\tmargin: 25px 0 20px;\n\t\t}\n\t\t#error-page code {\n\t\t\tfont-family: Consolas, Monaco, monospace;\n\t\t}\n\t\tul li {\n\t\t\tmargin-bottom: 10px;\n\t\t\tfont-size: 14px ;\n\t\t}\n\t\ta {\n\t\t\tcolor: #0073aa;\n\t\t}\n\t\ta:hover,\n\t\ta:active {\n\t\t\tcolor: #00a0d2;\n\t\t}\n\t\ta:focus {\n\t\t\tcolor: #124964;\n\t\t    -webkit-box-shadow:\n\t\t    \t0 0 0 1px #5b9dd9,\n\t\t\t\t0 0 2px 1px rgba(30, 140, 190, .8);\n\t\t    box-shadow:\n\t\t    \t0 0 0 1px #5b9dd9,\n\t\t\t\t0 0 2px 1px rgba(30, 140, 190, .8);\n\t\t\toutline: none;\n\t\t}\n\t\t.button {\n\t\t\tbackground: #f7f7f7;\n\t\t\tborder: 1px solid #ccc;\n\t\t\tcolor: #555;\n\t\t\tdisplay: inline-block;\n\t\t\ttext-decoration: none;\n\t\t\tfont-size: 13px;\n\t\t\tline-height: 26px;\n\t\t\theight: 28px;\n\t\t\tmargin: 0;\n\t\t\tpadding: 0 10px 1px;\n\t\t\tcursor: pointer;\n\t\t\t-webkit-border-radius: 3px;\n\t\t\t-webkit-appearance: none;\n\t\t\tborder-radius: 3px;\n\t\t\twhite-space: nowrap;\n\t\t\t-webkit-box-sizing: border-box;\n\t\t\t-moz-box-sizing:    border-box;\n\t\t\tbox-sizing:         border-box;\n\n\t\t\t-webkit-box-shadow: 0 1px 0 #ccc;\n\t\t\tbox-shadow: 0 1px 0 #ccc;\n\t\t \tvertical-align: top;\n\t\t}\n\n\t\t.button.button-large {\n\t\t\theight: 30px;\n\t\t\tline-height: 28px;\n\t\t\tpadding: 0 12px 2px;\n\t\t}\n\n\t\t.button:hover,\n\t\t.button:focus {\n\t\t\tbackground: #fafafa;\n\t\t\tborder-color: #999;\n\t\t\tcolor: #23282d;\n\t\t}\n\n\t\t.button:focus  {\n\t\t\tborder-color: #5b9dd9;\n\t\t\t-webkit-box-shadow: 0 0 3px rgba( 0, 115, 170, .8 );\n\t\t\tbox-shadow: 0 0 3px rgba( 0, 115, 170, .8 );\n\t\t\toutline: none;\n\t\t}\n\n\t\t.button:active {\n\t\t\tbackground: #eee;\n\t\t\tborder-color: #999;\n\t\t \t-webkit-box-shadow: inset 0 2px 5px -3px rgba( 0, 0, 0, 0.5 );\n\t\t \tbox-shadow: inset 0 2px 5px -3px rgba( 0, 0, 0, 0.5 );\n\t\t \t-webkit-transform: translateY(1px);\n\t\t \t-ms-transform: translateY(1px);\n\t\t \ttransform: translateY(1px);\n\t\t}\n\n\t\t<?php\n\t\tif ( 'rtl' == $text_direction ) {\n\t\t\techo 'body { font-family: Tahoma, Arial; }';\n\t\t}\n\t\t?>\n\t</style>\n</head>\n<body id=\"error-page\">\n<?php endif; // ! did_action( 'admin_head' ) ?>\n\t<?php echo $message; ?>\n</body>\n</html>\n<?php\n\tdie();\n}\n\n/**\n * Kill WordPress execution and display XML message with error message.\n *\n * This is the handler for wp_die when processing XMLRPC requests.\n *\n * @since 3.2.0\n * @access private\n *\n * @global wp_xmlrpc_server $wp_xmlrpc_server\n *\n * @param string       $message Error message.\n * @param string       $title   Optional. Error title. Default empty.\n * @param string|array $args    Optional. Arguments to control behavior. Default empty array.\n */\nfunction _xmlrpc_wp_die_handler( $message, $title = '', $args = array() ) {\n\tglobal $wp_xmlrpc_server;\n\t$defaults = array( 'response' => 500 );\n\n\t$r = wp_parse_args($args, $defaults);\n\n\tif ( $wp_xmlrpc_server ) {\n\t\t$error = new IXR_Error( $r['response'] , $message);\n\t\t$wp_xmlrpc_server->output( $error->getXml() );\n\t}\n\tdie();\n}\n\n/**\n * Kill WordPress ajax execution.\n *\n * This is the handler for wp_die when processing Ajax requests.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string       $message Error message.\n * @param string       $title   Optional. Error title (unused). Default empty.\n * @param string|array $args    Optional. Arguments to control behavior. Default empty array.\n */\nfunction _ajax_wp_die_handler( $message, $title = '', $args = array() ) {\n\t$defaults = array(\n\t\t'response' => 200,\n\t);\n\t$r = wp_parse_args( $args, $defaults );\n\n\tif ( ! headers_sent() && null !== $r['response'] ) {\n\t\tstatus_header( $r['response'] );\n\t}\n\n\tif ( is_scalar( $message ) )\n\t\tdie( (string) $message );\n\tdie( '0' );\n}\n\n/**\n * Kill WordPress execution.\n *\n * This is the handler for wp_die when processing APP requests.\n *\n * @since 3.4.0\n * @access private\n *\n * @param string $message Optional. Response to print. Default empty.\n */\nfunction _scalar_wp_die_handler( $message = '' ) {\n\tif ( is_scalar( $message ) )\n\t\tdie( (string) $message );\n\tdie();\n}\n\n/**\n * Encode a variable into JSON, with some sanity checks.\n *\n * @since 4.1.0\n *\n * @param mixed $data    Variable (usually an array or object) to encode as JSON.\n * @param int   $options Optional. Options to be passed to json_encode(). Default 0.\n * @param int   $depth   Optional. Maximum depth to walk through $data. Must be\n *                       greater than 0. Default 512.\n * @return string|false The JSON encoded string, or false if it cannot be encoded.\n */\nfunction wp_json_encode( $data, $options = 0, $depth = 512 ) {\n\t/*\n\t * json_encode() has had extra params added over the years.\n\t * $options was added in 5.3, and $depth in 5.5.\n\t * We need to make sure we call it with the correct arguments.\n\t */\n\tif ( version_compare( PHP_VERSION, '5.5', '>=' ) ) {\n\t\t$args = array( $data, $options, $depth );\n\t} elseif ( version_compare( PHP_VERSION, '5.3', '>=' ) ) {\n\t\t$args = array( $data, $options );\n\t} else {\n\t\t$args = array( $data );\n\t}\n\n\t// Prepare the data for JSON serialization.\n\t$args[0] = _wp_json_prepare_data( $data );\n\n\t$json = @call_user_func_array( 'json_encode', $args );\n\n\t// If json_encode() was successful, no need to do more sanity checking.\n\t// ... unless we're in an old version of PHP, and json_encode() returned\n\t// a string containing 'null'. Then we need to do more sanity checking.\n\tif ( false !== $json && ( version_compare( PHP_VERSION, '5.5', '>=' ) || false === strpos( $json, 'null' ) ) )  {\n\t\treturn $json;\n\t}\n\n\ttry {\n\t\t$args[0] = _wp_json_sanity_check( $data, $depth );\n\t} catch ( Exception $e ) {\n\t\treturn false;\n\t}\n\n\treturn call_user_func_array( 'json_encode', $args );\n}\n\n/**\n * Perform sanity checks on data that shall be encoded to JSON.\n *\n * @ignore\n * @since 4.1.0\n * @access private\n *\n * @see wp_json_encode()\n *\n * @param mixed $data  Variable (usually an array or object) to encode as JSON.\n * @param int   $depth Maximum depth to walk through $data. Must be greater than 0.\n * @return mixed The sanitized data that shall be encoded to JSON.\n */\nfunction _wp_json_sanity_check( $data, $depth ) {\n\tif ( $depth < 0 ) {\n\t\tthrow new Exception( 'Reached depth limit' );\n\t}\n\n\tif ( is_array( $data ) ) {\n\t\t$output = array();\n\t\tforeach ( $data as $id => $el ) {\n\t\t\t// Don't forget to sanitize the ID!\n\t\t\tif ( is_string( $id ) ) {\n\t\t\t\t$clean_id = _wp_json_convert_string( $id );\n\t\t\t} else {\n\t\t\t\t$clean_id = $id;\n\t\t\t}\n\n\t\t\t// Check the element type, so that we're only recursing if we really have to.\n\t\t\tif ( is_array( $el ) || is_object( $el ) ) {\n\t\t\t\t$output[ $clean_id ] = _wp_json_sanity_check( $el, $depth - 1 );\n\t\t\t} elseif ( is_string( $el ) ) {\n\t\t\t\t$output[ $clean_id ] = _wp_json_convert_string( $el );\n\t\t\t} else {\n\t\t\t\t$output[ $clean_id ] = $el;\n\t\t\t}\n\t\t}\n\t} elseif ( is_object( $data ) ) {\n\t\t$output = new stdClass;\n\t\tforeach ( $data as $id => $el ) {\n\t\t\tif ( is_string( $id ) ) {\n\t\t\t\t$clean_id = _wp_json_convert_string( $id );\n\t\t\t} else {\n\t\t\t\t$clean_id = $id;\n\t\t\t}\n\n\t\t\tif ( is_array( $el ) || is_object( $el ) ) {\n\t\t\t\t$output->$clean_id = _wp_json_sanity_check( $el, $depth - 1 );\n\t\t\t} elseif ( is_string( $el ) ) {\n\t\t\t\t$output->$clean_id = _wp_json_convert_string( $el );\n\t\t\t} else {\n\t\t\t\t$output->$clean_id = $el;\n\t\t\t}\n\t\t}\n\t} elseif ( is_string( $data ) ) {\n\t\treturn _wp_json_convert_string( $data );\n\t} else {\n\t\treturn $data;\n\t}\n\n\treturn $output;\n}\n\n/**\n * Convert a string to UTF-8, so that it can be safely encoded to JSON.\n *\n * @ignore\n * @since 4.1.0\n * @access private\n *\n * @see _wp_json_sanity_check()\n *\n * @staticvar bool $use_mb\n *\n * @param string $string The string which is to be converted.\n * @return string The checked string.\n */\nfunction _wp_json_convert_string( $string ) {\n\tstatic $use_mb = null;\n\tif ( is_null( $use_mb ) ) {\n\t\t$use_mb = function_exists( 'mb_convert_encoding' );\n\t}\n\n\tif ( $use_mb ) {\n\t\t$encoding = mb_detect_encoding( $string, mb_detect_order(), true );\n\t\tif ( $encoding ) {\n\t\t\treturn mb_convert_encoding( $string, 'UTF-8', $encoding );\n\t\t} else {\n\t\t\treturn mb_convert_encoding( $string, 'UTF-8', 'UTF-8' );\n\t\t}\n\t} else {\n\t\treturn wp_check_invalid_utf8( $string, true );\n\t}\n}\n\n/**\n * Prepares response data to be serialized to JSON.\n *\n * This supports the JsonSerializable interface for PHP 5.2-5.3 as well.\n *\n * @ignore\n * @since 4.4.0\n * @access private\n *\n * @param mixed $data Native representation.\n * @return bool|int|float|null|string|array Data ready for `json_encode()`.\n */\nfunction _wp_json_prepare_data( $data ) {\n\tif ( ! defined( 'WP_JSON_SERIALIZE_COMPATIBLE' ) || WP_JSON_SERIALIZE_COMPATIBLE === false ) {\n\t\treturn $data;\n\t}\n\n\tswitch ( gettype( $data ) ) {\n\t\tcase 'boolean':\n\t\tcase 'integer':\n\t\tcase 'double':\n\t\tcase 'string':\n\t\tcase 'NULL':\n\t\t\t// These values can be passed through.\n\t\t\treturn $data;\n\n\t\tcase 'array':\n\t\t\t// Arrays must be mapped in case they also return objects.\n\t\t\treturn array_map( '_wp_json_prepare_data', $data );\n\n\t\tcase 'object':\n\t\t\t// If this is an incomplete object (__PHP_Incomplete_Class), bail.\n\t\t\tif ( ! is_object( $data ) ) {\n\t\t\t\treturn null;\n\t\t\t}\n\n\t\t\tif ( $data instanceof JsonSerializable ) {\n\t\t\t\t$data = $data->jsonSerialize();\n\t\t\t} else {\n\t\t\t\t$data = get_object_vars( $data );\n\t\t\t}\n\n\t\t\t// Now, pass the array (or whatever was returned from jsonSerialize through).\n\t\t\treturn _wp_json_prepare_data( $data );\n\n\t\tdefault:\n\t\t\treturn null;\n\t}\n}\n\n/**\n * Send a JSON response back to an Ajax request.\n *\n * @since 3.5.0\n * @since 4.7.0 The `$status_code` parameter was added.\n *\n * @param mixed $response    Variable (usually an array or object) to encode as JSON,\n *                           then print and die.\n * @param int   $status_code The HTTP status code to output.\n */\nfunction wp_send_json( $response, $status_code = null ) {\n\t@header( 'Content-Type: application/json; charset=' . get_option( 'blog_charset' ) );\n\tif ( null !== $status_code ) {\n\t\tstatus_header( $status_code );\n\t}\n\techo wp_json_encode( $response );\n\n\tif ( wp_doing_ajax() ) {\n\t\twp_die( '', '', array(\n\t\t\t'response' => null,\n\t\t) );\n\t} else {\n\t\tdie;\n\t}\n}\n\n/**\n * Send a JSON response back to an Ajax request, indicating success.\n *\n * @since 3.5.0\n * @since 4.7.0 The `$status_code` parameter was added.\n *\n * @param mixed $data        Data to encode as JSON, then print and die.\n * @param int   $status_code The HTTP status code to output.\n */\nfunction wp_send_json_success( $data = null, $status_code = null ) {\n\t$response = array( 'success' => true );\n\n\tif ( isset( $data ) )\n\t\t$response['data'] = $data;\n\n\twp_send_json( $response, $status_code );\n}\n\n/**\n * Send a JSON response back to an Ajax request, indicating failure.\n *\n * If the `$data` parameter is a WP_Error object, the errors\n * within the object are processed and output as an array of error\n * codes and corresponding messages. All other types are output\n * without further processing.\n *\n * @since 3.5.0\n * @since 4.1.0 The `$data` parameter is now processed if a WP_Error object is passed in.\n * @since 4.7.0 The `$status_code` parameter was added.\n *\n * @param mixed $data        Data to encode as JSON, then print and die.\n * @param int   $status_code The HTTP status code to output.\n */\nfunction wp_send_json_error( $data = null, $status_code = null ) {\n\t$response = array( 'success' => false );\n\n\tif ( isset( $data ) ) {\n\t\tif ( is_wp_error( $data ) ) {\n\t\t\t$result = array();\n\t\t\tforeach ( $data->errors as $code => $messages ) {\n\t\t\t\tforeach ( $messages as $message ) {\n\t\t\t\t\t$result[] = array( 'code' => $code, 'message' => $message );\n\t\t\t\t}\n\t\t\t}\n\n\t\t\t$response['data'] = $result;\n\t\t} else {\n\t\t\t$response['data'] = $data;\n\t\t}\n\t}\n\n\twp_send_json( $response, $status_code );\n}\n\n/**\n * Checks that a JSONP callback is a valid JavaScript callback.\n *\n * Only allows alphanumeric characters and the dot character in callback\n * function names. This helps to mitigate XSS attacks caused by directly\n * outputting user input.\n *\n * @since 4.6.0\n *\n * @param string $callback Supplied JSONP callback function.\n * @return bool True if valid callback, otherwise false.\n */\nfunction wp_check_jsonp_callback( $callback ) {\n\tif ( ! is_string( $callback ) ) {\n\t\treturn false;\n\t}\n\n\tpreg_replace( '/[^\\w\\.]/', '', $callback, -1, $illegal_char_count );\n\n\treturn 0 === $illegal_char_count;\n}\n\n/**\n * Retrieve the WordPress home page URL.\n *\n * If the constant named 'WP_HOME' exists, then it will be used and returned\n * by the function. This can be used to counter the redirection on your local\n * development environment.\n *\n * @since 2.2.0\n * @access private\n *\n * @see WP_HOME\n *\n * @param string $url URL for the home location.\n * @return string Homepage location.\n */\nfunction _config_wp_home( $url = '' ) {\n\tif ( defined( 'WP_HOME' ) )\n\t\treturn untrailingslashit( WP_HOME );\n\treturn $url;\n}\n\n/**\n * Retrieve the WordPress site URL.\n *\n * If the constant named 'WP_SITEURL' is defined, then the value in that\n * constant will always be returned. This can be used for debugging a site\n * on your localhost while not having to change the database to your URL.\n *\n * @since 2.2.0\n * @access private\n *\n * @see WP_SITEURL\n *\n * @param string $url URL to set the WordPress site location.\n * @return string The WordPress Site URL.\n */\nfunction _config_wp_siteurl( $url = '' ) {\n\tif ( defined( 'WP_SITEURL' ) )\n\t\treturn untrailingslashit( WP_SITEURL );\n\treturn $url;\n}\n\n/**\n * Delete the fresh site option.\n *\n * @since 4.7.0\n * @access private\n */\nfunction _delete_option_fresh_site() {\n\tupdate_option( 'fresh_site', '0' );\n}\n\n/**\n * Set the localized direction for MCE plugin.\n *\n * Will only set the direction to 'rtl', if the WordPress locale has\n * the text direction set to 'rtl'.\n *\n * Fills in the 'directionality' setting, enables the 'directionality'\n * plugin, and adds the 'ltr' button to 'toolbar1', formerly\n * 'theme_advanced_buttons1' array keys. These keys are then returned\n * in the $mce_init (TinyMCE settings) array.\n *\n * @since 2.1.0\n * @access private\n *\n * @param array $mce_init MCE settings array.\n * @return array Direction set for 'rtl', if needed by locale.\n */\nfunction _mce_set_direction( $mce_init ) {\n\tif ( is_rtl() ) {\n\t\t$mce_init['directionality'] = 'rtl';\n\t\t$mce_init['rtl_ui'] = true;\n\n\t\tif ( ! empty( $mce_init['plugins'] ) && strpos( $mce_init['plugins'], 'directionality' ) === false ) {\n\t\t\t$mce_init['plugins'] .= ',directionality';\n\t\t}\n\n\t\tif ( ! empty( $mce_init['toolbar1'] ) && ! preg_match( '/\\bltr\\b/', $mce_init['toolbar1'] ) ) {\n\t\t\t$mce_init['toolbar1'] .= ',ltr';\n\t\t}\n\t}\n\n\treturn $mce_init;\n}\n\n\n/**\n * Convert smiley code to the icon graphic file equivalent.\n *\n * You can turn off smilies, by going to the write setting screen and unchecking\n * the box, or by setting 'use_smilies' option to false or removing the option.\n *\n * Plugins may override the default smiley list by setting the $wpsmiliestrans\n * to an array, with the key the code the blogger types in and the value the\n * image file.\n *\n * The $wp_smiliessearch global is for the regular expression and is set each\n * time the function is called.\n *\n * The full list of smilies can be found in the function and won't be listed in\n * the description. Probably should create a Codex page for it, so that it is\n * available.\n *\n * @global array $wpsmiliestrans\n * @global array $wp_smiliessearch\n *\n * @since 2.2.0\n */\nfunction smilies_init() {\n\tglobal $wpsmiliestrans, $wp_smiliessearch;\n\n\t// don't bother setting up smilies if they are disabled\n\tif ( !get_option( 'use_smilies' ) )\n\t\treturn;\n\n\tif ( !isset( $wpsmiliestrans ) ) {\n\t\t$wpsmiliestrans = array(\n\t\t':mrgreen:' => 'mrgreen.png',\n\t\t':neutral:' => \"\\xf0\\x9f\\x98\\x90\",\n\t\t':twisted:' => \"\\xf0\\x9f\\x98\\x88\",\n\t\t  ':arrow:' => \"\\xe2\\x9e\\xa1\",\n\t\t  ':shock:' => \"\\xf0\\x9f\\x98\\xaf\",\n\t\t  ':smile:' => \"\\xf0\\x9f\\x99\\x82\",\n\t\t    ':???:' => \"\\xf0\\x9f\\x98\\x95\",\n\t\t   ':cool:' => \"\\xf0\\x9f\\x98\\x8e\",\n\t\t   ':evil:' => \"\\xf0\\x9f\\x91\\xbf\",\n\t\t   ':grin:' => \"\\xf0\\x9f\\x98\\x80\",\n\t\t   ':idea:' => \"\\xf0\\x9f\\x92\\xa1\",\n\t\t   ':oops:' => \"\\xf0\\x9f\\x98\\xb3\",\n\t\t   ':razz:' => \"\\xf0\\x9f\\x98\\x9b\",\n\t\t   ':roll:' => \"\\xf0\\x9f\\x99\\x84\",\n\t\t   ':wink:' => \"\\xf0\\x9f\\x98\\x89\",\n\t\t    ':cry:' => \"\\xf0\\x9f\\x98\\xa5\",\n\t\t    ':eek:' => \"\\xf0\\x9f\\x98\\xae\",\n\t\t    ':lol:' => \"\\xf0\\x9f\\x98\\x86\",\n\t\t    ':mad:' => \"\\xf0\\x9f\\x98\\xa1\",\n\t\t    ':sad:' => \"\\xf0\\x9f\\x99\\x81\",\n\t\t      '8-)' => \"\\xf0\\x9f\\x98\\x8e\",\n\t\t      '8-O' => \"\\xf0\\x9f\\x98\\xaf\",\n\t\t      ':-(' => \"\\xf0\\x9f\\x99\\x81\",\n\t\t      ':-)' => \"\\xf0\\x9f\\x99\\x82\",\n\t\t      ':-?' => \"\\xf0\\x9f\\x98\\x95\",\n\t\t      ':-D' => \"\\xf0\\x9f\\x98\\x80\",\n\t\t      ':-P' => \"\\xf0\\x9f\\x98\\x9b\",\n\t\t      ':-o' => \"\\xf0\\x9f\\x98\\xae\",\n\t\t      ':-x' => \"\\xf0\\x9f\\x98\\xa1\",\n\t\t      ':-|' => \"\\xf0\\x9f\\x98\\x90\",\n\t\t      ';-)' => \"\\xf0\\x9f\\x98\\x89\",\n\t\t// This one transformation breaks regular text with frequency.\n\t\t//     '8)' => \"\\xf0\\x9f\\x98\\x8e\",\n\t\t       '8O' => \"\\xf0\\x9f\\x98\\xaf\",\n\t\t       ':(' => \"\\xf0\\x9f\\x99\\x81\",\n\t\t       ':)' => \"\\xf0\\x9f\\x99\\x82\",\n\t\t       ':?' => \"\\xf0\\x9f\\x98\\x95\",\n\t\t       ':D' => \"\\xf0\\x9f\\x98\\x80\",\n\t\t       ':P' => \"\\xf0\\x9f\\x98\\x9b\",\n\t\t       ':o' => \"\\xf0\\x9f\\x98\\xae\",\n\t\t       ':x' => \"\\xf0\\x9f\\x98\\xa1\",\n\t\t       ':|' => \"\\xf0\\x9f\\x98\\x90\",\n\t\t       ';)' => \"\\xf0\\x9f\\x98\\x89\",\n\t\t      ':!:' => \"\\xe2\\x9d\\x97\",\n\t\t      ':?:' => \"\\xe2\\x9d\\x93\",\n\t\t);\n\t}\n\n\t/**\n\t * Filters all the smilies.\n\t *\n\t * This filter must be added before `smilies_init` is run, as\n\t * it is normally only run once to setup the smilies regex.\n\t *\n\t * @since 4.7.0\n\t *\n\t * @param array $wpsmiliestrans List of the smilies.\n\t */\n\t$wpsmiliestrans = apply_filters('smilies', $wpsmiliestrans);\n\n\tif (count($wpsmiliestrans) == 0) {\n\t\treturn;\n\t}\n\n\t/*\n\t * NOTE: we sort the smilies in reverse key order. This is to make sure\n\t * we match the longest possible smilie (:???: vs :?) as the regular\n\t * expression used below is first-match\n\t */\n\tkrsort($wpsmiliestrans);\n\n\t$spaces = wp_spaces_regexp();\n\n\t// Begin first \"subpattern\"\n\t$wp_smiliessearch = '/(?<=' . $spaces . '|^)';\n\n\t$subchar = '';\n\tforeach ( (array) $wpsmiliestrans as $smiley => $img ) {\n\t\t$firstchar = substr($smiley, 0, 1);\n\t\t$rest = substr($smiley, 1);\n\n\t\t// new subpattern?\n\t\tif ($firstchar != $subchar) {\n\t\t\tif ($subchar != '') {\n\t\t\t\t$wp_smiliessearch .= ')(?=' . $spaces . '|$)';  // End previous \"subpattern\"\n\t\t\t\t$wp_smiliessearch .= '|(?<=' . $spaces . '|^)'; // Begin another \"subpattern\"\n\t\t\t}\n\t\t\t$subchar = $firstchar;\n\t\t\t$wp_smiliessearch .= preg_quote($firstchar, '/') . '(?:';\n\t\t} else {\n\t\t\t$wp_smiliessearch .= '|';\n\t\t}\n\t\t$wp_smiliessearch .= preg_quote($rest, '/');\n\t}\n\n\t$wp_smiliessearch .= ')(?=' . $spaces . '|$)/m';\n\n}\n\n/**\n * Merge user defined arguments into defaults array.\n *\n * This function is used throughout WordPress to allow for both string or array\n * to be merged into another array.\n *\n * @since 2.2.0\n * @since 2.3.0 `$args` can now also be an object.\n *\n * @param string|array|object $args     Value to merge with $defaults.\n * @param array               $defaults Optional. Array that serves as the defaults. Default empty.\n * @return array Merged user defined values with defaults.\n */\nfunction wp_parse_args( $args, $defaults = '' ) {\n\tif ( is_object( $args ) )\n\t\t$r = get_object_vars( $args );\n\telseif ( is_array( $args ) )\n\t\t$r =& $args;\n\telse\n\t\twp_parse_str( $args, $r );\n\n\tif ( is_array( $defaults ) )\n\t\treturn array_merge( $defaults, $r );\n\treturn $r;\n}\n\n/**\n * Clean up an array, comma- or space-separated list of IDs.\n *\n * @since 3.0.0\n *\n * @param array|string $list List of ids.\n * @return array Sanitized array of IDs.\n */\nfunction wp_parse_id_list( $list ) {\n\tif ( !is_array($list) )\n\t\t$list = preg_split('/[\\s,]+/', $list);\n\n\treturn array_unique(array_map('absint', $list));\n}\n\n/**\n * Clean up an array, comma- or space-separated list of slugs.\n *\n * @since 4.7.0\n *\n * @param  array|string $list List of slugs.\n * @return array Sanitized array of slugs.\n */\nfunction wp_parse_slug_list( $list ) {\n\tif ( ! is_array( $list ) ) {\n\t\t$list = preg_split( '/[\\s,]+/', $list );\n\t}\n\n\tforeach ( $list as $key => $value ) {\n\t\t$list[ $key ] = sanitize_title( $value );\n\t}\n\n\treturn array_unique( $list );\n}\n\n/**\n * Extract a slice of an array, given a list of keys.\n *\n * @since 3.1.0\n *\n * @param array $array The original array.\n * @param array $keys  The list of keys.\n * @return array The array slice.\n */\nfunction wp_array_slice_assoc( $array, $keys ) {\n\t$slice = array();\n\tforeach ( $keys as $key )\n\t\tif ( isset( $array[ $key ] ) )\n\t\t\t$slice[ $key ] = $array[ $key ];\n\n\treturn $slice;\n}\n\n/**\n * Determines if the variable is a numeric-indexed array.\n *\n * @since 4.4.0\n *\n * @param mixed $data Variable to check.\n * @return bool Whether the variable is a list.\n */\nfunction wp_is_numeric_array( $data ) {\n\tif ( ! is_array( $data ) ) {\n\t\treturn false;\n\t}\n\n\t$keys = array_keys( $data );\n\t$string_keys = array_filter( $keys, 'is_string' );\n\treturn count( $string_keys ) === 0;\n}\n\n/**\n * Filters a list of objects, based on a set of key => value arguments.\n *\n * @since 3.0.0\n * @since 4.7.0 Uses WP_List_Util class.\n *\n * @param array       $list     An array of objects to filter\n * @param array       $args     Optional. An array of key => value arguments to match\n *                              against each object. Default empty array.\n * @param string      $operator Optional. The logical operation to perform. 'or' means\n *                              only one element from the array needs to match; 'and'\n *                              means all elements must match; 'not' means no elements may\n *                              match. Default 'and'.\n * @param bool|string $field    A field from the object to place instead of the entire object.\n *                              Default false.\n * @return array A list of objects or object fields.\n */\nfunction wp_filter_object_list( $list, $args = array(), $operator = 'and', $field = false ) {\n\tif ( ! is_array( $list ) ) {\n\t\treturn array();\n\t}\n\n\t$util = new WP_List_Util( $list );\n\n\t$util->filter( $args, $operator );\n\n\tif ( $field ) {\n\t\t$util->pluck( $field );\n\t}\n\n\treturn $util->get_output();\n}\n\n/**\n * Filters a list of objects, based on a set of key => value arguments.\n *\n * @since 3.1.0\n * @since 4.7.0 Uses WP_List_Util class.\n *\n * @param array  $list     An array of objects to filter.\n * @param array  $args     Optional. An array of key => value arguments to match\n *                         against each object. Default empty array.\n * @param string $operator Optional. The logical operation to perform. 'AND' means\n *                         all elements from the array must match. 'OR' means only\n *                         one element needs to match. 'NOT' means no elements may\n *                         match. Default 'AND'.\n * @return array Array of found values.\n */\nfunction wp_list_filter( $list, $args = array(), $operator = 'AND' ) {\n\tif ( ! is_array( $list ) ) {\n\t\treturn array();\n\t}\n\n\t$util = new WP_List_Util( $list );\n\treturn $util->filter( $args, $operator );\n}\n\n/**\n * Pluck a certain field out of each object in a list.\n *\n * This has the same functionality and prototype of\n * array_column() (PHP 5.5) but also supports objects.\n *\n * @since 3.1.0\n * @since 4.0.0 $index_key parameter added.\n * @since 4.7.0 Uses WP_List_Util class.\n *\n * @param array      $list      List of objects or arrays\n * @param int|string $field     Field from the object to place instead of the entire object\n * @param int|string $index_key Optional. Field from the object to use as keys for the new array.\n *                              Default null.\n * @return array Array of found values. If `$index_key` is set, an array of found values with keys\n *               corresponding to `$index_key`. If `$index_key` is null, array keys from the original\n *               `$list` will be preserved in the results.\n */\nfunction wp_list_pluck( $list, $field, $index_key = null ) {\n\t$util = new WP_List_Util( $list );\n\treturn $util->pluck( $field, $index_key );\n}\n\n/**\n * Sorts a list of objects, based on one or more orderby arguments.\n *\n * @since 4.7.0\n *\n * @param array        $list          An array of objects to filter.\n * @param string|array $orderby       Optional. Either the field name to order by or an array\n *                                    of multiple orderby fields as $orderby => $order.\n * @param string       $order         Optional. Either 'ASC' or 'DESC'. Only used if $orderby\n *                                    is a string.\n * @param bool         $preserve_keys Optional. Whether to preserve keys. Default false.\n * @return array The sorted array.\n */\nfunction wp_list_sort( $list, $orderby = array(), $order = 'ASC', $preserve_keys = false ) {\n\tif ( ! is_array( $list ) ) {\n\t\treturn array();\n\t}\n\n\t$util = new WP_List_Util( $list );\n\treturn $util->sort( $orderby, $order, $preserve_keys );\n}\n\n/**\n * Determines if Widgets library should be loaded.\n *\n * Checks to make sure that the widgets library hasn't already been loaded.\n * If it hasn't, then it will load the widgets library and run an action hook.\n *\n * @since 2.2.0\n */\nfunction wp_maybe_load_widgets() {\n\t/**\n\t * Filters whether to load the Widgets library.\n\t *\n\t * Passing a falsey value to the filter will effectively short-circuit\n\t * the Widgets library from loading.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param bool $wp_maybe_load_widgets Whether to load the Widgets library.\n\t *                                    Default true.\n\t */\n\tif ( ! apply_filters( 'load_default_widgets', true ) ) {\n\t\treturn;\n\t}\n\n\trequire_once( ABSPATH . WPINC . '/default-widgets.php' );\n\n\tadd_action( '_admin_menu', 'wp_widgets_add_menu' );\n}\n\n/**\n * Append the Widgets menu to the themes main menu.\n *\n * @since 2.2.0\n *\n * @global array $submenu\n */\nfunction wp_widgets_add_menu() {\n\tglobal $submenu;\n\n\tif ( ! current_theme_supports( 'widgets' ) )\n\t\treturn;\n\n\t$submenu['themes.php'][7] = array( __( 'Widgets' ), 'edit_theme_options', 'widgets.php' );\n\tksort( $submenu['themes.php'], SORT_NUMERIC );\n}\n\n/**\n * Flush all output buffers for PHP 5.2.\n *\n * Make sure all output buffers are flushed before our singletons are destroyed.\n *\n * @since 2.2.0\n */\nfunction wp_ob_end_flush_all() {\n\t$levels = ob_get_level();\n\tfor ($i=0; $i<$levels; $i++)\n\t\tob_end_flush();\n}\n\n/**\n * Load custom DB error or display WordPress DB error.\n *\n * If a file exists in the wp-content directory named db-error.php, then it will\n * be loaded instead of displaying the WordPress DB error. If it is not found,\n * then the WordPress DB error will be displayed instead.\n *\n * The WordPress DB error sets the HTTP status header to 500 to try to prevent\n * search engines from caching the message. Custom DB messages should do the\n * same.\n *\n * This function was backported to WordPress 2.3.2, but originally was added\n * in WordPress 2.5.0.\n *\n * @since 2.3.2\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n */\nfunction dead_db() {\n\tglobal $wpdb;\n\n\twp_load_translations_early();\n\n\t// Load custom DB error template, if present.\n\tif ( file_exists( WP_CONTENT_DIR . '/db-error.php' ) ) {\n\t\trequire_once( WP_CONTENT_DIR . '/db-error.php' );\n\t\tdie();\n\t}\n\n\t// If installing or in the admin, provide the verbose message.\n\tif ( wp_installing() || defined( 'WP_ADMIN' ) )\n\t\twp_die($wpdb->error);\n\n\t// Otherwise, be terse.\n\tstatus_header( 500 );\n\tnocache_headers();\n\theader( 'Content-Type: text/html; charset=utf-8' );\n?>\n<!DOCTYPE html>\n<html xmlns=\"http://www.w3.org/1999/xhtml\"<?php if ( is_rtl() ) echo ' dir=\"rtl\"'; ?>>\n<head>\n<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\" />\n\t<title><?php _e( 'Database Error' ); ?></title>\n\n</head>\n<body>\n\t<h1><?php _e( 'Error establishing a database connection' ); ?></h1>\n</body>\n</html>\n<?php\n\tdie();\n}\n\n/**\n * Convert a value to non-negative integer.\n *\n * @since 2.5.0\n *\n * @param mixed $maybeint Data you wish to have converted to a non-negative integer.\n * @return int A non-negative integer.\n */\nfunction absint( $maybeint ) {\n\treturn abs( intval( $maybeint ) );\n}\n\n/**\n * Mark a function as deprecated and inform when it has been used.\n *\n * There is a {@see 'hook deprecated_function_run'} that will be called that can be used\n * to get the backtrace up to what file and function called the deprecated\n * function.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is to be used in every function that is deprecated.\n *\n * @since 2.5.0\n * @access private\n *\n * @param string $function    The function that was called.\n * @param string $version     The version of WordPress that deprecated the function.\n * @param string $replacement Optional. The function that should have been called. Default null.\n */\nfunction _deprecated_function( $function, $version, $replacement = null ) {\n\n\t/**\n\t * Fires when a deprecated function is called.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $function    The function that was called.\n\t * @param string $replacement The function that should have been called.\n\t * @param string $version     The version of WordPress that deprecated the function.\n\t */\n\tdo_action( 'deprecated_function_run', $function, $replacement, $version );\n\n\t/**\n\t * Filters whether to trigger an error for deprecated functions.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for deprecated functions. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_function_trigger_error', true ) ) {\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t\t/* translators: 1: PHP function name, 2: version number, 3: alternative function name */\n\t\t\t\ttrigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.'), $function, $version, $replacement ) );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: PHP function name, 2: version number */\n\t\t\t\ttrigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.'), $function, $version ) );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t\ttrigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.', $function, $version, $replacement ) );\n\t\t\t} else {\n\t\t\t\ttrigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.', $function, $version ) );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Marks a constructor as deprecated and informs when it has been used.\n *\n * Similar to _deprecated_function(), but with different strings. Used to\n * remove PHP4 style constructors.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is to be used in every PHP4 style constructor method that is deprecated.\n *\n * @since 4.3.0\n * @since 4.5.0 Added the `$parent_class` parameter.\n *\n * @access private\n *\n * @param string $class        The class containing the deprecated constructor.\n * @param string $version      The version of WordPress that deprecated the function.\n * @param string $parent_class Optional. The parent class calling the deprecated constructor.\n *                             Default empty string.\n */\nfunction _deprecated_constructor( $class, $version, $parent_class = '' ) {\n\n\t/**\n\t * Fires when a deprecated constructor is called.\n\t *\n\t * @since 4.3.0\n\t * @since 4.5.0 Added the `$parent_class` parameter.\n\t *\n\t * @param string $class        The class containing the deprecated constructor.\n\t * @param string $version      The version of WordPress that deprecated the function.\n\t * @param string $parent_class The parent class calling the deprecated constructor.\n\t */\n\tdo_action( 'deprecated_constructor_run', $class, $version, $parent_class );\n\n\t/**\n\t * Filters whether to trigger an error for deprecated functions.\n\t *\n\t * `WP_DEBUG` must be true in addition to the filter evaluating to true.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for deprecated functions. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_constructor_trigger_error', true ) ) {\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( ! empty( $parent_class ) ) {\n\t\t\t\t/* translators: 1: PHP class name, 2: PHP parent class name, 3: version number, 4: __construct() method */\n\t\t\t\ttrigger_error( sprintf( __( 'The called constructor method for %1$s in %2$s is <strong>deprecated</strong> since version %3$s! Use %4$s instead.' ),\n\t\t\t\t\t$class, $parent_class, $version, '<pre>__construct()</pre>' ) );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: PHP class name, 2: version number, 3: __construct() method */\n\t\t\t\ttrigger_error( sprintf( __( 'The called constructor method for %1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.' ),\n\t\t\t\t\t$class, $version, '<pre>__construct()</pre>' ) );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! empty( $parent_class ) ) {\n\t\t\t\ttrigger_error( sprintf( 'The called constructor method for %1$s in %2$s is <strong>deprecated</strong> since version %3$s! Use %4$s instead.',\n\t\t\t\t\t$class, $parent_class, $version, '<pre>__construct()</pre>' ) );\n\t\t\t} else {\n\t\t\t\ttrigger_error( sprintf( 'The called constructor method for %1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.',\n\t\t\t\t\t$class, $version, '<pre>__construct()</pre>' ) );\n\t\t\t}\n\t\t}\n\t}\n\n}\n\n/**\n * Mark a file as deprecated and inform when it has been used.\n *\n * There is a hook {@see 'deprecated_file_included'} that will be called that can be used\n * to get the backtrace up to what file and function included the deprecated\n * file.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is to be used in every file that is deprecated.\n *\n * @since 2.5.0\n * @access private\n *\n * @param string $file        The file that was included.\n * @param string $version     The version of WordPress that deprecated the file.\n * @param string $replacement Optional. The file that should have been included based on ABSPATH.\n *                            Default null.\n * @param string $message     Optional. A message regarding the change. Default empty.\n */\nfunction _deprecated_file( $file, $version, $replacement = null, $message = '' ) {\n\n\t/**\n\t * Fires when a deprecated file is called.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param string $file        The file that was called.\n\t * @param string $replacement The file that should have been included based on ABSPATH.\n\t * @param string $version     The version of WordPress that deprecated the file.\n\t * @param string $message     A message regarding the change.\n\t */\n\tdo_action( 'deprecated_file_included', $file, $replacement, $version, $message );\n\n\t/**\n\t * Filters whether to trigger an error for deprecated files.\n\t *\n\t * @since 2.5.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for deprecated files. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_file_trigger_error', true ) ) {\n\t\t$message = empty( $message ) ? '' : ' ' . $message;\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t\t/* translators: 1: PHP file name, 2: version number, 3: alternative file name */\n\t\t\t\ttrigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.'), $file, $version, $replacement ) . $message );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: PHP file name, 2: version number */\n\t\t\t\ttrigger_error( sprintf( __('%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.'), $file, $version ) . $message );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t\ttrigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.', $file, $version, $replacement ) . $message );\n\t\t\t} else {\n\t\t\t\ttrigger_error( sprintf( '%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.', $file, $version ) . $message );\n\t\t\t}\n\t\t}\n\t}\n}\n/**\n * Mark a function argument as deprecated and inform when it has been used.\n *\n * This function is to be used whenever a deprecated function argument is used.\n * Before this function is called, the argument must be checked for whether it was\n * used by comparing it to its default value or evaluating whether it is empty.\n * For example:\n *\n *     if ( ! empty( $deprecated ) ) {\n *         _deprecated_argument( __FUNCTION__, '3.0.0' );\n *     }\n *\n *\n * There is a hook deprecated_argument_run that will be called that can be used\n * to get the backtrace up to what file and function used the deprecated\n * argument.\n *\n * The current behavior is to trigger a user error if WP_DEBUG is true.\n *\n * @since 3.0.0\n * @access private\n *\n * @param string $function The function that was called.\n * @param string $version  The version of WordPress that deprecated the argument used.\n * @param string $message  Optional. A message regarding the change. Default null.\n */\nfunction _deprecated_argument( $function, $version, $message = null ) {\n\n\t/**\n\t * Fires when a deprecated argument is called.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param string $function The function that was called.\n\t * @param string $message  A message regarding the change.\n\t * @param string $version  The version of WordPress that deprecated the argument used.\n\t */\n\tdo_action( 'deprecated_argument_run', $function, $message, $version );\n\n\t/**\n\t * Filters whether to trigger an error for deprecated arguments.\n\t *\n\t * @since 3.0.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for deprecated arguments. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_argument_trigger_error', true ) ) {\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( ! is_null( $message ) ) {\n\t\t\t\t/* translators: 1: PHP function name, 2: version number, 3: optional message regarding the change */\n\t\t\t\ttrigger_error( sprintf( __('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s! %3$s'), $function, $version, $message ) );\n\t\t\t} else {\n\t\t\t\t/* translators: 1: PHP function name, 2: version number */\n\t\t\t\ttrigger_error( sprintf( __('%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s with no alternative available.'), $function, $version ) );\n\t\t\t}\n\t\t} else {\n\t\t\tif ( ! is_null( $message ) ) {\n\t\t\t\ttrigger_error( sprintf( '%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s! %3$s', $function, $version, $message ) );\n\t\t\t} else {\n\t\t\t\ttrigger_error( sprintf( '%1$s was called with an argument that is <strong>deprecated</strong> since version %2$s with no alternative available.', $function, $version ) );\n\t\t\t}\n\t\t}\n\t}\n}\n\n/**\n * Marks a deprecated action or filter hook as deprecated and throws a notice.\n *\n * Use the {@see 'deprecated_hook_run'} action to get the backtrace describing where\n * the deprecated hook was called.\n *\n * Default behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * This function is called by the do_action_deprecated() and apply_filters_deprecated()\n * functions, and so generally does not need to be called directly.\n *\n * @since 4.6.0\n * @access private\n *\n * @param string $hook        The hook that was used.\n * @param string $version     The version of WordPress that deprecated the hook.\n * @param string $replacement Optional. The hook that should have been used.\n * @param string $message     Optional. A message regarding the change.\n */\nfunction _deprecated_hook( $hook, $version, $replacement = null, $message = null ) {\n\t/**\n\t * Fires when a deprecated hook is called.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param string $hook        The hook that was called.\n\t * @param string $replacement The hook that should be used as a replacement.\n\t * @param string $version     The version of WordPress that deprecated the argument used.\n\t * @param string $message     A message regarding the change.\n\t */\n\tdo_action( 'deprecated_hook_run', $hook, $replacement, $version, $message );\n\n\t/**\n\t * Filters whether to trigger deprecated hook errors.\n\t *\n\t * @since 4.6.0\n\t *\n\t * @param bool $trigger Whether to trigger deprecated hook errors. Requires\n\t *                      `WP_DEBUG` to be defined true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'deprecated_hook_trigger_error', true ) ) {\n\t\t$message = empty( $message ) ? '' : ' ' . $message;\n\t\tif ( ! is_null( $replacement ) ) {\n\t\t\t/* translators: 1: WordPress hook name, 2: version number, 3: alternative hook name */\n\t\t\ttrigger_error( sprintf( __( '%1$s is <strong>deprecated</strong> since version %2$s! Use %3$s instead.' ), $hook, $version, $replacement ) . $message );\n\t\t} else {\n\t\t\t/* translators: 1: WordPress hook name, 2: version number */\n\t\t\ttrigger_error( sprintf( __( '%1$s is <strong>deprecated</strong> since version %2$s with no alternative available.' ), $hook, $version ) . $message );\n\t\t}\n\t}\n}\n\n/**\n * Mark something as being incorrectly called.\n *\n * There is a hook {@see 'doing_it_wrong_run'} that will be called that can be used\n * to get the backtrace up to what file and function called the deprecated\n * function.\n *\n * The current behavior is to trigger a user error if `WP_DEBUG` is true.\n *\n * @since 3.1.0\n * @access private\n *\n * @param string $function The function that was called.\n * @param string $message  A message explaining what has been done incorrectly.\n * @param string $version  The version of WordPress where the message was added.\n */\nfunction _doing_it_wrong( $function, $message, $version ) {\n\n\t/**\n\t * Fires when the given function is being used incorrectly.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param string $function The function that was called.\n\t * @param string $message  A message explaining what has been done incorrectly.\n\t * @param string $version  The version of WordPress where the message was added.\n\t */\n\tdo_action( 'doing_it_wrong_run', $function, $message, $version );\n\n\t/**\n\t * Filters whether to trigger an error for _doing_it_wrong() calls.\n\t *\n\t * @since 3.1.0\n\t *\n\t * @param bool $trigger Whether to trigger the error for _doing_it_wrong() calls. Default true.\n\t */\n\tif ( WP_DEBUG && apply_filters( 'doing_it_wrong_trigger_error', true ) ) {\n\t\tif ( function_exists( '__' ) ) {\n\t\t\tif ( is_null( $version ) ) {\n\t\t\t\t$version = '';\n\t\t\t} else {\n\t\t\t\t/* translators: %s: version number */\n\t\t\t\t$version = sprintf( __( '(This message was added in version %s.)' ), $version );\n\t\t\t}\n\t\t\t/* translators: %s: Codex URL */\n\t\t\t$message .= ' ' . sprintf( __( 'Please see <a href=\"%s\">Debugging in WordPress</a> for more information.' ),\n\t\t\t\t__( 'https://codex.wordpress.org/Debugging_in_WordPress' )\n\t\t\t);\n\t\t\t/* translators: Developer debugging message. 1: PHP function name, 2: Explanatory message, 3: Version information message */\n\t\t\ttrigger_error( sprintf( __( '%1$s was called <strong>incorrectly</strong>. %2$s %3$s' ), $function, $message, $version ) );\n\t\t} else {\n\t\t\tif ( is_null( $version ) ) {\n\t\t\t\t$version = '';\n\t\t\t} else {\n\t\t\t\t$version = sprintf( '(This message was added in version %s.)', $version );\n\t\t\t}\n\t\t\t$message .= sprintf( ' Please see <a href=\"%s\">Debugging in WordPress</a> for more information.',\n\t\t\t\t'https://codex.wordpress.org/Debugging_in_WordPress'\n\t\t\t);\n\t\t\ttrigger_error( sprintf( '%1$s was called <strong>incorrectly</strong>. %2$s %3$s', $function, $message, $version ) );\n\t\t}\n\t}\n}\n\n/**\n * Is the server running earlier than 1.5.0 version of lighttpd?\n *\n * @since 2.5.0\n *\n * @return bool Whether the server is running lighttpd < 1.5.0.\n */\nfunction is_lighttpd_before_150() {\n\t$server_parts = explode( '/', isset( $_SERVER['SERVER_SOFTWARE'] )? $_SERVER['SERVER_SOFTWARE'] : '' );\n\t$server_parts[1] = isset( $server_parts[1] )? $server_parts[1] : '';\n\treturn  'lighttpd' == $server_parts[0] && -1 == version_compare( $server_parts[1], '1.5.0' );\n}\n\n/**\n * Does the specified module exist in the Apache config?\n *\n * @since 2.5.0\n *\n * @global bool $is_apache\n *\n * @param string $mod     The module, e.g. mod_rewrite.\n * @param bool   $default Optional. The default return value if the module is not found. Default false.\n * @return bool Whether the specified module is loaded.\n */\nfunction apache_mod_loaded($mod, $default = false) {\n\tglobal $is_apache;\n\n\tif ( !$is_apache )\n\t\treturn false;\n\n\tif ( function_exists( 'apache_get_modules' ) ) {\n\t\t$mods = apache_get_modules();\n\t\tif ( in_array($mod, $mods) )\n\t\t\treturn true;\n\t} elseif ( function_exists( 'phpinfo' ) && false === strpos( ini_get( 'disable_functions' ), 'phpinfo' ) ) {\n\t\t\tob_start();\n\t\t\tphpinfo(8);\n\t\t\t$phpinfo = ob_get_clean();\n\t\t\tif ( false !== strpos($phpinfo, $mod) )\n\t\t\t\treturn true;\n\t}\n\treturn $default;\n}\n\n/**\n * Check if IIS 7+ supports pretty permalinks.\n *\n * @since 2.8.0\n *\n * @global bool $is_iis7\n *\n * @return bool Whether IIS7 supports permalinks.\n */\nfunction iis7_supports_permalinks() {\n\tglobal $is_iis7;\n\n\t$supports_permalinks = false;\n\tif ( $is_iis7 ) {\n\t\t/* First we check if the DOMDocument class exists. If it does not exist, then we cannot\n\t\t * easily update the xml configuration file, hence we just bail out and tell user that\n\t\t * pretty permalinks cannot be used.\n\t\t *\n\t\t * Next we check if the URL Rewrite Module 1.1 is loaded and enabled for the web site. When\n\t\t * URL Rewrite 1.1 is loaded it always sets a server variable called 'IIS_UrlRewriteModule'.\n\t\t * Lastly we make sure that PHP is running via FastCGI. This is important because if it runs\n\t\t * via ISAPI then pretty permalinks will not work.\n\t\t */\n\t\t$supports_permalinks = class_exists( 'DOMDocument', false ) && isset($_SERVER['IIS_UrlRewriteModule']) && ( PHP_SAPI == 'cgi-fcgi' );\n\t}\n\n\t/**\n\t * Filters whether IIS 7+ supports pretty permalinks.\n\t *\n\t * @since 2.8.0\n\t *\n\t * @param bool $supports_permalinks Whether IIS7 supports permalinks. Default false.\n\t */\n\treturn apply_filters( 'iis7_supports_permalinks', $supports_permalinks );\n}\n\n/**\n * Validates a file name and path against an allowed set of rules.\n *\n * A return value of `1` means the file path contains directory traversal.\n *\n * A return value of `2` means the file path contains a Windows drive path.\n *\n * A return value of `3` means the file is not in the allowed files list.\n *\n * @since 1.2.0\n *\n * @param string $file          File path.\n * @param array  $allowed_files Optional. List of allowed files.\n * @return int 0 means nothing is wrong, greater than 0 means something was wrong.\n */\nfunction validate_file( $file, $allowed_files = array() ) {\n\t// `../` on its own is not allowed:\n\tif ( '../' === $file ) {\n\t\treturn 1;\n\t}\n\n\t// More than one occurence of `../` is not allowed:\n\tif ( preg_match_all( '#\\.\\./#', $file, $matches, PREG_SET_ORDER ) && ( count( $matches ) > 1 ) ) {\n\t\treturn 1;\n\t}\n\n\t// `../` which does not occur at the end of the path is not allowed:\n\tif ( false !== strpos( $file, '../' ) && '../' !== mb_substr( $file, -3, 3 ) ) {\n\t\treturn 1;\n\t}\n\n\t// Files not in the allowed file list are not allowed:\n\tif ( ! empty( $allowed_files ) && ! in_array( $file, $allowed_files ) )\n\t\treturn 3;\n\n\t// Absolute Windows drive paths are not allowed:\n\tif (':' == substr( $file, 1, 1 ) )\n\t\treturn 2;\n\n\treturn 0;\n}\n\n/**\n * Whether to force SSL used for the Administration Screens.\n *\n * @since 2.6.0\n *\n * @staticvar bool $forced\n *\n * @param string|bool $force Optional. Whether to force SSL in admin screens. Default null.\n * @return bool True if forced, false if not forced.\n */\nfunction force_ssl_admin( $force = null ) {\n\tstatic $forced = false;\n\n\tif ( !is_null( $force ) ) {\n\t\t$old_forced = $forced;\n\t\t$forced = $force;\n\t\treturn $old_forced;\n\t}\n\n\treturn $forced;\n}\n\n/**\n * Guess the URL for the site.\n *\n * Will remove wp-admin links to retrieve only return URLs not in the wp-admin\n * directory.\n *\n * @since 2.6.0\n *\n * @return string The guessed URL.\n */\nfunction wp_guess_url() {\n\tif ( defined('WP_SITEURL') && '' != WP_SITEURL ) {\n\t\t$url = WP_SITEURL;\n\t} else {\n\t\t$abspath_fix = str_replace( '\\\\', '/', ABSPATH );\n\t\t$script_filename_dir = dirname( $_SERVER['SCRIPT_FILENAME'] );\n\n\t\t// The request is for the admin\n\t\tif ( strpos( $_SERVER['REQUEST_URI'], 'wp-admin' ) !== false || strpos( $_SERVER['REQUEST_URI'], 'wp-login.php' ) !== false ) {\n\t\t\t$path = preg_replace( '#/(wp-admin/.*|wp-login.php)#i', '', $_SERVER['REQUEST_URI'] );\n\n\t\t// The request is for a file in ABSPATH\n\t\t} elseif ( $script_filename_dir . '/' == $abspath_fix ) {\n\t\t\t// Strip off any file/query params in the path\n\t\t\t$path = preg_replace( '#/[^/]*$#i', '', $_SERVER['PHP_SELF'] );\n\n\t\t} else {\n\t\t\tif ( false !== strpos( $_SERVER['SCRIPT_FILENAME'], $abspath_fix ) ) {\n\t\t\t\t// Request is hitting a file inside ABSPATH\n\t\t\t\t$directory = str_replace( ABSPATH, '', $script_filename_dir );\n\t\t\t\t// Strip off the sub directory, and any file/query params\n\t\t\t\t$path = preg_replace( '#/' . preg_quote( $directory, '#' ) . '/[^/]*$#i', '' , $_SERVER['REQUEST_URI'] );\n\t\t\t} elseif ( false !== strpos( $abspath_fix, $script_filename_dir ) ) {\n\t\t\t\t// Request is hitting a file above ABSPATH\n\t\t\t\t$subdirectory = substr( $abspath_fix, strpos( $abspath_fix, $script_filename_dir ) + strlen( $script_filename_dir ) );\n\t\t\t\t// Strip off any file/query params from the path, appending the sub directory to the installation\n\t\t\t\t$path = preg_replace( '#/[^/]*$#i', '' , $_SERVER['REQUEST_URI'] ) . $subdirectory;\n\t\t\t} else {\n\t\t\t\t$path = $_SERVER['REQUEST_URI'];\n\t\t\t}\n\t\t}\n\n\t\t$schema = is_ssl() ? 'https://' : 'http://'; // set_url_scheme() is not defined yet\n\t\t$url = $schema . $_SERVER['HTTP_HOST'] . $path;\n\t}\n\n\treturn rtrim($url, '/');\n}\n\n/**\n * Temporarily suspend cache additions.\n *\n * Stops more data being added to the cache, but still allows cache retrieval.\n * This is useful for actions, such as imports, when a lot of data would otherwise\n * be almost uselessly added to the cache.\n *\n * Suspension lasts for a single page load at most. Remember to call this\n * function again if you wish to re-enable cache adds earlier.\n *\n * @since 3.3.0\n *\n * @staticvar bool $_suspend\n *\n * @param bool $suspend Optional. Suspends additions if true, re-enables them if false.\n * @return bool The current suspend setting\n */\nfunction wp_suspend_cache_addition( $suspend = null ) {\n\tstatic $_suspend = false;\n\n\tif ( is_bool( $suspend ) )\n\t\t$_suspend = $suspend;\n\n\treturn $_suspend;\n}\n\n/**\n * Suspend cache invalidation.\n *\n * Turns cache invalidation on and off. Useful during imports where you don't want to do\n * invalidations every time a post is inserted. Callers must be sure that what they are\n * doing won't lead to an inconsistent cache when invalidation is suspended.\n *\n * @since 2.7.0\n *\n * @global bool $_wp_suspend_cache_invalidation\n *\n * @param bool $suspend Optional. Whether to suspend or enable cache invalidation. Default true.\n * @return bool The current suspend setting.\n */\nfunction wp_suspend_cache_invalidation( $suspend = true ) {\n\tglobal $_wp_suspend_cache_invalidation;\n\n\t$current_suspend = $_wp_suspend_cache_invalidation;\n\t$_wp_suspend_cache_invalidation = $suspend;\n\treturn $current_suspend;\n}\n\n/**\n * Determine whether a site is the main site of the current network.\n *\n * @since 3.0.0\n * @since 4.9.0 The $network_id parameter has been added.\n *\n * @param int $site_id    Optional. Site ID to test. Defaults to current site.\n * @param int $network_id Optional. Network ID of the network to check for.\n *                        Defaults to current network.\n * @return bool True if $site_id is the main site of the network, or if not\n *              running Multisite.\n */\nfunction is_main_site( $site_id = null, $network_id = null ) {\n\tif ( ! is_multisite() ) {\n\t\treturn true;\n\t}\n\n\tif ( ! $site_id ) {\n\t\t$site_id = get_current_blog_id();\n\t}\n\n\t$site_id = (int) $site_id;\n\n\treturn $site_id === get_main_site_id( $network_id );\n}\n\n/**\n * Gets the main site ID.\n *\n * @since 4.9.0\n *\n * @param int $network_id Optional. The ID of the network for which to get the main site.\n *                        Defaults to the current network.\n * @return int The ID of the main site.\n */\nfunction get_main_site_id( $network_id = null ) {\n\tif ( ! is_multisite() ) {\n\t\treturn get_current_blog_id();\n\t}\n\n\t$network = get_network( $network_id );\n\tif ( ! $network ) {\n\t\treturn 0;\n\t}\n\n\treturn $network->site_id;\n}\n\n/**\n * Determine whether a network is the main network of the Multisite installation.\n *\n * @since 3.7.0\n *\n * @param int $network_id Optional. Network ID to test. Defaults to current network.\n * @return bool True if $network_id is the main network, or if not running Multisite.\n */\nfunction is_main_network( $network_id = null ) {\n\tif ( ! is_multisite() ) {\n\t\treturn true;\n\t}\n\n\tif ( null === $network_id ) {\n\t\t$network_id = get_current_network_id();\n\t}\n\n\t$network_id = (int) $network_id;\n\n\treturn ( $network_id === get_main_network_id() );\n}\n\n/**\n * Get the main network ID.\n *\n * @since 4.3.0\n *\n * @return int The ID of the main network.\n */\nfunction get_main_network_id() {\n\tif ( ! is_multisite() ) {\n\t\treturn 1;\n\t}\n\n\t$current_network = get_network();\n\n\tif ( defined( 'PRIMARY_NETWORK_ID' ) ) {\n\t\t$main_network_id = PRIMARY_NETWORK_ID;\n\t} elseif ( isset( $current_network->id ) && 1 === (int) $current_network->id ) {\n\t\t// If the current network has an ID of 1, assume it is the main network.\n\t\t$main_network_id = 1;\n\t} else {\n\t\t$_networks = get_networks( array( 'fields' => 'ids', 'number' => 1 ) );\n\t\t$main_network_id = array_shift( $_networks );\n\t}\n\n\t/**\n\t * Filters the main network ID.\n\t *\n\t * @since 4.3.0\n\t *\n\t * @param int $main_network_id The ID of the main network.\n\t */\n\treturn (int) apply_filters( 'get_main_network_id', $main_network_id );\n}\n\n/**\n * Determine whether global terms are enabled.\n *\n * @since 3.0.0\n *\n * @staticvar bool $global_terms\n *\n * @return bool True if multisite and global terms enabled.\n */\nfunction global_terms_enabled() {\n\tif ( ! is_multisite() )\n\t\treturn false;\n\n\tstatic $global_terms = null;\n\tif ( is_null( $global_terms ) ) {\n\n\t\t/**\n\t\t * Filters whether global terms are enabled.\n\t\t *\n\t\t * Passing a non-null value to the filter will effectively short-circuit the function,\n\t\t * returning the value of the 'global_terms_enabled' site option instead.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param null $enabled Whether global terms are enabled.\n\t\t */\n\t\t$filter = apply_filters( 'global_terms_enabled', null );\n\t\tif ( ! is_null( $filter ) )\n\t\t\t$global_terms = (bool) $filter;\n\t\telse\n\t\t\t$global_terms = (bool) get_site_option( 'global_terms_enabled', false );\n\t}\n\treturn $global_terms;\n}\n\n/**\n * gmt_offset modification for smart timezone handling.\n *\n * Overrides the gmt_offset option if we have a timezone_string available.\n *\n * @since 2.8.0\n *\n * @return float|false Timezone GMT offset, false otherwise.\n */\nfunction wp_timezone_override_offset() {\n\tif ( !$timezone_string = get_option( 'timezone_string' ) ) {\n\t\treturn false;\n\t}\n\n\t$timezone_object = timezone_open( $timezone_string );\n\t$datetime_object = date_create();\n\tif ( false === $timezone_object || false === $datetime_object ) {\n\t\treturn false;\n\t}\n\treturn round( timezone_offset_get( $timezone_object, $datetime_object ) / HOUR_IN_SECONDS, 2 );\n}\n\n/**\n * Sort-helper for timezones.\n *\n * @since 2.9.0\n * @access private\n *\n * @param array $a\n * @param array $b\n * @return int\n */\nfunction _wp_timezone_choice_usort_callback( $a, $b ) {\n\t// Don't use translated versions of Etc\n\tif ( 'Etc' === $a['continent'] && 'Etc' === $b['continent'] ) {\n\t\t// Make the order of these more like the old dropdown\n\t\tif ( 'GMT+' === substr( $a['city'], 0, 4 ) && 'GMT+' === substr( $b['city'], 0, 4 ) ) {\n\t\t\treturn -1 * ( strnatcasecmp( $a['city'], $b['city'] ) );\n\t\t}\n\t\tif ( 'UTC' === $a['city'] ) {\n\t\t\tif ( 'GMT+' === substr( $b['city'], 0, 4 ) ) {\n\t\t\t\treturn 1;\n\t\t\t}\n\t\t\treturn -1;\n\t\t}\n\t\tif ( 'UTC' === $b['city'] ) {\n\t\t\tif ( 'GMT+' === substr( $a['city'], 0, 4 ) ) {\n\t\t\t\treturn -1;\n\t\t\t}\n\t\t\treturn 1;\n\t\t}\n\t\treturn strnatcasecmp( $a['city'], $b['city'] );\n\t}\n\tif ( $a['t_continent'] == $b['t_continent'] ) {\n\t\tif ( $a['t_city'] == $b['t_city'] ) {\n\t\t\treturn strnatcasecmp( $a['t_subcity'], $b['t_subcity'] );\n\t\t}\n\t\treturn strnatcasecmp( $a['t_city'], $b['t_city'] );\n\t} else {\n\t\t// Force Etc to the bottom of the list\n\t\tif ( 'Etc' === $a['continent'] ) {\n\t\t\treturn 1;\n\t\t}\n\t\tif ( 'Etc' === $b['continent'] ) {\n\t\t\treturn -1;\n\t\t}\n\t\treturn strnatcasecmp( $a['t_continent'], $b['t_continent'] );\n\t}\n}\n\n/**\n * Gives a nicely-formatted list of timezone strings.\n *\n * @since 2.9.0\n * @since 4.7.0 Added the `$locale` parameter.\n *\n * @staticvar bool $mo_loaded\n * @staticvar string $locale_loaded\n *\n * @param string $selected_zone Selected timezone.\n * @param string $locale        Optional. Locale to load the timezones in. Default current site locale.\n * @return string\n */\nfunction wp_timezone_choice( $selected_zone, $locale = null ) {\n\tstatic $mo_loaded = false, $locale_loaded = null;\n\n\t$continents = array( 'Africa', 'America', 'Antarctica', 'Arctic', 'Asia', 'Atlantic', 'Australia', 'Europe', 'Indian', 'Pacific');\n\n\t// Load translations for continents and cities.\n\tif ( ! $mo_loaded || $locale !== $locale_loaded ) {\n\t\t$locale_loaded = $locale ? $locale : get_locale();\n\t\t$mofile = WP_LANG_DIR . '/continents-cities-' . $locale_loaded . '.mo';\n\t\tunload_textdomain( 'continents-cities' );\n\t\tload_textdomain( 'continents-cities', $mofile );\n\t\t$mo_loaded = true;\n\t}\n\n\t$zonen = array();\n\tforeach ( timezone_identifiers_list() as $zone ) {\n\t\t$zone = explode( '/', $zone );\n\t\tif ( !in_array( $zone[0], $continents ) ) {\n\t\t\tcontinue;\n\t\t}\n\n\t\t// This determines what gets set and translated - we don't translate Etc/* strings here, they are done later\n\t\t$exists = array(\n\t\t\t0 => ( isset( $zone[0] ) && $zone[0] ),\n\t\t\t1 => ( isset( $zone[1] ) && $zone[1] ),\n\t\t\t2 => ( isset( $zone[2] ) && $zone[2] ),\n\t\t);\n\t\t$exists[3] = ( $exists[0] && 'Etc' !== $zone[0] );\n\t\t$exists[4] = ( $exists[1] && $exists[3] );\n\t\t$exists[5] = ( $exists[2] && $exists[3] );\n\n\t\t$zonen[] = array(\n\t\t\t'continent'   => ( $exists[0] ? $zone[0] : '' ),\n\t\t\t'city'        => ( $exists[1] ? $zone[1] : '' ),\n\t\t\t'subcity'     => ( $exists[2] ? $zone[2] : '' ),\n\t\t\t't_continent' => ( $exists[3] ? translate( str_replace( '_', ' ', $zone[0] ), 'continents-cities' ) : '' ),\n\t\t\t't_city'      => ( $exists[4] ? translate( str_replace( '_', ' ', $zone[1] ), 'continents-cities' ) : '' ),\n\t\t\t't_subcity'   => ( $exists[5] ? translate( str_replace( '_', ' ', $zone[2] ), 'continents-cities' ) : '' )\n\t\t);\n\t}\n\tusort( $zonen, '_wp_timezone_choice_usort_callback' );\n\n\t$structure = array();\n\n\tif ( empty( $selected_zone ) ) {\n\t\t$structure[] = '<option selected=\"selected\" value=\"\">' . __( 'Select a city' ) . '</option>';\n\t}\n\n\tforeach ( $zonen as $key => $zone ) {\n\t\t// Build value in an array to join later\n\t\t$value = array( $zone['continent'] );\n\n\t\tif ( empty( $zone['city'] ) ) {\n\t\t\t// It's at the continent level (generally won't happen)\n\t\t\t$display = $zone['t_continent'];\n\t\t} else {\n\t\t\t// It's inside a continent group\n\n\t\t\t// Continent optgroup\n\t\t\tif ( !isset( $zonen[$key - 1] ) || $zonen[$key - 1]['continent'] !== $zone['continent'] ) {\n\t\t\t\t$label = $zone['t_continent'];\n\t\t\t\t$structure[] = '<optgroup label=\"'. esc_attr( $label ) .'\">';\n\t\t\t}\n\n\t\t\t// Add the city to the value\n\t\t\t$value[] = $zone['city'];\n\n\t\t\t$display = $zone['t_city'];\n\t\t\tif ( !empty( $zone['subcity'] ) ) {\n\t\t\t\t// Add the subcity to the value\n\t\t\t\t$value[] = $zone['subcity'];\n\t\t\t\t$display .= ' - ' . $zone['t_subcity'];\n\t\t\t}\n\t\t}\n\n\t\t// Build the value\n\t\t$value = join( '/', $value );\n\t\t$selected = '';\n\t\tif ( $value === $selected_zone ) {\n\t\t\t$selected = 'selected=\"selected\" ';\n\t\t}\n\t\t$structure[] = '<option ' . $selected . 'value=\"' . esc_attr( $value ) . '\">' . esc_html( $display ) . \"</option>\";\n\n\t\t// Close continent optgroup\n\t\tif ( !empty( $zone['city'] ) && ( !isset($zonen[$key + 1]) || (isset( $zonen[$key + 1] ) && $zonen[$key + 1]['continent'] !== $zone['continent']) ) ) {\n\t\t\t$structure[] = '</optgroup>';\n\t\t}\n\t}\n\n\t// Do UTC\n\t$structure[] = '<optgroup label=\"'. esc_attr__( 'UTC' ) .'\">';\n\t$selected = '';\n\tif ( 'UTC' === $selected_zone )\n\t\t$selected = 'selected=\"selected\" ';\n\t$structure[] = '<option ' . $selected . 'value=\"' . esc_attr( 'UTC' ) . '\">' . __('UTC') . '</option>';\n\t$structure[] = '</optgroup>';\n\n\t// Do manual UTC offsets\n\t$structure[] = '<optgroup label=\"'. esc_attr__( 'Manual Offsets' ) .'\">';\n\t$offset_range = array (-12, -11.5, -11, -10.5, -10, -9.5, -9, -8.5, -8, -7.5, -7, -6.5, -6, -5.5, -5, -4.5, -4, -3.5, -3, -2.5, -2, -1.5, -1, -0.5,\n\t\t0, 0.5, 1, 1.5, 2, 2.5, 3, 3.5, 4, 4.5, 5, 5.5, 5.75, 6, 6.5, 7, 7.5, 8, 8.5, 8.75, 9, 9.5, 10, 10.5, 11, 11.5, 12, 12.75, 13, 13.75, 14);\n\tforeach ( $offset_range as $offset ) {\n\t\tif ( 0 <= $offset )\n\t\t\t$offset_name = '+' . $offset;\n\t\telse\n\t\t\t$offset_name = (string) $offset;\n\n\t\t$offset_value = $offset_name;\n\t\t$offset_name = str_replace(array('.25','.5','.75'), array(':15',':30',':45'), $offset_name);\n\t\t$offset_name = 'UTC' . $offset_name;\n\t\t$offset_value = 'UTC' . $offset_value;\n\t\t$selected = '';\n\t\tif ( $offset_value === $selected_zone )\n\t\t\t$selected = 'selected=\"selected\" ';\n\t\t$structure[] = '<option ' . $selected . 'value=\"' . esc_attr( $offset_value ) . '\">' . esc_html( $offset_name ) . \"</option>\";\n\n\t}\n\t$structure[] = '</optgroup>';\n\n\treturn join( \"\\n\", $structure );\n}\n\n/**\n * Strip close comment and close php tags from file headers used by WP.\n *\n * @since 2.8.0\n * @access private\n *\n * @see https://core.trac.wordpress.org/ticket/8497\n *\n * @param string $str Header comment to clean up.\n * @return string\n */\nfunction _cleanup_header_comment( $str ) {\n\treturn trim(preg_replace(\"/\\s*(?:\\*\\/|\\?>).*/\", '', $str));\n}\n\n/**\n * Permanently delete comments or posts of any type that have held a status\n * of 'trash' for the number of days defined in EMPTY_TRASH_DAYS.\n *\n * The default value of `EMPTY_TRASH_DAYS` is 30 (days).\n *\n * @since 2.9.0\n *\n * @global wpdb $wpdb WordPress database abstraction object.\n */\nfunction wp_scheduled_delete() {\n\tglobal $wpdb;\n\n\t$delete_timestamp = time() - ( DAY_IN_SECONDS * EMPTY_TRASH_DAYS );\n\n\t$posts_to_delete = $wpdb->get_results($wpdb->prepare(\"SELECT post_id FROM $wpdb->postmeta WHERE meta_key = '_wp_trash_meta_time' AND meta_value < %d\", $delete_timestamp), ARRAY_A);\n\n\tforeach ( (array) $posts_to_delete as $post ) {\n\t\t$post_id = (int) $post['post_id'];\n\t\tif ( !$post_id )\n\t\t\tcontinue;\n\n\t\t$del_post = get_post($post_id);\n\n\t\tif ( !$del_post || 'trash' != $del_post->post_status ) {\n\t\t\tdelete_post_meta($post_id, '_wp_trash_meta_status');\n\t\t\tdelete_post_meta($post_id, '_wp_trash_meta_time');\n\t\t} else {\n\t\t\twp_delete_post($post_id);\n\t\t}\n\t}\n\n\t$comments_to_delete = $wpdb->get_results($wpdb->prepare(\"SELECT comment_id FROM $wpdb->commentmeta WHERE meta_key = '_wp_trash_meta_time' AND meta_value < %d\", $delete_timestamp), ARRAY_A);\n\n\tforeach ( (array) $comments_to_delete as $comment ) {\n\t\t$comment_id = (int) $comment['comment_id'];\n\t\tif ( !$comment_id )\n\t\t\tcontinue;\n\n\t\t$del_comment = get_comment($comment_id);\n\n\t\tif ( !$del_comment || 'trash' != $del_comment->comment_approved ) {\n\t\t\tdelete_comment_meta($comment_id, '_wp_trash_meta_time');\n\t\t\tdelete_comment_meta($comment_id, '_wp_trash_meta_status');\n\t\t} else {\n\t\t\twp_delete_comment( $del_comment );\n\t\t}\n\t}\n}\n\n/**\n * Retrieve metadata from a file.\n *\n * Searches for metadata in the first 8kiB of a file, such as a plugin or theme.\n * Each piece of metadata must be on its own line. Fields can not span multiple\n * lines, the value will get cut at the end of the first line.\n *\n * If the file data is not within that first 8kiB, then the author should correct\n * their plugin file and move the data headers to the top.\n *\n * @link https://codex.wordpress.org/File_Header\n *\n * @since 2.9.0\n *\n * @param string $file            Path to the file.\n * @param array  $default_headers List of headers, in the format array('HeaderKey' => 'Header Name').\n * @param string $context         Optional. If specified adds filter hook {@see 'extra_$context_headers'}.\n *                                Default empty.\n * @return array Array of file headers in `HeaderKey => Header Value` format.\n */\nfunction get_file_data( $file, $default_headers, $context = '' ) {\n\t// We don't need to write to the file, so just open for reading.\n\t$fp = fopen( $file, 'r' );\n\n\t// Pull only the first 8kiB of the file in.\n\t$file_data = fread( $fp, 8192 );\n\n\t// PHP will close file handle, but we are good citizens.\n\tfclose( $fp );\n\n\t// Make sure we catch CR-only line endings.\n\t$file_data = str_replace( \"\\r\", \"\\n\", $file_data );\n\n\t/**\n\t * Filters extra file headers by context.\n\t *\n\t * The dynamic portion of the hook name, `$context`, refers to\n\t * the context where extra headers might be loaded.\n\t *\n\t * @since 2.9.0\n\t *\n\t * @param array $extra_context_headers Empty array by default.\n\t */\n\tif ( $context && $extra_headers = apply_filters( \"extra_{$context}_headers\", array() ) ) {\n\t\t$extra_headers = array_combine( $extra_headers, $extra_headers ); // keys equal values\n\t\t$all_headers = array_merge( $extra_headers, (array) $default_headers );\n\t} else {\n\t\t$all_headers = $default_headers;\n\t}\n\n\tforeach ( $all_headers as $field => $regex ) {\n\t\tif ( preg_match( '/^[ \\t\\/*#@]*' . preg_quote( $regex, '/' ) . ':(.*)$/mi', $file_data, $match ) && $match[1] )\n\t\t\t$all_headers[ $field ] = _cleanup_header_comment( $match[1] );\n\t\telse\n\t\t\t$all_headers[ $field ] = '';\n\t}\n\n\treturn $all_headers;\n}\n\n/**\n * Returns true.\n *\n * Useful for returning true to filters easily.\n *\n * @since 3.0.0\n *\n * @see __return_false()\n *\n * @return true True.\n */\nfunction __return_true() {\n\treturn true;\n}\n\n/**\n * Returns false.\n *\n * Useful for returning false to filters easily.\n *\n * @since 3.0.0\n *\n * @see __return_true()\n *\n * @return false False.\n */\nfunction __return_false() {\n\treturn false;\n}\n\n/**\n * Returns 0.\n *\n * Useful for returning 0 to filters easily.\n *\n * @since 3.0.0\n *\n * @return int 0.\n */\nfunction __return_zero() {\n\treturn 0;\n}\n\n/**\n * Returns an empty array.\n *\n * Useful for returning an empty array to filters easily.\n *\n * @since 3.0.0\n *\n * @return array Empty array.\n */\nfunction __return_empty_array() {\n\treturn array();\n}\n\n/**\n * Returns null.\n *\n * Useful for returning null to filters easily.\n *\n * @since 3.4.0\n *\n * @return null Null value.\n */\nfunction __return_null() {\n\treturn null;\n}\n\n/**\n * Returns an empty string.\n *\n * Useful for returning an empty string to filters easily.\n *\n * @since 3.7.0\n *\n * @see __return_null()\n *\n * @return string Empty string.\n */\nfunction __return_empty_string() {\n\treturn '';\n}\n\n/**\n * Send a HTTP header to disable content type sniffing in browsers which support it.\n *\n * @since 3.0.0\n *\n * @see https://blogs.msdn.com/ie/archive/2008/07/02/ie8-security-part-v-comprehensive-protection.aspx\n * @see https://src.chromium.org/viewvc/chrome?view=rev&revision=6985\n */\nfunction send_nosniff_header() {\n\t@header( 'X-Content-Type-Options: nosniff' );\n}\n\n/**\n * Return a MySQL expression for selecting the week number based on the start_of_week option.\n *\n * @ignore\n * @since 3.0.0\n *\n * @param string $column Database column.\n * @return string SQL clause.\n */\nfunction _wp_mysql_week( $column ) {\n\tswitch ( $start_of_week = (int) get_option( 'start_of_week' ) ) {\n\tcase 1 :\n\t\treturn \"WEEK( $column, 1 )\";\n\tcase 2 :\n\tcase 3 :\n\tcase 4 :\n\tcase 5 :\n\tcase 6 :\n\t\treturn \"WEEK( DATE_SUB( $column, INTERVAL $start_of_week DAY ), 0 )\";\n\tcase 0 :\n\tdefault :\n\t\treturn \"WEEK( $column, 0 )\";\n\t}\n}\n\n/**\n * Find hierarchy loops using a callback function that maps object IDs to parent IDs.\n *\n * @since 3.1.0\n * @access private\n *\n * @param callable $callback      Function that accepts ( ID, $callback_args ) and outputs parent_ID.\n * @param int      $start         The ID to start the loop check at.\n * @param int      $start_parent  The parent_ID of $start to use instead of calling $callback( $start ).\n *                                Use null to always use $callback\n * @param array    $callback_args Optional. Additional arguments to send to $callback.\n * @return array IDs of all members of loop.\n */\nfunction wp_find_hierarchy_loop( $callback, $start, $start_parent, $callback_args = array() ) {\n\t$override = is_null( $start_parent ) ? array() : array( $start => $start_parent );\n\n\tif ( !$arbitrary_loop_member = wp_find_hierarchy_loop_tortoise_hare( $callback, $start, $override, $callback_args ) )\n\t\treturn array();\n\n\treturn wp_find_hierarchy_loop_tortoise_hare( $callback, $arbitrary_loop_member, $override, $callback_args, true );\n}\n\n/**\n * Use the \"The Tortoise and the Hare\" algorithm to detect loops.\n *\n * For every step of the algorithm, the hare takes two steps and the tortoise one.\n * If the hare ever laps the tortoise, there must be a loop.\n *\n * @since 3.1.0\n * @access private\n *\n * @param callable $callback      Function that accepts ( ID, callback_arg, ... ) and outputs parent_ID.\n * @param int      $start         The ID to start the loop check at.\n * @param array    $override      Optional. An array of ( ID => parent_ID, ... ) to use instead of $callback.\n *                                Default empty array.\n * @param array    $callback_args Optional. Additional arguments to send to $callback. Default empty array.\n * @param bool     $_return_loop  Optional. Return loop members or just detect presence of loop? Only set\n *                                to true if you already know the given $start is part of a loop (otherwise\n *                                the returned array might include branches). Default false.\n * @return mixed Scalar ID of some arbitrary member of the loop, or array of IDs of all members of loop if\n *               $_return_loop\n */\nfunction wp_find_hierarchy_loop_tortoise_hare( $callback, $start, $override = array(), $callback_args = array(), $_return_loop = false ) {\n\t$tortoise = $hare = $evanescent_hare = $start;\n\t$return = array();\n\n\t// Set evanescent_hare to one past hare\n\t// Increment hare two steps\n\twhile (\n\t\t$tortoise\n\t&&\n\t\t( $evanescent_hare = isset( $override[$hare] ) ? $override[$hare] : call_user_func_array( $callback, array_merge( array( $hare ), $callback_args ) ) )\n\t&&\n\t\t( $hare = isset( $override[$evanescent_hare] ) ? $override[$evanescent_hare] : call_user_func_array( $callback, array_merge( array( $evanescent_hare ), $callback_args ) ) )\n\t) {\n\t\tif ( $_return_loop )\n\t\t\t$return[$tortoise] = $return[$evanescent_hare] = $return[$hare] = true;\n\n\t\t// tortoise got lapped - must be a loop\n\t\tif ( $tortoise == $evanescent_hare || $tortoise == $hare )\n\t\t\treturn $_return_loop ? $return : $tortoise;\n\n\t\t// Increment tortoise by one step\n\t\t$tortoise = isset( $override[$tortoise] ) ? $override[$tortoise] : call_user_func_array( $callback, array_merge( array( $tortoise ), $callback_args ) );\n\t}\n\n\treturn false;\n}\n\n/**\n * Send a HTTP header to limit rendering of pages to same origin iframes.\n *\n * @since 3.1.3\n *\n * @see https://developer.mozilla.org/en/the_x-frame-options_response_header\n */\nfunction send_frame_options_header() {\n\t@header( 'X-Frame-Options: SAMEORIGIN' );\n}\n\n/**\n * Retrieve a list of protocols to allow in HTML attributes.\n *\n * @since 3.3.0\n * @since 4.3.0 Added 'webcal' to the protocols array.\n * @since 4.7.0 Added 'urn' to the protocols array.\n *\n * @see wp_kses()\n * @see esc_url()\n *\n * @staticvar array $protocols\n *\n * @return array Array of allowed protocols. Defaults to an array containing 'http', 'https',\n *               'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet',\n *               'mms', 'rtsp', 'svn', 'tel', 'fax', 'xmpp', 'webcal', and 'urn'.\n */\nfunction wp_allowed_protocols() {\n\tstatic $protocols = array();\n\n\tif ( empty( $protocols ) ) {\n\t\t$protocols = array( 'http', 'https', 'ftp', 'ftps', 'mailto', 'news', 'irc', 'gopher', 'nntp', 'feed', 'telnet', 'mms', 'rtsp', 'svn', 'tel', 'fax', 'xmpp', 'webcal', 'urn' );\n\t}\n\n\tif ( ! did_action( 'wp_loaded' ) ) {\n\t\t/**\n\t\t * Filters the list of protocols allowed in HTML attributes.\n\t\t *\n\t\t * @since 3.0.0\n\t\t *\n\t\t * @param array $protocols Array of allowed protocols e.g. 'http', 'ftp', 'tel', and more.\n\t\t */\n\t\t$protocols = array_unique( (array) apply_filters( 'kses_allowed_protocols', $protocols ) );\n\t}\n\n\treturn $protocols;\n}\n\n/**\n * Return a comma-separated string of functions that have been called to get\n * to the current point in code.\n *\n * @since 3.4.0\n *\n * @see https://core.trac.wordpress.org/ticket/19589\n *\n * @param string $ignore_class Optional. A class to ignore all function calls within - useful\n *                             when you want to just give info about the callee. Default null.\n * @param int    $skip_frames  Optional. A number of stack frames to skip - useful for unwinding\n *                             back to the source of the issue. Default 0.\n * @param bool   $pretty       Optional. Whether or not you want a comma separated string or raw\n *                             array returned. Default true.\n * @return string|array Either a string containing a reversed comma separated trace or an array\n *                      of individual calls.\n */\nfunction wp_debug_backtrace_summary( $ignore_class = null, $skip_frames = 0, $pretty = true ) {\n\tif ( version_compare( PHP_VERSION, '5.2.5', '>=' ) )\n\t\t$trace = debug_backtrace( false );\n\telse\n\t\t$trace = debug_backtrace();\n\n\t$caller = array();\n\t$check_class = ! is_null( $ignore_class );\n\t$skip_frames++; // skip this function\n\n\tforeach ( $trace as $call ) {\n\t\tif ( $skip_frames > 0 ) {\n\t\t\t$skip_frames--;\n\t\t} elseif ( isset( $call['class'] ) ) {\n\t\t\tif ( $check_class && $ignore_class == $call['class'] )\n\t\t\t\tcontinue; // Filter out calls\n\n\t\t\t$caller[] = \"{$call['class']}{$call['type']}{$call['function']}\";\n\t\t} else {\n\t\t\tif ( in_array( $call['function'], array( 'do_action', 'apply_filters' ) ) ) {\n\t\t\t\t$caller[] = \"{$call['function']}('{$call['args'][0]}')\";\n\t\t\t} elseif ( in_array( $call['function'], array( 'include', 'include_once', 'require', 'require_once' ) ) ) {\n\t\t\t\t$caller[] = $call['function'] . \"('\" . str_replace( array( WP_CONTENT_DIR, ABSPATH ) , '', $call['args'][0] ) . \"')\";\n\t\t\t} else {\n\t\t\t\t$caller[] = $call['function'];\n\t\t\t}\n\t\t}\n\t}\n\tif ( $pretty )\n\t\treturn join( ', ', array_reverse( $caller ) );\n\telse\n\t\treturn $caller;\n}\n\n/**\n * Retrieve ids that are not already present in the cache.\n *\n * @since 3.4.0\n * @access private\n *\n * @param array  $object_ids ID list.\n * @param string $cache_key  The cache bucket to check against.\n *\n * @return array List of ids not present in the cache.\n */\nfunction _get_non_cached_ids( $object_ids, $cache_key ) {\n\t$clean = array();\n\tforeach ( $object_ids as $id ) {\n\t\t$id = (int) $id;\n\t\tif ( !wp_cache_get( $id, $cache_key ) ) {\n\t\t\t$clean[] = $id;\n\t\t}\n\t}\n\n\treturn $clean;\n}\n\n/**\n * Test if the current device has the capability to upload files.\n *\n * @since 3.4.0\n * @access private\n *\n * @return bool Whether the device is able to upload files.\n */\nfunction _device_can_upload() {\n\tif ( ! wp_is_mobile() )\n\t\treturn true;\n\n\t$ua = $_SERVER['HTTP_USER_AGENT'];\n\n\tif ( strpos($ua, 'iPhone') !== false\n\t\t|| strpos($ua, 'iPad') !== false\n\t\t|| strpos($ua, 'iPod') !== false ) {\n\t\t\treturn preg_match( '#OS ([\\d_]+) like Mac OS X#', $ua, $version ) && version_compare( $version[1], '6', '>=' );\n\t}\n\n\treturn true;\n}\n\n/**\n * Test if a given path is a stream URL\n *\n * @since 3.5.0\n *\n * @param string $path The resource path or URL.\n * @return bool True if the path is a stream URL.\n */\nfunction wp_is_stream( $path ) {\n\tif ( false === strpos( $path, '://' ) ) {\n\t\t// $path isn't a stream\n\t\treturn false;\n\t}\n\n\t$wrappers    = stream_get_wrappers();\n\t$wrappers    = array_map( 'preg_quote', $wrappers );\n\t$wrappers_re = '(' . join( '|', $wrappers ) . ')';\n\n\treturn preg_match( \"!^$wrappers_re://!\", $path ) === 1;\n}\n\n/**\n * Test if the supplied date is valid for the Gregorian calendar.\n *\n * @since 3.5.0\n *\n * @link https://secure.php.net/manual/en/function.checkdate.php\n *\n * @param  int    $month       Month number.\n * @param  int    $day         Day number.\n * @param  int    $year        Year number.\n * @param  string $source_date The date to filter.\n * @return bool True if valid date, false if not valid date.\n */\nfunction wp_checkdate( $month, $day, $year, $source_date ) {\n\t/**\n\t * Filters whether the given date is valid for the Gregorian calendar.\n\t *\n\t * @since 3.5.0\n\t *\n\t * @param bool   $checkdate   Whether the given date is valid.\n\t * @param string $source_date Date to check.\n\t */\n\treturn apply_filters( 'wp_checkdate', checkdate( $month, $day, $year ), $source_date );\n}\n\n/**\n * Load the auth check for monitoring whether the user is still logged in.\n *\n * Can be disabled with remove_action( 'admin_enqueue_scripts', 'wp_auth_check_load' );\n *\n * This is disabled for certain screens where a login screen could cause an\n * inconvenient interruption. A filter called {@see 'wp_auth_check_load'} can be used\n * for fine-grained control.\n *\n * @since 3.6.0\n */\nfunction wp_auth_check_load() {\n\tif ( ! is_admin() && ! is_user_logged_in() )\n\t\treturn;\n\n\tif ( defined( 'IFRAME_REQUEST' ) )\n\t\treturn;\n\n\t$screen = get_current_screen();\n\t$hidden = array( 'update', 'update-network', 'update-core', 'update-core-network', 'upgrade', 'upgrade-network', 'network' );\n\t$show = ! in_array( $screen->id, $hidden );\n\n\t/**\n\t * Filters whether to load the authentication check.\n\t *\n\t * Passing a falsey value to the filter will effectively short-circuit\n\t * loading the authentication check.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param bool      $show   Whether to load the authentication check.\n\t * @param WP_Screen $screen The current screen object.\n\t */\n\tif ( apply_filters( 'wp_auth_check_load', $show, $screen ) ) {\n\t\twp_enqueue_style( 'wp-auth-check' );\n\t\twp_enqueue_script( 'wp-auth-check' );\n\n\t\tadd_action( 'admin_print_footer_scripts', 'wp_auth_check_html', 5 );\n\t\tadd_action( 'wp_print_footer_scripts', 'wp_auth_check_html', 5 );\n\t}\n}\n\n/**\n * Output the HTML that shows the wp-login dialog when the user is no longer logged in.\n *\n * @since 3.6.0\n */\nfunction wp_auth_check_html() {\n\t$login_url = wp_login_url();\n\t$current_domain = ( is_ssl() ? 'https://' : 'http://' ) . $_SERVER['HTTP_HOST'];\n\t$same_domain = ( strpos( $login_url, $current_domain ) === 0 );\n\n\t/**\n\t * Filters whether the authentication check originated at the same domain.\n\t *\n\t * @since 3.6.0\n\t *\n\t * @param bool $same_domain Whether the authentication check originated at the same domain.\n\t */\n\t$same_domain = apply_filters( 'wp_auth_check_same_domain', $same_domain );\n\t$wrap_class = $same_domain ? 'hidden' : 'hidden fallback';\n\n\t?>\n\t<div id=\"wp-auth-check-wrap\" class=\"<?php echo $wrap_class; ?>\">\n\t<div id=\"wp-auth-check-bg\"></div>\n\t<div id=\"wp-auth-check\">\n\t<button type=\"button\" class=\"wp-auth-check-close button-link\"><span class=\"screen-reader-text\"><?php _e( 'Close dialog' ); ?></span></button>\n\t<?php\n\n\tif ( $same_domain ) {\n\t\t$login_src = add_query_arg( array(\n\t\t\t'interim-login' => '1',\n\t\t\t'wp_lang'       => get_user_locale(),\n\t\t), $login_url );\n\t\t?>\n\t\t<div id=\"wp-auth-check-form\" class=\"loading\" data-src=\"<?php echo esc_url( $login_src ); ?>\"></div>\n\t\t<?php\n\t}\n\n\t?>\n\t<div class=\"wp-auth-fallback\">\n\t\t<p><b class=\"wp-auth-fallback-expired\" tabindex=\"0\"><?php _e('Session expired'); ?></b></p>\n\t\t<p><a href=\"<?php echo esc_url( $login_url ); ?>\" target=\"_blank\"><?php _e('Please log in again.'); ?></a>\n\t\t<?php _e('The login page will open in a new window. After logging in you can close it and return to this page.'); ?></p>\n\t</div>\n\t</div>\n\t</div>\n\t<?php\n}\n\n/**\n * Check whether a user is still logged in, for the heartbeat.\n *\n * Send a result that shows a log-in box if the user is no longer logged in,\n * or if their cookie is within the grace period.\n *\n * @since 3.6.0\n *\n * @global int $login_grace_period\n *\n * @param array $response  The Heartbeat response.\n * @return array $response The Heartbeat response with 'wp-auth-check' value set.\n */\nfunction wp_auth_check( $response ) {\n\t$response['wp-auth-check'] = is_user_logged_in() && empty( $GLOBALS['login_grace_period'] );\n\treturn $response;\n}\n\n/**\n * Return RegEx body to liberally match an opening HTML tag.\n *\n * Matches an opening HTML tag that:\n * 1. Is self-closing or\n * 2. Has no body but has a closing tag of the same name or\n * 3. Contains a body and a closing tag of the same name\n *\n * Note: this RegEx does not balance inner tags and does not attempt\n * to produce valid HTML\n *\n * @since 3.6.0\n *\n * @param string $tag An HTML tag name. Example: 'video'.\n * @return string Tag RegEx.\n */\nfunction get_tag_regex( $tag ) {\n\tif ( empty( $tag ) )\n\t\treturn;\n\treturn sprintf( '<%1$s[^<]*(?:>[\\s\\S]*<\\/%1$s>|\\s*\\/>)', tag_escape( $tag ) );\n}\n\n/**\n * Retrieve a canonical form of the provided charset appropriate for passing to PHP\n * functions such as htmlspecialchars() and charset html attributes.\n *\n * @since 3.6.0\n * @access private\n *\n * @see https://core.trac.wordpress.org/ticket/23688\n *\n * @param string $charset A charset name.\n * @return string The canonical form of the charset.\n */\nfunction _canonical_charset( $charset ) {\n\tif ( 'utf-8' === strtolower( $charset ) || 'utf8' === strtolower( $charset) ) {\n\n\t\treturn 'UTF-8';\n\t}\n\n\tif ( 'iso-8859-1' === strtolower( $charset ) || 'iso8859-1' === strtolower( $charset ) ) {\n\n\t\treturn 'ISO-8859-1';\n\t}\n\n\treturn $charset;\n}\n\n/**\n * Set the mbstring internal encoding to a binary safe encoding when func_overload\n * is enabled.\n *\n * When mbstring.func_overload is in use for multi-byte encodings, the results from\n * strlen() and similar functions respect the utf8 characters, causing binary data\n * to return incorrect lengths.\n *\n * This function overrides the mbstring encoding to a binary-safe encoding, and\n * resets it to the users expected encoding afterwards through the\n * `reset_mbstring_encoding` function.\n *\n * It is safe to recursively call this function, however each\n * `mbstring_binary_safe_encoding()` call must be followed up with an equal number\n * of `reset_mbstring_encoding()` calls.\n *\n * @since 3.7.0\n *\n * @see reset_mbstring_encoding()\n *\n * @staticvar array $encodings\n * @staticvar bool  $overloaded\n *\n * @param bool $reset Optional. Whether to reset the encoding back to a previously-set encoding.\n *                    Default false.\n */\nfunction mbstring_binary_safe_encoding( $reset = false ) {\n\tstatic $encodings = array();\n\tstatic $overloaded = null;\n\n\tif ( is_null( $overloaded ) )\n\t\t$overloaded = function_exists( 'mb_internal_encoding' ) && ( ini_get( 'mbstring.func_overload' ) & 2 );\n\n\tif ( false === $overloaded )\n\t\treturn;\n\n\tif ( ! $reset ) {\n\t\t$encoding = mb_internal_encoding();\n\t\tarray_push( $encodings, $encoding );\n\t\tmb_internal_encoding( 'ISO-8859-1' );\n\t}\n\n\tif ( $reset && $encodings ) {\n\t\t$encoding = array_pop( $encodings );\n\t\tmb_internal_encoding( $encoding );\n\t}\n}\n\n/**\n * Reset the mbstring internal encoding to a users previously set encoding.\n *\n * @see mbstring_binary_safe_encoding()\n *\n * @since 3.7.0\n */\nfunction reset_mbstring_encoding() {\n\tmbstring_binary_safe_encoding( true );\n}\n\n/**\n * Filter/validate a variable as a boolean.\n *\n * Alternative to `filter_var( $var, FILTER_VALIDATE_BOOLEAN )`.\n *\n * @since 4.0.0\n *\n * @param mixed $var Boolean value to validate.\n * @return bool Whether the value is validated.\n */\nfunction wp_validate_boolean( $var ) {\n\tif ( is_bool( $var ) ) {\n\t\treturn $var;\n\t}\n\n\tif ( is_string( $var ) && 'false' === strtolower( $var ) ) {\n\t\treturn false;\n\t}\n\n\treturn (bool) $var;\n}\n\n/**\n * Delete a file\n *\n * @since 4.2.0\n *\n * @param string $file The path to the file to delete.\n */\nfunction wp_delete_file( $file ) {\n\t/**\n\t * Filters the path of the file to delete.\n\t *\n\t * @since 2.1.0\n\t *\n\t * @param string $file Path to the file to delete.\n\t */\n\t$delete = apply_filters( 'wp_delete_file', $file );\n\tif ( ! empty( $delete ) ) {\n\t\t@unlink( $delete );\n\t}\n}\n\n/**\n * Deletes a file if its path is within the given directory.\n *\n * @since 4.9.7\n *\n * @param string $file      Absolute path to the file to delete.\n * @param string $directory Absolute path to a directory.\n * @return bool True on success, false on failure.\n */\nfunction wp_delete_file_from_directory( $file, $directory ) {\n\t$real_file = realpath( wp_normalize_path( $file ) );\n\t$real_directory = realpath( wp_normalize_path( $directory ) );\n\n\tif ( false === $real_file || false === $real_directory || strpos( wp_normalize_path( $real_file ), trailingslashit( wp_normalize_path( $real_directory ) ) ) !== 0 ) {\n\t\treturn false;\n\t}\n\n\twp_delete_file( $file );\n\n\treturn true;\n}\n\n/**\n * Outputs a small JS snippet on preview tabs/windows to remove `window.name` on unload.\n *\n * This prevents reusing the same tab for a preview when the user has navigated away.\n *\n * @since 4.3.0\n *\n * @global WP_Post $post\n */\nfunction wp_post_preview_js() {\n\tglobal $post;\n\n\tif ( ! is_preview() || empty( $post ) ) {\n\t\treturn;\n\t}\n\n\t// Has to match the window name used in post_submit_meta_box()\n\t$name = 'wp-preview-' . (int) $post->ID;\n\n\t?>\n\t<script>\n\t( function() {\n\t\tvar query = document.location.search;\n\n\t\tif ( query && query.indexOf( 'preview=true' ) !== -1 ) {\n\t\t\twindow.name = '<?php echo $name; ?>';\n\t\t}\n\n\t\tif ( window.addEventListener ) {\n\t\t\twindow.addEventListener( 'unload', function() { window.name = ''; }, false );\n\t\t}\n\t}());\n\t</script>\n\t<?php\n}\n\n/**\n * Parses and formats a MySQL datetime (Y-m-d H:i:s) for ISO8601/RFC3339.\n *\n * Explicitly strips timezones, as datetimes are not saved with any timezone\n * information. Including any information on the offset could be misleading.\n *\n * @since 4.4.0\n *\n * @param string $date_string Date string to parse and format.\n * @return string Date formatted for ISO8601/RFC3339.\n */\nfunction mysql_to_rfc3339( $date_string ) {\n\t$formatted = mysql2date( 'c', $date_string, false );\n\n\t// Strip timezone information\n\treturn preg_replace( '/(?:Z|[+-]\\d{2}(?::\\d{2})?)$/', '', $formatted );\n}\n\n/**\n * Attempts to raise the PHP memory limit for memory intensive processes.\n *\n * Only allows raising the existing limit and prevents lowering it.\n *\n * @since 4.6.0\n *\n * @param string $context Optional. Context in which the function is called. Accepts either 'admin',\n *                        'image', or an arbitrary other context. If an arbitrary context is passed,\n *                        the similarly arbitrary {@see '{$context}_memory_limit'} filter will be\n *                        invoked. Default 'admin'.\n * @return bool|int|string The limit that was set or false on failure.\n */\nfunction wp_raise_memory_limit( $context = 'admin' ) {\n\t// Exit early if the limit cannot be changed.\n\tif ( false === wp_is_ini_value_changeable( 'memory_limit' ) ) {\n\t\treturn false;\n\t}\n\n\t$current_limit     = @ini_get( 'memory_limit' );\n\t$current_limit_int = wp_convert_hr_to_bytes( $current_limit );\n\n\tif ( -1 === $current_limit_int ) {\n\t\treturn false;\n\t}\n\n\t$wp_max_limit     = WP_MAX_MEMORY_LIMIT;\n\t$wp_max_limit_int = wp_convert_hr_to_bytes( $wp_max_limit );\n\t$filtered_limit   = $wp_max_limit;\n\n\tswitch ( $context ) {\n\t\tcase 'admin':\n\t\t\t/**\n\t\t\t * Filters the maximum memory limit available for administration screens.\n\t\t\t *\n\t\t\t * This only applies to administrators, who may require more memory for tasks\n\t\t\t * like updates. Memory limits when processing images (uploaded or edited by\n\t\t\t * users of any role) are handled separately.\n\t\t\t *\n\t\t\t * The `WP_MAX_MEMORY_LIMIT` constant specifically defines the maximum memory\n\t\t\t * limit available when in the administration back end. The default is 256M\n\t\t\t * (256 megabytes of memory) or the original `memory_limit` php.ini value if\n\t\t\t * this is higher.\n\t\t\t *\n\t\t\t * @since 3.0.0\n\t\t\t * @since 4.6.0 The default now takes the original `memory_limit` into account.\n\t\t\t *\n\t\t\t * @param int|string $filtered_limit The maximum WordPress memory limit. Accepts an integer\n\t\t\t *                                   (bytes), or a shorthand string notation, such as '256M'.\n\t\t\t */\n\t\t\t$filtered_limit = apply_filters( 'admin_memory_limit', $filtered_limit );\n\t\t\tbreak;\n\n\t\tcase 'image':\n\t\t\t/**\n\t\t\t * Filters the memory limit allocated for image manipulation.\n\t\t\t *\n\t\t\t * @since 3.5.0\n\t\t\t * @since 4.6.0 The default now takes the original `memory_limit` into account.\n\t\t\t *\n\t\t\t * @param int|string $filtered_limit Maximum memory limit to allocate for images.\n\t\t\t *                                   Default `WP_MAX_MEMORY_LIMIT` or the original\n\t\t\t *                                   php.ini `memory_limit`, whichever is higher.\n\t\t\t *                                   Accepts an integer (bytes), or a shorthand string\n\t\t\t *                                   notation, such as '256M'.\n\t\t\t */\n\t\t\t$filtered_limit = apply_filters( 'image_memory_limit', $filtered_limit );\n\t\t\tbreak;\n\n\t\tdefault:\n\t\t\t/**\n\t\t\t * Filters the memory limit allocated for arbitrary contexts.\n\t\t\t *\n\t\t\t * The dynamic portion of the hook name, `$context`, refers to an arbitrary\n\t\t\t * context passed on calling the function. This allows for plugins to define\n\t\t\t * their own contexts for raising the memory limit.\n\t\t\t *\n\t\t\t * @since 4.6.0\n\t\t\t *\n\t\t\t * @param int|string $filtered_limit Maximum memory limit to allocate for images.\n\t\t\t *                                   Default '256M' or the original php.ini `memory_limit`,\n\t\t\t *                                   whichever is higher. Accepts an integer (bytes), or a\n\t\t\t *                                   shorthand string notation, such as '256M'.\n\t\t\t */\n\t\t\t$filtered_limit = apply_filters( \"{$context}_memory_limit\", $filtered_limit );\n\t\t\tbreak;\n\t}\n\n\t$filtered_limit_int = wp_convert_hr_to_bytes( $filtered_limit );\n\n\tif ( -1 === $filtered_limit_int || ( $filtered_limit_int > $wp_max_limit_int && $filtered_limit_int > $current_limit_int ) ) {\n\t\tif ( false !== @ini_set( 'memory_limit', $filtered_limit ) ) {\n\t\t\treturn $filtered_limit;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t} elseif ( -1 === $wp_max_limit_int || $wp_max_limit_int > $current_limit_int ) {\n\t\tif ( false !== @ini_set( 'memory_limit', $wp_max_limit ) ) {\n\t\t\treturn $wp_max_limit;\n\t\t} else {\n\t\t\treturn false;\n\t\t}\n\t}\n\n\treturn false;\n}\n\n/**\n * Generate a random UUID (version 4).\n *\n * @since 4.7.0\n *\n * @return string UUID.\n */\nfunction wp_generate_uuid4() {\n\treturn sprintf( '%04x%04x-%04x-%04x-%04x-%04x%04x%04x',\n\t\tmt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ),\n\t\tmt_rand( 0, 0xffff ),\n\t\tmt_rand( 0, 0x0fff ) | 0x4000,\n\t\tmt_rand( 0, 0x3fff ) | 0x8000,\n\t\tmt_rand( 0, 0xffff ), mt_rand( 0, 0xffff ), mt_rand( 0, 0xffff )\n\t);\n}\n\n/**\n * Validates that a UUID is valid.\n *\n * @since 4.9.0\n *\n * @param mixed $uuid    UUID to check.\n * @param int   $version Specify which version of UUID to check against. Default is none, to accept any UUID version. Otherwise, only version allowed is `4`.\n * @return bool The string is a valid UUID or false on failure.\n */\nfunction wp_is_uuid( $uuid, $version = null ) {\n\n\tif ( ! is_string( $uuid ) ) {\n\t\treturn false;\n\t}\n\n\tif ( is_numeric( $version ) ) {\n\t\tif ( 4 !== (int) $version ) {\n\t\t\t_doing_it_wrong( __FUNCTION__, __( 'Only UUID V4 is supported at this time.' ), '4.9.0' );\n\t\t\treturn false;\n\t\t}\n\t\t$regex = '/^[0-9a-f]{8}-[0-9a-f]{4}-4[0-9a-f]{3}-[89ab][0-9a-f]{3}-[0-9a-f]{12}$/';\n\t} else {\n\t\t$regex = '/^[0-9a-f]{8}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{4}-[0-9a-f]{12}$/';\n\t}\n\n\treturn (bool) preg_match( $regex, $uuid );\n}\n\n/**\n * Get last changed date for the specified cache group.\n *\n * @since 4.7.0\n *\n * @param string $group Where the cache contents are grouped.\n *\n * @return string $last_changed UNIX timestamp with microseconds representing when the group was last changed.\n */\nfunction wp_cache_get_last_changed( $group ) {\n\t$last_changed = wp_cache_get( 'last_changed', $group );\n\n\tif ( ! $last_changed ) {\n\t\t$last_changed = microtime();\n\t\twp_cache_set( 'last_changed', $last_changed, $group );\n\t}\n\n\treturn $last_changed;\n}\n\n/**\n * Send an email to the old site admin email address when the site admin email address changes.\n *\n * @since 4.9.0\n *\n * @param string $old_email   The old site admin email address.\n * @param string $new_email   The new site admin email address.\n * @param string $option_name The relevant database option name.\n */\nfunction wp_site_admin_email_change_notification( $old_email, $new_email, $option_name ) {\n\t$send = true;\n\n\t// Don't send the notification to the default 'admin_email' value.\n\tif ( 'you@example.com' === $old_email ) {\n\t\t$send = false;\n\t}\n\n\t/**\n\t * Filters whether to send the site admin email change notification email.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param bool   $send      Whether to send the email notification.\n\t * @param string $old_email The old site admin email address.\n\t * @param string $new_email The new site admin email address.\n\t */\n\t$send = apply_filters( 'send_site_admin_email_change_email', $send, $old_email, $new_email );\n\n\tif ( ! $send ) {\n\t\treturn;\n\t}\n\n\t/* translators: Do not translate OLD_EMAIL, NEW_EMAIL, SITENAME, SITEURL: those are placeholders. */\n\t$email_change_text = __( 'Hi,\n\nThis notice confirms that the admin email address was changed on ###SITENAME###.\n\nThe new admin email address is ###NEW_EMAIL###.\n\nThis email has been sent to ###OLD_EMAIL###\n\nRegards,\nAll at ###SITENAME###\n###SITEURL###' );\n\n\t$email_change_email = array(\n\t\t'to'      => $old_email,\n\t\t/* translators: Site admin email change notification email subject. %s: Site title */\n\t\t'subject' => __( '[%s] Notice of Admin Email Change' ),\n\t\t'message' => $email_change_text,\n\t\t'headers' => '',\n\t);\n\t// get site name\n\t$site_name = wp_specialchars_decode( get_option( 'blogname' ), ENT_QUOTES );\n\n\t/**\n\t * Filters the contents of the email notification sent when the site admin email address is changed.\n\t *\n\t * @since 4.9.0\n\t *\n\t * @param array $email_change_email {\n\t *            Used to build wp_mail().\n\t *\n\t *            @type string $to      The intended recipient.\n\t *            @type string $subject The subject of the email.\n\t *            @type string $message The content of the email.\n\t *                The following strings have a special meaning and will get replaced dynamically:\n\t *                - ###OLD_EMAIL### The old site admin email address.\n\t *                - ###NEW_EMAIL### The new site admin email address.\n\t *                - ###SITENAME###  The name of the site.\n\t *                - ###SITEURL###   The URL to the site.\n\t *            @type string $headers Headers.\n\t *        }\n\t * @param string $old_email The old site admin email address.\n\t * @param string $new_email The new site admin email address.\n\t */\n\t$email_change_email = apply_filters( 'site_admin_email_change_email', $email_change_email, $old_email, $new_email );\n\n\t$email_change_email['message'] = str_replace( '###OLD_EMAIL###', $old_email, $email_change_email['message'] );\n\t$email_change_email['message'] = str_replace( '###NEW_EMAIL###', $new_email, $email_change_email['message'] );\n\t$email_change_email['message'] = str_replace( '###SITENAME###',  $site_name, $email_change_email['message'] );\n\t$email_change_email['message'] = str_replace( '###SITEURL###',   home_url(), $email_change_email['message'] );\n\n\twp_mail( $email_change_email['to'], sprintf(\n\t\t$email_change_email['subject'],\n\t\t$site_name\n\t), $email_change_email['message'], $email_change_email['headers'] );\n}\n\n/**\n * Return an anonymized IPv4 or IPv6 address.\n *\n * @since 4.9.6 Abstracted from `WP_Community_Events::get_unsafe_client_ip()`.\n *\n * @param  string $ip_addr        The IPv4 or IPv6 address to be anonymized.\n * @param  bool   $ipv6_fallback  Optional. Whether to return the original IPv6 address if the needed functions\n *                                to anonymize it are not present. Default false, return `::` (unspecified address).\n * @return string  The anonymized IP address.\n */\nfunction wp_privacy_anonymize_ip( $ip_addr, $ipv6_fallback = false ) {\n\t// Detect what kind of IP address this is.\n\t$ip_prefix = '';\n\t$is_ipv6   = substr_count( $ip_addr, ':' ) > 1;\n\t$is_ipv4   = ( 3 === substr_count( $ip_addr, '.' ) );\n\n\tif ( $is_ipv6 && $is_ipv4 ) {\n\t\t// IPv6 compatibility mode, temporarily strip the IPv6 part, and treat it like IPv4.\n\t\t$ip_prefix = '::ffff:';\n\t\t$ip_addr   = preg_replace( '/^\\[?[0-9a-f:]*:/i', '', $ip_addr );\n\t\t$ip_addr   = str_replace( ']', '', $ip_addr );\n\t\t$is_ipv6   = false;\n\t}\n\n\tif ( $is_ipv6 ) {\n\t\t// IPv6 addresses will always be enclosed in [] if there's a port.\n\t\t$left_bracket  = strpos( $ip_addr, '[' );\n\t\t$right_bracket = strpos( $ip_addr, ']' );\n\t\t$percent       = strpos( $ip_addr, '%' );\n\t\t$netmask       = 'ffff:ffff:ffff:ffff:0000:0000:0000:0000';\n\n\t\t// Strip the port (and [] from IPv6 addresses), if they exist.\n\t\tif ( false !== $left_bracket && false !== $right_bracket ) {\n\t\t\t$ip_addr = substr( $ip_addr, $left_bracket + 1, $right_bracket - $left_bracket - 1 );\n\t\t} elseif ( false !== $left_bracket || false !== $right_bracket ) {\n\t\t\t// The IP has one bracket, but not both, so it's malformed.\n\t\t\treturn '::';\n\t\t}\n\n\t\t// Strip the reachability scope.\n\t\tif ( false !== $percent ) {\n\t\t\t$ip_addr = substr( $ip_addr, 0, $percent );\n\t\t}\n\n\t\t// No invalid characters should be left.\n\t\tif ( preg_match( '/[^0-9a-f:]/i', $ip_addr ) ) {\n\t\t\treturn '::';\n\t\t}\n\n\t\t// Partially anonymize the IP by reducing it to the corresponding network ID.\n\t\tif ( function_exists( 'inet_pton' ) && function_exists( 'inet_ntop' ) ) {\n\t\t\t$ip_addr = inet_ntop( inet_pton( $ip_addr ) & inet_pton( $netmask ) );\n\t\t\tif ( false === $ip_addr) {\n\t\t\t\treturn '::';\n\t\t\t}\n\t\t} elseif ( ! $ipv6_fallback ) {\n\t\t\treturn '::';\n\t\t}\n\t} elseif ( $is_ipv4 ) {\n\t\t// Strip any port and partially anonymize the IP.\n\t\t$last_octet_position = strrpos( $ip_addr, '.' );\n\t\t$ip_addr             = substr( $ip_addr, 0, $last_octet_position ) . '.0';\n\t} else {\n\t\treturn '0.0.0.0';\n\t}\n\n\t// Restore the IPv6 prefix to compatibility mode addresses.\n\treturn $ip_prefix . $ip_addr;\n}\n\n/**\n * Return uniform \"anonymous\" data by type.\n *\n * @since 4.9.6\n *\n * @param  string $type The type of data to be anonymized.\n * @param  string $data Optional The data to be anonymized.\n * @return string The anonymous data for the requested type.\n */\nfunction wp_privacy_anonymize_data( $type, $data = '' ) {\n\n\tswitch ( $type ) {\n\t\tcase 'email':\n\t\t\t$anonymous = 'deleted@site.invalid';\n\t\t\tbreak;\n\t\tcase 'url':\n\t\t\t$anonymous = 'https://site.invalid';\n\t\t\tbreak;\n\t\tcase 'ip':\n\t\t\t$anonymous = wp_privacy_anonymize_ip( $data );\n\t\t\tbreak;\n\t\tcase 'date':\n\t\t\t$anonymous = '0000-00-00 00:00:00';\n\t\t\tbreak;\n\t\tcase 'text':\n\t\t\t/* translators: deleted text */\n\t\t\t$anonymous = __( '[deleted]' );\n\t\t\tbreak;\n\t\tcase 'longtext':\n\t\t\t/* translators: deleted long text */\n\t\t\t$anonymous = __( 'This content was deleted by the author.' );\n\t\t\tbreak;\n\t\tdefault:\n\t\t\t$anonymous = '';\n\t}\n\n\t/**\n\t * Filters the anonymous data for each type.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param string $anonymous Anonymized data.\n\t * @param string $type      Type of the data.\n\t * @param string $data      Original data.\n\t */\n\treturn apply_filters( 'wp_privacy_anonymize_data', $anonymous, $type, $data );\n}\n\n/**\n * Returns the directory used to store personal data export files.\n *\n * @since 4.9.6\n *\n * @see wp_privacy_exports_url\n *\n * @return string Exports directory.\n */\nfunction wp_privacy_exports_dir() {\n\t$upload_dir  = wp_upload_dir();\n\t$exports_dir = trailingslashit( $upload_dir['basedir'] ) . 'wp-personal-data-exports/';\n\n\t/**\n\t * Filters the directory used to store personal data export files.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param string $exports_dir Exports directory.\n\t */\n\treturn apply_filters( 'wp_privacy_exports_dir', $exports_dir );\n}\n\n/**\n * Returns the URL of the directory used to store personal data export files.\n *\n * @since 4.9.6\n *\n * @see wp_privacy_exports_dir\n *\n * @return string Exports directory URL.\n */\nfunction wp_privacy_exports_url() {\n\t$upload_dir  = wp_upload_dir();\n\t$exports_url = trailingslashit( $upload_dir['baseurl'] ) . 'wp-personal-data-exports/';\n\n\t/**\n\t * Filters the URL of the directory used to store personal data export files.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param string $exports_url Exports directory URL.\n\t */\n\treturn apply_filters( 'wp_privacy_exports_url', $exports_url );\n}\n\n/**\n * Schedule a `WP_Cron` job to delete expired export files.\n *\n * @since 4.9.6\n */\nfunction wp_schedule_delete_old_privacy_export_files() {\n\tif ( wp_installing() ) {\n\t\treturn;\n\t}\n\n\tif ( ! wp_next_scheduled( 'wp_privacy_delete_old_export_files' ) ) {\n\t\twp_schedule_event( time(), 'hourly', 'wp_privacy_delete_old_export_files' );\n\t}\n}\n\n/**\n * Cleans up export files older than three days old.\n *\n * The export files are stored in `wp-content/uploads`, and are therefore publicly\n * accessible. A CSPRN is appended to the filename to mitigate the risk of an\n * unauthorized person downloading the file, but it is still possible. Deleting\n * the file after the data subject has had a chance to delete it adds an additional\n * layer of protection.\n *\n * @since 4.9.6\n */\nfunction wp_privacy_delete_old_export_files() {\n\trequire_once( ABSPATH . 'wp-admin/includes/file.php' );\n\n\t$exports_dir  = wp_privacy_exports_dir();\n\t$export_files = list_files( $exports_dir, 100, array( 'index.html' ) );\n\n\t/**\n\t * Filters the lifetime, in seconds, of a personal data export file.\n\t *\n\t * By default, the lifetime is 3 days. Once the file reaches that age, it will automatically\n\t * be deleted by a cron job.\n\t *\n\t * @since 4.9.6\n\t *\n\t * @param int $expiration The expiration age of the export, in seconds.\n\t */\n\t$expiration = apply_filters( 'wp_privacy_export_expiration', 3 * DAY_IN_SECONDS );\n\n\tforeach ( (array) $export_files as $export_file ) {\n\t\t$file_age_in_seconds = time() - filemtime( $export_file );\n\n\t\tif ( $expiration < $file_age_in_seconds ) {\n\t\t\tunlink( $export_file );\n\t\t}\n\t}\n}\n", "<?php\n/**\n * The WordPress version string\n *\n * @global string $wp_version\n */\n$wp_version = '5.0.1-alpha-43988';\n\n/**\n * Holds the WordPress DB revision, increments when changes are made to the WordPress DB schema.\n *\n * @global int $wp_db_version\n */\n$wp_db_version = 43764;\n\n/**\n * Holds the TinyMCE version\n *\n * @global string $tinymce_version\n */\n$tinymce_version = '4800-20180716';\n\n/**\n * Holds the required PHP version\n *\n * @global string $required_php_version\n */\n$required_php_version = '5.2.4';\n\n/**\n * Holds the required MySQL version\n *\n * @global string $required_mysql_version\n */\n$required_mysql_version = '5.0';\n"], "filenames": ["wp-includes/functions.php", "wp-includes/version.php"], "buggy_code_start_loc": [2351, 7], "buggy_code_end_loc": [2362, 8], "fixing_code_start_loc": [2352, 7], "fixing_code_end_loc": [2398, 8], "type": "CWE-79", "message": "In WordPress before 4.9.9 and 5.x before 5.0.1, when the Apache HTTP Server is used, authors could upload crafted files that bypass intended MIME type restrictions, leading to XSS, as demonstrated by a .jpg file without JPEG data.", "other": {"cve": {"id": "CVE-2018-20149", "sourceIdentifier": "cve@mitre.org", "published": "2018-12-14T20:29:00.437", "lastModified": "2019-03-04T14:20:30.327", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "In WordPress before 4.9.9 and 5.x before 5.0.1, when the Apache HTTP Server is used, authors could upload crafted files that bypass intended MIME type restrictions, leading to XSS, as demonstrated by a .jpg file without JPEG data."}, {"lang": "es", "value": "En WordPress, en versiones anteriores a la 4.9.9 y versiones 5.x anteriores a la 5.0.1, cuando se emplea el servidor HTTP de Apache, los autores podr\u00edan subir archivos arbitrarios que omiten las restricciones de tipo MIME planeadas, lo que conduce a Cross-Site Scripting (XSS). Esto queda demostrado por un archivo .jpg sin datos JPEG."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 3.5}, "baseSeverity": "LOW", "exploitabilityScore": 6.8, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionEndExcluding": "4.9.9", "matchCriteriaId": "CEEA870E-2BB4-4720-A3D9-1FFBA5596D94"}, {"vulnerable": true, "criteria": "cpe:2.3:a:wordpress:wordpress:*:*:*:*:*:*:*:*", "versionStartIncluding": "5.0", "versionEndExcluding": "5.0.1", "matchCriteriaId": "5CCEB112-4070-4BB4-8974-C289FAF79E79"}]}]}, {"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:8.0:*:*:*:*:*:*:*", "matchCriteriaId": "C11E6FB0-C8C0-4527-9AA0-CB9B316F8F43"}, {"vulnerable": true, "criteria": "cpe:2.3:o:debian:debian_linux:9.0:*:*:*:*:*:*:*", "matchCriteriaId": "DEECE5FC-CACF-4496-A3E7-164736409252"}]}]}], "references": [{"url": "http://www.securityfocus.com/bid/106220", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://codex.wordpress.org/Version_4.9.9", "source": "cve@mitre.org", "tags": ["Product", "Vendor Advisory"]}, {"url": "https://github.com/WordPress/WordPress/commit/246a70bdbfac3bd45ff71c7941deef1bb206b19a", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://lists.debian.org/debian-lts-announce/2019/02/msg00019.html", "source": "cve@mitre.org", "tags": ["Mailing List", "Third Party Advisory"]}, {"url": "https://wordpress.org/news/2018/12/wordpress-5-0-1-security-release/", "source": "cve@mitre.org", "tags": ["Vendor Advisory", "Release Notes"]}, {"url": "https://wordpress.org/support/wordpress-version/version-5-0-1/", "source": "cve@mitre.org", "tags": ["Release Notes", "Vendor Advisory"]}, {"url": "https://wpvulndb.com/vulnerabilities/9175", "source": "cve@mitre.org", "tags": ["Vendor Advisory"]}, {"url": "https://www.debian.org/security/2019/dsa-4401", "source": "cve@mitre.org", "tags": ["Third Party Advisory"]}, {"url": "https://www.zdnet.com/article/wordpress-plugs-bug-that-led-to-google-indexing-some-user-passwords/", "source": "cve@mitre.org", "tags": ["Press/Media Coverage", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/WordPress/WordPress/commit/246a70bdbfac3bd45ff71c7941deef1bb206b19a"}}