{"buggy_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\n/**\n * trigger TYPES\n */\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions\");\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.AbstractCondition\");\npimcore.plugin.cmf.rule.conditions.AbstractCondition = Class.create({\n    name: '',\n    data: {},\n    options: {},\n    implementationClass: '',\n\n    initialize: function (data) {\n\n        this.data = data;\n        this.options = typeof data.options == 'object' ? data.options : {}\n    },\n\n    getIcon: function(){\n        return 'plugin_cmf_icon_actiontriggerrule_' + this.name\n    },\n\n    getId: function() {\n        return 'plugin_cmf_actiontriggerrule_condition' + this.name\n    },\n\n    getNiceName: function() {\n        return t(this.getId());\n    },\n\n    getImplementationClass: function() {\n        return this.implementationClass;\n    },\n\n\n    getFormItems: function() {\n        return [];\n    },\n\n    getTopBar: function (index, parent) {\n        var me = this;\n\n        var data = this.data;\n\n\n        var toggleGroup = \"g_\" + index + parent.rule.id;\n        if(!data[\"operator\"]) {\n            data.operator = \"and\";\n        }\n\n        return [{\n            iconCls: this.getIcon(),\n            disabled: true\n        }, {\n            xtype: \"tbtext\",\n            text: \"<b>\" + this.getNiceName() + \"</b>\"\n        },\"-\",{\n            iconCls: \"pimcore_icon_up\",\n            handler: function (blockId, parent) {\n\n                var container = parent.conditionsContainer;\n                var blockElement = Ext.getCmp(blockId);\n                var index = me.detectBlockIndex(blockElement, container);\n\n                var newIndex = index-1;\n                if(newIndex < 0) {\n                    newIndex = 0;\n                }\n\n                container.remove(blockElement, false);\n                container.insert(newIndex, blockElement);\n\n                parent.recalculateButtonStatus();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n\n                pimcore.layout.refresh();\n            }.bind(window, index, parent)\n        },{\n            iconCls: \"pimcore_icon_down\",\n            handler: function (blockId, parent) {\n\n                var container = parent.conditionsContainer;\n                var blockElement = Ext.getCmp(blockId);\n                var index = me.detectBlockIndex(blockElement, container);\n\n                container.remove(blockElement, false);\n                container.insert(index+1, blockElement);\n\n                parent.recalculateButtonStatus();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n\n                pimcore.layout.refresh();\n\n            }.bind(window, index, parent)\n        },\"-\", {\n            text: t(\"AND\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_and\",\n            pressed: (data.operator == \"and\") ? true : false\n        },{\n            text: t(\"OR\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_or\",\n            pressed: (data.operator == \"or\") ? true : false\n        },{\n            text: t(\"AND_NOT\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_and_not\",\n            pressed: (data.operator == \"and_not\") ? true : false\n        },\"->\",{\n            iconCls: \"pimcore_icon_delete\",\n            handler: function (index, parent) {\n                parent.conditionsContainer.remove(Ext.getCmp(index));\n                parent.recalculateButtonStatus();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n            }.bind(window, index, parent)\n        }];\n    },\n\n    /**\n     * macro to get the right index\n     * @param blockElement\n     * @param container\n     * @returns {*}\n     */\n    detectBlockIndex: function (blockElement, container) {\n        // detect index\n        var index;\n\n        for(var s=0; s<container.items.items.length; s++) {\n            if(container.items.items[s].getId() == blockElement.getId()) {\n                index = s;\n                break;\n            }\n        }\n        return index;\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.CountActivities\");\npimcore.plugin.cmf.rule.conditions.CountActivities = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'CountActivities',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\CountActivities',\n    getFormItems: function () {\n\n        return [\n            {\n                xtype: \"combo\",\n                name: \"type\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_countactivities_type\"),\n                width: 450,\n                labelWidth: 160,\n                value: this.options.type,\n                triggerAction: \"all\",\n                mode: \"local\",\n                disableKeyFilter: true,\n                store: new Ext.data.JsonStore({\n                    proxy: {\n                        autoDestroy: true,\n                        type: 'ajax',\n                        url: '/admin/customermanagementframework/helper/activity-types'\n                    },\n                    fields: ['name']\n                }),\n                valueField: 'name',\n                displayField: 'name',\n                listeners: {\n                    afterrender: function (el) {\n                        el.getStore().load();\n                    }\n                }\n            },\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_number_condition\"),\n                labelWidth: 50,\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                },\n                items: [\n                    {\n                        xtype: \"combobox\",\n                        name: \"operator\",\n                        width: 270,\n                        store: Ext.data.ArrayStore({\n                            fields: ['operator', 'label'],\n                            data: [\n                                ['%', t('plugin_cmf_actiontriggerrule_number_condition_%')],\n                                ['=', t('plugin_cmf_actiontriggerrule_number_condition_=')],\n                                ['<', t('plugin_cmf_actiontriggerrule_number_condition_<')],\n                                ['<=', t('plugin_cmf_actiontriggerrule_number_condition_<=')],\n                                ['>', t('plugin_cmf_actiontriggerrule_number_condition_>')],\n                                ['>=', t('plugin_cmf_actiontriggerrule_number_condition_>=')]\n                            ]\n                        }),\n                        value: this.options.operator ? this.options.operator : '=',\n                        displayField: 'label',\n                        valueField: 'operator'\n                    },\n                    {\n                        xtype: \"numberfield\",\n                        name: \"count\",\n                        width: 90,\n                        value: this.options.count\n                    }\n                ]\n            }\n\n\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.Segment\");\npimcore.plugin.cmf.rule.conditions.Segment = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'Segment',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\Segment',\n    getFormItems: function () {\n\n        return [\n            {\n                name: \"segment\",\n                fieldLabel: t('segment'),\n                xtype: \"textfield\",\n                width: 500,\n                cls: \"input_drop_target\",\n                value: this.options.segment,\n                listeners: {\n                    \"render\": function (el) {\n                        new Ext.dd.DropZone(el.getEl(), {\n                            reference: this,\n                            ddGroup: \"element\",\n                            getTargetFromEvent: function (e) {\n                                return this.getEl();\n                            }.bind(el),\n\n                            onNodeOver: function (target, dd, e, data) {\n\n\n                                data = data.records[0].data;\n\n                                if(data.type != 'object') {\n                                    return Ext.dd.DropZone.prototype.dropNotAllowed;\n                                }\n\n\n                                if(data.className != 'CustomerSegment') {\n                                    return Ext.dd.DropZone.prototype.dropNotAllowed;\n                                }\n\n                                return Ext.dd.DropZone.prototype.dropAllowed;\n                            },\n\n                            onNodeDrop: function (target, dd, e, data) {\n\n\n                                data = data.records[0].data;\n\n                                if(data.type != 'object') {\n                                    return false;\n                                }\n\n                                if(data.className != 'CustomerSegment') {\n                                    return false;\n                                }\n\n                                this.setValue(data.path);\n                                return true;\n                            }.bind(el)\n                        });\n                    }\n                }\n            },\n            {\n                xtype: \"checkbox\",\n                name:'not',\n                value:this.options.not,\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_not\"),\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                }\n            }\n\n\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.Customer\");\npimcore.plugin.cmf.rule.conditions.Customer = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'Customer',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\Customer',\n    getFormItems: function () {\n\n        return [\n            {\n                name: \"customer\",\n                fieldLabel: t('plugin_cmf_customer'),\n                xtype: \"textfield\",\n                width: 500,\n                cls: \"input_drop_target\",\n                value: this.options.customer,\n                listeners: {\n                    \"render\": function (el) {\n                        new Ext.dd.DropZone(el.getEl(), {\n                            reference: this,\n                            ddGroup: \"element\",\n                            getTargetFromEvent: function (e) {\n                                return this.getEl();\n                            }.bind(el),\n\n                            onNodeOver: function (target, dd, e, data) {\n\n\n                                data = data.records[0].data;\n\n                                if(data.type != 'object') {\n                                    return Ext.dd.DropZone.prototype.dropNotAllowed;\n                                }\n\n\n                                return Ext.dd.DropZone.prototype.dropAllowed;\n                            },\n\n                            onNodeDrop: function (target, dd, e, data) {\n\n\n                                data = data.records[0].data;\n\n                                if(data.type != 'object') {\n                                    return false;\n                                }\n\n                                this.setValue(data.path);\n                                return true;\n                            }.bind(el)\n                        });\n                    }\n                }\n            },\n            {\n                xtype: \"checkbox\",\n                name:'not',\n                value:this.options.not,\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_not\"),\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                }\n            }\n\n\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.CountTrackedSegment\");\npimcore.plugin.cmf.rule.conditions.CountTrackedSegment = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'CountTrackedSegment',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\CountTrackedSegment',\n\n    customSaveHandler: function() {\n        return {\n            'count': this.countField.getValue(),\n            'operator': this.operatorField.getValue(),\n            'segments': this.objectList.getValue()\n        };\n    },\n\n    getFormItems: function () {\n        var segments = this.options ? this.options.segments : [];\n\n        this.objectList = new pimcore.bundle.EcommerceFramework.pricing.config.objects(segments, {\n            classes: [\n                \"CustomerSegment\"\n            ],\n            name: \"segments\",\n            title: t(\"plugin_cmf_actiontriggerrule_for_condition_segments\"),\n            visibleFields: \"path\",\n            height: 200,\n            width: 600,\n            columns: [],\n\n            // ?\n            columnType: null,\n            datatype: \"data\",\n            fieldtype: \"objects\",\n\n            // ??\n            index: false,\n            invisible: false,\n            lazyLoading: false,\n            locked: false,\n            mandatory: false,\n            maxItems: \"\",\n            noteditable: false,\n            permissions: null,\n            phpdocType: \"array\",\n            queryColumnType: \"text\",\n            relationType: true,\n            style: \"\",\n            tooltip: \"\",\n            visibleGridView: false,\n            visibleSearch: false\n        });\n\n        this.operatorField = Ext.create('Ext.form.field.ComboBox', {\n            //xtype: \"combobox\",\n            name: \"operator\",\n            width: 270,\n            store: Ext.data.ArrayStore({\n                fields: ['operator', 'label'],\n                data: [\n                    ['%', t('plugin_cmf_actiontriggerrule_number_condition_%')],\n                    ['=', t('plugin_cmf_actiontriggerrule_number_condition_=')],\n                    ['<', t('plugin_cmf_actiontriggerrule_number_condition_<')],\n                    ['<=', t('plugin_cmf_actiontriggerrule_number_condition_<=')],\n                    ['>', t('plugin_cmf_actiontriggerrule_number_condition_>')],\n                    ['>=', t('plugin_cmf_actiontriggerrule_number_condition_>=')]\n                ]\n            }),\n            value: this.options.operator ? this.options.operator : '>=',\n            displayField: 'label',\n            valueField: 'operator'\n        });\n        this.countField = Ext.create('Ext.form.field.Number', {\n            //xtype: \"numberfield\",\n            name: \"count\",\n            width: 90,\n            value: this.options.count\n        });\n\n        return [\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_number_condition\"),\n                labelWidth: 50,\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                },\n                items: [\n                    this.operatorField,\n                    this.countField\n                ]\n            },\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_for_condition\"),\n                labelWidth: 50,\n                height: 220,\n                layout: {\n                    type: 'vbox'\n                },\n                items: [\n                    this.objectList.getLayoutEdit(),\n                    {\n                        xtype: 'panel',\n                        html: t(\"plugin_cmf_actiontriggerrule_for_condition_empty_all\")\n                    }\n                ]\n            }\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.CountTargetGroupWeight\");\npimcore.plugin.cmf.rule.conditions.CountTargetGroupWeight = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'CountTargetGroupWeight',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\CountTargetGroupWeight',\n    getFormItems: function () {\n        return [\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_number_condition\"),\n                labelWidth: 50,\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                },\n                items: [\n                    {\n                        xtype: \"combobox\",\n                        name: \"operator\",\n                        width: 270,\n                        store: Ext.data.ArrayStore({\n                            fields: ['operator', 'label'],\n                            data: [\n                                ['%', t('plugin_cmf_actiontriggerrule_number_condition_%')],\n                                ['=', t('plugin_cmf_actiontriggerrule_number_condition_=')],\n                                ['<', t('plugin_cmf_actiontriggerrule_number_condition_<')],\n                                ['<=', t('plugin_cmf_actiontriggerrule_number_condition_<=')],\n                                ['>', t('plugin_cmf_actiontriggerrule_number_condition_>')],\n                                ['>=', t('plugin_cmf_actiontriggerrule_number_condition_>=')]\n                            ]\n                        }),\n                        value: this.options.operator ? this.options.operator : '>=',\n                        displayField: 'label',\n                        valueField: 'operator'\n                    },\n                    {\n                        xtype: \"numberfield\",\n                        name: \"count\",\n                        width: 90,\n                        value: this.options.count\n                    }\n                ]\n            },\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_for_condition\"),\n                labelWidth: 50,\n                height: 210,\n                layout: {\n                    type: 'vbox'\n                },\n                items: [\n                    {\n                        xtype: \"multiselect\",\n                        name: \"targetGroup\",\n                        displayField: 'text',\n                        valueField: \"id\",\n                        store: pimcore.globalmanager.get(\"target_group_store\"),\n                        editable: false,\n                        width: 365,\n                        triggerAction: 'all',\n                        height: 180,\n                        mode: \"local\",\n                        value: this.options.targetGroup,\n                        emptyText: t(\"select_a_target_group\")\n                    },\n                    {\n                        xtype: 'panel',\n                        html: t(\"plugin_cmf_actiontriggerrule_for_condition_empty_all\")\n                    }\n                ]\n            }\n\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.CustomerField\");\npimcore.plugin.cmf.rule.conditions.CustomerField = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'CustomerField',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\CustomerField',\n    getFormItems: function () {\n        return [\n            {\n                xtype: 'panel',\n                html: '<div style=\"margin-bottom: 10px; padding: 5px 10px; background-color: #d9edf7; border-color: #bce8f1 !important; color: #31708f;\">' + t(\"plugin_cmf_actiontriggerrule_customerfield_explanation\") + '</div>'\n            },\n            {\n                xtype: \"fieldcontainer\",\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                },\n                items: [\n                    {\n                        xtype: \"textfield\",\n                        fieldLabel: t(\"plugin_cmf_actiontriggerrule_fieldname_condition\"),\n                        name: \"fieldname\",\n                        style: \"margin-right: 10px;\",\n                        width: 365,\n                        value: this.options.fieldname,\n                    },\n                    {\n                        xtype: \"textfield\",\n                        fieldLabel: t(\"plugin_cmf_actiontriggerrule_fieldvalue_condition\"),\n                        name: \"fieldvalue\",\n                        width: 365,\n                        value: this.options.fieldvalue\n                    }\n                ]\n            },\n            {\n                xtype: \"checkbox\",\n                name:'not',\n                value:this.options.not,\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_not\"),\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                }\n            }\n\n        ];\n    }\n});"], "fixing_code": ["/**\n * Pimcore\n *\n * This source file is available under two different licenses:\n * - GNU General Public License version 3 (GPLv3)\n * - Pimcore Commercial License (PCL)\n * Full copyright and license information is available in\n * LICENSE.md which is distributed with this source code.\n *\n *  @copyright  Copyright (c) Pimcore GmbH (http://www.pimcore.org)\n *  @license    http://www.pimcore.org/license     GPLv3 and PCL\n */\n\n\n/**\n * trigger TYPES\n */\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions\");\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.AbstractCondition\");\npimcore.plugin.cmf.rule.conditions.AbstractCondition = Class.create({\n    name: '',\n    data: {},\n    options: {},\n    implementationClass: '',\n\n    initialize: function (data) {\n\n        this.data = data;\n        this.options = typeof data.options == 'object' ? data.options : {}\n    },\n\n    getIcon: function(){\n        return 'plugin_cmf_icon_actiontriggerrule_' + this.name\n    },\n\n    getId: function() {\n        return 'plugin_cmf_actiontriggerrule_condition' + this.name\n    },\n\n    getNiceName: function() {\n        return t(this.getId());\n    },\n\n    getImplementationClass: function() {\n        return this.implementationClass;\n    },\n\n\n    getFormItems: function() {\n        return [];\n    },\n\n    getTopBar: function (index, parent) {\n        var me = this;\n\n        var data = this.data;\n\n\n        var toggleGroup = \"g_\" + index + parent.rule.id;\n        if(!data[\"operator\"]) {\n            data.operator = \"and\";\n        }\n\n        return [{\n            iconCls: this.getIcon(),\n            disabled: true\n        }, {\n            xtype: \"tbtext\",\n            text: \"<b>\" + this.getNiceName() + \"</b>\"\n        },\"-\",{\n            iconCls: \"pimcore_icon_up\",\n            handler: function (blockId, parent) {\n\n                var container = parent.conditionsContainer;\n                var blockElement = Ext.getCmp(blockId);\n                var index = me.detectBlockIndex(blockElement, container);\n\n                var newIndex = index-1;\n                if(newIndex < 0) {\n                    newIndex = 0;\n                }\n\n                container.remove(blockElement, false);\n                container.insert(newIndex, blockElement);\n\n                parent.recalculateButtonStatus();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n\n                pimcore.layout.refresh();\n            }.bind(window, index, parent)\n        },{\n            iconCls: \"pimcore_icon_down\",\n            handler: function (blockId, parent) {\n\n                var container = parent.conditionsContainer;\n                var blockElement = Ext.getCmp(blockId);\n                var index = me.detectBlockIndex(blockElement, container);\n\n                container.remove(blockElement, false);\n                container.insert(index+1, blockElement);\n\n                parent.recalculateButtonStatus();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n\n                pimcore.layout.refresh();\n\n            }.bind(window, index, parent)\n        },\"-\", {\n            text: t(\"AND\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_and\",\n            pressed: (data.operator == \"and\") ? true : false\n        },{\n            text: t(\"OR\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_or\",\n            pressed: (data.operator == \"or\") ? true : false\n        },{\n            text: t(\"AND_NOT\"),\n            toggleGroup: toggleGroup,\n            enableToggle: true,\n            itemId: \"toggle_and_not\",\n            pressed: (data.operator == \"and_not\") ? true : false\n        },\"->\",{\n            iconCls: \"pimcore_icon_delete\",\n            handler: function (index, parent) {\n                parent.conditionsContainer.remove(Ext.getCmp(index));\n                parent.recalculateButtonStatus();\n                parent.recalculateBracketIdent(parent.conditionsContainer.items);\n            }.bind(window, index, parent)\n        }];\n    },\n\n    /**\n     * macro to get the right index\n     * @param blockElement\n     * @param container\n     * @returns {*}\n     */\n    detectBlockIndex: function (blockElement, container) {\n        // detect index\n        var index;\n\n        for(var s=0; s<container.items.items.length; s++) {\n            if(container.items.items[s].getId() == blockElement.getId()) {\n                index = s;\n                break;\n            }\n        }\n        return index;\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.CountActivities\");\npimcore.plugin.cmf.rule.conditions.CountActivities = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'CountActivities',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\CountActivities',\n    getFormItems: function () {\n\n        return [\n            {\n                xtype: \"combo\",\n                name: \"type\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_countactivities_type\"),\n                width: 450,\n                labelWidth: 160,\n                value: this.options.type,\n                triggerAction: \"all\",\n                mode: \"local\",\n                disableKeyFilter: true,\n                store: new Ext.data.JsonStore({\n                    proxy: {\n                        autoDestroy: true,\n                        type: 'ajax',\n                        url: '/admin/customermanagementframework/helper/activity-types'\n                    },\n                    fields: ['name']\n                }),\n                valueField: 'name',\n                displayField: 'name',\n                listeners: {\n                    afterrender: function (el) {\n                        el.getStore().load();\n                    }\n                }\n            },\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_number_condition\"),\n                labelWidth: 50,\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                },\n                items: [\n                    {\n                        xtype: \"combobox\",\n                        name: \"operator\",\n                        width: 270,\n                        store: Ext.data.ArrayStore({\n                            fields: ['operator', 'label'],\n                            data: [\n                                ['%', t('plugin_cmf_actiontriggerrule_number_condition_%')],\n                                ['=', t('plugin_cmf_actiontriggerrule_number_condition_=')],\n                                ['<', t('plugin_cmf_actiontriggerrule_number_condition_<')],\n                                ['<=', t('plugin_cmf_actiontriggerrule_number_condition_<=')],\n                                ['>', t('plugin_cmf_actiontriggerrule_number_condition_>')],\n                                ['>=', t('plugin_cmf_actiontriggerrule_number_condition_>=')]\n                            ]\n                        }),\n                        value: this.options.operator ? this.options.operator : '=',\n                        displayField: 'label',\n                        valueField: 'operator'\n                    },\n                    {\n                        xtype: \"numberfield\",\n                        name: \"count\",\n                        width: 90,\n                        value: this.options.count,\n                        minValue: 0\n                    }\n                ]\n            }\n\n\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.Segment\");\npimcore.plugin.cmf.rule.conditions.Segment = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'Segment',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\Segment',\n    getFormItems: function () {\n\n        return [\n            {\n                name: \"segment\",\n                fieldLabel: t('segment'),\n                xtype: \"textfield\",\n                width: 500,\n                cls: \"input_drop_target\",\n                value: this.options.segment,\n                listeners: {\n                    \"render\": function (el) {\n                        new Ext.dd.DropZone(el.getEl(), {\n                            reference: this,\n                            ddGroup: \"element\",\n                            getTargetFromEvent: function (e) {\n                                return this.getEl();\n                            }.bind(el),\n\n                            onNodeOver: function (target, dd, e, data) {\n\n\n                                data = data.records[0].data;\n\n                                if(data.type != 'object') {\n                                    return Ext.dd.DropZone.prototype.dropNotAllowed;\n                                }\n\n\n                                if(data.className != 'CustomerSegment') {\n                                    return Ext.dd.DropZone.prototype.dropNotAllowed;\n                                }\n\n                                return Ext.dd.DropZone.prototype.dropAllowed;\n                            },\n\n                            onNodeDrop: function (target, dd, e, data) {\n\n\n                                data = data.records[0].data;\n\n                                if(data.type != 'object') {\n                                    return false;\n                                }\n\n                                if(data.className != 'CustomerSegment') {\n                                    return false;\n                                }\n\n                                this.setValue(data.path);\n                                return true;\n                            }.bind(el)\n                        });\n                    }\n                }\n            },\n            {\n                xtype: \"checkbox\",\n                name:'not',\n                value:this.options.not,\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_not\"),\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                }\n            }\n\n\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.Customer\");\npimcore.plugin.cmf.rule.conditions.Customer = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'Customer',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\Customer',\n    getFormItems: function () {\n\n        return [\n            {\n                name: \"customer\",\n                fieldLabel: t('plugin_cmf_customer'),\n                xtype: \"textfield\",\n                width: 500,\n                cls: \"input_drop_target\",\n                value: this.options.customer,\n                listeners: {\n                    \"render\": function (el) {\n                        new Ext.dd.DropZone(el.getEl(), {\n                            reference: this,\n                            ddGroup: \"element\",\n                            getTargetFromEvent: function (e) {\n                                return this.getEl();\n                            }.bind(el),\n\n                            onNodeOver: function (target, dd, e, data) {\n\n\n                                data = data.records[0].data;\n\n                                if(data.type != 'object') {\n                                    return Ext.dd.DropZone.prototype.dropNotAllowed;\n                                }\n\n\n                                return Ext.dd.DropZone.prototype.dropAllowed;\n                            },\n\n                            onNodeDrop: function (target, dd, e, data) {\n\n\n                                data = data.records[0].data;\n\n                                if(data.type != 'object') {\n                                    return false;\n                                }\n\n                                this.setValue(data.path);\n                                return true;\n                            }.bind(el)\n                        });\n                    }\n                }\n            },\n            {\n                xtype: \"checkbox\",\n                name:'not',\n                value:this.options.not,\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_not\"),\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                }\n            }\n\n\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.CountTrackedSegment\");\npimcore.plugin.cmf.rule.conditions.CountTrackedSegment = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'CountTrackedSegment',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\CountTrackedSegment',\n\n    customSaveHandler: function() {\n        return {\n            'count': this.countField.getValue(),\n            'operator': this.operatorField.getValue(),\n            'segments': this.objectList.getValue()\n        };\n    },\n\n    getFormItems: function () {\n        var segments = this.options ? this.options.segments : [];\n\n        this.objectList = new pimcore.bundle.EcommerceFramework.pricing.config.objects(segments, {\n            classes: [\n                \"CustomerSegment\"\n            ],\n            name: \"segments\",\n            title: t(\"plugin_cmf_actiontriggerrule_for_condition_segments\"),\n            visibleFields: \"path\",\n            height: 200,\n            width: 600,\n            columns: [],\n\n            // ?\n            columnType: null,\n            datatype: \"data\",\n            fieldtype: \"objects\",\n\n            // ??\n            index: false,\n            invisible: false,\n            lazyLoading: false,\n            locked: false,\n            mandatory: false,\n            maxItems: \"\",\n            noteditable: false,\n            permissions: null,\n            phpdocType: \"array\",\n            queryColumnType: \"text\",\n            relationType: true,\n            style: \"\",\n            tooltip: \"\",\n            visibleGridView: false,\n            visibleSearch: false\n        });\n\n        this.operatorField = Ext.create('Ext.form.field.ComboBox', {\n            //xtype: \"combobox\",\n            name: \"operator\",\n            width: 270,\n            store: Ext.data.ArrayStore({\n                fields: ['operator', 'label'],\n                data: [\n                    ['%', t('plugin_cmf_actiontriggerrule_number_condition_%')],\n                    ['=', t('plugin_cmf_actiontriggerrule_number_condition_=')],\n                    ['<', t('plugin_cmf_actiontriggerrule_number_condition_<')],\n                    ['<=', t('plugin_cmf_actiontriggerrule_number_condition_<=')],\n                    ['>', t('plugin_cmf_actiontriggerrule_number_condition_>')],\n                    ['>=', t('plugin_cmf_actiontriggerrule_number_condition_>=')]\n                ]\n            }),\n            value: this.options.operator ? this.options.operator : '>=',\n            displayField: 'label',\n            valueField: 'operator'\n        });\n        this.countField = Ext.create('Ext.form.field.Number', {\n            //xtype: \"numberfield\",\n            name: \"count\",\n            width: 90,\n            value: this.options.count,\n            minValue: 0\n        });\n\n        return [\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_number_condition\"),\n                labelWidth: 50,\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                },\n                items: [\n                    this.operatorField,\n                    this.countField\n                ]\n            },\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_for_condition\"),\n                labelWidth: 50,\n                height: 220,\n                layout: {\n                    type: 'vbox'\n                },\n                items: [\n                    this.objectList.getLayoutEdit(),\n                    {\n                        xtype: 'panel',\n                        html: t(\"plugin_cmf_actiontriggerrule_for_condition_empty_all\")\n                    }\n                ]\n            }\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.CountTargetGroupWeight\");\npimcore.plugin.cmf.rule.conditions.CountTargetGroupWeight = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'CountTargetGroupWeight',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\CountTargetGroupWeight',\n    getFormItems: function () {\n        return [\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_number_condition\"),\n                labelWidth: 50,\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                },\n                items: [\n                    {\n                        xtype: \"combobox\",\n                        name: \"operator\",\n                        width: 270,\n                        store: Ext.data.ArrayStore({\n                            fields: ['operator', 'label'],\n                            data: [\n                                ['%', t('plugin_cmf_actiontriggerrule_number_condition_%')],\n                                ['=', t('plugin_cmf_actiontriggerrule_number_condition_=')],\n                                ['<', t('plugin_cmf_actiontriggerrule_number_condition_<')],\n                                ['<=', t('plugin_cmf_actiontriggerrule_number_condition_<=')],\n                                ['>', t('plugin_cmf_actiontriggerrule_number_condition_>')],\n                                ['>=', t('plugin_cmf_actiontriggerrule_number_condition_>=')]\n                            ]\n                        }),\n                        value: this.options.operator ? this.options.operator : '>=',\n                        displayField: 'label',\n                        valueField: 'operator'\n                    },\n                    {\n                        xtype: \"numberfield\",\n                        name: \"count\",\n                        width: 90,\n                        value: this.options.count,\n                        minValue: 0\n                    }\n                ]\n            },\n            {\n                xtype: \"fieldcontainer\",\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_for_condition\"),\n                labelWidth: 50,\n                height: 210,\n                layout: {\n                    type: 'vbox'\n                },\n                items: [\n                    {\n                        xtype: \"multiselect\",\n                        name: \"targetGroup\",\n                        displayField: 'text',\n                        valueField: \"id\",\n                        store: pimcore.globalmanager.get(\"target_group_store\"),\n                        editable: false,\n                        width: 365,\n                        triggerAction: 'all',\n                        height: 180,\n                        mode: \"local\",\n                        value: this.options.targetGroup,\n                        emptyText: t(\"select_a_target_group\")\n                    },\n                    {\n                        xtype: 'panel',\n                        html: t(\"plugin_cmf_actiontriggerrule_for_condition_empty_all\")\n                    }\n                ]\n            }\n\n        ];\n    }\n});\n\npimcore.registerNS(\"pimcore.plugin.cmf.rule.conditions.CustomerField\");\npimcore.plugin.cmf.rule.conditions.CustomerField = Class.create(pimcore.plugin.cmf.rule.conditions.AbstractCondition,{\n    name: 'CustomerField',\n    implementationClass: '\\\\CustomerManagementFrameworkBundle\\\\ActionTrigger\\\\Condition\\\\CustomerField',\n    getFormItems: function () {\n        return [\n            {\n                xtype: 'panel',\n                html: '<div style=\"margin-bottom: 10px; padding: 5px 10px; background-color: #d9edf7; border-color: #bce8f1 !important; color: #31708f;\">' + t(\"plugin_cmf_actiontriggerrule_customerfield_explanation\") + '</div>'\n            },\n            {\n                xtype: \"fieldcontainer\",\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                },\n                items: [\n                    {\n                        xtype: \"textfield\",\n                        fieldLabel: t(\"plugin_cmf_actiontriggerrule_fieldname_condition\"),\n                        name: \"fieldname\",\n                        style: \"margin-right: 10px;\",\n                        width: 365,\n                        value: this.options.fieldname,\n                    },\n                    {\n                        xtype: \"textfield\",\n                        fieldLabel: t(\"plugin_cmf_actiontriggerrule_fieldvalue_condition\"),\n                        name: \"fieldvalue\",\n                        width: 365,\n                        value: this.options.fieldvalue\n                    }\n                ]\n            },\n            {\n                xtype: \"checkbox\",\n                name:'not',\n                value:this.options.not,\n                fieldLabel: t(\"plugin_cmf_actiontriggerrule_not\"),\n                layout: {\n                    type: 'table',\n                    tdAttrs: {\n                        valign: 'center'\n                    }\n                }\n            }\n\n        ];\n    }\n});"], "filenames": ["src/Resources/public/js/config/conditions.js"], "buggy_code_start_loc": [224], "buggy_code_end_loc": [535], "fixing_code_start_loc": [224], "fixing_code_end_loc": [538], "type": "NVD-CWE-noinfo", "message": "The Customer Management Framework (CMF) for Pimcore adds functionality for customer data management. In `pimcore/customer-management-framework-bundle` prior to version 3.3.9, business logic errors are possible in the `Conditions` tab since the counter can be a negative number. This vulnerability is capable of the unlogic in the counter value in the Conditions tab. Users should update to version 3.3.9 to receive a patch or, as a workaround, or apply the patch manually.", "other": {"cve": {"id": "CVE-2023-32075", "sourceIdentifier": "security-advisories@github.com", "published": "2023-05-11T17:15:09.357", "lastModified": "2023-05-22T18:19:19.037", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The Customer Management Framework (CMF) for Pimcore adds functionality for customer data management. In `pimcore/customer-management-framework-bundle` prior to version 3.3.9, business logic errors are possible in the `Conditions` tab since the counter can be a negative number. This vulnerability is capable of the unlogic in the counter value in the Conditions tab. Users should update to version 3.3.9 to receive a patch or, as a workaround, or apply the patch manually."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 4.3, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 1.4}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}, {"source": "security-advisories@github.com", "type": "Secondary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:pimcore:customer_management_framework:*:*:*:*:*:pimcore:*:*", "versionEndExcluding": "3.3.9", "matchCriteriaId": "11F1B8A1-060A-495D-81D3-46BF6E471CFB"}]}]}], "references": [{"url": "https://github.com/pimcore/customer-data-framework/commit/e3f333391582d9309115e6b94e875367d0ea7163.patch", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/pimcore/customer-data-framework/releases/tag/v3.3.9", "source": "security-advisories@github.com", "tags": ["Release Notes"]}, {"url": "https://github.com/pimcore/customer-data-framework/security/advisories/GHSA-x99j-r8vv-gwwj", "source": "security-advisories@github.com", "tags": ["Mitigation", "Patch", "Vendor Advisory"]}, {"url": "https://huntr.dev/bounties/cecd7800-a996-4f3a-8689-e1c2a1e0248a/", "source": "security-advisories@github.com", "tags": ["Exploit", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/pimcore/customer-data-framework/commit/e3f333391582d9309115e6b94e875367d0ea7163.patch"}}