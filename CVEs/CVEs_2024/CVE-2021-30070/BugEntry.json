{"buggy_code": ["#!/bin/bash\n# info: update hestia package/configs\n# options: PACKAGE\n# labels: panel\n#\n# example: v-update-sys-hestia hestia-php\n#\n# The function runs as apt update trigger. It pulls shell script from hestia\n# server and runs it. (hestia, hestia-nginx and hestia-php are valid options)\n\n\n#----------------------------------------------------------#\n#                    Variable&Function                     #\n#----------------------------------------------------------#\n\n# Argument definition\npackage=$1\n\n# Importing system environment\nsource /etc/profile\n\n# Includes\n# shellcheck source=/usr/local/hestia/func/main.sh\nsource $HESTIA/func/main.sh\n# shellcheck source=/usr/local/hestia/conf/hestia.conf\nsource $HESTIA/conf/hestia.conf\n\n\n#----------------------------------------------------------#\n#                    Verifications                         #\n#----------------------------------------------------------#\n\n# Checking arg number\ncheck_args '1' \"$#\" 'PACKAGE'\n\n# Perform verification if read-only mode is enabled\ncheck_hestia_demo_mode\n\n#----------------------------------------------------------#\n#                       Action                             #\n#----------------------------------------------------------#\n\n# Update repo\napt-get update -o Dir::Etc::sourcelist=\"sources.list.d/hestia.list\" \\\n    -o Dir::Etc::sourceparts=\"-\" -o APT::Get::List-Cleanup=\"0\" -qq\n\n# Update hestia package\napt-get install $package -qq > /dev/null 2>&1\ncheck_result $? \"$package update failed\" $E_UPDATE\n\n#----------------------------------------------------------#\n#                       Hestia                             #\n#----------------------------------------------------------#\n\n# Logging\nlog_event \"$OK\" \"$ARGUMENTS\"\n\nexit\n", "#!/usr/bin/env bash\n# Internal variables\nHOMEDIR='/home'\nBACKUP='/backup'\nBACKUP_GZIP=9\nBACKUP_DISK_LIMIT=95\nBACKUP_LA_LIMIT=`cat /proc/cpuinfo | grep processor | wc -l`\nRRD_STEP=300\nBIN=$HESTIA/bin\nHESTIA_INSTALL_DIR=$HESTIA/install/deb\nHESTIA_BACKUP=\"/root/hst_backups/$(date +%d%m%Y%H%M)\"\nUSER_DATA=$HESTIA/data/users/$user\nWEBTPL=$HESTIA/data/templates/web\nMAILTPL=$HESTIA/data/templates/mail\nDNSTPL=$HESTIA/data/templates/dns\nRRD=$HESTIA/web/rrd\nSENDMAIL=\"$HESTIA/web/inc/mail-wrapper.php\"\nHESTIA_GIT_REPO=\"https://raw.githubusercontent.com/hestiacp/hestiacp\"\nHESTIA_THEMES=\"$HESTIA/web/css/themes\"\nHESTIA_THEMES_CUSTOM=\"$HESTIA/web/css/themes/custom\"\nSCRIPT=\"$(basename $0)\"\n\n# Return codes\nOK=0\nE_ARGS=1\nE_INVALID=2\nE_NOTEXIST=3\nE_EXISTS=4\nE_SUSPENDED=5\nE_UNSUSPENDED=6\nE_INUSE=7\nE_LIMIT=8\nE_PASSWORD=9\nE_FORBIDEN=10\nE_DISABLED=11\nE_PARSING=12\nE_DISK=13\nE_LA=14\nE_CONNECT=15\nE_FTP=16\nE_DB=17\nE_RRD=18\nE_UPDATE=19\nE_RESTART=20\n\n# Detect operating system\ndetect_os() {\n    if [ -e \"/etc/os-release\" ]; then\n        get_os_type=$(grep \"^ID=\" /etc/os-release | cut -f 2 -d '=')\n        if [ \"$get_os_type\" = \"ubuntu\" ]; then\n            if [ -e '/usr/bin/lsb_release' ]; then\n                OS_VERSION=\"$(lsb_release -s -r)\"\n                OS_TYPE='Ubuntu'            \n            fi\n        elif [ \"$get_os_type\" = \"debian\" ]; then\n            OS_TYPE='Debian'\n            OS_VERSION=$(cat /etc/debian_version|grep -o \"[0-9]\\{1,2\\}\"|head -n1)\n        fi\n    else\n        OS_TYPE=\"Unsupported OS\"\n        OS_VERSION=\"Unknown\"\n    fi\n}\n\n# Generate time stamp\nnew_timestamp() {\n    time_n_date=$(date +'%T %F')\n    time=$(echo \"$time_n_date\" |cut -f 1 -d \\ )\n    date=$(echo \"$time_n_date\" |cut -f 2 -d \\ )\n}\n\n# Event string for logger\nARGS=(\"$@\")\nfor ((I=1; I <= $# ; I++)); do\n    if [[ \"$HIDE\" != $I ]]; then\n        ARGUMENTS=\"$ARGUMENTS '${ARGS[${I}-1]}'\"\n    else\n        ARGUMENTS=\"$ARGUMENTS '******'\"\n    fi\ndone\n\n# Log event function\nlog_event() {\n    if [ -z \"$time\" ]; then\n        LOG_TIME=\"$(date +'%F %T') $(basename $0)\"\n    else\n        LOG_TIME=\"$date $time $(basename $0)\"\n    fi\n    if [ \"$1\" -eq 0 ]; then\n        echo \"$LOG_TIME $2\" >> $HESTIA/log/system.log\n    else\n        echo \"$LOG_TIME $2 [Error $1]\" >> $HESTIA/log/error.log\n    fi\n}\n\n# Log user history\nlog_history() {\n    cmd=$1\n    undo=${2-no}\n    log_user=${3-$user}\n\n    if ! $BIN/v-list-user \"$log_user\" >/dev/null; then\n        return $E_NOTEXIST\n    fi\n\n    log=$HESTIA/data/users/$log_user/history.log\n    touch $log\n    if [ '99' -lt \"$(wc -l $log |cut -f 1 -d ' ')\" ]; then\n        tail -n 49 $log > $log.moved\n        mv -f $log.moved $log\n        chmod 660 $log\n    fi\n    if [ -z \"$date\" ]; then\n        time_n_date=$(date +'%T %F')\n        time=$(echo \"$time_n_date\" |cut -f 1 -d \\ )\n        date=$(echo \"$time_n_date\" |cut -f 2 -d \\ )\n    fi\n    curr_str=$(grep \"ID=\" $log | cut -f 2 -d \\' | sort -n | tail -n1)\n    id=\"$((curr_str +1))\"\n    echo \"ID='$id' DATE='$date' TIME='$time' CMD='$cmd' UNDO='$undo'\" >> $log\n}\n\n# Result checker\ncheck_result() {\n    if [ $1 -ne 0 ]; then\n        echo \"Error: $2\"\n        if [ ! -z \"$3\" ]; then\n            log_event \"$3\" \"$ARGUMENTS\"\n            exit $3\n        else\n            log_event \"$1\" \"$ARGUMENTS\"\n            exit $1\n        fi\n    fi\n}\n\n# Argument list checker\ncheck_args() {\n    if [ \"$1\" -gt \"$2\" ]; then\n        echo \"Usage: $(basename $0) $3\"\n        check_result $E_ARGS \"not enought arguments\" >/dev/null\n    fi\n}\n\n# Subsystem checker\nis_system_enabled() {\n    if [ -z \"$1\" ] || [ \"$1\" = no ]; then\n        check_result $E_DISABLED \"$2 is not enabled\"\n    fi\n}\n\n\n# User package check\nis_package_full() {\n    case \"$1\" in\n        WEB_DOMAINS) used=$(wc -l $USER_DATA/web.conf);;\n        WEB_ALIASES) used=$(echo $aliases |tr ',' '\\n' |wc -l);;\n        DNS_DOMAINS) used=$(wc -l $USER_DATA/dns.conf);;\n        DNS_RECORDS) used=$(wc -l $USER_DATA/dns/$domain.conf);;\n        MAIL_DOMAINS) used=$(wc -l $USER_DATA/mail.conf);;\n        MAIL_ACCOUNTS) used=$(wc -l $USER_DATA/mail/$domain.conf);;\n        DATABASES) used=$(wc -l $USER_DATA/db.conf);;\n        CRON_JOBS) used=$(wc -l $USER_DATA/cron.conf);;\n    esac\n    used=$(echo \"$used\"| cut -f 1 -d \\ )\n    limit=$(grep \"^$1=\" $USER_DATA/user.conf |cut -f 2 -d \\')\n    if [ \"$limit\" != 'unlimited' ] && [[ \"$used\" -ge \"$limit\" ]]; then\n        check_result $E_LIMIT \"$1 limit is reached :: upgrade user package\"\n    fi\n}\n\n# User owner for reseller plugin\nget_user_owner() {\n    if [ -z \"$RESELLER_KEY\" ]; then\n        owner='admin'\n    else\n        owner=$(grep \"^OWNER\" $USER_DATA/user.conf| cut -f 2 -d \\')\n        if [ -z \"$owner\" ]; then\n            owner='admin'\n        fi\n    fi\n}\n\n# Random password generator\ngenerate_password() {\n    matrix=$1\n    length=$2\n    if [ -z \"$matrix\" ]; then\n        matrix=\"A-Za-z0-9\"\n    fi\n    if [ -z \"$length\" ]; then\n        length=16\n    fi\n    head /dev/urandom | tr -dc $matrix | head -c$length\n}\n\n# Package existence check\nis_package_valid() {\n    if [ -z \"$1\" ]; then\n        pkg_dir=\"$HESTIA/data/packages\"\n    fi\n    if [ ! -e \"$pkg_dir/$package.pkg\" ]; then\n        check_result $E_NOTEXIST \"package $package doesn't exist\"\n    fi\n}\n\n# Validate system type\nis_type_valid() {\n    if [ -z \"$(echo $1 | grep -w $2)\" ]; then\n        check_result $E_INVALID \"$2 type is invalid\"\n    fi\n}\n\n# Check user backup settings\nis_backup_enabled() {\n    BACKUPS=$(grep \"^BACKUPS=\" $USER_DATA/user.conf | cut -f2 -d \\')\n    if [ -z \"$BACKUPS\" ] || [[ \"$BACKUPS\" -le '0' ]]; then\n        check_result $E_DISABLED \"user backup is disabled\"\n    fi\n}\n\n# Check user backup settings\nis_backup_scheduled() {\n    if [ -e \"$HESTIA/data/queue/backup.pipe\" ]; then\n        check_q=$(grep \" $user \" $HESTIA/data/queue/backup.pipe | grep $1)\n        if [ ! -z \"$check_q\" ]; then\n            check_result $E_EXISTS \"$1 is already scheduled\"\n        fi\n    fi\n}\n\n# Check if object is new\nis_object_new() {\n    if [ $2 = 'USER' ]; then\n        if [ -d \"$USER_DATA\" ]; then\n            object=\"OK\"\n        fi\n    else\n        object=$(grep \"$2='$3'\" $USER_DATA/$1.conf)\n    fi\n    if [ ! -z \"$object\" ]; then\n        check_result $E_EXISTS \"$2=$3 already exists\"\n    fi\n}\n\n# Check if object is valid\nis_object_valid() {\n    if [ $2 = 'USER' ]; then\n        tstpath=\"$(readlink -f \"$HESTIA/data/users/$3\")\"\n        if [ \"$(dirname \"$tstpath\")\" != \"$(readlink -f \"$HESTIA/data/users\")\" ] || [ ! -d \"$HESTIA/data/users/$3\" ]; then\n            check_result $E_NOTEXIST \"$1 $3 doesn't exist\"\n        fi\n    else\n        object=$(grep \"$2='$3'\" $HESTIA/data/users/$user/$1.conf)\n        if [ -z \"$object\" ]; then\n            arg1=$(basename $1)\n            arg2=$(echo $2 |tr '[:upper:]' '[:lower:]')\n            check_result $E_NOTEXIST \"$arg1 $arg2 $3 doesn't exist\"\n        fi\n    fi\n}\n\n# Check if a object string with key values pairs has the correct format and load it afterwards\nparse_object_kv_list_non_eval() {\n    local str\n    local objkv obj_key obj_val\n    local OLD_IFS=\"$IFS\"\n\n    str=${@//$'\\n'/ }\n    str=${str//\\\"/\\\\\\\"}\n    str=${str//$/\\\\$}\n    IFS=$'\\n'\n\n    # Extract and loop trough each key-value pair. (Regex test: https://regex101.com/r/eiMufk/5)\n    for objkv in $( echo \"$str\" | perl -n -e \"while(/\\b([a-zA-Z]+[\\w]*)='(.*?)'(\\s|\\$)/g) {print \\$1.'='.\\$2 . \\\"\\n\\\" }\" ); do\n\n        if ! [[ \"$objkv\" =~ ^([[:alnum:]][_[:alnum:]]{0,64}[[:alnum:]])=(\\'?[^\\']+?\\'?)?$ ]]; then\n            check_result $E_INVALID \"Invalid key value format [$objkv]\"\n        fi\n\n        obj_key=${objkv%%=*}    # strip everything after first  '=' char\n        obj_val=${objkv#*=}     # strip everything before first '=' char\n        declare -g $obj_key=\"$obj_val\"\n\n    done\n    IFS=\"$OLD_IFS\"\n}\n\n# Check if a object string with key values pairs has the correct format and load it afterwards\nparse_object_kv_list() {\n    local str\n    local objkv\n    local suboutput\n    local OLD_IFS=\"$IFS\"\n\n    str=${@//$'\\n'/ }\n    str=${str//\\\"/\\\\\\\"}\n    str=${str//$/\\\\$}\n    IFS=$'\\n'\n\n    suboutput=$(setpriv --clear-groups --reuid nobody --regid nogroup bash -c \"PS4=''; set -xe; eval \\\"${str}\\\"\" 2>&1)\n    check_result $? \"Invalid object format: ${str}\" $E_INVALID\n\n    for objkv in $suboutput; do\n\n        if [[ \"$objkv\" =~ ^'eval ' ]]; then\n          continue\n        fi\n\n        if ! [[ \"$objkv\" =~ ^([[:alnum:]][_[:alnum:]]{0,64}[[:alnum:]])=(\\'?[^\\']+?\\'?)?$ ]]; then\n            check_result $E_INVALID \"Invalid key value format [$objkv]\"\n        fi\n\n        eval \"$objkv\"\n    done\n    IFS=\"$OLD_IFS\"\n}\n\n# Check if object is supended\nis_object_suspended() {\n    if [ $2 = 'USER' ]; then\n        spnd=$(cat $USER_DATA/$1.conf|grep \"SUSPENDED='yes'\")\n    else\n        spnd=$(grep \"$2='$3'\" $USER_DATA/$1.conf|grep \"SUSPENDED='yes'\")\n    fi\n    if [ -z \"$spnd\" ]; then\n        check_result $E_UNSUSPENDED \"$(basename $1) $3 is not suspended\"\n    fi\n}\n\n# Check if object is unsupended\nis_object_unsuspended() {\n    if [ $2 = 'USER' ]; then\n        spnd=$(cat $USER_DATA/$1.conf |grep \"SUSPENDED='yes'\")\n    else\n        spnd=$(grep \"$2='$3'\" $USER_DATA/$1.conf |grep \"SUSPENDED='yes'\")\n    fi\n    if [ ! -z \"$spnd\" ]; then\n        check_result $E_SUSPENDED \"$(basename $1) $3 is suspended\"\n    fi\n}\n\n# Check if object value is empty\nis_object_value_empty() {\n    str=$(grep \"$2='$3'\" $USER_DATA/$1.conf)\n    parse_object_kv_list \"$str\"\n    eval value=$4\n    if [ ! -z \"$value\" ] && [ \"$value\" != 'no' ]; then\n        check_result $E_EXISTS \"${4//$}=$value already exists\"\n    fi\n}\n\n# Check if object value is empty\nis_object_value_exist() {\n    str=$(grep \"$2='$3'\" $USER_DATA/$1.conf)\n    parse_object_kv_list \"$str\"\n    eval value=$4\n    if [ -z \"$value\" ] || [ \"$value\" = 'no' ]; then\n        check_result $E_NOTEXIST \"${4//$}=$value doesn't exist\"\n    fi\n}\n\n# Check if password is transmitted via file\nis_password_valid() {\n    if [[ \"$password\" =~ ^/tmp/ ]]; then\n        if [ -f \"$password\" ]; then\n            password=\"$(head -n1 $password)\"\n        fi\n    fi\n}\n\n# Check if hash is transmitted via file\nis_hash_valid() {\n    if [[ \"$hash\" =~ ^/tmp/ ]]; then\n        if [ -f \"$hash\" ]; then\n            hash=\"$(head -n1 $hash)\"\n        fi\n    fi\n}\n\n# Check if directory is a symlink\nis_dir_symlink() {\n    if [[ -L \"$1\" ]]; then\n        check_result $E_FORBIDEN \"$1 directory is a symlink\"\n    fi\n}\n\n# Get object value\nget_object_value() {\n    object=$(grep \"$2='$3'\" $USER_DATA/$1.conf)\n    parse_object_kv_list \"$object\"\n    eval echo $4\n}\n\n# Update object value\nupdate_object_value() {\n    row=$(grep -nF \"$2='$3'\" $USER_DATA/$1.conf)\n    lnr=$(echo $row | cut -f 1 -d ':')\n    object=$(echo $row | sed \"s/^$lnr://\")\n    parse_object_kv_list \"$object\"\n    eval old=\"$4\"\n    old=$(echo \"$old\" | sed -e 's/\\\\/\\\\\\\\/g' -e 's/&/\\\\&/g' -e 's/\\//\\\\\\//g')\n    new=$(echo \"$5\" | sed -e 's/\\\\/\\\\\\\\/g' -e 's/&/\\\\&/g' -e 's/\\//\\\\\\//g')\n    sed -i \"$lnr s/${4//$/}='${old//\\*/\\\\*}'/${4//$/}='${new//\\*/\\\\*}'/g\" \\\n        $USER_DATA/$1.conf\n}\n\n# Add object key\nadd_object_key() {\n    row=$(grep -n \"$2='$3'\" $USER_DATA/$1.conf)\n    lnr=$(echo $row | cut -f 1 -d ':')\n    object=$(echo $row | sed \"s/^$lnr://\")\n    if [ -z \"$(echo $object |grep $4=)\" ]; then\n        eval old=\"$4\"\n        sed -i \"$lnr s/$5='/$4='' $5='/\" $USER_DATA/$1.conf\n    fi\n}\n\n# Search objects\nsearch_objects() {\n    OLD_IFS=\"$IFS\"\n    IFS=$'\\n'\n    for line in $(grep $2=\\'$3\\' $USER_DATA/$1.conf); do\n        parse_object_kv_list \"$line\"\n        eval echo \\$$4\n    done\n    IFS=\"$OLD_IFS\"\n}\n\n# Get user value\nget_user_value() {\n    grep \"^${1//$/}=\" $USER_DATA/user.conf | head -1 | awk -F \"'\" '{print $2}'\n}\n\n# Update user value in user.conf\nupdate_user_value() {\n    key=\"${2//$}\"\n    lnr=$(grep -n \"^$key='\" $HESTIA/data/users/$1/user.conf |cut -f 1 -d ':')\n    if [ ! -z \"$lnr\" ]; then\n        sed -i \"$lnr d\" $HESTIA/data/users/$1/user.conf\n        sed -i \"$lnr i\\\\$key='${3}'\" $HESTIA/data/users/$1/user.conf\n    fi\n}\n\n# Increase user counter\nincrease_user_value() {\n    key=\"${2//$}\"\n    factor=\"${3-1}\"\n    conf=\"$HESTIA/data/users/$1/user.conf\"\n    old=$(grep \"$key=\" $conf | cut -f 2 -d \\')\n    if [ -z \"$old\" ]; then\n        old=0\n    fi\n    new=$((old + factor))\n    sed -i \"s/$key='$old'/$key='$new'/g\" $conf\n}\n\n# Decrease user counter\ndecrease_user_value() {\n    key=\"${2//$}\"\n    factor=\"${3-1}\"\n    conf=\"$HESTIA/data/users/$1/user.conf\"\n    old=$(grep \"$key=\" $conf | cut -f 2 -d \\')\n    if [ -z \"$old\" ]; then\n        old=0\n    fi\n    if [ \"$old\" -le 1 ]; then\n        new=0\n    else\n        new=$((old - factor))\n    fi\n    if [ \"$new\" -lt 0 ]; then\n        new=0\n    fi\n    sed -i \"s/$key='$old'/$key='$new'/g\" $conf\n}\n\n# Notify user\nsend_notice() {\n    topic=$1\n    notice=$2\n\n    if [ \"$notify\" = 'yes' ]; then\n        touch $USER_DATA/notifications.conf\n        chmod 660 $USER_DATA/notifications.conf\n\n        time_n_date=$(date +'%T %F')\n        time=$(echo \"$time_n_date\" |cut -f 1 -d \\ )\n        date=$(echo \"$time_n_date\" |cut -f 2 -d \\ )\n\n        nid=$(grep \"NID=\" $USER_DATA/notifications.conf |cut -f 2 -d \\')\n        nid=$(echo \"$nid\" |sort -n |tail -n1)\n        if [ ! -z \"$nid\" ]; then\n            nid=\"$((nid +1))\"\n        else\n            nid=1\n        fi\n\n        str=\"NID='$nid' TOPIC='$topic' NOTICE='$notice' TYPE='$type'\"\n        str=\"$str ACK='no' TIME='$time' DATE='$date'\"\n\n        echo \"$str\" >> $USER_DATA/notifications.conf\n\n        if [ -z \"$(grep NOTIFICATIONS $USER_DATA/user.conf)\" ]; then\n            sed -i \"s/^TIME/NOTIFICATIONS='yes'\\nTIME/g\" $USER_DATA/user.conf\n        else\n            update_user_value \"$user\" '$NOTIFICATIONS' \"yes\"\n        fi\n    fi\n}\n\n# Recalculate U_DISK value\nrecalc_user_disk_usage() {\n    u_usage=0\n    if [ -f \"$USER_DATA/web.conf\" ]; then\n        usage=0\n        dusage=$(grep 'U_DISK=' $USER_DATA/web.conf |\\\n            awk -F \"U_DISK='\" '{print $2}' | cut -f 1 -d \\')\n        for disk_usage in $dusage; do \n                usage=$((usage + disk_usage))\n        done\n        d=$(grep \"U_DISK_WEB='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n        sed -i \"s/U_DISK_WEB='$d'/U_DISK_WEB='$usage'/g\" $USER_DATA/user.conf\n        u_usage=$((u_usage + usage))\n    fi\n\n    if [ -f \"$USER_DATA/mail.conf\" ]; then\n        usage=0\n        dusage=$(grep 'U_DISK=' $USER_DATA/mail.conf |\\\n            awk -F \"U_DISK='\" '{print $2}' | cut -f 1 -d \\')\n        for disk_usage in $dusage; do \n                usage=$((usage + disk_usage))\n        done\n        d=$(grep \"U_DISK_MAIL='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n        sed -i \"s/U_DISK_MAIL='$d'/U_DISK_MAIL='$usage'/g\" $USER_DATA/user.conf\n        u_usage=$((u_usage + usage))\n    fi\n\n    if [ -f \"$USER_DATA/db.conf\" ]; then\n        usage=0\n        dusage=$(grep 'U_DISK=' $USER_DATA/db.conf |\\\n            awk -F \"U_DISK='\" '{print $2}' | cut -f 1 -d \\')\n        for disk_usage in $dusage; do \n                usage=$((usage + disk_usage))\n        done\n        d=$(grep \"U_DISK_DB='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n        sed -i \"s/U_DISK_DB='$d'/U_DISK_DB='$usage'/g\" $USER_DATA/user.conf\n        u_usage=$((u_usage + usage))\n    fi\n    usage=$(grep 'U_DISK_DIRS=' $USER_DATA/user.conf | cut -f 2 -d \"'\")\n    u_usage=$((u_usage + usage))\n    old=$(grep \"U_DISK='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n    sed -i \"s/U_DISK='$old'/U_DISK='$u_usage'/g\" $USER_DATA/user.conf\n}\n\n# Recalculate U_BANDWIDTH value\nrecalc_user_bandwidth_usage() {\n    usage=0\n    bandwidth_usage=$(grep 'U_BANDWIDTH=' $USER_DATA/web.conf |\\\n        awk -F \"U_BANDWIDTH='\" '{print $2}'|cut -f 1 -d \\')\n    for bandwidth in $bandwidth_usage; do \n        usage=$((usage + bandwidth))\n    done\n    old=$(grep \"U_BANDWIDTH='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n    sed -i \"s/U_BANDWIDTH='$old'/U_BANDWIDTH='$usage'/g\" $USER_DATA/user.conf\n}\n\n# Get next cron job id\nget_next_cronjob() {\n    if [ -z \"$job\" ]; then\n        curr_str=$(grep \"JOB=\" $USER_DATA/cron.conf|cut -f 2 -d \\'|\\\n                 sort -n|tail -n1)\n        job=\"$((curr_str +1))\"\n    fi\n}\n\n# Sort cron jobs by id\nsort_cron_jobs() {\n    cat $USER_DATA/cron.conf |sort -n -k 2 -t \\' > $USER_DATA/cron.tmp\n    mv -f $USER_DATA/cron.tmp $USER_DATA/cron.conf\n}\n\n# Sync cronjobs with system cron\nsync_cron_jobs() {\n    source $USER_DATA/user.conf\n    if [ -e \"/var/spool/cron/crontabs\" ]; then\n        crontab=\"/var/spool/cron/crontabs/$user\"\n    else\n        crontab=\"/var/spool/cron/$user\"\n    fi\n    rm -f $crontab\n    if [ \"$CRON_REPORTS\" = 'yes' ]; then\n        echo \"MAILTO=$CONTACT\" > $crontab\n        echo 'CONTENT_TYPE=\"text/plain; charset=utf-8\"' >> $crontab\n    fi\n    while read line; do\n        parse_object_kv_list \"$line\"\n        if [ \"$SUSPENDED\" = 'no' ]; then\n            echo \"$MIN $HOUR $DAY $MONTH $WDAY $CMD\" |\\\n                sed -e \"s/%quote%/'/g\" -e \"s/%dots%/:/g\" \\\n                >> $crontab\n        fi\n    done < $USER_DATA/cron.conf\n    chown $user:$user $crontab\n    chmod 600 $crontab\n}\n\n# User format validator\nis_user_format_valid() {\n    if [ ${#1} -eq 1 ]; then\n        if ! [[ \"$1\" =~ ^^[[:alnum:]]$ ]]; then\n            check_result $E_INVALID \"invalid $2 format :: $1\"\n        fi\n    else\n        if ! [[ \"$1\" =~ ^[[:alnum:]][-|\\.|_[:alnum:]]{0,28}[[:alnum:]]$ ]]\n            then\n            check_result $E_INVALID \"invalid $2 format :: $1\"\n        fi\n    fi\n}\n\n# Domain format validator\nis_domain_format_valid() {\n    object_name=${2-domain}\n    exclude=\"[!|@|#|$|^|&|*|(|)|+|=|{|}|:|,|<|>|?|_|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [[ $1 =~ $exclude ]] || [[ $1 =~ ^[0-9]+$ ]] || [[ $1 =~ \"\\.\\.\" ]] || [[ $1 =~ \"$(printf '\\t')\" ]]; then\n        check_result $E_INVALID \"invalid $object_name format :: $1\"\n    fi\n}\n\n# Alias forman validator\nis_alias_format_valid() {\n    for object in ${1//,/ }; do\n        exclude=\"[!|@|#|$|^|&|(|)|+|=|{|}|:|<|>|?|_|/|\\|\\\"|'|;|%|\\`| ]\"\n        if [[ \"$object\" =~ $exclude ]]; then\n            check_result $E_INVALID \"invalid alias format :: $object\"\n        fi\n        if [[ \"$object\" =~ [*] ]] && ! [[ \"$object\" =~ ^[*]\\..* ]]; then\n            check_result $E_INVALID \"invalid alias format :: $object\"\n        fi\n    done\n}\n\n# IP format validator\nis_ip_format_valid() {\n    object_name=${2-ip}\n    ip_regex='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'\n    ip_clean=$(echo \"${1%/*}\")\n    if ! [[ $ip_clean =~ ^$ip_regex\\.$ip_regex\\.$ip_regex\\.$ip_regex$ ]]; then\n        check_result $E_INVALID \"invalid $object_name format :: $1\"\n    fi\n    if [ $1 != \"$ip_clean\" ]; then\n        ip_cidr=\"$ip_clean/\"\n        ip_cidr=$(echo \"${1#$ip_cidr}\")\n        if [[ \"$ip_cidr\" -gt 32 ]] || [[ \"$ip_cidr\" =~ [:alnum:] ]]; then\n            check_result $E_INVALID \"invalid $object_name format :: $1\"\n        fi\n    fi\n}\n\n# Proxy extention format validator\nis_extention_format_valid() {\n    exclude=\"[!|#|$|^|&|(|)|+|=|{|}|:|@|<|>|?|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [[ \"$1\" =~ $exclude ]]; then\n        check_result $E_INVALID \"invalid proxy extention format :: $1\"\n    fi\n}\n\n# Number format validator\nis_number_format_valid() {\n    object_name=${2-number}\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]] ; then\n        check_result $E_INVALID \"invalid $object_name format :: $1\"\n    fi\n}\n\n# Autoreply format validator\nis_autoreply_format_valid() {\n    if [ 10240 -le ${#1} ]; then\n        check_result $E_INVALID \"invalid autoreply format :: $1\"\n    fi\n}\n\n# Boolean format validator\nis_boolean_format_valid() {\n    if [ \"$1\" != 'yes' ] && [ \"$1\" != 'no' ]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Common format validator\nis_common_format_valid() {\n    exclude=\"[!|#|$|^|&|(|)|+|=|{|}|:|<|>|?|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [[ \"$1\" =~ $exclude ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [ 400 -le ${#1} ]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ \"$1\" =~ @ ]] && [ ${#1} -gt 1 ] ; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $1 =~ \\* ]]; then\n        if [[ \"$(echo $1 | grep -o '\\*\\.' |wc -l)\" -eq 0 ]] && [[ $1 != '*' ]] ; then\n                        check_result $E_INVALID \"invalid $2 format :: $1\"\n        fi\n    fi\n    if [[ $(echo -n \"$1\" | tail -c 1) =~ [^a-zA-Z0-9_*@] ]]; then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $(echo -n \"$1\" | grep -c '\\.\\.') -gt 0 ]];then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $(echo -n \"$1\" | head -c 1) =~ [^a-zA-Z0-9_*@] ]]; then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $(echo -n \"$1\" | grep -c '\\-\\-') -gt 0 ]]; then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $(echo -n \"$1\" | grep -c '\\_\\_') -gt 0 ]]; then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Database format validator\nis_database_format_valid() {\n    exclude=\"[!|@|#|$|^|&|*|(|)|+|=|{|}|:|,|<|>|?|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [[ \"$1\" =~ $exclude ]] || [ 64 -le ${#1} ]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Date format validator\nis_date_format_valid() {\n    if ! [[ \"$1\" =~ ^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$ ]]; then\n        check_result $E_INVALID \"invalid date format :: $1\"\n    fi\n}\n\n# Database user validator\nis_dbuser_format_valid() {\n    exclude=\"[!|@|#|$|^|&|*|(|)|+|=|{|}|:|,|<|>|?|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [ 33 -le ${#1} ]; then\n        check_result $E_INVALID \"mysql username can be up to 32 characters long\"\n    fi\n    if [[ \"$1\" =~ $exclude ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# DNS record type validator\nis_dns_type_format_valid() {\n    known_dnstype='A,AAAA,NS,CNAME,MX,TXT,SRV,DNSKEY,KEY,IPSECKEY,PTR,SPF,TLSA,CAA'\n    if [ -z \"$(echo $known_dnstype |grep -w $1)\" ]; then\n        check_result $E_INVALID \"invalid dns record type format :: $1\"\n    fi\n}\n\n# DNS record validator\nis_dns_record_format_valid() {\n    if [ \"$rtype\" = 'A' ]; then\n        is_ip_format_valid \"$1\"\n    fi\n    if [ \"$rtype\" = 'NS' ]; then\n        is_domain_format_valid \"${1::-1}\" 'ns_record'\n    fi\n    if [ \"$rtype\" = 'MX' ]; then\n        is_domain_format_valid \"${1::-1}\" 'mx_record'\n        is_int_format_valid \"$priority\" 'priority_record'\n    fi\n\n}\n\n# Email format validator\nis_email_format_valid() {\n    if [[ ! \"$1\" =~ ^[A-Za-z0-9._%+-]+@[[:alnum:].-]+\\.[A-Za-z]{2,63}$ ]] ; then\n        check_result $E_INVALID \"invalid email format :: $1\"\n    fi\n}\n\n# Firewall action validator\nis_fw_action_format_valid() {\n    if [ \"$1\" != \"ACCEPT\" ] && [ \"$1\" != 'DROP' ] ; then\n        check_result $E_INVALID \"invalid action format :: $1\"\n    fi\n}\n\n# Firewall protocol validator\nis_fw_protocol_format_valid() {\n    if [ \"$1\" != \"ICMP\" ] && [ \"$1\" != 'UDP' ] && [ \"$1\" != 'TCP' ] ; then\n        check_result $E_INVALID \"invalid protocol format :: $1\"\n    fi\n}\n\n# Firewall port validator\nis_fw_port_format_valid() {\n    if [ \"${#1}\" -eq 1 ]; then\n        if ! [[ \"$1\" =~ [0-9] ]]; then\n            check_result $E_INVALID \"invalid port format :: $1\"\n        fi\n    else\n        if ! [[ \"$1\" =~ ^[0-9][-|,|:|0-9]{0,30}[0-9]$ ]]\n        then\n            check_result $E_INVALID \"invalid port format :: $1\"\n        fi\n    fi\n}\n\n# Integer validator\nis_int_format_valid() {\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]] ; then \n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Interface validator\nis_interface_format_valid() {\n    netdevices=$(cat /proc/net/dev |grep : |cut -f 1 -d : |tr -d ' ')\n    if [ -z $(echo \"$netdevices\" |grep -x $1) ]; then\n        check_result $E_INVALID \"invalid interface format :: $1\"\n    fi\n}\n\n# IP status validator\nis_ip_status_format_valid() {\n    if [ -z \"$(echo shared,dedicated | grep -w $1 )\" ]; then\n        check_result $E_INVALID \"invalid status format :: $1\"\n    fi\n}\n\n# Cron validator\nis_cron_format_valid() {\n    limit=59\n    check_format=''\n    if [ \"$2\" = 'hour' ]; then\n        limit=23\n    fi\n    \n    if [ \"$2\" = 'day' ]; then\n        limit=31\n    fi\n    if [ \"$2\" = 'month' ]; then\n        limit=12\n    fi\n    if [ \"$2\" = 'wday' ]; then\n        limit=7\n    fi\n    if [ \"$1\" = '*' ]; then\n        check_format='ok'\n    fi\n    if [[ \"$1\" =~ ^[\\*]+[/]+[0-9] ]]; then\n        if [ \"$(echo $1 |cut -f 2 -d /)\" -lt $limit ]; then\n            check_format='ok'\n        fi\n    fi\n    if [[ \"$1\" =~ ^[0-9][-|,|0-9]{0,70}[\\/][0-9]$ ]]; then\n        check_format='ok'\n        crn_values=${1//,/ }\n        crn_values=${crn_values//-/ }\n        crn_values=${crn_values//\\// }\n        for crn_vl in $crn_values; do\n            if [ \"$crn_vl\" -gt $limit ]; then\n                check_format='invalid'\n            fi\n        done\n    fi\n    crn_values=$(echo $1 |tr \",\" \" \" | tr \"-\" \" \")\n    for crn_vl in $crn_values\n        do\n            if [[ \"$crn_vl\" =~ ^[0-9]+$ ]] && [ \"$crn_vl\" -le $limit ]; then\n                 check_format='ok'\n              fi\n        done\n    if [ \"$check_format\" != 'ok' ]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Name validator\nis_name_format_valid() {\n    if ! [[ \"$1\" =~ ^[[:alnum:]][-|\\ |\\.|_[:alnum:]]{0,28}[[:alnum:]]$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Object validator\nis_object_format_valid() {\n    if ! [[ \"$1\" =~ ^[[:alnum:]][-|\\.|_[:alnum:]]{0,64}[[:alnum:]]$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Role validator \nis_role_valid (){\n    if ! [[ \"$1\" =~ ^admin|user$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Password validator\nis_password_format_valid() {\n    if [ \"${#1}\" -lt '6' ]; then\n        check_result $E_INVALID \"invalid password format :: $1\"\n    fi\n}\n# Missing function - \n# Before: validate_format_shell \n# After: is_format_valid_shell\nis_format_valid_shell() {\t\n    if [ -z \"$(grep -w $1 /etc/shells)\" ]; then\t\n        echo \"Error: shell $1 is not valid\"\t\n        log_event \"$E_INVALID\" \"$EVENT\"\t\n        exit $E_INVALID\t\n    fi\t\n}\n\n# Service name validator\nis_service_format_valid() {\n    if ! [[ \"$1\" =~ ^[[:alnum:]][-|\\.|_[:alnum:]]{0,64}$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\nis_hash_format_valid() {\n  if ! [[ \"$1\" =~ ^[_A-Za-z0-9]{1,32}$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi    \n}\n\n# Format validation controller\nis_format_valid() {\n    for arg_name in $*; do\n        eval arg=\\$$arg_name\n        if [ !  -z \"$arg\" ]; then\n            case $arg_name in\n                account)        is_user_format_valid \"$arg\" \"$arg_name\";;\n                action)         is_fw_action_format_valid \"$arg\";;\n                active)         is_boolean_format_valid \"$arg\" 'active' ;;\n                aliases)        is_alias_format_valid \"$arg\" ;;\n                antispam)       is_boolean_format_valid \"$arg\" 'antispam' ;;\n                antivirus)      is_boolean_format_valid \"$arg\" 'antivirus' ;;\n                autoreply)      is_autoreply_format_valid \"$arg\" ;;\n                backup)         is_object_format_valid \"$arg\" 'backup' ;;\n                charset)        is_object_format_valid \"$arg\" \"$arg_name\" ;;\n                charsets)       is_common_format_valid \"$arg\" 'charsets' ;;\n                comment)        is_object_format_valid \"$arg\" 'comment' ;;\n                database)       is_database_format_valid \"$arg\" 'database';;\n                day)            is_cron_format_valid \"$arg\" $arg_name ;;\n                dbpass)         is_password_format_valid \"$arg\" ;;\n                dbuser)         is_dbuser_format_valid \"$arg\" 'dbuser';;\n                dkim)           is_boolean_format_valid \"$arg\" 'dkim' ;;\n                dkim_size)      is_int_format_valid \"$arg\" ;;\n                domain)         is_domain_format_valid \"$arg\" ;;\n                dvalue)         is_dns_record_format_valid \"$arg\";;\n                email)          is_email_format_valid \"$arg\" ;;\n                email_forward)  is_email_format_valid \"$arg\" ;;\n                exp)            is_date_format_valid \"$arg\" ;;\n                extentions)     is_common_format_valid \"$arg\" 'extentions' ;;\n                ftp_password)   is_password_format_valid \"$arg\" ;;\n                ftp_user)       is_user_format_valid \"$arg\" \"$arg_name\" ;;\n                hash)           is_hash_format_valid \"$arg\" \"$arg_name\" ;;\n                host)           is_object_format_valid \"$arg\" \"$arg_name\" ;;\n                hour)           is_cron_format_valid \"$arg\" $arg_name ;;\n                id)             is_int_format_valid \"$arg\" 'id' ;;\n                iface)          is_interface_format_valid \"$arg\" ;;\n                ip)             is_ip_format_valid \"$arg\" ;;\n                ip_name)        is_domain_format_valid \"$arg\" 'IP name';;\n                ip_status)      is_ip_status_format_valid \"$arg\" ;;\n                job)            is_int_format_valid \"$arg\" 'job' ;;\n                key)            is_user_format_valid \"$arg\" \"$arg_name\" ;;\n                malias)         is_user_format_valid \"$arg\" \"$arg_name\" ;;\n                max_db)         is_int_format_valid \"$arg\" 'max db';;\n                min)            is_cron_format_valid \"$arg\" $arg_name ;;\n                month)          is_cron_format_valid \"$arg\" $arg_name ;;\n                name)           is_name_format_valid \"$arg\" \"name\" ;;\n                nat_ip)         is_ip_format_valid \"$arg\" ;;\n                netmask)        is_ip_format_valid \"$arg\" 'netmask' ;;\n                newid)          is_int_format_valid \"$arg\" 'id' ;;\n                ns1)            is_domain_format_valid \"$arg\" 'ns1' ;;\n                ns2)            is_domain_format_valid \"$arg\" 'ns2' ;;\n                ns3)            is_domain_format_valid \"$arg\" 'ns3' ;;\n                ns4)            is_domain_format_valid \"$arg\" 'ns4' ;;\n                ns5)            is_domain_format_valid \"$arg\" 'ns5' ;;\n                ns6)            is_domain_format_valid \"$arg\" 'ns6' ;;\n                ns7)            is_domain_format_valid \"$arg\" 'ns7' ;;\n                ns8)            is_domain_format_valid \"$arg\" 'ns8' ;;\n                object)         is_name_format_valid \"$arg\" 'object';;\n                package)        is_object_format_valid \"$arg\" \"$arg_name\" ;;\n                password)       is_password_format_valid \"$arg\" ;;\n                port)           is_int_format_valid \"$arg\" 'port' ;;\n                port_ext)       is_fw_port_format_valid \"$arg\";;\n                protocol)       is_fw_protocol_format_valid \"$arg\" ;;\n                proxy_ext)      is_extention_format_valid \"$arg\" ;;\n                quota)          is_int_format_valid \"$arg\" 'quota' ;;\n                record)         is_common_format_valid \"$arg\" 'record';;\n                restart)        is_boolean_format_valid \"$arg\" 'restart' ;;\n                role)           is_role_valid \"$arg\" 'role' ;;\n                rtype)          is_dns_type_format_valid \"$arg\" ;;\n                rule)           is_int_format_valid \"$arg\" \"rule id\" ;;\n                service)        is_service_format_valid \"$arg\" \"$arg_name\" ;;\n                soa)            is_domain_format_valid \"$arg\" 'SOA' ;;\t\n                #missing command: is_format_valid_shell\n                shell)          is_format_valid_shell \"$arg\" ;;\n                stats_pass)     is_password_format_valid \"$arg\" ;;\n                stats_user)     is_user_format_valid \"$arg\" \"$arg_name\" ;;\n                template)       is_object_format_valid \"$arg\" \"$arg_name\" ;;\n                ttl)            is_int_format_valid \"$arg\" 'ttl';;\n                user)           is_user_format_valid \"$arg\" $arg_name;;\n                wday)           is_cron_format_valid \"$arg\" $arg_name ;;\n            esac\n        fi\n    done\n}\n\n# Domain argument formatting\nformat_domain() {\n    if [[ \"$domain\" = *[![:ascii:]]* ]]; then\n        if [[ \"$domain\" =~ [[:upper:]] ]]; then\n            domain=$(echo \"$domain\" |sed 's/[[:upper:]].*/\\L&/')\n        fi\n    else\n        if [[ \"$domain\" =~ [[:upper:]] ]]; then\n            domain=$(echo \"$domain\" |tr '[:upper:]' '[:lower:]')\n        fi\n    fi\n    if [[ \"$domain\" =~ ^www\\..* ]]; then\n        domain=$(echo \"$domain\" |sed -e \"s/^www.//\")\n    fi\n    if [[ \"$domain\" =~ .*\\.$ ]]; then\n        domain=$(echo \"$domain\" |sed -e \"s/[.]*$//g\")\n    fi\n    if [[ \"$domain\" =~ ^\\. ]]; then\n        domain=$(echo \"$domain\" |sed -e \"s/^[.]*//\")\n    fi\n}\n\nformat_domain_idn() {\n    if [ -z \"$domain_idn\" ]; then\n        domain_idn=$domain\n    fi\n    if [[ \"$domain_idn\" = *[![:ascii:]]* ]]; then\n        domain_idn=$(idn -t --quiet -a $domain_idn)\n    fi\n}\n\nformat_aliases() {\n    if [ ! -z \"$aliases\" ] && [ \"$aliases\" != 'none' ]; then\n        aliases=$(echo $aliases |tr '[:upper:]' '[:lower:]' |tr ',' '\\n')\n        aliases=$(echo \"$aliases\" |sed -e \"s/\\.$//\" |sort -u)\n        aliases=$(echo \"$aliases\" |tr -s '.')\n        aliases=$(echo \"$aliases\" |sed -e \"s/[.]*$//g\")\n        aliases=$(echo \"$aliases\" |sed -e \"s/^[.]*//\")\n        aliases=$(echo \"$aliases\" |sed -e \"/^$/d\")\n        aliases=$(echo \"$aliases\" |tr '\\n' ',' |sed -e \"s/,$//\")\n    fi\n}\n\n\ncheck_backup_conditions() {\n    # Checking load average\n    la=$(cat /proc/loadavg |cut -f 1 -d ' ' |cut -f 1 -d '.')\n    # i=0\n    while [ \"$la\" -ge \"$BACKUP_LA_LIMIT\" ]; do\n        echo -e \"$(date \"+%F %T\") Load Average $la\"\n        sleep 60\n        la=$(cat /proc/loadavg |cut -f 1 -d ' ' |cut -f 1 -d '.')\n    done\n}\n\n# Define download function\ndownload_file() {\n  local url=$1\n  local destination=$2\n  local force=$3\n\n  # Default destination is the curent working directory\n  local dstopt=\"\"\n\n  if [ ! -z \"$(echo \"$url\" | grep -E \"\\.(gz|gzip|bz2|zip|xz)$\")\" ]; then\n    # When an archive file is downloaded it will be first saved localy\n    dstopt=\"--directory-prefix=$ARCHIVE_DIR\"\n    local is_archive=\"true\"\n    local filename=\"${url##*/}\"\n    if [ -z \"$filename\" ]; then\n      >&2 echo \"[!] No filename was found in url, exiting ($url)\"\n      exit 1\n    fi\n    if [ ! -z \"$force\" ] && [ -f \"$ARCHIVE_DIR/$filename\" ]; then\n      rm -f $ARCHIVE_DIR/$filename\n    fi\n  elif [ ! -z \"$destination\" ]; then\n    # Plain files will be written to specified location\n    dstopt=\"-O $destination\"\n  fi\n  # check for corrupted archive\n  if [ -f \"$ARCHIVE_DIR/$filename\" ] && [ \"$is_archive\" = \"true\" ]; then\n    tar -tzf \"$ARCHIVE_DIR/$filename\" > /dev/null 2>&1\n    if [ $? -ne 0 ]; then\n      >&2 echo \"[!] Archive $ARCHIVE_DIR/$filename is corrupted, redownloading\"\n      rm -f $ARCHIVE_DIR/$filename\n    fi\n  fi\n\n  if [ ! -f \"$ARCHIVE_DIR/$filename\" ]; then\n    wget $url -q $dstopt --show-progress --progress=bar:force --limit-rate=3m\n  fi\n\n  if [ ! -z \"$destination\" ] && [ \"$is_archive\" = \"true\" ]; then\n    if [ \"$destination\" = \"-\" ]; then\n      cat \"$ARCHIVE_DIR/$filename\"\n    elif [ -d \"$(dirname $destination)\" ]; then\n      cp \"$ARCHIVE_DIR/$filename\" \"$destination\"\n    fi\n  fi\n}\n\ncheck_hestia_demo_mode() {\n    demo_mode=$(grep DEMO_MODE /usr/local/hestia/conf/hestia.conf | cut -d '=' -f2 | sed \"s|'||g\")\n    if [ ! -z \"$demo_mode\" ] && [ \"$demo_mode\" = \"yes\" ]; then\n        echo \"ERROR: Unable to perform operation due to security restrictions that are in place.\"\n        exit 1\n    fi\n}\n\nmultiphp_count() {\n    echo $(ls -d /etc/php/*/fpm/pool.d 2>/dev/null |wc -l)\n}\n\nmultiphp_versions() {\n    local -a php_versions_list;\n    local php_ver;\n    if [ \"$(multiphp_count)\" -gt 0 ] ; then\n        for php_ver in $(ls -v /etc/php/); do\n            [ ! -d \"/etc/php/$php_ver/fpm/pool.d/\" ] && continue\n            php_versions_list+=($php_ver)\n        done\n        echo \"${php_versions_list[@]}\"\n    fi\n}\n\nmultiphp_default_version() {\n    # Get system wide default php version (set by update-alternatives)\n    local sys_phpversion=$(php -r \"echo (float)phpversion();\")\n\n    # Check if the system php also has php-fpm enabled, otherwise return\n    # the most recent php version which does have it installed.\n    if [ ! -d \"/etc/php/$sys_phpversion/fpm/pool.d/\" ]; then\n        local all_versions=\"$(multiphp_versions)\"\n        if [ ! -z \"$all_versions\" ]; then\n            sys_phpversion=\"${all_versions##*\\ }\";\n        fi\n    fi\n\n    echo \"$sys_phpversion\"\n}\n\n# Run arbitrary cli commands with dropped privileges\n# Note: setpriv --init-groups is not available on debian9 (util-linux 2.29.2)\n# Input:\n#     - $user : Vaild hestia user\nuser_exec() {\n    is_object_valid 'user' 'USER' \"$user\"\n\n    local user_groups=$(id -G \"$user\")\n    user_groups=${user_groups//\\ /,}\n\n    setpriv --groups \"$user_groups\" --reuid \"$user\" --regid \"$user\" -- $@\n}\n\n# Simple chmod wrapper that skips symlink files after glob expand\nno_symlink_chmod() {\n    local filemode=$1; shift;\n\n    for i in \"$@\"; do\n        [[ -L ${i} ]] && continue\n\n        chmod \"${filemode}\" \"${i}\"\n    done\n}"], "fixing_code": ["#!/bin/bash\n# info: update hestia package/configs\n# options: PACKAGE\n# labels: panel\n#\n# example: v-update-sys-hestia hestia-php\n#\n# The function runs as apt update trigger. It pulls shell script from hestia\n# server and runs it. (hestia, hestia-nginx and hestia-php are valid options)\n\n\n#----------------------------------------------------------#\n#                    Variable&Function                     #\n#----------------------------------------------------------#\n\n# Argument definition\npackage=$1\n\n# Importing system environment\nsource /etc/profile\n\n# Includes\n# shellcheck source=/usr/local/hestia/func/main.sh\nsource $HESTIA/func/main.sh\n# shellcheck source=/usr/local/hestia/conf/hestia.conf\nsource $HESTIA/conf/hestia.conf\n\n\n#----------------------------------------------------------#\n#                    Verifications                         #\n#----------------------------------------------------------#\n\n# Checking arg number\ncheck_args '1' \"$#\" 'PACKAGE'\nis_hestia_package \"hestia,hestia-nginx,hestia-php\" \"$package\"\n\n# Perform verification if read-only mode is enabled\ncheck_hestia_demo_mode\n\n#----------------------------------------------------------#\n#                       Action                             #\n#----------------------------------------------------------#\n\n# Update repo\napt-get update -o Dir::Etc::sourcelist=\"sources.list.d/hestia.list\" \\\n    -o Dir::Etc::sourceparts=\"-\" -o APT::Get::List-Cleanup=\"0\" -qq\n\n# Update hestia package\napt-get install $package -qq > /dev/null 2>&1\ncheck_result $? \"$package update failed\" $E_UPDATE\n\n#----------------------------------------------------------#\n#                       Hestia                             #\n#----------------------------------------------------------#\n\n# Logging\nlog_event \"$OK\" \"$ARGUMENTS\"\n\nexit\n", "#!/usr/bin/env bash\n# Internal variables\nHOMEDIR='/home'\nBACKUP='/backup'\nBACKUP_GZIP=9\nBACKUP_DISK_LIMIT=95\nBACKUP_LA_LIMIT=`cat /proc/cpuinfo | grep processor | wc -l`\nRRD_STEP=300\nBIN=$HESTIA/bin\nHESTIA_INSTALL_DIR=$HESTIA/install/deb\nHESTIA_BACKUP=\"/root/hst_backups/$(date +%d%m%Y%H%M)\"\nUSER_DATA=$HESTIA/data/users/$user\nWEBTPL=$HESTIA/data/templates/web\nMAILTPL=$HESTIA/data/templates/mail\nDNSTPL=$HESTIA/data/templates/dns\nRRD=$HESTIA/web/rrd\nSENDMAIL=\"$HESTIA/web/inc/mail-wrapper.php\"\nHESTIA_GIT_REPO=\"https://raw.githubusercontent.com/hestiacp/hestiacp\"\nHESTIA_THEMES=\"$HESTIA/web/css/themes\"\nHESTIA_THEMES_CUSTOM=\"$HESTIA/web/css/themes/custom\"\nSCRIPT=\"$(basename $0)\"\n\n# Return codes\nOK=0\nE_ARGS=1\nE_INVALID=2\nE_NOTEXIST=3\nE_EXISTS=4\nE_SUSPENDED=5\nE_UNSUSPENDED=6\nE_INUSE=7\nE_LIMIT=8\nE_PASSWORD=9\nE_FORBIDEN=10\nE_DISABLED=11\nE_PARSING=12\nE_DISK=13\nE_LA=14\nE_CONNECT=15\nE_FTP=16\nE_DB=17\nE_RRD=18\nE_UPDATE=19\nE_RESTART=20\n\n# Detect operating system\ndetect_os() {\n    if [ -e \"/etc/os-release\" ]; then\n        get_os_type=$(grep \"^ID=\" /etc/os-release | cut -f 2 -d '=')\n        if [ \"$get_os_type\" = \"ubuntu\" ]; then\n            if [ -e '/usr/bin/lsb_release' ]; then\n                OS_VERSION=\"$(lsb_release -s -r)\"\n                OS_TYPE='Ubuntu'            \n            fi\n        elif [ \"$get_os_type\" = \"debian\" ]; then\n            OS_TYPE='Debian'\n            OS_VERSION=$(cat /etc/debian_version|grep -o \"[0-9]\\{1,2\\}\"|head -n1)\n        fi\n    else\n        OS_TYPE=\"Unsupported OS\"\n        OS_VERSION=\"Unknown\"\n    fi\n}\n\n# Generate time stamp\nnew_timestamp() {\n    time_n_date=$(date +'%T %F')\n    time=$(echo \"$time_n_date\" |cut -f 1 -d \\ )\n    date=$(echo \"$time_n_date\" |cut -f 2 -d \\ )\n}\n\n# Event string for logger\nARGS=(\"$@\")\nfor ((I=1; I <= $# ; I++)); do\n    if [[ \"$HIDE\" != $I ]]; then\n        ARGUMENTS=\"$ARGUMENTS '${ARGS[${I}-1]}'\"\n    else\n        ARGUMENTS=\"$ARGUMENTS '******'\"\n    fi\ndone\n\n# Log event function\nlog_event() {\n    if [ -z \"$time\" ]; then\n        LOG_TIME=\"$(date +'%F %T') $(basename $0)\"\n    else\n        LOG_TIME=\"$date $time $(basename $0)\"\n    fi\n    if [ \"$1\" -eq 0 ]; then\n        echo \"$LOG_TIME $2\" >> $HESTIA/log/system.log\n    else\n        echo \"$LOG_TIME $2 [Error $1]\" >> $HESTIA/log/error.log\n    fi\n}\n\n# Log user history\nlog_history() {\n    cmd=$1\n    undo=${2-no}\n    log_user=${3-$user}\n\n    if ! $BIN/v-list-user \"$log_user\" >/dev/null; then\n        return $E_NOTEXIST\n    fi\n\n    log=$HESTIA/data/users/$log_user/history.log\n    touch $log\n    if [ '99' -lt \"$(wc -l $log |cut -f 1 -d ' ')\" ]; then\n        tail -n 49 $log > $log.moved\n        mv -f $log.moved $log\n        chmod 660 $log\n    fi\n    if [ -z \"$date\" ]; then\n        time_n_date=$(date +'%T %F')\n        time=$(echo \"$time_n_date\" |cut -f 1 -d \\ )\n        date=$(echo \"$time_n_date\" |cut -f 2 -d \\ )\n    fi\n    curr_str=$(grep \"ID=\" $log | cut -f 2 -d \\' | sort -n | tail -n1)\n    id=\"$((curr_str +1))\"\n    echo \"ID='$id' DATE='$date' TIME='$time' CMD='$cmd' UNDO='$undo'\" >> $log\n}\n\n# Result checker\ncheck_result() {\n    if [ $1 -ne 0 ]; then\n        echo \"Error: $2\"\n        if [ ! -z \"$3\" ]; then\n            log_event \"$3\" \"$ARGUMENTS\"\n            exit $3\n        else\n            log_event \"$1\" \"$ARGUMENTS\"\n            exit $1\n        fi\n    fi\n}\n\n# Argument list checker\ncheck_args() {\n    if [ \"$1\" -gt \"$2\" ]; then\n        echo \"Usage: $(basename $0) $3\"\n        check_result $E_ARGS \"not enought arguments\" >/dev/null\n    fi\n}\n\n# Subsystem checker\nis_system_enabled() {\n    if [ -z \"$1\" ] || [ \"$1\" = no ]; then\n        check_result $E_DISABLED \"$2 is not enabled\"\n    fi\n}\n\n\n# User package check\nis_package_full() {\n    case \"$1\" in\n        WEB_DOMAINS) used=$(wc -l $USER_DATA/web.conf);;\n        WEB_ALIASES) used=$(echo $aliases |tr ',' '\\n' |wc -l);;\n        DNS_DOMAINS) used=$(wc -l $USER_DATA/dns.conf);;\n        DNS_RECORDS) used=$(wc -l $USER_DATA/dns/$domain.conf);;\n        MAIL_DOMAINS) used=$(wc -l $USER_DATA/mail.conf);;\n        MAIL_ACCOUNTS) used=$(wc -l $USER_DATA/mail/$domain.conf);;\n        DATABASES) used=$(wc -l $USER_DATA/db.conf);;\n        CRON_JOBS) used=$(wc -l $USER_DATA/cron.conf);;\n    esac\n    used=$(echo \"$used\"| cut -f 1 -d \\ )\n    limit=$(grep \"^$1=\" $USER_DATA/user.conf |cut -f 2 -d \\')\n    if [ \"$limit\" != 'unlimited' ] && [[ \"$used\" -ge \"$limit\" ]]; then\n        check_result $E_LIMIT \"$1 limit is reached :: upgrade user package\"\n    fi\n}\n\n# User owner for reseller plugin\nget_user_owner() {\n    if [ -z \"$RESELLER_KEY\" ]; then\n        owner='admin'\n    else\n        owner=$(grep \"^OWNER\" $USER_DATA/user.conf| cut -f 2 -d \\')\n        if [ -z \"$owner\" ]; then\n            owner='admin'\n        fi\n    fi\n}\n\n# Random password generator\ngenerate_password() {\n    matrix=$1\n    length=$2\n    if [ -z \"$matrix\" ]; then\n        matrix=\"A-Za-z0-9\"\n    fi\n    if [ -z \"$length\" ]; then\n        length=16\n    fi\n    head /dev/urandom | tr -dc $matrix | head -c$length\n}\n\n# Package existence check\nis_package_valid() {\n    if [ -z \"$1\" ]; then\n        pkg_dir=\"$HESTIA/data/packages\"\n    fi\n    if [ ! -e \"$pkg_dir/$package.pkg\" ]; then\n        check_result $E_NOTEXIST \"package $package doesn't exist\"\n    fi\n}\n\n# Validate system type\nis_type_valid() {\n    if [ -z \"$(echo $1 | grep -w $2)\" ]; then\n        check_result $E_INVALID \"$2 type is invalid\"\n    fi\n}\n\n# Check user backup settings\nis_backup_enabled() {\n    BACKUPS=$(grep \"^BACKUPS=\" $USER_DATA/user.conf | cut -f2 -d \\')\n    if [ -z \"$BACKUPS\" ] || [[ \"$BACKUPS\" -le '0' ]]; then\n        check_result $E_DISABLED \"user backup is disabled\"\n    fi\n}\n\n# Check user backup settings\nis_backup_scheduled() {\n    if [ -e \"$HESTIA/data/queue/backup.pipe\" ]; then\n        check_q=$(grep \" $user \" $HESTIA/data/queue/backup.pipe | grep $1)\n        if [ ! -z \"$check_q\" ]; then\n            check_result $E_EXISTS \"$1 is already scheduled\"\n        fi\n    fi\n}\n\n# Check if object is new\nis_object_new() {\n    if [ $2 = 'USER' ]; then\n        if [ -d \"$USER_DATA\" ]; then\n            object=\"OK\"\n        fi\n    else\n        object=$(grep \"$2='$3'\" $USER_DATA/$1.conf)\n    fi\n    if [ ! -z \"$object\" ]; then\n        check_result $E_EXISTS \"$2=$3 already exists\"\n    fi\n}\n\n# Check if object is valid\nis_object_valid() {\n    if [ $2 = 'USER' ]; then\n        tstpath=\"$(readlink -f \"$HESTIA/data/users/$3\")\"\n        if [ \"$(dirname \"$tstpath\")\" != \"$(readlink -f \"$HESTIA/data/users\")\" ] || [ ! -d \"$HESTIA/data/users/$3\" ]; then\n            check_result $E_NOTEXIST \"$1 $3 doesn't exist\"\n        fi\n    else\n        object=$(grep \"$2='$3'\" $HESTIA/data/users/$user/$1.conf)\n        if [ -z \"$object\" ]; then\n            arg1=$(basename $1)\n            arg2=$(echo $2 |tr '[:upper:]' '[:lower:]')\n            check_result $E_NOTEXIST \"$arg1 $arg2 $3 doesn't exist\"\n        fi\n    fi\n}\n\n# Check if a object string with key values pairs has the correct format and load it afterwards\nparse_object_kv_list_non_eval() {\n    local str\n    local objkv obj_key obj_val\n    local OLD_IFS=\"$IFS\"\n\n    str=${@//$'\\n'/ }\n    str=${str//\\\"/\\\\\\\"}\n    str=${str//$/\\\\$}\n    IFS=$'\\n'\n\n    # Extract and loop trough each key-value pair. (Regex test: https://regex101.com/r/eiMufk/5)\n    for objkv in $( echo \"$str\" | perl -n -e \"while(/\\b([a-zA-Z]+[\\w]*)='(.*?)'(\\s|\\$)/g) {print \\$1.'='.\\$2 . \\\"\\n\\\" }\" ); do\n\n        if ! [[ \"$objkv\" =~ ^([[:alnum:]][_[:alnum:]]{0,64}[[:alnum:]])=(\\'?[^\\']+?\\'?)?$ ]]; then\n            check_result $E_INVALID \"Invalid key value format [$objkv]\"\n        fi\n\n        obj_key=${objkv%%=*}    # strip everything after first  '=' char\n        obj_val=${objkv#*=}     # strip everything before first '=' char\n        declare -g $obj_key=\"$obj_val\"\n\n    done\n    IFS=\"$OLD_IFS\"\n}\n\n# Check if a object string with key values pairs has the correct format and load it afterwards\nparse_object_kv_list() {\n    local str\n    local objkv\n    local suboutput\n    local OLD_IFS=\"$IFS\"\n\n    str=${@//$'\\n'/ }\n    str=${str//\\\"/\\\\\\\"}\n    str=${str//$/\\\\$}\n    IFS=$'\\n'\n\n    suboutput=$(setpriv --clear-groups --reuid nobody --regid nogroup bash -c \"PS4=''; set -xe; eval \\\"${str}\\\"\" 2>&1)\n    check_result $? \"Invalid object format: ${str}\" $E_INVALID\n\n    for objkv in $suboutput; do\n\n        if [[ \"$objkv\" =~ ^'eval ' ]]; then\n          continue\n        fi\n\n        if ! [[ \"$objkv\" =~ ^([[:alnum:]][_[:alnum:]]{0,64}[[:alnum:]])=(\\'?[^\\']+?\\'?)?$ ]]; then\n            check_result $E_INVALID \"Invalid key value format [$objkv]\"\n        fi\n\n        eval \"$objkv\"\n    done\n    IFS=\"$OLD_IFS\"\n}\n\n# Check if object is supended\nis_object_suspended() {\n    if [ $2 = 'USER' ]; then\n        spnd=$(cat $USER_DATA/$1.conf|grep \"SUSPENDED='yes'\")\n    else\n        spnd=$(grep \"$2='$3'\" $USER_DATA/$1.conf|grep \"SUSPENDED='yes'\")\n    fi\n    if [ -z \"$spnd\" ]; then\n        check_result $E_UNSUSPENDED \"$(basename $1) $3 is not suspended\"\n    fi\n}\n\n# Check if object is unsupended\nis_object_unsuspended() {\n    if [ $2 = 'USER' ]; then\n        spnd=$(cat $USER_DATA/$1.conf |grep \"SUSPENDED='yes'\")\n    else\n        spnd=$(grep \"$2='$3'\" $USER_DATA/$1.conf |grep \"SUSPENDED='yes'\")\n    fi\n    if [ ! -z \"$spnd\" ]; then\n        check_result $E_SUSPENDED \"$(basename $1) $3 is suspended\"\n    fi\n}\n\n# Check if object value is empty\nis_object_value_empty() {\n    str=$(grep \"$2='$3'\" $USER_DATA/$1.conf)\n    parse_object_kv_list \"$str\"\n    eval value=$4\n    if [ ! -z \"$value\" ] && [ \"$value\" != 'no' ]; then\n        check_result $E_EXISTS \"${4//$}=$value already exists\"\n    fi\n}\n\n# Check if object value is empty\nis_object_value_exist() {\n    str=$(grep \"$2='$3'\" $USER_DATA/$1.conf)\n    parse_object_kv_list \"$str\"\n    eval value=$4\n    if [ -z \"$value\" ] || [ \"$value\" = 'no' ]; then\n        check_result $E_NOTEXIST \"${4//$}=$value doesn't exist\"\n    fi\n}\n\n# Check if password is transmitted via file\nis_password_valid() {\n    if [[ \"$password\" =~ ^/tmp/ ]]; then\n        if [ -f \"$password\" ]; then\n            password=\"$(head -n1 $password)\"\n        fi\n    fi\n}\n\n# Check if hash is transmitted via file\nis_hash_valid() {\n    if [[ \"$hash\" =~ ^/tmp/ ]]; then\n        if [ -f \"$hash\" ]; then\n            hash=\"$(head -n1 $hash)\"\n        fi\n    fi\n}\n\n# Check if directory is a symlink\nis_dir_symlink() {\n    if [[ -L \"$1\" ]]; then\n        check_result $E_FORBIDEN \"$1 directory is a symlink\"\n    fi\n}\n\n# Get object value\nget_object_value() {\n    object=$(grep \"$2='$3'\" $USER_DATA/$1.conf)\n    parse_object_kv_list \"$object\"\n    eval echo $4\n}\n\n# Update object value\nupdate_object_value() {\n    row=$(grep -nF \"$2='$3'\" $USER_DATA/$1.conf)\n    lnr=$(echo $row | cut -f 1 -d ':')\n    object=$(echo $row | sed \"s/^$lnr://\")\n    parse_object_kv_list \"$object\"\n    eval old=\"$4\"\n    old=$(echo \"$old\" | sed -e 's/\\\\/\\\\\\\\/g' -e 's/&/\\\\&/g' -e 's/\\//\\\\\\//g')\n    new=$(echo \"$5\" | sed -e 's/\\\\/\\\\\\\\/g' -e 's/&/\\\\&/g' -e 's/\\//\\\\\\//g')\n    sed -i \"$lnr s/${4//$/}='${old//\\*/\\\\*}'/${4//$/}='${new//\\*/\\\\*}'/g\" \\\n        $USER_DATA/$1.conf\n}\n\n# Add object key\nadd_object_key() {\n    row=$(grep -n \"$2='$3'\" $USER_DATA/$1.conf)\n    lnr=$(echo $row | cut -f 1 -d ':')\n    object=$(echo $row | sed \"s/^$lnr://\")\n    if [ -z \"$(echo $object |grep $4=)\" ]; then\n        eval old=\"$4\"\n        sed -i \"$lnr s/$5='/$4='' $5='/\" $USER_DATA/$1.conf\n    fi\n}\n\n# Search objects\nsearch_objects() {\n    OLD_IFS=\"$IFS\"\n    IFS=$'\\n'\n    for line in $(grep $2=\\'$3\\' $USER_DATA/$1.conf); do\n        parse_object_kv_list \"$line\"\n        eval echo \\$$4\n    done\n    IFS=\"$OLD_IFS\"\n}\n\n# Get user value\nget_user_value() {\n    grep \"^${1//$/}=\" $USER_DATA/user.conf | head -1 | awk -F \"'\" '{print $2}'\n}\n\n# Update user value in user.conf\nupdate_user_value() {\n    key=\"${2//$}\"\n    lnr=$(grep -n \"^$key='\" $HESTIA/data/users/$1/user.conf |cut -f 1 -d ':')\n    if [ ! -z \"$lnr\" ]; then\n        sed -i \"$lnr d\" $HESTIA/data/users/$1/user.conf\n        sed -i \"$lnr i\\\\$key='${3}'\" $HESTIA/data/users/$1/user.conf\n    fi\n}\n\n# Increase user counter\nincrease_user_value() {\n    key=\"${2//$}\"\n    factor=\"${3-1}\"\n    conf=\"$HESTIA/data/users/$1/user.conf\"\n    old=$(grep \"$key=\" $conf | cut -f 2 -d \\')\n    if [ -z \"$old\" ]; then\n        old=0\n    fi\n    new=$((old + factor))\n    sed -i \"s/$key='$old'/$key='$new'/g\" $conf\n}\n\n# Decrease user counter\ndecrease_user_value() {\n    key=\"${2//$}\"\n    factor=\"${3-1}\"\n    conf=\"$HESTIA/data/users/$1/user.conf\"\n    old=$(grep \"$key=\" $conf | cut -f 2 -d \\')\n    if [ -z \"$old\" ]; then\n        old=0\n    fi\n    if [ \"$old\" -le 1 ]; then\n        new=0\n    else\n        new=$((old - factor))\n    fi\n    if [ \"$new\" -lt 0 ]; then\n        new=0\n    fi\n    sed -i \"s/$key='$old'/$key='$new'/g\" $conf\n}\n\n# Notify user\nsend_notice() {\n    topic=$1\n    notice=$2\n\n    if [ \"$notify\" = 'yes' ]; then\n        touch $USER_DATA/notifications.conf\n        chmod 660 $USER_DATA/notifications.conf\n\n        time_n_date=$(date +'%T %F')\n        time=$(echo \"$time_n_date\" |cut -f 1 -d \\ )\n        date=$(echo \"$time_n_date\" |cut -f 2 -d \\ )\n\n        nid=$(grep \"NID=\" $USER_DATA/notifications.conf |cut -f 2 -d \\')\n        nid=$(echo \"$nid\" |sort -n |tail -n1)\n        if [ ! -z \"$nid\" ]; then\n            nid=\"$((nid +1))\"\n        else\n            nid=1\n        fi\n\n        str=\"NID='$nid' TOPIC='$topic' NOTICE='$notice' TYPE='$type'\"\n        str=\"$str ACK='no' TIME='$time' DATE='$date'\"\n\n        echo \"$str\" >> $USER_DATA/notifications.conf\n\n        if [ -z \"$(grep NOTIFICATIONS $USER_DATA/user.conf)\" ]; then\n            sed -i \"s/^TIME/NOTIFICATIONS='yes'\\nTIME/g\" $USER_DATA/user.conf\n        else\n            update_user_value \"$user\" '$NOTIFICATIONS' \"yes\"\n        fi\n    fi\n}\n\n# Recalculate U_DISK value\nrecalc_user_disk_usage() {\n    u_usage=0\n    if [ -f \"$USER_DATA/web.conf\" ]; then\n        usage=0\n        dusage=$(grep 'U_DISK=' $USER_DATA/web.conf |\\\n            awk -F \"U_DISK='\" '{print $2}' | cut -f 1 -d \\')\n        for disk_usage in $dusage; do \n                usage=$((usage + disk_usage))\n        done\n        d=$(grep \"U_DISK_WEB='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n        sed -i \"s/U_DISK_WEB='$d'/U_DISK_WEB='$usage'/g\" $USER_DATA/user.conf\n        u_usage=$((u_usage + usage))\n    fi\n\n    if [ -f \"$USER_DATA/mail.conf\" ]; then\n        usage=0\n        dusage=$(grep 'U_DISK=' $USER_DATA/mail.conf |\\\n            awk -F \"U_DISK='\" '{print $2}' | cut -f 1 -d \\')\n        for disk_usage in $dusage; do \n                usage=$((usage + disk_usage))\n        done\n        d=$(grep \"U_DISK_MAIL='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n        sed -i \"s/U_DISK_MAIL='$d'/U_DISK_MAIL='$usage'/g\" $USER_DATA/user.conf\n        u_usage=$((u_usage + usage))\n    fi\n\n    if [ -f \"$USER_DATA/db.conf\" ]; then\n        usage=0\n        dusage=$(grep 'U_DISK=' $USER_DATA/db.conf |\\\n            awk -F \"U_DISK='\" '{print $2}' | cut -f 1 -d \\')\n        for disk_usage in $dusage; do \n                usage=$((usage + disk_usage))\n        done\n        d=$(grep \"U_DISK_DB='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n        sed -i \"s/U_DISK_DB='$d'/U_DISK_DB='$usage'/g\" $USER_DATA/user.conf\n        u_usage=$((u_usage + usage))\n    fi\n    usage=$(grep 'U_DISK_DIRS=' $USER_DATA/user.conf | cut -f 2 -d \"'\")\n    u_usage=$((u_usage + usage))\n    old=$(grep \"U_DISK='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n    sed -i \"s/U_DISK='$old'/U_DISK='$u_usage'/g\" $USER_DATA/user.conf\n}\n\n# Recalculate U_BANDWIDTH value\nrecalc_user_bandwidth_usage() {\n    usage=0\n    bandwidth_usage=$(grep 'U_BANDWIDTH=' $USER_DATA/web.conf |\\\n        awk -F \"U_BANDWIDTH='\" '{print $2}'|cut -f 1 -d \\')\n    for bandwidth in $bandwidth_usage; do \n        usage=$((usage + bandwidth))\n    done\n    old=$(grep \"U_BANDWIDTH='\" $USER_DATA/user.conf | cut -f 2 -d \\')\n    sed -i \"s/U_BANDWIDTH='$old'/U_BANDWIDTH='$usage'/g\" $USER_DATA/user.conf\n}\n\n# Get next cron job id\nget_next_cronjob() {\n    if [ -z \"$job\" ]; then\n        curr_str=$(grep \"JOB=\" $USER_DATA/cron.conf|cut -f 2 -d \\'|\\\n                 sort -n|tail -n1)\n        job=\"$((curr_str +1))\"\n    fi\n}\n\n# Sort cron jobs by id\nsort_cron_jobs() {\n    cat $USER_DATA/cron.conf |sort -n -k 2 -t \\' > $USER_DATA/cron.tmp\n    mv -f $USER_DATA/cron.tmp $USER_DATA/cron.conf\n}\n\n# Sync cronjobs with system cron\nsync_cron_jobs() {\n    source $USER_DATA/user.conf\n    if [ -e \"/var/spool/cron/crontabs\" ]; then\n        crontab=\"/var/spool/cron/crontabs/$user\"\n    else\n        crontab=\"/var/spool/cron/$user\"\n    fi\n    rm -f $crontab\n    if [ \"$CRON_REPORTS\" = 'yes' ]; then\n        echo \"MAILTO=$CONTACT\" > $crontab\n        echo 'CONTENT_TYPE=\"text/plain; charset=utf-8\"' >> $crontab\n    fi\n    while read line; do\n        parse_object_kv_list \"$line\"\n        if [ \"$SUSPENDED\" = 'no' ]; then\n            echo \"$MIN $HOUR $DAY $MONTH $WDAY $CMD\" |\\\n                sed -e \"s/%quote%/'/g\" -e \"s/%dots%/:/g\" \\\n                >> $crontab\n        fi\n    done < $USER_DATA/cron.conf\n    chown $user:$user $crontab\n    chmod 600 $crontab\n}\n\n# User format validator\nis_user_format_valid() {\n    if [ ${#1} -eq 1 ]; then\n        if ! [[ \"$1\" =~ ^^[[:alnum:]]$ ]]; then\n            check_result $E_INVALID \"invalid $2 format :: $1\"\n        fi\n    else\n        if ! [[ \"$1\" =~ ^[[:alnum:]][-|\\.|_[:alnum:]]{0,28}[[:alnum:]]$ ]]\n            then\n            check_result $E_INVALID \"invalid $2 format :: $1\"\n        fi\n    fi\n}\n\n# Domain format validator\nis_domain_format_valid() {\n    object_name=${2-domain}\n    exclude=\"[!|@|#|$|^|&|*|(|)|+|=|{|}|:|,|<|>|?|_|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [[ $1 =~ $exclude ]] || [[ $1 =~ ^[0-9]+$ ]] || [[ $1 =~ \"\\.\\.\" ]] || [[ $1 =~ \"$(printf '\\t')\" ]]; then\n        check_result $E_INVALID \"invalid $object_name format :: $1\"\n    fi\n}\n\n# Alias forman validator\nis_alias_format_valid() {\n    for object in ${1//,/ }; do\n        exclude=\"[!|@|#|$|^|&|(|)|+|=|{|}|:|<|>|?|_|/|\\|\\\"|'|;|%|\\`| ]\"\n        if [[ \"$object\" =~ $exclude ]]; then\n            check_result $E_INVALID \"invalid alias format :: $object\"\n        fi\n        if [[ \"$object\" =~ [*] ]] && ! [[ \"$object\" =~ ^[*]\\..* ]]; then\n            check_result $E_INVALID \"invalid alias format :: $object\"\n        fi\n    done\n}\n\n# IP format validator\nis_ip_format_valid() {\n    object_name=${2-ip}\n    ip_regex='([1-9]?[0-9]|1[0-9]{2}|2[0-4][0-9]|25[0-5])'\n    ip_clean=$(echo \"${1%/*}\")\n    if ! [[ $ip_clean =~ ^$ip_regex\\.$ip_regex\\.$ip_regex\\.$ip_regex$ ]]; then\n        check_result $E_INVALID \"invalid $object_name format :: $1\"\n    fi\n    if [ $1 != \"$ip_clean\" ]; then\n        ip_cidr=\"$ip_clean/\"\n        ip_cidr=$(echo \"${1#$ip_cidr}\")\n        if [[ \"$ip_cidr\" -gt 32 ]] || [[ \"$ip_cidr\" =~ [:alnum:] ]]; then\n            check_result $E_INVALID \"invalid $object_name format :: $1\"\n        fi\n    fi\n}\n\n# Proxy extention format validator\nis_extention_format_valid() {\n    exclude=\"[!|#|$|^|&|(|)|+|=|{|}|:|@|<|>|?|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [[ \"$1\" =~ $exclude ]]; then\n        check_result $E_INVALID \"invalid proxy extention format :: $1\"\n    fi\n}\n\n# Number format validator\nis_number_format_valid() {\n    object_name=${2-number}\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]] ; then\n        check_result $E_INVALID \"invalid $object_name format :: $1\"\n    fi\n}\n\n# Autoreply format validator\nis_autoreply_format_valid() {\n    if [ 10240 -le ${#1} ]; then\n        check_result $E_INVALID \"invalid autoreply format :: $1\"\n    fi\n}\n\n# Boolean format validator\nis_boolean_format_valid() {\n    if [ \"$1\" != 'yes' ] && [ \"$1\" != 'no' ]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Common format validator\nis_common_format_valid() {\n    exclude=\"[!|#|$|^|&|(|)|+|=|{|}|:|<|>|?|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [[ \"$1\" =~ $exclude ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [ 400 -le ${#1} ]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ \"$1\" =~ @ ]] && [ ${#1} -gt 1 ] ; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $1 =~ \\* ]]; then\n        if [[ \"$(echo $1 | grep -o '\\*\\.' |wc -l)\" -eq 0 ]] && [[ $1 != '*' ]] ; then\n                        check_result $E_INVALID \"invalid $2 format :: $1\"\n        fi\n    fi\n    if [[ $(echo -n \"$1\" | tail -c 1) =~ [^a-zA-Z0-9_*@] ]]; then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $(echo -n \"$1\" | grep -c '\\.\\.') -gt 0 ]];then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $(echo -n \"$1\" | head -c 1) =~ [^a-zA-Z0-9_*@] ]]; then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $(echo -n \"$1\" | grep -c '\\-\\-') -gt 0 ]]; then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n    if [[ $(echo -n \"$1\" | grep -c '\\_\\_') -gt 0 ]]; then\n           check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Database format validator\nis_database_format_valid() {\n    exclude=\"[!|@|#|$|^|&|*|(|)|+|=|{|}|:|,|<|>|?|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [[ \"$1\" =~ $exclude ]] || [ 64 -le ${#1} ]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Date format validator\nis_date_format_valid() {\n    if ! [[ \"$1\" =~ ^[0-9][0-9][0-9][0-9]-[0-9][0-9]-[0-9][0-9]$ ]]; then\n        check_result $E_INVALID \"invalid date format :: $1\"\n    fi\n}\n\n# Database user validator\nis_dbuser_format_valid() {\n    exclude=\"[!|@|#|$|^|&|*|(|)|+|=|{|}|:|,|<|>|?|/|\\|\\\"|'|;|%|\\`| ]\"\n    if [ 33 -le ${#1} ]; then\n        check_result $E_INVALID \"mysql username can be up to 32 characters long\"\n    fi\n    if [[ \"$1\" =~ $exclude ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# DNS record type validator\nis_dns_type_format_valid() {\n    known_dnstype='A,AAAA,NS,CNAME,MX,TXT,SRV,DNSKEY,KEY,IPSECKEY,PTR,SPF,TLSA,CAA'\n    if [ -z \"$(echo $known_dnstype |grep -w $1)\" ]; then\n        check_result $E_INVALID \"invalid dns record type format :: $1\"\n    fi\n}\n\n# DNS record validator\nis_dns_record_format_valid() {\n    if [ \"$rtype\" = 'A' ]; then\n        is_ip_format_valid \"$1\"\n    fi\n    if [ \"$rtype\" = 'NS' ]; then\n        is_domain_format_valid \"${1::-1}\" 'ns_record'\n    fi\n    if [ \"$rtype\" = 'MX' ]; then\n        is_domain_format_valid \"${1::-1}\" 'mx_record'\n        is_int_format_valid \"$priority\" 'priority_record'\n    fi\n\n}\n\n# Email format validator\nis_email_format_valid() {\n    if [[ ! \"$1\" =~ ^[A-Za-z0-9._%+-]+@[[:alnum:].-]+\\.[A-Za-z]{2,63}$ ]] ; then\n        check_result $E_INVALID \"invalid email format :: $1\"\n    fi\n}\n\n# Firewall action validator\nis_fw_action_format_valid() {\n    if [ \"$1\" != \"ACCEPT\" ] && [ \"$1\" != 'DROP' ] ; then\n        check_result $E_INVALID \"invalid action format :: $1\"\n    fi\n}\n\n# Firewall protocol validator\nis_fw_protocol_format_valid() {\n    if [ \"$1\" != \"ICMP\" ] && [ \"$1\" != 'UDP' ] && [ \"$1\" != 'TCP' ] ; then\n        check_result $E_INVALID \"invalid protocol format :: $1\"\n    fi\n}\n\n# Firewall port validator\nis_fw_port_format_valid() {\n    if [ \"${#1}\" -eq 1 ]; then\n        if ! [[ \"$1\" =~ [0-9] ]]; then\n            check_result $E_INVALID \"invalid port format :: $1\"\n        fi\n    else\n        if ! [[ \"$1\" =~ ^[0-9][-|,|:|0-9]{0,30}[0-9]$ ]]\n        then\n            check_result $E_INVALID \"invalid port format :: $1\"\n        fi\n    fi\n}\n\n# Integer validator\nis_int_format_valid() {\n    if ! [[ \"$1\" =~ ^[0-9]+$ ]] ; then \n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Interface validator\nis_interface_format_valid() {\n    netdevices=$(cat /proc/net/dev |grep : |cut -f 1 -d : |tr -d ' ')\n    if [ -z $(echo \"$netdevices\" |grep -x $1) ]; then\n        check_result $E_INVALID \"invalid interface format :: $1\"\n    fi\n}\n\n# IP status validator\nis_ip_status_format_valid() {\n    if [ -z \"$(echo shared,dedicated | grep -w $1 )\" ]; then\n        check_result $E_INVALID \"invalid status format :: $1\"\n    fi\n}\n\n# Cron validator\nis_cron_format_valid() {\n    limit=59\n    check_format=''\n    if [ \"$2\" = 'hour' ]; then\n        limit=23\n    fi\n    \n    if [ \"$2\" = 'day' ]; then\n        limit=31\n    fi\n    if [ \"$2\" = 'month' ]; then\n        limit=12\n    fi\n    if [ \"$2\" = 'wday' ]; then\n        limit=7\n    fi\n    if [ \"$1\" = '*' ]; then\n        check_format='ok'\n    fi\n    if [[ \"$1\" =~ ^[\\*]+[/]+[0-9] ]]; then\n        if [ \"$(echo $1 |cut -f 2 -d /)\" -lt $limit ]; then\n            check_format='ok'\n        fi\n    fi\n    if [[ \"$1\" =~ ^[0-9][-|,|0-9]{0,70}[\\/][0-9]$ ]]; then\n        check_format='ok'\n        crn_values=${1//,/ }\n        crn_values=${crn_values//-/ }\n        crn_values=${crn_values//\\// }\n        for crn_vl in $crn_values; do\n            if [ \"$crn_vl\" -gt $limit ]; then\n                check_format='invalid'\n            fi\n        done\n    fi\n    crn_values=$(echo $1 |tr \",\" \" \" | tr \"-\" \" \")\n    for crn_vl in $crn_values\n        do\n            if [[ \"$crn_vl\" =~ ^[0-9]+$ ]] && [ \"$crn_vl\" -le $limit ]; then\n                 check_format='ok'\n              fi\n        done\n    if [ \"$check_format\" != 'ok' ]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Name validator\nis_name_format_valid() {\n    if ! [[ \"$1\" =~ ^[[:alnum:]][-|\\ |\\.|_[:alnum:]]{0,28}[[:alnum:]]$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Object validator\nis_object_format_valid() {\n    if ! [[ \"$1\" =~ ^[[:alnum:]][-|\\.|_[:alnum:]]{0,64}[[:alnum:]]$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Role validator \nis_role_valid (){\n    if ! [[ \"$1\" =~ ^admin|user$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\n# Password validator\nis_password_format_valid() {\n    if [ \"${#1}\" -lt '6' ]; then\n        check_result $E_INVALID \"invalid password format :: $1\"\n    fi\n}\n# Missing function - \n# Before: validate_format_shell \n# After: is_format_valid_shell\nis_format_valid_shell() {\t\n    if [ -z \"$(grep -w $1 /etc/shells)\" ]; then\t\n        echo \"Error: shell $1 is not valid\"\t\n        log_event \"$E_INVALID\" \"$EVENT\"\t\n        exit $E_INVALID\t\n    fi\t\n}\n\n# Service name validator\nis_service_format_valid() {\n    if ! [[ \"$1\" =~ ^[[:alnum:]][-|\\.|_[:alnum:]]{0,64}$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi\n}\n\nis_hash_format_valid() {\n  if ! [[ \"$1\" =~ ^[_A-Za-z0-9]{1,32}$ ]]; then\n        check_result $E_INVALID \"invalid $2 format :: $1\"\n    fi    \n}\n\n# Format validation controller\nis_format_valid() {\n    for arg_name in $*; do\n        eval arg=\\$$arg_name\n        if [ !  -z \"$arg\" ]; then\n            case $arg_name in\n                account)        is_user_format_valid \"$arg\" \"$arg_name\";;\n                action)         is_fw_action_format_valid \"$arg\";;\n                active)         is_boolean_format_valid \"$arg\" 'active' ;;\n                aliases)        is_alias_format_valid \"$arg\" ;;\n                antispam)       is_boolean_format_valid \"$arg\" 'antispam' ;;\n                antivirus)      is_boolean_format_valid \"$arg\" 'antivirus' ;;\n                autoreply)      is_autoreply_format_valid \"$arg\" ;;\n                backup)         is_object_format_valid \"$arg\" 'backup' ;;\n                charset)        is_object_format_valid \"$arg\" \"$arg_name\" ;;\n                charsets)       is_common_format_valid \"$arg\" 'charsets' ;;\n                comment)        is_object_format_valid \"$arg\" 'comment' ;;\n                database)       is_database_format_valid \"$arg\" 'database';;\n                day)            is_cron_format_valid \"$arg\" $arg_name ;;\n                dbpass)         is_password_format_valid \"$arg\" ;;\n                dbuser)         is_dbuser_format_valid \"$arg\" 'dbuser';;\n                dkim)           is_boolean_format_valid \"$arg\" 'dkim' ;;\n                dkim_size)      is_int_format_valid \"$arg\" ;;\n                domain)         is_domain_format_valid \"$arg\" ;;\n                dvalue)         is_dns_record_format_valid \"$arg\";;\n                email)          is_email_format_valid \"$arg\" ;;\n                email_forward)  is_email_format_valid \"$arg\" ;;\n                exp)            is_date_format_valid \"$arg\" ;;\n                extentions)     is_common_format_valid \"$arg\" 'extentions' ;;\n                ftp_password)   is_password_format_valid \"$arg\" ;;\n                ftp_user)       is_user_format_valid \"$arg\" \"$arg_name\" ;;\n                hash)           is_hash_format_valid \"$arg\" \"$arg_name\" ;;\n                host)           is_object_format_valid \"$arg\" \"$arg_name\" ;;\n                hour)           is_cron_format_valid \"$arg\" $arg_name ;;\n                id)             is_int_format_valid \"$arg\" 'id' ;;\n                iface)          is_interface_format_valid \"$arg\" ;;\n                ip)             is_ip_format_valid \"$arg\" ;;\n                ip_name)        is_domain_format_valid \"$arg\" 'IP name';;\n                ip_status)      is_ip_status_format_valid \"$arg\" ;;\n                job)            is_int_format_valid \"$arg\" 'job' ;;\n                key)            is_user_format_valid \"$arg\" \"$arg_name\" ;;\n                malias)         is_user_format_valid \"$arg\" \"$arg_name\" ;;\n                max_db)         is_int_format_valid \"$arg\" 'max db';;\n                min)            is_cron_format_valid \"$arg\" $arg_name ;;\n                month)          is_cron_format_valid \"$arg\" $arg_name ;;\n                name)           is_name_format_valid \"$arg\" \"name\" ;;\n                nat_ip)         is_ip_format_valid \"$arg\" ;;\n                netmask)        is_ip_format_valid \"$arg\" 'netmask' ;;\n                newid)          is_int_format_valid \"$arg\" 'id' ;;\n                ns1)            is_domain_format_valid \"$arg\" 'ns1' ;;\n                ns2)            is_domain_format_valid \"$arg\" 'ns2' ;;\n                ns3)            is_domain_format_valid \"$arg\" 'ns3' ;;\n                ns4)            is_domain_format_valid \"$arg\" 'ns4' ;;\n                ns5)            is_domain_format_valid \"$arg\" 'ns5' ;;\n                ns6)            is_domain_format_valid \"$arg\" 'ns6' ;;\n                ns7)            is_domain_format_valid \"$arg\" 'ns7' ;;\n                ns8)            is_domain_format_valid \"$arg\" 'ns8' ;;\n                object)         is_name_format_valid \"$arg\" 'object';;\n                package)        is_object_format_valid \"$arg\" \"$arg_name\" ;;\n                password)       is_password_format_valid \"$arg\" ;;\n                port)           is_int_format_valid \"$arg\" 'port' ;;\n                port_ext)       is_fw_port_format_valid \"$arg\";;\n                protocol)       is_fw_protocol_format_valid \"$arg\" ;;\n                proxy_ext)      is_extention_format_valid \"$arg\" ;;\n                quota)          is_int_format_valid \"$arg\" 'quota' ;;\n                record)         is_common_format_valid \"$arg\" 'record';;\n                restart)        is_boolean_format_valid \"$arg\" 'restart' ;;\n                role)           is_role_valid \"$arg\" 'role' ;;\n                rtype)          is_dns_type_format_valid \"$arg\" ;;\n                rule)           is_int_format_valid \"$arg\" \"rule id\" ;;\n                service)        is_service_format_valid \"$arg\" \"$arg_name\" ;;\n                soa)            is_domain_format_valid \"$arg\" 'SOA' ;;\t\n                #missing command: is_format_valid_shell\n                shell)          is_format_valid_shell \"$arg\" ;;\n                stats_pass)     is_password_format_valid \"$arg\" ;;\n                stats_user)     is_user_format_valid \"$arg\" \"$arg_name\" ;;\n                template)       is_object_format_valid \"$arg\" \"$arg_name\" ;;\n                ttl)            is_int_format_valid \"$arg\" 'ttl';;\n                user)           is_user_format_valid \"$arg\" $arg_name;;\n                wday)           is_cron_format_valid \"$arg\" $arg_name ;;\n            esac\n        fi\n    done\n}\n\n# Domain argument formatting\nformat_domain() {\n    if [[ \"$domain\" = *[![:ascii:]]* ]]; then\n        if [[ \"$domain\" =~ [[:upper:]] ]]; then\n            domain=$(echo \"$domain\" |sed 's/[[:upper:]].*/\\L&/')\n        fi\n    else\n        if [[ \"$domain\" =~ [[:upper:]] ]]; then\n            domain=$(echo \"$domain\" |tr '[:upper:]' '[:lower:]')\n        fi\n    fi\n    if [[ \"$domain\" =~ ^www\\..* ]]; then\n        domain=$(echo \"$domain\" |sed -e \"s/^www.//\")\n    fi\n    if [[ \"$domain\" =~ .*\\.$ ]]; then\n        domain=$(echo \"$domain\" |sed -e \"s/[.]*$//g\")\n    fi\n    if [[ \"$domain\" =~ ^\\. ]]; then\n        domain=$(echo \"$domain\" |sed -e \"s/^[.]*//\")\n    fi\n}\n\nformat_domain_idn() {\n    if [ -z \"$domain_idn\" ]; then\n        domain_idn=$domain\n    fi\n    if [[ \"$domain_idn\" = *[![:ascii:]]* ]]; then\n        domain_idn=$(idn -t --quiet -a $domain_idn)\n    fi\n}\n\nformat_aliases() {\n    if [ ! -z \"$aliases\" ] && [ \"$aliases\" != 'none' ]; then\n        aliases=$(echo $aliases |tr '[:upper:]' '[:lower:]' |tr ',' '\\n')\n        aliases=$(echo \"$aliases\" |sed -e \"s/\\.$//\" |sort -u)\n        aliases=$(echo \"$aliases\" |tr -s '.')\n        aliases=$(echo \"$aliases\" |sed -e \"s/[.]*$//g\")\n        aliases=$(echo \"$aliases\" |sed -e \"s/^[.]*//\")\n        aliases=$(echo \"$aliases\" |sed -e \"/^$/d\")\n        aliases=$(echo \"$aliases\" |tr '\\n' ',' |sed -e \"s/,$//\")\n    fi\n}\n\n\ncheck_backup_conditions() {\n    # Checking load average\n    la=$(cat /proc/loadavg |cut -f 1 -d ' ' |cut -f 1 -d '.')\n    # i=0\n    while [ \"$la\" -ge \"$BACKUP_LA_LIMIT\" ]; do\n        echo -e \"$(date \"+%F %T\") Load Average $la\"\n        sleep 60\n        la=$(cat /proc/loadavg |cut -f 1 -d ' ' |cut -f 1 -d '.')\n    done\n}\n\n# Define download function\ndownload_file() {\n  local url=$1\n  local destination=$2\n  local force=$3\n\n  # Default destination is the curent working directory\n  local dstopt=\"\"\n\n  if [ ! -z \"$(echo \"$url\" | grep -E \"\\.(gz|gzip|bz2|zip|xz)$\")\" ]; then\n    # When an archive file is downloaded it will be first saved localy\n    dstopt=\"--directory-prefix=$ARCHIVE_DIR\"\n    local is_archive=\"true\"\n    local filename=\"${url##*/}\"\n    if [ -z \"$filename\" ]; then\n      >&2 echo \"[!] No filename was found in url, exiting ($url)\"\n      exit 1\n    fi\n    if [ ! -z \"$force\" ] && [ -f \"$ARCHIVE_DIR/$filename\" ]; then\n      rm -f $ARCHIVE_DIR/$filename\n    fi\n  elif [ ! -z \"$destination\" ]; then\n    # Plain files will be written to specified location\n    dstopt=\"-O $destination\"\n  fi\n  # check for corrupted archive\n  if [ -f \"$ARCHIVE_DIR/$filename\" ] && [ \"$is_archive\" = \"true\" ]; then\n    tar -tzf \"$ARCHIVE_DIR/$filename\" > /dev/null 2>&1\n    if [ $? -ne 0 ]; then\n      >&2 echo \"[!] Archive $ARCHIVE_DIR/$filename is corrupted, redownloading\"\n      rm -f $ARCHIVE_DIR/$filename\n    fi\n  fi\n\n  if [ ! -f \"$ARCHIVE_DIR/$filename\" ]; then\n    wget $url -q $dstopt --show-progress --progress=bar:force --limit-rate=3m\n  fi\n\n  if [ ! -z \"$destination\" ] && [ \"$is_archive\" = \"true\" ]; then\n    if [ \"$destination\" = \"-\" ]; then\n      cat \"$ARCHIVE_DIR/$filename\"\n    elif [ -d \"$(dirname $destination)\" ]; then\n      cp \"$ARCHIVE_DIR/$filename\" \"$destination\"\n    fi\n  fi\n}\n\ncheck_hestia_demo_mode() {\n    demo_mode=$(grep DEMO_MODE /usr/local/hestia/conf/hestia.conf | cut -d '=' -f2 | sed \"s|'||g\")\n    if [ ! -z \"$demo_mode\" ] && [ \"$demo_mode\" = \"yes\" ]; then\n        echo \"ERROR: Unable to perform operation due to security restrictions that are in place.\"\n        exit 1\n    fi\n}\n\nmultiphp_count() {\n    echo $(ls -d /etc/php/*/fpm/pool.d 2>/dev/null |wc -l)\n}\n\nmultiphp_versions() {\n    local -a php_versions_list;\n    local php_ver;\n    if [ \"$(multiphp_count)\" -gt 0 ] ; then\n        for php_ver in $(ls -v /etc/php/); do\n            [ ! -d \"/etc/php/$php_ver/fpm/pool.d/\" ] && continue\n            php_versions_list+=($php_ver)\n        done\n        echo \"${php_versions_list[@]}\"\n    fi\n}\n\nmultiphp_default_version() {\n    # Get system wide default php version (set by update-alternatives)\n    local sys_phpversion=$(php -r \"echo (float)phpversion();\")\n\n    # Check if the system php also has php-fpm enabled, otherwise return\n    # the most recent php version which does have it installed.\n    if [ ! -d \"/etc/php/$sys_phpversion/fpm/pool.d/\" ]; then\n        local all_versions=\"$(multiphp_versions)\"\n        if [ ! -z \"$all_versions\" ]; then\n            sys_phpversion=\"${all_versions##*\\ }\";\n        fi\n    fi\n\n    echo \"$sys_phpversion\"\n}\n\nis_hestia_package(){\n    if [ -z \"$(echo $1 | grep -w $2)\" ]; then\n        check_result $E_INVALID \"$2 package is not controlled by hestiacp\"\n    fi\n}\n\n# Run arbitrary cli commands with dropped privileges\n# Note: setpriv --init-groups is not available on debian9 (util-linux 2.29.2)\n# Input:\n#     - $user : Vaild hestia user\nuser_exec() {\n    is_object_valid 'user' 'USER' \"$user\"\n\n    local user_groups=$(id -G \"$user\")\n    user_groups=${user_groups//\\ /,}\n\n    setpriv --groups \"$user_groups\" --reuid \"$user\" --regid \"$user\" -- $@\n}\n\n# Simple chmod wrapper that skips symlink files after glob expand\nno_symlink_chmod() {\n    local filemode=$1; shift;\n\n    for i in \"$@\"; do\n        [[ -L ${i} ]] && continue\n\n        chmod \"${filemode}\" \"${i}\"\n    done\n}"], "filenames": ["bin/v-update-sys-hestia", "func/main.sh"], "buggy_code_start_loc": [34, 1156], "buggy_code_end_loc": [34, 1156], "fixing_code_start_loc": [35, 1157], "fixing_code_end_loc": [36, 1163], "type": "NVD-CWE-noinfo", "message": "An issue was discovered in HestiaCP before v1.3.5. Attackers are able to arbitrarily install packages due to values taken from the pgk [] parameter in the update request being transmitted to the operating system's package manager.", "other": {"cve": {"id": "CVE-2021-30070", "sourceIdentifier": "cve@mitre.org", "published": "2022-08-18T05:15:07.167", "lastModified": "2022-08-19T16:41:09.317", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "An issue was discovered in HestiaCP before v1.3.5. Attackers are able to arbitrarily install packages due to values taken from the pgk [] parameter in the update request being transmitted to the operating system's package manager."}, {"lang": "es", "value": "Se ha detectado un problema en HestiaCP versiones anteriores a 1.3.5. Los atacantes pueden instalar paquetes arbitrariamente debido a valores tomados del par\u00e1metro pgk [] en la petici\u00f3n de actualizaci\u00f3n que es transmitida al administrador de paquetes del sistema operativo."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:H/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "HIGH", "availabilityImpact": "NONE", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "NVD-CWE-noinfo"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:hestiacp:hestiacp:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.3.5", "matchCriteriaId": "9A449B28-F8D6-4B06-BA44-307C2C9E7FC5"}]}]}], "references": [{"url": "https://github.com/hestiacp/hestiacp/commit/27556a9a43aeaf308b33be224c2e70f2011574e6", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/hestiacp/hestiacp/commit/9a1fccd37f2842fdf96ffb48895c4bfa9788c469", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/hestiacp/hestiacp/commit/27556a9a43aeaf308b33be224c2e70f2011574e6"}}