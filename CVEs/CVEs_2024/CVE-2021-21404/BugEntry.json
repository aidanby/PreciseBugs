{"buggy_code": ["// Copyright (C) 2015 Audrius Butkevicius and Contributors (see the CONTRIBUTORS file).\n\npackage protocol\n\nimport (\n\t\"errors\"\n\t\"io\"\n)\n\nconst (\n\tmagic        = 0x9E79BC40\n\tProtocolName = \"bep-relay\"\n)\n\nvar (\n\tResponseSuccess           = Response{0, \"success\"}\n\tResponseNotFound          = Response{1, \"not found\"}\n\tResponseAlreadyConnected  = Response{2, \"already connected\"}\n\tResponseUnexpectedMessage = Response{100, \"unexpected message\"}\n)\n\nfunc WriteMessage(w io.Writer, message interface{}) error {\n\theader := header{\n\t\tmagic: magic,\n\t}\n\n\tvar payload []byte\n\tvar err error\n\n\tswitch msg := message.(type) {\n\tcase Ping:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypePing\n\tcase Pong:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypePong\n\tcase JoinRelayRequest:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeJoinRelayRequest\n\tcase JoinSessionRequest:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeJoinSessionRequest\n\tcase Response:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeResponse\n\tcase ConnectRequest:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeConnectRequest\n\tcase SessionInvitation:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeSessionInvitation\n\tcase RelayFull:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeRelayFull\n\tdefault:\n\t\terr = errors.New(\"unknown message type\")\n\t}\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\theader.messageLength = int32(len(payload))\n\n\theaderpayload, err := header.MarshalXDR()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t_, err = w.Write(append(headerpayload, payload...))\n\treturn err\n}\n\nfunc ReadMessage(r io.Reader) (interface{}, error) {\n\tvar header header\n\n\tbuf := make([]byte, header.XDRSize())\n\tif _, err := io.ReadFull(r, buf); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := header.UnmarshalXDR(buf); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif header.magic != magic {\n\t\treturn nil, errors.New(\"magic mismatch\")\n\t}\n\n\tbuf = make([]byte, int(header.messageLength))\n\tif _, err := io.ReadFull(r, buf); err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch header.messageType {\n\tcase messageTypePing:\n\t\tvar msg Ping\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypePong:\n\t\tvar msg Pong\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeJoinRelayRequest:\n\t\tvar msg JoinRelayRequest\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeJoinSessionRequest:\n\t\tvar msg JoinSessionRequest\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeResponse:\n\t\tvar msg Response\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeConnectRequest:\n\t\tvar msg ConnectRequest\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeSessionInvitation:\n\t\tvar msg SessionInvitation\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeRelayFull:\n\t\tvar msg RelayFull\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\t}\n\n\treturn nil, errors.New(\"unknown message type\")\n}\n"], "fixing_code": ["// Copyright (C) 2015 Audrius Butkevicius and Contributors (see the CONTRIBUTORS file).\n\npackage protocol\n\nimport (\n\t\"errors\"\n\t\"fmt\"\n\t\"io\"\n)\n\nconst (\n\tmagic        = 0x9E79BC40\n\tProtocolName = \"bep-relay\"\n)\n\nvar (\n\tResponseSuccess           = Response{0, \"success\"}\n\tResponseNotFound          = Response{1, \"not found\"}\n\tResponseAlreadyConnected  = Response{2, \"already connected\"}\n\tResponseUnexpectedMessage = Response{100, \"unexpected message\"}\n)\n\nfunc WriteMessage(w io.Writer, message interface{}) error {\n\theader := header{\n\t\tmagic: magic,\n\t}\n\n\tvar payload []byte\n\tvar err error\n\n\tswitch msg := message.(type) {\n\tcase Ping:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypePing\n\tcase Pong:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypePong\n\tcase JoinRelayRequest:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeJoinRelayRequest\n\tcase JoinSessionRequest:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeJoinSessionRequest\n\tcase Response:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeResponse\n\tcase ConnectRequest:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeConnectRequest\n\tcase SessionInvitation:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeSessionInvitation\n\tcase RelayFull:\n\t\tpayload, err = msg.MarshalXDR()\n\t\theader.messageType = messageTypeRelayFull\n\tdefault:\n\t\terr = errors.New(\"unknown message type\")\n\t}\n\n\tif err != nil {\n\t\treturn err\n\t}\n\n\theader.messageLength = int32(len(payload))\n\n\theaderpayload, err := header.MarshalXDR()\n\tif err != nil {\n\t\treturn err\n\t}\n\n\t_, err = w.Write(append(headerpayload, payload...))\n\treturn err\n}\n\nfunc ReadMessage(r io.Reader) (interface{}, error) {\n\tvar header header\n\n\tbuf := make([]byte, header.XDRSize())\n\tif _, err := io.ReadFull(r, buf); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif err := header.UnmarshalXDR(buf); err != nil {\n\t\treturn nil, err\n\t}\n\n\tif header.magic != magic {\n\t\treturn nil, errors.New(\"magic mismatch\")\n\t}\n\tif header.messageLength < 0 || header.messageLength > 1024 {\n\t\treturn nil, fmt.Errorf(\"bad length (%d)\", header.messageLength)\n\t}\n\n\tbuf = make([]byte, int(header.messageLength))\n\tif _, err := io.ReadFull(r, buf); err != nil {\n\t\treturn nil, err\n\t}\n\n\tswitch header.messageType {\n\tcase messageTypePing:\n\t\tvar msg Ping\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypePong:\n\t\tvar msg Pong\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeJoinRelayRequest:\n\t\tvar msg JoinRelayRequest\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeJoinSessionRequest:\n\t\tvar msg JoinSessionRequest\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeResponse:\n\t\tvar msg Response\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeConnectRequest:\n\t\tvar msg ConnectRequest\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeSessionInvitation:\n\t\tvar msg SessionInvitation\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\tcase messageTypeRelayFull:\n\t\tvar msg RelayFull\n\t\terr := msg.UnmarshalXDR(buf)\n\t\treturn msg, err\n\t}\n\n\treturn nil, errors.New(\"unknown message type\")\n}\n"], "filenames": ["lib/relay/protocol/protocol.go"], "buggy_code_start_loc": [6], "buggy_code_end_loc": [88], "fixing_code_start_loc": [7], "fixing_code_end_loc": [93], "type": "CWE-20", "message": "Syncthing is a continuous file synchronization program. In Syncthing before version 1.15.0, the relay server `strelaysrv` can be caused to crash and exit by sending a relay message with a negative length field. Similarly, Syncthing itself can crash for the same reason if given a malformed message from a malicious relay server when attempting to join the relay. Relay joins are essentially random (from a subset of low latency relays) and Syncthing will by default restart when crashing, at which point it's likely to pick another non-malicious relay. This flaw is fixed in version 1.15.0.", "other": {"cve": {"id": "CVE-2021-21404", "sourceIdentifier": "security-advisories@github.com", "published": "2021-04-06T20:15:13.490", "lastModified": "2021-04-14T18:00:32.527", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "Syncthing is a continuous file synchronization program. In Syncthing before version 1.15.0, the relay server `strelaysrv` can be caused to crash and exit by sending a relay message with a negative length field. Similarly, Syncthing itself can crash for the same reason if given a malformed message from a malicious relay server when attempting to join the relay. Relay joins are essentially random (from a subset of low latency relays) and Syncthing will by default restart when crashing, at which point it's likely to pick another non-malicious relay. This flaw is fixed in version 1.15.0."}, {"lang": "es", "value": "Syncthing es un programa de sincronizaci\u00f3n de archivos continua.&#xa0;En Syncthing versiones anteriores a 1.15.0, el servidor de retransmisi\u00f3n \"strelaysrv\" puede causar un bloqueo y salida mediante el env\u00edo de un mensaje de retransmisi\u00f3n con un campo de longitud negativa.&#xa0;De manera similar, Syncthing en s\u00ed puede presentar un fallo por la misma raz\u00f3n si recibe un mensaje malformado de un servidor de retransmisi\u00f3n malicioso al intentar unirse a la retransmisi\u00f3n.&#xa0;Las uniones de retransmisiones son esencialmente aleatorias (de un subconjunto de retransmisiones de baja latencia) y Syncthing se reiniciar\u00e1 por defecto cuando se bloquee, momento en el que es probable que elija otra retransmisi\u00f3n no maliciosa.&#xa0;Este fallo es corregido en la versi\u00f3n 1.15.0"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "HIGH", "baseScore": 7.5, "baseSeverity": "HIGH"}, "exploitabilityScore": 3.9, "impactScore": 3.6}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:N/C:N/I:N/A:P", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "NONE", "availabilityImpact": "PARTIAL", "baseScore": 5.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 10.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-20"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:syncthing:syncthing:*:*:*:*:*:*:*:*", "versionEndExcluding": "1.15.0", "matchCriteriaId": "13E0DFD1-14D6-4A2D-B98C-1C581D11E2F0"}]}]}], "references": [{"url": "https://github.com/syncthing/syncthing/commit/fb4fdaf4c0a79c22cad000c42ac1394e3ccb6a97", "source": "security-advisories@github.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/syncthing/syncthing/releases/tag/v1.15.0", "source": "security-advisories@github.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/syncthing/syncthing/security/advisories/GHSA-x462-89pf-6r5h", "source": "security-advisories@github.com", "tags": ["Third Party Advisory"]}, {"url": "https://pkg.go.dev/github.com/syncthing/syncthing", "source": "security-advisories@github.com", "tags": ["Product", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/syncthing/syncthing/commit/fb4fdaf4c0a79c22cad000c42ac1394e3ccb6a97"}}