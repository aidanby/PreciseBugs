{"buggy_code": ["# encoding: UTF-8\n\nmodule Keynote\n  # HTML markup in Ruby.\n  #\n  # To invoke Rumble, call the `build_html` method in a presenter.\n  #\n  # ## 1. Syntax\n  #\n  # There are four basic forms:\n  #\n  # ```ruby\n  # tagname(content)\n  #\n  # tagname(content, attributes)\n  #\n  # tagname do\n  #   content\n  # end\n  #\n  # tagname(attributes) do\n  #   content\n  # end\n  # ```\n  #\n  # Example:\n  #\n  # ``` ruby\n  # build_html do\n  #   div :id => :content do\n  #     h1 'Hello World', :class => :main\n  #   end\n  # end\n  # ```\n  #\n  # ``` html\n  # <div id=\"content\">\n  #   <h1 class=\"main\">Hello World</h1>\n  # </div>\n  # ```\n  #\n  # ## 2. Element classes and IDs\n  #\n  # You can easily add classes and IDs by hooking methods onto the container:\n  #\n  # ``` ruby\n  # div.content! do\n  #   h1.main 'Hello World'\n  # end\n  # ```\n  #\n  # You can mix and match as you'd like (`div.klass.klass1.id!`), but you can\n  # only provide content and attributes on the *last* call:\n  #\n  # ``` ruby\n  # # This is not valid:\n  # form(:action => :post).world do\n  #   input\n  # end\n  #\n  # # But this is:\n  # form.world(:action => :post) do\n  #   input\n  # end\n  # ```\n  #\n  # ## 3. Text\n  #\n  # Sometimes you need to insert plain text:\n  #\n  # ```ruby\n  # p.author do\n  #   text 'Written by '\n  #   a 'Bluebie', :href => 'http://creativepony.com/'\n  #   br\n  #   text link_to 'Home', '/'\n  # end\n  # ```\n  #\n  # ``` html\n  # <p class=\"author\">\n  #   Written by\n  #   <a href=\"http://creativepony.com/\">Bluebie</a>\n  #   <br>\n  #   <a href=\"/\">Home</a>\n  # </p>\n  # ```\n  #\n  # You can also insert literal text by returning it from a block (or passing\n  # it as a parameter to the non-block form of a tag method):\n  #\n  # ``` ruby\n  # p.author do\n  #   link_to 'Home', '/'\n  # end\n  # ```\n  #\n  # ``` html\n  # <p class=\"author\">\n  #   <a href=\"/\">Home</a>\n  # </p>\n  # ```\n  #\n  # Be aware that Rumble ignores the string in a block if there's other tags\n  # there:\n  #\n  # ``` ruby\n  # div.comment do\n  #   div.author \"BitPuffin\"\n  #   \"<p>Silence!</p>\"\n  # end\n  # ```\n  #\n  # ``` html\n  # <div class=\"comment\">\n  #   <div class=\"author\">BitPuffin</div>\n  # </div>\n  # ```\n  #\n  # ## 4. Escaping\n  #\n  # The version of Rumble that's embedded in Keynote follows normal Rails\n  # escaping rules. When text enters Rumble (by returning it from a block,\n  # passing it as a parameter to a tag method, or using the `text` method),\n  # it's escaped if and only if `html_safe?` returns false. That means that\n  # Rails helpers generally don't need special treatment, but strings need to\n  # have `html_safe` called on them to avoid escaping.\n  #\n  # ## 5. In practice\n  #\n  # ``` ruby\n  # class ArticlePresenter < Keynote::Presenter\n  #   presents :article\n  #\n  #   def published_at\n  #     build_html do\n  #       div.published_at do\n  #         span.date publication_date\n  #         span.time publication_time\n  #       end\n  #     end\n  #   end\n  #\n  #   def publication_date\n  #     article.published_at.strftime(\"%A, %B %e\").squeeze(\" \")\n  #   end\n  #\n  #   def publication_time\n  #     article.published_at.strftime(\"%l:%M%p\").delete(\" \")\n  #   end\n  # end\n  # ```\n  #\n  # @author Rumble is (c) 2011 Magnus Holm (https://github.com/judofyr).\n  # @author Documentation mostly borrowed from Mab, (c) 2012 Magnus Holm.\n  # @see https://github.com/judofyr/rumble\n  # @see https://github.com/camping/mab\n  module Rumble\n    # A class for exceptions raised by Rumble.\n    class Error < StandardError\n    end\n\n    # A basic set of commonly-used HTML tags. These are included as methods\n    # on all presenters by default.\n    BASIC = %w[a b br button del div em form h1 h2 h3 h4 h5 h6 hr i img input\n      label li link ol optgroup option p pre script select span strong sub sup\n      table tbody td textarea tfoot th thead time tr ul]\n\n    # A more complete set of HTML5 tags. You can use these by calling\n    # `use_html_5_tags` in a presenter's class body.\n    COMPLETE = %w[abbr acronym address applet area article aside audio base\n      basefont bdo big blockquote body canvas caption center cite code col\n      colgroup command datalist dd details dfn dir dl dt embed fieldset\n      figcaption figure font footer frame frameset head header hgroup iframe\n      ins keygen kbd legend map mark menu meta meter nav noframes noscript\n      object output param progress q rp rt ruby s samp section small source\n      strike style summary title tt u var video wbr xmp]\n\n    # @private\n    SELFCLOSING = %w[base meta link hr br param img area input col frame]\n\n    # @private\n    def self.included(base)\n      define_tags(base, BASIC)\n    end\n\n    # @private\n    def self.define_tags(base, tags)\n      tags.each do |tag|\n        sc = SELFCLOSING.include?(tag).inspect\n\n        base.class_eval <<-RUBY\n          def #{tag}(*args, &blk)                   # def a(*args, &blk)\n            rumble_tag :#{tag}, #{sc}, *args, &blk  #   rumble_tag :a, false, *args, &blk\n          end                                       # end\n        RUBY\n      end\n    end\n\n    # @private\n    def self.use_html_5_tags(base)\n      define_tags(base, COMPLETE)\n    end\n\n    # We need our own copy of this, the normal Rails html_escape helper, so\n    # that we can access it from inside Tag objects.\n    # @private\n    def self.html_escape(s)\n      s = s.to_s\n      if s.html_safe?\n        s\n      else\n        s.gsub(/[&\"'><]/, ERB::Util::HTML_ESCAPE).html_safe\n      end\n    end\n\n    # @private\n    class Context < Array\n      def to_s\n        join.html_safe\n      end\n    end\n\n    # @private\n    class Tag\n      def initialize(context, instance, name, sc)\n        @context = context\n        @instance = instance\n        @name = name\n        @sc = sc\n        @done, @content = nil\n      end\n\n      def attributes\n        @attributes ||= {}\n      end\n\n      def merge_attributes(attrs)\n        if defined?(@attributes)\n          @attributes.merge!(attrs)\n        else\n          @attributes = attrs\n        end\n      end\n\n      def method_missing(name, content = nil, attrs = nil, &blk)\n        name = name.to_s\n\n        if name[-1] == ?!\n          attributes[:id] = name[0..-2]\n        else\n          if attributes.has_key?(:class)\n            attributes[:class] += \" #{name}\"\n          else\n            attributes[:class] = name\n          end\n        end\n\n        insert(content, attrs, &blk)\n      end\n\n      def insert(content = nil, attrs = nil, &blk)\n        raise Error, \"This tag is already closed\" if @done\n\n        if content.is_a?(Hash)\n          attrs = content\n          content = nil\n        end\n\n        # Flatten `data` hash into individual attributes if necessary\n        if attrs && attrs[:data].is_a?(Hash)\n          attrs = attrs.dup\n          attrs.delete(:data).each do |key, value|\n            attrs[:\"data-#{key}\"] = value.to_s\n          end\n        end\n\n        merge_attributes(attrs) if attrs\n\n        if block_given?\n          raise Error, \"`#{@name}` is not allowed to have content\" if @sc\n          @done = :block\n          before = @context.size\n          res = yield\n          @content = Rumble.html_escape(res) if @context.size == before\n          @context << \"</#{@name}>\"\n        elsif content\n          raise Error, \"`#{@name}` is not allowed to have content\" if @sc\n          @done = true\n          @content = Rumble.html_escape(content)\n        elsif attrs\n          @done = true\n        end\n\n        self\n      rescue\n        @instance.rumble_cleanup\n        raise $!\n      end\n\n      def to_ary; nil end\n      def to_str; to_s end\n\n      def html_safe?\n        true\n      end\n\n      def to_s\n        if @instance.rumble_context.eql?(@context)\n          @instance.rumble_cleanup\n          @context.to_s\n        else\n          @result ||= begin\n            res = \"<#{@name}#{attrs_to_s}>\"\n            res << @content if @content\n            res << \"</#{@name}>\" if !@sc && @done != :block\n            res.html_safe\n          end\n        end\n      end\n\n      def inspect; to_s.inspect end\n\n      def attrs_to_s\n        attributes.inject(\"\") do |res, (name, value)|\n          if value\n            value = (value == true) ? name : Rumble.html_escape(value)\n            res << \" #{name}=\\\"#{value}\\\"\"\n          end\n          res\n        end\n      end\n    end\n\n    # Generate HTML using Rumble tag methods. If tag methods are called\n    # outside a `build_html` block, they'll raise an exception.\n    def build_html\n      if defined?(@rumble_context)\n        ctx = @rumble_context\n      end\n      @rumble_context = Context.new\n      yield\n      rumble_cleanup(ctx).to_s\n    end\n\n    # Generate a text node. This is helpful in situations where an element\n    # contains both text and markup.\n    def text(str = nil, &blk)\n      str = Rumble.html_escape(str || blk.call)\n\n      if defined?(@rumble_context) && @rumble_context\n        @rumble_context << str\n      else\n        str\n      end\n    end\n\n    # @private\n    def rumble_context\n      defined?(@rumble_context) ? @rumble_context : nil\n    end\n\n    # @private\n    def rumble_cleanup(value = nil)\n      defined?(@rumble_context) ? @rumble_context : nil\n    ensure\n      @rumble_context = value\n    end\n\n    private\n\n    def rumble_tag(name, sc, content = nil, attrs = nil, &blk)\n      if !defined?(@rumble_context) || !@rumble_context\n        raise Rumble::Error, \"Must enclose tags in `rumble { ... }` block\"\n      end\n\n      context = @rumble_context\n      tag = Tag.new(context, self, name, sc)\n      context << tag\n      tag.insert(content, attrs, &blk)\n    end\n  end\nend\n", "# encoding: UTF-8\n\n# Original Rumble tests (c) 2011 Magnus Holm (https://github.com/judofyr).\n\nrequire 'helper'\n\nif defined?(Minitest::Test)\n  klass = Minitest::Test\nelse\n  klass = MiniTest::Unit::TestCase\nend\n\nclass TestRumble < klass\n  include Keynote::Rumble\n\n  def assert_rumble(str, &blk)\n    exp = str.gsub(/(\\s+(<)|>\\s+)/) { $2 || '>' }\n    res = nil\n    build_html {\n      res = yield.to_s\n    }\n    assert_equal exp, res\n    assert_instance_of ActiveSupport::SafeBuffer, res\n  end\n\n  def setup\n    @rumble_context = nil\n    super\n    assert_nil @rumble_context\n  end\n\n  def teardown\n    super\n    assert_nil @rumble_context\n  end\n\n  def test_simple\n    str = <<-HTML\n      <form>\n        <div id=\"wrapper\">\n          <h1>My Site</h1>\n        </div>\n        <div class=\"input\">\n          <input type=\"text\" name=\"value\">\n        </div>\n      </form>\n    HTML\n\n    assert_rumble str do\n      form do\n        div.wrapper! do\n          h1 \"My Site\"\n        end\n\n        div.input do\n          input type: 'text', name: 'value'\n        end\n      end\n    end\n  end\n\n  def test_string_data\n    assert_rumble '<div data=\"whatever\"></div>' do\n      div data: \"whatever\"\n    end\n  end\n\n  def test_hash_data\n    str = <<-HTML\n      <div data-modal=\"true\" data-test=\"&quot;test&quot;\"></div>\n    HTML\n\n    assert_rumble str do\n      div data: { modal: true, test: '\"test\"' }\n    end\n  end\n\n  def test_several\n    str = <<-HTML\n      <p>Hello</p>\n      <p>World</p>\n    HTML\n\n    assert_rumble str do\n      p \"Hello\"\n      p \"World\"\n    end\n  end\n\n  def test_several_capture\n    str = <<-HTML\n      <div>\n        <p>Hello</p>\n        <p>Hello</p>\n        |\n        <p>World</p>\n        <p>World</p>\n      </div>\n    HTML\n\n    assert_rumble str do\n      div do\n        (%w[Hello World].map { |x| build_html { p x; p x } } * '|').html_safe\n      end\n    end\n  end\n\n  def test_capture_raise\n    assert_raises RuntimeError do\n      build_html {\n        div do\n          build_html { raise }\n        end\n      }\n    end\n  end\n\n  def test_escape\n    str = <<-HTML\n      <p class=\"&quot;test&quot;\">Hello &amp; World</p>\n    HTML\n\n    assert_rumble str do\n      p \"Hello & World\", :class => '\"test\"'\n    end\n  end\n\n  def test_multiple_css_classes\n    str = <<-HTML\n      <p class=\"one two three\"></p>\n    HTML\n\n    assert_rumble str do\n      p.one.two.three\n    end\n  end\n\n  def test_selfclosing\n    assert_rumble \"<br>\" do\n      br\n    end\n  end\n\n  def test_text\n    assert_rumble \"hello\" do\n      text \"hello\"\n    end\n  end\n\n  def test_escaping_unsafe_input\n    str = \"<br>\"\n\n    assert_rumble \"<div>&lt;br&gt;</div>\" do\n      div { str }\n    end\n\n    assert_rumble \"<div>&lt;br&gt;</div>\" do\n      div str\n    end\n\n    assert_rumble \"<div>&lt;br&gt;</div>\" do\n      div { text { str } }\n    end\n\n    assert_rumble \"<div>&lt;br&gt;</div>\" do\n      div { text str }\n    end\n  end\n\n  def test_not_escaping_safe_input\n    str = \"<br>\".html_safe\n\n    assert_rumble \"<div><br></div>\" do\n      div { str }\n    end\n\n    assert_rumble \"<div><br></div>\" do\n      div str\n    end\n\n    assert_rumble \"<div><br></div>\" do\n      div { text { str } }\n    end\n\n    assert_rumble \"<div><br></div>\" do\n      div { text str }\n    end\n  end\n\n  def test_error_tags_outside_rumble_context\n    assert_raises Keynote::Rumble::Error do\n      div \"content\"\n    end\n  end\n\n  def test_error_selfclosing_content\n    assert_raises Keynote::Rumble::Error do\n      build_html {\n        br \"content\"\n      }\n    end\n  end\n\n  def test_error_css_proxy_continue\n    assert_raises Keynote::Rumble::Error do\n      build_html {\n        p.one(\"test\").two\n      }\n    end\n  end\n\n  # The real test here is if @rumble_context is nil in the teardown.\n  def test_error_general\n    assert_raises RuntimeError do\n      build_html {\n        div do\n          raise\n        end\n      }\n    end\n  end\nend\n"], "fixing_code": ["# encoding: UTF-8\n\nmodule Keynote\n  # HTML markup in Ruby.\n  #\n  # To invoke Rumble, call the `build_html` method in a presenter.\n  #\n  # ## 1. Syntax\n  #\n  # There are four basic forms:\n  #\n  # ```ruby\n  # tagname(content)\n  #\n  # tagname(content, attributes)\n  #\n  # tagname do\n  #   content\n  # end\n  #\n  # tagname(attributes) do\n  #   content\n  # end\n  # ```\n  #\n  # Example:\n  #\n  # ``` ruby\n  # build_html do\n  #   div :id => :content do\n  #     h1 'Hello World', :class => :main\n  #   end\n  # end\n  # ```\n  #\n  # ``` html\n  # <div id=\"content\">\n  #   <h1 class=\"main\">Hello World</h1>\n  # </div>\n  # ```\n  #\n  # ## 2. Element classes and IDs\n  #\n  # You can easily add classes and IDs by hooking methods onto the container:\n  #\n  # ``` ruby\n  # div.content! do\n  #   h1.main 'Hello World'\n  # end\n  # ```\n  #\n  # You can mix and match as you'd like (`div.klass.klass1.id!`), but you can\n  # only provide content and attributes on the *last* call:\n  #\n  # ``` ruby\n  # # This is not valid:\n  # form(:action => :post).world do\n  #   input\n  # end\n  #\n  # # But this is:\n  # form.world(:action => :post) do\n  #   input\n  # end\n  # ```\n  #\n  # ## 3. Text\n  #\n  # Sometimes you need to insert plain text:\n  #\n  # ```ruby\n  # p.author do\n  #   text 'Written by '\n  #   a 'Bluebie', :href => 'http://creativepony.com/'\n  #   br\n  #   text link_to 'Home', '/'\n  # end\n  # ```\n  #\n  # ``` html\n  # <p class=\"author\">\n  #   Written by\n  #   <a href=\"http://creativepony.com/\">Bluebie</a>\n  #   <br>\n  #   <a href=\"/\">Home</a>\n  # </p>\n  # ```\n  #\n  # You can also insert literal text by returning it from a block (or passing\n  # it as a parameter to the non-block form of a tag method):\n  #\n  # ``` ruby\n  # p.author do\n  #   link_to 'Home', '/'\n  # end\n  # ```\n  #\n  # ``` html\n  # <p class=\"author\">\n  #   <a href=\"/\">Home</a>\n  # </p>\n  # ```\n  #\n  # Be aware that Rumble ignores the string in a block if there's other tags\n  # there:\n  #\n  # ``` ruby\n  # div.comment do\n  #   div.author \"BitPuffin\"\n  #   \"<p>Silence!</p>\"\n  # end\n  # ```\n  #\n  # ``` html\n  # <div class=\"comment\">\n  #   <div class=\"author\">BitPuffin</div>\n  # </div>\n  # ```\n  #\n  # ## 4. Escaping\n  #\n  # The version of Rumble that's embedded in Keynote follows normal Rails\n  # escaping rules. When text enters Rumble (by returning it from a block,\n  # passing it as a parameter to a tag method, or using the `text` method),\n  # it's escaped if and only if `html_safe?` returns false. That means that\n  # Rails helpers generally don't need special treatment, but strings need to\n  # have `html_safe` called on them to avoid escaping.\n  #\n  # ## 5. In practice\n  #\n  # ``` ruby\n  # class ArticlePresenter < Keynote::Presenter\n  #   presents :article\n  #\n  #   def published_at\n  #     build_html do\n  #       div.published_at do\n  #         span.date publication_date\n  #         span.time publication_time\n  #       end\n  #     end\n  #   end\n  #\n  #   def publication_date\n  #     article.published_at.strftime(\"%A, %B %e\").squeeze(\" \")\n  #   end\n  #\n  #   def publication_time\n  #     article.published_at.strftime(\"%l:%M%p\").delete(\" \")\n  #   end\n  # end\n  # ```\n  #\n  # @author Rumble is (c) 2011 Magnus Holm (https://github.com/judofyr).\n  # @author Documentation mostly borrowed from Mab, (c) 2012 Magnus Holm.\n  # @see https://github.com/judofyr/rumble\n  # @see https://github.com/camping/mab\n  module Rumble\n    # A class for exceptions raised by Rumble.\n    class Error < StandardError\n    end\n\n    # A basic set of commonly-used HTML tags. These are included as methods\n    # on all presenters by default.\n    BASIC = %w[a b br button del div em form h1 h2 h3 h4 h5 h6 hr i img input\n      label li link ol optgroup option p pre script select span strong sub sup\n      table tbody td textarea tfoot th thead time tr ul]\n\n    # A more complete set of HTML5 tags. You can use these by calling\n    # `use_html_5_tags` in a presenter's class body.\n    COMPLETE = %w[abbr acronym address applet area article aside audio base\n      basefont bdo big blockquote body canvas caption center cite code col\n      colgroup command datalist dd details dfn dir dl dt embed fieldset\n      figcaption figure font footer frame frameset head header hgroup iframe\n      ins keygen kbd legend map mark menu meta meter nav noframes noscript\n      object output param progress q rp rt ruby s samp section small source\n      strike style summary title tt u var video wbr xmp]\n\n    # @private\n    SELFCLOSING = %w[base meta link hr br param img area input col frame]\n\n    # @private\n    def self.included(base)\n      define_tags(base, BASIC)\n    end\n\n    # @private\n    def self.define_tags(base, tags)\n      tags.each do |tag|\n        sc = SELFCLOSING.include?(tag).inspect\n\n        base.class_eval <<-RUBY\n          def #{tag}(*args, &blk)                   # def a(*args, &blk)\n            rumble_tag :#{tag}, #{sc}, *args, &blk  #   rumble_tag :a, false, *args, &blk\n          end                                       # end\n        RUBY\n      end\n    end\n\n    # @private\n    def self.use_html_5_tags(base)\n      define_tags(base, COMPLETE)\n    end\n\n    # We need our own copy of this, the normal Rails html_escape helper, so\n    # that we can access it from inside Tag objects.\n    # @private\n    def self.html_escape(s)\n      s = s.to_s\n      if s.html_safe?\n        s\n      else\n        s.gsub(/[&\"'><]/, ERB::Util::HTML_ESCAPE).html_safe\n      end\n    end\n\n    # @private\n    class Context < Array\n      def to_s\n        join.html_safe\n      end\n    end\n\n    # @private\n    class Tag\n      def initialize(context, instance, name, sc)\n        @context = context\n        @instance = instance\n        @name = name\n        @sc = sc\n        @done, @content = nil\n      end\n\n      def attributes\n        @attributes ||= {}\n      end\n\n      def merge_attributes(attrs)\n        if defined?(@attributes)\n          @attributes.merge!(attrs)\n        else\n          @attributes = attrs\n        end\n      end\n\n      def method_missing(name, content = nil, attrs = nil, &blk)\n        name = name.to_s\n\n        if name[-1] == ?!\n          attributes[:id] = name[0..-2]\n        else\n          if attributes.has_key?(:class)\n            attributes[:class] += \" #{name}\"\n          else\n            attributes[:class] = name\n          end\n        end\n\n        insert(content, attrs, &blk)\n      end\n\n      def insert(content = nil, attrs = nil, &blk)\n        raise Error, \"This tag is already closed\" if @done\n\n        if content.is_a?(Hash)\n          attrs = content\n          content = nil\n        end\n\n        # Flatten `data` hash into individual attributes if necessary\n        if attrs && attrs[:data].is_a?(Hash)\n          attrs = attrs.dup\n          attrs.delete(:data).each do |key, value|\n            attrs[:\"data-#{key}\"] = value.to_s\n          end\n        end\n\n        merge_attributes(attrs) if attrs\n\n        if block_given?\n          raise Error, \"`#{@name}` is not allowed to have content\" if @sc\n          @done = :block\n          before = @context.size\n          res = yield\n          @content = Rumble.html_escape(res) if @context.size == before\n          @context << \"</#{@name}>\"\n        elsif content\n          raise Error, \"`#{@name}` is not allowed to have content\" if @sc\n          @done = true\n          @content = Rumble.html_escape(content)\n        elsif attrs\n          @done = true\n        end\n\n        self\n      rescue\n        @instance.rumble_cleanup\n        raise $!\n      end\n\n      def to_ary; nil end\n      def to_str; to_s end\n\n      def html_safe?\n        true\n      end\n\n      def to_s\n        if @instance.rumble_context.eql?(@context)\n          @instance.rumble_cleanup\n          @context.to_s\n        else\n          @result ||= begin\n            res = \"<#{@name}#{attrs_to_s}>\"\n            res << @content if @content\n            res << \"</#{@name}>\" if !@sc && @done != :block\n            res.html_safe\n          end\n        end\n      end\n\n      def inspect; to_s.inspect end\n\n      def attrs_to_s\n        attributes.inject(\"\") do |res, (name, value)|\n          next unless value\n\n          value =\n            if value.is_a?(Array)\n              value.map { |val| Rumble.html_escape(val) }.join(\" \")\n            elsif value == true\n              name\n            else\n              Rumble.html_escape(value)\n            end\n\n          res << \" #{name}=\\\"#{value.gsub('\"'.freeze, '&quot;'.freeze)}\\\"\"\n          res\n        end\n      end\n    end\n\n    # Generate HTML using Rumble tag methods. If tag methods are called\n    # outside a `build_html` block, they'll raise an exception.\n    def build_html\n      if defined?(@rumble_context)\n        ctx = @rumble_context\n      end\n      @rumble_context = Context.new\n      yield\n      rumble_cleanup(ctx).to_s\n    end\n\n    # Generate a text node. This is helpful in situations where an element\n    # contains both text and markup.\n    def text(str = nil, &blk)\n      str = Rumble.html_escape(str || blk.call)\n\n      if defined?(@rumble_context) && @rumble_context\n        @rumble_context << str\n      else\n        str\n      end\n    end\n\n    # @private\n    def rumble_context\n      defined?(@rumble_context) ? @rumble_context : nil\n    end\n\n    # @private\n    def rumble_cleanup(value = nil)\n      defined?(@rumble_context) ? @rumble_context : nil\n    ensure\n      @rumble_context = value\n    end\n\n    private\n\n    def rumble_tag(name, sc, content = nil, attrs = nil, &blk)\n      if !defined?(@rumble_context) || !@rumble_context\n        raise Rumble::Error, \"Must enclose tags in `rumble { ... }` block\"\n      end\n\n      context = @rumble_context\n      tag = Tag.new(context, self, name, sc)\n      context << tag\n      tag.insert(content, attrs, &blk)\n    end\n  end\nend\n", "# encoding: UTF-8\n\n# Original Rumble tests (c) 2011 Magnus Holm (https://github.com/judofyr).\n\nrequire 'helper'\n\nif defined?(Minitest::Test)\n  klass = Minitest::Test\nelse\n  klass = MiniTest::Unit::TestCase\nend\n\nclass TestRumble < klass\n  include Keynote::Rumble\n\n  def assert_rumble(str, &blk)\n    exp = str.gsub(/(\\s+(<)|>\\s+)/) { $2 || '>' }\n    res = nil\n    build_html {\n      res = yield.to_s\n    }\n    assert_equal exp, res\n    assert_instance_of ActiveSupport::SafeBuffer, res\n  end\n\n  def setup\n    @rumble_context = nil\n    super\n    assert_nil @rumble_context\n  end\n\n  def teardown\n    super\n    assert_nil @rumble_context\n  end\n\n  def test_simple\n    str = <<-HTML\n      <form>\n        <div id=\"wrapper\">\n          <h1>My Site</h1>\n        </div>\n        <div class=\"input\">\n          <input type=\"text\" name=\"value\">\n        </div>\n      </form>\n    HTML\n\n    assert_rumble str do\n      form do\n        div.wrapper! do\n          h1 \"My Site\"\n        end\n\n        div.input do\n          input type: 'text', name: 'value'\n        end\n      end\n    end\n  end\n\n  def test_string_data\n    assert_rumble '<div data=\"whatever\"></div>' do\n      div data: \"whatever\"\n    end\n  end\n\n  def test_hash_data\n    str = <<-HTML\n      <div data-modal=\"true\" data-safe=\"&quot;&quot;&quot;\" data-unsafe=\"&quot;&amp;quot;&quot;\">\n      </div>\n    HTML\n\n    assert_rumble str do\n      div data: { modal: true, safe: '\"&quot;\"'.html_safe, unsafe: '\"&quot;\"' }\n    end\n  end\n\n  def test_array_attrs\n    str = <<-HTML\n      <div class=\"hello &quot;uns&amp;amp;fe&quot; &quot;w&amp;rld&quot;\">\n      </div>\n    HTML\n\n    assert_rumble str do\n      div class: [\"hello\", '\"uns&amp;fe\"', '\"w&amp;rld\"'.html_safe]\n    end\n  end\n\n  def test_several\n    str = <<-HTML\n      <p>Hello</p>\n      <p>World</p>\n    HTML\n\n    assert_rumble str do\n      p \"Hello\"\n      p \"World\"\n    end\n  end\n\n  def test_several_capture\n    str = <<-HTML\n      <div>\n        <p>Hello</p>\n        <p>Hello</p>\n        |\n        <p>World</p>\n        <p>World</p>\n      </div>\n    HTML\n\n    assert_rumble str do\n      div do\n        (%w[Hello World].map { |x| build_html { p x; p x } } * '|').html_safe\n      end\n    end\n  end\n\n  def test_capture_raise\n    assert_raises RuntimeError do\n      build_html {\n        div do\n          build_html { raise }\n        end\n      }\n    end\n  end\n\n  def test_escape\n    str = <<-HTML\n      <p class=\"&quot;test&quot;\">Hello &amp; World</p>\n    HTML\n\n    assert_rumble str do\n      p \"Hello & World\", :class => '\"test\"'\n    end\n  end\n\n  def test_multiple_css_classes\n    str = <<-HTML\n      <p class=\"one two three\"></p>\n    HTML\n\n    assert_rumble str do\n      p.one.two.three\n    end\n  end\n\n  def test_selfclosing\n    assert_rumble \"<br>\" do\n      br\n    end\n  end\n\n  def test_text\n    assert_rumble \"hello\" do\n      text \"hello\"\n    end\n  end\n\n  def test_escaping_unsafe_input\n    str = \"<br>\"\n\n    assert_rumble \"<div>&lt;br&gt;</div>\" do\n      div { str }\n    end\n\n    assert_rumble \"<div>&lt;br&gt;</div>\" do\n      div str\n    end\n\n    assert_rumble \"<div>&lt;br&gt;</div>\" do\n      div { text { str } }\n    end\n\n    assert_rumble \"<div>&lt;br&gt;</div>\" do\n      div { text str }\n    end\n  end\n\n  def test_not_escaping_safe_input\n    str = \"<br>\".html_safe\n\n    assert_rumble \"<div><br></div>\" do\n      div { str }\n    end\n\n    assert_rumble \"<div><br></div>\" do\n      div str\n    end\n\n    assert_rumble \"<div><br></div>\" do\n      div { text { str } }\n    end\n\n    assert_rumble \"<div><br></div>\" do\n      div { text str }\n    end\n  end\n\n  def test_error_tags_outside_rumble_context\n    assert_raises Keynote::Rumble::Error do\n      div \"content\"\n    end\n  end\n\n  def test_error_selfclosing_content\n    assert_raises Keynote::Rumble::Error do\n      build_html {\n        br \"content\"\n      }\n    end\n  end\n\n  def test_error_css_proxy_continue\n    assert_raises Keynote::Rumble::Error do\n      build_html {\n        p.one(\"test\").two\n      }\n    end\n  end\n\n  # The real test here is if @rumble_context is nil in the teardown.\n  def test_error_general\n    assert_raises RuntimeError do\n      build_html {\n        div do\n          raise\n        end\n      }\n    end\n  end\nend\n"], "filenames": ["lib/keynote/rumble.rb", "spec/rumble_spec.rb"], "buggy_code_start_loc": [326, 70], "buggy_code_end_loc": [330, 75], "fixing_code_start_loc": [326, 70], "fixing_code_end_loc": [338, 87], "type": "CWE-79", "message": "A vulnerability was found in rf Keynote up to 0.x. It has been rated as problematic. Affected by this issue is some unknown functionality of the file lib/keynote/rumble.rb. The manipulation of the argument value leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.0.0 is able to address this issue. The name of the patch is 05be4356b0a6ca7de48da926a9b997beb5ffeb4a. It is recommended to upgrade the affected component. VDB-217142 is the identifier assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2017-20159", "sourceIdentifier": "cna@vuldb.com", "published": "2022-12-31T11:15:10.750", "lastModified": "2023-01-09T14:51:28.013", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability was found in rf Keynote up to 0.x. It has been rated as problematic. Affected by this issue is some unknown functionality of the file lib/keynote/rumble.rb. The manipulation of the argument value leads to cross site scripting. The attack may be launched remotely. Upgrading to version 1.0.0 is able to address this issue. The name of the patch is 05be4356b0a6ca7de48da926a9b997beb5ffeb4a. It is recommended to upgrade the affected component. VDB-217142 is the identifier assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:keynote_project:keynote:*:*:*:*:*:ruby:*:*", "versionEndExcluding": "1.0.0", "matchCriteriaId": "B9331122-965E-46E2-AB9D-31D02588C835"}]}]}], "references": [{"url": "https://github.com/rf-/keynote/commit/05be4356b0a6ca7de48da926a9b997beb5ffeb4a", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/rf-/keynote/releases/tag/v1.0.0", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.217142", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}, {"url": "https://vuldb.com/?id.217142", "source": "cna@vuldb.com", "tags": ["Permissions Required", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/rf-/keynote/commit/05be4356b0a6ca7de48da926a9b997beb5ffeb4a"}}