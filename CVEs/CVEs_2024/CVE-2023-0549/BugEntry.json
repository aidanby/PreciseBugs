{"buggy_code": ["/* Yet Another Forum.NET\n * Copyright (C) 2003-2005 Bj\u00f8rnar Henden\n * Copyright (C) 2006-2013 Jaben Cargman\n * Copyright (C) 2014-2023 Ingo Herbote\n * https://www.yetanotherforum.net/\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n\n * https://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nnamespace YAF.Pages;\n\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nusing YAF.Types.Models;\n\n/// <summary>\n/// The Post Private Message Page\n/// </summary>\npublic partial class PostPrivateMessage : ForumPage\n{\n    public PagedPm ReplyMessage\n    {\n        get => this.ViewState[\"ReplyMessage\"].ToType<PagedPm>();\n\n        set => this.ViewState[\"ReplyMessage\"] = value;\n    }\n\n    /// <summary>\n    ///   message body editor\n    /// </summary>\n    private ForumEditor editor;\n\n    /// <summary>\n    ///   Initializes a new instance of the <see cref = \"PostPrivateMessage\" /> class.\n    ///   Default constructor.\n    /// </summary>\n    public PostPrivateMessage()\n        : base(\"PMESSAGE\", ForumPages.PostPrivateMessage)\n    {\n    }\n\n    /// <summary>\n    /// Raises the <see cref=\"E:System.Web.UI.Control.Init\"/> event.\n    /// </summary>\n    /// <param name=\"e\">An <see cref=\"T:System.EventArgs\"/> object that contains the event data.</param>\n    protected override void OnInit([NotNull] EventArgs e)\n    {\n        if (this.PageBoardContext.BoardSettings.AllowPrivateMessageAttachments)\n        {\n            this.PageBoardContext.PageElements.AddScriptReference(\"FileUploadScript\");\n\n            this.PageBoardContext.PageElements.RegisterCssIncludeContent(\"jquery.fileupload.comb.min.css\");\n        }\n\n        base.OnInit(e);\n    }\n\n    /// <summary>\n    /// Send pm to all users\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"System.EventArgs\"/> instance containing the event data.</param>\n    protected void AllUsers_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // create one entry to show in dropdown\n        var li = new ListItem(this.GetText(\"ALLUSERS\"), \"0\");\n\n        // bind the list to dropdown\n        this.ToList.Items.Add(li);\n        this.ToList.Visible = true;\n        this.To.Text = this.GetText(\"ALLUSERS\");\n\n        // hide To text box\n        this.To.Visible = false;\n\n        // hide find users/all users buttons\n        this.FindUsers.Visible = false;\n        this.AllUsers.Visible = false;\n        this.AllBuddies.Visible = false;\n\n        // we need clear button now\n        this.Clear.Visible = true;\n    }\n\n    /// <summary>\n    /// Send PM to all Buddies\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"System.EventArgs\"/> instance containing the event data.</param>\n    protected void AllBuddies_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // try to find users by user name\n        var usersFound = this.Get<IFriends>().ListAll();\n\n        var friendsString = new StringBuilder();\n\n        if (!usersFound.Any())\n        {\n            return;\n        }\n\n        // we found a user(s)\n        usersFound.ForEach(\n            row => friendsString.AppendFormat(\n                \"{0};\",\n                this.PageBoardContext.BoardSettings.EnableDisplayName ? row.DisplayName : row.Name));\n\n        this.To.Text = friendsString.ToString();\n\n        // hide find users/all users buttons\n        this.FindUsers.Visible = false;\n        this.AllUsers.Visible = false;\n        this.AllBuddies.Visible = false;\n\n        // we need clear button now\n        this.Clear.Visible = true;\n    }\n\n    /// <summary>\n    /// Redirect user back to his PM inbox\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Cancel_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages);\n    }\n\n    /// <summary>\n    /// Clears the User List\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Clear_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // clear drop down\n        this.ToList.Items.Clear();\n\n        // hide it and show empty To text box\n        this.ToList.Visible = false;\n        this.To.Text = string.Empty;\n        this.To.Visible = true;\n\n        // show find users and all users (if user is admin)\n        this.FindUsers.Visible = true;\n        this.AllUsers.Visible = this.PageBoardContext.IsAdmin;\n        this.AllBuddies.Visible = this.PageBoardContext.UserHasBuddies && this.PageBoardContext.BoardSettings.EnableBuddyList;\n\n        // clear button is not necessary now\n        this.Clear.Visible = false;\n    }\n\n    /// <summary>\n    /// Creates page links for this page.\n    /// </summary>\n    public override void CreatePageLinks()\n    {\n        // forum index\n        this.PageBoardContext.PageLinks.AddRoot();\n\n        // users control panel\n        this.PageBoardContext.PageLinks.AddLink(this.PageBoardContext.PageUser.DisplayOrUserName(), this.Get<LinkBuilder>().GetLink(ForumPages.MyAccount));\n\n        // post new message\n        this.PageBoardContext.PageLinks.AddLink(this.GetText(\"TITLE\"));\n    }\n\n    /// <summary>\n    /// Find Users\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void FindUsers_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        if (this.To.Text.Length < 2)\n        {\n            // need at least 2 letters of user's name\n            this.PageBoardContext.Notify(this.GetText(\"NEED_MORE_LETTERS\"), MessageTypes.warning);\n            return;\n        }\n\n        // try to find users by user name\n        var usersFound = this.Get<IUserDisplayName>().FindUserContainsName(this.To.Text.Trim()).Where(\n            u => !u.Block.BlockPMs && u.UserFlags.IsApproved && u.ID != this.PageBoardContext.PageUserID).ToList();\n\n        if (usersFound.Any())\n        {\n            // we found a user(s)\n            this.ToList.DataSource = usersFound;\n            this.ToList.DataValueField = \"ID\";\n            this.ToList.DataTextField = this.PageBoardContext.BoardSettings.EnableDisplayName ? \"DisplayName\" : \"Name\";\n            this.ToList.DataBind();\n\n            // ToList.SelectedIndex = 0;\n            // hide To text box and show To drop down\n            this.ToList.Visible = true;\n            this.To.Visible = false;\n\n            // find is no more needed\n            this.FindUsers.Visible = false;\n\n            // we need clear button displayed now\n            this.Clear.Visible = true;\n        }\n        else\n        {\n            // user not found\n            this.PageBoardContext.Notify(this.GetText(\"USER_NOTFOUND\"), MessageTypes.danger);\n            return;\n        }\n\n        // re-bind data to the controls\n        this.DataBind();\n    }\n\n    /// <summary>\n    /// Handles the Initialization event of the Page control.\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Page_Init([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        this.editor = ForumEditorHelper.GetCurrentForumEditor();\n\n        this.editor.MaxCharacters = this.PageBoardContext.BoardSettings.MaxPostSize;\n\n        this.EditorLine.Controls.Add(this.editor);\n\n        this.editor.UserCanUpload = this.PageBoardContext.BoardSettings.AllowPrivateMessageAttachments;\n\n        // add editor to the page\n        this.EditorLine.Controls.Add(this.editor);\n    }\n\n    /// <summary>\n    /// Handles the Load event of the Page control.\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Page_Load([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // if user isn't authenticated, redirect him to login page\n        if (this.User == null || this.PageBoardContext.IsGuest)\n        {\n            this.RedirectNoAccess();\n        }\n\n        this.HandleUploadControls();\n\n        // this needs to be done just once, not during post-backs\n        if (this.IsPostBack)\n        {\n            return;\n        }\n\n        // only administrators can send messages to all users\n        this.AllUsers.Visible = this.PageBoardContext.IsAdmin;\n\n        this.AllBuddies.Visible = this.PageBoardContext.UserHasBuddies && this.PageBoardContext.BoardSettings.EnableBuddyList;\n\n        // Is Reply\n        if (this.Get<HttpRequestBase>().QueryString.Exists(\"p\"))\n        {\n            // PM is a reply or quoted reply (isQuoting)\n            // to the given message id \"p\"\n            var isQuoting = this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"q\") == \"1\";\n\n            var isReport = this.Get<HttpRequestBase>().QueryString.Exists(\"report\");\n\n            // get quoted message\n            this.ReplyMessage =\n                this.GetRepository<PMessage>().GetMessage(\n                    this.Get<LinkBuilder>().StringToIntOrRedirect(this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"p\")));\n\n            // there is such a message\n            if (this.ReplyMessage == null)\n            {\n                return;\n            }\n\n            // get message sender/recipient\n            var toUserId = this.ReplyMessage.ToUserID;\n            var fromUserId = this.ReplyMessage.FromUserID;\n\n            // verify access to this PM\n            if (toUserId != this.PageBoardContext.PageUserID && fromUserId != this.PageBoardContext.PageUserID)\n            {\n                this.Get<LinkBuilder>().AccessDenied();\n            }\n\n            // handle subject\n            var subject = this.ReplyMessage.Subject;\n            if (!subject.StartsWith(\"Re: \"))\n            {\n                subject = $\"Re: {subject}\";\n            }\n\n            this.PmSubjectTextBox.Text = subject;\n\n            var displayName = this.Get<IUserDisplayName>().GetNameById(fromUserId);\n\n            // set \"To\" user and disable changing...\n            this.To.Text = displayName;\n            this.To.Enabled = false;\n            this.FindUsers.Visible = false;\n            this.AllUsers.Visible = false;\n            this.AllBuddies.Visible = false;\n\n            if (!isQuoting)\n            {\n                return;\n            }\n\n            // PM is a quoted reply\n            var body = this.ReplyMessage.Body;\n\n            if (this.PageBoardContext.BoardSettings.RemoveNestedQuotes)\n            {\n                body = this.Get<IFormatMessage>().RemoveNestedQuotes(body);\n            }\n\n            // Ensure quoted replies have bad words removed from them\n            body = this.Get<IBadWordReplace>().Replace(body);\n\n            // Quote the original message\n            body = $\"[QUOTE={displayName}]{body}[/QUOTE]\";\n\n            // we don't want any whitespaces at the beginning of message\n            this.editor.Text = body.TrimStart();\n\n            if (!isReport)\n            {\n                return;\n            }\n\n            var hostUser = this.GetRepository<User>().Get(u => u.BoardID == this.PageBoardContext.PageBoardID && (u.Flags & 1) == 1).FirstOrDefault();\n\n            if (hostUser != null)\n            {\n                this.To.Text = hostUser.DisplayOrUserName();\n\n                this.PmSubjectTextBox.Text = this.GetTextFormatted(\"REPORT_SUBJECT\", displayName);\n\n                var bodyReport = $\"[QUOTE={displayName}]{this.ReplyMessage.Body}[/QUOTE]\";\n\n                // Quote the original message\n                bodyReport = this.GetTextFormatted(\"REPORT_BODY\", bodyReport);\n\n                // we don't want any whitespaces at the beginning of message\n                this.editor.Text = bodyReport.TrimStart();\n            }\n            else\n            {\n                this.Get<LinkBuilder>().AccessDenied();\n            }\n        }\n        else if (this.Get<HttpRequestBase>().QueryString.Exists(\"u\")\n                 && this.Get<HttpRequestBase>().QueryString.Exists(\"r\"))\n        {\n            // PM is being send as a quoted reply to a reported post\n            // We check here if the user have access to the option\n            if (!this.PageBoardContext.IsModeratorInAnyForum && !this.PageBoardContext.IsForumModerator)\n            {\n                return;\n            }\n\n            // get quoted message\n            var reporter =\n                this.GetRepository<User>().MessageReporter(\n                        this.Get<LinkBuilder>().StringToIntOrRedirect(\n                            this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"r\")),\n                        this.Get<LinkBuilder>().StringToIntOrRedirect(\n                            this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"u\")))\n                    .FirstOrDefault();\n\n            // there is such a message\n            // message info should be always returned as 1 row\n            if (reporter == null)\n            {\n                return;\n            }\n\n            // handle subject\n            this.PmSubjectTextBox.Text = this.GetText(\"REPORTED_SUBJECT\");\n\n            var displayName =\n                this.Get<IUserDisplayName>().GetNameById(reporter.Item1.ID);\n\n            // set \"To\" user and disable changing...\n            this.To.Text = displayName;\n            this.To.Enabled = false;\n            this.FindUsers.Visible = false;\n            this.AllUsers.Visible = false;\n            this.AllBuddies.Visible = false;\n\n            // Parse content with delimiter '|'\n            var quoteList = reporter.Item2.ReportText.Split('|');\n\n            // Quoted replies should have bad words in them\n            // Reply to report PM is always a quoted reply\n            // Quote the original message in a cycle\n            for (var i = 0; i < quoteList.Length; i++)\n            {\n                // Add quote codes\n                quoteList[i] = $\"[QUOTE={displayName}]{quoteList[i]}[/QUOTE]\\r\\n\";\n\n                // Replace DateTime delimiter '??' by ': '\n                // we don't want any whitespaces at the beginning of message\n                this.editor.Text = quoteList[i].Replace(\"??\", \": \") + this.editor.Text.TrimStart();\n            }\n        }\n        else if (this.Get<HttpRequestBase>().QueryString.Exists(\"u\"))\n        {\n            // find user\n            var foundUser =\n                this.GetRepository<User>().GetById(this.Get<LinkBuilder>().StringToIntOrRedirect(\n                    this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"u\")));\n\n            if (foundUser == null)\n            {\n                return;\n            }\n\n            if (foundUser.ID == this.PageBoardContext.PageUserID)\n            {\n                return;\n            }\n\n            this.To.Text = foundUser.DisplayOrUserName();\n\n            this.To.Enabled = false;\n\n            // hide find user/all users buttons\n            this.FindUsers.Visible = false;\n            this.AllUsers.Visible = false;\n            this.AllBuddies.Visible = false;\n        }\n        else\n        {\n            // Blank PM\n\n            // multi-receiver info is relevant only when sending blank PM\n            if (this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients < 1 || this.PageBoardContext.IsAdmin)\n            {\n                return;\n            }\n\n            // format localized string\n            this.MultiReceiverInfo.Text =\n                $\"{string.Format(this.GetText(\"MAX_RECIPIENT_INFO\"), this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients)} {this.GetText(\"MULTI_RECEIVER_INFO\")}\";\n\n            // display info\n            this.MultiReceiverAlert.Visible = true;\n        }\n    }\n\n    /// <summary>\n    /// Previews the Message Output\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Preview_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // make preview row visible\n        this.PreviewRow.Visible = true;\n\n        this.PreviewMessagePost.MessageFlags.IsHtml = false;\n        this.PreviewMessagePost.MessageFlags.IsBBCode = this.editor.UsesBBCode;\n        this.PreviewMessagePost.Message = this.editor.Text;\n        this.PreviewMessagePost.MessageID = 0;\n\n        if (!this.PageBoardContext.BoardSettings.AllowSignatures)\n        {\n            return;\n        }\n\n        var user = this.GetRepository<User>().GetById(this.PageBoardContext.PageUserID);\n\n        if (user.Signature.IsSet())\n        {\n            this.PreviewMessagePost.Signature = user.Signature;\n        }\n    }\n\n    /// <summary>\n    /// Send Private Message\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Save_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        var replyTo = this.Get<HttpRequestBase>().QueryString.Exists(\"p\")\n                          ? this.Get<HttpRequestBase>().QueryString.GetFirstOrDefaultAsInt(\"p\")\n                          : null;\n\n        // Check if quoted message is Reply\n        if (this.ReplyMessage?.ReplyTo != null)\n        {\n            replyTo = this.ReplyMessage.ReplyTo;\n        }\n\n        if (this.Get<HttpRequestBase>().QueryString.Exists(\"report\"))\n        {\n            replyTo = null;\n        }\n\n        // recipient was set in dropdown\n        if (this.ToList.Visible)\n        {\n            this.To.Text = this.ToList.SelectedItem.Text;\n        }\n\n        if (this.To.Text.Length <= 0)\n        {\n            // recipient is required field\n            this.PageBoardContext.Notify(this.GetText(\"need_to\"), MessageTypes.warning);\n            return;\n        }\n\n        // subject is required\n        if (this.PmSubjectTextBox.Text.Trim().Length <= 0)\n        {\n            this.PageBoardContext.Notify(this.GetText(\"need_subject\"), MessageTypes.warning);\n            return;\n        }\n\n        // message is required\n        if (this.editor.Text.Trim().Length <= 0)\n        {\n            this.PageBoardContext.Notify(this.GetText(\"need_message\"), MessageTypes.warning);\n            return;\n        }\n\n        if (this.ToList.SelectedItem is { Value: \"0\" })\n        {\n            // administrator is sending PMs to all users\n            var body = HtmlHelper.StripHtml(BBCodeHelper.EncodeCodeBlocks(this.editor.Text));\n            var messageFlags = new MessageFlags\n                                   {\n                                       IsHtml = false,\n                                       IsBBCode = this.editor.UsesBBCode\n                                   };\n\n            // test user's PM count\n            if (!this.VerifyMessageAllowed(1, body))\n            {\n                return;\n            }\n\n            this.GetRepository<PMessage>().SendMessage(\n                this.PageBoardContext.PageUserID,\n                0,\n                this.PmSubjectTextBox.Text,\n                body,\n                messageFlags.BitValue,\n                replyTo);\n\n            // redirect to outbox (sent items), not control panel\n            this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages, new { v = \"out\" });\n        }\n        else\n        {\n            // remove all abundant whitespaces and separators\n            var rx = new Regex(@\";(\\s|;)*;\");\n            this.To.Text = rx.Replace(this.To.Text, \";\");\n\n            if (this.To.Text.StartsWith(\";\"))\n            {\n                this.To.Text = this.To.Text.Substring(1);\n            }\n\n            if (this.To.Text.EndsWith(\";\"))\n            {\n                this.To.Text = this.To.Text.Substring(0, this.To.Text.Length - 1);\n            }\n\n            rx = new Regex(@\"\\s*;\\s*\");\n            this.To.Text = rx.Replace(this.To.Text, \";\");\n\n            // list of recipients\n            var recipients = new List<string>(this.To.Text.Trim().Split(';'));\n\n            if (recipients.Count > this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients\n                && !this.PageBoardContext.IsAdmin && this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients != 0)\n            {\n                // to many recipients\n                this.PageBoardContext.Notify(\n                    this.GetTextFormatted(\n                        \"TOO_MANY_RECIPIENTS\",\n                        this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients),\n                    MessageTypes.warning);\n\n                return;\n            }\n\n            if (!this.VerifyMessageAllowed(recipients.Count, this.editor.Text))\n            {\n                return;\n            }\n\n            // list of recipient's ids\n            var recipientIds = new List<int>();\n\n            // get recipients' IDs\n            foreach (var recipient in recipients)\n            {\n                var user = this.Get<IUserDisplayName>().FindUserByName(recipient);\n\n                if (user == null)\n                {\n                    this.PageBoardContext.Notify(\n                        this.GetTextFormatted(\"NO_SUCH_USER\", recipient),\n                        MessageTypes.warning);\n                    return;\n                }\n\n                if (user.UserFlags.IsGuest)\n                {\n                    this.PageBoardContext.Notify(this.GetText(\"NOT_GUEST\"), MessageTypes.danger);\n                    return;\n                }\n\n                // get recipient's ID from the database\n                if (!recipientIds.Contains(user.ID))\n                {\n                    recipientIds.Add(user.ID);\n                }\n\n                var count = this.GetRepository<PMessage>().UserMessageCount(user.ID);\n\n                // test receiving user's PM count\n                if (count.NumberTotal + 1\n                    < count.Allowed || this.PageBoardContext.IsAdmin\n                                    || this.Get<IAspNetUsersHelper>().GetBoardUser(user.ID, this.PageBoardContext.PageBoardID).Item4.IsAdmin > 0)\n                {\n                    continue;\n                }\n\n                // recipient has full PM box\n                this.PageBoardContext.Notify(\n                    this.GetTextFormatted(\"RECIPIENTS_PMBOX_FULL\", recipient),\n                    MessageTypes.danger);\n                return;\n            }\n\n            // send PM to all recipients\n            recipientIds.ForEach(\n                userId =>\n\n                    {\n                        var body = this.editor.Text;\n\n                        var messageFlags = new MessageFlags\n                                               {\n                                                   IsHtml = false,\n                                                   IsBBCode = this.editor.UsesBBCode\n                                               };\n\n                        this.GetRepository<PMessage>().SendMessage(\n                            this.PageBoardContext.PageUserID,\n                            userId,\n                            this.PmSubjectTextBox.Text,\n                            body,\n                            messageFlags.BitValue,\n                            replyTo);\n\n                        // reset lazy data as he should be informed at once\n                        this.Get<IDataCache>().Remove(string.Format(Constants.Cache.ActiveUserLazyData, userId));\n\n                        if (this.PageBoardContext.BoardSettings.AllowPMEmailNotification)\n                        {\n                            this.Get<ISendNotification>().ToPrivateMessageRecipient(\n                                userId,\n                                this.PmSubjectTextBox.Text.Trim());\n                        }\n                    });\n\n            // redirect to outbox (sent items), not control panel\n            this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages, new { v = \"out\" });\n        }\n    }\n\n    /// <summary>\n    /// Verifies the message allowed.\n    /// </summary>\n    /// <param name=\"count\">The recipients count.</param>\n    /// <param name=\"message\">The message.</param>\n    /// <returns>\n    /// Returns if the user is allowed to send a message or not\n    /// </returns>\n    private bool VerifyMessageAllowed(int count, string message)\n    {\n        // Check if SPAM Message first...\n        if (!this.PageBoardContext.IsAdmin && !this.PageBoardContext.ForumModeratorAccess)\n        {\n            // Check content for spam\n            if (this.Get<ISpamCheck>().CheckPostForSpam(\n                    this.PageBoardContext.IsGuest ? \"Guest\" : this.PageBoardContext.PageUser.DisplayOrUserName(),\n                    this.PageBoardContext.Get<HttpRequestBase>().GetUserRealIPAddress(),\n                    message,\n                    this.PageBoardContext.MembershipUser.Email,\n                    out var spamResult))\n            {\n                var description =\n                    $@\"Spam Check detected possible SPAM ({spamResult}) Original message: [{message}]\n                       posted by PageUser: {(this.PageBoardContext.IsGuest ? \"Guest\" : this.PageBoardContext.PageUser.DisplayOrUserName())}\";\n\n                switch (this.PageBoardContext.BoardSettings.SpamPostHandling)\n                {\n                    case SpamPostHandling.DoNothing:\n                        this.Logger.SpamMessageDetected(\n                            this.PageBoardContext.PageUserID,\n                            description);\n                        break;\n                    case SpamPostHandling.FlagMessageUnapproved:\n                        this.Logger.SpamMessageDetected(\n                            this.PageBoardContext.PageUserID,\n                            $\"{description}, it was flagged as unapproved post\");\n                        break;\n                    case SpamPostHandling.RejectMessage:\n                        this.Logger.SpamMessageDetected(\n                            this.PageBoardContext.PageUserID,\n                            $\"{description}, post was rejected\");\n\n                        this.PageBoardContext.Notify(this.GetText(\"SPAM_MESSAGE\"), MessageTypes.danger);\n\n                        break;\n                    case SpamPostHandling.DeleteBanUser:\n                        this.Logger.SpamMessageDetected(\n                            this.PageBoardContext.PageUserID,\n                            $\"{description}, user was deleted and bannded\");\n\n                        this.Get<IAspNetUsersHelper>().DeleteAndBanUser(\n                            this.PageBoardContext.PageUserID,\n                            this.PageBoardContext.MembershipUser,\n                            this.PageBoardContext.PageUser.IP);\n\n                        break;\n                }\n\n                return false;\n            }\n        }\n\n        ///////////////////////////////\n\n        // test sending user's PM count\n        // get user's name\n        var countInfo = this.GetRepository<PMessage>().UserMessageCount(this.PageBoardContext.PageUserID);\n\n        if (countInfo.NumberTotal + count <= countInfo.Allowed\n            || this.PageBoardContext.IsAdmin)\n        {\n            return true;\n        }\n\n        // user has full PM box\n        this.PageBoardContext.Notify(\n            this.GetTextFormatted(\"OWN_PMBOX_FULL\", countInfo.Allowed),\n            MessageTypes.danger);\n\n        return false;\n    }\n\n    /// <summary>\n    /// Handles the upload controls.\n    /// </summary>\n    private void HandleUploadControls()\n    {\n        this.editor.UserCanUpload = this.PageBoardContext.UploadAccess;\n        this.UploadDialog.Visible = this.PageBoardContext.UploadAccess;\n    }\n}", "<%@ Control Language=\"c#\" AutoEventWireup=\"True\" Inherits=\"YAF.Pages.PrivateMessage\" Codebehind=\"PrivateMessage.ascx.cs\" %>\n\n<%@ Import Namespace=\"YAF.Types.Flags\" %>\n<%@ Import Namespace=\"YAF.Types.Objects.Model\" %>\n<%@ Import Namespace=\"YAF.Types.Interfaces.Services\" %>\n\n<YAF:PageLinks runat=\"server\" ID=\"PageLinks\" />\n\n<div class=\"row\">\n    <div class=\"col-sm-auto\">\n        <YAF:ProfileMenu runat=\"server\"></YAF:ProfileMenu>\n    </div>\n\n    <div class=\"col\">\n        <div class=\"my-3 p-3 bg-body rounded shadow-sm\">\n            <h5><YAF:Icon runat=\"server\"\n                          IconName=\"envelope-open\"\n                          IconType=\"text-secondary\" />\n                <asp:Label runat=\"server\" ID=\"MessageTitle\"></asp:Label></h5>\n        <asp:Repeater ID=\"Inbox\" runat=\"server\" OnItemCommand=\"Inbox_ItemCommand\">\n            <ItemTemplate>\n                <div class=\"<%# string.Format(\"row rounded mb-3 {0}\", (Container.DataItem as PagedPm).FromUserID == this.PageBoardContext.PageUserID ? \"bg-light\" : \"border border-secondary\") %>\">\n                    <div class=\"row\">\n                        <div class=\"col d-flex mt-1 p-0\">\n                            <asp:PlaceHolder runat=\"server\" Visible=\"<%# (Container.DataItem as PagedPm).FromUserID != this.PageBoardContext.PageUserID  %>\">\n                                <div class=\"me-1\">\n                                    <asp:Image runat=\"server\" ID=\"Avatar\"\n                                               CssClass=\"img-avatar-sm mx-2\" ImageUrl=\"<%# this.Get<IAvatars>().GetAvatarUrlForUser(\n                                                                                                             (Container.DataItem as PagedPm).FromUserID,\n                                                                                                             (Container.DataItem as PagedPm).FromAvatar,\n                                                                                                             (Container.DataItem as PagedPm).FromHasAvatarImage) %>\"\n                                               AlternateText=\"<%# this.PageBoardContext.BoardSettings.EnableDisplayName ? (Container.DataItem as PagedPm).FromUserDisplayName : (Container.DataItem as PagedPm).FromUser %>\"/>\n                                </div>\n                                <div>\n                                    <YAF:UserLink ID=\"FromUserLink\" runat=\"server\"\n                                                  ReplaceName=\"<%# this.PageBoardContext.BoardSettings.EnableDisplayName ? (Container.DataItem as PagedPm).FromUserDisplayName : (Container.DataItem as PagedPm).FromUser  %>\"\n                                                  Suspended=\"<%# (Container.DataItem as PagedPm).FromSuspended %>\"\n                                                  Style=\"<%#(Container.DataItem as PagedPm).FromStyle %>\"\n                                                  UserID=\"<%# (Container.DataItem as PagedPm).FromUserID %>\" />\n                                </div>\n                            </asp:PlaceHolder>\n                            <div class=\"<%# (Container.DataItem as PagedPm).FromUserID == this.PageBoardContext.PageUserID ? \"me-auto\" : \"ms-auto\" %>\">\n                                <YAF:Icon runat=\"server\"\n                                          IconName=\"calendar-day\"\n                                          IconType=\"text-secondary\"\n                                          IconNameBadge=\"clock\"\n                                          IconBadgeType=\"text-secondary\" />\n                                <YAF:DisplayDateTime ID=\"CreatedDateTime\" runat=\"server\"\n                                                     DateTime=\"<%# (Container.DataItem as PagedPm).Created %>\" />\n                            </div>\n                            <asp:PlaceHolder runat=\"server\" Visible=\"<%# (Container.DataItem as PagedPm).FromUserID == this.PageBoardContext.PageUserID  %>\">\n                                <div>\n                                    <YAF:UserLink ID=\"UserLink1\" runat=\"server\"\n                                                  ReplaceName=\"<%# this.PageBoardContext.BoardSettings.EnableDisplayName ? (Container.DataItem as PagedPm).FromUserDisplayName : (Container.DataItem as PagedPm).FromUser  %>\"\n                                                  Suspended=\"<%# (Container.DataItem as PagedPm).FromSuspended %>\"\n                                                  Style=\"<%#(Container.DataItem as PagedPm).FromStyle %>\"\n                                                  UserID=\"<%# (Container.DataItem as PagedPm).FromUserID %>\" />\n                                </div>\n                                <div class=\"ms-1\">\n                                    <asp:Image runat=\"server\" ID=\"Image1\"\n                                               CssClass=\"img-avatar-sm\" ImageUrl=\"<%# this.Get<IAvatars>().GetAvatarUrlForUser(\n                                                                                                             (Container.DataItem as PagedPm).FromUserID,\n                                                                                                             (Container.DataItem as PagedPm).FromAvatar,\n                                                                                                             (Container.DataItem as PagedPm).FromHasAvatarImage) %>\"\n                                               AlternateText=\"<%# this.PageBoardContext.BoardSettings.EnableDisplayName ? (Container.DataItem as PagedPm).FromUserDisplayName : (Container.DataItem as PagedPm).FromUser %>\"/>\n                                </div>\n                            </asp:PlaceHolder>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                            <div class=\"col mt-3\">\n                                <YAF:MessagePost ID=\"Message\" runat=\"server\"\n                                                 MessageFlags=\"<%# new MessageFlags((Container.DataItem as PagedPm).Flags) %>\"\n                                                 Message=\"<%# (Container.DataItem as PagedPm).Body%>\"\n                                                 MessageID=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\" />\n                            </div>\n                        </div>\n                        \n                        <div class=\"row justify-content-between align-items-center\">\n                                    <div class=\"col-auto px-0\">\n                                        <YAF:ThemeButton ID=\"ReportMessage\" runat=\"server\"\n                                                         CommandName=\"report\" CommandArgument=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\"\n                                                         TextLocalizedTag=\"REPORTPOST\"\n                                                         TitleLocalizedTag=\"REPORTPOST_TITLE\"\n                                                         DataToggle=\"tooltip\"\n                                                         TextLocalizedPage=\"POSTS\"\n                                                         Type=\"Link\"\n                                                         Icon=\"exclamation-triangle\"\n                                                         IconColor=\"text-danger\"/>\n                                    </div>\n                                    <div class=\"col-auto px-0 d-flex flex-wrap\">\n                                        <YAF:ThemeButton ID=\"ReplyMessage\" runat=\"server\"\n                                                         CommandName=\"reply\" CommandArgument=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\"\n                                                         TextLocalizedTag=\"BUTTON_REPLY\" TitleLocalizedTag=\"BUTTON_REPLY_TT\"\n                                                         DataToggle=\"tooltip\"\n                                                         Type=\"Secondary\"\n                                                         Icon=\"reply\"\n                                                         CssClass=\"me-1 mb-1\"\n                                                         Visible=\"<%# (Container.DataItem as PagedPm).FromUserID != this.PageBoardContext.PageUserID %>\"/>\n                                        <YAF:ThemeButton ID=\"QuoteMessage\" runat=\"server\"\n                                                         CommandName=\"quote\" CommandArgument=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\"\n                                                         TextLocalizedTag=\"BUTTON_QUOTE_TT\" TitleLocalizedTag=\"BUTTON_QUOTE_TT\"\n                                                         DataToggle=\"tooltip\"\n                                                         Type=\"Secondary\"\n                                                         Icon=\"reply\"\n                                                         CssClass=\"me-1 mb-1\"\n                                                         Visible=\"<%# (Container.DataItem as PagedPm).FromUserID != this.PageBoardContext.PageUserID %>\"/>\n                                        <YAF:ThemeButton ID=\"DeleteMessage\" runat=\"server\"\n                                                         CommandName=\"delete\" CommandArgument=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\"\n                                                         DataToggle=\"tooltip\"\n                                                         TextLocalizedTag=\"BUTTON_DELETE\" TitleLocalizedTag=\"BUTTON_DELETE_TT\"\n                                                         ReturnConfirmTag=\"confirm_deletemessage\"\n                                                         CssClass=\"mb-1\"\n                                                         Type=\"Danger\"\n                                                         Icon=\"trash\"/>\n                                    </div>\n                                </div>\n                    </div>\n            </ItemTemplate>\n        </asp:Repeater>\n        </div>\n    </div>\n</div>", "/* Yet Another Forum.NET\n * Copyright (C) 2003-2005 Bj\u00f8rnar Henden\n * Copyright (C) 2006-2013 Jaben Cargman\n * Copyright (C) 2014-2023 Ingo Herbote\n * https://www.yetanotherforum.net/\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n\n * https://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nnamespace YAF.Pages;\n\nusing YAF.Types.EventProxies;\nusing YAF.Types.Interfaces.Events;\nusing YAF.Types.Models;\n\n/// <summary>\n/// The Private Message page\n/// </summary>\npublic partial class PrivateMessage : ForumPageRegistered\n{\n    /// <summary>\n    /// Initializes a new instance of the <see cref=\"PrivateMessage\"/> class.\n    /// </summary>\n    public PrivateMessage()\n        : base(\"MESSAGE\", ForumPages.PrivateMessage)\n    {\n    }\n\n    /// <summary>\n    ///   Gets or sets a value indicating whether IsOutbox.\n    /// </summary>\n    protected bool IsOutbox { get; set; }\n\n    /// <summary>\n    /// Handles the ItemCommand event of the Inbox control.\n    /// </summary>\n    /// <param name=\"source\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"RepeaterCommandEventArgs\" /> instance containing the event data.</param>\n    protected void Inbox_ItemCommand([NotNull] object source, [NotNull] RepeaterCommandEventArgs e)\n    {\n        switch (e.CommandName)\n        {\n            case \"delete\":\n                \n                var message = this.GetRepository<UserPMessage>().GetById(e.CommandArgument.ToType<int>());\n                this.GetRepository<UserPMessage>().Delete(message, message.UserID != this.PageBoardContext.PageUserID);\n\n                this.BindData();\n                this.PageBoardContext.Notify(this.GetText(\"msg_deleted\"), MessageTypes.success);\n                this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages);\n                break;\n            case \"reply\":\n                this.Get<LinkBuilder>().Redirect(ForumPages.PostPrivateMessage, new { p = e.CommandArgument, q = 0 });\n                break;\n            case \"report\":\n                this.Get<LinkBuilder>().Redirect(ForumPages.PostPrivateMessage, new { p = e.CommandArgument, q = 1, report = 1 });\n                break;\n            case \"quote\":\n                this.Get<LinkBuilder>().Redirect(ForumPages.PostPrivateMessage, new { p = e.CommandArgument, q = 1 });\n                break;\n        }\n    }\n\n    /// <summary>\n    /// Handles the Load event of the Page control.\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\" /> instance containing the event data.</param>\n    protected void Page_Load([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // check if this feature is disabled\n        if (!this.PageBoardContext.BoardSettings.AllowPrivateMessages)\n        {\n            this.Get<LinkBuilder>().RedirectInfoPage(InfoMessage.Disabled);\n        }\n\n        if (!this.Get<HttpRequestBase>().QueryString.Exists(\"pm\"))\n        {\n            this.Get<LinkBuilder>().AccessDenied();\n        }\n\n        if (this.IsPostBack)\n        {\n            return;\n        }\n\n        // handle custom YafBBCode javascript or CSS...\n        this.Get<IBBCode>().RegisterCustomBBCodePageElements(this.Page, this.GetType());\n\n        this.BindData();\n    }\n\n    /// <summary>\n    /// Create the Page links.\n    /// </summary>\n    public override void CreatePageLinks()\n    {\n        this.PageBoardContext.PageLinks.AddRoot();\n        this.PageBoardContext.PageLinks.AddLink(this.PageBoardContext.PageUser.DisplayOrUserName(), this.Get<LinkBuilder>().GetLink(ForumPages.MyAccount));\n    }\n\n    /// <summary>\n    /// Binds the data.\n    /// </summary>\n    private void BindData()\n    {\n        var messageId =\n            this.Get<LinkBuilder>().StringToIntOrRedirect(this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"pm\"));\n\n        var messages = this.GetRepository<PMessage>().List(messageId, true);\n\n        if (!messages.NullOrEmpty())\n        {\n            messages.ForEach(\n                m => this.GetRepository<UserPMessage>().MarkAsRead(m.PMessageID, new PMessageFlags(m.Flags)));\n\n            var message = messages.FirstOrDefault();\n\n            this.SetMessageView(message.FromUserID, message.ToUserID, message.IsInOutbox);\n\n            // get the return link to the pm listing\n            if (this.IsOutbox)\n            {\n                this.PageBoardContext.PageLinks.AddLink(\n                    this.GetText(\"SENTITEMS\"),\n                    this.Get<LinkBuilder>().GetLink(ForumPages.MyMessages, new { v = \"out\" }));\n            }\n            else\n            {\n                this.PageBoardContext.PageLinks.AddLink(this.GetText(\"INBOX\"), this.Get<LinkBuilder>().GetLink(ForumPages.MyMessages));\n            }\n\n            this.PageBoardContext.PageLinks.AddLink(message.Subject);\n            this.MessageTitle.Text = message.Subject;\n\n            this.Inbox.DataSource = messages;\n        }\n        else\n        {\n            this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages);\n        }\n\n        this.DataBind();\n\n        if (this.IsOutbox)\n        {\n            return;\n        }\n\n        this.Get<IRaiseEvent>().Raise(new UpdateUserPrivateMessageEvent(this.PageBoardContext.PageUserID, messageId));\n    }\n\n    /// <summary>\n    /// Sets the IsOutbox property as appropriate for this private message.\n    /// </summary>\n    /// <param name=\"fromUserId\">\n    /// The from User Id.\n    /// </param>\n    /// <param name=\"toUserId\">\n    /// The to User Id.\n    /// </param>\n    /// <param name=\"messageIsInOutbox\">\n    /// Indicating whether the message is in the sender's outbox\n    /// </param>\n    private void SetMessageView(\n        [NotNull] int fromUserId,\n        [NotNull] int toUserId,\n        bool messageIsInOutbox)\n    {\n        var isCurrentUserFrom = fromUserId.Equals(this.PageBoardContext.PageUserID);\n        var isCurrentUserTo = toUserId.Equals(this.PageBoardContext.PageUserID);\n\n        // check if it's the same user...\n        if (isCurrentUserFrom && isCurrentUserTo)\n        {\n            // it is... handle the view based on the query string passed\n            this.IsOutbox = this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"v\") == \"out\";\n\n            // see if the message got deleted, if so, redirect to their outbox/archive\n            if (this.IsOutbox && !messageIsInOutbox)\n            {\n                this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages, new { v = \"out\" });\n            }\n        }\n        else if (isCurrentUserFrom)\n        {\n            // see if it's been deleted by the from user...\n            if (!messageIsInOutbox)\n            {\n                // deleted for this user, redirect...\n                this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages, new { v = \"out\" });\n            }\n            else\n            {\n                // nope\n                this.IsOutbox = true;\n            }\n        }\n        else if (isCurrentUserTo)\n        {\n            // get the status for the receiver\n            this.IsOutbox = false;\n        }\n        else\n        {\n            this.Get<LinkBuilder>().AccessDenied();\n        }\n    }\n}"], "fixing_code": ["/* Yet Another Forum.NET\n * Copyright (C) 2003-2005 Bj\u00f8rnar Henden\n * Copyright (C) 2006-2013 Jaben Cargman\n * Copyright (C) 2014-2023 Ingo Herbote\n * https://www.yetanotherforum.net/\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n\n * https://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nnamespace YAF.Pages;\n\nusing System.Text;\nusing System.Text.RegularExpressions;\n\nusing YAF.Types.Models;\n\n/// <summary>\n/// The Post Private Message Page\n/// </summary>\npublic partial class PostPrivateMessage : ForumPage\n{\n    public PagedPm ReplyMessage\n    {\n        get => this.ViewState[\"ReplyMessage\"].ToType<PagedPm>();\n\n        set => this.ViewState[\"ReplyMessage\"] = value;\n    }\n\n    /// <summary>\n    ///   message body editor\n    /// </summary>\n    private ForumEditor editor;\n\n    /// <summary>\n    ///   Initializes a new instance of the <see cref = \"PostPrivateMessage\" /> class.\n    ///   Default constructor.\n    /// </summary>\n    public PostPrivateMessage()\n        : base(\"PMESSAGE\", ForumPages.PostPrivateMessage)\n    {\n    }\n\n    /// <summary>\n    /// Raises the <see cref=\"E:System.Web.UI.Control.Init\"/> event.\n    /// </summary>\n    /// <param name=\"e\">An <see cref=\"T:System.EventArgs\"/> object that contains the event data.</param>\n    protected override void OnInit([NotNull] EventArgs e)\n    {\n        if (this.PageBoardContext.BoardSettings.AllowPrivateMessageAttachments)\n        {\n            this.PageBoardContext.PageElements.AddScriptReference(\"FileUploadScript\");\n\n            this.PageBoardContext.PageElements.RegisterCssIncludeContent(\"jquery.fileupload.comb.min.css\");\n        }\n\n        base.OnInit(e);\n    }\n\n    /// <summary>\n    /// Send pm to all users\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"System.EventArgs\"/> instance containing the event data.</param>\n    protected void AllUsers_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // create one entry to show in dropdown\n        var li = new ListItem(this.GetText(\"ALLUSERS\"), \"0\");\n\n        // bind the list to dropdown\n        this.ToList.Items.Add(li);\n        this.ToList.Visible = true;\n        this.To.Text = this.GetText(\"ALLUSERS\");\n\n        // hide To text box\n        this.To.Visible = false;\n\n        // hide find users/all users buttons\n        this.FindUsers.Visible = false;\n        this.AllUsers.Visible = false;\n        this.AllBuddies.Visible = false;\n\n        // we need clear button now\n        this.Clear.Visible = true;\n    }\n\n    /// <summary>\n    /// Send PM to all Buddies\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"System.EventArgs\"/> instance containing the event data.</param>\n    protected void AllBuddies_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // try to find users by user name\n        var usersFound = this.Get<IFriends>().ListAll();\n\n        var friendsString = new StringBuilder();\n\n        if (!usersFound.Any())\n        {\n            return;\n        }\n\n        // we found a user(s)\n        usersFound.ForEach(\n            row => friendsString.AppendFormat(\n                \"{0};\",\n                this.PageBoardContext.BoardSettings.EnableDisplayName ? row.DisplayName : row.Name));\n\n        this.To.Text = friendsString.ToString();\n\n        // hide find users/all users buttons\n        this.FindUsers.Visible = false;\n        this.AllUsers.Visible = false;\n        this.AllBuddies.Visible = false;\n\n        // we need clear button now\n        this.Clear.Visible = true;\n    }\n\n    /// <summary>\n    /// Redirect user back to his PM inbox\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Cancel_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages);\n    }\n\n    /// <summary>\n    /// Clears the User List\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Clear_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // clear drop down\n        this.ToList.Items.Clear();\n\n        // hide it and show empty To text box\n        this.ToList.Visible = false;\n        this.To.Text = string.Empty;\n        this.To.Visible = true;\n\n        // show find users and all users (if user is admin)\n        this.FindUsers.Visible = true;\n        this.AllUsers.Visible = this.PageBoardContext.IsAdmin;\n        this.AllBuddies.Visible = this.PageBoardContext.UserHasBuddies && this.PageBoardContext.BoardSettings.EnableBuddyList;\n\n        // clear button is not necessary now\n        this.Clear.Visible = false;\n    }\n\n    /// <summary>\n    /// Creates page links for this page.\n    /// </summary>\n    public override void CreatePageLinks()\n    {\n        // forum index\n        this.PageBoardContext.PageLinks.AddRoot();\n\n        // users control panel\n        this.PageBoardContext.PageLinks.AddLink(this.PageBoardContext.PageUser.DisplayOrUserName(), this.Get<LinkBuilder>().GetLink(ForumPages.MyAccount));\n\n        // post new message\n        this.PageBoardContext.PageLinks.AddLink(this.GetText(\"TITLE\"));\n    }\n\n    /// <summary>\n    /// Find Users\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void FindUsers_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        if (this.To.Text.Length < 2)\n        {\n            // need at least 2 letters of user's name\n            this.PageBoardContext.Notify(this.GetText(\"NEED_MORE_LETTERS\"), MessageTypes.warning);\n            return;\n        }\n\n        // try to find users by user name\n        var usersFound = this.Get<IUserDisplayName>().FindUserContainsName(this.To.Text.Trim()).Where(\n            u => !u.Block.BlockPMs && u.UserFlags.IsApproved && u.ID != this.PageBoardContext.PageUserID).ToList();\n\n        if (usersFound.Any())\n        {\n            // we found a user(s)\n            this.ToList.DataSource = usersFound;\n            this.ToList.DataValueField = \"ID\";\n            this.ToList.DataTextField = this.PageBoardContext.BoardSettings.EnableDisplayName ? \"DisplayName\" : \"Name\";\n            this.ToList.DataBind();\n\n            // ToList.SelectedIndex = 0;\n            // hide To text box and show To drop down\n            this.ToList.Visible = true;\n            this.To.Visible = false;\n\n            // find is no more needed\n            this.FindUsers.Visible = false;\n\n            // we need clear button displayed now\n            this.Clear.Visible = true;\n        }\n        else\n        {\n            // user not found\n            this.PageBoardContext.Notify(this.GetText(\"USER_NOTFOUND\"), MessageTypes.danger);\n            return;\n        }\n\n        // re-bind data to the controls\n        this.DataBind();\n    }\n\n    /// <summary>\n    /// Handles the Initialization event of the Page control.\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Page_Init([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        this.editor = ForumEditorHelper.GetCurrentForumEditor();\n\n        this.editor.MaxCharacters = this.PageBoardContext.BoardSettings.MaxPostSize;\n\n        this.EditorLine.Controls.Add(this.editor);\n\n        this.editor.UserCanUpload = this.PageBoardContext.BoardSettings.AllowPrivateMessageAttachments;\n\n        // add editor to the page\n        this.EditorLine.Controls.Add(this.editor);\n    }\n\n    /// <summary>\n    /// Handles the Load event of the Page control.\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Page_Load([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // if user isn't authenticated, redirect him to login page\n        if (this.User == null || this.PageBoardContext.IsGuest)\n        {\n            this.RedirectNoAccess();\n        }\n\n        this.HandleUploadControls();\n\n        // this needs to be done just once, not during post-backs\n        if (this.IsPostBack)\n        {\n            return;\n        }\n\n        // only administrators can send messages to all users\n        this.AllUsers.Visible = this.PageBoardContext.IsAdmin;\n\n        this.AllBuddies.Visible = this.PageBoardContext.UserHasBuddies && this.PageBoardContext.BoardSettings.EnableBuddyList;\n\n        // Is Reply\n        if (this.Get<HttpRequestBase>().QueryString.Exists(\"p\"))\n        {\n            // PM is a reply or quoted reply (isQuoting)\n            // to the given message id \"p\"\n            var isQuoting = this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"q\") == \"1\";\n\n            var isReport = this.Get<HttpRequestBase>().QueryString.Exists(\"report\");\n\n            // get quoted message\n            this.ReplyMessage =\n                this.GetRepository<PMessage>().GetMessage(\n                    this.Get<LinkBuilder>().StringToIntOrRedirect(this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"p\")));\n\n            // there is such a message\n            if (this.ReplyMessage == null)\n            {\n                return;\n            }\n\n            // get message sender/recipient\n            var toUserId = this.ReplyMessage.ToUserID;\n            var fromUserId = this.ReplyMessage.FromUserID;\n\n            // verify access to this PM\n            if (toUserId != this.PageBoardContext.PageUserID && fromUserId != this.PageBoardContext.PageUserID)\n            {\n                this.Get<LinkBuilder>().AccessDenied();\n            }\n\n            // handle subject\n            var subject = HtmlHelper.StripHtml(this.ReplyMessage.Subject);\n            if (!subject.StartsWith(\"Re: \"))\n            {\n                subject = $\"Re: {subject}\";\n            }\n\n            this.PmSubjectTextBox.Text = subject;\n\n            var displayName = this.Get<IUserDisplayName>().GetNameById(fromUserId);\n\n            // set \"To\" user and disable changing...\n            this.To.Text = displayName;\n            this.To.Enabled = false;\n            this.FindUsers.Visible = false;\n            this.AllUsers.Visible = false;\n            this.AllBuddies.Visible = false;\n\n            if (!isQuoting)\n            {\n                return;\n            }\n\n            // PM is a quoted reply\n            var body = this.ReplyMessage.Body;\n\n            if (this.PageBoardContext.BoardSettings.RemoveNestedQuotes)\n            {\n                body = this.Get<IFormatMessage>().RemoveNestedQuotes(body);\n            }\n\n            // Ensure quoted replies have bad words removed from them\n            body = this.Get<IBadWordReplace>().Replace(body);\n\n            // Quote the original message\n            body = $\"[QUOTE={displayName}]{body}[/QUOTE]\";\n\n            // we don't want any whitespaces at the beginning of message\n            this.editor.Text = body.TrimStart();\n\n            if (!isReport)\n            {\n                return;\n            }\n\n            var hostUser = this.GetRepository<User>().Get(u => u.BoardID == this.PageBoardContext.PageBoardID && (u.Flags & 1) == 1).FirstOrDefault();\n\n            if (hostUser != null)\n            {\n                this.To.Text = hostUser.DisplayOrUserName();\n\n                this.PmSubjectTextBox.Text = this.GetTextFormatted(\"REPORT_SUBJECT\", displayName);\n\n                var bodyReport = $\"[QUOTE={displayName}]{this.ReplyMessage.Body}[/QUOTE]\";\n\n                // Quote the original message\n                bodyReport = this.GetTextFormatted(\"REPORT_BODY\", bodyReport);\n\n                // we don't want any whitespaces at the beginning of message\n                this.editor.Text = bodyReport.TrimStart();\n            }\n            else\n            {\n                this.Get<LinkBuilder>().AccessDenied();\n            }\n        }\n        else if (this.Get<HttpRequestBase>().QueryString.Exists(\"u\")\n                 && this.Get<HttpRequestBase>().QueryString.Exists(\"r\"))\n        {\n            // PM is being send as a quoted reply to a reported post\n            // We check here if the user have access to the option\n            if (!this.PageBoardContext.IsModeratorInAnyForum && !this.PageBoardContext.IsForumModerator)\n            {\n                return;\n            }\n\n            // get quoted message\n            var reporter =\n                this.GetRepository<User>().MessageReporter(\n                        this.Get<LinkBuilder>().StringToIntOrRedirect(\n                            this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"r\")),\n                        this.Get<LinkBuilder>().StringToIntOrRedirect(\n                            this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"u\")))\n                    .FirstOrDefault();\n\n            // there is such a message\n            // message info should be always returned as 1 row\n            if (reporter == null)\n            {\n                return;\n            }\n\n            // handle subject\n            this.PmSubjectTextBox.Text = this.GetText(\"REPORTED_SUBJECT\");\n\n            var displayName =\n                this.Get<IUserDisplayName>().GetNameById(reporter.Item1.ID);\n\n            // set \"To\" user and disable changing...\n            this.To.Text = displayName;\n            this.To.Enabled = false;\n            this.FindUsers.Visible = false;\n            this.AllUsers.Visible = false;\n            this.AllBuddies.Visible = false;\n\n            // Parse content with delimiter '|'\n            var quoteList = reporter.Item2.ReportText.Split('|');\n\n            // Quoted replies should have bad words in them\n            // Reply to report PM is always a quoted reply\n            // Quote the original message in a cycle\n            for (var i = 0; i < quoteList.Length; i++)\n            {\n                // Add quote codes\n                quoteList[i] = $\"[QUOTE={displayName}]{quoteList[i]}[/QUOTE]\\r\\n\";\n\n                // Replace DateTime delimiter '??' by ': '\n                // we don't want any whitespaces at the beginning of message\n                this.editor.Text = quoteList[i].Replace(\"??\", \": \") + this.editor.Text.TrimStart();\n            }\n        }\n        else if (this.Get<HttpRequestBase>().QueryString.Exists(\"u\"))\n        {\n            // find user\n            var foundUser =\n                this.GetRepository<User>().GetById(this.Get<LinkBuilder>().StringToIntOrRedirect(\n                    this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"u\")));\n\n            if (foundUser == null)\n            {\n                return;\n            }\n\n            if (foundUser.ID == this.PageBoardContext.PageUserID)\n            {\n                return;\n            }\n\n            this.To.Text = foundUser.DisplayOrUserName();\n\n            this.To.Enabled = false;\n\n            // hide find user/all users buttons\n            this.FindUsers.Visible = false;\n            this.AllUsers.Visible = false;\n            this.AllBuddies.Visible = false;\n        }\n        else\n        {\n            // Blank PM\n\n            // multi-receiver info is relevant only when sending blank PM\n            if (this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients < 1 || this.PageBoardContext.IsAdmin)\n            {\n                return;\n            }\n\n            // format localized string\n            this.MultiReceiverInfo.Text =\n                $\"{string.Format(this.GetText(\"MAX_RECIPIENT_INFO\"), this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients)} {this.GetText(\"MULTI_RECEIVER_INFO\")}\";\n\n            // display info\n            this.MultiReceiverAlert.Visible = true;\n        }\n    }\n\n    /// <summary>\n    /// Previews the Message Output\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Preview_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // make preview row visible\n        this.PreviewRow.Visible = true;\n\n        this.PreviewMessagePost.MessageFlags.IsHtml = false;\n        this.PreviewMessagePost.MessageFlags.IsBBCode = this.editor.UsesBBCode;\n        this.PreviewMessagePost.Message = this.editor.Text;\n        this.PreviewMessagePost.MessageID = 0;\n\n        if (!this.PageBoardContext.BoardSettings.AllowSignatures)\n        {\n            return;\n        }\n\n        var user = this.GetRepository<User>().GetById(this.PageBoardContext.PageUserID);\n\n        if (user.Signature.IsSet())\n        {\n            this.PreviewMessagePost.Signature = user.Signature;\n        }\n    }\n\n    /// <summary>\n    /// Send Private Message\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\"/> instance containing the event data.</param>\n    protected void Save_Click([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        var replyTo = this.Get<HttpRequestBase>().QueryString.Exists(\"p\")\n                          ? this.Get<HttpRequestBase>().QueryString.GetFirstOrDefaultAsInt(\"p\")\n                          : null;\n\n        // Check if quoted message is Reply\n        if (this.ReplyMessage?.ReplyTo != null)\n        {\n            replyTo = this.ReplyMessage.ReplyTo;\n        }\n\n        if (this.Get<HttpRequestBase>().QueryString.Exists(\"report\"))\n        {\n            replyTo = null;\n        }\n\n        // recipient was set in dropdown\n        if (this.ToList.Visible)\n        {\n            this.To.Text = this.ToList.SelectedItem.Text;\n        }\n\n        if (this.To.Text.Length <= 0)\n        {\n            // recipient is required field\n            this.PageBoardContext.Notify(this.GetText(\"need_to\"), MessageTypes.warning);\n            return;\n        }\n\n        // subject is required\n        if (this.PmSubjectTextBox.Text.Trim().Length <= 0)\n        {\n            this.PageBoardContext.Notify(this.GetText(\"need_subject\"), MessageTypes.warning);\n            return;\n        }\n\n        // message is required\n        if (this.editor.Text.Trim().Length <= 0)\n        {\n            this.PageBoardContext.Notify(this.GetText(\"need_message\"), MessageTypes.warning);\n            return;\n        }\n\n        if (this.ToList.SelectedItem is { Value: \"0\" })\n        {\n            // administrator is sending PMs to all users\n            var body = HtmlHelper.StripHtml(BBCodeHelper.EncodeCodeBlocks(this.editor.Text));\n            var messageFlags = new MessageFlags\n                                   {\n                                       IsHtml = false,\n                                       IsBBCode = this.editor.UsesBBCode\n                                   };\n\n            // test user's PM count\n            if (!this.VerifyMessageAllowed(1, body))\n            {\n                return;\n            }\n\n            this.GetRepository<PMessage>().SendMessage(\n                this.PageBoardContext.PageUserID,\n                0,\n                HtmlHelper.StripHtml(this.PmSubjectTextBox.Text),\n                body,\n                messageFlags.BitValue,\n                replyTo);\n\n            // redirect to outbox (sent items), not control panel\n            this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages, new { v = \"out\" });\n        }\n        else\n        {\n            // remove all abundant whitespaces and separators\n            var rx = new Regex(@\";(\\s|;)*;\");\n            this.To.Text = rx.Replace(this.To.Text, \";\");\n\n            if (this.To.Text.StartsWith(\";\"))\n            {\n                this.To.Text = this.To.Text.Substring(1);\n            }\n\n            if (this.To.Text.EndsWith(\";\"))\n            {\n                this.To.Text = this.To.Text.Substring(0, this.To.Text.Length - 1);\n            }\n\n            rx = new Regex(@\"\\s*;\\s*\");\n            this.To.Text = rx.Replace(this.To.Text, \";\");\n\n            // list of recipients\n            var recipients = new List<string>(this.To.Text.Trim().Split(';'));\n\n            if (recipients.Count > this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients\n                && !this.PageBoardContext.IsAdmin && this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients != 0)\n            {\n                // to many recipients\n                this.PageBoardContext.Notify(\n                    this.GetTextFormatted(\n                        \"TOO_MANY_RECIPIENTS\",\n                        this.PageBoardContext.BoardSettings.PrivateMessageMaxRecipients),\n                    MessageTypes.warning);\n\n                return;\n            }\n\n            if (!this.VerifyMessageAllowed(recipients.Count, this.editor.Text))\n            {\n                return;\n            }\n\n            // list of recipient's ids\n            var recipientIds = new List<int>();\n\n            // get recipients' IDs\n            foreach (var recipient in recipients)\n            {\n                var user = this.Get<IUserDisplayName>().FindUserByName(recipient);\n\n                if (user == null)\n                {\n                    this.PageBoardContext.Notify(\n                        this.GetTextFormatted(\"NO_SUCH_USER\", recipient),\n                        MessageTypes.warning);\n                    return;\n                }\n\n                if (user.UserFlags.IsGuest)\n                {\n                    this.PageBoardContext.Notify(this.GetText(\"NOT_GUEST\"), MessageTypes.danger);\n                    return;\n                }\n\n                // get recipient's ID from the database\n                if (!recipientIds.Contains(user.ID))\n                {\n                    recipientIds.Add(user.ID);\n                }\n\n                var count = this.GetRepository<PMessage>().UserMessageCount(user.ID);\n\n                // test receiving user's PM count\n                if (count.NumberTotal + 1\n                    < count.Allowed || this.PageBoardContext.IsAdmin\n                                    || this.Get<IAspNetUsersHelper>().GetBoardUser(user.ID, this.PageBoardContext.PageBoardID).Item4.IsAdmin > 0)\n                {\n                    continue;\n                }\n\n                // recipient has full PM box\n                this.PageBoardContext.Notify(\n                    this.GetTextFormatted(\"RECIPIENTS_PMBOX_FULL\", recipient),\n                    MessageTypes.danger);\n                return;\n            }\n\n            // send PM to all recipients\n            recipientIds.ForEach(\n                userId =>\n\n                    {\n                        var body = HtmlHelper.StripHtml(BBCodeHelper.EncodeCodeBlocks(this.editor.Text));\n\n                        var messageFlags = new MessageFlags\n                                               {\n                                                   IsHtml = false,\n                                                   IsBBCode = this.editor.UsesBBCode\n                                               };\n\n                        this.GetRepository<PMessage>().SendMessage(\n                            this.PageBoardContext.PageUserID,\n                            userId,\n                            HtmlHelper.StripHtml(this.PmSubjectTextBox.Text),\n                            body,\n                            messageFlags.BitValue,\n                            replyTo);\n\n                        // reset lazy data as he should be informed at once\n                        this.Get<IDataCache>().Remove(string.Format(Constants.Cache.ActiveUserLazyData, userId));\n\n                        if (this.PageBoardContext.BoardSettings.AllowPMEmailNotification)\n                        {\n                            this.Get<ISendNotification>().ToPrivateMessageRecipient(\n                                userId,\n                                HtmlHelper.StripHtml(this.PmSubjectTextBox.Text.Trim()));\n                        }\n                    });\n\n            // redirect to outbox (sent items), not control panel\n            this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages, new { v = \"out\" });\n        }\n    }\n\n    /// <summary>\n    /// Verifies the message allowed.\n    /// </summary>\n    /// <param name=\"count\">The recipients count.</param>\n    /// <param name=\"message\">The message.</param>\n    /// <returns>\n    /// Returns if the user is allowed to send a message or not\n    /// </returns>\n    private bool VerifyMessageAllowed(int count, string message)\n    {\n        // Check if SPAM Message first...\n        if (!this.PageBoardContext.IsAdmin && !this.PageBoardContext.ForumModeratorAccess)\n        {\n            // Check content for spam\n            if (this.Get<ISpamCheck>().CheckPostForSpam(\n                    this.PageBoardContext.IsGuest ? \"Guest\" : this.PageBoardContext.PageUser.DisplayOrUserName(),\n                    this.PageBoardContext.Get<HttpRequestBase>().GetUserRealIPAddress(),\n                    message,\n                    this.PageBoardContext.MembershipUser.Email,\n                    out var spamResult))\n            {\n                var description =\n                    $@\"Spam Check detected possible SPAM ({spamResult}) Original message: [{message}]\n                       posted by PageUser: {(this.PageBoardContext.IsGuest ? \"Guest\" : this.PageBoardContext.PageUser.DisplayOrUserName())}\";\n\n                switch (this.PageBoardContext.BoardSettings.SpamPostHandling)\n                {\n                    case SpamPostHandling.DoNothing:\n                        this.Logger.SpamMessageDetected(\n                            this.PageBoardContext.PageUserID,\n                            description);\n                        break;\n                    case SpamPostHandling.FlagMessageUnapproved:\n                        this.Logger.SpamMessageDetected(\n                            this.PageBoardContext.PageUserID,\n                            $\"{description}, it was flagged as unapproved post\");\n                        break;\n                    case SpamPostHandling.RejectMessage:\n                        this.Logger.SpamMessageDetected(\n                            this.PageBoardContext.PageUserID,\n                            $\"{description}, post was rejected\");\n\n                        this.PageBoardContext.Notify(this.GetText(\"SPAM_MESSAGE\"), MessageTypes.danger);\n\n                        break;\n                    case SpamPostHandling.DeleteBanUser:\n                        this.Logger.SpamMessageDetected(\n                            this.PageBoardContext.PageUserID,\n                            $\"{description}, user was deleted and bannded\");\n\n                        this.Get<IAspNetUsersHelper>().DeleteAndBanUser(\n                            this.PageBoardContext.PageUserID,\n                            this.PageBoardContext.MembershipUser,\n                            this.PageBoardContext.PageUser.IP);\n\n                        break;\n                }\n\n                return false;\n            }\n        }\n\n        ///////////////////////////////\n\n        // test sending user's PM count\n        // get user's name\n        var countInfo = this.GetRepository<PMessage>().UserMessageCount(this.PageBoardContext.PageUserID);\n\n        if (countInfo.NumberTotal + count <= countInfo.Allowed\n            || this.PageBoardContext.IsAdmin)\n        {\n            return true;\n        }\n\n        // user has full PM box\n        this.PageBoardContext.Notify(\n            this.GetTextFormatted(\"OWN_PMBOX_FULL\", countInfo.Allowed),\n            MessageTypes.danger);\n\n        return false;\n    }\n\n    /// <summary>\n    /// Handles the upload controls.\n    /// </summary>\n    private void HandleUploadControls()\n    {\n        this.editor.UserCanUpload = this.PageBoardContext.UploadAccess;\n        this.UploadDialog.Visible = this.PageBoardContext.UploadAccess;\n    }\n}", "<%@ Control Language=\"c#\" AutoEventWireup=\"True\" Inherits=\"YAF.Pages.PrivateMessage\" Codebehind=\"PrivateMessage.ascx.cs\" %>\n\n<%@ Import Namespace=\"YAF.Types.Flags\" %>\n<%@ Import Namespace=\"YAF.Types.Objects.Model\" %>\n<%@ Import Namespace=\"YAF.Types.Interfaces.Services\" %>\n<%@ Import Namespace=\"YAF.Core.Helpers\" %>\n\n<YAF:PageLinks runat=\"server\" ID=\"PageLinks\" />\n\n<div class=\"row\">\n    <div class=\"col-sm-auto\">\n        <YAF:ProfileMenu runat=\"server\"></YAF:ProfileMenu>\n    </div>\n\n    <div class=\"col\">\n        <div class=\"my-3 p-3 bg-body rounded shadow-sm\">\n            <h5><YAF:Icon runat=\"server\"\n                          IconName=\"envelope-open\"\n                          IconType=\"text-secondary\" />\n                <asp:Label runat=\"server\" ID=\"MessageTitle\"></asp:Label></h5>\n        <asp:Repeater ID=\"Inbox\" runat=\"server\" OnItemCommand=\"Inbox_ItemCommand\">\n            <ItemTemplate>\n                <div class=\"<%# string.Format(\"row rounded mb-3 {0}\", (Container.DataItem as PagedPm).FromUserID == this.PageBoardContext.PageUserID ? \"bg-light\" : \"border border-secondary\") %>\">\n                    <div class=\"row\">\n                        <div class=\"col d-flex mt-1 p-0\">\n                            <asp:PlaceHolder runat=\"server\" Visible=\"<%# (Container.DataItem as PagedPm).FromUserID != this.PageBoardContext.PageUserID  %>\">\n                                <div class=\"me-1\">\n                                    <asp:Image runat=\"server\" ID=\"Avatar\"\n                                               CssClass=\"img-avatar-sm mx-2\" ImageUrl=\"<%# this.Get<IAvatars>().GetAvatarUrlForUser(\n                                                                                                             (Container.DataItem as PagedPm).FromUserID,\n                                                                                                             (Container.DataItem as PagedPm).FromAvatar,\n                                                                                                             (Container.DataItem as PagedPm).FromHasAvatarImage) %>\"\n                                               AlternateText=\"<%# this.PageBoardContext.BoardSettings.EnableDisplayName ? (Container.DataItem as PagedPm).FromUserDisplayName : (Container.DataItem as PagedPm).FromUser %>\"/>\n                                </div>\n                                <div>\n                                    <YAF:UserLink ID=\"FromUserLink\" runat=\"server\"\n                                                  ReplaceName=\"<%# this.PageBoardContext.BoardSettings.EnableDisplayName ? (Container.DataItem as PagedPm).FromUserDisplayName : (Container.DataItem as PagedPm).FromUser  %>\"\n                                                  Suspended=\"<%# (Container.DataItem as PagedPm).FromSuspended %>\"\n                                                  Style=\"<%#(Container.DataItem as PagedPm).FromStyle %>\"\n                                                  UserID=\"<%# (Container.DataItem as PagedPm).FromUserID %>\" />\n                                </div>\n                            </asp:PlaceHolder>\n                            <div class=\"<%# (Container.DataItem as PagedPm).FromUserID == this.PageBoardContext.PageUserID ? \"me-auto\" : \"ms-auto\" %>\">\n                                <YAF:Icon runat=\"server\"\n                                          IconName=\"calendar-day\"\n                                          IconType=\"text-secondary\"\n                                          IconNameBadge=\"clock\"\n                                          IconBadgeType=\"text-secondary\" />\n                                <YAF:DisplayDateTime ID=\"CreatedDateTime\" runat=\"server\"\n                                                     DateTime=\"<%# (Container.DataItem as PagedPm).Created %>\" />\n                            </div>\n                            <asp:PlaceHolder runat=\"server\" Visible=\"<%# (Container.DataItem as PagedPm).FromUserID == this.PageBoardContext.PageUserID  %>\">\n                                <div>\n                                    <YAF:UserLink ID=\"UserLink1\" runat=\"server\"\n                                                  ReplaceName=\"<%# this.PageBoardContext.BoardSettings.EnableDisplayName ? (Container.DataItem as PagedPm).FromUserDisplayName : (Container.DataItem as PagedPm).FromUser  %>\"\n                                                  Suspended=\"<%# (Container.DataItem as PagedPm).FromSuspended %>\"\n                                                  Style=\"<%#(Container.DataItem as PagedPm).FromStyle %>\"\n                                                  UserID=\"<%# (Container.DataItem as PagedPm).FromUserID %>\" />\n                                </div>\n                                <div class=\"ms-1\">\n                                    <asp:Image runat=\"server\" ID=\"Image1\"\n                                               CssClass=\"img-avatar-sm\" ImageUrl=\"<%# this.Get<IAvatars>().GetAvatarUrlForUser(\n                                                                                                             (Container.DataItem as PagedPm).FromUserID,\n                                                                                                             (Container.DataItem as PagedPm).FromAvatar,\n                                                                                                             (Container.DataItem as PagedPm).FromHasAvatarImage) %>\"\n                                               AlternateText=\"<%# this.PageBoardContext.BoardSettings.EnableDisplayName ? (Container.DataItem as PagedPm).FromUserDisplayName : (Container.DataItem as PagedPm).FromUser %>\"/>\n                                </div>\n                            </asp:PlaceHolder>\n                        </div>\n                    </div>\n                    <div class=\"row\">\n                            <div class=\"col mt-3\">\n                                <YAF:MessagePost ID=\"Message\" runat=\"server\"\n                                                 MessageFlags=\"<%# new MessageFlags((Container.DataItem as PagedPm).Flags) %>\"\n                                                 Message=\"<%# HtmlHelper.StripHtml((Container.DataItem as PagedPm).Body)%>\"\n                                                 MessageID=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\" />\n                            </div>\n                        </div>\n                        \n                        <div class=\"row justify-content-between align-items-center\">\n                                    <div class=\"col-auto px-0\">\n                                        <YAF:ThemeButton ID=\"ReportMessage\" runat=\"server\"\n                                                         CommandName=\"report\" CommandArgument=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\"\n                                                         TextLocalizedTag=\"REPORTPOST\"\n                                                         TitleLocalizedTag=\"REPORTPOST_TITLE\"\n                                                         DataToggle=\"tooltip\"\n                                                         TextLocalizedPage=\"POSTS\"\n                                                         Type=\"Link\"\n                                                         Icon=\"exclamation-triangle\"\n                                                         IconColor=\"text-danger\"/>\n                                    </div>\n                                    <div class=\"col-auto px-0 d-flex flex-wrap\">\n                                        <YAF:ThemeButton ID=\"ReplyMessage\" runat=\"server\"\n                                                         CommandName=\"reply\" CommandArgument=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\"\n                                                         TextLocalizedTag=\"BUTTON_REPLY\" TitleLocalizedTag=\"BUTTON_REPLY_TT\"\n                                                         DataToggle=\"tooltip\"\n                                                         Type=\"Secondary\"\n                                                         Icon=\"reply\"\n                                                         CssClass=\"me-1 mb-1\"\n                                                         Visible=\"<%# (Container.DataItem as PagedPm).FromUserID != this.PageBoardContext.PageUserID %>\"/>\n                                        <YAF:ThemeButton ID=\"QuoteMessage\" runat=\"server\"\n                                                         CommandName=\"quote\" CommandArgument=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\"\n                                                         TextLocalizedTag=\"BUTTON_QUOTE_TT\" TitleLocalizedTag=\"BUTTON_QUOTE_TT\"\n                                                         DataToggle=\"tooltip\"\n                                                         Type=\"Secondary\"\n                                                         Icon=\"reply\"\n                                                         CssClass=\"me-1 mb-1\"\n                                                         Visible=\"<%# (Container.DataItem as PagedPm).FromUserID != this.PageBoardContext.PageUserID %>\"/>\n                                        <YAF:ThemeButton ID=\"DeleteMessage\" runat=\"server\"\n                                                         CommandName=\"delete\" CommandArgument=\"<%# (Container.DataItem as PagedPm).UserPMessageID %>\"\n                                                         DataToggle=\"tooltip\"\n                                                         TextLocalizedTag=\"BUTTON_DELETE\" TitleLocalizedTag=\"BUTTON_DELETE_TT\"\n                                                         ReturnConfirmTag=\"confirm_deletemessage\"\n                                                         CssClass=\"mb-1\"\n                                                         Type=\"Danger\"\n                                                         Icon=\"trash\"/>\n                                    </div>\n                                </div>\n                    </div>\n            </ItemTemplate>\n        </asp:Repeater>\n        </div>\n    </div>\n</div>", "/* Yet Another Forum.NET\n * Copyright (C) 2003-2005 Bj\u00f8rnar Henden\n * Copyright (C) 2006-2013 Jaben Cargman\n * Copyright (C) 2014-2023 Ingo Herbote\n * https://www.yetanotherforum.net/\n *\n * Licensed to the Apache Software Foundation (ASF) under one\n * or more contributor license agreements.  See the NOTICE file\n * distributed with this work for additional information\n * regarding copyright ownership.  The ASF licenses this file\n * to you under the Apache License, Version 2.0 (the\n * \"License\"); you may not use this file except in compliance\n * with the License.  You may obtain a copy of the License at\n\n * https://www.apache.org/licenses/LICENSE-2.0\n\n * Unless required by applicable law or agreed to in writing,\n * software distributed under the License is distributed on an\n * \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\n * KIND, either express or implied.  See the License for the\n * specific language governing permissions and limitations\n * under the License.\n */\n\nnamespace YAF.Pages;\n\nusing YAF.Types.EventProxies;\nusing YAF.Types.Interfaces.Events;\nusing YAF.Types.Models;\n\n/// <summary>\n/// The Private Message page\n/// </summary>\npublic partial class PrivateMessage : ForumPageRegistered\n{\n    /// <summary>\n    /// Initializes a new instance of the <see cref=\"PrivateMessage\"/> class.\n    /// </summary>\n    public PrivateMessage()\n        : base(\"MESSAGE\", ForumPages.PrivateMessage)\n    {\n    }\n\n    /// <summary>\n    ///   Gets or sets a value indicating whether IsOutbox.\n    /// </summary>\n    protected bool IsOutbox { get; set; }\n\n    /// <summary>\n    /// Handles the ItemCommand event of the Inbox control.\n    /// </summary>\n    /// <param name=\"source\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"RepeaterCommandEventArgs\" /> instance containing the event data.</param>\n    protected void Inbox_ItemCommand([NotNull] object source, [NotNull] RepeaterCommandEventArgs e)\n    {\n        switch (e.CommandName)\n        {\n            case \"delete\":\n                \n                var message = this.GetRepository<UserPMessage>().GetById(e.CommandArgument.ToType<int>());\n                this.GetRepository<UserPMessage>().Delete(message, message.UserID != this.PageBoardContext.PageUserID);\n\n                this.BindData();\n                this.PageBoardContext.Notify(this.GetText(\"msg_deleted\"), MessageTypes.success);\n                this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages);\n                break;\n            case \"reply\":\n                this.Get<LinkBuilder>().Redirect(ForumPages.PostPrivateMessage, new { p = e.CommandArgument, q = 0 });\n                break;\n            case \"report\":\n                this.Get<LinkBuilder>().Redirect(ForumPages.PostPrivateMessage, new { p = e.CommandArgument, q = 1, report = 1 });\n                break;\n            case \"quote\":\n                this.Get<LinkBuilder>().Redirect(ForumPages.PostPrivateMessage, new { p = e.CommandArgument, q = 1 });\n                break;\n        }\n    }\n\n    /// <summary>\n    /// Handles the Load event of the Page control.\n    /// </summary>\n    /// <param name=\"sender\">The source of the event.</param>\n    /// <param name=\"e\">The <see cref=\"EventArgs\" /> instance containing the event data.</param>\n    protected void Page_Load([NotNull] object sender, [NotNull] EventArgs e)\n    {\n        // check if this feature is disabled\n        if (!this.PageBoardContext.BoardSettings.AllowPrivateMessages)\n        {\n            this.Get<LinkBuilder>().RedirectInfoPage(InfoMessage.Disabled);\n        }\n\n        if (!this.Get<HttpRequestBase>().QueryString.Exists(\"pm\"))\n        {\n            this.Get<LinkBuilder>().AccessDenied();\n        }\n\n        if (this.IsPostBack)\n        {\n            return;\n        }\n\n        // handle custom YafBBCode javascript or CSS...\n        this.Get<IBBCode>().RegisterCustomBBCodePageElements(this.Page, this.GetType());\n\n        this.BindData();\n    }\n\n    /// <summary>\n    /// Create the Page links.\n    /// </summary>\n    public override void CreatePageLinks()\n    {\n        this.PageBoardContext.PageLinks.AddRoot();\n        this.PageBoardContext.PageLinks.AddLink(this.PageBoardContext.PageUser.DisplayOrUserName(), this.Get<LinkBuilder>().GetLink(ForumPages.MyAccount));\n    }\n\n    /// <summary>\n    /// Binds the data.\n    /// </summary>\n    private void BindData()\n    {\n        var messageId =\n            this.Get<LinkBuilder>().StringToIntOrRedirect(this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"pm\"));\n\n        var messages = this.GetRepository<PMessage>().List(messageId, true);\n\n        if (!messages.NullOrEmpty())\n        {\n            messages.ForEach(\n                m => this.GetRepository<UserPMessage>().MarkAsRead(m.PMessageID, new PMessageFlags(m.Flags)));\n\n            var message = messages.FirstOrDefault();\n\n            this.SetMessageView(message.FromUserID, message.ToUserID, message.IsInOutbox);\n\n            // get the return link to the pm listing\n            if (this.IsOutbox)\n            {\n                this.PageBoardContext.PageLinks.AddLink(\n                    this.GetText(\"SENTITEMS\"),\n                    this.Get<LinkBuilder>().GetLink(ForumPages.MyMessages, new { v = \"out\" }));\n            }\n            else\n            {\n                this.PageBoardContext.PageLinks.AddLink(this.GetText(\"INBOX\"), this.Get<LinkBuilder>().GetLink(ForumPages.MyMessages));\n            }\n\n            var subject = HtmlHelper.StripHtml(message.Subject);\n\n            this.PageBoardContext.PageLinks.AddLink(subject);\n            this.MessageTitle.Text = subject;\n\n            this.Inbox.DataSource = messages;\n        }\n        else\n        {\n            this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages);\n        }\n\n        this.DataBind();\n\n        if (this.IsOutbox)\n        {\n            return;\n        }\n\n        this.Get<IRaiseEvent>().Raise(new UpdateUserPrivateMessageEvent(this.PageBoardContext.PageUserID, messageId));\n    }\n\n    /// <summary>\n    /// Sets the IsOutbox property as appropriate for this private message.\n    /// </summary>\n    /// <param name=\"fromUserId\">\n    /// The from User Id.\n    /// </param>\n    /// <param name=\"toUserId\">\n    /// The to User Id.\n    /// </param>\n    /// <param name=\"messageIsInOutbox\">\n    /// Indicating whether the message is in the sender's outbox\n    /// </param>\n    private void SetMessageView(\n        [NotNull] int fromUserId,\n        [NotNull] int toUserId,\n        bool messageIsInOutbox)\n    {\n        var isCurrentUserFrom = fromUserId.Equals(this.PageBoardContext.PageUserID);\n        var isCurrentUserTo = toUserId.Equals(this.PageBoardContext.PageUserID);\n\n        // check if it's the same user...\n        if (isCurrentUserFrom && isCurrentUserTo)\n        {\n            // it is... handle the view based on the query string passed\n            this.IsOutbox = this.Get<HttpRequestBase>().QueryString.GetFirstOrDefault(\"v\") == \"out\";\n\n            // see if the message got deleted, if so, redirect to their outbox/archive\n            if (this.IsOutbox && !messageIsInOutbox)\n            {\n                this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages, new { v = \"out\" });\n            }\n        }\n        else if (isCurrentUserFrom)\n        {\n            // see if it's been deleted by the from user...\n            if (!messageIsInOutbox)\n            {\n                // deleted for this user, redirect...\n                this.Get<LinkBuilder>().Redirect(ForumPages.MyMessages, new { v = \"out\" });\n            }\n            else\n            {\n                // nope\n                this.IsOutbox = true;\n            }\n        }\n        else if (isCurrentUserTo)\n        {\n            // get the status for the receiver\n            this.IsOutbox = false;\n        }\n        else\n        {\n            this.Get<LinkBuilder>().AccessDenied();\n        }\n    }\n}"], "filenames": ["yafsrc/YetAnotherForum.NET/Pages/PostPrivateMessage.ascx.cs", "yafsrc/YetAnotherForum.NET/Pages/PrivateMessage.ascx", "yafsrc/YetAnotherForum.NET/Pages/PrivateMessage.ascx.cs"], "buggy_code_start_loc": [308, 5, 148], "buggy_code_end_loc": [691, 75, 150], "fixing_code_start_loc": [308, 6, 148], "fixing_code_end_loc": [691, 76, 152], "type": "CWE-79", "message": "A vulnerability, which was classified as problematic, has been found in YAFNET up to 3.1.10. This issue affects some unknown processing of the file /forum/PostPrivateMessage of the component Private Message Handler. The manipulation of the argument subject/message leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.1.11 is able to address this issue. The name of the patch is 2237a9d552e258a43570bb478a92a5505e7c8797. It is recommended to upgrade the affected component. The identifier VDB-219665 was assigned to this vulnerability.", "other": {"cve": {"id": "CVE-2023-0549", "sourceIdentifier": "cna@vuldb.com", "published": "2023-01-27T19:15:10.457", "lastModified": "2023-02-06T19:30:52.323", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A vulnerability, which was classified as problematic, has been found in YAFNET up to 3.1.10. This issue affects some unknown processing of the file /forum/PostPrivateMessage of the component Private Message Handler. The manipulation of the argument subject/message leads to cross site scripting. The attack may be initiated remotely. The exploit has been disclosed to the public and may be used. Upgrading to version 3.1.11 is able to address this issue. The name of the patch is 2237a9d552e258a43570bb478a92a5505e7c8797. It is recommended to upgrade the affected component. The identifier VDB-219665 was assigned to this vulnerability."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:L/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 5.4, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.3, "impactScore": 2.7}], "cvssMetricV30": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:L/UI:R/S:U/C:N/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "LOW", "userInteraction": "REQUIRED", "scope": "UNCHANGED", "confidentialityImpact": "NONE", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 3.5, "baseSeverity": "LOW"}, "exploitabilityScore": 2.1, "impactScore": 1.4}], "cvssMetricV2": [{"source": "cna@vuldb.com", "type": "Secondary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:L/Au:S/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "LOW", "authentication": "SINGLE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.0}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.0, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "cna@vuldb.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:yetanotherforum:yaf.net:*:*:*:*:*:*:*:*", "versionStartIncluding": "3.1.0", "versionEndIncluding": "3.1.10", "matchCriteriaId": "9FB3B45F-7037-4A0A-AD2D-D7BD4D79B196"}]}]}], "references": [{"url": "https://drive.google.com/drive/folders/1ct6Tp_cnsYO8L_JSvlBCf_Ae7KW3JAcD?usp=sharing", "source": "cna@vuldb.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://github.com/YAFNET/YAFNET/commit/2237a9d552e258a43570bb478a92a5505e7c8797", "source": "cna@vuldb.com", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/YAFNET/YAFNET/releases/tag/v3.1.11", "source": "cna@vuldb.com", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://github.com/YAFNET/YAFNET/security/advisories/GHSA-4hwx-678w-9cp5", "source": "cna@vuldb.com", "tags": ["Exploit", "Third Party Advisory"]}, {"url": "https://vuldb.com/?ctiid.219665", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}, {"url": "https://vuldb.com/?id.219665", "source": "cna@vuldb.com", "tags": ["Third Party Advisory"]}]}, "github_commit_url": "https://github.com/YAFNET/YAFNET/commit/2237a9d552e258a43570bb478a92a5505e7c8797"}}