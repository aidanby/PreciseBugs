{"buggy_code": ["<?php\n/**\n * Linked custom fields plugin for MantisBT\n *\n * Copyright (c) 2011 Robert Munteanu (robert@lmn.ro)\n * Copyright (c) 2018, 2022 Damien Regad\n *\n * Linked custom fields for MantisBT is free software:\n * you can redistribute it and/or modify it under the terms of the GNU\n * General Public License as published by the Free Software Foundation,\n * either version 2 of the License, or (at your option) any later version.\n *\n * Linked custom fields plugin for MantisBT is distributed in the hope\n * that it will be useful, but WITHOUT ANY WARRANTY; without even the\n * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Linked custom fields plugin for MantisBT.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nclass LinkedCustomFieldsDao {\n\n\t/**\n\t * Replaces existing custom field link values with the current ones.\n\t *\n\t * Note that the link will be removed if there are no mappings defined.\n\t *\n\t * @param int $p_source_field_id\n\t * @param int $p_target_field_id\n\t * @param array $p_value_mappings map of source field value to target field value(s)\n\t */\n\tstatic function replaceValues( $p_source_field_id, $p_target_field_id, $p_value_mappings ) {\n\n\t\t$t_data_table = plugin_table( 'data' );\n\t\t$t_query = \"DELETE FROM \" . $t_data_table . \" WHERE custom_field_id = \" . db_param();\n\n\t\tdb_query( $t_query, array( $p_source_field_id ) ) ;\n\n\t\t$t_insert_query = \"INSERT INTO \" . $t_data_table . \"\n\t\t\t(custom_field_id, custom_field_value_order, custom_field_value, target_field_id, target_field_values)\n\t\t\tVALUES ( \" . db_param() .\", \" . db_param().\", \" . db_param().\", \". db_param().\", \" .db_param().\" )\";\n\n\t\t$t_idx = 0 ;\n\n\t\tforeach( $p_value_mappings as $t_key => $t_value ) {\n\t\t\tdb_query($t_insert_query, array( $p_source_field_id, $t_idx, $t_key, $p_target_field_id, implode( '|', $t_value ) ) );\n\t\t\t$t_idx++;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve the Target custom field's Id\n\t *\n\t * @param int $p_source_field_id\n\t * @return NULL|int the target field id or null if no link exists\n\t */\n\tstatic function getLinkedFieldId( $p_source_field_id ) {\n\n\t\t$t_query = \"SELECT target_field_id FROM \" . plugin_table( 'data' ) . \" WHERE custom_field_id = \" . db_param();\n\n\t\t$t_result = db_query( $t_query, array( $p_source_field_id ) );\n\n\t\tif( 0 == db_num_rows( $t_result ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$t_array = db_fetch_array( $t_result );\n\t\treturn $t_array['target_field_id'];\n\t}\n\n\t/**\n\t * Retrieve the values mappings between the source and target fields\n\t *\n\t * @param int $p_source_field_id\n\t * @return array Structure of each row: SourceCF value => [TargetCF values]\n\t */\n\tstatic function getLinkedValuesMap( $p_source_field_id ) {\n\n\t\t$t_query = \"SELECT custom_field_value, target_field_values FROM \" . plugin_table( 'data' ) .\n\t\t\t\t\t\" WHERE custom_field_id=\".db_param() .\" ORDER BY custom_field_value_order\" ;\n\t\t$t_result = db_query( $t_query, array( $p_source_field_id ) );\n\t\tif( 0 == db_num_rows( $t_result ) ) {\n\t\t\treturn array();\n\t\t}\n\n\t\t$t_map = array();\n\t\twhile( $t_row = db_fetch_array( $t_result ) ) {\n\t\t\t$t_source_value = $t_row['custom_field_value'];\n\t\t\t$t_target_values_imploded = $t_row['target_field_values'];\n\t\t\t$t_map[$t_source_value] = explode( '|', $t_target_values_imploded );\n\t\t}\n\n\t\treturn $t_map;\n\t}\n} \n\n\nclass JavascriptUtils {\n\n\tconst LOG_DEBUG = 1;\n\tconst LOG_INFO = 2;\n\tconst LOG_WARN = 3;\n\tconst LOG_ERROR = 4;\n\n\tstatic function toJSArray( $p_array ) {\n\n\t\t$t_field_values_js = '[ ';\n\n\t\tforeach( $p_array as $t_custom_field_value ) {\n\t\t\t$t_field_values_js .= '\"'.string_attribute( $t_custom_field_value ).'\" ,';\n\t\t}\n\n\t\t$t_field_values_js = rtrim( $t_field_values_js, ',' );\n\t\t$t_field_values_js .= ']';\n\n\t\treturn $t_field_values_js;\n\t}\n\n\tstatic function consoleLog( $p_message, $p_level = self::LOG_INFO ) {\n\n\t\t$t_method = false;\n\t\tswitch( $p_level ) {\n\t\t\tcase self::LOG_DEBUG:\n\t\t\t\t$t_method = 'debug';\n\t\t\t\tbreak;\n\n\t\t\tcase self::LOG_INFO:\n\t\t\t\t$t_method = 'info';\n\t\t\t\tbreak;\n\n\t\t\tcase self::LOG_WARN:\n\t\t\t\t$t_method = 'warn';\n\t\t\t\tbreak;\n\n\t\t\tcase self::LOG_ERROR:\n\t\t\t\t$t_method = 'error';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif( $t_method ) {\n\t\t\treturn 'if( console && console.' . $t_method . ' ) console.'\n\t\t\t\t. $t_method . '( \"' . $p_message . '\" );' . \"\\n\";\n\t\t}\n\t\treturn '';\n\t}\n}\n"], "fixing_code": ["<?php\n/**\n * Linked custom fields plugin for MantisBT\n *\n * Copyright (c) 2011 Robert Munteanu (robert@lmn.ro)\n * Copyright (c) 2018, 2022 Damien Regad\n *\n * Linked custom fields for MantisBT is free software:\n * you can redistribute it and/or modify it under the terms of the GNU\n * General Public License as published by the Free Software Foundation,\n * either version 2 of the License, or (at your option) any later version.\n *\n * Linked custom fields plugin for MantisBT is distributed in the hope\n * that it will be useful, but WITHOUT ANY WARRANTY; without even the\n * implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\n * See the GNU General Public License for more details.\n *\n * You should have received a copy of the GNU General Public License\n * along with Linked custom fields plugin for MantisBT.\n * If not, see <http://www.gnu.org/licenses/>.\n */\n\nclass LinkedCustomFieldsDao {\n\n\t/**\n\t * Replaces existing custom field link values with the current ones.\n\t *\n\t * Note that the link will be removed if there are no mappings defined.\n\t *\n\t * @param int $p_source_field_id\n\t * @param int $p_target_field_id\n\t * @param array $p_value_mappings map of source field value to target field value(s)\n\t */\n\tstatic function replaceValues( $p_source_field_id, $p_target_field_id, $p_value_mappings ) {\n\n\t\t$t_data_table = plugin_table( 'data' );\n\t\t$t_query = \"DELETE FROM \" . $t_data_table . \" WHERE custom_field_id = \" . db_param();\n\n\t\tdb_query( $t_query, array( $p_source_field_id ) ) ;\n\n\t\t$t_insert_query = \"INSERT INTO \" . $t_data_table . \"\n\t\t\t(custom_field_id, custom_field_value_order, custom_field_value, target_field_id, target_field_values)\n\t\t\tVALUES ( \" . db_param() .\", \" . db_param().\", \" . db_param().\", \". db_param().\", \" .db_param().\" )\";\n\n\t\t$t_idx = 0 ;\n\n\t\tforeach( $p_value_mappings as $t_key => $t_value ) {\n\t\t\tdb_query($t_insert_query, array( $p_source_field_id, $t_idx, $t_key, $p_target_field_id, implode( '|', $t_value ) ) );\n\t\t\t$t_idx++;\n\t\t}\n\t}\n\n\t/**\n\t * Retrieve the Target custom field's Id\n\t *\n\t * @param int $p_source_field_id\n\t * @return NULL|int the target field id or null if no link exists\n\t */\n\tstatic function getLinkedFieldId( $p_source_field_id ) {\n\n\t\t$t_query = \"SELECT target_field_id FROM \" . plugin_table( 'data' ) . \" WHERE custom_field_id = \" . db_param();\n\n\t\t$t_result = db_query( $t_query, array( $p_source_field_id ) );\n\n\t\tif( 0 == db_num_rows( $t_result ) ) {\n\t\t\treturn null;\n\t\t}\n\n\t\t$t_array = db_fetch_array( $t_result );\n\t\treturn $t_array['target_field_id'];\n\t}\n\n\t/**\n\t * Retrieve the values mappings between the source and target fields\n\t *\n\t * @param int $p_source_field_id\n\t * @return array Structure of each row: SourceCF value => [TargetCF values]\n\t */\n\tstatic function getLinkedValuesMap( $p_source_field_id ) {\n\n\t\t$t_query = \"SELECT custom_field_value, target_field_values FROM \" . plugin_table( 'data' ) .\n\t\t\t\t\t\" WHERE custom_field_id=\".db_param() .\" ORDER BY custom_field_value_order\" ;\n\t\t$t_result = db_query( $t_query, array( $p_source_field_id ) );\n\t\tif( 0 == db_num_rows( $t_result ) ) {\n\t\t\treturn array();\n\t\t}\n\n\t\t$t_map = array();\n\t\twhile( $t_row = db_fetch_array( $t_result ) ) {\n\t\t\t$t_source_value = $t_row['custom_field_value'];\n\t\t\t$t_target_values_imploded = $t_row['target_field_values'];\n\t\t\t$t_map[$t_source_value] = explode( '|', $t_target_values_imploded );\n\t\t}\n\n\t\treturn $t_map;\n\t}\n} \n\n\nclass JavascriptUtils {\n\n\tconst LOG_DEBUG = 1;\n\tconst LOG_INFO = 2;\n\tconst LOG_WARN = 3;\n\tconst LOG_ERROR = 4;\n\n\tstatic function toJSArray( $p_array ) {\n\t\treturn json_encode($p_array);\n\t}\n\n\tstatic function consoleLog( $p_message, $p_level = self::LOG_INFO ) {\n\n\t\t$t_method = false;\n\t\tswitch( $p_level ) {\n\t\t\tcase self::LOG_DEBUG:\n\t\t\t\t$t_method = 'debug';\n\t\t\t\tbreak;\n\n\t\t\tcase self::LOG_INFO:\n\t\t\t\t$t_method = 'info';\n\t\t\t\tbreak;\n\n\t\t\tcase self::LOG_WARN:\n\t\t\t\t$t_method = 'warn';\n\t\t\t\tbreak;\n\n\t\t\tcase self::LOG_ERROR:\n\t\t\t\t$t_method = 'error';\n\t\t\t\tbreak;\n\t\t}\n\n\t\tif( $t_method ) {\n\t\t\treturn 'if( console && console.' . $t_method . ' ) console.'\n\t\t\t\t. $t_method . '( \"' . $p_message . '\" );' . \"\\n\";\n\t\t}\n\t\treturn '';\n\t}\n}\n"], "filenames": ["LinkedCustomFields.API.php"], "buggy_code_start_loc": [108], "buggy_code_end_loc": [119], "fixing_code_start_loc": [108], "fixing_code_end_loc": [109], "type": "CWE-79", "message": "The LinkedCustomFields plugin for MantisBT allows users to link values between two custom fields, creating linked drop-downs. Prior to version 2.0.1, cross-site scripting in the MantisBT LinkedCustomFields plugin allows Javascript execution, when a crafted Custom Field is linked via the plugin and displayed when reporting a new Issue or editing an existing one. This issue is fixed in version 2.0.1. As a workaround, one may utilize MantisBT's default Content Security Policy, which blocks script execution.", "other": {"cve": {"id": "CVE-2023-49802", "sourceIdentifier": "security-advisories@github.com", "published": "2023-12-11T22:15:06.730", "lastModified": "2023-12-14T16:14:49.267", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "The LinkedCustomFields plugin for MantisBT allows users to link values between two custom fields, creating linked drop-downs. Prior to version 2.0.1, cross-site scripting in the MantisBT LinkedCustomFields plugin allows Javascript execution, when a crafted Custom Field is linked via the plugin and displayed when reporting a new Issue or editing an existing one. This issue is fixed in version 2.0.1. As a workaround, one may utilize MantisBT's default Content Security Policy, which blocks script execution."}, {"lang": "es", "value": "El complemento LinkedCustomFields para MantisBT permite a los usuarios vincular valores entre dos campos personalizados, creando men\u00fas desplegables vinculados. Antes de la versi\u00f3n 2.0.1, cross-site scripting en el complemento MantisBT LinkedCustomFields permit\u00edan la ejecuci\u00f3n de Javascript, cuando un campo personalizado manipulado se vincula a trav\u00e9s del complemento y se muestra al informar un nuevo problema o editar uno existente. Este problema se solucion\u00f3 en la versi\u00f3n 2.0.1. Como workaround, se puede utilizar la Pol\u00edtica de Seguridad de Contenido predeterminada de MantisBT, que bloquea la ejecuci\u00f3n del script."}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "security-advisories@github.com", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:L", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "HIGH", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "LOW", "baseScore": 6.7, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 1.2, "impactScore": 5.5}]}, "weaknesses": [{"source": "security-advisories@github.com", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:mantisbt:linked_custom_fields:*:*:*:*:*:mantisbt:*:*", "versionEndExcluding": "2.0.1", "matchCriteriaId": "0A8DBAA5-48FF-4744-A583-D7CA7A1DAFF1"}]}]}], "references": [{"url": "https://github.com/mantisbt-plugins/LinkedCustomFields/commit/30e5ae751e40d7ae18bfd794fd48671477b3d286", "source": "security-advisories@github.com", "tags": ["Patch"]}, {"url": "https://github.com/mantisbt-plugins/LinkedCustomFields/issues/10", "source": "security-advisories@github.com", "tags": ["Issue Tracking", "Patch"]}, {"url": "https://github.com/mantisbt-plugins/LinkedCustomFields/pull/11", "source": "security-advisories@github.com", "tags": ["Issue Tracking"]}, {"url": "https://github.com/mantisbt-plugins/LinkedCustomFields/security/advisories/GHSA-2f37-9xpx-5hhw", "source": "security-advisories@github.com", "tags": ["Vendor Advisory"]}]}, "github_commit_url": "https://github.com/mantisbt-plugins/LinkedCustomFields/commit/30e5ae751e40d7ae18bfd794fd48671477b3d286"}}