{"buggy_code": ["<?php\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Special;\n\nrequire_once dirname(__DIR__) . \"/common/consts.php\";\nrequire_once dirname(__DIR__) . \"/common/login.php\";\nrequire_once dirname(__DIR__) . \"/common/apps.php\";\nrequire_once dirname(__DIR__) . \"/common/auth.php\";\nrequire_once dirname(__DIR__) . \"/common/users.php\";\n\nuse SpecialPage;\nuse WebRequest;\nuse Html;\nuse Title;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Login;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Apps;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Auth;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Users;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\AppFlags;\n\nclass SpecialScratchOAuth2 extends SpecialPage {\n\tpublic function __construct() {\n\t\tparent::__construct( 'ScratchOAuth2' );\n\t}\n\n\tpublic function execute( $par ) {\n\t\t$this->checkReadOnly();\n\t\t$out = $this->getOutput();\n\t\t$out->setIndexPolicy( 'noindex' );\n\t\tswitch ( $par ) {\n\t\t\tcase 'login':\n\t\t\t\t$this->specialLogin();\n\t\t\t\tbreak;\n\t\t\tcase 'authorize':\n\t\t\t\t$this->specialAuth();\n\t\t\t\tbreak;\n\t\t\tcase 'admins':\n\t\t\t\t$this->showAdmins();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$out->setPageTitle( 'ScratchOAuth2' );\n\t\t\t\t$user_id = SOA2Apps::userID();\n\t\t\t\tif (!$user_id) {\n\t\t\t\t\t$out->redirect( $this->getPageTitle( 'login' )->getLinkURL(), 303 );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$out->addWikiMsg('soa2-login-success');\n\t\t\t\t/*$out->addHTML(\n\t\t\t\t\t\"<p>Your Scratch user ID is \"\n\t\t\t\t\t. ($user_id ?: 'not set')\n\t\t\t\t\t. \"</p>\"\n\t\t\t\t);\n\t\t\t\tif ($this->getRequest()->getSession()->exists('soa2_authing')) {\n\t\t\t\t\t$out->addHTML(Html::element('pre', [], var_export(\n\t\t\t\t\t\tSOA2Auth::get( $this->getRequest()->getSessionData('soa2_authing') ), true\n\t\t\t\t\t)));\n\t\t\t\t}*/\n\t\t}\n\t}\n\n\tpublic function specialLogin( $error = null ) {\n\t\t$request = $this->getRequest();\n\t\t$out = $this->getOutput();\n\t\t$out->setPageTitle( wfMessage('soa2-login-title')->escaped() );\n\t\tif ($error) {\n\t\t\t$this->error($error);\n\t\t} else if (\n\t\t\t$request->wasPosted() && $request->getCheck( 'username' )\n\t\t) {\n\t\t\t$username = $request->getVal( 'username', '', );\n\t\t\tif (!preg_match(SOA2_USERNAME_REGEX, $username)) {\n\t\t\t\t$this->specialLogin(\n\t\t\t\t\twfMessage('soa2-invalid-username', $username)->plain()\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ($request->getCheck( 'token' )) {\n\t\t\t\t$this->doLogin( $request );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$this->loginForm( $request );\n\t\t\treturn;\n\t\t}\n\t\t// Step 11\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::label(\n\t\t\twfMessage('soa2-scratch-username')->escaped(),\n\t\t\t'soa2-username-input',\n\t\t)));\n\t\t// Step 12\n\t\t$out->addHTML(Html::rawElement('p', [], Html::input(\n\t\t\t'username',\n\t\t\t$request->getVal('username', ''),\n\t\t\t'text',\n\t\t\t[ 'id' => 'soa2-username-input' ]\n\t\t)));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::submitButton(\n\t\t\twfMessage('soa2-next')->escaped(), []\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function loginForm( WebRequest $request ) { // Step 13\n\t\t$out = $this->getOutput();\n\t\t$username = $request->getVal('username');\n\t\t$codes = SOA2Login::codes( $username );\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::hidden('username', $username));\n\t\t$out->addHTML(Html::hidden('token', $codes['csrf'])); // Step 14\n\t\t$profile = Html::element(\n\t\t\t'a',\n\t\t\t[\n\t\t\t\t'href' => sprintf(SOA2_PROFILE_URL, urlencode($username)),\n\t\t\t\t'target' => '_new'\n\t\t\t],\n\t\t\twfMessage('soa2-your-profile')->plain()\n\t\t);\n\t\t// Step 16\n\t\t$out->addHTML(Html::rawElement(\n\t\t\t'p', [],\n\t\t\twfMessage('soa2-vercode-explanation', $profile)->plain()\n\t\t));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::element(\n\t\t\t'code', [], $codes['code']\n\t\t)));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::submitButton(\n\t\t\twfMessage('soa2-login')->plain(), []\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function doLogin( WebRequest $request ) { // Step 18\n\t\t$success = SOA2Login::login(\n\t\t\t$request->getVal('username'),\n\t\t\t$request->getVal('token')\n\t\t);\n\t\tif (!$success) {\n\t\t\t$this->specialLogin(\n\t\t\t\twfMessage('soa2-login-failed')->plain()\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\t// Step 24\n\t\t$link = $request->getVal(\n\t\t\t'returnto',\n\t\t\t$this->getPageTitle()->getFullURL()\n\t\t);\n\t\t$this->getOutput()->redirect( $link, 303 );\n\t}\n\n\tpublic function error( string $error ) {\n\t\t$this->getOutput()->addHTML(Html::rawElement(\n\t\t\t'p', [],\n\t\t\tHtml::rawElement('span', [ 'class' => 'error' ], $error)\n\t\t));\n\t}\n\n\tpublic function specialAuth( ?string $error = null ) { // Step 8 or 25\n\t\t$user_id = SOA2Apps::userID();\n\t\t$request = $this->getRequest();\n\t\t$session = $request->getSession();\n\t\t$session->persist();\n\t\t$out = $this->getOutput();\n\t\tif (!$user_id) { // Step 9\n\t\t\t// Step 10\n\t\t\t$out->redirect($this->getPageTitle( 'login' )->getLinkURL([\n\t\t\t\t'returnto' => $request->getRequestURL()\n\t\t\t]), 303);\n\t\t\treturn;\n\t\t}\n\t\tif ($error) {\n\t\t\t$this->error($error);\n\t\t} else if ($request->wasPosted()) {\n\t\t\t$this->doAuth( $user_id );\n\t\t\treturn;\n\t\t}\n\t\tif (!($data = SOA2Auth::requestData( $request ))) { // Step 25\n\t\t\t$out->setPageTitle( wfMessage('soa2-auth-invalid-title')->escaped() );\n\t\t\t$out->addWikiMsg('soa2-auth-invalid');\n\t\t\t$out->returnToMain();\n\t\t\treturn;\n\t\t}\n\t\t$app = SOA2Apps::application( $data['client_id'], $data['owner_id'] );\n\t\tif (!SOA2Auth::get($session->get('soa2_authing') ?? '')) {\n\t\t\tSOA2Auth::cancel( $user_id ); // Just to be safe\n\t\t\t// Step 28\n\t\t\t$session->set('soa2_authing', SOA2Auth::start( $data, $user_id ));\n\t\t}\n\t\tif (!$app['app_name']) {\n\t\t\t$name = wfMessage('soa2-unnamed-app')->text();\n\t\t} else if (!($app['flags'] & AppFlags::NAME_APPROVED)) {\n\t\t\t$name = wfMessage('soa2-unmoderated-app')->text();\n\t\t} else {\n\t\t\t$name = $app['app_name'];\n\t\t}\n\t\tif ($app['flags'] & AppFlags::VERIFIED) {\n\t\t\t$check = Html::rawElement('sup', [], Html::element(\n\t\t\t\t'abbr',\n\t\t\t\t[ 'title' => wfMessage('soa2-auth-verified')->text(), 'style' => 'cursor: help' ],\n\t\t\t\thtml_entity_decode('&#x2713;', ENT_HTML5, 'UTF-8')\n\t\t\t));\n\t\t} else {\n\t\t\t$check = '';\n\t\t}\n\t\t$out->setPageTitle( wfMessage('soa2-auth-title', $name, $check)->parse() );\n\t\tif ($app['flags'] & AppFlags::HIDE_OWNER) {\n\t\t\t$out->addWikiMsg('soa2-auth-desc-no-owner', htmlspecialchars($name));\n\t\t} else {\n\t\t\t$out->addWikiMsg(\n\t\t\t\t'soa2-auth-desc',\n\t\t\t\thtmlspecialchars($name),\n\t\t\t\tSOA2Users::getName($data['owner_id'])\n\t\t\t);\n\t\t}\n\t\t$out->addHTML(Html::openElement('ul'));\n\t\tforeach ($data['scopes'] as $scope) {\n\t\t\t$out->addHTML(Html::element(\n\t\t\t\t'li', [], wfMessage('soa2-scope-' . $scope)->text()));\n\t\t}\n\t\t$out->addHTML(Html::closeElement('ul'));\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::hidden('token', $session->getToken()->toString()));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::input(\n\t\t\t'confirm',\n\t\t\twfMessage('confirm')->text(),\n\t\t\t'submit'\n\t\t) . Html::input(\n\t\t\t'cancel',\n\t\t\twfMessage('cancel')->text(),\n\t\t\t'submit'\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function doAuth( int $user_id ) { // Step 30\n\t\t$request = $this->getRequest();\n\t\t$session = $request->getSession();\n\t\tif (!$session->getToken()->match($request->getVal('token'))) {\n\t\t\t$this->specialAuth( wfMessage('sessionfailure')->text() );\n\t\t\treturn;\n\t\t}\n\t\t$out = $this->getOutput();\n\t\tif ($request->getCheck('cancel')) {\n\t\t\tSOA2Auth::cancel( $user_id );\n\t\t\t$session->remove('soa2_authing');\n\t\t\t$out->setPageTitle( wfMessage('soa2-auth-cancelled-title')->escaped() );\n\t\t\t$out->addWikiMsg('soa2-auth-cancelled');\n\t\t\t$out->returnToMain();\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\t!($reqData = SOA2Auth::requestData( $request ))\n\t\t\t// the session data might be null if this is a get-less request\n\t\t\t// or the authing itself might be null if the code has been used\n\t\t\t// or in hopefully rare cases, if the authing has been expired\n\t\t\t// either way the result will be null so this is 2 birds 1 stone\n\t\t\t|| !($dbData = SOA2Auth::get($session->get('soa2_authing') ?? ''))\n\t\t\t|| $reqData['redirect_uri'] != $dbData['redirect_uri']\n\t\t\t|| $reqData['scopes'] != $dbData['scopes']\n\t\t\t|| $reqData['state'] != $dbData['state']\n\t\t\t|| $reqData['client_id'] != $dbData['client_id']\n\t\t) {\n\t\t\tSOA2Auth::cancel( $user_id );\n\t\t\t$session->remove('soa2_authing');\n\t\t\t$this->specialAuth( wfMessage('soa2-auth-maybe-invalid')->text() );\n\t\t\treturn;\n\t\t}\n\t\t// Step 31\n\t\t$uri = $dbData['redirect_uri'] ?: $this->getTitleFor('SOA2Code')->getFullURL();\n\t\t// Step 32\n\t\t$code = $dbData['code'];\n\t\t$state = $dbData['state'];\n\t\t// Step 33\n\t\t$query = http_build_query([\n\t\t\t'code' => $code,\n\t\t\t'state' => $state\n\t\t], null, '&', PHP_QUERY_RFC3986);\n\t\t$uri .= (parse_url($uri, PHP_URL_QUERY) ? '&' : '?') . $query;\n\t\t$out->redirect($uri, 303);\n\t}\n\n\tpublic function showAdmins() {\n\t\tglobal $wgSOA2AdminUsers;\n\t\t$out = $this->getOutput();\n\t\t$out->setPageTitle( wfMessage('soa2-admins-list-title')->escaped() );\n\t\t$out->addWikiMsg('soa2-admins-list');\n\t\t$out->addHTML(Html::openElement('ul'));\n\t\tforeach ($wgSOA2AdminUsers as $user_id) {\n\t\t\t$user_name = SOA2Users::getName( $user_id );\n\t\t\tif (!$user_name) continue;\n\t\t\t$out->addHTML(Html::rawElement(\n\t\t\t\t'li', [], SOA2Users::makeProfileLink( $user_name )));\n\t\t}\n\t\t$out->addHTML(Html::closeElement('ul'));\n\t}\n}"], "fixing_code": ["<?php\nnamespace MediaWiki\\Extension\\ScratchOAuth2\\Special;\n\nrequire_once dirname(__DIR__) . \"/common/consts.php\";\nrequire_once dirname(__DIR__) . \"/common/login.php\";\nrequire_once dirname(__DIR__) . \"/common/apps.php\";\nrequire_once dirname(__DIR__) . \"/common/auth.php\";\nrequire_once dirname(__DIR__) . \"/common/users.php\";\n\nuse SpecialPage;\nuse WebRequest;\nuse Html;\nuse Title;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Login;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Apps;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Auth;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\SOA2Users;\nuse MediaWiki\\Extension\\ScratchOAuth2\\Common\\AppFlags;\n\nclass SpecialScratchOAuth2 extends SpecialPage {\n\tpublic function __construct() {\n\t\tparent::__construct( 'ScratchOAuth2' );\n\t}\n\n\tpublic function execute( $par ) {\n\t\t$this->checkReadOnly();\n\t\t$out = $this->getOutput();\n\t\t$out->setIndexPolicy( 'noindex' );\n\t\tswitch ( $par ) {\n\t\t\tcase 'login':\n\t\t\t\t$this->specialLogin();\n\t\t\t\tbreak;\n\t\t\tcase 'authorize':\n\t\t\t\t$this->specialAuth();\n\t\t\t\tbreak;\n\t\t\tcase 'admins':\n\t\t\t\t$this->showAdmins();\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t\t\t$out->setPageTitle( 'ScratchOAuth2' );\n\t\t\t\t$user_id = SOA2Apps::userID();\n\t\t\t\tif (!$user_id) {\n\t\t\t\t\t$out->redirect( $this->getPageTitle( 'login' )->getLinkURL(), 303 );\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t\t$out->addWikiMsg('soa2-login-success');\n\t\t\t\t/*$out->addHTML(\n\t\t\t\t\t\"<p>Your Scratch user ID is \"\n\t\t\t\t\t. ($user_id ?: 'not set')\n\t\t\t\t\t. \"</p>\"\n\t\t\t\t);\n\t\t\t\tif ($this->getRequest()->getSession()->exists('soa2_authing')) {\n\t\t\t\t\t$out->addHTML(Html::element('pre', [], var_export(\n\t\t\t\t\t\tSOA2Auth::get( $this->getRequest()->getSessionData('soa2_authing') ), true\n\t\t\t\t\t)));\n\t\t\t\t}*/\n\t\t}\n\t}\n\n\tpublic function specialLogin( $error = null ) {\n\t\t$request = $this->getRequest();\n\t\t$out = $this->getOutput();\n\t\t$out->setPageTitle( wfMessage('soa2-login-title')->escaped() );\n\t\tif ($error) {\n\t\t\t$this->error($error);\n\t\t} else if (\n\t\t\t$request->wasPosted() && $request->getCheck( 'username' )\n\t\t) {\n\t\t\t$username = $request->getVal( 'username', '', );\n\t\t\tif (!preg_match(SOA2_USERNAME_REGEX, $username)) {\n\t\t\t\t$this->specialLogin(\n\t\t\t\t\twfMessage('soa2-invalid-username')->plaintextParams($username)->parse()\n\t\t\t\t);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif ($request->getCheck( 'token' )) {\n\t\t\t\t$this->doLogin( $request );\n\t\t\t\treturn;\n\t\t\t}\n\t\t\t$this->loginForm( $request );\n\t\t\treturn;\n\t\t}\n\t\t// Step 11\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::label(\n\t\t\twfMessage('soa2-scratch-username')->escaped(),\n\t\t\t'soa2-username-input',\n\t\t)));\n\t\t// Step 12\n\t\t$out->addHTML(Html::rawElement('p', [], Html::input(\n\t\t\t'username',\n\t\t\t$request->getVal('username', ''),\n\t\t\t'text',\n\t\t\t[ 'id' => 'soa2-username-input' ]\n\t\t)));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::submitButton(\n\t\t\twfMessage('soa2-next')->escaped(), []\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function loginForm( WebRequest $request ) { // Step 13\n\t\t$out = $this->getOutput();\n\t\t$username = $request->getVal('username');\n\t\t$codes = SOA2Login::codes( $username );\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::hidden('username', $username));\n\t\t$out->addHTML(Html::hidden('token', $codes['csrf'])); // Step 14\n\t\t$profile = Html::element(\n\t\t\t'a',\n\t\t\t[\n\t\t\t\t'href' => sprintf(SOA2_PROFILE_URL, urlencode($username)),\n\t\t\t\t'target' => '_new'\n\t\t\t],\n\t\t\twfMessage('soa2-your-profile')->plain()\n\t\t);\n\t\t// Step 16\n\t\t$out->addHTML(Html::rawElement(\n\t\t\t'p', [],\n\t\t\twfMessage('soa2-vercode-explanation', $profile)->plain()\n\t\t));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::element(\n\t\t\t'code', [], $codes['code']\n\t\t)));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::submitButton(\n\t\t\twfMessage('soa2-login')->plain(), []\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function doLogin( WebRequest $request ) { // Step 18\n\t\t$success = SOA2Login::login(\n\t\t\t$request->getVal('username'),\n\t\t\t$request->getVal('token')\n\t\t);\n\t\tif (!$success) {\n\t\t\t$this->specialLogin(\n\t\t\t\twfMessage('soa2-login-failed')->plain()\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\t\t// Step 24\n\t\t$link = $request->getVal(\n\t\t\t'returnto',\n\t\t\t$this->getPageTitle()->getFullURL()\n\t\t);\n\t\t$this->getOutput()->redirect( $link, 303 );\n\t}\n\n\tpublic function error( string $error ) {\n\t\t$this->getOutput()->addHTML(Html::rawElement(\n\t\t\t'p', [],\n\t\t\tHtml::rawElement('span', [ 'class' => 'error' ], $error)\n\t\t));\n\t}\n\n\tpublic function specialAuth( ?string $error = null ) { // Step 8 or 25\n\t\t$user_id = SOA2Apps::userID();\n\t\t$request = $this->getRequest();\n\t\t$session = $request->getSession();\n\t\t$session->persist();\n\t\t$out = $this->getOutput();\n\t\tif (!$user_id) { // Step 9\n\t\t\t// Step 10\n\t\t\t$out->redirect($this->getPageTitle( 'login' )->getLinkURL([\n\t\t\t\t'returnto' => $request->getRequestURL()\n\t\t\t]), 303);\n\t\t\treturn;\n\t\t}\n\t\tif ($error) {\n\t\t\t$this->error($error);\n\t\t} else if ($request->wasPosted()) {\n\t\t\t$this->doAuth( $user_id );\n\t\t\treturn;\n\t\t}\n\t\tif (!($data = SOA2Auth::requestData( $request ))) { // Step 25\n\t\t\t$out->setPageTitle( wfMessage('soa2-auth-invalid-title')->escaped() );\n\t\t\t$out->addWikiMsg('soa2-auth-invalid');\n\t\t\t$out->returnToMain();\n\t\t\treturn;\n\t\t}\n\t\t$app = SOA2Apps::application( $data['client_id'], $data['owner_id'] );\n\t\tif (!SOA2Auth::get($session->get('soa2_authing') ?? '')) {\n\t\t\tSOA2Auth::cancel( $user_id ); // Just to be safe\n\t\t\t// Step 28\n\t\t\t$session->set('soa2_authing', SOA2Auth::start( $data, $user_id ));\n\t\t}\n\t\tif (!$app['app_name']) {\n\t\t\t$name = wfMessage('soa2-unnamed-app')->text();\n\t\t} else if (!($app['flags'] & AppFlags::NAME_APPROVED)) {\n\t\t\t$name = wfMessage('soa2-unmoderated-app')->text();\n\t\t} else {\n\t\t\t$name = $app['app_name'];\n\t\t}\n\t\tif ($app['flags'] & AppFlags::VERIFIED) {\n\t\t\t$check = Html::rawElement('sup', [], Html::element(\n\t\t\t\t'abbr',\n\t\t\t\t[ 'title' => wfMessage('soa2-auth-verified')->text(), 'style' => 'cursor: help' ],\n\t\t\t\thtml_entity_decode('&#x2713;', ENT_HTML5, 'UTF-8')\n\t\t\t));\n\t\t} else {\n\t\t\t$check = '';\n\t\t}\n\t\t$out->setPageTitle( wfMessage('soa2-auth-title', $name, $check)->parse() );\n\t\tif ($app['flags'] & AppFlags::HIDE_OWNER) {\n\t\t\t$out->addWikiMsg('soa2-auth-desc-no-owner', htmlspecialchars($name));\n\t\t} else {\n\t\t\t$out->addWikiMsg(\n\t\t\t\t'soa2-auth-desc',\n\t\t\t\thtmlspecialchars($name),\n\t\t\t\tSOA2Users::getName($data['owner_id'])\n\t\t\t);\n\t\t}\n\t\t$out->addHTML(Html::openElement('ul'));\n\t\tforeach ($data['scopes'] as $scope) {\n\t\t\t$out->addHTML(Html::element(\n\t\t\t\t'li', [], wfMessage('soa2-scope-' . $scope)->text()));\n\t\t}\n\t\t$out->addHTML(Html::closeElement('ul'));\n\t\t$out->addHTML(Html::openElement('form', [ 'method' => 'POST' ]));\n\t\t$out->addHTML(Html::hidden('token', $session->getToken()->toString()));\n\t\t$out->addHTML(Html::rawElement('p', [], Html::input(\n\t\t\t'confirm',\n\t\t\twfMessage('confirm')->text(),\n\t\t\t'submit'\n\t\t) . Html::input(\n\t\t\t'cancel',\n\t\t\twfMessage('cancel')->text(),\n\t\t\t'submit'\n\t\t)));\n\t\t$out->addHTML(Html::closeElement('form'));\n\t}\n\n\tpublic function doAuth( int $user_id ) { // Step 30\n\t\t$request = $this->getRequest();\n\t\t$session = $request->getSession();\n\t\tif (!$session->getToken()->match($request->getVal('token'))) {\n\t\t\t$this->specialAuth( wfMessage('sessionfailure')->text() );\n\t\t\treturn;\n\t\t}\n\t\t$out = $this->getOutput();\n\t\tif ($request->getCheck('cancel')) {\n\t\t\tSOA2Auth::cancel( $user_id );\n\t\t\t$session->remove('soa2_authing');\n\t\t\t$out->setPageTitle( wfMessage('soa2-auth-cancelled-title')->escaped() );\n\t\t\t$out->addWikiMsg('soa2-auth-cancelled');\n\t\t\t$out->returnToMain();\n\t\t\treturn;\n\t\t}\n\t\tif (\n\t\t\t!($reqData = SOA2Auth::requestData( $request ))\n\t\t\t// the session data might be null if this is a get-less request\n\t\t\t// or the authing itself might be null if the code has been used\n\t\t\t// or in hopefully rare cases, if the authing has been expired\n\t\t\t// either way the result will be null so this is 2 birds 1 stone\n\t\t\t|| !($dbData = SOA2Auth::get($session->get('soa2_authing') ?? ''))\n\t\t\t|| $reqData['redirect_uri'] != $dbData['redirect_uri']\n\t\t\t|| $reqData['scopes'] != $dbData['scopes']\n\t\t\t|| $reqData['state'] != $dbData['state']\n\t\t\t|| $reqData['client_id'] != $dbData['client_id']\n\t\t) {\n\t\t\tSOA2Auth::cancel( $user_id );\n\t\t\t$session->remove('soa2_authing');\n\t\t\t$this->specialAuth( wfMessage('soa2-auth-maybe-invalid')->text() );\n\t\t\treturn;\n\t\t}\n\t\t// Step 31\n\t\t$uri = $dbData['redirect_uri'] ?: $this->getTitleFor('SOA2Code')->getFullURL();\n\t\t// Step 32\n\t\t$code = $dbData['code'];\n\t\t$state = $dbData['state'];\n\t\t// Step 33\n\t\t$query = http_build_query([\n\t\t\t'code' => $code,\n\t\t\t'state' => $state\n\t\t], null, '&', PHP_QUERY_RFC3986);\n\t\t$uri .= (parse_url($uri, PHP_URL_QUERY) ? '&' : '?') . $query;\n\t\t$out->redirect($uri, 303);\n\t}\n\n\tpublic function showAdmins() {\n\t\tglobal $wgSOA2AdminUsers;\n\t\t$out = $this->getOutput();\n\t\t$out->setPageTitle( wfMessage('soa2-admins-list-title')->escaped() );\n\t\t$out->addWikiMsg('soa2-admins-list');\n\t\t$out->addHTML(Html::openElement('ul'));\n\t\tforeach ($wgSOA2AdminUsers as $user_id) {\n\t\t\t$user_name = SOA2Users::getName( $user_id );\n\t\t\tif (!$user_name) continue;\n\t\t\t$out->addHTML(Html::rawElement(\n\t\t\t\t'li', [], SOA2Users::makeProfileLink( $user_name )));\n\t\t}\n\t\t$out->addHTML(Html::closeElement('ul'));\n\t}\n}"], "filenames": ["includes/special/SpecialScratchOAuth2.php"], "buggy_code_start_loc": [72], "buggy_code_end_loc": [73], "fixing_code_start_loc": [72], "fixing_code_end_loc": [73], "type": "CWE-79", "message": "A reflected cross-site scripting (XSS) in ScratchOAuth2 before commit 1603f04e44ef67dde6ccffe866d2dca16defb293 allows attackers to execute arbitrary web scripts or HTML via a crafted POST request.", "other": {"cve": {"id": "CVE-2021-46251", "sourceIdentifier": "cve@mitre.org", "published": "2022-02-15T23:15:08.043", "lastModified": "2022-02-24T15:04:07.383", "vulnStatus": "Analyzed", "descriptions": [{"lang": "en", "value": "A reflected cross-site scripting (XSS) in ScratchOAuth2 before commit 1603f04e44ef67dde6ccffe866d2dca16defb293 allows attackers to execute arbitrary web scripts or HTML via a crafted POST request."}, {"lang": "es", "value": "Una vulnerabilidad de tipo cross-site scripting (XSS) reflejado en ScratchOAuth2 versiones anteriores al commit 1603f04e44ef67dde6ccffe866d2dca16defb293, permite a atacantes ejecutar scripts web o HTML arbitrarios por medio de una petici\u00f3n POST dise\u00f1ada"}], "metrics": {"cvssMetricV31": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}, {"source": "cve@mitre.org", "type": "Secondary", "cvssData": {"version": "3.1", "vectorString": "CVSS:3.1/AV:N/AC:L/PR:N/UI:R/S:C/C:L/I:L/A:N", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "REQUIRED", "scope": "CHANGED", "confidentialityImpact": "LOW", "integrityImpact": "LOW", "availabilityImpact": "NONE", "baseScore": 6.1, "baseSeverity": "MEDIUM"}, "exploitabilityScore": 2.8, "impactScore": 2.7}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:N/I:P/A:N", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "NONE", "integrityImpact": "PARTIAL", "availabilityImpact": "NONE", "baseScore": 4.3}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 2.9, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": true}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-79"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:scratchoauth2_project:scratchoauth2:*:*:*:*:*:scratch:*:*", "versionEndExcluding": "2021-04-12", "matchCriteriaId": "E55D1FD3-4081-440A-B720-CF5AC45039D5"}]}]}], "references": [{"url": "https://github.com/ScratchVerifier/ScratchOAuth2/commit/1603f04e44ef67dde6ccffe866d2dca16defb293", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}]}, "github_commit_url": "https://github.com/ScratchVerifier/ScratchOAuth2/commit/1603f04e44ef67dde6ccffe866d2dca16defb293"}}