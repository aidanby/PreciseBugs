{"buggy_code": ["/* Copyright (C) 2002-2005 RealVNC Ltd.  All Rights Reserved.\n * Copyright 2014 Pierre Ossman for Cendio AB\n * \n * This is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n * \n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this software; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,\n * USA.\n */\n\n// -=- PixelBuffer.cxx\n//\n// The PixelBuffer class encapsulates the PixelFormat and dimensions\n// of a block of pixel data.\n\n#include <rfb/Exception.h>\n#include <rfb/LogWriter.h>\n#include <rfb/PixelBuffer.h>\n\nusing namespace rfb;\nusing namespace rdr;\n\nstatic LogWriter vlog(\"PixelBuffer\");\n\n\n// -=- Generic pixel buffer class\n\nPixelBuffer::PixelBuffer(const PixelFormat& pf, int w, int h)\n  : format(pf), width_(w), height_(h) {}\nPixelBuffer::PixelBuffer() : width_(0), height_(0) {}\n\nPixelBuffer::~PixelBuffer() {}\n\n\nvoid\nPixelBuffer::getImage(void* imageBuf, const Rect& r, int outStride) const {\n  int inStride;\n  const U8* data = getBuffer(r, &inStride);\n  // We assume that the specified rectangle is pre-clipped to the buffer\n  int bytesPerPixel = format.bpp/8;\n  int inBytesPerRow = inStride * bytesPerPixel;\n  if (!outStride) outStride = r.width();\n  int outBytesPerRow = outStride * bytesPerPixel;\n  int bytesPerMemCpy = r.width() * bytesPerPixel;\n  U8* imageBufPos = (U8*)imageBuf;\n  const U8* end = data + (inBytesPerRow * r.height());\n  while (data < end) {\n    memcpy(imageBufPos, data, bytesPerMemCpy);\n    imageBufPos += outBytesPerRow;\n    data += inBytesPerRow;\n  }\n}\n\nvoid PixelBuffer::getImage(const PixelFormat& pf, void* imageBuf,\n                           const Rect& r, int stride) const\n{\n  const rdr::U8* srcBuffer;\n  int srcStride;\n\n  if (format.equal(pf)) {\n    getImage(imageBuf, r, stride);\n    return;\n  }\n\n  if (stride == 0)\n    stride = r.width();\n\n  srcBuffer = getBuffer(r, &srcStride);\n\n  pf.bufferFromBuffer((U8*)imageBuf, format, srcBuffer, r.width(), r.height(),\n                      stride, srcStride);\n}\n\n// -=- Modifiable generic pixel buffer class\n\nModifiablePixelBuffer::ModifiablePixelBuffer(const PixelFormat& pf,\n                                             int w, int h)\n  : PixelBuffer(pf, w, h)\n{\n}\n\nModifiablePixelBuffer::ModifiablePixelBuffer()\n{\n}\n\nModifiablePixelBuffer::~ModifiablePixelBuffer()\n{\n}\n\nvoid ModifiablePixelBuffer::fillRect(const Rect& r, const void* pix)\n{\n  int stride;\n  U8 *buf;\n  int w, h, b;\n\n  w = r.width();\n  h = r.height();\n  b = format.bpp/8;\n\n  if (h == 0)\n    return;\n\n  buf = getBufferRW(r, &stride);\n\n  if (b == 1) {\n    while (h--) {\n      memset(buf, *(const U8*)pix, w);\n      buf += stride * b;\n    }\n  } else {\n    U8 *start;\n    int w1;\n\n    start = buf;\n\n    w1 = w;\n    while (w1--) {\n      memcpy(buf, pix, b);\n      buf += b;\n    }\n    buf += (stride - w) * b;\n    h--;\n\n    while (h--) {\n      memcpy(buf, start, w * b);\n      buf += stride * b;\n    }\n  }\n\n  commitBufferRW(r);\n}\n\nvoid ModifiablePixelBuffer::imageRect(const Rect& r,\n                                      const void* pixels, int srcStride)\n{\n  int bytesPerPixel = getPF().bpp/8;\n  int destStride;\n  U8* dest = getBufferRW(r, &destStride);\n  int bytesPerDestRow = bytesPerPixel * destStride;\n  if (!srcStride) srcStride = r.width();\n  int bytesPerSrcRow = bytesPerPixel * srcStride;\n  int bytesPerFill = bytesPerPixel * r.width();\n  const U8* src = (const U8*)pixels;\n  U8* end = dest + (bytesPerDestRow * r.height());\n  while (dest < end) {\n    memcpy(dest, src, bytesPerFill);\n    dest += bytesPerDestRow;\n    src += bytesPerSrcRow;\n  }\n  commitBufferRW(r);\n}\n\nvoid ModifiablePixelBuffer::maskRect(const Rect& r,\n                                     const void* pixels, const void* mask_)\n{\n  Rect cr = getRect().intersect(r);\n  if (cr.is_empty()) return;\n  int stride;\n  U8* data = getBufferRW(cr, &stride);\n  U8* mask = (U8*) mask_;\n  int w = cr.width();\n  int h = cr.height();\n  int bpp = getPF().bpp;\n  int pixelStride = r.width();\n  int maskStride = (r.width() + 7) / 8;\n\n  Point offset = Point(cr.tl.x-r.tl.x, cr.tl.y-r.tl.y);\n  mask += offset.y * maskStride;\n  for (int y = 0; y < h; y++) {\n    int cy = offset.y + y;\n    for (int x = 0; x < w; x++) {\n      int cx = offset.x + x;\n      U8* byte = mask + (cx / 8);\n      int bit = 7 - cx % 8;\n      if ((*byte) & (1 << bit)) {\n        switch (bpp) {\n        case 8:\n          ((U8*)data)[y * stride + x] = ((U8*)pixels)[cy * pixelStride + cx];\n          break;\n        case 16:\n          ((U16*)data)[y * stride + x] = ((U16*)pixels)[cy * pixelStride + cx];\n          break;\n        case 32:\n          ((U32*)data)[y * stride + x] = ((U32*)pixels)[cy * pixelStride + cx];\n          break;\n        }\n      }\n    }\n    mask += maskStride;\n  }\n\n  commitBufferRW(cr);\n}\n\nvoid ModifiablePixelBuffer::maskRect(const Rect& r,\n                                     Pixel pixel, const void* mask_)\n{\n  Rect cr = getRect().intersect(r);\n  if (cr.is_empty()) return;\n  int stride;\n  U8* data = getBufferRW(cr, &stride);\n  U8* mask = (U8*) mask_;\n  int w = cr.width();\n  int h = cr.height();\n  int bpp = getPF().bpp;\n  int maskStride = (r.width() + 7) / 8;\n\n  Point offset = Point(cr.tl.x-r.tl.x, cr.tl.y-r.tl.y);\n  mask += offset.y * maskStride;\n  for (int y = 0; y < h; y++) {\n    for (int x = 0; x < w; x++) {\n      int cx = offset.x + x;\n      U8* byte = mask + (cx / 8);\n      int bit = 7 - cx % 8;\n      if ((*byte) & (1 << bit)) {\n        switch (bpp) {\n        case 8:\n          ((U8*)data)[y * stride + x] = pixel;\n          break;\n        case 16:\n          ((U16*)data)[y * stride + x] = pixel;\n          break;\n        case 32:\n          ((U32*)data)[y * stride + x] = pixel;\n          break;\n        }\n      }\n    }\n    mask += maskStride;\n  }\n\n  commitBufferRW(cr);\n}\n\nvoid ModifiablePixelBuffer::copyRect(const Rect &rect,\n                                     const Point &move_by_delta)\n{\n  int srcStride, dstStride;\n  const U8* srcData;\n  U8* dstData;\n\n  Rect drect, srect;\n\n  drect = rect;\n  if (!drect.enclosed_by(getRect())) {\n    vlog.error(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",\n               drect.width(), drect.height(), drect.tl.x, drect.tl.y, width_, height_);\n    drect = drect.intersect(getRect());\n  }\n\n  if (drect.is_empty())\n    return;\n\n  srect = drect.translate(move_by_delta.negate());\n  if (!srect.enclosed_by(getRect())) {\n    vlog.error(\"Source rect %dx%d at %d,%d exceeds framebuffer %dx%d\",\n               srect.width(), srect.height(), srect.tl.x, srect.tl.y, width_, height_);\n    srect = srect.intersect(getRect());\n    // Need to readjust the destination now that the area has changed\n    drect = srect.translate(move_by_delta);\n  }\n\n  if (srect.is_empty())\n    return;\n\n  srcData = getBuffer(srect, &srcStride);\n  dstData = getBufferRW(drect, &dstStride);\n\n  if (move_by_delta.y == 0) {\n    // Possible overlap. Be careful and use memmove().\n    int h = drect.height();\n    while (h--) {\n      memmove(dstData, srcData, drect.width() * format.bpp/8);\n      dstData += dstStride * format.bpp/8;\n      srcData += srcStride * format.bpp/8;\n    }\n  } else if (move_by_delta.y < 0) {\n    // The data shifted upwards. Copy from top to bottom.\n    int h = drect.height();\n    while (h--) {\n      memcpy(dstData, srcData, drect.width() * format.bpp/8);\n      dstData += dstStride * format.bpp/8;\n      srcData += srcStride * format.bpp/8;\n    }\n  } else {\n    // The data shifted downwards. Copy from bottom to top.\n    int h = drect.height();\n    dstData += (h-1) * dstStride * format.bpp/8;\n    srcData += (h-1) * srcStride * format.bpp/8;\n    while (h--) {\n      memcpy(dstData, srcData, drect.width() * format.bpp/8);\n      dstData -= dstStride * format.bpp/8;\n      srcData -= srcStride * format.bpp/8;\n    }\n  }\n\n  commitBufferRW(drect);\n}\n\nvoid ModifiablePixelBuffer::fillRect(const PixelFormat& pf, const Rect &dest,\n                                     const void* pix)\n{\n  rdr::U8 buf[4];\n  format.bufferFromBuffer(buf, pf, (const rdr::U8*)pix, 1);\n  fillRect(dest, buf);\n}\n\nvoid ModifiablePixelBuffer::imageRect(const PixelFormat& pf, const Rect &dest,\n                                      const void* pixels, int stride)\n{\n  rdr::U8* dstBuffer;\n  int dstStride;\n\n  if (stride == 0)\n    stride = dest.width();\n\n  dstBuffer = getBufferRW(dest, &dstStride);\n  format.bufferFromBuffer(dstBuffer, pf, (const rdr::U8*)pixels,\n                          dest.width(), dest.height(),\n                          dstStride, stride);\n  commitBufferRW(dest);\n}\n\n// -=- Simple pixel buffer with a continuous block of memory\n\nFullFramePixelBuffer::FullFramePixelBuffer(const PixelFormat& pf, int w, int h,\n                                           rdr::U8* data_, int stride_)\n  : ModifiablePixelBuffer(pf, w, h), data(data_), stride(stride_)\n{\n}\n\nFullFramePixelBuffer::FullFramePixelBuffer() : data(0) {}\n\nFullFramePixelBuffer::~FullFramePixelBuffer() {}\n\nrdr::U8* FullFramePixelBuffer::getBufferRW(const Rect& r, int* stride_)\n{\n  *stride_ = stride;\n  return &data[(r.tl.x + (r.tl.y * stride)) * format.bpp/8];\n}\n\nvoid FullFramePixelBuffer::commitBufferRW(const Rect& r)\n{\n}\n\nconst rdr::U8* FullFramePixelBuffer::getBuffer(const Rect& r, int* stride_) const\n{\n  *stride_ = stride;\n  return &data[(r.tl.x + (r.tl.y * stride)) * format.bpp/8];\n}\n\n// -=- Managed pixel buffer class\n// Automatically allocates enough space for the specified format & area\n\nManagedPixelBuffer::ManagedPixelBuffer()\n  : datasize(0)\n{\n  checkDataSize();\n};\n\nManagedPixelBuffer::ManagedPixelBuffer(const PixelFormat& pf, int w, int h)\n  : FullFramePixelBuffer(pf, w, h, NULL, w), datasize(0)\n{\n  checkDataSize();\n};\n\nManagedPixelBuffer::~ManagedPixelBuffer() {\n  if (data) delete [] data;\n};\n\n\nvoid\nManagedPixelBuffer::setPF(const PixelFormat &pf) {\n  format = pf; checkDataSize();\n};\nvoid\nManagedPixelBuffer::setSize(int w, int h) {\n  width_ = w; height_ = h; stride = w; checkDataSize();\n};\n\n\ninline void\nManagedPixelBuffer::checkDataSize() {\n  unsigned long new_datasize = width_ * height_ * (format.bpp/8);\n  if (datasize < new_datasize) {\n    vlog.debug(\"reallocating managed buffer (%dx%d)\", width_, height_);\n    if (data) {\n      delete [] data;\n      datasize = 0; data = 0;\n    }\n    if (new_datasize) {\n      data = new U8[new_datasize];\n      if (!data)\n        throw Exception(\"rfb::ManagedPixelBuffer unable to allocate buffer\");\n      datasize = new_datasize;\n    }\n  }\n};\n"], "fixing_code": ["/* Copyright (C) 2002-2005 RealVNC Ltd.  All Rights Reserved.\n * Copyright 2014 Pierre Ossman for Cendio AB\n * \n * This is free software; you can redistribute it and/or modify\n * it under the terms of the GNU General Public License as published by\n * the Free Software Foundation; either version 2 of the License, or\n * (at your option) any later version.\n * \n * This software is distributed in the hope that it will be useful,\n * but WITHOUT ANY WARRANTY; without even the implied warranty of\n * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n * GNU General Public License for more details.\n * \n * You should have received a copy of the GNU General Public License\n * along with this software; if not, write to the Free Software\n * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307,\n * USA.\n */\n\n// -=- PixelBuffer.cxx\n//\n// The PixelBuffer class encapsulates the PixelFormat and dimensions\n// of a block of pixel data.\n\n#include <rfb/Exception.h>\n#include <rfb/LogWriter.h>\n#include <rfb/PixelBuffer.h>\n\nusing namespace rfb;\nusing namespace rdr;\n\nstatic LogWriter vlog(\"PixelBuffer\");\n\n\n// -=- Generic pixel buffer class\n\nPixelBuffer::PixelBuffer(const PixelFormat& pf, int w, int h)\n  : format(pf), width_(w), height_(h) {}\nPixelBuffer::PixelBuffer() : width_(0), height_(0) {}\n\nPixelBuffer::~PixelBuffer() {}\n\n\nvoid\nPixelBuffer::getImage(void* imageBuf, const Rect& r, int outStride) const {\n  int inStride;\n  const U8* data = getBuffer(r, &inStride);\n  // We assume that the specified rectangle is pre-clipped to the buffer\n  int bytesPerPixel = format.bpp/8;\n  int inBytesPerRow = inStride * bytesPerPixel;\n  if (!outStride) outStride = r.width();\n  int outBytesPerRow = outStride * bytesPerPixel;\n  int bytesPerMemCpy = r.width() * bytesPerPixel;\n  U8* imageBufPos = (U8*)imageBuf;\n  const U8* end = data + (inBytesPerRow * r.height());\n  while (data < end) {\n    memcpy(imageBufPos, data, bytesPerMemCpy);\n    imageBufPos += outBytesPerRow;\n    data += inBytesPerRow;\n  }\n}\n\nvoid PixelBuffer::getImage(const PixelFormat& pf, void* imageBuf,\n                           const Rect& r, int stride) const\n{\n  const rdr::U8* srcBuffer;\n  int srcStride;\n\n  if (format.equal(pf)) {\n    getImage(imageBuf, r, stride);\n    return;\n  }\n\n  if (stride == 0)\n    stride = r.width();\n\n  srcBuffer = getBuffer(r, &srcStride);\n\n  pf.bufferFromBuffer((U8*)imageBuf, format, srcBuffer, r.width(), r.height(),\n                      stride, srcStride);\n}\n\n// -=- Modifiable generic pixel buffer class\n\nModifiablePixelBuffer::ModifiablePixelBuffer(const PixelFormat& pf,\n                                             int w, int h)\n  : PixelBuffer(pf, w, h)\n{\n}\n\nModifiablePixelBuffer::ModifiablePixelBuffer()\n{\n}\n\nModifiablePixelBuffer::~ModifiablePixelBuffer()\n{\n}\n\nvoid ModifiablePixelBuffer::fillRect(const Rect& r, const void* pix)\n{\n  int stride;\n  U8 *buf;\n  int w, h, b;\n  Rect drect;\n\n  drect = r;\n  if (!drect.enclosed_by(getRect())) {\n    vlog.error(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",\n               drect.width(), drect.height(), drect.tl.x, drect.tl.y, width_, height_);\n    drect = drect.intersect(getRect());\n  }\n\n  if (drect.is_empty())\n    return;\n\n  w = drect.width();\n  h = drect.height();\n  b = format.bpp/8;\n\n  if (h == 0)\n    return;\n\n  buf = getBufferRW(drect, &stride);\n\n  if (b == 1) {\n    while (h--) {\n      memset(buf, *(const U8*)pix, w);\n      buf += stride * b;\n    }\n  } else {\n    U8 *start;\n    int w1;\n\n    start = buf;\n\n    w1 = w;\n    while (w1--) {\n      memcpy(buf, pix, b);\n      buf += b;\n    }\n    buf += (stride - w) * b;\n    h--;\n\n    while (h--) {\n      memcpy(buf, start, w * b);\n      buf += stride * b;\n    }\n  }\n\n  commitBufferRW(drect);\n}\n\nvoid ModifiablePixelBuffer::imageRect(const Rect& r,\n                                      const void* pixels, int srcStride)\n{\n  int bytesPerPixel = getPF().bpp/8;\n  int destStride;\n  U8* dest = getBufferRW(r, &destStride);\n  int bytesPerDestRow = bytesPerPixel * destStride;\n  if (!srcStride) srcStride = r.width();\n  int bytesPerSrcRow = bytesPerPixel * srcStride;\n  int bytesPerFill = bytesPerPixel * r.width();\n  const U8* src = (const U8*)pixels;\n  U8* end = dest + (bytesPerDestRow * r.height());\n  while (dest < end) {\n    memcpy(dest, src, bytesPerFill);\n    dest += bytesPerDestRow;\n    src += bytesPerSrcRow;\n  }\n  commitBufferRW(r);\n}\n\nvoid ModifiablePixelBuffer::maskRect(const Rect& r,\n                                     const void* pixels, const void* mask_)\n{\n  Rect cr = getRect().intersect(r);\n  if (cr.is_empty()) return;\n  int stride;\n  U8* data = getBufferRW(cr, &stride);\n  U8* mask = (U8*) mask_;\n  int w = cr.width();\n  int h = cr.height();\n  int bpp = getPF().bpp;\n  int pixelStride = r.width();\n  int maskStride = (r.width() + 7) / 8;\n\n  Point offset = Point(cr.tl.x-r.tl.x, cr.tl.y-r.tl.y);\n  mask += offset.y * maskStride;\n  for (int y = 0; y < h; y++) {\n    int cy = offset.y + y;\n    for (int x = 0; x < w; x++) {\n      int cx = offset.x + x;\n      U8* byte = mask + (cx / 8);\n      int bit = 7 - cx % 8;\n      if ((*byte) & (1 << bit)) {\n        switch (bpp) {\n        case 8:\n          ((U8*)data)[y * stride + x] = ((U8*)pixels)[cy * pixelStride + cx];\n          break;\n        case 16:\n          ((U16*)data)[y * stride + x] = ((U16*)pixels)[cy * pixelStride + cx];\n          break;\n        case 32:\n          ((U32*)data)[y * stride + x] = ((U32*)pixels)[cy * pixelStride + cx];\n          break;\n        }\n      }\n    }\n    mask += maskStride;\n  }\n\n  commitBufferRW(cr);\n}\n\nvoid ModifiablePixelBuffer::maskRect(const Rect& r,\n                                     Pixel pixel, const void* mask_)\n{\n  Rect cr = getRect().intersect(r);\n  if (cr.is_empty()) return;\n  int stride;\n  U8* data = getBufferRW(cr, &stride);\n  U8* mask = (U8*) mask_;\n  int w = cr.width();\n  int h = cr.height();\n  int bpp = getPF().bpp;\n  int maskStride = (r.width() + 7) / 8;\n\n  Point offset = Point(cr.tl.x-r.tl.x, cr.tl.y-r.tl.y);\n  mask += offset.y * maskStride;\n  for (int y = 0; y < h; y++) {\n    for (int x = 0; x < w; x++) {\n      int cx = offset.x + x;\n      U8* byte = mask + (cx / 8);\n      int bit = 7 - cx % 8;\n      if ((*byte) & (1 << bit)) {\n        switch (bpp) {\n        case 8:\n          ((U8*)data)[y * stride + x] = pixel;\n          break;\n        case 16:\n          ((U16*)data)[y * stride + x] = pixel;\n          break;\n        case 32:\n          ((U32*)data)[y * stride + x] = pixel;\n          break;\n        }\n      }\n    }\n    mask += maskStride;\n  }\n\n  commitBufferRW(cr);\n}\n\nvoid ModifiablePixelBuffer::copyRect(const Rect &rect,\n                                     const Point &move_by_delta)\n{\n  int srcStride, dstStride;\n  const U8* srcData;\n  U8* dstData;\n\n  Rect drect, srect;\n\n  drect = rect;\n  if (!drect.enclosed_by(getRect())) {\n    vlog.error(\"Destination rect %dx%d at %d,%d exceeds framebuffer %dx%d\",\n               drect.width(), drect.height(), drect.tl.x, drect.tl.y, width_, height_);\n    drect = drect.intersect(getRect());\n  }\n\n  if (drect.is_empty())\n    return;\n\n  srect = drect.translate(move_by_delta.negate());\n  if (!srect.enclosed_by(getRect())) {\n    vlog.error(\"Source rect %dx%d at %d,%d exceeds framebuffer %dx%d\",\n               srect.width(), srect.height(), srect.tl.x, srect.tl.y, width_, height_);\n    srect = srect.intersect(getRect());\n    // Need to readjust the destination now that the area has changed\n    drect = srect.translate(move_by_delta);\n  }\n\n  if (srect.is_empty())\n    return;\n\n  srcData = getBuffer(srect, &srcStride);\n  dstData = getBufferRW(drect, &dstStride);\n\n  if (move_by_delta.y == 0) {\n    // Possible overlap. Be careful and use memmove().\n    int h = drect.height();\n    while (h--) {\n      memmove(dstData, srcData, drect.width() * format.bpp/8);\n      dstData += dstStride * format.bpp/8;\n      srcData += srcStride * format.bpp/8;\n    }\n  } else if (move_by_delta.y < 0) {\n    // The data shifted upwards. Copy from top to bottom.\n    int h = drect.height();\n    while (h--) {\n      memcpy(dstData, srcData, drect.width() * format.bpp/8);\n      dstData += dstStride * format.bpp/8;\n      srcData += srcStride * format.bpp/8;\n    }\n  } else {\n    // The data shifted downwards. Copy from bottom to top.\n    int h = drect.height();\n    dstData += (h-1) * dstStride * format.bpp/8;\n    srcData += (h-1) * srcStride * format.bpp/8;\n    while (h--) {\n      memcpy(dstData, srcData, drect.width() * format.bpp/8);\n      dstData -= dstStride * format.bpp/8;\n      srcData -= srcStride * format.bpp/8;\n    }\n  }\n\n  commitBufferRW(drect);\n}\n\nvoid ModifiablePixelBuffer::fillRect(const PixelFormat& pf, const Rect &dest,\n                                     const void* pix)\n{\n  rdr::U8 buf[4];\n  format.bufferFromBuffer(buf, pf, (const rdr::U8*)pix, 1);\n  fillRect(dest, buf);\n}\n\nvoid ModifiablePixelBuffer::imageRect(const PixelFormat& pf, const Rect &dest,\n                                      const void* pixels, int stride)\n{\n  rdr::U8* dstBuffer;\n  int dstStride;\n\n  if (stride == 0)\n    stride = dest.width();\n\n  dstBuffer = getBufferRW(dest, &dstStride);\n  format.bufferFromBuffer(dstBuffer, pf, (const rdr::U8*)pixels,\n                          dest.width(), dest.height(),\n                          dstStride, stride);\n  commitBufferRW(dest);\n}\n\n// -=- Simple pixel buffer with a continuous block of memory\n\nFullFramePixelBuffer::FullFramePixelBuffer(const PixelFormat& pf, int w, int h,\n                                           rdr::U8* data_, int stride_)\n  : ModifiablePixelBuffer(pf, w, h), data(data_), stride(stride_)\n{\n}\n\nFullFramePixelBuffer::FullFramePixelBuffer() : data(0) {}\n\nFullFramePixelBuffer::~FullFramePixelBuffer() {}\n\nrdr::U8* FullFramePixelBuffer::getBufferRW(const Rect& r, int* stride_)\n{\n  *stride_ = stride;\n  return &data[(r.tl.x + (r.tl.y * stride)) * format.bpp/8];\n}\n\nvoid FullFramePixelBuffer::commitBufferRW(const Rect& r)\n{\n}\n\nconst rdr::U8* FullFramePixelBuffer::getBuffer(const Rect& r, int* stride_) const\n{\n  *stride_ = stride;\n  return &data[(r.tl.x + (r.tl.y * stride)) * format.bpp/8];\n}\n\n// -=- Managed pixel buffer class\n// Automatically allocates enough space for the specified format & area\n\nManagedPixelBuffer::ManagedPixelBuffer()\n  : datasize(0)\n{\n  checkDataSize();\n};\n\nManagedPixelBuffer::ManagedPixelBuffer(const PixelFormat& pf, int w, int h)\n  : FullFramePixelBuffer(pf, w, h, NULL, w), datasize(0)\n{\n  checkDataSize();\n};\n\nManagedPixelBuffer::~ManagedPixelBuffer() {\n  if (data) delete [] data;\n};\n\n\nvoid\nManagedPixelBuffer::setPF(const PixelFormat &pf) {\n  format = pf; checkDataSize();\n};\nvoid\nManagedPixelBuffer::setSize(int w, int h) {\n  width_ = w; height_ = h; stride = w; checkDataSize();\n};\n\n\ninline void\nManagedPixelBuffer::checkDataSize() {\n  unsigned long new_datasize = width_ * height_ * (format.bpp/8);\n  if (datasize < new_datasize) {\n    vlog.debug(\"reallocating managed buffer (%dx%d)\", width_, height_);\n    if (data) {\n      delete [] data;\n      datasize = 0; data = 0;\n    }\n    if (new_datasize) {\n      data = new U8[new_datasize];\n      if (!data)\n        throw Exception(\"rfb::ManagedPixelBuffer unable to allocate buffer\");\n      datasize = new_datasize;\n    }\n  }\n};\n"], "filenames": ["common/rfb/PixelBuffer.cxx"], "buggy_code_start_loc": [104], "buggy_code_end_loc": [140], "fixing_code_start_loc": [104], "fixing_code_end_loc": [151], "type": "CWE-119", "message": "Buffer overflow in the ModifiablePixelBuffer::fillRect function in TigerVNC before 1.7.1 allows remote servers to execute arbitrary code via an RRE message with subrectangle outside framebuffer boundaries.", "other": {"cve": {"id": "CVE-2017-5581", "sourceIdentifier": "cve@mitre.org", "published": "2017-02-28T18:59:00.360", "lastModified": "2018-01-05T02:31:46.963", "vulnStatus": "Modified", "descriptions": [{"lang": "en", "value": "Buffer overflow in the ModifiablePixelBuffer::fillRect function in TigerVNC before 1.7.1 allows remote servers to execute arbitrary code via an RRE message with subrectangle outside framebuffer boundaries."}, {"lang": "es", "value": "Desbordamiento de b\u00fafer en la funci\u00f3n ModifiablePixelBuffer::fillRect en TigerVNC en versiones anteriores a 1.7.1 permite a servidores remotos ejecutar c\u00f3digo arbitrario a trav\u00e9s de un mensaje RRE con un subrectangulo fuera de los l\u00edmites del marco del b\u00fafer."}], "metrics": {"cvssMetricV30": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "3.0", "vectorString": "CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H", "attackVector": "NETWORK", "attackComplexity": "LOW", "privilegesRequired": "NONE", "userInteraction": "NONE", "scope": "UNCHANGED", "confidentialityImpact": "HIGH", "integrityImpact": "HIGH", "availabilityImpact": "HIGH", "baseScore": 9.8, "baseSeverity": "CRITICAL"}, "exploitabilityScore": 3.9, "impactScore": 5.9}], "cvssMetricV2": [{"source": "nvd@nist.gov", "type": "Primary", "cvssData": {"version": "2.0", "vectorString": "AV:N/AC:M/Au:N/C:P/I:P/A:P", "accessVector": "NETWORK", "accessComplexity": "MEDIUM", "authentication": "NONE", "confidentialityImpact": "PARTIAL", "integrityImpact": "PARTIAL", "availabilityImpact": "PARTIAL", "baseScore": 6.8}, "baseSeverity": "MEDIUM", "exploitabilityScore": 8.6, "impactScore": 6.4, "acInsufInfo": false, "obtainAllPrivilege": false, "obtainUserPrivilege": false, "obtainOtherPrivilege": false, "userInteractionRequired": false}]}, "weaknesses": [{"source": "nvd@nist.gov", "type": "Primary", "description": [{"lang": "en", "value": "CWE-119"}]}], "configurations": [{"nodes": [{"operator": "OR", "negate": false, "cpeMatch": [{"vulnerable": true, "criteria": "cpe:2.3:a:tigervnc:tigervnc:*:*:*:*:*:*:*:*", "versionEndIncluding": "1.7", "matchCriteriaId": "990779CD-71C1-4725-A6AF-C1CE09DDE0DC"}]}]}], "references": [{"url": "http://rhn.redhat.com/errata/RHSA-2017-0630.html", "source": "cve@mitre.org"}, {"url": "http://www.openwall.com/lists/oss-security/2017/01/22/1", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.openwall.com/lists/oss-security/2017/01/25/6", "source": "cve@mitre.org", "tags": ["Mailing List", "Patch", "Third Party Advisory"]}, {"url": "http://www.securityfocus.com/bid/95789", "source": "cve@mitre.org", "tags": ["Third Party Advisory", "VDB Entry"]}, {"url": "https://access.redhat.com/errata/RHSA-2017:2000", "source": "cve@mitre.org"}, {"url": "https://github.com/TigerVNC/tigervnc/commit/18c020124ff1b2441f714da2017f63dba50720ba", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TigerVNC/tigervnc/pull/399", "source": "cve@mitre.org", "tags": ["Patch", "Third Party Advisory"]}, {"url": "https://github.com/TigerVNC/tigervnc/releases/tag/v1.7.1", "source": "cve@mitre.org", "tags": ["Release Notes", "Third Party Advisory"]}, {"url": "https://security.gentoo.org/glsa/201702-19", "source": "cve@mitre.org"}]}, "github_commit_url": "https://github.com/TigerVNC/tigervnc/commit/18c020124ff1b2441f714da2017f63dba50720ba"}}